
BICICLETTA_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004878  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b20  08004b20  000060d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004b20  08004b20  000060d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b20  08004b20  000060d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b20  08004b20  00005b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b24  08004b24  00005b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08004b28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08004b38  00006010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08004b98  00006070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005f4  240000d0  08004bf8  000060d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240006c4  08004bf8  000066c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012eb0  00000000  00000000  000060fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000247c  00000000  00000000  00018fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d70  00000000  00000000  0001b430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a2a  00000000  00000000  0001c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039f75  00000000  00000000  0001cbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000108c8  00000000  00000000  00056b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0017ee71  00000000  00000000  00067407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e6278  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000037e0  00000000  00000000  001e62bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  001e9a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004af8 	.word	0x08004af8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08004af8 	.word	0x08004af8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
#ifdef DEBUG
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET))
 800040a:	e001      	b.n	8000410 <main+0xc>
#endif
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f000 fb86 	bl	8000b1c <HAL_Init>
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET))
 8000410:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <main+0x84>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1f7      	bne.n	800040c <main+0x8>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041c:	f000 f836 	bl	800048c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000420:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <main+0x84>)
 8000422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000426:	4a18      	ldr	r2, [pc, #96]	@ (8000488 <main+0x84>)
 8000428:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800042c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <main+0x84>)
 8000432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800043e:	2000      	movs	r0, #0
 8000440:	f001 fb36 	bl	8001ab0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000444:	2100      	movs	r1, #0
 8000446:	2000      	movs	r0, #0
 8000448:	f001 fb4c 	bl	8001ae4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800044c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000450:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000452:	bf00      	nop
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <main+0x84>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800045c:	2b00      	cmp	r3, #0
 800045e:	d104      	bne.n	800046a <main+0x66>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	dcf4      	bgt.n	8000454 <main+0x50>
if ( timeout < 0 )
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	da01      	bge.n	8000474 <main+0x70>
{
Error_Handler();
 8000470:	f000 f974 	bl	800075c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f000 f91c 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000478:	f000 f900 	bl	800067c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800047c:	f000 f8cc 	bl	8000618 <MX_USB_OTG_FS_PCD_Init>
  MX_ETH_Init();
 8000480:	f000 f87e 	bl	8000580 <MX_ETH_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <main+0x80>
 8000488:	58024400 	.word	0x58024400

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b09c      	sub	sp, #112	@ 0x70
 8000490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000496:	224c      	movs	r2, #76	@ 0x4c
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f004 faff 	bl	8004a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2220      	movs	r2, #32
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f004 faf9 	bl	8004a9e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004ac:	2004      	movs	r0, #4
 80004ae:	f001 fc5d 	bl	8001d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b2:	2300      	movs	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	4b30      	ldr	r3, [pc, #192]	@ (8000578 <SystemClock_Config+0xec>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000578 <SystemClock_Config+0xec>)
 80004bc:	f023 0301 	bic.w	r3, r3, #1
 80004c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000578 <SystemClock_Config+0xec>)
 80004c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	4b2b      	ldr	r3, [pc, #172]	@ (800057c <SystemClock_Config+0xf0>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a2a      	ldr	r2, [pc, #168]	@ (800057c <SystemClock_Config+0xf0>)
 80004d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b28      	ldr	r3, [pc, #160]	@ (800057c <SystemClock_Config+0xf0>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004e4:	bf00      	nop
 80004e6:	4b25      	ldr	r3, [pc, #148]	@ (800057c <SystemClock_Config+0xf0>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004f2:	d1f8      	bne.n	80004e6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f4:	2301      	movs	r3, #1
 80004f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80004fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fe:	2302      	movs	r3, #2
 8000500:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000502:	2302      	movs	r3, #2
 8000504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000506:	2301      	movs	r3, #1
 8000508:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800050a:	2364      	movs	r3, #100	@ 0x64
 800050c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800050e:	2302      	movs	r3, #2
 8000510:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000512:	2302      	movs	r3, #2
 8000514:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000516:	2302      	movs	r3, #2
 8000518:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800051a:	230c      	movs	r3, #12
 800051c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800051e:	2300      	movs	r3, #0
 8000520:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fc88 	bl	8001e40 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000536:	f000 f911 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	233f      	movs	r3, #63	@ 0x3f
 800053c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2303      	movs	r3, #3
 8000540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000546:	2308      	movs	r3, #8
 8000548:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800054a:	2340      	movs	r3, #64	@ 0x40
 800054c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800054e:	2340      	movs	r3, #64	@ 0x40
 8000550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000556:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000558:	2340      	movs	r3, #64	@ 0x40
 800055a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2102      	movs	r1, #2
 8000560:	4618      	mov	r0, r3
 8000562:	f002 f8c7 	bl	80026f4 <HAL_RCC_ClockConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800056c:	f000 f8f6 	bl	800075c <Error_Handler>
  }
}
 8000570:	bf00      	nop
 8000572:	3770      	adds	r7, #112	@ 0x70
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	58000400 	.word	0x58000400
 800057c:	58024800 	.word	0x58024800

08000580 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000584:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <MX_ETH_Init+0x80>)
 8000586:	4a1f      	ldr	r2, [pc, #124]	@ (8000604 <MX_ETH_Init+0x84>)
 8000588:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800058a:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ETH_Init+0x88>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ETH_Init+0x88>)
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ETH_Init+0x88>)
 8000598:	22e1      	movs	r2, #225	@ 0xe1
 800059a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ETH_Init+0x88>)
 800059e:	2200      	movs	r2, #0
 80005a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ETH_Init+0x88>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ETH_Init+0x88>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_ETH_Init+0x80>)
 80005b0:	4a15      	ldr	r2, [pc, #84]	@ (8000608 <MX_ETH_Init+0x88>)
 80005b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_ETH_Init+0x80>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_ETH_Init+0x80>)
 80005bc:	4a13      	ldr	r2, [pc, #76]	@ (800060c <MX_ETH_Init+0x8c>)
 80005be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_ETH_Init+0x80>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	@ (8000610 <MX_ETH_Init+0x90>)
 80005c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_ETH_Init+0x80>)
 80005c8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80005cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005ce:	480c      	ldr	r0, [pc, #48]	@ (8000600 <MX_ETH_Init+0x80>)
 80005d0:	f000 fc8a 	bl	8000ee8 <HAL_ETH_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80005da:	f000 f8bf 	bl	800075c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80005de:	2238      	movs	r2, #56	@ 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	480c      	ldr	r0, [pc, #48]	@ (8000614 <MX_ETH_Init+0x94>)
 80005e4:	f004 fa5b 	bl	8004a9e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <MX_ETH_Init+0x94>)
 80005ea:	2221      	movs	r2, #33	@ 0x21
 80005ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_ETH_Init+0x94>)
 80005f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <MX_ETH_Init+0x94>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	24000124 	.word	0x24000124
 8000604:	40028000 	.word	0x40028000
 8000608:	240006b8 	.word	0x240006b8
 800060c:	24000070 	.word	0x24000070
 8000610:	24000010 	.word	0x24000010
 8000614:	240000ec 	.word	0x240000ec

08000618 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800061e:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000620:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000624:	2209      	movs	r2, #9
 8000626:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800062a:	2202      	movs	r2, #2
 800062c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000630:	2200      	movs	r2, #0
 8000632:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000636:	2202      	movs	r2, #2
 8000638:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800063c:	2201      	movs	r2, #1
 800063e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000642:	2200      	movs	r2, #0
 8000644:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000648:	2200      	movs	r2, #0
 800064a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800064e:	2201      	movs	r2, #1
 8000650:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000654:	2201      	movs	r2, #1
 8000656:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800065a:	2200      	movs	r2, #0
 800065c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000660:	f001 fa54 	bl	8001b0c <HAL_PCD_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800066a:	f000 f877 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	240001d4 	.word	0x240001d4
 8000678:	40080000 	.word	0x40080000

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000682:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <MX_DMA_Init+0x30>)
 8000684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000688:	4a08      	ldr	r2, [pc, #32]	@ (80006ac <MX_DMA_Init+0x30>)
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_DMA_Init+0x30>)
 8000694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	58024400 	.word	0x58024400

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <MX_GPIO_Init+0xa8>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006bc:	4a26      	ldr	r2, [pc, #152]	@ (8000758 <MX_GPIO_Init+0xa8>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <MX_GPIO_Init+0xa8>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d4:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <MX_GPIO_Init+0xa8>)
 80006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006da:	4a1f      	ldr	r2, [pc, #124]	@ (8000758 <MX_GPIO_Init+0xa8>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_GPIO_Init+0xa8>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <MX_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a17      	ldr	r2, [pc, #92]	@ (8000758 <MX_GPIO_Init+0xa8>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a10      	ldr	r2, [pc, #64]	@ (8000758 <MX_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <MX_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_GPIO_Init+0xa8>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000734:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <MX_GPIO_Init+0xa8>)
 8000736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800073a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_GPIO_Init+0xa8>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	371c      	adds	r7, #28
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	58024400 	.word	0x58024400

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <HAL_MspInit+0x3c>)
 8000770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000774:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <HAL_MspInit+0x3c>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_MspInit+0x3c>)
 8000780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2005      	movs	r0, #5
 8000792:	f000 fb74 	bl	8000e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000796:	2005      	movs	r0, #5
 8000798:	f000 fb8b 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	58024400 	.word	0x58024400

080007a8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	@ 0x38
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a59      	ldr	r2, [pc, #356]	@ (800092c <HAL_ETH_MspInit+0x184>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	f040 80ab 	bne.w	8000922 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80007cc:	4b58      	ldr	r3, [pc, #352]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 80007ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007d2:	4a57      	ldr	r2, [pc, #348]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 80007d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007dc:	4b54      	ldr	r3, [pc, #336]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 80007de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007e6:	623b      	str	r3, [r7, #32]
 80007e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80007ea:	4b51      	ldr	r3, [pc, #324]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 80007ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f0:	4a4f      	ldr	r2, [pc, #316]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 80007f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 80007fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000808:	4b49      	ldr	r3, [pc, #292]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 800080a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800080e:	4a48      	ldr	r2, [pc, #288]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000818:	4b45      	ldr	r3, [pc, #276]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 800081a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800081e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b42      	ldr	r3, [pc, #264]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800082c:	4a40      	ldr	r2, [pc, #256]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000836:	4b3e      	ldr	r3, [pc, #248]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b3a      	ldr	r3, [pc, #232]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800084a:	4a39      	ldr	r2, [pc, #228]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000854:	4b36      	ldr	r3, [pc, #216]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b33      	ldr	r3, [pc, #204]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000868:	4a31      	ldr	r2, [pc, #196]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000872:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000880:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000886:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800088c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <HAL_ETH_MspInit+0x188>)
 8000892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800089e:	2332      	movs	r3, #50	@ 0x32
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ae:	230b      	movs	r3, #11
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	481e      	ldr	r0, [pc, #120]	@ (8000934 <HAL_ETH_MspInit+0x18c>)
 80008ba:	f000 ff49 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008be:	2386      	movs	r3, #134	@ 0x86
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ce:	230b      	movs	r3, #11
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d6:	4619      	mov	r1, r3
 80008d8:	4817      	ldr	r0, [pc, #92]	@ (8000938 <HAL_ETH_MspInit+0x190>)
 80008da:	f000 ff39 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f0:	230b      	movs	r3, #11
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	4810      	ldr	r0, [pc, #64]	@ (800093c <HAL_ETH_MspInit+0x194>)
 80008fc:	f000 ff28 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000900:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000912:	230b      	movs	r3, #11
 8000914:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4808      	ldr	r0, [pc, #32]	@ (8000940 <HAL_ETH_MspInit+0x198>)
 800091e:	f000 ff17 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3738      	adds	r7, #56	@ 0x38
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40028000 	.word	0x40028000
 8000930:	58024400 	.word	0x58024400
 8000934:	58020800 	.word	0x58020800
 8000938:	58020000 	.word	0x58020000
 800093c:	58020400 	.word	0x58020400
 8000940:	58021800 	.word	0x58021800

08000944 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0ba      	sub	sp, #232	@ 0xe8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	22c0      	movs	r2, #192	@ 0xc0
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f004 f89a 	bl	8004a9e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a38      	ldr	r2, [pc, #224]	@ (8000a50 <HAL_PCD_MspInit+0x10c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d169      	bne.n	8000a48 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000974:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000984:	2312      	movs	r3, #18
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800098c:	2303      	movs	r3, #3
 800098e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000994:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000998:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800099a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800099e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80009a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80009a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 fa01 	bl	8002db4 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 80009b8:	f7ff fed0 	bl	800075c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80009bc:	f001 fa30 	bl	8001e20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b24      	ldr	r3, [pc, #144]	@ (8000a54 <HAL_PCD_MspInit+0x110>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	4a23      	ldr	r2, [pc, #140]	@ (8000a54 <HAL_PCD_MspInit+0x110>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d0:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <HAL_PCD_MspInit+0x110>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009de:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80009e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009f8:	230a      	movs	r3, #10
 80009fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4814      	ldr	r0, [pc, #80]	@ (8000a58 <HAL_PCD_MspInit+0x114>)
 8000a06:	f000 fea3 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a22:	4619      	mov	r1, r3
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <HAL_PCD_MspInit+0x114>)
 8000a26:	f000 fe93 	bl	8001750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_PCD_MspInit+0x110>)
 8000a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a30:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_PCD_MspInit+0x110>)
 8000a32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_PCD_MspInit+0x110>)
 8000a3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	37e8      	adds	r7, #232	@ 0xe8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40080000 	.word	0x40080000
 8000a54:	58024400 	.word	0x58024400
 8000a58:	58020000 	.word	0x58020000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <NMI_Handler+0x4>

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <MemManage_Handler+0x4>

08000a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f000 f8a5 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000acc:	f7ff fc04 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f003 ffdb 	bl	8004ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fc83 	bl	8000404 <main>
  bx  lr
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b08:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b0c:	08004b28 	.word	0x08004b28
  ldr r2, =_sbss
 8000b10:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000b14:	240006c4 	.word	0x240006c4

08000b18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC3_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 f9a0 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b28:	f001 ff9a 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <HAL_Init+0x68>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	f003 030f 	and.w	r3, r3, #15
 8000b38:	4913      	ldr	r1, [pc, #76]	@ (8000b88 <HAL_Init+0x6c>)
 8000b3a:	5ccb      	ldrb	r3, [r1, r3]
 8000b3c:	f003 031f 	and.w	r3, r3, #31
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_Init+0x68>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b88 <HAL_Init+0x6c>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b8c <HAL_Init+0x70>)
 8000b5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b60:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <HAL_Init+0x74>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f814 	bl	8000b94 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e002      	b.n	8000b7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b76:	f7ff fdf7 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58024400 	.word	0x58024400
 8000b88:	08004b10 	.word	0x08004b10
 8000b8c:	24000004 	.word	0x24000004
 8000b90:	24000000 	.word	0x24000000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_InitTick+0x60>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e021      	b.n	8000bec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <HAL_InitTick+0x64>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <HAL_InitTick+0x60>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f985 	bl	8000ece <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f94f 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	@ (8000bfc <HAL_InitTick+0x68>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2400000c 	.word	0x2400000c
 8000bf8:	24000000 	.word	0x24000000
 8000bfc:	24000008 	.word	0x24000008

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2400000c 	.word	0x2400000c
 8000c24:	240006c0 	.word	0x240006c0

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	240006c0 	.word	0x240006c0

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffde 	bl	8000c28 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2400000c 	.word	0x2400000c

08000c88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetREVID+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	0c1b      	lsrs	r3, r3, #16
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	5c001000 	.word	0x5c001000

08000ca0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8000cb0:	4904      	ldr	r1, [pc, #16]	@ (8000cc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	604b      	str	r3, [r1, #4]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	58000400 	.word	0x58000400

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	05fa0000 	.word	0x05fa0000

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	@ (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	@ (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	@ 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	@ 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff40 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff33 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffa4 	bl	8000e24 <SysTick_Config>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0e3      	b.n	80010c2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d106      	bne.n	8000f12 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2223      	movs	r2, #35	@ 0x23
 8000f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff fc4b 	bl	80007a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b6e      	ldr	r3, [pc, #440]	@ (80010cc <HAL_ETH_Init+0x1e4>)
 8000f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f18:	4a6c      	ldr	r2, [pc, #432]	@ (80010cc <HAL_ETH_Init+0x1e4>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f22:	4b6a      	ldr	r3, [pc, #424]	@ (80010cc <HAL_ETH_Init+0x1e4>)
 8000f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7a1b      	ldrb	r3, [r3, #8]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff feb1 	bl	8000ca0 <HAL_SYSCFG_ETHInterfaceSelect>
 8000f3e:	e003      	b.n	8000f48 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000f40:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000f44:	f7ff feac 	bl	8000ca0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8000f48:	4b61      	ldr	r3, [pc, #388]	@ (80010d0 <HAL_ETH_Init+0x1e8>)
 8000f4a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000f62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f64:	f7ff fe60 	bl	8000c28 <HAL_GetTick>
 8000f68:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000f6a:	e011      	b.n	8000f90 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000f6c:	f7ff fe5c 	bl	8000c28 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f7a:	d909      	bls.n	8000f90 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2204      	movs	r2, #4
 8000f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	22e0      	movs	r2, #224	@ 0xe0
 8000f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e098      	b.n	80010c2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1e4      	bne.n	8000f6c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f89e 	bl	80010e4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000fa8:	f001 fed4 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a49      	ldr	r2, [pc, #292]	@ (80010d4 <HAL_ETH_Init+0x1ec>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	0c9a      	lsrs	r2, r3, #18
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3a01      	subs	r2, #1
 8000fbc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 fa81 	bl	80014c8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000fce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000fd2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000fe2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d009      	beq.n	8001006 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	22e0      	movs	r2, #224	@ 0xe0
 8000ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e05d      	b.n	80010c2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800100e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001012:	4b31      	ldr	r3, [pc, #196]	@ (80010d8 <HAL_ETH_Init+0x1f0>)
 8001014:	4013      	ands	r3, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6952      	ldr	r2, [r2, #20]
 800101a:	0051      	lsls	r1, r2, #1
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	430b      	orrs	r3, r1
 8001022:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001026:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fae9 	bl	8001602 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 fb2f 	bl	8001694 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	3305      	adds	r3, #5
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	021a      	lsls	r2, r3, #8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	3304      	adds	r3, #4
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	3303      	adds	r3, #3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	061a      	lsls	r2, r3, #24
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	3302      	adds	r3, #2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	3301      	adds	r3, #1
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001074:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001082:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001084:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_ETH_Init+0x1f4>)
 8001096:	430b      	orrs	r3, r1
 8001098:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <HAL_ETH_Init+0x1f8>)
 80010aa:	430b      	orrs	r3, r1
 80010ac:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2210      	movs	r2, #16
 80010bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58000400 	.word	0x58000400
 80010d4:	431bde83 	.word	0x431bde83
 80010d8:	ffff8001 	.word	0xffff8001
 80010dc:	0c020060 	.word	0x0c020060
 80010e0:	0c20c000 	.word	0x0c20c000

080010e4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010fe:	f001 fe29 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8001102:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4a1a      	ldr	r2, [pc, #104]	@ (8001170 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d804      	bhi.n	8001116 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e022      	b.n	800115c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <HAL_ETH_SetMDIOClockRange+0x90>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d204      	bcs.n	8001128 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e019      	b.n	800115c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <HAL_ETH_SetMDIOClockRange+0x94>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d915      	bls.n	800115c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d804      	bhi.n	8001142 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e00c      	b.n	800115c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d804      	bhi.n	8001154 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e003      	b.n	800115c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800115a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	02160ebf 	.word	0x02160ebf
 8001174:	03938700 	.word	0x03938700
 8001178:	05f5e0ff 	.word	0x05f5e0ff
 800117c:	08f0d17f 	.word	0x08f0d17f
 8001180:	0ee6b27f 	.word	0x0ee6b27f

08001184 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001196:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	791b      	ldrb	r3, [r3, #4]
 800119c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800119e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	7b1b      	ldrb	r3, [r3, #12]
 80011a4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80011a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	7b5b      	ldrb	r3, [r3, #13]
 80011ac:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80011ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	7b9b      	ldrb	r3, [r3, #14]
 80011b4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80011b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	7bdb      	ldrb	r3, [r3, #15]
 80011bc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80011be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	7c12      	ldrb	r2, [r2, #16]
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d102      	bne.n	80011ce <ETH_SetMACConfig+0x4a>
 80011c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011cc:	e000      	b.n	80011d0 <ETH_SetMACConfig+0x4c>
 80011ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80011d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	7c52      	ldrb	r2, [r2, #17]
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d102      	bne.n	80011e0 <ETH_SetMACConfig+0x5c>
 80011da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011de:	e000      	b.n	80011e2 <ETH_SetMACConfig+0x5e>
 80011e0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80011e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	7c9b      	ldrb	r3, [r3, #18]
 80011e8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80011ea:	431a      	orrs	r2, r3
               macconf->Speed |
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80011f0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80011f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	7f1b      	ldrb	r3, [r3, #28]
 80011fc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80011fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	7f5b      	ldrb	r3, [r3, #29]
 8001204:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001206:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	7f92      	ldrb	r2, [r2, #30]
 800120c:	2a00      	cmp	r2, #0
 800120e:	d102      	bne.n	8001216 <ETH_SetMACConfig+0x92>
 8001210:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001214:	e000      	b.n	8001218 <ETH_SetMACConfig+0x94>
 8001216:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001218:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	7fdb      	ldrb	r3, [r3, #31]
 800121e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001220:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001228:	2a00      	cmp	r2, #0
 800122a:	d102      	bne.n	8001232 <ETH_SetMACConfig+0xae>
 800122c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001230:	e000      	b.n	8001234 <ETH_SetMACConfig+0xb0>
 8001232:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001234:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800123a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001242:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001244:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800124a:	4313      	orrs	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b56      	ldr	r3, [pc, #344]	@ (80013b0 <ETH_SetMACConfig+0x22c>)
 8001256:	4013      	ands	r3, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	430b      	orrs	r3, r1
 8001260:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001266:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800126e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001270:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001278:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800127a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001282:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001284:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800128c:	2a00      	cmp	r2, #0
 800128e:	d102      	bne.n	8001296 <ETH_SetMACConfig+0x112>
 8001290:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001294:	e000      	b.n	8001298 <ETH_SetMACConfig+0x114>
 8001296:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001298:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4b42      	ldr	r3, [pc, #264]	@ (80013b4 <ETH_SetMACConfig+0x230>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	68f9      	ldr	r1, [r7, #12]
 80012b2:	430b      	orrs	r3, r1
 80012b4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012bc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	4b3a      	ldr	r3, [pc, #232]	@ (80013b8 <ETH_SetMACConfig+0x234>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	68f9      	ldr	r1, [r7, #12]
 80012d6:	430b      	orrs	r3, r1
 80012d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80012e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80012e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d101      	bne.n	80012f6 <ETH_SetMACConfig+0x172>
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	e000      	b.n	80012f8 <ETH_SetMACConfig+0x174>
 80012f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80012f8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001300:	4313      	orrs	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800130a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800130e:	4013      	ands	r3, r2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	68f9      	ldr	r1, [r7, #12]
 8001316:	430b      	orrs	r3, r1
 8001318:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001320:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001328:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001336:	f023 0103 	bic.w	r1, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	430a      	orrs	r2, r1
 8001342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800134e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800136a:	2a00      	cmp	r2, #0
 800136c:	d101      	bne.n	8001372 <ETH_SetMACConfig+0x1ee>
 800136e:	2240      	movs	r2, #64	@ 0x40
 8001370:	e000      	b.n	8001374 <ETH_SetMACConfig+0x1f0>
 8001372:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001374:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800137c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800137e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001386:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001388:	4313      	orrs	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001394:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	430a      	orrs	r2, r1
 80013a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	00048083 	.word	0x00048083
 80013b4:	c0f88000 	.word	0xc0f88000
 80013b8:	fffffef0 	.word	0xfffffef0

080013bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <ETH_SetDMAConfig+0xf8>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	6811      	ldr	r1, [r2, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	430b      	orrs	r3, r1
 80013de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013e2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	791b      	ldrb	r3, [r3, #4]
 80013e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80013ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <ETH_SetDMAConfig+0xfc>)
 8001406:	4013      	ands	r3, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	430b      	orrs	r3, r1
 8001410:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001414:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	7b5b      	ldrb	r3, [r3, #13]
 800141a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001420:	4313      	orrs	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <ETH_SetDMAConfig+0x100>)
 8001432:	4013      	ands	r3, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	430b      	orrs	r3, r1
 800143c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001440:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	7d1b      	ldrb	r3, [r3, #20]
 800144c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800144e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	7f5b      	ldrb	r3, [r3, #29]
 8001454:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001462:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001466:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <ETH_SetDMAConfig+0x104>)
 8001468:	4013      	ands	r3, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	68f9      	ldr	r1, [r7, #12]
 8001470:	430b      	orrs	r3, r1
 8001472:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001476:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	7f1b      	ldrb	r3, [r3, #28]
 800147e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001484:	4313      	orrs	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001490:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <ETH_SetDMAConfig+0x108>)
 8001496:	4013      	ands	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	430b      	orrs	r3, r1
 80014a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014a4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	ffff87fd 	.word	0xffff87fd
 80014b8:	ffff2ffe 	.word	0xffff2ffe
 80014bc:	fffec000 	.word	0xfffec000
 80014c0:	ffc0efef 	.word	0xffc0efef
 80014c4:	7fc0ffff 	.word	0x7fc0ffff

080014c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0a4      	sub	sp, #144	@ 0x90
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014d6:	2300      	movs	r3, #0
 80014d8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001508:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001510:	2300      	movs	r3, #0
 8001512:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001520:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001524:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800152c:	2300      	movs	r3, #0
 800152e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001530:	2301      	movs	r3, #1
 8001532:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001542:	2300      	movs	r3, #0
 8001544:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001546:	2300      	movs	r3, #0
 8001548:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800154a:	2300      	movs	r3, #0
 800154c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800155a:	2301      	movs	r3, #1
 800155c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001560:	2320      	movs	r3, #32
 8001562:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001572:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001578:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800157c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001584:	2302      	movs	r3, #2
 8001586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80015a2:	2300      	movs	r3, #0
 80015a4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fde6 	bl	8001184 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015bc:	2301      	movs	r3, #1
 80015be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015d2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80015e8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	4619      	mov	r1, r3
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fee1 	bl	80013bc <ETH_SetDMAConfig>
}
 80015fa:	bf00      	nop
 80015fc:	3790      	adds	r7, #144	@ 0x90
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e01d      	b.n	800164c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68d9      	ldr	r1, [r3, #12]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	3206      	adds	r2, #6
 8001642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d9de      	bls.n	8001610 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001660:	461a      	mov	r2, r3
 8001662:	2303      	movs	r3, #3
 8001664:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001674:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001684:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e023      	b.n	80016ea <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6919      	ldr	r1, [r3, #16]
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	3212      	adds	r2, #18
 80016e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d9d8      	bls.n	80016a2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001716:	461a      	mov	r2, r3
 8001718:	2303      	movs	r3, #3
 800171a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800172a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800173e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800175e:	4b89      	ldr	r3, [pc, #548]	@ (8001984 <HAL_GPIO_Init+0x234>)
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001762:	e194      	b.n	8001a8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8186 	beq.w	8001a88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d005      	beq.n	8001794 <HAL_GPIO_Init+0x44>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d130      	bne.n	80017f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ca:	2201      	movs	r2, #1
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 0201 	and.w	r2, r3, #1
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d017      	beq.n	8001832 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d123      	bne.n	8001886 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	69b9      	ldr	r1, [r7, #24]
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80e0 	beq.w	8001a88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001988 <HAL_GPIO_Init+0x238>)
 80018ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001988 <HAL_GPIO_Init+0x238>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001988 <HAL_GPIO_Init+0x238>)
 80018da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e6:	4a29      	ldr	r2, [pc, #164]	@ (800198c <HAL_GPIO_Init+0x23c>)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <HAL_GPIO_Init+0x240>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d052      	beq.n	80019b8 <HAL_GPIO_Init+0x268>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a1f      	ldr	r2, [pc, #124]	@ (8001994 <HAL_GPIO_Init+0x244>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d031      	beq.n	800197e <HAL_GPIO_Init+0x22e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1e      	ldr	r2, [pc, #120]	@ (8001998 <HAL_GPIO_Init+0x248>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d02b      	beq.n	800197a <HAL_GPIO_Init+0x22a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a1d      	ldr	r2, [pc, #116]	@ (800199c <HAL_GPIO_Init+0x24c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d025      	beq.n	8001976 <HAL_GPIO_Init+0x226>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <HAL_GPIO_Init+0x250>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01f      	beq.n	8001972 <HAL_GPIO_Init+0x222>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a1b      	ldr	r2, [pc, #108]	@ (80019a4 <HAL_GPIO_Init+0x254>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_GPIO_Init+0x21e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a1a      	ldr	r2, [pc, #104]	@ (80019a8 <HAL_GPIO_Init+0x258>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x21a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a19      	ldr	r2, [pc, #100]	@ (80019ac <HAL_GPIO_Init+0x25c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x216>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <HAL_GPIO_Init+0x260>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x212>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a17      	ldr	r2, [pc, #92]	@ (80019b4 <HAL_GPIO_Init+0x264>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x20e>
 800195a:	2309      	movs	r3, #9
 800195c:	e02d      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800195e:	230a      	movs	r3, #10
 8001960:	e02b      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001962:	2308      	movs	r3, #8
 8001964:	e029      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001966:	2307      	movs	r3, #7
 8001968:	e027      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800196a:	2306      	movs	r3, #6
 800196c:	e025      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800196e:	2305      	movs	r3, #5
 8001970:	e023      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001972:	2304      	movs	r3, #4
 8001974:	e021      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001976:	2303      	movs	r3, #3
 8001978:	e01f      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800197a:	2302      	movs	r3, #2
 800197c:	e01d      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 800197e:	2301      	movs	r3, #1
 8001980:	e01b      	b.n	80019ba <HAL_GPIO_Init+0x26a>
 8001982:	bf00      	nop
 8001984:	58000080 	.word	0x58000080
 8001988:	58024400 	.word	0x58024400
 800198c:	58000400 	.word	0x58000400
 8001990:	58020000 	.word	0x58020000
 8001994:	58020400 	.word	0x58020400
 8001998:	58020800 	.word	0x58020800
 800199c:	58020c00 	.word	0x58020c00
 80019a0:	58021000 	.word	0x58021000
 80019a4:	58021400 	.word	0x58021400
 80019a8:	58021800 	.word	0x58021800
 80019ac:	58021c00 	.word	0x58021c00
 80019b0:	58022000 	.word	0x58022000
 80019b4:	58022400 	.word	0x58022400
 80019b8:	2300      	movs	r3, #0
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ca:	4938      	ldr	r1, [pc, #224]	@ (8001aac <HAL_GPIO_Init+0x35c>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f47f ae63 	bne.w	8001764 <HAL_GPIO_Init+0x14>
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
 8001aa2:	3724      	adds	r7, #36	@ 0x24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	58000400 	.word	0x58000400

08001ab0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001ab8:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_HSEM_FastTake+0x2c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3320      	adds	r3, #32
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <HAL_HSEM_FastTake+0x30>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e000      	b.n	8001ace <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	58026400 	.word	0x58026400
 8001ae0:	80000300 	.word	0x80000300

08001ae4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001aee:	4906      	ldr	r1, [pc, #24]	@ (8001b08 <HAL_HSEM_Release+0x24>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	58026400 	.word	0x58026400

08001b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0fe      	b.n	8001d1c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe ff06 	bl	8000944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 fd15 	bl	8004574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7c1a      	ldrb	r2, [r3, #16]
 8001b52:	f88d 2000 	strb.w	r2, [sp]
 8001b56:	3304      	adds	r3, #4
 8001b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5a:	f002 fc99 	bl	8004490 <USB_CoreInit>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0d5      	b.n	8001d1c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fd0d 	bl	8004596 <USB_SetCurrentMode>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2202      	movs	r2, #2
 8001b86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0c6      	b.n	8001d1c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e04a      	b.n	8001c2a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3315      	adds	r3, #21
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3314      	adds	r3, #20
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	b298      	uxth	r0, r3
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	332e      	adds	r3, #46	@ 0x2e
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	3318      	adds	r3, #24
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	331c      	adds	r3, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3320      	adds	r3, #32
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3324      	adds	r3, #36	@ 0x24
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	3301      	adds	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	791b      	ldrb	r3, [r3, #4]
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d3af      	bcc.n	8001b94 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e044      	b.n	8001cc4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d3b5      	bcc.n	8001c3a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7c1a      	ldrb	r2, [r3, #16]
 8001cd6:	f88d 2000 	strb.w	r2, [sp]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cde:	f002 fca7 	bl	8004630 <USB_DevInit>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e013      	b.n	8001d1c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7b1b      	ldrb	r3, [r3, #12]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f80a 	bl	8001d24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 fe62 	bl	80049de <USB_DevDisconnect>

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_PCDEx_ActivateLPM+0x44>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	10000003 	.word	0x10000003

08001d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d74:	4b29      	ldr	r3, [pc, #164]	@ (8001e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	2b06      	cmp	r3, #6
 8001d7e:	d00a      	beq.n	8001d96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d80:	4b26      	ldr	r3, [pc, #152]	@ (8001e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d001      	beq.n	8001d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e040      	b.n	8001e14 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e03e      	b.n	8001e14 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d96:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001d9e:	491f      	ldr	r1, [pc, #124]	@ (8001e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001da6:	f7fe ff3f 	bl	8000c28 <HAL_GetTick>
 8001daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001dac:	e009      	b.n	8001dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001dae:	f7fe ff3b 	bl	8000c28 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dbc:	d901      	bls.n	8001dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e028      	b.n	8001e14 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dce:	d1ee      	bne.n	8001dae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b1e      	cmp	r3, #30
 8001dd4:	d008      	beq.n	8001de8 <HAL_PWREx_ConfigSupply+0x7c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dda:	d005      	beq.n	8001de8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b1d      	cmp	r3, #29
 8001de0:	d002      	beq.n	8001de8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b2d      	cmp	r3, #45	@ 0x2d
 8001de6:	d114      	bne.n	8001e12 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001de8:	f7fe ff1e 	bl	8000c28 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dee:	e009      	b.n	8001e04 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001df0:	f7fe ff1a 	bl	8000c28 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dfe:	d901      	bls.n	8001e04 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e007      	b.n	8001e14 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e10:	d1ee      	bne.n	8001df0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	58024800 	.word	0x58024800

08001e20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	58024800 	.word	0x58024800

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	@ 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 bc48 	b.w	80026e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 8088 	beq.w	8001f72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e62:	4b99      	ldr	r3, [pc, #612]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e6c:	4b96      	ldr	r3, [pc, #600]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d007      	beq.n	8001e88 <HAL_RCC_OscConfig+0x48>
 8001e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7a:	2b18      	cmp	r3, #24
 8001e7c:	d111      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62>
 8001e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	4b8f      	ldr	r3, [pc, #572]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d06d      	beq.n	8001f70 <HAL_RCC_OscConfig+0x130>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d169      	bne.n	8001f70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f000 bc21 	b.w	80026e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x7a>
 8001eac:	4b86      	ldr	r3, [pc, #536]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a85      	ldr	r2, [pc, #532]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e02e      	b.n	8001f18 <HAL_RCC_OscConfig+0xd8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x9c>
 8001ec2:	4b81      	ldr	r3, [pc, #516]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a80      	ldr	r2, [pc, #512]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b7e      	ldr	r3, [pc, #504]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xd8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0xc0>
 8001ee6:	4b78      	ldr	r3, [pc, #480]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a77      	ldr	r2, [pc, #476]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b75      	ldr	r3, [pc, #468]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a74      	ldr	r2, [pc, #464]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xd8>
 8001f00:	4b71      	ldr	r3, [pc, #452]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a70      	ldr	r2, [pc, #448]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b6e      	ldr	r3, [pc, #440]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6d      	ldr	r2, [pc, #436]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fe82 	bl	8000c28 <HAL_GetTick>
 8001f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7fe fe7e 	bl	8000c28 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	@ 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e3d4      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f3a:	4b63      	ldr	r3, [pc, #396]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe8>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fe6e 	bl	8000c28 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7fe fe6a 	bl	8000c28 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	@ 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e3c0      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f62:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x110>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80ca 	beq.w	8002114 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f80:	4b51      	ldr	r3, [pc, #324]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x166>
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	2b18      	cmp	r3, #24
 8001f9a:	d156      	bne.n	800204a <HAL_RCC_OscConfig+0x20a>
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d151      	bne.n	800204a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa6:	4b48      	ldr	r3, [pc, #288]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_RCC_OscConfig+0x17e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e392      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0219 	bic.w	r2, r3, #25
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	493f      	ldr	r1, [pc, #252]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fe2a 	bl	8000c28 <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fe26 	bl	8000c28 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e37c      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fea:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	f7fe fe47 	bl	8000c88 <HAL_GetREVID>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002000:	4293      	cmp	r3, r2
 8002002:	d817      	bhi.n	8002034 <HAL_RCC_OscConfig+0x1f4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b40      	cmp	r3, #64	@ 0x40
 800200a:	d108      	bne.n	800201e <HAL_RCC_OscConfig+0x1de>
 800200c:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002014:	4a2c      	ldr	r2, [pc, #176]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8002016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800201c:	e07a      	b.n	8002114 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b2a      	ldr	r3, [pc, #168]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	031b      	lsls	r3, r3, #12
 800202c:	4926      	ldr	r1, [pc, #152]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002032:	e06f      	b.n	8002114 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	4921      	ldr	r1, [pc, #132]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002048:	e064      	b.n	8002114 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d047      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002052:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0219 	bic.w	r2, r3, #25
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	491a      	ldr	r1, [pc, #104]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe fde0 	bl	8000c28 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206c:	f7fe fddc 	bl	8000c28 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e332      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	f7fe fdfd 	bl	8000c88 <HAL_GetREVID>
 800208e:	4603      	mov	r3, r0
 8002090:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002094:	4293      	cmp	r3, r2
 8002096:	d819      	bhi.n	80020cc <HAL_RCC_OscConfig+0x28c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b40      	cmp	r3, #64	@ 0x40
 800209e:	d108      	bne.n	80020b2 <HAL_RCC_OscConfig+0x272>
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80020a8:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ae:	6053      	str	r3, [r2, #4]
 80020b0:	e030      	b.n	8002114 <HAL_RCC_OscConfig+0x2d4>
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	031b      	lsls	r3, r3, #12
 80020c0:	4901      	ldr	r1, [pc, #4]	@ (80020c8 <HAL_RCC_OscConfig+0x288>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
 80020c6:	e025      	b.n	8002114 <HAL_RCC_OscConfig+0x2d4>
 80020c8:	58024400 	.word	0x58024400
 80020cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	4997      	ldr	r1, [pc, #604]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
 80020e0:	e018      	b.n	8002114 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b95      	ldr	r3, [pc, #596]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a94      	ldr	r2, [pc, #592]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe fd9b 	bl	8000c28 <HAL_GetTick>
 80020f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7fe fd97 	bl	8000c28 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e2ed      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002108:	4b8b      	ldr	r3, [pc, #556]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a9 	beq.w	8002274 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	4b85      	ldr	r3, [pc, #532]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800212a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800212c:	4b82      	ldr	r3, [pc, #520]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d007      	beq.n	8002148 <HAL_RCC_OscConfig+0x308>
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b18      	cmp	r3, #24
 800213c:	d13a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x374>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d135      	bne.n	80021b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002148:	4b7b      	ldr	r3, [pc, #492]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_OscConfig+0x320>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	2b80      	cmp	r3, #128	@ 0x80
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e2c1      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002160:	f7fe fd92 	bl	8000c88 <HAL_GetREVID>
 8002164:	4603      	mov	r3, r0
 8002166:	f241 0203 	movw	r2, #4099	@ 0x1003
 800216a:	4293      	cmp	r3, r2
 800216c:	d817      	bhi.n	800219e <HAL_RCC_OscConfig+0x35e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	2b20      	cmp	r3, #32
 8002174:	d108      	bne.n	8002188 <HAL_RCC_OscConfig+0x348>
 8002176:	4b70      	ldr	r3, [pc, #448]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800217e:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002184:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002186:	e075      	b.n	8002274 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002188:	4b6b      	ldr	r3, [pc, #428]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	069b      	lsls	r3, r3, #26
 8002196:	4968      	ldr	r1, [pc, #416]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800219c:	e06a      	b.n	8002274 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800219e:	4b66      	ldr	r3, [pc, #408]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	061b      	lsls	r3, r3, #24
 80021ac:	4962      	ldr	r1, [pc, #392]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021b2:	e05f      	b.n	8002274 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d042      	beq.n	8002242 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fd2e 	bl	8000c28 <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021d0:	f7fe fd2a 	bl	8000c28 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e280      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021e2:	4b55      	ldr	r3, [pc, #340]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021ee:	f7fe fd4b 	bl	8000c88 <HAL_GetREVID>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d817      	bhi.n	800222c <HAL_RCC_OscConfig+0x3ec>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	2b20      	cmp	r3, #32
 8002202:	d108      	bne.n	8002216 <HAL_RCC_OscConfig+0x3d6>
 8002204:	4b4c      	ldr	r3, [pc, #304]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800220c:	4a4a      	ldr	r2, [pc, #296]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800220e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002212:	6053      	str	r3, [r2, #4]
 8002214:	e02e      	b.n	8002274 <HAL_RCC_OscConfig+0x434>
 8002216:	4b48      	ldr	r3, [pc, #288]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	069b      	lsls	r3, r3, #26
 8002224:	4944      	ldr	r1, [pc, #272]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
 800222a:	e023      	b.n	8002274 <HAL_RCC_OscConfig+0x434>
 800222c:	4b42      	ldr	r3, [pc, #264]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	493f      	ldr	r1, [pc, #252]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	4313      	orrs	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
 8002240:	e018      	b.n	8002274 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a3c      	ldr	r2, [pc, #240]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002248:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe fceb 	bl	8000c28 <HAL_GetTick>
 8002252:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002256:	f7fe fce7 	bl	8000c28 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e23d      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002268:	4b33      	ldr	r3, [pc, #204]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d036      	beq.n	80022ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d019      	beq.n	80022bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002288:	4b2b      	ldr	r3, [pc, #172]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228c:	4a2a      	ldr	r2, [pc, #168]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7fe fcc8 	bl	8000c28 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229c:	f7fe fcc4 	bl	8000c28 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e21a      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ae:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80022b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x45c>
 80022ba:	e018      	b.n	80022ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe fcae 	bl	8000c28 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d0:	f7fe fcaa 	bl	8000c28 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e200      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 80022e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d039      	beq.n	800236e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01c      	beq.n	800233c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 8002308:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800230c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800230e:	f7fe fc8b 	bl	8000c28 <HAL_GetTick>
 8002312:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002316:	f7fe fc87 	bl	8000c28 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1dd      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002328:	4b03      	ldr	r3, [pc, #12]	@ (8002338 <HAL_RCC_OscConfig+0x4f8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x4d6>
 8002334:	e01b      	b.n	800236e <HAL_RCC_OscConfig+0x52e>
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800233c:	4b9b      	ldr	r3, [pc, #620]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a9a      	ldr	r2, [pc, #616]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002342:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002346:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002348:	f7fe fc6e 	bl	8000c28 <HAL_GetTick>
 800234c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002350:	f7fe fc6a 	bl	8000c28 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1c0      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002362:	4b92      	ldr	r3, [pc, #584]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8081 	beq.w	800247e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800237c:	4b8c      	ldr	r3, [pc, #560]	@ (80025b0 <HAL_RCC_OscConfig+0x770>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a8b      	ldr	r2, [pc, #556]	@ (80025b0 <HAL_RCC_OscConfig+0x770>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002386:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002388:	f7fe fc4e 	bl	8000c28 <HAL_GetTick>
 800238c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7fe fc4a 	bl	8000c28 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	@ 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1a0      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a2:	4b83      	ldr	r3, [pc, #524]	@ (80025b0 <HAL_RCC_OscConfig+0x770>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d106      	bne.n	80023c4 <HAL_RCC_OscConfig+0x584>
 80023b6:	4b7d      	ldr	r3, [pc, #500]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	4a7c      	ldr	r2, [pc, #496]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c2:	e02d      	b.n	8002420 <HAL_RCC_OscConfig+0x5e0>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x5a6>
 80023cc:	4b77      	ldr	r3, [pc, #476]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d0:	4a76      	ldr	r2, [pc, #472]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d8:	4b74      	ldr	r3, [pc, #464]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023dc:	4a73      	ldr	r2, [pc, #460]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023de:	f023 0304 	bic.w	r3, r3, #4
 80023e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e4:	e01c      	b.n	8002420 <HAL_RCC_OscConfig+0x5e0>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x5c8>
 80023ee:	4b6f      	ldr	r3, [pc, #444]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	4a6e      	ldr	r2, [pc, #440]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fa:	4b6c      	ldr	r3, [pc, #432]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	4a6b      	ldr	r2, [pc, #428]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	@ 0x70
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0x5e0>
 8002408:	4b68      	ldr	r3, [pc, #416]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240c:	4a67      	ldr	r2, [pc, #412]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6713      	str	r3, [r2, #112]	@ 0x70
 8002414:	4b65      	ldr	r3, [pc, #404]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002418:	4a64      	ldr	r2, [pc, #400]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800241a:	f023 0304 	bic.w	r3, r3, #4
 800241e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7fe fbfe 	bl	8000c28 <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7fe fbfa 	bl	8000c28 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e14e      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002446:	4b59      	ldr	r3, [pc, #356]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0ee      	beq.n	8002430 <HAL_RCC_OscConfig+0x5f0>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7fe fbe8 	bl	8000c28 <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7fe fbe4 	bl	8000c28 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e138      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002472:	4b4e      	ldr	r3, [pc, #312]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ee      	bne.n	800245c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 812d 	beq.w	80026e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002488:	4b48      	ldr	r3, [pc, #288]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002490:	2b18      	cmp	r3, #24
 8002492:	f000 80bd 	beq.w	8002610 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	2b02      	cmp	r3, #2
 800249c:	f040 809e 	bne.w	80025dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b42      	ldr	r3, [pc, #264]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a41      	ldr	r2, [pc, #260]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80024a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fbbc 	bl	8000c28 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fbb8 	bl	8000c28 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e10e      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c6:	4b39      	ldr	r3, [pc, #228]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d2:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80024d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024d6:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <HAL_RCC_OscConfig+0x774>)
 80024d8:	4013      	ands	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	430a      	orrs	r2, r1
 80024e6:	4931      	ldr	r1, [pc, #196]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	3b01      	subs	r3, #1
 80024f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fa:	3b01      	subs	r3, #1
 80024fc:	025b      	lsls	r3, r3, #9
 80024fe:	b29b      	uxth	r3, r3
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	3b01      	subs	r3, #1
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002514:	3b01      	subs	r3, #1
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800251c:	4923      	ldr	r1, [pc, #140]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800251e:	4313      	orrs	r3, r2
 8002520:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002522:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	4a21      	ldr	r2, [pc, #132]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800252e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002532:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <HAL_RCC_OscConfig+0x778>)
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800253a:	00d2      	lsls	r2, r2, #3
 800253c:	491b      	ldr	r1, [pc, #108]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800253e:	4313      	orrs	r3, r2
 8002540:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f023 020c 	bic.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	4917      	ldr	r1, [pc, #92]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002554:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	f023 0202 	bic.w	r2, r3, #2
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002560:	4912      	ldr	r1, [pc, #72]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002562:	4313      	orrs	r3, r2
 8002564:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256a:	4a10      	ldr	r2, [pc, #64]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002570:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800257c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800257e:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800258c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258e:	4a07      	ldr	r2, [pc, #28]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002596:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a04      	ldr	r2, [pc, #16]	@ (80025ac <HAL_RCC_OscConfig+0x76c>)
 800259c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fb41 	bl	8000c28 <HAL_GetTick>
 80025a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025a8:	e011      	b.n	80025ce <HAL_RCC_OscConfig+0x78e>
 80025aa:	bf00      	nop
 80025ac:	58024400 	.word	0x58024400
 80025b0:	58024800 	.word	0x58024800
 80025b4:	fffffc0c 	.word	0xfffffc0c
 80025b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fb34 	bl	8000c28 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e08a      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ce:	4b47      	ldr	r3, [pc, #284]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x77c>
 80025da:	e082      	b.n	80026e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b43      	ldr	r3, [pc, #268]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a42      	ldr	r2, [pc, #264]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80025e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fb1e 	bl	8000c28 <HAL_GetTick>
 80025ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fb1a 	bl	8000c28 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e070      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002602:	4b3a      	ldr	r3, [pc, #232]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x7b0>
 800260e:	e068      	b.n	80026e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002610:	4b36      	ldr	r3, [pc, #216]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002616:	4b35      	ldr	r3, [pc, #212]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	2b01      	cmp	r3, #1
 8002622:	d031      	beq.n	8002688 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0203 	and.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d12a      	bne.n	8002688 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d122      	bne.n	8002688 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d11a      	bne.n	8002688 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0a5b      	lsrs	r3, r3, #9
 8002656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d111      	bne.n	8002688 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	0c1b      	lsrs	r3, r3, #16
 8002668:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002670:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d108      	bne.n	8002688 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0e1b      	lsrs	r3, r3, #24
 800267a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002682:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e02b      	b.n	80026e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800268c:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 800268e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002690:	08db      	lsrs	r3, r3, #3
 8002692:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002696:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d01f      	beq.n	80026e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80026a2:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026ae:	f7fe fabb 	bl	8000c28 <HAL_GetTick>
 80026b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80026b4:	bf00      	nop
 80026b6:	f7fe fab7 	bl	8000c28 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	4293      	cmp	r3, r2
 80026c0:	d0f9      	beq.n	80026b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026c2:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80026c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_RCC_OscConfig+0x8b0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026ce:	00d2      	lsls	r2, r2, #3
 80026d0:	4906      	ldr	r1, [pc, #24]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80026d6:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026da:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <HAL_RCC_OscConfig+0x8ac>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3730      	adds	r7, #48	@ 0x30
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58024400 	.word	0x58024400
 80026f0:	ffff0007 	.word	0xffff0007

080026f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e19c      	b.n	8002a42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b8a      	ldr	r3, [pc, #552]	@ (8002934 <HAL_RCC_ClockConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d910      	bls.n	8002738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b87      	ldr	r3, [pc, #540]	@ (8002934 <HAL_RCC_ClockConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 020f 	bic.w	r2, r3, #15
 800271e:	4985      	ldr	r1, [pc, #532]	@ (8002934 <HAL_RCC_ClockConfig+0x240>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b83      	ldr	r3, [pc, #524]	@ (8002934 <HAL_RCC_ClockConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e184      	b.n	8002a42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d010      	beq.n	8002766 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	4b7b      	ldr	r3, [pc, #492]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002750:	429a      	cmp	r2, r3
 8002752:	d908      	bls.n	8002766 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002754:	4b78      	ldr	r3, [pc, #480]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4975      	ldr	r1, [pc, #468]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002762:	4313      	orrs	r3, r2
 8002764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d010      	beq.n	8002794 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	4b70      	ldr	r3, [pc, #448]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800277e:	429a      	cmp	r2, r3
 8002780:	d908      	bls.n	8002794 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002782:	4b6d      	ldr	r3, [pc, #436]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	496a      	ldr	r1, [pc, #424]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002790:	4313      	orrs	r3, r2
 8002792:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	4b64      	ldr	r3, [pc, #400]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d908      	bls.n	80027c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027b0:	4b61      	ldr	r3, [pc, #388]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	495e      	ldr	r1, [pc, #376]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d010      	beq.n	80027f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	4b59      	ldr	r3, [pc, #356]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027da:	429a      	cmp	r2, r3
 80027dc:	d908      	bls.n	80027f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027de:	4b56      	ldr	r3, [pc, #344]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4953      	ldr	r1, [pc, #332]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4b4d      	ldr	r3, [pc, #308]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	429a      	cmp	r2, r3
 800280a:	d908      	bls.n	800281e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f023 020f 	bic.w	r2, r3, #15
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4947      	ldr	r1, [pc, #284]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 800281a:	4313      	orrs	r3, r2
 800281c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d055      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800282a:	4b43      	ldr	r3, [pc, #268]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4940      	ldr	r1, [pc, #256]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002838:	4313      	orrs	r3, r2
 800283a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d107      	bne.n	8002854 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002844:	4b3c      	ldr	r3, [pc, #240]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d121      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0f6      	b.n	8002a42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d107      	bne.n	800286c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800285c:	4b36      	ldr	r3, [pc, #216]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d115      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0ea      	b.n	8002a42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d107      	bne.n	8002884 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002874:	4b30      	ldr	r3, [pc, #192]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0de      	b.n	8002a42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002884:	4b2c      	ldr	r3, [pc, #176]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0d6      	b.n	8002a42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002894:	4b28      	ldr	r3, [pc, #160]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f023 0207 	bic.w	r2, r3, #7
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4925      	ldr	r1, [pc, #148]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a6:	f7fe f9bf 	bl	8000c28 <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ae:	f7fe f9bb 	bl	8000c28 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0be      	b.n	8002a42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d1eb      	bne.n	80028ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d010      	beq.n	8002904 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d208      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f023 020f 	bic.w	r2, r3, #15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	490e      	ldr	r1, [pc, #56]	@ (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002900:	4313      	orrs	r3, r2
 8002902:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_RCC_ClockConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d214      	bcs.n	800293c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b08      	ldr	r3, [pc, #32]	@ (8002934 <HAL_RCC_ClockConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 020f 	bic.w	r2, r3, #15
 800291a:	4906      	ldr	r1, [pc, #24]	@ (8002934 <HAL_RCC_ClockConfig+0x240>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <HAL_RCC_ClockConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e086      	b.n	8002a42 <HAL_RCC_ClockConfig+0x34e>
 8002934:	52002000 	.word	0x52002000
 8002938:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d010      	beq.n	800296a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002954:	429a      	cmp	r2, r3
 8002956:	d208      	bcs.n	800296a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002958:	4b3c      	ldr	r3, [pc, #240]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4939      	ldr	r1, [pc, #228]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 8002966:	4313      	orrs	r3, r2
 8002968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	4b34      	ldr	r3, [pc, #208]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002982:	429a      	cmp	r2, r3
 8002984:	d208      	bcs.n	8002998 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002986:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	492e      	ldr	r1, [pc, #184]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 8002994:	4313      	orrs	r3, r2
 8002996:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d010      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	4b28      	ldr	r3, [pc, #160]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d208      	bcs.n	80029c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029b4:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4922      	ldr	r1, [pc, #136]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d010      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029de:	429a      	cmp	r2, r3
 80029e0:	d208      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029e2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4917      	ldr	r1, [pc, #92]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029f4:	f000 f834 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	4912      	ldr	r1, [pc, #72]	@ (8002a50 <HAL_RCC_ClockConfig+0x35c>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_RCC_ClockConfig+0x358>)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002a50 <HAL_RCC_ClockConfig+0x35c>)
 8002a1c:	5cd3      	ldrb	r3, [r2, r3]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <HAL_RCC_ClockConfig+0x360>)
 8002a2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <HAL_RCC_ClockConfig+0x364>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_RCC_ClockConfig+0x368>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe f8ac 	bl	8000b94 <HAL_InitTick>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	08004b10 	.word	0x08004b10
 8002a54:	24000004 	.word	0x24000004
 8002a58:	24000000 	.word	0x24000000
 8002a5c:	24000008 	.word	0x24000008

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	@ 0x24
 8002a64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a66:	4bb3      	ldr	r3, [pc, #716]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a6e:	2b18      	cmp	r3, #24
 8002a70:	f200 8155 	bhi.w	8002d1e <HAL_RCC_GetSysClockFreq+0x2be>
 8002a74:	a201      	add	r2, pc, #4	@ (adr r2, 8002a7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002ae1 	.word	0x08002ae1
 8002a80:	08002d1f 	.word	0x08002d1f
 8002a84:	08002d1f 	.word	0x08002d1f
 8002a88:	08002d1f 	.word	0x08002d1f
 8002a8c:	08002d1f 	.word	0x08002d1f
 8002a90:	08002d1f 	.word	0x08002d1f
 8002a94:	08002d1f 	.word	0x08002d1f
 8002a98:	08002d1f 	.word	0x08002d1f
 8002a9c:	08002b07 	.word	0x08002b07
 8002aa0:	08002d1f 	.word	0x08002d1f
 8002aa4:	08002d1f 	.word	0x08002d1f
 8002aa8:	08002d1f 	.word	0x08002d1f
 8002aac:	08002d1f 	.word	0x08002d1f
 8002ab0:	08002d1f 	.word	0x08002d1f
 8002ab4:	08002d1f 	.word	0x08002d1f
 8002ab8:	08002d1f 	.word	0x08002d1f
 8002abc:	08002b0d 	.word	0x08002b0d
 8002ac0:	08002d1f 	.word	0x08002d1f
 8002ac4:	08002d1f 	.word	0x08002d1f
 8002ac8:	08002d1f 	.word	0x08002d1f
 8002acc:	08002d1f 	.word	0x08002d1f
 8002ad0:	08002d1f 	.word	0x08002d1f
 8002ad4:	08002d1f 	.word	0x08002d1f
 8002ad8:	08002d1f 	.word	0x08002d1f
 8002adc:	08002b13 	.word	0x08002b13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ae0:	4b94      	ldr	r3, [pc, #592]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002aec:	4b91      	ldr	r3, [pc, #580]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	4a90      	ldr	r2, [pc, #576]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002afe:	e111      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b00:	4b8d      	ldr	r3, [pc, #564]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b02:	61bb      	str	r3, [r7, #24]
      break;
 8002b04:	e10e      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b06:	4b8d      	ldr	r3, [pc, #564]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b08:	61bb      	str	r3, [r7, #24]
      break;
 8002b0a:	e10b      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b0e:	61bb      	str	r3, [r7, #24]
      break;
 8002b10:	e108      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b12:	4b88      	ldr	r3, [pc, #544]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b1c:	4b85      	ldr	r3, [pc, #532]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b28:	4b82      	ldr	r3, [pc, #520]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b32:	4b80      	ldr	r3, [pc, #512]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80e1 	beq.w	8002d18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	f000 8083 	beq.w	8002c64 <HAL_RCC_GetSysClockFreq+0x204>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f200 80a1 	bhi.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x248>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x114>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d056      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b72:	e099      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b74:	4b6f      	ldr	r3, [pc, #444]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d02d      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b80:	4b6c      	ldr	r3, [pc, #432]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	4a6b      	ldr	r2, [pc, #428]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002baa:	4b62      	ldr	r3, [pc, #392]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002bda:	e087      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bee:	4b51      	ldr	r3, [pc, #324]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c1e:	e065      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c32:	4b40      	ldr	r3, [pc, #256]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c62:	e043      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c76:	4b2f      	ldr	r3, [pc, #188]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ca6:	e021      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cba:	4b1e      	ldr	r3, [pc, #120]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002cec:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf0:	0a5b      	lsrs	r3, r3, #9
 8002cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d10:	ee17 3a90 	vmov	r3, s15
 8002d14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d16:	e005      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
      break;
 8002d1c:	e002      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d20:	61bb      	str	r3, [r7, #24]
      break;
 8002d22:	bf00      	nop
  }

  return sysclockfreq;
 8002d24:	69bb      	ldr	r3, [r7, #24]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	@ 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	58024400 	.word	0x58024400
 8002d38:	03d09000 	.word	0x03d09000
 8002d3c:	003d0900 	.word	0x003d0900
 8002d40:	007a1200 	.word	0x007a1200
 8002d44:	46000000 	.word	0x46000000
 8002d48:	4c742400 	.word	0x4c742400
 8002d4c:	4a742400 	.word	0x4a742400
 8002d50:	4af42400 	.word	0x4af42400

08002d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d5a:	f7ff fe81 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490f      	ldr	r1, [pc, #60]	@ (8002da8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	fa22 f303 	lsr.w	r3, r2, r3
 8002d76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	4a07      	ldr	r2, [pc, #28]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x58>)
 8002d90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d92:	4a07      	ldr	r2, [pc, #28]	@ (8002db0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d98:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x58>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	58024400 	.word	0x58024400
 8002da8:	08004b10 	.word	0x08004b10
 8002dac:	24000004 	.word	0x24000004
 8002db0:	24000000 	.word	0x24000000

08002db4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db8:	b0ca      	sub	sp, #296	@ 0x128
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002dd8:	2500      	movs	r5, #0
 8002dda:	ea54 0305 	orrs.w	r3, r4, r5
 8002dde:	d049      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002de6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002dea:	d02f      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002dec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002df0:	d828      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002df2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002df6:	d01a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002df8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dfc:	d822      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e06:	d007      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e08:	e01c      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0a:	4bb8      	ldr	r3, [pc, #736]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	4ab7      	ldr	r2, [pc, #732]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e16:	e01a      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	2102      	movs	r1, #2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f9d1 	bl	80041c8 <RCCEx_PLL2_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e2c:	e00f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e32:	3328      	adds	r3, #40	@ 0x28
 8002e34:	2102      	movs	r1, #2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 fa78 	bl	800432c <RCCEx_PLL3_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e56:	4ba5      	ldr	r3, [pc, #660]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e64:	4aa1      	ldr	r2, [pc, #644]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e66:	430b      	orrs	r3, r1
 8002e68:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e6a:	e003      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002e80:	f04f 0900 	mov.w	r9, #0
 8002e84:	ea58 0309 	orrs.w	r3, r8, r9
 8002e88:	d047      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d82a      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e94:	a201      	add	r2, pc, #4	@ (adr r2, 8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002eb1 	.word	0x08002eb1
 8002ea0:	08002ebf 	.word	0x08002ebf
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ef3 	.word	0x08002ef3
 8002eac:	08002ef3 	.word	0x08002ef3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb0:	4b8e      	ldr	r3, [pc, #568]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	4a8d      	ldr	r2, [pc, #564]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ebc:	e01a      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 f97e 	bl	80041c8 <RCCEx_PLL2_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ed2:	e00f      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed8:	3328      	adds	r3, #40	@ 0x28
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 fa25 	bl	800432c <RCCEx_PLL3_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ee8:	e004      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efc:	4b7b      	ldr	r3, [pc, #492]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f00:	f023 0107 	bic.w	r1, r3, #7
 8002f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	4a78      	ldr	r2, [pc, #480]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002f26:	f04f 0b00 	mov.w	fp, #0
 8002f2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f2e:	d04c      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f3a:	d030      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002f3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f40:	d829      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f42:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f44:	d02d      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f46:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f48:	d825      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f4a:	2b80      	cmp	r3, #128	@ 0x80
 8002f4c:	d018      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f4e:	2b80      	cmp	r3, #128	@ 0x80
 8002f50:	d821      	bhi.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002f56:	2b40      	cmp	r3, #64	@ 0x40
 8002f58:	d007      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002f5a:	e01c      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f5c:	4b63      	ldr	r3, [pc, #396]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	4a62      	ldr	r2, [pc, #392]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6e:	3308      	adds	r3, #8
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f928 	bl	80041c8 <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f7e:	e011      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f84:	3328      	adds	r3, #40	@ 0x28
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 f9cf 	bl	800432c <RCCEx_PLL3_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f94:	e006      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f9c:	e002      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f9e:	bf00      	nop
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002fac:	4b4f      	ldr	r3, [pc, #316]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	4a4c      	ldr	r2, [pc, #304]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fc0:	e003      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002fd6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002fe0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	d053      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ff2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ff6:	d035      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ff8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ffc:	d82e      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ffe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003002:	d031      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003004:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003008:	d828      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800300a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800300e:	d01a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003014:	d822      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800301a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800301e:	d007      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003020:	e01c      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003022:	4b32      	ldr	r3, [pc, #200]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	4a31      	ldr	r2, [pc, #196]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800302e:	e01c      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003034:	3308      	adds	r3, #8
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f001 f8c5 	bl	80041c8 <RCCEx_PLL2_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003044:	e011      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304a:	3328      	adds	r3, #40	@ 0x28
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f001 f96c 	bl	800432c <RCCEx_PLL3_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800305a:	e006      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003062:	e002      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003072:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003082:	4a1a      	ldr	r2, [pc, #104]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003084:	430b      	orrs	r3, r1
 8003086:	6593      	str	r3, [r2, #88]	@ 0x58
 8003088:	e003      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800309e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80030ac:	460b      	mov	r3, r1
 80030ae:	4313      	orrs	r3, r2
 80030b0:	d056      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80030ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030be:	d038      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80030c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030c4:	d831      	bhi.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030ca:	d034      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80030cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030d0:	d82b      	bhi.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030d6:	d01d      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80030d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030dc:	d825      	bhi.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80030e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80030e8:	e01f      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030f0:	4ba2      	ldr	r3, [pc, #648]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	4aa1      	ldr	r2, [pc, #644]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030fc:	e01c      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003102:	3308      	adds	r3, #8
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f001 f85e 	bl	80041c8 <RCCEx_PLL2_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003112:	e011      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003118:	3328      	adds	r3, #40	@ 0x28
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f001 f905 	bl	800432c <RCCEx_PLL3_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003128:	e006      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003130:	e002      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003140:	4b8e      	ldr	r3, [pc, #568]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003150:	4a8a      	ldr	r2, [pc, #552]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003152:	430b      	orrs	r3, r1
 8003154:	6593      	str	r3, [r2, #88]	@ 0x58
 8003156:	e003      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800316c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003176:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800317a:	460b      	mov	r3, r1
 800317c:	4313      	orrs	r3, r2
 800317e:	d03a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003186:	2b30      	cmp	r3, #48	@ 0x30
 8003188:	d01f      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800318a:	2b30      	cmp	r3, #48	@ 0x30
 800318c:	d819      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800318e:	2b20      	cmp	r3, #32
 8003190:	d00c      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003192:	2b20      	cmp	r3, #32
 8003194:	d815      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d019      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800319a:	2b10      	cmp	r3, #16
 800319c:	d111      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319e:	4b77      	ldr	r3, [pc, #476]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	4a76      	ldr	r2, [pc, #472]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80031aa:	e011      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b0:	3308      	adds	r3, #8
 80031b2:	2102      	movs	r1, #2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f001 f807 	bl	80041c8 <RCCEx_PLL2_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80031c0:	e006      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031c8:	e002      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80031ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80031d8:	4b68      	ldr	r3, [pc, #416]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031dc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	4a65      	ldr	r2, [pc, #404]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e8:	430b      	orrs	r3, r1
 80031ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ec:	e003      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003202:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800320c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003210:	460b      	mov	r3, r1
 8003212:	4313      	orrs	r3, r2
 8003214:	d051      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003220:	d035      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003222:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003226:	d82e      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003228:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800322c:	d031      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800322e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003232:	d828      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003238:	d01a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323e:	d822      	bhi.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003248:	d007      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800324a:	e01c      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800324c:	4b4b      	ldr	r3, [pc, #300]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	4a4a      	ldr	r2, [pc, #296]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003258:	e01c      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800325a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325e:	3308      	adds	r3, #8
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f000 ffb0 	bl	80041c8 <RCCEx_PLL2_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800326e:	e011      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003274:	3328      	adds	r3, #40	@ 0x28
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f001 f857 	bl	800432c <RCCEx_PLL3_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003284:	e006      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800328c:	e002      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10a      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800329c:	4b37      	ldr	r3, [pc, #220]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800329e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032aa:	4a34      	ldr	r2, [pc, #208]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80032b0:	e003      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80032c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80032d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80032d4:	460b      	mov	r3, r1
 80032d6:	4313      	orrs	r3, r2
 80032d8:	d056      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e4:	d033      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80032e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032ea:	d82c      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032f0:	d02f      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80032f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032f6:	d826      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032fc:	d02b      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80032fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003302:	d820      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003308:	d012      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800330a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800330e:	d81a      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d022      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003318:	d115      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331e:	3308      	adds	r3, #8
 8003320:	2101      	movs	r1, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f000 ff50 	bl	80041c8 <RCCEx_PLL2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800332e:	e015      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003334:	3328      	adds	r3, #40	@ 0x28
 8003336:	2101      	movs	r1, #1
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fff7 	bl	800432c <RCCEx_PLL3_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003344:	e00a      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800334c:	e006      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800334e:	bf00      	nop
 8003350:	e004      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800335a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003368:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003372:	4a02      	ldr	r2, [pc, #8]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003374:	430b      	orrs	r3, r1
 8003376:	6513      	str	r3, [r2, #80]	@ 0x50
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800337a:	bf00      	nop
 800337c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800339e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4313      	orrs	r3, r2
 80033a6:	d055      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033b4:	d033      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80033b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ba:	d82c      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c0:	d02f      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c6:	d826      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033cc:	d02b      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80033ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033d2:	d820      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033d8:	d012      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80033da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033de:	d81a      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d022      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80033e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033e8:	d115      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ee:	3308      	adds	r3, #8
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fee8 	bl	80041c8 <RCCEx_PLL2_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033fe:	e015      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003404:	3328      	adds	r3, #40	@ 0x28
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f000 ff8f 	bl	800432c <RCCEx_PLL3_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003414:	e00a      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341c:	e006      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800341e:	bf00      	nop
 8003420:	e004      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800342a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003434:	4ba3      	ldr	r3, [pc, #652]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003444:	4a9f      	ldr	r2, [pc, #636]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003446:	430b      	orrs	r3, r1
 8003448:	6593      	str	r3, [r2, #88]	@ 0x58
 800344a:	e003      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800346a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800346e:	460b      	mov	r3, r1
 8003470:	4313      	orrs	r3, r2
 8003472:	d037      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800347e:	d00e      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003484:	d816      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d018      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800348a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800348e:	d111      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003490:	4b8c      	ldr	r3, [pc, #560]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	4a8b      	ldr	r2, [pc, #556]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800349c:	e00f      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	3308      	adds	r3, #8
 80034a4:	2101      	movs	r1, #1
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fe8e 	bl	80041c8 <RCCEx_PLL2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034b2:	e004      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80034bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034c6:	4b7f      	ldr	r3, [pc, #508]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	4a7b      	ldr	r2, [pc, #492]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d6:	430b      	orrs	r3, r1
 80034d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80034da:	e003      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80034f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80034fe:	460b      	mov	r3, r1
 8003500:	4313      	orrs	r3, r2
 8003502:	d039      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350a:	2b03      	cmp	r3, #3
 800350c:	d81c      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800350e:	a201      	add	r2, pc, #4	@ (adr r2, 8003514 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003551 	.word	0x08003551
 8003518:	08003525 	.word	0x08003525
 800351c:	08003533 	.word	0x08003533
 8003520:	08003551 	.word	0x08003551
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b67      	ldr	r3, [pc, #412]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	4a66      	ldr	r2, [pc, #408]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003530:	e00f      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	3308      	adds	r3, #8
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fe44 	bl	80041c8 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003546:	e004      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800355a:	4b5a      	ldr	r3, [pc, #360]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800355c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355e:	f023 0103 	bic.w	r1, r3, #3
 8003562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003568:	4a56      	ldr	r2, [pc, #344]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800356a:	430b      	orrs	r3, r1
 800356c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800356e:	e003      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003584:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003588:	2300      	movs	r3, #0
 800358a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800358e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003592:	460b      	mov	r3, r1
 8003594:	4313      	orrs	r3, r2
 8003596:	f000 809f 	beq.w	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359a:	4b4b      	ldr	r3, [pc, #300]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a4a      	ldr	r2, [pc, #296]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035a6:	f7fd fb3f 	bl	8000c28 <HAL_GetTick>
 80035aa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ae:	e00b      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7fd fb3a 	bl	8000c28 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	@ 0x64
 80035be:	d903      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c6:	e005      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035c8:	4b3f      	ldr	r3, [pc, #252]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ed      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80035d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d179      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035dc:	4b39      	ldr	r3, [pc, #228]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035e8:	4053      	eors	r3, r2
 80035ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f2:	4b34      	ldr	r3, [pc, #208]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035fe:	4b31      	ldr	r3, [pc, #196]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003602:	4a30      	ldr	r2, [pc, #192]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003608:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	4b2e      	ldr	r3, [pc, #184]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360e:	4a2d      	ldr	r2, [pc, #180]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003614:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003616:	4a2b      	ldr	r2, [pc, #172]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800361c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800362a:	d118      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fd fafc 	bl	8000c28 <HAL_GetTick>
 8003630:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003634:	e00d      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd faf7 	bl	8000c28 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003646:	429a      	cmp	r2, r3
 8003648:	d903      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003650:	e005      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003652:	4b1c      	ldr	r3, [pc, #112]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0eb      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d129      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800366e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003676:	d10e      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003678:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003688:	091a      	lsrs	r2, r3, #4
 800368a:	4b10      	ldr	r3, [pc, #64]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800368c:	4013      	ands	r3, r2
 800368e:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003690:	430b      	orrs	r3, r1
 8003692:	6113      	str	r3, [r2, #16]
 8003694:	e005      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003696:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800369c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036a0:	6113      	str	r3, [r2, #16]
 80036a2:	4b08      	ldr	r3, [pc, #32]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b2:	4a04      	ldr	r2, [pc, #16]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b8:	e00e      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80036c2:	e009      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80036c4:	58024400 	.word	0x58024400
 80036c8:	58024800 	.word	0x58024800
 80036cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f002 0301 	and.w	r3, r2, #1
 80036e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f000 8089 	beq.w	800380c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003700:	2b28      	cmp	r3, #40	@ 0x28
 8003702:	d86b      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	080037e5 	.word	0x080037e5
 8003710:	080037dd 	.word	0x080037dd
 8003714:	080037dd 	.word	0x080037dd
 8003718:	080037dd 	.word	0x080037dd
 800371c:	080037dd 	.word	0x080037dd
 8003720:	080037dd 	.word	0x080037dd
 8003724:	080037dd 	.word	0x080037dd
 8003728:	080037dd 	.word	0x080037dd
 800372c:	080037b1 	.word	0x080037b1
 8003730:	080037dd 	.word	0x080037dd
 8003734:	080037dd 	.word	0x080037dd
 8003738:	080037dd 	.word	0x080037dd
 800373c:	080037dd 	.word	0x080037dd
 8003740:	080037dd 	.word	0x080037dd
 8003744:	080037dd 	.word	0x080037dd
 8003748:	080037dd 	.word	0x080037dd
 800374c:	080037c7 	.word	0x080037c7
 8003750:	080037dd 	.word	0x080037dd
 8003754:	080037dd 	.word	0x080037dd
 8003758:	080037dd 	.word	0x080037dd
 800375c:	080037dd 	.word	0x080037dd
 8003760:	080037dd 	.word	0x080037dd
 8003764:	080037dd 	.word	0x080037dd
 8003768:	080037dd 	.word	0x080037dd
 800376c:	080037e5 	.word	0x080037e5
 8003770:	080037dd 	.word	0x080037dd
 8003774:	080037dd 	.word	0x080037dd
 8003778:	080037dd 	.word	0x080037dd
 800377c:	080037dd 	.word	0x080037dd
 8003780:	080037dd 	.word	0x080037dd
 8003784:	080037dd 	.word	0x080037dd
 8003788:	080037dd 	.word	0x080037dd
 800378c:	080037e5 	.word	0x080037e5
 8003790:	080037dd 	.word	0x080037dd
 8003794:	080037dd 	.word	0x080037dd
 8003798:	080037dd 	.word	0x080037dd
 800379c:	080037dd 	.word	0x080037dd
 80037a0:	080037dd 	.word	0x080037dd
 80037a4:	080037dd 	.word	0x080037dd
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037e5 	.word	0x080037e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	3308      	adds	r3, #8
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fd05 	bl	80041c8 <RCCEx_PLL2_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037c4:	e00f      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	3328      	adds	r3, #40	@ 0x28
 80037cc:	2101      	movs	r1, #1
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fdac 	bl	800432c <RCCEx_PLL3_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037da:	e004      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e2:	e000      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80037e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037ee:	4bbf      	ldr	r3, [pc, #764]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037fc:	4abb      	ldr	r2, [pc, #748]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037fe:	430b      	orrs	r3, r1
 8003800:	6553      	str	r3, [r2, #84]	@ 0x54
 8003802:	e003      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f002 0302 	and.w	r3, r2, #2
 8003818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003822:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	d041      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003832:	2b05      	cmp	r3, #5
 8003834:	d824      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003836:	a201      	add	r2, pc, #4	@ (adr r2, 800383c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	08003889 	.word	0x08003889
 8003840:	08003855 	.word	0x08003855
 8003844:	0800386b 	.word	0x0800386b
 8003848:	08003889 	.word	0x08003889
 800384c:	08003889 	.word	0x08003889
 8003850:	08003889 	.word	0x08003889
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	3308      	adds	r3, #8
 800385a:	2101      	movs	r1, #1
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fcb3 	bl	80041c8 <RCCEx_PLL2_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003868:	e00f      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	3328      	adds	r3, #40	@ 0x28
 8003870:	2101      	movs	r1, #1
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fd5a 	bl	800432c <RCCEx_PLL3_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800387e:	e004      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003892:	4b96      	ldr	r3, [pc, #600]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	f023 0107 	bic.w	r1, r3, #7
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a0:	4a92      	ldr	r2, [pc, #584]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038a2:	430b      	orrs	r3, r1
 80038a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80038a6:	e003      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f002 0304 	and.w	r3, r2, #4
 80038bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d044      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d825      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80038dc:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003931 	.word	0x08003931
 80038e8:	080038fd 	.word	0x080038fd
 80038ec:	08003913 	.word	0x08003913
 80038f0:	08003931 	.word	0x08003931
 80038f4:	08003931 	.word	0x08003931
 80038f8:	08003931 	.word	0x08003931
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003900:	3308      	adds	r3, #8
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fc5f 	bl	80041c8 <RCCEx_PLL2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003910:	e00f      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	3328      	adds	r3, #40	@ 0x28
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fd06 	bl	800432c <RCCEx_PLL3_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003926:	e004      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800392e:	e000      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393a:	4b6c      	ldr	r3, [pc, #432]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393e:	f023 0107 	bic.w	r1, r3, #7
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800394a:	4a68      	ldr	r2, [pc, #416]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800394c:	430b      	orrs	r3, r1
 800394e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003950:	e003      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f002 0320 	and.w	r3, r2, #32
 8003966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	d055      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003986:	d033      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800398c:	d82c      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003992:	d02f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003998:	d826      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800399a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800399e:	d02b      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80039a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039a4:	d820      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039aa:	d012      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80039ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b0:	d81a      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d022      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80039b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ba:	d115      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	3308      	adds	r3, #8
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fbff 	bl	80041c8 <RCCEx_PLL2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039d0:	e015      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d6:	3328      	adds	r3, #40	@ 0x28
 80039d8:	2102      	movs	r1, #2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fca6 	bl	800432c <RCCEx_PLL3_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039e6:	e00a      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ee:	e006      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039f0:	bf00      	nop
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039f4:	bf00      	nop
 80039f6:	e002      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a06:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a16:	4a35      	ldr	r2, [pc, #212]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4313      	orrs	r3, r2
 8003a44:	d058      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a52:	d033      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003a54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a58:	d82c      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5e:	d02f      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a64:	d826      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a6a:	d02b      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003a6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a70:	d820      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a76:	d012      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a7c:	d81a      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d022      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a86:	d115      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fb99 	bl	80041c8 <RCCEx_PLL2_Config>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a9c:	e015      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa2:	3328      	adds	r3, #40	@ 0x28
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fc40 	bl	800432c <RCCEx_PLL3_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ab2:	e00a      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aba:	e006      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003abc:	bf00      	nop
 8003abe:	e004      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ac0:	bf00      	nop
 8003ac2:	e002      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ac4:	bf00      	nop
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10e      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ae2:	4a02      	ldr	r2, [pc, #8]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae8:	e006      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003aea:	bf00      	nop
 8003aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b12:	460b      	mov	r3, r1
 8003b14:	4313      	orrs	r3, r2
 8003b16:	d055      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b24:	d033      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003b26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b2a:	d82c      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b30:	d02f      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b36:	d826      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b3c:	d02b      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003b3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b42:	d820      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b48:	d012      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b4e:	d81a      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d022      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b58:	d115      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	3308      	adds	r3, #8
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fb30 	bl	80041c8 <RCCEx_PLL2_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b6e:	e015      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b74:	3328      	adds	r3, #40	@ 0x28
 8003b76:	2102      	movs	r1, #2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fbd7 	bl	800432c <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b84:	e00a      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b8c:	e006      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b8e:	bf00      	nop
 8003b90:	e004      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b92:	bf00      	nop
 8003b94:	e002      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b96:	bf00      	nop
 8003b98:	e000      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003bb4:	4a9d      	ldr	r2, [pc, #628]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f002 0308 	and.w	r3, r2, #8
 8003bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d01e      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	3328      	adds	r3, #40	@ 0x28
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb96 	bl	800432c <RCCEx_PLL3_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c0c:	4b87      	ldr	r3, [pc, #540]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c1c:	4a83      	ldr	r2, [pc, #524]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	f002 0310 	and.w	r3, r2, #16
 8003c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c32:	2300      	movs	r3, #0
 8003c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	d01e      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c4e:	d10c      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	3328      	adds	r3, #40	@ 0x28
 8003c56:	2102      	movs	r1, #2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fb67 	bl	800432c <RCCEx_PLL3_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c6a:	4b70      	ldr	r3, [pc, #448]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c7a:	4a6c      	ldr	r2, [pc, #432]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c90:	2300      	movs	r3, #0
 8003c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	d03e      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cac:	d022      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cb2:	d81b      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003cbe:	e015      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fa7d 	bl	80041c8 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cd4:	e00f      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	3328      	adds	r3, #40	@ 0x28
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fb24 	bl	800432c <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cea:	e004      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d0e:	4a47      	ldr	r2, [pc, #284]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d14:	e003      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003d34:	460b      	mov	r3, r1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	d03b      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d46:	d01f      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003d48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d4c:	d818      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003d54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d58:	d007      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003d5a:	e011      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5c:	4b33      	ldr	r3, [pc, #204]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	4a32      	ldr	r2, [pc, #200]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d68:	e00f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3328      	adds	r3, #40	@ 0x28
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fada 	bl	800432c <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d92:	4b26      	ldr	r3, [pc, #152]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	4a22      	ldr	r2, [pc, #136]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003dbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003dc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	d034      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ddc:	d007      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003dde:	e011      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	4a11      	ldr	r2, [pc, #68]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003dec:	e00e      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df2:	3308      	adds	r3, #8
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f9e6 	bl	80041c8 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e02:	e003      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e22:	4a02      	ldr	r2, [pc, #8]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003e2a:	bf00      	nop
 8003e2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e46:	2300      	movs	r3, #0
 8003e48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d00c      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	3328      	adds	r3, #40	@ 0x28
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fa65 	bl	800432c <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d038      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e96:	d018      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e9c:	d811      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea2:	d014      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea8:	d80b      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d011      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eb4:	4bc3      	ldr	r3, [pc, #780]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb8:	4ac2      	ldr	r2, [pc, #776]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003edc:	4bb9      	ldr	r3, [pc, #740]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eec:	4ab5      	ldr	r2, [pc, #724]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ef2:	e003      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f12:	460b      	mov	r3, r1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f18:	4baa      	ldr	r3, [pc, #680]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f26:	4aa7      	ldr	r2, [pc, #668]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003f38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f42:	460b      	mov	r3, r1
 8003f44:	4313      	orrs	r3, r2
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f48:	4b9e      	ldr	r3, [pc, #632]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f58:	4a9a      	ldr	r2, [pc, #616]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f74:	460b      	mov	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f7a:	4b92      	ldr	r3, [pc, #584]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f88:	4a8e      	ldr	r2, [pc, #568]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fa0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003faa:	4b86      	ldr	r3, [pc, #536]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	4a85      	ldr	r2, [pc, #532]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fb4:	6113      	str	r3, [r2, #16]
 8003fb6:	4b83      	ldr	r3, [pc, #524]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fb8:	6919      	ldr	r1, [r3, #16]
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003fc2:	4a80      	ldr	r2, [pc, #512]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fda:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	d009      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fe4:	4b77      	ldr	r3, [pc, #476]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff2:	4a74      	ldr	r2, [pc, #464]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004004:	633b      	str	r3, [r7, #48]	@ 0x30
 8004006:	2300      	movs	r3, #0
 8004008:	637b      	str	r3, [r7, #52]	@ 0x34
 800400a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004014:	4b6b      	ldr	r3, [pc, #428]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004018:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004024:	4a67      	ldr	r2, [pc, #412]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004026:	430b      	orrs	r3, r1
 8004028:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	2100      	movs	r1, #0
 8004034:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800403c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d011      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	3308      	adds	r3, #8
 800404c:	2100      	movs	r1, #0
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f8ba 	bl	80041c8 <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800405a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	2100      	movs	r1, #0
 8004074:	6239      	str	r1, [r7, #32]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	627b      	str	r3, [r7, #36]	@ 0x24
 800407c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d011      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	3308      	adds	r3, #8
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f89a 	bl	80041c8 <RCCEx_PLL2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800409a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	2100      	movs	r1, #0
 80040b4:	61b9      	str	r1, [r7, #24]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d011      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	3308      	adds	r3, #8
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f87a 	bl	80041c8 <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	2100      	movs	r1, #0
 80040f4:	6139      	str	r1, [r7, #16]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004100:	460b      	mov	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	d011      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	3328      	adds	r3, #40	@ 0x28
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f90c 	bl	800432c <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800411a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	2100      	movs	r1, #0
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d011      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	3328      	adds	r3, #40	@ 0x28
 800414c:	2101      	movs	r1, #1
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f8ec 	bl	800432c <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800415a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	2100      	movs	r1, #0
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d011      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	3328      	adds	r3, #40	@ 0x28
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f8cc 	bl	800432c <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800419a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80041aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80041be:	46bd      	mov	sp, r7
 80041c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c4:	58024400 	.word	0x58024400

080041c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041d6:	4b53      	ldr	r3, [pc, #332]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d101      	bne.n	80041e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e099      	b.n	800431a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f2:	f7fc fd19 	bl	8000c28 <HAL_GetTick>
 80041f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041f8:	e008      	b.n	800420c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041fa:	f7fc fd15 	bl	8000c28 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e086      	b.n	800431a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800420c:	4b45      	ldr	r3, [pc, #276]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004218:	4b42      	ldr	r3, [pc, #264]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	493f      	ldr	r1, [pc, #252]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	628b      	str	r3, [r1, #40]	@ 0x28
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	3b01      	subs	r3, #1
 8004232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	3b01      	subs	r3, #1
 800423c:	025b      	lsls	r3, r3, #9
 800423e:	b29b      	uxth	r3, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	3b01      	subs	r3, #1
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800425c:	4931      	ldr	r1, [pc, #196]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004262:	4b30      	ldr	r3, [pc, #192]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	492d      	ldr	r1, [pc, #180]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 8004270:	4313      	orrs	r3, r2
 8004272:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004274:	4b2b      	ldr	r3, [pc, #172]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	f023 0220 	bic.w	r2, r3, #32
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4928      	ldr	r1, [pc, #160]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004286:	4b27      	ldr	r3, [pc, #156]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	4a26      	ldr	r2, [pc, #152]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 800428c:	f023 0310 	bic.w	r3, r3, #16
 8004290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004292:	4b24      	ldr	r3, [pc, #144]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 8004294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004296:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <RCCEx_PLL2_Config+0x160>)
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	69d2      	ldr	r2, [r2, #28]
 800429e:	00d2      	lsls	r2, r2, #3
 80042a0:	4920      	ldr	r1, [pc, #128]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042ac:	f043 0310 	orr.w	r3, r3, #16
 80042b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80042b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042bc:	4a19      	ldr	r2, [pc, #100]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042c4:	e00f      	b.n	80042e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d106      	bne.n	80042da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042cc:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	4a14      	ldr	r2, [pc, #80]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80042d8:	e005      	b.n	80042e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042da:	4b12      	ldr	r3, [pc, #72]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 80042ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f2:	f7fc fc99 	bl	8000c28 <HAL_GetTick>
 80042f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042f8:	e008      	b.n	800430c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042fa:	f7fc fc95 	bl	8000c28 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e006      	b.n	800431a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800430c:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <RCCEx_PLL2_Config+0x15c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	58024400 	.word	0x58024400
 8004328:	ffff0007 	.word	0xffff0007

0800432c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800433a:	4b53      	ldr	r3, [pc, #332]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b03      	cmp	r3, #3
 8004344:	d101      	bne.n	800434a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e099      	b.n	800447e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800434a:	4b4f      	ldr	r3, [pc, #316]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a4e      	ldr	r2, [pc, #312]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004356:	f7fc fc67 	bl	8000c28 <HAL_GetTick>
 800435a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800435c:	e008      	b.n	8004370 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800435e:	f7fc fc63 	bl	8000c28 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e086      	b.n	800447e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004370:	4b45      	ldr	r3, [pc, #276]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800437c:	4b42      	ldr	r3, [pc, #264]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	051b      	lsls	r3, r3, #20
 800438a:	493f      	ldr	r1, [pc, #252]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	3b01      	subs	r3, #1
 8004396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	3b01      	subs	r3, #1
 80043a0:	025b      	lsls	r3, r3, #9
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	061b      	lsls	r3, r3, #24
 80043bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043c0:	4931      	ldr	r1, [pc, #196]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043c6:	4b30      	ldr	r3, [pc, #192]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	492d      	ldr	r1, [pc, #180]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4928      	ldr	r1, [pc, #160]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043ea:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ee:	4a26      	ldr	r2, [pc, #152]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 80043f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043f6:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 80043f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043fa:	4b24      	ldr	r3, [pc, #144]	@ (800448c <RCCEx_PLL3_Config+0x160>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	69d2      	ldr	r2, [r2, #28]
 8004402:	00d2      	lsls	r2, r2, #3
 8004404:	4920      	ldr	r1, [pc, #128]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800440a:	4b1f      	ldr	r3, [pc, #124]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	4a1e      	ldr	r2, [pc, #120]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004414:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800441c:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004422:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004426:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004428:	e00f      	b.n	800444a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d106      	bne.n	800443e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004430:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	4a14      	ldr	r2, [pc, #80]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004436:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800443a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800443c:	e005      	b.n	800444a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800443e:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	4a11      	ldr	r2, [pc, #68]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004444:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004448:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800444a:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a0e      	ldr	r2, [pc, #56]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004456:	f7fc fbe7 	bl	8000c28 <HAL_GetTick>
 800445a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800445c:	e008      	b.n	8004470 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800445e:	f7fc fbe3 	bl	8000c28 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e006      	b.n	800447e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <RCCEx_PLL3_Config+0x15c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	58024400 	.word	0x58024400
 800448c:	ffff0007 	.word	0xffff0007

08004490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004490:	b084      	sub	sp, #16
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	f107 001c 	add.w	r0, r7, #28
 800449e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d121      	bne.n	80044ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	4b2c      	ldr	r3, [pc, #176]	@ (800456c <USB_CoreInit+0xdc>)
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 faaa 	bl	8004a3c <USB_CoreReset>
 80044e8:	4603      	mov	r3, r0
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	e01b      	b.n	8004526 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fa9e 	bl	8004a3c <USB_CoreReset>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004504:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
 8004518:	e005      	b.n	8004526 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004526:	7fbb      	ldrb	r3, [r7, #30]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d116      	bne.n	800455a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800453a:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <USB_CoreInit+0xe0>)
 800453c:	4313      	orrs	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f043 0206 	orr.w	r2, r3, #6
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004566:	b004      	add	sp, #16
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	ffbdffbf 	.word	0xffbdffbf
 8004570:	03ee0000 	.word	0x03ee0000

08004574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 0201 	bic.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d115      	bne.n	80045e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045c4:	200a      	movs	r0, #10
 80045c6:	f7fc fb3b 	bl	8000c40 <HAL_Delay>
      ms += 10U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	330a      	adds	r3, #10
 80045ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa25 	bl	8004a20 <USB_GetMode>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d01e      	beq.n	800461a <USB_SetCurrentMode+0x84>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2bc7      	cmp	r3, #199	@ 0xc7
 80045e0:	d9f0      	bls.n	80045c4 <USB_SetCurrentMode+0x2e>
 80045e2:	e01a      	b.n	800461a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045f6:	200a      	movs	r0, #10
 80045f8:	f7fc fb22 	bl	8000c40 <HAL_Delay>
      ms += 10U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	330a      	adds	r3, #10
 8004600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa0c 	bl	8004a20 <USB_GetMode>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <USB_SetCurrentMode+0x84>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2bc7      	cmp	r3, #199	@ 0xc7
 8004612:	d9f0      	bls.n	80045f6 <USB_SetCurrentMode+0x60>
 8004614:	e001      	b.n	800461a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e005      	b.n	8004626 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2bc8      	cmp	r3, #200	@ 0xc8
 800461e:	d101      	bne.n	8004624 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004630:	b084      	sub	sp, #16
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800463e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e009      	b.n	8004664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	3340      	adds	r3, #64	@ 0x40
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	2200      	movs	r2, #0
 800465c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3301      	adds	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b0e      	cmp	r3, #14
 8004668:	d9f2      	bls.n	8004650 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800466a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11c      	bne.n	80046ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e005      	b.n	80046b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046be:	461a      	mov	r2, r3
 80046c0:	2300      	movs	r3, #0
 80046c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d10d      	bne.n	80046e8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046d4:	2100      	movs	r1, #0
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f968 	bl	80049ac <USB_SetDevSpeed>
 80046dc:	e008      	b.n	80046f0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046de:	2101      	movs	r1, #1
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f963 	bl	80049ac <USB_SetDevSpeed>
 80046e6:	e003      	b.n	80046f0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046e8:	2103      	movs	r1, #3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f95e 	bl	80049ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046f0:	2110      	movs	r1, #16
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8fa 	bl	80048ec <USB_FlushTxFifo>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f924 	bl	8004950 <USB_FlushRxFifo>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004718:	461a      	mov	r2, r3
 800471a:	2300      	movs	r3, #0
 800471c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004724:	461a      	mov	r2, r3
 8004726:	2300      	movs	r3, #0
 8004728:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004730:	461a      	mov	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	e043      	b.n	80047c4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800474e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004752:	d118      	bne.n	8004786 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004766:	461a      	mov	r2, r3
 8004768:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e013      	b.n	8004798 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477c:	461a      	mov	r2, r3
 800477e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e008      	b.n	8004798 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004792:	461a      	mov	r2, r3
 8004794:	2300      	movs	r3, #0
 8004796:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b6:	461a      	mov	r2, r3
 80047b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3301      	adds	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047c8:	461a      	mov	r2, r3
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d3b5      	bcc.n	800473c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	e043      	b.n	800485e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047ec:	d118      	bne.n	8004820 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004800:	461a      	mov	r2, r3
 8004802:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	e013      	b.n	8004832 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004816:	461a      	mov	r2, r3
 8004818:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e008      	b.n	8004832 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	2300      	movs	r3, #0
 8004830:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	2300      	movs	r3, #0
 8004842:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004850:	461a      	mov	r2, r3
 8004852:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004856:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	3301      	adds	r3, #1
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004862:	461a      	mov	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4293      	cmp	r3, r2
 8004868:	d3b5      	bcc.n	80047d6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800487c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800488a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800488c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f043 0210 	orr.w	r2, r3, #16
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <USB_DevInit+0x2b4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f043 0208 	orr.w	r2, r3, #8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d105      	bne.n	80048d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <USB_DevInit+0x2b8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e0:	b004      	add	sp, #16
 80048e2:	4770      	bx	lr
 80048e4:	803c3800 	.word	0x803c3800
 80048e8:	40000004 	.word	0x40000004

080048ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004906:	d901      	bls.n	800490c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e01b      	b.n	8004944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	daf2      	bge.n	80048fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	019b      	lsls	r3, r3, #6
 800491c:	f043 0220 	orr.w	r2, r3, #32
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004930:	d901      	bls.n	8004936 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e006      	b.n	8004944 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b20      	cmp	r3, #32
 8004940:	d0f0      	beq.n	8004924 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004968:	d901      	bls.n	800496e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e018      	b.n	80049a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	daf2      	bge.n	800495c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2210      	movs	r2, #16
 800497e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800498c:	d901      	bls.n	8004992 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e006      	b.n	80049a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b10      	cmp	r3, #16
 800499c:	d0f0      	beq.n	8004980 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049cc:	4313      	orrs	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049f8:	f023 0303 	bic.w	r3, r3, #3
 80049fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a54:	d901      	bls.n	8004a5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e01b      	b.n	8004a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	daf2      	bge.n	8004a48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a7e:	d901      	bls.n	8004a84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e006      	b.n	8004a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d0f0      	beq.n	8004a72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <memset>:
 8004a9e:	4402      	add	r2, r0
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d100      	bne.n	8004aa8 <memset+0xa>
 8004aa6:	4770      	bx	lr
 8004aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8004aac:	e7f9      	b.n	8004aa2 <memset+0x4>
	...

08004ab0 <__libc_init_array>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8004ae8 <__libc_init_array+0x38>)
 8004ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8004aec <__libc_init_array+0x3c>)
 8004ab6:	1b64      	subs	r4, r4, r5
 8004ab8:	10a4      	asrs	r4, r4, #2
 8004aba:	2600      	movs	r6, #0
 8004abc:	42a6      	cmp	r6, r4
 8004abe:	d109      	bne.n	8004ad4 <__libc_init_array+0x24>
 8004ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8004af0 <__libc_init_array+0x40>)
 8004ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8004af4 <__libc_init_array+0x44>)
 8004ac4:	f000 f818 	bl	8004af8 <_init>
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	2600      	movs	r6, #0
 8004ace:	42a6      	cmp	r6, r4
 8004ad0:	d105      	bne.n	8004ade <__libc_init_array+0x2e>
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad8:	4798      	blx	r3
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7ee      	b.n	8004abc <__libc_init_array+0xc>
 8004ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae2:	4798      	blx	r3
 8004ae4:	3601      	adds	r6, #1
 8004ae6:	e7f2      	b.n	8004ace <__libc_init_array+0x1e>
 8004ae8:	08004b20 	.word	0x08004b20
 8004aec:	08004b20 	.word	0x08004b20
 8004af0:	08004b20 	.word	0x08004b20
 8004af4:	08004b24 	.word	0x08004b24

08004af8 <_init>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr

08004b04 <_fini>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr
