
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013650  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  081138f0  081138f0  000148f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08113e0c  08113e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08113e14  08113e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08113e18  08113e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000268  10000000  08113e1c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008a20  10000268  08114084  00015268  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  10008c88  08114084  00015c88  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00015268  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029319  00000000  00000000  00015298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b23  00000000  00000000  0003e5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d60  00000000  00000000  000430d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000164d  00000000  00000000  00044e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f8b0  00000000  00000000  00046485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027460  00000000  00000000  00085d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a37e1  00000000  00000000  000ad195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  00250976  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000927c  00000000  00000000  00250a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00259cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000017d8  00000000  00000000  00259d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  0025b4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000268 	.word	0x10000268
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081138d8 	.word	0x081138d8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000026c 	.word	0x1000026c
 81002dc:	081138d8 	.word	0x081138d8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <DegreeSec2RPM>:
 */
#include "DC_motor.h"
#include "main.h"
#include "stdint.h"

float DegreeSec2RPM(float speed_degsec){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = (speed_degsec * 60)/360;
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 810115c <DegreeSec2RPM+0x38>
 8101136:	ee27 7a87 	vmul.f32	s14, s15, s14
 810113a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8101160 <DegreeSec2RPM+0x3c>
 810113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101142:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	ee07 3a90 	vmov	s15, r3
}
 810114c:	eeb0 0a67 	vmov.f32	s0, s15
 8101150:	3714      	adds	r7, #20
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	42700000 	.word	0x42700000
 8101160:	43b40000 	.word	0x43b40000

08101164 <Voltage2Duty>:

float Voltage2Duty(float u){
 8101164:	b480      	push	{r7}
 8101166:	b085      	sub	sp, #20
 8101168:	af00      	add	r7, sp, #0
 810116a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810116e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810117a:	d805      	bhi.n	8101188 <Voltage2Duty+0x24>
		u = -u;
 810117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101180:	eef1 7a67 	vneg.f32	s15, s15
 8101184:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101188:	edd7 7a01 	vldr	s15, [r7, #4]
 810118c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011e0 <Voltage2Duty+0x7c>
 8101190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101194:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8101198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810119c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 81011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 81011a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011e0 <Voltage2Duty+0x7c>
 81011a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 81011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011b0:	dd02      	ble.n	81011b8 <Voltage2Duty+0x54>
		duty = 100;
 81011b2:	4b0c      	ldr	r3, [pc, #48]	@ (81011e4 <Voltage2Duty+0x80>)
 81011b4:	60fb      	str	r3, [r7, #12]
 81011b6:	e009      	b.n	81011cc <Voltage2Duty+0x68>
	}else if(duty < 0){
 81011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 81011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011c4:	d502      	bpl.n	81011cc <Voltage2Duty+0x68>
		duty = 0;
 81011c6:	f04f 0300 	mov.w	r3, #0
 81011ca:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	ee07 3a90 	vmov	s15, r3
}
 81011d2:	eeb0 0a67 	vmov.f32	s0, s15
 81011d6:	3714      	adds	r7, #20
 81011d8:	46bd      	mov	sp, r7
 81011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011de:	4770      	bx	lr
 81011e0:	42c80000 	.word	0x42c80000
 81011e4:	42c80000 	.word	0x42c80000

081011e8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011e8:	b480      	push	{r7}
 81011ea:	b085      	sub	sp, #20
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011f2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011fe:	db02      	blt.n	8101206 <Ref2Direction+0x1e>
		direction = 0;
 8101200:	2300      	movs	r3, #0
 8101202:	73fb      	strb	r3, [r7, #15]
 8101204:	e001      	b.n	810120a <Ref2Direction+0x22>
	} else {
		direction = 1;
 8101206:	2301      	movs	r3, #1
 8101208:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 810120a:	7bfb      	ldrb	r3, [r7, #15]
}
 810120c:	4618      	mov	r0, r3
 810120e:	3714      	adds	r7, #20
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr

08101218 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 8101218:	b5b0      	push	{r4, r5, r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	ed87 0a01 	vstr	s0, [r7, #4]
 8101222:	4603      	mov	r3, r0
 8101224:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 8101226:	6878      	ldr	r0, [r7, #4]
 8101228:	f7ff fa16 	bl	8100658 <__aeabi_f2d>
 810122c:	f04f 0200 	mov.w	r2, #0
 8101230:	4b17      	ldr	r3, [pc, #92]	@ (8101290 <set_PWM_and_dir_back_wheel+0x78>)
 8101232:	f7ff fb93 	bl	810095c <__aeabi_ddiv>
 8101236:	4602      	mov	r2, r0
 8101238:	460b      	mov	r3, r1
 810123a:	4614      	mov	r4, r2
 810123c:	461d      	mov	r5, r3
 810123e:	4b15      	ldr	r3, [pc, #84]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 8101240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101242:	4618      	mov	r0, r3
 8101244:	f7ff f9e6 	bl	8100614 <__aeabi_ui2d>
 8101248:	4602      	mov	r2, r0
 810124a:	460b      	mov	r3, r1
 810124c:	4620      	mov	r0, r4
 810124e:	4629      	mov	r1, r5
 8101250:	f7ff fa5a 	bl	8100708 <__aeabi_dmul>
 8101254:	4602      	mov	r2, r0
 8101256:	460b      	mov	r3, r1
 8101258:	4c0e      	ldr	r4, [pc, #56]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 810125a:	4610      	mov	r0, r2
 810125c:	4619      	mov	r1, r3
 810125e:	f7ff fd2b 	bl	8100cb8 <__aeabi_d2uiz>
 8101262:	4603      	mov	r3, r0
 8101264:	6363      	str	r3, [r4, #52]	@ 0x34

	//ARR:valore massimo che il contatore può raggiungere


	//Qui non ho capito a che serve
	if(direction == 0){
 8101266:	78fb      	ldrb	r3, [r7, #3]
 8101268:	2b00      	cmp	r3, #0
 810126a:	d105      	bne.n	8101278 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810126c:	2200      	movs	r2, #0
 810126e:	2110      	movs	r1, #16
 8101270:	4809      	ldr	r0, [pc, #36]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101272:	f005 fe07 	bl	8106e84 <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101276:	e007      	b.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101278:	78fb      	ldrb	r3, [r7, #3]
 810127a:	2b01      	cmp	r3, #1
 810127c:	d104      	bne.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810127e:	2201      	movs	r2, #1
 8101280:	2110      	movs	r1, #16
 8101282:	4805      	ldr	r0, [pc, #20]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101284:	f005 fdfe 	bl	8106e84 <HAL_GPIO_WritePin>
}
 8101288:	bf00      	nop
 810128a:	3708      	adds	r7, #8
 810128c:	46bd      	mov	sp, r7
 810128e:	bdb0      	pop	{r4, r5, r7, pc}
 8101290:	40590000 	.word	0x40590000
 8101294:	40010000 	.word	0x40010000
 8101298:	58020000 	.word	0x58020000

0810129c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 81012a6:	4603      	mov	r3, r0
 81012a8:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 81012aa:	edd7 7a01 	vldr	s15, [r7, #4]
 81012ae:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012fc <set_PWM_and_dir_front_wheel+0x60>
 81012b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81012b6:	4b12      	ldr	r3, [pc, #72]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ba:	ee07 3a90 	vmov	s15, r3
 81012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012cc:	ee17 2a90 	vmov	r2, s15
 81012d0:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 81012d2:	78fb      	ldrb	r3, [r7, #3]
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d105      	bne.n	81012e4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 81012d8:	2200      	movs	r2, #0
 81012da:	2120      	movs	r1, #32
 81012dc:	4809      	ldr	r0, [pc, #36]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012de:	f005 fdd1 	bl	8106e84 <HAL_GPIO_WritePin>
	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 81012e2:	e007      	b.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012e4:	78fb      	ldrb	r3, [r7, #3]
 81012e6:	2b01      	cmp	r3, #1
 81012e8:	d104      	bne.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 81012ea:	2201      	movs	r2, #1
 81012ec:	2120      	movs	r1, #32
 81012ee:	4805      	ldr	r0, [pc, #20]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012f0:	f005 fdc8 	bl	8106e84 <HAL_GPIO_WritePin>
}
 81012f4:	bf00      	nop
 81012f6:	3708      	adds	r7, #8
 81012f8:	46bd      	mov	sp, r7
 81012fa:	bd80      	pop	{r7, pc}
 81012fc:	42c80000 	.word	0x42c80000
 8101300:	40000400 	.word	0x40000400
 8101304:	58020000 	.word	0x58020000

08101308 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 8101308:	b480      	push	{r7}
 810130a:	b085      	sub	sp, #20
 810130c:	af00      	add	r7, sp, #0
 810130e:	60f8      	str	r0, [r7, #12]
 8101310:	ed87 0a02 	vstr	s0, [r7, #8]
 8101314:	edc7 0a01 	vstr	s1, [r7, #4]
 8101318:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 810131c:	68fb      	ldr	r3, [r7, #12]
 810131e:	68ba      	ldr	r2, [r7, #8]
 8101320:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8101322:	68fb      	ldr	r3, [r7, #12]
 8101324:	687a      	ldr	r2, [r7, #4]
 8101326:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	683a      	ldr	r2, [r7, #0]
 810132c:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	f04f 0200 	mov.w	r2, #0
 8101334:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 8101336:	68fb      	ldr	r3, [r7, #12]
 8101338:	f04f 0200 	mov.w	r2, #0
 810133c:	61da      	str	r2, [r3, #28]

}
 810133e:	bf00      	nop
 8101340:	3714      	adds	r7, #20
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr

0810134a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810134a:	b480      	push	{r7}
 810134c:	b085      	sub	sp, #20
 810134e:	af00      	add	r7, sp, #0
 8101350:	60f8      	str	r0, [r7, #12]
 8101352:	ed87 0a02 	vstr	s0, [r7, #8]
 8101356:	edc7 0a01 	vstr	s1, [r7, #4]
 810135a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	68ba      	ldr	r2, [r7, #8]
 8101362:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	683a      	ldr	r2, [r7, #0]
 8101368:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810136a:	68fb      	ldr	r3, [r7, #12]
 810136c:	687a      	ldr	r2, [r7, #4]
 810136e:	605a      	str	r2, [r3, #4]
}
 8101370:	bf00      	nop
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr

0810137c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810137c:	b480      	push	{r7}
 810137e:	b089      	sub	sp, #36	@ 0x24
 8101380:	af00      	add	r7, sp, #0
 8101382:	60f8      	str	r0, [r7, #12]
 8101384:	ed87 0a02 	vstr	s0, [r7, #8]
 8101388:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810138c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101390:	edd7 7a02 	vldr	s15, [r7, #8]
 8101394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101398:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	edd3 7a00 	vldr	s15, [r3]
 81013a2:	ed97 7a06 	vldr	s14, [r7, #24]
 81013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013aa:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	ed93 7a07 	vldr	s14, [r3, #28]
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	edd3 6a01 	vldr	s13, [r3, #4]
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	edd3 7a03 	vldr	s15, [r3, #12]
 81013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	edd3 7a06 	vldr	s15, [r3, #24]
 81013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	69ba      	ldr	r2, [r7, #24]
 81013da:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 81013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 81013e0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013e8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ec:	68fb      	ldr	r3, [r7, #12]
 81013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 81013f2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013fe:	dd03      	ble.n	8101408 <PID_controller+0x8c>
		u = p->u_max;
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	691b      	ldr	r3, [r3, #16]
 8101404:	61fb      	str	r3, [r7, #28]
 8101406:	e010      	b.n	810142a <PID_controller+0xae>
	}else if(u<p->u_min){
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	edd3 7a05 	vldr	s15, [r3, #20]
 810140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810141a:	d503      	bpl.n	8101424 <PID_controller+0xa8>
		u = p->u_min;
 810141c:	68fb      	ldr	r3, [r7, #12]
 810141e:	695b      	ldr	r3, [r3, #20]
 8101420:	61fb      	str	r3, [r7, #28]
 8101422:	e002      	b.n	810142a <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	693a      	ldr	r2, [r7, #16]
 8101428:	61da      	str	r2, [r3, #28]
	}

	return u;
 810142a:	69fb      	ldr	r3, [r7, #28]
 810142c:	ee07 3a90 	vmov	s15, r3

}
 8101430:	eeb0 0a67 	vmov.f32	s0, s15
 8101434:	3724      	adds	r7, #36	@ 0x24
 8101436:	46bd      	mov	sp, r7
 8101438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143c:	4770      	bx	lr

0810143e <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810143e:	b580      	push	{r7, lr}
 8101440:	b082      	sub	sp, #8
 8101442:	af00      	add	r7, sp, #0
 8101444:	4603      	mov	r3, r0
 8101446:	71fb      	strb	r3, [r7, #7]
 8101448:	79fb      	ldrb	r3, [r7, #7]
 810144a:	4619      	mov	r1, r3
 810144c:	2007      	movs	r0, #7
 810144e:	f000 fa31 	bl	81018b4 <bno055_writeData>
 8101452:	bf00      	nop
 8101454:	3708      	adds	r7, #8
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}

0810145a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810145a:	b580      	push	{r7, lr}
 810145c:	b082      	sub	sp, #8
 810145e:	af00      	add	r7, sp, #0
 8101460:	4603      	mov	r3, r0
 8101462:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101464:	79fb      	ldrb	r3, [r7, #7]
 8101466:	4619      	mov	r1, r3
 8101468:	203d      	movs	r0, #61	@ 0x3d
 810146a:	f000 fa23 	bl	81018b4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810146e:	79fb      	ldrb	r3, [r7, #7]
 8101470:	2b00      	cmp	r3, #0
 8101472:	d103      	bne.n	810147c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101474:	2064      	movs	r0, #100	@ 0x64
 8101476:	f000 fa11 	bl	810189c <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810147a:	e002      	b.n	8101482 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810147c:	2050      	movs	r0, #80	@ 0x50
 810147e:	f000 fa0d 	bl	810189c <bno055_delay>
}
 8101482:	bf00      	nop
 8101484:	3708      	adds	r7, #8
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}

0810148a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810148a:	b580      	push	{r7, lr}
 810148c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810148e:	2000      	movs	r0, #0
 8101490:	f7ff ffe3 	bl	810145a <bno055_setOperationMode>
}
 8101494:	bf00      	nop
 8101496:	bd80      	pop	{r7, pc}

08101498 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101498:	b580      	push	{r7, lr}
 810149a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810149c:	200c      	movs	r0, #12
 810149e:	f7ff ffdc 	bl	810145a <bno055_setOperationMode>
}
 81014a2:	bf00      	nop
 81014a4:	bd80      	pop	{r7, pc}

081014a6 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81014a6:	b580      	push	{r7, lr}
 81014a8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81014aa:	2120      	movs	r1, #32
 81014ac:	203f      	movs	r0, #63	@ 0x3f
 81014ae:	f000 fa01 	bl	81018b4 <bno055_writeData>
  bno055_delay(700);
 81014b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 81014b6:	f000 f9f1 	bl	810189c <bno055_delay>
}
 81014ba:	bf00      	nop
 81014bc:	bd80      	pop	{r7, pc}

081014be <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81014be:	b580      	push	{r7, lr}
 81014c0:	b082      	sub	sp, #8
 81014c2:	af00      	add	r7, sp, #0
  bno055_reset();
 81014c4:	f7ff ffef 	bl	81014a6 <bno055_reset>

  uint8_t id = 0;
 81014c8:	2300      	movs	r3, #0
 81014ca:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81014cc:	1dfb      	adds	r3, r7, #7
 81014ce:	2201      	movs	r2, #1
 81014d0:	4619      	mov	r1, r3
 81014d2:	2000      	movs	r0, #0
 81014d4:	f000 fa22 	bl	810191c <bno055_readData>
  if (id != BNO055_ID) {
    //printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
  }
  bno055_setPage(0);
 81014d8:	2000      	movs	r0, #0
 81014da:	f7ff ffb0 	bl	810143e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81014de:	2100      	movs	r1, #0
 81014e0:	203f      	movs	r0, #63	@ 0x3f
 81014e2:	f000 f9e7 	bl	81018b4 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014e6:	f7ff ffd0 	bl	810148a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014ea:	200a      	movs	r0, #10
 81014ec:	f000 f9d6 	bl	810189c <bno055_delay>
}
 81014f0:	bf00      	nop
 81014f2:	3708      	adds	r7, #8
 81014f4:	46bd      	mov	sp, r7
 81014f6:	bd80      	pop	{r7, pc}

081014f8 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 81014f8:	b580      	push	{r7, lr}
 81014fa:	b084      	sub	sp, #16
 81014fc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 81014fe:	2000      	movs	r0, #0
 8101500:	f7ff ff9d 	bl	810143e <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 8101504:	2300      	movs	r3, #0
 8101506:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8101508:	2300      	movs	r3, #0
 810150a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 810150c:	1dfb      	adds	r3, r7, #7
 810150e:	2201      	movs	r2, #1
 8101510:	4619      	mov	r1, r3
 8101512:	2035      	movs	r0, #53	@ 0x35
 8101514:	f000 fa02 	bl	810191c <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8101518:	79fb      	ldrb	r3, [r7, #7]
 810151a:	099b      	lsrs	r3, r3, #6
 810151c:	b2db      	uxtb	r3, r3
 810151e:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8101520:	79fb      	ldrb	r3, [r7, #7]
 8101522:	091b      	lsrs	r3, r3, #4
 8101524:	b2db      	uxtb	r3, r3
 8101526:	f003 0303 	and.w	r3, r3, #3
 810152a:	b2db      	uxtb	r3, r3
 810152c:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 810152e:	79fb      	ldrb	r3, [r7, #7]
 8101530:	089b      	lsrs	r3, r3, #2
 8101532:	b2db      	uxtb	r3, r3
 8101534:	f003 0303 	and.w	r3, r3, #3
 8101538:	b2db      	uxtb	r3, r3
 810153a:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 810153c:	79fb      	ldrb	r3, [r7, #7]
 810153e:	f003 0303 	and.w	r3, r3, #3
 8101542:	b2db      	uxtb	r3, r3
 8101544:	72bb      	strb	r3, [r7, #10]
  return cal;
 8101546:	68bb      	ldr	r3, [r7, #8]
 8101548:	60fb      	str	r3, [r7, #12]
 810154a:	2300      	movs	r3, #0
 810154c:	7b3a      	ldrb	r2, [r7, #12]
 810154e:	f362 0307 	bfi	r3, r2, #0, #8
 8101552:	7b7a      	ldrb	r2, [r7, #13]
 8101554:	f362 230f 	bfi	r3, r2, #8, #8
 8101558:	7bba      	ldrb	r2, [r7, #14]
 810155a:	f362 4317 	bfi	r3, r2, #16, #8
 810155e:	7bfa      	ldrb	r2, [r7, #15]
 8101560:	f362 631f 	bfi	r3, r2, #24, #8
}
 8101564:	4618      	mov	r0, r3
 8101566:	3710      	adds	r7, #16
 8101568:	46bd      	mov	sp, r7
 810156a:	bd80      	pop	{r7, pc}

0810156c <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 810156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101570:	b09e      	sub	sp, #120	@ 0x78
 8101572:	af00      	add	r7, sp, #0
 8101574:	4603      	mov	r3, r0
 8101576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 810157a:	2000      	movs	r0, #0
 810157c:	f7ff ff5f 	bl	810143e <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101584:	2b20      	cmp	r3, #32
 8101586:	d108      	bne.n	810159a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101588:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810158c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101590:	2208      	movs	r2, #8
 8101592:	4618      	mov	r0, r3
 8101594:	f000 f9c2 	bl	810191c <bno055_readData>
 8101598:	e007      	b.n	81015aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810159a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810159e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015a2:	2206      	movs	r2, #6
 81015a4:	4618      	mov	r0, r3
 81015a6:	f000 f9b9 	bl	810191c <bno055_readData>

  double scale = 1;
 81015aa:	f04f 0200 	mov.w	r2, #0
 81015ae:	4b8b      	ldr	r3, [pc, #556]	@ (81017dc <bno055_getVector+0x270>)
 81015b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81015b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015b8:	2b0e      	cmp	r3, #14
 81015ba:	d109      	bne.n	81015d0 <bno055_getVector+0x64>
    scale = magScale;
 81015bc:	4b88      	ldr	r3, [pc, #544]	@ (81017e0 <bno055_getVector+0x274>)
 81015be:	881b      	ldrh	r3, [r3, #0]
 81015c0:	4618      	mov	r0, r3
 81015c2:	f7ff f827 	bl	8100614 <__aeabi_ui2d>
 81015c6:	4602      	mov	r2, r0
 81015c8:	460b      	mov	r3, r1
 81015ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015ce:	e03e      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 81015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015d4:	2b08      	cmp	r3, #8
 81015d6:	d007      	beq.n	81015e8 <bno055_getVector+0x7c>
 81015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015dc:	2b28      	cmp	r3, #40	@ 0x28
 81015de:	d003      	beq.n	81015e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015e4:	2b2e      	cmp	r3, #46	@ 0x2e
 81015e6:	d109      	bne.n	81015fc <bno055_getVector+0x90>
    scale = accelScale;
 81015e8:	4b7e      	ldr	r3, [pc, #504]	@ (81017e4 <bno055_getVector+0x278>)
 81015ea:	881b      	ldrh	r3, [r3, #0]
 81015ec:	4618      	mov	r0, r3
 81015ee:	f7ff f811 	bl	8100614 <__aeabi_ui2d>
 81015f2:	4602      	mov	r2, r0
 81015f4:	460b      	mov	r3, r1
 81015f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015fa:	e028      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101600:	2b14      	cmp	r3, #20
 8101602:	d109      	bne.n	8101618 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101604:	4b78      	ldr	r3, [pc, #480]	@ (81017e8 <bno055_getVector+0x27c>)
 8101606:	881b      	ldrh	r3, [r3, #0]
 8101608:	4618      	mov	r0, r3
 810160a:	f7ff f803 	bl	8100614 <__aeabi_ui2d>
 810160e:	4602      	mov	r2, r0
 8101610:	460b      	mov	r3, r1
 8101612:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101616:	e01a      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810161c:	2b1a      	cmp	r3, #26
 810161e:	d109      	bne.n	8101634 <bno055_getVector+0xc8>
    scale = eulerScale;
 8101620:	4b72      	ldr	r3, [pc, #456]	@ (81017ec <bno055_getVector+0x280>)
 8101622:	881b      	ldrh	r3, [r3, #0]
 8101624:	4618      	mov	r0, r3
 8101626:	f7fe fff5 	bl	8100614 <__aeabi_ui2d>
 810162a:	4602      	mov	r2, r0
 810162c:	460b      	mov	r3, r1
 810162e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101632:	e00c      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101638:	2b20      	cmp	r3, #32
 810163a:	d108      	bne.n	810164e <bno055_getVector+0xe2>
    scale = quaScale;
 810163c:	4b6c      	ldr	r3, [pc, #432]	@ (81017f0 <bno055_getVector+0x284>)
 810163e:	881b      	ldrh	r3, [r3, #0]
 8101640:	4618      	mov	r0, r3
 8101642:	f7fe ffe7 	bl	8100614 <__aeabi_ui2d>
 8101646:	4602      	mov	r2, r0
 8101648:	460b      	mov	r3, r1
 810164a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101652:	2220      	movs	r2, #32
 8101654:	2100      	movs	r1, #0
 8101656:	4618      	mov	r0, r3
 8101658:	f00e fdfa 	bl	8110250 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810165c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101660:	2b20      	cmp	r3, #32
 8101662:	d150      	bne.n	8101706 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101664:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101668:	021b      	lsls	r3, r3, #8
 810166a:	b21a      	sxth	r2, r3
 810166c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101670:	b21b      	sxth	r3, r3
 8101672:	4313      	orrs	r3, r2
 8101674:	b21b      	sxth	r3, r3
 8101676:	4618      	mov	r0, r3
 8101678:	f7fe ffdc 	bl	8100634 <__aeabi_i2d>
 810167c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101680:	f7ff f96c 	bl	810095c <__aeabi_ddiv>
 8101684:	4602      	mov	r2, r0
 8101686:	460b      	mov	r3, r1
 8101688:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810168c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101690:	021b      	lsls	r3, r3, #8
 8101692:	b21a      	sxth	r2, r3
 8101694:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101698:	b21b      	sxth	r3, r3
 810169a:	4313      	orrs	r3, r2
 810169c:	b21b      	sxth	r3, r3
 810169e:	4618      	mov	r0, r3
 81016a0:	f7fe ffc8 	bl	8100634 <__aeabi_i2d>
 81016a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016a8:	f7ff f958 	bl	810095c <__aeabi_ddiv>
 81016ac:	4602      	mov	r2, r0
 81016ae:	460b      	mov	r3, r1
 81016b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81016b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 81016b8:	021b      	lsls	r3, r3, #8
 81016ba:	b21a      	sxth	r2, r3
 81016bc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81016c0:	b21b      	sxth	r3, r3
 81016c2:	4313      	orrs	r3, r2
 81016c4:	b21b      	sxth	r3, r3
 81016c6:	4618      	mov	r0, r3
 81016c8:	f7fe ffb4 	bl	8100634 <__aeabi_i2d>
 81016cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016d0:	f7ff f944 	bl	810095c <__aeabi_ddiv>
 81016d4:	4602      	mov	r2, r0
 81016d6:	460b      	mov	r3, r1
 81016d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 81016dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81016e0:	021b      	lsls	r3, r3, #8
 81016e2:	b21a      	sxth	r2, r3
 81016e4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 81016e8:	b21b      	sxth	r3, r3
 81016ea:	4313      	orrs	r3, r2
 81016ec:	b21b      	sxth	r3, r3
 81016ee:	4618      	mov	r0, r3
 81016f0:	f7fe ffa0 	bl	8100634 <__aeabi_i2d>
 81016f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016f8:	f7ff f930 	bl	810095c <__aeabi_ddiv>
 81016fc:	4602      	mov	r2, r0
 81016fe:	460b      	mov	r3, r1
 8101700:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8101704:	e03b      	b.n	810177e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101706:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 810170a:	021b      	lsls	r3, r3, #8
 810170c:	b21a      	sxth	r2, r3
 810170e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101712:	b21b      	sxth	r3, r3
 8101714:	4313      	orrs	r3, r2
 8101716:	b21b      	sxth	r3, r3
 8101718:	4618      	mov	r0, r3
 810171a:	f7fe ff8b 	bl	8100634 <__aeabi_i2d>
 810171e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101722:	f7ff f91b 	bl	810095c <__aeabi_ddiv>
 8101726:	4602      	mov	r2, r0
 8101728:	460b      	mov	r3, r1
 810172a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810172e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101732:	021b      	lsls	r3, r3, #8
 8101734:	b21a      	sxth	r2, r3
 8101736:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 810173a:	b21b      	sxth	r3, r3
 810173c:	4313      	orrs	r3, r2
 810173e:	b21b      	sxth	r3, r3
 8101740:	4618      	mov	r0, r3
 8101742:	f7fe ff77 	bl	8100634 <__aeabi_i2d>
 8101746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810174a:	f7ff f907 	bl	810095c <__aeabi_ddiv>
 810174e:	4602      	mov	r2, r0
 8101750:	460b      	mov	r3, r1
 8101752:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101756:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 810175a:	021b      	lsls	r3, r3, #8
 810175c:	b21a      	sxth	r2, r3
 810175e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101762:	b21b      	sxth	r3, r3
 8101764:	4313      	orrs	r3, r2
 8101766:	b21b      	sxth	r3, r3
 8101768:	4618      	mov	r0, r3
 810176a:	f7fe ff63 	bl	8100634 <__aeabi_i2d>
 810176e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101772:	f7ff f8f3 	bl	810095c <__aeabi_ddiv>
 8101776:	4602      	mov	r2, r0
 8101778:	460b      	mov	r3, r1
 810177a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 810177e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101782:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810178a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810178e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101792:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101796:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 810179a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 810179e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 81017a2:	ec49 8b14 	vmov	d4, r8, r9
 81017a6:	ec45 4b15 	vmov	d5, r4, r5
 81017aa:	ec41 0b16 	vmov	d6, r0, r1
 81017ae:	ec43 2b17 	vmov	d7, r2, r3
}
 81017b2:	eeb0 0a44 	vmov.f32	s0, s8
 81017b6:	eef0 0a64 	vmov.f32	s1, s9
 81017ba:	eeb0 1a45 	vmov.f32	s2, s10
 81017be:	eef0 1a65 	vmov.f32	s3, s11
 81017c2:	eeb0 2a46 	vmov.f32	s4, s12
 81017c6:	eef0 2a66 	vmov.f32	s5, s13
 81017ca:	eeb0 3a47 	vmov.f32	s6, s14
 81017ce:	eef0 3a67 	vmov.f32	s7, s15
 81017d2:	3778      	adds	r7, #120	@ 0x78
 81017d4:	46bd      	mov	sp, r7
 81017d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81017da:	bf00      	nop
 81017dc:	3ff00000 	.word	0x3ff00000
 81017e0:	1000000e 	.word	0x1000000e
 81017e4:	10000008 	.word	0x10000008
 81017e8:	1000000a 	.word	0x1000000a
 81017ec:	1000000c 	.word	0x1000000c
 81017f0:	10000010 	.word	0x10000010

081017f4 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 81017f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81017f8:	b090      	sub	sp, #64	@ 0x40
 81017fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81017fc:	201a      	movs	r0, #26
 81017fe:	f7ff feb5 	bl	810156c <bno055_getVector>
 8101802:	eeb0 4a40 	vmov.f32	s8, s0
 8101806:	eef0 4a60 	vmov.f32	s9, s1
 810180a:	eeb0 5a41 	vmov.f32	s10, s2
 810180e:	eef0 5a61 	vmov.f32	s11, s3
 8101812:	eeb0 6a42 	vmov.f32	s12, s4
 8101816:	eef0 6a62 	vmov.f32	s13, s5
 810181a:	eeb0 7a43 	vmov.f32	s14, s6
 810181e:	eef0 7a63 	vmov.f32	s15, s7
 8101822:	ed87 4b08 	vstr	d4, [r7, #32]
 8101826:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 810182a:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 810182e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8101832:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101836:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 810183a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 810183e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101842:	ec49 8b14 	vmov	d4, r8, r9
 8101846:	ec45 4b15 	vmov	d5, r4, r5
 810184a:	ec41 0b16 	vmov	d6, r0, r1
 810184e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101852:	eeb0 0a44 	vmov.f32	s0, s8
 8101856:	eef0 0a64 	vmov.f32	s1, s9
 810185a:	eeb0 1a45 	vmov.f32	s2, s10
 810185e:	eef0 1a65 	vmov.f32	s3, s11
 8101862:	eeb0 2a46 	vmov.f32	s4, s12
 8101866:	eef0 2a66 	vmov.f32	s5, s13
 810186a:	eeb0 3a47 	vmov.f32	s6, s14
 810186e:	eef0 3a67 	vmov.f32	s7, s15
 8101872:	3740      	adds	r7, #64	@ 0x40
 8101874:	46bd      	mov	sp, r7
 8101876:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810187c <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810187c:	b480      	push	{r7}
 810187e:	b083      	sub	sp, #12
 8101880:	af00      	add	r7, sp, #0
 8101882:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101884:	4a04      	ldr	r2, [pc, #16]	@ (8101898 <bno055_assignI2C+0x1c>)
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	6013      	str	r3, [r2, #0]
}
 810188a:	bf00      	nop
 810188c:	370c      	adds	r7, #12
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr
 8101896:	bf00      	nop
 8101898:	10000284 	.word	0x10000284

0810189c <bno055_delay>:

void bno055_delay(int time) {
 810189c:	b580      	push	{r7, lr}
 810189e:	b082      	sub	sp, #8
 81018a0:	af00      	add	r7, sp, #0
 81018a2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	4618      	mov	r0, r3
 81018a8:	f002 fd9c 	bl	81043e4 <HAL_Delay>
#endif
}
 81018ac:	bf00      	nop
 81018ae:	3708      	adds	r7, #8
 81018b0:	46bd      	mov	sp, r7
 81018b2:	bd80      	pop	{r7, pc}

081018b4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81018b4:	b580      	push	{r7, lr}
 81018b6:	b088      	sub	sp, #32
 81018b8:	af02      	add	r7, sp, #8
 81018ba:	4603      	mov	r3, r0
 81018bc:	460a      	mov	r2, r1
 81018be:	71fb      	strb	r3, [r7, #7]
 81018c0:	4613      	mov	r3, r2
 81018c2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81018c4:	79fb      	ldrb	r3, [r7, #7]
 81018c6:	733b      	strb	r3, [r7, #12]
 81018c8:	79bb      	ldrb	r3, [r7, #6]
 81018ca:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81018cc:	4b12      	ldr	r3, [pc, #72]	@ (8101918 <bno055_writeData+0x64>)
 81018ce:	6818      	ldr	r0, [r3, #0]
 81018d0:	f107 020c 	add.w	r2, r7, #12
 81018d4:	230a      	movs	r3, #10
 81018d6:	9300      	str	r3, [sp, #0]
 81018d8:	2302      	movs	r3, #2
 81018da:	2150      	movs	r1, #80	@ 0x50
 81018dc:	f005 fbb4 	bl	8107048 <HAL_I2C_Master_Transmit>
 81018e0:	4603      	mov	r3, r0
 81018e2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81018e4:	7dfb      	ldrb	r3, [r7, #23]
 81018e6:	2b00      	cmp	r3, #0
 81018e8:	d010      	beq.n	810190c <bno055_writeData+0x58>
    //printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
  } else {
    //printf("Unknown status data %d", status);
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 81018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8101918 <bno055_writeData+0x64>)
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4618      	mov	r0, r3
 81018f0:	f005 fdc6 	bl	8107480 <HAL_I2C_GetError>
 81018f4:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 81018f6:	693b      	ldr	r3, [r7, #16]
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d009      	beq.n	8101910 <bno055_writeData+0x5c>
    //printf("HAL_I2C_ERROR_DMA\r\n");
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
    //printf("HAL_I2C_ERROR_TIMEOUT\r\n");
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 81018fc:	4b06      	ldr	r3, [pc, #24]	@ (8101918 <bno055_writeData+0x64>)
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	4618      	mov	r0, r3
 8101902:	f005 fdaf 	bl	8107464 <HAL_I2C_GetState>
 8101906:	4603      	mov	r3, r0
 8101908:	73fb      	strb	r3, [r7, #15]
 810190a:	e002      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 810190c:	bf00      	nop
 810190e:	e000      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 8101910:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101912:	3718      	adds	r7, #24
 8101914:	46bd      	mov	sp, r7
 8101916:	bd80      	pop	{r7, pc}
 8101918:	10000284 	.word	0x10000284

0810191c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810191c:	b580      	push	{r7, lr}
 810191e:	b086      	sub	sp, #24
 8101920:	af02      	add	r7, sp, #8
 8101922:	4603      	mov	r3, r0
 8101924:	6039      	str	r1, [r7, #0]
 8101926:	71fb      	strb	r3, [r7, #7]
 8101928:	4613      	mov	r3, r2
 810192a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810192c:	4b0d      	ldr	r3, [pc, #52]	@ (8101964 <bno055_readData+0x48>)
 810192e:	6818      	ldr	r0, [r3, #0]
 8101930:	1dfa      	adds	r2, r7, #7
 8101932:	2364      	movs	r3, #100	@ 0x64
 8101934:	9300      	str	r3, [sp, #0]
 8101936:	2301      	movs	r3, #1
 8101938:	2150      	movs	r1, #80	@ 0x50
 810193a:	f005 fb85 	bl	8107048 <HAL_I2C_Master_Transmit>
 810193e:	4603      	mov	r3, r0
 8101940:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101942:	4b08      	ldr	r3, [pc, #32]	@ (8101964 <bno055_readData+0x48>)
 8101944:	6818      	ldr	r0, [r3, #0]
 8101946:	79bb      	ldrb	r3, [r7, #6]
 8101948:	b29b      	uxth	r3, r3
 810194a:	2264      	movs	r2, #100	@ 0x64
 810194c:	9200      	str	r2, [sp, #0]
 810194e:	683a      	ldr	r2, [r7, #0]
 8101950:	2150      	movs	r1, #80	@ 0x50
 8101952:	f005 fc91 	bl	8107278 <HAL_I2C_Master_Receive>
 8101956:	4603      	mov	r3, r0
 8101958:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 810195a:	7bfb      	ldrb	r3, [r7, #15]
 810195c:	2b00      	cmp	r3, #0
	  } else {
	    //printf("Unknown status data %d", ret);
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810195e:	3710      	adds	r7, #16
 8101960:	46bd      	mov	sp, r7
 8101962:	bd80      	pop	{r7, pc}
 8101964:	10000284 	.word	0x10000284

08101968 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101968:	b580      	push	{r7, lr}
 810196a:	b084      	sub	sp, #16
 810196c:	af00      	add	r7, sp, #0
 810196e:	4603      	mov	r3, r0
 8101970:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101972:	f107 030f 	add.w	r3, r7, #15
 8101976:	2201      	movs	r2, #1
 8101978:	4619      	mov	r1, r3
 810197a:	203e      	movs	r0, #62	@ 0x3e
 810197c:	f7ff ffce 	bl	810191c <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101980:	7bfb      	ldrb	r3, [r7, #15]
 8101982:	f023 0303 	bic.w	r3, r3, #3
 8101986:	b2db      	uxtb	r3, r3
 8101988:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810198a:	7bfa      	ldrb	r2, [r7, #15]
 810198c:	79fb      	ldrb	r3, [r7, #7]
 810198e:	4313      	orrs	r3, r2
 8101990:	b2db      	uxtb	r3, r3
 8101992:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101994:	7bfb      	ldrb	r3, [r7, #15]
 8101996:	4619      	mov	r1, r3
 8101998:	203e      	movs	r0, #62	@ 0x3e
 810199a:	f7ff ff8b 	bl	81018b4 <bno055_writeData>
}
 810199e:	bf00      	nop
 81019a0:	3710      	adds	r7, #16
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 81019a6:	b580      	push	{r7, lr}
 81019a8:	b082      	sub	sp, #8
 81019aa:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 81019ac:	1dfb      	adds	r3, r7, #7
 81019ae:	2201      	movs	r2, #1
 81019b0:	4619      	mov	r1, r3
 81019b2:	203e      	movs	r0, #62	@ 0x3e
 81019b4:	f7ff ffb2 	bl	810191c <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 81019b8:	79fb      	ldrb	r3, [r7, #7]
 81019ba:	f003 0303 	and.w	r3, r3, #3
 81019be:	b2db      	uxtb	r3, r3
 81019c0:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 81019c2:	79fb      	ldrb	r3, [r7, #7]
}
 81019c4:	4618      	mov	r0, r3
 81019c6:	3708      	adds	r7, #8
 81019c8:	46bd      	mov	sp, r7
 81019ca:	bd80      	pop	{r7, pc}

081019cc <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 81019cc:	b580      	push	{r7, lr}
 81019ce:	b084      	sub	sp, #16
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	60f8      	str	r0, [r7, #12]
 81019d4:	60b9      	str	r1, [r7, #8]
 81019d6:	607a      	str	r2, [r7, #4]
 81019d8:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 81019da:	68f8      	ldr	r0, [r7, #12]
 81019dc:	68bb      	ldr	r3, [r7, #8]
 81019de:	2202      	movs	r2, #2
 81019e0:	2102      	movs	r1, #2
 81019e2:	f00d fb51 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 81019e6:	68fb      	ldr	r3, [r7, #12]
 81019e8:	f103 0008 	add.w	r0, r3, #8
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	2201      	movs	r2, #1
 81019f0:	2102      	movs	r1, #2
 81019f2:	f00d fb49 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 81019f6:	68fb      	ldr	r3, [r7, #12]
 81019f8:	f103 0010 	add.w	r0, r3, #16
 81019fc:	683b      	ldr	r3, [r7, #0]
 81019fe:	2202      	movs	r2, #2
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00d fb41 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	f103 0018 	add.w	r0, r3, #24
 8101a0c:	69bb      	ldr	r3, [r7, #24]
 8101a0e:	2202      	movs	r2, #2
 8101a10:	2102      	movs	r1, #2
 8101a12:	f00d fb39 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 8101a16:	68fb      	ldr	r3, [r7, #12]
 8101a18:	f103 0020 	add.w	r0, r3, #32
 8101a1c:	69fb      	ldr	r3, [r7, #28]
 8101a1e:	2202      	movs	r2, #2
 8101a20:	2102      	movs	r1, #2
 8101a22:	f00d fb31 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 8101a26:	68fb      	ldr	r3, [r7, #12]
 8101a28:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8101a2c:	6a3b      	ldr	r3, [r7, #32]
 8101a2e:	2202      	movs	r2, #2
 8101a30:	2102      	movs	r1, #2
 8101a32:	f00d fb29 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 8101a36:	68fb      	ldr	r3, [r7, #12]
 8101a38:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101a3e:	2201      	movs	r2, #1
 8101a40:	2102      	movs	r1, #2
 8101a42:	f00d fb21 	bl	810f088 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 8101a46:	68fb      	ldr	r3, [r7, #12]
 8101a48:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8101a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a50:	2202      	movs	r2, #2
 8101a52:	2102      	movs	r1, #2
 8101a54:	f00d fb18 	bl	810f088 <arm_mat_init_f32>

}
 8101a58:	bf00      	nop
 8101a5a:	3710      	adds	r7, #16
 8101a5c:	46bd      	mov	sp, r7
 8101a5e:	bd80      	pop	{r7, pc}

08101a60 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101a60:	b580      	push	{r7, lr}
 8101a62:	b09c      	sub	sp, #112	@ 0x70
 8101a64:	af00      	add	r7, sp, #0
 8101a66:	6078      	str	r0, [r7, #4]
 8101a68:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 8101a6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a6e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101a72:	2201      	movs	r2, #1
 8101a74:	2102      	movs	r1, #2
 8101a76:	f00d fb07 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 8101a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101a7e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101a82:	2201      	movs	r2, #1
 8101a84:	2102      	movs	r1, #2
 8101a86:	f00d faff 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 8101a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a8e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101a92:	2202      	movs	r2, #2
 8101a94:	2102      	movs	r1, #2
 8101a96:	f00d faf7 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 8101a9a:	f107 0318 	add.w	r3, r7, #24
 8101a9e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101aa2:	2202      	movs	r2, #2
 8101aa4:	2102      	movs	r1, #2
 8101aa6:	f00d faef 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 8101aaa:	f107 0308 	add.w	r3, r7, #8
 8101aae:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101ab2:	2202      	movs	r2, #2
 8101ab4:	2102      	movs	r1, #2
 8101ab6:	f00d fae7 	bl	810f088 <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 8101aba:	6878      	ldr	r0, [r7, #4]
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	3338      	adds	r3, #56	@ 0x38
 8101ac0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101ac4:	4619      	mov	r1, r3
 8101ac6:	f00d f939 	bl	810ed3c <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	3308      	adds	r3, #8
 8101ace:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101ad2:	6839      	ldr	r1, [r7, #0]
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f00d f931 	bl	810ed3c <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101ae0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101ae4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101ae8:	4618      	mov	r0, r3
 8101aea:	f00d fad1 	bl	810f090 <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 8101aee:	6878      	ldr	r0, [r7, #4]
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	3328      	adds	r3, #40	@ 0x28
 8101af4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101af8:	4619      	mov	r1, r3
 8101afa:	f00d f91f 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8101b04:	4611      	mov	r1, r2
 8101b06:	4618      	mov	r0, r3
 8101b08:	f00d f852 	bl	810ebb0 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 8101b0c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8101b10:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101b14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101b18:	4618      	mov	r0, r3
 8101b1a:	f00d f90f 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	f103 0118 	add.w	r1, r3, #24
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101b2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101b2e:	4618      	mov	r0, r3
 8101b30:	f00d faae 	bl	810f090 <arm_mat_add_f32>


}
 8101b34:	bf00      	nop
 8101b36:	3770      	adds	r7, #112	@ 0x70
 8101b38:	46bd      	mov	sp, r7
 8101b3a:	bd80      	pop	{r7, pc}

08101b3c <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 8101b3c:	b580      	push	{r7, lr}
 8101b3e:	b0dc      	sub	sp, #368	@ 0x170
 8101b40:	af00      	add	r7, sp, #0
 8101b42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b4a:	6018      	str	r0, [r3, #0]
 8101b4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b50:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101b54:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 8101b56:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8101b5a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8101b5e:	2202      	movs	r2, #2
 8101b60:	2102      	movs	r1, #2
 8101b62:	f00d fa91 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101b66:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101b6a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101b6e:	2202      	movs	r2, #2
 8101b70:	2102      	movs	r1, #2
 8101b72:	f00d fa89 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101b76:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101b7a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101b7e:	2202      	movs	r2, #2
 8101b80:	2102      	movs	r1, #2
 8101b82:	f00d fa81 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101b86:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101b8a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101b8e:	2202      	movs	r2, #2
 8101b90:	2102      	movs	r1, #2
 8101b92:	f00d fa79 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101b96:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101b9a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101b9e:	2202      	movs	r2, #2
 8101ba0:	2102      	movs	r1, #2
 8101ba2:	f00d fa71 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101ba6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101baa:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101bae:	2202      	movs	r2, #2
 8101bb0:	2102      	movs	r1, #2
 8101bb2:	f00d fa69 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101bb6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101bba:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101bbe:	2202      	movs	r2, #2
 8101bc0:	2102      	movs	r1, #2
 8101bc2:	f00d fa61 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101bc6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101bca:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101bce:	2202      	movs	r2, #2
 8101bd0:	2102      	movs	r1, #2
 8101bd2:	f00d fa59 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101bd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101bda:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101bde:	2202      	movs	r2, #2
 8101be0:	2102      	movs	r1, #2
 8101be2:	f00d fa51 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101be6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101bea:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101bee:	2202      	movs	r2, #2
 8101bf0:	2102      	movs	r1, #2
 8101bf2:	f00d fa49 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101bf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101bfa:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101bfe:	2202      	movs	r2, #2
 8101c00:	2102      	movs	r1, #2
 8101c02:	f00d fa41 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101c06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101c0a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101c0e:	2202      	movs	r2, #2
 8101c10:	2102      	movs	r1, #2
 8101c12:	f00d fa39 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101c16:	f107 0320 	add.w	r3, r7, #32
 8101c1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101c1e:	2202      	movs	r2, #2
 8101c20:	2102      	movs	r1, #2
 8101c22:	f00d fa31 	bl	810f088 <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101c26:	f107 0318 	add.w	r3, r7, #24
 8101c2a:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101c2e:	2201      	movs	r2, #1
 8101c30:	2102      	movs	r1, #2
 8101c32:	f00d fa29 	bl	810f088 <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101c36:	f107 0310 	add.w	r3, r7, #16
 8101c3a:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101c3e:	2201      	movs	r2, #1
 8101c40:	2102      	movs	r1, #2
 8101c42:	f00d fa21 	bl	810f088 <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101c46:	f107 0308 	add.w	r3, r7, #8
 8101c4a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101c4e:	2201      	movs	r2, #1
 8101c50:	2102      	movs	r1, #2
 8101c52:	f00d fa19 	bl	810f088 <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101c56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	3310      	adds	r3, #16
 8101c62:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101c66:	4611      	mov	r1, r2
 8101c68:	4618      	mov	r0, r3
 8101c6a:	f00c ffa1 	bl	810ebb0 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101c6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	3328      	adds	r3, #40	@ 0x28
 8101c7a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101c7e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101c82:	4618      	mov	r0, r3
 8101c84:	f00d f85a 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101c88:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c8c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	3310      	adds	r3, #16
 8101c94:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101c98:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101c9c:	4618      	mov	r0, r3
 8101c9e:	f00d f84d 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101ca2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ca6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	f103 0120 	add.w	r1, r3, #32
 8101cb0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101cb4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101cb8:	4618      	mov	r0, r3
 8101cba:	f00d f9e9 	bl	810f090 <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101cbe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101cc2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101cc6:	4611      	mov	r1, r2
 8101cc8:	4618      	mov	r0, r3
 8101cca:	f00d f8d7 	bl	810ee7c <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101cce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101cdc:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101ce0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101ce4:	4618      	mov	r0, r3
 8101ce6:	f00d f829 	bl	810ed3c <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101cea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	f103 0010 	add.w	r0, r3, #16
 8101cf8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	3338      	adds	r3, #56	@ 0x38
 8101d04:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101d08:	4619      	mov	r1, r3
 8101d0a:	f00d f817 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101d0e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101d12:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101d16:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101d1e:	6818      	ldr	r0, [r3, #0]
 8101d20:	f00c ffa2 	bl	810ec68 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101d24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	3330      	adds	r3, #48	@ 0x30
 8101d30:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101d34:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101d38:	4618      	mov	r0, r3
 8101d3a:	f00c ffff 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101d3e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d42:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101d4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101d5a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101d5e:	4619      	mov	r1, r3
 8101d60:	f00d f996 	bl	810f090 <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101d64:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	3310      	adds	r3, #16
 8101d70:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101d74:	4611      	mov	r1, r2
 8101d76:	4618      	mov	r0, r3
 8101d78:	f00c ff1a 	bl	810ebb0 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101d7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	3328      	adds	r3, #40	@ 0x28
 8101d88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101d8c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101d90:	4618      	mov	r0, r3
 8101d92:	f00c ffd3 	bl	810ed3c <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101d96:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	3330      	adds	r3, #48	@ 0x30
 8101da2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101da6:	4611      	mov	r1, r2
 8101da8:	4618      	mov	r0, r3
 8101daa:	f00c ff01 	bl	810ebb0 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101dae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101db2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101db6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101dba:	4618      	mov	r0, r3
 8101dbc:	f00c ffbe 	bl	810ed3c <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101dc0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	f103 0010 	add.w	r0, r3, #16
 8101dce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	3328      	adds	r3, #40	@ 0x28
 8101dda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101dde:	4619      	mov	r1, r3
 8101de0:	f00c ffac 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101de4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101de8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	3330      	adds	r3, #48	@ 0x30
 8101df0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101df4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101df8:	4618      	mov	r0, r3
 8101dfa:	f00c ff9f 	bl	810ed3c <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101dfe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	f103 0010 	add.w	r0, r3, #16
 8101e0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e14:	681b      	ldr	r3, [r3, #0]
 8101e16:	3328      	adds	r3, #40	@ 0x28
 8101e18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e1c:	4619      	mov	r1, r3
 8101e1e:	f00c ff8d 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101e22:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101e26:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101e2e:	4618      	mov	r0, r3
 8101e30:	f00c ff84 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101e34:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e38:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e3c:	681b      	ldr	r3, [r3, #0]
 8101e3e:	f103 0120 	add.w	r1, r3, #32
 8101e42:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101e46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	f00d f920 	bl	810f090 <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101e50:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e54:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e58:	681b      	ldr	r3, [r3, #0]
 8101e5a:	3330      	adds	r3, #48	@ 0x30
 8101e5c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101e60:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101e64:	4618      	mov	r0, r3
 8101e66:	f00c ff69 	bl	810ed3c <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101e6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e6e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101e76:	4618      	mov	r0, r3
 8101e78:	f00c ff60 	bl	810ed3c <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101e7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	3328      	adds	r3, #40	@ 0x28
 8101e88:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101e8c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101e90:	4618      	mov	r0, r3
 8101e92:	f00c fee9 	bl	810ec68 <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101e96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101e9a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101ea2:	4618      	mov	r0, r3
 8101ea4:	f00c fee0 	bl	810ec68 <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101ea8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101eac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101eb6:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	f00d f8e6 	bl	810f090 <arm_mat_add_f32>


}
 8101ec4:	bf00      	nop
 8101ec6:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101eca:	46bd      	mov	sp, r7
 8101ecc:	bd80      	pop	{r7, pc}

08101ece <voltToAmpere>:

	// Restituisci la media mobile
	return somma / count;
}

float voltToAmpere(float Volt, float a, float b) {
 8101ece:	b480      	push	{r7}
 8101ed0:	b087      	sub	sp, #28
 8101ed2:	af00      	add	r7, sp, #0
 8101ed4:	ed87 0a03 	vstr	s0, [r7, #12]
 8101ed8:	edc7 0a02 	vstr	s1, [r7, #8]
 8101edc:	ed87 1a01 	vstr	s2, [r7, #4]
	//float ampere = (Volt-2.47)/0.22;  //a3b RESISTENZA
	//float ampere = Volt*1.25994074 - 3.1119; //a3b MOTORE
	//float ampere = (Volt -2.53)/0.8 + 0.095 + 0.065 + 0.07 ;
	float ampere = (Volt - b) / a;
 8101ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8101ee4:	edd7 7a01 	vldr	s15, [r7, #4]
 8101ee8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8101eec:	ed97 7a02 	vldr	s14, [r7, #8]
 8101ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101ef4:	edc7 7a05 	vstr	s15, [r7, #20]

	//float ampere = 2.3*Volt - 5.75;   //a4b DA RIVEDERE
	//float ampere = (Volt-2.48)/0.185; //sensore ACS712 05b
	return ampere;
 8101ef8:	697b      	ldr	r3, [r7, #20]
 8101efa:	ee07 3a90 	vmov	s15, r3
}
 8101efe:	eeb0 0a67 	vmov.f32	s0, s15
 8101f02:	371c      	adds	r7, #28
 8101f04:	46bd      	mov	sp, r7
 8101f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f0a:	4770      	bx	lr

08101f0c <getSpeed>:
	return ((float) rand() / RAND_MAX) * (max - min) + min;
}

//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101f0c:	b480      	push	{r7}
 8101f0e:	b085      	sub	sp, #20
 8101f10:	af00      	add	r7, sp, #0
 8101f12:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 6; //secondi di rampa
 8101f16:	4b13      	ldr	r3, [pc, #76]	@ (8101f64 <getSpeed+0x58>)
 8101f18:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101f1a:	4b13      	ldr	r3, [pc, #76]	@ (8101f68 <getSpeed+0x5c>)
 8101f1c:	edd3 7a00 	vldr	s15, [r3]
 8101f20:	ed97 7a01 	vldr	s14, [r7, #4]
 8101f24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f2c:	d50f      	bpl.n	8101f4e <getSpeed+0x42>
		return actual_speed + speed * dt / ramp_time;
 8101f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8101f68 <getSpeed+0x5c>)
 8101f30:	edd3 7a00 	vldr	s15, [r3]
 8101f34:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8101f6c <getSpeed+0x60>
 8101f38:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101f3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8101f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8101f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f4c:	e002      	b.n	8101f54 <getSpeed+0x48>
	} else
		return speed;
 8101f4e:	4b06      	ldr	r3, [pc, #24]	@ (8101f68 <getSpeed+0x5c>)
 8101f50:	edd3 7a00 	vldr	s15, [r3]
}
 8101f54:	eeb0 0a67 	vmov.f32	s0, s15
 8101f58:	3714      	adds	r7, #20
 8101f5a:	46bd      	mov	sp, r7
 8101f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f60:	4770      	bx	lr
 8101f62:	bf00      	nop
 8101f64:	40c00000 	.word	0x40c00000
 8101f68:	100087d0 	.word	0x100087d0
 8101f6c:	3c23d70a 	.word	0x3c23d70a

08101f70 <filtro_media_mobile>:
//******************

float filtro_media_mobile(float *vettorenuovo, float *vettorevecchio,
		float nuovamisurazione, int dimensione) {
 8101f70:	b480      	push	{r7}
 8101f72:	b089      	sub	sp, #36	@ 0x24
 8101f74:	af00      	add	r7, sp, #0
 8101f76:	60f8      	str	r0, [r7, #12]
 8101f78:	60b9      	str	r1, [r7, #8]
 8101f7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8101f7e:	603a      	str	r2, [r7, #0]
	vettorenuovo[0] = nuovamisurazione;
 8101f80:	68fb      	ldr	r3, [r7, #12]
 8101f82:	687a      	ldr	r2, [r7, #4]
 8101f84:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101f86:	2300      	movs	r3, #0
 8101f88:	61fb      	str	r3, [r7, #28]
 8101f8a:	e00d      	b.n	8101fa8 <filtro_media_mobile+0x38>

		vettorenuovo[i + 1] = vettorevecchio[i]; // dal 2 al n-1 esimo valore si ricopiano i valori vecchi
 8101f8c:	69fb      	ldr	r3, [r7, #28]
 8101f8e:	009b      	lsls	r3, r3, #2
 8101f90:	68ba      	ldr	r2, [r7, #8]
 8101f92:	441a      	add	r2, r3
 8101f94:	69fb      	ldr	r3, [r7, #28]
 8101f96:	3301      	adds	r3, #1
 8101f98:	009b      	lsls	r3, r3, #2
 8101f9a:	68f9      	ldr	r1, [r7, #12]
 8101f9c:	440b      	add	r3, r1
 8101f9e:	6812      	ldr	r2, [r2, #0]
 8101fa0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101fa2:	69fb      	ldr	r3, [r7, #28]
 8101fa4:	3301      	adds	r3, #1
 8101fa6:	61fb      	str	r3, [r7, #28]
 8101fa8:	683b      	ldr	r3, [r7, #0]
 8101faa:	3b01      	subs	r3, #1
 8101fac:	69fa      	ldr	r2, [r7, #28]
 8101fae:	429a      	cmp	r2, r3
 8101fb0:	dbec      	blt.n	8101f8c <filtro_media_mobile+0x1c>
	}

	float somma = 0;
 8101fb2:	f04f 0300 	mov.w	r3, #0
 8101fb6:	61bb      	str	r3, [r7, #24]
	float media;
	for (int i = 0; i < dimensione; i++) {
 8101fb8:	2300      	movs	r3, #0
 8101fba:	617b      	str	r3, [r7, #20]
 8101fbc:	e018      	b.n	8101ff0 <filtro_media_mobile+0x80>
		vettorevecchio[i] = vettorenuovo[i]; //copia il vettore nuovo nel vecchio
 8101fbe:	697b      	ldr	r3, [r7, #20]
 8101fc0:	009b      	lsls	r3, r3, #2
 8101fc2:	68fa      	ldr	r2, [r7, #12]
 8101fc4:	441a      	add	r2, r3
 8101fc6:	697b      	ldr	r3, [r7, #20]
 8101fc8:	009b      	lsls	r3, r3, #2
 8101fca:	68b9      	ldr	r1, [r7, #8]
 8101fcc:	440b      	add	r3, r1
 8101fce:	6812      	ldr	r2, [r2, #0]
 8101fd0:	601a      	str	r2, [r3, #0]
		somma += vettorenuovo[i];           //calcola la somma di tutti i valori
 8101fd2:	697b      	ldr	r3, [r7, #20]
 8101fd4:	009b      	lsls	r3, r3, #2
 8101fd6:	68fa      	ldr	r2, [r7, #12]
 8101fd8:	4413      	add	r3, r2
 8101fda:	edd3 7a00 	vldr	s15, [r3]
 8101fde:	ed97 7a06 	vldr	s14, [r7, #24]
 8101fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101fe6:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < dimensione; i++) {
 8101fea:	697b      	ldr	r3, [r7, #20]
 8101fec:	3301      	adds	r3, #1
 8101fee:	617b      	str	r3, [r7, #20]
 8101ff0:	697a      	ldr	r2, [r7, #20]
 8101ff2:	683b      	ldr	r3, [r7, #0]
 8101ff4:	429a      	cmp	r2, r3
 8101ff6:	dbe2      	blt.n	8101fbe <filtro_media_mobile+0x4e>
		// printf("%f.3 vet ", vettorenuovo[i]);
	}

	media = somma / dimensione;
 8101ff8:	683b      	ldr	r3, [r7, #0]
 8101ffa:	ee07 3a90 	vmov	s15, r3
 8101ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102002:	edd7 6a06 	vldr	s13, [r7, #24]
 8102006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810200a:	edc7 7a04 	vstr	s15, [r7, #16]
	return media;
 810200e:	693b      	ldr	r3, [r7, #16]
 8102010:	ee07 3a90 	vmov	s15, r3
}
 8102014:	eeb0 0a67 	vmov.f32	s0, s15
 8102018:	3724      	adds	r7, #36	@ 0x24
 810201a:	46bd      	mov	sp, r7
 810201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102020:	4770      	bx	lr
 8102022:	0000      	movs	r0, r0
 8102024:	0000      	movs	r0, r0
	...

08102028 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8102028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810202c:	b0b1      	sub	sp, #196	@ 0xc4
 810202e:	af14      	add	r7, sp, #80	@ 0x50

	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8102030:	4b14      	ldr	r3, [pc, #80]	@ (8102084 <main+0x5c>)
 8102032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102036:	4a13      	ldr	r2, [pc, #76]	@ (8102084 <main+0x5c>)
 8102038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810203c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102040:	4b10      	ldr	r3, [pc, #64]	@ (8102084 <main+0x5c>)
 8102042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810204a:	643b      	str	r3, [r7, #64]	@ 0x40
 810204c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810204e:	2001      	movs	r0, #1
 8102050:	f004 ff4c 	bl	8106eec <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8102054:	f005 fdd8 	bl	8107c08 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8102058:	2201      	movs	r2, #1
 810205a:	2102      	movs	r1, #2
 810205c:	2000      	movs	r0, #0
 810205e:	f005 fd59 	bl	8107b14 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102062:	4b09      	ldr	r3, [pc, #36]	@ (8102088 <main+0x60>)
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	091b      	lsrs	r3, r3, #4
 8102068:	f003 030f 	and.w	r3, r3, #15
 810206c:	2b07      	cmp	r3, #7
 810206e:	d10f      	bne.n	8102090 <main+0x68>
 8102070:	4b06      	ldr	r3, [pc, #24]	@ (810208c <main+0x64>)
 8102072:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8102076:	4a05      	ldr	r2, [pc, #20]	@ (810208c <main+0x64>)
 8102078:	f043 0301 	orr.w	r3, r3, #1
 810207c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8102080:	e00e      	b.n	81020a0 <main+0x78>
 8102082:	bf00      	nop
 8102084:	58024400 	.word	0x58024400
 8102088:	e000ed00 	.word	0xe000ed00
 810208c:	58026400 	.word	0x58026400
 8102090:	4bb8      	ldr	r3, [pc, #736]	@ (8102374 <main+0x34c>)
 8102092:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8102096:	4ab7      	ldr	r2, [pc, #732]	@ (8102374 <main+0x34c>)
 8102098:	f043 0301 	orr.w	r3, r3, #1
 810209c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 81020a0:	f002 f8ec 	bl	810427c <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 81020a4:	f001 fa58 	bl	8103558 <MX_GPIO_Init>
	/* USER CODE END Init */

	/* USER CODE BEGIN SysInit */

	arm_fir_init_f32(&fir_instance, FIR_LENGHT, fir_coefficients, fir_state, 1);
 81020a8:	2301      	movs	r3, #1
 81020aa:	9300      	str	r3, [sp, #0]
 81020ac:	4bb2      	ldr	r3, [pc, #712]	@ (8102378 <main+0x350>)
 81020ae:	4ab3      	ldr	r2, [pc, #716]	@ (810237c <main+0x354>)
 81020b0:	2103      	movs	r1, #3
 81020b2:	48b3      	ldr	r0, [pc, #716]	@ (8102380 <main+0x358>)
 81020b4:	f00d f856 	bl	810f164 <arm_fir_init_f32>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_USART3_UART_Init();
 81020b8:	f001 fa02 	bl	81034c0 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 81020bc:	f000 ff1c 	bl	8102ef8 <MX_I2C1_Init>
	MX_TIM1_Init();
 81020c0:	f000 ff5a 	bl	8102f78 <MX_TIM1_Init>
	MX_TIM2_Init();
 81020c4:	f001 f804 	bl	81030d0 <MX_TIM2_Init>
	MX_TIM4_Init();
 81020c8:	f001 f8c6 	bl	8103258 <MX_TIM4_Init>
	MX_ADC1_Init();
 81020cc:	f000 fe9c 	bl	8102e08 <MX_ADC1_Init>
	MX_TIM3_Init();
 81020d0:	f001 f84c 	bl	810316c <MX_TIM3_Init>
	MX_TIM8_Init();
 81020d4:	f001 f94e 	bl	8103374 <MX_TIM8_Init>
	MX_TIM6_Init();
 81020d8:	f001 f914 	bl	8103304 <MX_TIM6_Init>
	MX_USART2_UART_Init();
 81020dc:	f001 f9a4 	bl	8103428 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 81020e0:	48a8      	ldr	r0, [pc, #672]	@ (8102384 <main+0x35c>)
 81020e2:	f008 fd3d 	bl	810ab60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81020e6:	2100      	movs	r1, #0
 81020e8:	48a7      	ldr	r0, [pc, #668]	@ (8102388 <main+0x360>)
 81020ea:	f008 fe13 	bl	810ad14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 81020ee:	2100      	movs	r1, #0
 81020f0:	48a6      	ldr	r0, [pc, #664]	@ (810238c <main+0x364>)
 81020f2:	f008 fe0f 	bl	810ad14 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 81020f6:	48a6      	ldr	r0, [pc, #664]	@ (8102390 <main+0x368>)
 81020f8:	f008 fcc2 	bl	810aa80 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 81020fc:	48a5      	ldr	r0, [pc, #660]	@ (8102394 <main+0x36c>)
 81020fe:	f008 fcbf 	bl	810aa80 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8102102:	48a5      	ldr	r0, [pc, #660]	@ (8102398 <main+0x370>)
 8102104:	f008 fd2c 	bl	810ab60 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1);
 8102108:	2201      	movs	r2, #1
 810210a:	49a4      	ldr	r1, [pc, #656]	@ (810239c <main+0x374>)
 810210c:	48a4      	ldr	r0, [pc, #656]	@ (81023a0 <main+0x378>)
 810210e:	f00a f9ff 	bl	810c510 <HAL_UART_Receive_IT>

	srand(1233);
 8102112:	f240 40d1 	movw	r0, #1233	@ 0x4d1
 8102116:	f00d f835 	bl	810f184 <srand>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 810211a:	48a2      	ldr	r0, [pc, #648]	@ (81023a4 <main+0x37c>)
 810211c:	f7ff fbae 	bl	810187c <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 8102120:	f7ff f9cd 	bl	81014be <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 8102124:	2000      	movs	r0, #0
 8102126:	f7ff fc1f 	bl	8101968 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 810212a:	f7ff fc3c 	bl	81019a6 <bno055_getPowerMode>
 810212e:	4603      	mov	r3, r0
 8102130:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 8102134:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8102138:	4619      	mov	r1, r3
 810213a:	489b      	ldr	r0, [pc, #620]	@ (81023a8 <main+0x380>)
 810213c:	f00d ff7e 	bl	811003c <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 8102140:	f7ff f9aa 	bl	8101498 <bno055_setOperationModeNDOF>

	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 8102144:	f7ff f9d8 	bl	81014f8 <bno055_getCalibrationState>
 8102148:	4603      	mov	r3, r0
 810214a:	647b      	str	r3, [r7, #68]	@ 0x44
	//		cal.gyro, cal.accel, cal.mag, cal.sys);
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 810214c:	eddf 7a97 	vldr	s15, [pc, #604]	@ 81023ac <main+0x384>
 8102150:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 8102154:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8102158:	eeb0 0a67 	vmov.f32	s0, s15
 810215c:	4894      	ldr	r0, [pc, #592]	@ (81023b0 <main+0x388>)
 810215e:	f7ff f8d3 	bl	8101308 <init_PID>
	tune_PID(&pid_speed, 7, 6, 0);
 8102162:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 81023b4 <main+0x38c>
 8102166:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 810216a:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 810216e:	4890      	ldr	r0, [pc, #576]	@ (81023b0 <main+0x388>)
 8102170:	f7ff f8eb 	bl	810134a <tune_PID>
	//*************************

	init_PID(&pid_yaw_rate, dt, 45, -45);
 8102174:	eddf 7a8d 	vldr	s15, [pc, #564]	@ 81023ac <main+0x384>
 8102178:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 81023b8 <main+0x390>
 810217c:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 81023bc <main+0x394>
 8102180:	eeb0 0a67 	vmov.f32	s0, s15
 8102184:	488e      	ldr	r0, [pc, #568]	@ (81023c0 <main+0x398>)
 8102186:	f7ff f8bf 	bl	8101308 <init_PID>
	//	tune_PID(&pid_roll, 0.00012*3,00012/10/3,00012/10); //prova ad alzare
	tune_PID(&pid_yaw_rate, 1.1, 19, 0.12);
 810218a:	ed9f 1a8e 	vldr	s2, [pc, #568]	@ 81023c4 <main+0x39c>
 810218e:	eef3 0a03 	vmov.f32	s1, #51	@ 0x41980000  19.0
 8102192:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 81023c8 <main+0x3a0>
 8102196:	488a      	ldr	r0, [pc, #552]	@ (81023c0 <main+0x398>)
 8102198:	f7ff f8d7 	bl	810134a <tune_PID>
	//*************************
	//PID angolo roll
	init_PID(&pid_roll, dt, 10 * K, -10 * K);
 810219c:	ed9f 6a83 	vldr	s12, [pc, #524]	@ 81023ac <main+0x384>
 81021a0:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 81023cc <main+0x3a4>
 81021a4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 81021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81021ac:	eddf 6a87 	vldr	s13, [pc, #540]	@ 81023cc <main+0x3a4>
 81021b0:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 81021b4:	ee26 7a87 	vmul.f32	s14, s13, s14
 81021b8:	eeb0 1a47 	vmov.f32	s2, s14
 81021bc:	eef0 0a67 	vmov.f32	s1, s15
 81021c0:	eeb0 0a46 	vmov.f32	s0, s12
 81021c4:	4882      	ldr	r0, [pc, #520]	@ (81023d0 <main+0x3a8>)
 81021c6:	f7ff f89f 	bl	8101308 <init_PID>
	tune_PID(&pid_roll, 0.00004, 0, 0); //prova ad alzare
 81021ca:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 81023b4 <main+0x38c>
 81021ce:	eddf 0a79 	vldr	s1, [pc, #484]	@ 81023b4 <main+0x38c>
 81021d2:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 81023d4 <main+0x3ac>
 81021d6:	487e      	ldr	r0, [pc, #504]	@ (81023d0 <main+0x3a8>)
 81021d8:	f7ff f8b7 	bl	810134a <tune_PID>
	//tune_PID(&pid_roll, 0.00015,0.00012/400,0.00012*225*10*3*5);
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 81021dc:	eddf 7a73 	vldr	s15, [pc, #460]	@ 81023ac <main+0x384>
 81021e0:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 81021e4:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 81021e8:	eeb0 0a67 	vmov.f32	s0, s15
 81021ec:	487a      	ldr	r0, [pc, #488]	@ (81023d8 <main+0x3b0>)
 81021ee:	f7ff f88b 	bl	8101308 <init_PID>
	tune_PID(&pid_steering_torque, 30000, 20000 * 5, 0);
 81021f2:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 81023b4 <main+0x38c>
 81021f6:	eddf 0a79 	vldr	s1, [pc, #484]	@ 81023dc <main+0x3b4>
 81021fa:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 81023e0 <main+0x3b8>
 81021fe:	4876      	ldr	r0, [pc, #472]	@ (81023d8 <main+0x3b0>)
 8102200:	f7ff f8a3 	bl	810134a <tune_PID>

	//*************************

	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 8102204:	4b77      	ldr	r3, [pc, #476]	@ (81023e4 <main+0x3bc>)
 8102206:	2201      	movs	r2, #1
 8102208:	2101      	movs	r1, #1
 810220a:	4877      	ldr	r0, [pc, #476]	@ (81023e8 <main+0x3c0>)
 810220c:	f00c ff3c 	bl	810f088 <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 8102210:	4b76      	ldr	r3, [pc, #472]	@ (81023ec <main+0x3c4>)
 8102212:	2201      	movs	r2, #1
 8102214:	2102      	movs	r1, #2
 8102216:	4876      	ldr	r0, [pc, #472]	@ (81023f0 <main+0x3c8>)
 8102218:	f00c ff36 	bl	810f088 <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 810221c:	4b75      	ldr	r3, [pc, #468]	@ (81023f4 <main+0x3cc>)
 810221e:	9304      	str	r3, [sp, #16]
 8102220:	4b75      	ldr	r3, [pc, #468]	@ (81023f8 <main+0x3d0>)
 8102222:	9303      	str	r3, [sp, #12]
 8102224:	4b75      	ldr	r3, [pc, #468]	@ (81023fc <main+0x3d4>)
 8102226:	9302      	str	r3, [sp, #8]
 8102228:	4b75      	ldr	r3, [pc, #468]	@ (8102400 <main+0x3d8>)
 810222a:	9301      	str	r3, [sp, #4]
 810222c:	4b75      	ldr	r3, [pc, #468]	@ (8102404 <main+0x3dc>)
 810222e:	9300      	str	r3, [sp, #0]
 8102230:	4b75      	ldr	r3, [pc, #468]	@ (8102408 <main+0x3e0>)
 8102232:	4a76      	ldr	r2, [pc, #472]	@ (810240c <main+0x3e4>)
 8102234:	4976      	ldr	r1, [pc, #472]	@ (8102410 <main+0x3e8>)
 8102236:	4877      	ldr	r0, [pc, #476]	@ (8102414 <main+0x3ec>)
 8102238:	f7ff fbc8 	bl	81019cc <kalman_filter_init>
			&P_data, &K_data, &x_data);
	u_data[0] =  ( -dt* lambda *b/(1 - dt* lambda ) );
 810223c:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 81023ac <main+0x384>
 8102240:	eef1 7a67 	vneg.f32	s15, s15
 8102244:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8102418 <main+0x3f0>
 8102248:	ee27 7a87 	vmul.f32	s14, s15, s14
 810224c:	4b73      	ldr	r3, [pc, #460]	@ (810241c <main+0x3f4>)
 810224e:	edd3 7a00 	vldr	s15, [r3]
 8102252:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102256:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 81023ac <main+0x384>
 810225a:	eddf 7a6f 	vldr	s15, [pc, #444]	@ 8102418 <main+0x3f0>
 810225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102266:	ee37 7a67 	vsub.f32	s14, s14, s15
 810226a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810226e:	4b5d      	ldr	r3, [pc, #372]	@ (81023e4 <main+0x3bc>)
 8102270:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (flag_Tc == 1) {
 8102274:	4b6a      	ldr	r3, [pc, #424]	@ (8102420 <main+0x3f8>)
 8102276:	edd3 7a00 	vldr	s15, [r3]
 810227a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810227e:	eef4 7a47 	vcmp.f32	s15, s14
 8102282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102286:	d1f5      	bne.n	8102274 <main+0x24c>
			flag_Tc = 0;
 8102288:	4b65      	ldr	r3, [pc, #404]	@ (8102420 <main+0x3f8>)
 810228a:	f04f 0200 	mov.w	r2, #0
 810228e:	601a      	str	r2, [r3, #0]

			if ((tasto_premuto == 1) && (tasto_appena_premuto == 1)) {
 8102290:	4b64      	ldr	r3, [pc, #400]	@ (8102424 <main+0x3fc>)
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	2b01      	cmp	r3, #1
 8102296:	d113      	bne.n	81022c0 <main+0x298>
 8102298:	4b63      	ldr	r3, [pc, #396]	@ (8102428 <main+0x400>)
 810229a:	681b      	ldr	r3, [r3, #0]
 810229c:	2b01      	cmp	r3, #1
 810229e:	d10f      	bne.n	81022c0 <main+0x298>
				tempo_iniziale = n_ref * dt;
 81022a0:	4b62      	ldr	r3, [pc, #392]	@ (810242c <main+0x404>)
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	ee07 3a90 	vmov	s15, r3
 81022a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81022ac:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 81023ac <main+0x384>
 81022b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 81022b4:	4b5e      	ldr	r3, [pc, #376]	@ (8102430 <main+0x408>)
 81022b6:	edc3 7a00 	vstr	s15, [r3]
				tasto_appena_premuto = 2;
 81022ba:	4b5b      	ldr	r3, [pc, #364]	@ (8102428 <main+0x400>)
 81022bc:	2202      	movs	r2, #2
 81022be:	601a      	str	r2, [r3, #0]
			}

			if ((tasto_premuto == 1) && (tasto_appena_premuto == 2)) {
 81022c0:	4b58      	ldr	r3, [pc, #352]	@ (8102424 <main+0x3fc>)
 81022c2:	681b      	ldr	r3, [r3, #0]
 81022c4:	2b01      	cmp	r3, #1
 81022c6:	d142      	bne.n	810234e <main+0x326>
 81022c8:	4b57      	ldr	r3, [pc, #348]	@ (8102428 <main+0x400>)
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	2b02      	cmp	r3, #2
 81022ce:	d13e      	bne.n	810234e <main+0x326>
				tempo_attuale = n_ref * dt;
 81022d0:	4b56      	ldr	r3, [pc, #344]	@ (810242c <main+0x404>)
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	ee07 3a90 	vmov	s15, r3
 81022d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81022dc:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 81023ac <main+0x384>
 81022e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 81022e4:	4b53      	ldr	r3, [pc, #332]	@ (8102434 <main+0x40c>)
 81022e6:	edc3 7a00 	vstr	s15, [r3]
				if (tempo_attuale - tempo_iniziale >= 3) {
 81022ea:	4b52      	ldr	r3, [pc, #328]	@ (8102434 <main+0x40c>)
 81022ec:	ed93 7a00 	vldr	s14, [r3]
 81022f0:	4b4f      	ldr	r3, [pc, #316]	@ (8102430 <main+0x408>)
 81022f2:	edd3 7a00 	vldr	s15, [r3]
 81022f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81022fa:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 81022fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102306:	db22      	blt.n	810234e <main+0x326>
					sys_started++;
 8102308:	4b4b      	ldr	r3, [pc, #300]	@ (8102438 <main+0x410>)
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	3301      	adds	r3, #1
 810230e:	4a4a      	ldr	r2, [pc, #296]	@ (8102438 <main+0x410>)
 8102310:	6013      	str	r3, [r2, #0]

					if (sys_started == 1) {
 8102312:	4b49      	ldr	r3, [pc, #292]	@ (8102438 <main+0x410>)
 8102314:	681b      	ldr	r3, [r3, #0]
 8102316:	2b01      	cmp	r3, #1
 8102318:	d105      	bne.n	8102326 <main+0x2fe>
						stadio = 0;
 810231a:	4b48      	ldr	r3, [pc, #288]	@ (810243c <main+0x414>)
 810231c:	2200      	movs	r2, #0
 810231e:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 8102320:	4b42      	ldr	r3, [pc, #264]	@ (810242c <main+0x404>)
 8102322:	2200      	movs	r2, #0
 8102324:	601a      	str	r2, [r3, #0]
					}
					if (sys_started == 2) {
 8102326:	4b44      	ldr	r3, [pc, #272]	@ (8102438 <main+0x410>)
 8102328:	681b      	ldr	r3, [r3, #0]
 810232a:	2b02      	cmp	r3, #2
 810232c:	d105      	bne.n	810233a <main+0x312>
						stadio = 0;
 810232e:	4b43      	ldr	r3, [pc, #268]	@ (810243c <main+0x414>)
 8102330:	2200      	movs	r2, #0
 8102332:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 8102334:	4b3d      	ldr	r3, [pc, #244]	@ (810242c <main+0x404>)
 8102336:	2200      	movs	r2, #0
 8102338:	601a      	str	r2, [r3, #0]
					}
					if (sys_started == 3)
 810233a:	4b3f      	ldr	r3, [pc, #252]	@ (8102438 <main+0x410>)
 810233c:	681b      	ldr	r3, [r3, #0]
 810233e:	2b03      	cmp	r3, #3
 8102340:	d102      	bne.n	8102348 <main+0x320>
						sys_started = 0;
 8102342:	4b3d      	ldr	r3, [pc, #244]	@ (8102438 <main+0x410>)
 8102344:	2200      	movs	r2, #0
 8102346:	601a      	str	r2, [r3, #0]
					tasto_premuto = 0;
 8102348:	4b36      	ldr	r3, [pc, #216]	@ (8102424 <main+0x3fc>)
 810234a:	2200      	movs	r2, #0
 810234c:	601a      	str	r2, [r3, #0]
			//#####################################
			//##             BNO055			   ##
			//#####################################
			//*******************************

			flag_BNO055_Data_Ready = 1; //perche non va mai a 1 non ho capito perche
 810234e:	4b3c      	ldr	r3, [pc, #240]	@ (8102440 <main+0x418>)
 8102350:	2201      	movs	r2, #1
 8102352:	601a      	str	r2, [r3, #0]
			if (flag_BNO055_Data_Ready == 1) {
 8102354:	4b3a      	ldr	r3, [pc, #232]	@ (8102440 <main+0x418>)
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	2b01      	cmp	r3, #1
 810235a:	d18b      	bne.n	8102274 <main+0x24c>
				flag_BNO055_Data_Ready = 0;
 810235c:	4b38      	ldr	r3, [pc, #224]	@ (8102440 <main+0x418>)
 810235e:	2200      	movs	r2, #0
 8102360:	601a      	str	r2, [r3, #0]

				//bno055_writeData(BNO055_SYS_TRIGGER, 0x40); //reset int
				//bno055_calibration_state_t cal = bno055_getCalibrationState();

				if (cal.sys != 3) {
 8102362:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8102366:	2b03      	cmp	r3, #3
 8102368:	d06e      	beq.n	8102448 <main+0x420>
					// printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n",
					// cal.gyro, cal.accel, cal.mag, cal.sys);
					bno055_calibrated = 1;
 810236a:	4b36      	ldr	r3, [pc, #216]	@ (8102444 <main+0x41c>)
 810236c:	2201      	movs	r2, #1
 810236e:	601a      	str	r2, [r3, #0]
 8102370:	e06d      	b.n	810244e <main+0x426>
 8102372:	bf00      	nop
 8102374:	58026400 	.word	0x58026400
 8102378:	10008b28 	.word	0x10008b28
 810237c:	1000008c 	.word	0x1000008c
 8102380:	10008b1c 	.word	0x10008b1c
 8102384:	1000038c 	.word	0x1000038c
 8102388:	10000340 	.word	0x10000340
 810238c:	100003d8 	.word	0x100003d8
 8102390:	10000424 	.word	0x10000424
 8102394:	100004bc 	.word	0x100004bc
 8102398:	10000470 	.word	0x10000470
 810239c:	10008a6c 	.word	0x10008a6c
 81023a0:	10000508 	.word	0x10000508
 81023a4:	100002ec 	.word	0x100002ec
 81023a8:	081138f0 	.word	0x081138f0
 81023ac:	3c23d70a 	.word	0x3c23d70a
 81023b0:	10008748 	.word	0x10008748
 81023b4:	00000000 	.word	0x00000000
 81023b8:	c2340000 	.word	0xc2340000
 81023bc:	42340000 	.word	0x42340000
 81023c0:	10008768 	.word	0x10008768
 81023c4:	3df5c28f 	.word	0x3df5c28f
 81023c8:	3f8ccccd 	.word	0x3f8ccccd
 81023cc:	3cbfb15b 	.word	0x3cbfb15b
 81023d0:	10008788 	.word	0x10008788
 81023d4:	3827c5ac 	.word	0x3827c5ac
 81023d8:	100087a8 	.word	0x100087a8
 81023dc:	47c35000 	.word	0x47c35000
 81023e0:	46ea6000 	.word	0x46ea6000
 81023e4:	10008b0c 	.word	0x10008b0c
 81023e8:	10008afc 	.word	0x10008afc
 81023ec:	10008b10 	.word	0x10008b10
 81023f0:	10008b04 	.word	0x10008b04
 81023f4:	10008af4 	.word	0x10008af4
 81023f8:	1000007c 	.word	0x1000007c
 81023fc:	1000006c 	.word	0x1000006c
 8102400:	1000005c 	.word	0x1000005c
 8102404:	1000004c 	.word	0x1000004c
 8102408:	1000003c 	.word	0x1000003c
 810240c:	10000034 	.word	0x10000034
 8102410:	10000024 	.word	0x10000024
 8102414:	10008ab4 	.word	0x10008ab4
 8102418:	c96c3680 	.word	0xc96c3680
 810241c:	10000020 	.word	0x10000020
 8102420:	100087cc 	.word	0x100087cc
 8102424:	10008824 	.word	0x10008824
 8102428:	10008828 	.word	0x10008828
 810242c:	10008a64 	.word	0x10008a64
 8102430:	10008820 	.word	0x10008820
 8102434:	1000881c 	.word	0x1000881c
 8102438:	10008810 	.word	0x10008810
 810243c:	10008b18 	.word	0x10008b18
 8102440:	100087c8 	.word	0x100087c8
 8102444:	10008808 	.word	0x10008808
				} else
					bno055_calibrated = 1;
 8102448:	4bc7      	ldr	r3, [pc, #796]	@ (8102768 <main+0x740>)
 810244a:	2201      	movs	r2, #1
 810244c:	601a      	str	r2, [r3, #0]


				//bno055_calibrated = 1; //da togliere
				if (bno055_calibrated) {
 810244e:	4bc6      	ldr	r3, [pc, #792]	@ (8102768 <main+0x740>)
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	2b00      	cmp	r3, #0
 8102454:	f43f af0e 	beq.w	8102274 <main+0x24c>
					eul = bno055_getVectorEuler();
 8102458:	f7ff f9cc 	bl	81017f4 <bno055_getVectorEuler>
 810245c:	eeb0 4a40 	vmov.f32	s8, s0
 8102460:	eef0 4a60 	vmov.f32	s9, s1
 8102464:	eeb0 5a41 	vmov.f32	s10, s2
 8102468:	eef0 5a61 	vmov.f32	s11, s3
 810246c:	eeb0 6a42 	vmov.f32	s12, s4
 8102470:	eef0 6a62 	vmov.f32	s13, s5
 8102474:	eeb0 7a43 	vmov.f32	s14, s6
 8102478:	eef0 7a63 	vmov.f32	s15, s7
 810247c:	ed87 4b12 	vstr	d4, [r7, #72]	@ 0x48
 8102480:	ed87 5b14 	vstr	d5, [r7, #80]	@ 0x50
 8102484:	ed87 6b16 	vstr	d6, [r7, #88]	@ 0x58
 8102488:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
					//stampa angoli eulero

					//printf("Yaw: %+2.2f Roll: %+2.2f Pitch: %+2.2f \r\n", eul.x, eul.y, eul.z);
					roll = -eul.y - 2; //ottengo angolo di eulero
 810248c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8102490:	63ba      	str	r2, [r7, #56]	@ 0x38
 8102492:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8102496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102498:	f04f 0200 	mov.w	r2, #0
 810249c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81024a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 81024a4:	f7fd ff78 	bl	8100398 <__aeabi_dsub>
 81024a8:	4602      	mov	r2, r0
 81024aa:	460b      	mov	r3, r1
 81024ac:	4610      	mov	r0, r2
 81024ae:	4619      	mov	r1, r3
 81024b0:	f7fe fc22 	bl	8100cf8 <__aeabi_d2f>
 81024b4:	4603      	mov	r3, r0
 81024b6:	4aad      	ldr	r2, [pc, #692]	@ (810276c <main+0x744>)
 81024b8:	6013      	str	r3, [r2, #0]
					yaw = eul.x;
 81024ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 81024be:	4610      	mov	r0, r2
 81024c0:	4619      	mov	r1, r3
 81024c2:	f7fe fc19 	bl	8100cf8 <__aeabi_d2f>
 81024c6:	4603      	mov	r3, r0
 81024c8:	4aa9      	ldr	r2, [pc, #676]	@ (8102770 <main+0x748>)
 81024ca:	6013      	str	r3, [r2, #0]


					yaw_rate = (yaw - old_yaw) / dt;
 81024cc:	4ba8      	ldr	r3, [pc, #672]	@ (8102770 <main+0x748>)
 81024ce:	ed93 7a00 	vldr	s14, [r3]
 81024d2:	4ba8      	ldr	r3, [pc, #672]	@ (8102774 <main+0x74c>)
 81024d4:	edd3 7a00 	vldr	s15, [r3]
 81024d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 81024dc:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 8102778 <main+0x750>
 81024e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81024e4:	4ba5      	ldr	r3, [pc, #660]	@ (810277c <main+0x754>)
 81024e6:	edc3 7a00 	vstr	s15, [r3]
					old_yaw = yaw;
 81024ea:	4ba1      	ldr	r3, [pc, #644]	@ (8102770 <main+0x748>)
 81024ec:	681b      	ldr	r3, [r3, #0]
 81024ee:	4aa1      	ldr	r2, [pc, #644]	@ (8102774 <main+0x74c>)
 81024f0:	6013      	str	r3, [r2, #0]
					//controllo angolo di roll, se è troppo grande ferma tutto
					if (roll >= 30 || roll <= -30) {
 81024f2:	4b9e      	ldr	r3, [pc, #632]	@ (810276c <main+0x744>)
 81024f4:	edd3 7a00 	vldr	s15, [r3]
 81024f8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 81024fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102504:	da09      	bge.n	810251a <main+0x4f2>
 8102506:	4b99      	ldr	r3, [pc, #612]	@ (810276c <main+0x744>)
 8102508:	edd3 7a00 	vldr	s15, [r3]
 810250c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8102510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102518:	d802      	bhi.n	8102520 <main+0x4f8>
						sys_started = 0;
 810251a:	4b99      	ldr	r3, [pc, #612]	@ (8102780 <main+0x758>)
 810251c:	2200      	movs	r2, #0
 810251e:	601a      	str	r2, [r3, #0]
					//#####################################
					//##          RUOTA DIETRO		   ##
					//#####################################
					//*******************************
					//Ottengo velocita ruota dietro
					counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 8102520:	4b98      	ldr	r3, [pc, #608]	@ (8102784 <main+0x75c>)
 8102522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102524:	4618      	mov	r0, r3
 8102526:	f7fe f875 	bl	8100614 <__aeabi_ui2d>
 810252a:	4604      	mov	r4, r0
 810252c:	460d      	mov	r5, r1
 810252e:	4b95      	ldr	r3, [pc, #596]	@ (8102784 <main+0x75c>)
 8102530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102532:	085b      	lsrs	r3, r3, #1
 8102534:	4618      	mov	r0, r3
 8102536:	f7fe f86d 	bl	8100614 <__aeabi_ui2d>
 810253a:	4602      	mov	r2, r0
 810253c:	460b      	mov	r3, r1
 810253e:	4620      	mov	r0, r4
 8102540:	4629      	mov	r1, r5
 8102542:	f7fd ff29 	bl	8100398 <__aeabi_dsub>
 8102546:	4602      	mov	r2, r0
 8102548:	460b      	mov	r3, r1
 810254a:	4610      	mov	r0, r2
 810254c:	4619      	mov	r1, r3
 810254e:	f7fe fbd3 	bl	8100cf8 <__aeabi_d2f>
 8102552:	4603      	mov	r3, r0
 8102554:	4a8c      	ldr	r2, [pc, #560]	@ (8102788 <main+0x760>)
 8102556:	6013      	str	r3, [r2, #0]
					TIM4->CNT = (TIM4->ARR) / 2;
 8102558:	4b8a      	ldr	r3, [pc, #552]	@ (8102784 <main+0x75c>)
 810255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810255c:	4a89      	ldr	r2, [pc, #548]	@ (8102784 <main+0x75c>)
 810255e:	085b      	lsrs	r3, r3, #1
 8102560:	6253      	str	r3, [r2, #36]	@ 0x24
					//velocita angolare
					//encoder ha risoluzione cpr 500, non 66
					delta_angle_degree = (counts * 360) / (2 * 4 * 500)
 8102562:	4b89      	ldr	r3, [pc, #548]	@ (8102788 <main+0x760>)
 8102564:	edd3 7a00 	vldr	s15, [r3]
 8102568:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 810278c <main+0x764>
 810256c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102570:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8102790 <main+0x768>
 8102574:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8102578:	ee16 0a90 	vmov	r0, s13
 810257c:	f7fe f86c 	bl	8100658 <__aeabi_f2d>
							* 0.03099707249870; //del motore(davanti) //18denti dietro 3.8cm  //28 davanti 5.7cm
 8102580:	a36f      	add	r3, pc, #444	@ (adr r3, 8102740 <main+0x718>)
 8102582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102586:	f7fe f8bf 	bl	8100708 <__aeabi_dmul>
 810258a:	4602      	mov	r2, r0
 810258c:	460b      	mov	r3, r1
 810258e:	4610      	mov	r0, r2
 8102590:	4619      	mov	r1, r3
 8102592:	f7fe fbb1 	bl	8100cf8 <__aeabi_d2f>
 8102596:	4603      	mov	r3, r0
					delta_angle_degree = (counts * 360) / (2 * 4 * 500)
 8102598:	4a7e      	ldr	r2, [pc, #504]	@ (8102794 <main+0x76c>)
 810259a:	6013      	str	r3, [r2, #0]
					speed_degsec = -1 * delta_angle_degree / dt;
 810259c:	4b7d      	ldr	r3, [pc, #500]	@ (8102794 <main+0x76c>)
 810259e:	edd3 7a00 	vldr	s15, [r3]
 81025a2:	eeb1 7a67 	vneg.f32	s14, s15
 81025a6:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8102778 <main+0x750>
 81025aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81025ae:	4b7a      	ldr	r3, [pc, #488]	@ (8102798 <main+0x770>)
 81025b0:	edc3 7a00 	vstr	s15, [r3]

					angle_degree += delta_angle_degree;
 81025b4:	4b79      	ldr	r3, [pc, #484]	@ (810279c <main+0x774>)
 81025b6:	ed93 7a00 	vldr	s14, [r3]
 81025ba:	4b76      	ldr	r3, [pc, #472]	@ (8102794 <main+0x76c>)
 81025bc:	edd3 7a00 	vldr	s15, [r3]
 81025c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 81025c4:	4b75      	ldr	r3, [pc, #468]	@ (810279c <main+0x774>)
 81025c6:	edc3 7a00 	vstr	s15, [r3]
					//filtro media mobile
					speed_degsec_filtrata = filtro_media_mobile(velocitavecchia,
 81025ca:	4b73      	ldr	r3, [pc, #460]	@ (8102798 <main+0x770>)
 81025cc:	edd3 7a00 	vldr	s15, [r3]
 81025d0:	221e      	movs	r2, #30
 81025d2:	eeb0 0a67 	vmov.f32	s0, s15
 81025d6:	4972      	ldr	r1, [pc, #456]	@ (81027a0 <main+0x778>)
 81025d8:	4872      	ldr	r0, [pc, #456]	@ (81027a4 <main+0x77c>)
 81025da:	f7ff fcc9 	bl	8101f70 <filtro_media_mobile>
 81025de:	eef0 7a40 	vmov.f32	s15, s0
 81025e2:	4b71      	ldr	r3, [pc, #452]	@ (81027a8 <main+0x780>)
 81025e4:	edc3 7a00 	vstr	s15, [r3]
							velocitanuova, speed_degsec, 30);
					//rapporto ruota posteriore
					speed_degsec_back = speed_degsec_filtrata * 0.057 / 0.038; //rapporto velcoita angolare tra ruota dietro e avanti???
 81025e8:	4b6f      	ldr	r3, [pc, #444]	@ (81027a8 <main+0x780>)
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	4618      	mov	r0, r3
 81025ee:	f7fe f833 	bl	8100658 <__aeabi_f2d>
 81025f2:	a355      	add	r3, pc, #340	@ (adr r3, 8102748 <main+0x720>)
 81025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025f8:	f7fe f886 	bl	8100708 <__aeabi_dmul>
 81025fc:	4602      	mov	r2, r0
 81025fe:	460b      	mov	r3, r1
 8102600:	4610      	mov	r0, r2
 8102602:	4619      	mov	r1, r3
 8102604:	a352      	add	r3, pc, #328	@ (adr r3, 8102750 <main+0x728>)
 8102606:	e9d3 2300 	ldrd	r2, r3, [r3]
 810260a:	f7fe f9a7 	bl	810095c <__aeabi_ddiv>
 810260e:	4602      	mov	r2, r0
 8102610:	460b      	mov	r3, r1
 8102612:	4610      	mov	r0, r2
 8102614:	4619      	mov	r1, r3
 8102616:	f7fe fb6f 	bl	8100cf8 <__aeabi_d2f>
 810261a:	4603      	mov	r3, r0
 810261c:	4a63      	ldr	r2, [pc, #396]	@ (81027ac <main+0x784>)
 810261e:	6013      	str	r3, [r2, #0]

					//velocita ruota dietro
					speed_metsec = speed_degsec_back / 180 * 3.14 * radius;
 8102620:	4b62      	ldr	r3, [pc, #392]	@ (81027ac <main+0x784>)
 8102622:	edd3 7a00 	vldr	s15, [r3]
 8102626:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 81027b0 <main+0x788>
 810262a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810262e:	ee16 0a90 	vmov	r0, s13
 8102632:	f7fe f811 	bl	8100658 <__aeabi_f2d>
 8102636:	a348      	add	r3, pc, #288	@ (adr r3, 8102758 <main+0x730>)
 8102638:	e9d3 2300 	ldrd	r2, r3, [r3]
 810263c:	f7fe f864 	bl	8100708 <__aeabi_dmul>
 8102640:	4602      	mov	r2, r0
 8102642:	460b      	mov	r3, r1
 8102644:	4610      	mov	r0, r2
 8102646:	4619      	mov	r1, r3
 8102648:	a345      	add	r3, pc, #276	@ (adr r3, 8102760 <main+0x738>)
 810264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810264e:	f7fe f85b 	bl	8100708 <__aeabi_dmul>
 8102652:	4602      	mov	r2, r0
 8102654:	460b      	mov	r3, r1
 8102656:	4610      	mov	r0, r2
 8102658:	4619      	mov	r1, r3
 810265a:	f7fe fb4d 	bl	8100cf8 <__aeabi_d2f>
 810265e:	4603      	mov	r3, r0
 8102660:	4a54      	ldr	r2, [pc, #336]	@ (81027b4 <main+0x78c>)
 8102662:	6013      	str	r3, [r2, #0]

					//angolo dietro
					angle_back_wheel += speed_degsec_back * dt;
 8102664:	4b51      	ldr	r3, [pc, #324]	@ (81027ac <main+0x784>)
 8102666:	edd3 7a00 	vldr	s15, [r3]
 810266a:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8102778 <main+0x750>
 810266e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102672:	4b51      	ldr	r3, [pc, #324]	@ (81027b8 <main+0x790>)
 8102674:	edd3 7a00 	vldr	s15, [r3]
 8102678:	ee77 7a27 	vadd.f32	s15, s14, s15
 810267c:	4b4e      	ldr	r3, [pc, #312]	@ (81027b8 <main+0x790>)
 810267e:	edc3 7a00 	vstr	s15, [r3]
					//*******************************

					//******************************+
					//PID ruota dietro
					desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 8102682:	4b4e      	ldr	r3, [pc, #312]	@ (81027bc <main+0x794>)
 8102684:	edd3 7a00 	vldr	s15, [r3]
 8102688:	eeb0 0a67 	vmov.f32	s0, s15
 810268c:	f7ff fc3e 	bl	8101f0c <getSpeed>
 8102690:	eef0 7a40 	vmov.f32	s15, s0
 8102694:	4b49      	ldr	r3, [pc, #292]	@ (81027bc <main+0x794>)
 8102696:	edc3 7a00 	vstr	s15, [r3]
					desired_speed_rpm = DegreeSec2RPM(
							desired_speed_metsec / radius); //inutile per ora
 810269a:	4b48      	ldr	r3, [pc, #288]	@ (81027bc <main+0x794>)
 810269c:	681b      	ldr	r3, [r3, #0]
 810269e:	4618      	mov	r0, r3
 81026a0:	f7fd ffda 	bl	8100658 <__aeabi_f2d>
 81026a4:	a32e      	add	r3, pc, #184	@ (adr r3, 8102760 <main+0x738>)
 81026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026aa:	f7fe f957 	bl	810095c <__aeabi_ddiv>
 81026ae:	4602      	mov	r2, r0
 81026b0:	460b      	mov	r3, r1
					desired_speed_rpm = DegreeSec2RPM(
 81026b2:	4610      	mov	r0, r2
 81026b4:	4619      	mov	r1, r3
 81026b6:	f7fe fb1f 	bl	8100cf8 <__aeabi_d2f>
 81026ba:	4603      	mov	r3, r0
 81026bc:	ee00 3a10 	vmov	s0, r3
 81026c0:	f7fe fd30 	bl	8101124 <DegreeSec2RPM>
 81026c4:	eef0 7a40 	vmov.f32	s15, s0
 81026c8:	4b3d      	ldr	r3, [pc, #244]	@ (81027c0 <main+0x798>)
 81026ca:	edc3 7a00 	vstr	s15, [r3]
					u_back_wheel = PID_controller(&pid_speed, speed_metsec,
 81026ce:	4b39      	ldr	r3, [pc, #228]	@ (81027b4 <main+0x78c>)
 81026d0:	edd3 7a00 	vldr	s15, [r3]
 81026d4:	4b39      	ldr	r3, [pc, #228]	@ (81027bc <main+0x794>)
 81026d6:	ed93 7a00 	vldr	s14, [r3]
 81026da:	eef0 0a47 	vmov.f32	s1, s14
 81026de:	eeb0 0a67 	vmov.f32	s0, s15
 81026e2:	4838      	ldr	r0, [pc, #224]	@ (81027c4 <main+0x79c>)
 81026e4:	f7fe fe4a 	bl	810137c <PID_controller>
 81026e8:	eef0 7a40 	vmov.f32	s15, s0
 81026ec:	4b36      	ldr	r3, [pc, #216]	@ (81027c8 <main+0x7a0>)
 81026ee:	edc3 7a00 	vstr	s15, [r3]
							desired_speed_metsec);
					//******************************

					if (sys_started == 0) {
 81026f2:	4b23      	ldr	r3, [pc, #140]	@ (8102780 <main+0x758>)
 81026f4:	681b      	ldr	r3, [r3, #0]
 81026f6:	2b00      	cmp	r3, #0
 81026f8:	d107      	bne.n	810270a <main+0x6e2>
						u_front_wheel = 0;
 81026fa:	4b34      	ldr	r3, [pc, #208]	@ (81027cc <main+0x7a4>)
 81026fc:	f04f 0200 	mov.w	r2, #0
 8102700:	601a      	str	r2, [r3, #0]
						u_back_wheel = 0;
 8102702:	4b31      	ldr	r3, [pc, #196]	@ (81027c8 <main+0x7a0>)
 8102704:	f04f 0200 	mov.w	r2, #0
 8102708:	601a      	str	r2, [r3, #0]

					}
					if (sys_started == 1) {
 810270a:	4b1d      	ldr	r3, [pc, #116]	@ (8102780 <main+0x758>)
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	2b01      	cmp	r3, #1
 8102710:	d108      	bne.n	8102724 <main+0x6fc>
						//nuovo_valore_b
						//per una corrente nulla, V=aI+b=b  quindi b è data dal voltaggio a riposo, che sta nella variabile x_data[0]
						//b = x_data[0];

						//setto l'angolo del manubrio a 0
						angle_steer = 0;
 8102712:	4b2f      	ldr	r3, [pc, #188]	@ (81027d0 <main+0x7a8>)
 8102714:	f04f 0200 	mov.w	r2, #0
 8102718:	601a      	str	r2, [r3, #0]
						sys_started++;
 810271a:	4b19      	ldr	r3, [pc, #100]	@ (8102780 <main+0x758>)
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	3301      	adds	r3, #1
 8102720:	4a17      	ldr	r2, [pc, #92]	@ (8102780 <main+0x758>)
 8102722:	6013      	str	r3, [r2, #0]
					}
					//u_back_wheel = 0; //per tenerla ferma per i test
					//settare duty e pwm driver
					duty_back_wheel = Voltage2Duty(u_back_wheel);
 8102724:	4b28      	ldr	r3, [pc, #160]	@ (81027c8 <main+0x7a0>)
 8102726:	edd3 7a00 	vldr	s15, [r3]
 810272a:	eeb0 0a67 	vmov.f32	s0, s15
 810272e:	f7fe fd19 	bl	8101164 <Voltage2Duty>
 8102732:	eef0 7a40 	vmov.f32	s15, s0
 8102736:	4b27      	ldr	r3, [pc, #156]	@ (81027d4 <main+0x7ac>)
 8102738:	edc3 7a00 	vstr	s15, [r3]
 810273c:	e04c      	b.n	81027d8 <main+0x7b0>
 810273e:	bf00      	nop
 8102740:	529d5864 	.word	0x529d5864
 8102744:	3f9fbdb2 	.word	0x3f9fbdb2
 8102748:	9fbe76c9 	.word	0x9fbe76c9
 810274c:	3fad2f1a 	.word	0x3fad2f1a
 8102750:	6a7ef9db 	.word	0x6a7ef9db
 8102754:	3fa374bc 	.word	0x3fa374bc
 8102758:	51eb851f 	.word	0x51eb851f
 810275c:	40091eb8 	.word	0x40091eb8
 8102760:	70a3d70a 	.word	0x70a3d70a
 8102764:	3fc70a3d 	.word	0x3fc70a3d
 8102768:	10008808 	.word	0x10008808
 810276c:	10008a44 	.word	0x10008a44
 8102770:	10008a48 	.word	0x10008a48
 8102774:	10008a4c 	.word	0x10008a4c
 8102778:	3c23d70a 	.word	0x3c23d70a
 810277c:	10008a40 	.word	0x10008a40
 8102780:	10008810 	.word	0x10008810
 8102784:	40000800 	.word	0x40000800
 8102788:	100087d4 	.word	0x100087d4
 810278c:	43b40000 	.word	0x43b40000
 8102790:	457a0000 	.word	0x457a0000
 8102794:	100087e4 	.word	0x100087e4
 8102798:	100087ec 	.word	0x100087ec
 810279c:	100087e8 	.word	0x100087e8
 81027a0:	100089a0 	.word	0x100089a0
 81027a4:	10008928 	.word	0x10008928
 81027a8:	10008a18 	.word	0x10008a18
 81027ac:	10008814 	.word	0x10008814
 81027b0:	43340000 	.word	0x43340000
 81027b4:	100087f4 	.word	0x100087f4
 81027b8:	10008818 	.word	0x10008818
 81027bc:	100087f0 	.word	0x100087f0
 81027c0:	100087f8 	.word	0x100087f8
 81027c4:	10008748 	.word	0x10008748
 81027c8:	100087fc 	.word	0x100087fc
 81027cc:	10008a50 	.word	0x10008a50
 81027d0:	100087e0 	.word	0x100087e0
 81027d4:	10008800 	.word	0x10008800
					direction_back_wheel = Ref2Direction(u_back_wheel);
 81027d8:	4bc1      	ldr	r3, [pc, #772]	@ (8102ae0 <main+0xab8>)
 81027da:	edd3 7a00 	vldr	s15, [r3]
 81027de:	eeb0 0a67 	vmov.f32	s0, s15
 81027e2:	f7fe fd01 	bl	81011e8 <Ref2Direction>
 81027e6:	4603      	mov	r3, r0
 81027e8:	461a      	mov	r2, r3
 81027ea:	4bbe      	ldr	r3, [pc, #760]	@ (8102ae4 <main+0xabc>)
 81027ec:	601a      	str	r2, [r3, #0]
					set_PWM_and_dir_back_wheel(duty_back_wheel,
 81027ee:	4bbe      	ldr	r3, [pc, #760]	@ (8102ae8 <main+0xac0>)
 81027f0:	edd3 7a00 	vldr	s15, [r3]
 81027f4:	4bbb      	ldr	r3, [pc, #748]	@ (8102ae4 <main+0xabc>)
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	b2db      	uxtb	r3, r3
 81027fa:	4618      	mov	r0, r3
 81027fc:	eeb0 0a67 	vmov.f32	s0, s15
 8102800:	f7fe fd0a 	bl	8101218 <set_PWM_and_dir_back_wheel>

					//#####################################
					//##          PID YAW RATE		     ##
					//#####################################
					//******************************
					desired_yaw_rate = 0;
 8102804:	4bb9      	ldr	r3, [pc, #740]	@ (8102aec <main+0xac4>)
 8102806:	f04f 0200 	mov.w	r2, #0
 810280a:	601a      	str	r2, [r3, #0]
					desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 810280c:	4bb8      	ldr	r3, [pc, #736]	@ (8102af0 <main+0xac8>)
 810280e:	edd3 7a00 	vldr	s15, [r3]
 8102812:	4bb6      	ldr	r3, [pc, #728]	@ (8102aec <main+0xac4>)
 8102814:	ed93 7a00 	vldr	s14, [r3]
 8102818:	eef0 0a47 	vmov.f32	s1, s14
 810281c:	eeb0 0a67 	vmov.f32	s0, s15
 8102820:	48b4      	ldr	r0, [pc, #720]	@ (8102af4 <main+0xacc>)
 8102822:	f7fe fdab 	bl	810137c <PID_controller>
 8102826:	eef0 7a40 	vmov.f32	s15, s0
 810282a:	4bb3      	ldr	r3, [pc, #716]	@ (8102af8 <main+0xad0>)
 810282c:	edc3 7a00 	vstr	s15, [r3]
					//#####################################

					//******************************
					//prima di usare l'encoder

					desired_roll = 0; //l'angolo di equilibrio sono 2 gradi
 8102830:	4bb1      	ldr	r3, [pc, #708]	@ (8102af8 <main+0xad0>)
 8102832:	f04f 0200 	mov.w	r2, #0
 8102836:	601a      	str	r2, [r3, #0]
					desired_torque = PID_controller(&pid_roll, roll,
 8102838:	4bb0      	ldr	r3, [pc, #704]	@ (8102afc <main+0xad4>)
 810283a:	edd3 7a00 	vldr	s15, [r3]
 810283e:	4bae      	ldr	r3, [pc, #696]	@ (8102af8 <main+0xad0>)
 8102840:	ed93 7a00 	vldr	s14, [r3]
 8102844:	eef0 0a47 	vmov.f32	s1, s14
 8102848:	eeb0 0a67 	vmov.f32	s0, s15
 810284c:	48ac      	ldr	r0, [pc, #688]	@ (8102b00 <main+0xad8>)
 810284e:	f7fe fd95 	bl	810137c <PID_controller>
 8102852:	eef0 7a40 	vmov.f32	s15, s0
 8102856:	4bab      	ldr	r3, [pc, #684]	@ (8102b04 <main+0xadc>)
 8102858:	edc3 7a00 	vstr	s15, [r3]
							desired_roll);
					//******************************

					//encoder per ruota anteriore
					//ottengo i counts dell'encoder
					counts_steer = (double) TIM8->CNT - (TIM8->ARR) / 2; //credo cosi hai sia i conteggi negativi che positivi
 810285c:	4baa      	ldr	r3, [pc, #680]	@ (8102b08 <main+0xae0>)
 810285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102860:	4618      	mov	r0, r3
 8102862:	f7fd fed7 	bl	8100614 <__aeabi_ui2d>
 8102866:	4604      	mov	r4, r0
 8102868:	460d      	mov	r5, r1
 810286a:	4ba7      	ldr	r3, [pc, #668]	@ (8102b08 <main+0xae0>)
 810286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810286e:	085b      	lsrs	r3, r3, #1
 8102870:	4618      	mov	r0, r3
 8102872:	f7fd fecf 	bl	8100614 <__aeabi_ui2d>
 8102876:	4602      	mov	r2, r0
 8102878:	460b      	mov	r3, r1
 810287a:	4620      	mov	r0, r4
 810287c:	4629      	mov	r1, r5
 810287e:	f7fd fd8b 	bl	8100398 <__aeabi_dsub>
 8102882:	4602      	mov	r2, r0
 8102884:	460b      	mov	r3, r1
 8102886:	4610      	mov	r0, r2
 8102888:	4619      	mov	r1, r3
 810288a:	f7fe fa35 	bl	8100cf8 <__aeabi_d2f>
 810288e:	4603      	mov	r3, r0
 8102890:	4a9e      	ldr	r2, [pc, #632]	@ (8102b0c <main+0xae4>)
 8102892:	6013      	str	r3, [r2, #0]
					TIM8->CNT = (TIM8->ARR) / 2;
 8102894:	4b9c      	ldr	r3, [pc, #624]	@ (8102b08 <main+0xae0>)
 8102896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102898:	4a9b      	ldr	r2, [pc, #620]	@ (8102b08 <main+0xae0>)
 810289a:	085b      	lsrs	r3, r3, #1
 810289c:	6253      	str	r3, [r2, #36]	@ 0x24
					//calcolo l'angolo dello sterzo
					delta_angle_degree_steer = (counts_steer * 360)
 810289e:	4b9b      	ldr	r3, [pc, #620]	@ (8102b0c <main+0xae4>)
 81028a0:	edd3 7a00 	vldr	s15, [r3]
 81028a4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8102b10 <main+0xae8>
 81028a8:	ee67 7a87 	vmul.f32	s15, s15, s14
							/ (2 * 4 * 500) * 0.03099707249870;
 81028ac:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8102b14 <main+0xaec>
 81028b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81028b4:	ee16 0a90 	vmov	r0, s13
 81028b8:	f7fd fece 	bl	8100658 <__aeabi_f2d>
 81028bc:	a380      	add	r3, pc, #512	@ (adr r3, 8102ac0 <main+0xa98>)
 81028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028c2:	f7fd ff21 	bl	8100708 <__aeabi_dmul>
 81028c6:	4602      	mov	r2, r0
 81028c8:	460b      	mov	r3, r1
 81028ca:	4610      	mov	r0, r2
 81028cc:	4619      	mov	r1, r3
 81028ce:	f7fe fa13 	bl	8100cf8 <__aeabi_d2f>
 81028d2:	4603      	mov	r3, r0
					delta_angle_degree_steer = (counts_steer * 360)
 81028d4:	4a90      	ldr	r2, [pc, #576]	@ (8102b18 <main+0xaf0>)
 81028d6:	6013      	str	r3, [r2, #0]
					angle_steer = angle_steer + delta_angle_degree_steer; //angolo sterzo
 81028d8:	4b90      	ldr	r3, [pc, #576]	@ (8102b1c <main+0xaf4>)
 81028da:	ed93 7a00 	vldr	s14, [r3]
 81028de:	4b8e      	ldr	r3, [pc, #568]	@ (8102b18 <main+0xaf0>)
 81028e0:	edd3 7a00 	vldr	s15, [r3]
 81028e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81028e8:	4b8c      	ldr	r3, [pc, #560]	@ (8102b1c <main+0xaf4>)
 81028ea:	edc3 7a00 	vstr	s15, [r3]
					speed_degsec_steer = delta_angle_degree_steer / dt; //velocita sterzo
 81028ee:	4b8a      	ldr	r3, [pc, #552]	@ (8102b18 <main+0xaf0>)
 81028f0:	ed93 7a00 	vldr	s14, [r3]
 81028f4:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8102b20 <main+0xaf8>
 81028f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81028fc:	4b89      	ldr	r3, [pc, #548]	@ (8102b24 <main+0xafc>)
 81028fe:	edc3 7a00 	vstr	s15, [r3]

					speed_degsec_steer_filtrata = filtro_media_mobile(
 8102902:	4b88      	ldr	r3, [pc, #544]	@ (8102b24 <main+0xafc>)
 8102904:	edd3 7a00 	vldr	s15, [r3]
 8102908:	221e      	movs	r2, #30
 810290a:	eeb0 0a67 	vmov.f32	s0, s15
 810290e:	4986      	ldr	r1, [pc, #536]	@ (8102b28 <main+0xb00>)
 8102910:	4886      	ldr	r0, [pc, #536]	@ (8102b2c <main+0xb04>)
 8102912:	f7ff fb2d 	bl	8101f70 <filtro_media_mobile>
 8102916:	eef0 7a40 	vmov.f32	s15, s0
 810291a:	4b85      	ldr	r3, [pc, #532]	@ (8102b30 <main+0xb08>)
 810291c:	edc3 7a00 	vstr	s15, [r3]
							speedsteernuovo, speedsteervecchio,
							speed_degsec_steer, 30);
					angolo_sterzo += speed_degsec_steer_filtrata * dt;
 8102920:	4b83      	ldr	r3, [pc, #524]	@ (8102b30 <main+0xb08>)
 8102922:	edd3 7a00 	vldr	s15, [r3]
 8102926:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8102b20 <main+0xaf8>
 810292a:	ee27 7a87 	vmul.f32	s14, s15, s14
 810292e:	4b81      	ldr	r3, [pc, #516]	@ (8102b34 <main+0xb0c>)
 8102930:	edd3 7a00 	vldr	s15, [r3]
 8102934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102938:	4b7e      	ldr	r3, [pc, #504]	@ (8102b34 <main+0xb0c>)
 810293a:	edc3 7a00 	vstr	s15, [r3]
					//##         LOW-PASS FILTER	   	   ##
					//#####################################
					//******************************
					//filtro passa basso 1/s+1 discretizzato con Matlab

					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 810293e:	4b7e      	ldr	r3, [pc, #504]	@ (8102b38 <main+0xb10>)
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	4618      	mov	r0, r3
 8102944:	f7fd fe88 	bl	8100658 <__aeabi_f2d>
 8102948:	a35f      	add	r3, pc, #380	@ (adr r3, 8102ac8 <main+0xaa0>)
 810294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810294e:	f7fd fedb 	bl	8100708 <__aeabi_dmul>
 8102952:	4602      	mov	r2, r0
 8102954:	460b      	mov	r3, r1
 8102956:	4614      	mov	r4, r2
 8102958:	461d      	mov	r5, r3
							+ 0.00995 * old_desired_torque; //questo è quello del prof
 810295a:	4b78      	ldr	r3, [pc, #480]	@ (8102b3c <main+0xb14>)
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	4618      	mov	r0, r3
 8102960:	f7fd fe7a 	bl	8100658 <__aeabi_f2d>
 8102964:	a35a      	add	r3, pc, #360	@ (adr r3, 8102ad0 <main+0xaa8>)
 8102966:	e9d3 2300 	ldrd	r2, r3, [r3]
 810296a:	f7fd fecd 	bl	8100708 <__aeabi_dmul>
 810296e:	4602      	mov	r2, r0
 8102970:	460b      	mov	r3, r1
 8102972:	4620      	mov	r0, r4
 8102974:	4629      	mov	r1, r5
 8102976:	f7fd fd11 	bl	810039c <__adddf3>
 810297a:	4602      	mov	r2, r0
 810297c:	460b      	mov	r3, r1
 810297e:	4610      	mov	r0, r2
 8102980:	4619      	mov	r1, r3
 8102982:	f7fe f9b9 	bl	8100cf8 <__aeabi_d2f>
 8102986:	4603      	mov	r3, r0
					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 8102988:	4a6d      	ldr	r2, [pc, #436]	@ (8102b40 <main+0xb18>)
 810298a:	6013      	str	r3, [r2, #0]
					old_desired_torque = desired_torque;
 810298c:	4b5d      	ldr	r3, [pc, #372]	@ (8102b04 <main+0xadc>)
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	4a6a      	ldr	r2, [pc, #424]	@ (8102b3c <main+0xb14>)
 8102992:	6013      	str	r3, [r2, #0]
					old_desired_filtered_torque = desired_filtered_torque;
 8102994:	4b6a      	ldr	r3, [pc, #424]	@ (8102b40 <main+0xb18>)
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	4a67      	ldr	r2, [pc, #412]	@ (8102b38 <main+0xb10>)
 810299a:	6013      	str	r3, [r2, #0]
					//#####################################
					//##            STERZO			   ##
					//#####################################
					//******************************
					//Calcolo valore corrente
					HAL_ADC_Start(&hadc1);
 810299c:	4869      	ldr	r0, [pc, #420]	@ (8102b44 <main+0xb1c>)
 810299e:	f002 f923 	bl	8104be8 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, timeout);
 81029a2:	4b69      	ldr	r3, [pc, #420]	@ (8102b48 <main+0xb20>)
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4619      	mov	r1, r3
 81029a8:	4866      	ldr	r0, [pc, #408]	@ (8102b44 <main+0xb1c>)
 81029aa:	f002 fa1b 	bl	8104de4 <HAL_ADC_PollForConversion>
					CountValue = HAL_ADC_GetValue(&hadc1);
 81029ae:	4865      	ldr	r0, [pc, #404]	@ (8102b44 <main+0xb1c>)
 81029b0:	f002 fb0c 	bl	8104fcc <HAL_ADC_GetValue>
 81029b4:	ee07 0a90 	vmov	s15, r0
 81029b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029bc:	4b63      	ldr	r3, [pc, #396]	@ (8102b4c <main+0xb24>)
 81029be:	edc3 7a00 	vstr	s15, [r3]
					volt = ((float) CountValue) * Vref / (resolution);
 81029c2:	4b62      	ldr	r3, [pc, #392]	@ (8102b4c <main+0xb24>)
 81029c4:	ed93 7a00 	vldr	s14, [r3]
 81029c8:	4b61      	ldr	r3, [pc, #388]	@ (8102b50 <main+0xb28>)
 81029ca:	edd3 7a00 	vldr	s15, [r3]
 81029ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 81029d2:	4b60      	ldr	r3, [pc, #384]	@ (8102b54 <main+0xb2c>)
 81029d4:	ed93 7a00 	vldr	s14, [r3]
 81029d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029dc:	4b5e      	ldr	r3, [pc, #376]	@ (8102b58 <main+0xb30>)
 81029de:	edc3 7a00 	vstr	s15, [r3]
					HAL_ADC_Stop(&hadc1);
 81029e2:	4858      	ldr	r0, [pc, #352]	@ (8102b44 <main+0xb1c>)
 81029e4:	f002 f9ca 	bl	8104d7c <HAL_ADC_Stop>
					VoltSens = volt * 1.56;
 81029e8:	4b5b      	ldr	r3, [pc, #364]	@ (8102b58 <main+0xb30>)
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	4618      	mov	r0, r3
 81029ee:	f7fd fe33 	bl	8100658 <__aeabi_f2d>
 81029f2:	a339      	add	r3, pc, #228	@ (adr r3, 8102ad8 <main+0xab0>)
 81029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029f8:	f7fd fe86 	bl	8100708 <__aeabi_dmul>
 81029fc:	4602      	mov	r2, r0
 81029fe:	460b      	mov	r3, r1
 8102a00:	4610      	mov	r0, r2
 8102a02:	4619      	mov	r1, r3
 8102a04:	f7fe f978 	bl	8100cf8 <__aeabi_d2f>
 8102a08:	4603      	mov	r3, r0
 8102a0a:	4a54      	ldr	r2, [pc, #336]	@ (8102b5c <main+0xb34>)
 8102a0c:	6013      	str	r3, [r2, #0]
					corrente_non_filtrata = voltToAmpere(VoltSens, a, b);
 8102a0e:	4b53      	ldr	r3, [pc, #332]	@ (8102b5c <main+0xb34>)
 8102a10:	edd3 7a00 	vldr	s15, [r3]
 8102a14:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8102b60 <main+0xb38>
 8102a18:	4b52      	ldr	r3, [pc, #328]	@ (8102b64 <main+0xb3c>)
 8102a1a:	ed93 7a00 	vldr	s14, [r3]
 8102a1e:	eeb0 1a47 	vmov.f32	s2, s14
 8102a22:	eef0 0a66 	vmov.f32	s1, s13
 8102a26:	eeb0 0a67 	vmov.f32	s0, s15
 8102a2a:	f7ff fa50 	bl	8101ece <voltToAmpere>
 8102a2e:	eef0 7a40 	vmov.f32	s15, s0
 8102a32:	4b4d      	ldr	r3, [pc, #308]	@ (8102b68 <main+0xb40>)
 8102a34:	edc3 7a00 	vstr	s15, [r3]
					 filtered_current = fir_out_arm;
					 */

					//Filtro di Kalman per corrente
					//setta i valori di input e di misura per il filtro di kalman
					z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 8102a38:	4b48      	ldr	r3, [pc, #288]	@ (8102b5c <main+0xb34>)
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8102b6c <main+0xb44>)
 8102a3e:	6013      	str	r3, [r2, #0]
					z_data[1] = corrente_non_filtrata; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 8102a40:	4b49      	ldr	r3, [pc, #292]	@ (8102b68 <main+0xb40>)
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	4a49      	ldr	r2, [pc, #292]	@ (8102b6c <main+0xb44>)
 8102a46:	6053      	str	r3, [r2, #4]
					kalman_predict(&kf, &u);
 8102a48:	4949      	ldr	r1, [pc, #292]	@ (8102b70 <main+0xb48>)
 8102a4a:	484a      	ldr	r0, [pc, #296]	@ (8102b74 <main+0xb4c>)
 8102a4c:	f7ff f808 	bl	8101a60 <kalman_predict>
					kalman_update(&kf, &z);
 8102a50:	4949      	ldr	r1, [pc, #292]	@ (8102b78 <main+0xb50>)
 8102a52:	4848      	ldr	r0, [pc, #288]	@ (8102b74 <main+0xb4c>)
 8102a54:	f7ff f872 	bl	8101b3c <kalman_update>
					filtered_current_kalman = x_data[1];
 8102a58:	4b48      	ldr	r3, [pc, #288]	@ (8102b7c <main+0xb54>)
 8102a5a:	685b      	ldr	r3, [r3, #4]
 8102a5c:	4a48      	ldr	r2, [pc, #288]	@ (8102b80 <main+0xb58>)
 8102a5e:	6013      	str	r3, [r2, #0]

					//filtered_current_kalman = filtro_media_mobile(corrente_vecchia, corrente_nuova, corrente_non_filtrata, 170);
					//calcolo coppia
					torque = filtered_current_kalman * K;
 8102a60:	4b47      	ldr	r3, [pc, #284]	@ (8102b80 <main+0xb58>)
 8102a62:	edd3 7a00 	vldr	s15, [r3]
 8102a66:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8102b84 <main+0xb5c>
 8102a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102a6e:	4b46      	ldr	r3, [pc, #280]	@ (8102b88 <main+0xb60>)
 8102a70:	edc3 7a00 	vstr	s15, [r3]
					 }


					 */

					u_front_wheel = PID_controller(&pid_steering_torque, torque,
 8102a74:	4b44      	ldr	r3, [pc, #272]	@ (8102b88 <main+0xb60>)
 8102a76:	edd3 7a00 	vldr	s15, [r3]
 8102a7a:	4b31      	ldr	r3, [pc, #196]	@ (8102b40 <main+0xb18>)
 8102a7c:	ed93 7a00 	vldr	s14, [r3]
 8102a80:	eef0 0a47 	vmov.f32	s1, s14
 8102a84:	eeb0 0a67 	vmov.f32	s0, s15
 8102a88:	4840      	ldr	r0, [pc, #256]	@ (8102b8c <main+0xb64>)
 8102a8a:	f7fe fc77 	bl	810137c <PID_controller>
 8102a8e:	eef0 7a40 	vmov.f32	s15, s0
 8102a92:	4b3f      	ldr	r3, [pc, #252]	@ (8102b90 <main+0xb68>)
 8102a94:	edc3 7a00 	vstr	s15, [r3]

					}

					*/

					if (sys_started <= 1) {
 8102a98:	4b3e      	ldr	r3, [pc, #248]	@ (8102b94 <main+0xb6c>)
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	2b01      	cmp	r3, #1
 8102a9e:	dc7d      	bgt.n	8102b9c <main+0xb74>
						//stadio = 1000; utile se hai l'algoritmo per il segnale trapezoidale
						desired_speed_metsec = 0;
 8102aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8102b98 <main+0xb70>)
 8102aa2:	f04f 0200 	mov.w	r2, #0
 8102aa6:	601a      	str	r2, [r3, #0]
						u_back_wheel = 0;
 8102aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8102ae0 <main+0xab8>)
 8102aaa:	f04f 0200 	mov.w	r2, #0
 8102aae:	601a      	str	r2, [r3, #0]
						u_front_wheel = 0;
 8102ab0:	4b37      	ldr	r3, [pc, #220]	@ (8102b90 <main+0xb68>)
 8102ab2:	f04f 0200 	mov.w	r2, #0
 8102ab6:	601a      	str	r2, [r3, #0]
 8102ab8:	e070      	b.n	8102b9c <main+0xb74>
 8102aba:	bf00      	nop
 8102abc:	f3af 8000 	nop.w
 8102ac0:	529d5864 	.word	0x529d5864
 8102ac4:	3f9fbdb2 	.word	0x3f9fbdb2
 8102ac8:	7ae147ae 	.word	0x7ae147ae
 8102acc:	3fefae14 	.word	0x3fefae14
 8102ad0:	64c2f838 	.word	0x64c2f838
 8102ad4:	3f8460aa 	.word	0x3f8460aa
 8102ad8:	8f5c28f6 	.word	0x8f5c28f6
 8102adc:	3ff8f5c2 	.word	0x3ff8f5c2
 8102ae0:	100087fc 	.word	0x100087fc
 8102ae4:	10008804 	.word	0x10008804
 8102ae8:	10008800 	.word	0x10008800
 8102aec:	10008a20 	.word	0x10008a20
 8102af0:	10008a40 	.word	0x10008a40
 8102af4:	10008768 	.word	0x10008768
 8102af8:	10008a24 	.word	0x10008a24
 8102afc:	10008a44 	.word	0x10008a44
 8102b00:	10008788 	.word	0x10008788
 8102b04:	10008a28 	.word	0x10008a28
 8102b08:	40010400 	.word	0x40010400
 8102b0c:	100087d8 	.word	0x100087d8
 8102b10:	43b40000 	.word	0x43b40000
 8102b14:	457a0000 	.word	0x457a0000
 8102b18:	100087dc 	.word	0x100087dc
 8102b1c:	100087e0 	.word	0x100087e0
 8102b20:	3c23d70a 	.word	0x3c23d70a
 8102b24:	1000880c 	.word	0x1000880c
 8102b28:	100088ac 	.word	0x100088ac
 8102b2c:	10008834 	.word	0x10008834
 8102b30:	10008830 	.word	0x10008830
 8102b34:	10008924 	.word	0x10008924
 8102b38:	10008a30 	.word	0x10008a30
 8102b3c:	10008a34 	.word	0x10008a34
 8102b40:	10008a2c 	.word	0x10008a2c
 8102b44:	10000288 	.word	0x10000288
 8102b48:	10000014 	.word	0x10000014
 8102b4c:	10008a38 	.word	0x10008a38
 8102b50:	1000001c 	.word	0x1000001c
 8102b54:	10000018 	.word	0x10000018
 8102b58:	10008a3c 	.word	0x10008a3c
 8102b5c:	10008a68 	.word	0x10008a68
 8102b60:	3f4b2fec 	.word	0x3f4b2fec
 8102b64:	10000020 	.word	0x10000020
 8102b68:	10008a1c 	.word	0x10008a1c
 8102b6c:	10008b10 	.word	0x10008b10
 8102b70:	10008afc 	.word	0x10008afc
 8102b74:	10008ab4 	.word	0x10008ab4
 8102b78:	10008b04 	.word	0x10008b04
 8102b7c:	10008af4 	.word	0x10008af4
 8102b80:	10008a5c 	.word	0x10008a5c
 8102b84:	3cbfb15b 	.word	0x3cbfb15b
 8102b88:	10008a60 	.word	0x10008a60
 8102b8c:	100087a8 	.word	0x100087a8
 8102b90:	10008a50 	.word	0x10008a50
 8102b94:	10008810 	.word	0x10008810
 8102b98:	100087f0 	.word	0x100087f0

					}

					duty_front_wheel = Voltage2Duty(u_front_wheel);
 8102b9c:	4b86      	ldr	r3, [pc, #536]	@ (8102db8 <main+0xd90>)
 8102b9e:	edd3 7a00 	vldr	s15, [r3]
 8102ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8102ba6:	f7fe fadd 	bl	8101164 <Voltage2Duty>
 8102baa:	eef0 7a40 	vmov.f32	s15, s0
 8102bae:	4b83      	ldr	r3, [pc, #524]	@ (8102dbc <main+0xd94>)
 8102bb0:	edc3 7a00 	vstr	s15, [r3]
					dir_front_wheel = Ref2Direction(u_front_wheel);
 8102bb4:	4b80      	ldr	r3, [pc, #512]	@ (8102db8 <main+0xd90>)
 8102bb6:	edd3 7a00 	vldr	s15, [r3]
 8102bba:	eeb0 0a67 	vmov.f32	s0, s15
 8102bbe:	f7fe fb13 	bl	81011e8 <Ref2Direction>
 8102bc2:	4603      	mov	r3, r0
 8102bc4:	ee07 3a90 	vmov	s15, r3
 8102bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bcc:	4b7c      	ldr	r3, [pc, #496]	@ (8102dc0 <main+0xd98>)
 8102bce:	edc3 7a00 	vstr	s15, [r3]
					set_PWM_and_dir_front_wheel(duty_front_wheel,
 8102bd2:	4b7a      	ldr	r3, [pc, #488]	@ (8102dbc <main+0xd94>)
 8102bd4:	ed93 7a00 	vldr	s14, [r3]
 8102bd8:	4b79      	ldr	r3, [pc, #484]	@ (8102dc0 <main+0xd98>)
 8102bda:	edd3 7a00 	vldr	s15, [r3]
 8102bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102be2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8102be6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8102bea:	b2db      	uxtb	r3, r3
 8102bec:	4618      	mov	r0, r3
 8102bee:	eeb0 0a47 	vmov.f32	s0, s14
 8102bf2:	f7fe fb53 	bl	810129c <set_PWM_and_dir_front_wheel>

					//per dati via bluetooth

					//raccolgo dati da mandare per 3 secondi

					dati.velocita = 100;
 8102bf6:	4b73      	ldr	r3, [pc, #460]	@ (8102dc4 <main+0xd9c>)
 8102bf8:	2264      	movs	r2, #100	@ 0x64
 8102bfa:	601a      	str	r2, [r3, #0]
					dati.accelerazione = 9.82;
 8102bfc:	4971      	ldr	r1, [pc, #452]	@ (8102dc4 <main+0xd9c>)
 8102bfe:	a36a      	add	r3, pc, #424	@ (adr r3, 8102da8 <main+0xd80>)
 8102c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c04:	e9c1 2302 	strd	r2, r3, [r1, #8]
					dati.tempo = 23.02;
 8102c08:	496e      	ldr	r1, [pc, #440]	@ (8102dc4 <main+0xd9c>)
 8102c0a:	a369      	add	r3, pc, #420	@ (adr r3, 8102db0 <main+0xd88>)
 8102c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c10:	e9c1 2304 	strd	r2, r3, [r1, #16]

					//angle_steer  = 100*sin(2*3.14/5*tempo);
					trasmissione_attiva=1;
 8102c14:	4b6c      	ldr	r3, [pc, #432]	@ (8102dc8 <main+0xda0>)
 8102c16:	2201      	movs	r2, #1
 8102c18:	701a      	strb	r2, [r3, #0]
					if (trasmissione_attiva == 1) {
 8102c1a:	4b6b      	ldr	r3, [pc, #428]	@ (8102dc8 <main+0xda0>)
 8102c1c:	781b      	ldrb	r3, [r3, #0]
 8102c1e:	2b01      	cmp	r3, #1
 8102c20:	f47f ab28 	bne.w	8102274 <main+0x24c>
						//dati bicicletta
						datibici.angle_steer = angle_steer;
 8102c24:	4b69      	ldr	r3, [pc, #420]	@ (8102dcc <main+0xda4>)
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	4a69      	ldr	r2, [pc, #420]	@ (8102dd0 <main+0xda8>)
 8102c2a:	6013      	str	r3, [r2, #0]
						datibici.desired_filtered_torque =
 8102c2c:	4b69      	ldr	r3, [pc, #420]	@ (8102dd4 <main+0xdac>)
 8102c2e:	681b      	ldr	r3, [r3, #0]
 8102c30:	4a67      	ldr	r2, [pc, #412]	@ (8102dd0 <main+0xda8>)
 8102c32:	6053      	str	r3, [r2, #4]
								desired_filtered_torque;
						datibici.desired_speed_metsec = desired_speed_metsec;
 8102c34:	4b68      	ldr	r3, [pc, #416]	@ (8102dd8 <main+0xdb0>)
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	4a65      	ldr	r2, [pc, #404]	@ (8102dd0 <main+0xda8>)
 8102c3a:	6153      	str	r3, [r2, #20]
						datibici.roll = roll;
 8102c3c:	4b67      	ldr	r3, [pc, #412]	@ (8102ddc <main+0xdb4>)
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	4a63      	ldr	r2, [pc, #396]	@ (8102dd0 <main+0xda8>)
 8102c42:	6113      	str	r3, [r2, #16]
						datibici.speed_metsec = speed_metsec;
 8102c44:	4b66      	ldr	r3, [pc, #408]	@ (8102de0 <main+0xdb8>)
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	4a61      	ldr	r2, [pc, #388]	@ (8102dd0 <main+0xda8>)
 8102c4a:	6193      	str	r3, [r2, #24]
						datibici.torque = torque;
 8102c4c:	4b65      	ldr	r3, [pc, #404]	@ (8102de4 <main+0xdbc>)
 8102c4e:	681b      	ldr	r3, [r3, #0]
 8102c50:	4a5f      	ldr	r2, [pc, #380]	@ (8102dd0 <main+0xda8>)
 8102c52:	6093      	str	r3, [r2, #8]
						datibici.u_back_wheel = u_back_wheel;
 8102c54:	4b64      	ldr	r3, [pc, #400]	@ (8102de8 <main+0xdc0>)
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	4a5d      	ldr	r2, [pc, #372]	@ (8102dd0 <main+0xda8>)
 8102c5a:	61d3      	str	r3, [r2, #28]
						datibici.u_front_wheel = u_front_wheel;
 8102c5c:	4b56      	ldr	r3, [pc, #344]	@ (8102db8 <main+0xd90>)
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	4a5b      	ldr	r2, [pc, #364]	@ (8102dd0 <main+0xda8>)
 8102c62:	60d3      	str	r3, [r2, #12]
						datibici.tempo = tempo;
 8102c64:	4b61      	ldr	r3, [pc, #388]	@ (8102dec <main+0xdc4>)
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	4a59      	ldr	r2, [pc, #356]	@ (8102dd0 <main+0xda8>)
 8102c6a:	6213      	str	r3, [r2, #32]
						datibici.corrente_non_filtrata = corrente_non_filtrata;
 8102c6c:	4b60      	ldr	r3, [pc, #384]	@ (8102df0 <main+0xdc8>)
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	4a57      	ldr	r2, [pc, #348]	@ (8102dd0 <main+0xda8>)
 8102c72:	6253      	str	r3, [r2, #36]	@ 0x24
						datibici.corrente_filtrata = filtered_current_kalman;
 8102c74:	4b5f      	ldr	r3, [pc, #380]	@ (8102df4 <main+0xdcc>)
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	4a55      	ldr	r2, [pc, #340]	@ (8102dd0 <main+0xda8>)
 8102c7a:	6293      	str	r3, [r2, #40]	@ 0x28

						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8102df8 <main+0xdd0>)
 8102c7e:	681b      	ldr	r3, [r3, #0]
 8102c80:	4a5e      	ldr	r2, [pc, #376]	@ (8102dfc <main+0xdd4>)
 8102c82:	189e      	adds	r6, r3, r2
								"%f,%f,%f,%f,%f,%f,%f,%f,%f,%f%d\n",
								datibici.angle_steer,
 8102c84:	4b52      	ldr	r3, [pc, #328]	@ (8102dd0 <main+0xda8>)
 8102c86:	681b      	ldr	r3, [r3, #0]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102c88:	4618      	mov	r0, r3
 8102c8a:	f7fd fce5 	bl	8100658 <__aeabi_f2d>
 8102c8e:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
								datibici.desired_filtered_torque,
 8102c92:	4b4f      	ldr	r3, [pc, #316]	@ (8102dd0 <main+0xda8>)
 8102c94:	685b      	ldr	r3, [r3, #4]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102c96:	4618      	mov	r0, r3
 8102c98:	f7fd fcde 	bl	8100658 <__aeabi_f2d>
 8102c9c:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
								datibici.desired_speed_metsec, datibici.roll,
 8102ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8102dd0 <main+0xda8>)
 8102ca2:	695b      	ldr	r3, [r3, #20]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102ca4:	4618      	mov	r0, r3
 8102ca6:	f7fd fcd7 	bl	8100658 <__aeabi_f2d>
 8102caa:	e9c7 0108 	strd	r0, r1, [r7, #32]
								datibici.desired_speed_metsec, datibici.roll,
 8102cae:	4b48      	ldr	r3, [pc, #288]	@ (8102dd0 <main+0xda8>)
 8102cb0:	691b      	ldr	r3, [r3, #16]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102cb2:	4618      	mov	r0, r3
 8102cb4:	f7fd fcd0 	bl	8100658 <__aeabi_f2d>
 8102cb8:	e9c7 0106 	strd	r0, r1, [r7, #24]
								datibici.speed_metsec, datibici.torque,
 8102cbc:	4b44      	ldr	r3, [pc, #272]	@ (8102dd0 <main+0xda8>)
 8102cbe:	699b      	ldr	r3, [r3, #24]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102cc0:	4618      	mov	r0, r3
 8102cc2:	f7fd fcc9 	bl	8100658 <__aeabi_f2d>
 8102cc6:	e9c7 0104 	strd	r0, r1, [r7, #16]
								datibici.speed_metsec, datibici.torque,
 8102cca:	4b41      	ldr	r3, [pc, #260]	@ (8102dd0 <main+0xda8>)
 8102ccc:	689b      	ldr	r3, [r3, #8]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102cce:	4618      	mov	r0, r3
 8102cd0:	f7fd fcc2 	bl	8100658 <__aeabi_f2d>
 8102cd4:	e9c7 0102 	strd	r0, r1, [r7, #8]
								datibici.u_back_wheel, datibici.u_front_wheel,
 8102cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8102dd0 <main+0xda8>)
 8102cda:	69db      	ldr	r3, [r3, #28]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102cdc:	4618      	mov	r0, r3
 8102cde:	f7fd fcbb 	bl	8100658 <__aeabi_f2d>
 8102ce2:	e9c7 0100 	strd	r0, r1, [r7]
								datibici.u_back_wheel, datibici.u_front_wheel,
 8102ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8102dd0 <main+0xda8>)
 8102ce8:	68db      	ldr	r3, [r3, #12]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102cea:	4618      	mov	r0, r3
 8102cec:	f7fd fcb4 	bl	8100658 <__aeabi_f2d>
 8102cf0:	4682      	mov	sl, r0
 8102cf2:	468b      	mov	fp, r1
								datibici.tempo, datibici.corrente_non_filtrata,
 8102cf4:	4b36      	ldr	r3, [pc, #216]	@ (8102dd0 <main+0xda8>)
 8102cf6:	6a1b      	ldr	r3, [r3, #32]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102cf8:	4618      	mov	r0, r3
 8102cfa:	f7fd fcad 	bl	8100658 <__aeabi_f2d>
 8102cfe:	4680      	mov	r8, r0
 8102d00:	4689      	mov	r9, r1
								datibici.tempo, datibici.corrente_non_filtrata,
 8102d02:	4b33      	ldr	r3, [pc, #204]	@ (8102dd0 <main+0xda8>)
 8102d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d06:	4618      	mov	r0, r3
 8102d08:	f7fd fca6 	bl	8100658 <__aeabi_f2d>
 8102d0c:	4604      	mov	r4, r0
 8102d0e:	460d      	mov	r5, r1
								datibici.corrente_filtrata);
 8102d10:	4b2f      	ldr	r3, [pc, #188]	@ (8102dd0 <main+0xda8>)
 8102d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d14:	4618      	mov	r0, r3
 8102d16:	f7fd fc9f 	bl	8100658 <__aeabi_f2d>
 8102d1a:	4602      	mov	r2, r0
 8102d1c:	460b      	mov	r3, r1
 8102d1e:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8102d22:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8102d26:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8102d2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8102d2e:	ed97 7b00 	vldr	d7, [r7]
 8102d32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8102d36:	ed97 7b02 	vldr	d7, [r7, #8]
 8102d3a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8102d3e:	ed97 7b04 	vldr	d7, [r7, #16]
 8102d42:	ed8d 7b06 	vstr	d7, [sp, #24]
 8102d46:	ed97 7b06 	vldr	d7, [r7, #24]
 8102d4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8102d4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8102d52:	ed8d 7b02 	vstr	d7, [sp, #8]
 8102d56:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8102d5a:	ed8d 7b00 	vstr	d7, [sp]
 8102d5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8102d62:	4927      	ldr	r1, [pc, #156]	@ (8102e00 <main+0xdd8>)
 8102d64:	4630      	mov	r0, r6
 8102d66:	f00d f97b 	bl	8110060 <siprintf>
 8102d6a:	66b8      	str	r0, [r7, #104]	@ 0x68
						indiceBuffer += bytesWritten;
 8102d6c:	4b22      	ldr	r3, [pc, #136]	@ (8102df8 <main+0xdd0>)
 8102d6e:	681a      	ldr	r2, [r3, #0]
 8102d70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8102d72:	4413      	add	r3, r2
 8102d74:	4a20      	ldr	r2, [pc, #128]	@ (8102df8 <main+0xdd0>)
 8102d76:	6013      	str	r3, [r2, #0]
								datibici.u_back_wheel, datibici.u_front_wheel,
								datibici.tempo, datibici.corrente_non_filtrata,
								datibici.corrente_filtrata);
						*/

						printf("%f,%f\r\n", datibici.desired_filtered_torque,datibici.torque);
 8102d78:	4b15      	ldr	r3, [pc, #84]	@ (8102dd0 <main+0xda8>)
 8102d7a:	685b      	ldr	r3, [r3, #4]
 8102d7c:	4618      	mov	r0, r3
 8102d7e:	f7fd fc6b 	bl	8100658 <__aeabi_f2d>
 8102d82:	4604      	mov	r4, r0
 8102d84:	460d      	mov	r5, r1
 8102d86:	4b12      	ldr	r3, [pc, #72]	@ (8102dd0 <main+0xda8>)
 8102d88:	689b      	ldr	r3, [r3, #8]
 8102d8a:	4618      	mov	r0, r3
 8102d8c:	f7fd fc64 	bl	8100658 <__aeabi_f2d>
 8102d90:	4602      	mov	r2, r0
 8102d92:	460b      	mov	r3, r1
 8102d94:	e9cd 2300 	strd	r2, r3, [sp]
 8102d98:	4622      	mov	r2, r4
 8102d9a:	462b      	mov	r3, r5
 8102d9c:	4819      	ldr	r0, [pc, #100]	@ (8102e04 <main+0xddc>)
 8102d9e:	f00d f94d 	bl	811003c <iprintf>
		if (flag_Tc == 1) {
 8102da2:	f7ff ba67 	b.w	8102274 <main+0x24c>
 8102da6:	bf00      	nop
 8102da8:	0a3d70a4 	.word	0x0a3d70a4
 8102dac:	4023a3d7 	.word	0x4023a3d7
 8102db0:	b851eb85 	.word	0xb851eb85
 8102db4:	4037051e 	.word	0x4037051e
 8102db8:	10008a50 	.word	0x10008a50
 8102dbc:	10008a58 	.word	0x10008a58
 8102dc0:	10008a54 	.word	0x10008a54
 8102dc4:	10008a70 	.word	0x10008a70
 8102dc8:	10008a6d 	.word	0x10008a6d
 8102dcc:	100087e0 	.word	0x100087e0
 8102dd0:	10008a88 	.word	0x10008a88
 8102dd4:	10008a2c 	.word	0x10008a2c
 8102dd8:	100087f0 	.word	0x100087f0
 8102ddc:	10008a44 	.word	0x10008a44
 8102de0:	100087f4 	.word	0x100087f4
 8102de4:	10008a60 	.word	0x10008a60
 8102de8:	100087fc 	.word	0x100087fc
 8102dec:	1000871c 	.word	0x1000871c
 8102df0:	10008a1c 	.word	0x10008a1c
 8102df4:	10008a5c 	.word	0x10008a5c
 8102df8:	10008718 	.word	0x10008718
 8102dfc:	10000630 	.word	0x10000630
 8102e00:	08113914 	.word	0x08113914
 8102e04:	08113938 	.word	0x08113938

08102e08 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8102e08:	b580      	push	{r7, lr}
 8102e0a:	b08a      	sub	sp, #40	@ 0x28
 8102e0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8102e0e:	f107 031c 	add.w	r3, r7, #28
 8102e12:	2200      	movs	r2, #0
 8102e14:	601a      	str	r2, [r3, #0]
 8102e16:	605a      	str	r2, [r3, #4]
 8102e18:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8102e1a:	463b      	mov	r3, r7
 8102e1c:	2200      	movs	r2, #0
 8102e1e:	601a      	str	r2, [r3, #0]
 8102e20:	605a      	str	r2, [r3, #4]
 8102e22:	609a      	str	r2, [r3, #8]
 8102e24:	60da      	str	r2, [r3, #12]
 8102e26:	611a      	str	r2, [r3, #16]
 8102e28:	615a      	str	r2, [r3, #20]
 8102e2a:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8102e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e2e:	4a30      	ldr	r2, [pc, #192]	@ (8102ef0 <MX_ADC1_Init+0xe8>)
 8102e30:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8102e32:	4b2e      	ldr	r3, [pc, #184]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e34:	2200      	movs	r2, #0
 8102e36:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8102e38:	4b2c      	ldr	r3, [pc, #176]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e3a:	2200      	movs	r2, #0
 8102e3c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8102e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e40:	2200      	movs	r2, #0
 8102e42:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8102e44:	4b29      	ldr	r3, [pc, #164]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e46:	2204      	movs	r2, #4
 8102e48:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8102e4a:	4b28      	ldr	r3, [pc, #160]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e4c:	2200      	movs	r2, #0
 8102e4e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8102e50:	4b26      	ldr	r3, [pc, #152]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e52:	2200      	movs	r2, #0
 8102e54:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 1;
 8102e56:	4b25      	ldr	r3, [pc, #148]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e58:	2201      	movs	r2, #1
 8102e5a:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8102e5c:	4b23      	ldr	r3, [pc, #140]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e5e:	2200      	movs	r2, #0
 8102e60:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8102e62:	4b22      	ldr	r3, [pc, #136]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e64:	2200      	movs	r2, #0
 8102e66:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8102e68:	4b20      	ldr	r3, [pc, #128]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e6a:	2200      	movs	r2, #0
 8102e6c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8102e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e70:	2200      	movs	r2, #0
 8102e72:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8102e74:	4b1d      	ldr	r3, [pc, #116]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e76:	2200      	movs	r2, #0
 8102e78:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8102e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e7c:	2200      	movs	r2, #0
 8102e7e:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8102e80:	4b1a      	ldr	r3, [pc, #104]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e82:	2200      	movs	r2, #0
 8102e84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8102e88:	4818      	ldr	r0, [pc, #96]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102e8a:	f001 fd0b 	bl	81048a4 <HAL_ADC_Init>
 8102e8e:	4603      	mov	r3, r0
 8102e90:	2b00      	cmp	r3, #0
 8102e92:	d001      	beq.n	8102e98 <MX_ADC1_Init+0x90>
		Error_Handler();
 8102e94:	f000 fd8a 	bl	81039ac <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8102e98:	2300      	movs	r3, #0
 8102e9a:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8102e9c:	f107 031c 	add.w	r3, r7, #28
 8102ea0:	4619      	mov	r1, r3
 8102ea2:	4812      	ldr	r0, [pc, #72]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102ea4:	f002 fed4 	bl	8105c50 <HAL_ADCEx_MultiModeConfigChannel>
 8102ea8:	4603      	mov	r3, r0
 8102eaa:	2b00      	cmp	r3, #0
 8102eac:	d001      	beq.n	8102eb2 <MX_ADC1_Init+0xaa>
		Error_Handler();
 8102eae:	f000 fd7d 	bl	81039ac <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8102eb2:	4b10      	ldr	r3, [pc, #64]	@ (8102ef4 <MX_ADC1_Init+0xec>)
 8102eb4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8102eb6:	2306      	movs	r3, #6
 8102eb8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8102eba:	2300      	movs	r3, #0
 8102ebc:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8102ebe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8102ec2:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8102ec4:	2304      	movs	r3, #4
 8102ec6:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8102ec8:	2300      	movs	r3, #0
 8102eca:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8102ecc:	2300      	movs	r3, #0
 8102ece:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8102ed0:	463b      	mov	r3, r7
 8102ed2:	4619      	mov	r1, r3
 8102ed4:	4805      	ldr	r0, [pc, #20]	@ (8102eec <MX_ADC1_Init+0xe4>)
 8102ed6:	f002 f887 	bl	8104fe8 <HAL_ADC_ConfigChannel>
 8102eda:	4603      	mov	r3, r0
 8102edc:	2b00      	cmp	r3, #0
 8102ede:	d001      	beq.n	8102ee4 <MX_ADC1_Init+0xdc>
		Error_Handler();
 8102ee0:	f000 fd64 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8102ee4:	bf00      	nop
 8102ee6:	3728      	adds	r7, #40	@ 0x28
 8102ee8:	46bd      	mov	sp, r7
 8102eea:	bd80      	pop	{r7, pc}
 8102eec:	10000288 	.word	0x10000288
 8102ef0:	40022000 	.word	0x40022000
 8102ef4:	08600004 	.word	0x08600004

08102ef8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8102ef8:	b580      	push	{r7, lr}
 8102efa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8102efc:	4b1b      	ldr	r3, [pc, #108]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102efe:	4a1c      	ldr	r2, [pc, #112]	@ (8102f70 <MX_I2C1_Init+0x78>)
 8102f00:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10C0ECFF;
 8102f02:	4b1a      	ldr	r3, [pc, #104]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f04:	4a1b      	ldr	r2, [pc, #108]	@ (8102f74 <MX_I2C1_Init+0x7c>)
 8102f06:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8102f08:	4b18      	ldr	r3, [pc, #96]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f0a:	2200      	movs	r2, #0
 8102f0c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102f0e:	4b17      	ldr	r3, [pc, #92]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f10:	2201      	movs	r2, #1
 8102f12:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102f14:	4b15      	ldr	r3, [pc, #84]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f16:	2200      	movs	r2, #0
 8102f18:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8102f1a:	4b14      	ldr	r3, [pc, #80]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f1c:	2200      	movs	r2, #0
 8102f1e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102f20:	4b12      	ldr	r3, [pc, #72]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f22:	2200      	movs	r2, #0
 8102f24:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102f26:	4b11      	ldr	r3, [pc, #68]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f28:	2200      	movs	r2, #0
 8102f2a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f2e:	2200      	movs	r2, #0
 8102f30:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8102f32:	480e      	ldr	r0, [pc, #56]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f34:	f003 ffec 	bl	8106f10 <HAL_I2C_Init>
 8102f38:	4603      	mov	r3, r0
 8102f3a:	2b00      	cmp	r3, #0
 8102f3c:	d001      	beq.n	8102f42 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8102f3e:	f000 fd35 	bl	81039ac <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8102f42:	2100      	movs	r1, #0
 8102f44:	4809      	ldr	r0, [pc, #36]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f46:	f004 fd4d 	bl	81079e4 <HAL_I2CEx_ConfigAnalogFilter>
 8102f4a:	4603      	mov	r3, r0
 8102f4c:	2b00      	cmp	r3, #0
 8102f4e:	d001      	beq.n	8102f54 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8102f50:	f000 fd2c 	bl	81039ac <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8102f54:	2100      	movs	r1, #0
 8102f56:	4805      	ldr	r0, [pc, #20]	@ (8102f6c <MX_I2C1_Init+0x74>)
 8102f58:	f004 fd8f 	bl	8107a7a <HAL_I2CEx_ConfigDigitalFilter>
 8102f5c:	4603      	mov	r3, r0
 8102f5e:	2b00      	cmp	r3, #0
 8102f60:	d001      	beq.n	8102f66 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8102f62:	f000 fd23 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8102f66:	bf00      	nop
 8102f68:	bd80      	pop	{r7, pc}
 8102f6a:	bf00      	nop
 8102f6c:	100002ec 	.word	0x100002ec
 8102f70:	40005400 	.word	0x40005400
 8102f74:	10c0ecff 	.word	0x10c0ecff

08102f78 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8102f78:	b580      	push	{r7, lr}
 8102f7a:	b09a      	sub	sp, #104	@ 0x68
 8102f7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8102f7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8102f82:	2200      	movs	r2, #0
 8102f84:	601a      	str	r2, [r3, #0]
 8102f86:	605a      	str	r2, [r3, #4]
 8102f88:	609a      	str	r2, [r3, #8]
 8102f8a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8102f8c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8102f90:	2200      	movs	r2, #0
 8102f92:	601a      	str	r2, [r3, #0]
 8102f94:	605a      	str	r2, [r3, #4]
 8102f96:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8102f98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102f9c:	2200      	movs	r2, #0
 8102f9e:	601a      	str	r2, [r3, #0]
 8102fa0:	605a      	str	r2, [r3, #4]
 8102fa2:	609a      	str	r2, [r3, #8]
 8102fa4:	60da      	str	r2, [r3, #12]
 8102fa6:	611a      	str	r2, [r3, #16]
 8102fa8:	615a      	str	r2, [r3, #20]
 8102faa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8102fac:	1d3b      	adds	r3, r7, #4
 8102fae:	222c      	movs	r2, #44	@ 0x2c
 8102fb0:	2100      	movs	r1, #0
 8102fb2:	4618      	mov	r0, r3
 8102fb4:	f00d f94c 	bl	8110250 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8102fb8:	4b43      	ldr	r3, [pc, #268]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8102fba:	4a44      	ldr	r2, [pc, #272]	@ (81030cc <MX_TIM1_Init+0x154>)
 8102fbc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 200 - 1;
 8102fbe:	4b42      	ldr	r3, [pc, #264]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8102fc0:	22c7      	movs	r2, #199	@ 0xc7
 8102fc2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102fc4:	4b40      	ldr	r3, [pc, #256]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8102fc6:	2200      	movs	r2, #0
 8102fc8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 50 - 1;
 8102fca:	4b3f      	ldr	r3, [pc, #252]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8102fcc:	2231      	movs	r2, #49	@ 0x31
 8102fce:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102fd0:	4b3d      	ldr	r3, [pc, #244]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8102fd2:	2200      	movs	r2, #0
 8102fd4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8102fd6:	4b3c      	ldr	r3, [pc, #240]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8102fd8:	2200      	movs	r2, #0
 8102fda:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102fdc:	4b3a      	ldr	r3, [pc, #232]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8102fde:	2200      	movs	r2, #0
 8102fe0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8102fe2:	4839      	ldr	r0, [pc, #228]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8102fe4:	f007 fcf4 	bl	810a9d0 <HAL_TIM_Base_Init>
 8102fe8:	4603      	mov	r3, r0
 8102fea:	2b00      	cmp	r3, #0
 8102fec:	d001      	beq.n	8102ff2 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8102fee:	f000 fcdd 	bl	81039ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8102ff8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8102ffc:	4619      	mov	r1, r3
 8102ffe:	4832      	ldr	r0, [pc, #200]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8103000:	f008 fa58 	bl	810b4b4 <HAL_TIM_ConfigClockSource>
 8103004:	4603      	mov	r3, r0
 8103006:	2b00      	cmp	r3, #0
 8103008:	d001      	beq.n	810300e <MX_TIM1_Init+0x96>
		Error_Handler();
 810300a:	f000 fccf 	bl	81039ac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 810300e:	482e      	ldr	r0, [pc, #184]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8103010:	f007 fe1e 	bl	810ac50 <HAL_TIM_PWM_Init>
 8103014:	4603      	mov	r3, r0
 8103016:	2b00      	cmp	r3, #0
 8103018:	d001      	beq.n	810301e <MX_TIM1_Init+0xa6>
		Error_Handler();
 810301a:	f000 fcc7 	bl	81039ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810301e:	2300      	movs	r3, #0
 8103020:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8103022:	2300      	movs	r3, #0
 8103024:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103026:	2300      	movs	r3, #0
 8103028:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 810302a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 810302e:	4619      	mov	r1, r3
 8103030:	4825      	ldr	r0, [pc, #148]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8103032:	f008 ff9d 	bl	810bf70 <HAL_TIMEx_MasterConfigSynchronization>
 8103036:	4603      	mov	r3, r0
 8103038:	2b00      	cmp	r3, #0
 810303a:	d001      	beq.n	8103040 <MX_TIM1_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 810303c:	f000 fcb6 	bl	81039ac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8103040:	2360      	movs	r3, #96	@ 0x60
 8103042:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8103044:	2300      	movs	r3, #0
 8103046:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8103048:	2300      	movs	r3, #0
 810304a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810304c:	2300      	movs	r3, #0
 810304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8103050:	2300      	movs	r3, #0
 8103052:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8103054:	2300      	movs	r3, #0
 8103056:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8103058:	2300      	movs	r3, #0
 810305a:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 810305c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8103060:	2200      	movs	r2, #0
 8103062:	4619      	mov	r1, r3
 8103064:	4818      	ldr	r0, [pc, #96]	@ (81030c8 <MX_TIM1_Init+0x150>)
 8103066:	f008 f911 	bl	810b28c <HAL_TIM_PWM_ConfigChannel>
 810306a:	4603      	mov	r3, r0
 810306c:	2b00      	cmp	r3, #0
 810306e:	d001      	beq.n	8103074 <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8103070:	f000 fc9c 	bl	81039ac <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8103074:	2300      	movs	r3, #0
 8103076:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8103078:	2300      	movs	r3, #0
 810307a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810307c:	2300      	movs	r3, #0
 810307e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8103080:	2300      	movs	r3, #0
 8103082:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8103084:	2300      	movs	r3, #0
 8103086:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8103088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810308c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 810308e:	2300      	movs	r3, #0
 8103090:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8103092:	2300      	movs	r3, #0
 8103094:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8103096:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810309a:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 810309c:	2300      	movs	r3, #0
 810309e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81030a0:	2300      	movs	r3, #0
 81030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 81030a4:	1d3b      	adds	r3, r7, #4
 81030a6:	4619      	mov	r1, r3
 81030a8:	4807      	ldr	r0, [pc, #28]	@ (81030c8 <MX_TIM1_Init+0x150>)
 81030aa:	f008 ffef 	bl	810c08c <HAL_TIMEx_ConfigBreakDeadTime>
 81030ae:	4603      	mov	r3, r0
 81030b0:	2b00      	cmp	r3, #0
 81030b2:	d001      	beq.n	81030b8 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 81030b4:	f000 fc7a 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 81030b8:	4803      	ldr	r0, [pc, #12]	@ (81030c8 <MX_TIM1_Init+0x150>)
 81030ba:	f000 fe69 	bl	8103d90 <HAL_TIM_MspPostInit>

}
 81030be:	bf00      	nop
 81030c0:	3768      	adds	r7, #104	@ 0x68
 81030c2:	46bd      	mov	sp, r7
 81030c4:	bd80      	pop	{r7, pc}
 81030c6:	bf00      	nop
 81030c8:	10000340 	.word	0x10000340
 81030cc:	40010000 	.word	0x40010000

081030d0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 81030d0:	b580      	push	{r7, lr}
 81030d2:	b088      	sub	sp, #32
 81030d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 81030d6:	f107 0310 	add.w	r3, r7, #16
 81030da:	2200      	movs	r2, #0
 81030dc:	601a      	str	r2, [r3, #0]
 81030de:	605a      	str	r2, [r3, #4]
 81030e0:	609a      	str	r2, [r3, #8]
 81030e2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 81030e4:	1d3b      	adds	r3, r7, #4
 81030e6:	2200      	movs	r2, #0
 81030e8:	601a      	str	r2, [r3, #0]
 81030ea:	605a      	str	r2, [r3, #4]
 81030ec:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 81030ee:	4b1e      	ldr	r3, [pc, #120]	@ (8103168 <MX_TIM2_Init+0x98>)
 81030f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81030f4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 200 - 1;
 81030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8103168 <MX_TIM2_Init+0x98>)
 81030f8:	22c7      	movs	r2, #199	@ 0xc7
 81030fa:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81030fc:	4b1a      	ldr	r3, [pc, #104]	@ (8103168 <MX_TIM2_Init+0x98>)
 81030fe:	2200      	movs	r2, #0
 8103100:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 8103102:	4b19      	ldr	r3, [pc, #100]	@ (8103168 <MX_TIM2_Init+0x98>)
 8103104:	f242 720f 	movw	r2, #9999	@ 0x270f
 8103108:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810310a:	4b17      	ldr	r3, [pc, #92]	@ (8103168 <MX_TIM2_Init+0x98>)
 810310c:	2200      	movs	r2, #0
 810310e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103110:	4b15      	ldr	r3, [pc, #84]	@ (8103168 <MX_TIM2_Init+0x98>)
 8103112:	2200      	movs	r2, #0
 8103114:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8103116:	4814      	ldr	r0, [pc, #80]	@ (8103168 <MX_TIM2_Init+0x98>)
 8103118:	f007 fc5a 	bl	810a9d0 <HAL_TIM_Base_Init>
 810311c:	4603      	mov	r3, r0
 810311e:	2b00      	cmp	r3, #0
 8103120:	d001      	beq.n	8103126 <MX_TIM2_Init+0x56>
		Error_Handler();
 8103122:	f000 fc43 	bl	81039ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8103126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810312a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 810312c:	f107 0310 	add.w	r3, r7, #16
 8103130:	4619      	mov	r1, r3
 8103132:	480d      	ldr	r0, [pc, #52]	@ (8103168 <MX_TIM2_Init+0x98>)
 8103134:	f008 f9be 	bl	810b4b4 <HAL_TIM_ConfigClockSource>
 8103138:	4603      	mov	r3, r0
 810313a:	2b00      	cmp	r3, #0
 810313c:	d001      	beq.n	8103142 <MX_TIM2_Init+0x72>
		Error_Handler();
 810313e:	f000 fc35 	bl	81039ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103142:	2300      	movs	r3, #0
 8103144:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103146:	2300      	movs	r3, #0
 8103148:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 810314a:	1d3b      	adds	r3, r7, #4
 810314c:	4619      	mov	r1, r3
 810314e:	4806      	ldr	r0, [pc, #24]	@ (8103168 <MX_TIM2_Init+0x98>)
 8103150:	f008 ff0e 	bl	810bf70 <HAL_TIMEx_MasterConfigSynchronization>
 8103154:	4603      	mov	r3, r0
 8103156:	2b00      	cmp	r3, #0
 8103158:	d001      	beq.n	810315e <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 810315a:	f000 fc27 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 810315e:	bf00      	nop
 8103160:	3720      	adds	r7, #32
 8103162:	46bd      	mov	sp, r7
 8103164:	bd80      	pop	{r7, pc}
 8103166:	bf00      	nop
 8103168:	1000038c 	.word	0x1000038c

0810316c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 810316c:	b580      	push	{r7, lr}
 810316e:	b08e      	sub	sp, #56	@ 0x38
 8103170:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8103172:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8103176:	2200      	movs	r2, #0
 8103178:	601a      	str	r2, [r3, #0]
 810317a:	605a      	str	r2, [r3, #4]
 810317c:	609a      	str	r2, [r3, #8]
 810317e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8103180:	f107 031c 	add.w	r3, r7, #28
 8103184:	2200      	movs	r2, #0
 8103186:	601a      	str	r2, [r3, #0]
 8103188:	605a      	str	r2, [r3, #4]
 810318a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 810318c:	463b      	mov	r3, r7
 810318e:	2200      	movs	r2, #0
 8103190:	601a      	str	r2, [r3, #0]
 8103192:	605a      	str	r2, [r3, #4]
 8103194:	609a      	str	r2, [r3, #8]
 8103196:	60da      	str	r2, [r3, #12]
 8103198:	611a      	str	r2, [r3, #16]
 810319a:	615a      	str	r2, [r3, #20]
 810319c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 810319e:	4b2c      	ldr	r3, [pc, #176]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031a0:	4a2c      	ldr	r2, [pc, #176]	@ (8103254 <MX_TIM3_Init+0xe8>)
 81031a2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 200 - 1;
 81031a4:	4b2a      	ldr	r3, [pc, #168]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031a6:	22c7      	movs	r2, #199	@ 0xc7
 81031a8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81031aa:	4b29      	ldr	r3, [pc, #164]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031ac:	2200      	movs	r2, #0
 81031ae:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50 - 1;
 81031b0:	4b27      	ldr	r3, [pc, #156]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031b2:	2231      	movs	r2, #49	@ 0x31
 81031b4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81031b6:	4b26      	ldr	r3, [pc, #152]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031b8:	2200      	movs	r2, #0
 81031ba:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81031bc:	4b24      	ldr	r3, [pc, #144]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031be:	2200      	movs	r2, #0
 81031c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 81031c2:	4823      	ldr	r0, [pc, #140]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031c4:	f007 fc04 	bl	810a9d0 <HAL_TIM_Base_Init>
 81031c8:	4603      	mov	r3, r0
 81031ca:	2b00      	cmp	r3, #0
 81031cc:	d001      	beq.n	81031d2 <MX_TIM3_Init+0x66>
		Error_Handler();
 81031ce:	f000 fbed 	bl	81039ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81031d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81031d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 81031d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81031dc:	4619      	mov	r1, r3
 81031de:	481c      	ldr	r0, [pc, #112]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031e0:	f008 f968 	bl	810b4b4 <HAL_TIM_ConfigClockSource>
 81031e4:	4603      	mov	r3, r0
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	d001      	beq.n	81031ee <MX_TIM3_Init+0x82>
		Error_Handler();
 81031ea:	f000 fbdf 	bl	81039ac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 81031ee:	4818      	ldr	r0, [pc, #96]	@ (8103250 <MX_TIM3_Init+0xe4>)
 81031f0:	f007 fd2e 	bl	810ac50 <HAL_TIM_PWM_Init>
 81031f4:	4603      	mov	r3, r0
 81031f6:	2b00      	cmp	r3, #0
 81031f8:	d001      	beq.n	81031fe <MX_TIM3_Init+0x92>
		Error_Handler();
 81031fa:	f000 fbd7 	bl	81039ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81031fe:	2300      	movs	r3, #0
 8103200:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103202:	2300      	movs	r3, #0
 8103204:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8103206:	f107 031c 	add.w	r3, r7, #28
 810320a:	4619      	mov	r1, r3
 810320c:	4810      	ldr	r0, [pc, #64]	@ (8103250 <MX_TIM3_Init+0xe4>)
 810320e:	f008 feaf 	bl	810bf70 <HAL_TIMEx_MasterConfigSynchronization>
 8103212:	4603      	mov	r3, r0
 8103214:	2b00      	cmp	r3, #0
 8103216:	d001      	beq.n	810321c <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8103218:	f000 fbc8 	bl	81039ac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810321c:	2360      	movs	r3, #96	@ 0x60
 810321e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8103220:	2300      	movs	r3, #0
 8103222:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8103224:	2300      	movs	r3, #0
 8103226:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8103228:	2300      	movs	r3, #0
 810322a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 810322c:	463b      	mov	r3, r7
 810322e:	2200      	movs	r2, #0
 8103230:	4619      	mov	r1, r3
 8103232:	4807      	ldr	r0, [pc, #28]	@ (8103250 <MX_TIM3_Init+0xe4>)
 8103234:	f008 f82a 	bl	810b28c <HAL_TIM_PWM_ConfigChannel>
 8103238:	4603      	mov	r3, r0
 810323a:	2b00      	cmp	r3, #0
 810323c:	d001      	beq.n	8103242 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 810323e:	f000 fbb5 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8103242:	4803      	ldr	r0, [pc, #12]	@ (8103250 <MX_TIM3_Init+0xe4>)
 8103244:	f000 fda4 	bl	8103d90 <HAL_TIM_MspPostInit>

}
 8103248:	bf00      	nop
 810324a:	3738      	adds	r7, #56	@ 0x38
 810324c:	46bd      	mov	sp, r7
 810324e:	bd80      	pop	{r7, pc}
 8103250:	100003d8 	.word	0x100003d8
 8103254:	40000400 	.word	0x40000400

08103258 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8103258:	b580      	push	{r7, lr}
 810325a:	b08c      	sub	sp, #48	@ 0x30
 810325c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 810325e:	f107 030c 	add.w	r3, r7, #12
 8103262:	2224      	movs	r2, #36	@ 0x24
 8103264:	2100      	movs	r1, #0
 8103266:	4618      	mov	r0, r3
 8103268:	f00c fff2 	bl	8110250 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 810326c:	463b      	mov	r3, r7
 810326e:	2200      	movs	r2, #0
 8103270:	601a      	str	r2, [r3, #0]
 8103272:	605a      	str	r2, [r3, #4]
 8103274:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8103276:	4b21      	ldr	r3, [pc, #132]	@ (81032fc <MX_TIM4_Init+0xa4>)
 8103278:	4a21      	ldr	r2, [pc, #132]	@ (8103300 <MX_TIM4_Init+0xa8>)
 810327a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 810327c:	4b1f      	ldr	r3, [pc, #124]	@ (81032fc <MX_TIM4_Init+0xa4>)
 810327e:	2200      	movs	r2, #0
 8103280:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103282:	4b1e      	ldr	r3, [pc, #120]	@ (81032fc <MX_TIM4_Init+0xa4>)
 8103284:	2200      	movs	r2, #0
 8103286:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 3423 - 1;
 8103288:	4b1c      	ldr	r3, [pc, #112]	@ (81032fc <MX_TIM4_Init+0xa4>)
 810328a:	f640 525e 	movw	r2, #3422	@ 0xd5e
 810328e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103290:	4b1a      	ldr	r3, [pc, #104]	@ (81032fc <MX_TIM4_Init+0xa4>)
 8103292:	2200      	movs	r2, #0
 8103294:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103296:	4b19      	ldr	r3, [pc, #100]	@ (81032fc <MX_TIM4_Init+0xa4>)
 8103298:	2200      	movs	r2, #0
 810329a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 810329c:	2303      	movs	r3, #3
 810329e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81032a0:	2300      	movs	r3, #0
 81032a2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81032a4:	2301      	movs	r3, #1
 81032a6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81032a8:	2300      	movs	r3, #0
 81032aa:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 81032ac:	2300      	movs	r3, #0
 81032ae:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81032b0:	2300      	movs	r3, #0
 81032b2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81032b4:	2301      	movs	r3, #1
 81032b6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81032b8:	2300      	movs	r3, #0
 81032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 81032bc:	2300      	movs	r3, #0
 81032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 81032c0:	f107 030c 	add.w	r3, r7, #12
 81032c4:	4619      	mov	r1, r3
 81032c6:	480d      	ldr	r0, [pc, #52]	@ (81032fc <MX_TIM4_Init+0xa4>)
 81032c8:	f007 fe32 	bl	810af30 <HAL_TIM_Encoder_Init>
 81032cc:	4603      	mov	r3, r0
 81032ce:	2b00      	cmp	r3, #0
 81032d0:	d001      	beq.n	81032d6 <MX_TIM4_Init+0x7e>
		Error_Handler();
 81032d2:	f000 fb6b 	bl	81039ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81032d6:	2300      	movs	r3, #0
 81032d8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81032da:	2300      	movs	r3, #0
 81032dc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 81032de:	463b      	mov	r3, r7
 81032e0:	4619      	mov	r1, r3
 81032e2:	4806      	ldr	r0, [pc, #24]	@ (81032fc <MX_TIM4_Init+0xa4>)
 81032e4:	f008 fe44 	bl	810bf70 <HAL_TIMEx_MasterConfigSynchronization>
 81032e8:	4603      	mov	r3, r0
 81032ea:	2b00      	cmp	r3, #0
 81032ec:	d001      	beq.n	81032f2 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 81032ee:	f000 fb5d 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 81032f2:	bf00      	nop
 81032f4:	3730      	adds	r7, #48	@ 0x30
 81032f6:	46bd      	mov	sp, r7
 81032f8:	bd80      	pop	{r7, pc}
 81032fa:	bf00      	nop
 81032fc:	10000424 	.word	0x10000424
 8103300:	40000800 	.word	0x40000800

08103304 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8103304:	b580      	push	{r7, lr}
 8103306:	b084      	sub	sp, #16
 8103308:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 810330a:	1d3b      	adds	r3, r7, #4
 810330c:	2200      	movs	r2, #0
 810330e:	601a      	str	r2, [r3, #0]
 8103310:	605a      	str	r2, [r3, #4]
 8103312:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8103314:	4b15      	ldr	r3, [pc, #84]	@ (810336c <MX_TIM6_Init+0x68>)
 8103316:	4a16      	ldr	r2, [pc, #88]	@ (8103370 <MX_TIM6_Init+0x6c>)
 8103318:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 20000 - 1;
 810331a:	4b14      	ldr	r3, [pc, #80]	@ (810336c <MX_TIM6_Init+0x68>)
 810331c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8103320:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103322:	4b12      	ldr	r3, [pc, #72]	@ (810336c <MX_TIM6_Init+0x68>)
 8103324:	2200      	movs	r2, #0
 8103326:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 30000;
 8103328:	4b10      	ldr	r3, [pc, #64]	@ (810336c <MX_TIM6_Init+0x68>)
 810332a:	f247 5230 	movw	r2, #30000	@ 0x7530
 810332e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103330:	4b0e      	ldr	r3, [pc, #56]	@ (810336c <MX_TIM6_Init+0x68>)
 8103332:	2200      	movs	r2, #0
 8103334:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8103336:	480d      	ldr	r0, [pc, #52]	@ (810336c <MX_TIM6_Init+0x68>)
 8103338:	f007 fb4a 	bl	810a9d0 <HAL_TIM_Base_Init>
 810333c:	4603      	mov	r3, r0
 810333e:	2b00      	cmp	r3, #0
 8103340:	d001      	beq.n	8103346 <MX_TIM6_Init+0x42>
		Error_Handler();
 8103342:	f000 fb33 	bl	81039ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103346:	2300      	movs	r3, #0
 8103348:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810334a:	2300      	movs	r3, #0
 810334c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 810334e:	1d3b      	adds	r3, r7, #4
 8103350:	4619      	mov	r1, r3
 8103352:	4806      	ldr	r0, [pc, #24]	@ (810336c <MX_TIM6_Init+0x68>)
 8103354:	f008 fe0c 	bl	810bf70 <HAL_TIMEx_MasterConfigSynchronization>
 8103358:	4603      	mov	r3, r0
 810335a:	2b00      	cmp	r3, #0
 810335c:	d001      	beq.n	8103362 <MX_TIM6_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 810335e:	f000 fb25 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8103362:	bf00      	nop
 8103364:	3710      	adds	r7, #16
 8103366:	46bd      	mov	sp, r7
 8103368:	bd80      	pop	{r7, pc}
 810336a:	bf00      	nop
 810336c:	10000470 	.word	0x10000470
 8103370:	40001000 	.word	0x40001000

08103374 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8103374:	b580      	push	{r7, lr}
 8103376:	b08c      	sub	sp, #48	@ 0x30
 8103378:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 810337a:	f107 030c 	add.w	r3, r7, #12
 810337e:	2224      	movs	r2, #36	@ 0x24
 8103380:	2100      	movs	r1, #0
 8103382:	4618      	mov	r0, r3
 8103384:	f00c ff64 	bl	8110250 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8103388:	463b      	mov	r3, r7
 810338a:	2200      	movs	r2, #0
 810338c:	601a      	str	r2, [r3, #0]
 810338e:	605a      	str	r2, [r3, #4]
 8103390:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8103392:	4b23      	ldr	r3, [pc, #140]	@ (8103420 <MX_TIM8_Init+0xac>)
 8103394:	4a23      	ldr	r2, [pc, #140]	@ (8103424 <MX_TIM8_Init+0xb0>)
 8103396:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8103398:	4b21      	ldr	r3, [pc, #132]	@ (8103420 <MX_TIM8_Init+0xac>)
 810339a:	2200      	movs	r2, #0
 810339c:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 810339e:	4b20      	ldr	r3, [pc, #128]	@ (8103420 <MX_TIM8_Init+0xac>)
 81033a0:	2200      	movs	r2, #0
 81033a2:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 4000 - 1;
 81033a4:	4b1e      	ldr	r3, [pc, #120]	@ (8103420 <MX_TIM8_Init+0xac>)
 81033a6:	f640 729f 	movw	r2, #3999	@ 0xf9f
 81033aa:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81033ac:	4b1c      	ldr	r3, [pc, #112]	@ (8103420 <MX_TIM8_Init+0xac>)
 81033ae:	2200      	movs	r2, #0
 81033b0:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 81033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8103420 <MX_TIM8_Init+0xac>)
 81033b4:	2200      	movs	r2, #0
 81033b6:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81033b8:	4b19      	ldr	r3, [pc, #100]	@ (8103420 <MX_TIM8_Init+0xac>)
 81033ba:	2200      	movs	r2, #0
 81033bc:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81033be:	2303      	movs	r3, #3
 81033c0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81033c2:	2300      	movs	r3, #0
 81033c4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81033c6:	2301      	movs	r3, #1
 81033c8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81033ca:	2300      	movs	r3, #0
 81033cc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 81033ce:	230a      	movs	r3, #10
 81033d0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81033d2:	2300      	movs	r3, #0
 81033d4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81033d6:	2301      	movs	r3, #1
 81033d8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81033da:	2300      	movs	r3, #0
 81033dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 81033de:	230a      	movs	r3, #10
 81033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 81033e2:	f107 030c 	add.w	r3, r7, #12
 81033e6:	4619      	mov	r1, r3
 81033e8:	480d      	ldr	r0, [pc, #52]	@ (8103420 <MX_TIM8_Init+0xac>)
 81033ea:	f007 fda1 	bl	810af30 <HAL_TIM_Encoder_Init>
 81033ee:	4603      	mov	r3, r0
 81033f0:	2b00      	cmp	r3, #0
 81033f2:	d001      	beq.n	81033f8 <MX_TIM8_Init+0x84>
		Error_Handler();
 81033f4:	f000 fada 	bl	81039ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81033f8:	2300      	movs	r3, #0
 81033fa:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81033fc:	2300      	movs	r3, #0
 81033fe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103400:	2300      	movs	r3, #0
 8103402:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8103404:	463b      	mov	r3, r7
 8103406:	4619      	mov	r1, r3
 8103408:	4805      	ldr	r0, [pc, #20]	@ (8103420 <MX_TIM8_Init+0xac>)
 810340a:	f008 fdb1 	bl	810bf70 <HAL_TIMEx_MasterConfigSynchronization>
 810340e:	4603      	mov	r3, r0
 8103410:	2b00      	cmp	r3, #0
 8103412:	d001      	beq.n	8103418 <MX_TIM8_Init+0xa4>
			!= HAL_OK) {
		Error_Handler();
 8103414:	f000 faca 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8103418:	bf00      	nop
 810341a:	3730      	adds	r7, #48	@ 0x30
 810341c:	46bd      	mov	sp, r7
 810341e:	bd80      	pop	{r7, pc}
 8103420:	100004bc 	.word	0x100004bc
 8103424:	40010400 	.word	0x40010400

08103428 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8103428:	b580      	push	{r7, lr}
 810342a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 810342c:	4b22      	ldr	r3, [pc, #136]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 810342e:	4a23      	ldr	r2, [pc, #140]	@ (81034bc <MX_USART2_UART_Init+0x94>)
 8103430:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8103432:	4b21      	ldr	r3, [pc, #132]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103438:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 810343a:	4b1f      	ldr	r3, [pc, #124]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 810343c:	2200      	movs	r2, #0
 810343e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8103440:	4b1d      	ldr	r3, [pc, #116]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103442:	2200      	movs	r2, #0
 8103444:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8103446:	4b1c      	ldr	r3, [pc, #112]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103448:	2200      	movs	r2, #0
 810344a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 810344c:	4b1a      	ldr	r3, [pc, #104]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 810344e:	220c      	movs	r2, #12
 8103450:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103452:	4b19      	ldr	r3, [pc, #100]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103454:	2200      	movs	r2, #0
 8103456:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8103458:	4b17      	ldr	r3, [pc, #92]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 810345a:	2200      	movs	r2, #0
 810345c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810345e:	4b16      	ldr	r3, [pc, #88]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103460:	2200      	movs	r2, #0
 8103462:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103464:	4b14      	ldr	r3, [pc, #80]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103466:	2200      	movs	r2, #0
 8103468:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810346a:	4b13      	ldr	r3, [pc, #76]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 810346c:	2200      	movs	r2, #0
 810346e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8103470:	4811      	ldr	r0, [pc, #68]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103472:	f008 fea7 	bl	810c1c4 <HAL_UART_Init>
 8103476:	4603      	mov	r3, r0
 8103478:	2b00      	cmp	r3, #0
 810347a:	d001      	beq.n	8103480 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 810347c:	f000 fa96 	bl	81039ac <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8103480:	2100      	movs	r1, #0
 8103482:	480d      	ldr	r0, [pc, #52]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103484:	f00b fac9 	bl	810ea1a <HAL_UARTEx_SetTxFifoThreshold>
 8103488:	4603      	mov	r3, r0
 810348a:	2b00      	cmp	r3, #0
 810348c:	d001      	beq.n	8103492 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 810348e:	f000 fa8d 	bl	81039ac <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8103492:	2100      	movs	r1, #0
 8103494:	4808      	ldr	r0, [pc, #32]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 8103496:	f00b fafe 	bl	810ea96 <HAL_UARTEx_SetRxFifoThreshold>
 810349a:	4603      	mov	r3, r0
 810349c:	2b00      	cmp	r3, #0
 810349e:	d001      	beq.n	81034a4 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 81034a0:	f000 fa84 	bl	81039ac <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 81034a4:	4804      	ldr	r0, [pc, #16]	@ (81034b8 <MX_USART2_UART_Init+0x90>)
 81034a6:	f00b fa7f 	bl	810e9a8 <HAL_UARTEx_DisableFifoMode>
 81034aa:	4603      	mov	r3, r0
 81034ac:	2b00      	cmp	r3, #0
 81034ae:	d001      	beq.n	81034b4 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 81034b0:	f000 fa7c 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 81034b4:	bf00      	nop
 81034b6:	bd80      	pop	{r7, pc}
 81034b8:	10000508 	.word	0x10000508
 81034bc:	40004400 	.word	0x40004400

081034c0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 81034c0:	b580      	push	{r7, lr}
 81034c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 81034c4:	4b22      	ldr	r3, [pc, #136]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034c6:	4a23      	ldr	r2, [pc, #140]	@ (8103554 <MX_USART3_UART_Init+0x94>)
 81034c8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 81034ca:	4b21      	ldr	r3, [pc, #132]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81034d0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034d4:	2200      	movs	r2, #0
 81034d6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 81034d8:	4b1d      	ldr	r3, [pc, #116]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034da:	2200      	movs	r2, #0
 81034dc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 81034de:	4b1c      	ldr	r3, [pc, #112]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034e0:	2200      	movs	r2, #0
 81034e2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 81034e4:	4b1a      	ldr	r3, [pc, #104]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034e6:	220c      	movs	r2, #12
 81034e8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81034ea:	4b19      	ldr	r3, [pc, #100]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034ec:	2200      	movs	r2, #0
 81034ee:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81034f0:	4b17      	ldr	r3, [pc, #92]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034f2:	2200      	movs	r2, #0
 81034f4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81034f6:	4b16      	ldr	r3, [pc, #88]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034f8:	2200      	movs	r2, #0
 81034fa:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81034fc:	4b14      	ldr	r3, [pc, #80]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 81034fe:	2200      	movs	r2, #0
 8103500:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103502:	4b13      	ldr	r3, [pc, #76]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 8103504:	2200      	movs	r2, #0
 8103506:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8103508:	4811      	ldr	r0, [pc, #68]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 810350a:	f008 fe5b 	bl	810c1c4 <HAL_UART_Init>
 810350e:	4603      	mov	r3, r0
 8103510:	2b00      	cmp	r3, #0
 8103512:	d001      	beq.n	8103518 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8103514:	f000 fa4a 	bl	81039ac <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8103518:	2100      	movs	r1, #0
 810351a:	480d      	ldr	r0, [pc, #52]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 810351c:	f00b fa7d 	bl	810ea1a <HAL_UARTEx_SetTxFifoThreshold>
 8103520:	4603      	mov	r3, r0
 8103522:	2b00      	cmp	r3, #0
 8103524:	d001      	beq.n	810352a <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8103526:	f000 fa41 	bl	81039ac <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 810352a:	2100      	movs	r1, #0
 810352c:	4808      	ldr	r0, [pc, #32]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 810352e:	f00b fab2 	bl	810ea96 <HAL_UARTEx_SetRxFifoThreshold>
 8103532:	4603      	mov	r3, r0
 8103534:	2b00      	cmp	r3, #0
 8103536:	d001      	beq.n	810353c <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8103538:	f000 fa38 	bl	81039ac <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 810353c:	4804      	ldr	r0, [pc, #16]	@ (8103550 <MX_USART3_UART_Init+0x90>)
 810353e:	f00b fa33 	bl	810e9a8 <HAL_UARTEx_DisableFifoMode>
 8103542:	4603      	mov	r3, r0
 8103544:	2b00      	cmp	r3, #0
 8103546:	d001      	beq.n	810354c <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8103548:	f000 fa30 	bl	81039ac <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 810354c:	bf00      	nop
 810354e:	bd80      	pop	{r7, pc}
 8103550:	1000059c 	.word	0x1000059c
 8103554:	40004800 	.word	0x40004800

08103558 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8103558:	b580      	push	{r7, lr}
 810355a:	b08c      	sub	sp, #48	@ 0x30
 810355c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 810355e:	f107 031c 	add.w	r3, r7, #28
 8103562:	2200      	movs	r2, #0
 8103564:	601a      	str	r2, [r3, #0]
 8103566:	605a      	str	r2, [r3, #4]
 8103568:	609a      	str	r2, [r3, #8]
 810356a:	60da      	str	r2, [r3, #12]
 810356c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 810356e:	4b4e      	ldr	r3, [pc, #312]	@ (81036a8 <MX_GPIO_Init+0x150>)
 8103570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103574:	4a4c      	ldr	r2, [pc, #304]	@ (81036a8 <MX_GPIO_Init+0x150>)
 8103576:	f043 0304 	orr.w	r3, r3, #4
 810357a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810357e:	4b4a      	ldr	r3, [pc, #296]	@ (81036a8 <MX_GPIO_Init+0x150>)
 8103580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103584:	f003 0304 	and.w	r3, r3, #4
 8103588:	61bb      	str	r3, [r7, #24]
 810358a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 810358c:	4b46      	ldr	r3, [pc, #280]	@ (81036a8 <MX_GPIO_Init+0x150>)
 810358e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103592:	4a45      	ldr	r2, [pc, #276]	@ (81036a8 <MX_GPIO_Init+0x150>)
 8103594:	f043 0301 	orr.w	r3, r3, #1
 8103598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810359c:	4b42      	ldr	r3, [pc, #264]	@ (81036a8 <MX_GPIO_Init+0x150>)
 810359e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035a2:	f003 0301 	and.w	r3, r3, #1
 81035a6:	617b      	str	r3, [r7, #20]
 81035a8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 81035aa:	4b3f      	ldr	r3, [pc, #252]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035b0:	4a3d      	ldr	r2, [pc, #244]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035b2:	f043 0320 	orr.w	r3, r3, #32
 81035b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81035ba:	4b3b      	ldr	r3, [pc, #236]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035c0:	f003 0320 	and.w	r3, r3, #32
 81035c4:	613b      	str	r3, [r7, #16]
 81035c6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 81035c8:	4b37      	ldr	r3, [pc, #220]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035ce:	4a36      	ldr	r2, [pc, #216]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035d0:	f043 0310 	orr.w	r3, r3, #16
 81035d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81035d8:	4b33      	ldr	r3, [pc, #204]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035de:	f003 0310 	and.w	r3, r3, #16
 81035e2:	60fb      	str	r3, [r7, #12]
 81035e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 81035e6:	4b30      	ldr	r3, [pc, #192]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035ec:	4a2e      	ldr	r2, [pc, #184]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035ee:	f043 0302 	orr.w	r3, r3, #2
 81035f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81035f6:	4b2c      	ldr	r3, [pc, #176]	@ (81036a8 <MX_GPIO_Init+0x150>)
 81035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035fc:	f003 0302 	and.w	r3, r3, #2
 8103600:	60bb      	str	r3, [r7, #8]
 8103602:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8103604:	4b28      	ldr	r3, [pc, #160]	@ (81036a8 <MX_GPIO_Init+0x150>)
 8103606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810360a:	4a27      	ldr	r2, [pc, #156]	@ (81036a8 <MX_GPIO_Init+0x150>)
 810360c:	f043 0308 	orr.w	r3, r3, #8
 8103610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103614:	4b24      	ldr	r3, [pc, #144]	@ (81036a8 <MX_GPIO_Init+0x150>)
 8103616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810361a:	f003 0308 	and.w	r3, r3, #8
 810361e:	607b      	str	r3, [r7, #4]
 8103620:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8103622:	2200      	movs	r2, #0
 8103624:	2130      	movs	r1, #48	@ 0x30
 8103626:	4821      	ldr	r0, [pc, #132]	@ (81036ac <MX_GPIO_Init+0x154>)
 8103628:	f003 fc2c 	bl	8106e84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 810362c:	2200      	movs	r2, #0
 810362e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8103632:	481f      	ldr	r0, [pc, #124]	@ (81036b0 <MX_GPIO_Init+0x158>)
 8103634:	f003 fc26 	bl	8106e84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8103638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810363c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810363e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8103642:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103644:	2300      	movs	r3, #0
 8103646:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103648:	f107 031c 	add.w	r3, r7, #28
 810364c:	4619      	mov	r1, r3
 810364e:	4819      	ldr	r0, [pc, #100]	@ (81036b4 <MX_GPIO_Init+0x15c>)
 8103650:	f003 fa68 	bl	8106b24 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8103654:	2330      	movs	r3, #48	@ 0x30
 8103656:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103658:	2301      	movs	r3, #1
 810365a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810365c:	2300      	movs	r3, #0
 810365e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103660:	2300      	movs	r3, #0
 8103662:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103664:	f107 031c 	add.w	r3, r7, #28
 8103668:	4619      	mov	r1, r3
 810366a:	4810      	ldr	r0, [pc, #64]	@ (81036ac <MX_GPIO_Init+0x154>)
 810366c:	f003 fa5a 	bl	8106b24 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8103670:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103674:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103676:	2301      	movs	r3, #1
 8103678:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810367a:	2300      	movs	r3, #0
 810367c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810367e:	2300      	movs	r3, #0
 8103680:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103682:	f107 031c 	add.w	r3, r7, #28
 8103686:	4619      	mov	r1, r3
 8103688:	4809      	ldr	r0, [pc, #36]	@ (81036b0 <MX_GPIO_Init+0x158>)
 810368a:	f003 fa4b 	bl	8106b24 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 810368e:	2200      	movs	r2, #0
 8103690:	2100      	movs	r1, #0
 8103692:	2028      	movs	r0, #40	@ 0x28
 8103694:	f002 fc99 	bl	8105fca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8103698:	2028      	movs	r0, #40	@ 0x28
 810369a:	f002 fcb0 	bl	8105ffe <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 810369e:	bf00      	nop
 81036a0:	3730      	adds	r7, #48	@ 0x30
 81036a2:	46bd      	mov	sp, r7
 81036a4:	bd80      	pop	{r7, pc}
 81036a6:	bf00      	nop
 81036a8:	58024400 	.word	0x58024400
 81036ac:	58020000 	.word	0x58020000
 81036b0:	58020400 	.word	0x58020400
 81036b4:	58020800 	.word	0x58020800

081036b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 81036b8:	b480      	push	{r7}
 81036ba:	b083      	sub	sp, #12
 81036bc:	af00      	add	r7, sp, #0
 81036be:	4603      	mov	r3, r0
 81036c0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_3) {
 81036c2:	88fb      	ldrh	r3, [r7, #6]
 81036c4:	2b08      	cmp	r3, #8
 81036c6:	d102      	bne.n	81036ce <HAL_GPIO_EXTI_Callback+0x16>
		flag_BNO055_Data_Ready = 1;
 81036c8:	4b09      	ldr	r3, [pc, #36]	@ (81036f0 <HAL_GPIO_EXTI_Callback+0x38>)
 81036ca:	2201      	movs	r2, #1
 81036cc:	601a      	str	r2, [r3, #0]
	}

	//FUNZIONE DI CALLBACK PULSANTE BLU
	if (GPIO_Pin == GPIO_PIN_13) {
 81036ce:	88fb      	ldrh	r3, [r7, #6]
 81036d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81036d4:	d105      	bne.n	81036e2 <HAL_GPIO_EXTI_Callback+0x2a>

		tasto_premuto = 1;
 81036d6:	4b07      	ldr	r3, [pc, #28]	@ (81036f4 <HAL_GPIO_EXTI_Callback+0x3c>)
 81036d8:	2201      	movs	r2, #1
 81036da:	601a      	str	r2, [r3, #0]
		tasto_appena_premuto = 1;
 81036dc:	4b06      	ldr	r3, [pc, #24]	@ (81036f8 <HAL_GPIO_EXTI_Callback+0x40>)
 81036de:	2201      	movs	r2, #1
 81036e0:	601a      	str	r2, [r3, #0]

	}
}
 81036e2:	bf00      	nop
 81036e4:	370c      	adds	r7, #12
 81036e6:	46bd      	mov	sp, r7
 81036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036ec:	4770      	bx	lr
 81036ee:	bf00      	nop
 81036f0:	100087c8 	.word	0x100087c8
 81036f4:	10008824 	.word	0x10008824
 81036f8:	10008828 	.word	0x10008828
 81036fc:	00000000 	.word	0x00000000

08103700 <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8103700:	b580      	push	{r7, lr}
 8103702:	b082      	sub	sp, #8
 8103704:	af00      	add	r7, sp, #0
 8103706:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	4a2f      	ldr	r2, [pc, #188]	@ (81037c8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 810370c:	4293      	cmp	r3, r2
 810370e:	d140      	bne.n	8103792 <HAL_TIM_PeriodElapsedCallback+0x92>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 8103710:	4b2e      	ldr	r3, [pc, #184]	@ (81037cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8103712:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8103716:	601a      	str	r2, [r3, #0]
		n_ref++;
 8103718:	4b2d      	ldr	r3, [pc, #180]	@ (81037d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 810371a:	681b      	ldr	r3, [r3, #0]
 810371c:	3301      	adds	r3, #1
 810371e:	4a2c      	ldr	r2, [pc, #176]	@ (81037d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8103720:	6013      	str	r3, [r2, #0]
		tempo += 0.01;
 8103722:	4b2c      	ldr	r3, [pc, #176]	@ (81037d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8103724:	681b      	ldr	r3, [r3, #0]
 8103726:	4618      	mov	r0, r3
 8103728:	f7fc ff96 	bl	8100658 <__aeabi_f2d>
 810372c:	a324      	add	r3, pc, #144	@ (adr r3, 81037c0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 810372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103732:	f7fc fe33 	bl	810039c <__adddf3>
 8103736:	4602      	mov	r2, r0
 8103738:	460b      	mov	r3, r1
 810373a:	4610      	mov	r0, r2
 810373c:	4619      	mov	r1, r3
 810373e:	f7fd fadb 	bl	8100cf8 <__aeabi_d2f>
 8103742:	4603      	mov	r3, r0
 8103744:	4a23      	ldr	r2, [pc, #140]	@ (81037d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8103746:	6013      	str	r3, [r2, #0]
		if (n_ref > 100 * 500)
 8103748:	4b21      	ldr	r3, [pc, #132]	@ (81037d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8103750:	4293      	cmp	r3, r2
 8103752:	dd02      	ble.n	810375a <HAL_TIM_PeriodElapsedCallback+0x5a>
			n_ref = 0;
 8103754:	4b1e      	ldr	r3, [pc, #120]	@ (81037d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8103756:	2200      	movs	r2, #0
 8103758:	601a      	str	r2, [r3, #0]

		if (tempo > 3600)
 810375a:	4b1e      	ldr	r3, [pc, #120]	@ (81037d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 810375c:	edd3 7a00 	vldr	s15, [r3]
 8103760:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 81037d8 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8103764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810376c:	dd03      	ble.n	8103776 <HAL_TIM_PeriodElapsedCallback+0x76>
			tempo = 0;
 810376e:	4b19      	ldr	r3, [pc, #100]	@ (81037d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8103770:	f04f 0200 	mov.w	r2, #0
 8103774:	601a      	str	r2, [r3, #0]

		contatore_esp320++;
 8103776:	4b19      	ldr	r3, [pc, #100]	@ (81037dc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	3301      	adds	r3, #1
 810377c:	4a17      	ldr	r2, [pc, #92]	@ (81037dc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 810377e:	6013      	str	r3, [r2, #0]
		if (contatore_esp320 > 3000)
 8103780:	4b16      	ldr	r3, [pc, #88]	@ (81037dc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8103788:	4293      	cmp	r3, r2
 810378a:	dd02      	ble.n	8103792 <HAL_TIM_PeriodElapsedCallback+0x92>
			contatore_esp320 = 0;
 810378c:	4b13      	ldr	r3, [pc, #76]	@ (81037dc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 810378e:	2200      	movs	r2, #0
 8103790:	601a      	str	r2, [r3, #0]

	}

	if (htim == &htim6) {
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	4a12      	ldr	r2, [pc, #72]	@ (81037e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8103796:	4293      	cmp	r3, r2
 8103798:	d10c      	bne.n	81037b4 <HAL_TIM_PeriodElapsedCallback+0xb4>

		// Gestione dell’invio periodico dei dati

		if (trasmissione_attiva == 1) {
 810379a:	4b12      	ldr	r3, [pc, #72]	@ (81037e4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 810379c:	781b      	ldrb	r3, [r3, #0]
 810379e:	2b01      	cmp	r3, #1
 81037a0:	d108      	bne.n	81037b4 <HAL_TIM_PeriodElapsedCallback+0xb4>
			 printf("Dati trasmessi: %s\r\n", buffer);
			 //Trasmissione_dati(buffer, bytesWritten);
			 * */
			//printf("Dati trasmessi: %s\r\n", bufferDati);
			//Trasmissione_dati(bufferDati, indiceBuffer);
			indiceBuffer = 0;
 81037a2:	4b11      	ldr	r3, [pc, #68]	@ (81037e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 81037a4:	2200      	movs	r2, #0
 81037a6:	601a      	str	r2, [r3, #0]
			memset(bufferDati, 0, sizeof(bufferDati));  // Pulizia buffer
 81037a8:	f248 02e8 	movw	r2, #33000	@ 0x80e8
 81037ac:	2100      	movs	r1, #0
 81037ae:	480f      	ldr	r0, [pc, #60]	@ (81037ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 81037b0:	f00c fd4e 	bl	8110250 <memset>

		}

	}
}
 81037b4:	bf00      	nop
 81037b6:	3708      	adds	r7, #8
 81037b8:	46bd      	mov	sp, r7
 81037ba:	bd80      	pop	{r7, pc}
 81037bc:	f3af 8000 	nop.w
 81037c0:	47ae147b 	.word	0x47ae147b
 81037c4:	3f847ae1 	.word	0x3f847ae1
 81037c8:	1000038c 	.word	0x1000038c
 81037cc:	100087cc 	.word	0x100087cc
 81037d0:	10008a64 	.word	0x10008a64
 81037d4:	1000871c 	.word	0x1000871c
 81037d8:	45610000 	.word	0x45610000
 81037dc:	1000882c 	.word	0x1000882c
 81037e0:	10000470 	.word	0x10000470
 81037e4:	10008a6d 	.word	0x10008a6d
 81037e8:	10008718 	.word	0x10008718
 81037ec:	10000630 	.word	0x10000630

081037f0 <__io_getchar>:
//INPUT E OUTPUT USART
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}
int __io_getchar(void) {
 81037f0:	b580      	push	{r7, lr}
 81037f2:	b082      	sub	sp, #8
 81037f4:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 81037f6:	4b0b      	ldr	r3, [pc, #44]	@ (8103824 <__io_getchar+0x34>)
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	2208      	movs	r2, #8
 81037fc:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 81037fe:	1df9      	adds	r1, r7, #7
 8103800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103804:	2201      	movs	r2, #1
 8103806:	4807      	ldr	r0, [pc, #28]	@ (8103824 <__io_getchar+0x34>)
 8103808:	f008 fdba 	bl	810c380 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 810380c:	1df9      	adds	r1, r7, #7
 810380e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103812:	2201      	movs	r2, #1
 8103814:	4803      	ldr	r0, [pc, #12]	@ (8103824 <__io_getchar+0x34>)
 8103816:	f008 fd25 	bl	810c264 <HAL_UART_Transmit>
	return ch;
 810381a:	79fb      	ldrb	r3, [r7, #7]
}
 810381c:	4618      	mov	r0, r3
 810381e:	3708      	adds	r7, #8
 8103820:	46bd      	mov	sp, r7
 8103822:	bd80      	pop	{r7, pc}
 8103824:	1000059c 	.word	0x1000059c

08103828 <HAL_UART_RxCpltCallback>:
void Trasmissione_dati(void *data, size_t size) {
	HAL_UART_Transmit(&huart2, (uint8_t*) data, size, HAL_MAX_DELAY);
}

// Callback chiamata quando un byte viene ricevuto sulla UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8103828:	b580      	push	{r7, lr}
 810382a:	b082      	sub	sp, #8
 810382c:	af00      	add	r7, sp, #0
 810382e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	4a46      	ldr	r2, [pc, #280]	@ (810394c <HAL_UART_RxCpltCallback+0x124>)
 8103834:	4293      	cmp	r3, r2
 8103836:	f040 8085 	bne.w	8103944 <HAL_UART_RxCpltCallback+0x11c>
		if (rx_buffer[0] == 'S') {
 810383a:	4b45      	ldr	r3, [pc, #276]	@ (8103950 <HAL_UART_RxCpltCallback+0x128>)
 810383c:	781b      	ldrb	r3, [r3, #0]
 810383e:	2b53      	cmp	r3, #83	@ 0x53
 8103840:	d109      	bne.n	8103856 <HAL_UART_RxCpltCallback+0x2e>
			// Interrompi la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 8103842:	4b43      	ldr	r3, [pc, #268]	@ (8103950 <HAL_UART_RxCpltCallback+0x128>)
 8103844:	781b      	ldrb	r3, [r3, #0]
 8103846:	4619      	mov	r1, r3
 8103848:	4842      	ldr	r0, [pc, #264]	@ (8103954 <HAL_UART_RxCpltCallback+0x12c>)
 810384a:	f00c fbf7 	bl	811003c <iprintf>
			trasmissione_attiva = 0;
 810384e:	4b42      	ldr	r3, [pc, #264]	@ (8103958 <HAL_UART_RxCpltCallback+0x130>)
 8103850:	2200      	movs	r2, #0
 8103852:	701a      	strb	r2, [r3, #0]
 8103854:	e04c      	b.n	81038f0 <HAL_UART_RxCpltCallback+0xc8>

		} else if (rx_buffer[0] == 'V') {
 8103856:	4b3e      	ldr	r3, [pc, #248]	@ (8103950 <HAL_UART_RxCpltCallback+0x128>)
 8103858:	781b      	ldrb	r3, [r3, #0]
 810385a:	2b56      	cmp	r3, #86	@ 0x56
 810385c:	d109      	bne.n	8103872 <HAL_UART_RxCpltCallback+0x4a>
			// Avvia la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 810385e:	4b3c      	ldr	r3, [pc, #240]	@ (8103950 <HAL_UART_RxCpltCallback+0x128>)
 8103860:	781b      	ldrb	r3, [r3, #0]
 8103862:	4619      	mov	r1, r3
 8103864:	483b      	ldr	r0, [pc, #236]	@ (8103954 <HAL_UART_RxCpltCallback+0x12c>)
 8103866:	f00c fbe9 	bl	811003c <iprintf>
			trasmissione_attiva = 1;
 810386a:	4b3b      	ldr	r3, [pc, #236]	@ (8103958 <HAL_UART_RxCpltCallback+0x130>)
 810386c:	2201      	movs	r2, #1
 810386e:	701a      	strb	r2, [r3, #0]
 8103870:	e03e      	b.n	81038f0 <HAL_UART_RxCpltCallback+0xc8>
		} else if(rx_buffer[0] == 'P')
 8103872:	4b37      	ldr	r3, [pc, #220]	@ (8103950 <HAL_UART_RxCpltCallback+0x128>)
 8103874:	781b      	ldrb	r3, [r3, #0]
 8103876:	2b50      	cmp	r3, #80	@ 0x50
 8103878:	d13a      	bne.n	81038f0 <HAL_UART_RxCpltCallback+0xc8>
		{
			//HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
			i=1;
 810387a:	4b38      	ldr	r3, [pc, #224]	@ (810395c <HAL_UART_RxCpltCallback+0x134>)
 810387c:	2201      	movs	r2, #1
 810387e:	601a      	str	r2, [r3, #0]
			// Ricevi 4 byte tramite UART (blocca fino a ricezione)
			HAL_UART_Receive_IT(&huart2, &bytesricevuti, 12);
 8103880:	220c      	movs	r2, #12
 8103882:	4937      	ldr	r1, [pc, #220]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 8103884:	4831      	ldr	r0, [pc, #196]	@ (810394c <HAL_UART_RxCpltCallback+0x124>)
 8103886:	f008 fe43 	bl	810c510 <HAL_UART_Receive_IT>
			rx_buffer[0]=0;
 810388a:	4b31      	ldr	r3, [pc, #196]	@ (8103950 <HAL_UART_RxCpltCallback+0x128>)
 810388c:	2200      	movs	r2, #0
 810388e:	701a      	strb	r2, [r3, #0]
			// Ricostruisci il float dai 4 byte ricevuti
			bytesricevuti1[0]=bytesricevuti[0];
 8103890:	4b33      	ldr	r3, [pc, #204]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 8103892:	781a      	ldrb	r2, [r3, #0]
 8103894:	4b33      	ldr	r3, [pc, #204]	@ (8103964 <HAL_UART_RxCpltCallback+0x13c>)
 8103896:	701a      	strb	r2, [r3, #0]
			bytesricevuti1[1]=bytesricevuti[1];
 8103898:	4b31      	ldr	r3, [pc, #196]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 810389a:	785a      	ldrb	r2, [r3, #1]
 810389c:	4b31      	ldr	r3, [pc, #196]	@ (8103964 <HAL_UART_RxCpltCallback+0x13c>)
 810389e:	705a      	strb	r2, [r3, #1]
			bytesricevuti1[2]=bytesricevuti[2];
 81038a0:	4b2f      	ldr	r3, [pc, #188]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038a2:	789a      	ldrb	r2, [r3, #2]
 81038a4:	4b2f      	ldr	r3, [pc, #188]	@ (8103964 <HAL_UART_RxCpltCallback+0x13c>)
 81038a6:	709a      	strb	r2, [r3, #2]
			bytesricevuti1[3]=bytesricevuti[3];
 81038a8:	4b2d      	ldr	r3, [pc, #180]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038aa:	78da      	ldrb	r2, [r3, #3]
 81038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8103964 <HAL_UART_RxCpltCallback+0x13c>)
 81038ae:	70da      	strb	r2, [r3, #3]
			bytesricevuti2[0]=bytesricevuti[4];
 81038b0:	4b2b      	ldr	r3, [pc, #172]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038b2:	791a      	ldrb	r2, [r3, #4]
 81038b4:	4b2c      	ldr	r3, [pc, #176]	@ (8103968 <HAL_UART_RxCpltCallback+0x140>)
 81038b6:	701a      	strb	r2, [r3, #0]
			bytesricevuti2[1]=bytesricevuti[5];
 81038b8:	4b29      	ldr	r3, [pc, #164]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038ba:	795a      	ldrb	r2, [r3, #5]
 81038bc:	4b2a      	ldr	r3, [pc, #168]	@ (8103968 <HAL_UART_RxCpltCallback+0x140>)
 81038be:	705a      	strb	r2, [r3, #1]
			bytesricevuti2[2]=bytesricevuti[6];
 81038c0:	4b27      	ldr	r3, [pc, #156]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038c2:	799a      	ldrb	r2, [r3, #6]
 81038c4:	4b28      	ldr	r3, [pc, #160]	@ (8103968 <HAL_UART_RxCpltCallback+0x140>)
 81038c6:	709a      	strb	r2, [r3, #2]
			bytesricevuti2[3]=bytesricevuti[7];
 81038c8:	4b25      	ldr	r3, [pc, #148]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038ca:	79da      	ldrb	r2, [r3, #7]
 81038cc:	4b26      	ldr	r3, [pc, #152]	@ (8103968 <HAL_UART_RxCpltCallback+0x140>)
 81038ce:	70da      	strb	r2, [r3, #3]
			bytesricevuti3[0]=bytesricevuti[8];
 81038d0:	4b23      	ldr	r3, [pc, #140]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038d2:	7a1a      	ldrb	r2, [r3, #8]
 81038d4:	4b25      	ldr	r3, [pc, #148]	@ (810396c <HAL_UART_RxCpltCallback+0x144>)
 81038d6:	701a      	strb	r2, [r3, #0]
			bytesricevuti3[1]=bytesricevuti[9];
 81038d8:	4b21      	ldr	r3, [pc, #132]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038da:	7a5a      	ldrb	r2, [r3, #9]
 81038dc:	4b23      	ldr	r3, [pc, #140]	@ (810396c <HAL_UART_RxCpltCallback+0x144>)
 81038de:	705a      	strb	r2, [r3, #1]
			bytesricevuti3[2]=bytesricevuti[10];
 81038e0:	4b1f      	ldr	r3, [pc, #124]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038e2:	7a9a      	ldrb	r2, [r3, #10]
 81038e4:	4b21      	ldr	r3, [pc, #132]	@ (810396c <HAL_UART_RxCpltCallback+0x144>)
 81038e6:	709a      	strb	r2, [r3, #2]
			bytesricevuti3[3]=bytesricevuti[11];
 81038e8:	4b1d      	ldr	r3, [pc, #116]	@ (8103960 <HAL_UART_RxCpltCallback+0x138>)
 81038ea:	7ada      	ldrb	r2, [r3, #11]
 81038ec:	4b1f      	ldr	r3, [pc, #124]	@ (810396c <HAL_UART_RxCpltCallback+0x144>)
 81038ee:	70da      	strb	r2, [r3, #3]
		}




		HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
 81038f0:	2201      	movs	r2, #1
 81038f2:	4917      	ldr	r1, [pc, #92]	@ (8103950 <HAL_UART_RxCpltCallback+0x128>)
 81038f4:	4815      	ldr	r0, [pc, #84]	@ (810394c <HAL_UART_RxCpltCallback+0x124>)
 81038f6:	f008 fe0b 	bl	810c510 <HAL_UART_Receive_IT>
		memcpy(&floatricevuto1, &bytesricevuti1, sizeof(float));
 81038fa:	4b1a      	ldr	r3, [pc, #104]	@ (8103964 <HAL_UART_RxCpltCallback+0x13c>)
 81038fc:	681b      	ldr	r3, [r3, #0]
 81038fe:	4a1c      	ldr	r2, [pc, #112]	@ (8103970 <HAL_UART_RxCpltCallback+0x148>)
 8103900:	6013      	str	r3, [r2, #0]
		memcpy(&floatricevuto2, &bytesricevuti2, sizeof(float));
 8103902:	4b19      	ldr	r3, [pc, #100]	@ (8103968 <HAL_UART_RxCpltCallback+0x140>)
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	4a1b      	ldr	r2, [pc, #108]	@ (8103974 <HAL_UART_RxCpltCallback+0x14c>)
 8103908:	6013      	str	r3, [r2, #0]
		memcpy(&floatricevuto3, &bytesricevuti3, sizeof(float));
 810390a:	4b18      	ldr	r3, [pc, #96]	@ (810396c <HAL_UART_RxCpltCallback+0x144>)
 810390c:	681b      	ldr	r3, [r3, #0]
 810390e:	4a1a      	ldr	r2, [pc, #104]	@ (8103978 <HAL_UART_RxCpltCallback+0x150>)
 8103910:	6013      	str	r3, [r2, #0]

		if(i==1)
 8103912:	4b12      	ldr	r3, [pc, #72]	@ (810395c <HAL_UART_RxCpltCallback+0x134>)
 8103914:	681b      	ldr	r3, [r3, #0]
 8103916:	2b01      	cmp	r3, #1
 8103918:	d114      	bne.n	8103944 <HAL_UART_RxCpltCallback+0x11c>
		{
			tune_PID(&pid_roll, floatricevuto1, floatricevuto2, floatricevuto3); //prova ad alzare
 810391a:	4b15      	ldr	r3, [pc, #84]	@ (8103970 <HAL_UART_RxCpltCallback+0x148>)
 810391c:	edd3 7a00 	vldr	s15, [r3]
 8103920:	4b14      	ldr	r3, [pc, #80]	@ (8103974 <HAL_UART_RxCpltCallback+0x14c>)
 8103922:	ed93 7a00 	vldr	s14, [r3]
 8103926:	4b14      	ldr	r3, [pc, #80]	@ (8103978 <HAL_UART_RxCpltCallback+0x150>)
 8103928:	edd3 6a00 	vldr	s13, [r3]
 810392c:	eeb0 1a66 	vmov.f32	s2, s13
 8103930:	eef0 0a47 	vmov.f32	s1, s14
 8103934:	eeb0 0a67 	vmov.f32	s0, s15
 8103938:	4810      	ldr	r0, [pc, #64]	@ (810397c <HAL_UART_RxCpltCallback+0x154>)
 810393a:	f7fd fd06 	bl	810134a <tune_PID>
i=0;
 810393e:	4b07      	ldr	r3, [pc, #28]	@ (810395c <HAL_UART_RxCpltCallback+0x134>)
 8103940:	2200      	movs	r2, #0
 8103942:	601a      	str	r2, [r3, #0]




	}
}
 8103944:	bf00      	nop
 8103946:	3708      	adds	r7, #8
 8103948:	46bd      	mov	sp, r7
 810394a:	bd80      	pop	{r7, pc}
 810394c:	10000508 	.word	0x10000508
 8103950:	10008a6c 	.word	0x10008a6c
 8103954:	08113940 	.word	0x08113940
 8103958:	10008a6d 	.word	0x10008a6d
 810395c:	10008744 	.word	0x10008744
 8103960:	10008720 	.word	0x10008720
 8103964:	1000872c 	.word	0x1000872c
 8103968:	10008730 	.word	0x10008730
 810396c:	10008734 	.word	0x10008734
 8103970:	10008738 	.word	0x10008738
 8103974:	1000873c 	.word	0x1000873c
 8103978:	10008740 	.word	0x10008740
 810397c:	10008788 	.word	0x10008788

08103980 <_write>:
// Funzione di scrittura per printf
int _write(int file, char *ptr, int len) {
 8103980:	b580      	push	{r7, lr}
 8103982:	b084      	sub	sp, #16
 8103984:	af00      	add	r7, sp, #0
 8103986:	60f8      	str	r0, [r7, #12]
 8103988:	60b9      	str	r1, [r7, #8]
 810398a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	b29a      	uxth	r2, r3
 8103990:	f04f 33ff 	mov.w	r3, #4294967295
 8103994:	68b9      	ldr	r1, [r7, #8]
 8103996:	4804      	ldr	r0, [pc, #16]	@ (81039a8 <_write+0x28>)
 8103998:	f008 fc64 	bl	810c264 <HAL_UART_Transmit>
	return len;
 810399c:	687b      	ldr	r3, [r7, #4]
}
 810399e:	4618      	mov	r0, r3
 81039a0:	3710      	adds	r7, #16
 81039a2:	46bd      	mov	sp, r7
 81039a4:	bd80      	pop	{r7, pc}
 81039a6:	bf00      	nop
 81039a8:	1000059c 	.word	0x1000059c

081039ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 81039ac:	b480      	push	{r7}
 81039ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81039b0:	b672      	cpsid	i
}
 81039b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 81039b4:	bf00      	nop
 81039b6:	e7fd      	b.n	81039b4 <Error_Handler+0x8>

081039b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81039b8:	b480      	push	{r7}
 81039ba:	b083      	sub	sp, #12
 81039bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81039be:	4b0a      	ldr	r3, [pc, #40]	@ (81039e8 <HAL_MspInit+0x30>)
 81039c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81039c4:	4a08      	ldr	r2, [pc, #32]	@ (81039e8 <HAL_MspInit+0x30>)
 81039c6:	f043 0302 	orr.w	r3, r3, #2
 81039ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81039ce:	4b06      	ldr	r3, [pc, #24]	@ (81039e8 <HAL_MspInit+0x30>)
 81039d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81039d4:	f003 0302 	and.w	r3, r3, #2
 81039d8:	607b      	str	r3, [r7, #4]
 81039da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81039dc:	bf00      	nop
 81039de:	370c      	adds	r7, #12
 81039e0:	46bd      	mov	sp, r7
 81039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039e6:	4770      	bx	lr
 81039e8:	58024400 	.word	0x58024400

081039ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81039ec:	b580      	push	{r7, lr}
 81039ee:	b0ba      	sub	sp, #232	@ 0xe8
 81039f0:	af00      	add	r7, sp, #0
 81039f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81039f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81039f8:	2200      	movs	r2, #0
 81039fa:	601a      	str	r2, [r3, #0]
 81039fc:	605a      	str	r2, [r3, #4]
 81039fe:	609a      	str	r2, [r3, #8]
 8103a00:	60da      	str	r2, [r3, #12]
 8103a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103a04:	f107 0310 	add.w	r3, r7, #16
 8103a08:	22c0      	movs	r2, #192	@ 0xc0
 8103a0a:	2100      	movs	r1, #0
 8103a0c:	4618      	mov	r0, r3
 8103a0e:	f00c fc1f 	bl	8110250 <memset>
  if(hadc->Instance==ADC1)
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	681b      	ldr	r3, [r3, #0]
 8103a16:	4a2c      	ldr	r2, [pc, #176]	@ (8103ac8 <HAL_ADC_MspInit+0xdc>)
 8103a18:	4293      	cmp	r3, r2
 8103a1a:	d151      	bne.n	8103ac0 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8103a1c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8103a20:	f04f 0300 	mov.w	r3, #0
 8103a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8103a28:	2301      	movs	r3, #1
 8103a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8103a2c:	2312      	movs	r3, #18
 8103a2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8103a30:	2302      	movs	r3, #2
 8103a32:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8103a34:	2302      	movs	r3, #2
 8103a36:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8103a38:	2302      	movs	r3, #2
 8103a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8103a3c:	23c0      	movs	r3, #192	@ 0xc0
 8103a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8103a40:	2320      	movs	r3, #32
 8103a42:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8103a44:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8103a48:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8103a4a:	2300      	movs	r3, #0
 8103a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103a50:	f107 0310 	add.w	r3, r7, #16
 8103a54:	4618      	mov	r0, r3
 8103a56:	f004 fabd 	bl	8107fd4 <HAL_RCCEx_PeriphCLKConfig>
 8103a5a:	4603      	mov	r3, r0
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d001      	beq.n	8103a64 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8103a60:	f7ff ffa4 	bl	81039ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8103a64:	4b19      	ldr	r3, [pc, #100]	@ (8103acc <HAL_ADC_MspInit+0xe0>)
 8103a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103a6a:	4a18      	ldr	r2, [pc, #96]	@ (8103acc <HAL_ADC_MspInit+0xe0>)
 8103a6c:	f043 0320 	orr.w	r3, r3, #32
 8103a70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103a74:	4b15      	ldr	r3, [pc, #84]	@ (8103acc <HAL_ADC_MspInit+0xe0>)
 8103a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103a7a:	f003 0320 	and.w	r3, r3, #32
 8103a7e:	60fb      	str	r3, [r7, #12]
 8103a80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8103a82:	4b12      	ldr	r3, [pc, #72]	@ (8103acc <HAL_ADC_MspInit+0xe0>)
 8103a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103a88:	4a10      	ldr	r2, [pc, #64]	@ (8103acc <HAL_ADC_MspInit+0xe0>)
 8103a8a:	f043 0320 	orr.w	r3, r3, #32
 8103a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103a92:	4b0e      	ldr	r3, [pc, #56]	@ (8103acc <HAL_ADC_MspInit+0xe0>)
 8103a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103a98:	f003 0320 	and.w	r3, r3, #32
 8103a9c:	60bb      	str	r3, [r7, #8]
 8103a9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8103aa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8103aa8:	2303      	movs	r3, #3
 8103aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103aae:	2300      	movs	r3, #0
 8103ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8103ab4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103ab8:	4619      	mov	r1, r3
 8103aba:	4805      	ldr	r0, [pc, #20]	@ (8103ad0 <HAL_ADC_MspInit+0xe4>)
 8103abc:	f003 f832 	bl	8106b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8103ac0:	bf00      	nop
 8103ac2:	37e8      	adds	r7, #232	@ 0xe8
 8103ac4:	46bd      	mov	sp, r7
 8103ac6:	bd80      	pop	{r7, pc}
 8103ac8:	40022000 	.word	0x40022000
 8103acc:	58024400 	.word	0x58024400
 8103ad0:	58021400 	.word	0x58021400

08103ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8103ad4:	b580      	push	{r7, lr}
 8103ad6:	b0ba      	sub	sp, #232	@ 0xe8
 8103ad8:	af00      	add	r7, sp, #0
 8103ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103adc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103ae0:	2200      	movs	r2, #0
 8103ae2:	601a      	str	r2, [r3, #0]
 8103ae4:	605a      	str	r2, [r3, #4]
 8103ae6:	609a      	str	r2, [r3, #8]
 8103ae8:	60da      	str	r2, [r3, #12]
 8103aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103aec:	f107 0310 	add.w	r3, r7, #16
 8103af0:	22c0      	movs	r2, #192	@ 0xc0
 8103af2:	2100      	movs	r1, #0
 8103af4:	4618      	mov	r0, r3
 8103af6:	f00c fbab 	bl	8110250 <memset>
  if(hi2c->Instance==I2C1)
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	4a26      	ldr	r2, [pc, #152]	@ (8103b98 <HAL_I2C_MspInit+0xc4>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d145      	bne.n	8103b90 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8103b04:	f04f 0208 	mov.w	r2, #8
 8103b08:	f04f 0300 	mov.w	r3, #0
 8103b0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8103b10:	2300      	movs	r3, #0
 8103b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103b16:	f107 0310 	add.w	r3, r7, #16
 8103b1a:	4618      	mov	r0, r3
 8103b1c:	f004 fa5a 	bl	8107fd4 <HAL_RCCEx_PeriphCLKConfig>
 8103b20:	4603      	mov	r3, r0
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d001      	beq.n	8103b2a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8103b26:	f7ff ff41 	bl	81039ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8103b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8103b9c <HAL_I2C_MspInit+0xc8>)
 8103b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103b30:	4a1a      	ldr	r2, [pc, #104]	@ (8103b9c <HAL_I2C_MspInit+0xc8>)
 8103b32:	f043 0302 	orr.w	r3, r3, #2
 8103b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103b3a:	4b18      	ldr	r3, [pc, #96]	@ (8103b9c <HAL_I2C_MspInit+0xc8>)
 8103b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103b40:	f003 0302 	and.w	r3, r3, #2
 8103b44:	60fb      	str	r3, [r7, #12]
 8103b46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8103b48:	23c0      	movs	r3, #192	@ 0xc0
 8103b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8103b4e:	2312      	movs	r3, #18
 8103b50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103b54:	2300      	movs	r3, #0
 8103b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103b5a:	2300      	movs	r3, #0
 8103b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8103b60:	2304      	movs	r3, #4
 8103b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103b66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103b6a:	4619      	mov	r1, r3
 8103b6c:	480c      	ldr	r0, [pc, #48]	@ (8103ba0 <HAL_I2C_MspInit+0xcc>)
 8103b6e:	f002 ffd9 	bl	8106b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8103b72:	4b0a      	ldr	r3, [pc, #40]	@ (8103b9c <HAL_I2C_MspInit+0xc8>)
 8103b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103b78:	4a08      	ldr	r2, [pc, #32]	@ (8103b9c <HAL_I2C_MspInit+0xc8>)
 8103b7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103b7e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103b82:	4b06      	ldr	r3, [pc, #24]	@ (8103b9c <HAL_I2C_MspInit+0xc8>)
 8103b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8103b8c:	60bb      	str	r3, [r7, #8]
 8103b8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8103b90:	bf00      	nop
 8103b92:	37e8      	adds	r7, #232	@ 0xe8
 8103b94:	46bd      	mov	sp, r7
 8103b96:	bd80      	pop	{r7, pc}
 8103b98:	40005400 	.word	0x40005400
 8103b9c:	58024400 	.word	0x58024400
 8103ba0:	58020400 	.word	0x58020400

08103ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8103ba4:	b580      	push	{r7, lr}
 8103ba6:	b086      	sub	sp, #24
 8103ba8:	af00      	add	r7, sp, #0
 8103baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	4a32      	ldr	r2, [pc, #200]	@ (8103c7c <HAL_TIM_Base_MspInit+0xd8>)
 8103bb2:	4293      	cmp	r3, r2
 8103bb4:	d10f      	bne.n	8103bd6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8103bb6:	4b32      	ldr	r3, [pc, #200]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103bbc:	4a30      	ldr	r2, [pc, #192]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103bbe:	f043 0301 	orr.w	r3, r3, #1
 8103bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103bcc:	f003 0301 	and.w	r3, r3, #1
 8103bd0:	617b      	str	r3, [r7, #20]
 8103bd2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8103bd4:	e04d      	b.n	8103c72 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	681b      	ldr	r3, [r3, #0]
 8103bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103bde:	d117      	bne.n	8103c10 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8103be0:	4b27      	ldr	r3, [pc, #156]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103be6:	4a26      	ldr	r2, [pc, #152]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103be8:	f043 0301 	orr.w	r3, r3, #1
 8103bec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103bf0:	4b23      	ldr	r3, [pc, #140]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103bf6:	f003 0301 	and.w	r3, r3, #1
 8103bfa:	613b      	str	r3, [r7, #16]
 8103bfc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8103bfe:	2200      	movs	r2, #0
 8103c00:	2100      	movs	r1, #0
 8103c02:	201c      	movs	r0, #28
 8103c04:	f002 f9e1 	bl	8105fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8103c08:	201c      	movs	r0, #28
 8103c0a:	f002 f9f8 	bl	8105ffe <HAL_NVIC_EnableIRQ>
}
 8103c0e:	e030      	b.n	8103c72 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	4a1b      	ldr	r2, [pc, #108]	@ (8103c84 <HAL_TIM_Base_MspInit+0xe0>)
 8103c16:	4293      	cmp	r3, r2
 8103c18:	d10f      	bne.n	8103c3a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8103c1a:	4b19      	ldr	r3, [pc, #100]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103c20:	4a17      	ldr	r2, [pc, #92]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103c22:	f043 0302 	orr.w	r3, r3, #2
 8103c26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103c2a:	4b15      	ldr	r3, [pc, #84]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103c30:	f003 0302 	and.w	r3, r3, #2
 8103c34:	60fb      	str	r3, [r7, #12]
 8103c36:	68fb      	ldr	r3, [r7, #12]
}
 8103c38:	e01b      	b.n	8103c72 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM6)
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	681b      	ldr	r3, [r3, #0]
 8103c3e:	4a12      	ldr	r2, [pc, #72]	@ (8103c88 <HAL_TIM_Base_MspInit+0xe4>)
 8103c40:	4293      	cmp	r3, r2
 8103c42:	d116      	bne.n	8103c72 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8103c44:	4b0e      	ldr	r3, [pc, #56]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103c4c:	f043 0310 	orr.w	r3, r3, #16
 8103c50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103c54:	4b0a      	ldr	r3, [pc, #40]	@ (8103c80 <HAL_TIM_Base_MspInit+0xdc>)
 8103c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103c5a:	f003 0310 	and.w	r3, r3, #16
 8103c5e:	60bb      	str	r3, [r7, #8]
 8103c60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8103c62:	2200      	movs	r2, #0
 8103c64:	2100      	movs	r1, #0
 8103c66:	2036      	movs	r0, #54	@ 0x36
 8103c68:	f002 f9af 	bl	8105fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8103c6c:	2036      	movs	r0, #54	@ 0x36
 8103c6e:	f002 f9c6 	bl	8105ffe <HAL_NVIC_EnableIRQ>
}
 8103c72:	bf00      	nop
 8103c74:	3718      	adds	r7, #24
 8103c76:	46bd      	mov	sp, r7
 8103c78:	bd80      	pop	{r7, pc}
 8103c7a:	bf00      	nop
 8103c7c:	40010000 	.word	0x40010000
 8103c80:	58024400 	.word	0x58024400
 8103c84:	40000400 	.word	0x40000400
 8103c88:	40001000 	.word	0x40001000

08103c8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8103c8c:	b580      	push	{r7, lr}
 8103c8e:	b08c      	sub	sp, #48	@ 0x30
 8103c90:	af00      	add	r7, sp, #0
 8103c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103c94:	f107 031c 	add.w	r3, r7, #28
 8103c98:	2200      	movs	r2, #0
 8103c9a:	601a      	str	r2, [r3, #0]
 8103c9c:	605a      	str	r2, [r3, #4]
 8103c9e:	609a      	str	r2, [r3, #8]
 8103ca0:	60da      	str	r2, [r3, #12]
 8103ca2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a34      	ldr	r2, [pc, #208]	@ (8103d7c <HAL_TIM_Encoder_MspInit+0xf0>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d12f      	bne.n	8103d0e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8103cae:	4b34      	ldr	r3, [pc, #208]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103cb4:	4a32      	ldr	r2, [pc, #200]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103cb6:	f043 0304 	orr.w	r3, r3, #4
 8103cba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103cbe:	4b30      	ldr	r3, [pc, #192]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103cc4:	f003 0304 	and.w	r3, r3, #4
 8103cc8:	61bb      	str	r3, [r7, #24]
 8103cca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103cd4:	f043 0308 	orr.w	r3, r3, #8
 8103cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103cdc:	4b28      	ldr	r3, [pc, #160]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103ce2:	f003 0308 	and.w	r3, r3, #8
 8103ce6:	617b      	str	r3, [r7, #20]
 8103ce8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8103cea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8103cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103cf0:	2302      	movs	r3, #2
 8103cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103cf4:	2300      	movs	r3, #0
 8103cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103cf8:	2300      	movs	r3, #0
 8103cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8103cfc:	2302      	movs	r3, #2
 8103cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103d00:	f107 031c 	add.w	r3, r7, #28
 8103d04:	4619      	mov	r1, r3
 8103d06:	481f      	ldr	r0, [pc, #124]	@ (8103d84 <HAL_TIM_Encoder_MspInit+0xf8>)
 8103d08:	f002 ff0c 	bl	8106b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8103d0c:	e032      	b.n	8103d74 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	4a1d      	ldr	r2, [pc, #116]	@ (8103d88 <HAL_TIM_Encoder_MspInit+0xfc>)
 8103d14:	4293      	cmp	r3, r2
 8103d16:	d12d      	bne.n	8103d74 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8103d18:	4b19      	ldr	r3, [pc, #100]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103d1e:	4a18      	ldr	r2, [pc, #96]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103d20:	f043 0302 	orr.w	r3, r3, #2
 8103d24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103d28:	4b15      	ldr	r3, [pc, #84]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103d2e:	f003 0302 	and.w	r3, r3, #2
 8103d32:	613b      	str	r3, [r7, #16]
 8103d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8103d36:	4b12      	ldr	r3, [pc, #72]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d3c:	4a10      	ldr	r2, [pc, #64]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103d3e:	f043 0304 	orr.w	r3, r3, #4
 8103d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103d46:	4b0e      	ldr	r3, [pc, #56]	@ (8103d80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d4c:	f003 0304 	and.w	r3, r3, #4
 8103d50:	60fb      	str	r3, [r7, #12]
 8103d52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8103d54:	23c0      	movs	r3, #192	@ 0xc0
 8103d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103d58:	2302      	movs	r3, #2
 8103d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103d5c:	2300      	movs	r3, #0
 8103d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103d60:	2300      	movs	r3, #0
 8103d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8103d64:	2303      	movs	r3, #3
 8103d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103d68:	f107 031c 	add.w	r3, r7, #28
 8103d6c:	4619      	mov	r1, r3
 8103d6e:	4807      	ldr	r0, [pc, #28]	@ (8103d8c <HAL_TIM_Encoder_MspInit+0x100>)
 8103d70:	f002 fed8 	bl	8106b24 <HAL_GPIO_Init>
}
 8103d74:	bf00      	nop
 8103d76:	3730      	adds	r7, #48	@ 0x30
 8103d78:	46bd      	mov	sp, r7
 8103d7a:	bd80      	pop	{r7, pc}
 8103d7c:	40000800 	.word	0x40000800
 8103d80:	58024400 	.word	0x58024400
 8103d84:	58020c00 	.word	0x58020c00
 8103d88:	40010400 	.word	0x40010400
 8103d8c:	58020800 	.word	0x58020800

08103d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8103d90:	b580      	push	{r7, lr}
 8103d92:	b08a      	sub	sp, #40	@ 0x28
 8103d94:	af00      	add	r7, sp, #0
 8103d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103d98:	f107 0314 	add.w	r3, r7, #20
 8103d9c:	2200      	movs	r2, #0
 8103d9e:	601a      	str	r2, [r3, #0]
 8103da0:	605a      	str	r2, [r3, #4]
 8103da2:	609a      	str	r2, [r3, #8]
 8103da4:	60da      	str	r2, [r3, #12]
 8103da6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	4a25      	ldr	r2, [pc, #148]	@ (8103e44 <HAL_TIM_MspPostInit+0xb4>)
 8103dae:	4293      	cmp	r3, r2
 8103db0:	d120      	bne.n	8103df4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8103db2:	4b25      	ldr	r3, [pc, #148]	@ (8103e48 <HAL_TIM_MspPostInit+0xb8>)
 8103db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103db8:	4a23      	ldr	r2, [pc, #140]	@ (8103e48 <HAL_TIM_MspPostInit+0xb8>)
 8103dba:	f043 0310 	orr.w	r3, r3, #16
 8103dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103dc2:	4b21      	ldr	r3, [pc, #132]	@ (8103e48 <HAL_TIM_MspPostInit+0xb8>)
 8103dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103dc8:	f003 0310 	and.w	r3, r3, #16
 8103dcc:	613b      	str	r3, [r7, #16]
 8103dce:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8103dd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103dd6:	2302      	movs	r3, #2
 8103dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103dda:	2300      	movs	r3, #0
 8103ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103dde:	2300      	movs	r3, #0
 8103de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8103de2:	2301      	movs	r3, #1
 8103de4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8103de6:	f107 0314 	add.w	r3, r7, #20
 8103dea:	4619      	mov	r1, r3
 8103dec:	4817      	ldr	r0, [pc, #92]	@ (8103e4c <HAL_TIM_MspPostInit+0xbc>)
 8103dee:	f002 fe99 	bl	8106b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8103df2:	e023      	b.n	8103e3c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	4a15      	ldr	r2, [pc, #84]	@ (8103e50 <HAL_TIM_MspPostInit+0xc0>)
 8103dfa:	4293      	cmp	r3, r2
 8103dfc:	d11e      	bne.n	8103e3c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103dfe:	4b12      	ldr	r3, [pc, #72]	@ (8103e48 <HAL_TIM_MspPostInit+0xb8>)
 8103e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e04:	4a10      	ldr	r2, [pc, #64]	@ (8103e48 <HAL_TIM_MspPostInit+0xb8>)
 8103e06:	f043 0301 	orr.w	r3, r3, #1
 8103e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8103e48 <HAL_TIM_MspPostInit+0xb8>)
 8103e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e14:	f003 0301 	and.w	r3, r3, #1
 8103e18:	60fb      	str	r3, [r7, #12]
 8103e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8103e1c:	2340      	movs	r3, #64	@ 0x40
 8103e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103e20:	2302      	movs	r3, #2
 8103e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103e24:	2300      	movs	r3, #0
 8103e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103e28:	2300      	movs	r3, #0
 8103e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8103e2c:	2302      	movs	r3, #2
 8103e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103e30:	f107 0314 	add.w	r3, r7, #20
 8103e34:	4619      	mov	r1, r3
 8103e36:	4807      	ldr	r0, [pc, #28]	@ (8103e54 <HAL_TIM_MspPostInit+0xc4>)
 8103e38:	f002 fe74 	bl	8106b24 <HAL_GPIO_Init>
}
 8103e3c:	bf00      	nop
 8103e3e:	3728      	adds	r7, #40	@ 0x28
 8103e40:	46bd      	mov	sp, r7
 8103e42:	bd80      	pop	{r7, pc}
 8103e44:	40010000 	.word	0x40010000
 8103e48:	58024400 	.word	0x58024400
 8103e4c:	58021000 	.word	0x58021000
 8103e50:	40000400 	.word	0x40000400
 8103e54:	58020000 	.word	0x58020000

08103e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8103e58:	b580      	push	{r7, lr}
 8103e5a:	b0be      	sub	sp, #248	@ 0xf8
 8103e5c:	af00      	add	r7, sp, #0
 8103e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103e60:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103e64:	2200      	movs	r2, #0
 8103e66:	601a      	str	r2, [r3, #0]
 8103e68:	605a      	str	r2, [r3, #4]
 8103e6a:	609a      	str	r2, [r3, #8]
 8103e6c:	60da      	str	r2, [r3, #12]
 8103e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103e70:	f107 0320 	add.w	r3, r7, #32
 8103e74:	22c0      	movs	r2, #192	@ 0xc0
 8103e76:	2100      	movs	r1, #0
 8103e78:	4618      	mov	r0, r3
 8103e7a:	f00c f9e9 	bl	8110250 <memset>
  if(huart->Instance==USART2)
 8103e7e:	687b      	ldr	r3, [r7, #4]
 8103e80:	681b      	ldr	r3, [r3, #0]
 8103e82:	4a63      	ldr	r2, [pc, #396]	@ (8104010 <HAL_UART_MspInit+0x1b8>)
 8103e84:	4293      	cmp	r3, r2
 8103e86:	d172      	bne.n	8103f6e <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8103e88:	f04f 0202 	mov.w	r2, #2
 8103e8c:	f04f 0300 	mov.w	r3, #0
 8103e90:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103e94:	2300      	movs	r3, #0
 8103e96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103e9a:	f107 0320 	add.w	r3, r7, #32
 8103e9e:	4618      	mov	r0, r3
 8103ea0:	f004 f898 	bl	8107fd4 <HAL_RCCEx_PeriphCLKConfig>
 8103ea4:	4603      	mov	r3, r0
 8103ea6:	2b00      	cmp	r3, #0
 8103ea8:	d001      	beq.n	8103eae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8103eaa:	f7ff fd7f 	bl	81039ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8103eae:	4b59      	ldr	r3, [pc, #356]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103eb4:	4a57      	ldr	r2, [pc, #348]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103eba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103ebe:	4b55      	ldr	r3, [pc, #340]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103ec8:	61fb      	str	r3, [r7, #28]
 8103eca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103ecc:	4b51      	ldr	r3, [pc, #324]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103ed2:	4a50      	ldr	r2, [pc, #320]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103ed4:	f043 0301 	orr.w	r3, r3, #1
 8103ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103edc:	4b4d      	ldr	r3, [pc, #308]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103ee2:	f003 0301 	and.w	r3, r3, #1
 8103ee6:	61bb      	str	r3, [r7, #24]
 8103ee8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103eea:	4b4a      	ldr	r3, [pc, #296]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103ef0:	4a48      	ldr	r2, [pc, #288]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103ef2:	f043 0308 	orr.w	r3, r3, #8
 8103ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103efa:	4b46      	ldr	r3, [pc, #280]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103f00:	f003 0308 	and.w	r3, r3, #8
 8103f04:	617b      	str	r3, [r7, #20]
 8103f06:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8103f08:	2308      	movs	r3, #8
 8103f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103f0e:	2302      	movs	r3, #2
 8103f10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103f14:	2300      	movs	r3, #0
 8103f16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103f1a:	2300      	movs	r3, #0
 8103f1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8103f20:	2307      	movs	r3, #7
 8103f22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103f26:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103f2a:	4619      	mov	r1, r3
 8103f2c:	483a      	ldr	r0, [pc, #232]	@ (8104018 <HAL_UART_MspInit+0x1c0>)
 8103f2e:	f002 fdf9 	bl	8106b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8103f32:	2320      	movs	r3, #32
 8103f34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103f38:	2302      	movs	r3, #2
 8103f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103f3e:	2300      	movs	r3, #0
 8103f40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103f44:	2300      	movs	r3, #0
 8103f46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8103f4a:	2307      	movs	r3, #7
 8103f4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103f50:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103f54:	4619      	mov	r1, r3
 8103f56:	4831      	ldr	r0, [pc, #196]	@ (810401c <HAL_UART_MspInit+0x1c4>)
 8103f58:	f002 fde4 	bl	8106b24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8103f5c:	2200      	movs	r2, #0
 8103f5e:	2100      	movs	r1, #0
 8103f60:	2026      	movs	r0, #38	@ 0x26
 8103f62:	f002 f832 	bl	8105fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8103f66:	2026      	movs	r0, #38	@ 0x26
 8103f68:	f002 f849 	bl	8105ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8103f6c:	e04b      	b.n	8104006 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	4a2b      	ldr	r2, [pc, #172]	@ (8104020 <HAL_UART_MspInit+0x1c8>)
 8103f74:	4293      	cmp	r3, r2
 8103f76:	d146      	bne.n	8104006 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8103f78:	f04f 0202 	mov.w	r2, #2
 8103f7c:	f04f 0300 	mov.w	r3, #0
 8103f80:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103f84:	2300      	movs	r3, #0
 8103f86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103f8a:	f107 0320 	add.w	r3, r7, #32
 8103f8e:	4618      	mov	r0, r3
 8103f90:	f004 f820 	bl	8107fd4 <HAL_RCCEx_PeriphCLKConfig>
 8103f94:	4603      	mov	r3, r0
 8103f96:	2b00      	cmp	r3, #0
 8103f98:	d001      	beq.n	8103f9e <HAL_UART_MspInit+0x146>
      Error_Handler();
 8103f9a:	f7ff fd07 	bl	81039ac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8103f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103fa6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8103faa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103fae:	4b19      	ldr	r3, [pc, #100]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103fb8:	613b      	str	r3, [r7, #16]
 8103fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103fbc:	4b15      	ldr	r3, [pc, #84]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103fc2:	4a14      	ldr	r2, [pc, #80]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103fc4:	f043 0308 	orr.w	r3, r3, #8
 8103fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103fcc:	4b11      	ldr	r3, [pc, #68]	@ (8104014 <HAL_UART_MspInit+0x1bc>)
 8103fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103fd2:	f003 0308 	and.w	r3, r3, #8
 8103fd6:	60fb      	str	r3, [r7, #12]
 8103fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8103fda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8103fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103fe2:	2302      	movs	r3, #2
 8103fe4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103fe8:	2300      	movs	r3, #0
 8103fea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103fee:	2300      	movs	r3, #0
 8103ff0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103ff4:	2307      	movs	r3, #7
 8103ff6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103ffa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103ffe:	4619      	mov	r1, r3
 8104000:	4806      	ldr	r0, [pc, #24]	@ (810401c <HAL_UART_MspInit+0x1c4>)
 8104002:	f002 fd8f 	bl	8106b24 <HAL_GPIO_Init>
}
 8104006:	bf00      	nop
 8104008:	37f8      	adds	r7, #248	@ 0xf8
 810400a:	46bd      	mov	sp, r7
 810400c:	bd80      	pop	{r7, pc}
 810400e:	bf00      	nop
 8104010:	40004400 	.word	0x40004400
 8104014:	58024400 	.word	0x58024400
 8104018:	58020000 	.word	0x58020000
 810401c:	58020c00 	.word	0x58020c00
 8104020:	40004800 	.word	0x40004800

08104024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8104024:	b480      	push	{r7}
 8104026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8104028:	bf00      	nop
 810402a:	e7fd      	b.n	8104028 <NMI_Handler+0x4>

0810402c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810402c:	b480      	push	{r7}
 810402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8104030:	bf00      	nop
 8104032:	e7fd      	b.n	8104030 <HardFault_Handler+0x4>

08104034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8104034:	b480      	push	{r7}
 8104036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8104038:	bf00      	nop
 810403a:	e7fd      	b.n	8104038 <MemManage_Handler+0x4>

0810403c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810403c:	b480      	push	{r7}
 810403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8104040:	bf00      	nop
 8104042:	e7fd      	b.n	8104040 <BusFault_Handler+0x4>

08104044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8104044:	b480      	push	{r7}
 8104046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8104048:	bf00      	nop
 810404a:	e7fd      	b.n	8104048 <UsageFault_Handler+0x4>

0810404c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810404c:	b480      	push	{r7}
 810404e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8104050:	bf00      	nop
 8104052:	46bd      	mov	sp, r7
 8104054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104058:	4770      	bx	lr

0810405a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810405a:	b480      	push	{r7}
 810405c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810405e:	bf00      	nop
 8104060:	46bd      	mov	sp, r7
 8104062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104066:	4770      	bx	lr

08104068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8104068:	b480      	push	{r7}
 810406a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810406c:	bf00      	nop
 810406e:	46bd      	mov	sp, r7
 8104070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104074:	4770      	bx	lr

08104076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8104076:	b580      	push	{r7, lr}
 8104078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810407a:	f000 f993 	bl	81043a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810407e:	bf00      	nop
 8104080:	bd80      	pop	{r7, pc}
	...

08104084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8104084:	b580      	push	{r7, lr}
 8104086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8104088:	4802      	ldr	r0, [pc, #8]	@ (8104094 <TIM2_IRQHandler+0x10>)
 810408a:	f006 fff7 	bl	810b07c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810408e:	bf00      	nop
 8104090:	bd80      	pop	{r7, pc}
 8104092:	bf00      	nop
 8104094:	1000038c 	.word	0x1000038c

08104098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8104098:	b580      	push	{r7, lr}
 810409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 810409c:	4802      	ldr	r0, [pc, #8]	@ (81040a8 <USART2_IRQHandler+0x10>)
 810409e:	f008 fa83 	bl	810c5a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 81040a2:	bf00      	nop
 81040a4:	bd80      	pop	{r7, pc}
 81040a6:	bf00      	nop
 81040a8:	10000508 	.word	0x10000508

081040ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81040ac:	b580      	push	{r7, lr}
 81040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 81040b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 81040b4:	f002 feff 	bl	8106eb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81040b8:	bf00      	nop
 81040ba:	bd80      	pop	{r7, pc}

081040bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81040bc:	b580      	push	{r7, lr}
 81040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81040c0:	4802      	ldr	r0, [pc, #8]	@ (81040cc <TIM6_DAC_IRQHandler+0x10>)
 81040c2:	f006 ffdb 	bl	810b07c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81040c6:	bf00      	nop
 81040c8:	bd80      	pop	{r7, pc}
 81040ca:	bf00      	nop
 81040cc:	10000470 	.word	0x10000470

081040d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81040d0:	b480      	push	{r7}
 81040d2:	af00      	add	r7, sp, #0
  return 1;
 81040d4:	2301      	movs	r3, #1
}
 81040d6:	4618      	mov	r0, r3
 81040d8:	46bd      	mov	sp, r7
 81040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040de:	4770      	bx	lr

081040e0 <_kill>:

int _kill(int pid, int sig)
{
 81040e0:	b580      	push	{r7, lr}
 81040e2:	b082      	sub	sp, #8
 81040e4:	af00      	add	r7, sp, #0
 81040e6:	6078      	str	r0, [r7, #4]
 81040e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81040ea:	f00c f903 	bl	81102f4 <__errno>
 81040ee:	4603      	mov	r3, r0
 81040f0:	2216      	movs	r2, #22
 81040f2:	601a      	str	r2, [r3, #0]
  return -1;
 81040f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81040f8:	4618      	mov	r0, r3
 81040fa:	3708      	adds	r7, #8
 81040fc:	46bd      	mov	sp, r7
 81040fe:	bd80      	pop	{r7, pc}

08104100 <_exit>:

void _exit (int status)
{
 8104100:	b580      	push	{r7, lr}
 8104102:	b082      	sub	sp, #8
 8104104:	af00      	add	r7, sp, #0
 8104106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8104108:	f04f 31ff 	mov.w	r1, #4294967295
 810410c:	6878      	ldr	r0, [r7, #4]
 810410e:	f7ff ffe7 	bl	81040e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8104112:	bf00      	nop
 8104114:	e7fd      	b.n	8104112 <_exit+0x12>

08104116 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8104116:	b580      	push	{r7, lr}
 8104118:	b086      	sub	sp, #24
 810411a:	af00      	add	r7, sp, #0
 810411c:	60f8      	str	r0, [r7, #12]
 810411e:	60b9      	str	r1, [r7, #8]
 8104120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 8104122:	2301      	movs	r3, #1
 8104124:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104126:	2300      	movs	r3, #0
 8104128:	617b      	str	r3, [r7, #20]
 810412a:	e00a      	b.n	8104142 <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 810412c:	f7ff fb60 	bl	81037f0 <__io_getchar>
 8104130:	4601      	mov	r1, r0
 8104132:	68bb      	ldr	r3, [r7, #8]
 8104134:	1c5a      	adds	r2, r3, #1
 8104136:	60ba      	str	r2, [r7, #8]
 8104138:	b2ca      	uxtb	r2, r1
 810413a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810413c:	697b      	ldr	r3, [r7, #20]
 810413e:	3301      	adds	r3, #1
 8104140:	617b      	str	r3, [r7, #20]
 8104142:	697a      	ldr	r2, [r7, #20]
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	429a      	cmp	r2, r3
 8104148:	dbf0      	blt.n	810412c <_read+0x16>
  }

  return len;
 810414a:	687b      	ldr	r3, [r7, #4]
}
 810414c:	4618      	mov	r0, r3
 810414e:	3718      	adds	r7, #24
 8104150:	46bd      	mov	sp, r7
 8104152:	bd80      	pop	{r7, pc}

08104154 <_close>:
  }
  return len;
}

int _close(int file)
{
 8104154:	b480      	push	{r7}
 8104156:	b083      	sub	sp, #12
 8104158:	af00      	add	r7, sp, #0
 810415a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810415c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104160:	4618      	mov	r0, r3
 8104162:	370c      	adds	r7, #12
 8104164:	46bd      	mov	sp, r7
 8104166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810416a:	4770      	bx	lr

0810416c <_fstat>:


int _fstat(int file, struct stat *st)
{
 810416c:	b480      	push	{r7}
 810416e:	b083      	sub	sp, #12
 8104170:	af00      	add	r7, sp, #0
 8104172:	6078      	str	r0, [r7, #4]
 8104174:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8104176:	683b      	ldr	r3, [r7, #0]
 8104178:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 810417c:	605a      	str	r2, [r3, #4]
  return 0;
 810417e:	2300      	movs	r3, #0
}
 8104180:	4618      	mov	r0, r3
 8104182:	370c      	adds	r7, #12
 8104184:	46bd      	mov	sp, r7
 8104186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810418a:	4770      	bx	lr

0810418c <_isatty>:

int _isatty(int file)
{
 810418c:	b480      	push	{r7}
 810418e:	b083      	sub	sp, #12
 8104190:	af00      	add	r7, sp, #0
 8104192:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8104194:	2301      	movs	r3, #1
}
 8104196:	4618      	mov	r0, r3
 8104198:	370c      	adds	r7, #12
 810419a:	46bd      	mov	sp, r7
 810419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041a0:	4770      	bx	lr

081041a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81041a2:	b480      	push	{r7}
 81041a4:	b085      	sub	sp, #20
 81041a6:	af00      	add	r7, sp, #0
 81041a8:	60f8      	str	r0, [r7, #12]
 81041aa:	60b9      	str	r1, [r7, #8]
 81041ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81041ae:	2300      	movs	r3, #0
}
 81041b0:	4618      	mov	r0, r3
 81041b2:	3714      	adds	r7, #20
 81041b4:	46bd      	mov	sp, r7
 81041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041ba:	4770      	bx	lr

081041bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81041bc:	b580      	push	{r7, lr}
 81041be:	b086      	sub	sp, #24
 81041c0:	af00      	add	r7, sp, #0
 81041c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81041c4:	4a14      	ldr	r2, [pc, #80]	@ (8104218 <_sbrk+0x5c>)
 81041c6:	4b15      	ldr	r3, [pc, #84]	@ (810421c <_sbrk+0x60>)
 81041c8:	1ad3      	subs	r3, r2, r3
 81041ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81041cc:	697b      	ldr	r3, [r7, #20]
 81041ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81041d0:	4b13      	ldr	r3, [pc, #76]	@ (8104220 <_sbrk+0x64>)
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	2b00      	cmp	r3, #0
 81041d6:	d102      	bne.n	81041de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81041d8:	4b11      	ldr	r3, [pc, #68]	@ (8104220 <_sbrk+0x64>)
 81041da:	4a12      	ldr	r2, [pc, #72]	@ (8104224 <_sbrk+0x68>)
 81041dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81041de:	4b10      	ldr	r3, [pc, #64]	@ (8104220 <_sbrk+0x64>)
 81041e0:	681a      	ldr	r2, [r3, #0]
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	4413      	add	r3, r2
 81041e6:	693a      	ldr	r2, [r7, #16]
 81041e8:	429a      	cmp	r2, r3
 81041ea:	d207      	bcs.n	81041fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 81041ec:	f00c f882 	bl	81102f4 <__errno>
 81041f0:	4603      	mov	r3, r0
 81041f2:	220c      	movs	r2, #12
 81041f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81041f6:	f04f 33ff 	mov.w	r3, #4294967295
 81041fa:	e009      	b.n	8104210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81041fc:	4b08      	ldr	r3, [pc, #32]	@ (8104220 <_sbrk+0x64>)
 81041fe:	681b      	ldr	r3, [r3, #0]
 8104200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8104202:	4b07      	ldr	r3, [pc, #28]	@ (8104220 <_sbrk+0x64>)
 8104204:	681a      	ldr	r2, [r3, #0]
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	4413      	add	r3, r2
 810420a:	4a05      	ldr	r2, [pc, #20]	@ (8104220 <_sbrk+0x64>)
 810420c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810420e:	68fb      	ldr	r3, [r7, #12]
}
 8104210:	4618      	mov	r0, r3
 8104212:	3718      	adds	r7, #24
 8104214:	46bd      	mov	sp, r7
 8104216:	bd80      	pop	{r7, pc}
 8104218:	10048000 	.word	0x10048000
 810421c:	00000400 	.word	0x00000400
 8104220:	10008b34 	.word	0x10008b34
 8104224:	10008c88 	.word	0x10008c88

08104228 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 8104228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8104260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810422c:	f7fc ff62 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104230:	480c      	ldr	r0, [pc, #48]	@ (8104264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104232:	490d      	ldr	r1, [pc, #52]	@ (8104268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104234:	4a0d      	ldr	r2, [pc, #52]	@ (810426c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8104236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104238:	e002      	b.n	8104240 <LoopCopyDataInit>

0810423a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810423a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810423c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810423e:	3304      	adds	r3, #4

08104240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8104242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104244:	d3f9      	bcc.n	810423a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8104246:	4a0a      	ldr	r2, [pc, #40]	@ (8104270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104248:	4c0a      	ldr	r4, [pc, #40]	@ (8104274 <LoopFillZerobss+0x22>)
  movs r3, #0
 810424a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810424c:	e001      	b.n	8104252 <LoopFillZerobss>

0810424e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810424e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104250:	3204      	adds	r2, #4

08104252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8104252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104254:	d3fb      	bcc.n	810424e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104256:	f00c f853 	bl	8110300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810425a:	f7fd fee5 	bl	8102028 <main>
  bx  lr
 810425e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104260:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104264:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104268:	10000268 	.word	0x10000268
  ldr r2, =_sidata
 810426c:	08113e1c 	.word	0x08113e1c
  ldr r2, =_sbss
 8104270:	10000268 	.word	0x10000268
  ldr r4, =_ebss
 8104274:	10008c88 	.word	0x10008c88

08104278 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104278:	e7fe      	b.n	8104278 <ADC3_IRQHandler>
	...

0810427c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810427c:	b580      	push	{r7, lr}
 810427e:	b082      	sub	sp, #8
 8104280:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8104282:	4b28      	ldr	r3, [pc, #160]	@ (8104324 <HAL_Init+0xa8>)
 8104284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104288:	4a26      	ldr	r2, [pc, #152]	@ (8104324 <HAL_Init+0xa8>)
 810428a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810428e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104292:	4b24      	ldr	r3, [pc, #144]	@ (8104324 <HAL_Init+0xa8>)
 8104294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810429c:	603b      	str	r3, [r7, #0]
 810429e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81042a0:	4b21      	ldr	r3, [pc, #132]	@ (8104328 <HAL_Init+0xac>)
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81042a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81042ac:	4a1e      	ldr	r2, [pc, #120]	@ (8104328 <HAL_Init+0xac>)
 81042ae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81042b2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81042b4:	4b1c      	ldr	r3, [pc, #112]	@ (8104328 <HAL_Init+0xac>)
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	4a1b      	ldr	r2, [pc, #108]	@ (8104328 <HAL_Init+0xac>)
 81042ba:	f043 0301 	orr.w	r3, r3, #1
 81042be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81042c0:	2003      	movs	r0, #3
 81042c2:	f001 fe77 	bl	8105fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81042c6:	f003 fcad 	bl	8107c24 <HAL_RCC_GetSysClockFreq>
 81042ca:	4602      	mov	r2, r0
 81042cc:	4b15      	ldr	r3, [pc, #84]	@ (8104324 <HAL_Init+0xa8>)
 81042ce:	699b      	ldr	r3, [r3, #24]
 81042d0:	0a1b      	lsrs	r3, r3, #8
 81042d2:	f003 030f 	and.w	r3, r3, #15
 81042d6:	4915      	ldr	r1, [pc, #84]	@ (810432c <HAL_Init+0xb0>)
 81042d8:	5ccb      	ldrb	r3, [r1, r3]
 81042da:	f003 031f 	and.w	r3, r3, #31
 81042de:	fa22 f303 	lsr.w	r3, r2, r3
 81042e2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81042e4:	4b0f      	ldr	r3, [pc, #60]	@ (8104324 <HAL_Init+0xa8>)
 81042e6:	699b      	ldr	r3, [r3, #24]
 81042e8:	f003 030f 	and.w	r3, r3, #15
 81042ec:	4a0f      	ldr	r2, [pc, #60]	@ (810432c <HAL_Init+0xb0>)
 81042ee:	5cd3      	ldrb	r3, [r2, r3]
 81042f0:	f003 031f 	and.w	r3, r3, #31
 81042f4:	687a      	ldr	r2, [r7, #4]
 81042f6:	fa22 f303 	lsr.w	r3, r2, r3
 81042fa:	4a0d      	ldr	r2, [pc, #52]	@ (8104330 <HAL_Init+0xb4>)
 81042fc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81042fe:	4b0c      	ldr	r3, [pc, #48]	@ (8104330 <HAL_Init+0xb4>)
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	4a0c      	ldr	r2, [pc, #48]	@ (8104334 <HAL_Init+0xb8>)
 8104304:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8104306:	2000      	movs	r0, #0
 8104308:	f000 f816 	bl	8104338 <HAL_InitTick>
 810430c:	4603      	mov	r3, r0
 810430e:	2b00      	cmp	r3, #0
 8104310:	d001      	beq.n	8104316 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8104312:	2301      	movs	r3, #1
 8104314:	e002      	b.n	810431c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8104316:	f7ff fb4f 	bl	81039b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810431a:	2300      	movs	r3, #0
}
 810431c:	4618      	mov	r0, r3
 810431e:	3708      	adds	r7, #8
 8104320:	46bd      	mov	sp, r7
 8104322:	bd80      	pop	{r7, pc}
 8104324:	58024400 	.word	0x58024400
 8104328:	40024400 	.word	0x40024400
 810432c:	08113950 	.word	0x08113950
 8104330:	10000004 	.word	0x10000004
 8104334:	10000000 	.word	0x10000000

08104338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104338:	b580      	push	{r7, lr}
 810433a:	b082      	sub	sp, #8
 810433c:	af00      	add	r7, sp, #0
 810433e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104340:	4b15      	ldr	r3, [pc, #84]	@ (8104398 <HAL_InitTick+0x60>)
 8104342:	781b      	ldrb	r3, [r3, #0]
 8104344:	2b00      	cmp	r3, #0
 8104346:	d101      	bne.n	810434c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8104348:	2301      	movs	r3, #1
 810434a:	e021      	b.n	8104390 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810434c:	4b13      	ldr	r3, [pc, #76]	@ (810439c <HAL_InitTick+0x64>)
 810434e:	681a      	ldr	r2, [r3, #0]
 8104350:	4b11      	ldr	r3, [pc, #68]	@ (8104398 <HAL_InitTick+0x60>)
 8104352:	781b      	ldrb	r3, [r3, #0]
 8104354:	4619      	mov	r1, r3
 8104356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810435a:	fbb3 f3f1 	udiv	r3, r3, r1
 810435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8104362:	4618      	mov	r0, r3
 8104364:	f001 fe59 	bl	810601a <HAL_SYSTICK_Config>
 8104368:	4603      	mov	r3, r0
 810436a:	2b00      	cmp	r3, #0
 810436c:	d001      	beq.n	8104372 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810436e:	2301      	movs	r3, #1
 8104370:	e00e      	b.n	8104390 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	2b0f      	cmp	r3, #15
 8104376:	d80a      	bhi.n	810438e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8104378:	2200      	movs	r2, #0
 810437a:	6879      	ldr	r1, [r7, #4]
 810437c:	f04f 30ff 	mov.w	r0, #4294967295
 8104380:	f001 fe23 	bl	8105fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8104384:	4a06      	ldr	r2, [pc, #24]	@ (81043a0 <HAL_InitTick+0x68>)
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810438a:	2300      	movs	r3, #0
 810438c:	e000      	b.n	8104390 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810438e:	2301      	movs	r3, #1
}
 8104390:	4618      	mov	r0, r3
 8104392:	3708      	adds	r7, #8
 8104394:	46bd      	mov	sp, r7
 8104396:	bd80      	pop	{r7, pc}
 8104398:	1000009c 	.word	0x1000009c
 810439c:	10000000 	.word	0x10000000
 81043a0:	10000098 	.word	0x10000098

081043a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81043a4:	b480      	push	{r7}
 81043a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81043a8:	4b06      	ldr	r3, [pc, #24]	@ (81043c4 <HAL_IncTick+0x20>)
 81043aa:	781b      	ldrb	r3, [r3, #0]
 81043ac:	461a      	mov	r2, r3
 81043ae:	4b06      	ldr	r3, [pc, #24]	@ (81043c8 <HAL_IncTick+0x24>)
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	4413      	add	r3, r2
 81043b4:	4a04      	ldr	r2, [pc, #16]	@ (81043c8 <HAL_IncTick+0x24>)
 81043b6:	6013      	str	r3, [r2, #0]
}
 81043b8:	bf00      	nop
 81043ba:	46bd      	mov	sp, r7
 81043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043c0:	4770      	bx	lr
 81043c2:	bf00      	nop
 81043c4:	1000009c 	.word	0x1000009c
 81043c8:	10008b38 	.word	0x10008b38

081043cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81043cc:	b480      	push	{r7}
 81043ce:	af00      	add	r7, sp, #0
  return uwTick;
 81043d0:	4b03      	ldr	r3, [pc, #12]	@ (81043e0 <HAL_GetTick+0x14>)
 81043d2:	681b      	ldr	r3, [r3, #0]
}
 81043d4:	4618      	mov	r0, r3
 81043d6:	46bd      	mov	sp, r7
 81043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043dc:	4770      	bx	lr
 81043de:	bf00      	nop
 81043e0:	10008b38 	.word	0x10008b38

081043e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81043e4:	b580      	push	{r7, lr}
 81043e6:	b084      	sub	sp, #16
 81043e8:	af00      	add	r7, sp, #0
 81043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81043ec:	f7ff ffee 	bl	81043cc <HAL_GetTick>
 81043f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81043f6:	68fb      	ldr	r3, [r7, #12]
 81043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81043fc:	d005      	beq.n	810440a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81043fe:	4b0a      	ldr	r3, [pc, #40]	@ (8104428 <HAL_Delay+0x44>)
 8104400:	781b      	ldrb	r3, [r3, #0]
 8104402:	461a      	mov	r2, r3
 8104404:	68fb      	ldr	r3, [r7, #12]
 8104406:	4413      	add	r3, r2
 8104408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810440a:	bf00      	nop
 810440c:	f7ff ffde 	bl	81043cc <HAL_GetTick>
 8104410:	4602      	mov	r2, r0
 8104412:	68bb      	ldr	r3, [r7, #8]
 8104414:	1ad3      	subs	r3, r2, r3
 8104416:	68fa      	ldr	r2, [r7, #12]
 8104418:	429a      	cmp	r2, r3
 810441a:	d8f7      	bhi.n	810440c <HAL_Delay+0x28>
  {
  }
}
 810441c:	bf00      	nop
 810441e:	bf00      	nop
 8104420:	3710      	adds	r7, #16
 8104422:	46bd      	mov	sp, r7
 8104424:	bd80      	pop	{r7, pc}
 8104426:	bf00      	nop
 8104428:	1000009c 	.word	0x1000009c

0810442c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810442c:	b480      	push	{r7}
 810442e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8104430:	4b03      	ldr	r3, [pc, #12]	@ (8104440 <HAL_GetREVID+0x14>)
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	0c1b      	lsrs	r3, r3, #16
}
 8104436:	4618      	mov	r0, r3
 8104438:	46bd      	mov	sp, r7
 810443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810443e:	4770      	bx	lr
 8104440:	5c001000 	.word	0x5c001000

08104444 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8104444:	b480      	push	{r7}
 8104446:	b083      	sub	sp, #12
 8104448:	af00      	add	r7, sp, #0
 810444a:	6078      	str	r0, [r7, #4]
 810444c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 810444e:	687b      	ldr	r3, [r7, #4]
 8104450:	689b      	ldr	r3, [r3, #8]
 8104452:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8104456:	683b      	ldr	r3, [r7, #0]
 8104458:	431a      	orrs	r2, r3
 810445a:	687b      	ldr	r3, [r7, #4]
 810445c:	609a      	str	r2, [r3, #8]
}
 810445e:	bf00      	nop
 8104460:	370c      	adds	r7, #12
 8104462:	46bd      	mov	sp, r7
 8104464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104468:	4770      	bx	lr

0810446a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810446a:	b480      	push	{r7}
 810446c:	b083      	sub	sp, #12
 810446e:	af00      	add	r7, sp, #0
 8104470:	6078      	str	r0, [r7, #4]
 8104472:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	689b      	ldr	r3, [r3, #8]
 8104478:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 810447c:	683b      	ldr	r3, [r7, #0]
 810447e:	431a      	orrs	r2, r3
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	609a      	str	r2, [r3, #8]
}
 8104484:	bf00      	nop
 8104486:	370c      	adds	r7, #12
 8104488:	46bd      	mov	sp, r7
 810448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810448e:	4770      	bx	lr

08104490 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8104490:	b480      	push	{r7}
 8104492:	b083      	sub	sp, #12
 8104494:	af00      	add	r7, sp, #0
 8104496:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	689b      	ldr	r3, [r3, #8]
 810449c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 81044a0:	4618      	mov	r0, r3
 81044a2:	370c      	adds	r7, #12
 81044a4:	46bd      	mov	sp, r7
 81044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044aa:	4770      	bx	lr

081044ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 81044ac:	b480      	push	{r7}
 81044ae:	b087      	sub	sp, #28
 81044b0:	af00      	add	r7, sp, #0
 81044b2:	60f8      	str	r0, [r7, #12]
 81044b4:	60b9      	str	r1, [r7, #8]
 81044b6:	607a      	str	r2, [r7, #4]
 81044b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	3360      	adds	r3, #96	@ 0x60
 81044be:	461a      	mov	r2, r3
 81044c0:	68bb      	ldr	r3, [r7, #8]
 81044c2:	009b      	lsls	r3, r3, #2
 81044c4:	4413      	add	r3, r2
 81044c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 81044c8:	697b      	ldr	r3, [r7, #20]
 81044ca:	681b      	ldr	r3, [r3, #0]
 81044cc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 81044d6:	683b      	ldr	r3, [r7, #0]
 81044d8:	430b      	orrs	r3, r1
 81044da:	431a      	orrs	r2, r3
 81044dc:	697b      	ldr	r3, [r7, #20]
 81044de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 81044e0:	bf00      	nop
 81044e2:	371c      	adds	r7, #28
 81044e4:	46bd      	mov	sp, r7
 81044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ea:	4770      	bx	lr

081044ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 81044ec:	b480      	push	{r7}
 81044ee:	b085      	sub	sp, #20
 81044f0:	af00      	add	r7, sp, #0
 81044f2:	60f8      	str	r0, [r7, #12]
 81044f4:	60b9      	str	r1, [r7, #8]
 81044f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	691b      	ldr	r3, [r3, #16]
 81044fc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8104500:	68bb      	ldr	r3, [r7, #8]
 8104502:	f003 031f 	and.w	r3, r3, #31
 8104506:	6879      	ldr	r1, [r7, #4]
 8104508:	fa01 f303 	lsl.w	r3, r1, r3
 810450c:	431a      	orrs	r2, r3
 810450e:	68fb      	ldr	r3, [r7, #12]
 8104510:	611a      	str	r2, [r3, #16]
}
 8104512:	bf00      	nop
 8104514:	3714      	adds	r7, #20
 8104516:	46bd      	mov	sp, r7
 8104518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810451c:	4770      	bx	lr

0810451e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810451e:	b480      	push	{r7}
 8104520:	b087      	sub	sp, #28
 8104522:	af00      	add	r7, sp, #0
 8104524:	60f8      	str	r0, [r7, #12]
 8104526:	60b9      	str	r1, [r7, #8]
 8104528:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	3360      	adds	r3, #96	@ 0x60
 810452e:	461a      	mov	r2, r3
 8104530:	68bb      	ldr	r3, [r7, #8]
 8104532:	009b      	lsls	r3, r3, #2
 8104534:	4413      	add	r3, r2
 8104536:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8104538:	697b      	ldr	r3, [r7, #20]
 810453a:	681b      	ldr	r3, [r3, #0]
 810453c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	431a      	orrs	r2, r3
 8104544:	697b      	ldr	r3, [r7, #20]
 8104546:	601a      	str	r2, [r3, #0]
  }
}
 8104548:	bf00      	nop
 810454a:	371c      	adds	r7, #28
 810454c:	46bd      	mov	sp, r7
 810454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104552:	4770      	bx	lr

08104554 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8104554:	b480      	push	{r7}
 8104556:	b083      	sub	sp, #12
 8104558:	af00      	add	r7, sp, #0
 810455a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	68db      	ldr	r3, [r3, #12]
 8104560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8104564:	2b00      	cmp	r3, #0
 8104566:	d101      	bne.n	810456c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8104568:	2301      	movs	r3, #1
 810456a:	e000      	b.n	810456e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 810456c:	2300      	movs	r3, #0
}
 810456e:	4618      	mov	r0, r3
 8104570:	370c      	adds	r7, #12
 8104572:	46bd      	mov	sp, r7
 8104574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104578:	4770      	bx	lr

0810457a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 810457a:	b480      	push	{r7}
 810457c:	b087      	sub	sp, #28
 810457e:	af00      	add	r7, sp, #0
 8104580:	60f8      	str	r0, [r7, #12]
 8104582:	60b9      	str	r1, [r7, #8]
 8104584:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8104586:	68fb      	ldr	r3, [r7, #12]
 8104588:	3330      	adds	r3, #48	@ 0x30
 810458a:	461a      	mov	r2, r3
 810458c:	68bb      	ldr	r3, [r7, #8]
 810458e:	0a1b      	lsrs	r3, r3, #8
 8104590:	009b      	lsls	r3, r3, #2
 8104592:	f003 030c 	and.w	r3, r3, #12
 8104596:	4413      	add	r3, r2
 8104598:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810459a:	697b      	ldr	r3, [r7, #20]
 810459c:	681a      	ldr	r2, [r3, #0]
 810459e:	68bb      	ldr	r3, [r7, #8]
 81045a0:	f003 031f 	and.w	r3, r3, #31
 81045a4:	211f      	movs	r1, #31
 81045a6:	fa01 f303 	lsl.w	r3, r1, r3
 81045aa:	43db      	mvns	r3, r3
 81045ac:	401a      	ands	r2, r3
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	0e9b      	lsrs	r3, r3, #26
 81045b2:	f003 011f 	and.w	r1, r3, #31
 81045b6:	68bb      	ldr	r3, [r7, #8]
 81045b8:	f003 031f 	and.w	r3, r3, #31
 81045bc:	fa01 f303 	lsl.w	r3, r1, r3
 81045c0:	431a      	orrs	r2, r3
 81045c2:	697b      	ldr	r3, [r7, #20]
 81045c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 81045c6:	bf00      	nop
 81045c8:	371c      	adds	r7, #28
 81045ca:	46bd      	mov	sp, r7
 81045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045d0:	4770      	bx	lr

081045d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 81045d2:	b480      	push	{r7}
 81045d4:	b087      	sub	sp, #28
 81045d6:	af00      	add	r7, sp, #0
 81045d8:	60f8      	str	r0, [r7, #12]
 81045da:	60b9      	str	r1, [r7, #8]
 81045dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81045de:	68fb      	ldr	r3, [r7, #12]
 81045e0:	3314      	adds	r3, #20
 81045e2:	461a      	mov	r2, r3
 81045e4:	68bb      	ldr	r3, [r7, #8]
 81045e6:	0e5b      	lsrs	r3, r3, #25
 81045e8:	009b      	lsls	r3, r3, #2
 81045ea:	f003 0304 	and.w	r3, r3, #4
 81045ee:	4413      	add	r3, r2
 81045f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81045f2:	697b      	ldr	r3, [r7, #20]
 81045f4:	681a      	ldr	r2, [r3, #0]
 81045f6:	68bb      	ldr	r3, [r7, #8]
 81045f8:	0d1b      	lsrs	r3, r3, #20
 81045fa:	f003 031f 	and.w	r3, r3, #31
 81045fe:	2107      	movs	r1, #7
 8104600:	fa01 f303 	lsl.w	r3, r1, r3
 8104604:	43db      	mvns	r3, r3
 8104606:	401a      	ands	r2, r3
 8104608:	68bb      	ldr	r3, [r7, #8]
 810460a:	0d1b      	lsrs	r3, r3, #20
 810460c:	f003 031f 	and.w	r3, r3, #31
 8104610:	6879      	ldr	r1, [r7, #4]
 8104612:	fa01 f303 	lsl.w	r3, r1, r3
 8104616:	431a      	orrs	r2, r3
 8104618:	697b      	ldr	r3, [r7, #20]
 810461a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810461c:	bf00      	nop
 810461e:	371c      	adds	r7, #28
 8104620:	46bd      	mov	sp, r7
 8104622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104626:	4770      	bx	lr

08104628 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8104628:	b480      	push	{r7}
 810462a:	b085      	sub	sp, #20
 810462c:	af00      	add	r7, sp, #0
 810462e:	60f8      	str	r0, [r7, #12]
 8104630:	60b9      	str	r1, [r7, #8]
 8104632:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8104634:	68fb      	ldr	r3, [r7, #12]
 8104636:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 810463a:	68bb      	ldr	r3, [r7, #8]
 810463c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104640:	43db      	mvns	r3, r3
 8104642:	401a      	ands	r2, r3
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	f003 0318 	and.w	r3, r3, #24
 810464a:	4908      	ldr	r1, [pc, #32]	@ (810466c <LL_ADC_SetChannelSingleDiff+0x44>)
 810464c:	40d9      	lsrs	r1, r3
 810464e:	68bb      	ldr	r3, [r7, #8]
 8104650:	400b      	ands	r3, r1
 8104652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104656:	431a      	orrs	r2, r3
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 810465e:	bf00      	nop
 8104660:	3714      	adds	r7, #20
 8104662:	46bd      	mov	sp, r7
 8104664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104668:	4770      	bx	lr
 810466a:	bf00      	nop
 810466c:	000fffff 	.word	0x000fffff

08104670 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8104670:	b480      	push	{r7}
 8104672:	b083      	sub	sp, #12
 8104674:	af00      	add	r7, sp, #0
 8104676:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	689b      	ldr	r3, [r3, #8]
 810467c:	f003 031f 	and.w	r3, r3, #31
}
 8104680:	4618      	mov	r0, r3
 8104682:	370c      	adds	r7, #12
 8104684:	46bd      	mov	sp, r7
 8104686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810468a:	4770      	bx	lr

0810468c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 810468c:	b480      	push	{r7}
 810468e:	b083      	sub	sp, #12
 8104690:	af00      	add	r7, sp, #0
 8104692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	689b      	ldr	r3, [r3, #8]
 8104698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 810469c:	4618      	mov	r0, r3
 810469e:	370c      	adds	r7, #12
 81046a0:	46bd      	mov	sp, r7
 81046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046a6:	4770      	bx	lr

081046a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81046a8:	b480      	push	{r7}
 81046aa:	b083      	sub	sp, #12
 81046ac:	af00      	add	r7, sp, #0
 81046ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	689b      	ldr	r3, [r3, #8]
 81046b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 81046b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81046bc:	687a      	ldr	r2, [r7, #4]
 81046be:	6093      	str	r3, [r2, #8]
}
 81046c0:	bf00      	nop
 81046c2:	370c      	adds	r7, #12
 81046c4:	46bd      	mov	sp, r7
 81046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046ca:	4770      	bx	lr

081046cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81046cc:	b480      	push	{r7}
 81046ce:	b083      	sub	sp, #12
 81046d0:	af00      	add	r7, sp, #0
 81046d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	689b      	ldr	r3, [r3, #8]
 81046d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81046dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81046e0:	d101      	bne.n	81046e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81046e2:	2301      	movs	r3, #1
 81046e4:	e000      	b.n	81046e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81046e6:	2300      	movs	r3, #0
}
 81046e8:	4618      	mov	r0, r3
 81046ea:	370c      	adds	r7, #12
 81046ec:	46bd      	mov	sp, r7
 81046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046f2:	4770      	bx	lr

081046f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81046f4:	b480      	push	{r7}
 81046f6:	b083      	sub	sp, #12
 81046f8:	af00      	add	r7, sp, #0
 81046fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	689b      	ldr	r3, [r3, #8]
 8104700:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8104704:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104708:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810470c:	687b      	ldr	r3, [r7, #4]
 810470e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8104710:	bf00      	nop
 8104712:	370c      	adds	r7, #12
 8104714:	46bd      	mov	sp, r7
 8104716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810471a:	4770      	bx	lr

0810471c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 810471c:	b480      	push	{r7}
 810471e:	b083      	sub	sp, #12
 8104720:	af00      	add	r7, sp, #0
 8104722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	689b      	ldr	r3, [r3, #8]
 8104728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810472c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104730:	d101      	bne.n	8104736 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8104732:	2301      	movs	r3, #1
 8104734:	e000      	b.n	8104738 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8104736:	2300      	movs	r3, #0
}
 8104738:	4618      	mov	r0, r3
 810473a:	370c      	adds	r7, #12
 810473c:	46bd      	mov	sp, r7
 810473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104742:	4770      	bx	lr

08104744 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8104744:	b480      	push	{r7}
 8104746:	b083      	sub	sp, #12
 8104748:	af00      	add	r7, sp, #0
 810474a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	689b      	ldr	r3, [r3, #8]
 8104750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104754:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104758:	f043 0201 	orr.w	r2, r3, #1
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8104760:	bf00      	nop
 8104762:	370c      	adds	r7, #12
 8104764:	46bd      	mov	sp, r7
 8104766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810476a:	4770      	bx	lr

0810476c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 810476c:	b480      	push	{r7}
 810476e:	b083      	sub	sp, #12
 8104770:	af00      	add	r7, sp, #0
 8104772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	689b      	ldr	r3, [r3, #8]
 8104778:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810477c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104780:	f043 0202 	orr.w	r2, r3, #2
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8104788:	bf00      	nop
 810478a:	370c      	adds	r7, #12
 810478c:	46bd      	mov	sp, r7
 810478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104792:	4770      	bx	lr

08104794 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8104794:	b480      	push	{r7}
 8104796:	b083      	sub	sp, #12
 8104798:	af00      	add	r7, sp, #0
 810479a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	689b      	ldr	r3, [r3, #8]
 81047a0:	f003 0301 	and.w	r3, r3, #1
 81047a4:	2b01      	cmp	r3, #1
 81047a6:	d101      	bne.n	81047ac <LL_ADC_IsEnabled+0x18>
 81047a8:	2301      	movs	r3, #1
 81047aa:	e000      	b.n	81047ae <LL_ADC_IsEnabled+0x1a>
 81047ac:	2300      	movs	r3, #0
}
 81047ae:	4618      	mov	r0, r3
 81047b0:	370c      	adds	r7, #12
 81047b2:	46bd      	mov	sp, r7
 81047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047b8:	4770      	bx	lr

081047ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 81047ba:	b480      	push	{r7}
 81047bc:	b083      	sub	sp, #12
 81047be:	af00      	add	r7, sp, #0
 81047c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	689b      	ldr	r3, [r3, #8]
 81047c6:	f003 0302 	and.w	r3, r3, #2
 81047ca:	2b02      	cmp	r3, #2
 81047cc:	d101      	bne.n	81047d2 <LL_ADC_IsDisableOngoing+0x18>
 81047ce:	2301      	movs	r3, #1
 81047d0:	e000      	b.n	81047d4 <LL_ADC_IsDisableOngoing+0x1a>
 81047d2:	2300      	movs	r3, #0
}
 81047d4:	4618      	mov	r0, r3
 81047d6:	370c      	adds	r7, #12
 81047d8:	46bd      	mov	sp, r7
 81047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047de:	4770      	bx	lr

081047e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 81047e0:	b480      	push	{r7}
 81047e2:	b083      	sub	sp, #12
 81047e4:	af00      	add	r7, sp, #0
 81047e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	689b      	ldr	r3, [r3, #8]
 81047ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81047f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81047f4:	f043 0204 	orr.w	r2, r3, #4
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 81047fc:	bf00      	nop
 81047fe:	370c      	adds	r7, #12
 8104800:	46bd      	mov	sp, r7
 8104802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104806:	4770      	bx	lr

08104808 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8104808:	b480      	push	{r7}
 810480a:	b083      	sub	sp, #12
 810480c:	af00      	add	r7, sp, #0
 810480e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	689b      	ldr	r3, [r3, #8]
 8104814:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810481c:	f043 0210 	orr.w	r2, r3, #16
 8104820:	687b      	ldr	r3, [r7, #4]
 8104822:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8104824:	bf00      	nop
 8104826:	370c      	adds	r7, #12
 8104828:	46bd      	mov	sp, r7
 810482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810482e:	4770      	bx	lr

08104830 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8104830:	b480      	push	{r7}
 8104832:	b083      	sub	sp, #12
 8104834:	af00      	add	r7, sp, #0
 8104836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	689b      	ldr	r3, [r3, #8]
 810483c:	f003 0304 	and.w	r3, r3, #4
 8104840:	2b04      	cmp	r3, #4
 8104842:	d101      	bne.n	8104848 <LL_ADC_REG_IsConversionOngoing+0x18>
 8104844:	2301      	movs	r3, #1
 8104846:	e000      	b.n	810484a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8104848:	2300      	movs	r3, #0
}
 810484a:	4618      	mov	r0, r3
 810484c:	370c      	adds	r7, #12
 810484e:	46bd      	mov	sp, r7
 8104850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104854:	4770      	bx	lr

08104856 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8104856:	b480      	push	{r7}
 8104858:	b083      	sub	sp, #12
 810485a:	af00      	add	r7, sp, #0
 810485c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	689b      	ldr	r3, [r3, #8]
 8104862:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104866:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810486a:	f043 0220 	orr.w	r2, r3, #32
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8104872:	bf00      	nop
 8104874:	370c      	adds	r7, #12
 8104876:	46bd      	mov	sp, r7
 8104878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810487c:	4770      	bx	lr

0810487e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810487e:	b480      	push	{r7}
 8104880:	b083      	sub	sp, #12
 8104882:	af00      	add	r7, sp, #0
 8104884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	689b      	ldr	r3, [r3, #8]
 810488a:	f003 0308 	and.w	r3, r3, #8
 810488e:	2b08      	cmp	r3, #8
 8104890:	d101      	bne.n	8104896 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8104892:	2301      	movs	r3, #1
 8104894:	e000      	b.n	8104898 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8104896:	2300      	movs	r3, #0
}
 8104898:	4618      	mov	r0, r3
 810489a:	370c      	adds	r7, #12
 810489c:	46bd      	mov	sp, r7
 810489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048a2:	4770      	bx	lr

081048a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81048a4:	b590      	push	{r4, r7, lr}
 81048a6:	b089      	sub	sp, #36	@ 0x24
 81048a8:	af00      	add	r7, sp, #0
 81048aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81048ac:	2300      	movs	r3, #0
 81048ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81048b0:	2300      	movs	r3, #0
 81048b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	2b00      	cmp	r3, #0
 81048b8:	d101      	bne.n	81048be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81048ba:	2301      	movs	r3, #1
 81048bc:	e18f      	b.n	8104bde <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	68db      	ldr	r3, [r3, #12]
 81048c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81048c8:	2b00      	cmp	r3, #0
 81048ca:	d109      	bne.n	81048e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81048cc:	6878      	ldr	r0, [r7, #4]
 81048ce:	f7ff f88d 	bl	81039ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	2200      	movs	r2, #0
 81048d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	2200      	movs	r2, #0
 81048dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	681b      	ldr	r3, [r3, #0]
 81048e4:	4618      	mov	r0, r3
 81048e6:	f7ff fef1 	bl	81046cc <LL_ADC_IsDeepPowerDownEnabled>
 81048ea:	4603      	mov	r3, r0
 81048ec:	2b00      	cmp	r3, #0
 81048ee:	d004      	beq.n	81048fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	681b      	ldr	r3, [r3, #0]
 81048f4:	4618      	mov	r0, r3
 81048f6:	f7ff fed7 	bl	81046a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	681b      	ldr	r3, [r3, #0]
 81048fe:	4618      	mov	r0, r3
 8104900:	f7ff ff0c 	bl	810471c <LL_ADC_IsInternalRegulatorEnabled>
 8104904:	4603      	mov	r3, r0
 8104906:	2b00      	cmp	r3, #0
 8104908:	d114      	bne.n	8104934 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	681b      	ldr	r3, [r3, #0]
 810490e:	4618      	mov	r0, r3
 8104910:	f7ff fef0 	bl	81046f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8104914:	4b88      	ldr	r3, [pc, #544]	@ (8104b38 <HAL_ADC_Init+0x294>)
 8104916:	681b      	ldr	r3, [r3, #0]
 8104918:	099b      	lsrs	r3, r3, #6
 810491a:	4a88      	ldr	r2, [pc, #544]	@ (8104b3c <HAL_ADC_Init+0x298>)
 810491c:	fba2 2303 	umull	r2, r3, r2, r3
 8104920:	099b      	lsrs	r3, r3, #6
 8104922:	3301      	adds	r3, #1
 8104924:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8104926:	e002      	b.n	810492e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8104928:	68bb      	ldr	r3, [r7, #8]
 810492a:	3b01      	subs	r3, #1
 810492c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810492e:	68bb      	ldr	r3, [r7, #8]
 8104930:	2b00      	cmp	r3, #0
 8104932:	d1f9      	bne.n	8104928 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	4618      	mov	r0, r3
 810493a:	f7ff feef 	bl	810471c <LL_ADC_IsInternalRegulatorEnabled>
 810493e:	4603      	mov	r3, r0
 8104940:	2b00      	cmp	r3, #0
 8104942:	d10d      	bne.n	8104960 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104948:	f043 0210 	orr.w	r2, r3, #16
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104950:	687b      	ldr	r3, [r7, #4]
 8104952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104954:	f043 0201 	orr.w	r2, r3, #1
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 810495c:	2301      	movs	r3, #1
 810495e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104960:	687b      	ldr	r3, [r7, #4]
 8104962:	681b      	ldr	r3, [r3, #0]
 8104964:	4618      	mov	r0, r3
 8104966:	f7ff ff63 	bl	8104830 <LL_ADC_REG_IsConversionOngoing>
 810496a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104970:	f003 0310 	and.w	r3, r3, #16
 8104974:	2b00      	cmp	r3, #0
 8104976:	f040 8129 	bne.w	8104bcc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810497a:	697b      	ldr	r3, [r7, #20]
 810497c:	2b00      	cmp	r3, #0
 810497e:	f040 8125 	bne.w	8104bcc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104986:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 810498a:	f043 0202 	orr.w	r2, r3, #2
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	681b      	ldr	r3, [r3, #0]
 8104996:	4618      	mov	r0, r3
 8104998:	f7ff fefc 	bl	8104794 <LL_ADC_IsEnabled>
 810499c:	4603      	mov	r3, r0
 810499e:	2b00      	cmp	r3, #0
 81049a0:	d136      	bne.n	8104a10 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	681b      	ldr	r3, [r3, #0]
 81049a6:	4a66      	ldr	r2, [pc, #408]	@ (8104b40 <HAL_ADC_Init+0x29c>)
 81049a8:	4293      	cmp	r3, r2
 81049aa:	d004      	beq.n	81049b6 <HAL_ADC_Init+0x112>
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	681b      	ldr	r3, [r3, #0]
 81049b0:	4a64      	ldr	r2, [pc, #400]	@ (8104b44 <HAL_ADC_Init+0x2a0>)
 81049b2:	4293      	cmp	r3, r2
 81049b4:	d10e      	bne.n	81049d4 <HAL_ADC_Init+0x130>
 81049b6:	4862      	ldr	r0, [pc, #392]	@ (8104b40 <HAL_ADC_Init+0x29c>)
 81049b8:	f7ff feec 	bl	8104794 <LL_ADC_IsEnabled>
 81049bc:	4604      	mov	r4, r0
 81049be:	4861      	ldr	r0, [pc, #388]	@ (8104b44 <HAL_ADC_Init+0x2a0>)
 81049c0:	f7ff fee8 	bl	8104794 <LL_ADC_IsEnabled>
 81049c4:	4603      	mov	r3, r0
 81049c6:	4323      	orrs	r3, r4
 81049c8:	2b00      	cmp	r3, #0
 81049ca:	bf0c      	ite	eq
 81049cc:	2301      	moveq	r3, #1
 81049ce:	2300      	movne	r3, #0
 81049d0:	b2db      	uxtb	r3, r3
 81049d2:	e008      	b.n	81049e6 <HAL_ADC_Init+0x142>
 81049d4:	485c      	ldr	r0, [pc, #368]	@ (8104b48 <HAL_ADC_Init+0x2a4>)
 81049d6:	f7ff fedd 	bl	8104794 <LL_ADC_IsEnabled>
 81049da:	4603      	mov	r3, r0
 81049dc:	2b00      	cmp	r3, #0
 81049de:	bf0c      	ite	eq
 81049e0:	2301      	moveq	r3, #1
 81049e2:	2300      	movne	r3, #0
 81049e4:	b2db      	uxtb	r3, r3
 81049e6:	2b00      	cmp	r3, #0
 81049e8:	d012      	beq.n	8104a10 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	681b      	ldr	r3, [r3, #0]
 81049ee:	4a54      	ldr	r2, [pc, #336]	@ (8104b40 <HAL_ADC_Init+0x29c>)
 81049f0:	4293      	cmp	r3, r2
 81049f2:	d004      	beq.n	81049fe <HAL_ADC_Init+0x15a>
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	681b      	ldr	r3, [r3, #0]
 81049f8:	4a52      	ldr	r2, [pc, #328]	@ (8104b44 <HAL_ADC_Init+0x2a0>)
 81049fa:	4293      	cmp	r3, r2
 81049fc:	d101      	bne.n	8104a02 <HAL_ADC_Init+0x15e>
 81049fe:	4a53      	ldr	r2, [pc, #332]	@ (8104b4c <HAL_ADC_Init+0x2a8>)
 8104a00:	e000      	b.n	8104a04 <HAL_ADC_Init+0x160>
 8104a02:	4a53      	ldr	r2, [pc, #332]	@ (8104b50 <HAL_ADC_Init+0x2ac>)
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	685b      	ldr	r3, [r3, #4]
 8104a08:	4619      	mov	r1, r3
 8104a0a:	4610      	mov	r0, r2
 8104a0c:	f7ff fd1a 	bl	8104444 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8104a10:	f7ff fd0c 	bl	810442c <HAL_GetREVID>
 8104a14:	4603      	mov	r3, r0
 8104a16:	f241 0203 	movw	r2, #4099	@ 0x1003
 8104a1a:	4293      	cmp	r3, r2
 8104a1c:	d914      	bls.n	8104a48 <HAL_ADC_Init+0x1a4>
 8104a1e:	687b      	ldr	r3, [r7, #4]
 8104a20:	689b      	ldr	r3, [r3, #8]
 8104a22:	2b10      	cmp	r3, #16
 8104a24:	d110      	bne.n	8104a48 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	7d5b      	ldrb	r3, [r3, #21]
 8104a2a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8104a2c:	687b      	ldr	r3, [r7, #4]
 8104a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104a30:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8104a36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	7f1b      	ldrb	r3, [r3, #28]
 8104a3c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8104a3e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104a40:	f043 030c 	orr.w	r3, r3, #12
 8104a44:	61bb      	str	r3, [r7, #24]
 8104a46:	e00d      	b.n	8104a64 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	7d5b      	ldrb	r3, [r3, #21]
 8104a4c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8104a4e:	687b      	ldr	r3, [r7, #4]
 8104a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104a52:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8104a58:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8104a5a:	687b      	ldr	r3, [r7, #4]
 8104a5c:	7f1b      	ldrb	r3, [r3, #28]
 8104a5e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104a60:	4313      	orrs	r3, r2
 8104a62:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	7f1b      	ldrb	r3, [r3, #28]
 8104a68:	2b01      	cmp	r3, #1
 8104a6a:	d106      	bne.n	8104a7a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8104a6c:	687b      	ldr	r3, [r7, #4]
 8104a6e:	6a1b      	ldr	r3, [r3, #32]
 8104a70:	3b01      	subs	r3, #1
 8104a72:	045b      	lsls	r3, r3, #17
 8104a74:	69ba      	ldr	r2, [r7, #24]
 8104a76:	4313      	orrs	r3, r2
 8104a78:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104a7e:	2b00      	cmp	r3, #0
 8104a80:	d009      	beq.n	8104a96 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104a86:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a8e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8104a90:	69ba      	ldr	r2, [r7, #24]
 8104a92:	4313      	orrs	r3, r2
 8104a94:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	68da      	ldr	r2, [r3, #12]
 8104a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8104b54 <HAL_ADC_Init+0x2b0>)
 8104a9e:	4013      	ands	r3, r2
 8104aa0:	687a      	ldr	r2, [r7, #4]
 8104aa2:	6812      	ldr	r2, [r2, #0]
 8104aa4:	69b9      	ldr	r1, [r7, #24]
 8104aa6:	430b      	orrs	r3, r1
 8104aa8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104aaa:	687b      	ldr	r3, [r7, #4]
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	4618      	mov	r0, r3
 8104ab0:	f7ff febe 	bl	8104830 <LL_ADC_REG_IsConversionOngoing>
 8104ab4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	681b      	ldr	r3, [r3, #0]
 8104aba:	4618      	mov	r0, r3
 8104abc:	f7ff fedf 	bl	810487e <LL_ADC_INJ_IsConversionOngoing>
 8104ac0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8104ac2:	693b      	ldr	r3, [r7, #16]
 8104ac4:	2b00      	cmp	r3, #0
 8104ac6:	d15f      	bne.n	8104b88 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	2b00      	cmp	r3, #0
 8104acc:	d15c      	bne.n	8104b88 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	7d1b      	ldrb	r3, [r3, #20]
 8104ad2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8104ad8:	4313      	orrs	r3, r2
 8104ada:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	68db      	ldr	r3, [r3, #12]
 8104ae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8104ae6:	f023 0303 	bic.w	r3, r3, #3
 8104aea:	687a      	ldr	r2, [r7, #4]
 8104aec:	6812      	ldr	r2, [r2, #0]
 8104aee:	69b9      	ldr	r1, [r7, #24]
 8104af0:	430b      	orrs	r3, r1
 8104af2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8104afa:	2b01      	cmp	r3, #1
 8104afc:	d12e      	bne.n	8104b5c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104b02:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	691a      	ldr	r2, [r3, #16]
 8104b0a:	4b13      	ldr	r3, [pc, #76]	@ (8104b58 <HAL_ADC_Init+0x2b4>)
 8104b0c:	4013      	ands	r3, r2
 8104b0e:	687a      	ldr	r2, [r7, #4]
 8104b10:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8104b12:	3a01      	subs	r2, #1
 8104b14:	0411      	lsls	r1, r2, #16
 8104b16:	687a      	ldr	r2, [r7, #4]
 8104b18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8104b1a:	4311      	orrs	r1, r2
 8104b1c:	687a      	ldr	r2, [r7, #4]
 8104b1e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8104b20:	4311      	orrs	r1, r2
 8104b22:	687a      	ldr	r2, [r7, #4]
 8104b24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8104b26:	430a      	orrs	r2, r1
 8104b28:	431a      	orrs	r2, r3
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	681b      	ldr	r3, [r3, #0]
 8104b2e:	f042 0201 	orr.w	r2, r2, #1
 8104b32:	611a      	str	r2, [r3, #16]
 8104b34:	e01a      	b.n	8104b6c <HAL_ADC_Init+0x2c8>
 8104b36:	bf00      	nop
 8104b38:	10000000 	.word	0x10000000
 8104b3c:	053e2d63 	.word	0x053e2d63
 8104b40:	40022000 	.word	0x40022000
 8104b44:	40022100 	.word	0x40022100
 8104b48:	58026000 	.word	0x58026000
 8104b4c:	40022300 	.word	0x40022300
 8104b50:	58026300 	.word	0x58026300
 8104b54:	fff0c003 	.word	0xfff0c003
 8104b58:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	681b      	ldr	r3, [r3, #0]
 8104b60:	691a      	ldr	r2, [r3, #16]
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	f022 0201 	bic.w	r2, r2, #1
 8104b6a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	691b      	ldr	r3, [r3, #16]
 8104b72:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	681b      	ldr	r3, [r3, #0]
 8104b7e:	430a      	orrs	r2, r1
 8104b80:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8104b82:	6878      	ldr	r0, [r7, #4]
 8104b84:	f000 ff32 	bl	81059ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	68db      	ldr	r3, [r3, #12]
 8104b8c:	2b01      	cmp	r3, #1
 8104b8e:	d10c      	bne.n	8104baa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104b96:	f023 010f 	bic.w	r1, r3, #15
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	699b      	ldr	r3, [r3, #24]
 8104b9e:	1e5a      	subs	r2, r3, #1
 8104ba0:	687b      	ldr	r3, [r7, #4]
 8104ba2:	681b      	ldr	r3, [r3, #0]
 8104ba4:	430a      	orrs	r2, r1
 8104ba6:	631a      	str	r2, [r3, #48]	@ 0x30
 8104ba8:	e007      	b.n	8104bba <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	681b      	ldr	r3, [r3, #0]
 8104bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	681b      	ldr	r3, [r3, #0]
 8104bb4:	f022 020f 	bic.w	r2, r2, #15
 8104bb8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8104bba:	687b      	ldr	r3, [r7, #4]
 8104bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104bbe:	f023 0303 	bic.w	r3, r3, #3
 8104bc2:	f043 0201 	orr.w	r2, r3, #1
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	655a      	str	r2, [r3, #84]	@ 0x54
 8104bca:	e007      	b.n	8104bdc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104bd0:	f043 0210 	orr.w	r2, r3, #16
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104bd8:	2301      	movs	r3, #1
 8104bda:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8104bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8104bde:	4618      	mov	r0, r3
 8104be0:	3724      	adds	r7, #36	@ 0x24
 8104be2:	46bd      	mov	sp, r7
 8104be4:	bd90      	pop	{r4, r7, pc}
 8104be6:	bf00      	nop

08104be8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8104be8:	b580      	push	{r7, lr}
 8104bea:	b086      	sub	sp, #24
 8104bec:	af00      	add	r7, sp, #0
 8104bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104bf0:	687b      	ldr	r3, [r7, #4]
 8104bf2:	681b      	ldr	r3, [r3, #0]
 8104bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8104d6c <HAL_ADC_Start+0x184>)
 8104bf6:	4293      	cmp	r3, r2
 8104bf8:	d004      	beq.n	8104c04 <HAL_ADC_Start+0x1c>
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	681b      	ldr	r3, [r3, #0]
 8104bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8104d70 <HAL_ADC_Start+0x188>)
 8104c00:	4293      	cmp	r3, r2
 8104c02:	d101      	bne.n	8104c08 <HAL_ADC_Start+0x20>
 8104c04:	4b5b      	ldr	r3, [pc, #364]	@ (8104d74 <HAL_ADC_Start+0x18c>)
 8104c06:	e000      	b.n	8104c0a <HAL_ADC_Start+0x22>
 8104c08:	4b5b      	ldr	r3, [pc, #364]	@ (8104d78 <HAL_ADC_Start+0x190>)
 8104c0a:	4618      	mov	r0, r3
 8104c0c:	f7ff fd30 	bl	8104670 <LL_ADC_GetMultimode>
 8104c10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	4618      	mov	r0, r3
 8104c18:	f7ff fe0a 	bl	8104830 <LL_ADC_REG_IsConversionOngoing>
 8104c1c:	4603      	mov	r3, r0
 8104c1e:	2b00      	cmp	r3, #0
 8104c20:	f040 809c 	bne.w	8104d5c <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104c2a:	2b01      	cmp	r3, #1
 8104c2c:	d101      	bne.n	8104c32 <HAL_ADC_Start+0x4a>
 8104c2e:	2302      	movs	r3, #2
 8104c30:	e097      	b.n	8104d62 <HAL_ADC_Start+0x17a>
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	2201      	movs	r2, #1
 8104c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8104c3a:	6878      	ldr	r0, [r7, #4]
 8104c3c:	f000 fdec 	bl	8105818 <ADC_Enable>
 8104c40:	4603      	mov	r3, r0
 8104c42:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8104c44:	7dfb      	ldrb	r3, [r7, #23]
 8104c46:	2b00      	cmp	r3, #0
 8104c48:	f040 8083 	bne.w	8104d52 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104c54:	f023 0301 	bic.w	r3, r3, #1
 8104c58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	4a42      	ldr	r2, [pc, #264]	@ (8104d70 <HAL_ADC_Start+0x188>)
 8104c66:	4293      	cmp	r3, r2
 8104c68:	d002      	beq.n	8104c70 <HAL_ADC_Start+0x88>
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	e000      	b.n	8104c72 <HAL_ADC_Start+0x8a>
 8104c70:	4b3e      	ldr	r3, [pc, #248]	@ (8104d6c <HAL_ADC_Start+0x184>)
 8104c72:	687a      	ldr	r2, [r7, #4]
 8104c74:	6812      	ldr	r2, [r2, #0]
 8104c76:	4293      	cmp	r3, r2
 8104c78:	d002      	beq.n	8104c80 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104c7a:	693b      	ldr	r3, [r7, #16]
 8104c7c:	2b00      	cmp	r3, #0
 8104c7e:	d105      	bne.n	8104c8c <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8104c8c:	687b      	ldr	r3, [r7, #4]
 8104c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104c98:	d106      	bne.n	8104ca8 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104c9e:	f023 0206 	bic.w	r2, r3, #6
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	659a      	str	r2, [r3, #88]	@ 0x58
 8104ca6:	e002      	b.n	8104cae <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	2200      	movs	r2, #0
 8104cac:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	221c      	movs	r2, #28
 8104cb4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	2200      	movs	r2, #0
 8104cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8104d70 <HAL_ADC_Start+0x188>)
 8104cc4:	4293      	cmp	r3, r2
 8104cc6:	d002      	beq.n	8104cce <HAL_ADC_Start+0xe6>
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	e000      	b.n	8104cd0 <HAL_ADC_Start+0xe8>
 8104cce:	4b27      	ldr	r3, [pc, #156]	@ (8104d6c <HAL_ADC_Start+0x184>)
 8104cd0:	687a      	ldr	r2, [r7, #4]
 8104cd2:	6812      	ldr	r2, [r2, #0]
 8104cd4:	4293      	cmp	r3, r2
 8104cd6:	d008      	beq.n	8104cea <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104cd8:	693b      	ldr	r3, [r7, #16]
 8104cda:	2b00      	cmp	r3, #0
 8104cdc:	d005      	beq.n	8104cea <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104cde:	693b      	ldr	r3, [r7, #16]
 8104ce0:	2b05      	cmp	r3, #5
 8104ce2:	d002      	beq.n	8104cea <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104ce4:	693b      	ldr	r3, [r7, #16]
 8104ce6:	2b09      	cmp	r3, #9
 8104ce8:	d114      	bne.n	8104d14 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	68db      	ldr	r3, [r3, #12]
 8104cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104cf4:	2b00      	cmp	r3, #0
 8104cf6:	d007      	beq.n	8104d08 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104cfc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8104d00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	681b      	ldr	r3, [r3, #0]
 8104d0c:	4618      	mov	r0, r3
 8104d0e:	f7ff fd67 	bl	81047e0 <LL_ADC_REG_StartConversion>
 8104d12:	e025      	b.n	8104d60 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d18:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	681b      	ldr	r3, [r3, #0]
 8104d24:	4a12      	ldr	r2, [pc, #72]	@ (8104d70 <HAL_ADC_Start+0x188>)
 8104d26:	4293      	cmp	r3, r2
 8104d28:	d002      	beq.n	8104d30 <HAL_ADC_Start+0x148>
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	681b      	ldr	r3, [r3, #0]
 8104d2e:	e000      	b.n	8104d32 <HAL_ADC_Start+0x14a>
 8104d30:	4b0e      	ldr	r3, [pc, #56]	@ (8104d6c <HAL_ADC_Start+0x184>)
 8104d32:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8104d34:	68fb      	ldr	r3, [r7, #12]
 8104d36:	68db      	ldr	r3, [r3, #12]
 8104d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d00f      	beq.n	8104d60 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8104d48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8104d50:	e006      	b.n	8104d60 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	2200      	movs	r2, #0
 8104d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8104d5a:	e001      	b.n	8104d60 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8104d5c:	2302      	movs	r3, #2
 8104d5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8104d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8104d62:	4618      	mov	r0, r3
 8104d64:	3718      	adds	r7, #24
 8104d66:	46bd      	mov	sp, r7
 8104d68:	bd80      	pop	{r7, pc}
 8104d6a:	bf00      	nop
 8104d6c:	40022000 	.word	0x40022000
 8104d70:	40022100 	.word	0x40022100
 8104d74:	40022300 	.word	0x40022300
 8104d78:	58026300 	.word	0x58026300

08104d7c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8104d7c:	b580      	push	{r7, lr}
 8104d7e:	b084      	sub	sp, #16
 8104d80:	af00      	add	r7, sp, #0
 8104d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104d8a:	2b01      	cmp	r3, #1
 8104d8c:	d101      	bne.n	8104d92 <HAL_ADC_Stop+0x16>
 8104d8e:	2302      	movs	r3, #2
 8104d90:	e023      	b.n	8104dda <HAL_ADC_Stop+0x5e>
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	2201      	movs	r2, #1
 8104d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8104d9a:	2103      	movs	r1, #3
 8104d9c:	6878      	ldr	r0, [r7, #4]
 8104d9e:	f000 fc7f 	bl	81056a0 <ADC_ConversionStop>
 8104da2:	4603      	mov	r3, r0
 8104da4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8104da6:	7bfb      	ldrb	r3, [r7, #15]
 8104da8:	2b00      	cmp	r3, #0
 8104daa:	d111      	bne.n	8104dd0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8104dac:	6878      	ldr	r0, [r7, #4]
 8104dae:	f000 fdbd 	bl	810592c <ADC_Disable>
 8104db2:	4603      	mov	r3, r0
 8104db4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8104db6:	7bfb      	ldrb	r3, [r7, #15]
 8104db8:	2b00      	cmp	r3, #0
 8104dba:	d109      	bne.n	8104dd0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8104dbc:	687b      	ldr	r3, [r7, #4]
 8104dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104dc0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8104dc4:	f023 0301 	bic.w	r3, r3, #1
 8104dc8:	f043 0201 	orr.w	r2, r3, #1
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104dd0:	687b      	ldr	r3, [r7, #4]
 8104dd2:	2200      	movs	r2, #0
 8104dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8104dda:	4618      	mov	r0, r3
 8104ddc:	3710      	adds	r7, #16
 8104dde:	46bd      	mov	sp, r7
 8104de0:	bd80      	pop	{r7, pc}
	...

08104de4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8104de4:	b580      	push	{r7, lr}
 8104de6:	b088      	sub	sp, #32
 8104de8:	af00      	add	r7, sp, #0
 8104dea:	6078      	str	r0, [r7, #4]
 8104dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	681b      	ldr	r3, [r3, #0]
 8104df2:	4a72      	ldr	r2, [pc, #456]	@ (8104fbc <HAL_ADC_PollForConversion+0x1d8>)
 8104df4:	4293      	cmp	r3, r2
 8104df6:	d004      	beq.n	8104e02 <HAL_ADC_PollForConversion+0x1e>
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	4a70      	ldr	r2, [pc, #448]	@ (8104fc0 <HAL_ADC_PollForConversion+0x1dc>)
 8104dfe:	4293      	cmp	r3, r2
 8104e00:	d101      	bne.n	8104e06 <HAL_ADC_PollForConversion+0x22>
 8104e02:	4b70      	ldr	r3, [pc, #448]	@ (8104fc4 <HAL_ADC_PollForConversion+0x1e0>)
 8104e04:	e000      	b.n	8104e08 <HAL_ADC_PollForConversion+0x24>
 8104e06:	4b70      	ldr	r3, [pc, #448]	@ (8104fc8 <HAL_ADC_PollForConversion+0x1e4>)
 8104e08:	4618      	mov	r0, r3
 8104e0a:	f7ff fc31 	bl	8104670 <LL_ADC_GetMultimode>
 8104e0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	691b      	ldr	r3, [r3, #16]
 8104e14:	2b08      	cmp	r3, #8
 8104e16:	d102      	bne.n	8104e1e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8104e18:	2308      	movs	r3, #8
 8104e1a:	61fb      	str	r3, [r7, #28]
 8104e1c:	e037      	b.n	8104e8e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104e1e:	697b      	ldr	r3, [r7, #20]
 8104e20:	2b00      	cmp	r3, #0
 8104e22:	d005      	beq.n	8104e30 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104e24:	697b      	ldr	r3, [r7, #20]
 8104e26:	2b05      	cmp	r3, #5
 8104e28:	d002      	beq.n	8104e30 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104e2a:	697b      	ldr	r3, [r7, #20]
 8104e2c:	2b09      	cmp	r3, #9
 8104e2e:	d111      	bne.n	8104e54 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	681b      	ldr	r3, [r3, #0]
 8104e34:	68db      	ldr	r3, [r3, #12]
 8104e36:	f003 0301 	and.w	r3, r3, #1
 8104e3a:	2b00      	cmp	r3, #0
 8104e3c:	d007      	beq.n	8104e4e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e42:	f043 0220 	orr.w	r2, r3, #32
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8104e4a:	2301      	movs	r3, #1
 8104e4c:	e0b1      	b.n	8104fb2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8104e4e:	2304      	movs	r3, #4
 8104e50:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8104e52:	e01c      	b.n	8104e8e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	681b      	ldr	r3, [r3, #0]
 8104e58:	4a58      	ldr	r2, [pc, #352]	@ (8104fbc <HAL_ADC_PollForConversion+0x1d8>)
 8104e5a:	4293      	cmp	r3, r2
 8104e5c:	d004      	beq.n	8104e68 <HAL_ADC_PollForConversion+0x84>
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	4a57      	ldr	r2, [pc, #348]	@ (8104fc0 <HAL_ADC_PollForConversion+0x1dc>)
 8104e64:	4293      	cmp	r3, r2
 8104e66:	d101      	bne.n	8104e6c <HAL_ADC_PollForConversion+0x88>
 8104e68:	4b56      	ldr	r3, [pc, #344]	@ (8104fc4 <HAL_ADC_PollForConversion+0x1e0>)
 8104e6a:	e000      	b.n	8104e6e <HAL_ADC_PollForConversion+0x8a>
 8104e6c:	4b56      	ldr	r3, [pc, #344]	@ (8104fc8 <HAL_ADC_PollForConversion+0x1e4>)
 8104e6e:	4618      	mov	r0, r3
 8104e70:	f7ff fc0c 	bl	810468c <LL_ADC_GetMultiDMATransfer>
 8104e74:	4603      	mov	r3, r0
 8104e76:	2b00      	cmp	r3, #0
 8104e78:	d007      	beq.n	8104e8a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e7e:	f043 0220 	orr.w	r2, r3, #32
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8104e86:	2301      	movs	r3, #1
 8104e88:	e093      	b.n	8104fb2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8104e8a:	2304      	movs	r3, #4
 8104e8c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8104e8e:	f7ff fa9d 	bl	81043cc <HAL_GetTick>
 8104e92:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104e94:	e021      	b.n	8104eda <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8104e96:	683b      	ldr	r3, [r7, #0]
 8104e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104e9c:	d01d      	beq.n	8104eda <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8104e9e:	f7ff fa95 	bl	81043cc <HAL_GetTick>
 8104ea2:	4602      	mov	r2, r0
 8104ea4:	693b      	ldr	r3, [r7, #16]
 8104ea6:	1ad3      	subs	r3, r2, r3
 8104ea8:	683a      	ldr	r2, [r7, #0]
 8104eaa:	429a      	cmp	r2, r3
 8104eac:	d302      	bcc.n	8104eb4 <HAL_ADC_PollForConversion+0xd0>
 8104eae:	683b      	ldr	r3, [r7, #0]
 8104eb0:	2b00      	cmp	r3, #0
 8104eb2:	d112      	bne.n	8104eda <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	681a      	ldr	r2, [r3, #0]
 8104eba:	69fb      	ldr	r3, [r7, #28]
 8104ebc:	4013      	ands	r3, r2
 8104ebe:	2b00      	cmp	r3, #0
 8104ec0:	d10b      	bne.n	8104eda <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104ec6:	f043 0204 	orr.w	r2, r3, #4
 8104eca:	687b      	ldr	r3, [r7, #4]
 8104ecc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	2200      	movs	r2, #0
 8104ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8104ed6:	2303      	movs	r3, #3
 8104ed8:	e06b      	b.n	8104fb2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	681a      	ldr	r2, [r3, #0]
 8104ee0:	69fb      	ldr	r3, [r7, #28]
 8104ee2:	4013      	ands	r3, r2
 8104ee4:	2b00      	cmp	r3, #0
 8104ee6:	d0d6      	beq.n	8104e96 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104eec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	4618      	mov	r0, r3
 8104efa:	f7ff fb2b 	bl	8104554 <LL_ADC_REG_IsTriggerSourceSWStart>
 8104efe:	4603      	mov	r3, r0
 8104f00:	2b00      	cmp	r3, #0
 8104f02:	d01c      	beq.n	8104f3e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	7d5b      	ldrb	r3, [r3, #21]
 8104f08:	2b00      	cmp	r3, #0
 8104f0a:	d118      	bne.n	8104f3e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	681b      	ldr	r3, [r3, #0]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	f003 0308 	and.w	r3, r3, #8
 8104f16:	2b08      	cmp	r3, #8
 8104f18:	d111      	bne.n	8104f3e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8104f1a:	687b      	ldr	r3, [r7, #4]
 8104f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104f2e:	2b00      	cmp	r3, #0
 8104f30:	d105      	bne.n	8104f3e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f36:	f043 0201 	orr.w	r2, r3, #1
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	681b      	ldr	r3, [r3, #0]
 8104f42:	4a1f      	ldr	r2, [pc, #124]	@ (8104fc0 <HAL_ADC_PollForConversion+0x1dc>)
 8104f44:	4293      	cmp	r3, r2
 8104f46:	d002      	beq.n	8104f4e <HAL_ADC_PollForConversion+0x16a>
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	e000      	b.n	8104f50 <HAL_ADC_PollForConversion+0x16c>
 8104f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8104fbc <HAL_ADC_PollForConversion+0x1d8>)
 8104f50:	687a      	ldr	r2, [r7, #4]
 8104f52:	6812      	ldr	r2, [r2, #0]
 8104f54:	4293      	cmp	r3, r2
 8104f56:	d008      	beq.n	8104f6a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104f58:	697b      	ldr	r3, [r7, #20]
 8104f5a:	2b00      	cmp	r3, #0
 8104f5c:	d005      	beq.n	8104f6a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104f5e:	697b      	ldr	r3, [r7, #20]
 8104f60:	2b05      	cmp	r3, #5
 8104f62:	d002      	beq.n	8104f6a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104f64:	697b      	ldr	r3, [r7, #20]
 8104f66:	2b09      	cmp	r3, #9
 8104f68:	d104      	bne.n	8104f74 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	68db      	ldr	r3, [r3, #12]
 8104f70:	61bb      	str	r3, [r7, #24]
 8104f72:	e00c      	b.n	8104f8e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	681b      	ldr	r3, [r3, #0]
 8104f78:	4a11      	ldr	r2, [pc, #68]	@ (8104fc0 <HAL_ADC_PollForConversion+0x1dc>)
 8104f7a:	4293      	cmp	r3, r2
 8104f7c:	d002      	beq.n	8104f84 <HAL_ADC_PollForConversion+0x1a0>
 8104f7e:	687b      	ldr	r3, [r7, #4]
 8104f80:	681b      	ldr	r3, [r3, #0]
 8104f82:	e000      	b.n	8104f86 <HAL_ADC_PollForConversion+0x1a2>
 8104f84:	4b0d      	ldr	r3, [pc, #52]	@ (8104fbc <HAL_ADC_PollForConversion+0x1d8>)
 8104f86:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8104f88:	68fb      	ldr	r3, [r7, #12]
 8104f8a:	68db      	ldr	r3, [r3, #12]
 8104f8c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8104f8e:	69fb      	ldr	r3, [r7, #28]
 8104f90:	2b08      	cmp	r3, #8
 8104f92:	d104      	bne.n	8104f9e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	2208      	movs	r2, #8
 8104f9a:	601a      	str	r2, [r3, #0]
 8104f9c:	e008      	b.n	8104fb0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8104f9e:	69bb      	ldr	r3, [r7, #24]
 8104fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	d103      	bne.n	8104fb0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	681b      	ldr	r3, [r3, #0]
 8104fac:	220c      	movs	r2, #12
 8104fae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8104fb0:	2300      	movs	r3, #0
}
 8104fb2:	4618      	mov	r0, r3
 8104fb4:	3720      	adds	r7, #32
 8104fb6:	46bd      	mov	sp, r7
 8104fb8:	bd80      	pop	{r7, pc}
 8104fba:	bf00      	nop
 8104fbc:	40022000 	.word	0x40022000
 8104fc0:	40022100 	.word	0x40022100
 8104fc4:	40022300 	.word	0x40022300
 8104fc8:	58026300 	.word	0x58026300

08104fcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8104fcc:	b480      	push	{r7}
 8104fce:	b083      	sub	sp, #12
 8104fd0:	af00      	add	r7, sp, #0
 8104fd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8104fda:	4618      	mov	r0, r3
 8104fdc:	370c      	adds	r7, #12
 8104fde:	46bd      	mov	sp, r7
 8104fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fe4:	4770      	bx	lr
	...

08104fe8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8104fe8:	b590      	push	{r4, r7, lr}
 8104fea:	b0a1      	sub	sp, #132	@ 0x84
 8104fec:	af00      	add	r7, sp, #0
 8104fee:	6078      	str	r0, [r7, #4]
 8104ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104ff2:	2300      	movs	r3, #0
 8104ff4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8104ff8:	2300      	movs	r3, #0
 8104ffa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8104ffc:	683b      	ldr	r3, [r7, #0]
 8104ffe:	68db      	ldr	r3, [r3, #12]
 8105000:	4a65      	ldr	r2, [pc, #404]	@ (8105198 <HAL_ADC_ConfigChannel+0x1b0>)
 8105002:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810500a:	2b01      	cmp	r3, #1
 810500c:	d101      	bne.n	8105012 <HAL_ADC_ConfigChannel+0x2a>
 810500e:	2302      	movs	r3, #2
 8105010:	e32e      	b.n	8105670 <HAL_ADC_ConfigChannel+0x688>
 8105012:	687b      	ldr	r3, [r7, #4]
 8105014:	2201      	movs	r2, #1
 8105016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	4618      	mov	r0, r3
 8105020:	f7ff fc06 	bl	8104830 <LL_ADC_REG_IsConversionOngoing>
 8105024:	4603      	mov	r3, r0
 8105026:	2b00      	cmp	r3, #0
 8105028:	f040 8313 	bne.w	8105652 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 810502c:	683b      	ldr	r3, [r7, #0]
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	2b00      	cmp	r3, #0
 8105032:	db2c      	blt.n	810508e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8105034:	683b      	ldr	r3, [r7, #0]
 8105036:	681b      	ldr	r3, [r3, #0]
 8105038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810503c:	2b00      	cmp	r3, #0
 810503e:	d108      	bne.n	8105052 <HAL_ADC_ConfigChannel+0x6a>
 8105040:	683b      	ldr	r3, [r7, #0]
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	0e9b      	lsrs	r3, r3, #26
 8105046:	f003 031f 	and.w	r3, r3, #31
 810504a:	2201      	movs	r2, #1
 810504c:	fa02 f303 	lsl.w	r3, r2, r3
 8105050:	e016      	b.n	8105080 <HAL_ADC_ConfigChannel+0x98>
 8105052:	683b      	ldr	r3, [r7, #0]
 8105054:	681b      	ldr	r3, [r3, #0]
 8105056:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810505a:	fa93 f3a3 	rbit	r3, r3
 810505e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8105060:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8105062:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8105064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8105066:	2b00      	cmp	r3, #0
 8105068:	d101      	bne.n	810506e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 810506a:	2320      	movs	r3, #32
 810506c:	e003      	b.n	8105076 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 810506e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8105070:	fab3 f383 	clz	r3, r3
 8105074:	b2db      	uxtb	r3, r3
 8105076:	f003 031f 	and.w	r3, r3, #31
 810507a:	2201      	movs	r2, #1
 810507c:	fa02 f303 	lsl.w	r3, r2, r3
 8105080:	687a      	ldr	r2, [r7, #4]
 8105082:	6812      	ldr	r2, [r2, #0]
 8105084:	69d1      	ldr	r1, [r2, #28]
 8105086:	687a      	ldr	r2, [r7, #4]
 8105088:	6812      	ldr	r2, [r2, #0]
 810508a:	430b      	orrs	r3, r1
 810508c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	6818      	ldr	r0, [r3, #0]
 8105092:	683b      	ldr	r3, [r7, #0]
 8105094:	6859      	ldr	r1, [r3, #4]
 8105096:	683b      	ldr	r3, [r7, #0]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	461a      	mov	r2, r3
 810509c:	f7ff fa6d 	bl	810457a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	4618      	mov	r0, r3
 81050a6:	f7ff fbc3 	bl	8104830 <LL_ADC_REG_IsConversionOngoing>
 81050aa:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	681b      	ldr	r3, [r3, #0]
 81050b0:	4618      	mov	r0, r3
 81050b2:	f7ff fbe4 	bl	810487e <LL_ADC_INJ_IsConversionOngoing>
 81050b6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81050b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81050ba:	2b00      	cmp	r3, #0
 81050bc:	f040 80b8 	bne.w	8105230 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81050c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	f040 80b4 	bne.w	8105230 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	6818      	ldr	r0, [r3, #0]
 81050cc:	683b      	ldr	r3, [r7, #0]
 81050ce:	6819      	ldr	r1, [r3, #0]
 81050d0:	683b      	ldr	r3, [r7, #0]
 81050d2:	689b      	ldr	r3, [r3, #8]
 81050d4:	461a      	mov	r2, r3
 81050d6:	f7ff fa7c 	bl	81045d2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81050da:	4b30      	ldr	r3, [pc, #192]	@ (810519c <HAL_ADC_ConfigChannel+0x1b4>)
 81050dc:	681b      	ldr	r3, [r3, #0]
 81050de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 81050e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81050e6:	d10b      	bne.n	8105100 <HAL_ADC_ConfigChannel+0x118>
 81050e8:	683b      	ldr	r3, [r7, #0]
 81050ea:	695a      	ldr	r2, [r3, #20]
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	681b      	ldr	r3, [r3, #0]
 81050f0:	68db      	ldr	r3, [r3, #12]
 81050f2:	089b      	lsrs	r3, r3, #2
 81050f4:	f003 0307 	and.w	r3, r3, #7
 81050f8:	005b      	lsls	r3, r3, #1
 81050fa:	fa02 f303 	lsl.w	r3, r2, r3
 81050fe:	e01d      	b.n	810513c <HAL_ADC_ConfigChannel+0x154>
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	681b      	ldr	r3, [r3, #0]
 8105104:	68db      	ldr	r3, [r3, #12]
 8105106:	f003 0310 	and.w	r3, r3, #16
 810510a:	2b00      	cmp	r3, #0
 810510c:	d10b      	bne.n	8105126 <HAL_ADC_ConfigChannel+0x13e>
 810510e:	683b      	ldr	r3, [r7, #0]
 8105110:	695a      	ldr	r2, [r3, #20]
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	681b      	ldr	r3, [r3, #0]
 8105116:	68db      	ldr	r3, [r3, #12]
 8105118:	089b      	lsrs	r3, r3, #2
 810511a:	f003 0307 	and.w	r3, r3, #7
 810511e:	005b      	lsls	r3, r3, #1
 8105120:	fa02 f303 	lsl.w	r3, r2, r3
 8105124:	e00a      	b.n	810513c <HAL_ADC_ConfigChannel+0x154>
 8105126:	683b      	ldr	r3, [r7, #0]
 8105128:	695a      	ldr	r2, [r3, #20]
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	68db      	ldr	r3, [r3, #12]
 8105130:	089b      	lsrs	r3, r3, #2
 8105132:	f003 0304 	and.w	r3, r3, #4
 8105136:	005b      	lsls	r3, r3, #1
 8105138:	fa02 f303 	lsl.w	r3, r2, r3
 810513c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810513e:	683b      	ldr	r3, [r7, #0]
 8105140:	691b      	ldr	r3, [r3, #16]
 8105142:	2b04      	cmp	r3, #4
 8105144:	d02c      	beq.n	81051a0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	6818      	ldr	r0, [r3, #0]
 810514a:	683b      	ldr	r3, [r7, #0]
 810514c:	6919      	ldr	r1, [r3, #16]
 810514e:	683b      	ldr	r3, [r7, #0]
 8105150:	681a      	ldr	r2, [r3, #0]
 8105152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105154:	f7ff f9aa 	bl	81044ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	6818      	ldr	r0, [r3, #0]
 810515c:	683b      	ldr	r3, [r7, #0]
 810515e:	6919      	ldr	r1, [r3, #16]
 8105160:	683b      	ldr	r3, [r7, #0]
 8105162:	7e5b      	ldrb	r3, [r3, #25]
 8105164:	2b01      	cmp	r3, #1
 8105166:	d102      	bne.n	810516e <HAL_ADC_ConfigChannel+0x186>
 8105168:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810516c:	e000      	b.n	8105170 <HAL_ADC_ConfigChannel+0x188>
 810516e:	2300      	movs	r3, #0
 8105170:	461a      	mov	r2, r3
 8105172:	f7ff f9d4 	bl	810451e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8105176:	687b      	ldr	r3, [r7, #4]
 8105178:	6818      	ldr	r0, [r3, #0]
 810517a:	683b      	ldr	r3, [r7, #0]
 810517c:	6919      	ldr	r1, [r3, #16]
 810517e:	683b      	ldr	r3, [r7, #0]
 8105180:	7e1b      	ldrb	r3, [r3, #24]
 8105182:	2b01      	cmp	r3, #1
 8105184:	d102      	bne.n	810518c <HAL_ADC_ConfigChannel+0x1a4>
 8105186:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810518a:	e000      	b.n	810518e <HAL_ADC_ConfigChannel+0x1a6>
 810518c:	2300      	movs	r3, #0
 810518e:	461a      	mov	r2, r3
 8105190:	f7ff f9ac 	bl	81044ec <LL_ADC_SetDataRightShift>
 8105194:	e04c      	b.n	8105230 <HAL_ADC_ConfigChannel+0x248>
 8105196:	bf00      	nop
 8105198:	47ff0000 	.word	0x47ff0000
 810519c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81051a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81051aa:	683b      	ldr	r3, [r7, #0]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	069b      	lsls	r3, r3, #26
 81051b0:	429a      	cmp	r2, r3
 81051b2:	d107      	bne.n	81051c4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81051ba:	687b      	ldr	r3, [r7, #4]
 81051bc:	681b      	ldr	r3, [r3, #0]
 81051be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81051c2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81051c4:	687b      	ldr	r3, [r7, #4]
 81051c6:	681b      	ldr	r3, [r3, #0]
 81051c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81051ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81051ce:	683b      	ldr	r3, [r7, #0]
 81051d0:	681b      	ldr	r3, [r3, #0]
 81051d2:	069b      	lsls	r3, r3, #26
 81051d4:	429a      	cmp	r2, r3
 81051d6:	d107      	bne.n	81051e8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	681b      	ldr	r3, [r3, #0]
 81051dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 81051de:	687b      	ldr	r3, [r7, #4]
 81051e0:	681b      	ldr	r3, [r3, #0]
 81051e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81051e6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	681b      	ldr	r3, [r3, #0]
 81051ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81051ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81051f2:	683b      	ldr	r3, [r7, #0]
 81051f4:	681b      	ldr	r3, [r3, #0]
 81051f6:	069b      	lsls	r3, r3, #26
 81051f8:	429a      	cmp	r2, r3
 81051fa:	d107      	bne.n	810520c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	681b      	ldr	r3, [r3, #0]
 8105206:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810520a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810520c:	687b      	ldr	r3, [r7, #4]
 810520e:	681b      	ldr	r3, [r3, #0]
 8105210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105212:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105216:	683b      	ldr	r3, [r7, #0]
 8105218:	681b      	ldr	r3, [r3, #0]
 810521a:	069b      	lsls	r3, r3, #26
 810521c:	429a      	cmp	r2, r3
 810521e:	d107      	bne.n	8105230 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810522e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	4618      	mov	r0, r3
 8105236:	f7ff faad 	bl	8104794 <LL_ADC_IsEnabled>
 810523a:	4603      	mov	r3, r0
 810523c:	2b00      	cmp	r3, #0
 810523e:	f040 8211 	bne.w	8105664 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	6818      	ldr	r0, [r3, #0]
 8105246:	683b      	ldr	r3, [r7, #0]
 8105248:	6819      	ldr	r1, [r3, #0]
 810524a:	683b      	ldr	r3, [r7, #0]
 810524c:	68db      	ldr	r3, [r3, #12]
 810524e:	461a      	mov	r2, r3
 8105250:	f7ff f9ea 	bl	8104628 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8105254:	683b      	ldr	r3, [r7, #0]
 8105256:	68db      	ldr	r3, [r3, #12]
 8105258:	4aa1      	ldr	r2, [pc, #644]	@ (81054e0 <HAL_ADC_ConfigChannel+0x4f8>)
 810525a:	4293      	cmp	r3, r2
 810525c:	f040 812e 	bne.w	81054bc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105264:	683b      	ldr	r3, [r7, #0]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810526c:	2b00      	cmp	r3, #0
 810526e:	d10b      	bne.n	8105288 <HAL_ADC_ConfigChannel+0x2a0>
 8105270:	683b      	ldr	r3, [r7, #0]
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	0e9b      	lsrs	r3, r3, #26
 8105276:	3301      	adds	r3, #1
 8105278:	f003 031f 	and.w	r3, r3, #31
 810527c:	2b09      	cmp	r3, #9
 810527e:	bf94      	ite	ls
 8105280:	2301      	movls	r3, #1
 8105282:	2300      	movhi	r3, #0
 8105284:	b2db      	uxtb	r3, r3
 8105286:	e019      	b.n	81052bc <HAL_ADC_ConfigChannel+0x2d4>
 8105288:	683b      	ldr	r3, [r7, #0]
 810528a:	681b      	ldr	r3, [r3, #0]
 810528c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810528e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8105290:	fa93 f3a3 	rbit	r3, r3
 8105294:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8105296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8105298:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 810529a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810529c:	2b00      	cmp	r3, #0
 810529e:	d101      	bne.n	81052a4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 81052a0:	2320      	movs	r3, #32
 81052a2:	e003      	b.n	81052ac <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 81052a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81052a6:	fab3 f383 	clz	r3, r3
 81052aa:	b2db      	uxtb	r3, r3
 81052ac:	3301      	adds	r3, #1
 81052ae:	f003 031f 	and.w	r3, r3, #31
 81052b2:	2b09      	cmp	r3, #9
 81052b4:	bf94      	ite	ls
 81052b6:	2301      	movls	r3, #1
 81052b8:	2300      	movhi	r3, #0
 81052ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81052bc:	2b00      	cmp	r3, #0
 81052be:	d079      	beq.n	81053b4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81052c0:	683b      	ldr	r3, [r7, #0]
 81052c2:	681b      	ldr	r3, [r3, #0]
 81052c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81052c8:	2b00      	cmp	r3, #0
 81052ca:	d107      	bne.n	81052dc <HAL_ADC_ConfigChannel+0x2f4>
 81052cc:	683b      	ldr	r3, [r7, #0]
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	0e9b      	lsrs	r3, r3, #26
 81052d2:	3301      	adds	r3, #1
 81052d4:	069b      	lsls	r3, r3, #26
 81052d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81052da:	e015      	b.n	8105308 <HAL_ADC_ConfigChannel+0x320>
 81052dc:	683b      	ldr	r3, [r7, #0]
 81052de:	681b      	ldr	r3, [r3, #0]
 81052e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81052e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81052e4:	fa93 f3a3 	rbit	r3, r3
 81052e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 81052ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81052ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 81052ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81052f0:	2b00      	cmp	r3, #0
 81052f2:	d101      	bne.n	81052f8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 81052f4:	2320      	movs	r3, #32
 81052f6:	e003      	b.n	8105300 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 81052f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81052fa:	fab3 f383 	clz	r3, r3
 81052fe:	b2db      	uxtb	r3, r3
 8105300:	3301      	adds	r3, #1
 8105302:	069b      	lsls	r3, r3, #26
 8105304:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105308:	683b      	ldr	r3, [r7, #0]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105310:	2b00      	cmp	r3, #0
 8105312:	d109      	bne.n	8105328 <HAL_ADC_ConfigChannel+0x340>
 8105314:	683b      	ldr	r3, [r7, #0]
 8105316:	681b      	ldr	r3, [r3, #0]
 8105318:	0e9b      	lsrs	r3, r3, #26
 810531a:	3301      	adds	r3, #1
 810531c:	f003 031f 	and.w	r3, r3, #31
 8105320:	2101      	movs	r1, #1
 8105322:	fa01 f303 	lsl.w	r3, r1, r3
 8105326:	e017      	b.n	8105358 <HAL_ADC_ConfigChannel+0x370>
 8105328:	683b      	ldr	r3, [r7, #0]
 810532a:	681b      	ldr	r3, [r3, #0]
 810532c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810532e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105330:	fa93 f3a3 	rbit	r3, r3
 8105334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8105336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105338:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 810533a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810533c:	2b00      	cmp	r3, #0
 810533e:	d101      	bne.n	8105344 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8105340:	2320      	movs	r3, #32
 8105342:	e003      	b.n	810534c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8105344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105346:	fab3 f383 	clz	r3, r3
 810534a:	b2db      	uxtb	r3, r3
 810534c:	3301      	adds	r3, #1
 810534e:	f003 031f 	and.w	r3, r3, #31
 8105352:	2101      	movs	r1, #1
 8105354:	fa01 f303 	lsl.w	r3, r1, r3
 8105358:	ea42 0103 	orr.w	r1, r2, r3
 810535c:	683b      	ldr	r3, [r7, #0]
 810535e:	681b      	ldr	r3, [r3, #0]
 8105360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105364:	2b00      	cmp	r3, #0
 8105366:	d10a      	bne.n	810537e <HAL_ADC_ConfigChannel+0x396>
 8105368:	683b      	ldr	r3, [r7, #0]
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	0e9b      	lsrs	r3, r3, #26
 810536e:	3301      	adds	r3, #1
 8105370:	f003 021f 	and.w	r2, r3, #31
 8105374:	4613      	mov	r3, r2
 8105376:	005b      	lsls	r3, r3, #1
 8105378:	4413      	add	r3, r2
 810537a:	051b      	lsls	r3, r3, #20
 810537c:	e018      	b.n	81053b0 <HAL_ADC_ConfigChannel+0x3c8>
 810537e:	683b      	ldr	r3, [r7, #0]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105386:	fa93 f3a3 	rbit	r3, r3
 810538a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 810538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810538e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8105390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105392:	2b00      	cmp	r3, #0
 8105394:	d101      	bne.n	810539a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8105396:	2320      	movs	r3, #32
 8105398:	e003      	b.n	81053a2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 810539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810539c:	fab3 f383 	clz	r3, r3
 81053a0:	b2db      	uxtb	r3, r3
 81053a2:	3301      	adds	r3, #1
 81053a4:	f003 021f 	and.w	r2, r3, #31
 81053a8:	4613      	mov	r3, r2
 81053aa:	005b      	lsls	r3, r3, #1
 81053ac:	4413      	add	r3, r2
 81053ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81053b0:	430b      	orrs	r3, r1
 81053b2:	e07e      	b.n	81054b2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81053b4:	683b      	ldr	r3, [r7, #0]
 81053b6:	681b      	ldr	r3, [r3, #0]
 81053b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81053bc:	2b00      	cmp	r3, #0
 81053be:	d107      	bne.n	81053d0 <HAL_ADC_ConfigChannel+0x3e8>
 81053c0:	683b      	ldr	r3, [r7, #0]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	0e9b      	lsrs	r3, r3, #26
 81053c6:	3301      	adds	r3, #1
 81053c8:	069b      	lsls	r3, r3, #26
 81053ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81053ce:	e015      	b.n	81053fc <HAL_ADC_ConfigChannel+0x414>
 81053d0:	683b      	ldr	r3, [r7, #0]
 81053d2:	681b      	ldr	r3, [r3, #0]
 81053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81053d8:	fa93 f3a3 	rbit	r3, r3
 81053dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 81053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 81053e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81053e4:	2b00      	cmp	r3, #0
 81053e6:	d101      	bne.n	81053ec <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 81053e8:	2320      	movs	r3, #32
 81053ea:	e003      	b.n	81053f4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 81053ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81053ee:	fab3 f383 	clz	r3, r3
 81053f2:	b2db      	uxtb	r3, r3
 81053f4:	3301      	adds	r3, #1
 81053f6:	069b      	lsls	r3, r3, #26
 81053f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81053fc:	683b      	ldr	r3, [r7, #0]
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105404:	2b00      	cmp	r3, #0
 8105406:	d109      	bne.n	810541c <HAL_ADC_ConfigChannel+0x434>
 8105408:	683b      	ldr	r3, [r7, #0]
 810540a:	681b      	ldr	r3, [r3, #0]
 810540c:	0e9b      	lsrs	r3, r3, #26
 810540e:	3301      	adds	r3, #1
 8105410:	f003 031f 	and.w	r3, r3, #31
 8105414:	2101      	movs	r1, #1
 8105416:	fa01 f303 	lsl.w	r3, r1, r3
 810541a:	e017      	b.n	810544c <HAL_ADC_ConfigChannel+0x464>
 810541c:	683b      	ldr	r3, [r7, #0]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105422:	69fb      	ldr	r3, [r7, #28]
 8105424:	fa93 f3a3 	rbit	r3, r3
 8105428:	61bb      	str	r3, [r7, #24]
  return result;
 810542a:	69bb      	ldr	r3, [r7, #24]
 810542c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 810542e:	6a3b      	ldr	r3, [r7, #32]
 8105430:	2b00      	cmp	r3, #0
 8105432:	d101      	bne.n	8105438 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8105434:	2320      	movs	r3, #32
 8105436:	e003      	b.n	8105440 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8105438:	6a3b      	ldr	r3, [r7, #32]
 810543a:	fab3 f383 	clz	r3, r3
 810543e:	b2db      	uxtb	r3, r3
 8105440:	3301      	adds	r3, #1
 8105442:	f003 031f 	and.w	r3, r3, #31
 8105446:	2101      	movs	r1, #1
 8105448:	fa01 f303 	lsl.w	r3, r1, r3
 810544c:	ea42 0103 	orr.w	r1, r2, r3
 8105450:	683b      	ldr	r3, [r7, #0]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105458:	2b00      	cmp	r3, #0
 810545a:	d10d      	bne.n	8105478 <HAL_ADC_ConfigChannel+0x490>
 810545c:	683b      	ldr	r3, [r7, #0]
 810545e:	681b      	ldr	r3, [r3, #0]
 8105460:	0e9b      	lsrs	r3, r3, #26
 8105462:	3301      	adds	r3, #1
 8105464:	f003 021f 	and.w	r2, r3, #31
 8105468:	4613      	mov	r3, r2
 810546a:	005b      	lsls	r3, r3, #1
 810546c:	4413      	add	r3, r2
 810546e:	3b1e      	subs	r3, #30
 8105470:	051b      	lsls	r3, r3, #20
 8105472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8105476:	e01b      	b.n	81054b0 <HAL_ADC_ConfigChannel+0x4c8>
 8105478:	683b      	ldr	r3, [r7, #0]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810547e:	693b      	ldr	r3, [r7, #16]
 8105480:	fa93 f3a3 	rbit	r3, r3
 8105484:	60fb      	str	r3, [r7, #12]
  return result;
 8105486:	68fb      	ldr	r3, [r7, #12]
 8105488:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 810548a:	697b      	ldr	r3, [r7, #20]
 810548c:	2b00      	cmp	r3, #0
 810548e:	d101      	bne.n	8105494 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8105490:	2320      	movs	r3, #32
 8105492:	e003      	b.n	810549c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8105494:	697b      	ldr	r3, [r7, #20]
 8105496:	fab3 f383 	clz	r3, r3
 810549a:	b2db      	uxtb	r3, r3
 810549c:	3301      	adds	r3, #1
 810549e:	f003 021f 	and.w	r2, r3, #31
 81054a2:	4613      	mov	r3, r2
 81054a4:	005b      	lsls	r3, r3, #1
 81054a6:	4413      	add	r3, r2
 81054a8:	3b1e      	subs	r3, #30
 81054aa:	051b      	lsls	r3, r3, #20
 81054ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81054b0:	430b      	orrs	r3, r1
 81054b2:	683a      	ldr	r2, [r7, #0]
 81054b4:	6892      	ldr	r2, [r2, #8]
 81054b6:	4619      	mov	r1, r3
 81054b8:	f7ff f88b 	bl	81045d2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81054bc:	683b      	ldr	r3, [r7, #0]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	2b00      	cmp	r3, #0
 81054c2:	f280 80cf 	bge.w	8105664 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	4a06      	ldr	r2, [pc, #24]	@ (81054e4 <HAL_ADC_ConfigChannel+0x4fc>)
 81054cc:	4293      	cmp	r3, r2
 81054ce:	d004      	beq.n	81054da <HAL_ADC_ConfigChannel+0x4f2>
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	681b      	ldr	r3, [r3, #0]
 81054d4:	4a04      	ldr	r2, [pc, #16]	@ (81054e8 <HAL_ADC_ConfigChannel+0x500>)
 81054d6:	4293      	cmp	r3, r2
 81054d8:	d10a      	bne.n	81054f0 <HAL_ADC_ConfigChannel+0x508>
 81054da:	4b04      	ldr	r3, [pc, #16]	@ (81054ec <HAL_ADC_ConfigChannel+0x504>)
 81054dc:	e009      	b.n	81054f2 <HAL_ADC_ConfigChannel+0x50a>
 81054de:	bf00      	nop
 81054e0:	47ff0000 	.word	0x47ff0000
 81054e4:	40022000 	.word	0x40022000
 81054e8:	40022100 	.word	0x40022100
 81054ec:	40022300 	.word	0x40022300
 81054f0:	4b61      	ldr	r3, [pc, #388]	@ (8105678 <HAL_ADC_ConfigChannel+0x690>)
 81054f2:	4618      	mov	r0, r3
 81054f4:	f7fe ffcc 	bl	8104490 <LL_ADC_GetCommonPathInternalCh>
 81054f8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	681b      	ldr	r3, [r3, #0]
 81054fe:	4a5f      	ldr	r2, [pc, #380]	@ (810567c <HAL_ADC_ConfigChannel+0x694>)
 8105500:	4293      	cmp	r3, r2
 8105502:	d004      	beq.n	810550e <HAL_ADC_ConfigChannel+0x526>
 8105504:	687b      	ldr	r3, [r7, #4]
 8105506:	681b      	ldr	r3, [r3, #0]
 8105508:	4a5d      	ldr	r2, [pc, #372]	@ (8105680 <HAL_ADC_ConfigChannel+0x698>)
 810550a:	4293      	cmp	r3, r2
 810550c:	d10e      	bne.n	810552c <HAL_ADC_ConfigChannel+0x544>
 810550e:	485b      	ldr	r0, [pc, #364]	@ (810567c <HAL_ADC_ConfigChannel+0x694>)
 8105510:	f7ff f940 	bl	8104794 <LL_ADC_IsEnabled>
 8105514:	4604      	mov	r4, r0
 8105516:	485a      	ldr	r0, [pc, #360]	@ (8105680 <HAL_ADC_ConfigChannel+0x698>)
 8105518:	f7ff f93c 	bl	8104794 <LL_ADC_IsEnabled>
 810551c:	4603      	mov	r3, r0
 810551e:	4323      	orrs	r3, r4
 8105520:	2b00      	cmp	r3, #0
 8105522:	bf0c      	ite	eq
 8105524:	2301      	moveq	r3, #1
 8105526:	2300      	movne	r3, #0
 8105528:	b2db      	uxtb	r3, r3
 810552a:	e008      	b.n	810553e <HAL_ADC_ConfigChannel+0x556>
 810552c:	4855      	ldr	r0, [pc, #340]	@ (8105684 <HAL_ADC_ConfigChannel+0x69c>)
 810552e:	f7ff f931 	bl	8104794 <LL_ADC_IsEnabled>
 8105532:	4603      	mov	r3, r0
 8105534:	2b00      	cmp	r3, #0
 8105536:	bf0c      	ite	eq
 8105538:	2301      	moveq	r3, #1
 810553a:	2300      	movne	r3, #0
 810553c:	b2db      	uxtb	r3, r3
 810553e:	2b00      	cmp	r3, #0
 8105540:	d07d      	beq.n	810563e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8105542:	683b      	ldr	r3, [r7, #0]
 8105544:	681b      	ldr	r3, [r3, #0]
 8105546:	4a50      	ldr	r2, [pc, #320]	@ (8105688 <HAL_ADC_ConfigChannel+0x6a0>)
 8105548:	4293      	cmp	r3, r2
 810554a:	d130      	bne.n	81055ae <HAL_ADC_ConfigChannel+0x5c6>
 810554c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810554e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105552:	2b00      	cmp	r3, #0
 8105554:	d12b      	bne.n	81055ae <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	4a4a      	ldr	r2, [pc, #296]	@ (8105684 <HAL_ADC_ConfigChannel+0x69c>)
 810555c:	4293      	cmp	r3, r2
 810555e:	f040 8081 	bne.w	8105664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8105562:	687b      	ldr	r3, [r7, #4]
 8105564:	681b      	ldr	r3, [r3, #0]
 8105566:	4a45      	ldr	r2, [pc, #276]	@ (810567c <HAL_ADC_ConfigChannel+0x694>)
 8105568:	4293      	cmp	r3, r2
 810556a:	d004      	beq.n	8105576 <HAL_ADC_ConfigChannel+0x58e>
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	681b      	ldr	r3, [r3, #0]
 8105570:	4a43      	ldr	r2, [pc, #268]	@ (8105680 <HAL_ADC_ConfigChannel+0x698>)
 8105572:	4293      	cmp	r3, r2
 8105574:	d101      	bne.n	810557a <HAL_ADC_ConfigChannel+0x592>
 8105576:	4a45      	ldr	r2, [pc, #276]	@ (810568c <HAL_ADC_ConfigChannel+0x6a4>)
 8105578:	e000      	b.n	810557c <HAL_ADC_ConfigChannel+0x594>
 810557a:	4a3f      	ldr	r2, [pc, #252]	@ (8105678 <HAL_ADC_ConfigChannel+0x690>)
 810557c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810557e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105582:	4619      	mov	r1, r3
 8105584:	4610      	mov	r0, r2
 8105586:	f7fe ff70 	bl	810446a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810558a:	4b41      	ldr	r3, [pc, #260]	@ (8105690 <HAL_ADC_ConfigChannel+0x6a8>)
 810558c:	681b      	ldr	r3, [r3, #0]
 810558e:	099b      	lsrs	r3, r3, #6
 8105590:	4a40      	ldr	r2, [pc, #256]	@ (8105694 <HAL_ADC_ConfigChannel+0x6ac>)
 8105592:	fba2 2303 	umull	r2, r3, r2, r3
 8105596:	099b      	lsrs	r3, r3, #6
 8105598:	3301      	adds	r3, #1
 810559a:	005b      	lsls	r3, r3, #1
 810559c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810559e:	e002      	b.n	81055a6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 81055a0:	68bb      	ldr	r3, [r7, #8]
 81055a2:	3b01      	subs	r3, #1
 81055a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81055a6:	68bb      	ldr	r3, [r7, #8]
 81055a8:	2b00      	cmp	r3, #0
 81055aa:	d1f9      	bne.n	81055a0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81055ac:	e05a      	b.n	8105664 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 81055ae:	683b      	ldr	r3, [r7, #0]
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	4a39      	ldr	r2, [pc, #228]	@ (8105698 <HAL_ADC_ConfigChannel+0x6b0>)
 81055b4:	4293      	cmp	r3, r2
 81055b6:	d11e      	bne.n	81055f6 <HAL_ADC_ConfigChannel+0x60e>
 81055b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81055ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81055be:	2b00      	cmp	r3, #0
 81055c0:	d119      	bne.n	81055f6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81055c2:	687b      	ldr	r3, [r7, #4]
 81055c4:	681b      	ldr	r3, [r3, #0]
 81055c6:	4a2f      	ldr	r2, [pc, #188]	@ (8105684 <HAL_ADC_ConfigChannel+0x69c>)
 81055c8:	4293      	cmp	r3, r2
 81055ca:	d14b      	bne.n	8105664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	681b      	ldr	r3, [r3, #0]
 81055d0:	4a2a      	ldr	r2, [pc, #168]	@ (810567c <HAL_ADC_ConfigChannel+0x694>)
 81055d2:	4293      	cmp	r3, r2
 81055d4:	d004      	beq.n	81055e0 <HAL_ADC_ConfigChannel+0x5f8>
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	681b      	ldr	r3, [r3, #0]
 81055da:	4a29      	ldr	r2, [pc, #164]	@ (8105680 <HAL_ADC_ConfigChannel+0x698>)
 81055dc:	4293      	cmp	r3, r2
 81055de:	d101      	bne.n	81055e4 <HAL_ADC_ConfigChannel+0x5fc>
 81055e0:	4a2a      	ldr	r2, [pc, #168]	@ (810568c <HAL_ADC_ConfigChannel+0x6a4>)
 81055e2:	e000      	b.n	81055e6 <HAL_ADC_ConfigChannel+0x5fe>
 81055e4:	4a24      	ldr	r2, [pc, #144]	@ (8105678 <HAL_ADC_ConfigChannel+0x690>)
 81055e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81055e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81055ec:	4619      	mov	r1, r3
 81055ee:	4610      	mov	r0, r2
 81055f0:	f7fe ff3b 	bl	810446a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81055f4:	e036      	b.n	8105664 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81055f6:	683b      	ldr	r3, [r7, #0]
 81055f8:	681b      	ldr	r3, [r3, #0]
 81055fa:	4a28      	ldr	r2, [pc, #160]	@ (810569c <HAL_ADC_ConfigChannel+0x6b4>)
 81055fc:	4293      	cmp	r3, r2
 81055fe:	d131      	bne.n	8105664 <HAL_ADC_ConfigChannel+0x67c>
 8105600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105606:	2b00      	cmp	r3, #0
 8105608:	d12c      	bne.n	8105664 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	681b      	ldr	r3, [r3, #0]
 810560e:	4a1d      	ldr	r2, [pc, #116]	@ (8105684 <HAL_ADC_ConfigChannel+0x69c>)
 8105610:	4293      	cmp	r3, r2
 8105612:	d127      	bne.n	8105664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8105614:	687b      	ldr	r3, [r7, #4]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	4a18      	ldr	r2, [pc, #96]	@ (810567c <HAL_ADC_ConfigChannel+0x694>)
 810561a:	4293      	cmp	r3, r2
 810561c:	d004      	beq.n	8105628 <HAL_ADC_ConfigChannel+0x640>
 810561e:	687b      	ldr	r3, [r7, #4]
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	4a17      	ldr	r2, [pc, #92]	@ (8105680 <HAL_ADC_ConfigChannel+0x698>)
 8105624:	4293      	cmp	r3, r2
 8105626:	d101      	bne.n	810562c <HAL_ADC_ConfigChannel+0x644>
 8105628:	4a18      	ldr	r2, [pc, #96]	@ (810568c <HAL_ADC_ConfigChannel+0x6a4>)
 810562a:	e000      	b.n	810562e <HAL_ADC_ConfigChannel+0x646>
 810562c:	4a12      	ldr	r2, [pc, #72]	@ (8105678 <HAL_ADC_ConfigChannel+0x690>)
 810562e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105630:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8105634:	4619      	mov	r1, r3
 8105636:	4610      	mov	r0, r2
 8105638:	f7fe ff17 	bl	810446a <LL_ADC_SetCommonPathInternalCh>
 810563c:	e012      	b.n	8105664 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105642:	f043 0220 	orr.w	r2, r3, #32
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 810564a:	2301      	movs	r3, #1
 810564c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8105650:	e008      	b.n	8105664 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105656:	f043 0220 	orr.w	r2, r3, #32
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810565e:	2301      	movs	r3, #1
 8105660:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	2200      	movs	r2, #0
 8105668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 810566c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8105670:	4618      	mov	r0, r3
 8105672:	3784      	adds	r7, #132	@ 0x84
 8105674:	46bd      	mov	sp, r7
 8105676:	bd90      	pop	{r4, r7, pc}
 8105678:	58026300 	.word	0x58026300
 810567c:	40022000 	.word	0x40022000
 8105680:	40022100 	.word	0x40022100
 8105684:	58026000 	.word	0x58026000
 8105688:	cb840000 	.word	0xcb840000
 810568c:	40022300 	.word	0x40022300
 8105690:	10000000 	.word	0x10000000
 8105694:	053e2d63 	.word	0x053e2d63
 8105698:	c7520000 	.word	0xc7520000
 810569c:	cfb80000 	.word	0xcfb80000

081056a0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 81056a0:	b580      	push	{r7, lr}
 81056a2:	b088      	sub	sp, #32
 81056a4:	af00      	add	r7, sp, #0
 81056a6:	6078      	str	r0, [r7, #4]
 81056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 81056aa:	2300      	movs	r3, #0
 81056ac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 81056ae:	683b      	ldr	r3, [r7, #0]
 81056b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	4618      	mov	r0, r3
 81056b8:	f7ff f8ba 	bl	8104830 <LL_ADC_REG_IsConversionOngoing>
 81056bc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	4618      	mov	r0, r3
 81056c4:	f7ff f8db 	bl	810487e <LL_ADC_INJ_IsConversionOngoing>
 81056c8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 81056ca:	693b      	ldr	r3, [r7, #16]
 81056cc:	2b00      	cmp	r3, #0
 81056ce:	d103      	bne.n	81056d8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 81056d0:	68fb      	ldr	r3, [r7, #12]
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	f000 8098 	beq.w	8105808 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	68db      	ldr	r3, [r3, #12]
 81056de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81056e2:	2b00      	cmp	r3, #0
 81056e4:	d02a      	beq.n	810573c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	7d5b      	ldrb	r3, [r3, #21]
 81056ea:	2b01      	cmp	r3, #1
 81056ec:	d126      	bne.n	810573c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 81056ee:	687b      	ldr	r3, [r7, #4]
 81056f0:	7d1b      	ldrb	r3, [r3, #20]
 81056f2:	2b01      	cmp	r3, #1
 81056f4:	d122      	bne.n	810573c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 81056f6:	2301      	movs	r3, #1
 81056f8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 81056fa:	e014      	b.n	8105726 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 81056fc:	69fb      	ldr	r3, [r7, #28]
 81056fe:	4a45      	ldr	r2, [pc, #276]	@ (8105814 <ADC_ConversionStop+0x174>)
 8105700:	4293      	cmp	r3, r2
 8105702:	d90d      	bls.n	8105720 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105708:	f043 0210 	orr.w	r2, r3, #16
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105714:	f043 0201 	orr.w	r2, r3, #1
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 810571c:	2301      	movs	r3, #1
 810571e:	e074      	b.n	810580a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8105720:	69fb      	ldr	r3, [r7, #28]
 8105722:	3301      	adds	r3, #1
 8105724:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8105726:	687b      	ldr	r3, [r7, #4]
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	681b      	ldr	r3, [r3, #0]
 810572c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105730:	2b40      	cmp	r3, #64	@ 0x40
 8105732:	d1e3      	bne.n	81056fc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8105734:	687b      	ldr	r3, [r7, #4]
 8105736:	681b      	ldr	r3, [r3, #0]
 8105738:	2240      	movs	r2, #64	@ 0x40
 810573a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 810573c:	69bb      	ldr	r3, [r7, #24]
 810573e:	2b02      	cmp	r3, #2
 8105740:	d014      	beq.n	810576c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	681b      	ldr	r3, [r3, #0]
 8105746:	4618      	mov	r0, r3
 8105748:	f7ff f872 	bl	8104830 <LL_ADC_REG_IsConversionOngoing>
 810574c:	4603      	mov	r3, r0
 810574e:	2b00      	cmp	r3, #0
 8105750:	d00c      	beq.n	810576c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	681b      	ldr	r3, [r3, #0]
 8105756:	4618      	mov	r0, r3
 8105758:	f7ff f82f 	bl	81047ba <LL_ADC_IsDisableOngoing>
 810575c:	4603      	mov	r3, r0
 810575e:	2b00      	cmp	r3, #0
 8105760:	d104      	bne.n	810576c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8105762:	687b      	ldr	r3, [r7, #4]
 8105764:	681b      	ldr	r3, [r3, #0]
 8105766:	4618      	mov	r0, r3
 8105768:	f7ff f84e 	bl	8104808 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 810576c:	69bb      	ldr	r3, [r7, #24]
 810576e:	2b01      	cmp	r3, #1
 8105770:	d014      	beq.n	810579c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	681b      	ldr	r3, [r3, #0]
 8105776:	4618      	mov	r0, r3
 8105778:	f7ff f881 	bl	810487e <LL_ADC_INJ_IsConversionOngoing>
 810577c:	4603      	mov	r3, r0
 810577e:	2b00      	cmp	r3, #0
 8105780:	d00c      	beq.n	810579c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	4618      	mov	r0, r3
 8105788:	f7ff f817 	bl	81047ba <LL_ADC_IsDisableOngoing>
 810578c:	4603      	mov	r3, r0
 810578e:	2b00      	cmp	r3, #0
 8105790:	d104      	bne.n	810579c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	681b      	ldr	r3, [r3, #0]
 8105796:	4618      	mov	r0, r3
 8105798:	f7ff f85d 	bl	8104856 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 810579c:	69bb      	ldr	r3, [r7, #24]
 810579e:	2b02      	cmp	r3, #2
 81057a0:	d005      	beq.n	81057ae <ADC_ConversionStop+0x10e>
 81057a2:	69bb      	ldr	r3, [r7, #24]
 81057a4:	2b03      	cmp	r3, #3
 81057a6:	d105      	bne.n	81057b4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 81057a8:	230c      	movs	r3, #12
 81057aa:	617b      	str	r3, [r7, #20]
        break;
 81057ac:	e005      	b.n	81057ba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 81057ae:	2308      	movs	r3, #8
 81057b0:	617b      	str	r3, [r7, #20]
        break;
 81057b2:	e002      	b.n	81057ba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 81057b4:	2304      	movs	r3, #4
 81057b6:	617b      	str	r3, [r7, #20]
        break;
 81057b8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 81057ba:	f7fe fe07 	bl	81043cc <HAL_GetTick>
 81057be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 81057c0:	e01b      	b.n	81057fa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 81057c2:	f7fe fe03 	bl	81043cc <HAL_GetTick>
 81057c6:	4602      	mov	r2, r0
 81057c8:	68bb      	ldr	r3, [r7, #8]
 81057ca:	1ad3      	subs	r3, r2, r3
 81057cc:	2b05      	cmp	r3, #5
 81057ce:	d914      	bls.n	81057fa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	681b      	ldr	r3, [r3, #0]
 81057d4:	689a      	ldr	r2, [r3, #8]
 81057d6:	697b      	ldr	r3, [r7, #20]
 81057d8:	4013      	ands	r3, r2
 81057da:	2b00      	cmp	r3, #0
 81057dc:	d00d      	beq.n	81057fa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81057de:	687b      	ldr	r3, [r7, #4]
 81057e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81057e2:	f043 0210 	orr.w	r2, r3, #16
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81057ee:	f043 0201 	orr.w	r2, r3, #1
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 81057f6:	2301      	movs	r3, #1
 81057f8:	e007      	b.n	810580a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	689a      	ldr	r2, [r3, #8]
 8105800:	697b      	ldr	r3, [r7, #20]
 8105802:	4013      	ands	r3, r2
 8105804:	2b00      	cmp	r3, #0
 8105806:	d1dc      	bne.n	81057c2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8105808:	2300      	movs	r3, #0
}
 810580a:	4618      	mov	r0, r3
 810580c:	3720      	adds	r7, #32
 810580e:	46bd      	mov	sp, r7
 8105810:	bd80      	pop	{r7, pc}
 8105812:	bf00      	nop
 8105814:	000cdbff 	.word	0x000cdbff

08105818 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8105818:	b580      	push	{r7, lr}
 810581a:	b084      	sub	sp, #16
 810581c:	af00      	add	r7, sp, #0
 810581e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	681b      	ldr	r3, [r3, #0]
 8105824:	4618      	mov	r0, r3
 8105826:	f7fe ffb5 	bl	8104794 <LL_ADC_IsEnabled>
 810582a:	4603      	mov	r3, r0
 810582c:	2b00      	cmp	r3, #0
 810582e:	d16e      	bne.n	810590e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	689a      	ldr	r2, [r3, #8]
 8105836:	4b38      	ldr	r3, [pc, #224]	@ (8105918 <ADC_Enable+0x100>)
 8105838:	4013      	ands	r3, r2
 810583a:	2b00      	cmp	r3, #0
 810583c:	d00d      	beq.n	810585a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105842:	f043 0210 	orr.w	r2, r3, #16
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810584e:	f043 0201 	orr.w	r2, r3, #1
 8105852:	687b      	ldr	r3, [r7, #4]
 8105854:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8105856:	2301      	movs	r3, #1
 8105858:	e05a      	b.n	8105910 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	4618      	mov	r0, r3
 8105860:	f7fe ff70 	bl	8104744 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8105864:	f7fe fdb2 	bl	81043cc <HAL_GetTick>
 8105868:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	4a2b      	ldr	r2, [pc, #172]	@ (810591c <ADC_Enable+0x104>)
 8105870:	4293      	cmp	r3, r2
 8105872:	d004      	beq.n	810587e <ADC_Enable+0x66>
 8105874:	687b      	ldr	r3, [r7, #4]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	4a29      	ldr	r2, [pc, #164]	@ (8105920 <ADC_Enable+0x108>)
 810587a:	4293      	cmp	r3, r2
 810587c:	d101      	bne.n	8105882 <ADC_Enable+0x6a>
 810587e:	4b29      	ldr	r3, [pc, #164]	@ (8105924 <ADC_Enable+0x10c>)
 8105880:	e000      	b.n	8105884 <ADC_Enable+0x6c>
 8105882:	4b29      	ldr	r3, [pc, #164]	@ (8105928 <ADC_Enable+0x110>)
 8105884:	4618      	mov	r0, r3
 8105886:	f7fe fef3 	bl	8104670 <LL_ADC_GetMultimode>
 810588a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	681b      	ldr	r3, [r3, #0]
 8105890:	4a23      	ldr	r2, [pc, #140]	@ (8105920 <ADC_Enable+0x108>)
 8105892:	4293      	cmp	r3, r2
 8105894:	d002      	beq.n	810589c <ADC_Enable+0x84>
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	e000      	b.n	810589e <ADC_Enable+0x86>
 810589c:	4b1f      	ldr	r3, [pc, #124]	@ (810591c <ADC_Enable+0x104>)
 810589e:	687a      	ldr	r2, [r7, #4]
 81058a0:	6812      	ldr	r2, [r2, #0]
 81058a2:	4293      	cmp	r3, r2
 81058a4:	d02c      	beq.n	8105900 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81058a6:	68bb      	ldr	r3, [r7, #8]
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d130      	bne.n	810590e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81058ac:	e028      	b.n	8105900 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	681b      	ldr	r3, [r3, #0]
 81058b2:	4618      	mov	r0, r3
 81058b4:	f7fe ff6e 	bl	8104794 <LL_ADC_IsEnabled>
 81058b8:	4603      	mov	r3, r0
 81058ba:	2b00      	cmp	r3, #0
 81058bc:	d104      	bne.n	81058c8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	681b      	ldr	r3, [r3, #0]
 81058c2:	4618      	mov	r0, r3
 81058c4:	f7fe ff3e 	bl	8104744 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81058c8:	f7fe fd80 	bl	81043cc <HAL_GetTick>
 81058cc:	4602      	mov	r2, r0
 81058ce:	68fb      	ldr	r3, [r7, #12]
 81058d0:	1ad3      	subs	r3, r2, r3
 81058d2:	2b02      	cmp	r3, #2
 81058d4:	d914      	bls.n	8105900 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	681b      	ldr	r3, [r3, #0]
 81058dc:	f003 0301 	and.w	r3, r3, #1
 81058e0:	2b01      	cmp	r3, #1
 81058e2:	d00d      	beq.n	8105900 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81058e8:	f043 0210 	orr.w	r2, r3, #16
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81058f0:	687b      	ldr	r3, [r7, #4]
 81058f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81058f4:	f043 0201 	orr.w	r2, r3, #1
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 81058fc:	2301      	movs	r3, #1
 81058fe:	e007      	b.n	8105910 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	681b      	ldr	r3, [r3, #0]
 8105904:	681b      	ldr	r3, [r3, #0]
 8105906:	f003 0301 	and.w	r3, r3, #1
 810590a:	2b01      	cmp	r3, #1
 810590c:	d1cf      	bne.n	81058ae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810590e:	2300      	movs	r3, #0
}
 8105910:	4618      	mov	r0, r3
 8105912:	3710      	adds	r7, #16
 8105914:	46bd      	mov	sp, r7
 8105916:	bd80      	pop	{r7, pc}
 8105918:	8000003f 	.word	0x8000003f
 810591c:	40022000 	.word	0x40022000
 8105920:	40022100 	.word	0x40022100
 8105924:	40022300 	.word	0x40022300
 8105928:	58026300 	.word	0x58026300

0810592c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 810592c:	b580      	push	{r7, lr}
 810592e:	b084      	sub	sp, #16
 8105930:	af00      	add	r7, sp, #0
 8105932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	681b      	ldr	r3, [r3, #0]
 8105938:	4618      	mov	r0, r3
 810593a:	f7fe ff3e 	bl	81047ba <LL_ADC_IsDisableOngoing>
 810593e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8105940:	687b      	ldr	r3, [r7, #4]
 8105942:	681b      	ldr	r3, [r3, #0]
 8105944:	4618      	mov	r0, r3
 8105946:	f7fe ff25 	bl	8104794 <LL_ADC_IsEnabled>
 810594a:	4603      	mov	r3, r0
 810594c:	2b00      	cmp	r3, #0
 810594e:	d047      	beq.n	81059e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8105950:	68fb      	ldr	r3, [r7, #12]
 8105952:	2b00      	cmp	r3, #0
 8105954:	d144      	bne.n	81059e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	689b      	ldr	r3, [r3, #8]
 810595c:	f003 030d 	and.w	r3, r3, #13
 8105960:	2b01      	cmp	r3, #1
 8105962:	d10c      	bne.n	810597e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	681b      	ldr	r3, [r3, #0]
 8105968:	4618      	mov	r0, r3
 810596a:	f7fe feff 	bl	810476c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	2203      	movs	r2, #3
 8105974:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8105976:	f7fe fd29 	bl	81043cc <HAL_GetTick>
 810597a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 810597c:	e029      	b.n	81059d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810597e:	687b      	ldr	r3, [r7, #4]
 8105980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105982:	f043 0210 	orr.w	r2, r3, #16
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810598e:	f043 0201 	orr.w	r2, r3, #1
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8105996:	2301      	movs	r3, #1
 8105998:	e023      	b.n	81059e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 810599a:	f7fe fd17 	bl	81043cc <HAL_GetTick>
 810599e:	4602      	mov	r2, r0
 81059a0:	68bb      	ldr	r3, [r7, #8]
 81059a2:	1ad3      	subs	r3, r2, r3
 81059a4:	2b02      	cmp	r3, #2
 81059a6:	d914      	bls.n	81059d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	681b      	ldr	r3, [r3, #0]
 81059ac:	689b      	ldr	r3, [r3, #8]
 81059ae:	f003 0301 	and.w	r3, r3, #1
 81059b2:	2b00      	cmp	r3, #0
 81059b4:	d00d      	beq.n	81059d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81059b6:	687b      	ldr	r3, [r7, #4]
 81059b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81059ba:	f043 0210 	orr.w	r2, r3, #16
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81059c6:	f043 0201 	orr.w	r2, r3, #1
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 81059ce:	2301      	movs	r3, #1
 81059d0:	e007      	b.n	81059e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	681b      	ldr	r3, [r3, #0]
 81059d6:	689b      	ldr	r3, [r3, #8]
 81059d8:	f003 0301 	and.w	r3, r3, #1
 81059dc:	2b00      	cmp	r3, #0
 81059de:	d1dc      	bne.n	810599a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81059e0:	2300      	movs	r3, #0
}
 81059e2:	4618      	mov	r0, r3
 81059e4:	3710      	adds	r7, #16
 81059e6:	46bd      	mov	sp, r7
 81059e8:	bd80      	pop	{r7, pc}
	...

081059ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81059ec:	b580      	push	{r7, lr}
 81059ee:	b084      	sub	sp, #16
 81059f0:	af00      	add	r7, sp, #0
 81059f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	681b      	ldr	r3, [r3, #0]
 81059f8:	4a7a      	ldr	r2, [pc, #488]	@ (8105be4 <ADC_ConfigureBoostMode+0x1f8>)
 81059fa:	4293      	cmp	r3, r2
 81059fc:	d004      	beq.n	8105a08 <ADC_ConfigureBoostMode+0x1c>
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	681b      	ldr	r3, [r3, #0]
 8105a02:	4a79      	ldr	r2, [pc, #484]	@ (8105be8 <ADC_ConfigureBoostMode+0x1fc>)
 8105a04:	4293      	cmp	r3, r2
 8105a06:	d109      	bne.n	8105a1c <ADC_ConfigureBoostMode+0x30>
 8105a08:	4b78      	ldr	r3, [pc, #480]	@ (8105bec <ADC_ConfigureBoostMode+0x200>)
 8105a0a:	689b      	ldr	r3, [r3, #8]
 8105a0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105a10:	2b00      	cmp	r3, #0
 8105a12:	bf14      	ite	ne
 8105a14:	2301      	movne	r3, #1
 8105a16:	2300      	moveq	r3, #0
 8105a18:	b2db      	uxtb	r3, r3
 8105a1a:	e008      	b.n	8105a2e <ADC_ConfigureBoostMode+0x42>
 8105a1c:	4b74      	ldr	r3, [pc, #464]	@ (8105bf0 <ADC_ConfigureBoostMode+0x204>)
 8105a1e:	689b      	ldr	r3, [r3, #8]
 8105a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105a24:	2b00      	cmp	r3, #0
 8105a26:	bf14      	ite	ne
 8105a28:	2301      	movne	r3, #1
 8105a2a:	2300      	moveq	r3, #0
 8105a2c:	b2db      	uxtb	r3, r3
 8105a2e:	2b00      	cmp	r3, #0
 8105a30:	d01c      	beq.n	8105a6c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8105a32:	f002 fa71 	bl	8107f18 <HAL_RCC_GetHCLKFreq>
 8105a36:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	685b      	ldr	r3, [r3, #4]
 8105a3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105a40:	d010      	beq.n	8105a64 <ADC_ConfigureBoostMode+0x78>
 8105a42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105a46:	d873      	bhi.n	8105b30 <ADC_ConfigureBoostMode+0x144>
 8105a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105a4c:	d002      	beq.n	8105a54 <ADC_ConfigureBoostMode+0x68>
 8105a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105a52:	d16d      	bne.n	8105b30 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	685b      	ldr	r3, [r3, #4]
 8105a58:	0c1b      	lsrs	r3, r3, #16
 8105a5a:	68fa      	ldr	r2, [r7, #12]
 8105a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8105a60:	60fb      	str	r3, [r7, #12]
        break;
 8105a62:	e068      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8105a64:	68fb      	ldr	r3, [r7, #12]
 8105a66:	089b      	lsrs	r3, r3, #2
 8105a68:	60fb      	str	r3, [r7, #12]
        break;
 8105a6a:	e064      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8105a6c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8105a70:	f04f 0100 	mov.w	r1, #0
 8105a74:	f003 fcb8 	bl	81093e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8105a78:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8105a7a:	687b      	ldr	r3, [r7, #4]
 8105a7c:	685b      	ldr	r3, [r3, #4]
 8105a7e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8105a82:	d051      	beq.n	8105b28 <ADC_ConfigureBoostMode+0x13c>
 8105a84:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8105a88:	d854      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105a8a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8105a8e:	d047      	beq.n	8105b20 <ADC_ConfigureBoostMode+0x134>
 8105a90:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8105a94:	d84e      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105a96:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8105a9a:	d03d      	beq.n	8105b18 <ADC_ConfigureBoostMode+0x12c>
 8105a9c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8105aa0:	d848      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105aa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105aa6:	d033      	beq.n	8105b10 <ADC_ConfigureBoostMode+0x124>
 8105aa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105aac:	d842      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105aae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8105ab2:	d029      	beq.n	8105b08 <ADC_ConfigureBoostMode+0x11c>
 8105ab4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8105ab8:	d83c      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105aba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8105abe:	d01a      	beq.n	8105af6 <ADC_ConfigureBoostMode+0x10a>
 8105ac0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8105ac4:	d836      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105ac6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8105aca:	d014      	beq.n	8105af6 <ADC_ConfigureBoostMode+0x10a>
 8105acc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8105ad0:	d830      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105ad6:	d00e      	beq.n	8105af6 <ADC_ConfigureBoostMode+0x10a>
 8105ad8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105adc:	d82a      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105ade:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8105ae2:	d008      	beq.n	8105af6 <ADC_ConfigureBoostMode+0x10a>
 8105ae4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8105ae8:	d824      	bhi.n	8105b34 <ADC_ConfigureBoostMode+0x148>
 8105aea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105aee:	d002      	beq.n	8105af6 <ADC_ConfigureBoostMode+0x10a>
 8105af0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8105af4:	d11e      	bne.n	8105b34 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	685b      	ldr	r3, [r3, #4]
 8105afa:	0c9b      	lsrs	r3, r3, #18
 8105afc:	005b      	lsls	r3, r3, #1
 8105afe:	68fa      	ldr	r2, [r7, #12]
 8105b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8105b04:	60fb      	str	r3, [r7, #12]
        break;
 8105b06:	e016      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8105b08:	68fb      	ldr	r3, [r7, #12]
 8105b0a:	091b      	lsrs	r3, r3, #4
 8105b0c:	60fb      	str	r3, [r7, #12]
        break;
 8105b0e:	e012      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8105b10:	68fb      	ldr	r3, [r7, #12]
 8105b12:	095b      	lsrs	r3, r3, #5
 8105b14:	60fb      	str	r3, [r7, #12]
        break;
 8105b16:	e00e      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8105b18:	68fb      	ldr	r3, [r7, #12]
 8105b1a:	099b      	lsrs	r3, r3, #6
 8105b1c:	60fb      	str	r3, [r7, #12]
        break;
 8105b1e:	e00a      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8105b20:	68fb      	ldr	r3, [r7, #12]
 8105b22:	09db      	lsrs	r3, r3, #7
 8105b24:	60fb      	str	r3, [r7, #12]
        break;
 8105b26:	e006      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8105b28:	68fb      	ldr	r3, [r7, #12]
 8105b2a:	0a1b      	lsrs	r3, r3, #8
 8105b2c:	60fb      	str	r3, [r7, #12]
        break;
 8105b2e:	e002      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
        break;
 8105b30:	bf00      	nop
 8105b32:	e000      	b.n	8105b36 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8105b34:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8105b36:	f7fe fc79 	bl	810442c <HAL_GetREVID>
 8105b3a:	4603      	mov	r3, r0
 8105b3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8105b40:	4293      	cmp	r3, r2
 8105b42:	d815      	bhi.n	8105b70 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8105b44:	68fb      	ldr	r3, [r7, #12]
 8105b46:	4a2b      	ldr	r2, [pc, #172]	@ (8105bf4 <ADC_ConfigureBoostMode+0x208>)
 8105b48:	4293      	cmp	r3, r2
 8105b4a:	d908      	bls.n	8105b5e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	689a      	ldr	r2, [r3, #8]
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	681b      	ldr	r3, [r3, #0]
 8105b56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105b5a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8105b5c:	e03e      	b.n	8105bdc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	681b      	ldr	r3, [r3, #0]
 8105b62:	689a      	ldr	r2, [r3, #8]
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105b6c:	609a      	str	r2, [r3, #8]
}
 8105b6e:	e035      	b.n	8105bdc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8105b70:	68fb      	ldr	r3, [r7, #12]
 8105b72:	085b      	lsrs	r3, r3, #1
 8105b74:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8105b76:	68fb      	ldr	r3, [r7, #12]
 8105b78:	4a1f      	ldr	r2, [pc, #124]	@ (8105bf8 <ADC_ConfigureBoostMode+0x20c>)
 8105b7a:	4293      	cmp	r3, r2
 8105b7c:	d808      	bhi.n	8105b90 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	681b      	ldr	r3, [r3, #0]
 8105b82:	689a      	ldr	r2, [r3, #8]
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8105b8c:	609a      	str	r2, [r3, #8]
}
 8105b8e:	e025      	b.n	8105bdc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8105b90:	68fb      	ldr	r3, [r7, #12]
 8105b92:	4a1a      	ldr	r2, [pc, #104]	@ (8105bfc <ADC_ConfigureBoostMode+0x210>)
 8105b94:	4293      	cmp	r3, r2
 8105b96:	d80a      	bhi.n	8105bae <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	689b      	ldr	r3, [r3, #8]
 8105b9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8105ba2:	687b      	ldr	r3, [r7, #4]
 8105ba4:	681b      	ldr	r3, [r3, #0]
 8105ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105baa:	609a      	str	r2, [r3, #8]
}
 8105bac:	e016      	b.n	8105bdc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8105bae:	68fb      	ldr	r3, [r7, #12]
 8105bb0:	4a13      	ldr	r2, [pc, #76]	@ (8105c00 <ADC_ConfigureBoostMode+0x214>)
 8105bb2:	4293      	cmp	r3, r2
 8105bb4:	d80a      	bhi.n	8105bcc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8105bb6:	687b      	ldr	r3, [r7, #4]
 8105bb8:	681b      	ldr	r3, [r3, #0]
 8105bba:	689b      	ldr	r3, [r3, #8]
 8105bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8105bc0:	687b      	ldr	r3, [r7, #4]
 8105bc2:	681b      	ldr	r3, [r3, #0]
 8105bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8105bc8:	609a      	str	r2, [r3, #8]
}
 8105bca:	e007      	b.n	8105bdc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8105bcc:	687b      	ldr	r3, [r7, #4]
 8105bce:	681b      	ldr	r3, [r3, #0]
 8105bd0:	689a      	ldr	r2, [r3, #8]
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	681b      	ldr	r3, [r3, #0]
 8105bd6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8105bda:	609a      	str	r2, [r3, #8]
}
 8105bdc:	bf00      	nop
 8105bde:	3710      	adds	r7, #16
 8105be0:	46bd      	mov	sp, r7
 8105be2:	bd80      	pop	{r7, pc}
 8105be4:	40022000 	.word	0x40022000
 8105be8:	40022100 	.word	0x40022100
 8105bec:	40022300 	.word	0x40022300
 8105bf0:	58026300 	.word	0x58026300
 8105bf4:	01312d00 	.word	0x01312d00
 8105bf8:	005f5e10 	.word	0x005f5e10
 8105bfc:	00bebc20 	.word	0x00bebc20
 8105c00:	017d7840 	.word	0x017d7840

08105c04 <LL_ADC_IsEnabled>:
{
 8105c04:	b480      	push	{r7}
 8105c06:	b083      	sub	sp, #12
 8105c08:	af00      	add	r7, sp, #0
 8105c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	689b      	ldr	r3, [r3, #8]
 8105c10:	f003 0301 	and.w	r3, r3, #1
 8105c14:	2b01      	cmp	r3, #1
 8105c16:	d101      	bne.n	8105c1c <LL_ADC_IsEnabled+0x18>
 8105c18:	2301      	movs	r3, #1
 8105c1a:	e000      	b.n	8105c1e <LL_ADC_IsEnabled+0x1a>
 8105c1c:	2300      	movs	r3, #0
}
 8105c1e:	4618      	mov	r0, r3
 8105c20:	370c      	adds	r7, #12
 8105c22:	46bd      	mov	sp, r7
 8105c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c28:	4770      	bx	lr

08105c2a <LL_ADC_REG_IsConversionOngoing>:
{
 8105c2a:	b480      	push	{r7}
 8105c2c:	b083      	sub	sp, #12
 8105c2e:	af00      	add	r7, sp, #0
 8105c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	689b      	ldr	r3, [r3, #8]
 8105c36:	f003 0304 	and.w	r3, r3, #4
 8105c3a:	2b04      	cmp	r3, #4
 8105c3c:	d101      	bne.n	8105c42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8105c3e:	2301      	movs	r3, #1
 8105c40:	e000      	b.n	8105c44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8105c42:	2300      	movs	r3, #0
}
 8105c44:	4618      	mov	r0, r3
 8105c46:	370c      	adds	r7, #12
 8105c48:	46bd      	mov	sp, r7
 8105c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c4e:	4770      	bx	lr

08105c50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8105c50:	b590      	push	{r4, r7, lr}
 8105c52:	b09f      	sub	sp, #124	@ 0x7c
 8105c54:	af00      	add	r7, sp, #0
 8105c56:	6078      	str	r0, [r7, #4]
 8105c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8105c5a:	2300      	movs	r3, #0
 8105c5c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8105c60:	687b      	ldr	r3, [r7, #4]
 8105c62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8105c66:	2b01      	cmp	r3, #1
 8105c68:	d101      	bne.n	8105c6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8105c6a:	2302      	movs	r3, #2
 8105c6c:	e0c4      	b.n	8105df8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	2201      	movs	r2, #1
 8105c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8105c76:	2300      	movs	r3, #0
 8105c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8105c7a:	2300      	movs	r3, #0
 8105c7c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	4a5f      	ldr	r2, [pc, #380]	@ (8105e00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105c84:	4293      	cmp	r3, r2
 8105c86:	d102      	bne.n	8105c8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8105c88:	4b5e      	ldr	r3, [pc, #376]	@ (8105e04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105c8a:	60bb      	str	r3, [r7, #8]
 8105c8c:	e001      	b.n	8105c92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8105c8e:	2300      	movs	r3, #0
 8105c90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8105c92:	68bb      	ldr	r3, [r7, #8]
 8105c94:	2b00      	cmp	r3, #0
 8105c96:	d10b      	bne.n	8105cb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105c9c:	f043 0220 	orr.w	r2, r3, #32
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	2200      	movs	r2, #0
 8105ca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8105cac:	2301      	movs	r3, #1
 8105cae:	e0a3      	b.n	8105df8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8105cb0:	68bb      	ldr	r3, [r7, #8]
 8105cb2:	4618      	mov	r0, r3
 8105cb4:	f7ff ffb9 	bl	8105c2a <LL_ADC_REG_IsConversionOngoing>
 8105cb8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	681b      	ldr	r3, [r3, #0]
 8105cbe:	4618      	mov	r0, r3
 8105cc0:	f7ff ffb3 	bl	8105c2a <LL_ADC_REG_IsConversionOngoing>
 8105cc4:	4603      	mov	r3, r0
 8105cc6:	2b00      	cmp	r3, #0
 8105cc8:	f040 8085 	bne.w	8105dd6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8105ccc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105cce:	2b00      	cmp	r3, #0
 8105cd0:	f040 8081 	bne.w	8105dd6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	681b      	ldr	r3, [r3, #0]
 8105cd8:	4a49      	ldr	r2, [pc, #292]	@ (8105e00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105cda:	4293      	cmp	r3, r2
 8105cdc:	d004      	beq.n	8105ce8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	681b      	ldr	r3, [r3, #0]
 8105ce2:	4a48      	ldr	r2, [pc, #288]	@ (8105e04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105ce4:	4293      	cmp	r3, r2
 8105ce6:	d101      	bne.n	8105cec <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8105ce8:	4b47      	ldr	r3, [pc, #284]	@ (8105e08 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8105cea:	e000      	b.n	8105cee <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8105cec:	4b47      	ldr	r3, [pc, #284]	@ (8105e0c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8105cee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105cf0:	683b      	ldr	r3, [r7, #0]
 8105cf2:	681b      	ldr	r3, [r3, #0]
 8105cf4:	2b00      	cmp	r3, #0
 8105cf6:	d03b      	beq.n	8105d70 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8105cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105cfa:	689b      	ldr	r3, [r3, #8]
 8105cfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8105d00:	683b      	ldr	r3, [r7, #0]
 8105d02:	685b      	ldr	r3, [r3, #4]
 8105d04:	431a      	orrs	r2, r3
 8105d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105d08:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	681b      	ldr	r3, [r3, #0]
 8105d0e:	4a3c      	ldr	r2, [pc, #240]	@ (8105e00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105d10:	4293      	cmp	r3, r2
 8105d12:	d004      	beq.n	8105d1e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	681b      	ldr	r3, [r3, #0]
 8105d18:	4a3a      	ldr	r2, [pc, #232]	@ (8105e04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105d1a:	4293      	cmp	r3, r2
 8105d1c:	d10e      	bne.n	8105d3c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8105d1e:	4838      	ldr	r0, [pc, #224]	@ (8105e00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105d20:	f7ff ff70 	bl	8105c04 <LL_ADC_IsEnabled>
 8105d24:	4604      	mov	r4, r0
 8105d26:	4837      	ldr	r0, [pc, #220]	@ (8105e04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105d28:	f7ff ff6c 	bl	8105c04 <LL_ADC_IsEnabled>
 8105d2c:	4603      	mov	r3, r0
 8105d2e:	4323      	orrs	r3, r4
 8105d30:	2b00      	cmp	r3, #0
 8105d32:	bf0c      	ite	eq
 8105d34:	2301      	moveq	r3, #1
 8105d36:	2300      	movne	r3, #0
 8105d38:	b2db      	uxtb	r3, r3
 8105d3a:	e008      	b.n	8105d4e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8105d3c:	4834      	ldr	r0, [pc, #208]	@ (8105e10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8105d3e:	f7ff ff61 	bl	8105c04 <LL_ADC_IsEnabled>
 8105d42:	4603      	mov	r3, r0
 8105d44:	2b00      	cmp	r3, #0
 8105d46:	bf0c      	ite	eq
 8105d48:	2301      	moveq	r3, #1
 8105d4a:	2300      	movne	r3, #0
 8105d4c:	b2db      	uxtb	r3, r3
 8105d4e:	2b00      	cmp	r3, #0
 8105d50:	d04b      	beq.n	8105dea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8105d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105d54:	689b      	ldr	r3, [r3, #8]
 8105d56:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8105d5a:	f023 030f 	bic.w	r3, r3, #15
 8105d5e:	683a      	ldr	r2, [r7, #0]
 8105d60:	6811      	ldr	r1, [r2, #0]
 8105d62:	683a      	ldr	r2, [r7, #0]
 8105d64:	6892      	ldr	r2, [r2, #8]
 8105d66:	430a      	orrs	r2, r1
 8105d68:	431a      	orrs	r2, r3
 8105d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105d6c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105d6e:	e03c      	b.n	8105dea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8105d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105d72:	689b      	ldr	r3, [r3, #8]
 8105d74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8105d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105d7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105d7c:	687b      	ldr	r3, [r7, #4]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	4a1f      	ldr	r2, [pc, #124]	@ (8105e00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105d82:	4293      	cmp	r3, r2
 8105d84:	d004      	beq.n	8105d90 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8105e04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105d8c:	4293      	cmp	r3, r2
 8105d8e:	d10e      	bne.n	8105dae <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8105d90:	481b      	ldr	r0, [pc, #108]	@ (8105e00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105d92:	f7ff ff37 	bl	8105c04 <LL_ADC_IsEnabled>
 8105d96:	4604      	mov	r4, r0
 8105d98:	481a      	ldr	r0, [pc, #104]	@ (8105e04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105d9a:	f7ff ff33 	bl	8105c04 <LL_ADC_IsEnabled>
 8105d9e:	4603      	mov	r3, r0
 8105da0:	4323      	orrs	r3, r4
 8105da2:	2b00      	cmp	r3, #0
 8105da4:	bf0c      	ite	eq
 8105da6:	2301      	moveq	r3, #1
 8105da8:	2300      	movne	r3, #0
 8105daa:	b2db      	uxtb	r3, r3
 8105dac:	e008      	b.n	8105dc0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8105dae:	4818      	ldr	r0, [pc, #96]	@ (8105e10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8105db0:	f7ff ff28 	bl	8105c04 <LL_ADC_IsEnabled>
 8105db4:	4603      	mov	r3, r0
 8105db6:	2b00      	cmp	r3, #0
 8105db8:	bf0c      	ite	eq
 8105dba:	2301      	moveq	r3, #1
 8105dbc:	2300      	movne	r3, #0
 8105dbe:	b2db      	uxtb	r3, r3
 8105dc0:	2b00      	cmp	r3, #0
 8105dc2:	d012      	beq.n	8105dea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8105dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105dc6:	689b      	ldr	r3, [r3, #8]
 8105dc8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8105dcc:	f023 030f 	bic.w	r3, r3, #15
 8105dd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8105dd2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105dd4:	e009      	b.n	8105dea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105dda:	f043 0220 	orr.w	r2, r3, #32
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8105de2:	2301      	movs	r3, #1
 8105de4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8105de8:	e000      	b.n	8105dec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105dea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	2200      	movs	r2, #0
 8105df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8105df4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8105df8:	4618      	mov	r0, r3
 8105dfa:	377c      	adds	r7, #124	@ 0x7c
 8105dfc:	46bd      	mov	sp, r7
 8105dfe:	bd90      	pop	{r4, r7, pc}
 8105e00:	40022000 	.word	0x40022000
 8105e04:	40022100 	.word	0x40022100
 8105e08:	40022300 	.word	0x40022300
 8105e0c:	58026300 	.word	0x58026300
 8105e10:	58026000 	.word	0x58026000

08105e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105e14:	b480      	push	{r7}
 8105e16:	b085      	sub	sp, #20
 8105e18:	af00      	add	r7, sp, #0
 8105e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	f003 0307 	and.w	r3, r3, #7
 8105e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8105e24:	4b0c      	ldr	r3, [pc, #48]	@ (8105e58 <__NVIC_SetPriorityGrouping+0x44>)
 8105e26:	68db      	ldr	r3, [r3, #12]
 8105e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8105e2a:	68ba      	ldr	r2, [r7, #8]
 8105e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8105e30:	4013      	ands	r3, r2
 8105e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8105e34:	68fb      	ldr	r3, [r7, #12]
 8105e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105e38:	68bb      	ldr	r3, [r7, #8]
 8105e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8105e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8105e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8105e46:	4a04      	ldr	r2, [pc, #16]	@ (8105e58 <__NVIC_SetPriorityGrouping+0x44>)
 8105e48:	68bb      	ldr	r3, [r7, #8]
 8105e4a:	60d3      	str	r3, [r2, #12]
}
 8105e4c:	bf00      	nop
 8105e4e:	3714      	adds	r7, #20
 8105e50:	46bd      	mov	sp, r7
 8105e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e56:	4770      	bx	lr
 8105e58:	e000ed00 	.word	0xe000ed00

08105e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8105e5c:	b480      	push	{r7}
 8105e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8105e60:	4b04      	ldr	r3, [pc, #16]	@ (8105e74 <__NVIC_GetPriorityGrouping+0x18>)
 8105e62:	68db      	ldr	r3, [r3, #12]
 8105e64:	0a1b      	lsrs	r3, r3, #8
 8105e66:	f003 0307 	and.w	r3, r3, #7
}
 8105e6a:	4618      	mov	r0, r3
 8105e6c:	46bd      	mov	sp, r7
 8105e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e72:	4770      	bx	lr
 8105e74:	e000ed00 	.word	0xe000ed00

08105e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105e78:	b480      	push	{r7}
 8105e7a:	b083      	sub	sp, #12
 8105e7c:	af00      	add	r7, sp, #0
 8105e7e:	4603      	mov	r3, r0
 8105e80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105e86:	2b00      	cmp	r3, #0
 8105e88:	db0b      	blt.n	8105ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8105e8a:	88fb      	ldrh	r3, [r7, #6]
 8105e8c:	f003 021f 	and.w	r2, r3, #31
 8105e90:	4907      	ldr	r1, [pc, #28]	@ (8105eb0 <__NVIC_EnableIRQ+0x38>)
 8105e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105e96:	095b      	lsrs	r3, r3, #5
 8105e98:	2001      	movs	r0, #1
 8105e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8105e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105ea2:	bf00      	nop
 8105ea4:	370c      	adds	r7, #12
 8105ea6:	46bd      	mov	sp, r7
 8105ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eac:	4770      	bx	lr
 8105eae:	bf00      	nop
 8105eb0:	e000e100 	.word	0xe000e100

08105eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105eb4:	b480      	push	{r7}
 8105eb6:	b083      	sub	sp, #12
 8105eb8:	af00      	add	r7, sp, #0
 8105eba:	4603      	mov	r3, r0
 8105ebc:	6039      	str	r1, [r7, #0]
 8105ebe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105ec4:	2b00      	cmp	r3, #0
 8105ec6:	db0a      	blt.n	8105ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105ec8:	683b      	ldr	r3, [r7, #0]
 8105eca:	b2da      	uxtb	r2, r3
 8105ecc:	490c      	ldr	r1, [pc, #48]	@ (8105f00 <__NVIC_SetPriority+0x4c>)
 8105ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105ed2:	0112      	lsls	r2, r2, #4
 8105ed4:	b2d2      	uxtb	r2, r2
 8105ed6:	440b      	add	r3, r1
 8105ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8105edc:	e00a      	b.n	8105ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105ede:	683b      	ldr	r3, [r7, #0]
 8105ee0:	b2da      	uxtb	r2, r3
 8105ee2:	4908      	ldr	r1, [pc, #32]	@ (8105f04 <__NVIC_SetPriority+0x50>)
 8105ee4:	88fb      	ldrh	r3, [r7, #6]
 8105ee6:	f003 030f 	and.w	r3, r3, #15
 8105eea:	3b04      	subs	r3, #4
 8105eec:	0112      	lsls	r2, r2, #4
 8105eee:	b2d2      	uxtb	r2, r2
 8105ef0:	440b      	add	r3, r1
 8105ef2:	761a      	strb	r2, [r3, #24]
}
 8105ef4:	bf00      	nop
 8105ef6:	370c      	adds	r7, #12
 8105ef8:	46bd      	mov	sp, r7
 8105efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105efe:	4770      	bx	lr
 8105f00:	e000e100 	.word	0xe000e100
 8105f04:	e000ed00 	.word	0xe000ed00

08105f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105f08:	b480      	push	{r7}
 8105f0a:	b089      	sub	sp, #36	@ 0x24
 8105f0c:	af00      	add	r7, sp, #0
 8105f0e:	60f8      	str	r0, [r7, #12]
 8105f10:	60b9      	str	r1, [r7, #8]
 8105f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8105f14:	68fb      	ldr	r3, [r7, #12]
 8105f16:	f003 0307 	and.w	r3, r3, #7
 8105f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8105f1c:	69fb      	ldr	r3, [r7, #28]
 8105f1e:	f1c3 0307 	rsb	r3, r3, #7
 8105f22:	2b04      	cmp	r3, #4
 8105f24:	bf28      	it	cs
 8105f26:	2304      	movcs	r3, #4
 8105f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8105f2a:	69fb      	ldr	r3, [r7, #28]
 8105f2c:	3304      	adds	r3, #4
 8105f2e:	2b06      	cmp	r3, #6
 8105f30:	d902      	bls.n	8105f38 <NVIC_EncodePriority+0x30>
 8105f32:	69fb      	ldr	r3, [r7, #28]
 8105f34:	3b03      	subs	r3, #3
 8105f36:	e000      	b.n	8105f3a <NVIC_EncodePriority+0x32>
 8105f38:	2300      	movs	r3, #0
 8105f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8105f40:	69bb      	ldr	r3, [r7, #24]
 8105f42:	fa02 f303 	lsl.w	r3, r2, r3
 8105f46:	43da      	mvns	r2, r3
 8105f48:	68bb      	ldr	r3, [r7, #8]
 8105f4a:	401a      	ands	r2, r3
 8105f4c:	697b      	ldr	r3, [r7, #20]
 8105f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8105f50:	f04f 31ff 	mov.w	r1, #4294967295
 8105f54:	697b      	ldr	r3, [r7, #20]
 8105f56:	fa01 f303 	lsl.w	r3, r1, r3
 8105f5a:	43d9      	mvns	r1, r3
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105f60:	4313      	orrs	r3, r2
         );
}
 8105f62:	4618      	mov	r0, r3
 8105f64:	3724      	adds	r7, #36	@ 0x24
 8105f66:	46bd      	mov	sp, r7
 8105f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f6c:	4770      	bx	lr
	...

08105f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105f70:	b580      	push	{r7, lr}
 8105f72:	b082      	sub	sp, #8
 8105f74:	af00      	add	r7, sp, #0
 8105f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	3b01      	subs	r3, #1
 8105f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105f80:	d301      	bcc.n	8105f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8105f82:	2301      	movs	r3, #1
 8105f84:	e00f      	b.n	8105fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8105f86:	4a0a      	ldr	r2, [pc, #40]	@ (8105fb0 <SysTick_Config+0x40>)
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	3b01      	subs	r3, #1
 8105f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8105f8e:	210f      	movs	r1, #15
 8105f90:	f04f 30ff 	mov.w	r0, #4294967295
 8105f94:	f7ff ff8e 	bl	8105eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8105f98:	4b05      	ldr	r3, [pc, #20]	@ (8105fb0 <SysTick_Config+0x40>)
 8105f9a:	2200      	movs	r2, #0
 8105f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8105f9e:	4b04      	ldr	r3, [pc, #16]	@ (8105fb0 <SysTick_Config+0x40>)
 8105fa0:	2207      	movs	r2, #7
 8105fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105fa4:	2300      	movs	r3, #0
}
 8105fa6:	4618      	mov	r0, r3
 8105fa8:	3708      	adds	r7, #8
 8105faa:	46bd      	mov	sp, r7
 8105fac:	bd80      	pop	{r7, pc}
 8105fae:	bf00      	nop
 8105fb0:	e000e010 	.word	0xe000e010

08105fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105fb4:	b580      	push	{r7, lr}
 8105fb6:	b082      	sub	sp, #8
 8105fb8:	af00      	add	r7, sp, #0
 8105fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8105fbc:	6878      	ldr	r0, [r7, #4]
 8105fbe:	f7ff ff29 	bl	8105e14 <__NVIC_SetPriorityGrouping>
}
 8105fc2:	bf00      	nop
 8105fc4:	3708      	adds	r7, #8
 8105fc6:	46bd      	mov	sp, r7
 8105fc8:	bd80      	pop	{r7, pc}

08105fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105fca:	b580      	push	{r7, lr}
 8105fcc:	b086      	sub	sp, #24
 8105fce:	af00      	add	r7, sp, #0
 8105fd0:	4603      	mov	r3, r0
 8105fd2:	60b9      	str	r1, [r7, #8]
 8105fd4:	607a      	str	r2, [r7, #4]
 8105fd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8105fd8:	f7ff ff40 	bl	8105e5c <__NVIC_GetPriorityGrouping>
 8105fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8105fde:	687a      	ldr	r2, [r7, #4]
 8105fe0:	68b9      	ldr	r1, [r7, #8]
 8105fe2:	6978      	ldr	r0, [r7, #20]
 8105fe4:	f7ff ff90 	bl	8105f08 <NVIC_EncodePriority>
 8105fe8:	4602      	mov	r2, r0
 8105fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8105fee:	4611      	mov	r1, r2
 8105ff0:	4618      	mov	r0, r3
 8105ff2:	f7ff ff5f 	bl	8105eb4 <__NVIC_SetPriority>
}
 8105ff6:	bf00      	nop
 8105ff8:	3718      	adds	r7, #24
 8105ffa:	46bd      	mov	sp, r7
 8105ffc:	bd80      	pop	{r7, pc}

08105ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105ffe:	b580      	push	{r7, lr}
 8106000:	b082      	sub	sp, #8
 8106002:	af00      	add	r7, sp, #0
 8106004:	4603      	mov	r3, r0
 8106006:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8106008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810600c:	4618      	mov	r0, r3
 810600e:	f7ff ff33 	bl	8105e78 <__NVIC_EnableIRQ>
}
 8106012:	bf00      	nop
 8106014:	3708      	adds	r7, #8
 8106016:	46bd      	mov	sp, r7
 8106018:	bd80      	pop	{r7, pc}

0810601a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810601a:	b580      	push	{r7, lr}
 810601c:	b082      	sub	sp, #8
 810601e:	af00      	add	r7, sp, #0
 8106020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8106022:	6878      	ldr	r0, [r7, #4]
 8106024:	f7ff ffa4 	bl	8105f70 <SysTick_Config>
 8106028:	4603      	mov	r3, r0
}
 810602a:	4618      	mov	r0, r3
 810602c:	3708      	adds	r7, #8
 810602e:	46bd      	mov	sp, r7
 8106030:	bd80      	pop	{r7, pc}
	...

08106034 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8106034:	b480      	push	{r7}
 8106036:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8106038:	4b07      	ldr	r3, [pc, #28]	@ (8106058 <HAL_GetCurrentCPUID+0x24>)
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	091b      	lsrs	r3, r3, #4
 810603e:	f003 030f 	and.w	r3, r3, #15
 8106042:	2b07      	cmp	r3, #7
 8106044:	d101      	bne.n	810604a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8106046:	2303      	movs	r3, #3
 8106048:	e000      	b.n	810604c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810604a:	2301      	movs	r3, #1
  }
}
 810604c:	4618      	mov	r0, r3
 810604e:	46bd      	mov	sp, r7
 8106050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106054:	4770      	bx	lr
 8106056:	bf00      	nop
 8106058:	e000ed00 	.word	0xe000ed00

0810605c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 810605c:	b580      	push	{r7, lr}
 810605e:	b086      	sub	sp, #24
 8106060:	af00      	add	r7, sp, #0
 8106062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8106064:	f7fe f9b2 	bl	81043cc <HAL_GetTick>
 8106068:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	2b00      	cmp	r3, #0
 810606e:	d101      	bne.n	8106074 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8106070:	2301      	movs	r3, #1
 8106072:	e2dc      	b.n	810662e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8106074:	687b      	ldr	r3, [r7, #4]
 8106076:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 810607a:	b2db      	uxtb	r3, r3
 810607c:	2b02      	cmp	r3, #2
 810607e:	d008      	beq.n	8106092 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8106080:	687b      	ldr	r3, [r7, #4]
 8106082:	2280      	movs	r2, #128	@ 0x80
 8106084:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	2200      	movs	r2, #0
 810608a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 810608e:	2301      	movs	r3, #1
 8106090:	e2cd      	b.n	810662e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	681b      	ldr	r3, [r3, #0]
 8106096:	4a76      	ldr	r2, [pc, #472]	@ (8106270 <HAL_DMA_Abort+0x214>)
 8106098:	4293      	cmp	r3, r2
 810609a:	d04a      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 810609c:	687b      	ldr	r3, [r7, #4]
 810609e:	681b      	ldr	r3, [r3, #0]
 81060a0:	4a74      	ldr	r2, [pc, #464]	@ (8106274 <HAL_DMA_Abort+0x218>)
 81060a2:	4293      	cmp	r3, r2
 81060a4:	d045      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060a6:	687b      	ldr	r3, [r7, #4]
 81060a8:	681b      	ldr	r3, [r3, #0]
 81060aa:	4a73      	ldr	r2, [pc, #460]	@ (8106278 <HAL_DMA_Abort+0x21c>)
 81060ac:	4293      	cmp	r3, r2
 81060ae:	d040      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060b0:	687b      	ldr	r3, [r7, #4]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	4a71      	ldr	r2, [pc, #452]	@ (810627c <HAL_DMA_Abort+0x220>)
 81060b6:	4293      	cmp	r3, r2
 81060b8:	d03b      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	681b      	ldr	r3, [r3, #0]
 81060be:	4a70      	ldr	r2, [pc, #448]	@ (8106280 <HAL_DMA_Abort+0x224>)
 81060c0:	4293      	cmp	r3, r2
 81060c2:	d036      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	4a6e      	ldr	r2, [pc, #440]	@ (8106284 <HAL_DMA_Abort+0x228>)
 81060ca:	4293      	cmp	r3, r2
 81060cc:	d031      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	681b      	ldr	r3, [r3, #0]
 81060d2:	4a6d      	ldr	r2, [pc, #436]	@ (8106288 <HAL_DMA_Abort+0x22c>)
 81060d4:	4293      	cmp	r3, r2
 81060d6:	d02c      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	681b      	ldr	r3, [r3, #0]
 81060dc:	4a6b      	ldr	r2, [pc, #428]	@ (810628c <HAL_DMA_Abort+0x230>)
 81060de:	4293      	cmp	r3, r2
 81060e0:	d027      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060e2:	687b      	ldr	r3, [r7, #4]
 81060e4:	681b      	ldr	r3, [r3, #0]
 81060e6:	4a6a      	ldr	r2, [pc, #424]	@ (8106290 <HAL_DMA_Abort+0x234>)
 81060e8:	4293      	cmp	r3, r2
 81060ea:	d022      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	681b      	ldr	r3, [r3, #0]
 81060f0:	4a68      	ldr	r2, [pc, #416]	@ (8106294 <HAL_DMA_Abort+0x238>)
 81060f2:	4293      	cmp	r3, r2
 81060f4:	d01d      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	4a67      	ldr	r2, [pc, #412]	@ (8106298 <HAL_DMA_Abort+0x23c>)
 81060fc:	4293      	cmp	r3, r2
 81060fe:	d018      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	681b      	ldr	r3, [r3, #0]
 8106104:	4a65      	ldr	r2, [pc, #404]	@ (810629c <HAL_DMA_Abort+0x240>)
 8106106:	4293      	cmp	r3, r2
 8106108:	d013      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 810610a:	687b      	ldr	r3, [r7, #4]
 810610c:	681b      	ldr	r3, [r3, #0]
 810610e:	4a64      	ldr	r2, [pc, #400]	@ (81062a0 <HAL_DMA_Abort+0x244>)
 8106110:	4293      	cmp	r3, r2
 8106112:	d00e      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	681b      	ldr	r3, [r3, #0]
 8106118:	4a62      	ldr	r2, [pc, #392]	@ (81062a4 <HAL_DMA_Abort+0x248>)
 810611a:	4293      	cmp	r3, r2
 810611c:	d009      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	681b      	ldr	r3, [r3, #0]
 8106122:	4a61      	ldr	r2, [pc, #388]	@ (81062a8 <HAL_DMA_Abort+0x24c>)
 8106124:	4293      	cmp	r3, r2
 8106126:	d004      	beq.n	8106132 <HAL_DMA_Abort+0xd6>
 8106128:	687b      	ldr	r3, [r7, #4]
 810612a:	681b      	ldr	r3, [r3, #0]
 810612c:	4a5f      	ldr	r2, [pc, #380]	@ (81062ac <HAL_DMA_Abort+0x250>)
 810612e:	4293      	cmp	r3, r2
 8106130:	d101      	bne.n	8106136 <HAL_DMA_Abort+0xda>
 8106132:	2301      	movs	r3, #1
 8106134:	e000      	b.n	8106138 <HAL_DMA_Abort+0xdc>
 8106136:	2300      	movs	r3, #0
 8106138:	2b00      	cmp	r3, #0
 810613a:	d013      	beq.n	8106164 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	681a      	ldr	r2, [r3, #0]
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	681b      	ldr	r3, [r3, #0]
 8106146:	f022 021e 	bic.w	r2, r2, #30
 810614a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	681b      	ldr	r3, [r3, #0]
 8106150:	695a      	ldr	r2, [r3, #20]
 8106152:	687b      	ldr	r3, [r7, #4]
 8106154:	681b      	ldr	r3, [r3, #0]
 8106156:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810615a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	681b      	ldr	r3, [r3, #0]
 8106160:	617b      	str	r3, [r7, #20]
 8106162:	e00a      	b.n	810617a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	681a      	ldr	r2, [r3, #0]
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	f022 020e 	bic.w	r2, r2, #14
 8106172:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	681b      	ldr	r3, [r3, #0]
 810617e:	4a3c      	ldr	r2, [pc, #240]	@ (8106270 <HAL_DMA_Abort+0x214>)
 8106180:	4293      	cmp	r3, r2
 8106182:	d072      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106184:	687b      	ldr	r3, [r7, #4]
 8106186:	681b      	ldr	r3, [r3, #0]
 8106188:	4a3a      	ldr	r2, [pc, #232]	@ (8106274 <HAL_DMA_Abort+0x218>)
 810618a:	4293      	cmp	r3, r2
 810618c:	d06d      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	681b      	ldr	r3, [r3, #0]
 8106192:	4a39      	ldr	r2, [pc, #228]	@ (8106278 <HAL_DMA_Abort+0x21c>)
 8106194:	4293      	cmp	r3, r2
 8106196:	d068      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	681b      	ldr	r3, [r3, #0]
 810619c:	4a37      	ldr	r2, [pc, #220]	@ (810627c <HAL_DMA_Abort+0x220>)
 810619e:	4293      	cmp	r3, r2
 81061a0:	d063      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	681b      	ldr	r3, [r3, #0]
 81061a6:	4a36      	ldr	r2, [pc, #216]	@ (8106280 <HAL_DMA_Abort+0x224>)
 81061a8:	4293      	cmp	r3, r2
 81061aa:	d05e      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	4a34      	ldr	r2, [pc, #208]	@ (8106284 <HAL_DMA_Abort+0x228>)
 81061b2:	4293      	cmp	r3, r2
 81061b4:	d059      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	4a33      	ldr	r2, [pc, #204]	@ (8106288 <HAL_DMA_Abort+0x22c>)
 81061bc:	4293      	cmp	r3, r2
 81061be:	d054      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	4a31      	ldr	r2, [pc, #196]	@ (810628c <HAL_DMA_Abort+0x230>)
 81061c6:	4293      	cmp	r3, r2
 81061c8:	d04f      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	4a30      	ldr	r2, [pc, #192]	@ (8106290 <HAL_DMA_Abort+0x234>)
 81061d0:	4293      	cmp	r3, r2
 81061d2:	d04a      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	4a2e      	ldr	r2, [pc, #184]	@ (8106294 <HAL_DMA_Abort+0x238>)
 81061da:	4293      	cmp	r3, r2
 81061dc:	d045      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061de:	687b      	ldr	r3, [r7, #4]
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	4a2d      	ldr	r2, [pc, #180]	@ (8106298 <HAL_DMA_Abort+0x23c>)
 81061e4:	4293      	cmp	r3, r2
 81061e6:	d040      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	4a2b      	ldr	r2, [pc, #172]	@ (810629c <HAL_DMA_Abort+0x240>)
 81061ee:	4293      	cmp	r3, r2
 81061f0:	d03b      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	4a2a      	ldr	r2, [pc, #168]	@ (81062a0 <HAL_DMA_Abort+0x244>)
 81061f8:	4293      	cmp	r3, r2
 81061fa:	d036      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	4a28      	ldr	r2, [pc, #160]	@ (81062a4 <HAL_DMA_Abort+0x248>)
 8106202:	4293      	cmp	r3, r2
 8106204:	d031      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	681b      	ldr	r3, [r3, #0]
 810620a:	4a27      	ldr	r2, [pc, #156]	@ (81062a8 <HAL_DMA_Abort+0x24c>)
 810620c:	4293      	cmp	r3, r2
 810620e:	d02c      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106210:	687b      	ldr	r3, [r7, #4]
 8106212:	681b      	ldr	r3, [r3, #0]
 8106214:	4a25      	ldr	r2, [pc, #148]	@ (81062ac <HAL_DMA_Abort+0x250>)
 8106216:	4293      	cmp	r3, r2
 8106218:	d027      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	4a24      	ldr	r2, [pc, #144]	@ (81062b0 <HAL_DMA_Abort+0x254>)
 8106220:	4293      	cmp	r3, r2
 8106222:	d022      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106224:	687b      	ldr	r3, [r7, #4]
 8106226:	681b      	ldr	r3, [r3, #0]
 8106228:	4a22      	ldr	r2, [pc, #136]	@ (81062b4 <HAL_DMA_Abort+0x258>)
 810622a:	4293      	cmp	r3, r2
 810622c:	d01d      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	681b      	ldr	r3, [r3, #0]
 8106232:	4a21      	ldr	r2, [pc, #132]	@ (81062b8 <HAL_DMA_Abort+0x25c>)
 8106234:	4293      	cmp	r3, r2
 8106236:	d018      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	681b      	ldr	r3, [r3, #0]
 810623c:	4a1f      	ldr	r2, [pc, #124]	@ (81062bc <HAL_DMA_Abort+0x260>)
 810623e:	4293      	cmp	r3, r2
 8106240:	d013      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	681b      	ldr	r3, [r3, #0]
 8106246:	4a1e      	ldr	r2, [pc, #120]	@ (81062c0 <HAL_DMA_Abort+0x264>)
 8106248:	4293      	cmp	r3, r2
 810624a:	d00e      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	681b      	ldr	r3, [r3, #0]
 8106250:	4a1c      	ldr	r2, [pc, #112]	@ (81062c4 <HAL_DMA_Abort+0x268>)
 8106252:	4293      	cmp	r3, r2
 8106254:	d009      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	681b      	ldr	r3, [r3, #0]
 810625a:	4a1b      	ldr	r2, [pc, #108]	@ (81062c8 <HAL_DMA_Abort+0x26c>)
 810625c:	4293      	cmp	r3, r2
 810625e:	d004      	beq.n	810626a <HAL_DMA_Abort+0x20e>
 8106260:	687b      	ldr	r3, [r7, #4]
 8106262:	681b      	ldr	r3, [r3, #0]
 8106264:	4a19      	ldr	r2, [pc, #100]	@ (81062cc <HAL_DMA_Abort+0x270>)
 8106266:	4293      	cmp	r3, r2
 8106268:	d132      	bne.n	81062d0 <HAL_DMA_Abort+0x274>
 810626a:	2301      	movs	r3, #1
 810626c:	e031      	b.n	81062d2 <HAL_DMA_Abort+0x276>
 810626e:	bf00      	nop
 8106270:	40020010 	.word	0x40020010
 8106274:	40020028 	.word	0x40020028
 8106278:	40020040 	.word	0x40020040
 810627c:	40020058 	.word	0x40020058
 8106280:	40020070 	.word	0x40020070
 8106284:	40020088 	.word	0x40020088
 8106288:	400200a0 	.word	0x400200a0
 810628c:	400200b8 	.word	0x400200b8
 8106290:	40020410 	.word	0x40020410
 8106294:	40020428 	.word	0x40020428
 8106298:	40020440 	.word	0x40020440
 810629c:	40020458 	.word	0x40020458
 81062a0:	40020470 	.word	0x40020470
 81062a4:	40020488 	.word	0x40020488
 81062a8:	400204a0 	.word	0x400204a0
 81062ac:	400204b8 	.word	0x400204b8
 81062b0:	58025408 	.word	0x58025408
 81062b4:	5802541c 	.word	0x5802541c
 81062b8:	58025430 	.word	0x58025430
 81062bc:	58025444 	.word	0x58025444
 81062c0:	58025458 	.word	0x58025458
 81062c4:	5802546c 	.word	0x5802546c
 81062c8:	58025480 	.word	0x58025480
 81062cc:	58025494 	.word	0x58025494
 81062d0:	2300      	movs	r3, #0
 81062d2:	2b00      	cmp	r3, #0
 81062d4:	d007      	beq.n	81062e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81062da:	681a      	ldr	r2, [r3, #0]
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81062e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81062e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81062e6:	687b      	ldr	r3, [r7, #4]
 81062e8:	681b      	ldr	r3, [r3, #0]
 81062ea:	4a6d      	ldr	r2, [pc, #436]	@ (81064a0 <HAL_DMA_Abort+0x444>)
 81062ec:	4293      	cmp	r3, r2
 81062ee:	d04a      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	681b      	ldr	r3, [r3, #0]
 81062f4:	4a6b      	ldr	r2, [pc, #428]	@ (81064a4 <HAL_DMA_Abort+0x448>)
 81062f6:	4293      	cmp	r3, r2
 81062f8:	d045      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 81062fa:	687b      	ldr	r3, [r7, #4]
 81062fc:	681b      	ldr	r3, [r3, #0]
 81062fe:	4a6a      	ldr	r2, [pc, #424]	@ (81064a8 <HAL_DMA_Abort+0x44c>)
 8106300:	4293      	cmp	r3, r2
 8106302:	d040      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 8106304:	687b      	ldr	r3, [r7, #4]
 8106306:	681b      	ldr	r3, [r3, #0]
 8106308:	4a68      	ldr	r2, [pc, #416]	@ (81064ac <HAL_DMA_Abort+0x450>)
 810630a:	4293      	cmp	r3, r2
 810630c:	d03b      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 810630e:	687b      	ldr	r3, [r7, #4]
 8106310:	681b      	ldr	r3, [r3, #0]
 8106312:	4a67      	ldr	r2, [pc, #412]	@ (81064b0 <HAL_DMA_Abort+0x454>)
 8106314:	4293      	cmp	r3, r2
 8106316:	d036      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	681b      	ldr	r3, [r3, #0]
 810631c:	4a65      	ldr	r2, [pc, #404]	@ (81064b4 <HAL_DMA_Abort+0x458>)
 810631e:	4293      	cmp	r3, r2
 8106320:	d031      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	681b      	ldr	r3, [r3, #0]
 8106326:	4a64      	ldr	r2, [pc, #400]	@ (81064b8 <HAL_DMA_Abort+0x45c>)
 8106328:	4293      	cmp	r3, r2
 810632a:	d02c      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	681b      	ldr	r3, [r3, #0]
 8106330:	4a62      	ldr	r2, [pc, #392]	@ (81064bc <HAL_DMA_Abort+0x460>)
 8106332:	4293      	cmp	r3, r2
 8106334:	d027      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 8106336:	687b      	ldr	r3, [r7, #4]
 8106338:	681b      	ldr	r3, [r3, #0]
 810633a:	4a61      	ldr	r2, [pc, #388]	@ (81064c0 <HAL_DMA_Abort+0x464>)
 810633c:	4293      	cmp	r3, r2
 810633e:	d022      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	681b      	ldr	r3, [r3, #0]
 8106344:	4a5f      	ldr	r2, [pc, #380]	@ (81064c4 <HAL_DMA_Abort+0x468>)
 8106346:	4293      	cmp	r3, r2
 8106348:	d01d      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	4a5e      	ldr	r2, [pc, #376]	@ (81064c8 <HAL_DMA_Abort+0x46c>)
 8106350:	4293      	cmp	r3, r2
 8106352:	d018      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	681b      	ldr	r3, [r3, #0]
 8106358:	4a5c      	ldr	r2, [pc, #368]	@ (81064cc <HAL_DMA_Abort+0x470>)
 810635a:	4293      	cmp	r3, r2
 810635c:	d013      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	681b      	ldr	r3, [r3, #0]
 8106362:	4a5b      	ldr	r2, [pc, #364]	@ (81064d0 <HAL_DMA_Abort+0x474>)
 8106364:	4293      	cmp	r3, r2
 8106366:	d00e      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	681b      	ldr	r3, [r3, #0]
 810636c:	4a59      	ldr	r2, [pc, #356]	@ (81064d4 <HAL_DMA_Abort+0x478>)
 810636e:	4293      	cmp	r3, r2
 8106370:	d009      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	4a58      	ldr	r2, [pc, #352]	@ (81064d8 <HAL_DMA_Abort+0x47c>)
 8106378:	4293      	cmp	r3, r2
 810637a:	d004      	beq.n	8106386 <HAL_DMA_Abort+0x32a>
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	681b      	ldr	r3, [r3, #0]
 8106380:	4a56      	ldr	r2, [pc, #344]	@ (81064dc <HAL_DMA_Abort+0x480>)
 8106382:	4293      	cmp	r3, r2
 8106384:	d108      	bne.n	8106398 <HAL_DMA_Abort+0x33c>
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	681b      	ldr	r3, [r3, #0]
 810638a:	681a      	ldr	r2, [r3, #0]
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	f022 0201 	bic.w	r2, r2, #1
 8106394:	601a      	str	r2, [r3, #0]
 8106396:	e007      	b.n	81063a8 <HAL_DMA_Abort+0x34c>
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	681a      	ldr	r2, [r3, #0]
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	681b      	ldr	r3, [r3, #0]
 81063a2:	f022 0201 	bic.w	r2, r2, #1
 81063a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81063a8:	e013      	b.n	81063d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81063aa:	f7fe f80f 	bl	81043cc <HAL_GetTick>
 81063ae:	4602      	mov	r2, r0
 81063b0:	693b      	ldr	r3, [r7, #16]
 81063b2:	1ad3      	subs	r3, r2, r3
 81063b4:	2b05      	cmp	r3, #5
 81063b6:	d90c      	bls.n	81063d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	2220      	movs	r2, #32
 81063bc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	2203      	movs	r2, #3
 81063c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	2200      	movs	r2, #0
 81063ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 81063ce:	2301      	movs	r3, #1
 81063d0:	e12d      	b.n	810662e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81063d2:	697b      	ldr	r3, [r7, #20]
 81063d4:	681b      	ldr	r3, [r3, #0]
 81063d6:	f003 0301 	and.w	r3, r3, #1
 81063da:	2b00      	cmp	r3, #0
 81063dc:	d1e5      	bne.n	81063aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	681b      	ldr	r3, [r3, #0]
 81063e2:	4a2f      	ldr	r2, [pc, #188]	@ (81064a0 <HAL_DMA_Abort+0x444>)
 81063e4:	4293      	cmp	r3, r2
 81063e6:	d04a      	beq.n	810647e <HAL_DMA_Abort+0x422>
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	681b      	ldr	r3, [r3, #0]
 81063ec:	4a2d      	ldr	r2, [pc, #180]	@ (81064a4 <HAL_DMA_Abort+0x448>)
 81063ee:	4293      	cmp	r3, r2
 81063f0:	d045      	beq.n	810647e <HAL_DMA_Abort+0x422>
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	4a2c      	ldr	r2, [pc, #176]	@ (81064a8 <HAL_DMA_Abort+0x44c>)
 81063f8:	4293      	cmp	r3, r2
 81063fa:	d040      	beq.n	810647e <HAL_DMA_Abort+0x422>
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	681b      	ldr	r3, [r3, #0]
 8106400:	4a2a      	ldr	r2, [pc, #168]	@ (81064ac <HAL_DMA_Abort+0x450>)
 8106402:	4293      	cmp	r3, r2
 8106404:	d03b      	beq.n	810647e <HAL_DMA_Abort+0x422>
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	4a29      	ldr	r2, [pc, #164]	@ (81064b0 <HAL_DMA_Abort+0x454>)
 810640c:	4293      	cmp	r3, r2
 810640e:	d036      	beq.n	810647e <HAL_DMA_Abort+0x422>
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	681b      	ldr	r3, [r3, #0]
 8106414:	4a27      	ldr	r2, [pc, #156]	@ (81064b4 <HAL_DMA_Abort+0x458>)
 8106416:	4293      	cmp	r3, r2
 8106418:	d031      	beq.n	810647e <HAL_DMA_Abort+0x422>
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	681b      	ldr	r3, [r3, #0]
 810641e:	4a26      	ldr	r2, [pc, #152]	@ (81064b8 <HAL_DMA_Abort+0x45c>)
 8106420:	4293      	cmp	r3, r2
 8106422:	d02c      	beq.n	810647e <HAL_DMA_Abort+0x422>
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	681b      	ldr	r3, [r3, #0]
 8106428:	4a24      	ldr	r2, [pc, #144]	@ (81064bc <HAL_DMA_Abort+0x460>)
 810642a:	4293      	cmp	r3, r2
 810642c:	d027      	beq.n	810647e <HAL_DMA_Abort+0x422>
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	681b      	ldr	r3, [r3, #0]
 8106432:	4a23      	ldr	r2, [pc, #140]	@ (81064c0 <HAL_DMA_Abort+0x464>)
 8106434:	4293      	cmp	r3, r2
 8106436:	d022      	beq.n	810647e <HAL_DMA_Abort+0x422>
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	4a21      	ldr	r2, [pc, #132]	@ (81064c4 <HAL_DMA_Abort+0x468>)
 810643e:	4293      	cmp	r3, r2
 8106440:	d01d      	beq.n	810647e <HAL_DMA_Abort+0x422>
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	681b      	ldr	r3, [r3, #0]
 8106446:	4a20      	ldr	r2, [pc, #128]	@ (81064c8 <HAL_DMA_Abort+0x46c>)
 8106448:	4293      	cmp	r3, r2
 810644a:	d018      	beq.n	810647e <HAL_DMA_Abort+0x422>
 810644c:	687b      	ldr	r3, [r7, #4]
 810644e:	681b      	ldr	r3, [r3, #0]
 8106450:	4a1e      	ldr	r2, [pc, #120]	@ (81064cc <HAL_DMA_Abort+0x470>)
 8106452:	4293      	cmp	r3, r2
 8106454:	d013      	beq.n	810647e <HAL_DMA_Abort+0x422>
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	681b      	ldr	r3, [r3, #0]
 810645a:	4a1d      	ldr	r2, [pc, #116]	@ (81064d0 <HAL_DMA_Abort+0x474>)
 810645c:	4293      	cmp	r3, r2
 810645e:	d00e      	beq.n	810647e <HAL_DMA_Abort+0x422>
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	681b      	ldr	r3, [r3, #0]
 8106464:	4a1b      	ldr	r2, [pc, #108]	@ (81064d4 <HAL_DMA_Abort+0x478>)
 8106466:	4293      	cmp	r3, r2
 8106468:	d009      	beq.n	810647e <HAL_DMA_Abort+0x422>
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	681b      	ldr	r3, [r3, #0]
 810646e:	4a1a      	ldr	r2, [pc, #104]	@ (81064d8 <HAL_DMA_Abort+0x47c>)
 8106470:	4293      	cmp	r3, r2
 8106472:	d004      	beq.n	810647e <HAL_DMA_Abort+0x422>
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	681b      	ldr	r3, [r3, #0]
 8106478:	4a18      	ldr	r2, [pc, #96]	@ (81064dc <HAL_DMA_Abort+0x480>)
 810647a:	4293      	cmp	r3, r2
 810647c:	d101      	bne.n	8106482 <HAL_DMA_Abort+0x426>
 810647e:	2301      	movs	r3, #1
 8106480:	e000      	b.n	8106484 <HAL_DMA_Abort+0x428>
 8106482:	2300      	movs	r3, #0
 8106484:	2b00      	cmp	r3, #0
 8106486:	d02b      	beq.n	81064e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810648c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810648e:	687b      	ldr	r3, [r7, #4]
 8106490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106492:	f003 031f 	and.w	r3, r3, #31
 8106496:	223f      	movs	r2, #63	@ 0x3f
 8106498:	409a      	lsls	r2, r3
 810649a:	68bb      	ldr	r3, [r7, #8]
 810649c:	609a      	str	r2, [r3, #8]
 810649e:	e02a      	b.n	81064f6 <HAL_DMA_Abort+0x49a>
 81064a0:	40020010 	.word	0x40020010
 81064a4:	40020028 	.word	0x40020028
 81064a8:	40020040 	.word	0x40020040
 81064ac:	40020058 	.word	0x40020058
 81064b0:	40020070 	.word	0x40020070
 81064b4:	40020088 	.word	0x40020088
 81064b8:	400200a0 	.word	0x400200a0
 81064bc:	400200b8 	.word	0x400200b8
 81064c0:	40020410 	.word	0x40020410
 81064c4:	40020428 	.word	0x40020428
 81064c8:	40020440 	.word	0x40020440
 81064cc:	40020458 	.word	0x40020458
 81064d0:	40020470 	.word	0x40020470
 81064d4:	40020488 	.word	0x40020488
 81064d8:	400204a0 	.word	0x400204a0
 81064dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81064e0:	687b      	ldr	r3, [r7, #4]
 81064e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81064e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81064ea:	f003 031f 	and.w	r3, r3, #31
 81064ee:	2201      	movs	r2, #1
 81064f0:	409a      	lsls	r2, r3
 81064f2:	68fb      	ldr	r3, [r7, #12]
 81064f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	681b      	ldr	r3, [r3, #0]
 81064fa:	4a4f      	ldr	r2, [pc, #316]	@ (8106638 <HAL_DMA_Abort+0x5dc>)
 81064fc:	4293      	cmp	r3, r2
 81064fe:	d072      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	4a4d      	ldr	r2, [pc, #308]	@ (810663c <HAL_DMA_Abort+0x5e0>)
 8106506:	4293      	cmp	r3, r2
 8106508:	d06d      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 810650a:	687b      	ldr	r3, [r7, #4]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	4a4c      	ldr	r2, [pc, #304]	@ (8106640 <HAL_DMA_Abort+0x5e4>)
 8106510:	4293      	cmp	r3, r2
 8106512:	d068      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	4a4a      	ldr	r2, [pc, #296]	@ (8106644 <HAL_DMA_Abort+0x5e8>)
 810651a:	4293      	cmp	r3, r2
 810651c:	d063      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	681b      	ldr	r3, [r3, #0]
 8106522:	4a49      	ldr	r2, [pc, #292]	@ (8106648 <HAL_DMA_Abort+0x5ec>)
 8106524:	4293      	cmp	r3, r2
 8106526:	d05e      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	681b      	ldr	r3, [r3, #0]
 810652c:	4a47      	ldr	r2, [pc, #284]	@ (810664c <HAL_DMA_Abort+0x5f0>)
 810652e:	4293      	cmp	r3, r2
 8106530:	d059      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106532:	687b      	ldr	r3, [r7, #4]
 8106534:	681b      	ldr	r3, [r3, #0]
 8106536:	4a46      	ldr	r2, [pc, #280]	@ (8106650 <HAL_DMA_Abort+0x5f4>)
 8106538:	4293      	cmp	r3, r2
 810653a:	d054      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 810653c:	687b      	ldr	r3, [r7, #4]
 810653e:	681b      	ldr	r3, [r3, #0]
 8106540:	4a44      	ldr	r2, [pc, #272]	@ (8106654 <HAL_DMA_Abort+0x5f8>)
 8106542:	4293      	cmp	r3, r2
 8106544:	d04f      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106546:	687b      	ldr	r3, [r7, #4]
 8106548:	681b      	ldr	r3, [r3, #0]
 810654a:	4a43      	ldr	r2, [pc, #268]	@ (8106658 <HAL_DMA_Abort+0x5fc>)
 810654c:	4293      	cmp	r3, r2
 810654e:	d04a      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	681b      	ldr	r3, [r3, #0]
 8106554:	4a41      	ldr	r2, [pc, #260]	@ (810665c <HAL_DMA_Abort+0x600>)
 8106556:	4293      	cmp	r3, r2
 8106558:	d045      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 810655a:	687b      	ldr	r3, [r7, #4]
 810655c:	681b      	ldr	r3, [r3, #0]
 810655e:	4a40      	ldr	r2, [pc, #256]	@ (8106660 <HAL_DMA_Abort+0x604>)
 8106560:	4293      	cmp	r3, r2
 8106562:	d040      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	4a3e      	ldr	r2, [pc, #248]	@ (8106664 <HAL_DMA_Abort+0x608>)
 810656a:	4293      	cmp	r3, r2
 810656c:	d03b      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	681b      	ldr	r3, [r3, #0]
 8106572:	4a3d      	ldr	r2, [pc, #244]	@ (8106668 <HAL_DMA_Abort+0x60c>)
 8106574:	4293      	cmp	r3, r2
 8106576:	d036      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	681b      	ldr	r3, [r3, #0]
 810657c:	4a3b      	ldr	r2, [pc, #236]	@ (810666c <HAL_DMA_Abort+0x610>)
 810657e:	4293      	cmp	r3, r2
 8106580:	d031      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	681b      	ldr	r3, [r3, #0]
 8106586:	4a3a      	ldr	r2, [pc, #232]	@ (8106670 <HAL_DMA_Abort+0x614>)
 8106588:	4293      	cmp	r3, r2
 810658a:	d02c      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	681b      	ldr	r3, [r3, #0]
 8106590:	4a38      	ldr	r2, [pc, #224]	@ (8106674 <HAL_DMA_Abort+0x618>)
 8106592:	4293      	cmp	r3, r2
 8106594:	d027      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	681b      	ldr	r3, [r3, #0]
 810659a:	4a37      	ldr	r2, [pc, #220]	@ (8106678 <HAL_DMA_Abort+0x61c>)
 810659c:	4293      	cmp	r3, r2
 810659e:	d022      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 81065a0:	687b      	ldr	r3, [r7, #4]
 81065a2:	681b      	ldr	r3, [r3, #0]
 81065a4:	4a35      	ldr	r2, [pc, #212]	@ (810667c <HAL_DMA_Abort+0x620>)
 81065a6:	4293      	cmp	r3, r2
 81065a8:	d01d      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 81065aa:	687b      	ldr	r3, [r7, #4]
 81065ac:	681b      	ldr	r3, [r3, #0]
 81065ae:	4a34      	ldr	r2, [pc, #208]	@ (8106680 <HAL_DMA_Abort+0x624>)
 81065b0:	4293      	cmp	r3, r2
 81065b2:	d018      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 81065b4:	687b      	ldr	r3, [r7, #4]
 81065b6:	681b      	ldr	r3, [r3, #0]
 81065b8:	4a32      	ldr	r2, [pc, #200]	@ (8106684 <HAL_DMA_Abort+0x628>)
 81065ba:	4293      	cmp	r3, r2
 81065bc:	d013      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	681b      	ldr	r3, [r3, #0]
 81065c2:	4a31      	ldr	r2, [pc, #196]	@ (8106688 <HAL_DMA_Abort+0x62c>)
 81065c4:	4293      	cmp	r3, r2
 81065c6:	d00e      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	681b      	ldr	r3, [r3, #0]
 81065cc:	4a2f      	ldr	r2, [pc, #188]	@ (810668c <HAL_DMA_Abort+0x630>)
 81065ce:	4293      	cmp	r3, r2
 81065d0:	d009      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 81065d2:	687b      	ldr	r3, [r7, #4]
 81065d4:	681b      	ldr	r3, [r3, #0]
 81065d6:	4a2e      	ldr	r2, [pc, #184]	@ (8106690 <HAL_DMA_Abort+0x634>)
 81065d8:	4293      	cmp	r3, r2
 81065da:	d004      	beq.n	81065e6 <HAL_DMA_Abort+0x58a>
 81065dc:	687b      	ldr	r3, [r7, #4]
 81065de:	681b      	ldr	r3, [r3, #0]
 81065e0:	4a2c      	ldr	r2, [pc, #176]	@ (8106694 <HAL_DMA_Abort+0x638>)
 81065e2:	4293      	cmp	r3, r2
 81065e4:	d101      	bne.n	81065ea <HAL_DMA_Abort+0x58e>
 81065e6:	2301      	movs	r3, #1
 81065e8:	e000      	b.n	81065ec <HAL_DMA_Abort+0x590>
 81065ea:	2300      	movs	r3, #0
 81065ec:	2b00      	cmp	r3, #0
 81065ee:	d015      	beq.n	810661c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81065f4:	687a      	ldr	r2, [r7, #4]
 81065f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 81065f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81065fa:	687b      	ldr	r3, [r7, #4]
 81065fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81065fe:	2b00      	cmp	r3, #0
 8106600:	d00c      	beq.n	810661c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106606:	681a      	ldr	r2, [r3, #0]
 8106608:	687b      	ldr	r3, [r7, #4]
 810660a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810660c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106610:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106616:	687a      	ldr	r2, [r7, #4]
 8106618:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810661a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 810661c:	687b      	ldr	r3, [r7, #4]
 810661e:	2201      	movs	r2, #1
 8106620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	2200      	movs	r2, #0
 8106628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 810662c:	2300      	movs	r3, #0
}
 810662e:	4618      	mov	r0, r3
 8106630:	3718      	adds	r7, #24
 8106632:	46bd      	mov	sp, r7
 8106634:	bd80      	pop	{r7, pc}
 8106636:	bf00      	nop
 8106638:	40020010 	.word	0x40020010
 810663c:	40020028 	.word	0x40020028
 8106640:	40020040 	.word	0x40020040
 8106644:	40020058 	.word	0x40020058
 8106648:	40020070 	.word	0x40020070
 810664c:	40020088 	.word	0x40020088
 8106650:	400200a0 	.word	0x400200a0
 8106654:	400200b8 	.word	0x400200b8
 8106658:	40020410 	.word	0x40020410
 810665c:	40020428 	.word	0x40020428
 8106660:	40020440 	.word	0x40020440
 8106664:	40020458 	.word	0x40020458
 8106668:	40020470 	.word	0x40020470
 810666c:	40020488 	.word	0x40020488
 8106670:	400204a0 	.word	0x400204a0
 8106674:	400204b8 	.word	0x400204b8
 8106678:	58025408 	.word	0x58025408
 810667c:	5802541c 	.word	0x5802541c
 8106680:	58025430 	.word	0x58025430
 8106684:	58025444 	.word	0x58025444
 8106688:	58025458 	.word	0x58025458
 810668c:	5802546c 	.word	0x5802546c
 8106690:	58025480 	.word	0x58025480
 8106694:	58025494 	.word	0x58025494

08106698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8106698:	b580      	push	{r7, lr}
 810669a:	b084      	sub	sp, #16
 810669c:	af00      	add	r7, sp, #0
 810669e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	2b00      	cmp	r3, #0
 81066a4:	d101      	bne.n	81066aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81066a6:	2301      	movs	r3, #1
 81066a8:	e237      	b.n	8106b1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81066aa:	687b      	ldr	r3, [r7, #4]
 81066ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81066b0:	b2db      	uxtb	r3, r3
 81066b2:	2b02      	cmp	r3, #2
 81066b4:	d004      	beq.n	81066c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	2280      	movs	r2, #128	@ 0x80
 81066ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 81066bc:	2301      	movs	r3, #1
 81066be:	e22c      	b.n	8106b1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	4a5c      	ldr	r2, [pc, #368]	@ (8106838 <HAL_DMA_Abort_IT+0x1a0>)
 81066c6:	4293      	cmp	r3, r2
 81066c8:	d04a      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 81066ca:	687b      	ldr	r3, [r7, #4]
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	4a5b      	ldr	r2, [pc, #364]	@ (810683c <HAL_DMA_Abort_IT+0x1a4>)
 81066d0:	4293      	cmp	r3, r2
 81066d2:	d045      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	4a59      	ldr	r2, [pc, #356]	@ (8106840 <HAL_DMA_Abort_IT+0x1a8>)
 81066da:	4293      	cmp	r3, r2
 81066dc:	d040      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	681b      	ldr	r3, [r3, #0]
 81066e2:	4a58      	ldr	r2, [pc, #352]	@ (8106844 <HAL_DMA_Abort_IT+0x1ac>)
 81066e4:	4293      	cmp	r3, r2
 81066e6:	d03b      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	681b      	ldr	r3, [r3, #0]
 81066ec:	4a56      	ldr	r2, [pc, #344]	@ (8106848 <HAL_DMA_Abort_IT+0x1b0>)
 81066ee:	4293      	cmp	r3, r2
 81066f0:	d036      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 81066f2:	687b      	ldr	r3, [r7, #4]
 81066f4:	681b      	ldr	r3, [r3, #0]
 81066f6:	4a55      	ldr	r2, [pc, #340]	@ (810684c <HAL_DMA_Abort_IT+0x1b4>)
 81066f8:	4293      	cmp	r3, r2
 81066fa:	d031      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	681b      	ldr	r3, [r3, #0]
 8106700:	4a53      	ldr	r2, [pc, #332]	@ (8106850 <HAL_DMA_Abort_IT+0x1b8>)
 8106702:	4293      	cmp	r3, r2
 8106704:	d02c      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	681b      	ldr	r3, [r3, #0]
 810670a:	4a52      	ldr	r2, [pc, #328]	@ (8106854 <HAL_DMA_Abort_IT+0x1bc>)
 810670c:	4293      	cmp	r3, r2
 810670e:	d027      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	681b      	ldr	r3, [r3, #0]
 8106714:	4a50      	ldr	r2, [pc, #320]	@ (8106858 <HAL_DMA_Abort_IT+0x1c0>)
 8106716:	4293      	cmp	r3, r2
 8106718:	d022      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	4a4f      	ldr	r2, [pc, #316]	@ (810685c <HAL_DMA_Abort_IT+0x1c4>)
 8106720:	4293      	cmp	r3, r2
 8106722:	d01d      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	681b      	ldr	r3, [r3, #0]
 8106728:	4a4d      	ldr	r2, [pc, #308]	@ (8106860 <HAL_DMA_Abort_IT+0x1c8>)
 810672a:	4293      	cmp	r3, r2
 810672c:	d018      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 810672e:	687b      	ldr	r3, [r7, #4]
 8106730:	681b      	ldr	r3, [r3, #0]
 8106732:	4a4c      	ldr	r2, [pc, #304]	@ (8106864 <HAL_DMA_Abort_IT+0x1cc>)
 8106734:	4293      	cmp	r3, r2
 8106736:	d013      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	681b      	ldr	r3, [r3, #0]
 810673c:	4a4a      	ldr	r2, [pc, #296]	@ (8106868 <HAL_DMA_Abort_IT+0x1d0>)
 810673e:	4293      	cmp	r3, r2
 8106740:	d00e      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	681b      	ldr	r3, [r3, #0]
 8106746:	4a49      	ldr	r2, [pc, #292]	@ (810686c <HAL_DMA_Abort_IT+0x1d4>)
 8106748:	4293      	cmp	r3, r2
 810674a:	d009      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	681b      	ldr	r3, [r3, #0]
 8106750:	4a47      	ldr	r2, [pc, #284]	@ (8106870 <HAL_DMA_Abort_IT+0x1d8>)
 8106752:	4293      	cmp	r3, r2
 8106754:	d004      	beq.n	8106760 <HAL_DMA_Abort_IT+0xc8>
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	4a46      	ldr	r2, [pc, #280]	@ (8106874 <HAL_DMA_Abort_IT+0x1dc>)
 810675c:	4293      	cmp	r3, r2
 810675e:	d101      	bne.n	8106764 <HAL_DMA_Abort_IT+0xcc>
 8106760:	2301      	movs	r3, #1
 8106762:	e000      	b.n	8106766 <HAL_DMA_Abort_IT+0xce>
 8106764:	2300      	movs	r3, #0
 8106766:	2b00      	cmp	r3, #0
 8106768:	f000 8086 	beq.w	8106878 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	2204      	movs	r2, #4
 8106770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	681b      	ldr	r3, [r3, #0]
 8106778:	4a2f      	ldr	r2, [pc, #188]	@ (8106838 <HAL_DMA_Abort_IT+0x1a0>)
 810677a:	4293      	cmp	r3, r2
 810677c:	d04a      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	681b      	ldr	r3, [r3, #0]
 8106782:	4a2e      	ldr	r2, [pc, #184]	@ (810683c <HAL_DMA_Abort_IT+0x1a4>)
 8106784:	4293      	cmp	r3, r2
 8106786:	d045      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	681b      	ldr	r3, [r3, #0]
 810678c:	4a2c      	ldr	r2, [pc, #176]	@ (8106840 <HAL_DMA_Abort_IT+0x1a8>)
 810678e:	4293      	cmp	r3, r2
 8106790:	d040      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	4a2b      	ldr	r2, [pc, #172]	@ (8106844 <HAL_DMA_Abort_IT+0x1ac>)
 8106798:	4293      	cmp	r3, r2
 810679a:	d03b      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 810679c:	687b      	ldr	r3, [r7, #4]
 810679e:	681b      	ldr	r3, [r3, #0]
 81067a0:	4a29      	ldr	r2, [pc, #164]	@ (8106848 <HAL_DMA_Abort_IT+0x1b0>)
 81067a2:	4293      	cmp	r3, r2
 81067a4:	d036      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067a6:	687b      	ldr	r3, [r7, #4]
 81067a8:	681b      	ldr	r3, [r3, #0]
 81067aa:	4a28      	ldr	r2, [pc, #160]	@ (810684c <HAL_DMA_Abort_IT+0x1b4>)
 81067ac:	4293      	cmp	r3, r2
 81067ae:	d031      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	681b      	ldr	r3, [r3, #0]
 81067b4:	4a26      	ldr	r2, [pc, #152]	@ (8106850 <HAL_DMA_Abort_IT+0x1b8>)
 81067b6:	4293      	cmp	r3, r2
 81067b8:	d02c      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067ba:	687b      	ldr	r3, [r7, #4]
 81067bc:	681b      	ldr	r3, [r3, #0]
 81067be:	4a25      	ldr	r2, [pc, #148]	@ (8106854 <HAL_DMA_Abort_IT+0x1bc>)
 81067c0:	4293      	cmp	r3, r2
 81067c2:	d027      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	681b      	ldr	r3, [r3, #0]
 81067c8:	4a23      	ldr	r2, [pc, #140]	@ (8106858 <HAL_DMA_Abort_IT+0x1c0>)
 81067ca:	4293      	cmp	r3, r2
 81067cc:	d022      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	4a22      	ldr	r2, [pc, #136]	@ (810685c <HAL_DMA_Abort_IT+0x1c4>)
 81067d4:	4293      	cmp	r3, r2
 81067d6:	d01d      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	681b      	ldr	r3, [r3, #0]
 81067dc:	4a20      	ldr	r2, [pc, #128]	@ (8106860 <HAL_DMA_Abort_IT+0x1c8>)
 81067de:	4293      	cmp	r3, r2
 81067e0:	d018      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	681b      	ldr	r3, [r3, #0]
 81067e6:	4a1f      	ldr	r2, [pc, #124]	@ (8106864 <HAL_DMA_Abort_IT+0x1cc>)
 81067e8:	4293      	cmp	r3, r2
 81067ea:	d013      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	681b      	ldr	r3, [r3, #0]
 81067f0:	4a1d      	ldr	r2, [pc, #116]	@ (8106868 <HAL_DMA_Abort_IT+0x1d0>)
 81067f2:	4293      	cmp	r3, r2
 81067f4:	d00e      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	4a1c      	ldr	r2, [pc, #112]	@ (810686c <HAL_DMA_Abort_IT+0x1d4>)
 81067fc:	4293      	cmp	r3, r2
 81067fe:	d009      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	681b      	ldr	r3, [r3, #0]
 8106804:	4a1a      	ldr	r2, [pc, #104]	@ (8106870 <HAL_DMA_Abort_IT+0x1d8>)
 8106806:	4293      	cmp	r3, r2
 8106808:	d004      	beq.n	8106814 <HAL_DMA_Abort_IT+0x17c>
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	681b      	ldr	r3, [r3, #0]
 810680e:	4a19      	ldr	r2, [pc, #100]	@ (8106874 <HAL_DMA_Abort_IT+0x1dc>)
 8106810:	4293      	cmp	r3, r2
 8106812:	d108      	bne.n	8106826 <HAL_DMA_Abort_IT+0x18e>
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	681a      	ldr	r2, [r3, #0]
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	f022 0201 	bic.w	r2, r2, #1
 8106822:	601a      	str	r2, [r3, #0]
 8106824:	e178      	b.n	8106b18 <HAL_DMA_Abort_IT+0x480>
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	681a      	ldr	r2, [r3, #0]
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	681b      	ldr	r3, [r3, #0]
 8106830:	f022 0201 	bic.w	r2, r2, #1
 8106834:	601a      	str	r2, [r3, #0]
 8106836:	e16f      	b.n	8106b18 <HAL_DMA_Abort_IT+0x480>
 8106838:	40020010 	.word	0x40020010
 810683c:	40020028 	.word	0x40020028
 8106840:	40020040 	.word	0x40020040
 8106844:	40020058 	.word	0x40020058
 8106848:	40020070 	.word	0x40020070
 810684c:	40020088 	.word	0x40020088
 8106850:	400200a0 	.word	0x400200a0
 8106854:	400200b8 	.word	0x400200b8
 8106858:	40020410 	.word	0x40020410
 810685c:	40020428 	.word	0x40020428
 8106860:	40020440 	.word	0x40020440
 8106864:	40020458 	.word	0x40020458
 8106868:	40020470 	.word	0x40020470
 810686c:	40020488 	.word	0x40020488
 8106870:	400204a0 	.word	0x400204a0
 8106874:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	681b      	ldr	r3, [r3, #0]
 810687c:	681a      	ldr	r2, [r3, #0]
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	681b      	ldr	r3, [r3, #0]
 8106882:	f022 020e 	bic.w	r2, r2, #14
 8106886:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	681b      	ldr	r3, [r3, #0]
 810688c:	4a6c      	ldr	r2, [pc, #432]	@ (8106a40 <HAL_DMA_Abort_IT+0x3a8>)
 810688e:	4293      	cmp	r3, r2
 8106890:	d04a      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	681b      	ldr	r3, [r3, #0]
 8106896:	4a6b      	ldr	r2, [pc, #428]	@ (8106a44 <HAL_DMA_Abort_IT+0x3ac>)
 8106898:	4293      	cmp	r3, r2
 810689a:	d045      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	681b      	ldr	r3, [r3, #0]
 81068a0:	4a69      	ldr	r2, [pc, #420]	@ (8106a48 <HAL_DMA_Abort_IT+0x3b0>)
 81068a2:	4293      	cmp	r3, r2
 81068a4:	d040      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068a6:	687b      	ldr	r3, [r7, #4]
 81068a8:	681b      	ldr	r3, [r3, #0]
 81068aa:	4a68      	ldr	r2, [pc, #416]	@ (8106a4c <HAL_DMA_Abort_IT+0x3b4>)
 81068ac:	4293      	cmp	r3, r2
 81068ae:	d03b      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	681b      	ldr	r3, [r3, #0]
 81068b4:	4a66      	ldr	r2, [pc, #408]	@ (8106a50 <HAL_DMA_Abort_IT+0x3b8>)
 81068b6:	4293      	cmp	r3, r2
 81068b8:	d036      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	681b      	ldr	r3, [r3, #0]
 81068be:	4a65      	ldr	r2, [pc, #404]	@ (8106a54 <HAL_DMA_Abort_IT+0x3bc>)
 81068c0:	4293      	cmp	r3, r2
 81068c2:	d031      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	681b      	ldr	r3, [r3, #0]
 81068c8:	4a63      	ldr	r2, [pc, #396]	@ (8106a58 <HAL_DMA_Abort_IT+0x3c0>)
 81068ca:	4293      	cmp	r3, r2
 81068cc:	d02c      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068ce:	687b      	ldr	r3, [r7, #4]
 81068d0:	681b      	ldr	r3, [r3, #0]
 81068d2:	4a62      	ldr	r2, [pc, #392]	@ (8106a5c <HAL_DMA_Abort_IT+0x3c4>)
 81068d4:	4293      	cmp	r3, r2
 81068d6:	d027      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	4a60      	ldr	r2, [pc, #384]	@ (8106a60 <HAL_DMA_Abort_IT+0x3c8>)
 81068de:	4293      	cmp	r3, r2
 81068e0:	d022      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	681b      	ldr	r3, [r3, #0]
 81068e6:	4a5f      	ldr	r2, [pc, #380]	@ (8106a64 <HAL_DMA_Abort_IT+0x3cc>)
 81068e8:	4293      	cmp	r3, r2
 81068ea:	d01d      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	681b      	ldr	r3, [r3, #0]
 81068f0:	4a5d      	ldr	r2, [pc, #372]	@ (8106a68 <HAL_DMA_Abort_IT+0x3d0>)
 81068f2:	4293      	cmp	r3, r2
 81068f4:	d018      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	681b      	ldr	r3, [r3, #0]
 81068fa:	4a5c      	ldr	r2, [pc, #368]	@ (8106a6c <HAL_DMA_Abort_IT+0x3d4>)
 81068fc:	4293      	cmp	r3, r2
 81068fe:	d013      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	4a5a      	ldr	r2, [pc, #360]	@ (8106a70 <HAL_DMA_Abort_IT+0x3d8>)
 8106906:	4293      	cmp	r3, r2
 8106908:	d00e      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	681b      	ldr	r3, [r3, #0]
 810690e:	4a59      	ldr	r2, [pc, #356]	@ (8106a74 <HAL_DMA_Abort_IT+0x3dc>)
 8106910:	4293      	cmp	r3, r2
 8106912:	d009      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	681b      	ldr	r3, [r3, #0]
 8106918:	4a57      	ldr	r2, [pc, #348]	@ (8106a78 <HAL_DMA_Abort_IT+0x3e0>)
 810691a:	4293      	cmp	r3, r2
 810691c:	d004      	beq.n	8106928 <HAL_DMA_Abort_IT+0x290>
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	681b      	ldr	r3, [r3, #0]
 8106922:	4a56      	ldr	r2, [pc, #344]	@ (8106a7c <HAL_DMA_Abort_IT+0x3e4>)
 8106924:	4293      	cmp	r3, r2
 8106926:	d108      	bne.n	810693a <HAL_DMA_Abort_IT+0x2a2>
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	681a      	ldr	r2, [r3, #0]
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	681b      	ldr	r3, [r3, #0]
 8106932:	f022 0201 	bic.w	r2, r2, #1
 8106936:	601a      	str	r2, [r3, #0]
 8106938:	e007      	b.n	810694a <HAL_DMA_Abort_IT+0x2b2>
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	681b      	ldr	r3, [r3, #0]
 810693e:	681a      	ldr	r2, [r3, #0]
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	681b      	ldr	r3, [r3, #0]
 8106944:	f022 0201 	bic.w	r2, r2, #1
 8106948:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810694a:	687b      	ldr	r3, [r7, #4]
 810694c:	681b      	ldr	r3, [r3, #0]
 810694e:	4a3c      	ldr	r2, [pc, #240]	@ (8106a40 <HAL_DMA_Abort_IT+0x3a8>)
 8106950:	4293      	cmp	r3, r2
 8106952:	d072      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	681b      	ldr	r3, [r3, #0]
 8106958:	4a3a      	ldr	r2, [pc, #232]	@ (8106a44 <HAL_DMA_Abort_IT+0x3ac>)
 810695a:	4293      	cmp	r3, r2
 810695c:	d06d      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 810695e:	687b      	ldr	r3, [r7, #4]
 8106960:	681b      	ldr	r3, [r3, #0]
 8106962:	4a39      	ldr	r2, [pc, #228]	@ (8106a48 <HAL_DMA_Abort_IT+0x3b0>)
 8106964:	4293      	cmp	r3, r2
 8106966:	d068      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	681b      	ldr	r3, [r3, #0]
 810696c:	4a37      	ldr	r2, [pc, #220]	@ (8106a4c <HAL_DMA_Abort_IT+0x3b4>)
 810696e:	4293      	cmp	r3, r2
 8106970:	d063      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106972:	687b      	ldr	r3, [r7, #4]
 8106974:	681b      	ldr	r3, [r3, #0]
 8106976:	4a36      	ldr	r2, [pc, #216]	@ (8106a50 <HAL_DMA_Abort_IT+0x3b8>)
 8106978:	4293      	cmp	r3, r2
 810697a:	d05e      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 810697c:	687b      	ldr	r3, [r7, #4]
 810697e:	681b      	ldr	r3, [r3, #0]
 8106980:	4a34      	ldr	r2, [pc, #208]	@ (8106a54 <HAL_DMA_Abort_IT+0x3bc>)
 8106982:	4293      	cmp	r3, r2
 8106984:	d059      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106986:	687b      	ldr	r3, [r7, #4]
 8106988:	681b      	ldr	r3, [r3, #0]
 810698a:	4a33      	ldr	r2, [pc, #204]	@ (8106a58 <HAL_DMA_Abort_IT+0x3c0>)
 810698c:	4293      	cmp	r3, r2
 810698e:	d054      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	681b      	ldr	r3, [r3, #0]
 8106994:	4a31      	ldr	r2, [pc, #196]	@ (8106a5c <HAL_DMA_Abort_IT+0x3c4>)
 8106996:	4293      	cmp	r3, r2
 8106998:	d04f      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 810699a:	687b      	ldr	r3, [r7, #4]
 810699c:	681b      	ldr	r3, [r3, #0]
 810699e:	4a30      	ldr	r2, [pc, #192]	@ (8106a60 <HAL_DMA_Abort_IT+0x3c8>)
 81069a0:	4293      	cmp	r3, r2
 81069a2:	d04a      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	681b      	ldr	r3, [r3, #0]
 81069a8:	4a2e      	ldr	r2, [pc, #184]	@ (8106a64 <HAL_DMA_Abort_IT+0x3cc>)
 81069aa:	4293      	cmp	r3, r2
 81069ac:	d045      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	681b      	ldr	r3, [r3, #0]
 81069b2:	4a2d      	ldr	r2, [pc, #180]	@ (8106a68 <HAL_DMA_Abort_IT+0x3d0>)
 81069b4:	4293      	cmp	r3, r2
 81069b6:	d040      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	681b      	ldr	r3, [r3, #0]
 81069bc:	4a2b      	ldr	r2, [pc, #172]	@ (8106a6c <HAL_DMA_Abort_IT+0x3d4>)
 81069be:	4293      	cmp	r3, r2
 81069c0:	d03b      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	681b      	ldr	r3, [r3, #0]
 81069c6:	4a2a      	ldr	r2, [pc, #168]	@ (8106a70 <HAL_DMA_Abort_IT+0x3d8>)
 81069c8:	4293      	cmp	r3, r2
 81069ca:	d036      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	4a28      	ldr	r2, [pc, #160]	@ (8106a74 <HAL_DMA_Abort_IT+0x3dc>)
 81069d2:	4293      	cmp	r3, r2
 81069d4:	d031      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069d6:	687b      	ldr	r3, [r7, #4]
 81069d8:	681b      	ldr	r3, [r3, #0]
 81069da:	4a27      	ldr	r2, [pc, #156]	@ (8106a78 <HAL_DMA_Abort_IT+0x3e0>)
 81069dc:	4293      	cmp	r3, r2
 81069de:	d02c      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	681b      	ldr	r3, [r3, #0]
 81069e4:	4a25      	ldr	r2, [pc, #148]	@ (8106a7c <HAL_DMA_Abort_IT+0x3e4>)
 81069e6:	4293      	cmp	r3, r2
 81069e8:	d027      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069ea:	687b      	ldr	r3, [r7, #4]
 81069ec:	681b      	ldr	r3, [r3, #0]
 81069ee:	4a24      	ldr	r2, [pc, #144]	@ (8106a80 <HAL_DMA_Abort_IT+0x3e8>)
 81069f0:	4293      	cmp	r3, r2
 81069f2:	d022      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	4a22      	ldr	r2, [pc, #136]	@ (8106a84 <HAL_DMA_Abort_IT+0x3ec>)
 81069fa:	4293      	cmp	r3, r2
 81069fc:	d01d      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	681b      	ldr	r3, [r3, #0]
 8106a02:	4a21      	ldr	r2, [pc, #132]	@ (8106a88 <HAL_DMA_Abort_IT+0x3f0>)
 8106a04:	4293      	cmp	r3, r2
 8106a06:	d018      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8106a8c <HAL_DMA_Abort_IT+0x3f4>)
 8106a0e:	4293      	cmp	r3, r2
 8106a10:	d013      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	4a1e      	ldr	r2, [pc, #120]	@ (8106a90 <HAL_DMA_Abort_IT+0x3f8>)
 8106a18:	4293      	cmp	r3, r2
 8106a1a:	d00e      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	681b      	ldr	r3, [r3, #0]
 8106a20:	4a1c      	ldr	r2, [pc, #112]	@ (8106a94 <HAL_DMA_Abort_IT+0x3fc>)
 8106a22:	4293      	cmp	r3, r2
 8106a24:	d009      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8106a98 <HAL_DMA_Abort_IT+0x400>)
 8106a2c:	4293      	cmp	r3, r2
 8106a2e:	d004      	beq.n	8106a3a <HAL_DMA_Abort_IT+0x3a2>
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	4a19      	ldr	r2, [pc, #100]	@ (8106a9c <HAL_DMA_Abort_IT+0x404>)
 8106a36:	4293      	cmp	r3, r2
 8106a38:	d132      	bne.n	8106aa0 <HAL_DMA_Abort_IT+0x408>
 8106a3a:	2301      	movs	r3, #1
 8106a3c:	e031      	b.n	8106aa2 <HAL_DMA_Abort_IT+0x40a>
 8106a3e:	bf00      	nop
 8106a40:	40020010 	.word	0x40020010
 8106a44:	40020028 	.word	0x40020028
 8106a48:	40020040 	.word	0x40020040
 8106a4c:	40020058 	.word	0x40020058
 8106a50:	40020070 	.word	0x40020070
 8106a54:	40020088 	.word	0x40020088
 8106a58:	400200a0 	.word	0x400200a0
 8106a5c:	400200b8 	.word	0x400200b8
 8106a60:	40020410 	.word	0x40020410
 8106a64:	40020428 	.word	0x40020428
 8106a68:	40020440 	.word	0x40020440
 8106a6c:	40020458 	.word	0x40020458
 8106a70:	40020470 	.word	0x40020470
 8106a74:	40020488 	.word	0x40020488
 8106a78:	400204a0 	.word	0x400204a0
 8106a7c:	400204b8 	.word	0x400204b8
 8106a80:	58025408 	.word	0x58025408
 8106a84:	5802541c 	.word	0x5802541c
 8106a88:	58025430 	.word	0x58025430
 8106a8c:	58025444 	.word	0x58025444
 8106a90:	58025458 	.word	0x58025458
 8106a94:	5802546c 	.word	0x5802546c
 8106a98:	58025480 	.word	0x58025480
 8106a9c:	58025494 	.word	0x58025494
 8106aa0:	2300      	movs	r3, #0
 8106aa2:	2b00      	cmp	r3, #0
 8106aa4:	d028      	beq.n	8106af8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8106aa6:	687b      	ldr	r3, [r7, #4]
 8106aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106aaa:	681a      	ldr	r2, [r3, #0]
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106ab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106ab4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106aba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106ac0:	f003 031f 	and.w	r3, r3, #31
 8106ac4:	2201      	movs	r2, #1
 8106ac6:	409a      	lsls	r2, r3
 8106ac8:	68fb      	ldr	r3, [r7, #12]
 8106aca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106ad0:	687a      	ldr	r2, [r7, #4]
 8106ad2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106ad4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8106ad6:	687b      	ldr	r3, [r7, #4]
 8106ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106ada:	2b00      	cmp	r3, #0
 8106adc:	d00c      	beq.n	8106af8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106ade:	687b      	ldr	r3, [r7, #4]
 8106ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106ae2:	681a      	ldr	r2, [r3, #0]
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106aec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106aee:	687b      	ldr	r3, [r7, #4]
 8106af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106af2:	687a      	ldr	r2, [r7, #4]
 8106af4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8106af6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	2201      	movs	r2, #1
 8106afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106b00:	687b      	ldr	r3, [r7, #4]
 8106b02:	2200      	movs	r2, #0
 8106b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b0c:	2b00      	cmp	r3, #0
 8106b0e:	d003      	beq.n	8106b18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8106b10:	687b      	ldr	r3, [r7, #4]
 8106b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b14:	6878      	ldr	r0, [r7, #4]
 8106b16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8106b18:	2300      	movs	r3, #0
}
 8106b1a:	4618      	mov	r0, r3
 8106b1c:	3710      	adds	r7, #16
 8106b1e:	46bd      	mov	sp, r7
 8106b20:	bd80      	pop	{r7, pc}
 8106b22:	bf00      	nop

08106b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106b24:	b480      	push	{r7}
 8106b26:	b089      	sub	sp, #36	@ 0x24
 8106b28:	af00      	add	r7, sp, #0
 8106b2a:	6078      	str	r0, [r7, #4]
 8106b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106b2e:	2300      	movs	r3, #0
 8106b30:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106b32:	4b89      	ldr	r3, [pc, #548]	@ (8106d58 <HAL_GPIO_Init+0x234>)
 8106b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106b36:	e194      	b.n	8106e62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106b38:	683b      	ldr	r3, [r7, #0]
 8106b3a:	681a      	ldr	r2, [r3, #0]
 8106b3c:	2101      	movs	r1, #1
 8106b3e:	69fb      	ldr	r3, [r7, #28]
 8106b40:	fa01 f303 	lsl.w	r3, r1, r3
 8106b44:	4013      	ands	r3, r2
 8106b46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106b48:	693b      	ldr	r3, [r7, #16]
 8106b4a:	2b00      	cmp	r3, #0
 8106b4c:	f000 8186 	beq.w	8106e5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8106b50:	683b      	ldr	r3, [r7, #0]
 8106b52:	685b      	ldr	r3, [r3, #4]
 8106b54:	f003 0303 	and.w	r3, r3, #3
 8106b58:	2b01      	cmp	r3, #1
 8106b5a:	d005      	beq.n	8106b68 <HAL_GPIO_Init+0x44>
 8106b5c:	683b      	ldr	r3, [r7, #0]
 8106b5e:	685b      	ldr	r3, [r3, #4]
 8106b60:	f003 0303 	and.w	r3, r3, #3
 8106b64:	2b02      	cmp	r3, #2
 8106b66:	d130      	bne.n	8106bca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	689b      	ldr	r3, [r3, #8]
 8106b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106b6e:	69fb      	ldr	r3, [r7, #28]
 8106b70:	005b      	lsls	r3, r3, #1
 8106b72:	2203      	movs	r2, #3
 8106b74:	fa02 f303 	lsl.w	r3, r2, r3
 8106b78:	43db      	mvns	r3, r3
 8106b7a:	69ba      	ldr	r2, [r7, #24]
 8106b7c:	4013      	ands	r3, r2
 8106b7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106b80:	683b      	ldr	r3, [r7, #0]
 8106b82:	68da      	ldr	r2, [r3, #12]
 8106b84:	69fb      	ldr	r3, [r7, #28]
 8106b86:	005b      	lsls	r3, r3, #1
 8106b88:	fa02 f303 	lsl.w	r3, r2, r3
 8106b8c:	69ba      	ldr	r2, [r7, #24]
 8106b8e:	4313      	orrs	r3, r2
 8106b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8106b92:	687b      	ldr	r3, [r7, #4]
 8106b94:	69ba      	ldr	r2, [r7, #24]
 8106b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	685b      	ldr	r3, [r3, #4]
 8106b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106b9e:	2201      	movs	r2, #1
 8106ba0:	69fb      	ldr	r3, [r7, #28]
 8106ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8106ba6:	43db      	mvns	r3, r3
 8106ba8:	69ba      	ldr	r2, [r7, #24]
 8106baa:	4013      	ands	r3, r2
 8106bac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8106bae:	683b      	ldr	r3, [r7, #0]
 8106bb0:	685b      	ldr	r3, [r3, #4]
 8106bb2:	091b      	lsrs	r3, r3, #4
 8106bb4:	f003 0201 	and.w	r2, r3, #1
 8106bb8:	69fb      	ldr	r3, [r7, #28]
 8106bba:	fa02 f303 	lsl.w	r3, r2, r3
 8106bbe:	69ba      	ldr	r2, [r7, #24]
 8106bc0:	4313      	orrs	r3, r2
 8106bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	69ba      	ldr	r2, [r7, #24]
 8106bc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8106bca:	683b      	ldr	r3, [r7, #0]
 8106bcc:	685b      	ldr	r3, [r3, #4]
 8106bce:	f003 0303 	and.w	r3, r3, #3
 8106bd2:	2b03      	cmp	r3, #3
 8106bd4:	d017      	beq.n	8106c06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	68db      	ldr	r3, [r3, #12]
 8106bda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106bdc:	69fb      	ldr	r3, [r7, #28]
 8106bde:	005b      	lsls	r3, r3, #1
 8106be0:	2203      	movs	r2, #3
 8106be2:	fa02 f303 	lsl.w	r3, r2, r3
 8106be6:	43db      	mvns	r3, r3
 8106be8:	69ba      	ldr	r2, [r7, #24]
 8106bea:	4013      	ands	r3, r2
 8106bec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106bee:	683b      	ldr	r3, [r7, #0]
 8106bf0:	689a      	ldr	r2, [r3, #8]
 8106bf2:	69fb      	ldr	r3, [r7, #28]
 8106bf4:	005b      	lsls	r3, r3, #1
 8106bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8106bfa:	69ba      	ldr	r2, [r7, #24]
 8106bfc:	4313      	orrs	r3, r2
 8106bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	69ba      	ldr	r2, [r7, #24]
 8106c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8106c06:	683b      	ldr	r3, [r7, #0]
 8106c08:	685b      	ldr	r3, [r3, #4]
 8106c0a:	f003 0303 	and.w	r3, r3, #3
 8106c0e:	2b02      	cmp	r3, #2
 8106c10:	d123      	bne.n	8106c5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106c12:	69fb      	ldr	r3, [r7, #28]
 8106c14:	08da      	lsrs	r2, r3, #3
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	3208      	adds	r2, #8
 8106c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106c20:	69fb      	ldr	r3, [r7, #28]
 8106c22:	f003 0307 	and.w	r3, r3, #7
 8106c26:	009b      	lsls	r3, r3, #2
 8106c28:	220f      	movs	r2, #15
 8106c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8106c2e:	43db      	mvns	r3, r3
 8106c30:	69ba      	ldr	r2, [r7, #24]
 8106c32:	4013      	ands	r3, r2
 8106c34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106c36:	683b      	ldr	r3, [r7, #0]
 8106c38:	691a      	ldr	r2, [r3, #16]
 8106c3a:	69fb      	ldr	r3, [r7, #28]
 8106c3c:	f003 0307 	and.w	r3, r3, #7
 8106c40:	009b      	lsls	r3, r3, #2
 8106c42:	fa02 f303 	lsl.w	r3, r2, r3
 8106c46:	69ba      	ldr	r2, [r7, #24]
 8106c48:	4313      	orrs	r3, r2
 8106c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106c4c:	69fb      	ldr	r3, [r7, #28]
 8106c4e:	08da      	lsrs	r2, r3, #3
 8106c50:	687b      	ldr	r3, [r7, #4]
 8106c52:	3208      	adds	r2, #8
 8106c54:	69b9      	ldr	r1, [r7, #24]
 8106c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	681b      	ldr	r3, [r3, #0]
 8106c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106c60:	69fb      	ldr	r3, [r7, #28]
 8106c62:	005b      	lsls	r3, r3, #1
 8106c64:	2203      	movs	r2, #3
 8106c66:	fa02 f303 	lsl.w	r3, r2, r3
 8106c6a:	43db      	mvns	r3, r3
 8106c6c:	69ba      	ldr	r2, [r7, #24]
 8106c6e:	4013      	ands	r3, r2
 8106c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106c72:	683b      	ldr	r3, [r7, #0]
 8106c74:	685b      	ldr	r3, [r3, #4]
 8106c76:	f003 0203 	and.w	r2, r3, #3
 8106c7a:	69fb      	ldr	r3, [r7, #28]
 8106c7c:	005b      	lsls	r3, r3, #1
 8106c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8106c82:	69ba      	ldr	r2, [r7, #24]
 8106c84:	4313      	orrs	r3, r2
 8106c86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	69ba      	ldr	r2, [r7, #24]
 8106c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8106c8e:	683b      	ldr	r3, [r7, #0]
 8106c90:	685b      	ldr	r3, [r3, #4]
 8106c92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106c96:	2b00      	cmp	r3, #0
 8106c98:	f000 80e0 	beq.w	8106e5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8106d5c <HAL_GPIO_Init+0x238>)
 8106c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8106d5c <HAL_GPIO_Init+0x238>)
 8106ca4:	f043 0302 	orr.w	r3, r3, #2
 8106ca8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8106cac:	4b2b      	ldr	r3, [pc, #172]	@ (8106d5c <HAL_GPIO_Init+0x238>)
 8106cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106cb2:	f003 0302 	and.w	r3, r3, #2
 8106cb6:	60fb      	str	r3, [r7, #12]
 8106cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106cba:	4a29      	ldr	r2, [pc, #164]	@ (8106d60 <HAL_GPIO_Init+0x23c>)
 8106cbc:	69fb      	ldr	r3, [r7, #28]
 8106cbe:	089b      	lsrs	r3, r3, #2
 8106cc0:	3302      	adds	r3, #2
 8106cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106cc8:	69fb      	ldr	r3, [r7, #28]
 8106cca:	f003 0303 	and.w	r3, r3, #3
 8106cce:	009b      	lsls	r3, r3, #2
 8106cd0:	220f      	movs	r2, #15
 8106cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8106cd6:	43db      	mvns	r3, r3
 8106cd8:	69ba      	ldr	r2, [r7, #24]
 8106cda:	4013      	ands	r3, r2
 8106cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	4a20      	ldr	r2, [pc, #128]	@ (8106d64 <HAL_GPIO_Init+0x240>)
 8106ce2:	4293      	cmp	r3, r2
 8106ce4:	d052      	beq.n	8106d8c <HAL_GPIO_Init+0x268>
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8106d68 <HAL_GPIO_Init+0x244>)
 8106cea:	4293      	cmp	r3, r2
 8106cec:	d031      	beq.n	8106d52 <HAL_GPIO_Init+0x22e>
 8106cee:	687b      	ldr	r3, [r7, #4]
 8106cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8106d6c <HAL_GPIO_Init+0x248>)
 8106cf2:	4293      	cmp	r3, r2
 8106cf4:	d02b      	beq.n	8106d4e <HAL_GPIO_Init+0x22a>
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8106d70 <HAL_GPIO_Init+0x24c>)
 8106cfa:	4293      	cmp	r3, r2
 8106cfc:	d025      	beq.n	8106d4a <HAL_GPIO_Init+0x226>
 8106cfe:	687b      	ldr	r3, [r7, #4]
 8106d00:	4a1c      	ldr	r2, [pc, #112]	@ (8106d74 <HAL_GPIO_Init+0x250>)
 8106d02:	4293      	cmp	r3, r2
 8106d04:	d01f      	beq.n	8106d46 <HAL_GPIO_Init+0x222>
 8106d06:	687b      	ldr	r3, [r7, #4]
 8106d08:	4a1b      	ldr	r2, [pc, #108]	@ (8106d78 <HAL_GPIO_Init+0x254>)
 8106d0a:	4293      	cmp	r3, r2
 8106d0c:	d019      	beq.n	8106d42 <HAL_GPIO_Init+0x21e>
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	4a1a      	ldr	r2, [pc, #104]	@ (8106d7c <HAL_GPIO_Init+0x258>)
 8106d12:	4293      	cmp	r3, r2
 8106d14:	d013      	beq.n	8106d3e <HAL_GPIO_Init+0x21a>
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	4a19      	ldr	r2, [pc, #100]	@ (8106d80 <HAL_GPIO_Init+0x25c>)
 8106d1a:	4293      	cmp	r3, r2
 8106d1c:	d00d      	beq.n	8106d3a <HAL_GPIO_Init+0x216>
 8106d1e:	687b      	ldr	r3, [r7, #4]
 8106d20:	4a18      	ldr	r2, [pc, #96]	@ (8106d84 <HAL_GPIO_Init+0x260>)
 8106d22:	4293      	cmp	r3, r2
 8106d24:	d007      	beq.n	8106d36 <HAL_GPIO_Init+0x212>
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	4a17      	ldr	r2, [pc, #92]	@ (8106d88 <HAL_GPIO_Init+0x264>)
 8106d2a:	4293      	cmp	r3, r2
 8106d2c:	d101      	bne.n	8106d32 <HAL_GPIO_Init+0x20e>
 8106d2e:	2309      	movs	r3, #9
 8106d30:	e02d      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d32:	230a      	movs	r3, #10
 8106d34:	e02b      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d36:	2308      	movs	r3, #8
 8106d38:	e029      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d3a:	2307      	movs	r3, #7
 8106d3c:	e027      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d3e:	2306      	movs	r3, #6
 8106d40:	e025      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d42:	2305      	movs	r3, #5
 8106d44:	e023      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d46:	2304      	movs	r3, #4
 8106d48:	e021      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d4a:	2303      	movs	r3, #3
 8106d4c:	e01f      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d4e:	2302      	movs	r3, #2
 8106d50:	e01d      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d52:	2301      	movs	r3, #1
 8106d54:	e01b      	b.n	8106d8e <HAL_GPIO_Init+0x26a>
 8106d56:	bf00      	nop
 8106d58:	580000c0 	.word	0x580000c0
 8106d5c:	58024400 	.word	0x58024400
 8106d60:	58000400 	.word	0x58000400
 8106d64:	58020000 	.word	0x58020000
 8106d68:	58020400 	.word	0x58020400
 8106d6c:	58020800 	.word	0x58020800
 8106d70:	58020c00 	.word	0x58020c00
 8106d74:	58021000 	.word	0x58021000
 8106d78:	58021400 	.word	0x58021400
 8106d7c:	58021800 	.word	0x58021800
 8106d80:	58021c00 	.word	0x58021c00
 8106d84:	58022000 	.word	0x58022000
 8106d88:	58022400 	.word	0x58022400
 8106d8c:	2300      	movs	r3, #0
 8106d8e:	69fa      	ldr	r2, [r7, #28]
 8106d90:	f002 0203 	and.w	r2, r2, #3
 8106d94:	0092      	lsls	r2, r2, #2
 8106d96:	4093      	lsls	r3, r2
 8106d98:	69ba      	ldr	r2, [r7, #24]
 8106d9a:	4313      	orrs	r3, r2
 8106d9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106d9e:	4938      	ldr	r1, [pc, #224]	@ (8106e80 <HAL_GPIO_Init+0x35c>)
 8106da0:	69fb      	ldr	r3, [r7, #28]
 8106da2:	089b      	lsrs	r3, r3, #2
 8106da4:	3302      	adds	r3, #2
 8106da6:	69ba      	ldr	r2, [r7, #24]
 8106da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106db0:	681b      	ldr	r3, [r3, #0]
 8106db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106db4:	693b      	ldr	r3, [r7, #16]
 8106db6:	43db      	mvns	r3, r3
 8106db8:	69ba      	ldr	r2, [r7, #24]
 8106dba:	4013      	ands	r3, r2
 8106dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8106dbe:	683b      	ldr	r3, [r7, #0]
 8106dc0:	685b      	ldr	r3, [r3, #4]
 8106dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8106dc6:	2b00      	cmp	r3, #0
 8106dc8:	d003      	beq.n	8106dd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8106dca:	69ba      	ldr	r2, [r7, #24]
 8106dcc:	693b      	ldr	r3, [r7, #16]
 8106dce:	4313      	orrs	r3, r2
 8106dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106dd6:	69bb      	ldr	r3, [r7, #24]
 8106dd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106dde:	685b      	ldr	r3, [r3, #4]
 8106de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106de2:	693b      	ldr	r3, [r7, #16]
 8106de4:	43db      	mvns	r3, r3
 8106de6:	69ba      	ldr	r2, [r7, #24]
 8106de8:	4013      	ands	r3, r2
 8106dea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8106dec:	683b      	ldr	r3, [r7, #0]
 8106dee:	685b      	ldr	r3, [r3, #4]
 8106df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8106df4:	2b00      	cmp	r3, #0
 8106df6:	d003      	beq.n	8106e00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8106df8:	69ba      	ldr	r2, [r7, #24]
 8106dfa:	693b      	ldr	r3, [r7, #16]
 8106dfc:	4313      	orrs	r3, r2
 8106dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106e00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106e04:	69bb      	ldr	r3, [r7, #24]
 8106e06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8106e08:	697b      	ldr	r3, [r7, #20]
 8106e0a:	685b      	ldr	r3, [r3, #4]
 8106e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e0e:	693b      	ldr	r3, [r7, #16]
 8106e10:	43db      	mvns	r3, r3
 8106e12:	69ba      	ldr	r2, [r7, #24]
 8106e14:	4013      	ands	r3, r2
 8106e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8106e18:	683b      	ldr	r3, [r7, #0]
 8106e1a:	685b      	ldr	r3, [r3, #4]
 8106e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106e20:	2b00      	cmp	r3, #0
 8106e22:	d003      	beq.n	8106e2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8106e24:	69ba      	ldr	r2, [r7, #24]
 8106e26:	693b      	ldr	r3, [r7, #16]
 8106e28:	4313      	orrs	r3, r2
 8106e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106e2c:	697b      	ldr	r3, [r7, #20]
 8106e2e:	69ba      	ldr	r2, [r7, #24]
 8106e30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106e32:	697b      	ldr	r3, [r7, #20]
 8106e34:	681b      	ldr	r3, [r3, #0]
 8106e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e38:	693b      	ldr	r3, [r7, #16]
 8106e3a:	43db      	mvns	r3, r3
 8106e3c:	69ba      	ldr	r2, [r7, #24]
 8106e3e:	4013      	ands	r3, r2
 8106e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8106e42:	683b      	ldr	r3, [r7, #0]
 8106e44:	685b      	ldr	r3, [r3, #4]
 8106e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106e4a:	2b00      	cmp	r3, #0
 8106e4c:	d003      	beq.n	8106e56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8106e4e:	69ba      	ldr	r2, [r7, #24]
 8106e50:	693b      	ldr	r3, [r7, #16]
 8106e52:	4313      	orrs	r3, r2
 8106e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106e56:	697b      	ldr	r3, [r7, #20]
 8106e58:	69ba      	ldr	r2, [r7, #24]
 8106e5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8106e5c:	69fb      	ldr	r3, [r7, #28]
 8106e5e:	3301      	adds	r3, #1
 8106e60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106e62:	683b      	ldr	r3, [r7, #0]
 8106e64:	681a      	ldr	r2, [r3, #0]
 8106e66:	69fb      	ldr	r3, [r7, #28]
 8106e68:	fa22 f303 	lsr.w	r3, r2, r3
 8106e6c:	2b00      	cmp	r3, #0
 8106e6e:	f47f ae63 	bne.w	8106b38 <HAL_GPIO_Init+0x14>
  }
}
 8106e72:	bf00      	nop
 8106e74:	bf00      	nop
 8106e76:	3724      	adds	r7, #36	@ 0x24
 8106e78:	46bd      	mov	sp, r7
 8106e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e7e:	4770      	bx	lr
 8106e80:	58000400 	.word	0x58000400

08106e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106e84:	b480      	push	{r7}
 8106e86:	b083      	sub	sp, #12
 8106e88:	af00      	add	r7, sp, #0
 8106e8a:	6078      	str	r0, [r7, #4]
 8106e8c:	460b      	mov	r3, r1
 8106e8e:	807b      	strh	r3, [r7, #2]
 8106e90:	4613      	mov	r3, r2
 8106e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106e94:	787b      	ldrb	r3, [r7, #1]
 8106e96:	2b00      	cmp	r3, #0
 8106e98:	d003      	beq.n	8106ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8106e9a:	887a      	ldrh	r2, [r7, #2]
 8106e9c:	687b      	ldr	r3, [r7, #4]
 8106e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106ea0:	e003      	b.n	8106eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106ea2:	887b      	ldrh	r3, [r7, #2]
 8106ea4:	041a      	lsls	r2, r3, #16
 8106ea6:	687b      	ldr	r3, [r7, #4]
 8106ea8:	619a      	str	r2, [r3, #24]
}
 8106eaa:	bf00      	nop
 8106eac:	370c      	adds	r7, #12
 8106eae:	46bd      	mov	sp, r7
 8106eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106eb4:	4770      	bx	lr

08106eb6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8106eb6:	b580      	push	{r7, lr}
 8106eb8:	b082      	sub	sp, #8
 8106eba:	af00      	add	r7, sp, #0
 8106ebc:	4603      	mov	r3, r0
 8106ebe:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8106ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106ec4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8106ec8:	88fb      	ldrh	r3, [r7, #6]
 8106eca:	4013      	ands	r3, r2
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	d008      	beq.n	8106ee2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8106ed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106ed4:	88fb      	ldrh	r3, [r7, #6]
 8106ed6:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8106eda:	88fb      	ldrh	r3, [r7, #6]
 8106edc:	4618      	mov	r0, r3
 8106ede:	f7fc fbeb 	bl	81036b8 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8106ee2:	bf00      	nop
 8106ee4:	3708      	adds	r7, #8
 8106ee6:	46bd      	mov	sp, r7
 8106ee8:	bd80      	pop	{r7, pc}
	...

08106eec <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106eec:	b480      	push	{r7}
 8106eee:	b083      	sub	sp, #12
 8106ef0:	af00      	add	r7, sp, #0
 8106ef2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106ef4:	4b05      	ldr	r3, [pc, #20]	@ (8106f0c <HAL_HSEM_ActivateNotification+0x20>)
 8106ef6:	681a      	ldr	r2, [r3, #0]
 8106ef8:	4904      	ldr	r1, [pc, #16]	@ (8106f0c <HAL_HSEM_ActivateNotification+0x20>)
 8106efa:	687b      	ldr	r3, [r7, #4]
 8106efc:	4313      	orrs	r3, r2
 8106efe:	600b      	str	r3, [r1, #0]
#endif
}
 8106f00:	bf00      	nop
 8106f02:	370c      	adds	r7, #12
 8106f04:	46bd      	mov	sp, r7
 8106f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f0a:	4770      	bx	lr
 8106f0c:	58026510 	.word	0x58026510

08106f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8106f10:	b580      	push	{r7, lr}
 8106f12:	b082      	sub	sp, #8
 8106f14:	af00      	add	r7, sp, #0
 8106f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8106f18:	687b      	ldr	r3, [r7, #4]
 8106f1a:	2b00      	cmp	r3, #0
 8106f1c:	d101      	bne.n	8106f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8106f1e:	2301      	movs	r3, #1
 8106f20:	e08d      	b.n	810703e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106f28:	b2db      	uxtb	r3, r3
 8106f2a:	2b00      	cmp	r3, #0
 8106f2c:	d106      	bne.n	8106f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	2200      	movs	r2, #0
 8106f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8106f36:	6878      	ldr	r0, [r7, #4]
 8106f38:	f7fc fdcc 	bl	8103ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8106f3c:	687b      	ldr	r3, [r7, #4]
 8106f3e:	2224      	movs	r2, #36	@ 0x24
 8106f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	681b      	ldr	r3, [r3, #0]
 8106f48:	681a      	ldr	r2, [r3, #0]
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	681b      	ldr	r3, [r3, #0]
 8106f4e:	f022 0201 	bic.w	r2, r2, #1
 8106f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8106f54:	687b      	ldr	r3, [r7, #4]
 8106f56:	685a      	ldr	r2, [r3, #4]
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8106f60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8106f62:	687b      	ldr	r3, [r7, #4]
 8106f64:	681b      	ldr	r3, [r3, #0]
 8106f66:	689a      	ldr	r2, [r3, #8]
 8106f68:	687b      	ldr	r3, [r7, #4]
 8106f6a:	681b      	ldr	r3, [r3, #0]
 8106f6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106f70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8106f72:	687b      	ldr	r3, [r7, #4]
 8106f74:	68db      	ldr	r3, [r3, #12]
 8106f76:	2b01      	cmp	r3, #1
 8106f78:	d107      	bne.n	8106f8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	689a      	ldr	r2, [r3, #8]
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	681b      	ldr	r3, [r3, #0]
 8106f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8106f86:	609a      	str	r2, [r3, #8]
 8106f88:	e006      	b.n	8106f98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	689a      	ldr	r2, [r3, #8]
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	681b      	ldr	r3, [r3, #0]
 8106f92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8106f96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8106f98:	687b      	ldr	r3, [r7, #4]
 8106f9a:	68db      	ldr	r3, [r3, #12]
 8106f9c:	2b02      	cmp	r3, #2
 8106f9e:	d108      	bne.n	8106fb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8106fa0:	687b      	ldr	r3, [r7, #4]
 8106fa2:	681b      	ldr	r3, [r3, #0]
 8106fa4:	685a      	ldr	r2, [r3, #4]
 8106fa6:	687b      	ldr	r3, [r7, #4]
 8106fa8:	681b      	ldr	r3, [r3, #0]
 8106faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106fae:	605a      	str	r2, [r3, #4]
 8106fb0:	e007      	b.n	8106fc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	681b      	ldr	r3, [r3, #0]
 8106fb6:	685a      	ldr	r2, [r3, #4]
 8106fb8:	687b      	ldr	r3, [r7, #4]
 8106fba:	681b      	ldr	r3, [r3, #0]
 8106fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8106fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8106fc2:	687b      	ldr	r3, [r7, #4]
 8106fc4:	681b      	ldr	r3, [r3, #0]
 8106fc6:	685b      	ldr	r3, [r3, #4]
 8106fc8:	687a      	ldr	r2, [r7, #4]
 8106fca:	6812      	ldr	r2, [r2, #0]
 8106fcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8106fd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8106fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	681b      	ldr	r3, [r3, #0]
 8106fda:	68da      	ldr	r2, [r3, #12]
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	681b      	ldr	r3, [r3, #0]
 8106fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	691a      	ldr	r2, [r3, #16]
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	695b      	ldr	r3, [r3, #20]
 8106fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8106ff2:	687b      	ldr	r3, [r7, #4]
 8106ff4:	699b      	ldr	r3, [r3, #24]
 8106ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8106ff8:	687b      	ldr	r3, [r7, #4]
 8106ffa:	681b      	ldr	r3, [r3, #0]
 8106ffc:	430a      	orrs	r2, r1
 8106ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	69d9      	ldr	r1, [r3, #28]
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	6a1a      	ldr	r2, [r3, #32]
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	681b      	ldr	r3, [r3, #0]
 810700c:	430a      	orrs	r2, r1
 810700e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8107010:	687b      	ldr	r3, [r7, #4]
 8107012:	681b      	ldr	r3, [r3, #0]
 8107014:	681a      	ldr	r2, [r3, #0]
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	681b      	ldr	r3, [r3, #0]
 810701a:	f042 0201 	orr.w	r2, r2, #1
 810701e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107020:	687b      	ldr	r3, [r7, #4]
 8107022:	2200      	movs	r2, #0
 8107024:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	2220      	movs	r2, #32
 810702a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	2200      	movs	r2, #0
 8107032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107034:	687b      	ldr	r3, [r7, #4]
 8107036:	2200      	movs	r2, #0
 8107038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 810703c:	2300      	movs	r3, #0
}
 810703e:	4618      	mov	r0, r3
 8107040:	3708      	adds	r7, #8
 8107042:	46bd      	mov	sp, r7
 8107044:	bd80      	pop	{r7, pc}
	...

08107048 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8107048:	b580      	push	{r7, lr}
 810704a:	b088      	sub	sp, #32
 810704c:	af02      	add	r7, sp, #8
 810704e:	60f8      	str	r0, [r7, #12]
 8107050:	607a      	str	r2, [r7, #4]
 8107052:	461a      	mov	r2, r3
 8107054:	460b      	mov	r3, r1
 8107056:	817b      	strh	r3, [r7, #10]
 8107058:	4613      	mov	r3, r2
 810705a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 810705c:	68fb      	ldr	r3, [r7, #12]
 810705e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107062:	b2db      	uxtb	r3, r3
 8107064:	2b20      	cmp	r3, #32
 8107066:	f040 80fd 	bne.w	8107264 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810706a:	68fb      	ldr	r3, [r7, #12]
 810706c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107070:	2b01      	cmp	r3, #1
 8107072:	d101      	bne.n	8107078 <HAL_I2C_Master_Transmit+0x30>
 8107074:	2302      	movs	r3, #2
 8107076:	e0f6      	b.n	8107266 <HAL_I2C_Master_Transmit+0x21e>
 8107078:	68fb      	ldr	r3, [r7, #12]
 810707a:	2201      	movs	r2, #1
 810707c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8107080:	f7fd f9a4 	bl	81043cc <HAL_GetTick>
 8107084:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8107086:	693b      	ldr	r3, [r7, #16]
 8107088:	9300      	str	r3, [sp, #0]
 810708a:	2319      	movs	r3, #25
 810708c:	2201      	movs	r2, #1
 810708e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8107092:	68f8      	ldr	r0, [r7, #12]
 8107094:	f000 fa24 	bl	81074e0 <I2C_WaitOnFlagUntilTimeout>
 8107098:	4603      	mov	r3, r0
 810709a:	2b00      	cmp	r3, #0
 810709c:	d001      	beq.n	81070a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 810709e:	2301      	movs	r3, #1
 81070a0:	e0e1      	b.n	8107266 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81070a2:	68fb      	ldr	r3, [r7, #12]
 81070a4:	2221      	movs	r2, #33	@ 0x21
 81070a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81070aa:	68fb      	ldr	r3, [r7, #12]
 81070ac:	2210      	movs	r2, #16
 81070ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81070b2:	68fb      	ldr	r3, [r7, #12]
 81070b4:	2200      	movs	r2, #0
 81070b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81070b8:	68fb      	ldr	r3, [r7, #12]
 81070ba:	687a      	ldr	r2, [r7, #4]
 81070bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81070be:	68fb      	ldr	r3, [r7, #12]
 81070c0:	893a      	ldrh	r2, [r7, #8]
 81070c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81070c4:	68fb      	ldr	r3, [r7, #12]
 81070c6:	2200      	movs	r2, #0
 81070c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81070ca:	68fb      	ldr	r3, [r7, #12]
 81070cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81070ce:	b29b      	uxth	r3, r3
 81070d0:	2bff      	cmp	r3, #255	@ 0xff
 81070d2:	d906      	bls.n	81070e2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81070d4:	68fb      	ldr	r3, [r7, #12]
 81070d6:	22ff      	movs	r2, #255	@ 0xff
 81070d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 81070da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81070de:	617b      	str	r3, [r7, #20]
 81070e0:	e007      	b.n	81070f2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81070e2:	68fb      	ldr	r3, [r7, #12]
 81070e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81070e6:	b29a      	uxth	r2, r3
 81070e8:	68fb      	ldr	r3, [r7, #12]
 81070ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 81070ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81070f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81070f2:	68fb      	ldr	r3, [r7, #12]
 81070f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81070f6:	2b00      	cmp	r3, #0
 81070f8:	d024      	beq.n	8107144 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81070fa:	68fb      	ldr	r3, [r7, #12]
 81070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81070fe:	781a      	ldrb	r2, [r3, #0]
 8107100:	68fb      	ldr	r3, [r7, #12]
 8107102:	681b      	ldr	r3, [r3, #0]
 8107104:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107106:	68fb      	ldr	r3, [r7, #12]
 8107108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810710a:	1c5a      	adds	r2, r3, #1
 810710c:	68fb      	ldr	r3, [r7, #12]
 810710e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8107110:	68fb      	ldr	r3, [r7, #12]
 8107112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107114:	b29b      	uxth	r3, r3
 8107116:	3b01      	subs	r3, #1
 8107118:	b29a      	uxth	r2, r3
 810711a:	68fb      	ldr	r3, [r7, #12]
 810711c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810711e:	68fb      	ldr	r3, [r7, #12]
 8107120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107122:	3b01      	subs	r3, #1
 8107124:	b29a      	uxth	r2, r3
 8107126:	68fb      	ldr	r3, [r7, #12]
 8107128:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 810712a:	68fb      	ldr	r3, [r7, #12]
 810712c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810712e:	b2db      	uxtb	r3, r3
 8107130:	3301      	adds	r3, #1
 8107132:	b2da      	uxtb	r2, r3
 8107134:	8979      	ldrh	r1, [r7, #10]
 8107136:	4b4e      	ldr	r3, [pc, #312]	@ (8107270 <HAL_I2C_Master_Transmit+0x228>)
 8107138:	9300      	str	r3, [sp, #0]
 810713a:	697b      	ldr	r3, [r7, #20]
 810713c:	68f8      	ldr	r0, [r7, #12]
 810713e:	f000 fc1f 	bl	8107980 <I2C_TransferConfig>
 8107142:	e066      	b.n	8107212 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8107144:	68fb      	ldr	r3, [r7, #12]
 8107146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107148:	b2da      	uxtb	r2, r3
 810714a:	8979      	ldrh	r1, [r7, #10]
 810714c:	4b48      	ldr	r3, [pc, #288]	@ (8107270 <HAL_I2C_Master_Transmit+0x228>)
 810714e:	9300      	str	r3, [sp, #0]
 8107150:	697b      	ldr	r3, [r7, #20]
 8107152:	68f8      	ldr	r0, [r7, #12]
 8107154:	f000 fc14 	bl	8107980 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8107158:	e05b      	b.n	8107212 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810715a:	693a      	ldr	r2, [r7, #16]
 810715c:	6a39      	ldr	r1, [r7, #32]
 810715e:	68f8      	ldr	r0, [r7, #12]
 8107160:	f000 fa17 	bl	8107592 <I2C_WaitOnTXISFlagUntilTimeout>
 8107164:	4603      	mov	r3, r0
 8107166:	2b00      	cmp	r3, #0
 8107168:	d001      	beq.n	810716e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 810716a:	2301      	movs	r3, #1
 810716c:	e07b      	b.n	8107266 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810716e:	68fb      	ldr	r3, [r7, #12]
 8107170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107172:	781a      	ldrb	r2, [r3, #0]
 8107174:	68fb      	ldr	r3, [r7, #12]
 8107176:	681b      	ldr	r3, [r3, #0]
 8107178:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810717a:	68fb      	ldr	r3, [r7, #12]
 810717c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810717e:	1c5a      	adds	r2, r3, #1
 8107180:	68fb      	ldr	r3, [r7, #12]
 8107182:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8107184:	68fb      	ldr	r3, [r7, #12]
 8107186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107188:	b29b      	uxth	r3, r3
 810718a:	3b01      	subs	r3, #1
 810718c:	b29a      	uxth	r2, r3
 810718e:	68fb      	ldr	r3, [r7, #12]
 8107190:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8107192:	68fb      	ldr	r3, [r7, #12]
 8107194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107196:	3b01      	subs	r3, #1
 8107198:	b29a      	uxth	r2, r3
 810719a:	68fb      	ldr	r3, [r7, #12]
 810719c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810719e:	68fb      	ldr	r3, [r7, #12]
 81071a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81071a2:	b29b      	uxth	r3, r3
 81071a4:	2b00      	cmp	r3, #0
 81071a6:	d034      	beq.n	8107212 <HAL_I2C_Master_Transmit+0x1ca>
 81071a8:	68fb      	ldr	r3, [r7, #12]
 81071aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81071ac:	2b00      	cmp	r3, #0
 81071ae:	d130      	bne.n	8107212 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81071b0:	693b      	ldr	r3, [r7, #16]
 81071b2:	9300      	str	r3, [sp, #0]
 81071b4:	6a3b      	ldr	r3, [r7, #32]
 81071b6:	2200      	movs	r2, #0
 81071b8:	2180      	movs	r1, #128	@ 0x80
 81071ba:	68f8      	ldr	r0, [r7, #12]
 81071bc:	f000 f990 	bl	81074e0 <I2C_WaitOnFlagUntilTimeout>
 81071c0:	4603      	mov	r3, r0
 81071c2:	2b00      	cmp	r3, #0
 81071c4:	d001      	beq.n	81071ca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 81071c6:	2301      	movs	r3, #1
 81071c8:	e04d      	b.n	8107266 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81071ca:	68fb      	ldr	r3, [r7, #12]
 81071cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81071ce:	b29b      	uxth	r3, r3
 81071d0:	2bff      	cmp	r3, #255	@ 0xff
 81071d2:	d90e      	bls.n	81071f2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81071d4:	68fb      	ldr	r3, [r7, #12]
 81071d6:	22ff      	movs	r2, #255	@ 0xff
 81071d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81071da:	68fb      	ldr	r3, [r7, #12]
 81071dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81071de:	b2da      	uxtb	r2, r3
 81071e0:	8979      	ldrh	r1, [r7, #10]
 81071e2:	2300      	movs	r3, #0
 81071e4:	9300      	str	r3, [sp, #0]
 81071e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81071ea:	68f8      	ldr	r0, [r7, #12]
 81071ec:	f000 fbc8 	bl	8107980 <I2C_TransferConfig>
 81071f0:	e00f      	b.n	8107212 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81071f2:	68fb      	ldr	r3, [r7, #12]
 81071f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81071f6:	b29a      	uxth	r2, r3
 81071f8:	68fb      	ldr	r3, [r7, #12]
 81071fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81071fc:	68fb      	ldr	r3, [r7, #12]
 81071fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107200:	b2da      	uxtb	r2, r3
 8107202:	8979      	ldrh	r1, [r7, #10]
 8107204:	2300      	movs	r3, #0
 8107206:	9300      	str	r3, [sp, #0]
 8107208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810720c:	68f8      	ldr	r0, [r7, #12]
 810720e:	f000 fbb7 	bl	8107980 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8107212:	68fb      	ldr	r3, [r7, #12]
 8107214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107216:	b29b      	uxth	r3, r3
 8107218:	2b00      	cmp	r3, #0
 810721a:	d19e      	bne.n	810715a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810721c:	693a      	ldr	r2, [r7, #16]
 810721e:	6a39      	ldr	r1, [r7, #32]
 8107220:	68f8      	ldr	r0, [r7, #12]
 8107222:	f000 f9fd 	bl	8107620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8107226:	4603      	mov	r3, r0
 8107228:	2b00      	cmp	r3, #0
 810722a:	d001      	beq.n	8107230 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 810722c:	2301      	movs	r3, #1
 810722e:	e01a      	b.n	8107266 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107230:	68fb      	ldr	r3, [r7, #12]
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	2220      	movs	r2, #32
 8107236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107238:	68fb      	ldr	r3, [r7, #12]
 810723a:	681b      	ldr	r3, [r3, #0]
 810723c:	6859      	ldr	r1, [r3, #4]
 810723e:	68fb      	ldr	r3, [r7, #12]
 8107240:	681a      	ldr	r2, [r3, #0]
 8107242:	4b0c      	ldr	r3, [pc, #48]	@ (8107274 <HAL_I2C_Master_Transmit+0x22c>)
 8107244:	400b      	ands	r3, r1
 8107246:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8107248:	68fb      	ldr	r3, [r7, #12]
 810724a:	2220      	movs	r2, #32
 810724c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	2200      	movs	r2, #0
 8107254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107258:	68fb      	ldr	r3, [r7, #12]
 810725a:	2200      	movs	r2, #0
 810725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107260:	2300      	movs	r3, #0
 8107262:	e000      	b.n	8107266 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8107264:	2302      	movs	r3, #2
  }
}
 8107266:	4618      	mov	r0, r3
 8107268:	3718      	adds	r7, #24
 810726a:	46bd      	mov	sp, r7
 810726c:	bd80      	pop	{r7, pc}
 810726e:	bf00      	nop
 8107270:	80002000 	.word	0x80002000
 8107274:	fe00e800 	.word	0xfe00e800

08107278 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8107278:	b580      	push	{r7, lr}
 810727a:	b088      	sub	sp, #32
 810727c:	af02      	add	r7, sp, #8
 810727e:	60f8      	str	r0, [r7, #12]
 8107280:	607a      	str	r2, [r7, #4]
 8107282:	461a      	mov	r2, r3
 8107284:	460b      	mov	r3, r1
 8107286:	817b      	strh	r3, [r7, #10]
 8107288:	4613      	mov	r3, r2
 810728a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 810728c:	68fb      	ldr	r3, [r7, #12]
 810728e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107292:	b2db      	uxtb	r3, r3
 8107294:	2b20      	cmp	r3, #32
 8107296:	f040 80db 	bne.w	8107450 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810729a:	68fb      	ldr	r3, [r7, #12]
 810729c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81072a0:	2b01      	cmp	r3, #1
 81072a2:	d101      	bne.n	81072a8 <HAL_I2C_Master_Receive+0x30>
 81072a4:	2302      	movs	r3, #2
 81072a6:	e0d4      	b.n	8107452 <HAL_I2C_Master_Receive+0x1da>
 81072a8:	68fb      	ldr	r3, [r7, #12]
 81072aa:	2201      	movs	r2, #1
 81072ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81072b0:	f7fd f88c 	bl	81043cc <HAL_GetTick>
 81072b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81072b6:	697b      	ldr	r3, [r7, #20]
 81072b8:	9300      	str	r3, [sp, #0]
 81072ba:	2319      	movs	r3, #25
 81072bc:	2201      	movs	r2, #1
 81072be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81072c2:	68f8      	ldr	r0, [r7, #12]
 81072c4:	f000 f90c 	bl	81074e0 <I2C_WaitOnFlagUntilTimeout>
 81072c8:	4603      	mov	r3, r0
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d001      	beq.n	81072d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81072ce:	2301      	movs	r3, #1
 81072d0:	e0bf      	b.n	8107452 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81072d2:	68fb      	ldr	r3, [r7, #12]
 81072d4:	2222      	movs	r2, #34	@ 0x22
 81072d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81072da:	68fb      	ldr	r3, [r7, #12]
 81072dc:	2210      	movs	r2, #16
 81072de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81072e2:	68fb      	ldr	r3, [r7, #12]
 81072e4:	2200      	movs	r2, #0
 81072e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	687a      	ldr	r2, [r7, #4]
 81072ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81072ee:	68fb      	ldr	r3, [r7, #12]
 81072f0:	893a      	ldrh	r2, [r7, #8]
 81072f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81072f4:	68fb      	ldr	r3, [r7, #12]
 81072f6:	2200      	movs	r2, #0
 81072f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81072fa:	68fb      	ldr	r3, [r7, #12]
 81072fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81072fe:	b29b      	uxth	r3, r3
 8107300:	2bff      	cmp	r3, #255	@ 0xff
 8107302:	d90e      	bls.n	8107322 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8107304:	68fb      	ldr	r3, [r7, #12]
 8107306:	22ff      	movs	r2, #255	@ 0xff
 8107308:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810730a:	68fb      	ldr	r3, [r7, #12]
 810730c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810730e:	b2da      	uxtb	r2, r3
 8107310:	8979      	ldrh	r1, [r7, #10]
 8107312:	4b52      	ldr	r3, [pc, #328]	@ (810745c <HAL_I2C_Master_Receive+0x1e4>)
 8107314:	9300      	str	r3, [sp, #0]
 8107316:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810731a:	68f8      	ldr	r0, [r7, #12]
 810731c:	f000 fb30 	bl	8107980 <I2C_TransferConfig>
 8107320:	e06d      	b.n	81073fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8107322:	68fb      	ldr	r3, [r7, #12]
 8107324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107326:	b29a      	uxth	r2, r3
 8107328:	68fb      	ldr	r3, [r7, #12]
 810732a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810732c:	68fb      	ldr	r3, [r7, #12]
 810732e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107330:	b2da      	uxtb	r2, r3
 8107332:	8979      	ldrh	r1, [r7, #10]
 8107334:	4b49      	ldr	r3, [pc, #292]	@ (810745c <HAL_I2C_Master_Receive+0x1e4>)
 8107336:	9300      	str	r3, [sp, #0]
 8107338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810733c:	68f8      	ldr	r0, [r7, #12]
 810733e:	f000 fb1f 	bl	8107980 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8107342:	e05c      	b.n	81073fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8107344:	697a      	ldr	r2, [r7, #20]
 8107346:	6a39      	ldr	r1, [r7, #32]
 8107348:	68f8      	ldr	r0, [r7, #12]
 810734a:	f000 f9ad 	bl	81076a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 810734e:	4603      	mov	r3, r0
 8107350:	2b00      	cmp	r3, #0
 8107352:	d001      	beq.n	8107358 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8107354:	2301      	movs	r3, #1
 8107356:	e07c      	b.n	8107452 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107358:	68fb      	ldr	r3, [r7, #12]
 810735a:	681b      	ldr	r3, [r3, #0]
 810735c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810735e:	68fb      	ldr	r3, [r7, #12]
 8107360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107362:	b2d2      	uxtb	r2, r2
 8107364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107366:	68fb      	ldr	r3, [r7, #12]
 8107368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810736a:	1c5a      	adds	r2, r3, #1
 810736c:	68fb      	ldr	r3, [r7, #12]
 810736e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8107370:	68fb      	ldr	r3, [r7, #12]
 8107372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107374:	3b01      	subs	r3, #1
 8107376:	b29a      	uxth	r2, r3
 8107378:	68fb      	ldr	r3, [r7, #12]
 810737a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107380:	b29b      	uxth	r3, r3
 8107382:	3b01      	subs	r3, #1
 8107384:	b29a      	uxth	r2, r3
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810738e:	b29b      	uxth	r3, r3
 8107390:	2b00      	cmp	r3, #0
 8107392:	d034      	beq.n	81073fe <HAL_I2C_Master_Receive+0x186>
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107398:	2b00      	cmp	r3, #0
 810739a:	d130      	bne.n	81073fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810739c:	697b      	ldr	r3, [r7, #20]
 810739e:	9300      	str	r3, [sp, #0]
 81073a0:	6a3b      	ldr	r3, [r7, #32]
 81073a2:	2200      	movs	r2, #0
 81073a4:	2180      	movs	r1, #128	@ 0x80
 81073a6:	68f8      	ldr	r0, [r7, #12]
 81073a8:	f000 f89a 	bl	81074e0 <I2C_WaitOnFlagUntilTimeout>
 81073ac:	4603      	mov	r3, r0
 81073ae:	2b00      	cmp	r3, #0
 81073b0:	d001      	beq.n	81073b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81073b2:	2301      	movs	r3, #1
 81073b4:	e04d      	b.n	8107452 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81073b6:	68fb      	ldr	r3, [r7, #12]
 81073b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81073ba:	b29b      	uxth	r3, r3
 81073bc:	2bff      	cmp	r3, #255	@ 0xff
 81073be:	d90e      	bls.n	81073de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81073c0:	68fb      	ldr	r3, [r7, #12]
 81073c2:	22ff      	movs	r2, #255	@ 0xff
 81073c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81073c6:	68fb      	ldr	r3, [r7, #12]
 81073c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81073ca:	b2da      	uxtb	r2, r3
 81073cc:	8979      	ldrh	r1, [r7, #10]
 81073ce:	2300      	movs	r3, #0
 81073d0:	9300      	str	r3, [sp, #0]
 81073d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81073d6:	68f8      	ldr	r0, [r7, #12]
 81073d8:	f000 fad2 	bl	8107980 <I2C_TransferConfig>
 81073dc:	e00f      	b.n	81073fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81073e2:	b29a      	uxth	r2, r3
 81073e4:	68fb      	ldr	r3, [r7, #12]
 81073e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81073e8:	68fb      	ldr	r3, [r7, #12]
 81073ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81073ec:	b2da      	uxtb	r2, r3
 81073ee:	8979      	ldrh	r1, [r7, #10]
 81073f0:	2300      	movs	r3, #0
 81073f2:	9300      	str	r3, [sp, #0]
 81073f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81073f8:	68f8      	ldr	r0, [r7, #12]
 81073fa:	f000 fac1 	bl	8107980 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107402:	b29b      	uxth	r3, r3
 8107404:	2b00      	cmp	r3, #0
 8107406:	d19d      	bne.n	8107344 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8107408:	697a      	ldr	r2, [r7, #20]
 810740a:	6a39      	ldr	r1, [r7, #32]
 810740c:	68f8      	ldr	r0, [r7, #12]
 810740e:	f000 f907 	bl	8107620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8107412:	4603      	mov	r3, r0
 8107414:	2b00      	cmp	r3, #0
 8107416:	d001      	beq.n	810741c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8107418:	2301      	movs	r3, #1
 810741a:	e01a      	b.n	8107452 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810741c:	68fb      	ldr	r3, [r7, #12]
 810741e:	681b      	ldr	r3, [r3, #0]
 8107420:	2220      	movs	r2, #32
 8107422:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107424:	68fb      	ldr	r3, [r7, #12]
 8107426:	681b      	ldr	r3, [r3, #0]
 8107428:	6859      	ldr	r1, [r3, #4]
 810742a:	68fb      	ldr	r3, [r7, #12]
 810742c:	681a      	ldr	r2, [r3, #0]
 810742e:	4b0c      	ldr	r3, [pc, #48]	@ (8107460 <HAL_I2C_Master_Receive+0x1e8>)
 8107430:	400b      	ands	r3, r1
 8107432:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	2220      	movs	r2, #32
 8107438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810743c:	68fb      	ldr	r3, [r7, #12]
 810743e:	2200      	movs	r2, #0
 8107440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107444:	68fb      	ldr	r3, [r7, #12]
 8107446:	2200      	movs	r2, #0
 8107448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810744c:	2300      	movs	r3, #0
 810744e:	e000      	b.n	8107452 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8107450:	2302      	movs	r3, #2
  }
}
 8107452:	4618      	mov	r0, r3
 8107454:	3718      	adds	r7, #24
 8107456:	46bd      	mov	sp, r7
 8107458:	bd80      	pop	{r7, pc}
 810745a:	bf00      	nop
 810745c:	80002400 	.word	0x80002400
 8107460:	fe00e800 	.word	0xfe00e800

08107464 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8107464:	b480      	push	{r7}
 8107466:	b083      	sub	sp, #12
 8107468:	af00      	add	r7, sp, #0
 810746a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107472:	b2db      	uxtb	r3, r3
}
 8107474:	4618      	mov	r0, r3
 8107476:	370c      	adds	r7, #12
 8107478:	46bd      	mov	sp, r7
 810747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810747e:	4770      	bx	lr

08107480 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8107480:	b480      	push	{r7}
 8107482:	b083      	sub	sp, #12
 8107484:	af00      	add	r7, sp, #0
 8107486:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8107488:	687b      	ldr	r3, [r7, #4]
 810748a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 810748c:	4618      	mov	r0, r3
 810748e:	370c      	adds	r7, #12
 8107490:	46bd      	mov	sp, r7
 8107492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107496:	4770      	bx	lr

08107498 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8107498:	b480      	push	{r7}
 810749a:	b083      	sub	sp, #12
 810749c:	af00      	add	r7, sp, #0
 810749e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	681b      	ldr	r3, [r3, #0]
 81074a4:	699b      	ldr	r3, [r3, #24]
 81074a6:	f003 0302 	and.w	r3, r3, #2
 81074aa:	2b02      	cmp	r3, #2
 81074ac:	d103      	bne.n	81074b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81074ae:	687b      	ldr	r3, [r7, #4]
 81074b0:	681b      	ldr	r3, [r3, #0]
 81074b2:	2200      	movs	r2, #0
 81074b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81074b6:	687b      	ldr	r3, [r7, #4]
 81074b8:	681b      	ldr	r3, [r3, #0]
 81074ba:	699b      	ldr	r3, [r3, #24]
 81074bc:	f003 0301 	and.w	r3, r3, #1
 81074c0:	2b01      	cmp	r3, #1
 81074c2:	d007      	beq.n	81074d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81074c4:	687b      	ldr	r3, [r7, #4]
 81074c6:	681b      	ldr	r3, [r3, #0]
 81074c8:	699a      	ldr	r2, [r3, #24]
 81074ca:	687b      	ldr	r3, [r7, #4]
 81074cc:	681b      	ldr	r3, [r3, #0]
 81074ce:	f042 0201 	orr.w	r2, r2, #1
 81074d2:	619a      	str	r2, [r3, #24]
  }
}
 81074d4:	bf00      	nop
 81074d6:	370c      	adds	r7, #12
 81074d8:	46bd      	mov	sp, r7
 81074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074de:	4770      	bx	lr

081074e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81074e0:	b580      	push	{r7, lr}
 81074e2:	b084      	sub	sp, #16
 81074e4:	af00      	add	r7, sp, #0
 81074e6:	60f8      	str	r0, [r7, #12]
 81074e8:	60b9      	str	r1, [r7, #8]
 81074ea:	603b      	str	r3, [r7, #0]
 81074ec:	4613      	mov	r3, r2
 81074ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81074f0:	e03b      	b.n	810756a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81074f2:	69ba      	ldr	r2, [r7, #24]
 81074f4:	6839      	ldr	r1, [r7, #0]
 81074f6:	68f8      	ldr	r0, [r7, #12]
 81074f8:	f000 f962 	bl	81077c0 <I2C_IsErrorOccurred>
 81074fc:	4603      	mov	r3, r0
 81074fe:	2b00      	cmp	r3, #0
 8107500:	d001      	beq.n	8107506 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8107502:	2301      	movs	r3, #1
 8107504:	e041      	b.n	810758a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107506:	683b      	ldr	r3, [r7, #0]
 8107508:	f1b3 3fff 	cmp.w	r3, #4294967295
 810750c:	d02d      	beq.n	810756a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810750e:	f7fc ff5d 	bl	81043cc <HAL_GetTick>
 8107512:	4602      	mov	r2, r0
 8107514:	69bb      	ldr	r3, [r7, #24]
 8107516:	1ad3      	subs	r3, r2, r3
 8107518:	683a      	ldr	r2, [r7, #0]
 810751a:	429a      	cmp	r2, r3
 810751c:	d302      	bcc.n	8107524 <I2C_WaitOnFlagUntilTimeout+0x44>
 810751e:	683b      	ldr	r3, [r7, #0]
 8107520:	2b00      	cmp	r3, #0
 8107522:	d122      	bne.n	810756a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8107524:	68fb      	ldr	r3, [r7, #12]
 8107526:	681b      	ldr	r3, [r3, #0]
 8107528:	699a      	ldr	r2, [r3, #24]
 810752a:	68bb      	ldr	r3, [r7, #8]
 810752c:	4013      	ands	r3, r2
 810752e:	68ba      	ldr	r2, [r7, #8]
 8107530:	429a      	cmp	r2, r3
 8107532:	bf0c      	ite	eq
 8107534:	2301      	moveq	r3, #1
 8107536:	2300      	movne	r3, #0
 8107538:	b2db      	uxtb	r3, r3
 810753a:	461a      	mov	r2, r3
 810753c:	79fb      	ldrb	r3, [r7, #7]
 810753e:	429a      	cmp	r2, r3
 8107540:	d113      	bne.n	810756a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107542:	68fb      	ldr	r3, [r7, #12]
 8107544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107546:	f043 0220 	orr.w	r2, r3, #32
 810754a:	68fb      	ldr	r3, [r7, #12]
 810754c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810754e:	68fb      	ldr	r3, [r7, #12]
 8107550:	2220      	movs	r2, #32
 8107552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8107556:	68fb      	ldr	r3, [r7, #12]
 8107558:	2200      	movs	r2, #0
 810755a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810755e:	68fb      	ldr	r3, [r7, #12]
 8107560:	2200      	movs	r2, #0
 8107562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8107566:	2301      	movs	r3, #1
 8107568:	e00f      	b.n	810758a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810756a:	68fb      	ldr	r3, [r7, #12]
 810756c:	681b      	ldr	r3, [r3, #0]
 810756e:	699a      	ldr	r2, [r3, #24]
 8107570:	68bb      	ldr	r3, [r7, #8]
 8107572:	4013      	ands	r3, r2
 8107574:	68ba      	ldr	r2, [r7, #8]
 8107576:	429a      	cmp	r2, r3
 8107578:	bf0c      	ite	eq
 810757a:	2301      	moveq	r3, #1
 810757c:	2300      	movne	r3, #0
 810757e:	b2db      	uxtb	r3, r3
 8107580:	461a      	mov	r2, r3
 8107582:	79fb      	ldrb	r3, [r7, #7]
 8107584:	429a      	cmp	r2, r3
 8107586:	d0b4      	beq.n	81074f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107588:	2300      	movs	r3, #0
}
 810758a:	4618      	mov	r0, r3
 810758c:	3710      	adds	r7, #16
 810758e:	46bd      	mov	sp, r7
 8107590:	bd80      	pop	{r7, pc}

08107592 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8107592:	b580      	push	{r7, lr}
 8107594:	b084      	sub	sp, #16
 8107596:	af00      	add	r7, sp, #0
 8107598:	60f8      	str	r0, [r7, #12]
 810759a:	60b9      	str	r1, [r7, #8]
 810759c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810759e:	e033      	b.n	8107608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81075a0:	687a      	ldr	r2, [r7, #4]
 81075a2:	68b9      	ldr	r1, [r7, #8]
 81075a4:	68f8      	ldr	r0, [r7, #12]
 81075a6:	f000 f90b 	bl	81077c0 <I2C_IsErrorOccurred>
 81075aa:	4603      	mov	r3, r0
 81075ac:	2b00      	cmp	r3, #0
 81075ae:	d001      	beq.n	81075b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81075b0:	2301      	movs	r3, #1
 81075b2:	e031      	b.n	8107618 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81075b4:	68bb      	ldr	r3, [r7, #8]
 81075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81075ba:	d025      	beq.n	8107608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81075bc:	f7fc ff06 	bl	81043cc <HAL_GetTick>
 81075c0:	4602      	mov	r2, r0
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	1ad3      	subs	r3, r2, r3
 81075c6:	68ba      	ldr	r2, [r7, #8]
 81075c8:	429a      	cmp	r2, r3
 81075ca:	d302      	bcc.n	81075d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81075cc:	68bb      	ldr	r3, [r7, #8]
 81075ce:	2b00      	cmp	r3, #0
 81075d0:	d11a      	bne.n	8107608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81075d2:	68fb      	ldr	r3, [r7, #12]
 81075d4:	681b      	ldr	r3, [r3, #0]
 81075d6:	699b      	ldr	r3, [r3, #24]
 81075d8:	f003 0302 	and.w	r3, r3, #2
 81075dc:	2b02      	cmp	r3, #2
 81075de:	d013      	beq.n	8107608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81075e0:	68fb      	ldr	r3, [r7, #12]
 81075e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81075e4:	f043 0220 	orr.w	r2, r3, #32
 81075e8:	68fb      	ldr	r3, [r7, #12]
 81075ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81075ec:	68fb      	ldr	r3, [r7, #12]
 81075ee:	2220      	movs	r2, #32
 81075f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81075f4:	68fb      	ldr	r3, [r7, #12]
 81075f6:	2200      	movs	r2, #0
 81075f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81075fc:	68fb      	ldr	r3, [r7, #12]
 81075fe:	2200      	movs	r2, #0
 8107600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8107604:	2301      	movs	r3, #1
 8107606:	e007      	b.n	8107618 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107608:	68fb      	ldr	r3, [r7, #12]
 810760a:	681b      	ldr	r3, [r3, #0]
 810760c:	699b      	ldr	r3, [r3, #24]
 810760e:	f003 0302 	and.w	r3, r3, #2
 8107612:	2b02      	cmp	r3, #2
 8107614:	d1c4      	bne.n	81075a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8107616:	2300      	movs	r3, #0
}
 8107618:	4618      	mov	r0, r3
 810761a:	3710      	adds	r7, #16
 810761c:	46bd      	mov	sp, r7
 810761e:	bd80      	pop	{r7, pc}

08107620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8107620:	b580      	push	{r7, lr}
 8107622:	b084      	sub	sp, #16
 8107624:	af00      	add	r7, sp, #0
 8107626:	60f8      	str	r0, [r7, #12]
 8107628:	60b9      	str	r1, [r7, #8]
 810762a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810762c:	e02f      	b.n	810768e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810762e:	687a      	ldr	r2, [r7, #4]
 8107630:	68b9      	ldr	r1, [r7, #8]
 8107632:	68f8      	ldr	r0, [r7, #12]
 8107634:	f000 f8c4 	bl	81077c0 <I2C_IsErrorOccurred>
 8107638:	4603      	mov	r3, r0
 810763a:	2b00      	cmp	r3, #0
 810763c:	d001      	beq.n	8107642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810763e:	2301      	movs	r3, #1
 8107640:	e02d      	b.n	810769e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107642:	f7fc fec3 	bl	81043cc <HAL_GetTick>
 8107646:	4602      	mov	r2, r0
 8107648:	687b      	ldr	r3, [r7, #4]
 810764a:	1ad3      	subs	r3, r2, r3
 810764c:	68ba      	ldr	r2, [r7, #8]
 810764e:	429a      	cmp	r2, r3
 8107650:	d302      	bcc.n	8107658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8107652:	68bb      	ldr	r3, [r7, #8]
 8107654:	2b00      	cmp	r3, #0
 8107656:	d11a      	bne.n	810768e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8107658:	68fb      	ldr	r3, [r7, #12]
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	699b      	ldr	r3, [r3, #24]
 810765e:	f003 0320 	and.w	r3, r3, #32
 8107662:	2b20      	cmp	r3, #32
 8107664:	d013      	beq.n	810768e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107666:	68fb      	ldr	r3, [r7, #12]
 8107668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810766a:	f043 0220 	orr.w	r2, r3, #32
 810766e:	68fb      	ldr	r3, [r7, #12]
 8107670:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8107672:	68fb      	ldr	r3, [r7, #12]
 8107674:	2220      	movs	r2, #32
 8107676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810767a:	68fb      	ldr	r3, [r7, #12]
 810767c:	2200      	movs	r2, #0
 810767e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107682:	68fb      	ldr	r3, [r7, #12]
 8107684:	2200      	movs	r2, #0
 8107686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 810768a:	2301      	movs	r3, #1
 810768c:	e007      	b.n	810769e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810768e:	68fb      	ldr	r3, [r7, #12]
 8107690:	681b      	ldr	r3, [r3, #0]
 8107692:	699b      	ldr	r3, [r3, #24]
 8107694:	f003 0320 	and.w	r3, r3, #32
 8107698:	2b20      	cmp	r3, #32
 810769a:	d1c8      	bne.n	810762e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810769c:	2300      	movs	r3, #0
}
 810769e:	4618      	mov	r0, r3
 81076a0:	3710      	adds	r7, #16
 81076a2:	46bd      	mov	sp, r7
 81076a4:	bd80      	pop	{r7, pc}
	...

081076a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81076a8:	b580      	push	{r7, lr}
 81076aa:	b086      	sub	sp, #24
 81076ac:	af00      	add	r7, sp, #0
 81076ae:	60f8      	str	r0, [r7, #12]
 81076b0:	60b9      	str	r1, [r7, #8]
 81076b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81076b4:	2300      	movs	r3, #0
 81076b6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 81076b8:	e071      	b.n	810779e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81076ba:	687a      	ldr	r2, [r7, #4]
 81076bc:	68b9      	ldr	r1, [r7, #8]
 81076be:	68f8      	ldr	r0, [r7, #12]
 81076c0:	f000 f87e 	bl	81077c0 <I2C_IsErrorOccurred>
 81076c4:	4603      	mov	r3, r0
 81076c6:	2b00      	cmp	r3, #0
 81076c8:	d001      	beq.n	81076ce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 81076ca:	2301      	movs	r3, #1
 81076cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 81076ce:	68fb      	ldr	r3, [r7, #12]
 81076d0:	681b      	ldr	r3, [r3, #0]
 81076d2:	699b      	ldr	r3, [r3, #24]
 81076d4:	f003 0320 	and.w	r3, r3, #32
 81076d8:	2b20      	cmp	r3, #32
 81076da:	d13b      	bne.n	8107754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 81076dc:	7dfb      	ldrb	r3, [r7, #23]
 81076de:	2b00      	cmp	r3, #0
 81076e0:	d138      	bne.n	8107754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81076e2:	68fb      	ldr	r3, [r7, #12]
 81076e4:	681b      	ldr	r3, [r3, #0]
 81076e6:	699b      	ldr	r3, [r3, #24]
 81076e8:	f003 0304 	and.w	r3, r3, #4
 81076ec:	2b04      	cmp	r3, #4
 81076ee:	d105      	bne.n	81076fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 81076f0:	68fb      	ldr	r3, [r7, #12]
 81076f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81076f4:	2b00      	cmp	r3, #0
 81076f6:	d001      	beq.n	81076fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 81076f8:	2300      	movs	r3, #0
 81076fa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81076fc:	68fb      	ldr	r3, [r7, #12]
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	699b      	ldr	r3, [r3, #24]
 8107702:	f003 0310 	and.w	r3, r3, #16
 8107706:	2b10      	cmp	r3, #16
 8107708:	d121      	bne.n	810774e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810770a:	68fb      	ldr	r3, [r7, #12]
 810770c:	681b      	ldr	r3, [r3, #0]
 810770e:	2210      	movs	r2, #16
 8107710:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8107712:	68fb      	ldr	r3, [r7, #12]
 8107714:	2204      	movs	r2, #4
 8107716:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107718:	68fb      	ldr	r3, [r7, #12]
 810771a:	681b      	ldr	r3, [r3, #0]
 810771c:	2220      	movs	r2, #32
 810771e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8107720:	68fb      	ldr	r3, [r7, #12]
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	6859      	ldr	r1, [r3, #4]
 8107726:	68fb      	ldr	r3, [r7, #12]
 8107728:	681a      	ldr	r2, [r3, #0]
 810772a:	4b24      	ldr	r3, [pc, #144]	@ (81077bc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 810772c:	400b      	ands	r3, r1
 810772e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8107730:	68fb      	ldr	r3, [r7, #12]
 8107732:	2220      	movs	r2, #32
 8107734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8107738:	68fb      	ldr	r3, [r7, #12]
 810773a:	2200      	movs	r2, #0
 810773c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107740:	68fb      	ldr	r3, [r7, #12]
 8107742:	2200      	movs	r2, #0
 8107744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8107748:	2301      	movs	r3, #1
 810774a:	75fb      	strb	r3, [r7, #23]
 810774c:	e002      	b.n	8107754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810774e:	68fb      	ldr	r3, [r7, #12]
 8107750:	2200      	movs	r2, #0
 8107752:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8107754:	f7fc fe3a 	bl	81043cc <HAL_GetTick>
 8107758:	4602      	mov	r2, r0
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	1ad3      	subs	r3, r2, r3
 810775e:	68ba      	ldr	r2, [r7, #8]
 8107760:	429a      	cmp	r2, r3
 8107762:	d302      	bcc.n	810776a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8107764:	68bb      	ldr	r3, [r7, #8]
 8107766:	2b00      	cmp	r3, #0
 8107768:	d119      	bne.n	810779e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 810776a:	7dfb      	ldrb	r3, [r7, #23]
 810776c:	2b00      	cmp	r3, #0
 810776e:	d116      	bne.n	810779e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8107770:	68fb      	ldr	r3, [r7, #12]
 8107772:	681b      	ldr	r3, [r3, #0]
 8107774:	699b      	ldr	r3, [r3, #24]
 8107776:	f003 0304 	and.w	r3, r3, #4
 810777a:	2b04      	cmp	r3, #4
 810777c:	d00f      	beq.n	810779e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810777e:	68fb      	ldr	r3, [r7, #12]
 8107780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107782:	f043 0220 	orr.w	r2, r3, #32
 8107786:	68fb      	ldr	r3, [r7, #12]
 8107788:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810778a:	68fb      	ldr	r3, [r7, #12]
 810778c:	2220      	movs	r2, #32
 810778e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107792:	68fb      	ldr	r3, [r7, #12]
 8107794:	2200      	movs	r2, #0
 8107796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 810779a:	2301      	movs	r3, #1
 810779c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 810779e:	68fb      	ldr	r3, [r7, #12]
 81077a0:	681b      	ldr	r3, [r3, #0]
 81077a2:	699b      	ldr	r3, [r3, #24]
 81077a4:	f003 0304 	and.w	r3, r3, #4
 81077a8:	2b04      	cmp	r3, #4
 81077aa:	d002      	beq.n	81077b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 81077ac:	7dfb      	ldrb	r3, [r7, #23]
 81077ae:	2b00      	cmp	r3, #0
 81077b0:	d083      	beq.n	81076ba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 81077b2:	7dfb      	ldrb	r3, [r7, #23]
}
 81077b4:	4618      	mov	r0, r3
 81077b6:	3718      	adds	r7, #24
 81077b8:	46bd      	mov	sp, r7
 81077ba:	bd80      	pop	{r7, pc}
 81077bc:	fe00e800 	.word	0xfe00e800

081077c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81077c0:	b580      	push	{r7, lr}
 81077c2:	b08a      	sub	sp, #40	@ 0x28
 81077c4:	af00      	add	r7, sp, #0
 81077c6:	60f8      	str	r0, [r7, #12]
 81077c8:	60b9      	str	r1, [r7, #8]
 81077ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81077cc:	2300      	movs	r3, #0
 81077ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81077d2:	68fb      	ldr	r3, [r7, #12]
 81077d4:	681b      	ldr	r3, [r3, #0]
 81077d6:	699b      	ldr	r3, [r3, #24]
 81077d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81077da:	2300      	movs	r3, #0
 81077dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81077de:	687b      	ldr	r3, [r7, #4]
 81077e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81077e2:	69bb      	ldr	r3, [r7, #24]
 81077e4:	f003 0310 	and.w	r3, r3, #16
 81077e8:	2b00      	cmp	r3, #0
 81077ea:	d068      	beq.n	81078be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077ec:	68fb      	ldr	r3, [r7, #12]
 81077ee:	681b      	ldr	r3, [r3, #0]
 81077f0:	2210      	movs	r2, #16
 81077f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81077f4:	e049      	b.n	810788a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81077f6:	68bb      	ldr	r3, [r7, #8]
 81077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81077fc:	d045      	beq.n	810788a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81077fe:	f7fc fde5 	bl	81043cc <HAL_GetTick>
 8107802:	4602      	mov	r2, r0
 8107804:	69fb      	ldr	r3, [r7, #28]
 8107806:	1ad3      	subs	r3, r2, r3
 8107808:	68ba      	ldr	r2, [r7, #8]
 810780a:	429a      	cmp	r2, r3
 810780c:	d302      	bcc.n	8107814 <I2C_IsErrorOccurred+0x54>
 810780e:	68bb      	ldr	r3, [r7, #8]
 8107810:	2b00      	cmp	r3, #0
 8107812:	d13a      	bne.n	810788a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8107814:	68fb      	ldr	r3, [r7, #12]
 8107816:	681b      	ldr	r3, [r3, #0]
 8107818:	685b      	ldr	r3, [r3, #4]
 810781a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810781e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8107820:	68fb      	ldr	r3, [r7, #12]
 8107822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8107826:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8107828:	68fb      	ldr	r3, [r7, #12]
 810782a:	681b      	ldr	r3, [r3, #0]
 810782c:	699b      	ldr	r3, [r3, #24]
 810782e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8107832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107836:	d121      	bne.n	810787c <I2C_IsErrorOccurred+0xbc>
 8107838:	697b      	ldr	r3, [r7, #20]
 810783a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810783e:	d01d      	beq.n	810787c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8107840:	7cfb      	ldrb	r3, [r7, #19]
 8107842:	2b20      	cmp	r3, #32
 8107844:	d01a      	beq.n	810787c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8107846:	68fb      	ldr	r3, [r7, #12]
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	685a      	ldr	r2, [r3, #4]
 810784c:	68fb      	ldr	r3, [r7, #12]
 810784e:	681b      	ldr	r3, [r3, #0]
 8107850:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8107854:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8107856:	f7fc fdb9 	bl	81043cc <HAL_GetTick>
 810785a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810785c:	e00e      	b.n	810787c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810785e:	f7fc fdb5 	bl	81043cc <HAL_GetTick>
 8107862:	4602      	mov	r2, r0
 8107864:	69fb      	ldr	r3, [r7, #28]
 8107866:	1ad3      	subs	r3, r2, r3
 8107868:	2b19      	cmp	r3, #25
 810786a:	d907      	bls.n	810787c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810786c:	6a3b      	ldr	r3, [r7, #32]
 810786e:	f043 0320 	orr.w	r3, r3, #32
 8107872:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8107874:	2301      	movs	r3, #1
 8107876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810787a:	e006      	b.n	810788a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810787c:	68fb      	ldr	r3, [r7, #12]
 810787e:	681b      	ldr	r3, [r3, #0]
 8107880:	699b      	ldr	r3, [r3, #24]
 8107882:	f003 0320 	and.w	r3, r3, #32
 8107886:	2b20      	cmp	r3, #32
 8107888:	d1e9      	bne.n	810785e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810788a:	68fb      	ldr	r3, [r7, #12]
 810788c:	681b      	ldr	r3, [r3, #0]
 810788e:	699b      	ldr	r3, [r3, #24]
 8107890:	f003 0320 	and.w	r3, r3, #32
 8107894:	2b20      	cmp	r3, #32
 8107896:	d003      	beq.n	81078a0 <I2C_IsErrorOccurred+0xe0>
 8107898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810789c:	2b00      	cmp	r3, #0
 810789e:	d0aa      	beq.n	81077f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81078a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81078a4:	2b00      	cmp	r3, #0
 81078a6:	d103      	bne.n	81078b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81078a8:	68fb      	ldr	r3, [r7, #12]
 81078aa:	681b      	ldr	r3, [r3, #0]
 81078ac:	2220      	movs	r2, #32
 81078ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81078b0:	6a3b      	ldr	r3, [r7, #32]
 81078b2:	f043 0304 	orr.w	r3, r3, #4
 81078b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81078b8:	2301      	movs	r3, #1
 81078ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81078be:	68fb      	ldr	r3, [r7, #12]
 81078c0:	681b      	ldr	r3, [r3, #0]
 81078c2:	699b      	ldr	r3, [r3, #24]
 81078c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81078c6:	69bb      	ldr	r3, [r7, #24]
 81078c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81078cc:	2b00      	cmp	r3, #0
 81078ce:	d00b      	beq.n	81078e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81078d0:	6a3b      	ldr	r3, [r7, #32]
 81078d2:	f043 0301 	orr.w	r3, r3, #1
 81078d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81078d8:	68fb      	ldr	r3, [r7, #12]
 81078da:	681b      	ldr	r3, [r3, #0]
 81078dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81078e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81078e2:	2301      	movs	r3, #1
 81078e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81078e8:	69bb      	ldr	r3, [r7, #24]
 81078ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81078ee:	2b00      	cmp	r3, #0
 81078f0:	d00b      	beq.n	810790a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81078f2:	6a3b      	ldr	r3, [r7, #32]
 81078f4:	f043 0308 	orr.w	r3, r3, #8
 81078f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81078fa:	68fb      	ldr	r3, [r7, #12]
 81078fc:	681b      	ldr	r3, [r3, #0]
 81078fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8107902:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8107904:	2301      	movs	r3, #1
 8107906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810790a:	69bb      	ldr	r3, [r7, #24]
 810790c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107910:	2b00      	cmp	r3, #0
 8107912:	d00b      	beq.n	810792c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8107914:	6a3b      	ldr	r3, [r7, #32]
 8107916:	f043 0302 	orr.w	r3, r3, #2
 810791a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810791c:	68fb      	ldr	r3, [r7, #12]
 810791e:	681b      	ldr	r3, [r3, #0]
 8107920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8107924:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8107926:	2301      	movs	r3, #1
 8107928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 810792c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107930:	2b00      	cmp	r3, #0
 8107932:	d01c      	beq.n	810796e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8107934:	68f8      	ldr	r0, [r7, #12]
 8107936:	f7ff fdaf 	bl	8107498 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810793a:	68fb      	ldr	r3, [r7, #12]
 810793c:	681b      	ldr	r3, [r3, #0]
 810793e:	6859      	ldr	r1, [r3, #4]
 8107940:	68fb      	ldr	r3, [r7, #12]
 8107942:	681a      	ldr	r2, [r3, #0]
 8107944:	4b0d      	ldr	r3, [pc, #52]	@ (810797c <I2C_IsErrorOccurred+0x1bc>)
 8107946:	400b      	ands	r3, r1
 8107948:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810794a:	68fb      	ldr	r3, [r7, #12]
 810794c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810794e:	6a3b      	ldr	r3, [r7, #32]
 8107950:	431a      	orrs	r2, r3
 8107952:	68fb      	ldr	r3, [r7, #12]
 8107954:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8107956:	68fb      	ldr	r3, [r7, #12]
 8107958:	2220      	movs	r2, #32
 810795a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810795e:	68fb      	ldr	r3, [r7, #12]
 8107960:	2200      	movs	r2, #0
 8107962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107966:	68fb      	ldr	r3, [r7, #12]
 8107968:	2200      	movs	r2, #0
 810796a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810796e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8107972:	4618      	mov	r0, r3
 8107974:	3728      	adds	r7, #40	@ 0x28
 8107976:	46bd      	mov	sp, r7
 8107978:	bd80      	pop	{r7, pc}
 810797a:	bf00      	nop
 810797c:	fe00e800 	.word	0xfe00e800

08107980 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8107980:	b480      	push	{r7}
 8107982:	b087      	sub	sp, #28
 8107984:	af00      	add	r7, sp, #0
 8107986:	60f8      	str	r0, [r7, #12]
 8107988:	607b      	str	r3, [r7, #4]
 810798a:	460b      	mov	r3, r1
 810798c:	817b      	strh	r3, [r7, #10]
 810798e:	4613      	mov	r3, r2
 8107990:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8107992:	897b      	ldrh	r3, [r7, #10]
 8107994:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8107998:	7a7b      	ldrb	r3, [r7, #9]
 810799a:	041b      	lsls	r3, r3, #16
 810799c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81079a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81079a6:	6a3b      	ldr	r3, [r7, #32]
 81079a8:	4313      	orrs	r3, r2
 81079aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81079ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81079b0:	68fb      	ldr	r3, [r7, #12]
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	685a      	ldr	r2, [r3, #4]
 81079b6:	6a3b      	ldr	r3, [r7, #32]
 81079b8:	0d5b      	lsrs	r3, r3, #21
 81079ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 81079be:	4b08      	ldr	r3, [pc, #32]	@ (81079e0 <I2C_TransferConfig+0x60>)
 81079c0:	430b      	orrs	r3, r1
 81079c2:	43db      	mvns	r3, r3
 81079c4:	ea02 0103 	and.w	r1, r2, r3
 81079c8:	68fb      	ldr	r3, [r7, #12]
 81079ca:	681b      	ldr	r3, [r3, #0]
 81079cc:	697a      	ldr	r2, [r7, #20]
 81079ce:	430a      	orrs	r2, r1
 81079d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81079d2:	bf00      	nop
 81079d4:	371c      	adds	r7, #28
 81079d6:	46bd      	mov	sp, r7
 81079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079dc:	4770      	bx	lr
 81079de:	bf00      	nop
 81079e0:	03ff63ff 	.word	0x03ff63ff

081079e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81079e4:	b480      	push	{r7}
 81079e6:	b083      	sub	sp, #12
 81079e8:	af00      	add	r7, sp, #0
 81079ea:	6078      	str	r0, [r7, #4]
 81079ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81079ee:	687b      	ldr	r3, [r7, #4]
 81079f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81079f4:	b2db      	uxtb	r3, r3
 81079f6:	2b20      	cmp	r3, #32
 81079f8:	d138      	bne.n	8107a6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81079fa:	687b      	ldr	r3, [r7, #4]
 81079fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107a00:	2b01      	cmp	r3, #1
 8107a02:	d101      	bne.n	8107a08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8107a04:	2302      	movs	r3, #2
 8107a06:	e032      	b.n	8107a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8107a08:	687b      	ldr	r3, [r7, #4]
 8107a0a:	2201      	movs	r2, #1
 8107a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8107a10:	687b      	ldr	r3, [r7, #4]
 8107a12:	2224      	movs	r2, #36	@ 0x24
 8107a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8107a18:	687b      	ldr	r3, [r7, #4]
 8107a1a:	681b      	ldr	r3, [r3, #0]
 8107a1c:	681a      	ldr	r2, [r3, #0]
 8107a1e:	687b      	ldr	r3, [r7, #4]
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	f022 0201 	bic.w	r2, r2, #1
 8107a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	681a      	ldr	r2, [r3, #0]
 8107a2e:	687b      	ldr	r3, [r7, #4]
 8107a30:	681b      	ldr	r3, [r3, #0]
 8107a32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8107a36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	6819      	ldr	r1, [r3, #0]
 8107a3e:	687b      	ldr	r3, [r7, #4]
 8107a40:	681b      	ldr	r3, [r3, #0]
 8107a42:	683a      	ldr	r2, [r7, #0]
 8107a44:	430a      	orrs	r2, r1
 8107a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8107a48:	687b      	ldr	r3, [r7, #4]
 8107a4a:	681b      	ldr	r3, [r3, #0]
 8107a4c:	681a      	ldr	r2, [r3, #0]
 8107a4e:	687b      	ldr	r3, [r7, #4]
 8107a50:	681b      	ldr	r3, [r3, #0]
 8107a52:	f042 0201 	orr.w	r2, r2, #1
 8107a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8107a58:	687b      	ldr	r3, [r7, #4]
 8107a5a:	2220      	movs	r2, #32
 8107a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107a60:	687b      	ldr	r3, [r7, #4]
 8107a62:	2200      	movs	r2, #0
 8107a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107a68:	2300      	movs	r3, #0
 8107a6a:	e000      	b.n	8107a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8107a6c:	2302      	movs	r3, #2
  }
}
 8107a6e:	4618      	mov	r0, r3
 8107a70:	370c      	adds	r7, #12
 8107a72:	46bd      	mov	sp, r7
 8107a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a78:	4770      	bx	lr

08107a7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8107a7a:	b480      	push	{r7}
 8107a7c:	b085      	sub	sp, #20
 8107a7e:	af00      	add	r7, sp, #0
 8107a80:	6078      	str	r0, [r7, #4]
 8107a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107a84:	687b      	ldr	r3, [r7, #4]
 8107a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107a8a:	b2db      	uxtb	r3, r3
 8107a8c:	2b20      	cmp	r3, #32
 8107a8e:	d139      	bne.n	8107b04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107a90:	687b      	ldr	r3, [r7, #4]
 8107a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107a96:	2b01      	cmp	r3, #1
 8107a98:	d101      	bne.n	8107a9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8107a9a:	2302      	movs	r3, #2
 8107a9c:	e033      	b.n	8107b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	2201      	movs	r2, #1
 8107aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	2224      	movs	r2, #36	@ 0x24
 8107aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8107aae:	687b      	ldr	r3, [r7, #4]
 8107ab0:	681b      	ldr	r3, [r3, #0]
 8107ab2:	681a      	ldr	r2, [r3, #0]
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	681b      	ldr	r3, [r3, #0]
 8107ab8:	f022 0201 	bic.w	r2, r2, #1
 8107abc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8107abe:	687b      	ldr	r3, [r7, #4]
 8107ac0:	681b      	ldr	r3, [r3, #0]
 8107ac2:	681b      	ldr	r3, [r3, #0]
 8107ac4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8107ac6:	68fb      	ldr	r3, [r7, #12]
 8107ac8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8107acc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8107ace:	683b      	ldr	r3, [r7, #0]
 8107ad0:	021b      	lsls	r3, r3, #8
 8107ad2:	68fa      	ldr	r2, [r7, #12]
 8107ad4:	4313      	orrs	r3, r2
 8107ad6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	681b      	ldr	r3, [r3, #0]
 8107adc:	68fa      	ldr	r2, [r7, #12]
 8107ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	681b      	ldr	r3, [r3, #0]
 8107ae4:	681a      	ldr	r2, [r3, #0]
 8107ae6:	687b      	ldr	r3, [r7, #4]
 8107ae8:	681b      	ldr	r3, [r3, #0]
 8107aea:	f042 0201 	orr.w	r2, r2, #1
 8107aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	2220      	movs	r2, #32
 8107af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	2200      	movs	r2, #0
 8107afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107b00:	2300      	movs	r3, #0
 8107b02:	e000      	b.n	8107b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8107b04:	2302      	movs	r3, #2
  }
}
 8107b06:	4618      	mov	r0, r3
 8107b08:	3714      	adds	r7, #20
 8107b0a:	46bd      	mov	sp, r7
 8107b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b10:	4770      	bx	lr
	...

08107b14 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8107b14:	b580      	push	{r7, lr}
 8107b16:	b084      	sub	sp, #16
 8107b18:	af00      	add	r7, sp, #0
 8107b1a:	60f8      	str	r0, [r7, #12]
 8107b1c:	460b      	mov	r3, r1
 8107b1e:	607a      	str	r2, [r7, #4]
 8107b20:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8107b22:	4b37      	ldr	r3, [pc, #220]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b24:	681b      	ldr	r3, [r3, #0]
 8107b26:	f023 0201 	bic.w	r2, r3, #1
 8107b2a:	4935      	ldr	r1, [pc, #212]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b2c:	68fb      	ldr	r3, [r7, #12]
 8107b2e:	4313      	orrs	r3, r2
 8107b30:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8107b32:	687b      	ldr	r3, [r7, #4]
 8107b34:	2b00      	cmp	r3, #0
 8107b36:	d123      	bne.n	8107b80 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8107b38:	f7fe fa7c 	bl	8106034 <HAL_GetCurrentCPUID>
 8107b3c:	4603      	mov	r3, r0
 8107b3e:	2b03      	cmp	r3, #3
 8107b40:	d158      	bne.n	8107bf4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8107b42:	4b2f      	ldr	r3, [pc, #188]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b44:	691b      	ldr	r3, [r3, #16]
 8107b46:	4a2e      	ldr	r2, [pc, #184]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b48:	f023 0301 	bic.w	r3, r3, #1
 8107b4c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8107c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107b50:	691b      	ldr	r3, [r3, #16]
 8107b52:	4a2c      	ldr	r2, [pc, #176]	@ (8107c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107b54:	f043 0304 	orr.w	r3, r3, #4
 8107b58:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107b5a:	f3bf 8f4f 	dsb	sy
}
 8107b5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107b60:	f3bf 8f6f 	isb	sy
}
 8107b64:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107b66:	7afb      	ldrb	r3, [r7, #11]
 8107b68:	2b01      	cmp	r3, #1
 8107b6a:	d101      	bne.n	8107b70 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107b6c:	bf30      	wfi
 8107b6e:	e000      	b.n	8107b72 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107b70:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107b72:	4b24      	ldr	r3, [pc, #144]	@ (8107c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107b74:	691b      	ldr	r3, [r3, #16]
 8107b76:	4a23      	ldr	r2, [pc, #140]	@ (8107c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107b78:	f023 0304 	bic.w	r3, r3, #4
 8107b7c:	6113      	str	r3, [r2, #16]
 8107b7e:	e03c      	b.n	8107bfa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	2b01      	cmp	r3, #1
 8107b84:	d123      	bne.n	8107bce <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8107b86:	f7fe fa55 	bl	8106034 <HAL_GetCurrentCPUID>
 8107b8a:	4603      	mov	r3, r0
 8107b8c:	2b01      	cmp	r3, #1
 8107b8e:	d133      	bne.n	8107bf8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8107b90:	4b1b      	ldr	r3, [pc, #108]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b92:	695b      	ldr	r3, [r3, #20]
 8107b94:	4a1a      	ldr	r2, [pc, #104]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b96:	f023 0302 	bic.w	r3, r3, #2
 8107b9a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107b9c:	4b19      	ldr	r3, [pc, #100]	@ (8107c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107b9e:	691b      	ldr	r3, [r3, #16]
 8107ba0:	4a18      	ldr	r2, [pc, #96]	@ (8107c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107ba2:	f043 0304 	orr.w	r3, r3, #4
 8107ba6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107ba8:	f3bf 8f4f 	dsb	sy
}
 8107bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107bae:	f3bf 8f6f 	isb	sy
}
 8107bb2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107bb4:	7afb      	ldrb	r3, [r7, #11]
 8107bb6:	2b01      	cmp	r3, #1
 8107bb8:	d101      	bne.n	8107bbe <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107bba:	bf30      	wfi
 8107bbc:	e000      	b.n	8107bc0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107bbe:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107bc0:	4b10      	ldr	r3, [pc, #64]	@ (8107c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107bc2:	691b      	ldr	r3, [r3, #16]
 8107bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8107c04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107bc6:	f023 0304 	bic.w	r3, r3, #4
 8107bca:	6113      	str	r3, [r2, #16]
 8107bcc:	e015      	b.n	8107bfa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107bce:	f7fe fa31 	bl	8106034 <HAL_GetCurrentCPUID>
 8107bd2:	4603      	mov	r3, r0
 8107bd4:	2b03      	cmp	r3, #3
 8107bd6:	d106      	bne.n	8107be6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8107bd8:	4b09      	ldr	r3, [pc, #36]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107bda:	691b      	ldr	r3, [r3, #16]
 8107bdc:	4a08      	ldr	r2, [pc, #32]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107bde:	f023 0304 	bic.w	r3, r3, #4
 8107be2:	6113      	str	r3, [r2, #16]
 8107be4:	e009      	b.n	8107bfa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8107be6:	4b06      	ldr	r3, [pc, #24]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107be8:	695b      	ldr	r3, [r3, #20]
 8107bea:	4a05      	ldr	r2, [pc, #20]	@ (8107c00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107bec:	f023 0304 	bic.w	r3, r3, #4
 8107bf0:	6153      	str	r3, [r2, #20]
 8107bf2:	e002      	b.n	8107bfa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107bf4:	bf00      	nop
 8107bf6:	e000      	b.n	8107bfa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107bf8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107bfa:	3710      	adds	r7, #16
 8107bfc:	46bd      	mov	sp, r7
 8107bfe:	bd80      	pop	{r7, pc}
 8107c00:	58024800 	.word	0x58024800
 8107c04:	e000ed00 	.word	0xe000ed00

08107c08 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107c08:	b580      	push	{r7, lr}
 8107c0a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107c0c:	f7fe fa12 	bl	8106034 <HAL_GetCurrentCPUID>
 8107c10:	4603      	mov	r3, r0
 8107c12:	2b03      	cmp	r3, #3
 8107c14:	d101      	bne.n	8107c1a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8107c16:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107c18:	e001      	b.n	8107c1e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107c1a:	bf40      	sev
    __WFE ();
 8107c1c:	bf20      	wfe
}
 8107c1e:	bf00      	nop
 8107c20:	bd80      	pop	{r7, pc}
	...

08107c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8107c24:	b480      	push	{r7}
 8107c26:	b089      	sub	sp, #36	@ 0x24
 8107c28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8107c2a:	4bb3      	ldr	r3, [pc, #716]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107c2c:	691b      	ldr	r3, [r3, #16]
 8107c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8107c32:	2b18      	cmp	r3, #24
 8107c34:	f200 8155 	bhi.w	8107ee2 <HAL_RCC_GetSysClockFreq+0x2be>
 8107c38:	a201      	add	r2, pc, #4	@ (adr r2, 8107c40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8107c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c3e:	bf00      	nop
 8107c40:	08107ca5 	.word	0x08107ca5
 8107c44:	08107ee3 	.word	0x08107ee3
 8107c48:	08107ee3 	.word	0x08107ee3
 8107c4c:	08107ee3 	.word	0x08107ee3
 8107c50:	08107ee3 	.word	0x08107ee3
 8107c54:	08107ee3 	.word	0x08107ee3
 8107c58:	08107ee3 	.word	0x08107ee3
 8107c5c:	08107ee3 	.word	0x08107ee3
 8107c60:	08107ccb 	.word	0x08107ccb
 8107c64:	08107ee3 	.word	0x08107ee3
 8107c68:	08107ee3 	.word	0x08107ee3
 8107c6c:	08107ee3 	.word	0x08107ee3
 8107c70:	08107ee3 	.word	0x08107ee3
 8107c74:	08107ee3 	.word	0x08107ee3
 8107c78:	08107ee3 	.word	0x08107ee3
 8107c7c:	08107ee3 	.word	0x08107ee3
 8107c80:	08107cd1 	.word	0x08107cd1
 8107c84:	08107ee3 	.word	0x08107ee3
 8107c88:	08107ee3 	.word	0x08107ee3
 8107c8c:	08107ee3 	.word	0x08107ee3
 8107c90:	08107ee3 	.word	0x08107ee3
 8107c94:	08107ee3 	.word	0x08107ee3
 8107c98:	08107ee3 	.word	0x08107ee3
 8107c9c:	08107ee3 	.word	0x08107ee3
 8107ca0:	08107cd7 	.word	0x08107cd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107ca4:	4b94      	ldr	r3, [pc, #592]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107ca6:	681b      	ldr	r3, [r3, #0]
 8107ca8:	f003 0320 	and.w	r3, r3, #32
 8107cac:	2b00      	cmp	r3, #0
 8107cae:	d009      	beq.n	8107cc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cb0:	4b91      	ldr	r3, [pc, #580]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	08db      	lsrs	r3, r3, #3
 8107cb6:	f003 0303 	and.w	r3, r3, #3
 8107cba:	4a90      	ldr	r2, [pc, #576]	@ (8107efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8107cc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8107cc2:	e111      	b.n	8107ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8107cc4:	4b8d      	ldr	r3, [pc, #564]	@ (8107efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107cc6:	61bb      	str	r3, [r7, #24]
      break;
 8107cc8:	e10e      	b.n	8107ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8107cca:	4b8d      	ldr	r3, [pc, #564]	@ (8107f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8107ccc:	61bb      	str	r3, [r7, #24]
      break;
 8107cce:	e10b      	b.n	8107ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8107cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8107f04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8107cd2:	61bb      	str	r3, [r7, #24]
      break;
 8107cd4:	e108      	b.n	8107ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107cd6:	4b88      	ldr	r3, [pc, #544]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107cda:	f003 0303 	and.w	r3, r3, #3
 8107cde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8107ce0:	4b85      	ldr	r3, [pc, #532]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107ce4:	091b      	lsrs	r3, r3, #4
 8107ce6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107cea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8107cec:	4b82      	ldr	r3, [pc, #520]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107cf0:	f003 0301 	and.w	r3, r3, #1
 8107cf4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8107cf6:	4b80      	ldr	r3, [pc, #512]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107cfa:	08db      	lsrs	r3, r3, #3
 8107cfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107d00:	68fa      	ldr	r2, [r7, #12]
 8107d02:	fb02 f303 	mul.w	r3, r2, r3
 8107d06:	ee07 3a90 	vmov	s15, r3
 8107d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8107d12:	693b      	ldr	r3, [r7, #16]
 8107d14:	2b00      	cmp	r3, #0
 8107d16:	f000 80e1 	beq.w	8107edc <HAL_RCC_GetSysClockFreq+0x2b8>
 8107d1a:	697b      	ldr	r3, [r7, #20]
 8107d1c:	2b02      	cmp	r3, #2
 8107d1e:	f000 8083 	beq.w	8107e28 <HAL_RCC_GetSysClockFreq+0x204>
 8107d22:	697b      	ldr	r3, [r7, #20]
 8107d24:	2b02      	cmp	r3, #2
 8107d26:	f200 80a1 	bhi.w	8107e6c <HAL_RCC_GetSysClockFreq+0x248>
 8107d2a:	697b      	ldr	r3, [r7, #20]
 8107d2c:	2b00      	cmp	r3, #0
 8107d2e:	d003      	beq.n	8107d38 <HAL_RCC_GetSysClockFreq+0x114>
 8107d30:	697b      	ldr	r3, [r7, #20]
 8107d32:	2b01      	cmp	r3, #1
 8107d34:	d056      	beq.n	8107de4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8107d36:	e099      	b.n	8107e6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107d38:	4b6f      	ldr	r3, [pc, #444]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107d3a:	681b      	ldr	r3, [r3, #0]
 8107d3c:	f003 0320 	and.w	r3, r3, #32
 8107d40:	2b00      	cmp	r3, #0
 8107d42:	d02d      	beq.n	8107da0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107d44:	4b6c      	ldr	r3, [pc, #432]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107d46:	681b      	ldr	r3, [r3, #0]
 8107d48:	08db      	lsrs	r3, r3, #3
 8107d4a:	f003 0303 	and.w	r3, r3, #3
 8107d4e:	4a6b      	ldr	r2, [pc, #428]	@ (8107efc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107d50:	fa22 f303 	lsr.w	r3, r2, r3
 8107d54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	ee07 3a90 	vmov	s15, r3
 8107d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d60:	693b      	ldr	r3, [r7, #16]
 8107d62:	ee07 3a90 	vmov	s15, r3
 8107d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d6e:	4b62      	ldr	r3, [pc, #392]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d76:	ee07 3a90 	vmov	s15, r3
 8107d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8107d82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8107f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8107d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8107d9e:	e087      	b.n	8107eb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107da0:	693b      	ldr	r3, [r7, #16]
 8107da2:	ee07 3a90 	vmov	s15, r3
 8107da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107daa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8107f0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8107dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107db2:	4b51      	ldr	r3, [pc, #324]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dba:	ee07 3a90 	vmov	s15, r3
 8107dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8107dc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8107f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8107dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107de2:	e065      	b.n	8107eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107de4:	693b      	ldr	r3, [r7, #16]
 8107de6:	ee07 3a90 	vmov	s15, r3
 8107dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8107f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8107df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107df6:	4b40      	ldr	r3, [pc, #256]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dfe:	ee07 3a90 	vmov	s15, r3
 8107e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8107e0a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8107f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8107e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107e26:	e043      	b.n	8107eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107e28:	693b      	ldr	r3, [r7, #16]
 8107e2a:	ee07 3a90 	vmov	s15, r3
 8107e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e32:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8107f14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8107e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e42:	ee07 3a90 	vmov	s15, r3
 8107e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8107e4e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8107f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8107e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107e6a:	e021      	b.n	8107eb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107e6c:	693b      	ldr	r3, [r7, #16]
 8107e6e:	ee07 3a90 	vmov	s15, r3
 8107e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e76:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8107f10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8107e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e86:	ee07 3a90 	vmov	s15, r3
 8107e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8107e92:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8107f08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8107e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107eae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8107eb0:	4b11      	ldr	r3, [pc, #68]	@ (8107ef8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107eb4:	0a5b      	lsrs	r3, r3, #9
 8107eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107eba:	3301      	adds	r3, #1
 8107ebc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8107ebe:	683b      	ldr	r3, [r7, #0]
 8107ec0:	ee07 3a90 	vmov	s15, r3
 8107ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8107ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107ed4:	ee17 3a90 	vmov	r3, s15
 8107ed8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8107eda:	e005      	b.n	8107ee8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8107edc:	2300      	movs	r3, #0
 8107ede:	61bb      	str	r3, [r7, #24]
      break;
 8107ee0:	e002      	b.n	8107ee8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8107ee2:	4b07      	ldr	r3, [pc, #28]	@ (8107f00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8107ee4:	61bb      	str	r3, [r7, #24]
      break;
 8107ee6:	bf00      	nop
  }

  return sysclockfreq;
 8107ee8:	69bb      	ldr	r3, [r7, #24]
}
 8107eea:	4618      	mov	r0, r3
 8107eec:	3724      	adds	r7, #36	@ 0x24
 8107eee:	46bd      	mov	sp, r7
 8107ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ef4:	4770      	bx	lr
 8107ef6:	bf00      	nop
 8107ef8:	58024400 	.word	0x58024400
 8107efc:	03d09000 	.word	0x03d09000
 8107f00:	003d0900 	.word	0x003d0900
 8107f04:	007a1200 	.word	0x007a1200
 8107f08:	46000000 	.word	0x46000000
 8107f0c:	4c742400 	.word	0x4c742400
 8107f10:	4a742400 	.word	0x4a742400
 8107f14:	4af42400 	.word	0x4af42400

08107f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8107f18:	b580      	push	{r7, lr}
 8107f1a:	b082      	sub	sp, #8
 8107f1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8107f1e:	f7ff fe81 	bl	8107c24 <HAL_RCC_GetSysClockFreq>
 8107f22:	4602      	mov	r2, r0
 8107f24:	4b11      	ldr	r3, [pc, #68]	@ (8107f6c <HAL_RCC_GetHCLKFreq+0x54>)
 8107f26:	699b      	ldr	r3, [r3, #24]
 8107f28:	0a1b      	lsrs	r3, r3, #8
 8107f2a:	f003 030f 	and.w	r3, r3, #15
 8107f2e:	4910      	ldr	r1, [pc, #64]	@ (8107f70 <HAL_RCC_GetHCLKFreq+0x58>)
 8107f30:	5ccb      	ldrb	r3, [r1, r3]
 8107f32:	f003 031f 	and.w	r3, r3, #31
 8107f36:	fa22 f303 	lsr.w	r3, r2, r3
 8107f3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8107f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8107f6c <HAL_RCC_GetHCLKFreq+0x54>)
 8107f3e:	699b      	ldr	r3, [r3, #24]
 8107f40:	f003 030f 	and.w	r3, r3, #15
 8107f44:	4a0a      	ldr	r2, [pc, #40]	@ (8107f70 <HAL_RCC_GetHCLKFreq+0x58>)
 8107f46:	5cd3      	ldrb	r3, [r2, r3]
 8107f48:	f003 031f 	and.w	r3, r3, #31
 8107f4c:	687a      	ldr	r2, [r7, #4]
 8107f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8107f52:	4a08      	ldr	r2, [pc, #32]	@ (8107f74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107f54:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8107f56:	4b07      	ldr	r3, [pc, #28]	@ (8107f74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107f58:	681b      	ldr	r3, [r3, #0]
 8107f5a:	4a07      	ldr	r2, [pc, #28]	@ (8107f78 <HAL_RCC_GetHCLKFreq+0x60>)
 8107f5c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8107f5e:	4b05      	ldr	r3, [pc, #20]	@ (8107f74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107f60:	681b      	ldr	r3, [r3, #0]
}
 8107f62:	4618      	mov	r0, r3
 8107f64:	3708      	adds	r7, #8
 8107f66:	46bd      	mov	sp, r7
 8107f68:	bd80      	pop	{r7, pc}
 8107f6a:	bf00      	nop
 8107f6c:	58024400 	.word	0x58024400
 8107f70:	08113950 	.word	0x08113950
 8107f74:	10000004 	.word	0x10000004
 8107f78:	10000000 	.word	0x10000000

08107f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8107f7c:	b580      	push	{r7, lr}
 8107f7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8107f80:	f7ff ffca 	bl	8107f18 <HAL_RCC_GetHCLKFreq>
 8107f84:	4602      	mov	r2, r0
 8107f86:	4b06      	ldr	r3, [pc, #24]	@ (8107fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8107f88:	69db      	ldr	r3, [r3, #28]
 8107f8a:	091b      	lsrs	r3, r3, #4
 8107f8c:	f003 0307 	and.w	r3, r3, #7
 8107f90:	4904      	ldr	r1, [pc, #16]	@ (8107fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8107f92:	5ccb      	ldrb	r3, [r1, r3]
 8107f94:	f003 031f 	and.w	r3, r3, #31
 8107f98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8107f9c:	4618      	mov	r0, r3
 8107f9e:	bd80      	pop	{r7, pc}
 8107fa0:	58024400 	.word	0x58024400
 8107fa4:	08113950 	.word	0x08113950

08107fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8107fa8:	b580      	push	{r7, lr}
 8107faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8107fac:	f7ff ffb4 	bl	8107f18 <HAL_RCC_GetHCLKFreq>
 8107fb0:	4602      	mov	r2, r0
 8107fb2:	4b06      	ldr	r3, [pc, #24]	@ (8107fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8107fb4:	69db      	ldr	r3, [r3, #28]
 8107fb6:	0a1b      	lsrs	r3, r3, #8
 8107fb8:	f003 0307 	and.w	r3, r3, #7
 8107fbc:	4904      	ldr	r1, [pc, #16]	@ (8107fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8107fbe:	5ccb      	ldrb	r3, [r1, r3]
 8107fc0:	f003 031f 	and.w	r3, r3, #31
 8107fc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8107fc8:	4618      	mov	r0, r3
 8107fca:	bd80      	pop	{r7, pc}
 8107fcc:	58024400 	.word	0x58024400
 8107fd0:	08113950 	.word	0x08113950

08107fd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8107fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107fd8:	b0ca      	sub	sp, #296	@ 0x128
 8107fda:	af00      	add	r7, sp, #0
 8107fdc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8107fe0:	2300      	movs	r3, #0
 8107fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8107fe6:	2300      	movs	r3, #0
 8107fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8107fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ff4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8107ff8:	2500      	movs	r5, #0
 8107ffa:	ea54 0305 	orrs.w	r3, r4, r5
 8107ffe:	d049      	beq.n	8108094 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8108000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108004:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108006:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810800a:	d02f      	beq.n	810806c <HAL_RCCEx_PeriphCLKConfig+0x98>
 810800c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8108010:	d828      	bhi.n	8108064 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8108012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8108016:	d01a      	beq.n	810804e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8108018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810801c:	d822      	bhi.n	8108064 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810801e:	2b00      	cmp	r3, #0
 8108020:	d003      	beq.n	810802a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8108022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108026:	d007      	beq.n	8108038 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8108028:	e01c      	b.n	8108064 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810802a:	4bb8      	ldr	r3, [pc, #736]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810802c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810802e:	4ab7      	ldr	r2, [pc, #732]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108034:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8108036:	e01a      	b.n	810806e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810803c:	3308      	adds	r3, #8
 810803e:	2102      	movs	r1, #2
 8108040:	4618      	mov	r0, r3
 8108042:	f002 fb61 	bl	810a708 <RCCEx_PLL2_Config>
 8108046:	4603      	mov	r3, r0
 8108048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810804c:	e00f      	b.n	810806e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108052:	3328      	adds	r3, #40	@ 0x28
 8108054:	2102      	movs	r1, #2
 8108056:	4618      	mov	r0, r3
 8108058:	f002 fc08 	bl	810a86c <RCCEx_PLL3_Config>
 810805c:	4603      	mov	r3, r0
 810805e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8108062:	e004      	b.n	810806e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108064:	2301      	movs	r3, #1
 8108066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810806a:	e000      	b.n	810806e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810806c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810806e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108072:	2b00      	cmp	r3, #0
 8108074:	d10a      	bne.n	810808c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8108076:	4ba5      	ldr	r3, [pc, #660]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810807a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108084:	4aa1      	ldr	r2, [pc, #644]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108086:	430b      	orrs	r3, r1
 8108088:	6513      	str	r3, [r2, #80]	@ 0x50
 810808a:	e003      	b.n	8108094 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810808c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8108094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108098:	e9d3 2300 	ldrd	r2, r3, [r3]
 810809c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81080a0:	f04f 0900 	mov.w	r9, #0
 81080a4:	ea58 0309 	orrs.w	r3, r8, r9
 81080a8:	d047      	beq.n	810813a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81080b0:	2b04      	cmp	r3, #4
 81080b2:	d82a      	bhi.n	810810a <HAL_RCCEx_PeriphCLKConfig+0x136>
 81080b4:	a201      	add	r2, pc, #4	@ (adr r2, 81080bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81080ba:	bf00      	nop
 81080bc:	081080d1 	.word	0x081080d1
 81080c0:	081080df 	.word	0x081080df
 81080c4:	081080f5 	.word	0x081080f5
 81080c8:	08108113 	.word	0x08108113
 81080cc:	08108113 	.word	0x08108113
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81080d0:	4b8e      	ldr	r3, [pc, #568]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81080d4:	4a8d      	ldr	r2, [pc, #564]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81080d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81080da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81080dc:	e01a      	b.n	8108114 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080e2:	3308      	adds	r3, #8
 81080e4:	2100      	movs	r1, #0
 81080e6:	4618      	mov	r0, r3
 81080e8:	f002 fb0e 	bl	810a708 <RCCEx_PLL2_Config>
 81080ec:	4603      	mov	r3, r0
 81080ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81080f2:	e00f      	b.n	8108114 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080f8:	3328      	adds	r3, #40	@ 0x28
 81080fa:	2100      	movs	r1, #0
 81080fc:	4618      	mov	r0, r3
 81080fe:	f002 fbb5 	bl	810a86c <RCCEx_PLL3_Config>
 8108102:	4603      	mov	r3, r0
 8108104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108108:	e004      	b.n	8108114 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810810a:	2301      	movs	r3, #1
 810810c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108110:	e000      	b.n	8108114 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8108112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108118:	2b00      	cmp	r3, #0
 810811a:	d10a      	bne.n	8108132 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810811c:	4b7b      	ldr	r3, [pc, #492]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810811e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108120:	f023 0107 	bic.w	r1, r3, #7
 8108124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810812a:	4a78      	ldr	r2, [pc, #480]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810812c:	430b      	orrs	r3, r1
 810812e:	6513      	str	r3, [r2, #80]	@ 0x50
 8108130:	e003      	b.n	810813a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108142:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8108146:	f04f 0b00 	mov.w	fp, #0
 810814a:	ea5a 030b 	orrs.w	r3, sl, fp
 810814e:	d04c      	beq.n	81081ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8108150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810815a:	d030      	beq.n	81081be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810815c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108160:	d829      	bhi.n	81081b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8108162:	2bc0      	cmp	r3, #192	@ 0xc0
 8108164:	d02d      	beq.n	81081c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8108166:	2bc0      	cmp	r3, #192	@ 0xc0
 8108168:	d825      	bhi.n	81081b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810816a:	2b80      	cmp	r3, #128	@ 0x80
 810816c:	d018      	beq.n	81081a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810816e:	2b80      	cmp	r3, #128	@ 0x80
 8108170:	d821      	bhi.n	81081b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8108172:	2b00      	cmp	r3, #0
 8108174:	d002      	beq.n	810817c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8108176:	2b40      	cmp	r3, #64	@ 0x40
 8108178:	d007      	beq.n	810818a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810817a:	e01c      	b.n	81081b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810817c:	4b63      	ldr	r3, [pc, #396]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810817e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108180:	4a62      	ldr	r2, [pc, #392]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8108188:	e01c      	b.n	81081c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810818e:	3308      	adds	r3, #8
 8108190:	2100      	movs	r1, #0
 8108192:	4618      	mov	r0, r3
 8108194:	f002 fab8 	bl	810a708 <RCCEx_PLL2_Config>
 8108198:	4603      	mov	r3, r0
 810819a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810819e:	e011      	b.n	81081c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081a4:	3328      	adds	r3, #40	@ 0x28
 81081a6:	2100      	movs	r1, #0
 81081a8:	4618      	mov	r0, r3
 81081aa:	f002 fb5f 	bl	810a86c <RCCEx_PLL3_Config>
 81081ae:	4603      	mov	r3, r0
 81081b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81081b4:	e006      	b.n	81081c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81081b6:	2301      	movs	r3, #1
 81081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81081bc:	e002      	b.n	81081c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81081be:	bf00      	nop
 81081c0:	e000      	b.n	81081c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81081c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081c8:	2b00      	cmp	r3, #0
 81081ca:	d10a      	bne.n	81081e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81081cc:	4b4f      	ldr	r3, [pc, #316]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81081ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81081d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81081da:	4a4c      	ldr	r2, [pc, #304]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81081dc:	430b      	orrs	r3, r1
 81081de:	6513      	str	r3, [r2, #80]	@ 0x50
 81081e0:	e003      	b.n	81081ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81081e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81081ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81081f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81081fa:	2300      	movs	r3, #0
 81081fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8108200:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8108204:	460b      	mov	r3, r1
 8108206:	4313      	orrs	r3, r2
 8108208:	d053      	beq.n	81082b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810820e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8108212:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8108216:	d035      	beq.n	8108284 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8108218:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810821c:	d82e      	bhi.n	810827c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810821e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8108222:	d031      	beq.n	8108288 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8108224:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8108228:	d828      	bhi.n	810827c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810822a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810822e:	d01a      	beq.n	8108266 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8108230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108234:	d822      	bhi.n	810827c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8108236:	2b00      	cmp	r3, #0
 8108238:	d003      	beq.n	8108242 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810823a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810823e:	d007      	beq.n	8108250 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8108240:	e01c      	b.n	810827c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108242:	4b32      	ldr	r3, [pc, #200]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108246:	4a31      	ldr	r2, [pc, #196]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810824c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810824e:	e01c      	b.n	810828a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108254:	3308      	adds	r3, #8
 8108256:	2100      	movs	r1, #0
 8108258:	4618      	mov	r0, r3
 810825a:	f002 fa55 	bl	810a708 <RCCEx_PLL2_Config>
 810825e:	4603      	mov	r3, r0
 8108260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8108264:	e011      	b.n	810828a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810826a:	3328      	adds	r3, #40	@ 0x28
 810826c:	2100      	movs	r1, #0
 810826e:	4618      	mov	r0, r3
 8108270:	f002 fafc 	bl	810a86c <RCCEx_PLL3_Config>
 8108274:	4603      	mov	r3, r0
 8108276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810827a:	e006      	b.n	810828a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810827c:	2301      	movs	r3, #1
 810827e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108282:	e002      	b.n	810828a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8108284:	bf00      	nop
 8108286:	e000      	b.n	810828a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8108288:	bf00      	nop
    }

    if (ret == HAL_OK)
 810828a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810828e:	2b00      	cmp	r3, #0
 8108290:	d10b      	bne.n	81082aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8108292:	4b1e      	ldr	r3, [pc, #120]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108296:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810829e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81082a2:	4a1a      	ldr	r2, [pc, #104]	@ (810830c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81082a4:	430b      	orrs	r3, r1
 81082a6:	6593      	str	r3, [r2, #88]	@ 0x58
 81082a8:	e003      	b.n	81082b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81082aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81082ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81082b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81082ba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81082be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81082c2:	2300      	movs	r3, #0
 81082c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81082c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81082cc:	460b      	mov	r3, r1
 81082ce:	4313      	orrs	r3, r2
 81082d0:	d056      	beq.n	8108380 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81082da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81082de:	d038      	beq.n	8108352 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81082e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81082e4:	d831      	bhi.n	810834a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81082e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81082ea:	d034      	beq.n	8108356 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81082ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81082f0:	d82b      	bhi.n	810834a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81082f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81082f6:	d01d      	beq.n	8108334 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81082f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81082fc:	d825      	bhi.n	810834a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81082fe:	2b00      	cmp	r3, #0
 8108300:	d006      	beq.n	8108310 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8108302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8108306:	d00a      	beq.n	810831e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8108308:	e01f      	b.n	810834a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810830a:	bf00      	nop
 810830c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108310:	4ba2      	ldr	r3, [pc, #648]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108314:	4aa1      	ldr	r2, [pc, #644]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810831a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810831c:	e01c      	b.n	8108358 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108322:	3308      	adds	r3, #8
 8108324:	2100      	movs	r1, #0
 8108326:	4618      	mov	r0, r3
 8108328:	f002 f9ee 	bl	810a708 <RCCEx_PLL2_Config>
 810832c:	4603      	mov	r3, r0
 810832e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8108332:	e011      	b.n	8108358 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108338:	3328      	adds	r3, #40	@ 0x28
 810833a:	2100      	movs	r1, #0
 810833c:	4618      	mov	r0, r3
 810833e:	f002 fa95 	bl	810a86c <RCCEx_PLL3_Config>
 8108342:	4603      	mov	r3, r0
 8108344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108348:	e006      	b.n	8108358 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810834a:	2301      	movs	r3, #1
 810834c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108350:	e002      	b.n	8108358 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8108352:	bf00      	nop
 8108354:	e000      	b.n	8108358 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8108356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810835c:	2b00      	cmp	r3, #0
 810835e:	d10b      	bne.n	8108378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8108360:	4b8e      	ldr	r3, [pc, #568]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108364:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8108368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810836c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8108370:	4a8a      	ldr	r2, [pc, #552]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108372:	430b      	orrs	r3, r1
 8108374:	6593      	str	r3, [r2, #88]	@ 0x58
 8108376:	e003      	b.n	8108380 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810837c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8108380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108388:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810838c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8108390:	2300      	movs	r3, #0
 8108392:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8108396:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810839a:	460b      	mov	r3, r1
 810839c:	4313      	orrs	r3, r2
 810839e:	d03a      	beq.n	8108416 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81083a6:	2b30      	cmp	r3, #48	@ 0x30
 81083a8:	d01f      	beq.n	81083ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 81083aa:	2b30      	cmp	r3, #48	@ 0x30
 81083ac:	d819      	bhi.n	81083e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81083ae:	2b20      	cmp	r3, #32
 81083b0:	d00c      	beq.n	81083cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81083b2:	2b20      	cmp	r3, #32
 81083b4:	d815      	bhi.n	81083e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81083b6:	2b00      	cmp	r3, #0
 81083b8:	d019      	beq.n	81083ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81083ba:	2b10      	cmp	r3, #16
 81083bc:	d111      	bne.n	81083e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81083be:	4b77      	ldr	r3, [pc, #476]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81083c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81083c2:	4a76      	ldr	r2, [pc, #472]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81083c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81083c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81083ca:	e011      	b.n	81083f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81083cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083d0:	3308      	adds	r3, #8
 81083d2:	2102      	movs	r1, #2
 81083d4:	4618      	mov	r0, r3
 81083d6:	f002 f997 	bl	810a708 <RCCEx_PLL2_Config>
 81083da:	4603      	mov	r3, r0
 81083dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81083e0:	e006      	b.n	81083f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81083e2:	2301      	movs	r3, #1
 81083e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81083e8:	e002      	b.n	81083f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81083ea:	bf00      	nop
 81083ec:	e000      	b.n	81083f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81083ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 81083f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81083f4:	2b00      	cmp	r3, #0
 81083f6:	d10a      	bne.n	810840e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81083f8:	4b68      	ldr	r3, [pc, #416]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81083fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81083fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8108400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108406:	4a65      	ldr	r2, [pc, #404]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108408:	430b      	orrs	r3, r1
 810840a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810840c:	e003      	b.n	8108416 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810840e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8108416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810841e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8108422:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8108426:	2300      	movs	r3, #0
 8108428:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810842c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8108430:	460b      	mov	r3, r1
 8108432:	4313      	orrs	r3, r2
 8108434:	d051      	beq.n	81084da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8108436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810843a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810843c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108440:	d035      	beq.n	81084ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8108442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108446:	d82e      	bhi.n	81084a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8108448:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810844c:	d031      	beq.n	81084b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810844e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8108452:	d828      	bhi.n	81084a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8108454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108458:	d01a      	beq.n	8108490 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810845a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810845e:	d822      	bhi.n	81084a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8108460:	2b00      	cmp	r3, #0
 8108462:	d003      	beq.n	810846c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8108464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108468:	d007      	beq.n	810847a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810846a:	e01c      	b.n	81084a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810846c:	4b4b      	ldr	r3, [pc, #300]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108470:	4a4a      	ldr	r2, [pc, #296]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8108478:	e01c      	b.n	81084b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810847e:	3308      	adds	r3, #8
 8108480:	2100      	movs	r1, #0
 8108482:	4618      	mov	r0, r3
 8108484:	f002 f940 	bl	810a708 <RCCEx_PLL2_Config>
 8108488:	4603      	mov	r3, r0
 810848a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810848e:	e011      	b.n	81084b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108494:	3328      	adds	r3, #40	@ 0x28
 8108496:	2100      	movs	r1, #0
 8108498:	4618      	mov	r0, r3
 810849a:	f002 f9e7 	bl	810a86c <RCCEx_PLL3_Config>
 810849e:	4603      	mov	r3, r0
 81084a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81084a4:	e006      	b.n	81084b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81084a6:	2301      	movs	r3, #1
 81084a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81084ac:	e002      	b.n	81084b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81084ae:	bf00      	nop
 81084b0:	e000      	b.n	81084b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81084b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81084b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81084b8:	2b00      	cmp	r3, #0
 81084ba:	d10a      	bne.n	81084d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81084bc:	4b37      	ldr	r3, [pc, #220]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81084be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81084c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81084c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81084ca:	4a34      	ldr	r2, [pc, #208]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81084cc:	430b      	orrs	r3, r1
 81084ce:	6513      	str	r3, [r2, #80]	@ 0x50
 81084d0:	e003      	b.n	81084da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81084d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81084d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81084e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81084e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81084ea:	2300      	movs	r3, #0
 81084ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81084f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81084f4:	460b      	mov	r3, r1
 81084f6:	4313      	orrs	r3, r2
 81084f8:	d056      	beq.n	81085a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108504:	d033      	beq.n	810856e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8108506:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810850a:	d82c      	bhi.n	8108566 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810850c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108510:	d02f      	beq.n	8108572 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8108512:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108516:	d826      	bhi.n	8108566 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108518:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810851c:	d02b      	beq.n	8108576 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810851e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108522:	d820      	bhi.n	8108566 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108528:	d012      	beq.n	8108550 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810852a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810852e:	d81a      	bhi.n	8108566 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108530:	2b00      	cmp	r3, #0
 8108532:	d022      	beq.n	810857a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8108534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108538:	d115      	bne.n	8108566 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810853a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810853e:	3308      	adds	r3, #8
 8108540:	2101      	movs	r1, #1
 8108542:	4618      	mov	r0, r3
 8108544:	f002 f8e0 	bl	810a708 <RCCEx_PLL2_Config>
 8108548:	4603      	mov	r3, r0
 810854a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810854e:	e015      	b.n	810857c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108554:	3328      	adds	r3, #40	@ 0x28
 8108556:	2101      	movs	r1, #1
 8108558:	4618      	mov	r0, r3
 810855a:	f002 f987 	bl	810a86c <RCCEx_PLL3_Config>
 810855e:	4603      	mov	r3, r0
 8108560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8108564:	e00a      	b.n	810857c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108566:	2301      	movs	r3, #1
 8108568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810856c:	e006      	b.n	810857c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810856e:	bf00      	nop
 8108570:	e004      	b.n	810857c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8108572:	bf00      	nop
 8108574:	e002      	b.n	810857c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8108576:	bf00      	nop
 8108578:	e000      	b.n	810857c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810857a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810857c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108580:	2b00      	cmp	r3, #0
 8108582:	d10d      	bne.n	81085a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8108584:	4b05      	ldr	r3, [pc, #20]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108588:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810858c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108592:	4a02      	ldr	r2, [pc, #8]	@ (810859c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108594:	430b      	orrs	r3, r1
 8108596:	6513      	str	r3, [r2, #80]	@ 0x50
 8108598:	e006      	b.n	81085a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810859a:	bf00      	nop
 810859c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81085a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81085a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81085a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81085b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81085b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81085b8:	2300      	movs	r3, #0
 81085ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81085be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81085c2:	460b      	mov	r3, r1
 81085c4:	4313      	orrs	r3, r2
 81085c6:	d055      	beq.n	8108674 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81085d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81085d4:	d033      	beq.n	810863e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81085d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81085da:	d82c      	bhi.n	8108636 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81085dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81085e0:	d02f      	beq.n	8108642 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81085e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81085e6:	d826      	bhi.n	8108636 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81085e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81085ec:	d02b      	beq.n	8108646 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81085ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81085f2:	d820      	bhi.n	8108636 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81085f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81085f8:	d012      	beq.n	8108620 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81085fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81085fe:	d81a      	bhi.n	8108636 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108600:	2b00      	cmp	r3, #0
 8108602:	d022      	beq.n	810864a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8108604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108608:	d115      	bne.n	8108636 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810860e:	3308      	adds	r3, #8
 8108610:	2101      	movs	r1, #1
 8108612:	4618      	mov	r0, r3
 8108614:	f002 f878 	bl	810a708 <RCCEx_PLL2_Config>
 8108618:	4603      	mov	r3, r0
 810861a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810861e:	e015      	b.n	810864c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108624:	3328      	adds	r3, #40	@ 0x28
 8108626:	2101      	movs	r1, #1
 8108628:	4618      	mov	r0, r3
 810862a:	f002 f91f 	bl	810a86c <RCCEx_PLL3_Config>
 810862e:	4603      	mov	r3, r0
 8108630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8108634:	e00a      	b.n	810864c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8108636:	2301      	movs	r3, #1
 8108638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810863c:	e006      	b.n	810864c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810863e:	bf00      	nop
 8108640:	e004      	b.n	810864c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108642:	bf00      	nop
 8108644:	e002      	b.n	810864c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108646:	bf00      	nop
 8108648:	e000      	b.n	810864c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810864a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810864c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108650:	2b00      	cmp	r3, #0
 8108652:	d10b      	bne.n	810866c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8108654:	4ba4      	ldr	r3, [pc, #656]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108658:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8108664:	4aa0      	ldr	r2, [pc, #640]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108666:	430b      	orrs	r3, r1
 8108668:	6593      	str	r3, [r2, #88]	@ 0x58
 810866a:	e003      	b.n	8108674 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810866c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8108674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108678:	e9d3 2300 	ldrd	r2, r3, [r3]
 810867c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8108680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8108684:	2300      	movs	r3, #0
 8108686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810868a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810868e:	460b      	mov	r3, r1
 8108690:	4313      	orrs	r3, r2
 8108692:	d037      	beq.n	8108704 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8108694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810869a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810869e:	d00e      	beq.n	81086be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81086a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81086a4:	d816      	bhi.n	81086d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81086a6:	2b00      	cmp	r3, #0
 81086a8:	d018      	beq.n	81086dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 81086aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81086ae:	d111      	bne.n	81086d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81086b0:	4b8d      	ldr	r3, [pc, #564]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81086b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086b4:	4a8c      	ldr	r2, [pc, #560]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81086b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81086ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81086bc:	e00f      	b.n	81086de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81086be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086c2:	3308      	adds	r3, #8
 81086c4:	2101      	movs	r1, #1
 81086c6:	4618      	mov	r0, r3
 81086c8:	f002 f81e 	bl	810a708 <RCCEx_PLL2_Config>
 81086cc:	4603      	mov	r3, r0
 81086ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81086d2:	e004      	b.n	81086de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81086d4:	2301      	movs	r3, #1
 81086d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81086da:	e000      	b.n	81086de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81086dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81086de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086e2:	2b00      	cmp	r3, #0
 81086e4:	d10a      	bne.n	81086fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81086e6:	4b80      	ldr	r3, [pc, #512]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81086e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81086ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81086f4:	4a7c      	ldr	r2, [pc, #496]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81086f6:	430b      	orrs	r3, r1
 81086f8:	6513      	str	r3, [r2, #80]	@ 0x50
 81086fa:	e003      	b.n	8108704 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81086fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108708:	e9d3 2300 	ldrd	r2, r3, [r3]
 810870c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8108710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8108714:	2300      	movs	r3, #0
 8108716:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810871a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810871e:	460b      	mov	r3, r1
 8108720:	4313      	orrs	r3, r2
 8108722:	d039      	beq.n	8108798 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8108724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810872a:	2b03      	cmp	r3, #3
 810872c:	d81c      	bhi.n	8108768 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810872e:	a201      	add	r2, pc, #4	@ (adr r2, 8108734 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8108730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108734:	08108771 	.word	0x08108771
 8108738:	08108745 	.word	0x08108745
 810873c:	08108753 	.word	0x08108753
 8108740:	08108771 	.word	0x08108771
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108744:	4b68      	ldr	r3, [pc, #416]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108748:	4a67      	ldr	r2, [pc, #412]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810874a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810874e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8108750:	e00f      	b.n	8108772 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108756:	3308      	adds	r3, #8
 8108758:	2102      	movs	r1, #2
 810875a:	4618      	mov	r0, r3
 810875c:	f001 ffd4 	bl	810a708 <RCCEx_PLL2_Config>
 8108760:	4603      	mov	r3, r0
 8108762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8108766:	e004      	b.n	8108772 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8108768:	2301      	movs	r3, #1
 810876a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810876e:	e000      	b.n	8108772 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8108770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108776:	2b00      	cmp	r3, #0
 8108778:	d10a      	bne.n	8108790 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810877a:	4b5b      	ldr	r3, [pc, #364]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810877c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810877e:	f023 0103 	bic.w	r1, r3, #3
 8108782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108788:	4a57      	ldr	r2, [pc, #348]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810878a:	430b      	orrs	r3, r1
 810878c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810878e:	e003      	b.n	8108798 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8108798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81087a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81087a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81087a8:	2300      	movs	r3, #0
 81087aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81087ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81087b2:	460b      	mov	r3, r1
 81087b4:	4313      	orrs	r3, r2
 81087b6:	f000 809f 	beq.w	81088f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81087ba:	4b4c      	ldr	r3, [pc, #304]	@ (81088ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81087bc:	681b      	ldr	r3, [r3, #0]
 81087be:	4a4b      	ldr	r2, [pc, #300]	@ (81088ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81087c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81087c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81087c6:	f7fb fe01 	bl	81043cc <HAL_GetTick>
 81087ca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81087ce:	e00b      	b.n	81087e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81087d0:	f7fb fdfc 	bl	81043cc <HAL_GetTick>
 81087d4:	4602      	mov	r2, r0
 81087d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81087da:	1ad3      	subs	r3, r2, r3
 81087dc:	2b64      	cmp	r3, #100	@ 0x64
 81087de:	d903      	bls.n	81087e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81087e0:	2303      	movs	r3, #3
 81087e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81087e6:	e005      	b.n	81087f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81087e8:	4b40      	ldr	r3, [pc, #256]	@ (81088ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81087ea:	681b      	ldr	r3, [r3, #0]
 81087ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81087f0:	2b00      	cmp	r3, #0
 81087f2:	d0ed      	beq.n	81087d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81087f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81087f8:	2b00      	cmp	r3, #0
 81087fa:	d179      	bne.n	81088f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81087fc:	4b3a      	ldr	r3, [pc, #232]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81087fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8108800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108804:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108808:	4053      	eors	r3, r2
 810880a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810880e:	2b00      	cmp	r3, #0
 8108810:	d015      	beq.n	810883e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8108812:	4b35      	ldr	r3, [pc, #212]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810881a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810881e:	4b32      	ldr	r3, [pc, #200]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108822:	4a31      	ldr	r2, [pc, #196]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8108828:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810882a:	4b2f      	ldr	r3, [pc, #188]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810882c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810882e:	4a2e      	ldr	r2, [pc, #184]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108834:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8108836:	4a2c      	ldr	r2, [pc, #176]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810883c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810883e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810884a:	d118      	bne.n	810887e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810884c:	f7fb fdbe 	bl	81043cc <HAL_GetTick>
 8108850:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108854:	e00d      	b.n	8108872 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8108856:	f7fb fdb9 	bl	81043cc <HAL_GetTick>
 810885a:	4602      	mov	r2, r0
 810885c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8108860:	1ad2      	subs	r2, r2, r3
 8108862:	f241 3388 	movw	r3, #5000	@ 0x1388
 8108866:	429a      	cmp	r2, r3
 8108868:	d903      	bls.n	8108872 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810886a:	2303      	movs	r3, #3
 810886c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8108870:	e005      	b.n	810887e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108872:	4b1d      	ldr	r3, [pc, #116]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108876:	f003 0302 	and.w	r3, r3, #2
 810887a:	2b00      	cmp	r3, #0
 810887c:	d0eb      	beq.n	8108856 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810887e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108882:	2b00      	cmp	r3, #0
 8108884:	d12b      	bne.n	81088de <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8108886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810888a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810888e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108896:	d110      	bne.n	81088ba <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8108898:	4b13      	ldr	r3, [pc, #76]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810889a:	691b      	ldr	r3, [r3, #16]
 810889c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81088a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81088a8:	091b      	lsrs	r3, r3, #4
 81088aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81088ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81088b2:	4a0d      	ldr	r2, [pc, #52]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81088b4:	430b      	orrs	r3, r1
 81088b6:	6113      	str	r3, [r2, #16]
 81088b8:	e005      	b.n	81088c6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81088ba:	4b0b      	ldr	r3, [pc, #44]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81088bc:	691b      	ldr	r3, [r3, #16]
 81088be:	4a0a      	ldr	r2, [pc, #40]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81088c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81088c4:	6113      	str	r3, [r2, #16]
 81088c6:	4b08      	ldr	r3, [pc, #32]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81088c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81088ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81088d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81088d6:	4a04      	ldr	r2, [pc, #16]	@ (81088e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81088d8:	430b      	orrs	r3, r1
 81088da:	6713      	str	r3, [r2, #112]	@ 0x70
 81088dc:	e00c      	b.n	81088f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81088de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81088e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81088e6:	e007      	b.n	81088f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81088e8:	58024400 	.word	0x58024400
 81088ec:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81088f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81088f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81088f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108900:	f002 0301 	and.w	r3, r2, #1
 8108904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8108908:	2300      	movs	r3, #0
 810890a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810890e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8108912:	460b      	mov	r3, r1
 8108914:	4313      	orrs	r3, r2
 8108916:	f000 8089 	beq.w	8108a2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810891a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810891e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8108920:	2b28      	cmp	r3, #40	@ 0x28
 8108922:	d86b      	bhi.n	81089fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8108924:	a201      	add	r2, pc, #4	@ (adr r2, 810892c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8108926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810892a:	bf00      	nop
 810892c:	08108a05 	.word	0x08108a05
 8108930:	081089fd 	.word	0x081089fd
 8108934:	081089fd 	.word	0x081089fd
 8108938:	081089fd 	.word	0x081089fd
 810893c:	081089fd 	.word	0x081089fd
 8108940:	081089fd 	.word	0x081089fd
 8108944:	081089fd 	.word	0x081089fd
 8108948:	081089fd 	.word	0x081089fd
 810894c:	081089d1 	.word	0x081089d1
 8108950:	081089fd 	.word	0x081089fd
 8108954:	081089fd 	.word	0x081089fd
 8108958:	081089fd 	.word	0x081089fd
 810895c:	081089fd 	.word	0x081089fd
 8108960:	081089fd 	.word	0x081089fd
 8108964:	081089fd 	.word	0x081089fd
 8108968:	081089fd 	.word	0x081089fd
 810896c:	081089e7 	.word	0x081089e7
 8108970:	081089fd 	.word	0x081089fd
 8108974:	081089fd 	.word	0x081089fd
 8108978:	081089fd 	.word	0x081089fd
 810897c:	081089fd 	.word	0x081089fd
 8108980:	081089fd 	.word	0x081089fd
 8108984:	081089fd 	.word	0x081089fd
 8108988:	081089fd 	.word	0x081089fd
 810898c:	08108a05 	.word	0x08108a05
 8108990:	081089fd 	.word	0x081089fd
 8108994:	081089fd 	.word	0x081089fd
 8108998:	081089fd 	.word	0x081089fd
 810899c:	081089fd 	.word	0x081089fd
 81089a0:	081089fd 	.word	0x081089fd
 81089a4:	081089fd 	.word	0x081089fd
 81089a8:	081089fd 	.word	0x081089fd
 81089ac:	08108a05 	.word	0x08108a05
 81089b0:	081089fd 	.word	0x081089fd
 81089b4:	081089fd 	.word	0x081089fd
 81089b8:	081089fd 	.word	0x081089fd
 81089bc:	081089fd 	.word	0x081089fd
 81089c0:	081089fd 	.word	0x081089fd
 81089c4:	081089fd 	.word	0x081089fd
 81089c8:	081089fd 	.word	0x081089fd
 81089cc:	08108a05 	.word	0x08108a05
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81089d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089d4:	3308      	adds	r3, #8
 81089d6:	2101      	movs	r1, #1
 81089d8:	4618      	mov	r0, r3
 81089da:	f001 fe95 	bl	810a708 <RCCEx_PLL2_Config>
 81089de:	4603      	mov	r3, r0
 81089e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81089e4:	e00f      	b.n	8108a06 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089ea:	3328      	adds	r3, #40	@ 0x28
 81089ec:	2101      	movs	r1, #1
 81089ee:	4618      	mov	r0, r3
 81089f0:	f001 ff3c 	bl	810a86c <RCCEx_PLL3_Config>
 81089f4:	4603      	mov	r3, r0
 81089f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81089fa:	e004      	b.n	8108a06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81089fc:	2301      	movs	r3, #1
 81089fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108a02:	e000      	b.n	8108a06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8108a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108a0a:	2b00      	cmp	r3, #0
 8108a0c:	d10a      	bne.n	8108a24 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8108a0e:	4bbf      	ldr	r3, [pc, #764]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a12:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8108a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8108a1c:	4abb      	ldr	r2, [pc, #748]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108a1e:	430b      	orrs	r3, r1
 8108a20:	6553      	str	r3, [r2, #84]	@ 0x54
 8108a22:	e003      	b.n	8108a2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8108a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a34:	f002 0302 	and.w	r3, r2, #2
 8108a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8108a3c:	2300      	movs	r3, #0
 8108a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8108a42:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8108a46:	460b      	mov	r3, r1
 8108a48:	4313      	orrs	r3, r2
 8108a4a:	d041      	beq.n	8108ad0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8108a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108a52:	2b05      	cmp	r3, #5
 8108a54:	d824      	bhi.n	8108aa0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8108a56:	a201      	add	r2, pc, #4	@ (adr r2, 8108a5c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8108a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a5c:	08108aa9 	.word	0x08108aa9
 8108a60:	08108a75 	.word	0x08108a75
 8108a64:	08108a8b 	.word	0x08108a8b
 8108a68:	08108aa9 	.word	0x08108aa9
 8108a6c:	08108aa9 	.word	0x08108aa9
 8108a70:	08108aa9 	.word	0x08108aa9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a78:	3308      	adds	r3, #8
 8108a7a:	2101      	movs	r1, #1
 8108a7c:	4618      	mov	r0, r3
 8108a7e:	f001 fe43 	bl	810a708 <RCCEx_PLL2_Config>
 8108a82:	4603      	mov	r3, r0
 8108a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8108a88:	e00f      	b.n	8108aaa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a8e:	3328      	adds	r3, #40	@ 0x28
 8108a90:	2101      	movs	r1, #1
 8108a92:	4618      	mov	r0, r3
 8108a94:	f001 feea 	bl	810a86c <RCCEx_PLL3_Config>
 8108a98:	4603      	mov	r3, r0
 8108a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8108a9e:	e004      	b.n	8108aaa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108aa0:	2301      	movs	r3, #1
 8108aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108aa6:	e000      	b.n	8108aaa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8108aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108aae:	2b00      	cmp	r3, #0
 8108ab0:	d10a      	bne.n	8108ac8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8108ab2:	4b96      	ldr	r3, [pc, #600]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108ab6:	f023 0107 	bic.w	r1, r3, #7
 8108aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108abe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108ac0:	4a92      	ldr	r2, [pc, #584]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108ac2:	430b      	orrs	r3, r1
 8108ac4:	6553      	str	r3, [r2, #84]	@ 0x54
 8108ac6:	e003      	b.n	8108ad0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108acc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8108ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ad8:	f002 0304 	and.w	r3, r2, #4
 8108adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8108ae0:	2300      	movs	r3, #0
 8108ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8108ae6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8108aea:	460b      	mov	r3, r1
 8108aec:	4313      	orrs	r3, r2
 8108aee:	d044      	beq.n	8108b7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8108af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108af8:	2b05      	cmp	r3, #5
 8108afa:	d825      	bhi.n	8108b48 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8108afc:	a201      	add	r2, pc, #4	@ (adr r2, 8108b04 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8108afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b02:	bf00      	nop
 8108b04:	08108b51 	.word	0x08108b51
 8108b08:	08108b1d 	.word	0x08108b1d
 8108b0c:	08108b33 	.word	0x08108b33
 8108b10:	08108b51 	.word	0x08108b51
 8108b14:	08108b51 	.word	0x08108b51
 8108b18:	08108b51 	.word	0x08108b51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b20:	3308      	adds	r3, #8
 8108b22:	2101      	movs	r1, #1
 8108b24:	4618      	mov	r0, r3
 8108b26:	f001 fdef 	bl	810a708 <RCCEx_PLL2_Config>
 8108b2a:	4603      	mov	r3, r0
 8108b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108b30:	e00f      	b.n	8108b52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b36:	3328      	adds	r3, #40	@ 0x28
 8108b38:	2101      	movs	r1, #1
 8108b3a:	4618      	mov	r0, r3
 8108b3c:	f001 fe96 	bl	810a86c <RCCEx_PLL3_Config>
 8108b40:	4603      	mov	r3, r0
 8108b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108b46:	e004      	b.n	8108b52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108b48:	2301      	movs	r3, #1
 8108b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108b4e:	e000      	b.n	8108b52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8108b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108b56:	2b00      	cmp	r3, #0
 8108b58:	d10b      	bne.n	8108b72 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8108b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108b5e:	f023 0107 	bic.w	r1, r3, #7
 8108b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108b6a:	4a68      	ldr	r2, [pc, #416]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108b6c:	430b      	orrs	r3, r1
 8108b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8108b70:	e003      	b.n	8108b7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8108b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108b82:	f002 0320 	and.w	r3, r2, #32
 8108b86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8108b8a:	2300      	movs	r3, #0
 8108b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8108b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8108b94:	460b      	mov	r3, r1
 8108b96:	4313      	orrs	r3, r2
 8108b98:	d055      	beq.n	8108c46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8108b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108ba6:	d033      	beq.n	8108c10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8108ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108bac:	d82c      	bhi.n	8108c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108bb2:	d02f      	beq.n	8108c14 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8108bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108bb8:	d826      	bhi.n	8108c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108bbe:	d02b      	beq.n	8108c18 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8108bc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108bc4:	d820      	bhi.n	8108c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108bca:	d012      	beq.n	8108bf2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8108bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108bd0:	d81a      	bhi.n	8108c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108bd2:	2b00      	cmp	r3, #0
 8108bd4:	d022      	beq.n	8108c1c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8108bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108bda:	d115      	bne.n	8108c08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108be0:	3308      	adds	r3, #8
 8108be2:	2100      	movs	r1, #0
 8108be4:	4618      	mov	r0, r3
 8108be6:	f001 fd8f 	bl	810a708 <RCCEx_PLL2_Config>
 8108bea:	4603      	mov	r3, r0
 8108bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108bf0:	e015      	b.n	8108c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108bf6:	3328      	adds	r3, #40	@ 0x28
 8108bf8:	2102      	movs	r1, #2
 8108bfa:	4618      	mov	r0, r3
 8108bfc:	f001 fe36 	bl	810a86c <RCCEx_PLL3_Config>
 8108c00:	4603      	mov	r3, r0
 8108c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108c06:	e00a      	b.n	8108c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108c08:	2301      	movs	r3, #1
 8108c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108c0e:	e006      	b.n	8108c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108c10:	bf00      	nop
 8108c12:	e004      	b.n	8108c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108c14:	bf00      	nop
 8108c16:	e002      	b.n	8108c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108c18:	bf00      	nop
 8108c1a:	e000      	b.n	8108c1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108c22:	2b00      	cmp	r3, #0
 8108c24:	d10b      	bne.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8108c26:	4b39      	ldr	r3, [pc, #228]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108c2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8108c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108c36:	4a35      	ldr	r2, [pc, #212]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108c38:	430b      	orrs	r3, r1
 8108c3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8108c3c:	e003      	b.n	8108c46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8108c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8108c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8108c56:	2300      	movs	r3, #0
 8108c58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8108c5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8108c60:	460b      	mov	r3, r1
 8108c62:	4313      	orrs	r3, r2
 8108c64:	d058      	beq.n	8108d18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8108c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8108c6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8108c72:	d033      	beq.n	8108cdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8108c74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8108c78:	d82c      	bhi.n	8108cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108c7e:	d02f      	beq.n	8108ce0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8108c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108c84:	d826      	bhi.n	8108cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108c86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8108c8a:	d02b      	beq.n	8108ce4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8108c8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8108c90:	d820      	bhi.n	8108cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108c96:	d012      	beq.n	8108cbe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8108c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108c9c:	d81a      	bhi.n	8108cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108c9e:	2b00      	cmp	r3, #0
 8108ca0:	d022      	beq.n	8108ce8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8108ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108ca6:	d115      	bne.n	8108cd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108cac:	3308      	adds	r3, #8
 8108cae:	2100      	movs	r1, #0
 8108cb0:	4618      	mov	r0, r3
 8108cb2:	f001 fd29 	bl	810a708 <RCCEx_PLL2_Config>
 8108cb6:	4603      	mov	r3, r0
 8108cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8108cbc:	e015      	b.n	8108cea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108cc2:	3328      	adds	r3, #40	@ 0x28
 8108cc4:	2102      	movs	r1, #2
 8108cc6:	4618      	mov	r0, r3
 8108cc8:	f001 fdd0 	bl	810a86c <RCCEx_PLL3_Config>
 8108ccc:	4603      	mov	r3, r0
 8108cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8108cd2:	e00a      	b.n	8108cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108cd4:	2301      	movs	r3, #1
 8108cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108cda:	e006      	b.n	8108cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108cdc:	bf00      	nop
 8108cde:	e004      	b.n	8108cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108ce0:	bf00      	nop
 8108ce2:	e002      	b.n	8108cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108ce4:	bf00      	nop
 8108ce6:	e000      	b.n	8108cea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108cee:	2b00      	cmp	r3, #0
 8108cf0:	d10e      	bne.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8108cf2:	4b06      	ldr	r3, [pc, #24]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108cf6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8108cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8108d02:	4a02      	ldr	r2, [pc, #8]	@ (8108d0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108d04:	430b      	orrs	r3, r1
 8108d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8108d08:	e006      	b.n	8108d18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8108d0a:	bf00      	nop
 8108d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8108d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8108d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8108d28:	2300      	movs	r3, #0
 8108d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8108d2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8108d32:	460b      	mov	r3, r1
 8108d34:	4313      	orrs	r3, r2
 8108d36:	d055      	beq.n	8108de4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8108d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8108d40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8108d44:	d033      	beq.n	8108dae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8108d46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8108d4a:	d82c      	bhi.n	8108da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108d50:	d02f      	beq.n	8108db2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8108d52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108d56:	d826      	bhi.n	8108da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108d58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8108d5c:	d02b      	beq.n	8108db6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8108d5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8108d62:	d820      	bhi.n	8108da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108d68:	d012      	beq.n	8108d90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8108d6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108d6e:	d81a      	bhi.n	8108da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108d70:	2b00      	cmp	r3, #0
 8108d72:	d022      	beq.n	8108dba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8108d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108d78:	d115      	bne.n	8108da6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d7e:	3308      	adds	r3, #8
 8108d80:	2100      	movs	r1, #0
 8108d82:	4618      	mov	r0, r3
 8108d84:	f001 fcc0 	bl	810a708 <RCCEx_PLL2_Config>
 8108d88:	4603      	mov	r3, r0
 8108d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8108d8e:	e015      	b.n	8108dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d94:	3328      	adds	r3, #40	@ 0x28
 8108d96:	2102      	movs	r1, #2
 8108d98:	4618      	mov	r0, r3
 8108d9a:	f001 fd67 	bl	810a86c <RCCEx_PLL3_Config>
 8108d9e:	4603      	mov	r3, r0
 8108da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8108da4:	e00a      	b.n	8108dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108da6:	2301      	movs	r3, #1
 8108da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108dac:	e006      	b.n	8108dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108dae:	bf00      	nop
 8108db0:	e004      	b.n	8108dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108db2:	bf00      	nop
 8108db4:	e002      	b.n	8108dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108db6:	bf00      	nop
 8108db8:	e000      	b.n	8108dbc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108dc0:	2b00      	cmp	r3, #0
 8108dc2:	d10b      	bne.n	8108ddc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8108dc4:	4ba1      	ldr	r3, [pc, #644]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108dc8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8108dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8108dd4:	4a9d      	ldr	r2, [pc, #628]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108dd6:	430b      	orrs	r3, r1
 8108dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8108dda:	e003      	b.n	8108de4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8108de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108dec:	f002 0308 	and.w	r3, r2, #8
 8108df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8108df4:	2300      	movs	r3, #0
 8108df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8108dfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8108dfe:	460b      	mov	r3, r1
 8108e00:	4313      	orrs	r3, r2
 8108e02:	d01e      	beq.n	8108e42 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8108e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108e10:	d10c      	bne.n	8108e2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e16:	3328      	adds	r3, #40	@ 0x28
 8108e18:	2102      	movs	r1, #2
 8108e1a:	4618      	mov	r0, r3
 8108e1c:	f001 fd26 	bl	810a86c <RCCEx_PLL3_Config>
 8108e20:	4603      	mov	r3, r0
 8108e22:	2b00      	cmp	r3, #0
 8108e24:	d002      	beq.n	8108e2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8108e26:	2301      	movs	r3, #1
 8108e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8108e2c:	4b87      	ldr	r3, [pc, #540]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108e30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8108e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108e3c:	4a83      	ldr	r2, [pc, #524]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108e3e:	430b      	orrs	r3, r1
 8108e40:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8108e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108e4a:	f002 0310 	and.w	r3, r2, #16
 8108e4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8108e52:	2300      	movs	r3, #0
 8108e54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8108e58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8108e5c:	460b      	mov	r3, r1
 8108e5e:	4313      	orrs	r3, r2
 8108e60:	d01e      	beq.n	8108ea0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8108e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8108e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108e6e:	d10c      	bne.n	8108e8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e74:	3328      	adds	r3, #40	@ 0x28
 8108e76:	2102      	movs	r1, #2
 8108e78:	4618      	mov	r0, r3
 8108e7a:	f001 fcf7 	bl	810a86c <RCCEx_PLL3_Config>
 8108e7e:	4603      	mov	r3, r0
 8108e80:	2b00      	cmp	r3, #0
 8108e82:	d002      	beq.n	8108e8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8108e84:	2301      	movs	r3, #1
 8108e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8108e8a:	4b70      	ldr	r3, [pc, #448]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108e8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8108e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8108e9a:	4a6c      	ldr	r2, [pc, #432]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108e9c:	430b      	orrs	r3, r1
 8108e9e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8108ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ea8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8108eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8108eb0:	2300      	movs	r3, #0
 8108eb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8108eb6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8108eba:	460b      	mov	r3, r1
 8108ebc:	4313      	orrs	r3, r2
 8108ebe:	d03e      	beq.n	8108f3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8108ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8108ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108ecc:	d022      	beq.n	8108f14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8108ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108ed2:	d81b      	bhi.n	8108f0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8108ed4:	2b00      	cmp	r3, #0
 8108ed6:	d003      	beq.n	8108ee0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8108ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108edc:	d00b      	beq.n	8108ef6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8108ede:	e015      	b.n	8108f0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ee4:	3308      	adds	r3, #8
 8108ee6:	2100      	movs	r1, #0
 8108ee8:	4618      	mov	r0, r3
 8108eea:	f001 fc0d 	bl	810a708 <RCCEx_PLL2_Config>
 8108eee:	4603      	mov	r3, r0
 8108ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8108ef4:	e00f      	b.n	8108f16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108efa:	3328      	adds	r3, #40	@ 0x28
 8108efc:	2102      	movs	r1, #2
 8108efe:	4618      	mov	r0, r3
 8108f00:	f001 fcb4 	bl	810a86c <RCCEx_PLL3_Config>
 8108f04:	4603      	mov	r3, r0
 8108f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8108f0a:	e004      	b.n	8108f16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108f0c:	2301      	movs	r3, #1
 8108f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108f12:	e000      	b.n	8108f16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8108f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108f1a:	2b00      	cmp	r3, #0
 8108f1c:	d10b      	bne.n	8108f36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8108f1e:	4b4b      	ldr	r3, [pc, #300]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108f22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8108f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8108f2e:	4a47      	ldr	r2, [pc, #284]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f30:	430b      	orrs	r3, r1
 8108f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8108f34:	e003      	b.n	8108f3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8108f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8108f4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8108f4c:	2300      	movs	r3, #0
 8108f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8108f50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8108f54:	460b      	mov	r3, r1
 8108f56:	4313      	orrs	r3, r2
 8108f58:	d03b      	beq.n	8108fd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8108f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108f62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8108f66:	d01f      	beq.n	8108fa8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8108f68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8108f6c:	d818      	bhi.n	8108fa0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8108f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108f72:	d003      	beq.n	8108f7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8108f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8108f78:	d007      	beq.n	8108f8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8108f7a:	e011      	b.n	8108fa0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108f7c:	4b33      	ldr	r3, [pc, #204]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f80:	4a32      	ldr	r2, [pc, #200]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8108f88:	e00f      	b.n	8108faa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f8e:	3328      	adds	r3, #40	@ 0x28
 8108f90:	2101      	movs	r1, #1
 8108f92:	4618      	mov	r0, r3
 8108f94:	f001 fc6a 	bl	810a86c <RCCEx_PLL3_Config>
 8108f98:	4603      	mov	r3, r0
 8108f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8108f9e:	e004      	b.n	8108faa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108fa0:	2301      	movs	r3, #1
 8108fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108fa6:	e000      	b.n	8108faa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8108fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108fae:	2b00      	cmp	r3, #0
 8108fb0:	d10b      	bne.n	8108fca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8108fb2:	4b26      	ldr	r3, [pc, #152]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108fb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8108fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108fc2:	4a22      	ldr	r2, [pc, #136]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108fc4:	430b      	orrs	r3, r1
 8108fc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8108fc8:	e003      	b.n	8108fd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8108fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fda:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8108fde:	673b      	str	r3, [r7, #112]	@ 0x70
 8108fe0:	2300      	movs	r3, #0
 8108fe2:	677b      	str	r3, [r7, #116]	@ 0x74
 8108fe4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8108fe8:	460b      	mov	r3, r1
 8108fea:	4313      	orrs	r3, r2
 8108fec:	d034      	beq.n	8109058 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8108fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108ff4:	2b00      	cmp	r3, #0
 8108ff6:	d003      	beq.n	8109000 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8108ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108ffc:	d007      	beq.n	810900e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8108ffe:	e011      	b.n	8109024 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109000:	4b12      	ldr	r3, [pc, #72]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8109002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109004:	4a11      	ldr	r2, [pc, #68]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8109006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810900a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810900c:	e00e      	b.n	810902c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810900e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109012:	3308      	adds	r3, #8
 8109014:	2102      	movs	r1, #2
 8109016:	4618      	mov	r0, r3
 8109018:	f001 fb76 	bl	810a708 <RCCEx_PLL2_Config>
 810901c:	4603      	mov	r3, r0
 810901e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8109022:	e003      	b.n	810902c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8109024:	2301      	movs	r3, #1
 8109026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810902a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810902c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109030:	2b00      	cmp	r3, #0
 8109032:	d10d      	bne.n	8109050 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8109034:	4b05      	ldr	r3, [pc, #20]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8109036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109038:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810903c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109042:	4a02      	ldr	r2, [pc, #8]	@ (810904c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8109044:	430b      	orrs	r3, r1
 8109046:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8109048:	e006      	b.n	8109058 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810904a:	bf00      	nop
 810904c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8109058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810905c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109060:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8109064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8109066:	2300      	movs	r3, #0
 8109068:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810906a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810906e:	460b      	mov	r3, r1
 8109070:	4313      	orrs	r3, r2
 8109072:	d00c      	beq.n	810908e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8109074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109078:	3328      	adds	r3, #40	@ 0x28
 810907a:	2102      	movs	r1, #2
 810907c:	4618      	mov	r0, r3
 810907e:	f001 fbf5 	bl	810a86c <RCCEx_PLL3_Config>
 8109082:	4603      	mov	r3, r0
 8109084:	2b00      	cmp	r3, #0
 8109086:	d002      	beq.n	810908e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8109088:	2301      	movs	r3, #1
 810908a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810908e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109096:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810909a:	663b      	str	r3, [r7, #96]	@ 0x60
 810909c:	2300      	movs	r3, #0
 810909e:	667b      	str	r3, [r7, #100]	@ 0x64
 81090a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81090a4:	460b      	mov	r3, r1
 81090a6:	4313      	orrs	r3, r2
 81090a8:	d038      	beq.n	810911c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81090aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81090ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81090b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81090b6:	d018      	beq.n	81090ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81090b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81090bc:	d811      	bhi.n	81090e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81090be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81090c2:	d014      	beq.n	81090ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81090c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81090c8:	d80b      	bhi.n	81090e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81090ca:	2b00      	cmp	r3, #0
 81090cc:	d011      	beq.n	81090f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81090ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81090d2:	d106      	bne.n	81090e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81090d4:	4bc3      	ldr	r3, [pc, #780]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81090d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81090d8:	4ac2      	ldr	r2, [pc, #776]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81090da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81090de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81090e0:	e008      	b.n	81090f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81090e2:	2301      	movs	r3, #1
 81090e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81090e8:	e004      	b.n	81090f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81090ea:	bf00      	nop
 81090ec:	e002      	b.n	81090f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81090ee:	bf00      	nop
 81090f0:	e000      	b.n	81090f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81090f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81090f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81090f8:	2b00      	cmp	r3, #0
 81090fa:	d10b      	bne.n	8109114 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81090fc:	4bb9      	ldr	r3, [pc, #740]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81090fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109100:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8109104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810910c:	4ab5      	ldr	r2, [pc, #724]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810910e:	430b      	orrs	r3, r1
 8109110:	6553      	str	r3, [r2, #84]	@ 0x54
 8109112:	e003      	b.n	810911c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810911c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109124:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8109128:	65bb      	str	r3, [r7, #88]	@ 0x58
 810912a:	2300      	movs	r3, #0
 810912c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810912e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8109132:	460b      	mov	r3, r1
 8109134:	4313      	orrs	r3, r2
 8109136:	d009      	beq.n	810914c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8109138:	4baa      	ldr	r3, [pc, #680]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810913a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810913c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8109140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109146:	4aa7      	ldr	r2, [pc, #668]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109148:	430b      	orrs	r3, r1
 810914a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810914c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109154:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8109158:	653b      	str	r3, [r7, #80]	@ 0x50
 810915a:	2300      	movs	r3, #0
 810915c:	657b      	str	r3, [r7, #84]	@ 0x54
 810915e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8109162:	460b      	mov	r3, r1
 8109164:	4313      	orrs	r3, r2
 8109166:	d00a      	beq.n	810917e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8109168:	4b9e      	ldr	r3, [pc, #632]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810916a:	691b      	ldr	r3, [r3, #16]
 810916c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8109170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109174:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8109178:	4a9a      	ldr	r2, [pc, #616]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810917a:	430b      	orrs	r3, r1
 810917c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109186:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810918a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810918c:	2300      	movs	r3, #0
 810918e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8109190:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8109194:	460b      	mov	r3, r1
 8109196:	4313      	orrs	r3, r2
 8109198:	d009      	beq.n	81091ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810919a:	4b92      	ldr	r3, [pc, #584]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810919c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810919e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81091a8:	4a8e      	ldr	r2, [pc, #568]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81091aa:	430b      	orrs	r3, r1
 81091ac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81091ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81091ba:	643b      	str	r3, [r7, #64]	@ 0x40
 81091bc:	2300      	movs	r3, #0
 81091be:	647b      	str	r3, [r7, #68]	@ 0x44
 81091c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81091c4:	460b      	mov	r3, r1
 81091c6:	4313      	orrs	r3, r2
 81091c8:	d00e      	beq.n	81091e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81091ca:	4b86      	ldr	r3, [pc, #536]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81091cc:	691b      	ldr	r3, [r3, #16]
 81091ce:	4a85      	ldr	r2, [pc, #532]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81091d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81091d4:	6113      	str	r3, [r2, #16]
 81091d6:	4b83      	ldr	r3, [pc, #524]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81091d8:	6919      	ldr	r1, [r3, #16]
 81091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81091e2:	4a80      	ldr	r2, [pc, #512]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81091e4:	430b      	orrs	r3, r1
 81091e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81091e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091f0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81091f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 81091f6:	2300      	movs	r3, #0
 81091f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81091fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81091fe:	460b      	mov	r3, r1
 8109200:	4313      	orrs	r3, r2
 8109202:	d009      	beq.n	8109218 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8109204:	4b77      	ldr	r3, [pc, #476]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109208:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810920c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109212:	4a74      	ldr	r2, [pc, #464]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109214:	430b      	orrs	r3, r1
 8109216:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8109218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109220:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8109224:	633b      	str	r3, [r7, #48]	@ 0x30
 8109226:	2300      	movs	r3, #0
 8109228:	637b      	str	r3, [r7, #52]	@ 0x34
 810922a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810922e:	460b      	mov	r3, r1
 8109230:	4313      	orrs	r3, r2
 8109232:	d00a      	beq.n	810924a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8109234:	4b6b      	ldr	r3, [pc, #428]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109238:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810923c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8109244:	4a67      	ldr	r2, [pc, #412]	@ (81093e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109246:	430b      	orrs	r3, r1
 8109248:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109252:	2100      	movs	r1, #0
 8109254:	62b9      	str	r1, [r7, #40]	@ 0x28
 8109256:	f003 0301 	and.w	r3, r3, #1
 810925a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810925c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8109260:	460b      	mov	r3, r1
 8109262:	4313      	orrs	r3, r2
 8109264:	d011      	beq.n	810928a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810926a:	3308      	adds	r3, #8
 810926c:	2100      	movs	r1, #0
 810926e:	4618      	mov	r0, r3
 8109270:	f001 fa4a 	bl	810a708 <RCCEx_PLL2_Config>
 8109274:	4603      	mov	r3, r0
 8109276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810927a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810927e:	2b00      	cmp	r3, #0
 8109280:	d003      	beq.n	810928a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109292:	2100      	movs	r1, #0
 8109294:	6239      	str	r1, [r7, #32]
 8109296:	f003 0302 	and.w	r3, r3, #2
 810929a:	627b      	str	r3, [r7, #36]	@ 0x24
 810929c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81092a0:	460b      	mov	r3, r1
 81092a2:	4313      	orrs	r3, r2
 81092a4:	d011      	beq.n	81092ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81092a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092aa:	3308      	adds	r3, #8
 81092ac:	2101      	movs	r1, #1
 81092ae:	4618      	mov	r0, r3
 81092b0:	f001 fa2a 	bl	810a708 <RCCEx_PLL2_Config>
 81092b4:	4603      	mov	r3, r0
 81092b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81092ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81092be:	2b00      	cmp	r3, #0
 81092c0:	d003      	beq.n	81092ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81092c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81092c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81092ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81092d2:	2100      	movs	r1, #0
 81092d4:	61b9      	str	r1, [r7, #24]
 81092d6:	f003 0304 	and.w	r3, r3, #4
 81092da:	61fb      	str	r3, [r7, #28]
 81092dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81092e0:	460b      	mov	r3, r1
 81092e2:	4313      	orrs	r3, r2
 81092e4:	d011      	beq.n	810930a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81092e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092ea:	3308      	adds	r3, #8
 81092ec:	2102      	movs	r1, #2
 81092ee:	4618      	mov	r0, r3
 81092f0:	f001 fa0a 	bl	810a708 <RCCEx_PLL2_Config>
 81092f4:	4603      	mov	r3, r0
 81092f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81092fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81092fe:	2b00      	cmp	r3, #0
 8109300:	d003      	beq.n	810930a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810930a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109312:	2100      	movs	r1, #0
 8109314:	6139      	str	r1, [r7, #16]
 8109316:	f003 0308 	and.w	r3, r3, #8
 810931a:	617b      	str	r3, [r7, #20]
 810931c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8109320:	460b      	mov	r3, r1
 8109322:	4313      	orrs	r3, r2
 8109324:	d011      	beq.n	810934a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810932a:	3328      	adds	r3, #40	@ 0x28
 810932c:	2100      	movs	r1, #0
 810932e:	4618      	mov	r0, r3
 8109330:	f001 fa9c 	bl	810a86c <RCCEx_PLL3_Config>
 8109334:	4603      	mov	r3, r0
 8109336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810933a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810933e:	2b00      	cmp	r3, #0
 8109340:	d003      	beq.n	810934a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810934a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109352:	2100      	movs	r1, #0
 8109354:	60b9      	str	r1, [r7, #8]
 8109356:	f003 0310 	and.w	r3, r3, #16
 810935a:	60fb      	str	r3, [r7, #12]
 810935c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8109360:	460b      	mov	r3, r1
 8109362:	4313      	orrs	r3, r2
 8109364:	d011      	beq.n	810938a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8109366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810936a:	3328      	adds	r3, #40	@ 0x28
 810936c:	2101      	movs	r1, #1
 810936e:	4618      	mov	r0, r3
 8109370:	f001 fa7c 	bl	810a86c <RCCEx_PLL3_Config>
 8109374:	4603      	mov	r3, r0
 8109376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810937a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810937e:	2b00      	cmp	r3, #0
 8109380:	d003      	beq.n	810938a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109386:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810938a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109392:	2100      	movs	r1, #0
 8109394:	6039      	str	r1, [r7, #0]
 8109396:	f003 0320 	and.w	r3, r3, #32
 810939a:	607b      	str	r3, [r7, #4]
 810939c:	e9d7 1200 	ldrd	r1, r2, [r7]
 81093a0:	460b      	mov	r3, r1
 81093a2:	4313      	orrs	r3, r2
 81093a4:	d011      	beq.n	81093ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81093a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093aa:	3328      	adds	r3, #40	@ 0x28
 81093ac:	2102      	movs	r1, #2
 81093ae:	4618      	mov	r0, r3
 81093b0:	f001 fa5c 	bl	810a86c <RCCEx_PLL3_Config>
 81093b4:	4603      	mov	r3, r0
 81093b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81093ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81093be:	2b00      	cmp	r3, #0
 81093c0:	d003      	beq.n	81093ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81093c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81093c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 81093ca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 81093ce:	2b00      	cmp	r3, #0
 81093d0:	d101      	bne.n	81093d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81093d2:	2300      	movs	r3, #0
 81093d4:	e000      	b.n	81093d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81093d6:	2301      	movs	r3, #1
}
 81093d8:	4618      	mov	r0, r3
 81093da:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 81093de:	46bd      	mov	sp, r7
 81093e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81093e4:	58024400 	.word	0x58024400

081093e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81093e8:	b580      	push	{r7, lr}
 81093ea:	b090      	sub	sp, #64	@ 0x40
 81093ec:	af00      	add	r7, sp, #0
 81093ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81093f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81093f6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 81093fa:	430b      	orrs	r3, r1
 81093fc:	f040 8094 	bne.w	8109528 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8109400:	4b9e      	ldr	r3, [pc, #632]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109404:	f003 0307 	and.w	r3, r3, #7
 8109408:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810940c:	2b04      	cmp	r3, #4
 810940e:	f200 8087 	bhi.w	8109520 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8109412:	a201      	add	r2, pc, #4	@ (adr r2, 8109418 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8109414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109418:	0810942d 	.word	0x0810942d
 810941c:	08109455 	.word	0x08109455
 8109420:	0810947d 	.word	0x0810947d
 8109424:	08109519 	.word	0x08109519
 8109428:	081094a5 	.word	0x081094a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810942c:	4b93      	ldr	r3, [pc, #588]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810942e:	681b      	ldr	r3, [r3, #0]
 8109430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109438:	d108      	bne.n	810944c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810943a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810943e:	4618      	mov	r0, r3
 8109440:	f001 f810 	bl	810a464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109448:	f000 bd45 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810944c:	2300      	movs	r3, #0
 810944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109450:	f000 bd41 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109454:	4b89      	ldr	r3, [pc, #548]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109456:	681b      	ldr	r3, [r3, #0]
 8109458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810945c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109460:	d108      	bne.n	8109474 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109462:	f107 0318 	add.w	r3, r7, #24
 8109466:	4618      	mov	r0, r3
 8109468:	f000 fd54 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810946c:	69bb      	ldr	r3, [r7, #24]
 810946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109470:	f000 bd31 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109474:	2300      	movs	r3, #0
 8109476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109478:	f000 bd2d 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810947c:	4b7f      	ldr	r3, [pc, #508]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810947e:	681b      	ldr	r3, [r3, #0]
 8109480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109488:	d108      	bne.n	810949c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810948a:	f107 030c 	add.w	r3, r7, #12
 810948e:	4618      	mov	r0, r3
 8109490:	f000 fe94 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8109494:	68fb      	ldr	r3, [r7, #12]
 8109496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109498:	f000 bd1d 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810949c:	2300      	movs	r3, #0
 810949e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81094a0:	f000 bd19 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81094a4:	4b75      	ldr	r3, [pc, #468]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81094a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81094a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81094ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81094ae:	4b73      	ldr	r3, [pc, #460]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81094b0:	681b      	ldr	r3, [r3, #0]
 81094b2:	f003 0304 	and.w	r3, r3, #4
 81094b6:	2b04      	cmp	r3, #4
 81094b8:	d10c      	bne.n	81094d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81094ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81094bc:	2b00      	cmp	r3, #0
 81094be:	d109      	bne.n	81094d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81094c0:	4b6e      	ldr	r3, [pc, #440]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81094c2:	681b      	ldr	r3, [r3, #0]
 81094c4:	08db      	lsrs	r3, r3, #3
 81094c6:	f003 0303 	and.w	r3, r3, #3
 81094ca:	4a6d      	ldr	r2, [pc, #436]	@ (8109680 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81094cc:	fa22 f303 	lsr.w	r3, r2, r3
 81094d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81094d2:	e01f      	b.n	8109514 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81094d4:	4b69      	ldr	r3, [pc, #420]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81094d6:	681b      	ldr	r3, [r3, #0]
 81094d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81094dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81094e0:	d106      	bne.n	81094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81094e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81094e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81094e8:	d102      	bne.n	81094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81094ea:	4b66      	ldr	r3, [pc, #408]	@ (8109684 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81094ee:	e011      	b.n	8109514 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81094f0:	4b62      	ldr	r3, [pc, #392]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81094f2:	681b      	ldr	r3, [r3, #0]
 81094f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81094f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81094fc:	d106      	bne.n	810950c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 81094fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109504:	d102      	bne.n	810950c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109506:	4b60      	ldr	r3, [pc, #384]	@ (8109688 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8109508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810950a:	e003      	b.n	8109514 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810950c:	2300      	movs	r3, #0
 810950e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109510:	f000 bce1 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109514:	f000 bcdf 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8109518:	4b5c      	ldr	r3, [pc, #368]	@ (810968c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810951c:	f000 bcdb 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109520:	2300      	movs	r3, #0
 8109522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109524:	f000 bcd7 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8109528:	e9d7 2300 	ldrd	r2, r3, [r7]
 810952c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8109530:	430b      	orrs	r3, r1
 8109532:	f040 80ad 	bne.w	8109690 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8109536:	4b51      	ldr	r3, [pc, #324]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810953a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810953e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8109540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109546:	d056      	beq.n	81095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8109548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810954a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810954e:	f200 8090 	bhi.w	8109672 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8109552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109554:	2bc0      	cmp	r3, #192	@ 0xc0
 8109556:	f000 8088 	beq.w	810966a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810955c:	2bc0      	cmp	r3, #192	@ 0xc0
 810955e:	f200 8088 	bhi.w	8109672 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8109562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109564:	2b80      	cmp	r3, #128	@ 0x80
 8109566:	d032      	beq.n	81095ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8109568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810956a:	2b80      	cmp	r3, #128	@ 0x80
 810956c:	f200 8081 	bhi.w	8109672 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8109570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109572:	2b00      	cmp	r3, #0
 8109574:	d003      	beq.n	810957e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8109576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109578:	2b40      	cmp	r3, #64	@ 0x40
 810957a:	d014      	beq.n	81095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810957c:	e079      	b.n	8109672 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810957e:	4b3f      	ldr	r3, [pc, #252]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109580:	681b      	ldr	r3, [r3, #0]
 8109582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810958a:	d108      	bne.n	810959e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810958c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109590:	4618      	mov	r0, r3
 8109592:	f000 ff67 	bl	810a464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810959a:	f000 bc9c 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810959e:	2300      	movs	r3, #0
 81095a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81095a2:	f000 bc98 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81095a6:	4b35      	ldr	r3, [pc, #212]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81095a8:	681b      	ldr	r3, [r3, #0]
 81095aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81095ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81095b2:	d108      	bne.n	81095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81095b4:	f107 0318 	add.w	r3, r7, #24
 81095b8:	4618      	mov	r0, r3
 81095ba:	f000 fcab 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81095be:	69bb      	ldr	r3, [r7, #24]
 81095c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81095c2:	f000 bc88 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81095c6:	2300      	movs	r3, #0
 81095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81095ca:	f000 bc84 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81095ce:	4b2b      	ldr	r3, [pc, #172]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81095d0:	681b      	ldr	r3, [r3, #0]
 81095d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81095d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81095da:	d108      	bne.n	81095ee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81095dc:	f107 030c 	add.w	r3, r7, #12
 81095e0:	4618      	mov	r0, r3
 81095e2:	f000 fdeb 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81095e6:	68fb      	ldr	r3, [r7, #12]
 81095e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81095ea:	f000 bc74 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81095ee:	2300      	movs	r3, #0
 81095f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81095f2:	f000 bc70 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81095f6:	4b21      	ldr	r3, [pc, #132]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81095f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81095fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81095fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109600:	4b1e      	ldr	r3, [pc, #120]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109602:	681b      	ldr	r3, [r3, #0]
 8109604:	f003 0304 	and.w	r3, r3, #4
 8109608:	2b04      	cmp	r3, #4
 810960a:	d10c      	bne.n	8109626 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810960c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810960e:	2b00      	cmp	r3, #0
 8109610:	d109      	bne.n	8109626 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109612:	4b1a      	ldr	r3, [pc, #104]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109614:	681b      	ldr	r3, [r3, #0]
 8109616:	08db      	lsrs	r3, r3, #3
 8109618:	f003 0303 	and.w	r3, r3, #3
 810961c:	4a18      	ldr	r2, [pc, #96]	@ (8109680 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810961e:	fa22 f303 	lsr.w	r3, r2, r3
 8109622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109624:	e01f      	b.n	8109666 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109626:	4b15      	ldr	r3, [pc, #84]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109628:	681b      	ldr	r3, [r3, #0]
 810962a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810962e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109632:	d106      	bne.n	8109642 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8109634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810963a:	d102      	bne.n	8109642 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810963c:	4b11      	ldr	r3, [pc, #68]	@ (8109684 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109640:	e011      	b.n	8109666 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109642:	4b0e      	ldr	r3, [pc, #56]	@ (810967c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109644:	681b      	ldr	r3, [r3, #0]
 8109646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810964a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810964e:	d106      	bne.n	810965e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8109650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109656:	d102      	bne.n	810965e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109658:	4b0b      	ldr	r3, [pc, #44]	@ (8109688 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810965c:	e003      	b.n	8109666 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810965e:	2300      	movs	r3, #0
 8109660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109662:	f000 bc38 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109666:	f000 bc36 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810966a:	4b08      	ldr	r3, [pc, #32]	@ (810968c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810966c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810966e:	f000 bc32 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109672:	2300      	movs	r3, #0
 8109674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109676:	f000 bc2e 	b.w	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810967a:	bf00      	nop
 810967c:	58024400 	.word	0x58024400
 8109680:	03d09000 	.word	0x03d09000
 8109684:	003d0900 	.word	0x003d0900
 8109688:	007a1200 	.word	0x007a1200
 810968c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8109690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109694:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8109698:	430b      	orrs	r3, r1
 810969a:	f040 809c 	bne.w	81097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810969e:	4b9e      	ldr	r3, [pc, #632]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81096a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81096a2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81096a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81096aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81096ae:	d054      	beq.n	810975a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81096b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81096b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81096b6:	f200 808b 	bhi.w	81097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81096bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81096c0:	f000 8083 	beq.w	81097ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81096c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81096c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81096ca:	f200 8081 	bhi.w	81097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81096ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81096d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81096d4:	d02f      	beq.n	8109736 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81096d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81096d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81096dc:	d878      	bhi.n	81097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81096e0:	2b00      	cmp	r3, #0
 81096e2:	d004      	beq.n	81096ee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81096e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81096e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81096ea:	d012      	beq.n	8109712 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81096ec:	e070      	b.n	81097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81096ee:	4b8a      	ldr	r3, [pc, #552]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81096f0:	681b      	ldr	r3, [r3, #0]
 81096f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81096f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81096fa:	d107      	bne.n	810970c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81096fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109700:	4618      	mov	r0, r3
 8109702:	f000 feaf 	bl	810a464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810970a:	e3e4      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810970c:	2300      	movs	r3, #0
 810970e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109710:	e3e1      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109712:	4b81      	ldr	r3, [pc, #516]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109714:	681b      	ldr	r3, [r3, #0]
 8109716:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810971a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810971e:	d107      	bne.n	8109730 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109720:	f107 0318 	add.w	r3, r7, #24
 8109724:	4618      	mov	r0, r3
 8109726:	f000 fbf5 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810972a:	69bb      	ldr	r3, [r7, #24]
 810972c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810972e:	e3d2      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109730:	2300      	movs	r3, #0
 8109732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109734:	e3cf      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109736:	4b78      	ldr	r3, [pc, #480]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109738:	681b      	ldr	r3, [r3, #0]
 810973a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810973e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109742:	d107      	bne.n	8109754 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109744:	f107 030c 	add.w	r3, r7, #12
 8109748:	4618      	mov	r0, r3
 810974a:	f000 fd37 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810974e:	68fb      	ldr	r3, [r7, #12]
 8109750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109752:	e3c0      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109754:	2300      	movs	r3, #0
 8109756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109758:	e3bd      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810975a:	4b6f      	ldr	r3, [pc, #444]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810975c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810975e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109762:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109764:	4b6c      	ldr	r3, [pc, #432]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109766:	681b      	ldr	r3, [r3, #0]
 8109768:	f003 0304 	and.w	r3, r3, #4
 810976c:	2b04      	cmp	r3, #4
 810976e:	d10c      	bne.n	810978a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8109770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109772:	2b00      	cmp	r3, #0
 8109774:	d109      	bne.n	810978a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109776:	4b68      	ldr	r3, [pc, #416]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109778:	681b      	ldr	r3, [r3, #0]
 810977a:	08db      	lsrs	r3, r3, #3
 810977c:	f003 0303 	and.w	r3, r3, #3
 8109780:	4a66      	ldr	r2, [pc, #408]	@ (810991c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8109782:	fa22 f303 	lsr.w	r3, r2, r3
 8109786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109788:	e01e      	b.n	81097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810978a:	4b63      	ldr	r3, [pc, #396]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810978c:	681b      	ldr	r3, [r3, #0]
 810978e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109796:	d106      	bne.n	81097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8109798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810979a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810979e:	d102      	bne.n	81097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81097a0:	4b5f      	ldr	r3, [pc, #380]	@ (8109920 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81097a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81097a4:	e010      	b.n	81097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81097a6:	4b5c      	ldr	r3, [pc, #368]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81097a8:	681b      	ldr	r3, [r3, #0]
 81097aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81097ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81097b2:	d106      	bne.n	81097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 81097b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81097b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81097ba:	d102      	bne.n	81097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81097bc:	4b59      	ldr	r3, [pc, #356]	@ (8109924 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81097be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81097c0:	e002      	b.n	81097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81097c2:	2300      	movs	r3, #0
 81097c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81097c6:	e386      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81097c8:	e385      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81097ca:	4b57      	ldr	r3, [pc, #348]	@ (8109928 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81097cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81097ce:	e382      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81097d0:	2300      	movs	r3, #0
 81097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81097d4:	e37f      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81097d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81097da:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 81097de:	430b      	orrs	r3, r1
 81097e0:	f040 80a7 	bne.w	8109932 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81097e4:	4b4c      	ldr	r3, [pc, #304]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81097e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81097e8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 81097ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81097ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81097f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81097f4:	d055      	beq.n	81098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81097f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81097f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81097fc:	f200 8096 	bhi.w	810992c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8109800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109802:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8109806:	f000 8084 	beq.w	8109912 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810980c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8109810:	f200 808c 	bhi.w	810992c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8109814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810981a:	d030      	beq.n	810987e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810981e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109822:	f200 8083 	bhi.w	810992c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8109826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109828:	2b00      	cmp	r3, #0
 810982a:	d004      	beq.n	8109836 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810982e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8109832:	d012      	beq.n	810985a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8109834:	e07a      	b.n	810992c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109836:	4b38      	ldr	r3, [pc, #224]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109838:	681b      	ldr	r3, [r3, #0]
 810983a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810983e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109842:	d107      	bne.n	8109854 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109848:	4618      	mov	r0, r3
 810984a:	f000 fe0b 	bl	810a464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109852:	e340      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109854:	2300      	movs	r3, #0
 8109856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109858:	e33d      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810985a:	4b2f      	ldr	r3, [pc, #188]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810985c:	681b      	ldr	r3, [r3, #0]
 810985e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109862:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109866:	d107      	bne.n	8109878 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109868:	f107 0318 	add.w	r3, r7, #24
 810986c:	4618      	mov	r0, r3
 810986e:	f000 fb51 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109872:	69bb      	ldr	r3, [r7, #24]
 8109874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109876:	e32e      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109878:	2300      	movs	r3, #0
 810987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810987c:	e32b      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810987e:	4b26      	ldr	r3, [pc, #152]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109880:	681b      	ldr	r3, [r3, #0]
 8109882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810988a:	d107      	bne.n	810989c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810988c:	f107 030c 	add.w	r3, r7, #12
 8109890:	4618      	mov	r0, r3
 8109892:	f000 fc93 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8109896:	68fb      	ldr	r3, [r7, #12]
 8109898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810989a:	e31c      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810989c:	2300      	movs	r3, #0
 810989e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81098a0:	e319      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81098a2:	4b1d      	ldr	r3, [pc, #116]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81098a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81098a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81098aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81098ac:	4b1a      	ldr	r3, [pc, #104]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81098ae:	681b      	ldr	r3, [r3, #0]
 81098b0:	f003 0304 	and.w	r3, r3, #4
 81098b4:	2b04      	cmp	r3, #4
 81098b6:	d10c      	bne.n	81098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81098b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81098ba:	2b00      	cmp	r3, #0
 81098bc:	d109      	bne.n	81098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81098be:	4b16      	ldr	r3, [pc, #88]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81098c0:	681b      	ldr	r3, [r3, #0]
 81098c2:	08db      	lsrs	r3, r3, #3
 81098c4:	f003 0303 	and.w	r3, r3, #3
 81098c8:	4a14      	ldr	r2, [pc, #80]	@ (810991c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81098ca:	fa22 f303 	lsr.w	r3, r2, r3
 81098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81098d0:	e01e      	b.n	8109910 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81098d2:	4b11      	ldr	r3, [pc, #68]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81098d4:	681b      	ldr	r3, [r3, #0]
 81098d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81098da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81098de:	d106      	bne.n	81098ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81098e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81098e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81098e6:	d102      	bne.n	81098ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81098e8:	4b0d      	ldr	r3, [pc, #52]	@ (8109920 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81098ec:	e010      	b.n	8109910 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81098ee:	4b0a      	ldr	r3, [pc, #40]	@ (8109918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81098f0:	681b      	ldr	r3, [r3, #0]
 81098f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81098f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81098fa:	d106      	bne.n	810990a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81098fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81098fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109902:	d102      	bne.n	810990a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109904:	4b07      	ldr	r3, [pc, #28]	@ (8109924 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8109906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109908:	e002      	b.n	8109910 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810990a:	2300      	movs	r3, #0
 810990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810990e:	e2e2      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109910:	e2e1      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8109912:	4b05      	ldr	r3, [pc, #20]	@ (8109928 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8109914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109916:	e2de      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109918:	58024400 	.word	0x58024400
 810991c:	03d09000 	.word	0x03d09000
 8109920:	003d0900 	.word	0x003d0900
 8109924:	007a1200 	.word	0x007a1200
 8109928:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810992c:	2300      	movs	r3, #0
 810992e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109930:	e2d1      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8109932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109936:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810993a:	430b      	orrs	r3, r1
 810993c:	f040 809c 	bne.w	8109a78 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8109940:	4b93      	ldr	r3, [pc, #588]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109944:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8109948:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810994c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109950:	d054      	beq.n	81099fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8109952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109958:	f200 808b 	bhi.w	8109a72 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810995c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810995e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8109962:	f000 8083 	beq.w	8109a6c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8109966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109968:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810996c:	f200 8081 	bhi.w	8109a72 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8109970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8109976:	d02f      	beq.n	81099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8109978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810997a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810997e:	d878      	bhi.n	8109a72 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8109980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109982:	2b00      	cmp	r3, #0
 8109984:	d004      	beq.n	8109990 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8109986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810998c:	d012      	beq.n	81099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810998e:	e070      	b.n	8109a72 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109990:	4b7f      	ldr	r3, [pc, #508]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109992:	681b      	ldr	r3, [r3, #0]
 8109994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109998:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810999c:	d107      	bne.n	81099ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810999e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81099a2:	4618      	mov	r0, r3
 81099a4:	f000 fd5e 	bl	810a464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81099a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81099aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81099ac:	e293      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81099ae:	2300      	movs	r3, #0
 81099b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81099b2:	e290      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81099b4:	4b76      	ldr	r3, [pc, #472]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81099b6:	681b      	ldr	r3, [r3, #0]
 81099b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81099bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81099c0:	d107      	bne.n	81099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81099c2:	f107 0318 	add.w	r3, r7, #24
 81099c6:	4618      	mov	r0, r3
 81099c8:	f000 faa4 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81099cc:	69bb      	ldr	r3, [r7, #24]
 81099ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81099d0:	e281      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81099d2:	2300      	movs	r3, #0
 81099d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81099d6:	e27e      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81099d8:	4b6d      	ldr	r3, [pc, #436]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81099da:	681b      	ldr	r3, [r3, #0]
 81099dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81099e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81099e4:	d107      	bne.n	81099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81099e6:	f107 030c 	add.w	r3, r7, #12
 81099ea:	4618      	mov	r0, r3
 81099ec:	f000 fbe6 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81099f0:	68fb      	ldr	r3, [r7, #12]
 81099f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81099f4:	e26f      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81099f6:	2300      	movs	r3, #0
 81099f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81099fa:	e26c      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81099fc:	4b64      	ldr	r3, [pc, #400]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81099fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109a00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109a04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109a06:	4b62      	ldr	r3, [pc, #392]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a08:	681b      	ldr	r3, [r3, #0]
 8109a0a:	f003 0304 	and.w	r3, r3, #4
 8109a0e:	2b04      	cmp	r3, #4
 8109a10:	d10c      	bne.n	8109a2c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8109a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109a14:	2b00      	cmp	r3, #0
 8109a16:	d109      	bne.n	8109a2c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109a18:	4b5d      	ldr	r3, [pc, #372]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a1a:	681b      	ldr	r3, [r3, #0]
 8109a1c:	08db      	lsrs	r3, r3, #3
 8109a1e:	f003 0303 	and.w	r3, r3, #3
 8109a22:	4a5c      	ldr	r2, [pc, #368]	@ (8109b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8109a24:	fa22 f303 	lsr.w	r3, r2, r3
 8109a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109a2a:	e01e      	b.n	8109a6a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109a2c:	4b58      	ldr	r3, [pc, #352]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a2e:	681b      	ldr	r3, [r3, #0]
 8109a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109a38:	d106      	bne.n	8109a48 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8109a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109a40:	d102      	bne.n	8109a48 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109a42:	4b55      	ldr	r3, [pc, #340]	@ (8109b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8109a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109a46:	e010      	b.n	8109a6a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109a48:	4b51      	ldr	r3, [pc, #324]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a4a:	681b      	ldr	r3, [r3, #0]
 8109a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109a54:	d106      	bne.n	8109a64 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8109a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109a5c:	d102      	bne.n	8109a64 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8109b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8109a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109a62:	e002      	b.n	8109a6a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109a64:	2300      	movs	r3, #0
 8109a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109a68:	e235      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109a6a:	e234      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8109a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8109ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8109a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109a70:	e231      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109a72:	2300      	movs	r3, #0
 8109a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109a76:	e22e      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8109a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109a7c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8109a80:	430b      	orrs	r3, r1
 8109a82:	f040 808f 	bne.w	8109ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8109a86:	4b42      	ldr	r3, [pc, #264]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109a8a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8109a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8109a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8109a96:	d06b      	beq.n	8109b70 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8109a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8109a9e:	d874      	bhi.n	8109b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109aa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109aa6:	d056      	beq.n	8109b56 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8109aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109aaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109aae:	d86c      	bhi.n	8109b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ab2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8109ab6:	d03b      	beq.n	8109b30 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8109ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109aba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8109abe:	d864      	bhi.n	8109b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109ac6:	d021      	beq.n	8109b0c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8109ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109ace:	d85c      	bhi.n	8109b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ad2:	2b00      	cmp	r3, #0
 8109ad4:	d004      	beq.n	8109ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8109ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109adc:	d004      	beq.n	8109ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8109ade:	e054      	b.n	8109b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8109ae0:	f7fe fa4c 	bl	8107f7c <HAL_RCC_GetPCLK1Freq>
 8109ae4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109ae6:	e1f6      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109ae8:	4b29      	ldr	r3, [pc, #164]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109aea:	681b      	ldr	r3, [r3, #0]
 8109aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109af0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109af4:	d107      	bne.n	8109b06 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109af6:	f107 0318 	add.w	r3, r7, #24
 8109afa:	4618      	mov	r0, r3
 8109afc:	f000 fa0a 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8109b00:	69fb      	ldr	r3, [r7, #28]
 8109b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109b04:	e1e7      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109b06:	2300      	movs	r3, #0
 8109b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b0a:	e1e4      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109b0c:	4b20      	ldr	r3, [pc, #128]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109b0e:	681b      	ldr	r3, [r3, #0]
 8109b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109b18:	d107      	bne.n	8109b2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109b1a:	f107 030c 	add.w	r3, r7, #12
 8109b1e:	4618      	mov	r0, r3
 8109b20:	f000 fb4c 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8109b24:	693b      	ldr	r3, [r7, #16]
 8109b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109b28:	e1d5      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109b2a:	2300      	movs	r3, #0
 8109b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b2e:	e1d2      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8109b30:	4b17      	ldr	r3, [pc, #92]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109b32:	681b      	ldr	r3, [r3, #0]
 8109b34:	f003 0304 	and.w	r3, r3, #4
 8109b38:	2b04      	cmp	r3, #4
 8109b3a:	d109      	bne.n	8109b50 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109b3c:	4b14      	ldr	r3, [pc, #80]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109b3e:	681b      	ldr	r3, [r3, #0]
 8109b40:	08db      	lsrs	r3, r3, #3
 8109b42:	f003 0303 	and.w	r3, r3, #3
 8109b46:	4a13      	ldr	r2, [pc, #76]	@ (8109b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8109b48:	fa22 f303 	lsr.w	r3, r2, r3
 8109b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109b4e:	e1c2      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109b50:	2300      	movs	r3, #0
 8109b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b54:	e1bf      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8109b56:	4b0e      	ldr	r3, [pc, #56]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109b58:	681b      	ldr	r3, [r3, #0]
 8109b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109b62:	d102      	bne.n	8109b6a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8109b64:	4b0c      	ldr	r3, [pc, #48]	@ (8109b98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8109b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109b68:	e1b5      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109b6a:	2300      	movs	r3, #0
 8109b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b6e:	e1b2      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8109b70:	4b07      	ldr	r3, [pc, #28]	@ (8109b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109b72:	681b      	ldr	r3, [r3, #0]
 8109b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109b7c:	d102      	bne.n	8109b84 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8109b7e:	4b07      	ldr	r3, [pc, #28]	@ (8109b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8109b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109b82:	e1a8      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109b84:	2300      	movs	r3, #0
 8109b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b88:	e1a5      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109b8a:	2300      	movs	r3, #0
 8109b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b8e:	e1a2      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109b90:	58024400 	.word	0x58024400
 8109b94:	03d09000 	.word	0x03d09000
 8109b98:	003d0900 	.word	0x003d0900
 8109b9c:	007a1200 	.word	0x007a1200
 8109ba0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8109ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109ba8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8109bac:	430b      	orrs	r3, r1
 8109bae:	d173      	bne.n	8109c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8109bb0:	4b9c      	ldr	r3, [pc, #624]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8109bb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109bc0:	d02f      	beq.n	8109c22 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8109bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109bc8:	d863      	bhi.n	8109c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8109bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bcc:	2b00      	cmp	r3, #0
 8109bce:	d004      	beq.n	8109bda <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8109bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109bd6:	d012      	beq.n	8109bfe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8109bd8:	e05b      	b.n	8109c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109bda:	4b92      	ldr	r3, [pc, #584]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109bdc:	681b      	ldr	r3, [r3, #0]
 8109bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109be6:	d107      	bne.n	8109bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109be8:	f107 0318 	add.w	r3, r7, #24
 8109bec:	4618      	mov	r0, r3
 8109bee:	f000 f991 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109bf2:	69bb      	ldr	r3, [r7, #24]
 8109bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109bf6:	e16e      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109bf8:	2300      	movs	r3, #0
 8109bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109bfc:	e16b      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109bfe:	4b89      	ldr	r3, [pc, #548]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c00:	681b      	ldr	r3, [r3, #0]
 8109c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109c0a:	d107      	bne.n	8109c1c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109c0c:	f107 030c 	add.w	r3, r7, #12
 8109c10:	4618      	mov	r0, r3
 8109c12:	f000 fad3 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8109c16:	697b      	ldr	r3, [r7, #20]
 8109c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109c1a:	e15c      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109c1c:	2300      	movs	r3, #0
 8109c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109c20:	e159      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8109c22:	4b80      	ldr	r3, [pc, #512]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109c26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109c2a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109c2c:	4b7d      	ldr	r3, [pc, #500]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c2e:	681b      	ldr	r3, [r3, #0]
 8109c30:	f003 0304 	and.w	r3, r3, #4
 8109c34:	2b04      	cmp	r3, #4
 8109c36:	d10c      	bne.n	8109c52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8109c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109c3a:	2b00      	cmp	r3, #0
 8109c3c:	d109      	bne.n	8109c52 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109c3e:	4b79      	ldr	r3, [pc, #484]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c40:	681b      	ldr	r3, [r3, #0]
 8109c42:	08db      	lsrs	r3, r3, #3
 8109c44:	f003 0303 	and.w	r3, r3, #3
 8109c48:	4a77      	ldr	r2, [pc, #476]	@ (8109e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8109c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8109c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109c50:	e01e      	b.n	8109c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109c52:	4b74      	ldr	r3, [pc, #464]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c54:	681b      	ldr	r3, [r3, #0]
 8109c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109c5e:	d106      	bne.n	8109c6e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8109c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109c66:	d102      	bne.n	8109c6e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109c68:	4b70      	ldr	r3, [pc, #448]	@ (8109e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8109c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109c6c:	e010      	b.n	8109c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c70:	681b      	ldr	r3, [r3, #0]
 8109c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109c76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109c7a:	d106      	bne.n	8109c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8109c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109c82:	d102      	bne.n	8109c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109c84:	4b6a      	ldr	r3, [pc, #424]	@ (8109e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8109c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109c88:	e002      	b.n	8109c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109c8a:	2300      	movs	r3, #0
 8109c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109c8e:	e122      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109c90:	e121      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8109c92:	2300      	movs	r3, #0
 8109c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109c96:	e11e      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8109c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109c9c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8109ca0:	430b      	orrs	r3, r1
 8109ca2:	d133      	bne.n	8109d0c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8109ca4:	4b5f      	ldr	r3, [pc, #380]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109cac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cb0:	2b00      	cmp	r3, #0
 8109cb2:	d004      	beq.n	8109cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8109cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109cba:	d012      	beq.n	8109ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8109cbc:	e023      	b.n	8109d06 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109cbe:	4b59      	ldr	r3, [pc, #356]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109cc0:	681b      	ldr	r3, [r3, #0]
 8109cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109cca:	d107      	bne.n	8109cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109cd0:	4618      	mov	r0, r3
 8109cd2:	f000 fbc7 	bl	810a464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109cda:	e0fc      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109cdc:	2300      	movs	r3, #0
 8109cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ce0:	e0f9      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109ce2:	4b50      	ldr	r3, [pc, #320]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109ce4:	681b      	ldr	r3, [r3, #0]
 8109ce6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109cee:	d107      	bne.n	8109d00 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109cf0:	f107 0318 	add.w	r3, r7, #24
 8109cf4:	4618      	mov	r0, r3
 8109cf6:	f000 f90d 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8109cfa:	6a3b      	ldr	r3, [r7, #32]
 8109cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109cfe:	e0ea      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109d00:	2300      	movs	r3, #0
 8109d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d04:	e0e7      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8109d06:	2300      	movs	r3, #0
 8109d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d0a:	e0e4      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8109d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109d10:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8109d14:	430b      	orrs	r3, r1
 8109d16:	f040 808d 	bne.w	8109e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8109d1a:	4b42      	ldr	r3, [pc, #264]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109d1e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8109d22:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109d2a:	d06b      	beq.n	8109e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8109d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109d32:	d874      	bhi.n	8109e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8109d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109d3a:	d056      	beq.n	8109dea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8109d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109d42:	d86c      	bhi.n	8109e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8109d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109d4a:	d03b      	beq.n	8109dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8109d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109d52:	d864      	bhi.n	8109e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8109d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109d5a:	d021      	beq.n	8109da0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8109d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109d62:	d85c      	bhi.n	8109e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8109d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d66:	2b00      	cmp	r3, #0
 8109d68:	d004      	beq.n	8109d74 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8109d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109d70:	d004      	beq.n	8109d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8109d72:	e054      	b.n	8109e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8109d74:	f000 f8b8 	bl	8109ee8 <HAL_RCCEx_GetD3PCLK1Freq>
 8109d78:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109d7a:	e0ac      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109d7c:	4b29      	ldr	r3, [pc, #164]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109d7e:	681b      	ldr	r3, [r3, #0]
 8109d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109d84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109d88:	d107      	bne.n	8109d9a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109d8a:	f107 0318 	add.w	r3, r7, #24
 8109d8e:	4618      	mov	r0, r3
 8109d90:	f000 f8c0 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8109d94:	69fb      	ldr	r3, [r7, #28]
 8109d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109d98:	e09d      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109d9a:	2300      	movs	r3, #0
 8109d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d9e:	e09a      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109da0:	4b20      	ldr	r3, [pc, #128]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109da2:	681b      	ldr	r3, [r3, #0]
 8109da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109dac:	d107      	bne.n	8109dbe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109dae:	f107 030c 	add.w	r3, r7, #12
 8109db2:	4618      	mov	r0, r3
 8109db4:	f000 fa02 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8109db8:	693b      	ldr	r3, [r7, #16]
 8109dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109dbc:	e08b      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109dbe:	2300      	movs	r3, #0
 8109dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109dc2:	e088      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8109dc4:	4b17      	ldr	r3, [pc, #92]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109dc6:	681b      	ldr	r3, [r3, #0]
 8109dc8:	f003 0304 	and.w	r3, r3, #4
 8109dcc:	2b04      	cmp	r3, #4
 8109dce:	d109      	bne.n	8109de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109dd0:	4b14      	ldr	r3, [pc, #80]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109dd2:	681b      	ldr	r3, [r3, #0]
 8109dd4:	08db      	lsrs	r3, r3, #3
 8109dd6:	f003 0303 	and.w	r3, r3, #3
 8109dda:	4a13      	ldr	r2, [pc, #76]	@ (8109e28 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8109ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8109de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109de2:	e078      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109de4:	2300      	movs	r3, #0
 8109de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109de8:	e075      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8109dea:	4b0e      	ldr	r3, [pc, #56]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109dec:	681b      	ldr	r3, [r3, #0]
 8109dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109df6:	d102      	bne.n	8109dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8109df8:	4b0c      	ldr	r3, [pc, #48]	@ (8109e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8109dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109dfc:	e06b      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109dfe:	2300      	movs	r3, #0
 8109e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e02:	e068      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8109e04:	4b07      	ldr	r3, [pc, #28]	@ (8109e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109e06:	681b      	ldr	r3, [r3, #0]
 8109e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109e0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109e10:	d102      	bne.n	8109e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8109e12:	4b07      	ldr	r3, [pc, #28]	@ (8109e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8109e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109e16:	e05e      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109e18:	2300      	movs	r3, #0
 8109e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e1c:	e05b      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8109e1e:	2300      	movs	r3, #0
 8109e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e22:	e058      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109e24:	58024400 	.word	0x58024400
 8109e28:	03d09000 	.word	0x03d09000
 8109e2c:	003d0900 	.word	0x003d0900
 8109e30:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8109e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109e38:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8109e3c:	430b      	orrs	r3, r1
 8109e3e:	d148      	bne.n	8109ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8109e40:	4b27      	ldr	r3, [pc, #156]	@ (8109ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8109e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109e44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109e48:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109e50:	d02a      	beq.n	8109ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8109e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109e58:	d838      	bhi.n	8109ecc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8109e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e5c:	2b00      	cmp	r3, #0
 8109e5e:	d004      	beq.n	8109e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8109e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109e66:	d00d      	beq.n	8109e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8109e68:	e030      	b.n	8109ecc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8109e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8109ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8109e6c:	681b      	ldr	r3, [r3, #0]
 8109e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109e72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109e76:	d102      	bne.n	8109e7e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8109e78:	4b1a      	ldr	r3, [pc, #104]	@ (8109ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8109e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109e7c:	e02b      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109e7e:	2300      	movs	r3, #0
 8109e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e82:	e028      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109e84:	4b16      	ldr	r3, [pc, #88]	@ (8109ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8109e86:	681b      	ldr	r3, [r3, #0]
 8109e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109e8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109e90:	d107      	bne.n	8109ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109e96:	4618      	mov	r0, r3
 8109e98:	f000 fae4 	bl	810a464 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109ea0:	e019      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109ea2:	2300      	movs	r3, #0
 8109ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ea6:	e016      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8109ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8109eaa:	681b      	ldr	r3, [r3, #0]
 8109eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109eb4:	d107      	bne.n	8109ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109eb6:	f107 0318 	add.w	r3, r7, #24
 8109eba:	4618      	mov	r0, r3
 8109ebc:	f000 f82a 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8109ec0:	69fb      	ldr	r3, [r7, #28]
 8109ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109ec4:	e007      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109ec6:	2300      	movs	r3, #0
 8109ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109eca:	e004      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109ecc:	2300      	movs	r3, #0
 8109ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ed0:	e001      	b.n	8109ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8109ed2:	2300      	movs	r3, #0
 8109ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8109ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8109ed8:	4618      	mov	r0, r3
 8109eda:	3740      	adds	r7, #64	@ 0x40
 8109edc:	46bd      	mov	sp, r7
 8109ede:	bd80      	pop	{r7, pc}
 8109ee0:	58024400 	.word	0x58024400
 8109ee4:	007a1200 	.word	0x007a1200

08109ee8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8109ee8:	b580      	push	{r7, lr}
 8109eea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8109eec:	f7fe f814 	bl	8107f18 <HAL_RCC_GetHCLKFreq>
 8109ef0:	4602      	mov	r2, r0
 8109ef2:	4b06      	ldr	r3, [pc, #24]	@ (8109f0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8109ef4:	6a1b      	ldr	r3, [r3, #32]
 8109ef6:	091b      	lsrs	r3, r3, #4
 8109ef8:	f003 0307 	and.w	r3, r3, #7
 8109efc:	4904      	ldr	r1, [pc, #16]	@ (8109f10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8109efe:	5ccb      	ldrb	r3, [r1, r3]
 8109f00:	f003 031f 	and.w	r3, r3, #31
 8109f04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8109f08:	4618      	mov	r0, r3
 8109f0a:	bd80      	pop	{r7, pc}
 8109f0c:	58024400 	.word	0x58024400
 8109f10:	08113950 	.word	0x08113950

08109f14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8109f14:	b480      	push	{r7}
 8109f16:	b089      	sub	sp, #36	@ 0x24
 8109f18:	af00      	add	r7, sp, #0
 8109f1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109f1c:	4ba1      	ldr	r3, [pc, #644]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109f20:	f003 0303 	and.w	r3, r3, #3
 8109f24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8109f26:	4b9f      	ldr	r3, [pc, #636]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109f2a:	0b1b      	lsrs	r3, r3, #12
 8109f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109f30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8109f32:	4b9c      	ldr	r3, [pc, #624]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109f36:	091b      	lsrs	r3, r3, #4
 8109f38:	f003 0301 	and.w	r3, r3, #1
 8109f3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8109f3e:	4b99      	ldr	r3, [pc, #612]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109f42:	08db      	lsrs	r3, r3, #3
 8109f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109f48:	693a      	ldr	r2, [r7, #16]
 8109f4a:	fb02 f303 	mul.w	r3, r2, r3
 8109f4e:	ee07 3a90 	vmov	s15, r3
 8109f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8109f5a:	697b      	ldr	r3, [r7, #20]
 8109f5c:	2b00      	cmp	r3, #0
 8109f5e:	f000 8111 	beq.w	810a184 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8109f62:	69bb      	ldr	r3, [r7, #24]
 8109f64:	2b02      	cmp	r3, #2
 8109f66:	f000 8083 	beq.w	810a070 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8109f6a:	69bb      	ldr	r3, [r7, #24]
 8109f6c:	2b02      	cmp	r3, #2
 8109f6e:	f200 80a1 	bhi.w	810a0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8109f72:	69bb      	ldr	r3, [r7, #24]
 8109f74:	2b00      	cmp	r3, #0
 8109f76:	d003      	beq.n	8109f80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8109f78:	69bb      	ldr	r3, [r7, #24]
 8109f7a:	2b01      	cmp	r3, #1
 8109f7c:	d056      	beq.n	810a02c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8109f7e:	e099      	b.n	810a0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109f80:	4b88      	ldr	r3, [pc, #544]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f82:	681b      	ldr	r3, [r3, #0]
 8109f84:	f003 0320 	and.w	r3, r3, #32
 8109f88:	2b00      	cmp	r3, #0
 8109f8a:	d02d      	beq.n	8109fe8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109f8c:	4b85      	ldr	r3, [pc, #532]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f8e:	681b      	ldr	r3, [r3, #0]
 8109f90:	08db      	lsrs	r3, r3, #3
 8109f92:	f003 0303 	and.w	r3, r3, #3
 8109f96:	4a84      	ldr	r2, [pc, #528]	@ (810a1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8109f98:	fa22 f303 	lsr.w	r3, r2, r3
 8109f9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8109f9e:	68bb      	ldr	r3, [r7, #8]
 8109fa0:	ee07 3a90 	vmov	s15, r3
 8109fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109fa8:	697b      	ldr	r3, [r7, #20]
 8109faa:	ee07 3a90 	vmov	s15, r3
 8109fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109fb6:	4b7b      	ldr	r3, [pc, #492]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109fbe:	ee07 3a90 	vmov	s15, r3
 8109fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8109fca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8109fe6:	e087      	b.n	810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8109fe8:	697b      	ldr	r3, [r7, #20]
 8109fea:	ee07 3a90 	vmov	s15, r3
 8109fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ff2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8109ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109ffa:	4b6a      	ldr	r3, [pc, #424]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a002:	ee07 3a90 	vmov	s15, r3
 810a006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a00a:	ed97 6a03 	vldr	s12, [r7, #12]
 810a00e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a01a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a022:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a02a:	e065      	b.n	810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a02c:	697b      	ldr	r3, [r7, #20]
 810a02e:	ee07 3a90 	vmov	s15, r3
 810a032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a036:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a03e:	4b59      	ldr	r3, [pc, #356]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a046:	ee07 3a90 	vmov	s15, r3
 810a04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a04e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a052:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a05e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a066:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a06a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a06e:	e043      	b.n	810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a070:	697b      	ldr	r3, [r7, #20]
 810a072:	ee07 3a90 	vmov	s15, r3
 810a076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a07a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810a07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a082:	4b48      	ldr	r3, [pc, #288]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a08a:	ee07 3a90 	vmov	s15, r3
 810a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a092:	ed97 6a03 	vldr	s12, [r7, #12]
 810a096:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a0a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a0ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a0b2:	e021      	b.n	810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a0b4:	697b      	ldr	r3, [r7, #20]
 810a0b6:	ee07 3a90 	vmov	s15, r3
 810a0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a0c6:	4b37      	ldr	r3, [pc, #220]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a0ce:	ee07 3a90 	vmov	s15, r3
 810a0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a0da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a0e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a0f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a0f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810a0f8:	4b2a      	ldr	r3, [pc, #168]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a0fc:	0a5b      	lsrs	r3, r3, #9
 810a0fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a102:	ee07 3a90 	vmov	s15, r3
 810a106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a10a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a10e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a112:	edd7 6a07 	vldr	s13, [r7, #28]
 810a116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a11a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a11e:	ee17 2a90 	vmov	r2, s15
 810a122:	687b      	ldr	r3, [r7, #4]
 810a124:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810a126:	4b1f      	ldr	r3, [pc, #124]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a12a:	0c1b      	lsrs	r3, r3, #16
 810a12c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a130:	ee07 3a90 	vmov	s15, r3
 810a134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a13c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a140:	edd7 6a07 	vldr	s13, [r7, #28]
 810a144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a14c:	ee17 2a90 	vmov	r2, s15
 810a150:	687b      	ldr	r3, [r7, #4]
 810a152:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810a154:	4b13      	ldr	r3, [pc, #76]	@ (810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a158:	0e1b      	lsrs	r3, r3, #24
 810a15a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a15e:	ee07 3a90 	vmov	s15, r3
 810a162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a16a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a16e:	edd7 6a07 	vldr	s13, [r7, #28]
 810a172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a17a:	ee17 2a90 	vmov	r2, s15
 810a17e:	687b      	ldr	r3, [r7, #4]
 810a180:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810a182:	e008      	b.n	810a196 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810a184:	687b      	ldr	r3, [r7, #4]
 810a186:	2200      	movs	r2, #0
 810a188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810a18a:	687b      	ldr	r3, [r7, #4]
 810a18c:	2200      	movs	r2, #0
 810a18e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810a190:	687b      	ldr	r3, [r7, #4]
 810a192:	2200      	movs	r2, #0
 810a194:	609a      	str	r2, [r3, #8]
}
 810a196:	bf00      	nop
 810a198:	3724      	adds	r7, #36	@ 0x24
 810a19a:	46bd      	mov	sp, r7
 810a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1a0:	4770      	bx	lr
 810a1a2:	bf00      	nop
 810a1a4:	58024400 	.word	0x58024400
 810a1a8:	03d09000 	.word	0x03d09000
 810a1ac:	46000000 	.word	0x46000000
 810a1b0:	4c742400 	.word	0x4c742400
 810a1b4:	4a742400 	.word	0x4a742400
 810a1b8:	4af42400 	.word	0x4af42400

0810a1bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810a1bc:	b480      	push	{r7}
 810a1be:	b089      	sub	sp, #36	@ 0x24
 810a1c0:	af00      	add	r7, sp, #0
 810a1c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a1c4:	4ba1      	ldr	r3, [pc, #644]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a1c8:	f003 0303 	and.w	r3, r3, #3
 810a1cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810a1ce:	4b9f      	ldr	r3, [pc, #636]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a1d2:	0d1b      	lsrs	r3, r3, #20
 810a1d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a1d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810a1da:	4b9c      	ldr	r3, [pc, #624]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a1de:	0a1b      	lsrs	r3, r3, #8
 810a1e0:	f003 0301 	and.w	r3, r3, #1
 810a1e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810a1e6:	4b99      	ldr	r3, [pc, #612]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a1ea:	08db      	lsrs	r3, r3, #3
 810a1ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a1f0:	693a      	ldr	r2, [r7, #16]
 810a1f2:	fb02 f303 	mul.w	r3, r2, r3
 810a1f6:	ee07 3a90 	vmov	s15, r3
 810a1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a1fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810a202:	697b      	ldr	r3, [r7, #20]
 810a204:	2b00      	cmp	r3, #0
 810a206:	f000 8111 	beq.w	810a42c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810a20a:	69bb      	ldr	r3, [r7, #24]
 810a20c:	2b02      	cmp	r3, #2
 810a20e:	f000 8083 	beq.w	810a318 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810a212:	69bb      	ldr	r3, [r7, #24]
 810a214:	2b02      	cmp	r3, #2
 810a216:	f200 80a1 	bhi.w	810a35c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810a21a:	69bb      	ldr	r3, [r7, #24]
 810a21c:	2b00      	cmp	r3, #0
 810a21e:	d003      	beq.n	810a228 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810a220:	69bb      	ldr	r3, [r7, #24]
 810a222:	2b01      	cmp	r3, #1
 810a224:	d056      	beq.n	810a2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810a226:	e099      	b.n	810a35c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a228:	4b88      	ldr	r3, [pc, #544]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a22a:	681b      	ldr	r3, [r3, #0]
 810a22c:	f003 0320 	and.w	r3, r3, #32
 810a230:	2b00      	cmp	r3, #0
 810a232:	d02d      	beq.n	810a290 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a234:	4b85      	ldr	r3, [pc, #532]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a236:	681b      	ldr	r3, [r3, #0]
 810a238:	08db      	lsrs	r3, r3, #3
 810a23a:	f003 0303 	and.w	r3, r3, #3
 810a23e:	4a84      	ldr	r2, [pc, #528]	@ (810a450 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810a240:	fa22 f303 	lsr.w	r3, r2, r3
 810a244:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a246:	68bb      	ldr	r3, [r7, #8]
 810a248:	ee07 3a90 	vmov	s15, r3
 810a24c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a250:	697b      	ldr	r3, [r7, #20]
 810a252:	ee07 3a90 	vmov	s15, r3
 810a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a25e:	4b7b      	ldr	r3, [pc, #492]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a266:	ee07 3a90 	vmov	s15, r3
 810a26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a26e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a272:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810a454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a27e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a286:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a28a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810a28e:	e087      	b.n	810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a290:	697b      	ldr	r3, [r7, #20]
 810a292:	ee07 3a90 	vmov	s15, r3
 810a296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a29a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810a458 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810a29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a2a2:	4b6a      	ldr	r3, [pc, #424]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a2a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a2aa:	ee07 3a90 	vmov	s15, r3
 810a2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2b2:	ed97 6a03 	vldr	s12, [r7, #12]
 810a2b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810a454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a2c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a2ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a2d2:	e065      	b.n	810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a2d4:	697b      	ldr	r3, [r7, #20]
 810a2d6:	ee07 3a90 	vmov	s15, r3
 810a2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a2de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810a45c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a2e6:	4b59      	ldr	r3, [pc, #356]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a2e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a2ee:	ee07 3a90 	vmov	s15, r3
 810a2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a2fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810a454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a316:	e043      	b.n	810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a318:	697b      	ldr	r3, [r7, #20]
 810a31a:	ee07 3a90 	vmov	s15, r3
 810a31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a322:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810a460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810a326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a32a:	4b48      	ldr	r3, [pc, #288]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a332:	ee07 3a90 	vmov	s15, r3
 810a336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a33a:	ed97 6a03 	vldr	s12, [r7, #12]
 810a33e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810a454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a34a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a352:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a35a:	e021      	b.n	810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a35c:	697b      	ldr	r3, [r7, #20]
 810a35e:	ee07 3a90 	vmov	s15, r3
 810a362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a366:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810a45c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a36e:	4b37      	ldr	r3, [pc, #220]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a376:	ee07 3a90 	vmov	s15, r3
 810a37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a37e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a382:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810a454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a38e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a396:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a39a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a39e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810a3a0:	4b2a      	ldr	r3, [pc, #168]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a3a4:	0a5b      	lsrs	r3, r3, #9
 810a3a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a3aa:	ee07 3a90 	vmov	s15, r3
 810a3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a3b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a3b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a3ba:	edd7 6a07 	vldr	s13, [r7, #28]
 810a3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a3c6:	ee17 2a90 	vmov	r2, s15
 810a3ca:	687b      	ldr	r3, [r7, #4]
 810a3cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810a3ce:	4b1f      	ldr	r3, [pc, #124]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a3d2:	0c1b      	lsrs	r3, r3, #16
 810a3d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a3d8:	ee07 3a90 	vmov	s15, r3
 810a3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a3e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a3e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a3e8:	edd7 6a07 	vldr	s13, [r7, #28]
 810a3ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a3f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a3f4:	ee17 2a90 	vmov	r2, s15
 810a3f8:	687b      	ldr	r3, [r7, #4]
 810a3fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810a3fc:	4b13      	ldr	r3, [pc, #76]	@ (810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a400:	0e1b      	lsrs	r3, r3, #24
 810a402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a406:	ee07 3a90 	vmov	s15, r3
 810a40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a40e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a412:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a416:	edd7 6a07 	vldr	s13, [r7, #28]
 810a41a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a41e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a422:	ee17 2a90 	vmov	r2, s15
 810a426:	687b      	ldr	r3, [r7, #4]
 810a428:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810a42a:	e008      	b.n	810a43e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810a42c:	687b      	ldr	r3, [r7, #4]
 810a42e:	2200      	movs	r2, #0
 810a430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810a432:	687b      	ldr	r3, [r7, #4]
 810a434:	2200      	movs	r2, #0
 810a436:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810a438:	687b      	ldr	r3, [r7, #4]
 810a43a:	2200      	movs	r2, #0
 810a43c:	609a      	str	r2, [r3, #8]
}
 810a43e:	bf00      	nop
 810a440:	3724      	adds	r7, #36	@ 0x24
 810a442:	46bd      	mov	sp, r7
 810a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a448:	4770      	bx	lr
 810a44a:	bf00      	nop
 810a44c:	58024400 	.word	0x58024400
 810a450:	03d09000 	.word	0x03d09000
 810a454:	46000000 	.word	0x46000000
 810a458:	4c742400 	.word	0x4c742400
 810a45c:	4a742400 	.word	0x4a742400
 810a460:	4af42400 	.word	0x4af42400

0810a464 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810a464:	b480      	push	{r7}
 810a466:	b089      	sub	sp, #36	@ 0x24
 810a468:	af00      	add	r7, sp, #0
 810a46a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a46c:	4ba0      	ldr	r3, [pc, #640]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a470:	f003 0303 	and.w	r3, r3, #3
 810a474:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810a476:	4b9e      	ldr	r3, [pc, #632]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a47a:	091b      	lsrs	r3, r3, #4
 810a47c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a480:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810a482:	4b9b      	ldr	r3, [pc, #620]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a486:	f003 0301 	and.w	r3, r3, #1
 810a48a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810a48c:	4b98      	ldr	r3, [pc, #608]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a48e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a490:	08db      	lsrs	r3, r3, #3
 810a492:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a496:	693a      	ldr	r2, [r7, #16]
 810a498:	fb02 f303 	mul.w	r3, r2, r3
 810a49c:	ee07 3a90 	vmov	s15, r3
 810a4a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a4a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810a4a8:	697b      	ldr	r3, [r7, #20]
 810a4aa:	2b00      	cmp	r3, #0
 810a4ac:	f000 8111 	beq.w	810a6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810a4b0:	69bb      	ldr	r3, [r7, #24]
 810a4b2:	2b02      	cmp	r3, #2
 810a4b4:	f000 8083 	beq.w	810a5be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810a4b8:	69bb      	ldr	r3, [r7, #24]
 810a4ba:	2b02      	cmp	r3, #2
 810a4bc:	f200 80a1 	bhi.w	810a602 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810a4c0:	69bb      	ldr	r3, [r7, #24]
 810a4c2:	2b00      	cmp	r3, #0
 810a4c4:	d003      	beq.n	810a4ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810a4c6:	69bb      	ldr	r3, [r7, #24]
 810a4c8:	2b01      	cmp	r3, #1
 810a4ca:	d056      	beq.n	810a57a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810a4cc:	e099      	b.n	810a602 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a4ce:	4b88      	ldr	r3, [pc, #544]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a4d0:	681b      	ldr	r3, [r3, #0]
 810a4d2:	f003 0320 	and.w	r3, r3, #32
 810a4d6:	2b00      	cmp	r3, #0
 810a4d8:	d02d      	beq.n	810a536 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a4da:	4b85      	ldr	r3, [pc, #532]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a4dc:	681b      	ldr	r3, [r3, #0]
 810a4de:	08db      	lsrs	r3, r3, #3
 810a4e0:	f003 0303 	and.w	r3, r3, #3
 810a4e4:	4a83      	ldr	r2, [pc, #524]	@ (810a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810a4e6:	fa22 f303 	lsr.w	r3, r2, r3
 810a4ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a4ec:	68bb      	ldr	r3, [r7, #8]
 810a4ee:	ee07 3a90 	vmov	s15, r3
 810a4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a4f6:	697b      	ldr	r3, [r7, #20]
 810a4f8:	ee07 3a90 	vmov	s15, r3
 810a4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a504:	4b7a      	ldr	r3, [pc, #488]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a50c:	ee07 3a90 	vmov	s15, r3
 810a510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a514:	ed97 6a03 	vldr	s12, [r7, #12]
 810a518:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a51c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a524:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a52c:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a530:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810a534:	e087      	b.n	810a646 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a536:	697b      	ldr	r3, [r7, #20]
 810a538:	ee07 3a90 	vmov	s15, r3
 810a53c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a540:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810a544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a548:	4b69      	ldr	r3, [pc, #420]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a54a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a54c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a550:	ee07 3a90 	vmov	s15, r3
 810a554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a558:	ed97 6a03 	vldr	s12, [r7, #12]
 810a55c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a560:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a564:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a568:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a56c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a570:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a574:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a578:	e065      	b.n	810a646 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a57a:	697b      	ldr	r3, [r7, #20]
 810a57c:	ee07 3a90 	vmov	s15, r3
 810a580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a584:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810a700 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810a588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a58c:	4b58      	ldr	r3, [pc, #352]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a594:	ee07 3a90 	vmov	s15, r3
 810a598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a59c:	ed97 6a03 	vldr	s12, [r7, #12]
 810a5a0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a5a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a5a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a5ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a5b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a5b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a5b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a5bc:	e043      	b.n	810a646 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a5be:	697b      	ldr	r3, [r7, #20]
 810a5c0:	ee07 3a90 	vmov	s15, r3
 810a5c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a5c8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810a704 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810a5cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a5d0:	4b47      	ldr	r3, [pc, #284]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a5d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a5d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a5d8:	ee07 3a90 	vmov	s15, r3
 810a5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a5e0:	ed97 6a03 	vldr	s12, [r7, #12]
 810a5e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a5e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a5ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a5f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a5f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a5f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a5fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a600:	e021      	b.n	810a646 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a602:	697b      	ldr	r3, [r7, #20]
 810a604:	ee07 3a90 	vmov	s15, r3
 810a608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a60c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810a610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a614:	4b36      	ldr	r3, [pc, #216]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a61c:	ee07 3a90 	vmov	s15, r3
 810a620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a624:	ed97 6a03 	vldr	s12, [r7, #12]
 810a628:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a62c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a634:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a63c:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a640:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a644:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810a646:	4b2a      	ldr	r3, [pc, #168]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a64a:	0a5b      	lsrs	r3, r3, #9
 810a64c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a650:	ee07 3a90 	vmov	s15, r3
 810a654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a65c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a660:	edd7 6a07 	vldr	s13, [r7, #28]
 810a664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a66c:	ee17 2a90 	vmov	r2, s15
 810a670:	687b      	ldr	r3, [r7, #4]
 810a672:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810a674:	4b1e      	ldr	r3, [pc, #120]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a678:	0c1b      	lsrs	r3, r3, #16
 810a67a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a67e:	ee07 3a90 	vmov	s15, r3
 810a682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a68a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a68e:	edd7 6a07 	vldr	s13, [r7, #28]
 810a692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a69a:	ee17 2a90 	vmov	r2, s15
 810a69e:	687b      	ldr	r3, [r7, #4]
 810a6a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810a6a2:	4b13      	ldr	r3, [pc, #76]	@ (810a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a6a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a6a6:	0e1b      	lsrs	r3, r3, #24
 810a6a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a6ac:	ee07 3a90 	vmov	s15, r3
 810a6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a6b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a6b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a6bc:	edd7 6a07 	vldr	s13, [r7, #28]
 810a6c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a6c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a6c8:	ee17 2a90 	vmov	r2, s15
 810a6cc:	687b      	ldr	r3, [r7, #4]
 810a6ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810a6d0:	e008      	b.n	810a6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810a6d2:	687b      	ldr	r3, [r7, #4]
 810a6d4:	2200      	movs	r2, #0
 810a6d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810a6d8:	687b      	ldr	r3, [r7, #4]
 810a6da:	2200      	movs	r2, #0
 810a6dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810a6de:	687b      	ldr	r3, [r7, #4]
 810a6e0:	2200      	movs	r2, #0
 810a6e2:	609a      	str	r2, [r3, #8]
}
 810a6e4:	bf00      	nop
 810a6e6:	3724      	adds	r7, #36	@ 0x24
 810a6e8:	46bd      	mov	sp, r7
 810a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6ee:	4770      	bx	lr
 810a6f0:	58024400 	.word	0x58024400
 810a6f4:	03d09000 	.word	0x03d09000
 810a6f8:	46000000 	.word	0x46000000
 810a6fc:	4c742400 	.word	0x4c742400
 810a700:	4a742400 	.word	0x4a742400
 810a704:	4af42400 	.word	0x4af42400

0810a708 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810a708:	b580      	push	{r7, lr}
 810a70a:	b084      	sub	sp, #16
 810a70c:	af00      	add	r7, sp, #0
 810a70e:	6078      	str	r0, [r7, #4]
 810a710:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a712:	2300      	movs	r3, #0
 810a714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a716:	4b54      	ldr	r3, [pc, #336]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a71a:	f003 0303 	and.w	r3, r3, #3
 810a71e:	2b03      	cmp	r3, #3
 810a720:	d101      	bne.n	810a726 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810a722:	2301      	movs	r3, #1
 810a724:	e09b      	b.n	810a85e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810a726:	4b50      	ldr	r3, [pc, #320]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a728:	681b      	ldr	r3, [r3, #0]
 810a72a:	4a4f      	ldr	r2, [pc, #316]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a72c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810a730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a732:	f7f9 fe4b 	bl	81043cc <HAL_GetTick>
 810a736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a738:	e008      	b.n	810a74c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810a73a:	f7f9 fe47 	bl	81043cc <HAL_GetTick>
 810a73e:	4602      	mov	r2, r0
 810a740:	68bb      	ldr	r3, [r7, #8]
 810a742:	1ad3      	subs	r3, r2, r3
 810a744:	2b02      	cmp	r3, #2
 810a746:	d901      	bls.n	810a74c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a748:	2303      	movs	r3, #3
 810a74a:	e088      	b.n	810a85e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a74c:	4b46      	ldr	r3, [pc, #280]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a74e:	681b      	ldr	r3, [r3, #0]
 810a750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a754:	2b00      	cmp	r3, #0
 810a756:	d1f0      	bne.n	810a73a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810a758:	4b43      	ldr	r3, [pc, #268]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a75c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	681b      	ldr	r3, [r3, #0]
 810a764:	031b      	lsls	r3, r3, #12
 810a766:	4940      	ldr	r1, [pc, #256]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a768:	4313      	orrs	r3, r2
 810a76a:	628b      	str	r3, [r1, #40]	@ 0x28
 810a76c:	687b      	ldr	r3, [r7, #4]
 810a76e:	685b      	ldr	r3, [r3, #4]
 810a770:	3b01      	subs	r3, #1
 810a772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a776:	687b      	ldr	r3, [r7, #4]
 810a778:	689b      	ldr	r3, [r3, #8]
 810a77a:	3b01      	subs	r3, #1
 810a77c:	025b      	lsls	r3, r3, #9
 810a77e:	b29b      	uxth	r3, r3
 810a780:	431a      	orrs	r2, r3
 810a782:	687b      	ldr	r3, [r7, #4]
 810a784:	68db      	ldr	r3, [r3, #12]
 810a786:	3b01      	subs	r3, #1
 810a788:	041b      	lsls	r3, r3, #16
 810a78a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810a78e:	431a      	orrs	r2, r3
 810a790:	687b      	ldr	r3, [r7, #4]
 810a792:	691b      	ldr	r3, [r3, #16]
 810a794:	3b01      	subs	r3, #1
 810a796:	061b      	lsls	r3, r3, #24
 810a798:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810a79c:	4932      	ldr	r1, [pc, #200]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a79e:	4313      	orrs	r3, r2
 810a7a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810a7a2:	4b31      	ldr	r3, [pc, #196]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a7a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810a7aa:	687b      	ldr	r3, [r7, #4]
 810a7ac:	695b      	ldr	r3, [r3, #20]
 810a7ae:	492e      	ldr	r1, [pc, #184]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7b0:	4313      	orrs	r3, r2
 810a7b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810a7b4:	4b2c      	ldr	r3, [pc, #176]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a7b8:	f023 0220 	bic.w	r2, r3, #32
 810a7bc:	687b      	ldr	r3, [r7, #4]
 810a7be:	699b      	ldr	r3, [r3, #24]
 810a7c0:	4929      	ldr	r1, [pc, #164]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7c2:	4313      	orrs	r3, r2
 810a7c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810a7c6:	4b28      	ldr	r3, [pc, #160]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a7ca:	4a27      	ldr	r2, [pc, #156]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7cc:	f023 0310 	bic.w	r3, r3, #16
 810a7d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810a7d2:	4b25      	ldr	r3, [pc, #148]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a7d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a7da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810a7de:	687a      	ldr	r2, [r7, #4]
 810a7e0:	69d2      	ldr	r2, [r2, #28]
 810a7e2:	00d2      	lsls	r2, r2, #3
 810a7e4:	4920      	ldr	r1, [pc, #128]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7e6:	4313      	orrs	r3, r2
 810a7e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810a7ea:	4b1f      	ldr	r3, [pc, #124]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a7ee:	4a1e      	ldr	r2, [pc, #120]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7f0:	f043 0310 	orr.w	r3, r3, #16
 810a7f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810a7f6:	683b      	ldr	r3, [r7, #0]
 810a7f8:	2b00      	cmp	r3, #0
 810a7fa:	d106      	bne.n	810a80a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810a7fc:	4b1a      	ldr	r3, [pc, #104]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a800:	4a19      	ldr	r2, [pc, #100]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a802:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810a806:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a808:	e00f      	b.n	810a82a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810a80a:	683b      	ldr	r3, [r7, #0]
 810a80c:	2b01      	cmp	r3, #1
 810a80e:	d106      	bne.n	810a81e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810a810:	4b15      	ldr	r3, [pc, #84]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a814:	4a14      	ldr	r2, [pc, #80]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810a81a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a81c:	e005      	b.n	810a82a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810a81e:	4b12      	ldr	r3, [pc, #72]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a822:	4a11      	ldr	r2, [pc, #68]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a824:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810a828:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810a82a:	4b0f      	ldr	r3, [pc, #60]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a82c:	681b      	ldr	r3, [r3, #0]
 810a82e:	4a0e      	ldr	r2, [pc, #56]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a830:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810a834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a836:	f7f9 fdc9 	bl	81043cc <HAL_GetTick>
 810a83a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a83c:	e008      	b.n	810a850 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810a83e:	f7f9 fdc5 	bl	81043cc <HAL_GetTick>
 810a842:	4602      	mov	r2, r0
 810a844:	68bb      	ldr	r3, [r7, #8]
 810a846:	1ad3      	subs	r3, r2, r3
 810a848:	2b02      	cmp	r3, #2
 810a84a:	d901      	bls.n	810a850 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a84c:	2303      	movs	r3, #3
 810a84e:	e006      	b.n	810a85e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a850:	4b05      	ldr	r3, [pc, #20]	@ (810a868 <RCCEx_PLL2_Config+0x160>)
 810a852:	681b      	ldr	r3, [r3, #0]
 810a854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a858:	2b00      	cmp	r3, #0
 810a85a:	d0f0      	beq.n	810a83e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810a85c:	7bfb      	ldrb	r3, [r7, #15]
}
 810a85e:	4618      	mov	r0, r3
 810a860:	3710      	adds	r7, #16
 810a862:	46bd      	mov	sp, r7
 810a864:	bd80      	pop	{r7, pc}
 810a866:	bf00      	nop
 810a868:	58024400 	.word	0x58024400

0810a86c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810a86c:	b580      	push	{r7, lr}
 810a86e:	b084      	sub	sp, #16
 810a870:	af00      	add	r7, sp, #0
 810a872:	6078      	str	r0, [r7, #4]
 810a874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a876:	2300      	movs	r3, #0
 810a878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a87a:	4b54      	ldr	r3, [pc, #336]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a87e:	f003 0303 	and.w	r3, r3, #3
 810a882:	2b03      	cmp	r3, #3
 810a884:	d101      	bne.n	810a88a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810a886:	2301      	movs	r3, #1
 810a888:	e09b      	b.n	810a9c2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810a88a:	4b50      	ldr	r3, [pc, #320]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a88c:	681b      	ldr	r3, [r3, #0]
 810a88e:	4a4f      	ldr	r2, [pc, #316]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a896:	f7f9 fd99 	bl	81043cc <HAL_GetTick>
 810a89a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a89c:	e008      	b.n	810a8b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810a89e:	f7f9 fd95 	bl	81043cc <HAL_GetTick>
 810a8a2:	4602      	mov	r2, r0
 810a8a4:	68bb      	ldr	r3, [r7, #8]
 810a8a6:	1ad3      	subs	r3, r2, r3
 810a8a8:	2b02      	cmp	r3, #2
 810a8aa:	d901      	bls.n	810a8b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a8ac:	2303      	movs	r3, #3
 810a8ae:	e088      	b.n	810a9c2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a8b0:	4b46      	ldr	r3, [pc, #280]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a8b2:	681b      	ldr	r3, [r3, #0]
 810a8b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a8b8:	2b00      	cmp	r3, #0
 810a8ba:	d1f0      	bne.n	810a89e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810a8bc:	4b43      	ldr	r3, [pc, #268]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a8c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810a8c4:	687b      	ldr	r3, [r7, #4]
 810a8c6:	681b      	ldr	r3, [r3, #0]
 810a8c8:	051b      	lsls	r3, r3, #20
 810a8ca:	4940      	ldr	r1, [pc, #256]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a8cc:	4313      	orrs	r3, r2
 810a8ce:	628b      	str	r3, [r1, #40]	@ 0x28
 810a8d0:	687b      	ldr	r3, [r7, #4]
 810a8d2:	685b      	ldr	r3, [r3, #4]
 810a8d4:	3b01      	subs	r3, #1
 810a8d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a8da:	687b      	ldr	r3, [r7, #4]
 810a8dc:	689b      	ldr	r3, [r3, #8]
 810a8de:	3b01      	subs	r3, #1
 810a8e0:	025b      	lsls	r3, r3, #9
 810a8e2:	b29b      	uxth	r3, r3
 810a8e4:	431a      	orrs	r2, r3
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	68db      	ldr	r3, [r3, #12]
 810a8ea:	3b01      	subs	r3, #1
 810a8ec:	041b      	lsls	r3, r3, #16
 810a8ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810a8f2:	431a      	orrs	r2, r3
 810a8f4:	687b      	ldr	r3, [r7, #4]
 810a8f6:	691b      	ldr	r3, [r3, #16]
 810a8f8:	3b01      	subs	r3, #1
 810a8fa:	061b      	lsls	r3, r3, #24
 810a8fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810a900:	4932      	ldr	r1, [pc, #200]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a902:	4313      	orrs	r3, r2
 810a904:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810a906:	4b31      	ldr	r3, [pc, #196]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a90a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810a90e:	687b      	ldr	r3, [r7, #4]
 810a910:	695b      	ldr	r3, [r3, #20]
 810a912:	492e      	ldr	r1, [pc, #184]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a914:	4313      	orrs	r3, r2
 810a916:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810a918:	4b2c      	ldr	r3, [pc, #176]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a91c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810a920:	687b      	ldr	r3, [r7, #4]
 810a922:	699b      	ldr	r3, [r3, #24]
 810a924:	4929      	ldr	r1, [pc, #164]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a926:	4313      	orrs	r3, r2
 810a928:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810a92a:	4b28      	ldr	r3, [pc, #160]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a92e:	4a27      	ldr	r2, [pc, #156]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a934:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810a936:	4b25      	ldr	r3, [pc, #148]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a93a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a93e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810a942:	687a      	ldr	r2, [r7, #4]
 810a944:	69d2      	ldr	r2, [r2, #28]
 810a946:	00d2      	lsls	r2, r2, #3
 810a948:	4920      	ldr	r1, [pc, #128]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a94a:	4313      	orrs	r3, r2
 810a94c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810a94e:	4b1f      	ldr	r3, [pc, #124]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a952:	4a1e      	ldr	r2, [pc, #120]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810a958:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810a95a:	683b      	ldr	r3, [r7, #0]
 810a95c:	2b00      	cmp	r3, #0
 810a95e:	d106      	bne.n	810a96e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810a960:	4b1a      	ldr	r3, [pc, #104]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a964:	4a19      	ldr	r2, [pc, #100]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a966:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810a96a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a96c:	e00f      	b.n	810a98e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810a96e:	683b      	ldr	r3, [r7, #0]
 810a970:	2b01      	cmp	r3, #1
 810a972:	d106      	bne.n	810a982 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810a974:	4b15      	ldr	r3, [pc, #84]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a978:	4a14      	ldr	r2, [pc, #80]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a97a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810a97e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a980:	e005      	b.n	810a98e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810a982:	4b12      	ldr	r3, [pc, #72]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a986:	4a11      	ldr	r2, [pc, #68]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a988:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810a98c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810a98e:	4b0f      	ldr	r3, [pc, #60]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a990:	681b      	ldr	r3, [r3, #0]
 810a992:	4a0e      	ldr	r2, [pc, #56]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810a998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a99a:	f7f9 fd17 	bl	81043cc <HAL_GetTick>
 810a99e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a9a0:	e008      	b.n	810a9b4 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810a9a2:	f7f9 fd13 	bl	81043cc <HAL_GetTick>
 810a9a6:	4602      	mov	r2, r0
 810a9a8:	68bb      	ldr	r3, [r7, #8]
 810a9aa:	1ad3      	subs	r3, r2, r3
 810a9ac:	2b02      	cmp	r3, #2
 810a9ae:	d901      	bls.n	810a9b4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a9b0:	2303      	movs	r3, #3
 810a9b2:	e006      	b.n	810a9c2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a9b4:	4b05      	ldr	r3, [pc, #20]	@ (810a9cc <RCCEx_PLL3_Config+0x160>)
 810a9b6:	681b      	ldr	r3, [r3, #0]
 810a9b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a9bc:	2b00      	cmp	r3, #0
 810a9be:	d0f0      	beq.n	810a9a2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 810a9c2:	4618      	mov	r0, r3
 810a9c4:	3710      	adds	r7, #16
 810a9c6:	46bd      	mov	sp, r7
 810a9c8:	bd80      	pop	{r7, pc}
 810a9ca:	bf00      	nop
 810a9cc:	58024400 	.word	0x58024400

0810a9d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810a9d0:	b580      	push	{r7, lr}
 810a9d2:	b082      	sub	sp, #8
 810a9d4:	af00      	add	r7, sp, #0
 810a9d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810a9d8:	687b      	ldr	r3, [r7, #4]
 810a9da:	2b00      	cmp	r3, #0
 810a9dc:	d101      	bne.n	810a9e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810a9de:	2301      	movs	r3, #1
 810a9e0:	e049      	b.n	810aa76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810a9e2:	687b      	ldr	r3, [r7, #4]
 810a9e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810a9e8:	b2db      	uxtb	r3, r3
 810a9ea:	2b00      	cmp	r3, #0
 810a9ec:	d106      	bne.n	810a9fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810a9ee:	687b      	ldr	r3, [r7, #4]
 810a9f0:	2200      	movs	r2, #0
 810a9f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810a9f6:	6878      	ldr	r0, [r7, #4]
 810a9f8:	f7f9 f8d4 	bl	8103ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	2202      	movs	r2, #2
 810aa00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810aa04:	687b      	ldr	r3, [r7, #4]
 810aa06:	681a      	ldr	r2, [r3, #0]
 810aa08:	687b      	ldr	r3, [r7, #4]
 810aa0a:	3304      	adds	r3, #4
 810aa0c:	4619      	mov	r1, r3
 810aa0e:	4610      	mov	r0, r2
 810aa10:	f000 fe70 	bl	810b6f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810aa14:	687b      	ldr	r3, [r7, #4]
 810aa16:	2201      	movs	r2, #1
 810aa18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	2201      	movs	r2, #1
 810aa20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810aa24:	687b      	ldr	r3, [r7, #4]
 810aa26:	2201      	movs	r2, #1
 810aa28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810aa2c:	687b      	ldr	r3, [r7, #4]
 810aa2e:	2201      	movs	r2, #1
 810aa30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810aa34:	687b      	ldr	r3, [r7, #4]
 810aa36:	2201      	movs	r2, #1
 810aa38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810aa3c:	687b      	ldr	r3, [r7, #4]
 810aa3e:	2201      	movs	r2, #1
 810aa40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810aa44:	687b      	ldr	r3, [r7, #4]
 810aa46:	2201      	movs	r2, #1
 810aa48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810aa4c:	687b      	ldr	r3, [r7, #4]
 810aa4e:	2201      	movs	r2, #1
 810aa50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810aa54:	687b      	ldr	r3, [r7, #4]
 810aa56:	2201      	movs	r2, #1
 810aa58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810aa5c:	687b      	ldr	r3, [r7, #4]
 810aa5e:	2201      	movs	r2, #1
 810aa60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810aa64:	687b      	ldr	r3, [r7, #4]
 810aa66:	2201      	movs	r2, #1
 810aa68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	2201      	movs	r2, #1
 810aa70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810aa74:	2300      	movs	r3, #0
}
 810aa76:	4618      	mov	r0, r3
 810aa78:	3708      	adds	r7, #8
 810aa7a:	46bd      	mov	sp, r7
 810aa7c:	bd80      	pop	{r7, pc}
	...

0810aa80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 810aa80:	b480      	push	{r7}
 810aa82:	b085      	sub	sp, #20
 810aa84:	af00      	add	r7, sp, #0
 810aa86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810aa88:	687b      	ldr	r3, [r7, #4]
 810aa8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810aa8e:	b2db      	uxtb	r3, r3
 810aa90:	2b01      	cmp	r3, #1
 810aa92:	d001      	beq.n	810aa98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 810aa94:	2301      	movs	r3, #1
 810aa96:	e04c      	b.n	810ab32 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810aa98:	687b      	ldr	r3, [r7, #4]
 810aa9a:	2202      	movs	r2, #2
 810aa9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810aaa0:	687b      	ldr	r3, [r7, #4]
 810aaa2:	681b      	ldr	r3, [r3, #0]
 810aaa4:	4a26      	ldr	r2, [pc, #152]	@ (810ab40 <HAL_TIM_Base_Start+0xc0>)
 810aaa6:	4293      	cmp	r3, r2
 810aaa8:	d022      	beq.n	810aaf0 <HAL_TIM_Base_Start+0x70>
 810aaaa:	687b      	ldr	r3, [r7, #4]
 810aaac:	681b      	ldr	r3, [r3, #0]
 810aaae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aab2:	d01d      	beq.n	810aaf0 <HAL_TIM_Base_Start+0x70>
 810aab4:	687b      	ldr	r3, [r7, #4]
 810aab6:	681b      	ldr	r3, [r3, #0]
 810aab8:	4a22      	ldr	r2, [pc, #136]	@ (810ab44 <HAL_TIM_Base_Start+0xc4>)
 810aaba:	4293      	cmp	r3, r2
 810aabc:	d018      	beq.n	810aaf0 <HAL_TIM_Base_Start+0x70>
 810aabe:	687b      	ldr	r3, [r7, #4]
 810aac0:	681b      	ldr	r3, [r3, #0]
 810aac2:	4a21      	ldr	r2, [pc, #132]	@ (810ab48 <HAL_TIM_Base_Start+0xc8>)
 810aac4:	4293      	cmp	r3, r2
 810aac6:	d013      	beq.n	810aaf0 <HAL_TIM_Base_Start+0x70>
 810aac8:	687b      	ldr	r3, [r7, #4]
 810aaca:	681b      	ldr	r3, [r3, #0]
 810aacc:	4a1f      	ldr	r2, [pc, #124]	@ (810ab4c <HAL_TIM_Base_Start+0xcc>)
 810aace:	4293      	cmp	r3, r2
 810aad0:	d00e      	beq.n	810aaf0 <HAL_TIM_Base_Start+0x70>
 810aad2:	687b      	ldr	r3, [r7, #4]
 810aad4:	681b      	ldr	r3, [r3, #0]
 810aad6:	4a1e      	ldr	r2, [pc, #120]	@ (810ab50 <HAL_TIM_Base_Start+0xd0>)
 810aad8:	4293      	cmp	r3, r2
 810aada:	d009      	beq.n	810aaf0 <HAL_TIM_Base_Start+0x70>
 810aadc:	687b      	ldr	r3, [r7, #4]
 810aade:	681b      	ldr	r3, [r3, #0]
 810aae0:	4a1c      	ldr	r2, [pc, #112]	@ (810ab54 <HAL_TIM_Base_Start+0xd4>)
 810aae2:	4293      	cmp	r3, r2
 810aae4:	d004      	beq.n	810aaf0 <HAL_TIM_Base_Start+0x70>
 810aae6:	687b      	ldr	r3, [r7, #4]
 810aae8:	681b      	ldr	r3, [r3, #0]
 810aaea:	4a1b      	ldr	r2, [pc, #108]	@ (810ab58 <HAL_TIM_Base_Start+0xd8>)
 810aaec:	4293      	cmp	r3, r2
 810aaee:	d115      	bne.n	810ab1c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810aaf0:	687b      	ldr	r3, [r7, #4]
 810aaf2:	681b      	ldr	r3, [r3, #0]
 810aaf4:	689a      	ldr	r2, [r3, #8]
 810aaf6:	4b19      	ldr	r3, [pc, #100]	@ (810ab5c <HAL_TIM_Base_Start+0xdc>)
 810aaf8:	4013      	ands	r3, r2
 810aafa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810aafc:	68fb      	ldr	r3, [r7, #12]
 810aafe:	2b06      	cmp	r3, #6
 810ab00:	d015      	beq.n	810ab2e <HAL_TIM_Base_Start+0xae>
 810ab02:	68fb      	ldr	r3, [r7, #12]
 810ab04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ab08:	d011      	beq.n	810ab2e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810ab0a:	687b      	ldr	r3, [r7, #4]
 810ab0c:	681b      	ldr	r3, [r3, #0]
 810ab0e:	681a      	ldr	r2, [r3, #0]
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	681b      	ldr	r3, [r3, #0]
 810ab14:	f042 0201 	orr.w	r2, r2, #1
 810ab18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ab1a:	e008      	b.n	810ab2e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810ab1c:	687b      	ldr	r3, [r7, #4]
 810ab1e:	681b      	ldr	r3, [r3, #0]
 810ab20:	681a      	ldr	r2, [r3, #0]
 810ab22:	687b      	ldr	r3, [r7, #4]
 810ab24:	681b      	ldr	r3, [r3, #0]
 810ab26:	f042 0201 	orr.w	r2, r2, #1
 810ab2a:	601a      	str	r2, [r3, #0]
 810ab2c:	e000      	b.n	810ab30 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ab2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810ab30:	2300      	movs	r3, #0
}
 810ab32:	4618      	mov	r0, r3
 810ab34:	3714      	adds	r7, #20
 810ab36:	46bd      	mov	sp, r7
 810ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab3c:	4770      	bx	lr
 810ab3e:	bf00      	nop
 810ab40:	40010000 	.word	0x40010000
 810ab44:	40000400 	.word	0x40000400
 810ab48:	40000800 	.word	0x40000800
 810ab4c:	40000c00 	.word	0x40000c00
 810ab50:	40010400 	.word	0x40010400
 810ab54:	40001800 	.word	0x40001800
 810ab58:	40014000 	.word	0x40014000
 810ab5c:	00010007 	.word	0x00010007

0810ab60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810ab60:	b480      	push	{r7}
 810ab62:	b085      	sub	sp, #20
 810ab64:	af00      	add	r7, sp, #0
 810ab66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810ab68:	687b      	ldr	r3, [r7, #4]
 810ab6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ab6e:	b2db      	uxtb	r3, r3
 810ab70:	2b01      	cmp	r3, #1
 810ab72:	d001      	beq.n	810ab78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810ab74:	2301      	movs	r3, #1
 810ab76:	e054      	b.n	810ac22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ab78:	687b      	ldr	r3, [r7, #4]
 810ab7a:	2202      	movs	r2, #2
 810ab7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810ab80:	687b      	ldr	r3, [r7, #4]
 810ab82:	681b      	ldr	r3, [r3, #0]
 810ab84:	68da      	ldr	r2, [r3, #12]
 810ab86:	687b      	ldr	r3, [r7, #4]
 810ab88:	681b      	ldr	r3, [r3, #0]
 810ab8a:	f042 0201 	orr.w	r2, r2, #1
 810ab8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ab90:	687b      	ldr	r3, [r7, #4]
 810ab92:	681b      	ldr	r3, [r3, #0]
 810ab94:	4a26      	ldr	r2, [pc, #152]	@ (810ac30 <HAL_TIM_Base_Start_IT+0xd0>)
 810ab96:	4293      	cmp	r3, r2
 810ab98:	d022      	beq.n	810abe0 <HAL_TIM_Base_Start_IT+0x80>
 810ab9a:	687b      	ldr	r3, [r7, #4]
 810ab9c:	681b      	ldr	r3, [r3, #0]
 810ab9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aba2:	d01d      	beq.n	810abe0 <HAL_TIM_Base_Start_IT+0x80>
 810aba4:	687b      	ldr	r3, [r7, #4]
 810aba6:	681b      	ldr	r3, [r3, #0]
 810aba8:	4a22      	ldr	r2, [pc, #136]	@ (810ac34 <HAL_TIM_Base_Start_IT+0xd4>)
 810abaa:	4293      	cmp	r3, r2
 810abac:	d018      	beq.n	810abe0 <HAL_TIM_Base_Start_IT+0x80>
 810abae:	687b      	ldr	r3, [r7, #4]
 810abb0:	681b      	ldr	r3, [r3, #0]
 810abb2:	4a21      	ldr	r2, [pc, #132]	@ (810ac38 <HAL_TIM_Base_Start_IT+0xd8>)
 810abb4:	4293      	cmp	r3, r2
 810abb6:	d013      	beq.n	810abe0 <HAL_TIM_Base_Start_IT+0x80>
 810abb8:	687b      	ldr	r3, [r7, #4]
 810abba:	681b      	ldr	r3, [r3, #0]
 810abbc:	4a1f      	ldr	r2, [pc, #124]	@ (810ac3c <HAL_TIM_Base_Start_IT+0xdc>)
 810abbe:	4293      	cmp	r3, r2
 810abc0:	d00e      	beq.n	810abe0 <HAL_TIM_Base_Start_IT+0x80>
 810abc2:	687b      	ldr	r3, [r7, #4]
 810abc4:	681b      	ldr	r3, [r3, #0]
 810abc6:	4a1e      	ldr	r2, [pc, #120]	@ (810ac40 <HAL_TIM_Base_Start_IT+0xe0>)
 810abc8:	4293      	cmp	r3, r2
 810abca:	d009      	beq.n	810abe0 <HAL_TIM_Base_Start_IT+0x80>
 810abcc:	687b      	ldr	r3, [r7, #4]
 810abce:	681b      	ldr	r3, [r3, #0]
 810abd0:	4a1c      	ldr	r2, [pc, #112]	@ (810ac44 <HAL_TIM_Base_Start_IT+0xe4>)
 810abd2:	4293      	cmp	r3, r2
 810abd4:	d004      	beq.n	810abe0 <HAL_TIM_Base_Start_IT+0x80>
 810abd6:	687b      	ldr	r3, [r7, #4]
 810abd8:	681b      	ldr	r3, [r3, #0]
 810abda:	4a1b      	ldr	r2, [pc, #108]	@ (810ac48 <HAL_TIM_Base_Start_IT+0xe8>)
 810abdc:	4293      	cmp	r3, r2
 810abde:	d115      	bne.n	810ac0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810abe0:	687b      	ldr	r3, [r7, #4]
 810abe2:	681b      	ldr	r3, [r3, #0]
 810abe4:	689a      	ldr	r2, [r3, #8]
 810abe6:	4b19      	ldr	r3, [pc, #100]	@ (810ac4c <HAL_TIM_Base_Start_IT+0xec>)
 810abe8:	4013      	ands	r3, r2
 810abea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810abec:	68fb      	ldr	r3, [r7, #12]
 810abee:	2b06      	cmp	r3, #6
 810abf0:	d015      	beq.n	810ac1e <HAL_TIM_Base_Start_IT+0xbe>
 810abf2:	68fb      	ldr	r3, [r7, #12]
 810abf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810abf8:	d011      	beq.n	810ac1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810abfa:	687b      	ldr	r3, [r7, #4]
 810abfc:	681b      	ldr	r3, [r3, #0]
 810abfe:	681a      	ldr	r2, [r3, #0]
 810ac00:	687b      	ldr	r3, [r7, #4]
 810ac02:	681b      	ldr	r3, [r3, #0]
 810ac04:	f042 0201 	orr.w	r2, r2, #1
 810ac08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ac0a:	e008      	b.n	810ac1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810ac0c:	687b      	ldr	r3, [r7, #4]
 810ac0e:	681b      	ldr	r3, [r3, #0]
 810ac10:	681a      	ldr	r2, [r3, #0]
 810ac12:	687b      	ldr	r3, [r7, #4]
 810ac14:	681b      	ldr	r3, [r3, #0]
 810ac16:	f042 0201 	orr.w	r2, r2, #1
 810ac1a:	601a      	str	r2, [r3, #0]
 810ac1c:	e000      	b.n	810ac20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ac1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810ac20:	2300      	movs	r3, #0
}
 810ac22:	4618      	mov	r0, r3
 810ac24:	3714      	adds	r7, #20
 810ac26:	46bd      	mov	sp, r7
 810ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac2c:	4770      	bx	lr
 810ac2e:	bf00      	nop
 810ac30:	40010000 	.word	0x40010000
 810ac34:	40000400 	.word	0x40000400
 810ac38:	40000800 	.word	0x40000800
 810ac3c:	40000c00 	.word	0x40000c00
 810ac40:	40010400 	.word	0x40010400
 810ac44:	40001800 	.word	0x40001800
 810ac48:	40014000 	.word	0x40014000
 810ac4c:	00010007 	.word	0x00010007

0810ac50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810ac50:	b580      	push	{r7, lr}
 810ac52:	b082      	sub	sp, #8
 810ac54:	af00      	add	r7, sp, #0
 810ac56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ac58:	687b      	ldr	r3, [r7, #4]
 810ac5a:	2b00      	cmp	r3, #0
 810ac5c:	d101      	bne.n	810ac62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810ac5e:	2301      	movs	r3, #1
 810ac60:	e049      	b.n	810acf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ac62:	687b      	ldr	r3, [r7, #4]
 810ac64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ac68:	b2db      	uxtb	r3, r3
 810ac6a:	2b00      	cmp	r3, #0
 810ac6c:	d106      	bne.n	810ac7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ac6e:	687b      	ldr	r3, [r7, #4]
 810ac70:	2200      	movs	r2, #0
 810ac72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810ac76:	6878      	ldr	r0, [r7, #4]
 810ac78:	f000 f841 	bl	810acfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ac7c:	687b      	ldr	r3, [r7, #4]
 810ac7e:	2202      	movs	r2, #2
 810ac80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ac84:	687b      	ldr	r3, [r7, #4]
 810ac86:	681a      	ldr	r2, [r3, #0]
 810ac88:	687b      	ldr	r3, [r7, #4]
 810ac8a:	3304      	adds	r3, #4
 810ac8c:	4619      	mov	r1, r3
 810ac8e:	4610      	mov	r0, r2
 810ac90:	f000 fd30 	bl	810b6f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ac94:	687b      	ldr	r3, [r7, #4]
 810ac96:	2201      	movs	r2, #1
 810ac98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ac9c:	687b      	ldr	r3, [r7, #4]
 810ac9e:	2201      	movs	r2, #1
 810aca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810aca4:	687b      	ldr	r3, [r7, #4]
 810aca6:	2201      	movs	r2, #1
 810aca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810acac:	687b      	ldr	r3, [r7, #4]
 810acae:	2201      	movs	r2, #1
 810acb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810acb4:	687b      	ldr	r3, [r7, #4]
 810acb6:	2201      	movs	r2, #1
 810acb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810acbc:	687b      	ldr	r3, [r7, #4]
 810acbe:	2201      	movs	r2, #1
 810acc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810acc4:	687b      	ldr	r3, [r7, #4]
 810acc6:	2201      	movs	r2, #1
 810acc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810accc:	687b      	ldr	r3, [r7, #4]
 810acce:	2201      	movs	r2, #1
 810acd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810acd4:	687b      	ldr	r3, [r7, #4]
 810acd6:	2201      	movs	r2, #1
 810acd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810acdc:	687b      	ldr	r3, [r7, #4]
 810acde:	2201      	movs	r2, #1
 810ace0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810ace4:	687b      	ldr	r3, [r7, #4]
 810ace6:	2201      	movs	r2, #1
 810ace8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810acec:	687b      	ldr	r3, [r7, #4]
 810acee:	2201      	movs	r2, #1
 810acf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810acf4:	2300      	movs	r3, #0
}
 810acf6:	4618      	mov	r0, r3
 810acf8:	3708      	adds	r7, #8
 810acfa:	46bd      	mov	sp, r7
 810acfc:	bd80      	pop	{r7, pc}

0810acfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810acfe:	b480      	push	{r7}
 810ad00:	b083      	sub	sp, #12
 810ad02:	af00      	add	r7, sp, #0
 810ad04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810ad06:	bf00      	nop
 810ad08:	370c      	adds	r7, #12
 810ad0a:	46bd      	mov	sp, r7
 810ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad10:	4770      	bx	lr
	...

0810ad14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810ad14:	b580      	push	{r7, lr}
 810ad16:	b084      	sub	sp, #16
 810ad18:	af00      	add	r7, sp, #0
 810ad1a:	6078      	str	r0, [r7, #4]
 810ad1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810ad1e:	683b      	ldr	r3, [r7, #0]
 810ad20:	2b00      	cmp	r3, #0
 810ad22:	d109      	bne.n	810ad38 <HAL_TIM_PWM_Start+0x24>
 810ad24:	687b      	ldr	r3, [r7, #4]
 810ad26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 810ad2a:	b2db      	uxtb	r3, r3
 810ad2c:	2b01      	cmp	r3, #1
 810ad2e:	bf14      	ite	ne
 810ad30:	2301      	movne	r3, #1
 810ad32:	2300      	moveq	r3, #0
 810ad34:	b2db      	uxtb	r3, r3
 810ad36:	e03c      	b.n	810adb2 <HAL_TIM_PWM_Start+0x9e>
 810ad38:	683b      	ldr	r3, [r7, #0]
 810ad3a:	2b04      	cmp	r3, #4
 810ad3c:	d109      	bne.n	810ad52 <HAL_TIM_PWM_Start+0x3e>
 810ad3e:	687b      	ldr	r3, [r7, #4]
 810ad40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 810ad44:	b2db      	uxtb	r3, r3
 810ad46:	2b01      	cmp	r3, #1
 810ad48:	bf14      	ite	ne
 810ad4a:	2301      	movne	r3, #1
 810ad4c:	2300      	moveq	r3, #0
 810ad4e:	b2db      	uxtb	r3, r3
 810ad50:	e02f      	b.n	810adb2 <HAL_TIM_PWM_Start+0x9e>
 810ad52:	683b      	ldr	r3, [r7, #0]
 810ad54:	2b08      	cmp	r3, #8
 810ad56:	d109      	bne.n	810ad6c <HAL_TIM_PWM_Start+0x58>
 810ad58:	687b      	ldr	r3, [r7, #4]
 810ad5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810ad5e:	b2db      	uxtb	r3, r3
 810ad60:	2b01      	cmp	r3, #1
 810ad62:	bf14      	ite	ne
 810ad64:	2301      	movne	r3, #1
 810ad66:	2300      	moveq	r3, #0
 810ad68:	b2db      	uxtb	r3, r3
 810ad6a:	e022      	b.n	810adb2 <HAL_TIM_PWM_Start+0x9e>
 810ad6c:	683b      	ldr	r3, [r7, #0]
 810ad6e:	2b0c      	cmp	r3, #12
 810ad70:	d109      	bne.n	810ad86 <HAL_TIM_PWM_Start+0x72>
 810ad72:	687b      	ldr	r3, [r7, #4]
 810ad74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810ad78:	b2db      	uxtb	r3, r3
 810ad7a:	2b01      	cmp	r3, #1
 810ad7c:	bf14      	ite	ne
 810ad7e:	2301      	movne	r3, #1
 810ad80:	2300      	moveq	r3, #0
 810ad82:	b2db      	uxtb	r3, r3
 810ad84:	e015      	b.n	810adb2 <HAL_TIM_PWM_Start+0x9e>
 810ad86:	683b      	ldr	r3, [r7, #0]
 810ad88:	2b10      	cmp	r3, #16
 810ad8a:	d109      	bne.n	810ada0 <HAL_TIM_PWM_Start+0x8c>
 810ad8c:	687b      	ldr	r3, [r7, #4]
 810ad8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810ad92:	b2db      	uxtb	r3, r3
 810ad94:	2b01      	cmp	r3, #1
 810ad96:	bf14      	ite	ne
 810ad98:	2301      	movne	r3, #1
 810ad9a:	2300      	moveq	r3, #0
 810ad9c:	b2db      	uxtb	r3, r3
 810ad9e:	e008      	b.n	810adb2 <HAL_TIM_PWM_Start+0x9e>
 810ada0:	687b      	ldr	r3, [r7, #4]
 810ada2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 810ada6:	b2db      	uxtb	r3, r3
 810ada8:	2b01      	cmp	r3, #1
 810adaa:	bf14      	ite	ne
 810adac:	2301      	movne	r3, #1
 810adae:	2300      	moveq	r3, #0
 810adb0:	b2db      	uxtb	r3, r3
 810adb2:	2b00      	cmp	r3, #0
 810adb4:	d001      	beq.n	810adba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810adb6:	2301      	movs	r3, #1
 810adb8:	e0a1      	b.n	810aefe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810adba:	683b      	ldr	r3, [r7, #0]
 810adbc:	2b00      	cmp	r3, #0
 810adbe:	d104      	bne.n	810adca <HAL_TIM_PWM_Start+0xb6>
 810adc0:	687b      	ldr	r3, [r7, #4]
 810adc2:	2202      	movs	r2, #2
 810adc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810adc8:	e023      	b.n	810ae12 <HAL_TIM_PWM_Start+0xfe>
 810adca:	683b      	ldr	r3, [r7, #0]
 810adcc:	2b04      	cmp	r3, #4
 810adce:	d104      	bne.n	810adda <HAL_TIM_PWM_Start+0xc6>
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	2202      	movs	r2, #2
 810add4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810add8:	e01b      	b.n	810ae12 <HAL_TIM_PWM_Start+0xfe>
 810adda:	683b      	ldr	r3, [r7, #0]
 810addc:	2b08      	cmp	r3, #8
 810adde:	d104      	bne.n	810adea <HAL_TIM_PWM_Start+0xd6>
 810ade0:	687b      	ldr	r3, [r7, #4]
 810ade2:	2202      	movs	r2, #2
 810ade4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ade8:	e013      	b.n	810ae12 <HAL_TIM_PWM_Start+0xfe>
 810adea:	683b      	ldr	r3, [r7, #0]
 810adec:	2b0c      	cmp	r3, #12
 810adee:	d104      	bne.n	810adfa <HAL_TIM_PWM_Start+0xe6>
 810adf0:	687b      	ldr	r3, [r7, #4]
 810adf2:	2202      	movs	r2, #2
 810adf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810adf8:	e00b      	b.n	810ae12 <HAL_TIM_PWM_Start+0xfe>
 810adfa:	683b      	ldr	r3, [r7, #0]
 810adfc:	2b10      	cmp	r3, #16
 810adfe:	d104      	bne.n	810ae0a <HAL_TIM_PWM_Start+0xf6>
 810ae00:	687b      	ldr	r3, [r7, #4]
 810ae02:	2202      	movs	r2, #2
 810ae04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ae08:	e003      	b.n	810ae12 <HAL_TIM_PWM_Start+0xfe>
 810ae0a:	687b      	ldr	r3, [r7, #4]
 810ae0c:	2202      	movs	r2, #2
 810ae0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810ae12:	687b      	ldr	r3, [r7, #4]
 810ae14:	681b      	ldr	r3, [r3, #0]
 810ae16:	2201      	movs	r2, #1
 810ae18:	6839      	ldr	r1, [r7, #0]
 810ae1a:	4618      	mov	r0, r3
 810ae1c:	f001 f882 	bl	810bf24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810ae20:	687b      	ldr	r3, [r7, #4]
 810ae22:	681b      	ldr	r3, [r3, #0]
 810ae24:	4a38      	ldr	r2, [pc, #224]	@ (810af08 <HAL_TIM_PWM_Start+0x1f4>)
 810ae26:	4293      	cmp	r3, r2
 810ae28:	d013      	beq.n	810ae52 <HAL_TIM_PWM_Start+0x13e>
 810ae2a:	687b      	ldr	r3, [r7, #4]
 810ae2c:	681b      	ldr	r3, [r3, #0]
 810ae2e:	4a37      	ldr	r2, [pc, #220]	@ (810af0c <HAL_TIM_PWM_Start+0x1f8>)
 810ae30:	4293      	cmp	r3, r2
 810ae32:	d00e      	beq.n	810ae52 <HAL_TIM_PWM_Start+0x13e>
 810ae34:	687b      	ldr	r3, [r7, #4]
 810ae36:	681b      	ldr	r3, [r3, #0]
 810ae38:	4a35      	ldr	r2, [pc, #212]	@ (810af10 <HAL_TIM_PWM_Start+0x1fc>)
 810ae3a:	4293      	cmp	r3, r2
 810ae3c:	d009      	beq.n	810ae52 <HAL_TIM_PWM_Start+0x13e>
 810ae3e:	687b      	ldr	r3, [r7, #4]
 810ae40:	681b      	ldr	r3, [r3, #0]
 810ae42:	4a34      	ldr	r2, [pc, #208]	@ (810af14 <HAL_TIM_PWM_Start+0x200>)
 810ae44:	4293      	cmp	r3, r2
 810ae46:	d004      	beq.n	810ae52 <HAL_TIM_PWM_Start+0x13e>
 810ae48:	687b      	ldr	r3, [r7, #4]
 810ae4a:	681b      	ldr	r3, [r3, #0]
 810ae4c:	4a32      	ldr	r2, [pc, #200]	@ (810af18 <HAL_TIM_PWM_Start+0x204>)
 810ae4e:	4293      	cmp	r3, r2
 810ae50:	d101      	bne.n	810ae56 <HAL_TIM_PWM_Start+0x142>
 810ae52:	2301      	movs	r3, #1
 810ae54:	e000      	b.n	810ae58 <HAL_TIM_PWM_Start+0x144>
 810ae56:	2300      	movs	r3, #0
 810ae58:	2b00      	cmp	r3, #0
 810ae5a:	d007      	beq.n	810ae6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810ae5c:	687b      	ldr	r3, [r7, #4]
 810ae5e:	681b      	ldr	r3, [r3, #0]
 810ae60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810ae62:	687b      	ldr	r3, [r7, #4]
 810ae64:	681b      	ldr	r3, [r3, #0]
 810ae66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810ae6a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ae6c:	687b      	ldr	r3, [r7, #4]
 810ae6e:	681b      	ldr	r3, [r3, #0]
 810ae70:	4a25      	ldr	r2, [pc, #148]	@ (810af08 <HAL_TIM_PWM_Start+0x1f4>)
 810ae72:	4293      	cmp	r3, r2
 810ae74:	d022      	beq.n	810aebc <HAL_TIM_PWM_Start+0x1a8>
 810ae76:	687b      	ldr	r3, [r7, #4]
 810ae78:	681b      	ldr	r3, [r3, #0]
 810ae7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ae7e:	d01d      	beq.n	810aebc <HAL_TIM_PWM_Start+0x1a8>
 810ae80:	687b      	ldr	r3, [r7, #4]
 810ae82:	681b      	ldr	r3, [r3, #0]
 810ae84:	4a25      	ldr	r2, [pc, #148]	@ (810af1c <HAL_TIM_PWM_Start+0x208>)
 810ae86:	4293      	cmp	r3, r2
 810ae88:	d018      	beq.n	810aebc <HAL_TIM_PWM_Start+0x1a8>
 810ae8a:	687b      	ldr	r3, [r7, #4]
 810ae8c:	681b      	ldr	r3, [r3, #0]
 810ae8e:	4a24      	ldr	r2, [pc, #144]	@ (810af20 <HAL_TIM_PWM_Start+0x20c>)
 810ae90:	4293      	cmp	r3, r2
 810ae92:	d013      	beq.n	810aebc <HAL_TIM_PWM_Start+0x1a8>
 810ae94:	687b      	ldr	r3, [r7, #4]
 810ae96:	681b      	ldr	r3, [r3, #0]
 810ae98:	4a22      	ldr	r2, [pc, #136]	@ (810af24 <HAL_TIM_PWM_Start+0x210>)
 810ae9a:	4293      	cmp	r3, r2
 810ae9c:	d00e      	beq.n	810aebc <HAL_TIM_PWM_Start+0x1a8>
 810ae9e:	687b      	ldr	r3, [r7, #4]
 810aea0:	681b      	ldr	r3, [r3, #0]
 810aea2:	4a1a      	ldr	r2, [pc, #104]	@ (810af0c <HAL_TIM_PWM_Start+0x1f8>)
 810aea4:	4293      	cmp	r3, r2
 810aea6:	d009      	beq.n	810aebc <HAL_TIM_PWM_Start+0x1a8>
 810aea8:	687b      	ldr	r3, [r7, #4]
 810aeaa:	681b      	ldr	r3, [r3, #0]
 810aeac:	4a1e      	ldr	r2, [pc, #120]	@ (810af28 <HAL_TIM_PWM_Start+0x214>)
 810aeae:	4293      	cmp	r3, r2
 810aeb0:	d004      	beq.n	810aebc <HAL_TIM_PWM_Start+0x1a8>
 810aeb2:	687b      	ldr	r3, [r7, #4]
 810aeb4:	681b      	ldr	r3, [r3, #0]
 810aeb6:	4a16      	ldr	r2, [pc, #88]	@ (810af10 <HAL_TIM_PWM_Start+0x1fc>)
 810aeb8:	4293      	cmp	r3, r2
 810aeba:	d115      	bne.n	810aee8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810aebc:	687b      	ldr	r3, [r7, #4]
 810aebe:	681b      	ldr	r3, [r3, #0]
 810aec0:	689a      	ldr	r2, [r3, #8]
 810aec2:	4b1a      	ldr	r3, [pc, #104]	@ (810af2c <HAL_TIM_PWM_Start+0x218>)
 810aec4:	4013      	ands	r3, r2
 810aec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810aec8:	68fb      	ldr	r3, [r7, #12]
 810aeca:	2b06      	cmp	r3, #6
 810aecc:	d015      	beq.n	810aefa <HAL_TIM_PWM_Start+0x1e6>
 810aece:	68fb      	ldr	r3, [r7, #12]
 810aed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810aed4:	d011      	beq.n	810aefa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810aed6:	687b      	ldr	r3, [r7, #4]
 810aed8:	681b      	ldr	r3, [r3, #0]
 810aeda:	681a      	ldr	r2, [r3, #0]
 810aedc:	687b      	ldr	r3, [r7, #4]
 810aede:	681b      	ldr	r3, [r3, #0]
 810aee0:	f042 0201 	orr.w	r2, r2, #1
 810aee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810aee6:	e008      	b.n	810aefa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810aee8:	687b      	ldr	r3, [r7, #4]
 810aeea:	681b      	ldr	r3, [r3, #0]
 810aeec:	681a      	ldr	r2, [r3, #0]
 810aeee:	687b      	ldr	r3, [r7, #4]
 810aef0:	681b      	ldr	r3, [r3, #0]
 810aef2:	f042 0201 	orr.w	r2, r2, #1
 810aef6:	601a      	str	r2, [r3, #0]
 810aef8:	e000      	b.n	810aefc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810aefa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810aefc:	2300      	movs	r3, #0
}
 810aefe:	4618      	mov	r0, r3
 810af00:	3710      	adds	r7, #16
 810af02:	46bd      	mov	sp, r7
 810af04:	bd80      	pop	{r7, pc}
 810af06:	bf00      	nop
 810af08:	40010000 	.word	0x40010000
 810af0c:	40010400 	.word	0x40010400
 810af10:	40014000 	.word	0x40014000
 810af14:	40014400 	.word	0x40014400
 810af18:	40014800 	.word	0x40014800
 810af1c:	40000400 	.word	0x40000400
 810af20:	40000800 	.word	0x40000800
 810af24:	40000c00 	.word	0x40000c00
 810af28:	40001800 	.word	0x40001800
 810af2c:	00010007 	.word	0x00010007

0810af30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 810af30:	b580      	push	{r7, lr}
 810af32:	b086      	sub	sp, #24
 810af34:	af00      	add	r7, sp, #0
 810af36:	6078      	str	r0, [r7, #4]
 810af38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 810af3a:	687b      	ldr	r3, [r7, #4]
 810af3c:	2b00      	cmp	r3, #0
 810af3e:	d101      	bne.n	810af44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 810af40:	2301      	movs	r3, #1
 810af42:	e097      	b.n	810b074 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 810af44:	687b      	ldr	r3, [r7, #4]
 810af46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810af4a:	b2db      	uxtb	r3, r3
 810af4c:	2b00      	cmp	r3, #0
 810af4e:	d106      	bne.n	810af5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810af50:	687b      	ldr	r3, [r7, #4]
 810af52:	2200      	movs	r2, #0
 810af54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 810af58:	6878      	ldr	r0, [r7, #4]
 810af5a:	f7f8 fe97 	bl	8103c8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810af5e:	687b      	ldr	r3, [r7, #4]
 810af60:	2202      	movs	r2, #2
 810af62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810af66:	687b      	ldr	r3, [r7, #4]
 810af68:	681b      	ldr	r3, [r3, #0]
 810af6a:	689b      	ldr	r3, [r3, #8]
 810af6c:	687a      	ldr	r2, [r7, #4]
 810af6e:	6812      	ldr	r2, [r2, #0]
 810af70:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 810af74:	f023 0307 	bic.w	r3, r3, #7
 810af78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810af7a:	687b      	ldr	r3, [r7, #4]
 810af7c:	681a      	ldr	r2, [r3, #0]
 810af7e:	687b      	ldr	r3, [r7, #4]
 810af80:	3304      	adds	r3, #4
 810af82:	4619      	mov	r1, r3
 810af84:	4610      	mov	r0, r2
 810af86:	f000 fbb5 	bl	810b6f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810af8a:	687b      	ldr	r3, [r7, #4]
 810af8c:	681b      	ldr	r3, [r3, #0]
 810af8e:	689b      	ldr	r3, [r3, #8]
 810af90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810af92:	687b      	ldr	r3, [r7, #4]
 810af94:	681b      	ldr	r3, [r3, #0]
 810af96:	699b      	ldr	r3, [r3, #24]
 810af98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810af9a:	687b      	ldr	r3, [r7, #4]
 810af9c:	681b      	ldr	r3, [r3, #0]
 810af9e:	6a1b      	ldr	r3, [r3, #32]
 810afa0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810afa2:	683b      	ldr	r3, [r7, #0]
 810afa4:	681b      	ldr	r3, [r3, #0]
 810afa6:	697a      	ldr	r2, [r7, #20]
 810afa8:	4313      	orrs	r3, r2
 810afaa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 810afac:	693b      	ldr	r3, [r7, #16]
 810afae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810afb2:	f023 0303 	bic.w	r3, r3, #3
 810afb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 810afb8:	683b      	ldr	r3, [r7, #0]
 810afba:	689a      	ldr	r2, [r3, #8]
 810afbc:	683b      	ldr	r3, [r7, #0]
 810afbe:	699b      	ldr	r3, [r3, #24]
 810afc0:	021b      	lsls	r3, r3, #8
 810afc2:	4313      	orrs	r3, r2
 810afc4:	693a      	ldr	r2, [r7, #16]
 810afc6:	4313      	orrs	r3, r2
 810afc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810afca:	693b      	ldr	r3, [r7, #16]
 810afcc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 810afd0:	f023 030c 	bic.w	r3, r3, #12
 810afd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810afd6:	693b      	ldr	r3, [r7, #16]
 810afd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810afdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810afe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810afe2:	683b      	ldr	r3, [r7, #0]
 810afe4:	68da      	ldr	r2, [r3, #12]
 810afe6:	683b      	ldr	r3, [r7, #0]
 810afe8:	69db      	ldr	r3, [r3, #28]
 810afea:	021b      	lsls	r3, r3, #8
 810afec:	4313      	orrs	r3, r2
 810afee:	693a      	ldr	r2, [r7, #16]
 810aff0:	4313      	orrs	r3, r2
 810aff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 810aff4:	683b      	ldr	r3, [r7, #0]
 810aff6:	691b      	ldr	r3, [r3, #16]
 810aff8:	011a      	lsls	r2, r3, #4
 810affa:	683b      	ldr	r3, [r7, #0]
 810affc:	6a1b      	ldr	r3, [r3, #32]
 810affe:	031b      	lsls	r3, r3, #12
 810b000:	4313      	orrs	r3, r2
 810b002:	693a      	ldr	r2, [r7, #16]
 810b004:	4313      	orrs	r3, r2
 810b006:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 810b008:	68fb      	ldr	r3, [r7, #12]
 810b00a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 810b00e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 810b010:	68fb      	ldr	r3, [r7, #12]
 810b012:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 810b016:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 810b018:	683b      	ldr	r3, [r7, #0]
 810b01a:	685a      	ldr	r2, [r3, #4]
 810b01c:	683b      	ldr	r3, [r7, #0]
 810b01e:	695b      	ldr	r3, [r3, #20]
 810b020:	011b      	lsls	r3, r3, #4
 810b022:	4313      	orrs	r3, r2
 810b024:	68fa      	ldr	r2, [r7, #12]
 810b026:	4313      	orrs	r3, r2
 810b028:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810b02a:	687b      	ldr	r3, [r7, #4]
 810b02c:	681b      	ldr	r3, [r3, #0]
 810b02e:	697a      	ldr	r2, [r7, #20]
 810b030:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810b032:	687b      	ldr	r3, [r7, #4]
 810b034:	681b      	ldr	r3, [r3, #0]
 810b036:	693a      	ldr	r2, [r7, #16]
 810b038:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 810b03a:	687b      	ldr	r3, [r7, #4]
 810b03c:	681b      	ldr	r3, [r3, #0]
 810b03e:	68fa      	ldr	r2, [r7, #12]
 810b040:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810b042:	687b      	ldr	r3, [r7, #4]
 810b044:	2201      	movs	r2, #1
 810b046:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810b04a:	687b      	ldr	r3, [r7, #4]
 810b04c:	2201      	movs	r2, #1
 810b04e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810b052:	687b      	ldr	r3, [r7, #4]
 810b054:	2201      	movs	r2, #1
 810b056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810b05a:	687b      	ldr	r3, [r7, #4]
 810b05c:	2201      	movs	r2, #1
 810b05e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810b062:	687b      	ldr	r3, [r7, #4]
 810b064:	2201      	movs	r2, #1
 810b066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810b06a:	687b      	ldr	r3, [r7, #4]
 810b06c:	2201      	movs	r2, #1
 810b06e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810b072:	2300      	movs	r3, #0
}
 810b074:	4618      	mov	r0, r3
 810b076:	3718      	adds	r7, #24
 810b078:	46bd      	mov	sp, r7
 810b07a:	bd80      	pop	{r7, pc}

0810b07c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810b07c:	b580      	push	{r7, lr}
 810b07e:	b084      	sub	sp, #16
 810b080:	af00      	add	r7, sp, #0
 810b082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810b084:	687b      	ldr	r3, [r7, #4]
 810b086:	681b      	ldr	r3, [r3, #0]
 810b088:	68db      	ldr	r3, [r3, #12]
 810b08a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810b08c:	687b      	ldr	r3, [r7, #4]
 810b08e:	681b      	ldr	r3, [r3, #0]
 810b090:	691b      	ldr	r3, [r3, #16]
 810b092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810b094:	68bb      	ldr	r3, [r7, #8]
 810b096:	f003 0302 	and.w	r3, r3, #2
 810b09a:	2b00      	cmp	r3, #0
 810b09c:	d020      	beq.n	810b0e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810b09e:	68fb      	ldr	r3, [r7, #12]
 810b0a0:	f003 0302 	and.w	r3, r3, #2
 810b0a4:	2b00      	cmp	r3, #0
 810b0a6:	d01b      	beq.n	810b0e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810b0a8:	687b      	ldr	r3, [r7, #4]
 810b0aa:	681b      	ldr	r3, [r3, #0]
 810b0ac:	f06f 0202 	mvn.w	r2, #2
 810b0b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810b0b2:	687b      	ldr	r3, [r7, #4]
 810b0b4:	2201      	movs	r2, #1
 810b0b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810b0b8:	687b      	ldr	r3, [r7, #4]
 810b0ba:	681b      	ldr	r3, [r3, #0]
 810b0bc:	699b      	ldr	r3, [r3, #24]
 810b0be:	f003 0303 	and.w	r3, r3, #3
 810b0c2:	2b00      	cmp	r3, #0
 810b0c4:	d003      	beq.n	810b0ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810b0c6:	6878      	ldr	r0, [r7, #4]
 810b0c8:	f000 faf6 	bl	810b6b8 <HAL_TIM_IC_CaptureCallback>
 810b0cc:	e005      	b.n	810b0da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810b0ce:	6878      	ldr	r0, [r7, #4]
 810b0d0:	f000 fae8 	bl	810b6a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b0d4:	6878      	ldr	r0, [r7, #4]
 810b0d6:	f000 faf9 	bl	810b6cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b0da:	687b      	ldr	r3, [r7, #4]
 810b0dc:	2200      	movs	r2, #0
 810b0de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810b0e0:	68bb      	ldr	r3, [r7, #8]
 810b0e2:	f003 0304 	and.w	r3, r3, #4
 810b0e6:	2b00      	cmp	r3, #0
 810b0e8:	d020      	beq.n	810b12c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810b0ea:	68fb      	ldr	r3, [r7, #12]
 810b0ec:	f003 0304 	and.w	r3, r3, #4
 810b0f0:	2b00      	cmp	r3, #0
 810b0f2:	d01b      	beq.n	810b12c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810b0f4:	687b      	ldr	r3, [r7, #4]
 810b0f6:	681b      	ldr	r3, [r3, #0]
 810b0f8:	f06f 0204 	mvn.w	r2, #4
 810b0fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810b0fe:	687b      	ldr	r3, [r7, #4]
 810b100:	2202      	movs	r2, #2
 810b102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810b104:	687b      	ldr	r3, [r7, #4]
 810b106:	681b      	ldr	r3, [r3, #0]
 810b108:	699b      	ldr	r3, [r3, #24]
 810b10a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810b10e:	2b00      	cmp	r3, #0
 810b110:	d003      	beq.n	810b11a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b112:	6878      	ldr	r0, [r7, #4]
 810b114:	f000 fad0 	bl	810b6b8 <HAL_TIM_IC_CaptureCallback>
 810b118:	e005      	b.n	810b126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b11a:	6878      	ldr	r0, [r7, #4]
 810b11c:	f000 fac2 	bl	810b6a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b120:	6878      	ldr	r0, [r7, #4]
 810b122:	f000 fad3 	bl	810b6cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b126:	687b      	ldr	r3, [r7, #4]
 810b128:	2200      	movs	r2, #0
 810b12a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810b12c:	68bb      	ldr	r3, [r7, #8]
 810b12e:	f003 0308 	and.w	r3, r3, #8
 810b132:	2b00      	cmp	r3, #0
 810b134:	d020      	beq.n	810b178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810b136:	68fb      	ldr	r3, [r7, #12]
 810b138:	f003 0308 	and.w	r3, r3, #8
 810b13c:	2b00      	cmp	r3, #0
 810b13e:	d01b      	beq.n	810b178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810b140:	687b      	ldr	r3, [r7, #4]
 810b142:	681b      	ldr	r3, [r3, #0]
 810b144:	f06f 0208 	mvn.w	r2, #8
 810b148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810b14a:	687b      	ldr	r3, [r7, #4]
 810b14c:	2204      	movs	r2, #4
 810b14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810b150:	687b      	ldr	r3, [r7, #4]
 810b152:	681b      	ldr	r3, [r3, #0]
 810b154:	69db      	ldr	r3, [r3, #28]
 810b156:	f003 0303 	and.w	r3, r3, #3
 810b15a:	2b00      	cmp	r3, #0
 810b15c:	d003      	beq.n	810b166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b15e:	6878      	ldr	r0, [r7, #4]
 810b160:	f000 faaa 	bl	810b6b8 <HAL_TIM_IC_CaptureCallback>
 810b164:	e005      	b.n	810b172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b166:	6878      	ldr	r0, [r7, #4]
 810b168:	f000 fa9c 	bl	810b6a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b16c:	6878      	ldr	r0, [r7, #4]
 810b16e:	f000 faad 	bl	810b6cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b172:	687b      	ldr	r3, [r7, #4]
 810b174:	2200      	movs	r2, #0
 810b176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810b178:	68bb      	ldr	r3, [r7, #8]
 810b17a:	f003 0310 	and.w	r3, r3, #16
 810b17e:	2b00      	cmp	r3, #0
 810b180:	d020      	beq.n	810b1c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810b182:	68fb      	ldr	r3, [r7, #12]
 810b184:	f003 0310 	and.w	r3, r3, #16
 810b188:	2b00      	cmp	r3, #0
 810b18a:	d01b      	beq.n	810b1c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810b18c:	687b      	ldr	r3, [r7, #4]
 810b18e:	681b      	ldr	r3, [r3, #0]
 810b190:	f06f 0210 	mvn.w	r2, #16
 810b194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810b196:	687b      	ldr	r3, [r7, #4]
 810b198:	2208      	movs	r2, #8
 810b19a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810b19c:	687b      	ldr	r3, [r7, #4]
 810b19e:	681b      	ldr	r3, [r3, #0]
 810b1a0:	69db      	ldr	r3, [r3, #28]
 810b1a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810b1a6:	2b00      	cmp	r3, #0
 810b1a8:	d003      	beq.n	810b1b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b1aa:	6878      	ldr	r0, [r7, #4]
 810b1ac:	f000 fa84 	bl	810b6b8 <HAL_TIM_IC_CaptureCallback>
 810b1b0:	e005      	b.n	810b1be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b1b2:	6878      	ldr	r0, [r7, #4]
 810b1b4:	f000 fa76 	bl	810b6a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b1b8:	6878      	ldr	r0, [r7, #4]
 810b1ba:	f000 fa87 	bl	810b6cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b1be:	687b      	ldr	r3, [r7, #4]
 810b1c0:	2200      	movs	r2, #0
 810b1c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810b1c4:	68bb      	ldr	r3, [r7, #8]
 810b1c6:	f003 0301 	and.w	r3, r3, #1
 810b1ca:	2b00      	cmp	r3, #0
 810b1cc:	d00c      	beq.n	810b1e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810b1ce:	68fb      	ldr	r3, [r7, #12]
 810b1d0:	f003 0301 	and.w	r3, r3, #1
 810b1d4:	2b00      	cmp	r3, #0
 810b1d6:	d007      	beq.n	810b1e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810b1d8:	687b      	ldr	r3, [r7, #4]
 810b1da:	681b      	ldr	r3, [r3, #0]
 810b1dc:	f06f 0201 	mvn.w	r2, #1
 810b1e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810b1e2:	6878      	ldr	r0, [r7, #4]
 810b1e4:	f7f8 fa8c 	bl	8103700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810b1e8:	68bb      	ldr	r3, [r7, #8]
 810b1ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b1ee:	2b00      	cmp	r3, #0
 810b1f0:	d104      	bne.n	810b1fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810b1f2:	68bb      	ldr	r3, [r7, #8]
 810b1f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810b1f8:	2b00      	cmp	r3, #0
 810b1fa:	d00c      	beq.n	810b216 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810b1fc:	68fb      	ldr	r3, [r7, #12]
 810b1fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b202:	2b00      	cmp	r3, #0
 810b204:	d007      	beq.n	810b216 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	681b      	ldr	r3, [r3, #0]
 810b20a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810b20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810b210:	6878      	ldr	r0, [r7, #4]
 810b212:	f000 ffc3 	bl	810c19c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810b216:	68bb      	ldr	r3, [r7, #8]
 810b218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b21c:	2b00      	cmp	r3, #0
 810b21e:	d00c      	beq.n	810b23a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810b220:	68fb      	ldr	r3, [r7, #12]
 810b222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b226:	2b00      	cmp	r3, #0
 810b228:	d007      	beq.n	810b23a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810b22a:	687b      	ldr	r3, [r7, #4]
 810b22c:	681b      	ldr	r3, [r3, #0]
 810b22e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810b232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810b234:	6878      	ldr	r0, [r7, #4]
 810b236:	f000 ffbb 	bl	810c1b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810b23a:	68bb      	ldr	r3, [r7, #8]
 810b23c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b240:	2b00      	cmp	r3, #0
 810b242:	d00c      	beq.n	810b25e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810b244:	68fb      	ldr	r3, [r7, #12]
 810b246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b24a:	2b00      	cmp	r3, #0
 810b24c:	d007      	beq.n	810b25e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810b24e:	687b      	ldr	r3, [r7, #4]
 810b250:	681b      	ldr	r3, [r3, #0]
 810b252:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810b256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810b258:	6878      	ldr	r0, [r7, #4]
 810b25a:	f000 fa41 	bl	810b6e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810b25e:	68bb      	ldr	r3, [r7, #8]
 810b260:	f003 0320 	and.w	r3, r3, #32
 810b264:	2b00      	cmp	r3, #0
 810b266:	d00c      	beq.n	810b282 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810b268:	68fb      	ldr	r3, [r7, #12]
 810b26a:	f003 0320 	and.w	r3, r3, #32
 810b26e:	2b00      	cmp	r3, #0
 810b270:	d007      	beq.n	810b282 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810b272:	687b      	ldr	r3, [r7, #4]
 810b274:	681b      	ldr	r3, [r3, #0]
 810b276:	f06f 0220 	mvn.w	r2, #32
 810b27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810b27c:	6878      	ldr	r0, [r7, #4]
 810b27e:	f000 ff83 	bl	810c188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810b282:	bf00      	nop
 810b284:	3710      	adds	r7, #16
 810b286:	46bd      	mov	sp, r7
 810b288:	bd80      	pop	{r7, pc}
	...

0810b28c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810b28c:	b580      	push	{r7, lr}
 810b28e:	b086      	sub	sp, #24
 810b290:	af00      	add	r7, sp, #0
 810b292:	60f8      	str	r0, [r7, #12]
 810b294:	60b9      	str	r1, [r7, #8]
 810b296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810b298:	2300      	movs	r3, #0
 810b29a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810b29c:	68fb      	ldr	r3, [r7, #12]
 810b29e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b2a2:	2b01      	cmp	r3, #1
 810b2a4:	d101      	bne.n	810b2aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 810b2a6:	2302      	movs	r3, #2
 810b2a8:	e0ff      	b.n	810b4aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 810b2aa:	68fb      	ldr	r3, [r7, #12]
 810b2ac:	2201      	movs	r2, #1
 810b2ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810b2b2:	687b      	ldr	r3, [r7, #4]
 810b2b4:	2b14      	cmp	r3, #20
 810b2b6:	f200 80f0 	bhi.w	810b49a <HAL_TIM_PWM_ConfigChannel+0x20e>
 810b2ba:	a201      	add	r2, pc, #4	@ (adr r2, 810b2c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810b2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b2c0:	0810b315 	.word	0x0810b315
 810b2c4:	0810b49b 	.word	0x0810b49b
 810b2c8:	0810b49b 	.word	0x0810b49b
 810b2cc:	0810b49b 	.word	0x0810b49b
 810b2d0:	0810b355 	.word	0x0810b355
 810b2d4:	0810b49b 	.word	0x0810b49b
 810b2d8:	0810b49b 	.word	0x0810b49b
 810b2dc:	0810b49b 	.word	0x0810b49b
 810b2e0:	0810b397 	.word	0x0810b397
 810b2e4:	0810b49b 	.word	0x0810b49b
 810b2e8:	0810b49b 	.word	0x0810b49b
 810b2ec:	0810b49b 	.word	0x0810b49b
 810b2f0:	0810b3d7 	.word	0x0810b3d7
 810b2f4:	0810b49b 	.word	0x0810b49b
 810b2f8:	0810b49b 	.word	0x0810b49b
 810b2fc:	0810b49b 	.word	0x0810b49b
 810b300:	0810b419 	.word	0x0810b419
 810b304:	0810b49b 	.word	0x0810b49b
 810b308:	0810b49b 	.word	0x0810b49b
 810b30c:	0810b49b 	.word	0x0810b49b
 810b310:	0810b459 	.word	0x0810b459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810b314:	68fb      	ldr	r3, [r7, #12]
 810b316:	681b      	ldr	r3, [r3, #0]
 810b318:	68b9      	ldr	r1, [r7, #8]
 810b31a:	4618      	mov	r0, r3
 810b31c:	f000 fa90 	bl	810b840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810b320:	68fb      	ldr	r3, [r7, #12]
 810b322:	681b      	ldr	r3, [r3, #0]
 810b324:	699a      	ldr	r2, [r3, #24]
 810b326:	68fb      	ldr	r3, [r7, #12]
 810b328:	681b      	ldr	r3, [r3, #0]
 810b32a:	f042 0208 	orr.w	r2, r2, #8
 810b32e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810b330:	68fb      	ldr	r3, [r7, #12]
 810b332:	681b      	ldr	r3, [r3, #0]
 810b334:	699a      	ldr	r2, [r3, #24]
 810b336:	68fb      	ldr	r3, [r7, #12]
 810b338:	681b      	ldr	r3, [r3, #0]
 810b33a:	f022 0204 	bic.w	r2, r2, #4
 810b33e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810b340:	68fb      	ldr	r3, [r7, #12]
 810b342:	681b      	ldr	r3, [r3, #0]
 810b344:	6999      	ldr	r1, [r3, #24]
 810b346:	68bb      	ldr	r3, [r7, #8]
 810b348:	691a      	ldr	r2, [r3, #16]
 810b34a:	68fb      	ldr	r3, [r7, #12]
 810b34c:	681b      	ldr	r3, [r3, #0]
 810b34e:	430a      	orrs	r2, r1
 810b350:	619a      	str	r2, [r3, #24]
      break;
 810b352:	e0a5      	b.n	810b4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810b354:	68fb      	ldr	r3, [r7, #12]
 810b356:	681b      	ldr	r3, [r3, #0]
 810b358:	68b9      	ldr	r1, [r7, #8]
 810b35a:	4618      	mov	r0, r3
 810b35c:	f000 fb00 	bl	810b960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810b360:	68fb      	ldr	r3, [r7, #12]
 810b362:	681b      	ldr	r3, [r3, #0]
 810b364:	699a      	ldr	r2, [r3, #24]
 810b366:	68fb      	ldr	r3, [r7, #12]
 810b368:	681b      	ldr	r3, [r3, #0]
 810b36a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b36e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810b370:	68fb      	ldr	r3, [r7, #12]
 810b372:	681b      	ldr	r3, [r3, #0]
 810b374:	699a      	ldr	r2, [r3, #24]
 810b376:	68fb      	ldr	r3, [r7, #12]
 810b378:	681b      	ldr	r3, [r3, #0]
 810b37a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b37e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810b380:	68fb      	ldr	r3, [r7, #12]
 810b382:	681b      	ldr	r3, [r3, #0]
 810b384:	6999      	ldr	r1, [r3, #24]
 810b386:	68bb      	ldr	r3, [r7, #8]
 810b388:	691b      	ldr	r3, [r3, #16]
 810b38a:	021a      	lsls	r2, r3, #8
 810b38c:	68fb      	ldr	r3, [r7, #12]
 810b38e:	681b      	ldr	r3, [r3, #0]
 810b390:	430a      	orrs	r2, r1
 810b392:	619a      	str	r2, [r3, #24]
      break;
 810b394:	e084      	b.n	810b4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810b396:	68fb      	ldr	r3, [r7, #12]
 810b398:	681b      	ldr	r3, [r3, #0]
 810b39a:	68b9      	ldr	r1, [r7, #8]
 810b39c:	4618      	mov	r0, r3
 810b39e:	f000 fb69 	bl	810ba74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810b3a2:	68fb      	ldr	r3, [r7, #12]
 810b3a4:	681b      	ldr	r3, [r3, #0]
 810b3a6:	69da      	ldr	r2, [r3, #28]
 810b3a8:	68fb      	ldr	r3, [r7, #12]
 810b3aa:	681b      	ldr	r3, [r3, #0]
 810b3ac:	f042 0208 	orr.w	r2, r2, #8
 810b3b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810b3b2:	68fb      	ldr	r3, [r7, #12]
 810b3b4:	681b      	ldr	r3, [r3, #0]
 810b3b6:	69da      	ldr	r2, [r3, #28]
 810b3b8:	68fb      	ldr	r3, [r7, #12]
 810b3ba:	681b      	ldr	r3, [r3, #0]
 810b3bc:	f022 0204 	bic.w	r2, r2, #4
 810b3c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810b3c2:	68fb      	ldr	r3, [r7, #12]
 810b3c4:	681b      	ldr	r3, [r3, #0]
 810b3c6:	69d9      	ldr	r1, [r3, #28]
 810b3c8:	68bb      	ldr	r3, [r7, #8]
 810b3ca:	691a      	ldr	r2, [r3, #16]
 810b3cc:	68fb      	ldr	r3, [r7, #12]
 810b3ce:	681b      	ldr	r3, [r3, #0]
 810b3d0:	430a      	orrs	r2, r1
 810b3d2:	61da      	str	r2, [r3, #28]
      break;
 810b3d4:	e064      	b.n	810b4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810b3d6:	68fb      	ldr	r3, [r7, #12]
 810b3d8:	681b      	ldr	r3, [r3, #0]
 810b3da:	68b9      	ldr	r1, [r7, #8]
 810b3dc:	4618      	mov	r0, r3
 810b3de:	f000 fbd1 	bl	810bb84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810b3e2:	68fb      	ldr	r3, [r7, #12]
 810b3e4:	681b      	ldr	r3, [r3, #0]
 810b3e6:	69da      	ldr	r2, [r3, #28]
 810b3e8:	68fb      	ldr	r3, [r7, #12]
 810b3ea:	681b      	ldr	r3, [r3, #0]
 810b3ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b3f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810b3f2:	68fb      	ldr	r3, [r7, #12]
 810b3f4:	681b      	ldr	r3, [r3, #0]
 810b3f6:	69da      	ldr	r2, [r3, #28]
 810b3f8:	68fb      	ldr	r3, [r7, #12]
 810b3fa:	681b      	ldr	r3, [r3, #0]
 810b3fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810b402:	68fb      	ldr	r3, [r7, #12]
 810b404:	681b      	ldr	r3, [r3, #0]
 810b406:	69d9      	ldr	r1, [r3, #28]
 810b408:	68bb      	ldr	r3, [r7, #8]
 810b40a:	691b      	ldr	r3, [r3, #16]
 810b40c:	021a      	lsls	r2, r3, #8
 810b40e:	68fb      	ldr	r3, [r7, #12]
 810b410:	681b      	ldr	r3, [r3, #0]
 810b412:	430a      	orrs	r2, r1
 810b414:	61da      	str	r2, [r3, #28]
      break;
 810b416:	e043      	b.n	810b4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810b418:	68fb      	ldr	r3, [r7, #12]
 810b41a:	681b      	ldr	r3, [r3, #0]
 810b41c:	68b9      	ldr	r1, [r7, #8]
 810b41e:	4618      	mov	r0, r3
 810b420:	f000 fc1a 	bl	810bc58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810b424:	68fb      	ldr	r3, [r7, #12]
 810b426:	681b      	ldr	r3, [r3, #0]
 810b428:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b42a:	68fb      	ldr	r3, [r7, #12]
 810b42c:	681b      	ldr	r3, [r3, #0]
 810b42e:	f042 0208 	orr.w	r2, r2, #8
 810b432:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810b434:	68fb      	ldr	r3, [r7, #12]
 810b436:	681b      	ldr	r3, [r3, #0]
 810b438:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b43a:	68fb      	ldr	r3, [r7, #12]
 810b43c:	681b      	ldr	r3, [r3, #0]
 810b43e:	f022 0204 	bic.w	r2, r2, #4
 810b442:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810b444:	68fb      	ldr	r3, [r7, #12]
 810b446:	681b      	ldr	r3, [r3, #0]
 810b448:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810b44a:	68bb      	ldr	r3, [r7, #8]
 810b44c:	691a      	ldr	r2, [r3, #16]
 810b44e:	68fb      	ldr	r3, [r7, #12]
 810b450:	681b      	ldr	r3, [r3, #0]
 810b452:	430a      	orrs	r2, r1
 810b454:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810b456:	e023      	b.n	810b4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810b458:	68fb      	ldr	r3, [r7, #12]
 810b45a:	681b      	ldr	r3, [r3, #0]
 810b45c:	68b9      	ldr	r1, [r7, #8]
 810b45e:	4618      	mov	r0, r3
 810b460:	f000 fc5e 	bl	810bd20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810b464:	68fb      	ldr	r3, [r7, #12]
 810b466:	681b      	ldr	r3, [r3, #0]
 810b468:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b46a:	68fb      	ldr	r3, [r7, #12]
 810b46c:	681b      	ldr	r3, [r3, #0]
 810b46e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b472:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810b474:	68fb      	ldr	r3, [r7, #12]
 810b476:	681b      	ldr	r3, [r3, #0]
 810b478:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b47a:	68fb      	ldr	r3, [r7, #12]
 810b47c:	681b      	ldr	r3, [r3, #0]
 810b47e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b482:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810b484:	68fb      	ldr	r3, [r7, #12]
 810b486:	681b      	ldr	r3, [r3, #0]
 810b488:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810b48a:	68bb      	ldr	r3, [r7, #8]
 810b48c:	691b      	ldr	r3, [r3, #16]
 810b48e:	021a      	lsls	r2, r3, #8
 810b490:	68fb      	ldr	r3, [r7, #12]
 810b492:	681b      	ldr	r3, [r3, #0]
 810b494:	430a      	orrs	r2, r1
 810b496:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810b498:	e002      	b.n	810b4a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810b49a:	2301      	movs	r3, #1
 810b49c:	75fb      	strb	r3, [r7, #23]
      break;
 810b49e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810b4a0:	68fb      	ldr	r3, [r7, #12]
 810b4a2:	2200      	movs	r2, #0
 810b4a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810b4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 810b4aa:	4618      	mov	r0, r3
 810b4ac:	3718      	adds	r7, #24
 810b4ae:	46bd      	mov	sp, r7
 810b4b0:	bd80      	pop	{r7, pc}
 810b4b2:	bf00      	nop

0810b4b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810b4b4:	b580      	push	{r7, lr}
 810b4b6:	b084      	sub	sp, #16
 810b4b8:	af00      	add	r7, sp, #0
 810b4ba:	6078      	str	r0, [r7, #4]
 810b4bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810b4be:	2300      	movs	r3, #0
 810b4c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810b4c2:	687b      	ldr	r3, [r7, #4]
 810b4c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b4c8:	2b01      	cmp	r3, #1
 810b4ca:	d101      	bne.n	810b4d0 <HAL_TIM_ConfigClockSource+0x1c>
 810b4cc:	2302      	movs	r3, #2
 810b4ce:	e0de      	b.n	810b68e <HAL_TIM_ConfigClockSource+0x1da>
 810b4d0:	687b      	ldr	r3, [r7, #4]
 810b4d2:	2201      	movs	r2, #1
 810b4d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810b4d8:	687b      	ldr	r3, [r7, #4]
 810b4da:	2202      	movs	r2, #2
 810b4dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810b4e0:	687b      	ldr	r3, [r7, #4]
 810b4e2:	681b      	ldr	r3, [r3, #0]
 810b4e4:	689b      	ldr	r3, [r3, #8]
 810b4e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810b4e8:	68bb      	ldr	r3, [r7, #8]
 810b4ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810b4ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810b4f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810b4f4:	68bb      	ldr	r3, [r7, #8]
 810b4f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810b4fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810b4fc:	687b      	ldr	r3, [r7, #4]
 810b4fe:	681b      	ldr	r3, [r3, #0]
 810b500:	68ba      	ldr	r2, [r7, #8]
 810b502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810b504:	683b      	ldr	r3, [r7, #0]
 810b506:	681b      	ldr	r3, [r3, #0]
 810b508:	4a63      	ldr	r2, [pc, #396]	@ (810b698 <HAL_TIM_ConfigClockSource+0x1e4>)
 810b50a:	4293      	cmp	r3, r2
 810b50c:	f000 80a9 	beq.w	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b510:	4a61      	ldr	r2, [pc, #388]	@ (810b698 <HAL_TIM_ConfigClockSource+0x1e4>)
 810b512:	4293      	cmp	r3, r2
 810b514:	f200 80ae 	bhi.w	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b518:	4a60      	ldr	r2, [pc, #384]	@ (810b69c <HAL_TIM_ConfigClockSource+0x1e8>)
 810b51a:	4293      	cmp	r3, r2
 810b51c:	f000 80a1 	beq.w	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b520:	4a5e      	ldr	r2, [pc, #376]	@ (810b69c <HAL_TIM_ConfigClockSource+0x1e8>)
 810b522:	4293      	cmp	r3, r2
 810b524:	f200 80a6 	bhi.w	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b528:	4a5d      	ldr	r2, [pc, #372]	@ (810b6a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 810b52a:	4293      	cmp	r3, r2
 810b52c:	f000 8099 	beq.w	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b530:	4a5b      	ldr	r2, [pc, #364]	@ (810b6a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 810b532:	4293      	cmp	r3, r2
 810b534:	f200 809e 	bhi.w	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b538:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810b53c:	f000 8091 	beq.w	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b540:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810b544:	f200 8096 	bhi.w	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b548:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b54c:	f000 8089 	beq.w	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b554:	f200 808e 	bhi.w	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b55c:	d03e      	beq.n	810b5dc <HAL_TIM_ConfigClockSource+0x128>
 810b55e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b562:	f200 8087 	bhi.w	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b56a:	f000 8086 	beq.w	810b67a <HAL_TIM_ConfigClockSource+0x1c6>
 810b56e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b572:	d87f      	bhi.n	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b574:	2b70      	cmp	r3, #112	@ 0x70
 810b576:	d01a      	beq.n	810b5ae <HAL_TIM_ConfigClockSource+0xfa>
 810b578:	2b70      	cmp	r3, #112	@ 0x70
 810b57a:	d87b      	bhi.n	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b57c:	2b60      	cmp	r3, #96	@ 0x60
 810b57e:	d050      	beq.n	810b622 <HAL_TIM_ConfigClockSource+0x16e>
 810b580:	2b60      	cmp	r3, #96	@ 0x60
 810b582:	d877      	bhi.n	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b584:	2b50      	cmp	r3, #80	@ 0x50
 810b586:	d03c      	beq.n	810b602 <HAL_TIM_ConfigClockSource+0x14e>
 810b588:	2b50      	cmp	r3, #80	@ 0x50
 810b58a:	d873      	bhi.n	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b58c:	2b40      	cmp	r3, #64	@ 0x40
 810b58e:	d058      	beq.n	810b642 <HAL_TIM_ConfigClockSource+0x18e>
 810b590:	2b40      	cmp	r3, #64	@ 0x40
 810b592:	d86f      	bhi.n	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b594:	2b30      	cmp	r3, #48	@ 0x30
 810b596:	d064      	beq.n	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b598:	2b30      	cmp	r3, #48	@ 0x30
 810b59a:	d86b      	bhi.n	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b59c:	2b20      	cmp	r3, #32
 810b59e:	d060      	beq.n	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b5a0:	2b20      	cmp	r3, #32
 810b5a2:	d867      	bhi.n	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
 810b5a4:	2b00      	cmp	r3, #0
 810b5a6:	d05c      	beq.n	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b5a8:	2b10      	cmp	r3, #16
 810b5aa:	d05a      	beq.n	810b662 <HAL_TIM_ConfigClockSource+0x1ae>
 810b5ac:	e062      	b.n	810b674 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810b5ae:	687b      	ldr	r3, [r7, #4]
 810b5b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810b5b2:	683b      	ldr	r3, [r7, #0]
 810b5b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810b5b6:	683b      	ldr	r3, [r7, #0]
 810b5b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810b5ba:	683b      	ldr	r3, [r7, #0]
 810b5bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810b5be:	f000 fc91 	bl	810bee4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810b5c2:	687b      	ldr	r3, [r7, #4]
 810b5c4:	681b      	ldr	r3, [r3, #0]
 810b5c6:	689b      	ldr	r3, [r3, #8]
 810b5c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810b5ca:	68bb      	ldr	r3, [r7, #8]
 810b5cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810b5d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810b5d2:	687b      	ldr	r3, [r7, #4]
 810b5d4:	681b      	ldr	r3, [r3, #0]
 810b5d6:	68ba      	ldr	r2, [r7, #8]
 810b5d8:	609a      	str	r2, [r3, #8]
      break;
 810b5da:	e04f      	b.n	810b67c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810b5e0:	683b      	ldr	r3, [r7, #0]
 810b5e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810b5e4:	683b      	ldr	r3, [r7, #0]
 810b5e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810b5e8:	683b      	ldr	r3, [r7, #0]
 810b5ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810b5ec:	f000 fc7a 	bl	810bee4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810b5f0:	687b      	ldr	r3, [r7, #4]
 810b5f2:	681b      	ldr	r3, [r3, #0]
 810b5f4:	689a      	ldr	r2, [r3, #8]
 810b5f6:	687b      	ldr	r3, [r7, #4]
 810b5f8:	681b      	ldr	r3, [r3, #0]
 810b5fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810b5fe:	609a      	str	r2, [r3, #8]
      break;
 810b600:	e03c      	b.n	810b67c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810b602:	687b      	ldr	r3, [r7, #4]
 810b604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b606:	683b      	ldr	r3, [r7, #0]
 810b608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b60a:	683b      	ldr	r3, [r7, #0]
 810b60c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b60e:	461a      	mov	r2, r3
 810b610:	f000 fbec 	bl	810bdec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810b614:	687b      	ldr	r3, [r7, #4]
 810b616:	681b      	ldr	r3, [r3, #0]
 810b618:	2150      	movs	r1, #80	@ 0x50
 810b61a:	4618      	mov	r0, r3
 810b61c:	f000 fc45 	bl	810beaa <TIM_ITRx_SetConfig>
      break;
 810b620:	e02c      	b.n	810b67c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810b622:	687b      	ldr	r3, [r7, #4]
 810b624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b626:	683b      	ldr	r3, [r7, #0]
 810b628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b62a:	683b      	ldr	r3, [r7, #0]
 810b62c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810b62e:	461a      	mov	r2, r3
 810b630:	f000 fc0b 	bl	810be4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810b634:	687b      	ldr	r3, [r7, #4]
 810b636:	681b      	ldr	r3, [r3, #0]
 810b638:	2160      	movs	r1, #96	@ 0x60
 810b63a:	4618      	mov	r0, r3
 810b63c:	f000 fc35 	bl	810beaa <TIM_ITRx_SetConfig>
      break;
 810b640:	e01c      	b.n	810b67c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b646:	683b      	ldr	r3, [r7, #0]
 810b648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b64a:	683b      	ldr	r3, [r7, #0]
 810b64c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b64e:	461a      	mov	r2, r3
 810b650:	f000 fbcc 	bl	810bdec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810b654:	687b      	ldr	r3, [r7, #4]
 810b656:	681b      	ldr	r3, [r3, #0]
 810b658:	2140      	movs	r1, #64	@ 0x40
 810b65a:	4618      	mov	r0, r3
 810b65c:	f000 fc25 	bl	810beaa <TIM_ITRx_SetConfig>
      break;
 810b660:	e00c      	b.n	810b67c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810b662:	687b      	ldr	r3, [r7, #4]
 810b664:	681a      	ldr	r2, [r3, #0]
 810b666:	683b      	ldr	r3, [r7, #0]
 810b668:	681b      	ldr	r3, [r3, #0]
 810b66a:	4619      	mov	r1, r3
 810b66c:	4610      	mov	r0, r2
 810b66e:	f000 fc1c 	bl	810beaa <TIM_ITRx_SetConfig>
      break;
 810b672:	e003      	b.n	810b67c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810b674:	2301      	movs	r3, #1
 810b676:	73fb      	strb	r3, [r7, #15]
      break;
 810b678:	e000      	b.n	810b67c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810b67a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810b67c:	687b      	ldr	r3, [r7, #4]
 810b67e:	2201      	movs	r2, #1
 810b680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810b684:	687b      	ldr	r3, [r7, #4]
 810b686:	2200      	movs	r2, #0
 810b688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 810b68e:	4618      	mov	r0, r3
 810b690:	3710      	adds	r7, #16
 810b692:	46bd      	mov	sp, r7
 810b694:	bd80      	pop	{r7, pc}
 810b696:	bf00      	nop
 810b698:	00100040 	.word	0x00100040
 810b69c:	00100030 	.word	0x00100030
 810b6a0:	00100020 	.word	0x00100020

0810b6a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810b6a4:	b480      	push	{r7}
 810b6a6:	b083      	sub	sp, #12
 810b6a8:	af00      	add	r7, sp, #0
 810b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810b6ac:	bf00      	nop
 810b6ae:	370c      	adds	r7, #12
 810b6b0:	46bd      	mov	sp, r7
 810b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6b6:	4770      	bx	lr

0810b6b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810b6b8:	b480      	push	{r7}
 810b6ba:	b083      	sub	sp, #12
 810b6bc:	af00      	add	r7, sp, #0
 810b6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810b6c0:	bf00      	nop
 810b6c2:	370c      	adds	r7, #12
 810b6c4:	46bd      	mov	sp, r7
 810b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6ca:	4770      	bx	lr

0810b6cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810b6cc:	b480      	push	{r7}
 810b6ce:	b083      	sub	sp, #12
 810b6d0:	af00      	add	r7, sp, #0
 810b6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810b6d4:	bf00      	nop
 810b6d6:	370c      	adds	r7, #12
 810b6d8:	46bd      	mov	sp, r7
 810b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6de:	4770      	bx	lr

0810b6e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810b6e0:	b480      	push	{r7}
 810b6e2:	b083      	sub	sp, #12
 810b6e4:	af00      	add	r7, sp, #0
 810b6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810b6e8:	bf00      	nop
 810b6ea:	370c      	adds	r7, #12
 810b6ec:	46bd      	mov	sp, r7
 810b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6f2:	4770      	bx	lr

0810b6f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810b6f4:	b480      	push	{r7}
 810b6f6:	b085      	sub	sp, #20
 810b6f8:	af00      	add	r7, sp, #0
 810b6fa:	6078      	str	r0, [r7, #4]
 810b6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810b6fe:	687b      	ldr	r3, [r7, #4]
 810b700:	681b      	ldr	r3, [r3, #0]
 810b702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810b704:	687b      	ldr	r3, [r7, #4]
 810b706:	4a46      	ldr	r2, [pc, #280]	@ (810b820 <TIM_Base_SetConfig+0x12c>)
 810b708:	4293      	cmp	r3, r2
 810b70a:	d013      	beq.n	810b734 <TIM_Base_SetConfig+0x40>
 810b70c:	687b      	ldr	r3, [r7, #4]
 810b70e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b712:	d00f      	beq.n	810b734 <TIM_Base_SetConfig+0x40>
 810b714:	687b      	ldr	r3, [r7, #4]
 810b716:	4a43      	ldr	r2, [pc, #268]	@ (810b824 <TIM_Base_SetConfig+0x130>)
 810b718:	4293      	cmp	r3, r2
 810b71a:	d00b      	beq.n	810b734 <TIM_Base_SetConfig+0x40>
 810b71c:	687b      	ldr	r3, [r7, #4]
 810b71e:	4a42      	ldr	r2, [pc, #264]	@ (810b828 <TIM_Base_SetConfig+0x134>)
 810b720:	4293      	cmp	r3, r2
 810b722:	d007      	beq.n	810b734 <TIM_Base_SetConfig+0x40>
 810b724:	687b      	ldr	r3, [r7, #4]
 810b726:	4a41      	ldr	r2, [pc, #260]	@ (810b82c <TIM_Base_SetConfig+0x138>)
 810b728:	4293      	cmp	r3, r2
 810b72a:	d003      	beq.n	810b734 <TIM_Base_SetConfig+0x40>
 810b72c:	687b      	ldr	r3, [r7, #4]
 810b72e:	4a40      	ldr	r2, [pc, #256]	@ (810b830 <TIM_Base_SetConfig+0x13c>)
 810b730:	4293      	cmp	r3, r2
 810b732:	d108      	bne.n	810b746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810b734:	68fb      	ldr	r3, [r7, #12]
 810b736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b73a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810b73c:	683b      	ldr	r3, [r7, #0]
 810b73e:	685b      	ldr	r3, [r3, #4]
 810b740:	68fa      	ldr	r2, [r7, #12]
 810b742:	4313      	orrs	r3, r2
 810b744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810b746:	687b      	ldr	r3, [r7, #4]
 810b748:	4a35      	ldr	r2, [pc, #212]	@ (810b820 <TIM_Base_SetConfig+0x12c>)
 810b74a:	4293      	cmp	r3, r2
 810b74c:	d01f      	beq.n	810b78e <TIM_Base_SetConfig+0x9a>
 810b74e:	687b      	ldr	r3, [r7, #4]
 810b750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b754:	d01b      	beq.n	810b78e <TIM_Base_SetConfig+0x9a>
 810b756:	687b      	ldr	r3, [r7, #4]
 810b758:	4a32      	ldr	r2, [pc, #200]	@ (810b824 <TIM_Base_SetConfig+0x130>)
 810b75a:	4293      	cmp	r3, r2
 810b75c:	d017      	beq.n	810b78e <TIM_Base_SetConfig+0x9a>
 810b75e:	687b      	ldr	r3, [r7, #4]
 810b760:	4a31      	ldr	r2, [pc, #196]	@ (810b828 <TIM_Base_SetConfig+0x134>)
 810b762:	4293      	cmp	r3, r2
 810b764:	d013      	beq.n	810b78e <TIM_Base_SetConfig+0x9a>
 810b766:	687b      	ldr	r3, [r7, #4]
 810b768:	4a30      	ldr	r2, [pc, #192]	@ (810b82c <TIM_Base_SetConfig+0x138>)
 810b76a:	4293      	cmp	r3, r2
 810b76c:	d00f      	beq.n	810b78e <TIM_Base_SetConfig+0x9a>
 810b76e:	687b      	ldr	r3, [r7, #4]
 810b770:	4a2f      	ldr	r2, [pc, #188]	@ (810b830 <TIM_Base_SetConfig+0x13c>)
 810b772:	4293      	cmp	r3, r2
 810b774:	d00b      	beq.n	810b78e <TIM_Base_SetConfig+0x9a>
 810b776:	687b      	ldr	r3, [r7, #4]
 810b778:	4a2e      	ldr	r2, [pc, #184]	@ (810b834 <TIM_Base_SetConfig+0x140>)
 810b77a:	4293      	cmp	r3, r2
 810b77c:	d007      	beq.n	810b78e <TIM_Base_SetConfig+0x9a>
 810b77e:	687b      	ldr	r3, [r7, #4]
 810b780:	4a2d      	ldr	r2, [pc, #180]	@ (810b838 <TIM_Base_SetConfig+0x144>)
 810b782:	4293      	cmp	r3, r2
 810b784:	d003      	beq.n	810b78e <TIM_Base_SetConfig+0x9a>
 810b786:	687b      	ldr	r3, [r7, #4]
 810b788:	4a2c      	ldr	r2, [pc, #176]	@ (810b83c <TIM_Base_SetConfig+0x148>)
 810b78a:	4293      	cmp	r3, r2
 810b78c:	d108      	bne.n	810b7a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810b78e:	68fb      	ldr	r3, [r7, #12]
 810b790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810b796:	683b      	ldr	r3, [r7, #0]
 810b798:	68db      	ldr	r3, [r3, #12]
 810b79a:	68fa      	ldr	r2, [r7, #12]
 810b79c:	4313      	orrs	r3, r2
 810b79e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810b7a0:	68fb      	ldr	r3, [r7, #12]
 810b7a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810b7a6:	683b      	ldr	r3, [r7, #0]
 810b7a8:	695b      	ldr	r3, [r3, #20]
 810b7aa:	4313      	orrs	r3, r2
 810b7ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810b7ae:	687b      	ldr	r3, [r7, #4]
 810b7b0:	68fa      	ldr	r2, [r7, #12]
 810b7b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810b7b4:	683b      	ldr	r3, [r7, #0]
 810b7b6:	689a      	ldr	r2, [r3, #8]
 810b7b8:	687b      	ldr	r3, [r7, #4]
 810b7ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810b7bc:	683b      	ldr	r3, [r7, #0]
 810b7be:	681a      	ldr	r2, [r3, #0]
 810b7c0:	687b      	ldr	r3, [r7, #4]
 810b7c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810b7c4:	687b      	ldr	r3, [r7, #4]
 810b7c6:	4a16      	ldr	r2, [pc, #88]	@ (810b820 <TIM_Base_SetConfig+0x12c>)
 810b7c8:	4293      	cmp	r3, r2
 810b7ca:	d00f      	beq.n	810b7ec <TIM_Base_SetConfig+0xf8>
 810b7cc:	687b      	ldr	r3, [r7, #4]
 810b7ce:	4a18      	ldr	r2, [pc, #96]	@ (810b830 <TIM_Base_SetConfig+0x13c>)
 810b7d0:	4293      	cmp	r3, r2
 810b7d2:	d00b      	beq.n	810b7ec <TIM_Base_SetConfig+0xf8>
 810b7d4:	687b      	ldr	r3, [r7, #4]
 810b7d6:	4a17      	ldr	r2, [pc, #92]	@ (810b834 <TIM_Base_SetConfig+0x140>)
 810b7d8:	4293      	cmp	r3, r2
 810b7da:	d007      	beq.n	810b7ec <TIM_Base_SetConfig+0xf8>
 810b7dc:	687b      	ldr	r3, [r7, #4]
 810b7de:	4a16      	ldr	r2, [pc, #88]	@ (810b838 <TIM_Base_SetConfig+0x144>)
 810b7e0:	4293      	cmp	r3, r2
 810b7e2:	d003      	beq.n	810b7ec <TIM_Base_SetConfig+0xf8>
 810b7e4:	687b      	ldr	r3, [r7, #4]
 810b7e6:	4a15      	ldr	r2, [pc, #84]	@ (810b83c <TIM_Base_SetConfig+0x148>)
 810b7e8:	4293      	cmp	r3, r2
 810b7ea:	d103      	bne.n	810b7f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810b7ec:	683b      	ldr	r3, [r7, #0]
 810b7ee:	691a      	ldr	r2, [r3, #16]
 810b7f0:	687b      	ldr	r3, [r7, #4]
 810b7f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810b7f4:	687b      	ldr	r3, [r7, #4]
 810b7f6:	2201      	movs	r2, #1
 810b7f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810b7fa:	687b      	ldr	r3, [r7, #4]
 810b7fc:	691b      	ldr	r3, [r3, #16]
 810b7fe:	f003 0301 	and.w	r3, r3, #1
 810b802:	2b01      	cmp	r3, #1
 810b804:	d105      	bne.n	810b812 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810b806:	687b      	ldr	r3, [r7, #4]
 810b808:	691b      	ldr	r3, [r3, #16]
 810b80a:	f023 0201 	bic.w	r2, r3, #1
 810b80e:	687b      	ldr	r3, [r7, #4]
 810b810:	611a      	str	r2, [r3, #16]
  }
}
 810b812:	bf00      	nop
 810b814:	3714      	adds	r7, #20
 810b816:	46bd      	mov	sp, r7
 810b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b81c:	4770      	bx	lr
 810b81e:	bf00      	nop
 810b820:	40010000 	.word	0x40010000
 810b824:	40000400 	.word	0x40000400
 810b828:	40000800 	.word	0x40000800
 810b82c:	40000c00 	.word	0x40000c00
 810b830:	40010400 	.word	0x40010400
 810b834:	40014000 	.word	0x40014000
 810b838:	40014400 	.word	0x40014400
 810b83c:	40014800 	.word	0x40014800

0810b840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b840:	b480      	push	{r7}
 810b842:	b087      	sub	sp, #28
 810b844:	af00      	add	r7, sp, #0
 810b846:	6078      	str	r0, [r7, #4]
 810b848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b84a:	687b      	ldr	r3, [r7, #4]
 810b84c:	6a1b      	ldr	r3, [r3, #32]
 810b84e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810b850:	687b      	ldr	r3, [r7, #4]
 810b852:	6a1b      	ldr	r3, [r3, #32]
 810b854:	f023 0201 	bic.w	r2, r3, #1
 810b858:	687b      	ldr	r3, [r7, #4]
 810b85a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b85c:	687b      	ldr	r3, [r7, #4]
 810b85e:	685b      	ldr	r3, [r3, #4]
 810b860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b862:	687b      	ldr	r3, [r7, #4]
 810b864:	699b      	ldr	r3, [r3, #24]
 810b866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810b868:	68fb      	ldr	r3, [r7, #12]
 810b86a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b86e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810b874:	68fb      	ldr	r3, [r7, #12]
 810b876:	f023 0303 	bic.w	r3, r3, #3
 810b87a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b87c:	683b      	ldr	r3, [r7, #0]
 810b87e:	681b      	ldr	r3, [r3, #0]
 810b880:	68fa      	ldr	r2, [r7, #12]
 810b882:	4313      	orrs	r3, r2
 810b884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810b886:	697b      	ldr	r3, [r7, #20]
 810b888:	f023 0302 	bic.w	r3, r3, #2
 810b88c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810b88e:	683b      	ldr	r3, [r7, #0]
 810b890:	689b      	ldr	r3, [r3, #8]
 810b892:	697a      	ldr	r2, [r7, #20]
 810b894:	4313      	orrs	r3, r2
 810b896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810b898:	687b      	ldr	r3, [r7, #4]
 810b89a:	4a2c      	ldr	r2, [pc, #176]	@ (810b94c <TIM_OC1_SetConfig+0x10c>)
 810b89c:	4293      	cmp	r3, r2
 810b89e:	d00f      	beq.n	810b8c0 <TIM_OC1_SetConfig+0x80>
 810b8a0:	687b      	ldr	r3, [r7, #4]
 810b8a2:	4a2b      	ldr	r2, [pc, #172]	@ (810b950 <TIM_OC1_SetConfig+0x110>)
 810b8a4:	4293      	cmp	r3, r2
 810b8a6:	d00b      	beq.n	810b8c0 <TIM_OC1_SetConfig+0x80>
 810b8a8:	687b      	ldr	r3, [r7, #4]
 810b8aa:	4a2a      	ldr	r2, [pc, #168]	@ (810b954 <TIM_OC1_SetConfig+0x114>)
 810b8ac:	4293      	cmp	r3, r2
 810b8ae:	d007      	beq.n	810b8c0 <TIM_OC1_SetConfig+0x80>
 810b8b0:	687b      	ldr	r3, [r7, #4]
 810b8b2:	4a29      	ldr	r2, [pc, #164]	@ (810b958 <TIM_OC1_SetConfig+0x118>)
 810b8b4:	4293      	cmp	r3, r2
 810b8b6:	d003      	beq.n	810b8c0 <TIM_OC1_SetConfig+0x80>
 810b8b8:	687b      	ldr	r3, [r7, #4]
 810b8ba:	4a28      	ldr	r2, [pc, #160]	@ (810b95c <TIM_OC1_SetConfig+0x11c>)
 810b8bc:	4293      	cmp	r3, r2
 810b8be:	d10c      	bne.n	810b8da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810b8c0:	697b      	ldr	r3, [r7, #20]
 810b8c2:	f023 0308 	bic.w	r3, r3, #8
 810b8c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810b8c8:	683b      	ldr	r3, [r7, #0]
 810b8ca:	68db      	ldr	r3, [r3, #12]
 810b8cc:	697a      	ldr	r2, [r7, #20]
 810b8ce:	4313      	orrs	r3, r2
 810b8d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810b8d2:	697b      	ldr	r3, [r7, #20]
 810b8d4:	f023 0304 	bic.w	r3, r3, #4
 810b8d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b8da:	687b      	ldr	r3, [r7, #4]
 810b8dc:	4a1b      	ldr	r2, [pc, #108]	@ (810b94c <TIM_OC1_SetConfig+0x10c>)
 810b8de:	4293      	cmp	r3, r2
 810b8e0:	d00f      	beq.n	810b902 <TIM_OC1_SetConfig+0xc2>
 810b8e2:	687b      	ldr	r3, [r7, #4]
 810b8e4:	4a1a      	ldr	r2, [pc, #104]	@ (810b950 <TIM_OC1_SetConfig+0x110>)
 810b8e6:	4293      	cmp	r3, r2
 810b8e8:	d00b      	beq.n	810b902 <TIM_OC1_SetConfig+0xc2>
 810b8ea:	687b      	ldr	r3, [r7, #4]
 810b8ec:	4a19      	ldr	r2, [pc, #100]	@ (810b954 <TIM_OC1_SetConfig+0x114>)
 810b8ee:	4293      	cmp	r3, r2
 810b8f0:	d007      	beq.n	810b902 <TIM_OC1_SetConfig+0xc2>
 810b8f2:	687b      	ldr	r3, [r7, #4]
 810b8f4:	4a18      	ldr	r2, [pc, #96]	@ (810b958 <TIM_OC1_SetConfig+0x118>)
 810b8f6:	4293      	cmp	r3, r2
 810b8f8:	d003      	beq.n	810b902 <TIM_OC1_SetConfig+0xc2>
 810b8fa:	687b      	ldr	r3, [r7, #4]
 810b8fc:	4a17      	ldr	r2, [pc, #92]	@ (810b95c <TIM_OC1_SetConfig+0x11c>)
 810b8fe:	4293      	cmp	r3, r2
 810b900:	d111      	bne.n	810b926 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810b902:	693b      	ldr	r3, [r7, #16]
 810b904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810b90a:	693b      	ldr	r3, [r7, #16]
 810b90c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810b910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810b912:	683b      	ldr	r3, [r7, #0]
 810b914:	695b      	ldr	r3, [r3, #20]
 810b916:	693a      	ldr	r2, [r7, #16]
 810b918:	4313      	orrs	r3, r2
 810b91a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810b91c:	683b      	ldr	r3, [r7, #0]
 810b91e:	699b      	ldr	r3, [r3, #24]
 810b920:	693a      	ldr	r2, [r7, #16]
 810b922:	4313      	orrs	r3, r2
 810b924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b926:	687b      	ldr	r3, [r7, #4]
 810b928:	693a      	ldr	r2, [r7, #16]
 810b92a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b92c:	687b      	ldr	r3, [r7, #4]
 810b92e:	68fa      	ldr	r2, [r7, #12]
 810b930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810b932:	683b      	ldr	r3, [r7, #0]
 810b934:	685a      	ldr	r2, [r3, #4]
 810b936:	687b      	ldr	r3, [r7, #4]
 810b938:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b93a:	687b      	ldr	r3, [r7, #4]
 810b93c:	697a      	ldr	r2, [r7, #20]
 810b93e:	621a      	str	r2, [r3, #32]
}
 810b940:	bf00      	nop
 810b942:	371c      	adds	r7, #28
 810b944:	46bd      	mov	sp, r7
 810b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b94a:	4770      	bx	lr
 810b94c:	40010000 	.word	0x40010000
 810b950:	40010400 	.word	0x40010400
 810b954:	40014000 	.word	0x40014000
 810b958:	40014400 	.word	0x40014400
 810b95c:	40014800 	.word	0x40014800

0810b960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b960:	b480      	push	{r7}
 810b962:	b087      	sub	sp, #28
 810b964:	af00      	add	r7, sp, #0
 810b966:	6078      	str	r0, [r7, #4]
 810b968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b96a:	687b      	ldr	r3, [r7, #4]
 810b96c:	6a1b      	ldr	r3, [r3, #32]
 810b96e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810b970:	687b      	ldr	r3, [r7, #4]
 810b972:	6a1b      	ldr	r3, [r3, #32]
 810b974:	f023 0210 	bic.w	r2, r3, #16
 810b978:	687b      	ldr	r3, [r7, #4]
 810b97a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b97c:	687b      	ldr	r3, [r7, #4]
 810b97e:	685b      	ldr	r3, [r3, #4]
 810b980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b982:	687b      	ldr	r3, [r7, #4]
 810b984:	699b      	ldr	r3, [r3, #24]
 810b986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810b988:	68fb      	ldr	r3, [r7, #12]
 810b98a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810b98e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810b992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810b994:	68fb      	ldr	r3, [r7, #12]
 810b996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b99a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b99c:	683b      	ldr	r3, [r7, #0]
 810b99e:	681b      	ldr	r3, [r3, #0]
 810b9a0:	021b      	lsls	r3, r3, #8
 810b9a2:	68fa      	ldr	r2, [r7, #12]
 810b9a4:	4313      	orrs	r3, r2
 810b9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810b9a8:	697b      	ldr	r3, [r7, #20]
 810b9aa:	f023 0320 	bic.w	r3, r3, #32
 810b9ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810b9b0:	683b      	ldr	r3, [r7, #0]
 810b9b2:	689b      	ldr	r3, [r3, #8]
 810b9b4:	011b      	lsls	r3, r3, #4
 810b9b6:	697a      	ldr	r2, [r7, #20]
 810b9b8:	4313      	orrs	r3, r2
 810b9ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810b9bc:	687b      	ldr	r3, [r7, #4]
 810b9be:	4a28      	ldr	r2, [pc, #160]	@ (810ba60 <TIM_OC2_SetConfig+0x100>)
 810b9c0:	4293      	cmp	r3, r2
 810b9c2:	d003      	beq.n	810b9cc <TIM_OC2_SetConfig+0x6c>
 810b9c4:	687b      	ldr	r3, [r7, #4]
 810b9c6:	4a27      	ldr	r2, [pc, #156]	@ (810ba64 <TIM_OC2_SetConfig+0x104>)
 810b9c8:	4293      	cmp	r3, r2
 810b9ca:	d10d      	bne.n	810b9e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810b9cc:	697b      	ldr	r3, [r7, #20]
 810b9ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b9d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810b9d4:	683b      	ldr	r3, [r7, #0]
 810b9d6:	68db      	ldr	r3, [r3, #12]
 810b9d8:	011b      	lsls	r3, r3, #4
 810b9da:	697a      	ldr	r2, [r7, #20]
 810b9dc:	4313      	orrs	r3, r2
 810b9de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810b9e0:	697b      	ldr	r3, [r7, #20]
 810b9e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810b9e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b9e8:	687b      	ldr	r3, [r7, #4]
 810b9ea:	4a1d      	ldr	r2, [pc, #116]	@ (810ba60 <TIM_OC2_SetConfig+0x100>)
 810b9ec:	4293      	cmp	r3, r2
 810b9ee:	d00f      	beq.n	810ba10 <TIM_OC2_SetConfig+0xb0>
 810b9f0:	687b      	ldr	r3, [r7, #4]
 810b9f2:	4a1c      	ldr	r2, [pc, #112]	@ (810ba64 <TIM_OC2_SetConfig+0x104>)
 810b9f4:	4293      	cmp	r3, r2
 810b9f6:	d00b      	beq.n	810ba10 <TIM_OC2_SetConfig+0xb0>
 810b9f8:	687b      	ldr	r3, [r7, #4]
 810b9fa:	4a1b      	ldr	r2, [pc, #108]	@ (810ba68 <TIM_OC2_SetConfig+0x108>)
 810b9fc:	4293      	cmp	r3, r2
 810b9fe:	d007      	beq.n	810ba10 <TIM_OC2_SetConfig+0xb0>
 810ba00:	687b      	ldr	r3, [r7, #4]
 810ba02:	4a1a      	ldr	r2, [pc, #104]	@ (810ba6c <TIM_OC2_SetConfig+0x10c>)
 810ba04:	4293      	cmp	r3, r2
 810ba06:	d003      	beq.n	810ba10 <TIM_OC2_SetConfig+0xb0>
 810ba08:	687b      	ldr	r3, [r7, #4]
 810ba0a:	4a19      	ldr	r2, [pc, #100]	@ (810ba70 <TIM_OC2_SetConfig+0x110>)
 810ba0c:	4293      	cmp	r3, r2
 810ba0e:	d113      	bne.n	810ba38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810ba10:	693b      	ldr	r3, [r7, #16]
 810ba12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810ba16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810ba18:	693b      	ldr	r3, [r7, #16]
 810ba1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810ba1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810ba20:	683b      	ldr	r3, [r7, #0]
 810ba22:	695b      	ldr	r3, [r3, #20]
 810ba24:	009b      	lsls	r3, r3, #2
 810ba26:	693a      	ldr	r2, [r7, #16]
 810ba28:	4313      	orrs	r3, r2
 810ba2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810ba2c:	683b      	ldr	r3, [r7, #0]
 810ba2e:	699b      	ldr	r3, [r3, #24]
 810ba30:	009b      	lsls	r3, r3, #2
 810ba32:	693a      	ldr	r2, [r7, #16]
 810ba34:	4313      	orrs	r3, r2
 810ba36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ba38:	687b      	ldr	r3, [r7, #4]
 810ba3a:	693a      	ldr	r2, [r7, #16]
 810ba3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810ba3e:	687b      	ldr	r3, [r7, #4]
 810ba40:	68fa      	ldr	r2, [r7, #12]
 810ba42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810ba44:	683b      	ldr	r3, [r7, #0]
 810ba46:	685a      	ldr	r2, [r3, #4]
 810ba48:	687b      	ldr	r3, [r7, #4]
 810ba4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ba4c:	687b      	ldr	r3, [r7, #4]
 810ba4e:	697a      	ldr	r2, [r7, #20]
 810ba50:	621a      	str	r2, [r3, #32]
}
 810ba52:	bf00      	nop
 810ba54:	371c      	adds	r7, #28
 810ba56:	46bd      	mov	sp, r7
 810ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba5c:	4770      	bx	lr
 810ba5e:	bf00      	nop
 810ba60:	40010000 	.word	0x40010000
 810ba64:	40010400 	.word	0x40010400
 810ba68:	40014000 	.word	0x40014000
 810ba6c:	40014400 	.word	0x40014400
 810ba70:	40014800 	.word	0x40014800

0810ba74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810ba74:	b480      	push	{r7}
 810ba76:	b087      	sub	sp, #28
 810ba78:	af00      	add	r7, sp, #0
 810ba7a:	6078      	str	r0, [r7, #4]
 810ba7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ba7e:	687b      	ldr	r3, [r7, #4]
 810ba80:	6a1b      	ldr	r3, [r3, #32]
 810ba82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810ba84:	687b      	ldr	r3, [r7, #4]
 810ba86:	6a1b      	ldr	r3, [r3, #32]
 810ba88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810ba8c:	687b      	ldr	r3, [r7, #4]
 810ba8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ba90:	687b      	ldr	r3, [r7, #4]
 810ba92:	685b      	ldr	r3, [r3, #4]
 810ba94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810ba96:	687b      	ldr	r3, [r7, #4]
 810ba98:	69db      	ldr	r3, [r3, #28]
 810ba9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810ba9c:	68fb      	ldr	r3, [r7, #12]
 810ba9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810baa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810baa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810baa8:	68fb      	ldr	r3, [r7, #12]
 810baaa:	f023 0303 	bic.w	r3, r3, #3
 810baae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810bab0:	683b      	ldr	r3, [r7, #0]
 810bab2:	681b      	ldr	r3, [r3, #0]
 810bab4:	68fa      	ldr	r2, [r7, #12]
 810bab6:	4313      	orrs	r3, r2
 810bab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810baba:	697b      	ldr	r3, [r7, #20]
 810babc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810bac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810bac2:	683b      	ldr	r3, [r7, #0]
 810bac4:	689b      	ldr	r3, [r3, #8]
 810bac6:	021b      	lsls	r3, r3, #8
 810bac8:	697a      	ldr	r2, [r7, #20]
 810baca:	4313      	orrs	r3, r2
 810bacc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810bace:	687b      	ldr	r3, [r7, #4]
 810bad0:	4a27      	ldr	r2, [pc, #156]	@ (810bb70 <TIM_OC3_SetConfig+0xfc>)
 810bad2:	4293      	cmp	r3, r2
 810bad4:	d003      	beq.n	810bade <TIM_OC3_SetConfig+0x6a>
 810bad6:	687b      	ldr	r3, [r7, #4]
 810bad8:	4a26      	ldr	r2, [pc, #152]	@ (810bb74 <TIM_OC3_SetConfig+0x100>)
 810bada:	4293      	cmp	r3, r2
 810badc:	d10d      	bne.n	810bafa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810bade:	697b      	ldr	r3, [r7, #20]
 810bae0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810bae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810bae6:	683b      	ldr	r3, [r7, #0]
 810bae8:	68db      	ldr	r3, [r3, #12]
 810baea:	021b      	lsls	r3, r3, #8
 810baec:	697a      	ldr	r2, [r7, #20]
 810baee:	4313      	orrs	r3, r2
 810baf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810baf2:	697b      	ldr	r3, [r7, #20]
 810baf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810baf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bafa:	687b      	ldr	r3, [r7, #4]
 810bafc:	4a1c      	ldr	r2, [pc, #112]	@ (810bb70 <TIM_OC3_SetConfig+0xfc>)
 810bafe:	4293      	cmp	r3, r2
 810bb00:	d00f      	beq.n	810bb22 <TIM_OC3_SetConfig+0xae>
 810bb02:	687b      	ldr	r3, [r7, #4]
 810bb04:	4a1b      	ldr	r2, [pc, #108]	@ (810bb74 <TIM_OC3_SetConfig+0x100>)
 810bb06:	4293      	cmp	r3, r2
 810bb08:	d00b      	beq.n	810bb22 <TIM_OC3_SetConfig+0xae>
 810bb0a:	687b      	ldr	r3, [r7, #4]
 810bb0c:	4a1a      	ldr	r2, [pc, #104]	@ (810bb78 <TIM_OC3_SetConfig+0x104>)
 810bb0e:	4293      	cmp	r3, r2
 810bb10:	d007      	beq.n	810bb22 <TIM_OC3_SetConfig+0xae>
 810bb12:	687b      	ldr	r3, [r7, #4]
 810bb14:	4a19      	ldr	r2, [pc, #100]	@ (810bb7c <TIM_OC3_SetConfig+0x108>)
 810bb16:	4293      	cmp	r3, r2
 810bb18:	d003      	beq.n	810bb22 <TIM_OC3_SetConfig+0xae>
 810bb1a:	687b      	ldr	r3, [r7, #4]
 810bb1c:	4a18      	ldr	r2, [pc, #96]	@ (810bb80 <TIM_OC3_SetConfig+0x10c>)
 810bb1e:	4293      	cmp	r3, r2
 810bb20:	d113      	bne.n	810bb4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810bb22:	693b      	ldr	r3, [r7, #16]
 810bb24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810bb28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810bb2a:	693b      	ldr	r3, [r7, #16]
 810bb2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810bb30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810bb32:	683b      	ldr	r3, [r7, #0]
 810bb34:	695b      	ldr	r3, [r3, #20]
 810bb36:	011b      	lsls	r3, r3, #4
 810bb38:	693a      	ldr	r2, [r7, #16]
 810bb3a:	4313      	orrs	r3, r2
 810bb3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810bb3e:	683b      	ldr	r3, [r7, #0]
 810bb40:	699b      	ldr	r3, [r3, #24]
 810bb42:	011b      	lsls	r3, r3, #4
 810bb44:	693a      	ldr	r2, [r7, #16]
 810bb46:	4313      	orrs	r3, r2
 810bb48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bb4a:	687b      	ldr	r3, [r7, #4]
 810bb4c:	693a      	ldr	r2, [r7, #16]
 810bb4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810bb50:	687b      	ldr	r3, [r7, #4]
 810bb52:	68fa      	ldr	r2, [r7, #12]
 810bb54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810bb56:	683b      	ldr	r3, [r7, #0]
 810bb58:	685a      	ldr	r2, [r3, #4]
 810bb5a:	687b      	ldr	r3, [r7, #4]
 810bb5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bb5e:	687b      	ldr	r3, [r7, #4]
 810bb60:	697a      	ldr	r2, [r7, #20]
 810bb62:	621a      	str	r2, [r3, #32]
}
 810bb64:	bf00      	nop
 810bb66:	371c      	adds	r7, #28
 810bb68:	46bd      	mov	sp, r7
 810bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb6e:	4770      	bx	lr
 810bb70:	40010000 	.word	0x40010000
 810bb74:	40010400 	.word	0x40010400
 810bb78:	40014000 	.word	0x40014000
 810bb7c:	40014400 	.word	0x40014400
 810bb80:	40014800 	.word	0x40014800

0810bb84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810bb84:	b480      	push	{r7}
 810bb86:	b087      	sub	sp, #28
 810bb88:	af00      	add	r7, sp, #0
 810bb8a:	6078      	str	r0, [r7, #4]
 810bb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bb8e:	687b      	ldr	r3, [r7, #4]
 810bb90:	6a1b      	ldr	r3, [r3, #32]
 810bb92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810bb94:	687b      	ldr	r3, [r7, #4]
 810bb96:	6a1b      	ldr	r3, [r3, #32]
 810bb98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810bb9c:	687b      	ldr	r3, [r7, #4]
 810bb9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bba0:	687b      	ldr	r3, [r7, #4]
 810bba2:	685b      	ldr	r3, [r3, #4]
 810bba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810bba6:	687b      	ldr	r3, [r7, #4]
 810bba8:	69db      	ldr	r3, [r3, #28]
 810bbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810bbac:	68fb      	ldr	r3, [r7, #12]
 810bbae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810bbb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810bbb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810bbb8:	68fb      	ldr	r3, [r7, #12]
 810bbba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810bbbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810bbc0:	683b      	ldr	r3, [r7, #0]
 810bbc2:	681b      	ldr	r3, [r3, #0]
 810bbc4:	021b      	lsls	r3, r3, #8
 810bbc6:	68fa      	ldr	r2, [r7, #12]
 810bbc8:	4313      	orrs	r3, r2
 810bbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810bbcc:	693b      	ldr	r3, [r7, #16]
 810bbce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810bbd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810bbd4:	683b      	ldr	r3, [r7, #0]
 810bbd6:	689b      	ldr	r3, [r3, #8]
 810bbd8:	031b      	lsls	r3, r3, #12
 810bbda:	693a      	ldr	r2, [r7, #16]
 810bbdc:	4313      	orrs	r3, r2
 810bbde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bbe0:	687b      	ldr	r3, [r7, #4]
 810bbe2:	4a18      	ldr	r2, [pc, #96]	@ (810bc44 <TIM_OC4_SetConfig+0xc0>)
 810bbe4:	4293      	cmp	r3, r2
 810bbe6:	d00f      	beq.n	810bc08 <TIM_OC4_SetConfig+0x84>
 810bbe8:	687b      	ldr	r3, [r7, #4]
 810bbea:	4a17      	ldr	r2, [pc, #92]	@ (810bc48 <TIM_OC4_SetConfig+0xc4>)
 810bbec:	4293      	cmp	r3, r2
 810bbee:	d00b      	beq.n	810bc08 <TIM_OC4_SetConfig+0x84>
 810bbf0:	687b      	ldr	r3, [r7, #4]
 810bbf2:	4a16      	ldr	r2, [pc, #88]	@ (810bc4c <TIM_OC4_SetConfig+0xc8>)
 810bbf4:	4293      	cmp	r3, r2
 810bbf6:	d007      	beq.n	810bc08 <TIM_OC4_SetConfig+0x84>
 810bbf8:	687b      	ldr	r3, [r7, #4]
 810bbfa:	4a15      	ldr	r2, [pc, #84]	@ (810bc50 <TIM_OC4_SetConfig+0xcc>)
 810bbfc:	4293      	cmp	r3, r2
 810bbfe:	d003      	beq.n	810bc08 <TIM_OC4_SetConfig+0x84>
 810bc00:	687b      	ldr	r3, [r7, #4]
 810bc02:	4a14      	ldr	r2, [pc, #80]	@ (810bc54 <TIM_OC4_SetConfig+0xd0>)
 810bc04:	4293      	cmp	r3, r2
 810bc06:	d109      	bne.n	810bc1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810bc08:	697b      	ldr	r3, [r7, #20]
 810bc0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810bc0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810bc10:	683b      	ldr	r3, [r7, #0]
 810bc12:	695b      	ldr	r3, [r3, #20]
 810bc14:	019b      	lsls	r3, r3, #6
 810bc16:	697a      	ldr	r2, [r7, #20]
 810bc18:	4313      	orrs	r3, r2
 810bc1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bc1c:	687b      	ldr	r3, [r7, #4]
 810bc1e:	697a      	ldr	r2, [r7, #20]
 810bc20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810bc22:	687b      	ldr	r3, [r7, #4]
 810bc24:	68fa      	ldr	r2, [r7, #12]
 810bc26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810bc28:	683b      	ldr	r3, [r7, #0]
 810bc2a:	685a      	ldr	r2, [r3, #4]
 810bc2c:	687b      	ldr	r3, [r7, #4]
 810bc2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bc30:	687b      	ldr	r3, [r7, #4]
 810bc32:	693a      	ldr	r2, [r7, #16]
 810bc34:	621a      	str	r2, [r3, #32]
}
 810bc36:	bf00      	nop
 810bc38:	371c      	adds	r7, #28
 810bc3a:	46bd      	mov	sp, r7
 810bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc40:	4770      	bx	lr
 810bc42:	bf00      	nop
 810bc44:	40010000 	.word	0x40010000
 810bc48:	40010400 	.word	0x40010400
 810bc4c:	40014000 	.word	0x40014000
 810bc50:	40014400 	.word	0x40014400
 810bc54:	40014800 	.word	0x40014800

0810bc58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810bc58:	b480      	push	{r7}
 810bc5a:	b087      	sub	sp, #28
 810bc5c:	af00      	add	r7, sp, #0
 810bc5e:	6078      	str	r0, [r7, #4]
 810bc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bc62:	687b      	ldr	r3, [r7, #4]
 810bc64:	6a1b      	ldr	r3, [r3, #32]
 810bc66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810bc68:	687b      	ldr	r3, [r7, #4]
 810bc6a:	6a1b      	ldr	r3, [r3, #32]
 810bc6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810bc70:	687b      	ldr	r3, [r7, #4]
 810bc72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bc74:	687b      	ldr	r3, [r7, #4]
 810bc76:	685b      	ldr	r3, [r3, #4]
 810bc78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810bc7a:	687b      	ldr	r3, [r7, #4]
 810bc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bc7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810bc80:	68fb      	ldr	r3, [r7, #12]
 810bc82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810bc86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bc8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810bc8c:	683b      	ldr	r3, [r7, #0]
 810bc8e:	681b      	ldr	r3, [r3, #0]
 810bc90:	68fa      	ldr	r2, [r7, #12]
 810bc92:	4313      	orrs	r3, r2
 810bc94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810bc96:	693b      	ldr	r3, [r7, #16]
 810bc98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810bc9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810bc9e:	683b      	ldr	r3, [r7, #0]
 810bca0:	689b      	ldr	r3, [r3, #8]
 810bca2:	041b      	lsls	r3, r3, #16
 810bca4:	693a      	ldr	r2, [r7, #16]
 810bca6:	4313      	orrs	r3, r2
 810bca8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bcaa:	687b      	ldr	r3, [r7, #4]
 810bcac:	4a17      	ldr	r2, [pc, #92]	@ (810bd0c <TIM_OC5_SetConfig+0xb4>)
 810bcae:	4293      	cmp	r3, r2
 810bcb0:	d00f      	beq.n	810bcd2 <TIM_OC5_SetConfig+0x7a>
 810bcb2:	687b      	ldr	r3, [r7, #4]
 810bcb4:	4a16      	ldr	r2, [pc, #88]	@ (810bd10 <TIM_OC5_SetConfig+0xb8>)
 810bcb6:	4293      	cmp	r3, r2
 810bcb8:	d00b      	beq.n	810bcd2 <TIM_OC5_SetConfig+0x7a>
 810bcba:	687b      	ldr	r3, [r7, #4]
 810bcbc:	4a15      	ldr	r2, [pc, #84]	@ (810bd14 <TIM_OC5_SetConfig+0xbc>)
 810bcbe:	4293      	cmp	r3, r2
 810bcc0:	d007      	beq.n	810bcd2 <TIM_OC5_SetConfig+0x7a>
 810bcc2:	687b      	ldr	r3, [r7, #4]
 810bcc4:	4a14      	ldr	r2, [pc, #80]	@ (810bd18 <TIM_OC5_SetConfig+0xc0>)
 810bcc6:	4293      	cmp	r3, r2
 810bcc8:	d003      	beq.n	810bcd2 <TIM_OC5_SetConfig+0x7a>
 810bcca:	687b      	ldr	r3, [r7, #4]
 810bccc:	4a13      	ldr	r2, [pc, #76]	@ (810bd1c <TIM_OC5_SetConfig+0xc4>)
 810bcce:	4293      	cmp	r3, r2
 810bcd0:	d109      	bne.n	810bce6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810bcd2:	697b      	ldr	r3, [r7, #20]
 810bcd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810bcd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810bcda:	683b      	ldr	r3, [r7, #0]
 810bcdc:	695b      	ldr	r3, [r3, #20]
 810bcde:	021b      	lsls	r3, r3, #8
 810bce0:	697a      	ldr	r2, [r7, #20]
 810bce2:	4313      	orrs	r3, r2
 810bce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bce6:	687b      	ldr	r3, [r7, #4]
 810bce8:	697a      	ldr	r2, [r7, #20]
 810bcea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810bcec:	687b      	ldr	r3, [r7, #4]
 810bcee:	68fa      	ldr	r2, [r7, #12]
 810bcf0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810bcf2:	683b      	ldr	r3, [r7, #0]
 810bcf4:	685a      	ldr	r2, [r3, #4]
 810bcf6:	687b      	ldr	r3, [r7, #4]
 810bcf8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bcfa:	687b      	ldr	r3, [r7, #4]
 810bcfc:	693a      	ldr	r2, [r7, #16]
 810bcfe:	621a      	str	r2, [r3, #32]
}
 810bd00:	bf00      	nop
 810bd02:	371c      	adds	r7, #28
 810bd04:	46bd      	mov	sp, r7
 810bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd0a:	4770      	bx	lr
 810bd0c:	40010000 	.word	0x40010000
 810bd10:	40010400 	.word	0x40010400
 810bd14:	40014000 	.word	0x40014000
 810bd18:	40014400 	.word	0x40014400
 810bd1c:	40014800 	.word	0x40014800

0810bd20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810bd20:	b480      	push	{r7}
 810bd22:	b087      	sub	sp, #28
 810bd24:	af00      	add	r7, sp, #0
 810bd26:	6078      	str	r0, [r7, #4]
 810bd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bd2a:	687b      	ldr	r3, [r7, #4]
 810bd2c:	6a1b      	ldr	r3, [r3, #32]
 810bd2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810bd30:	687b      	ldr	r3, [r7, #4]
 810bd32:	6a1b      	ldr	r3, [r3, #32]
 810bd34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810bd38:	687b      	ldr	r3, [r7, #4]
 810bd3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bd3c:	687b      	ldr	r3, [r7, #4]
 810bd3e:	685b      	ldr	r3, [r3, #4]
 810bd40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810bd42:	687b      	ldr	r3, [r7, #4]
 810bd44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810bd48:	68fb      	ldr	r3, [r7, #12]
 810bd4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810bd4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810bd52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810bd54:	683b      	ldr	r3, [r7, #0]
 810bd56:	681b      	ldr	r3, [r3, #0]
 810bd58:	021b      	lsls	r3, r3, #8
 810bd5a:	68fa      	ldr	r2, [r7, #12]
 810bd5c:	4313      	orrs	r3, r2
 810bd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810bd60:	693b      	ldr	r3, [r7, #16]
 810bd62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810bd66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810bd68:	683b      	ldr	r3, [r7, #0]
 810bd6a:	689b      	ldr	r3, [r3, #8]
 810bd6c:	051b      	lsls	r3, r3, #20
 810bd6e:	693a      	ldr	r2, [r7, #16]
 810bd70:	4313      	orrs	r3, r2
 810bd72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bd74:	687b      	ldr	r3, [r7, #4]
 810bd76:	4a18      	ldr	r2, [pc, #96]	@ (810bdd8 <TIM_OC6_SetConfig+0xb8>)
 810bd78:	4293      	cmp	r3, r2
 810bd7a:	d00f      	beq.n	810bd9c <TIM_OC6_SetConfig+0x7c>
 810bd7c:	687b      	ldr	r3, [r7, #4]
 810bd7e:	4a17      	ldr	r2, [pc, #92]	@ (810bddc <TIM_OC6_SetConfig+0xbc>)
 810bd80:	4293      	cmp	r3, r2
 810bd82:	d00b      	beq.n	810bd9c <TIM_OC6_SetConfig+0x7c>
 810bd84:	687b      	ldr	r3, [r7, #4]
 810bd86:	4a16      	ldr	r2, [pc, #88]	@ (810bde0 <TIM_OC6_SetConfig+0xc0>)
 810bd88:	4293      	cmp	r3, r2
 810bd8a:	d007      	beq.n	810bd9c <TIM_OC6_SetConfig+0x7c>
 810bd8c:	687b      	ldr	r3, [r7, #4]
 810bd8e:	4a15      	ldr	r2, [pc, #84]	@ (810bde4 <TIM_OC6_SetConfig+0xc4>)
 810bd90:	4293      	cmp	r3, r2
 810bd92:	d003      	beq.n	810bd9c <TIM_OC6_SetConfig+0x7c>
 810bd94:	687b      	ldr	r3, [r7, #4]
 810bd96:	4a14      	ldr	r2, [pc, #80]	@ (810bde8 <TIM_OC6_SetConfig+0xc8>)
 810bd98:	4293      	cmp	r3, r2
 810bd9a:	d109      	bne.n	810bdb0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810bd9c:	697b      	ldr	r3, [r7, #20]
 810bd9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810bda2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810bda4:	683b      	ldr	r3, [r7, #0]
 810bda6:	695b      	ldr	r3, [r3, #20]
 810bda8:	029b      	lsls	r3, r3, #10
 810bdaa:	697a      	ldr	r2, [r7, #20]
 810bdac:	4313      	orrs	r3, r2
 810bdae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bdb0:	687b      	ldr	r3, [r7, #4]
 810bdb2:	697a      	ldr	r2, [r7, #20]
 810bdb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810bdb6:	687b      	ldr	r3, [r7, #4]
 810bdb8:	68fa      	ldr	r2, [r7, #12]
 810bdba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810bdbc:	683b      	ldr	r3, [r7, #0]
 810bdbe:	685a      	ldr	r2, [r3, #4]
 810bdc0:	687b      	ldr	r3, [r7, #4]
 810bdc2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bdc4:	687b      	ldr	r3, [r7, #4]
 810bdc6:	693a      	ldr	r2, [r7, #16]
 810bdc8:	621a      	str	r2, [r3, #32]
}
 810bdca:	bf00      	nop
 810bdcc:	371c      	adds	r7, #28
 810bdce:	46bd      	mov	sp, r7
 810bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bdd4:	4770      	bx	lr
 810bdd6:	bf00      	nop
 810bdd8:	40010000 	.word	0x40010000
 810bddc:	40010400 	.word	0x40010400
 810bde0:	40014000 	.word	0x40014000
 810bde4:	40014400 	.word	0x40014400
 810bde8:	40014800 	.word	0x40014800

0810bdec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810bdec:	b480      	push	{r7}
 810bdee:	b087      	sub	sp, #28
 810bdf0:	af00      	add	r7, sp, #0
 810bdf2:	60f8      	str	r0, [r7, #12]
 810bdf4:	60b9      	str	r1, [r7, #8]
 810bdf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810bdf8:	68fb      	ldr	r3, [r7, #12]
 810bdfa:	6a1b      	ldr	r3, [r3, #32]
 810bdfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810bdfe:	68fb      	ldr	r3, [r7, #12]
 810be00:	6a1b      	ldr	r3, [r3, #32]
 810be02:	f023 0201 	bic.w	r2, r3, #1
 810be06:	68fb      	ldr	r3, [r7, #12]
 810be08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810be0a:	68fb      	ldr	r3, [r7, #12]
 810be0c:	699b      	ldr	r3, [r3, #24]
 810be0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810be10:	693b      	ldr	r3, [r7, #16]
 810be12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810be16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810be18:	687b      	ldr	r3, [r7, #4]
 810be1a:	011b      	lsls	r3, r3, #4
 810be1c:	693a      	ldr	r2, [r7, #16]
 810be1e:	4313      	orrs	r3, r2
 810be20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810be22:	697b      	ldr	r3, [r7, #20]
 810be24:	f023 030a 	bic.w	r3, r3, #10
 810be28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810be2a:	697a      	ldr	r2, [r7, #20]
 810be2c:	68bb      	ldr	r3, [r7, #8]
 810be2e:	4313      	orrs	r3, r2
 810be30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810be32:	68fb      	ldr	r3, [r7, #12]
 810be34:	693a      	ldr	r2, [r7, #16]
 810be36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810be38:	68fb      	ldr	r3, [r7, #12]
 810be3a:	697a      	ldr	r2, [r7, #20]
 810be3c:	621a      	str	r2, [r3, #32]
}
 810be3e:	bf00      	nop
 810be40:	371c      	adds	r7, #28
 810be42:	46bd      	mov	sp, r7
 810be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be48:	4770      	bx	lr

0810be4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810be4a:	b480      	push	{r7}
 810be4c:	b087      	sub	sp, #28
 810be4e:	af00      	add	r7, sp, #0
 810be50:	60f8      	str	r0, [r7, #12]
 810be52:	60b9      	str	r1, [r7, #8]
 810be54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810be56:	68fb      	ldr	r3, [r7, #12]
 810be58:	6a1b      	ldr	r3, [r3, #32]
 810be5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810be5c:	68fb      	ldr	r3, [r7, #12]
 810be5e:	6a1b      	ldr	r3, [r3, #32]
 810be60:	f023 0210 	bic.w	r2, r3, #16
 810be64:	68fb      	ldr	r3, [r7, #12]
 810be66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810be68:	68fb      	ldr	r3, [r7, #12]
 810be6a:	699b      	ldr	r3, [r3, #24]
 810be6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810be6e:	693b      	ldr	r3, [r7, #16]
 810be70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810be74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810be76:	687b      	ldr	r3, [r7, #4]
 810be78:	031b      	lsls	r3, r3, #12
 810be7a:	693a      	ldr	r2, [r7, #16]
 810be7c:	4313      	orrs	r3, r2
 810be7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810be80:	697b      	ldr	r3, [r7, #20]
 810be82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810be86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810be88:	68bb      	ldr	r3, [r7, #8]
 810be8a:	011b      	lsls	r3, r3, #4
 810be8c:	697a      	ldr	r2, [r7, #20]
 810be8e:	4313      	orrs	r3, r2
 810be90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810be92:	68fb      	ldr	r3, [r7, #12]
 810be94:	693a      	ldr	r2, [r7, #16]
 810be96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810be98:	68fb      	ldr	r3, [r7, #12]
 810be9a:	697a      	ldr	r2, [r7, #20]
 810be9c:	621a      	str	r2, [r3, #32]
}
 810be9e:	bf00      	nop
 810bea0:	371c      	adds	r7, #28
 810bea2:	46bd      	mov	sp, r7
 810bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bea8:	4770      	bx	lr

0810beaa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810beaa:	b480      	push	{r7}
 810beac:	b085      	sub	sp, #20
 810beae:	af00      	add	r7, sp, #0
 810beb0:	6078      	str	r0, [r7, #4]
 810beb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810beb4:	687b      	ldr	r3, [r7, #4]
 810beb6:	689b      	ldr	r3, [r3, #8]
 810beb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810beba:	68fb      	ldr	r3, [r7, #12]
 810bebc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810bec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810bec6:	683a      	ldr	r2, [r7, #0]
 810bec8:	68fb      	ldr	r3, [r7, #12]
 810beca:	4313      	orrs	r3, r2
 810becc:	f043 0307 	orr.w	r3, r3, #7
 810bed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810bed2:	687b      	ldr	r3, [r7, #4]
 810bed4:	68fa      	ldr	r2, [r7, #12]
 810bed6:	609a      	str	r2, [r3, #8]
}
 810bed8:	bf00      	nop
 810beda:	3714      	adds	r7, #20
 810bedc:	46bd      	mov	sp, r7
 810bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bee2:	4770      	bx	lr

0810bee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810bee4:	b480      	push	{r7}
 810bee6:	b087      	sub	sp, #28
 810bee8:	af00      	add	r7, sp, #0
 810beea:	60f8      	str	r0, [r7, #12]
 810beec:	60b9      	str	r1, [r7, #8]
 810beee:	607a      	str	r2, [r7, #4]
 810bef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810bef2:	68fb      	ldr	r3, [r7, #12]
 810bef4:	689b      	ldr	r3, [r3, #8]
 810bef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810bef8:	697b      	ldr	r3, [r7, #20]
 810befa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810befe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810bf00:	683b      	ldr	r3, [r7, #0]
 810bf02:	021a      	lsls	r2, r3, #8
 810bf04:	687b      	ldr	r3, [r7, #4]
 810bf06:	431a      	orrs	r2, r3
 810bf08:	68bb      	ldr	r3, [r7, #8]
 810bf0a:	4313      	orrs	r3, r2
 810bf0c:	697a      	ldr	r2, [r7, #20]
 810bf0e:	4313      	orrs	r3, r2
 810bf10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810bf12:	68fb      	ldr	r3, [r7, #12]
 810bf14:	697a      	ldr	r2, [r7, #20]
 810bf16:	609a      	str	r2, [r3, #8]
}
 810bf18:	bf00      	nop
 810bf1a:	371c      	adds	r7, #28
 810bf1c:	46bd      	mov	sp, r7
 810bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf22:	4770      	bx	lr

0810bf24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810bf24:	b480      	push	{r7}
 810bf26:	b087      	sub	sp, #28
 810bf28:	af00      	add	r7, sp, #0
 810bf2a:	60f8      	str	r0, [r7, #12]
 810bf2c:	60b9      	str	r1, [r7, #8]
 810bf2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810bf30:	68bb      	ldr	r3, [r7, #8]
 810bf32:	f003 031f 	and.w	r3, r3, #31
 810bf36:	2201      	movs	r2, #1
 810bf38:	fa02 f303 	lsl.w	r3, r2, r3
 810bf3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810bf3e:	68fb      	ldr	r3, [r7, #12]
 810bf40:	6a1a      	ldr	r2, [r3, #32]
 810bf42:	697b      	ldr	r3, [r7, #20]
 810bf44:	43db      	mvns	r3, r3
 810bf46:	401a      	ands	r2, r3
 810bf48:	68fb      	ldr	r3, [r7, #12]
 810bf4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810bf4c:	68fb      	ldr	r3, [r7, #12]
 810bf4e:	6a1a      	ldr	r2, [r3, #32]
 810bf50:	68bb      	ldr	r3, [r7, #8]
 810bf52:	f003 031f 	and.w	r3, r3, #31
 810bf56:	6879      	ldr	r1, [r7, #4]
 810bf58:	fa01 f303 	lsl.w	r3, r1, r3
 810bf5c:	431a      	orrs	r2, r3
 810bf5e:	68fb      	ldr	r3, [r7, #12]
 810bf60:	621a      	str	r2, [r3, #32]
}
 810bf62:	bf00      	nop
 810bf64:	371c      	adds	r7, #28
 810bf66:	46bd      	mov	sp, r7
 810bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf6c:	4770      	bx	lr
	...

0810bf70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810bf70:	b480      	push	{r7}
 810bf72:	b085      	sub	sp, #20
 810bf74:	af00      	add	r7, sp, #0
 810bf76:	6078      	str	r0, [r7, #4]
 810bf78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810bf7a:	687b      	ldr	r3, [r7, #4]
 810bf7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810bf80:	2b01      	cmp	r3, #1
 810bf82:	d101      	bne.n	810bf88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810bf84:	2302      	movs	r3, #2
 810bf86:	e06d      	b.n	810c064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810bf88:	687b      	ldr	r3, [r7, #4]
 810bf8a:	2201      	movs	r2, #1
 810bf8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bf90:	687b      	ldr	r3, [r7, #4]
 810bf92:	2202      	movs	r2, #2
 810bf94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810bf98:	687b      	ldr	r3, [r7, #4]
 810bf9a:	681b      	ldr	r3, [r3, #0]
 810bf9c:	685b      	ldr	r3, [r3, #4]
 810bf9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810bfa0:	687b      	ldr	r3, [r7, #4]
 810bfa2:	681b      	ldr	r3, [r3, #0]
 810bfa4:	689b      	ldr	r3, [r3, #8]
 810bfa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810bfa8:	687b      	ldr	r3, [r7, #4]
 810bfaa:	681b      	ldr	r3, [r3, #0]
 810bfac:	4a30      	ldr	r2, [pc, #192]	@ (810c070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810bfae:	4293      	cmp	r3, r2
 810bfb0:	d004      	beq.n	810bfbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810bfb2:	687b      	ldr	r3, [r7, #4]
 810bfb4:	681b      	ldr	r3, [r3, #0]
 810bfb6:	4a2f      	ldr	r2, [pc, #188]	@ (810c074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810bfb8:	4293      	cmp	r3, r2
 810bfba:	d108      	bne.n	810bfce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810bfbc:	68fb      	ldr	r3, [r7, #12]
 810bfbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810bfc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810bfc4:	683b      	ldr	r3, [r7, #0]
 810bfc6:	685b      	ldr	r3, [r3, #4]
 810bfc8:	68fa      	ldr	r2, [r7, #12]
 810bfca:	4313      	orrs	r3, r2
 810bfcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810bfce:	68fb      	ldr	r3, [r7, #12]
 810bfd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bfd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810bfd6:	683b      	ldr	r3, [r7, #0]
 810bfd8:	681b      	ldr	r3, [r3, #0]
 810bfda:	68fa      	ldr	r2, [r7, #12]
 810bfdc:	4313      	orrs	r3, r2
 810bfde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810bfe0:	687b      	ldr	r3, [r7, #4]
 810bfe2:	681b      	ldr	r3, [r3, #0]
 810bfe4:	68fa      	ldr	r2, [r7, #12]
 810bfe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810bfe8:	687b      	ldr	r3, [r7, #4]
 810bfea:	681b      	ldr	r3, [r3, #0]
 810bfec:	4a20      	ldr	r2, [pc, #128]	@ (810c070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810bfee:	4293      	cmp	r3, r2
 810bff0:	d022      	beq.n	810c038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bff2:	687b      	ldr	r3, [r7, #4]
 810bff4:	681b      	ldr	r3, [r3, #0]
 810bff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bffa:	d01d      	beq.n	810c038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bffc:	687b      	ldr	r3, [r7, #4]
 810bffe:	681b      	ldr	r3, [r3, #0]
 810c000:	4a1d      	ldr	r2, [pc, #116]	@ (810c078 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810c002:	4293      	cmp	r3, r2
 810c004:	d018      	beq.n	810c038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c006:	687b      	ldr	r3, [r7, #4]
 810c008:	681b      	ldr	r3, [r3, #0]
 810c00a:	4a1c      	ldr	r2, [pc, #112]	@ (810c07c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810c00c:	4293      	cmp	r3, r2
 810c00e:	d013      	beq.n	810c038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c010:	687b      	ldr	r3, [r7, #4]
 810c012:	681b      	ldr	r3, [r3, #0]
 810c014:	4a1a      	ldr	r2, [pc, #104]	@ (810c080 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810c016:	4293      	cmp	r3, r2
 810c018:	d00e      	beq.n	810c038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c01a:	687b      	ldr	r3, [r7, #4]
 810c01c:	681b      	ldr	r3, [r3, #0]
 810c01e:	4a15      	ldr	r2, [pc, #84]	@ (810c074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810c020:	4293      	cmp	r3, r2
 810c022:	d009      	beq.n	810c038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c024:	687b      	ldr	r3, [r7, #4]
 810c026:	681b      	ldr	r3, [r3, #0]
 810c028:	4a16      	ldr	r2, [pc, #88]	@ (810c084 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810c02a:	4293      	cmp	r3, r2
 810c02c:	d004      	beq.n	810c038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c02e:	687b      	ldr	r3, [r7, #4]
 810c030:	681b      	ldr	r3, [r3, #0]
 810c032:	4a15      	ldr	r2, [pc, #84]	@ (810c088 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810c034:	4293      	cmp	r3, r2
 810c036:	d10c      	bne.n	810c052 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810c038:	68bb      	ldr	r3, [r7, #8]
 810c03a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810c03e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810c040:	683b      	ldr	r3, [r7, #0]
 810c042:	689b      	ldr	r3, [r3, #8]
 810c044:	68ba      	ldr	r2, [r7, #8]
 810c046:	4313      	orrs	r3, r2
 810c048:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810c04a:	687b      	ldr	r3, [r7, #4]
 810c04c:	681b      	ldr	r3, [r3, #0]
 810c04e:	68ba      	ldr	r2, [r7, #8]
 810c050:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810c052:	687b      	ldr	r3, [r7, #4]
 810c054:	2201      	movs	r2, #1
 810c056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810c05a:	687b      	ldr	r3, [r7, #4]
 810c05c:	2200      	movs	r2, #0
 810c05e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810c062:	2300      	movs	r3, #0
}
 810c064:	4618      	mov	r0, r3
 810c066:	3714      	adds	r7, #20
 810c068:	46bd      	mov	sp, r7
 810c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c06e:	4770      	bx	lr
 810c070:	40010000 	.word	0x40010000
 810c074:	40010400 	.word	0x40010400
 810c078:	40000400 	.word	0x40000400
 810c07c:	40000800 	.word	0x40000800
 810c080:	40000c00 	.word	0x40000c00
 810c084:	40001800 	.word	0x40001800
 810c088:	40014000 	.word	0x40014000

0810c08c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810c08c:	b480      	push	{r7}
 810c08e:	b085      	sub	sp, #20
 810c090:	af00      	add	r7, sp, #0
 810c092:	6078      	str	r0, [r7, #4]
 810c094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810c096:	2300      	movs	r3, #0
 810c098:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810c09a:	687b      	ldr	r3, [r7, #4]
 810c09c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810c0a0:	2b01      	cmp	r3, #1
 810c0a2:	d101      	bne.n	810c0a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810c0a4:	2302      	movs	r3, #2
 810c0a6:	e065      	b.n	810c174 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810c0a8:	687b      	ldr	r3, [r7, #4]
 810c0aa:	2201      	movs	r2, #1
 810c0ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810c0b0:	68fb      	ldr	r3, [r7, #12]
 810c0b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810c0b6:	683b      	ldr	r3, [r7, #0]
 810c0b8:	68db      	ldr	r3, [r3, #12]
 810c0ba:	4313      	orrs	r3, r2
 810c0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810c0be:	68fb      	ldr	r3, [r7, #12]
 810c0c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810c0c4:	683b      	ldr	r3, [r7, #0]
 810c0c6:	689b      	ldr	r3, [r3, #8]
 810c0c8:	4313      	orrs	r3, r2
 810c0ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810c0cc:	68fb      	ldr	r3, [r7, #12]
 810c0ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810c0d2:	683b      	ldr	r3, [r7, #0]
 810c0d4:	685b      	ldr	r3, [r3, #4]
 810c0d6:	4313      	orrs	r3, r2
 810c0d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810c0da:	68fb      	ldr	r3, [r7, #12]
 810c0dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810c0e0:	683b      	ldr	r3, [r7, #0]
 810c0e2:	681b      	ldr	r3, [r3, #0]
 810c0e4:	4313      	orrs	r3, r2
 810c0e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810c0e8:	68fb      	ldr	r3, [r7, #12]
 810c0ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810c0ee:	683b      	ldr	r3, [r7, #0]
 810c0f0:	691b      	ldr	r3, [r3, #16]
 810c0f2:	4313      	orrs	r3, r2
 810c0f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810c0f6:	68fb      	ldr	r3, [r7, #12]
 810c0f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810c0fc:	683b      	ldr	r3, [r7, #0]
 810c0fe:	695b      	ldr	r3, [r3, #20]
 810c100:	4313      	orrs	r3, r2
 810c102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810c104:	68fb      	ldr	r3, [r7, #12]
 810c106:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810c10a:	683b      	ldr	r3, [r7, #0]
 810c10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c10e:	4313      	orrs	r3, r2
 810c110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810c112:	68fb      	ldr	r3, [r7, #12]
 810c114:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810c118:	683b      	ldr	r3, [r7, #0]
 810c11a:	699b      	ldr	r3, [r3, #24]
 810c11c:	041b      	lsls	r3, r3, #16
 810c11e:	4313      	orrs	r3, r2
 810c120:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810c122:	687b      	ldr	r3, [r7, #4]
 810c124:	681b      	ldr	r3, [r3, #0]
 810c126:	4a16      	ldr	r2, [pc, #88]	@ (810c180 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810c128:	4293      	cmp	r3, r2
 810c12a:	d004      	beq.n	810c136 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810c12c:	687b      	ldr	r3, [r7, #4]
 810c12e:	681b      	ldr	r3, [r3, #0]
 810c130:	4a14      	ldr	r2, [pc, #80]	@ (810c184 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810c132:	4293      	cmp	r3, r2
 810c134:	d115      	bne.n	810c162 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810c136:	68fb      	ldr	r3, [r7, #12]
 810c138:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810c13c:	683b      	ldr	r3, [r7, #0]
 810c13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c140:	051b      	lsls	r3, r3, #20
 810c142:	4313      	orrs	r3, r2
 810c144:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810c146:	68fb      	ldr	r3, [r7, #12]
 810c148:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810c14c:	683b      	ldr	r3, [r7, #0]
 810c14e:	69db      	ldr	r3, [r3, #28]
 810c150:	4313      	orrs	r3, r2
 810c152:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810c154:	68fb      	ldr	r3, [r7, #12]
 810c156:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810c15a:	683b      	ldr	r3, [r7, #0]
 810c15c:	6a1b      	ldr	r3, [r3, #32]
 810c15e:	4313      	orrs	r3, r2
 810c160:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810c162:	687b      	ldr	r3, [r7, #4]
 810c164:	681b      	ldr	r3, [r3, #0]
 810c166:	68fa      	ldr	r2, [r7, #12]
 810c168:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810c16a:	687b      	ldr	r3, [r7, #4]
 810c16c:	2200      	movs	r2, #0
 810c16e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810c172:	2300      	movs	r3, #0
}
 810c174:	4618      	mov	r0, r3
 810c176:	3714      	adds	r7, #20
 810c178:	46bd      	mov	sp, r7
 810c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c17e:	4770      	bx	lr
 810c180:	40010000 	.word	0x40010000
 810c184:	40010400 	.word	0x40010400

0810c188 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810c188:	b480      	push	{r7}
 810c18a:	b083      	sub	sp, #12
 810c18c:	af00      	add	r7, sp, #0
 810c18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810c190:	bf00      	nop
 810c192:	370c      	adds	r7, #12
 810c194:	46bd      	mov	sp, r7
 810c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c19a:	4770      	bx	lr

0810c19c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810c19c:	b480      	push	{r7}
 810c19e:	b083      	sub	sp, #12
 810c1a0:	af00      	add	r7, sp, #0
 810c1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810c1a4:	bf00      	nop
 810c1a6:	370c      	adds	r7, #12
 810c1a8:	46bd      	mov	sp, r7
 810c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1ae:	4770      	bx	lr

0810c1b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810c1b0:	b480      	push	{r7}
 810c1b2:	b083      	sub	sp, #12
 810c1b4:	af00      	add	r7, sp, #0
 810c1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810c1b8:	bf00      	nop
 810c1ba:	370c      	adds	r7, #12
 810c1bc:	46bd      	mov	sp, r7
 810c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1c2:	4770      	bx	lr

0810c1c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810c1c4:	b580      	push	{r7, lr}
 810c1c6:	b082      	sub	sp, #8
 810c1c8:	af00      	add	r7, sp, #0
 810c1ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810c1cc:	687b      	ldr	r3, [r7, #4]
 810c1ce:	2b00      	cmp	r3, #0
 810c1d0:	d101      	bne.n	810c1d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810c1d2:	2301      	movs	r3, #1
 810c1d4:	e042      	b.n	810c25c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810c1d6:	687b      	ldr	r3, [r7, #4]
 810c1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c1dc:	2b00      	cmp	r3, #0
 810c1de:	d106      	bne.n	810c1ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810c1e0:	687b      	ldr	r3, [r7, #4]
 810c1e2:	2200      	movs	r2, #0
 810c1e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810c1e8:	6878      	ldr	r0, [r7, #4]
 810c1ea:	f7f7 fe35 	bl	8103e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810c1ee:	687b      	ldr	r3, [r7, #4]
 810c1f0:	2224      	movs	r2, #36	@ 0x24
 810c1f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810c1f6:	687b      	ldr	r3, [r7, #4]
 810c1f8:	681b      	ldr	r3, [r3, #0]
 810c1fa:	681a      	ldr	r2, [r3, #0]
 810c1fc:	687b      	ldr	r3, [r7, #4]
 810c1fe:	681b      	ldr	r3, [r3, #0]
 810c200:	f022 0201 	bic.w	r2, r2, #1
 810c204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810c206:	687b      	ldr	r3, [r7, #4]
 810c208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c20a:	2b00      	cmp	r3, #0
 810c20c:	d002      	beq.n	810c214 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810c20e:	6878      	ldr	r0, [r7, #4]
 810c210:	f001 fb0c 	bl	810d82c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810c214:	6878      	ldr	r0, [r7, #4]
 810c216:	f000 fda1 	bl	810cd5c <UART_SetConfig>
 810c21a:	4603      	mov	r3, r0
 810c21c:	2b01      	cmp	r3, #1
 810c21e:	d101      	bne.n	810c224 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810c220:	2301      	movs	r3, #1
 810c222:	e01b      	b.n	810c25c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810c224:	687b      	ldr	r3, [r7, #4]
 810c226:	681b      	ldr	r3, [r3, #0]
 810c228:	685a      	ldr	r2, [r3, #4]
 810c22a:	687b      	ldr	r3, [r7, #4]
 810c22c:	681b      	ldr	r3, [r3, #0]
 810c22e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810c232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810c234:	687b      	ldr	r3, [r7, #4]
 810c236:	681b      	ldr	r3, [r3, #0]
 810c238:	689a      	ldr	r2, [r3, #8]
 810c23a:	687b      	ldr	r3, [r7, #4]
 810c23c:	681b      	ldr	r3, [r3, #0]
 810c23e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810c242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810c244:	687b      	ldr	r3, [r7, #4]
 810c246:	681b      	ldr	r3, [r3, #0]
 810c248:	681a      	ldr	r2, [r3, #0]
 810c24a:	687b      	ldr	r3, [r7, #4]
 810c24c:	681b      	ldr	r3, [r3, #0]
 810c24e:	f042 0201 	orr.w	r2, r2, #1
 810c252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810c254:	6878      	ldr	r0, [r7, #4]
 810c256:	f001 fb8b 	bl	810d970 <UART_CheckIdleState>
 810c25a:	4603      	mov	r3, r0
}
 810c25c:	4618      	mov	r0, r3
 810c25e:	3708      	adds	r7, #8
 810c260:	46bd      	mov	sp, r7
 810c262:	bd80      	pop	{r7, pc}

0810c264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810c264:	b580      	push	{r7, lr}
 810c266:	b08a      	sub	sp, #40	@ 0x28
 810c268:	af02      	add	r7, sp, #8
 810c26a:	60f8      	str	r0, [r7, #12]
 810c26c:	60b9      	str	r1, [r7, #8]
 810c26e:	603b      	str	r3, [r7, #0]
 810c270:	4613      	mov	r3, r2
 810c272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810c274:	68fb      	ldr	r3, [r7, #12]
 810c276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c27a:	2b20      	cmp	r3, #32
 810c27c:	d17b      	bne.n	810c376 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810c27e:	68bb      	ldr	r3, [r7, #8]
 810c280:	2b00      	cmp	r3, #0
 810c282:	d002      	beq.n	810c28a <HAL_UART_Transmit+0x26>
 810c284:	88fb      	ldrh	r3, [r7, #6]
 810c286:	2b00      	cmp	r3, #0
 810c288:	d101      	bne.n	810c28e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810c28a:	2301      	movs	r3, #1
 810c28c:	e074      	b.n	810c378 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c28e:	68fb      	ldr	r3, [r7, #12]
 810c290:	2200      	movs	r2, #0
 810c292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810c296:	68fb      	ldr	r3, [r7, #12]
 810c298:	2221      	movs	r2, #33	@ 0x21
 810c29a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810c29e:	f7f8 f895 	bl	81043cc <HAL_GetTick>
 810c2a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810c2a4:	68fb      	ldr	r3, [r7, #12]
 810c2a6:	88fa      	ldrh	r2, [r7, #6]
 810c2a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810c2ac:	68fb      	ldr	r3, [r7, #12]
 810c2ae:	88fa      	ldrh	r2, [r7, #6]
 810c2b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810c2b4:	68fb      	ldr	r3, [r7, #12]
 810c2b6:	689b      	ldr	r3, [r3, #8]
 810c2b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c2bc:	d108      	bne.n	810c2d0 <HAL_UART_Transmit+0x6c>
 810c2be:	68fb      	ldr	r3, [r7, #12]
 810c2c0:	691b      	ldr	r3, [r3, #16]
 810c2c2:	2b00      	cmp	r3, #0
 810c2c4:	d104      	bne.n	810c2d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810c2c6:	2300      	movs	r3, #0
 810c2c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810c2ca:	68bb      	ldr	r3, [r7, #8]
 810c2cc:	61bb      	str	r3, [r7, #24]
 810c2ce:	e003      	b.n	810c2d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810c2d0:	68bb      	ldr	r3, [r7, #8]
 810c2d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810c2d4:	2300      	movs	r3, #0
 810c2d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810c2d8:	e030      	b.n	810c33c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810c2da:	683b      	ldr	r3, [r7, #0]
 810c2dc:	9300      	str	r3, [sp, #0]
 810c2de:	697b      	ldr	r3, [r7, #20]
 810c2e0:	2200      	movs	r2, #0
 810c2e2:	2180      	movs	r1, #128	@ 0x80
 810c2e4:	68f8      	ldr	r0, [r7, #12]
 810c2e6:	f001 fbed 	bl	810dac4 <UART_WaitOnFlagUntilTimeout>
 810c2ea:	4603      	mov	r3, r0
 810c2ec:	2b00      	cmp	r3, #0
 810c2ee:	d005      	beq.n	810c2fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810c2f0:	68fb      	ldr	r3, [r7, #12]
 810c2f2:	2220      	movs	r2, #32
 810c2f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810c2f8:	2303      	movs	r3, #3
 810c2fa:	e03d      	b.n	810c378 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810c2fc:	69fb      	ldr	r3, [r7, #28]
 810c2fe:	2b00      	cmp	r3, #0
 810c300:	d10b      	bne.n	810c31a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810c302:	69bb      	ldr	r3, [r7, #24]
 810c304:	881b      	ldrh	r3, [r3, #0]
 810c306:	461a      	mov	r2, r3
 810c308:	68fb      	ldr	r3, [r7, #12]
 810c30a:	681b      	ldr	r3, [r3, #0]
 810c30c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810c310:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810c312:	69bb      	ldr	r3, [r7, #24]
 810c314:	3302      	adds	r3, #2
 810c316:	61bb      	str	r3, [r7, #24]
 810c318:	e007      	b.n	810c32a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810c31a:	69fb      	ldr	r3, [r7, #28]
 810c31c:	781a      	ldrb	r2, [r3, #0]
 810c31e:	68fb      	ldr	r3, [r7, #12]
 810c320:	681b      	ldr	r3, [r3, #0]
 810c322:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810c324:	69fb      	ldr	r3, [r7, #28]
 810c326:	3301      	adds	r3, #1
 810c328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810c32a:	68fb      	ldr	r3, [r7, #12]
 810c32c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810c330:	b29b      	uxth	r3, r3
 810c332:	3b01      	subs	r3, #1
 810c334:	b29a      	uxth	r2, r3
 810c336:	68fb      	ldr	r3, [r7, #12]
 810c338:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810c33c:	68fb      	ldr	r3, [r7, #12]
 810c33e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810c342:	b29b      	uxth	r3, r3
 810c344:	2b00      	cmp	r3, #0
 810c346:	d1c8      	bne.n	810c2da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810c348:	683b      	ldr	r3, [r7, #0]
 810c34a:	9300      	str	r3, [sp, #0]
 810c34c:	697b      	ldr	r3, [r7, #20]
 810c34e:	2200      	movs	r2, #0
 810c350:	2140      	movs	r1, #64	@ 0x40
 810c352:	68f8      	ldr	r0, [r7, #12]
 810c354:	f001 fbb6 	bl	810dac4 <UART_WaitOnFlagUntilTimeout>
 810c358:	4603      	mov	r3, r0
 810c35a:	2b00      	cmp	r3, #0
 810c35c:	d005      	beq.n	810c36a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810c35e:	68fb      	ldr	r3, [r7, #12]
 810c360:	2220      	movs	r2, #32
 810c362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810c366:	2303      	movs	r3, #3
 810c368:	e006      	b.n	810c378 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810c36a:	68fb      	ldr	r3, [r7, #12]
 810c36c:	2220      	movs	r2, #32
 810c36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810c372:	2300      	movs	r3, #0
 810c374:	e000      	b.n	810c378 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810c376:	2302      	movs	r3, #2
  }
}
 810c378:	4618      	mov	r0, r3
 810c37a:	3720      	adds	r7, #32
 810c37c:	46bd      	mov	sp, r7
 810c37e:	bd80      	pop	{r7, pc}

0810c380 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810c380:	b580      	push	{r7, lr}
 810c382:	b08a      	sub	sp, #40	@ 0x28
 810c384:	af02      	add	r7, sp, #8
 810c386:	60f8      	str	r0, [r7, #12]
 810c388:	60b9      	str	r1, [r7, #8]
 810c38a:	603b      	str	r3, [r7, #0]
 810c38c:	4613      	mov	r3, r2
 810c38e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810c390:	68fb      	ldr	r3, [r7, #12]
 810c392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810c396:	2b20      	cmp	r3, #32
 810c398:	f040 80b5 	bne.w	810c506 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810c39c:	68bb      	ldr	r3, [r7, #8]
 810c39e:	2b00      	cmp	r3, #0
 810c3a0:	d002      	beq.n	810c3a8 <HAL_UART_Receive+0x28>
 810c3a2:	88fb      	ldrh	r3, [r7, #6]
 810c3a4:	2b00      	cmp	r3, #0
 810c3a6:	d101      	bne.n	810c3ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810c3a8:	2301      	movs	r3, #1
 810c3aa:	e0ad      	b.n	810c508 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c3ac:	68fb      	ldr	r3, [r7, #12]
 810c3ae:	2200      	movs	r2, #0
 810c3b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810c3b4:	68fb      	ldr	r3, [r7, #12]
 810c3b6:	2222      	movs	r2, #34	@ 0x22
 810c3b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c3bc:	68fb      	ldr	r3, [r7, #12]
 810c3be:	2200      	movs	r2, #0
 810c3c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810c3c2:	f7f8 f803 	bl	81043cc <HAL_GetTick>
 810c3c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810c3c8:	68fb      	ldr	r3, [r7, #12]
 810c3ca:	88fa      	ldrh	r2, [r7, #6]
 810c3cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810c3d0:	68fb      	ldr	r3, [r7, #12]
 810c3d2:	88fa      	ldrh	r2, [r7, #6]
 810c3d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810c3d8:	68fb      	ldr	r3, [r7, #12]
 810c3da:	689b      	ldr	r3, [r3, #8]
 810c3dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c3e0:	d10e      	bne.n	810c400 <HAL_UART_Receive+0x80>
 810c3e2:	68fb      	ldr	r3, [r7, #12]
 810c3e4:	691b      	ldr	r3, [r3, #16]
 810c3e6:	2b00      	cmp	r3, #0
 810c3e8:	d105      	bne.n	810c3f6 <HAL_UART_Receive+0x76>
 810c3ea:	68fb      	ldr	r3, [r7, #12]
 810c3ec:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810c3f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c3f4:	e02d      	b.n	810c452 <HAL_UART_Receive+0xd2>
 810c3f6:	68fb      	ldr	r3, [r7, #12]
 810c3f8:	22ff      	movs	r2, #255	@ 0xff
 810c3fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c3fe:	e028      	b.n	810c452 <HAL_UART_Receive+0xd2>
 810c400:	68fb      	ldr	r3, [r7, #12]
 810c402:	689b      	ldr	r3, [r3, #8]
 810c404:	2b00      	cmp	r3, #0
 810c406:	d10d      	bne.n	810c424 <HAL_UART_Receive+0xa4>
 810c408:	68fb      	ldr	r3, [r7, #12]
 810c40a:	691b      	ldr	r3, [r3, #16]
 810c40c:	2b00      	cmp	r3, #0
 810c40e:	d104      	bne.n	810c41a <HAL_UART_Receive+0x9a>
 810c410:	68fb      	ldr	r3, [r7, #12]
 810c412:	22ff      	movs	r2, #255	@ 0xff
 810c414:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c418:	e01b      	b.n	810c452 <HAL_UART_Receive+0xd2>
 810c41a:	68fb      	ldr	r3, [r7, #12]
 810c41c:	227f      	movs	r2, #127	@ 0x7f
 810c41e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c422:	e016      	b.n	810c452 <HAL_UART_Receive+0xd2>
 810c424:	68fb      	ldr	r3, [r7, #12]
 810c426:	689b      	ldr	r3, [r3, #8]
 810c428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c42c:	d10d      	bne.n	810c44a <HAL_UART_Receive+0xca>
 810c42e:	68fb      	ldr	r3, [r7, #12]
 810c430:	691b      	ldr	r3, [r3, #16]
 810c432:	2b00      	cmp	r3, #0
 810c434:	d104      	bne.n	810c440 <HAL_UART_Receive+0xc0>
 810c436:	68fb      	ldr	r3, [r7, #12]
 810c438:	227f      	movs	r2, #127	@ 0x7f
 810c43a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c43e:	e008      	b.n	810c452 <HAL_UART_Receive+0xd2>
 810c440:	68fb      	ldr	r3, [r7, #12]
 810c442:	223f      	movs	r2, #63	@ 0x3f
 810c444:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c448:	e003      	b.n	810c452 <HAL_UART_Receive+0xd2>
 810c44a:	68fb      	ldr	r3, [r7, #12]
 810c44c:	2200      	movs	r2, #0
 810c44e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810c452:	68fb      	ldr	r3, [r7, #12]
 810c454:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810c458:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810c45a:	68fb      	ldr	r3, [r7, #12]
 810c45c:	689b      	ldr	r3, [r3, #8]
 810c45e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c462:	d108      	bne.n	810c476 <HAL_UART_Receive+0xf6>
 810c464:	68fb      	ldr	r3, [r7, #12]
 810c466:	691b      	ldr	r3, [r3, #16]
 810c468:	2b00      	cmp	r3, #0
 810c46a:	d104      	bne.n	810c476 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810c46c:	2300      	movs	r3, #0
 810c46e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810c470:	68bb      	ldr	r3, [r7, #8]
 810c472:	61bb      	str	r3, [r7, #24]
 810c474:	e003      	b.n	810c47e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810c476:	68bb      	ldr	r3, [r7, #8]
 810c478:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810c47a:	2300      	movs	r3, #0
 810c47c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810c47e:	e036      	b.n	810c4ee <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810c480:	683b      	ldr	r3, [r7, #0]
 810c482:	9300      	str	r3, [sp, #0]
 810c484:	697b      	ldr	r3, [r7, #20]
 810c486:	2200      	movs	r2, #0
 810c488:	2120      	movs	r1, #32
 810c48a:	68f8      	ldr	r0, [r7, #12]
 810c48c:	f001 fb1a 	bl	810dac4 <UART_WaitOnFlagUntilTimeout>
 810c490:	4603      	mov	r3, r0
 810c492:	2b00      	cmp	r3, #0
 810c494:	d005      	beq.n	810c4a2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810c496:	68fb      	ldr	r3, [r7, #12]
 810c498:	2220      	movs	r2, #32
 810c49a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810c49e:	2303      	movs	r3, #3
 810c4a0:	e032      	b.n	810c508 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810c4a2:	69fb      	ldr	r3, [r7, #28]
 810c4a4:	2b00      	cmp	r3, #0
 810c4a6:	d10c      	bne.n	810c4c2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810c4a8:	68fb      	ldr	r3, [r7, #12]
 810c4aa:	681b      	ldr	r3, [r3, #0]
 810c4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c4ae:	b29a      	uxth	r2, r3
 810c4b0:	8a7b      	ldrh	r3, [r7, #18]
 810c4b2:	4013      	ands	r3, r2
 810c4b4:	b29a      	uxth	r2, r3
 810c4b6:	69bb      	ldr	r3, [r7, #24]
 810c4b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810c4ba:	69bb      	ldr	r3, [r7, #24]
 810c4bc:	3302      	adds	r3, #2
 810c4be:	61bb      	str	r3, [r7, #24]
 810c4c0:	e00c      	b.n	810c4dc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810c4c2:	68fb      	ldr	r3, [r7, #12]
 810c4c4:	681b      	ldr	r3, [r3, #0]
 810c4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c4c8:	b2da      	uxtb	r2, r3
 810c4ca:	8a7b      	ldrh	r3, [r7, #18]
 810c4cc:	b2db      	uxtb	r3, r3
 810c4ce:	4013      	ands	r3, r2
 810c4d0:	b2da      	uxtb	r2, r3
 810c4d2:	69fb      	ldr	r3, [r7, #28]
 810c4d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810c4d6:	69fb      	ldr	r3, [r7, #28]
 810c4d8:	3301      	adds	r3, #1
 810c4da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810c4dc:	68fb      	ldr	r3, [r7, #12]
 810c4de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810c4e2:	b29b      	uxth	r3, r3
 810c4e4:	3b01      	subs	r3, #1
 810c4e6:	b29a      	uxth	r2, r3
 810c4e8:	68fb      	ldr	r3, [r7, #12]
 810c4ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810c4ee:	68fb      	ldr	r3, [r7, #12]
 810c4f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810c4f4:	b29b      	uxth	r3, r3
 810c4f6:	2b00      	cmp	r3, #0
 810c4f8:	d1c2      	bne.n	810c480 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810c4fa:	68fb      	ldr	r3, [r7, #12]
 810c4fc:	2220      	movs	r2, #32
 810c4fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810c502:	2300      	movs	r3, #0
 810c504:	e000      	b.n	810c508 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810c506:	2302      	movs	r3, #2
  }
}
 810c508:	4618      	mov	r0, r3
 810c50a:	3720      	adds	r7, #32
 810c50c:	46bd      	mov	sp, r7
 810c50e:	bd80      	pop	{r7, pc}

0810c510 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810c510:	b580      	push	{r7, lr}
 810c512:	b08a      	sub	sp, #40	@ 0x28
 810c514:	af00      	add	r7, sp, #0
 810c516:	60f8      	str	r0, [r7, #12]
 810c518:	60b9      	str	r1, [r7, #8]
 810c51a:	4613      	mov	r3, r2
 810c51c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810c51e:	68fb      	ldr	r3, [r7, #12]
 810c520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810c524:	2b20      	cmp	r3, #32
 810c526:	d137      	bne.n	810c598 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 810c528:	68bb      	ldr	r3, [r7, #8]
 810c52a:	2b00      	cmp	r3, #0
 810c52c:	d002      	beq.n	810c534 <HAL_UART_Receive_IT+0x24>
 810c52e:	88fb      	ldrh	r3, [r7, #6]
 810c530:	2b00      	cmp	r3, #0
 810c532:	d101      	bne.n	810c538 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 810c534:	2301      	movs	r3, #1
 810c536:	e030      	b.n	810c59a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c538:	68fb      	ldr	r3, [r7, #12]
 810c53a:	2200      	movs	r2, #0
 810c53c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810c53e:	68fb      	ldr	r3, [r7, #12]
 810c540:	681b      	ldr	r3, [r3, #0]
 810c542:	4a18      	ldr	r2, [pc, #96]	@ (810c5a4 <HAL_UART_Receive_IT+0x94>)
 810c544:	4293      	cmp	r3, r2
 810c546:	d01f      	beq.n	810c588 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810c548:	68fb      	ldr	r3, [r7, #12]
 810c54a:	681b      	ldr	r3, [r3, #0]
 810c54c:	685b      	ldr	r3, [r3, #4]
 810c54e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810c552:	2b00      	cmp	r3, #0
 810c554:	d018      	beq.n	810c588 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810c556:	68fb      	ldr	r3, [r7, #12]
 810c558:	681b      	ldr	r3, [r3, #0]
 810c55a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c55c:	697b      	ldr	r3, [r7, #20]
 810c55e:	e853 3f00 	ldrex	r3, [r3]
 810c562:	613b      	str	r3, [r7, #16]
   return(result);
 810c564:	693b      	ldr	r3, [r7, #16]
 810c566:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810c56a:	627b      	str	r3, [r7, #36]	@ 0x24
 810c56c:	68fb      	ldr	r3, [r7, #12]
 810c56e:	681b      	ldr	r3, [r3, #0]
 810c570:	461a      	mov	r2, r3
 810c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c574:	623b      	str	r3, [r7, #32]
 810c576:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c578:	69f9      	ldr	r1, [r7, #28]
 810c57a:	6a3a      	ldr	r2, [r7, #32]
 810c57c:	e841 2300 	strex	r3, r2, [r1]
 810c580:	61bb      	str	r3, [r7, #24]
   return(result);
 810c582:	69bb      	ldr	r3, [r7, #24]
 810c584:	2b00      	cmp	r3, #0
 810c586:	d1e6      	bne.n	810c556 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 810c588:	88fb      	ldrh	r3, [r7, #6]
 810c58a:	461a      	mov	r2, r3
 810c58c:	68b9      	ldr	r1, [r7, #8]
 810c58e:	68f8      	ldr	r0, [r7, #12]
 810c590:	f001 fb06 	bl	810dba0 <UART_Start_Receive_IT>
 810c594:	4603      	mov	r3, r0
 810c596:	e000      	b.n	810c59a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810c598:	2302      	movs	r3, #2
  }
}
 810c59a:	4618      	mov	r0, r3
 810c59c:	3728      	adds	r7, #40	@ 0x28
 810c59e:	46bd      	mov	sp, r7
 810c5a0:	bd80      	pop	{r7, pc}
 810c5a2:	bf00      	nop
 810c5a4:	58000c00 	.word	0x58000c00

0810c5a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810c5a8:	b580      	push	{r7, lr}
 810c5aa:	b0ba      	sub	sp, #232	@ 0xe8
 810c5ac:	af00      	add	r7, sp, #0
 810c5ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810c5b0:	687b      	ldr	r3, [r7, #4]
 810c5b2:	681b      	ldr	r3, [r3, #0]
 810c5b4:	69db      	ldr	r3, [r3, #28]
 810c5b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810c5ba:	687b      	ldr	r3, [r7, #4]
 810c5bc:	681b      	ldr	r3, [r3, #0]
 810c5be:	681b      	ldr	r3, [r3, #0]
 810c5c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810c5c4:	687b      	ldr	r3, [r7, #4]
 810c5c6:	681b      	ldr	r3, [r3, #0]
 810c5c8:	689b      	ldr	r3, [r3, #8]
 810c5ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810c5ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 810c5d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 810c5d6:	4013      	ands	r3, r2
 810c5d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810c5dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810c5e0:	2b00      	cmp	r3, #0
 810c5e2:	d11b      	bne.n	810c61c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c5e8:	f003 0320 	and.w	r3, r3, #32
 810c5ec:	2b00      	cmp	r3, #0
 810c5ee:	d015      	beq.n	810c61c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c5f4:	f003 0320 	and.w	r3, r3, #32
 810c5f8:	2b00      	cmp	r3, #0
 810c5fa:	d105      	bne.n	810c608 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c5fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c604:	2b00      	cmp	r3, #0
 810c606:	d009      	beq.n	810c61c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 810c608:	687b      	ldr	r3, [r7, #4]
 810c60a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c60c:	2b00      	cmp	r3, #0
 810c60e:	f000 8379 	beq.w	810cd04 <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 810c612:	687b      	ldr	r3, [r7, #4]
 810c614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c616:	6878      	ldr	r0, [r7, #4]
 810c618:	4798      	blx	r3
      }
      return;
 810c61a:	e373      	b.n	810cd04 <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810c61c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810c620:	2b00      	cmp	r3, #0
 810c622:	f000 8123 	beq.w	810c86c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810c626:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810c62a:	4b8d      	ldr	r3, [pc, #564]	@ (810c860 <HAL_UART_IRQHandler+0x2b8>)
 810c62c:	4013      	ands	r3, r2
 810c62e:	2b00      	cmp	r3, #0
 810c630:	d106      	bne.n	810c640 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810c632:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 810c636:	4b8b      	ldr	r3, [pc, #556]	@ (810c864 <HAL_UART_IRQHandler+0x2bc>)
 810c638:	4013      	ands	r3, r2
 810c63a:	2b00      	cmp	r3, #0
 810c63c:	f000 8116 	beq.w	810c86c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810c640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c644:	f003 0301 	and.w	r3, r3, #1
 810c648:	2b00      	cmp	r3, #0
 810c64a:	d011      	beq.n	810c670 <HAL_UART_IRQHandler+0xc8>
 810c64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810c654:	2b00      	cmp	r3, #0
 810c656:	d00b      	beq.n	810c670 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810c658:	687b      	ldr	r3, [r7, #4]
 810c65a:	681b      	ldr	r3, [r3, #0]
 810c65c:	2201      	movs	r2, #1
 810c65e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810c660:	687b      	ldr	r3, [r7, #4]
 810c662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c666:	f043 0201 	orr.w	r2, r3, #1
 810c66a:	687b      	ldr	r3, [r7, #4]
 810c66c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c674:	f003 0302 	and.w	r3, r3, #2
 810c678:	2b00      	cmp	r3, #0
 810c67a:	d011      	beq.n	810c6a0 <HAL_UART_IRQHandler+0xf8>
 810c67c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c680:	f003 0301 	and.w	r3, r3, #1
 810c684:	2b00      	cmp	r3, #0
 810c686:	d00b      	beq.n	810c6a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810c688:	687b      	ldr	r3, [r7, #4]
 810c68a:	681b      	ldr	r3, [r3, #0]
 810c68c:	2202      	movs	r2, #2
 810c68e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810c690:	687b      	ldr	r3, [r7, #4]
 810c692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c696:	f043 0204 	orr.w	r2, r3, #4
 810c69a:	687b      	ldr	r3, [r7, #4]
 810c69c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c6a4:	f003 0304 	and.w	r3, r3, #4
 810c6a8:	2b00      	cmp	r3, #0
 810c6aa:	d011      	beq.n	810c6d0 <HAL_UART_IRQHandler+0x128>
 810c6ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c6b0:	f003 0301 	and.w	r3, r3, #1
 810c6b4:	2b00      	cmp	r3, #0
 810c6b6:	d00b      	beq.n	810c6d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810c6b8:	687b      	ldr	r3, [r7, #4]
 810c6ba:	681b      	ldr	r3, [r3, #0]
 810c6bc:	2204      	movs	r2, #4
 810c6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810c6c0:	687b      	ldr	r3, [r7, #4]
 810c6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c6c6:	f043 0202 	orr.w	r2, r3, #2
 810c6ca:	687b      	ldr	r3, [r7, #4]
 810c6cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810c6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c6d4:	f003 0308 	and.w	r3, r3, #8
 810c6d8:	2b00      	cmp	r3, #0
 810c6da:	d017      	beq.n	810c70c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c6e0:	f003 0320 	and.w	r3, r3, #32
 810c6e4:	2b00      	cmp	r3, #0
 810c6e6:	d105      	bne.n	810c6f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810c6e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810c6ec:	4b5c      	ldr	r3, [pc, #368]	@ (810c860 <HAL_UART_IRQHandler+0x2b8>)
 810c6ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c6f0:	2b00      	cmp	r3, #0
 810c6f2:	d00b      	beq.n	810c70c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810c6f4:	687b      	ldr	r3, [r7, #4]
 810c6f6:	681b      	ldr	r3, [r3, #0]
 810c6f8:	2208      	movs	r2, #8
 810c6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810c6fc:	687b      	ldr	r3, [r7, #4]
 810c6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c702:	f043 0208 	orr.w	r2, r3, #8
 810c706:	687b      	ldr	r3, [r7, #4]
 810c708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810c70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810c714:	2b00      	cmp	r3, #0
 810c716:	d012      	beq.n	810c73e <HAL_UART_IRQHandler+0x196>
 810c718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c71c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810c720:	2b00      	cmp	r3, #0
 810c722:	d00c      	beq.n	810c73e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c724:	687b      	ldr	r3, [r7, #4]
 810c726:	681b      	ldr	r3, [r3, #0]
 810c728:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c72c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810c72e:	687b      	ldr	r3, [r7, #4]
 810c730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c734:	f043 0220 	orr.w	r2, r3, #32
 810c738:	687b      	ldr	r3, [r7, #4]
 810c73a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810c73e:	687b      	ldr	r3, [r7, #4]
 810c740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c744:	2b00      	cmp	r3, #0
 810c746:	f000 82df 	beq.w	810cd08 <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c74a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c74e:	f003 0320 	and.w	r3, r3, #32
 810c752:	2b00      	cmp	r3, #0
 810c754:	d013      	beq.n	810c77e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c75a:	f003 0320 	and.w	r3, r3, #32
 810c75e:	2b00      	cmp	r3, #0
 810c760:	d105      	bne.n	810c76e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c76a:	2b00      	cmp	r3, #0
 810c76c:	d007      	beq.n	810c77e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810c76e:	687b      	ldr	r3, [r7, #4]
 810c770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c772:	2b00      	cmp	r3, #0
 810c774:	d003      	beq.n	810c77e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810c776:	687b      	ldr	r3, [r7, #4]
 810c778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c77a:	6878      	ldr	r0, [r7, #4]
 810c77c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810c77e:	687b      	ldr	r3, [r7, #4]
 810c780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c784:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c788:	687b      	ldr	r3, [r7, #4]
 810c78a:	681b      	ldr	r3, [r3, #0]
 810c78c:	689b      	ldr	r3, [r3, #8]
 810c78e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c792:	2b40      	cmp	r3, #64	@ 0x40
 810c794:	d005      	beq.n	810c7a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810c796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810c79a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c79e:	2b00      	cmp	r3, #0
 810c7a0:	d054      	beq.n	810c84c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810c7a2:	6878      	ldr	r0, [r7, #4]
 810c7a4:	f001 fb1e 	bl	810dde4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c7a8:	687b      	ldr	r3, [r7, #4]
 810c7aa:	681b      	ldr	r3, [r3, #0]
 810c7ac:	689b      	ldr	r3, [r3, #8]
 810c7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c7b2:	2b40      	cmp	r3, #64	@ 0x40
 810c7b4:	d146      	bne.n	810c844 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c7b6:	687b      	ldr	r3, [r7, #4]
 810c7b8:	681b      	ldr	r3, [r3, #0]
 810c7ba:	3308      	adds	r3, #8
 810c7bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c7c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810c7c4:	e853 3f00 	ldrex	r3, [r3]
 810c7c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 810c7cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810c7d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810c7d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810c7d8:	687b      	ldr	r3, [r7, #4]
 810c7da:	681b      	ldr	r3, [r3, #0]
 810c7dc:	3308      	adds	r3, #8
 810c7de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 810c7e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 810c7e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c7ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 810c7ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 810c7f2:	e841 2300 	strex	r3, r2, [r1]
 810c7f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 810c7fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810c7fe:	2b00      	cmp	r3, #0
 810c800:	d1d9      	bne.n	810c7b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810c802:	687b      	ldr	r3, [r7, #4]
 810c804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c808:	2b00      	cmp	r3, #0
 810c80a:	d017      	beq.n	810c83c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810c80c:	687b      	ldr	r3, [r7, #4]
 810c80e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c812:	4a15      	ldr	r2, [pc, #84]	@ (810c868 <HAL_UART_IRQHandler+0x2c0>)
 810c814:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810c816:	687b      	ldr	r3, [r7, #4]
 810c818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c81c:	4618      	mov	r0, r3
 810c81e:	f7f9 ff3b 	bl	8106698 <HAL_DMA_Abort_IT>
 810c822:	4603      	mov	r3, r0
 810c824:	2b00      	cmp	r3, #0
 810c826:	d019      	beq.n	810c85c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810c828:	687b      	ldr	r3, [r7, #4]
 810c82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c82e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c830:	687a      	ldr	r2, [r7, #4]
 810c832:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 810c836:	4610      	mov	r0, r2
 810c838:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c83a:	e00f      	b.n	810c85c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810c83c:	6878      	ldr	r0, [r7, #4]
 810c83e:	f000 fa77 	bl	810cd30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c842:	e00b      	b.n	810c85c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810c844:	6878      	ldr	r0, [r7, #4]
 810c846:	f000 fa73 	bl	810cd30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c84a:	e007      	b.n	810c85c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810c84c:	6878      	ldr	r0, [r7, #4]
 810c84e:	f000 fa6f 	bl	810cd30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c852:	687b      	ldr	r3, [r7, #4]
 810c854:	2200      	movs	r2, #0
 810c856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810c85a:	e255      	b.n	810cd08 <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c85c:	bf00      	nop
    return;
 810c85e:	e253      	b.n	810cd08 <HAL_UART_IRQHandler+0x760>
 810c860:	10000001 	.word	0x10000001
 810c864:	04000120 	.word	0x04000120
 810c868:	0810deb1 	.word	0x0810deb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c86c:	687b      	ldr	r3, [r7, #4]
 810c86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c870:	2b01      	cmp	r3, #1
 810c872:	f040 81e9 	bne.w	810cc48 <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810c876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c87a:	f003 0310 	and.w	r3, r3, #16
 810c87e:	2b00      	cmp	r3, #0
 810c880:	f000 81e2 	beq.w	810cc48 <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810c884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c888:	f003 0310 	and.w	r3, r3, #16
 810c88c:	2b00      	cmp	r3, #0
 810c88e:	f000 81db 	beq.w	810cc48 <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810c892:	687b      	ldr	r3, [r7, #4]
 810c894:	681b      	ldr	r3, [r3, #0]
 810c896:	2210      	movs	r2, #16
 810c898:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c89a:	687b      	ldr	r3, [r7, #4]
 810c89c:	681b      	ldr	r3, [r3, #0]
 810c89e:	689b      	ldr	r3, [r3, #8]
 810c8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c8a4:	2b40      	cmp	r3, #64	@ 0x40
 810c8a6:	f040 8151 	bne.w	810cb4c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810c8aa:	687b      	ldr	r3, [r7, #4]
 810c8ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8b0:	681b      	ldr	r3, [r3, #0]
 810c8b2:	4a96      	ldr	r2, [pc, #600]	@ (810cb0c <HAL_UART_IRQHandler+0x564>)
 810c8b4:	4293      	cmp	r3, r2
 810c8b6:	d068      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c8b8:	687b      	ldr	r3, [r7, #4]
 810c8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8be:	681b      	ldr	r3, [r3, #0]
 810c8c0:	4a93      	ldr	r2, [pc, #588]	@ (810cb10 <HAL_UART_IRQHandler+0x568>)
 810c8c2:	4293      	cmp	r3, r2
 810c8c4:	d061      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c8c6:	687b      	ldr	r3, [r7, #4]
 810c8c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8cc:	681b      	ldr	r3, [r3, #0]
 810c8ce:	4a91      	ldr	r2, [pc, #580]	@ (810cb14 <HAL_UART_IRQHandler+0x56c>)
 810c8d0:	4293      	cmp	r3, r2
 810c8d2:	d05a      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c8d4:	687b      	ldr	r3, [r7, #4]
 810c8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8da:	681b      	ldr	r3, [r3, #0]
 810c8dc:	4a8e      	ldr	r2, [pc, #568]	@ (810cb18 <HAL_UART_IRQHandler+0x570>)
 810c8de:	4293      	cmp	r3, r2
 810c8e0:	d053      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c8e2:	687b      	ldr	r3, [r7, #4]
 810c8e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8e8:	681b      	ldr	r3, [r3, #0]
 810c8ea:	4a8c      	ldr	r2, [pc, #560]	@ (810cb1c <HAL_UART_IRQHandler+0x574>)
 810c8ec:	4293      	cmp	r3, r2
 810c8ee:	d04c      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c8f0:	687b      	ldr	r3, [r7, #4]
 810c8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8f6:	681b      	ldr	r3, [r3, #0]
 810c8f8:	4a89      	ldr	r2, [pc, #548]	@ (810cb20 <HAL_UART_IRQHandler+0x578>)
 810c8fa:	4293      	cmp	r3, r2
 810c8fc:	d045      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c8fe:	687b      	ldr	r3, [r7, #4]
 810c900:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c904:	681b      	ldr	r3, [r3, #0]
 810c906:	4a87      	ldr	r2, [pc, #540]	@ (810cb24 <HAL_UART_IRQHandler+0x57c>)
 810c908:	4293      	cmp	r3, r2
 810c90a:	d03e      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c90c:	687b      	ldr	r3, [r7, #4]
 810c90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c912:	681b      	ldr	r3, [r3, #0]
 810c914:	4a84      	ldr	r2, [pc, #528]	@ (810cb28 <HAL_UART_IRQHandler+0x580>)
 810c916:	4293      	cmp	r3, r2
 810c918:	d037      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c91a:	687b      	ldr	r3, [r7, #4]
 810c91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c920:	681b      	ldr	r3, [r3, #0]
 810c922:	4a82      	ldr	r2, [pc, #520]	@ (810cb2c <HAL_UART_IRQHandler+0x584>)
 810c924:	4293      	cmp	r3, r2
 810c926:	d030      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c928:	687b      	ldr	r3, [r7, #4]
 810c92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c92e:	681b      	ldr	r3, [r3, #0]
 810c930:	4a7f      	ldr	r2, [pc, #508]	@ (810cb30 <HAL_UART_IRQHandler+0x588>)
 810c932:	4293      	cmp	r3, r2
 810c934:	d029      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c936:	687b      	ldr	r3, [r7, #4]
 810c938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c93c:	681b      	ldr	r3, [r3, #0]
 810c93e:	4a7d      	ldr	r2, [pc, #500]	@ (810cb34 <HAL_UART_IRQHandler+0x58c>)
 810c940:	4293      	cmp	r3, r2
 810c942:	d022      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c944:	687b      	ldr	r3, [r7, #4]
 810c946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c94a:	681b      	ldr	r3, [r3, #0]
 810c94c:	4a7a      	ldr	r2, [pc, #488]	@ (810cb38 <HAL_UART_IRQHandler+0x590>)
 810c94e:	4293      	cmp	r3, r2
 810c950:	d01b      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c952:	687b      	ldr	r3, [r7, #4]
 810c954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c958:	681b      	ldr	r3, [r3, #0]
 810c95a:	4a78      	ldr	r2, [pc, #480]	@ (810cb3c <HAL_UART_IRQHandler+0x594>)
 810c95c:	4293      	cmp	r3, r2
 810c95e:	d014      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c960:	687b      	ldr	r3, [r7, #4]
 810c962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c966:	681b      	ldr	r3, [r3, #0]
 810c968:	4a75      	ldr	r2, [pc, #468]	@ (810cb40 <HAL_UART_IRQHandler+0x598>)
 810c96a:	4293      	cmp	r3, r2
 810c96c:	d00d      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c96e:	687b      	ldr	r3, [r7, #4]
 810c970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c974:	681b      	ldr	r3, [r3, #0]
 810c976:	4a73      	ldr	r2, [pc, #460]	@ (810cb44 <HAL_UART_IRQHandler+0x59c>)
 810c978:	4293      	cmp	r3, r2
 810c97a:	d006      	beq.n	810c98a <HAL_UART_IRQHandler+0x3e2>
 810c97c:	687b      	ldr	r3, [r7, #4]
 810c97e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c982:	681b      	ldr	r3, [r3, #0]
 810c984:	4a70      	ldr	r2, [pc, #448]	@ (810cb48 <HAL_UART_IRQHandler+0x5a0>)
 810c986:	4293      	cmp	r3, r2
 810c988:	d106      	bne.n	810c998 <HAL_UART_IRQHandler+0x3f0>
 810c98a:	687b      	ldr	r3, [r7, #4]
 810c98c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c990:	681b      	ldr	r3, [r3, #0]
 810c992:	685b      	ldr	r3, [r3, #4]
 810c994:	b29b      	uxth	r3, r3
 810c996:	e005      	b.n	810c9a4 <HAL_UART_IRQHandler+0x3fc>
 810c998:	687b      	ldr	r3, [r7, #4]
 810c99a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c99e:	681b      	ldr	r3, [r3, #0]
 810c9a0:	685b      	ldr	r3, [r3, #4]
 810c9a2:	b29b      	uxth	r3, r3
 810c9a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 810c9a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 810c9ac:	2b00      	cmp	r3, #0
 810c9ae:	f000 81ad 	beq.w	810cd0c <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810c9b2:	687b      	ldr	r3, [r7, #4]
 810c9b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810c9b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810c9bc:	429a      	cmp	r2, r3
 810c9be:	f080 81a5 	bcs.w	810cd0c <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810c9c2:	687b      	ldr	r3, [r7, #4]
 810c9c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810c9c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810c9cc:	687b      	ldr	r3, [r7, #4]
 810c9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c9d2:	69db      	ldr	r3, [r3, #28]
 810c9d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c9d8:	f000 8087 	beq.w	810caea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c9dc:	687b      	ldr	r3, [r7, #4]
 810c9de:	681b      	ldr	r3, [r3, #0]
 810c9e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c9e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 810c9e8:	e853 3f00 	ldrex	r3, [r3]
 810c9ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 810c9f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810c9f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810c9f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810c9fc:	687b      	ldr	r3, [r7, #4]
 810c9fe:	681b      	ldr	r3, [r3, #0]
 810ca00:	461a      	mov	r2, r3
 810ca02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 810ca06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810ca0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ca0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 810ca12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810ca16:	e841 2300 	strex	r3, r2, [r1]
 810ca1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810ca1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810ca22:	2b00      	cmp	r3, #0
 810ca24:	d1da      	bne.n	810c9dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ca26:	687b      	ldr	r3, [r7, #4]
 810ca28:	681b      	ldr	r3, [r3, #0]
 810ca2a:	3308      	adds	r3, #8
 810ca2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ca2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810ca30:	e853 3f00 	ldrex	r3, [r3]
 810ca34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810ca36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810ca38:	f023 0301 	bic.w	r3, r3, #1
 810ca3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810ca40:	687b      	ldr	r3, [r7, #4]
 810ca42:	681b      	ldr	r3, [r3, #0]
 810ca44:	3308      	adds	r3, #8
 810ca46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 810ca4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810ca4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ca50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810ca52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810ca56:	e841 2300 	strex	r3, r2, [r1]
 810ca5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810ca5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810ca5e:	2b00      	cmp	r3, #0
 810ca60:	d1e1      	bne.n	810ca26 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ca62:	687b      	ldr	r3, [r7, #4]
 810ca64:	681b      	ldr	r3, [r3, #0]
 810ca66:	3308      	adds	r3, #8
 810ca68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ca6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810ca6c:	e853 3f00 	ldrex	r3, [r3]
 810ca70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810ca72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810ca74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810ca78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810ca7c:	687b      	ldr	r3, [r7, #4]
 810ca7e:	681b      	ldr	r3, [r3, #0]
 810ca80:	3308      	adds	r3, #8
 810ca82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 810ca86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810ca88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ca8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810ca8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810ca8e:	e841 2300 	strex	r3, r2, [r1]
 810ca92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810ca94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810ca96:	2b00      	cmp	r3, #0
 810ca98:	d1e3      	bne.n	810ca62 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810ca9a:	687b      	ldr	r3, [r7, #4]
 810ca9c:	2220      	movs	r2, #32
 810ca9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810caa2:	687b      	ldr	r3, [r7, #4]
 810caa4:	2200      	movs	r2, #0
 810caa6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810caa8:	687b      	ldr	r3, [r7, #4]
 810caaa:	681b      	ldr	r3, [r3, #0]
 810caac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810caae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810cab0:	e853 3f00 	ldrex	r3, [r3]
 810cab4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810cab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810cab8:	f023 0310 	bic.w	r3, r3, #16
 810cabc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810cac0:	687b      	ldr	r3, [r7, #4]
 810cac2:	681b      	ldr	r3, [r3, #0]
 810cac4:	461a      	mov	r2, r3
 810cac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810caca:	65bb      	str	r3, [r7, #88]	@ 0x58
 810cacc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cace:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810cad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810cad2:	e841 2300 	strex	r3, r2, [r1]
 810cad6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810cad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810cada:	2b00      	cmp	r3, #0
 810cadc:	d1e4      	bne.n	810caa8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810cade:	687b      	ldr	r3, [r7, #4]
 810cae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cae4:	4618      	mov	r0, r3
 810cae6:	f7f9 fab9 	bl	810605c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810caea:	687b      	ldr	r3, [r7, #4]
 810caec:	2202      	movs	r2, #2
 810caee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810caf0:	687b      	ldr	r3, [r7, #4]
 810caf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810caf6:	687b      	ldr	r3, [r7, #4]
 810caf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810cafc:	b29b      	uxth	r3, r3
 810cafe:	1ad3      	subs	r3, r2, r3
 810cb00:	b29b      	uxth	r3, r3
 810cb02:	4619      	mov	r1, r3
 810cb04:	6878      	ldr	r0, [r7, #4]
 810cb06:	f000 f91d 	bl	810cd44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810cb0a:	e0ff      	b.n	810cd0c <HAL_UART_IRQHandler+0x764>
 810cb0c:	40020010 	.word	0x40020010
 810cb10:	40020028 	.word	0x40020028
 810cb14:	40020040 	.word	0x40020040
 810cb18:	40020058 	.word	0x40020058
 810cb1c:	40020070 	.word	0x40020070
 810cb20:	40020088 	.word	0x40020088
 810cb24:	400200a0 	.word	0x400200a0
 810cb28:	400200b8 	.word	0x400200b8
 810cb2c:	40020410 	.word	0x40020410
 810cb30:	40020428 	.word	0x40020428
 810cb34:	40020440 	.word	0x40020440
 810cb38:	40020458 	.word	0x40020458
 810cb3c:	40020470 	.word	0x40020470
 810cb40:	40020488 	.word	0x40020488
 810cb44:	400204a0 	.word	0x400204a0
 810cb48:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810cb4c:	687b      	ldr	r3, [r7, #4]
 810cb4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810cb58:	b29b      	uxth	r3, r3
 810cb5a:	1ad3      	subs	r3, r2, r3
 810cb5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 810cb60:	687b      	ldr	r3, [r7, #4]
 810cb62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810cb66:	b29b      	uxth	r3, r3
 810cb68:	2b00      	cmp	r3, #0
 810cb6a:	f000 80d1 	beq.w	810cd10 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 810cb6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810cb72:	2b00      	cmp	r3, #0
 810cb74:	f000 80cc 	beq.w	810cd10 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810cb78:	687b      	ldr	r3, [r7, #4]
 810cb7a:	681b      	ldr	r3, [r3, #0]
 810cb7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cb80:	e853 3f00 	ldrex	r3, [r3]
 810cb84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810cb86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cb88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810cb8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810cb90:	687b      	ldr	r3, [r7, #4]
 810cb92:	681b      	ldr	r3, [r3, #0]
 810cb94:	461a      	mov	r2, r3
 810cb96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 810cb9a:	647b      	str	r3, [r7, #68]	@ 0x44
 810cb9c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cb9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810cba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810cba2:	e841 2300 	strex	r3, r2, [r1]
 810cba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810cba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810cbaa:	2b00      	cmp	r3, #0
 810cbac:	d1e4      	bne.n	810cb78 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810cbae:	687b      	ldr	r3, [r7, #4]
 810cbb0:	681b      	ldr	r3, [r3, #0]
 810cbb2:	3308      	adds	r3, #8
 810cbb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbb8:	e853 3f00 	ldrex	r3, [r3]
 810cbbc:	623b      	str	r3, [r7, #32]
   return(result);
 810cbbe:	6a3b      	ldr	r3, [r7, #32]
 810cbc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810cbc4:	f023 0301 	bic.w	r3, r3, #1
 810cbc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810cbcc:	687b      	ldr	r3, [r7, #4]
 810cbce:	681b      	ldr	r3, [r3, #0]
 810cbd0:	3308      	adds	r3, #8
 810cbd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810cbd6:	633a      	str	r2, [r7, #48]	@ 0x30
 810cbd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cbda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810cbdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810cbde:	e841 2300 	strex	r3, r2, [r1]
 810cbe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810cbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cbe6:	2b00      	cmp	r3, #0
 810cbe8:	d1e1      	bne.n	810cbae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810cbea:	687b      	ldr	r3, [r7, #4]
 810cbec:	2220      	movs	r2, #32
 810cbee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cbf2:	687b      	ldr	r3, [r7, #4]
 810cbf4:	2200      	movs	r2, #0
 810cbf6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810cbf8:	687b      	ldr	r3, [r7, #4]
 810cbfa:	2200      	movs	r2, #0
 810cbfc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810cbfe:	687b      	ldr	r3, [r7, #4]
 810cc00:	681b      	ldr	r3, [r3, #0]
 810cc02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cc04:	693b      	ldr	r3, [r7, #16]
 810cc06:	e853 3f00 	ldrex	r3, [r3]
 810cc0a:	60fb      	str	r3, [r7, #12]
   return(result);
 810cc0c:	68fb      	ldr	r3, [r7, #12]
 810cc0e:	f023 0310 	bic.w	r3, r3, #16
 810cc12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810cc16:	687b      	ldr	r3, [r7, #4]
 810cc18:	681b      	ldr	r3, [r3, #0]
 810cc1a:	461a      	mov	r2, r3
 810cc1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 810cc20:	61fb      	str	r3, [r7, #28]
 810cc22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cc24:	69b9      	ldr	r1, [r7, #24]
 810cc26:	69fa      	ldr	r2, [r7, #28]
 810cc28:	e841 2300 	strex	r3, r2, [r1]
 810cc2c:	617b      	str	r3, [r7, #20]
   return(result);
 810cc2e:	697b      	ldr	r3, [r7, #20]
 810cc30:	2b00      	cmp	r3, #0
 810cc32:	d1e4      	bne.n	810cbfe <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810cc34:	687b      	ldr	r3, [r7, #4]
 810cc36:	2202      	movs	r2, #2
 810cc38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810cc3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810cc3e:	4619      	mov	r1, r3
 810cc40:	6878      	ldr	r0, [r7, #4]
 810cc42:	f000 f87f 	bl	810cd44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810cc46:	e063      	b.n	810cd10 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810cc48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cc4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810cc50:	2b00      	cmp	r3, #0
 810cc52:	d00e      	beq.n	810cc72 <HAL_UART_IRQHandler+0x6ca>
 810cc54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810cc58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810cc5c:	2b00      	cmp	r3, #0
 810cc5e:	d008      	beq.n	810cc72 <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810cc60:	687b      	ldr	r3, [r7, #4]
 810cc62:	681b      	ldr	r3, [r3, #0]
 810cc64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 810cc68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810cc6a:	6878      	ldr	r0, [r7, #4]
 810cc6c:	f001 fe7e 	bl	810e96c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cc70:	e051      	b.n	810cd16 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810cc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cc76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cc7a:	2b00      	cmp	r3, #0
 810cc7c:	d014      	beq.n	810cca8 <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810cc7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cc82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cc86:	2b00      	cmp	r3, #0
 810cc88:	d105      	bne.n	810cc96 <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810cc8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810cc8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810cc92:	2b00      	cmp	r3, #0
 810cc94:	d008      	beq.n	810cca8 <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 810cc96:	687b      	ldr	r3, [r7, #4]
 810cc98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810cc9a:	2b00      	cmp	r3, #0
 810cc9c:	d03a      	beq.n	810cd14 <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 810cc9e:	687b      	ldr	r3, [r7, #4]
 810cca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810cca2:	6878      	ldr	r0, [r7, #4]
 810cca4:	4798      	blx	r3
    }
    return;
 810cca6:	e035      	b.n	810cd14 <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810cca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ccac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ccb0:	2b00      	cmp	r3, #0
 810ccb2:	d009      	beq.n	810ccc8 <HAL_UART_IRQHandler+0x720>
 810ccb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ccb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ccbc:	2b00      	cmp	r3, #0
 810ccbe:	d003      	beq.n	810ccc8 <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 810ccc0:	6878      	ldr	r0, [r7, #4]
 810ccc2:	f001 f90b 	bl	810dedc <UART_EndTransmit_IT>
    return;
 810ccc6:	e026      	b.n	810cd16 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810ccc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810ccd0:	2b00      	cmp	r3, #0
 810ccd2:	d009      	beq.n	810cce8 <HAL_UART_IRQHandler+0x740>
 810ccd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ccd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810ccdc:	2b00      	cmp	r3, #0
 810ccde:	d003      	beq.n	810cce8 <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810cce0:	6878      	ldr	r0, [r7, #4]
 810cce2:	f001 fe57 	bl	810e994 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cce6:	e016      	b.n	810cd16 <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810cce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ccec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810ccf0:	2b00      	cmp	r3, #0
 810ccf2:	d010      	beq.n	810cd16 <HAL_UART_IRQHandler+0x76e>
 810ccf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ccf8:	2b00      	cmp	r3, #0
 810ccfa:	da0c      	bge.n	810cd16 <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810ccfc:	6878      	ldr	r0, [r7, #4]
 810ccfe:	f001 fe3f 	bl	810e980 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cd02:	e008      	b.n	810cd16 <HAL_UART_IRQHandler+0x76e>
      return;
 810cd04:	bf00      	nop
 810cd06:	e006      	b.n	810cd16 <HAL_UART_IRQHandler+0x76e>
    return;
 810cd08:	bf00      	nop
 810cd0a:	e004      	b.n	810cd16 <HAL_UART_IRQHandler+0x76e>
      return;
 810cd0c:	bf00      	nop
 810cd0e:	e002      	b.n	810cd16 <HAL_UART_IRQHandler+0x76e>
      return;
 810cd10:	bf00      	nop
 810cd12:	e000      	b.n	810cd16 <HAL_UART_IRQHandler+0x76e>
    return;
 810cd14:	bf00      	nop
  }
}
 810cd16:	37e8      	adds	r7, #232	@ 0xe8
 810cd18:	46bd      	mov	sp, r7
 810cd1a:	bd80      	pop	{r7, pc}

0810cd1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810cd1c:	b480      	push	{r7}
 810cd1e:	b083      	sub	sp, #12
 810cd20:	af00      	add	r7, sp, #0
 810cd22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810cd24:	bf00      	nop
 810cd26:	370c      	adds	r7, #12
 810cd28:	46bd      	mov	sp, r7
 810cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd2e:	4770      	bx	lr

0810cd30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810cd30:	b480      	push	{r7}
 810cd32:	b083      	sub	sp, #12
 810cd34:	af00      	add	r7, sp, #0
 810cd36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810cd38:	bf00      	nop
 810cd3a:	370c      	adds	r7, #12
 810cd3c:	46bd      	mov	sp, r7
 810cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd42:	4770      	bx	lr

0810cd44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810cd44:	b480      	push	{r7}
 810cd46:	b083      	sub	sp, #12
 810cd48:	af00      	add	r7, sp, #0
 810cd4a:	6078      	str	r0, [r7, #4]
 810cd4c:	460b      	mov	r3, r1
 810cd4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810cd50:	bf00      	nop
 810cd52:	370c      	adds	r7, #12
 810cd54:	46bd      	mov	sp, r7
 810cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd5a:	4770      	bx	lr

0810cd5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810cd5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810cd60:	b092      	sub	sp, #72	@ 0x48
 810cd62:	af00      	add	r7, sp, #0
 810cd64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810cd66:	2300      	movs	r3, #0
 810cd68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810cd6c:	697b      	ldr	r3, [r7, #20]
 810cd6e:	689a      	ldr	r2, [r3, #8]
 810cd70:	697b      	ldr	r3, [r7, #20]
 810cd72:	691b      	ldr	r3, [r3, #16]
 810cd74:	431a      	orrs	r2, r3
 810cd76:	697b      	ldr	r3, [r7, #20]
 810cd78:	695b      	ldr	r3, [r3, #20]
 810cd7a:	431a      	orrs	r2, r3
 810cd7c:	697b      	ldr	r3, [r7, #20]
 810cd7e:	69db      	ldr	r3, [r3, #28]
 810cd80:	4313      	orrs	r3, r2
 810cd82:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810cd84:	697b      	ldr	r3, [r7, #20]
 810cd86:	681b      	ldr	r3, [r3, #0]
 810cd88:	681a      	ldr	r2, [r3, #0]
 810cd8a:	4bbd      	ldr	r3, [pc, #756]	@ (810d080 <UART_SetConfig+0x324>)
 810cd8c:	4013      	ands	r3, r2
 810cd8e:	697a      	ldr	r2, [r7, #20]
 810cd90:	6812      	ldr	r2, [r2, #0]
 810cd92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810cd94:	430b      	orrs	r3, r1
 810cd96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810cd98:	697b      	ldr	r3, [r7, #20]
 810cd9a:	681b      	ldr	r3, [r3, #0]
 810cd9c:	685b      	ldr	r3, [r3, #4]
 810cd9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810cda2:	697b      	ldr	r3, [r7, #20]
 810cda4:	68da      	ldr	r2, [r3, #12]
 810cda6:	697b      	ldr	r3, [r7, #20]
 810cda8:	681b      	ldr	r3, [r3, #0]
 810cdaa:	430a      	orrs	r2, r1
 810cdac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810cdae:	697b      	ldr	r3, [r7, #20]
 810cdb0:	699b      	ldr	r3, [r3, #24]
 810cdb2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810cdb4:	697b      	ldr	r3, [r7, #20]
 810cdb6:	681b      	ldr	r3, [r3, #0]
 810cdb8:	4ab2      	ldr	r2, [pc, #712]	@ (810d084 <UART_SetConfig+0x328>)
 810cdba:	4293      	cmp	r3, r2
 810cdbc:	d004      	beq.n	810cdc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810cdbe:	697b      	ldr	r3, [r7, #20]
 810cdc0:	6a1b      	ldr	r3, [r3, #32]
 810cdc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810cdc4:	4313      	orrs	r3, r2
 810cdc6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810cdc8:	697b      	ldr	r3, [r7, #20]
 810cdca:	681b      	ldr	r3, [r3, #0]
 810cdcc:	689b      	ldr	r3, [r3, #8]
 810cdce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810cdd2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810cdd6:	697a      	ldr	r2, [r7, #20]
 810cdd8:	6812      	ldr	r2, [r2, #0]
 810cdda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810cddc:	430b      	orrs	r3, r1
 810cdde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810cde0:	697b      	ldr	r3, [r7, #20]
 810cde2:	681b      	ldr	r3, [r3, #0]
 810cde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cde6:	f023 010f 	bic.w	r1, r3, #15
 810cdea:	697b      	ldr	r3, [r7, #20]
 810cdec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810cdee:	697b      	ldr	r3, [r7, #20]
 810cdf0:	681b      	ldr	r3, [r3, #0]
 810cdf2:	430a      	orrs	r2, r1
 810cdf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810cdf6:	697b      	ldr	r3, [r7, #20]
 810cdf8:	681b      	ldr	r3, [r3, #0]
 810cdfa:	4aa3      	ldr	r2, [pc, #652]	@ (810d088 <UART_SetConfig+0x32c>)
 810cdfc:	4293      	cmp	r3, r2
 810cdfe:	d177      	bne.n	810cef0 <UART_SetConfig+0x194>
 810ce00:	4ba2      	ldr	r3, [pc, #648]	@ (810d08c <UART_SetConfig+0x330>)
 810ce02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ce04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810ce08:	2b28      	cmp	r3, #40	@ 0x28
 810ce0a:	d86d      	bhi.n	810cee8 <UART_SetConfig+0x18c>
 810ce0c:	a201      	add	r2, pc, #4	@ (adr r2, 810ce14 <UART_SetConfig+0xb8>)
 810ce0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ce12:	bf00      	nop
 810ce14:	0810ceb9 	.word	0x0810ceb9
 810ce18:	0810cee9 	.word	0x0810cee9
 810ce1c:	0810cee9 	.word	0x0810cee9
 810ce20:	0810cee9 	.word	0x0810cee9
 810ce24:	0810cee9 	.word	0x0810cee9
 810ce28:	0810cee9 	.word	0x0810cee9
 810ce2c:	0810cee9 	.word	0x0810cee9
 810ce30:	0810cee9 	.word	0x0810cee9
 810ce34:	0810cec1 	.word	0x0810cec1
 810ce38:	0810cee9 	.word	0x0810cee9
 810ce3c:	0810cee9 	.word	0x0810cee9
 810ce40:	0810cee9 	.word	0x0810cee9
 810ce44:	0810cee9 	.word	0x0810cee9
 810ce48:	0810cee9 	.word	0x0810cee9
 810ce4c:	0810cee9 	.word	0x0810cee9
 810ce50:	0810cee9 	.word	0x0810cee9
 810ce54:	0810cec9 	.word	0x0810cec9
 810ce58:	0810cee9 	.word	0x0810cee9
 810ce5c:	0810cee9 	.word	0x0810cee9
 810ce60:	0810cee9 	.word	0x0810cee9
 810ce64:	0810cee9 	.word	0x0810cee9
 810ce68:	0810cee9 	.word	0x0810cee9
 810ce6c:	0810cee9 	.word	0x0810cee9
 810ce70:	0810cee9 	.word	0x0810cee9
 810ce74:	0810ced1 	.word	0x0810ced1
 810ce78:	0810cee9 	.word	0x0810cee9
 810ce7c:	0810cee9 	.word	0x0810cee9
 810ce80:	0810cee9 	.word	0x0810cee9
 810ce84:	0810cee9 	.word	0x0810cee9
 810ce88:	0810cee9 	.word	0x0810cee9
 810ce8c:	0810cee9 	.word	0x0810cee9
 810ce90:	0810cee9 	.word	0x0810cee9
 810ce94:	0810ced9 	.word	0x0810ced9
 810ce98:	0810cee9 	.word	0x0810cee9
 810ce9c:	0810cee9 	.word	0x0810cee9
 810cea0:	0810cee9 	.word	0x0810cee9
 810cea4:	0810cee9 	.word	0x0810cee9
 810cea8:	0810cee9 	.word	0x0810cee9
 810ceac:	0810cee9 	.word	0x0810cee9
 810ceb0:	0810cee9 	.word	0x0810cee9
 810ceb4:	0810cee1 	.word	0x0810cee1
 810ceb8:	2301      	movs	r3, #1
 810ceba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cebe:	e220      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cec0:	2304      	movs	r3, #4
 810cec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cec6:	e21c      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cec8:	2308      	movs	r3, #8
 810ceca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cece:	e218      	b.n	810d302 <UART_SetConfig+0x5a6>
 810ced0:	2310      	movs	r3, #16
 810ced2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ced6:	e214      	b.n	810d302 <UART_SetConfig+0x5a6>
 810ced8:	2320      	movs	r3, #32
 810ceda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cede:	e210      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cee0:	2340      	movs	r3, #64	@ 0x40
 810cee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cee6:	e20c      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cee8:	2380      	movs	r3, #128	@ 0x80
 810ceea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ceee:	e208      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cef0:	697b      	ldr	r3, [r7, #20]
 810cef2:	681b      	ldr	r3, [r3, #0]
 810cef4:	4a66      	ldr	r2, [pc, #408]	@ (810d090 <UART_SetConfig+0x334>)
 810cef6:	4293      	cmp	r3, r2
 810cef8:	d130      	bne.n	810cf5c <UART_SetConfig+0x200>
 810cefa:	4b64      	ldr	r3, [pc, #400]	@ (810d08c <UART_SetConfig+0x330>)
 810cefc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cefe:	f003 0307 	and.w	r3, r3, #7
 810cf02:	2b05      	cmp	r3, #5
 810cf04:	d826      	bhi.n	810cf54 <UART_SetConfig+0x1f8>
 810cf06:	a201      	add	r2, pc, #4	@ (adr r2, 810cf0c <UART_SetConfig+0x1b0>)
 810cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cf0c:	0810cf25 	.word	0x0810cf25
 810cf10:	0810cf2d 	.word	0x0810cf2d
 810cf14:	0810cf35 	.word	0x0810cf35
 810cf18:	0810cf3d 	.word	0x0810cf3d
 810cf1c:	0810cf45 	.word	0x0810cf45
 810cf20:	0810cf4d 	.word	0x0810cf4d
 810cf24:	2300      	movs	r3, #0
 810cf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf2a:	e1ea      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cf2c:	2304      	movs	r3, #4
 810cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf32:	e1e6      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cf34:	2308      	movs	r3, #8
 810cf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf3a:	e1e2      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cf3c:	2310      	movs	r3, #16
 810cf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf42:	e1de      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cf44:	2320      	movs	r3, #32
 810cf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf4a:	e1da      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cf4c:	2340      	movs	r3, #64	@ 0x40
 810cf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf52:	e1d6      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cf54:	2380      	movs	r3, #128	@ 0x80
 810cf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf5a:	e1d2      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cf5c:	697b      	ldr	r3, [r7, #20]
 810cf5e:	681b      	ldr	r3, [r3, #0]
 810cf60:	4a4c      	ldr	r2, [pc, #304]	@ (810d094 <UART_SetConfig+0x338>)
 810cf62:	4293      	cmp	r3, r2
 810cf64:	d130      	bne.n	810cfc8 <UART_SetConfig+0x26c>
 810cf66:	4b49      	ldr	r3, [pc, #292]	@ (810d08c <UART_SetConfig+0x330>)
 810cf68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cf6a:	f003 0307 	and.w	r3, r3, #7
 810cf6e:	2b05      	cmp	r3, #5
 810cf70:	d826      	bhi.n	810cfc0 <UART_SetConfig+0x264>
 810cf72:	a201      	add	r2, pc, #4	@ (adr r2, 810cf78 <UART_SetConfig+0x21c>)
 810cf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cf78:	0810cf91 	.word	0x0810cf91
 810cf7c:	0810cf99 	.word	0x0810cf99
 810cf80:	0810cfa1 	.word	0x0810cfa1
 810cf84:	0810cfa9 	.word	0x0810cfa9
 810cf88:	0810cfb1 	.word	0x0810cfb1
 810cf8c:	0810cfb9 	.word	0x0810cfb9
 810cf90:	2300      	movs	r3, #0
 810cf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf96:	e1b4      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cf98:	2304      	movs	r3, #4
 810cf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf9e:	e1b0      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cfa0:	2308      	movs	r3, #8
 810cfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfa6:	e1ac      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cfa8:	2310      	movs	r3, #16
 810cfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfae:	e1a8      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cfb0:	2320      	movs	r3, #32
 810cfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfb6:	e1a4      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cfb8:	2340      	movs	r3, #64	@ 0x40
 810cfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfbe:	e1a0      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cfc0:	2380      	movs	r3, #128	@ 0x80
 810cfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfc6:	e19c      	b.n	810d302 <UART_SetConfig+0x5a6>
 810cfc8:	697b      	ldr	r3, [r7, #20]
 810cfca:	681b      	ldr	r3, [r3, #0]
 810cfcc:	4a32      	ldr	r2, [pc, #200]	@ (810d098 <UART_SetConfig+0x33c>)
 810cfce:	4293      	cmp	r3, r2
 810cfd0:	d130      	bne.n	810d034 <UART_SetConfig+0x2d8>
 810cfd2:	4b2e      	ldr	r3, [pc, #184]	@ (810d08c <UART_SetConfig+0x330>)
 810cfd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cfd6:	f003 0307 	and.w	r3, r3, #7
 810cfda:	2b05      	cmp	r3, #5
 810cfdc:	d826      	bhi.n	810d02c <UART_SetConfig+0x2d0>
 810cfde:	a201      	add	r2, pc, #4	@ (adr r2, 810cfe4 <UART_SetConfig+0x288>)
 810cfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cfe4:	0810cffd 	.word	0x0810cffd
 810cfe8:	0810d005 	.word	0x0810d005
 810cfec:	0810d00d 	.word	0x0810d00d
 810cff0:	0810d015 	.word	0x0810d015
 810cff4:	0810d01d 	.word	0x0810d01d
 810cff8:	0810d025 	.word	0x0810d025
 810cffc:	2300      	movs	r3, #0
 810cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d002:	e17e      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d004:	2304      	movs	r3, #4
 810d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d00a:	e17a      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d00c:	2308      	movs	r3, #8
 810d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d012:	e176      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d014:	2310      	movs	r3, #16
 810d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d01a:	e172      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d01c:	2320      	movs	r3, #32
 810d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d022:	e16e      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d024:	2340      	movs	r3, #64	@ 0x40
 810d026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d02a:	e16a      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d02c:	2380      	movs	r3, #128	@ 0x80
 810d02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d032:	e166      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d034:	697b      	ldr	r3, [r7, #20]
 810d036:	681b      	ldr	r3, [r3, #0]
 810d038:	4a18      	ldr	r2, [pc, #96]	@ (810d09c <UART_SetConfig+0x340>)
 810d03a:	4293      	cmp	r3, r2
 810d03c:	d140      	bne.n	810d0c0 <UART_SetConfig+0x364>
 810d03e:	4b13      	ldr	r3, [pc, #76]	@ (810d08c <UART_SetConfig+0x330>)
 810d040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d042:	f003 0307 	and.w	r3, r3, #7
 810d046:	2b05      	cmp	r3, #5
 810d048:	d836      	bhi.n	810d0b8 <UART_SetConfig+0x35c>
 810d04a:	a201      	add	r2, pc, #4	@ (adr r2, 810d050 <UART_SetConfig+0x2f4>)
 810d04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d050:	0810d069 	.word	0x0810d069
 810d054:	0810d071 	.word	0x0810d071
 810d058:	0810d079 	.word	0x0810d079
 810d05c:	0810d0a1 	.word	0x0810d0a1
 810d060:	0810d0a9 	.word	0x0810d0a9
 810d064:	0810d0b1 	.word	0x0810d0b1
 810d068:	2300      	movs	r3, #0
 810d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d06e:	e148      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d070:	2304      	movs	r3, #4
 810d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d076:	e144      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d078:	2308      	movs	r3, #8
 810d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d07e:	e140      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d080:	cfff69f3 	.word	0xcfff69f3
 810d084:	58000c00 	.word	0x58000c00
 810d088:	40011000 	.word	0x40011000
 810d08c:	58024400 	.word	0x58024400
 810d090:	40004400 	.word	0x40004400
 810d094:	40004800 	.word	0x40004800
 810d098:	40004c00 	.word	0x40004c00
 810d09c:	40005000 	.word	0x40005000
 810d0a0:	2310      	movs	r3, #16
 810d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0a6:	e12c      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d0a8:	2320      	movs	r3, #32
 810d0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0ae:	e128      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d0b0:	2340      	movs	r3, #64	@ 0x40
 810d0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0b6:	e124      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d0b8:	2380      	movs	r3, #128	@ 0x80
 810d0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0be:	e120      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d0c0:	697b      	ldr	r3, [r7, #20]
 810d0c2:	681b      	ldr	r3, [r3, #0]
 810d0c4:	4acb      	ldr	r2, [pc, #812]	@ (810d3f4 <UART_SetConfig+0x698>)
 810d0c6:	4293      	cmp	r3, r2
 810d0c8:	d176      	bne.n	810d1b8 <UART_SetConfig+0x45c>
 810d0ca:	4bcb      	ldr	r3, [pc, #812]	@ (810d3f8 <UART_SetConfig+0x69c>)
 810d0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d0ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810d0d2:	2b28      	cmp	r3, #40	@ 0x28
 810d0d4:	d86c      	bhi.n	810d1b0 <UART_SetConfig+0x454>
 810d0d6:	a201      	add	r2, pc, #4	@ (adr r2, 810d0dc <UART_SetConfig+0x380>)
 810d0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d0dc:	0810d181 	.word	0x0810d181
 810d0e0:	0810d1b1 	.word	0x0810d1b1
 810d0e4:	0810d1b1 	.word	0x0810d1b1
 810d0e8:	0810d1b1 	.word	0x0810d1b1
 810d0ec:	0810d1b1 	.word	0x0810d1b1
 810d0f0:	0810d1b1 	.word	0x0810d1b1
 810d0f4:	0810d1b1 	.word	0x0810d1b1
 810d0f8:	0810d1b1 	.word	0x0810d1b1
 810d0fc:	0810d189 	.word	0x0810d189
 810d100:	0810d1b1 	.word	0x0810d1b1
 810d104:	0810d1b1 	.word	0x0810d1b1
 810d108:	0810d1b1 	.word	0x0810d1b1
 810d10c:	0810d1b1 	.word	0x0810d1b1
 810d110:	0810d1b1 	.word	0x0810d1b1
 810d114:	0810d1b1 	.word	0x0810d1b1
 810d118:	0810d1b1 	.word	0x0810d1b1
 810d11c:	0810d191 	.word	0x0810d191
 810d120:	0810d1b1 	.word	0x0810d1b1
 810d124:	0810d1b1 	.word	0x0810d1b1
 810d128:	0810d1b1 	.word	0x0810d1b1
 810d12c:	0810d1b1 	.word	0x0810d1b1
 810d130:	0810d1b1 	.word	0x0810d1b1
 810d134:	0810d1b1 	.word	0x0810d1b1
 810d138:	0810d1b1 	.word	0x0810d1b1
 810d13c:	0810d199 	.word	0x0810d199
 810d140:	0810d1b1 	.word	0x0810d1b1
 810d144:	0810d1b1 	.word	0x0810d1b1
 810d148:	0810d1b1 	.word	0x0810d1b1
 810d14c:	0810d1b1 	.word	0x0810d1b1
 810d150:	0810d1b1 	.word	0x0810d1b1
 810d154:	0810d1b1 	.word	0x0810d1b1
 810d158:	0810d1b1 	.word	0x0810d1b1
 810d15c:	0810d1a1 	.word	0x0810d1a1
 810d160:	0810d1b1 	.word	0x0810d1b1
 810d164:	0810d1b1 	.word	0x0810d1b1
 810d168:	0810d1b1 	.word	0x0810d1b1
 810d16c:	0810d1b1 	.word	0x0810d1b1
 810d170:	0810d1b1 	.word	0x0810d1b1
 810d174:	0810d1b1 	.word	0x0810d1b1
 810d178:	0810d1b1 	.word	0x0810d1b1
 810d17c:	0810d1a9 	.word	0x0810d1a9
 810d180:	2301      	movs	r3, #1
 810d182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d186:	e0bc      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d188:	2304      	movs	r3, #4
 810d18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d18e:	e0b8      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d190:	2308      	movs	r3, #8
 810d192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d196:	e0b4      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d198:	2310      	movs	r3, #16
 810d19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d19e:	e0b0      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d1a0:	2320      	movs	r3, #32
 810d1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1a6:	e0ac      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d1a8:	2340      	movs	r3, #64	@ 0x40
 810d1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1ae:	e0a8      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d1b0:	2380      	movs	r3, #128	@ 0x80
 810d1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1b6:	e0a4      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d1b8:	697b      	ldr	r3, [r7, #20]
 810d1ba:	681b      	ldr	r3, [r3, #0]
 810d1bc:	4a8f      	ldr	r2, [pc, #572]	@ (810d3fc <UART_SetConfig+0x6a0>)
 810d1be:	4293      	cmp	r3, r2
 810d1c0:	d130      	bne.n	810d224 <UART_SetConfig+0x4c8>
 810d1c2:	4b8d      	ldr	r3, [pc, #564]	@ (810d3f8 <UART_SetConfig+0x69c>)
 810d1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d1c6:	f003 0307 	and.w	r3, r3, #7
 810d1ca:	2b05      	cmp	r3, #5
 810d1cc:	d826      	bhi.n	810d21c <UART_SetConfig+0x4c0>
 810d1ce:	a201      	add	r2, pc, #4	@ (adr r2, 810d1d4 <UART_SetConfig+0x478>)
 810d1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d1d4:	0810d1ed 	.word	0x0810d1ed
 810d1d8:	0810d1f5 	.word	0x0810d1f5
 810d1dc:	0810d1fd 	.word	0x0810d1fd
 810d1e0:	0810d205 	.word	0x0810d205
 810d1e4:	0810d20d 	.word	0x0810d20d
 810d1e8:	0810d215 	.word	0x0810d215
 810d1ec:	2300      	movs	r3, #0
 810d1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1f2:	e086      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d1f4:	2304      	movs	r3, #4
 810d1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1fa:	e082      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d1fc:	2308      	movs	r3, #8
 810d1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d202:	e07e      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d204:	2310      	movs	r3, #16
 810d206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d20a:	e07a      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d20c:	2320      	movs	r3, #32
 810d20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d212:	e076      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d214:	2340      	movs	r3, #64	@ 0x40
 810d216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d21a:	e072      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d21c:	2380      	movs	r3, #128	@ 0x80
 810d21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d222:	e06e      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d224:	697b      	ldr	r3, [r7, #20]
 810d226:	681b      	ldr	r3, [r3, #0]
 810d228:	4a75      	ldr	r2, [pc, #468]	@ (810d400 <UART_SetConfig+0x6a4>)
 810d22a:	4293      	cmp	r3, r2
 810d22c:	d130      	bne.n	810d290 <UART_SetConfig+0x534>
 810d22e:	4b72      	ldr	r3, [pc, #456]	@ (810d3f8 <UART_SetConfig+0x69c>)
 810d230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d232:	f003 0307 	and.w	r3, r3, #7
 810d236:	2b05      	cmp	r3, #5
 810d238:	d826      	bhi.n	810d288 <UART_SetConfig+0x52c>
 810d23a:	a201      	add	r2, pc, #4	@ (adr r2, 810d240 <UART_SetConfig+0x4e4>)
 810d23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d240:	0810d259 	.word	0x0810d259
 810d244:	0810d261 	.word	0x0810d261
 810d248:	0810d269 	.word	0x0810d269
 810d24c:	0810d271 	.word	0x0810d271
 810d250:	0810d279 	.word	0x0810d279
 810d254:	0810d281 	.word	0x0810d281
 810d258:	2300      	movs	r3, #0
 810d25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d25e:	e050      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d260:	2304      	movs	r3, #4
 810d262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d266:	e04c      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d268:	2308      	movs	r3, #8
 810d26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d26e:	e048      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d270:	2310      	movs	r3, #16
 810d272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d276:	e044      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d278:	2320      	movs	r3, #32
 810d27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d27e:	e040      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d280:	2340      	movs	r3, #64	@ 0x40
 810d282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d286:	e03c      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d288:	2380      	movs	r3, #128	@ 0x80
 810d28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d28e:	e038      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d290:	697b      	ldr	r3, [r7, #20]
 810d292:	681b      	ldr	r3, [r3, #0]
 810d294:	4a5b      	ldr	r2, [pc, #364]	@ (810d404 <UART_SetConfig+0x6a8>)
 810d296:	4293      	cmp	r3, r2
 810d298:	d130      	bne.n	810d2fc <UART_SetConfig+0x5a0>
 810d29a:	4b57      	ldr	r3, [pc, #348]	@ (810d3f8 <UART_SetConfig+0x69c>)
 810d29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d29e:	f003 0307 	and.w	r3, r3, #7
 810d2a2:	2b05      	cmp	r3, #5
 810d2a4:	d826      	bhi.n	810d2f4 <UART_SetConfig+0x598>
 810d2a6:	a201      	add	r2, pc, #4	@ (adr r2, 810d2ac <UART_SetConfig+0x550>)
 810d2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d2ac:	0810d2c5 	.word	0x0810d2c5
 810d2b0:	0810d2cd 	.word	0x0810d2cd
 810d2b4:	0810d2d5 	.word	0x0810d2d5
 810d2b8:	0810d2dd 	.word	0x0810d2dd
 810d2bc:	0810d2e5 	.word	0x0810d2e5
 810d2c0:	0810d2ed 	.word	0x0810d2ed
 810d2c4:	2302      	movs	r3, #2
 810d2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2ca:	e01a      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d2cc:	2304      	movs	r3, #4
 810d2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2d2:	e016      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d2d4:	2308      	movs	r3, #8
 810d2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2da:	e012      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d2dc:	2310      	movs	r3, #16
 810d2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2e2:	e00e      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d2e4:	2320      	movs	r3, #32
 810d2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2ea:	e00a      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d2ec:	2340      	movs	r3, #64	@ 0x40
 810d2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2f2:	e006      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d2f4:	2380      	movs	r3, #128	@ 0x80
 810d2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2fa:	e002      	b.n	810d302 <UART_SetConfig+0x5a6>
 810d2fc:	2380      	movs	r3, #128	@ 0x80
 810d2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810d302:	697b      	ldr	r3, [r7, #20]
 810d304:	681b      	ldr	r3, [r3, #0]
 810d306:	4a3f      	ldr	r2, [pc, #252]	@ (810d404 <UART_SetConfig+0x6a8>)
 810d308:	4293      	cmp	r3, r2
 810d30a:	f040 80f8 	bne.w	810d4fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810d30e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d312:	2b20      	cmp	r3, #32
 810d314:	dc46      	bgt.n	810d3a4 <UART_SetConfig+0x648>
 810d316:	2b02      	cmp	r3, #2
 810d318:	f2c0 8082 	blt.w	810d420 <UART_SetConfig+0x6c4>
 810d31c:	3b02      	subs	r3, #2
 810d31e:	2b1e      	cmp	r3, #30
 810d320:	d87e      	bhi.n	810d420 <UART_SetConfig+0x6c4>
 810d322:	a201      	add	r2, pc, #4	@ (adr r2, 810d328 <UART_SetConfig+0x5cc>)
 810d324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d328:	0810d3ab 	.word	0x0810d3ab
 810d32c:	0810d421 	.word	0x0810d421
 810d330:	0810d3b3 	.word	0x0810d3b3
 810d334:	0810d421 	.word	0x0810d421
 810d338:	0810d421 	.word	0x0810d421
 810d33c:	0810d421 	.word	0x0810d421
 810d340:	0810d3c3 	.word	0x0810d3c3
 810d344:	0810d421 	.word	0x0810d421
 810d348:	0810d421 	.word	0x0810d421
 810d34c:	0810d421 	.word	0x0810d421
 810d350:	0810d421 	.word	0x0810d421
 810d354:	0810d421 	.word	0x0810d421
 810d358:	0810d421 	.word	0x0810d421
 810d35c:	0810d421 	.word	0x0810d421
 810d360:	0810d3d3 	.word	0x0810d3d3
 810d364:	0810d421 	.word	0x0810d421
 810d368:	0810d421 	.word	0x0810d421
 810d36c:	0810d421 	.word	0x0810d421
 810d370:	0810d421 	.word	0x0810d421
 810d374:	0810d421 	.word	0x0810d421
 810d378:	0810d421 	.word	0x0810d421
 810d37c:	0810d421 	.word	0x0810d421
 810d380:	0810d421 	.word	0x0810d421
 810d384:	0810d421 	.word	0x0810d421
 810d388:	0810d421 	.word	0x0810d421
 810d38c:	0810d421 	.word	0x0810d421
 810d390:	0810d421 	.word	0x0810d421
 810d394:	0810d421 	.word	0x0810d421
 810d398:	0810d421 	.word	0x0810d421
 810d39c:	0810d421 	.word	0x0810d421
 810d3a0:	0810d413 	.word	0x0810d413
 810d3a4:	2b40      	cmp	r3, #64	@ 0x40
 810d3a6:	d037      	beq.n	810d418 <UART_SetConfig+0x6bc>
 810d3a8:	e03a      	b.n	810d420 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810d3aa:	f7fc fd9d 	bl	8109ee8 <HAL_RCCEx_GetD3PCLK1Freq>
 810d3ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d3b0:	e03c      	b.n	810d42c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d3b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d3b6:	4618      	mov	r0, r3
 810d3b8:	f7fc fdac 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d3c0:	e034      	b.n	810d42c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d3c2:	f107 0318 	add.w	r3, r7, #24
 810d3c6:	4618      	mov	r0, r3
 810d3c8:	f7fc fef8 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d3cc:	69fb      	ldr	r3, [r7, #28]
 810d3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d3d0:	e02c      	b.n	810d42c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d3d2:	4b09      	ldr	r3, [pc, #36]	@ (810d3f8 <UART_SetConfig+0x69c>)
 810d3d4:	681b      	ldr	r3, [r3, #0]
 810d3d6:	f003 0320 	and.w	r3, r3, #32
 810d3da:	2b00      	cmp	r3, #0
 810d3dc:	d016      	beq.n	810d40c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d3de:	4b06      	ldr	r3, [pc, #24]	@ (810d3f8 <UART_SetConfig+0x69c>)
 810d3e0:	681b      	ldr	r3, [r3, #0]
 810d3e2:	08db      	lsrs	r3, r3, #3
 810d3e4:	f003 0303 	and.w	r3, r3, #3
 810d3e8:	4a07      	ldr	r2, [pc, #28]	@ (810d408 <UART_SetConfig+0x6ac>)
 810d3ea:	fa22 f303 	lsr.w	r3, r2, r3
 810d3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d3f0:	e01c      	b.n	810d42c <UART_SetConfig+0x6d0>
 810d3f2:	bf00      	nop
 810d3f4:	40011400 	.word	0x40011400
 810d3f8:	58024400 	.word	0x58024400
 810d3fc:	40007800 	.word	0x40007800
 810d400:	40007c00 	.word	0x40007c00
 810d404:	58000c00 	.word	0x58000c00
 810d408:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810d40c:	4b9d      	ldr	r3, [pc, #628]	@ (810d684 <UART_SetConfig+0x928>)
 810d40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d410:	e00c      	b.n	810d42c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d412:	4b9d      	ldr	r3, [pc, #628]	@ (810d688 <UART_SetConfig+0x92c>)
 810d414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d416:	e009      	b.n	810d42c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d41e:	e005      	b.n	810d42c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810d420:	2300      	movs	r3, #0
 810d422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d424:	2301      	movs	r3, #1
 810d426:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d42a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810d42c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d42e:	2b00      	cmp	r3, #0
 810d430:	f000 81de 	beq.w	810d7f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810d434:	697b      	ldr	r3, [r7, #20]
 810d436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d438:	4a94      	ldr	r2, [pc, #592]	@ (810d68c <UART_SetConfig+0x930>)
 810d43a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d43e:	461a      	mov	r2, r3
 810d440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d442:	fbb3 f3f2 	udiv	r3, r3, r2
 810d446:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810d448:	697b      	ldr	r3, [r7, #20]
 810d44a:	685a      	ldr	r2, [r3, #4]
 810d44c:	4613      	mov	r3, r2
 810d44e:	005b      	lsls	r3, r3, #1
 810d450:	4413      	add	r3, r2
 810d452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d454:	429a      	cmp	r2, r3
 810d456:	d305      	bcc.n	810d464 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810d458:	697b      	ldr	r3, [r7, #20]
 810d45a:	685b      	ldr	r3, [r3, #4]
 810d45c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810d45e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d460:	429a      	cmp	r2, r3
 810d462:	d903      	bls.n	810d46c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810d464:	2301      	movs	r3, #1
 810d466:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d46a:	e1c1      	b.n	810d7f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d46c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d46e:	2200      	movs	r2, #0
 810d470:	60bb      	str	r3, [r7, #8]
 810d472:	60fa      	str	r2, [r7, #12]
 810d474:	697b      	ldr	r3, [r7, #20]
 810d476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d478:	4a84      	ldr	r2, [pc, #528]	@ (810d68c <UART_SetConfig+0x930>)
 810d47a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d47e:	b29b      	uxth	r3, r3
 810d480:	2200      	movs	r2, #0
 810d482:	603b      	str	r3, [r7, #0]
 810d484:	607a      	str	r2, [r7, #4]
 810d486:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d48a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810d48e:	f7f3 fc83 	bl	8100d98 <__aeabi_uldivmod>
 810d492:	4602      	mov	r2, r0
 810d494:	460b      	mov	r3, r1
 810d496:	4610      	mov	r0, r2
 810d498:	4619      	mov	r1, r3
 810d49a:	f04f 0200 	mov.w	r2, #0
 810d49e:	f04f 0300 	mov.w	r3, #0
 810d4a2:	020b      	lsls	r3, r1, #8
 810d4a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810d4a8:	0202      	lsls	r2, r0, #8
 810d4aa:	6979      	ldr	r1, [r7, #20]
 810d4ac:	6849      	ldr	r1, [r1, #4]
 810d4ae:	0849      	lsrs	r1, r1, #1
 810d4b0:	2000      	movs	r0, #0
 810d4b2:	460c      	mov	r4, r1
 810d4b4:	4605      	mov	r5, r0
 810d4b6:	eb12 0804 	adds.w	r8, r2, r4
 810d4ba:	eb43 0905 	adc.w	r9, r3, r5
 810d4be:	697b      	ldr	r3, [r7, #20]
 810d4c0:	685b      	ldr	r3, [r3, #4]
 810d4c2:	2200      	movs	r2, #0
 810d4c4:	469a      	mov	sl, r3
 810d4c6:	4693      	mov	fp, r2
 810d4c8:	4652      	mov	r2, sl
 810d4ca:	465b      	mov	r3, fp
 810d4cc:	4640      	mov	r0, r8
 810d4ce:	4649      	mov	r1, r9
 810d4d0:	f7f3 fc62 	bl	8100d98 <__aeabi_uldivmod>
 810d4d4:	4602      	mov	r2, r0
 810d4d6:	460b      	mov	r3, r1
 810d4d8:	4613      	mov	r3, r2
 810d4da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810d4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d4de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810d4e2:	d308      	bcc.n	810d4f6 <UART_SetConfig+0x79a>
 810d4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d4e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d4ea:	d204      	bcs.n	810d4f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810d4ec:	697b      	ldr	r3, [r7, #20]
 810d4ee:	681b      	ldr	r3, [r3, #0]
 810d4f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810d4f2:	60da      	str	r2, [r3, #12]
 810d4f4:	e17c      	b.n	810d7f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810d4f6:	2301      	movs	r3, #1
 810d4f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d4fc:	e178      	b.n	810d7f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810d4fe:	697b      	ldr	r3, [r7, #20]
 810d500:	69db      	ldr	r3, [r3, #28]
 810d502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810d506:	f040 80c5 	bne.w	810d694 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810d50a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d50e:	2b20      	cmp	r3, #32
 810d510:	dc48      	bgt.n	810d5a4 <UART_SetConfig+0x848>
 810d512:	2b00      	cmp	r3, #0
 810d514:	db7b      	blt.n	810d60e <UART_SetConfig+0x8b2>
 810d516:	2b20      	cmp	r3, #32
 810d518:	d879      	bhi.n	810d60e <UART_SetConfig+0x8b2>
 810d51a:	a201      	add	r2, pc, #4	@ (adr r2, 810d520 <UART_SetConfig+0x7c4>)
 810d51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d520:	0810d5ab 	.word	0x0810d5ab
 810d524:	0810d5b3 	.word	0x0810d5b3
 810d528:	0810d60f 	.word	0x0810d60f
 810d52c:	0810d60f 	.word	0x0810d60f
 810d530:	0810d5bb 	.word	0x0810d5bb
 810d534:	0810d60f 	.word	0x0810d60f
 810d538:	0810d60f 	.word	0x0810d60f
 810d53c:	0810d60f 	.word	0x0810d60f
 810d540:	0810d5cb 	.word	0x0810d5cb
 810d544:	0810d60f 	.word	0x0810d60f
 810d548:	0810d60f 	.word	0x0810d60f
 810d54c:	0810d60f 	.word	0x0810d60f
 810d550:	0810d60f 	.word	0x0810d60f
 810d554:	0810d60f 	.word	0x0810d60f
 810d558:	0810d60f 	.word	0x0810d60f
 810d55c:	0810d60f 	.word	0x0810d60f
 810d560:	0810d5db 	.word	0x0810d5db
 810d564:	0810d60f 	.word	0x0810d60f
 810d568:	0810d60f 	.word	0x0810d60f
 810d56c:	0810d60f 	.word	0x0810d60f
 810d570:	0810d60f 	.word	0x0810d60f
 810d574:	0810d60f 	.word	0x0810d60f
 810d578:	0810d60f 	.word	0x0810d60f
 810d57c:	0810d60f 	.word	0x0810d60f
 810d580:	0810d60f 	.word	0x0810d60f
 810d584:	0810d60f 	.word	0x0810d60f
 810d588:	0810d60f 	.word	0x0810d60f
 810d58c:	0810d60f 	.word	0x0810d60f
 810d590:	0810d60f 	.word	0x0810d60f
 810d594:	0810d60f 	.word	0x0810d60f
 810d598:	0810d60f 	.word	0x0810d60f
 810d59c:	0810d60f 	.word	0x0810d60f
 810d5a0:	0810d601 	.word	0x0810d601
 810d5a4:	2b40      	cmp	r3, #64	@ 0x40
 810d5a6:	d02e      	beq.n	810d606 <UART_SetConfig+0x8aa>
 810d5a8:	e031      	b.n	810d60e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d5aa:	f7fa fce7 	bl	8107f7c <HAL_RCC_GetPCLK1Freq>
 810d5ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d5b0:	e033      	b.n	810d61a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d5b2:	f7fa fcf9 	bl	8107fa8 <HAL_RCC_GetPCLK2Freq>
 810d5b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d5b8:	e02f      	b.n	810d61a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d5ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d5be:	4618      	mov	r0, r3
 810d5c0:	f7fc fca8 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d5c8:	e027      	b.n	810d61a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d5ca:	f107 0318 	add.w	r3, r7, #24
 810d5ce:	4618      	mov	r0, r3
 810d5d0:	f7fc fdf4 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d5d4:	69fb      	ldr	r3, [r7, #28]
 810d5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d5d8:	e01f      	b.n	810d61a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d5da:	4b2d      	ldr	r3, [pc, #180]	@ (810d690 <UART_SetConfig+0x934>)
 810d5dc:	681b      	ldr	r3, [r3, #0]
 810d5de:	f003 0320 	and.w	r3, r3, #32
 810d5e2:	2b00      	cmp	r3, #0
 810d5e4:	d009      	beq.n	810d5fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d5e6:	4b2a      	ldr	r3, [pc, #168]	@ (810d690 <UART_SetConfig+0x934>)
 810d5e8:	681b      	ldr	r3, [r3, #0]
 810d5ea:	08db      	lsrs	r3, r3, #3
 810d5ec:	f003 0303 	and.w	r3, r3, #3
 810d5f0:	4a24      	ldr	r2, [pc, #144]	@ (810d684 <UART_SetConfig+0x928>)
 810d5f2:	fa22 f303 	lsr.w	r3, r2, r3
 810d5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d5f8:	e00f      	b.n	810d61a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810d5fa:	4b22      	ldr	r3, [pc, #136]	@ (810d684 <UART_SetConfig+0x928>)
 810d5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d5fe:	e00c      	b.n	810d61a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d600:	4b21      	ldr	r3, [pc, #132]	@ (810d688 <UART_SetConfig+0x92c>)
 810d602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d604:	e009      	b.n	810d61a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d60c:	e005      	b.n	810d61a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810d60e:	2300      	movs	r3, #0
 810d610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d612:	2301      	movs	r3, #1
 810d614:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810d61a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d61c:	2b00      	cmp	r3, #0
 810d61e:	f000 80e7 	beq.w	810d7f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d622:	697b      	ldr	r3, [r7, #20]
 810d624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d626:	4a19      	ldr	r2, [pc, #100]	@ (810d68c <UART_SetConfig+0x930>)
 810d628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d62c:	461a      	mov	r2, r3
 810d62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d630:	fbb3 f3f2 	udiv	r3, r3, r2
 810d634:	005a      	lsls	r2, r3, #1
 810d636:	697b      	ldr	r3, [r7, #20]
 810d638:	685b      	ldr	r3, [r3, #4]
 810d63a:	085b      	lsrs	r3, r3, #1
 810d63c:	441a      	add	r2, r3
 810d63e:	697b      	ldr	r3, [r7, #20]
 810d640:	685b      	ldr	r3, [r3, #4]
 810d642:	fbb2 f3f3 	udiv	r3, r2, r3
 810d646:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d64a:	2b0f      	cmp	r3, #15
 810d64c:	d916      	bls.n	810d67c <UART_SetConfig+0x920>
 810d64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d654:	d212      	bcs.n	810d67c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d658:	b29b      	uxth	r3, r3
 810d65a:	f023 030f 	bic.w	r3, r3, #15
 810d65e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d662:	085b      	lsrs	r3, r3, #1
 810d664:	b29b      	uxth	r3, r3
 810d666:	f003 0307 	and.w	r3, r3, #7
 810d66a:	b29a      	uxth	r2, r3
 810d66c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810d66e:	4313      	orrs	r3, r2
 810d670:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810d672:	697b      	ldr	r3, [r7, #20]
 810d674:	681b      	ldr	r3, [r3, #0]
 810d676:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810d678:	60da      	str	r2, [r3, #12]
 810d67a:	e0b9      	b.n	810d7f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810d67c:	2301      	movs	r3, #1
 810d67e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d682:	e0b5      	b.n	810d7f0 <UART_SetConfig+0xa94>
 810d684:	03d09000 	.word	0x03d09000
 810d688:	003d0900 	.word	0x003d0900
 810d68c:	08113960 	.word	0x08113960
 810d690:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810d694:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d698:	2b20      	cmp	r3, #32
 810d69a:	dc49      	bgt.n	810d730 <UART_SetConfig+0x9d4>
 810d69c:	2b00      	cmp	r3, #0
 810d69e:	db7c      	blt.n	810d79a <UART_SetConfig+0xa3e>
 810d6a0:	2b20      	cmp	r3, #32
 810d6a2:	d87a      	bhi.n	810d79a <UART_SetConfig+0xa3e>
 810d6a4:	a201      	add	r2, pc, #4	@ (adr r2, 810d6ac <UART_SetConfig+0x950>)
 810d6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d6aa:	bf00      	nop
 810d6ac:	0810d737 	.word	0x0810d737
 810d6b0:	0810d73f 	.word	0x0810d73f
 810d6b4:	0810d79b 	.word	0x0810d79b
 810d6b8:	0810d79b 	.word	0x0810d79b
 810d6bc:	0810d747 	.word	0x0810d747
 810d6c0:	0810d79b 	.word	0x0810d79b
 810d6c4:	0810d79b 	.word	0x0810d79b
 810d6c8:	0810d79b 	.word	0x0810d79b
 810d6cc:	0810d757 	.word	0x0810d757
 810d6d0:	0810d79b 	.word	0x0810d79b
 810d6d4:	0810d79b 	.word	0x0810d79b
 810d6d8:	0810d79b 	.word	0x0810d79b
 810d6dc:	0810d79b 	.word	0x0810d79b
 810d6e0:	0810d79b 	.word	0x0810d79b
 810d6e4:	0810d79b 	.word	0x0810d79b
 810d6e8:	0810d79b 	.word	0x0810d79b
 810d6ec:	0810d767 	.word	0x0810d767
 810d6f0:	0810d79b 	.word	0x0810d79b
 810d6f4:	0810d79b 	.word	0x0810d79b
 810d6f8:	0810d79b 	.word	0x0810d79b
 810d6fc:	0810d79b 	.word	0x0810d79b
 810d700:	0810d79b 	.word	0x0810d79b
 810d704:	0810d79b 	.word	0x0810d79b
 810d708:	0810d79b 	.word	0x0810d79b
 810d70c:	0810d79b 	.word	0x0810d79b
 810d710:	0810d79b 	.word	0x0810d79b
 810d714:	0810d79b 	.word	0x0810d79b
 810d718:	0810d79b 	.word	0x0810d79b
 810d71c:	0810d79b 	.word	0x0810d79b
 810d720:	0810d79b 	.word	0x0810d79b
 810d724:	0810d79b 	.word	0x0810d79b
 810d728:	0810d79b 	.word	0x0810d79b
 810d72c:	0810d78d 	.word	0x0810d78d
 810d730:	2b40      	cmp	r3, #64	@ 0x40
 810d732:	d02e      	beq.n	810d792 <UART_SetConfig+0xa36>
 810d734:	e031      	b.n	810d79a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d736:	f7fa fc21 	bl	8107f7c <HAL_RCC_GetPCLK1Freq>
 810d73a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d73c:	e033      	b.n	810d7a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d73e:	f7fa fc33 	bl	8107fa8 <HAL_RCC_GetPCLK2Freq>
 810d742:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d744:	e02f      	b.n	810d7a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d74a:	4618      	mov	r0, r3
 810d74c:	f7fc fbe2 	bl	8109f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d754:	e027      	b.n	810d7a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d756:	f107 0318 	add.w	r3, r7, #24
 810d75a:	4618      	mov	r0, r3
 810d75c:	f7fc fd2e 	bl	810a1bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d760:	69fb      	ldr	r3, [r7, #28]
 810d762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d764:	e01f      	b.n	810d7a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d766:	4b2d      	ldr	r3, [pc, #180]	@ (810d81c <UART_SetConfig+0xac0>)
 810d768:	681b      	ldr	r3, [r3, #0]
 810d76a:	f003 0320 	and.w	r3, r3, #32
 810d76e:	2b00      	cmp	r3, #0
 810d770:	d009      	beq.n	810d786 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d772:	4b2a      	ldr	r3, [pc, #168]	@ (810d81c <UART_SetConfig+0xac0>)
 810d774:	681b      	ldr	r3, [r3, #0]
 810d776:	08db      	lsrs	r3, r3, #3
 810d778:	f003 0303 	and.w	r3, r3, #3
 810d77c:	4a28      	ldr	r2, [pc, #160]	@ (810d820 <UART_SetConfig+0xac4>)
 810d77e:	fa22 f303 	lsr.w	r3, r2, r3
 810d782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d784:	e00f      	b.n	810d7a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810d786:	4b26      	ldr	r3, [pc, #152]	@ (810d820 <UART_SetConfig+0xac4>)
 810d788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d78a:	e00c      	b.n	810d7a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d78c:	4b25      	ldr	r3, [pc, #148]	@ (810d824 <UART_SetConfig+0xac8>)
 810d78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d790:	e009      	b.n	810d7a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d798:	e005      	b.n	810d7a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810d79a:	2300      	movs	r3, #0
 810d79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d79e:	2301      	movs	r3, #1
 810d7a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d7a4:	bf00      	nop
    }

    if (pclk != 0U)
 810d7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d7a8:	2b00      	cmp	r3, #0
 810d7aa:	d021      	beq.n	810d7f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d7ac:	697b      	ldr	r3, [r7, #20]
 810d7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d7b0:	4a1d      	ldr	r2, [pc, #116]	@ (810d828 <UART_SetConfig+0xacc>)
 810d7b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d7b6:	461a      	mov	r2, r3
 810d7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d7ba:	fbb3 f2f2 	udiv	r2, r3, r2
 810d7be:	697b      	ldr	r3, [r7, #20]
 810d7c0:	685b      	ldr	r3, [r3, #4]
 810d7c2:	085b      	lsrs	r3, r3, #1
 810d7c4:	441a      	add	r2, r3
 810d7c6:	697b      	ldr	r3, [r7, #20]
 810d7c8:	685b      	ldr	r3, [r3, #4]
 810d7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 810d7ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d7d2:	2b0f      	cmp	r3, #15
 810d7d4:	d909      	bls.n	810d7ea <UART_SetConfig+0xa8e>
 810d7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d7d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d7dc:	d205      	bcs.n	810d7ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810d7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d7e0:	b29a      	uxth	r2, r3
 810d7e2:	697b      	ldr	r3, [r7, #20]
 810d7e4:	681b      	ldr	r3, [r3, #0]
 810d7e6:	60da      	str	r2, [r3, #12]
 810d7e8:	e002      	b.n	810d7f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810d7ea:	2301      	movs	r3, #1
 810d7ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810d7f0:	697b      	ldr	r3, [r7, #20]
 810d7f2:	2201      	movs	r2, #1
 810d7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810d7f8:	697b      	ldr	r3, [r7, #20]
 810d7fa:	2201      	movs	r2, #1
 810d7fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810d800:	697b      	ldr	r3, [r7, #20]
 810d802:	2200      	movs	r2, #0
 810d804:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810d806:	697b      	ldr	r3, [r7, #20]
 810d808:	2200      	movs	r2, #0
 810d80a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810d80c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810d810:	4618      	mov	r0, r3
 810d812:	3748      	adds	r7, #72	@ 0x48
 810d814:	46bd      	mov	sp, r7
 810d816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810d81a:	bf00      	nop
 810d81c:	58024400 	.word	0x58024400
 810d820:	03d09000 	.word	0x03d09000
 810d824:	003d0900 	.word	0x003d0900
 810d828:	08113960 	.word	0x08113960

0810d82c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810d82c:	b480      	push	{r7}
 810d82e:	b083      	sub	sp, #12
 810d830:	af00      	add	r7, sp, #0
 810d832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810d834:	687b      	ldr	r3, [r7, #4]
 810d836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d838:	f003 0308 	and.w	r3, r3, #8
 810d83c:	2b00      	cmp	r3, #0
 810d83e:	d00a      	beq.n	810d856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810d840:	687b      	ldr	r3, [r7, #4]
 810d842:	681b      	ldr	r3, [r3, #0]
 810d844:	685b      	ldr	r3, [r3, #4]
 810d846:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810d84a:	687b      	ldr	r3, [r7, #4]
 810d84c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810d84e:	687b      	ldr	r3, [r7, #4]
 810d850:	681b      	ldr	r3, [r3, #0]
 810d852:	430a      	orrs	r2, r1
 810d854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810d856:	687b      	ldr	r3, [r7, #4]
 810d858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d85a:	f003 0301 	and.w	r3, r3, #1
 810d85e:	2b00      	cmp	r3, #0
 810d860:	d00a      	beq.n	810d878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810d862:	687b      	ldr	r3, [r7, #4]
 810d864:	681b      	ldr	r3, [r3, #0]
 810d866:	685b      	ldr	r3, [r3, #4]
 810d868:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810d86c:	687b      	ldr	r3, [r7, #4]
 810d86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d870:	687b      	ldr	r3, [r7, #4]
 810d872:	681b      	ldr	r3, [r3, #0]
 810d874:	430a      	orrs	r2, r1
 810d876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810d878:	687b      	ldr	r3, [r7, #4]
 810d87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d87c:	f003 0302 	and.w	r3, r3, #2
 810d880:	2b00      	cmp	r3, #0
 810d882:	d00a      	beq.n	810d89a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810d884:	687b      	ldr	r3, [r7, #4]
 810d886:	681b      	ldr	r3, [r3, #0]
 810d888:	685b      	ldr	r3, [r3, #4]
 810d88a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810d88e:	687b      	ldr	r3, [r7, #4]
 810d890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810d892:	687b      	ldr	r3, [r7, #4]
 810d894:	681b      	ldr	r3, [r3, #0]
 810d896:	430a      	orrs	r2, r1
 810d898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810d89a:	687b      	ldr	r3, [r7, #4]
 810d89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d89e:	f003 0304 	and.w	r3, r3, #4
 810d8a2:	2b00      	cmp	r3, #0
 810d8a4:	d00a      	beq.n	810d8bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810d8a6:	687b      	ldr	r3, [r7, #4]
 810d8a8:	681b      	ldr	r3, [r3, #0]
 810d8aa:	685b      	ldr	r3, [r3, #4]
 810d8ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810d8b0:	687b      	ldr	r3, [r7, #4]
 810d8b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810d8b4:	687b      	ldr	r3, [r7, #4]
 810d8b6:	681b      	ldr	r3, [r3, #0]
 810d8b8:	430a      	orrs	r2, r1
 810d8ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810d8bc:	687b      	ldr	r3, [r7, #4]
 810d8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d8c0:	f003 0310 	and.w	r3, r3, #16
 810d8c4:	2b00      	cmp	r3, #0
 810d8c6:	d00a      	beq.n	810d8de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810d8c8:	687b      	ldr	r3, [r7, #4]
 810d8ca:	681b      	ldr	r3, [r3, #0]
 810d8cc:	689b      	ldr	r3, [r3, #8]
 810d8ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810d8d2:	687b      	ldr	r3, [r7, #4]
 810d8d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810d8d6:	687b      	ldr	r3, [r7, #4]
 810d8d8:	681b      	ldr	r3, [r3, #0]
 810d8da:	430a      	orrs	r2, r1
 810d8dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810d8de:	687b      	ldr	r3, [r7, #4]
 810d8e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d8e2:	f003 0320 	and.w	r3, r3, #32
 810d8e6:	2b00      	cmp	r3, #0
 810d8e8:	d00a      	beq.n	810d900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810d8ea:	687b      	ldr	r3, [r7, #4]
 810d8ec:	681b      	ldr	r3, [r3, #0]
 810d8ee:	689b      	ldr	r3, [r3, #8]
 810d8f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810d8f4:	687b      	ldr	r3, [r7, #4]
 810d8f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810d8f8:	687b      	ldr	r3, [r7, #4]
 810d8fa:	681b      	ldr	r3, [r3, #0]
 810d8fc:	430a      	orrs	r2, r1
 810d8fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810d900:	687b      	ldr	r3, [r7, #4]
 810d902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d908:	2b00      	cmp	r3, #0
 810d90a:	d01a      	beq.n	810d942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810d90c:	687b      	ldr	r3, [r7, #4]
 810d90e:	681b      	ldr	r3, [r3, #0]
 810d910:	685b      	ldr	r3, [r3, #4]
 810d912:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810d916:	687b      	ldr	r3, [r7, #4]
 810d918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810d91a:	687b      	ldr	r3, [r7, #4]
 810d91c:	681b      	ldr	r3, [r3, #0]
 810d91e:	430a      	orrs	r2, r1
 810d920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810d922:	687b      	ldr	r3, [r7, #4]
 810d924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810d926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d92a:	d10a      	bne.n	810d942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810d92c:	687b      	ldr	r3, [r7, #4]
 810d92e:	681b      	ldr	r3, [r3, #0]
 810d930:	685b      	ldr	r3, [r3, #4]
 810d932:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810d936:	687b      	ldr	r3, [r7, #4]
 810d938:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810d93a:	687b      	ldr	r3, [r7, #4]
 810d93c:	681b      	ldr	r3, [r3, #0]
 810d93e:	430a      	orrs	r2, r1
 810d940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810d942:	687b      	ldr	r3, [r7, #4]
 810d944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d94a:	2b00      	cmp	r3, #0
 810d94c:	d00a      	beq.n	810d964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810d94e:	687b      	ldr	r3, [r7, #4]
 810d950:	681b      	ldr	r3, [r3, #0]
 810d952:	685b      	ldr	r3, [r3, #4]
 810d954:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810d958:	687b      	ldr	r3, [r7, #4]
 810d95a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810d95c:	687b      	ldr	r3, [r7, #4]
 810d95e:	681b      	ldr	r3, [r3, #0]
 810d960:	430a      	orrs	r2, r1
 810d962:	605a      	str	r2, [r3, #4]
  }
}
 810d964:	bf00      	nop
 810d966:	370c      	adds	r7, #12
 810d968:	46bd      	mov	sp, r7
 810d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d96e:	4770      	bx	lr

0810d970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810d970:	b580      	push	{r7, lr}
 810d972:	b098      	sub	sp, #96	@ 0x60
 810d974:	af02      	add	r7, sp, #8
 810d976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d978:	687b      	ldr	r3, [r7, #4]
 810d97a:	2200      	movs	r2, #0
 810d97c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810d980:	f7f6 fd24 	bl	81043cc <HAL_GetTick>
 810d984:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810d986:	687b      	ldr	r3, [r7, #4]
 810d988:	681b      	ldr	r3, [r3, #0]
 810d98a:	681b      	ldr	r3, [r3, #0]
 810d98c:	f003 0308 	and.w	r3, r3, #8
 810d990:	2b08      	cmp	r3, #8
 810d992:	d12f      	bne.n	810d9f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d994:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810d998:	9300      	str	r3, [sp, #0]
 810d99a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810d99c:	2200      	movs	r2, #0
 810d99e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810d9a2:	6878      	ldr	r0, [r7, #4]
 810d9a4:	f000 f88e 	bl	810dac4 <UART_WaitOnFlagUntilTimeout>
 810d9a8:	4603      	mov	r3, r0
 810d9aa:	2b00      	cmp	r3, #0
 810d9ac:	d022      	beq.n	810d9f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810d9ae:	687b      	ldr	r3, [r7, #4]
 810d9b0:	681b      	ldr	r3, [r3, #0]
 810d9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d9b6:	e853 3f00 	ldrex	r3, [r3]
 810d9ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810d9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d9be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810d9c2:	653b      	str	r3, [r7, #80]	@ 0x50
 810d9c4:	687b      	ldr	r3, [r7, #4]
 810d9c6:	681b      	ldr	r3, [r3, #0]
 810d9c8:	461a      	mov	r2, r3
 810d9ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810d9cc:	647b      	str	r3, [r7, #68]	@ 0x44
 810d9ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d9d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810d9d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810d9d4:	e841 2300 	strex	r3, r2, [r1]
 810d9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810d9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d9dc:	2b00      	cmp	r3, #0
 810d9de:	d1e6      	bne.n	810d9ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810d9e0:	687b      	ldr	r3, [r7, #4]
 810d9e2:	2220      	movs	r2, #32
 810d9e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810d9e8:	687b      	ldr	r3, [r7, #4]
 810d9ea:	2200      	movs	r2, #0
 810d9ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d9f0:	2303      	movs	r3, #3
 810d9f2:	e063      	b.n	810dabc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810d9f4:	687b      	ldr	r3, [r7, #4]
 810d9f6:	681b      	ldr	r3, [r3, #0]
 810d9f8:	681b      	ldr	r3, [r3, #0]
 810d9fa:	f003 0304 	and.w	r3, r3, #4
 810d9fe:	2b04      	cmp	r3, #4
 810da00:	d149      	bne.n	810da96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810da02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810da06:	9300      	str	r3, [sp, #0]
 810da08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810da0a:	2200      	movs	r2, #0
 810da0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810da10:	6878      	ldr	r0, [r7, #4]
 810da12:	f000 f857 	bl	810dac4 <UART_WaitOnFlagUntilTimeout>
 810da16:	4603      	mov	r3, r0
 810da18:	2b00      	cmp	r3, #0
 810da1a:	d03c      	beq.n	810da96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810da1c:	687b      	ldr	r3, [r7, #4]
 810da1e:	681b      	ldr	r3, [r3, #0]
 810da20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810da22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810da24:	e853 3f00 	ldrex	r3, [r3]
 810da28:	623b      	str	r3, [r7, #32]
   return(result);
 810da2a:	6a3b      	ldr	r3, [r7, #32]
 810da2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810da30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810da32:	687b      	ldr	r3, [r7, #4]
 810da34:	681b      	ldr	r3, [r3, #0]
 810da36:	461a      	mov	r2, r3
 810da38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810da3a:	633b      	str	r3, [r7, #48]	@ 0x30
 810da3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810da3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810da40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810da42:	e841 2300 	strex	r3, r2, [r1]
 810da46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810da48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da4a:	2b00      	cmp	r3, #0
 810da4c:	d1e6      	bne.n	810da1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810da4e:	687b      	ldr	r3, [r7, #4]
 810da50:	681b      	ldr	r3, [r3, #0]
 810da52:	3308      	adds	r3, #8
 810da54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810da56:	693b      	ldr	r3, [r7, #16]
 810da58:	e853 3f00 	ldrex	r3, [r3]
 810da5c:	60fb      	str	r3, [r7, #12]
   return(result);
 810da5e:	68fb      	ldr	r3, [r7, #12]
 810da60:	f023 0301 	bic.w	r3, r3, #1
 810da64:	64bb      	str	r3, [r7, #72]	@ 0x48
 810da66:	687b      	ldr	r3, [r7, #4]
 810da68:	681b      	ldr	r3, [r3, #0]
 810da6a:	3308      	adds	r3, #8
 810da6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810da6e:	61fa      	str	r2, [r7, #28]
 810da70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810da72:	69b9      	ldr	r1, [r7, #24]
 810da74:	69fa      	ldr	r2, [r7, #28]
 810da76:	e841 2300 	strex	r3, r2, [r1]
 810da7a:	617b      	str	r3, [r7, #20]
   return(result);
 810da7c:	697b      	ldr	r3, [r7, #20]
 810da7e:	2b00      	cmp	r3, #0
 810da80:	d1e5      	bne.n	810da4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810da82:	687b      	ldr	r3, [r7, #4]
 810da84:	2220      	movs	r2, #32
 810da86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810da8a:	687b      	ldr	r3, [r7, #4]
 810da8c:	2200      	movs	r2, #0
 810da8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810da92:	2303      	movs	r3, #3
 810da94:	e012      	b.n	810dabc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810da96:	687b      	ldr	r3, [r7, #4]
 810da98:	2220      	movs	r2, #32
 810da9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810da9e:	687b      	ldr	r3, [r7, #4]
 810daa0:	2220      	movs	r2, #32
 810daa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810daa6:	687b      	ldr	r3, [r7, #4]
 810daa8:	2200      	movs	r2, #0
 810daaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810daac:	687b      	ldr	r3, [r7, #4]
 810daae:	2200      	movs	r2, #0
 810dab0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810dab2:	687b      	ldr	r3, [r7, #4]
 810dab4:	2200      	movs	r2, #0
 810dab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810daba:	2300      	movs	r3, #0
}
 810dabc:	4618      	mov	r0, r3
 810dabe:	3758      	adds	r7, #88	@ 0x58
 810dac0:	46bd      	mov	sp, r7
 810dac2:	bd80      	pop	{r7, pc}

0810dac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810dac4:	b580      	push	{r7, lr}
 810dac6:	b084      	sub	sp, #16
 810dac8:	af00      	add	r7, sp, #0
 810daca:	60f8      	str	r0, [r7, #12]
 810dacc:	60b9      	str	r1, [r7, #8]
 810dace:	603b      	str	r3, [r7, #0]
 810dad0:	4613      	mov	r3, r2
 810dad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810dad4:	e04f      	b.n	810db76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810dad6:	69bb      	ldr	r3, [r7, #24]
 810dad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dadc:	d04b      	beq.n	810db76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810dade:	f7f6 fc75 	bl	81043cc <HAL_GetTick>
 810dae2:	4602      	mov	r2, r0
 810dae4:	683b      	ldr	r3, [r7, #0]
 810dae6:	1ad3      	subs	r3, r2, r3
 810dae8:	69ba      	ldr	r2, [r7, #24]
 810daea:	429a      	cmp	r2, r3
 810daec:	d302      	bcc.n	810daf4 <UART_WaitOnFlagUntilTimeout+0x30>
 810daee:	69bb      	ldr	r3, [r7, #24]
 810daf0:	2b00      	cmp	r3, #0
 810daf2:	d101      	bne.n	810daf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810daf4:	2303      	movs	r3, #3
 810daf6:	e04e      	b.n	810db96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810daf8:	68fb      	ldr	r3, [r7, #12]
 810dafa:	681b      	ldr	r3, [r3, #0]
 810dafc:	681b      	ldr	r3, [r3, #0]
 810dafe:	f003 0304 	and.w	r3, r3, #4
 810db02:	2b00      	cmp	r3, #0
 810db04:	d037      	beq.n	810db76 <UART_WaitOnFlagUntilTimeout+0xb2>
 810db06:	68bb      	ldr	r3, [r7, #8]
 810db08:	2b80      	cmp	r3, #128	@ 0x80
 810db0a:	d034      	beq.n	810db76 <UART_WaitOnFlagUntilTimeout+0xb2>
 810db0c:	68bb      	ldr	r3, [r7, #8]
 810db0e:	2b40      	cmp	r3, #64	@ 0x40
 810db10:	d031      	beq.n	810db76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810db12:	68fb      	ldr	r3, [r7, #12]
 810db14:	681b      	ldr	r3, [r3, #0]
 810db16:	69db      	ldr	r3, [r3, #28]
 810db18:	f003 0308 	and.w	r3, r3, #8
 810db1c:	2b08      	cmp	r3, #8
 810db1e:	d110      	bne.n	810db42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810db20:	68fb      	ldr	r3, [r7, #12]
 810db22:	681b      	ldr	r3, [r3, #0]
 810db24:	2208      	movs	r2, #8
 810db26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810db28:	68f8      	ldr	r0, [r7, #12]
 810db2a:	f000 f95b 	bl	810dde4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810db2e:	68fb      	ldr	r3, [r7, #12]
 810db30:	2208      	movs	r2, #8
 810db32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810db36:	68fb      	ldr	r3, [r7, #12]
 810db38:	2200      	movs	r2, #0
 810db3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810db3e:	2301      	movs	r3, #1
 810db40:	e029      	b.n	810db96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810db42:	68fb      	ldr	r3, [r7, #12]
 810db44:	681b      	ldr	r3, [r3, #0]
 810db46:	69db      	ldr	r3, [r3, #28]
 810db48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810db4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810db50:	d111      	bne.n	810db76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810db52:	68fb      	ldr	r3, [r7, #12]
 810db54:	681b      	ldr	r3, [r3, #0]
 810db56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810db5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810db5c:	68f8      	ldr	r0, [r7, #12]
 810db5e:	f000 f941 	bl	810dde4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810db62:	68fb      	ldr	r3, [r7, #12]
 810db64:	2220      	movs	r2, #32
 810db66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810db6a:	68fb      	ldr	r3, [r7, #12]
 810db6c:	2200      	movs	r2, #0
 810db6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810db72:	2303      	movs	r3, #3
 810db74:	e00f      	b.n	810db96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810db76:	68fb      	ldr	r3, [r7, #12]
 810db78:	681b      	ldr	r3, [r3, #0]
 810db7a:	69da      	ldr	r2, [r3, #28]
 810db7c:	68bb      	ldr	r3, [r7, #8]
 810db7e:	4013      	ands	r3, r2
 810db80:	68ba      	ldr	r2, [r7, #8]
 810db82:	429a      	cmp	r2, r3
 810db84:	bf0c      	ite	eq
 810db86:	2301      	moveq	r3, #1
 810db88:	2300      	movne	r3, #0
 810db8a:	b2db      	uxtb	r3, r3
 810db8c:	461a      	mov	r2, r3
 810db8e:	79fb      	ldrb	r3, [r7, #7]
 810db90:	429a      	cmp	r2, r3
 810db92:	d0a0      	beq.n	810dad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810db94:	2300      	movs	r3, #0
}
 810db96:	4618      	mov	r0, r3
 810db98:	3710      	adds	r7, #16
 810db9a:	46bd      	mov	sp, r7
 810db9c:	bd80      	pop	{r7, pc}
	...

0810dba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810dba0:	b480      	push	{r7}
 810dba2:	b0a3      	sub	sp, #140	@ 0x8c
 810dba4:	af00      	add	r7, sp, #0
 810dba6:	60f8      	str	r0, [r7, #12]
 810dba8:	60b9      	str	r1, [r7, #8]
 810dbaa:	4613      	mov	r3, r2
 810dbac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810dbae:	68fb      	ldr	r3, [r7, #12]
 810dbb0:	68ba      	ldr	r2, [r7, #8]
 810dbb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810dbb4:	68fb      	ldr	r3, [r7, #12]
 810dbb6:	88fa      	ldrh	r2, [r7, #6]
 810dbb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810dbbc:	68fb      	ldr	r3, [r7, #12]
 810dbbe:	88fa      	ldrh	r2, [r7, #6]
 810dbc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810dbc4:	68fb      	ldr	r3, [r7, #12]
 810dbc6:	2200      	movs	r2, #0
 810dbc8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810dbca:	68fb      	ldr	r3, [r7, #12]
 810dbcc:	689b      	ldr	r3, [r3, #8]
 810dbce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810dbd2:	d10e      	bne.n	810dbf2 <UART_Start_Receive_IT+0x52>
 810dbd4:	68fb      	ldr	r3, [r7, #12]
 810dbd6:	691b      	ldr	r3, [r3, #16]
 810dbd8:	2b00      	cmp	r3, #0
 810dbda:	d105      	bne.n	810dbe8 <UART_Start_Receive_IT+0x48>
 810dbdc:	68fb      	ldr	r3, [r7, #12]
 810dbde:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810dbe2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810dbe6:	e02d      	b.n	810dc44 <UART_Start_Receive_IT+0xa4>
 810dbe8:	68fb      	ldr	r3, [r7, #12]
 810dbea:	22ff      	movs	r2, #255	@ 0xff
 810dbec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810dbf0:	e028      	b.n	810dc44 <UART_Start_Receive_IT+0xa4>
 810dbf2:	68fb      	ldr	r3, [r7, #12]
 810dbf4:	689b      	ldr	r3, [r3, #8]
 810dbf6:	2b00      	cmp	r3, #0
 810dbf8:	d10d      	bne.n	810dc16 <UART_Start_Receive_IT+0x76>
 810dbfa:	68fb      	ldr	r3, [r7, #12]
 810dbfc:	691b      	ldr	r3, [r3, #16]
 810dbfe:	2b00      	cmp	r3, #0
 810dc00:	d104      	bne.n	810dc0c <UART_Start_Receive_IT+0x6c>
 810dc02:	68fb      	ldr	r3, [r7, #12]
 810dc04:	22ff      	movs	r2, #255	@ 0xff
 810dc06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810dc0a:	e01b      	b.n	810dc44 <UART_Start_Receive_IT+0xa4>
 810dc0c:	68fb      	ldr	r3, [r7, #12]
 810dc0e:	227f      	movs	r2, #127	@ 0x7f
 810dc10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810dc14:	e016      	b.n	810dc44 <UART_Start_Receive_IT+0xa4>
 810dc16:	68fb      	ldr	r3, [r7, #12]
 810dc18:	689b      	ldr	r3, [r3, #8]
 810dc1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810dc1e:	d10d      	bne.n	810dc3c <UART_Start_Receive_IT+0x9c>
 810dc20:	68fb      	ldr	r3, [r7, #12]
 810dc22:	691b      	ldr	r3, [r3, #16]
 810dc24:	2b00      	cmp	r3, #0
 810dc26:	d104      	bne.n	810dc32 <UART_Start_Receive_IT+0x92>
 810dc28:	68fb      	ldr	r3, [r7, #12]
 810dc2a:	227f      	movs	r2, #127	@ 0x7f
 810dc2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810dc30:	e008      	b.n	810dc44 <UART_Start_Receive_IT+0xa4>
 810dc32:	68fb      	ldr	r3, [r7, #12]
 810dc34:	223f      	movs	r2, #63	@ 0x3f
 810dc36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810dc3a:	e003      	b.n	810dc44 <UART_Start_Receive_IT+0xa4>
 810dc3c:	68fb      	ldr	r3, [r7, #12]
 810dc3e:	2200      	movs	r2, #0
 810dc40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810dc44:	68fb      	ldr	r3, [r7, #12]
 810dc46:	2200      	movs	r2, #0
 810dc48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810dc4c:	68fb      	ldr	r3, [r7, #12]
 810dc4e:	2222      	movs	r2, #34	@ 0x22
 810dc50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810dc54:	68fb      	ldr	r3, [r7, #12]
 810dc56:	681b      	ldr	r3, [r3, #0]
 810dc58:	3308      	adds	r3, #8
 810dc5a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dc5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810dc5e:	e853 3f00 	ldrex	r3, [r3]
 810dc62:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810dc64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810dc66:	f043 0301 	orr.w	r3, r3, #1
 810dc6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810dc6e:	68fb      	ldr	r3, [r7, #12]
 810dc70:	681b      	ldr	r3, [r3, #0]
 810dc72:	3308      	adds	r3, #8
 810dc74:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810dc78:	673a      	str	r2, [r7, #112]	@ 0x70
 810dc7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dc7c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810dc7e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810dc80:	e841 2300 	strex	r3, r2, [r1]
 810dc84:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810dc86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810dc88:	2b00      	cmp	r3, #0
 810dc8a:	d1e3      	bne.n	810dc54 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810dc8c:	68fb      	ldr	r3, [r7, #12]
 810dc8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810dc90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810dc94:	d14f      	bne.n	810dd36 <UART_Start_Receive_IT+0x196>
 810dc96:	68fb      	ldr	r3, [r7, #12]
 810dc98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810dc9c:	88fa      	ldrh	r2, [r7, #6]
 810dc9e:	429a      	cmp	r2, r3
 810dca0:	d349      	bcc.n	810dd36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810dca2:	68fb      	ldr	r3, [r7, #12]
 810dca4:	689b      	ldr	r3, [r3, #8]
 810dca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810dcaa:	d107      	bne.n	810dcbc <UART_Start_Receive_IT+0x11c>
 810dcac:	68fb      	ldr	r3, [r7, #12]
 810dcae:	691b      	ldr	r3, [r3, #16]
 810dcb0:	2b00      	cmp	r3, #0
 810dcb2:	d103      	bne.n	810dcbc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810dcb4:	68fb      	ldr	r3, [r7, #12]
 810dcb6:	4a47      	ldr	r2, [pc, #284]	@ (810ddd4 <UART_Start_Receive_IT+0x234>)
 810dcb8:	675a      	str	r2, [r3, #116]	@ 0x74
 810dcba:	e002      	b.n	810dcc2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810dcbc:	68fb      	ldr	r3, [r7, #12]
 810dcbe:	4a46      	ldr	r2, [pc, #280]	@ (810ddd8 <UART_Start_Receive_IT+0x238>)
 810dcc0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810dcc2:	68fb      	ldr	r3, [r7, #12]
 810dcc4:	691b      	ldr	r3, [r3, #16]
 810dcc6:	2b00      	cmp	r3, #0
 810dcc8:	d01a      	beq.n	810dd00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810dcca:	68fb      	ldr	r3, [r7, #12]
 810dccc:	681b      	ldr	r3, [r3, #0]
 810dcce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dcd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810dcd2:	e853 3f00 	ldrex	r3, [r3]
 810dcd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810dcd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dcda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810dcde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810dce2:	68fb      	ldr	r3, [r7, #12]
 810dce4:	681b      	ldr	r3, [r3, #0]
 810dce6:	461a      	mov	r2, r3
 810dce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810dcec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810dcee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dcf0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810dcf2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810dcf4:	e841 2300 	strex	r3, r2, [r1]
 810dcf8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810dcfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810dcfc:	2b00      	cmp	r3, #0
 810dcfe:	d1e4      	bne.n	810dcca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810dd00:	68fb      	ldr	r3, [r7, #12]
 810dd02:	681b      	ldr	r3, [r3, #0]
 810dd04:	3308      	adds	r3, #8
 810dd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dd08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dd0a:	e853 3f00 	ldrex	r3, [r3]
 810dd0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810dd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dd12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810dd16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810dd18:	68fb      	ldr	r3, [r7, #12]
 810dd1a:	681b      	ldr	r3, [r3, #0]
 810dd1c:	3308      	adds	r3, #8
 810dd1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810dd20:	64ba      	str	r2, [r7, #72]	@ 0x48
 810dd22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dd24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810dd26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810dd28:	e841 2300 	strex	r3, r2, [r1]
 810dd2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810dd2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810dd30:	2b00      	cmp	r3, #0
 810dd32:	d1e5      	bne.n	810dd00 <UART_Start_Receive_IT+0x160>
 810dd34:	e046      	b.n	810ddc4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810dd36:	68fb      	ldr	r3, [r7, #12]
 810dd38:	689b      	ldr	r3, [r3, #8]
 810dd3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810dd3e:	d107      	bne.n	810dd50 <UART_Start_Receive_IT+0x1b0>
 810dd40:	68fb      	ldr	r3, [r7, #12]
 810dd42:	691b      	ldr	r3, [r3, #16]
 810dd44:	2b00      	cmp	r3, #0
 810dd46:	d103      	bne.n	810dd50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 810dd48:	68fb      	ldr	r3, [r7, #12]
 810dd4a:	4a24      	ldr	r2, [pc, #144]	@ (810dddc <UART_Start_Receive_IT+0x23c>)
 810dd4c:	675a      	str	r2, [r3, #116]	@ 0x74
 810dd4e:	e002      	b.n	810dd56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 810dd50:	68fb      	ldr	r3, [r7, #12]
 810dd52:	4a23      	ldr	r2, [pc, #140]	@ (810dde0 <UART_Start_Receive_IT+0x240>)
 810dd54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810dd56:	68fb      	ldr	r3, [r7, #12]
 810dd58:	691b      	ldr	r3, [r3, #16]
 810dd5a:	2b00      	cmp	r3, #0
 810dd5c:	d019      	beq.n	810dd92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 810dd5e:	68fb      	ldr	r3, [r7, #12]
 810dd60:	681b      	ldr	r3, [r3, #0]
 810dd62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dd64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dd66:	e853 3f00 	ldrex	r3, [r3]
 810dd6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810dd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dd6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 810dd72:	677b      	str	r3, [r7, #116]	@ 0x74
 810dd74:	68fb      	ldr	r3, [r7, #12]
 810dd76:	681b      	ldr	r3, [r3, #0]
 810dd78:	461a      	mov	r2, r3
 810dd7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810dd7c:	637b      	str	r3, [r7, #52]	@ 0x34
 810dd7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dd80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810dd82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810dd84:	e841 2300 	strex	r3, r2, [r1]
 810dd88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810dd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dd8c:	2b00      	cmp	r3, #0
 810dd8e:	d1e6      	bne.n	810dd5e <UART_Start_Receive_IT+0x1be>
 810dd90:	e018      	b.n	810ddc4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810dd92:	68fb      	ldr	r3, [r7, #12]
 810dd94:	681b      	ldr	r3, [r3, #0]
 810dd96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dd98:	697b      	ldr	r3, [r7, #20]
 810dd9a:	e853 3f00 	ldrex	r3, [r3]
 810dd9e:	613b      	str	r3, [r7, #16]
   return(result);
 810dda0:	693b      	ldr	r3, [r7, #16]
 810dda2:	f043 0320 	orr.w	r3, r3, #32
 810dda6:	67bb      	str	r3, [r7, #120]	@ 0x78
 810dda8:	68fb      	ldr	r3, [r7, #12]
 810ddaa:	681b      	ldr	r3, [r3, #0]
 810ddac:	461a      	mov	r2, r3
 810ddae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810ddb0:	623b      	str	r3, [r7, #32]
 810ddb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ddb4:	69f9      	ldr	r1, [r7, #28]
 810ddb6:	6a3a      	ldr	r2, [r7, #32]
 810ddb8:	e841 2300 	strex	r3, r2, [r1]
 810ddbc:	61bb      	str	r3, [r7, #24]
   return(result);
 810ddbe:	69bb      	ldr	r3, [r7, #24]
 810ddc0:	2b00      	cmp	r3, #0
 810ddc2:	d1e6      	bne.n	810dd92 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 810ddc4:	2300      	movs	r3, #0
}
 810ddc6:	4618      	mov	r0, r3
 810ddc8:	378c      	adds	r7, #140	@ 0x8c
 810ddca:	46bd      	mov	sp, r7
 810ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ddd0:	4770      	bx	lr
 810ddd2:	bf00      	nop
 810ddd4:	0810e605 	.word	0x0810e605
 810ddd8:	0810e2a5 	.word	0x0810e2a5
 810dddc:	0810e0ed 	.word	0x0810e0ed
 810dde0:	0810df35 	.word	0x0810df35

0810dde4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810dde4:	b480      	push	{r7}
 810dde6:	b095      	sub	sp, #84	@ 0x54
 810dde8:	af00      	add	r7, sp, #0
 810ddea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ddec:	687b      	ldr	r3, [r7, #4]
 810ddee:	681b      	ldr	r3, [r3, #0]
 810ddf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ddf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ddf4:	e853 3f00 	ldrex	r3, [r3]
 810ddf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810ddfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810de00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810de02:	687b      	ldr	r3, [r7, #4]
 810de04:	681b      	ldr	r3, [r3, #0]
 810de06:	461a      	mov	r2, r3
 810de08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810de0a:	643b      	str	r3, [r7, #64]	@ 0x40
 810de0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810de0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810de10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810de12:	e841 2300 	strex	r3, r2, [r1]
 810de16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810de18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810de1a:	2b00      	cmp	r3, #0
 810de1c:	d1e6      	bne.n	810ddec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810de1e:	687b      	ldr	r3, [r7, #4]
 810de20:	681b      	ldr	r3, [r3, #0]
 810de22:	3308      	adds	r3, #8
 810de24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810de26:	6a3b      	ldr	r3, [r7, #32]
 810de28:	e853 3f00 	ldrex	r3, [r3]
 810de2c:	61fb      	str	r3, [r7, #28]
   return(result);
 810de2e:	69fb      	ldr	r3, [r7, #28]
 810de30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810de34:	f023 0301 	bic.w	r3, r3, #1
 810de38:	64bb      	str	r3, [r7, #72]	@ 0x48
 810de3a:	687b      	ldr	r3, [r7, #4]
 810de3c:	681b      	ldr	r3, [r3, #0]
 810de3e:	3308      	adds	r3, #8
 810de40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810de42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810de44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810de46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810de48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810de4a:	e841 2300 	strex	r3, r2, [r1]
 810de4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810de50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810de52:	2b00      	cmp	r3, #0
 810de54:	d1e3      	bne.n	810de1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810de56:	687b      	ldr	r3, [r7, #4]
 810de58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810de5a:	2b01      	cmp	r3, #1
 810de5c:	d118      	bne.n	810de90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810de5e:	687b      	ldr	r3, [r7, #4]
 810de60:	681b      	ldr	r3, [r3, #0]
 810de62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810de64:	68fb      	ldr	r3, [r7, #12]
 810de66:	e853 3f00 	ldrex	r3, [r3]
 810de6a:	60bb      	str	r3, [r7, #8]
   return(result);
 810de6c:	68bb      	ldr	r3, [r7, #8]
 810de6e:	f023 0310 	bic.w	r3, r3, #16
 810de72:	647b      	str	r3, [r7, #68]	@ 0x44
 810de74:	687b      	ldr	r3, [r7, #4]
 810de76:	681b      	ldr	r3, [r3, #0]
 810de78:	461a      	mov	r2, r3
 810de7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810de7c:	61bb      	str	r3, [r7, #24]
 810de7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810de80:	6979      	ldr	r1, [r7, #20]
 810de82:	69ba      	ldr	r2, [r7, #24]
 810de84:	e841 2300 	strex	r3, r2, [r1]
 810de88:	613b      	str	r3, [r7, #16]
   return(result);
 810de8a:	693b      	ldr	r3, [r7, #16]
 810de8c:	2b00      	cmp	r3, #0
 810de8e:	d1e6      	bne.n	810de5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810de90:	687b      	ldr	r3, [r7, #4]
 810de92:	2220      	movs	r2, #32
 810de94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810de98:	687b      	ldr	r3, [r7, #4]
 810de9a:	2200      	movs	r2, #0
 810de9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810de9e:	687b      	ldr	r3, [r7, #4]
 810dea0:	2200      	movs	r2, #0
 810dea2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810dea4:	bf00      	nop
 810dea6:	3754      	adds	r7, #84	@ 0x54
 810dea8:	46bd      	mov	sp, r7
 810deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810deae:	4770      	bx	lr

0810deb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810deb0:	b580      	push	{r7, lr}
 810deb2:	b084      	sub	sp, #16
 810deb4:	af00      	add	r7, sp, #0
 810deb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810deb8:	687b      	ldr	r3, [r7, #4]
 810deba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810debc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810debe:	68fb      	ldr	r3, [r7, #12]
 810dec0:	2200      	movs	r2, #0
 810dec2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 810dec6:	68fb      	ldr	r3, [r7, #12]
 810dec8:	2200      	movs	r2, #0
 810deca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810dece:	68f8      	ldr	r0, [r7, #12]
 810ded0:	f7fe ff2e 	bl	810cd30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810ded4:	bf00      	nop
 810ded6:	3710      	adds	r7, #16
 810ded8:	46bd      	mov	sp, r7
 810deda:	bd80      	pop	{r7, pc}

0810dedc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810dedc:	b580      	push	{r7, lr}
 810dede:	b088      	sub	sp, #32
 810dee0:	af00      	add	r7, sp, #0
 810dee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810dee4:	687b      	ldr	r3, [r7, #4]
 810dee6:	681b      	ldr	r3, [r3, #0]
 810dee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810deea:	68fb      	ldr	r3, [r7, #12]
 810deec:	e853 3f00 	ldrex	r3, [r3]
 810def0:	60bb      	str	r3, [r7, #8]
   return(result);
 810def2:	68bb      	ldr	r3, [r7, #8]
 810def4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810def8:	61fb      	str	r3, [r7, #28]
 810defa:	687b      	ldr	r3, [r7, #4]
 810defc:	681b      	ldr	r3, [r3, #0]
 810defe:	461a      	mov	r2, r3
 810df00:	69fb      	ldr	r3, [r7, #28]
 810df02:	61bb      	str	r3, [r7, #24]
 810df04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810df06:	6979      	ldr	r1, [r7, #20]
 810df08:	69ba      	ldr	r2, [r7, #24]
 810df0a:	e841 2300 	strex	r3, r2, [r1]
 810df0e:	613b      	str	r3, [r7, #16]
   return(result);
 810df10:	693b      	ldr	r3, [r7, #16]
 810df12:	2b00      	cmp	r3, #0
 810df14:	d1e6      	bne.n	810dee4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810df16:	687b      	ldr	r3, [r7, #4]
 810df18:	2220      	movs	r2, #32
 810df1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810df1e:	687b      	ldr	r3, [r7, #4]
 810df20:	2200      	movs	r2, #0
 810df22:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810df24:	6878      	ldr	r0, [r7, #4]
 810df26:	f7fe fef9 	bl	810cd1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810df2a:	bf00      	nop
 810df2c:	3720      	adds	r7, #32
 810df2e:	46bd      	mov	sp, r7
 810df30:	bd80      	pop	{r7, pc}
	...

0810df34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 810df34:	b580      	push	{r7, lr}
 810df36:	b09c      	sub	sp, #112	@ 0x70
 810df38:	af00      	add	r7, sp, #0
 810df3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 810df3c:	687b      	ldr	r3, [r7, #4]
 810df3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810df42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810df46:	687b      	ldr	r3, [r7, #4]
 810df48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810df4c:	2b22      	cmp	r3, #34	@ 0x22
 810df4e:	f040 80be 	bne.w	810e0ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810df52:	687b      	ldr	r3, [r7, #4]
 810df54:	681b      	ldr	r3, [r3, #0]
 810df56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810df58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810df5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 810df60:	b2d9      	uxtb	r1, r3
 810df62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810df66:	b2da      	uxtb	r2, r3
 810df68:	687b      	ldr	r3, [r7, #4]
 810df6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810df6c:	400a      	ands	r2, r1
 810df6e:	b2d2      	uxtb	r2, r2
 810df70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 810df72:	687b      	ldr	r3, [r7, #4]
 810df74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810df76:	1c5a      	adds	r2, r3, #1
 810df78:	687b      	ldr	r3, [r7, #4]
 810df7a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810df7c:	687b      	ldr	r3, [r7, #4]
 810df7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810df82:	b29b      	uxth	r3, r3
 810df84:	3b01      	subs	r3, #1
 810df86:	b29a      	uxth	r2, r3
 810df88:	687b      	ldr	r3, [r7, #4]
 810df8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810df8e:	687b      	ldr	r3, [r7, #4]
 810df90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810df94:	b29b      	uxth	r3, r3
 810df96:	2b00      	cmp	r3, #0
 810df98:	f040 80a1 	bne.w	810e0de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810df9c:	687b      	ldr	r3, [r7, #4]
 810df9e:	681b      	ldr	r3, [r3, #0]
 810dfa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dfa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dfa4:	e853 3f00 	ldrex	r3, [r3]
 810dfa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810dfaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810dfac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810dfb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 810dfb2:	687b      	ldr	r3, [r7, #4]
 810dfb4:	681b      	ldr	r3, [r3, #0]
 810dfb6:	461a      	mov	r2, r3
 810dfb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810dfba:	65bb      	str	r3, [r7, #88]	@ 0x58
 810dfbc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dfbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810dfc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810dfc2:	e841 2300 	strex	r3, r2, [r1]
 810dfc6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810dfc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810dfca:	2b00      	cmp	r3, #0
 810dfcc:	d1e6      	bne.n	810df9c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810dfce:	687b      	ldr	r3, [r7, #4]
 810dfd0:	681b      	ldr	r3, [r3, #0]
 810dfd2:	3308      	adds	r3, #8
 810dfd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dfd8:	e853 3f00 	ldrex	r3, [r3]
 810dfdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810dfde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810dfe0:	f023 0301 	bic.w	r3, r3, #1
 810dfe4:	667b      	str	r3, [r7, #100]	@ 0x64
 810dfe6:	687b      	ldr	r3, [r7, #4]
 810dfe8:	681b      	ldr	r3, [r3, #0]
 810dfea:	3308      	adds	r3, #8
 810dfec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810dfee:	647a      	str	r2, [r7, #68]	@ 0x44
 810dff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810dff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810dff6:	e841 2300 	strex	r3, r2, [r1]
 810dffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810dffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dffe:	2b00      	cmp	r3, #0
 810e000:	d1e5      	bne.n	810dfce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810e002:	687b      	ldr	r3, [r7, #4]
 810e004:	2220      	movs	r2, #32
 810e006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810e00a:	687b      	ldr	r3, [r7, #4]
 810e00c:	2200      	movs	r2, #0
 810e00e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e010:	687b      	ldr	r3, [r7, #4]
 810e012:	2200      	movs	r2, #0
 810e014:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e016:	687b      	ldr	r3, [r7, #4]
 810e018:	681b      	ldr	r3, [r3, #0]
 810e01a:	4a33      	ldr	r2, [pc, #204]	@ (810e0e8 <UART_RxISR_8BIT+0x1b4>)
 810e01c:	4293      	cmp	r3, r2
 810e01e:	d01f      	beq.n	810e060 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e020:	687b      	ldr	r3, [r7, #4]
 810e022:	681b      	ldr	r3, [r3, #0]
 810e024:	685b      	ldr	r3, [r3, #4]
 810e026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e02a:	2b00      	cmp	r3, #0
 810e02c:	d018      	beq.n	810e060 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e02e:	687b      	ldr	r3, [r7, #4]
 810e030:	681b      	ldr	r3, [r3, #0]
 810e032:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e036:	e853 3f00 	ldrex	r3, [r3]
 810e03a:	623b      	str	r3, [r7, #32]
   return(result);
 810e03c:	6a3b      	ldr	r3, [r7, #32]
 810e03e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e042:	663b      	str	r3, [r7, #96]	@ 0x60
 810e044:	687b      	ldr	r3, [r7, #4]
 810e046:	681b      	ldr	r3, [r3, #0]
 810e048:	461a      	mov	r2, r3
 810e04a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810e04c:	633b      	str	r3, [r7, #48]	@ 0x30
 810e04e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e050:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810e052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e054:	e841 2300 	strex	r3, r2, [r1]
 810e058:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810e05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e05c:	2b00      	cmp	r3, #0
 810e05e:	d1e6      	bne.n	810e02e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e060:	687b      	ldr	r3, [r7, #4]
 810e062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e064:	2b01      	cmp	r3, #1
 810e066:	d12e      	bne.n	810e0c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e068:	687b      	ldr	r3, [r7, #4]
 810e06a:	2200      	movs	r2, #0
 810e06c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e06e:	687b      	ldr	r3, [r7, #4]
 810e070:	681b      	ldr	r3, [r3, #0]
 810e072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e074:	693b      	ldr	r3, [r7, #16]
 810e076:	e853 3f00 	ldrex	r3, [r3]
 810e07a:	60fb      	str	r3, [r7, #12]
   return(result);
 810e07c:	68fb      	ldr	r3, [r7, #12]
 810e07e:	f023 0310 	bic.w	r3, r3, #16
 810e082:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810e084:	687b      	ldr	r3, [r7, #4]
 810e086:	681b      	ldr	r3, [r3, #0]
 810e088:	461a      	mov	r2, r3
 810e08a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e08c:	61fb      	str	r3, [r7, #28]
 810e08e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e090:	69b9      	ldr	r1, [r7, #24]
 810e092:	69fa      	ldr	r2, [r7, #28]
 810e094:	e841 2300 	strex	r3, r2, [r1]
 810e098:	617b      	str	r3, [r7, #20]
   return(result);
 810e09a:	697b      	ldr	r3, [r7, #20]
 810e09c:	2b00      	cmp	r3, #0
 810e09e:	d1e6      	bne.n	810e06e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e0a0:	687b      	ldr	r3, [r7, #4]
 810e0a2:	681b      	ldr	r3, [r3, #0]
 810e0a4:	69db      	ldr	r3, [r3, #28]
 810e0a6:	f003 0310 	and.w	r3, r3, #16
 810e0aa:	2b10      	cmp	r3, #16
 810e0ac:	d103      	bne.n	810e0b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e0ae:	687b      	ldr	r3, [r7, #4]
 810e0b0:	681b      	ldr	r3, [r3, #0]
 810e0b2:	2210      	movs	r2, #16
 810e0b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e0b6:	687b      	ldr	r3, [r7, #4]
 810e0b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e0bc:	4619      	mov	r1, r3
 810e0be:	6878      	ldr	r0, [r7, #4]
 810e0c0:	f7fe fe40 	bl	810cd44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e0c4:	e00b      	b.n	810e0de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810e0c6:	6878      	ldr	r0, [r7, #4]
 810e0c8:	f7f5 fbae 	bl	8103828 <HAL_UART_RxCpltCallback>
}
 810e0cc:	e007      	b.n	810e0de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e0ce:	687b      	ldr	r3, [r7, #4]
 810e0d0:	681b      	ldr	r3, [r3, #0]
 810e0d2:	699a      	ldr	r2, [r3, #24]
 810e0d4:	687b      	ldr	r3, [r7, #4]
 810e0d6:	681b      	ldr	r3, [r3, #0]
 810e0d8:	f042 0208 	orr.w	r2, r2, #8
 810e0dc:	619a      	str	r2, [r3, #24]
}
 810e0de:	bf00      	nop
 810e0e0:	3770      	adds	r7, #112	@ 0x70
 810e0e2:	46bd      	mov	sp, r7
 810e0e4:	bd80      	pop	{r7, pc}
 810e0e6:	bf00      	nop
 810e0e8:	58000c00 	.word	0x58000c00

0810e0ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810e0ec:	b580      	push	{r7, lr}
 810e0ee:	b09c      	sub	sp, #112	@ 0x70
 810e0f0:	af00      	add	r7, sp, #0
 810e0f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810e0f4:	687b      	ldr	r3, [r7, #4]
 810e0f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e0fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e0fe:	687b      	ldr	r3, [r7, #4]
 810e100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e104:	2b22      	cmp	r3, #34	@ 0x22
 810e106:	f040 80be 	bne.w	810e286 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e10a:	687b      	ldr	r3, [r7, #4]
 810e10c:	681b      	ldr	r3, [r3, #0]
 810e10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e110:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810e114:	687b      	ldr	r3, [r7, #4]
 810e116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e118:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 810e11a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 810e11e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810e122:	4013      	ands	r3, r2
 810e124:	b29a      	uxth	r2, r3
 810e126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810e128:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 810e12a:	687b      	ldr	r3, [r7, #4]
 810e12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e12e:	1c9a      	adds	r2, r3, #2
 810e130:	687b      	ldr	r3, [r7, #4]
 810e132:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810e134:	687b      	ldr	r3, [r7, #4]
 810e136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e13a:	b29b      	uxth	r3, r3
 810e13c:	3b01      	subs	r3, #1
 810e13e:	b29a      	uxth	r2, r3
 810e140:	687b      	ldr	r3, [r7, #4]
 810e142:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810e146:	687b      	ldr	r3, [r7, #4]
 810e148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e14c:	b29b      	uxth	r3, r3
 810e14e:	2b00      	cmp	r3, #0
 810e150:	f040 80a1 	bne.w	810e296 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810e154:	687b      	ldr	r3, [r7, #4]
 810e156:	681b      	ldr	r3, [r3, #0]
 810e158:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e15a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e15c:	e853 3f00 	ldrex	r3, [r3]
 810e160:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810e162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810e168:	667b      	str	r3, [r7, #100]	@ 0x64
 810e16a:	687b      	ldr	r3, [r7, #4]
 810e16c:	681b      	ldr	r3, [r3, #0]
 810e16e:	461a      	mov	r2, r3
 810e170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810e172:	657b      	str	r3, [r7, #84]	@ 0x54
 810e174:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e176:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810e178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810e17a:	e841 2300 	strex	r3, r2, [r1]
 810e17e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810e180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e182:	2b00      	cmp	r3, #0
 810e184:	d1e6      	bne.n	810e154 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e186:	687b      	ldr	r3, [r7, #4]
 810e188:	681b      	ldr	r3, [r3, #0]
 810e18a:	3308      	adds	r3, #8
 810e18c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e190:	e853 3f00 	ldrex	r3, [r3]
 810e194:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e198:	f023 0301 	bic.w	r3, r3, #1
 810e19c:	663b      	str	r3, [r7, #96]	@ 0x60
 810e19e:	687b      	ldr	r3, [r7, #4]
 810e1a0:	681b      	ldr	r3, [r3, #0]
 810e1a2:	3308      	adds	r3, #8
 810e1a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810e1a6:	643a      	str	r2, [r7, #64]	@ 0x40
 810e1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e1aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810e1ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810e1ae:	e841 2300 	strex	r3, r2, [r1]
 810e1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e1b6:	2b00      	cmp	r3, #0
 810e1b8:	d1e5      	bne.n	810e186 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810e1ba:	687b      	ldr	r3, [r7, #4]
 810e1bc:	2220      	movs	r2, #32
 810e1be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810e1c2:	687b      	ldr	r3, [r7, #4]
 810e1c4:	2200      	movs	r2, #0
 810e1c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e1c8:	687b      	ldr	r3, [r7, #4]
 810e1ca:	2200      	movs	r2, #0
 810e1cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e1ce:	687b      	ldr	r3, [r7, #4]
 810e1d0:	681b      	ldr	r3, [r3, #0]
 810e1d2:	4a33      	ldr	r2, [pc, #204]	@ (810e2a0 <UART_RxISR_16BIT+0x1b4>)
 810e1d4:	4293      	cmp	r3, r2
 810e1d6:	d01f      	beq.n	810e218 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e1d8:	687b      	ldr	r3, [r7, #4]
 810e1da:	681b      	ldr	r3, [r3, #0]
 810e1dc:	685b      	ldr	r3, [r3, #4]
 810e1de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e1e2:	2b00      	cmp	r3, #0
 810e1e4:	d018      	beq.n	810e218 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e1e6:	687b      	ldr	r3, [r7, #4]
 810e1e8:	681b      	ldr	r3, [r3, #0]
 810e1ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e1ec:	6a3b      	ldr	r3, [r7, #32]
 810e1ee:	e853 3f00 	ldrex	r3, [r3]
 810e1f2:	61fb      	str	r3, [r7, #28]
   return(result);
 810e1f4:	69fb      	ldr	r3, [r7, #28]
 810e1f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e1fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810e1fc:	687b      	ldr	r3, [r7, #4]
 810e1fe:	681b      	ldr	r3, [r3, #0]
 810e200:	461a      	mov	r2, r3
 810e202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810e206:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810e20a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e20c:	e841 2300 	strex	r3, r2, [r1]
 810e210:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810e212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e214:	2b00      	cmp	r3, #0
 810e216:	d1e6      	bne.n	810e1e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e218:	687b      	ldr	r3, [r7, #4]
 810e21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e21c:	2b01      	cmp	r3, #1
 810e21e:	d12e      	bne.n	810e27e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e220:	687b      	ldr	r3, [r7, #4]
 810e222:	2200      	movs	r2, #0
 810e224:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e226:	687b      	ldr	r3, [r7, #4]
 810e228:	681b      	ldr	r3, [r3, #0]
 810e22a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e22c:	68fb      	ldr	r3, [r7, #12]
 810e22e:	e853 3f00 	ldrex	r3, [r3]
 810e232:	60bb      	str	r3, [r7, #8]
   return(result);
 810e234:	68bb      	ldr	r3, [r7, #8]
 810e236:	f023 0310 	bic.w	r3, r3, #16
 810e23a:	65bb      	str	r3, [r7, #88]	@ 0x58
 810e23c:	687b      	ldr	r3, [r7, #4]
 810e23e:	681b      	ldr	r3, [r3, #0]
 810e240:	461a      	mov	r2, r3
 810e242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810e244:	61bb      	str	r3, [r7, #24]
 810e246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e248:	6979      	ldr	r1, [r7, #20]
 810e24a:	69ba      	ldr	r2, [r7, #24]
 810e24c:	e841 2300 	strex	r3, r2, [r1]
 810e250:	613b      	str	r3, [r7, #16]
   return(result);
 810e252:	693b      	ldr	r3, [r7, #16]
 810e254:	2b00      	cmp	r3, #0
 810e256:	d1e6      	bne.n	810e226 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e258:	687b      	ldr	r3, [r7, #4]
 810e25a:	681b      	ldr	r3, [r3, #0]
 810e25c:	69db      	ldr	r3, [r3, #28]
 810e25e:	f003 0310 	and.w	r3, r3, #16
 810e262:	2b10      	cmp	r3, #16
 810e264:	d103      	bne.n	810e26e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e266:	687b      	ldr	r3, [r7, #4]
 810e268:	681b      	ldr	r3, [r3, #0]
 810e26a:	2210      	movs	r2, #16
 810e26c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e26e:	687b      	ldr	r3, [r7, #4]
 810e270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e274:	4619      	mov	r1, r3
 810e276:	6878      	ldr	r0, [r7, #4]
 810e278:	f7fe fd64 	bl	810cd44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e27c:	e00b      	b.n	810e296 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810e27e:	6878      	ldr	r0, [r7, #4]
 810e280:	f7f5 fad2 	bl	8103828 <HAL_UART_RxCpltCallback>
}
 810e284:	e007      	b.n	810e296 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e286:	687b      	ldr	r3, [r7, #4]
 810e288:	681b      	ldr	r3, [r3, #0]
 810e28a:	699a      	ldr	r2, [r3, #24]
 810e28c:	687b      	ldr	r3, [r7, #4]
 810e28e:	681b      	ldr	r3, [r3, #0]
 810e290:	f042 0208 	orr.w	r2, r2, #8
 810e294:	619a      	str	r2, [r3, #24]
}
 810e296:	bf00      	nop
 810e298:	3770      	adds	r7, #112	@ 0x70
 810e29a:	46bd      	mov	sp, r7
 810e29c:	bd80      	pop	{r7, pc}
 810e29e:	bf00      	nop
 810e2a0:	58000c00 	.word	0x58000c00

0810e2a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810e2a4:	b580      	push	{r7, lr}
 810e2a6:	b0ac      	sub	sp, #176	@ 0xb0
 810e2a8:	af00      	add	r7, sp, #0
 810e2aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810e2ac:	687b      	ldr	r3, [r7, #4]
 810e2ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e2b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810e2b6:	687b      	ldr	r3, [r7, #4]
 810e2b8:	681b      	ldr	r3, [r3, #0]
 810e2ba:	69db      	ldr	r3, [r3, #28]
 810e2bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810e2c0:	687b      	ldr	r3, [r7, #4]
 810e2c2:	681b      	ldr	r3, [r3, #0]
 810e2c4:	681b      	ldr	r3, [r3, #0]
 810e2c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810e2ca:	687b      	ldr	r3, [r7, #4]
 810e2cc:	681b      	ldr	r3, [r3, #0]
 810e2ce:	689b      	ldr	r3, [r3, #8]
 810e2d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e2d4:	687b      	ldr	r3, [r7, #4]
 810e2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e2da:	2b22      	cmp	r3, #34	@ 0x22
 810e2dc:	f040 8182 	bne.w	810e5e4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810e2e0:	687b      	ldr	r3, [r7, #4]
 810e2e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e2e6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e2ea:	e125      	b.n	810e538 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e2ec:	687b      	ldr	r3, [r7, #4]
 810e2ee:	681b      	ldr	r3, [r3, #0]
 810e2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e2f2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810e2f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 810e2fa:	b2d9      	uxtb	r1, r3
 810e2fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 810e300:	b2da      	uxtb	r2, r3
 810e302:	687b      	ldr	r3, [r7, #4]
 810e304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e306:	400a      	ands	r2, r1
 810e308:	b2d2      	uxtb	r2, r2
 810e30a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 810e30c:	687b      	ldr	r3, [r7, #4]
 810e30e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e310:	1c5a      	adds	r2, r3, #1
 810e312:	687b      	ldr	r3, [r7, #4]
 810e314:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810e316:	687b      	ldr	r3, [r7, #4]
 810e318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e31c:	b29b      	uxth	r3, r3
 810e31e:	3b01      	subs	r3, #1
 810e320:	b29a      	uxth	r2, r3
 810e322:	687b      	ldr	r3, [r7, #4]
 810e324:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810e328:	687b      	ldr	r3, [r7, #4]
 810e32a:	681b      	ldr	r3, [r3, #0]
 810e32c:	69db      	ldr	r3, [r3, #28]
 810e32e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810e332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e336:	f003 0307 	and.w	r3, r3, #7
 810e33a:	2b00      	cmp	r3, #0
 810e33c:	d053      	beq.n	810e3e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810e33e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e342:	f003 0301 	and.w	r3, r3, #1
 810e346:	2b00      	cmp	r3, #0
 810e348:	d011      	beq.n	810e36e <UART_RxISR_8BIT_FIFOEN+0xca>
 810e34a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810e34e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e352:	2b00      	cmp	r3, #0
 810e354:	d00b      	beq.n	810e36e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810e356:	687b      	ldr	r3, [r7, #4]
 810e358:	681b      	ldr	r3, [r3, #0]
 810e35a:	2201      	movs	r2, #1
 810e35c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810e35e:	687b      	ldr	r3, [r7, #4]
 810e360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e364:	f043 0201 	orr.w	r2, r3, #1
 810e368:	687b      	ldr	r3, [r7, #4]
 810e36a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e36e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e372:	f003 0302 	and.w	r3, r3, #2
 810e376:	2b00      	cmp	r3, #0
 810e378:	d011      	beq.n	810e39e <UART_RxISR_8BIT_FIFOEN+0xfa>
 810e37a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e37e:	f003 0301 	and.w	r3, r3, #1
 810e382:	2b00      	cmp	r3, #0
 810e384:	d00b      	beq.n	810e39e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810e386:	687b      	ldr	r3, [r7, #4]
 810e388:	681b      	ldr	r3, [r3, #0]
 810e38a:	2202      	movs	r2, #2
 810e38c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810e38e:	687b      	ldr	r3, [r7, #4]
 810e390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e394:	f043 0204 	orr.w	r2, r3, #4
 810e398:	687b      	ldr	r3, [r7, #4]
 810e39a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e39e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e3a2:	f003 0304 	and.w	r3, r3, #4
 810e3a6:	2b00      	cmp	r3, #0
 810e3a8:	d011      	beq.n	810e3ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 810e3aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e3ae:	f003 0301 	and.w	r3, r3, #1
 810e3b2:	2b00      	cmp	r3, #0
 810e3b4:	d00b      	beq.n	810e3ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810e3b6:	687b      	ldr	r3, [r7, #4]
 810e3b8:	681b      	ldr	r3, [r3, #0]
 810e3ba:	2204      	movs	r2, #4
 810e3bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810e3be:	687b      	ldr	r3, [r7, #4]
 810e3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e3c4:	f043 0202 	orr.w	r2, r3, #2
 810e3c8:	687b      	ldr	r3, [r7, #4]
 810e3ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810e3ce:	687b      	ldr	r3, [r7, #4]
 810e3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e3d4:	2b00      	cmp	r3, #0
 810e3d6:	d006      	beq.n	810e3e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810e3d8:	6878      	ldr	r0, [r7, #4]
 810e3da:	f7fe fca9 	bl	810cd30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e3de:	687b      	ldr	r3, [r7, #4]
 810e3e0:	2200      	movs	r2, #0
 810e3e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810e3e6:	687b      	ldr	r3, [r7, #4]
 810e3e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e3ec:	b29b      	uxth	r3, r3
 810e3ee:	2b00      	cmp	r3, #0
 810e3f0:	f040 80a2 	bne.w	810e538 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e3f4:	687b      	ldr	r3, [r7, #4]
 810e3f6:	681b      	ldr	r3, [r3, #0]
 810e3f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e3fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810e3fc:	e853 3f00 	ldrex	r3, [r3]
 810e400:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 810e402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810e404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810e408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810e40c:	687b      	ldr	r3, [r7, #4]
 810e40e:	681b      	ldr	r3, [r3, #0]
 810e410:	461a      	mov	r2, r3
 810e412:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810e416:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810e418:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e41a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 810e41c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810e41e:	e841 2300 	strex	r3, r2, [r1]
 810e422:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 810e424:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810e426:	2b00      	cmp	r3, #0
 810e428:	d1e4      	bne.n	810e3f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810e42a:	687b      	ldr	r3, [r7, #4]
 810e42c:	681b      	ldr	r3, [r3, #0]
 810e42e:	3308      	adds	r3, #8
 810e430:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e434:	e853 3f00 	ldrex	r3, [r3]
 810e438:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810e43a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810e43c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e440:	f023 0301 	bic.w	r3, r3, #1
 810e444:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810e448:	687b      	ldr	r3, [r7, #4]
 810e44a:	681b      	ldr	r3, [r3, #0]
 810e44c:	3308      	adds	r3, #8
 810e44e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810e452:	66ba      	str	r2, [r7, #104]	@ 0x68
 810e454:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e456:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810e458:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 810e45a:	e841 2300 	strex	r3, r2, [r1]
 810e45e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810e460:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810e462:	2b00      	cmp	r3, #0
 810e464:	d1e1      	bne.n	810e42a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810e466:	687b      	ldr	r3, [r7, #4]
 810e468:	2220      	movs	r2, #32
 810e46a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810e46e:	687b      	ldr	r3, [r7, #4]
 810e470:	2200      	movs	r2, #0
 810e472:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e474:	687b      	ldr	r3, [r7, #4]
 810e476:	2200      	movs	r2, #0
 810e478:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e47a:	687b      	ldr	r3, [r7, #4]
 810e47c:	681b      	ldr	r3, [r3, #0]
 810e47e:	4a5f      	ldr	r2, [pc, #380]	@ (810e5fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 810e480:	4293      	cmp	r3, r2
 810e482:	d021      	beq.n	810e4c8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e484:	687b      	ldr	r3, [r7, #4]
 810e486:	681b      	ldr	r3, [r3, #0]
 810e488:	685b      	ldr	r3, [r3, #4]
 810e48a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e48e:	2b00      	cmp	r3, #0
 810e490:	d01a      	beq.n	810e4c8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e492:	687b      	ldr	r3, [r7, #4]
 810e494:	681b      	ldr	r3, [r3, #0]
 810e496:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e49a:	e853 3f00 	ldrex	r3, [r3]
 810e49e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810e4a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e4a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e4a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810e4aa:	687b      	ldr	r3, [r7, #4]
 810e4ac:	681b      	ldr	r3, [r3, #0]
 810e4ae:	461a      	mov	r2, r3
 810e4b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810e4b4:	657b      	str	r3, [r7, #84]	@ 0x54
 810e4b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e4b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810e4ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810e4bc:	e841 2300 	strex	r3, r2, [r1]
 810e4c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810e4c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e4c4:	2b00      	cmp	r3, #0
 810e4c6:	d1e4      	bne.n	810e492 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e4c8:	687b      	ldr	r3, [r7, #4]
 810e4ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e4cc:	2b01      	cmp	r3, #1
 810e4ce:	d130      	bne.n	810e532 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e4d0:	687b      	ldr	r3, [r7, #4]
 810e4d2:	2200      	movs	r2, #0
 810e4d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e4d6:	687b      	ldr	r3, [r7, #4]
 810e4d8:	681b      	ldr	r3, [r3, #0]
 810e4da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e4de:	e853 3f00 	ldrex	r3, [r3]
 810e4e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810e4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4e6:	f023 0310 	bic.w	r3, r3, #16
 810e4ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810e4ee:	687b      	ldr	r3, [r7, #4]
 810e4f0:	681b      	ldr	r3, [r3, #0]
 810e4f2:	461a      	mov	r2, r3
 810e4f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810e4f8:	643b      	str	r3, [r7, #64]	@ 0x40
 810e4fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e4fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810e4fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810e500:	e841 2300 	strex	r3, r2, [r1]
 810e504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e508:	2b00      	cmp	r3, #0
 810e50a:	d1e4      	bne.n	810e4d6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e50c:	687b      	ldr	r3, [r7, #4]
 810e50e:	681b      	ldr	r3, [r3, #0]
 810e510:	69db      	ldr	r3, [r3, #28]
 810e512:	f003 0310 	and.w	r3, r3, #16
 810e516:	2b10      	cmp	r3, #16
 810e518:	d103      	bne.n	810e522 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e51a:	687b      	ldr	r3, [r7, #4]
 810e51c:	681b      	ldr	r3, [r3, #0]
 810e51e:	2210      	movs	r2, #16
 810e520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e522:	687b      	ldr	r3, [r7, #4]
 810e524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e528:	4619      	mov	r1, r3
 810e52a:	6878      	ldr	r0, [r7, #4]
 810e52c:	f7fe fc0a 	bl	810cd44 <HAL_UARTEx_RxEventCallback>
 810e530:	e002      	b.n	810e538 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810e532:	6878      	ldr	r0, [r7, #4]
 810e534:	f7f5 f978 	bl	8103828 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e538:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 810e53c:	2b00      	cmp	r3, #0
 810e53e:	d006      	beq.n	810e54e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 810e540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e544:	f003 0320 	and.w	r3, r3, #32
 810e548:	2b00      	cmp	r3, #0
 810e54a:	f47f aecf 	bne.w	810e2ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810e54e:	687b      	ldr	r3, [r7, #4]
 810e550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e554:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810e558:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 810e55c:	2b00      	cmp	r3, #0
 810e55e:	d049      	beq.n	810e5f4 <UART_RxISR_8BIT_FIFOEN+0x350>
 810e560:	687b      	ldr	r3, [r7, #4]
 810e562:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e566:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 810e56a:	429a      	cmp	r2, r3
 810e56c:	d242      	bcs.n	810e5f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810e56e:	687b      	ldr	r3, [r7, #4]
 810e570:	681b      	ldr	r3, [r3, #0]
 810e572:	3308      	adds	r3, #8
 810e574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e576:	6a3b      	ldr	r3, [r7, #32]
 810e578:	e853 3f00 	ldrex	r3, [r3]
 810e57c:	61fb      	str	r3, [r7, #28]
   return(result);
 810e57e:	69fb      	ldr	r3, [r7, #28]
 810e580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810e588:	687b      	ldr	r3, [r7, #4]
 810e58a:	681b      	ldr	r3, [r3, #0]
 810e58c:	3308      	adds	r3, #8
 810e58e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810e592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810e594:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810e598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e59a:	e841 2300 	strex	r3, r2, [r1]
 810e59e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810e5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e5a2:	2b00      	cmp	r3, #0
 810e5a4:	d1e3      	bne.n	810e56e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 810e5a6:	687b      	ldr	r3, [r7, #4]
 810e5a8:	4a15      	ldr	r2, [pc, #84]	@ (810e600 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 810e5aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810e5ac:	687b      	ldr	r3, [r7, #4]
 810e5ae:	681b      	ldr	r3, [r3, #0]
 810e5b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e5b2:	68fb      	ldr	r3, [r7, #12]
 810e5b4:	e853 3f00 	ldrex	r3, [r3]
 810e5b8:	60bb      	str	r3, [r7, #8]
   return(result);
 810e5ba:	68bb      	ldr	r3, [r7, #8]
 810e5bc:	f043 0320 	orr.w	r3, r3, #32
 810e5c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810e5c4:	687b      	ldr	r3, [r7, #4]
 810e5c6:	681b      	ldr	r3, [r3, #0]
 810e5c8:	461a      	mov	r2, r3
 810e5ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810e5ce:	61bb      	str	r3, [r7, #24]
 810e5d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e5d2:	6979      	ldr	r1, [r7, #20]
 810e5d4:	69ba      	ldr	r2, [r7, #24]
 810e5d6:	e841 2300 	strex	r3, r2, [r1]
 810e5da:	613b      	str	r3, [r7, #16]
   return(result);
 810e5dc:	693b      	ldr	r3, [r7, #16]
 810e5de:	2b00      	cmp	r3, #0
 810e5e0:	d1e4      	bne.n	810e5ac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e5e2:	e007      	b.n	810e5f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e5e4:	687b      	ldr	r3, [r7, #4]
 810e5e6:	681b      	ldr	r3, [r3, #0]
 810e5e8:	699a      	ldr	r2, [r3, #24]
 810e5ea:	687b      	ldr	r3, [r7, #4]
 810e5ec:	681b      	ldr	r3, [r3, #0]
 810e5ee:	f042 0208 	orr.w	r2, r2, #8
 810e5f2:	619a      	str	r2, [r3, #24]
}
 810e5f4:	bf00      	nop
 810e5f6:	37b0      	adds	r7, #176	@ 0xb0
 810e5f8:	46bd      	mov	sp, r7
 810e5fa:	bd80      	pop	{r7, pc}
 810e5fc:	58000c00 	.word	0x58000c00
 810e600:	0810df35 	.word	0x0810df35

0810e604 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810e604:	b580      	push	{r7, lr}
 810e606:	b0ae      	sub	sp, #184	@ 0xb8
 810e608:	af00      	add	r7, sp, #0
 810e60a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 810e60c:	687b      	ldr	r3, [r7, #4]
 810e60e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e612:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810e616:	687b      	ldr	r3, [r7, #4]
 810e618:	681b      	ldr	r3, [r3, #0]
 810e61a:	69db      	ldr	r3, [r3, #28]
 810e61c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810e620:	687b      	ldr	r3, [r7, #4]
 810e622:	681b      	ldr	r3, [r3, #0]
 810e624:	681b      	ldr	r3, [r3, #0]
 810e626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810e62a:	687b      	ldr	r3, [r7, #4]
 810e62c:	681b      	ldr	r3, [r3, #0]
 810e62e:	689b      	ldr	r3, [r3, #8]
 810e630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e634:	687b      	ldr	r3, [r7, #4]
 810e636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e63a:	2b22      	cmp	r3, #34	@ 0x22
 810e63c:	f040 8186 	bne.w	810e94c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810e640:	687b      	ldr	r3, [r7, #4]
 810e642:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e646:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e64a:	e129      	b.n	810e8a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e64c:	687b      	ldr	r3, [r7, #4]
 810e64e:	681b      	ldr	r3, [r3, #0]
 810e650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e652:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810e656:	687b      	ldr	r3, [r7, #4]
 810e658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e65a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 810e65e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 810e662:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 810e666:	4013      	ands	r3, r2
 810e668:	b29a      	uxth	r2, r3
 810e66a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e66e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 810e670:	687b      	ldr	r3, [r7, #4]
 810e672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e674:	1c9a      	adds	r2, r3, #2
 810e676:	687b      	ldr	r3, [r7, #4]
 810e678:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810e67a:	687b      	ldr	r3, [r7, #4]
 810e67c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e680:	b29b      	uxth	r3, r3
 810e682:	3b01      	subs	r3, #1
 810e684:	b29a      	uxth	r2, r3
 810e686:	687b      	ldr	r3, [r7, #4]
 810e688:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810e68c:	687b      	ldr	r3, [r7, #4]
 810e68e:	681b      	ldr	r3, [r3, #0]
 810e690:	69db      	ldr	r3, [r3, #28]
 810e692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810e696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e69a:	f003 0307 	and.w	r3, r3, #7
 810e69e:	2b00      	cmp	r3, #0
 810e6a0:	d053      	beq.n	810e74a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810e6a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e6a6:	f003 0301 	and.w	r3, r3, #1
 810e6aa:	2b00      	cmp	r3, #0
 810e6ac:	d011      	beq.n	810e6d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 810e6ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e6b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e6b6:	2b00      	cmp	r3, #0
 810e6b8:	d00b      	beq.n	810e6d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810e6ba:	687b      	ldr	r3, [r7, #4]
 810e6bc:	681b      	ldr	r3, [r3, #0]
 810e6be:	2201      	movs	r2, #1
 810e6c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810e6c2:	687b      	ldr	r3, [r7, #4]
 810e6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e6c8:	f043 0201 	orr.w	r2, r3, #1
 810e6cc:	687b      	ldr	r3, [r7, #4]
 810e6ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e6d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e6d6:	f003 0302 	and.w	r3, r3, #2
 810e6da:	2b00      	cmp	r3, #0
 810e6dc:	d011      	beq.n	810e702 <UART_RxISR_16BIT_FIFOEN+0xfe>
 810e6de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810e6e2:	f003 0301 	and.w	r3, r3, #1
 810e6e6:	2b00      	cmp	r3, #0
 810e6e8:	d00b      	beq.n	810e702 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810e6ea:	687b      	ldr	r3, [r7, #4]
 810e6ec:	681b      	ldr	r3, [r3, #0]
 810e6ee:	2202      	movs	r2, #2
 810e6f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810e6f2:	687b      	ldr	r3, [r7, #4]
 810e6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e6f8:	f043 0204 	orr.w	r2, r3, #4
 810e6fc:	687b      	ldr	r3, [r7, #4]
 810e6fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e706:	f003 0304 	and.w	r3, r3, #4
 810e70a:	2b00      	cmp	r3, #0
 810e70c:	d011      	beq.n	810e732 <UART_RxISR_16BIT_FIFOEN+0x12e>
 810e70e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810e712:	f003 0301 	and.w	r3, r3, #1
 810e716:	2b00      	cmp	r3, #0
 810e718:	d00b      	beq.n	810e732 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810e71a:	687b      	ldr	r3, [r7, #4]
 810e71c:	681b      	ldr	r3, [r3, #0]
 810e71e:	2204      	movs	r2, #4
 810e720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810e722:	687b      	ldr	r3, [r7, #4]
 810e724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e728:	f043 0202 	orr.w	r2, r3, #2
 810e72c:	687b      	ldr	r3, [r7, #4]
 810e72e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810e732:	687b      	ldr	r3, [r7, #4]
 810e734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e738:	2b00      	cmp	r3, #0
 810e73a:	d006      	beq.n	810e74a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810e73c:	6878      	ldr	r0, [r7, #4]
 810e73e:	f7fe faf7 	bl	810cd30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e742:	687b      	ldr	r3, [r7, #4]
 810e744:	2200      	movs	r2, #0
 810e746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810e74a:	687b      	ldr	r3, [r7, #4]
 810e74c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e750:	b29b      	uxth	r3, r3
 810e752:	2b00      	cmp	r3, #0
 810e754:	f040 80a4 	bne.w	810e8a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e758:	687b      	ldr	r3, [r7, #4]
 810e75a:	681b      	ldr	r3, [r3, #0]
 810e75c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e75e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810e760:	e853 3f00 	ldrex	r3, [r3]
 810e764:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810e766:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810e768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810e76c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810e770:	687b      	ldr	r3, [r7, #4]
 810e772:	681b      	ldr	r3, [r3, #0]
 810e774:	461a      	mov	r2, r3
 810e776:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810e77a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810e77e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e780:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810e782:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810e786:	e841 2300 	strex	r3, r2, [r1]
 810e78a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810e78c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810e78e:	2b00      	cmp	r3, #0
 810e790:	d1e2      	bne.n	810e758 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810e792:	687b      	ldr	r3, [r7, #4]
 810e794:	681b      	ldr	r3, [r3, #0]
 810e796:	3308      	adds	r3, #8
 810e798:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e79a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810e79c:	e853 3f00 	ldrex	r3, [r3]
 810e7a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810e7a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e7a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e7a8:	f023 0301 	bic.w	r3, r3, #1
 810e7ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810e7b0:	687b      	ldr	r3, [r7, #4]
 810e7b2:	681b      	ldr	r3, [r3, #0]
 810e7b4:	3308      	adds	r3, #8
 810e7b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 810e7ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810e7bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e7be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810e7c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810e7c2:	e841 2300 	strex	r3, r2, [r1]
 810e7c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810e7c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810e7ca:	2b00      	cmp	r3, #0
 810e7cc:	d1e1      	bne.n	810e792 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810e7ce:	687b      	ldr	r3, [r7, #4]
 810e7d0:	2220      	movs	r2, #32
 810e7d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810e7d6:	687b      	ldr	r3, [r7, #4]
 810e7d8:	2200      	movs	r2, #0
 810e7da:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e7dc:	687b      	ldr	r3, [r7, #4]
 810e7de:	2200      	movs	r2, #0
 810e7e0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e7e2:	687b      	ldr	r3, [r7, #4]
 810e7e4:	681b      	ldr	r3, [r3, #0]
 810e7e6:	4a5f      	ldr	r2, [pc, #380]	@ (810e964 <UART_RxISR_16BIT_FIFOEN+0x360>)
 810e7e8:	4293      	cmp	r3, r2
 810e7ea:	d021      	beq.n	810e830 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e7ec:	687b      	ldr	r3, [r7, #4]
 810e7ee:	681b      	ldr	r3, [r3, #0]
 810e7f0:	685b      	ldr	r3, [r3, #4]
 810e7f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e7f6:	2b00      	cmp	r3, #0
 810e7f8:	d01a      	beq.n	810e830 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e7fa:	687b      	ldr	r3, [r7, #4]
 810e7fc:	681b      	ldr	r3, [r3, #0]
 810e7fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e802:	e853 3f00 	ldrex	r3, [r3]
 810e806:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810e808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e80a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e80e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810e812:	687b      	ldr	r3, [r7, #4]
 810e814:	681b      	ldr	r3, [r3, #0]
 810e816:	461a      	mov	r2, r3
 810e818:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810e81c:	65bb      	str	r3, [r7, #88]	@ 0x58
 810e81e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e820:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810e822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810e824:	e841 2300 	strex	r3, r2, [r1]
 810e828:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810e82a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810e82c:	2b00      	cmp	r3, #0
 810e82e:	d1e4      	bne.n	810e7fa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e830:	687b      	ldr	r3, [r7, #4]
 810e832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e834:	2b01      	cmp	r3, #1
 810e836:	d130      	bne.n	810e89a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e838:	687b      	ldr	r3, [r7, #4]
 810e83a:	2200      	movs	r2, #0
 810e83c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e83e:	687b      	ldr	r3, [r7, #4]
 810e840:	681b      	ldr	r3, [r3, #0]
 810e842:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e846:	e853 3f00 	ldrex	r3, [r3]
 810e84a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810e84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e84e:	f023 0310 	bic.w	r3, r3, #16
 810e852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810e856:	687b      	ldr	r3, [r7, #4]
 810e858:	681b      	ldr	r3, [r3, #0]
 810e85a:	461a      	mov	r2, r3
 810e85c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810e860:	647b      	str	r3, [r7, #68]	@ 0x44
 810e862:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e864:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810e866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810e868:	e841 2300 	strex	r3, r2, [r1]
 810e86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810e86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e870:	2b00      	cmp	r3, #0
 810e872:	d1e4      	bne.n	810e83e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e874:	687b      	ldr	r3, [r7, #4]
 810e876:	681b      	ldr	r3, [r3, #0]
 810e878:	69db      	ldr	r3, [r3, #28]
 810e87a:	f003 0310 	and.w	r3, r3, #16
 810e87e:	2b10      	cmp	r3, #16
 810e880:	d103      	bne.n	810e88a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e882:	687b      	ldr	r3, [r7, #4]
 810e884:	681b      	ldr	r3, [r3, #0]
 810e886:	2210      	movs	r2, #16
 810e888:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e88a:	687b      	ldr	r3, [r7, #4]
 810e88c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e890:	4619      	mov	r1, r3
 810e892:	6878      	ldr	r0, [r7, #4]
 810e894:	f7fe fa56 	bl	810cd44 <HAL_UARTEx_RxEventCallback>
 810e898:	e002      	b.n	810e8a0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810e89a:	6878      	ldr	r0, [r7, #4]
 810e89c:	f7f4 ffc4 	bl	8103828 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e8a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 810e8a4:	2b00      	cmp	r3, #0
 810e8a6:	d006      	beq.n	810e8b6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 810e8a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e8ac:	f003 0320 	and.w	r3, r3, #32
 810e8b0:	2b00      	cmp	r3, #0
 810e8b2:	f47f aecb 	bne.w	810e64c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810e8b6:	687b      	ldr	r3, [r7, #4]
 810e8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e8bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810e8c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 810e8c4:	2b00      	cmp	r3, #0
 810e8c6:	d049      	beq.n	810e95c <UART_RxISR_16BIT_FIFOEN+0x358>
 810e8c8:	687b      	ldr	r3, [r7, #4]
 810e8ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e8ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 810e8d2:	429a      	cmp	r2, r3
 810e8d4:	d242      	bcs.n	810e95c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810e8d6:	687b      	ldr	r3, [r7, #4]
 810e8d8:	681b      	ldr	r3, [r3, #0]
 810e8da:	3308      	adds	r3, #8
 810e8dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e8e0:	e853 3f00 	ldrex	r3, [r3]
 810e8e4:	623b      	str	r3, [r7, #32]
   return(result);
 810e8e6:	6a3b      	ldr	r3, [r7, #32]
 810e8e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e8ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810e8f0:	687b      	ldr	r3, [r7, #4]
 810e8f2:	681b      	ldr	r3, [r3, #0]
 810e8f4:	3308      	adds	r3, #8
 810e8f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 810e8fa:	633a      	str	r2, [r7, #48]	@ 0x30
 810e8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e8fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810e900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e902:	e841 2300 	strex	r3, r2, [r1]
 810e906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810e908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e90a:	2b00      	cmp	r3, #0
 810e90c:	d1e3      	bne.n	810e8d6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 810e90e:	687b      	ldr	r3, [r7, #4]
 810e910:	4a15      	ldr	r2, [pc, #84]	@ (810e968 <UART_RxISR_16BIT_FIFOEN+0x364>)
 810e912:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810e914:	687b      	ldr	r3, [r7, #4]
 810e916:	681b      	ldr	r3, [r3, #0]
 810e918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e91a:	693b      	ldr	r3, [r7, #16]
 810e91c:	e853 3f00 	ldrex	r3, [r3]
 810e920:	60fb      	str	r3, [r7, #12]
   return(result);
 810e922:	68fb      	ldr	r3, [r7, #12]
 810e924:	f043 0320 	orr.w	r3, r3, #32
 810e928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810e92c:	687b      	ldr	r3, [r7, #4]
 810e92e:	681b      	ldr	r3, [r3, #0]
 810e930:	461a      	mov	r2, r3
 810e932:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810e936:	61fb      	str	r3, [r7, #28]
 810e938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e93a:	69b9      	ldr	r1, [r7, #24]
 810e93c:	69fa      	ldr	r2, [r7, #28]
 810e93e:	e841 2300 	strex	r3, r2, [r1]
 810e942:	617b      	str	r3, [r7, #20]
   return(result);
 810e944:	697b      	ldr	r3, [r7, #20]
 810e946:	2b00      	cmp	r3, #0
 810e948:	d1e4      	bne.n	810e914 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e94a:	e007      	b.n	810e95c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e94c:	687b      	ldr	r3, [r7, #4]
 810e94e:	681b      	ldr	r3, [r3, #0]
 810e950:	699a      	ldr	r2, [r3, #24]
 810e952:	687b      	ldr	r3, [r7, #4]
 810e954:	681b      	ldr	r3, [r3, #0]
 810e956:	f042 0208 	orr.w	r2, r2, #8
 810e95a:	619a      	str	r2, [r3, #24]
}
 810e95c:	bf00      	nop
 810e95e:	37b8      	adds	r7, #184	@ 0xb8
 810e960:	46bd      	mov	sp, r7
 810e962:	bd80      	pop	{r7, pc}
 810e964:	58000c00 	.word	0x58000c00
 810e968:	0810e0ed 	.word	0x0810e0ed

0810e96c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810e96c:	b480      	push	{r7}
 810e96e:	b083      	sub	sp, #12
 810e970:	af00      	add	r7, sp, #0
 810e972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810e974:	bf00      	nop
 810e976:	370c      	adds	r7, #12
 810e978:	46bd      	mov	sp, r7
 810e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e97e:	4770      	bx	lr

0810e980 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810e980:	b480      	push	{r7}
 810e982:	b083      	sub	sp, #12
 810e984:	af00      	add	r7, sp, #0
 810e986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810e988:	bf00      	nop
 810e98a:	370c      	adds	r7, #12
 810e98c:	46bd      	mov	sp, r7
 810e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e992:	4770      	bx	lr

0810e994 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810e994:	b480      	push	{r7}
 810e996:	b083      	sub	sp, #12
 810e998:	af00      	add	r7, sp, #0
 810e99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810e99c:	bf00      	nop
 810e99e:	370c      	adds	r7, #12
 810e9a0:	46bd      	mov	sp, r7
 810e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e9a6:	4770      	bx	lr

0810e9a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810e9a8:	b480      	push	{r7}
 810e9aa:	b085      	sub	sp, #20
 810e9ac:	af00      	add	r7, sp, #0
 810e9ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810e9b0:	687b      	ldr	r3, [r7, #4]
 810e9b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810e9b6:	2b01      	cmp	r3, #1
 810e9b8:	d101      	bne.n	810e9be <HAL_UARTEx_DisableFifoMode+0x16>
 810e9ba:	2302      	movs	r3, #2
 810e9bc:	e027      	b.n	810ea0e <HAL_UARTEx_DisableFifoMode+0x66>
 810e9be:	687b      	ldr	r3, [r7, #4]
 810e9c0:	2201      	movs	r2, #1
 810e9c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810e9c6:	687b      	ldr	r3, [r7, #4]
 810e9c8:	2224      	movs	r2, #36	@ 0x24
 810e9ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810e9ce:	687b      	ldr	r3, [r7, #4]
 810e9d0:	681b      	ldr	r3, [r3, #0]
 810e9d2:	681b      	ldr	r3, [r3, #0]
 810e9d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810e9d6:	687b      	ldr	r3, [r7, #4]
 810e9d8:	681b      	ldr	r3, [r3, #0]
 810e9da:	681a      	ldr	r2, [r3, #0]
 810e9dc:	687b      	ldr	r3, [r7, #4]
 810e9de:	681b      	ldr	r3, [r3, #0]
 810e9e0:	f022 0201 	bic.w	r2, r2, #1
 810e9e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810e9e6:	68fb      	ldr	r3, [r7, #12]
 810e9e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810e9ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810e9ee:	687b      	ldr	r3, [r7, #4]
 810e9f0:	2200      	movs	r2, #0
 810e9f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810e9f4:	687b      	ldr	r3, [r7, #4]
 810e9f6:	681b      	ldr	r3, [r3, #0]
 810e9f8:	68fa      	ldr	r2, [r7, #12]
 810e9fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810e9fc:	687b      	ldr	r3, [r7, #4]
 810e9fe:	2220      	movs	r2, #32
 810ea00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ea04:	687b      	ldr	r3, [r7, #4]
 810ea06:	2200      	movs	r2, #0
 810ea08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ea0c:	2300      	movs	r3, #0
}
 810ea0e:	4618      	mov	r0, r3
 810ea10:	3714      	adds	r7, #20
 810ea12:	46bd      	mov	sp, r7
 810ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea18:	4770      	bx	lr

0810ea1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ea1a:	b580      	push	{r7, lr}
 810ea1c:	b084      	sub	sp, #16
 810ea1e:	af00      	add	r7, sp, #0
 810ea20:	6078      	str	r0, [r7, #4]
 810ea22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ea24:	687b      	ldr	r3, [r7, #4]
 810ea26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ea2a:	2b01      	cmp	r3, #1
 810ea2c:	d101      	bne.n	810ea32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810ea2e:	2302      	movs	r3, #2
 810ea30:	e02d      	b.n	810ea8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810ea32:	687b      	ldr	r3, [r7, #4]
 810ea34:	2201      	movs	r2, #1
 810ea36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ea3a:	687b      	ldr	r3, [r7, #4]
 810ea3c:	2224      	movs	r2, #36	@ 0x24
 810ea3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ea42:	687b      	ldr	r3, [r7, #4]
 810ea44:	681b      	ldr	r3, [r3, #0]
 810ea46:	681b      	ldr	r3, [r3, #0]
 810ea48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ea4a:	687b      	ldr	r3, [r7, #4]
 810ea4c:	681b      	ldr	r3, [r3, #0]
 810ea4e:	681a      	ldr	r2, [r3, #0]
 810ea50:	687b      	ldr	r3, [r7, #4]
 810ea52:	681b      	ldr	r3, [r3, #0]
 810ea54:	f022 0201 	bic.w	r2, r2, #1
 810ea58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810ea5a:	687b      	ldr	r3, [r7, #4]
 810ea5c:	681b      	ldr	r3, [r3, #0]
 810ea5e:	689b      	ldr	r3, [r3, #8]
 810ea60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810ea64:	687b      	ldr	r3, [r7, #4]
 810ea66:	681b      	ldr	r3, [r3, #0]
 810ea68:	683a      	ldr	r2, [r7, #0]
 810ea6a:	430a      	orrs	r2, r1
 810ea6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ea6e:	6878      	ldr	r0, [r7, #4]
 810ea70:	f000 f850 	bl	810eb14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ea74:	687b      	ldr	r3, [r7, #4]
 810ea76:	681b      	ldr	r3, [r3, #0]
 810ea78:	68fa      	ldr	r2, [r7, #12]
 810ea7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ea7c:	687b      	ldr	r3, [r7, #4]
 810ea7e:	2220      	movs	r2, #32
 810ea80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ea84:	687b      	ldr	r3, [r7, #4]
 810ea86:	2200      	movs	r2, #0
 810ea88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ea8c:	2300      	movs	r3, #0
}
 810ea8e:	4618      	mov	r0, r3
 810ea90:	3710      	adds	r7, #16
 810ea92:	46bd      	mov	sp, r7
 810ea94:	bd80      	pop	{r7, pc}

0810ea96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ea96:	b580      	push	{r7, lr}
 810ea98:	b084      	sub	sp, #16
 810ea9a:	af00      	add	r7, sp, #0
 810ea9c:	6078      	str	r0, [r7, #4]
 810ea9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810eaa0:	687b      	ldr	r3, [r7, #4]
 810eaa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810eaa6:	2b01      	cmp	r3, #1
 810eaa8:	d101      	bne.n	810eaae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810eaaa:	2302      	movs	r3, #2
 810eaac:	e02d      	b.n	810eb0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810eaae:	687b      	ldr	r3, [r7, #4]
 810eab0:	2201      	movs	r2, #1
 810eab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810eab6:	687b      	ldr	r3, [r7, #4]
 810eab8:	2224      	movs	r2, #36	@ 0x24
 810eaba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810eabe:	687b      	ldr	r3, [r7, #4]
 810eac0:	681b      	ldr	r3, [r3, #0]
 810eac2:	681b      	ldr	r3, [r3, #0]
 810eac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810eac6:	687b      	ldr	r3, [r7, #4]
 810eac8:	681b      	ldr	r3, [r3, #0]
 810eaca:	681a      	ldr	r2, [r3, #0]
 810eacc:	687b      	ldr	r3, [r7, #4]
 810eace:	681b      	ldr	r3, [r3, #0]
 810ead0:	f022 0201 	bic.w	r2, r2, #1
 810ead4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ead6:	687b      	ldr	r3, [r7, #4]
 810ead8:	681b      	ldr	r3, [r3, #0]
 810eada:	689b      	ldr	r3, [r3, #8]
 810eadc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810eae0:	687b      	ldr	r3, [r7, #4]
 810eae2:	681b      	ldr	r3, [r3, #0]
 810eae4:	683a      	ldr	r2, [r7, #0]
 810eae6:	430a      	orrs	r2, r1
 810eae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810eaea:	6878      	ldr	r0, [r7, #4]
 810eaec:	f000 f812 	bl	810eb14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810eaf0:	687b      	ldr	r3, [r7, #4]
 810eaf2:	681b      	ldr	r3, [r3, #0]
 810eaf4:	68fa      	ldr	r2, [r7, #12]
 810eaf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810eaf8:	687b      	ldr	r3, [r7, #4]
 810eafa:	2220      	movs	r2, #32
 810eafc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810eb00:	687b      	ldr	r3, [r7, #4]
 810eb02:	2200      	movs	r2, #0
 810eb04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810eb08:	2300      	movs	r3, #0
}
 810eb0a:	4618      	mov	r0, r3
 810eb0c:	3710      	adds	r7, #16
 810eb0e:	46bd      	mov	sp, r7
 810eb10:	bd80      	pop	{r7, pc}
	...

0810eb14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810eb14:	b480      	push	{r7}
 810eb16:	b085      	sub	sp, #20
 810eb18:	af00      	add	r7, sp, #0
 810eb1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810eb1c:	687b      	ldr	r3, [r7, #4]
 810eb1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810eb20:	2b00      	cmp	r3, #0
 810eb22:	d108      	bne.n	810eb36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810eb24:	687b      	ldr	r3, [r7, #4]
 810eb26:	2201      	movs	r2, #1
 810eb28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810eb2c:	687b      	ldr	r3, [r7, #4]
 810eb2e:	2201      	movs	r2, #1
 810eb30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810eb34:	e031      	b.n	810eb9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810eb36:	2310      	movs	r3, #16
 810eb38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810eb3a:	2310      	movs	r3, #16
 810eb3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810eb3e:	687b      	ldr	r3, [r7, #4]
 810eb40:	681b      	ldr	r3, [r3, #0]
 810eb42:	689b      	ldr	r3, [r3, #8]
 810eb44:	0e5b      	lsrs	r3, r3, #25
 810eb46:	b2db      	uxtb	r3, r3
 810eb48:	f003 0307 	and.w	r3, r3, #7
 810eb4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810eb4e:	687b      	ldr	r3, [r7, #4]
 810eb50:	681b      	ldr	r3, [r3, #0]
 810eb52:	689b      	ldr	r3, [r3, #8]
 810eb54:	0f5b      	lsrs	r3, r3, #29
 810eb56:	b2db      	uxtb	r3, r3
 810eb58:	f003 0307 	and.w	r3, r3, #7
 810eb5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810eb5e:	7bbb      	ldrb	r3, [r7, #14]
 810eb60:	7b3a      	ldrb	r2, [r7, #12]
 810eb62:	4911      	ldr	r1, [pc, #68]	@ (810eba8 <UARTEx_SetNbDataToProcess+0x94>)
 810eb64:	5c8a      	ldrb	r2, [r1, r2]
 810eb66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810eb6a:	7b3a      	ldrb	r2, [r7, #12]
 810eb6c:	490f      	ldr	r1, [pc, #60]	@ (810ebac <UARTEx_SetNbDataToProcess+0x98>)
 810eb6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810eb70:	fb93 f3f2 	sdiv	r3, r3, r2
 810eb74:	b29a      	uxth	r2, r3
 810eb76:	687b      	ldr	r3, [r7, #4]
 810eb78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810eb7c:	7bfb      	ldrb	r3, [r7, #15]
 810eb7e:	7b7a      	ldrb	r2, [r7, #13]
 810eb80:	4909      	ldr	r1, [pc, #36]	@ (810eba8 <UARTEx_SetNbDataToProcess+0x94>)
 810eb82:	5c8a      	ldrb	r2, [r1, r2]
 810eb84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810eb88:	7b7a      	ldrb	r2, [r7, #13]
 810eb8a:	4908      	ldr	r1, [pc, #32]	@ (810ebac <UARTEx_SetNbDataToProcess+0x98>)
 810eb8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810eb8e:	fb93 f3f2 	sdiv	r3, r3, r2
 810eb92:	b29a      	uxth	r2, r3
 810eb94:	687b      	ldr	r3, [r7, #4]
 810eb96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810eb9a:	bf00      	nop
 810eb9c:	3714      	adds	r7, #20
 810eb9e:	46bd      	mov	sp, r7
 810eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eba4:	4770      	bx	lr
 810eba6:	bf00      	nop
 810eba8:	08113978 	.word	0x08113978
 810ebac:	08113980 	.word	0x08113980

0810ebb0 <arm_mat_trans_f32>:
 810ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ebb4:	8802      	ldrh	r2, [r0, #0]
 810ebb6:	884b      	ldrh	r3, [r1, #2]
 810ebb8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810ebbc:	684f      	ldr	r7, [r1, #4]
 810ebbe:	8840      	ldrh	r0, [r0, #2]
 810ebc0:	4293      	cmp	r3, r2
 810ebc2:	b083      	sub	sp, #12
 810ebc4:	d14c      	bne.n	810ec60 <arm_mat_trans_f32+0xb0>
 810ebc6:	f8b1 e000 	ldrh.w	lr, [r1]
 810ebca:	4586      	cmp	lr, r0
 810ebcc:	d148      	bne.n	810ec60 <arm_mat_trans_f32+0xb0>
 810ebce:	ea4f 089e 	mov.w	r8, lr, lsr #2
 810ebd2:	009c      	lsls	r4, r3, #2
 810ebd4:	f00e 0e03 	and.w	lr, lr, #3
 810ebd8:	fb08 f904 	mul.w	r9, r8, r4
 810ebdc:	ea4f 028e 	mov.w	r2, lr, lsl #2
 810ebe0:	011d      	lsls	r5, r3, #4
 810ebe2:	00db      	lsls	r3, r3, #3
 810ebe4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810ebe8:	eb07 0a04 	add.w	sl, r7, r4
 810ebec:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 810ebf0:	9201      	str	r2, [sp, #4]
 810ebf2:	9300      	str	r3, [sp, #0]
 810ebf4:	463b      	mov	r3, r7
 810ebf6:	f1b8 0f00 	cmp.w	r8, #0
 810ebfa:	d01d      	beq.n	810ec38 <arm_mat_trans_f32+0x88>
 810ebfc:	9900      	ldr	r1, [sp, #0]
 810ebfe:	f10c 0210 	add.w	r2, ip, #16
 810ec02:	4439      	add	r1, r7
 810ec04:	4640      	mov	r0, r8
 810ec06:	f852 6c10 	ldr.w	r6, [r2, #-16]
 810ec0a:	601e      	str	r6, [r3, #0]
 810ec0c:	ed52 7a03 	vldr	s15, [r2, #-12]
 810ec10:	191e      	adds	r6, r3, r4
 810ec12:	edc6 7a00 	vstr	s15, [r6]
 810ec16:	f852 6c08 	ldr.w	r6, [r2, #-8]
 810ec1a:	600e      	str	r6, [r1, #0]
 810ec1c:	ed52 7a01 	vldr	s15, [r2, #-4]
 810ec20:	190e      	adds	r6, r1, r4
 810ec22:	3801      	subs	r0, #1
 810ec24:	442b      	add	r3, r5
 810ec26:	f102 0210 	add.w	r2, r2, #16
 810ec2a:	edc6 7a00 	vstr	s15, [r6]
 810ec2e:	4429      	add	r1, r5
 810ec30:	d1e9      	bne.n	810ec06 <arm_mat_trans_f32+0x56>
 810ec32:	44dc      	add	ip, fp
 810ec34:	eb09 0307 	add.w	r3, r9, r7
 810ec38:	f1be 0f00 	cmp.w	lr, #0
 810ec3c:	d009      	beq.n	810ec52 <arm_mat_trans_f32+0xa2>
 810ec3e:	4672      	mov	r2, lr
 810ec40:	4661      	mov	r1, ip
 810ec42:	f851 0b04 	ldr.w	r0, [r1], #4
 810ec46:	6018      	str	r0, [r3, #0]
 810ec48:	3a01      	subs	r2, #1
 810ec4a:	4423      	add	r3, r4
 810ec4c:	d1f9      	bne.n	810ec42 <arm_mat_trans_f32+0x92>
 810ec4e:	9b01      	ldr	r3, [sp, #4]
 810ec50:	449c      	add	ip, r3
 810ec52:	3704      	adds	r7, #4
 810ec54:	4557      	cmp	r7, sl
 810ec56:	d1cd      	bne.n	810ebf4 <arm_mat_trans_f32+0x44>
 810ec58:	2000      	movs	r0, #0
 810ec5a:	b003      	add	sp, #12
 810ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ec60:	f06f 0002 	mvn.w	r0, #2
 810ec64:	e7f9      	b.n	810ec5a <arm_mat_trans_f32+0xaa>
 810ec66:	bf00      	nop

0810ec68 <arm_mat_sub_f32>:
 810ec68:	b4f0      	push	{r4, r5, r6, r7}
 810ec6a:	e9d1 4700 	ldrd	r4, r7, [r1]
 810ec6e:	6803      	ldr	r3, [r0, #0]
 810ec70:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810ec74:	6856      	ldr	r6, [r2, #4]
 810ec76:	42a3      	cmp	r3, r4
 810ec78:	d15d      	bne.n	810ed36 <arm_mat_sub_f32+0xce>
 810ec7a:	6812      	ldr	r2, [r2, #0]
 810ec7c:	4293      	cmp	r3, r2
 810ec7e:	d15a      	bne.n	810ed36 <arm_mat_sub_f32+0xce>
 810ec80:	8803      	ldrh	r3, [r0, #0]
 810ec82:	8844      	ldrh	r4, [r0, #2]
 810ec84:	fb04 f403 	mul.w	r4, r4, r3
 810ec88:	08a5      	lsrs	r5, r4, #2
 810ec8a:	d032      	beq.n	810ecf2 <arm_mat_sub_f32+0x8a>
 810ec8c:	f10c 0110 	add.w	r1, ip, #16
 810ec90:	f107 0210 	add.w	r2, r7, #16
 810ec94:	f106 0310 	add.w	r3, r6, #16
 810ec98:	4628      	mov	r0, r5
 810ec9a:	ed12 7a04 	vldr	s14, [r2, #-16]
 810ec9e:	ed51 7a04 	vldr	s15, [r1, #-16]
 810eca2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810eca6:	3801      	subs	r0, #1
 810eca8:	ed43 7a04 	vstr	s15, [r3, #-16]
 810ecac:	ed12 7a03 	vldr	s14, [r2, #-12]
 810ecb0:	ed51 7a03 	vldr	s15, [r1, #-12]
 810ecb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ecb8:	f101 0110 	add.w	r1, r1, #16
 810ecbc:	ed43 7a03 	vstr	s15, [r3, #-12]
 810ecc0:	ed12 7a02 	vldr	s14, [r2, #-8]
 810ecc4:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810ecc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810eccc:	f102 0210 	add.w	r2, r2, #16
 810ecd0:	ed43 7a02 	vstr	s15, [r3, #-8]
 810ecd4:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810ecd8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810ecdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ece0:	f103 0310 	add.w	r3, r3, #16
 810ece4:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810ece8:	d1d7      	bne.n	810ec9a <arm_mat_sub_f32+0x32>
 810ecea:	012b      	lsls	r3, r5, #4
 810ecec:	449c      	add	ip, r3
 810ecee:	441f      	add	r7, r3
 810ecf0:	441e      	add	r6, r3
 810ecf2:	f014 0403 	ands.w	r4, r4, #3
 810ecf6:	d01b      	beq.n	810ed30 <arm_mat_sub_f32+0xc8>
 810ecf8:	eddc 7a00 	vldr	s15, [ip]
 810ecfc:	ed97 7a00 	vldr	s14, [r7]
 810ed00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ed04:	3c01      	subs	r4, #1
 810ed06:	edc6 7a00 	vstr	s15, [r6]
 810ed0a:	d011      	beq.n	810ed30 <arm_mat_sub_f32+0xc8>
 810ed0c:	eddc 7a01 	vldr	s15, [ip, #4]
 810ed10:	ed97 7a01 	vldr	s14, [r7, #4]
 810ed14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ed18:	2c01      	cmp	r4, #1
 810ed1a:	edc6 7a01 	vstr	s15, [r6, #4]
 810ed1e:	d007      	beq.n	810ed30 <arm_mat_sub_f32+0xc8>
 810ed20:	eddc 7a02 	vldr	s15, [ip, #8]
 810ed24:	ed97 7a02 	vldr	s14, [r7, #8]
 810ed28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ed2c:	edc6 7a02 	vstr	s15, [r6, #8]
 810ed30:	2000      	movs	r0, #0
 810ed32:	bcf0      	pop	{r4, r5, r6, r7}
 810ed34:	4770      	bx	lr
 810ed36:	f06f 0002 	mvn.w	r0, #2
 810ed3a:	e7fa      	b.n	810ed32 <arm_mat_sub_f32+0xca>

0810ed3c <arm_mat_mult_f32>:
 810ed3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ed40:	8845      	ldrh	r5, [r0, #2]
 810ed42:	880b      	ldrh	r3, [r1, #0]
 810ed44:	8806      	ldrh	r6, [r0, #0]
 810ed46:	6847      	ldr	r7, [r0, #4]
 810ed48:	6854      	ldr	r4, [r2, #4]
 810ed4a:	6848      	ldr	r0, [r1, #4]
 810ed4c:	b08b      	sub	sp, #44	@ 0x2c
 810ed4e:	42ab      	cmp	r3, r5
 810ed50:	9109      	str	r1, [sp, #36]	@ 0x24
 810ed52:	9604      	str	r6, [sp, #16]
 810ed54:	8849      	ldrh	r1, [r1, #2]
 810ed56:	f040 808a 	bne.w	810ee6e <arm_mat_mult_f32+0x132>
 810ed5a:	8815      	ldrh	r5, [r2, #0]
 810ed5c:	42b5      	cmp	r5, r6
 810ed5e:	f040 8086 	bne.w	810ee6e <arm_mat_mult_f32+0x132>
 810ed62:	8852      	ldrh	r2, [r2, #2]
 810ed64:	428a      	cmp	r2, r1
 810ed66:	f040 8082 	bne.w	810ee6e <arm_mat_mult_f32+0x132>
 810ed6a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 810ed6e:	1d01      	adds	r1, r0, #4
 810ed70:	0116      	lsls	r6, r2, #4
 810ed72:	9108      	str	r1, [sp, #32]
 810ed74:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 810ed78:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 810ed7c:	9101      	str	r1, [sp, #4]
 810ed7e:	fb06 f108 	mul.w	r1, r6, r8
 810ed82:	0095      	lsls	r5, r2, #2
 810ed84:	9103      	str	r1, [sp, #12]
 810ed86:	00d2      	lsls	r2, r2, #3
 810ed88:	ea4f 018c 	mov.w	r1, ip, lsl #2
 810ed8c:	f003 0903 	and.w	r9, r3, #3
 810ed90:	009b      	lsls	r3, r3, #2
 810ed92:	f107 0b10 	add.w	fp, r7, #16
 810ed96:	eb04 0a05 	add.w	sl, r4, r5
 810ed9a:	9107      	str	r1, [sp, #28]
 810ed9c:	9202      	str	r2, [sp, #8]
 810ed9e:	9306      	str	r3, [sp, #24]
 810eda0:	f1ab 0310 	sub.w	r3, fp, #16
 810eda4:	9305      	str	r3, [sp, #20]
 810eda6:	9b07      	ldr	r3, [sp, #28]
 810eda8:	f8dd e020 	ldr.w	lr, [sp, #32]
 810edac:	eb03 0c0a 	add.w	ip, r3, sl
 810edb0:	eddf 7a31 	vldr	s15, [pc, #196]	@ 810ee78 <arm_mat_mult_f32+0x13c>
 810edb4:	f1b8 0f00 	cmp.w	r8, #0
 810edb8:	d053      	beq.n	810ee62 <arm_mat_mult_f32+0x126>
 810edba:	9b02      	ldr	r3, [sp, #8]
 810edbc:	4644      	mov	r4, r8
 810edbe:	18c1      	adds	r1, r0, r3
 810edc0:	4602      	mov	r2, r0
 810edc2:	465b      	mov	r3, fp
 810edc4:	ed92 6a00 	vldr	s12, [r2]
 810edc8:	ed13 7a04 	vldr	s14, [r3, #-16]
 810edcc:	ed53 4a03 	vldr	s9, [r3, #-12]
 810edd0:	ed53 6a02 	vldr	s13, [r3, #-8]
 810edd4:	ed91 5a00 	vldr	s10, [r1]
 810edd8:	ed53 5a01 	vldr	s11, [r3, #-4]
 810eddc:	1957      	adds	r7, r2, r5
 810edde:	ee27 7a06 	vmul.f32	s14, s14, s12
 810ede2:	ed97 6a00 	vldr	s12, [r7]
 810ede6:	ee77 7a27 	vadd.f32	s15, s14, s15
 810edea:	ee26 6a24 	vmul.f32	s12, s12, s9
 810edee:	194f      	adds	r7, r1, r5
 810edf0:	ee36 6a27 	vadd.f32	s12, s12, s15
 810edf4:	ee26 7a85 	vmul.f32	s14, s13, s10
 810edf8:	edd7 7a00 	vldr	s15, [r7]
 810edfc:	ee37 7a06 	vadd.f32	s14, s14, s12
 810ee00:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810ee04:	3c01      	subs	r4, #1
 810ee06:	4432      	add	r2, r6
 810ee08:	4431      	add	r1, r6
 810ee0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ee0e:	f103 0310 	add.w	r3, r3, #16
 810ee12:	d1d7      	bne.n	810edc4 <arm_mat_mult_f32+0x88>
 810ee14:	9b03      	ldr	r3, [sp, #12]
 810ee16:	9a01      	ldr	r2, [sp, #4]
 810ee18:	4418      	add	r0, r3
 810ee1a:	f1b9 0f00 	cmp.w	r9, #0
 810ee1e:	d00b      	beq.n	810ee38 <arm_mat_mult_f32+0xfc>
 810ee20:	464b      	mov	r3, r9
 810ee22:	edd0 6a00 	vldr	s13, [r0]
 810ee26:	ecb2 7a01 	vldmia	r2!, {s14}
 810ee2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 810ee2e:	3b01      	subs	r3, #1
 810ee30:	4428      	add	r0, r5
 810ee32:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ee36:	d1f4      	bne.n	810ee22 <arm_mat_mult_f32+0xe6>
 810ee38:	ecec 7a01 	vstmia	ip!, {s15}
 810ee3c:	45d4      	cmp	ip, sl
 810ee3e:	4670      	mov	r0, lr
 810ee40:	f10e 0e04 	add.w	lr, lr, #4
 810ee44:	d1b4      	bne.n	810edb0 <arm_mat_mult_f32+0x74>
 810ee46:	9a01      	ldr	r2, [sp, #4]
 810ee48:	9b06      	ldr	r3, [sp, #24]
 810ee4a:	4611      	mov	r1, r2
 810ee4c:	4419      	add	r1, r3
 810ee4e:	449b      	add	fp, r3
 810ee50:	9b04      	ldr	r3, [sp, #16]
 810ee52:	9101      	str	r1, [sp, #4]
 810ee54:	3b01      	subs	r3, #1
 810ee56:	44aa      	add	sl, r5
 810ee58:	9304      	str	r3, [sp, #16]
 810ee5a:	d004      	beq.n	810ee66 <arm_mat_mult_f32+0x12a>
 810ee5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ee5e:	6858      	ldr	r0, [r3, #4]
 810ee60:	e79e      	b.n	810eda0 <arm_mat_mult_f32+0x64>
 810ee62:	9a05      	ldr	r2, [sp, #20]
 810ee64:	e7d9      	b.n	810ee1a <arm_mat_mult_f32+0xde>
 810ee66:	4618      	mov	r0, r3
 810ee68:	b00b      	add	sp, #44	@ 0x2c
 810ee6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ee6e:	f06f 0002 	mvn.w	r0, #2
 810ee72:	b00b      	add	sp, #44	@ 0x2c
 810ee74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ee78:	00000000 	.word	0x00000000

0810ee7c <arm_mat_inverse_f32>:
 810ee7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ee80:	8843      	ldrh	r3, [r0, #2]
 810ee82:	8804      	ldrh	r4, [r0, #0]
 810ee84:	684e      	ldr	r6, [r1, #4]
 810ee86:	f8d0 9004 	ldr.w	r9, [r0, #4]
 810ee8a:	b087      	sub	sp, #28
 810ee8c:	429c      	cmp	r4, r3
 810ee8e:	9301      	str	r3, [sp, #4]
 810ee90:	9603      	str	r6, [sp, #12]
 810ee92:	f040 80ea 	bne.w	810f06a <arm_mat_inverse_f32+0x1ee>
 810ee96:	880a      	ldrh	r2, [r1, #0]
 810ee98:	884b      	ldrh	r3, [r1, #2]
 810ee9a:	4293      	cmp	r3, r2
 810ee9c:	f040 80e5 	bne.w	810f06a <arm_mat_inverse_f32+0x1ee>
 810eea0:	429c      	cmp	r4, r3
 810eea2:	f040 80e2 	bne.w	810f06a <arm_mat_inverse_f32+0x1ee>
 810eea6:	9005      	str	r0, [sp, #20]
 810eea8:	b30c      	cbz	r4, 810eeee <arm_mat_inverse_f32+0x72>
 810eeaa:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 810eeae:	1e67      	subs	r7, r4, #1
 810eeb0:	f846 bb04 	str.w	fp, [r6], #4
 810eeb4:	d01b      	beq.n	810eeee <arm_mat_inverse_f32+0x72>
 810eeb6:	f04f 0801 	mov.w	r8, #1
 810eeba:	00ba      	lsls	r2, r7, #2
 810eebc:	eb06 0a02 	add.w	sl, r6, r2
 810eec0:	ea4f 0588 	mov.w	r5, r8, lsl #2
 810eec4:	4630      	mov	r0, r6
 810eec6:	2100      	movs	r1, #0
 810eec8:	f001 f9c2 	bl	8110250 <memset>
 810eecc:	eb0a 0605 	add.w	r6, sl, r5
 810eed0:	462a      	mov	r2, r5
 810eed2:	2100      	movs	r1, #0
 810eed4:	4650      	mov	r0, sl
 810eed6:	f1b8 0f00 	cmp.w	r8, #0
 810eeda:	f000 80cb 	beq.w	810f074 <arm_mat_inverse_f32+0x1f8>
 810eede:	f001 f9b7 	bl	8110250 <memset>
 810eee2:	3f01      	subs	r7, #1
 810eee4:	f108 0801 	add.w	r8, r8, #1
 810eee8:	f846 bb04 	str.w	fp, [r6], #4
 810eeec:	d1e5      	bne.n	810eeba <arm_mat_inverse_f32+0x3e>
 810eeee:	9b01      	ldr	r3, [sp, #4]
 810eef0:	2b00      	cmp	r3, #0
 810eef2:	f000 80b5 	beq.w	810f060 <arm_mat_inverse_f32+0x1e4>
 810eef6:	009d      	lsls	r5, r3, #2
 810eef8:	eb09 0205 	add.w	r2, r9, r5
 810eefc:	46cc      	mov	ip, r9
 810eefe:	9202      	str	r2, [sp, #8]
 810ef00:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810ef04:	1d2a      	adds	r2, r5, #4
 810ef06:	9204      	str	r2, [sp, #16]
 810ef08:	462f      	mov	r7, r5
 810ef0a:	469e      	mov	lr, r3
 810ef0c:	2600      	movs	r6, #0
 810ef0e:	9b02      	ldr	r3, [sp, #8]
 810ef10:	eddc 6a00 	vldr	s13, [ip]
 810ef14:	42b4      	cmp	r4, r6
 810ef16:	eba3 0b07 	sub.w	fp, r3, r7
 810ef1a:	f000 80a1 	beq.w	810f060 <arm_mat_inverse_f32+0x1e4>
 810ef1e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810f084 <arm_mat_inverse_f32+0x208>
 810ef22:	4632      	mov	r2, r6
 810ef24:	4663      	mov	r3, ip
 810ef26:	e00b      	b.n	810ef40 <arm_mat_inverse_f32+0xc4>
 810ef28:	eef4 7a47 	vcmp.f32	s15, s14
 810ef2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef30:	f102 0201 	add.w	r2, r2, #1
 810ef34:	bfc8      	it	gt
 810ef36:	eeb0 7a67 	vmovgt.f32	s14, s15
 810ef3a:	42a2      	cmp	r2, r4
 810ef3c:	442b      	add	r3, r5
 810ef3e:	d014      	beq.n	810ef6a <arm_mat_inverse_f32+0xee>
 810ef40:	edd3 7a00 	vldr	s15, [r3]
 810ef44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810ef48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef4c:	eeb1 6a67 	vneg.f32	s12, s15
 810ef50:	dcea      	bgt.n	810ef28 <arm_mat_inverse_f32+0xac>
 810ef52:	eeb4 6a47 	vcmp.f32	s12, s14
 810ef56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef5a:	f102 0201 	add.w	r2, r2, #1
 810ef5e:	bfc8      	it	gt
 810ef60:	eeb0 7a46 	vmovgt.f32	s14, s12
 810ef64:	42a2      	cmp	r2, r4
 810ef66:	442b      	add	r3, r5
 810ef68:	d1ea      	bne.n	810ef40 <arm_mat_inverse_f32+0xc4>
 810ef6a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810ef6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef72:	d075      	beq.n	810f060 <arm_mat_inverse_f32+0x1e4>
 810ef74:	eef5 6a40 	vcmp.f32	s13, #0.0
 810ef78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef7c:	d070      	beq.n	810f060 <arm_mat_inverse_f32+0x1e4>
 810ef7e:	4672      	mov	r2, lr
 810ef80:	4663      	mov	r3, ip
 810ef82:	ed93 7a00 	vldr	s14, [r3]
 810ef86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810ef8a:	3a01      	subs	r2, #1
 810ef8c:	ece3 7a01 	vstmia	r3!, {s15}
 810ef90:	d1f7      	bne.n	810ef82 <arm_mat_inverse_f32+0x106>
 810ef92:	9901      	ldr	r1, [sp, #4]
 810ef94:	464b      	mov	r3, r9
 810ef96:	ed93 7a00 	vldr	s14, [r3]
 810ef9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810ef9e:	3901      	subs	r1, #1
 810efa0:	ece3 7a01 	vstmia	r3!, {s15}
 810efa4:	d1f7      	bne.n	810ef96 <arm_mat_inverse_f32+0x11a>
 810efa6:	9803      	ldr	r0, [sp, #12]
 810efa8:	ea4f 0886 	mov.w	r8, r6, lsl #2
 810efac:	42b1      	cmp	r1, r6
 810efae:	d039      	beq.n	810f024 <arm_mat_inverse_f32+0x1a8>
 810efb0:	eddb 6a00 	vldr	s13, [fp]
 810efb4:	465a      	mov	r2, fp
 810efb6:	4673      	mov	r3, lr
 810efb8:	46e2      	mov	sl, ip
 810efba:	ecba 7a01 	vldmia	sl!, {s14}
 810efbe:	edd2 7a00 	vldr	s15, [r2]
 810efc2:	ee26 7a87 	vmul.f32	s14, s13, s14
 810efc6:	3b01      	subs	r3, #1
 810efc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810efcc:	ece2 7a01 	vstmia	r2!, {s15}
 810efd0:	d1f3      	bne.n	810efba <arm_mat_inverse_f32+0x13e>
 810efd2:	9b01      	ldr	r3, [sp, #4]
 810efd4:	44bb      	add	fp, r7
 810efd6:	4602      	mov	r2, r0
 810efd8:	46ca      	mov	sl, r9
 810efda:	ecba 7a01 	vldmia	sl!, {s14}
 810efde:	edd2 7a00 	vldr	s15, [r2]
 810efe2:	ee26 7a87 	vmul.f32	s14, s13, s14
 810efe6:	3b01      	subs	r3, #1
 810efe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810efec:	ece2 7a01 	vstmia	r2!, {s15}
 810eff0:	d1f3      	bne.n	810efda <arm_mat_inverse_f32+0x15e>
 810eff2:	4428      	add	r0, r5
 810eff4:	3101      	adds	r1, #1
 810eff6:	428c      	cmp	r4, r1
 810eff8:	44c3      	add	fp, r8
 810effa:	d1d7      	bne.n	810efac <arm_mat_inverse_f32+0x130>
 810effc:	9b04      	ldr	r3, [sp, #16]
 810effe:	f1be 0e01 	subs.w	lr, lr, #1
 810f002:	f106 0601 	add.w	r6, r6, #1
 810f006:	449c      	add	ip, r3
 810f008:	f1a7 0704 	sub.w	r7, r7, #4
 810f00c:	44a9      	add	r9, r5
 810f00e:	f47f af7e 	bne.w	810ef0e <arm_mat_inverse_f32+0x92>
 810f012:	eef5 6a40 	vcmp.f32	s13, #0.0
 810f016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f01a:	d006      	beq.n	810f02a <arm_mat_inverse_f32+0x1ae>
 810f01c:	2000      	movs	r0, #0
 810f01e:	b007      	add	sp, #28
 810f020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f024:	44bb      	add	fp, r7
 810f026:	4428      	add	r0, r5
 810f028:	e7e4      	b.n	810eff4 <arm_mat_inverse_f32+0x178>
 810f02a:	9b05      	ldr	r3, [sp, #20]
 810f02c:	9a01      	ldr	r2, [sp, #4]
 810f02e:	685b      	ldr	r3, [r3, #4]
 810f030:	edd3 7a00 	vldr	s15, [r3]
 810f034:	eef5 7a40 	vcmp.f32	s15, #0.0
 810f038:	fb02 f204 	mul.w	r2, r2, r4
 810f03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f040:	4614      	mov	r4, r2
 810f042:	bf08      	it	eq
 810f044:	3304      	addeq	r3, #4
 810f046:	d007      	beq.n	810f058 <arm_mat_inverse_f32+0x1dc>
 810f048:	e7e8      	b.n	810f01c <arm_mat_inverse_f32+0x1a0>
 810f04a:	ecf3 7a01 	vldmia	r3!, {s15}
 810f04e:	eef5 7a40 	vcmp.f32	s15, #0.0
 810f052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f056:	d1e1      	bne.n	810f01c <arm_mat_inverse_f32+0x1a0>
 810f058:	f10e 0e01 	add.w	lr, lr, #1
 810f05c:	4574      	cmp	r4, lr
 810f05e:	d1f4      	bne.n	810f04a <arm_mat_inverse_f32+0x1ce>
 810f060:	f06f 0004 	mvn.w	r0, #4
 810f064:	b007      	add	sp, #28
 810f066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f06a:	f06f 0002 	mvn.w	r0, #2
 810f06e:	b007      	add	sp, #28
 810f070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f074:	4656      	mov	r6, sl
 810f076:	3f01      	subs	r7, #1
 810f078:	f846 bb04 	str.w	fp, [r6], #4
 810f07c:	f47f af1b 	bne.w	810eeb6 <arm_mat_inverse_f32+0x3a>
 810f080:	e735      	b.n	810eeee <arm_mat_inverse_f32+0x72>
 810f082:	bf00      	nop
 810f084:	00000000 	.word	0x00000000

0810f088 <arm_mat_init_f32>:
 810f088:	8001      	strh	r1, [r0, #0]
 810f08a:	8042      	strh	r2, [r0, #2]
 810f08c:	6043      	str	r3, [r0, #4]
 810f08e:	4770      	bx	lr

0810f090 <arm_mat_add_f32>:
 810f090:	b4f0      	push	{r4, r5, r6, r7}
 810f092:	e9d1 4700 	ldrd	r4, r7, [r1]
 810f096:	6803      	ldr	r3, [r0, #0]
 810f098:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810f09c:	6856      	ldr	r6, [r2, #4]
 810f09e:	42a3      	cmp	r3, r4
 810f0a0:	d15d      	bne.n	810f15e <arm_mat_add_f32+0xce>
 810f0a2:	6812      	ldr	r2, [r2, #0]
 810f0a4:	4293      	cmp	r3, r2
 810f0a6:	d15a      	bne.n	810f15e <arm_mat_add_f32+0xce>
 810f0a8:	8803      	ldrh	r3, [r0, #0]
 810f0aa:	8844      	ldrh	r4, [r0, #2]
 810f0ac:	fb04 f403 	mul.w	r4, r4, r3
 810f0b0:	08a5      	lsrs	r5, r4, #2
 810f0b2:	d032      	beq.n	810f11a <arm_mat_add_f32+0x8a>
 810f0b4:	f10c 0110 	add.w	r1, ip, #16
 810f0b8:	f107 0210 	add.w	r2, r7, #16
 810f0bc:	f106 0310 	add.w	r3, r6, #16
 810f0c0:	4628      	mov	r0, r5
 810f0c2:	ed12 7a04 	vldr	s14, [r2, #-16]
 810f0c6:	ed51 7a04 	vldr	s15, [r1, #-16]
 810f0ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f0ce:	3801      	subs	r0, #1
 810f0d0:	ed43 7a04 	vstr	s15, [r3, #-16]
 810f0d4:	ed12 7a03 	vldr	s14, [r2, #-12]
 810f0d8:	ed51 7a03 	vldr	s15, [r1, #-12]
 810f0dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f0e0:	f101 0110 	add.w	r1, r1, #16
 810f0e4:	ed43 7a03 	vstr	s15, [r3, #-12]
 810f0e8:	ed12 7a02 	vldr	s14, [r2, #-8]
 810f0ec:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810f0f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f0f4:	f102 0210 	add.w	r2, r2, #16
 810f0f8:	ed43 7a02 	vstr	s15, [r3, #-8]
 810f0fc:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810f100:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810f104:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f108:	f103 0310 	add.w	r3, r3, #16
 810f10c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810f110:	d1d7      	bne.n	810f0c2 <arm_mat_add_f32+0x32>
 810f112:	012b      	lsls	r3, r5, #4
 810f114:	449c      	add	ip, r3
 810f116:	441f      	add	r7, r3
 810f118:	441e      	add	r6, r3
 810f11a:	f014 0403 	ands.w	r4, r4, #3
 810f11e:	d01b      	beq.n	810f158 <arm_mat_add_f32+0xc8>
 810f120:	edd7 7a00 	vldr	s15, [r7]
 810f124:	ed9c 7a00 	vldr	s14, [ip]
 810f128:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f12c:	3c01      	subs	r4, #1
 810f12e:	edc6 7a00 	vstr	s15, [r6]
 810f132:	d011      	beq.n	810f158 <arm_mat_add_f32+0xc8>
 810f134:	eddc 7a01 	vldr	s15, [ip, #4]
 810f138:	ed97 7a01 	vldr	s14, [r7, #4]
 810f13c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f140:	2c01      	cmp	r4, #1
 810f142:	edc6 7a01 	vstr	s15, [r6, #4]
 810f146:	d007      	beq.n	810f158 <arm_mat_add_f32+0xc8>
 810f148:	eddc 7a02 	vldr	s15, [ip, #8]
 810f14c:	ed97 7a02 	vldr	s14, [r7, #8]
 810f150:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f154:	edc6 7a02 	vstr	s15, [r6, #8]
 810f158:	2000      	movs	r0, #0
 810f15a:	bcf0      	pop	{r4, r5, r6, r7}
 810f15c:	4770      	bx	lr
 810f15e:	f06f 0002 	mvn.w	r0, #2
 810f162:	e7fa      	b.n	810f15a <arm_mat_add_f32+0xca>

0810f164 <arm_fir_init_f32>:
 810f164:	b538      	push	{r3, r4, r5, lr}
 810f166:	9c04      	ldr	r4, [sp, #16]
 810f168:	6082      	str	r2, [r0, #8]
 810f16a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 810f16e:	3c01      	subs	r4, #1
 810f170:	440c      	add	r4, r1
 810f172:	8001      	strh	r1, [r0, #0]
 810f174:	4605      	mov	r5, r0
 810f176:	00a2      	lsls	r2, r4, #2
 810f178:	4618      	mov	r0, r3
 810f17a:	2100      	movs	r1, #0
 810f17c:	f001 f868 	bl	8110250 <memset>
 810f180:	6068      	str	r0, [r5, #4]
 810f182:	bd38      	pop	{r3, r4, r5, pc}

0810f184 <srand>:
 810f184:	b538      	push	{r3, r4, r5, lr}
 810f186:	4b10      	ldr	r3, [pc, #64]	@ (810f1c8 <srand+0x44>)
 810f188:	681d      	ldr	r5, [r3, #0]
 810f18a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810f18c:	4604      	mov	r4, r0
 810f18e:	b9b3      	cbnz	r3, 810f1be <srand+0x3a>
 810f190:	2018      	movs	r0, #24
 810f192:	f001 ffa7 	bl	81110e4 <malloc>
 810f196:	4602      	mov	r2, r0
 810f198:	6328      	str	r0, [r5, #48]	@ 0x30
 810f19a:	b920      	cbnz	r0, 810f1a6 <srand+0x22>
 810f19c:	4b0b      	ldr	r3, [pc, #44]	@ (810f1cc <srand+0x48>)
 810f19e:	480c      	ldr	r0, [pc, #48]	@ (810f1d0 <srand+0x4c>)
 810f1a0:	2146      	movs	r1, #70	@ 0x46
 810f1a2:	f001 f8e9 	bl	8110378 <__assert_func>
 810f1a6:	490b      	ldr	r1, [pc, #44]	@ (810f1d4 <srand+0x50>)
 810f1a8:	4b0b      	ldr	r3, [pc, #44]	@ (810f1d8 <srand+0x54>)
 810f1aa:	e9c0 1300 	strd	r1, r3, [r0]
 810f1ae:	4b0b      	ldr	r3, [pc, #44]	@ (810f1dc <srand+0x58>)
 810f1b0:	6083      	str	r3, [r0, #8]
 810f1b2:	230b      	movs	r3, #11
 810f1b4:	8183      	strh	r3, [r0, #12]
 810f1b6:	2100      	movs	r1, #0
 810f1b8:	2001      	movs	r0, #1
 810f1ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 810f1be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810f1c0:	2200      	movs	r2, #0
 810f1c2:	611c      	str	r4, [r3, #16]
 810f1c4:	615a      	str	r2, [r3, #20]
 810f1c6:	bd38      	pop	{r3, r4, r5, pc}
 810f1c8:	100000ac 	.word	0x100000ac
 810f1cc:	08113988 	.word	0x08113988
 810f1d0:	0811399f 	.word	0x0811399f
 810f1d4:	abcd330e 	.word	0xabcd330e
 810f1d8:	e66d1234 	.word	0xe66d1234
 810f1dc:	0005deec 	.word	0x0005deec

0810f1e0 <__cvt>:
 810f1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f1e4:	ec57 6b10 	vmov	r6, r7, d0
 810f1e8:	2f00      	cmp	r7, #0
 810f1ea:	460c      	mov	r4, r1
 810f1ec:	4619      	mov	r1, r3
 810f1ee:	463b      	mov	r3, r7
 810f1f0:	bfbb      	ittet	lt
 810f1f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810f1f6:	461f      	movlt	r7, r3
 810f1f8:	2300      	movge	r3, #0
 810f1fa:	232d      	movlt	r3, #45	@ 0x2d
 810f1fc:	700b      	strb	r3, [r1, #0]
 810f1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810f200:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810f204:	4691      	mov	r9, r2
 810f206:	f023 0820 	bic.w	r8, r3, #32
 810f20a:	bfbc      	itt	lt
 810f20c:	4632      	movlt	r2, r6
 810f20e:	4616      	movlt	r6, r2
 810f210:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810f214:	d005      	beq.n	810f222 <__cvt+0x42>
 810f216:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810f21a:	d100      	bne.n	810f21e <__cvt+0x3e>
 810f21c:	3401      	adds	r4, #1
 810f21e:	2102      	movs	r1, #2
 810f220:	e000      	b.n	810f224 <__cvt+0x44>
 810f222:	2103      	movs	r1, #3
 810f224:	ab03      	add	r3, sp, #12
 810f226:	9301      	str	r3, [sp, #4]
 810f228:	ab02      	add	r3, sp, #8
 810f22a:	9300      	str	r3, [sp, #0]
 810f22c:	ec47 6b10 	vmov	d0, r6, r7
 810f230:	4653      	mov	r3, sl
 810f232:	4622      	mov	r2, r4
 810f234:	f001 f948 	bl	81104c8 <_dtoa_r>
 810f238:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810f23c:	4605      	mov	r5, r0
 810f23e:	d119      	bne.n	810f274 <__cvt+0x94>
 810f240:	f019 0f01 	tst.w	r9, #1
 810f244:	d00e      	beq.n	810f264 <__cvt+0x84>
 810f246:	eb00 0904 	add.w	r9, r0, r4
 810f24a:	2200      	movs	r2, #0
 810f24c:	2300      	movs	r3, #0
 810f24e:	4630      	mov	r0, r6
 810f250:	4639      	mov	r1, r7
 810f252:	f7f1 fcc1 	bl	8100bd8 <__aeabi_dcmpeq>
 810f256:	b108      	cbz	r0, 810f25c <__cvt+0x7c>
 810f258:	f8cd 900c 	str.w	r9, [sp, #12]
 810f25c:	2230      	movs	r2, #48	@ 0x30
 810f25e:	9b03      	ldr	r3, [sp, #12]
 810f260:	454b      	cmp	r3, r9
 810f262:	d31e      	bcc.n	810f2a2 <__cvt+0xc2>
 810f264:	9b03      	ldr	r3, [sp, #12]
 810f266:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f268:	1b5b      	subs	r3, r3, r5
 810f26a:	4628      	mov	r0, r5
 810f26c:	6013      	str	r3, [r2, #0]
 810f26e:	b004      	add	sp, #16
 810f270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f274:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810f278:	eb00 0904 	add.w	r9, r0, r4
 810f27c:	d1e5      	bne.n	810f24a <__cvt+0x6a>
 810f27e:	7803      	ldrb	r3, [r0, #0]
 810f280:	2b30      	cmp	r3, #48	@ 0x30
 810f282:	d10a      	bne.n	810f29a <__cvt+0xba>
 810f284:	2200      	movs	r2, #0
 810f286:	2300      	movs	r3, #0
 810f288:	4630      	mov	r0, r6
 810f28a:	4639      	mov	r1, r7
 810f28c:	f7f1 fca4 	bl	8100bd8 <__aeabi_dcmpeq>
 810f290:	b918      	cbnz	r0, 810f29a <__cvt+0xba>
 810f292:	f1c4 0401 	rsb	r4, r4, #1
 810f296:	f8ca 4000 	str.w	r4, [sl]
 810f29a:	f8da 3000 	ldr.w	r3, [sl]
 810f29e:	4499      	add	r9, r3
 810f2a0:	e7d3      	b.n	810f24a <__cvt+0x6a>
 810f2a2:	1c59      	adds	r1, r3, #1
 810f2a4:	9103      	str	r1, [sp, #12]
 810f2a6:	701a      	strb	r2, [r3, #0]
 810f2a8:	e7d9      	b.n	810f25e <__cvt+0x7e>

0810f2aa <__exponent>:
 810f2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810f2ac:	2900      	cmp	r1, #0
 810f2ae:	bfba      	itte	lt
 810f2b0:	4249      	neglt	r1, r1
 810f2b2:	232d      	movlt	r3, #45	@ 0x2d
 810f2b4:	232b      	movge	r3, #43	@ 0x2b
 810f2b6:	2909      	cmp	r1, #9
 810f2b8:	7002      	strb	r2, [r0, #0]
 810f2ba:	7043      	strb	r3, [r0, #1]
 810f2bc:	dd29      	ble.n	810f312 <__exponent+0x68>
 810f2be:	f10d 0307 	add.w	r3, sp, #7
 810f2c2:	461d      	mov	r5, r3
 810f2c4:	270a      	movs	r7, #10
 810f2c6:	461a      	mov	r2, r3
 810f2c8:	fbb1 f6f7 	udiv	r6, r1, r7
 810f2cc:	fb07 1416 	mls	r4, r7, r6, r1
 810f2d0:	3430      	adds	r4, #48	@ 0x30
 810f2d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 810f2d6:	460c      	mov	r4, r1
 810f2d8:	2c63      	cmp	r4, #99	@ 0x63
 810f2da:	f103 33ff 	add.w	r3, r3, #4294967295
 810f2de:	4631      	mov	r1, r6
 810f2e0:	dcf1      	bgt.n	810f2c6 <__exponent+0x1c>
 810f2e2:	3130      	adds	r1, #48	@ 0x30
 810f2e4:	1e94      	subs	r4, r2, #2
 810f2e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 810f2ea:	1c41      	adds	r1, r0, #1
 810f2ec:	4623      	mov	r3, r4
 810f2ee:	42ab      	cmp	r3, r5
 810f2f0:	d30a      	bcc.n	810f308 <__exponent+0x5e>
 810f2f2:	f10d 0309 	add.w	r3, sp, #9
 810f2f6:	1a9b      	subs	r3, r3, r2
 810f2f8:	42ac      	cmp	r4, r5
 810f2fa:	bf88      	it	hi
 810f2fc:	2300      	movhi	r3, #0
 810f2fe:	3302      	adds	r3, #2
 810f300:	4403      	add	r3, r0
 810f302:	1a18      	subs	r0, r3, r0
 810f304:	b003      	add	sp, #12
 810f306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810f308:	f813 6b01 	ldrb.w	r6, [r3], #1
 810f30c:	f801 6f01 	strb.w	r6, [r1, #1]!
 810f310:	e7ed      	b.n	810f2ee <__exponent+0x44>
 810f312:	2330      	movs	r3, #48	@ 0x30
 810f314:	3130      	adds	r1, #48	@ 0x30
 810f316:	7083      	strb	r3, [r0, #2]
 810f318:	70c1      	strb	r1, [r0, #3]
 810f31a:	1d03      	adds	r3, r0, #4
 810f31c:	e7f1      	b.n	810f302 <__exponent+0x58>
	...

0810f320 <_printf_float>:
 810f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f324:	b08d      	sub	sp, #52	@ 0x34
 810f326:	460c      	mov	r4, r1
 810f328:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810f32c:	4616      	mov	r6, r2
 810f32e:	461f      	mov	r7, r3
 810f330:	4605      	mov	r5, r0
 810f332:	f000 ff95 	bl	8110260 <_localeconv_r>
 810f336:	6803      	ldr	r3, [r0, #0]
 810f338:	9304      	str	r3, [sp, #16]
 810f33a:	4618      	mov	r0, r3
 810f33c:	f7f1 f820 	bl	8100380 <strlen>
 810f340:	2300      	movs	r3, #0
 810f342:	930a      	str	r3, [sp, #40]	@ 0x28
 810f344:	f8d8 3000 	ldr.w	r3, [r8]
 810f348:	9005      	str	r0, [sp, #20]
 810f34a:	3307      	adds	r3, #7
 810f34c:	f023 0307 	bic.w	r3, r3, #7
 810f350:	f103 0208 	add.w	r2, r3, #8
 810f354:	f894 a018 	ldrb.w	sl, [r4, #24]
 810f358:	f8d4 b000 	ldr.w	fp, [r4]
 810f35c:	f8c8 2000 	str.w	r2, [r8]
 810f360:	e9d3 8900 	ldrd	r8, r9, [r3]
 810f364:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810f368:	9307      	str	r3, [sp, #28]
 810f36a:	f8cd 8018 	str.w	r8, [sp, #24]
 810f36e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810f372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f376:	4b9c      	ldr	r3, [pc, #624]	@ (810f5e8 <_printf_float+0x2c8>)
 810f378:	f04f 32ff 	mov.w	r2, #4294967295
 810f37c:	f7f1 fc5e 	bl	8100c3c <__aeabi_dcmpun>
 810f380:	bb70      	cbnz	r0, 810f3e0 <_printf_float+0xc0>
 810f382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f386:	4b98      	ldr	r3, [pc, #608]	@ (810f5e8 <_printf_float+0x2c8>)
 810f388:	f04f 32ff 	mov.w	r2, #4294967295
 810f38c:	f7f1 fc38 	bl	8100c00 <__aeabi_dcmple>
 810f390:	bb30      	cbnz	r0, 810f3e0 <_printf_float+0xc0>
 810f392:	2200      	movs	r2, #0
 810f394:	2300      	movs	r3, #0
 810f396:	4640      	mov	r0, r8
 810f398:	4649      	mov	r1, r9
 810f39a:	f7f1 fc27 	bl	8100bec <__aeabi_dcmplt>
 810f39e:	b110      	cbz	r0, 810f3a6 <_printf_float+0x86>
 810f3a0:	232d      	movs	r3, #45	@ 0x2d
 810f3a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f3a6:	4a91      	ldr	r2, [pc, #580]	@ (810f5ec <_printf_float+0x2cc>)
 810f3a8:	4b91      	ldr	r3, [pc, #580]	@ (810f5f0 <_printf_float+0x2d0>)
 810f3aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810f3ae:	bf94      	ite	ls
 810f3b0:	4690      	movls	r8, r2
 810f3b2:	4698      	movhi	r8, r3
 810f3b4:	2303      	movs	r3, #3
 810f3b6:	6123      	str	r3, [r4, #16]
 810f3b8:	f02b 0304 	bic.w	r3, fp, #4
 810f3bc:	6023      	str	r3, [r4, #0]
 810f3be:	f04f 0900 	mov.w	r9, #0
 810f3c2:	9700      	str	r7, [sp, #0]
 810f3c4:	4633      	mov	r3, r6
 810f3c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 810f3c8:	4621      	mov	r1, r4
 810f3ca:	4628      	mov	r0, r5
 810f3cc:	f000 f9d2 	bl	810f774 <_printf_common>
 810f3d0:	3001      	adds	r0, #1
 810f3d2:	f040 808d 	bne.w	810f4f0 <_printf_float+0x1d0>
 810f3d6:	f04f 30ff 	mov.w	r0, #4294967295
 810f3da:	b00d      	add	sp, #52	@ 0x34
 810f3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f3e0:	4642      	mov	r2, r8
 810f3e2:	464b      	mov	r3, r9
 810f3e4:	4640      	mov	r0, r8
 810f3e6:	4649      	mov	r1, r9
 810f3e8:	f7f1 fc28 	bl	8100c3c <__aeabi_dcmpun>
 810f3ec:	b140      	cbz	r0, 810f400 <_printf_float+0xe0>
 810f3ee:	464b      	mov	r3, r9
 810f3f0:	2b00      	cmp	r3, #0
 810f3f2:	bfbc      	itt	lt
 810f3f4:	232d      	movlt	r3, #45	@ 0x2d
 810f3f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810f3fa:	4a7e      	ldr	r2, [pc, #504]	@ (810f5f4 <_printf_float+0x2d4>)
 810f3fc:	4b7e      	ldr	r3, [pc, #504]	@ (810f5f8 <_printf_float+0x2d8>)
 810f3fe:	e7d4      	b.n	810f3aa <_printf_float+0x8a>
 810f400:	6863      	ldr	r3, [r4, #4]
 810f402:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810f406:	9206      	str	r2, [sp, #24]
 810f408:	1c5a      	adds	r2, r3, #1
 810f40a:	d13b      	bne.n	810f484 <_printf_float+0x164>
 810f40c:	2306      	movs	r3, #6
 810f40e:	6063      	str	r3, [r4, #4]
 810f410:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810f414:	2300      	movs	r3, #0
 810f416:	6022      	str	r2, [r4, #0]
 810f418:	9303      	str	r3, [sp, #12]
 810f41a:	ab0a      	add	r3, sp, #40	@ 0x28
 810f41c:	e9cd a301 	strd	sl, r3, [sp, #4]
 810f420:	ab09      	add	r3, sp, #36	@ 0x24
 810f422:	9300      	str	r3, [sp, #0]
 810f424:	6861      	ldr	r1, [r4, #4]
 810f426:	ec49 8b10 	vmov	d0, r8, r9
 810f42a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810f42e:	4628      	mov	r0, r5
 810f430:	f7ff fed6 	bl	810f1e0 <__cvt>
 810f434:	9b06      	ldr	r3, [sp, #24]
 810f436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810f438:	2b47      	cmp	r3, #71	@ 0x47
 810f43a:	4680      	mov	r8, r0
 810f43c:	d129      	bne.n	810f492 <_printf_float+0x172>
 810f43e:	1cc8      	adds	r0, r1, #3
 810f440:	db02      	blt.n	810f448 <_printf_float+0x128>
 810f442:	6863      	ldr	r3, [r4, #4]
 810f444:	4299      	cmp	r1, r3
 810f446:	dd41      	ble.n	810f4cc <_printf_float+0x1ac>
 810f448:	f1aa 0a02 	sub.w	sl, sl, #2
 810f44c:	fa5f fa8a 	uxtb.w	sl, sl
 810f450:	3901      	subs	r1, #1
 810f452:	4652      	mov	r2, sl
 810f454:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810f458:	9109      	str	r1, [sp, #36]	@ 0x24
 810f45a:	f7ff ff26 	bl	810f2aa <__exponent>
 810f45e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810f460:	1813      	adds	r3, r2, r0
 810f462:	2a01      	cmp	r2, #1
 810f464:	4681      	mov	r9, r0
 810f466:	6123      	str	r3, [r4, #16]
 810f468:	dc02      	bgt.n	810f470 <_printf_float+0x150>
 810f46a:	6822      	ldr	r2, [r4, #0]
 810f46c:	07d2      	lsls	r2, r2, #31
 810f46e:	d501      	bpl.n	810f474 <_printf_float+0x154>
 810f470:	3301      	adds	r3, #1
 810f472:	6123      	str	r3, [r4, #16]
 810f474:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810f478:	2b00      	cmp	r3, #0
 810f47a:	d0a2      	beq.n	810f3c2 <_printf_float+0xa2>
 810f47c:	232d      	movs	r3, #45	@ 0x2d
 810f47e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f482:	e79e      	b.n	810f3c2 <_printf_float+0xa2>
 810f484:	9a06      	ldr	r2, [sp, #24]
 810f486:	2a47      	cmp	r2, #71	@ 0x47
 810f488:	d1c2      	bne.n	810f410 <_printf_float+0xf0>
 810f48a:	2b00      	cmp	r3, #0
 810f48c:	d1c0      	bne.n	810f410 <_printf_float+0xf0>
 810f48e:	2301      	movs	r3, #1
 810f490:	e7bd      	b.n	810f40e <_printf_float+0xee>
 810f492:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810f496:	d9db      	bls.n	810f450 <_printf_float+0x130>
 810f498:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810f49c:	d118      	bne.n	810f4d0 <_printf_float+0x1b0>
 810f49e:	2900      	cmp	r1, #0
 810f4a0:	6863      	ldr	r3, [r4, #4]
 810f4a2:	dd0b      	ble.n	810f4bc <_printf_float+0x19c>
 810f4a4:	6121      	str	r1, [r4, #16]
 810f4a6:	b913      	cbnz	r3, 810f4ae <_printf_float+0x18e>
 810f4a8:	6822      	ldr	r2, [r4, #0]
 810f4aa:	07d0      	lsls	r0, r2, #31
 810f4ac:	d502      	bpl.n	810f4b4 <_printf_float+0x194>
 810f4ae:	3301      	adds	r3, #1
 810f4b0:	440b      	add	r3, r1
 810f4b2:	6123      	str	r3, [r4, #16]
 810f4b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 810f4b6:	f04f 0900 	mov.w	r9, #0
 810f4ba:	e7db      	b.n	810f474 <_printf_float+0x154>
 810f4bc:	b913      	cbnz	r3, 810f4c4 <_printf_float+0x1a4>
 810f4be:	6822      	ldr	r2, [r4, #0]
 810f4c0:	07d2      	lsls	r2, r2, #31
 810f4c2:	d501      	bpl.n	810f4c8 <_printf_float+0x1a8>
 810f4c4:	3302      	adds	r3, #2
 810f4c6:	e7f4      	b.n	810f4b2 <_printf_float+0x192>
 810f4c8:	2301      	movs	r3, #1
 810f4ca:	e7f2      	b.n	810f4b2 <_printf_float+0x192>
 810f4cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810f4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f4d2:	4299      	cmp	r1, r3
 810f4d4:	db05      	blt.n	810f4e2 <_printf_float+0x1c2>
 810f4d6:	6823      	ldr	r3, [r4, #0]
 810f4d8:	6121      	str	r1, [r4, #16]
 810f4da:	07d8      	lsls	r0, r3, #31
 810f4dc:	d5ea      	bpl.n	810f4b4 <_printf_float+0x194>
 810f4de:	1c4b      	adds	r3, r1, #1
 810f4e0:	e7e7      	b.n	810f4b2 <_printf_float+0x192>
 810f4e2:	2900      	cmp	r1, #0
 810f4e4:	bfd4      	ite	le
 810f4e6:	f1c1 0202 	rsble	r2, r1, #2
 810f4ea:	2201      	movgt	r2, #1
 810f4ec:	4413      	add	r3, r2
 810f4ee:	e7e0      	b.n	810f4b2 <_printf_float+0x192>
 810f4f0:	6823      	ldr	r3, [r4, #0]
 810f4f2:	055a      	lsls	r2, r3, #21
 810f4f4:	d407      	bmi.n	810f506 <_printf_float+0x1e6>
 810f4f6:	6923      	ldr	r3, [r4, #16]
 810f4f8:	4642      	mov	r2, r8
 810f4fa:	4631      	mov	r1, r6
 810f4fc:	4628      	mov	r0, r5
 810f4fe:	47b8      	blx	r7
 810f500:	3001      	adds	r0, #1
 810f502:	d12b      	bne.n	810f55c <_printf_float+0x23c>
 810f504:	e767      	b.n	810f3d6 <_printf_float+0xb6>
 810f506:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810f50a:	f240 80dd 	bls.w	810f6c8 <_printf_float+0x3a8>
 810f50e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810f512:	2200      	movs	r2, #0
 810f514:	2300      	movs	r3, #0
 810f516:	f7f1 fb5f 	bl	8100bd8 <__aeabi_dcmpeq>
 810f51a:	2800      	cmp	r0, #0
 810f51c:	d033      	beq.n	810f586 <_printf_float+0x266>
 810f51e:	4a37      	ldr	r2, [pc, #220]	@ (810f5fc <_printf_float+0x2dc>)
 810f520:	2301      	movs	r3, #1
 810f522:	4631      	mov	r1, r6
 810f524:	4628      	mov	r0, r5
 810f526:	47b8      	blx	r7
 810f528:	3001      	adds	r0, #1
 810f52a:	f43f af54 	beq.w	810f3d6 <_printf_float+0xb6>
 810f52e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810f532:	4543      	cmp	r3, r8
 810f534:	db02      	blt.n	810f53c <_printf_float+0x21c>
 810f536:	6823      	ldr	r3, [r4, #0]
 810f538:	07d8      	lsls	r0, r3, #31
 810f53a:	d50f      	bpl.n	810f55c <_printf_float+0x23c>
 810f53c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f540:	4631      	mov	r1, r6
 810f542:	4628      	mov	r0, r5
 810f544:	47b8      	blx	r7
 810f546:	3001      	adds	r0, #1
 810f548:	f43f af45 	beq.w	810f3d6 <_printf_float+0xb6>
 810f54c:	f04f 0900 	mov.w	r9, #0
 810f550:	f108 38ff 	add.w	r8, r8, #4294967295
 810f554:	f104 0a1a 	add.w	sl, r4, #26
 810f558:	45c8      	cmp	r8, r9
 810f55a:	dc09      	bgt.n	810f570 <_printf_float+0x250>
 810f55c:	6823      	ldr	r3, [r4, #0]
 810f55e:	079b      	lsls	r3, r3, #30
 810f560:	f100 8103 	bmi.w	810f76a <_printf_float+0x44a>
 810f564:	68e0      	ldr	r0, [r4, #12]
 810f566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810f568:	4298      	cmp	r0, r3
 810f56a:	bfb8      	it	lt
 810f56c:	4618      	movlt	r0, r3
 810f56e:	e734      	b.n	810f3da <_printf_float+0xba>
 810f570:	2301      	movs	r3, #1
 810f572:	4652      	mov	r2, sl
 810f574:	4631      	mov	r1, r6
 810f576:	4628      	mov	r0, r5
 810f578:	47b8      	blx	r7
 810f57a:	3001      	adds	r0, #1
 810f57c:	f43f af2b 	beq.w	810f3d6 <_printf_float+0xb6>
 810f580:	f109 0901 	add.w	r9, r9, #1
 810f584:	e7e8      	b.n	810f558 <_printf_float+0x238>
 810f586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f588:	2b00      	cmp	r3, #0
 810f58a:	dc39      	bgt.n	810f600 <_printf_float+0x2e0>
 810f58c:	4a1b      	ldr	r2, [pc, #108]	@ (810f5fc <_printf_float+0x2dc>)
 810f58e:	2301      	movs	r3, #1
 810f590:	4631      	mov	r1, r6
 810f592:	4628      	mov	r0, r5
 810f594:	47b8      	blx	r7
 810f596:	3001      	adds	r0, #1
 810f598:	f43f af1d 	beq.w	810f3d6 <_printf_float+0xb6>
 810f59c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810f5a0:	ea59 0303 	orrs.w	r3, r9, r3
 810f5a4:	d102      	bne.n	810f5ac <_printf_float+0x28c>
 810f5a6:	6823      	ldr	r3, [r4, #0]
 810f5a8:	07d9      	lsls	r1, r3, #31
 810f5aa:	d5d7      	bpl.n	810f55c <_printf_float+0x23c>
 810f5ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f5b0:	4631      	mov	r1, r6
 810f5b2:	4628      	mov	r0, r5
 810f5b4:	47b8      	blx	r7
 810f5b6:	3001      	adds	r0, #1
 810f5b8:	f43f af0d 	beq.w	810f3d6 <_printf_float+0xb6>
 810f5bc:	f04f 0a00 	mov.w	sl, #0
 810f5c0:	f104 0b1a 	add.w	fp, r4, #26
 810f5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f5c6:	425b      	negs	r3, r3
 810f5c8:	4553      	cmp	r3, sl
 810f5ca:	dc01      	bgt.n	810f5d0 <_printf_float+0x2b0>
 810f5cc:	464b      	mov	r3, r9
 810f5ce:	e793      	b.n	810f4f8 <_printf_float+0x1d8>
 810f5d0:	2301      	movs	r3, #1
 810f5d2:	465a      	mov	r2, fp
 810f5d4:	4631      	mov	r1, r6
 810f5d6:	4628      	mov	r0, r5
 810f5d8:	47b8      	blx	r7
 810f5da:	3001      	adds	r0, #1
 810f5dc:	f43f aefb 	beq.w	810f3d6 <_printf_float+0xb6>
 810f5e0:	f10a 0a01 	add.w	sl, sl, #1
 810f5e4:	e7ee      	b.n	810f5c4 <_printf_float+0x2a4>
 810f5e6:	bf00      	nop
 810f5e8:	7fefffff 	.word	0x7fefffff
 810f5ec:	081139f7 	.word	0x081139f7
 810f5f0:	081139fb 	.word	0x081139fb
 810f5f4:	081139ff 	.word	0x081139ff
 810f5f8:	08113a03 	.word	0x08113a03
 810f5fc:	08113a07 	.word	0x08113a07
 810f600:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810f602:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810f606:	4553      	cmp	r3, sl
 810f608:	bfa8      	it	ge
 810f60a:	4653      	movge	r3, sl
 810f60c:	2b00      	cmp	r3, #0
 810f60e:	4699      	mov	r9, r3
 810f610:	dc36      	bgt.n	810f680 <_printf_float+0x360>
 810f612:	f04f 0b00 	mov.w	fp, #0
 810f616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f61a:	f104 021a 	add.w	r2, r4, #26
 810f61e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810f620:	9306      	str	r3, [sp, #24]
 810f622:	eba3 0309 	sub.w	r3, r3, r9
 810f626:	455b      	cmp	r3, fp
 810f628:	dc31      	bgt.n	810f68e <_printf_float+0x36e>
 810f62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f62c:	459a      	cmp	sl, r3
 810f62e:	dc3a      	bgt.n	810f6a6 <_printf_float+0x386>
 810f630:	6823      	ldr	r3, [r4, #0]
 810f632:	07da      	lsls	r2, r3, #31
 810f634:	d437      	bmi.n	810f6a6 <_printf_float+0x386>
 810f636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f638:	ebaa 0903 	sub.w	r9, sl, r3
 810f63c:	9b06      	ldr	r3, [sp, #24]
 810f63e:	ebaa 0303 	sub.w	r3, sl, r3
 810f642:	4599      	cmp	r9, r3
 810f644:	bfa8      	it	ge
 810f646:	4699      	movge	r9, r3
 810f648:	f1b9 0f00 	cmp.w	r9, #0
 810f64c:	dc33      	bgt.n	810f6b6 <_printf_float+0x396>
 810f64e:	f04f 0800 	mov.w	r8, #0
 810f652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f656:	f104 0b1a 	add.w	fp, r4, #26
 810f65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f65c:	ebaa 0303 	sub.w	r3, sl, r3
 810f660:	eba3 0309 	sub.w	r3, r3, r9
 810f664:	4543      	cmp	r3, r8
 810f666:	f77f af79 	ble.w	810f55c <_printf_float+0x23c>
 810f66a:	2301      	movs	r3, #1
 810f66c:	465a      	mov	r2, fp
 810f66e:	4631      	mov	r1, r6
 810f670:	4628      	mov	r0, r5
 810f672:	47b8      	blx	r7
 810f674:	3001      	adds	r0, #1
 810f676:	f43f aeae 	beq.w	810f3d6 <_printf_float+0xb6>
 810f67a:	f108 0801 	add.w	r8, r8, #1
 810f67e:	e7ec      	b.n	810f65a <_printf_float+0x33a>
 810f680:	4642      	mov	r2, r8
 810f682:	4631      	mov	r1, r6
 810f684:	4628      	mov	r0, r5
 810f686:	47b8      	blx	r7
 810f688:	3001      	adds	r0, #1
 810f68a:	d1c2      	bne.n	810f612 <_printf_float+0x2f2>
 810f68c:	e6a3      	b.n	810f3d6 <_printf_float+0xb6>
 810f68e:	2301      	movs	r3, #1
 810f690:	4631      	mov	r1, r6
 810f692:	4628      	mov	r0, r5
 810f694:	9206      	str	r2, [sp, #24]
 810f696:	47b8      	blx	r7
 810f698:	3001      	adds	r0, #1
 810f69a:	f43f ae9c 	beq.w	810f3d6 <_printf_float+0xb6>
 810f69e:	9a06      	ldr	r2, [sp, #24]
 810f6a0:	f10b 0b01 	add.w	fp, fp, #1
 810f6a4:	e7bb      	b.n	810f61e <_printf_float+0x2fe>
 810f6a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f6aa:	4631      	mov	r1, r6
 810f6ac:	4628      	mov	r0, r5
 810f6ae:	47b8      	blx	r7
 810f6b0:	3001      	adds	r0, #1
 810f6b2:	d1c0      	bne.n	810f636 <_printf_float+0x316>
 810f6b4:	e68f      	b.n	810f3d6 <_printf_float+0xb6>
 810f6b6:	9a06      	ldr	r2, [sp, #24]
 810f6b8:	464b      	mov	r3, r9
 810f6ba:	4442      	add	r2, r8
 810f6bc:	4631      	mov	r1, r6
 810f6be:	4628      	mov	r0, r5
 810f6c0:	47b8      	blx	r7
 810f6c2:	3001      	adds	r0, #1
 810f6c4:	d1c3      	bne.n	810f64e <_printf_float+0x32e>
 810f6c6:	e686      	b.n	810f3d6 <_printf_float+0xb6>
 810f6c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810f6cc:	f1ba 0f01 	cmp.w	sl, #1
 810f6d0:	dc01      	bgt.n	810f6d6 <_printf_float+0x3b6>
 810f6d2:	07db      	lsls	r3, r3, #31
 810f6d4:	d536      	bpl.n	810f744 <_printf_float+0x424>
 810f6d6:	2301      	movs	r3, #1
 810f6d8:	4642      	mov	r2, r8
 810f6da:	4631      	mov	r1, r6
 810f6dc:	4628      	mov	r0, r5
 810f6de:	47b8      	blx	r7
 810f6e0:	3001      	adds	r0, #1
 810f6e2:	f43f ae78 	beq.w	810f3d6 <_printf_float+0xb6>
 810f6e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f6ea:	4631      	mov	r1, r6
 810f6ec:	4628      	mov	r0, r5
 810f6ee:	47b8      	blx	r7
 810f6f0:	3001      	adds	r0, #1
 810f6f2:	f43f ae70 	beq.w	810f3d6 <_printf_float+0xb6>
 810f6f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810f6fa:	2200      	movs	r2, #0
 810f6fc:	2300      	movs	r3, #0
 810f6fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 810f702:	f7f1 fa69 	bl	8100bd8 <__aeabi_dcmpeq>
 810f706:	b9c0      	cbnz	r0, 810f73a <_printf_float+0x41a>
 810f708:	4653      	mov	r3, sl
 810f70a:	f108 0201 	add.w	r2, r8, #1
 810f70e:	4631      	mov	r1, r6
 810f710:	4628      	mov	r0, r5
 810f712:	47b8      	blx	r7
 810f714:	3001      	adds	r0, #1
 810f716:	d10c      	bne.n	810f732 <_printf_float+0x412>
 810f718:	e65d      	b.n	810f3d6 <_printf_float+0xb6>
 810f71a:	2301      	movs	r3, #1
 810f71c:	465a      	mov	r2, fp
 810f71e:	4631      	mov	r1, r6
 810f720:	4628      	mov	r0, r5
 810f722:	47b8      	blx	r7
 810f724:	3001      	adds	r0, #1
 810f726:	f43f ae56 	beq.w	810f3d6 <_printf_float+0xb6>
 810f72a:	f108 0801 	add.w	r8, r8, #1
 810f72e:	45d0      	cmp	r8, sl
 810f730:	dbf3      	blt.n	810f71a <_printf_float+0x3fa>
 810f732:	464b      	mov	r3, r9
 810f734:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810f738:	e6df      	b.n	810f4fa <_printf_float+0x1da>
 810f73a:	f04f 0800 	mov.w	r8, #0
 810f73e:	f104 0b1a 	add.w	fp, r4, #26
 810f742:	e7f4      	b.n	810f72e <_printf_float+0x40e>
 810f744:	2301      	movs	r3, #1
 810f746:	4642      	mov	r2, r8
 810f748:	e7e1      	b.n	810f70e <_printf_float+0x3ee>
 810f74a:	2301      	movs	r3, #1
 810f74c:	464a      	mov	r2, r9
 810f74e:	4631      	mov	r1, r6
 810f750:	4628      	mov	r0, r5
 810f752:	47b8      	blx	r7
 810f754:	3001      	adds	r0, #1
 810f756:	f43f ae3e 	beq.w	810f3d6 <_printf_float+0xb6>
 810f75a:	f108 0801 	add.w	r8, r8, #1
 810f75e:	68e3      	ldr	r3, [r4, #12]
 810f760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810f762:	1a5b      	subs	r3, r3, r1
 810f764:	4543      	cmp	r3, r8
 810f766:	dcf0      	bgt.n	810f74a <_printf_float+0x42a>
 810f768:	e6fc      	b.n	810f564 <_printf_float+0x244>
 810f76a:	f04f 0800 	mov.w	r8, #0
 810f76e:	f104 0919 	add.w	r9, r4, #25
 810f772:	e7f4      	b.n	810f75e <_printf_float+0x43e>

0810f774 <_printf_common>:
 810f774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f778:	4616      	mov	r6, r2
 810f77a:	4698      	mov	r8, r3
 810f77c:	688a      	ldr	r2, [r1, #8]
 810f77e:	690b      	ldr	r3, [r1, #16]
 810f780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810f784:	4293      	cmp	r3, r2
 810f786:	bfb8      	it	lt
 810f788:	4613      	movlt	r3, r2
 810f78a:	6033      	str	r3, [r6, #0]
 810f78c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810f790:	4607      	mov	r7, r0
 810f792:	460c      	mov	r4, r1
 810f794:	b10a      	cbz	r2, 810f79a <_printf_common+0x26>
 810f796:	3301      	adds	r3, #1
 810f798:	6033      	str	r3, [r6, #0]
 810f79a:	6823      	ldr	r3, [r4, #0]
 810f79c:	0699      	lsls	r1, r3, #26
 810f79e:	bf42      	ittt	mi
 810f7a0:	6833      	ldrmi	r3, [r6, #0]
 810f7a2:	3302      	addmi	r3, #2
 810f7a4:	6033      	strmi	r3, [r6, #0]
 810f7a6:	6825      	ldr	r5, [r4, #0]
 810f7a8:	f015 0506 	ands.w	r5, r5, #6
 810f7ac:	d106      	bne.n	810f7bc <_printf_common+0x48>
 810f7ae:	f104 0a19 	add.w	sl, r4, #25
 810f7b2:	68e3      	ldr	r3, [r4, #12]
 810f7b4:	6832      	ldr	r2, [r6, #0]
 810f7b6:	1a9b      	subs	r3, r3, r2
 810f7b8:	42ab      	cmp	r3, r5
 810f7ba:	dc26      	bgt.n	810f80a <_printf_common+0x96>
 810f7bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810f7c0:	6822      	ldr	r2, [r4, #0]
 810f7c2:	3b00      	subs	r3, #0
 810f7c4:	bf18      	it	ne
 810f7c6:	2301      	movne	r3, #1
 810f7c8:	0692      	lsls	r2, r2, #26
 810f7ca:	d42b      	bmi.n	810f824 <_printf_common+0xb0>
 810f7cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810f7d0:	4641      	mov	r1, r8
 810f7d2:	4638      	mov	r0, r7
 810f7d4:	47c8      	blx	r9
 810f7d6:	3001      	adds	r0, #1
 810f7d8:	d01e      	beq.n	810f818 <_printf_common+0xa4>
 810f7da:	6823      	ldr	r3, [r4, #0]
 810f7dc:	6922      	ldr	r2, [r4, #16]
 810f7de:	f003 0306 	and.w	r3, r3, #6
 810f7e2:	2b04      	cmp	r3, #4
 810f7e4:	bf02      	ittt	eq
 810f7e6:	68e5      	ldreq	r5, [r4, #12]
 810f7e8:	6833      	ldreq	r3, [r6, #0]
 810f7ea:	1aed      	subeq	r5, r5, r3
 810f7ec:	68a3      	ldr	r3, [r4, #8]
 810f7ee:	bf0c      	ite	eq
 810f7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810f7f4:	2500      	movne	r5, #0
 810f7f6:	4293      	cmp	r3, r2
 810f7f8:	bfc4      	itt	gt
 810f7fa:	1a9b      	subgt	r3, r3, r2
 810f7fc:	18ed      	addgt	r5, r5, r3
 810f7fe:	2600      	movs	r6, #0
 810f800:	341a      	adds	r4, #26
 810f802:	42b5      	cmp	r5, r6
 810f804:	d11a      	bne.n	810f83c <_printf_common+0xc8>
 810f806:	2000      	movs	r0, #0
 810f808:	e008      	b.n	810f81c <_printf_common+0xa8>
 810f80a:	2301      	movs	r3, #1
 810f80c:	4652      	mov	r2, sl
 810f80e:	4641      	mov	r1, r8
 810f810:	4638      	mov	r0, r7
 810f812:	47c8      	blx	r9
 810f814:	3001      	adds	r0, #1
 810f816:	d103      	bne.n	810f820 <_printf_common+0xac>
 810f818:	f04f 30ff 	mov.w	r0, #4294967295
 810f81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f820:	3501      	adds	r5, #1
 810f822:	e7c6      	b.n	810f7b2 <_printf_common+0x3e>
 810f824:	18e1      	adds	r1, r4, r3
 810f826:	1c5a      	adds	r2, r3, #1
 810f828:	2030      	movs	r0, #48	@ 0x30
 810f82a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810f82e:	4422      	add	r2, r4
 810f830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810f834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810f838:	3302      	adds	r3, #2
 810f83a:	e7c7      	b.n	810f7cc <_printf_common+0x58>
 810f83c:	2301      	movs	r3, #1
 810f83e:	4622      	mov	r2, r4
 810f840:	4641      	mov	r1, r8
 810f842:	4638      	mov	r0, r7
 810f844:	47c8      	blx	r9
 810f846:	3001      	adds	r0, #1
 810f848:	d0e6      	beq.n	810f818 <_printf_common+0xa4>
 810f84a:	3601      	adds	r6, #1
 810f84c:	e7d9      	b.n	810f802 <_printf_common+0x8e>
	...

0810f850 <_printf_i>:
 810f850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f854:	7e0f      	ldrb	r7, [r1, #24]
 810f856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810f858:	2f78      	cmp	r7, #120	@ 0x78
 810f85a:	4691      	mov	r9, r2
 810f85c:	4680      	mov	r8, r0
 810f85e:	460c      	mov	r4, r1
 810f860:	469a      	mov	sl, r3
 810f862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810f866:	d807      	bhi.n	810f878 <_printf_i+0x28>
 810f868:	2f62      	cmp	r7, #98	@ 0x62
 810f86a:	d80a      	bhi.n	810f882 <_printf_i+0x32>
 810f86c:	2f00      	cmp	r7, #0
 810f86e:	f000 80d2 	beq.w	810fa16 <_printf_i+0x1c6>
 810f872:	2f58      	cmp	r7, #88	@ 0x58
 810f874:	f000 80b9 	beq.w	810f9ea <_printf_i+0x19a>
 810f878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f87c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810f880:	e03a      	b.n	810f8f8 <_printf_i+0xa8>
 810f882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810f886:	2b15      	cmp	r3, #21
 810f888:	d8f6      	bhi.n	810f878 <_printf_i+0x28>
 810f88a:	a101      	add	r1, pc, #4	@ (adr r1, 810f890 <_printf_i+0x40>)
 810f88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810f890:	0810f8e9 	.word	0x0810f8e9
 810f894:	0810f8fd 	.word	0x0810f8fd
 810f898:	0810f879 	.word	0x0810f879
 810f89c:	0810f879 	.word	0x0810f879
 810f8a0:	0810f879 	.word	0x0810f879
 810f8a4:	0810f879 	.word	0x0810f879
 810f8a8:	0810f8fd 	.word	0x0810f8fd
 810f8ac:	0810f879 	.word	0x0810f879
 810f8b0:	0810f879 	.word	0x0810f879
 810f8b4:	0810f879 	.word	0x0810f879
 810f8b8:	0810f879 	.word	0x0810f879
 810f8bc:	0810f9fd 	.word	0x0810f9fd
 810f8c0:	0810f927 	.word	0x0810f927
 810f8c4:	0810f9b7 	.word	0x0810f9b7
 810f8c8:	0810f879 	.word	0x0810f879
 810f8cc:	0810f879 	.word	0x0810f879
 810f8d0:	0810fa1f 	.word	0x0810fa1f
 810f8d4:	0810f879 	.word	0x0810f879
 810f8d8:	0810f927 	.word	0x0810f927
 810f8dc:	0810f879 	.word	0x0810f879
 810f8e0:	0810f879 	.word	0x0810f879
 810f8e4:	0810f9bf 	.word	0x0810f9bf
 810f8e8:	6833      	ldr	r3, [r6, #0]
 810f8ea:	1d1a      	adds	r2, r3, #4
 810f8ec:	681b      	ldr	r3, [r3, #0]
 810f8ee:	6032      	str	r2, [r6, #0]
 810f8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f8f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810f8f8:	2301      	movs	r3, #1
 810f8fa:	e09d      	b.n	810fa38 <_printf_i+0x1e8>
 810f8fc:	6833      	ldr	r3, [r6, #0]
 810f8fe:	6820      	ldr	r0, [r4, #0]
 810f900:	1d19      	adds	r1, r3, #4
 810f902:	6031      	str	r1, [r6, #0]
 810f904:	0606      	lsls	r6, r0, #24
 810f906:	d501      	bpl.n	810f90c <_printf_i+0xbc>
 810f908:	681d      	ldr	r5, [r3, #0]
 810f90a:	e003      	b.n	810f914 <_printf_i+0xc4>
 810f90c:	0645      	lsls	r5, r0, #25
 810f90e:	d5fb      	bpl.n	810f908 <_printf_i+0xb8>
 810f910:	f9b3 5000 	ldrsh.w	r5, [r3]
 810f914:	2d00      	cmp	r5, #0
 810f916:	da03      	bge.n	810f920 <_printf_i+0xd0>
 810f918:	232d      	movs	r3, #45	@ 0x2d
 810f91a:	426d      	negs	r5, r5
 810f91c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f920:	4859      	ldr	r0, [pc, #356]	@ (810fa88 <_printf_i+0x238>)
 810f922:	230a      	movs	r3, #10
 810f924:	e011      	b.n	810f94a <_printf_i+0xfa>
 810f926:	6821      	ldr	r1, [r4, #0]
 810f928:	6833      	ldr	r3, [r6, #0]
 810f92a:	0608      	lsls	r0, r1, #24
 810f92c:	f853 5b04 	ldr.w	r5, [r3], #4
 810f930:	d402      	bmi.n	810f938 <_printf_i+0xe8>
 810f932:	0649      	lsls	r1, r1, #25
 810f934:	bf48      	it	mi
 810f936:	b2ad      	uxthmi	r5, r5
 810f938:	2f6f      	cmp	r7, #111	@ 0x6f
 810f93a:	4853      	ldr	r0, [pc, #332]	@ (810fa88 <_printf_i+0x238>)
 810f93c:	6033      	str	r3, [r6, #0]
 810f93e:	bf14      	ite	ne
 810f940:	230a      	movne	r3, #10
 810f942:	2308      	moveq	r3, #8
 810f944:	2100      	movs	r1, #0
 810f946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810f94a:	6866      	ldr	r6, [r4, #4]
 810f94c:	60a6      	str	r6, [r4, #8]
 810f94e:	2e00      	cmp	r6, #0
 810f950:	bfa2      	ittt	ge
 810f952:	6821      	ldrge	r1, [r4, #0]
 810f954:	f021 0104 	bicge.w	r1, r1, #4
 810f958:	6021      	strge	r1, [r4, #0]
 810f95a:	b90d      	cbnz	r5, 810f960 <_printf_i+0x110>
 810f95c:	2e00      	cmp	r6, #0
 810f95e:	d04b      	beq.n	810f9f8 <_printf_i+0x1a8>
 810f960:	4616      	mov	r6, r2
 810f962:	fbb5 f1f3 	udiv	r1, r5, r3
 810f966:	fb03 5711 	mls	r7, r3, r1, r5
 810f96a:	5dc7      	ldrb	r7, [r0, r7]
 810f96c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810f970:	462f      	mov	r7, r5
 810f972:	42bb      	cmp	r3, r7
 810f974:	460d      	mov	r5, r1
 810f976:	d9f4      	bls.n	810f962 <_printf_i+0x112>
 810f978:	2b08      	cmp	r3, #8
 810f97a:	d10b      	bne.n	810f994 <_printf_i+0x144>
 810f97c:	6823      	ldr	r3, [r4, #0]
 810f97e:	07df      	lsls	r7, r3, #31
 810f980:	d508      	bpl.n	810f994 <_printf_i+0x144>
 810f982:	6923      	ldr	r3, [r4, #16]
 810f984:	6861      	ldr	r1, [r4, #4]
 810f986:	4299      	cmp	r1, r3
 810f988:	bfde      	ittt	le
 810f98a:	2330      	movle	r3, #48	@ 0x30
 810f98c:	f806 3c01 	strble.w	r3, [r6, #-1]
 810f990:	f106 36ff 	addle.w	r6, r6, #4294967295
 810f994:	1b92      	subs	r2, r2, r6
 810f996:	6122      	str	r2, [r4, #16]
 810f998:	f8cd a000 	str.w	sl, [sp]
 810f99c:	464b      	mov	r3, r9
 810f99e:	aa03      	add	r2, sp, #12
 810f9a0:	4621      	mov	r1, r4
 810f9a2:	4640      	mov	r0, r8
 810f9a4:	f7ff fee6 	bl	810f774 <_printf_common>
 810f9a8:	3001      	adds	r0, #1
 810f9aa:	d14a      	bne.n	810fa42 <_printf_i+0x1f2>
 810f9ac:	f04f 30ff 	mov.w	r0, #4294967295
 810f9b0:	b004      	add	sp, #16
 810f9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f9b6:	6823      	ldr	r3, [r4, #0]
 810f9b8:	f043 0320 	orr.w	r3, r3, #32
 810f9bc:	6023      	str	r3, [r4, #0]
 810f9be:	4833      	ldr	r0, [pc, #204]	@ (810fa8c <_printf_i+0x23c>)
 810f9c0:	2778      	movs	r7, #120	@ 0x78
 810f9c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810f9c6:	6823      	ldr	r3, [r4, #0]
 810f9c8:	6831      	ldr	r1, [r6, #0]
 810f9ca:	061f      	lsls	r7, r3, #24
 810f9cc:	f851 5b04 	ldr.w	r5, [r1], #4
 810f9d0:	d402      	bmi.n	810f9d8 <_printf_i+0x188>
 810f9d2:	065f      	lsls	r7, r3, #25
 810f9d4:	bf48      	it	mi
 810f9d6:	b2ad      	uxthmi	r5, r5
 810f9d8:	6031      	str	r1, [r6, #0]
 810f9da:	07d9      	lsls	r1, r3, #31
 810f9dc:	bf44      	itt	mi
 810f9de:	f043 0320 	orrmi.w	r3, r3, #32
 810f9e2:	6023      	strmi	r3, [r4, #0]
 810f9e4:	b11d      	cbz	r5, 810f9ee <_printf_i+0x19e>
 810f9e6:	2310      	movs	r3, #16
 810f9e8:	e7ac      	b.n	810f944 <_printf_i+0xf4>
 810f9ea:	4827      	ldr	r0, [pc, #156]	@ (810fa88 <_printf_i+0x238>)
 810f9ec:	e7e9      	b.n	810f9c2 <_printf_i+0x172>
 810f9ee:	6823      	ldr	r3, [r4, #0]
 810f9f0:	f023 0320 	bic.w	r3, r3, #32
 810f9f4:	6023      	str	r3, [r4, #0]
 810f9f6:	e7f6      	b.n	810f9e6 <_printf_i+0x196>
 810f9f8:	4616      	mov	r6, r2
 810f9fa:	e7bd      	b.n	810f978 <_printf_i+0x128>
 810f9fc:	6833      	ldr	r3, [r6, #0]
 810f9fe:	6825      	ldr	r5, [r4, #0]
 810fa00:	6961      	ldr	r1, [r4, #20]
 810fa02:	1d18      	adds	r0, r3, #4
 810fa04:	6030      	str	r0, [r6, #0]
 810fa06:	062e      	lsls	r6, r5, #24
 810fa08:	681b      	ldr	r3, [r3, #0]
 810fa0a:	d501      	bpl.n	810fa10 <_printf_i+0x1c0>
 810fa0c:	6019      	str	r1, [r3, #0]
 810fa0e:	e002      	b.n	810fa16 <_printf_i+0x1c6>
 810fa10:	0668      	lsls	r0, r5, #25
 810fa12:	d5fb      	bpl.n	810fa0c <_printf_i+0x1bc>
 810fa14:	8019      	strh	r1, [r3, #0]
 810fa16:	2300      	movs	r3, #0
 810fa18:	6123      	str	r3, [r4, #16]
 810fa1a:	4616      	mov	r6, r2
 810fa1c:	e7bc      	b.n	810f998 <_printf_i+0x148>
 810fa1e:	6833      	ldr	r3, [r6, #0]
 810fa20:	1d1a      	adds	r2, r3, #4
 810fa22:	6032      	str	r2, [r6, #0]
 810fa24:	681e      	ldr	r6, [r3, #0]
 810fa26:	6862      	ldr	r2, [r4, #4]
 810fa28:	2100      	movs	r1, #0
 810fa2a:	4630      	mov	r0, r6
 810fa2c:	f7f0 fc58 	bl	81002e0 <memchr>
 810fa30:	b108      	cbz	r0, 810fa36 <_printf_i+0x1e6>
 810fa32:	1b80      	subs	r0, r0, r6
 810fa34:	6060      	str	r0, [r4, #4]
 810fa36:	6863      	ldr	r3, [r4, #4]
 810fa38:	6123      	str	r3, [r4, #16]
 810fa3a:	2300      	movs	r3, #0
 810fa3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810fa40:	e7aa      	b.n	810f998 <_printf_i+0x148>
 810fa42:	6923      	ldr	r3, [r4, #16]
 810fa44:	4632      	mov	r2, r6
 810fa46:	4649      	mov	r1, r9
 810fa48:	4640      	mov	r0, r8
 810fa4a:	47d0      	blx	sl
 810fa4c:	3001      	adds	r0, #1
 810fa4e:	d0ad      	beq.n	810f9ac <_printf_i+0x15c>
 810fa50:	6823      	ldr	r3, [r4, #0]
 810fa52:	079b      	lsls	r3, r3, #30
 810fa54:	d413      	bmi.n	810fa7e <_printf_i+0x22e>
 810fa56:	68e0      	ldr	r0, [r4, #12]
 810fa58:	9b03      	ldr	r3, [sp, #12]
 810fa5a:	4298      	cmp	r0, r3
 810fa5c:	bfb8      	it	lt
 810fa5e:	4618      	movlt	r0, r3
 810fa60:	e7a6      	b.n	810f9b0 <_printf_i+0x160>
 810fa62:	2301      	movs	r3, #1
 810fa64:	4632      	mov	r2, r6
 810fa66:	4649      	mov	r1, r9
 810fa68:	4640      	mov	r0, r8
 810fa6a:	47d0      	blx	sl
 810fa6c:	3001      	adds	r0, #1
 810fa6e:	d09d      	beq.n	810f9ac <_printf_i+0x15c>
 810fa70:	3501      	adds	r5, #1
 810fa72:	68e3      	ldr	r3, [r4, #12]
 810fa74:	9903      	ldr	r1, [sp, #12]
 810fa76:	1a5b      	subs	r3, r3, r1
 810fa78:	42ab      	cmp	r3, r5
 810fa7a:	dcf2      	bgt.n	810fa62 <_printf_i+0x212>
 810fa7c:	e7eb      	b.n	810fa56 <_printf_i+0x206>
 810fa7e:	2500      	movs	r5, #0
 810fa80:	f104 0619 	add.w	r6, r4, #25
 810fa84:	e7f5      	b.n	810fa72 <_printf_i+0x222>
 810fa86:	bf00      	nop
 810fa88:	08113a09 	.word	0x08113a09
 810fa8c:	08113a1a 	.word	0x08113a1a

0810fa90 <_scanf_float>:
 810fa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810fa94:	b087      	sub	sp, #28
 810fa96:	4617      	mov	r7, r2
 810fa98:	9303      	str	r3, [sp, #12]
 810fa9a:	688b      	ldr	r3, [r1, #8]
 810fa9c:	1e5a      	subs	r2, r3, #1
 810fa9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810faa2:	bf81      	itttt	hi
 810faa4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810faa8:	eb03 0b05 	addhi.w	fp, r3, r5
 810faac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810fab0:	608b      	strhi	r3, [r1, #8]
 810fab2:	680b      	ldr	r3, [r1, #0]
 810fab4:	460a      	mov	r2, r1
 810fab6:	f04f 0500 	mov.w	r5, #0
 810faba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810fabe:	f842 3b1c 	str.w	r3, [r2], #28
 810fac2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810fac6:	4680      	mov	r8, r0
 810fac8:	460c      	mov	r4, r1
 810faca:	bf98      	it	ls
 810facc:	f04f 0b00 	movls.w	fp, #0
 810fad0:	9201      	str	r2, [sp, #4]
 810fad2:	4616      	mov	r6, r2
 810fad4:	46aa      	mov	sl, r5
 810fad6:	46a9      	mov	r9, r5
 810fad8:	9502      	str	r5, [sp, #8]
 810fada:	68a2      	ldr	r2, [r4, #8]
 810fadc:	b152      	cbz	r2, 810faf4 <_scanf_float+0x64>
 810fade:	683b      	ldr	r3, [r7, #0]
 810fae0:	781b      	ldrb	r3, [r3, #0]
 810fae2:	2b4e      	cmp	r3, #78	@ 0x4e
 810fae4:	d864      	bhi.n	810fbb0 <_scanf_float+0x120>
 810fae6:	2b40      	cmp	r3, #64	@ 0x40
 810fae8:	d83c      	bhi.n	810fb64 <_scanf_float+0xd4>
 810faea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810faee:	b2c8      	uxtb	r0, r1
 810faf0:	280e      	cmp	r0, #14
 810faf2:	d93a      	bls.n	810fb6a <_scanf_float+0xda>
 810faf4:	f1b9 0f00 	cmp.w	r9, #0
 810faf8:	d003      	beq.n	810fb02 <_scanf_float+0x72>
 810fafa:	6823      	ldr	r3, [r4, #0]
 810fafc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810fb00:	6023      	str	r3, [r4, #0]
 810fb02:	f10a 3aff 	add.w	sl, sl, #4294967295
 810fb06:	f1ba 0f01 	cmp.w	sl, #1
 810fb0a:	f200 8117 	bhi.w	810fd3c <_scanf_float+0x2ac>
 810fb0e:	9b01      	ldr	r3, [sp, #4]
 810fb10:	429e      	cmp	r6, r3
 810fb12:	f200 8108 	bhi.w	810fd26 <_scanf_float+0x296>
 810fb16:	2001      	movs	r0, #1
 810fb18:	b007      	add	sp, #28
 810fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fb1e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810fb22:	2a0d      	cmp	r2, #13
 810fb24:	d8e6      	bhi.n	810faf4 <_scanf_float+0x64>
 810fb26:	a101      	add	r1, pc, #4	@ (adr r1, 810fb2c <_scanf_float+0x9c>)
 810fb28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810fb2c:	0810fc73 	.word	0x0810fc73
 810fb30:	0810faf5 	.word	0x0810faf5
 810fb34:	0810faf5 	.word	0x0810faf5
 810fb38:	0810faf5 	.word	0x0810faf5
 810fb3c:	0810fcd3 	.word	0x0810fcd3
 810fb40:	0810fcab 	.word	0x0810fcab
 810fb44:	0810faf5 	.word	0x0810faf5
 810fb48:	0810faf5 	.word	0x0810faf5
 810fb4c:	0810fc81 	.word	0x0810fc81
 810fb50:	0810faf5 	.word	0x0810faf5
 810fb54:	0810faf5 	.word	0x0810faf5
 810fb58:	0810faf5 	.word	0x0810faf5
 810fb5c:	0810faf5 	.word	0x0810faf5
 810fb60:	0810fc39 	.word	0x0810fc39
 810fb64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810fb68:	e7db      	b.n	810fb22 <_scanf_float+0x92>
 810fb6a:	290e      	cmp	r1, #14
 810fb6c:	d8c2      	bhi.n	810faf4 <_scanf_float+0x64>
 810fb6e:	a001      	add	r0, pc, #4	@ (adr r0, 810fb74 <_scanf_float+0xe4>)
 810fb70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810fb74:	0810fc29 	.word	0x0810fc29
 810fb78:	0810faf5 	.word	0x0810faf5
 810fb7c:	0810fc29 	.word	0x0810fc29
 810fb80:	0810fcbf 	.word	0x0810fcbf
 810fb84:	0810faf5 	.word	0x0810faf5
 810fb88:	0810fbd1 	.word	0x0810fbd1
 810fb8c:	0810fc0f 	.word	0x0810fc0f
 810fb90:	0810fc0f 	.word	0x0810fc0f
 810fb94:	0810fc0f 	.word	0x0810fc0f
 810fb98:	0810fc0f 	.word	0x0810fc0f
 810fb9c:	0810fc0f 	.word	0x0810fc0f
 810fba0:	0810fc0f 	.word	0x0810fc0f
 810fba4:	0810fc0f 	.word	0x0810fc0f
 810fba8:	0810fc0f 	.word	0x0810fc0f
 810fbac:	0810fc0f 	.word	0x0810fc0f
 810fbb0:	2b6e      	cmp	r3, #110	@ 0x6e
 810fbb2:	d809      	bhi.n	810fbc8 <_scanf_float+0x138>
 810fbb4:	2b60      	cmp	r3, #96	@ 0x60
 810fbb6:	d8b2      	bhi.n	810fb1e <_scanf_float+0x8e>
 810fbb8:	2b54      	cmp	r3, #84	@ 0x54
 810fbba:	d07b      	beq.n	810fcb4 <_scanf_float+0x224>
 810fbbc:	2b59      	cmp	r3, #89	@ 0x59
 810fbbe:	d199      	bne.n	810faf4 <_scanf_float+0x64>
 810fbc0:	2d07      	cmp	r5, #7
 810fbc2:	d197      	bne.n	810faf4 <_scanf_float+0x64>
 810fbc4:	2508      	movs	r5, #8
 810fbc6:	e02c      	b.n	810fc22 <_scanf_float+0x192>
 810fbc8:	2b74      	cmp	r3, #116	@ 0x74
 810fbca:	d073      	beq.n	810fcb4 <_scanf_float+0x224>
 810fbcc:	2b79      	cmp	r3, #121	@ 0x79
 810fbce:	e7f6      	b.n	810fbbe <_scanf_float+0x12e>
 810fbd0:	6821      	ldr	r1, [r4, #0]
 810fbd2:	05c8      	lsls	r0, r1, #23
 810fbd4:	d51b      	bpl.n	810fc0e <_scanf_float+0x17e>
 810fbd6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810fbda:	6021      	str	r1, [r4, #0]
 810fbdc:	f109 0901 	add.w	r9, r9, #1
 810fbe0:	f1bb 0f00 	cmp.w	fp, #0
 810fbe4:	d003      	beq.n	810fbee <_scanf_float+0x15e>
 810fbe6:	3201      	adds	r2, #1
 810fbe8:	f10b 3bff 	add.w	fp, fp, #4294967295
 810fbec:	60a2      	str	r2, [r4, #8]
 810fbee:	68a3      	ldr	r3, [r4, #8]
 810fbf0:	3b01      	subs	r3, #1
 810fbf2:	60a3      	str	r3, [r4, #8]
 810fbf4:	6923      	ldr	r3, [r4, #16]
 810fbf6:	3301      	adds	r3, #1
 810fbf8:	6123      	str	r3, [r4, #16]
 810fbfa:	687b      	ldr	r3, [r7, #4]
 810fbfc:	3b01      	subs	r3, #1
 810fbfe:	2b00      	cmp	r3, #0
 810fc00:	607b      	str	r3, [r7, #4]
 810fc02:	f340 8087 	ble.w	810fd14 <_scanf_float+0x284>
 810fc06:	683b      	ldr	r3, [r7, #0]
 810fc08:	3301      	adds	r3, #1
 810fc0a:	603b      	str	r3, [r7, #0]
 810fc0c:	e765      	b.n	810fada <_scanf_float+0x4a>
 810fc0e:	eb1a 0105 	adds.w	r1, sl, r5
 810fc12:	f47f af6f 	bne.w	810faf4 <_scanf_float+0x64>
 810fc16:	6822      	ldr	r2, [r4, #0]
 810fc18:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810fc1c:	6022      	str	r2, [r4, #0]
 810fc1e:	460d      	mov	r5, r1
 810fc20:	468a      	mov	sl, r1
 810fc22:	f806 3b01 	strb.w	r3, [r6], #1
 810fc26:	e7e2      	b.n	810fbee <_scanf_float+0x15e>
 810fc28:	6822      	ldr	r2, [r4, #0]
 810fc2a:	0610      	lsls	r0, r2, #24
 810fc2c:	f57f af62 	bpl.w	810faf4 <_scanf_float+0x64>
 810fc30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810fc34:	6022      	str	r2, [r4, #0]
 810fc36:	e7f4      	b.n	810fc22 <_scanf_float+0x192>
 810fc38:	f1ba 0f00 	cmp.w	sl, #0
 810fc3c:	d10e      	bne.n	810fc5c <_scanf_float+0x1cc>
 810fc3e:	f1b9 0f00 	cmp.w	r9, #0
 810fc42:	d10e      	bne.n	810fc62 <_scanf_float+0x1d2>
 810fc44:	6822      	ldr	r2, [r4, #0]
 810fc46:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810fc4a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810fc4e:	d108      	bne.n	810fc62 <_scanf_float+0x1d2>
 810fc50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fc54:	6022      	str	r2, [r4, #0]
 810fc56:	f04f 0a01 	mov.w	sl, #1
 810fc5a:	e7e2      	b.n	810fc22 <_scanf_float+0x192>
 810fc5c:	f1ba 0f02 	cmp.w	sl, #2
 810fc60:	d055      	beq.n	810fd0e <_scanf_float+0x27e>
 810fc62:	2d01      	cmp	r5, #1
 810fc64:	d002      	beq.n	810fc6c <_scanf_float+0x1dc>
 810fc66:	2d04      	cmp	r5, #4
 810fc68:	f47f af44 	bne.w	810faf4 <_scanf_float+0x64>
 810fc6c:	3501      	adds	r5, #1
 810fc6e:	b2ed      	uxtb	r5, r5
 810fc70:	e7d7      	b.n	810fc22 <_scanf_float+0x192>
 810fc72:	f1ba 0f01 	cmp.w	sl, #1
 810fc76:	f47f af3d 	bne.w	810faf4 <_scanf_float+0x64>
 810fc7a:	f04f 0a02 	mov.w	sl, #2
 810fc7e:	e7d0      	b.n	810fc22 <_scanf_float+0x192>
 810fc80:	b97d      	cbnz	r5, 810fca2 <_scanf_float+0x212>
 810fc82:	f1b9 0f00 	cmp.w	r9, #0
 810fc86:	f47f af38 	bne.w	810fafa <_scanf_float+0x6a>
 810fc8a:	6822      	ldr	r2, [r4, #0]
 810fc8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810fc90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810fc94:	f040 8108 	bne.w	810fea8 <_scanf_float+0x418>
 810fc98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fc9c:	6022      	str	r2, [r4, #0]
 810fc9e:	2501      	movs	r5, #1
 810fca0:	e7bf      	b.n	810fc22 <_scanf_float+0x192>
 810fca2:	2d03      	cmp	r5, #3
 810fca4:	d0e2      	beq.n	810fc6c <_scanf_float+0x1dc>
 810fca6:	2d05      	cmp	r5, #5
 810fca8:	e7de      	b.n	810fc68 <_scanf_float+0x1d8>
 810fcaa:	2d02      	cmp	r5, #2
 810fcac:	f47f af22 	bne.w	810faf4 <_scanf_float+0x64>
 810fcb0:	2503      	movs	r5, #3
 810fcb2:	e7b6      	b.n	810fc22 <_scanf_float+0x192>
 810fcb4:	2d06      	cmp	r5, #6
 810fcb6:	f47f af1d 	bne.w	810faf4 <_scanf_float+0x64>
 810fcba:	2507      	movs	r5, #7
 810fcbc:	e7b1      	b.n	810fc22 <_scanf_float+0x192>
 810fcbe:	6822      	ldr	r2, [r4, #0]
 810fcc0:	0591      	lsls	r1, r2, #22
 810fcc2:	f57f af17 	bpl.w	810faf4 <_scanf_float+0x64>
 810fcc6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810fcca:	6022      	str	r2, [r4, #0]
 810fccc:	f8cd 9008 	str.w	r9, [sp, #8]
 810fcd0:	e7a7      	b.n	810fc22 <_scanf_float+0x192>
 810fcd2:	6822      	ldr	r2, [r4, #0]
 810fcd4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810fcd8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810fcdc:	d006      	beq.n	810fcec <_scanf_float+0x25c>
 810fcde:	0550      	lsls	r0, r2, #21
 810fce0:	f57f af08 	bpl.w	810faf4 <_scanf_float+0x64>
 810fce4:	f1b9 0f00 	cmp.w	r9, #0
 810fce8:	f000 80de 	beq.w	810fea8 <_scanf_float+0x418>
 810fcec:	0591      	lsls	r1, r2, #22
 810fcee:	bf58      	it	pl
 810fcf0:	9902      	ldrpl	r1, [sp, #8]
 810fcf2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fcf6:	bf58      	it	pl
 810fcf8:	eba9 0101 	subpl.w	r1, r9, r1
 810fcfc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810fd00:	bf58      	it	pl
 810fd02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810fd06:	6022      	str	r2, [r4, #0]
 810fd08:	f04f 0900 	mov.w	r9, #0
 810fd0c:	e789      	b.n	810fc22 <_scanf_float+0x192>
 810fd0e:	f04f 0a03 	mov.w	sl, #3
 810fd12:	e786      	b.n	810fc22 <_scanf_float+0x192>
 810fd14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810fd18:	4639      	mov	r1, r7
 810fd1a:	4640      	mov	r0, r8
 810fd1c:	4798      	blx	r3
 810fd1e:	2800      	cmp	r0, #0
 810fd20:	f43f aedb 	beq.w	810fada <_scanf_float+0x4a>
 810fd24:	e6e6      	b.n	810faf4 <_scanf_float+0x64>
 810fd26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fd2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fd2e:	463a      	mov	r2, r7
 810fd30:	4640      	mov	r0, r8
 810fd32:	4798      	blx	r3
 810fd34:	6923      	ldr	r3, [r4, #16]
 810fd36:	3b01      	subs	r3, #1
 810fd38:	6123      	str	r3, [r4, #16]
 810fd3a:	e6e8      	b.n	810fb0e <_scanf_float+0x7e>
 810fd3c:	1e6b      	subs	r3, r5, #1
 810fd3e:	2b06      	cmp	r3, #6
 810fd40:	d824      	bhi.n	810fd8c <_scanf_float+0x2fc>
 810fd42:	2d02      	cmp	r5, #2
 810fd44:	d836      	bhi.n	810fdb4 <_scanf_float+0x324>
 810fd46:	9b01      	ldr	r3, [sp, #4]
 810fd48:	429e      	cmp	r6, r3
 810fd4a:	f67f aee4 	bls.w	810fb16 <_scanf_float+0x86>
 810fd4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fd52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fd56:	463a      	mov	r2, r7
 810fd58:	4640      	mov	r0, r8
 810fd5a:	4798      	blx	r3
 810fd5c:	6923      	ldr	r3, [r4, #16]
 810fd5e:	3b01      	subs	r3, #1
 810fd60:	6123      	str	r3, [r4, #16]
 810fd62:	e7f0      	b.n	810fd46 <_scanf_float+0x2b6>
 810fd64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fd68:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810fd6c:	463a      	mov	r2, r7
 810fd6e:	4640      	mov	r0, r8
 810fd70:	4798      	blx	r3
 810fd72:	6923      	ldr	r3, [r4, #16]
 810fd74:	3b01      	subs	r3, #1
 810fd76:	6123      	str	r3, [r4, #16]
 810fd78:	f10a 3aff 	add.w	sl, sl, #4294967295
 810fd7c:	fa5f fa8a 	uxtb.w	sl, sl
 810fd80:	f1ba 0f02 	cmp.w	sl, #2
 810fd84:	d1ee      	bne.n	810fd64 <_scanf_float+0x2d4>
 810fd86:	3d03      	subs	r5, #3
 810fd88:	b2ed      	uxtb	r5, r5
 810fd8a:	1b76      	subs	r6, r6, r5
 810fd8c:	6823      	ldr	r3, [r4, #0]
 810fd8e:	05da      	lsls	r2, r3, #23
 810fd90:	d530      	bpl.n	810fdf4 <_scanf_float+0x364>
 810fd92:	055b      	lsls	r3, r3, #21
 810fd94:	d511      	bpl.n	810fdba <_scanf_float+0x32a>
 810fd96:	9b01      	ldr	r3, [sp, #4]
 810fd98:	429e      	cmp	r6, r3
 810fd9a:	f67f aebc 	bls.w	810fb16 <_scanf_float+0x86>
 810fd9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fda2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fda6:	463a      	mov	r2, r7
 810fda8:	4640      	mov	r0, r8
 810fdaa:	4798      	blx	r3
 810fdac:	6923      	ldr	r3, [r4, #16]
 810fdae:	3b01      	subs	r3, #1
 810fdb0:	6123      	str	r3, [r4, #16]
 810fdb2:	e7f0      	b.n	810fd96 <_scanf_float+0x306>
 810fdb4:	46aa      	mov	sl, r5
 810fdb6:	46b3      	mov	fp, r6
 810fdb8:	e7de      	b.n	810fd78 <_scanf_float+0x2e8>
 810fdba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810fdbe:	6923      	ldr	r3, [r4, #16]
 810fdc0:	2965      	cmp	r1, #101	@ 0x65
 810fdc2:	f103 33ff 	add.w	r3, r3, #4294967295
 810fdc6:	f106 35ff 	add.w	r5, r6, #4294967295
 810fdca:	6123      	str	r3, [r4, #16]
 810fdcc:	d00c      	beq.n	810fde8 <_scanf_float+0x358>
 810fdce:	2945      	cmp	r1, #69	@ 0x45
 810fdd0:	d00a      	beq.n	810fde8 <_scanf_float+0x358>
 810fdd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fdd6:	463a      	mov	r2, r7
 810fdd8:	4640      	mov	r0, r8
 810fdda:	4798      	blx	r3
 810fddc:	6923      	ldr	r3, [r4, #16]
 810fdde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810fde2:	3b01      	subs	r3, #1
 810fde4:	1eb5      	subs	r5, r6, #2
 810fde6:	6123      	str	r3, [r4, #16]
 810fde8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fdec:	463a      	mov	r2, r7
 810fdee:	4640      	mov	r0, r8
 810fdf0:	4798      	blx	r3
 810fdf2:	462e      	mov	r6, r5
 810fdf4:	6822      	ldr	r2, [r4, #0]
 810fdf6:	f012 0210 	ands.w	r2, r2, #16
 810fdfa:	d001      	beq.n	810fe00 <_scanf_float+0x370>
 810fdfc:	2000      	movs	r0, #0
 810fdfe:	e68b      	b.n	810fb18 <_scanf_float+0x88>
 810fe00:	7032      	strb	r2, [r6, #0]
 810fe02:	6823      	ldr	r3, [r4, #0]
 810fe04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810fe08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810fe0c:	d11c      	bne.n	810fe48 <_scanf_float+0x3b8>
 810fe0e:	9b02      	ldr	r3, [sp, #8]
 810fe10:	454b      	cmp	r3, r9
 810fe12:	eba3 0209 	sub.w	r2, r3, r9
 810fe16:	d123      	bne.n	810fe60 <_scanf_float+0x3d0>
 810fe18:	9901      	ldr	r1, [sp, #4]
 810fe1a:	2200      	movs	r2, #0
 810fe1c:	4640      	mov	r0, r8
 810fe1e:	f002 fccb 	bl	81127b8 <_strtod_r>
 810fe22:	9b03      	ldr	r3, [sp, #12]
 810fe24:	6821      	ldr	r1, [r4, #0]
 810fe26:	681b      	ldr	r3, [r3, #0]
 810fe28:	f011 0f02 	tst.w	r1, #2
 810fe2c:	ec57 6b10 	vmov	r6, r7, d0
 810fe30:	f103 0204 	add.w	r2, r3, #4
 810fe34:	d01f      	beq.n	810fe76 <_scanf_float+0x3e6>
 810fe36:	9903      	ldr	r1, [sp, #12]
 810fe38:	600a      	str	r2, [r1, #0]
 810fe3a:	681b      	ldr	r3, [r3, #0]
 810fe3c:	e9c3 6700 	strd	r6, r7, [r3]
 810fe40:	68e3      	ldr	r3, [r4, #12]
 810fe42:	3301      	adds	r3, #1
 810fe44:	60e3      	str	r3, [r4, #12]
 810fe46:	e7d9      	b.n	810fdfc <_scanf_float+0x36c>
 810fe48:	9b04      	ldr	r3, [sp, #16]
 810fe4a:	2b00      	cmp	r3, #0
 810fe4c:	d0e4      	beq.n	810fe18 <_scanf_float+0x388>
 810fe4e:	9905      	ldr	r1, [sp, #20]
 810fe50:	230a      	movs	r3, #10
 810fe52:	3101      	adds	r1, #1
 810fe54:	4640      	mov	r0, r8
 810fe56:	f002 fd2f 	bl	81128b8 <_strtol_r>
 810fe5a:	9b04      	ldr	r3, [sp, #16]
 810fe5c:	9e05      	ldr	r6, [sp, #20]
 810fe5e:	1ac2      	subs	r2, r0, r3
 810fe60:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810fe64:	429e      	cmp	r6, r3
 810fe66:	bf28      	it	cs
 810fe68:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810fe6c:	4910      	ldr	r1, [pc, #64]	@ (810feb0 <_scanf_float+0x420>)
 810fe6e:	4630      	mov	r0, r6
 810fe70:	f000 f8f6 	bl	8110060 <siprintf>
 810fe74:	e7d0      	b.n	810fe18 <_scanf_float+0x388>
 810fe76:	f011 0f04 	tst.w	r1, #4
 810fe7a:	9903      	ldr	r1, [sp, #12]
 810fe7c:	600a      	str	r2, [r1, #0]
 810fe7e:	d1dc      	bne.n	810fe3a <_scanf_float+0x3aa>
 810fe80:	681d      	ldr	r5, [r3, #0]
 810fe82:	4632      	mov	r2, r6
 810fe84:	463b      	mov	r3, r7
 810fe86:	4630      	mov	r0, r6
 810fe88:	4639      	mov	r1, r7
 810fe8a:	f7f0 fed7 	bl	8100c3c <__aeabi_dcmpun>
 810fe8e:	b128      	cbz	r0, 810fe9c <_scanf_float+0x40c>
 810fe90:	4808      	ldr	r0, [pc, #32]	@ (810feb4 <_scanf_float+0x424>)
 810fe92:	f000 fa6b 	bl	811036c <nanf>
 810fe96:	ed85 0a00 	vstr	s0, [r5]
 810fe9a:	e7d1      	b.n	810fe40 <_scanf_float+0x3b0>
 810fe9c:	4630      	mov	r0, r6
 810fe9e:	4639      	mov	r1, r7
 810fea0:	f7f0 ff2a 	bl	8100cf8 <__aeabi_d2f>
 810fea4:	6028      	str	r0, [r5, #0]
 810fea6:	e7cb      	b.n	810fe40 <_scanf_float+0x3b0>
 810fea8:	f04f 0900 	mov.w	r9, #0
 810feac:	e629      	b.n	810fb02 <_scanf_float+0x72>
 810feae:	bf00      	nop
 810feb0:	08113a2b 	.word	0x08113a2b
 810feb4:	08113a6b 	.word	0x08113a6b

0810feb8 <std>:
 810feb8:	2300      	movs	r3, #0
 810feba:	b510      	push	{r4, lr}
 810febc:	4604      	mov	r4, r0
 810febe:	e9c0 3300 	strd	r3, r3, [r0]
 810fec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810fec6:	6083      	str	r3, [r0, #8]
 810fec8:	8181      	strh	r1, [r0, #12]
 810feca:	6643      	str	r3, [r0, #100]	@ 0x64
 810fecc:	81c2      	strh	r2, [r0, #14]
 810fece:	6183      	str	r3, [r0, #24]
 810fed0:	4619      	mov	r1, r3
 810fed2:	2208      	movs	r2, #8
 810fed4:	305c      	adds	r0, #92	@ 0x5c
 810fed6:	f000 f9bb 	bl	8110250 <memset>
 810feda:	4b0d      	ldr	r3, [pc, #52]	@ (810ff10 <std+0x58>)
 810fedc:	6263      	str	r3, [r4, #36]	@ 0x24
 810fede:	4b0d      	ldr	r3, [pc, #52]	@ (810ff14 <std+0x5c>)
 810fee0:	62a3      	str	r3, [r4, #40]	@ 0x28
 810fee2:	4b0d      	ldr	r3, [pc, #52]	@ (810ff18 <std+0x60>)
 810fee4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810fee6:	4b0d      	ldr	r3, [pc, #52]	@ (810ff1c <std+0x64>)
 810fee8:	6323      	str	r3, [r4, #48]	@ 0x30
 810feea:	4b0d      	ldr	r3, [pc, #52]	@ (810ff20 <std+0x68>)
 810feec:	6224      	str	r4, [r4, #32]
 810feee:	429c      	cmp	r4, r3
 810fef0:	d006      	beq.n	810ff00 <std+0x48>
 810fef2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810fef6:	4294      	cmp	r4, r2
 810fef8:	d002      	beq.n	810ff00 <std+0x48>
 810fefa:	33d0      	adds	r3, #208	@ 0xd0
 810fefc:	429c      	cmp	r4, r3
 810fefe:	d105      	bne.n	810ff0c <std+0x54>
 810ff00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810ff04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ff08:	f000 ba1e 	b.w	8110348 <__retarget_lock_init_recursive>
 810ff0c:	bd10      	pop	{r4, pc}
 810ff0e:	bf00      	nop
 810ff10:	081100a1 	.word	0x081100a1
 810ff14:	081100c3 	.word	0x081100c3
 810ff18:	081100fb 	.word	0x081100fb
 810ff1c:	0811011f 	.word	0x0811011f
 810ff20:	10008b3c 	.word	0x10008b3c

0810ff24 <stdio_exit_handler>:
 810ff24:	4a02      	ldr	r2, [pc, #8]	@ (810ff30 <stdio_exit_handler+0xc>)
 810ff26:	4903      	ldr	r1, [pc, #12]	@ (810ff34 <stdio_exit_handler+0x10>)
 810ff28:	4803      	ldr	r0, [pc, #12]	@ (810ff38 <stdio_exit_handler+0x14>)
 810ff2a:	f000 b869 	b.w	8110000 <_fwalk_sglue>
 810ff2e:	bf00      	nop
 810ff30:	100000a0 	.word	0x100000a0
 810ff34:	08112ef9 	.word	0x08112ef9
 810ff38:	100000b0 	.word	0x100000b0

0810ff3c <cleanup_stdio>:
 810ff3c:	6841      	ldr	r1, [r0, #4]
 810ff3e:	4b0c      	ldr	r3, [pc, #48]	@ (810ff70 <cleanup_stdio+0x34>)
 810ff40:	4299      	cmp	r1, r3
 810ff42:	b510      	push	{r4, lr}
 810ff44:	4604      	mov	r4, r0
 810ff46:	d001      	beq.n	810ff4c <cleanup_stdio+0x10>
 810ff48:	f002 ffd6 	bl	8112ef8 <_fflush_r>
 810ff4c:	68a1      	ldr	r1, [r4, #8]
 810ff4e:	4b09      	ldr	r3, [pc, #36]	@ (810ff74 <cleanup_stdio+0x38>)
 810ff50:	4299      	cmp	r1, r3
 810ff52:	d002      	beq.n	810ff5a <cleanup_stdio+0x1e>
 810ff54:	4620      	mov	r0, r4
 810ff56:	f002 ffcf 	bl	8112ef8 <_fflush_r>
 810ff5a:	68e1      	ldr	r1, [r4, #12]
 810ff5c:	4b06      	ldr	r3, [pc, #24]	@ (810ff78 <cleanup_stdio+0x3c>)
 810ff5e:	4299      	cmp	r1, r3
 810ff60:	d004      	beq.n	810ff6c <cleanup_stdio+0x30>
 810ff62:	4620      	mov	r0, r4
 810ff64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ff68:	f002 bfc6 	b.w	8112ef8 <_fflush_r>
 810ff6c:	bd10      	pop	{r4, pc}
 810ff6e:	bf00      	nop
 810ff70:	10008b3c 	.word	0x10008b3c
 810ff74:	10008ba4 	.word	0x10008ba4
 810ff78:	10008c0c 	.word	0x10008c0c

0810ff7c <global_stdio_init.part.0>:
 810ff7c:	b510      	push	{r4, lr}
 810ff7e:	4b0b      	ldr	r3, [pc, #44]	@ (810ffac <global_stdio_init.part.0+0x30>)
 810ff80:	4c0b      	ldr	r4, [pc, #44]	@ (810ffb0 <global_stdio_init.part.0+0x34>)
 810ff82:	4a0c      	ldr	r2, [pc, #48]	@ (810ffb4 <global_stdio_init.part.0+0x38>)
 810ff84:	601a      	str	r2, [r3, #0]
 810ff86:	4620      	mov	r0, r4
 810ff88:	2200      	movs	r2, #0
 810ff8a:	2104      	movs	r1, #4
 810ff8c:	f7ff ff94 	bl	810feb8 <std>
 810ff90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810ff94:	2201      	movs	r2, #1
 810ff96:	2109      	movs	r1, #9
 810ff98:	f7ff ff8e 	bl	810feb8 <std>
 810ff9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810ffa0:	2202      	movs	r2, #2
 810ffa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ffa6:	2112      	movs	r1, #18
 810ffa8:	f7ff bf86 	b.w	810feb8 <std>
 810ffac:	10008c74 	.word	0x10008c74
 810ffb0:	10008b3c 	.word	0x10008b3c
 810ffb4:	0810ff25 	.word	0x0810ff25

0810ffb8 <__sfp_lock_acquire>:
 810ffb8:	4801      	ldr	r0, [pc, #4]	@ (810ffc0 <__sfp_lock_acquire+0x8>)
 810ffba:	f000 b9c6 	b.w	811034a <__retarget_lock_acquire_recursive>
 810ffbe:	bf00      	nop
 810ffc0:	10008c7d 	.word	0x10008c7d

0810ffc4 <__sfp_lock_release>:
 810ffc4:	4801      	ldr	r0, [pc, #4]	@ (810ffcc <__sfp_lock_release+0x8>)
 810ffc6:	f000 b9c1 	b.w	811034c <__retarget_lock_release_recursive>
 810ffca:	bf00      	nop
 810ffcc:	10008c7d 	.word	0x10008c7d

0810ffd0 <__sinit>:
 810ffd0:	b510      	push	{r4, lr}
 810ffd2:	4604      	mov	r4, r0
 810ffd4:	f7ff fff0 	bl	810ffb8 <__sfp_lock_acquire>
 810ffd8:	6a23      	ldr	r3, [r4, #32]
 810ffda:	b11b      	cbz	r3, 810ffe4 <__sinit+0x14>
 810ffdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ffe0:	f7ff bff0 	b.w	810ffc4 <__sfp_lock_release>
 810ffe4:	4b04      	ldr	r3, [pc, #16]	@ (810fff8 <__sinit+0x28>)
 810ffe6:	6223      	str	r3, [r4, #32]
 810ffe8:	4b04      	ldr	r3, [pc, #16]	@ (810fffc <__sinit+0x2c>)
 810ffea:	681b      	ldr	r3, [r3, #0]
 810ffec:	2b00      	cmp	r3, #0
 810ffee:	d1f5      	bne.n	810ffdc <__sinit+0xc>
 810fff0:	f7ff ffc4 	bl	810ff7c <global_stdio_init.part.0>
 810fff4:	e7f2      	b.n	810ffdc <__sinit+0xc>
 810fff6:	bf00      	nop
 810fff8:	0810ff3d 	.word	0x0810ff3d
 810fffc:	10008c74 	.word	0x10008c74

08110000 <_fwalk_sglue>:
 8110000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8110004:	4607      	mov	r7, r0
 8110006:	4688      	mov	r8, r1
 8110008:	4614      	mov	r4, r2
 811000a:	2600      	movs	r6, #0
 811000c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8110010:	f1b9 0901 	subs.w	r9, r9, #1
 8110014:	d505      	bpl.n	8110022 <_fwalk_sglue+0x22>
 8110016:	6824      	ldr	r4, [r4, #0]
 8110018:	2c00      	cmp	r4, #0
 811001a:	d1f7      	bne.n	811000c <_fwalk_sglue+0xc>
 811001c:	4630      	mov	r0, r6
 811001e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8110022:	89ab      	ldrh	r3, [r5, #12]
 8110024:	2b01      	cmp	r3, #1
 8110026:	d907      	bls.n	8110038 <_fwalk_sglue+0x38>
 8110028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811002c:	3301      	adds	r3, #1
 811002e:	d003      	beq.n	8110038 <_fwalk_sglue+0x38>
 8110030:	4629      	mov	r1, r5
 8110032:	4638      	mov	r0, r7
 8110034:	47c0      	blx	r8
 8110036:	4306      	orrs	r6, r0
 8110038:	3568      	adds	r5, #104	@ 0x68
 811003a:	e7e9      	b.n	8110010 <_fwalk_sglue+0x10>

0811003c <iprintf>:
 811003c:	b40f      	push	{r0, r1, r2, r3}
 811003e:	b507      	push	{r0, r1, r2, lr}
 8110040:	4906      	ldr	r1, [pc, #24]	@ (811005c <iprintf+0x20>)
 8110042:	ab04      	add	r3, sp, #16
 8110044:	6808      	ldr	r0, [r1, #0]
 8110046:	f853 2b04 	ldr.w	r2, [r3], #4
 811004a:	6881      	ldr	r1, [r0, #8]
 811004c:	9301      	str	r3, [sp, #4]
 811004e:	f002 fdb7 	bl	8112bc0 <_vfiprintf_r>
 8110052:	b003      	add	sp, #12
 8110054:	f85d eb04 	ldr.w	lr, [sp], #4
 8110058:	b004      	add	sp, #16
 811005a:	4770      	bx	lr
 811005c:	100000ac 	.word	0x100000ac

08110060 <siprintf>:
 8110060:	b40e      	push	{r1, r2, r3}
 8110062:	b500      	push	{lr}
 8110064:	b09c      	sub	sp, #112	@ 0x70
 8110066:	ab1d      	add	r3, sp, #116	@ 0x74
 8110068:	9002      	str	r0, [sp, #8]
 811006a:	9006      	str	r0, [sp, #24]
 811006c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8110070:	4809      	ldr	r0, [pc, #36]	@ (8110098 <siprintf+0x38>)
 8110072:	9107      	str	r1, [sp, #28]
 8110074:	9104      	str	r1, [sp, #16]
 8110076:	4909      	ldr	r1, [pc, #36]	@ (811009c <siprintf+0x3c>)
 8110078:	f853 2b04 	ldr.w	r2, [r3], #4
 811007c:	9105      	str	r1, [sp, #20]
 811007e:	6800      	ldr	r0, [r0, #0]
 8110080:	9301      	str	r3, [sp, #4]
 8110082:	a902      	add	r1, sp, #8
 8110084:	f002 fc76 	bl	8112974 <_svfiprintf_r>
 8110088:	9b02      	ldr	r3, [sp, #8]
 811008a:	2200      	movs	r2, #0
 811008c:	701a      	strb	r2, [r3, #0]
 811008e:	b01c      	add	sp, #112	@ 0x70
 8110090:	f85d eb04 	ldr.w	lr, [sp], #4
 8110094:	b003      	add	sp, #12
 8110096:	4770      	bx	lr
 8110098:	100000ac 	.word	0x100000ac
 811009c:	ffff0208 	.word	0xffff0208

081100a0 <__sread>:
 81100a0:	b510      	push	{r4, lr}
 81100a2:	460c      	mov	r4, r1
 81100a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81100a8:	f000 f900 	bl	81102ac <_read_r>
 81100ac:	2800      	cmp	r0, #0
 81100ae:	bfab      	itete	ge
 81100b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 81100b2:	89a3      	ldrhlt	r3, [r4, #12]
 81100b4:	181b      	addge	r3, r3, r0
 81100b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 81100ba:	bfac      	ite	ge
 81100bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 81100be:	81a3      	strhlt	r3, [r4, #12]
 81100c0:	bd10      	pop	{r4, pc}

081100c2 <__swrite>:
 81100c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81100c6:	461f      	mov	r7, r3
 81100c8:	898b      	ldrh	r3, [r1, #12]
 81100ca:	05db      	lsls	r3, r3, #23
 81100cc:	4605      	mov	r5, r0
 81100ce:	460c      	mov	r4, r1
 81100d0:	4616      	mov	r6, r2
 81100d2:	d505      	bpl.n	81100e0 <__swrite+0x1e>
 81100d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81100d8:	2302      	movs	r3, #2
 81100da:	2200      	movs	r2, #0
 81100dc:	f000 f8d4 	bl	8110288 <_lseek_r>
 81100e0:	89a3      	ldrh	r3, [r4, #12]
 81100e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81100e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81100ea:	81a3      	strh	r3, [r4, #12]
 81100ec:	4632      	mov	r2, r6
 81100ee:	463b      	mov	r3, r7
 81100f0:	4628      	mov	r0, r5
 81100f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81100f6:	f000 b8eb 	b.w	81102d0 <_write_r>

081100fa <__sseek>:
 81100fa:	b510      	push	{r4, lr}
 81100fc:	460c      	mov	r4, r1
 81100fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110102:	f000 f8c1 	bl	8110288 <_lseek_r>
 8110106:	1c43      	adds	r3, r0, #1
 8110108:	89a3      	ldrh	r3, [r4, #12]
 811010a:	bf15      	itete	ne
 811010c:	6560      	strne	r0, [r4, #84]	@ 0x54
 811010e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8110112:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8110116:	81a3      	strheq	r3, [r4, #12]
 8110118:	bf18      	it	ne
 811011a:	81a3      	strhne	r3, [r4, #12]
 811011c:	bd10      	pop	{r4, pc}

0811011e <__sclose>:
 811011e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110122:	f000 b8a1 	b.w	8110268 <_close_r>

08110126 <__swbuf_r>:
 8110126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110128:	460e      	mov	r6, r1
 811012a:	4614      	mov	r4, r2
 811012c:	4605      	mov	r5, r0
 811012e:	b118      	cbz	r0, 8110138 <__swbuf_r+0x12>
 8110130:	6a03      	ldr	r3, [r0, #32]
 8110132:	b90b      	cbnz	r3, 8110138 <__swbuf_r+0x12>
 8110134:	f7ff ff4c 	bl	810ffd0 <__sinit>
 8110138:	69a3      	ldr	r3, [r4, #24]
 811013a:	60a3      	str	r3, [r4, #8]
 811013c:	89a3      	ldrh	r3, [r4, #12]
 811013e:	071a      	lsls	r2, r3, #28
 8110140:	d501      	bpl.n	8110146 <__swbuf_r+0x20>
 8110142:	6923      	ldr	r3, [r4, #16]
 8110144:	b943      	cbnz	r3, 8110158 <__swbuf_r+0x32>
 8110146:	4621      	mov	r1, r4
 8110148:	4628      	mov	r0, r5
 811014a:	f000 f82b 	bl	81101a4 <__swsetup_r>
 811014e:	b118      	cbz	r0, 8110158 <__swbuf_r+0x32>
 8110150:	f04f 37ff 	mov.w	r7, #4294967295
 8110154:	4638      	mov	r0, r7
 8110156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8110158:	6823      	ldr	r3, [r4, #0]
 811015a:	6922      	ldr	r2, [r4, #16]
 811015c:	1a98      	subs	r0, r3, r2
 811015e:	6963      	ldr	r3, [r4, #20]
 8110160:	b2f6      	uxtb	r6, r6
 8110162:	4283      	cmp	r3, r0
 8110164:	4637      	mov	r7, r6
 8110166:	dc05      	bgt.n	8110174 <__swbuf_r+0x4e>
 8110168:	4621      	mov	r1, r4
 811016a:	4628      	mov	r0, r5
 811016c:	f002 fec4 	bl	8112ef8 <_fflush_r>
 8110170:	2800      	cmp	r0, #0
 8110172:	d1ed      	bne.n	8110150 <__swbuf_r+0x2a>
 8110174:	68a3      	ldr	r3, [r4, #8]
 8110176:	3b01      	subs	r3, #1
 8110178:	60a3      	str	r3, [r4, #8]
 811017a:	6823      	ldr	r3, [r4, #0]
 811017c:	1c5a      	adds	r2, r3, #1
 811017e:	6022      	str	r2, [r4, #0]
 8110180:	701e      	strb	r6, [r3, #0]
 8110182:	6962      	ldr	r2, [r4, #20]
 8110184:	1c43      	adds	r3, r0, #1
 8110186:	429a      	cmp	r2, r3
 8110188:	d004      	beq.n	8110194 <__swbuf_r+0x6e>
 811018a:	89a3      	ldrh	r3, [r4, #12]
 811018c:	07db      	lsls	r3, r3, #31
 811018e:	d5e1      	bpl.n	8110154 <__swbuf_r+0x2e>
 8110190:	2e0a      	cmp	r6, #10
 8110192:	d1df      	bne.n	8110154 <__swbuf_r+0x2e>
 8110194:	4621      	mov	r1, r4
 8110196:	4628      	mov	r0, r5
 8110198:	f002 feae 	bl	8112ef8 <_fflush_r>
 811019c:	2800      	cmp	r0, #0
 811019e:	d0d9      	beq.n	8110154 <__swbuf_r+0x2e>
 81101a0:	e7d6      	b.n	8110150 <__swbuf_r+0x2a>
	...

081101a4 <__swsetup_r>:
 81101a4:	b538      	push	{r3, r4, r5, lr}
 81101a6:	4b29      	ldr	r3, [pc, #164]	@ (811024c <__swsetup_r+0xa8>)
 81101a8:	4605      	mov	r5, r0
 81101aa:	6818      	ldr	r0, [r3, #0]
 81101ac:	460c      	mov	r4, r1
 81101ae:	b118      	cbz	r0, 81101b8 <__swsetup_r+0x14>
 81101b0:	6a03      	ldr	r3, [r0, #32]
 81101b2:	b90b      	cbnz	r3, 81101b8 <__swsetup_r+0x14>
 81101b4:	f7ff ff0c 	bl	810ffd0 <__sinit>
 81101b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81101bc:	0719      	lsls	r1, r3, #28
 81101be:	d422      	bmi.n	8110206 <__swsetup_r+0x62>
 81101c0:	06da      	lsls	r2, r3, #27
 81101c2:	d407      	bmi.n	81101d4 <__swsetup_r+0x30>
 81101c4:	2209      	movs	r2, #9
 81101c6:	602a      	str	r2, [r5, #0]
 81101c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81101cc:	81a3      	strh	r3, [r4, #12]
 81101ce:	f04f 30ff 	mov.w	r0, #4294967295
 81101d2:	e033      	b.n	811023c <__swsetup_r+0x98>
 81101d4:	0758      	lsls	r0, r3, #29
 81101d6:	d512      	bpl.n	81101fe <__swsetup_r+0x5a>
 81101d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81101da:	b141      	cbz	r1, 81101ee <__swsetup_r+0x4a>
 81101dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81101e0:	4299      	cmp	r1, r3
 81101e2:	d002      	beq.n	81101ea <__swsetup_r+0x46>
 81101e4:	4628      	mov	r0, r5
 81101e6:	f000 ff33 	bl	8111050 <_free_r>
 81101ea:	2300      	movs	r3, #0
 81101ec:	6363      	str	r3, [r4, #52]	@ 0x34
 81101ee:	89a3      	ldrh	r3, [r4, #12]
 81101f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 81101f4:	81a3      	strh	r3, [r4, #12]
 81101f6:	2300      	movs	r3, #0
 81101f8:	6063      	str	r3, [r4, #4]
 81101fa:	6923      	ldr	r3, [r4, #16]
 81101fc:	6023      	str	r3, [r4, #0]
 81101fe:	89a3      	ldrh	r3, [r4, #12]
 8110200:	f043 0308 	orr.w	r3, r3, #8
 8110204:	81a3      	strh	r3, [r4, #12]
 8110206:	6923      	ldr	r3, [r4, #16]
 8110208:	b94b      	cbnz	r3, 811021e <__swsetup_r+0x7a>
 811020a:	89a3      	ldrh	r3, [r4, #12]
 811020c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8110210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8110214:	d003      	beq.n	811021e <__swsetup_r+0x7a>
 8110216:	4621      	mov	r1, r4
 8110218:	4628      	mov	r0, r5
 811021a:	f002 fecd 	bl	8112fb8 <__smakebuf_r>
 811021e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110222:	f013 0201 	ands.w	r2, r3, #1
 8110226:	d00a      	beq.n	811023e <__swsetup_r+0x9a>
 8110228:	2200      	movs	r2, #0
 811022a:	60a2      	str	r2, [r4, #8]
 811022c:	6962      	ldr	r2, [r4, #20]
 811022e:	4252      	negs	r2, r2
 8110230:	61a2      	str	r2, [r4, #24]
 8110232:	6922      	ldr	r2, [r4, #16]
 8110234:	b942      	cbnz	r2, 8110248 <__swsetup_r+0xa4>
 8110236:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 811023a:	d1c5      	bne.n	81101c8 <__swsetup_r+0x24>
 811023c:	bd38      	pop	{r3, r4, r5, pc}
 811023e:	0799      	lsls	r1, r3, #30
 8110240:	bf58      	it	pl
 8110242:	6962      	ldrpl	r2, [r4, #20]
 8110244:	60a2      	str	r2, [r4, #8]
 8110246:	e7f4      	b.n	8110232 <__swsetup_r+0x8e>
 8110248:	2000      	movs	r0, #0
 811024a:	e7f7      	b.n	811023c <__swsetup_r+0x98>
 811024c:	100000ac 	.word	0x100000ac

08110250 <memset>:
 8110250:	4402      	add	r2, r0
 8110252:	4603      	mov	r3, r0
 8110254:	4293      	cmp	r3, r2
 8110256:	d100      	bne.n	811025a <memset+0xa>
 8110258:	4770      	bx	lr
 811025a:	f803 1b01 	strb.w	r1, [r3], #1
 811025e:	e7f9      	b.n	8110254 <memset+0x4>

08110260 <_localeconv_r>:
 8110260:	4800      	ldr	r0, [pc, #0]	@ (8110264 <_localeconv_r+0x4>)
 8110262:	4770      	bx	lr
 8110264:	100001ec 	.word	0x100001ec

08110268 <_close_r>:
 8110268:	b538      	push	{r3, r4, r5, lr}
 811026a:	4d06      	ldr	r5, [pc, #24]	@ (8110284 <_close_r+0x1c>)
 811026c:	2300      	movs	r3, #0
 811026e:	4604      	mov	r4, r0
 8110270:	4608      	mov	r0, r1
 8110272:	602b      	str	r3, [r5, #0]
 8110274:	f7f3 ff6e 	bl	8104154 <_close>
 8110278:	1c43      	adds	r3, r0, #1
 811027a:	d102      	bne.n	8110282 <_close_r+0x1a>
 811027c:	682b      	ldr	r3, [r5, #0]
 811027e:	b103      	cbz	r3, 8110282 <_close_r+0x1a>
 8110280:	6023      	str	r3, [r4, #0]
 8110282:	bd38      	pop	{r3, r4, r5, pc}
 8110284:	10008c78 	.word	0x10008c78

08110288 <_lseek_r>:
 8110288:	b538      	push	{r3, r4, r5, lr}
 811028a:	4d07      	ldr	r5, [pc, #28]	@ (81102a8 <_lseek_r+0x20>)
 811028c:	4604      	mov	r4, r0
 811028e:	4608      	mov	r0, r1
 8110290:	4611      	mov	r1, r2
 8110292:	2200      	movs	r2, #0
 8110294:	602a      	str	r2, [r5, #0]
 8110296:	461a      	mov	r2, r3
 8110298:	f7f3 ff83 	bl	81041a2 <_lseek>
 811029c:	1c43      	adds	r3, r0, #1
 811029e:	d102      	bne.n	81102a6 <_lseek_r+0x1e>
 81102a0:	682b      	ldr	r3, [r5, #0]
 81102a2:	b103      	cbz	r3, 81102a6 <_lseek_r+0x1e>
 81102a4:	6023      	str	r3, [r4, #0]
 81102a6:	bd38      	pop	{r3, r4, r5, pc}
 81102a8:	10008c78 	.word	0x10008c78

081102ac <_read_r>:
 81102ac:	b538      	push	{r3, r4, r5, lr}
 81102ae:	4d07      	ldr	r5, [pc, #28]	@ (81102cc <_read_r+0x20>)
 81102b0:	4604      	mov	r4, r0
 81102b2:	4608      	mov	r0, r1
 81102b4:	4611      	mov	r1, r2
 81102b6:	2200      	movs	r2, #0
 81102b8:	602a      	str	r2, [r5, #0]
 81102ba:	461a      	mov	r2, r3
 81102bc:	f7f3 ff2b 	bl	8104116 <_read>
 81102c0:	1c43      	adds	r3, r0, #1
 81102c2:	d102      	bne.n	81102ca <_read_r+0x1e>
 81102c4:	682b      	ldr	r3, [r5, #0]
 81102c6:	b103      	cbz	r3, 81102ca <_read_r+0x1e>
 81102c8:	6023      	str	r3, [r4, #0]
 81102ca:	bd38      	pop	{r3, r4, r5, pc}
 81102cc:	10008c78 	.word	0x10008c78

081102d0 <_write_r>:
 81102d0:	b538      	push	{r3, r4, r5, lr}
 81102d2:	4d07      	ldr	r5, [pc, #28]	@ (81102f0 <_write_r+0x20>)
 81102d4:	4604      	mov	r4, r0
 81102d6:	4608      	mov	r0, r1
 81102d8:	4611      	mov	r1, r2
 81102da:	2200      	movs	r2, #0
 81102dc:	602a      	str	r2, [r5, #0]
 81102de:	461a      	mov	r2, r3
 81102e0:	f7f3 fb4e 	bl	8103980 <_write>
 81102e4:	1c43      	adds	r3, r0, #1
 81102e6:	d102      	bne.n	81102ee <_write_r+0x1e>
 81102e8:	682b      	ldr	r3, [r5, #0]
 81102ea:	b103      	cbz	r3, 81102ee <_write_r+0x1e>
 81102ec:	6023      	str	r3, [r4, #0]
 81102ee:	bd38      	pop	{r3, r4, r5, pc}
 81102f0:	10008c78 	.word	0x10008c78

081102f4 <__errno>:
 81102f4:	4b01      	ldr	r3, [pc, #4]	@ (81102fc <__errno+0x8>)
 81102f6:	6818      	ldr	r0, [r3, #0]
 81102f8:	4770      	bx	lr
 81102fa:	bf00      	nop
 81102fc:	100000ac 	.word	0x100000ac

08110300 <__libc_init_array>:
 8110300:	b570      	push	{r4, r5, r6, lr}
 8110302:	4d0d      	ldr	r5, [pc, #52]	@ (8110338 <__libc_init_array+0x38>)
 8110304:	4c0d      	ldr	r4, [pc, #52]	@ (811033c <__libc_init_array+0x3c>)
 8110306:	1b64      	subs	r4, r4, r5
 8110308:	10a4      	asrs	r4, r4, #2
 811030a:	2600      	movs	r6, #0
 811030c:	42a6      	cmp	r6, r4
 811030e:	d109      	bne.n	8110324 <__libc_init_array+0x24>
 8110310:	4d0b      	ldr	r5, [pc, #44]	@ (8110340 <__libc_init_array+0x40>)
 8110312:	4c0c      	ldr	r4, [pc, #48]	@ (8110344 <__libc_init_array+0x44>)
 8110314:	f003 fae0 	bl	81138d8 <_init>
 8110318:	1b64      	subs	r4, r4, r5
 811031a:	10a4      	asrs	r4, r4, #2
 811031c:	2600      	movs	r6, #0
 811031e:	42a6      	cmp	r6, r4
 8110320:	d105      	bne.n	811032e <__libc_init_array+0x2e>
 8110322:	bd70      	pop	{r4, r5, r6, pc}
 8110324:	f855 3b04 	ldr.w	r3, [r5], #4
 8110328:	4798      	blx	r3
 811032a:	3601      	adds	r6, #1
 811032c:	e7ee      	b.n	811030c <__libc_init_array+0xc>
 811032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8110332:	4798      	blx	r3
 8110334:	3601      	adds	r6, #1
 8110336:	e7f2      	b.n	811031e <__libc_init_array+0x1e>
 8110338:	08113e14 	.word	0x08113e14
 811033c:	08113e14 	.word	0x08113e14
 8110340:	08113e14 	.word	0x08113e14
 8110344:	08113e18 	.word	0x08113e18

08110348 <__retarget_lock_init_recursive>:
 8110348:	4770      	bx	lr

0811034a <__retarget_lock_acquire_recursive>:
 811034a:	4770      	bx	lr

0811034c <__retarget_lock_release_recursive>:
 811034c:	4770      	bx	lr

0811034e <memcpy>:
 811034e:	440a      	add	r2, r1
 8110350:	4291      	cmp	r1, r2
 8110352:	f100 33ff 	add.w	r3, r0, #4294967295
 8110356:	d100      	bne.n	811035a <memcpy+0xc>
 8110358:	4770      	bx	lr
 811035a:	b510      	push	{r4, lr}
 811035c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8110360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8110364:	4291      	cmp	r1, r2
 8110366:	d1f9      	bne.n	811035c <memcpy+0xe>
 8110368:	bd10      	pop	{r4, pc}
	...

0811036c <nanf>:
 811036c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8110374 <nanf+0x8>
 8110370:	4770      	bx	lr
 8110372:	bf00      	nop
 8110374:	7fc00000 	.word	0x7fc00000

08110378 <__assert_func>:
 8110378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811037a:	4614      	mov	r4, r2
 811037c:	461a      	mov	r2, r3
 811037e:	4b09      	ldr	r3, [pc, #36]	@ (81103a4 <__assert_func+0x2c>)
 8110380:	681b      	ldr	r3, [r3, #0]
 8110382:	4605      	mov	r5, r0
 8110384:	68d8      	ldr	r0, [r3, #12]
 8110386:	b954      	cbnz	r4, 811039e <__assert_func+0x26>
 8110388:	4b07      	ldr	r3, [pc, #28]	@ (81103a8 <__assert_func+0x30>)
 811038a:	461c      	mov	r4, r3
 811038c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8110390:	9100      	str	r1, [sp, #0]
 8110392:	462b      	mov	r3, r5
 8110394:	4905      	ldr	r1, [pc, #20]	@ (81103ac <__assert_func+0x34>)
 8110396:	f002 fdd7 	bl	8112f48 <fiprintf>
 811039a:	f002 feb1 	bl	8113100 <abort>
 811039e:	4b04      	ldr	r3, [pc, #16]	@ (81103b0 <__assert_func+0x38>)
 81103a0:	e7f4      	b.n	811038c <__assert_func+0x14>
 81103a2:	bf00      	nop
 81103a4:	100000ac 	.word	0x100000ac
 81103a8:	08113a6b 	.word	0x08113a6b
 81103ac:	08113a3d 	.word	0x08113a3d
 81103b0:	08113a30 	.word	0x08113a30

081103b4 <quorem>:
 81103b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81103b8:	6903      	ldr	r3, [r0, #16]
 81103ba:	690c      	ldr	r4, [r1, #16]
 81103bc:	42a3      	cmp	r3, r4
 81103be:	4607      	mov	r7, r0
 81103c0:	db7e      	blt.n	81104c0 <quorem+0x10c>
 81103c2:	3c01      	subs	r4, #1
 81103c4:	f101 0814 	add.w	r8, r1, #20
 81103c8:	00a3      	lsls	r3, r4, #2
 81103ca:	f100 0514 	add.w	r5, r0, #20
 81103ce:	9300      	str	r3, [sp, #0]
 81103d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81103d4:	9301      	str	r3, [sp, #4]
 81103d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81103da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81103de:	3301      	adds	r3, #1
 81103e0:	429a      	cmp	r2, r3
 81103e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81103e6:	fbb2 f6f3 	udiv	r6, r2, r3
 81103ea:	d32e      	bcc.n	811044a <quorem+0x96>
 81103ec:	f04f 0a00 	mov.w	sl, #0
 81103f0:	46c4      	mov	ip, r8
 81103f2:	46ae      	mov	lr, r5
 81103f4:	46d3      	mov	fp, sl
 81103f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 81103fa:	b298      	uxth	r0, r3
 81103fc:	fb06 a000 	mla	r0, r6, r0, sl
 8110400:	0c02      	lsrs	r2, r0, #16
 8110402:	0c1b      	lsrs	r3, r3, #16
 8110404:	fb06 2303 	mla	r3, r6, r3, r2
 8110408:	f8de 2000 	ldr.w	r2, [lr]
 811040c:	b280      	uxth	r0, r0
 811040e:	b292      	uxth	r2, r2
 8110410:	1a12      	subs	r2, r2, r0
 8110412:	445a      	add	r2, fp
 8110414:	f8de 0000 	ldr.w	r0, [lr]
 8110418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 811041c:	b29b      	uxth	r3, r3
 811041e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8110422:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8110426:	b292      	uxth	r2, r2
 8110428:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 811042c:	45e1      	cmp	r9, ip
 811042e:	f84e 2b04 	str.w	r2, [lr], #4
 8110432:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8110436:	d2de      	bcs.n	81103f6 <quorem+0x42>
 8110438:	9b00      	ldr	r3, [sp, #0]
 811043a:	58eb      	ldr	r3, [r5, r3]
 811043c:	b92b      	cbnz	r3, 811044a <quorem+0x96>
 811043e:	9b01      	ldr	r3, [sp, #4]
 8110440:	3b04      	subs	r3, #4
 8110442:	429d      	cmp	r5, r3
 8110444:	461a      	mov	r2, r3
 8110446:	d32f      	bcc.n	81104a8 <quorem+0xf4>
 8110448:	613c      	str	r4, [r7, #16]
 811044a:	4638      	mov	r0, r7
 811044c:	f001 f9c4 	bl	81117d8 <__mcmp>
 8110450:	2800      	cmp	r0, #0
 8110452:	db25      	blt.n	81104a0 <quorem+0xec>
 8110454:	4629      	mov	r1, r5
 8110456:	2000      	movs	r0, #0
 8110458:	f858 2b04 	ldr.w	r2, [r8], #4
 811045c:	f8d1 c000 	ldr.w	ip, [r1]
 8110460:	fa1f fe82 	uxth.w	lr, r2
 8110464:	fa1f f38c 	uxth.w	r3, ip
 8110468:	eba3 030e 	sub.w	r3, r3, lr
 811046c:	4403      	add	r3, r0
 811046e:	0c12      	lsrs	r2, r2, #16
 8110470:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8110474:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8110478:	b29b      	uxth	r3, r3
 811047a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 811047e:	45c1      	cmp	r9, r8
 8110480:	f841 3b04 	str.w	r3, [r1], #4
 8110484:	ea4f 4022 	mov.w	r0, r2, asr #16
 8110488:	d2e6      	bcs.n	8110458 <quorem+0xa4>
 811048a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 811048e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8110492:	b922      	cbnz	r2, 811049e <quorem+0xea>
 8110494:	3b04      	subs	r3, #4
 8110496:	429d      	cmp	r5, r3
 8110498:	461a      	mov	r2, r3
 811049a:	d30b      	bcc.n	81104b4 <quorem+0x100>
 811049c:	613c      	str	r4, [r7, #16]
 811049e:	3601      	adds	r6, #1
 81104a0:	4630      	mov	r0, r6
 81104a2:	b003      	add	sp, #12
 81104a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81104a8:	6812      	ldr	r2, [r2, #0]
 81104aa:	3b04      	subs	r3, #4
 81104ac:	2a00      	cmp	r2, #0
 81104ae:	d1cb      	bne.n	8110448 <quorem+0x94>
 81104b0:	3c01      	subs	r4, #1
 81104b2:	e7c6      	b.n	8110442 <quorem+0x8e>
 81104b4:	6812      	ldr	r2, [r2, #0]
 81104b6:	3b04      	subs	r3, #4
 81104b8:	2a00      	cmp	r2, #0
 81104ba:	d1ef      	bne.n	811049c <quorem+0xe8>
 81104bc:	3c01      	subs	r4, #1
 81104be:	e7ea      	b.n	8110496 <quorem+0xe2>
 81104c0:	2000      	movs	r0, #0
 81104c2:	e7ee      	b.n	81104a2 <quorem+0xee>
 81104c4:	0000      	movs	r0, r0
	...

081104c8 <_dtoa_r>:
 81104c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81104cc:	69c7      	ldr	r7, [r0, #28]
 81104ce:	b099      	sub	sp, #100	@ 0x64
 81104d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 81104d4:	ec55 4b10 	vmov	r4, r5, d0
 81104d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 81104da:	9109      	str	r1, [sp, #36]	@ 0x24
 81104dc:	4683      	mov	fp, r0
 81104de:	920e      	str	r2, [sp, #56]	@ 0x38
 81104e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 81104e2:	b97f      	cbnz	r7, 8110504 <_dtoa_r+0x3c>
 81104e4:	2010      	movs	r0, #16
 81104e6:	f000 fdfd 	bl	81110e4 <malloc>
 81104ea:	4602      	mov	r2, r0
 81104ec:	f8cb 001c 	str.w	r0, [fp, #28]
 81104f0:	b920      	cbnz	r0, 81104fc <_dtoa_r+0x34>
 81104f2:	4ba7      	ldr	r3, [pc, #668]	@ (8110790 <_dtoa_r+0x2c8>)
 81104f4:	21ef      	movs	r1, #239	@ 0xef
 81104f6:	48a7      	ldr	r0, [pc, #668]	@ (8110794 <_dtoa_r+0x2cc>)
 81104f8:	f7ff ff3e 	bl	8110378 <__assert_func>
 81104fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8110500:	6007      	str	r7, [r0, #0]
 8110502:	60c7      	str	r7, [r0, #12]
 8110504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8110508:	6819      	ldr	r1, [r3, #0]
 811050a:	b159      	cbz	r1, 8110524 <_dtoa_r+0x5c>
 811050c:	685a      	ldr	r2, [r3, #4]
 811050e:	604a      	str	r2, [r1, #4]
 8110510:	2301      	movs	r3, #1
 8110512:	4093      	lsls	r3, r2
 8110514:	608b      	str	r3, [r1, #8]
 8110516:	4658      	mov	r0, fp
 8110518:	f000 feda 	bl	81112d0 <_Bfree>
 811051c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8110520:	2200      	movs	r2, #0
 8110522:	601a      	str	r2, [r3, #0]
 8110524:	1e2b      	subs	r3, r5, #0
 8110526:	bfb9      	ittee	lt
 8110528:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 811052c:	9303      	strlt	r3, [sp, #12]
 811052e:	2300      	movge	r3, #0
 8110530:	6033      	strge	r3, [r6, #0]
 8110532:	9f03      	ldr	r7, [sp, #12]
 8110534:	4b98      	ldr	r3, [pc, #608]	@ (8110798 <_dtoa_r+0x2d0>)
 8110536:	bfbc      	itt	lt
 8110538:	2201      	movlt	r2, #1
 811053a:	6032      	strlt	r2, [r6, #0]
 811053c:	43bb      	bics	r3, r7
 811053e:	d112      	bne.n	8110566 <_dtoa_r+0x9e>
 8110540:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8110542:	f242 730f 	movw	r3, #9999	@ 0x270f
 8110546:	6013      	str	r3, [r2, #0]
 8110548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 811054c:	4323      	orrs	r3, r4
 811054e:	f000 854d 	beq.w	8110fec <_dtoa_r+0xb24>
 8110552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8110554:	f8df a254 	ldr.w	sl, [pc, #596]	@ 81107ac <_dtoa_r+0x2e4>
 8110558:	2b00      	cmp	r3, #0
 811055a:	f000 854f 	beq.w	8110ffc <_dtoa_r+0xb34>
 811055e:	f10a 0303 	add.w	r3, sl, #3
 8110562:	f000 bd49 	b.w	8110ff8 <_dtoa_r+0xb30>
 8110566:	ed9d 7b02 	vldr	d7, [sp, #8]
 811056a:	2200      	movs	r2, #0
 811056c:	ec51 0b17 	vmov	r0, r1, d7
 8110570:	2300      	movs	r3, #0
 8110572:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8110576:	f7f0 fb2f 	bl	8100bd8 <__aeabi_dcmpeq>
 811057a:	4680      	mov	r8, r0
 811057c:	b158      	cbz	r0, 8110596 <_dtoa_r+0xce>
 811057e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8110580:	2301      	movs	r3, #1
 8110582:	6013      	str	r3, [r2, #0]
 8110584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8110586:	b113      	cbz	r3, 811058e <_dtoa_r+0xc6>
 8110588:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 811058a:	4b84      	ldr	r3, [pc, #528]	@ (811079c <_dtoa_r+0x2d4>)
 811058c:	6013      	str	r3, [r2, #0]
 811058e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 81107b0 <_dtoa_r+0x2e8>
 8110592:	f000 bd33 	b.w	8110ffc <_dtoa_r+0xb34>
 8110596:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 811059a:	aa16      	add	r2, sp, #88	@ 0x58
 811059c:	a917      	add	r1, sp, #92	@ 0x5c
 811059e:	4658      	mov	r0, fp
 81105a0:	f001 fa3a 	bl	8111a18 <__d2b>
 81105a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 81105a8:	4681      	mov	r9, r0
 81105aa:	2e00      	cmp	r6, #0
 81105ac:	d077      	beq.n	811069e <_dtoa_r+0x1d6>
 81105ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81105b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 81105b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81105b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81105bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 81105c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 81105c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 81105c8:	4619      	mov	r1, r3
 81105ca:	2200      	movs	r2, #0
 81105cc:	4b74      	ldr	r3, [pc, #464]	@ (81107a0 <_dtoa_r+0x2d8>)
 81105ce:	f7ef fee3 	bl	8100398 <__aeabi_dsub>
 81105d2:	a369      	add	r3, pc, #420	@ (adr r3, 8110778 <_dtoa_r+0x2b0>)
 81105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105d8:	f7f0 f896 	bl	8100708 <__aeabi_dmul>
 81105dc:	a368      	add	r3, pc, #416	@ (adr r3, 8110780 <_dtoa_r+0x2b8>)
 81105de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105e2:	f7ef fedb 	bl	810039c <__adddf3>
 81105e6:	4604      	mov	r4, r0
 81105e8:	4630      	mov	r0, r6
 81105ea:	460d      	mov	r5, r1
 81105ec:	f7f0 f822 	bl	8100634 <__aeabi_i2d>
 81105f0:	a365      	add	r3, pc, #404	@ (adr r3, 8110788 <_dtoa_r+0x2c0>)
 81105f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105f6:	f7f0 f887 	bl	8100708 <__aeabi_dmul>
 81105fa:	4602      	mov	r2, r0
 81105fc:	460b      	mov	r3, r1
 81105fe:	4620      	mov	r0, r4
 8110600:	4629      	mov	r1, r5
 8110602:	f7ef fecb 	bl	810039c <__adddf3>
 8110606:	4604      	mov	r4, r0
 8110608:	460d      	mov	r5, r1
 811060a:	f7f0 fb2d 	bl	8100c68 <__aeabi_d2iz>
 811060e:	2200      	movs	r2, #0
 8110610:	4607      	mov	r7, r0
 8110612:	2300      	movs	r3, #0
 8110614:	4620      	mov	r0, r4
 8110616:	4629      	mov	r1, r5
 8110618:	f7f0 fae8 	bl	8100bec <__aeabi_dcmplt>
 811061c:	b140      	cbz	r0, 8110630 <_dtoa_r+0x168>
 811061e:	4638      	mov	r0, r7
 8110620:	f7f0 f808 	bl	8100634 <__aeabi_i2d>
 8110624:	4622      	mov	r2, r4
 8110626:	462b      	mov	r3, r5
 8110628:	f7f0 fad6 	bl	8100bd8 <__aeabi_dcmpeq>
 811062c:	b900      	cbnz	r0, 8110630 <_dtoa_r+0x168>
 811062e:	3f01      	subs	r7, #1
 8110630:	2f16      	cmp	r7, #22
 8110632:	d851      	bhi.n	81106d8 <_dtoa_r+0x210>
 8110634:	4b5b      	ldr	r3, [pc, #364]	@ (81107a4 <_dtoa_r+0x2dc>)
 8110636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 811063a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811063e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8110642:	f7f0 fad3 	bl	8100bec <__aeabi_dcmplt>
 8110646:	2800      	cmp	r0, #0
 8110648:	d048      	beq.n	81106dc <_dtoa_r+0x214>
 811064a:	3f01      	subs	r7, #1
 811064c:	2300      	movs	r3, #0
 811064e:	9312      	str	r3, [sp, #72]	@ 0x48
 8110650:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8110652:	1b9b      	subs	r3, r3, r6
 8110654:	1e5a      	subs	r2, r3, #1
 8110656:	bf44      	itt	mi
 8110658:	f1c3 0801 	rsbmi	r8, r3, #1
 811065c:	2300      	movmi	r3, #0
 811065e:	9208      	str	r2, [sp, #32]
 8110660:	bf54      	ite	pl
 8110662:	f04f 0800 	movpl.w	r8, #0
 8110666:	9308      	strmi	r3, [sp, #32]
 8110668:	2f00      	cmp	r7, #0
 811066a:	db39      	blt.n	81106e0 <_dtoa_r+0x218>
 811066c:	9b08      	ldr	r3, [sp, #32]
 811066e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8110670:	443b      	add	r3, r7
 8110672:	9308      	str	r3, [sp, #32]
 8110674:	2300      	movs	r3, #0
 8110676:	930a      	str	r3, [sp, #40]	@ 0x28
 8110678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811067a:	2b09      	cmp	r3, #9
 811067c:	d864      	bhi.n	8110748 <_dtoa_r+0x280>
 811067e:	2b05      	cmp	r3, #5
 8110680:	bfc4      	itt	gt
 8110682:	3b04      	subgt	r3, #4
 8110684:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8110686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110688:	f1a3 0302 	sub.w	r3, r3, #2
 811068c:	bfcc      	ite	gt
 811068e:	2400      	movgt	r4, #0
 8110690:	2401      	movle	r4, #1
 8110692:	2b03      	cmp	r3, #3
 8110694:	d863      	bhi.n	811075e <_dtoa_r+0x296>
 8110696:	e8df f003 	tbb	[pc, r3]
 811069a:	372a      	.short	0x372a
 811069c:	5535      	.short	0x5535
 811069e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 81106a2:	441e      	add	r6, r3
 81106a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 81106a8:	2b20      	cmp	r3, #32
 81106aa:	bfc1      	itttt	gt
 81106ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 81106b0:	409f      	lslgt	r7, r3
 81106b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 81106b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 81106ba:	bfd6      	itet	le
 81106bc:	f1c3 0320 	rsble	r3, r3, #32
 81106c0:	ea47 0003 	orrgt.w	r0, r7, r3
 81106c4:	fa04 f003 	lslle.w	r0, r4, r3
 81106c8:	f7ef ffa4 	bl	8100614 <__aeabi_ui2d>
 81106cc:	2201      	movs	r2, #1
 81106ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 81106d2:	3e01      	subs	r6, #1
 81106d4:	9214      	str	r2, [sp, #80]	@ 0x50
 81106d6:	e777      	b.n	81105c8 <_dtoa_r+0x100>
 81106d8:	2301      	movs	r3, #1
 81106da:	e7b8      	b.n	811064e <_dtoa_r+0x186>
 81106dc:	9012      	str	r0, [sp, #72]	@ 0x48
 81106de:	e7b7      	b.n	8110650 <_dtoa_r+0x188>
 81106e0:	427b      	negs	r3, r7
 81106e2:	930a      	str	r3, [sp, #40]	@ 0x28
 81106e4:	2300      	movs	r3, #0
 81106e6:	eba8 0807 	sub.w	r8, r8, r7
 81106ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 81106ec:	e7c4      	b.n	8110678 <_dtoa_r+0x1b0>
 81106ee:	2300      	movs	r3, #0
 81106f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 81106f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81106f4:	2b00      	cmp	r3, #0
 81106f6:	dc35      	bgt.n	8110764 <_dtoa_r+0x29c>
 81106f8:	2301      	movs	r3, #1
 81106fa:	9300      	str	r3, [sp, #0]
 81106fc:	9307      	str	r3, [sp, #28]
 81106fe:	461a      	mov	r2, r3
 8110700:	920e      	str	r2, [sp, #56]	@ 0x38
 8110702:	e00b      	b.n	811071c <_dtoa_r+0x254>
 8110704:	2301      	movs	r3, #1
 8110706:	e7f3      	b.n	81106f0 <_dtoa_r+0x228>
 8110708:	2300      	movs	r3, #0
 811070a:	930b      	str	r3, [sp, #44]	@ 0x2c
 811070c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811070e:	18fb      	adds	r3, r7, r3
 8110710:	9300      	str	r3, [sp, #0]
 8110712:	3301      	adds	r3, #1
 8110714:	2b01      	cmp	r3, #1
 8110716:	9307      	str	r3, [sp, #28]
 8110718:	bfb8      	it	lt
 811071a:	2301      	movlt	r3, #1
 811071c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8110720:	2100      	movs	r1, #0
 8110722:	2204      	movs	r2, #4
 8110724:	f102 0514 	add.w	r5, r2, #20
 8110728:	429d      	cmp	r5, r3
 811072a:	d91f      	bls.n	811076c <_dtoa_r+0x2a4>
 811072c:	6041      	str	r1, [r0, #4]
 811072e:	4658      	mov	r0, fp
 8110730:	f000 fd8e 	bl	8111250 <_Balloc>
 8110734:	4682      	mov	sl, r0
 8110736:	2800      	cmp	r0, #0
 8110738:	d13c      	bne.n	81107b4 <_dtoa_r+0x2ec>
 811073a:	4b1b      	ldr	r3, [pc, #108]	@ (81107a8 <_dtoa_r+0x2e0>)
 811073c:	4602      	mov	r2, r0
 811073e:	f240 11af 	movw	r1, #431	@ 0x1af
 8110742:	e6d8      	b.n	81104f6 <_dtoa_r+0x2e>
 8110744:	2301      	movs	r3, #1
 8110746:	e7e0      	b.n	811070a <_dtoa_r+0x242>
 8110748:	2401      	movs	r4, #1
 811074a:	2300      	movs	r3, #0
 811074c:	9309      	str	r3, [sp, #36]	@ 0x24
 811074e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8110750:	f04f 33ff 	mov.w	r3, #4294967295
 8110754:	9300      	str	r3, [sp, #0]
 8110756:	9307      	str	r3, [sp, #28]
 8110758:	2200      	movs	r2, #0
 811075a:	2312      	movs	r3, #18
 811075c:	e7d0      	b.n	8110700 <_dtoa_r+0x238>
 811075e:	2301      	movs	r3, #1
 8110760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110762:	e7f5      	b.n	8110750 <_dtoa_r+0x288>
 8110764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110766:	9300      	str	r3, [sp, #0]
 8110768:	9307      	str	r3, [sp, #28]
 811076a:	e7d7      	b.n	811071c <_dtoa_r+0x254>
 811076c:	3101      	adds	r1, #1
 811076e:	0052      	lsls	r2, r2, #1
 8110770:	e7d8      	b.n	8110724 <_dtoa_r+0x25c>
 8110772:	bf00      	nop
 8110774:	f3af 8000 	nop.w
 8110778:	636f4361 	.word	0x636f4361
 811077c:	3fd287a7 	.word	0x3fd287a7
 8110780:	8b60c8b3 	.word	0x8b60c8b3
 8110784:	3fc68a28 	.word	0x3fc68a28
 8110788:	509f79fb 	.word	0x509f79fb
 811078c:	3fd34413 	.word	0x3fd34413
 8110790:	08113988 	.word	0x08113988
 8110794:	08113a79 	.word	0x08113a79
 8110798:	7ff00000 	.word	0x7ff00000
 811079c:	08113a08 	.word	0x08113a08
 81107a0:	3ff80000 	.word	0x3ff80000
 81107a4:	08113b70 	.word	0x08113b70
 81107a8:	08113ad1 	.word	0x08113ad1
 81107ac:	08113a75 	.word	0x08113a75
 81107b0:	08113a07 	.word	0x08113a07
 81107b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 81107b8:	6018      	str	r0, [r3, #0]
 81107ba:	9b07      	ldr	r3, [sp, #28]
 81107bc:	2b0e      	cmp	r3, #14
 81107be:	f200 80a4 	bhi.w	811090a <_dtoa_r+0x442>
 81107c2:	2c00      	cmp	r4, #0
 81107c4:	f000 80a1 	beq.w	811090a <_dtoa_r+0x442>
 81107c8:	2f00      	cmp	r7, #0
 81107ca:	dd33      	ble.n	8110834 <_dtoa_r+0x36c>
 81107cc:	4bad      	ldr	r3, [pc, #692]	@ (8110a84 <_dtoa_r+0x5bc>)
 81107ce:	f007 020f 	and.w	r2, r7, #15
 81107d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81107d6:	ed93 7b00 	vldr	d7, [r3]
 81107da:	05f8      	lsls	r0, r7, #23
 81107dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 81107e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 81107e4:	d516      	bpl.n	8110814 <_dtoa_r+0x34c>
 81107e6:	4ba8      	ldr	r3, [pc, #672]	@ (8110a88 <_dtoa_r+0x5c0>)
 81107e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81107ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81107f0:	f7f0 f8b4 	bl	810095c <__aeabi_ddiv>
 81107f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81107f8:	f004 040f 	and.w	r4, r4, #15
 81107fc:	2603      	movs	r6, #3
 81107fe:	4da2      	ldr	r5, [pc, #648]	@ (8110a88 <_dtoa_r+0x5c0>)
 8110800:	b954      	cbnz	r4, 8110818 <_dtoa_r+0x350>
 8110802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811080a:	f7f0 f8a7 	bl	810095c <__aeabi_ddiv>
 811080e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110812:	e028      	b.n	8110866 <_dtoa_r+0x39e>
 8110814:	2602      	movs	r6, #2
 8110816:	e7f2      	b.n	81107fe <_dtoa_r+0x336>
 8110818:	07e1      	lsls	r1, r4, #31
 811081a:	d508      	bpl.n	811082e <_dtoa_r+0x366>
 811081c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110820:	e9d5 2300 	ldrd	r2, r3, [r5]
 8110824:	f7ef ff70 	bl	8100708 <__aeabi_dmul>
 8110828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 811082c:	3601      	adds	r6, #1
 811082e:	1064      	asrs	r4, r4, #1
 8110830:	3508      	adds	r5, #8
 8110832:	e7e5      	b.n	8110800 <_dtoa_r+0x338>
 8110834:	f000 80d2 	beq.w	81109dc <_dtoa_r+0x514>
 8110838:	427c      	negs	r4, r7
 811083a:	4b92      	ldr	r3, [pc, #584]	@ (8110a84 <_dtoa_r+0x5bc>)
 811083c:	4d92      	ldr	r5, [pc, #584]	@ (8110a88 <_dtoa_r+0x5c0>)
 811083e:	f004 020f 	and.w	r2, r4, #15
 8110842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8110846:	e9d3 2300 	ldrd	r2, r3, [r3]
 811084a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811084e:	f7ef ff5b 	bl	8100708 <__aeabi_dmul>
 8110852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110856:	1124      	asrs	r4, r4, #4
 8110858:	2300      	movs	r3, #0
 811085a:	2602      	movs	r6, #2
 811085c:	2c00      	cmp	r4, #0
 811085e:	f040 80b2 	bne.w	81109c6 <_dtoa_r+0x4fe>
 8110862:	2b00      	cmp	r3, #0
 8110864:	d1d3      	bne.n	811080e <_dtoa_r+0x346>
 8110866:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8110868:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 811086c:	2b00      	cmp	r3, #0
 811086e:	f000 80b7 	beq.w	81109e0 <_dtoa_r+0x518>
 8110872:	4b86      	ldr	r3, [pc, #536]	@ (8110a8c <_dtoa_r+0x5c4>)
 8110874:	2200      	movs	r2, #0
 8110876:	4620      	mov	r0, r4
 8110878:	4629      	mov	r1, r5
 811087a:	f7f0 f9b7 	bl	8100bec <__aeabi_dcmplt>
 811087e:	2800      	cmp	r0, #0
 8110880:	f000 80ae 	beq.w	81109e0 <_dtoa_r+0x518>
 8110884:	9b07      	ldr	r3, [sp, #28]
 8110886:	2b00      	cmp	r3, #0
 8110888:	f000 80aa 	beq.w	81109e0 <_dtoa_r+0x518>
 811088c:	9b00      	ldr	r3, [sp, #0]
 811088e:	2b00      	cmp	r3, #0
 8110890:	dd37      	ble.n	8110902 <_dtoa_r+0x43a>
 8110892:	1e7b      	subs	r3, r7, #1
 8110894:	9304      	str	r3, [sp, #16]
 8110896:	4620      	mov	r0, r4
 8110898:	4b7d      	ldr	r3, [pc, #500]	@ (8110a90 <_dtoa_r+0x5c8>)
 811089a:	2200      	movs	r2, #0
 811089c:	4629      	mov	r1, r5
 811089e:	f7ef ff33 	bl	8100708 <__aeabi_dmul>
 81108a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81108a6:	9c00      	ldr	r4, [sp, #0]
 81108a8:	3601      	adds	r6, #1
 81108aa:	4630      	mov	r0, r6
 81108ac:	f7ef fec2 	bl	8100634 <__aeabi_i2d>
 81108b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81108b4:	f7ef ff28 	bl	8100708 <__aeabi_dmul>
 81108b8:	4b76      	ldr	r3, [pc, #472]	@ (8110a94 <_dtoa_r+0x5cc>)
 81108ba:	2200      	movs	r2, #0
 81108bc:	f7ef fd6e 	bl	810039c <__adddf3>
 81108c0:	4605      	mov	r5, r0
 81108c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 81108c6:	2c00      	cmp	r4, #0
 81108c8:	f040 808d 	bne.w	81109e6 <_dtoa_r+0x51e>
 81108cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81108d0:	4b71      	ldr	r3, [pc, #452]	@ (8110a98 <_dtoa_r+0x5d0>)
 81108d2:	2200      	movs	r2, #0
 81108d4:	f7ef fd60 	bl	8100398 <__aeabi_dsub>
 81108d8:	4602      	mov	r2, r0
 81108da:	460b      	mov	r3, r1
 81108dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81108e0:	462a      	mov	r2, r5
 81108e2:	4633      	mov	r3, r6
 81108e4:	f7f0 f9a0 	bl	8100c28 <__aeabi_dcmpgt>
 81108e8:	2800      	cmp	r0, #0
 81108ea:	f040 828b 	bne.w	8110e04 <_dtoa_r+0x93c>
 81108ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81108f2:	462a      	mov	r2, r5
 81108f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 81108f8:	f7f0 f978 	bl	8100bec <__aeabi_dcmplt>
 81108fc:	2800      	cmp	r0, #0
 81108fe:	f040 8128 	bne.w	8110b52 <_dtoa_r+0x68a>
 8110902:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8110906:	e9cd 3402 	strd	r3, r4, [sp, #8]
 811090a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 811090c:	2b00      	cmp	r3, #0
 811090e:	f2c0 815a 	blt.w	8110bc6 <_dtoa_r+0x6fe>
 8110912:	2f0e      	cmp	r7, #14
 8110914:	f300 8157 	bgt.w	8110bc6 <_dtoa_r+0x6fe>
 8110918:	4b5a      	ldr	r3, [pc, #360]	@ (8110a84 <_dtoa_r+0x5bc>)
 811091a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 811091e:	ed93 7b00 	vldr	d7, [r3]
 8110922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110924:	2b00      	cmp	r3, #0
 8110926:	ed8d 7b00 	vstr	d7, [sp]
 811092a:	da03      	bge.n	8110934 <_dtoa_r+0x46c>
 811092c:	9b07      	ldr	r3, [sp, #28]
 811092e:	2b00      	cmp	r3, #0
 8110930:	f340 8101 	ble.w	8110b36 <_dtoa_r+0x66e>
 8110934:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8110938:	4656      	mov	r6, sl
 811093a:	e9dd 2300 	ldrd	r2, r3, [sp]
 811093e:	4620      	mov	r0, r4
 8110940:	4629      	mov	r1, r5
 8110942:	f7f0 f80b 	bl	810095c <__aeabi_ddiv>
 8110946:	f7f0 f98f 	bl	8100c68 <__aeabi_d2iz>
 811094a:	4680      	mov	r8, r0
 811094c:	f7ef fe72 	bl	8100634 <__aeabi_i2d>
 8110950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110954:	f7ef fed8 	bl	8100708 <__aeabi_dmul>
 8110958:	4602      	mov	r2, r0
 811095a:	460b      	mov	r3, r1
 811095c:	4620      	mov	r0, r4
 811095e:	4629      	mov	r1, r5
 8110960:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8110964:	f7ef fd18 	bl	8100398 <__aeabi_dsub>
 8110968:	f806 4b01 	strb.w	r4, [r6], #1
 811096c:	9d07      	ldr	r5, [sp, #28]
 811096e:	eba6 040a 	sub.w	r4, r6, sl
 8110972:	42a5      	cmp	r5, r4
 8110974:	4602      	mov	r2, r0
 8110976:	460b      	mov	r3, r1
 8110978:	f040 8117 	bne.w	8110baa <_dtoa_r+0x6e2>
 811097c:	f7ef fd0e 	bl	810039c <__adddf3>
 8110980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110984:	4604      	mov	r4, r0
 8110986:	460d      	mov	r5, r1
 8110988:	f7f0 f94e 	bl	8100c28 <__aeabi_dcmpgt>
 811098c:	2800      	cmp	r0, #0
 811098e:	f040 80f9 	bne.w	8110b84 <_dtoa_r+0x6bc>
 8110992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110996:	4620      	mov	r0, r4
 8110998:	4629      	mov	r1, r5
 811099a:	f7f0 f91d 	bl	8100bd8 <__aeabi_dcmpeq>
 811099e:	b118      	cbz	r0, 81109a8 <_dtoa_r+0x4e0>
 81109a0:	f018 0f01 	tst.w	r8, #1
 81109a4:	f040 80ee 	bne.w	8110b84 <_dtoa_r+0x6bc>
 81109a8:	4649      	mov	r1, r9
 81109aa:	4658      	mov	r0, fp
 81109ac:	f000 fc90 	bl	81112d0 <_Bfree>
 81109b0:	2300      	movs	r3, #0
 81109b2:	7033      	strb	r3, [r6, #0]
 81109b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81109b6:	3701      	adds	r7, #1
 81109b8:	601f      	str	r7, [r3, #0]
 81109ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81109bc:	2b00      	cmp	r3, #0
 81109be:	f000 831d 	beq.w	8110ffc <_dtoa_r+0xb34>
 81109c2:	601e      	str	r6, [r3, #0]
 81109c4:	e31a      	b.n	8110ffc <_dtoa_r+0xb34>
 81109c6:	07e2      	lsls	r2, r4, #31
 81109c8:	d505      	bpl.n	81109d6 <_dtoa_r+0x50e>
 81109ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 81109ce:	f7ef fe9b 	bl	8100708 <__aeabi_dmul>
 81109d2:	3601      	adds	r6, #1
 81109d4:	2301      	movs	r3, #1
 81109d6:	1064      	asrs	r4, r4, #1
 81109d8:	3508      	adds	r5, #8
 81109da:	e73f      	b.n	811085c <_dtoa_r+0x394>
 81109dc:	2602      	movs	r6, #2
 81109de:	e742      	b.n	8110866 <_dtoa_r+0x39e>
 81109e0:	9c07      	ldr	r4, [sp, #28]
 81109e2:	9704      	str	r7, [sp, #16]
 81109e4:	e761      	b.n	81108aa <_dtoa_r+0x3e2>
 81109e6:	4b27      	ldr	r3, [pc, #156]	@ (8110a84 <_dtoa_r+0x5bc>)
 81109e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 81109ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81109ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81109f2:	4454      	add	r4, sl
 81109f4:	2900      	cmp	r1, #0
 81109f6:	d053      	beq.n	8110aa0 <_dtoa_r+0x5d8>
 81109f8:	4928      	ldr	r1, [pc, #160]	@ (8110a9c <_dtoa_r+0x5d4>)
 81109fa:	2000      	movs	r0, #0
 81109fc:	f7ef ffae 	bl	810095c <__aeabi_ddiv>
 8110a00:	4633      	mov	r3, r6
 8110a02:	462a      	mov	r2, r5
 8110a04:	f7ef fcc8 	bl	8100398 <__aeabi_dsub>
 8110a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110a0c:	4656      	mov	r6, sl
 8110a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110a12:	f7f0 f929 	bl	8100c68 <__aeabi_d2iz>
 8110a16:	4605      	mov	r5, r0
 8110a18:	f7ef fe0c 	bl	8100634 <__aeabi_i2d>
 8110a1c:	4602      	mov	r2, r0
 8110a1e:	460b      	mov	r3, r1
 8110a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110a24:	f7ef fcb8 	bl	8100398 <__aeabi_dsub>
 8110a28:	3530      	adds	r5, #48	@ 0x30
 8110a2a:	4602      	mov	r2, r0
 8110a2c:	460b      	mov	r3, r1
 8110a2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110a32:	f806 5b01 	strb.w	r5, [r6], #1
 8110a36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110a3a:	f7f0 f8d7 	bl	8100bec <__aeabi_dcmplt>
 8110a3e:	2800      	cmp	r0, #0
 8110a40:	d171      	bne.n	8110b26 <_dtoa_r+0x65e>
 8110a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110a46:	4911      	ldr	r1, [pc, #68]	@ (8110a8c <_dtoa_r+0x5c4>)
 8110a48:	2000      	movs	r0, #0
 8110a4a:	f7ef fca5 	bl	8100398 <__aeabi_dsub>
 8110a4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110a52:	f7f0 f8cb 	bl	8100bec <__aeabi_dcmplt>
 8110a56:	2800      	cmp	r0, #0
 8110a58:	f040 8095 	bne.w	8110b86 <_dtoa_r+0x6be>
 8110a5c:	42a6      	cmp	r6, r4
 8110a5e:	f43f af50 	beq.w	8110902 <_dtoa_r+0x43a>
 8110a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8110a66:	4b0a      	ldr	r3, [pc, #40]	@ (8110a90 <_dtoa_r+0x5c8>)
 8110a68:	2200      	movs	r2, #0
 8110a6a:	f7ef fe4d 	bl	8100708 <__aeabi_dmul>
 8110a6e:	4b08      	ldr	r3, [pc, #32]	@ (8110a90 <_dtoa_r+0x5c8>)
 8110a70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110a74:	2200      	movs	r2, #0
 8110a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110a7a:	f7ef fe45 	bl	8100708 <__aeabi_dmul>
 8110a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110a82:	e7c4      	b.n	8110a0e <_dtoa_r+0x546>
 8110a84:	08113b70 	.word	0x08113b70
 8110a88:	08113b48 	.word	0x08113b48
 8110a8c:	3ff00000 	.word	0x3ff00000
 8110a90:	40240000 	.word	0x40240000
 8110a94:	401c0000 	.word	0x401c0000
 8110a98:	40140000 	.word	0x40140000
 8110a9c:	3fe00000 	.word	0x3fe00000
 8110aa0:	4631      	mov	r1, r6
 8110aa2:	4628      	mov	r0, r5
 8110aa4:	f7ef fe30 	bl	8100708 <__aeabi_dmul>
 8110aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110aac:	9415      	str	r4, [sp, #84]	@ 0x54
 8110aae:	4656      	mov	r6, sl
 8110ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110ab4:	f7f0 f8d8 	bl	8100c68 <__aeabi_d2iz>
 8110ab8:	4605      	mov	r5, r0
 8110aba:	f7ef fdbb 	bl	8100634 <__aeabi_i2d>
 8110abe:	4602      	mov	r2, r0
 8110ac0:	460b      	mov	r3, r1
 8110ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110ac6:	f7ef fc67 	bl	8100398 <__aeabi_dsub>
 8110aca:	3530      	adds	r5, #48	@ 0x30
 8110acc:	f806 5b01 	strb.w	r5, [r6], #1
 8110ad0:	4602      	mov	r2, r0
 8110ad2:	460b      	mov	r3, r1
 8110ad4:	42a6      	cmp	r6, r4
 8110ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110ada:	f04f 0200 	mov.w	r2, #0
 8110ade:	d124      	bne.n	8110b2a <_dtoa_r+0x662>
 8110ae0:	4bac      	ldr	r3, [pc, #688]	@ (8110d94 <_dtoa_r+0x8cc>)
 8110ae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8110ae6:	f7ef fc59 	bl	810039c <__adddf3>
 8110aea:	4602      	mov	r2, r0
 8110aec:	460b      	mov	r3, r1
 8110aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110af2:	f7f0 f899 	bl	8100c28 <__aeabi_dcmpgt>
 8110af6:	2800      	cmp	r0, #0
 8110af8:	d145      	bne.n	8110b86 <_dtoa_r+0x6be>
 8110afa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110afe:	49a5      	ldr	r1, [pc, #660]	@ (8110d94 <_dtoa_r+0x8cc>)
 8110b00:	2000      	movs	r0, #0
 8110b02:	f7ef fc49 	bl	8100398 <__aeabi_dsub>
 8110b06:	4602      	mov	r2, r0
 8110b08:	460b      	mov	r3, r1
 8110b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110b0e:	f7f0 f86d 	bl	8100bec <__aeabi_dcmplt>
 8110b12:	2800      	cmp	r0, #0
 8110b14:	f43f aef5 	beq.w	8110902 <_dtoa_r+0x43a>
 8110b18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8110b1a:	1e73      	subs	r3, r6, #1
 8110b1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8110b1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8110b22:	2b30      	cmp	r3, #48	@ 0x30
 8110b24:	d0f8      	beq.n	8110b18 <_dtoa_r+0x650>
 8110b26:	9f04      	ldr	r7, [sp, #16]
 8110b28:	e73e      	b.n	81109a8 <_dtoa_r+0x4e0>
 8110b2a:	4b9b      	ldr	r3, [pc, #620]	@ (8110d98 <_dtoa_r+0x8d0>)
 8110b2c:	f7ef fdec 	bl	8100708 <__aeabi_dmul>
 8110b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110b34:	e7bc      	b.n	8110ab0 <_dtoa_r+0x5e8>
 8110b36:	d10c      	bne.n	8110b52 <_dtoa_r+0x68a>
 8110b38:	4b98      	ldr	r3, [pc, #608]	@ (8110d9c <_dtoa_r+0x8d4>)
 8110b3a:	2200      	movs	r2, #0
 8110b3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110b40:	f7ef fde2 	bl	8100708 <__aeabi_dmul>
 8110b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110b48:	f7f0 f864 	bl	8100c14 <__aeabi_dcmpge>
 8110b4c:	2800      	cmp	r0, #0
 8110b4e:	f000 8157 	beq.w	8110e00 <_dtoa_r+0x938>
 8110b52:	2400      	movs	r4, #0
 8110b54:	4625      	mov	r5, r4
 8110b56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110b58:	43db      	mvns	r3, r3
 8110b5a:	9304      	str	r3, [sp, #16]
 8110b5c:	4656      	mov	r6, sl
 8110b5e:	2700      	movs	r7, #0
 8110b60:	4621      	mov	r1, r4
 8110b62:	4658      	mov	r0, fp
 8110b64:	f000 fbb4 	bl	81112d0 <_Bfree>
 8110b68:	2d00      	cmp	r5, #0
 8110b6a:	d0dc      	beq.n	8110b26 <_dtoa_r+0x65e>
 8110b6c:	b12f      	cbz	r7, 8110b7a <_dtoa_r+0x6b2>
 8110b6e:	42af      	cmp	r7, r5
 8110b70:	d003      	beq.n	8110b7a <_dtoa_r+0x6b2>
 8110b72:	4639      	mov	r1, r7
 8110b74:	4658      	mov	r0, fp
 8110b76:	f000 fbab 	bl	81112d0 <_Bfree>
 8110b7a:	4629      	mov	r1, r5
 8110b7c:	4658      	mov	r0, fp
 8110b7e:	f000 fba7 	bl	81112d0 <_Bfree>
 8110b82:	e7d0      	b.n	8110b26 <_dtoa_r+0x65e>
 8110b84:	9704      	str	r7, [sp, #16]
 8110b86:	4633      	mov	r3, r6
 8110b88:	461e      	mov	r6, r3
 8110b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110b8e:	2a39      	cmp	r2, #57	@ 0x39
 8110b90:	d107      	bne.n	8110ba2 <_dtoa_r+0x6da>
 8110b92:	459a      	cmp	sl, r3
 8110b94:	d1f8      	bne.n	8110b88 <_dtoa_r+0x6c0>
 8110b96:	9a04      	ldr	r2, [sp, #16]
 8110b98:	3201      	adds	r2, #1
 8110b9a:	9204      	str	r2, [sp, #16]
 8110b9c:	2230      	movs	r2, #48	@ 0x30
 8110b9e:	f88a 2000 	strb.w	r2, [sl]
 8110ba2:	781a      	ldrb	r2, [r3, #0]
 8110ba4:	3201      	adds	r2, #1
 8110ba6:	701a      	strb	r2, [r3, #0]
 8110ba8:	e7bd      	b.n	8110b26 <_dtoa_r+0x65e>
 8110baa:	4b7b      	ldr	r3, [pc, #492]	@ (8110d98 <_dtoa_r+0x8d0>)
 8110bac:	2200      	movs	r2, #0
 8110bae:	f7ef fdab 	bl	8100708 <__aeabi_dmul>
 8110bb2:	2200      	movs	r2, #0
 8110bb4:	2300      	movs	r3, #0
 8110bb6:	4604      	mov	r4, r0
 8110bb8:	460d      	mov	r5, r1
 8110bba:	f7f0 f80d 	bl	8100bd8 <__aeabi_dcmpeq>
 8110bbe:	2800      	cmp	r0, #0
 8110bc0:	f43f aebb 	beq.w	811093a <_dtoa_r+0x472>
 8110bc4:	e6f0      	b.n	81109a8 <_dtoa_r+0x4e0>
 8110bc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8110bc8:	2a00      	cmp	r2, #0
 8110bca:	f000 80db 	beq.w	8110d84 <_dtoa_r+0x8bc>
 8110bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8110bd0:	2a01      	cmp	r2, #1
 8110bd2:	f300 80bf 	bgt.w	8110d54 <_dtoa_r+0x88c>
 8110bd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8110bd8:	2a00      	cmp	r2, #0
 8110bda:	f000 80b7 	beq.w	8110d4c <_dtoa_r+0x884>
 8110bde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8110be2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8110be4:	4646      	mov	r6, r8
 8110be6:	9a08      	ldr	r2, [sp, #32]
 8110be8:	2101      	movs	r1, #1
 8110bea:	441a      	add	r2, r3
 8110bec:	4658      	mov	r0, fp
 8110bee:	4498      	add	r8, r3
 8110bf0:	9208      	str	r2, [sp, #32]
 8110bf2:	f000 fc6b 	bl	81114cc <__i2b>
 8110bf6:	4605      	mov	r5, r0
 8110bf8:	b15e      	cbz	r6, 8110c12 <_dtoa_r+0x74a>
 8110bfa:	9b08      	ldr	r3, [sp, #32]
 8110bfc:	2b00      	cmp	r3, #0
 8110bfe:	dd08      	ble.n	8110c12 <_dtoa_r+0x74a>
 8110c00:	42b3      	cmp	r3, r6
 8110c02:	9a08      	ldr	r2, [sp, #32]
 8110c04:	bfa8      	it	ge
 8110c06:	4633      	movge	r3, r6
 8110c08:	eba8 0803 	sub.w	r8, r8, r3
 8110c0c:	1af6      	subs	r6, r6, r3
 8110c0e:	1ad3      	subs	r3, r2, r3
 8110c10:	9308      	str	r3, [sp, #32]
 8110c12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110c14:	b1f3      	cbz	r3, 8110c54 <_dtoa_r+0x78c>
 8110c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110c18:	2b00      	cmp	r3, #0
 8110c1a:	f000 80b7 	beq.w	8110d8c <_dtoa_r+0x8c4>
 8110c1e:	b18c      	cbz	r4, 8110c44 <_dtoa_r+0x77c>
 8110c20:	4629      	mov	r1, r5
 8110c22:	4622      	mov	r2, r4
 8110c24:	4658      	mov	r0, fp
 8110c26:	f000 fd11 	bl	811164c <__pow5mult>
 8110c2a:	464a      	mov	r2, r9
 8110c2c:	4601      	mov	r1, r0
 8110c2e:	4605      	mov	r5, r0
 8110c30:	4658      	mov	r0, fp
 8110c32:	f000 fc61 	bl	81114f8 <__multiply>
 8110c36:	4649      	mov	r1, r9
 8110c38:	9004      	str	r0, [sp, #16]
 8110c3a:	4658      	mov	r0, fp
 8110c3c:	f000 fb48 	bl	81112d0 <_Bfree>
 8110c40:	9b04      	ldr	r3, [sp, #16]
 8110c42:	4699      	mov	r9, r3
 8110c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110c46:	1b1a      	subs	r2, r3, r4
 8110c48:	d004      	beq.n	8110c54 <_dtoa_r+0x78c>
 8110c4a:	4649      	mov	r1, r9
 8110c4c:	4658      	mov	r0, fp
 8110c4e:	f000 fcfd 	bl	811164c <__pow5mult>
 8110c52:	4681      	mov	r9, r0
 8110c54:	2101      	movs	r1, #1
 8110c56:	4658      	mov	r0, fp
 8110c58:	f000 fc38 	bl	81114cc <__i2b>
 8110c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110c5e:	4604      	mov	r4, r0
 8110c60:	2b00      	cmp	r3, #0
 8110c62:	f000 81cf 	beq.w	8111004 <_dtoa_r+0xb3c>
 8110c66:	461a      	mov	r2, r3
 8110c68:	4601      	mov	r1, r0
 8110c6a:	4658      	mov	r0, fp
 8110c6c:	f000 fcee 	bl	811164c <__pow5mult>
 8110c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110c72:	2b01      	cmp	r3, #1
 8110c74:	4604      	mov	r4, r0
 8110c76:	f300 8095 	bgt.w	8110da4 <_dtoa_r+0x8dc>
 8110c7a:	9b02      	ldr	r3, [sp, #8]
 8110c7c:	2b00      	cmp	r3, #0
 8110c7e:	f040 8087 	bne.w	8110d90 <_dtoa_r+0x8c8>
 8110c82:	9b03      	ldr	r3, [sp, #12]
 8110c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110c88:	2b00      	cmp	r3, #0
 8110c8a:	f040 8089 	bne.w	8110da0 <_dtoa_r+0x8d8>
 8110c8e:	9b03      	ldr	r3, [sp, #12]
 8110c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8110c94:	0d1b      	lsrs	r3, r3, #20
 8110c96:	051b      	lsls	r3, r3, #20
 8110c98:	b12b      	cbz	r3, 8110ca6 <_dtoa_r+0x7de>
 8110c9a:	9b08      	ldr	r3, [sp, #32]
 8110c9c:	3301      	adds	r3, #1
 8110c9e:	9308      	str	r3, [sp, #32]
 8110ca0:	f108 0801 	add.w	r8, r8, #1
 8110ca4:	2301      	movs	r3, #1
 8110ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8110ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110caa:	2b00      	cmp	r3, #0
 8110cac:	f000 81b0 	beq.w	8111010 <_dtoa_r+0xb48>
 8110cb0:	6923      	ldr	r3, [r4, #16]
 8110cb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8110cb6:	6918      	ldr	r0, [r3, #16]
 8110cb8:	f000 fbbc 	bl	8111434 <__hi0bits>
 8110cbc:	f1c0 0020 	rsb	r0, r0, #32
 8110cc0:	9b08      	ldr	r3, [sp, #32]
 8110cc2:	4418      	add	r0, r3
 8110cc4:	f010 001f 	ands.w	r0, r0, #31
 8110cc8:	d077      	beq.n	8110dba <_dtoa_r+0x8f2>
 8110cca:	f1c0 0320 	rsb	r3, r0, #32
 8110cce:	2b04      	cmp	r3, #4
 8110cd0:	dd6b      	ble.n	8110daa <_dtoa_r+0x8e2>
 8110cd2:	9b08      	ldr	r3, [sp, #32]
 8110cd4:	f1c0 001c 	rsb	r0, r0, #28
 8110cd8:	4403      	add	r3, r0
 8110cda:	4480      	add	r8, r0
 8110cdc:	4406      	add	r6, r0
 8110cde:	9308      	str	r3, [sp, #32]
 8110ce0:	f1b8 0f00 	cmp.w	r8, #0
 8110ce4:	dd05      	ble.n	8110cf2 <_dtoa_r+0x82a>
 8110ce6:	4649      	mov	r1, r9
 8110ce8:	4642      	mov	r2, r8
 8110cea:	4658      	mov	r0, fp
 8110cec:	f000 fd08 	bl	8111700 <__lshift>
 8110cf0:	4681      	mov	r9, r0
 8110cf2:	9b08      	ldr	r3, [sp, #32]
 8110cf4:	2b00      	cmp	r3, #0
 8110cf6:	dd05      	ble.n	8110d04 <_dtoa_r+0x83c>
 8110cf8:	4621      	mov	r1, r4
 8110cfa:	461a      	mov	r2, r3
 8110cfc:	4658      	mov	r0, fp
 8110cfe:	f000 fcff 	bl	8111700 <__lshift>
 8110d02:	4604      	mov	r4, r0
 8110d04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8110d06:	2b00      	cmp	r3, #0
 8110d08:	d059      	beq.n	8110dbe <_dtoa_r+0x8f6>
 8110d0a:	4621      	mov	r1, r4
 8110d0c:	4648      	mov	r0, r9
 8110d0e:	f000 fd63 	bl	81117d8 <__mcmp>
 8110d12:	2800      	cmp	r0, #0
 8110d14:	da53      	bge.n	8110dbe <_dtoa_r+0x8f6>
 8110d16:	1e7b      	subs	r3, r7, #1
 8110d18:	9304      	str	r3, [sp, #16]
 8110d1a:	4649      	mov	r1, r9
 8110d1c:	2300      	movs	r3, #0
 8110d1e:	220a      	movs	r2, #10
 8110d20:	4658      	mov	r0, fp
 8110d22:	f000 faf7 	bl	8111314 <__multadd>
 8110d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110d28:	4681      	mov	r9, r0
 8110d2a:	2b00      	cmp	r3, #0
 8110d2c:	f000 8172 	beq.w	8111014 <_dtoa_r+0xb4c>
 8110d30:	2300      	movs	r3, #0
 8110d32:	4629      	mov	r1, r5
 8110d34:	220a      	movs	r2, #10
 8110d36:	4658      	mov	r0, fp
 8110d38:	f000 faec 	bl	8111314 <__multadd>
 8110d3c:	9b00      	ldr	r3, [sp, #0]
 8110d3e:	2b00      	cmp	r3, #0
 8110d40:	4605      	mov	r5, r0
 8110d42:	dc67      	bgt.n	8110e14 <_dtoa_r+0x94c>
 8110d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110d46:	2b02      	cmp	r3, #2
 8110d48:	dc41      	bgt.n	8110dce <_dtoa_r+0x906>
 8110d4a:	e063      	b.n	8110e14 <_dtoa_r+0x94c>
 8110d4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8110d4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8110d52:	e746      	b.n	8110be2 <_dtoa_r+0x71a>
 8110d54:	9b07      	ldr	r3, [sp, #28]
 8110d56:	1e5c      	subs	r4, r3, #1
 8110d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110d5a:	42a3      	cmp	r3, r4
 8110d5c:	bfbf      	itttt	lt
 8110d5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8110d60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8110d62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8110d64:	1ae3      	sublt	r3, r4, r3
 8110d66:	bfb4      	ite	lt
 8110d68:	18d2      	addlt	r2, r2, r3
 8110d6a:	1b1c      	subge	r4, r3, r4
 8110d6c:	9b07      	ldr	r3, [sp, #28]
 8110d6e:	bfbc      	itt	lt
 8110d70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8110d72:	2400      	movlt	r4, #0
 8110d74:	2b00      	cmp	r3, #0
 8110d76:	bfb5      	itete	lt
 8110d78:	eba8 0603 	sublt.w	r6, r8, r3
 8110d7c:	9b07      	ldrge	r3, [sp, #28]
 8110d7e:	2300      	movlt	r3, #0
 8110d80:	4646      	movge	r6, r8
 8110d82:	e730      	b.n	8110be6 <_dtoa_r+0x71e>
 8110d84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8110d86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8110d88:	4646      	mov	r6, r8
 8110d8a:	e735      	b.n	8110bf8 <_dtoa_r+0x730>
 8110d8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8110d8e:	e75c      	b.n	8110c4a <_dtoa_r+0x782>
 8110d90:	2300      	movs	r3, #0
 8110d92:	e788      	b.n	8110ca6 <_dtoa_r+0x7de>
 8110d94:	3fe00000 	.word	0x3fe00000
 8110d98:	40240000 	.word	0x40240000
 8110d9c:	40140000 	.word	0x40140000
 8110da0:	9b02      	ldr	r3, [sp, #8]
 8110da2:	e780      	b.n	8110ca6 <_dtoa_r+0x7de>
 8110da4:	2300      	movs	r3, #0
 8110da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8110da8:	e782      	b.n	8110cb0 <_dtoa_r+0x7e8>
 8110daa:	d099      	beq.n	8110ce0 <_dtoa_r+0x818>
 8110dac:	9a08      	ldr	r2, [sp, #32]
 8110dae:	331c      	adds	r3, #28
 8110db0:	441a      	add	r2, r3
 8110db2:	4498      	add	r8, r3
 8110db4:	441e      	add	r6, r3
 8110db6:	9208      	str	r2, [sp, #32]
 8110db8:	e792      	b.n	8110ce0 <_dtoa_r+0x818>
 8110dba:	4603      	mov	r3, r0
 8110dbc:	e7f6      	b.n	8110dac <_dtoa_r+0x8e4>
 8110dbe:	9b07      	ldr	r3, [sp, #28]
 8110dc0:	9704      	str	r7, [sp, #16]
 8110dc2:	2b00      	cmp	r3, #0
 8110dc4:	dc20      	bgt.n	8110e08 <_dtoa_r+0x940>
 8110dc6:	9300      	str	r3, [sp, #0]
 8110dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110dca:	2b02      	cmp	r3, #2
 8110dcc:	dd1e      	ble.n	8110e0c <_dtoa_r+0x944>
 8110dce:	9b00      	ldr	r3, [sp, #0]
 8110dd0:	2b00      	cmp	r3, #0
 8110dd2:	f47f aec0 	bne.w	8110b56 <_dtoa_r+0x68e>
 8110dd6:	4621      	mov	r1, r4
 8110dd8:	2205      	movs	r2, #5
 8110dda:	4658      	mov	r0, fp
 8110ddc:	f000 fa9a 	bl	8111314 <__multadd>
 8110de0:	4601      	mov	r1, r0
 8110de2:	4604      	mov	r4, r0
 8110de4:	4648      	mov	r0, r9
 8110de6:	f000 fcf7 	bl	81117d8 <__mcmp>
 8110dea:	2800      	cmp	r0, #0
 8110dec:	f77f aeb3 	ble.w	8110b56 <_dtoa_r+0x68e>
 8110df0:	4656      	mov	r6, sl
 8110df2:	2331      	movs	r3, #49	@ 0x31
 8110df4:	f806 3b01 	strb.w	r3, [r6], #1
 8110df8:	9b04      	ldr	r3, [sp, #16]
 8110dfa:	3301      	adds	r3, #1
 8110dfc:	9304      	str	r3, [sp, #16]
 8110dfe:	e6ae      	b.n	8110b5e <_dtoa_r+0x696>
 8110e00:	9c07      	ldr	r4, [sp, #28]
 8110e02:	9704      	str	r7, [sp, #16]
 8110e04:	4625      	mov	r5, r4
 8110e06:	e7f3      	b.n	8110df0 <_dtoa_r+0x928>
 8110e08:	9b07      	ldr	r3, [sp, #28]
 8110e0a:	9300      	str	r3, [sp, #0]
 8110e0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110e0e:	2b00      	cmp	r3, #0
 8110e10:	f000 8104 	beq.w	811101c <_dtoa_r+0xb54>
 8110e14:	2e00      	cmp	r6, #0
 8110e16:	dd05      	ble.n	8110e24 <_dtoa_r+0x95c>
 8110e18:	4629      	mov	r1, r5
 8110e1a:	4632      	mov	r2, r6
 8110e1c:	4658      	mov	r0, fp
 8110e1e:	f000 fc6f 	bl	8111700 <__lshift>
 8110e22:	4605      	mov	r5, r0
 8110e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110e26:	2b00      	cmp	r3, #0
 8110e28:	d05a      	beq.n	8110ee0 <_dtoa_r+0xa18>
 8110e2a:	6869      	ldr	r1, [r5, #4]
 8110e2c:	4658      	mov	r0, fp
 8110e2e:	f000 fa0f 	bl	8111250 <_Balloc>
 8110e32:	4606      	mov	r6, r0
 8110e34:	b928      	cbnz	r0, 8110e42 <_dtoa_r+0x97a>
 8110e36:	4b84      	ldr	r3, [pc, #528]	@ (8111048 <_dtoa_r+0xb80>)
 8110e38:	4602      	mov	r2, r0
 8110e3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8110e3e:	f7ff bb5a 	b.w	81104f6 <_dtoa_r+0x2e>
 8110e42:	692a      	ldr	r2, [r5, #16]
 8110e44:	3202      	adds	r2, #2
 8110e46:	0092      	lsls	r2, r2, #2
 8110e48:	f105 010c 	add.w	r1, r5, #12
 8110e4c:	300c      	adds	r0, #12
 8110e4e:	f7ff fa7e 	bl	811034e <memcpy>
 8110e52:	2201      	movs	r2, #1
 8110e54:	4631      	mov	r1, r6
 8110e56:	4658      	mov	r0, fp
 8110e58:	f000 fc52 	bl	8111700 <__lshift>
 8110e5c:	f10a 0301 	add.w	r3, sl, #1
 8110e60:	9307      	str	r3, [sp, #28]
 8110e62:	9b00      	ldr	r3, [sp, #0]
 8110e64:	4453      	add	r3, sl
 8110e66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110e68:	9b02      	ldr	r3, [sp, #8]
 8110e6a:	f003 0301 	and.w	r3, r3, #1
 8110e6e:	462f      	mov	r7, r5
 8110e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8110e72:	4605      	mov	r5, r0
 8110e74:	9b07      	ldr	r3, [sp, #28]
 8110e76:	4621      	mov	r1, r4
 8110e78:	3b01      	subs	r3, #1
 8110e7a:	4648      	mov	r0, r9
 8110e7c:	9300      	str	r3, [sp, #0]
 8110e7e:	f7ff fa99 	bl	81103b4 <quorem>
 8110e82:	4639      	mov	r1, r7
 8110e84:	9002      	str	r0, [sp, #8]
 8110e86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8110e8a:	4648      	mov	r0, r9
 8110e8c:	f000 fca4 	bl	81117d8 <__mcmp>
 8110e90:	462a      	mov	r2, r5
 8110e92:	9008      	str	r0, [sp, #32]
 8110e94:	4621      	mov	r1, r4
 8110e96:	4658      	mov	r0, fp
 8110e98:	f000 fcba 	bl	8111810 <__mdiff>
 8110e9c:	68c2      	ldr	r2, [r0, #12]
 8110e9e:	4606      	mov	r6, r0
 8110ea0:	bb02      	cbnz	r2, 8110ee4 <_dtoa_r+0xa1c>
 8110ea2:	4601      	mov	r1, r0
 8110ea4:	4648      	mov	r0, r9
 8110ea6:	f000 fc97 	bl	81117d8 <__mcmp>
 8110eaa:	4602      	mov	r2, r0
 8110eac:	4631      	mov	r1, r6
 8110eae:	4658      	mov	r0, fp
 8110eb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8110eb2:	f000 fa0d 	bl	81112d0 <_Bfree>
 8110eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110eb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110eba:	9e07      	ldr	r6, [sp, #28]
 8110ebc:	ea43 0102 	orr.w	r1, r3, r2
 8110ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110ec2:	4319      	orrs	r1, r3
 8110ec4:	d110      	bne.n	8110ee8 <_dtoa_r+0xa20>
 8110ec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8110eca:	d029      	beq.n	8110f20 <_dtoa_r+0xa58>
 8110ecc:	9b08      	ldr	r3, [sp, #32]
 8110ece:	2b00      	cmp	r3, #0
 8110ed0:	dd02      	ble.n	8110ed8 <_dtoa_r+0xa10>
 8110ed2:	9b02      	ldr	r3, [sp, #8]
 8110ed4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8110ed8:	9b00      	ldr	r3, [sp, #0]
 8110eda:	f883 8000 	strb.w	r8, [r3]
 8110ede:	e63f      	b.n	8110b60 <_dtoa_r+0x698>
 8110ee0:	4628      	mov	r0, r5
 8110ee2:	e7bb      	b.n	8110e5c <_dtoa_r+0x994>
 8110ee4:	2201      	movs	r2, #1
 8110ee6:	e7e1      	b.n	8110eac <_dtoa_r+0x9e4>
 8110ee8:	9b08      	ldr	r3, [sp, #32]
 8110eea:	2b00      	cmp	r3, #0
 8110eec:	db04      	blt.n	8110ef8 <_dtoa_r+0xa30>
 8110eee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8110ef0:	430b      	orrs	r3, r1
 8110ef2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8110ef4:	430b      	orrs	r3, r1
 8110ef6:	d120      	bne.n	8110f3a <_dtoa_r+0xa72>
 8110ef8:	2a00      	cmp	r2, #0
 8110efa:	dded      	ble.n	8110ed8 <_dtoa_r+0xa10>
 8110efc:	4649      	mov	r1, r9
 8110efe:	2201      	movs	r2, #1
 8110f00:	4658      	mov	r0, fp
 8110f02:	f000 fbfd 	bl	8111700 <__lshift>
 8110f06:	4621      	mov	r1, r4
 8110f08:	4681      	mov	r9, r0
 8110f0a:	f000 fc65 	bl	81117d8 <__mcmp>
 8110f0e:	2800      	cmp	r0, #0
 8110f10:	dc03      	bgt.n	8110f1a <_dtoa_r+0xa52>
 8110f12:	d1e1      	bne.n	8110ed8 <_dtoa_r+0xa10>
 8110f14:	f018 0f01 	tst.w	r8, #1
 8110f18:	d0de      	beq.n	8110ed8 <_dtoa_r+0xa10>
 8110f1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8110f1e:	d1d8      	bne.n	8110ed2 <_dtoa_r+0xa0a>
 8110f20:	9a00      	ldr	r2, [sp, #0]
 8110f22:	2339      	movs	r3, #57	@ 0x39
 8110f24:	7013      	strb	r3, [r2, #0]
 8110f26:	4633      	mov	r3, r6
 8110f28:	461e      	mov	r6, r3
 8110f2a:	3b01      	subs	r3, #1
 8110f2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8110f30:	2a39      	cmp	r2, #57	@ 0x39
 8110f32:	d052      	beq.n	8110fda <_dtoa_r+0xb12>
 8110f34:	3201      	adds	r2, #1
 8110f36:	701a      	strb	r2, [r3, #0]
 8110f38:	e612      	b.n	8110b60 <_dtoa_r+0x698>
 8110f3a:	2a00      	cmp	r2, #0
 8110f3c:	dd07      	ble.n	8110f4e <_dtoa_r+0xa86>
 8110f3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8110f42:	d0ed      	beq.n	8110f20 <_dtoa_r+0xa58>
 8110f44:	9a00      	ldr	r2, [sp, #0]
 8110f46:	f108 0301 	add.w	r3, r8, #1
 8110f4a:	7013      	strb	r3, [r2, #0]
 8110f4c:	e608      	b.n	8110b60 <_dtoa_r+0x698>
 8110f4e:	9b07      	ldr	r3, [sp, #28]
 8110f50:	9a07      	ldr	r2, [sp, #28]
 8110f52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8110f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110f58:	4293      	cmp	r3, r2
 8110f5a:	d028      	beq.n	8110fae <_dtoa_r+0xae6>
 8110f5c:	4649      	mov	r1, r9
 8110f5e:	2300      	movs	r3, #0
 8110f60:	220a      	movs	r2, #10
 8110f62:	4658      	mov	r0, fp
 8110f64:	f000 f9d6 	bl	8111314 <__multadd>
 8110f68:	42af      	cmp	r7, r5
 8110f6a:	4681      	mov	r9, r0
 8110f6c:	f04f 0300 	mov.w	r3, #0
 8110f70:	f04f 020a 	mov.w	r2, #10
 8110f74:	4639      	mov	r1, r7
 8110f76:	4658      	mov	r0, fp
 8110f78:	d107      	bne.n	8110f8a <_dtoa_r+0xac2>
 8110f7a:	f000 f9cb 	bl	8111314 <__multadd>
 8110f7e:	4607      	mov	r7, r0
 8110f80:	4605      	mov	r5, r0
 8110f82:	9b07      	ldr	r3, [sp, #28]
 8110f84:	3301      	adds	r3, #1
 8110f86:	9307      	str	r3, [sp, #28]
 8110f88:	e774      	b.n	8110e74 <_dtoa_r+0x9ac>
 8110f8a:	f000 f9c3 	bl	8111314 <__multadd>
 8110f8e:	4629      	mov	r1, r5
 8110f90:	4607      	mov	r7, r0
 8110f92:	2300      	movs	r3, #0
 8110f94:	220a      	movs	r2, #10
 8110f96:	4658      	mov	r0, fp
 8110f98:	f000 f9bc 	bl	8111314 <__multadd>
 8110f9c:	4605      	mov	r5, r0
 8110f9e:	e7f0      	b.n	8110f82 <_dtoa_r+0xaba>
 8110fa0:	9b00      	ldr	r3, [sp, #0]
 8110fa2:	2b00      	cmp	r3, #0
 8110fa4:	bfcc      	ite	gt
 8110fa6:	461e      	movgt	r6, r3
 8110fa8:	2601      	movle	r6, #1
 8110faa:	4456      	add	r6, sl
 8110fac:	2700      	movs	r7, #0
 8110fae:	4649      	mov	r1, r9
 8110fb0:	2201      	movs	r2, #1
 8110fb2:	4658      	mov	r0, fp
 8110fb4:	f000 fba4 	bl	8111700 <__lshift>
 8110fb8:	4621      	mov	r1, r4
 8110fba:	4681      	mov	r9, r0
 8110fbc:	f000 fc0c 	bl	81117d8 <__mcmp>
 8110fc0:	2800      	cmp	r0, #0
 8110fc2:	dcb0      	bgt.n	8110f26 <_dtoa_r+0xa5e>
 8110fc4:	d102      	bne.n	8110fcc <_dtoa_r+0xb04>
 8110fc6:	f018 0f01 	tst.w	r8, #1
 8110fca:	d1ac      	bne.n	8110f26 <_dtoa_r+0xa5e>
 8110fcc:	4633      	mov	r3, r6
 8110fce:	461e      	mov	r6, r3
 8110fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110fd4:	2a30      	cmp	r2, #48	@ 0x30
 8110fd6:	d0fa      	beq.n	8110fce <_dtoa_r+0xb06>
 8110fd8:	e5c2      	b.n	8110b60 <_dtoa_r+0x698>
 8110fda:	459a      	cmp	sl, r3
 8110fdc:	d1a4      	bne.n	8110f28 <_dtoa_r+0xa60>
 8110fde:	9b04      	ldr	r3, [sp, #16]
 8110fe0:	3301      	adds	r3, #1
 8110fe2:	9304      	str	r3, [sp, #16]
 8110fe4:	2331      	movs	r3, #49	@ 0x31
 8110fe6:	f88a 3000 	strb.w	r3, [sl]
 8110fea:	e5b9      	b.n	8110b60 <_dtoa_r+0x698>
 8110fec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8110fee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 811104c <_dtoa_r+0xb84>
 8110ff2:	b11b      	cbz	r3, 8110ffc <_dtoa_r+0xb34>
 8110ff4:	f10a 0308 	add.w	r3, sl, #8
 8110ff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8110ffa:	6013      	str	r3, [r2, #0]
 8110ffc:	4650      	mov	r0, sl
 8110ffe:	b019      	add	sp, #100	@ 0x64
 8111000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111006:	2b01      	cmp	r3, #1
 8111008:	f77f ae37 	ble.w	8110c7a <_dtoa_r+0x7b2>
 811100c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811100e:	930a      	str	r3, [sp, #40]	@ 0x28
 8111010:	2001      	movs	r0, #1
 8111012:	e655      	b.n	8110cc0 <_dtoa_r+0x7f8>
 8111014:	9b00      	ldr	r3, [sp, #0]
 8111016:	2b00      	cmp	r3, #0
 8111018:	f77f aed6 	ble.w	8110dc8 <_dtoa_r+0x900>
 811101c:	4656      	mov	r6, sl
 811101e:	4621      	mov	r1, r4
 8111020:	4648      	mov	r0, r9
 8111022:	f7ff f9c7 	bl	81103b4 <quorem>
 8111026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 811102a:	f806 8b01 	strb.w	r8, [r6], #1
 811102e:	9b00      	ldr	r3, [sp, #0]
 8111030:	eba6 020a 	sub.w	r2, r6, sl
 8111034:	4293      	cmp	r3, r2
 8111036:	ddb3      	ble.n	8110fa0 <_dtoa_r+0xad8>
 8111038:	4649      	mov	r1, r9
 811103a:	2300      	movs	r3, #0
 811103c:	220a      	movs	r2, #10
 811103e:	4658      	mov	r0, fp
 8111040:	f000 f968 	bl	8111314 <__multadd>
 8111044:	4681      	mov	r9, r0
 8111046:	e7ea      	b.n	811101e <_dtoa_r+0xb56>
 8111048:	08113ad1 	.word	0x08113ad1
 811104c:	08113a6c 	.word	0x08113a6c

08111050 <_free_r>:
 8111050:	b538      	push	{r3, r4, r5, lr}
 8111052:	4605      	mov	r5, r0
 8111054:	2900      	cmp	r1, #0
 8111056:	d041      	beq.n	81110dc <_free_r+0x8c>
 8111058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811105c:	1f0c      	subs	r4, r1, #4
 811105e:	2b00      	cmp	r3, #0
 8111060:	bfb8      	it	lt
 8111062:	18e4      	addlt	r4, r4, r3
 8111064:	f000 f8e8 	bl	8111238 <__malloc_lock>
 8111068:	4a1d      	ldr	r2, [pc, #116]	@ (81110e0 <_free_r+0x90>)
 811106a:	6813      	ldr	r3, [r2, #0]
 811106c:	b933      	cbnz	r3, 811107c <_free_r+0x2c>
 811106e:	6063      	str	r3, [r4, #4]
 8111070:	6014      	str	r4, [r2, #0]
 8111072:	4628      	mov	r0, r5
 8111074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8111078:	f000 b8e4 	b.w	8111244 <__malloc_unlock>
 811107c:	42a3      	cmp	r3, r4
 811107e:	d908      	bls.n	8111092 <_free_r+0x42>
 8111080:	6820      	ldr	r0, [r4, #0]
 8111082:	1821      	adds	r1, r4, r0
 8111084:	428b      	cmp	r3, r1
 8111086:	bf01      	itttt	eq
 8111088:	6819      	ldreq	r1, [r3, #0]
 811108a:	685b      	ldreq	r3, [r3, #4]
 811108c:	1809      	addeq	r1, r1, r0
 811108e:	6021      	streq	r1, [r4, #0]
 8111090:	e7ed      	b.n	811106e <_free_r+0x1e>
 8111092:	461a      	mov	r2, r3
 8111094:	685b      	ldr	r3, [r3, #4]
 8111096:	b10b      	cbz	r3, 811109c <_free_r+0x4c>
 8111098:	42a3      	cmp	r3, r4
 811109a:	d9fa      	bls.n	8111092 <_free_r+0x42>
 811109c:	6811      	ldr	r1, [r2, #0]
 811109e:	1850      	adds	r0, r2, r1
 81110a0:	42a0      	cmp	r0, r4
 81110a2:	d10b      	bne.n	81110bc <_free_r+0x6c>
 81110a4:	6820      	ldr	r0, [r4, #0]
 81110a6:	4401      	add	r1, r0
 81110a8:	1850      	adds	r0, r2, r1
 81110aa:	4283      	cmp	r3, r0
 81110ac:	6011      	str	r1, [r2, #0]
 81110ae:	d1e0      	bne.n	8111072 <_free_r+0x22>
 81110b0:	6818      	ldr	r0, [r3, #0]
 81110b2:	685b      	ldr	r3, [r3, #4]
 81110b4:	6053      	str	r3, [r2, #4]
 81110b6:	4408      	add	r0, r1
 81110b8:	6010      	str	r0, [r2, #0]
 81110ba:	e7da      	b.n	8111072 <_free_r+0x22>
 81110bc:	d902      	bls.n	81110c4 <_free_r+0x74>
 81110be:	230c      	movs	r3, #12
 81110c0:	602b      	str	r3, [r5, #0]
 81110c2:	e7d6      	b.n	8111072 <_free_r+0x22>
 81110c4:	6820      	ldr	r0, [r4, #0]
 81110c6:	1821      	adds	r1, r4, r0
 81110c8:	428b      	cmp	r3, r1
 81110ca:	bf04      	itt	eq
 81110cc:	6819      	ldreq	r1, [r3, #0]
 81110ce:	685b      	ldreq	r3, [r3, #4]
 81110d0:	6063      	str	r3, [r4, #4]
 81110d2:	bf04      	itt	eq
 81110d4:	1809      	addeq	r1, r1, r0
 81110d6:	6021      	streq	r1, [r4, #0]
 81110d8:	6054      	str	r4, [r2, #4]
 81110da:	e7ca      	b.n	8111072 <_free_r+0x22>
 81110dc:	bd38      	pop	{r3, r4, r5, pc}
 81110de:	bf00      	nop
 81110e0:	10008c84 	.word	0x10008c84

081110e4 <malloc>:
 81110e4:	4b02      	ldr	r3, [pc, #8]	@ (81110f0 <malloc+0xc>)
 81110e6:	4601      	mov	r1, r0
 81110e8:	6818      	ldr	r0, [r3, #0]
 81110ea:	f000 b825 	b.w	8111138 <_malloc_r>
 81110ee:	bf00      	nop
 81110f0:	100000ac 	.word	0x100000ac

081110f4 <sbrk_aligned>:
 81110f4:	b570      	push	{r4, r5, r6, lr}
 81110f6:	4e0f      	ldr	r6, [pc, #60]	@ (8111134 <sbrk_aligned+0x40>)
 81110f8:	460c      	mov	r4, r1
 81110fa:	6831      	ldr	r1, [r6, #0]
 81110fc:	4605      	mov	r5, r0
 81110fe:	b911      	cbnz	r1, 8111106 <sbrk_aligned+0x12>
 8111100:	f001 ffe4 	bl	81130cc <_sbrk_r>
 8111104:	6030      	str	r0, [r6, #0]
 8111106:	4621      	mov	r1, r4
 8111108:	4628      	mov	r0, r5
 811110a:	f001 ffdf 	bl	81130cc <_sbrk_r>
 811110e:	1c43      	adds	r3, r0, #1
 8111110:	d103      	bne.n	811111a <sbrk_aligned+0x26>
 8111112:	f04f 34ff 	mov.w	r4, #4294967295
 8111116:	4620      	mov	r0, r4
 8111118:	bd70      	pop	{r4, r5, r6, pc}
 811111a:	1cc4      	adds	r4, r0, #3
 811111c:	f024 0403 	bic.w	r4, r4, #3
 8111120:	42a0      	cmp	r0, r4
 8111122:	d0f8      	beq.n	8111116 <sbrk_aligned+0x22>
 8111124:	1a21      	subs	r1, r4, r0
 8111126:	4628      	mov	r0, r5
 8111128:	f001 ffd0 	bl	81130cc <_sbrk_r>
 811112c:	3001      	adds	r0, #1
 811112e:	d1f2      	bne.n	8111116 <sbrk_aligned+0x22>
 8111130:	e7ef      	b.n	8111112 <sbrk_aligned+0x1e>
 8111132:	bf00      	nop
 8111134:	10008c80 	.word	0x10008c80

08111138 <_malloc_r>:
 8111138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811113c:	1ccd      	adds	r5, r1, #3
 811113e:	f025 0503 	bic.w	r5, r5, #3
 8111142:	3508      	adds	r5, #8
 8111144:	2d0c      	cmp	r5, #12
 8111146:	bf38      	it	cc
 8111148:	250c      	movcc	r5, #12
 811114a:	2d00      	cmp	r5, #0
 811114c:	4606      	mov	r6, r0
 811114e:	db01      	blt.n	8111154 <_malloc_r+0x1c>
 8111150:	42a9      	cmp	r1, r5
 8111152:	d904      	bls.n	811115e <_malloc_r+0x26>
 8111154:	230c      	movs	r3, #12
 8111156:	6033      	str	r3, [r6, #0]
 8111158:	2000      	movs	r0, #0
 811115a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811115e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8111234 <_malloc_r+0xfc>
 8111162:	f000 f869 	bl	8111238 <__malloc_lock>
 8111166:	f8d8 3000 	ldr.w	r3, [r8]
 811116a:	461c      	mov	r4, r3
 811116c:	bb44      	cbnz	r4, 81111c0 <_malloc_r+0x88>
 811116e:	4629      	mov	r1, r5
 8111170:	4630      	mov	r0, r6
 8111172:	f7ff ffbf 	bl	81110f4 <sbrk_aligned>
 8111176:	1c43      	adds	r3, r0, #1
 8111178:	4604      	mov	r4, r0
 811117a:	d158      	bne.n	811122e <_malloc_r+0xf6>
 811117c:	f8d8 4000 	ldr.w	r4, [r8]
 8111180:	4627      	mov	r7, r4
 8111182:	2f00      	cmp	r7, #0
 8111184:	d143      	bne.n	811120e <_malloc_r+0xd6>
 8111186:	2c00      	cmp	r4, #0
 8111188:	d04b      	beq.n	8111222 <_malloc_r+0xea>
 811118a:	6823      	ldr	r3, [r4, #0]
 811118c:	4639      	mov	r1, r7
 811118e:	4630      	mov	r0, r6
 8111190:	eb04 0903 	add.w	r9, r4, r3
 8111194:	f001 ff9a 	bl	81130cc <_sbrk_r>
 8111198:	4581      	cmp	r9, r0
 811119a:	d142      	bne.n	8111222 <_malloc_r+0xea>
 811119c:	6821      	ldr	r1, [r4, #0]
 811119e:	1a6d      	subs	r5, r5, r1
 81111a0:	4629      	mov	r1, r5
 81111a2:	4630      	mov	r0, r6
 81111a4:	f7ff ffa6 	bl	81110f4 <sbrk_aligned>
 81111a8:	3001      	adds	r0, #1
 81111aa:	d03a      	beq.n	8111222 <_malloc_r+0xea>
 81111ac:	6823      	ldr	r3, [r4, #0]
 81111ae:	442b      	add	r3, r5
 81111b0:	6023      	str	r3, [r4, #0]
 81111b2:	f8d8 3000 	ldr.w	r3, [r8]
 81111b6:	685a      	ldr	r2, [r3, #4]
 81111b8:	bb62      	cbnz	r2, 8111214 <_malloc_r+0xdc>
 81111ba:	f8c8 7000 	str.w	r7, [r8]
 81111be:	e00f      	b.n	81111e0 <_malloc_r+0xa8>
 81111c0:	6822      	ldr	r2, [r4, #0]
 81111c2:	1b52      	subs	r2, r2, r5
 81111c4:	d420      	bmi.n	8111208 <_malloc_r+0xd0>
 81111c6:	2a0b      	cmp	r2, #11
 81111c8:	d917      	bls.n	81111fa <_malloc_r+0xc2>
 81111ca:	1961      	adds	r1, r4, r5
 81111cc:	42a3      	cmp	r3, r4
 81111ce:	6025      	str	r5, [r4, #0]
 81111d0:	bf18      	it	ne
 81111d2:	6059      	strne	r1, [r3, #4]
 81111d4:	6863      	ldr	r3, [r4, #4]
 81111d6:	bf08      	it	eq
 81111d8:	f8c8 1000 	streq.w	r1, [r8]
 81111dc:	5162      	str	r2, [r4, r5]
 81111de:	604b      	str	r3, [r1, #4]
 81111e0:	4630      	mov	r0, r6
 81111e2:	f000 f82f 	bl	8111244 <__malloc_unlock>
 81111e6:	f104 000b 	add.w	r0, r4, #11
 81111ea:	1d23      	adds	r3, r4, #4
 81111ec:	f020 0007 	bic.w	r0, r0, #7
 81111f0:	1ac2      	subs	r2, r0, r3
 81111f2:	bf1c      	itt	ne
 81111f4:	1a1b      	subne	r3, r3, r0
 81111f6:	50a3      	strne	r3, [r4, r2]
 81111f8:	e7af      	b.n	811115a <_malloc_r+0x22>
 81111fa:	6862      	ldr	r2, [r4, #4]
 81111fc:	42a3      	cmp	r3, r4
 81111fe:	bf0c      	ite	eq
 8111200:	f8c8 2000 	streq.w	r2, [r8]
 8111204:	605a      	strne	r2, [r3, #4]
 8111206:	e7eb      	b.n	81111e0 <_malloc_r+0xa8>
 8111208:	4623      	mov	r3, r4
 811120a:	6864      	ldr	r4, [r4, #4]
 811120c:	e7ae      	b.n	811116c <_malloc_r+0x34>
 811120e:	463c      	mov	r4, r7
 8111210:	687f      	ldr	r7, [r7, #4]
 8111212:	e7b6      	b.n	8111182 <_malloc_r+0x4a>
 8111214:	461a      	mov	r2, r3
 8111216:	685b      	ldr	r3, [r3, #4]
 8111218:	42a3      	cmp	r3, r4
 811121a:	d1fb      	bne.n	8111214 <_malloc_r+0xdc>
 811121c:	2300      	movs	r3, #0
 811121e:	6053      	str	r3, [r2, #4]
 8111220:	e7de      	b.n	81111e0 <_malloc_r+0xa8>
 8111222:	230c      	movs	r3, #12
 8111224:	6033      	str	r3, [r6, #0]
 8111226:	4630      	mov	r0, r6
 8111228:	f000 f80c 	bl	8111244 <__malloc_unlock>
 811122c:	e794      	b.n	8111158 <_malloc_r+0x20>
 811122e:	6005      	str	r5, [r0, #0]
 8111230:	e7d6      	b.n	81111e0 <_malloc_r+0xa8>
 8111232:	bf00      	nop
 8111234:	10008c84 	.word	0x10008c84

08111238 <__malloc_lock>:
 8111238:	4801      	ldr	r0, [pc, #4]	@ (8111240 <__malloc_lock+0x8>)
 811123a:	f7ff b886 	b.w	811034a <__retarget_lock_acquire_recursive>
 811123e:	bf00      	nop
 8111240:	10008c7c 	.word	0x10008c7c

08111244 <__malloc_unlock>:
 8111244:	4801      	ldr	r0, [pc, #4]	@ (811124c <__malloc_unlock+0x8>)
 8111246:	f7ff b881 	b.w	811034c <__retarget_lock_release_recursive>
 811124a:	bf00      	nop
 811124c:	10008c7c 	.word	0x10008c7c

08111250 <_Balloc>:
 8111250:	b570      	push	{r4, r5, r6, lr}
 8111252:	69c6      	ldr	r6, [r0, #28]
 8111254:	4604      	mov	r4, r0
 8111256:	460d      	mov	r5, r1
 8111258:	b976      	cbnz	r6, 8111278 <_Balloc+0x28>
 811125a:	2010      	movs	r0, #16
 811125c:	f7ff ff42 	bl	81110e4 <malloc>
 8111260:	4602      	mov	r2, r0
 8111262:	61e0      	str	r0, [r4, #28]
 8111264:	b920      	cbnz	r0, 8111270 <_Balloc+0x20>
 8111266:	4b18      	ldr	r3, [pc, #96]	@ (81112c8 <_Balloc+0x78>)
 8111268:	4818      	ldr	r0, [pc, #96]	@ (81112cc <_Balloc+0x7c>)
 811126a:	216b      	movs	r1, #107	@ 0x6b
 811126c:	f7ff f884 	bl	8110378 <__assert_func>
 8111270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8111274:	6006      	str	r6, [r0, #0]
 8111276:	60c6      	str	r6, [r0, #12]
 8111278:	69e6      	ldr	r6, [r4, #28]
 811127a:	68f3      	ldr	r3, [r6, #12]
 811127c:	b183      	cbz	r3, 81112a0 <_Balloc+0x50>
 811127e:	69e3      	ldr	r3, [r4, #28]
 8111280:	68db      	ldr	r3, [r3, #12]
 8111282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8111286:	b9b8      	cbnz	r0, 81112b8 <_Balloc+0x68>
 8111288:	2101      	movs	r1, #1
 811128a:	fa01 f605 	lsl.w	r6, r1, r5
 811128e:	1d72      	adds	r2, r6, #5
 8111290:	0092      	lsls	r2, r2, #2
 8111292:	4620      	mov	r0, r4
 8111294:	f001 ff3b 	bl	811310e <_calloc_r>
 8111298:	b160      	cbz	r0, 81112b4 <_Balloc+0x64>
 811129a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 811129e:	e00e      	b.n	81112be <_Balloc+0x6e>
 81112a0:	2221      	movs	r2, #33	@ 0x21
 81112a2:	2104      	movs	r1, #4
 81112a4:	4620      	mov	r0, r4
 81112a6:	f001 ff32 	bl	811310e <_calloc_r>
 81112aa:	69e3      	ldr	r3, [r4, #28]
 81112ac:	60f0      	str	r0, [r6, #12]
 81112ae:	68db      	ldr	r3, [r3, #12]
 81112b0:	2b00      	cmp	r3, #0
 81112b2:	d1e4      	bne.n	811127e <_Balloc+0x2e>
 81112b4:	2000      	movs	r0, #0
 81112b6:	bd70      	pop	{r4, r5, r6, pc}
 81112b8:	6802      	ldr	r2, [r0, #0]
 81112ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81112be:	2300      	movs	r3, #0
 81112c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81112c4:	e7f7      	b.n	81112b6 <_Balloc+0x66>
 81112c6:	bf00      	nop
 81112c8:	08113988 	.word	0x08113988
 81112cc:	08113ae2 	.word	0x08113ae2

081112d0 <_Bfree>:
 81112d0:	b570      	push	{r4, r5, r6, lr}
 81112d2:	69c6      	ldr	r6, [r0, #28]
 81112d4:	4605      	mov	r5, r0
 81112d6:	460c      	mov	r4, r1
 81112d8:	b976      	cbnz	r6, 81112f8 <_Bfree+0x28>
 81112da:	2010      	movs	r0, #16
 81112dc:	f7ff ff02 	bl	81110e4 <malloc>
 81112e0:	4602      	mov	r2, r0
 81112e2:	61e8      	str	r0, [r5, #28]
 81112e4:	b920      	cbnz	r0, 81112f0 <_Bfree+0x20>
 81112e6:	4b09      	ldr	r3, [pc, #36]	@ (811130c <_Bfree+0x3c>)
 81112e8:	4809      	ldr	r0, [pc, #36]	@ (8111310 <_Bfree+0x40>)
 81112ea:	218f      	movs	r1, #143	@ 0x8f
 81112ec:	f7ff f844 	bl	8110378 <__assert_func>
 81112f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81112f4:	6006      	str	r6, [r0, #0]
 81112f6:	60c6      	str	r6, [r0, #12]
 81112f8:	b13c      	cbz	r4, 811130a <_Bfree+0x3a>
 81112fa:	69eb      	ldr	r3, [r5, #28]
 81112fc:	6862      	ldr	r2, [r4, #4]
 81112fe:	68db      	ldr	r3, [r3, #12]
 8111300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8111304:	6021      	str	r1, [r4, #0]
 8111306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 811130a:	bd70      	pop	{r4, r5, r6, pc}
 811130c:	08113988 	.word	0x08113988
 8111310:	08113ae2 	.word	0x08113ae2

08111314 <__multadd>:
 8111314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111318:	690d      	ldr	r5, [r1, #16]
 811131a:	4607      	mov	r7, r0
 811131c:	460c      	mov	r4, r1
 811131e:	461e      	mov	r6, r3
 8111320:	f101 0c14 	add.w	ip, r1, #20
 8111324:	2000      	movs	r0, #0
 8111326:	f8dc 3000 	ldr.w	r3, [ip]
 811132a:	b299      	uxth	r1, r3
 811132c:	fb02 6101 	mla	r1, r2, r1, r6
 8111330:	0c1e      	lsrs	r6, r3, #16
 8111332:	0c0b      	lsrs	r3, r1, #16
 8111334:	fb02 3306 	mla	r3, r2, r6, r3
 8111338:	b289      	uxth	r1, r1
 811133a:	3001      	adds	r0, #1
 811133c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8111340:	4285      	cmp	r5, r0
 8111342:	f84c 1b04 	str.w	r1, [ip], #4
 8111346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 811134a:	dcec      	bgt.n	8111326 <__multadd+0x12>
 811134c:	b30e      	cbz	r6, 8111392 <__multadd+0x7e>
 811134e:	68a3      	ldr	r3, [r4, #8]
 8111350:	42ab      	cmp	r3, r5
 8111352:	dc19      	bgt.n	8111388 <__multadd+0x74>
 8111354:	6861      	ldr	r1, [r4, #4]
 8111356:	4638      	mov	r0, r7
 8111358:	3101      	adds	r1, #1
 811135a:	f7ff ff79 	bl	8111250 <_Balloc>
 811135e:	4680      	mov	r8, r0
 8111360:	b928      	cbnz	r0, 811136e <__multadd+0x5a>
 8111362:	4602      	mov	r2, r0
 8111364:	4b0c      	ldr	r3, [pc, #48]	@ (8111398 <__multadd+0x84>)
 8111366:	480d      	ldr	r0, [pc, #52]	@ (811139c <__multadd+0x88>)
 8111368:	21ba      	movs	r1, #186	@ 0xba
 811136a:	f7ff f805 	bl	8110378 <__assert_func>
 811136e:	6922      	ldr	r2, [r4, #16]
 8111370:	3202      	adds	r2, #2
 8111372:	f104 010c 	add.w	r1, r4, #12
 8111376:	0092      	lsls	r2, r2, #2
 8111378:	300c      	adds	r0, #12
 811137a:	f7fe ffe8 	bl	811034e <memcpy>
 811137e:	4621      	mov	r1, r4
 8111380:	4638      	mov	r0, r7
 8111382:	f7ff ffa5 	bl	81112d0 <_Bfree>
 8111386:	4644      	mov	r4, r8
 8111388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 811138c:	3501      	adds	r5, #1
 811138e:	615e      	str	r6, [r3, #20]
 8111390:	6125      	str	r5, [r4, #16]
 8111392:	4620      	mov	r0, r4
 8111394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8111398:	08113ad1 	.word	0x08113ad1
 811139c:	08113ae2 	.word	0x08113ae2

081113a0 <__s2b>:
 81113a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81113a4:	460c      	mov	r4, r1
 81113a6:	4615      	mov	r5, r2
 81113a8:	461f      	mov	r7, r3
 81113aa:	2209      	movs	r2, #9
 81113ac:	3308      	adds	r3, #8
 81113ae:	4606      	mov	r6, r0
 81113b0:	fb93 f3f2 	sdiv	r3, r3, r2
 81113b4:	2100      	movs	r1, #0
 81113b6:	2201      	movs	r2, #1
 81113b8:	429a      	cmp	r2, r3
 81113ba:	db09      	blt.n	81113d0 <__s2b+0x30>
 81113bc:	4630      	mov	r0, r6
 81113be:	f7ff ff47 	bl	8111250 <_Balloc>
 81113c2:	b940      	cbnz	r0, 81113d6 <__s2b+0x36>
 81113c4:	4602      	mov	r2, r0
 81113c6:	4b19      	ldr	r3, [pc, #100]	@ (811142c <__s2b+0x8c>)
 81113c8:	4819      	ldr	r0, [pc, #100]	@ (8111430 <__s2b+0x90>)
 81113ca:	21d3      	movs	r1, #211	@ 0xd3
 81113cc:	f7fe ffd4 	bl	8110378 <__assert_func>
 81113d0:	0052      	lsls	r2, r2, #1
 81113d2:	3101      	adds	r1, #1
 81113d4:	e7f0      	b.n	81113b8 <__s2b+0x18>
 81113d6:	9b08      	ldr	r3, [sp, #32]
 81113d8:	6143      	str	r3, [r0, #20]
 81113da:	2d09      	cmp	r5, #9
 81113dc:	f04f 0301 	mov.w	r3, #1
 81113e0:	6103      	str	r3, [r0, #16]
 81113e2:	dd16      	ble.n	8111412 <__s2b+0x72>
 81113e4:	f104 0909 	add.w	r9, r4, #9
 81113e8:	46c8      	mov	r8, r9
 81113ea:	442c      	add	r4, r5
 81113ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 81113f0:	4601      	mov	r1, r0
 81113f2:	3b30      	subs	r3, #48	@ 0x30
 81113f4:	220a      	movs	r2, #10
 81113f6:	4630      	mov	r0, r6
 81113f8:	f7ff ff8c 	bl	8111314 <__multadd>
 81113fc:	45a0      	cmp	r8, r4
 81113fe:	d1f5      	bne.n	81113ec <__s2b+0x4c>
 8111400:	f1a5 0408 	sub.w	r4, r5, #8
 8111404:	444c      	add	r4, r9
 8111406:	1b2d      	subs	r5, r5, r4
 8111408:	1963      	adds	r3, r4, r5
 811140a:	42bb      	cmp	r3, r7
 811140c:	db04      	blt.n	8111418 <__s2b+0x78>
 811140e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111412:	340a      	adds	r4, #10
 8111414:	2509      	movs	r5, #9
 8111416:	e7f6      	b.n	8111406 <__s2b+0x66>
 8111418:	f814 3b01 	ldrb.w	r3, [r4], #1
 811141c:	4601      	mov	r1, r0
 811141e:	3b30      	subs	r3, #48	@ 0x30
 8111420:	220a      	movs	r2, #10
 8111422:	4630      	mov	r0, r6
 8111424:	f7ff ff76 	bl	8111314 <__multadd>
 8111428:	e7ee      	b.n	8111408 <__s2b+0x68>
 811142a:	bf00      	nop
 811142c:	08113ad1 	.word	0x08113ad1
 8111430:	08113ae2 	.word	0x08113ae2

08111434 <__hi0bits>:
 8111434:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8111438:	4603      	mov	r3, r0
 811143a:	bf36      	itet	cc
 811143c:	0403      	lslcc	r3, r0, #16
 811143e:	2000      	movcs	r0, #0
 8111440:	2010      	movcc	r0, #16
 8111442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8111446:	bf3c      	itt	cc
 8111448:	021b      	lslcc	r3, r3, #8
 811144a:	3008      	addcc	r0, #8
 811144c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8111450:	bf3c      	itt	cc
 8111452:	011b      	lslcc	r3, r3, #4
 8111454:	3004      	addcc	r0, #4
 8111456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811145a:	bf3c      	itt	cc
 811145c:	009b      	lslcc	r3, r3, #2
 811145e:	3002      	addcc	r0, #2
 8111460:	2b00      	cmp	r3, #0
 8111462:	db05      	blt.n	8111470 <__hi0bits+0x3c>
 8111464:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8111468:	f100 0001 	add.w	r0, r0, #1
 811146c:	bf08      	it	eq
 811146e:	2020      	moveq	r0, #32
 8111470:	4770      	bx	lr

08111472 <__lo0bits>:
 8111472:	6803      	ldr	r3, [r0, #0]
 8111474:	4602      	mov	r2, r0
 8111476:	f013 0007 	ands.w	r0, r3, #7
 811147a:	d00b      	beq.n	8111494 <__lo0bits+0x22>
 811147c:	07d9      	lsls	r1, r3, #31
 811147e:	d421      	bmi.n	81114c4 <__lo0bits+0x52>
 8111480:	0798      	lsls	r0, r3, #30
 8111482:	bf49      	itett	mi
 8111484:	085b      	lsrmi	r3, r3, #1
 8111486:	089b      	lsrpl	r3, r3, #2
 8111488:	2001      	movmi	r0, #1
 811148a:	6013      	strmi	r3, [r2, #0]
 811148c:	bf5c      	itt	pl
 811148e:	6013      	strpl	r3, [r2, #0]
 8111490:	2002      	movpl	r0, #2
 8111492:	4770      	bx	lr
 8111494:	b299      	uxth	r1, r3
 8111496:	b909      	cbnz	r1, 811149c <__lo0bits+0x2a>
 8111498:	0c1b      	lsrs	r3, r3, #16
 811149a:	2010      	movs	r0, #16
 811149c:	b2d9      	uxtb	r1, r3
 811149e:	b909      	cbnz	r1, 81114a4 <__lo0bits+0x32>
 81114a0:	3008      	adds	r0, #8
 81114a2:	0a1b      	lsrs	r3, r3, #8
 81114a4:	0719      	lsls	r1, r3, #28
 81114a6:	bf04      	itt	eq
 81114a8:	091b      	lsreq	r3, r3, #4
 81114aa:	3004      	addeq	r0, #4
 81114ac:	0799      	lsls	r1, r3, #30
 81114ae:	bf04      	itt	eq
 81114b0:	089b      	lsreq	r3, r3, #2
 81114b2:	3002      	addeq	r0, #2
 81114b4:	07d9      	lsls	r1, r3, #31
 81114b6:	d403      	bmi.n	81114c0 <__lo0bits+0x4e>
 81114b8:	085b      	lsrs	r3, r3, #1
 81114ba:	f100 0001 	add.w	r0, r0, #1
 81114be:	d003      	beq.n	81114c8 <__lo0bits+0x56>
 81114c0:	6013      	str	r3, [r2, #0]
 81114c2:	4770      	bx	lr
 81114c4:	2000      	movs	r0, #0
 81114c6:	4770      	bx	lr
 81114c8:	2020      	movs	r0, #32
 81114ca:	4770      	bx	lr

081114cc <__i2b>:
 81114cc:	b510      	push	{r4, lr}
 81114ce:	460c      	mov	r4, r1
 81114d0:	2101      	movs	r1, #1
 81114d2:	f7ff febd 	bl	8111250 <_Balloc>
 81114d6:	4602      	mov	r2, r0
 81114d8:	b928      	cbnz	r0, 81114e6 <__i2b+0x1a>
 81114da:	4b05      	ldr	r3, [pc, #20]	@ (81114f0 <__i2b+0x24>)
 81114dc:	4805      	ldr	r0, [pc, #20]	@ (81114f4 <__i2b+0x28>)
 81114de:	f240 1145 	movw	r1, #325	@ 0x145
 81114e2:	f7fe ff49 	bl	8110378 <__assert_func>
 81114e6:	2301      	movs	r3, #1
 81114e8:	6144      	str	r4, [r0, #20]
 81114ea:	6103      	str	r3, [r0, #16]
 81114ec:	bd10      	pop	{r4, pc}
 81114ee:	bf00      	nop
 81114f0:	08113ad1 	.word	0x08113ad1
 81114f4:	08113ae2 	.word	0x08113ae2

081114f8 <__multiply>:
 81114f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81114fc:	4614      	mov	r4, r2
 81114fe:	690a      	ldr	r2, [r1, #16]
 8111500:	6923      	ldr	r3, [r4, #16]
 8111502:	429a      	cmp	r2, r3
 8111504:	bfa8      	it	ge
 8111506:	4623      	movge	r3, r4
 8111508:	460f      	mov	r7, r1
 811150a:	bfa4      	itt	ge
 811150c:	460c      	movge	r4, r1
 811150e:	461f      	movge	r7, r3
 8111510:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8111514:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8111518:	68a3      	ldr	r3, [r4, #8]
 811151a:	6861      	ldr	r1, [r4, #4]
 811151c:	eb0a 0609 	add.w	r6, sl, r9
 8111520:	42b3      	cmp	r3, r6
 8111522:	b085      	sub	sp, #20
 8111524:	bfb8      	it	lt
 8111526:	3101      	addlt	r1, #1
 8111528:	f7ff fe92 	bl	8111250 <_Balloc>
 811152c:	b930      	cbnz	r0, 811153c <__multiply+0x44>
 811152e:	4602      	mov	r2, r0
 8111530:	4b44      	ldr	r3, [pc, #272]	@ (8111644 <__multiply+0x14c>)
 8111532:	4845      	ldr	r0, [pc, #276]	@ (8111648 <__multiply+0x150>)
 8111534:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8111538:	f7fe ff1e 	bl	8110378 <__assert_func>
 811153c:	f100 0514 	add.w	r5, r0, #20
 8111540:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8111544:	462b      	mov	r3, r5
 8111546:	2200      	movs	r2, #0
 8111548:	4543      	cmp	r3, r8
 811154a:	d321      	bcc.n	8111590 <__multiply+0x98>
 811154c:	f107 0114 	add.w	r1, r7, #20
 8111550:	f104 0214 	add.w	r2, r4, #20
 8111554:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8111558:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 811155c:	9302      	str	r3, [sp, #8]
 811155e:	1b13      	subs	r3, r2, r4
 8111560:	3b15      	subs	r3, #21
 8111562:	f023 0303 	bic.w	r3, r3, #3
 8111566:	3304      	adds	r3, #4
 8111568:	f104 0715 	add.w	r7, r4, #21
 811156c:	42ba      	cmp	r2, r7
 811156e:	bf38      	it	cc
 8111570:	2304      	movcc	r3, #4
 8111572:	9301      	str	r3, [sp, #4]
 8111574:	9b02      	ldr	r3, [sp, #8]
 8111576:	9103      	str	r1, [sp, #12]
 8111578:	428b      	cmp	r3, r1
 811157a:	d80c      	bhi.n	8111596 <__multiply+0x9e>
 811157c:	2e00      	cmp	r6, #0
 811157e:	dd03      	ble.n	8111588 <__multiply+0x90>
 8111580:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8111584:	2b00      	cmp	r3, #0
 8111586:	d05b      	beq.n	8111640 <__multiply+0x148>
 8111588:	6106      	str	r6, [r0, #16]
 811158a:	b005      	add	sp, #20
 811158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111590:	f843 2b04 	str.w	r2, [r3], #4
 8111594:	e7d8      	b.n	8111548 <__multiply+0x50>
 8111596:	f8b1 a000 	ldrh.w	sl, [r1]
 811159a:	f1ba 0f00 	cmp.w	sl, #0
 811159e:	d024      	beq.n	81115ea <__multiply+0xf2>
 81115a0:	f104 0e14 	add.w	lr, r4, #20
 81115a4:	46a9      	mov	r9, r5
 81115a6:	f04f 0c00 	mov.w	ip, #0
 81115aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 81115ae:	f8d9 3000 	ldr.w	r3, [r9]
 81115b2:	fa1f fb87 	uxth.w	fp, r7
 81115b6:	b29b      	uxth	r3, r3
 81115b8:	fb0a 330b 	mla	r3, sl, fp, r3
 81115bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 81115c0:	f8d9 7000 	ldr.w	r7, [r9]
 81115c4:	4463      	add	r3, ip
 81115c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81115ca:	fb0a c70b 	mla	r7, sl, fp, ip
 81115ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 81115d2:	b29b      	uxth	r3, r3
 81115d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81115d8:	4572      	cmp	r2, lr
 81115da:	f849 3b04 	str.w	r3, [r9], #4
 81115de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81115e2:	d8e2      	bhi.n	81115aa <__multiply+0xb2>
 81115e4:	9b01      	ldr	r3, [sp, #4]
 81115e6:	f845 c003 	str.w	ip, [r5, r3]
 81115ea:	9b03      	ldr	r3, [sp, #12]
 81115ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 81115f0:	3104      	adds	r1, #4
 81115f2:	f1b9 0f00 	cmp.w	r9, #0
 81115f6:	d021      	beq.n	811163c <__multiply+0x144>
 81115f8:	682b      	ldr	r3, [r5, #0]
 81115fa:	f104 0c14 	add.w	ip, r4, #20
 81115fe:	46ae      	mov	lr, r5
 8111600:	f04f 0a00 	mov.w	sl, #0
 8111604:	f8bc b000 	ldrh.w	fp, [ip]
 8111608:	f8be 7002 	ldrh.w	r7, [lr, #2]
 811160c:	fb09 770b 	mla	r7, r9, fp, r7
 8111610:	4457      	add	r7, sl
 8111612:	b29b      	uxth	r3, r3
 8111614:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8111618:	f84e 3b04 	str.w	r3, [lr], #4
 811161c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8111620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8111624:	f8be 3000 	ldrh.w	r3, [lr]
 8111628:	fb09 330a 	mla	r3, r9, sl, r3
 811162c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8111630:	4562      	cmp	r2, ip
 8111632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8111636:	d8e5      	bhi.n	8111604 <__multiply+0x10c>
 8111638:	9f01      	ldr	r7, [sp, #4]
 811163a:	51eb      	str	r3, [r5, r7]
 811163c:	3504      	adds	r5, #4
 811163e:	e799      	b.n	8111574 <__multiply+0x7c>
 8111640:	3e01      	subs	r6, #1
 8111642:	e79b      	b.n	811157c <__multiply+0x84>
 8111644:	08113ad1 	.word	0x08113ad1
 8111648:	08113ae2 	.word	0x08113ae2

0811164c <__pow5mult>:
 811164c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111650:	4615      	mov	r5, r2
 8111652:	f012 0203 	ands.w	r2, r2, #3
 8111656:	4607      	mov	r7, r0
 8111658:	460e      	mov	r6, r1
 811165a:	d007      	beq.n	811166c <__pow5mult+0x20>
 811165c:	4c25      	ldr	r4, [pc, #148]	@ (81116f4 <__pow5mult+0xa8>)
 811165e:	3a01      	subs	r2, #1
 8111660:	2300      	movs	r3, #0
 8111662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8111666:	f7ff fe55 	bl	8111314 <__multadd>
 811166a:	4606      	mov	r6, r0
 811166c:	10ad      	asrs	r5, r5, #2
 811166e:	d03d      	beq.n	81116ec <__pow5mult+0xa0>
 8111670:	69fc      	ldr	r4, [r7, #28]
 8111672:	b97c      	cbnz	r4, 8111694 <__pow5mult+0x48>
 8111674:	2010      	movs	r0, #16
 8111676:	f7ff fd35 	bl	81110e4 <malloc>
 811167a:	4602      	mov	r2, r0
 811167c:	61f8      	str	r0, [r7, #28]
 811167e:	b928      	cbnz	r0, 811168c <__pow5mult+0x40>
 8111680:	4b1d      	ldr	r3, [pc, #116]	@ (81116f8 <__pow5mult+0xac>)
 8111682:	481e      	ldr	r0, [pc, #120]	@ (81116fc <__pow5mult+0xb0>)
 8111684:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8111688:	f7fe fe76 	bl	8110378 <__assert_func>
 811168c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8111690:	6004      	str	r4, [r0, #0]
 8111692:	60c4      	str	r4, [r0, #12]
 8111694:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8111698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 811169c:	b94c      	cbnz	r4, 81116b2 <__pow5mult+0x66>
 811169e:	f240 2171 	movw	r1, #625	@ 0x271
 81116a2:	4638      	mov	r0, r7
 81116a4:	f7ff ff12 	bl	81114cc <__i2b>
 81116a8:	2300      	movs	r3, #0
 81116aa:	f8c8 0008 	str.w	r0, [r8, #8]
 81116ae:	4604      	mov	r4, r0
 81116b0:	6003      	str	r3, [r0, #0]
 81116b2:	f04f 0900 	mov.w	r9, #0
 81116b6:	07eb      	lsls	r3, r5, #31
 81116b8:	d50a      	bpl.n	81116d0 <__pow5mult+0x84>
 81116ba:	4631      	mov	r1, r6
 81116bc:	4622      	mov	r2, r4
 81116be:	4638      	mov	r0, r7
 81116c0:	f7ff ff1a 	bl	81114f8 <__multiply>
 81116c4:	4631      	mov	r1, r6
 81116c6:	4680      	mov	r8, r0
 81116c8:	4638      	mov	r0, r7
 81116ca:	f7ff fe01 	bl	81112d0 <_Bfree>
 81116ce:	4646      	mov	r6, r8
 81116d0:	106d      	asrs	r5, r5, #1
 81116d2:	d00b      	beq.n	81116ec <__pow5mult+0xa0>
 81116d4:	6820      	ldr	r0, [r4, #0]
 81116d6:	b938      	cbnz	r0, 81116e8 <__pow5mult+0x9c>
 81116d8:	4622      	mov	r2, r4
 81116da:	4621      	mov	r1, r4
 81116dc:	4638      	mov	r0, r7
 81116de:	f7ff ff0b 	bl	81114f8 <__multiply>
 81116e2:	6020      	str	r0, [r4, #0]
 81116e4:	f8c0 9000 	str.w	r9, [r0]
 81116e8:	4604      	mov	r4, r0
 81116ea:	e7e4      	b.n	81116b6 <__pow5mult+0x6a>
 81116ec:	4630      	mov	r0, r6
 81116ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81116f2:	bf00      	nop
 81116f4:	08113b3c 	.word	0x08113b3c
 81116f8:	08113988 	.word	0x08113988
 81116fc:	08113ae2 	.word	0x08113ae2

08111700 <__lshift>:
 8111700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111704:	460c      	mov	r4, r1
 8111706:	6849      	ldr	r1, [r1, #4]
 8111708:	6923      	ldr	r3, [r4, #16]
 811170a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 811170e:	68a3      	ldr	r3, [r4, #8]
 8111710:	4607      	mov	r7, r0
 8111712:	4691      	mov	r9, r2
 8111714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8111718:	f108 0601 	add.w	r6, r8, #1
 811171c:	42b3      	cmp	r3, r6
 811171e:	db0b      	blt.n	8111738 <__lshift+0x38>
 8111720:	4638      	mov	r0, r7
 8111722:	f7ff fd95 	bl	8111250 <_Balloc>
 8111726:	4605      	mov	r5, r0
 8111728:	b948      	cbnz	r0, 811173e <__lshift+0x3e>
 811172a:	4602      	mov	r2, r0
 811172c:	4b28      	ldr	r3, [pc, #160]	@ (81117d0 <__lshift+0xd0>)
 811172e:	4829      	ldr	r0, [pc, #164]	@ (81117d4 <__lshift+0xd4>)
 8111730:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8111734:	f7fe fe20 	bl	8110378 <__assert_func>
 8111738:	3101      	adds	r1, #1
 811173a:	005b      	lsls	r3, r3, #1
 811173c:	e7ee      	b.n	811171c <__lshift+0x1c>
 811173e:	2300      	movs	r3, #0
 8111740:	f100 0114 	add.w	r1, r0, #20
 8111744:	f100 0210 	add.w	r2, r0, #16
 8111748:	4618      	mov	r0, r3
 811174a:	4553      	cmp	r3, sl
 811174c:	db33      	blt.n	81117b6 <__lshift+0xb6>
 811174e:	6920      	ldr	r0, [r4, #16]
 8111750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8111754:	f104 0314 	add.w	r3, r4, #20
 8111758:	f019 091f 	ands.w	r9, r9, #31
 811175c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8111760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8111764:	d02b      	beq.n	81117be <__lshift+0xbe>
 8111766:	f1c9 0e20 	rsb	lr, r9, #32
 811176a:	468a      	mov	sl, r1
 811176c:	2200      	movs	r2, #0
 811176e:	6818      	ldr	r0, [r3, #0]
 8111770:	fa00 f009 	lsl.w	r0, r0, r9
 8111774:	4310      	orrs	r0, r2
 8111776:	f84a 0b04 	str.w	r0, [sl], #4
 811177a:	f853 2b04 	ldr.w	r2, [r3], #4
 811177e:	459c      	cmp	ip, r3
 8111780:	fa22 f20e 	lsr.w	r2, r2, lr
 8111784:	d8f3      	bhi.n	811176e <__lshift+0x6e>
 8111786:	ebac 0304 	sub.w	r3, ip, r4
 811178a:	3b15      	subs	r3, #21
 811178c:	f023 0303 	bic.w	r3, r3, #3
 8111790:	3304      	adds	r3, #4
 8111792:	f104 0015 	add.w	r0, r4, #21
 8111796:	4584      	cmp	ip, r0
 8111798:	bf38      	it	cc
 811179a:	2304      	movcc	r3, #4
 811179c:	50ca      	str	r2, [r1, r3]
 811179e:	b10a      	cbz	r2, 81117a4 <__lshift+0xa4>
 81117a0:	f108 0602 	add.w	r6, r8, #2
 81117a4:	3e01      	subs	r6, #1
 81117a6:	4638      	mov	r0, r7
 81117a8:	612e      	str	r6, [r5, #16]
 81117aa:	4621      	mov	r1, r4
 81117ac:	f7ff fd90 	bl	81112d0 <_Bfree>
 81117b0:	4628      	mov	r0, r5
 81117b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81117b6:	f842 0f04 	str.w	r0, [r2, #4]!
 81117ba:	3301      	adds	r3, #1
 81117bc:	e7c5      	b.n	811174a <__lshift+0x4a>
 81117be:	3904      	subs	r1, #4
 81117c0:	f853 2b04 	ldr.w	r2, [r3], #4
 81117c4:	f841 2f04 	str.w	r2, [r1, #4]!
 81117c8:	459c      	cmp	ip, r3
 81117ca:	d8f9      	bhi.n	81117c0 <__lshift+0xc0>
 81117cc:	e7ea      	b.n	81117a4 <__lshift+0xa4>
 81117ce:	bf00      	nop
 81117d0:	08113ad1 	.word	0x08113ad1
 81117d4:	08113ae2 	.word	0x08113ae2

081117d8 <__mcmp>:
 81117d8:	690a      	ldr	r2, [r1, #16]
 81117da:	4603      	mov	r3, r0
 81117dc:	6900      	ldr	r0, [r0, #16]
 81117de:	1a80      	subs	r0, r0, r2
 81117e0:	b530      	push	{r4, r5, lr}
 81117e2:	d10e      	bne.n	8111802 <__mcmp+0x2a>
 81117e4:	3314      	adds	r3, #20
 81117e6:	3114      	adds	r1, #20
 81117e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 81117ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 81117f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 81117f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 81117f8:	4295      	cmp	r5, r2
 81117fa:	d003      	beq.n	8111804 <__mcmp+0x2c>
 81117fc:	d205      	bcs.n	811180a <__mcmp+0x32>
 81117fe:	f04f 30ff 	mov.w	r0, #4294967295
 8111802:	bd30      	pop	{r4, r5, pc}
 8111804:	42a3      	cmp	r3, r4
 8111806:	d3f3      	bcc.n	81117f0 <__mcmp+0x18>
 8111808:	e7fb      	b.n	8111802 <__mcmp+0x2a>
 811180a:	2001      	movs	r0, #1
 811180c:	e7f9      	b.n	8111802 <__mcmp+0x2a>
	...

08111810 <__mdiff>:
 8111810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111814:	4689      	mov	r9, r1
 8111816:	4606      	mov	r6, r0
 8111818:	4611      	mov	r1, r2
 811181a:	4648      	mov	r0, r9
 811181c:	4614      	mov	r4, r2
 811181e:	f7ff ffdb 	bl	81117d8 <__mcmp>
 8111822:	1e05      	subs	r5, r0, #0
 8111824:	d112      	bne.n	811184c <__mdiff+0x3c>
 8111826:	4629      	mov	r1, r5
 8111828:	4630      	mov	r0, r6
 811182a:	f7ff fd11 	bl	8111250 <_Balloc>
 811182e:	4602      	mov	r2, r0
 8111830:	b928      	cbnz	r0, 811183e <__mdiff+0x2e>
 8111832:	4b3f      	ldr	r3, [pc, #252]	@ (8111930 <__mdiff+0x120>)
 8111834:	f240 2137 	movw	r1, #567	@ 0x237
 8111838:	483e      	ldr	r0, [pc, #248]	@ (8111934 <__mdiff+0x124>)
 811183a:	f7fe fd9d 	bl	8110378 <__assert_func>
 811183e:	2301      	movs	r3, #1
 8111840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8111844:	4610      	mov	r0, r2
 8111846:	b003      	add	sp, #12
 8111848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811184c:	bfbc      	itt	lt
 811184e:	464b      	movlt	r3, r9
 8111850:	46a1      	movlt	r9, r4
 8111852:	4630      	mov	r0, r6
 8111854:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8111858:	bfba      	itte	lt
 811185a:	461c      	movlt	r4, r3
 811185c:	2501      	movlt	r5, #1
 811185e:	2500      	movge	r5, #0
 8111860:	f7ff fcf6 	bl	8111250 <_Balloc>
 8111864:	4602      	mov	r2, r0
 8111866:	b918      	cbnz	r0, 8111870 <__mdiff+0x60>
 8111868:	4b31      	ldr	r3, [pc, #196]	@ (8111930 <__mdiff+0x120>)
 811186a:	f240 2145 	movw	r1, #581	@ 0x245
 811186e:	e7e3      	b.n	8111838 <__mdiff+0x28>
 8111870:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8111874:	6926      	ldr	r6, [r4, #16]
 8111876:	60c5      	str	r5, [r0, #12]
 8111878:	f109 0310 	add.w	r3, r9, #16
 811187c:	f109 0514 	add.w	r5, r9, #20
 8111880:	f104 0e14 	add.w	lr, r4, #20
 8111884:	f100 0b14 	add.w	fp, r0, #20
 8111888:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 811188c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8111890:	9301      	str	r3, [sp, #4]
 8111892:	46d9      	mov	r9, fp
 8111894:	f04f 0c00 	mov.w	ip, #0
 8111898:	9b01      	ldr	r3, [sp, #4]
 811189a:	f85e 0b04 	ldr.w	r0, [lr], #4
 811189e:	f853 af04 	ldr.w	sl, [r3, #4]!
 81118a2:	9301      	str	r3, [sp, #4]
 81118a4:	fa1f f38a 	uxth.w	r3, sl
 81118a8:	4619      	mov	r1, r3
 81118aa:	b283      	uxth	r3, r0
 81118ac:	1acb      	subs	r3, r1, r3
 81118ae:	0c00      	lsrs	r0, r0, #16
 81118b0:	4463      	add	r3, ip
 81118b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 81118b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 81118ba:	b29b      	uxth	r3, r3
 81118bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 81118c0:	4576      	cmp	r6, lr
 81118c2:	f849 3b04 	str.w	r3, [r9], #4
 81118c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 81118ca:	d8e5      	bhi.n	8111898 <__mdiff+0x88>
 81118cc:	1b33      	subs	r3, r6, r4
 81118ce:	3b15      	subs	r3, #21
 81118d0:	f023 0303 	bic.w	r3, r3, #3
 81118d4:	3415      	adds	r4, #21
 81118d6:	3304      	adds	r3, #4
 81118d8:	42a6      	cmp	r6, r4
 81118da:	bf38      	it	cc
 81118dc:	2304      	movcc	r3, #4
 81118de:	441d      	add	r5, r3
 81118e0:	445b      	add	r3, fp
 81118e2:	461e      	mov	r6, r3
 81118e4:	462c      	mov	r4, r5
 81118e6:	4544      	cmp	r4, r8
 81118e8:	d30e      	bcc.n	8111908 <__mdiff+0xf8>
 81118ea:	f108 0103 	add.w	r1, r8, #3
 81118ee:	1b49      	subs	r1, r1, r5
 81118f0:	f021 0103 	bic.w	r1, r1, #3
 81118f4:	3d03      	subs	r5, #3
 81118f6:	45a8      	cmp	r8, r5
 81118f8:	bf38      	it	cc
 81118fa:	2100      	movcc	r1, #0
 81118fc:	440b      	add	r3, r1
 81118fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8111902:	b191      	cbz	r1, 811192a <__mdiff+0x11a>
 8111904:	6117      	str	r7, [r2, #16]
 8111906:	e79d      	b.n	8111844 <__mdiff+0x34>
 8111908:	f854 1b04 	ldr.w	r1, [r4], #4
 811190c:	46e6      	mov	lr, ip
 811190e:	0c08      	lsrs	r0, r1, #16
 8111910:	fa1c fc81 	uxtah	ip, ip, r1
 8111914:	4471      	add	r1, lr
 8111916:	eb00 402c 	add.w	r0, r0, ip, asr #16
 811191a:	b289      	uxth	r1, r1
 811191c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8111920:	f846 1b04 	str.w	r1, [r6], #4
 8111924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8111928:	e7dd      	b.n	81118e6 <__mdiff+0xd6>
 811192a:	3f01      	subs	r7, #1
 811192c:	e7e7      	b.n	81118fe <__mdiff+0xee>
 811192e:	bf00      	nop
 8111930:	08113ad1 	.word	0x08113ad1
 8111934:	08113ae2 	.word	0x08113ae2

08111938 <__ulp>:
 8111938:	b082      	sub	sp, #8
 811193a:	ed8d 0b00 	vstr	d0, [sp]
 811193e:	9a01      	ldr	r2, [sp, #4]
 8111940:	4b0f      	ldr	r3, [pc, #60]	@ (8111980 <__ulp+0x48>)
 8111942:	4013      	ands	r3, r2
 8111944:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8111948:	2b00      	cmp	r3, #0
 811194a:	dc08      	bgt.n	811195e <__ulp+0x26>
 811194c:	425b      	negs	r3, r3
 811194e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8111952:	ea4f 5223 	mov.w	r2, r3, asr #20
 8111956:	da04      	bge.n	8111962 <__ulp+0x2a>
 8111958:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 811195c:	4113      	asrs	r3, r2
 811195e:	2200      	movs	r2, #0
 8111960:	e008      	b.n	8111974 <__ulp+0x3c>
 8111962:	f1a2 0314 	sub.w	r3, r2, #20
 8111966:	2b1e      	cmp	r3, #30
 8111968:	bfda      	itte	le
 811196a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 811196e:	40da      	lsrle	r2, r3
 8111970:	2201      	movgt	r2, #1
 8111972:	2300      	movs	r3, #0
 8111974:	4619      	mov	r1, r3
 8111976:	4610      	mov	r0, r2
 8111978:	ec41 0b10 	vmov	d0, r0, r1
 811197c:	b002      	add	sp, #8
 811197e:	4770      	bx	lr
 8111980:	7ff00000 	.word	0x7ff00000

08111984 <__b2d>:
 8111984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111988:	6906      	ldr	r6, [r0, #16]
 811198a:	f100 0814 	add.w	r8, r0, #20
 811198e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8111992:	1f37      	subs	r7, r6, #4
 8111994:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8111998:	4610      	mov	r0, r2
 811199a:	f7ff fd4b 	bl	8111434 <__hi0bits>
 811199e:	f1c0 0320 	rsb	r3, r0, #32
 81119a2:	280a      	cmp	r0, #10
 81119a4:	600b      	str	r3, [r1, #0]
 81119a6:	491b      	ldr	r1, [pc, #108]	@ (8111a14 <__b2d+0x90>)
 81119a8:	dc15      	bgt.n	81119d6 <__b2d+0x52>
 81119aa:	f1c0 0c0b 	rsb	ip, r0, #11
 81119ae:	fa22 f30c 	lsr.w	r3, r2, ip
 81119b2:	45b8      	cmp	r8, r7
 81119b4:	ea43 0501 	orr.w	r5, r3, r1
 81119b8:	bf34      	ite	cc
 81119ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 81119be:	2300      	movcs	r3, #0
 81119c0:	3015      	adds	r0, #21
 81119c2:	fa02 f000 	lsl.w	r0, r2, r0
 81119c6:	fa23 f30c 	lsr.w	r3, r3, ip
 81119ca:	4303      	orrs	r3, r0
 81119cc:	461c      	mov	r4, r3
 81119ce:	ec45 4b10 	vmov	d0, r4, r5
 81119d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81119d6:	45b8      	cmp	r8, r7
 81119d8:	bf3a      	itte	cc
 81119da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 81119de:	f1a6 0708 	subcc.w	r7, r6, #8
 81119e2:	2300      	movcs	r3, #0
 81119e4:	380b      	subs	r0, #11
 81119e6:	d012      	beq.n	8111a0e <__b2d+0x8a>
 81119e8:	f1c0 0120 	rsb	r1, r0, #32
 81119ec:	fa23 f401 	lsr.w	r4, r3, r1
 81119f0:	4082      	lsls	r2, r0
 81119f2:	4322      	orrs	r2, r4
 81119f4:	4547      	cmp	r7, r8
 81119f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 81119fa:	bf8c      	ite	hi
 81119fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8111a00:	2200      	movls	r2, #0
 8111a02:	4083      	lsls	r3, r0
 8111a04:	40ca      	lsrs	r2, r1
 8111a06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8111a0a:	4313      	orrs	r3, r2
 8111a0c:	e7de      	b.n	81119cc <__b2d+0x48>
 8111a0e:	ea42 0501 	orr.w	r5, r2, r1
 8111a12:	e7db      	b.n	81119cc <__b2d+0x48>
 8111a14:	3ff00000 	.word	0x3ff00000

08111a18 <__d2b>:
 8111a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8111a1c:	460f      	mov	r7, r1
 8111a1e:	2101      	movs	r1, #1
 8111a20:	ec59 8b10 	vmov	r8, r9, d0
 8111a24:	4616      	mov	r6, r2
 8111a26:	f7ff fc13 	bl	8111250 <_Balloc>
 8111a2a:	4604      	mov	r4, r0
 8111a2c:	b930      	cbnz	r0, 8111a3c <__d2b+0x24>
 8111a2e:	4602      	mov	r2, r0
 8111a30:	4b23      	ldr	r3, [pc, #140]	@ (8111ac0 <__d2b+0xa8>)
 8111a32:	4824      	ldr	r0, [pc, #144]	@ (8111ac4 <__d2b+0xac>)
 8111a34:	f240 310f 	movw	r1, #783	@ 0x30f
 8111a38:	f7fe fc9e 	bl	8110378 <__assert_func>
 8111a3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8111a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8111a44:	b10d      	cbz	r5, 8111a4a <__d2b+0x32>
 8111a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8111a4a:	9301      	str	r3, [sp, #4]
 8111a4c:	f1b8 0300 	subs.w	r3, r8, #0
 8111a50:	d023      	beq.n	8111a9a <__d2b+0x82>
 8111a52:	4668      	mov	r0, sp
 8111a54:	9300      	str	r3, [sp, #0]
 8111a56:	f7ff fd0c 	bl	8111472 <__lo0bits>
 8111a5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8111a5e:	b1d0      	cbz	r0, 8111a96 <__d2b+0x7e>
 8111a60:	f1c0 0320 	rsb	r3, r0, #32
 8111a64:	fa02 f303 	lsl.w	r3, r2, r3
 8111a68:	430b      	orrs	r3, r1
 8111a6a:	40c2      	lsrs	r2, r0
 8111a6c:	6163      	str	r3, [r4, #20]
 8111a6e:	9201      	str	r2, [sp, #4]
 8111a70:	9b01      	ldr	r3, [sp, #4]
 8111a72:	61a3      	str	r3, [r4, #24]
 8111a74:	2b00      	cmp	r3, #0
 8111a76:	bf0c      	ite	eq
 8111a78:	2201      	moveq	r2, #1
 8111a7a:	2202      	movne	r2, #2
 8111a7c:	6122      	str	r2, [r4, #16]
 8111a7e:	b1a5      	cbz	r5, 8111aaa <__d2b+0x92>
 8111a80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8111a84:	4405      	add	r5, r0
 8111a86:	603d      	str	r5, [r7, #0]
 8111a88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8111a8c:	6030      	str	r0, [r6, #0]
 8111a8e:	4620      	mov	r0, r4
 8111a90:	b003      	add	sp, #12
 8111a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8111a96:	6161      	str	r1, [r4, #20]
 8111a98:	e7ea      	b.n	8111a70 <__d2b+0x58>
 8111a9a:	a801      	add	r0, sp, #4
 8111a9c:	f7ff fce9 	bl	8111472 <__lo0bits>
 8111aa0:	9b01      	ldr	r3, [sp, #4]
 8111aa2:	6163      	str	r3, [r4, #20]
 8111aa4:	3020      	adds	r0, #32
 8111aa6:	2201      	movs	r2, #1
 8111aa8:	e7e8      	b.n	8111a7c <__d2b+0x64>
 8111aaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8111aae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8111ab2:	6038      	str	r0, [r7, #0]
 8111ab4:	6918      	ldr	r0, [r3, #16]
 8111ab6:	f7ff fcbd 	bl	8111434 <__hi0bits>
 8111aba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8111abe:	e7e5      	b.n	8111a8c <__d2b+0x74>
 8111ac0:	08113ad1 	.word	0x08113ad1
 8111ac4:	08113ae2 	.word	0x08113ae2

08111ac8 <__ratio>:
 8111ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111acc:	b085      	sub	sp, #20
 8111ace:	e9cd 1000 	strd	r1, r0, [sp]
 8111ad2:	a902      	add	r1, sp, #8
 8111ad4:	f7ff ff56 	bl	8111984 <__b2d>
 8111ad8:	9800      	ldr	r0, [sp, #0]
 8111ada:	a903      	add	r1, sp, #12
 8111adc:	ec55 4b10 	vmov	r4, r5, d0
 8111ae0:	f7ff ff50 	bl	8111984 <__b2d>
 8111ae4:	9b01      	ldr	r3, [sp, #4]
 8111ae6:	6919      	ldr	r1, [r3, #16]
 8111ae8:	9b00      	ldr	r3, [sp, #0]
 8111aea:	691b      	ldr	r3, [r3, #16]
 8111aec:	1ac9      	subs	r1, r1, r3
 8111aee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8111af2:	1a9b      	subs	r3, r3, r2
 8111af4:	ec5b ab10 	vmov	sl, fp, d0
 8111af8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8111afc:	2b00      	cmp	r3, #0
 8111afe:	bfce      	itee	gt
 8111b00:	462a      	movgt	r2, r5
 8111b02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8111b06:	465a      	movle	r2, fp
 8111b08:	462f      	mov	r7, r5
 8111b0a:	46d9      	mov	r9, fp
 8111b0c:	bfcc      	ite	gt
 8111b0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8111b12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8111b16:	464b      	mov	r3, r9
 8111b18:	4652      	mov	r2, sl
 8111b1a:	4620      	mov	r0, r4
 8111b1c:	4639      	mov	r1, r7
 8111b1e:	f7ee ff1d 	bl	810095c <__aeabi_ddiv>
 8111b22:	ec41 0b10 	vmov	d0, r0, r1
 8111b26:	b005      	add	sp, #20
 8111b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08111b2c <__copybits>:
 8111b2c:	3901      	subs	r1, #1
 8111b2e:	b570      	push	{r4, r5, r6, lr}
 8111b30:	1149      	asrs	r1, r1, #5
 8111b32:	6914      	ldr	r4, [r2, #16]
 8111b34:	3101      	adds	r1, #1
 8111b36:	f102 0314 	add.w	r3, r2, #20
 8111b3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8111b3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8111b42:	1f05      	subs	r5, r0, #4
 8111b44:	42a3      	cmp	r3, r4
 8111b46:	d30c      	bcc.n	8111b62 <__copybits+0x36>
 8111b48:	1aa3      	subs	r3, r4, r2
 8111b4a:	3b11      	subs	r3, #17
 8111b4c:	f023 0303 	bic.w	r3, r3, #3
 8111b50:	3211      	adds	r2, #17
 8111b52:	42a2      	cmp	r2, r4
 8111b54:	bf88      	it	hi
 8111b56:	2300      	movhi	r3, #0
 8111b58:	4418      	add	r0, r3
 8111b5a:	2300      	movs	r3, #0
 8111b5c:	4288      	cmp	r0, r1
 8111b5e:	d305      	bcc.n	8111b6c <__copybits+0x40>
 8111b60:	bd70      	pop	{r4, r5, r6, pc}
 8111b62:	f853 6b04 	ldr.w	r6, [r3], #4
 8111b66:	f845 6f04 	str.w	r6, [r5, #4]!
 8111b6a:	e7eb      	b.n	8111b44 <__copybits+0x18>
 8111b6c:	f840 3b04 	str.w	r3, [r0], #4
 8111b70:	e7f4      	b.n	8111b5c <__copybits+0x30>

08111b72 <__any_on>:
 8111b72:	f100 0214 	add.w	r2, r0, #20
 8111b76:	6900      	ldr	r0, [r0, #16]
 8111b78:	114b      	asrs	r3, r1, #5
 8111b7a:	4298      	cmp	r0, r3
 8111b7c:	b510      	push	{r4, lr}
 8111b7e:	db11      	blt.n	8111ba4 <__any_on+0x32>
 8111b80:	dd0a      	ble.n	8111b98 <__any_on+0x26>
 8111b82:	f011 011f 	ands.w	r1, r1, #31
 8111b86:	d007      	beq.n	8111b98 <__any_on+0x26>
 8111b88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8111b8c:	fa24 f001 	lsr.w	r0, r4, r1
 8111b90:	fa00 f101 	lsl.w	r1, r0, r1
 8111b94:	428c      	cmp	r4, r1
 8111b96:	d10b      	bne.n	8111bb0 <__any_on+0x3e>
 8111b98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8111b9c:	4293      	cmp	r3, r2
 8111b9e:	d803      	bhi.n	8111ba8 <__any_on+0x36>
 8111ba0:	2000      	movs	r0, #0
 8111ba2:	bd10      	pop	{r4, pc}
 8111ba4:	4603      	mov	r3, r0
 8111ba6:	e7f7      	b.n	8111b98 <__any_on+0x26>
 8111ba8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8111bac:	2900      	cmp	r1, #0
 8111bae:	d0f5      	beq.n	8111b9c <__any_on+0x2a>
 8111bb0:	2001      	movs	r0, #1
 8111bb2:	e7f6      	b.n	8111ba2 <__any_on+0x30>

08111bb4 <sulp>:
 8111bb4:	b570      	push	{r4, r5, r6, lr}
 8111bb6:	4604      	mov	r4, r0
 8111bb8:	460d      	mov	r5, r1
 8111bba:	ec45 4b10 	vmov	d0, r4, r5
 8111bbe:	4616      	mov	r6, r2
 8111bc0:	f7ff feba 	bl	8111938 <__ulp>
 8111bc4:	ec51 0b10 	vmov	r0, r1, d0
 8111bc8:	b17e      	cbz	r6, 8111bea <sulp+0x36>
 8111bca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8111bce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8111bd2:	2b00      	cmp	r3, #0
 8111bd4:	dd09      	ble.n	8111bea <sulp+0x36>
 8111bd6:	051b      	lsls	r3, r3, #20
 8111bd8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8111bdc:	2400      	movs	r4, #0
 8111bde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8111be2:	4622      	mov	r2, r4
 8111be4:	462b      	mov	r3, r5
 8111be6:	f7ee fd8f 	bl	8100708 <__aeabi_dmul>
 8111bea:	ec41 0b10 	vmov	d0, r0, r1
 8111bee:	bd70      	pop	{r4, r5, r6, pc}

08111bf0 <_strtod_l>:
 8111bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111bf4:	b09f      	sub	sp, #124	@ 0x7c
 8111bf6:	460c      	mov	r4, r1
 8111bf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8111bfa:	2200      	movs	r2, #0
 8111bfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8111bfe:	9005      	str	r0, [sp, #20]
 8111c00:	f04f 0a00 	mov.w	sl, #0
 8111c04:	f04f 0b00 	mov.w	fp, #0
 8111c08:	460a      	mov	r2, r1
 8111c0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8111c0c:	7811      	ldrb	r1, [r2, #0]
 8111c0e:	292b      	cmp	r1, #43	@ 0x2b
 8111c10:	d04a      	beq.n	8111ca8 <_strtod_l+0xb8>
 8111c12:	d838      	bhi.n	8111c86 <_strtod_l+0x96>
 8111c14:	290d      	cmp	r1, #13
 8111c16:	d832      	bhi.n	8111c7e <_strtod_l+0x8e>
 8111c18:	2908      	cmp	r1, #8
 8111c1a:	d832      	bhi.n	8111c82 <_strtod_l+0x92>
 8111c1c:	2900      	cmp	r1, #0
 8111c1e:	d03b      	beq.n	8111c98 <_strtod_l+0xa8>
 8111c20:	2200      	movs	r2, #0
 8111c22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8111c24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8111c26:	782a      	ldrb	r2, [r5, #0]
 8111c28:	2a30      	cmp	r2, #48	@ 0x30
 8111c2a:	f040 80b3 	bne.w	8111d94 <_strtod_l+0x1a4>
 8111c2e:	786a      	ldrb	r2, [r5, #1]
 8111c30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8111c34:	2a58      	cmp	r2, #88	@ 0x58
 8111c36:	d16e      	bne.n	8111d16 <_strtod_l+0x126>
 8111c38:	9302      	str	r3, [sp, #8]
 8111c3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111c3c:	9301      	str	r3, [sp, #4]
 8111c3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8111c40:	9300      	str	r3, [sp, #0]
 8111c42:	4a8e      	ldr	r2, [pc, #568]	@ (8111e7c <_strtod_l+0x28c>)
 8111c44:	9805      	ldr	r0, [sp, #20]
 8111c46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8111c48:	a919      	add	r1, sp, #100	@ 0x64
 8111c4a:	f001 fadb 	bl	8113204 <__gethex>
 8111c4e:	f010 060f 	ands.w	r6, r0, #15
 8111c52:	4604      	mov	r4, r0
 8111c54:	d005      	beq.n	8111c62 <_strtod_l+0x72>
 8111c56:	2e06      	cmp	r6, #6
 8111c58:	d128      	bne.n	8111cac <_strtod_l+0xbc>
 8111c5a:	3501      	adds	r5, #1
 8111c5c:	2300      	movs	r3, #0
 8111c5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8111c60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8111c62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8111c64:	2b00      	cmp	r3, #0
 8111c66:	f040 858e 	bne.w	8112786 <_strtod_l+0xb96>
 8111c6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111c6c:	b1cb      	cbz	r3, 8111ca2 <_strtod_l+0xb2>
 8111c6e:	4652      	mov	r2, sl
 8111c70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8111c74:	ec43 2b10 	vmov	d0, r2, r3
 8111c78:	b01f      	add	sp, #124	@ 0x7c
 8111c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111c7e:	2920      	cmp	r1, #32
 8111c80:	d1ce      	bne.n	8111c20 <_strtod_l+0x30>
 8111c82:	3201      	adds	r2, #1
 8111c84:	e7c1      	b.n	8111c0a <_strtod_l+0x1a>
 8111c86:	292d      	cmp	r1, #45	@ 0x2d
 8111c88:	d1ca      	bne.n	8111c20 <_strtod_l+0x30>
 8111c8a:	2101      	movs	r1, #1
 8111c8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8111c8e:	1c51      	adds	r1, r2, #1
 8111c90:	9119      	str	r1, [sp, #100]	@ 0x64
 8111c92:	7852      	ldrb	r2, [r2, #1]
 8111c94:	2a00      	cmp	r2, #0
 8111c96:	d1c5      	bne.n	8111c24 <_strtod_l+0x34>
 8111c98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8111c9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8111c9c:	2b00      	cmp	r3, #0
 8111c9e:	f040 8570 	bne.w	8112782 <_strtod_l+0xb92>
 8111ca2:	4652      	mov	r2, sl
 8111ca4:	465b      	mov	r3, fp
 8111ca6:	e7e5      	b.n	8111c74 <_strtod_l+0x84>
 8111ca8:	2100      	movs	r1, #0
 8111caa:	e7ef      	b.n	8111c8c <_strtod_l+0x9c>
 8111cac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8111cae:	b13a      	cbz	r2, 8111cc0 <_strtod_l+0xd0>
 8111cb0:	2135      	movs	r1, #53	@ 0x35
 8111cb2:	a81c      	add	r0, sp, #112	@ 0x70
 8111cb4:	f7ff ff3a 	bl	8111b2c <__copybits>
 8111cb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8111cba:	9805      	ldr	r0, [sp, #20]
 8111cbc:	f7ff fb08 	bl	81112d0 <_Bfree>
 8111cc0:	3e01      	subs	r6, #1
 8111cc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8111cc4:	2e04      	cmp	r6, #4
 8111cc6:	d806      	bhi.n	8111cd6 <_strtod_l+0xe6>
 8111cc8:	e8df f006 	tbb	[pc, r6]
 8111ccc:	201d0314 	.word	0x201d0314
 8111cd0:	14          	.byte	0x14
 8111cd1:	00          	.byte	0x00
 8111cd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8111cd6:	05e1      	lsls	r1, r4, #23
 8111cd8:	bf48      	it	mi
 8111cda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8111cde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8111ce2:	0d1b      	lsrs	r3, r3, #20
 8111ce4:	051b      	lsls	r3, r3, #20
 8111ce6:	2b00      	cmp	r3, #0
 8111ce8:	d1bb      	bne.n	8111c62 <_strtod_l+0x72>
 8111cea:	f7fe fb03 	bl	81102f4 <__errno>
 8111cee:	2322      	movs	r3, #34	@ 0x22
 8111cf0:	6003      	str	r3, [r0, #0]
 8111cf2:	e7b6      	b.n	8111c62 <_strtod_l+0x72>
 8111cf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8111cf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8111cfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8111d00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8111d04:	e7e7      	b.n	8111cd6 <_strtod_l+0xe6>
 8111d06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8111e84 <_strtod_l+0x294>
 8111d0a:	e7e4      	b.n	8111cd6 <_strtod_l+0xe6>
 8111d0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8111d10:	f04f 3aff 	mov.w	sl, #4294967295
 8111d14:	e7df      	b.n	8111cd6 <_strtod_l+0xe6>
 8111d16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111d18:	1c5a      	adds	r2, r3, #1
 8111d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8111d1c:	785b      	ldrb	r3, [r3, #1]
 8111d1e:	2b30      	cmp	r3, #48	@ 0x30
 8111d20:	d0f9      	beq.n	8111d16 <_strtod_l+0x126>
 8111d22:	2b00      	cmp	r3, #0
 8111d24:	d09d      	beq.n	8111c62 <_strtod_l+0x72>
 8111d26:	2301      	movs	r3, #1
 8111d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8111d2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111d2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8111d2e:	2300      	movs	r3, #0
 8111d30:	9308      	str	r3, [sp, #32]
 8111d32:	930a      	str	r3, [sp, #40]	@ 0x28
 8111d34:	461f      	mov	r7, r3
 8111d36:	220a      	movs	r2, #10
 8111d38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8111d3a:	7805      	ldrb	r5, [r0, #0]
 8111d3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8111d40:	b2d9      	uxtb	r1, r3
 8111d42:	2909      	cmp	r1, #9
 8111d44:	d928      	bls.n	8111d98 <_strtod_l+0x1a8>
 8111d46:	494e      	ldr	r1, [pc, #312]	@ (8111e80 <_strtod_l+0x290>)
 8111d48:	2201      	movs	r2, #1
 8111d4a:	f001 f98b 	bl	8113064 <strncmp>
 8111d4e:	2800      	cmp	r0, #0
 8111d50:	d032      	beq.n	8111db8 <_strtod_l+0x1c8>
 8111d52:	2000      	movs	r0, #0
 8111d54:	462a      	mov	r2, r5
 8111d56:	4681      	mov	r9, r0
 8111d58:	463d      	mov	r5, r7
 8111d5a:	4603      	mov	r3, r0
 8111d5c:	2a65      	cmp	r2, #101	@ 0x65
 8111d5e:	d001      	beq.n	8111d64 <_strtod_l+0x174>
 8111d60:	2a45      	cmp	r2, #69	@ 0x45
 8111d62:	d114      	bne.n	8111d8e <_strtod_l+0x19e>
 8111d64:	b91d      	cbnz	r5, 8111d6e <_strtod_l+0x17e>
 8111d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8111d68:	4302      	orrs	r2, r0
 8111d6a:	d095      	beq.n	8111c98 <_strtod_l+0xa8>
 8111d6c:	2500      	movs	r5, #0
 8111d6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8111d70:	1c62      	adds	r2, r4, #1
 8111d72:	9219      	str	r2, [sp, #100]	@ 0x64
 8111d74:	7862      	ldrb	r2, [r4, #1]
 8111d76:	2a2b      	cmp	r2, #43	@ 0x2b
 8111d78:	d077      	beq.n	8111e6a <_strtod_l+0x27a>
 8111d7a:	2a2d      	cmp	r2, #45	@ 0x2d
 8111d7c:	d07b      	beq.n	8111e76 <_strtod_l+0x286>
 8111d7e:	f04f 0c00 	mov.w	ip, #0
 8111d82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8111d86:	2909      	cmp	r1, #9
 8111d88:	f240 8082 	bls.w	8111e90 <_strtod_l+0x2a0>
 8111d8c:	9419      	str	r4, [sp, #100]	@ 0x64
 8111d8e:	f04f 0800 	mov.w	r8, #0
 8111d92:	e0a2      	b.n	8111eda <_strtod_l+0x2ea>
 8111d94:	2300      	movs	r3, #0
 8111d96:	e7c7      	b.n	8111d28 <_strtod_l+0x138>
 8111d98:	2f08      	cmp	r7, #8
 8111d9a:	bfd5      	itete	le
 8111d9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8111d9e:	9908      	ldrgt	r1, [sp, #32]
 8111da0:	fb02 3301 	mlale	r3, r2, r1, r3
 8111da4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8111da8:	f100 0001 	add.w	r0, r0, #1
 8111dac:	bfd4      	ite	le
 8111dae:	930a      	strle	r3, [sp, #40]	@ 0x28
 8111db0:	9308      	strgt	r3, [sp, #32]
 8111db2:	3701      	adds	r7, #1
 8111db4:	9019      	str	r0, [sp, #100]	@ 0x64
 8111db6:	e7bf      	b.n	8111d38 <_strtod_l+0x148>
 8111db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111dba:	1c5a      	adds	r2, r3, #1
 8111dbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8111dbe:	785a      	ldrb	r2, [r3, #1]
 8111dc0:	b37f      	cbz	r7, 8111e22 <_strtod_l+0x232>
 8111dc2:	4681      	mov	r9, r0
 8111dc4:	463d      	mov	r5, r7
 8111dc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8111dca:	2b09      	cmp	r3, #9
 8111dcc:	d912      	bls.n	8111df4 <_strtod_l+0x204>
 8111dce:	2301      	movs	r3, #1
 8111dd0:	e7c4      	b.n	8111d5c <_strtod_l+0x16c>
 8111dd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111dd4:	1c5a      	adds	r2, r3, #1
 8111dd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8111dd8:	785a      	ldrb	r2, [r3, #1]
 8111dda:	3001      	adds	r0, #1
 8111ddc:	2a30      	cmp	r2, #48	@ 0x30
 8111dde:	d0f8      	beq.n	8111dd2 <_strtod_l+0x1e2>
 8111de0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8111de4:	2b08      	cmp	r3, #8
 8111de6:	f200 84d3 	bhi.w	8112790 <_strtod_l+0xba0>
 8111dea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111dec:	930c      	str	r3, [sp, #48]	@ 0x30
 8111dee:	4681      	mov	r9, r0
 8111df0:	2000      	movs	r0, #0
 8111df2:	4605      	mov	r5, r0
 8111df4:	3a30      	subs	r2, #48	@ 0x30
 8111df6:	f100 0301 	add.w	r3, r0, #1
 8111dfa:	d02a      	beq.n	8111e52 <_strtod_l+0x262>
 8111dfc:	4499      	add	r9, r3
 8111dfe:	eb00 0c05 	add.w	ip, r0, r5
 8111e02:	462b      	mov	r3, r5
 8111e04:	210a      	movs	r1, #10
 8111e06:	4563      	cmp	r3, ip
 8111e08:	d10d      	bne.n	8111e26 <_strtod_l+0x236>
 8111e0a:	1c69      	adds	r1, r5, #1
 8111e0c:	4401      	add	r1, r0
 8111e0e:	4428      	add	r0, r5
 8111e10:	2808      	cmp	r0, #8
 8111e12:	dc16      	bgt.n	8111e42 <_strtod_l+0x252>
 8111e14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8111e16:	230a      	movs	r3, #10
 8111e18:	fb03 2300 	mla	r3, r3, r0, r2
 8111e1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8111e1e:	2300      	movs	r3, #0
 8111e20:	e018      	b.n	8111e54 <_strtod_l+0x264>
 8111e22:	4638      	mov	r0, r7
 8111e24:	e7da      	b.n	8111ddc <_strtod_l+0x1ec>
 8111e26:	2b08      	cmp	r3, #8
 8111e28:	f103 0301 	add.w	r3, r3, #1
 8111e2c:	dc03      	bgt.n	8111e36 <_strtod_l+0x246>
 8111e2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8111e30:	434e      	muls	r6, r1
 8111e32:	960a      	str	r6, [sp, #40]	@ 0x28
 8111e34:	e7e7      	b.n	8111e06 <_strtod_l+0x216>
 8111e36:	2b10      	cmp	r3, #16
 8111e38:	bfde      	ittt	le
 8111e3a:	9e08      	ldrle	r6, [sp, #32]
 8111e3c:	434e      	mulle	r6, r1
 8111e3e:	9608      	strle	r6, [sp, #32]
 8111e40:	e7e1      	b.n	8111e06 <_strtod_l+0x216>
 8111e42:	280f      	cmp	r0, #15
 8111e44:	dceb      	bgt.n	8111e1e <_strtod_l+0x22e>
 8111e46:	9808      	ldr	r0, [sp, #32]
 8111e48:	230a      	movs	r3, #10
 8111e4a:	fb03 2300 	mla	r3, r3, r0, r2
 8111e4e:	9308      	str	r3, [sp, #32]
 8111e50:	e7e5      	b.n	8111e1e <_strtod_l+0x22e>
 8111e52:	4629      	mov	r1, r5
 8111e54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8111e56:	1c50      	adds	r0, r2, #1
 8111e58:	9019      	str	r0, [sp, #100]	@ 0x64
 8111e5a:	7852      	ldrb	r2, [r2, #1]
 8111e5c:	4618      	mov	r0, r3
 8111e5e:	460d      	mov	r5, r1
 8111e60:	e7b1      	b.n	8111dc6 <_strtod_l+0x1d6>
 8111e62:	f04f 0900 	mov.w	r9, #0
 8111e66:	2301      	movs	r3, #1
 8111e68:	e77d      	b.n	8111d66 <_strtod_l+0x176>
 8111e6a:	f04f 0c00 	mov.w	ip, #0
 8111e6e:	1ca2      	adds	r2, r4, #2
 8111e70:	9219      	str	r2, [sp, #100]	@ 0x64
 8111e72:	78a2      	ldrb	r2, [r4, #2]
 8111e74:	e785      	b.n	8111d82 <_strtod_l+0x192>
 8111e76:	f04f 0c01 	mov.w	ip, #1
 8111e7a:	e7f8      	b.n	8111e6e <_strtod_l+0x27e>
 8111e7c:	08113c50 	.word	0x08113c50
 8111e80:	08113c38 	.word	0x08113c38
 8111e84:	7ff00000 	.word	0x7ff00000
 8111e88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8111e8a:	1c51      	adds	r1, r2, #1
 8111e8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8111e8e:	7852      	ldrb	r2, [r2, #1]
 8111e90:	2a30      	cmp	r2, #48	@ 0x30
 8111e92:	d0f9      	beq.n	8111e88 <_strtod_l+0x298>
 8111e94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8111e98:	2908      	cmp	r1, #8
 8111e9a:	f63f af78 	bhi.w	8111d8e <_strtod_l+0x19e>
 8111e9e:	3a30      	subs	r2, #48	@ 0x30
 8111ea0:	920e      	str	r2, [sp, #56]	@ 0x38
 8111ea2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8111ea4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8111ea6:	f04f 080a 	mov.w	r8, #10
 8111eaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8111eac:	1c56      	adds	r6, r2, #1
 8111eae:	9619      	str	r6, [sp, #100]	@ 0x64
 8111eb0:	7852      	ldrb	r2, [r2, #1]
 8111eb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8111eb6:	f1be 0f09 	cmp.w	lr, #9
 8111eba:	d939      	bls.n	8111f30 <_strtod_l+0x340>
 8111ebc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8111ebe:	1a76      	subs	r6, r6, r1
 8111ec0:	2e08      	cmp	r6, #8
 8111ec2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8111ec6:	dc03      	bgt.n	8111ed0 <_strtod_l+0x2e0>
 8111ec8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8111eca:	4588      	cmp	r8, r1
 8111ecc:	bfa8      	it	ge
 8111ece:	4688      	movge	r8, r1
 8111ed0:	f1bc 0f00 	cmp.w	ip, #0
 8111ed4:	d001      	beq.n	8111eda <_strtod_l+0x2ea>
 8111ed6:	f1c8 0800 	rsb	r8, r8, #0
 8111eda:	2d00      	cmp	r5, #0
 8111edc:	d14e      	bne.n	8111f7c <_strtod_l+0x38c>
 8111ede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8111ee0:	4308      	orrs	r0, r1
 8111ee2:	f47f aebe 	bne.w	8111c62 <_strtod_l+0x72>
 8111ee6:	2b00      	cmp	r3, #0
 8111ee8:	f47f aed6 	bne.w	8111c98 <_strtod_l+0xa8>
 8111eec:	2a69      	cmp	r2, #105	@ 0x69
 8111eee:	d028      	beq.n	8111f42 <_strtod_l+0x352>
 8111ef0:	dc25      	bgt.n	8111f3e <_strtod_l+0x34e>
 8111ef2:	2a49      	cmp	r2, #73	@ 0x49
 8111ef4:	d025      	beq.n	8111f42 <_strtod_l+0x352>
 8111ef6:	2a4e      	cmp	r2, #78	@ 0x4e
 8111ef8:	f47f aece 	bne.w	8111c98 <_strtod_l+0xa8>
 8111efc:	499b      	ldr	r1, [pc, #620]	@ (811216c <_strtod_l+0x57c>)
 8111efe:	a819      	add	r0, sp, #100	@ 0x64
 8111f00:	f001 fba2 	bl	8113648 <__match>
 8111f04:	2800      	cmp	r0, #0
 8111f06:	f43f aec7 	beq.w	8111c98 <_strtod_l+0xa8>
 8111f0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111f0c:	781b      	ldrb	r3, [r3, #0]
 8111f0e:	2b28      	cmp	r3, #40	@ 0x28
 8111f10:	d12e      	bne.n	8111f70 <_strtod_l+0x380>
 8111f12:	4997      	ldr	r1, [pc, #604]	@ (8112170 <_strtod_l+0x580>)
 8111f14:	aa1c      	add	r2, sp, #112	@ 0x70
 8111f16:	a819      	add	r0, sp, #100	@ 0x64
 8111f18:	f001 fbaa 	bl	8113670 <__hexnan>
 8111f1c:	2805      	cmp	r0, #5
 8111f1e:	d127      	bne.n	8111f70 <_strtod_l+0x380>
 8111f20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8111f22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8111f26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8111f2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8111f2e:	e698      	b.n	8111c62 <_strtod_l+0x72>
 8111f30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8111f32:	fb08 2101 	mla	r1, r8, r1, r2
 8111f36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8111f3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8111f3c:	e7b5      	b.n	8111eaa <_strtod_l+0x2ba>
 8111f3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8111f40:	e7da      	b.n	8111ef8 <_strtod_l+0x308>
 8111f42:	498c      	ldr	r1, [pc, #560]	@ (8112174 <_strtod_l+0x584>)
 8111f44:	a819      	add	r0, sp, #100	@ 0x64
 8111f46:	f001 fb7f 	bl	8113648 <__match>
 8111f4a:	2800      	cmp	r0, #0
 8111f4c:	f43f aea4 	beq.w	8111c98 <_strtod_l+0xa8>
 8111f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111f52:	4989      	ldr	r1, [pc, #548]	@ (8112178 <_strtod_l+0x588>)
 8111f54:	3b01      	subs	r3, #1
 8111f56:	a819      	add	r0, sp, #100	@ 0x64
 8111f58:	9319      	str	r3, [sp, #100]	@ 0x64
 8111f5a:	f001 fb75 	bl	8113648 <__match>
 8111f5e:	b910      	cbnz	r0, 8111f66 <_strtod_l+0x376>
 8111f60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111f62:	3301      	adds	r3, #1
 8111f64:	9319      	str	r3, [sp, #100]	@ 0x64
 8111f66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8112188 <_strtod_l+0x598>
 8111f6a:	f04f 0a00 	mov.w	sl, #0
 8111f6e:	e678      	b.n	8111c62 <_strtod_l+0x72>
 8111f70:	4882      	ldr	r0, [pc, #520]	@ (811217c <_strtod_l+0x58c>)
 8111f72:	f001 f8bd 	bl	81130f0 <nan>
 8111f76:	ec5b ab10 	vmov	sl, fp, d0
 8111f7a:	e672      	b.n	8111c62 <_strtod_l+0x72>
 8111f7c:	eba8 0309 	sub.w	r3, r8, r9
 8111f80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8111f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8111f84:	2f00      	cmp	r7, #0
 8111f86:	bf08      	it	eq
 8111f88:	462f      	moveq	r7, r5
 8111f8a:	2d10      	cmp	r5, #16
 8111f8c:	462c      	mov	r4, r5
 8111f8e:	bfa8      	it	ge
 8111f90:	2410      	movge	r4, #16
 8111f92:	f7ee fb3f 	bl	8100614 <__aeabi_ui2d>
 8111f96:	2d09      	cmp	r5, #9
 8111f98:	4682      	mov	sl, r0
 8111f9a:	468b      	mov	fp, r1
 8111f9c:	dc13      	bgt.n	8111fc6 <_strtod_l+0x3d6>
 8111f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111fa0:	2b00      	cmp	r3, #0
 8111fa2:	f43f ae5e 	beq.w	8111c62 <_strtod_l+0x72>
 8111fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111fa8:	dd78      	ble.n	811209c <_strtod_l+0x4ac>
 8111faa:	2b16      	cmp	r3, #22
 8111fac:	dc5f      	bgt.n	811206e <_strtod_l+0x47e>
 8111fae:	4974      	ldr	r1, [pc, #464]	@ (8112180 <_strtod_l+0x590>)
 8111fb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8111fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8111fb8:	4652      	mov	r2, sl
 8111fba:	465b      	mov	r3, fp
 8111fbc:	f7ee fba4 	bl	8100708 <__aeabi_dmul>
 8111fc0:	4682      	mov	sl, r0
 8111fc2:	468b      	mov	fp, r1
 8111fc4:	e64d      	b.n	8111c62 <_strtod_l+0x72>
 8111fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8112180 <_strtod_l+0x590>)
 8111fc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8111fcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8111fd0:	f7ee fb9a 	bl	8100708 <__aeabi_dmul>
 8111fd4:	4682      	mov	sl, r0
 8111fd6:	9808      	ldr	r0, [sp, #32]
 8111fd8:	468b      	mov	fp, r1
 8111fda:	f7ee fb1b 	bl	8100614 <__aeabi_ui2d>
 8111fde:	4602      	mov	r2, r0
 8111fe0:	460b      	mov	r3, r1
 8111fe2:	4650      	mov	r0, sl
 8111fe4:	4659      	mov	r1, fp
 8111fe6:	f7ee f9d9 	bl	810039c <__adddf3>
 8111fea:	2d0f      	cmp	r5, #15
 8111fec:	4682      	mov	sl, r0
 8111fee:	468b      	mov	fp, r1
 8111ff0:	ddd5      	ble.n	8111f9e <_strtod_l+0x3ae>
 8111ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111ff4:	1b2c      	subs	r4, r5, r4
 8111ff6:	441c      	add	r4, r3
 8111ff8:	2c00      	cmp	r4, #0
 8111ffa:	f340 8096 	ble.w	811212a <_strtod_l+0x53a>
 8111ffe:	f014 030f 	ands.w	r3, r4, #15
 8112002:	d00a      	beq.n	811201a <_strtod_l+0x42a>
 8112004:	495e      	ldr	r1, [pc, #376]	@ (8112180 <_strtod_l+0x590>)
 8112006:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 811200a:	4652      	mov	r2, sl
 811200c:	465b      	mov	r3, fp
 811200e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8112012:	f7ee fb79 	bl	8100708 <__aeabi_dmul>
 8112016:	4682      	mov	sl, r0
 8112018:	468b      	mov	fp, r1
 811201a:	f034 040f 	bics.w	r4, r4, #15
 811201e:	d073      	beq.n	8112108 <_strtod_l+0x518>
 8112020:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8112024:	dd48      	ble.n	81120b8 <_strtod_l+0x4c8>
 8112026:	2400      	movs	r4, #0
 8112028:	46a0      	mov	r8, r4
 811202a:	940a      	str	r4, [sp, #40]	@ 0x28
 811202c:	46a1      	mov	r9, r4
 811202e:	9a05      	ldr	r2, [sp, #20]
 8112030:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8112188 <_strtod_l+0x598>
 8112034:	2322      	movs	r3, #34	@ 0x22
 8112036:	6013      	str	r3, [r2, #0]
 8112038:	f04f 0a00 	mov.w	sl, #0
 811203c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811203e:	2b00      	cmp	r3, #0
 8112040:	f43f ae0f 	beq.w	8111c62 <_strtod_l+0x72>
 8112044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8112046:	9805      	ldr	r0, [sp, #20]
 8112048:	f7ff f942 	bl	81112d0 <_Bfree>
 811204c:	9805      	ldr	r0, [sp, #20]
 811204e:	4649      	mov	r1, r9
 8112050:	f7ff f93e 	bl	81112d0 <_Bfree>
 8112054:	9805      	ldr	r0, [sp, #20]
 8112056:	4641      	mov	r1, r8
 8112058:	f7ff f93a 	bl	81112d0 <_Bfree>
 811205c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 811205e:	9805      	ldr	r0, [sp, #20]
 8112060:	f7ff f936 	bl	81112d0 <_Bfree>
 8112064:	9805      	ldr	r0, [sp, #20]
 8112066:	4621      	mov	r1, r4
 8112068:	f7ff f932 	bl	81112d0 <_Bfree>
 811206c:	e5f9      	b.n	8111c62 <_strtod_l+0x72>
 811206e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112070:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8112074:	4293      	cmp	r3, r2
 8112076:	dbbc      	blt.n	8111ff2 <_strtod_l+0x402>
 8112078:	4c41      	ldr	r4, [pc, #260]	@ (8112180 <_strtod_l+0x590>)
 811207a:	f1c5 050f 	rsb	r5, r5, #15
 811207e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8112082:	4652      	mov	r2, sl
 8112084:	465b      	mov	r3, fp
 8112086:	e9d1 0100 	ldrd	r0, r1, [r1]
 811208a:	f7ee fb3d 	bl	8100708 <__aeabi_dmul>
 811208e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112090:	1b5d      	subs	r5, r3, r5
 8112092:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8112096:	e9d4 2300 	ldrd	r2, r3, [r4]
 811209a:	e78f      	b.n	8111fbc <_strtod_l+0x3cc>
 811209c:	3316      	adds	r3, #22
 811209e:	dba8      	blt.n	8111ff2 <_strtod_l+0x402>
 81120a0:	4b37      	ldr	r3, [pc, #220]	@ (8112180 <_strtod_l+0x590>)
 81120a2:	eba9 0808 	sub.w	r8, r9, r8
 81120a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 81120aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 81120ae:	4650      	mov	r0, sl
 81120b0:	4659      	mov	r1, fp
 81120b2:	f7ee fc53 	bl	810095c <__aeabi_ddiv>
 81120b6:	e783      	b.n	8111fc0 <_strtod_l+0x3d0>
 81120b8:	4b32      	ldr	r3, [pc, #200]	@ (8112184 <_strtod_l+0x594>)
 81120ba:	9308      	str	r3, [sp, #32]
 81120bc:	2300      	movs	r3, #0
 81120be:	1124      	asrs	r4, r4, #4
 81120c0:	4650      	mov	r0, sl
 81120c2:	4659      	mov	r1, fp
 81120c4:	461e      	mov	r6, r3
 81120c6:	2c01      	cmp	r4, #1
 81120c8:	dc21      	bgt.n	811210e <_strtod_l+0x51e>
 81120ca:	b10b      	cbz	r3, 81120d0 <_strtod_l+0x4e0>
 81120cc:	4682      	mov	sl, r0
 81120ce:	468b      	mov	fp, r1
 81120d0:	492c      	ldr	r1, [pc, #176]	@ (8112184 <_strtod_l+0x594>)
 81120d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 81120d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 81120da:	4652      	mov	r2, sl
 81120dc:	465b      	mov	r3, fp
 81120de:	e9d1 0100 	ldrd	r0, r1, [r1]
 81120e2:	f7ee fb11 	bl	8100708 <__aeabi_dmul>
 81120e6:	4b28      	ldr	r3, [pc, #160]	@ (8112188 <_strtod_l+0x598>)
 81120e8:	460a      	mov	r2, r1
 81120ea:	400b      	ands	r3, r1
 81120ec:	4927      	ldr	r1, [pc, #156]	@ (811218c <_strtod_l+0x59c>)
 81120ee:	428b      	cmp	r3, r1
 81120f0:	4682      	mov	sl, r0
 81120f2:	d898      	bhi.n	8112026 <_strtod_l+0x436>
 81120f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 81120f8:	428b      	cmp	r3, r1
 81120fa:	bf86      	itte	hi
 81120fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8112190 <_strtod_l+0x5a0>
 8112100:	f04f 3aff 	movhi.w	sl, #4294967295
 8112104:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8112108:	2300      	movs	r3, #0
 811210a:	9308      	str	r3, [sp, #32]
 811210c:	e07a      	b.n	8112204 <_strtod_l+0x614>
 811210e:	07e2      	lsls	r2, r4, #31
 8112110:	d505      	bpl.n	811211e <_strtod_l+0x52e>
 8112112:	9b08      	ldr	r3, [sp, #32]
 8112114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112118:	f7ee faf6 	bl	8100708 <__aeabi_dmul>
 811211c:	2301      	movs	r3, #1
 811211e:	9a08      	ldr	r2, [sp, #32]
 8112120:	3208      	adds	r2, #8
 8112122:	3601      	adds	r6, #1
 8112124:	1064      	asrs	r4, r4, #1
 8112126:	9208      	str	r2, [sp, #32]
 8112128:	e7cd      	b.n	81120c6 <_strtod_l+0x4d6>
 811212a:	d0ed      	beq.n	8112108 <_strtod_l+0x518>
 811212c:	4264      	negs	r4, r4
 811212e:	f014 020f 	ands.w	r2, r4, #15
 8112132:	d00a      	beq.n	811214a <_strtod_l+0x55a>
 8112134:	4b12      	ldr	r3, [pc, #72]	@ (8112180 <_strtod_l+0x590>)
 8112136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 811213a:	4650      	mov	r0, sl
 811213c:	4659      	mov	r1, fp
 811213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112142:	f7ee fc0b 	bl	810095c <__aeabi_ddiv>
 8112146:	4682      	mov	sl, r0
 8112148:	468b      	mov	fp, r1
 811214a:	1124      	asrs	r4, r4, #4
 811214c:	d0dc      	beq.n	8112108 <_strtod_l+0x518>
 811214e:	2c1f      	cmp	r4, #31
 8112150:	dd20      	ble.n	8112194 <_strtod_l+0x5a4>
 8112152:	2400      	movs	r4, #0
 8112154:	46a0      	mov	r8, r4
 8112156:	940a      	str	r4, [sp, #40]	@ 0x28
 8112158:	46a1      	mov	r9, r4
 811215a:	9a05      	ldr	r2, [sp, #20]
 811215c:	2322      	movs	r3, #34	@ 0x22
 811215e:	f04f 0a00 	mov.w	sl, #0
 8112162:	f04f 0b00 	mov.w	fp, #0
 8112166:	6013      	str	r3, [r2, #0]
 8112168:	e768      	b.n	811203c <_strtod_l+0x44c>
 811216a:	bf00      	nop
 811216c:	08113a04 	.word	0x08113a04
 8112170:	08113c3c 	.word	0x08113c3c
 8112174:	081139fc 	.word	0x081139fc
 8112178:	08113a6f 	.word	0x08113a6f
 811217c:	08113a6b 	.word	0x08113a6b
 8112180:	08113b70 	.word	0x08113b70
 8112184:	08113b48 	.word	0x08113b48
 8112188:	7ff00000 	.word	0x7ff00000
 811218c:	7ca00000 	.word	0x7ca00000
 8112190:	7fefffff 	.word	0x7fefffff
 8112194:	f014 0310 	ands.w	r3, r4, #16
 8112198:	bf18      	it	ne
 811219a:	236a      	movne	r3, #106	@ 0x6a
 811219c:	4ea9      	ldr	r6, [pc, #676]	@ (8112444 <_strtod_l+0x854>)
 811219e:	9308      	str	r3, [sp, #32]
 81121a0:	4650      	mov	r0, sl
 81121a2:	4659      	mov	r1, fp
 81121a4:	2300      	movs	r3, #0
 81121a6:	07e2      	lsls	r2, r4, #31
 81121a8:	d504      	bpl.n	81121b4 <_strtod_l+0x5c4>
 81121aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 81121ae:	f7ee faab 	bl	8100708 <__aeabi_dmul>
 81121b2:	2301      	movs	r3, #1
 81121b4:	1064      	asrs	r4, r4, #1
 81121b6:	f106 0608 	add.w	r6, r6, #8
 81121ba:	d1f4      	bne.n	81121a6 <_strtod_l+0x5b6>
 81121bc:	b10b      	cbz	r3, 81121c2 <_strtod_l+0x5d2>
 81121be:	4682      	mov	sl, r0
 81121c0:	468b      	mov	fp, r1
 81121c2:	9b08      	ldr	r3, [sp, #32]
 81121c4:	b1b3      	cbz	r3, 81121f4 <_strtod_l+0x604>
 81121c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 81121ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 81121ce:	2b00      	cmp	r3, #0
 81121d0:	4659      	mov	r1, fp
 81121d2:	dd0f      	ble.n	81121f4 <_strtod_l+0x604>
 81121d4:	2b1f      	cmp	r3, #31
 81121d6:	dd55      	ble.n	8112284 <_strtod_l+0x694>
 81121d8:	2b34      	cmp	r3, #52	@ 0x34
 81121da:	bfde      	ittt	le
 81121dc:	f04f 33ff 	movle.w	r3, #4294967295
 81121e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 81121e4:	4093      	lslle	r3, r2
 81121e6:	f04f 0a00 	mov.w	sl, #0
 81121ea:	bfcc      	ite	gt
 81121ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 81121f0:	ea03 0b01 	andle.w	fp, r3, r1
 81121f4:	2200      	movs	r2, #0
 81121f6:	2300      	movs	r3, #0
 81121f8:	4650      	mov	r0, sl
 81121fa:	4659      	mov	r1, fp
 81121fc:	f7ee fcec 	bl	8100bd8 <__aeabi_dcmpeq>
 8112200:	2800      	cmp	r0, #0
 8112202:	d1a6      	bne.n	8112152 <_strtod_l+0x562>
 8112204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112206:	9300      	str	r3, [sp, #0]
 8112208:	990c      	ldr	r1, [sp, #48]	@ 0x30
 811220a:	9805      	ldr	r0, [sp, #20]
 811220c:	462b      	mov	r3, r5
 811220e:	463a      	mov	r2, r7
 8112210:	f7ff f8c6 	bl	81113a0 <__s2b>
 8112214:	900a      	str	r0, [sp, #40]	@ 0x28
 8112216:	2800      	cmp	r0, #0
 8112218:	f43f af05 	beq.w	8112026 <_strtod_l+0x436>
 811221c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811221e:	2a00      	cmp	r2, #0
 8112220:	eba9 0308 	sub.w	r3, r9, r8
 8112224:	bfa8      	it	ge
 8112226:	2300      	movge	r3, #0
 8112228:	9312      	str	r3, [sp, #72]	@ 0x48
 811222a:	2400      	movs	r4, #0
 811222c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8112230:	9316      	str	r3, [sp, #88]	@ 0x58
 8112232:	46a0      	mov	r8, r4
 8112234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112236:	9805      	ldr	r0, [sp, #20]
 8112238:	6859      	ldr	r1, [r3, #4]
 811223a:	f7ff f809 	bl	8111250 <_Balloc>
 811223e:	4681      	mov	r9, r0
 8112240:	2800      	cmp	r0, #0
 8112242:	f43f aef4 	beq.w	811202e <_strtod_l+0x43e>
 8112246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112248:	691a      	ldr	r2, [r3, #16]
 811224a:	3202      	adds	r2, #2
 811224c:	f103 010c 	add.w	r1, r3, #12
 8112250:	0092      	lsls	r2, r2, #2
 8112252:	300c      	adds	r0, #12
 8112254:	f7fe f87b 	bl	811034e <memcpy>
 8112258:	ec4b ab10 	vmov	d0, sl, fp
 811225c:	9805      	ldr	r0, [sp, #20]
 811225e:	aa1c      	add	r2, sp, #112	@ 0x70
 8112260:	a91b      	add	r1, sp, #108	@ 0x6c
 8112262:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8112266:	f7ff fbd7 	bl	8111a18 <__d2b>
 811226a:	901a      	str	r0, [sp, #104]	@ 0x68
 811226c:	2800      	cmp	r0, #0
 811226e:	f43f aede 	beq.w	811202e <_strtod_l+0x43e>
 8112272:	9805      	ldr	r0, [sp, #20]
 8112274:	2101      	movs	r1, #1
 8112276:	f7ff f929 	bl	81114cc <__i2b>
 811227a:	4680      	mov	r8, r0
 811227c:	b948      	cbnz	r0, 8112292 <_strtod_l+0x6a2>
 811227e:	f04f 0800 	mov.w	r8, #0
 8112282:	e6d4      	b.n	811202e <_strtod_l+0x43e>
 8112284:	f04f 32ff 	mov.w	r2, #4294967295
 8112288:	fa02 f303 	lsl.w	r3, r2, r3
 811228c:	ea03 0a0a 	and.w	sl, r3, sl
 8112290:	e7b0      	b.n	81121f4 <_strtod_l+0x604>
 8112292:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8112294:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8112296:	2d00      	cmp	r5, #0
 8112298:	bfab      	itete	ge
 811229a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 811229c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 811229e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 81122a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 81122a2:	bfac      	ite	ge
 81122a4:	18ef      	addge	r7, r5, r3
 81122a6:	1b5e      	sublt	r6, r3, r5
 81122a8:	9b08      	ldr	r3, [sp, #32]
 81122aa:	1aed      	subs	r5, r5, r3
 81122ac:	4415      	add	r5, r2
 81122ae:	4b66      	ldr	r3, [pc, #408]	@ (8112448 <_strtod_l+0x858>)
 81122b0:	3d01      	subs	r5, #1
 81122b2:	429d      	cmp	r5, r3
 81122b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 81122b8:	da50      	bge.n	811235c <_strtod_l+0x76c>
 81122ba:	1b5b      	subs	r3, r3, r5
 81122bc:	2b1f      	cmp	r3, #31
 81122be:	eba2 0203 	sub.w	r2, r2, r3
 81122c2:	f04f 0101 	mov.w	r1, #1
 81122c6:	dc3d      	bgt.n	8112344 <_strtod_l+0x754>
 81122c8:	fa01 f303 	lsl.w	r3, r1, r3
 81122cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 81122ce:	2300      	movs	r3, #0
 81122d0:	9310      	str	r3, [sp, #64]	@ 0x40
 81122d2:	18bd      	adds	r5, r7, r2
 81122d4:	9b08      	ldr	r3, [sp, #32]
 81122d6:	42af      	cmp	r7, r5
 81122d8:	4416      	add	r6, r2
 81122da:	441e      	add	r6, r3
 81122dc:	463b      	mov	r3, r7
 81122de:	bfa8      	it	ge
 81122e0:	462b      	movge	r3, r5
 81122e2:	42b3      	cmp	r3, r6
 81122e4:	bfa8      	it	ge
 81122e6:	4633      	movge	r3, r6
 81122e8:	2b00      	cmp	r3, #0
 81122ea:	bfc2      	ittt	gt
 81122ec:	1aed      	subgt	r5, r5, r3
 81122ee:	1af6      	subgt	r6, r6, r3
 81122f0:	1aff      	subgt	r7, r7, r3
 81122f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81122f4:	2b00      	cmp	r3, #0
 81122f6:	dd16      	ble.n	8112326 <_strtod_l+0x736>
 81122f8:	4641      	mov	r1, r8
 81122fa:	9805      	ldr	r0, [sp, #20]
 81122fc:	461a      	mov	r2, r3
 81122fe:	f7ff f9a5 	bl	811164c <__pow5mult>
 8112302:	4680      	mov	r8, r0
 8112304:	2800      	cmp	r0, #0
 8112306:	d0ba      	beq.n	811227e <_strtod_l+0x68e>
 8112308:	4601      	mov	r1, r0
 811230a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 811230c:	9805      	ldr	r0, [sp, #20]
 811230e:	f7ff f8f3 	bl	81114f8 <__multiply>
 8112312:	900e      	str	r0, [sp, #56]	@ 0x38
 8112314:	2800      	cmp	r0, #0
 8112316:	f43f ae8a 	beq.w	811202e <_strtod_l+0x43e>
 811231a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811231c:	9805      	ldr	r0, [sp, #20]
 811231e:	f7fe ffd7 	bl	81112d0 <_Bfree>
 8112322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112324:	931a      	str	r3, [sp, #104]	@ 0x68
 8112326:	2d00      	cmp	r5, #0
 8112328:	dc1d      	bgt.n	8112366 <_strtod_l+0x776>
 811232a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811232c:	2b00      	cmp	r3, #0
 811232e:	dd23      	ble.n	8112378 <_strtod_l+0x788>
 8112330:	4649      	mov	r1, r9
 8112332:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8112334:	9805      	ldr	r0, [sp, #20]
 8112336:	f7ff f989 	bl	811164c <__pow5mult>
 811233a:	4681      	mov	r9, r0
 811233c:	b9e0      	cbnz	r0, 8112378 <_strtod_l+0x788>
 811233e:	f04f 0900 	mov.w	r9, #0
 8112342:	e674      	b.n	811202e <_strtod_l+0x43e>
 8112344:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8112348:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 811234c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8112350:	35e2      	adds	r5, #226	@ 0xe2
 8112352:	fa01 f305 	lsl.w	r3, r1, r5
 8112356:	9310      	str	r3, [sp, #64]	@ 0x40
 8112358:	9113      	str	r1, [sp, #76]	@ 0x4c
 811235a:	e7ba      	b.n	81122d2 <_strtod_l+0x6e2>
 811235c:	2300      	movs	r3, #0
 811235e:	9310      	str	r3, [sp, #64]	@ 0x40
 8112360:	2301      	movs	r3, #1
 8112362:	9313      	str	r3, [sp, #76]	@ 0x4c
 8112364:	e7b5      	b.n	81122d2 <_strtod_l+0x6e2>
 8112366:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8112368:	9805      	ldr	r0, [sp, #20]
 811236a:	462a      	mov	r2, r5
 811236c:	f7ff f9c8 	bl	8111700 <__lshift>
 8112370:	901a      	str	r0, [sp, #104]	@ 0x68
 8112372:	2800      	cmp	r0, #0
 8112374:	d1d9      	bne.n	811232a <_strtod_l+0x73a>
 8112376:	e65a      	b.n	811202e <_strtod_l+0x43e>
 8112378:	2e00      	cmp	r6, #0
 811237a:	dd07      	ble.n	811238c <_strtod_l+0x79c>
 811237c:	4649      	mov	r1, r9
 811237e:	9805      	ldr	r0, [sp, #20]
 8112380:	4632      	mov	r2, r6
 8112382:	f7ff f9bd 	bl	8111700 <__lshift>
 8112386:	4681      	mov	r9, r0
 8112388:	2800      	cmp	r0, #0
 811238a:	d0d8      	beq.n	811233e <_strtod_l+0x74e>
 811238c:	2f00      	cmp	r7, #0
 811238e:	dd08      	ble.n	81123a2 <_strtod_l+0x7b2>
 8112390:	4641      	mov	r1, r8
 8112392:	9805      	ldr	r0, [sp, #20]
 8112394:	463a      	mov	r2, r7
 8112396:	f7ff f9b3 	bl	8111700 <__lshift>
 811239a:	4680      	mov	r8, r0
 811239c:	2800      	cmp	r0, #0
 811239e:	f43f ae46 	beq.w	811202e <_strtod_l+0x43e>
 81123a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81123a4:	9805      	ldr	r0, [sp, #20]
 81123a6:	464a      	mov	r2, r9
 81123a8:	f7ff fa32 	bl	8111810 <__mdiff>
 81123ac:	4604      	mov	r4, r0
 81123ae:	2800      	cmp	r0, #0
 81123b0:	f43f ae3d 	beq.w	811202e <_strtod_l+0x43e>
 81123b4:	68c3      	ldr	r3, [r0, #12]
 81123b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 81123b8:	2300      	movs	r3, #0
 81123ba:	60c3      	str	r3, [r0, #12]
 81123bc:	4641      	mov	r1, r8
 81123be:	f7ff fa0b 	bl	81117d8 <__mcmp>
 81123c2:	2800      	cmp	r0, #0
 81123c4:	da46      	bge.n	8112454 <_strtod_l+0x864>
 81123c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81123c8:	ea53 030a 	orrs.w	r3, r3, sl
 81123cc:	d16c      	bne.n	81124a8 <_strtod_l+0x8b8>
 81123ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81123d2:	2b00      	cmp	r3, #0
 81123d4:	d168      	bne.n	81124a8 <_strtod_l+0x8b8>
 81123d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81123da:	0d1b      	lsrs	r3, r3, #20
 81123dc:	051b      	lsls	r3, r3, #20
 81123de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81123e2:	d961      	bls.n	81124a8 <_strtod_l+0x8b8>
 81123e4:	6963      	ldr	r3, [r4, #20]
 81123e6:	b913      	cbnz	r3, 81123ee <_strtod_l+0x7fe>
 81123e8:	6923      	ldr	r3, [r4, #16]
 81123ea:	2b01      	cmp	r3, #1
 81123ec:	dd5c      	ble.n	81124a8 <_strtod_l+0x8b8>
 81123ee:	4621      	mov	r1, r4
 81123f0:	2201      	movs	r2, #1
 81123f2:	9805      	ldr	r0, [sp, #20]
 81123f4:	f7ff f984 	bl	8111700 <__lshift>
 81123f8:	4641      	mov	r1, r8
 81123fa:	4604      	mov	r4, r0
 81123fc:	f7ff f9ec 	bl	81117d8 <__mcmp>
 8112400:	2800      	cmp	r0, #0
 8112402:	dd51      	ble.n	81124a8 <_strtod_l+0x8b8>
 8112404:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8112408:	9a08      	ldr	r2, [sp, #32]
 811240a:	0d1b      	lsrs	r3, r3, #20
 811240c:	051b      	lsls	r3, r3, #20
 811240e:	2a00      	cmp	r2, #0
 8112410:	d06b      	beq.n	81124ea <_strtod_l+0x8fa>
 8112412:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8112416:	d868      	bhi.n	81124ea <_strtod_l+0x8fa>
 8112418:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 811241c:	f67f ae9d 	bls.w	811215a <_strtod_l+0x56a>
 8112420:	4b0a      	ldr	r3, [pc, #40]	@ (811244c <_strtod_l+0x85c>)
 8112422:	4650      	mov	r0, sl
 8112424:	4659      	mov	r1, fp
 8112426:	2200      	movs	r2, #0
 8112428:	f7ee f96e 	bl	8100708 <__aeabi_dmul>
 811242c:	4b08      	ldr	r3, [pc, #32]	@ (8112450 <_strtod_l+0x860>)
 811242e:	400b      	ands	r3, r1
 8112430:	4682      	mov	sl, r0
 8112432:	468b      	mov	fp, r1
 8112434:	2b00      	cmp	r3, #0
 8112436:	f47f ae05 	bne.w	8112044 <_strtod_l+0x454>
 811243a:	9a05      	ldr	r2, [sp, #20]
 811243c:	2322      	movs	r3, #34	@ 0x22
 811243e:	6013      	str	r3, [r2, #0]
 8112440:	e600      	b.n	8112044 <_strtod_l+0x454>
 8112442:	bf00      	nop
 8112444:	08113c68 	.word	0x08113c68
 8112448:	fffffc02 	.word	0xfffffc02
 811244c:	39500000 	.word	0x39500000
 8112450:	7ff00000 	.word	0x7ff00000
 8112454:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8112458:	d165      	bne.n	8112526 <_strtod_l+0x936>
 811245a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 811245c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8112460:	b35a      	cbz	r2, 81124ba <_strtod_l+0x8ca>
 8112462:	4a9f      	ldr	r2, [pc, #636]	@ (81126e0 <_strtod_l+0xaf0>)
 8112464:	4293      	cmp	r3, r2
 8112466:	d12b      	bne.n	81124c0 <_strtod_l+0x8d0>
 8112468:	9b08      	ldr	r3, [sp, #32]
 811246a:	4651      	mov	r1, sl
 811246c:	b303      	cbz	r3, 81124b0 <_strtod_l+0x8c0>
 811246e:	4b9d      	ldr	r3, [pc, #628]	@ (81126e4 <_strtod_l+0xaf4>)
 8112470:	465a      	mov	r2, fp
 8112472:	4013      	ands	r3, r2
 8112474:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8112478:	f04f 32ff 	mov.w	r2, #4294967295
 811247c:	d81b      	bhi.n	81124b6 <_strtod_l+0x8c6>
 811247e:	0d1b      	lsrs	r3, r3, #20
 8112480:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8112484:	fa02 f303 	lsl.w	r3, r2, r3
 8112488:	4299      	cmp	r1, r3
 811248a:	d119      	bne.n	81124c0 <_strtod_l+0x8d0>
 811248c:	4b96      	ldr	r3, [pc, #600]	@ (81126e8 <_strtod_l+0xaf8>)
 811248e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8112490:	429a      	cmp	r2, r3
 8112492:	d102      	bne.n	811249a <_strtod_l+0x8aa>
 8112494:	3101      	adds	r1, #1
 8112496:	f43f adca 	beq.w	811202e <_strtod_l+0x43e>
 811249a:	4b92      	ldr	r3, [pc, #584]	@ (81126e4 <_strtod_l+0xaf4>)
 811249c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811249e:	401a      	ands	r2, r3
 81124a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 81124a4:	f04f 0a00 	mov.w	sl, #0
 81124a8:	9b08      	ldr	r3, [sp, #32]
 81124aa:	2b00      	cmp	r3, #0
 81124ac:	d1b8      	bne.n	8112420 <_strtod_l+0x830>
 81124ae:	e5c9      	b.n	8112044 <_strtod_l+0x454>
 81124b0:	f04f 33ff 	mov.w	r3, #4294967295
 81124b4:	e7e8      	b.n	8112488 <_strtod_l+0x898>
 81124b6:	4613      	mov	r3, r2
 81124b8:	e7e6      	b.n	8112488 <_strtod_l+0x898>
 81124ba:	ea53 030a 	orrs.w	r3, r3, sl
 81124be:	d0a1      	beq.n	8112404 <_strtod_l+0x814>
 81124c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 81124c2:	b1db      	cbz	r3, 81124fc <_strtod_l+0x90c>
 81124c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81124c6:	4213      	tst	r3, r2
 81124c8:	d0ee      	beq.n	81124a8 <_strtod_l+0x8b8>
 81124ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81124cc:	9a08      	ldr	r2, [sp, #32]
 81124ce:	4650      	mov	r0, sl
 81124d0:	4659      	mov	r1, fp
 81124d2:	b1bb      	cbz	r3, 8112504 <_strtod_l+0x914>
 81124d4:	f7ff fb6e 	bl	8111bb4 <sulp>
 81124d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81124dc:	ec53 2b10 	vmov	r2, r3, d0
 81124e0:	f7ed ff5c 	bl	810039c <__adddf3>
 81124e4:	4682      	mov	sl, r0
 81124e6:	468b      	mov	fp, r1
 81124e8:	e7de      	b.n	81124a8 <_strtod_l+0x8b8>
 81124ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 81124ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 81124f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 81124f6:	f04f 3aff 	mov.w	sl, #4294967295
 81124fa:	e7d5      	b.n	81124a8 <_strtod_l+0x8b8>
 81124fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81124fe:	ea13 0f0a 	tst.w	r3, sl
 8112502:	e7e1      	b.n	81124c8 <_strtod_l+0x8d8>
 8112504:	f7ff fb56 	bl	8111bb4 <sulp>
 8112508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811250c:	ec53 2b10 	vmov	r2, r3, d0
 8112510:	f7ed ff42 	bl	8100398 <__aeabi_dsub>
 8112514:	2200      	movs	r2, #0
 8112516:	2300      	movs	r3, #0
 8112518:	4682      	mov	sl, r0
 811251a:	468b      	mov	fp, r1
 811251c:	f7ee fb5c 	bl	8100bd8 <__aeabi_dcmpeq>
 8112520:	2800      	cmp	r0, #0
 8112522:	d0c1      	beq.n	81124a8 <_strtod_l+0x8b8>
 8112524:	e619      	b.n	811215a <_strtod_l+0x56a>
 8112526:	4641      	mov	r1, r8
 8112528:	4620      	mov	r0, r4
 811252a:	f7ff facd 	bl	8111ac8 <__ratio>
 811252e:	ec57 6b10 	vmov	r6, r7, d0
 8112532:	2200      	movs	r2, #0
 8112534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8112538:	4630      	mov	r0, r6
 811253a:	4639      	mov	r1, r7
 811253c:	f7ee fb60 	bl	8100c00 <__aeabi_dcmple>
 8112540:	2800      	cmp	r0, #0
 8112542:	d06f      	beq.n	8112624 <_strtod_l+0xa34>
 8112544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112546:	2b00      	cmp	r3, #0
 8112548:	d17a      	bne.n	8112640 <_strtod_l+0xa50>
 811254a:	f1ba 0f00 	cmp.w	sl, #0
 811254e:	d158      	bne.n	8112602 <_strtod_l+0xa12>
 8112550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112556:	2b00      	cmp	r3, #0
 8112558:	d15a      	bne.n	8112610 <_strtod_l+0xa20>
 811255a:	4b64      	ldr	r3, [pc, #400]	@ (81126ec <_strtod_l+0xafc>)
 811255c:	2200      	movs	r2, #0
 811255e:	4630      	mov	r0, r6
 8112560:	4639      	mov	r1, r7
 8112562:	f7ee fb43 	bl	8100bec <__aeabi_dcmplt>
 8112566:	2800      	cmp	r0, #0
 8112568:	d159      	bne.n	811261e <_strtod_l+0xa2e>
 811256a:	4630      	mov	r0, r6
 811256c:	4639      	mov	r1, r7
 811256e:	4b60      	ldr	r3, [pc, #384]	@ (81126f0 <_strtod_l+0xb00>)
 8112570:	2200      	movs	r2, #0
 8112572:	f7ee f8c9 	bl	8100708 <__aeabi_dmul>
 8112576:	4606      	mov	r6, r0
 8112578:	460f      	mov	r7, r1
 811257a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 811257e:	9606      	str	r6, [sp, #24]
 8112580:	9307      	str	r3, [sp, #28]
 8112582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8112586:	4d57      	ldr	r5, [pc, #348]	@ (81126e4 <_strtod_l+0xaf4>)
 8112588:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 811258c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811258e:	401d      	ands	r5, r3
 8112590:	4b58      	ldr	r3, [pc, #352]	@ (81126f4 <_strtod_l+0xb04>)
 8112592:	429d      	cmp	r5, r3
 8112594:	f040 80b2 	bne.w	81126fc <_strtod_l+0xb0c>
 8112598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811259a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 811259e:	ec4b ab10 	vmov	d0, sl, fp
 81125a2:	f7ff f9c9 	bl	8111938 <__ulp>
 81125a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 81125aa:	ec51 0b10 	vmov	r0, r1, d0
 81125ae:	f7ee f8ab 	bl	8100708 <__aeabi_dmul>
 81125b2:	4652      	mov	r2, sl
 81125b4:	465b      	mov	r3, fp
 81125b6:	f7ed fef1 	bl	810039c <__adddf3>
 81125ba:	460b      	mov	r3, r1
 81125bc:	4949      	ldr	r1, [pc, #292]	@ (81126e4 <_strtod_l+0xaf4>)
 81125be:	4a4e      	ldr	r2, [pc, #312]	@ (81126f8 <_strtod_l+0xb08>)
 81125c0:	4019      	ands	r1, r3
 81125c2:	4291      	cmp	r1, r2
 81125c4:	4682      	mov	sl, r0
 81125c6:	d942      	bls.n	811264e <_strtod_l+0xa5e>
 81125c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 81125ca:	4b47      	ldr	r3, [pc, #284]	@ (81126e8 <_strtod_l+0xaf8>)
 81125cc:	429a      	cmp	r2, r3
 81125ce:	d103      	bne.n	81125d8 <_strtod_l+0x9e8>
 81125d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 81125d2:	3301      	adds	r3, #1
 81125d4:	f43f ad2b 	beq.w	811202e <_strtod_l+0x43e>
 81125d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 81126e8 <_strtod_l+0xaf8>
 81125dc:	f04f 3aff 	mov.w	sl, #4294967295
 81125e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81125e2:	9805      	ldr	r0, [sp, #20]
 81125e4:	f7fe fe74 	bl	81112d0 <_Bfree>
 81125e8:	9805      	ldr	r0, [sp, #20]
 81125ea:	4649      	mov	r1, r9
 81125ec:	f7fe fe70 	bl	81112d0 <_Bfree>
 81125f0:	9805      	ldr	r0, [sp, #20]
 81125f2:	4641      	mov	r1, r8
 81125f4:	f7fe fe6c 	bl	81112d0 <_Bfree>
 81125f8:	9805      	ldr	r0, [sp, #20]
 81125fa:	4621      	mov	r1, r4
 81125fc:	f7fe fe68 	bl	81112d0 <_Bfree>
 8112600:	e618      	b.n	8112234 <_strtod_l+0x644>
 8112602:	f1ba 0f01 	cmp.w	sl, #1
 8112606:	d103      	bne.n	8112610 <_strtod_l+0xa20>
 8112608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811260a:	2b00      	cmp	r3, #0
 811260c:	f43f ada5 	beq.w	811215a <_strtod_l+0x56a>
 8112610:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 81126c0 <_strtod_l+0xad0>
 8112614:	4f35      	ldr	r7, [pc, #212]	@ (81126ec <_strtod_l+0xafc>)
 8112616:	ed8d 7b06 	vstr	d7, [sp, #24]
 811261a:	2600      	movs	r6, #0
 811261c:	e7b1      	b.n	8112582 <_strtod_l+0x992>
 811261e:	4f34      	ldr	r7, [pc, #208]	@ (81126f0 <_strtod_l+0xb00>)
 8112620:	2600      	movs	r6, #0
 8112622:	e7aa      	b.n	811257a <_strtod_l+0x98a>
 8112624:	4b32      	ldr	r3, [pc, #200]	@ (81126f0 <_strtod_l+0xb00>)
 8112626:	4630      	mov	r0, r6
 8112628:	4639      	mov	r1, r7
 811262a:	2200      	movs	r2, #0
 811262c:	f7ee f86c 	bl	8100708 <__aeabi_dmul>
 8112630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112632:	4606      	mov	r6, r0
 8112634:	460f      	mov	r7, r1
 8112636:	2b00      	cmp	r3, #0
 8112638:	d09f      	beq.n	811257a <_strtod_l+0x98a>
 811263a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 811263e:	e7a0      	b.n	8112582 <_strtod_l+0x992>
 8112640:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 81126c8 <_strtod_l+0xad8>
 8112644:	ed8d 7b06 	vstr	d7, [sp, #24]
 8112648:	ec57 6b17 	vmov	r6, r7, d7
 811264c:	e799      	b.n	8112582 <_strtod_l+0x992>
 811264e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8112652:	9b08      	ldr	r3, [sp, #32]
 8112654:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8112658:	2b00      	cmp	r3, #0
 811265a:	d1c1      	bne.n	81125e0 <_strtod_l+0x9f0>
 811265c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8112660:	0d1b      	lsrs	r3, r3, #20
 8112662:	051b      	lsls	r3, r3, #20
 8112664:	429d      	cmp	r5, r3
 8112666:	d1bb      	bne.n	81125e0 <_strtod_l+0x9f0>
 8112668:	4630      	mov	r0, r6
 811266a:	4639      	mov	r1, r7
 811266c:	f7ee fbac 	bl	8100dc8 <__aeabi_d2lz>
 8112670:	f7ee f81c 	bl	81006ac <__aeabi_l2d>
 8112674:	4602      	mov	r2, r0
 8112676:	460b      	mov	r3, r1
 8112678:	4630      	mov	r0, r6
 811267a:	4639      	mov	r1, r7
 811267c:	f7ed fe8c 	bl	8100398 <__aeabi_dsub>
 8112680:	460b      	mov	r3, r1
 8112682:	4602      	mov	r2, r0
 8112684:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8112688:	f3cb 0613 	ubfx	r6, fp, #0, #20
 811268c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811268e:	ea46 060a 	orr.w	r6, r6, sl
 8112692:	431e      	orrs	r6, r3
 8112694:	d06f      	beq.n	8112776 <_strtod_l+0xb86>
 8112696:	a30e      	add	r3, pc, #56	@ (adr r3, 81126d0 <_strtod_l+0xae0>)
 8112698:	e9d3 2300 	ldrd	r2, r3, [r3]
 811269c:	f7ee faa6 	bl	8100bec <__aeabi_dcmplt>
 81126a0:	2800      	cmp	r0, #0
 81126a2:	f47f accf 	bne.w	8112044 <_strtod_l+0x454>
 81126a6:	a30c      	add	r3, pc, #48	@ (adr r3, 81126d8 <_strtod_l+0xae8>)
 81126a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81126ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81126b0:	f7ee faba 	bl	8100c28 <__aeabi_dcmpgt>
 81126b4:	2800      	cmp	r0, #0
 81126b6:	d093      	beq.n	81125e0 <_strtod_l+0x9f0>
 81126b8:	e4c4      	b.n	8112044 <_strtod_l+0x454>
 81126ba:	bf00      	nop
 81126bc:	f3af 8000 	nop.w
 81126c0:	00000000 	.word	0x00000000
 81126c4:	bff00000 	.word	0xbff00000
 81126c8:	00000000 	.word	0x00000000
 81126cc:	3ff00000 	.word	0x3ff00000
 81126d0:	94a03595 	.word	0x94a03595
 81126d4:	3fdfffff 	.word	0x3fdfffff
 81126d8:	35afe535 	.word	0x35afe535
 81126dc:	3fe00000 	.word	0x3fe00000
 81126e0:	000fffff 	.word	0x000fffff
 81126e4:	7ff00000 	.word	0x7ff00000
 81126e8:	7fefffff 	.word	0x7fefffff
 81126ec:	3ff00000 	.word	0x3ff00000
 81126f0:	3fe00000 	.word	0x3fe00000
 81126f4:	7fe00000 	.word	0x7fe00000
 81126f8:	7c9fffff 	.word	0x7c9fffff
 81126fc:	9b08      	ldr	r3, [sp, #32]
 81126fe:	b323      	cbz	r3, 811274a <_strtod_l+0xb5a>
 8112700:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8112704:	d821      	bhi.n	811274a <_strtod_l+0xb5a>
 8112706:	a328      	add	r3, pc, #160	@ (adr r3, 81127a8 <_strtod_l+0xbb8>)
 8112708:	e9d3 2300 	ldrd	r2, r3, [r3]
 811270c:	4630      	mov	r0, r6
 811270e:	4639      	mov	r1, r7
 8112710:	f7ee fa76 	bl	8100c00 <__aeabi_dcmple>
 8112714:	b1a0      	cbz	r0, 8112740 <_strtod_l+0xb50>
 8112716:	4639      	mov	r1, r7
 8112718:	4630      	mov	r0, r6
 811271a:	f7ee facd 	bl	8100cb8 <__aeabi_d2uiz>
 811271e:	2801      	cmp	r0, #1
 8112720:	bf38      	it	cc
 8112722:	2001      	movcc	r0, #1
 8112724:	f7ed ff76 	bl	8100614 <__aeabi_ui2d>
 8112728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811272a:	4606      	mov	r6, r0
 811272c:	460f      	mov	r7, r1
 811272e:	b9fb      	cbnz	r3, 8112770 <_strtod_l+0xb80>
 8112730:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8112734:	9014      	str	r0, [sp, #80]	@ 0x50
 8112736:	9315      	str	r3, [sp, #84]	@ 0x54
 8112738:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 811273c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8112740:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8112742:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8112746:	1b5b      	subs	r3, r3, r5
 8112748:	9311      	str	r3, [sp, #68]	@ 0x44
 811274a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 811274e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8112752:	f7ff f8f1 	bl	8111938 <__ulp>
 8112756:	4650      	mov	r0, sl
 8112758:	ec53 2b10 	vmov	r2, r3, d0
 811275c:	4659      	mov	r1, fp
 811275e:	f7ed ffd3 	bl	8100708 <__aeabi_dmul>
 8112762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8112766:	f7ed fe19 	bl	810039c <__adddf3>
 811276a:	4682      	mov	sl, r0
 811276c:	468b      	mov	fp, r1
 811276e:	e770      	b.n	8112652 <_strtod_l+0xa62>
 8112770:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8112774:	e7e0      	b.n	8112738 <_strtod_l+0xb48>
 8112776:	a30e      	add	r3, pc, #56	@ (adr r3, 81127b0 <_strtod_l+0xbc0>)
 8112778:	e9d3 2300 	ldrd	r2, r3, [r3]
 811277c:	f7ee fa36 	bl	8100bec <__aeabi_dcmplt>
 8112780:	e798      	b.n	81126b4 <_strtod_l+0xac4>
 8112782:	2300      	movs	r3, #0
 8112784:	930b      	str	r3, [sp, #44]	@ 0x2c
 8112786:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8112788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811278a:	6013      	str	r3, [r2, #0]
 811278c:	f7ff ba6d 	b.w	8111c6a <_strtod_l+0x7a>
 8112790:	2a65      	cmp	r2, #101	@ 0x65
 8112792:	f43f ab66 	beq.w	8111e62 <_strtod_l+0x272>
 8112796:	2a45      	cmp	r2, #69	@ 0x45
 8112798:	f43f ab63 	beq.w	8111e62 <_strtod_l+0x272>
 811279c:	2301      	movs	r3, #1
 811279e:	f7ff bb9e 	b.w	8111ede <_strtod_l+0x2ee>
 81127a2:	bf00      	nop
 81127a4:	f3af 8000 	nop.w
 81127a8:	ffc00000 	.word	0xffc00000
 81127ac:	41dfffff 	.word	0x41dfffff
 81127b0:	94a03595 	.word	0x94a03595
 81127b4:	3fcfffff 	.word	0x3fcfffff

081127b8 <_strtod_r>:
 81127b8:	4b01      	ldr	r3, [pc, #4]	@ (81127c0 <_strtod_r+0x8>)
 81127ba:	f7ff ba19 	b.w	8111bf0 <_strtod_l>
 81127be:	bf00      	nop
 81127c0:	100000fc 	.word	0x100000fc

081127c4 <_strtol_l.constprop.0>:
 81127c4:	2b24      	cmp	r3, #36	@ 0x24
 81127c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81127ca:	4686      	mov	lr, r0
 81127cc:	4690      	mov	r8, r2
 81127ce:	d801      	bhi.n	81127d4 <_strtol_l.constprop.0+0x10>
 81127d0:	2b01      	cmp	r3, #1
 81127d2:	d106      	bne.n	81127e2 <_strtol_l.constprop.0+0x1e>
 81127d4:	f7fd fd8e 	bl	81102f4 <__errno>
 81127d8:	2316      	movs	r3, #22
 81127da:	6003      	str	r3, [r0, #0]
 81127dc:	2000      	movs	r0, #0
 81127de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81127e2:	4834      	ldr	r0, [pc, #208]	@ (81128b4 <_strtol_l.constprop.0+0xf0>)
 81127e4:	460d      	mov	r5, r1
 81127e6:	462a      	mov	r2, r5
 81127e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 81127ec:	5d06      	ldrb	r6, [r0, r4]
 81127ee:	f016 0608 	ands.w	r6, r6, #8
 81127f2:	d1f8      	bne.n	81127e6 <_strtol_l.constprop.0+0x22>
 81127f4:	2c2d      	cmp	r4, #45	@ 0x2d
 81127f6:	d12d      	bne.n	8112854 <_strtol_l.constprop.0+0x90>
 81127f8:	782c      	ldrb	r4, [r5, #0]
 81127fa:	2601      	movs	r6, #1
 81127fc:	1c95      	adds	r5, r2, #2
 81127fe:	f033 0210 	bics.w	r2, r3, #16
 8112802:	d109      	bne.n	8112818 <_strtol_l.constprop.0+0x54>
 8112804:	2c30      	cmp	r4, #48	@ 0x30
 8112806:	d12a      	bne.n	811285e <_strtol_l.constprop.0+0x9a>
 8112808:	782a      	ldrb	r2, [r5, #0]
 811280a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 811280e:	2a58      	cmp	r2, #88	@ 0x58
 8112810:	d125      	bne.n	811285e <_strtol_l.constprop.0+0x9a>
 8112812:	786c      	ldrb	r4, [r5, #1]
 8112814:	2310      	movs	r3, #16
 8112816:	3502      	adds	r5, #2
 8112818:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 811281c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8112820:	2200      	movs	r2, #0
 8112822:	fbbc f9f3 	udiv	r9, ip, r3
 8112826:	4610      	mov	r0, r2
 8112828:	fb03 ca19 	mls	sl, r3, r9, ip
 811282c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8112830:	2f09      	cmp	r7, #9
 8112832:	d81b      	bhi.n	811286c <_strtol_l.constprop.0+0xa8>
 8112834:	463c      	mov	r4, r7
 8112836:	42a3      	cmp	r3, r4
 8112838:	dd27      	ble.n	811288a <_strtol_l.constprop.0+0xc6>
 811283a:	1c57      	adds	r7, r2, #1
 811283c:	d007      	beq.n	811284e <_strtol_l.constprop.0+0x8a>
 811283e:	4581      	cmp	r9, r0
 8112840:	d320      	bcc.n	8112884 <_strtol_l.constprop.0+0xc0>
 8112842:	d101      	bne.n	8112848 <_strtol_l.constprop.0+0x84>
 8112844:	45a2      	cmp	sl, r4
 8112846:	db1d      	blt.n	8112884 <_strtol_l.constprop.0+0xc0>
 8112848:	fb00 4003 	mla	r0, r0, r3, r4
 811284c:	2201      	movs	r2, #1
 811284e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8112852:	e7eb      	b.n	811282c <_strtol_l.constprop.0+0x68>
 8112854:	2c2b      	cmp	r4, #43	@ 0x2b
 8112856:	bf04      	itt	eq
 8112858:	782c      	ldrbeq	r4, [r5, #0]
 811285a:	1c95      	addeq	r5, r2, #2
 811285c:	e7cf      	b.n	81127fe <_strtol_l.constprop.0+0x3a>
 811285e:	2b00      	cmp	r3, #0
 8112860:	d1da      	bne.n	8112818 <_strtol_l.constprop.0+0x54>
 8112862:	2c30      	cmp	r4, #48	@ 0x30
 8112864:	bf0c      	ite	eq
 8112866:	2308      	moveq	r3, #8
 8112868:	230a      	movne	r3, #10
 811286a:	e7d5      	b.n	8112818 <_strtol_l.constprop.0+0x54>
 811286c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8112870:	2f19      	cmp	r7, #25
 8112872:	d801      	bhi.n	8112878 <_strtol_l.constprop.0+0xb4>
 8112874:	3c37      	subs	r4, #55	@ 0x37
 8112876:	e7de      	b.n	8112836 <_strtol_l.constprop.0+0x72>
 8112878:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 811287c:	2f19      	cmp	r7, #25
 811287e:	d804      	bhi.n	811288a <_strtol_l.constprop.0+0xc6>
 8112880:	3c57      	subs	r4, #87	@ 0x57
 8112882:	e7d8      	b.n	8112836 <_strtol_l.constprop.0+0x72>
 8112884:	f04f 32ff 	mov.w	r2, #4294967295
 8112888:	e7e1      	b.n	811284e <_strtol_l.constprop.0+0x8a>
 811288a:	1c53      	adds	r3, r2, #1
 811288c:	d108      	bne.n	81128a0 <_strtol_l.constprop.0+0xdc>
 811288e:	2322      	movs	r3, #34	@ 0x22
 8112890:	f8ce 3000 	str.w	r3, [lr]
 8112894:	4660      	mov	r0, ip
 8112896:	f1b8 0f00 	cmp.w	r8, #0
 811289a:	d0a0      	beq.n	81127de <_strtol_l.constprop.0+0x1a>
 811289c:	1e69      	subs	r1, r5, #1
 811289e:	e006      	b.n	81128ae <_strtol_l.constprop.0+0xea>
 81128a0:	b106      	cbz	r6, 81128a4 <_strtol_l.constprop.0+0xe0>
 81128a2:	4240      	negs	r0, r0
 81128a4:	f1b8 0f00 	cmp.w	r8, #0
 81128a8:	d099      	beq.n	81127de <_strtol_l.constprop.0+0x1a>
 81128aa:	2a00      	cmp	r2, #0
 81128ac:	d1f6      	bne.n	811289c <_strtol_l.constprop.0+0xd8>
 81128ae:	f8c8 1000 	str.w	r1, [r8]
 81128b2:	e794      	b.n	81127de <_strtol_l.constprop.0+0x1a>
 81128b4:	08113c91 	.word	0x08113c91

081128b8 <_strtol_r>:
 81128b8:	f7ff bf84 	b.w	81127c4 <_strtol_l.constprop.0>

081128bc <__ssputs_r>:
 81128bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81128c0:	688e      	ldr	r6, [r1, #8]
 81128c2:	461f      	mov	r7, r3
 81128c4:	42be      	cmp	r6, r7
 81128c6:	680b      	ldr	r3, [r1, #0]
 81128c8:	4682      	mov	sl, r0
 81128ca:	460c      	mov	r4, r1
 81128cc:	4690      	mov	r8, r2
 81128ce:	d82d      	bhi.n	811292c <__ssputs_r+0x70>
 81128d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81128d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 81128d8:	d026      	beq.n	8112928 <__ssputs_r+0x6c>
 81128da:	6965      	ldr	r5, [r4, #20]
 81128dc:	6909      	ldr	r1, [r1, #16]
 81128de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81128e2:	eba3 0901 	sub.w	r9, r3, r1
 81128e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81128ea:	1c7b      	adds	r3, r7, #1
 81128ec:	444b      	add	r3, r9
 81128ee:	106d      	asrs	r5, r5, #1
 81128f0:	429d      	cmp	r5, r3
 81128f2:	bf38      	it	cc
 81128f4:	461d      	movcc	r5, r3
 81128f6:	0553      	lsls	r3, r2, #21
 81128f8:	d527      	bpl.n	811294a <__ssputs_r+0x8e>
 81128fa:	4629      	mov	r1, r5
 81128fc:	f7fe fc1c 	bl	8111138 <_malloc_r>
 8112900:	4606      	mov	r6, r0
 8112902:	b360      	cbz	r0, 811295e <__ssputs_r+0xa2>
 8112904:	6921      	ldr	r1, [r4, #16]
 8112906:	464a      	mov	r2, r9
 8112908:	f7fd fd21 	bl	811034e <memcpy>
 811290c:	89a3      	ldrh	r3, [r4, #12]
 811290e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8112912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8112916:	81a3      	strh	r3, [r4, #12]
 8112918:	6126      	str	r6, [r4, #16]
 811291a:	6165      	str	r5, [r4, #20]
 811291c:	444e      	add	r6, r9
 811291e:	eba5 0509 	sub.w	r5, r5, r9
 8112922:	6026      	str	r6, [r4, #0]
 8112924:	60a5      	str	r5, [r4, #8]
 8112926:	463e      	mov	r6, r7
 8112928:	42be      	cmp	r6, r7
 811292a:	d900      	bls.n	811292e <__ssputs_r+0x72>
 811292c:	463e      	mov	r6, r7
 811292e:	6820      	ldr	r0, [r4, #0]
 8112930:	4632      	mov	r2, r6
 8112932:	4641      	mov	r1, r8
 8112934:	f000 fb7c 	bl	8113030 <memmove>
 8112938:	68a3      	ldr	r3, [r4, #8]
 811293a:	1b9b      	subs	r3, r3, r6
 811293c:	60a3      	str	r3, [r4, #8]
 811293e:	6823      	ldr	r3, [r4, #0]
 8112940:	4433      	add	r3, r6
 8112942:	6023      	str	r3, [r4, #0]
 8112944:	2000      	movs	r0, #0
 8112946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811294a:	462a      	mov	r2, r5
 811294c:	f000 ff3d 	bl	81137ca <_realloc_r>
 8112950:	4606      	mov	r6, r0
 8112952:	2800      	cmp	r0, #0
 8112954:	d1e0      	bne.n	8112918 <__ssputs_r+0x5c>
 8112956:	6921      	ldr	r1, [r4, #16]
 8112958:	4650      	mov	r0, sl
 811295a:	f7fe fb79 	bl	8111050 <_free_r>
 811295e:	230c      	movs	r3, #12
 8112960:	f8ca 3000 	str.w	r3, [sl]
 8112964:	89a3      	ldrh	r3, [r4, #12]
 8112966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811296a:	81a3      	strh	r3, [r4, #12]
 811296c:	f04f 30ff 	mov.w	r0, #4294967295
 8112970:	e7e9      	b.n	8112946 <__ssputs_r+0x8a>
	...

08112974 <_svfiprintf_r>:
 8112974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112978:	4698      	mov	r8, r3
 811297a:	898b      	ldrh	r3, [r1, #12]
 811297c:	061b      	lsls	r3, r3, #24
 811297e:	b09d      	sub	sp, #116	@ 0x74
 8112980:	4607      	mov	r7, r0
 8112982:	460d      	mov	r5, r1
 8112984:	4614      	mov	r4, r2
 8112986:	d510      	bpl.n	81129aa <_svfiprintf_r+0x36>
 8112988:	690b      	ldr	r3, [r1, #16]
 811298a:	b973      	cbnz	r3, 81129aa <_svfiprintf_r+0x36>
 811298c:	2140      	movs	r1, #64	@ 0x40
 811298e:	f7fe fbd3 	bl	8111138 <_malloc_r>
 8112992:	6028      	str	r0, [r5, #0]
 8112994:	6128      	str	r0, [r5, #16]
 8112996:	b930      	cbnz	r0, 81129a6 <_svfiprintf_r+0x32>
 8112998:	230c      	movs	r3, #12
 811299a:	603b      	str	r3, [r7, #0]
 811299c:	f04f 30ff 	mov.w	r0, #4294967295
 81129a0:	b01d      	add	sp, #116	@ 0x74
 81129a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81129a6:	2340      	movs	r3, #64	@ 0x40
 81129a8:	616b      	str	r3, [r5, #20]
 81129aa:	2300      	movs	r3, #0
 81129ac:	9309      	str	r3, [sp, #36]	@ 0x24
 81129ae:	2320      	movs	r3, #32
 81129b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81129b4:	f8cd 800c 	str.w	r8, [sp, #12]
 81129b8:	2330      	movs	r3, #48	@ 0x30
 81129ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8112b58 <_svfiprintf_r+0x1e4>
 81129be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81129c2:	f04f 0901 	mov.w	r9, #1
 81129c6:	4623      	mov	r3, r4
 81129c8:	469a      	mov	sl, r3
 81129ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 81129ce:	b10a      	cbz	r2, 81129d4 <_svfiprintf_r+0x60>
 81129d0:	2a25      	cmp	r2, #37	@ 0x25
 81129d2:	d1f9      	bne.n	81129c8 <_svfiprintf_r+0x54>
 81129d4:	ebba 0b04 	subs.w	fp, sl, r4
 81129d8:	d00b      	beq.n	81129f2 <_svfiprintf_r+0x7e>
 81129da:	465b      	mov	r3, fp
 81129dc:	4622      	mov	r2, r4
 81129de:	4629      	mov	r1, r5
 81129e0:	4638      	mov	r0, r7
 81129e2:	f7ff ff6b 	bl	81128bc <__ssputs_r>
 81129e6:	3001      	adds	r0, #1
 81129e8:	f000 80a7 	beq.w	8112b3a <_svfiprintf_r+0x1c6>
 81129ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81129ee:	445a      	add	r2, fp
 81129f0:	9209      	str	r2, [sp, #36]	@ 0x24
 81129f2:	f89a 3000 	ldrb.w	r3, [sl]
 81129f6:	2b00      	cmp	r3, #0
 81129f8:	f000 809f 	beq.w	8112b3a <_svfiprintf_r+0x1c6>
 81129fc:	2300      	movs	r3, #0
 81129fe:	f04f 32ff 	mov.w	r2, #4294967295
 8112a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8112a06:	f10a 0a01 	add.w	sl, sl, #1
 8112a0a:	9304      	str	r3, [sp, #16]
 8112a0c:	9307      	str	r3, [sp, #28]
 8112a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8112a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8112a14:	4654      	mov	r4, sl
 8112a16:	2205      	movs	r2, #5
 8112a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112a1c:	484e      	ldr	r0, [pc, #312]	@ (8112b58 <_svfiprintf_r+0x1e4>)
 8112a1e:	f7ed fc5f 	bl	81002e0 <memchr>
 8112a22:	9a04      	ldr	r2, [sp, #16]
 8112a24:	b9d8      	cbnz	r0, 8112a5e <_svfiprintf_r+0xea>
 8112a26:	06d0      	lsls	r0, r2, #27
 8112a28:	bf44      	itt	mi
 8112a2a:	2320      	movmi	r3, #32
 8112a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112a30:	0711      	lsls	r1, r2, #28
 8112a32:	bf44      	itt	mi
 8112a34:	232b      	movmi	r3, #43	@ 0x2b
 8112a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8112a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8112a40:	d015      	beq.n	8112a6e <_svfiprintf_r+0xfa>
 8112a42:	9a07      	ldr	r2, [sp, #28]
 8112a44:	4654      	mov	r4, sl
 8112a46:	2000      	movs	r0, #0
 8112a48:	f04f 0c0a 	mov.w	ip, #10
 8112a4c:	4621      	mov	r1, r4
 8112a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112a52:	3b30      	subs	r3, #48	@ 0x30
 8112a54:	2b09      	cmp	r3, #9
 8112a56:	d94b      	bls.n	8112af0 <_svfiprintf_r+0x17c>
 8112a58:	b1b0      	cbz	r0, 8112a88 <_svfiprintf_r+0x114>
 8112a5a:	9207      	str	r2, [sp, #28]
 8112a5c:	e014      	b.n	8112a88 <_svfiprintf_r+0x114>
 8112a5e:	eba0 0308 	sub.w	r3, r0, r8
 8112a62:	fa09 f303 	lsl.w	r3, r9, r3
 8112a66:	4313      	orrs	r3, r2
 8112a68:	9304      	str	r3, [sp, #16]
 8112a6a:	46a2      	mov	sl, r4
 8112a6c:	e7d2      	b.n	8112a14 <_svfiprintf_r+0xa0>
 8112a6e:	9b03      	ldr	r3, [sp, #12]
 8112a70:	1d19      	adds	r1, r3, #4
 8112a72:	681b      	ldr	r3, [r3, #0]
 8112a74:	9103      	str	r1, [sp, #12]
 8112a76:	2b00      	cmp	r3, #0
 8112a78:	bfbb      	ittet	lt
 8112a7a:	425b      	neglt	r3, r3
 8112a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8112a80:	9307      	strge	r3, [sp, #28]
 8112a82:	9307      	strlt	r3, [sp, #28]
 8112a84:	bfb8      	it	lt
 8112a86:	9204      	strlt	r2, [sp, #16]
 8112a88:	7823      	ldrb	r3, [r4, #0]
 8112a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8112a8c:	d10a      	bne.n	8112aa4 <_svfiprintf_r+0x130>
 8112a8e:	7863      	ldrb	r3, [r4, #1]
 8112a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8112a92:	d132      	bne.n	8112afa <_svfiprintf_r+0x186>
 8112a94:	9b03      	ldr	r3, [sp, #12]
 8112a96:	1d1a      	adds	r2, r3, #4
 8112a98:	681b      	ldr	r3, [r3, #0]
 8112a9a:	9203      	str	r2, [sp, #12]
 8112a9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8112aa0:	3402      	adds	r4, #2
 8112aa2:	9305      	str	r3, [sp, #20]
 8112aa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8112b68 <_svfiprintf_r+0x1f4>
 8112aa8:	7821      	ldrb	r1, [r4, #0]
 8112aaa:	2203      	movs	r2, #3
 8112aac:	4650      	mov	r0, sl
 8112aae:	f7ed fc17 	bl	81002e0 <memchr>
 8112ab2:	b138      	cbz	r0, 8112ac4 <_svfiprintf_r+0x150>
 8112ab4:	9b04      	ldr	r3, [sp, #16]
 8112ab6:	eba0 000a 	sub.w	r0, r0, sl
 8112aba:	2240      	movs	r2, #64	@ 0x40
 8112abc:	4082      	lsls	r2, r0
 8112abe:	4313      	orrs	r3, r2
 8112ac0:	3401      	adds	r4, #1
 8112ac2:	9304      	str	r3, [sp, #16]
 8112ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112ac8:	4824      	ldr	r0, [pc, #144]	@ (8112b5c <_svfiprintf_r+0x1e8>)
 8112aca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8112ace:	2206      	movs	r2, #6
 8112ad0:	f7ed fc06 	bl	81002e0 <memchr>
 8112ad4:	2800      	cmp	r0, #0
 8112ad6:	d036      	beq.n	8112b46 <_svfiprintf_r+0x1d2>
 8112ad8:	4b21      	ldr	r3, [pc, #132]	@ (8112b60 <_svfiprintf_r+0x1ec>)
 8112ada:	bb1b      	cbnz	r3, 8112b24 <_svfiprintf_r+0x1b0>
 8112adc:	9b03      	ldr	r3, [sp, #12]
 8112ade:	3307      	adds	r3, #7
 8112ae0:	f023 0307 	bic.w	r3, r3, #7
 8112ae4:	3308      	adds	r3, #8
 8112ae6:	9303      	str	r3, [sp, #12]
 8112ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112aea:	4433      	add	r3, r6
 8112aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8112aee:	e76a      	b.n	81129c6 <_svfiprintf_r+0x52>
 8112af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8112af4:	460c      	mov	r4, r1
 8112af6:	2001      	movs	r0, #1
 8112af8:	e7a8      	b.n	8112a4c <_svfiprintf_r+0xd8>
 8112afa:	2300      	movs	r3, #0
 8112afc:	3401      	adds	r4, #1
 8112afe:	9305      	str	r3, [sp, #20]
 8112b00:	4619      	mov	r1, r3
 8112b02:	f04f 0c0a 	mov.w	ip, #10
 8112b06:	4620      	mov	r0, r4
 8112b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112b0c:	3a30      	subs	r2, #48	@ 0x30
 8112b0e:	2a09      	cmp	r2, #9
 8112b10:	d903      	bls.n	8112b1a <_svfiprintf_r+0x1a6>
 8112b12:	2b00      	cmp	r3, #0
 8112b14:	d0c6      	beq.n	8112aa4 <_svfiprintf_r+0x130>
 8112b16:	9105      	str	r1, [sp, #20]
 8112b18:	e7c4      	b.n	8112aa4 <_svfiprintf_r+0x130>
 8112b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8112b1e:	4604      	mov	r4, r0
 8112b20:	2301      	movs	r3, #1
 8112b22:	e7f0      	b.n	8112b06 <_svfiprintf_r+0x192>
 8112b24:	ab03      	add	r3, sp, #12
 8112b26:	9300      	str	r3, [sp, #0]
 8112b28:	462a      	mov	r2, r5
 8112b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8112b64 <_svfiprintf_r+0x1f0>)
 8112b2c:	a904      	add	r1, sp, #16
 8112b2e:	4638      	mov	r0, r7
 8112b30:	f7fc fbf6 	bl	810f320 <_printf_float>
 8112b34:	1c42      	adds	r2, r0, #1
 8112b36:	4606      	mov	r6, r0
 8112b38:	d1d6      	bne.n	8112ae8 <_svfiprintf_r+0x174>
 8112b3a:	89ab      	ldrh	r3, [r5, #12]
 8112b3c:	065b      	lsls	r3, r3, #25
 8112b3e:	f53f af2d 	bmi.w	811299c <_svfiprintf_r+0x28>
 8112b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8112b44:	e72c      	b.n	81129a0 <_svfiprintf_r+0x2c>
 8112b46:	ab03      	add	r3, sp, #12
 8112b48:	9300      	str	r3, [sp, #0]
 8112b4a:	462a      	mov	r2, r5
 8112b4c:	4b05      	ldr	r3, [pc, #20]	@ (8112b64 <_svfiprintf_r+0x1f0>)
 8112b4e:	a904      	add	r1, sp, #16
 8112b50:	4638      	mov	r0, r7
 8112b52:	f7fc fe7d 	bl	810f850 <_printf_i>
 8112b56:	e7ed      	b.n	8112b34 <_svfiprintf_r+0x1c0>
 8112b58:	08113d91 	.word	0x08113d91
 8112b5c:	08113d9b 	.word	0x08113d9b
 8112b60:	0810f321 	.word	0x0810f321
 8112b64:	081128bd 	.word	0x081128bd
 8112b68:	08113d97 	.word	0x08113d97

08112b6c <__sfputc_r>:
 8112b6c:	6893      	ldr	r3, [r2, #8]
 8112b6e:	3b01      	subs	r3, #1
 8112b70:	2b00      	cmp	r3, #0
 8112b72:	b410      	push	{r4}
 8112b74:	6093      	str	r3, [r2, #8]
 8112b76:	da08      	bge.n	8112b8a <__sfputc_r+0x1e>
 8112b78:	6994      	ldr	r4, [r2, #24]
 8112b7a:	42a3      	cmp	r3, r4
 8112b7c:	db01      	blt.n	8112b82 <__sfputc_r+0x16>
 8112b7e:	290a      	cmp	r1, #10
 8112b80:	d103      	bne.n	8112b8a <__sfputc_r+0x1e>
 8112b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8112b86:	f7fd bace 	b.w	8110126 <__swbuf_r>
 8112b8a:	6813      	ldr	r3, [r2, #0]
 8112b8c:	1c58      	adds	r0, r3, #1
 8112b8e:	6010      	str	r0, [r2, #0]
 8112b90:	7019      	strb	r1, [r3, #0]
 8112b92:	4608      	mov	r0, r1
 8112b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8112b98:	4770      	bx	lr

08112b9a <__sfputs_r>:
 8112b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112b9c:	4606      	mov	r6, r0
 8112b9e:	460f      	mov	r7, r1
 8112ba0:	4614      	mov	r4, r2
 8112ba2:	18d5      	adds	r5, r2, r3
 8112ba4:	42ac      	cmp	r4, r5
 8112ba6:	d101      	bne.n	8112bac <__sfputs_r+0x12>
 8112ba8:	2000      	movs	r0, #0
 8112baa:	e007      	b.n	8112bbc <__sfputs_r+0x22>
 8112bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112bb0:	463a      	mov	r2, r7
 8112bb2:	4630      	mov	r0, r6
 8112bb4:	f7ff ffda 	bl	8112b6c <__sfputc_r>
 8112bb8:	1c43      	adds	r3, r0, #1
 8112bba:	d1f3      	bne.n	8112ba4 <__sfputs_r+0xa>
 8112bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08112bc0 <_vfiprintf_r>:
 8112bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112bc4:	460d      	mov	r5, r1
 8112bc6:	b09d      	sub	sp, #116	@ 0x74
 8112bc8:	4614      	mov	r4, r2
 8112bca:	4698      	mov	r8, r3
 8112bcc:	4606      	mov	r6, r0
 8112bce:	b118      	cbz	r0, 8112bd8 <_vfiprintf_r+0x18>
 8112bd0:	6a03      	ldr	r3, [r0, #32]
 8112bd2:	b90b      	cbnz	r3, 8112bd8 <_vfiprintf_r+0x18>
 8112bd4:	f7fd f9fc 	bl	810ffd0 <__sinit>
 8112bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112bda:	07d9      	lsls	r1, r3, #31
 8112bdc:	d405      	bmi.n	8112bea <_vfiprintf_r+0x2a>
 8112bde:	89ab      	ldrh	r3, [r5, #12]
 8112be0:	059a      	lsls	r2, r3, #22
 8112be2:	d402      	bmi.n	8112bea <_vfiprintf_r+0x2a>
 8112be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8112be6:	f7fd fbb0 	bl	811034a <__retarget_lock_acquire_recursive>
 8112bea:	89ab      	ldrh	r3, [r5, #12]
 8112bec:	071b      	lsls	r3, r3, #28
 8112bee:	d501      	bpl.n	8112bf4 <_vfiprintf_r+0x34>
 8112bf0:	692b      	ldr	r3, [r5, #16]
 8112bf2:	b99b      	cbnz	r3, 8112c1c <_vfiprintf_r+0x5c>
 8112bf4:	4629      	mov	r1, r5
 8112bf6:	4630      	mov	r0, r6
 8112bf8:	f7fd fad4 	bl	81101a4 <__swsetup_r>
 8112bfc:	b170      	cbz	r0, 8112c1c <_vfiprintf_r+0x5c>
 8112bfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112c00:	07dc      	lsls	r4, r3, #31
 8112c02:	d504      	bpl.n	8112c0e <_vfiprintf_r+0x4e>
 8112c04:	f04f 30ff 	mov.w	r0, #4294967295
 8112c08:	b01d      	add	sp, #116	@ 0x74
 8112c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112c0e:	89ab      	ldrh	r3, [r5, #12]
 8112c10:	0598      	lsls	r0, r3, #22
 8112c12:	d4f7      	bmi.n	8112c04 <_vfiprintf_r+0x44>
 8112c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8112c16:	f7fd fb99 	bl	811034c <__retarget_lock_release_recursive>
 8112c1a:	e7f3      	b.n	8112c04 <_vfiprintf_r+0x44>
 8112c1c:	2300      	movs	r3, #0
 8112c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8112c20:	2320      	movs	r3, #32
 8112c22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8112c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8112c2a:	2330      	movs	r3, #48	@ 0x30
 8112c2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8112ddc <_vfiprintf_r+0x21c>
 8112c30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8112c34:	f04f 0901 	mov.w	r9, #1
 8112c38:	4623      	mov	r3, r4
 8112c3a:	469a      	mov	sl, r3
 8112c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8112c40:	b10a      	cbz	r2, 8112c46 <_vfiprintf_r+0x86>
 8112c42:	2a25      	cmp	r2, #37	@ 0x25
 8112c44:	d1f9      	bne.n	8112c3a <_vfiprintf_r+0x7a>
 8112c46:	ebba 0b04 	subs.w	fp, sl, r4
 8112c4a:	d00b      	beq.n	8112c64 <_vfiprintf_r+0xa4>
 8112c4c:	465b      	mov	r3, fp
 8112c4e:	4622      	mov	r2, r4
 8112c50:	4629      	mov	r1, r5
 8112c52:	4630      	mov	r0, r6
 8112c54:	f7ff ffa1 	bl	8112b9a <__sfputs_r>
 8112c58:	3001      	adds	r0, #1
 8112c5a:	f000 80a7 	beq.w	8112dac <_vfiprintf_r+0x1ec>
 8112c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112c60:	445a      	add	r2, fp
 8112c62:	9209      	str	r2, [sp, #36]	@ 0x24
 8112c64:	f89a 3000 	ldrb.w	r3, [sl]
 8112c68:	2b00      	cmp	r3, #0
 8112c6a:	f000 809f 	beq.w	8112dac <_vfiprintf_r+0x1ec>
 8112c6e:	2300      	movs	r3, #0
 8112c70:	f04f 32ff 	mov.w	r2, #4294967295
 8112c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8112c78:	f10a 0a01 	add.w	sl, sl, #1
 8112c7c:	9304      	str	r3, [sp, #16]
 8112c7e:	9307      	str	r3, [sp, #28]
 8112c80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8112c84:	931a      	str	r3, [sp, #104]	@ 0x68
 8112c86:	4654      	mov	r4, sl
 8112c88:	2205      	movs	r2, #5
 8112c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112c8e:	4853      	ldr	r0, [pc, #332]	@ (8112ddc <_vfiprintf_r+0x21c>)
 8112c90:	f7ed fb26 	bl	81002e0 <memchr>
 8112c94:	9a04      	ldr	r2, [sp, #16]
 8112c96:	b9d8      	cbnz	r0, 8112cd0 <_vfiprintf_r+0x110>
 8112c98:	06d1      	lsls	r1, r2, #27
 8112c9a:	bf44      	itt	mi
 8112c9c:	2320      	movmi	r3, #32
 8112c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112ca2:	0713      	lsls	r3, r2, #28
 8112ca4:	bf44      	itt	mi
 8112ca6:	232b      	movmi	r3, #43	@ 0x2b
 8112ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112cac:	f89a 3000 	ldrb.w	r3, [sl]
 8112cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8112cb2:	d015      	beq.n	8112ce0 <_vfiprintf_r+0x120>
 8112cb4:	9a07      	ldr	r2, [sp, #28]
 8112cb6:	4654      	mov	r4, sl
 8112cb8:	2000      	movs	r0, #0
 8112cba:	f04f 0c0a 	mov.w	ip, #10
 8112cbe:	4621      	mov	r1, r4
 8112cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112cc4:	3b30      	subs	r3, #48	@ 0x30
 8112cc6:	2b09      	cmp	r3, #9
 8112cc8:	d94b      	bls.n	8112d62 <_vfiprintf_r+0x1a2>
 8112cca:	b1b0      	cbz	r0, 8112cfa <_vfiprintf_r+0x13a>
 8112ccc:	9207      	str	r2, [sp, #28]
 8112cce:	e014      	b.n	8112cfa <_vfiprintf_r+0x13a>
 8112cd0:	eba0 0308 	sub.w	r3, r0, r8
 8112cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8112cd8:	4313      	orrs	r3, r2
 8112cda:	9304      	str	r3, [sp, #16]
 8112cdc:	46a2      	mov	sl, r4
 8112cde:	e7d2      	b.n	8112c86 <_vfiprintf_r+0xc6>
 8112ce0:	9b03      	ldr	r3, [sp, #12]
 8112ce2:	1d19      	adds	r1, r3, #4
 8112ce4:	681b      	ldr	r3, [r3, #0]
 8112ce6:	9103      	str	r1, [sp, #12]
 8112ce8:	2b00      	cmp	r3, #0
 8112cea:	bfbb      	ittet	lt
 8112cec:	425b      	neglt	r3, r3
 8112cee:	f042 0202 	orrlt.w	r2, r2, #2
 8112cf2:	9307      	strge	r3, [sp, #28]
 8112cf4:	9307      	strlt	r3, [sp, #28]
 8112cf6:	bfb8      	it	lt
 8112cf8:	9204      	strlt	r2, [sp, #16]
 8112cfa:	7823      	ldrb	r3, [r4, #0]
 8112cfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8112cfe:	d10a      	bne.n	8112d16 <_vfiprintf_r+0x156>
 8112d00:	7863      	ldrb	r3, [r4, #1]
 8112d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8112d04:	d132      	bne.n	8112d6c <_vfiprintf_r+0x1ac>
 8112d06:	9b03      	ldr	r3, [sp, #12]
 8112d08:	1d1a      	adds	r2, r3, #4
 8112d0a:	681b      	ldr	r3, [r3, #0]
 8112d0c:	9203      	str	r2, [sp, #12]
 8112d0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8112d12:	3402      	adds	r4, #2
 8112d14:	9305      	str	r3, [sp, #20]
 8112d16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8112dec <_vfiprintf_r+0x22c>
 8112d1a:	7821      	ldrb	r1, [r4, #0]
 8112d1c:	2203      	movs	r2, #3
 8112d1e:	4650      	mov	r0, sl
 8112d20:	f7ed fade 	bl	81002e0 <memchr>
 8112d24:	b138      	cbz	r0, 8112d36 <_vfiprintf_r+0x176>
 8112d26:	9b04      	ldr	r3, [sp, #16]
 8112d28:	eba0 000a 	sub.w	r0, r0, sl
 8112d2c:	2240      	movs	r2, #64	@ 0x40
 8112d2e:	4082      	lsls	r2, r0
 8112d30:	4313      	orrs	r3, r2
 8112d32:	3401      	adds	r4, #1
 8112d34:	9304      	str	r3, [sp, #16]
 8112d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112d3a:	4829      	ldr	r0, [pc, #164]	@ (8112de0 <_vfiprintf_r+0x220>)
 8112d3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8112d40:	2206      	movs	r2, #6
 8112d42:	f7ed facd 	bl	81002e0 <memchr>
 8112d46:	2800      	cmp	r0, #0
 8112d48:	d03f      	beq.n	8112dca <_vfiprintf_r+0x20a>
 8112d4a:	4b26      	ldr	r3, [pc, #152]	@ (8112de4 <_vfiprintf_r+0x224>)
 8112d4c:	bb1b      	cbnz	r3, 8112d96 <_vfiprintf_r+0x1d6>
 8112d4e:	9b03      	ldr	r3, [sp, #12]
 8112d50:	3307      	adds	r3, #7
 8112d52:	f023 0307 	bic.w	r3, r3, #7
 8112d56:	3308      	adds	r3, #8
 8112d58:	9303      	str	r3, [sp, #12]
 8112d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112d5c:	443b      	add	r3, r7
 8112d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8112d60:	e76a      	b.n	8112c38 <_vfiprintf_r+0x78>
 8112d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8112d66:	460c      	mov	r4, r1
 8112d68:	2001      	movs	r0, #1
 8112d6a:	e7a8      	b.n	8112cbe <_vfiprintf_r+0xfe>
 8112d6c:	2300      	movs	r3, #0
 8112d6e:	3401      	adds	r4, #1
 8112d70:	9305      	str	r3, [sp, #20]
 8112d72:	4619      	mov	r1, r3
 8112d74:	f04f 0c0a 	mov.w	ip, #10
 8112d78:	4620      	mov	r0, r4
 8112d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112d7e:	3a30      	subs	r2, #48	@ 0x30
 8112d80:	2a09      	cmp	r2, #9
 8112d82:	d903      	bls.n	8112d8c <_vfiprintf_r+0x1cc>
 8112d84:	2b00      	cmp	r3, #0
 8112d86:	d0c6      	beq.n	8112d16 <_vfiprintf_r+0x156>
 8112d88:	9105      	str	r1, [sp, #20]
 8112d8a:	e7c4      	b.n	8112d16 <_vfiprintf_r+0x156>
 8112d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8112d90:	4604      	mov	r4, r0
 8112d92:	2301      	movs	r3, #1
 8112d94:	e7f0      	b.n	8112d78 <_vfiprintf_r+0x1b8>
 8112d96:	ab03      	add	r3, sp, #12
 8112d98:	9300      	str	r3, [sp, #0]
 8112d9a:	462a      	mov	r2, r5
 8112d9c:	4b12      	ldr	r3, [pc, #72]	@ (8112de8 <_vfiprintf_r+0x228>)
 8112d9e:	a904      	add	r1, sp, #16
 8112da0:	4630      	mov	r0, r6
 8112da2:	f7fc fabd 	bl	810f320 <_printf_float>
 8112da6:	4607      	mov	r7, r0
 8112da8:	1c78      	adds	r0, r7, #1
 8112daa:	d1d6      	bne.n	8112d5a <_vfiprintf_r+0x19a>
 8112dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112dae:	07d9      	lsls	r1, r3, #31
 8112db0:	d405      	bmi.n	8112dbe <_vfiprintf_r+0x1fe>
 8112db2:	89ab      	ldrh	r3, [r5, #12]
 8112db4:	059a      	lsls	r2, r3, #22
 8112db6:	d402      	bmi.n	8112dbe <_vfiprintf_r+0x1fe>
 8112db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8112dba:	f7fd fac7 	bl	811034c <__retarget_lock_release_recursive>
 8112dbe:	89ab      	ldrh	r3, [r5, #12]
 8112dc0:	065b      	lsls	r3, r3, #25
 8112dc2:	f53f af1f 	bmi.w	8112c04 <_vfiprintf_r+0x44>
 8112dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8112dc8:	e71e      	b.n	8112c08 <_vfiprintf_r+0x48>
 8112dca:	ab03      	add	r3, sp, #12
 8112dcc:	9300      	str	r3, [sp, #0]
 8112dce:	462a      	mov	r2, r5
 8112dd0:	4b05      	ldr	r3, [pc, #20]	@ (8112de8 <_vfiprintf_r+0x228>)
 8112dd2:	a904      	add	r1, sp, #16
 8112dd4:	4630      	mov	r0, r6
 8112dd6:	f7fc fd3b 	bl	810f850 <_printf_i>
 8112dda:	e7e4      	b.n	8112da6 <_vfiprintf_r+0x1e6>
 8112ddc:	08113d91 	.word	0x08113d91
 8112de0:	08113d9b 	.word	0x08113d9b
 8112de4:	0810f321 	.word	0x0810f321
 8112de8:	08112b9b 	.word	0x08112b9b
 8112dec:	08113d97 	.word	0x08113d97

08112df0 <__sflush_r>:
 8112df0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8112df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112df8:	0716      	lsls	r6, r2, #28
 8112dfa:	4605      	mov	r5, r0
 8112dfc:	460c      	mov	r4, r1
 8112dfe:	d454      	bmi.n	8112eaa <__sflush_r+0xba>
 8112e00:	684b      	ldr	r3, [r1, #4]
 8112e02:	2b00      	cmp	r3, #0
 8112e04:	dc02      	bgt.n	8112e0c <__sflush_r+0x1c>
 8112e06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8112e08:	2b00      	cmp	r3, #0
 8112e0a:	dd48      	ble.n	8112e9e <__sflush_r+0xae>
 8112e0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8112e0e:	2e00      	cmp	r6, #0
 8112e10:	d045      	beq.n	8112e9e <__sflush_r+0xae>
 8112e12:	2300      	movs	r3, #0
 8112e14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8112e18:	682f      	ldr	r7, [r5, #0]
 8112e1a:	6a21      	ldr	r1, [r4, #32]
 8112e1c:	602b      	str	r3, [r5, #0]
 8112e1e:	d030      	beq.n	8112e82 <__sflush_r+0x92>
 8112e20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8112e22:	89a3      	ldrh	r3, [r4, #12]
 8112e24:	0759      	lsls	r1, r3, #29
 8112e26:	d505      	bpl.n	8112e34 <__sflush_r+0x44>
 8112e28:	6863      	ldr	r3, [r4, #4]
 8112e2a:	1ad2      	subs	r2, r2, r3
 8112e2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8112e2e:	b10b      	cbz	r3, 8112e34 <__sflush_r+0x44>
 8112e30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8112e32:	1ad2      	subs	r2, r2, r3
 8112e34:	2300      	movs	r3, #0
 8112e36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8112e38:	6a21      	ldr	r1, [r4, #32]
 8112e3a:	4628      	mov	r0, r5
 8112e3c:	47b0      	blx	r6
 8112e3e:	1c43      	adds	r3, r0, #1
 8112e40:	89a3      	ldrh	r3, [r4, #12]
 8112e42:	d106      	bne.n	8112e52 <__sflush_r+0x62>
 8112e44:	6829      	ldr	r1, [r5, #0]
 8112e46:	291d      	cmp	r1, #29
 8112e48:	d82b      	bhi.n	8112ea2 <__sflush_r+0xb2>
 8112e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8112ef4 <__sflush_r+0x104>)
 8112e4c:	410a      	asrs	r2, r1
 8112e4e:	07d6      	lsls	r6, r2, #31
 8112e50:	d427      	bmi.n	8112ea2 <__sflush_r+0xb2>
 8112e52:	2200      	movs	r2, #0
 8112e54:	6062      	str	r2, [r4, #4]
 8112e56:	04d9      	lsls	r1, r3, #19
 8112e58:	6922      	ldr	r2, [r4, #16]
 8112e5a:	6022      	str	r2, [r4, #0]
 8112e5c:	d504      	bpl.n	8112e68 <__sflush_r+0x78>
 8112e5e:	1c42      	adds	r2, r0, #1
 8112e60:	d101      	bne.n	8112e66 <__sflush_r+0x76>
 8112e62:	682b      	ldr	r3, [r5, #0]
 8112e64:	b903      	cbnz	r3, 8112e68 <__sflush_r+0x78>
 8112e66:	6560      	str	r0, [r4, #84]	@ 0x54
 8112e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8112e6a:	602f      	str	r7, [r5, #0]
 8112e6c:	b1b9      	cbz	r1, 8112e9e <__sflush_r+0xae>
 8112e6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8112e72:	4299      	cmp	r1, r3
 8112e74:	d002      	beq.n	8112e7c <__sflush_r+0x8c>
 8112e76:	4628      	mov	r0, r5
 8112e78:	f7fe f8ea 	bl	8111050 <_free_r>
 8112e7c:	2300      	movs	r3, #0
 8112e7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8112e80:	e00d      	b.n	8112e9e <__sflush_r+0xae>
 8112e82:	2301      	movs	r3, #1
 8112e84:	4628      	mov	r0, r5
 8112e86:	47b0      	blx	r6
 8112e88:	4602      	mov	r2, r0
 8112e8a:	1c50      	adds	r0, r2, #1
 8112e8c:	d1c9      	bne.n	8112e22 <__sflush_r+0x32>
 8112e8e:	682b      	ldr	r3, [r5, #0]
 8112e90:	2b00      	cmp	r3, #0
 8112e92:	d0c6      	beq.n	8112e22 <__sflush_r+0x32>
 8112e94:	2b1d      	cmp	r3, #29
 8112e96:	d001      	beq.n	8112e9c <__sflush_r+0xac>
 8112e98:	2b16      	cmp	r3, #22
 8112e9a:	d11e      	bne.n	8112eda <__sflush_r+0xea>
 8112e9c:	602f      	str	r7, [r5, #0]
 8112e9e:	2000      	movs	r0, #0
 8112ea0:	e022      	b.n	8112ee8 <__sflush_r+0xf8>
 8112ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112ea6:	b21b      	sxth	r3, r3
 8112ea8:	e01b      	b.n	8112ee2 <__sflush_r+0xf2>
 8112eaa:	690f      	ldr	r7, [r1, #16]
 8112eac:	2f00      	cmp	r7, #0
 8112eae:	d0f6      	beq.n	8112e9e <__sflush_r+0xae>
 8112eb0:	0793      	lsls	r3, r2, #30
 8112eb2:	680e      	ldr	r6, [r1, #0]
 8112eb4:	bf08      	it	eq
 8112eb6:	694b      	ldreq	r3, [r1, #20]
 8112eb8:	600f      	str	r7, [r1, #0]
 8112eba:	bf18      	it	ne
 8112ebc:	2300      	movne	r3, #0
 8112ebe:	eba6 0807 	sub.w	r8, r6, r7
 8112ec2:	608b      	str	r3, [r1, #8]
 8112ec4:	f1b8 0f00 	cmp.w	r8, #0
 8112ec8:	dde9      	ble.n	8112e9e <__sflush_r+0xae>
 8112eca:	6a21      	ldr	r1, [r4, #32]
 8112ecc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8112ece:	4643      	mov	r3, r8
 8112ed0:	463a      	mov	r2, r7
 8112ed2:	4628      	mov	r0, r5
 8112ed4:	47b0      	blx	r6
 8112ed6:	2800      	cmp	r0, #0
 8112ed8:	dc08      	bgt.n	8112eec <__sflush_r+0xfc>
 8112eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112ee2:	81a3      	strh	r3, [r4, #12]
 8112ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8112ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8112eec:	4407      	add	r7, r0
 8112eee:	eba8 0800 	sub.w	r8, r8, r0
 8112ef2:	e7e7      	b.n	8112ec4 <__sflush_r+0xd4>
 8112ef4:	dfbffffe 	.word	0xdfbffffe

08112ef8 <_fflush_r>:
 8112ef8:	b538      	push	{r3, r4, r5, lr}
 8112efa:	690b      	ldr	r3, [r1, #16]
 8112efc:	4605      	mov	r5, r0
 8112efe:	460c      	mov	r4, r1
 8112f00:	b913      	cbnz	r3, 8112f08 <_fflush_r+0x10>
 8112f02:	2500      	movs	r5, #0
 8112f04:	4628      	mov	r0, r5
 8112f06:	bd38      	pop	{r3, r4, r5, pc}
 8112f08:	b118      	cbz	r0, 8112f12 <_fflush_r+0x1a>
 8112f0a:	6a03      	ldr	r3, [r0, #32]
 8112f0c:	b90b      	cbnz	r3, 8112f12 <_fflush_r+0x1a>
 8112f0e:	f7fd f85f 	bl	810ffd0 <__sinit>
 8112f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112f16:	2b00      	cmp	r3, #0
 8112f18:	d0f3      	beq.n	8112f02 <_fflush_r+0xa>
 8112f1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8112f1c:	07d0      	lsls	r0, r2, #31
 8112f1e:	d404      	bmi.n	8112f2a <_fflush_r+0x32>
 8112f20:	0599      	lsls	r1, r3, #22
 8112f22:	d402      	bmi.n	8112f2a <_fflush_r+0x32>
 8112f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8112f26:	f7fd fa10 	bl	811034a <__retarget_lock_acquire_recursive>
 8112f2a:	4628      	mov	r0, r5
 8112f2c:	4621      	mov	r1, r4
 8112f2e:	f7ff ff5f 	bl	8112df0 <__sflush_r>
 8112f32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8112f34:	07da      	lsls	r2, r3, #31
 8112f36:	4605      	mov	r5, r0
 8112f38:	d4e4      	bmi.n	8112f04 <_fflush_r+0xc>
 8112f3a:	89a3      	ldrh	r3, [r4, #12]
 8112f3c:	059b      	lsls	r3, r3, #22
 8112f3e:	d4e1      	bmi.n	8112f04 <_fflush_r+0xc>
 8112f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8112f42:	f7fd fa03 	bl	811034c <__retarget_lock_release_recursive>
 8112f46:	e7dd      	b.n	8112f04 <_fflush_r+0xc>

08112f48 <fiprintf>:
 8112f48:	b40e      	push	{r1, r2, r3}
 8112f4a:	b503      	push	{r0, r1, lr}
 8112f4c:	4601      	mov	r1, r0
 8112f4e:	ab03      	add	r3, sp, #12
 8112f50:	4805      	ldr	r0, [pc, #20]	@ (8112f68 <fiprintf+0x20>)
 8112f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8112f56:	6800      	ldr	r0, [r0, #0]
 8112f58:	9301      	str	r3, [sp, #4]
 8112f5a:	f7ff fe31 	bl	8112bc0 <_vfiprintf_r>
 8112f5e:	b002      	add	sp, #8
 8112f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8112f64:	b003      	add	sp, #12
 8112f66:	4770      	bx	lr
 8112f68:	100000ac 	.word	0x100000ac

08112f6c <__swhatbuf_r>:
 8112f6c:	b570      	push	{r4, r5, r6, lr}
 8112f6e:	460c      	mov	r4, r1
 8112f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112f74:	2900      	cmp	r1, #0
 8112f76:	b096      	sub	sp, #88	@ 0x58
 8112f78:	4615      	mov	r5, r2
 8112f7a:	461e      	mov	r6, r3
 8112f7c:	da0d      	bge.n	8112f9a <__swhatbuf_r+0x2e>
 8112f7e:	89a3      	ldrh	r3, [r4, #12]
 8112f80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8112f84:	f04f 0100 	mov.w	r1, #0
 8112f88:	bf14      	ite	ne
 8112f8a:	2340      	movne	r3, #64	@ 0x40
 8112f8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8112f90:	2000      	movs	r0, #0
 8112f92:	6031      	str	r1, [r6, #0]
 8112f94:	602b      	str	r3, [r5, #0]
 8112f96:	b016      	add	sp, #88	@ 0x58
 8112f98:	bd70      	pop	{r4, r5, r6, pc}
 8112f9a:	466a      	mov	r2, sp
 8112f9c:	f000 f874 	bl	8113088 <_fstat_r>
 8112fa0:	2800      	cmp	r0, #0
 8112fa2:	dbec      	blt.n	8112f7e <__swhatbuf_r+0x12>
 8112fa4:	9901      	ldr	r1, [sp, #4]
 8112fa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8112faa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8112fae:	4259      	negs	r1, r3
 8112fb0:	4159      	adcs	r1, r3
 8112fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8112fb6:	e7eb      	b.n	8112f90 <__swhatbuf_r+0x24>

08112fb8 <__smakebuf_r>:
 8112fb8:	898b      	ldrh	r3, [r1, #12]
 8112fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8112fbc:	079d      	lsls	r5, r3, #30
 8112fbe:	4606      	mov	r6, r0
 8112fc0:	460c      	mov	r4, r1
 8112fc2:	d507      	bpl.n	8112fd4 <__smakebuf_r+0x1c>
 8112fc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8112fc8:	6023      	str	r3, [r4, #0]
 8112fca:	6123      	str	r3, [r4, #16]
 8112fcc:	2301      	movs	r3, #1
 8112fce:	6163      	str	r3, [r4, #20]
 8112fd0:	b003      	add	sp, #12
 8112fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8112fd4:	ab01      	add	r3, sp, #4
 8112fd6:	466a      	mov	r2, sp
 8112fd8:	f7ff ffc8 	bl	8112f6c <__swhatbuf_r>
 8112fdc:	9f00      	ldr	r7, [sp, #0]
 8112fde:	4605      	mov	r5, r0
 8112fe0:	4639      	mov	r1, r7
 8112fe2:	4630      	mov	r0, r6
 8112fe4:	f7fe f8a8 	bl	8111138 <_malloc_r>
 8112fe8:	b948      	cbnz	r0, 8112ffe <__smakebuf_r+0x46>
 8112fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112fee:	059a      	lsls	r2, r3, #22
 8112ff0:	d4ee      	bmi.n	8112fd0 <__smakebuf_r+0x18>
 8112ff2:	f023 0303 	bic.w	r3, r3, #3
 8112ff6:	f043 0302 	orr.w	r3, r3, #2
 8112ffa:	81a3      	strh	r3, [r4, #12]
 8112ffc:	e7e2      	b.n	8112fc4 <__smakebuf_r+0xc>
 8112ffe:	89a3      	ldrh	r3, [r4, #12]
 8113000:	6020      	str	r0, [r4, #0]
 8113002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8113006:	81a3      	strh	r3, [r4, #12]
 8113008:	9b01      	ldr	r3, [sp, #4]
 811300a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811300e:	b15b      	cbz	r3, 8113028 <__smakebuf_r+0x70>
 8113010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8113014:	4630      	mov	r0, r6
 8113016:	f000 f849 	bl	81130ac <_isatty_r>
 811301a:	b128      	cbz	r0, 8113028 <__smakebuf_r+0x70>
 811301c:	89a3      	ldrh	r3, [r4, #12]
 811301e:	f023 0303 	bic.w	r3, r3, #3
 8113022:	f043 0301 	orr.w	r3, r3, #1
 8113026:	81a3      	strh	r3, [r4, #12]
 8113028:	89a3      	ldrh	r3, [r4, #12]
 811302a:	431d      	orrs	r5, r3
 811302c:	81a5      	strh	r5, [r4, #12]
 811302e:	e7cf      	b.n	8112fd0 <__smakebuf_r+0x18>

08113030 <memmove>:
 8113030:	4288      	cmp	r0, r1
 8113032:	b510      	push	{r4, lr}
 8113034:	eb01 0402 	add.w	r4, r1, r2
 8113038:	d902      	bls.n	8113040 <memmove+0x10>
 811303a:	4284      	cmp	r4, r0
 811303c:	4623      	mov	r3, r4
 811303e:	d807      	bhi.n	8113050 <memmove+0x20>
 8113040:	1e43      	subs	r3, r0, #1
 8113042:	42a1      	cmp	r1, r4
 8113044:	d008      	beq.n	8113058 <memmove+0x28>
 8113046:	f811 2b01 	ldrb.w	r2, [r1], #1
 811304a:	f803 2f01 	strb.w	r2, [r3, #1]!
 811304e:	e7f8      	b.n	8113042 <memmove+0x12>
 8113050:	4402      	add	r2, r0
 8113052:	4601      	mov	r1, r0
 8113054:	428a      	cmp	r2, r1
 8113056:	d100      	bne.n	811305a <memmove+0x2a>
 8113058:	bd10      	pop	{r4, pc}
 811305a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811305e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8113062:	e7f7      	b.n	8113054 <memmove+0x24>

08113064 <strncmp>:
 8113064:	b510      	push	{r4, lr}
 8113066:	b16a      	cbz	r2, 8113084 <strncmp+0x20>
 8113068:	3901      	subs	r1, #1
 811306a:	1884      	adds	r4, r0, r2
 811306c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8113070:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8113074:	429a      	cmp	r2, r3
 8113076:	d103      	bne.n	8113080 <strncmp+0x1c>
 8113078:	42a0      	cmp	r0, r4
 811307a:	d001      	beq.n	8113080 <strncmp+0x1c>
 811307c:	2a00      	cmp	r2, #0
 811307e:	d1f5      	bne.n	811306c <strncmp+0x8>
 8113080:	1ad0      	subs	r0, r2, r3
 8113082:	bd10      	pop	{r4, pc}
 8113084:	4610      	mov	r0, r2
 8113086:	e7fc      	b.n	8113082 <strncmp+0x1e>

08113088 <_fstat_r>:
 8113088:	b538      	push	{r3, r4, r5, lr}
 811308a:	4d07      	ldr	r5, [pc, #28]	@ (81130a8 <_fstat_r+0x20>)
 811308c:	2300      	movs	r3, #0
 811308e:	4604      	mov	r4, r0
 8113090:	4608      	mov	r0, r1
 8113092:	4611      	mov	r1, r2
 8113094:	602b      	str	r3, [r5, #0]
 8113096:	f7f1 f869 	bl	810416c <_fstat>
 811309a:	1c43      	adds	r3, r0, #1
 811309c:	d102      	bne.n	81130a4 <_fstat_r+0x1c>
 811309e:	682b      	ldr	r3, [r5, #0]
 81130a0:	b103      	cbz	r3, 81130a4 <_fstat_r+0x1c>
 81130a2:	6023      	str	r3, [r4, #0]
 81130a4:	bd38      	pop	{r3, r4, r5, pc}
 81130a6:	bf00      	nop
 81130a8:	10008c78 	.word	0x10008c78

081130ac <_isatty_r>:
 81130ac:	b538      	push	{r3, r4, r5, lr}
 81130ae:	4d06      	ldr	r5, [pc, #24]	@ (81130c8 <_isatty_r+0x1c>)
 81130b0:	2300      	movs	r3, #0
 81130b2:	4604      	mov	r4, r0
 81130b4:	4608      	mov	r0, r1
 81130b6:	602b      	str	r3, [r5, #0]
 81130b8:	f7f1 f868 	bl	810418c <_isatty>
 81130bc:	1c43      	adds	r3, r0, #1
 81130be:	d102      	bne.n	81130c6 <_isatty_r+0x1a>
 81130c0:	682b      	ldr	r3, [r5, #0]
 81130c2:	b103      	cbz	r3, 81130c6 <_isatty_r+0x1a>
 81130c4:	6023      	str	r3, [r4, #0]
 81130c6:	bd38      	pop	{r3, r4, r5, pc}
 81130c8:	10008c78 	.word	0x10008c78

081130cc <_sbrk_r>:
 81130cc:	b538      	push	{r3, r4, r5, lr}
 81130ce:	4d06      	ldr	r5, [pc, #24]	@ (81130e8 <_sbrk_r+0x1c>)
 81130d0:	2300      	movs	r3, #0
 81130d2:	4604      	mov	r4, r0
 81130d4:	4608      	mov	r0, r1
 81130d6:	602b      	str	r3, [r5, #0]
 81130d8:	f7f1 f870 	bl	81041bc <_sbrk>
 81130dc:	1c43      	adds	r3, r0, #1
 81130de:	d102      	bne.n	81130e6 <_sbrk_r+0x1a>
 81130e0:	682b      	ldr	r3, [r5, #0]
 81130e2:	b103      	cbz	r3, 81130e6 <_sbrk_r+0x1a>
 81130e4:	6023      	str	r3, [r4, #0]
 81130e6:	bd38      	pop	{r3, r4, r5, pc}
 81130e8:	10008c78 	.word	0x10008c78
 81130ec:	00000000 	.word	0x00000000

081130f0 <nan>:
 81130f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 81130f8 <nan+0x8>
 81130f4:	4770      	bx	lr
 81130f6:	bf00      	nop
 81130f8:	00000000 	.word	0x00000000
 81130fc:	7ff80000 	.word	0x7ff80000

08113100 <abort>:
 8113100:	b508      	push	{r3, lr}
 8113102:	2006      	movs	r0, #6
 8113104:	f000 fbc4 	bl	8113890 <raise>
 8113108:	2001      	movs	r0, #1
 811310a:	f7f0 fff9 	bl	8104100 <_exit>

0811310e <_calloc_r>:
 811310e:	b570      	push	{r4, r5, r6, lr}
 8113110:	fba1 5402 	umull	r5, r4, r1, r2
 8113114:	b93c      	cbnz	r4, 8113126 <_calloc_r+0x18>
 8113116:	4629      	mov	r1, r5
 8113118:	f7fe f80e 	bl	8111138 <_malloc_r>
 811311c:	4606      	mov	r6, r0
 811311e:	b928      	cbnz	r0, 811312c <_calloc_r+0x1e>
 8113120:	2600      	movs	r6, #0
 8113122:	4630      	mov	r0, r6
 8113124:	bd70      	pop	{r4, r5, r6, pc}
 8113126:	220c      	movs	r2, #12
 8113128:	6002      	str	r2, [r0, #0]
 811312a:	e7f9      	b.n	8113120 <_calloc_r+0x12>
 811312c:	462a      	mov	r2, r5
 811312e:	4621      	mov	r1, r4
 8113130:	f7fd f88e 	bl	8110250 <memset>
 8113134:	e7f5      	b.n	8113122 <_calloc_r+0x14>

08113136 <rshift>:
 8113136:	6903      	ldr	r3, [r0, #16]
 8113138:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 811313c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8113140:	ea4f 1261 	mov.w	r2, r1, asr #5
 8113144:	f100 0414 	add.w	r4, r0, #20
 8113148:	dd45      	ble.n	81131d6 <rshift+0xa0>
 811314a:	f011 011f 	ands.w	r1, r1, #31
 811314e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8113152:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8113156:	d10c      	bne.n	8113172 <rshift+0x3c>
 8113158:	f100 0710 	add.w	r7, r0, #16
 811315c:	4629      	mov	r1, r5
 811315e:	42b1      	cmp	r1, r6
 8113160:	d334      	bcc.n	81131cc <rshift+0x96>
 8113162:	1a9b      	subs	r3, r3, r2
 8113164:	009b      	lsls	r3, r3, #2
 8113166:	1eea      	subs	r2, r5, #3
 8113168:	4296      	cmp	r6, r2
 811316a:	bf38      	it	cc
 811316c:	2300      	movcc	r3, #0
 811316e:	4423      	add	r3, r4
 8113170:	e015      	b.n	811319e <rshift+0x68>
 8113172:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8113176:	f1c1 0820 	rsb	r8, r1, #32
 811317a:	40cf      	lsrs	r7, r1
 811317c:	f105 0e04 	add.w	lr, r5, #4
 8113180:	46a1      	mov	r9, r4
 8113182:	4576      	cmp	r6, lr
 8113184:	46f4      	mov	ip, lr
 8113186:	d815      	bhi.n	81131b4 <rshift+0x7e>
 8113188:	1a9a      	subs	r2, r3, r2
 811318a:	0092      	lsls	r2, r2, #2
 811318c:	3a04      	subs	r2, #4
 811318e:	3501      	adds	r5, #1
 8113190:	42ae      	cmp	r6, r5
 8113192:	bf38      	it	cc
 8113194:	2200      	movcc	r2, #0
 8113196:	18a3      	adds	r3, r4, r2
 8113198:	50a7      	str	r7, [r4, r2]
 811319a:	b107      	cbz	r7, 811319e <rshift+0x68>
 811319c:	3304      	adds	r3, #4
 811319e:	1b1a      	subs	r2, r3, r4
 81131a0:	42a3      	cmp	r3, r4
 81131a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 81131a6:	bf08      	it	eq
 81131a8:	2300      	moveq	r3, #0
 81131aa:	6102      	str	r2, [r0, #16]
 81131ac:	bf08      	it	eq
 81131ae:	6143      	streq	r3, [r0, #20]
 81131b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81131b4:	f8dc c000 	ldr.w	ip, [ip]
 81131b8:	fa0c fc08 	lsl.w	ip, ip, r8
 81131bc:	ea4c 0707 	orr.w	r7, ip, r7
 81131c0:	f849 7b04 	str.w	r7, [r9], #4
 81131c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 81131c8:	40cf      	lsrs	r7, r1
 81131ca:	e7da      	b.n	8113182 <rshift+0x4c>
 81131cc:	f851 cb04 	ldr.w	ip, [r1], #4
 81131d0:	f847 cf04 	str.w	ip, [r7, #4]!
 81131d4:	e7c3      	b.n	811315e <rshift+0x28>
 81131d6:	4623      	mov	r3, r4
 81131d8:	e7e1      	b.n	811319e <rshift+0x68>

081131da <__hexdig_fun>:
 81131da:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 81131de:	2b09      	cmp	r3, #9
 81131e0:	d802      	bhi.n	81131e8 <__hexdig_fun+0xe>
 81131e2:	3820      	subs	r0, #32
 81131e4:	b2c0      	uxtb	r0, r0
 81131e6:	4770      	bx	lr
 81131e8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 81131ec:	2b05      	cmp	r3, #5
 81131ee:	d801      	bhi.n	81131f4 <__hexdig_fun+0x1a>
 81131f0:	3847      	subs	r0, #71	@ 0x47
 81131f2:	e7f7      	b.n	81131e4 <__hexdig_fun+0xa>
 81131f4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 81131f8:	2b05      	cmp	r3, #5
 81131fa:	d801      	bhi.n	8113200 <__hexdig_fun+0x26>
 81131fc:	3827      	subs	r0, #39	@ 0x27
 81131fe:	e7f1      	b.n	81131e4 <__hexdig_fun+0xa>
 8113200:	2000      	movs	r0, #0
 8113202:	4770      	bx	lr

08113204 <__gethex>:
 8113204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113208:	b085      	sub	sp, #20
 811320a:	468a      	mov	sl, r1
 811320c:	9302      	str	r3, [sp, #8]
 811320e:	680b      	ldr	r3, [r1, #0]
 8113210:	9001      	str	r0, [sp, #4]
 8113212:	4690      	mov	r8, r2
 8113214:	1c9c      	adds	r4, r3, #2
 8113216:	46a1      	mov	r9, r4
 8113218:	f814 0b01 	ldrb.w	r0, [r4], #1
 811321c:	2830      	cmp	r0, #48	@ 0x30
 811321e:	d0fa      	beq.n	8113216 <__gethex+0x12>
 8113220:	eba9 0303 	sub.w	r3, r9, r3
 8113224:	f1a3 0b02 	sub.w	fp, r3, #2
 8113228:	f7ff ffd7 	bl	81131da <__hexdig_fun>
 811322c:	4605      	mov	r5, r0
 811322e:	2800      	cmp	r0, #0
 8113230:	d168      	bne.n	8113304 <__gethex+0x100>
 8113232:	49a0      	ldr	r1, [pc, #640]	@ (81134b4 <__gethex+0x2b0>)
 8113234:	2201      	movs	r2, #1
 8113236:	4648      	mov	r0, r9
 8113238:	f7ff ff14 	bl	8113064 <strncmp>
 811323c:	4607      	mov	r7, r0
 811323e:	2800      	cmp	r0, #0
 8113240:	d167      	bne.n	8113312 <__gethex+0x10e>
 8113242:	f899 0001 	ldrb.w	r0, [r9, #1]
 8113246:	4626      	mov	r6, r4
 8113248:	f7ff ffc7 	bl	81131da <__hexdig_fun>
 811324c:	2800      	cmp	r0, #0
 811324e:	d062      	beq.n	8113316 <__gethex+0x112>
 8113250:	4623      	mov	r3, r4
 8113252:	7818      	ldrb	r0, [r3, #0]
 8113254:	2830      	cmp	r0, #48	@ 0x30
 8113256:	4699      	mov	r9, r3
 8113258:	f103 0301 	add.w	r3, r3, #1
 811325c:	d0f9      	beq.n	8113252 <__gethex+0x4e>
 811325e:	f7ff ffbc 	bl	81131da <__hexdig_fun>
 8113262:	fab0 f580 	clz	r5, r0
 8113266:	096d      	lsrs	r5, r5, #5
 8113268:	f04f 0b01 	mov.w	fp, #1
 811326c:	464a      	mov	r2, r9
 811326e:	4616      	mov	r6, r2
 8113270:	3201      	adds	r2, #1
 8113272:	7830      	ldrb	r0, [r6, #0]
 8113274:	f7ff ffb1 	bl	81131da <__hexdig_fun>
 8113278:	2800      	cmp	r0, #0
 811327a:	d1f8      	bne.n	811326e <__gethex+0x6a>
 811327c:	498d      	ldr	r1, [pc, #564]	@ (81134b4 <__gethex+0x2b0>)
 811327e:	2201      	movs	r2, #1
 8113280:	4630      	mov	r0, r6
 8113282:	f7ff feef 	bl	8113064 <strncmp>
 8113286:	2800      	cmp	r0, #0
 8113288:	d13f      	bne.n	811330a <__gethex+0x106>
 811328a:	b944      	cbnz	r4, 811329e <__gethex+0x9a>
 811328c:	1c74      	adds	r4, r6, #1
 811328e:	4622      	mov	r2, r4
 8113290:	4616      	mov	r6, r2
 8113292:	3201      	adds	r2, #1
 8113294:	7830      	ldrb	r0, [r6, #0]
 8113296:	f7ff ffa0 	bl	81131da <__hexdig_fun>
 811329a:	2800      	cmp	r0, #0
 811329c:	d1f8      	bne.n	8113290 <__gethex+0x8c>
 811329e:	1ba4      	subs	r4, r4, r6
 81132a0:	00a7      	lsls	r7, r4, #2
 81132a2:	7833      	ldrb	r3, [r6, #0]
 81132a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 81132a8:	2b50      	cmp	r3, #80	@ 0x50
 81132aa:	d13e      	bne.n	811332a <__gethex+0x126>
 81132ac:	7873      	ldrb	r3, [r6, #1]
 81132ae:	2b2b      	cmp	r3, #43	@ 0x2b
 81132b0:	d033      	beq.n	811331a <__gethex+0x116>
 81132b2:	2b2d      	cmp	r3, #45	@ 0x2d
 81132b4:	d034      	beq.n	8113320 <__gethex+0x11c>
 81132b6:	1c71      	adds	r1, r6, #1
 81132b8:	2400      	movs	r4, #0
 81132ba:	7808      	ldrb	r0, [r1, #0]
 81132bc:	f7ff ff8d 	bl	81131da <__hexdig_fun>
 81132c0:	1e43      	subs	r3, r0, #1
 81132c2:	b2db      	uxtb	r3, r3
 81132c4:	2b18      	cmp	r3, #24
 81132c6:	d830      	bhi.n	811332a <__gethex+0x126>
 81132c8:	f1a0 0210 	sub.w	r2, r0, #16
 81132cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 81132d0:	f7ff ff83 	bl	81131da <__hexdig_fun>
 81132d4:	f100 3cff 	add.w	ip, r0, #4294967295
 81132d8:	fa5f fc8c 	uxtb.w	ip, ip
 81132dc:	f1bc 0f18 	cmp.w	ip, #24
 81132e0:	f04f 030a 	mov.w	r3, #10
 81132e4:	d91e      	bls.n	8113324 <__gethex+0x120>
 81132e6:	b104      	cbz	r4, 81132ea <__gethex+0xe6>
 81132e8:	4252      	negs	r2, r2
 81132ea:	4417      	add	r7, r2
 81132ec:	f8ca 1000 	str.w	r1, [sl]
 81132f0:	b1ed      	cbz	r5, 811332e <__gethex+0x12a>
 81132f2:	f1bb 0f00 	cmp.w	fp, #0
 81132f6:	bf0c      	ite	eq
 81132f8:	2506      	moveq	r5, #6
 81132fa:	2500      	movne	r5, #0
 81132fc:	4628      	mov	r0, r5
 81132fe:	b005      	add	sp, #20
 8113300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113304:	2500      	movs	r5, #0
 8113306:	462c      	mov	r4, r5
 8113308:	e7b0      	b.n	811326c <__gethex+0x68>
 811330a:	2c00      	cmp	r4, #0
 811330c:	d1c7      	bne.n	811329e <__gethex+0x9a>
 811330e:	4627      	mov	r7, r4
 8113310:	e7c7      	b.n	81132a2 <__gethex+0x9e>
 8113312:	464e      	mov	r6, r9
 8113314:	462f      	mov	r7, r5
 8113316:	2501      	movs	r5, #1
 8113318:	e7c3      	b.n	81132a2 <__gethex+0x9e>
 811331a:	2400      	movs	r4, #0
 811331c:	1cb1      	adds	r1, r6, #2
 811331e:	e7cc      	b.n	81132ba <__gethex+0xb6>
 8113320:	2401      	movs	r4, #1
 8113322:	e7fb      	b.n	811331c <__gethex+0x118>
 8113324:	fb03 0002 	mla	r0, r3, r2, r0
 8113328:	e7ce      	b.n	81132c8 <__gethex+0xc4>
 811332a:	4631      	mov	r1, r6
 811332c:	e7de      	b.n	81132ec <__gethex+0xe8>
 811332e:	eba6 0309 	sub.w	r3, r6, r9
 8113332:	3b01      	subs	r3, #1
 8113334:	4629      	mov	r1, r5
 8113336:	2b07      	cmp	r3, #7
 8113338:	dc0a      	bgt.n	8113350 <__gethex+0x14c>
 811333a:	9801      	ldr	r0, [sp, #4]
 811333c:	f7fd ff88 	bl	8111250 <_Balloc>
 8113340:	4604      	mov	r4, r0
 8113342:	b940      	cbnz	r0, 8113356 <__gethex+0x152>
 8113344:	4b5c      	ldr	r3, [pc, #368]	@ (81134b8 <__gethex+0x2b4>)
 8113346:	4602      	mov	r2, r0
 8113348:	21e4      	movs	r1, #228	@ 0xe4
 811334a:	485c      	ldr	r0, [pc, #368]	@ (81134bc <__gethex+0x2b8>)
 811334c:	f7fd f814 	bl	8110378 <__assert_func>
 8113350:	3101      	adds	r1, #1
 8113352:	105b      	asrs	r3, r3, #1
 8113354:	e7ef      	b.n	8113336 <__gethex+0x132>
 8113356:	f100 0a14 	add.w	sl, r0, #20
 811335a:	2300      	movs	r3, #0
 811335c:	4655      	mov	r5, sl
 811335e:	469b      	mov	fp, r3
 8113360:	45b1      	cmp	r9, r6
 8113362:	d337      	bcc.n	81133d4 <__gethex+0x1d0>
 8113364:	f845 bb04 	str.w	fp, [r5], #4
 8113368:	eba5 050a 	sub.w	r5, r5, sl
 811336c:	10ad      	asrs	r5, r5, #2
 811336e:	6125      	str	r5, [r4, #16]
 8113370:	4658      	mov	r0, fp
 8113372:	f7fe f85f 	bl	8111434 <__hi0bits>
 8113376:	016d      	lsls	r5, r5, #5
 8113378:	f8d8 6000 	ldr.w	r6, [r8]
 811337c:	1a2d      	subs	r5, r5, r0
 811337e:	42b5      	cmp	r5, r6
 8113380:	dd54      	ble.n	811342c <__gethex+0x228>
 8113382:	1bad      	subs	r5, r5, r6
 8113384:	4629      	mov	r1, r5
 8113386:	4620      	mov	r0, r4
 8113388:	f7fe fbf3 	bl	8111b72 <__any_on>
 811338c:	4681      	mov	r9, r0
 811338e:	b178      	cbz	r0, 81133b0 <__gethex+0x1ac>
 8113390:	1e6b      	subs	r3, r5, #1
 8113392:	1159      	asrs	r1, r3, #5
 8113394:	f003 021f 	and.w	r2, r3, #31
 8113398:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 811339c:	f04f 0901 	mov.w	r9, #1
 81133a0:	fa09 f202 	lsl.w	r2, r9, r2
 81133a4:	420a      	tst	r2, r1
 81133a6:	d003      	beq.n	81133b0 <__gethex+0x1ac>
 81133a8:	454b      	cmp	r3, r9
 81133aa:	dc36      	bgt.n	811341a <__gethex+0x216>
 81133ac:	f04f 0902 	mov.w	r9, #2
 81133b0:	4629      	mov	r1, r5
 81133b2:	4620      	mov	r0, r4
 81133b4:	f7ff febf 	bl	8113136 <rshift>
 81133b8:	442f      	add	r7, r5
 81133ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81133be:	42bb      	cmp	r3, r7
 81133c0:	da42      	bge.n	8113448 <__gethex+0x244>
 81133c2:	9801      	ldr	r0, [sp, #4]
 81133c4:	4621      	mov	r1, r4
 81133c6:	f7fd ff83 	bl	81112d0 <_Bfree>
 81133ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81133cc:	2300      	movs	r3, #0
 81133ce:	6013      	str	r3, [r2, #0]
 81133d0:	25a3      	movs	r5, #163	@ 0xa3
 81133d2:	e793      	b.n	81132fc <__gethex+0xf8>
 81133d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 81133d8:	2a2e      	cmp	r2, #46	@ 0x2e
 81133da:	d012      	beq.n	8113402 <__gethex+0x1fe>
 81133dc:	2b20      	cmp	r3, #32
 81133de:	d104      	bne.n	81133ea <__gethex+0x1e6>
 81133e0:	f845 bb04 	str.w	fp, [r5], #4
 81133e4:	f04f 0b00 	mov.w	fp, #0
 81133e8:	465b      	mov	r3, fp
 81133ea:	7830      	ldrb	r0, [r6, #0]
 81133ec:	9303      	str	r3, [sp, #12]
 81133ee:	f7ff fef4 	bl	81131da <__hexdig_fun>
 81133f2:	9b03      	ldr	r3, [sp, #12]
 81133f4:	f000 000f 	and.w	r0, r0, #15
 81133f8:	4098      	lsls	r0, r3
 81133fa:	ea4b 0b00 	orr.w	fp, fp, r0
 81133fe:	3304      	adds	r3, #4
 8113400:	e7ae      	b.n	8113360 <__gethex+0x15c>
 8113402:	45b1      	cmp	r9, r6
 8113404:	d8ea      	bhi.n	81133dc <__gethex+0x1d8>
 8113406:	492b      	ldr	r1, [pc, #172]	@ (81134b4 <__gethex+0x2b0>)
 8113408:	9303      	str	r3, [sp, #12]
 811340a:	2201      	movs	r2, #1
 811340c:	4630      	mov	r0, r6
 811340e:	f7ff fe29 	bl	8113064 <strncmp>
 8113412:	9b03      	ldr	r3, [sp, #12]
 8113414:	2800      	cmp	r0, #0
 8113416:	d1e1      	bne.n	81133dc <__gethex+0x1d8>
 8113418:	e7a2      	b.n	8113360 <__gethex+0x15c>
 811341a:	1ea9      	subs	r1, r5, #2
 811341c:	4620      	mov	r0, r4
 811341e:	f7fe fba8 	bl	8111b72 <__any_on>
 8113422:	2800      	cmp	r0, #0
 8113424:	d0c2      	beq.n	81133ac <__gethex+0x1a8>
 8113426:	f04f 0903 	mov.w	r9, #3
 811342a:	e7c1      	b.n	81133b0 <__gethex+0x1ac>
 811342c:	da09      	bge.n	8113442 <__gethex+0x23e>
 811342e:	1b75      	subs	r5, r6, r5
 8113430:	4621      	mov	r1, r4
 8113432:	9801      	ldr	r0, [sp, #4]
 8113434:	462a      	mov	r2, r5
 8113436:	f7fe f963 	bl	8111700 <__lshift>
 811343a:	1b7f      	subs	r7, r7, r5
 811343c:	4604      	mov	r4, r0
 811343e:	f100 0a14 	add.w	sl, r0, #20
 8113442:	f04f 0900 	mov.w	r9, #0
 8113446:	e7b8      	b.n	81133ba <__gethex+0x1b6>
 8113448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 811344c:	42bd      	cmp	r5, r7
 811344e:	dd6f      	ble.n	8113530 <__gethex+0x32c>
 8113450:	1bed      	subs	r5, r5, r7
 8113452:	42ae      	cmp	r6, r5
 8113454:	dc34      	bgt.n	81134c0 <__gethex+0x2bc>
 8113456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811345a:	2b02      	cmp	r3, #2
 811345c:	d022      	beq.n	81134a4 <__gethex+0x2a0>
 811345e:	2b03      	cmp	r3, #3
 8113460:	d024      	beq.n	81134ac <__gethex+0x2a8>
 8113462:	2b01      	cmp	r3, #1
 8113464:	d115      	bne.n	8113492 <__gethex+0x28e>
 8113466:	42ae      	cmp	r6, r5
 8113468:	d113      	bne.n	8113492 <__gethex+0x28e>
 811346a:	2e01      	cmp	r6, #1
 811346c:	d10b      	bne.n	8113486 <__gethex+0x282>
 811346e:	9a02      	ldr	r2, [sp, #8]
 8113470:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8113474:	6013      	str	r3, [r2, #0]
 8113476:	2301      	movs	r3, #1
 8113478:	6123      	str	r3, [r4, #16]
 811347a:	f8ca 3000 	str.w	r3, [sl]
 811347e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8113480:	2562      	movs	r5, #98	@ 0x62
 8113482:	601c      	str	r4, [r3, #0]
 8113484:	e73a      	b.n	81132fc <__gethex+0xf8>
 8113486:	1e71      	subs	r1, r6, #1
 8113488:	4620      	mov	r0, r4
 811348a:	f7fe fb72 	bl	8111b72 <__any_on>
 811348e:	2800      	cmp	r0, #0
 8113490:	d1ed      	bne.n	811346e <__gethex+0x26a>
 8113492:	9801      	ldr	r0, [sp, #4]
 8113494:	4621      	mov	r1, r4
 8113496:	f7fd ff1b 	bl	81112d0 <_Bfree>
 811349a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811349c:	2300      	movs	r3, #0
 811349e:	6013      	str	r3, [r2, #0]
 81134a0:	2550      	movs	r5, #80	@ 0x50
 81134a2:	e72b      	b.n	81132fc <__gethex+0xf8>
 81134a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81134a6:	2b00      	cmp	r3, #0
 81134a8:	d1f3      	bne.n	8113492 <__gethex+0x28e>
 81134aa:	e7e0      	b.n	811346e <__gethex+0x26a>
 81134ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81134ae:	2b00      	cmp	r3, #0
 81134b0:	d1dd      	bne.n	811346e <__gethex+0x26a>
 81134b2:	e7ee      	b.n	8113492 <__gethex+0x28e>
 81134b4:	08113c38 	.word	0x08113c38
 81134b8:	08113ad1 	.word	0x08113ad1
 81134bc:	08113daa 	.word	0x08113daa
 81134c0:	1e6f      	subs	r7, r5, #1
 81134c2:	f1b9 0f00 	cmp.w	r9, #0
 81134c6:	d130      	bne.n	811352a <__gethex+0x326>
 81134c8:	b127      	cbz	r7, 81134d4 <__gethex+0x2d0>
 81134ca:	4639      	mov	r1, r7
 81134cc:	4620      	mov	r0, r4
 81134ce:	f7fe fb50 	bl	8111b72 <__any_on>
 81134d2:	4681      	mov	r9, r0
 81134d4:	117a      	asrs	r2, r7, #5
 81134d6:	2301      	movs	r3, #1
 81134d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 81134dc:	f007 071f 	and.w	r7, r7, #31
 81134e0:	40bb      	lsls	r3, r7
 81134e2:	4213      	tst	r3, r2
 81134e4:	4629      	mov	r1, r5
 81134e6:	4620      	mov	r0, r4
 81134e8:	bf18      	it	ne
 81134ea:	f049 0902 	orrne.w	r9, r9, #2
 81134ee:	f7ff fe22 	bl	8113136 <rshift>
 81134f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 81134f6:	1b76      	subs	r6, r6, r5
 81134f8:	2502      	movs	r5, #2
 81134fa:	f1b9 0f00 	cmp.w	r9, #0
 81134fe:	d047      	beq.n	8113590 <__gethex+0x38c>
 8113500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8113504:	2b02      	cmp	r3, #2
 8113506:	d015      	beq.n	8113534 <__gethex+0x330>
 8113508:	2b03      	cmp	r3, #3
 811350a:	d017      	beq.n	811353c <__gethex+0x338>
 811350c:	2b01      	cmp	r3, #1
 811350e:	d109      	bne.n	8113524 <__gethex+0x320>
 8113510:	f019 0f02 	tst.w	r9, #2
 8113514:	d006      	beq.n	8113524 <__gethex+0x320>
 8113516:	f8da 3000 	ldr.w	r3, [sl]
 811351a:	ea49 0903 	orr.w	r9, r9, r3
 811351e:	f019 0f01 	tst.w	r9, #1
 8113522:	d10e      	bne.n	8113542 <__gethex+0x33e>
 8113524:	f045 0510 	orr.w	r5, r5, #16
 8113528:	e032      	b.n	8113590 <__gethex+0x38c>
 811352a:	f04f 0901 	mov.w	r9, #1
 811352e:	e7d1      	b.n	81134d4 <__gethex+0x2d0>
 8113530:	2501      	movs	r5, #1
 8113532:	e7e2      	b.n	81134fa <__gethex+0x2f6>
 8113534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8113536:	f1c3 0301 	rsb	r3, r3, #1
 811353a:	930f      	str	r3, [sp, #60]	@ 0x3c
 811353c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811353e:	2b00      	cmp	r3, #0
 8113540:	d0f0      	beq.n	8113524 <__gethex+0x320>
 8113542:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8113546:	f104 0314 	add.w	r3, r4, #20
 811354a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 811354e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8113552:	f04f 0c00 	mov.w	ip, #0
 8113556:	4618      	mov	r0, r3
 8113558:	f853 2b04 	ldr.w	r2, [r3], #4
 811355c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8113560:	d01b      	beq.n	811359a <__gethex+0x396>
 8113562:	3201      	adds	r2, #1
 8113564:	6002      	str	r2, [r0, #0]
 8113566:	2d02      	cmp	r5, #2
 8113568:	f104 0314 	add.w	r3, r4, #20
 811356c:	d13c      	bne.n	81135e8 <__gethex+0x3e4>
 811356e:	f8d8 2000 	ldr.w	r2, [r8]
 8113572:	3a01      	subs	r2, #1
 8113574:	42b2      	cmp	r2, r6
 8113576:	d109      	bne.n	811358c <__gethex+0x388>
 8113578:	1171      	asrs	r1, r6, #5
 811357a:	2201      	movs	r2, #1
 811357c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8113580:	f006 061f 	and.w	r6, r6, #31
 8113584:	fa02 f606 	lsl.w	r6, r2, r6
 8113588:	421e      	tst	r6, r3
 811358a:	d13a      	bne.n	8113602 <__gethex+0x3fe>
 811358c:	f045 0520 	orr.w	r5, r5, #32
 8113590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8113592:	601c      	str	r4, [r3, #0]
 8113594:	9b02      	ldr	r3, [sp, #8]
 8113596:	601f      	str	r7, [r3, #0]
 8113598:	e6b0      	b.n	81132fc <__gethex+0xf8>
 811359a:	4299      	cmp	r1, r3
 811359c:	f843 cc04 	str.w	ip, [r3, #-4]
 81135a0:	d8d9      	bhi.n	8113556 <__gethex+0x352>
 81135a2:	68a3      	ldr	r3, [r4, #8]
 81135a4:	459b      	cmp	fp, r3
 81135a6:	db17      	blt.n	81135d8 <__gethex+0x3d4>
 81135a8:	6861      	ldr	r1, [r4, #4]
 81135aa:	9801      	ldr	r0, [sp, #4]
 81135ac:	3101      	adds	r1, #1
 81135ae:	f7fd fe4f 	bl	8111250 <_Balloc>
 81135b2:	4681      	mov	r9, r0
 81135b4:	b918      	cbnz	r0, 81135be <__gethex+0x3ba>
 81135b6:	4b1a      	ldr	r3, [pc, #104]	@ (8113620 <__gethex+0x41c>)
 81135b8:	4602      	mov	r2, r0
 81135ba:	2184      	movs	r1, #132	@ 0x84
 81135bc:	e6c5      	b.n	811334a <__gethex+0x146>
 81135be:	6922      	ldr	r2, [r4, #16]
 81135c0:	3202      	adds	r2, #2
 81135c2:	f104 010c 	add.w	r1, r4, #12
 81135c6:	0092      	lsls	r2, r2, #2
 81135c8:	300c      	adds	r0, #12
 81135ca:	f7fc fec0 	bl	811034e <memcpy>
 81135ce:	4621      	mov	r1, r4
 81135d0:	9801      	ldr	r0, [sp, #4]
 81135d2:	f7fd fe7d 	bl	81112d0 <_Bfree>
 81135d6:	464c      	mov	r4, r9
 81135d8:	6923      	ldr	r3, [r4, #16]
 81135da:	1c5a      	adds	r2, r3, #1
 81135dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81135e0:	6122      	str	r2, [r4, #16]
 81135e2:	2201      	movs	r2, #1
 81135e4:	615a      	str	r2, [r3, #20]
 81135e6:	e7be      	b.n	8113566 <__gethex+0x362>
 81135e8:	6922      	ldr	r2, [r4, #16]
 81135ea:	455a      	cmp	r2, fp
 81135ec:	dd0b      	ble.n	8113606 <__gethex+0x402>
 81135ee:	2101      	movs	r1, #1
 81135f0:	4620      	mov	r0, r4
 81135f2:	f7ff fda0 	bl	8113136 <rshift>
 81135f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81135fa:	3701      	adds	r7, #1
 81135fc:	42bb      	cmp	r3, r7
 81135fe:	f6ff aee0 	blt.w	81133c2 <__gethex+0x1be>
 8113602:	2501      	movs	r5, #1
 8113604:	e7c2      	b.n	811358c <__gethex+0x388>
 8113606:	f016 061f 	ands.w	r6, r6, #31
 811360a:	d0fa      	beq.n	8113602 <__gethex+0x3fe>
 811360c:	4453      	add	r3, sl
 811360e:	f1c6 0620 	rsb	r6, r6, #32
 8113612:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8113616:	f7fd ff0d 	bl	8111434 <__hi0bits>
 811361a:	42b0      	cmp	r0, r6
 811361c:	dbe7      	blt.n	81135ee <__gethex+0x3ea>
 811361e:	e7f0      	b.n	8113602 <__gethex+0x3fe>
 8113620:	08113ad1 	.word	0x08113ad1

08113624 <L_shift>:
 8113624:	f1c2 0208 	rsb	r2, r2, #8
 8113628:	0092      	lsls	r2, r2, #2
 811362a:	b570      	push	{r4, r5, r6, lr}
 811362c:	f1c2 0620 	rsb	r6, r2, #32
 8113630:	6843      	ldr	r3, [r0, #4]
 8113632:	6804      	ldr	r4, [r0, #0]
 8113634:	fa03 f506 	lsl.w	r5, r3, r6
 8113638:	432c      	orrs	r4, r5
 811363a:	40d3      	lsrs	r3, r2
 811363c:	6004      	str	r4, [r0, #0]
 811363e:	f840 3f04 	str.w	r3, [r0, #4]!
 8113642:	4288      	cmp	r0, r1
 8113644:	d3f4      	bcc.n	8113630 <L_shift+0xc>
 8113646:	bd70      	pop	{r4, r5, r6, pc}

08113648 <__match>:
 8113648:	b530      	push	{r4, r5, lr}
 811364a:	6803      	ldr	r3, [r0, #0]
 811364c:	3301      	adds	r3, #1
 811364e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8113652:	b914      	cbnz	r4, 811365a <__match+0x12>
 8113654:	6003      	str	r3, [r0, #0]
 8113656:	2001      	movs	r0, #1
 8113658:	bd30      	pop	{r4, r5, pc}
 811365a:	f813 2b01 	ldrb.w	r2, [r3], #1
 811365e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8113662:	2d19      	cmp	r5, #25
 8113664:	bf98      	it	ls
 8113666:	3220      	addls	r2, #32
 8113668:	42a2      	cmp	r2, r4
 811366a:	d0f0      	beq.n	811364e <__match+0x6>
 811366c:	2000      	movs	r0, #0
 811366e:	e7f3      	b.n	8113658 <__match+0x10>

08113670 <__hexnan>:
 8113670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113674:	680b      	ldr	r3, [r1, #0]
 8113676:	6801      	ldr	r1, [r0, #0]
 8113678:	115e      	asrs	r6, r3, #5
 811367a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 811367e:	f013 031f 	ands.w	r3, r3, #31
 8113682:	b087      	sub	sp, #28
 8113684:	bf18      	it	ne
 8113686:	3604      	addne	r6, #4
 8113688:	2500      	movs	r5, #0
 811368a:	1f37      	subs	r7, r6, #4
 811368c:	4682      	mov	sl, r0
 811368e:	4690      	mov	r8, r2
 8113690:	9301      	str	r3, [sp, #4]
 8113692:	f846 5c04 	str.w	r5, [r6, #-4]
 8113696:	46b9      	mov	r9, r7
 8113698:	463c      	mov	r4, r7
 811369a:	9502      	str	r5, [sp, #8]
 811369c:	46ab      	mov	fp, r5
 811369e:	784a      	ldrb	r2, [r1, #1]
 81136a0:	1c4b      	adds	r3, r1, #1
 81136a2:	9303      	str	r3, [sp, #12]
 81136a4:	b342      	cbz	r2, 81136f8 <__hexnan+0x88>
 81136a6:	4610      	mov	r0, r2
 81136a8:	9105      	str	r1, [sp, #20]
 81136aa:	9204      	str	r2, [sp, #16]
 81136ac:	f7ff fd95 	bl	81131da <__hexdig_fun>
 81136b0:	2800      	cmp	r0, #0
 81136b2:	d151      	bne.n	8113758 <__hexnan+0xe8>
 81136b4:	9a04      	ldr	r2, [sp, #16]
 81136b6:	9905      	ldr	r1, [sp, #20]
 81136b8:	2a20      	cmp	r2, #32
 81136ba:	d818      	bhi.n	81136ee <__hexnan+0x7e>
 81136bc:	9b02      	ldr	r3, [sp, #8]
 81136be:	459b      	cmp	fp, r3
 81136c0:	dd13      	ble.n	81136ea <__hexnan+0x7a>
 81136c2:	454c      	cmp	r4, r9
 81136c4:	d206      	bcs.n	81136d4 <__hexnan+0x64>
 81136c6:	2d07      	cmp	r5, #7
 81136c8:	dc04      	bgt.n	81136d4 <__hexnan+0x64>
 81136ca:	462a      	mov	r2, r5
 81136cc:	4649      	mov	r1, r9
 81136ce:	4620      	mov	r0, r4
 81136d0:	f7ff ffa8 	bl	8113624 <L_shift>
 81136d4:	4544      	cmp	r4, r8
 81136d6:	d952      	bls.n	811377e <__hexnan+0x10e>
 81136d8:	2300      	movs	r3, #0
 81136da:	f1a4 0904 	sub.w	r9, r4, #4
 81136de:	f844 3c04 	str.w	r3, [r4, #-4]
 81136e2:	f8cd b008 	str.w	fp, [sp, #8]
 81136e6:	464c      	mov	r4, r9
 81136e8:	461d      	mov	r5, r3
 81136ea:	9903      	ldr	r1, [sp, #12]
 81136ec:	e7d7      	b.n	811369e <__hexnan+0x2e>
 81136ee:	2a29      	cmp	r2, #41	@ 0x29
 81136f0:	d157      	bne.n	81137a2 <__hexnan+0x132>
 81136f2:	3102      	adds	r1, #2
 81136f4:	f8ca 1000 	str.w	r1, [sl]
 81136f8:	f1bb 0f00 	cmp.w	fp, #0
 81136fc:	d051      	beq.n	81137a2 <__hexnan+0x132>
 81136fe:	454c      	cmp	r4, r9
 8113700:	d206      	bcs.n	8113710 <__hexnan+0xa0>
 8113702:	2d07      	cmp	r5, #7
 8113704:	dc04      	bgt.n	8113710 <__hexnan+0xa0>
 8113706:	462a      	mov	r2, r5
 8113708:	4649      	mov	r1, r9
 811370a:	4620      	mov	r0, r4
 811370c:	f7ff ff8a 	bl	8113624 <L_shift>
 8113710:	4544      	cmp	r4, r8
 8113712:	d936      	bls.n	8113782 <__hexnan+0x112>
 8113714:	f1a8 0204 	sub.w	r2, r8, #4
 8113718:	4623      	mov	r3, r4
 811371a:	f853 1b04 	ldr.w	r1, [r3], #4
 811371e:	f842 1f04 	str.w	r1, [r2, #4]!
 8113722:	429f      	cmp	r7, r3
 8113724:	d2f9      	bcs.n	811371a <__hexnan+0xaa>
 8113726:	1b3b      	subs	r3, r7, r4
 8113728:	f023 0303 	bic.w	r3, r3, #3
 811372c:	3304      	adds	r3, #4
 811372e:	3401      	adds	r4, #1
 8113730:	3e03      	subs	r6, #3
 8113732:	42b4      	cmp	r4, r6
 8113734:	bf88      	it	hi
 8113736:	2304      	movhi	r3, #4
 8113738:	4443      	add	r3, r8
 811373a:	2200      	movs	r2, #0
 811373c:	f843 2b04 	str.w	r2, [r3], #4
 8113740:	429f      	cmp	r7, r3
 8113742:	d2fb      	bcs.n	811373c <__hexnan+0xcc>
 8113744:	683b      	ldr	r3, [r7, #0]
 8113746:	b91b      	cbnz	r3, 8113750 <__hexnan+0xe0>
 8113748:	4547      	cmp	r7, r8
 811374a:	d128      	bne.n	811379e <__hexnan+0x12e>
 811374c:	2301      	movs	r3, #1
 811374e:	603b      	str	r3, [r7, #0]
 8113750:	2005      	movs	r0, #5
 8113752:	b007      	add	sp, #28
 8113754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113758:	3501      	adds	r5, #1
 811375a:	2d08      	cmp	r5, #8
 811375c:	f10b 0b01 	add.w	fp, fp, #1
 8113760:	dd06      	ble.n	8113770 <__hexnan+0x100>
 8113762:	4544      	cmp	r4, r8
 8113764:	d9c1      	bls.n	81136ea <__hexnan+0x7a>
 8113766:	2300      	movs	r3, #0
 8113768:	f844 3c04 	str.w	r3, [r4, #-4]
 811376c:	2501      	movs	r5, #1
 811376e:	3c04      	subs	r4, #4
 8113770:	6822      	ldr	r2, [r4, #0]
 8113772:	f000 000f 	and.w	r0, r0, #15
 8113776:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 811377a:	6020      	str	r0, [r4, #0]
 811377c:	e7b5      	b.n	81136ea <__hexnan+0x7a>
 811377e:	2508      	movs	r5, #8
 8113780:	e7b3      	b.n	81136ea <__hexnan+0x7a>
 8113782:	9b01      	ldr	r3, [sp, #4]
 8113784:	2b00      	cmp	r3, #0
 8113786:	d0dd      	beq.n	8113744 <__hexnan+0xd4>
 8113788:	f1c3 0320 	rsb	r3, r3, #32
 811378c:	f04f 32ff 	mov.w	r2, #4294967295
 8113790:	40da      	lsrs	r2, r3
 8113792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8113796:	4013      	ands	r3, r2
 8113798:	f846 3c04 	str.w	r3, [r6, #-4]
 811379c:	e7d2      	b.n	8113744 <__hexnan+0xd4>
 811379e:	3f04      	subs	r7, #4
 81137a0:	e7d0      	b.n	8113744 <__hexnan+0xd4>
 81137a2:	2004      	movs	r0, #4
 81137a4:	e7d5      	b.n	8113752 <__hexnan+0xe2>

081137a6 <__ascii_mbtowc>:
 81137a6:	b082      	sub	sp, #8
 81137a8:	b901      	cbnz	r1, 81137ac <__ascii_mbtowc+0x6>
 81137aa:	a901      	add	r1, sp, #4
 81137ac:	b142      	cbz	r2, 81137c0 <__ascii_mbtowc+0x1a>
 81137ae:	b14b      	cbz	r3, 81137c4 <__ascii_mbtowc+0x1e>
 81137b0:	7813      	ldrb	r3, [r2, #0]
 81137b2:	600b      	str	r3, [r1, #0]
 81137b4:	7812      	ldrb	r2, [r2, #0]
 81137b6:	1e10      	subs	r0, r2, #0
 81137b8:	bf18      	it	ne
 81137ba:	2001      	movne	r0, #1
 81137bc:	b002      	add	sp, #8
 81137be:	4770      	bx	lr
 81137c0:	4610      	mov	r0, r2
 81137c2:	e7fb      	b.n	81137bc <__ascii_mbtowc+0x16>
 81137c4:	f06f 0001 	mvn.w	r0, #1
 81137c8:	e7f8      	b.n	81137bc <__ascii_mbtowc+0x16>

081137ca <_realloc_r>:
 81137ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81137ce:	4680      	mov	r8, r0
 81137d0:	4615      	mov	r5, r2
 81137d2:	460c      	mov	r4, r1
 81137d4:	b921      	cbnz	r1, 81137e0 <_realloc_r+0x16>
 81137d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81137da:	4611      	mov	r1, r2
 81137dc:	f7fd bcac 	b.w	8111138 <_malloc_r>
 81137e0:	b92a      	cbnz	r2, 81137ee <_realloc_r+0x24>
 81137e2:	f7fd fc35 	bl	8111050 <_free_r>
 81137e6:	2400      	movs	r4, #0
 81137e8:	4620      	mov	r0, r4
 81137ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81137ee:	f000 f86b 	bl	81138c8 <_malloc_usable_size_r>
 81137f2:	4285      	cmp	r5, r0
 81137f4:	4606      	mov	r6, r0
 81137f6:	d802      	bhi.n	81137fe <_realloc_r+0x34>
 81137f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 81137fc:	d8f4      	bhi.n	81137e8 <_realloc_r+0x1e>
 81137fe:	4629      	mov	r1, r5
 8113800:	4640      	mov	r0, r8
 8113802:	f7fd fc99 	bl	8111138 <_malloc_r>
 8113806:	4607      	mov	r7, r0
 8113808:	2800      	cmp	r0, #0
 811380a:	d0ec      	beq.n	81137e6 <_realloc_r+0x1c>
 811380c:	42b5      	cmp	r5, r6
 811380e:	462a      	mov	r2, r5
 8113810:	4621      	mov	r1, r4
 8113812:	bf28      	it	cs
 8113814:	4632      	movcs	r2, r6
 8113816:	f7fc fd9a 	bl	811034e <memcpy>
 811381a:	4621      	mov	r1, r4
 811381c:	4640      	mov	r0, r8
 811381e:	f7fd fc17 	bl	8111050 <_free_r>
 8113822:	463c      	mov	r4, r7
 8113824:	e7e0      	b.n	81137e8 <_realloc_r+0x1e>

08113826 <__ascii_wctomb>:
 8113826:	4603      	mov	r3, r0
 8113828:	4608      	mov	r0, r1
 811382a:	b141      	cbz	r1, 811383e <__ascii_wctomb+0x18>
 811382c:	2aff      	cmp	r2, #255	@ 0xff
 811382e:	d904      	bls.n	811383a <__ascii_wctomb+0x14>
 8113830:	228a      	movs	r2, #138	@ 0x8a
 8113832:	601a      	str	r2, [r3, #0]
 8113834:	f04f 30ff 	mov.w	r0, #4294967295
 8113838:	4770      	bx	lr
 811383a:	700a      	strb	r2, [r1, #0]
 811383c:	2001      	movs	r0, #1
 811383e:	4770      	bx	lr

08113840 <_raise_r>:
 8113840:	291f      	cmp	r1, #31
 8113842:	b538      	push	{r3, r4, r5, lr}
 8113844:	4605      	mov	r5, r0
 8113846:	460c      	mov	r4, r1
 8113848:	d904      	bls.n	8113854 <_raise_r+0x14>
 811384a:	2316      	movs	r3, #22
 811384c:	6003      	str	r3, [r0, #0]
 811384e:	f04f 30ff 	mov.w	r0, #4294967295
 8113852:	bd38      	pop	{r3, r4, r5, pc}
 8113854:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8113856:	b112      	cbz	r2, 811385e <_raise_r+0x1e>
 8113858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811385c:	b94b      	cbnz	r3, 8113872 <_raise_r+0x32>
 811385e:	4628      	mov	r0, r5
 8113860:	f000 f830 	bl	81138c4 <_getpid_r>
 8113864:	4622      	mov	r2, r4
 8113866:	4601      	mov	r1, r0
 8113868:	4628      	mov	r0, r5
 811386a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811386e:	f000 b817 	b.w	81138a0 <_kill_r>
 8113872:	2b01      	cmp	r3, #1
 8113874:	d00a      	beq.n	811388c <_raise_r+0x4c>
 8113876:	1c59      	adds	r1, r3, #1
 8113878:	d103      	bne.n	8113882 <_raise_r+0x42>
 811387a:	2316      	movs	r3, #22
 811387c:	6003      	str	r3, [r0, #0]
 811387e:	2001      	movs	r0, #1
 8113880:	e7e7      	b.n	8113852 <_raise_r+0x12>
 8113882:	2100      	movs	r1, #0
 8113884:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8113888:	4620      	mov	r0, r4
 811388a:	4798      	blx	r3
 811388c:	2000      	movs	r0, #0
 811388e:	e7e0      	b.n	8113852 <_raise_r+0x12>

08113890 <raise>:
 8113890:	4b02      	ldr	r3, [pc, #8]	@ (811389c <raise+0xc>)
 8113892:	4601      	mov	r1, r0
 8113894:	6818      	ldr	r0, [r3, #0]
 8113896:	f7ff bfd3 	b.w	8113840 <_raise_r>
 811389a:	bf00      	nop
 811389c:	100000ac 	.word	0x100000ac

081138a0 <_kill_r>:
 81138a0:	b538      	push	{r3, r4, r5, lr}
 81138a2:	4d07      	ldr	r5, [pc, #28]	@ (81138c0 <_kill_r+0x20>)
 81138a4:	2300      	movs	r3, #0
 81138a6:	4604      	mov	r4, r0
 81138a8:	4608      	mov	r0, r1
 81138aa:	4611      	mov	r1, r2
 81138ac:	602b      	str	r3, [r5, #0]
 81138ae:	f7f0 fc17 	bl	81040e0 <_kill>
 81138b2:	1c43      	adds	r3, r0, #1
 81138b4:	d102      	bne.n	81138bc <_kill_r+0x1c>
 81138b6:	682b      	ldr	r3, [r5, #0]
 81138b8:	b103      	cbz	r3, 81138bc <_kill_r+0x1c>
 81138ba:	6023      	str	r3, [r4, #0]
 81138bc:	bd38      	pop	{r3, r4, r5, pc}
 81138be:	bf00      	nop
 81138c0:	10008c78 	.word	0x10008c78

081138c4 <_getpid_r>:
 81138c4:	f7f0 bc04 	b.w	81040d0 <_getpid>

081138c8 <_malloc_usable_size_r>:
 81138c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81138cc:	1f18      	subs	r0, r3, #4
 81138ce:	2b00      	cmp	r3, #0
 81138d0:	bfbc      	itt	lt
 81138d2:	580b      	ldrlt	r3, [r1, r0]
 81138d4:	18c0      	addlt	r0, r0, r3
 81138d6:	4770      	bx	lr

081138d8 <_init>:
 81138d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81138da:	bf00      	nop
 81138dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81138de:	bc08      	pop	{r3}
 81138e0:	469e      	mov	lr, r3
 81138e2:	4770      	bx	lr

081138e4 <_fini>:
 81138e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81138e6:	bf00      	nop
 81138e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81138ea:	bc08      	pop	{r3}
 81138ec:	469e      	mov	lr, r3
 81138ee:	4770      	bx	lr
