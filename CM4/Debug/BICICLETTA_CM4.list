
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015910  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08115bb0  08115bb0  00016bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08116124  08116124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0811612c  0811612c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08116130  08116130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000026c  10000000  08116134  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000d260  10000270  081163a0  00018270  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  1000d4d0  081163a0  000184d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001826c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000296f4  00000000  00000000  0001829c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b63  00000000  00000000  00041990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d98  00000000  00000000  000464f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000167a  00000000  00000000  00048290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f8d4  00000000  00000000  0004990a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002781c  00000000  00000000  000891de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a3983  00000000  00000000  000b09fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0025437d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000934c  00000000  00000000  00254438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  0025d784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000017d8  00000000  00000000  0025d7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  0025efc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000270 	.word	0x10000270
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08115b98 	.word	0x08115b98

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000274 	.word	0x10000274
 81002dc:	08115b98 	.word	0x08115b98

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <Voltage2Duty>:
	float speed_rpm = (speed_degsec * 60)/360;
	return speed_rpm;
}
*/

float Voltage2Duty(float u){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810113a:	d805      	bhi.n	8101148 <Voltage2Duty+0x24>
		u = -u;
 810113c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101140:	eef1 7a67 	vneg.f32	s15, s15
 8101144:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101148:	edd7 7a01 	vldr	s15, [r7, #4]
 810114c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011a0 <Voltage2Duty+0x7c>
 8101150:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101154:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8101158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810115c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 8101160:	edd7 7a03 	vldr	s15, [r7, #12]
 8101164:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011a0 <Voltage2Duty+0x7c>
 8101168:	eef4 7ac7 	vcmpe.f32	s15, s14
 810116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101170:	dd02      	ble.n	8101178 <Voltage2Duty+0x54>
		duty = 100;
 8101172:	4b0c      	ldr	r3, [pc, #48]	@ (81011a4 <Voltage2Duty+0x80>)
 8101174:	60fb      	str	r3, [r7, #12]
 8101176:	e009      	b.n	810118c <Voltage2Duty+0x68>
	}else if(duty < 0){
 8101178:	edd7 7a03 	vldr	s15, [r7, #12]
 810117c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101184:	d502      	bpl.n	810118c <Voltage2Duty+0x68>
		duty = 0;
 8101186:	f04f 0300 	mov.w	r3, #0
 810118a:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 810118c:	68fb      	ldr	r3, [r7, #12]
 810118e:	ee07 3a90 	vmov	s15, r3
}
 8101192:	eeb0 0a67 	vmov.f32	s0, s15
 8101196:	3714      	adds	r7, #20
 8101198:	46bd      	mov	sp, r7
 810119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810119e:	4770      	bx	lr
 81011a0:	42c80000 	.word	0x42c80000
 81011a4:	42c80000 	.word	0x42c80000

081011a8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011a8:	b480      	push	{r7}
 81011aa:	b085      	sub	sp, #20
 81011ac:	af00      	add	r7, sp, #0
 81011ae:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011b2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011be:	db02      	blt.n	81011c6 <Ref2Direction+0x1e>
		direction = 0;
 81011c0:	2300      	movs	r3, #0
 81011c2:	73fb      	strb	r3, [r7, #15]
 81011c4:	e001      	b.n	81011ca <Ref2Direction+0x22>
	} else {
		direction = 1;
 81011c6:	2301      	movs	r3, #1
 81011c8:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 81011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 81011cc:	4618      	mov	r0, r3
 81011ce:	3714      	adds	r7, #20
 81011d0:	46bd      	mov	sp, r7
 81011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d6:	4770      	bx	lr

081011d8 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 81011d8:	b5b0      	push	{r4, r5, r7, lr}
 81011da:	b082      	sub	sp, #8
 81011dc:	af00      	add	r7, sp, #0
 81011de:	ed87 0a01 	vstr	s0, [r7, #4]
 81011e2:	4603      	mov	r3, r0
 81011e4:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 81011e6:	6878      	ldr	r0, [r7, #4]
 81011e8:	f7ff fa36 	bl	8100658 <__aeabi_f2d>
 81011ec:	f04f 0200 	mov.w	r2, #0
 81011f0:	4b17      	ldr	r3, [pc, #92]	@ (8101250 <set_PWM_and_dir_back_wheel+0x78>)
 81011f2:	f7ff fbb3 	bl	810095c <__aeabi_ddiv>
 81011f6:	4602      	mov	r2, r0
 81011f8:	460b      	mov	r3, r1
 81011fa:	4614      	mov	r4, r2
 81011fc:	461d      	mov	r5, r3
 81011fe:	4b15      	ldr	r3, [pc, #84]	@ (8101254 <set_PWM_and_dir_back_wheel+0x7c>)
 8101200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101202:	4618      	mov	r0, r3
 8101204:	f7ff fa06 	bl	8100614 <__aeabi_ui2d>
 8101208:	4602      	mov	r2, r0
 810120a:	460b      	mov	r3, r1
 810120c:	4620      	mov	r0, r4
 810120e:	4629      	mov	r1, r5
 8101210:	f7ff fa7a 	bl	8100708 <__aeabi_dmul>
 8101214:	4602      	mov	r2, r0
 8101216:	460b      	mov	r3, r1
 8101218:	4c0e      	ldr	r4, [pc, #56]	@ (8101254 <set_PWM_and_dir_back_wheel+0x7c>)
 810121a:	4610      	mov	r0, r2
 810121c:	4619      	mov	r1, r3
 810121e:	f7ff fd4b 	bl	8100cb8 <__aeabi_d2uiz>
 8101222:	4603      	mov	r3, r0
 8101224:	6363      	str	r3, [r4, #52]	@ 0x34

	if(direction == 0){
 8101226:	78fb      	ldrb	r3, [r7, #3]
 8101228:	2b00      	cmp	r3, #0
 810122a:	d105      	bne.n	8101238 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810122c:	2200      	movs	r2, #0
 810122e:	2110      	movs	r1, #16
 8101230:	4809      	ldr	r0, [pc, #36]	@ (8101258 <set_PWM_and_dir_back_wheel+0x80>)
 8101232:	f007 ff89 	bl	8109148 <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101236:	e007      	b.n	8101248 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101238:	78fb      	ldrb	r3, [r7, #3]
 810123a:	2b01      	cmp	r3, #1
 810123c:	d104      	bne.n	8101248 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810123e:	2201      	movs	r2, #1
 8101240:	2110      	movs	r1, #16
 8101242:	4805      	ldr	r0, [pc, #20]	@ (8101258 <set_PWM_and_dir_back_wheel+0x80>)
 8101244:	f007 ff80 	bl	8109148 <HAL_GPIO_WritePin>
}
 8101248:	bf00      	nop
 810124a:	3708      	adds	r7, #8
 810124c:	46bd      	mov	sp, r7
 810124e:	bdb0      	pop	{r4, r5, r7, pc}
 8101250:	40590000 	.word	0x40590000
 8101254:	40010000 	.word	0x40010000
 8101258:	58020000 	.word	0x58020000

0810125c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810125c:	b580      	push	{r7, lr}
 810125e:	b082      	sub	sp, #8
 8101260:	af00      	add	r7, sp, #0
 8101262:	ed87 0a01 	vstr	s0, [r7, #4]
 8101266:	4603      	mov	r3, r0
 8101268:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 810126a:	edd7 7a01 	vldr	s15, [r7, #4]
 810126e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012bc <set_PWM_and_dir_front_wheel+0x60>
 8101272:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101276:	4b12      	ldr	r3, [pc, #72]	@ (81012c0 <set_PWM_and_dir_front_wheel+0x64>)
 8101278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810127a:	ee07 3a90 	vmov	s15, r3
 810127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101286:	4b0e      	ldr	r3, [pc, #56]	@ (81012c0 <set_PWM_and_dir_front_wheel+0x64>)
 8101288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810128c:	ee17 2a90 	vmov	r2, s15
 8101290:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 8101292:	78fb      	ldrb	r3, [r7, #3]
 8101294:	2b00      	cmp	r3, #0
 8101296:	d105      	bne.n	81012a4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8101298:	2200      	movs	r2, #0
 810129a:	2120      	movs	r1, #32
 810129c:	4809      	ldr	r0, [pc, #36]	@ (81012c4 <set_PWM_and_dir_front_wheel+0x68>)
 810129e:	f007 ff53 	bl	8109148 <HAL_GPIO_WritePin>
	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 81012a2:	e007      	b.n	81012b4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012a4:	78fb      	ldrb	r3, [r7, #3]
 81012a6:	2b01      	cmp	r3, #1
 81012a8:	d104      	bne.n	81012b4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 81012aa:	2201      	movs	r2, #1
 81012ac:	2120      	movs	r1, #32
 81012ae:	4805      	ldr	r0, [pc, #20]	@ (81012c4 <set_PWM_and_dir_front_wheel+0x68>)
 81012b0:	f007 ff4a 	bl	8109148 <HAL_GPIO_WritePin>
}
 81012b4:	bf00      	nop
 81012b6:	3708      	adds	r7, #8
 81012b8:	46bd      	mov	sp, r7
 81012ba:	bd80      	pop	{r7, pc}
 81012bc:	42c80000 	.word	0x42c80000
 81012c0:	40000400 	.word	0x40000400
 81012c4:	58020000 	.word	0x58020000

081012c8 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 81012c8:	b480      	push	{r7}
 81012ca:	b085      	sub	sp, #20
 81012cc:	af00      	add	r7, sp, #0
 81012ce:	60f8      	str	r0, [r7, #12]
 81012d0:	ed87 0a02 	vstr	s0, [r7, #8]
 81012d4:	edc7 0a01 	vstr	s1, [r7, #4]
 81012d8:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 81012dc:	68fb      	ldr	r3, [r7, #12]
 81012de:	68ba      	ldr	r2, [r7, #8]
 81012e0:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 81012e2:	68fb      	ldr	r3, [r7, #12]
 81012e4:	687a      	ldr	r2, [r7, #4]
 81012e6:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 81012e8:	68fb      	ldr	r3, [r7, #12]
 81012ea:	683a      	ldr	r2, [r7, #0]
 81012ec:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 81012ee:	68fb      	ldr	r3, [r7, #12]
 81012f0:	f04f 0200 	mov.w	r2, #0
 81012f4:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 81012f6:	68fb      	ldr	r3, [r7, #12]
 81012f8:	f04f 0200 	mov.w	r2, #0
 81012fc:	61da      	str	r2, [r3, #28]

}
 81012fe:	bf00      	nop
 8101300:	3714      	adds	r7, #20
 8101302:	46bd      	mov	sp, r7
 8101304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101308:	4770      	bx	lr

0810130a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810130a:	b480      	push	{r7}
 810130c:	b085      	sub	sp, #20
 810130e:	af00      	add	r7, sp, #0
 8101310:	60f8      	str	r0, [r7, #12]
 8101312:	ed87 0a02 	vstr	s0, [r7, #8]
 8101316:	edc7 0a01 	vstr	s1, [r7, #4]
 810131a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810131e:	68fb      	ldr	r3, [r7, #12]
 8101320:	68ba      	ldr	r2, [r7, #8]
 8101322:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101324:	68fb      	ldr	r3, [r7, #12]
 8101326:	683a      	ldr	r2, [r7, #0]
 8101328:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810132a:	68fb      	ldr	r3, [r7, #12]
 810132c:	687a      	ldr	r2, [r7, #4]
 810132e:	605a      	str	r2, [r3, #4]
}
 8101330:	bf00      	nop
 8101332:	3714      	adds	r7, #20
 8101334:	46bd      	mov	sp, r7
 8101336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810133a:	4770      	bx	lr

0810133c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810133c:	b480      	push	{r7}
 810133e:	b089      	sub	sp, #36	@ 0x24
 8101340:	af00      	add	r7, sp, #0
 8101342:	60f8      	str	r0, [r7, #12]
 8101344:	ed87 0a02 	vstr	s0, [r7, #8]
 8101348:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810134c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101350:	edd7 7a02 	vldr	s15, [r7, #8]
 8101354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101358:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810135c:	68fb      	ldr	r3, [r7, #12]
 810135e:	edd3 7a00 	vldr	s15, [r3]
 8101362:	ed97 7a06 	vldr	s14, [r7, #24]
 8101366:	ee67 7a27 	vmul.f32	s15, s14, s15
 810136a:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 810136e:	68fb      	ldr	r3, [r7, #12]
 8101370:	ed93 7a07 	vldr	s14, [r3, #28]
 8101374:	68fb      	ldr	r3, [r7, #12]
 8101376:	edd3 6a01 	vldr	s13, [r3, #4]
 810137a:	68fb      	ldr	r3, [r7, #12]
 810137c:	edd3 7a03 	vldr	s15, [r3, #12]
 8101380:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8101384:	68fb      	ldr	r3, [r7, #12]
 8101386:	edd3 7a06 	vldr	s15, [r3, #24]
 810138a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810138e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101392:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 8101396:	68fb      	ldr	r3, [r7, #12]
 8101398:	69ba      	ldr	r2, [r7, #24]
 810139a:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 810139c:	ed97 7a05 	vldr	s14, [r7, #20]
 81013a0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013a8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ac:	68fb      	ldr	r3, [r7, #12]
 81013ae:	edd3 7a04 	vldr	s15, [r3, #16]
 81013b2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013be:	dd03      	ble.n	81013c8 <PID_controller+0x8c>
		u = p->u_max;
 81013c0:	68fb      	ldr	r3, [r7, #12]
 81013c2:	691b      	ldr	r3, [r3, #16]
 81013c4:	61fb      	str	r3, [r7, #28]
 81013c6:	e010      	b.n	81013ea <PID_controller+0xae>
	}else if(u<p->u_min){
 81013c8:	68fb      	ldr	r3, [r7, #12]
 81013ca:	edd3 7a05 	vldr	s15, [r3, #20]
 81013ce:	ed97 7a07 	vldr	s14, [r7, #28]
 81013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013da:	d503      	bpl.n	81013e4 <PID_controller+0xa8>
		u = p->u_min;
 81013dc:	68fb      	ldr	r3, [r7, #12]
 81013de:	695b      	ldr	r3, [r3, #20]
 81013e0:	61fb      	str	r3, [r7, #28]
 81013e2:	e002      	b.n	81013ea <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 81013e4:	68fb      	ldr	r3, [r7, #12]
 81013e6:	693a      	ldr	r2, [r7, #16]
 81013e8:	61da      	str	r2, [r3, #28]
	}

	return u;
 81013ea:	69fb      	ldr	r3, [r7, #28]
 81013ec:	ee07 3a90 	vmov	s15, r3

}
 81013f0:	eeb0 0a67 	vmov.f32	s0, s15
 81013f4:	3724      	adds	r7, #36	@ 0x24
 81013f6:	46bd      	mov	sp, r7
 81013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013fc:	4770      	bx	lr

081013fe <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 81013fe:	b580      	push	{r7, lr}
 8101400:	b082      	sub	sp, #8
 8101402:	af00      	add	r7, sp, #0
 8101404:	4603      	mov	r3, r0
 8101406:	71fb      	strb	r3, [r7, #7]
 8101408:	79fb      	ldrb	r3, [r7, #7]
 810140a:	4619      	mov	r1, r3
 810140c:	2007      	movs	r0, #7
 810140e:	f000 fa31 	bl	8101874 <bno055_writeData>
 8101412:	bf00      	nop
 8101414:	3708      	adds	r7, #8
 8101416:	46bd      	mov	sp, r7
 8101418:	bd80      	pop	{r7, pc}

0810141a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810141a:	b580      	push	{r7, lr}
 810141c:	b082      	sub	sp, #8
 810141e:	af00      	add	r7, sp, #0
 8101420:	4603      	mov	r3, r0
 8101422:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101424:	79fb      	ldrb	r3, [r7, #7]
 8101426:	4619      	mov	r1, r3
 8101428:	203d      	movs	r0, #61	@ 0x3d
 810142a:	f000 fa23 	bl	8101874 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810142e:	79fb      	ldrb	r3, [r7, #7]
 8101430:	2b00      	cmp	r3, #0
 8101432:	d103      	bne.n	810143c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101434:	2064      	movs	r0, #100	@ 0x64
 8101436:	f000 fa11 	bl	810185c <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810143a:	e002      	b.n	8101442 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810143c:	2050      	movs	r0, #80	@ 0x50
 810143e:	f000 fa0d 	bl	810185c <bno055_delay>
}
 8101442:	bf00      	nop
 8101444:	3708      	adds	r7, #8
 8101446:	46bd      	mov	sp, r7
 8101448:	bd80      	pop	{r7, pc}

0810144a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810144a:	b580      	push	{r7, lr}
 810144c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810144e:	2000      	movs	r0, #0
 8101450:	f7ff ffe3 	bl	810141a <bno055_setOperationMode>
}
 8101454:	bf00      	nop
 8101456:	bd80      	pop	{r7, pc}

08101458 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101458:	b580      	push	{r7, lr}
 810145a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810145c:	200c      	movs	r0, #12
 810145e:	f7ff ffdc 	bl	810141a <bno055_setOperationMode>
}
 8101462:	bf00      	nop
 8101464:	bd80      	pop	{r7, pc}

08101466 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 8101466:	b580      	push	{r7, lr}
 8101468:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 810146a:	2120      	movs	r1, #32
 810146c:	203f      	movs	r0, #63	@ 0x3f
 810146e:	f000 fa01 	bl	8101874 <bno055_writeData>
  bno055_delay(700);
 8101472:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8101476:	f000 f9f1 	bl	810185c <bno055_delay>
}
 810147a:	bf00      	nop
 810147c:	bd80      	pop	{r7, pc}

0810147e <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 810147e:	b580      	push	{r7, lr}
 8101480:	b082      	sub	sp, #8
 8101482:	af00      	add	r7, sp, #0
  bno055_reset();
 8101484:	f7ff ffef 	bl	8101466 <bno055_reset>

  uint8_t id = 0;
 8101488:	2300      	movs	r3, #0
 810148a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810148c:	1dfb      	adds	r3, r7, #7
 810148e:	2201      	movs	r2, #1
 8101490:	4619      	mov	r1, r3
 8101492:	2000      	movs	r0, #0
 8101494:	f000 fa22 	bl	81018dc <bno055_readData>
  if (id != BNO055_ID) {
    //printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
  }
  bno055_setPage(0);
 8101498:	2000      	movs	r0, #0
 810149a:	f7ff ffb0 	bl	81013fe <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810149e:	2100      	movs	r1, #0
 81014a0:	203f      	movs	r0, #63	@ 0x3f
 81014a2:	f000 f9e7 	bl	8101874 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014a6:	f7ff ffd0 	bl	810144a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014aa:	200a      	movs	r0, #10
 81014ac:	f000 f9d6 	bl	810185c <bno055_delay>
}
 81014b0:	bf00      	nop
 81014b2:	3708      	adds	r7, #8
 81014b4:	46bd      	mov	sp, r7
 81014b6:	bd80      	pop	{r7, pc}

081014b8 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 81014b8:	b580      	push	{r7, lr}
 81014ba:	b084      	sub	sp, #16
 81014bc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 81014be:	2000      	movs	r0, #0
 81014c0:	f7ff ff9d 	bl	81013fe <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 81014c4:	2300      	movs	r3, #0
 81014c6:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 81014c8:	2300      	movs	r3, #0
 81014ca:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 81014cc:	1dfb      	adds	r3, r7, #7
 81014ce:	2201      	movs	r2, #1
 81014d0:	4619      	mov	r1, r3
 81014d2:	2035      	movs	r0, #53	@ 0x35
 81014d4:	f000 fa02 	bl	81018dc <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 81014d8:	79fb      	ldrb	r3, [r7, #7]
 81014da:	099b      	lsrs	r3, r3, #6
 81014dc:	b2db      	uxtb	r3, r3
 81014de:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 81014e0:	79fb      	ldrb	r3, [r7, #7]
 81014e2:	091b      	lsrs	r3, r3, #4
 81014e4:	b2db      	uxtb	r3, r3
 81014e6:	f003 0303 	and.w	r3, r3, #3
 81014ea:	b2db      	uxtb	r3, r3
 81014ec:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 81014ee:	79fb      	ldrb	r3, [r7, #7]
 81014f0:	089b      	lsrs	r3, r3, #2
 81014f2:	b2db      	uxtb	r3, r3
 81014f4:	f003 0303 	and.w	r3, r3, #3
 81014f8:	b2db      	uxtb	r3, r3
 81014fa:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 81014fc:	79fb      	ldrb	r3, [r7, #7]
 81014fe:	f003 0303 	and.w	r3, r3, #3
 8101502:	b2db      	uxtb	r3, r3
 8101504:	72bb      	strb	r3, [r7, #10]
  return cal;
 8101506:	68bb      	ldr	r3, [r7, #8]
 8101508:	60fb      	str	r3, [r7, #12]
 810150a:	2300      	movs	r3, #0
 810150c:	7b3a      	ldrb	r2, [r7, #12]
 810150e:	f362 0307 	bfi	r3, r2, #0, #8
 8101512:	7b7a      	ldrb	r2, [r7, #13]
 8101514:	f362 230f 	bfi	r3, r2, #8, #8
 8101518:	7bba      	ldrb	r2, [r7, #14]
 810151a:	f362 4317 	bfi	r3, r2, #16, #8
 810151e:	7bfa      	ldrb	r2, [r7, #15]
 8101520:	f362 631f 	bfi	r3, r2, #24, #8
}
 8101524:	4618      	mov	r0, r3
 8101526:	3710      	adds	r7, #16
 8101528:	46bd      	mov	sp, r7
 810152a:	bd80      	pop	{r7, pc}

0810152c <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 810152c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101530:	b09e      	sub	sp, #120	@ 0x78
 8101532:	af00      	add	r7, sp, #0
 8101534:	4603      	mov	r3, r0
 8101536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 810153a:	2000      	movs	r0, #0
 810153c:	f7ff ff5f 	bl	81013fe <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101544:	2b20      	cmp	r3, #32
 8101546:	d108      	bne.n	810155a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101548:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810154c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101550:	2208      	movs	r2, #8
 8101552:	4618      	mov	r0, r3
 8101554:	f000 f9c2 	bl	81018dc <bno055_readData>
 8101558:	e007      	b.n	810156a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810155a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810155e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101562:	2206      	movs	r2, #6
 8101564:	4618      	mov	r0, r3
 8101566:	f000 f9b9 	bl	81018dc <bno055_readData>

  double scale = 1;
 810156a:	f04f 0200 	mov.w	r2, #0
 810156e:	4b8b      	ldr	r3, [pc, #556]	@ (810179c <bno055_getVector+0x270>)
 8101570:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101578:	2b0e      	cmp	r3, #14
 810157a:	d109      	bne.n	8101590 <bno055_getVector+0x64>
    scale = magScale;
 810157c:	4b88      	ldr	r3, [pc, #544]	@ (81017a0 <bno055_getVector+0x274>)
 810157e:	881b      	ldrh	r3, [r3, #0]
 8101580:	4618      	mov	r0, r3
 8101582:	f7ff f847 	bl	8100614 <__aeabi_ui2d>
 8101586:	4602      	mov	r2, r0
 8101588:	460b      	mov	r3, r1
 810158a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 810158e:	e03e      	b.n	810160e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8101590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101594:	2b08      	cmp	r3, #8
 8101596:	d007      	beq.n	81015a8 <bno055_getVector+0x7c>
 8101598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810159c:	2b28      	cmp	r3, #40	@ 0x28
 810159e:	d003      	beq.n	81015a8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81015a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015a4:	2b2e      	cmp	r3, #46	@ 0x2e
 81015a6:	d109      	bne.n	81015bc <bno055_getVector+0x90>
    scale = accelScale;
 81015a8:	4b7e      	ldr	r3, [pc, #504]	@ (81017a4 <bno055_getVector+0x278>)
 81015aa:	881b      	ldrh	r3, [r3, #0]
 81015ac:	4618      	mov	r0, r3
 81015ae:	f7ff f831 	bl	8100614 <__aeabi_ui2d>
 81015b2:	4602      	mov	r2, r0
 81015b4:	460b      	mov	r3, r1
 81015b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015ba:	e028      	b.n	810160e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81015bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015c0:	2b14      	cmp	r3, #20
 81015c2:	d109      	bne.n	81015d8 <bno055_getVector+0xac>
    scale = angularRateScale;
 81015c4:	4b78      	ldr	r3, [pc, #480]	@ (81017a8 <bno055_getVector+0x27c>)
 81015c6:	881b      	ldrh	r3, [r3, #0]
 81015c8:	4618      	mov	r0, r3
 81015ca:	f7ff f823 	bl	8100614 <__aeabi_ui2d>
 81015ce:	4602      	mov	r2, r0
 81015d0:	460b      	mov	r3, r1
 81015d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015d6:	e01a      	b.n	810160e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 81015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015dc:	2b1a      	cmp	r3, #26
 81015de:	d109      	bne.n	81015f4 <bno055_getVector+0xc8>
    scale = eulerScale;
 81015e0:	4b72      	ldr	r3, [pc, #456]	@ (81017ac <bno055_getVector+0x280>)
 81015e2:	881b      	ldrh	r3, [r3, #0]
 81015e4:	4618      	mov	r0, r3
 81015e6:	f7ff f815 	bl	8100614 <__aeabi_ui2d>
 81015ea:	4602      	mov	r2, r0
 81015ec:	460b      	mov	r3, r1
 81015ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015f2:	e00c      	b.n	810160e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 81015f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015f8:	2b20      	cmp	r3, #32
 81015fa:	d108      	bne.n	810160e <bno055_getVector+0xe2>
    scale = quaScale;
 81015fc:	4b6c      	ldr	r3, [pc, #432]	@ (81017b0 <bno055_getVector+0x284>)
 81015fe:	881b      	ldrh	r3, [r3, #0]
 8101600:	4618      	mov	r0, r3
 8101602:	f7ff f807 	bl	8100614 <__aeabi_ui2d>
 8101606:	4602      	mov	r2, r0
 8101608:	460b      	mov	r3, r1
 810160a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810160e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101612:	2220      	movs	r2, #32
 8101614:	2100      	movs	r1, #0
 8101616:	4618      	mov	r0, r3
 8101618:	f010 ff7c 	bl	8112514 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810161c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101620:	2b20      	cmp	r3, #32
 8101622:	d150      	bne.n	81016c6 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101624:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101628:	021b      	lsls	r3, r3, #8
 810162a:	b21a      	sxth	r2, r3
 810162c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101630:	b21b      	sxth	r3, r3
 8101632:	4313      	orrs	r3, r2
 8101634:	b21b      	sxth	r3, r3
 8101636:	4618      	mov	r0, r3
 8101638:	f7fe fffc 	bl	8100634 <__aeabi_i2d>
 810163c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101640:	f7ff f98c 	bl	810095c <__aeabi_ddiv>
 8101644:	4602      	mov	r2, r0
 8101646:	460b      	mov	r3, r1
 8101648:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810164c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101650:	021b      	lsls	r3, r3, #8
 8101652:	b21a      	sxth	r2, r3
 8101654:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101658:	b21b      	sxth	r3, r3
 810165a:	4313      	orrs	r3, r2
 810165c:	b21b      	sxth	r3, r3
 810165e:	4618      	mov	r0, r3
 8101660:	f7fe ffe8 	bl	8100634 <__aeabi_i2d>
 8101664:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101668:	f7ff f978 	bl	810095c <__aeabi_ddiv>
 810166c:	4602      	mov	r2, r0
 810166e:	460b      	mov	r3, r1
 8101670:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101674:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8101678:	021b      	lsls	r3, r3, #8
 810167a:	b21a      	sxth	r2, r3
 810167c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101680:	b21b      	sxth	r3, r3
 8101682:	4313      	orrs	r3, r2
 8101684:	b21b      	sxth	r3, r3
 8101686:	4618      	mov	r0, r3
 8101688:	f7fe ffd4 	bl	8100634 <__aeabi_i2d>
 810168c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101690:	f7ff f964 	bl	810095c <__aeabi_ddiv>
 8101694:	4602      	mov	r2, r0
 8101696:	460b      	mov	r3, r1
 8101698:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810169c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81016a0:	021b      	lsls	r3, r3, #8
 81016a2:	b21a      	sxth	r2, r3
 81016a4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 81016a8:	b21b      	sxth	r3, r3
 81016aa:	4313      	orrs	r3, r2
 81016ac:	b21b      	sxth	r3, r3
 81016ae:	4618      	mov	r0, r3
 81016b0:	f7fe ffc0 	bl	8100634 <__aeabi_i2d>
 81016b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016b8:	f7ff f950 	bl	810095c <__aeabi_ddiv>
 81016bc:	4602      	mov	r2, r0
 81016be:	460b      	mov	r3, r1
 81016c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 81016c4:	e03b      	b.n	810173e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81016c6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 81016ca:	021b      	lsls	r3, r3, #8
 81016cc:	b21a      	sxth	r2, r3
 81016ce:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 81016d2:	b21b      	sxth	r3, r3
 81016d4:	4313      	orrs	r3, r2
 81016d6:	b21b      	sxth	r3, r3
 81016d8:	4618      	mov	r0, r3
 81016da:	f7fe ffab 	bl	8100634 <__aeabi_i2d>
 81016de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016e2:	f7ff f93b 	bl	810095c <__aeabi_ddiv>
 81016e6:	4602      	mov	r2, r0
 81016e8:	460b      	mov	r3, r1
 81016ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81016ee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 81016f2:	021b      	lsls	r3, r3, #8
 81016f4:	b21a      	sxth	r2, r3
 81016f6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 81016fa:	b21b      	sxth	r3, r3
 81016fc:	4313      	orrs	r3, r2
 81016fe:	b21b      	sxth	r3, r3
 8101700:	4618      	mov	r0, r3
 8101702:	f7fe ff97 	bl	8100634 <__aeabi_i2d>
 8101706:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810170a:	f7ff f927 	bl	810095c <__aeabi_ddiv>
 810170e:	4602      	mov	r2, r0
 8101710:	460b      	mov	r3, r1
 8101712:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101716:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 810171a:	021b      	lsls	r3, r3, #8
 810171c:	b21a      	sxth	r2, r3
 810171e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101722:	b21b      	sxth	r3, r3
 8101724:	4313      	orrs	r3, r2
 8101726:	b21b      	sxth	r3, r3
 8101728:	4618      	mov	r0, r3
 810172a:	f7fe ff83 	bl	8100634 <__aeabi_i2d>
 810172e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101732:	f7ff f913 	bl	810095c <__aeabi_ddiv>
 8101736:	4602      	mov	r2, r0
 8101738:	460b      	mov	r3, r1
 810173a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 810173e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101742:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810174a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810174e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101752:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101756:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 810175a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 810175e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8101762:	ec49 8b14 	vmov	d4, r8, r9
 8101766:	ec45 4b15 	vmov	d5, r4, r5
 810176a:	ec41 0b16 	vmov	d6, r0, r1
 810176e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101772:	eeb0 0a44 	vmov.f32	s0, s8
 8101776:	eef0 0a64 	vmov.f32	s1, s9
 810177a:	eeb0 1a45 	vmov.f32	s2, s10
 810177e:	eef0 1a65 	vmov.f32	s3, s11
 8101782:	eeb0 2a46 	vmov.f32	s4, s12
 8101786:	eef0 2a66 	vmov.f32	s5, s13
 810178a:	eeb0 3a47 	vmov.f32	s6, s14
 810178e:	eef0 3a67 	vmov.f32	s7, s15
 8101792:	3778      	adds	r7, #120	@ 0x78
 8101794:	46bd      	mov	sp, r7
 8101796:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810179a:	bf00      	nop
 810179c:	3ff00000 	.word	0x3ff00000
 81017a0:	1000000e 	.word	0x1000000e
 81017a4:	10000008 	.word	0x10000008
 81017a8:	1000000a 	.word	0x1000000a
 81017ac:	1000000c 	.word	0x1000000c
 81017b0:	10000010 	.word	0x10000010

081017b4 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 81017b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81017b8:	b090      	sub	sp, #64	@ 0x40
 81017ba:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81017bc:	201a      	movs	r0, #26
 81017be:	f7ff feb5 	bl	810152c <bno055_getVector>
 81017c2:	eeb0 4a40 	vmov.f32	s8, s0
 81017c6:	eef0 4a60 	vmov.f32	s9, s1
 81017ca:	eeb0 5a41 	vmov.f32	s10, s2
 81017ce:	eef0 5a61 	vmov.f32	s11, s3
 81017d2:	eeb0 6a42 	vmov.f32	s12, s4
 81017d6:	eef0 6a62 	vmov.f32	s13, s5
 81017da:	eeb0 7a43 	vmov.f32	s14, s6
 81017de:	eef0 7a63 	vmov.f32	s15, s7
 81017e2:	ed87 4b08 	vstr	d4, [r7, #32]
 81017e6:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 81017ea:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 81017ee:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 81017f2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 81017f6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 81017fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 81017fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101802:	ec49 8b14 	vmov	d4, r8, r9
 8101806:	ec45 4b15 	vmov	d5, r4, r5
 810180a:	ec41 0b16 	vmov	d6, r0, r1
 810180e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101812:	eeb0 0a44 	vmov.f32	s0, s8
 8101816:	eef0 0a64 	vmov.f32	s1, s9
 810181a:	eeb0 1a45 	vmov.f32	s2, s10
 810181e:	eef0 1a65 	vmov.f32	s3, s11
 8101822:	eeb0 2a46 	vmov.f32	s4, s12
 8101826:	eef0 2a66 	vmov.f32	s5, s13
 810182a:	eeb0 3a47 	vmov.f32	s6, s14
 810182e:	eef0 3a67 	vmov.f32	s7, s15
 8101832:	3740      	adds	r7, #64	@ 0x40
 8101834:	46bd      	mov	sp, r7
 8101836:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810183c <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810183c:	b480      	push	{r7}
 810183e:	b083      	sub	sp, #12
 8101840:	af00      	add	r7, sp, #0
 8101842:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101844:	4a04      	ldr	r2, [pc, #16]	@ (8101858 <bno055_assignI2C+0x1c>)
 8101846:	687b      	ldr	r3, [r7, #4]
 8101848:	6013      	str	r3, [r2, #0]
}
 810184a:	bf00      	nop
 810184c:	370c      	adds	r7, #12
 810184e:	46bd      	mov	sp, r7
 8101850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101854:	4770      	bx	lr
 8101856:	bf00      	nop
 8101858:	1000028c 	.word	0x1000028c

0810185c <bno055_delay>:

void bno055_delay(int time) {
 810185c:	b580      	push	{r7, lr}
 810185e:	b082      	sub	sp, #8
 8101860:	af00      	add	r7, sp, #0
 8101862:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	4618      	mov	r0, r3
 8101868:	f003 fa5e 	bl	8104d28 <HAL_Delay>
#endif
}
 810186c:	bf00      	nop
 810186e:	3708      	adds	r7, #8
 8101870:	46bd      	mov	sp, r7
 8101872:	bd80      	pop	{r7, pc}

08101874 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101874:	b580      	push	{r7, lr}
 8101876:	b088      	sub	sp, #32
 8101878:	af02      	add	r7, sp, #8
 810187a:	4603      	mov	r3, r0
 810187c:	460a      	mov	r2, r1
 810187e:	71fb      	strb	r3, [r7, #7]
 8101880:	4613      	mov	r3, r2
 8101882:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101884:	79fb      	ldrb	r3, [r7, #7]
 8101886:	733b      	strb	r3, [r7, #12]
 8101888:	79bb      	ldrb	r3, [r7, #6]
 810188a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810188c:	4b12      	ldr	r3, [pc, #72]	@ (81018d8 <bno055_writeData+0x64>)
 810188e:	6818      	ldr	r0, [r3, #0]
 8101890:	f107 020c 	add.w	r2, r7, #12
 8101894:	230a      	movs	r3, #10
 8101896:	9300      	str	r3, [sp, #0]
 8101898:	2302      	movs	r3, #2
 810189a:	2150      	movs	r1, #80	@ 0x50
 810189c:	f007 fd36 	bl	810930c <HAL_I2C_Master_Transmit>
 81018a0:	4603      	mov	r3, r0
 81018a2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81018a4:	7dfb      	ldrb	r3, [r7, #23]
 81018a6:	2b00      	cmp	r3, #0
 81018a8:	d010      	beq.n	81018cc <bno055_writeData+0x58>
    //printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
  } else {
    //printf("Unknown status data %d", status);
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 81018aa:	4b0b      	ldr	r3, [pc, #44]	@ (81018d8 <bno055_writeData+0x64>)
 81018ac:	681b      	ldr	r3, [r3, #0]
 81018ae:	4618      	mov	r0, r3
 81018b0:	f007 ff48 	bl	8109744 <HAL_I2C_GetError>
 81018b4:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 81018b6:	693b      	ldr	r3, [r7, #16]
 81018b8:	2b00      	cmp	r3, #0
 81018ba:	d009      	beq.n	81018d0 <bno055_writeData+0x5c>
    //printf("HAL_I2C_ERROR_DMA\r\n");
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
    //printf("HAL_I2C_ERROR_TIMEOUT\r\n");
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 81018bc:	4b06      	ldr	r3, [pc, #24]	@ (81018d8 <bno055_writeData+0x64>)
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	4618      	mov	r0, r3
 81018c2:	f007 ff31 	bl	8109728 <HAL_I2C_GetState>
 81018c6:	4603      	mov	r3, r0
 81018c8:	73fb      	strb	r3, [r7, #15]
 81018ca:	e002      	b.n	81018d2 <bno055_writeData+0x5e>
    return;
 81018cc:	bf00      	nop
 81018ce:	e000      	b.n	81018d2 <bno055_writeData+0x5e>
    return;
 81018d0:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 81018d2:	3718      	adds	r7, #24
 81018d4:	46bd      	mov	sp, r7
 81018d6:	bd80      	pop	{r7, pc}
 81018d8:	1000028c 	.word	0x1000028c

081018dc <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 81018dc:	b580      	push	{r7, lr}
 81018de:	b086      	sub	sp, #24
 81018e0:	af02      	add	r7, sp, #8
 81018e2:	4603      	mov	r3, r0
 81018e4:	6039      	str	r1, [r7, #0]
 81018e6:	71fb      	strb	r3, [r7, #7]
 81018e8:	4613      	mov	r3, r2
 81018ea:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 81018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8101924 <bno055_readData+0x48>)
 81018ee:	6818      	ldr	r0, [r3, #0]
 81018f0:	1dfa      	adds	r2, r7, #7
 81018f2:	2364      	movs	r3, #100	@ 0x64
 81018f4:	9300      	str	r3, [sp, #0]
 81018f6:	2301      	movs	r3, #1
 81018f8:	2150      	movs	r1, #80	@ 0x50
 81018fa:	f007 fd07 	bl	810930c <HAL_I2C_Master_Transmit>
 81018fe:	4603      	mov	r3, r0
 8101900:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101902:	4b08      	ldr	r3, [pc, #32]	@ (8101924 <bno055_readData+0x48>)
 8101904:	6818      	ldr	r0, [r3, #0]
 8101906:	79bb      	ldrb	r3, [r7, #6]
 8101908:	b29b      	uxth	r3, r3
 810190a:	2264      	movs	r2, #100	@ 0x64
 810190c:	9200      	str	r2, [sp, #0]
 810190e:	683a      	ldr	r2, [r7, #0]
 8101910:	2150      	movs	r1, #80	@ 0x50
 8101912:	f007 fe13 	bl	810953c <HAL_I2C_Master_Receive>
 8101916:	4603      	mov	r3, r0
 8101918:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 810191a:	7bfb      	ldrb	r3, [r7, #15]
 810191c:	2b00      	cmp	r3, #0
	  } else {
	    //printf("Unknown status data %d", ret);
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810191e:	3710      	adds	r7, #16
 8101920:	46bd      	mov	sp, r7
 8101922:	bd80      	pop	{r7, pc}
 8101924:	1000028c 	.word	0x1000028c

08101928 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101928:	b580      	push	{r7, lr}
 810192a:	b084      	sub	sp, #16
 810192c:	af00      	add	r7, sp, #0
 810192e:	4603      	mov	r3, r0
 8101930:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101932:	f107 030f 	add.w	r3, r7, #15
 8101936:	2201      	movs	r2, #1
 8101938:	4619      	mov	r1, r3
 810193a:	203e      	movs	r0, #62	@ 0x3e
 810193c:	f7ff ffce 	bl	81018dc <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101940:	7bfb      	ldrb	r3, [r7, #15]
 8101942:	f023 0303 	bic.w	r3, r3, #3
 8101946:	b2db      	uxtb	r3, r3
 8101948:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810194a:	7bfa      	ldrb	r2, [r7, #15]
 810194c:	79fb      	ldrb	r3, [r7, #7]
 810194e:	4313      	orrs	r3, r2
 8101950:	b2db      	uxtb	r3, r3
 8101952:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101954:	7bfb      	ldrb	r3, [r7, #15]
 8101956:	4619      	mov	r1, r3
 8101958:	203e      	movs	r0, #62	@ 0x3e
 810195a:	f7ff ff8b 	bl	8101874 <bno055_writeData>
}
 810195e:	bf00      	nop
 8101960:	3710      	adds	r7, #16
 8101962:	46bd      	mov	sp, r7
 8101964:	bd80      	pop	{r7, pc}

08101966 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 8101966:	b580      	push	{r7, lr}
 8101968:	b082      	sub	sp, #8
 810196a:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 810196c:	1dfb      	adds	r3, r7, #7
 810196e:	2201      	movs	r2, #1
 8101970:	4619      	mov	r1, r3
 8101972:	203e      	movs	r0, #62	@ 0x3e
 8101974:	f7ff ffb2 	bl	81018dc <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 8101978:	79fb      	ldrb	r3, [r7, #7]
 810197a:	f003 0303 	and.w	r3, r3, #3
 810197e:	b2db      	uxtb	r3, r3
 8101980:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 8101982:	79fb      	ldrb	r3, [r7, #7]
}
 8101984:	4618      	mov	r0, r3
 8101986:	3708      	adds	r7, #8
 8101988:	46bd      	mov	sp, r7
 810198a:	bd80      	pop	{r7, pc}

0810198c <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 810198c:	b580      	push	{r7, lr}
 810198e:	b084      	sub	sp, #16
 8101990:	af00      	add	r7, sp, #0
 8101992:	60f8      	str	r0, [r7, #12]
 8101994:	60b9      	str	r1, [r7, #8]
 8101996:	607a      	str	r2, [r7, #4]
 8101998:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 810199a:	68f8      	ldr	r0, [r7, #12]
 810199c:	68bb      	ldr	r3, [r7, #8]
 810199e:	2202      	movs	r2, #2
 81019a0:	2102      	movs	r1, #2
 81019a2:	f00f fcd3 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 81019a6:	68fb      	ldr	r3, [r7, #12]
 81019a8:	f103 0008 	add.w	r0, r3, #8
 81019ac:	687b      	ldr	r3, [r7, #4]
 81019ae:	2201      	movs	r2, #1
 81019b0:	2102      	movs	r1, #2
 81019b2:	f00f fccb 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 81019b6:	68fb      	ldr	r3, [r7, #12]
 81019b8:	f103 0010 	add.w	r0, r3, #16
 81019bc:	683b      	ldr	r3, [r7, #0]
 81019be:	2202      	movs	r2, #2
 81019c0:	2102      	movs	r1, #2
 81019c2:	f00f fcc3 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 81019c6:	68fb      	ldr	r3, [r7, #12]
 81019c8:	f103 0018 	add.w	r0, r3, #24
 81019cc:	69bb      	ldr	r3, [r7, #24]
 81019ce:	2202      	movs	r2, #2
 81019d0:	2102      	movs	r1, #2
 81019d2:	f00f fcbb 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 81019d6:	68fb      	ldr	r3, [r7, #12]
 81019d8:	f103 0020 	add.w	r0, r3, #32
 81019dc:	69fb      	ldr	r3, [r7, #28]
 81019de:	2202      	movs	r2, #2
 81019e0:	2102      	movs	r1, #2
 81019e2:	f00f fcb3 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 81019e6:	68fb      	ldr	r3, [r7, #12]
 81019e8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 81019ec:	6a3b      	ldr	r3, [r7, #32]
 81019ee:	2202      	movs	r2, #2
 81019f0:	2102      	movs	r1, #2
 81019f2:	f00f fcab 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 81019f6:	68fb      	ldr	r3, [r7, #12]
 81019f8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 81019fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81019fe:	2201      	movs	r2, #1
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00f fca3 	bl	811134c <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8101a0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a10:	2202      	movs	r2, #2
 8101a12:	2102      	movs	r1, #2
 8101a14:	f00f fc9a 	bl	811134c <arm_mat_init_f32>

}
 8101a18:	bf00      	nop
 8101a1a:	3710      	adds	r7, #16
 8101a1c:	46bd      	mov	sp, r7
 8101a1e:	bd80      	pop	{r7, pc}

08101a20 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101a20:	b580      	push	{r7, lr}
 8101a22:	b09c      	sub	sp, #112	@ 0x70
 8101a24:	af00      	add	r7, sp, #0
 8101a26:	6078      	str	r0, [r7, #4]
 8101a28:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 8101a2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a2e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101a32:	2201      	movs	r2, #1
 8101a34:	2102      	movs	r1, #2
 8101a36:	f00f fc89 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 8101a3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101a3e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101a42:	2201      	movs	r2, #1
 8101a44:	2102      	movs	r1, #2
 8101a46:	f00f fc81 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 8101a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a4e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101a52:	2202      	movs	r2, #2
 8101a54:	2102      	movs	r1, #2
 8101a56:	f00f fc79 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 8101a5a:	f107 0318 	add.w	r3, r7, #24
 8101a5e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101a62:	2202      	movs	r2, #2
 8101a64:	2102      	movs	r1, #2
 8101a66:	f00f fc71 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 8101a6a:	f107 0308 	add.w	r3, r7, #8
 8101a6e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101a72:	2202      	movs	r2, #2
 8101a74:	2102      	movs	r1, #2
 8101a76:	f00f fc69 	bl	811134c <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 8101a7a:	6878      	ldr	r0, [r7, #4]
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	3338      	adds	r3, #56	@ 0x38
 8101a80:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101a84:	4619      	mov	r1, r3
 8101a86:	f00f fabb 	bl	8111000 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 8101a8a:	687b      	ldr	r3, [r7, #4]
 8101a8c:	3308      	adds	r3, #8
 8101a8e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101a92:	6839      	ldr	r1, [r7, #0]
 8101a94:	4618      	mov	r0, r3
 8101a96:	f00f fab3 	bl	8111000 <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101aa0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101aa4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101aa8:	4618      	mov	r0, r3
 8101aaa:	f00f fc53 	bl	8111354 <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 8101aae:	6878      	ldr	r0, [r7, #4]
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	3328      	adds	r3, #40	@ 0x28
 8101ab4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101ab8:	4619      	mov	r1, r3
 8101aba:	f00f faa1 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8101ac4:	4611      	mov	r1, r2
 8101ac6:	4618      	mov	r0, r3
 8101ac8:	f00f f9d4 	bl	8110e74 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 8101acc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8101ad0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101ad4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101ad8:	4618      	mov	r0, r3
 8101ada:	f00f fa91 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	f103 0118 	add.w	r1, r3, #24
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101aea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101aee:	4618      	mov	r0, r3
 8101af0:	f00f fc30 	bl	8111354 <arm_mat_add_f32>


}
 8101af4:	bf00      	nop
 8101af6:	3770      	adds	r7, #112	@ 0x70
 8101af8:	46bd      	mov	sp, r7
 8101afa:	bd80      	pop	{r7, pc}

08101afc <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 8101afc:	b580      	push	{r7, lr}
 8101afe:	b0dc      	sub	sp, #368	@ 0x170
 8101b00:	af00      	add	r7, sp, #0
 8101b02:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b06:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b0a:	6018      	str	r0, [r3, #0]
 8101b0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b10:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101b14:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 8101b16:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8101b1a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8101b1e:	2202      	movs	r2, #2
 8101b20:	2102      	movs	r1, #2
 8101b22:	f00f fc13 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101b26:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101b2a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101b2e:	2202      	movs	r2, #2
 8101b30:	2102      	movs	r1, #2
 8101b32:	f00f fc0b 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101b36:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101b3a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101b3e:	2202      	movs	r2, #2
 8101b40:	2102      	movs	r1, #2
 8101b42:	f00f fc03 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101b46:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101b4a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101b4e:	2202      	movs	r2, #2
 8101b50:	2102      	movs	r1, #2
 8101b52:	f00f fbfb 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101b56:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101b5a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101b5e:	2202      	movs	r2, #2
 8101b60:	2102      	movs	r1, #2
 8101b62:	f00f fbf3 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101b66:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101b6a:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101b6e:	2202      	movs	r2, #2
 8101b70:	2102      	movs	r1, #2
 8101b72:	f00f fbeb 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101b76:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101b7a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101b7e:	2202      	movs	r2, #2
 8101b80:	2102      	movs	r1, #2
 8101b82:	f00f fbe3 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101b86:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101b8a:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101b8e:	2202      	movs	r2, #2
 8101b90:	2102      	movs	r1, #2
 8101b92:	f00f fbdb 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101b96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101b9a:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101b9e:	2202      	movs	r2, #2
 8101ba0:	2102      	movs	r1, #2
 8101ba2:	f00f fbd3 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101ba6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101baa:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101bae:	2202      	movs	r2, #2
 8101bb0:	2102      	movs	r1, #2
 8101bb2:	f00f fbcb 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101bb6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101bba:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101bbe:	2202      	movs	r2, #2
 8101bc0:	2102      	movs	r1, #2
 8101bc2:	f00f fbc3 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101bc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101bca:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101bce:	2202      	movs	r2, #2
 8101bd0:	2102      	movs	r1, #2
 8101bd2:	f00f fbbb 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101bd6:	f107 0320 	add.w	r3, r7, #32
 8101bda:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101bde:	2202      	movs	r2, #2
 8101be0:	2102      	movs	r1, #2
 8101be2:	f00f fbb3 	bl	811134c <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101be6:	f107 0318 	add.w	r3, r7, #24
 8101bea:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101bee:	2201      	movs	r2, #1
 8101bf0:	2102      	movs	r1, #2
 8101bf2:	f00f fbab 	bl	811134c <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101bf6:	f107 0310 	add.w	r3, r7, #16
 8101bfa:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101bfe:	2201      	movs	r2, #1
 8101c00:	2102      	movs	r1, #2
 8101c02:	f00f fba3 	bl	811134c <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101c06:	f107 0308 	add.w	r3, r7, #8
 8101c0a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101c0e:	2201      	movs	r2, #1
 8101c10:	2102      	movs	r1, #2
 8101c12:	f00f fb9b 	bl	811134c <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101c16:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	3310      	adds	r3, #16
 8101c22:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101c26:	4611      	mov	r1, r2
 8101c28:	4618      	mov	r0, r3
 8101c2a:	f00f f923 	bl	8110e74 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101c2e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c32:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c36:	681b      	ldr	r3, [r3, #0]
 8101c38:	3328      	adds	r3, #40	@ 0x28
 8101c3a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101c3e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101c42:	4618      	mov	r0, r3
 8101c44:	f00f f9dc 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101c48:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c50:	681b      	ldr	r3, [r3, #0]
 8101c52:	3310      	adds	r3, #16
 8101c54:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101c58:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101c5c:	4618      	mov	r0, r3
 8101c5e:	f00f f9cf 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101c62:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c6a:	681b      	ldr	r3, [r3, #0]
 8101c6c:	f103 0120 	add.w	r1, r3, #32
 8101c70:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101c74:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101c78:	4618      	mov	r0, r3
 8101c7a:	f00f fb6b 	bl	8111354 <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101c7e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101c82:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101c86:	4611      	mov	r1, r2
 8101c88:	4618      	mov	r0, r3
 8101c8a:	f00f fa59 	bl	8111140 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101c8e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c92:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c96:	681b      	ldr	r3, [r3, #0]
 8101c98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101c9c:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101ca0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101ca4:	4618      	mov	r0, r3
 8101ca6:	f00f f9ab 	bl	8111000 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101caa:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cb2:	681b      	ldr	r3, [r3, #0]
 8101cb4:	f103 0010 	add.w	r0, r3, #16
 8101cb8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cbc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cc0:	681b      	ldr	r3, [r3, #0]
 8101cc2:	3338      	adds	r3, #56	@ 0x38
 8101cc4:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101cc8:	4619      	mov	r1, r3
 8101cca:	f00f f999 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101cce:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101cd2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101cd6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cda:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101cde:	6818      	ldr	r0, [r3, #0]
 8101ce0:	f00f f924 	bl	8110f2c <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101ce4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ce8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	3330      	adds	r3, #48	@ 0x30
 8101cf0:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101cf4:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101cf8:	4618      	mov	r0, r3
 8101cfa:	f00f f981 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101cfe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101d0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101d1a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101d1e:	4619      	mov	r1, r3
 8101d20:	f00f fb18 	bl	8111354 <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101d24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	3310      	adds	r3, #16
 8101d30:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101d34:	4611      	mov	r1, r2
 8101d36:	4618      	mov	r0, r3
 8101d38:	f00f f89c 	bl	8110e74 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101d3c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d40:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d44:	681b      	ldr	r3, [r3, #0]
 8101d46:	3328      	adds	r3, #40	@ 0x28
 8101d48:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101d4c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101d50:	4618      	mov	r0, r3
 8101d52:	f00f f955 	bl	8111000 <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101d56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d5e:	681b      	ldr	r3, [r3, #0]
 8101d60:	3330      	adds	r3, #48	@ 0x30
 8101d62:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101d66:	4611      	mov	r1, r2
 8101d68:	4618      	mov	r0, r3
 8101d6a:	f00f f883 	bl	8110e74 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101d6e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101d72:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101d76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101d7a:	4618      	mov	r0, r3
 8101d7c:	f00f f940 	bl	8111000 <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101d80:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d84:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	f103 0010 	add.w	r0, r3, #16
 8101d8e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d92:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d96:	681b      	ldr	r3, [r3, #0]
 8101d98:	3328      	adds	r3, #40	@ 0x28
 8101d9a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101d9e:	4619      	mov	r1, r3
 8101da0:	f00f f92e 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101da4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101da8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dac:	681b      	ldr	r3, [r3, #0]
 8101dae:	3330      	adds	r3, #48	@ 0x30
 8101db0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101db4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101db8:	4618      	mov	r0, r3
 8101dba:	f00f f921 	bl	8111000 <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101dbe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dc2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dc6:	681b      	ldr	r3, [r3, #0]
 8101dc8:	f103 0010 	add.w	r0, r3, #16
 8101dcc:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dd0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	3328      	adds	r3, #40	@ 0x28
 8101dd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101ddc:	4619      	mov	r1, r3
 8101dde:	f00f f90f 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101de2:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101de6:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101dee:	4618      	mov	r0, r3
 8101df0:	f00f f906 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101df4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101df8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dfc:	681b      	ldr	r3, [r3, #0]
 8101dfe:	f103 0120 	add.w	r1, r3, #32
 8101e02:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101e06:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101e0a:	4618      	mov	r0, r3
 8101e0c:	f00f faa2 	bl	8111354 <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101e10:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e14:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e18:	681b      	ldr	r3, [r3, #0]
 8101e1a:	3330      	adds	r3, #48	@ 0x30
 8101e1c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101e20:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101e24:	4618      	mov	r0, r3
 8101e26:	f00f f8eb 	bl	8111000 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101e2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e2e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101e36:	4618      	mov	r0, r3
 8101e38:	f00f f8e2 	bl	8111000 <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101e3c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e40:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e44:	681b      	ldr	r3, [r3, #0]
 8101e46:	3328      	adds	r3, #40	@ 0x28
 8101e48:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101e4c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101e50:	4618      	mov	r0, r3
 8101e52:	f00f f86b 	bl	8110f2c <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101e56:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101e5a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101e5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101e62:	4618      	mov	r0, r3
 8101e64:	f00f f862 	bl	8110f2c <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101e68:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e6c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e70:	681b      	ldr	r3, [r3, #0]
 8101e72:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101e76:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101e7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101e7e:	4618      	mov	r0, r3
 8101e80:	f00f fa68 	bl	8111354 <arm_mat_add_f32>


}
 8101e84:	bf00      	nop
 8101e86:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101e8a:	46bd      	mov	sp, r7
 8101e8c:	bd80      	pop	{r7, pc}

08101e8e <voltToAmpere>:

	// Restituisci la media mobile
	return somma / count;
}

float voltToAmpere(float Volt, float a, float b) {
 8101e8e:	b480      	push	{r7}
 8101e90:	b087      	sub	sp, #28
 8101e92:	af00      	add	r7, sp, #0
 8101e94:	ed87 0a03 	vstr	s0, [r7, #12]
 8101e98:	edc7 0a02 	vstr	s1, [r7, #8]
 8101e9c:	ed87 1a01 	vstr	s2, [r7, #4]
	//float ampere = (Volt-2.47)/0.22;  //a3b RESISTENZA
	//float ampere = Volt*1.25994074 - 3.1119; //a3b MOTORE
	//float ampere = (Volt -2.53)/0.8 + 0.095 + 0.065 + 0.07 ;
	float ampere = (Volt - b) / a;
 8101ea0:	ed97 7a03 	vldr	s14, [r7, #12]
 8101ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8101ea8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8101eac:	ed97 7a02 	vldr	s14, [r7, #8]
 8101eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101eb4:	edc7 7a05 	vstr	s15, [r7, #20]

	//float ampere = 2.3*Volt - 5.75;   //a4b DA RIVEDERE
	//float ampere = (Volt-2.48)/0.185; //sensore ACS712 05b
	return ampere;
 8101eb8:	697b      	ldr	r3, [r7, #20]
 8101eba:	ee07 3a90 	vmov	s15, r3
}
 8101ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8101ec2:	371c      	adds	r7, #28
 8101ec4:	46bd      	mov	sp, r7
 8101ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eca:	4770      	bx	lr

08101ecc <getSpeed>:
	return ((float) rand() / RAND_MAX) * (max - min) + min;
}

//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101ecc:	b480      	push	{r7}
 8101ece:	b085      	sub	sp, #20
 8101ed0:	af00      	add	r7, sp, #0
 8101ed2:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 2; //secondi di rampa
 8101ed6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8101eda:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101edc:	4b11      	ldr	r3, [pc, #68]	@ (8101f24 <getSpeed+0x58>)
 8101ede:	edd3 7a00 	vldr	s15, [r3]
 8101ee2:	ed97 7a01 	vldr	s14, [r7, #4]
 8101ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101eee:	d50f      	bpl.n	8101f10 <getSpeed+0x44>
		return actual_speed + speed * dt / ramp_time;
 8101ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8101f24 <getSpeed+0x58>)
 8101ef2:	edd3 7a00 	vldr	s15, [r3]
 8101ef6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8101f28 <getSpeed+0x5c>
 8101efa:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8101f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8101f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f0e:	e002      	b.n	8101f16 <getSpeed+0x4a>
	} else
		return speed;
 8101f10:	4b04      	ldr	r3, [pc, #16]	@ (8101f24 <getSpeed+0x58>)
 8101f12:	edd3 7a00 	vldr	s15, [r3]
}
 8101f16:	eeb0 0a67 	vmov.f32	s0, s15
 8101f1a:	3714      	adds	r7, #20
 8101f1c:	46bd      	mov	sp, r7
 8101f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f22:	4770      	bx	lr
 8101f24:	10000014 	.word	0x10000014
 8101f28:	3c23d70a 	.word	0x3c23d70a

08101f2c <filtro_media_mobile>:
//******************
// FUNZIONE PER IL FILTRO A MEDIA MOBILE
float filtro_media_mobile(float *vettorenuovo, float *vettorevecchio,
		float nuovamisurazione, int dimensione) {
 8101f2c:	b480      	push	{r7}
 8101f2e:	b089      	sub	sp, #36	@ 0x24
 8101f30:	af00      	add	r7, sp, #0
 8101f32:	60f8      	str	r0, [r7, #12]
 8101f34:	60b9      	str	r1, [r7, #8]
 8101f36:	ed87 0a01 	vstr	s0, [r7, #4]
 8101f3a:	603a      	str	r2, [r7, #0]
	vettorenuovo[0] = nuovamisurazione;
 8101f3c:	68fb      	ldr	r3, [r7, #12]
 8101f3e:	687a      	ldr	r2, [r7, #4]
 8101f40:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101f42:	2300      	movs	r3, #0
 8101f44:	61fb      	str	r3, [r7, #28]
 8101f46:	e00d      	b.n	8101f64 <filtro_media_mobile+0x38>
		vettorenuovo[i + 1] = vettorevecchio[i]; // dal 2 al n-1 esimo valore si ricopiano i valori vecchi
 8101f48:	69fb      	ldr	r3, [r7, #28]
 8101f4a:	009b      	lsls	r3, r3, #2
 8101f4c:	68ba      	ldr	r2, [r7, #8]
 8101f4e:	441a      	add	r2, r3
 8101f50:	69fb      	ldr	r3, [r7, #28]
 8101f52:	3301      	adds	r3, #1
 8101f54:	009b      	lsls	r3, r3, #2
 8101f56:	68f9      	ldr	r1, [r7, #12]
 8101f58:	440b      	add	r3, r1
 8101f5a:	6812      	ldr	r2, [r2, #0]
 8101f5c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101f5e:	69fb      	ldr	r3, [r7, #28]
 8101f60:	3301      	adds	r3, #1
 8101f62:	61fb      	str	r3, [r7, #28]
 8101f64:	683b      	ldr	r3, [r7, #0]
 8101f66:	3b01      	subs	r3, #1
 8101f68:	69fa      	ldr	r2, [r7, #28]
 8101f6a:	429a      	cmp	r2, r3
 8101f6c:	dbec      	blt.n	8101f48 <filtro_media_mobile+0x1c>
	}

	float somma = 0;
 8101f6e:	f04f 0300 	mov.w	r3, #0
 8101f72:	61bb      	str	r3, [r7, #24]
	float media;
	for (int i = 0; i < dimensione; i++) {
 8101f74:	2300      	movs	r3, #0
 8101f76:	617b      	str	r3, [r7, #20]
 8101f78:	e018      	b.n	8101fac <filtro_media_mobile+0x80>
		vettorevecchio[i] = vettorenuovo[i]; //copia il vettore nuovo nel vecchio
 8101f7a:	697b      	ldr	r3, [r7, #20]
 8101f7c:	009b      	lsls	r3, r3, #2
 8101f7e:	68fa      	ldr	r2, [r7, #12]
 8101f80:	441a      	add	r2, r3
 8101f82:	697b      	ldr	r3, [r7, #20]
 8101f84:	009b      	lsls	r3, r3, #2
 8101f86:	68b9      	ldr	r1, [r7, #8]
 8101f88:	440b      	add	r3, r1
 8101f8a:	6812      	ldr	r2, [r2, #0]
 8101f8c:	601a      	str	r2, [r3, #0]
		somma += vettorenuovo[i];           //calcola la somma di tutti i valori
 8101f8e:	697b      	ldr	r3, [r7, #20]
 8101f90:	009b      	lsls	r3, r3, #2
 8101f92:	68fa      	ldr	r2, [r7, #12]
 8101f94:	4413      	add	r3, r2
 8101f96:	edd3 7a00 	vldr	s15, [r3]
 8101f9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8101f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101fa2:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < dimensione; i++) {
 8101fa6:	697b      	ldr	r3, [r7, #20]
 8101fa8:	3301      	adds	r3, #1
 8101faa:	617b      	str	r3, [r7, #20]
 8101fac:	697a      	ldr	r2, [r7, #20]
 8101fae:	683b      	ldr	r3, [r7, #0]
 8101fb0:	429a      	cmp	r2, r3
 8101fb2:	dbe2      	blt.n	8101f7a <filtro_media_mobile+0x4e>
		// printf("%f.3 vet ", vettorenuovo[i]);
	}

	media = somma / dimensione;
 8101fb4:	683b      	ldr	r3, [r7, #0]
 8101fb6:	ee07 3a90 	vmov	s15, r3
 8101fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101fbe:	edd7 6a06 	vldr	s13, [r7, #24]
 8101fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101fc6:	edc7 7a04 	vstr	s15, [r7, #16]
	return media;
 8101fca:	693b      	ldr	r3, [r7, #16]
 8101fcc:	ee07 3a90 	vmov	s15, r3
}
 8101fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8101fd4:	3724      	adds	r7, #36	@ 0x24
 8101fd6:	46bd      	mov	sp, r7
 8101fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fdc:	4770      	bx	lr
	...

08101fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101fe4:	b0cd      	sub	sp, #308	@ 0x134
 8101fe6:	af22      	add	r7, sp, #136	@ 0x88

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101fe8:	4b9e      	ldr	r3, [pc, #632]	@ (8102264 <main+0x284>)
 8101fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fee:	4a9d      	ldr	r2, [pc, #628]	@ (8102264 <main+0x284>)
 8101ff0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ff8:	4b9a      	ldr	r3, [pc, #616]	@ (8102264 <main+0x284>)
 8101ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102002:	673b      	str	r3, [r7, #112]	@ 0x70
 8102004:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102006:	2001      	movs	r0, #1
 8102008:	f007 f8d2 	bl	81091b0 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810200c:	f007 ff5e 	bl	8109ecc <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8102010:	2201      	movs	r2, #1
 8102012:	2102      	movs	r1, #2
 8102014:	2000      	movs	r0, #0
 8102016:	f007 fedf 	bl	8109dd8 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810201a:	4b93      	ldr	r3, [pc, #588]	@ (8102268 <main+0x288>)
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	091b      	lsrs	r3, r3, #4
 8102020:	f003 030f 	and.w	r3, r3, #15
 8102024:	2b07      	cmp	r3, #7
 8102026:	d108      	bne.n	810203a <main+0x5a>
 8102028:	4b90      	ldr	r3, [pc, #576]	@ (810226c <main+0x28c>)
 810202a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810202e:	4a8f      	ldr	r2, [pc, #572]	@ (810226c <main+0x28c>)
 8102030:	f043 0301 	orr.w	r3, r3, #1
 8102034:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8102038:	e007      	b.n	810204a <main+0x6a>
 810203a:	4b8c      	ldr	r3, [pc, #560]	@ (810226c <main+0x28c>)
 810203c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8102040:	4a8a      	ldr	r2, [pc, #552]	@ (810226c <main+0x28c>)
 8102042:	f043 0301 	orr.w	r3, r3, #1
 8102046:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810204a:	f002 fdb9 	bl	8104bc0 <HAL_Init>

  /* USER CODE BEGIN Init */
	MX_GPIO_Init();
 810204e:	f001 fdbb 	bl	8103bc8 <MX_GPIO_Init>
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */

	arm_fir_init_f32(&fir_instance, FIR_LENGHT, fir_coefficients, fir_state, 1);
 8102052:	2301      	movs	r3, #1
 8102054:	9300      	str	r3, [sp, #0]
 8102056:	4b86      	ldr	r3, [pc, #536]	@ (8102270 <main+0x290>)
 8102058:	4a86      	ldr	r2, [pc, #536]	@ (8102274 <main+0x294>)
 810205a:	2103      	movs	r1, #3
 810205c:	4886      	ldr	r0, [pc, #536]	@ (8102278 <main+0x298>)
 810205e:	f00f f9e3 	bl	8111428 <arm_fir_init_f32>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8102062:	f001 fd91 	bl	8103b88 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8102066:	f001 fcf7 	bl	8103a58 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 810206a:	f001 f98d 	bl	8103388 <MX_I2C1_Init>
  MX_TIM1_Init();
 810206e:	f001 f9cb 	bl	8103408 <MX_TIM1_Init>
  MX_TIM2_Init();
 8102072:	f001 fa75 	bl	8103560 <MX_TIM2_Init>
  MX_TIM4_Init();
 8102076:	f001 fb37 	bl	81036e8 <MX_TIM4_Init>
  MX_ADC1_Init();
 810207a:	f001 f8ff 	bl	810327c <MX_ADC1_Init>
  MX_TIM3_Init();
 810207e:	f001 fabd 	bl	81035fc <MX_TIM3_Init>
  MX_TIM8_Init();
 8102082:	f001 fbf5 	bl	8103870 <MX_TIM8_Init>
  MX_TIM6_Init();
 8102086:	f001 fb85 	bl	8103794 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 810208a:	f001 fc99 	bl	81039c0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 810208e:	f001 fbb9 	bl	8103804 <MX_TIM7_Init>
  MX_TIM12_Init();
 8102092:	f001 fc47 	bl	8103924 <MX_TIM12_Init>
  MX_USART6_UART_Init();
 8102096:	f001 fd2b 	bl	8103af0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 810209a:	4878      	ldr	r0, [pc, #480]	@ (810227c <main+0x29c>)
 810209c:	f00a fec2 	bl	810ce24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81020a0:	2100      	movs	r1, #0
 81020a2:	4877      	ldr	r0, [pc, #476]	@ (8102280 <main+0x2a0>)
 81020a4:	f00a ff98 	bl	810cfd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 81020a8:	2100      	movs	r1, #0
 81020aa:	4876      	ldr	r0, [pc, #472]	@ (8102284 <main+0x2a4>)
 81020ac:	f00a ff94 	bl	810cfd8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 81020b0:	4875      	ldr	r0, [pc, #468]	@ (8102288 <main+0x2a8>)
 81020b2:	f00a fe47 	bl	810cd44 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 81020b6:	4875      	ldr	r0, [pc, #468]	@ (810228c <main+0x2ac>)
 81020b8:	f00a fe44 	bl	810cd44 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim12);
 81020bc:	4874      	ldr	r0, [pc, #464]	@ (8102290 <main+0x2b0>)
 81020be:	f00a feb1 	bl	810ce24 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim6);
 81020c2:	4874      	ldr	r0, [pc, #464]	@ (8102294 <main+0x2b4>)
 81020c4:	f00a feae 	bl	810ce24 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1);
 81020c8:	2201      	movs	r2, #1
 81020ca:	4973      	ldr	r1, [pc, #460]	@ (8102298 <main+0x2b8>)
 81020cc:	4873      	ldr	r0, [pc, #460]	@ (810229c <main+0x2bc>)
 81020ce:	f00c fb81 	bl	810e7d4 <HAL_UART_Receive_IT>

	srand(1233);
 81020d2:	f240 40d1 	movw	r0, #1233	@ 0x4d1
 81020d6:	f00f f9b7 	bl	8111448 <srand>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 81020da:	4871      	ldr	r0, [pc, #452]	@ (81022a0 <main+0x2c0>)
 81020dc:	f7ff fbae 	bl	810183c <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 81020e0:	f7ff f9cd 	bl	810147e <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 81020e4:	2000      	movs	r0, #0
 81020e6:	f7ff fc1f 	bl	8101928 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 81020ea:	f7ff fc3c 	bl	8101966 <bno055_getPowerMode>
 81020ee:	4603      	mov	r3, r0
 81020f0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 81020f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 81020f8:	4619      	mov	r1, r3
 81020fa:	486a      	ldr	r0, [pc, #424]	@ (81022a4 <main+0x2c4>)
 81020fc:	f010 f900 	bl	8112300 <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 8102100:	f7ff f9aa 	bl	8101458 <bno055_setOperationModeNDOF>




	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 8102104:	f7ff f9d8 	bl	81014b8 <bno055_getCalibrationState>
 8102108:	4603      	mov	r3, r0
 810210a:	677b      	str	r3, [r7, #116]	@ 0x74
	//		cal.gyro, cal.accel, cal.mag, cal.sys);
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 810210c:	eddf 7a66 	vldr	s15, [pc, #408]	@ 81022a8 <main+0x2c8>
 8102110:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 8102114:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8102118:	eeb0 0a67 	vmov.f32	s0, s15
 810211c:	4863      	ldr	r0, [pc, #396]	@ (81022ac <main+0x2cc>)
 810211e:	f7ff f8d3 	bl	81012c8 <init_PID>
	tune_PID(&pid_speed, 14, 40, 0);
 8102122:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 81022b0 <main+0x2d0>
 8102126:	eddf 0a63 	vldr	s1, [pc, #396]	@ 81022b4 <main+0x2d4>
 810212a:	eeb2 0a0c 	vmov.f32	s0, #44	@ 0x41600000  14.0
 810212e:	485f      	ldr	r0, [pc, #380]	@ (81022ac <main+0x2cc>)
 8102130:	f7ff f8eb 	bl	810130a <tune_PID>
	//*************************

	init_PID(&pid_yaw_rate, dt, 45, -45);
 8102134:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 81022a8 <main+0x2c8>
 8102138:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 81022b8 <main+0x2d8>
 810213c:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 81022bc <main+0x2dc>
 8102140:	eeb0 0a67 	vmov.f32	s0, s15
 8102144:	485e      	ldr	r0, [pc, #376]	@ (81022c0 <main+0x2e0>)
 8102146:	f7ff f8bf 	bl	81012c8 <init_PID>
	tune_PID(&pid_yaw_rate, 1.1, 19, 0.12);
 810214a:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 81022c4 <main+0x2e4>
 810214e:	eef3 0a03 	vmov.f32	s1, #51	@ 0x41980000  19.0
 8102152:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 81022c8 <main+0x2e8>
 8102156:	485a      	ldr	r0, [pc, #360]	@ (81022c0 <main+0x2e0>)
 8102158:	f7ff f8d7 	bl	810130a <tune_PID>
	//*************************

	//PID angolo roll
	init_PID(&pid_roll, dt, 10 * K, -10 * K);
 810215c:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 81022a8 <main+0x2c8>
 8102160:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 81022cc <main+0x2ec>
 8102164:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8102168:	ee67 7a27 	vmul.f32	s15, s14, s15
 810216c:	eddf 6a57 	vldr	s13, [pc, #348]	@ 81022cc <main+0x2ec>
 8102170:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8102174:	ee26 7a87 	vmul.f32	s14, s13, s14
 8102178:	eeb0 1a47 	vmov.f32	s2, s14
 810217c:	eef0 0a67 	vmov.f32	s1, s15
 8102180:	eeb0 0a46 	vmov.f32	s0, s12
 8102184:	4852      	ldr	r0, [pc, #328]	@ (81022d0 <main+0x2f0>)
 8102186:	f7ff f89f 	bl	81012c8 <init_PID>


	//ULTIMO PID ROLL ATTIVO tune_PID(0.00015*1.5,0,0.00015*2*2);
	//nuovo pid roll
	roll_kp = 0.00015*2.5;
 810218a:	4b52      	ldr	r3, [pc, #328]	@ (81022d4 <main+0x2f4>)
 810218c:	4a52      	ldr	r2, [pc, #328]	@ (81022d8 <main+0x2f8>)
 810218e:	601a      	str	r2, [r3, #0]
	roll_ki =0;
 8102190:	4b52      	ldr	r3, [pc, #328]	@ (81022dc <main+0x2fc>)
 8102192:	f04f 0200 	mov.w	r2, #0
 8102196:	601a      	str	r2, [r3, #0]
	roll_kd= 0;
 8102198:	4b51      	ldr	r3, [pc, #324]	@ (81022e0 <main+0x300>)
 810219a:	f04f 0200 	mov.w	r2, #0
 810219e:	601a      	str	r2, [r3, #0]
	tune_PID(&pid_roll, roll_kp, roll_ki, roll_kd);
 81021a0:	4b4c      	ldr	r3, [pc, #304]	@ (81022d4 <main+0x2f4>)
 81021a2:	edd3 7a00 	vldr	s15, [r3]
 81021a6:	4b4d      	ldr	r3, [pc, #308]	@ (81022dc <main+0x2fc>)
 81021a8:	ed93 7a00 	vldr	s14, [r3]
 81021ac:	4b4c      	ldr	r3, [pc, #304]	@ (81022e0 <main+0x300>)
 81021ae:	edd3 6a00 	vldr	s13, [r3]
 81021b2:	eeb0 1a66 	vmov.f32	s2, s13
 81021b6:	eef0 0a47 	vmov.f32	s1, s14
 81021ba:	eeb0 0a67 	vmov.f32	s0, s15
 81021be:	4844      	ldr	r0, [pc, #272]	@ (81022d0 <main+0x2f0>)
 81021c0:	f7ff f8a3 	bl	810130a <tune_PID>
	//tune_PID(&pid_roll, 0.00015,0.00012/400,0.00012*225*10*3*5);
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 81021c4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 81022a8 <main+0x2c8>
 81021c8:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 81021cc:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 81021d0:	eeb0 0a67 	vmov.f32	s0, s15
 81021d4:	4843      	ldr	r0, [pc, #268]	@ (81022e4 <main+0x304>)
 81021d6:	f7ff f877 	bl	81012c8 <init_PID>

	//tune_PID(&pid_steering_torque, 30000*4, 20000 * 2, 0); // migliore pid che mantiene l'equilibrio

	//*************************
	//nuovi tentativi
	tune_PID(&pid_steering_torque,30000,5000,10000); // migliore con roll_pid_attuale
 81021da:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 81022e8 <main+0x308>
 81021de:	eddf 0a43 	vldr	s1, [pc, #268]	@ 81022ec <main+0x30c>
 81021e2:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 81022f0 <main+0x310>
 81021e6:	483f      	ldr	r0, [pc, #252]	@ (81022e4 <main+0x304>)
 81021e8:	f7ff f88f 	bl	810130a <tune_PID>


	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 81021ec:	4b41      	ldr	r3, [pc, #260]	@ (81022f4 <main+0x314>)
 81021ee:	2201      	movs	r2, #1
 81021f0:	2101      	movs	r1, #1
 81021f2:	4841      	ldr	r0, [pc, #260]	@ (81022f8 <main+0x318>)
 81021f4:	f00f f8aa 	bl	811134c <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 81021f8:	4b40      	ldr	r3, [pc, #256]	@ (81022fc <main+0x31c>)
 81021fa:	2201      	movs	r2, #1
 81021fc:	2102      	movs	r1, #2
 81021fe:	4840      	ldr	r0, [pc, #256]	@ (8102300 <main+0x320>)
 8102200:	f00f f8a4 	bl	811134c <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 8102204:	4b3f      	ldr	r3, [pc, #252]	@ (8102304 <main+0x324>)
 8102206:	9304      	str	r3, [sp, #16]
 8102208:	4b3f      	ldr	r3, [pc, #252]	@ (8102308 <main+0x328>)
 810220a:	9303      	str	r3, [sp, #12]
 810220c:	4b3f      	ldr	r3, [pc, #252]	@ (810230c <main+0x32c>)
 810220e:	9302      	str	r3, [sp, #8]
 8102210:	4b3f      	ldr	r3, [pc, #252]	@ (8102310 <main+0x330>)
 8102212:	9301      	str	r3, [sp, #4]
 8102214:	4b3f      	ldr	r3, [pc, #252]	@ (8102314 <main+0x334>)
 8102216:	9300      	str	r3, [sp, #0]
 8102218:	4b3f      	ldr	r3, [pc, #252]	@ (8102318 <main+0x338>)
 810221a:	4a40      	ldr	r2, [pc, #256]	@ (810231c <main+0x33c>)
 810221c:	4940      	ldr	r1, [pc, #256]	@ (8102320 <main+0x340>)
 810221e:	4841      	ldr	r0, [pc, #260]	@ (8102324 <main+0x344>)
 8102220:	f7ff fbb4 	bl	810198c <kalman_filter_init>
			&P_data, &K_data, &x_data);
	u_data[0] = (-dt * lambda * b / (1 - dt * lambda));
 8102224:	eddf 7a20 	vldr	s15, [pc, #128]	@ 81022a8 <main+0x2c8>
 8102228:	eef1 7a67 	vneg.f32	s15, s15
 810222c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8102328 <main+0x348>
 8102230:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102234:	4b3d      	ldr	r3, [pc, #244]	@ (810232c <main+0x34c>)
 8102236:	edd3 7a00 	vldr	s15, [r3]
 810223a:	ee67 6a27 	vmul.f32	s13, s14, s15
 810223e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 81022a8 <main+0x2c8>
 8102242:	eddf 7a39 	vldr	s15, [pc, #228]	@ 8102328 <main+0x348>
 8102246:	ee67 7a27 	vmul.f32	s15, s14, s15
 810224a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810224e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102256:	4b27      	ldr	r3, [pc, #156]	@ (81022f4 <main+0x314>)
 8102258:	edc3 7a00 	vstr	s15, [r3]
	//u_data[0]=b;
	//*************************

	//SETTO D PER LE MISURE DELL'ADC
	for(int op = 0; op<4; op++)
 810225c:	2300      	movs	r3, #0
 810225e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102262:	e0a3      	b.n	81023ac <main+0x3cc>
 8102264:	58024400 	.word	0x58024400
 8102268:	e000ed00 	.word	0xe000ed00
 810226c:	58026400 	.word	0x58026400
 8102270:	1000d370 	.word	0x1000d370
 8102274:	10000090 	.word	0x10000090
 8102278:	1000d364 	.word	0x1000d364
 810227c:	10000394 	.word	0x10000394
 8102280:	10000348 	.word	0x10000348
 8102284:	100003e0 	.word	0x100003e0
 8102288:	1000042c 	.word	0x1000042c
 810228c:	10000510 	.word	0x10000510
 8102290:	1000055c 	.word	0x1000055c
 8102294:	10000478 	.word	0x10000478
 8102298:	1000d290 	.word	0x1000d290
 810229c:	100005a8 	.word	0x100005a8
 81022a0:	100002f4 	.word	0x100002f4
 81022a4:	08115bb0 	.word	0x08115bb0
 81022a8:	3c23d70a 	.word	0x3c23d70a
 81022ac:	1000cf4c 	.word	0x1000cf4c
 81022b0:	00000000 	.word	0x00000000
 81022b4:	42200000 	.word	0x42200000
 81022b8:	c2340000 	.word	0xc2340000
 81022bc:	42340000 	.word	0x42340000
 81022c0:	1000cf6c 	.word	0x1000cf6c
 81022c4:	3df5c28f 	.word	0x3df5c28f
 81022c8:	3f8ccccd 	.word	0x3f8ccccd
 81022cc:	3cbfb15b 	.word	0x3cbfb15b
 81022d0:	1000cf8c 	.word	0x1000cf8c
 81022d4:	1000cfd8 	.word	0x1000cfd8
 81022d8:	39c49ba6 	.word	0x39c49ba6
 81022dc:	1000cfdc 	.word	0x1000cfdc
 81022e0:	1000cfe0 	.word	0x1000cfe0
 81022e4:	1000cfac 	.word	0x1000cfac
 81022e8:	461c4000 	.word	0x461c4000
 81022ec:	459c4000 	.word	0x459c4000
 81022f0:	46ea6000 	.word	0x46ea6000
 81022f4:	1000d350 	.word	0x1000d350
 81022f8:	1000d340 	.word	0x1000d340
 81022fc:	1000d354 	.word	0x1000d354
 8102300:	1000d348 	.word	0x1000d348
 8102304:	1000d338 	.word	0x1000d338
 8102308:	10000080 	.word	0x10000080
 810230c:	10000070 	.word	0x10000070
 8102310:	10000060 	.word	0x10000060
 8102314:	10000050 	.word	0x10000050
 8102318:	10000040 	.word	0x10000040
 810231c:	10000038 	.word	0x10000038
 8102320:	10000028 	.word	0x10000028
 8102324:	1000d2f8 	.word	0x1000d2f8
 8102328:	c96c3680 	.word	0xc96c3680
 810232c:	10000024 	.word	0x10000024
	{
		HAL_ADC_Start(&hadc1);
 8102330:	48bb      	ldr	r0, [pc, #748]	@ (8102620 <main+0x640>)
 8102332:	f003 f8fb 	bl	810552c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, timeout);
 8102336:	4bbb      	ldr	r3, [pc, #748]	@ (8102624 <main+0x644>)
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	4619      	mov	r1, r3
 810233c:	48b8      	ldr	r0, [pc, #736]	@ (8102620 <main+0x640>)
 810233e:	f003 f9f3 	bl	8105728 <HAL_ADC_PollForConversion>
		CountValue = HAL_ADC_GetValue(&hadc1);
 8102342:	48b7      	ldr	r0, [pc, #732]	@ (8102620 <main+0x640>)
 8102344:	f003 fae4 	bl	8105910 <HAL_ADC_GetValue>
 8102348:	ee07 0a90 	vmov	s15, r0
 810234c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102350:	4bb5      	ldr	r3, [pc, #724]	@ (8102628 <main+0x648>)
 8102352:	edc3 7a00 	vstr	s15, [r3]
		volt_D[op] = ((float) CountValue) * Vref / (resolution);
 8102356:	4bb4      	ldr	r3, [pc, #720]	@ (8102628 <main+0x648>)
 8102358:	ed93 7a00 	vldr	s14, [r3]
 810235c:	4bb3      	ldr	r3, [pc, #716]	@ (810262c <main+0x64c>)
 810235e:	edd3 7a00 	vldr	s15, [r3]
 8102362:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102366:	4bb2      	ldr	r3, [pc, #712]	@ (8102630 <main+0x650>)
 8102368:	ed93 7a00 	vldr	s14, [r3]
 810236c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102370:	4ab0      	ldr	r2, [pc, #704]	@ (8102634 <main+0x654>)
 8102372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8102376:	009b      	lsls	r3, r3, #2
 8102378:	4413      	add	r3, r2
 810237a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 810237e:	48a8      	ldr	r0, [pc, #672]	@ (8102620 <main+0x640>)
 8102380:	f003 f99e 	bl	81056c0 <HAL_ADC_Stop>
		sommaVolt +=volt_D[op];
 8102384:	4aab      	ldr	r2, [pc, #684]	@ (8102634 <main+0x654>)
 8102386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810238a:	009b      	lsls	r3, r3, #2
 810238c:	4413      	add	r3, r2
 810238e:	ed93 7a00 	vldr	s14, [r3]
 8102392:	4ba9      	ldr	r3, [pc, #676]	@ (8102638 <main+0x658>)
 8102394:	edd3 7a00 	vldr	s15, [r3]
 8102398:	ee77 7a27 	vadd.f32	s15, s14, s15
 810239c:	4ba6      	ldr	r3, [pc, #664]	@ (8102638 <main+0x658>)
 810239e:	edc3 7a00 	vstr	s15, [r3]
	for(int op = 0; op<4; op++)
 81023a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 81023a6:	3301      	adds	r3, #1
 81023a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81023ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 81023b0:	2b03      	cmp	r3, #3
 81023b2:	ddbd      	ble.n	8102330 <main+0x350>
	}



	//prendo 4 misurazione e faccio la media
	D = 1.68 - sommaVolt/4;
 81023b4:	4ba0      	ldr	r3, [pc, #640]	@ (8102638 <main+0x658>)
 81023b6:	edd3 7a00 	vldr	s15, [r3]
 81023ba:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 81023be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81023c2:	ee16 0a90 	vmov	r0, s13
 81023c6:	f7fe f947 	bl	8100658 <__aeabi_f2d>
 81023ca:	4602      	mov	r2, r0
 81023cc:	460b      	mov	r3, r1
 81023ce:	a190      	add	r1, pc, #576	@ (adr r1, 8102610 <main+0x630>)
 81023d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 81023d4:	f7fd ffe0 	bl	8100398 <__aeabi_dsub>
 81023d8:	4602      	mov	r2, r0
 81023da:	460b      	mov	r3, r1
 81023dc:	4610      	mov	r0, r2
 81023de:	4619      	mov	r1, r3
 81023e0:	f7fe fc8a 	bl	8100cf8 <__aeabi_d2f>
 81023e4:	4603      	mov	r3, r0
 81023e6:	4a95      	ldr	r2, [pc, #596]	@ (810263c <main+0x65c>)
 81023e8:	6013      	str	r3, [r2, #0]
	sommaVolt=0;
 81023ea:	4b93      	ldr	r3, [pc, #588]	@ (8102638 <main+0x658>)
 81023ec:	f04f 0200 	mov.w	r2, #0
 81023f0:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */


		//printf("Inizio \r\n");
		if (flag_Tc == 1) {
 81023f2:	4b93      	ldr	r3, [pc, #588]	@ (8102640 <main+0x660>)
 81023f4:	edd3 7a00 	vldr	s15, [r3]
 81023f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81023fc:	eef4 7a47 	vcmp.f32	s15, s14
 8102400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102404:	f040 869f 	bne.w	8103146 <main+0x1166>
			flag_Tc = 0;
 8102408:	4b8d      	ldr	r3, [pc, #564]	@ (8102640 <main+0x660>)
 810240a:	f04f 0200 	mov.w	r2, #0
 810240e:	601a      	str	r2, [r3, #0]
			//printf("1: %.3f\r\n", tempo_1ms);
			if ((tasto_premuto == 1) && (tasto_appena_premuto == 1)) {
 8102410:	4b8c      	ldr	r3, [pc, #560]	@ (8102644 <main+0x664>)
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	2b01      	cmp	r3, #1
 8102416:	d113      	bne.n	8102440 <main+0x460>
 8102418:	4b8b      	ldr	r3, [pc, #556]	@ (8102648 <main+0x668>)
 810241a:	681b      	ldr	r3, [r3, #0]
 810241c:	2b01      	cmp	r3, #1
 810241e:	d10f      	bne.n	8102440 <main+0x460>
				tempo_iniziale = n_ref * dt;
 8102420:	4b8a      	ldr	r3, [pc, #552]	@ (810264c <main+0x66c>)
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	ee07 3a90 	vmov	s15, r3
 8102428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810242c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8102650 <main+0x670>
 8102430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102434:	4b87      	ldr	r3, [pc, #540]	@ (8102654 <main+0x674>)
 8102436:	edc3 7a00 	vstr	s15, [r3]
				tasto_appena_premuto = 2;
 810243a:	4b83      	ldr	r3, [pc, #524]	@ (8102648 <main+0x668>)
 810243c:	2202      	movs	r2, #2
 810243e:	601a      	str	r2, [r3, #0]
			}

			if ((tasto_premuto == 1) && (tasto_appena_premuto == 2)) {
 8102440:	4b80      	ldr	r3, [pc, #512]	@ (8102644 <main+0x664>)
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	2b01      	cmp	r3, #1
 8102446:	d146      	bne.n	81024d6 <main+0x4f6>
 8102448:	4b7f      	ldr	r3, [pc, #508]	@ (8102648 <main+0x668>)
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	2b02      	cmp	r3, #2
 810244e:	d142      	bne.n	81024d6 <main+0x4f6>
				tempo_attuale = n_ref * dt;
 8102450:	4b7e      	ldr	r3, [pc, #504]	@ (810264c <main+0x66c>)
 8102452:	681b      	ldr	r3, [r3, #0]
 8102454:	ee07 3a90 	vmov	s15, r3
 8102458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810245c:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8102650 <main+0x670>
 8102460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102464:	4b7c      	ldr	r3, [pc, #496]	@ (8102658 <main+0x678>)
 8102466:	edc3 7a00 	vstr	s15, [r3]
				if (tempo_attuale - tempo_iniziale >= 3) {
 810246a:	4b7b      	ldr	r3, [pc, #492]	@ (8102658 <main+0x678>)
 810246c:	ed93 7a00 	vldr	s14, [r3]
 8102470:	4b78      	ldr	r3, [pc, #480]	@ (8102654 <main+0x674>)
 8102472:	edd3 7a00 	vldr	s15, [r3]
 8102476:	ee77 7a67 	vsub.f32	s15, s14, s15
 810247a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 810247e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102486:	db26      	blt.n	81024d6 <main+0x4f6>
					sys_started++;
 8102488:	4b74      	ldr	r3, [pc, #464]	@ (810265c <main+0x67c>)
 810248a:	681b      	ldr	r3, [r3, #0]
 810248c:	3301      	adds	r3, #1
 810248e:	4a73      	ldr	r2, [pc, #460]	@ (810265c <main+0x67c>)
 8102490:	6013      	str	r3, [r2, #0]

					if (sys_started == 1) {
 8102492:	4b72      	ldr	r3, [pc, #456]	@ (810265c <main+0x67c>)
 8102494:	681b      	ldr	r3, [r3, #0]
 8102496:	2b01      	cmp	r3, #1
 8102498:	d105      	bne.n	81024a6 <main+0x4c6>
						stadio = 0;
 810249a:	4b71      	ldr	r3, [pc, #452]	@ (8102660 <main+0x680>)
 810249c:	2200      	movs	r2, #0
 810249e:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 81024a0:	4b6a      	ldr	r3, [pc, #424]	@ (810264c <main+0x66c>)
 81024a2:	2200      	movs	r2, #0
 81024a4:	601a      	str	r2, [r3, #0]

					}
					if (sys_started == 2) {
 81024a6:	4b6d      	ldr	r3, [pc, #436]	@ (810265c <main+0x67c>)
 81024a8:	681b      	ldr	r3, [r3, #0]
 81024aa:	2b02      	cmp	r3, #2
 81024ac:	d109      	bne.n	81024c2 <main+0x4e2>
						stadio = 0;
 81024ae:	4b6c      	ldr	r3, [pc, #432]	@ (8102660 <main+0x680>)
 81024b0:	2200      	movs	r2, #0
 81024b2:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 81024b4:	4b65      	ldr	r3, [pc, #404]	@ (810264c <main+0x66c>)
 81024b6:	2200      	movs	r2, #0
 81024b8:	601a      	str	r2, [r3, #0]
						pid_roll.e_old=0;
 81024ba:	4b6a      	ldr	r3, [pc, #424]	@ (8102664 <main+0x684>)
 81024bc:	f04f 0200 	mov.w	r2, #0
 81024c0:	619a      	str	r2, [r3, #24]
					}
					if (sys_started == 3)
 81024c2:	4b66      	ldr	r3, [pc, #408]	@ (810265c <main+0x67c>)
 81024c4:	681b      	ldr	r3, [r3, #0]
 81024c6:	2b03      	cmp	r3, #3
 81024c8:	d102      	bne.n	81024d0 <main+0x4f0>
						sys_started = 0;
 81024ca:	4b64      	ldr	r3, [pc, #400]	@ (810265c <main+0x67c>)
 81024cc:	2200      	movs	r2, #0
 81024ce:	601a      	str	r2, [r3, #0]
					tasto_premuto = 0;
 81024d0:	4b5c      	ldr	r3, [pc, #368]	@ (8102644 <main+0x664>)
 81024d2:	2200      	movs	r2, #0
 81024d4:	601a      	str	r2, [r3, #0]
			//##             BNO055			     ##
			//#####################################
			//*******************************
			//printf("2: %.3f\r\n", tempo_1ms);

			eul = bno055_getVectorEuler();
 81024d6:	f7ff f96d 	bl	81017b4 <bno055_getVectorEuler>
 81024da:	eeb0 4a40 	vmov.f32	s8, s0
 81024de:	eef0 4a60 	vmov.f32	s9, s1
 81024e2:	eeb0 5a41 	vmov.f32	s10, s2
 81024e6:	eef0 5a61 	vmov.f32	s11, s3
 81024ea:	eeb0 6a42 	vmov.f32	s12, s4
 81024ee:	eef0 6a62 	vmov.f32	s13, s5
 81024f2:	eeb0 7a43 	vmov.f32	s14, s6
 81024f6:	eef0 7a63 	vmov.f32	s15, s7
 81024fa:	ed87 4b1e 	vstr	d4, [r7, #120]	@ 0x78
 81024fe:	ed87 5b20 	vstr	d5, [r7, #128]	@ 0x80
 8102502:	ed87 6b22 	vstr	d6, [r7, #136]	@ 0x88
 8102506:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			//stampa angoli eulero
			//printf("Yaw: %+2.2f Roll: %+2.2f Pitch: %+2.2f \r\n", eul.x, eul.y, eul.z);

			roll = -eul.y + 1.6 - 5 + 2; //ottengo angolo di eulero (il sensore è leggermente inclinato rispetto al piano in cui giace la bicicletta)
 810250a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 810250e:	a142      	add	r1, pc, #264	@ (adr r1, 8102618 <main+0x638>)
 8102510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8102514:	f7fd ff40 	bl	8100398 <__aeabi_dsub>
 8102518:	4602      	mov	r2, r0
 810251a:	460b      	mov	r3, r1
 810251c:	4610      	mov	r0, r2
 810251e:	4619      	mov	r1, r3
 8102520:	f04f 0200 	mov.w	r2, #0
 8102524:	4b50      	ldr	r3, [pc, #320]	@ (8102668 <main+0x688>)
 8102526:	f7fd ff37 	bl	8100398 <__aeabi_dsub>
 810252a:	4602      	mov	r2, r0
 810252c:	460b      	mov	r3, r1
 810252e:	4610      	mov	r0, r2
 8102530:	4619      	mov	r1, r3
 8102532:	f04f 0200 	mov.w	r2, #0
 8102536:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810253a:	f7fd ff2f 	bl	810039c <__adddf3>
 810253e:	4602      	mov	r2, r0
 8102540:	460b      	mov	r3, r1
 8102542:	4610      	mov	r0, r2
 8102544:	4619      	mov	r1, r3
 8102546:	f7fe fbd7 	bl	8100cf8 <__aeabi_d2f>
 810254a:	4603      	mov	r3, r0
 810254c:	4a47      	ldr	r2, [pc, #284]	@ (810266c <main+0x68c>)
 810254e:	6013      	str	r3, [r2, #0]
			yaw = eul.x; //ottengo angolo di yaw
 8102550:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8102554:	4610      	mov	r0, r2
 8102556:	4619      	mov	r1, r3
 8102558:	f7fe fbce 	bl	8100cf8 <__aeabi_d2f>
 810255c:	4603      	mov	r3, r0
 810255e:	4a44      	ldr	r2, [pc, #272]	@ (8102670 <main+0x690>)
 8102560:	6013      	str	r3, [r2, #0]

			yaw_rate = (yaw - old_yaw) / dt;
 8102562:	4b43      	ldr	r3, [pc, #268]	@ (8102670 <main+0x690>)
 8102564:	ed93 7a00 	vldr	s14, [r3]
 8102568:	4b42      	ldr	r3, [pc, #264]	@ (8102674 <main+0x694>)
 810256a:	edd3 7a00 	vldr	s15, [r3]
 810256e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8102572:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8102650 <main+0x670>
 8102576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810257a:	4b3f      	ldr	r3, [pc, #252]	@ (8102678 <main+0x698>)
 810257c:	edc3 7a00 	vstr	s15, [r3]
			old_yaw = yaw;
 8102580:	4b3b      	ldr	r3, [pc, #236]	@ (8102670 <main+0x690>)
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	4a3b      	ldr	r2, [pc, #236]	@ (8102674 <main+0x694>)
 8102586:	6013      	str	r3, [r2, #0]
			//printf("3: %.3f\r\n", tempo_1ms);

			//controllo angolo di roll, se è troppo grande ferma tutto
			if (roll >= roll_limite || roll <= -1 * roll_limite) {
 8102588:	4b38      	ldr	r3, [pc, #224]	@ (810266c <main+0x68c>)
 810258a:	edd3 7a00 	vldr	s15, [r3]
 810258e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8102592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810259a:	da09      	bge.n	81025b0 <main+0x5d0>
 810259c:	4b33      	ldr	r3, [pc, #204]	@ (810266c <main+0x68c>)
 810259e:	edd3 7a00 	vldr	s15, [r3]
 81025a2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 81025a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 81025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81025ae:	d802      	bhi.n	81025b6 <main+0x5d6>
				sys_started = 0;
 81025b0:	4b2a      	ldr	r3, [pc, #168]	@ (810265c <main+0x67c>)
 81025b2:	2200      	movs	r2, #0
 81025b4:	601a      	str	r2, [r3, #0]
			//#####################################
			//##          RUOTA DIETRO		     ##
			//#####################################
			//*******************************
			//Ottengo velocita ruota dietro
			counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 81025b6:	4b31      	ldr	r3, [pc, #196]	@ (810267c <main+0x69c>)
 81025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81025ba:	4618      	mov	r0, r3
 81025bc:	f7fe f82a 	bl	8100614 <__aeabi_ui2d>
 81025c0:	4604      	mov	r4, r0
 81025c2:	460d      	mov	r5, r1
 81025c4:	4b2d      	ldr	r3, [pc, #180]	@ (810267c <main+0x69c>)
 81025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025c8:	085b      	lsrs	r3, r3, #1
 81025ca:	4618      	mov	r0, r3
 81025cc:	f7fe f822 	bl	8100614 <__aeabi_ui2d>
 81025d0:	4602      	mov	r2, r0
 81025d2:	460b      	mov	r3, r1
 81025d4:	4620      	mov	r0, r4
 81025d6:	4629      	mov	r1, r5
 81025d8:	f7fd fede 	bl	8100398 <__aeabi_dsub>
 81025dc:	4602      	mov	r2, r0
 81025de:	460b      	mov	r3, r1
 81025e0:	4610      	mov	r0, r2
 81025e2:	4619      	mov	r1, r3
 81025e4:	f7fe fb88 	bl	8100cf8 <__aeabi_d2f>
 81025e8:	4603      	mov	r3, r0
 81025ea:	4a25      	ldr	r2, [pc, #148]	@ (8102680 <main+0x6a0>)
 81025ec:	6013      	str	r3, [r2, #0]
			TIM4->CNT = (TIM4->ARR) / 2;
 81025ee:	4b23      	ldr	r3, [pc, #140]	@ (810267c <main+0x69c>)
 81025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025f2:	4a22      	ldr	r2, [pc, #136]	@ (810267c <main+0x69c>)
 81025f4:	085b      	lsrs	r3, r3, #1
 81025f6:	6253      	str	r3, [r2, #36]	@ 0x24
			//velocita angolare
			//encoder ha risoluzione cpr 500, non 66
			delta_angle_degree = (counts * 360)
 81025f8:	4b21      	ldr	r3, [pc, #132]	@ (8102680 <main+0x6a0>)
 81025fa:	edd3 7a00 	vldr	s15, [r3]
 81025fe:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8102684 <main+0x6a4>
 8102602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102606:	ee17 0a90 	vmov	r0, s15
 810260a:	f7fe f825 	bl	8100658 <__aeabi_f2d>
 810260e:	e03b      	b.n	8102688 <main+0x6a8>
 8102610:	ae147ae1 	.word	0xae147ae1
 8102614:	3ffae147 	.word	0x3ffae147
 8102618:	9999999a 	.word	0x9999999a
 810261c:	3ff99999 	.word	0x3ff99999
 8102620:	10000290 	.word	0x10000290
 8102624:	10000018 	.word	0x10000018
 8102628:	1000d254 	.word	0x1000d254
 810262c:	10000020 	.word	0x10000020
 8102630:	1000001c 	.word	0x1000001c
 8102634:	1000d024 	.word	0x1000d024
 8102638:	1000d034 	.word	0x1000d034
 810263c:	1000d360 	.word	0x1000d360
 8102640:	1000cfcc 	.word	0x1000cfcc
 8102644:	1000d040 	.word	0x1000d040
 8102648:	1000d044 	.word	0x1000d044
 810264c:	1000d288 	.word	0x1000d288
 8102650:	3c23d70a 	.word	0x3c23d70a
 8102654:	1000d03c 	.word	0x1000d03c
 8102658:	1000d038 	.word	0x1000d038
 810265c:	1000d018 	.word	0x1000d018
 8102660:	1000d35c 	.word	0x1000d35c
 8102664:	1000cf8c 	.word	0x1000cf8c
 8102668:	40140000 	.word	0x40140000
 810266c:	1000d260 	.word	0x1000d260
 8102670:	1000d264 	.word	0x1000d264
 8102674:	1000d268 	.word	0x1000d268
 8102678:	1000d25c 	.word	0x1000d25c
 810267c:	40000800 	.word	0x40000800
 8102680:	1000cfe4 	.word	0x1000cfe4
 8102684:	43b40000 	.word	0x43b40000
					/ (ppr * gear_ratio * encoder_resolution); //del motore(davanti) 18 denti dietro (raggio)3.8cm ,28 denti davanti (raggio) 5.7cm
 8102688:	a3c9      	add	r3, pc, #804	@ (adr r3, 81029b0 <main+0x9d0>)
 810268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810268e:	f7fe f965 	bl	810095c <__aeabi_ddiv>
 8102692:	4602      	mov	r2, r0
 8102694:	460b      	mov	r3, r1
 8102696:	4610      	mov	r0, r2
 8102698:	4619      	mov	r1, r3
 810269a:	f7fe fb2d 	bl	8100cf8 <__aeabi_d2f>
 810269e:	4603      	mov	r3, r0
			delta_angle_degree = (counts * 360)
 81026a0:	4ac7      	ldr	r2, [pc, #796]	@ (81029c0 <main+0x9e0>)
 81026a2:	6013      	str	r3, [r2, #0]
			speed_degsec = -1 * delta_angle_degree / dt;
 81026a4:	4bc6      	ldr	r3, [pc, #792]	@ (81029c0 <main+0x9e0>)
 81026a6:	edd3 7a00 	vldr	s15, [r3]
 81026aa:	eeb1 7a67 	vneg.f32	s14, s15
 81026ae:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 81029c4 <main+0x9e4>
 81026b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81026b6:	4bc4      	ldr	r3, [pc, #784]	@ (81029c8 <main+0x9e8>)
 81026b8:	edc3 7a00 	vstr	s15, [r3]

			angle_degree += delta_angle_degree;
 81026bc:	4bc3      	ldr	r3, [pc, #780]	@ (81029cc <main+0x9ec>)
 81026be:	ed93 7a00 	vldr	s14, [r3]
 81026c2:	4bbf      	ldr	r3, [pc, #764]	@ (81029c0 <main+0x9e0>)
 81026c4:	edd3 7a00 	vldr	s15, [r3]
 81026c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 81026cc:	4bbf      	ldr	r3, [pc, #764]	@ (81029cc <main+0x9ec>)
 81026ce:	edc3 7a00 	vstr	s15, [r3]
			//filtro media mobile
			speed_degsec_filtrata = filtro_media_mobile(velocitavecchia,
 81026d2:	4bbd      	ldr	r3, [pc, #756]	@ (81029c8 <main+0x9e8>)
 81026d4:	edd3 7a00 	vldr	s15, [r3]
 81026d8:	221e      	movs	r2, #30
 81026da:	eeb0 0a67 	vmov.f32	s0, s15
 81026de:	49bc      	ldr	r1, [pc, #752]	@ (81029d0 <main+0x9f0>)
 81026e0:	48bc      	ldr	r0, [pc, #752]	@ (81029d4 <main+0x9f4>)
 81026e2:	f7ff fc23 	bl	8101f2c <filtro_media_mobile>
 81026e6:	eef0 7a40 	vmov.f32	s15, s0
 81026ea:	4bbb      	ldr	r3, [pc, #748]	@ (81029d8 <main+0x9f8>)
 81026ec:	edc3 7a00 	vstr	s15, [r3]
					velocitanuova, speed_degsec, 30);
			//rapporto ruota posteriore
			speed_degsec_back = speed_degsec_filtrata
					* raggio_deragliatore_anteriore
 81026f0:	4bb9      	ldr	r3, [pc, #740]	@ (81029d8 <main+0x9f8>)
 81026f2:	681b      	ldr	r3, [r3, #0]
 81026f4:	4618      	mov	r0, r3
 81026f6:	f7fd ffaf 	bl	8100658 <__aeabi_f2d>
 81026fa:	a3a5      	add	r3, pc, #660	@ (adr r3, 8102990 <main+0x9b0>)
 81026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102700:	f7fe f802 	bl	8100708 <__aeabi_dmul>
 8102704:	4602      	mov	r2, r0
 8102706:	460b      	mov	r3, r1
 8102708:	4610      	mov	r0, r2
 810270a:	4619      	mov	r1, r3
					/ raggio_deragliatore_posteriore; //rapporto velcoita angolare tra ruota dietro e avanti???
 810270c:	a3a2      	add	r3, pc, #648	@ (adr r3, 8102998 <main+0x9b8>)
 810270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102712:	f7fe f923 	bl	810095c <__aeabi_ddiv>
 8102716:	4602      	mov	r2, r0
 8102718:	460b      	mov	r3, r1
 810271a:	4610      	mov	r0, r2
 810271c:	4619      	mov	r1, r3
 810271e:	f7fe faeb 	bl	8100cf8 <__aeabi_d2f>
 8102722:	4603      	mov	r3, r0
			speed_degsec_back = speed_degsec_filtrata
 8102724:	4aad      	ldr	r2, [pc, #692]	@ (81029dc <main+0x9fc>)
 8102726:	6013      	str	r3, [r2, #0]

			//velocita ruota dietro
			speed_metsec = speed_degsec_back / 180 * 3.14 * radius;
 8102728:	4bac      	ldr	r3, [pc, #688]	@ (81029dc <main+0x9fc>)
 810272a:	edd3 7a00 	vldr	s15, [r3]
 810272e:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 81029e0 <main+0xa00>
 8102732:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8102736:	ee16 0a90 	vmov	r0, s13
 810273a:	f7fd ff8d 	bl	8100658 <__aeabi_f2d>
 810273e:	a398      	add	r3, pc, #608	@ (adr r3, 81029a0 <main+0x9c0>)
 8102740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102744:	f7fd ffe0 	bl	8100708 <__aeabi_dmul>
 8102748:	4602      	mov	r2, r0
 810274a:	460b      	mov	r3, r1
 810274c:	4610      	mov	r0, r2
 810274e:	4619      	mov	r1, r3
 8102750:	a395      	add	r3, pc, #596	@ (adr r3, 81029a8 <main+0x9c8>)
 8102752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102756:	f7fd ffd7 	bl	8100708 <__aeabi_dmul>
 810275a:	4602      	mov	r2, r0
 810275c:	460b      	mov	r3, r1
 810275e:	4610      	mov	r0, r2
 8102760:	4619      	mov	r1, r3
 8102762:	f7fe fac9 	bl	8100cf8 <__aeabi_d2f>
 8102766:	4603      	mov	r3, r0
 8102768:	4a9e      	ldr	r2, [pc, #632]	@ (81029e4 <main+0xa04>)
 810276a:	6013      	str	r3, [r2, #0]

			//angolo dietro
			angle_back_wheel += speed_degsec_back * dt;
 810276c:	4b9b      	ldr	r3, [pc, #620]	@ (81029dc <main+0x9fc>)
 810276e:	edd3 7a00 	vldr	s15, [r3]
 8102772:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 81029c4 <main+0x9e4>
 8102776:	ee27 7a87 	vmul.f32	s14, s15, s14
 810277a:	4b9b      	ldr	r3, [pc, #620]	@ (81029e8 <main+0xa08>)
 810277c:	edd3 7a00 	vldr	s15, [r3]
 8102780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102784:	4b98      	ldr	r3, [pc, #608]	@ (81029e8 <main+0xa08>)
 8102786:	edc3 7a00 	vstr	s15, [r3]
			//*******************************

			//******************************+
			//PID ruota dietro
			desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 810278a:	4b98      	ldr	r3, [pc, #608]	@ (81029ec <main+0xa0c>)
 810278c:	edd3 7a00 	vldr	s15, [r3]
 8102790:	eeb0 0a67 	vmov.f32	s0, s15
 8102794:	f7ff fb9a 	bl	8101ecc <getSpeed>
 8102798:	eef0 7a40 	vmov.f32	s15, s0
 810279c:	4b93      	ldr	r3, [pc, #588]	@ (81029ec <main+0xa0c>)
 810279e:	edc3 7a00 	vstr	s15, [r3]
			u_back_wheel = PID_controller(&pid_speed, speed_metsec,	desired_speed_metsec);
 81027a2:	4b90      	ldr	r3, [pc, #576]	@ (81029e4 <main+0xa04>)
 81027a4:	edd3 7a00 	vldr	s15, [r3]
 81027a8:	4b90      	ldr	r3, [pc, #576]	@ (81029ec <main+0xa0c>)
 81027aa:	ed93 7a00 	vldr	s14, [r3]
 81027ae:	eef0 0a47 	vmov.f32	s1, s14
 81027b2:	eeb0 0a67 	vmov.f32	s0, s15
 81027b6:	488e      	ldr	r0, [pc, #568]	@ (81029f0 <main+0xa10>)
 81027b8:	f7fe fdc0 	bl	810133c <PID_controller>
 81027bc:	eef0 7a40 	vmov.f32	s15, s0
 81027c0:	4b8c      	ldr	r3, [pc, #560]	@ (81029f4 <main+0xa14>)
 81027c2:	edc3 7a00 	vstr	s15, [r3]
			//******************************


			if (sys_started == 0) {
 81027c6:	4b8c      	ldr	r3, [pc, #560]	@ (81029f8 <main+0xa18>)
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	2b00      	cmp	r3, #0
 81027cc:	d107      	bne.n	81027de <main+0x7fe>
				u_front_wheel = 0;
 81027ce:	4b8b      	ldr	r3, [pc, #556]	@ (81029fc <main+0xa1c>)
 81027d0:	f04f 0200 	mov.w	r2, #0
 81027d4:	601a      	str	r2, [r3, #0]
				u_back_wheel = 0;
 81027d6:	4b87      	ldr	r3, [pc, #540]	@ (81029f4 <main+0xa14>)
 81027d8:	f04f 0200 	mov.w	r2, #0
 81027dc:	601a      	str	r2, [r3, #0]

			}
			if (sys_started == 1) {
 81027de:	4b86      	ldr	r3, [pc, #536]	@ (81029f8 <main+0xa18>)
 81027e0:	681b      	ldr	r3, [r3, #0]
 81027e2:	2b01      	cmp	r3, #1
 81027e4:	d108      	bne.n	81027f8 <main+0x818>

				//setto l'angolo del manubrio a 0
				angle_steer = 0;
 81027e6:	4b86      	ldr	r3, [pc, #536]	@ (8102a00 <main+0xa20>)
 81027e8:	f04f 0200 	mov.w	r2, #0
 81027ec:	601a      	str	r2, [r3, #0]



				sys_started++;
 81027ee:	4b82      	ldr	r3, [pc, #520]	@ (81029f8 <main+0xa18>)
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	3301      	adds	r3, #1
 81027f4:	4a80      	ldr	r2, [pc, #512]	@ (81029f8 <main+0xa18>)
 81027f6:	6013      	str	r3, [r2, #0]
			}

			//settare duty e pwm driver
			duty_back_wheel = Voltage2Duty(u_back_wheel);
 81027f8:	4b7e      	ldr	r3, [pc, #504]	@ (81029f4 <main+0xa14>)
 81027fa:	edd3 7a00 	vldr	s15, [r3]
 81027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8102802:	f7fe fc8f 	bl	8101124 <Voltage2Duty>
 8102806:	eef0 7a40 	vmov.f32	s15, s0
 810280a:	4b7e      	ldr	r3, [pc, #504]	@ (8102a04 <main+0xa24>)
 810280c:	edc3 7a00 	vstr	s15, [r3]
			direction_back_wheel = Ref2Direction(u_back_wheel);
 8102810:	4b78      	ldr	r3, [pc, #480]	@ (81029f4 <main+0xa14>)
 8102812:	edd3 7a00 	vldr	s15, [r3]
 8102816:	eeb0 0a67 	vmov.f32	s0, s15
 810281a:	f7fe fcc5 	bl	81011a8 <Ref2Direction>
 810281e:	4603      	mov	r3, r0
 8102820:	461a      	mov	r2, r3
 8102822:	4b79      	ldr	r3, [pc, #484]	@ (8102a08 <main+0xa28>)
 8102824:	601a      	str	r2, [r3, #0]
			set_PWM_and_dir_back_wheel(duty_back_wheel,
 8102826:	4b77      	ldr	r3, [pc, #476]	@ (8102a04 <main+0xa24>)
 8102828:	edd3 7a00 	vldr	s15, [r3]
 810282c:	4b76      	ldr	r3, [pc, #472]	@ (8102a08 <main+0xa28>)
 810282e:	681b      	ldr	r3, [r3, #0]
 8102830:	b2db      	uxtb	r3, r3
 8102832:	4618      	mov	r0, r3
 8102834:	eeb0 0a67 	vmov.f32	s0, s15
 8102838:	f7fe fcce 	bl	81011d8 <set_PWM_and_dir_back_wheel>

			//#####################################
			//##          PID YAW RATE		     ##
			//#####################################
			//******************************
			desired_yaw_rate = 0;
 810283c:	4b73      	ldr	r3, [pc, #460]	@ (8102a0c <main+0xa2c>)
 810283e:	f04f 0200 	mov.w	r2, #0
 8102842:	601a      	str	r2, [r3, #0]
			desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 8102844:	4b72      	ldr	r3, [pc, #456]	@ (8102a10 <main+0xa30>)
 8102846:	edd3 7a00 	vldr	s15, [r3]
 810284a:	4b70      	ldr	r3, [pc, #448]	@ (8102a0c <main+0xa2c>)
 810284c:	ed93 7a00 	vldr	s14, [r3]
 8102850:	eef0 0a47 	vmov.f32	s1, s14
 8102854:	eeb0 0a67 	vmov.f32	s0, s15
 8102858:	486e      	ldr	r0, [pc, #440]	@ (8102a14 <main+0xa34>)
 810285a:	f7fe fd6f 	bl	810133c <PID_controller>
 810285e:	eef0 7a40 	vmov.f32	s15, s0
 8102862:	4b6d      	ldr	r3, [pc, #436]	@ (8102a18 <main+0xa38>)
 8102864:	edc3 7a00 	vstr	s15, [r3]
			//#####################################

			//******************************
			//prima di usare l'encoder

			desired_roll = 0; //l'angolo di equilibrio sono 2 gradi
 8102868:	4b6b      	ldr	r3, [pc, #428]	@ (8102a18 <main+0xa38>)
 810286a:	f04f 0200 	mov.w	r2, #0
 810286e:	601a      	str	r2, [r3, #0]
			desired_torque = PID_controller(&pid_roll, roll, desired_roll);
 8102870:	4b6a      	ldr	r3, [pc, #424]	@ (8102a1c <main+0xa3c>)
 8102872:	edd3 7a00 	vldr	s15, [r3]
 8102876:	4b68      	ldr	r3, [pc, #416]	@ (8102a18 <main+0xa38>)
 8102878:	ed93 7a00 	vldr	s14, [r3]
 810287c:	eef0 0a47 	vmov.f32	s1, s14
 8102880:	eeb0 0a67 	vmov.f32	s0, s15
 8102884:	4866      	ldr	r0, [pc, #408]	@ (8102a20 <main+0xa40>)
 8102886:	f7fe fd59 	bl	810133c <PID_controller>
 810288a:	eef0 7a40 	vmov.f32	s15, s0
 810288e:	4b65      	ldr	r3, [pc, #404]	@ (8102a24 <main+0xa44>)
 8102890:	edc3 7a00 	vstr	s15, [r3]
			//******************************

			//encoder per ruota anteriore
			//ottengo i counts dell'encoder
			counts_steer = (double) TIM8->CNT - (TIM8->ARR) / 2; //credo cosi hai sia i conteggi negativi che positivi
 8102894:	4b64      	ldr	r3, [pc, #400]	@ (8102a28 <main+0xa48>)
 8102896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102898:	4618      	mov	r0, r3
 810289a:	f7fd febb 	bl	8100614 <__aeabi_ui2d>
 810289e:	4604      	mov	r4, r0
 81028a0:	460d      	mov	r5, r1
 81028a2:	4b61      	ldr	r3, [pc, #388]	@ (8102a28 <main+0xa48>)
 81028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028a6:	085b      	lsrs	r3, r3, #1
 81028a8:	4618      	mov	r0, r3
 81028aa:	f7fd feb3 	bl	8100614 <__aeabi_ui2d>
 81028ae:	4602      	mov	r2, r0
 81028b0:	460b      	mov	r3, r1
 81028b2:	4620      	mov	r0, r4
 81028b4:	4629      	mov	r1, r5
 81028b6:	f7fd fd6f 	bl	8100398 <__aeabi_dsub>
 81028ba:	4602      	mov	r2, r0
 81028bc:	460b      	mov	r3, r1
 81028be:	4610      	mov	r0, r2
 81028c0:	4619      	mov	r1, r3
 81028c2:	f7fe fa19 	bl	8100cf8 <__aeabi_d2f>
 81028c6:	4603      	mov	r3, r0
 81028c8:	4a58      	ldr	r2, [pc, #352]	@ (8102a2c <main+0xa4c>)
 81028ca:	6013      	str	r3, [r2, #0]
			TIM8->CNT = (TIM8->ARR) / 2;
 81028cc:	4b56      	ldr	r3, [pc, #344]	@ (8102a28 <main+0xa48>)
 81028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028d0:	4a55      	ldr	r2, [pc, #340]	@ (8102a28 <main+0xa48>)
 81028d2:	085b      	lsrs	r3, r3, #1
 81028d4:	6253      	str	r3, [r2, #36]	@ 0x24
			//calcolo l'angolo dello sterzo
			delta_angle_degree_steer = (counts_steer * 360)
 81028d6:	4b55      	ldr	r3, [pc, #340]	@ (8102a2c <main+0xa4c>)
 81028d8:	edd3 7a00 	vldr	s15, [r3]
 81028dc:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8102a30 <main+0xa50>
 81028e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 81028e4:	ee17 0a90 	vmov	r0, s15
 81028e8:	f7fd feb6 	bl	8100658 <__aeabi_f2d>
					/ (ppr * gear_ratio * encoder_resolution);
 81028ec:	a330      	add	r3, pc, #192	@ (adr r3, 81029b0 <main+0x9d0>)
 81028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028f2:	f7fe f833 	bl	810095c <__aeabi_ddiv>
 81028f6:	4602      	mov	r2, r0
 81028f8:	460b      	mov	r3, r1
 81028fa:	4610      	mov	r0, r2
 81028fc:	4619      	mov	r1, r3
 81028fe:	f7fe f9fb 	bl	8100cf8 <__aeabi_d2f>
 8102902:	4603      	mov	r3, r0
			delta_angle_degree_steer = (counts_steer * 360)
 8102904:	4a4b      	ldr	r2, [pc, #300]	@ (8102a34 <main+0xa54>)
 8102906:	6013      	str	r3, [r2, #0]

			angle_steer = angle_steer + delta_angle_degree_steer; //angolo sterzo
 8102908:	4b3d      	ldr	r3, [pc, #244]	@ (8102a00 <main+0xa20>)
 810290a:	ed93 7a00 	vldr	s14, [r3]
 810290e:	4b49      	ldr	r3, [pc, #292]	@ (8102a34 <main+0xa54>)
 8102910:	edd3 7a00 	vldr	s15, [r3]
 8102914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102918:	4b39      	ldr	r3, [pc, #228]	@ (8102a00 <main+0xa20>)
 810291a:	edc3 7a00 	vstr	s15, [r3]
			speed_degsec_steer = delta_angle_degree_steer / dt; //velocita sterzo
 810291e:	4b45      	ldr	r3, [pc, #276]	@ (8102a34 <main+0xa54>)
 8102920:	ed93 7a00 	vldr	s14, [r3]
 8102924:	eddf 6a27 	vldr	s13, [pc, #156]	@ 81029c4 <main+0x9e4>
 8102928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810292c:	4b42      	ldr	r3, [pc, #264]	@ (8102a38 <main+0xa58>)
 810292e:	edc3 7a00 	vstr	s15, [r3]

			speed_degsec_steer_filtrata = filtro_media_mobile(speedsteernuovo,
 8102932:	4b41      	ldr	r3, [pc, #260]	@ (8102a38 <main+0xa58>)
 8102934:	edd3 7a00 	vldr	s15, [r3]
 8102938:	221e      	movs	r2, #30
 810293a:	eeb0 0a67 	vmov.f32	s0, s15
 810293e:	493f      	ldr	r1, [pc, #252]	@ (8102a3c <main+0xa5c>)
 8102940:	483f      	ldr	r0, [pc, #252]	@ (8102a40 <main+0xa60>)
 8102942:	f7ff faf3 	bl	8101f2c <filtro_media_mobile>
 8102946:	eef0 7a40 	vmov.f32	s15, s0
 810294a:	4b3e      	ldr	r3, [pc, #248]	@ (8102a44 <main+0xa64>)
 810294c:	edc3 7a00 	vstr	s15, [r3]
					speedsteervecchio, speed_degsec_steer, 30);
			angolo_sterzo += speed_degsec_steer_filtrata * dt;
 8102950:	4b3c      	ldr	r3, [pc, #240]	@ (8102a44 <main+0xa64>)
 8102952:	edd3 7a00 	vldr	s15, [r3]
 8102956:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 81029c4 <main+0x9e4>
 810295a:	ee27 7a87 	vmul.f32	s14, s15, s14
 810295e:	4b3a      	ldr	r3, [pc, #232]	@ (8102a48 <main+0xa68>)
 8102960:	edd3 7a00 	vldr	s15, [r3]
 8102964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102968:	4b37      	ldr	r3, [pc, #220]	@ (8102a48 <main+0xa68>)
 810296a:	edc3 7a00 	vstr	s15, [r3]
			//##         LOW-PASS FILTER	   	   ##
			//#####################################
			//******************************
			//filtro passa basso 1/s+1 discretizzato con Matlab

			desired_filtered_torque = 0.009516 * old_desired_filtered_torque
 810296e:	4b37      	ldr	r3, [pc, #220]	@ (8102a4c <main+0xa6c>)
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	4618      	mov	r0, r3
 8102974:	f7fd fe70 	bl	8100658 <__aeabi_f2d>
 8102978:	a30f      	add	r3, pc, #60	@ (adr r3, 81029b8 <main+0x9d8>)
 810297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810297e:	f7fd fec3 	bl	8100708 <__aeabi_dmul>
 8102982:	4602      	mov	r2, r0
 8102984:	460b      	mov	r3, r1
 8102986:	4614      	mov	r4, r2
 8102988:	461d      	mov	r5, r3
					+ 0.9048 * old_desired_torque; //questo è quello del prof
 810298a:	4b31      	ldr	r3, [pc, #196]	@ (8102a50 <main+0xa70>)
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	e061      	b.n	8102a54 <main+0xa74>
 8102990:	9fbe76c9 	.word	0x9fbe76c9
 8102994:	3fad2f1a 	.word	0x3fad2f1a
 8102998:	6a7ef9db 	.word	0x6a7ef9db
 810299c:	3fa374bc 	.word	0x3fa374bc
 81029a0:	51eb851f 	.word	0x51eb851f
 81029a4:	40091eb8 	.word	0x40091eb8
 81029a8:	70a3d70a 	.word	0x70a3d70a
 81029ac:	3fc70a3d 	.word	0x3fc70a3d
 81029b0:	66666666 	.word	0x66666666
 81029b4:	40ff8146 	.word	0x40ff8146
 81029b8:	e64f54d2 	.word	0xe64f54d2
 81029bc:	3f837d1f 	.word	0x3f837d1f
 81029c0:	1000cff4 	.word	0x1000cff4
 81029c4:	3c23d70a 	.word	0x3c23d70a
 81029c8:	1000cffc 	.word	0x1000cffc
 81029cc:	1000cff8 	.word	0x1000cff8
 81029d0:	1000d1bc 	.word	0x1000d1bc
 81029d4:	1000d144 	.word	0x1000d144
 81029d8:	1000d234 	.word	0x1000d234
 81029dc:	1000d01c 	.word	0x1000d01c
 81029e0:	43340000 	.word	0x43340000
 81029e4:	1000d004 	.word	0x1000d004
 81029e8:	1000d020 	.word	0x1000d020
 81029ec:	1000d000 	.word	0x1000d000
 81029f0:	1000cf4c 	.word	0x1000cf4c
 81029f4:	1000d008 	.word	0x1000d008
 81029f8:	1000d018 	.word	0x1000d018
 81029fc:	1000d26c 	.word	0x1000d26c
 8102a00:	1000cff0 	.word	0x1000cff0
 8102a04:	1000d00c 	.word	0x1000d00c
 8102a08:	1000d010 	.word	0x1000d010
 8102a0c:	1000d23c 	.word	0x1000d23c
 8102a10:	1000d25c 	.word	0x1000d25c
 8102a14:	1000cf6c 	.word	0x1000cf6c
 8102a18:	1000d240 	.word	0x1000d240
 8102a1c:	1000d260 	.word	0x1000d260
 8102a20:	1000cf8c 	.word	0x1000cf8c
 8102a24:	1000d244 	.word	0x1000d244
 8102a28:	40010400 	.word	0x40010400
 8102a2c:	1000cfe8 	.word	0x1000cfe8
 8102a30:	43b40000 	.word	0x43b40000
 8102a34:	1000cfec 	.word	0x1000cfec
 8102a38:	1000d014 	.word	0x1000d014
 8102a3c:	1000d0c8 	.word	0x1000d0c8
 8102a40:	1000d050 	.word	0x1000d050
 8102a44:	1000d04c 	.word	0x1000d04c
 8102a48:	1000d140 	.word	0x1000d140
 8102a4c:	1000d24c 	.word	0x1000d24c
 8102a50:	1000d250 	.word	0x1000d250
 8102a54:	4618      	mov	r0, r3
 8102a56:	f7fd fdff 	bl	8100658 <__aeabi_f2d>
 8102a5a:	a322      	add	r3, pc, #136	@ (adr r3, 8102ae4 <main+0xb04>)
 8102a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a60:	f7fd fe52 	bl	8100708 <__aeabi_dmul>
 8102a64:	4602      	mov	r2, r0
 8102a66:	460b      	mov	r3, r1
 8102a68:	4620      	mov	r0, r4
 8102a6a:	4629      	mov	r1, r5
 8102a6c:	f7fd fc96 	bl	810039c <__adddf3>
 8102a70:	4602      	mov	r2, r0
 8102a72:	460b      	mov	r3, r1
 8102a74:	4610      	mov	r0, r2
 8102a76:	4619      	mov	r1, r3
 8102a78:	f7fe f93e 	bl	8100cf8 <__aeabi_d2f>
 8102a7c:	4603      	mov	r3, r0
			desired_filtered_torque = 0.009516 * old_desired_filtered_torque
 8102a7e:	4a12      	ldr	r2, [pc, #72]	@ (8102ac8 <main+0xae8>)
 8102a80:	6013      	str	r3, [r2, #0]
			old_desired_torque = desired_torque;
 8102a82:	4b12      	ldr	r3, [pc, #72]	@ (8102acc <main+0xaec>)
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	4a12      	ldr	r2, [pc, #72]	@ (8102ad0 <main+0xaf0>)
 8102a88:	6013      	str	r3, [r2, #0]
			old_desired_filtered_torque = desired_filtered_torque;
 8102a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8102ac8 <main+0xae8>)
 8102a8c:	681b      	ldr	r3, [r3, #0]
 8102a8e:	4a11      	ldr	r2, [pc, #68]	@ (8102ad4 <main+0xaf4>)
 8102a90:	6013      	str	r3, [r2, #0]


			desired_filtered_torque = desired_torque;
 8102a92:	4b0e      	ldr	r3, [pc, #56]	@ (8102acc <main+0xaec>)
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	4a0c      	ldr	r2, [pc, #48]	@ (8102ac8 <main+0xae8>)
 8102a98:	6013      	str	r3, [r2, #0]
			//#####################################
			//##            STERZO			     ##
			//#####################################
			//******************************

			if(iterazione!= 0)	VoltSens = VoltSomma1ms/iterazione;
 8102a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8102ad8 <main+0xaf8>)
 8102a9c:	edd3 7a00 	vldr	s15, [r3]
 8102aa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8102aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102aa8:	d020      	beq.n	8102aec <main+0xb0c>
 8102aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8102adc <main+0xafc>)
 8102aac:	edd3 6a00 	vldr	s13, [r3]
 8102ab0:	4b09      	ldr	r3, [pc, #36]	@ (8102ad8 <main+0xaf8>)
 8102ab2:	ed93 7a00 	vldr	s14, [r3]
 8102ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102aba:	4b09      	ldr	r3, [pc, #36]	@ (8102ae0 <main+0xb00>)
 8102abc:	edc3 7a00 	vstr	s15, [r3]
 8102ac0:	e054      	b.n	8102b6c <main+0xb8c>
 8102ac2:	bf00      	nop
 8102ac4:	f3af 8000 	nop.w
 8102ac8:	1000d248 	.word	0x1000d248
 8102acc:	1000d244 	.word	0x1000d244
 8102ad0:	1000d250 	.word	0x1000d250
 8102ad4:	1000d24c 	.word	0x1000d24c
 8102ad8:	1000d280 	.word	0x1000d280
 8102adc:	1000d284 	.word	0x1000d284
 8102ae0:	1000d28c 	.word	0x1000d28c
 8102ae4:	212d7732 	.word	0x212d7732
 8102ae8:	3fecf41f 	.word	0x3fecf41f
			else{
				//Calcolo valore corrente
				HAL_ADC_Start(&hadc1);
 8102aec:	48ac      	ldr	r0, [pc, #688]	@ (8102da0 <main+0xdc0>)
 8102aee:	f002 fd1d 	bl	810552c <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, timeout);
 8102af2:	4bac      	ldr	r3, [pc, #688]	@ (8102da4 <main+0xdc4>)
 8102af4:	681b      	ldr	r3, [r3, #0]
 8102af6:	4619      	mov	r1, r3
 8102af8:	48a9      	ldr	r0, [pc, #676]	@ (8102da0 <main+0xdc0>)
 8102afa:	f002 fe15 	bl	8105728 <HAL_ADC_PollForConversion>
				CountValue = HAL_ADC_GetValue(&hadc1);
 8102afe:	48a8      	ldr	r0, [pc, #672]	@ (8102da0 <main+0xdc0>)
 8102b00:	f002 ff06 	bl	8105910 <HAL_ADC_GetValue>
 8102b04:	ee07 0a90 	vmov	s15, r0
 8102b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b0c:	4ba6      	ldr	r3, [pc, #664]	@ (8102da8 <main+0xdc8>)
 8102b0e:	edc3 7a00 	vstr	s15, [r3]
				volt = ((float) CountValue) * Vref / (resolution);
 8102b12:	4ba5      	ldr	r3, [pc, #660]	@ (8102da8 <main+0xdc8>)
 8102b14:	ed93 7a00 	vldr	s14, [r3]
 8102b18:	4ba4      	ldr	r3, [pc, #656]	@ (8102dac <main+0xdcc>)
 8102b1a:	edd3 7a00 	vldr	s15, [r3]
 8102b1e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102b22:	4ba3      	ldr	r3, [pc, #652]	@ (8102db0 <main+0xdd0>)
 8102b24:	ed93 7a00 	vldr	s14, [r3]
 8102b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102b2c:	4ba1      	ldr	r3, [pc, #644]	@ (8102db4 <main+0xdd4>)
 8102b2e:	edc3 7a00 	vstr	s15, [r3]
				HAL_ADC_Stop(&hadc1);
 8102b32:	489b      	ldr	r0, [pc, #620]	@ (8102da0 <main+0xdc0>)
 8102b34:	f002 fdc4 	bl	81056c0 <HAL_ADC_Stop>
				VoltSens = (volt + D) * 1.5059;
 8102b38:	4b9e      	ldr	r3, [pc, #632]	@ (8102db4 <main+0xdd4>)
 8102b3a:	ed93 7a00 	vldr	s14, [r3]
 8102b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8102db8 <main+0xdd8>)
 8102b40:	edd3 7a00 	vldr	s15, [r3]
 8102b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102b48:	ee17 0a90 	vmov	r0, s15
 8102b4c:	f7fd fd84 	bl	8100658 <__aeabi_f2d>
 8102b50:	a38d      	add	r3, pc, #564	@ (adr r3, 8102d88 <main+0xda8>)
 8102b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b56:	f7fd fdd7 	bl	8100708 <__aeabi_dmul>
 8102b5a:	4602      	mov	r2, r0
 8102b5c:	460b      	mov	r3, r1
 8102b5e:	4610      	mov	r0, r2
 8102b60:	4619      	mov	r1, r3
 8102b62:	f7fe f8c9 	bl	8100cf8 <__aeabi_d2f>
 8102b66:	4603      	mov	r3, r0
 8102b68:	4a94      	ldr	r2, [pc, #592]	@ (8102dbc <main+0xddc>)
 8102b6a:	6013      	str	r3, [r2, #0]
			}


			iterazione=0;
 8102b6c:	4b94      	ldr	r3, [pc, #592]	@ (8102dc0 <main+0xde0>)
 8102b6e:	f04f 0200 	mov.w	r2, #0
 8102b72:	601a      	str	r2, [r3, #0]
			VoltSomma1ms=0;
 8102b74:	4b93      	ldr	r3, [pc, #588]	@ (8102dc4 <main+0xde4>)
 8102b76:	f04f 0200 	mov.w	r2, #0
 8102b7a:	601a      	str	r2, [r3, #0]

			corrente_non_filtrata = voltToAmpere(VoltSens, a, b);
 8102b7c:	4b8f      	ldr	r3, [pc, #572]	@ (8102dbc <main+0xddc>)
 8102b7e:	edd3 7a00 	vldr	s15, [r3]
 8102b82:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8102dc8 <main+0xde8>
 8102b86:	4b91      	ldr	r3, [pc, #580]	@ (8102dcc <main+0xdec>)
 8102b88:	ed93 7a00 	vldr	s14, [r3]
 8102b8c:	eeb0 1a47 	vmov.f32	s2, s14
 8102b90:	eef0 0a66 	vmov.f32	s1, s13
 8102b94:	eeb0 0a67 	vmov.f32	s0, s15
 8102b98:	f7ff f979 	bl	8101e8e <voltToAmpere>
 8102b9c:	eef0 7a40 	vmov.f32	s15, s0
 8102ba0:	4b8b      	ldr	r3, [pc, #556]	@ (8102dd0 <main+0xdf0>)
 8102ba2:	edc3 7a00 	vstr	s15, [r3]
			 */


			//Filtro di Kalman per corrente
			//setta i valori di input e di misura per il filtro di kalman
			z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 8102ba6:	4b85      	ldr	r3, [pc, #532]	@ (8102dbc <main+0xddc>)
 8102ba8:	681b      	ldr	r3, [r3, #0]
 8102baa:	4a8a      	ldr	r2, [pc, #552]	@ (8102dd4 <main+0xdf4>)
 8102bac:	6013      	str	r3, [r2, #0]
			z_data[1] = corrente_non_filtrata; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 8102bae:	4b88      	ldr	r3, [pc, #544]	@ (8102dd0 <main+0xdf0>)
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	4a88      	ldr	r2, [pc, #544]	@ (8102dd4 <main+0xdf4>)
 8102bb4:	6053      	str	r3, [r2, #4]
			kalman_predict(&kf, &u);
 8102bb6:	4988      	ldr	r1, [pc, #544]	@ (8102dd8 <main+0xdf8>)
 8102bb8:	4888      	ldr	r0, [pc, #544]	@ (8102ddc <main+0xdfc>)
 8102bba:	f7fe ff31 	bl	8101a20 <kalman_predict>
			kalman_update(&kf, &z);
 8102bbe:	4988      	ldr	r1, [pc, #544]	@ (8102de0 <main+0xe00>)
 8102bc0:	4886      	ldr	r0, [pc, #536]	@ (8102ddc <main+0xdfc>)
 8102bc2:	f7fe ff9b 	bl	8101afc <kalman_update>
			filtered_current_kalman = x_data[1];
 8102bc6:	4b87      	ldr	r3, [pc, #540]	@ (8102de4 <main+0xe04>)
 8102bc8:	685b      	ldr	r3, [r3, #4]
 8102bca:	4a87      	ldr	r2, [pc, #540]	@ (8102de8 <main+0xe08>)
 8102bcc:	6013      	str	r3, [r2, #0]

			//filtered_current_kalman = filtro_media_mobile(corrente_vecchia, corrente_nuova, corrente_non_filtrata, 170);
			//calcolo coppia
			torque = filtered_current_kalman * K;
 8102bce:	4b86      	ldr	r3, [pc, #536]	@ (8102de8 <main+0xe08>)
 8102bd0:	edd3 7a00 	vldr	s15, [r3]
 8102bd4:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8102dec <main+0xe0c>
 8102bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102bdc:	4b84      	ldr	r3, [pc, #528]	@ (8102df0 <main+0xe10>)
 8102bde:	edc3 7a00 	vstr	s15, [r3]
			 }


			 */

			u_front_wheel = PID_controller(&pid_steering_torque, torque,
 8102be2:	4b83      	ldr	r3, [pc, #524]	@ (8102df0 <main+0xe10>)
 8102be4:	edd3 7a00 	vldr	s15, [r3]
 8102be8:	4b82      	ldr	r3, [pc, #520]	@ (8102df4 <main+0xe14>)
 8102bea:	ed93 7a00 	vldr	s14, [r3]
 8102bee:	eef0 0a47 	vmov.f32	s1, s14
 8102bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8102bf6:	4880      	ldr	r0, [pc, #512]	@ (8102df8 <main+0xe18>)
 8102bf8:	f7fe fba0 	bl	810133c <PID_controller>
 8102bfc:	eef0 7a40 	vmov.f32	s15, s0
 8102c00:	4b7e      	ldr	r3, [pc, #504]	@ (8102dfc <main+0xe1c>)
 8102c02:	edc3 7a00 	vstr	s15, [r3]
					desired_filtered_torque);

			//controllo angolo limite manubrio
			//quando la u è negativa, l'angolo diminuisce

			 if (angle_steer <= -90) {
 8102c06:	4b7e      	ldr	r3, [pc, #504]	@ (8102e00 <main+0xe20>)
 8102c08:	edd3 7a00 	vldr	s15, [r3]
 8102c0c:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8102e04 <main+0xe24>
 8102c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c18:	d80b      	bhi.n	8102c32 <main+0xc52>
			 if (u_front_wheel < 0)
 8102c1a:	4b78      	ldr	r3, [pc, #480]	@ (8102dfc <main+0xe1c>)
 8102c1c:	edd3 7a00 	vldr	s15, [r3]
 8102c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8102c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c28:	d503      	bpl.n	8102c32 <main+0xc52>
			 u_front_wheel = 0;
 8102c2a:	4b74      	ldr	r3, [pc, #464]	@ (8102dfc <main+0xe1c>)
 8102c2c:	f04f 0200 	mov.w	r2, #0
 8102c30:	601a      	str	r2, [r3, #0]
			 }
			 if (angle_steer >= 90) //se
 8102c32:	4b73      	ldr	r3, [pc, #460]	@ (8102e00 <main+0xe20>)
 8102c34:	edd3 7a00 	vldr	s15, [r3]
 8102c38:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8102e08 <main+0xe28>
 8102c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c44:	db0b      	blt.n	8102c5e <main+0xc7e>
			 {
			 if (u_front_wheel > 0)
 8102c46:	4b6d      	ldr	r3, [pc, #436]	@ (8102dfc <main+0xe1c>)
 8102c48:	edd3 7a00 	vldr	s15, [r3]
 8102c4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8102c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c54:	dd03      	ble.n	8102c5e <main+0xc7e>
			 u_front_wheel = 0;
 8102c56:	4b69      	ldr	r3, [pc, #420]	@ (8102dfc <main+0xe1c>)
 8102c58:	f04f 0200 	mov.w	r2, #0
 8102c5c:	601a      	str	r2, [r3, #0]

			 }



			if (sys_started <= 1) {
 8102c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8102e0c <main+0xe2c>)
 8102c60:	681b      	ldr	r3, [r3, #0]
 8102c62:	2b01      	cmp	r3, #1
 8102c64:	dc0b      	bgt.n	8102c7e <main+0xc9e>
				//stadio = 1000; utile se hai l'algoritmo per il segnale trapezoidale
				desired_speed_metsec = 0;
 8102c66:	4b6a      	ldr	r3, [pc, #424]	@ (8102e10 <main+0xe30>)
 8102c68:	f04f 0200 	mov.w	r2, #0
 8102c6c:	601a      	str	r2, [r3, #0]
				u_back_wheel = 0;
 8102c6e:	4b69      	ldr	r3, [pc, #420]	@ (8102e14 <main+0xe34>)
 8102c70:	f04f 0200 	mov.w	r2, #0
 8102c74:	601a      	str	r2, [r3, #0]
				u_front_wheel = 0;
 8102c76:	4b61      	ldr	r3, [pc, #388]	@ (8102dfc <main+0xe1c>)
 8102c78:	f04f 0200 	mov.w	r2, #0
 8102c7c:	601a      	str	r2, [r3, #0]

			}

			duty_front_wheel = Voltage2Duty(u_front_wheel);
 8102c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8102dfc <main+0xe1c>)
 8102c80:	edd3 7a00 	vldr	s15, [r3]
 8102c84:	eeb0 0a67 	vmov.f32	s0, s15
 8102c88:	f7fe fa4c 	bl	8101124 <Voltage2Duty>
 8102c8c:	eef0 7a40 	vmov.f32	s15, s0
 8102c90:	4b61      	ldr	r3, [pc, #388]	@ (8102e18 <main+0xe38>)
 8102c92:	edc3 7a00 	vstr	s15, [r3]
			dir_front_wheel = Ref2Direction(u_front_wheel);
 8102c96:	4b59      	ldr	r3, [pc, #356]	@ (8102dfc <main+0xe1c>)
 8102c98:	edd3 7a00 	vldr	s15, [r3]
 8102c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8102ca0:	f7fe fa82 	bl	81011a8 <Ref2Direction>
 8102ca4:	4603      	mov	r3, r0
 8102ca6:	ee07 3a90 	vmov	s15, r3
 8102caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cae:	4b5b      	ldr	r3, [pc, #364]	@ (8102e1c <main+0xe3c>)
 8102cb0:	edc3 7a00 	vstr	s15, [r3]
			set_PWM_and_dir_front_wheel(duty_front_wheel, dir_front_wheel);
 8102cb4:	4b58      	ldr	r3, [pc, #352]	@ (8102e18 <main+0xe38>)
 8102cb6:	ed93 7a00 	vldr	s14, [r3]
 8102cba:	4b58      	ldr	r3, [pc, #352]	@ (8102e1c <main+0xe3c>)
 8102cbc:	edd3 7a00 	vldr	s15, [r3]
 8102cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102cc4:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
 8102cc8:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8102ccc:	b2db      	uxtb	r3, r3
 8102cce:	4618      	mov	r0, r3
 8102cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8102cd4:	f7fe fac2 	bl	810125c <set_PWM_and_dir_front_wheel>
			 */
			//printf("\r\n");
			//******************************
			//per dati via bluetooth
			//raccolgo dati da mandare per 3 secondi
			dati.velocita = 100;
 8102cd8:	4b51      	ldr	r3, [pc, #324]	@ (8102e20 <main+0xe40>)
 8102cda:	2264      	movs	r2, #100	@ 0x64
 8102cdc:	601a      	str	r2, [r3, #0]
			dati.accelerazione = 9.82;
 8102cde:	4950      	ldr	r1, [pc, #320]	@ (8102e20 <main+0xe40>)
 8102ce0:	a32b      	add	r3, pc, #172	@ (adr r3, 8102d90 <main+0xdb0>)
 8102ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ce6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			dati.tempo = 23.02;
 8102cea:	494d      	ldr	r1, [pc, #308]	@ (8102e20 <main+0xe40>)
 8102cec:	a32a      	add	r3, pc, #168	@ (adr r3, 8102d98 <main+0xdb8>)
 8102cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cf2:	e9c1 2304 	strd	r2, r3, [r1, #16]

			//angle_steer  = 100*sin(2*3.14/5*tempo);

			datibici.angle_steer = angle_steer;
 8102cf6:	4b42      	ldr	r3, [pc, #264]	@ (8102e00 <main+0xe20>)
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8102e24 <main+0xe44>)
 8102cfc:	6013      	str	r3, [r2, #0]
			datibici.desired_filtered_torque = desired_filtered_torque;
 8102cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8102df4 <main+0xe14>)
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	4a48      	ldr	r2, [pc, #288]	@ (8102e24 <main+0xe44>)
 8102d04:	6053      	str	r3, [r2, #4]
			datibici.desired_speed_metsec = desired_speed_metsec;
 8102d06:	4b42      	ldr	r3, [pc, #264]	@ (8102e10 <main+0xe30>)
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	4a46      	ldr	r2, [pc, #280]	@ (8102e24 <main+0xe44>)
 8102d0c:	6153      	str	r3, [r2, #20]
			datibici.roll = roll;
 8102d0e:	4b46      	ldr	r3, [pc, #280]	@ (8102e28 <main+0xe48>)
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	4a44      	ldr	r2, [pc, #272]	@ (8102e24 <main+0xe44>)
 8102d14:	6113      	str	r3, [r2, #16]
			datibici.speed_metsec = speed_metsec;
 8102d16:	4b45      	ldr	r3, [pc, #276]	@ (8102e2c <main+0xe4c>)
 8102d18:	681b      	ldr	r3, [r3, #0]
 8102d1a:	4a42      	ldr	r2, [pc, #264]	@ (8102e24 <main+0xe44>)
 8102d1c:	6193      	str	r3, [r2, #24]
			datibici.torque = torque;
 8102d1e:	4b34      	ldr	r3, [pc, #208]	@ (8102df0 <main+0xe10>)
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	4a40      	ldr	r2, [pc, #256]	@ (8102e24 <main+0xe44>)
 8102d24:	6093      	str	r3, [r2, #8]
			datibici.u_back_wheel = u_back_wheel;
 8102d26:	4b3b      	ldr	r3, [pc, #236]	@ (8102e14 <main+0xe34>)
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8102e24 <main+0xe44>)
 8102d2c:	61d3      	str	r3, [r2, #28]
			datibici.u_front_wheel = u_front_wheel;
 8102d2e:	4b33      	ldr	r3, [pc, #204]	@ (8102dfc <main+0xe1c>)
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	4a3c      	ldr	r2, [pc, #240]	@ (8102e24 <main+0xe44>)
 8102d34:	60d3      	str	r3, [r2, #12]
			datibici.tempo = tempo_1ms;
 8102d36:	4b3e      	ldr	r3, [pc, #248]	@ (8102e30 <main+0xe50>)
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8102e24 <main+0xe44>)
 8102d3c:	6213      	str	r3, [r2, #32]
			datibici.corrente_non_filtrata = corrente_non_filtrata;
 8102d3e:	4b24      	ldr	r3, [pc, #144]	@ (8102dd0 <main+0xdf0>)
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	4a38      	ldr	r2, [pc, #224]	@ (8102e24 <main+0xe44>)
 8102d44:	6253      	str	r3, [r2, #36]	@ 0x24
			datibici.corrente_filtrata = filtered_current_kalman;
 8102d46:	4b28      	ldr	r3, [pc, #160]	@ (8102de8 <main+0xe08>)
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	4a36      	ldr	r2, [pc, #216]	@ (8102e24 <main+0xe44>)
 8102d4c:	6293      	str	r3, [r2, #40]	@ 0x28
			datibici.desired_torque = desired_torque;
 8102d4e:	4b39      	ldr	r3, [pc, #228]	@ (8102e34 <main+0xe54>)
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	4a34      	ldr	r2, [pc, #208]	@ (8102e24 <main+0xe44>)
 8102d54:	62d3      	str	r3, [r2, #44]	@ 0x2c
			datibici.Volt_Adc = volt;
 8102d56:	4b17      	ldr	r3, [pc, #92]	@ (8102db4 <main+0xdd4>)
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	4a32      	ldr	r2, [pc, #200]	@ (8102e24 <main+0xe44>)
 8102d5c:	6353      	str	r3, [r2, #52]	@ 0x34
			datibici.Volt_sens = VoltSens;
 8102d5e:	4b17      	ldr	r3, [pc, #92]	@ (8102dbc <main+0xddc>)
 8102d60:	681b      	ldr	r3, [r3, #0]
 8102d62:	4a30      	ldr	r2, [pc, #192]	@ (8102e24 <main+0xe44>)
 8102d64:	6393      	str	r3, [r2, #56]	@ 0x38
			datibici.costanteD = D;
 8102d66:	4b14      	ldr	r3, [pc, #80]	@ (8102db8 <main+0xdd8>)
 8102d68:	681b      	ldr	r3, [r3, #0]
 8102d6a:	4a2e      	ldr	r2, [pc, #184]	@ (8102e24 <main+0xe44>)
 8102d6c:	6313      	str	r3, [r2, #48]	@ 0x30

			datibici.Kp=roll_kp;
 8102d6e:	4b32      	ldr	r3, [pc, #200]	@ (8102e38 <main+0xe58>)
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	4a2c      	ldr	r2, [pc, #176]	@ (8102e24 <main+0xe44>)
 8102d74:	63d3      	str	r3, [r2, #60]	@ 0x3c
			datibici.Ki=roll_ki;
 8102d76:	4b31      	ldr	r3, [pc, #196]	@ (8102e3c <main+0xe5c>)
 8102d78:	681b      	ldr	r3, [r3, #0]
 8102d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8102e24 <main+0xe44>)
 8102d7c:	6413      	str	r3, [r2, #64]	@ 0x40
			datibici.Kd=roll_kd;
 8102d7e:	4b30      	ldr	r3, [pc, #192]	@ (8102e40 <main+0xe60>)
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	4a28      	ldr	r2, [pc, #160]	@ (8102e24 <main+0xe44>)
 8102d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8102d86:	e05d      	b.n	8102e44 <main+0xe64>
 8102d88:	9930be0e 	.word	0x9930be0e
 8102d8c:	3ff8182a 	.word	0x3ff8182a
 8102d90:	0a3d70a4 	.word	0x0a3d70a4
 8102d94:	4023a3d7 	.word	0x4023a3d7
 8102d98:	b851eb85 	.word	0xb851eb85
 8102d9c:	4037051e 	.word	0x4037051e
 8102da0:	10000290 	.word	0x10000290
 8102da4:	10000018 	.word	0x10000018
 8102da8:	1000d254 	.word	0x1000d254
 8102dac:	10000020 	.word	0x10000020
 8102db0:	1000001c 	.word	0x1000001c
 8102db4:	1000d258 	.word	0x1000d258
 8102db8:	1000d360 	.word	0x1000d360
 8102dbc:	1000d28c 	.word	0x1000d28c
 8102dc0:	1000d280 	.word	0x1000d280
 8102dc4:	1000d284 	.word	0x1000d284
 8102dc8:	3f4b2fec 	.word	0x3f4b2fec
 8102dcc:	10000024 	.word	0x10000024
 8102dd0:	1000d238 	.word	0x1000d238
 8102dd4:	1000d354 	.word	0x1000d354
 8102dd8:	1000d340 	.word	0x1000d340
 8102ddc:	1000d2f8 	.word	0x1000d2f8
 8102de0:	1000d348 	.word	0x1000d348
 8102de4:	1000d338 	.word	0x1000d338
 8102de8:	1000d278 	.word	0x1000d278
 8102dec:	3cbfb15b 	.word	0x3cbfb15b
 8102df0:	1000d27c 	.word	0x1000d27c
 8102df4:	1000d248 	.word	0x1000d248
 8102df8:	1000cfac 	.word	0x1000cfac
 8102dfc:	1000d26c 	.word	0x1000d26c
 8102e00:	1000cff0 	.word	0x1000cff0
 8102e04:	c2b40000 	.word	0xc2b40000
 8102e08:	42b40000 	.word	0x42b40000
 8102e0c:	1000d018 	.word	0x1000d018
 8102e10:	1000d000 	.word	0x1000d000
 8102e14:	1000d008 	.word	0x1000d008
 8102e18:	1000d274 	.word	0x1000d274
 8102e1c:	1000d270 	.word	0x1000d270
 8102e20:	1000d298 	.word	0x1000d298
 8102e24:	1000d2b0 	.word	0x1000d2b0
 8102e28:	1000d260 	.word	0x1000d260
 8102e2c:	1000d004 	.word	0x1000d004
 8102e30:	1000cf1c 	.word	0x1000cf1c
 8102e34:	1000d244 	.word	0x1000d244
 8102e38:	1000cfd8 	.word	0x1000cfd8
 8102e3c:	1000cfdc 	.word	0x1000cfdc
 8102e40:	1000cfe0 	.word	0x1000cfe0

			//printf("%f\r\n", tempo_1ms);
			/*stampa dati ogni 2 centesimi di secondi
			*/

			if(contatore_messaggi >= 20) //cioe ogni 20 millisecondi
 8102e44:	4ba5      	ldr	r3, [pc, #660]	@ (81030dc <main+0x10fc>)
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	2b13      	cmp	r3, #19
 8102e4a:	f340 80c2 	ble.w	8102fd2 <main+0xff2>
			{
				contatore_messaggi = 0;
 8102e4e:	4ba3      	ldr	r3, [pc, #652]	@ (81030dc <main+0x10fc>)
 8102e50:	2200      	movs	r2, #0
 8102e52:	601a      	str	r2, [r3, #0]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
									 datibici.angle_steer,
 8102e54:	4ba2      	ldr	r3, [pc, #648]	@ (81030e0 <main+0x1100>)
 8102e56:	681b      	ldr	r3, [r3, #0]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102e58:	4618      	mov	r0, r3
 8102e5a:	f7fd fbfd 	bl	8100658 <__aeabi_f2d>
 8102e5e:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
							 datibici.desired_filtered_torque,
 8102e62:	4b9f      	ldr	r3, [pc, #636]	@ (81030e0 <main+0x1100>)
 8102e64:	685b      	ldr	r3, [r3, #4]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102e66:	4618      	mov	r0, r3
 8102e68:	f7fd fbf6 	bl	8100658 <__aeabi_f2d>
 8102e6c:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
							 datibici.desired_speed_metsec,
 8102e70:	4b9b      	ldr	r3, [pc, #620]	@ (81030e0 <main+0x1100>)
 8102e72:	695b      	ldr	r3, [r3, #20]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102e74:	4618      	mov	r0, r3
 8102e76:	f7fd fbef 	bl	8100658 <__aeabi_f2d>
 8102e7a:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
							 datibici.roll,
 8102e7e:	4b98      	ldr	r3, [pc, #608]	@ (81030e0 <main+0x1100>)
 8102e80:	691b      	ldr	r3, [r3, #16]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102e82:	4618      	mov	r0, r3
 8102e84:	f7fd fbe8 	bl	8100658 <__aeabi_f2d>
 8102e88:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
							 datibici.speed_metsec,
 8102e8c:	4b94      	ldr	r3, [pc, #592]	@ (81030e0 <main+0x1100>)
 8102e8e:	699b      	ldr	r3, [r3, #24]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102e90:	4618      	mov	r0, r3
 8102e92:	f7fd fbe1 	bl	8100658 <__aeabi_f2d>
 8102e96:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
							 datibici.torque,
 8102e9a:	4b91      	ldr	r3, [pc, #580]	@ (81030e0 <main+0x1100>)
 8102e9c:	689b      	ldr	r3, [r3, #8]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102e9e:	4618      	mov	r0, r3
 8102ea0:	f7fd fbda 	bl	8100658 <__aeabi_f2d>
 8102ea4:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
							 datibici.u_back_wheel,
 8102ea8:	4b8d      	ldr	r3, [pc, #564]	@ (81030e0 <main+0x1100>)
 8102eaa:	69db      	ldr	r3, [r3, #28]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102eac:	4618      	mov	r0, r3
 8102eae:	f7fd fbd3 	bl	8100658 <__aeabi_f2d>
 8102eb2:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
							 datibici.u_front_wheel,
 8102eb6:	4b8a      	ldr	r3, [pc, #552]	@ (81030e0 <main+0x1100>)
 8102eb8:	68db      	ldr	r3, [r3, #12]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102eba:	4618      	mov	r0, r3
 8102ebc:	f7fd fbcc 	bl	8100658 <__aeabi_f2d>
 8102ec0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
							 datibici.tempo,
 8102ec4:	4b86      	ldr	r3, [pc, #536]	@ (81030e0 <main+0x1100>)
 8102ec6:	6a1b      	ldr	r3, [r3, #32]
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102ec8:	4618      	mov	r0, r3
 8102eca:	f7fd fbc5 	bl	8100658 <__aeabi_f2d>
 8102ece:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
							 datibici.corrente_non_filtrata,
 8102ed2:	4b83      	ldr	r3, [pc, #524]	@ (81030e0 <main+0x1100>)
 8102ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102ed6:	4618      	mov	r0, r3
 8102ed8:	f7fd fbbe 	bl	8100658 <__aeabi_f2d>
 8102edc:	e9c7 0108 	strd	r0, r1, [r7, #32]
							 datibici.corrente_filtrata,
 8102ee0:	4b7f      	ldr	r3, [pc, #508]	@ (81030e0 <main+0x1100>)
 8102ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102ee4:	4618      	mov	r0, r3
 8102ee6:	f7fd fbb7 	bl	8100658 <__aeabi_f2d>
 8102eea:	e9c7 0106 	strd	r0, r1, [r7, #24]
			 	 	 	 	 datibici.desired_torque,
 8102eee:	4b7c      	ldr	r3, [pc, #496]	@ (81030e0 <main+0x1100>)
 8102ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102ef2:	4618      	mov	r0, r3
 8102ef4:	f7fd fbb0 	bl	8100658 <__aeabi_f2d>
 8102ef8:	e9c7 0104 	strd	r0, r1, [r7, #16]
							 datibici.Volt_Adc,
 8102efc:	4b78      	ldr	r3, [pc, #480]	@ (81030e0 <main+0x1100>)
 8102efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f00:	4618      	mov	r0, r3
 8102f02:	f7fd fba9 	bl	8100658 <__aeabi_f2d>
 8102f06:	e9c7 0102 	strd	r0, r1, [r7, #8]
							 datibici.Volt_sens,
 8102f0a:	4b75      	ldr	r3, [pc, #468]	@ (81030e0 <main+0x1100>)
 8102f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f0e:	4618      	mov	r0, r3
 8102f10:	f7fd fba2 	bl	8100658 <__aeabi_f2d>
 8102f14:	e9c7 0100 	strd	r0, r1, [r7]
							 datibici.costanteD,
 8102f18:	4b71      	ldr	r3, [pc, #452]	@ (81030e0 <main+0x1100>)
 8102f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f1c:	4618      	mov	r0, r3
 8102f1e:	f7fd fb9b 	bl	8100658 <__aeabi_f2d>
 8102f22:	4682      	mov	sl, r0
 8102f24:	468b      	mov	fp, r1
							 datibici.Kp,
 8102f26:	4b6e      	ldr	r3, [pc, #440]	@ (81030e0 <main+0x1100>)
 8102f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f2a:	4618      	mov	r0, r3
 8102f2c:	f7fd fb94 	bl	8100658 <__aeabi_f2d>
 8102f30:	4680      	mov	r8, r0
 8102f32:	4689      	mov	r9, r1
							 datibici.Ki,
 8102f34:	4b6a      	ldr	r3, [pc, #424]	@ (81030e0 <main+0x1100>)
 8102f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f38:	4618      	mov	r0, r3
 8102f3a:	f7fd fb8d 	bl	8100658 <__aeabi_f2d>
 8102f3e:	4604      	mov	r4, r0
 8102f40:	460d      	mov	r5, r1
							 datibici.Kd
 8102f42:	4b67      	ldr	r3, [pc, #412]	@ (81030e0 <main+0x1100>)
 8102f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			 printf("%.2f,%f,%.2f,%.2f,%.2f,%f,%.3f,%.4f,%f,%f,%f,%f,%.2f,%.2f,%.3f,%.1f,%.1f,%.1f\r\n",
 8102f46:	4618      	mov	r0, r3
 8102f48:	f7fd fb86 	bl	8100658 <__aeabi_f2d>
 8102f4c:	4602      	mov	r2, r0
 8102f4e:	460b      	mov	r3, r1
 8102f50:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
 8102f54:	e9cd 451e 	strd	r4, r5, [sp, #120]	@ 0x78
 8102f58:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
 8102f5c:	e9cd ab1a 	strd	sl, fp, [sp, #104]	@ 0x68
 8102f60:	ed97 7b00 	vldr	d7, [r7]
 8102f64:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 8102f68:	ed97 7b02 	vldr	d7, [r7, #8]
 8102f6c:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8102f70:	ed97 7b04 	vldr	d7, [r7, #16]
 8102f74:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8102f78:	ed97 7b06 	vldr	d7, [r7, #24]
 8102f7c:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8102f80:	ed97 7b08 	vldr	d7, [r7, #32]
 8102f84:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8102f88:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8102f8c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8102f90:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8102f94:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8102f98:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8102f9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8102fa0:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8102fa4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8102fa8:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8102fac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8102fb0:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8102fb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8102fb8:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8102fbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8102fc0:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8102fc4:	ed8d 7b00 	vstr	d7, [sp]
 8102fc8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8102fcc:	4845      	ldr	r0, [pc, #276]	@ (81030e4 <main+0x1104>)
 8102fce:	f00f f997 	bl	8112300 <iprintf>
												 datibici.costanteD,
												 datibici.Kp,
												 datibici.Ki,
												 datibici.Kd);
*/
			int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fd2:	4b45      	ldr	r3, [pc, #276]	@ (81030e8 <main+0x1108>)
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a45      	ldr	r2, [pc, #276]	@ (81030ec <main+0x110c>)
 8102fd8:	189e      	adds	r6, r3, r2
								"%f,%f\r\n",
								datibici.tempo,
 8102fda:	4b41      	ldr	r3, [pc, #260]	@ (81030e0 <main+0x1100>)
 8102fdc:	6a1b      	ldr	r3, [r3, #32]
			int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fde:	4618      	mov	r0, r3
 8102fe0:	f7fd fb3a 	bl	8100658 <__aeabi_f2d>
 8102fe4:	4604      	mov	r4, r0
 8102fe6:	460d      	mov	r5, r1
								datibici.torque);
 8102fe8:	4b3d      	ldr	r3, [pc, #244]	@ (81030e0 <main+0x1100>)
 8102fea:	689b      	ldr	r3, [r3, #8]
			int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fec:	4618      	mov	r0, r3
 8102fee:	f7fd fb33 	bl	8100658 <__aeabi_f2d>
 8102ff2:	4602      	mov	r2, r0
 8102ff4:	460b      	mov	r3, r1
 8102ff6:	e9cd 2300 	strd	r2, r3, [sp]
 8102ffa:	4622      	mov	r2, r4
 8102ffc:	462b      	mov	r3, r5
 8102ffe:	493c      	ldr	r1, [pc, #240]	@ (81030f0 <main+0x1110>)
 8103000:	4630      	mov	r0, r6
 8103002:	f00f f98f 	bl	8112324 <siprintf>
 8103006:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c


			indiceBuffer += bytesWritten;
 810300a:	4b37      	ldr	r3, [pc, #220]	@ (81030e8 <main+0x1108>)
 810300c:	681a      	ldr	r2, [r3, #0]
 810300e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8103012:	4413      	add	r3, r2
 8103014:	4a34      	ldr	r2, [pc, #208]	@ (81030e8 <main+0x1108>)
 8103016:	6013      	str	r3, [r2, #0]

			//printf("4: %.3f\r\n", tempo_1ms);

			if (trasmissione_attiva == 1) {
 8103018:	4b36      	ldr	r3, [pc, #216]	@ (81030f4 <main+0x1114>)
 810301a:	781b      	ldrb	r3, [r3, #0]
 810301c:	2b01      	cmp	r3, #1
 810301e:	f47f a9e8 	bne.w	81023f2 <main+0x412>
				//dati bicicletta

				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103022:	4b31      	ldr	r3, [pc, #196]	@ (81030e8 <main+0x1108>)
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a31      	ldr	r2, [pc, #196]	@ (81030ec <main+0x110c>)
 8103028:	189e      	adds	r6, r3, r2
						"%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",
						datibici.angle_steer, datibici.desired_filtered_torque,
 810302a:	4b2d      	ldr	r3, [pc, #180]	@ (81030e0 <main+0x1100>)
 810302c:	681b      	ldr	r3, [r3, #0]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 810302e:	4618      	mov	r0, r3
 8103030:	f7fd fb12 	bl	8100658 <__aeabi_f2d>
 8103034:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
						datibici.angle_steer, datibici.desired_filtered_torque,
 8103038:	4b29      	ldr	r3, [pc, #164]	@ (81030e0 <main+0x1100>)
 810303a:	685b      	ldr	r3, [r3, #4]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 810303c:	4618      	mov	r0, r3
 810303e:	f7fd fb0b 	bl	8100658 <__aeabi_f2d>
 8103042:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
						datibici.desired_speed_metsec, datibici.roll,
 8103046:	4b26      	ldr	r3, [pc, #152]	@ (81030e0 <main+0x1100>)
 8103048:	695b      	ldr	r3, [r3, #20]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 810304a:	4618      	mov	r0, r3
 810304c:	f7fd fb04 	bl	8100658 <__aeabi_f2d>
 8103050:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
						datibici.desired_speed_metsec, datibici.roll,
 8103054:	4b22      	ldr	r3, [pc, #136]	@ (81030e0 <main+0x1100>)
 8103056:	691b      	ldr	r3, [r3, #16]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103058:	4618      	mov	r0, r3
 810305a:	f7fd fafd 	bl	8100658 <__aeabi_f2d>
 810305e:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						datibici.speed_metsec, datibici.torque,
 8103062:	4b1f      	ldr	r3, [pc, #124]	@ (81030e0 <main+0x1100>)
 8103064:	699b      	ldr	r3, [r3, #24]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103066:	4618      	mov	r0, r3
 8103068:	f7fd faf6 	bl	8100658 <__aeabi_f2d>
 810306c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						datibici.speed_metsec, datibici.torque,
 8103070:	4b1b      	ldr	r3, [pc, #108]	@ (81030e0 <main+0x1100>)
 8103072:	689b      	ldr	r3, [r3, #8]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103074:	4618      	mov	r0, r3
 8103076:	f7fd faef 	bl	8100658 <__aeabi_f2d>
 810307a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						datibici.u_back_wheel, datibici.u_front_wheel,
 810307e:	4b18      	ldr	r3, [pc, #96]	@ (81030e0 <main+0x1100>)
 8103080:	69db      	ldr	r3, [r3, #28]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103082:	4618      	mov	r0, r3
 8103084:	f7fd fae8 	bl	8100658 <__aeabi_f2d>
 8103088:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						datibici.u_back_wheel, datibici.u_front_wheel,
 810308c:	4b14      	ldr	r3, [pc, #80]	@ (81030e0 <main+0x1100>)
 810308e:	68db      	ldr	r3, [r3, #12]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103090:	4618      	mov	r0, r3
 8103092:	f7fd fae1 	bl	8100658 <__aeabi_f2d>
 8103096:	4682      	mov	sl, r0
 8103098:	468b      	mov	fp, r1
						datibici.tempo, datibici.corrente_non_filtrata,
 810309a:	4b11      	ldr	r3, [pc, #68]	@ (81030e0 <main+0x1100>)
 810309c:	6a1b      	ldr	r3, [r3, #32]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 810309e:	4618      	mov	r0, r3
 81030a0:	f7fd fada 	bl	8100658 <__aeabi_f2d>
 81030a4:	4680      	mov	r8, r0
 81030a6:	4689      	mov	r9, r1
						datibici.tempo, datibici.corrente_non_filtrata,
 81030a8:	4b0d      	ldr	r3, [pc, #52]	@ (81030e0 <main+0x1100>)
 81030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 81030ac:	4618      	mov	r0, r3
 81030ae:	f7fd fad3 	bl	8100658 <__aeabi_f2d>
 81030b2:	4604      	mov	r4, r0
 81030b4:	460d      	mov	r5, r1
						datibici.corrente_filtrata);
 81030b6:	4b0a      	ldr	r3, [pc, #40]	@ (81030e0 <main+0x1100>)
 81030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 81030ba:	4618      	mov	r0, r3
 81030bc:	f7fd facc 	bl	8100658 <__aeabi_f2d>
 81030c0:	4602      	mov	r2, r0
 81030c2:	460b      	mov	r3, r1
 81030c4:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 81030c8:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 81030cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 81030d0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 81030d4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 81030d8:	e00e      	b.n	81030f8 <main+0x1118>
 81030da:	bf00      	nop
 81030dc:	1000cfd0 	.word	0x1000cfd0
 81030e0:	1000d2b0 	.word	0x1000d2b0
 81030e4:	08115bd4 	.word	0x08115bd4
 81030e8:	1000cf14 	.word	0x1000cf14
 81030ec:	100007dc 	.word	0x100007dc
 81030f0:	08115c24 	.word	0x08115c24
 81030f4:	1000d291 	.word	0x1000d291
 81030f8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 81030fc:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8103100:	ed8d 7b08 	vstr	d7, [sp, #32]
 8103104:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8103108:	ed8d 7b06 	vstr	d7, [sp, #24]
 810310c:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8103110:	ed8d 7b04 	vstr	d7, [sp, #16]
 8103114:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8103118:	ed8d 7b02 	vstr	d7, [sp, #8]
 810311c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8103120:	ed8d 7b00 	vstr	d7, [sp]
 8103124:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8103128:	4945      	ldr	r1, [pc, #276]	@ (8103240 <main+0x1260>)
 810312a:	4630      	mov	r0, r6
 810312c:	f00f f8fa 	bl	8112324 <siprintf>
 8103130:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
				indiceBuffer += bytesWritten;
 8103134:	4b43      	ldr	r3, [pc, #268]	@ (8103244 <main+0x1264>)
 8103136:	681a      	ldr	r2, [r3, #0]
 8103138:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810313c:	4413      	add	r3, r2
 810313e:	4a41      	ldr	r2, [pc, #260]	@ (8103244 <main+0x1264>)
 8103140:	6013      	str	r3, [r2, #0]
 8103142:	f7ff b956 	b.w	81023f2 <main+0x412>

			 //qua il calcolo della coppia, nella tesi avveniva solo una volta, successivamente
			// ho fatto in modo che venisse fatta piu frequentemente mettendola qui
			// PRO: segnale piu pulito CONTRO: non fa sempre la stessa quantita di misure, a volte
			//è piu pulito e a volte meno, l'idea è mettere un massimo di volte in cui fa le misurazioni, tipo max = 15
				if(iterazione <=15)
 8103146:	4b40      	ldr	r3, [pc, #256]	@ (8103248 <main+0x1268>)
 8103148:	edd3 7a00 	vldr	s15, [r3]
 810314c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8103150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103158:	d869      	bhi.n	810322e <main+0x124e>
				{
					//calcolo corrente
					HAL_ADC_Start(&hadc1);
 810315a:	483c      	ldr	r0, [pc, #240]	@ (810324c <main+0x126c>)
 810315c:	f002 f9e6 	bl	810552c <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, timeout);
 8103160:	4b3b      	ldr	r3, [pc, #236]	@ (8103250 <main+0x1270>)
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4619      	mov	r1, r3
 8103166:	4839      	ldr	r0, [pc, #228]	@ (810324c <main+0x126c>)
 8103168:	f002 fade 	bl	8105728 <HAL_ADC_PollForConversion>
					CountValue = HAL_ADC_GetValue(&hadc1);
 810316c:	4837      	ldr	r0, [pc, #220]	@ (810324c <main+0x126c>)
 810316e:	f002 fbcf 	bl	8105910 <HAL_ADC_GetValue>
 8103172:	ee07 0a90 	vmov	s15, r0
 8103176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810317a:	4b36      	ldr	r3, [pc, #216]	@ (8103254 <main+0x1274>)
 810317c:	edc3 7a00 	vstr	s15, [r3]
					volt = ((float) CountValue) * Vref / (resolution);
 8103180:	4b34      	ldr	r3, [pc, #208]	@ (8103254 <main+0x1274>)
 8103182:	ed93 7a00 	vldr	s14, [r3]
 8103186:	4b34      	ldr	r3, [pc, #208]	@ (8103258 <main+0x1278>)
 8103188:	edd3 7a00 	vldr	s15, [r3]
 810318c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8103190:	4b32      	ldr	r3, [pc, #200]	@ (810325c <main+0x127c>)
 8103192:	ed93 7a00 	vldr	s14, [r3]
 8103196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810319a:	4b31      	ldr	r3, [pc, #196]	@ (8103260 <main+0x1280>)
 810319c:	edc3 7a00 	vstr	s15, [r3]
					HAL_ADC_Stop(&hadc1);
 81031a0:	482a      	ldr	r0, [pc, #168]	@ (810324c <main+0x126c>)
 81031a2:	f002 fa8d 	bl	81056c0 <HAL_ADC_Stop>
					VoltSens = (volt + D) * 1.5059;
 81031a6:	4b2e      	ldr	r3, [pc, #184]	@ (8103260 <main+0x1280>)
 81031a8:	ed93 7a00 	vldr	s14, [r3]
 81031ac:	4b2d      	ldr	r3, [pc, #180]	@ (8103264 <main+0x1284>)
 81031ae:	edd3 7a00 	vldr	s15, [r3]
 81031b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 81031b6:	ee17 0a90 	vmov	r0, s15
 81031ba:	f7fd fa4d 	bl	8100658 <__aeabi_f2d>
 81031be:	a31e      	add	r3, pc, #120	@ (adr r3, 8103238 <main+0x1258>)
 81031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031c4:	f7fd faa0 	bl	8100708 <__aeabi_dmul>
 81031c8:	4602      	mov	r2, r0
 81031ca:	460b      	mov	r3, r1
 81031cc:	4610      	mov	r0, r2
 81031ce:	4619      	mov	r1, r3
 81031d0:	f7fd fd92 	bl	8100cf8 <__aeabi_d2f>
 81031d4:	4603      	mov	r3, r0
 81031d6:	4a24      	ldr	r2, [pc, #144]	@ (8103268 <main+0x1288>)
 81031d8:	6013      	str	r3, [r2, #0]
					corrente_non_filtrata = voltToAmpere(VoltSens, a, b);
 81031da:	4b23      	ldr	r3, [pc, #140]	@ (8103268 <main+0x1288>)
 81031dc:	edd3 7a00 	vldr	s15, [r3]
 81031e0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 810326c <main+0x128c>
 81031e4:	4b22      	ldr	r3, [pc, #136]	@ (8103270 <main+0x1290>)
 81031e6:	ed93 7a00 	vldr	s14, [r3]
 81031ea:	eeb0 1a47 	vmov.f32	s2, s14
 81031ee:	eef0 0a66 	vmov.f32	s1, s13
 81031f2:	eeb0 0a67 	vmov.f32	s0, s15
 81031f6:	f7fe fe4a 	bl	8101e8e <voltToAmpere>
 81031fa:	eef0 7a40 	vmov.f32	s15, s0
 81031fe:	4b1d      	ldr	r3, [pc, #116]	@ (8103274 <main+0x1294>)
 8103200:	edc3 7a00 	vstr	s15, [r3]

					VoltSomma1ms += VoltSens;
 8103204:	4b1c      	ldr	r3, [pc, #112]	@ (8103278 <main+0x1298>)
 8103206:	ed93 7a00 	vldr	s14, [r3]
 810320a:	4b17      	ldr	r3, [pc, #92]	@ (8103268 <main+0x1288>)
 810320c:	edd3 7a00 	vldr	s15, [r3]
 8103210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8103214:	4b18      	ldr	r3, [pc, #96]	@ (8103278 <main+0x1298>)
 8103216:	edc3 7a00 	vstr	s15, [r3]
					iterazione++;
 810321a:	4b0b      	ldr	r3, [pc, #44]	@ (8103248 <main+0x1268>)
 810321c:	edd3 7a00 	vldr	s15, [r3]
 8103220:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103224:	ee77 7a87 	vadd.f32	s15, s15, s14
 8103228:	4b07      	ldr	r3, [pc, #28]	@ (8103248 <main+0x1268>)
 810322a:	edc3 7a00 	vstr	s15, [r3]
		if (flag_Tc == 1) {
 810322e:	f7ff b8e0 	b.w	81023f2 <main+0x412>
 8103232:	bf00      	nop
 8103234:	f3af 8000 	nop.w
 8103238:	9930be0e 	.word	0x9930be0e
 810323c:	3ff8182a 	.word	0x3ff8182a
 8103240:	08115c2c 	.word	0x08115c2c
 8103244:	1000cf14 	.word	0x1000cf14
 8103248:	1000d280 	.word	0x1000d280
 810324c:	10000290 	.word	0x10000290
 8103250:	10000018 	.word	0x10000018
 8103254:	1000d254 	.word	0x1000d254
 8103258:	10000020 	.word	0x10000020
 810325c:	1000001c 	.word	0x1000001c
 8103260:	1000d258 	.word	0x1000d258
 8103264:	1000d360 	.word	0x1000d360
 8103268:	1000d28c 	.word	0x1000d28c
 810326c:	3f4b2fec 	.word	0x3f4b2fec
 8103270:	10000024 	.word	0x10000024
 8103274:	1000d238 	.word	0x1000d238
 8103278:	1000d284 	.word	0x1000d284

0810327c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 810327c:	b580      	push	{r7, lr}
 810327e:	b08a      	sub	sp, #40	@ 0x28
 8103280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8103282:	f107 031c 	add.w	r3, r7, #28
 8103286:	2200      	movs	r2, #0
 8103288:	601a      	str	r2, [r3, #0]
 810328a:	605a      	str	r2, [r3, #4]
 810328c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810328e:	463b      	mov	r3, r7
 8103290:	2200      	movs	r2, #0
 8103292:	601a      	str	r2, [r3, #0]
 8103294:	605a      	str	r2, [r3, #4]
 8103296:	609a      	str	r2, [r3, #8]
 8103298:	60da      	str	r2, [r3, #12]
 810329a:	611a      	str	r2, [r3, #16]
 810329c:	615a      	str	r2, [r3, #20]
 810329e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81032a0:	4b36      	ldr	r3, [pc, #216]	@ (810337c <MX_ADC1_Init+0x100>)
 81032a2:	4a37      	ldr	r2, [pc, #220]	@ (8103380 <MX_ADC1_Init+0x104>)
 81032a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 81032a6:	4b35      	ldr	r3, [pc, #212]	@ (810337c <MX_ADC1_Init+0x100>)
 81032a8:	2200      	movs	r2, #0
 81032aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81032ac:	4b33      	ldr	r3, [pc, #204]	@ (810337c <MX_ADC1_Init+0x100>)
 81032ae:	2200      	movs	r2, #0
 81032b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81032b2:	4b32      	ldr	r3, [pc, #200]	@ (810337c <MX_ADC1_Init+0x100>)
 81032b4:	2200      	movs	r2, #0
 81032b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81032b8:	4b30      	ldr	r3, [pc, #192]	@ (810337c <MX_ADC1_Init+0x100>)
 81032ba:	2204      	movs	r2, #4
 81032bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81032be:	4b2f      	ldr	r3, [pc, #188]	@ (810337c <MX_ADC1_Init+0x100>)
 81032c0:	2200      	movs	r2, #0
 81032c2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81032c4:	4b2d      	ldr	r3, [pc, #180]	@ (810337c <MX_ADC1_Init+0x100>)
 81032c6:	2200      	movs	r2, #0
 81032c8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81032ca:	4b2c      	ldr	r3, [pc, #176]	@ (810337c <MX_ADC1_Init+0x100>)
 81032cc:	2201      	movs	r2, #1
 81032ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81032d0:	4b2a      	ldr	r3, [pc, #168]	@ (810337c <MX_ADC1_Init+0x100>)
 81032d2:	2200      	movs	r2, #0
 81032d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81032d6:	4b29      	ldr	r3, [pc, #164]	@ (810337c <MX_ADC1_Init+0x100>)
 81032d8:	2200      	movs	r2, #0
 81032da:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81032dc:	4b27      	ldr	r3, [pc, #156]	@ (810337c <MX_ADC1_Init+0x100>)
 81032de:	2200      	movs	r2, #0
 81032e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81032e2:	4b26      	ldr	r3, [pc, #152]	@ (810337c <MX_ADC1_Init+0x100>)
 81032e4:	2200      	movs	r2, #0
 81032e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81032e8:	4b24      	ldr	r3, [pc, #144]	@ (810337c <MX_ADC1_Init+0x100>)
 81032ea:	2200      	movs	r2, #0
 81032ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81032ee:	4b23      	ldr	r3, [pc, #140]	@ (810337c <MX_ADC1_Init+0x100>)
 81032f0:	2200      	movs	r2, #0
 81032f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 81032f4:	4b21      	ldr	r3, [pc, #132]	@ (810337c <MX_ADC1_Init+0x100>)
 81032f6:	2201      	movs	r2, #1
 81032f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1024;
 81032fc:	4b1f      	ldr	r3, [pc, #124]	@ (810337c <MX_ADC1_Init+0x100>)
 81032fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8103302:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8103304:	4b1d      	ldr	r3, [pc, #116]	@ (810337c <MX_ADC1_Init+0x100>)
 8103306:	2200      	movs	r2, #0
 8103308:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 810330a:	4b1c      	ldr	r3, [pc, #112]	@ (810337c <MX_ADC1_Init+0x100>)
 810330c:	2200      	movs	r2, #0
 810330e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8103310:	4b1a      	ldr	r3, [pc, #104]	@ (810337c <MX_ADC1_Init+0x100>)
 8103312:	2201      	movs	r2, #1
 8103314:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8103316:	4819      	ldr	r0, [pc, #100]	@ (810337c <MX_ADC1_Init+0x100>)
 8103318:	f001 ff66 	bl	81051e8 <HAL_ADC_Init>
 810331c:	4603      	mov	r3, r0
 810331e:	2b00      	cmp	r3, #0
 8103320:	d001      	beq.n	8103326 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8103322:	f000 fee7 	bl	81040f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8103326:	2300      	movs	r3, #0
 8103328:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810332a:	f107 031c 	add.w	r3, r7, #28
 810332e:	4619      	mov	r1, r3
 8103330:	4812      	ldr	r0, [pc, #72]	@ (810337c <MX_ADC1_Init+0x100>)
 8103332:	f003 f92f 	bl	8106594 <HAL_ADCEx_MultiModeConfigChannel>
 8103336:	4603      	mov	r3, r0
 8103338:	2b00      	cmp	r3, #0
 810333a:	d001      	beq.n	8103340 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 810333c:	f000 feda 	bl	81040f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8103340:	4b10      	ldr	r3, [pc, #64]	@ (8103384 <MX_ADC1_Init+0x108>)
 8103342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8103344:	2306      	movs	r3, #6
 8103346:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8103348:	2300      	movs	r3, #0
 810334a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810334c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8103350:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8103352:	2304      	movs	r3, #4
 8103354:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8103356:	2300      	movs	r3, #0
 8103358:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 810335a:	2300      	movs	r3, #0
 810335c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810335e:	463b      	mov	r3, r7
 8103360:	4619      	mov	r1, r3
 8103362:	4806      	ldr	r0, [pc, #24]	@ (810337c <MX_ADC1_Init+0x100>)
 8103364:	f002 fae2 	bl	810592c <HAL_ADC_ConfigChannel>
 8103368:	4603      	mov	r3, r0
 810336a:	2b00      	cmp	r3, #0
 810336c:	d001      	beq.n	8103372 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 810336e:	f000 fec1 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8103372:	bf00      	nop
 8103374:	3728      	adds	r7, #40	@ 0x28
 8103376:	46bd      	mov	sp, r7
 8103378:	bd80      	pop	{r7, pc}
 810337a:	bf00      	nop
 810337c:	10000290 	.word	0x10000290
 8103380:	40022000 	.word	0x40022000
 8103384:	08600004 	.word	0x08600004

08103388 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8103388:	b580      	push	{r7, lr}
 810338a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 810338c:	4b1b      	ldr	r3, [pc, #108]	@ (81033fc <MX_I2C1_Init+0x74>)
 810338e:	4a1c      	ldr	r2, [pc, #112]	@ (8103400 <MX_I2C1_Init+0x78>)
 8103390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8103392:	4b1a      	ldr	r3, [pc, #104]	@ (81033fc <MX_I2C1_Init+0x74>)
 8103394:	4a1b      	ldr	r2, [pc, #108]	@ (8103404 <MX_I2C1_Init+0x7c>)
 8103396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8103398:	4b18      	ldr	r3, [pc, #96]	@ (81033fc <MX_I2C1_Init+0x74>)
 810339a:	2200      	movs	r2, #0
 810339c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810339e:	4b17      	ldr	r3, [pc, #92]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033a0:	2201      	movs	r2, #1
 81033a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81033a4:	4b15      	ldr	r3, [pc, #84]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033a6:	2200      	movs	r2, #0
 81033a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81033aa:	4b14      	ldr	r3, [pc, #80]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033ac:	2200      	movs	r2, #0
 81033ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81033b0:	4b12      	ldr	r3, [pc, #72]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033b2:	2200      	movs	r2, #0
 81033b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81033b6:	4b11      	ldr	r3, [pc, #68]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033b8:	2200      	movs	r2, #0
 81033ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81033bc:	4b0f      	ldr	r3, [pc, #60]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033be:	2200      	movs	r2, #0
 81033c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81033c2:	480e      	ldr	r0, [pc, #56]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033c4:	f005 ff06 	bl	81091d4 <HAL_I2C_Init>
 81033c8:	4603      	mov	r3, r0
 81033ca:	2b00      	cmp	r3, #0
 81033cc:	d001      	beq.n	81033d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81033ce:	f000 fe91 	bl	81040f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81033d2:	2100      	movs	r1, #0
 81033d4:	4809      	ldr	r0, [pc, #36]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033d6:	f006 fc67 	bl	8109ca8 <HAL_I2CEx_ConfigAnalogFilter>
 81033da:	4603      	mov	r3, r0
 81033dc:	2b00      	cmp	r3, #0
 81033de:	d001      	beq.n	81033e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81033e0:	f000 fe88 	bl	81040f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81033e4:	2100      	movs	r1, #0
 81033e6:	4805      	ldr	r0, [pc, #20]	@ (81033fc <MX_I2C1_Init+0x74>)
 81033e8:	f006 fca9 	bl	8109d3e <HAL_I2CEx_ConfigDigitalFilter>
 81033ec:	4603      	mov	r3, r0
 81033ee:	2b00      	cmp	r3, #0
 81033f0:	d001      	beq.n	81033f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81033f2:	f000 fe7f 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81033f6:	bf00      	nop
 81033f8:	bd80      	pop	{r7, pc}
 81033fa:	bf00      	nop
 81033fc:	100002f4 	.word	0x100002f4
 8103400:	40005400 	.word	0x40005400
 8103404:	10c0ecff 	.word	0x10c0ecff

08103408 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8103408:	b580      	push	{r7, lr}
 810340a:	b09a      	sub	sp, #104	@ 0x68
 810340c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810340e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8103412:	2200      	movs	r2, #0
 8103414:	601a      	str	r2, [r3, #0]
 8103416:	605a      	str	r2, [r3, #4]
 8103418:	609a      	str	r2, [r3, #8]
 810341a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810341c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8103420:	2200      	movs	r2, #0
 8103422:	601a      	str	r2, [r3, #0]
 8103424:	605a      	str	r2, [r3, #4]
 8103426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8103428:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810342c:	2200      	movs	r2, #0
 810342e:	601a      	str	r2, [r3, #0]
 8103430:	605a      	str	r2, [r3, #4]
 8103432:	609a      	str	r2, [r3, #8]
 8103434:	60da      	str	r2, [r3, #12]
 8103436:	611a      	str	r2, [r3, #16]
 8103438:	615a      	str	r2, [r3, #20]
 810343a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 810343c:	1d3b      	adds	r3, r7, #4
 810343e:	222c      	movs	r2, #44	@ 0x2c
 8103440:	2100      	movs	r1, #0
 8103442:	4618      	mov	r0, r3
 8103444:	f00f f866 	bl	8112514 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8103448:	4b43      	ldr	r3, [pc, #268]	@ (8103558 <MX_TIM1_Init+0x150>)
 810344a:	4a44      	ldr	r2, [pc, #272]	@ (810355c <MX_TIM1_Init+0x154>)
 810344c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 810344e:	4b42      	ldr	r3, [pc, #264]	@ (8103558 <MX_TIM1_Init+0x150>)
 8103450:	22c7      	movs	r2, #199	@ 0xc7
 8103452:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103454:	4b40      	ldr	r3, [pc, #256]	@ (8103558 <MX_TIM1_Init+0x150>)
 8103456:	2200      	movs	r2, #0
 8103458:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 810345a:	4b3f      	ldr	r3, [pc, #252]	@ (8103558 <MX_TIM1_Init+0x150>)
 810345c:	2231      	movs	r2, #49	@ 0x31
 810345e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103460:	4b3d      	ldr	r3, [pc, #244]	@ (8103558 <MX_TIM1_Init+0x150>)
 8103462:	2200      	movs	r2, #0
 8103464:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8103466:	4b3c      	ldr	r3, [pc, #240]	@ (8103558 <MX_TIM1_Init+0x150>)
 8103468:	2200      	movs	r2, #0
 810346a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810346c:	4b3a      	ldr	r3, [pc, #232]	@ (8103558 <MX_TIM1_Init+0x150>)
 810346e:	2200      	movs	r2, #0
 8103470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8103472:	4839      	ldr	r0, [pc, #228]	@ (8103558 <MX_TIM1_Init+0x150>)
 8103474:	f009 fc0e 	bl	810cc94 <HAL_TIM_Base_Init>
 8103478:	4603      	mov	r3, r0
 810347a:	2b00      	cmp	r3, #0
 810347c:	d001      	beq.n	8103482 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 810347e:	f000 fe39 	bl	81040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8103482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8103486:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8103488:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 810348c:	4619      	mov	r1, r3
 810348e:	4832      	ldr	r0, [pc, #200]	@ (8103558 <MX_TIM1_Init+0x150>)
 8103490:	f00a f972 	bl	810d778 <HAL_TIM_ConfigClockSource>
 8103494:	4603      	mov	r3, r0
 8103496:	2b00      	cmp	r3, #0
 8103498:	d001      	beq.n	810349e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 810349a:	f000 fe2b 	bl	81040f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810349e:	482e      	ldr	r0, [pc, #184]	@ (8103558 <MX_TIM1_Init+0x150>)
 81034a0:	f009 fd38 	bl	810cf14 <HAL_TIM_PWM_Init>
 81034a4:	4603      	mov	r3, r0
 81034a6:	2b00      	cmp	r3, #0
 81034a8:	d001      	beq.n	81034ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 81034aa:	f000 fe23 	bl	81040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81034ae:	2300      	movs	r3, #0
 81034b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81034b2:	2300      	movs	r3, #0
 81034b4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81034b6:	2300      	movs	r3, #0
 81034b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81034ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81034be:	4619      	mov	r1, r3
 81034c0:	4825      	ldr	r0, [pc, #148]	@ (8103558 <MX_TIM1_Init+0x150>)
 81034c2:	f00a feb7 	bl	810e234 <HAL_TIMEx_MasterConfigSynchronization>
 81034c6:	4603      	mov	r3, r0
 81034c8:	2b00      	cmp	r3, #0
 81034ca:	d001      	beq.n	81034d0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 81034cc:	f000 fe12 	bl	81040f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81034d0:	2360      	movs	r3, #96	@ 0x60
 81034d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 81034d4:	2300      	movs	r3, #0
 81034d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81034d8:	2300      	movs	r3, #0
 81034da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81034dc:	2300      	movs	r3, #0
 81034de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81034e0:	2300      	movs	r3, #0
 81034e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81034e4:	2300      	movs	r3, #0
 81034e6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81034e8:	2300      	movs	r3, #0
 81034ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81034ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81034f0:	2200      	movs	r2, #0
 81034f2:	4619      	mov	r1, r3
 81034f4:	4818      	ldr	r0, [pc, #96]	@ (8103558 <MX_TIM1_Init+0x150>)
 81034f6:	f00a f82b 	bl	810d550 <HAL_TIM_PWM_ConfigChannel>
 81034fa:	4603      	mov	r3, r0
 81034fc:	2b00      	cmp	r3, #0
 81034fe:	d001      	beq.n	8103504 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8103500:	f000 fdf8 	bl	81040f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8103504:	2300      	movs	r3, #0
 8103506:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8103508:	2300      	movs	r3, #0
 810350a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810350c:	2300      	movs	r3, #0
 810350e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8103510:	2300      	movs	r3, #0
 8103512:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8103514:	2300      	movs	r3, #0
 8103516:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8103518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810351c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810351e:	2300      	movs	r3, #0
 8103520:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8103522:	2300      	movs	r3, #0
 8103524:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8103526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810352a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 810352c:	2300      	movs	r3, #0
 810352e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8103530:	2300      	movs	r3, #0
 8103532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8103534:	1d3b      	adds	r3, r7, #4
 8103536:	4619      	mov	r1, r3
 8103538:	4807      	ldr	r0, [pc, #28]	@ (8103558 <MX_TIM1_Init+0x150>)
 810353a:	f00a ff09 	bl	810e350 <HAL_TIMEx_ConfigBreakDeadTime>
 810353e:	4603      	mov	r3, r0
 8103540:	2b00      	cmp	r3, #0
 8103542:	d001      	beq.n	8103548 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8103544:	f000 fdd6 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8103548:	4803      	ldr	r0, [pc, #12]	@ (8103558 <MX_TIM1_Init+0x150>)
 810354a:	f001 f80b 	bl	8104564 <HAL_TIM_MspPostInit>

}
 810354e:	bf00      	nop
 8103550:	3768      	adds	r7, #104	@ 0x68
 8103552:	46bd      	mov	sp, r7
 8103554:	bd80      	pop	{r7, pc}
 8103556:	bf00      	nop
 8103558:	10000348 	.word	0x10000348
 810355c:	40010000 	.word	0x40010000

08103560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8103560:	b580      	push	{r7, lr}
 8103562:	b088      	sub	sp, #32
 8103564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8103566:	f107 0310 	add.w	r3, r7, #16
 810356a:	2200      	movs	r2, #0
 810356c:	601a      	str	r2, [r3, #0]
 810356e:	605a      	str	r2, [r3, #4]
 8103570:	609a      	str	r2, [r3, #8]
 8103572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103574:	1d3b      	adds	r3, r7, #4
 8103576:	2200      	movs	r2, #0
 8103578:	601a      	str	r2, [r3, #0]
 810357a:	605a      	str	r2, [r3, #4]
 810357c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810357e:	4b1e      	ldr	r3, [pc, #120]	@ (81035f8 <MX_TIM2_Init+0x98>)
 8103580:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8103584:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8103586:	4b1c      	ldr	r3, [pc, #112]	@ (81035f8 <MX_TIM2_Init+0x98>)
 8103588:	22c7      	movs	r2, #199	@ 0xc7
 810358a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810358c:	4b1a      	ldr	r3, [pc, #104]	@ (81035f8 <MX_TIM2_Init+0x98>)
 810358e:	2200      	movs	r2, #0
 8103590:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8103592:	4b19      	ldr	r3, [pc, #100]	@ (81035f8 <MX_TIM2_Init+0x98>)
 8103594:	f242 720f 	movw	r2, #9999	@ 0x270f
 8103598:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810359a:	4b17      	ldr	r3, [pc, #92]	@ (81035f8 <MX_TIM2_Init+0x98>)
 810359c:	2200      	movs	r2, #0
 810359e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81035a0:	4b15      	ldr	r3, [pc, #84]	@ (81035f8 <MX_TIM2_Init+0x98>)
 81035a2:	2200      	movs	r2, #0
 81035a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 81035a6:	4814      	ldr	r0, [pc, #80]	@ (81035f8 <MX_TIM2_Init+0x98>)
 81035a8:	f009 fb74 	bl	810cc94 <HAL_TIM_Base_Init>
 81035ac:	4603      	mov	r3, r0
 81035ae:	2b00      	cmp	r3, #0
 81035b0:	d001      	beq.n	81035b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 81035b2:	f000 fd9f 	bl	81040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81035b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81035ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 81035bc:	f107 0310 	add.w	r3, r7, #16
 81035c0:	4619      	mov	r1, r3
 81035c2:	480d      	ldr	r0, [pc, #52]	@ (81035f8 <MX_TIM2_Init+0x98>)
 81035c4:	f00a f8d8 	bl	810d778 <HAL_TIM_ConfigClockSource>
 81035c8:	4603      	mov	r3, r0
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	d001      	beq.n	81035d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 81035ce:	f000 fd91 	bl	81040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81035d2:	2300      	movs	r3, #0
 81035d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81035d6:	2300      	movs	r3, #0
 81035d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81035da:	1d3b      	adds	r3, r7, #4
 81035dc:	4619      	mov	r1, r3
 81035de:	4806      	ldr	r0, [pc, #24]	@ (81035f8 <MX_TIM2_Init+0x98>)
 81035e0:	f00a fe28 	bl	810e234 <HAL_TIMEx_MasterConfigSynchronization>
 81035e4:	4603      	mov	r3, r0
 81035e6:	2b00      	cmp	r3, #0
 81035e8:	d001      	beq.n	81035ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 81035ea:	f000 fd83 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81035ee:	bf00      	nop
 81035f0:	3720      	adds	r7, #32
 81035f2:	46bd      	mov	sp, r7
 81035f4:	bd80      	pop	{r7, pc}
 81035f6:	bf00      	nop
 81035f8:	10000394 	.word	0x10000394

081035fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81035fc:	b580      	push	{r7, lr}
 81035fe:	b08e      	sub	sp, #56	@ 0x38
 8103600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8103602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8103606:	2200      	movs	r2, #0
 8103608:	601a      	str	r2, [r3, #0]
 810360a:	605a      	str	r2, [r3, #4]
 810360c:	609a      	str	r2, [r3, #8]
 810360e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103610:	f107 031c 	add.w	r3, r7, #28
 8103614:	2200      	movs	r2, #0
 8103616:	601a      	str	r2, [r3, #0]
 8103618:	605a      	str	r2, [r3, #4]
 810361a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810361c:	463b      	mov	r3, r7
 810361e:	2200      	movs	r2, #0
 8103620:	601a      	str	r2, [r3, #0]
 8103622:	605a      	str	r2, [r3, #4]
 8103624:	609a      	str	r2, [r3, #8]
 8103626:	60da      	str	r2, [r3, #12]
 8103628:	611a      	str	r2, [r3, #16]
 810362a:	615a      	str	r2, [r3, #20]
 810362c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 810362e:	4b2c      	ldr	r3, [pc, #176]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 8103630:	4a2c      	ldr	r2, [pc, #176]	@ (81036e4 <MX_TIM3_Init+0xe8>)
 8103632:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8103634:	4b2a      	ldr	r3, [pc, #168]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 8103636:	22c7      	movs	r2, #199	@ 0xc7
 8103638:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 810363a:	4b29      	ldr	r3, [pc, #164]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 810363c:	2200      	movs	r2, #0
 810363e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8103640:	4b27      	ldr	r3, [pc, #156]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 8103642:	2231      	movs	r2, #49	@ 0x31
 8103644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103646:	4b26      	ldr	r3, [pc, #152]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 8103648:	2200      	movs	r2, #0
 810364a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810364c:	4b24      	ldr	r3, [pc, #144]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 810364e:	2200      	movs	r2, #0
 8103650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8103652:	4823      	ldr	r0, [pc, #140]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 8103654:	f009 fb1e 	bl	810cc94 <HAL_TIM_Base_Init>
 8103658:	4603      	mov	r3, r0
 810365a:	2b00      	cmp	r3, #0
 810365c:	d001      	beq.n	8103662 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 810365e:	f000 fd49 	bl	81040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8103662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8103666:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8103668:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810366c:	4619      	mov	r1, r3
 810366e:	481c      	ldr	r0, [pc, #112]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 8103670:	f00a f882 	bl	810d778 <HAL_TIM_ConfigClockSource>
 8103674:	4603      	mov	r3, r0
 8103676:	2b00      	cmp	r3, #0
 8103678:	d001      	beq.n	810367e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 810367a:	f000 fd3b 	bl	81040f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 810367e:	4818      	ldr	r0, [pc, #96]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 8103680:	f009 fc48 	bl	810cf14 <HAL_TIM_PWM_Init>
 8103684:	4603      	mov	r3, r0
 8103686:	2b00      	cmp	r3, #0
 8103688:	d001      	beq.n	810368e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 810368a:	f000 fd33 	bl	81040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810368e:	2300      	movs	r3, #0
 8103690:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103692:	2300      	movs	r3, #0
 8103694:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8103696:	f107 031c 	add.w	r3, r7, #28
 810369a:	4619      	mov	r1, r3
 810369c:	4810      	ldr	r0, [pc, #64]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 810369e:	f00a fdc9 	bl	810e234 <HAL_TIMEx_MasterConfigSynchronization>
 81036a2:	4603      	mov	r3, r0
 81036a4:	2b00      	cmp	r3, #0
 81036a6:	d001      	beq.n	81036ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 81036a8:	f000 fd24 	bl	81040f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81036ac:	2360      	movs	r3, #96	@ 0x60
 81036ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81036b0:	2300      	movs	r3, #0
 81036b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81036b4:	2300      	movs	r3, #0
 81036b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81036b8:	2300      	movs	r3, #0
 81036ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81036bc:	463b      	mov	r3, r7
 81036be:	2200      	movs	r2, #0
 81036c0:	4619      	mov	r1, r3
 81036c2:	4807      	ldr	r0, [pc, #28]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 81036c4:	f009 ff44 	bl	810d550 <HAL_TIM_PWM_ConfigChannel>
 81036c8:	4603      	mov	r3, r0
 81036ca:	2b00      	cmp	r3, #0
 81036cc:	d001      	beq.n	81036d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 81036ce:	f000 fd11 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 81036d2:	4803      	ldr	r0, [pc, #12]	@ (81036e0 <MX_TIM3_Init+0xe4>)
 81036d4:	f000 ff46 	bl	8104564 <HAL_TIM_MspPostInit>

}
 81036d8:	bf00      	nop
 81036da:	3738      	adds	r7, #56	@ 0x38
 81036dc:	46bd      	mov	sp, r7
 81036de:	bd80      	pop	{r7, pc}
 81036e0:	100003e0 	.word	0x100003e0
 81036e4:	40000400 	.word	0x40000400

081036e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 81036e8:	b580      	push	{r7, lr}
 81036ea:	b08c      	sub	sp, #48	@ 0x30
 81036ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81036ee:	f107 030c 	add.w	r3, r7, #12
 81036f2:	2224      	movs	r2, #36	@ 0x24
 81036f4:	2100      	movs	r1, #0
 81036f6:	4618      	mov	r0, r3
 81036f8:	f00e ff0c 	bl	8112514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81036fc:	463b      	mov	r3, r7
 81036fe:	2200      	movs	r2, #0
 8103700:	601a      	str	r2, [r3, #0]
 8103702:	605a      	str	r2, [r3, #4]
 8103704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8103706:	4b21      	ldr	r3, [pc, #132]	@ (810378c <MX_TIM4_Init+0xa4>)
 8103708:	4a21      	ldr	r2, [pc, #132]	@ (8103790 <MX_TIM4_Init+0xa8>)
 810370a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 810370c:	4b1f      	ldr	r3, [pc, #124]	@ (810378c <MX_TIM4_Init+0xa4>)
 810370e:	2200      	movs	r2, #0
 8103710:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103712:	4b1e      	ldr	r3, [pc, #120]	@ (810378c <MX_TIM4_Init+0xa4>)
 8103714:	2200      	movs	r2, #0
 8103716:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3423-1;
 8103718:	4b1c      	ldr	r3, [pc, #112]	@ (810378c <MX_TIM4_Init+0xa4>)
 810371a:	f640 525e 	movw	r2, #3422	@ 0xd5e
 810371e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103720:	4b1a      	ldr	r3, [pc, #104]	@ (810378c <MX_TIM4_Init+0xa4>)
 8103722:	2200      	movs	r2, #0
 8103724:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103726:	4b19      	ldr	r3, [pc, #100]	@ (810378c <MX_TIM4_Init+0xa4>)
 8103728:	2200      	movs	r2, #0
 810372a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 810372c:	2303      	movs	r3, #3
 810372e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8103730:	2300      	movs	r3, #0
 8103732:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8103734:	2301      	movs	r3, #1
 8103736:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8103738:	2300      	movs	r3, #0
 810373a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 810373c:	2300      	movs	r3, #0
 810373e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8103740:	2300      	movs	r3, #0
 8103742:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8103744:	2301      	movs	r3, #1
 8103746:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8103748:	2300      	movs	r3, #0
 810374a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 810374c:	2300      	movs	r3, #0
 810374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8103750:	f107 030c 	add.w	r3, r7, #12
 8103754:	4619      	mov	r1, r3
 8103756:	480d      	ldr	r0, [pc, #52]	@ (810378c <MX_TIM4_Init+0xa4>)
 8103758:	f009 fd4c 	bl	810d1f4 <HAL_TIM_Encoder_Init>
 810375c:	4603      	mov	r3, r0
 810375e:	2b00      	cmp	r3, #0
 8103760:	d001      	beq.n	8103766 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8103762:	f000 fcc7 	bl	81040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103766:	2300      	movs	r3, #0
 8103768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810376a:	2300      	movs	r3, #0
 810376c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 810376e:	463b      	mov	r3, r7
 8103770:	4619      	mov	r1, r3
 8103772:	4806      	ldr	r0, [pc, #24]	@ (810378c <MX_TIM4_Init+0xa4>)
 8103774:	f00a fd5e 	bl	810e234 <HAL_TIMEx_MasterConfigSynchronization>
 8103778:	4603      	mov	r3, r0
 810377a:	2b00      	cmp	r3, #0
 810377c:	d001      	beq.n	8103782 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 810377e:	f000 fcb9 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8103782:	bf00      	nop
 8103784:	3730      	adds	r7, #48	@ 0x30
 8103786:	46bd      	mov	sp, r7
 8103788:	bd80      	pop	{r7, pc}
 810378a:	bf00      	nop
 810378c:	1000042c 	.word	0x1000042c
 8103790:	40000800 	.word	0x40000800

08103794 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8103794:	b580      	push	{r7, lr}
 8103796:	b084      	sub	sp, #16
 8103798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810379a:	1d3b      	adds	r3, r7, #4
 810379c:	2200      	movs	r2, #0
 810379e:	601a      	str	r2, [r3, #0]
 81037a0:	605a      	str	r2, [r3, #4]
 81037a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 81037a4:	4b15      	ldr	r3, [pc, #84]	@ (81037fc <MX_TIM6_Init+0x68>)
 81037a6:	4a16      	ldr	r2, [pc, #88]	@ (8103800 <MX_TIM6_Init+0x6c>)
 81037a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20000-1;
 81037aa:	4b14      	ldr	r3, [pc, #80]	@ (81037fc <MX_TIM6_Init+0x68>)
 81037ac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 81037b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81037b2:	4b12      	ldr	r3, [pc, #72]	@ (81037fc <MX_TIM6_Init+0x68>)
 81037b4:	2200      	movs	r2, #0
 81037b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 30000;
 81037b8:	4b10      	ldr	r3, [pc, #64]	@ (81037fc <MX_TIM6_Init+0x68>)
 81037ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 81037be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81037c0:	4b0e      	ldr	r3, [pc, #56]	@ (81037fc <MX_TIM6_Init+0x68>)
 81037c2:	2200      	movs	r2, #0
 81037c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 81037c6:	480d      	ldr	r0, [pc, #52]	@ (81037fc <MX_TIM6_Init+0x68>)
 81037c8:	f009 fa64 	bl	810cc94 <HAL_TIM_Base_Init>
 81037cc:	4603      	mov	r3, r0
 81037ce:	2b00      	cmp	r3, #0
 81037d0:	d001      	beq.n	81037d6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 81037d2:	f000 fc8f 	bl	81040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81037d6:	2300      	movs	r3, #0
 81037d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81037da:	2300      	movs	r3, #0
 81037dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 81037de:	1d3b      	adds	r3, r7, #4
 81037e0:	4619      	mov	r1, r3
 81037e2:	4806      	ldr	r0, [pc, #24]	@ (81037fc <MX_TIM6_Init+0x68>)
 81037e4:	f00a fd26 	bl	810e234 <HAL_TIMEx_MasterConfigSynchronization>
 81037e8:	4603      	mov	r3, r0
 81037ea:	2b00      	cmp	r3, #0
 81037ec:	d001      	beq.n	81037f2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 81037ee:	f000 fc81 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 81037f2:	bf00      	nop
 81037f4:	3710      	adds	r7, #16
 81037f6:	46bd      	mov	sp, r7
 81037f8:	bd80      	pop	{r7, pc}
 81037fa:	bf00      	nop
 81037fc:	10000478 	.word	0x10000478
 8103800:	40001000 	.word	0x40001000

08103804 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8103804:	b580      	push	{r7, lr}
 8103806:	b084      	sub	sp, #16
 8103808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810380a:	1d3b      	adds	r3, r7, #4
 810380c:	2200      	movs	r2, #0
 810380e:	601a      	str	r2, [r3, #0]
 8103810:	605a      	str	r2, [r3, #4]
 8103812:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8103814:	4b14      	ldr	r3, [pc, #80]	@ (8103868 <MX_TIM7_Init+0x64>)
 8103816:	4a15      	ldr	r2, [pc, #84]	@ (810386c <MX_TIM7_Init+0x68>)
 8103818:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 810381a:	4b13      	ldr	r3, [pc, #76]	@ (8103868 <MX_TIM7_Init+0x64>)
 810381c:	22c7      	movs	r2, #199	@ 0xc7
 810381e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103820:	4b11      	ldr	r3, [pc, #68]	@ (8103868 <MX_TIM7_Init+0x64>)
 8103822:	2200      	movs	r2, #0
 8103824:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8103826:	4b10      	ldr	r3, [pc, #64]	@ (8103868 <MX_TIM7_Init+0x64>)
 8103828:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810382c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810382e:	4b0e      	ldr	r3, [pc, #56]	@ (8103868 <MX_TIM7_Init+0x64>)
 8103830:	2200      	movs	r2, #0
 8103832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8103834:	480c      	ldr	r0, [pc, #48]	@ (8103868 <MX_TIM7_Init+0x64>)
 8103836:	f009 fa2d 	bl	810cc94 <HAL_TIM_Base_Init>
 810383a:	4603      	mov	r3, r0
 810383c:	2b00      	cmp	r3, #0
 810383e:	d001      	beq.n	8103844 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8103840:	f000 fc58 	bl	81040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103844:	2300      	movs	r3, #0
 8103846:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103848:	2300      	movs	r3, #0
 810384a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 810384c:	1d3b      	adds	r3, r7, #4
 810384e:	4619      	mov	r1, r3
 8103850:	4805      	ldr	r0, [pc, #20]	@ (8103868 <MX_TIM7_Init+0x64>)
 8103852:	f00a fcef 	bl	810e234 <HAL_TIMEx_MasterConfigSynchronization>
 8103856:	4603      	mov	r3, r0
 8103858:	2b00      	cmp	r3, #0
 810385a:	d001      	beq.n	8103860 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 810385c:	f000 fc4a 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8103860:	bf00      	nop
 8103862:	3710      	adds	r7, #16
 8103864:	46bd      	mov	sp, r7
 8103866:	bd80      	pop	{r7, pc}
 8103868:	100004c4 	.word	0x100004c4
 810386c:	40001400 	.word	0x40001400

08103870 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8103870:	b580      	push	{r7, lr}
 8103872:	b08c      	sub	sp, #48	@ 0x30
 8103874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8103876:	f107 030c 	add.w	r3, r7, #12
 810387a:	2224      	movs	r2, #36	@ 0x24
 810387c:	2100      	movs	r1, #0
 810387e:	4618      	mov	r0, r3
 8103880:	f00e fe48 	bl	8112514 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103884:	463b      	mov	r3, r7
 8103886:	2200      	movs	r2, #0
 8103888:	601a      	str	r2, [r3, #0]
 810388a:	605a      	str	r2, [r3, #4]
 810388c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 810388e:	4b23      	ldr	r3, [pc, #140]	@ (810391c <MX_TIM8_Init+0xac>)
 8103890:	4a23      	ldr	r2, [pc, #140]	@ (8103920 <MX_TIM8_Init+0xb0>)
 8103892:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8103894:	4b21      	ldr	r3, [pc, #132]	@ (810391c <MX_TIM8_Init+0xac>)
 8103896:	2200      	movs	r2, #0
 8103898:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 810389a:	4b20      	ldr	r3, [pc, #128]	@ (810391c <MX_TIM8_Init+0xac>)
 810389c:	2200      	movs	r2, #0
 810389e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4000-1;
 81038a0:	4b1e      	ldr	r3, [pc, #120]	@ (810391c <MX_TIM8_Init+0xac>)
 81038a2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 81038a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81038a8:	4b1c      	ldr	r3, [pc, #112]	@ (810391c <MX_TIM8_Init+0xac>)
 81038aa:	2200      	movs	r2, #0
 81038ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 81038ae:	4b1b      	ldr	r3, [pc, #108]	@ (810391c <MX_TIM8_Init+0xac>)
 81038b0:	2200      	movs	r2, #0
 81038b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81038b4:	4b19      	ldr	r3, [pc, #100]	@ (810391c <MX_TIM8_Init+0xac>)
 81038b6:	2200      	movs	r2, #0
 81038b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81038ba:	2303      	movs	r3, #3
 81038bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81038be:	2300      	movs	r3, #0
 81038c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81038c2:	2301      	movs	r3, #1
 81038c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81038c6:	2300      	movs	r3, #0
 81038c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 81038ca:	230a      	movs	r3, #10
 81038cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81038ce:	2300      	movs	r3, #0
 81038d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81038d2:	2301      	movs	r3, #1
 81038d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81038d6:	2300      	movs	r3, #0
 81038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 81038da:	230a      	movs	r3, #10
 81038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 81038de:	f107 030c 	add.w	r3, r7, #12
 81038e2:	4619      	mov	r1, r3
 81038e4:	480d      	ldr	r0, [pc, #52]	@ (810391c <MX_TIM8_Init+0xac>)
 81038e6:	f009 fc85 	bl	810d1f4 <HAL_TIM_Encoder_Init>
 81038ea:	4603      	mov	r3, r0
 81038ec:	2b00      	cmp	r3, #0
 81038ee:	d001      	beq.n	81038f4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 81038f0:	f000 fc00 	bl	81040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81038f4:	2300      	movs	r3, #0
 81038f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81038f8:	2300      	movs	r3, #0
 81038fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81038fc:	2300      	movs	r3, #0
 81038fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8103900:	463b      	mov	r3, r7
 8103902:	4619      	mov	r1, r3
 8103904:	4805      	ldr	r0, [pc, #20]	@ (810391c <MX_TIM8_Init+0xac>)
 8103906:	f00a fc95 	bl	810e234 <HAL_TIMEx_MasterConfigSynchronization>
 810390a:	4603      	mov	r3, r0
 810390c:	2b00      	cmp	r3, #0
 810390e:	d001      	beq.n	8103914 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8103910:	f000 fbf0 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8103914:	bf00      	nop
 8103916:	3730      	adds	r7, #48	@ 0x30
 8103918:	46bd      	mov	sp, r7
 810391a:	bd80      	pop	{r7, pc}
 810391c:	10000510 	.word	0x10000510
 8103920:	40010400 	.word	0x40010400

08103924 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8103924:	b580      	push	{r7, lr}
 8103926:	b088      	sub	sp, #32
 8103928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810392a:	f107 0310 	add.w	r3, r7, #16
 810392e:	2200      	movs	r2, #0
 8103930:	601a      	str	r2, [r3, #0]
 8103932:	605a      	str	r2, [r3, #4]
 8103934:	609a      	str	r2, [r3, #8]
 8103936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103938:	1d3b      	adds	r3, r7, #4
 810393a:	2200      	movs	r2, #0
 810393c:	601a      	str	r2, [r3, #0]
 810393e:	605a      	str	r2, [r3, #4]
 8103940:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8103942:	4b1d      	ldr	r3, [pc, #116]	@ (81039b8 <MX_TIM12_Init+0x94>)
 8103944:	4a1d      	ldr	r2, [pc, #116]	@ (81039bc <MX_TIM12_Init+0x98>)
 8103946:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8103948:	4b1b      	ldr	r3, [pc, #108]	@ (81039b8 <MX_TIM12_Init+0x94>)
 810394a:	22c7      	movs	r2, #199	@ 0xc7
 810394c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 810394e:	4b1a      	ldr	r3, [pc, #104]	@ (81039b8 <MX_TIM12_Init+0x94>)
 8103950:	2200      	movs	r2, #0
 8103952:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8103954:	4b18      	ldr	r3, [pc, #96]	@ (81039b8 <MX_TIM12_Init+0x94>)
 8103956:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810395a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810395c:	4b16      	ldr	r3, [pc, #88]	@ (81039b8 <MX_TIM12_Init+0x94>)
 810395e:	2200      	movs	r2, #0
 8103960:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103962:	4b15      	ldr	r3, [pc, #84]	@ (81039b8 <MX_TIM12_Init+0x94>)
 8103964:	2200      	movs	r2, #0
 8103966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8103968:	4813      	ldr	r0, [pc, #76]	@ (81039b8 <MX_TIM12_Init+0x94>)
 810396a:	f009 f993 	bl	810cc94 <HAL_TIM_Base_Init>
 810396e:	4603      	mov	r3, r0
 8103970:	2b00      	cmp	r3, #0
 8103972:	d001      	beq.n	8103978 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 8103974:	f000 fbbe 	bl	81040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8103978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810397c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 810397e:	f107 0310 	add.w	r3, r7, #16
 8103982:	4619      	mov	r1, r3
 8103984:	480c      	ldr	r0, [pc, #48]	@ (81039b8 <MX_TIM12_Init+0x94>)
 8103986:	f009 fef7 	bl	810d778 <HAL_TIM_ConfigClockSource>
 810398a:	4603      	mov	r3, r0
 810398c:	2b00      	cmp	r3, #0
 810398e:	d001      	beq.n	8103994 <MX_TIM12_Init+0x70>
  {
    Error_Handler();
 8103990:	f000 fbb0 	bl	81040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103994:	2300      	movs	r3, #0
 8103996:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103998:	2300      	movs	r3, #0
 810399a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 810399c:	1d3b      	adds	r3, r7, #4
 810399e:	4619      	mov	r1, r3
 81039a0:	4805      	ldr	r0, [pc, #20]	@ (81039b8 <MX_TIM12_Init+0x94>)
 81039a2:	f00a fc47 	bl	810e234 <HAL_TIMEx_MasterConfigSynchronization>
 81039a6:	4603      	mov	r3, r0
 81039a8:	2b00      	cmp	r3, #0
 81039aa:	d001      	beq.n	81039b0 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 81039ac:	f000 fba2 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 81039b0:	bf00      	nop
 81039b2:	3720      	adds	r7, #32
 81039b4:	46bd      	mov	sp, r7
 81039b6:	bd80      	pop	{r7, pc}
 81039b8:	1000055c 	.word	0x1000055c
 81039bc:	40001800 	.word	0x40001800

081039c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 81039c0:	b580      	push	{r7, lr}
 81039c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 81039c4:	4b22      	ldr	r3, [pc, #136]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039c6:	4a23      	ldr	r2, [pc, #140]	@ (8103a54 <MX_USART2_UART_Init+0x94>)
 81039c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 81039ca:	4b21      	ldr	r3, [pc, #132]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81039d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 81039d2:	4b1f      	ldr	r3, [pc, #124]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039d4:	2200      	movs	r2, #0
 81039d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 81039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039da:	2200      	movs	r2, #0
 81039dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 81039de:	4b1c      	ldr	r3, [pc, #112]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039e0:	2200      	movs	r2, #0
 81039e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 81039e4:	4b1a      	ldr	r3, [pc, #104]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039e6:	220c      	movs	r2, #12
 81039e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81039ea:	4b19      	ldr	r3, [pc, #100]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039ec:	2200      	movs	r2, #0
 81039ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 81039f0:	4b17      	ldr	r3, [pc, #92]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039f2:	2200      	movs	r2, #0
 81039f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81039f6:	4b16      	ldr	r3, [pc, #88]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039f8:	2200      	movs	r2, #0
 81039fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81039fc:	4b14      	ldr	r3, [pc, #80]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 81039fe:	2200      	movs	r2, #0
 8103a00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103a02:	4b13      	ldr	r3, [pc, #76]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 8103a04:	2200      	movs	r2, #0
 8103a06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8103a08:	4811      	ldr	r0, [pc, #68]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 8103a0a:	f00a fd3d 	bl	810e488 <HAL_UART_Init>
 8103a0e:	4603      	mov	r3, r0
 8103a10:	2b00      	cmp	r3, #0
 8103a12:	d001      	beq.n	8103a18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8103a14:	f000 fb6e 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103a18:	2100      	movs	r1, #0
 8103a1a:	480d      	ldr	r0, [pc, #52]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 8103a1c:	f00d f95f 	bl	8110cde <HAL_UARTEx_SetTxFifoThreshold>
 8103a20:	4603      	mov	r3, r0
 8103a22:	2b00      	cmp	r3, #0
 8103a24:	d001      	beq.n	8103a2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8103a26:	f000 fb65 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103a2a:	2100      	movs	r1, #0
 8103a2c:	4808      	ldr	r0, [pc, #32]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 8103a2e:	f00d f994 	bl	8110d5a <HAL_UARTEx_SetRxFifoThreshold>
 8103a32:	4603      	mov	r3, r0
 8103a34:	2b00      	cmp	r3, #0
 8103a36:	d001      	beq.n	8103a3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8103a38:	f000 fb5c 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8103a3c:	4804      	ldr	r0, [pc, #16]	@ (8103a50 <MX_USART2_UART_Init+0x90>)
 8103a3e:	f00d f915 	bl	8110c6c <HAL_UARTEx_DisableFifoMode>
 8103a42:	4603      	mov	r3, r0
 8103a44:	2b00      	cmp	r3, #0
 8103a46:	d001      	beq.n	8103a4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8103a48:	f000 fb54 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8103a4c:	bf00      	nop
 8103a4e:	bd80      	pop	{r7, pc}
 8103a50:	100005a8 	.word	0x100005a8
 8103a54:	40004400 	.word	0x40004400

08103a58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8103a58:	b580      	push	{r7, lr}
 8103a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8103a5c:	4b22      	ldr	r3, [pc, #136]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a5e:	4a23      	ldr	r2, [pc, #140]	@ (8103aec <MX_USART3_UART_Init+0x94>)
 8103a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8103a62:	4b21      	ldr	r3, [pc, #132]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8103a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a6c:	2200      	movs	r2, #0
 8103a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103a70:	4b1d      	ldr	r3, [pc, #116]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a72:	2200      	movs	r2, #0
 8103a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8103a76:	4b1c      	ldr	r3, [pc, #112]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a78:	2200      	movs	r2, #0
 8103a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a7e:	220c      	movs	r2, #12
 8103a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103a82:	4b19      	ldr	r3, [pc, #100]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a84:	2200      	movs	r2, #0
 8103a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103a88:	4b17      	ldr	r3, [pc, #92]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a8a:	2200      	movs	r2, #0
 8103a8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103a8e:	4b16      	ldr	r3, [pc, #88]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a90:	2200      	movs	r2, #0
 8103a92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103a94:	4b14      	ldr	r3, [pc, #80]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a96:	2200      	movs	r2, #0
 8103a98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103a9a:	4b13      	ldr	r3, [pc, #76]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103a9c:	2200      	movs	r2, #0
 8103a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103aa0:	4811      	ldr	r0, [pc, #68]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103aa2:	f00a fcf1 	bl	810e488 <HAL_UART_Init>
 8103aa6:	4603      	mov	r3, r0
 8103aa8:	2b00      	cmp	r3, #0
 8103aaa:	d001      	beq.n	8103ab0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8103aac:	f000 fb22 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103ab0:	2100      	movs	r1, #0
 8103ab2:	480d      	ldr	r0, [pc, #52]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103ab4:	f00d f913 	bl	8110cde <HAL_UARTEx_SetTxFifoThreshold>
 8103ab8:	4603      	mov	r3, r0
 8103aba:	2b00      	cmp	r3, #0
 8103abc:	d001      	beq.n	8103ac2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8103abe:	f000 fb19 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103ac2:	2100      	movs	r1, #0
 8103ac4:	4808      	ldr	r0, [pc, #32]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103ac6:	f00d f948 	bl	8110d5a <HAL_UARTEx_SetRxFifoThreshold>
 8103aca:	4603      	mov	r3, r0
 8103acc:	2b00      	cmp	r3, #0
 8103ace:	d001      	beq.n	8103ad4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8103ad0:	f000 fb10 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8103ad4:	4804      	ldr	r0, [pc, #16]	@ (8103ae8 <MX_USART3_UART_Init+0x90>)
 8103ad6:	f00d f8c9 	bl	8110c6c <HAL_UARTEx_DisableFifoMode>
 8103ada:	4603      	mov	r3, r0
 8103adc:	2b00      	cmp	r3, #0
 8103ade:	d001      	beq.n	8103ae4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8103ae0:	f000 fb08 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8103ae4:	bf00      	nop
 8103ae6:	bd80      	pop	{r7, pc}
 8103ae8:	1000063c 	.word	0x1000063c
 8103aec:	40004800 	.word	0x40004800

08103af0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8103af0:	b580      	push	{r7, lr}
 8103af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8103af4:	4b22      	ldr	r3, [pc, #136]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103af6:	4a23      	ldr	r2, [pc, #140]	@ (8103b84 <MX_USART6_UART_Init+0x94>)
 8103af8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8103afa:	4b21      	ldr	r3, [pc, #132]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103b00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8103b02:	4b1f      	ldr	r3, [pc, #124]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b04:	2200      	movs	r2, #0
 8103b06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8103b08:	4b1d      	ldr	r3, [pc, #116]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b0a:	2200      	movs	r2, #0
 8103b0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8103b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b10:	2200      	movs	r2, #0
 8103b12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8103b14:	4b1a      	ldr	r3, [pc, #104]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b16:	220c      	movs	r2, #12
 8103b18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103b1a:	4b19      	ldr	r3, [pc, #100]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b1c:	2200      	movs	r2, #0
 8103b1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8103b20:	4b17      	ldr	r3, [pc, #92]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b22:	2200      	movs	r2, #0
 8103b24:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103b26:	4b16      	ldr	r3, [pc, #88]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b28:	2200      	movs	r2, #0
 8103b2a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103b2c:	4b14      	ldr	r3, [pc, #80]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b2e:	2200      	movs	r2, #0
 8103b30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103b32:	4b13      	ldr	r3, [pc, #76]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b34:	2200      	movs	r2, #0
 8103b36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8103b38:	4811      	ldr	r0, [pc, #68]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b3a:	f00a fca5 	bl	810e488 <HAL_UART_Init>
 8103b3e:	4603      	mov	r3, r0
 8103b40:	2b00      	cmp	r3, #0
 8103b42:	d001      	beq.n	8103b48 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8103b44:	f000 fad6 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103b48:	2100      	movs	r1, #0
 8103b4a:	480d      	ldr	r0, [pc, #52]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b4c:	f00d f8c7 	bl	8110cde <HAL_UARTEx_SetTxFifoThreshold>
 8103b50:	4603      	mov	r3, r0
 8103b52:	2b00      	cmp	r3, #0
 8103b54:	d001      	beq.n	8103b5a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8103b56:	f000 facd 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103b5a:	2100      	movs	r1, #0
 8103b5c:	4808      	ldr	r0, [pc, #32]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b5e:	f00d f8fc 	bl	8110d5a <HAL_UARTEx_SetRxFifoThreshold>
 8103b62:	4603      	mov	r3, r0
 8103b64:	2b00      	cmp	r3, #0
 8103b66:	d001      	beq.n	8103b6c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8103b68:	f000 fac4 	bl	81040f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8103b6c:	4804      	ldr	r0, [pc, #16]	@ (8103b80 <MX_USART6_UART_Init+0x90>)
 8103b6e:	f00d f87d 	bl	8110c6c <HAL_UARTEx_DisableFifoMode>
 8103b72:	4603      	mov	r3, r0
 8103b74:	2b00      	cmp	r3, #0
 8103b76:	d001      	beq.n	8103b7c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8103b78:	f000 fabc 	bl	81040f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8103b7c:	bf00      	nop
 8103b7e:	bd80      	pop	{r7, pc}
 8103b80:	100006d0 	.word	0x100006d0
 8103b84:	40011400 	.word	0x40011400

08103b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8103b88:	b580      	push	{r7, lr}
 8103b8a:	b082      	sub	sp, #8
 8103b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8103b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8103bc4 <MX_DMA_Init+0x3c>)
 8103b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103b94:	4a0b      	ldr	r2, [pc, #44]	@ (8103bc4 <MX_DMA_Init+0x3c>)
 8103b96:	f043 0302 	orr.w	r3, r3, #2
 8103b9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103b9e:	4b09      	ldr	r3, [pc, #36]	@ (8103bc4 <MX_DMA_Init+0x3c>)
 8103ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103ba4:	f003 0302 	and.w	r3, r3, #2
 8103ba8:	607b      	str	r3, [r7, #4]
 8103baa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8103bac:	2200      	movs	r2, #0
 8103bae:	2100      	movs	r1, #0
 8103bb0:	2039      	movs	r0, #57	@ 0x39
 8103bb2:	f002 feac 	bl	810690e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8103bb6:	2039      	movs	r0, #57	@ 0x39
 8103bb8:	f002 fec3 	bl	8106942 <HAL_NVIC_EnableIRQ>

}
 8103bbc:	bf00      	nop
 8103bbe:	3708      	adds	r7, #8
 8103bc0:	46bd      	mov	sp, r7
 8103bc2:	bd80      	pop	{r7, pc}
 8103bc4:	58024400 	.word	0x58024400

08103bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8103bc8:	b580      	push	{r7, lr}
 8103bca:	b08c      	sub	sp, #48	@ 0x30
 8103bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103bce:	f107 031c 	add.w	r3, r7, #28
 8103bd2:	2200      	movs	r2, #0
 8103bd4:	601a      	str	r2, [r3, #0]
 8103bd6:	605a      	str	r2, [r3, #4]
 8103bd8:	609a      	str	r2, [r3, #8]
 8103bda:	60da      	str	r2, [r3, #12]
 8103bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8103bde:	4b55      	ldr	r3, [pc, #340]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103be4:	4a53      	ldr	r2, [pc, #332]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103be6:	f043 0304 	orr.w	r3, r3, #4
 8103bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103bee:	4b51      	ldr	r3, [pc, #324]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103bf4:	f003 0304 	and.w	r3, r3, #4
 8103bf8:	61bb      	str	r3, [r7, #24]
 8103bfa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8103bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c02:	4a4c      	ldr	r2, [pc, #304]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c04:	f043 0301 	orr.w	r3, r3, #1
 8103c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c0c:	4b49      	ldr	r3, [pc, #292]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c12:	f003 0301 	and.w	r3, r3, #1
 8103c16:	617b      	str	r3, [r7, #20]
 8103c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8103c1a:	4b46      	ldr	r3, [pc, #280]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c20:	4a44      	ldr	r2, [pc, #272]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c22:	f043 0320 	orr.w	r3, r3, #32
 8103c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c2a:	4b42      	ldr	r3, [pc, #264]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c30:	f003 0320 	and.w	r3, r3, #32
 8103c34:	613b      	str	r3, [r7, #16]
 8103c36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8103c38:	4b3e      	ldr	r3, [pc, #248]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c3e:	4a3d      	ldr	r2, [pc, #244]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c40:	f043 0310 	orr.w	r3, r3, #16
 8103c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c48:	4b3a      	ldr	r3, [pc, #232]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c4e:	f003 0310 	and.w	r3, r3, #16
 8103c52:	60fb      	str	r3, [r7, #12]
 8103c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8103c56:	4b37      	ldr	r3, [pc, #220]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c5c:	4a35      	ldr	r2, [pc, #212]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c5e:	f043 0302 	orr.w	r3, r3, #2
 8103c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c66:	4b33      	ldr	r3, [pc, #204]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c6c:	f003 0302 	and.w	r3, r3, #2
 8103c70:	60bb      	str	r3, [r7, #8]
 8103c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8103c74:	4b2f      	ldr	r3, [pc, #188]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c7a:	4a2e      	ldr	r2, [pc, #184]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c7c:	f043 0308 	orr.w	r3, r3, #8
 8103c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c84:	4b2b      	ldr	r3, [pc, #172]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c8a:	f003 0308 	and.w	r3, r3, #8
 8103c8e:	607b      	str	r3, [r7, #4]
 8103c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8103c92:	4b28      	ldr	r3, [pc, #160]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c98:	4a26      	ldr	r2, [pc, #152]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8103c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103ca2:	4b24      	ldr	r3, [pc, #144]	@ (8103d34 <MX_GPIO_Init+0x16c>)
 8103ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103cac:	603b      	str	r3, [r7, #0]
 8103cae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8103cb0:	2200      	movs	r2, #0
 8103cb2:	2130      	movs	r1, #48	@ 0x30
 8103cb4:	4820      	ldr	r0, [pc, #128]	@ (8103d38 <MX_GPIO_Init+0x170>)
 8103cb6:	f005 fa47 	bl	8109148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8103cba:	2200      	movs	r2, #0
 8103cbc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8103cc0:	481e      	ldr	r0, [pc, #120]	@ (8103d3c <MX_GPIO_Init+0x174>)
 8103cc2:	f005 fa41 	bl	8109148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8103cc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8103ccc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8103cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103cd2:	2300      	movs	r3, #0
 8103cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103cd6:	f107 031c 	add.w	r3, r7, #28
 8103cda:	4619      	mov	r1, r3
 8103cdc:	4818      	ldr	r0, [pc, #96]	@ (8103d40 <MX_GPIO_Init+0x178>)
 8103cde:	f005 f883 	bl	8108de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8103ce2:	2330      	movs	r3, #48	@ 0x30
 8103ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103ce6:	2301      	movs	r3, #1
 8103ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103cea:	2300      	movs	r3, #0
 8103cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103cee:	2300      	movs	r3, #0
 8103cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103cf2:	f107 031c 	add.w	r3, r7, #28
 8103cf6:	4619      	mov	r1, r3
 8103cf8:	480f      	ldr	r0, [pc, #60]	@ (8103d38 <MX_GPIO_Init+0x170>)
 8103cfa:	f005 f875 	bl	8108de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8103cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103d04:	2301      	movs	r3, #1
 8103d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103d08:	2300      	movs	r3, #0
 8103d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103d0c:	2300      	movs	r3, #0
 8103d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103d10:	f107 031c 	add.w	r3, r7, #28
 8103d14:	4619      	mov	r1, r3
 8103d16:	4809      	ldr	r0, [pc, #36]	@ (8103d3c <MX_GPIO_Init+0x174>)
 8103d18:	f005 f866 	bl	8108de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8103d1c:	2200      	movs	r2, #0
 8103d1e:	2100      	movs	r1, #0
 8103d20:	2028      	movs	r0, #40	@ 0x28
 8103d22:	f002 fdf4 	bl	810690e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8103d26:	2028      	movs	r0, #40	@ 0x28
 8103d28:	f002 fe0b 	bl	8106942 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8103d2c:	bf00      	nop
 8103d2e:	3730      	adds	r7, #48	@ 0x30
 8103d30:	46bd      	mov	sp, r7
 8103d32:	bd80      	pop	{r7, pc}
 8103d34:	58024400 	.word	0x58024400
 8103d38:	58020000 	.word	0x58020000
 8103d3c:	58020400 	.word	0x58020400
 8103d40:	58020800 	.word	0x58020800

08103d44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8103d44:	b480      	push	{r7}
 8103d46:	b083      	sub	sp, #12
 8103d48:	af00      	add	r7, sp, #0
 8103d4a:	4603      	mov	r3, r0
 8103d4c:	80fb      	strh	r3, [r7, #6]

//FUNZIONE DI CALLBACK PULSANTE BLU
	if (GPIO_Pin == GPIO_PIN_13) {
 8103d4e:	88fb      	ldrh	r3, [r7, #6]
 8103d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103d54:	d105      	bne.n	8103d62 <HAL_GPIO_EXTI_Callback+0x1e>

		tasto_premuto = 1;
 8103d56:	4b06      	ldr	r3, [pc, #24]	@ (8103d70 <HAL_GPIO_EXTI_Callback+0x2c>)
 8103d58:	2201      	movs	r2, #1
 8103d5a:	601a      	str	r2, [r3, #0]
		tasto_appena_premuto = 1;
 8103d5c:	4b05      	ldr	r3, [pc, #20]	@ (8103d74 <HAL_GPIO_EXTI_Callback+0x30>)
 8103d5e:	2201      	movs	r2, #1
 8103d60:	601a      	str	r2, [r3, #0]

	}
}
 8103d62:	bf00      	nop
 8103d64:	370c      	adds	r7, #12
 8103d66:	46bd      	mov	sp, r7
 8103d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d6c:	4770      	bx	lr
 8103d6e:	bf00      	nop
 8103d70:	1000d040 	.word	0x1000d040
 8103d74:	1000d044 	.word	0x1000d044

08103d78 <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8103d78:	b580      	push	{r7, lr}
 8103d7a:	b082      	sub	sp, #8
 8103d7c:	af00      	add	r7, sp, #0
 8103d7e:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	4a53      	ldr	r2, [pc, #332]	@ (8103ed0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8103d84:	4293      	cmp	r3, r2
 8103d86:	d140      	bne.n	8103e0a <HAL_TIM_PeriodElapsedCallback+0x92>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 8103d88:	4b52      	ldr	r3, [pc, #328]	@ (8103ed4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8103d8a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8103d8e:	601a      	str	r2, [r3, #0]
		n_ref++;
 8103d90:	4b51      	ldr	r3, [pc, #324]	@ (8103ed8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	3301      	adds	r3, #1
 8103d96:	4a50      	ldr	r2, [pc, #320]	@ (8103ed8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8103d98:	6013      	str	r3, [r2, #0]
		tempo += 0.01;
 8103d9a:	4b50      	ldr	r3, [pc, #320]	@ (8103edc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	4618      	mov	r0, r3
 8103da0:	f7fc fc5a 	bl	8100658 <__aeabi_f2d>
 8103da4:	a348      	add	r3, pc, #288	@ (adr r3, 8103ec8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8103da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103daa:	f7fc faf7 	bl	810039c <__adddf3>
 8103dae:	4602      	mov	r2, r0
 8103db0:	460b      	mov	r3, r1
 8103db2:	4610      	mov	r0, r2
 8103db4:	4619      	mov	r1, r3
 8103db6:	f7fc ff9f 	bl	8100cf8 <__aeabi_d2f>
 8103dba:	4603      	mov	r3, r0
 8103dbc:	4a47      	ldr	r2, [pc, #284]	@ (8103edc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8103dbe:	6013      	str	r3, [r2, #0]
		if (n_ref > 100 * 500)
 8103dc0:	4b45      	ldr	r3, [pc, #276]	@ (8103ed8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8103dc8:	4293      	cmp	r3, r2
 8103dca:	dd02      	ble.n	8103dd2 <HAL_TIM_PeriodElapsedCallback+0x5a>
			n_ref = 0;
 8103dcc:	4b42      	ldr	r3, [pc, #264]	@ (8103ed8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8103dce:	2200      	movs	r2, #0
 8103dd0:	601a      	str	r2, [r3, #0]

		if (tempo > 3600)
 8103dd2:	4b42      	ldr	r3, [pc, #264]	@ (8103edc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8103dd4:	edd3 7a00 	vldr	s15, [r3]
 8103dd8:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8103ee0 <HAL_TIM_PeriodElapsedCallback+0x168>
 8103ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103de4:	dd03      	ble.n	8103dee <HAL_TIM_PeriodElapsedCallback+0x76>
			tempo = 0;
 8103de6:	4b3d      	ldr	r3, [pc, #244]	@ (8103edc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8103de8:	f04f 0200 	mov.w	r2, #0
 8103dec:	601a      	str	r2, [r3, #0]

		contatore_esp320++;
 8103dee:	4b3d      	ldr	r3, [pc, #244]	@ (8103ee4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	3301      	adds	r3, #1
 8103df4:	4a3b      	ldr	r2, [pc, #236]	@ (8103ee4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8103df6:	6013      	str	r3, [r2, #0]
		if (contatore_esp320 > 3000)
 8103df8:	4b3a      	ldr	r3, [pc, #232]	@ (8103ee4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8103e00:	4293      	cmp	r3, r2
 8103e02:	dd02      	ble.n	8103e0a <HAL_TIM_PeriodElapsedCallback+0x92>
			contatore_esp320 = 0;
 8103e04:	4b37      	ldr	r3, [pc, #220]	@ (8103ee4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8103e06:	2200      	movs	r2, #0
 8103e08:	601a      	str	r2, [r3, #0]

	}

	if (htim == &htim12){
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	4a36      	ldr	r2, [pc, #216]	@ (8103ee8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8103e0e:	4293      	cmp	r3, r2
 8103e10:	d12b      	bne.n	8103e6a <HAL_TIM_PeriodElapsedCallback+0xf2>
			flag_1ms = 1;
 8103e12:	4b36      	ldr	r3, [pc, #216]	@ (8103eec <HAL_TIM_PeriodElapsedCallback+0x174>)
 8103e14:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8103e18:	601a      	str	r2, [r3, #0]
			if(tempo_1ms >1000) contatore_1ms = 0;
 8103e1a:	4b35      	ldr	r3, [pc, #212]	@ (8103ef0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8103e1c:	edd3 7a00 	vldr	s15, [r3]
 8103e20:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8103ef4 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8103e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103e2c:	dd04      	ble.n	8103e38 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8103e2e:	4b32      	ldr	r3, [pc, #200]	@ (8103ef8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8103e30:	f04f 0200 	mov.w	r2, #0
 8103e34:	601a      	str	r2, [r3, #0]
 8103e36:	e009      	b.n	8103e4c <HAL_TIM_PeriodElapsedCallback+0xd4>
			else contatore_1ms++;
 8103e38:	4b2f      	ldr	r3, [pc, #188]	@ (8103ef8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8103e3a:	edd3 7a00 	vldr	s15, [r3]
 8103e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8103e46:	4b2c      	ldr	r3, [pc, #176]	@ (8103ef8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8103e48:	edc3 7a00 	vstr	s15, [r3]
			tempo_1ms = contatore_1ms/1000;
 8103e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8103ef8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8103e4e:	ed93 7a00 	vldr	s14, [r3]
 8103e52:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8103ef4 <HAL_TIM_PeriodElapsedCallback+0x17c>
 8103e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103e5a:	4b25      	ldr	r3, [pc, #148]	@ (8103ef0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8103e5c:	edc3 7a00 	vstr	s15, [r3]

			contatore_messaggi++;
 8103e60:	4b26      	ldr	r3, [pc, #152]	@ (8103efc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8103e62:	681b      	ldr	r3, [r3, #0]
 8103e64:	3301      	adds	r3, #1
 8103e66:	4a25      	ldr	r2, [pc, #148]	@ (8103efc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8103e68:	6013      	str	r3, [r2, #0]



		}

	if (htim == &htim6) {
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	4a24      	ldr	r2, [pc, #144]	@ (8103f00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8103e6e:	4293      	cmp	r3, r2
 8103e70:	d124      	bne.n	8103ebc <HAL_TIM_PeriodElapsedCallback+0x144>

		// Gestione dell’invio periodico dei dati

		//printf(bufferDati,indiceBuffer);
		indiceBuffer = 0;
 8103e72:	4b24      	ldr	r3, [pc, #144]	@ (8103f04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103e74:	2200      	movs	r2, #0
 8103e76:	601a      	str	r2, [r3, #0]
		memset(bufferDati, 0, sizeof(bufferDati));
 8103e78:	f24c 7238 	movw	r2, #51000	@ 0xc738
 8103e7c:	2100      	movs	r1, #0
 8103e7e:	4822      	ldr	r0, [pc, #136]	@ (8103f08 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8103e80:	f00e fb48 	bl	8112514 <memset>

		if (trasmissione_attiva == 1) {
 8103e84:	4b21      	ldr	r3, [pc, #132]	@ (8103f0c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8103e86:	781b      	ldrb	r3, [r3, #0]
 8103e88:	2b01      	cmp	r3, #1
 8103e8a:	d117      	bne.n	8103ebc <HAL_TIM_PeriodElapsedCallback+0x144>
			 dati.accelerazione, dati.tempo);
			 printf("Dati trasmessi: %s\r\n", buffer);
			 //Trasmissione_dati(buffer, bytesWritten);
			 * */
			//printf("Dati trasmessi: %s\r\n", bufferDati);
			Trasmissione_dati(bufferDati, indiceBuffer);
 8103e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8103f04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103e8e:	681b      	ldr	r3, [r3, #0]
 8103e90:	4619      	mov	r1, r3
 8103e92:	481d      	ldr	r0, [pc, #116]	@ (8103f08 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8103e94:	f000 f858 	bl	8103f48 <Trasmissione_dati>
			indiceBuffer = 0;
 8103e98:	4b1a      	ldr	r3, [pc, #104]	@ (8103f04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103e9a:	2200      	movs	r2, #0
 8103e9c:	601a      	str	r2, [r3, #0]
			//in genere indice buffer arriva a sui 15000 ogni 3 secondi
			if (indiceBuffer >= 30000) //se per qualche motivo non avviene l'azzeramento dell'indice
 8103e9e:	4b19      	ldr	r3, [pc, #100]	@ (8103f04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8103ea6:	4293      	cmp	r3, r2
 8103ea8:	dd02      	ble.n	8103eb0 <HAL_TIM_PeriodElapsedCallback+0x138>
				indiceBuffer = 0;
 8103eaa:	4b16      	ldr	r3, [pc, #88]	@ (8103f04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8103eac:	2200      	movs	r2, #0
 8103eae:	601a      	str	r2, [r3, #0]
			memset(bufferDati, 0, sizeof(bufferDati));  // Pulizia buffer
 8103eb0:	f24c 7238 	movw	r2, #51000	@ 0xc738
 8103eb4:	2100      	movs	r1, #0
 8103eb6:	4814      	ldr	r0, [pc, #80]	@ (8103f08 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8103eb8:	f00e fb2c 	bl	8112514 <memset>


	}


}
 8103ebc:	bf00      	nop
 8103ebe:	3708      	adds	r7, #8
 8103ec0:	46bd      	mov	sp, r7
 8103ec2:	bd80      	pop	{r7, pc}
 8103ec4:	f3af 8000 	nop.w
 8103ec8:	47ae147b 	.word	0x47ae147b
 8103ecc:	3f847ae1 	.word	0x3f847ae1
 8103ed0:	10000394 	.word	0x10000394
 8103ed4:	1000cfcc 	.word	0x1000cfcc
 8103ed8:	1000d288 	.word	0x1000d288
 8103edc:	1000cf18 	.word	0x1000cf18
 8103ee0:	45610000 	.word	0x45610000
 8103ee4:	1000d048 	.word	0x1000d048
 8103ee8:	1000055c 	.word	0x1000055c
 8103eec:	1000cfd4 	.word	0x1000cfd4
 8103ef0:	1000cf1c 	.word	0x1000cf1c
 8103ef4:	447a0000 	.word	0x447a0000
 8103ef8:	1000cf20 	.word	0x1000cf20
 8103efc:	1000cfd0 	.word	0x1000cfd0
 8103f00:	10000478 	.word	0x10000478
 8103f04:	1000cf14 	.word	0x1000cf14
 8103f08:	100007dc 	.word	0x100007dc
 8103f0c:	1000d291 	.word	0x1000d291

08103f10 <__io_getchar>:
	//HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF); putty
	HAL_UART_Transmit(&huart6,(uint8_t*) &ch, 1, 0xFFFF);

	return ch;
}
int __io_getchar(void) {
 8103f10:	b580      	push	{r7, lr}
 8103f12:	b082      	sub	sp, #8
 8103f14:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8103f16:	4b0b      	ldr	r3, [pc, #44]	@ (8103f44 <__io_getchar+0x34>)
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	2208      	movs	r2, #8
 8103f1c:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103f1e:	1df9      	adds	r1, r7, #7
 8103f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103f24:	2201      	movs	r2, #1
 8103f26:	4807      	ldr	r0, [pc, #28]	@ (8103f44 <__io_getchar+0x34>)
 8103f28:	f00a fb8c 	bl	810e644 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103f2c:	1df9      	adds	r1, r7, #7
 8103f2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103f32:	2201      	movs	r2, #1
 8103f34:	4803      	ldr	r0, [pc, #12]	@ (8103f44 <__io_getchar+0x34>)
 8103f36:	f00a faf7 	bl	810e528 <HAL_UART_Transmit>
	return ch;
 8103f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8103f3c:	4618      	mov	r0, r3
 8103f3e:	3708      	adds	r7, #8
 8103f40:	46bd      	mov	sp, r7
 8103f42:	bd80      	pop	{r7, pc}
 8103f44:	1000063c 	.word	0x1000063c

08103f48 <Trasmissione_dati>:
//******************

// Funzione per trasmettere dati tramite UART2
void Trasmissione_dati(void *data, size_t size) {
 8103f48:	b580      	push	{r7, lr}
 8103f4a:	b082      	sub	sp, #8
 8103f4c:	af00      	add	r7, sp, #0
 8103f4e:	6078      	str	r0, [r7, #4]
 8103f50:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, size, HAL_MAX_DELAY);
 8103f52:	683b      	ldr	r3, [r7, #0]
 8103f54:	b29a      	uxth	r2, r3
 8103f56:	f04f 33ff 	mov.w	r3, #4294967295
 8103f5a:	6879      	ldr	r1, [r7, #4]
 8103f5c:	4803      	ldr	r0, [pc, #12]	@ (8103f6c <Trasmissione_dati+0x24>)
 8103f5e:	f00a fae3 	bl	810e528 <HAL_UART_Transmit>
}
 8103f62:	bf00      	nop
 8103f64:	3708      	adds	r7, #8
 8103f66:	46bd      	mov	sp, r7
 8103f68:	bd80      	pop	{r7, pc}
 8103f6a:	bf00      	nop
 8103f6c:	100005a8 	.word	0x100005a8

08103f70 <HAL_UART_RxCpltCallback>:

// Callback chiamata quando un byte viene ricevuto sulla UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8103f70:	b580      	push	{r7, lr}
 8103f72:	b082      	sub	sp, #8
 8103f74:	af00      	add	r7, sp, #0
 8103f76:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	4a46      	ldr	r2, [pc, #280]	@ (8104094 <HAL_UART_RxCpltCallback+0x124>)
 8103f7c:	4293      	cmp	r3, r2
 8103f7e:	f040 8085 	bne.w	810408c <HAL_UART_RxCpltCallback+0x11c>
		if (rx_buffer[0] == 'S') {
 8103f82:	4b45      	ldr	r3, [pc, #276]	@ (8104098 <HAL_UART_RxCpltCallback+0x128>)
 8103f84:	781b      	ldrb	r3, [r3, #0]
 8103f86:	2b53      	cmp	r3, #83	@ 0x53
 8103f88:	d109      	bne.n	8103f9e <HAL_UART_RxCpltCallback+0x2e>
			// Interrompi la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 8103f8a:	4b43      	ldr	r3, [pc, #268]	@ (8104098 <HAL_UART_RxCpltCallback+0x128>)
 8103f8c:	781b      	ldrb	r3, [r3, #0]
 8103f8e:	4619      	mov	r1, r3
 8103f90:	4842      	ldr	r0, [pc, #264]	@ (810409c <HAL_UART_RxCpltCallback+0x12c>)
 8103f92:	f00e f9b5 	bl	8112300 <iprintf>
			trasmissione_attiva = 0;
 8103f96:	4b42      	ldr	r3, [pc, #264]	@ (81040a0 <HAL_UART_RxCpltCallback+0x130>)
 8103f98:	2200      	movs	r2, #0
 8103f9a:	701a      	strb	r2, [r3, #0]
 8103f9c:	e04c      	b.n	8104038 <HAL_UART_RxCpltCallback+0xc8>

		} else if (rx_buffer[0] == 'V') {
 8103f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8104098 <HAL_UART_RxCpltCallback+0x128>)
 8103fa0:	781b      	ldrb	r3, [r3, #0]
 8103fa2:	2b56      	cmp	r3, #86	@ 0x56
 8103fa4:	d109      	bne.n	8103fba <HAL_UART_RxCpltCallback+0x4a>
			// Avvia la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 8103fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8104098 <HAL_UART_RxCpltCallback+0x128>)
 8103fa8:	781b      	ldrb	r3, [r3, #0]
 8103faa:	4619      	mov	r1, r3
 8103fac:	483b      	ldr	r0, [pc, #236]	@ (810409c <HAL_UART_RxCpltCallback+0x12c>)
 8103fae:	f00e f9a7 	bl	8112300 <iprintf>
			trasmissione_attiva = 1;
 8103fb2:	4b3b      	ldr	r3, [pc, #236]	@ (81040a0 <HAL_UART_RxCpltCallback+0x130>)
 8103fb4:	2201      	movs	r2, #1
 8103fb6:	701a      	strb	r2, [r3, #0]
 8103fb8:	e03e      	b.n	8104038 <HAL_UART_RxCpltCallback+0xc8>
		} else if (rx_buffer[0] == 'P') {
 8103fba:	4b37      	ldr	r3, [pc, #220]	@ (8104098 <HAL_UART_RxCpltCallback+0x128>)
 8103fbc:	781b      	ldrb	r3, [r3, #0]
 8103fbe:	2b50      	cmp	r3, #80	@ 0x50
 8103fc0:	d13a      	bne.n	8104038 <HAL_UART_RxCpltCallback+0xc8>
			//HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
			i = 1;
 8103fc2:	4b38      	ldr	r3, [pc, #224]	@ (81040a4 <HAL_UART_RxCpltCallback+0x134>)
 8103fc4:	2201      	movs	r2, #1
 8103fc6:	601a      	str	r2, [r3, #0]
			// Ricevi 4 byte tramite UART (blocca fino a ricezione)
			HAL_UART_Receive_IT(&huart2, &bytesricevuti, 12);
 8103fc8:	220c      	movs	r2, #12
 8103fca:	4937      	ldr	r1, [pc, #220]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8103fcc:	4831      	ldr	r0, [pc, #196]	@ (8104094 <HAL_UART_RxCpltCallback+0x124>)
 8103fce:	f00a fc01 	bl	810e7d4 <HAL_UART_Receive_IT>
			rx_buffer[0] = 0;
 8103fd2:	4b31      	ldr	r3, [pc, #196]	@ (8104098 <HAL_UART_RxCpltCallback+0x128>)
 8103fd4:	2200      	movs	r2, #0
 8103fd6:	701a      	strb	r2, [r3, #0]
			// Ricostruisci il float dai 4 byte ricevuti
			bytesricevuti1[0] = bytesricevuti[0];
 8103fd8:	4b33      	ldr	r3, [pc, #204]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8103fda:	781a      	ldrb	r2, [r3, #0]
 8103fdc:	4b33      	ldr	r3, [pc, #204]	@ (81040ac <HAL_UART_RxCpltCallback+0x13c>)
 8103fde:	701a      	strb	r2, [r3, #0]
			bytesricevuti1[1] = bytesricevuti[1];
 8103fe0:	4b31      	ldr	r3, [pc, #196]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8103fe2:	785a      	ldrb	r2, [r3, #1]
 8103fe4:	4b31      	ldr	r3, [pc, #196]	@ (81040ac <HAL_UART_RxCpltCallback+0x13c>)
 8103fe6:	705a      	strb	r2, [r3, #1]
			bytesricevuti1[2] = bytesricevuti[2];
 8103fe8:	4b2f      	ldr	r3, [pc, #188]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8103fea:	789a      	ldrb	r2, [r3, #2]
 8103fec:	4b2f      	ldr	r3, [pc, #188]	@ (81040ac <HAL_UART_RxCpltCallback+0x13c>)
 8103fee:	709a      	strb	r2, [r3, #2]
			bytesricevuti1[3] = bytesricevuti[3];
 8103ff0:	4b2d      	ldr	r3, [pc, #180]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8103ff2:	78da      	ldrb	r2, [r3, #3]
 8103ff4:	4b2d      	ldr	r3, [pc, #180]	@ (81040ac <HAL_UART_RxCpltCallback+0x13c>)
 8103ff6:	70da      	strb	r2, [r3, #3]
			bytesricevuti2[0] = bytesricevuti[4];
 8103ff8:	4b2b      	ldr	r3, [pc, #172]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8103ffa:	791a      	ldrb	r2, [r3, #4]
 8103ffc:	4b2c      	ldr	r3, [pc, #176]	@ (81040b0 <HAL_UART_RxCpltCallback+0x140>)
 8103ffe:	701a      	strb	r2, [r3, #0]
			bytesricevuti2[1] = bytesricevuti[5];
 8104000:	4b29      	ldr	r3, [pc, #164]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8104002:	795a      	ldrb	r2, [r3, #5]
 8104004:	4b2a      	ldr	r3, [pc, #168]	@ (81040b0 <HAL_UART_RxCpltCallback+0x140>)
 8104006:	705a      	strb	r2, [r3, #1]
			bytesricevuti2[2] = bytesricevuti[6];
 8104008:	4b27      	ldr	r3, [pc, #156]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 810400a:	799a      	ldrb	r2, [r3, #6]
 810400c:	4b28      	ldr	r3, [pc, #160]	@ (81040b0 <HAL_UART_RxCpltCallback+0x140>)
 810400e:	709a      	strb	r2, [r3, #2]
			bytesricevuti2[3] = bytesricevuti[7];
 8104010:	4b25      	ldr	r3, [pc, #148]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8104012:	79da      	ldrb	r2, [r3, #7]
 8104014:	4b26      	ldr	r3, [pc, #152]	@ (81040b0 <HAL_UART_RxCpltCallback+0x140>)
 8104016:	70da      	strb	r2, [r3, #3]
			bytesricevuti3[0] = bytesricevuti[8];
 8104018:	4b23      	ldr	r3, [pc, #140]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 810401a:	7a1a      	ldrb	r2, [r3, #8]
 810401c:	4b25      	ldr	r3, [pc, #148]	@ (81040b4 <HAL_UART_RxCpltCallback+0x144>)
 810401e:	701a      	strb	r2, [r3, #0]
			bytesricevuti3[1] = bytesricevuti[9];
 8104020:	4b21      	ldr	r3, [pc, #132]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8104022:	7a5a      	ldrb	r2, [r3, #9]
 8104024:	4b23      	ldr	r3, [pc, #140]	@ (81040b4 <HAL_UART_RxCpltCallback+0x144>)
 8104026:	705a      	strb	r2, [r3, #1]
			bytesricevuti3[2] = bytesricevuti[10];
 8104028:	4b1f      	ldr	r3, [pc, #124]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 810402a:	7a9a      	ldrb	r2, [r3, #10]
 810402c:	4b21      	ldr	r3, [pc, #132]	@ (81040b4 <HAL_UART_RxCpltCallback+0x144>)
 810402e:	709a      	strb	r2, [r3, #2]
			bytesricevuti3[3] = bytesricevuti[11];
 8104030:	4b1d      	ldr	r3, [pc, #116]	@ (81040a8 <HAL_UART_RxCpltCallback+0x138>)
 8104032:	7ada      	ldrb	r2, [r3, #11]
 8104034:	4b1f      	ldr	r3, [pc, #124]	@ (81040b4 <HAL_UART_RxCpltCallback+0x144>)
 8104036:	70da      	strb	r2, [r3, #3]

			//printf("float: %f",floatricevuto);

		}

		HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
 8104038:	2201      	movs	r2, #1
 810403a:	4917      	ldr	r1, [pc, #92]	@ (8104098 <HAL_UART_RxCpltCallback+0x128>)
 810403c:	4815      	ldr	r0, [pc, #84]	@ (8104094 <HAL_UART_RxCpltCallback+0x124>)
 810403e:	f00a fbc9 	bl	810e7d4 <HAL_UART_Receive_IT>
		memcpy(&floatricevuto1, &bytesricevuti1, sizeof(float));
 8104042:	4b1a      	ldr	r3, [pc, #104]	@ (81040ac <HAL_UART_RxCpltCallback+0x13c>)
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	4a1c      	ldr	r2, [pc, #112]	@ (81040b8 <HAL_UART_RxCpltCallback+0x148>)
 8104048:	6013      	str	r3, [r2, #0]
		memcpy(&floatricevuto2, &bytesricevuti2, sizeof(float));
 810404a:	4b19      	ldr	r3, [pc, #100]	@ (81040b0 <HAL_UART_RxCpltCallback+0x140>)
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	4a1b      	ldr	r2, [pc, #108]	@ (81040bc <HAL_UART_RxCpltCallback+0x14c>)
 8104050:	6013      	str	r3, [r2, #0]
		memcpy(&floatricevuto3, &bytesricevuti3, sizeof(float));
 8104052:	4b18      	ldr	r3, [pc, #96]	@ (81040b4 <HAL_UART_RxCpltCallback+0x144>)
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	4a1a      	ldr	r2, [pc, #104]	@ (81040c0 <HAL_UART_RxCpltCallback+0x150>)
 8104058:	6013      	str	r3, [r2, #0]

		if (i == 1) {
 810405a:	4b12      	ldr	r3, [pc, #72]	@ (81040a4 <HAL_UART_RxCpltCallback+0x134>)
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	2b01      	cmp	r3, #1
 8104060:	d114      	bne.n	810408c <HAL_UART_RxCpltCallback+0x11c>
			tune_PID(&pid_roll, floatricevuto1, floatricevuto2, floatricevuto3); //prova ad alzare
 8104062:	4b15      	ldr	r3, [pc, #84]	@ (81040b8 <HAL_UART_RxCpltCallback+0x148>)
 8104064:	edd3 7a00 	vldr	s15, [r3]
 8104068:	4b14      	ldr	r3, [pc, #80]	@ (81040bc <HAL_UART_RxCpltCallback+0x14c>)
 810406a:	ed93 7a00 	vldr	s14, [r3]
 810406e:	4b14      	ldr	r3, [pc, #80]	@ (81040c0 <HAL_UART_RxCpltCallback+0x150>)
 8104070:	edd3 6a00 	vldr	s13, [r3]
 8104074:	eeb0 1a66 	vmov.f32	s2, s13
 8104078:	eef0 0a47 	vmov.f32	s1, s14
 810407c:	eeb0 0a67 	vmov.f32	s0, s15
 8104080:	4810      	ldr	r0, [pc, #64]	@ (81040c4 <HAL_UART_RxCpltCallback+0x154>)
 8104082:	f7fd f942 	bl	810130a <tune_PID>
			i = 0;
 8104086:	4b07      	ldr	r3, [pc, #28]	@ (81040a4 <HAL_UART_RxCpltCallback+0x134>)
 8104088:	2200      	movs	r2, #0
 810408a:	601a      	str	r2, [r3, #0]

		}

	}
}
 810408c:	bf00      	nop
 810408e:	3708      	adds	r7, #8
 8104090:	46bd      	mov	sp, r7
 8104092:	bd80      	pop	{r7, pc}
 8104094:	100005a8 	.word	0x100005a8
 8104098:	1000d290 	.word	0x1000d290
 810409c:	08115c50 	.word	0x08115c50
 81040a0:	1000d291 	.word	0x1000d291
 81040a4:	1000cf48 	.word	0x1000cf48
 81040a8:	1000cf24 	.word	0x1000cf24
 81040ac:	1000cf30 	.word	0x1000cf30
 81040b0:	1000cf34 	.word	0x1000cf34
 81040b4:	1000cf38 	.word	0x1000cf38
 81040b8:	1000cf3c 	.word	0x1000cf3c
 81040bc:	1000cf40 	.word	0x1000cf40
 81040c0:	1000cf44 	.word	0x1000cf44
 81040c4:	1000cf8c 	.word	0x1000cf8c

081040c8 <_write>:

// Funzione di scrittura per printf
int _write(int file, char *ptr, int len) {
 81040c8:	b580      	push	{r7, lr}
 81040ca:	b084      	sub	sp, #16
 81040cc:	af00      	add	r7, sp, #0
 81040ce:	60f8      	str	r0, [r7, #12]
 81040d0:	60b9      	str	r1, [r7, #8]
 81040d2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	b29a      	uxth	r2, r3
 81040d8:	f04f 33ff 	mov.w	r3, #4294967295
 81040dc:	68b9      	ldr	r1, [r7, #8]
 81040de:	4804      	ldr	r0, [pc, #16]	@ (81040f0 <_write+0x28>)
 81040e0:	f00a fa22 	bl	810e528 <HAL_UART_Transmit>
	return len;
 81040e4:	687b      	ldr	r3, [r7, #4]
}
 81040e6:	4618      	mov	r0, r3
 81040e8:	3710      	adds	r7, #16
 81040ea:	46bd      	mov	sp, r7
 81040ec:	bd80      	pop	{r7, pc}
 81040ee:	bf00      	nop
 81040f0:	1000063c 	.word	0x1000063c

081040f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81040f4:	b480      	push	{r7}
 81040f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81040f8:	b672      	cpsid	i
}
 81040fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 81040fc:	bf00      	nop
 81040fe:	e7fd      	b.n	81040fc <Error_Handler+0x8>

08104100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8104100:	b480      	push	{r7}
 8104102:	b083      	sub	sp, #12
 8104104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104106:	4b0a      	ldr	r3, [pc, #40]	@ (8104130 <HAL_MspInit+0x30>)
 8104108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810410c:	4a08      	ldr	r2, [pc, #32]	@ (8104130 <HAL_MspInit+0x30>)
 810410e:	f043 0302 	orr.w	r3, r3, #2
 8104112:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104116:	4b06      	ldr	r3, [pc, #24]	@ (8104130 <HAL_MspInit+0x30>)
 8104118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810411c:	f003 0302 	and.w	r3, r3, #2
 8104120:	607b      	str	r3, [r7, #4]
 8104122:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8104124:	bf00      	nop
 8104126:	370c      	adds	r7, #12
 8104128:	46bd      	mov	sp, r7
 810412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810412e:	4770      	bx	lr
 8104130:	58024400 	.word	0x58024400

08104134 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8104134:	b580      	push	{r7, lr}
 8104136:	b0ba      	sub	sp, #232	@ 0xe8
 8104138:	af00      	add	r7, sp, #0
 810413a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810413c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104140:	2200      	movs	r2, #0
 8104142:	601a      	str	r2, [r3, #0]
 8104144:	605a      	str	r2, [r3, #4]
 8104146:	609a      	str	r2, [r3, #8]
 8104148:	60da      	str	r2, [r3, #12]
 810414a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810414c:	f107 0310 	add.w	r3, r7, #16
 8104150:	22c0      	movs	r2, #192	@ 0xc0
 8104152:	2100      	movs	r1, #0
 8104154:	4618      	mov	r0, r3
 8104156:	f00e f9dd 	bl	8112514 <memset>
  if(hadc->Instance==ADC1)
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	681b      	ldr	r3, [r3, #0]
 810415e:	4a2c      	ldr	r2, [pc, #176]	@ (8104210 <HAL_ADC_MspInit+0xdc>)
 8104160:	4293      	cmp	r3, r2
 8104162:	d151      	bne.n	8104208 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8104164:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8104168:	f04f 0300 	mov.w	r3, #0
 810416c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8104170:	2301      	movs	r3, #1
 8104172:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8104174:	2312      	movs	r3, #18
 8104176:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8104178:	2302      	movs	r3, #2
 810417a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 810417c:	2302      	movs	r3, #2
 810417e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8104180:	2302      	movs	r3, #2
 8104182:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8104184:	23c0      	movs	r3, #192	@ 0xc0
 8104186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8104188:	2320      	movs	r3, #32
 810418a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 810418c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8104190:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8104192:	2300      	movs	r3, #0
 8104194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104198:	f107 0310 	add.w	r3, r7, #16
 810419c:	4618      	mov	r0, r3
 810419e:	f006 f87b 	bl	810a298 <HAL_RCCEx_PeriphCLKConfig>
 81041a2:	4603      	mov	r3, r0
 81041a4:	2b00      	cmp	r3, #0
 81041a6:	d001      	beq.n	81041ac <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 81041a8:	f7ff ffa4 	bl	81040f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81041ac:	4b19      	ldr	r3, [pc, #100]	@ (8104214 <HAL_ADC_MspInit+0xe0>)
 81041ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81041b2:	4a18      	ldr	r2, [pc, #96]	@ (8104214 <HAL_ADC_MspInit+0xe0>)
 81041b4:	f043 0320 	orr.w	r3, r3, #32
 81041b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81041bc:	4b15      	ldr	r3, [pc, #84]	@ (8104214 <HAL_ADC_MspInit+0xe0>)
 81041be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81041c2:	f003 0320 	and.w	r3, r3, #32
 81041c6:	60fb      	str	r3, [r7, #12]
 81041c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81041ca:	4b12      	ldr	r3, [pc, #72]	@ (8104214 <HAL_ADC_MspInit+0xe0>)
 81041cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81041d0:	4a10      	ldr	r2, [pc, #64]	@ (8104214 <HAL_ADC_MspInit+0xe0>)
 81041d2:	f043 0320 	orr.w	r3, r3, #32
 81041d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81041da:	4b0e      	ldr	r3, [pc, #56]	@ (8104214 <HAL_ADC_MspInit+0xe0>)
 81041dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81041e0:	f003 0320 	and.w	r3, r3, #32
 81041e4:	60bb      	str	r3, [r7, #8]
 81041e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 81041e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81041ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81041f0:	2303      	movs	r3, #3
 81041f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81041f6:	2300      	movs	r3, #0
 81041f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81041fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104200:	4619      	mov	r1, r3
 8104202:	4805      	ldr	r0, [pc, #20]	@ (8104218 <HAL_ADC_MspInit+0xe4>)
 8104204:	f004 fdf0 	bl	8108de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8104208:	bf00      	nop
 810420a:	37e8      	adds	r7, #232	@ 0xe8
 810420c:	46bd      	mov	sp, r7
 810420e:	bd80      	pop	{r7, pc}
 8104210:	40022000 	.word	0x40022000
 8104214:	58024400 	.word	0x58024400
 8104218:	58021400 	.word	0x58021400

0810421c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810421c:	b580      	push	{r7, lr}
 810421e:	b0ba      	sub	sp, #232	@ 0xe8
 8104220:	af00      	add	r7, sp, #0
 8104222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104224:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8104228:	2200      	movs	r2, #0
 810422a:	601a      	str	r2, [r3, #0]
 810422c:	605a      	str	r2, [r3, #4]
 810422e:	609a      	str	r2, [r3, #8]
 8104230:	60da      	str	r2, [r3, #12]
 8104232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8104234:	f107 0310 	add.w	r3, r7, #16
 8104238:	22c0      	movs	r2, #192	@ 0xc0
 810423a:	2100      	movs	r1, #0
 810423c:	4618      	mov	r0, r3
 810423e:	f00e f969 	bl	8112514 <memset>
  if(hi2c->Instance==I2C1)
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	681b      	ldr	r3, [r3, #0]
 8104246:	4a26      	ldr	r2, [pc, #152]	@ (81042e0 <HAL_I2C_MspInit+0xc4>)
 8104248:	4293      	cmp	r3, r2
 810424a:	d145      	bne.n	81042d8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 810424c:	f04f 0208 	mov.w	r2, #8
 8104250:	f04f 0300 	mov.w	r3, #0
 8104254:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8104258:	2300      	movs	r3, #0
 810425a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810425e:	f107 0310 	add.w	r3, r7, #16
 8104262:	4618      	mov	r0, r3
 8104264:	f006 f818 	bl	810a298 <HAL_RCCEx_PeriphCLKConfig>
 8104268:	4603      	mov	r3, r0
 810426a:	2b00      	cmp	r3, #0
 810426c:	d001      	beq.n	8104272 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 810426e:	f7ff ff41 	bl	81040f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8104272:	4b1c      	ldr	r3, [pc, #112]	@ (81042e4 <HAL_I2C_MspInit+0xc8>)
 8104274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104278:	4a1a      	ldr	r2, [pc, #104]	@ (81042e4 <HAL_I2C_MspInit+0xc8>)
 810427a:	f043 0302 	orr.w	r3, r3, #2
 810427e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104282:	4b18      	ldr	r3, [pc, #96]	@ (81042e4 <HAL_I2C_MspInit+0xc8>)
 8104284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104288:	f003 0302 	and.w	r3, r3, #2
 810428c:	60fb      	str	r3, [r7, #12]
 810428e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8104290:	23c0      	movs	r3, #192	@ 0xc0
 8104292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8104296:	2312      	movs	r3, #18
 8104298:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810429c:	2300      	movs	r3, #0
 810429e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81042a2:	2300      	movs	r3, #0
 81042a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81042a8:	2304      	movs	r3, #4
 81042aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81042ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81042b2:	4619      	mov	r1, r3
 81042b4:	480c      	ldr	r0, [pc, #48]	@ (81042e8 <HAL_I2C_MspInit+0xcc>)
 81042b6:	f004 fd97 	bl	8108de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81042ba:	4b0a      	ldr	r3, [pc, #40]	@ (81042e4 <HAL_I2C_MspInit+0xc8>)
 81042bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81042c0:	4a08      	ldr	r2, [pc, #32]	@ (81042e4 <HAL_I2C_MspInit+0xc8>)
 81042c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81042c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81042ca:	4b06      	ldr	r3, [pc, #24]	@ (81042e4 <HAL_I2C_MspInit+0xc8>)
 81042cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81042d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81042d4:	60bb      	str	r3, [r7, #8]
 81042d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 81042d8:	bf00      	nop
 81042da:	37e8      	adds	r7, #232	@ 0xe8
 81042dc:	46bd      	mov	sp, r7
 81042de:	bd80      	pop	{r7, pc}
 81042e0:	40005400 	.word	0x40005400
 81042e4:	58024400 	.word	0x58024400
 81042e8:	58020400 	.word	0x58020400

081042ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81042ec:	b580      	push	{r7, lr}
 81042ee:	b088      	sub	sp, #32
 81042f0:	af00      	add	r7, sp, #0
 81042f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	4a4f      	ldr	r2, [pc, #316]	@ (8104438 <HAL_TIM_Base_MspInit+0x14c>)
 81042fa:	4293      	cmp	r3, r2
 81042fc:	d10f      	bne.n	810431e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81042fe:	4b4f      	ldr	r3, [pc, #316]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104304:	4a4d      	ldr	r2, [pc, #308]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104306:	f043 0301 	orr.w	r3, r3, #1
 810430a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810430e:	4b4b      	ldr	r3, [pc, #300]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104314:	f003 0301 	and.w	r3, r3, #1
 8104318:	61fb      	str	r3, [r7, #28]
 810431a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 810431c:	e087      	b.n	810442e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM2)
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104326:	d117      	bne.n	8104358 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8104328:	4b44      	ldr	r3, [pc, #272]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 810432a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810432e:	4a43      	ldr	r2, [pc, #268]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104330:	f043 0301 	orr.w	r3, r3, #1
 8104334:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104338:	4b40      	ldr	r3, [pc, #256]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 810433a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810433e:	f003 0301 	and.w	r3, r3, #1
 8104342:	61bb      	str	r3, [r7, #24]
 8104344:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8104346:	2200      	movs	r2, #0
 8104348:	2100      	movs	r1, #0
 810434a:	201c      	movs	r0, #28
 810434c:	f002 fadf 	bl	810690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8104350:	201c      	movs	r0, #28
 8104352:	f002 faf6 	bl	8106942 <HAL_NVIC_EnableIRQ>
}
 8104356:	e06a      	b.n	810442e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM3)
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	681b      	ldr	r3, [r3, #0]
 810435c:	4a38      	ldr	r2, [pc, #224]	@ (8104440 <HAL_TIM_Base_MspInit+0x154>)
 810435e:	4293      	cmp	r3, r2
 8104360:	d10f      	bne.n	8104382 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8104362:	4b36      	ldr	r3, [pc, #216]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104368:	4a34      	ldr	r2, [pc, #208]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 810436a:	f043 0302 	orr.w	r3, r3, #2
 810436e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104372:	4b32      	ldr	r3, [pc, #200]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104378:	f003 0302 	and.w	r3, r3, #2
 810437c:	617b      	str	r3, [r7, #20]
 810437e:	697b      	ldr	r3, [r7, #20]
}
 8104380:	e055      	b.n	810442e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM6)
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	4a2f      	ldr	r2, [pc, #188]	@ (8104444 <HAL_TIM_Base_MspInit+0x158>)
 8104388:	4293      	cmp	r3, r2
 810438a:	d117      	bne.n	81043bc <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 810438c:	4b2b      	ldr	r3, [pc, #172]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 810438e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104392:	4a2a      	ldr	r2, [pc, #168]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104394:	f043 0310 	orr.w	r3, r3, #16
 8104398:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810439c:	4b27      	ldr	r3, [pc, #156]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 810439e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81043a2:	f003 0310 	and.w	r3, r3, #16
 81043a6:	613b      	str	r3, [r7, #16]
 81043a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 81043aa:	2200      	movs	r2, #0
 81043ac:	2100      	movs	r1, #0
 81043ae:	2036      	movs	r0, #54	@ 0x36
 81043b0:	f002 faad 	bl	810690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 81043b4:	2036      	movs	r0, #54	@ 0x36
 81043b6:	f002 fac4 	bl	8106942 <HAL_NVIC_EnableIRQ>
}
 81043ba:	e038      	b.n	810442e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM7)
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	4a21      	ldr	r2, [pc, #132]	@ (8104448 <HAL_TIM_Base_MspInit+0x15c>)
 81043c2:	4293      	cmp	r3, r2
 81043c4:	d117      	bne.n	81043f6 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 81043c6:	4b1d      	ldr	r3, [pc, #116]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 81043c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81043cc:	4a1b      	ldr	r2, [pc, #108]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 81043ce:	f043 0320 	orr.w	r3, r3, #32
 81043d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81043d6:	4b19      	ldr	r3, [pc, #100]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 81043d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81043dc:	f003 0320 	and.w	r3, r3, #32
 81043e0:	60fb      	str	r3, [r7, #12]
 81043e2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 81043e4:	2200      	movs	r2, #0
 81043e6:	2100      	movs	r1, #0
 81043e8:	2037      	movs	r0, #55	@ 0x37
 81043ea:	f002 fa90 	bl	810690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 81043ee:	2037      	movs	r0, #55	@ 0x37
 81043f0:	f002 faa7 	bl	8106942 <HAL_NVIC_EnableIRQ>
}
 81043f4:	e01b      	b.n	810442e <HAL_TIM_Base_MspInit+0x142>
  else if(htim_base->Instance==TIM12)
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	681b      	ldr	r3, [r3, #0]
 81043fa:	4a14      	ldr	r2, [pc, #80]	@ (810444c <HAL_TIM_Base_MspInit+0x160>)
 81043fc:	4293      	cmp	r3, r2
 81043fe:	d116      	bne.n	810442e <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8104400:	4b0e      	ldr	r3, [pc, #56]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104406:	4a0d      	ldr	r2, [pc, #52]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810440c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104410:	4b0a      	ldr	r3, [pc, #40]	@ (810443c <HAL_TIM_Base_MspInit+0x150>)
 8104412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810441a:	60bb      	str	r3, [r7, #8]
 810441c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 810441e:	2200      	movs	r2, #0
 8104420:	2100      	movs	r1, #0
 8104422:	202b      	movs	r0, #43	@ 0x2b
 8104424:	f002 fa73 	bl	810690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8104428:	202b      	movs	r0, #43	@ 0x2b
 810442a:	f002 fa8a 	bl	8106942 <HAL_NVIC_EnableIRQ>
}
 810442e:	bf00      	nop
 8104430:	3720      	adds	r7, #32
 8104432:	46bd      	mov	sp, r7
 8104434:	bd80      	pop	{r7, pc}
 8104436:	bf00      	nop
 8104438:	40010000 	.word	0x40010000
 810443c:	58024400 	.word	0x58024400
 8104440:	40000400 	.word	0x40000400
 8104444:	40001000 	.word	0x40001000
 8104448:	40001400 	.word	0x40001400
 810444c:	40001800 	.word	0x40001800

08104450 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8104450:	b580      	push	{r7, lr}
 8104452:	b08c      	sub	sp, #48	@ 0x30
 8104454:	af00      	add	r7, sp, #0
 8104456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104458:	f107 031c 	add.w	r3, r7, #28
 810445c:	2200      	movs	r2, #0
 810445e:	601a      	str	r2, [r3, #0]
 8104460:	605a      	str	r2, [r3, #4]
 8104462:	609a      	str	r2, [r3, #8]
 8104464:	60da      	str	r2, [r3, #12]
 8104466:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	4a38      	ldr	r2, [pc, #224]	@ (8104550 <HAL_TIM_Encoder_MspInit+0x100>)
 810446e:	4293      	cmp	r3, r2
 8104470:	d12f      	bne.n	81044d2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8104472:	4b38      	ldr	r3, [pc, #224]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 8104474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104478:	4a36      	ldr	r2, [pc, #216]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 810447a:	f043 0304 	orr.w	r3, r3, #4
 810447e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104482:	4b34      	ldr	r3, [pc, #208]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 8104484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104488:	f003 0304 	and.w	r3, r3, #4
 810448c:	61bb      	str	r3, [r7, #24]
 810448e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8104490:	4b30      	ldr	r3, [pc, #192]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 8104492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104496:	4a2f      	ldr	r2, [pc, #188]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 8104498:	f043 0308 	orr.w	r3, r3, #8
 810449c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81044a0:	4b2c      	ldr	r3, [pc, #176]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 81044a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81044a6:	f003 0308 	and.w	r3, r3, #8
 81044aa:	617b      	str	r3, [r7, #20]
 81044ac:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 81044ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 81044b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81044b4:	2302      	movs	r3, #2
 81044b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81044b8:	2300      	movs	r3, #0
 81044ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81044bc:	2300      	movs	r3, #0
 81044be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 81044c0:	2302      	movs	r3, #2
 81044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81044c4:	f107 031c 	add.w	r3, r7, #28
 81044c8:	4619      	mov	r1, r3
 81044ca:	4823      	ldr	r0, [pc, #140]	@ (8104558 <HAL_TIM_Encoder_MspInit+0x108>)
 81044cc:	f004 fc8c 	bl	8108de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 81044d0:	e03a      	b.n	8104548 <HAL_TIM_Encoder_MspInit+0xf8>
  else if(htim_encoder->Instance==TIM8)
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	681b      	ldr	r3, [r3, #0]
 81044d6:	4a21      	ldr	r2, [pc, #132]	@ (810455c <HAL_TIM_Encoder_MspInit+0x10c>)
 81044d8:	4293      	cmp	r3, r2
 81044da:	d135      	bne.n	8104548 <HAL_TIM_Encoder_MspInit+0xf8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 81044dc:	4b1d      	ldr	r3, [pc, #116]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 81044de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81044e2:	4a1c      	ldr	r2, [pc, #112]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 81044e4:	f043 0302 	orr.w	r3, r3, #2
 81044e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81044ec:	4b19      	ldr	r3, [pc, #100]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 81044ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81044f2:	f003 0302 	and.w	r3, r3, #2
 81044f6:	613b      	str	r3, [r7, #16]
 81044f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81044fa:	4b16      	ldr	r3, [pc, #88]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 81044fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104500:	4a14      	ldr	r2, [pc, #80]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 8104502:	f043 0304 	orr.w	r3, r3, #4
 8104506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810450a:	4b12      	ldr	r3, [pc, #72]	@ (8104554 <HAL_TIM_Encoder_MspInit+0x104>)
 810450c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104510:	f003 0304 	and.w	r3, r3, #4
 8104514:	60fb      	str	r3, [r7, #12]
 8104516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8104518:	23c0      	movs	r3, #192	@ 0xc0
 810451a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810451c:	2302      	movs	r3, #2
 810451e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104520:	2300      	movs	r3, #0
 8104522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104524:	2300      	movs	r3, #0
 8104526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8104528:	2303      	movs	r3, #3
 810452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810452c:	f107 031c 	add.w	r3, r7, #28
 8104530:	4619      	mov	r1, r3
 8104532:	480b      	ldr	r0, [pc, #44]	@ (8104560 <HAL_TIM_Encoder_MspInit+0x110>)
 8104534:	f004 fc58 	bl	8108de8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8104538:	2200      	movs	r2, #0
 810453a:	2100      	movs	r1, #0
 810453c:	202b      	movs	r0, #43	@ 0x2b
 810453e:	f002 f9e6 	bl	810690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8104542:	202b      	movs	r0, #43	@ 0x2b
 8104544:	f002 f9fd 	bl	8106942 <HAL_NVIC_EnableIRQ>
}
 8104548:	bf00      	nop
 810454a:	3730      	adds	r7, #48	@ 0x30
 810454c:	46bd      	mov	sp, r7
 810454e:	bd80      	pop	{r7, pc}
 8104550:	40000800 	.word	0x40000800
 8104554:	58024400 	.word	0x58024400
 8104558:	58020c00 	.word	0x58020c00
 810455c:	40010400 	.word	0x40010400
 8104560:	58020800 	.word	0x58020800

08104564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8104564:	b580      	push	{r7, lr}
 8104566:	b08a      	sub	sp, #40	@ 0x28
 8104568:	af00      	add	r7, sp, #0
 810456a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810456c:	f107 0314 	add.w	r3, r7, #20
 8104570:	2200      	movs	r2, #0
 8104572:	601a      	str	r2, [r3, #0]
 8104574:	605a      	str	r2, [r3, #4]
 8104576:	609a      	str	r2, [r3, #8]
 8104578:	60da      	str	r2, [r3, #12]
 810457a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	4a25      	ldr	r2, [pc, #148]	@ (8104618 <HAL_TIM_MspPostInit+0xb4>)
 8104582:	4293      	cmp	r3, r2
 8104584:	d120      	bne.n	81045c8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8104586:	4b25      	ldr	r3, [pc, #148]	@ (810461c <HAL_TIM_MspPostInit+0xb8>)
 8104588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810458c:	4a23      	ldr	r2, [pc, #140]	@ (810461c <HAL_TIM_MspPostInit+0xb8>)
 810458e:	f043 0310 	orr.w	r3, r3, #16
 8104592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104596:	4b21      	ldr	r3, [pc, #132]	@ (810461c <HAL_TIM_MspPostInit+0xb8>)
 8104598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810459c:	f003 0310 	and.w	r3, r3, #16
 81045a0:	613b      	str	r3, [r7, #16]
 81045a2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81045a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81045a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81045aa:	2302      	movs	r3, #2
 81045ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81045ae:	2300      	movs	r3, #0
 81045b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81045b2:	2300      	movs	r3, #0
 81045b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81045b6:	2301      	movs	r3, #1
 81045b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81045ba:	f107 0314 	add.w	r3, r7, #20
 81045be:	4619      	mov	r1, r3
 81045c0:	4817      	ldr	r0, [pc, #92]	@ (8104620 <HAL_TIM_MspPostInit+0xbc>)
 81045c2:	f004 fc11 	bl	8108de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 81045c6:	e023      	b.n	8104610 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	4a15      	ldr	r2, [pc, #84]	@ (8104624 <HAL_TIM_MspPostInit+0xc0>)
 81045ce:	4293      	cmp	r3, r2
 81045d0:	d11e      	bne.n	8104610 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81045d2:	4b12      	ldr	r3, [pc, #72]	@ (810461c <HAL_TIM_MspPostInit+0xb8>)
 81045d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81045d8:	4a10      	ldr	r2, [pc, #64]	@ (810461c <HAL_TIM_MspPostInit+0xb8>)
 81045da:	f043 0301 	orr.w	r3, r3, #1
 81045de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81045e2:	4b0e      	ldr	r3, [pc, #56]	@ (810461c <HAL_TIM_MspPostInit+0xb8>)
 81045e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81045e8:	f003 0301 	and.w	r3, r3, #1
 81045ec:	60fb      	str	r3, [r7, #12]
 81045ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81045f0:	2340      	movs	r3, #64	@ 0x40
 81045f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81045f4:	2302      	movs	r3, #2
 81045f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81045f8:	2300      	movs	r3, #0
 81045fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81045fc:	2300      	movs	r3, #0
 81045fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8104600:	2302      	movs	r3, #2
 8104602:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8104604:	f107 0314 	add.w	r3, r7, #20
 8104608:	4619      	mov	r1, r3
 810460a:	4807      	ldr	r0, [pc, #28]	@ (8104628 <HAL_TIM_MspPostInit+0xc4>)
 810460c:	f004 fbec 	bl	8108de8 <HAL_GPIO_Init>
}
 8104610:	bf00      	nop
 8104612:	3728      	adds	r7, #40	@ 0x28
 8104614:	46bd      	mov	sp, r7
 8104616:	bd80      	pop	{r7, pc}
 8104618:	40010000 	.word	0x40010000
 810461c:	58024400 	.word	0x58024400
 8104620:	58021000 	.word	0x58021000
 8104624:	40000400 	.word	0x40000400
 8104628:	58020000 	.word	0x58020000

0810462c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 810462c:	b580      	push	{r7, lr}
 810462e:	b0c0      	sub	sp, #256	@ 0x100
 8104630:	af00      	add	r7, sp, #0
 8104632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104634:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8104638:	2200      	movs	r2, #0
 810463a:	601a      	str	r2, [r3, #0]
 810463c:	605a      	str	r2, [r3, #4]
 810463e:	609a      	str	r2, [r3, #8]
 8104640:	60da      	str	r2, [r3, #12]
 8104642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8104644:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104648:	22c0      	movs	r2, #192	@ 0xc0
 810464a:	2100      	movs	r1, #0
 810464c:	4618      	mov	r0, r3
 810464e:	f00d ff61 	bl	8112514 <memset>
  if(huart->Instance==USART2)
 8104652:	687b      	ldr	r3, [r7, #4]
 8104654:	681b      	ldr	r3, [r3, #0]
 8104656:	4aa5      	ldr	r2, [pc, #660]	@ (81048ec <HAL_UART_MspInit+0x2c0>)
 8104658:	4293      	cmp	r3, r2
 810465a:	d172      	bne.n	8104742 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 810465c:	f04f 0202 	mov.w	r2, #2
 8104660:	f04f 0300 	mov.w	r3, #0
 8104664:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8104668:	2300      	movs	r3, #0
 810466a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810466e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104672:	4618      	mov	r0, r3
 8104674:	f005 fe10 	bl	810a298 <HAL_RCCEx_PeriphCLKConfig>
 8104678:	4603      	mov	r3, r0
 810467a:	2b00      	cmp	r3, #0
 810467c:	d001      	beq.n	8104682 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810467e:	f7ff fd39 	bl	81040f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8104682:	4b9b      	ldr	r3, [pc, #620]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 8104684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104688:	4a99      	ldr	r2, [pc, #612]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 810468a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810468e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104692:	4b97      	ldr	r3, [pc, #604]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 8104694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810469c:	627b      	str	r3, [r7, #36]	@ 0x24
 810469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81046a0:	4b93      	ldr	r3, [pc, #588]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 81046a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046a6:	4a92      	ldr	r2, [pc, #584]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 81046a8:	f043 0301 	orr.w	r3, r3, #1
 81046ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81046b0:	4b8f      	ldr	r3, [pc, #572]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 81046b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046b6:	f003 0301 	and.w	r3, r3, #1
 81046ba:	623b      	str	r3, [r7, #32]
 81046bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81046be:	4b8c      	ldr	r3, [pc, #560]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 81046c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046c4:	4a8a      	ldr	r2, [pc, #552]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 81046c6:	f043 0308 	orr.w	r3, r3, #8
 81046ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81046ce:	4b88      	ldr	r3, [pc, #544]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 81046d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81046d4:	f003 0308 	and.w	r3, r3, #8
 81046d8:	61fb      	str	r3, [r7, #28]
 81046da:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 81046dc:	2308      	movs	r3, #8
 81046de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81046e2:	2302      	movs	r3, #2
 81046e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81046e8:	2300      	movs	r3, #0
 81046ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81046ee:	2300      	movs	r3, #0
 81046f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 81046f4:	2307      	movs	r3, #7
 81046f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81046fa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81046fe:	4619      	mov	r1, r3
 8104700:	487c      	ldr	r0, [pc, #496]	@ (81048f4 <HAL_UART_MspInit+0x2c8>)
 8104702:	f004 fb71 	bl	8108de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8104706:	2320      	movs	r3, #32
 8104708:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810470c:	2302      	movs	r3, #2
 810470e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104712:	2300      	movs	r3, #0
 8104714:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104718:	2300      	movs	r3, #0
 810471a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 810471e:	2307      	movs	r3, #7
 8104720:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8104724:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8104728:	4619      	mov	r1, r3
 810472a:	4873      	ldr	r0, [pc, #460]	@ (81048f8 <HAL_UART_MspInit+0x2cc>)
 810472c:	f004 fb5c 	bl	8108de8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8104730:	2200      	movs	r2, #0
 8104732:	2100      	movs	r1, #0
 8104734:	2026      	movs	r0, #38	@ 0x26
 8104736:	f002 f8ea 	bl	810690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 810473a:	2026      	movs	r0, #38	@ 0x26
 810473c:	f002 f901 	bl	8106942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8104740:	e0ce      	b.n	81048e0 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART3)
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	4a6d      	ldr	r2, [pc, #436]	@ (81048fc <HAL_UART_MspInit+0x2d0>)
 8104748:	4293      	cmp	r3, r2
 810474a:	d147      	bne.n	81047dc <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810474c:	f04f 0202 	mov.w	r2, #2
 8104750:	f04f 0300 	mov.w	r3, #0
 8104754:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8104758:	2300      	movs	r3, #0
 810475a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810475e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104762:	4618      	mov	r0, r3
 8104764:	f005 fd98 	bl	810a298 <HAL_RCCEx_PeriphCLKConfig>
 8104768:	4603      	mov	r3, r0
 810476a:	2b00      	cmp	r3, #0
 810476c:	d001      	beq.n	8104772 <HAL_UART_MspInit+0x146>
      Error_Handler();
 810476e:	f7ff fcc1 	bl	81040f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8104772:	4b5f      	ldr	r3, [pc, #380]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 8104774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104778:	4a5d      	ldr	r2, [pc, #372]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 810477a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810477e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104782:	4b5b      	ldr	r3, [pc, #364]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 8104784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104788:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810478c:	61bb      	str	r3, [r7, #24]
 810478e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8104790:	4b57      	ldr	r3, [pc, #348]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 8104792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104796:	4a56      	ldr	r2, [pc, #344]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 8104798:	f043 0308 	orr.w	r3, r3, #8
 810479c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81047a0:	4b53      	ldr	r3, [pc, #332]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 81047a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81047a6:	f003 0308 	and.w	r3, r3, #8
 81047aa:	617b      	str	r3, [r7, #20]
 81047ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81047ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81047b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81047b6:	2302      	movs	r3, #2
 81047b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81047bc:	2300      	movs	r3, #0
 81047be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81047c2:	2300      	movs	r3, #0
 81047c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81047c8:	2307      	movs	r3, #7
 81047ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81047ce:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81047d2:	4619      	mov	r1, r3
 81047d4:	4848      	ldr	r0, [pc, #288]	@ (81048f8 <HAL_UART_MspInit+0x2cc>)
 81047d6:	f004 fb07 	bl	8108de8 <HAL_GPIO_Init>
}
 81047da:	e081      	b.n	81048e0 <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a47      	ldr	r2, [pc, #284]	@ (8104900 <HAL_UART_MspInit+0x2d4>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d17c      	bne.n	81048e0 <HAL_UART_MspInit+0x2b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 81047e6:	f04f 0201 	mov.w	r2, #1
 81047ea:	f04f 0300 	mov.w	r3, #0
 81047ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 81047f2:	2300      	movs	r3, #0
 81047f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81047f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81047fc:	4618      	mov	r0, r3
 81047fe:	f005 fd4b 	bl	810a298 <HAL_RCCEx_PeriphCLKConfig>
 8104802:	4603      	mov	r3, r0
 8104804:	2b00      	cmp	r3, #0
 8104806:	d001      	beq.n	810480c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8104808:	f7ff fc74 	bl	81040f4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 810480c:	4b38      	ldr	r3, [pc, #224]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 810480e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104812:	4a37      	ldr	r2, [pc, #220]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 8104814:	f043 0320 	orr.w	r3, r3, #32
 8104818:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810481c:	4b34      	ldr	r3, [pc, #208]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 810481e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104822:	f003 0320 	and.w	r3, r3, #32
 8104826:	613b      	str	r3, [r7, #16]
 8104828:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 810482a:	4b31      	ldr	r3, [pc, #196]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 810482c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104830:	4a2f      	ldr	r2, [pc, #188]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 8104832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8104836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810483a:	4b2d      	ldr	r3, [pc, #180]	@ (81048f0 <HAL_UART_MspInit+0x2c4>)
 810483c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104844:	60fb      	str	r3, [r7, #12]
 8104846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8104848:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 810484c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104850:	2302      	movs	r3, #2
 8104852:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104856:	2300      	movs	r3, #0
 8104858:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810485c:	2300      	movs	r3, #0
 810485e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8104862:	2307      	movs	r3, #7
 8104864:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8104868:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810486c:	4619      	mov	r1, r3
 810486e:	4825      	ldr	r0, [pc, #148]	@ (8104904 <HAL_UART_MspInit+0x2d8>)
 8104870:	f004 faba 	bl	8108de8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8104874:	4b24      	ldr	r3, [pc, #144]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 8104876:	4a25      	ldr	r2, [pc, #148]	@ (810490c <HAL_UART_MspInit+0x2e0>)
 8104878:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 810487a:	4b23      	ldr	r3, [pc, #140]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 810487c:	2247      	movs	r2, #71	@ 0x47
 810487e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8104880:	4b21      	ldr	r3, [pc, #132]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 8104882:	2200      	movs	r2, #0
 8104884:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8104886:	4b20      	ldr	r3, [pc, #128]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 8104888:	2200      	movs	r2, #0
 810488a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 810488c:	4b1e      	ldr	r3, [pc, #120]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 810488e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8104892:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8104894:	4b1c      	ldr	r3, [pc, #112]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 8104896:	2200      	movs	r2, #0
 8104898:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810489a:	4b1b      	ldr	r3, [pc, #108]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 810489c:	2200      	movs	r2, #0
 810489e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 81048a0:	4b19      	ldr	r3, [pc, #100]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 81048a2:	2200      	movs	r2, #0
 81048a4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 81048a6:	4b18      	ldr	r3, [pc, #96]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 81048a8:	2200      	movs	r2, #0
 81048aa:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81048ac:	4b16      	ldr	r3, [pc, #88]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 81048ae:	2200      	movs	r2, #0
 81048b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 81048b2:	4815      	ldr	r0, [pc, #84]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 81048b4:	f002 f874 	bl	81069a0 <HAL_DMA_Init>
 81048b8:	4603      	mov	r3, r0
 81048ba:	2b00      	cmp	r3, #0
 81048bc:	d001      	beq.n	81048c2 <HAL_UART_MspInit+0x296>
      Error_Handler();
 81048be:	f7ff fc19 	bl	81040f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	4a10      	ldr	r2, [pc, #64]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 81048c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 81048ca:	4a0f      	ldr	r2, [pc, #60]	@ (8104908 <HAL_UART_MspInit+0x2dc>)
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 81048d0:	2200      	movs	r2, #0
 81048d2:	2100      	movs	r1, #0
 81048d4:	2047      	movs	r0, #71	@ 0x47
 81048d6:	f002 f81a 	bl	810690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 81048da:	2047      	movs	r0, #71	@ 0x47
 81048dc:	f002 f831 	bl	8106942 <HAL_NVIC_EnableIRQ>
}
 81048e0:	bf00      	nop
 81048e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 81048e6:	46bd      	mov	sp, r7
 81048e8:	bd80      	pop	{r7, pc}
 81048ea:	bf00      	nop
 81048ec:	40004400 	.word	0x40004400
 81048f0:	58024400 	.word	0x58024400
 81048f4:	58020000 	.word	0x58020000
 81048f8:	58020c00 	.word	0x58020c00
 81048fc:	40004800 	.word	0x40004800
 8104900:	40011400 	.word	0x40011400
 8104904:	58021800 	.word	0x58021800
 8104908:	10000764 	.word	0x10000764
 810490c:	40020428 	.word	0x40020428

08104910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8104910:	b480      	push	{r7}
 8104912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8104914:	bf00      	nop
 8104916:	e7fd      	b.n	8104914 <NMI_Handler+0x4>

08104918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8104918:	b480      	push	{r7}
 810491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810491c:	bf00      	nop
 810491e:	e7fd      	b.n	810491c <HardFault_Handler+0x4>

08104920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8104920:	b480      	push	{r7}
 8104922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8104924:	bf00      	nop
 8104926:	e7fd      	b.n	8104924 <MemManage_Handler+0x4>

08104928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8104928:	b480      	push	{r7}
 810492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810492c:	bf00      	nop
 810492e:	e7fd      	b.n	810492c <BusFault_Handler+0x4>

08104930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8104930:	b480      	push	{r7}
 8104932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8104934:	bf00      	nop
 8104936:	e7fd      	b.n	8104934 <UsageFault_Handler+0x4>

08104938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8104938:	b480      	push	{r7}
 810493a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810493c:	bf00      	nop
 810493e:	46bd      	mov	sp, r7
 8104940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104944:	4770      	bx	lr

08104946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8104946:	b480      	push	{r7}
 8104948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810494a:	bf00      	nop
 810494c:	46bd      	mov	sp, r7
 810494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104952:	4770      	bx	lr

08104954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8104954:	b480      	push	{r7}
 8104956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8104958:	bf00      	nop
 810495a:	46bd      	mov	sp, r7
 810495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104960:	4770      	bx	lr

08104962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8104962:	b580      	push	{r7, lr}
 8104964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8104966:	f000 f9bf 	bl	8104ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810496a:	bf00      	nop
 810496c:	bd80      	pop	{r7, pc}
	...

08104970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8104970:	b580      	push	{r7, lr}
 8104972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8104974:	4802      	ldr	r0, [pc, #8]	@ (8104980 <TIM2_IRQHandler+0x10>)
 8104976:	f008 fce3 	bl	810d340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810497a:	bf00      	nop
 810497c:	bd80      	pop	{r7, pc}
 810497e:	bf00      	nop
 8104980:	10000394 	.word	0x10000394

08104984 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8104984:	b580      	push	{r7, lr}
 8104986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8104988:	4802      	ldr	r0, [pc, #8]	@ (8104994 <USART2_IRQHandler+0x10>)
 810498a:	f009 ff6f 	bl	810e86c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 810498e:	bf00      	nop
 8104990:	bd80      	pop	{r7, pc}
 8104992:	bf00      	nop
 8104994:	100005a8 	.word	0x100005a8

08104998 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8104998:	b580      	push	{r7, lr}
 810499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 810499c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 81049a0:	f004 fbeb 	bl	810917a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81049a4:	bf00      	nop
 81049a6:	bd80      	pop	{r7, pc}

081049a8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 81049a8:	b580      	push	{r7, lr}
 81049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 81049ac:	4803      	ldr	r0, [pc, #12]	@ (81049bc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 81049ae:	f008 fcc7 	bl	810d340 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 81049b2:	4803      	ldr	r0, [pc, #12]	@ (81049c0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 81049b4:	f008 fcc4 	bl	810d340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 81049b8:	bf00      	nop
 81049ba:	bd80      	pop	{r7, pc}
 81049bc:	10000510 	.word	0x10000510
 81049c0:	1000055c 	.word	0x1000055c

081049c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81049c4:	b580      	push	{r7, lr}
 81049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81049c8:	4802      	ldr	r0, [pc, #8]	@ (81049d4 <TIM6_DAC_IRQHandler+0x10>)
 81049ca:	f008 fcb9 	bl	810d340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81049ce:	bf00      	nop
 81049d0:	bd80      	pop	{r7, pc}
 81049d2:	bf00      	nop
 81049d4:	10000478 	.word	0x10000478

081049d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 81049d8:	b580      	push	{r7, lr}
 81049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81049dc:	4802      	ldr	r0, [pc, #8]	@ (81049e8 <TIM7_IRQHandler+0x10>)
 81049de:	f008 fcaf 	bl	810d340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81049e2:	bf00      	nop
 81049e4:	bd80      	pop	{r7, pc}
 81049e6:	bf00      	nop
 81049e8:	100004c4 	.word	0x100004c4

081049ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 81049ec:	b580      	push	{r7, lr}
 81049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 81049f0:	4802      	ldr	r0, [pc, #8]	@ (81049fc <DMA2_Stream1_IRQHandler+0x10>)
 81049f2:	f003 f893 	bl	8107b1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 81049f6:	bf00      	nop
 81049f8:	bd80      	pop	{r7, pc}
 81049fa:	bf00      	nop
 81049fc:	10000764 	.word	0x10000764

08104a00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8104a00:	b580      	push	{r7, lr}
 8104a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8104a04:	4802      	ldr	r0, [pc, #8]	@ (8104a10 <USART6_IRQHandler+0x10>)
 8104a06:	f009 ff31 	bl	810e86c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8104a0a:	bf00      	nop
 8104a0c:	bd80      	pop	{r7, pc}
 8104a0e:	bf00      	nop
 8104a10:	100006d0 	.word	0x100006d0

08104a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8104a14:	b480      	push	{r7}
 8104a16:	af00      	add	r7, sp, #0
  return 1;
 8104a18:	2301      	movs	r3, #1
}
 8104a1a:	4618      	mov	r0, r3
 8104a1c:	46bd      	mov	sp, r7
 8104a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a22:	4770      	bx	lr

08104a24 <_kill>:

int _kill(int pid, int sig)
{
 8104a24:	b580      	push	{r7, lr}
 8104a26:	b082      	sub	sp, #8
 8104a28:	af00      	add	r7, sp, #0
 8104a2a:	6078      	str	r0, [r7, #4]
 8104a2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8104a2e:	f00d fdc3 	bl	81125b8 <__errno>
 8104a32:	4603      	mov	r3, r0
 8104a34:	2216      	movs	r2, #22
 8104a36:	601a      	str	r2, [r3, #0]
  return -1;
 8104a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104a3c:	4618      	mov	r0, r3
 8104a3e:	3708      	adds	r7, #8
 8104a40:	46bd      	mov	sp, r7
 8104a42:	bd80      	pop	{r7, pc}

08104a44 <_exit>:

void _exit (int status)
{
 8104a44:	b580      	push	{r7, lr}
 8104a46:	b082      	sub	sp, #8
 8104a48:	af00      	add	r7, sp, #0
 8104a4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8104a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8104a50:	6878      	ldr	r0, [r7, #4]
 8104a52:	f7ff ffe7 	bl	8104a24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8104a56:	bf00      	nop
 8104a58:	e7fd      	b.n	8104a56 <_exit+0x12>

08104a5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8104a5a:	b580      	push	{r7, lr}
 8104a5c:	b086      	sub	sp, #24
 8104a5e:	af00      	add	r7, sp, #0
 8104a60:	60f8      	str	r0, [r7, #12]
 8104a62:	60b9      	str	r1, [r7, #8]
 8104a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 8104a66:	2301      	movs	r3, #1
 8104a68:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104a6a:	2300      	movs	r3, #0
 8104a6c:	617b      	str	r3, [r7, #20]
 8104a6e:	e00a      	b.n	8104a86 <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8104a70:	f7ff fa4e 	bl	8103f10 <__io_getchar>
 8104a74:	4601      	mov	r1, r0
 8104a76:	68bb      	ldr	r3, [r7, #8]
 8104a78:	1c5a      	adds	r2, r3, #1
 8104a7a:	60ba      	str	r2, [r7, #8]
 8104a7c:	b2ca      	uxtb	r2, r1
 8104a7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104a80:	697b      	ldr	r3, [r7, #20]
 8104a82:	3301      	adds	r3, #1
 8104a84:	617b      	str	r3, [r7, #20]
 8104a86:	697a      	ldr	r2, [r7, #20]
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	429a      	cmp	r2, r3
 8104a8c:	dbf0      	blt.n	8104a70 <_read+0x16>
  }

  return len;
 8104a8e:	687b      	ldr	r3, [r7, #4]
}
 8104a90:	4618      	mov	r0, r3
 8104a92:	3718      	adds	r7, #24
 8104a94:	46bd      	mov	sp, r7
 8104a96:	bd80      	pop	{r7, pc}

08104a98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8104a98:	b480      	push	{r7}
 8104a9a:	b083      	sub	sp, #12
 8104a9c:	af00      	add	r7, sp, #0
 8104a9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8104aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104aa4:	4618      	mov	r0, r3
 8104aa6:	370c      	adds	r7, #12
 8104aa8:	46bd      	mov	sp, r7
 8104aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aae:	4770      	bx	lr

08104ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8104ab0:	b480      	push	{r7}
 8104ab2:	b083      	sub	sp, #12
 8104ab4:	af00      	add	r7, sp, #0
 8104ab6:	6078      	str	r0, [r7, #4]
 8104ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8104aba:	683b      	ldr	r3, [r7, #0]
 8104abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8104ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8104ac2:	2300      	movs	r3, #0
}
 8104ac4:	4618      	mov	r0, r3
 8104ac6:	370c      	adds	r7, #12
 8104ac8:	46bd      	mov	sp, r7
 8104aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ace:	4770      	bx	lr

08104ad0 <_isatty>:

int _isatty(int file)
{
 8104ad0:	b480      	push	{r7}
 8104ad2:	b083      	sub	sp, #12
 8104ad4:	af00      	add	r7, sp, #0
 8104ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8104ad8:	2301      	movs	r3, #1
}
 8104ada:	4618      	mov	r0, r3
 8104adc:	370c      	adds	r7, #12
 8104ade:	46bd      	mov	sp, r7
 8104ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ae4:	4770      	bx	lr

08104ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8104ae6:	b480      	push	{r7}
 8104ae8:	b085      	sub	sp, #20
 8104aea:	af00      	add	r7, sp, #0
 8104aec:	60f8      	str	r0, [r7, #12]
 8104aee:	60b9      	str	r1, [r7, #8]
 8104af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8104af2:	2300      	movs	r3, #0
}
 8104af4:	4618      	mov	r0, r3
 8104af6:	3714      	adds	r7, #20
 8104af8:	46bd      	mov	sp, r7
 8104afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104afe:	4770      	bx	lr

08104b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8104b00:	b580      	push	{r7, lr}
 8104b02:	b086      	sub	sp, #24
 8104b04:	af00      	add	r7, sp, #0
 8104b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8104b08:	4a14      	ldr	r2, [pc, #80]	@ (8104b5c <_sbrk+0x5c>)
 8104b0a:	4b15      	ldr	r3, [pc, #84]	@ (8104b60 <_sbrk+0x60>)
 8104b0c:	1ad3      	subs	r3, r2, r3
 8104b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8104b10:	697b      	ldr	r3, [r7, #20]
 8104b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8104b14:	4b13      	ldr	r3, [pc, #76]	@ (8104b64 <_sbrk+0x64>)
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	2b00      	cmp	r3, #0
 8104b1a:	d102      	bne.n	8104b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8104b1c:	4b11      	ldr	r3, [pc, #68]	@ (8104b64 <_sbrk+0x64>)
 8104b1e:	4a12      	ldr	r2, [pc, #72]	@ (8104b68 <_sbrk+0x68>)
 8104b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8104b22:	4b10      	ldr	r3, [pc, #64]	@ (8104b64 <_sbrk+0x64>)
 8104b24:	681a      	ldr	r2, [r3, #0]
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	4413      	add	r3, r2
 8104b2a:	693a      	ldr	r2, [r7, #16]
 8104b2c:	429a      	cmp	r2, r3
 8104b2e:	d207      	bcs.n	8104b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8104b30:	f00d fd42 	bl	81125b8 <__errno>
 8104b34:	4603      	mov	r3, r0
 8104b36:	220c      	movs	r2, #12
 8104b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8104b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8104b3e:	e009      	b.n	8104b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8104b40:	4b08      	ldr	r3, [pc, #32]	@ (8104b64 <_sbrk+0x64>)
 8104b42:	681b      	ldr	r3, [r3, #0]
 8104b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8104b46:	4b07      	ldr	r3, [pc, #28]	@ (8104b64 <_sbrk+0x64>)
 8104b48:	681a      	ldr	r2, [r3, #0]
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	4413      	add	r3, r2
 8104b4e:	4a05      	ldr	r2, [pc, #20]	@ (8104b64 <_sbrk+0x64>)
 8104b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8104b52:	68fb      	ldr	r3, [r7, #12]
}
 8104b54:	4618      	mov	r0, r3
 8104b56:	3718      	adds	r7, #24
 8104b58:	46bd      	mov	sp, r7
 8104b5a:	bd80      	pop	{r7, pc}
 8104b5c:	10048000 	.word	0x10048000
 8104b60:	00000400 	.word	0x00000400
 8104b64:	1000d37c 	.word	0x1000d37c
 8104b68:	1000d4d0 	.word	0x1000d4d0

08104b6c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:



  ldr   sp, =_estack      /* set stack pointer */
 8104b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8104ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104b70:	f7fc fac0 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104b74:	480c      	ldr	r0, [pc, #48]	@ (8104ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104b76:	490d      	ldr	r1, [pc, #52]	@ (8104bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104b78:	4a0d      	ldr	r2, [pc, #52]	@ (8104bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8104b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104b7c:	e002      	b.n	8104b84 <LoopCopyDataInit>

08104b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8104b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104b82:	3304      	adds	r3, #4

08104b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8104b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104b88:	d3f9      	bcc.n	8104b7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8104b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8104bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8104bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8104b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104b90:	e001      	b.n	8104b96 <LoopFillZerobss>

08104b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8104b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104b94:	3204      	adds	r2, #4

08104b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8104b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104b98:	d3fb      	bcc.n	8104b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104b9a:	f00d fd13 	bl	81125c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104b9e:	f7fd fa1f 	bl	8101fe0 <main>
  bx  lr
 8104ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104ba4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104ba8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104bac:	1000026c 	.word	0x1000026c
  ldr r2, =_sidata
 8104bb0:	08116134 	.word	0x08116134
  ldr r2, =_sbss
 8104bb4:	10000270 	.word	0x10000270
  ldr r4, =_ebss
 8104bb8:	1000d4d0 	.word	0x1000d4d0

08104bbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104bbc:	e7fe      	b.n	8104bbc <ADC3_IRQHandler>
	...

08104bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8104bc0:	b580      	push	{r7, lr}
 8104bc2:	b082      	sub	sp, #8
 8104bc4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8104bc6:	4b28      	ldr	r3, [pc, #160]	@ (8104c68 <HAL_Init+0xa8>)
 8104bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104bcc:	4a26      	ldr	r2, [pc, #152]	@ (8104c68 <HAL_Init+0xa8>)
 8104bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8104bd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104bd6:	4b24      	ldr	r3, [pc, #144]	@ (8104c68 <HAL_Init+0xa8>)
 8104bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104be0:	603b      	str	r3, [r7, #0]
 8104be2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8104be4:	4b21      	ldr	r3, [pc, #132]	@ (8104c6c <HAL_Init+0xac>)
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8104bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8104c6c <HAL_Init+0xac>)
 8104bf2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8104bf6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8104bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8104c6c <HAL_Init+0xac>)
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8104c6c <HAL_Init+0xac>)
 8104bfe:	f043 0301 	orr.w	r3, r3, #1
 8104c02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8104c04:	2003      	movs	r0, #3
 8104c06:	f001 fe77 	bl	81068f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8104c0a:	f005 f96d 	bl	8109ee8 <HAL_RCC_GetSysClockFreq>
 8104c0e:	4602      	mov	r2, r0
 8104c10:	4b15      	ldr	r3, [pc, #84]	@ (8104c68 <HAL_Init+0xa8>)
 8104c12:	699b      	ldr	r3, [r3, #24]
 8104c14:	0a1b      	lsrs	r3, r3, #8
 8104c16:	f003 030f 	and.w	r3, r3, #15
 8104c1a:	4915      	ldr	r1, [pc, #84]	@ (8104c70 <HAL_Init+0xb0>)
 8104c1c:	5ccb      	ldrb	r3, [r1, r3]
 8104c1e:	f003 031f 	and.w	r3, r3, #31
 8104c22:	fa22 f303 	lsr.w	r3, r2, r3
 8104c26:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104c28:	4b0f      	ldr	r3, [pc, #60]	@ (8104c68 <HAL_Init+0xa8>)
 8104c2a:	699b      	ldr	r3, [r3, #24]
 8104c2c:	f003 030f 	and.w	r3, r3, #15
 8104c30:	4a0f      	ldr	r2, [pc, #60]	@ (8104c70 <HAL_Init+0xb0>)
 8104c32:	5cd3      	ldrb	r3, [r2, r3]
 8104c34:	f003 031f 	and.w	r3, r3, #31
 8104c38:	687a      	ldr	r2, [r7, #4]
 8104c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8104c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8104c74 <HAL_Init+0xb4>)
 8104c40:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104c42:	4b0c      	ldr	r3, [pc, #48]	@ (8104c74 <HAL_Init+0xb4>)
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	4a0c      	ldr	r2, [pc, #48]	@ (8104c78 <HAL_Init+0xb8>)
 8104c48:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8104c4a:	2000      	movs	r0, #0
 8104c4c:	f000 f816 	bl	8104c7c <HAL_InitTick>
 8104c50:	4603      	mov	r3, r0
 8104c52:	2b00      	cmp	r3, #0
 8104c54:	d001      	beq.n	8104c5a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8104c56:	2301      	movs	r3, #1
 8104c58:	e002      	b.n	8104c60 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8104c5a:	f7ff fa51 	bl	8104100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104c5e:	2300      	movs	r3, #0
}
 8104c60:	4618      	mov	r0, r3
 8104c62:	3708      	adds	r7, #8
 8104c64:	46bd      	mov	sp, r7
 8104c66:	bd80      	pop	{r7, pc}
 8104c68:	58024400 	.word	0x58024400
 8104c6c:	40024400 	.word	0x40024400
 8104c70:	08115c60 	.word	0x08115c60
 8104c74:	10000004 	.word	0x10000004
 8104c78:	10000000 	.word	0x10000000

08104c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104c7c:	b580      	push	{r7, lr}
 8104c7e:	b082      	sub	sp, #8
 8104c80:	af00      	add	r7, sp, #0
 8104c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104c84:	4b15      	ldr	r3, [pc, #84]	@ (8104cdc <HAL_InitTick+0x60>)
 8104c86:	781b      	ldrb	r3, [r3, #0]
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d101      	bne.n	8104c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8104c8c:	2301      	movs	r3, #1
 8104c8e:	e021      	b.n	8104cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8104c90:	4b13      	ldr	r3, [pc, #76]	@ (8104ce0 <HAL_InitTick+0x64>)
 8104c92:	681a      	ldr	r2, [r3, #0]
 8104c94:	4b11      	ldr	r3, [pc, #68]	@ (8104cdc <HAL_InitTick+0x60>)
 8104c96:	781b      	ldrb	r3, [r3, #0]
 8104c98:	4619      	mov	r1, r3
 8104c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8104c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8104ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8104ca6:	4618      	mov	r0, r3
 8104ca8:	f001 fe59 	bl	810695e <HAL_SYSTICK_Config>
 8104cac:	4603      	mov	r3, r0
 8104cae:	2b00      	cmp	r3, #0
 8104cb0:	d001      	beq.n	8104cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8104cb2:	2301      	movs	r3, #1
 8104cb4:	e00e      	b.n	8104cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	2b0f      	cmp	r3, #15
 8104cba:	d80a      	bhi.n	8104cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8104cbc:	2200      	movs	r2, #0
 8104cbe:	6879      	ldr	r1, [r7, #4]
 8104cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8104cc4:	f001 fe23 	bl	810690e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8104cc8:	4a06      	ldr	r2, [pc, #24]	@ (8104ce4 <HAL_InitTick+0x68>)
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8104cce:	2300      	movs	r3, #0
 8104cd0:	e000      	b.n	8104cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8104cd2:	2301      	movs	r3, #1
}
 8104cd4:	4618      	mov	r0, r3
 8104cd6:	3708      	adds	r7, #8
 8104cd8:	46bd      	mov	sp, r7
 8104cda:	bd80      	pop	{r7, pc}
 8104cdc:	100000a0 	.word	0x100000a0
 8104ce0:	10000000 	.word	0x10000000
 8104ce4:	1000009c 	.word	0x1000009c

08104ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8104ce8:	b480      	push	{r7}
 8104cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8104cec:	4b06      	ldr	r3, [pc, #24]	@ (8104d08 <HAL_IncTick+0x20>)
 8104cee:	781b      	ldrb	r3, [r3, #0]
 8104cf0:	461a      	mov	r2, r3
 8104cf2:	4b06      	ldr	r3, [pc, #24]	@ (8104d0c <HAL_IncTick+0x24>)
 8104cf4:	681b      	ldr	r3, [r3, #0]
 8104cf6:	4413      	add	r3, r2
 8104cf8:	4a04      	ldr	r2, [pc, #16]	@ (8104d0c <HAL_IncTick+0x24>)
 8104cfa:	6013      	str	r3, [r2, #0]
}
 8104cfc:	bf00      	nop
 8104cfe:	46bd      	mov	sp, r7
 8104d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d04:	4770      	bx	lr
 8104d06:	bf00      	nop
 8104d08:	100000a0 	.word	0x100000a0
 8104d0c:	1000d380 	.word	0x1000d380

08104d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8104d10:	b480      	push	{r7}
 8104d12:	af00      	add	r7, sp, #0
  return uwTick;
 8104d14:	4b03      	ldr	r3, [pc, #12]	@ (8104d24 <HAL_GetTick+0x14>)
 8104d16:	681b      	ldr	r3, [r3, #0]
}
 8104d18:	4618      	mov	r0, r3
 8104d1a:	46bd      	mov	sp, r7
 8104d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d20:	4770      	bx	lr
 8104d22:	bf00      	nop
 8104d24:	1000d380 	.word	0x1000d380

08104d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8104d28:	b580      	push	{r7, lr}
 8104d2a:	b084      	sub	sp, #16
 8104d2c:	af00      	add	r7, sp, #0
 8104d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8104d30:	f7ff ffee 	bl	8104d10 <HAL_GetTick>
 8104d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8104d3a:	68fb      	ldr	r3, [r7, #12]
 8104d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104d40:	d005      	beq.n	8104d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8104d42:	4b0a      	ldr	r3, [pc, #40]	@ (8104d6c <HAL_Delay+0x44>)
 8104d44:	781b      	ldrb	r3, [r3, #0]
 8104d46:	461a      	mov	r2, r3
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	4413      	add	r3, r2
 8104d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8104d4e:	bf00      	nop
 8104d50:	f7ff ffde 	bl	8104d10 <HAL_GetTick>
 8104d54:	4602      	mov	r2, r0
 8104d56:	68bb      	ldr	r3, [r7, #8]
 8104d58:	1ad3      	subs	r3, r2, r3
 8104d5a:	68fa      	ldr	r2, [r7, #12]
 8104d5c:	429a      	cmp	r2, r3
 8104d5e:	d8f7      	bhi.n	8104d50 <HAL_Delay+0x28>
  {
  }
}
 8104d60:	bf00      	nop
 8104d62:	bf00      	nop
 8104d64:	3710      	adds	r7, #16
 8104d66:	46bd      	mov	sp, r7
 8104d68:	bd80      	pop	{r7, pc}
 8104d6a:	bf00      	nop
 8104d6c:	100000a0 	.word	0x100000a0

08104d70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8104d70:	b480      	push	{r7}
 8104d72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8104d74:	4b03      	ldr	r3, [pc, #12]	@ (8104d84 <HAL_GetREVID+0x14>)
 8104d76:	681b      	ldr	r3, [r3, #0]
 8104d78:	0c1b      	lsrs	r3, r3, #16
}
 8104d7a:	4618      	mov	r0, r3
 8104d7c:	46bd      	mov	sp, r7
 8104d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d82:	4770      	bx	lr
 8104d84:	5c001000 	.word	0x5c001000

08104d88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8104d88:	b480      	push	{r7}
 8104d8a:	b083      	sub	sp, #12
 8104d8c:	af00      	add	r7, sp, #0
 8104d8e:	6078      	str	r0, [r7, #4]
 8104d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	689b      	ldr	r3, [r3, #8]
 8104d96:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8104d9a:	683b      	ldr	r3, [r7, #0]
 8104d9c:	431a      	orrs	r2, r3
 8104d9e:	687b      	ldr	r3, [r7, #4]
 8104da0:	609a      	str	r2, [r3, #8]
}
 8104da2:	bf00      	nop
 8104da4:	370c      	adds	r7, #12
 8104da6:	46bd      	mov	sp, r7
 8104da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dac:	4770      	bx	lr

08104dae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8104dae:	b480      	push	{r7}
 8104db0:	b083      	sub	sp, #12
 8104db2:	af00      	add	r7, sp, #0
 8104db4:	6078      	str	r0, [r7, #4]
 8104db6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	689b      	ldr	r3, [r3, #8]
 8104dbc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8104dc0:	683b      	ldr	r3, [r7, #0]
 8104dc2:	431a      	orrs	r2, r3
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	609a      	str	r2, [r3, #8]
}
 8104dc8:	bf00      	nop
 8104dca:	370c      	adds	r7, #12
 8104dcc:	46bd      	mov	sp, r7
 8104dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dd2:	4770      	bx	lr

08104dd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8104dd4:	b480      	push	{r7}
 8104dd6:	b083      	sub	sp, #12
 8104dd8:	af00      	add	r7, sp, #0
 8104dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8104ddc:	687b      	ldr	r3, [r7, #4]
 8104dde:	689b      	ldr	r3, [r3, #8]
 8104de0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8104de4:	4618      	mov	r0, r3
 8104de6:	370c      	adds	r7, #12
 8104de8:	46bd      	mov	sp, r7
 8104dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dee:	4770      	bx	lr

08104df0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8104df0:	b480      	push	{r7}
 8104df2:	b087      	sub	sp, #28
 8104df4:	af00      	add	r7, sp, #0
 8104df6:	60f8      	str	r0, [r7, #12]
 8104df8:	60b9      	str	r1, [r7, #8]
 8104dfa:	607a      	str	r2, [r7, #4]
 8104dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8104dfe:	68fb      	ldr	r3, [r7, #12]
 8104e00:	3360      	adds	r3, #96	@ 0x60
 8104e02:	461a      	mov	r2, r3
 8104e04:	68bb      	ldr	r3, [r7, #8]
 8104e06:	009b      	lsls	r3, r3, #2
 8104e08:	4413      	add	r3, r2
 8104e0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8104e0c:	697b      	ldr	r3, [r7, #20]
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8104e1a:	683b      	ldr	r3, [r7, #0]
 8104e1c:	430b      	orrs	r3, r1
 8104e1e:	431a      	orrs	r2, r3
 8104e20:	697b      	ldr	r3, [r7, #20]
 8104e22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8104e24:	bf00      	nop
 8104e26:	371c      	adds	r7, #28
 8104e28:	46bd      	mov	sp, r7
 8104e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e2e:	4770      	bx	lr

08104e30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8104e30:	b480      	push	{r7}
 8104e32:	b085      	sub	sp, #20
 8104e34:	af00      	add	r7, sp, #0
 8104e36:	60f8      	str	r0, [r7, #12]
 8104e38:	60b9      	str	r1, [r7, #8]
 8104e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8104e3c:	68fb      	ldr	r3, [r7, #12]
 8104e3e:	691b      	ldr	r3, [r3, #16]
 8104e40:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8104e44:	68bb      	ldr	r3, [r7, #8]
 8104e46:	f003 031f 	and.w	r3, r3, #31
 8104e4a:	6879      	ldr	r1, [r7, #4]
 8104e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8104e50:	431a      	orrs	r2, r3
 8104e52:	68fb      	ldr	r3, [r7, #12]
 8104e54:	611a      	str	r2, [r3, #16]
}
 8104e56:	bf00      	nop
 8104e58:	3714      	adds	r7, #20
 8104e5a:	46bd      	mov	sp, r7
 8104e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e60:	4770      	bx	lr

08104e62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8104e62:	b480      	push	{r7}
 8104e64:	b087      	sub	sp, #28
 8104e66:	af00      	add	r7, sp, #0
 8104e68:	60f8      	str	r0, [r7, #12]
 8104e6a:	60b9      	str	r1, [r7, #8]
 8104e6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8104e6e:	68fb      	ldr	r3, [r7, #12]
 8104e70:	3360      	adds	r3, #96	@ 0x60
 8104e72:	461a      	mov	r2, r3
 8104e74:	68bb      	ldr	r3, [r7, #8]
 8104e76:	009b      	lsls	r3, r3, #2
 8104e78:	4413      	add	r3, r2
 8104e7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8104e7c:	697b      	ldr	r3, [r7, #20]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	431a      	orrs	r2, r3
 8104e88:	697b      	ldr	r3, [r7, #20]
 8104e8a:	601a      	str	r2, [r3, #0]
  }
}
 8104e8c:	bf00      	nop
 8104e8e:	371c      	adds	r7, #28
 8104e90:	46bd      	mov	sp, r7
 8104e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e96:	4770      	bx	lr

08104e98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8104e98:	b480      	push	{r7}
 8104e9a:	b083      	sub	sp, #12
 8104e9c:	af00      	add	r7, sp, #0
 8104e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	68db      	ldr	r3, [r3, #12]
 8104ea4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8104ea8:	2b00      	cmp	r3, #0
 8104eaa:	d101      	bne.n	8104eb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8104eac:	2301      	movs	r3, #1
 8104eae:	e000      	b.n	8104eb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8104eb0:	2300      	movs	r3, #0
}
 8104eb2:	4618      	mov	r0, r3
 8104eb4:	370c      	adds	r7, #12
 8104eb6:	46bd      	mov	sp, r7
 8104eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ebc:	4770      	bx	lr

08104ebe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8104ebe:	b480      	push	{r7}
 8104ec0:	b087      	sub	sp, #28
 8104ec2:	af00      	add	r7, sp, #0
 8104ec4:	60f8      	str	r0, [r7, #12]
 8104ec6:	60b9      	str	r1, [r7, #8]
 8104ec8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8104eca:	68fb      	ldr	r3, [r7, #12]
 8104ecc:	3330      	adds	r3, #48	@ 0x30
 8104ece:	461a      	mov	r2, r3
 8104ed0:	68bb      	ldr	r3, [r7, #8]
 8104ed2:	0a1b      	lsrs	r3, r3, #8
 8104ed4:	009b      	lsls	r3, r3, #2
 8104ed6:	f003 030c 	and.w	r3, r3, #12
 8104eda:	4413      	add	r3, r2
 8104edc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8104ede:	697b      	ldr	r3, [r7, #20]
 8104ee0:	681a      	ldr	r2, [r3, #0]
 8104ee2:	68bb      	ldr	r3, [r7, #8]
 8104ee4:	f003 031f 	and.w	r3, r3, #31
 8104ee8:	211f      	movs	r1, #31
 8104eea:	fa01 f303 	lsl.w	r3, r1, r3
 8104eee:	43db      	mvns	r3, r3
 8104ef0:	401a      	ands	r2, r3
 8104ef2:	687b      	ldr	r3, [r7, #4]
 8104ef4:	0e9b      	lsrs	r3, r3, #26
 8104ef6:	f003 011f 	and.w	r1, r3, #31
 8104efa:	68bb      	ldr	r3, [r7, #8]
 8104efc:	f003 031f 	and.w	r3, r3, #31
 8104f00:	fa01 f303 	lsl.w	r3, r1, r3
 8104f04:	431a      	orrs	r2, r3
 8104f06:	697b      	ldr	r3, [r7, #20]
 8104f08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8104f0a:	bf00      	nop
 8104f0c:	371c      	adds	r7, #28
 8104f0e:	46bd      	mov	sp, r7
 8104f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f14:	4770      	bx	lr

08104f16 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8104f16:	b480      	push	{r7}
 8104f18:	b087      	sub	sp, #28
 8104f1a:	af00      	add	r7, sp, #0
 8104f1c:	60f8      	str	r0, [r7, #12]
 8104f1e:	60b9      	str	r1, [r7, #8]
 8104f20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8104f22:	68fb      	ldr	r3, [r7, #12]
 8104f24:	3314      	adds	r3, #20
 8104f26:	461a      	mov	r2, r3
 8104f28:	68bb      	ldr	r3, [r7, #8]
 8104f2a:	0e5b      	lsrs	r3, r3, #25
 8104f2c:	009b      	lsls	r3, r3, #2
 8104f2e:	f003 0304 	and.w	r3, r3, #4
 8104f32:	4413      	add	r3, r2
 8104f34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8104f36:	697b      	ldr	r3, [r7, #20]
 8104f38:	681a      	ldr	r2, [r3, #0]
 8104f3a:	68bb      	ldr	r3, [r7, #8]
 8104f3c:	0d1b      	lsrs	r3, r3, #20
 8104f3e:	f003 031f 	and.w	r3, r3, #31
 8104f42:	2107      	movs	r1, #7
 8104f44:	fa01 f303 	lsl.w	r3, r1, r3
 8104f48:	43db      	mvns	r3, r3
 8104f4a:	401a      	ands	r2, r3
 8104f4c:	68bb      	ldr	r3, [r7, #8]
 8104f4e:	0d1b      	lsrs	r3, r3, #20
 8104f50:	f003 031f 	and.w	r3, r3, #31
 8104f54:	6879      	ldr	r1, [r7, #4]
 8104f56:	fa01 f303 	lsl.w	r3, r1, r3
 8104f5a:	431a      	orrs	r2, r3
 8104f5c:	697b      	ldr	r3, [r7, #20]
 8104f5e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8104f60:	bf00      	nop
 8104f62:	371c      	adds	r7, #28
 8104f64:	46bd      	mov	sp, r7
 8104f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f6a:	4770      	bx	lr

08104f6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8104f6c:	b480      	push	{r7}
 8104f6e:	b085      	sub	sp, #20
 8104f70:	af00      	add	r7, sp, #0
 8104f72:	60f8      	str	r0, [r7, #12]
 8104f74:	60b9      	str	r1, [r7, #8]
 8104f76:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8104f78:	68fb      	ldr	r3, [r7, #12]
 8104f7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8104f7e:	68bb      	ldr	r3, [r7, #8]
 8104f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104f84:	43db      	mvns	r3, r3
 8104f86:	401a      	ands	r2, r3
 8104f88:	687b      	ldr	r3, [r7, #4]
 8104f8a:	f003 0318 	and.w	r3, r3, #24
 8104f8e:	4908      	ldr	r1, [pc, #32]	@ (8104fb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8104f90:	40d9      	lsrs	r1, r3
 8104f92:	68bb      	ldr	r3, [r7, #8]
 8104f94:	400b      	ands	r3, r1
 8104f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104f9a:	431a      	orrs	r2, r3
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8104fa2:	bf00      	nop
 8104fa4:	3714      	adds	r7, #20
 8104fa6:	46bd      	mov	sp, r7
 8104fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fac:	4770      	bx	lr
 8104fae:	bf00      	nop
 8104fb0:	000fffff 	.word	0x000fffff

08104fb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8104fb4:	b480      	push	{r7}
 8104fb6:	b083      	sub	sp, #12
 8104fb8:	af00      	add	r7, sp, #0
 8104fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8104fbc:	687b      	ldr	r3, [r7, #4]
 8104fbe:	689b      	ldr	r3, [r3, #8]
 8104fc0:	f003 031f 	and.w	r3, r3, #31
}
 8104fc4:	4618      	mov	r0, r3
 8104fc6:	370c      	adds	r7, #12
 8104fc8:	46bd      	mov	sp, r7
 8104fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fce:	4770      	bx	lr

08104fd0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8104fd0:	b480      	push	{r7}
 8104fd2:	b083      	sub	sp, #12
 8104fd4:	af00      	add	r7, sp, #0
 8104fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8104fd8:	687b      	ldr	r3, [r7, #4]
 8104fda:	689b      	ldr	r3, [r3, #8]
 8104fdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8104fe0:	4618      	mov	r0, r3
 8104fe2:	370c      	adds	r7, #12
 8104fe4:	46bd      	mov	sp, r7
 8104fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fea:	4770      	bx	lr

08104fec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8104fec:	b480      	push	{r7}
 8104fee:	b083      	sub	sp, #12
 8104ff0:	af00      	add	r7, sp, #0
 8104ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	689b      	ldr	r3, [r3, #8]
 8104ff8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8104ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105000:	687a      	ldr	r2, [r7, #4]
 8105002:	6093      	str	r3, [r2, #8]
}
 8105004:	bf00      	nop
 8105006:	370c      	adds	r7, #12
 8105008:	46bd      	mov	sp, r7
 810500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810500e:	4770      	bx	lr

08105010 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8105010:	b480      	push	{r7}
 8105012:	b083      	sub	sp, #12
 8105014:	af00      	add	r7, sp, #0
 8105016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	689b      	ldr	r3, [r3, #8]
 810501c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105024:	d101      	bne.n	810502a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8105026:	2301      	movs	r3, #1
 8105028:	e000      	b.n	810502c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810502a:	2300      	movs	r3, #0
}
 810502c:	4618      	mov	r0, r3
 810502e:	370c      	adds	r7, #12
 8105030:	46bd      	mov	sp, r7
 8105032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105036:	4770      	bx	lr

08105038 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8105038:	b480      	push	{r7}
 810503a:	b083      	sub	sp, #12
 810503c:	af00      	add	r7, sp, #0
 810503e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	689b      	ldr	r3, [r3, #8]
 8105044:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8105048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810504c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8105050:	687b      	ldr	r3, [r7, #4]
 8105052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8105054:	bf00      	nop
 8105056:	370c      	adds	r7, #12
 8105058:	46bd      	mov	sp, r7
 810505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810505e:	4770      	bx	lr

08105060 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8105060:	b480      	push	{r7}
 8105062:	b083      	sub	sp, #12
 8105064:	af00      	add	r7, sp, #0
 8105066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	689b      	ldr	r3, [r3, #8]
 810506c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8105070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105074:	d101      	bne.n	810507a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8105076:	2301      	movs	r3, #1
 8105078:	e000      	b.n	810507c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810507a:	2300      	movs	r3, #0
}
 810507c:	4618      	mov	r0, r3
 810507e:	370c      	adds	r7, #12
 8105080:	46bd      	mov	sp, r7
 8105082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105086:	4770      	bx	lr

08105088 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8105088:	b480      	push	{r7}
 810508a:	b083      	sub	sp, #12
 810508c:	af00      	add	r7, sp, #0
 810508e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	689b      	ldr	r3, [r3, #8]
 8105094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8105098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810509c:	f043 0201 	orr.w	r2, r3, #1
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 81050a4:	bf00      	nop
 81050a6:	370c      	adds	r7, #12
 81050a8:	46bd      	mov	sp, r7
 81050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050ae:	4770      	bx	lr

081050b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 81050b0:	b480      	push	{r7}
 81050b2:	b083      	sub	sp, #12
 81050b4:	af00      	add	r7, sp, #0
 81050b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81050b8:	687b      	ldr	r3, [r7, #4]
 81050ba:	689b      	ldr	r3, [r3, #8]
 81050bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81050c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81050c4:	f043 0202 	orr.w	r2, r3, #2
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 81050cc:	bf00      	nop
 81050ce:	370c      	adds	r7, #12
 81050d0:	46bd      	mov	sp, r7
 81050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050d6:	4770      	bx	lr

081050d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81050d8:	b480      	push	{r7}
 81050da:	b083      	sub	sp, #12
 81050dc:	af00      	add	r7, sp, #0
 81050de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81050e0:	687b      	ldr	r3, [r7, #4]
 81050e2:	689b      	ldr	r3, [r3, #8]
 81050e4:	f003 0301 	and.w	r3, r3, #1
 81050e8:	2b01      	cmp	r3, #1
 81050ea:	d101      	bne.n	81050f0 <LL_ADC_IsEnabled+0x18>
 81050ec:	2301      	movs	r3, #1
 81050ee:	e000      	b.n	81050f2 <LL_ADC_IsEnabled+0x1a>
 81050f0:	2300      	movs	r3, #0
}
 81050f2:	4618      	mov	r0, r3
 81050f4:	370c      	adds	r7, #12
 81050f6:	46bd      	mov	sp, r7
 81050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050fc:	4770      	bx	lr

081050fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 81050fe:	b480      	push	{r7}
 8105100:	b083      	sub	sp, #12
 8105102:	af00      	add	r7, sp, #0
 8105104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	689b      	ldr	r3, [r3, #8]
 810510a:	f003 0302 	and.w	r3, r3, #2
 810510e:	2b02      	cmp	r3, #2
 8105110:	d101      	bne.n	8105116 <LL_ADC_IsDisableOngoing+0x18>
 8105112:	2301      	movs	r3, #1
 8105114:	e000      	b.n	8105118 <LL_ADC_IsDisableOngoing+0x1a>
 8105116:	2300      	movs	r3, #0
}
 8105118:	4618      	mov	r0, r3
 810511a:	370c      	adds	r7, #12
 810511c:	46bd      	mov	sp, r7
 810511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105122:	4770      	bx	lr

08105124 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8105124:	b480      	push	{r7}
 8105126:	b083      	sub	sp, #12
 8105128:	af00      	add	r7, sp, #0
 810512a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	689b      	ldr	r3, [r3, #8]
 8105130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8105134:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105138:	f043 0204 	orr.w	r2, r3, #4
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8105140:	bf00      	nop
 8105142:	370c      	adds	r7, #12
 8105144:	46bd      	mov	sp, r7
 8105146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810514a:	4770      	bx	lr

0810514c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 810514c:	b480      	push	{r7}
 810514e:	b083      	sub	sp, #12
 8105150:	af00      	add	r7, sp, #0
 8105152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	689b      	ldr	r3, [r3, #8]
 8105158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810515c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105160:	f043 0210 	orr.w	r2, r3, #16
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8105168:	bf00      	nop
 810516a:	370c      	adds	r7, #12
 810516c:	46bd      	mov	sp, r7
 810516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105172:	4770      	bx	lr

08105174 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8105174:	b480      	push	{r7}
 8105176:	b083      	sub	sp, #12
 8105178:	af00      	add	r7, sp, #0
 810517a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	689b      	ldr	r3, [r3, #8]
 8105180:	f003 0304 	and.w	r3, r3, #4
 8105184:	2b04      	cmp	r3, #4
 8105186:	d101      	bne.n	810518c <LL_ADC_REG_IsConversionOngoing+0x18>
 8105188:	2301      	movs	r3, #1
 810518a:	e000      	b.n	810518e <LL_ADC_REG_IsConversionOngoing+0x1a>
 810518c:	2300      	movs	r3, #0
}
 810518e:	4618      	mov	r0, r3
 8105190:	370c      	adds	r7, #12
 8105192:	46bd      	mov	sp, r7
 8105194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105198:	4770      	bx	lr

0810519a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 810519a:	b480      	push	{r7}
 810519c:	b083      	sub	sp, #12
 810519e:	af00      	add	r7, sp, #0
 81051a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81051a2:	687b      	ldr	r3, [r7, #4]
 81051a4:	689b      	ldr	r3, [r3, #8]
 81051a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81051aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81051ae:	f043 0220 	orr.w	r2, r3, #32
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 81051b6:	bf00      	nop
 81051b8:	370c      	adds	r7, #12
 81051ba:	46bd      	mov	sp, r7
 81051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051c0:	4770      	bx	lr

081051c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81051c2:	b480      	push	{r7}
 81051c4:	b083      	sub	sp, #12
 81051c6:	af00      	add	r7, sp, #0
 81051c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	689b      	ldr	r3, [r3, #8]
 81051ce:	f003 0308 	and.w	r3, r3, #8
 81051d2:	2b08      	cmp	r3, #8
 81051d4:	d101      	bne.n	81051da <LL_ADC_INJ_IsConversionOngoing+0x18>
 81051d6:	2301      	movs	r3, #1
 81051d8:	e000      	b.n	81051dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81051da:	2300      	movs	r3, #0
}
 81051dc:	4618      	mov	r0, r3
 81051de:	370c      	adds	r7, #12
 81051e0:	46bd      	mov	sp, r7
 81051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e6:	4770      	bx	lr

081051e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81051e8:	b590      	push	{r4, r7, lr}
 81051ea:	b089      	sub	sp, #36	@ 0x24
 81051ec:	af00      	add	r7, sp, #0
 81051ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81051f0:	2300      	movs	r3, #0
 81051f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81051f4:	2300      	movs	r3, #0
 81051f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	2b00      	cmp	r3, #0
 81051fc:	d101      	bne.n	8105202 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81051fe:	2301      	movs	r3, #1
 8105200:	e18f      	b.n	8105522 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	68db      	ldr	r3, [r3, #12]
 8105206:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810520c:	2b00      	cmp	r3, #0
 810520e:	d109      	bne.n	8105224 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8105210:	6878      	ldr	r0, [r7, #4]
 8105212:	f7fe ff8f 	bl	8104134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	2200      	movs	r2, #0
 810521a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	2200      	movs	r2, #0
 8105220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8105224:	687b      	ldr	r3, [r7, #4]
 8105226:	681b      	ldr	r3, [r3, #0]
 8105228:	4618      	mov	r0, r3
 810522a:	f7ff fef1 	bl	8105010 <LL_ADC_IsDeepPowerDownEnabled>
 810522e:	4603      	mov	r3, r0
 8105230:	2b00      	cmp	r3, #0
 8105232:	d004      	beq.n	810523e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	4618      	mov	r0, r3
 810523a:	f7ff fed7 	bl	8104fec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	4618      	mov	r0, r3
 8105244:	f7ff ff0c 	bl	8105060 <LL_ADC_IsInternalRegulatorEnabled>
 8105248:	4603      	mov	r3, r0
 810524a:	2b00      	cmp	r3, #0
 810524c:	d114      	bne.n	8105278 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	4618      	mov	r0, r3
 8105254:	f7ff fef0 	bl	8105038 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8105258:	4b88      	ldr	r3, [pc, #544]	@ (810547c <HAL_ADC_Init+0x294>)
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	099b      	lsrs	r3, r3, #6
 810525e:	4a88      	ldr	r2, [pc, #544]	@ (8105480 <HAL_ADC_Init+0x298>)
 8105260:	fba2 2303 	umull	r2, r3, r2, r3
 8105264:	099b      	lsrs	r3, r3, #6
 8105266:	3301      	adds	r3, #1
 8105268:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810526a:	e002      	b.n	8105272 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810526c:	68bb      	ldr	r3, [r7, #8]
 810526e:	3b01      	subs	r3, #1
 8105270:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8105272:	68bb      	ldr	r3, [r7, #8]
 8105274:	2b00      	cmp	r3, #0
 8105276:	d1f9      	bne.n	810526c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	4618      	mov	r0, r3
 810527e:	f7ff feef 	bl	8105060 <LL_ADC_IsInternalRegulatorEnabled>
 8105282:	4603      	mov	r3, r0
 8105284:	2b00      	cmp	r3, #0
 8105286:	d10d      	bne.n	81052a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810528c:	f043 0210 	orr.w	r2, r3, #16
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105298:	f043 0201 	orr.w	r2, r3, #1
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81052a0:	2301      	movs	r3, #1
 81052a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	681b      	ldr	r3, [r3, #0]
 81052a8:	4618      	mov	r0, r3
 81052aa:	f7ff ff63 	bl	8105174 <LL_ADC_REG_IsConversionOngoing>
 81052ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81052b4:	f003 0310 	and.w	r3, r3, #16
 81052b8:	2b00      	cmp	r3, #0
 81052ba:	f040 8129 	bne.w	8105510 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81052be:	697b      	ldr	r3, [r7, #20]
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	f040 8125 	bne.w	8105510 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81052ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81052ce:	f043 0202 	orr.w	r2, r3, #2
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	681b      	ldr	r3, [r3, #0]
 81052da:	4618      	mov	r0, r3
 81052dc:	f7ff fefc 	bl	81050d8 <LL_ADC_IsEnabled>
 81052e0:	4603      	mov	r3, r0
 81052e2:	2b00      	cmp	r3, #0
 81052e4:	d136      	bne.n	8105354 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81052e6:	687b      	ldr	r3, [r7, #4]
 81052e8:	681b      	ldr	r3, [r3, #0]
 81052ea:	4a66      	ldr	r2, [pc, #408]	@ (8105484 <HAL_ADC_Init+0x29c>)
 81052ec:	4293      	cmp	r3, r2
 81052ee:	d004      	beq.n	81052fa <HAL_ADC_Init+0x112>
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	4a64      	ldr	r2, [pc, #400]	@ (8105488 <HAL_ADC_Init+0x2a0>)
 81052f6:	4293      	cmp	r3, r2
 81052f8:	d10e      	bne.n	8105318 <HAL_ADC_Init+0x130>
 81052fa:	4862      	ldr	r0, [pc, #392]	@ (8105484 <HAL_ADC_Init+0x29c>)
 81052fc:	f7ff feec 	bl	81050d8 <LL_ADC_IsEnabled>
 8105300:	4604      	mov	r4, r0
 8105302:	4861      	ldr	r0, [pc, #388]	@ (8105488 <HAL_ADC_Init+0x2a0>)
 8105304:	f7ff fee8 	bl	81050d8 <LL_ADC_IsEnabled>
 8105308:	4603      	mov	r3, r0
 810530a:	4323      	orrs	r3, r4
 810530c:	2b00      	cmp	r3, #0
 810530e:	bf0c      	ite	eq
 8105310:	2301      	moveq	r3, #1
 8105312:	2300      	movne	r3, #0
 8105314:	b2db      	uxtb	r3, r3
 8105316:	e008      	b.n	810532a <HAL_ADC_Init+0x142>
 8105318:	485c      	ldr	r0, [pc, #368]	@ (810548c <HAL_ADC_Init+0x2a4>)
 810531a:	f7ff fedd 	bl	81050d8 <LL_ADC_IsEnabled>
 810531e:	4603      	mov	r3, r0
 8105320:	2b00      	cmp	r3, #0
 8105322:	bf0c      	ite	eq
 8105324:	2301      	moveq	r3, #1
 8105326:	2300      	movne	r3, #0
 8105328:	b2db      	uxtb	r3, r3
 810532a:	2b00      	cmp	r3, #0
 810532c:	d012      	beq.n	8105354 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	4a54      	ldr	r2, [pc, #336]	@ (8105484 <HAL_ADC_Init+0x29c>)
 8105334:	4293      	cmp	r3, r2
 8105336:	d004      	beq.n	8105342 <HAL_ADC_Init+0x15a>
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	681b      	ldr	r3, [r3, #0]
 810533c:	4a52      	ldr	r2, [pc, #328]	@ (8105488 <HAL_ADC_Init+0x2a0>)
 810533e:	4293      	cmp	r3, r2
 8105340:	d101      	bne.n	8105346 <HAL_ADC_Init+0x15e>
 8105342:	4a53      	ldr	r2, [pc, #332]	@ (8105490 <HAL_ADC_Init+0x2a8>)
 8105344:	e000      	b.n	8105348 <HAL_ADC_Init+0x160>
 8105346:	4a53      	ldr	r2, [pc, #332]	@ (8105494 <HAL_ADC_Init+0x2ac>)
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	685b      	ldr	r3, [r3, #4]
 810534c:	4619      	mov	r1, r3
 810534e:	4610      	mov	r0, r2
 8105350:	f7ff fd1a 	bl	8104d88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8105354:	f7ff fd0c 	bl	8104d70 <HAL_GetREVID>
 8105358:	4603      	mov	r3, r0
 810535a:	f241 0203 	movw	r2, #4099	@ 0x1003
 810535e:	4293      	cmp	r3, r2
 8105360:	d914      	bls.n	810538c <HAL_ADC_Init+0x1a4>
 8105362:	687b      	ldr	r3, [r7, #4]
 8105364:	689b      	ldr	r3, [r3, #8]
 8105366:	2b10      	cmp	r3, #16
 8105368:	d110      	bne.n	810538c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	7d5b      	ldrb	r3, [r3, #21]
 810536e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8105374:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8105376:	687b      	ldr	r3, [r7, #4]
 8105378:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810537a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	7f1b      	ldrb	r3, [r3, #28]
 8105380:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8105382:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8105384:	f043 030c 	orr.w	r3, r3, #12
 8105388:	61bb      	str	r3, [r7, #24]
 810538a:	e00d      	b.n	81053a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	7d5b      	ldrb	r3, [r3, #21]
 8105390:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8105396:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810539c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	7f1b      	ldrb	r3, [r3, #28]
 81053a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81053a4:	4313      	orrs	r3, r2
 81053a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	7f1b      	ldrb	r3, [r3, #28]
 81053ac:	2b01      	cmp	r3, #1
 81053ae:	d106      	bne.n	81053be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	6a1b      	ldr	r3, [r3, #32]
 81053b4:	3b01      	subs	r3, #1
 81053b6:	045b      	lsls	r3, r3, #17
 81053b8:	69ba      	ldr	r2, [r7, #24]
 81053ba:	4313      	orrs	r3, r2
 81053bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81053c2:	2b00      	cmp	r3, #0
 81053c4:	d009      	beq.n	81053da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81053ca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81053d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81053d4:	69ba      	ldr	r2, [r7, #24]
 81053d6:	4313      	orrs	r3, r2
 81053d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	681b      	ldr	r3, [r3, #0]
 81053de:	68da      	ldr	r2, [r3, #12]
 81053e0:	4b2d      	ldr	r3, [pc, #180]	@ (8105498 <HAL_ADC_Init+0x2b0>)
 81053e2:	4013      	ands	r3, r2
 81053e4:	687a      	ldr	r2, [r7, #4]
 81053e6:	6812      	ldr	r2, [r2, #0]
 81053e8:	69b9      	ldr	r1, [r7, #24]
 81053ea:	430b      	orrs	r3, r1
 81053ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81053ee:	687b      	ldr	r3, [r7, #4]
 81053f0:	681b      	ldr	r3, [r3, #0]
 81053f2:	4618      	mov	r0, r3
 81053f4:	f7ff febe 	bl	8105174 <LL_ADC_REG_IsConversionOngoing>
 81053f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	681b      	ldr	r3, [r3, #0]
 81053fe:	4618      	mov	r0, r3
 8105400:	f7ff fedf 	bl	81051c2 <LL_ADC_INJ_IsConversionOngoing>
 8105404:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8105406:	693b      	ldr	r3, [r7, #16]
 8105408:	2b00      	cmp	r3, #0
 810540a:	d15f      	bne.n	81054cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 810540c:	68fb      	ldr	r3, [r7, #12]
 810540e:	2b00      	cmp	r3, #0
 8105410:	d15c      	bne.n	81054cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	7d1b      	ldrb	r3, [r3, #20]
 8105416:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 810541c:	4313      	orrs	r3, r2
 810541e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	681b      	ldr	r3, [r3, #0]
 8105424:	68db      	ldr	r3, [r3, #12]
 8105426:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810542a:	f023 0303 	bic.w	r3, r3, #3
 810542e:	687a      	ldr	r2, [r7, #4]
 8105430:	6812      	ldr	r2, [r2, #0]
 8105432:	69b9      	ldr	r1, [r7, #24]
 8105434:	430b      	orrs	r3, r1
 8105436:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810543e:	2b01      	cmp	r3, #1
 8105440:	d12e      	bne.n	81054a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105446:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	681b      	ldr	r3, [r3, #0]
 810544c:	691a      	ldr	r2, [r3, #16]
 810544e:	4b13      	ldr	r3, [pc, #76]	@ (810549c <HAL_ADC_Init+0x2b4>)
 8105450:	4013      	ands	r3, r2
 8105452:	687a      	ldr	r2, [r7, #4]
 8105454:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8105456:	3a01      	subs	r2, #1
 8105458:	0411      	lsls	r1, r2, #16
 810545a:	687a      	ldr	r2, [r7, #4]
 810545c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 810545e:	4311      	orrs	r1, r2
 8105460:	687a      	ldr	r2, [r7, #4]
 8105462:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8105464:	4311      	orrs	r1, r2
 8105466:	687a      	ldr	r2, [r7, #4]
 8105468:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810546a:	430a      	orrs	r2, r1
 810546c:	431a      	orrs	r2, r3
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	f042 0201 	orr.w	r2, r2, #1
 8105476:	611a      	str	r2, [r3, #16]
 8105478:	e01a      	b.n	81054b0 <HAL_ADC_Init+0x2c8>
 810547a:	bf00      	nop
 810547c:	10000000 	.word	0x10000000
 8105480:	053e2d63 	.word	0x053e2d63
 8105484:	40022000 	.word	0x40022000
 8105488:	40022100 	.word	0x40022100
 810548c:	58026000 	.word	0x58026000
 8105490:	40022300 	.word	0x40022300
 8105494:	58026300 	.word	0x58026300
 8105498:	fff0c003 	.word	0xfff0c003
 810549c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	691a      	ldr	r2, [r3, #16]
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	681b      	ldr	r3, [r3, #0]
 81054aa:	f022 0201 	bic.w	r2, r2, #1
 81054ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	691b      	ldr	r3, [r3, #16]
 81054b6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	430a      	orrs	r2, r1
 81054c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81054c6:	6878      	ldr	r0, [r7, #4]
 81054c8:	f000 ff32 	bl	8106330 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81054cc:	687b      	ldr	r3, [r7, #4]
 81054ce:	68db      	ldr	r3, [r3, #12]
 81054d0:	2b01      	cmp	r3, #1
 81054d2:	d10c      	bne.n	81054ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81054da:	f023 010f 	bic.w	r1, r3, #15
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	699b      	ldr	r3, [r3, #24]
 81054e2:	1e5a      	subs	r2, r3, #1
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	430a      	orrs	r2, r1
 81054ea:	631a      	str	r2, [r3, #48]	@ 0x30
 81054ec:	e007      	b.n	81054fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	681b      	ldr	r3, [r3, #0]
 81054f8:	f022 020f 	bic.w	r2, r2, #15
 81054fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81054fe:	687b      	ldr	r3, [r7, #4]
 8105500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105502:	f023 0303 	bic.w	r3, r3, #3
 8105506:	f043 0201 	orr.w	r2, r3, #1
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	655a      	str	r2, [r3, #84]	@ 0x54
 810550e:	e007      	b.n	8105520 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105514:	f043 0210 	orr.w	r2, r3, #16
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810551c:	2301      	movs	r3, #1
 810551e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8105520:	7ffb      	ldrb	r3, [r7, #31]
}
 8105522:	4618      	mov	r0, r3
 8105524:	3724      	adds	r7, #36	@ 0x24
 8105526:	46bd      	mov	sp, r7
 8105528:	bd90      	pop	{r4, r7, pc}
 810552a:	bf00      	nop

0810552c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 810552c:	b580      	push	{r7, lr}
 810552e:	b086      	sub	sp, #24
 8105530:	af00      	add	r7, sp, #0
 8105532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	4a5d      	ldr	r2, [pc, #372]	@ (81056b0 <HAL_ADC_Start+0x184>)
 810553a:	4293      	cmp	r3, r2
 810553c:	d004      	beq.n	8105548 <HAL_ADC_Start+0x1c>
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	4a5c      	ldr	r2, [pc, #368]	@ (81056b4 <HAL_ADC_Start+0x188>)
 8105544:	4293      	cmp	r3, r2
 8105546:	d101      	bne.n	810554c <HAL_ADC_Start+0x20>
 8105548:	4b5b      	ldr	r3, [pc, #364]	@ (81056b8 <HAL_ADC_Start+0x18c>)
 810554a:	e000      	b.n	810554e <HAL_ADC_Start+0x22>
 810554c:	4b5b      	ldr	r3, [pc, #364]	@ (81056bc <HAL_ADC_Start+0x190>)
 810554e:	4618      	mov	r0, r3
 8105550:	f7ff fd30 	bl	8104fb4 <LL_ADC_GetMultimode>
 8105554:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	4618      	mov	r0, r3
 810555c:	f7ff fe0a 	bl	8105174 <LL_ADC_REG_IsConversionOngoing>
 8105560:	4603      	mov	r3, r0
 8105562:	2b00      	cmp	r3, #0
 8105564:	f040 809c 	bne.w	81056a0 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810556e:	2b01      	cmp	r3, #1
 8105570:	d101      	bne.n	8105576 <HAL_ADC_Start+0x4a>
 8105572:	2302      	movs	r3, #2
 8105574:	e097      	b.n	81056a6 <HAL_ADC_Start+0x17a>
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	2201      	movs	r2, #1
 810557a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 810557e:	6878      	ldr	r0, [r7, #4]
 8105580:	f000 fdec 	bl	810615c <ADC_Enable>
 8105584:	4603      	mov	r3, r0
 8105586:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8105588:	7dfb      	ldrb	r3, [r7, #23]
 810558a:	2b00      	cmp	r3, #0
 810558c:	f040 8083 	bne.w	8105696 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105594:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8105598:	f023 0301 	bic.w	r3, r3, #1
 810559c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	681b      	ldr	r3, [r3, #0]
 81055a8:	4a42      	ldr	r2, [pc, #264]	@ (81056b4 <HAL_ADC_Start+0x188>)
 81055aa:	4293      	cmp	r3, r2
 81055ac:	d002      	beq.n	81055b4 <HAL_ADC_Start+0x88>
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	e000      	b.n	81055b6 <HAL_ADC_Start+0x8a>
 81055b4:	4b3e      	ldr	r3, [pc, #248]	@ (81056b0 <HAL_ADC_Start+0x184>)
 81055b6:	687a      	ldr	r2, [r7, #4]
 81055b8:	6812      	ldr	r2, [r2, #0]
 81055ba:	4293      	cmp	r3, r2
 81055bc:	d002      	beq.n	81055c4 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81055be:	693b      	ldr	r3, [r7, #16]
 81055c0:	2b00      	cmp	r3, #0
 81055c2:	d105      	bne.n	81055d0 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81055c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81055d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81055d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81055dc:	d106      	bne.n	81055ec <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81055e2:	f023 0206 	bic.w	r2, r3, #6
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	659a      	str	r2, [r3, #88]	@ 0x58
 81055ea:	e002      	b.n	81055f2 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	2200      	movs	r2, #0
 81055f0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	681b      	ldr	r3, [r3, #0]
 81055f6:	221c      	movs	r2, #28
 81055f8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	2200      	movs	r2, #0
 81055fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	681b      	ldr	r3, [r3, #0]
 8105606:	4a2b      	ldr	r2, [pc, #172]	@ (81056b4 <HAL_ADC_Start+0x188>)
 8105608:	4293      	cmp	r3, r2
 810560a:	d002      	beq.n	8105612 <HAL_ADC_Start+0xe6>
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	e000      	b.n	8105614 <HAL_ADC_Start+0xe8>
 8105612:	4b27      	ldr	r3, [pc, #156]	@ (81056b0 <HAL_ADC_Start+0x184>)
 8105614:	687a      	ldr	r2, [r7, #4]
 8105616:	6812      	ldr	r2, [r2, #0]
 8105618:	4293      	cmp	r3, r2
 810561a:	d008      	beq.n	810562e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810561c:	693b      	ldr	r3, [r7, #16]
 810561e:	2b00      	cmp	r3, #0
 8105620:	d005      	beq.n	810562e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8105622:	693b      	ldr	r3, [r7, #16]
 8105624:	2b05      	cmp	r3, #5
 8105626:	d002      	beq.n	810562e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8105628:	693b      	ldr	r3, [r7, #16]
 810562a:	2b09      	cmp	r3, #9
 810562c:	d114      	bne.n	8105658 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	681b      	ldr	r3, [r3, #0]
 8105632:	68db      	ldr	r3, [r3, #12]
 8105634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105638:	2b00      	cmp	r3, #0
 810563a:	d007      	beq.n	810564c <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105640:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8105644:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	681b      	ldr	r3, [r3, #0]
 8105650:	4618      	mov	r0, r3
 8105652:	f7ff fd67 	bl	8105124 <LL_ADC_REG_StartConversion>
 8105656:	e025      	b.n	81056a4 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810565c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	681b      	ldr	r3, [r3, #0]
 8105668:	4a12      	ldr	r2, [pc, #72]	@ (81056b4 <HAL_ADC_Start+0x188>)
 810566a:	4293      	cmp	r3, r2
 810566c:	d002      	beq.n	8105674 <HAL_ADC_Start+0x148>
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	681b      	ldr	r3, [r3, #0]
 8105672:	e000      	b.n	8105676 <HAL_ADC_Start+0x14a>
 8105674:	4b0e      	ldr	r3, [pc, #56]	@ (81056b0 <HAL_ADC_Start+0x184>)
 8105676:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8105678:	68fb      	ldr	r3, [r7, #12]
 810567a:	68db      	ldr	r3, [r3, #12]
 810567c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105680:	2b00      	cmp	r3, #0
 8105682:	d00f      	beq.n	81056a4 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105688:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 810568c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	655a      	str	r2, [r3, #84]	@ 0x54
 8105694:	e006      	b.n	81056a4 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	2200      	movs	r2, #0
 810569a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 810569e:	e001      	b.n	81056a4 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 81056a0:	2302      	movs	r3, #2
 81056a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 81056a4:	7dfb      	ldrb	r3, [r7, #23]
}
 81056a6:	4618      	mov	r0, r3
 81056a8:	3718      	adds	r7, #24
 81056aa:	46bd      	mov	sp, r7
 81056ac:	bd80      	pop	{r7, pc}
 81056ae:	bf00      	nop
 81056b0:	40022000 	.word	0x40022000
 81056b4:	40022100 	.word	0x40022100
 81056b8:	40022300 	.word	0x40022300
 81056bc:	58026300 	.word	0x58026300

081056c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 81056c0:	b580      	push	{r7, lr}
 81056c2:	b084      	sub	sp, #16
 81056c4:	af00      	add	r7, sp, #0
 81056c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81056ce:	2b01      	cmp	r3, #1
 81056d0:	d101      	bne.n	81056d6 <HAL_ADC_Stop+0x16>
 81056d2:	2302      	movs	r3, #2
 81056d4:	e023      	b.n	810571e <HAL_ADC_Stop+0x5e>
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	2201      	movs	r2, #1
 81056da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 81056de:	2103      	movs	r1, #3
 81056e0:	6878      	ldr	r0, [r7, #4]
 81056e2:	f000 fc7f 	bl	8105fe4 <ADC_ConversionStop>
 81056e6:	4603      	mov	r3, r0
 81056e8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 81056ea:	7bfb      	ldrb	r3, [r7, #15]
 81056ec:	2b00      	cmp	r3, #0
 81056ee:	d111      	bne.n	8105714 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 81056f0:	6878      	ldr	r0, [r7, #4]
 81056f2:	f000 fdbd 	bl	8106270 <ADC_Disable>
 81056f6:	4603      	mov	r3, r0
 81056f8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 81056fa:	7bfb      	ldrb	r3, [r7, #15]
 81056fc:	2b00      	cmp	r3, #0
 81056fe:	d109      	bne.n	8105714 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105704:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8105708:	f023 0301 	bic.w	r3, r3, #1
 810570c:	f043 0201 	orr.w	r2, r3, #1
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	2200      	movs	r2, #0
 8105718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 810571c:	7bfb      	ldrb	r3, [r7, #15]
}
 810571e:	4618      	mov	r0, r3
 8105720:	3710      	adds	r7, #16
 8105722:	46bd      	mov	sp, r7
 8105724:	bd80      	pop	{r7, pc}
	...

08105728 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8105728:	b580      	push	{r7, lr}
 810572a:	b088      	sub	sp, #32
 810572c:	af00      	add	r7, sp, #0
 810572e:	6078      	str	r0, [r7, #4]
 8105730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	681b      	ldr	r3, [r3, #0]
 8105736:	4a72      	ldr	r2, [pc, #456]	@ (8105900 <HAL_ADC_PollForConversion+0x1d8>)
 8105738:	4293      	cmp	r3, r2
 810573a:	d004      	beq.n	8105746 <HAL_ADC_PollForConversion+0x1e>
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	4a70      	ldr	r2, [pc, #448]	@ (8105904 <HAL_ADC_PollForConversion+0x1dc>)
 8105742:	4293      	cmp	r3, r2
 8105744:	d101      	bne.n	810574a <HAL_ADC_PollForConversion+0x22>
 8105746:	4b70      	ldr	r3, [pc, #448]	@ (8105908 <HAL_ADC_PollForConversion+0x1e0>)
 8105748:	e000      	b.n	810574c <HAL_ADC_PollForConversion+0x24>
 810574a:	4b70      	ldr	r3, [pc, #448]	@ (810590c <HAL_ADC_PollForConversion+0x1e4>)
 810574c:	4618      	mov	r0, r3
 810574e:	f7ff fc31 	bl	8104fb4 <LL_ADC_GetMultimode>
 8105752:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	691b      	ldr	r3, [r3, #16]
 8105758:	2b08      	cmp	r3, #8
 810575a:	d102      	bne.n	8105762 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 810575c:	2308      	movs	r3, #8
 810575e:	61fb      	str	r3, [r7, #28]
 8105760:	e037      	b.n	81057d2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8105762:	697b      	ldr	r3, [r7, #20]
 8105764:	2b00      	cmp	r3, #0
 8105766:	d005      	beq.n	8105774 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8105768:	697b      	ldr	r3, [r7, #20]
 810576a:	2b05      	cmp	r3, #5
 810576c:	d002      	beq.n	8105774 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 810576e:	697b      	ldr	r3, [r7, #20]
 8105770:	2b09      	cmp	r3, #9
 8105772:	d111      	bne.n	8105798 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	681b      	ldr	r3, [r3, #0]
 8105778:	68db      	ldr	r3, [r3, #12]
 810577a:	f003 0301 	and.w	r3, r3, #1
 810577e:	2b00      	cmp	r3, #0
 8105780:	d007      	beq.n	8105792 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105786:	f043 0220 	orr.w	r2, r3, #32
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 810578e:	2301      	movs	r3, #1
 8105790:	e0b1      	b.n	81058f6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8105792:	2304      	movs	r3, #4
 8105794:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8105796:	e01c      	b.n	81057d2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	4a58      	ldr	r2, [pc, #352]	@ (8105900 <HAL_ADC_PollForConversion+0x1d8>)
 810579e:	4293      	cmp	r3, r2
 81057a0:	d004      	beq.n	81057ac <HAL_ADC_PollForConversion+0x84>
 81057a2:	687b      	ldr	r3, [r7, #4]
 81057a4:	681b      	ldr	r3, [r3, #0]
 81057a6:	4a57      	ldr	r2, [pc, #348]	@ (8105904 <HAL_ADC_PollForConversion+0x1dc>)
 81057a8:	4293      	cmp	r3, r2
 81057aa:	d101      	bne.n	81057b0 <HAL_ADC_PollForConversion+0x88>
 81057ac:	4b56      	ldr	r3, [pc, #344]	@ (8105908 <HAL_ADC_PollForConversion+0x1e0>)
 81057ae:	e000      	b.n	81057b2 <HAL_ADC_PollForConversion+0x8a>
 81057b0:	4b56      	ldr	r3, [pc, #344]	@ (810590c <HAL_ADC_PollForConversion+0x1e4>)
 81057b2:	4618      	mov	r0, r3
 81057b4:	f7ff fc0c 	bl	8104fd0 <LL_ADC_GetMultiDMATransfer>
 81057b8:	4603      	mov	r3, r0
 81057ba:	2b00      	cmp	r3, #0
 81057bc:	d007      	beq.n	81057ce <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81057be:	687b      	ldr	r3, [r7, #4]
 81057c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81057c2:	f043 0220 	orr.w	r2, r3, #32
 81057c6:	687b      	ldr	r3, [r7, #4]
 81057c8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 81057ca:	2301      	movs	r3, #1
 81057cc:	e093      	b.n	81058f6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 81057ce:	2304      	movs	r3, #4
 81057d0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 81057d2:	f7ff fa9d 	bl	8104d10 <HAL_GetTick>
 81057d6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81057d8:	e021      	b.n	810581e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 81057da:	683b      	ldr	r3, [r7, #0]
 81057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057e0:	d01d      	beq.n	810581e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 81057e2:	f7ff fa95 	bl	8104d10 <HAL_GetTick>
 81057e6:	4602      	mov	r2, r0
 81057e8:	693b      	ldr	r3, [r7, #16]
 81057ea:	1ad3      	subs	r3, r2, r3
 81057ec:	683a      	ldr	r2, [r7, #0]
 81057ee:	429a      	cmp	r2, r3
 81057f0:	d302      	bcc.n	81057f8 <HAL_ADC_PollForConversion+0xd0>
 81057f2:	683b      	ldr	r3, [r7, #0]
 81057f4:	2b00      	cmp	r3, #0
 81057f6:	d112      	bne.n	810581e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81057f8:	687b      	ldr	r3, [r7, #4]
 81057fa:	681b      	ldr	r3, [r3, #0]
 81057fc:	681a      	ldr	r2, [r3, #0]
 81057fe:	69fb      	ldr	r3, [r7, #28]
 8105800:	4013      	ands	r3, r2
 8105802:	2b00      	cmp	r3, #0
 8105804:	d10b      	bne.n	810581e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810580a:	f043 0204 	orr.w	r2, r3, #4
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	2200      	movs	r2, #0
 8105816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 810581a:	2303      	movs	r3, #3
 810581c:	e06b      	b.n	81058f6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	681a      	ldr	r2, [r3, #0]
 8105824:	69fb      	ldr	r3, [r7, #28]
 8105826:	4013      	ands	r3, r2
 8105828:	2b00      	cmp	r3, #0
 810582a:	d0d6      	beq.n	81057da <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105830:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8105834:	687b      	ldr	r3, [r7, #4]
 8105836:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	4618      	mov	r0, r3
 810583e:	f7ff fb2b 	bl	8104e98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8105842:	4603      	mov	r3, r0
 8105844:	2b00      	cmp	r3, #0
 8105846:	d01c      	beq.n	8105882 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8105848:	687b      	ldr	r3, [r7, #4]
 810584a:	7d5b      	ldrb	r3, [r3, #21]
 810584c:	2b00      	cmp	r3, #0
 810584e:	d118      	bne.n	8105882 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8105850:	687b      	ldr	r3, [r7, #4]
 8105852:	681b      	ldr	r3, [r3, #0]
 8105854:	681b      	ldr	r3, [r3, #0]
 8105856:	f003 0308 	and.w	r3, r3, #8
 810585a:	2b08      	cmp	r3, #8
 810585c:	d111      	bne.n	8105882 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105862:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8105866:	687b      	ldr	r3, [r7, #4]
 8105868:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810586e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8105872:	2b00      	cmp	r3, #0
 8105874:	d105      	bne.n	8105882 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810587a:	f043 0201 	orr.w	r2, r3, #1
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	681b      	ldr	r3, [r3, #0]
 8105886:	4a1f      	ldr	r2, [pc, #124]	@ (8105904 <HAL_ADC_PollForConversion+0x1dc>)
 8105888:	4293      	cmp	r3, r2
 810588a:	d002      	beq.n	8105892 <HAL_ADC_PollForConversion+0x16a>
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	681b      	ldr	r3, [r3, #0]
 8105890:	e000      	b.n	8105894 <HAL_ADC_PollForConversion+0x16c>
 8105892:	4b1b      	ldr	r3, [pc, #108]	@ (8105900 <HAL_ADC_PollForConversion+0x1d8>)
 8105894:	687a      	ldr	r2, [r7, #4]
 8105896:	6812      	ldr	r2, [r2, #0]
 8105898:	4293      	cmp	r3, r2
 810589a:	d008      	beq.n	81058ae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810589c:	697b      	ldr	r3, [r7, #20]
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d005      	beq.n	81058ae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81058a2:	697b      	ldr	r3, [r7, #20]
 81058a4:	2b05      	cmp	r3, #5
 81058a6:	d002      	beq.n	81058ae <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81058a8:	697b      	ldr	r3, [r7, #20]
 81058aa:	2b09      	cmp	r3, #9
 81058ac:	d104      	bne.n	81058b8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	681b      	ldr	r3, [r3, #0]
 81058b2:	68db      	ldr	r3, [r3, #12]
 81058b4:	61bb      	str	r3, [r7, #24]
 81058b6:	e00c      	b.n	81058d2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	4a11      	ldr	r2, [pc, #68]	@ (8105904 <HAL_ADC_PollForConversion+0x1dc>)
 81058be:	4293      	cmp	r3, r2
 81058c0:	d002      	beq.n	81058c8 <HAL_ADC_PollForConversion+0x1a0>
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	681b      	ldr	r3, [r3, #0]
 81058c6:	e000      	b.n	81058ca <HAL_ADC_PollForConversion+0x1a2>
 81058c8:	4b0d      	ldr	r3, [pc, #52]	@ (8105900 <HAL_ADC_PollForConversion+0x1d8>)
 81058ca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81058cc:	68fb      	ldr	r3, [r7, #12]
 81058ce:	68db      	ldr	r3, [r3, #12]
 81058d0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 81058d2:	69fb      	ldr	r3, [r7, #28]
 81058d4:	2b08      	cmp	r3, #8
 81058d6:	d104      	bne.n	81058e2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	681b      	ldr	r3, [r3, #0]
 81058dc:	2208      	movs	r2, #8
 81058de:	601a      	str	r2, [r3, #0]
 81058e0:	e008      	b.n	81058f4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 81058e2:	69bb      	ldr	r3, [r7, #24]
 81058e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81058e8:	2b00      	cmp	r3, #0
 81058ea:	d103      	bne.n	81058f4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	681b      	ldr	r3, [r3, #0]
 81058f0:	220c      	movs	r2, #12
 81058f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 81058f4:	2300      	movs	r3, #0
}
 81058f6:	4618      	mov	r0, r3
 81058f8:	3720      	adds	r7, #32
 81058fa:	46bd      	mov	sp, r7
 81058fc:	bd80      	pop	{r7, pc}
 81058fe:	bf00      	nop
 8105900:	40022000 	.word	0x40022000
 8105904:	40022100 	.word	0x40022100
 8105908:	40022300 	.word	0x40022300
 810590c:	58026300 	.word	0x58026300

08105910 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8105910:	b480      	push	{r7}
 8105912:	b083      	sub	sp, #12
 8105914:	af00      	add	r7, sp, #0
 8105916:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	681b      	ldr	r3, [r3, #0]
 810591c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 810591e:	4618      	mov	r0, r3
 8105920:	370c      	adds	r7, #12
 8105922:	46bd      	mov	sp, r7
 8105924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105928:	4770      	bx	lr
	...

0810592c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810592c:	b590      	push	{r4, r7, lr}
 810592e:	b0a1      	sub	sp, #132	@ 0x84
 8105930:	af00      	add	r7, sp, #0
 8105932:	6078      	str	r0, [r7, #4]
 8105934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8105936:	2300      	movs	r3, #0
 8105938:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810593c:	2300      	movs	r3, #0
 810593e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8105940:	683b      	ldr	r3, [r7, #0]
 8105942:	68db      	ldr	r3, [r3, #12]
 8105944:	4a65      	ldr	r2, [pc, #404]	@ (8105adc <HAL_ADC_ConfigChannel+0x1b0>)
 8105946:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810594e:	2b01      	cmp	r3, #1
 8105950:	d101      	bne.n	8105956 <HAL_ADC_ConfigChannel+0x2a>
 8105952:	2302      	movs	r3, #2
 8105954:	e32e      	b.n	8105fb4 <HAL_ADC_ConfigChannel+0x688>
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	2201      	movs	r2, #1
 810595a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810595e:	687b      	ldr	r3, [r7, #4]
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	4618      	mov	r0, r3
 8105964:	f7ff fc06 	bl	8105174 <LL_ADC_REG_IsConversionOngoing>
 8105968:	4603      	mov	r3, r0
 810596a:	2b00      	cmp	r3, #0
 810596c:	f040 8313 	bne.w	8105f96 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8105970:	683b      	ldr	r3, [r7, #0]
 8105972:	681b      	ldr	r3, [r3, #0]
 8105974:	2b00      	cmp	r3, #0
 8105976:	db2c      	blt.n	81059d2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8105978:	683b      	ldr	r3, [r7, #0]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105980:	2b00      	cmp	r3, #0
 8105982:	d108      	bne.n	8105996 <HAL_ADC_ConfigChannel+0x6a>
 8105984:	683b      	ldr	r3, [r7, #0]
 8105986:	681b      	ldr	r3, [r3, #0]
 8105988:	0e9b      	lsrs	r3, r3, #26
 810598a:	f003 031f 	and.w	r3, r3, #31
 810598e:	2201      	movs	r2, #1
 8105990:	fa02 f303 	lsl.w	r3, r2, r3
 8105994:	e016      	b.n	81059c4 <HAL_ADC_ConfigChannel+0x98>
 8105996:	683b      	ldr	r3, [r7, #0]
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810599c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810599e:	fa93 f3a3 	rbit	r3, r3
 81059a2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81059a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81059a6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81059a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81059aa:	2b00      	cmp	r3, #0
 81059ac:	d101      	bne.n	81059b2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 81059ae:	2320      	movs	r3, #32
 81059b0:	e003      	b.n	81059ba <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 81059b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81059b4:	fab3 f383 	clz	r3, r3
 81059b8:	b2db      	uxtb	r3, r3
 81059ba:	f003 031f 	and.w	r3, r3, #31
 81059be:	2201      	movs	r2, #1
 81059c0:	fa02 f303 	lsl.w	r3, r2, r3
 81059c4:	687a      	ldr	r2, [r7, #4]
 81059c6:	6812      	ldr	r2, [r2, #0]
 81059c8:	69d1      	ldr	r1, [r2, #28]
 81059ca:	687a      	ldr	r2, [r7, #4]
 81059cc:	6812      	ldr	r2, [r2, #0]
 81059ce:	430b      	orrs	r3, r1
 81059d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	6818      	ldr	r0, [r3, #0]
 81059d6:	683b      	ldr	r3, [r7, #0]
 81059d8:	6859      	ldr	r1, [r3, #4]
 81059da:	683b      	ldr	r3, [r7, #0]
 81059dc:	681b      	ldr	r3, [r3, #0]
 81059de:	461a      	mov	r2, r3
 81059e0:	f7ff fa6d 	bl	8104ebe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	681b      	ldr	r3, [r3, #0]
 81059e8:	4618      	mov	r0, r3
 81059ea:	f7ff fbc3 	bl	8105174 <LL_ADC_REG_IsConversionOngoing>
 81059ee:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	681b      	ldr	r3, [r3, #0]
 81059f4:	4618      	mov	r0, r3
 81059f6:	f7ff fbe4 	bl	81051c2 <LL_ADC_INJ_IsConversionOngoing>
 81059fa:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81059fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81059fe:	2b00      	cmp	r3, #0
 8105a00:	f040 80b8 	bne.w	8105b74 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8105a04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8105a06:	2b00      	cmp	r3, #0
 8105a08:	f040 80b4 	bne.w	8105b74 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	6818      	ldr	r0, [r3, #0]
 8105a10:	683b      	ldr	r3, [r7, #0]
 8105a12:	6819      	ldr	r1, [r3, #0]
 8105a14:	683b      	ldr	r3, [r7, #0]
 8105a16:	689b      	ldr	r3, [r3, #8]
 8105a18:	461a      	mov	r2, r3
 8105a1a:	f7ff fa7c 	bl	8104f16 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8105a1e:	4b30      	ldr	r3, [pc, #192]	@ (8105ae0 <HAL_ADC_ConfigChannel+0x1b4>)
 8105a20:	681b      	ldr	r3, [r3, #0]
 8105a22:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8105a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105a2a:	d10b      	bne.n	8105a44 <HAL_ADC_ConfigChannel+0x118>
 8105a2c:	683b      	ldr	r3, [r7, #0]
 8105a2e:	695a      	ldr	r2, [r3, #20]
 8105a30:	687b      	ldr	r3, [r7, #4]
 8105a32:	681b      	ldr	r3, [r3, #0]
 8105a34:	68db      	ldr	r3, [r3, #12]
 8105a36:	089b      	lsrs	r3, r3, #2
 8105a38:	f003 0307 	and.w	r3, r3, #7
 8105a3c:	005b      	lsls	r3, r3, #1
 8105a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8105a42:	e01d      	b.n	8105a80 <HAL_ADC_ConfigChannel+0x154>
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	681b      	ldr	r3, [r3, #0]
 8105a48:	68db      	ldr	r3, [r3, #12]
 8105a4a:	f003 0310 	and.w	r3, r3, #16
 8105a4e:	2b00      	cmp	r3, #0
 8105a50:	d10b      	bne.n	8105a6a <HAL_ADC_ConfigChannel+0x13e>
 8105a52:	683b      	ldr	r3, [r7, #0]
 8105a54:	695a      	ldr	r2, [r3, #20]
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	68db      	ldr	r3, [r3, #12]
 8105a5c:	089b      	lsrs	r3, r3, #2
 8105a5e:	f003 0307 	and.w	r3, r3, #7
 8105a62:	005b      	lsls	r3, r3, #1
 8105a64:	fa02 f303 	lsl.w	r3, r2, r3
 8105a68:	e00a      	b.n	8105a80 <HAL_ADC_ConfigChannel+0x154>
 8105a6a:	683b      	ldr	r3, [r7, #0]
 8105a6c:	695a      	ldr	r2, [r3, #20]
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	681b      	ldr	r3, [r3, #0]
 8105a72:	68db      	ldr	r3, [r3, #12]
 8105a74:	089b      	lsrs	r3, r3, #2
 8105a76:	f003 0304 	and.w	r3, r3, #4
 8105a7a:	005b      	lsls	r3, r3, #1
 8105a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8105a80:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8105a82:	683b      	ldr	r3, [r7, #0]
 8105a84:	691b      	ldr	r3, [r3, #16]
 8105a86:	2b04      	cmp	r3, #4
 8105a88:	d02c      	beq.n	8105ae4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	6818      	ldr	r0, [r3, #0]
 8105a8e:	683b      	ldr	r3, [r7, #0]
 8105a90:	6919      	ldr	r1, [r3, #16]
 8105a92:	683b      	ldr	r3, [r7, #0]
 8105a94:	681a      	ldr	r2, [r3, #0]
 8105a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105a98:	f7ff f9aa 	bl	8104df0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	6818      	ldr	r0, [r3, #0]
 8105aa0:	683b      	ldr	r3, [r7, #0]
 8105aa2:	6919      	ldr	r1, [r3, #16]
 8105aa4:	683b      	ldr	r3, [r7, #0]
 8105aa6:	7e5b      	ldrb	r3, [r3, #25]
 8105aa8:	2b01      	cmp	r3, #1
 8105aaa:	d102      	bne.n	8105ab2 <HAL_ADC_ConfigChannel+0x186>
 8105aac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8105ab0:	e000      	b.n	8105ab4 <HAL_ADC_ConfigChannel+0x188>
 8105ab2:	2300      	movs	r3, #0
 8105ab4:	461a      	mov	r2, r3
 8105ab6:	f7ff f9d4 	bl	8104e62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	6818      	ldr	r0, [r3, #0]
 8105abe:	683b      	ldr	r3, [r7, #0]
 8105ac0:	6919      	ldr	r1, [r3, #16]
 8105ac2:	683b      	ldr	r3, [r7, #0]
 8105ac4:	7e1b      	ldrb	r3, [r3, #24]
 8105ac6:	2b01      	cmp	r3, #1
 8105ac8:	d102      	bne.n	8105ad0 <HAL_ADC_ConfigChannel+0x1a4>
 8105aca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8105ace:	e000      	b.n	8105ad2 <HAL_ADC_ConfigChannel+0x1a6>
 8105ad0:	2300      	movs	r3, #0
 8105ad2:	461a      	mov	r2, r3
 8105ad4:	f7ff f9ac 	bl	8104e30 <LL_ADC_SetDataRightShift>
 8105ad8:	e04c      	b.n	8105b74 <HAL_ADC_ConfigChannel+0x248>
 8105ada:	bf00      	nop
 8105adc:	47ff0000 	.word	0x47ff0000
 8105ae0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105ae4:	687b      	ldr	r3, [r7, #4]
 8105ae6:	681b      	ldr	r3, [r3, #0]
 8105ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105aea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105aee:	683b      	ldr	r3, [r7, #0]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	069b      	lsls	r3, r3, #26
 8105af4:	429a      	cmp	r2, r3
 8105af6:	d107      	bne.n	8105b08 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8105af8:	687b      	ldr	r3, [r7, #4]
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8105afe:	687b      	ldr	r3, [r7, #4]
 8105b00:	681b      	ldr	r3, [r3, #0]
 8105b02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105b06:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	681b      	ldr	r3, [r3, #0]
 8105b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105b0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105b12:	683b      	ldr	r3, [r7, #0]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	069b      	lsls	r3, r3, #26
 8105b18:	429a      	cmp	r2, r3
 8105b1a:	d107      	bne.n	8105b2c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	681b      	ldr	r3, [r3, #0]
 8105b20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8105b22:	687b      	ldr	r3, [r7, #4]
 8105b24:	681b      	ldr	r3, [r3, #0]
 8105b26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105b2a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105b32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105b36:	683b      	ldr	r3, [r7, #0]
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	069b      	lsls	r3, r3, #26
 8105b3c:	429a      	cmp	r2, r3
 8105b3e:	d107      	bne.n	8105b50 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8105b40:	687b      	ldr	r3, [r7, #4]
 8105b42:	681b      	ldr	r3, [r3, #0]
 8105b44:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105b4e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	681b      	ldr	r3, [r3, #0]
 8105b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105b56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105b5a:	683b      	ldr	r3, [r7, #0]
 8105b5c:	681b      	ldr	r3, [r3, #0]
 8105b5e:	069b      	lsls	r3, r3, #26
 8105b60:	429a      	cmp	r2, r3
 8105b62:	d107      	bne.n	8105b74 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	681b      	ldr	r3, [r3, #0]
 8105b68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	681b      	ldr	r3, [r3, #0]
 8105b6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105b72:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	4618      	mov	r0, r3
 8105b7a:	f7ff faad 	bl	81050d8 <LL_ADC_IsEnabled>
 8105b7e:	4603      	mov	r3, r0
 8105b80:	2b00      	cmp	r3, #0
 8105b82:	f040 8211 	bne.w	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	6818      	ldr	r0, [r3, #0]
 8105b8a:	683b      	ldr	r3, [r7, #0]
 8105b8c:	6819      	ldr	r1, [r3, #0]
 8105b8e:	683b      	ldr	r3, [r7, #0]
 8105b90:	68db      	ldr	r3, [r3, #12]
 8105b92:	461a      	mov	r2, r3
 8105b94:	f7ff f9ea 	bl	8104f6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8105b98:	683b      	ldr	r3, [r7, #0]
 8105b9a:	68db      	ldr	r3, [r3, #12]
 8105b9c:	4aa1      	ldr	r2, [pc, #644]	@ (8105e24 <HAL_ADC_ConfigChannel+0x4f8>)
 8105b9e:	4293      	cmp	r3, r2
 8105ba0:	f040 812e 	bne.w	8105e00 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105ba8:	683b      	ldr	r3, [r7, #0]
 8105baa:	681b      	ldr	r3, [r3, #0]
 8105bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105bb0:	2b00      	cmp	r3, #0
 8105bb2:	d10b      	bne.n	8105bcc <HAL_ADC_ConfigChannel+0x2a0>
 8105bb4:	683b      	ldr	r3, [r7, #0]
 8105bb6:	681b      	ldr	r3, [r3, #0]
 8105bb8:	0e9b      	lsrs	r3, r3, #26
 8105bba:	3301      	adds	r3, #1
 8105bbc:	f003 031f 	and.w	r3, r3, #31
 8105bc0:	2b09      	cmp	r3, #9
 8105bc2:	bf94      	ite	ls
 8105bc4:	2301      	movls	r3, #1
 8105bc6:	2300      	movhi	r3, #0
 8105bc8:	b2db      	uxtb	r3, r3
 8105bca:	e019      	b.n	8105c00 <HAL_ADC_ConfigChannel+0x2d4>
 8105bcc:	683b      	ldr	r3, [r7, #0]
 8105bce:	681b      	ldr	r3, [r3, #0]
 8105bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8105bd4:	fa93 f3a3 	rbit	r3, r3
 8105bd8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8105bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8105bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8105bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8105be0:	2b00      	cmp	r3, #0
 8105be2:	d101      	bne.n	8105be8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8105be4:	2320      	movs	r3, #32
 8105be6:	e003      	b.n	8105bf0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8105be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8105bea:	fab3 f383 	clz	r3, r3
 8105bee:	b2db      	uxtb	r3, r3
 8105bf0:	3301      	adds	r3, #1
 8105bf2:	f003 031f 	and.w	r3, r3, #31
 8105bf6:	2b09      	cmp	r3, #9
 8105bf8:	bf94      	ite	ls
 8105bfa:	2301      	movls	r3, #1
 8105bfc:	2300      	movhi	r3, #0
 8105bfe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105c00:	2b00      	cmp	r3, #0
 8105c02:	d079      	beq.n	8105cf8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105c04:	683b      	ldr	r3, [r7, #0]
 8105c06:	681b      	ldr	r3, [r3, #0]
 8105c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105c0c:	2b00      	cmp	r3, #0
 8105c0e:	d107      	bne.n	8105c20 <HAL_ADC_ConfigChannel+0x2f4>
 8105c10:	683b      	ldr	r3, [r7, #0]
 8105c12:	681b      	ldr	r3, [r3, #0]
 8105c14:	0e9b      	lsrs	r3, r3, #26
 8105c16:	3301      	adds	r3, #1
 8105c18:	069b      	lsls	r3, r3, #26
 8105c1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105c1e:	e015      	b.n	8105c4c <HAL_ADC_ConfigChannel+0x320>
 8105c20:	683b      	ldr	r3, [r7, #0]
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105c28:	fa93 f3a3 	rbit	r3, r3
 8105c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8105c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8105c30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8105c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105c34:	2b00      	cmp	r3, #0
 8105c36:	d101      	bne.n	8105c3c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8105c38:	2320      	movs	r3, #32
 8105c3a:	e003      	b.n	8105c44 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8105c3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105c3e:	fab3 f383 	clz	r3, r3
 8105c42:	b2db      	uxtb	r3, r3
 8105c44:	3301      	adds	r3, #1
 8105c46:	069b      	lsls	r3, r3, #26
 8105c48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105c4c:	683b      	ldr	r3, [r7, #0]
 8105c4e:	681b      	ldr	r3, [r3, #0]
 8105c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105c54:	2b00      	cmp	r3, #0
 8105c56:	d109      	bne.n	8105c6c <HAL_ADC_ConfigChannel+0x340>
 8105c58:	683b      	ldr	r3, [r7, #0]
 8105c5a:	681b      	ldr	r3, [r3, #0]
 8105c5c:	0e9b      	lsrs	r3, r3, #26
 8105c5e:	3301      	adds	r3, #1
 8105c60:	f003 031f 	and.w	r3, r3, #31
 8105c64:	2101      	movs	r1, #1
 8105c66:	fa01 f303 	lsl.w	r3, r1, r3
 8105c6a:	e017      	b.n	8105c9c <HAL_ADC_ConfigChannel+0x370>
 8105c6c:	683b      	ldr	r3, [r7, #0]
 8105c6e:	681b      	ldr	r3, [r3, #0]
 8105c70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105c74:	fa93 f3a3 	rbit	r3, r3
 8105c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8105c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105c7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8105c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105c80:	2b00      	cmp	r3, #0
 8105c82:	d101      	bne.n	8105c88 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8105c84:	2320      	movs	r3, #32
 8105c86:	e003      	b.n	8105c90 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8105c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105c8a:	fab3 f383 	clz	r3, r3
 8105c8e:	b2db      	uxtb	r3, r3
 8105c90:	3301      	adds	r3, #1
 8105c92:	f003 031f 	and.w	r3, r3, #31
 8105c96:	2101      	movs	r1, #1
 8105c98:	fa01 f303 	lsl.w	r3, r1, r3
 8105c9c:	ea42 0103 	orr.w	r1, r2, r3
 8105ca0:	683b      	ldr	r3, [r7, #0]
 8105ca2:	681b      	ldr	r3, [r3, #0]
 8105ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105ca8:	2b00      	cmp	r3, #0
 8105caa:	d10a      	bne.n	8105cc2 <HAL_ADC_ConfigChannel+0x396>
 8105cac:	683b      	ldr	r3, [r7, #0]
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	0e9b      	lsrs	r3, r3, #26
 8105cb2:	3301      	adds	r3, #1
 8105cb4:	f003 021f 	and.w	r2, r3, #31
 8105cb8:	4613      	mov	r3, r2
 8105cba:	005b      	lsls	r3, r3, #1
 8105cbc:	4413      	add	r3, r2
 8105cbe:	051b      	lsls	r3, r3, #20
 8105cc0:	e018      	b.n	8105cf4 <HAL_ADC_ConfigChannel+0x3c8>
 8105cc2:	683b      	ldr	r3, [r7, #0]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105cca:	fa93 f3a3 	rbit	r3, r3
 8105cce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8105cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8105cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105cd6:	2b00      	cmp	r3, #0
 8105cd8:	d101      	bne.n	8105cde <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8105cda:	2320      	movs	r3, #32
 8105cdc:	e003      	b.n	8105ce6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8105cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ce0:	fab3 f383 	clz	r3, r3
 8105ce4:	b2db      	uxtb	r3, r3
 8105ce6:	3301      	adds	r3, #1
 8105ce8:	f003 021f 	and.w	r2, r3, #31
 8105cec:	4613      	mov	r3, r2
 8105cee:	005b      	lsls	r3, r3, #1
 8105cf0:	4413      	add	r3, r2
 8105cf2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105cf4:	430b      	orrs	r3, r1
 8105cf6:	e07e      	b.n	8105df6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105cf8:	683b      	ldr	r3, [r7, #0]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105d00:	2b00      	cmp	r3, #0
 8105d02:	d107      	bne.n	8105d14 <HAL_ADC_ConfigChannel+0x3e8>
 8105d04:	683b      	ldr	r3, [r7, #0]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	0e9b      	lsrs	r3, r3, #26
 8105d0a:	3301      	adds	r3, #1
 8105d0c:	069b      	lsls	r3, r3, #26
 8105d0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105d12:	e015      	b.n	8105d40 <HAL_ADC_ConfigChannel+0x414>
 8105d14:	683b      	ldr	r3, [r7, #0]
 8105d16:	681b      	ldr	r3, [r3, #0]
 8105d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105d1c:	fa93 f3a3 	rbit	r3, r3
 8105d20:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8105d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8105d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105d28:	2b00      	cmp	r3, #0
 8105d2a:	d101      	bne.n	8105d30 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8105d2c:	2320      	movs	r3, #32
 8105d2e:	e003      	b.n	8105d38 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8105d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105d32:	fab3 f383 	clz	r3, r3
 8105d36:	b2db      	uxtb	r3, r3
 8105d38:	3301      	adds	r3, #1
 8105d3a:	069b      	lsls	r3, r3, #26
 8105d3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105d40:	683b      	ldr	r3, [r7, #0]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105d48:	2b00      	cmp	r3, #0
 8105d4a:	d109      	bne.n	8105d60 <HAL_ADC_ConfigChannel+0x434>
 8105d4c:	683b      	ldr	r3, [r7, #0]
 8105d4e:	681b      	ldr	r3, [r3, #0]
 8105d50:	0e9b      	lsrs	r3, r3, #26
 8105d52:	3301      	adds	r3, #1
 8105d54:	f003 031f 	and.w	r3, r3, #31
 8105d58:	2101      	movs	r1, #1
 8105d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8105d5e:	e017      	b.n	8105d90 <HAL_ADC_ConfigChannel+0x464>
 8105d60:	683b      	ldr	r3, [r7, #0]
 8105d62:	681b      	ldr	r3, [r3, #0]
 8105d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105d66:	69fb      	ldr	r3, [r7, #28]
 8105d68:	fa93 f3a3 	rbit	r3, r3
 8105d6c:	61bb      	str	r3, [r7, #24]
  return result;
 8105d6e:	69bb      	ldr	r3, [r7, #24]
 8105d70:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8105d72:	6a3b      	ldr	r3, [r7, #32]
 8105d74:	2b00      	cmp	r3, #0
 8105d76:	d101      	bne.n	8105d7c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8105d78:	2320      	movs	r3, #32
 8105d7a:	e003      	b.n	8105d84 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8105d7c:	6a3b      	ldr	r3, [r7, #32]
 8105d7e:	fab3 f383 	clz	r3, r3
 8105d82:	b2db      	uxtb	r3, r3
 8105d84:	3301      	adds	r3, #1
 8105d86:	f003 031f 	and.w	r3, r3, #31
 8105d8a:	2101      	movs	r1, #1
 8105d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8105d90:	ea42 0103 	orr.w	r1, r2, r3
 8105d94:	683b      	ldr	r3, [r7, #0]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105d9c:	2b00      	cmp	r3, #0
 8105d9e:	d10d      	bne.n	8105dbc <HAL_ADC_ConfigChannel+0x490>
 8105da0:	683b      	ldr	r3, [r7, #0]
 8105da2:	681b      	ldr	r3, [r3, #0]
 8105da4:	0e9b      	lsrs	r3, r3, #26
 8105da6:	3301      	adds	r3, #1
 8105da8:	f003 021f 	and.w	r2, r3, #31
 8105dac:	4613      	mov	r3, r2
 8105dae:	005b      	lsls	r3, r3, #1
 8105db0:	4413      	add	r3, r2
 8105db2:	3b1e      	subs	r3, #30
 8105db4:	051b      	lsls	r3, r3, #20
 8105db6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8105dba:	e01b      	b.n	8105df4 <HAL_ADC_ConfigChannel+0x4c8>
 8105dbc:	683b      	ldr	r3, [r7, #0]
 8105dbe:	681b      	ldr	r3, [r3, #0]
 8105dc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105dc2:	693b      	ldr	r3, [r7, #16]
 8105dc4:	fa93 f3a3 	rbit	r3, r3
 8105dc8:	60fb      	str	r3, [r7, #12]
  return result;
 8105dca:	68fb      	ldr	r3, [r7, #12]
 8105dcc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8105dce:	697b      	ldr	r3, [r7, #20]
 8105dd0:	2b00      	cmp	r3, #0
 8105dd2:	d101      	bne.n	8105dd8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8105dd4:	2320      	movs	r3, #32
 8105dd6:	e003      	b.n	8105de0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8105dd8:	697b      	ldr	r3, [r7, #20]
 8105dda:	fab3 f383 	clz	r3, r3
 8105dde:	b2db      	uxtb	r3, r3
 8105de0:	3301      	adds	r3, #1
 8105de2:	f003 021f 	and.w	r2, r3, #31
 8105de6:	4613      	mov	r3, r2
 8105de8:	005b      	lsls	r3, r3, #1
 8105dea:	4413      	add	r3, r2
 8105dec:	3b1e      	subs	r3, #30
 8105dee:	051b      	lsls	r3, r3, #20
 8105df0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105df4:	430b      	orrs	r3, r1
 8105df6:	683a      	ldr	r2, [r7, #0]
 8105df8:	6892      	ldr	r2, [r2, #8]
 8105dfa:	4619      	mov	r1, r3
 8105dfc:	f7ff f88b 	bl	8104f16 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8105e00:	683b      	ldr	r3, [r7, #0]
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	2b00      	cmp	r3, #0
 8105e06:	f280 80cf 	bge.w	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	4a06      	ldr	r2, [pc, #24]	@ (8105e28 <HAL_ADC_ConfigChannel+0x4fc>)
 8105e10:	4293      	cmp	r3, r2
 8105e12:	d004      	beq.n	8105e1e <HAL_ADC_ConfigChannel+0x4f2>
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	681b      	ldr	r3, [r3, #0]
 8105e18:	4a04      	ldr	r2, [pc, #16]	@ (8105e2c <HAL_ADC_ConfigChannel+0x500>)
 8105e1a:	4293      	cmp	r3, r2
 8105e1c:	d10a      	bne.n	8105e34 <HAL_ADC_ConfigChannel+0x508>
 8105e1e:	4b04      	ldr	r3, [pc, #16]	@ (8105e30 <HAL_ADC_ConfigChannel+0x504>)
 8105e20:	e009      	b.n	8105e36 <HAL_ADC_ConfigChannel+0x50a>
 8105e22:	bf00      	nop
 8105e24:	47ff0000 	.word	0x47ff0000
 8105e28:	40022000 	.word	0x40022000
 8105e2c:	40022100 	.word	0x40022100
 8105e30:	40022300 	.word	0x40022300
 8105e34:	4b61      	ldr	r3, [pc, #388]	@ (8105fbc <HAL_ADC_ConfigChannel+0x690>)
 8105e36:	4618      	mov	r0, r3
 8105e38:	f7fe ffcc 	bl	8104dd4 <LL_ADC_GetCommonPathInternalCh>
 8105e3c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	681b      	ldr	r3, [r3, #0]
 8105e42:	4a5f      	ldr	r2, [pc, #380]	@ (8105fc0 <HAL_ADC_ConfigChannel+0x694>)
 8105e44:	4293      	cmp	r3, r2
 8105e46:	d004      	beq.n	8105e52 <HAL_ADC_ConfigChannel+0x526>
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x698>)
 8105e4e:	4293      	cmp	r3, r2
 8105e50:	d10e      	bne.n	8105e70 <HAL_ADC_ConfigChannel+0x544>
 8105e52:	485b      	ldr	r0, [pc, #364]	@ (8105fc0 <HAL_ADC_ConfigChannel+0x694>)
 8105e54:	f7ff f940 	bl	81050d8 <LL_ADC_IsEnabled>
 8105e58:	4604      	mov	r4, r0
 8105e5a:	485a      	ldr	r0, [pc, #360]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x698>)
 8105e5c:	f7ff f93c 	bl	81050d8 <LL_ADC_IsEnabled>
 8105e60:	4603      	mov	r3, r0
 8105e62:	4323      	orrs	r3, r4
 8105e64:	2b00      	cmp	r3, #0
 8105e66:	bf0c      	ite	eq
 8105e68:	2301      	moveq	r3, #1
 8105e6a:	2300      	movne	r3, #0
 8105e6c:	b2db      	uxtb	r3, r3
 8105e6e:	e008      	b.n	8105e82 <HAL_ADC_ConfigChannel+0x556>
 8105e70:	4855      	ldr	r0, [pc, #340]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x69c>)
 8105e72:	f7ff f931 	bl	81050d8 <LL_ADC_IsEnabled>
 8105e76:	4603      	mov	r3, r0
 8105e78:	2b00      	cmp	r3, #0
 8105e7a:	bf0c      	ite	eq
 8105e7c:	2301      	moveq	r3, #1
 8105e7e:	2300      	movne	r3, #0
 8105e80:	b2db      	uxtb	r3, r3
 8105e82:	2b00      	cmp	r3, #0
 8105e84:	d07d      	beq.n	8105f82 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8105e86:	683b      	ldr	r3, [r7, #0]
 8105e88:	681b      	ldr	r3, [r3, #0]
 8105e8a:	4a50      	ldr	r2, [pc, #320]	@ (8105fcc <HAL_ADC_ConfigChannel+0x6a0>)
 8105e8c:	4293      	cmp	r3, r2
 8105e8e:	d130      	bne.n	8105ef2 <HAL_ADC_ConfigChannel+0x5c6>
 8105e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105e96:	2b00      	cmp	r3, #0
 8105e98:	d12b      	bne.n	8105ef2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8105e9a:	687b      	ldr	r3, [r7, #4]
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x69c>)
 8105ea0:	4293      	cmp	r3, r2
 8105ea2:	f040 8081 	bne.w	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8105ea6:	687b      	ldr	r3, [r7, #4]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	4a45      	ldr	r2, [pc, #276]	@ (8105fc0 <HAL_ADC_ConfigChannel+0x694>)
 8105eac:	4293      	cmp	r3, r2
 8105eae:	d004      	beq.n	8105eba <HAL_ADC_ConfigChannel+0x58e>
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	4a43      	ldr	r2, [pc, #268]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x698>)
 8105eb6:	4293      	cmp	r3, r2
 8105eb8:	d101      	bne.n	8105ebe <HAL_ADC_ConfigChannel+0x592>
 8105eba:	4a45      	ldr	r2, [pc, #276]	@ (8105fd0 <HAL_ADC_ConfigChannel+0x6a4>)
 8105ebc:	e000      	b.n	8105ec0 <HAL_ADC_ConfigChannel+0x594>
 8105ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8105fbc <HAL_ADC_ConfigChannel+0x690>)
 8105ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105ec2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8105ec6:	4619      	mov	r1, r3
 8105ec8:	4610      	mov	r0, r2
 8105eca:	f7fe ff70 	bl	8104dae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8105ece:	4b41      	ldr	r3, [pc, #260]	@ (8105fd4 <HAL_ADC_ConfigChannel+0x6a8>)
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	099b      	lsrs	r3, r3, #6
 8105ed4:	4a40      	ldr	r2, [pc, #256]	@ (8105fd8 <HAL_ADC_ConfigChannel+0x6ac>)
 8105ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8105eda:	099b      	lsrs	r3, r3, #6
 8105edc:	3301      	adds	r3, #1
 8105ede:	005b      	lsls	r3, r3, #1
 8105ee0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8105ee2:	e002      	b.n	8105eea <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8105ee4:	68bb      	ldr	r3, [r7, #8]
 8105ee6:	3b01      	subs	r3, #1
 8105ee8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8105eea:	68bb      	ldr	r3, [r7, #8]
 8105eec:	2b00      	cmp	r3, #0
 8105eee:	d1f9      	bne.n	8105ee4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8105ef0:	e05a      	b.n	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8105ef2:	683b      	ldr	r3, [r7, #0]
 8105ef4:	681b      	ldr	r3, [r3, #0]
 8105ef6:	4a39      	ldr	r2, [pc, #228]	@ (8105fdc <HAL_ADC_ConfigChannel+0x6b0>)
 8105ef8:	4293      	cmp	r3, r2
 8105efa:	d11e      	bne.n	8105f3a <HAL_ADC_ConfigChannel+0x60e>
 8105efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105f02:	2b00      	cmp	r3, #0
 8105f04:	d119      	bne.n	8105f3a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	681b      	ldr	r3, [r3, #0]
 8105f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x69c>)
 8105f0c:	4293      	cmp	r3, r2
 8105f0e:	d14b      	bne.n	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	681b      	ldr	r3, [r3, #0]
 8105f14:	4a2a      	ldr	r2, [pc, #168]	@ (8105fc0 <HAL_ADC_ConfigChannel+0x694>)
 8105f16:	4293      	cmp	r3, r2
 8105f18:	d004      	beq.n	8105f24 <HAL_ADC_ConfigChannel+0x5f8>
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	4a29      	ldr	r2, [pc, #164]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x698>)
 8105f20:	4293      	cmp	r3, r2
 8105f22:	d101      	bne.n	8105f28 <HAL_ADC_ConfigChannel+0x5fc>
 8105f24:	4a2a      	ldr	r2, [pc, #168]	@ (8105fd0 <HAL_ADC_ConfigChannel+0x6a4>)
 8105f26:	e000      	b.n	8105f2a <HAL_ADC_ConfigChannel+0x5fe>
 8105f28:	4a24      	ldr	r2, [pc, #144]	@ (8105fbc <HAL_ADC_ConfigChannel+0x690>)
 8105f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105f2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105f30:	4619      	mov	r1, r3
 8105f32:	4610      	mov	r0, r2
 8105f34:	f7fe ff3b 	bl	8104dae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8105f38:	e036      	b.n	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8105f3a:	683b      	ldr	r3, [r7, #0]
 8105f3c:	681b      	ldr	r3, [r3, #0]
 8105f3e:	4a28      	ldr	r2, [pc, #160]	@ (8105fe0 <HAL_ADC_ConfigChannel+0x6b4>)
 8105f40:	4293      	cmp	r3, r2
 8105f42:	d131      	bne.n	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
 8105f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105f4a:	2b00      	cmp	r3, #0
 8105f4c:	d12c      	bne.n	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	681b      	ldr	r3, [r3, #0]
 8105f52:	4a1d      	ldr	r2, [pc, #116]	@ (8105fc8 <HAL_ADC_ConfigChannel+0x69c>)
 8105f54:	4293      	cmp	r3, r2
 8105f56:	d127      	bne.n	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8105f58:	687b      	ldr	r3, [r7, #4]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	4a18      	ldr	r2, [pc, #96]	@ (8105fc0 <HAL_ADC_ConfigChannel+0x694>)
 8105f5e:	4293      	cmp	r3, r2
 8105f60:	d004      	beq.n	8105f6c <HAL_ADC_ConfigChannel+0x640>
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	681b      	ldr	r3, [r3, #0]
 8105f66:	4a17      	ldr	r2, [pc, #92]	@ (8105fc4 <HAL_ADC_ConfigChannel+0x698>)
 8105f68:	4293      	cmp	r3, r2
 8105f6a:	d101      	bne.n	8105f70 <HAL_ADC_ConfigChannel+0x644>
 8105f6c:	4a18      	ldr	r2, [pc, #96]	@ (8105fd0 <HAL_ADC_ConfigChannel+0x6a4>)
 8105f6e:	e000      	b.n	8105f72 <HAL_ADC_ConfigChannel+0x646>
 8105f70:	4a12      	ldr	r2, [pc, #72]	@ (8105fbc <HAL_ADC_ConfigChannel+0x690>)
 8105f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105f74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8105f78:	4619      	mov	r1, r3
 8105f7a:	4610      	mov	r0, r2
 8105f7c:	f7fe ff17 	bl	8104dae <LL_ADC_SetCommonPathInternalCh>
 8105f80:	e012      	b.n	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105f86:	f043 0220 	orr.w	r2, r3, #32
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8105f8e:	2301      	movs	r3, #1
 8105f90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8105f94:	e008      	b.n	8105fa8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105f9a:	f043 0220 	orr.w	r2, r3, #32
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8105fa2:	2301      	movs	r3, #1
 8105fa4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105fa8:	687b      	ldr	r3, [r7, #4]
 8105faa:	2200      	movs	r2, #0
 8105fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8105fb0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8105fb4:	4618      	mov	r0, r3
 8105fb6:	3784      	adds	r7, #132	@ 0x84
 8105fb8:	46bd      	mov	sp, r7
 8105fba:	bd90      	pop	{r4, r7, pc}
 8105fbc:	58026300 	.word	0x58026300
 8105fc0:	40022000 	.word	0x40022000
 8105fc4:	40022100 	.word	0x40022100
 8105fc8:	58026000 	.word	0x58026000
 8105fcc:	cb840000 	.word	0xcb840000
 8105fd0:	40022300 	.word	0x40022300
 8105fd4:	10000000 	.word	0x10000000
 8105fd8:	053e2d63 	.word	0x053e2d63
 8105fdc:	c7520000 	.word	0xc7520000
 8105fe0:	cfb80000 	.word	0xcfb80000

08105fe4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8105fe4:	b580      	push	{r7, lr}
 8105fe6:	b088      	sub	sp, #32
 8105fe8:	af00      	add	r7, sp, #0
 8105fea:	6078      	str	r0, [r7, #4]
 8105fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8105fee:	2300      	movs	r3, #0
 8105ff0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8105ff2:	683b      	ldr	r3, [r7, #0]
 8105ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	681b      	ldr	r3, [r3, #0]
 8105ffa:	4618      	mov	r0, r3
 8105ffc:	f7ff f8ba 	bl	8105174 <LL_ADC_REG_IsConversionOngoing>
 8106000:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	4618      	mov	r0, r3
 8106008:	f7ff f8db 	bl	81051c2 <LL_ADC_INJ_IsConversionOngoing>
 810600c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 810600e:	693b      	ldr	r3, [r7, #16]
 8106010:	2b00      	cmp	r3, #0
 8106012:	d103      	bne.n	810601c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8106014:	68fb      	ldr	r3, [r7, #12]
 8106016:	2b00      	cmp	r3, #0
 8106018:	f000 8098 	beq.w	810614c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	68db      	ldr	r3, [r3, #12]
 8106022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106026:	2b00      	cmp	r3, #0
 8106028:	d02a      	beq.n	8106080 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	7d5b      	ldrb	r3, [r3, #21]
 810602e:	2b01      	cmp	r3, #1
 8106030:	d126      	bne.n	8106080 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8106032:	687b      	ldr	r3, [r7, #4]
 8106034:	7d1b      	ldrb	r3, [r3, #20]
 8106036:	2b01      	cmp	r3, #1
 8106038:	d122      	bne.n	8106080 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 810603a:	2301      	movs	r3, #1
 810603c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 810603e:	e014      	b.n	810606a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8106040:	69fb      	ldr	r3, [r7, #28]
 8106042:	4a45      	ldr	r2, [pc, #276]	@ (8106158 <ADC_ConversionStop+0x174>)
 8106044:	4293      	cmp	r3, r2
 8106046:	d90d      	bls.n	8106064 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8106048:	687b      	ldr	r3, [r7, #4]
 810604a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810604c:	f043 0210 	orr.w	r2, r3, #16
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106058:	f043 0201 	orr.w	r2, r3, #1
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8106060:	2301      	movs	r3, #1
 8106062:	e074      	b.n	810614e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8106064:	69fb      	ldr	r3, [r7, #28]
 8106066:	3301      	adds	r3, #1
 8106068:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	681b      	ldr	r3, [r3, #0]
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106074:	2b40      	cmp	r3, #64	@ 0x40
 8106076:	d1e3      	bne.n	8106040 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	2240      	movs	r2, #64	@ 0x40
 810607e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8106080:	69bb      	ldr	r3, [r7, #24]
 8106082:	2b02      	cmp	r3, #2
 8106084:	d014      	beq.n	81060b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	681b      	ldr	r3, [r3, #0]
 810608a:	4618      	mov	r0, r3
 810608c:	f7ff f872 	bl	8105174 <LL_ADC_REG_IsConversionOngoing>
 8106090:	4603      	mov	r3, r0
 8106092:	2b00      	cmp	r3, #0
 8106094:	d00c      	beq.n	81060b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	681b      	ldr	r3, [r3, #0]
 810609a:	4618      	mov	r0, r3
 810609c:	f7ff f82f 	bl	81050fe <LL_ADC_IsDisableOngoing>
 81060a0:	4603      	mov	r3, r0
 81060a2:	2b00      	cmp	r3, #0
 81060a4:	d104      	bne.n	81060b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 81060a6:	687b      	ldr	r3, [r7, #4]
 81060a8:	681b      	ldr	r3, [r3, #0]
 81060aa:	4618      	mov	r0, r3
 81060ac:	f7ff f84e 	bl	810514c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 81060b0:	69bb      	ldr	r3, [r7, #24]
 81060b2:	2b01      	cmp	r3, #1
 81060b4:	d014      	beq.n	81060e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	681b      	ldr	r3, [r3, #0]
 81060ba:	4618      	mov	r0, r3
 81060bc:	f7ff f881 	bl	81051c2 <LL_ADC_INJ_IsConversionOngoing>
 81060c0:	4603      	mov	r3, r0
 81060c2:	2b00      	cmp	r3, #0
 81060c4:	d00c      	beq.n	81060e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	681b      	ldr	r3, [r3, #0]
 81060ca:	4618      	mov	r0, r3
 81060cc:	f7ff f817 	bl	81050fe <LL_ADC_IsDisableOngoing>
 81060d0:	4603      	mov	r3, r0
 81060d2:	2b00      	cmp	r3, #0
 81060d4:	d104      	bne.n	81060e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 81060d6:	687b      	ldr	r3, [r7, #4]
 81060d8:	681b      	ldr	r3, [r3, #0]
 81060da:	4618      	mov	r0, r3
 81060dc:	f7ff f85d 	bl	810519a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 81060e0:	69bb      	ldr	r3, [r7, #24]
 81060e2:	2b02      	cmp	r3, #2
 81060e4:	d005      	beq.n	81060f2 <ADC_ConversionStop+0x10e>
 81060e6:	69bb      	ldr	r3, [r7, #24]
 81060e8:	2b03      	cmp	r3, #3
 81060ea:	d105      	bne.n	81060f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 81060ec:	230c      	movs	r3, #12
 81060ee:	617b      	str	r3, [r7, #20]
        break;
 81060f0:	e005      	b.n	81060fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 81060f2:	2308      	movs	r3, #8
 81060f4:	617b      	str	r3, [r7, #20]
        break;
 81060f6:	e002      	b.n	81060fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 81060f8:	2304      	movs	r3, #4
 81060fa:	617b      	str	r3, [r7, #20]
        break;
 81060fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 81060fe:	f7fe fe07 	bl	8104d10 <HAL_GetTick>
 8106102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8106104:	e01b      	b.n	810613e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8106106:	f7fe fe03 	bl	8104d10 <HAL_GetTick>
 810610a:	4602      	mov	r2, r0
 810610c:	68bb      	ldr	r3, [r7, #8]
 810610e:	1ad3      	subs	r3, r2, r3
 8106110:	2b05      	cmp	r3, #5
 8106112:	d914      	bls.n	810613e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	681b      	ldr	r3, [r3, #0]
 8106118:	689a      	ldr	r2, [r3, #8]
 810611a:	697b      	ldr	r3, [r7, #20]
 810611c:	4013      	ands	r3, r2
 810611e:	2b00      	cmp	r3, #0
 8106120:	d00d      	beq.n	810613e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106126:	f043 0210 	orr.w	r2, r3, #16
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106132:	f043 0201 	orr.w	r2, r3, #1
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 810613a:	2301      	movs	r3, #1
 810613c:	e007      	b.n	810614e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	689a      	ldr	r2, [r3, #8]
 8106144:	697b      	ldr	r3, [r7, #20]
 8106146:	4013      	ands	r3, r2
 8106148:	2b00      	cmp	r3, #0
 810614a:	d1dc      	bne.n	8106106 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 810614c:	2300      	movs	r3, #0
}
 810614e:	4618      	mov	r0, r3
 8106150:	3720      	adds	r7, #32
 8106152:	46bd      	mov	sp, r7
 8106154:	bd80      	pop	{r7, pc}
 8106156:	bf00      	nop
 8106158:	000cdbff 	.word	0x000cdbff

0810615c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 810615c:	b580      	push	{r7, lr}
 810615e:	b084      	sub	sp, #16
 8106160:	af00      	add	r7, sp, #0
 8106162:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	4618      	mov	r0, r3
 810616a:	f7fe ffb5 	bl	81050d8 <LL_ADC_IsEnabled>
 810616e:	4603      	mov	r3, r0
 8106170:	2b00      	cmp	r3, #0
 8106172:	d16e      	bne.n	8106252 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	689a      	ldr	r2, [r3, #8]
 810617a:	4b38      	ldr	r3, [pc, #224]	@ (810625c <ADC_Enable+0x100>)
 810617c:	4013      	ands	r3, r2
 810617e:	2b00      	cmp	r3, #0
 8106180:	d00d      	beq.n	810619e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106186:	f043 0210 	orr.w	r2, r3, #16
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106192:	f043 0201 	orr.w	r2, r3, #1
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 810619a:	2301      	movs	r3, #1
 810619c:	e05a      	b.n	8106254 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	681b      	ldr	r3, [r3, #0]
 81061a2:	4618      	mov	r0, r3
 81061a4:	f7fe ff70 	bl	8105088 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 81061a8:	f7fe fdb2 	bl	8104d10 <HAL_GetTick>
 81061ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	4a2b      	ldr	r2, [pc, #172]	@ (8106260 <ADC_Enable+0x104>)
 81061b4:	4293      	cmp	r3, r2
 81061b6:	d004      	beq.n	81061c2 <ADC_Enable+0x66>
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	4a29      	ldr	r2, [pc, #164]	@ (8106264 <ADC_Enable+0x108>)
 81061be:	4293      	cmp	r3, r2
 81061c0:	d101      	bne.n	81061c6 <ADC_Enable+0x6a>
 81061c2:	4b29      	ldr	r3, [pc, #164]	@ (8106268 <ADC_Enable+0x10c>)
 81061c4:	e000      	b.n	81061c8 <ADC_Enable+0x6c>
 81061c6:	4b29      	ldr	r3, [pc, #164]	@ (810626c <ADC_Enable+0x110>)
 81061c8:	4618      	mov	r0, r3
 81061ca:	f7fe fef3 	bl	8104fb4 <LL_ADC_GetMultimode>
 81061ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	4a23      	ldr	r2, [pc, #140]	@ (8106264 <ADC_Enable+0x108>)
 81061d6:	4293      	cmp	r3, r2
 81061d8:	d002      	beq.n	81061e0 <ADC_Enable+0x84>
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	681b      	ldr	r3, [r3, #0]
 81061de:	e000      	b.n	81061e2 <ADC_Enable+0x86>
 81061e0:	4b1f      	ldr	r3, [pc, #124]	@ (8106260 <ADC_Enable+0x104>)
 81061e2:	687a      	ldr	r2, [r7, #4]
 81061e4:	6812      	ldr	r2, [r2, #0]
 81061e6:	4293      	cmp	r3, r2
 81061e8:	d02c      	beq.n	8106244 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81061ea:	68bb      	ldr	r3, [r7, #8]
 81061ec:	2b00      	cmp	r3, #0
 81061ee:	d130      	bne.n	8106252 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81061f0:	e028      	b.n	8106244 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	4618      	mov	r0, r3
 81061f8:	f7fe ff6e 	bl	81050d8 <LL_ADC_IsEnabled>
 81061fc:	4603      	mov	r3, r0
 81061fe:	2b00      	cmp	r3, #0
 8106200:	d104      	bne.n	810620c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8106202:	687b      	ldr	r3, [r7, #4]
 8106204:	681b      	ldr	r3, [r3, #0]
 8106206:	4618      	mov	r0, r3
 8106208:	f7fe ff3e 	bl	8105088 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 810620c:	f7fe fd80 	bl	8104d10 <HAL_GetTick>
 8106210:	4602      	mov	r2, r0
 8106212:	68fb      	ldr	r3, [r7, #12]
 8106214:	1ad3      	subs	r3, r2, r3
 8106216:	2b02      	cmp	r3, #2
 8106218:	d914      	bls.n	8106244 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	681b      	ldr	r3, [r3, #0]
 8106220:	f003 0301 	and.w	r3, r3, #1
 8106224:	2b01      	cmp	r3, #1
 8106226:	d00d      	beq.n	8106244 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810622c:	f043 0210 	orr.w	r2, r3, #16
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8106234:	687b      	ldr	r3, [r7, #4]
 8106236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106238:	f043 0201 	orr.w	r2, r3, #1
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8106240:	2301      	movs	r3, #1
 8106242:	e007      	b.n	8106254 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	681b      	ldr	r3, [r3, #0]
 8106248:	681b      	ldr	r3, [r3, #0]
 810624a:	f003 0301 	and.w	r3, r3, #1
 810624e:	2b01      	cmp	r3, #1
 8106250:	d1cf      	bne.n	81061f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8106252:	2300      	movs	r3, #0
}
 8106254:	4618      	mov	r0, r3
 8106256:	3710      	adds	r7, #16
 8106258:	46bd      	mov	sp, r7
 810625a:	bd80      	pop	{r7, pc}
 810625c:	8000003f 	.word	0x8000003f
 8106260:	40022000 	.word	0x40022000
 8106264:	40022100 	.word	0x40022100
 8106268:	40022300 	.word	0x40022300
 810626c:	58026300 	.word	0x58026300

08106270 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8106270:	b580      	push	{r7, lr}
 8106272:	b084      	sub	sp, #16
 8106274:	af00      	add	r7, sp, #0
 8106276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	681b      	ldr	r3, [r3, #0]
 810627c:	4618      	mov	r0, r3
 810627e:	f7fe ff3e 	bl	81050fe <LL_ADC_IsDisableOngoing>
 8106282:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	4618      	mov	r0, r3
 810628a:	f7fe ff25 	bl	81050d8 <LL_ADC_IsEnabled>
 810628e:	4603      	mov	r3, r0
 8106290:	2b00      	cmp	r3, #0
 8106292:	d047      	beq.n	8106324 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8106294:	68fb      	ldr	r3, [r7, #12]
 8106296:	2b00      	cmp	r3, #0
 8106298:	d144      	bne.n	8106324 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 810629a:	687b      	ldr	r3, [r7, #4]
 810629c:	681b      	ldr	r3, [r3, #0]
 810629e:	689b      	ldr	r3, [r3, #8]
 81062a0:	f003 030d 	and.w	r3, r3, #13
 81062a4:	2b01      	cmp	r3, #1
 81062a6:	d10c      	bne.n	81062c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 81062a8:	687b      	ldr	r3, [r7, #4]
 81062aa:	681b      	ldr	r3, [r3, #0]
 81062ac:	4618      	mov	r0, r3
 81062ae:	f7fe feff 	bl	81050b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 81062b2:	687b      	ldr	r3, [r7, #4]
 81062b4:	681b      	ldr	r3, [r3, #0]
 81062b6:	2203      	movs	r2, #3
 81062b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 81062ba:	f7fe fd29 	bl	8104d10 <HAL_GetTick>
 81062be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81062c0:	e029      	b.n	8106316 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81062c6:	f043 0210 	orr.w	r2, r3, #16
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81062d2:	f043 0201 	orr.w	r2, r3, #1
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 81062da:	2301      	movs	r3, #1
 81062dc:	e023      	b.n	8106326 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 81062de:	f7fe fd17 	bl	8104d10 <HAL_GetTick>
 81062e2:	4602      	mov	r2, r0
 81062e4:	68bb      	ldr	r3, [r7, #8]
 81062e6:	1ad3      	subs	r3, r2, r3
 81062e8:	2b02      	cmp	r3, #2
 81062ea:	d914      	bls.n	8106316 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81062ec:	687b      	ldr	r3, [r7, #4]
 81062ee:	681b      	ldr	r3, [r3, #0]
 81062f0:	689b      	ldr	r3, [r3, #8]
 81062f2:	f003 0301 	and.w	r3, r3, #1
 81062f6:	2b00      	cmp	r3, #0
 81062f8:	d00d      	beq.n	8106316 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81062fa:	687b      	ldr	r3, [r7, #4]
 81062fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81062fe:	f043 0210 	orr.w	r2, r3, #16
 8106302:	687b      	ldr	r3, [r7, #4]
 8106304:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810630a:	f043 0201 	orr.w	r2, r3, #1
 810630e:	687b      	ldr	r3, [r7, #4]
 8106310:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8106312:	2301      	movs	r3, #1
 8106314:	e007      	b.n	8106326 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8106316:	687b      	ldr	r3, [r7, #4]
 8106318:	681b      	ldr	r3, [r3, #0]
 810631a:	689b      	ldr	r3, [r3, #8]
 810631c:	f003 0301 	and.w	r3, r3, #1
 8106320:	2b00      	cmp	r3, #0
 8106322:	d1dc      	bne.n	81062de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8106324:	2300      	movs	r3, #0
}
 8106326:	4618      	mov	r0, r3
 8106328:	3710      	adds	r7, #16
 810632a:	46bd      	mov	sp, r7
 810632c:	bd80      	pop	{r7, pc}
	...

08106330 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8106330:	b580      	push	{r7, lr}
 8106332:	b084      	sub	sp, #16
 8106334:	af00      	add	r7, sp, #0
 8106336:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	4a7a      	ldr	r2, [pc, #488]	@ (8106528 <ADC_ConfigureBoostMode+0x1f8>)
 810633e:	4293      	cmp	r3, r2
 8106340:	d004      	beq.n	810634c <ADC_ConfigureBoostMode+0x1c>
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	681b      	ldr	r3, [r3, #0]
 8106346:	4a79      	ldr	r2, [pc, #484]	@ (810652c <ADC_ConfigureBoostMode+0x1fc>)
 8106348:	4293      	cmp	r3, r2
 810634a:	d109      	bne.n	8106360 <ADC_ConfigureBoostMode+0x30>
 810634c:	4b78      	ldr	r3, [pc, #480]	@ (8106530 <ADC_ConfigureBoostMode+0x200>)
 810634e:	689b      	ldr	r3, [r3, #8]
 8106350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106354:	2b00      	cmp	r3, #0
 8106356:	bf14      	ite	ne
 8106358:	2301      	movne	r3, #1
 810635a:	2300      	moveq	r3, #0
 810635c:	b2db      	uxtb	r3, r3
 810635e:	e008      	b.n	8106372 <ADC_ConfigureBoostMode+0x42>
 8106360:	4b74      	ldr	r3, [pc, #464]	@ (8106534 <ADC_ConfigureBoostMode+0x204>)
 8106362:	689b      	ldr	r3, [r3, #8]
 8106364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106368:	2b00      	cmp	r3, #0
 810636a:	bf14      	ite	ne
 810636c:	2301      	movne	r3, #1
 810636e:	2300      	moveq	r3, #0
 8106370:	b2db      	uxtb	r3, r3
 8106372:	2b00      	cmp	r3, #0
 8106374:	d01c      	beq.n	81063b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8106376:	f003 ff31 	bl	810a1dc <HAL_RCC_GetHCLKFreq>
 810637a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	685b      	ldr	r3, [r3, #4]
 8106380:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106384:	d010      	beq.n	81063a8 <ADC_ConfigureBoostMode+0x78>
 8106386:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810638a:	d873      	bhi.n	8106474 <ADC_ConfigureBoostMode+0x144>
 810638c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106390:	d002      	beq.n	8106398 <ADC_ConfigureBoostMode+0x68>
 8106392:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106396:	d16d      	bne.n	8106474 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	685b      	ldr	r3, [r3, #4]
 810639c:	0c1b      	lsrs	r3, r3, #16
 810639e:	68fa      	ldr	r2, [r7, #12]
 81063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 81063a4:	60fb      	str	r3, [r7, #12]
        break;
 81063a6:	e068      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81063a8:	68fb      	ldr	r3, [r7, #12]
 81063aa:	089b      	lsrs	r3, r3, #2
 81063ac:	60fb      	str	r3, [r7, #12]
        break;
 81063ae:	e064      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81063b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 81063b4:	f04f 0100 	mov.w	r1, #0
 81063b8:	f005 f978 	bl	810b6ac <HAL_RCCEx_GetPeriphCLKFreq>
 81063bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	685b      	ldr	r3, [r3, #4]
 81063c2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81063c6:	d051      	beq.n	810646c <ADC_ConfigureBoostMode+0x13c>
 81063c8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81063cc:	d854      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 81063ce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81063d2:	d047      	beq.n	8106464 <ADC_ConfigureBoostMode+0x134>
 81063d4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81063d8:	d84e      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 81063da:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81063de:	d03d      	beq.n	810645c <ADC_ConfigureBoostMode+0x12c>
 81063e0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81063e4:	d848      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 81063e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81063ea:	d033      	beq.n	8106454 <ADC_ConfigureBoostMode+0x124>
 81063ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81063f0:	d842      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 81063f2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81063f6:	d029      	beq.n	810644c <ADC_ConfigureBoostMode+0x11c>
 81063f8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81063fc:	d83c      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 81063fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8106402:	d01a      	beq.n	810643a <ADC_ConfigureBoostMode+0x10a>
 8106404:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8106408:	d836      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 810640a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 810640e:	d014      	beq.n	810643a <ADC_ConfigureBoostMode+0x10a>
 8106410:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8106414:	d830      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 8106416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810641a:	d00e      	beq.n	810643a <ADC_ConfigureBoostMode+0x10a>
 810641c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106420:	d82a      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 8106422:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8106426:	d008      	beq.n	810643a <ADC_ConfigureBoostMode+0x10a>
 8106428:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 810642c:	d824      	bhi.n	8106478 <ADC_ConfigureBoostMode+0x148>
 810642e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106432:	d002      	beq.n	810643a <ADC_ConfigureBoostMode+0x10a>
 8106434:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8106438:	d11e      	bne.n	8106478 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	685b      	ldr	r3, [r3, #4]
 810643e:	0c9b      	lsrs	r3, r3, #18
 8106440:	005b      	lsls	r3, r3, #1
 8106442:	68fa      	ldr	r2, [r7, #12]
 8106444:	fbb2 f3f3 	udiv	r3, r2, r3
 8106448:	60fb      	str	r3, [r7, #12]
        break;
 810644a:	e016      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 810644c:	68fb      	ldr	r3, [r7, #12]
 810644e:	091b      	lsrs	r3, r3, #4
 8106450:	60fb      	str	r3, [r7, #12]
        break;
 8106452:	e012      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8106454:	68fb      	ldr	r3, [r7, #12]
 8106456:	095b      	lsrs	r3, r3, #5
 8106458:	60fb      	str	r3, [r7, #12]
        break;
 810645a:	e00e      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 810645c:	68fb      	ldr	r3, [r7, #12]
 810645e:	099b      	lsrs	r3, r3, #6
 8106460:	60fb      	str	r3, [r7, #12]
        break;
 8106462:	e00a      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8106464:	68fb      	ldr	r3, [r7, #12]
 8106466:	09db      	lsrs	r3, r3, #7
 8106468:	60fb      	str	r3, [r7, #12]
        break;
 810646a:	e006      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 810646c:	68fb      	ldr	r3, [r7, #12]
 810646e:	0a1b      	lsrs	r3, r3, #8
 8106470:	60fb      	str	r3, [r7, #12]
        break;
 8106472:	e002      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
        break;
 8106474:	bf00      	nop
 8106476:	e000      	b.n	810647a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8106478:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810647a:	f7fe fc79 	bl	8104d70 <HAL_GetREVID>
 810647e:	4603      	mov	r3, r0
 8106480:	f241 0203 	movw	r2, #4099	@ 0x1003
 8106484:	4293      	cmp	r3, r2
 8106486:	d815      	bhi.n	81064b4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8106488:	68fb      	ldr	r3, [r7, #12]
 810648a:	4a2b      	ldr	r2, [pc, #172]	@ (8106538 <ADC_ConfigureBoostMode+0x208>)
 810648c:	4293      	cmp	r3, r2
 810648e:	d908      	bls.n	81064a2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	689a      	ldr	r2, [r3, #8]
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	681b      	ldr	r3, [r3, #0]
 810649a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810649e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81064a0:	e03e      	b.n	8106520 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	681b      	ldr	r3, [r3, #0]
 81064a6:	689a      	ldr	r2, [r3, #8]
 81064a8:	687b      	ldr	r3, [r7, #4]
 81064aa:	681b      	ldr	r3, [r3, #0]
 81064ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81064b0:	609a      	str	r2, [r3, #8]
}
 81064b2:	e035      	b.n	8106520 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81064b4:	68fb      	ldr	r3, [r7, #12]
 81064b6:	085b      	lsrs	r3, r3, #1
 81064b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81064ba:	68fb      	ldr	r3, [r7, #12]
 81064bc:	4a1f      	ldr	r2, [pc, #124]	@ (810653c <ADC_ConfigureBoostMode+0x20c>)
 81064be:	4293      	cmp	r3, r2
 81064c0:	d808      	bhi.n	81064d4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	681b      	ldr	r3, [r3, #0]
 81064c6:	689a      	ldr	r2, [r3, #8]
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81064d0:	609a      	str	r2, [r3, #8]
}
 81064d2:	e025      	b.n	8106520 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81064d4:	68fb      	ldr	r3, [r7, #12]
 81064d6:	4a1a      	ldr	r2, [pc, #104]	@ (8106540 <ADC_ConfigureBoostMode+0x210>)
 81064d8:	4293      	cmp	r3, r2
 81064da:	d80a      	bhi.n	81064f2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	689b      	ldr	r3, [r3, #8]
 81064e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81064ee:	609a      	str	r2, [r3, #8]
}
 81064f0:	e016      	b.n	8106520 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81064f2:	68fb      	ldr	r3, [r7, #12]
 81064f4:	4a13      	ldr	r2, [pc, #76]	@ (8106544 <ADC_ConfigureBoostMode+0x214>)
 81064f6:	4293      	cmp	r3, r2
 81064f8:	d80a      	bhi.n	8106510 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	689b      	ldr	r3, [r3, #8]
 8106500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8106504:	687b      	ldr	r3, [r7, #4]
 8106506:	681b      	ldr	r3, [r3, #0]
 8106508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810650c:	609a      	str	r2, [r3, #8]
}
 810650e:	e007      	b.n	8106520 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	681b      	ldr	r3, [r3, #0]
 8106514:	689a      	ldr	r2, [r3, #8]
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 810651e:	609a      	str	r2, [r3, #8]
}
 8106520:	bf00      	nop
 8106522:	3710      	adds	r7, #16
 8106524:	46bd      	mov	sp, r7
 8106526:	bd80      	pop	{r7, pc}
 8106528:	40022000 	.word	0x40022000
 810652c:	40022100 	.word	0x40022100
 8106530:	40022300 	.word	0x40022300
 8106534:	58026300 	.word	0x58026300
 8106538:	01312d00 	.word	0x01312d00
 810653c:	005f5e10 	.word	0x005f5e10
 8106540:	00bebc20 	.word	0x00bebc20
 8106544:	017d7840 	.word	0x017d7840

08106548 <LL_ADC_IsEnabled>:
{
 8106548:	b480      	push	{r7}
 810654a:	b083      	sub	sp, #12
 810654c:	af00      	add	r7, sp, #0
 810654e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	689b      	ldr	r3, [r3, #8]
 8106554:	f003 0301 	and.w	r3, r3, #1
 8106558:	2b01      	cmp	r3, #1
 810655a:	d101      	bne.n	8106560 <LL_ADC_IsEnabled+0x18>
 810655c:	2301      	movs	r3, #1
 810655e:	e000      	b.n	8106562 <LL_ADC_IsEnabled+0x1a>
 8106560:	2300      	movs	r3, #0
}
 8106562:	4618      	mov	r0, r3
 8106564:	370c      	adds	r7, #12
 8106566:	46bd      	mov	sp, r7
 8106568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810656c:	4770      	bx	lr

0810656e <LL_ADC_REG_IsConversionOngoing>:
{
 810656e:	b480      	push	{r7}
 8106570:	b083      	sub	sp, #12
 8106572:	af00      	add	r7, sp, #0
 8106574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	689b      	ldr	r3, [r3, #8]
 810657a:	f003 0304 	and.w	r3, r3, #4
 810657e:	2b04      	cmp	r3, #4
 8106580:	d101      	bne.n	8106586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8106582:	2301      	movs	r3, #1
 8106584:	e000      	b.n	8106588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8106586:	2300      	movs	r3, #0
}
 8106588:	4618      	mov	r0, r3
 810658a:	370c      	adds	r7, #12
 810658c:	46bd      	mov	sp, r7
 810658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106592:	4770      	bx	lr

08106594 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8106594:	b590      	push	{r4, r7, lr}
 8106596:	b09f      	sub	sp, #124	@ 0x7c
 8106598:	af00      	add	r7, sp, #0
 810659a:	6078      	str	r0, [r7, #4]
 810659c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810659e:	2300      	movs	r3, #0
 81065a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81065aa:	2b01      	cmp	r3, #1
 81065ac:	d101      	bne.n	81065b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81065ae:	2302      	movs	r3, #2
 81065b0:	e0c4      	b.n	810673c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	2201      	movs	r2, #1
 81065b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81065ba:	2300      	movs	r3, #0
 81065bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81065be:	2300      	movs	r3, #0
 81065c0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81065c2:	687b      	ldr	r3, [r7, #4]
 81065c4:	681b      	ldr	r3, [r3, #0]
 81065c6:	4a5f      	ldr	r2, [pc, #380]	@ (8106744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81065c8:	4293      	cmp	r3, r2
 81065ca:	d102      	bne.n	81065d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81065cc:	4b5e      	ldr	r3, [pc, #376]	@ (8106748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81065ce:	60bb      	str	r3, [r7, #8]
 81065d0:	e001      	b.n	81065d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81065d2:	2300      	movs	r3, #0
 81065d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81065d6:	68bb      	ldr	r3, [r7, #8]
 81065d8:	2b00      	cmp	r3, #0
 81065da:	d10b      	bne.n	81065f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81065dc:	687b      	ldr	r3, [r7, #4]
 81065de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81065e0:	f043 0220 	orr.w	r2, r3, #32
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	2200      	movs	r2, #0
 81065ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 81065f0:	2301      	movs	r3, #1
 81065f2:	e0a3      	b.n	810673c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81065f4:	68bb      	ldr	r3, [r7, #8]
 81065f6:	4618      	mov	r0, r3
 81065f8:	f7ff ffb9 	bl	810656e <LL_ADC_REG_IsConversionOngoing>
 81065fc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	681b      	ldr	r3, [r3, #0]
 8106602:	4618      	mov	r0, r3
 8106604:	f7ff ffb3 	bl	810656e <LL_ADC_REG_IsConversionOngoing>
 8106608:	4603      	mov	r3, r0
 810660a:	2b00      	cmp	r3, #0
 810660c:	f040 8085 	bne.w	810671a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8106610:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8106612:	2b00      	cmp	r3, #0
 8106614:	f040 8081 	bne.w	810671a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	681b      	ldr	r3, [r3, #0]
 810661c:	4a49      	ldr	r2, [pc, #292]	@ (8106744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810661e:	4293      	cmp	r3, r2
 8106620:	d004      	beq.n	810662c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	681b      	ldr	r3, [r3, #0]
 8106626:	4a48      	ldr	r2, [pc, #288]	@ (8106748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8106628:	4293      	cmp	r3, r2
 810662a:	d101      	bne.n	8106630 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 810662c:	4b47      	ldr	r3, [pc, #284]	@ (810674c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810662e:	e000      	b.n	8106632 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8106630:	4b47      	ldr	r3, [pc, #284]	@ (8106750 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8106632:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8106634:	683b      	ldr	r3, [r7, #0]
 8106636:	681b      	ldr	r3, [r3, #0]
 8106638:	2b00      	cmp	r3, #0
 810663a:	d03b      	beq.n	81066b4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 810663c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810663e:	689b      	ldr	r3, [r3, #8]
 8106640:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8106644:	683b      	ldr	r3, [r7, #0]
 8106646:	685b      	ldr	r3, [r3, #4]
 8106648:	431a      	orrs	r2, r3
 810664a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810664c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	681b      	ldr	r3, [r3, #0]
 8106652:	4a3c      	ldr	r2, [pc, #240]	@ (8106744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8106654:	4293      	cmp	r3, r2
 8106656:	d004      	beq.n	8106662 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	681b      	ldr	r3, [r3, #0]
 810665c:	4a3a      	ldr	r2, [pc, #232]	@ (8106748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810665e:	4293      	cmp	r3, r2
 8106660:	d10e      	bne.n	8106680 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8106662:	4838      	ldr	r0, [pc, #224]	@ (8106744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8106664:	f7ff ff70 	bl	8106548 <LL_ADC_IsEnabled>
 8106668:	4604      	mov	r4, r0
 810666a:	4837      	ldr	r0, [pc, #220]	@ (8106748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810666c:	f7ff ff6c 	bl	8106548 <LL_ADC_IsEnabled>
 8106670:	4603      	mov	r3, r0
 8106672:	4323      	orrs	r3, r4
 8106674:	2b00      	cmp	r3, #0
 8106676:	bf0c      	ite	eq
 8106678:	2301      	moveq	r3, #1
 810667a:	2300      	movne	r3, #0
 810667c:	b2db      	uxtb	r3, r3
 810667e:	e008      	b.n	8106692 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8106680:	4834      	ldr	r0, [pc, #208]	@ (8106754 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8106682:	f7ff ff61 	bl	8106548 <LL_ADC_IsEnabled>
 8106686:	4603      	mov	r3, r0
 8106688:	2b00      	cmp	r3, #0
 810668a:	bf0c      	ite	eq
 810668c:	2301      	moveq	r3, #1
 810668e:	2300      	movne	r3, #0
 8106690:	b2db      	uxtb	r3, r3
 8106692:	2b00      	cmp	r3, #0
 8106694:	d04b      	beq.n	810672e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8106696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8106698:	689b      	ldr	r3, [r3, #8]
 810669a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 810669e:	f023 030f 	bic.w	r3, r3, #15
 81066a2:	683a      	ldr	r2, [r7, #0]
 81066a4:	6811      	ldr	r1, [r2, #0]
 81066a6:	683a      	ldr	r2, [r7, #0]
 81066a8:	6892      	ldr	r2, [r2, #8]
 81066aa:	430a      	orrs	r2, r1
 81066ac:	431a      	orrs	r2, r3
 81066ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81066b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81066b2:	e03c      	b.n	810672e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81066b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81066b6:	689b      	ldr	r3, [r3, #8]
 81066b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81066bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81066be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	4a1f      	ldr	r2, [pc, #124]	@ (8106744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81066c6:	4293      	cmp	r3, r2
 81066c8:	d004      	beq.n	81066d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81066ca:	687b      	ldr	r3, [r7, #4]
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	4a1e      	ldr	r2, [pc, #120]	@ (8106748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81066d0:	4293      	cmp	r3, r2
 81066d2:	d10e      	bne.n	81066f2 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81066d4:	481b      	ldr	r0, [pc, #108]	@ (8106744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81066d6:	f7ff ff37 	bl	8106548 <LL_ADC_IsEnabled>
 81066da:	4604      	mov	r4, r0
 81066dc:	481a      	ldr	r0, [pc, #104]	@ (8106748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81066de:	f7ff ff33 	bl	8106548 <LL_ADC_IsEnabled>
 81066e2:	4603      	mov	r3, r0
 81066e4:	4323      	orrs	r3, r4
 81066e6:	2b00      	cmp	r3, #0
 81066e8:	bf0c      	ite	eq
 81066ea:	2301      	moveq	r3, #1
 81066ec:	2300      	movne	r3, #0
 81066ee:	b2db      	uxtb	r3, r3
 81066f0:	e008      	b.n	8106704 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81066f2:	4818      	ldr	r0, [pc, #96]	@ (8106754 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81066f4:	f7ff ff28 	bl	8106548 <LL_ADC_IsEnabled>
 81066f8:	4603      	mov	r3, r0
 81066fa:	2b00      	cmp	r3, #0
 81066fc:	bf0c      	ite	eq
 81066fe:	2301      	moveq	r3, #1
 8106700:	2300      	movne	r3, #0
 8106702:	b2db      	uxtb	r3, r3
 8106704:	2b00      	cmp	r3, #0
 8106706:	d012      	beq.n	810672e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8106708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810670a:	689b      	ldr	r3, [r3, #8]
 810670c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8106710:	f023 030f 	bic.w	r3, r3, #15
 8106714:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8106716:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8106718:	e009      	b.n	810672e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810671e:	f043 0220 	orr.w	r2, r3, #32
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8106726:	2301      	movs	r3, #1
 8106728:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 810672c:	e000      	b.n	8106730 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810672e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	2200      	movs	r2, #0
 8106734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8106738:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 810673c:	4618      	mov	r0, r3
 810673e:	377c      	adds	r7, #124	@ 0x7c
 8106740:	46bd      	mov	sp, r7
 8106742:	bd90      	pop	{r4, r7, pc}
 8106744:	40022000 	.word	0x40022000
 8106748:	40022100 	.word	0x40022100
 810674c:	40022300 	.word	0x40022300
 8106750:	58026300 	.word	0x58026300
 8106754:	58026000 	.word	0x58026000

08106758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8106758:	b480      	push	{r7}
 810675a:	b085      	sub	sp, #20
 810675c:	af00      	add	r7, sp, #0
 810675e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	f003 0307 	and.w	r3, r3, #7
 8106766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8106768:	4b0c      	ldr	r3, [pc, #48]	@ (810679c <__NVIC_SetPriorityGrouping+0x44>)
 810676a:	68db      	ldr	r3, [r3, #12]
 810676c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810676e:	68ba      	ldr	r2, [r7, #8]
 8106770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8106774:	4013      	ands	r3, r2
 8106776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8106778:	68fb      	ldr	r3, [r7, #12]
 810677a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810677c:	68bb      	ldr	r3, [r7, #8]
 810677e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8106780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8106784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810678a:	4a04      	ldr	r2, [pc, #16]	@ (810679c <__NVIC_SetPriorityGrouping+0x44>)
 810678c:	68bb      	ldr	r3, [r7, #8]
 810678e:	60d3      	str	r3, [r2, #12]
}
 8106790:	bf00      	nop
 8106792:	3714      	adds	r7, #20
 8106794:	46bd      	mov	sp, r7
 8106796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810679a:	4770      	bx	lr
 810679c:	e000ed00 	.word	0xe000ed00

081067a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81067a0:	b480      	push	{r7}
 81067a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81067a4:	4b04      	ldr	r3, [pc, #16]	@ (81067b8 <__NVIC_GetPriorityGrouping+0x18>)
 81067a6:	68db      	ldr	r3, [r3, #12]
 81067a8:	0a1b      	lsrs	r3, r3, #8
 81067aa:	f003 0307 	and.w	r3, r3, #7
}
 81067ae:	4618      	mov	r0, r3
 81067b0:	46bd      	mov	sp, r7
 81067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b6:	4770      	bx	lr
 81067b8:	e000ed00 	.word	0xe000ed00

081067bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81067bc:	b480      	push	{r7}
 81067be:	b083      	sub	sp, #12
 81067c0:	af00      	add	r7, sp, #0
 81067c2:	4603      	mov	r3, r0
 81067c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81067c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81067ca:	2b00      	cmp	r3, #0
 81067cc:	db0b      	blt.n	81067e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81067ce:	88fb      	ldrh	r3, [r7, #6]
 81067d0:	f003 021f 	and.w	r2, r3, #31
 81067d4:	4907      	ldr	r1, [pc, #28]	@ (81067f4 <__NVIC_EnableIRQ+0x38>)
 81067d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81067da:	095b      	lsrs	r3, r3, #5
 81067dc:	2001      	movs	r0, #1
 81067de:	fa00 f202 	lsl.w	r2, r0, r2
 81067e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81067e6:	bf00      	nop
 81067e8:	370c      	adds	r7, #12
 81067ea:	46bd      	mov	sp, r7
 81067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067f0:	4770      	bx	lr
 81067f2:	bf00      	nop
 81067f4:	e000e100 	.word	0xe000e100

081067f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81067f8:	b480      	push	{r7}
 81067fa:	b083      	sub	sp, #12
 81067fc:	af00      	add	r7, sp, #0
 81067fe:	4603      	mov	r3, r0
 8106800:	6039      	str	r1, [r7, #0]
 8106802:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8106804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8106808:	2b00      	cmp	r3, #0
 810680a:	db0a      	blt.n	8106822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810680c:	683b      	ldr	r3, [r7, #0]
 810680e:	b2da      	uxtb	r2, r3
 8106810:	490c      	ldr	r1, [pc, #48]	@ (8106844 <__NVIC_SetPriority+0x4c>)
 8106812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8106816:	0112      	lsls	r2, r2, #4
 8106818:	b2d2      	uxtb	r2, r2
 810681a:	440b      	add	r3, r1
 810681c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8106820:	e00a      	b.n	8106838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8106822:	683b      	ldr	r3, [r7, #0]
 8106824:	b2da      	uxtb	r2, r3
 8106826:	4908      	ldr	r1, [pc, #32]	@ (8106848 <__NVIC_SetPriority+0x50>)
 8106828:	88fb      	ldrh	r3, [r7, #6]
 810682a:	f003 030f 	and.w	r3, r3, #15
 810682e:	3b04      	subs	r3, #4
 8106830:	0112      	lsls	r2, r2, #4
 8106832:	b2d2      	uxtb	r2, r2
 8106834:	440b      	add	r3, r1
 8106836:	761a      	strb	r2, [r3, #24]
}
 8106838:	bf00      	nop
 810683a:	370c      	adds	r7, #12
 810683c:	46bd      	mov	sp, r7
 810683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106842:	4770      	bx	lr
 8106844:	e000e100 	.word	0xe000e100
 8106848:	e000ed00 	.word	0xe000ed00

0810684c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810684c:	b480      	push	{r7}
 810684e:	b089      	sub	sp, #36	@ 0x24
 8106850:	af00      	add	r7, sp, #0
 8106852:	60f8      	str	r0, [r7, #12]
 8106854:	60b9      	str	r1, [r7, #8]
 8106856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8106858:	68fb      	ldr	r3, [r7, #12]
 810685a:	f003 0307 	and.w	r3, r3, #7
 810685e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8106860:	69fb      	ldr	r3, [r7, #28]
 8106862:	f1c3 0307 	rsb	r3, r3, #7
 8106866:	2b04      	cmp	r3, #4
 8106868:	bf28      	it	cs
 810686a:	2304      	movcs	r3, #4
 810686c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810686e:	69fb      	ldr	r3, [r7, #28]
 8106870:	3304      	adds	r3, #4
 8106872:	2b06      	cmp	r3, #6
 8106874:	d902      	bls.n	810687c <NVIC_EncodePriority+0x30>
 8106876:	69fb      	ldr	r3, [r7, #28]
 8106878:	3b03      	subs	r3, #3
 810687a:	e000      	b.n	810687e <NVIC_EncodePriority+0x32>
 810687c:	2300      	movs	r3, #0
 810687e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8106880:	f04f 32ff 	mov.w	r2, #4294967295
 8106884:	69bb      	ldr	r3, [r7, #24]
 8106886:	fa02 f303 	lsl.w	r3, r2, r3
 810688a:	43da      	mvns	r2, r3
 810688c:	68bb      	ldr	r3, [r7, #8]
 810688e:	401a      	ands	r2, r3
 8106890:	697b      	ldr	r3, [r7, #20]
 8106892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8106894:	f04f 31ff 	mov.w	r1, #4294967295
 8106898:	697b      	ldr	r3, [r7, #20]
 810689a:	fa01 f303 	lsl.w	r3, r1, r3
 810689e:	43d9      	mvns	r1, r3
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81068a4:	4313      	orrs	r3, r2
         );
}
 81068a6:	4618      	mov	r0, r3
 81068a8:	3724      	adds	r7, #36	@ 0x24
 81068aa:	46bd      	mov	sp, r7
 81068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068b0:	4770      	bx	lr
	...

081068b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81068b4:	b580      	push	{r7, lr}
 81068b6:	b082      	sub	sp, #8
 81068b8:	af00      	add	r7, sp, #0
 81068ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	3b01      	subs	r3, #1
 81068c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81068c4:	d301      	bcc.n	81068ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81068c6:	2301      	movs	r3, #1
 81068c8:	e00f      	b.n	81068ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81068ca:	4a0a      	ldr	r2, [pc, #40]	@ (81068f4 <SysTick_Config+0x40>)
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	3b01      	subs	r3, #1
 81068d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81068d2:	210f      	movs	r1, #15
 81068d4:	f04f 30ff 	mov.w	r0, #4294967295
 81068d8:	f7ff ff8e 	bl	81067f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81068dc:	4b05      	ldr	r3, [pc, #20]	@ (81068f4 <SysTick_Config+0x40>)
 81068de:	2200      	movs	r2, #0
 81068e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81068e2:	4b04      	ldr	r3, [pc, #16]	@ (81068f4 <SysTick_Config+0x40>)
 81068e4:	2207      	movs	r2, #7
 81068e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81068e8:	2300      	movs	r3, #0
}
 81068ea:	4618      	mov	r0, r3
 81068ec:	3708      	adds	r7, #8
 81068ee:	46bd      	mov	sp, r7
 81068f0:	bd80      	pop	{r7, pc}
 81068f2:	bf00      	nop
 81068f4:	e000e010 	.word	0xe000e010

081068f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81068f8:	b580      	push	{r7, lr}
 81068fa:	b082      	sub	sp, #8
 81068fc:	af00      	add	r7, sp, #0
 81068fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8106900:	6878      	ldr	r0, [r7, #4]
 8106902:	f7ff ff29 	bl	8106758 <__NVIC_SetPriorityGrouping>
}
 8106906:	bf00      	nop
 8106908:	3708      	adds	r7, #8
 810690a:	46bd      	mov	sp, r7
 810690c:	bd80      	pop	{r7, pc}

0810690e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810690e:	b580      	push	{r7, lr}
 8106910:	b086      	sub	sp, #24
 8106912:	af00      	add	r7, sp, #0
 8106914:	4603      	mov	r3, r0
 8106916:	60b9      	str	r1, [r7, #8]
 8106918:	607a      	str	r2, [r7, #4]
 810691a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810691c:	f7ff ff40 	bl	81067a0 <__NVIC_GetPriorityGrouping>
 8106920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8106922:	687a      	ldr	r2, [r7, #4]
 8106924:	68b9      	ldr	r1, [r7, #8]
 8106926:	6978      	ldr	r0, [r7, #20]
 8106928:	f7ff ff90 	bl	810684c <NVIC_EncodePriority>
 810692c:	4602      	mov	r2, r0
 810692e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8106932:	4611      	mov	r1, r2
 8106934:	4618      	mov	r0, r3
 8106936:	f7ff ff5f 	bl	81067f8 <__NVIC_SetPriority>
}
 810693a:	bf00      	nop
 810693c:	3718      	adds	r7, #24
 810693e:	46bd      	mov	sp, r7
 8106940:	bd80      	pop	{r7, pc}

08106942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8106942:	b580      	push	{r7, lr}
 8106944:	b082      	sub	sp, #8
 8106946:	af00      	add	r7, sp, #0
 8106948:	4603      	mov	r3, r0
 810694a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810694c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8106950:	4618      	mov	r0, r3
 8106952:	f7ff ff33 	bl	81067bc <__NVIC_EnableIRQ>
}
 8106956:	bf00      	nop
 8106958:	3708      	adds	r7, #8
 810695a:	46bd      	mov	sp, r7
 810695c:	bd80      	pop	{r7, pc}

0810695e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810695e:	b580      	push	{r7, lr}
 8106960:	b082      	sub	sp, #8
 8106962:	af00      	add	r7, sp, #0
 8106964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8106966:	6878      	ldr	r0, [r7, #4]
 8106968:	f7ff ffa4 	bl	81068b4 <SysTick_Config>
 810696c:	4603      	mov	r3, r0
}
 810696e:	4618      	mov	r0, r3
 8106970:	3708      	adds	r7, #8
 8106972:	46bd      	mov	sp, r7
 8106974:	bd80      	pop	{r7, pc}
	...

08106978 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8106978:	b480      	push	{r7}
 810697a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810697c:	4b07      	ldr	r3, [pc, #28]	@ (810699c <HAL_GetCurrentCPUID+0x24>)
 810697e:	681b      	ldr	r3, [r3, #0]
 8106980:	091b      	lsrs	r3, r3, #4
 8106982:	f003 030f 	and.w	r3, r3, #15
 8106986:	2b07      	cmp	r3, #7
 8106988:	d101      	bne.n	810698e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810698a:	2303      	movs	r3, #3
 810698c:	e000      	b.n	8106990 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810698e:	2301      	movs	r3, #1
  }
}
 8106990:	4618      	mov	r0, r3
 8106992:	46bd      	mov	sp, r7
 8106994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106998:	4770      	bx	lr
 810699a:	bf00      	nop
 810699c:	e000ed00 	.word	0xe000ed00

081069a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81069a0:	b580      	push	{r7, lr}
 81069a2:	b086      	sub	sp, #24
 81069a4:	af00      	add	r7, sp, #0
 81069a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81069a8:	f7fe f9b2 	bl	8104d10 <HAL_GetTick>
 81069ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	2b00      	cmp	r3, #0
 81069b2:	d101      	bne.n	81069b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81069b4:	2301      	movs	r3, #1
 81069b6:	e314      	b.n	8106fe2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	681b      	ldr	r3, [r3, #0]
 81069bc:	4a66      	ldr	r2, [pc, #408]	@ (8106b58 <HAL_DMA_Init+0x1b8>)
 81069be:	4293      	cmp	r3, r2
 81069c0:	d04a      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	681b      	ldr	r3, [r3, #0]
 81069c6:	4a65      	ldr	r2, [pc, #404]	@ (8106b5c <HAL_DMA_Init+0x1bc>)
 81069c8:	4293      	cmp	r3, r2
 81069ca:	d045      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	4a63      	ldr	r2, [pc, #396]	@ (8106b60 <HAL_DMA_Init+0x1c0>)
 81069d2:	4293      	cmp	r3, r2
 81069d4:	d040      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 81069d6:	687b      	ldr	r3, [r7, #4]
 81069d8:	681b      	ldr	r3, [r3, #0]
 81069da:	4a62      	ldr	r2, [pc, #392]	@ (8106b64 <HAL_DMA_Init+0x1c4>)
 81069dc:	4293      	cmp	r3, r2
 81069de:	d03b      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	681b      	ldr	r3, [r3, #0]
 81069e4:	4a60      	ldr	r2, [pc, #384]	@ (8106b68 <HAL_DMA_Init+0x1c8>)
 81069e6:	4293      	cmp	r3, r2
 81069e8:	d036      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 81069ea:	687b      	ldr	r3, [r7, #4]
 81069ec:	681b      	ldr	r3, [r3, #0]
 81069ee:	4a5f      	ldr	r2, [pc, #380]	@ (8106b6c <HAL_DMA_Init+0x1cc>)
 81069f0:	4293      	cmp	r3, r2
 81069f2:	d031      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	4a5d      	ldr	r2, [pc, #372]	@ (8106b70 <HAL_DMA_Init+0x1d0>)
 81069fa:	4293      	cmp	r3, r2
 81069fc:	d02c      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	681b      	ldr	r3, [r3, #0]
 8106a02:	4a5c      	ldr	r2, [pc, #368]	@ (8106b74 <HAL_DMA_Init+0x1d4>)
 8106a04:	4293      	cmp	r3, r2
 8106a06:	d027      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8106b78 <HAL_DMA_Init+0x1d8>)
 8106a0e:	4293      	cmp	r3, r2
 8106a10:	d022      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	4a59      	ldr	r2, [pc, #356]	@ (8106b7c <HAL_DMA_Init+0x1dc>)
 8106a18:	4293      	cmp	r3, r2
 8106a1a:	d01d      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	681b      	ldr	r3, [r3, #0]
 8106a20:	4a57      	ldr	r2, [pc, #348]	@ (8106b80 <HAL_DMA_Init+0x1e0>)
 8106a22:	4293      	cmp	r3, r2
 8106a24:	d018      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	4a56      	ldr	r2, [pc, #344]	@ (8106b84 <HAL_DMA_Init+0x1e4>)
 8106a2c:	4293      	cmp	r3, r2
 8106a2e:	d013      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	4a54      	ldr	r2, [pc, #336]	@ (8106b88 <HAL_DMA_Init+0x1e8>)
 8106a36:	4293      	cmp	r3, r2
 8106a38:	d00e      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	4a53      	ldr	r2, [pc, #332]	@ (8106b8c <HAL_DMA_Init+0x1ec>)
 8106a40:	4293      	cmp	r3, r2
 8106a42:	d009      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 8106a44:	687b      	ldr	r3, [r7, #4]
 8106a46:	681b      	ldr	r3, [r3, #0]
 8106a48:	4a51      	ldr	r2, [pc, #324]	@ (8106b90 <HAL_DMA_Init+0x1f0>)
 8106a4a:	4293      	cmp	r3, r2
 8106a4c:	d004      	beq.n	8106a58 <HAL_DMA_Init+0xb8>
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	4a50      	ldr	r2, [pc, #320]	@ (8106b94 <HAL_DMA_Init+0x1f4>)
 8106a54:	4293      	cmp	r3, r2
 8106a56:	d101      	bne.n	8106a5c <HAL_DMA_Init+0xbc>
 8106a58:	2301      	movs	r3, #1
 8106a5a:	e000      	b.n	8106a5e <HAL_DMA_Init+0xbe>
 8106a5c:	2300      	movs	r3, #0
 8106a5e:	2b00      	cmp	r3, #0
 8106a60:	f000 813b 	beq.w	8106cda <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	2202      	movs	r2, #2
 8106a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	2200      	movs	r2, #0
 8106a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8106a74:	687b      	ldr	r3, [r7, #4]
 8106a76:	681b      	ldr	r3, [r3, #0]
 8106a78:	4a37      	ldr	r2, [pc, #220]	@ (8106b58 <HAL_DMA_Init+0x1b8>)
 8106a7a:	4293      	cmp	r3, r2
 8106a7c:	d04a      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106a7e:	687b      	ldr	r3, [r7, #4]
 8106a80:	681b      	ldr	r3, [r3, #0]
 8106a82:	4a36      	ldr	r2, [pc, #216]	@ (8106b5c <HAL_DMA_Init+0x1bc>)
 8106a84:	4293      	cmp	r3, r2
 8106a86:	d045      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	681b      	ldr	r3, [r3, #0]
 8106a8c:	4a34      	ldr	r2, [pc, #208]	@ (8106b60 <HAL_DMA_Init+0x1c0>)
 8106a8e:	4293      	cmp	r3, r2
 8106a90:	d040      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106a92:	687b      	ldr	r3, [r7, #4]
 8106a94:	681b      	ldr	r3, [r3, #0]
 8106a96:	4a33      	ldr	r2, [pc, #204]	@ (8106b64 <HAL_DMA_Init+0x1c4>)
 8106a98:	4293      	cmp	r3, r2
 8106a9a:	d03b      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	681b      	ldr	r3, [r3, #0]
 8106aa0:	4a31      	ldr	r2, [pc, #196]	@ (8106b68 <HAL_DMA_Init+0x1c8>)
 8106aa2:	4293      	cmp	r3, r2
 8106aa4:	d036      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106aa6:	687b      	ldr	r3, [r7, #4]
 8106aa8:	681b      	ldr	r3, [r3, #0]
 8106aaa:	4a30      	ldr	r2, [pc, #192]	@ (8106b6c <HAL_DMA_Init+0x1cc>)
 8106aac:	4293      	cmp	r3, r2
 8106aae:	d031      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106ab0:	687b      	ldr	r3, [r7, #4]
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8106b70 <HAL_DMA_Init+0x1d0>)
 8106ab6:	4293      	cmp	r3, r2
 8106ab8:	d02c      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	4a2d      	ldr	r2, [pc, #180]	@ (8106b74 <HAL_DMA_Init+0x1d4>)
 8106ac0:	4293      	cmp	r3, r2
 8106ac2:	d027      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	681b      	ldr	r3, [r3, #0]
 8106ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8106b78 <HAL_DMA_Init+0x1d8>)
 8106aca:	4293      	cmp	r3, r2
 8106acc:	d022      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106ace:	687b      	ldr	r3, [r7, #4]
 8106ad0:	681b      	ldr	r3, [r3, #0]
 8106ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8106b7c <HAL_DMA_Init+0x1dc>)
 8106ad4:	4293      	cmp	r3, r2
 8106ad6:	d01d      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	681b      	ldr	r3, [r3, #0]
 8106adc:	4a28      	ldr	r2, [pc, #160]	@ (8106b80 <HAL_DMA_Init+0x1e0>)
 8106ade:	4293      	cmp	r3, r2
 8106ae0:	d018      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106ae2:	687b      	ldr	r3, [r7, #4]
 8106ae4:	681b      	ldr	r3, [r3, #0]
 8106ae6:	4a27      	ldr	r2, [pc, #156]	@ (8106b84 <HAL_DMA_Init+0x1e4>)
 8106ae8:	4293      	cmp	r3, r2
 8106aea:	d013      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	681b      	ldr	r3, [r3, #0]
 8106af0:	4a25      	ldr	r2, [pc, #148]	@ (8106b88 <HAL_DMA_Init+0x1e8>)
 8106af2:	4293      	cmp	r3, r2
 8106af4:	d00e      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106af6:	687b      	ldr	r3, [r7, #4]
 8106af8:	681b      	ldr	r3, [r3, #0]
 8106afa:	4a24      	ldr	r2, [pc, #144]	@ (8106b8c <HAL_DMA_Init+0x1ec>)
 8106afc:	4293      	cmp	r3, r2
 8106afe:	d009      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106b00:	687b      	ldr	r3, [r7, #4]
 8106b02:	681b      	ldr	r3, [r3, #0]
 8106b04:	4a22      	ldr	r2, [pc, #136]	@ (8106b90 <HAL_DMA_Init+0x1f0>)
 8106b06:	4293      	cmp	r3, r2
 8106b08:	d004      	beq.n	8106b14 <HAL_DMA_Init+0x174>
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	681b      	ldr	r3, [r3, #0]
 8106b0e:	4a21      	ldr	r2, [pc, #132]	@ (8106b94 <HAL_DMA_Init+0x1f4>)
 8106b10:	4293      	cmp	r3, r2
 8106b12:	d108      	bne.n	8106b26 <HAL_DMA_Init+0x186>
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	681b      	ldr	r3, [r3, #0]
 8106b18:	681a      	ldr	r2, [r3, #0]
 8106b1a:	687b      	ldr	r3, [r7, #4]
 8106b1c:	681b      	ldr	r3, [r3, #0]
 8106b1e:	f022 0201 	bic.w	r2, r2, #1
 8106b22:	601a      	str	r2, [r3, #0]
 8106b24:	e007      	b.n	8106b36 <HAL_DMA_Init+0x196>
 8106b26:	687b      	ldr	r3, [r7, #4]
 8106b28:	681b      	ldr	r3, [r3, #0]
 8106b2a:	681a      	ldr	r2, [r3, #0]
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	681b      	ldr	r3, [r3, #0]
 8106b30:	f022 0201 	bic.w	r2, r2, #1
 8106b34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8106b36:	e02f      	b.n	8106b98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8106b38:	f7fe f8ea 	bl	8104d10 <HAL_GetTick>
 8106b3c:	4602      	mov	r2, r0
 8106b3e:	693b      	ldr	r3, [r7, #16]
 8106b40:	1ad3      	subs	r3, r2, r3
 8106b42:	2b05      	cmp	r3, #5
 8106b44:	d928      	bls.n	8106b98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	2220      	movs	r2, #32
 8106b4a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8106b4c:	687b      	ldr	r3, [r7, #4]
 8106b4e:	2203      	movs	r2, #3
 8106b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8106b54:	2301      	movs	r3, #1
 8106b56:	e244      	b.n	8106fe2 <HAL_DMA_Init+0x642>
 8106b58:	40020010 	.word	0x40020010
 8106b5c:	40020028 	.word	0x40020028
 8106b60:	40020040 	.word	0x40020040
 8106b64:	40020058 	.word	0x40020058
 8106b68:	40020070 	.word	0x40020070
 8106b6c:	40020088 	.word	0x40020088
 8106b70:	400200a0 	.word	0x400200a0
 8106b74:	400200b8 	.word	0x400200b8
 8106b78:	40020410 	.word	0x40020410
 8106b7c:	40020428 	.word	0x40020428
 8106b80:	40020440 	.word	0x40020440
 8106b84:	40020458 	.word	0x40020458
 8106b88:	40020470 	.word	0x40020470
 8106b8c:	40020488 	.word	0x40020488
 8106b90:	400204a0 	.word	0x400204a0
 8106b94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	681b      	ldr	r3, [r3, #0]
 8106b9c:	681b      	ldr	r3, [r3, #0]
 8106b9e:	f003 0301 	and.w	r3, r3, #1
 8106ba2:	2b00      	cmp	r3, #0
 8106ba4:	d1c8      	bne.n	8106b38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8106ba6:	687b      	ldr	r3, [r7, #4]
 8106ba8:	681b      	ldr	r3, [r3, #0]
 8106baa:	681b      	ldr	r3, [r3, #0]
 8106bac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8106bae:	697a      	ldr	r2, [r7, #20]
 8106bb0:	4b84      	ldr	r3, [pc, #528]	@ (8106dc4 <HAL_DMA_Init+0x424>)
 8106bb2:	4013      	ands	r3, r2
 8106bb4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8106bb6:	687b      	ldr	r3, [r7, #4]
 8106bb8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8106bbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	691b      	ldr	r3, [r3, #16]
 8106bc4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8106bca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	699b      	ldr	r3, [r3, #24]
 8106bd0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8106bd6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8106bd8:	687b      	ldr	r3, [r7, #4]
 8106bda:	6a1b      	ldr	r3, [r3, #32]
 8106bdc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8106bde:	697a      	ldr	r2, [r7, #20]
 8106be0:	4313      	orrs	r3, r2
 8106be2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106be8:	2b04      	cmp	r3, #4
 8106bea:	d107      	bne.n	8106bfc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8106bec:	687b      	ldr	r3, [r7, #4]
 8106bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106bf0:	687b      	ldr	r3, [r7, #4]
 8106bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106bf4:	4313      	orrs	r3, r2
 8106bf6:	697a      	ldr	r2, [r7, #20]
 8106bf8:	4313      	orrs	r3, r2
 8106bfa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8106bfc:	4b72      	ldr	r3, [pc, #456]	@ (8106dc8 <HAL_DMA_Init+0x428>)
 8106bfe:	681b      	ldr	r3, [r3, #0]
 8106c00:	0c1b      	lsrs	r3, r3, #16
 8106c02:	041b      	lsls	r3, r3, #16
 8106c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c08:	d328      	bcc.n	8106c5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	685b      	ldr	r3, [r3, #4]
 8106c0e:	2b28      	cmp	r3, #40	@ 0x28
 8106c10:	d903      	bls.n	8106c1a <HAL_DMA_Init+0x27a>
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	685b      	ldr	r3, [r3, #4]
 8106c16:	2b2e      	cmp	r3, #46	@ 0x2e
 8106c18:	d917      	bls.n	8106c4a <HAL_DMA_Init+0x2aa>
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	685b      	ldr	r3, [r3, #4]
 8106c1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8106c20:	d903      	bls.n	8106c2a <HAL_DMA_Init+0x28a>
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	685b      	ldr	r3, [r3, #4]
 8106c26:	2b42      	cmp	r3, #66	@ 0x42
 8106c28:	d90f      	bls.n	8106c4a <HAL_DMA_Init+0x2aa>
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	685b      	ldr	r3, [r3, #4]
 8106c2e:	2b46      	cmp	r3, #70	@ 0x46
 8106c30:	d903      	bls.n	8106c3a <HAL_DMA_Init+0x29a>
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	685b      	ldr	r3, [r3, #4]
 8106c36:	2b48      	cmp	r3, #72	@ 0x48
 8106c38:	d907      	bls.n	8106c4a <HAL_DMA_Init+0x2aa>
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	685b      	ldr	r3, [r3, #4]
 8106c3e:	2b4e      	cmp	r3, #78	@ 0x4e
 8106c40:	d905      	bls.n	8106c4e <HAL_DMA_Init+0x2ae>
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	685b      	ldr	r3, [r3, #4]
 8106c46:	2b52      	cmp	r3, #82	@ 0x52
 8106c48:	d801      	bhi.n	8106c4e <HAL_DMA_Init+0x2ae>
 8106c4a:	2301      	movs	r3, #1
 8106c4c:	e000      	b.n	8106c50 <HAL_DMA_Init+0x2b0>
 8106c4e:	2300      	movs	r3, #0
 8106c50:	2b00      	cmp	r3, #0
 8106c52:	d003      	beq.n	8106c5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8106c54:	697b      	ldr	r3, [r7, #20]
 8106c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106c5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	681b      	ldr	r3, [r3, #0]
 8106c60:	697a      	ldr	r2, [r7, #20]
 8106c62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8106c64:	687b      	ldr	r3, [r7, #4]
 8106c66:	681b      	ldr	r3, [r3, #0]
 8106c68:	695b      	ldr	r3, [r3, #20]
 8106c6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8106c6c:	697b      	ldr	r3, [r7, #20]
 8106c6e:	f023 0307 	bic.w	r3, r3, #7
 8106c72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106c78:	697a      	ldr	r2, [r7, #20]
 8106c7a:	4313      	orrs	r3, r2
 8106c7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106c82:	2b04      	cmp	r3, #4
 8106c84:	d117      	bne.n	8106cb6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106c8a:	697a      	ldr	r2, [r7, #20]
 8106c8c:	4313      	orrs	r3, r2
 8106c8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106c94:	2b00      	cmp	r3, #0
 8106c96:	d00e      	beq.n	8106cb6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8106c98:	6878      	ldr	r0, [r7, #4]
 8106c9a:	f001 ff1b 	bl	8108ad4 <DMA_CheckFifoParam>
 8106c9e:	4603      	mov	r3, r0
 8106ca0:	2b00      	cmp	r3, #0
 8106ca2:	d008      	beq.n	8106cb6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	2240      	movs	r2, #64	@ 0x40
 8106ca8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	2201      	movs	r2, #1
 8106cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8106cb2:	2301      	movs	r3, #1
 8106cb4:	e195      	b.n	8106fe2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	681b      	ldr	r3, [r3, #0]
 8106cba:	697a      	ldr	r2, [r7, #20]
 8106cbc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8106cbe:	6878      	ldr	r0, [r7, #4]
 8106cc0:	f001 fe56 	bl	8108970 <DMA_CalcBaseAndBitshift>
 8106cc4:	4603      	mov	r3, r0
 8106cc6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8106cc8:	687b      	ldr	r3, [r7, #4]
 8106cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106ccc:	f003 031f 	and.w	r3, r3, #31
 8106cd0:	223f      	movs	r2, #63	@ 0x3f
 8106cd2:	409a      	lsls	r2, r3
 8106cd4:	68bb      	ldr	r3, [r7, #8]
 8106cd6:	609a      	str	r2, [r3, #8]
 8106cd8:	e0cb      	b.n	8106e72 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	681b      	ldr	r3, [r3, #0]
 8106cde:	4a3b      	ldr	r2, [pc, #236]	@ (8106dcc <HAL_DMA_Init+0x42c>)
 8106ce0:	4293      	cmp	r3, r2
 8106ce2:	d022      	beq.n	8106d2a <HAL_DMA_Init+0x38a>
 8106ce4:	687b      	ldr	r3, [r7, #4]
 8106ce6:	681b      	ldr	r3, [r3, #0]
 8106ce8:	4a39      	ldr	r2, [pc, #228]	@ (8106dd0 <HAL_DMA_Init+0x430>)
 8106cea:	4293      	cmp	r3, r2
 8106cec:	d01d      	beq.n	8106d2a <HAL_DMA_Init+0x38a>
 8106cee:	687b      	ldr	r3, [r7, #4]
 8106cf0:	681b      	ldr	r3, [r3, #0]
 8106cf2:	4a38      	ldr	r2, [pc, #224]	@ (8106dd4 <HAL_DMA_Init+0x434>)
 8106cf4:	4293      	cmp	r3, r2
 8106cf6:	d018      	beq.n	8106d2a <HAL_DMA_Init+0x38a>
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	681b      	ldr	r3, [r3, #0]
 8106cfc:	4a36      	ldr	r2, [pc, #216]	@ (8106dd8 <HAL_DMA_Init+0x438>)
 8106cfe:	4293      	cmp	r3, r2
 8106d00:	d013      	beq.n	8106d2a <HAL_DMA_Init+0x38a>
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	4a35      	ldr	r2, [pc, #212]	@ (8106ddc <HAL_DMA_Init+0x43c>)
 8106d08:	4293      	cmp	r3, r2
 8106d0a:	d00e      	beq.n	8106d2a <HAL_DMA_Init+0x38a>
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	681b      	ldr	r3, [r3, #0]
 8106d10:	4a33      	ldr	r2, [pc, #204]	@ (8106de0 <HAL_DMA_Init+0x440>)
 8106d12:	4293      	cmp	r3, r2
 8106d14:	d009      	beq.n	8106d2a <HAL_DMA_Init+0x38a>
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	681b      	ldr	r3, [r3, #0]
 8106d1a:	4a32      	ldr	r2, [pc, #200]	@ (8106de4 <HAL_DMA_Init+0x444>)
 8106d1c:	4293      	cmp	r3, r2
 8106d1e:	d004      	beq.n	8106d2a <HAL_DMA_Init+0x38a>
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	681b      	ldr	r3, [r3, #0]
 8106d24:	4a30      	ldr	r2, [pc, #192]	@ (8106de8 <HAL_DMA_Init+0x448>)
 8106d26:	4293      	cmp	r3, r2
 8106d28:	d101      	bne.n	8106d2e <HAL_DMA_Init+0x38e>
 8106d2a:	2301      	movs	r3, #1
 8106d2c:	e000      	b.n	8106d30 <HAL_DMA_Init+0x390>
 8106d2e:	2300      	movs	r3, #0
 8106d30:	2b00      	cmp	r3, #0
 8106d32:	f000 8095 	beq.w	8106e60 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	681b      	ldr	r3, [r3, #0]
 8106d3a:	4a24      	ldr	r2, [pc, #144]	@ (8106dcc <HAL_DMA_Init+0x42c>)
 8106d3c:	4293      	cmp	r3, r2
 8106d3e:	d021      	beq.n	8106d84 <HAL_DMA_Init+0x3e4>
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	681b      	ldr	r3, [r3, #0]
 8106d44:	4a22      	ldr	r2, [pc, #136]	@ (8106dd0 <HAL_DMA_Init+0x430>)
 8106d46:	4293      	cmp	r3, r2
 8106d48:	d01c      	beq.n	8106d84 <HAL_DMA_Init+0x3e4>
 8106d4a:	687b      	ldr	r3, [r7, #4]
 8106d4c:	681b      	ldr	r3, [r3, #0]
 8106d4e:	4a21      	ldr	r2, [pc, #132]	@ (8106dd4 <HAL_DMA_Init+0x434>)
 8106d50:	4293      	cmp	r3, r2
 8106d52:	d017      	beq.n	8106d84 <HAL_DMA_Init+0x3e4>
 8106d54:	687b      	ldr	r3, [r7, #4]
 8106d56:	681b      	ldr	r3, [r3, #0]
 8106d58:	4a1f      	ldr	r2, [pc, #124]	@ (8106dd8 <HAL_DMA_Init+0x438>)
 8106d5a:	4293      	cmp	r3, r2
 8106d5c:	d012      	beq.n	8106d84 <HAL_DMA_Init+0x3e4>
 8106d5e:	687b      	ldr	r3, [r7, #4]
 8106d60:	681b      	ldr	r3, [r3, #0]
 8106d62:	4a1e      	ldr	r2, [pc, #120]	@ (8106ddc <HAL_DMA_Init+0x43c>)
 8106d64:	4293      	cmp	r3, r2
 8106d66:	d00d      	beq.n	8106d84 <HAL_DMA_Init+0x3e4>
 8106d68:	687b      	ldr	r3, [r7, #4]
 8106d6a:	681b      	ldr	r3, [r3, #0]
 8106d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8106de0 <HAL_DMA_Init+0x440>)
 8106d6e:	4293      	cmp	r3, r2
 8106d70:	d008      	beq.n	8106d84 <HAL_DMA_Init+0x3e4>
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	681b      	ldr	r3, [r3, #0]
 8106d76:	4a1b      	ldr	r2, [pc, #108]	@ (8106de4 <HAL_DMA_Init+0x444>)
 8106d78:	4293      	cmp	r3, r2
 8106d7a:	d003      	beq.n	8106d84 <HAL_DMA_Init+0x3e4>
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	681b      	ldr	r3, [r3, #0]
 8106d80:	4a19      	ldr	r2, [pc, #100]	@ (8106de8 <HAL_DMA_Init+0x448>)
 8106d82:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	2202      	movs	r2, #2
 8106d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	2200      	movs	r2, #0
 8106d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	681b      	ldr	r3, [r3, #0]
 8106d9a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8106d9c:	697b      	ldr	r3, [r7, #20]
 8106d9e:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8106da2:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8106da6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	689b      	ldr	r3, [r3, #8]
 8106dac:	2b40      	cmp	r3, #64	@ 0x40
 8106dae:	d01d      	beq.n	8106dec <HAL_DMA_Init+0x44c>
 8106db0:	687b      	ldr	r3, [r7, #4]
 8106db2:	689b      	ldr	r3, [r3, #8]
 8106db4:	2b80      	cmp	r3, #128	@ 0x80
 8106db6:	d102      	bne.n	8106dbe <HAL_DMA_Init+0x41e>
 8106db8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8106dbc:	e017      	b.n	8106dee <HAL_DMA_Init+0x44e>
 8106dbe:	2300      	movs	r3, #0
 8106dc0:	e015      	b.n	8106dee <HAL_DMA_Init+0x44e>
 8106dc2:	bf00      	nop
 8106dc4:	fe10803f 	.word	0xfe10803f
 8106dc8:	5c001000 	.word	0x5c001000
 8106dcc:	58025408 	.word	0x58025408
 8106dd0:	5802541c 	.word	0x5802541c
 8106dd4:	58025430 	.word	0x58025430
 8106dd8:	58025444 	.word	0x58025444
 8106ddc:	58025458 	.word	0x58025458
 8106de0:	5802546c 	.word	0x5802546c
 8106de4:	58025480 	.word	0x58025480
 8106de8:	58025494 	.word	0x58025494
 8106dec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8106dee:	687a      	ldr	r2, [r7, #4]
 8106df0:	68d2      	ldr	r2, [r2, #12]
 8106df2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8106df4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8106df6:	687b      	ldr	r3, [r7, #4]
 8106df8:	691b      	ldr	r3, [r3, #16]
 8106dfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8106dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	695b      	ldr	r3, [r3, #20]
 8106e02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8106e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	699b      	ldr	r3, [r3, #24]
 8106e0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8106e0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	69db      	ldr	r3, [r3, #28]
 8106e12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8106e14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8106e16:	687b      	ldr	r3, [r7, #4]
 8106e18:	6a1b      	ldr	r3, [r3, #32]
 8106e1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8106e1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8106e1e:	697a      	ldr	r2, [r7, #20]
 8106e20:	4313      	orrs	r3, r2
 8106e22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8106e24:	687b      	ldr	r3, [r7, #4]
 8106e26:	681b      	ldr	r3, [r3, #0]
 8106e28:	697a      	ldr	r2, [r7, #20]
 8106e2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	461a      	mov	r2, r3
 8106e32:	4b6e      	ldr	r3, [pc, #440]	@ (8106fec <HAL_DMA_Init+0x64c>)
 8106e34:	4413      	add	r3, r2
 8106e36:	4a6e      	ldr	r2, [pc, #440]	@ (8106ff0 <HAL_DMA_Init+0x650>)
 8106e38:	fba2 2303 	umull	r2, r3, r2, r3
 8106e3c:	091b      	lsrs	r3, r3, #4
 8106e3e:	009a      	lsls	r2, r3, #2
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8106e44:	6878      	ldr	r0, [r7, #4]
 8106e46:	f001 fd93 	bl	8108970 <DMA_CalcBaseAndBitshift>
 8106e4a:	4603      	mov	r3, r0
 8106e4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8106e4e:	687b      	ldr	r3, [r7, #4]
 8106e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106e52:	f003 031f 	and.w	r3, r3, #31
 8106e56:	2201      	movs	r2, #1
 8106e58:	409a      	lsls	r2, r3
 8106e5a:	68fb      	ldr	r3, [r7, #12]
 8106e5c:	605a      	str	r2, [r3, #4]
 8106e5e:	e008      	b.n	8106e72 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8106e60:	687b      	ldr	r3, [r7, #4]
 8106e62:	2240      	movs	r2, #64	@ 0x40
 8106e64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8106e66:	687b      	ldr	r3, [r7, #4]
 8106e68:	2203      	movs	r2, #3
 8106e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8106e6e:	2301      	movs	r3, #1
 8106e70:	e0b7      	b.n	8106fe2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	681b      	ldr	r3, [r3, #0]
 8106e76:	4a5f      	ldr	r2, [pc, #380]	@ (8106ff4 <HAL_DMA_Init+0x654>)
 8106e78:	4293      	cmp	r3, r2
 8106e7a:	d072      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106e7c:	687b      	ldr	r3, [r7, #4]
 8106e7e:	681b      	ldr	r3, [r3, #0]
 8106e80:	4a5d      	ldr	r2, [pc, #372]	@ (8106ff8 <HAL_DMA_Init+0x658>)
 8106e82:	4293      	cmp	r3, r2
 8106e84:	d06d      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106e86:	687b      	ldr	r3, [r7, #4]
 8106e88:	681b      	ldr	r3, [r3, #0]
 8106e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8106ffc <HAL_DMA_Init+0x65c>)
 8106e8c:	4293      	cmp	r3, r2
 8106e8e:	d068      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	681b      	ldr	r3, [r3, #0]
 8106e94:	4a5a      	ldr	r2, [pc, #360]	@ (8107000 <HAL_DMA_Init+0x660>)
 8106e96:	4293      	cmp	r3, r2
 8106e98:	d063      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	681b      	ldr	r3, [r3, #0]
 8106e9e:	4a59      	ldr	r2, [pc, #356]	@ (8107004 <HAL_DMA_Init+0x664>)
 8106ea0:	4293      	cmp	r3, r2
 8106ea2:	d05e      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106ea4:	687b      	ldr	r3, [r7, #4]
 8106ea6:	681b      	ldr	r3, [r3, #0]
 8106ea8:	4a57      	ldr	r2, [pc, #348]	@ (8107008 <HAL_DMA_Init+0x668>)
 8106eaa:	4293      	cmp	r3, r2
 8106eac:	d059      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106eae:	687b      	ldr	r3, [r7, #4]
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	4a56      	ldr	r2, [pc, #344]	@ (810700c <HAL_DMA_Init+0x66c>)
 8106eb4:	4293      	cmp	r3, r2
 8106eb6:	d054      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	4a54      	ldr	r2, [pc, #336]	@ (8107010 <HAL_DMA_Init+0x670>)
 8106ebe:	4293      	cmp	r3, r2
 8106ec0:	d04f      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106ec2:	687b      	ldr	r3, [r7, #4]
 8106ec4:	681b      	ldr	r3, [r3, #0]
 8106ec6:	4a53      	ldr	r2, [pc, #332]	@ (8107014 <HAL_DMA_Init+0x674>)
 8106ec8:	4293      	cmp	r3, r2
 8106eca:	d04a      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	681b      	ldr	r3, [r3, #0]
 8106ed0:	4a51      	ldr	r2, [pc, #324]	@ (8107018 <HAL_DMA_Init+0x678>)
 8106ed2:	4293      	cmp	r3, r2
 8106ed4:	d045      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106ed6:	687b      	ldr	r3, [r7, #4]
 8106ed8:	681b      	ldr	r3, [r3, #0]
 8106eda:	4a50      	ldr	r2, [pc, #320]	@ (810701c <HAL_DMA_Init+0x67c>)
 8106edc:	4293      	cmp	r3, r2
 8106ede:	d040      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106ee0:	687b      	ldr	r3, [r7, #4]
 8106ee2:	681b      	ldr	r3, [r3, #0]
 8106ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8107020 <HAL_DMA_Init+0x680>)
 8106ee6:	4293      	cmp	r3, r2
 8106ee8:	d03b      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	681b      	ldr	r3, [r3, #0]
 8106eee:	4a4d      	ldr	r2, [pc, #308]	@ (8107024 <HAL_DMA_Init+0x684>)
 8106ef0:	4293      	cmp	r3, r2
 8106ef2:	d036      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8107028 <HAL_DMA_Init+0x688>)
 8106efa:	4293      	cmp	r3, r2
 8106efc:	d031      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	681b      	ldr	r3, [r3, #0]
 8106f02:	4a4a      	ldr	r2, [pc, #296]	@ (810702c <HAL_DMA_Init+0x68c>)
 8106f04:	4293      	cmp	r3, r2
 8106f06:	d02c      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	681b      	ldr	r3, [r3, #0]
 8106f0c:	4a48      	ldr	r2, [pc, #288]	@ (8107030 <HAL_DMA_Init+0x690>)
 8106f0e:	4293      	cmp	r3, r2
 8106f10:	d027      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f12:	687b      	ldr	r3, [r7, #4]
 8106f14:	681b      	ldr	r3, [r3, #0]
 8106f16:	4a47      	ldr	r2, [pc, #284]	@ (8107034 <HAL_DMA_Init+0x694>)
 8106f18:	4293      	cmp	r3, r2
 8106f1a:	d022      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	681b      	ldr	r3, [r3, #0]
 8106f20:	4a45      	ldr	r2, [pc, #276]	@ (8107038 <HAL_DMA_Init+0x698>)
 8106f22:	4293      	cmp	r3, r2
 8106f24:	d01d      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	4a44      	ldr	r2, [pc, #272]	@ (810703c <HAL_DMA_Init+0x69c>)
 8106f2c:	4293      	cmp	r3, r2
 8106f2e:	d018      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	4a42      	ldr	r2, [pc, #264]	@ (8107040 <HAL_DMA_Init+0x6a0>)
 8106f36:	4293      	cmp	r3, r2
 8106f38:	d013      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	681b      	ldr	r3, [r3, #0]
 8106f3e:	4a41      	ldr	r2, [pc, #260]	@ (8107044 <HAL_DMA_Init+0x6a4>)
 8106f40:	4293      	cmp	r3, r2
 8106f42:	d00e      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	681b      	ldr	r3, [r3, #0]
 8106f48:	4a3f      	ldr	r2, [pc, #252]	@ (8107048 <HAL_DMA_Init+0x6a8>)
 8106f4a:	4293      	cmp	r3, r2
 8106f4c:	d009      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f4e:	687b      	ldr	r3, [r7, #4]
 8106f50:	681b      	ldr	r3, [r3, #0]
 8106f52:	4a3e      	ldr	r2, [pc, #248]	@ (810704c <HAL_DMA_Init+0x6ac>)
 8106f54:	4293      	cmp	r3, r2
 8106f56:	d004      	beq.n	8106f62 <HAL_DMA_Init+0x5c2>
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8107050 <HAL_DMA_Init+0x6b0>)
 8106f5e:	4293      	cmp	r3, r2
 8106f60:	d101      	bne.n	8106f66 <HAL_DMA_Init+0x5c6>
 8106f62:	2301      	movs	r3, #1
 8106f64:	e000      	b.n	8106f68 <HAL_DMA_Init+0x5c8>
 8106f66:	2300      	movs	r3, #0
 8106f68:	2b00      	cmp	r3, #0
 8106f6a:	d032      	beq.n	8106fd2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8106f6c:	6878      	ldr	r0, [r7, #4]
 8106f6e:	f001 fe2d 	bl	8108bcc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8106f72:	687b      	ldr	r3, [r7, #4]
 8106f74:	689b      	ldr	r3, [r3, #8]
 8106f76:	2b80      	cmp	r3, #128	@ 0x80
 8106f78:	d102      	bne.n	8106f80 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	2200      	movs	r2, #0
 8106f7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	685a      	ldr	r2, [r3, #4]
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106f88:	b2d2      	uxtb	r2, r2
 8106f8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106f90:	687a      	ldr	r2, [r7, #4]
 8106f92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106f94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	685b      	ldr	r3, [r3, #4]
 8106f9a:	2b00      	cmp	r3, #0
 8106f9c:	d010      	beq.n	8106fc0 <HAL_DMA_Init+0x620>
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	685b      	ldr	r3, [r3, #4]
 8106fa2:	2b08      	cmp	r3, #8
 8106fa4:	d80c      	bhi.n	8106fc0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8106fa6:	6878      	ldr	r0, [r7, #4]
 8106fa8:	f001 feaa 	bl	8108d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106fb0:	2200      	movs	r2, #0
 8106fb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106fb8:	687a      	ldr	r2, [r7, #4]
 8106fba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8106fbc:	605a      	str	r2, [r3, #4]
 8106fbe:	e008      	b.n	8106fd2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	2200      	movs	r2, #0
 8106fc4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8106fc6:	687b      	ldr	r3, [r7, #4]
 8106fc8:	2200      	movs	r2, #0
 8106fca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	2200      	movs	r2, #0
 8106fd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	2200      	movs	r2, #0
 8106fd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	2201      	movs	r2, #1
 8106fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8106fe0:	2300      	movs	r3, #0
}
 8106fe2:	4618      	mov	r0, r3
 8106fe4:	3718      	adds	r7, #24
 8106fe6:	46bd      	mov	sp, r7
 8106fe8:	bd80      	pop	{r7, pc}
 8106fea:	bf00      	nop
 8106fec:	a7fdabf8 	.word	0xa7fdabf8
 8106ff0:	cccccccd 	.word	0xcccccccd
 8106ff4:	40020010 	.word	0x40020010
 8106ff8:	40020028 	.word	0x40020028
 8106ffc:	40020040 	.word	0x40020040
 8107000:	40020058 	.word	0x40020058
 8107004:	40020070 	.word	0x40020070
 8107008:	40020088 	.word	0x40020088
 810700c:	400200a0 	.word	0x400200a0
 8107010:	400200b8 	.word	0x400200b8
 8107014:	40020410 	.word	0x40020410
 8107018:	40020428 	.word	0x40020428
 810701c:	40020440 	.word	0x40020440
 8107020:	40020458 	.word	0x40020458
 8107024:	40020470 	.word	0x40020470
 8107028:	40020488 	.word	0x40020488
 810702c:	400204a0 	.word	0x400204a0
 8107030:	400204b8 	.word	0x400204b8
 8107034:	58025408 	.word	0x58025408
 8107038:	5802541c 	.word	0x5802541c
 810703c:	58025430 	.word	0x58025430
 8107040:	58025444 	.word	0x58025444
 8107044:	58025458 	.word	0x58025458
 8107048:	5802546c 	.word	0x5802546c
 810704c:	58025480 	.word	0x58025480
 8107050:	58025494 	.word	0x58025494

08107054 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8107054:	b580      	push	{r7, lr}
 8107056:	b086      	sub	sp, #24
 8107058:	af00      	add	r7, sp, #0
 810705a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 810705c:	f7fd fe58 	bl	8104d10 <HAL_GetTick>
 8107060:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8107062:	687b      	ldr	r3, [r7, #4]
 8107064:	2b00      	cmp	r3, #0
 8107066:	d101      	bne.n	810706c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8107068:	2301      	movs	r3, #1
 810706a:	e2dc      	b.n	8107626 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8107072:	b2db      	uxtb	r3, r3
 8107074:	2b02      	cmp	r3, #2
 8107076:	d008      	beq.n	810708a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	2280      	movs	r2, #128	@ 0x80
 810707c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	2200      	movs	r2, #0
 8107082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8107086:	2301      	movs	r3, #1
 8107088:	e2cd      	b.n	8107626 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810708a:	687b      	ldr	r3, [r7, #4]
 810708c:	681b      	ldr	r3, [r3, #0]
 810708e:	4a76      	ldr	r2, [pc, #472]	@ (8107268 <HAL_DMA_Abort+0x214>)
 8107090:	4293      	cmp	r3, r2
 8107092:	d04a      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	681b      	ldr	r3, [r3, #0]
 8107098:	4a74      	ldr	r2, [pc, #464]	@ (810726c <HAL_DMA_Abort+0x218>)
 810709a:	4293      	cmp	r3, r2
 810709c:	d045      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 810709e:	687b      	ldr	r3, [r7, #4]
 81070a0:	681b      	ldr	r3, [r3, #0]
 81070a2:	4a73      	ldr	r2, [pc, #460]	@ (8107270 <HAL_DMA_Abort+0x21c>)
 81070a4:	4293      	cmp	r3, r2
 81070a6:	d040      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	681b      	ldr	r3, [r3, #0]
 81070ac:	4a71      	ldr	r2, [pc, #452]	@ (8107274 <HAL_DMA_Abort+0x220>)
 81070ae:	4293      	cmp	r3, r2
 81070b0:	d03b      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	681b      	ldr	r3, [r3, #0]
 81070b6:	4a70      	ldr	r2, [pc, #448]	@ (8107278 <HAL_DMA_Abort+0x224>)
 81070b8:	4293      	cmp	r3, r2
 81070ba:	d036      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	681b      	ldr	r3, [r3, #0]
 81070c0:	4a6e      	ldr	r2, [pc, #440]	@ (810727c <HAL_DMA_Abort+0x228>)
 81070c2:	4293      	cmp	r3, r2
 81070c4:	d031      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070c6:	687b      	ldr	r3, [r7, #4]
 81070c8:	681b      	ldr	r3, [r3, #0]
 81070ca:	4a6d      	ldr	r2, [pc, #436]	@ (8107280 <HAL_DMA_Abort+0x22c>)
 81070cc:	4293      	cmp	r3, r2
 81070ce:	d02c      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	681b      	ldr	r3, [r3, #0]
 81070d4:	4a6b      	ldr	r2, [pc, #428]	@ (8107284 <HAL_DMA_Abort+0x230>)
 81070d6:	4293      	cmp	r3, r2
 81070d8:	d027      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	681b      	ldr	r3, [r3, #0]
 81070de:	4a6a      	ldr	r2, [pc, #424]	@ (8107288 <HAL_DMA_Abort+0x234>)
 81070e0:	4293      	cmp	r3, r2
 81070e2:	d022      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070e4:	687b      	ldr	r3, [r7, #4]
 81070e6:	681b      	ldr	r3, [r3, #0]
 81070e8:	4a68      	ldr	r2, [pc, #416]	@ (810728c <HAL_DMA_Abort+0x238>)
 81070ea:	4293      	cmp	r3, r2
 81070ec:	d01d      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	681b      	ldr	r3, [r3, #0]
 81070f2:	4a67      	ldr	r2, [pc, #412]	@ (8107290 <HAL_DMA_Abort+0x23c>)
 81070f4:	4293      	cmp	r3, r2
 81070f6:	d018      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	681b      	ldr	r3, [r3, #0]
 81070fc:	4a65      	ldr	r2, [pc, #404]	@ (8107294 <HAL_DMA_Abort+0x240>)
 81070fe:	4293      	cmp	r3, r2
 8107100:	d013      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	4a64      	ldr	r2, [pc, #400]	@ (8107298 <HAL_DMA_Abort+0x244>)
 8107108:	4293      	cmp	r3, r2
 810710a:	d00e      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	4a62      	ldr	r2, [pc, #392]	@ (810729c <HAL_DMA_Abort+0x248>)
 8107112:	4293      	cmp	r3, r2
 8107114:	d009      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	681b      	ldr	r3, [r3, #0]
 810711a:	4a61      	ldr	r2, [pc, #388]	@ (81072a0 <HAL_DMA_Abort+0x24c>)
 810711c:	4293      	cmp	r3, r2
 810711e:	d004      	beq.n	810712a <HAL_DMA_Abort+0xd6>
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	681b      	ldr	r3, [r3, #0]
 8107124:	4a5f      	ldr	r2, [pc, #380]	@ (81072a4 <HAL_DMA_Abort+0x250>)
 8107126:	4293      	cmp	r3, r2
 8107128:	d101      	bne.n	810712e <HAL_DMA_Abort+0xda>
 810712a:	2301      	movs	r3, #1
 810712c:	e000      	b.n	8107130 <HAL_DMA_Abort+0xdc>
 810712e:	2300      	movs	r3, #0
 8107130:	2b00      	cmp	r3, #0
 8107132:	d013      	beq.n	810715c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8107134:	687b      	ldr	r3, [r7, #4]
 8107136:	681b      	ldr	r3, [r3, #0]
 8107138:	681a      	ldr	r2, [r3, #0]
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	681b      	ldr	r3, [r3, #0]
 810713e:	f022 021e 	bic.w	r2, r2, #30
 8107142:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	681b      	ldr	r3, [r3, #0]
 8107148:	695a      	ldr	r2, [r3, #20]
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	681b      	ldr	r3, [r3, #0]
 810714e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8107152:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	617b      	str	r3, [r7, #20]
 810715a:	e00a      	b.n	8107172 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810715c:	687b      	ldr	r3, [r7, #4]
 810715e:	681b      	ldr	r3, [r3, #0]
 8107160:	681a      	ldr	r2, [r3, #0]
 8107162:	687b      	ldr	r3, [r7, #4]
 8107164:	681b      	ldr	r3, [r3, #0]
 8107166:	f022 020e 	bic.w	r2, r2, #14
 810716a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 810716c:	687b      	ldr	r3, [r7, #4]
 810716e:	681b      	ldr	r3, [r3, #0]
 8107170:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8107172:	687b      	ldr	r3, [r7, #4]
 8107174:	681b      	ldr	r3, [r3, #0]
 8107176:	4a3c      	ldr	r2, [pc, #240]	@ (8107268 <HAL_DMA_Abort+0x214>)
 8107178:	4293      	cmp	r3, r2
 810717a:	d072      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	4a3a      	ldr	r2, [pc, #232]	@ (810726c <HAL_DMA_Abort+0x218>)
 8107182:	4293      	cmp	r3, r2
 8107184:	d06d      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	4a39      	ldr	r2, [pc, #228]	@ (8107270 <HAL_DMA_Abort+0x21c>)
 810718c:	4293      	cmp	r3, r2
 810718e:	d068      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 8107190:	687b      	ldr	r3, [r7, #4]
 8107192:	681b      	ldr	r3, [r3, #0]
 8107194:	4a37      	ldr	r2, [pc, #220]	@ (8107274 <HAL_DMA_Abort+0x220>)
 8107196:	4293      	cmp	r3, r2
 8107198:	d063      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	681b      	ldr	r3, [r3, #0]
 810719e:	4a36      	ldr	r2, [pc, #216]	@ (8107278 <HAL_DMA_Abort+0x224>)
 81071a0:	4293      	cmp	r3, r2
 81071a2:	d05e      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071a4:	687b      	ldr	r3, [r7, #4]
 81071a6:	681b      	ldr	r3, [r3, #0]
 81071a8:	4a34      	ldr	r2, [pc, #208]	@ (810727c <HAL_DMA_Abort+0x228>)
 81071aa:	4293      	cmp	r3, r2
 81071ac:	d059      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071ae:	687b      	ldr	r3, [r7, #4]
 81071b0:	681b      	ldr	r3, [r3, #0]
 81071b2:	4a33      	ldr	r2, [pc, #204]	@ (8107280 <HAL_DMA_Abort+0x22c>)
 81071b4:	4293      	cmp	r3, r2
 81071b6:	d054      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071b8:	687b      	ldr	r3, [r7, #4]
 81071ba:	681b      	ldr	r3, [r3, #0]
 81071bc:	4a31      	ldr	r2, [pc, #196]	@ (8107284 <HAL_DMA_Abort+0x230>)
 81071be:	4293      	cmp	r3, r2
 81071c0:	d04f      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	681b      	ldr	r3, [r3, #0]
 81071c6:	4a30      	ldr	r2, [pc, #192]	@ (8107288 <HAL_DMA_Abort+0x234>)
 81071c8:	4293      	cmp	r3, r2
 81071ca:	d04a      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071cc:	687b      	ldr	r3, [r7, #4]
 81071ce:	681b      	ldr	r3, [r3, #0]
 81071d0:	4a2e      	ldr	r2, [pc, #184]	@ (810728c <HAL_DMA_Abort+0x238>)
 81071d2:	4293      	cmp	r3, r2
 81071d4:	d045      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	681b      	ldr	r3, [r3, #0]
 81071da:	4a2d      	ldr	r2, [pc, #180]	@ (8107290 <HAL_DMA_Abort+0x23c>)
 81071dc:	4293      	cmp	r3, r2
 81071de:	d040      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071e0:	687b      	ldr	r3, [r7, #4]
 81071e2:	681b      	ldr	r3, [r3, #0]
 81071e4:	4a2b      	ldr	r2, [pc, #172]	@ (8107294 <HAL_DMA_Abort+0x240>)
 81071e6:	4293      	cmp	r3, r2
 81071e8:	d03b      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071ea:	687b      	ldr	r3, [r7, #4]
 81071ec:	681b      	ldr	r3, [r3, #0]
 81071ee:	4a2a      	ldr	r2, [pc, #168]	@ (8107298 <HAL_DMA_Abort+0x244>)
 81071f0:	4293      	cmp	r3, r2
 81071f2:	d036      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071f4:	687b      	ldr	r3, [r7, #4]
 81071f6:	681b      	ldr	r3, [r3, #0]
 81071f8:	4a28      	ldr	r2, [pc, #160]	@ (810729c <HAL_DMA_Abort+0x248>)
 81071fa:	4293      	cmp	r3, r2
 81071fc:	d031      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 81071fe:	687b      	ldr	r3, [r7, #4]
 8107200:	681b      	ldr	r3, [r3, #0]
 8107202:	4a27      	ldr	r2, [pc, #156]	@ (81072a0 <HAL_DMA_Abort+0x24c>)
 8107204:	4293      	cmp	r3, r2
 8107206:	d02c      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 8107208:	687b      	ldr	r3, [r7, #4]
 810720a:	681b      	ldr	r3, [r3, #0]
 810720c:	4a25      	ldr	r2, [pc, #148]	@ (81072a4 <HAL_DMA_Abort+0x250>)
 810720e:	4293      	cmp	r3, r2
 8107210:	d027      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	681b      	ldr	r3, [r3, #0]
 8107216:	4a24      	ldr	r2, [pc, #144]	@ (81072a8 <HAL_DMA_Abort+0x254>)
 8107218:	4293      	cmp	r3, r2
 810721a:	d022      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 810721c:	687b      	ldr	r3, [r7, #4]
 810721e:	681b      	ldr	r3, [r3, #0]
 8107220:	4a22      	ldr	r2, [pc, #136]	@ (81072ac <HAL_DMA_Abort+0x258>)
 8107222:	4293      	cmp	r3, r2
 8107224:	d01d      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	681b      	ldr	r3, [r3, #0]
 810722a:	4a21      	ldr	r2, [pc, #132]	@ (81072b0 <HAL_DMA_Abort+0x25c>)
 810722c:	4293      	cmp	r3, r2
 810722e:	d018      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	4a1f      	ldr	r2, [pc, #124]	@ (81072b4 <HAL_DMA_Abort+0x260>)
 8107236:	4293      	cmp	r3, r2
 8107238:	d013      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	681b      	ldr	r3, [r3, #0]
 810723e:	4a1e      	ldr	r2, [pc, #120]	@ (81072b8 <HAL_DMA_Abort+0x264>)
 8107240:	4293      	cmp	r3, r2
 8107242:	d00e      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	681b      	ldr	r3, [r3, #0]
 8107248:	4a1c      	ldr	r2, [pc, #112]	@ (81072bc <HAL_DMA_Abort+0x268>)
 810724a:	4293      	cmp	r3, r2
 810724c:	d009      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	681b      	ldr	r3, [r3, #0]
 8107252:	4a1b      	ldr	r2, [pc, #108]	@ (81072c0 <HAL_DMA_Abort+0x26c>)
 8107254:	4293      	cmp	r3, r2
 8107256:	d004      	beq.n	8107262 <HAL_DMA_Abort+0x20e>
 8107258:	687b      	ldr	r3, [r7, #4]
 810725a:	681b      	ldr	r3, [r3, #0]
 810725c:	4a19      	ldr	r2, [pc, #100]	@ (81072c4 <HAL_DMA_Abort+0x270>)
 810725e:	4293      	cmp	r3, r2
 8107260:	d132      	bne.n	81072c8 <HAL_DMA_Abort+0x274>
 8107262:	2301      	movs	r3, #1
 8107264:	e031      	b.n	81072ca <HAL_DMA_Abort+0x276>
 8107266:	bf00      	nop
 8107268:	40020010 	.word	0x40020010
 810726c:	40020028 	.word	0x40020028
 8107270:	40020040 	.word	0x40020040
 8107274:	40020058 	.word	0x40020058
 8107278:	40020070 	.word	0x40020070
 810727c:	40020088 	.word	0x40020088
 8107280:	400200a0 	.word	0x400200a0
 8107284:	400200b8 	.word	0x400200b8
 8107288:	40020410 	.word	0x40020410
 810728c:	40020428 	.word	0x40020428
 8107290:	40020440 	.word	0x40020440
 8107294:	40020458 	.word	0x40020458
 8107298:	40020470 	.word	0x40020470
 810729c:	40020488 	.word	0x40020488
 81072a0:	400204a0 	.word	0x400204a0
 81072a4:	400204b8 	.word	0x400204b8
 81072a8:	58025408 	.word	0x58025408
 81072ac:	5802541c 	.word	0x5802541c
 81072b0:	58025430 	.word	0x58025430
 81072b4:	58025444 	.word	0x58025444
 81072b8:	58025458 	.word	0x58025458
 81072bc:	5802546c 	.word	0x5802546c
 81072c0:	58025480 	.word	0x58025480
 81072c4:	58025494 	.word	0x58025494
 81072c8:	2300      	movs	r3, #0
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d007      	beq.n	81072de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81072d2:	681a      	ldr	r2, [r3, #0]
 81072d4:	687b      	ldr	r3, [r7, #4]
 81072d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81072d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81072dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	681b      	ldr	r3, [r3, #0]
 81072e2:	4a6d      	ldr	r2, [pc, #436]	@ (8107498 <HAL_DMA_Abort+0x444>)
 81072e4:	4293      	cmp	r3, r2
 81072e6:	d04a      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	4a6b      	ldr	r2, [pc, #428]	@ (810749c <HAL_DMA_Abort+0x448>)
 81072ee:	4293      	cmp	r3, r2
 81072f0:	d045      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 81072f2:	687b      	ldr	r3, [r7, #4]
 81072f4:	681b      	ldr	r3, [r3, #0]
 81072f6:	4a6a      	ldr	r2, [pc, #424]	@ (81074a0 <HAL_DMA_Abort+0x44c>)
 81072f8:	4293      	cmp	r3, r2
 81072fa:	d040      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 81072fc:	687b      	ldr	r3, [r7, #4]
 81072fe:	681b      	ldr	r3, [r3, #0]
 8107300:	4a68      	ldr	r2, [pc, #416]	@ (81074a4 <HAL_DMA_Abort+0x450>)
 8107302:	4293      	cmp	r3, r2
 8107304:	d03b      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	681b      	ldr	r3, [r3, #0]
 810730a:	4a67      	ldr	r2, [pc, #412]	@ (81074a8 <HAL_DMA_Abort+0x454>)
 810730c:	4293      	cmp	r3, r2
 810730e:	d036      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	681b      	ldr	r3, [r3, #0]
 8107314:	4a65      	ldr	r2, [pc, #404]	@ (81074ac <HAL_DMA_Abort+0x458>)
 8107316:	4293      	cmp	r3, r2
 8107318:	d031      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 810731a:	687b      	ldr	r3, [r7, #4]
 810731c:	681b      	ldr	r3, [r3, #0]
 810731e:	4a64      	ldr	r2, [pc, #400]	@ (81074b0 <HAL_DMA_Abort+0x45c>)
 8107320:	4293      	cmp	r3, r2
 8107322:	d02c      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 8107324:	687b      	ldr	r3, [r7, #4]
 8107326:	681b      	ldr	r3, [r3, #0]
 8107328:	4a62      	ldr	r2, [pc, #392]	@ (81074b4 <HAL_DMA_Abort+0x460>)
 810732a:	4293      	cmp	r3, r2
 810732c:	d027      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 810732e:	687b      	ldr	r3, [r7, #4]
 8107330:	681b      	ldr	r3, [r3, #0]
 8107332:	4a61      	ldr	r2, [pc, #388]	@ (81074b8 <HAL_DMA_Abort+0x464>)
 8107334:	4293      	cmp	r3, r2
 8107336:	d022      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	681b      	ldr	r3, [r3, #0]
 810733c:	4a5f      	ldr	r2, [pc, #380]	@ (81074bc <HAL_DMA_Abort+0x468>)
 810733e:	4293      	cmp	r3, r2
 8107340:	d01d      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 8107342:	687b      	ldr	r3, [r7, #4]
 8107344:	681b      	ldr	r3, [r3, #0]
 8107346:	4a5e      	ldr	r2, [pc, #376]	@ (81074c0 <HAL_DMA_Abort+0x46c>)
 8107348:	4293      	cmp	r3, r2
 810734a:	d018      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	681b      	ldr	r3, [r3, #0]
 8107350:	4a5c      	ldr	r2, [pc, #368]	@ (81074c4 <HAL_DMA_Abort+0x470>)
 8107352:	4293      	cmp	r3, r2
 8107354:	d013      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 8107356:	687b      	ldr	r3, [r7, #4]
 8107358:	681b      	ldr	r3, [r3, #0]
 810735a:	4a5b      	ldr	r2, [pc, #364]	@ (81074c8 <HAL_DMA_Abort+0x474>)
 810735c:	4293      	cmp	r3, r2
 810735e:	d00e      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 8107360:	687b      	ldr	r3, [r7, #4]
 8107362:	681b      	ldr	r3, [r3, #0]
 8107364:	4a59      	ldr	r2, [pc, #356]	@ (81074cc <HAL_DMA_Abort+0x478>)
 8107366:	4293      	cmp	r3, r2
 8107368:	d009      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 810736a:	687b      	ldr	r3, [r7, #4]
 810736c:	681b      	ldr	r3, [r3, #0]
 810736e:	4a58      	ldr	r2, [pc, #352]	@ (81074d0 <HAL_DMA_Abort+0x47c>)
 8107370:	4293      	cmp	r3, r2
 8107372:	d004      	beq.n	810737e <HAL_DMA_Abort+0x32a>
 8107374:	687b      	ldr	r3, [r7, #4]
 8107376:	681b      	ldr	r3, [r3, #0]
 8107378:	4a56      	ldr	r2, [pc, #344]	@ (81074d4 <HAL_DMA_Abort+0x480>)
 810737a:	4293      	cmp	r3, r2
 810737c:	d108      	bne.n	8107390 <HAL_DMA_Abort+0x33c>
 810737e:	687b      	ldr	r3, [r7, #4]
 8107380:	681b      	ldr	r3, [r3, #0]
 8107382:	681a      	ldr	r2, [r3, #0]
 8107384:	687b      	ldr	r3, [r7, #4]
 8107386:	681b      	ldr	r3, [r3, #0]
 8107388:	f022 0201 	bic.w	r2, r2, #1
 810738c:	601a      	str	r2, [r3, #0]
 810738e:	e007      	b.n	81073a0 <HAL_DMA_Abort+0x34c>
 8107390:	687b      	ldr	r3, [r7, #4]
 8107392:	681b      	ldr	r3, [r3, #0]
 8107394:	681a      	ldr	r2, [r3, #0]
 8107396:	687b      	ldr	r3, [r7, #4]
 8107398:	681b      	ldr	r3, [r3, #0]
 810739a:	f022 0201 	bic.w	r2, r2, #1
 810739e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81073a0:	e013      	b.n	81073ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81073a2:	f7fd fcb5 	bl	8104d10 <HAL_GetTick>
 81073a6:	4602      	mov	r2, r0
 81073a8:	693b      	ldr	r3, [r7, #16]
 81073aa:	1ad3      	subs	r3, r2, r3
 81073ac:	2b05      	cmp	r3, #5
 81073ae:	d90c      	bls.n	81073ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81073b0:	687b      	ldr	r3, [r7, #4]
 81073b2:	2220      	movs	r2, #32
 81073b4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81073b6:	687b      	ldr	r3, [r7, #4]
 81073b8:	2203      	movs	r2, #3
 81073ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81073be:	687b      	ldr	r3, [r7, #4]
 81073c0:	2200      	movs	r2, #0
 81073c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 81073c6:	2301      	movs	r3, #1
 81073c8:	e12d      	b.n	8107626 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81073ca:	697b      	ldr	r3, [r7, #20]
 81073cc:	681b      	ldr	r3, [r3, #0]
 81073ce:	f003 0301 	and.w	r3, r3, #1
 81073d2:	2b00      	cmp	r3, #0
 81073d4:	d1e5      	bne.n	81073a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81073d6:	687b      	ldr	r3, [r7, #4]
 81073d8:	681b      	ldr	r3, [r3, #0]
 81073da:	4a2f      	ldr	r2, [pc, #188]	@ (8107498 <HAL_DMA_Abort+0x444>)
 81073dc:	4293      	cmp	r3, r2
 81073de:	d04a      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	681b      	ldr	r3, [r3, #0]
 81073e4:	4a2d      	ldr	r2, [pc, #180]	@ (810749c <HAL_DMA_Abort+0x448>)
 81073e6:	4293      	cmp	r3, r2
 81073e8:	d045      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 81073ea:	687b      	ldr	r3, [r7, #4]
 81073ec:	681b      	ldr	r3, [r3, #0]
 81073ee:	4a2c      	ldr	r2, [pc, #176]	@ (81074a0 <HAL_DMA_Abort+0x44c>)
 81073f0:	4293      	cmp	r3, r2
 81073f2:	d040      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 81073f4:	687b      	ldr	r3, [r7, #4]
 81073f6:	681b      	ldr	r3, [r3, #0]
 81073f8:	4a2a      	ldr	r2, [pc, #168]	@ (81074a4 <HAL_DMA_Abort+0x450>)
 81073fa:	4293      	cmp	r3, r2
 81073fc:	d03b      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 81073fe:	687b      	ldr	r3, [r7, #4]
 8107400:	681b      	ldr	r3, [r3, #0]
 8107402:	4a29      	ldr	r2, [pc, #164]	@ (81074a8 <HAL_DMA_Abort+0x454>)
 8107404:	4293      	cmp	r3, r2
 8107406:	d036      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	681b      	ldr	r3, [r3, #0]
 810740c:	4a27      	ldr	r2, [pc, #156]	@ (81074ac <HAL_DMA_Abort+0x458>)
 810740e:	4293      	cmp	r3, r2
 8107410:	d031      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	681b      	ldr	r3, [r3, #0]
 8107416:	4a26      	ldr	r2, [pc, #152]	@ (81074b0 <HAL_DMA_Abort+0x45c>)
 8107418:	4293      	cmp	r3, r2
 810741a:	d02c      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 810741c:	687b      	ldr	r3, [r7, #4]
 810741e:	681b      	ldr	r3, [r3, #0]
 8107420:	4a24      	ldr	r2, [pc, #144]	@ (81074b4 <HAL_DMA_Abort+0x460>)
 8107422:	4293      	cmp	r3, r2
 8107424:	d027      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 8107426:	687b      	ldr	r3, [r7, #4]
 8107428:	681b      	ldr	r3, [r3, #0]
 810742a:	4a23      	ldr	r2, [pc, #140]	@ (81074b8 <HAL_DMA_Abort+0x464>)
 810742c:	4293      	cmp	r3, r2
 810742e:	d022      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 8107430:	687b      	ldr	r3, [r7, #4]
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	4a21      	ldr	r2, [pc, #132]	@ (81074bc <HAL_DMA_Abort+0x468>)
 8107436:	4293      	cmp	r3, r2
 8107438:	d01d      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 810743a:	687b      	ldr	r3, [r7, #4]
 810743c:	681b      	ldr	r3, [r3, #0]
 810743e:	4a20      	ldr	r2, [pc, #128]	@ (81074c0 <HAL_DMA_Abort+0x46c>)
 8107440:	4293      	cmp	r3, r2
 8107442:	d018      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 8107444:	687b      	ldr	r3, [r7, #4]
 8107446:	681b      	ldr	r3, [r3, #0]
 8107448:	4a1e      	ldr	r2, [pc, #120]	@ (81074c4 <HAL_DMA_Abort+0x470>)
 810744a:	4293      	cmp	r3, r2
 810744c:	d013      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 810744e:	687b      	ldr	r3, [r7, #4]
 8107450:	681b      	ldr	r3, [r3, #0]
 8107452:	4a1d      	ldr	r2, [pc, #116]	@ (81074c8 <HAL_DMA_Abort+0x474>)
 8107454:	4293      	cmp	r3, r2
 8107456:	d00e      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 8107458:	687b      	ldr	r3, [r7, #4]
 810745a:	681b      	ldr	r3, [r3, #0]
 810745c:	4a1b      	ldr	r2, [pc, #108]	@ (81074cc <HAL_DMA_Abort+0x478>)
 810745e:	4293      	cmp	r3, r2
 8107460:	d009      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 8107462:	687b      	ldr	r3, [r7, #4]
 8107464:	681b      	ldr	r3, [r3, #0]
 8107466:	4a1a      	ldr	r2, [pc, #104]	@ (81074d0 <HAL_DMA_Abort+0x47c>)
 8107468:	4293      	cmp	r3, r2
 810746a:	d004      	beq.n	8107476 <HAL_DMA_Abort+0x422>
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	681b      	ldr	r3, [r3, #0]
 8107470:	4a18      	ldr	r2, [pc, #96]	@ (81074d4 <HAL_DMA_Abort+0x480>)
 8107472:	4293      	cmp	r3, r2
 8107474:	d101      	bne.n	810747a <HAL_DMA_Abort+0x426>
 8107476:	2301      	movs	r3, #1
 8107478:	e000      	b.n	810747c <HAL_DMA_Abort+0x428>
 810747a:	2300      	movs	r3, #0
 810747c:	2b00      	cmp	r3, #0
 810747e:	d02b      	beq.n	81074d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107484:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8107486:	687b      	ldr	r3, [r7, #4]
 8107488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810748a:	f003 031f 	and.w	r3, r3, #31
 810748e:	223f      	movs	r2, #63	@ 0x3f
 8107490:	409a      	lsls	r2, r3
 8107492:	68bb      	ldr	r3, [r7, #8]
 8107494:	609a      	str	r2, [r3, #8]
 8107496:	e02a      	b.n	81074ee <HAL_DMA_Abort+0x49a>
 8107498:	40020010 	.word	0x40020010
 810749c:	40020028 	.word	0x40020028
 81074a0:	40020040 	.word	0x40020040
 81074a4:	40020058 	.word	0x40020058
 81074a8:	40020070 	.word	0x40020070
 81074ac:	40020088 	.word	0x40020088
 81074b0:	400200a0 	.word	0x400200a0
 81074b4:	400200b8 	.word	0x400200b8
 81074b8:	40020410 	.word	0x40020410
 81074bc:	40020428 	.word	0x40020428
 81074c0:	40020440 	.word	0x40020440
 81074c4:	40020458 	.word	0x40020458
 81074c8:	40020470 	.word	0x40020470
 81074cc:	40020488 	.word	0x40020488
 81074d0:	400204a0 	.word	0x400204a0
 81074d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81074d8:	687b      	ldr	r3, [r7, #4]
 81074da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81074e2:	f003 031f 	and.w	r3, r3, #31
 81074e6:	2201      	movs	r2, #1
 81074e8:	409a      	lsls	r2, r3
 81074ea:	68fb      	ldr	r3, [r7, #12]
 81074ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	681b      	ldr	r3, [r3, #0]
 81074f2:	4a4f      	ldr	r2, [pc, #316]	@ (8107630 <HAL_DMA_Abort+0x5dc>)
 81074f4:	4293      	cmp	r3, r2
 81074f6:	d072      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 81074f8:	687b      	ldr	r3, [r7, #4]
 81074fa:	681b      	ldr	r3, [r3, #0]
 81074fc:	4a4d      	ldr	r2, [pc, #308]	@ (8107634 <HAL_DMA_Abort+0x5e0>)
 81074fe:	4293      	cmp	r3, r2
 8107500:	d06d      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	4a4c      	ldr	r2, [pc, #304]	@ (8107638 <HAL_DMA_Abort+0x5e4>)
 8107508:	4293      	cmp	r3, r2
 810750a:	d068      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	4a4a      	ldr	r2, [pc, #296]	@ (810763c <HAL_DMA_Abort+0x5e8>)
 8107512:	4293      	cmp	r3, r2
 8107514:	d063      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	681b      	ldr	r3, [r3, #0]
 810751a:	4a49      	ldr	r2, [pc, #292]	@ (8107640 <HAL_DMA_Abort+0x5ec>)
 810751c:	4293      	cmp	r3, r2
 810751e:	d05e      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107520:	687b      	ldr	r3, [r7, #4]
 8107522:	681b      	ldr	r3, [r3, #0]
 8107524:	4a47      	ldr	r2, [pc, #284]	@ (8107644 <HAL_DMA_Abort+0x5f0>)
 8107526:	4293      	cmp	r3, r2
 8107528:	d059      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	681b      	ldr	r3, [r3, #0]
 810752e:	4a46      	ldr	r2, [pc, #280]	@ (8107648 <HAL_DMA_Abort+0x5f4>)
 8107530:	4293      	cmp	r3, r2
 8107532:	d054      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	681b      	ldr	r3, [r3, #0]
 8107538:	4a44      	ldr	r2, [pc, #272]	@ (810764c <HAL_DMA_Abort+0x5f8>)
 810753a:	4293      	cmp	r3, r2
 810753c:	d04f      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	681b      	ldr	r3, [r3, #0]
 8107542:	4a43      	ldr	r2, [pc, #268]	@ (8107650 <HAL_DMA_Abort+0x5fc>)
 8107544:	4293      	cmp	r3, r2
 8107546:	d04a      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	681b      	ldr	r3, [r3, #0]
 810754c:	4a41      	ldr	r2, [pc, #260]	@ (8107654 <HAL_DMA_Abort+0x600>)
 810754e:	4293      	cmp	r3, r2
 8107550:	d045      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	681b      	ldr	r3, [r3, #0]
 8107556:	4a40      	ldr	r2, [pc, #256]	@ (8107658 <HAL_DMA_Abort+0x604>)
 8107558:	4293      	cmp	r3, r2
 810755a:	d040      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 810755c:	687b      	ldr	r3, [r7, #4]
 810755e:	681b      	ldr	r3, [r3, #0]
 8107560:	4a3e      	ldr	r2, [pc, #248]	@ (810765c <HAL_DMA_Abort+0x608>)
 8107562:	4293      	cmp	r3, r2
 8107564:	d03b      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	681b      	ldr	r3, [r3, #0]
 810756a:	4a3d      	ldr	r2, [pc, #244]	@ (8107660 <HAL_DMA_Abort+0x60c>)
 810756c:	4293      	cmp	r3, r2
 810756e:	d036      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	681b      	ldr	r3, [r3, #0]
 8107574:	4a3b      	ldr	r2, [pc, #236]	@ (8107664 <HAL_DMA_Abort+0x610>)
 8107576:	4293      	cmp	r3, r2
 8107578:	d031      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 810757a:	687b      	ldr	r3, [r7, #4]
 810757c:	681b      	ldr	r3, [r3, #0]
 810757e:	4a3a      	ldr	r2, [pc, #232]	@ (8107668 <HAL_DMA_Abort+0x614>)
 8107580:	4293      	cmp	r3, r2
 8107582:	d02c      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	4a38      	ldr	r2, [pc, #224]	@ (810766c <HAL_DMA_Abort+0x618>)
 810758a:	4293      	cmp	r3, r2
 810758c:	d027      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	681b      	ldr	r3, [r3, #0]
 8107592:	4a37      	ldr	r2, [pc, #220]	@ (8107670 <HAL_DMA_Abort+0x61c>)
 8107594:	4293      	cmp	r3, r2
 8107596:	d022      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 8107598:	687b      	ldr	r3, [r7, #4]
 810759a:	681b      	ldr	r3, [r3, #0]
 810759c:	4a35      	ldr	r2, [pc, #212]	@ (8107674 <HAL_DMA_Abort+0x620>)
 810759e:	4293      	cmp	r3, r2
 81075a0:	d01d      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	681b      	ldr	r3, [r3, #0]
 81075a6:	4a34      	ldr	r2, [pc, #208]	@ (8107678 <HAL_DMA_Abort+0x624>)
 81075a8:	4293      	cmp	r3, r2
 81075aa:	d018      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	4a32      	ldr	r2, [pc, #200]	@ (810767c <HAL_DMA_Abort+0x628>)
 81075b2:	4293      	cmp	r3, r2
 81075b4:	d013      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 81075b6:	687b      	ldr	r3, [r7, #4]
 81075b8:	681b      	ldr	r3, [r3, #0]
 81075ba:	4a31      	ldr	r2, [pc, #196]	@ (8107680 <HAL_DMA_Abort+0x62c>)
 81075bc:	4293      	cmp	r3, r2
 81075be:	d00e      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	4a2f      	ldr	r2, [pc, #188]	@ (8107684 <HAL_DMA_Abort+0x630>)
 81075c6:	4293      	cmp	r3, r2
 81075c8:	d009      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	681b      	ldr	r3, [r3, #0]
 81075ce:	4a2e      	ldr	r2, [pc, #184]	@ (8107688 <HAL_DMA_Abort+0x634>)
 81075d0:	4293      	cmp	r3, r2
 81075d2:	d004      	beq.n	81075de <HAL_DMA_Abort+0x58a>
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	681b      	ldr	r3, [r3, #0]
 81075d8:	4a2c      	ldr	r2, [pc, #176]	@ (810768c <HAL_DMA_Abort+0x638>)
 81075da:	4293      	cmp	r3, r2
 81075dc:	d101      	bne.n	81075e2 <HAL_DMA_Abort+0x58e>
 81075de:	2301      	movs	r3, #1
 81075e0:	e000      	b.n	81075e4 <HAL_DMA_Abort+0x590>
 81075e2:	2300      	movs	r3, #0
 81075e4:	2b00      	cmp	r3, #0
 81075e6:	d015      	beq.n	8107614 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81075e8:	687b      	ldr	r3, [r7, #4]
 81075ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81075ec:	687a      	ldr	r2, [r7, #4]
 81075ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 81075f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81075f2:	687b      	ldr	r3, [r7, #4]
 81075f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81075f6:	2b00      	cmp	r3, #0
 81075f8:	d00c      	beq.n	8107614 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81075fa:	687b      	ldr	r3, [r7, #4]
 81075fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81075fe:	681a      	ldr	r2, [r3, #0]
 8107600:	687b      	ldr	r3, [r7, #4]
 8107602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107604:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107608:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810760a:	687b      	ldr	r3, [r7, #4]
 810760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810760e:	687a      	ldr	r2, [r7, #4]
 8107610:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8107612:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8107614:	687b      	ldr	r3, [r7, #4]
 8107616:	2201      	movs	r2, #1
 8107618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810761c:	687b      	ldr	r3, [r7, #4]
 810761e:	2200      	movs	r2, #0
 8107620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8107624:	2300      	movs	r3, #0
}
 8107626:	4618      	mov	r0, r3
 8107628:	3718      	adds	r7, #24
 810762a:	46bd      	mov	sp, r7
 810762c:	bd80      	pop	{r7, pc}
 810762e:	bf00      	nop
 8107630:	40020010 	.word	0x40020010
 8107634:	40020028 	.word	0x40020028
 8107638:	40020040 	.word	0x40020040
 810763c:	40020058 	.word	0x40020058
 8107640:	40020070 	.word	0x40020070
 8107644:	40020088 	.word	0x40020088
 8107648:	400200a0 	.word	0x400200a0
 810764c:	400200b8 	.word	0x400200b8
 8107650:	40020410 	.word	0x40020410
 8107654:	40020428 	.word	0x40020428
 8107658:	40020440 	.word	0x40020440
 810765c:	40020458 	.word	0x40020458
 8107660:	40020470 	.word	0x40020470
 8107664:	40020488 	.word	0x40020488
 8107668:	400204a0 	.word	0x400204a0
 810766c:	400204b8 	.word	0x400204b8
 8107670:	58025408 	.word	0x58025408
 8107674:	5802541c 	.word	0x5802541c
 8107678:	58025430 	.word	0x58025430
 810767c:	58025444 	.word	0x58025444
 8107680:	58025458 	.word	0x58025458
 8107684:	5802546c 	.word	0x5802546c
 8107688:	58025480 	.word	0x58025480
 810768c:	58025494 	.word	0x58025494

08107690 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8107690:	b580      	push	{r7, lr}
 8107692:	b084      	sub	sp, #16
 8107694:	af00      	add	r7, sp, #0
 8107696:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8107698:	687b      	ldr	r3, [r7, #4]
 810769a:	2b00      	cmp	r3, #0
 810769c:	d101      	bne.n	81076a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810769e:	2301      	movs	r3, #1
 81076a0:	e237      	b.n	8107b12 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81076a2:	687b      	ldr	r3, [r7, #4]
 81076a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81076a8:	b2db      	uxtb	r3, r3
 81076aa:	2b02      	cmp	r3, #2
 81076ac:	d004      	beq.n	81076b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81076ae:	687b      	ldr	r3, [r7, #4]
 81076b0:	2280      	movs	r2, #128	@ 0x80
 81076b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 81076b4:	2301      	movs	r3, #1
 81076b6:	e22c      	b.n	8107b12 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81076b8:	687b      	ldr	r3, [r7, #4]
 81076ba:	681b      	ldr	r3, [r3, #0]
 81076bc:	4a5c      	ldr	r2, [pc, #368]	@ (8107830 <HAL_DMA_Abort_IT+0x1a0>)
 81076be:	4293      	cmp	r3, r2
 81076c0:	d04a      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 81076c2:	687b      	ldr	r3, [r7, #4]
 81076c4:	681b      	ldr	r3, [r3, #0]
 81076c6:	4a5b      	ldr	r2, [pc, #364]	@ (8107834 <HAL_DMA_Abort_IT+0x1a4>)
 81076c8:	4293      	cmp	r3, r2
 81076ca:	d045      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 81076cc:	687b      	ldr	r3, [r7, #4]
 81076ce:	681b      	ldr	r3, [r3, #0]
 81076d0:	4a59      	ldr	r2, [pc, #356]	@ (8107838 <HAL_DMA_Abort_IT+0x1a8>)
 81076d2:	4293      	cmp	r3, r2
 81076d4:	d040      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	681b      	ldr	r3, [r3, #0]
 81076da:	4a58      	ldr	r2, [pc, #352]	@ (810783c <HAL_DMA_Abort_IT+0x1ac>)
 81076dc:	4293      	cmp	r3, r2
 81076de:	d03b      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 81076e0:	687b      	ldr	r3, [r7, #4]
 81076e2:	681b      	ldr	r3, [r3, #0]
 81076e4:	4a56      	ldr	r2, [pc, #344]	@ (8107840 <HAL_DMA_Abort_IT+0x1b0>)
 81076e6:	4293      	cmp	r3, r2
 81076e8:	d036      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	681b      	ldr	r3, [r3, #0]
 81076ee:	4a55      	ldr	r2, [pc, #340]	@ (8107844 <HAL_DMA_Abort_IT+0x1b4>)
 81076f0:	4293      	cmp	r3, r2
 81076f2:	d031      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 81076f4:	687b      	ldr	r3, [r7, #4]
 81076f6:	681b      	ldr	r3, [r3, #0]
 81076f8:	4a53      	ldr	r2, [pc, #332]	@ (8107848 <HAL_DMA_Abort_IT+0x1b8>)
 81076fa:	4293      	cmp	r3, r2
 81076fc:	d02c      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 81076fe:	687b      	ldr	r3, [r7, #4]
 8107700:	681b      	ldr	r3, [r3, #0]
 8107702:	4a52      	ldr	r2, [pc, #328]	@ (810784c <HAL_DMA_Abort_IT+0x1bc>)
 8107704:	4293      	cmp	r3, r2
 8107706:	d027      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 8107708:	687b      	ldr	r3, [r7, #4]
 810770a:	681b      	ldr	r3, [r3, #0]
 810770c:	4a50      	ldr	r2, [pc, #320]	@ (8107850 <HAL_DMA_Abort_IT+0x1c0>)
 810770e:	4293      	cmp	r3, r2
 8107710:	d022      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 8107712:	687b      	ldr	r3, [r7, #4]
 8107714:	681b      	ldr	r3, [r3, #0]
 8107716:	4a4f      	ldr	r2, [pc, #316]	@ (8107854 <HAL_DMA_Abort_IT+0x1c4>)
 8107718:	4293      	cmp	r3, r2
 810771a:	d01d      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 810771c:	687b      	ldr	r3, [r7, #4]
 810771e:	681b      	ldr	r3, [r3, #0]
 8107720:	4a4d      	ldr	r2, [pc, #308]	@ (8107858 <HAL_DMA_Abort_IT+0x1c8>)
 8107722:	4293      	cmp	r3, r2
 8107724:	d018      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 8107726:	687b      	ldr	r3, [r7, #4]
 8107728:	681b      	ldr	r3, [r3, #0]
 810772a:	4a4c      	ldr	r2, [pc, #304]	@ (810785c <HAL_DMA_Abort_IT+0x1cc>)
 810772c:	4293      	cmp	r3, r2
 810772e:	d013      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 8107730:	687b      	ldr	r3, [r7, #4]
 8107732:	681b      	ldr	r3, [r3, #0]
 8107734:	4a4a      	ldr	r2, [pc, #296]	@ (8107860 <HAL_DMA_Abort_IT+0x1d0>)
 8107736:	4293      	cmp	r3, r2
 8107738:	d00e      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 810773a:	687b      	ldr	r3, [r7, #4]
 810773c:	681b      	ldr	r3, [r3, #0]
 810773e:	4a49      	ldr	r2, [pc, #292]	@ (8107864 <HAL_DMA_Abort_IT+0x1d4>)
 8107740:	4293      	cmp	r3, r2
 8107742:	d009      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	681b      	ldr	r3, [r3, #0]
 8107748:	4a47      	ldr	r2, [pc, #284]	@ (8107868 <HAL_DMA_Abort_IT+0x1d8>)
 810774a:	4293      	cmp	r3, r2
 810774c:	d004      	beq.n	8107758 <HAL_DMA_Abort_IT+0xc8>
 810774e:	687b      	ldr	r3, [r7, #4]
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	4a46      	ldr	r2, [pc, #280]	@ (810786c <HAL_DMA_Abort_IT+0x1dc>)
 8107754:	4293      	cmp	r3, r2
 8107756:	d101      	bne.n	810775c <HAL_DMA_Abort_IT+0xcc>
 8107758:	2301      	movs	r3, #1
 810775a:	e000      	b.n	810775e <HAL_DMA_Abort_IT+0xce>
 810775c:	2300      	movs	r3, #0
 810775e:	2b00      	cmp	r3, #0
 8107760:	f000 8086 	beq.w	8107870 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8107764:	687b      	ldr	r3, [r7, #4]
 8107766:	2204      	movs	r2, #4
 8107768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810776c:	687b      	ldr	r3, [r7, #4]
 810776e:	681b      	ldr	r3, [r3, #0]
 8107770:	4a2f      	ldr	r2, [pc, #188]	@ (8107830 <HAL_DMA_Abort_IT+0x1a0>)
 8107772:	4293      	cmp	r3, r2
 8107774:	d04a      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 8107776:	687b      	ldr	r3, [r7, #4]
 8107778:	681b      	ldr	r3, [r3, #0]
 810777a:	4a2e      	ldr	r2, [pc, #184]	@ (8107834 <HAL_DMA_Abort_IT+0x1a4>)
 810777c:	4293      	cmp	r3, r2
 810777e:	d045      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 8107780:	687b      	ldr	r3, [r7, #4]
 8107782:	681b      	ldr	r3, [r3, #0]
 8107784:	4a2c      	ldr	r2, [pc, #176]	@ (8107838 <HAL_DMA_Abort_IT+0x1a8>)
 8107786:	4293      	cmp	r3, r2
 8107788:	d040      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 810778a:	687b      	ldr	r3, [r7, #4]
 810778c:	681b      	ldr	r3, [r3, #0]
 810778e:	4a2b      	ldr	r2, [pc, #172]	@ (810783c <HAL_DMA_Abort_IT+0x1ac>)
 8107790:	4293      	cmp	r3, r2
 8107792:	d03b      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 8107794:	687b      	ldr	r3, [r7, #4]
 8107796:	681b      	ldr	r3, [r3, #0]
 8107798:	4a29      	ldr	r2, [pc, #164]	@ (8107840 <HAL_DMA_Abort_IT+0x1b0>)
 810779a:	4293      	cmp	r3, r2
 810779c:	d036      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 810779e:	687b      	ldr	r3, [r7, #4]
 81077a0:	681b      	ldr	r3, [r3, #0]
 81077a2:	4a28      	ldr	r2, [pc, #160]	@ (8107844 <HAL_DMA_Abort_IT+0x1b4>)
 81077a4:	4293      	cmp	r3, r2
 81077a6:	d031      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	681b      	ldr	r3, [r3, #0]
 81077ac:	4a26      	ldr	r2, [pc, #152]	@ (8107848 <HAL_DMA_Abort_IT+0x1b8>)
 81077ae:	4293      	cmp	r3, r2
 81077b0:	d02c      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	681b      	ldr	r3, [r3, #0]
 81077b6:	4a25      	ldr	r2, [pc, #148]	@ (810784c <HAL_DMA_Abort_IT+0x1bc>)
 81077b8:	4293      	cmp	r3, r2
 81077ba:	d027      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	4a23      	ldr	r2, [pc, #140]	@ (8107850 <HAL_DMA_Abort_IT+0x1c0>)
 81077c2:	4293      	cmp	r3, r2
 81077c4:	d022      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077c6:	687b      	ldr	r3, [r7, #4]
 81077c8:	681b      	ldr	r3, [r3, #0]
 81077ca:	4a22      	ldr	r2, [pc, #136]	@ (8107854 <HAL_DMA_Abort_IT+0x1c4>)
 81077cc:	4293      	cmp	r3, r2
 81077ce:	d01d      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077d0:	687b      	ldr	r3, [r7, #4]
 81077d2:	681b      	ldr	r3, [r3, #0]
 81077d4:	4a20      	ldr	r2, [pc, #128]	@ (8107858 <HAL_DMA_Abort_IT+0x1c8>)
 81077d6:	4293      	cmp	r3, r2
 81077d8:	d018      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077da:	687b      	ldr	r3, [r7, #4]
 81077dc:	681b      	ldr	r3, [r3, #0]
 81077de:	4a1f      	ldr	r2, [pc, #124]	@ (810785c <HAL_DMA_Abort_IT+0x1cc>)
 81077e0:	4293      	cmp	r3, r2
 81077e2:	d013      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077e4:	687b      	ldr	r3, [r7, #4]
 81077e6:	681b      	ldr	r3, [r3, #0]
 81077e8:	4a1d      	ldr	r2, [pc, #116]	@ (8107860 <HAL_DMA_Abort_IT+0x1d0>)
 81077ea:	4293      	cmp	r3, r2
 81077ec:	d00e      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077ee:	687b      	ldr	r3, [r7, #4]
 81077f0:	681b      	ldr	r3, [r3, #0]
 81077f2:	4a1c      	ldr	r2, [pc, #112]	@ (8107864 <HAL_DMA_Abort_IT+0x1d4>)
 81077f4:	4293      	cmp	r3, r2
 81077f6:	d009      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 81077f8:	687b      	ldr	r3, [r7, #4]
 81077fa:	681b      	ldr	r3, [r3, #0]
 81077fc:	4a1a      	ldr	r2, [pc, #104]	@ (8107868 <HAL_DMA_Abort_IT+0x1d8>)
 81077fe:	4293      	cmp	r3, r2
 8107800:	d004      	beq.n	810780c <HAL_DMA_Abort_IT+0x17c>
 8107802:	687b      	ldr	r3, [r7, #4]
 8107804:	681b      	ldr	r3, [r3, #0]
 8107806:	4a19      	ldr	r2, [pc, #100]	@ (810786c <HAL_DMA_Abort_IT+0x1dc>)
 8107808:	4293      	cmp	r3, r2
 810780a:	d108      	bne.n	810781e <HAL_DMA_Abort_IT+0x18e>
 810780c:	687b      	ldr	r3, [r7, #4]
 810780e:	681b      	ldr	r3, [r3, #0]
 8107810:	681a      	ldr	r2, [r3, #0]
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	681b      	ldr	r3, [r3, #0]
 8107816:	f022 0201 	bic.w	r2, r2, #1
 810781a:	601a      	str	r2, [r3, #0]
 810781c:	e178      	b.n	8107b10 <HAL_DMA_Abort_IT+0x480>
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	681b      	ldr	r3, [r3, #0]
 8107822:	681a      	ldr	r2, [r3, #0]
 8107824:	687b      	ldr	r3, [r7, #4]
 8107826:	681b      	ldr	r3, [r3, #0]
 8107828:	f022 0201 	bic.w	r2, r2, #1
 810782c:	601a      	str	r2, [r3, #0]
 810782e:	e16f      	b.n	8107b10 <HAL_DMA_Abort_IT+0x480>
 8107830:	40020010 	.word	0x40020010
 8107834:	40020028 	.word	0x40020028
 8107838:	40020040 	.word	0x40020040
 810783c:	40020058 	.word	0x40020058
 8107840:	40020070 	.word	0x40020070
 8107844:	40020088 	.word	0x40020088
 8107848:	400200a0 	.word	0x400200a0
 810784c:	400200b8 	.word	0x400200b8
 8107850:	40020410 	.word	0x40020410
 8107854:	40020428 	.word	0x40020428
 8107858:	40020440 	.word	0x40020440
 810785c:	40020458 	.word	0x40020458
 8107860:	40020470 	.word	0x40020470
 8107864:	40020488 	.word	0x40020488
 8107868:	400204a0 	.word	0x400204a0
 810786c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8107870:	687b      	ldr	r3, [r7, #4]
 8107872:	681b      	ldr	r3, [r3, #0]
 8107874:	681a      	ldr	r2, [r3, #0]
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	681b      	ldr	r3, [r3, #0]
 810787a:	f022 020e 	bic.w	r2, r2, #14
 810787e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8107880:	687b      	ldr	r3, [r7, #4]
 8107882:	681b      	ldr	r3, [r3, #0]
 8107884:	4a6c      	ldr	r2, [pc, #432]	@ (8107a38 <HAL_DMA_Abort_IT+0x3a8>)
 8107886:	4293      	cmp	r3, r2
 8107888:	d04a      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	681b      	ldr	r3, [r3, #0]
 810788e:	4a6b      	ldr	r2, [pc, #428]	@ (8107a3c <HAL_DMA_Abort_IT+0x3ac>)
 8107890:	4293      	cmp	r3, r2
 8107892:	d045      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 8107894:	687b      	ldr	r3, [r7, #4]
 8107896:	681b      	ldr	r3, [r3, #0]
 8107898:	4a69      	ldr	r2, [pc, #420]	@ (8107a40 <HAL_DMA_Abort_IT+0x3b0>)
 810789a:	4293      	cmp	r3, r2
 810789c:	d040      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 810789e:	687b      	ldr	r3, [r7, #4]
 81078a0:	681b      	ldr	r3, [r3, #0]
 81078a2:	4a68      	ldr	r2, [pc, #416]	@ (8107a44 <HAL_DMA_Abort_IT+0x3b4>)
 81078a4:	4293      	cmp	r3, r2
 81078a6:	d03b      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	681b      	ldr	r3, [r3, #0]
 81078ac:	4a66      	ldr	r2, [pc, #408]	@ (8107a48 <HAL_DMA_Abort_IT+0x3b8>)
 81078ae:	4293      	cmp	r3, r2
 81078b0:	d036      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	681b      	ldr	r3, [r3, #0]
 81078b6:	4a65      	ldr	r2, [pc, #404]	@ (8107a4c <HAL_DMA_Abort_IT+0x3bc>)
 81078b8:	4293      	cmp	r3, r2
 81078ba:	d031      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	681b      	ldr	r3, [r3, #0]
 81078c0:	4a63      	ldr	r2, [pc, #396]	@ (8107a50 <HAL_DMA_Abort_IT+0x3c0>)
 81078c2:	4293      	cmp	r3, r2
 81078c4:	d02c      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078c6:	687b      	ldr	r3, [r7, #4]
 81078c8:	681b      	ldr	r3, [r3, #0]
 81078ca:	4a62      	ldr	r2, [pc, #392]	@ (8107a54 <HAL_DMA_Abort_IT+0x3c4>)
 81078cc:	4293      	cmp	r3, r2
 81078ce:	d027      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078d0:	687b      	ldr	r3, [r7, #4]
 81078d2:	681b      	ldr	r3, [r3, #0]
 81078d4:	4a60      	ldr	r2, [pc, #384]	@ (8107a58 <HAL_DMA_Abort_IT+0x3c8>)
 81078d6:	4293      	cmp	r3, r2
 81078d8:	d022      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	681b      	ldr	r3, [r3, #0]
 81078de:	4a5f      	ldr	r2, [pc, #380]	@ (8107a5c <HAL_DMA_Abort_IT+0x3cc>)
 81078e0:	4293      	cmp	r3, r2
 81078e2:	d01d      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078e4:	687b      	ldr	r3, [r7, #4]
 81078e6:	681b      	ldr	r3, [r3, #0]
 81078e8:	4a5d      	ldr	r2, [pc, #372]	@ (8107a60 <HAL_DMA_Abort_IT+0x3d0>)
 81078ea:	4293      	cmp	r3, r2
 81078ec:	d018      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	681b      	ldr	r3, [r3, #0]
 81078f2:	4a5c      	ldr	r2, [pc, #368]	@ (8107a64 <HAL_DMA_Abort_IT+0x3d4>)
 81078f4:	4293      	cmp	r3, r2
 81078f6:	d013      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 81078f8:	687b      	ldr	r3, [r7, #4]
 81078fa:	681b      	ldr	r3, [r3, #0]
 81078fc:	4a5a      	ldr	r2, [pc, #360]	@ (8107a68 <HAL_DMA_Abort_IT+0x3d8>)
 81078fe:	4293      	cmp	r3, r2
 8107900:	d00e      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	681b      	ldr	r3, [r3, #0]
 8107906:	4a59      	ldr	r2, [pc, #356]	@ (8107a6c <HAL_DMA_Abort_IT+0x3dc>)
 8107908:	4293      	cmp	r3, r2
 810790a:	d009      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 810790c:	687b      	ldr	r3, [r7, #4]
 810790e:	681b      	ldr	r3, [r3, #0]
 8107910:	4a57      	ldr	r2, [pc, #348]	@ (8107a70 <HAL_DMA_Abort_IT+0x3e0>)
 8107912:	4293      	cmp	r3, r2
 8107914:	d004      	beq.n	8107920 <HAL_DMA_Abort_IT+0x290>
 8107916:	687b      	ldr	r3, [r7, #4]
 8107918:	681b      	ldr	r3, [r3, #0]
 810791a:	4a56      	ldr	r2, [pc, #344]	@ (8107a74 <HAL_DMA_Abort_IT+0x3e4>)
 810791c:	4293      	cmp	r3, r2
 810791e:	d108      	bne.n	8107932 <HAL_DMA_Abort_IT+0x2a2>
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	681b      	ldr	r3, [r3, #0]
 8107924:	681a      	ldr	r2, [r3, #0]
 8107926:	687b      	ldr	r3, [r7, #4]
 8107928:	681b      	ldr	r3, [r3, #0]
 810792a:	f022 0201 	bic.w	r2, r2, #1
 810792e:	601a      	str	r2, [r3, #0]
 8107930:	e007      	b.n	8107942 <HAL_DMA_Abort_IT+0x2b2>
 8107932:	687b      	ldr	r3, [r7, #4]
 8107934:	681b      	ldr	r3, [r3, #0]
 8107936:	681a      	ldr	r2, [r3, #0]
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	681b      	ldr	r3, [r3, #0]
 810793c:	f022 0201 	bic.w	r2, r2, #1
 8107940:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8107942:	687b      	ldr	r3, [r7, #4]
 8107944:	681b      	ldr	r3, [r3, #0]
 8107946:	4a3c      	ldr	r2, [pc, #240]	@ (8107a38 <HAL_DMA_Abort_IT+0x3a8>)
 8107948:	4293      	cmp	r3, r2
 810794a:	d072      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 810794c:	687b      	ldr	r3, [r7, #4]
 810794e:	681b      	ldr	r3, [r3, #0]
 8107950:	4a3a      	ldr	r2, [pc, #232]	@ (8107a3c <HAL_DMA_Abort_IT+0x3ac>)
 8107952:	4293      	cmp	r3, r2
 8107954:	d06d      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107956:	687b      	ldr	r3, [r7, #4]
 8107958:	681b      	ldr	r3, [r3, #0]
 810795a:	4a39      	ldr	r2, [pc, #228]	@ (8107a40 <HAL_DMA_Abort_IT+0x3b0>)
 810795c:	4293      	cmp	r3, r2
 810795e:	d068      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	4a37      	ldr	r2, [pc, #220]	@ (8107a44 <HAL_DMA_Abort_IT+0x3b4>)
 8107966:	4293      	cmp	r3, r2
 8107968:	d063      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	681b      	ldr	r3, [r3, #0]
 810796e:	4a36      	ldr	r2, [pc, #216]	@ (8107a48 <HAL_DMA_Abort_IT+0x3b8>)
 8107970:	4293      	cmp	r3, r2
 8107972:	d05e      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107974:	687b      	ldr	r3, [r7, #4]
 8107976:	681b      	ldr	r3, [r3, #0]
 8107978:	4a34      	ldr	r2, [pc, #208]	@ (8107a4c <HAL_DMA_Abort_IT+0x3bc>)
 810797a:	4293      	cmp	r3, r2
 810797c:	d059      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	681b      	ldr	r3, [r3, #0]
 8107982:	4a33      	ldr	r2, [pc, #204]	@ (8107a50 <HAL_DMA_Abort_IT+0x3c0>)
 8107984:	4293      	cmp	r3, r2
 8107986:	d054      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107988:	687b      	ldr	r3, [r7, #4]
 810798a:	681b      	ldr	r3, [r3, #0]
 810798c:	4a31      	ldr	r2, [pc, #196]	@ (8107a54 <HAL_DMA_Abort_IT+0x3c4>)
 810798e:	4293      	cmp	r3, r2
 8107990:	d04f      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	681b      	ldr	r3, [r3, #0]
 8107996:	4a30      	ldr	r2, [pc, #192]	@ (8107a58 <HAL_DMA_Abort_IT+0x3c8>)
 8107998:	4293      	cmp	r3, r2
 810799a:	d04a      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 810799c:	687b      	ldr	r3, [r7, #4]
 810799e:	681b      	ldr	r3, [r3, #0]
 81079a0:	4a2e      	ldr	r2, [pc, #184]	@ (8107a5c <HAL_DMA_Abort_IT+0x3cc>)
 81079a2:	4293      	cmp	r3, r2
 81079a4:	d045      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	681b      	ldr	r3, [r3, #0]
 81079aa:	4a2d      	ldr	r2, [pc, #180]	@ (8107a60 <HAL_DMA_Abort_IT+0x3d0>)
 81079ac:	4293      	cmp	r3, r2
 81079ae:	d040      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	681b      	ldr	r3, [r3, #0]
 81079b4:	4a2b      	ldr	r2, [pc, #172]	@ (8107a64 <HAL_DMA_Abort_IT+0x3d4>)
 81079b6:	4293      	cmp	r3, r2
 81079b8:	d03b      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	681b      	ldr	r3, [r3, #0]
 81079be:	4a2a      	ldr	r2, [pc, #168]	@ (8107a68 <HAL_DMA_Abort_IT+0x3d8>)
 81079c0:	4293      	cmp	r3, r2
 81079c2:	d036      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079c4:	687b      	ldr	r3, [r7, #4]
 81079c6:	681b      	ldr	r3, [r3, #0]
 81079c8:	4a28      	ldr	r2, [pc, #160]	@ (8107a6c <HAL_DMA_Abort_IT+0x3dc>)
 81079ca:	4293      	cmp	r3, r2
 81079cc:	d031      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079ce:	687b      	ldr	r3, [r7, #4]
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	4a27      	ldr	r2, [pc, #156]	@ (8107a70 <HAL_DMA_Abort_IT+0x3e0>)
 81079d4:	4293      	cmp	r3, r2
 81079d6:	d02c      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	681b      	ldr	r3, [r3, #0]
 81079dc:	4a25      	ldr	r2, [pc, #148]	@ (8107a74 <HAL_DMA_Abort_IT+0x3e4>)
 81079de:	4293      	cmp	r3, r2
 81079e0:	d027      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079e2:	687b      	ldr	r3, [r7, #4]
 81079e4:	681b      	ldr	r3, [r3, #0]
 81079e6:	4a24      	ldr	r2, [pc, #144]	@ (8107a78 <HAL_DMA_Abort_IT+0x3e8>)
 81079e8:	4293      	cmp	r3, r2
 81079ea:	d022      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	681b      	ldr	r3, [r3, #0]
 81079f0:	4a22      	ldr	r2, [pc, #136]	@ (8107a7c <HAL_DMA_Abort_IT+0x3ec>)
 81079f2:	4293      	cmp	r3, r2
 81079f4:	d01d      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	681b      	ldr	r3, [r3, #0]
 81079fa:	4a21      	ldr	r2, [pc, #132]	@ (8107a80 <HAL_DMA_Abort_IT+0x3f0>)
 81079fc:	4293      	cmp	r3, r2
 81079fe:	d018      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	681b      	ldr	r3, [r3, #0]
 8107a04:	4a1f      	ldr	r2, [pc, #124]	@ (8107a84 <HAL_DMA_Abort_IT+0x3f4>)
 8107a06:	4293      	cmp	r3, r2
 8107a08:	d013      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107a0a:	687b      	ldr	r3, [r7, #4]
 8107a0c:	681b      	ldr	r3, [r3, #0]
 8107a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8107a88 <HAL_DMA_Abort_IT+0x3f8>)
 8107a10:	4293      	cmp	r3, r2
 8107a12:	d00e      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107a14:	687b      	ldr	r3, [r7, #4]
 8107a16:	681b      	ldr	r3, [r3, #0]
 8107a18:	4a1c      	ldr	r2, [pc, #112]	@ (8107a8c <HAL_DMA_Abort_IT+0x3fc>)
 8107a1a:	4293      	cmp	r3, r2
 8107a1c:	d009      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107a1e:	687b      	ldr	r3, [r7, #4]
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	4a1b      	ldr	r2, [pc, #108]	@ (8107a90 <HAL_DMA_Abort_IT+0x400>)
 8107a24:	4293      	cmp	r3, r2
 8107a26:	d004      	beq.n	8107a32 <HAL_DMA_Abort_IT+0x3a2>
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	4a19      	ldr	r2, [pc, #100]	@ (8107a94 <HAL_DMA_Abort_IT+0x404>)
 8107a2e:	4293      	cmp	r3, r2
 8107a30:	d132      	bne.n	8107a98 <HAL_DMA_Abort_IT+0x408>
 8107a32:	2301      	movs	r3, #1
 8107a34:	e031      	b.n	8107a9a <HAL_DMA_Abort_IT+0x40a>
 8107a36:	bf00      	nop
 8107a38:	40020010 	.word	0x40020010
 8107a3c:	40020028 	.word	0x40020028
 8107a40:	40020040 	.word	0x40020040
 8107a44:	40020058 	.word	0x40020058
 8107a48:	40020070 	.word	0x40020070
 8107a4c:	40020088 	.word	0x40020088
 8107a50:	400200a0 	.word	0x400200a0
 8107a54:	400200b8 	.word	0x400200b8
 8107a58:	40020410 	.word	0x40020410
 8107a5c:	40020428 	.word	0x40020428
 8107a60:	40020440 	.word	0x40020440
 8107a64:	40020458 	.word	0x40020458
 8107a68:	40020470 	.word	0x40020470
 8107a6c:	40020488 	.word	0x40020488
 8107a70:	400204a0 	.word	0x400204a0
 8107a74:	400204b8 	.word	0x400204b8
 8107a78:	58025408 	.word	0x58025408
 8107a7c:	5802541c 	.word	0x5802541c
 8107a80:	58025430 	.word	0x58025430
 8107a84:	58025444 	.word	0x58025444
 8107a88:	58025458 	.word	0x58025458
 8107a8c:	5802546c 	.word	0x5802546c
 8107a90:	58025480 	.word	0x58025480
 8107a94:	58025494 	.word	0x58025494
 8107a98:	2300      	movs	r3, #0
 8107a9a:	2b00      	cmp	r3, #0
 8107a9c:	d028      	beq.n	8107af0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107aa2:	681a      	ldr	r2, [r3, #0]
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107aac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8107aae:	687b      	ldr	r3, [r7, #4]
 8107ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107ab2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107ab8:	f003 031f 	and.w	r3, r3, #31
 8107abc:	2201      	movs	r2, #1
 8107abe:	409a      	lsls	r2, r3
 8107ac0:	68fb      	ldr	r3, [r7, #12]
 8107ac2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8107ac4:	687b      	ldr	r3, [r7, #4]
 8107ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107ac8:	687a      	ldr	r2, [r7, #4]
 8107aca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8107acc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107ad2:	2b00      	cmp	r3, #0
 8107ad4:	d00c      	beq.n	8107af0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107ada:	681a      	ldr	r2, [r3, #0]
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107ae0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107ae4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8107ae6:	687b      	ldr	r3, [r7, #4]
 8107ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107aea:	687a      	ldr	r2, [r7, #4]
 8107aec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8107aee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	2201      	movs	r2, #1
 8107af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	2200      	movs	r2, #0
 8107afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107b04:	2b00      	cmp	r3, #0
 8107b06:	d003      	beq.n	8107b10 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107b0c:	6878      	ldr	r0, [r7, #4]
 8107b0e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8107b10:	2300      	movs	r3, #0
}
 8107b12:	4618      	mov	r0, r3
 8107b14:	3710      	adds	r7, #16
 8107b16:	46bd      	mov	sp, r7
 8107b18:	bd80      	pop	{r7, pc}
 8107b1a:	bf00      	nop

08107b1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8107b1c:	b580      	push	{r7, lr}
 8107b1e:	b08a      	sub	sp, #40	@ 0x28
 8107b20:	af00      	add	r7, sp, #0
 8107b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8107b24:	2300      	movs	r3, #0
 8107b26:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8107b28:	4b67      	ldr	r3, [pc, #412]	@ (8107cc8 <HAL_DMA_IRQHandler+0x1ac>)
 8107b2a:	681b      	ldr	r3, [r3, #0]
 8107b2c:	4a67      	ldr	r2, [pc, #412]	@ (8107ccc <HAL_DMA_IRQHandler+0x1b0>)
 8107b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8107b32:	0a9b      	lsrs	r3, r3, #10
 8107b34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8107b36:	687b      	ldr	r3, [r7, #4]
 8107b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107b3a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8107b3c:	687b      	ldr	r3, [r7, #4]
 8107b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107b40:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8107b42:	6a3b      	ldr	r3, [r7, #32]
 8107b44:	681b      	ldr	r3, [r3, #0]
 8107b46:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8107b48:	69fb      	ldr	r3, [r7, #28]
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8107b4e:	687b      	ldr	r3, [r7, #4]
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	4a5f      	ldr	r2, [pc, #380]	@ (8107cd0 <HAL_DMA_IRQHandler+0x1b4>)
 8107b54:	4293      	cmp	r3, r2
 8107b56:	d04a      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107b58:	687b      	ldr	r3, [r7, #4]
 8107b5a:	681b      	ldr	r3, [r3, #0]
 8107b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8107cd4 <HAL_DMA_IRQHandler+0x1b8>)
 8107b5e:	4293      	cmp	r3, r2
 8107b60:	d045      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	681b      	ldr	r3, [r3, #0]
 8107b66:	4a5c      	ldr	r2, [pc, #368]	@ (8107cd8 <HAL_DMA_IRQHandler+0x1bc>)
 8107b68:	4293      	cmp	r3, r2
 8107b6a:	d040      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107b6c:	687b      	ldr	r3, [r7, #4]
 8107b6e:	681b      	ldr	r3, [r3, #0]
 8107b70:	4a5a      	ldr	r2, [pc, #360]	@ (8107cdc <HAL_DMA_IRQHandler+0x1c0>)
 8107b72:	4293      	cmp	r3, r2
 8107b74:	d03b      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107b76:	687b      	ldr	r3, [r7, #4]
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	4a59      	ldr	r2, [pc, #356]	@ (8107ce0 <HAL_DMA_IRQHandler+0x1c4>)
 8107b7c:	4293      	cmp	r3, r2
 8107b7e:	d036      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	681b      	ldr	r3, [r3, #0]
 8107b84:	4a57      	ldr	r2, [pc, #348]	@ (8107ce4 <HAL_DMA_IRQHandler+0x1c8>)
 8107b86:	4293      	cmp	r3, r2
 8107b88:	d031      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	681b      	ldr	r3, [r3, #0]
 8107b8e:	4a56      	ldr	r2, [pc, #344]	@ (8107ce8 <HAL_DMA_IRQHandler+0x1cc>)
 8107b90:	4293      	cmp	r3, r2
 8107b92:	d02c      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	681b      	ldr	r3, [r3, #0]
 8107b98:	4a54      	ldr	r2, [pc, #336]	@ (8107cec <HAL_DMA_IRQHandler+0x1d0>)
 8107b9a:	4293      	cmp	r3, r2
 8107b9c:	d027      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107b9e:	687b      	ldr	r3, [r7, #4]
 8107ba0:	681b      	ldr	r3, [r3, #0]
 8107ba2:	4a53      	ldr	r2, [pc, #332]	@ (8107cf0 <HAL_DMA_IRQHandler+0x1d4>)
 8107ba4:	4293      	cmp	r3, r2
 8107ba6:	d022      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107ba8:	687b      	ldr	r3, [r7, #4]
 8107baa:	681b      	ldr	r3, [r3, #0]
 8107bac:	4a51      	ldr	r2, [pc, #324]	@ (8107cf4 <HAL_DMA_IRQHandler+0x1d8>)
 8107bae:	4293      	cmp	r3, r2
 8107bb0:	d01d      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107bb2:	687b      	ldr	r3, [r7, #4]
 8107bb4:	681b      	ldr	r3, [r3, #0]
 8107bb6:	4a50      	ldr	r2, [pc, #320]	@ (8107cf8 <HAL_DMA_IRQHandler+0x1dc>)
 8107bb8:	4293      	cmp	r3, r2
 8107bba:	d018      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	681b      	ldr	r3, [r3, #0]
 8107bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8107cfc <HAL_DMA_IRQHandler+0x1e0>)
 8107bc2:	4293      	cmp	r3, r2
 8107bc4:	d013      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107bc6:	687b      	ldr	r3, [r7, #4]
 8107bc8:	681b      	ldr	r3, [r3, #0]
 8107bca:	4a4d      	ldr	r2, [pc, #308]	@ (8107d00 <HAL_DMA_IRQHandler+0x1e4>)
 8107bcc:	4293      	cmp	r3, r2
 8107bce:	d00e      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	681b      	ldr	r3, [r3, #0]
 8107bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8107d04 <HAL_DMA_IRQHandler+0x1e8>)
 8107bd6:	4293      	cmp	r3, r2
 8107bd8:	d009      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	681b      	ldr	r3, [r3, #0]
 8107bde:	4a4a      	ldr	r2, [pc, #296]	@ (8107d08 <HAL_DMA_IRQHandler+0x1ec>)
 8107be0:	4293      	cmp	r3, r2
 8107be2:	d004      	beq.n	8107bee <HAL_DMA_IRQHandler+0xd2>
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	681b      	ldr	r3, [r3, #0]
 8107be8:	4a48      	ldr	r2, [pc, #288]	@ (8107d0c <HAL_DMA_IRQHandler+0x1f0>)
 8107bea:	4293      	cmp	r3, r2
 8107bec:	d101      	bne.n	8107bf2 <HAL_DMA_IRQHandler+0xd6>
 8107bee:	2301      	movs	r3, #1
 8107bf0:	e000      	b.n	8107bf4 <HAL_DMA_IRQHandler+0xd8>
 8107bf2:	2300      	movs	r3, #0
 8107bf4:	2b00      	cmp	r3, #0
 8107bf6:	f000 842b 	beq.w	8108450 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107bfe:	f003 031f 	and.w	r3, r3, #31
 8107c02:	2208      	movs	r2, #8
 8107c04:	409a      	lsls	r2, r3
 8107c06:	69bb      	ldr	r3, [r7, #24]
 8107c08:	4013      	ands	r3, r2
 8107c0a:	2b00      	cmp	r3, #0
 8107c0c:	f000 80a2 	beq.w	8107d54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	681b      	ldr	r3, [r3, #0]
 8107c14:	4a2e      	ldr	r2, [pc, #184]	@ (8107cd0 <HAL_DMA_IRQHandler+0x1b4>)
 8107c16:	4293      	cmp	r3, r2
 8107c18:	d04a      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c1a:	687b      	ldr	r3, [r7, #4]
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8107cd4 <HAL_DMA_IRQHandler+0x1b8>)
 8107c20:	4293      	cmp	r3, r2
 8107c22:	d045      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c24:	687b      	ldr	r3, [r7, #4]
 8107c26:	681b      	ldr	r3, [r3, #0]
 8107c28:	4a2b      	ldr	r2, [pc, #172]	@ (8107cd8 <HAL_DMA_IRQHandler+0x1bc>)
 8107c2a:	4293      	cmp	r3, r2
 8107c2c:	d040      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	681b      	ldr	r3, [r3, #0]
 8107c32:	4a2a      	ldr	r2, [pc, #168]	@ (8107cdc <HAL_DMA_IRQHandler+0x1c0>)
 8107c34:	4293      	cmp	r3, r2
 8107c36:	d03b      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c38:	687b      	ldr	r3, [r7, #4]
 8107c3a:	681b      	ldr	r3, [r3, #0]
 8107c3c:	4a28      	ldr	r2, [pc, #160]	@ (8107ce0 <HAL_DMA_IRQHandler+0x1c4>)
 8107c3e:	4293      	cmp	r3, r2
 8107c40:	d036      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	4a27      	ldr	r2, [pc, #156]	@ (8107ce4 <HAL_DMA_IRQHandler+0x1c8>)
 8107c48:	4293      	cmp	r3, r2
 8107c4a:	d031      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c4c:	687b      	ldr	r3, [r7, #4]
 8107c4e:	681b      	ldr	r3, [r3, #0]
 8107c50:	4a25      	ldr	r2, [pc, #148]	@ (8107ce8 <HAL_DMA_IRQHandler+0x1cc>)
 8107c52:	4293      	cmp	r3, r2
 8107c54:	d02c      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c56:	687b      	ldr	r3, [r7, #4]
 8107c58:	681b      	ldr	r3, [r3, #0]
 8107c5a:	4a24      	ldr	r2, [pc, #144]	@ (8107cec <HAL_DMA_IRQHandler+0x1d0>)
 8107c5c:	4293      	cmp	r3, r2
 8107c5e:	d027      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	4a22      	ldr	r2, [pc, #136]	@ (8107cf0 <HAL_DMA_IRQHandler+0x1d4>)
 8107c66:	4293      	cmp	r3, r2
 8107c68:	d022      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c6a:	687b      	ldr	r3, [r7, #4]
 8107c6c:	681b      	ldr	r3, [r3, #0]
 8107c6e:	4a21      	ldr	r2, [pc, #132]	@ (8107cf4 <HAL_DMA_IRQHandler+0x1d8>)
 8107c70:	4293      	cmp	r3, r2
 8107c72:	d01d      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	681b      	ldr	r3, [r3, #0]
 8107c78:	4a1f      	ldr	r2, [pc, #124]	@ (8107cf8 <HAL_DMA_IRQHandler+0x1dc>)
 8107c7a:	4293      	cmp	r3, r2
 8107c7c:	d018      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	681b      	ldr	r3, [r3, #0]
 8107c82:	4a1e      	ldr	r2, [pc, #120]	@ (8107cfc <HAL_DMA_IRQHandler+0x1e0>)
 8107c84:	4293      	cmp	r3, r2
 8107c86:	d013      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c88:	687b      	ldr	r3, [r7, #4]
 8107c8a:	681b      	ldr	r3, [r3, #0]
 8107c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8107d00 <HAL_DMA_IRQHandler+0x1e4>)
 8107c8e:	4293      	cmp	r3, r2
 8107c90:	d00e      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c92:	687b      	ldr	r3, [r7, #4]
 8107c94:	681b      	ldr	r3, [r3, #0]
 8107c96:	4a1b      	ldr	r2, [pc, #108]	@ (8107d04 <HAL_DMA_IRQHandler+0x1e8>)
 8107c98:	4293      	cmp	r3, r2
 8107c9a:	d009      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	681b      	ldr	r3, [r3, #0]
 8107ca0:	4a19      	ldr	r2, [pc, #100]	@ (8107d08 <HAL_DMA_IRQHandler+0x1ec>)
 8107ca2:	4293      	cmp	r3, r2
 8107ca4:	d004      	beq.n	8107cb0 <HAL_DMA_IRQHandler+0x194>
 8107ca6:	687b      	ldr	r3, [r7, #4]
 8107ca8:	681b      	ldr	r3, [r3, #0]
 8107caa:	4a18      	ldr	r2, [pc, #96]	@ (8107d0c <HAL_DMA_IRQHandler+0x1f0>)
 8107cac:	4293      	cmp	r3, r2
 8107cae:	d12f      	bne.n	8107d10 <HAL_DMA_IRQHandler+0x1f4>
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	681b      	ldr	r3, [r3, #0]
 8107cb6:	f003 0304 	and.w	r3, r3, #4
 8107cba:	2b00      	cmp	r3, #0
 8107cbc:	bf14      	ite	ne
 8107cbe:	2301      	movne	r3, #1
 8107cc0:	2300      	moveq	r3, #0
 8107cc2:	b2db      	uxtb	r3, r3
 8107cc4:	e02e      	b.n	8107d24 <HAL_DMA_IRQHandler+0x208>
 8107cc6:	bf00      	nop
 8107cc8:	10000000 	.word	0x10000000
 8107ccc:	1b4e81b5 	.word	0x1b4e81b5
 8107cd0:	40020010 	.word	0x40020010
 8107cd4:	40020028 	.word	0x40020028
 8107cd8:	40020040 	.word	0x40020040
 8107cdc:	40020058 	.word	0x40020058
 8107ce0:	40020070 	.word	0x40020070
 8107ce4:	40020088 	.word	0x40020088
 8107ce8:	400200a0 	.word	0x400200a0
 8107cec:	400200b8 	.word	0x400200b8
 8107cf0:	40020410 	.word	0x40020410
 8107cf4:	40020428 	.word	0x40020428
 8107cf8:	40020440 	.word	0x40020440
 8107cfc:	40020458 	.word	0x40020458
 8107d00:	40020470 	.word	0x40020470
 8107d04:	40020488 	.word	0x40020488
 8107d08:	400204a0 	.word	0x400204a0
 8107d0c:	400204b8 	.word	0x400204b8
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	681b      	ldr	r3, [r3, #0]
 8107d14:	681b      	ldr	r3, [r3, #0]
 8107d16:	f003 0308 	and.w	r3, r3, #8
 8107d1a:	2b00      	cmp	r3, #0
 8107d1c:	bf14      	ite	ne
 8107d1e:	2301      	movne	r3, #1
 8107d20:	2300      	moveq	r3, #0
 8107d22:	b2db      	uxtb	r3, r3
 8107d24:	2b00      	cmp	r3, #0
 8107d26:	d015      	beq.n	8107d54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8107d28:	687b      	ldr	r3, [r7, #4]
 8107d2a:	681b      	ldr	r3, [r3, #0]
 8107d2c:	681a      	ldr	r2, [r3, #0]
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	681b      	ldr	r3, [r3, #0]
 8107d32:	f022 0204 	bic.w	r2, r2, #4
 8107d36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107d3c:	f003 031f 	and.w	r3, r3, #31
 8107d40:	2208      	movs	r2, #8
 8107d42:	409a      	lsls	r2, r3
 8107d44:	6a3b      	ldr	r3, [r7, #32]
 8107d46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8107d48:	687b      	ldr	r3, [r7, #4]
 8107d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107d4c:	f043 0201 	orr.w	r2, r3, #1
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107d58:	f003 031f 	and.w	r3, r3, #31
 8107d5c:	69ba      	ldr	r2, [r7, #24]
 8107d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8107d62:	f003 0301 	and.w	r3, r3, #1
 8107d66:	2b00      	cmp	r3, #0
 8107d68:	d06e      	beq.n	8107e48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	681b      	ldr	r3, [r3, #0]
 8107d6e:	4a69      	ldr	r2, [pc, #420]	@ (8107f14 <HAL_DMA_IRQHandler+0x3f8>)
 8107d70:	4293      	cmp	r3, r2
 8107d72:	d04a      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	681b      	ldr	r3, [r3, #0]
 8107d78:	4a67      	ldr	r2, [pc, #412]	@ (8107f18 <HAL_DMA_IRQHandler+0x3fc>)
 8107d7a:	4293      	cmp	r3, r2
 8107d7c:	d045      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107d7e:	687b      	ldr	r3, [r7, #4]
 8107d80:	681b      	ldr	r3, [r3, #0]
 8107d82:	4a66      	ldr	r2, [pc, #408]	@ (8107f1c <HAL_DMA_IRQHandler+0x400>)
 8107d84:	4293      	cmp	r3, r2
 8107d86:	d040      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107d88:	687b      	ldr	r3, [r7, #4]
 8107d8a:	681b      	ldr	r3, [r3, #0]
 8107d8c:	4a64      	ldr	r2, [pc, #400]	@ (8107f20 <HAL_DMA_IRQHandler+0x404>)
 8107d8e:	4293      	cmp	r3, r2
 8107d90:	d03b      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107d92:	687b      	ldr	r3, [r7, #4]
 8107d94:	681b      	ldr	r3, [r3, #0]
 8107d96:	4a63      	ldr	r2, [pc, #396]	@ (8107f24 <HAL_DMA_IRQHandler+0x408>)
 8107d98:	4293      	cmp	r3, r2
 8107d9a:	d036      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	681b      	ldr	r3, [r3, #0]
 8107da0:	4a61      	ldr	r2, [pc, #388]	@ (8107f28 <HAL_DMA_IRQHandler+0x40c>)
 8107da2:	4293      	cmp	r3, r2
 8107da4:	d031      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107da6:	687b      	ldr	r3, [r7, #4]
 8107da8:	681b      	ldr	r3, [r3, #0]
 8107daa:	4a60      	ldr	r2, [pc, #384]	@ (8107f2c <HAL_DMA_IRQHandler+0x410>)
 8107dac:	4293      	cmp	r3, r2
 8107dae:	d02c      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107db0:	687b      	ldr	r3, [r7, #4]
 8107db2:	681b      	ldr	r3, [r3, #0]
 8107db4:	4a5e      	ldr	r2, [pc, #376]	@ (8107f30 <HAL_DMA_IRQHandler+0x414>)
 8107db6:	4293      	cmp	r3, r2
 8107db8:	d027      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	681b      	ldr	r3, [r3, #0]
 8107dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8107f34 <HAL_DMA_IRQHandler+0x418>)
 8107dc0:	4293      	cmp	r3, r2
 8107dc2:	d022      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107dc4:	687b      	ldr	r3, [r7, #4]
 8107dc6:	681b      	ldr	r3, [r3, #0]
 8107dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8107f38 <HAL_DMA_IRQHandler+0x41c>)
 8107dca:	4293      	cmp	r3, r2
 8107dcc:	d01d      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	681b      	ldr	r3, [r3, #0]
 8107dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8107f3c <HAL_DMA_IRQHandler+0x420>)
 8107dd4:	4293      	cmp	r3, r2
 8107dd6:	d018      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	681b      	ldr	r3, [r3, #0]
 8107ddc:	4a58      	ldr	r2, [pc, #352]	@ (8107f40 <HAL_DMA_IRQHandler+0x424>)
 8107dde:	4293      	cmp	r3, r2
 8107de0:	d013      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	681b      	ldr	r3, [r3, #0]
 8107de6:	4a57      	ldr	r2, [pc, #348]	@ (8107f44 <HAL_DMA_IRQHandler+0x428>)
 8107de8:	4293      	cmp	r3, r2
 8107dea:	d00e      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	681b      	ldr	r3, [r3, #0]
 8107df0:	4a55      	ldr	r2, [pc, #340]	@ (8107f48 <HAL_DMA_IRQHandler+0x42c>)
 8107df2:	4293      	cmp	r3, r2
 8107df4:	d009      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107df6:	687b      	ldr	r3, [r7, #4]
 8107df8:	681b      	ldr	r3, [r3, #0]
 8107dfa:	4a54      	ldr	r2, [pc, #336]	@ (8107f4c <HAL_DMA_IRQHandler+0x430>)
 8107dfc:	4293      	cmp	r3, r2
 8107dfe:	d004      	beq.n	8107e0a <HAL_DMA_IRQHandler+0x2ee>
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	681b      	ldr	r3, [r3, #0]
 8107e04:	4a52      	ldr	r2, [pc, #328]	@ (8107f50 <HAL_DMA_IRQHandler+0x434>)
 8107e06:	4293      	cmp	r3, r2
 8107e08:	d10a      	bne.n	8107e20 <HAL_DMA_IRQHandler+0x304>
 8107e0a:	687b      	ldr	r3, [r7, #4]
 8107e0c:	681b      	ldr	r3, [r3, #0]
 8107e0e:	695b      	ldr	r3, [r3, #20]
 8107e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107e14:	2b00      	cmp	r3, #0
 8107e16:	bf14      	ite	ne
 8107e18:	2301      	movne	r3, #1
 8107e1a:	2300      	moveq	r3, #0
 8107e1c:	b2db      	uxtb	r3, r3
 8107e1e:	e003      	b.n	8107e28 <HAL_DMA_IRQHandler+0x30c>
 8107e20:	687b      	ldr	r3, [r7, #4]
 8107e22:	681b      	ldr	r3, [r3, #0]
 8107e24:	681b      	ldr	r3, [r3, #0]
 8107e26:	2300      	movs	r3, #0
 8107e28:	2b00      	cmp	r3, #0
 8107e2a:	d00d      	beq.n	8107e48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107e30:	f003 031f 	and.w	r3, r3, #31
 8107e34:	2201      	movs	r2, #1
 8107e36:	409a      	lsls	r2, r3
 8107e38:	6a3b      	ldr	r3, [r7, #32]
 8107e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e40:	f043 0202 	orr.w	r2, r3, #2
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107e4c:	f003 031f 	and.w	r3, r3, #31
 8107e50:	2204      	movs	r2, #4
 8107e52:	409a      	lsls	r2, r3
 8107e54:	69bb      	ldr	r3, [r7, #24]
 8107e56:	4013      	ands	r3, r2
 8107e58:	2b00      	cmp	r3, #0
 8107e5a:	f000 808f 	beq.w	8107f7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	681b      	ldr	r3, [r3, #0]
 8107e62:	4a2c      	ldr	r2, [pc, #176]	@ (8107f14 <HAL_DMA_IRQHandler+0x3f8>)
 8107e64:	4293      	cmp	r3, r2
 8107e66:	d04a      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107e68:	687b      	ldr	r3, [r7, #4]
 8107e6a:	681b      	ldr	r3, [r3, #0]
 8107e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8107f18 <HAL_DMA_IRQHandler+0x3fc>)
 8107e6e:	4293      	cmp	r3, r2
 8107e70:	d045      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107e72:	687b      	ldr	r3, [r7, #4]
 8107e74:	681b      	ldr	r3, [r3, #0]
 8107e76:	4a29      	ldr	r2, [pc, #164]	@ (8107f1c <HAL_DMA_IRQHandler+0x400>)
 8107e78:	4293      	cmp	r3, r2
 8107e7a:	d040      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	681b      	ldr	r3, [r3, #0]
 8107e80:	4a27      	ldr	r2, [pc, #156]	@ (8107f20 <HAL_DMA_IRQHandler+0x404>)
 8107e82:	4293      	cmp	r3, r2
 8107e84:	d03b      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107e86:	687b      	ldr	r3, [r7, #4]
 8107e88:	681b      	ldr	r3, [r3, #0]
 8107e8a:	4a26      	ldr	r2, [pc, #152]	@ (8107f24 <HAL_DMA_IRQHandler+0x408>)
 8107e8c:	4293      	cmp	r3, r2
 8107e8e:	d036      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	681b      	ldr	r3, [r3, #0]
 8107e94:	4a24      	ldr	r2, [pc, #144]	@ (8107f28 <HAL_DMA_IRQHandler+0x40c>)
 8107e96:	4293      	cmp	r3, r2
 8107e98:	d031      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107e9a:	687b      	ldr	r3, [r7, #4]
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	4a23      	ldr	r2, [pc, #140]	@ (8107f2c <HAL_DMA_IRQHandler+0x410>)
 8107ea0:	4293      	cmp	r3, r2
 8107ea2:	d02c      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	681b      	ldr	r3, [r3, #0]
 8107ea8:	4a21      	ldr	r2, [pc, #132]	@ (8107f30 <HAL_DMA_IRQHandler+0x414>)
 8107eaa:	4293      	cmp	r3, r2
 8107eac:	d027      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107eae:	687b      	ldr	r3, [r7, #4]
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	4a20      	ldr	r2, [pc, #128]	@ (8107f34 <HAL_DMA_IRQHandler+0x418>)
 8107eb4:	4293      	cmp	r3, r2
 8107eb6:	d022      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	681b      	ldr	r3, [r3, #0]
 8107ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8107f38 <HAL_DMA_IRQHandler+0x41c>)
 8107ebe:	4293      	cmp	r3, r2
 8107ec0:	d01d      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	681b      	ldr	r3, [r3, #0]
 8107ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8107f3c <HAL_DMA_IRQHandler+0x420>)
 8107ec8:	4293      	cmp	r3, r2
 8107eca:	d018      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	681b      	ldr	r3, [r3, #0]
 8107ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8107f40 <HAL_DMA_IRQHandler+0x424>)
 8107ed2:	4293      	cmp	r3, r2
 8107ed4:	d013      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107ed6:	687b      	ldr	r3, [r7, #4]
 8107ed8:	681b      	ldr	r3, [r3, #0]
 8107eda:	4a1a      	ldr	r2, [pc, #104]	@ (8107f44 <HAL_DMA_IRQHandler+0x428>)
 8107edc:	4293      	cmp	r3, r2
 8107ede:	d00e      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107ee0:	687b      	ldr	r3, [r7, #4]
 8107ee2:	681b      	ldr	r3, [r3, #0]
 8107ee4:	4a18      	ldr	r2, [pc, #96]	@ (8107f48 <HAL_DMA_IRQHandler+0x42c>)
 8107ee6:	4293      	cmp	r3, r2
 8107ee8:	d009      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107eea:	687b      	ldr	r3, [r7, #4]
 8107eec:	681b      	ldr	r3, [r3, #0]
 8107eee:	4a17      	ldr	r2, [pc, #92]	@ (8107f4c <HAL_DMA_IRQHandler+0x430>)
 8107ef0:	4293      	cmp	r3, r2
 8107ef2:	d004      	beq.n	8107efe <HAL_DMA_IRQHandler+0x3e2>
 8107ef4:	687b      	ldr	r3, [r7, #4]
 8107ef6:	681b      	ldr	r3, [r3, #0]
 8107ef8:	4a15      	ldr	r2, [pc, #84]	@ (8107f50 <HAL_DMA_IRQHandler+0x434>)
 8107efa:	4293      	cmp	r3, r2
 8107efc:	d12a      	bne.n	8107f54 <HAL_DMA_IRQHandler+0x438>
 8107efe:	687b      	ldr	r3, [r7, #4]
 8107f00:	681b      	ldr	r3, [r3, #0]
 8107f02:	681b      	ldr	r3, [r3, #0]
 8107f04:	f003 0302 	and.w	r3, r3, #2
 8107f08:	2b00      	cmp	r3, #0
 8107f0a:	bf14      	ite	ne
 8107f0c:	2301      	movne	r3, #1
 8107f0e:	2300      	moveq	r3, #0
 8107f10:	b2db      	uxtb	r3, r3
 8107f12:	e023      	b.n	8107f5c <HAL_DMA_IRQHandler+0x440>
 8107f14:	40020010 	.word	0x40020010
 8107f18:	40020028 	.word	0x40020028
 8107f1c:	40020040 	.word	0x40020040
 8107f20:	40020058 	.word	0x40020058
 8107f24:	40020070 	.word	0x40020070
 8107f28:	40020088 	.word	0x40020088
 8107f2c:	400200a0 	.word	0x400200a0
 8107f30:	400200b8 	.word	0x400200b8
 8107f34:	40020410 	.word	0x40020410
 8107f38:	40020428 	.word	0x40020428
 8107f3c:	40020440 	.word	0x40020440
 8107f40:	40020458 	.word	0x40020458
 8107f44:	40020470 	.word	0x40020470
 8107f48:	40020488 	.word	0x40020488
 8107f4c:	400204a0 	.word	0x400204a0
 8107f50:	400204b8 	.word	0x400204b8
 8107f54:	687b      	ldr	r3, [r7, #4]
 8107f56:	681b      	ldr	r3, [r3, #0]
 8107f58:	681b      	ldr	r3, [r3, #0]
 8107f5a:	2300      	movs	r3, #0
 8107f5c:	2b00      	cmp	r3, #0
 8107f5e:	d00d      	beq.n	8107f7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107f64:	f003 031f 	and.w	r3, r3, #31
 8107f68:	2204      	movs	r2, #4
 8107f6a:	409a      	lsls	r2, r3
 8107f6c:	6a3b      	ldr	r3, [r7, #32]
 8107f6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107f74:	f043 0204 	orr.w	r2, r3, #4
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8107f7c:	687b      	ldr	r3, [r7, #4]
 8107f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107f80:	f003 031f 	and.w	r3, r3, #31
 8107f84:	2210      	movs	r2, #16
 8107f86:	409a      	lsls	r2, r3
 8107f88:	69bb      	ldr	r3, [r7, #24]
 8107f8a:	4013      	ands	r3, r2
 8107f8c:	2b00      	cmp	r3, #0
 8107f8e:	f000 80a6 	beq.w	81080de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	681b      	ldr	r3, [r3, #0]
 8107f96:	4a85      	ldr	r2, [pc, #532]	@ (81081ac <HAL_DMA_IRQHandler+0x690>)
 8107f98:	4293      	cmp	r3, r2
 8107f9a:	d04a      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107f9c:	687b      	ldr	r3, [r7, #4]
 8107f9e:	681b      	ldr	r3, [r3, #0]
 8107fa0:	4a83      	ldr	r2, [pc, #524]	@ (81081b0 <HAL_DMA_IRQHandler+0x694>)
 8107fa2:	4293      	cmp	r3, r2
 8107fa4:	d045      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107fa6:	687b      	ldr	r3, [r7, #4]
 8107fa8:	681b      	ldr	r3, [r3, #0]
 8107faa:	4a82      	ldr	r2, [pc, #520]	@ (81081b4 <HAL_DMA_IRQHandler+0x698>)
 8107fac:	4293      	cmp	r3, r2
 8107fae:	d040      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107fb0:	687b      	ldr	r3, [r7, #4]
 8107fb2:	681b      	ldr	r3, [r3, #0]
 8107fb4:	4a80      	ldr	r2, [pc, #512]	@ (81081b8 <HAL_DMA_IRQHandler+0x69c>)
 8107fb6:	4293      	cmp	r3, r2
 8107fb8:	d03b      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107fba:	687b      	ldr	r3, [r7, #4]
 8107fbc:	681b      	ldr	r3, [r3, #0]
 8107fbe:	4a7f      	ldr	r2, [pc, #508]	@ (81081bc <HAL_DMA_IRQHandler+0x6a0>)
 8107fc0:	4293      	cmp	r3, r2
 8107fc2:	d036      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107fc4:	687b      	ldr	r3, [r7, #4]
 8107fc6:	681b      	ldr	r3, [r3, #0]
 8107fc8:	4a7d      	ldr	r2, [pc, #500]	@ (81081c0 <HAL_DMA_IRQHandler+0x6a4>)
 8107fca:	4293      	cmp	r3, r2
 8107fcc:	d031      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107fce:	687b      	ldr	r3, [r7, #4]
 8107fd0:	681b      	ldr	r3, [r3, #0]
 8107fd2:	4a7c      	ldr	r2, [pc, #496]	@ (81081c4 <HAL_DMA_IRQHandler+0x6a8>)
 8107fd4:	4293      	cmp	r3, r2
 8107fd6:	d02c      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	4a7a      	ldr	r2, [pc, #488]	@ (81081c8 <HAL_DMA_IRQHandler+0x6ac>)
 8107fde:	4293      	cmp	r3, r2
 8107fe0:	d027      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107fe2:	687b      	ldr	r3, [r7, #4]
 8107fe4:	681b      	ldr	r3, [r3, #0]
 8107fe6:	4a79      	ldr	r2, [pc, #484]	@ (81081cc <HAL_DMA_IRQHandler+0x6b0>)
 8107fe8:	4293      	cmp	r3, r2
 8107fea:	d022      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	681b      	ldr	r3, [r3, #0]
 8107ff0:	4a77      	ldr	r2, [pc, #476]	@ (81081d0 <HAL_DMA_IRQHandler+0x6b4>)
 8107ff2:	4293      	cmp	r3, r2
 8107ff4:	d01d      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	681b      	ldr	r3, [r3, #0]
 8107ffa:	4a76      	ldr	r2, [pc, #472]	@ (81081d4 <HAL_DMA_IRQHandler+0x6b8>)
 8107ffc:	4293      	cmp	r3, r2
 8107ffe:	d018      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8108000:	687b      	ldr	r3, [r7, #4]
 8108002:	681b      	ldr	r3, [r3, #0]
 8108004:	4a74      	ldr	r2, [pc, #464]	@ (81081d8 <HAL_DMA_IRQHandler+0x6bc>)
 8108006:	4293      	cmp	r3, r2
 8108008:	d013      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 810800a:	687b      	ldr	r3, [r7, #4]
 810800c:	681b      	ldr	r3, [r3, #0]
 810800e:	4a73      	ldr	r2, [pc, #460]	@ (81081dc <HAL_DMA_IRQHandler+0x6c0>)
 8108010:	4293      	cmp	r3, r2
 8108012:	d00e      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	681b      	ldr	r3, [r3, #0]
 8108018:	4a71      	ldr	r2, [pc, #452]	@ (81081e0 <HAL_DMA_IRQHandler+0x6c4>)
 810801a:	4293      	cmp	r3, r2
 810801c:	d009      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	681b      	ldr	r3, [r3, #0]
 8108022:	4a70      	ldr	r2, [pc, #448]	@ (81081e4 <HAL_DMA_IRQHandler+0x6c8>)
 8108024:	4293      	cmp	r3, r2
 8108026:	d004      	beq.n	8108032 <HAL_DMA_IRQHandler+0x516>
 8108028:	687b      	ldr	r3, [r7, #4]
 810802a:	681b      	ldr	r3, [r3, #0]
 810802c:	4a6e      	ldr	r2, [pc, #440]	@ (81081e8 <HAL_DMA_IRQHandler+0x6cc>)
 810802e:	4293      	cmp	r3, r2
 8108030:	d10a      	bne.n	8108048 <HAL_DMA_IRQHandler+0x52c>
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	681b      	ldr	r3, [r3, #0]
 8108036:	681b      	ldr	r3, [r3, #0]
 8108038:	f003 0308 	and.w	r3, r3, #8
 810803c:	2b00      	cmp	r3, #0
 810803e:	bf14      	ite	ne
 8108040:	2301      	movne	r3, #1
 8108042:	2300      	moveq	r3, #0
 8108044:	b2db      	uxtb	r3, r3
 8108046:	e009      	b.n	810805c <HAL_DMA_IRQHandler+0x540>
 8108048:	687b      	ldr	r3, [r7, #4]
 810804a:	681b      	ldr	r3, [r3, #0]
 810804c:	681b      	ldr	r3, [r3, #0]
 810804e:	f003 0304 	and.w	r3, r3, #4
 8108052:	2b00      	cmp	r3, #0
 8108054:	bf14      	ite	ne
 8108056:	2301      	movne	r3, #1
 8108058:	2300      	moveq	r3, #0
 810805a:	b2db      	uxtb	r3, r3
 810805c:	2b00      	cmp	r3, #0
 810805e:	d03e      	beq.n	81080de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8108060:	687b      	ldr	r3, [r7, #4]
 8108062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108064:	f003 031f 	and.w	r3, r3, #31
 8108068:	2210      	movs	r2, #16
 810806a:	409a      	lsls	r2, r3
 810806c:	6a3b      	ldr	r3, [r7, #32]
 810806e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	681b      	ldr	r3, [r3, #0]
 8108074:	681b      	ldr	r3, [r3, #0]
 8108076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810807a:	2b00      	cmp	r3, #0
 810807c:	d018      	beq.n	81080b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810807e:	687b      	ldr	r3, [r7, #4]
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	681b      	ldr	r3, [r3, #0]
 8108084:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8108088:	2b00      	cmp	r3, #0
 810808a:	d108      	bne.n	810809e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810808c:	687b      	ldr	r3, [r7, #4]
 810808e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108090:	2b00      	cmp	r3, #0
 8108092:	d024      	beq.n	81080de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8108094:	687b      	ldr	r3, [r7, #4]
 8108096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108098:	6878      	ldr	r0, [r7, #4]
 810809a:	4798      	blx	r3
 810809c:	e01f      	b.n	81080de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81080a2:	2b00      	cmp	r3, #0
 81080a4:	d01b      	beq.n	81080de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81080aa:	6878      	ldr	r0, [r7, #4]
 81080ac:	4798      	blx	r3
 81080ae:	e016      	b.n	81080de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	681b      	ldr	r3, [r3, #0]
 81080b4:	681b      	ldr	r3, [r3, #0]
 81080b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81080ba:	2b00      	cmp	r3, #0
 81080bc:	d107      	bne.n	81080ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	681b      	ldr	r3, [r3, #0]
 81080c2:	681a      	ldr	r2, [r3, #0]
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	681b      	ldr	r3, [r3, #0]
 81080c8:	f022 0208 	bic.w	r2, r2, #8
 81080cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81080ce:	687b      	ldr	r3, [r7, #4]
 81080d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81080d2:	2b00      	cmp	r3, #0
 81080d4:	d003      	beq.n	81080de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81080da:	6878      	ldr	r0, [r7, #4]
 81080dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81080de:	687b      	ldr	r3, [r7, #4]
 81080e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81080e2:	f003 031f 	and.w	r3, r3, #31
 81080e6:	2220      	movs	r2, #32
 81080e8:	409a      	lsls	r2, r3
 81080ea:	69bb      	ldr	r3, [r7, #24]
 81080ec:	4013      	ands	r3, r2
 81080ee:	2b00      	cmp	r3, #0
 81080f0:	f000 8110 	beq.w	8108314 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	681b      	ldr	r3, [r3, #0]
 81080f8:	4a2c      	ldr	r2, [pc, #176]	@ (81081ac <HAL_DMA_IRQHandler+0x690>)
 81080fa:	4293      	cmp	r3, r2
 81080fc:	d04a      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 81080fe:	687b      	ldr	r3, [r7, #4]
 8108100:	681b      	ldr	r3, [r3, #0]
 8108102:	4a2b      	ldr	r2, [pc, #172]	@ (81081b0 <HAL_DMA_IRQHandler+0x694>)
 8108104:	4293      	cmp	r3, r2
 8108106:	d045      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108108:	687b      	ldr	r3, [r7, #4]
 810810a:	681b      	ldr	r3, [r3, #0]
 810810c:	4a29      	ldr	r2, [pc, #164]	@ (81081b4 <HAL_DMA_IRQHandler+0x698>)
 810810e:	4293      	cmp	r3, r2
 8108110:	d040      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108112:	687b      	ldr	r3, [r7, #4]
 8108114:	681b      	ldr	r3, [r3, #0]
 8108116:	4a28      	ldr	r2, [pc, #160]	@ (81081b8 <HAL_DMA_IRQHandler+0x69c>)
 8108118:	4293      	cmp	r3, r2
 810811a:	d03b      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 810811c:	687b      	ldr	r3, [r7, #4]
 810811e:	681b      	ldr	r3, [r3, #0]
 8108120:	4a26      	ldr	r2, [pc, #152]	@ (81081bc <HAL_DMA_IRQHandler+0x6a0>)
 8108122:	4293      	cmp	r3, r2
 8108124:	d036      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	681b      	ldr	r3, [r3, #0]
 810812a:	4a25      	ldr	r2, [pc, #148]	@ (81081c0 <HAL_DMA_IRQHandler+0x6a4>)
 810812c:	4293      	cmp	r3, r2
 810812e:	d031      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	681b      	ldr	r3, [r3, #0]
 8108134:	4a23      	ldr	r2, [pc, #140]	@ (81081c4 <HAL_DMA_IRQHandler+0x6a8>)
 8108136:	4293      	cmp	r3, r2
 8108138:	d02c      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 810813a:	687b      	ldr	r3, [r7, #4]
 810813c:	681b      	ldr	r3, [r3, #0]
 810813e:	4a22      	ldr	r2, [pc, #136]	@ (81081c8 <HAL_DMA_IRQHandler+0x6ac>)
 8108140:	4293      	cmp	r3, r2
 8108142:	d027      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	681b      	ldr	r3, [r3, #0]
 8108148:	4a20      	ldr	r2, [pc, #128]	@ (81081cc <HAL_DMA_IRQHandler+0x6b0>)
 810814a:	4293      	cmp	r3, r2
 810814c:	d022      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 810814e:	687b      	ldr	r3, [r7, #4]
 8108150:	681b      	ldr	r3, [r3, #0]
 8108152:	4a1f      	ldr	r2, [pc, #124]	@ (81081d0 <HAL_DMA_IRQHandler+0x6b4>)
 8108154:	4293      	cmp	r3, r2
 8108156:	d01d      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108158:	687b      	ldr	r3, [r7, #4]
 810815a:	681b      	ldr	r3, [r3, #0]
 810815c:	4a1d      	ldr	r2, [pc, #116]	@ (81081d4 <HAL_DMA_IRQHandler+0x6b8>)
 810815e:	4293      	cmp	r3, r2
 8108160:	d018      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	681b      	ldr	r3, [r3, #0]
 8108166:	4a1c      	ldr	r2, [pc, #112]	@ (81081d8 <HAL_DMA_IRQHandler+0x6bc>)
 8108168:	4293      	cmp	r3, r2
 810816a:	d013      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 810816c:	687b      	ldr	r3, [r7, #4]
 810816e:	681b      	ldr	r3, [r3, #0]
 8108170:	4a1a      	ldr	r2, [pc, #104]	@ (81081dc <HAL_DMA_IRQHandler+0x6c0>)
 8108172:	4293      	cmp	r3, r2
 8108174:	d00e      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108176:	687b      	ldr	r3, [r7, #4]
 8108178:	681b      	ldr	r3, [r3, #0]
 810817a:	4a19      	ldr	r2, [pc, #100]	@ (81081e0 <HAL_DMA_IRQHandler+0x6c4>)
 810817c:	4293      	cmp	r3, r2
 810817e:	d009      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 8108180:	687b      	ldr	r3, [r7, #4]
 8108182:	681b      	ldr	r3, [r3, #0]
 8108184:	4a17      	ldr	r2, [pc, #92]	@ (81081e4 <HAL_DMA_IRQHandler+0x6c8>)
 8108186:	4293      	cmp	r3, r2
 8108188:	d004      	beq.n	8108194 <HAL_DMA_IRQHandler+0x678>
 810818a:	687b      	ldr	r3, [r7, #4]
 810818c:	681b      	ldr	r3, [r3, #0]
 810818e:	4a16      	ldr	r2, [pc, #88]	@ (81081e8 <HAL_DMA_IRQHandler+0x6cc>)
 8108190:	4293      	cmp	r3, r2
 8108192:	d12b      	bne.n	81081ec <HAL_DMA_IRQHandler+0x6d0>
 8108194:	687b      	ldr	r3, [r7, #4]
 8108196:	681b      	ldr	r3, [r3, #0]
 8108198:	681b      	ldr	r3, [r3, #0]
 810819a:	f003 0310 	and.w	r3, r3, #16
 810819e:	2b00      	cmp	r3, #0
 81081a0:	bf14      	ite	ne
 81081a2:	2301      	movne	r3, #1
 81081a4:	2300      	moveq	r3, #0
 81081a6:	b2db      	uxtb	r3, r3
 81081a8:	e02a      	b.n	8108200 <HAL_DMA_IRQHandler+0x6e4>
 81081aa:	bf00      	nop
 81081ac:	40020010 	.word	0x40020010
 81081b0:	40020028 	.word	0x40020028
 81081b4:	40020040 	.word	0x40020040
 81081b8:	40020058 	.word	0x40020058
 81081bc:	40020070 	.word	0x40020070
 81081c0:	40020088 	.word	0x40020088
 81081c4:	400200a0 	.word	0x400200a0
 81081c8:	400200b8 	.word	0x400200b8
 81081cc:	40020410 	.word	0x40020410
 81081d0:	40020428 	.word	0x40020428
 81081d4:	40020440 	.word	0x40020440
 81081d8:	40020458 	.word	0x40020458
 81081dc:	40020470 	.word	0x40020470
 81081e0:	40020488 	.word	0x40020488
 81081e4:	400204a0 	.word	0x400204a0
 81081e8:	400204b8 	.word	0x400204b8
 81081ec:	687b      	ldr	r3, [r7, #4]
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	681b      	ldr	r3, [r3, #0]
 81081f2:	f003 0302 	and.w	r3, r3, #2
 81081f6:	2b00      	cmp	r3, #0
 81081f8:	bf14      	ite	ne
 81081fa:	2301      	movne	r3, #1
 81081fc:	2300      	moveq	r3, #0
 81081fe:	b2db      	uxtb	r3, r3
 8108200:	2b00      	cmp	r3, #0
 8108202:	f000 8087 	beq.w	8108314 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810820a:	f003 031f 	and.w	r3, r3, #31
 810820e:	2220      	movs	r2, #32
 8108210:	409a      	lsls	r2, r3
 8108212:	6a3b      	ldr	r3, [r7, #32]
 8108214:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8108216:	687b      	ldr	r3, [r7, #4]
 8108218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 810821c:	b2db      	uxtb	r3, r3
 810821e:	2b04      	cmp	r3, #4
 8108220:	d139      	bne.n	8108296 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8108222:	687b      	ldr	r3, [r7, #4]
 8108224:	681b      	ldr	r3, [r3, #0]
 8108226:	681a      	ldr	r2, [r3, #0]
 8108228:	687b      	ldr	r3, [r7, #4]
 810822a:	681b      	ldr	r3, [r3, #0]
 810822c:	f022 0216 	bic.w	r2, r2, #22
 8108230:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8108232:	687b      	ldr	r3, [r7, #4]
 8108234:	681b      	ldr	r3, [r3, #0]
 8108236:	695a      	ldr	r2, [r3, #20]
 8108238:	687b      	ldr	r3, [r7, #4]
 810823a:	681b      	ldr	r3, [r3, #0]
 810823c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8108240:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108246:	2b00      	cmp	r3, #0
 8108248:	d103      	bne.n	8108252 <HAL_DMA_IRQHandler+0x736>
 810824a:	687b      	ldr	r3, [r7, #4]
 810824c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810824e:	2b00      	cmp	r3, #0
 8108250:	d007      	beq.n	8108262 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	681b      	ldr	r3, [r3, #0]
 8108256:	681a      	ldr	r2, [r3, #0]
 8108258:	687b      	ldr	r3, [r7, #4]
 810825a:	681b      	ldr	r3, [r3, #0]
 810825c:	f022 0208 	bic.w	r2, r2, #8
 8108260:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108266:	f003 031f 	and.w	r3, r3, #31
 810826a:	223f      	movs	r2, #63	@ 0x3f
 810826c:	409a      	lsls	r2, r3
 810826e:	6a3b      	ldr	r3, [r7, #32]
 8108270:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8108272:	687b      	ldr	r3, [r7, #4]
 8108274:	2201      	movs	r2, #1
 8108276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810827a:	687b      	ldr	r3, [r7, #4]
 810827c:	2200      	movs	r2, #0
 810827e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8108282:	687b      	ldr	r3, [r7, #4]
 8108284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108286:	2b00      	cmp	r3, #0
 8108288:	f000 834a 	beq.w	8108920 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810828c:	687b      	ldr	r3, [r7, #4]
 810828e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108290:	6878      	ldr	r0, [r7, #4]
 8108292:	4798      	blx	r3
          }
          return;
 8108294:	e344      	b.n	8108920 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8108296:	687b      	ldr	r3, [r7, #4]
 8108298:	681b      	ldr	r3, [r3, #0]
 810829a:	681b      	ldr	r3, [r3, #0]
 810829c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81082a0:	2b00      	cmp	r3, #0
 81082a2:	d018      	beq.n	81082d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	681b      	ldr	r3, [r3, #0]
 81082a8:	681b      	ldr	r3, [r3, #0]
 81082aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81082ae:	2b00      	cmp	r3, #0
 81082b0:	d108      	bne.n	81082c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81082b2:	687b      	ldr	r3, [r7, #4]
 81082b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81082b6:	2b00      	cmp	r3, #0
 81082b8:	d02c      	beq.n	8108314 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81082be:	6878      	ldr	r0, [r7, #4]
 81082c0:	4798      	blx	r3
 81082c2:	e027      	b.n	8108314 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81082c4:	687b      	ldr	r3, [r7, #4]
 81082c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082c8:	2b00      	cmp	r3, #0
 81082ca:	d023      	beq.n	8108314 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81082d0:	6878      	ldr	r0, [r7, #4]
 81082d2:	4798      	blx	r3
 81082d4:	e01e      	b.n	8108314 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81082d6:	687b      	ldr	r3, [r7, #4]
 81082d8:	681b      	ldr	r3, [r3, #0]
 81082da:	681b      	ldr	r3, [r3, #0]
 81082dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81082e0:	2b00      	cmp	r3, #0
 81082e2:	d10f      	bne.n	8108304 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81082e4:	687b      	ldr	r3, [r7, #4]
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	681a      	ldr	r2, [r3, #0]
 81082ea:	687b      	ldr	r3, [r7, #4]
 81082ec:	681b      	ldr	r3, [r3, #0]
 81082ee:	f022 0210 	bic.w	r2, r2, #16
 81082f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	2201      	movs	r2, #1
 81082f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	2200      	movs	r2, #0
 8108300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108308:	2b00      	cmp	r3, #0
 810830a:	d003      	beq.n	8108314 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108310:	6878      	ldr	r0, [r7, #4]
 8108312:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8108314:	687b      	ldr	r3, [r7, #4]
 8108316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108318:	2b00      	cmp	r3, #0
 810831a:	f000 8306 	beq.w	810892a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810831e:	687b      	ldr	r3, [r7, #4]
 8108320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108322:	f003 0301 	and.w	r3, r3, #1
 8108326:	2b00      	cmp	r3, #0
 8108328:	f000 8088 	beq.w	810843c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	2204      	movs	r2, #4
 8108330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8108334:	687b      	ldr	r3, [r7, #4]
 8108336:	681b      	ldr	r3, [r3, #0]
 8108338:	4a7a      	ldr	r2, [pc, #488]	@ (8108524 <HAL_DMA_IRQHandler+0xa08>)
 810833a:	4293      	cmp	r3, r2
 810833c:	d04a      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 810833e:	687b      	ldr	r3, [r7, #4]
 8108340:	681b      	ldr	r3, [r3, #0]
 8108342:	4a79      	ldr	r2, [pc, #484]	@ (8108528 <HAL_DMA_IRQHandler+0xa0c>)
 8108344:	4293      	cmp	r3, r2
 8108346:	d045      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	681b      	ldr	r3, [r3, #0]
 810834c:	4a77      	ldr	r2, [pc, #476]	@ (810852c <HAL_DMA_IRQHandler+0xa10>)
 810834e:	4293      	cmp	r3, r2
 8108350:	d040      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	681b      	ldr	r3, [r3, #0]
 8108356:	4a76      	ldr	r2, [pc, #472]	@ (8108530 <HAL_DMA_IRQHandler+0xa14>)
 8108358:	4293      	cmp	r3, r2
 810835a:	d03b      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 810835c:	687b      	ldr	r3, [r7, #4]
 810835e:	681b      	ldr	r3, [r3, #0]
 8108360:	4a74      	ldr	r2, [pc, #464]	@ (8108534 <HAL_DMA_IRQHandler+0xa18>)
 8108362:	4293      	cmp	r3, r2
 8108364:	d036      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 8108366:	687b      	ldr	r3, [r7, #4]
 8108368:	681b      	ldr	r3, [r3, #0]
 810836a:	4a73      	ldr	r2, [pc, #460]	@ (8108538 <HAL_DMA_IRQHandler+0xa1c>)
 810836c:	4293      	cmp	r3, r2
 810836e:	d031      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 8108370:	687b      	ldr	r3, [r7, #4]
 8108372:	681b      	ldr	r3, [r3, #0]
 8108374:	4a71      	ldr	r2, [pc, #452]	@ (810853c <HAL_DMA_IRQHandler+0xa20>)
 8108376:	4293      	cmp	r3, r2
 8108378:	d02c      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	681b      	ldr	r3, [r3, #0]
 810837e:	4a70      	ldr	r2, [pc, #448]	@ (8108540 <HAL_DMA_IRQHandler+0xa24>)
 8108380:	4293      	cmp	r3, r2
 8108382:	d027      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 8108384:	687b      	ldr	r3, [r7, #4]
 8108386:	681b      	ldr	r3, [r3, #0]
 8108388:	4a6e      	ldr	r2, [pc, #440]	@ (8108544 <HAL_DMA_IRQHandler+0xa28>)
 810838a:	4293      	cmp	r3, r2
 810838c:	d022      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 810838e:	687b      	ldr	r3, [r7, #4]
 8108390:	681b      	ldr	r3, [r3, #0]
 8108392:	4a6d      	ldr	r2, [pc, #436]	@ (8108548 <HAL_DMA_IRQHandler+0xa2c>)
 8108394:	4293      	cmp	r3, r2
 8108396:	d01d      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 8108398:	687b      	ldr	r3, [r7, #4]
 810839a:	681b      	ldr	r3, [r3, #0]
 810839c:	4a6b      	ldr	r2, [pc, #428]	@ (810854c <HAL_DMA_IRQHandler+0xa30>)
 810839e:	4293      	cmp	r3, r2
 81083a0:	d018      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 81083a2:	687b      	ldr	r3, [r7, #4]
 81083a4:	681b      	ldr	r3, [r3, #0]
 81083a6:	4a6a      	ldr	r2, [pc, #424]	@ (8108550 <HAL_DMA_IRQHandler+0xa34>)
 81083a8:	4293      	cmp	r3, r2
 81083aa:	d013      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 81083ac:	687b      	ldr	r3, [r7, #4]
 81083ae:	681b      	ldr	r3, [r3, #0]
 81083b0:	4a68      	ldr	r2, [pc, #416]	@ (8108554 <HAL_DMA_IRQHandler+0xa38>)
 81083b2:	4293      	cmp	r3, r2
 81083b4:	d00e      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	681b      	ldr	r3, [r3, #0]
 81083ba:	4a67      	ldr	r2, [pc, #412]	@ (8108558 <HAL_DMA_IRQHandler+0xa3c>)
 81083bc:	4293      	cmp	r3, r2
 81083be:	d009      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 81083c0:	687b      	ldr	r3, [r7, #4]
 81083c2:	681b      	ldr	r3, [r3, #0]
 81083c4:	4a65      	ldr	r2, [pc, #404]	@ (810855c <HAL_DMA_IRQHandler+0xa40>)
 81083c6:	4293      	cmp	r3, r2
 81083c8:	d004      	beq.n	81083d4 <HAL_DMA_IRQHandler+0x8b8>
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	681b      	ldr	r3, [r3, #0]
 81083ce:	4a64      	ldr	r2, [pc, #400]	@ (8108560 <HAL_DMA_IRQHandler+0xa44>)
 81083d0:	4293      	cmp	r3, r2
 81083d2:	d108      	bne.n	81083e6 <HAL_DMA_IRQHandler+0x8ca>
 81083d4:	687b      	ldr	r3, [r7, #4]
 81083d6:	681b      	ldr	r3, [r3, #0]
 81083d8:	681a      	ldr	r2, [r3, #0]
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	681b      	ldr	r3, [r3, #0]
 81083de:	f022 0201 	bic.w	r2, r2, #1
 81083e2:	601a      	str	r2, [r3, #0]
 81083e4:	e007      	b.n	81083f6 <HAL_DMA_IRQHandler+0x8da>
 81083e6:	687b      	ldr	r3, [r7, #4]
 81083e8:	681b      	ldr	r3, [r3, #0]
 81083ea:	681a      	ldr	r2, [r3, #0]
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	681b      	ldr	r3, [r3, #0]
 81083f0:	f022 0201 	bic.w	r2, r2, #1
 81083f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81083f6:	68fb      	ldr	r3, [r7, #12]
 81083f8:	3301      	adds	r3, #1
 81083fa:	60fb      	str	r3, [r7, #12]
 81083fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81083fe:	429a      	cmp	r2, r3
 8108400:	d307      	bcc.n	8108412 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8108402:	687b      	ldr	r3, [r7, #4]
 8108404:	681b      	ldr	r3, [r3, #0]
 8108406:	681b      	ldr	r3, [r3, #0]
 8108408:	f003 0301 	and.w	r3, r3, #1
 810840c:	2b00      	cmp	r3, #0
 810840e:	d1f2      	bne.n	81083f6 <HAL_DMA_IRQHandler+0x8da>
 8108410:	e000      	b.n	8108414 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8108412:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8108414:	687b      	ldr	r3, [r7, #4]
 8108416:	681b      	ldr	r3, [r3, #0]
 8108418:	681b      	ldr	r3, [r3, #0]
 810841a:	f003 0301 	and.w	r3, r3, #1
 810841e:	2b00      	cmp	r3, #0
 8108420:	d004      	beq.n	810842c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8108422:	687b      	ldr	r3, [r7, #4]
 8108424:	2203      	movs	r2, #3
 8108426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 810842a:	e003      	b.n	8108434 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	2201      	movs	r2, #1
 8108430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	2200      	movs	r2, #0
 8108438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108440:	2b00      	cmp	r3, #0
 8108442:	f000 8272 	beq.w	810892a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8108446:	687b      	ldr	r3, [r7, #4]
 8108448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810844a:	6878      	ldr	r0, [r7, #4]
 810844c:	4798      	blx	r3
 810844e:	e26c      	b.n	810892a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8108450:	687b      	ldr	r3, [r7, #4]
 8108452:	681b      	ldr	r3, [r3, #0]
 8108454:	4a43      	ldr	r2, [pc, #268]	@ (8108564 <HAL_DMA_IRQHandler+0xa48>)
 8108456:	4293      	cmp	r3, r2
 8108458:	d022      	beq.n	81084a0 <HAL_DMA_IRQHandler+0x984>
 810845a:	687b      	ldr	r3, [r7, #4]
 810845c:	681b      	ldr	r3, [r3, #0]
 810845e:	4a42      	ldr	r2, [pc, #264]	@ (8108568 <HAL_DMA_IRQHandler+0xa4c>)
 8108460:	4293      	cmp	r3, r2
 8108462:	d01d      	beq.n	81084a0 <HAL_DMA_IRQHandler+0x984>
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	681b      	ldr	r3, [r3, #0]
 8108468:	4a40      	ldr	r2, [pc, #256]	@ (810856c <HAL_DMA_IRQHandler+0xa50>)
 810846a:	4293      	cmp	r3, r2
 810846c:	d018      	beq.n	81084a0 <HAL_DMA_IRQHandler+0x984>
 810846e:	687b      	ldr	r3, [r7, #4]
 8108470:	681b      	ldr	r3, [r3, #0]
 8108472:	4a3f      	ldr	r2, [pc, #252]	@ (8108570 <HAL_DMA_IRQHandler+0xa54>)
 8108474:	4293      	cmp	r3, r2
 8108476:	d013      	beq.n	81084a0 <HAL_DMA_IRQHandler+0x984>
 8108478:	687b      	ldr	r3, [r7, #4]
 810847a:	681b      	ldr	r3, [r3, #0]
 810847c:	4a3d      	ldr	r2, [pc, #244]	@ (8108574 <HAL_DMA_IRQHandler+0xa58>)
 810847e:	4293      	cmp	r3, r2
 8108480:	d00e      	beq.n	81084a0 <HAL_DMA_IRQHandler+0x984>
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	681b      	ldr	r3, [r3, #0]
 8108486:	4a3c      	ldr	r2, [pc, #240]	@ (8108578 <HAL_DMA_IRQHandler+0xa5c>)
 8108488:	4293      	cmp	r3, r2
 810848a:	d009      	beq.n	81084a0 <HAL_DMA_IRQHandler+0x984>
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	681b      	ldr	r3, [r3, #0]
 8108490:	4a3a      	ldr	r2, [pc, #232]	@ (810857c <HAL_DMA_IRQHandler+0xa60>)
 8108492:	4293      	cmp	r3, r2
 8108494:	d004      	beq.n	81084a0 <HAL_DMA_IRQHandler+0x984>
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	681b      	ldr	r3, [r3, #0]
 810849a:	4a39      	ldr	r2, [pc, #228]	@ (8108580 <HAL_DMA_IRQHandler+0xa64>)
 810849c:	4293      	cmp	r3, r2
 810849e:	d101      	bne.n	81084a4 <HAL_DMA_IRQHandler+0x988>
 81084a0:	2301      	movs	r3, #1
 81084a2:	e000      	b.n	81084a6 <HAL_DMA_IRQHandler+0x98a>
 81084a4:	2300      	movs	r3, #0
 81084a6:	2b00      	cmp	r3, #0
 81084a8:	f000 823f 	beq.w	810892a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81084ac:	687b      	ldr	r3, [r7, #4]
 81084ae:	681b      	ldr	r3, [r3, #0]
 81084b0:	681b      	ldr	r3, [r3, #0]
 81084b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81084b8:	f003 031f 	and.w	r3, r3, #31
 81084bc:	2204      	movs	r2, #4
 81084be:	409a      	lsls	r2, r3
 81084c0:	697b      	ldr	r3, [r7, #20]
 81084c2:	4013      	ands	r3, r2
 81084c4:	2b00      	cmp	r3, #0
 81084c6:	f000 80cd 	beq.w	8108664 <HAL_DMA_IRQHandler+0xb48>
 81084ca:	693b      	ldr	r3, [r7, #16]
 81084cc:	f003 0304 	and.w	r3, r3, #4
 81084d0:	2b00      	cmp	r3, #0
 81084d2:	f000 80c7 	beq.w	8108664 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81084d6:	687b      	ldr	r3, [r7, #4]
 81084d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81084da:	f003 031f 	and.w	r3, r3, #31
 81084de:	2204      	movs	r2, #4
 81084e0:	409a      	lsls	r2, r3
 81084e2:	69fb      	ldr	r3, [r7, #28]
 81084e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81084e6:	693b      	ldr	r3, [r7, #16]
 81084e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81084ec:	2b00      	cmp	r3, #0
 81084ee:	d049      	beq.n	8108584 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81084f0:	693b      	ldr	r3, [r7, #16]
 81084f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81084f6:	2b00      	cmp	r3, #0
 81084f8:	d109      	bne.n	810850e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81084fa:	687b      	ldr	r3, [r7, #4]
 81084fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81084fe:	2b00      	cmp	r3, #0
 8108500:	f000 8210 	beq.w	8108924 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8108504:	687b      	ldr	r3, [r7, #4]
 8108506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108508:	6878      	ldr	r0, [r7, #4]
 810850a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810850c:	e20a      	b.n	8108924 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108512:	2b00      	cmp	r3, #0
 8108514:	f000 8206 	beq.w	8108924 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8108518:	687b      	ldr	r3, [r7, #4]
 810851a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810851c:	6878      	ldr	r0, [r7, #4]
 810851e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108520:	e200      	b.n	8108924 <HAL_DMA_IRQHandler+0xe08>
 8108522:	bf00      	nop
 8108524:	40020010 	.word	0x40020010
 8108528:	40020028 	.word	0x40020028
 810852c:	40020040 	.word	0x40020040
 8108530:	40020058 	.word	0x40020058
 8108534:	40020070 	.word	0x40020070
 8108538:	40020088 	.word	0x40020088
 810853c:	400200a0 	.word	0x400200a0
 8108540:	400200b8 	.word	0x400200b8
 8108544:	40020410 	.word	0x40020410
 8108548:	40020428 	.word	0x40020428
 810854c:	40020440 	.word	0x40020440
 8108550:	40020458 	.word	0x40020458
 8108554:	40020470 	.word	0x40020470
 8108558:	40020488 	.word	0x40020488
 810855c:	400204a0 	.word	0x400204a0
 8108560:	400204b8 	.word	0x400204b8
 8108564:	58025408 	.word	0x58025408
 8108568:	5802541c 	.word	0x5802541c
 810856c:	58025430 	.word	0x58025430
 8108570:	58025444 	.word	0x58025444
 8108574:	58025458 	.word	0x58025458
 8108578:	5802546c 	.word	0x5802546c
 810857c:	58025480 	.word	0x58025480
 8108580:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8108584:	693b      	ldr	r3, [r7, #16]
 8108586:	f003 0320 	and.w	r3, r3, #32
 810858a:	2b00      	cmp	r3, #0
 810858c:	d160      	bne.n	8108650 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810858e:	687b      	ldr	r3, [r7, #4]
 8108590:	681b      	ldr	r3, [r3, #0]
 8108592:	4a7f      	ldr	r2, [pc, #508]	@ (8108790 <HAL_DMA_IRQHandler+0xc74>)
 8108594:	4293      	cmp	r3, r2
 8108596:	d04a      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 8108598:	687b      	ldr	r3, [r7, #4]
 810859a:	681b      	ldr	r3, [r3, #0]
 810859c:	4a7d      	ldr	r2, [pc, #500]	@ (8108794 <HAL_DMA_IRQHandler+0xc78>)
 810859e:	4293      	cmp	r3, r2
 81085a0:	d045      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085a2:	687b      	ldr	r3, [r7, #4]
 81085a4:	681b      	ldr	r3, [r3, #0]
 81085a6:	4a7c      	ldr	r2, [pc, #496]	@ (8108798 <HAL_DMA_IRQHandler+0xc7c>)
 81085a8:	4293      	cmp	r3, r2
 81085aa:	d040      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	681b      	ldr	r3, [r3, #0]
 81085b0:	4a7a      	ldr	r2, [pc, #488]	@ (810879c <HAL_DMA_IRQHandler+0xc80>)
 81085b2:	4293      	cmp	r3, r2
 81085b4:	d03b      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085b6:	687b      	ldr	r3, [r7, #4]
 81085b8:	681b      	ldr	r3, [r3, #0]
 81085ba:	4a79      	ldr	r2, [pc, #484]	@ (81087a0 <HAL_DMA_IRQHandler+0xc84>)
 81085bc:	4293      	cmp	r3, r2
 81085be:	d036      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085c0:	687b      	ldr	r3, [r7, #4]
 81085c2:	681b      	ldr	r3, [r3, #0]
 81085c4:	4a77      	ldr	r2, [pc, #476]	@ (81087a4 <HAL_DMA_IRQHandler+0xc88>)
 81085c6:	4293      	cmp	r3, r2
 81085c8:	d031      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085ca:	687b      	ldr	r3, [r7, #4]
 81085cc:	681b      	ldr	r3, [r3, #0]
 81085ce:	4a76      	ldr	r2, [pc, #472]	@ (81087a8 <HAL_DMA_IRQHandler+0xc8c>)
 81085d0:	4293      	cmp	r3, r2
 81085d2:	d02c      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085d4:	687b      	ldr	r3, [r7, #4]
 81085d6:	681b      	ldr	r3, [r3, #0]
 81085d8:	4a74      	ldr	r2, [pc, #464]	@ (81087ac <HAL_DMA_IRQHandler+0xc90>)
 81085da:	4293      	cmp	r3, r2
 81085dc:	d027      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	681b      	ldr	r3, [r3, #0]
 81085e2:	4a73      	ldr	r2, [pc, #460]	@ (81087b0 <HAL_DMA_IRQHandler+0xc94>)
 81085e4:	4293      	cmp	r3, r2
 81085e6:	d022      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085e8:	687b      	ldr	r3, [r7, #4]
 81085ea:	681b      	ldr	r3, [r3, #0]
 81085ec:	4a71      	ldr	r2, [pc, #452]	@ (81087b4 <HAL_DMA_IRQHandler+0xc98>)
 81085ee:	4293      	cmp	r3, r2
 81085f0:	d01d      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085f2:	687b      	ldr	r3, [r7, #4]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	4a70      	ldr	r2, [pc, #448]	@ (81087b8 <HAL_DMA_IRQHandler+0xc9c>)
 81085f8:	4293      	cmp	r3, r2
 81085fa:	d018      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 81085fc:	687b      	ldr	r3, [r7, #4]
 81085fe:	681b      	ldr	r3, [r3, #0]
 8108600:	4a6e      	ldr	r2, [pc, #440]	@ (81087bc <HAL_DMA_IRQHandler+0xca0>)
 8108602:	4293      	cmp	r3, r2
 8108604:	d013      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 8108606:	687b      	ldr	r3, [r7, #4]
 8108608:	681b      	ldr	r3, [r3, #0]
 810860a:	4a6d      	ldr	r2, [pc, #436]	@ (81087c0 <HAL_DMA_IRQHandler+0xca4>)
 810860c:	4293      	cmp	r3, r2
 810860e:	d00e      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 8108610:	687b      	ldr	r3, [r7, #4]
 8108612:	681b      	ldr	r3, [r3, #0]
 8108614:	4a6b      	ldr	r2, [pc, #428]	@ (81087c4 <HAL_DMA_IRQHandler+0xca8>)
 8108616:	4293      	cmp	r3, r2
 8108618:	d009      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 810861a:	687b      	ldr	r3, [r7, #4]
 810861c:	681b      	ldr	r3, [r3, #0]
 810861e:	4a6a      	ldr	r2, [pc, #424]	@ (81087c8 <HAL_DMA_IRQHandler+0xcac>)
 8108620:	4293      	cmp	r3, r2
 8108622:	d004      	beq.n	810862e <HAL_DMA_IRQHandler+0xb12>
 8108624:	687b      	ldr	r3, [r7, #4]
 8108626:	681b      	ldr	r3, [r3, #0]
 8108628:	4a68      	ldr	r2, [pc, #416]	@ (81087cc <HAL_DMA_IRQHandler+0xcb0>)
 810862a:	4293      	cmp	r3, r2
 810862c:	d108      	bne.n	8108640 <HAL_DMA_IRQHandler+0xb24>
 810862e:	687b      	ldr	r3, [r7, #4]
 8108630:	681b      	ldr	r3, [r3, #0]
 8108632:	681a      	ldr	r2, [r3, #0]
 8108634:	687b      	ldr	r3, [r7, #4]
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	f022 0208 	bic.w	r2, r2, #8
 810863c:	601a      	str	r2, [r3, #0]
 810863e:	e007      	b.n	8108650 <HAL_DMA_IRQHandler+0xb34>
 8108640:	687b      	ldr	r3, [r7, #4]
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	681a      	ldr	r2, [r3, #0]
 8108646:	687b      	ldr	r3, [r7, #4]
 8108648:	681b      	ldr	r3, [r3, #0]
 810864a:	f022 0204 	bic.w	r2, r2, #4
 810864e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108654:	2b00      	cmp	r3, #0
 8108656:	f000 8165 	beq.w	8108924 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810865a:	687b      	ldr	r3, [r7, #4]
 810865c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810865e:	6878      	ldr	r0, [r7, #4]
 8108660:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108662:	e15f      	b.n	8108924 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108668:	f003 031f 	and.w	r3, r3, #31
 810866c:	2202      	movs	r2, #2
 810866e:	409a      	lsls	r2, r3
 8108670:	697b      	ldr	r3, [r7, #20]
 8108672:	4013      	ands	r3, r2
 8108674:	2b00      	cmp	r3, #0
 8108676:	f000 80c5 	beq.w	8108804 <HAL_DMA_IRQHandler+0xce8>
 810867a:	693b      	ldr	r3, [r7, #16]
 810867c:	f003 0302 	and.w	r3, r3, #2
 8108680:	2b00      	cmp	r3, #0
 8108682:	f000 80bf 	beq.w	8108804 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8108686:	687b      	ldr	r3, [r7, #4]
 8108688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810868a:	f003 031f 	and.w	r3, r3, #31
 810868e:	2202      	movs	r2, #2
 8108690:	409a      	lsls	r2, r3
 8108692:	69fb      	ldr	r3, [r7, #28]
 8108694:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108696:	693b      	ldr	r3, [r7, #16]
 8108698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810869c:	2b00      	cmp	r3, #0
 810869e:	d018      	beq.n	81086d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81086a0:	693b      	ldr	r3, [r7, #16]
 81086a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81086a6:	2b00      	cmp	r3, #0
 81086a8:	d109      	bne.n	81086be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81086aa:	687b      	ldr	r3, [r7, #4]
 81086ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81086ae:	2b00      	cmp	r3, #0
 81086b0:	f000 813a 	beq.w	8108928 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81086b4:	687b      	ldr	r3, [r7, #4]
 81086b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81086b8:	6878      	ldr	r0, [r7, #4]
 81086ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81086bc:	e134      	b.n	8108928 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81086be:	687b      	ldr	r3, [r7, #4]
 81086c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086c2:	2b00      	cmp	r3, #0
 81086c4:	f000 8130 	beq.w	8108928 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81086c8:	687b      	ldr	r3, [r7, #4]
 81086ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81086cc:	6878      	ldr	r0, [r7, #4]
 81086ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81086d0:	e12a      	b.n	8108928 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81086d2:	693b      	ldr	r3, [r7, #16]
 81086d4:	f003 0320 	and.w	r3, r3, #32
 81086d8:	2b00      	cmp	r3, #0
 81086da:	f040 8089 	bne.w	81087f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81086de:	687b      	ldr	r3, [r7, #4]
 81086e0:	681b      	ldr	r3, [r3, #0]
 81086e2:	4a2b      	ldr	r2, [pc, #172]	@ (8108790 <HAL_DMA_IRQHandler+0xc74>)
 81086e4:	4293      	cmp	r3, r2
 81086e6:	d04a      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 81086e8:	687b      	ldr	r3, [r7, #4]
 81086ea:	681b      	ldr	r3, [r3, #0]
 81086ec:	4a29      	ldr	r2, [pc, #164]	@ (8108794 <HAL_DMA_IRQHandler+0xc78>)
 81086ee:	4293      	cmp	r3, r2
 81086f0:	d045      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 81086f2:	687b      	ldr	r3, [r7, #4]
 81086f4:	681b      	ldr	r3, [r3, #0]
 81086f6:	4a28      	ldr	r2, [pc, #160]	@ (8108798 <HAL_DMA_IRQHandler+0xc7c>)
 81086f8:	4293      	cmp	r3, r2
 81086fa:	d040      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	4a26      	ldr	r2, [pc, #152]	@ (810879c <HAL_DMA_IRQHandler+0xc80>)
 8108702:	4293      	cmp	r3, r2
 8108704:	d03b      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 8108706:	687b      	ldr	r3, [r7, #4]
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	4a25      	ldr	r2, [pc, #148]	@ (81087a0 <HAL_DMA_IRQHandler+0xc84>)
 810870c:	4293      	cmp	r3, r2
 810870e:	d036      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 8108710:	687b      	ldr	r3, [r7, #4]
 8108712:	681b      	ldr	r3, [r3, #0]
 8108714:	4a23      	ldr	r2, [pc, #140]	@ (81087a4 <HAL_DMA_IRQHandler+0xc88>)
 8108716:	4293      	cmp	r3, r2
 8108718:	d031      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 810871a:	687b      	ldr	r3, [r7, #4]
 810871c:	681b      	ldr	r3, [r3, #0]
 810871e:	4a22      	ldr	r2, [pc, #136]	@ (81087a8 <HAL_DMA_IRQHandler+0xc8c>)
 8108720:	4293      	cmp	r3, r2
 8108722:	d02c      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	4a20      	ldr	r2, [pc, #128]	@ (81087ac <HAL_DMA_IRQHandler+0xc90>)
 810872a:	4293      	cmp	r3, r2
 810872c:	d027      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	681b      	ldr	r3, [r3, #0]
 8108732:	4a1f      	ldr	r2, [pc, #124]	@ (81087b0 <HAL_DMA_IRQHandler+0xc94>)
 8108734:	4293      	cmp	r3, r2
 8108736:	d022      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	681b      	ldr	r3, [r3, #0]
 810873c:	4a1d      	ldr	r2, [pc, #116]	@ (81087b4 <HAL_DMA_IRQHandler+0xc98>)
 810873e:	4293      	cmp	r3, r2
 8108740:	d01d      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 8108742:	687b      	ldr	r3, [r7, #4]
 8108744:	681b      	ldr	r3, [r3, #0]
 8108746:	4a1c      	ldr	r2, [pc, #112]	@ (81087b8 <HAL_DMA_IRQHandler+0xc9c>)
 8108748:	4293      	cmp	r3, r2
 810874a:	d018      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 810874c:	687b      	ldr	r3, [r7, #4]
 810874e:	681b      	ldr	r3, [r3, #0]
 8108750:	4a1a      	ldr	r2, [pc, #104]	@ (81087bc <HAL_DMA_IRQHandler+0xca0>)
 8108752:	4293      	cmp	r3, r2
 8108754:	d013      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 8108756:	687b      	ldr	r3, [r7, #4]
 8108758:	681b      	ldr	r3, [r3, #0]
 810875a:	4a19      	ldr	r2, [pc, #100]	@ (81087c0 <HAL_DMA_IRQHandler+0xca4>)
 810875c:	4293      	cmp	r3, r2
 810875e:	d00e      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	681b      	ldr	r3, [r3, #0]
 8108764:	4a17      	ldr	r2, [pc, #92]	@ (81087c4 <HAL_DMA_IRQHandler+0xca8>)
 8108766:	4293      	cmp	r3, r2
 8108768:	d009      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 810876a:	687b      	ldr	r3, [r7, #4]
 810876c:	681b      	ldr	r3, [r3, #0]
 810876e:	4a16      	ldr	r2, [pc, #88]	@ (81087c8 <HAL_DMA_IRQHandler+0xcac>)
 8108770:	4293      	cmp	r3, r2
 8108772:	d004      	beq.n	810877e <HAL_DMA_IRQHandler+0xc62>
 8108774:	687b      	ldr	r3, [r7, #4]
 8108776:	681b      	ldr	r3, [r3, #0]
 8108778:	4a14      	ldr	r2, [pc, #80]	@ (81087cc <HAL_DMA_IRQHandler+0xcb0>)
 810877a:	4293      	cmp	r3, r2
 810877c:	d128      	bne.n	81087d0 <HAL_DMA_IRQHandler+0xcb4>
 810877e:	687b      	ldr	r3, [r7, #4]
 8108780:	681b      	ldr	r3, [r3, #0]
 8108782:	681a      	ldr	r2, [r3, #0]
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	681b      	ldr	r3, [r3, #0]
 8108788:	f022 0214 	bic.w	r2, r2, #20
 810878c:	601a      	str	r2, [r3, #0]
 810878e:	e027      	b.n	81087e0 <HAL_DMA_IRQHandler+0xcc4>
 8108790:	40020010 	.word	0x40020010
 8108794:	40020028 	.word	0x40020028
 8108798:	40020040 	.word	0x40020040
 810879c:	40020058 	.word	0x40020058
 81087a0:	40020070 	.word	0x40020070
 81087a4:	40020088 	.word	0x40020088
 81087a8:	400200a0 	.word	0x400200a0
 81087ac:	400200b8 	.word	0x400200b8
 81087b0:	40020410 	.word	0x40020410
 81087b4:	40020428 	.word	0x40020428
 81087b8:	40020440 	.word	0x40020440
 81087bc:	40020458 	.word	0x40020458
 81087c0:	40020470 	.word	0x40020470
 81087c4:	40020488 	.word	0x40020488
 81087c8:	400204a0 	.word	0x400204a0
 81087cc:	400204b8 	.word	0x400204b8
 81087d0:	687b      	ldr	r3, [r7, #4]
 81087d2:	681b      	ldr	r3, [r3, #0]
 81087d4:	681a      	ldr	r2, [r3, #0]
 81087d6:	687b      	ldr	r3, [r7, #4]
 81087d8:	681b      	ldr	r3, [r3, #0]
 81087da:	f022 020a 	bic.w	r2, r2, #10
 81087de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81087e0:	687b      	ldr	r3, [r7, #4]
 81087e2:	2201      	movs	r2, #1
 81087e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81087e8:	687b      	ldr	r3, [r7, #4]
 81087ea:	2200      	movs	r2, #0
 81087ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 81087f0:	687b      	ldr	r3, [r7, #4]
 81087f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81087f4:	2b00      	cmp	r3, #0
 81087f6:	f000 8097 	beq.w	8108928 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81087fa:	687b      	ldr	r3, [r7, #4]
 81087fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81087fe:	6878      	ldr	r0, [r7, #4]
 8108800:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108802:	e091      	b.n	8108928 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8108804:	687b      	ldr	r3, [r7, #4]
 8108806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108808:	f003 031f 	and.w	r3, r3, #31
 810880c:	2208      	movs	r2, #8
 810880e:	409a      	lsls	r2, r3
 8108810:	697b      	ldr	r3, [r7, #20]
 8108812:	4013      	ands	r3, r2
 8108814:	2b00      	cmp	r3, #0
 8108816:	f000 8088 	beq.w	810892a <HAL_DMA_IRQHandler+0xe0e>
 810881a:	693b      	ldr	r3, [r7, #16]
 810881c:	f003 0308 	and.w	r3, r3, #8
 8108820:	2b00      	cmp	r3, #0
 8108822:	f000 8082 	beq.w	810892a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8108826:	687b      	ldr	r3, [r7, #4]
 8108828:	681b      	ldr	r3, [r3, #0]
 810882a:	4a41      	ldr	r2, [pc, #260]	@ (8108930 <HAL_DMA_IRQHandler+0xe14>)
 810882c:	4293      	cmp	r3, r2
 810882e:	d04a      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 8108830:	687b      	ldr	r3, [r7, #4]
 8108832:	681b      	ldr	r3, [r3, #0]
 8108834:	4a3f      	ldr	r2, [pc, #252]	@ (8108934 <HAL_DMA_IRQHandler+0xe18>)
 8108836:	4293      	cmp	r3, r2
 8108838:	d045      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 810883a:	687b      	ldr	r3, [r7, #4]
 810883c:	681b      	ldr	r3, [r3, #0]
 810883e:	4a3e      	ldr	r2, [pc, #248]	@ (8108938 <HAL_DMA_IRQHandler+0xe1c>)
 8108840:	4293      	cmp	r3, r2
 8108842:	d040      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	681b      	ldr	r3, [r3, #0]
 8108848:	4a3c      	ldr	r2, [pc, #240]	@ (810893c <HAL_DMA_IRQHandler+0xe20>)
 810884a:	4293      	cmp	r3, r2
 810884c:	d03b      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	681b      	ldr	r3, [r3, #0]
 8108852:	4a3b      	ldr	r2, [pc, #236]	@ (8108940 <HAL_DMA_IRQHandler+0xe24>)
 8108854:	4293      	cmp	r3, r2
 8108856:	d036      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 8108858:	687b      	ldr	r3, [r7, #4]
 810885a:	681b      	ldr	r3, [r3, #0]
 810885c:	4a39      	ldr	r2, [pc, #228]	@ (8108944 <HAL_DMA_IRQHandler+0xe28>)
 810885e:	4293      	cmp	r3, r2
 8108860:	d031      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 8108862:	687b      	ldr	r3, [r7, #4]
 8108864:	681b      	ldr	r3, [r3, #0]
 8108866:	4a38      	ldr	r2, [pc, #224]	@ (8108948 <HAL_DMA_IRQHandler+0xe2c>)
 8108868:	4293      	cmp	r3, r2
 810886a:	d02c      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 810886c:	687b      	ldr	r3, [r7, #4]
 810886e:	681b      	ldr	r3, [r3, #0]
 8108870:	4a36      	ldr	r2, [pc, #216]	@ (810894c <HAL_DMA_IRQHandler+0xe30>)
 8108872:	4293      	cmp	r3, r2
 8108874:	d027      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 8108876:	687b      	ldr	r3, [r7, #4]
 8108878:	681b      	ldr	r3, [r3, #0]
 810887a:	4a35      	ldr	r2, [pc, #212]	@ (8108950 <HAL_DMA_IRQHandler+0xe34>)
 810887c:	4293      	cmp	r3, r2
 810887e:	d022      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	681b      	ldr	r3, [r3, #0]
 8108884:	4a33      	ldr	r2, [pc, #204]	@ (8108954 <HAL_DMA_IRQHandler+0xe38>)
 8108886:	4293      	cmp	r3, r2
 8108888:	d01d      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 810888a:	687b      	ldr	r3, [r7, #4]
 810888c:	681b      	ldr	r3, [r3, #0]
 810888e:	4a32      	ldr	r2, [pc, #200]	@ (8108958 <HAL_DMA_IRQHandler+0xe3c>)
 8108890:	4293      	cmp	r3, r2
 8108892:	d018      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 8108894:	687b      	ldr	r3, [r7, #4]
 8108896:	681b      	ldr	r3, [r3, #0]
 8108898:	4a30      	ldr	r2, [pc, #192]	@ (810895c <HAL_DMA_IRQHandler+0xe40>)
 810889a:	4293      	cmp	r3, r2
 810889c:	d013      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 810889e:	687b      	ldr	r3, [r7, #4]
 81088a0:	681b      	ldr	r3, [r3, #0]
 81088a2:	4a2f      	ldr	r2, [pc, #188]	@ (8108960 <HAL_DMA_IRQHandler+0xe44>)
 81088a4:	4293      	cmp	r3, r2
 81088a6:	d00e      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 81088a8:	687b      	ldr	r3, [r7, #4]
 81088aa:	681b      	ldr	r3, [r3, #0]
 81088ac:	4a2d      	ldr	r2, [pc, #180]	@ (8108964 <HAL_DMA_IRQHandler+0xe48>)
 81088ae:	4293      	cmp	r3, r2
 81088b0:	d009      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 81088b2:	687b      	ldr	r3, [r7, #4]
 81088b4:	681b      	ldr	r3, [r3, #0]
 81088b6:	4a2c      	ldr	r2, [pc, #176]	@ (8108968 <HAL_DMA_IRQHandler+0xe4c>)
 81088b8:	4293      	cmp	r3, r2
 81088ba:	d004      	beq.n	81088c6 <HAL_DMA_IRQHandler+0xdaa>
 81088bc:	687b      	ldr	r3, [r7, #4]
 81088be:	681b      	ldr	r3, [r3, #0]
 81088c0:	4a2a      	ldr	r2, [pc, #168]	@ (810896c <HAL_DMA_IRQHandler+0xe50>)
 81088c2:	4293      	cmp	r3, r2
 81088c4:	d108      	bne.n	81088d8 <HAL_DMA_IRQHandler+0xdbc>
 81088c6:	687b      	ldr	r3, [r7, #4]
 81088c8:	681b      	ldr	r3, [r3, #0]
 81088ca:	681a      	ldr	r2, [r3, #0]
 81088cc:	687b      	ldr	r3, [r7, #4]
 81088ce:	681b      	ldr	r3, [r3, #0]
 81088d0:	f022 021c 	bic.w	r2, r2, #28
 81088d4:	601a      	str	r2, [r3, #0]
 81088d6:	e007      	b.n	81088e8 <HAL_DMA_IRQHandler+0xdcc>
 81088d8:	687b      	ldr	r3, [r7, #4]
 81088da:	681b      	ldr	r3, [r3, #0]
 81088dc:	681a      	ldr	r2, [r3, #0]
 81088de:	687b      	ldr	r3, [r7, #4]
 81088e0:	681b      	ldr	r3, [r3, #0]
 81088e2:	f022 020e 	bic.w	r2, r2, #14
 81088e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81088e8:	687b      	ldr	r3, [r7, #4]
 81088ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81088ec:	f003 031f 	and.w	r3, r3, #31
 81088f0:	2201      	movs	r2, #1
 81088f2:	409a      	lsls	r2, r3
 81088f4:	69fb      	ldr	r3, [r7, #28]
 81088f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81088f8:	687b      	ldr	r3, [r7, #4]
 81088fa:	2201      	movs	r2, #1
 81088fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81088fe:	687b      	ldr	r3, [r7, #4]
 8108900:	2201      	movs	r2, #1
 8108902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8108906:	687b      	ldr	r3, [r7, #4]
 8108908:	2200      	movs	r2, #0
 810890a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 810890e:	687b      	ldr	r3, [r7, #4]
 8108910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108912:	2b00      	cmp	r3, #0
 8108914:	d009      	beq.n	810892a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810891a:	6878      	ldr	r0, [r7, #4]
 810891c:	4798      	blx	r3
 810891e:	e004      	b.n	810892a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8108920:	bf00      	nop
 8108922:	e002      	b.n	810892a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108924:	bf00      	nop
 8108926:	e000      	b.n	810892a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8108928:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810892a:	3728      	adds	r7, #40	@ 0x28
 810892c:	46bd      	mov	sp, r7
 810892e:	bd80      	pop	{r7, pc}
 8108930:	40020010 	.word	0x40020010
 8108934:	40020028 	.word	0x40020028
 8108938:	40020040 	.word	0x40020040
 810893c:	40020058 	.word	0x40020058
 8108940:	40020070 	.word	0x40020070
 8108944:	40020088 	.word	0x40020088
 8108948:	400200a0 	.word	0x400200a0
 810894c:	400200b8 	.word	0x400200b8
 8108950:	40020410 	.word	0x40020410
 8108954:	40020428 	.word	0x40020428
 8108958:	40020440 	.word	0x40020440
 810895c:	40020458 	.word	0x40020458
 8108960:	40020470 	.word	0x40020470
 8108964:	40020488 	.word	0x40020488
 8108968:	400204a0 	.word	0x400204a0
 810896c:	400204b8 	.word	0x400204b8

08108970 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8108970:	b480      	push	{r7}
 8108972:	b085      	sub	sp, #20
 8108974:	af00      	add	r7, sp, #0
 8108976:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8108978:	687b      	ldr	r3, [r7, #4]
 810897a:	681b      	ldr	r3, [r3, #0]
 810897c:	4a43      	ldr	r2, [pc, #268]	@ (8108a8c <DMA_CalcBaseAndBitshift+0x11c>)
 810897e:	4293      	cmp	r3, r2
 8108980:	d04a      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 8108982:	687b      	ldr	r3, [r7, #4]
 8108984:	681b      	ldr	r3, [r3, #0]
 8108986:	4a42      	ldr	r2, [pc, #264]	@ (8108a90 <DMA_CalcBaseAndBitshift+0x120>)
 8108988:	4293      	cmp	r3, r2
 810898a:	d045      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 810898c:	687b      	ldr	r3, [r7, #4]
 810898e:	681b      	ldr	r3, [r3, #0]
 8108990:	4a40      	ldr	r2, [pc, #256]	@ (8108a94 <DMA_CalcBaseAndBitshift+0x124>)
 8108992:	4293      	cmp	r3, r2
 8108994:	d040      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 8108996:	687b      	ldr	r3, [r7, #4]
 8108998:	681b      	ldr	r3, [r3, #0]
 810899a:	4a3f      	ldr	r2, [pc, #252]	@ (8108a98 <DMA_CalcBaseAndBitshift+0x128>)
 810899c:	4293      	cmp	r3, r2
 810899e:	d03b      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	681b      	ldr	r3, [r3, #0]
 81089a4:	4a3d      	ldr	r2, [pc, #244]	@ (8108a9c <DMA_CalcBaseAndBitshift+0x12c>)
 81089a6:	4293      	cmp	r3, r2
 81089a8:	d036      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089aa:	687b      	ldr	r3, [r7, #4]
 81089ac:	681b      	ldr	r3, [r3, #0]
 81089ae:	4a3c      	ldr	r2, [pc, #240]	@ (8108aa0 <DMA_CalcBaseAndBitshift+0x130>)
 81089b0:	4293      	cmp	r3, r2
 81089b2:	d031      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089b4:	687b      	ldr	r3, [r7, #4]
 81089b6:	681b      	ldr	r3, [r3, #0]
 81089b8:	4a3a      	ldr	r2, [pc, #232]	@ (8108aa4 <DMA_CalcBaseAndBitshift+0x134>)
 81089ba:	4293      	cmp	r3, r2
 81089bc:	d02c      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	681b      	ldr	r3, [r3, #0]
 81089c2:	4a39      	ldr	r2, [pc, #228]	@ (8108aa8 <DMA_CalcBaseAndBitshift+0x138>)
 81089c4:	4293      	cmp	r3, r2
 81089c6:	d027      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089c8:	687b      	ldr	r3, [r7, #4]
 81089ca:	681b      	ldr	r3, [r3, #0]
 81089cc:	4a37      	ldr	r2, [pc, #220]	@ (8108aac <DMA_CalcBaseAndBitshift+0x13c>)
 81089ce:	4293      	cmp	r3, r2
 81089d0:	d022      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	681b      	ldr	r3, [r3, #0]
 81089d6:	4a36      	ldr	r2, [pc, #216]	@ (8108ab0 <DMA_CalcBaseAndBitshift+0x140>)
 81089d8:	4293      	cmp	r3, r2
 81089da:	d01d      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089dc:	687b      	ldr	r3, [r7, #4]
 81089de:	681b      	ldr	r3, [r3, #0]
 81089e0:	4a34      	ldr	r2, [pc, #208]	@ (8108ab4 <DMA_CalcBaseAndBitshift+0x144>)
 81089e2:	4293      	cmp	r3, r2
 81089e4:	d018      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089e6:	687b      	ldr	r3, [r7, #4]
 81089e8:	681b      	ldr	r3, [r3, #0]
 81089ea:	4a33      	ldr	r2, [pc, #204]	@ (8108ab8 <DMA_CalcBaseAndBitshift+0x148>)
 81089ec:	4293      	cmp	r3, r2
 81089ee:	d013      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089f0:	687b      	ldr	r3, [r7, #4]
 81089f2:	681b      	ldr	r3, [r3, #0]
 81089f4:	4a31      	ldr	r2, [pc, #196]	@ (8108abc <DMA_CalcBaseAndBitshift+0x14c>)
 81089f6:	4293      	cmp	r3, r2
 81089f8:	d00e      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 81089fa:	687b      	ldr	r3, [r7, #4]
 81089fc:	681b      	ldr	r3, [r3, #0]
 81089fe:	4a30      	ldr	r2, [pc, #192]	@ (8108ac0 <DMA_CalcBaseAndBitshift+0x150>)
 8108a00:	4293      	cmp	r3, r2
 8108a02:	d009      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 8108a04:	687b      	ldr	r3, [r7, #4]
 8108a06:	681b      	ldr	r3, [r3, #0]
 8108a08:	4a2e      	ldr	r2, [pc, #184]	@ (8108ac4 <DMA_CalcBaseAndBitshift+0x154>)
 8108a0a:	4293      	cmp	r3, r2
 8108a0c:	d004      	beq.n	8108a18 <DMA_CalcBaseAndBitshift+0xa8>
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	681b      	ldr	r3, [r3, #0]
 8108a12:	4a2d      	ldr	r2, [pc, #180]	@ (8108ac8 <DMA_CalcBaseAndBitshift+0x158>)
 8108a14:	4293      	cmp	r3, r2
 8108a16:	d101      	bne.n	8108a1c <DMA_CalcBaseAndBitshift+0xac>
 8108a18:	2301      	movs	r3, #1
 8108a1a:	e000      	b.n	8108a1e <DMA_CalcBaseAndBitshift+0xae>
 8108a1c:	2300      	movs	r3, #0
 8108a1e:	2b00      	cmp	r3, #0
 8108a20:	d026      	beq.n	8108a70 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	681b      	ldr	r3, [r3, #0]
 8108a26:	b2db      	uxtb	r3, r3
 8108a28:	3b10      	subs	r3, #16
 8108a2a:	4a28      	ldr	r2, [pc, #160]	@ (8108acc <DMA_CalcBaseAndBitshift+0x15c>)
 8108a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8108a30:	091b      	lsrs	r3, r3, #4
 8108a32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8108a34:	68fb      	ldr	r3, [r7, #12]
 8108a36:	f003 0307 	and.w	r3, r3, #7
 8108a3a:	4a25      	ldr	r2, [pc, #148]	@ (8108ad0 <DMA_CalcBaseAndBitshift+0x160>)
 8108a3c:	5cd3      	ldrb	r3, [r2, r3]
 8108a3e:	461a      	mov	r2, r3
 8108a40:	687b      	ldr	r3, [r7, #4]
 8108a42:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8108a44:	68fb      	ldr	r3, [r7, #12]
 8108a46:	2b03      	cmp	r3, #3
 8108a48:	d909      	bls.n	8108a5e <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8108a4a:	687b      	ldr	r3, [r7, #4]
 8108a4c:	681b      	ldr	r3, [r3, #0]
 8108a4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8108a52:	f023 0303 	bic.w	r3, r3, #3
 8108a56:	1d1a      	adds	r2, r3, #4
 8108a58:	687b      	ldr	r3, [r7, #4]
 8108a5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8108a5c:	e00e      	b.n	8108a7c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8108a5e:	687b      	ldr	r3, [r7, #4]
 8108a60:	681b      	ldr	r3, [r3, #0]
 8108a62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8108a66:	f023 0303 	bic.w	r3, r3, #3
 8108a6a:	687a      	ldr	r2, [r7, #4]
 8108a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8108a6e:	e005      	b.n	8108a7c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8108a70:	687b      	ldr	r3, [r7, #4]
 8108a72:	681b      	ldr	r3, [r3, #0]
 8108a74:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8108a7c:	687b      	ldr	r3, [r7, #4]
 8108a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8108a80:	4618      	mov	r0, r3
 8108a82:	3714      	adds	r7, #20
 8108a84:	46bd      	mov	sp, r7
 8108a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a8a:	4770      	bx	lr
 8108a8c:	40020010 	.word	0x40020010
 8108a90:	40020028 	.word	0x40020028
 8108a94:	40020040 	.word	0x40020040
 8108a98:	40020058 	.word	0x40020058
 8108a9c:	40020070 	.word	0x40020070
 8108aa0:	40020088 	.word	0x40020088
 8108aa4:	400200a0 	.word	0x400200a0
 8108aa8:	400200b8 	.word	0x400200b8
 8108aac:	40020410 	.word	0x40020410
 8108ab0:	40020428 	.word	0x40020428
 8108ab4:	40020440 	.word	0x40020440
 8108ab8:	40020458 	.word	0x40020458
 8108abc:	40020470 	.word	0x40020470
 8108ac0:	40020488 	.word	0x40020488
 8108ac4:	400204a0 	.word	0x400204a0
 8108ac8:	400204b8 	.word	0x400204b8
 8108acc:	aaaaaaab 	.word	0xaaaaaaab
 8108ad0:	08115c70 	.word	0x08115c70

08108ad4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8108ad4:	b480      	push	{r7}
 8108ad6:	b085      	sub	sp, #20
 8108ad8:	af00      	add	r7, sp, #0
 8108ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108adc:	2300      	movs	r3, #0
 8108ade:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8108ae0:	687b      	ldr	r3, [r7, #4]
 8108ae2:	699b      	ldr	r3, [r3, #24]
 8108ae4:	2b00      	cmp	r3, #0
 8108ae6:	d120      	bne.n	8108b2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8108ae8:	687b      	ldr	r3, [r7, #4]
 8108aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108aec:	2b03      	cmp	r3, #3
 8108aee:	d858      	bhi.n	8108ba2 <DMA_CheckFifoParam+0xce>
 8108af0:	a201      	add	r2, pc, #4	@ (adr r2, 8108af8 <DMA_CheckFifoParam+0x24>)
 8108af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108af6:	bf00      	nop
 8108af8:	08108b09 	.word	0x08108b09
 8108afc:	08108b1b 	.word	0x08108b1b
 8108b00:	08108b09 	.word	0x08108b09
 8108b04:	08108ba3 	.word	0x08108ba3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8108b10:	2b00      	cmp	r3, #0
 8108b12:	d048      	beq.n	8108ba6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8108b14:	2301      	movs	r3, #1
 8108b16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8108b18:	e045      	b.n	8108ba6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8108b1a:	687b      	ldr	r3, [r7, #4]
 8108b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8108b22:	d142      	bne.n	8108baa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8108b24:	2301      	movs	r3, #1
 8108b26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8108b28:	e03f      	b.n	8108baa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	699b      	ldr	r3, [r3, #24]
 8108b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108b32:	d123      	bne.n	8108b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8108b34:	687b      	ldr	r3, [r7, #4]
 8108b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b38:	2b03      	cmp	r3, #3
 8108b3a:	d838      	bhi.n	8108bae <DMA_CheckFifoParam+0xda>
 8108b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8108b44 <DMA_CheckFifoParam+0x70>)
 8108b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b42:	bf00      	nop
 8108b44:	08108b55 	.word	0x08108b55
 8108b48:	08108b5b 	.word	0x08108b5b
 8108b4c:	08108b55 	.word	0x08108b55
 8108b50:	08108b6d 	.word	0x08108b6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8108b54:	2301      	movs	r3, #1
 8108b56:	73fb      	strb	r3, [r7, #15]
        break;
 8108b58:	e030      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8108b5a:	687b      	ldr	r3, [r7, #4]
 8108b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8108b62:	2b00      	cmp	r3, #0
 8108b64:	d025      	beq.n	8108bb2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8108b66:	2301      	movs	r3, #1
 8108b68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8108b6a:	e022      	b.n	8108bb2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8108b6c:	687b      	ldr	r3, [r7, #4]
 8108b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8108b74:	d11f      	bne.n	8108bb6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8108b76:	2301      	movs	r3, #1
 8108b78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8108b7a:	e01c      	b.n	8108bb6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8108b7c:	687b      	ldr	r3, [r7, #4]
 8108b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b80:	2b02      	cmp	r3, #2
 8108b82:	d902      	bls.n	8108b8a <DMA_CheckFifoParam+0xb6>
 8108b84:	2b03      	cmp	r3, #3
 8108b86:	d003      	beq.n	8108b90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8108b88:	e018      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8108b8a:	2301      	movs	r3, #1
 8108b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8108b8e:	e015      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8108b90:	687b      	ldr	r3, [r7, #4]
 8108b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8108b98:	2b00      	cmp	r3, #0
 8108b9a:	d00e      	beq.n	8108bba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8108b9c:	2301      	movs	r3, #1
 8108b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8108ba0:	e00b      	b.n	8108bba <DMA_CheckFifoParam+0xe6>
        break;
 8108ba2:	bf00      	nop
 8108ba4:	e00a      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>
        break;
 8108ba6:	bf00      	nop
 8108ba8:	e008      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>
        break;
 8108baa:	bf00      	nop
 8108bac:	e006      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>
        break;
 8108bae:	bf00      	nop
 8108bb0:	e004      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>
        break;
 8108bb2:	bf00      	nop
 8108bb4:	e002      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>
        break;
 8108bb6:	bf00      	nop
 8108bb8:	e000      	b.n	8108bbc <DMA_CheckFifoParam+0xe8>
    break;
 8108bba:	bf00      	nop
    }
  }

  return status;
 8108bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8108bbe:	4618      	mov	r0, r3
 8108bc0:	3714      	adds	r7, #20
 8108bc2:	46bd      	mov	sp, r7
 8108bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bc8:	4770      	bx	lr
 8108bca:	bf00      	nop

08108bcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8108bcc:	b480      	push	{r7}
 8108bce:	b085      	sub	sp, #20
 8108bd0:	af00      	add	r7, sp, #0
 8108bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8108bd4:	687b      	ldr	r3, [r7, #4]
 8108bd6:	681b      	ldr	r3, [r3, #0]
 8108bd8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8108bda:	687b      	ldr	r3, [r7, #4]
 8108bdc:	681b      	ldr	r3, [r3, #0]
 8108bde:	4a3a      	ldr	r2, [pc, #232]	@ (8108cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8108be0:	4293      	cmp	r3, r2
 8108be2:	d022      	beq.n	8108c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108be4:	687b      	ldr	r3, [r7, #4]
 8108be6:	681b      	ldr	r3, [r3, #0]
 8108be8:	4a38      	ldr	r2, [pc, #224]	@ (8108ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8108bea:	4293      	cmp	r3, r2
 8108bec:	d01d      	beq.n	8108c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108bee:	687b      	ldr	r3, [r7, #4]
 8108bf0:	681b      	ldr	r3, [r3, #0]
 8108bf2:	4a37      	ldr	r2, [pc, #220]	@ (8108cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8108bf4:	4293      	cmp	r3, r2
 8108bf6:	d018      	beq.n	8108c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108bf8:	687b      	ldr	r3, [r7, #4]
 8108bfa:	681b      	ldr	r3, [r3, #0]
 8108bfc:	4a35      	ldr	r2, [pc, #212]	@ (8108cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8108bfe:	4293      	cmp	r3, r2
 8108c00:	d013      	beq.n	8108c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c02:	687b      	ldr	r3, [r7, #4]
 8108c04:	681b      	ldr	r3, [r3, #0]
 8108c06:	4a34      	ldr	r2, [pc, #208]	@ (8108cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8108c08:	4293      	cmp	r3, r2
 8108c0a:	d00e      	beq.n	8108c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c0c:	687b      	ldr	r3, [r7, #4]
 8108c0e:	681b      	ldr	r3, [r3, #0]
 8108c10:	4a32      	ldr	r2, [pc, #200]	@ (8108cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8108c12:	4293      	cmp	r3, r2
 8108c14:	d009      	beq.n	8108c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c16:	687b      	ldr	r3, [r7, #4]
 8108c18:	681b      	ldr	r3, [r3, #0]
 8108c1a:	4a31      	ldr	r2, [pc, #196]	@ (8108ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8108c1c:	4293      	cmp	r3, r2
 8108c1e:	d004      	beq.n	8108c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8108c20:	687b      	ldr	r3, [r7, #4]
 8108c22:	681b      	ldr	r3, [r3, #0]
 8108c24:	4a2f      	ldr	r2, [pc, #188]	@ (8108ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8108c26:	4293      	cmp	r3, r2
 8108c28:	d101      	bne.n	8108c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8108c2a:	2301      	movs	r3, #1
 8108c2c:	e000      	b.n	8108c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8108c2e:	2300      	movs	r3, #0
 8108c30:	2b00      	cmp	r3, #0
 8108c32:	d01c      	beq.n	8108c6e <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	681b      	ldr	r3, [r3, #0]
 8108c38:	b2db      	uxtb	r3, r3
 8108c3a:	3b08      	subs	r3, #8
 8108c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8108ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8108c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8108c42:	091b      	lsrs	r3, r3, #4
 8108c44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8108c46:	68fb      	ldr	r3, [r7, #12]
 8108c48:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 8108c4c:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8108c50:	009b      	lsls	r3, r3, #2
 8108c52:	461a      	mov	r2, r3
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8108c58:	687b      	ldr	r3, [r7, #4]
 8108c5a:	4a24      	ldr	r2, [pc, #144]	@ (8108cec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8108c5c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8108c5e:	68fb      	ldr	r3, [r7, #12]
 8108c60:	f003 031f 	and.w	r3, r3, #31
 8108c64:	2201      	movs	r2, #1
 8108c66:	409a      	lsls	r2, r3
 8108c68:	687b      	ldr	r3, [r7, #4]
 8108c6a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8108c6c:	e026      	b.n	8108cbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	681b      	ldr	r3, [r3, #0]
 8108c72:	b2db      	uxtb	r3, r3
 8108c74:	3b10      	subs	r3, #16
 8108c76:	4a1e      	ldr	r2, [pc, #120]	@ (8108cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8108c78:	fba2 2303 	umull	r2, r3, r2, r3
 8108c7c:	091b      	lsrs	r3, r3, #4
 8108c7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8108c80:	68bb      	ldr	r3, [r7, #8]
 8108c82:	4a1c      	ldr	r2, [pc, #112]	@ (8108cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8108c84:	4293      	cmp	r3, r2
 8108c86:	d806      	bhi.n	8108c96 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8108c88:	68bb      	ldr	r3, [r7, #8]
 8108c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8108cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8108c8c:	4293      	cmp	r3, r2
 8108c8e:	d902      	bls.n	8108c96 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8108c90:	68fb      	ldr	r3, [r7, #12]
 8108c92:	3308      	adds	r3, #8
 8108c94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8108c96:	68fb      	ldr	r3, [r7, #12]
 8108c98:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8108c9c:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8108ca0:	009b      	lsls	r3, r3, #2
 8108ca2:	461a      	mov	r2, r3
 8108ca4:	687b      	ldr	r3, [r7, #4]
 8108ca6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8108ca8:	687b      	ldr	r3, [r7, #4]
 8108caa:	4a14      	ldr	r2, [pc, #80]	@ (8108cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8108cac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8108cae:	68fb      	ldr	r3, [r7, #12]
 8108cb0:	f003 031f 	and.w	r3, r3, #31
 8108cb4:	2201      	movs	r2, #1
 8108cb6:	409a      	lsls	r2, r3
 8108cb8:	687b      	ldr	r3, [r7, #4]
 8108cba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8108cbc:	bf00      	nop
 8108cbe:	3714      	adds	r7, #20
 8108cc0:	46bd      	mov	sp, r7
 8108cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cc6:	4770      	bx	lr
 8108cc8:	58025408 	.word	0x58025408
 8108ccc:	5802541c 	.word	0x5802541c
 8108cd0:	58025430 	.word	0x58025430
 8108cd4:	58025444 	.word	0x58025444
 8108cd8:	58025458 	.word	0x58025458
 8108cdc:	5802546c 	.word	0x5802546c
 8108ce0:	58025480 	.word	0x58025480
 8108ce4:	58025494 	.word	0x58025494
 8108ce8:	cccccccd 	.word	0xcccccccd
 8108cec:	58025880 	.word	0x58025880
 8108cf0:	aaaaaaab 	.word	0xaaaaaaab
 8108cf4:	400204b8 	.word	0x400204b8
 8108cf8:	4002040f 	.word	0x4002040f
 8108cfc:	40020880 	.word	0x40020880

08108d00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8108d00:	b480      	push	{r7}
 8108d02:	b085      	sub	sp, #20
 8108d04:	af00      	add	r7, sp, #0
 8108d06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	685b      	ldr	r3, [r3, #4]
 8108d0c:	b2db      	uxtb	r3, r3
 8108d0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8108d10:	68fb      	ldr	r3, [r7, #12]
 8108d12:	2b00      	cmp	r3, #0
 8108d14:	d04a      	beq.n	8108dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8108d16:	68fb      	ldr	r3, [r7, #12]
 8108d18:	2b08      	cmp	r3, #8
 8108d1a:	d847      	bhi.n	8108dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	681b      	ldr	r3, [r3, #0]
 8108d20:	4a25      	ldr	r2, [pc, #148]	@ (8108db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8108d22:	4293      	cmp	r3, r2
 8108d24:	d022      	beq.n	8108d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d26:	687b      	ldr	r3, [r7, #4]
 8108d28:	681b      	ldr	r3, [r3, #0]
 8108d2a:	4a24      	ldr	r2, [pc, #144]	@ (8108dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8108d2c:	4293      	cmp	r3, r2
 8108d2e:	d01d      	beq.n	8108d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d30:	687b      	ldr	r3, [r7, #4]
 8108d32:	681b      	ldr	r3, [r3, #0]
 8108d34:	4a22      	ldr	r2, [pc, #136]	@ (8108dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8108d36:	4293      	cmp	r3, r2
 8108d38:	d018      	beq.n	8108d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	681b      	ldr	r3, [r3, #0]
 8108d3e:	4a21      	ldr	r2, [pc, #132]	@ (8108dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8108d40:	4293      	cmp	r3, r2
 8108d42:	d013      	beq.n	8108d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d44:	687b      	ldr	r3, [r7, #4]
 8108d46:	681b      	ldr	r3, [r3, #0]
 8108d48:	4a1f      	ldr	r2, [pc, #124]	@ (8108dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8108d4a:	4293      	cmp	r3, r2
 8108d4c:	d00e      	beq.n	8108d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	681b      	ldr	r3, [r3, #0]
 8108d52:	4a1e      	ldr	r2, [pc, #120]	@ (8108dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8108d54:	4293      	cmp	r3, r2
 8108d56:	d009      	beq.n	8108d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d58:	687b      	ldr	r3, [r7, #4]
 8108d5a:	681b      	ldr	r3, [r3, #0]
 8108d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8108dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8108d5e:	4293      	cmp	r3, r2
 8108d60:	d004      	beq.n	8108d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8108d62:	687b      	ldr	r3, [r7, #4]
 8108d64:	681b      	ldr	r3, [r3, #0]
 8108d66:	4a1b      	ldr	r2, [pc, #108]	@ (8108dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8108d68:	4293      	cmp	r3, r2
 8108d6a:	d101      	bne.n	8108d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8108d6c:	2301      	movs	r3, #1
 8108d6e:	e000      	b.n	8108d72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8108d70:	2300      	movs	r3, #0
 8108d72:	2b00      	cmp	r3, #0
 8108d74:	d00a      	beq.n	8108d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8108d76:	68fa      	ldr	r2, [r7, #12]
 8108d78:	4b17      	ldr	r3, [pc, #92]	@ (8108dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8108d7a:	4413      	add	r3, r2
 8108d7c:	009b      	lsls	r3, r3, #2
 8108d7e:	461a      	mov	r2, r3
 8108d80:	687b      	ldr	r3, [r7, #4]
 8108d82:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	4a15      	ldr	r2, [pc, #84]	@ (8108ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8108d88:	671a      	str	r2, [r3, #112]	@ 0x70
 8108d8a:	e009      	b.n	8108da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8108d8c:	68fa      	ldr	r2, [r7, #12]
 8108d8e:	4b14      	ldr	r3, [pc, #80]	@ (8108de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8108d90:	4413      	add	r3, r2
 8108d92:	009b      	lsls	r3, r3, #2
 8108d94:	461a      	mov	r2, r3
 8108d96:	687b      	ldr	r3, [r7, #4]
 8108d98:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8108d9a:	687b      	ldr	r3, [r7, #4]
 8108d9c:	4a11      	ldr	r2, [pc, #68]	@ (8108de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8108d9e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8108da0:	68fb      	ldr	r3, [r7, #12]
 8108da2:	3b01      	subs	r3, #1
 8108da4:	2201      	movs	r2, #1
 8108da6:	409a      	lsls	r2, r3
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8108dac:	bf00      	nop
 8108dae:	3714      	adds	r7, #20
 8108db0:	46bd      	mov	sp, r7
 8108db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108db6:	4770      	bx	lr
 8108db8:	58025408 	.word	0x58025408
 8108dbc:	5802541c 	.word	0x5802541c
 8108dc0:	58025430 	.word	0x58025430
 8108dc4:	58025444 	.word	0x58025444
 8108dc8:	58025458 	.word	0x58025458
 8108dcc:	5802546c 	.word	0x5802546c
 8108dd0:	58025480 	.word	0x58025480
 8108dd4:	58025494 	.word	0x58025494
 8108dd8:	1600963f 	.word	0x1600963f
 8108ddc:	58025940 	.word	0x58025940
 8108de0:	1000823f 	.word	0x1000823f
 8108de4:	40020940 	.word	0x40020940

08108de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8108de8:	b480      	push	{r7}
 8108dea:	b089      	sub	sp, #36	@ 0x24
 8108dec:	af00      	add	r7, sp, #0
 8108dee:	6078      	str	r0, [r7, #4]
 8108df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8108df2:	2300      	movs	r3, #0
 8108df4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8108df6:	4b89      	ldr	r3, [pc, #548]	@ (810901c <HAL_GPIO_Init+0x234>)
 8108df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8108dfa:	e194      	b.n	8109126 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8108dfc:	683b      	ldr	r3, [r7, #0]
 8108dfe:	681a      	ldr	r2, [r3, #0]
 8108e00:	2101      	movs	r1, #1
 8108e02:	69fb      	ldr	r3, [r7, #28]
 8108e04:	fa01 f303 	lsl.w	r3, r1, r3
 8108e08:	4013      	ands	r3, r2
 8108e0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8108e0c:	693b      	ldr	r3, [r7, #16]
 8108e0e:	2b00      	cmp	r3, #0
 8108e10:	f000 8186 	beq.w	8109120 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8108e14:	683b      	ldr	r3, [r7, #0]
 8108e16:	685b      	ldr	r3, [r3, #4]
 8108e18:	f003 0303 	and.w	r3, r3, #3
 8108e1c:	2b01      	cmp	r3, #1
 8108e1e:	d005      	beq.n	8108e2c <HAL_GPIO_Init+0x44>
 8108e20:	683b      	ldr	r3, [r7, #0]
 8108e22:	685b      	ldr	r3, [r3, #4]
 8108e24:	f003 0303 	and.w	r3, r3, #3
 8108e28:	2b02      	cmp	r3, #2
 8108e2a:	d130      	bne.n	8108e8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	689b      	ldr	r3, [r3, #8]
 8108e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8108e32:	69fb      	ldr	r3, [r7, #28]
 8108e34:	005b      	lsls	r3, r3, #1
 8108e36:	2203      	movs	r2, #3
 8108e38:	fa02 f303 	lsl.w	r3, r2, r3
 8108e3c:	43db      	mvns	r3, r3
 8108e3e:	69ba      	ldr	r2, [r7, #24]
 8108e40:	4013      	ands	r3, r2
 8108e42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8108e44:	683b      	ldr	r3, [r7, #0]
 8108e46:	68da      	ldr	r2, [r3, #12]
 8108e48:	69fb      	ldr	r3, [r7, #28]
 8108e4a:	005b      	lsls	r3, r3, #1
 8108e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8108e50:	69ba      	ldr	r2, [r7, #24]
 8108e52:	4313      	orrs	r3, r2
 8108e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8108e56:	687b      	ldr	r3, [r7, #4]
 8108e58:	69ba      	ldr	r2, [r7, #24]
 8108e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	685b      	ldr	r3, [r3, #4]
 8108e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8108e62:	2201      	movs	r2, #1
 8108e64:	69fb      	ldr	r3, [r7, #28]
 8108e66:	fa02 f303 	lsl.w	r3, r2, r3
 8108e6a:	43db      	mvns	r3, r3
 8108e6c:	69ba      	ldr	r2, [r7, #24]
 8108e6e:	4013      	ands	r3, r2
 8108e70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8108e72:	683b      	ldr	r3, [r7, #0]
 8108e74:	685b      	ldr	r3, [r3, #4]
 8108e76:	091b      	lsrs	r3, r3, #4
 8108e78:	f003 0201 	and.w	r2, r3, #1
 8108e7c:	69fb      	ldr	r3, [r7, #28]
 8108e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8108e82:	69ba      	ldr	r2, [r7, #24]
 8108e84:	4313      	orrs	r3, r2
 8108e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	69ba      	ldr	r2, [r7, #24]
 8108e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8108e8e:	683b      	ldr	r3, [r7, #0]
 8108e90:	685b      	ldr	r3, [r3, #4]
 8108e92:	f003 0303 	and.w	r3, r3, #3
 8108e96:	2b03      	cmp	r3, #3
 8108e98:	d017      	beq.n	8108eca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	68db      	ldr	r3, [r3, #12]
 8108e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8108ea0:	69fb      	ldr	r3, [r7, #28]
 8108ea2:	005b      	lsls	r3, r3, #1
 8108ea4:	2203      	movs	r2, #3
 8108ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8108eaa:	43db      	mvns	r3, r3
 8108eac:	69ba      	ldr	r2, [r7, #24]
 8108eae:	4013      	ands	r3, r2
 8108eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8108eb2:	683b      	ldr	r3, [r7, #0]
 8108eb4:	689a      	ldr	r2, [r3, #8]
 8108eb6:	69fb      	ldr	r3, [r7, #28]
 8108eb8:	005b      	lsls	r3, r3, #1
 8108eba:	fa02 f303 	lsl.w	r3, r2, r3
 8108ebe:	69ba      	ldr	r2, [r7, #24]
 8108ec0:	4313      	orrs	r3, r2
 8108ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8108ec4:	687b      	ldr	r3, [r7, #4]
 8108ec6:	69ba      	ldr	r2, [r7, #24]
 8108ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8108eca:	683b      	ldr	r3, [r7, #0]
 8108ecc:	685b      	ldr	r3, [r3, #4]
 8108ece:	f003 0303 	and.w	r3, r3, #3
 8108ed2:	2b02      	cmp	r3, #2
 8108ed4:	d123      	bne.n	8108f1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8108ed6:	69fb      	ldr	r3, [r7, #28]
 8108ed8:	08da      	lsrs	r2, r3, #3
 8108eda:	687b      	ldr	r3, [r7, #4]
 8108edc:	3208      	adds	r2, #8
 8108ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8108ee4:	69fb      	ldr	r3, [r7, #28]
 8108ee6:	f003 0307 	and.w	r3, r3, #7
 8108eea:	009b      	lsls	r3, r3, #2
 8108eec:	220f      	movs	r2, #15
 8108eee:	fa02 f303 	lsl.w	r3, r2, r3
 8108ef2:	43db      	mvns	r3, r3
 8108ef4:	69ba      	ldr	r2, [r7, #24]
 8108ef6:	4013      	ands	r3, r2
 8108ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8108efa:	683b      	ldr	r3, [r7, #0]
 8108efc:	691a      	ldr	r2, [r3, #16]
 8108efe:	69fb      	ldr	r3, [r7, #28]
 8108f00:	f003 0307 	and.w	r3, r3, #7
 8108f04:	009b      	lsls	r3, r3, #2
 8108f06:	fa02 f303 	lsl.w	r3, r2, r3
 8108f0a:	69ba      	ldr	r2, [r7, #24]
 8108f0c:	4313      	orrs	r3, r2
 8108f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8108f10:	69fb      	ldr	r3, [r7, #28]
 8108f12:	08da      	lsrs	r2, r3, #3
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	3208      	adds	r2, #8
 8108f18:	69b9      	ldr	r1, [r7, #24]
 8108f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8108f1e:	687b      	ldr	r3, [r7, #4]
 8108f20:	681b      	ldr	r3, [r3, #0]
 8108f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8108f24:	69fb      	ldr	r3, [r7, #28]
 8108f26:	005b      	lsls	r3, r3, #1
 8108f28:	2203      	movs	r2, #3
 8108f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8108f2e:	43db      	mvns	r3, r3
 8108f30:	69ba      	ldr	r2, [r7, #24]
 8108f32:	4013      	ands	r3, r2
 8108f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8108f36:	683b      	ldr	r3, [r7, #0]
 8108f38:	685b      	ldr	r3, [r3, #4]
 8108f3a:	f003 0203 	and.w	r2, r3, #3
 8108f3e:	69fb      	ldr	r3, [r7, #28]
 8108f40:	005b      	lsls	r3, r3, #1
 8108f42:	fa02 f303 	lsl.w	r3, r2, r3
 8108f46:	69ba      	ldr	r2, [r7, #24]
 8108f48:	4313      	orrs	r3, r2
 8108f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	69ba      	ldr	r2, [r7, #24]
 8108f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8108f52:	683b      	ldr	r3, [r7, #0]
 8108f54:	685b      	ldr	r3, [r3, #4]
 8108f56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8108f5a:	2b00      	cmp	r3, #0
 8108f5c:	f000 80e0 	beq.w	8109120 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8108f60:	4b2f      	ldr	r3, [pc, #188]	@ (8109020 <HAL_GPIO_Init+0x238>)
 8108f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8108f66:	4a2e      	ldr	r2, [pc, #184]	@ (8109020 <HAL_GPIO_Init+0x238>)
 8108f68:	f043 0302 	orr.w	r3, r3, #2
 8108f6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8108f70:	4b2b      	ldr	r3, [pc, #172]	@ (8109020 <HAL_GPIO_Init+0x238>)
 8108f72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8108f76:	f003 0302 	and.w	r3, r3, #2
 8108f7a:	60fb      	str	r3, [r7, #12]
 8108f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8108f7e:	4a29      	ldr	r2, [pc, #164]	@ (8109024 <HAL_GPIO_Init+0x23c>)
 8108f80:	69fb      	ldr	r3, [r7, #28]
 8108f82:	089b      	lsrs	r3, r3, #2
 8108f84:	3302      	adds	r3, #2
 8108f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8108f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8108f8c:	69fb      	ldr	r3, [r7, #28]
 8108f8e:	f003 0303 	and.w	r3, r3, #3
 8108f92:	009b      	lsls	r3, r3, #2
 8108f94:	220f      	movs	r2, #15
 8108f96:	fa02 f303 	lsl.w	r3, r2, r3
 8108f9a:	43db      	mvns	r3, r3
 8108f9c:	69ba      	ldr	r2, [r7, #24]
 8108f9e:	4013      	ands	r3, r2
 8108fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8108fa2:	687b      	ldr	r3, [r7, #4]
 8108fa4:	4a20      	ldr	r2, [pc, #128]	@ (8109028 <HAL_GPIO_Init+0x240>)
 8108fa6:	4293      	cmp	r3, r2
 8108fa8:	d052      	beq.n	8109050 <HAL_GPIO_Init+0x268>
 8108faa:	687b      	ldr	r3, [r7, #4]
 8108fac:	4a1f      	ldr	r2, [pc, #124]	@ (810902c <HAL_GPIO_Init+0x244>)
 8108fae:	4293      	cmp	r3, r2
 8108fb0:	d031      	beq.n	8109016 <HAL_GPIO_Init+0x22e>
 8108fb2:	687b      	ldr	r3, [r7, #4]
 8108fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8109030 <HAL_GPIO_Init+0x248>)
 8108fb6:	4293      	cmp	r3, r2
 8108fb8:	d02b      	beq.n	8109012 <HAL_GPIO_Init+0x22a>
 8108fba:	687b      	ldr	r3, [r7, #4]
 8108fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8109034 <HAL_GPIO_Init+0x24c>)
 8108fbe:	4293      	cmp	r3, r2
 8108fc0:	d025      	beq.n	810900e <HAL_GPIO_Init+0x226>
 8108fc2:	687b      	ldr	r3, [r7, #4]
 8108fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8109038 <HAL_GPIO_Init+0x250>)
 8108fc6:	4293      	cmp	r3, r2
 8108fc8:	d01f      	beq.n	810900a <HAL_GPIO_Init+0x222>
 8108fca:	687b      	ldr	r3, [r7, #4]
 8108fcc:	4a1b      	ldr	r2, [pc, #108]	@ (810903c <HAL_GPIO_Init+0x254>)
 8108fce:	4293      	cmp	r3, r2
 8108fd0:	d019      	beq.n	8109006 <HAL_GPIO_Init+0x21e>
 8108fd2:	687b      	ldr	r3, [r7, #4]
 8108fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8109040 <HAL_GPIO_Init+0x258>)
 8108fd6:	4293      	cmp	r3, r2
 8108fd8:	d013      	beq.n	8109002 <HAL_GPIO_Init+0x21a>
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	4a19      	ldr	r2, [pc, #100]	@ (8109044 <HAL_GPIO_Init+0x25c>)
 8108fde:	4293      	cmp	r3, r2
 8108fe0:	d00d      	beq.n	8108ffe <HAL_GPIO_Init+0x216>
 8108fe2:	687b      	ldr	r3, [r7, #4]
 8108fe4:	4a18      	ldr	r2, [pc, #96]	@ (8109048 <HAL_GPIO_Init+0x260>)
 8108fe6:	4293      	cmp	r3, r2
 8108fe8:	d007      	beq.n	8108ffa <HAL_GPIO_Init+0x212>
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	4a17      	ldr	r2, [pc, #92]	@ (810904c <HAL_GPIO_Init+0x264>)
 8108fee:	4293      	cmp	r3, r2
 8108ff0:	d101      	bne.n	8108ff6 <HAL_GPIO_Init+0x20e>
 8108ff2:	2309      	movs	r3, #9
 8108ff4:	e02d      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 8108ff6:	230a      	movs	r3, #10
 8108ff8:	e02b      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 8108ffa:	2308      	movs	r3, #8
 8108ffc:	e029      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 8108ffe:	2307      	movs	r3, #7
 8109000:	e027      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 8109002:	2306      	movs	r3, #6
 8109004:	e025      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 8109006:	2305      	movs	r3, #5
 8109008:	e023      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 810900a:	2304      	movs	r3, #4
 810900c:	e021      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 810900e:	2303      	movs	r3, #3
 8109010:	e01f      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 8109012:	2302      	movs	r3, #2
 8109014:	e01d      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 8109016:	2301      	movs	r3, #1
 8109018:	e01b      	b.n	8109052 <HAL_GPIO_Init+0x26a>
 810901a:	bf00      	nop
 810901c:	580000c0 	.word	0x580000c0
 8109020:	58024400 	.word	0x58024400
 8109024:	58000400 	.word	0x58000400
 8109028:	58020000 	.word	0x58020000
 810902c:	58020400 	.word	0x58020400
 8109030:	58020800 	.word	0x58020800
 8109034:	58020c00 	.word	0x58020c00
 8109038:	58021000 	.word	0x58021000
 810903c:	58021400 	.word	0x58021400
 8109040:	58021800 	.word	0x58021800
 8109044:	58021c00 	.word	0x58021c00
 8109048:	58022000 	.word	0x58022000
 810904c:	58022400 	.word	0x58022400
 8109050:	2300      	movs	r3, #0
 8109052:	69fa      	ldr	r2, [r7, #28]
 8109054:	f002 0203 	and.w	r2, r2, #3
 8109058:	0092      	lsls	r2, r2, #2
 810905a:	4093      	lsls	r3, r2
 810905c:	69ba      	ldr	r2, [r7, #24]
 810905e:	4313      	orrs	r3, r2
 8109060:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8109062:	4938      	ldr	r1, [pc, #224]	@ (8109144 <HAL_GPIO_Init+0x35c>)
 8109064:	69fb      	ldr	r3, [r7, #28]
 8109066:	089b      	lsrs	r3, r3, #2
 8109068:	3302      	adds	r3, #2
 810906a:	69ba      	ldr	r2, [r7, #24]
 810906c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8109070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8109074:	681b      	ldr	r3, [r3, #0]
 8109076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8109078:	693b      	ldr	r3, [r7, #16]
 810907a:	43db      	mvns	r3, r3
 810907c:	69ba      	ldr	r2, [r7, #24]
 810907e:	4013      	ands	r3, r2
 8109080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8109082:	683b      	ldr	r3, [r7, #0]
 8109084:	685b      	ldr	r3, [r3, #4]
 8109086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810908a:	2b00      	cmp	r3, #0
 810908c:	d003      	beq.n	8109096 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810908e:	69ba      	ldr	r2, [r7, #24]
 8109090:	693b      	ldr	r3, [r7, #16]
 8109092:	4313      	orrs	r3, r2
 8109094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8109096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810909a:	69bb      	ldr	r3, [r7, #24]
 810909c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810909e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81090a2:	685b      	ldr	r3, [r3, #4]
 81090a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81090a6:	693b      	ldr	r3, [r7, #16]
 81090a8:	43db      	mvns	r3, r3
 81090aa:	69ba      	ldr	r2, [r7, #24]
 81090ac:	4013      	ands	r3, r2
 81090ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81090b0:	683b      	ldr	r3, [r7, #0]
 81090b2:	685b      	ldr	r3, [r3, #4]
 81090b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81090b8:	2b00      	cmp	r3, #0
 81090ba:	d003      	beq.n	81090c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81090bc:	69ba      	ldr	r2, [r7, #24]
 81090be:	693b      	ldr	r3, [r7, #16]
 81090c0:	4313      	orrs	r3, r2
 81090c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81090c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81090c8:	69bb      	ldr	r3, [r7, #24]
 81090ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81090cc:	697b      	ldr	r3, [r7, #20]
 81090ce:	685b      	ldr	r3, [r3, #4]
 81090d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81090d2:	693b      	ldr	r3, [r7, #16]
 81090d4:	43db      	mvns	r3, r3
 81090d6:	69ba      	ldr	r2, [r7, #24]
 81090d8:	4013      	ands	r3, r2
 81090da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81090dc:	683b      	ldr	r3, [r7, #0]
 81090de:	685b      	ldr	r3, [r3, #4]
 81090e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81090e4:	2b00      	cmp	r3, #0
 81090e6:	d003      	beq.n	81090f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81090e8:	69ba      	ldr	r2, [r7, #24]
 81090ea:	693b      	ldr	r3, [r7, #16]
 81090ec:	4313      	orrs	r3, r2
 81090ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81090f0:	697b      	ldr	r3, [r7, #20]
 81090f2:	69ba      	ldr	r2, [r7, #24]
 81090f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81090f6:	697b      	ldr	r3, [r7, #20]
 81090f8:	681b      	ldr	r3, [r3, #0]
 81090fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81090fc:	693b      	ldr	r3, [r7, #16]
 81090fe:	43db      	mvns	r3, r3
 8109100:	69ba      	ldr	r2, [r7, #24]
 8109102:	4013      	ands	r3, r2
 8109104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8109106:	683b      	ldr	r3, [r7, #0]
 8109108:	685b      	ldr	r3, [r3, #4]
 810910a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810910e:	2b00      	cmp	r3, #0
 8109110:	d003      	beq.n	810911a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8109112:	69ba      	ldr	r2, [r7, #24]
 8109114:	693b      	ldr	r3, [r7, #16]
 8109116:	4313      	orrs	r3, r2
 8109118:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810911a:	697b      	ldr	r3, [r7, #20]
 810911c:	69ba      	ldr	r2, [r7, #24]
 810911e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8109120:	69fb      	ldr	r3, [r7, #28]
 8109122:	3301      	adds	r3, #1
 8109124:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8109126:	683b      	ldr	r3, [r7, #0]
 8109128:	681a      	ldr	r2, [r3, #0]
 810912a:	69fb      	ldr	r3, [r7, #28]
 810912c:	fa22 f303 	lsr.w	r3, r2, r3
 8109130:	2b00      	cmp	r3, #0
 8109132:	f47f ae63 	bne.w	8108dfc <HAL_GPIO_Init+0x14>
  }
}
 8109136:	bf00      	nop
 8109138:	bf00      	nop
 810913a:	3724      	adds	r7, #36	@ 0x24
 810913c:	46bd      	mov	sp, r7
 810913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109142:	4770      	bx	lr
 8109144:	58000400 	.word	0x58000400

08109148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8109148:	b480      	push	{r7}
 810914a:	b083      	sub	sp, #12
 810914c:	af00      	add	r7, sp, #0
 810914e:	6078      	str	r0, [r7, #4]
 8109150:	460b      	mov	r3, r1
 8109152:	807b      	strh	r3, [r7, #2]
 8109154:	4613      	mov	r3, r2
 8109156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8109158:	787b      	ldrb	r3, [r7, #1]
 810915a:	2b00      	cmp	r3, #0
 810915c:	d003      	beq.n	8109166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810915e:	887a      	ldrh	r2, [r7, #2]
 8109160:	687b      	ldr	r3, [r7, #4]
 8109162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8109164:	e003      	b.n	810916e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8109166:	887b      	ldrh	r3, [r7, #2]
 8109168:	041a      	lsls	r2, r3, #16
 810916a:	687b      	ldr	r3, [r7, #4]
 810916c:	619a      	str	r2, [r3, #24]
}
 810916e:	bf00      	nop
 8109170:	370c      	adds	r7, #12
 8109172:	46bd      	mov	sp, r7
 8109174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109178:	4770      	bx	lr

0810917a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 810917a:	b580      	push	{r7, lr}
 810917c:	b082      	sub	sp, #8
 810917e:	af00      	add	r7, sp, #0
 8109180:	4603      	mov	r3, r0
 8109182:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8109184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8109188:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 810918c:	88fb      	ldrh	r3, [r7, #6]
 810918e:	4013      	ands	r3, r2
 8109190:	2b00      	cmp	r3, #0
 8109192:	d008      	beq.n	81091a6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8109194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8109198:	88fb      	ldrh	r3, [r7, #6]
 810919a:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 810919e:	88fb      	ldrh	r3, [r7, #6]
 81091a0:	4618      	mov	r0, r3
 81091a2:	f7fa fdcf 	bl	8103d44 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81091a6:	bf00      	nop
 81091a8:	3708      	adds	r7, #8
 81091aa:	46bd      	mov	sp, r7
 81091ac:	bd80      	pop	{r7, pc}
	...

081091b0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81091b0:	b480      	push	{r7}
 81091b2:	b083      	sub	sp, #12
 81091b4:	af00      	add	r7, sp, #0
 81091b6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81091b8:	4b05      	ldr	r3, [pc, #20]	@ (81091d0 <HAL_HSEM_ActivateNotification+0x20>)
 81091ba:	681a      	ldr	r2, [r3, #0]
 81091bc:	4904      	ldr	r1, [pc, #16]	@ (81091d0 <HAL_HSEM_ActivateNotification+0x20>)
 81091be:	687b      	ldr	r3, [r7, #4]
 81091c0:	4313      	orrs	r3, r2
 81091c2:	600b      	str	r3, [r1, #0]
#endif
}
 81091c4:	bf00      	nop
 81091c6:	370c      	adds	r7, #12
 81091c8:	46bd      	mov	sp, r7
 81091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091ce:	4770      	bx	lr
 81091d0:	58026510 	.word	0x58026510

081091d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81091d4:	b580      	push	{r7, lr}
 81091d6:	b082      	sub	sp, #8
 81091d8:	af00      	add	r7, sp, #0
 81091da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	2b00      	cmp	r3, #0
 81091e0:	d101      	bne.n	81091e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81091e2:	2301      	movs	r3, #1
 81091e4:	e08d      	b.n	8109302 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81091e6:	687b      	ldr	r3, [r7, #4]
 81091e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81091ec:	b2db      	uxtb	r3, r3
 81091ee:	2b00      	cmp	r3, #0
 81091f0:	d106      	bne.n	8109200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81091f2:	687b      	ldr	r3, [r7, #4]
 81091f4:	2200      	movs	r2, #0
 81091f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81091fa:	6878      	ldr	r0, [r7, #4]
 81091fc:	f7fb f80e 	bl	810421c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8109200:	687b      	ldr	r3, [r7, #4]
 8109202:	2224      	movs	r2, #36	@ 0x24
 8109204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8109208:	687b      	ldr	r3, [r7, #4]
 810920a:	681b      	ldr	r3, [r3, #0]
 810920c:	681a      	ldr	r2, [r3, #0]
 810920e:	687b      	ldr	r3, [r7, #4]
 8109210:	681b      	ldr	r3, [r3, #0]
 8109212:	f022 0201 	bic.w	r2, r2, #1
 8109216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8109218:	687b      	ldr	r3, [r7, #4]
 810921a:	685a      	ldr	r2, [r3, #4]
 810921c:	687b      	ldr	r3, [r7, #4]
 810921e:	681b      	ldr	r3, [r3, #0]
 8109220:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8109224:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8109226:	687b      	ldr	r3, [r7, #4]
 8109228:	681b      	ldr	r3, [r3, #0]
 810922a:	689a      	ldr	r2, [r3, #8]
 810922c:	687b      	ldr	r3, [r7, #4]
 810922e:	681b      	ldr	r3, [r3, #0]
 8109230:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8109234:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8109236:	687b      	ldr	r3, [r7, #4]
 8109238:	68db      	ldr	r3, [r3, #12]
 810923a:	2b01      	cmp	r3, #1
 810923c:	d107      	bne.n	810924e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810923e:	687b      	ldr	r3, [r7, #4]
 8109240:	689a      	ldr	r2, [r3, #8]
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	681b      	ldr	r3, [r3, #0]
 8109246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810924a:	609a      	str	r2, [r3, #8]
 810924c:	e006      	b.n	810925c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810924e:	687b      	ldr	r3, [r7, #4]
 8109250:	689a      	ldr	r2, [r3, #8]
 8109252:	687b      	ldr	r3, [r7, #4]
 8109254:	681b      	ldr	r3, [r3, #0]
 8109256:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810925a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	68db      	ldr	r3, [r3, #12]
 8109260:	2b02      	cmp	r3, #2
 8109262:	d108      	bne.n	8109276 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	681b      	ldr	r3, [r3, #0]
 8109268:	685a      	ldr	r2, [r3, #4]
 810926a:	687b      	ldr	r3, [r7, #4]
 810926c:	681b      	ldr	r3, [r3, #0]
 810926e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8109272:	605a      	str	r2, [r3, #4]
 8109274:	e007      	b.n	8109286 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	681b      	ldr	r3, [r3, #0]
 810927a:	685a      	ldr	r2, [r3, #4]
 810927c:	687b      	ldr	r3, [r7, #4]
 810927e:	681b      	ldr	r3, [r3, #0]
 8109280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8109284:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8109286:	687b      	ldr	r3, [r7, #4]
 8109288:	681b      	ldr	r3, [r3, #0]
 810928a:	685b      	ldr	r3, [r3, #4]
 810928c:	687a      	ldr	r2, [r7, #4]
 810928e:	6812      	ldr	r2, [r2, #0]
 8109290:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8109294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8109298:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	681b      	ldr	r3, [r3, #0]
 810929e:	68da      	ldr	r2, [r3, #12]
 81092a0:	687b      	ldr	r3, [r7, #4]
 81092a2:	681b      	ldr	r3, [r3, #0]
 81092a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81092a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	691a      	ldr	r2, [r3, #16]
 81092ae:	687b      	ldr	r3, [r7, #4]
 81092b0:	695b      	ldr	r3, [r3, #20]
 81092b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	699b      	ldr	r3, [r3, #24]
 81092ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	681b      	ldr	r3, [r3, #0]
 81092c0:	430a      	orrs	r2, r1
 81092c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	69d9      	ldr	r1, [r3, #28]
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	6a1a      	ldr	r2, [r3, #32]
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	681b      	ldr	r3, [r3, #0]
 81092d0:	430a      	orrs	r2, r1
 81092d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	681b      	ldr	r3, [r3, #0]
 81092d8:	681a      	ldr	r2, [r3, #0]
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	681b      	ldr	r3, [r3, #0]
 81092de:	f042 0201 	orr.w	r2, r2, #1
 81092e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81092e4:	687b      	ldr	r3, [r7, #4]
 81092e6:	2200      	movs	r2, #0
 81092e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	2220      	movs	r2, #32
 81092ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81092f2:	687b      	ldr	r3, [r7, #4]
 81092f4:	2200      	movs	r2, #0
 81092f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	2200      	movs	r2, #0
 81092fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8109300:	2300      	movs	r3, #0
}
 8109302:	4618      	mov	r0, r3
 8109304:	3708      	adds	r7, #8
 8109306:	46bd      	mov	sp, r7
 8109308:	bd80      	pop	{r7, pc}
	...

0810930c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 810930c:	b580      	push	{r7, lr}
 810930e:	b088      	sub	sp, #32
 8109310:	af02      	add	r7, sp, #8
 8109312:	60f8      	str	r0, [r7, #12]
 8109314:	607a      	str	r2, [r7, #4]
 8109316:	461a      	mov	r2, r3
 8109318:	460b      	mov	r3, r1
 810931a:	817b      	strh	r3, [r7, #10]
 810931c:	4613      	mov	r3, r2
 810931e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109320:	68fb      	ldr	r3, [r7, #12]
 8109322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109326:	b2db      	uxtb	r3, r3
 8109328:	2b20      	cmp	r3, #32
 810932a:	f040 80fd 	bne.w	8109528 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810932e:	68fb      	ldr	r3, [r7, #12]
 8109330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109334:	2b01      	cmp	r3, #1
 8109336:	d101      	bne.n	810933c <HAL_I2C_Master_Transmit+0x30>
 8109338:	2302      	movs	r3, #2
 810933a:	e0f6      	b.n	810952a <HAL_I2C_Master_Transmit+0x21e>
 810933c:	68fb      	ldr	r3, [r7, #12]
 810933e:	2201      	movs	r2, #1
 8109340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8109344:	f7fb fce4 	bl	8104d10 <HAL_GetTick>
 8109348:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810934a:	693b      	ldr	r3, [r7, #16]
 810934c:	9300      	str	r3, [sp, #0]
 810934e:	2319      	movs	r3, #25
 8109350:	2201      	movs	r2, #1
 8109352:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8109356:	68f8      	ldr	r0, [r7, #12]
 8109358:	f000 fa24 	bl	81097a4 <I2C_WaitOnFlagUntilTimeout>
 810935c:	4603      	mov	r3, r0
 810935e:	2b00      	cmp	r3, #0
 8109360:	d001      	beq.n	8109366 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8109362:	2301      	movs	r3, #1
 8109364:	e0e1      	b.n	810952a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8109366:	68fb      	ldr	r3, [r7, #12]
 8109368:	2221      	movs	r2, #33	@ 0x21
 810936a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810936e:	68fb      	ldr	r3, [r7, #12]
 8109370:	2210      	movs	r2, #16
 8109372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8109376:	68fb      	ldr	r3, [r7, #12]
 8109378:	2200      	movs	r2, #0
 810937a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810937c:	68fb      	ldr	r3, [r7, #12]
 810937e:	687a      	ldr	r2, [r7, #4]
 8109380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8109382:	68fb      	ldr	r3, [r7, #12]
 8109384:	893a      	ldrh	r2, [r7, #8]
 8109386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8109388:	68fb      	ldr	r3, [r7, #12]
 810938a:	2200      	movs	r2, #0
 810938c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810938e:	68fb      	ldr	r3, [r7, #12]
 8109390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109392:	b29b      	uxth	r3, r3
 8109394:	2bff      	cmp	r3, #255	@ 0xff
 8109396:	d906      	bls.n	81093a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8109398:	68fb      	ldr	r3, [r7, #12]
 810939a:	22ff      	movs	r2, #255	@ 0xff
 810939c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 810939e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81093a2:	617b      	str	r3, [r7, #20]
 81093a4:	e007      	b.n	81093b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81093a6:	68fb      	ldr	r3, [r7, #12]
 81093a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81093aa:	b29a      	uxth	r2, r3
 81093ac:	68fb      	ldr	r3, [r7, #12]
 81093ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 81093b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81093b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81093b6:	68fb      	ldr	r3, [r7, #12]
 81093b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81093ba:	2b00      	cmp	r3, #0
 81093bc:	d024      	beq.n	8109408 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81093be:	68fb      	ldr	r3, [r7, #12]
 81093c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81093c2:	781a      	ldrb	r2, [r3, #0]
 81093c4:	68fb      	ldr	r3, [r7, #12]
 81093c6:	681b      	ldr	r3, [r3, #0]
 81093c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81093ca:	68fb      	ldr	r3, [r7, #12]
 81093cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81093ce:	1c5a      	adds	r2, r3, #1
 81093d0:	68fb      	ldr	r3, [r7, #12]
 81093d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81093d4:	68fb      	ldr	r3, [r7, #12]
 81093d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81093d8:	b29b      	uxth	r3, r3
 81093da:	3b01      	subs	r3, #1
 81093dc:	b29a      	uxth	r2, r3
 81093de:	68fb      	ldr	r3, [r7, #12]
 81093e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81093e2:	68fb      	ldr	r3, [r7, #12]
 81093e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81093e6:	3b01      	subs	r3, #1
 81093e8:	b29a      	uxth	r2, r3
 81093ea:	68fb      	ldr	r3, [r7, #12]
 81093ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 81093ee:	68fb      	ldr	r3, [r7, #12]
 81093f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81093f2:	b2db      	uxtb	r3, r3
 81093f4:	3301      	adds	r3, #1
 81093f6:	b2da      	uxtb	r2, r3
 81093f8:	8979      	ldrh	r1, [r7, #10]
 81093fa:	4b4e      	ldr	r3, [pc, #312]	@ (8109534 <HAL_I2C_Master_Transmit+0x228>)
 81093fc:	9300      	str	r3, [sp, #0]
 81093fe:	697b      	ldr	r3, [r7, #20]
 8109400:	68f8      	ldr	r0, [r7, #12]
 8109402:	f000 fc1f 	bl	8109c44 <I2C_TransferConfig>
 8109406:	e066      	b.n	81094d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8109408:	68fb      	ldr	r3, [r7, #12]
 810940a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810940c:	b2da      	uxtb	r2, r3
 810940e:	8979      	ldrh	r1, [r7, #10]
 8109410:	4b48      	ldr	r3, [pc, #288]	@ (8109534 <HAL_I2C_Master_Transmit+0x228>)
 8109412:	9300      	str	r3, [sp, #0]
 8109414:	697b      	ldr	r3, [r7, #20]
 8109416:	68f8      	ldr	r0, [r7, #12]
 8109418:	f000 fc14 	bl	8109c44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 810941c:	e05b      	b.n	81094d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810941e:	693a      	ldr	r2, [r7, #16]
 8109420:	6a39      	ldr	r1, [r7, #32]
 8109422:	68f8      	ldr	r0, [r7, #12]
 8109424:	f000 fa17 	bl	8109856 <I2C_WaitOnTXISFlagUntilTimeout>
 8109428:	4603      	mov	r3, r0
 810942a:	2b00      	cmp	r3, #0
 810942c:	d001      	beq.n	8109432 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 810942e:	2301      	movs	r3, #1
 8109430:	e07b      	b.n	810952a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8109432:	68fb      	ldr	r3, [r7, #12]
 8109434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109436:	781a      	ldrb	r2, [r3, #0]
 8109438:	68fb      	ldr	r3, [r7, #12]
 810943a:	681b      	ldr	r3, [r3, #0]
 810943c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810943e:	68fb      	ldr	r3, [r7, #12]
 8109440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109442:	1c5a      	adds	r2, r3, #1
 8109444:	68fb      	ldr	r3, [r7, #12]
 8109446:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8109448:	68fb      	ldr	r3, [r7, #12]
 810944a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810944c:	b29b      	uxth	r3, r3
 810944e:	3b01      	subs	r3, #1
 8109450:	b29a      	uxth	r2, r3
 8109452:	68fb      	ldr	r3, [r7, #12]
 8109454:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8109456:	68fb      	ldr	r3, [r7, #12]
 8109458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810945a:	3b01      	subs	r3, #1
 810945c:	b29a      	uxth	r2, r3
 810945e:	68fb      	ldr	r3, [r7, #12]
 8109460:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8109462:	68fb      	ldr	r3, [r7, #12]
 8109464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109466:	b29b      	uxth	r3, r3
 8109468:	2b00      	cmp	r3, #0
 810946a:	d034      	beq.n	81094d6 <HAL_I2C_Master_Transmit+0x1ca>
 810946c:	68fb      	ldr	r3, [r7, #12]
 810946e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109470:	2b00      	cmp	r3, #0
 8109472:	d130      	bne.n	81094d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8109474:	693b      	ldr	r3, [r7, #16]
 8109476:	9300      	str	r3, [sp, #0]
 8109478:	6a3b      	ldr	r3, [r7, #32]
 810947a:	2200      	movs	r2, #0
 810947c:	2180      	movs	r1, #128	@ 0x80
 810947e:	68f8      	ldr	r0, [r7, #12]
 8109480:	f000 f990 	bl	81097a4 <I2C_WaitOnFlagUntilTimeout>
 8109484:	4603      	mov	r3, r0
 8109486:	2b00      	cmp	r3, #0
 8109488:	d001      	beq.n	810948e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 810948a:	2301      	movs	r3, #1
 810948c:	e04d      	b.n	810952a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810948e:	68fb      	ldr	r3, [r7, #12]
 8109490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109492:	b29b      	uxth	r3, r3
 8109494:	2bff      	cmp	r3, #255	@ 0xff
 8109496:	d90e      	bls.n	81094b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8109498:	68fb      	ldr	r3, [r7, #12]
 810949a:	22ff      	movs	r2, #255	@ 0xff
 810949c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810949e:	68fb      	ldr	r3, [r7, #12]
 81094a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81094a2:	b2da      	uxtb	r2, r3
 81094a4:	8979      	ldrh	r1, [r7, #10]
 81094a6:	2300      	movs	r3, #0
 81094a8:	9300      	str	r3, [sp, #0]
 81094aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81094ae:	68f8      	ldr	r0, [r7, #12]
 81094b0:	f000 fbc8 	bl	8109c44 <I2C_TransferConfig>
 81094b4:	e00f      	b.n	81094d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81094b6:	68fb      	ldr	r3, [r7, #12]
 81094b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81094ba:	b29a      	uxth	r2, r3
 81094bc:	68fb      	ldr	r3, [r7, #12]
 81094be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81094c0:	68fb      	ldr	r3, [r7, #12]
 81094c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81094c4:	b2da      	uxtb	r2, r3
 81094c6:	8979      	ldrh	r1, [r7, #10]
 81094c8:	2300      	movs	r3, #0
 81094ca:	9300      	str	r3, [sp, #0]
 81094cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81094d0:	68f8      	ldr	r0, [r7, #12]
 81094d2:	f000 fbb7 	bl	8109c44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81094d6:	68fb      	ldr	r3, [r7, #12]
 81094d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81094da:	b29b      	uxth	r3, r3
 81094dc:	2b00      	cmp	r3, #0
 81094de:	d19e      	bne.n	810941e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81094e0:	693a      	ldr	r2, [r7, #16]
 81094e2:	6a39      	ldr	r1, [r7, #32]
 81094e4:	68f8      	ldr	r0, [r7, #12]
 81094e6:	f000 f9fd 	bl	81098e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 81094ea:	4603      	mov	r3, r0
 81094ec:	2b00      	cmp	r3, #0
 81094ee:	d001      	beq.n	81094f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 81094f0:	2301      	movs	r3, #1
 81094f2:	e01a      	b.n	810952a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81094f4:	68fb      	ldr	r3, [r7, #12]
 81094f6:	681b      	ldr	r3, [r3, #0]
 81094f8:	2220      	movs	r2, #32
 81094fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81094fc:	68fb      	ldr	r3, [r7, #12]
 81094fe:	681b      	ldr	r3, [r3, #0]
 8109500:	6859      	ldr	r1, [r3, #4]
 8109502:	68fb      	ldr	r3, [r7, #12]
 8109504:	681a      	ldr	r2, [r3, #0]
 8109506:	4b0c      	ldr	r3, [pc, #48]	@ (8109538 <HAL_I2C_Master_Transmit+0x22c>)
 8109508:	400b      	ands	r3, r1
 810950a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810950c:	68fb      	ldr	r3, [r7, #12]
 810950e:	2220      	movs	r2, #32
 8109510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8109514:	68fb      	ldr	r3, [r7, #12]
 8109516:	2200      	movs	r2, #0
 8109518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810951c:	68fb      	ldr	r3, [r7, #12]
 810951e:	2200      	movs	r2, #0
 8109520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109524:	2300      	movs	r3, #0
 8109526:	e000      	b.n	810952a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8109528:	2302      	movs	r3, #2
  }
}
 810952a:	4618      	mov	r0, r3
 810952c:	3718      	adds	r7, #24
 810952e:	46bd      	mov	sp, r7
 8109530:	bd80      	pop	{r7, pc}
 8109532:	bf00      	nop
 8109534:	80002000 	.word	0x80002000
 8109538:	fe00e800 	.word	0xfe00e800

0810953c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 810953c:	b580      	push	{r7, lr}
 810953e:	b088      	sub	sp, #32
 8109540:	af02      	add	r7, sp, #8
 8109542:	60f8      	str	r0, [r7, #12]
 8109544:	607a      	str	r2, [r7, #4]
 8109546:	461a      	mov	r2, r3
 8109548:	460b      	mov	r3, r1
 810954a:	817b      	strh	r3, [r7, #10]
 810954c:	4613      	mov	r3, r2
 810954e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109550:	68fb      	ldr	r3, [r7, #12]
 8109552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109556:	b2db      	uxtb	r3, r3
 8109558:	2b20      	cmp	r3, #32
 810955a:	f040 80db 	bne.w	8109714 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810955e:	68fb      	ldr	r3, [r7, #12]
 8109560:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109564:	2b01      	cmp	r3, #1
 8109566:	d101      	bne.n	810956c <HAL_I2C_Master_Receive+0x30>
 8109568:	2302      	movs	r3, #2
 810956a:	e0d4      	b.n	8109716 <HAL_I2C_Master_Receive+0x1da>
 810956c:	68fb      	ldr	r3, [r7, #12]
 810956e:	2201      	movs	r2, #1
 8109570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8109574:	f7fb fbcc 	bl	8104d10 <HAL_GetTick>
 8109578:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810957a:	697b      	ldr	r3, [r7, #20]
 810957c:	9300      	str	r3, [sp, #0]
 810957e:	2319      	movs	r3, #25
 8109580:	2201      	movs	r2, #1
 8109582:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8109586:	68f8      	ldr	r0, [r7, #12]
 8109588:	f000 f90c 	bl	81097a4 <I2C_WaitOnFlagUntilTimeout>
 810958c:	4603      	mov	r3, r0
 810958e:	2b00      	cmp	r3, #0
 8109590:	d001      	beq.n	8109596 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8109592:	2301      	movs	r3, #1
 8109594:	e0bf      	b.n	8109716 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8109596:	68fb      	ldr	r3, [r7, #12]
 8109598:	2222      	movs	r2, #34	@ 0x22
 810959a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810959e:	68fb      	ldr	r3, [r7, #12]
 81095a0:	2210      	movs	r2, #16
 81095a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81095a6:	68fb      	ldr	r3, [r7, #12]
 81095a8:	2200      	movs	r2, #0
 81095aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81095ac:	68fb      	ldr	r3, [r7, #12]
 81095ae:	687a      	ldr	r2, [r7, #4]
 81095b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81095b2:	68fb      	ldr	r3, [r7, #12]
 81095b4:	893a      	ldrh	r2, [r7, #8]
 81095b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81095b8:	68fb      	ldr	r3, [r7, #12]
 81095ba:	2200      	movs	r2, #0
 81095bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81095be:	68fb      	ldr	r3, [r7, #12]
 81095c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81095c2:	b29b      	uxth	r3, r3
 81095c4:	2bff      	cmp	r3, #255	@ 0xff
 81095c6:	d90e      	bls.n	81095e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81095c8:	68fb      	ldr	r3, [r7, #12]
 81095ca:	22ff      	movs	r2, #255	@ 0xff
 81095cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81095ce:	68fb      	ldr	r3, [r7, #12]
 81095d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81095d2:	b2da      	uxtb	r2, r3
 81095d4:	8979      	ldrh	r1, [r7, #10]
 81095d6:	4b52      	ldr	r3, [pc, #328]	@ (8109720 <HAL_I2C_Master_Receive+0x1e4>)
 81095d8:	9300      	str	r3, [sp, #0]
 81095da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81095de:	68f8      	ldr	r0, [r7, #12]
 81095e0:	f000 fb30 	bl	8109c44 <I2C_TransferConfig>
 81095e4:	e06d      	b.n	81096c2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81095e6:	68fb      	ldr	r3, [r7, #12]
 81095e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81095ea:	b29a      	uxth	r2, r3
 81095ec:	68fb      	ldr	r3, [r7, #12]
 81095ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81095f0:	68fb      	ldr	r3, [r7, #12]
 81095f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81095f4:	b2da      	uxtb	r2, r3
 81095f6:	8979      	ldrh	r1, [r7, #10]
 81095f8:	4b49      	ldr	r3, [pc, #292]	@ (8109720 <HAL_I2C_Master_Receive+0x1e4>)
 81095fa:	9300      	str	r3, [sp, #0]
 81095fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8109600:	68f8      	ldr	r0, [r7, #12]
 8109602:	f000 fb1f 	bl	8109c44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8109606:	e05c      	b.n	81096c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8109608:	697a      	ldr	r2, [r7, #20]
 810960a:	6a39      	ldr	r1, [r7, #32]
 810960c:	68f8      	ldr	r0, [r7, #12]
 810960e:	f000 f9ad 	bl	810996c <I2C_WaitOnRXNEFlagUntilTimeout>
 8109612:	4603      	mov	r3, r0
 8109614:	2b00      	cmp	r3, #0
 8109616:	d001      	beq.n	810961c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8109618:	2301      	movs	r3, #1
 810961a:	e07c      	b.n	8109716 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810961c:	68fb      	ldr	r3, [r7, #12]
 810961e:	681b      	ldr	r3, [r3, #0]
 8109620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8109622:	68fb      	ldr	r3, [r7, #12]
 8109624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109626:	b2d2      	uxtb	r2, r2
 8109628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810962a:	68fb      	ldr	r3, [r7, #12]
 810962c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810962e:	1c5a      	adds	r2, r3, #1
 8109630:	68fb      	ldr	r3, [r7, #12]
 8109632:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8109634:	68fb      	ldr	r3, [r7, #12]
 8109636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109638:	3b01      	subs	r3, #1
 810963a:	b29a      	uxth	r2, r3
 810963c:	68fb      	ldr	r3, [r7, #12]
 810963e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8109640:	68fb      	ldr	r3, [r7, #12]
 8109642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109644:	b29b      	uxth	r3, r3
 8109646:	3b01      	subs	r3, #1
 8109648:	b29a      	uxth	r2, r3
 810964a:	68fb      	ldr	r3, [r7, #12]
 810964c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810964e:	68fb      	ldr	r3, [r7, #12]
 8109650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109652:	b29b      	uxth	r3, r3
 8109654:	2b00      	cmp	r3, #0
 8109656:	d034      	beq.n	81096c2 <HAL_I2C_Master_Receive+0x186>
 8109658:	68fb      	ldr	r3, [r7, #12]
 810965a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810965c:	2b00      	cmp	r3, #0
 810965e:	d130      	bne.n	81096c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8109660:	697b      	ldr	r3, [r7, #20]
 8109662:	9300      	str	r3, [sp, #0]
 8109664:	6a3b      	ldr	r3, [r7, #32]
 8109666:	2200      	movs	r2, #0
 8109668:	2180      	movs	r1, #128	@ 0x80
 810966a:	68f8      	ldr	r0, [r7, #12]
 810966c:	f000 f89a 	bl	81097a4 <I2C_WaitOnFlagUntilTimeout>
 8109670:	4603      	mov	r3, r0
 8109672:	2b00      	cmp	r3, #0
 8109674:	d001      	beq.n	810967a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8109676:	2301      	movs	r3, #1
 8109678:	e04d      	b.n	8109716 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810967a:	68fb      	ldr	r3, [r7, #12]
 810967c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810967e:	b29b      	uxth	r3, r3
 8109680:	2bff      	cmp	r3, #255	@ 0xff
 8109682:	d90e      	bls.n	81096a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8109684:	68fb      	ldr	r3, [r7, #12]
 8109686:	22ff      	movs	r2, #255	@ 0xff
 8109688:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810968a:	68fb      	ldr	r3, [r7, #12]
 810968c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810968e:	b2da      	uxtb	r2, r3
 8109690:	8979      	ldrh	r1, [r7, #10]
 8109692:	2300      	movs	r3, #0
 8109694:	9300      	str	r3, [sp, #0]
 8109696:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810969a:	68f8      	ldr	r0, [r7, #12]
 810969c:	f000 fad2 	bl	8109c44 <I2C_TransferConfig>
 81096a0:	e00f      	b.n	81096c2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81096a2:	68fb      	ldr	r3, [r7, #12]
 81096a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81096a6:	b29a      	uxth	r2, r3
 81096a8:	68fb      	ldr	r3, [r7, #12]
 81096aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81096ac:	68fb      	ldr	r3, [r7, #12]
 81096ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81096b0:	b2da      	uxtb	r2, r3
 81096b2:	8979      	ldrh	r1, [r7, #10]
 81096b4:	2300      	movs	r3, #0
 81096b6:	9300      	str	r3, [sp, #0]
 81096b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81096bc:	68f8      	ldr	r0, [r7, #12]
 81096be:	f000 fac1 	bl	8109c44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81096c2:	68fb      	ldr	r3, [r7, #12]
 81096c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81096c6:	b29b      	uxth	r3, r3
 81096c8:	2b00      	cmp	r3, #0
 81096ca:	d19d      	bne.n	8109608 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81096cc:	697a      	ldr	r2, [r7, #20]
 81096ce:	6a39      	ldr	r1, [r7, #32]
 81096d0:	68f8      	ldr	r0, [r7, #12]
 81096d2:	f000 f907 	bl	81098e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 81096d6:	4603      	mov	r3, r0
 81096d8:	2b00      	cmp	r3, #0
 81096da:	d001      	beq.n	81096e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81096dc:	2301      	movs	r3, #1
 81096de:	e01a      	b.n	8109716 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81096e0:	68fb      	ldr	r3, [r7, #12]
 81096e2:	681b      	ldr	r3, [r3, #0]
 81096e4:	2220      	movs	r2, #32
 81096e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81096e8:	68fb      	ldr	r3, [r7, #12]
 81096ea:	681b      	ldr	r3, [r3, #0]
 81096ec:	6859      	ldr	r1, [r3, #4]
 81096ee:	68fb      	ldr	r3, [r7, #12]
 81096f0:	681a      	ldr	r2, [r3, #0]
 81096f2:	4b0c      	ldr	r3, [pc, #48]	@ (8109724 <HAL_I2C_Master_Receive+0x1e8>)
 81096f4:	400b      	ands	r3, r1
 81096f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81096f8:	68fb      	ldr	r3, [r7, #12]
 81096fa:	2220      	movs	r2, #32
 81096fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8109700:	68fb      	ldr	r3, [r7, #12]
 8109702:	2200      	movs	r2, #0
 8109704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109708:	68fb      	ldr	r3, [r7, #12]
 810970a:	2200      	movs	r2, #0
 810970c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109710:	2300      	movs	r3, #0
 8109712:	e000      	b.n	8109716 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8109714:	2302      	movs	r3, #2
  }
}
 8109716:	4618      	mov	r0, r3
 8109718:	3718      	adds	r7, #24
 810971a:	46bd      	mov	sp, r7
 810971c:	bd80      	pop	{r7, pc}
 810971e:	bf00      	nop
 8109720:	80002400 	.word	0x80002400
 8109724:	fe00e800 	.word	0xfe00e800

08109728 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8109728:	b480      	push	{r7}
 810972a:	b083      	sub	sp, #12
 810972c:	af00      	add	r7, sp, #0
 810972e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109736:	b2db      	uxtb	r3, r3
}
 8109738:	4618      	mov	r0, r3
 810973a:	370c      	adds	r7, #12
 810973c:	46bd      	mov	sp, r7
 810973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109742:	4770      	bx	lr

08109744 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8109744:	b480      	push	{r7}
 8109746:	b083      	sub	sp, #12
 8109748:	af00      	add	r7, sp, #0
 810974a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 810974c:	687b      	ldr	r3, [r7, #4]
 810974e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8109750:	4618      	mov	r0, r3
 8109752:	370c      	adds	r7, #12
 8109754:	46bd      	mov	sp, r7
 8109756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810975a:	4770      	bx	lr

0810975c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810975c:	b480      	push	{r7}
 810975e:	b083      	sub	sp, #12
 8109760:	af00      	add	r7, sp, #0
 8109762:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	681b      	ldr	r3, [r3, #0]
 8109768:	699b      	ldr	r3, [r3, #24]
 810976a:	f003 0302 	and.w	r3, r3, #2
 810976e:	2b02      	cmp	r3, #2
 8109770:	d103      	bne.n	810977a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8109772:	687b      	ldr	r3, [r7, #4]
 8109774:	681b      	ldr	r3, [r3, #0]
 8109776:	2200      	movs	r2, #0
 8109778:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	681b      	ldr	r3, [r3, #0]
 810977e:	699b      	ldr	r3, [r3, #24]
 8109780:	f003 0301 	and.w	r3, r3, #1
 8109784:	2b01      	cmp	r3, #1
 8109786:	d007      	beq.n	8109798 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8109788:	687b      	ldr	r3, [r7, #4]
 810978a:	681b      	ldr	r3, [r3, #0]
 810978c:	699a      	ldr	r2, [r3, #24]
 810978e:	687b      	ldr	r3, [r7, #4]
 8109790:	681b      	ldr	r3, [r3, #0]
 8109792:	f042 0201 	orr.w	r2, r2, #1
 8109796:	619a      	str	r2, [r3, #24]
  }
}
 8109798:	bf00      	nop
 810979a:	370c      	adds	r7, #12
 810979c:	46bd      	mov	sp, r7
 810979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097a2:	4770      	bx	lr

081097a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81097a4:	b580      	push	{r7, lr}
 81097a6:	b084      	sub	sp, #16
 81097a8:	af00      	add	r7, sp, #0
 81097aa:	60f8      	str	r0, [r7, #12]
 81097ac:	60b9      	str	r1, [r7, #8]
 81097ae:	603b      	str	r3, [r7, #0]
 81097b0:	4613      	mov	r3, r2
 81097b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81097b4:	e03b      	b.n	810982e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81097b6:	69ba      	ldr	r2, [r7, #24]
 81097b8:	6839      	ldr	r1, [r7, #0]
 81097ba:	68f8      	ldr	r0, [r7, #12]
 81097bc:	f000 f962 	bl	8109a84 <I2C_IsErrorOccurred>
 81097c0:	4603      	mov	r3, r0
 81097c2:	2b00      	cmp	r3, #0
 81097c4:	d001      	beq.n	81097ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 81097c6:	2301      	movs	r3, #1
 81097c8:	e041      	b.n	810984e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81097ca:	683b      	ldr	r3, [r7, #0]
 81097cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81097d0:	d02d      	beq.n	810982e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81097d2:	f7fb fa9d 	bl	8104d10 <HAL_GetTick>
 81097d6:	4602      	mov	r2, r0
 81097d8:	69bb      	ldr	r3, [r7, #24]
 81097da:	1ad3      	subs	r3, r2, r3
 81097dc:	683a      	ldr	r2, [r7, #0]
 81097de:	429a      	cmp	r2, r3
 81097e0:	d302      	bcc.n	81097e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 81097e2:	683b      	ldr	r3, [r7, #0]
 81097e4:	2b00      	cmp	r3, #0
 81097e6:	d122      	bne.n	810982e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81097e8:	68fb      	ldr	r3, [r7, #12]
 81097ea:	681b      	ldr	r3, [r3, #0]
 81097ec:	699a      	ldr	r2, [r3, #24]
 81097ee:	68bb      	ldr	r3, [r7, #8]
 81097f0:	4013      	ands	r3, r2
 81097f2:	68ba      	ldr	r2, [r7, #8]
 81097f4:	429a      	cmp	r2, r3
 81097f6:	bf0c      	ite	eq
 81097f8:	2301      	moveq	r3, #1
 81097fa:	2300      	movne	r3, #0
 81097fc:	b2db      	uxtb	r3, r3
 81097fe:	461a      	mov	r2, r3
 8109800:	79fb      	ldrb	r3, [r7, #7]
 8109802:	429a      	cmp	r2, r3
 8109804:	d113      	bne.n	810982e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109806:	68fb      	ldr	r3, [r7, #12]
 8109808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810980a:	f043 0220 	orr.w	r2, r3, #32
 810980e:	68fb      	ldr	r3, [r7, #12]
 8109810:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8109812:	68fb      	ldr	r3, [r7, #12]
 8109814:	2220      	movs	r2, #32
 8109816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810981a:	68fb      	ldr	r3, [r7, #12]
 810981c:	2200      	movs	r2, #0
 810981e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8109822:	68fb      	ldr	r3, [r7, #12]
 8109824:	2200      	movs	r2, #0
 8109826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 810982a:	2301      	movs	r3, #1
 810982c:	e00f      	b.n	810984e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810982e:	68fb      	ldr	r3, [r7, #12]
 8109830:	681b      	ldr	r3, [r3, #0]
 8109832:	699a      	ldr	r2, [r3, #24]
 8109834:	68bb      	ldr	r3, [r7, #8]
 8109836:	4013      	ands	r3, r2
 8109838:	68ba      	ldr	r2, [r7, #8]
 810983a:	429a      	cmp	r2, r3
 810983c:	bf0c      	ite	eq
 810983e:	2301      	moveq	r3, #1
 8109840:	2300      	movne	r3, #0
 8109842:	b2db      	uxtb	r3, r3
 8109844:	461a      	mov	r2, r3
 8109846:	79fb      	ldrb	r3, [r7, #7]
 8109848:	429a      	cmp	r2, r3
 810984a:	d0b4      	beq.n	81097b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810984c:	2300      	movs	r3, #0
}
 810984e:	4618      	mov	r0, r3
 8109850:	3710      	adds	r7, #16
 8109852:	46bd      	mov	sp, r7
 8109854:	bd80      	pop	{r7, pc}

08109856 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8109856:	b580      	push	{r7, lr}
 8109858:	b084      	sub	sp, #16
 810985a:	af00      	add	r7, sp, #0
 810985c:	60f8      	str	r0, [r7, #12]
 810985e:	60b9      	str	r1, [r7, #8]
 8109860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8109862:	e033      	b.n	81098cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8109864:	687a      	ldr	r2, [r7, #4]
 8109866:	68b9      	ldr	r1, [r7, #8]
 8109868:	68f8      	ldr	r0, [r7, #12]
 810986a:	f000 f90b 	bl	8109a84 <I2C_IsErrorOccurred>
 810986e:	4603      	mov	r3, r0
 8109870:	2b00      	cmp	r3, #0
 8109872:	d001      	beq.n	8109878 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8109874:	2301      	movs	r3, #1
 8109876:	e031      	b.n	81098dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109878:	68bb      	ldr	r3, [r7, #8]
 810987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810987e:	d025      	beq.n	81098cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109880:	f7fb fa46 	bl	8104d10 <HAL_GetTick>
 8109884:	4602      	mov	r2, r0
 8109886:	687b      	ldr	r3, [r7, #4]
 8109888:	1ad3      	subs	r3, r2, r3
 810988a:	68ba      	ldr	r2, [r7, #8]
 810988c:	429a      	cmp	r2, r3
 810988e:	d302      	bcc.n	8109896 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8109890:	68bb      	ldr	r3, [r7, #8]
 8109892:	2b00      	cmp	r3, #0
 8109894:	d11a      	bne.n	81098cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8109896:	68fb      	ldr	r3, [r7, #12]
 8109898:	681b      	ldr	r3, [r3, #0]
 810989a:	699b      	ldr	r3, [r3, #24]
 810989c:	f003 0302 	and.w	r3, r3, #2
 81098a0:	2b02      	cmp	r3, #2
 81098a2:	d013      	beq.n	81098cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81098a4:	68fb      	ldr	r3, [r7, #12]
 81098a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81098a8:	f043 0220 	orr.w	r2, r3, #32
 81098ac:	68fb      	ldr	r3, [r7, #12]
 81098ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81098b0:	68fb      	ldr	r3, [r7, #12]
 81098b2:	2220      	movs	r2, #32
 81098b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81098b8:	68fb      	ldr	r3, [r7, #12]
 81098ba:	2200      	movs	r2, #0
 81098bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81098c0:	68fb      	ldr	r3, [r7, #12]
 81098c2:	2200      	movs	r2, #0
 81098c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 81098c8:	2301      	movs	r3, #1
 81098ca:	e007      	b.n	81098dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81098cc:	68fb      	ldr	r3, [r7, #12]
 81098ce:	681b      	ldr	r3, [r3, #0]
 81098d0:	699b      	ldr	r3, [r3, #24]
 81098d2:	f003 0302 	and.w	r3, r3, #2
 81098d6:	2b02      	cmp	r3, #2
 81098d8:	d1c4      	bne.n	8109864 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81098da:	2300      	movs	r3, #0
}
 81098dc:	4618      	mov	r0, r3
 81098de:	3710      	adds	r7, #16
 81098e0:	46bd      	mov	sp, r7
 81098e2:	bd80      	pop	{r7, pc}

081098e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81098e4:	b580      	push	{r7, lr}
 81098e6:	b084      	sub	sp, #16
 81098e8:	af00      	add	r7, sp, #0
 81098ea:	60f8      	str	r0, [r7, #12]
 81098ec:	60b9      	str	r1, [r7, #8]
 81098ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81098f0:	e02f      	b.n	8109952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81098f2:	687a      	ldr	r2, [r7, #4]
 81098f4:	68b9      	ldr	r1, [r7, #8]
 81098f6:	68f8      	ldr	r0, [r7, #12]
 81098f8:	f000 f8c4 	bl	8109a84 <I2C_IsErrorOccurred>
 81098fc:	4603      	mov	r3, r0
 81098fe:	2b00      	cmp	r3, #0
 8109900:	d001      	beq.n	8109906 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8109902:	2301      	movs	r3, #1
 8109904:	e02d      	b.n	8109962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109906:	f7fb fa03 	bl	8104d10 <HAL_GetTick>
 810990a:	4602      	mov	r2, r0
 810990c:	687b      	ldr	r3, [r7, #4]
 810990e:	1ad3      	subs	r3, r2, r3
 8109910:	68ba      	ldr	r2, [r7, #8]
 8109912:	429a      	cmp	r2, r3
 8109914:	d302      	bcc.n	810991c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8109916:	68bb      	ldr	r3, [r7, #8]
 8109918:	2b00      	cmp	r3, #0
 810991a:	d11a      	bne.n	8109952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 810991c:	68fb      	ldr	r3, [r7, #12]
 810991e:	681b      	ldr	r3, [r3, #0]
 8109920:	699b      	ldr	r3, [r3, #24]
 8109922:	f003 0320 	and.w	r3, r3, #32
 8109926:	2b20      	cmp	r3, #32
 8109928:	d013      	beq.n	8109952 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810992a:	68fb      	ldr	r3, [r7, #12]
 810992c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810992e:	f043 0220 	orr.w	r2, r3, #32
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8109936:	68fb      	ldr	r3, [r7, #12]
 8109938:	2220      	movs	r2, #32
 810993a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810993e:	68fb      	ldr	r3, [r7, #12]
 8109940:	2200      	movs	r2, #0
 8109942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8109946:	68fb      	ldr	r3, [r7, #12]
 8109948:	2200      	movs	r2, #0
 810994a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 810994e:	2301      	movs	r3, #1
 8109950:	e007      	b.n	8109962 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109952:	68fb      	ldr	r3, [r7, #12]
 8109954:	681b      	ldr	r3, [r3, #0]
 8109956:	699b      	ldr	r3, [r3, #24]
 8109958:	f003 0320 	and.w	r3, r3, #32
 810995c:	2b20      	cmp	r3, #32
 810995e:	d1c8      	bne.n	81098f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8109960:	2300      	movs	r3, #0
}
 8109962:	4618      	mov	r0, r3
 8109964:	3710      	adds	r7, #16
 8109966:	46bd      	mov	sp, r7
 8109968:	bd80      	pop	{r7, pc}
	...

0810996c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810996c:	b580      	push	{r7, lr}
 810996e:	b086      	sub	sp, #24
 8109970:	af00      	add	r7, sp, #0
 8109972:	60f8      	str	r0, [r7, #12]
 8109974:	60b9      	str	r1, [r7, #8]
 8109976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109978:	2300      	movs	r3, #0
 810997a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 810997c:	e071      	b.n	8109a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810997e:	687a      	ldr	r2, [r7, #4]
 8109980:	68b9      	ldr	r1, [r7, #8]
 8109982:	68f8      	ldr	r0, [r7, #12]
 8109984:	f000 f87e 	bl	8109a84 <I2C_IsErrorOccurred>
 8109988:	4603      	mov	r3, r0
 810998a:	2b00      	cmp	r3, #0
 810998c:	d001      	beq.n	8109992 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 810998e:	2301      	movs	r3, #1
 8109990:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8109992:	68fb      	ldr	r3, [r7, #12]
 8109994:	681b      	ldr	r3, [r3, #0]
 8109996:	699b      	ldr	r3, [r3, #24]
 8109998:	f003 0320 	and.w	r3, r3, #32
 810999c:	2b20      	cmp	r3, #32
 810999e:	d13b      	bne.n	8109a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 81099a0:	7dfb      	ldrb	r3, [r7, #23]
 81099a2:	2b00      	cmp	r3, #0
 81099a4:	d138      	bne.n	8109a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81099a6:	68fb      	ldr	r3, [r7, #12]
 81099a8:	681b      	ldr	r3, [r3, #0]
 81099aa:	699b      	ldr	r3, [r3, #24]
 81099ac:	f003 0304 	and.w	r3, r3, #4
 81099b0:	2b04      	cmp	r3, #4
 81099b2:	d105      	bne.n	81099c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 81099b4:	68fb      	ldr	r3, [r7, #12]
 81099b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81099b8:	2b00      	cmp	r3, #0
 81099ba:	d001      	beq.n	81099c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 81099bc:	2300      	movs	r3, #0
 81099be:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81099c0:	68fb      	ldr	r3, [r7, #12]
 81099c2:	681b      	ldr	r3, [r3, #0]
 81099c4:	699b      	ldr	r3, [r3, #24]
 81099c6:	f003 0310 	and.w	r3, r3, #16
 81099ca:	2b10      	cmp	r3, #16
 81099cc:	d121      	bne.n	8109a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81099ce:	68fb      	ldr	r3, [r7, #12]
 81099d0:	681b      	ldr	r3, [r3, #0]
 81099d2:	2210      	movs	r2, #16
 81099d4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81099d6:	68fb      	ldr	r3, [r7, #12]
 81099d8:	2204      	movs	r2, #4
 81099da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81099dc:	68fb      	ldr	r3, [r7, #12]
 81099de:	681b      	ldr	r3, [r3, #0]
 81099e0:	2220      	movs	r2, #32
 81099e2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81099e4:	68fb      	ldr	r3, [r7, #12]
 81099e6:	681b      	ldr	r3, [r3, #0]
 81099e8:	6859      	ldr	r1, [r3, #4]
 81099ea:	68fb      	ldr	r3, [r7, #12]
 81099ec:	681a      	ldr	r2, [r3, #0]
 81099ee:	4b24      	ldr	r3, [pc, #144]	@ (8109a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 81099f0:	400b      	ands	r3, r1
 81099f2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81099f4:	68fb      	ldr	r3, [r7, #12]
 81099f6:	2220      	movs	r2, #32
 81099f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81099fc:	68fb      	ldr	r3, [r7, #12]
 81099fe:	2200      	movs	r2, #0
 8109a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8109a04:	68fb      	ldr	r3, [r7, #12]
 8109a06:	2200      	movs	r2, #0
 8109a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8109a0c:	2301      	movs	r3, #1
 8109a0e:	75fb      	strb	r3, [r7, #23]
 8109a10:	e002      	b.n	8109a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8109a12:	68fb      	ldr	r3, [r7, #12]
 8109a14:	2200      	movs	r2, #0
 8109a16:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8109a18:	f7fb f97a 	bl	8104d10 <HAL_GetTick>
 8109a1c:	4602      	mov	r2, r0
 8109a1e:	687b      	ldr	r3, [r7, #4]
 8109a20:	1ad3      	subs	r3, r2, r3
 8109a22:	68ba      	ldr	r2, [r7, #8]
 8109a24:	429a      	cmp	r2, r3
 8109a26:	d302      	bcc.n	8109a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8109a28:	68bb      	ldr	r3, [r7, #8]
 8109a2a:	2b00      	cmp	r3, #0
 8109a2c:	d119      	bne.n	8109a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8109a2e:	7dfb      	ldrb	r3, [r7, #23]
 8109a30:	2b00      	cmp	r3, #0
 8109a32:	d116      	bne.n	8109a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8109a34:	68fb      	ldr	r3, [r7, #12]
 8109a36:	681b      	ldr	r3, [r3, #0]
 8109a38:	699b      	ldr	r3, [r3, #24]
 8109a3a:	f003 0304 	and.w	r3, r3, #4
 8109a3e:	2b04      	cmp	r3, #4
 8109a40:	d00f      	beq.n	8109a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109a42:	68fb      	ldr	r3, [r7, #12]
 8109a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109a46:	f043 0220 	orr.w	r2, r3, #32
 8109a4a:	68fb      	ldr	r3, [r7, #12]
 8109a4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8109a4e:	68fb      	ldr	r3, [r7, #12]
 8109a50:	2220      	movs	r2, #32
 8109a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8109a56:	68fb      	ldr	r3, [r7, #12]
 8109a58:	2200      	movs	r2, #0
 8109a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8109a5e:	2301      	movs	r3, #1
 8109a60:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8109a62:	68fb      	ldr	r3, [r7, #12]
 8109a64:	681b      	ldr	r3, [r3, #0]
 8109a66:	699b      	ldr	r3, [r3, #24]
 8109a68:	f003 0304 	and.w	r3, r3, #4
 8109a6c:	2b04      	cmp	r3, #4
 8109a6e:	d002      	beq.n	8109a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8109a70:	7dfb      	ldrb	r3, [r7, #23]
 8109a72:	2b00      	cmp	r3, #0
 8109a74:	d083      	beq.n	810997e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8109a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8109a78:	4618      	mov	r0, r3
 8109a7a:	3718      	adds	r7, #24
 8109a7c:	46bd      	mov	sp, r7
 8109a7e:	bd80      	pop	{r7, pc}
 8109a80:	fe00e800 	.word	0xfe00e800

08109a84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8109a84:	b580      	push	{r7, lr}
 8109a86:	b08a      	sub	sp, #40	@ 0x28
 8109a88:	af00      	add	r7, sp, #0
 8109a8a:	60f8      	str	r0, [r7, #12]
 8109a8c:	60b9      	str	r1, [r7, #8]
 8109a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109a90:	2300      	movs	r3, #0
 8109a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8109a96:	68fb      	ldr	r3, [r7, #12]
 8109a98:	681b      	ldr	r3, [r3, #0]
 8109a9a:	699b      	ldr	r3, [r3, #24]
 8109a9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8109a9e:	2300      	movs	r3, #0
 8109aa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8109aa2:	687b      	ldr	r3, [r7, #4]
 8109aa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8109aa6:	69bb      	ldr	r3, [r7, #24]
 8109aa8:	f003 0310 	and.w	r3, r3, #16
 8109aac:	2b00      	cmp	r3, #0
 8109aae:	d068      	beq.n	8109b82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8109ab0:	68fb      	ldr	r3, [r7, #12]
 8109ab2:	681b      	ldr	r3, [r3, #0]
 8109ab4:	2210      	movs	r2, #16
 8109ab6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8109ab8:	e049      	b.n	8109b4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8109aba:	68bb      	ldr	r3, [r7, #8]
 8109abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109ac0:	d045      	beq.n	8109b4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8109ac2:	f7fb f925 	bl	8104d10 <HAL_GetTick>
 8109ac6:	4602      	mov	r2, r0
 8109ac8:	69fb      	ldr	r3, [r7, #28]
 8109aca:	1ad3      	subs	r3, r2, r3
 8109acc:	68ba      	ldr	r2, [r7, #8]
 8109ace:	429a      	cmp	r2, r3
 8109ad0:	d302      	bcc.n	8109ad8 <I2C_IsErrorOccurred+0x54>
 8109ad2:	68bb      	ldr	r3, [r7, #8]
 8109ad4:	2b00      	cmp	r3, #0
 8109ad6:	d13a      	bne.n	8109b4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8109ad8:	68fb      	ldr	r3, [r7, #12]
 8109ada:	681b      	ldr	r3, [r3, #0]
 8109adc:	685b      	ldr	r3, [r3, #4]
 8109ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8109ae2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8109ae4:	68fb      	ldr	r3, [r7, #12]
 8109ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8109aea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8109aec:	68fb      	ldr	r3, [r7, #12]
 8109aee:	681b      	ldr	r3, [r3, #0]
 8109af0:	699b      	ldr	r3, [r3, #24]
 8109af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8109af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109afa:	d121      	bne.n	8109b40 <I2C_IsErrorOccurred+0xbc>
 8109afc:	697b      	ldr	r3, [r7, #20]
 8109afe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109b02:	d01d      	beq.n	8109b40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8109b04:	7cfb      	ldrb	r3, [r7, #19]
 8109b06:	2b20      	cmp	r3, #32
 8109b08:	d01a      	beq.n	8109b40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8109b0a:	68fb      	ldr	r3, [r7, #12]
 8109b0c:	681b      	ldr	r3, [r3, #0]
 8109b0e:	685a      	ldr	r2, [r3, #4]
 8109b10:	68fb      	ldr	r3, [r7, #12]
 8109b12:	681b      	ldr	r3, [r3, #0]
 8109b14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8109b18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8109b1a:	f7fb f8f9 	bl	8104d10 <HAL_GetTick>
 8109b1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109b20:	e00e      	b.n	8109b40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8109b22:	f7fb f8f5 	bl	8104d10 <HAL_GetTick>
 8109b26:	4602      	mov	r2, r0
 8109b28:	69fb      	ldr	r3, [r7, #28]
 8109b2a:	1ad3      	subs	r3, r2, r3
 8109b2c:	2b19      	cmp	r3, #25
 8109b2e:	d907      	bls.n	8109b40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8109b30:	6a3b      	ldr	r3, [r7, #32]
 8109b32:	f043 0320 	orr.w	r3, r3, #32
 8109b36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8109b38:	2301      	movs	r3, #1
 8109b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8109b3e:	e006      	b.n	8109b4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109b40:	68fb      	ldr	r3, [r7, #12]
 8109b42:	681b      	ldr	r3, [r3, #0]
 8109b44:	699b      	ldr	r3, [r3, #24]
 8109b46:	f003 0320 	and.w	r3, r3, #32
 8109b4a:	2b20      	cmp	r3, #32
 8109b4c:	d1e9      	bne.n	8109b22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8109b4e:	68fb      	ldr	r3, [r7, #12]
 8109b50:	681b      	ldr	r3, [r3, #0]
 8109b52:	699b      	ldr	r3, [r3, #24]
 8109b54:	f003 0320 	and.w	r3, r3, #32
 8109b58:	2b20      	cmp	r3, #32
 8109b5a:	d003      	beq.n	8109b64 <I2C_IsErrorOccurred+0xe0>
 8109b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109b60:	2b00      	cmp	r3, #0
 8109b62:	d0aa      	beq.n	8109aba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8109b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109b68:	2b00      	cmp	r3, #0
 8109b6a:	d103      	bne.n	8109b74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8109b6c:	68fb      	ldr	r3, [r7, #12]
 8109b6e:	681b      	ldr	r3, [r3, #0]
 8109b70:	2220      	movs	r2, #32
 8109b72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8109b74:	6a3b      	ldr	r3, [r7, #32]
 8109b76:	f043 0304 	orr.w	r3, r3, #4
 8109b7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8109b7c:	2301      	movs	r3, #1
 8109b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8109b82:	68fb      	ldr	r3, [r7, #12]
 8109b84:	681b      	ldr	r3, [r3, #0]
 8109b86:	699b      	ldr	r3, [r3, #24]
 8109b88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8109b8a:	69bb      	ldr	r3, [r7, #24]
 8109b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109b90:	2b00      	cmp	r3, #0
 8109b92:	d00b      	beq.n	8109bac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8109b94:	6a3b      	ldr	r3, [r7, #32]
 8109b96:	f043 0301 	orr.w	r3, r3, #1
 8109b9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8109b9c:	68fb      	ldr	r3, [r7, #12]
 8109b9e:	681b      	ldr	r3, [r3, #0]
 8109ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8109ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109ba6:	2301      	movs	r3, #1
 8109ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8109bac:	69bb      	ldr	r3, [r7, #24]
 8109bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8109bb2:	2b00      	cmp	r3, #0
 8109bb4:	d00b      	beq.n	8109bce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8109bb6:	6a3b      	ldr	r3, [r7, #32]
 8109bb8:	f043 0308 	orr.w	r3, r3, #8
 8109bbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8109bbe:	68fb      	ldr	r3, [r7, #12]
 8109bc0:	681b      	ldr	r3, [r3, #0]
 8109bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8109bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109bc8:	2301      	movs	r3, #1
 8109bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8109bce:	69bb      	ldr	r3, [r7, #24]
 8109bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8109bd4:	2b00      	cmp	r3, #0
 8109bd6:	d00b      	beq.n	8109bf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8109bd8:	6a3b      	ldr	r3, [r7, #32]
 8109bda:	f043 0302 	orr.w	r3, r3, #2
 8109bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8109be0:	68fb      	ldr	r3, [r7, #12]
 8109be2:	681b      	ldr	r3, [r3, #0]
 8109be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109bea:	2301      	movs	r3, #1
 8109bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8109bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109bf4:	2b00      	cmp	r3, #0
 8109bf6:	d01c      	beq.n	8109c32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8109bf8:	68f8      	ldr	r0, [r7, #12]
 8109bfa:	f7ff fdaf 	bl	810975c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8109bfe:	68fb      	ldr	r3, [r7, #12]
 8109c00:	681b      	ldr	r3, [r3, #0]
 8109c02:	6859      	ldr	r1, [r3, #4]
 8109c04:	68fb      	ldr	r3, [r7, #12]
 8109c06:	681a      	ldr	r2, [r3, #0]
 8109c08:	4b0d      	ldr	r3, [pc, #52]	@ (8109c40 <I2C_IsErrorOccurred+0x1bc>)
 8109c0a:	400b      	ands	r3, r1
 8109c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8109c0e:	68fb      	ldr	r3, [r7, #12]
 8109c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109c12:	6a3b      	ldr	r3, [r7, #32]
 8109c14:	431a      	orrs	r2, r3
 8109c16:	68fb      	ldr	r3, [r7, #12]
 8109c18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8109c1a:	68fb      	ldr	r3, [r7, #12]
 8109c1c:	2220      	movs	r2, #32
 8109c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8109c22:	68fb      	ldr	r3, [r7, #12]
 8109c24:	2200      	movs	r2, #0
 8109c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109c2a:	68fb      	ldr	r3, [r7, #12]
 8109c2c:	2200      	movs	r2, #0
 8109c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8109c32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8109c36:	4618      	mov	r0, r3
 8109c38:	3728      	adds	r7, #40	@ 0x28
 8109c3a:	46bd      	mov	sp, r7
 8109c3c:	bd80      	pop	{r7, pc}
 8109c3e:	bf00      	nop
 8109c40:	fe00e800 	.word	0xfe00e800

08109c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8109c44:	b480      	push	{r7}
 8109c46:	b087      	sub	sp, #28
 8109c48:	af00      	add	r7, sp, #0
 8109c4a:	60f8      	str	r0, [r7, #12]
 8109c4c:	607b      	str	r3, [r7, #4]
 8109c4e:	460b      	mov	r3, r1
 8109c50:	817b      	strh	r3, [r7, #10]
 8109c52:	4613      	mov	r3, r2
 8109c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109c56:	897b      	ldrh	r3, [r7, #10]
 8109c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8109c5c:	7a7b      	ldrb	r3, [r7, #9]
 8109c5e:	041b      	lsls	r3, r3, #16
 8109c60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109c64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8109c66:	687b      	ldr	r3, [r7, #4]
 8109c68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109c6a:	6a3b      	ldr	r3, [r7, #32]
 8109c6c:	4313      	orrs	r3, r2
 8109c6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8109c72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8109c74:	68fb      	ldr	r3, [r7, #12]
 8109c76:	681b      	ldr	r3, [r3, #0]
 8109c78:	685a      	ldr	r2, [r3, #4]
 8109c7a:	6a3b      	ldr	r3, [r7, #32]
 8109c7c:	0d5b      	lsrs	r3, r3, #21
 8109c7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8109c82:	4b08      	ldr	r3, [pc, #32]	@ (8109ca4 <I2C_TransferConfig+0x60>)
 8109c84:	430b      	orrs	r3, r1
 8109c86:	43db      	mvns	r3, r3
 8109c88:	ea02 0103 	and.w	r1, r2, r3
 8109c8c:	68fb      	ldr	r3, [r7, #12]
 8109c8e:	681b      	ldr	r3, [r3, #0]
 8109c90:	697a      	ldr	r2, [r7, #20]
 8109c92:	430a      	orrs	r2, r1
 8109c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8109c96:	bf00      	nop
 8109c98:	371c      	adds	r7, #28
 8109c9a:	46bd      	mov	sp, r7
 8109c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ca0:	4770      	bx	lr
 8109ca2:	bf00      	nop
 8109ca4:	03ff63ff 	.word	0x03ff63ff

08109ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8109ca8:	b480      	push	{r7}
 8109caa:	b083      	sub	sp, #12
 8109cac:	af00      	add	r7, sp, #0
 8109cae:	6078      	str	r0, [r7, #4]
 8109cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109cb2:	687b      	ldr	r3, [r7, #4]
 8109cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109cb8:	b2db      	uxtb	r3, r3
 8109cba:	2b20      	cmp	r3, #32
 8109cbc:	d138      	bne.n	8109d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109cbe:	687b      	ldr	r3, [r7, #4]
 8109cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109cc4:	2b01      	cmp	r3, #1
 8109cc6:	d101      	bne.n	8109ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8109cc8:	2302      	movs	r3, #2
 8109cca:	e032      	b.n	8109d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8109ccc:	687b      	ldr	r3, [r7, #4]
 8109cce:	2201      	movs	r2, #1
 8109cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109cd4:	687b      	ldr	r3, [r7, #4]
 8109cd6:	2224      	movs	r2, #36	@ 0x24
 8109cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109cdc:	687b      	ldr	r3, [r7, #4]
 8109cde:	681b      	ldr	r3, [r3, #0]
 8109ce0:	681a      	ldr	r2, [r3, #0]
 8109ce2:	687b      	ldr	r3, [r7, #4]
 8109ce4:	681b      	ldr	r3, [r3, #0]
 8109ce6:	f022 0201 	bic.w	r2, r2, #1
 8109cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8109cec:	687b      	ldr	r3, [r7, #4]
 8109cee:	681b      	ldr	r3, [r3, #0]
 8109cf0:	681a      	ldr	r2, [r3, #0]
 8109cf2:	687b      	ldr	r3, [r7, #4]
 8109cf4:	681b      	ldr	r3, [r3, #0]
 8109cf6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8109cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8109cfc:	687b      	ldr	r3, [r7, #4]
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	6819      	ldr	r1, [r3, #0]
 8109d02:	687b      	ldr	r3, [r7, #4]
 8109d04:	681b      	ldr	r3, [r3, #0]
 8109d06:	683a      	ldr	r2, [r7, #0]
 8109d08:	430a      	orrs	r2, r1
 8109d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109d0c:	687b      	ldr	r3, [r7, #4]
 8109d0e:	681b      	ldr	r3, [r3, #0]
 8109d10:	681a      	ldr	r2, [r3, #0]
 8109d12:	687b      	ldr	r3, [r7, #4]
 8109d14:	681b      	ldr	r3, [r3, #0]
 8109d16:	f042 0201 	orr.w	r2, r2, #1
 8109d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109d1c:	687b      	ldr	r3, [r7, #4]
 8109d1e:	2220      	movs	r2, #32
 8109d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	2200      	movs	r2, #0
 8109d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109d2c:	2300      	movs	r3, #0
 8109d2e:	e000      	b.n	8109d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8109d30:	2302      	movs	r3, #2
  }
}
 8109d32:	4618      	mov	r0, r3
 8109d34:	370c      	adds	r7, #12
 8109d36:	46bd      	mov	sp, r7
 8109d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d3c:	4770      	bx	lr

08109d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8109d3e:	b480      	push	{r7}
 8109d40:	b085      	sub	sp, #20
 8109d42:	af00      	add	r7, sp, #0
 8109d44:	6078      	str	r0, [r7, #4]
 8109d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109d48:	687b      	ldr	r3, [r7, #4]
 8109d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109d4e:	b2db      	uxtb	r3, r3
 8109d50:	2b20      	cmp	r3, #32
 8109d52:	d139      	bne.n	8109dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109d54:	687b      	ldr	r3, [r7, #4]
 8109d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109d5a:	2b01      	cmp	r3, #1
 8109d5c:	d101      	bne.n	8109d62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8109d5e:	2302      	movs	r3, #2
 8109d60:	e033      	b.n	8109dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8109d62:	687b      	ldr	r3, [r7, #4]
 8109d64:	2201      	movs	r2, #1
 8109d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109d6a:	687b      	ldr	r3, [r7, #4]
 8109d6c:	2224      	movs	r2, #36	@ 0x24
 8109d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109d72:	687b      	ldr	r3, [r7, #4]
 8109d74:	681b      	ldr	r3, [r3, #0]
 8109d76:	681a      	ldr	r2, [r3, #0]
 8109d78:	687b      	ldr	r3, [r7, #4]
 8109d7a:	681b      	ldr	r3, [r3, #0]
 8109d7c:	f022 0201 	bic.w	r2, r2, #1
 8109d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8109d82:	687b      	ldr	r3, [r7, #4]
 8109d84:	681b      	ldr	r3, [r3, #0]
 8109d86:	681b      	ldr	r3, [r3, #0]
 8109d88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8109d8a:	68fb      	ldr	r3, [r7, #12]
 8109d8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8109d90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8109d92:	683b      	ldr	r3, [r7, #0]
 8109d94:	021b      	lsls	r3, r3, #8
 8109d96:	68fa      	ldr	r2, [r7, #12]
 8109d98:	4313      	orrs	r3, r2
 8109d9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8109d9c:	687b      	ldr	r3, [r7, #4]
 8109d9e:	681b      	ldr	r3, [r3, #0]
 8109da0:	68fa      	ldr	r2, [r7, #12]
 8109da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109da4:	687b      	ldr	r3, [r7, #4]
 8109da6:	681b      	ldr	r3, [r3, #0]
 8109da8:	681a      	ldr	r2, [r3, #0]
 8109daa:	687b      	ldr	r3, [r7, #4]
 8109dac:	681b      	ldr	r3, [r3, #0]
 8109dae:	f042 0201 	orr.w	r2, r2, #1
 8109db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109db4:	687b      	ldr	r3, [r7, #4]
 8109db6:	2220      	movs	r2, #32
 8109db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109dbc:	687b      	ldr	r3, [r7, #4]
 8109dbe:	2200      	movs	r2, #0
 8109dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109dc4:	2300      	movs	r3, #0
 8109dc6:	e000      	b.n	8109dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8109dc8:	2302      	movs	r3, #2
  }
}
 8109dca:	4618      	mov	r0, r3
 8109dcc:	3714      	adds	r7, #20
 8109dce:	46bd      	mov	sp, r7
 8109dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dd4:	4770      	bx	lr
	...

08109dd8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8109dd8:	b580      	push	{r7, lr}
 8109dda:	b084      	sub	sp, #16
 8109ddc:	af00      	add	r7, sp, #0
 8109dde:	60f8      	str	r0, [r7, #12]
 8109de0:	460b      	mov	r3, r1
 8109de2:	607a      	str	r2, [r7, #4]
 8109de4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8109de6:	4b37      	ldr	r3, [pc, #220]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109de8:	681b      	ldr	r3, [r3, #0]
 8109dea:	f023 0201 	bic.w	r2, r3, #1
 8109dee:	4935      	ldr	r1, [pc, #212]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109df0:	68fb      	ldr	r3, [r7, #12]
 8109df2:	4313      	orrs	r3, r2
 8109df4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	2b00      	cmp	r3, #0
 8109dfa:	d123      	bne.n	8109e44 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8109dfc:	f7fc fdbc 	bl	8106978 <HAL_GetCurrentCPUID>
 8109e00:	4603      	mov	r3, r0
 8109e02:	2b03      	cmp	r3, #3
 8109e04:	d158      	bne.n	8109eb8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8109e06:	4b2f      	ldr	r3, [pc, #188]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e08:	691b      	ldr	r3, [r3, #16]
 8109e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e0c:	f023 0301 	bic.w	r3, r3, #1
 8109e10:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e12:	4b2d      	ldr	r3, [pc, #180]	@ (8109ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e14:	691b      	ldr	r3, [r3, #16]
 8109e16:	4a2c      	ldr	r2, [pc, #176]	@ (8109ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e18:	f043 0304 	orr.w	r3, r3, #4
 8109e1c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109e1e:	f3bf 8f4f 	dsb	sy
}
 8109e22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109e24:	f3bf 8f6f 	isb	sy
}
 8109e28:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109e2a:	7afb      	ldrb	r3, [r7, #11]
 8109e2c:	2b01      	cmp	r3, #1
 8109e2e:	d101      	bne.n	8109e34 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109e30:	bf30      	wfi
 8109e32:	e000      	b.n	8109e36 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109e34:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e36:	4b24      	ldr	r3, [pc, #144]	@ (8109ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e38:	691b      	ldr	r3, [r3, #16]
 8109e3a:	4a23      	ldr	r2, [pc, #140]	@ (8109ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e3c:	f023 0304 	bic.w	r3, r3, #4
 8109e40:	6113      	str	r3, [r2, #16]
 8109e42:	e03c      	b.n	8109ebe <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	2b01      	cmp	r3, #1
 8109e48:	d123      	bne.n	8109e92 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8109e4a:	f7fc fd95 	bl	8106978 <HAL_GetCurrentCPUID>
 8109e4e:	4603      	mov	r3, r0
 8109e50:	2b01      	cmp	r3, #1
 8109e52:	d133      	bne.n	8109ebc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109e54:	4b1b      	ldr	r3, [pc, #108]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e56:	695b      	ldr	r3, [r3, #20]
 8109e58:	4a1a      	ldr	r2, [pc, #104]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e5a:	f023 0302 	bic.w	r3, r3, #2
 8109e5e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e60:	4b19      	ldr	r3, [pc, #100]	@ (8109ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e62:	691b      	ldr	r3, [r3, #16]
 8109e64:	4a18      	ldr	r2, [pc, #96]	@ (8109ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e66:	f043 0304 	orr.w	r3, r3, #4
 8109e6a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109e6c:	f3bf 8f4f 	dsb	sy
}
 8109e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109e72:	f3bf 8f6f 	isb	sy
}
 8109e76:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109e78:	7afb      	ldrb	r3, [r7, #11]
 8109e7a:	2b01      	cmp	r3, #1
 8109e7c:	d101      	bne.n	8109e82 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109e7e:	bf30      	wfi
 8109e80:	e000      	b.n	8109e84 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109e82:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109e84:	4b10      	ldr	r3, [pc, #64]	@ (8109ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e86:	691b      	ldr	r3, [r3, #16]
 8109e88:	4a0f      	ldr	r2, [pc, #60]	@ (8109ec8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109e8a:	f023 0304 	bic.w	r3, r3, #4
 8109e8e:	6113      	str	r3, [r2, #16]
 8109e90:	e015      	b.n	8109ebe <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109e92:	f7fc fd71 	bl	8106978 <HAL_GetCurrentCPUID>
 8109e96:	4603      	mov	r3, r0
 8109e98:	2b03      	cmp	r3, #3
 8109e9a:	d106      	bne.n	8109eaa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8109e9c:	4b09      	ldr	r3, [pc, #36]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109e9e:	691b      	ldr	r3, [r3, #16]
 8109ea0:	4a08      	ldr	r2, [pc, #32]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109ea2:	f023 0304 	bic.w	r3, r3, #4
 8109ea6:	6113      	str	r3, [r2, #16]
 8109ea8:	e009      	b.n	8109ebe <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8109eaa:	4b06      	ldr	r3, [pc, #24]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109eac:	695b      	ldr	r3, [r3, #20]
 8109eae:	4a05      	ldr	r2, [pc, #20]	@ (8109ec4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109eb0:	f023 0304 	bic.w	r3, r3, #4
 8109eb4:	6153      	str	r3, [r2, #20]
 8109eb6:	e002      	b.n	8109ebe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109eb8:	bf00      	nop
 8109eba:	e000      	b.n	8109ebe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109ebc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8109ebe:	3710      	adds	r7, #16
 8109ec0:	46bd      	mov	sp, r7
 8109ec2:	bd80      	pop	{r7, pc}
 8109ec4:	58024800 	.word	0x58024800
 8109ec8:	e000ed00 	.word	0xe000ed00

08109ecc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8109ecc:	b580      	push	{r7, lr}
 8109ece:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109ed0:	f7fc fd52 	bl	8106978 <HAL_GetCurrentCPUID>
 8109ed4:	4603      	mov	r3, r0
 8109ed6:	2b03      	cmp	r3, #3
 8109ed8:	d101      	bne.n	8109ede <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8109eda:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8109edc:	e001      	b.n	8109ee2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8109ede:	bf40      	sev
    __WFE ();
 8109ee0:	bf20      	wfe
}
 8109ee2:	bf00      	nop
 8109ee4:	bd80      	pop	{r7, pc}
	...

08109ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8109ee8:	b480      	push	{r7}
 8109eea:	b089      	sub	sp, #36	@ 0x24
 8109eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8109eee:	4bb3      	ldr	r3, [pc, #716]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ef0:	691b      	ldr	r3, [r3, #16]
 8109ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8109ef6:	2b18      	cmp	r3, #24
 8109ef8:	f200 8155 	bhi.w	810a1a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8109efc:	a201      	add	r2, pc, #4	@ (adr r2, 8109f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8109efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f02:	bf00      	nop
 8109f04:	08109f69 	.word	0x08109f69
 8109f08:	0810a1a7 	.word	0x0810a1a7
 8109f0c:	0810a1a7 	.word	0x0810a1a7
 8109f10:	0810a1a7 	.word	0x0810a1a7
 8109f14:	0810a1a7 	.word	0x0810a1a7
 8109f18:	0810a1a7 	.word	0x0810a1a7
 8109f1c:	0810a1a7 	.word	0x0810a1a7
 8109f20:	0810a1a7 	.word	0x0810a1a7
 8109f24:	08109f8f 	.word	0x08109f8f
 8109f28:	0810a1a7 	.word	0x0810a1a7
 8109f2c:	0810a1a7 	.word	0x0810a1a7
 8109f30:	0810a1a7 	.word	0x0810a1a7
 8109f34:	0810a1a7 	.word	0x0810a1a7
 8109f38:	0810a1a7 	.word	0x0810a1a7
 8109f3c:	0810a1a7 	.word	0x0810a1a7
 8109f40:	0810a1a7 	.word	0x0810a1a7
 8109f44:	08109f95 	.word	0x08109f95
 8109f48:	0810a1a7 	.word	0x0810a1a7
 8109f4c:	0810a1a7 	.word	0x0810a1a7
 8109f50:	0810a1a7 	.word	0x0810a1a7
 8109f54:	0810a1a7 	.word	0x0810a1a7
 8109f58:	0810a1a7 	.word	0x0810a1a7
 8109f5c:	0810a1a7 	.word	0x0810a1a7
 8109f60:	0810a1a7 	.word	0x0810a1a7
 8109f64:	08109f9b 	.word	0x08109f9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109f68:	4b94      	ldr	r3, [pc, #592]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f6a:	681b      	ldr	r3, [r3, #0]
 8109f6c:	f003 0320 	and.w	r3, r3, #32
 8109f70:	2b00      	cmp	r3, #0
 8109f72:	d009      	beq.n	8109f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109f74:	4b91      	ldr	r3, [pc, #580]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f76:	681b      	ldr	r3, [r3, #0]
 8109f78:	08db      	lsrs	r3, r3, #3
 8109f7a:	f003 0303 	and.w	r3, r3, #3
 8109f7e:	4a90      	ldr	r2, [pc, #576]	@ (810a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109f80:	fa22 f303 	lsr.w	r3, r2, r3
 8109f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8109f86:	e111      	b.n	810a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8109f88:	4b8d      	ldr	r3, [pc, #564]	@ (810a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109f8a:	61bb      	str	r3, [r7, #24]
      break;
 8109f8c:	e10e      	b.n	810a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8109f8e:	4b8d      	ldr	r3, [pc, #564]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109f90:	61bb      	str	r3, [r7, #24]
      break;
 8109f92:	e10b      	b.n	810a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8109f94:	4b8c      	ldr	r3, [pc, #560]	@ (810a1c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109f96:	61bb      	str	r3, [r7, #24]
      break;
 8109f98:	e108      	b.n	810a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109f9a:	4b88      	ldr	r3, [pc, #544]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109f9e:	f003 0303 	and.w	r3, r3, #3
 8109fa2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8109fa4:	4b85      	ldr	r3, [pc, #532]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109fa8:	091b      	lsrs	r3, r3, #4
 8109faa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109fae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8109fb0:	4b82      	ldr	r3, [pc, #520]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109fb4:	f003 0301 	and.w	r3, r3, #1
 8109fb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8109fba:	4b80      	ldr	r3, [pc, #512]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109fbe:	08db      	lsrs	r3, r3, #3
 8109fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109fc4:	68fa      	ldr	r2, [r7, #12]
 8109fc6:	fb02 f303 	mul.w	r3, r2, r3
 8109fca:	ee07 3a90 	vmov	s15, r3
 8109fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8109fd6:	693b      	ldr	r3, [r7, #16]
 8109fd8:	2b00      	cmp	r3, #0
 8109fda:	f000 80e1 	beq.w	810a1a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8109fde:	697b      	ldr	r3, [r7, #20]
 8109fe0:	2b02      	cmp	r3, #2
 8109fe2:	f000 8083 	beq.w	810a0ec <HAL_RCC_GetSysClockFreq+0x204>
 8109fe6:	697b      	ldr	r3, [r7, #20]
 8109fe8:	2b02      	cmp	r3, #2
 8109fea:	f200 80a1 	bhi.w	810a130 <HAL_RCC_GetSysClockFreq+0x248>
 8109fee:	697b      	ldr	r3, [r7, #20]
 8109ff0:	2b00      	cmp	r3, #0
 8109ff2:	d003      	beq.n	8109ffc <HAL_RCC_GetSysClockFreq+0x114>
 8109ff4:	697b      	ldr	r3, [r7, #20]
 8109ff6:	2b01      	cmp	r3, #1
 8109ff8:	d056      	beq.n	810a0a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8109ffa:	e099      	b.n	810a130 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109ffc:	4b6f      	ldr	r3, [pc, #444]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ffe:	681b      	ldr	r3, [r3, #0]
 810a000:	f003 0320 	and.w	r3, r3, #32
 810a004:	2b00      	cmp	r3, #0
 810a006:	d02d      	beq.n	810a064 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a008:	4b6c      	ldr	r3, [pc, #432]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a00a:	681b      	ldr	r3, [r3, #0]
 810a00c:	08db      	lsrs	r3, r3, #3
 810a00e:	f003 0303 	and.w	r3, r3, #3
 810a012:	4a6b      	ldr	r2, [pc, #428]	@ (810a1c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a014:	fa22 f303 	lsr.w	r3, r2, r3
 810a018:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a01a:	687b      	ldr	r3, [r7, #4]
 810a01c:	ee07 3a90 	vmov	s15, r3
 810a020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a024:	693b      	ldr	r3, [r7, #16]
 810a026:	ee07 3a90 	vmov	s15, r3
 810a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a032:	4b62      	ldr	r3, [pc, #392]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a03a:	ee07 3a90 	vmov	s15, r3
 810a03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a042:	ed97 6a02 	vldr	s12, [r7, #8]
 810a046:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810a04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a05e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810a062:	e087      	b.n	810a174 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a064:	693b      	ldr	r3, [r7, #16]
 810a066:	ee07 3a90 	vmov	s15, r3
 810a06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a06e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810a1d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 810a072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a076:	4b51      	ldr	r3, [pc, #324]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a07e:	ee07 3a90 	vmov	s15, r3
 810a082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a086:	ed97 6a02 	vldr	s12, [r7, #8]
 810a08a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810a08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a0a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a0a6:	e065      	b.n	810a174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a0a8:	693b      	ldr	r3, [r7, #16]
 810a0aa:	ee07 3a90 	vmov	s15, r3
 810a0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810a1d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810a0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a0ba:	4b40      	ldr	r3, [pc, #256]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a0c2:	ee07 3a90 	vmov	s15, r3
 810a0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a0ca:	ed97 6a02 	vldr	s12, [r7, #8]
 810a0ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810a0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a0da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a0e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a0ea:	e043      	b.n	810a174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a0ec:	693b      	ldr	r3, [r7, #16]
 810a0ee:	ee07 3a90 	vmov	s15, r3
 810a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810a1d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 810a0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a0fe:	4b2f      	ldr	r3, [pc, #188]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a106:	ee07 3a90 	vmov	s15, r3
 810a10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a10e:	ed97 6a02 	vldr	s12, [r7, #8]
 810a112:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810a116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a126:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a12a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a12e:	e021      	b.n	810a174 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a130:	693b      	ldr	r3, [r7, #16]
 810a132:	ee07 3a90 	vmov	s15, r3
 810a136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a13a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810a1d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a142:	4b1e      	ldr	r3, [pc, #120]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a14a:	ee07 3a90 	vmov	s15, r3
 810a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a152:	ed97 6a02 	vldr	s12, [r7, #8]
 810a156:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810a1cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810a15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a16e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a172:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810a174:	4b11      	ldr	r3, [pc, #68]	@ (810a1bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a178:	0a5b      	lsrs	r3, r3, #9
 810a17a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a17e:	3301      	adds	r3, #1
 810a180:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810a182:	683b      	ldr	r3, [r7, #0]
 810a184:	ee07 3a90 	vmov	s15, r3
 810a188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810a18c:	edd7 6a07 	vldr	s13, [r7, #28]
 810a190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a198:	ee17 3a90 	vmov	r3, s15
 810a19c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810a19e:	e005      	b.n	810a1ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810a1a0:	2300      	movs	r3, #0
 810a1a2:	61bb      	str	r3, [r7, #24]
      break;
 810a1a4:	e002      	b.n	810a1ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810a1a6:	4b07      	ldr	r3, [pc, #28]	@ (810a1c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a1a8:	61bb      	str	r3, [r7, #24]
      break;
 810a1aa:	bf00      	nop
  }

  return sysclockfreq;
 810a1ac:	69bb      	ldr	r3, [r7, #24]
}
 810a1ae:	4618      	mov	r0, r3
 810a1b0:	3724      	adds	r7, #36	@ 0x24
 810a1b2:	46bd      	mov	sp, r7
 810a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1b8:	4770      	bx	lr
 810a1ba:	bf00      	nop
 810a1bc:	58024400 	.word	0x58024400
 810a1c0:	03d09000 	.word	0x03d09000
 810a1c4:	003d0900 	.word	0x003d0900
 810a1c8:	007a1200 	.word	0x007a1200
 810a1cc:	46000000 	.word	0x46000000
 810a1d0:	4c742400 	.word	0x4c742400
 810a1d4:	4a742400 	.word	0x4a742400
 810a1d8:	4af42400 	.word	0x4af42400

0810a1dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810a1dc:	b580      	push	{r7, lr}
 810a1de:	b082      	sub	sp, #8
 810a1e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810a1e2:	f7ff fe81 	bl	8109ee8 <HAL_RCC_GetSysClockFreq>
 810a1e6:	4602      	mov	r2, r0
 810a1e8:	4b11      	ldr	r3, [pc, #68]	@ (810a230 <HAL_RCC_GetHCLKFreq+0x54>)
 810a1ea:	699b      	ldr	r3, [r3, #24]
 810a1ec:	0a1b      	lsrs	r3, r3, #8
 810a1ee:	f003 030f 	and.w	r3, r3, #15
 810a1f2:	4910      	ldr	r1, [pc, #64]	@ (810a234 <HAL_RCC_GetHCLKFreq+0x58>)
 810a1f4:	5ccb      	ldrb	r3, [r1, r3]
 810a1f6:	f003 031f 	and.w	r3, r3, #31
 810a1fa:	fa22 f303 	lsr.w	r3, r2, r3
 810a1fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810a200:	4b0b      	ldr	r3, [pc, #44]	@ (810a230 <HAL_RCC_GetHCLKFreq+0x54>)
 810a202:	699b      	ldr	r3, [r3, #24]
 810a204:	f003 030f 	and.w	r3, r3, #15
 810a208:	4a0a      	ldr	r2, [pc, #40]	@ (810a234 <HAL_RCC_GetHCLKFreq+0x58>)
 810a20a:	5cd3      	ldrb	r3, [r2, r3]
 810a20c:	f003 031f 	and.w	r3, r3, #31
 810a210:	687a      	ldr	r2, [r7, #4]
 810a212:	fa22 f303 	lsr.w	r3, r2, r3
 810a216:	4a08      	ldr	r2, [pc, #32]	@ (810a238 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a218:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810a21a:	4b07      	ldr	r3, [pc, #28]	@ (810a238 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a21c:	681b      	ldr	r3, [r3, #0]
 810a21e:	4a07      	ldr	r2, [pc, #28]	@ (810a23c <HAL_RCC_GetHCLKFreq+0x60>)
 810a220:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810a222:	4b05      	ldr	r3, [pc, #20]	@ (810a238 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a224:	681b      	ldr	r3, [r3, #0]
}
 810a226:	4618      	mov	r0, r3
 810a228:	3708      	adds	r7, #8
 810a22a:	46bd      	mov	sp, r7
 810a22c:	bd80      	pop	{r7, pc}
 810a22e:	bf00      	nop
 810a230:	58024400 	.word	0x58024400
 810a234:	08115c60 	.word	0x08115c60
 810a238:	10000004 	.word	0x10000004
 810a23c:	10000000 	.word	0x10000000

0810a240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810a240:	b580      	push	{r7, lr}
 810a242:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810a244:	f7ff ffca 	bl	810a1dc <HAL_RCC_GetHCLKFreq>
 810a248:	4602      	mov	r2, r0
 810a24a:	4b06      	ldr	r3, [pc, #24]	@ (810a264 <HAL_RCC_GetPCLK1Freq+0x24>)
 810a24c:	69db      	ldr	r3, [r3, #28]
 810a24e:	091b      	lsrs	r3, r3, #4
 810a250:	f003 0307 	and.w	r3, r3, #7
 810a254:	4904      	ldr	r1, [pc, #16]	@ (810a268 <HAL_RCC_GetPCLK1Freq+0x28>)
 810a256:	5ccb      	ldrb	r3, [r1, r3]
 810a258:	f003 031f 	and.w	r3, r3, #31
 810a25c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810a260:	4618      	mov	r0, r3
 810a262:	bd80      	pop	{r7, pc}
 810a264:	58024400 	.word	0x58024400
 810a268:	08115c60 	.word	0x08115c60

0810a26c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810a26c:	b580      	push	{r7, lr}
 810a26e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810a270:	f7ff ffb4 	bl	810a1dc <HAL_RCC_GetHCLKFreq>
 810a274:	4602      	mov	r2, r0
 810a276:	4b06      	ldr	r3, [pc, #24]	@ (810a290 <HAL_RCC_GetPCLK2Freq+0x24>)
 810a278:	69db      	ldr	r3, [r3, #28]
 810a27a:	0a1b      	lsrs	r3, r3, #8
 810a27c:	f003 0307 	and.w	r3, r3, #7
 810a280:	4904      	ldr	r1, [pc, #16]	@ (810a294 <HAL_RCC_GetPCLK2Freq+0x28>)
 810a282:	5ccb      	ldrb	r3, [r1, r3]
 810a284:	f003 031f 	and.w	r3, r3, #31
 810a288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810a28c:	4618      	mov	r0, r3
 810a28e:	bd80      	pop	{r7, pc}
 810a290:	58024400 	.word	0x58024400
 810a294:	08115c60 	.word	0x08115c60

0810a298 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810a298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a29c:	b0ca      	sub	sp, #296	@ 0x128
 810a29e:	af00      	add	r7, sp, #0
 810a2a0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810a2a4:	2300      	movs	r3, #0
 810a2a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810a2aa:	2300      	movs	r3, #0
 810a2ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810a2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a2b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810a2bc:	2500      	movs	r5, #0
 810a2be:	ea54 0305 	orrs.w	r3, r4, r5
 810a2c2:	d049      	beq.n	810a358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810a2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a2c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a2ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a2ce:	d02f      	beq.n	810a330 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810a2d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a2d4:	d828      	bhi.n	810a328 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a2d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a2da:	d01a      	beq.n	810a312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810a2dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a2e0:	d822      	bhi.n	810a328 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a2e2:	2b00      	cmp	r3, #0
 810a2e4:	d003      	beq.n	810a2ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 810a2e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a2ea:	d007      	beq.n	810a2fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 810a2ec:	e01c      	b.n	810a328 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a2ee:	4bb8      	ldr	r3, [pc, #736]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a2f2:	4ab7      	ldr	r2, [pc, #732]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a2f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a2f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a2fa:	e01a      	b.n	810a332 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a300:	3308      	adds	r3, #8
 810a302:	2102      	movs	r1, #2
 810a304:	4618      	mov	r0, r3
 810a306:	f002 fb61 	bl	810c9cc <RCCEx_PLL2_Config>
 810a30a:	4603      	mov	r3, r0
 810a30c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a310:	e00f      	b.n	810a332 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a316:	3328      	adds	r3, #40	@ 0x28
 810a318:	2102      	movs	r1, #2
 810a31a:	4618      	mov	r0, r3
 810a31c:	f002 fc08 	bl	810cb30 <RCCEx_PLL3_Config>
 810a320:	4603      	mov	r3, r0
 810a322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a326:	e004      	b.n	810a332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a328:	2301      	movs	r3, #1
 810a32a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a32e:	e000      	b.n	810a332 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810a330:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a336:	2b00      	cmp	r3, #0
 810a338:	d10a      	bne.n	810a350 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810a33a:	4ba5      	ldr	r3, [pc, #660]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a33c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a33e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810a342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a348:	4aa1      	ldr	r2, [pc, #644]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a34a:	430b      	orrs	r3, r1
 810a34c:	6513      	str	r3, [r2, #80]	@ 0x50
 810a34e:	e003      	b.n	810a358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810a358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a360:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810a364:	f04f 0900 	mov.w	r9, #0
 810a368:	ea58 0309 	orrs.w	r3, r8, r9
 810a36c:	d047      	beq.n	810a3fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810a36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a374:	2b04      	cmp	r3, #4
 810a376:	d82a      	bhi.n	810a3ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 810a378:	a201      	add	r2, pc, #4	@ (adr r2, 810a380 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810a37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a37e:	bf00      	nop
 810a380:	0810a395 	.word	0x0810a395
 810a384:	0810a3a3 	.word	0x0810a3a3
 810a388:	0810a3b9 	.word	0x0810a3b9
 810a38c:	0810a3d7 	.word	0x0810a3d7
 810a390:	0810a3d7 	.word	0x0810a3d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a394:	4b8e      	ldr	r3, [pc, #568]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a398:	4a8d      	ldr	r2, [pc, #564]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a39a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a39e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a3a0:	e01a      	b.n	810a3d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3a6:	3308      	adds	r3, #8
 810a3a8:	2100      	movs	r1, #0
 810a3aa:	4618      	mov	r0, r3
 810a3ac:	f002 fb0e 	bl	810c9cc <RCCEx_PLL2_Config>
 810a3b0:	4603      	mov	r3, r0
 810a3b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a3b6:	e00f      	b.n	810a3d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3bc:	3328      	adds	r3, #40	@ 0x28
 810a3be:	2100      	movs	r1, #0
 810a3c0:	4618      	mov	r0, r3
 810a3c2:	f002 fbb5 	bl	810cb30 <RCCEx_PLL3_Config>
 810a3c6:	4603      	mov	r3, r0
 810a3c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a3cc:	e004      	b.n	810a3d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a3ce:	2301      	movs	r3, #1
 810a3d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a3d4:	e000      	b.n	810a3d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810a3d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a3d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a3dc:	2b00      	cmp	r3, #0
 810a3de:	d10a      	bne.n	810a3f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810a3e0:	4b7b      	ldr	r3, [pc, #492]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a3e4:	f023 0107 	bic.w	r1, r3, #7
 810a3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a3ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a3ee:	4a78      	ldr	r2, [pc, #480]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a3f0:	430b      	orrs	r3, r1
 810a3f2:	6513      	str	r3, [r2, #80]	@ 0x50
 810a3f4:	e003      	b.n	810a3fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a3f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a3fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810a3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a406:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810a40a:	f04f 0b00 	mov.w	fp, #0
 810a40e:	ea5a 030b 	orrs.w	r3, sl, fp
 810a412:	d04c      	beq.n	810a4ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810a414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a41a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a41e:	d030      	beq.n	810a482 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810a420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a424:	d829      	bhi.n	810a47a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a426:	2bc0      	cmp	r3, #192	@ 0xc0
 810a428:	d02d      	beq.n	810a486 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810a42a:	2bc0      	cmp	r3, #192	@ 0xc0
 810a42c:	d825      	bhi.n	810a47a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a42e:	2b80      	cmp	r3, #128	@ 0x80
 810a430:	d018      	beq.n	810a464 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810a432:	2b80      	cmp	r3, #128	@ 0x80
 810a434:	d821      	bhi.n	810a47a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a436:	2b00      	cmp	r3, #0
 810a438:	d002      	beq.n	810a440 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810a43a:	2b40      	cmp	r3, #64	@ 0x40
 810a43c:	d007      	beq.n	810a44e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810a43e:	e01c      	b.n	810a47a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a440:	4b63      	ldr	r3, [pc, #396]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a444:	4a62      	ldr	r2, [pc, #392]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a44a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a44c:	e01c      	b.n	810a488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a452:	3308      	adds	r3, #8
 810a454:	2100      	movs	r1, #0
 810a456:	4618      	mov	r0, r3
 810a458:	f002 fab8 	bl	810c9cc <RCCEx_PLL2_Config>
 810a45c:	4603      	mov	r3, r0
 810a45e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a462:	e011      	b.n	810a488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a468:	3328      	adds	r3, #40	@ 0x28
 810a46a:	2100      	movs	r1, #0
 810a46c:	4618      	mov	r0, r3
 810a46e:	f002 fb5f 	bl	810cb30 <RCCEx_PLL3_Config>
 810a472:	4603      	mov	r3, r0
 810a474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a478:	e006      	b.n	810a488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a47a:	2301      	movs	r3, #1
 810a47c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a480:	e002      	b.n	810a488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a482:	bf00      	nop
 810a484:	e000      	b.n	810a488 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a486:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a48c:	2b00      	cmp	r3, #0
 810a48e:	d10a      	bne.n	810a4a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810a490:	4b4f      	ldr	r3, [pc, #316]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a494:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810a498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a49c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a49e:	4a4c      	ldr	r2, [pc, #304]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a4a0:	430b      	orrs	r3, r1
 810a4a2:	6513      	str	r3, [r2, #80]	@ 0x50
 810a4a4:	e003      	b.n	810a4ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a4a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a4aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810a4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4b6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810a4ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810a4be:	2300      	movs	r3, #0
 810a4c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810a4c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810a4c8:	460b      	mov	r3, r1
 810a4ca:	4313      	orrs	r3, r2
 810a4cc:	d053      	beq.n	810a576 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810a4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a4d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810a4d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a4da:	d035      	beq.n	810a548 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810a4dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a4e0:	d82e      	bhi.n	810a540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a4e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a4e6:	d031      	beq.n	810a54c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810a4e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a4ec:	d828      	bhi.n	810a540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a4ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a4f2:	d01a      	beq.n	810a52a <HAL_RCCEx_PeriphCLKConfig+0x292>
 810a4f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a4f8:	d822      	bhi.n	810a540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a4fa:	2b00      	cmp	r3, #0
 810a4fc:	d003      	beq.n	810a506 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810a4fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a502:	d007      	beq.n	810a514 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810a504:	e01c      	b.n	810a540 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a506:	4b32      	ldr	r3, [pc, #200]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a50a:	4a31      	ldr	r2, [pc, #196]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a50c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a512:	e01c      	b.n	810a54e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a518:	3308      	adds	r3, #8
 810a51a:	2100      	movs	r1, #0
 810a51c:	4618      	mov	r0, r3
 810a51e:	f002 fa55 	bl	810c9cc <RCCEx_PLL2_Config>
 810a522:	4603      	mov	r3, r0
 810a524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a528:	e011      	b.n	810a54e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a52e:	3328      	adds	r3, #40	@ 0x28
 810a530:	2100      	movs	r1, #0
 810a532:	4618      	mov	r0, r3
 810a534:	f002 fafc 	bl	810cb30 <RCCEx_PLL3_Config>
 810a538:	4603      	mov	r3, r0
 810a53a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a53e:	e006      	b.n	810a54e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a540:	2301      	movs	r3, #1
 810a542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a546:	e002      	b.n	810a54e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a548:	bf00      	nop
 810a54a:	e000      	b.n	810a54e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a54c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a54e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a552:	2b00      	cmp	r3, #0
 810a554:	d10b      	bne.n	810a56e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810a556:	4b1e      	ldr	r3, [pc, #120]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a55a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810a55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810a566:	4a1a      	ldr	r2, [pc, #104]	@ (810a5d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a568:	430b      	orrs	r3, r1
 810a56a:	6593      	str	r3, [r2, #88]	@ 0x58
 810a56c:	e003      	b.n	810a576 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a56e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810a576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a57e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810a582:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810a586:	2300      	movs	r3, #0
 810a588:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810a58c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810a590:	460b      	mov	r3, r1
 810a592:	4313      	orrs	r3, r2
 810a594:	d056      	beq.n	810a644 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810a596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a59a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a59e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a5a2:	d038      	beq.n	810a616 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810a5a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a5a8:	d831      	bhi.n	810a60e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a5aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a5ae:	d034      	beq.n	810a61a <HAL_RCCEx_PeriphCLKConfig+0x382>
 810a5b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a5b4:	d82b      	bhi.n	810a60e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a5b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a5ba:	d01d      	beq.n	810a5f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810a5bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a5c0:	d825      	bhi.n	810a60e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a5c2:	2b00      	cmp	r3, #0
 810a5c4:	d006      	beq.n	810a5d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810a5c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810a5ca:	d00a      	beq.n	810a5e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810a5cc:	e01f      	b.n	810a60e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a5ce:	bf00      	nop
 810a5d0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a5d4:	4ba2      	ldr	r3, [pc, #648]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a5d8:	4aa1      	ldr	r2, [pc, #644]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a5da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a5de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a5e0:	e01c      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5e6:	3308      	adds	r3, #8
 810a5e8:	2100      	movs	r1, #0
 810a5ea:	4618      	mov	r0, r3
 810a5ec:	f002 f9ee 	bl	810c9cc <RCCEx_PLL2_Config>
 810a5f0:	4603      	mov	r3, r0
 810a5f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a5f6:	e011      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a5fc:	3328      	adds	r3, #40	@ 0x28
 810a5fe:	2100      	movs	r1, #0
 810a600:	4618      	mov	r0, r3
 810a602:	f002 fa95 	bl	810cb30 <RCCEx_PLL3_Config>
 810a606:	4603      	mov	r3, r0
 810a608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a60c:	e006      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a60e:	2301      	movs	r3, #1
 810a610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a614:	e002      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a616:	bf00      	nop
 810a618:	e000      	b.n	810a61c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a61a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a61c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a620:	2b00      	cmp	r3, #0
 810a622:	d10b      	bne.n	810a63c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810a624:	4b8e      	ldr	r3, [pc, #568]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a628:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810a62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a630:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a634:	4a8a      	ldr	r2, [pc, #552]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a636:	430b      	orrs	r3, r1
 810a638:	6593      	str	r3, [r2, #88]	@ 0x58
 810a63a:	e003      	b.n	810a644 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a63c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810a644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a64c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810a650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810a654:	2300      	movs	r3, #0
 810a656:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810a65a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810a65e:	460b      	mov	r3, r1
 810a660:	4313      	orrs	r3, r2
 810a662:	d03a      	beq.n	810a6da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810a664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a66a:	2b30      	cmp	r3, #48	@ 0x30
 810a66c:	d01f      	beq.n	810a6ae <HAL_RCCEx_PeriphCLKConfig+0x416>
 810a66e:	2b30      	cmp	r3, #48	@ 0x30
 810a670:	d819      	bhi.n	810a6a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a672:	2b20      	cmp	r3, #32
 810a674:	d00c      	beq.n	810a690 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810a676:	2b20      	cmp	r3, #32
 810a678:	d815      	bhi.n	810a6a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a67a:	2b00      	cmp	r3, #0
 810a67c:	d019      	beq.n	810a6b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810a67e:	2b10      	cmp	r3, #16
 810a680:	d111      	bne.n	810a6a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a682:	4b77      	ldr	r3, [pc, #476]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a686:	4a76      	ldr	r2, [pc, #472]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a68c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a68e:	e011      	b.n	810a6b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a694:	3308      	adds	r3, #8
 810a696:	2102      	movs	r1, #2
 810a698:	4618      	mov	r0, r3
 810a69a:	f002 f997 	bl	810c9cc <RCCEx_PLL2_Config>
 810a69e:	4603      	mov	r3, r0
 810a6a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a6a4:	e006      	b.n	810a6b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810a6a6:	2301      	movs	r3, #1
 810a6a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a6ac:	e002      	b.n	810a6b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a6ae:	bf00      	nop
 810a6b0:	e000      	b.n	810a6b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a6b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a6b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6b8:	2b00      	cmp	r3, #0
 810a6ba:	d10a      	bne.n	810a6d2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810a6bc:	4b68      	ldr	r3, [pc, #416]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a6be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a6c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810a6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a6ca:	4a65      	ldr	r2, [pc, #404]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a6cc:	430b      	orrs	r3, r1
 810a6ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a6d0:	e003      	b.n	810a6da <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a6d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a6d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a6e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810a6e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810a6ea:	2300      	movs	r3, #0
 810a6ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810a6f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810a6f4:	460b      	mov	r3, r1
 810a6f6:	4313      	orrs	r3, r2
 810a6f8:	d051      	beq.n	810a79e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810a6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a6fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810a700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a704:	d035      	beq.n	810a772 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810a706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a70a:	d82e      	bhi.n	810a76a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a70c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a710:	d031      	beq.n	810a776 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810a712:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a716:	d828      	bhi.n	810a76a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a71c:	d01a      	beq.n	810a754 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810a71e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a722:	d822      	bhi.n	810a76a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a724:	2b00      	cmp	r3, #0
 810a726:	d003      	beq.n	810a730 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810a728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a72c:	d007      	beq.n	810a73e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810a72e:	e01c      	b.n	810a76a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a730:	4b4b      	ldr	r3, [pc, #300]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a734:	4a4a      	ldr	r2, [pc, #296]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a73a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a73c:	e01c      	b.n	810a778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a742:	3308      	adds	r3, #8
 810a744:	2100      	movs	r1, #0
 810a746:	4618      	mov	r0, r3
 810a748:	f002 f940 	bl	810c9cc <RCCEx_PLL2_Config>
 810a74c:	4603      	mov	r3, r0
 810a74e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a752:	e011      	b.n	810a778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a758:	3328      	adds	r3, #40	@ 0x28
 810a75a:	2100      	movs	r1, #0
 810a75c:	4618      	mov	r0, r3
 810a75e:	f002 f9e7 	bl	810cb30 <RCCEx_PLL3_Config>
 810a762:	4603      	mov	r3, r0
 810a764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a768:	e006      	b.n	810a778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a76a:	2301      	movs	r3, #1
 810a76c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a770:	e002      	b.n	810a778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a772:	bf00      	nop
 810a774:	e000      	b.n	810a778 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a776:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a77c:	2b00      	cmp	r3, #0
 810a77e:	d10a      	bne.n	810a796 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a780:	4b37      	ldr	r3, [pc, #220]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a784:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810a788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a78c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810a78e:	4a34      	ldr	r2, [pc, #208]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a790:	430b      	orrs	r3, r1
 810a792:	6513      	str	r3, [r2, #80]	@ 0x50
 810a794:	e003      	b.n	810a79e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a79a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a7a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810a7aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810a7ae:	2300      	movs	r3, #0
 810a7b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810a7b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810a7b8:	460b      	mov	r3, r1
 810a7ba:	4313      	orrs	r3, r2
 810a7bc:	d056      	beq.n	810a86c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810a7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a7c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a7c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a7c8:	d033      	beq.n	810a832 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a7ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a7ce:	d82c      	bhi.n	810a82a <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a7d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a7d4:	d02f      	beq.n	810a836 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810a7d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a7da:	d826      	bhi.n	810a82a <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a7dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a7e0:	d02b      	beq.n	810a83a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810a7e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a7e6:	d820      	bhi.n	810a82a <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a7e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a7ec:	d012      	beq.n	810a814 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810a7ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a7f2:	d81a      	bhi.n	810a82a <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a7f4:	2b00      	cmp	r3, #0
 810a7f6:	d022      	beq.n	810a83e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810a7f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a7fc:	d115      	bne.n	810a82a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a802:	3308      	adds	r3, #8
 810a804:	2101      	movs	r1, #1
 810a806:	4618      	mov	r0, r3
 810a808:	f002 f8e0 	bl	810c9cc <RCCEx_PLL2_Config>
 810a80c:	4603      	mov	r3, r0
 810a80e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a812:	e015      	b.n	810a840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a818:	3328      	adds	r3, #40	@ 0x28
 810a81a:	2101      	movs	r1, #1
 810a81c:	4618      	mov	r0, r3
 810a81e:	f002 f987 	bl	810cb30 <RCCEx_PLL3_Config>
 810a822:	4603      	mov	r3, r0
 810a824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a828:	e00a      	b.n	810a840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a82a:	2301      	movs	r3, #1
 810a82c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a830:	e006      	b.n	810a840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a832:	bf00      	nop
 810a834:	e004      	b.n	810a840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a836:	bf00      	nop
 810a838:	e002      	b.n	810a840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a83a:	bf00      	nop
 810a83c:	e000      	b.n	810a840 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a83e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a844:	2b00      	cmp	r3, #0
 810a846:	d10d      	bne.n	810a864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810a848:	4b05      	ldr	r3, [pc, #20]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a84a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a84c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810a850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a856:	4a02      	ldr	r2, [pc, #8]	@ (810a860 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a858:	430b      	orrs	r3, r1
 810a85a:	6513      	str	r3, [r2, #80]	@ 0x50
 810a85c:	e006      	b.n	810a86c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810a85e:	bf00      	nop
 810a860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810a86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a874:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810a878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810a87c:	2300      	movs	r3, #0
 810a87e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810a882:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810a886:	460b      	mov	r3, r1
 810a888:	4313      	orrs	r3, r2
 810a88a:	d055      	beq.n	810a938 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810a88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810a898:	d033      	beq.n	810a902 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810a89a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810a89e:	d82c      	bhi.n	810a8fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a8a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a8a4:	d02f      	beq.n	810a906 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810a8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a8aa:	d826      	bhi.n	810a8fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a8ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810a8b0:	d02b      	beq.n	810a90a <HAL_RCCEx_PeriphCLKConfig+0x672>
 810a8b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810a8b6:	d820      	bhi.n	810a8fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a8b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a8bc:	d012      	beq.n	810a8e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810a8be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a8c2:	d81a      	bhi.n	810a8fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a8c4:	2b00      	cmp	r3, #0
 810a8c6:	d022      	beq.n	810a90e <HAL_RCCEx_PeriphCLKConfig+0x676>
 810a8c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a8cc:	d115      	bne.n	810a8fa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a8d2:	3308      	adds	r3, #8
 810a8d4:	2101      	movs	r1, #1
 810a8d6:	4618      	mov	r0, r3
 810a8d8:	f002 f878 	bl	810c9cc <RCCEx_PLL2_Config>
 810a8dc:	4603      	mov	r3, r0
 810a8de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810a8e2:	e015      	b.n	810a910 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a8e8:	3328      	adds	r3, #40	@ 0x28
 810a8ea:	2101      	movs	r1, #1
 810a8ec:	4618      	mov	r0, r3
 810a8ee:	f002 f91f 	bl	810cb30 <RCCEx_PLL3_Config>
 810a8f2:	4603      	mov	r3, r0
 810a8f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810a8f8:	e00a      	b.n	810a910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810a8fa:	2301      	movs	r3, #1
 810a8fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a900:	e006      	b.n	810a910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a902:	bf00      	nop
 810a904:	e004      	b.n	810a910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a906:	bf00      	nop
 810a908:	e002      	b.n	810a910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a90a:	bf00      	nop
 810a90c:	e000      	b.n	810a910 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a90e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a914:	2b00      	cmp	r3, #0
 810a916:	d10b      	bne.n	810a930 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810a918:	4ba4      	ldr	r3, [pc, #656]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a91a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a91c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810a920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a928:	4aa0      	ldr	r2, [pc, #640]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a92a:	430b      	orrs	r3, r1
 810a92c:	6593      	str	r3, [r2, #88]	@ 0x58
 810a92e:	e003      	b.n	810a938 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810a938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a940:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810a944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810a948:	2300      	movs	r3, #0
 810a94a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810a94e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810a952:	460b      	mov	r3, r1
 810a954:	4313      	orrs	r3, r2
 810a956:	d037      	beq.n	810a9c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810a958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a95c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a95e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a962:	d00e      	beq.n	810a982 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 810a964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a968:	d816      	bhi.n	810a998 <HAL_RCCEx_PeriphCLKConfig+0x700>
 810a96a:	2b00      	cmp	r3, #0
 810a96c:	d018      	beq.n	810a9a0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 810a96e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a972:	d111      	bne.n	810a998 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a974:	4b8d      	ldr	r3, [pc, #564]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a978:	4a8c      	ldr	r2, [pc, #560]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a97a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a97e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810a980:	e00f      	b.n	810a9a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a986:	3308      	adds	r3, #8
 810a988:	2101      	movs	r1, #1
 810a98a:	4618      	mov	r0, r3
 810a98c:	f002 f81e 	bl	810c9cc <RCCEx_PLL2_Config>
 810a990:	4603      	mov	r3, r0
 810a992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810a996:	e004      	b.n	810a9a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a998:	2301      	movs	r3, #1
 810a99a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810a99e:	e000      	b.n	810a9a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810a9a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a9a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a9a6:	2b00      	cmp	r3, #0
 810a9a8:	d10a      	bne.n	810a9c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810a9aa:	4b80      	ldr	r3, [pc, #512]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a9ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a9ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810a9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a9b8:	4a7c      	ldr	r2, [pc, #496]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810a9ba:	430b      	orrs	r3, r1
 810a9bc:	6513      	str	r3, [r2, #80]	@ 0x50
 810a9be:	e003      	b.n	810a9c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810a9c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810a9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a9d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810a9d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810a9d8:	2300      	movs	r3, #0
 810a9da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810a9de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810a9e2:	460b      	mov	r3, r1
 810a9e4:	4313      	orrs	r3, r2
 810a9e6:	d039      	beq.n	810aa5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810a9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810a9ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810a9ee:	2b03      	cmp	r3, #3
 810a9f0:	d81c      	bhi.n	810aa2c <HAL_RCCEx_PeriphCLKConfig+0x794>
 810a9f2:	a201      	add	r2, pc, #4	@ (adr r2, 810a9f8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 810a9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a9f8:	0810aa35 	.word	0x0810aa35
 810a9fc:	0810aa09 	.word	0x0810aa09
 810aa00:	0810aa17 	.word	0x0810aa17
 810aa04:	0810aa35 	.word	0x0810aa35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810aa08:	4b68      	ldr	r3, [pc, #416]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aa0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aa0c:	4a67      	ldr	r2, [pc, #412]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aa0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810aa12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810aa14:	e00f      	b.n	810aa36 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810aa16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aa1a:	3308      	adds	r3, #8
 810aa1c:	2102      	movs	r1, #2
 810aa1e:	4618      	mov	r0, r3
 810aa20:	f001 ffd4 	bl	810c9cc <RCCEx_PLL2_Config>
 810aa24:	4603      	mov	r3, r0
 810aa26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810aa2a:	e004      	b.n	810aa36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810aa2c:	2301      	movs	r3, #1
 810aa2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810aa32:	e000      	b.n	810aa36 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 810aa34:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aa36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aa3a:	2b00      	cmp	r3, #0
 810aa3c:	d10a      	bne.n	810aa54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810aa3e:	4b5b      	ldr	r3, [pc, #364]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aa40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810aa42:	f023 0103 	bic.w	r1, r3, #3
 810aa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aa4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810aa4c:	4a57      	ldr	r2, [pc, #348]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aa4e:	430b      	orrs	r3, r1
 810aa50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810aa52:	e003      	b.n	810aa5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aa54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aa58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810aa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810aa68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810aa6c:	2300      	movs	r3, #0
 810aa6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810aa72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810aa76:	460b      	mov	r3, r1
 810aa78:	4313      	orrs	r3, r2
 810aa7a:	f000 809f 	beq.w	810abbc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810aa7e:	4b4c      	ldr	r3, [pc, #304]	@ (810abb0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810aa80:	681b      	ldr	r3, [r3, #0]
 810aa82:	4a4b      	ldr	r2, [pc, #300]	@ (810abb0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810aa84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810aa88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810aa8a:	f7fa f941 	bl	8104d10 <HAL_GetTick>
 810aa8e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810aa92:	e00b      	b.n	810aaac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810aa94:	f7fa f93c 	bl	8104d10 <HAL_GetTick>
 810aa98:	4602      	mov	r2, r0
 810aa9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810aa9e:	1ad3      	subs	r3, r2, r3
 810aaa0:	2b64      	cmp	r3, #100	@ 0x64
 810aaa2:	d903      	bls.n	810aaac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 810aaa4:	2303      	movs	r3, #3
 810aaa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810aaaa:	e005      	b.n	810aab8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810aaac:	4b40      	ldr	r3, [pc, #256]	@ (810abb0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810aaae:	681b      	ldr	r3, [r3, #0]
 810aab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810aab4:	2b00      	cmp	r3, #0
 810aab6:	d0ed      	beq.n	810aa94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 810aab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aabc:	2b00      	cmp	r3, #0
 810aabe:	d179      	bne.n	810abb4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810aac0:	4b3a      	ldr	r3, [pc, #232]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aac2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810aac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aac8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810aacc:	4053      	eors	r3, r2
 810aace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810aad2:	2b00      	cmp	r3, #0
 810aad4:	d015      	beq.n	810ab02 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810aad6:	4b35      	ldr	r3, [pc, #212]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810aada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810aade:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810aae2:	4b32      	ldr	r3, [pc, #200]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810aae6:	4a31      	ldr	r2, [pc, #196]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810aaec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810aaee:	4b2f      	ldr	r3, [pc, #188]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aaf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810aaf2:	4a2e      	ldr	r2, [pc, #184]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aaf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810aaf8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810aafa:	4a2c      	ldr	r2, [pc, #176]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810aafc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ab06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ab0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ab0e:	d118      	bne.n	810ab42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810ab10:	f7fa f8fe 	bl	8104d10 <HAL_GetTick>
 810ab14:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810ab18:	e00d      	b.n	810ab36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810ab1a:	f7fa f8f9 	bl	8104d10 <HAL_GetTick>
 810ab1e:	4602      	mov	r2, r0
 810ab20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810ab24:	1ad2      	subs	r2, r2, r3
 810ab26:	f241 3388 	movw	r3, #5000	@ 0x1388
 810ab2a:	429a      	cmp	r2, r3
 810ab2c:	d903      	bls.n	810ab36 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810ab2e:	2303      	movs	r3, #3
 810ab30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 810ab34:	e005      	b.n	810ab42 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810ab36:	4b1d      	ldr	r3, [pc, #116]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ab3a:	f003 0302 	and.w	r3, r3, #2
 810ab3e:	2b00      	cmp	r3, #0
 810ab40:	d0eb      	beq.n	810ab1a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810ab42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ab46:	2b00      	cmp	r3, #0
 810ab48:	d12b      	bne.n	810aba2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ab4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ab52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810ab56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810ab5a:	d110      	bne.n	810ab7e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 810ab5c:	4b13      	ldr	r3, [pc, #76]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab5e:	691b      	ldr	r3, [r3, #16]
 810ab60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810ab64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ab68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ab6c:	091b      	lsrs	r3, r3, #4
 810ab6e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810ab72:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810ab76:	4a0d      	ldr	r2, [pc, #52]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab78:	430b      	orrs	r3, r1
 810ab7a:	6113      	str	r3, [r2, #16]
 810ab7c:	e005      	b.n	810ab8a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810ab7e:	4b0b      	ldr	r3, [pc, #44]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab80:	691b      	ldr	r3, [r3, #16]
 810ab82:	4a0a      	ldr	r2, [pc, #40]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810ab88:	6113      	str	r3, [r2, #16]
 810ab8a:	4b08      	ldr	r3, [pc, #32]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab8c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ab92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ab96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810ab9a:	4a04      	ldr	r2, [pc, #16]	@ (810abac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810ab9c:	430b      	orrs	r3, r1
 810ab9e:	6713      	str	r3, [r2, #112]	@ 0x70
 810aba0:	e00c      	b.n	810abbc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810aba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810abaa:	e007      	b.n	810abbc <HAL_RCCEx_PeriphCLKConfig+0x924>
 810abac:	58024400 	.word	0x58024400
 810abb0:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810abb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810abb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810abbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810abc4:	f002 0301 	and.w	r3, r2, #1
 810abc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810abcc:	2300      	movs	r3, #0
 810abce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810abd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810abd6:	460b      	mov	r3, r1
 810abd8:	4313      	orrs	r3, r2
 810abda:	f000 8089 	beq.w	810acf0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810abde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810abe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810abe4:	2b28      	cmp	r3, #40	@ 0x28
 810abe6:	d86b      	bhi.n	810acc0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810abe8:	a201      	add	r2, pc, #4	@ (adr r2, 810abf0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810abea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810abee:	bf00      	nop
 810abf0:	0810acc9 	.word	0x0810acc9
 810abf4:	0810acc1 	.word	0x0810acc1
 810abf8:	0810acc1 	.word	0x0810acc1
 810abfc:	0810acc1 	.word	0x0810acc1
 810ac00:	0810acc1 	.word	0x0810acc1
 810ac04:	0810acc1 	.word	0x0810acc1
 810ac08:	0810acc1 	.word	0x0810acc1
 810ac0c:	0810acc1 	.word	0x0810acc1
 810ac10:	0810ac95 	.word	0x0810ac95
 810ac14:	0810acc1 	.word	0x0810acc1
 810ac18:	0810acc1 	.word	0x0810acc1
 810ac1c:	0810acc1 	.word	0x0810acc1
 810ac20:	0810acc1 	.word	0x0810acc1
 810ac24:	0810acc1 	.word	0x0810acc1
 810ac28:	0810acc1 	.word	0x0810acc1
 810ac2c:	0810acc1 	.word	0x0810acc1
 810ac30:	0810acab 	.word	0x0810acab
 810ac34:	0810acc1 	.word	0x0810acc1
 810ac38:	0810acc1 	.word	0x0810acc1
 810ac3c:	0810acc1 	.word	0x0810acc1
 810ac40:	0810acc1 	.word	0x0810acc1
 810ac44:	0810acc1 	.word	0x0810acc1
 810ac48:	0810acc1 	.word	0x0810acc1
 810ac4c:	0810acc1 	.word	0x0810acc1
 810ac50:	0810acc9 	.word	0x0810acc9
 810ac54:	0810acc1 	.word	0x0810acc1
 810ac58:	0810acc1 	.word	0x0810acc1
 810ac5c:	0810acc1 	.word	0x0810acc1
 810ac60:	0810acc1 	.word	0x0810acc1
 810ac64:	0810acc1 	.word	0x0810acc1
 810ac68:	0810acc1 	.word	0x0810acc1
 810ac6c:	0810acc1 	.word	0x0810acc1
 810ac70:	0810acc9 	.word	0x0810acc9
 810ac74:	0810acc1 	.word	0x0810acc1
 810ac78:	0810acc1 	.word	0x0810acc1
 810ac7c:	0810acc1 	.word	0x0810acc1
 810ac80:	0810acc1 	.word	0x0810acc1
 810ac84:	0810acc1 	.word	0x0810acc1
 810ac88:	0810acc1 	.word	0x0810acc1
 810ac8c:	0810acc1 	.word	0x0810acc1
 810ac90:	0810acc9 	.word	0x0810acc9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ac94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ac98:	3308      	adds	r3, #8
 810ac9a:	2101      	movs	r1, #1
 810ac9c:	4618      	mov	r0, r3
 810ac9e:	f001 fe95 	bl	810c9cc <RCCEx_PLL2_Config>
 810aca2:	4603      	mov	r3, r0
 810aca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810aca8:	e00f      	b.n	810acca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810acaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810acae:	3328      	adds	r3, #40	@ 0x28
 810acb0:	2101      	movs	r1, #1
 810acb2:	4618      	mov	r0, r3
 810acb4:	f001 ff3c 	bl	810cb30 <RCCEx_PLL3_Config>
 810acb8:	4603      	mov	r3, r0
 810acba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810acbe:	e004      	b.n	810acca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810acc0:	2301      	movs	r3, #1
 810acc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810acc6:	e000      	b.n	810acca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 810acc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 810acca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810acce:	2b00      	cmp	r3, #0
 810acd0:	d10a      	bne.n	810ace8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810acd2:	4bbf      	ldr	r3, [pc, #764]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810acd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810acd6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810acda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810acde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810ace0:	4abb      	ldr	r2, [pc, #748]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ace2:	430b      	orrs	r3, r1
 810ace4:	6553      	str	r3, [r2, #84]	@ 0x54
 810ace6:	e003      	b.n	810acf0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ace8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810acec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810acf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acf8:	f002 0302 	and.w	r3, r2, #2
 810acfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810ad00:	2300      	movs	r3, #0
 810ad02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810ad06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810ad0a:	460b      	mov	r3, r1
 810ad0c:	4313      	orrs	r3, r2
 810ad0e:	d041      	beq.n	810ad94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810ad10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ad16:	2b05      	cmp	r3, #5
 810ad18:	d824      	bhi.n	810ad64 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810ad1a:	a201      	add	r2, pc, #4	@ (adr r2, 810ad20 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 810ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad20:	0810ad6d 	.word	0x0810ad6d
 810ad24:	0810ad39 	.word	0x0810ad39
 810ad28:	0810ad4f 	.word	0x0810ad4f
 810ad2c:	0810ad6d 	.word	0x0810ad6d
 810ad30:	0810ad6d 	.word	0x0810ad6d
 810ad34:	0810ad6d 	.word	0x0810ad6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ad38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad3c:	3308      	adds	r3, #8
 810ad3e:	2101      	movs	r1, #1
 810ad40:	4618      	mov	r0, r3
 810ad42:	f001 fe43 	bl	810c9cc <RCCEx_PLL2_Config>
 810ad46:	4603      	mov	r3, r0
 810ad48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810ad4c:	e00f      	b.n	810ad6e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810ad4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad52:	3328      	adds	r3, #40	@ 0x28
 810ad54:	2101      	movs	r1, #1
 810ad56:	4618      	mov	r0, r3
 810ad58:	f001 feea 	bl	810cb30 <RCCEx_PLL3_Config>
 810ad5c:	4603      	mov	r3, r0
 810ad5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810ad62:	e004      	b.n	810ad6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ad64:	2301      	movs	r3, #1
 810ad66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810ad6a:	e000      	b.n	810ad6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 810ad6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ad6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ad72:	2b00      	cmp	r3, #0
 810ad74:	d10a      	bne.n	810ad8c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810ad76:	4b96      	ldr	r3, [pc, #600]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ad78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ad7a:	f023 0107 	bic.w	r1, r3, #7
 810ad7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ad84:	4a92      	ldr	r2, [pc, #584]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ad86:	430b      	orrs	r3, r1
 810ad88:	6553      	str	r3, [r2, #84]	@ 0x54
 810ad8a:	e003      	b.n	810ad94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ad8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ad90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810ad94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad9c:	f002 0304 	and.w	r3, r2, #4
 810ada0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810ada4:	2300      	movs	r3, #0
 810ada6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810adaa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810adae:	460b      	mov	r3, r1
 810adb0:	4313      	orrs	r3, r2
 810adb2:	d044      	beq.n	810ae3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810adb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810adb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810adbc:	2b05      	cmp	r3, #5
 810adbe:	d825      	bhi.n	810ae0c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810adc0:	a201      	add	r2, pc, #4	@ (adr r2, 810adc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810adc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810adc6:	bf00      	nop
 810adc8:	0810ae15 	.word	0x0810ae15
 810adcc:	0810ade1 	.word	0x0810ade1
 810add0:	0810adf7 	.word	0x0810adf7
 810add4:	0810ae15 	.word	0x0810ae15
 810add8:	0810ae15 	.word	0x0810ae15
 810addc:	0810ae15 	.word	0x0810ae15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ade0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ade4:	3308      	adds	r3, #8
 810ade6:	2101      	movs	r1, #1
 810ade8:	4618      	mov	r0, r3
 810adea:	f001 fdef 	bl	810c9cc <RCCEx_PLL2_Config>
 810adee:	4603      	mov	r3, r0
 810adf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810adf4:	e00f      	b.n	810ae16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810adf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810adfa:	3328      	adds	r3, #40	@ 0x28
 810adfc:	2101      	movs	r1, #1
 810adfe:	4618      	mov	r0, r3
 810ae00:	f001 fe96 	bl	810cb30 <RCCEx_PLL3_Config>
 810ae04:	4603      	mov	r3, r0
 810ae06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810ae0a:	e004      	b.n	810ae16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ae0c:	2301      	movs	r3, #1
 810ae0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810ae12:	e000      	b.n	810ae16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810ae14:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ae16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ae1a:	2b00      	cmp	r3, #0
 810ae1c:	d10b      	bne.n	810ae36 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810ae1e:	4b6c      	ldr	r3, [pc, #432]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ae20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ae22:	f023 0107 	bic.w	r1, r3, #7
 810ae26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ae2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810ae2e:	4a68      	ldr	r2, [pc, #416]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810ae30:	430b      	orrs	r3, r1
 810ae32:	6593      	str	r3, [r2, #88]	@ 0x58
 810ae34:	e003      	b.n	810ae3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ae36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810ae3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ae46:	f002 0320 	and.w	r3, r2, #32
 810ae4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810ae4e:	2300      	movs	r3, #0
 810ae50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810ae54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810ae58:	460b      	mov	r3, r1
 810ae5a:	4313      	orrs	r3, r2
 810ae5c:	d055      	beq.n	810af0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810ae5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810ae62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ae66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810ae6a:	d033      	beq.n	810aed4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 810ae6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810ae70:	d82c      	bhi.n	810aecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810ae72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ae76:	d02f      	beq.n	810aed8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810ae78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ae7c:	d826      	bhi.n	810aecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810ae7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810ae82:	d02b      	beq.n	810aedc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810ae84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810ae88:	d820      	bhi.n	810aecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810ae8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ae8e:	d012      	beq.n	810aeb6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810ae90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ae94:	d81a      	bhi.n	810aecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810ae96:	2b00      	cmp	r3, #0
 810ae98:	d022      	beq.n	810aee0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810ae9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ae9e:	d115      	bne.n	810aecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810aea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aea4:	3308      	adds	r3, #8
 810aea6:	2100      	movs	r1, #0
 810aea8:	4618      	mov	r0, r3
 810aeaa:	f001 fd8f 	bl	810c9cc <RCCEx_PLL2_Config>
 810aeae:	4603      	mov	r3, r0
 810aeb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810aeb4:	e015      	b.n	810aee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aeba:	3328      	adds	r3, #40	@ 0x28
 810aebc:	2102      	movs	r1, #2
 810aebe:	4618      	mov	r0, r3
 810aec0:	f001 fe36 	bl	810cb30 <RCCEx_PLL3_Config>
 810aec4:	4603      	mov	r3, r0
 810aec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810aeca:	e00a      	b.n	810aee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810aecc:	2301      	movs	r3, #1
 810aece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810aed2:	e006      	b.n	810aee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810aed4:	bf00      	nop
 810aed6:	e004      	b.n	810aee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810aed8:	bf00      	nop
 810aeda:	e002      	b.n	810aee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810aedc:	bf00      	nop
 810aede:	e000      	b.n	810aee2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810aee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810aee6:	2b00      	cmp	r3, #0
 810aee8:	d10b      	bne.n	810af02 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810aeea:	4b39      	ldr	r3, [pc, #228]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810aeec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aeee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810aef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810aef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810aefa:	4a35      	ldr	r2, [pc, #212]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810aefc:	430b      	orrs	r3, r1
 810aefe:	6553      	str	r3, [r2, #84]	@ 0x54
 810af00:	e003      	b.n	810af0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810af02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810af06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810af0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af12:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810af16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810af1a:	2300      	movs	r3, #0
 810af1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810af20:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810af24:	460b      	mov	r3, r1
 810af26:	4313      	orrs	r3, r2
 810af28:	d058      	beq.n	810afdc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810af2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810af2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810af32:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810af36:	d033      	beq.n	810afa0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810af38:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810af3c:	d82c      	bhi.n	810af98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810af3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810af42:	d02f      	beq.n	810afa4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810af44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810af48:	d826      	bhi.n	810af98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810af4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810af4e:	d02b      	beq.n	810afa8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810af50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810af54:	d820      	bhi.n	810af98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810af56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810af5a:	d012      	beq.n	810af82 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 810af5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810af60:	d81a      	bhi.n	810af98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810af62:	2b00      	cmp	r3, #0
 810af64:	d022      	beq.n	810afac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810af66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810af6a:	d115      	bne.n	810af98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810af6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810af70:	3308      	adds	r3, #8
 810af72:	2100      	movs	r1, #0
 810af74:	4618      	mov	r0, r3
 810af76:	f001 fd29 	bl	810c9cc <RCCEx_PLL2_Config>
 810af7a:	4603      	mov	r3, r0
 810af7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810af80:	e015      	b.n	810afae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810af82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810af86:	3328      	adds	r3, #40	@ 0x28
 810af88:	2102      	movs	r1, #2
 810af8a:	4618      	mov	r0, r3
 810af8c:	f001 fdd0 	bl	810cb30 <RCCEx_PLL3_Config>
 810af90:	4603      	mov	r3, r0
 810af92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810af96:	e00a      	b.n	810afae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810af98:	2301      	movs	r3, #1
 810af9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810af9e:	e006      	b.n	810afae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810afa0:	bf00      	nop
 810afa2:	e004      	b.n	810afae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810afa4:	bf00      	nop
 810afa6:	e002      	b.n	810afae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810afa8:	bf00      	nop
 810afaa:	e000      	b.n	810afae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810afac:	bf00      	nop
    }

    if (ret == HAL_OK)
 810afae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810afb2:	2b00      	cmp	r3, #0
 810afb4:	d10e      	bne.n	810afd4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810afb6:	4b06      	ldr	r3, [pc, #24]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810afb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810afba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810afbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810afc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810afc6:	4a02      	ldr	r2, [pc, #8]	@ (810afd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810afc8:	430b      	orrs	r3, r1
 810afca:	6593      	str	r3, [r2, #88]	@ 0x58
 810afcc:	e006      	b.n	810afdc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810afce:	bf00      	nop
 810afd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810afd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810afd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810afdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afe4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810afe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810afec:	2300      	movs	r3, #0
 810afee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810aff2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810aff6:	460b      	mov	r3, r1
 810aff8:	4313      	orrs	r3, r2
 810affa:	d055      	beq.n	810b0a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810affc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b004:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810b008:	d033      	beq.n	810b072 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810b00a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810b00e:	d82c      	bhi.n	810b06a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810b010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b014:	d02f      	beq.n	810b076 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810b016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b01a:	d826      	bhi.n	810b06a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810b01c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810b020:	d02b      	beq.n	810b07a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810b022:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810b026:	d820      	bhi.n	810b06a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810b028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b02c:	d012      	beq.n	810b054 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810b02e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b032:	d81a      	bhi.n	810b06a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810b034:	2b00      	cmp	r3, #0
 810b036:	d022      	beq.n	810b07e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810b038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b03c:	d115      	bne.n	810b06a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b042:	3308      	adds	r3, #8
 810b044:	2100      	movs	r1, #0
 810b046:	4618      	mov	r0, r3
 810b048:	f001 fcc0 	bl	810c9cc <RCCEx_PLL2_Config>
 810b04c:	4603      	mov	r3, r0
 810b04e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b052:	e015      	b.n	810b080 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b058:	3328      	adds	r3, #40	@ 0x28
 810b05a:	2102      	movs	r1, #2
 810b05c:	4618      	mov	r0, r3
 810b05e:	f001 fd67 	bl	810cb30 <RCCEx_PLL3_Config>
 810b062:	4603      	mov	r3, r0
 810b064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b068:	e00a      	b.n	810b080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b06a:	2301      	movs	r3, #1
 810b06c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b070:	e006      	b.n	810b080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810b072:	bf00      	nop
 810b074:	e004      	b.n	810b080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810b076:	bf00      	nop
 810b078:	e002      	b.n	810b080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810b07a:	bf00      	nop
 810b07c:	e000      	b.n	810b080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810b07e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b084:	2b00      	cmp	r3, #0
 810b086:	d10b      	bne.n	810b0a0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810b088:	4ba1      	ldr	r3, [pc, #644]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b08a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b08c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b094:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b098:	4a9d      	ldr	r2, [pc, #628]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b09a:	430b      	orrs	r3, r1
 810b09c:	6593      	str	r3, [r2, #88]	@ 0x58
 810b09e:	e003      	b.n	810b0a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b0a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b0a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810b0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b0b0:	f002 0308 	and.w	r3, r2, #8
 810b0b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b0b8:	2300      	movs	r3, #0
 810b0ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b0be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810b0c2:	460b      	mov	r3, r1
 810b0c4:	4313      	orrs	r3, r2
 810b0c6:	d01e      	beq.n	810b106 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810b0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b0cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b0d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b0d4:	d10c      	bne.n	810b0f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b0da:	3328      	adds	r3, #40	@ 0x28
 810b0dc:	2102      	movs	r1, #2
 810b0de:	4618      	mov	r0, r3
 810b0e0:	f001 fd26 	bl	810cb30 <RCCEx_PLL3_Config>
 810b0e4:	4603      	mov	r3, r0
 810b0e6:	2b00      	cmp	r3, #0
 810b0e8:	d002      	beq.n	810b0f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810b0ea:	2301      	movs	r3, #1
 810b0ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810b0f0:	4b87      	ldr	r3, [pc, #540]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b0f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b0f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810b0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b0fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b100:	4a83      	ldr	r2, [pc, #524]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b102:	430b      	orrs	r3, r1
 810b104:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810b106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b10e:	f002 0310 	and.w	r3, r2, #16
 810b112:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810b116:	2300      	movs	r3, #0
 810b118:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810b11c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810b120:	460b      	mov	r3, r1
 810b122:	4313      	orrs	r3, r2
 810b124:	d01e      	beq.n	810b164 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810b126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b12a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810b12e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b132:	d10c      	bne.n	810b14e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b138:	3328      	adds	r3, #40	@ 0x28
 810b13a:	2102      	movs	r1, #2
 810b13c:	4618      	mov	r0, r3
 810b13e:	f001 fcf7 	bl	810cb30 <RCCEx_PLL3_Config>
 810b142:	4603      	mov	r3, r0
 810b144:	2b00      	cmp	r3, #0
 810b146:	d002      	beq.n	810b14e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810b148:	2301      	movs	r3, #1
 810b14a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810b14e:	4b70      	ldr	r3, [pc, #448]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b152:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810b156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b15a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810b15e:	4a6c      	ldr	r2, [pc, #432]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b160:	430b      	orrs	r3, r1
 810b162:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810b164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b16c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810b170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b174:	2300      	movs	r3, #0
 810b176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b17a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810b17e:	460b      	mov	r3, r1
 810b180:	4313      	orrs	r3, r2
 810b182:	d03e      	beq.n	810b202 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810b184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b188:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810b18c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b190:	d022      	beq.n	810b1d8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810b192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b196:	d81b      	bhi.n	810b1d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810b198:	2b00      	cmp	r3, #0
 810b19a:	d003      	beq.n	810b1a4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810b19c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b1a0:	d00b      	beq.n	810b1ba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810b1a2:	e015      	b.n	810b1d0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b1a8:	3308      	adds	r3, #8
 810b1aa:	2100      	movs	r1, #0
 810b1ac:	4618      	mov	r0, r3
 810b1ae:	f001 fc0d 	bl	810c9cc <RCCEx_PLL2_Config>
 810b1b2:	4603      	mov	r3, r0
 810b1b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b1b8:	e00f      	b.n	810b1da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b1be:	3328      	adds	r3, #40	@ 0x28
 810b1c0:	2102      	movs	r1, #2
 810b1c2:	4618      	mov	r0, r3
 810b1c4:	f001 fcb4 	bl	810cb30 <RCCEx_PLL3_Config>
 810b1c8:	4603      	mov	r3, r0
 810b1ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b1ce:	e004      	b.n	810b1da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b1d0:	2301      	movs	r3, #1
 810b1d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b1d6:	e000      	b.n	810b1da <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810b1d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b1da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b1de:	2b00      	cmp	r3, #0
 810b1e0:	d10b      	bne.n	810b1fa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810b1e2:	4b4b      	ldr	r3, [pc, #300]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b1e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b1e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810b1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b1ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810b1f2:	4a47      	ldr	r2, [pc, #284]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b1f4:	430b      	orrs	r3, r1
 810b1f6:	6593      	str	r3, [r2, #88]	@ 0x58
 810b1f8:	e003      	b.n	810b202 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b1fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810b202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b20a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810b20e:	67bb      	str	r3, [r7, #120]	@ 0x78
 810b210:	2300      	movs	r3, #0
 810b212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810b214:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810b218:	460b      	mov	r3, r1
 810b21a:	4313      	orrs	r3, r2
 810b21c:	d03b      	beq.n	810b296 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810b21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b226:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b22a:	d01f      	beq.n	810b26c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 810b22c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b230:	d818      	bhi.n	810b264 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810b232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b236:	d003      	beq.n	810b240 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810b238:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b23c:	d007      	beq.n	810b24e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810b23e:	e011      	b.n	810b264 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b240:	4b33      	ldr	r3, [pc, #204]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b244:	4a32      	ldr	r2, [pc, #200]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b24a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810b24c:	e00f      	b.n	810b26e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b252:	3328      	adds	r3, #40	@ 0x28
 810b254:	2101      	movs	r1, #1
 810b256:	4618      	mov	r0, r3
 810b258:	f001 fc6a 	bl	810cb30 <RCCEx_PLL3_Config>
 810b25c:	4603      	mov	r3, r0
 810b25e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810b262:	e004      	b.n	810b26e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b264:	2301      	movs	r3, #1
 810b266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b26a:	e000      	b.n	810b26e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 810b26c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b26e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b272:	2b00      	cmp	r3, #0
 810b274:	d10b      	bne.n	810b28e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810b276:	4b26      	ldr	r3, [pc, #152]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b27a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810b27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b286:	4a22      	ldr	r2, [pc, #136]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b288:	430b      	orrs	r3, r1
 810b28a:	6553      	str	r3, [r2, #84]	@ 0x54
 810b28c:	e003      	b.n	810b296 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b28e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810b296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b29e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810b2a2:	673b      	str	r3, [r7, #112]	@ 0x70
 810b2a4:	2300      	movs	r3, #0
 810b2a6:	677b      	str	r3, [r7, #116]	@ 0x74
 810b2a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810b2ac:	460b      	mov	r3, r1
 810b2ae:	4313      	orrs	r3, r2
 810b2b0:	d034      	beq.n	810b31c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810b2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b2b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b2b8:	2b00      	cmp	r3, #0
 810b2ba:	d003      	beq.n	810b2c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 810b2bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b2c0:	d007      	beq.n	810b2d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810b2c2:	e011      	b.n	810b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b2c4:	4b12      	ldr	r3, [pc, #72]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b2c8:	4a11      	ldr	r2, [pc, #68]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b2ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b2ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b2d0:	e00e      	b.n	810b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b2d6:	3308      	adds	r3, #8
 810b2d8:	2102      	movs	r1, #2
 810b2da:	4618      	mov	r0, r3
 810b2dc:	f001 fb76 	bl	810c9cc <RCCEx_PLL2_Config>
 810b2e0:	4603      	mov	r3, r0
 810b2e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b2e6:	e003      	b.n	810b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810b2e8:	2301      	movs	r3, #1
 810b2ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b2ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b2f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b2f4:	2b00      	cmp	r3, #0
 810b2f6:	d10d      	bne.n	810b314 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810b2f8:	4b05      	ldr	r3, [pc, #20]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b2fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b2fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810b300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b306:	4a02      	ldr	r2, [pc, #8]	@ (810b310 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810b308:	430b      	orrs	r3, r1
 810b30a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810b30c:	e006      	b.n	810b31c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810b30e:	bf00      	nop
 810b310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810b31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b320:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b324:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810b328:	66bb      	str	r3, [r7, #104]	@ 0x68
 810b32a:	2300      	movs	r3, #0
 810b32c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810b32e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810b332:	460b      	mov	r3, r1
 810b334:	4313      	orrs	r3, r2
 810b336:	d00c      	beq.n	810b352 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b33c:	3328      	adds	r3, #40	@ 0x28
 810b33e:	2102      	movs	r1, #2
 810b340:	4618      	mov	r0, r3
 810b342:	f001 fbf5 	bl	810cb30 <RCCEx_PLL3_Config>
 810b346:	4603      	mov	r3, r0
 810b348:	2b00      	cmp	r3, #0
 810b34a:	d002      	beq.n	810b352 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 810b34c:	2301      	movs	r3, #1
 810b34e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810b352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b35a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810b35e:	663b      	str	r3, [r7, #96]	@ 0x60
 810b360:	2300      	movs	r3, #0
 810b362:	667b      	str	r3, [r7, #100]	@ 0x64
 810b364:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810b368:	460b      	mov	r3, r1
 810b36a:	4313      	orrs	r3, r2
 810b36c:	d038      	beq.n	810b3e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810b36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b376:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b37a:	d018      	beq.n	810b3ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 810b37c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b380:	d811      	bhi.n	810b3a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810b382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b386:	d014      	beq.n	810b3b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810b388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b38c:	d80b      	bhi.n	810b3a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810b38e:	2b00      	cmp	r3, #0
 810b390:	d011      	beq.n	810b3b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810b392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b396:	d106      	bne.n	810b3a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b398:	4bc3      	ldr	r3, [pc, #780]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b39c:	4ac2      	ldr	r2, [pc, #776]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b39e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b3a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810b3a4:	e008      	b.n	810b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b3a6:	2301      	movs	r3, #1
 810b3a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810b3ac:	e004      	b.n	810b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810b3ae:	bf00      	nop
 810b3b0:	e002      	b.n	810b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810b3b2:	bf00      	nop
 810b3b4:	e000      	b.n	810b3b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810b3b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b3b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b3bc:	2b00      	cmp	r3, #0
 810b3be:	d10b      	bne.n	810b3d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810b3c0:	4bb9      	ldr	r3, [pc, #740]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b3c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b3c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810b3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b3d0:	4ab5      	ldr	r2, [pc, #724]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b3d2:	430b      	orrs	r3, r1
 810b3d4:	6553      	str	r3, [r2, #84]	@ 0x54
 810b3d6:	e003      	b.n	810b3e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b3d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b3dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810b3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b3e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810b3ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b3ee:	2300      	movs	r3, #0
 810b3f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810b3f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810b3f6:	460b      	mov	r3, r1
 810b3f8:	4313      	orrs	r3, r2
 810b3fa:	d009      	beq.n	810b410 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810b3fc:	4baa      	ldr	r3, [pc, #680]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b3fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b400:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810b404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810b40a:	4aa7      	ldr	r2, [pc, #668]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b40c:	430b      	orrs	r3, r1
 810b40e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810b410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b418:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810b41c:	653b      	str	r3, [r7, #80]	@ 0x50
 810b41e:	2300      	movs	r3, #0
 810b420:	657b      	str	r3, [r7, #84]	@ 0x54
 810b422:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810b426:	460b      	mov	r3, r1
 810b428:	4313      	orrs	r3, r2
 810b42a:	d00a      	beq.n	810b442 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810b42c:	4b9e      	ldr	r3, [pc, #632]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b42e:	691b      	ldr	r3, [r3, #16]
 810b430:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810b434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b438:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810b43c:	4a9a      	ldr	r2, [pc, #616]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b43e:	430b      	orrs	r3, r1
 810b440:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810b442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b446:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b44a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810b44e:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b450:	2300      	movs	r3, #0
 810b452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b454:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810b458:	460b      	mov	r3, r1
 810b45a:	4313      	orrs	r3, r2
 810b45c:	d009      	beq.n	810b472 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810b45e:	4b92      	ldr	r3, [pc, #584]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b462:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810b466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b46c:	4a8e      	ldr	r2, [pc, #568]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b46e:	430b      	orrs	r3, r1
 810b470:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810b472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b47a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810b47e:	643b      	str	r3, [r7, #64]	@ 0x40
 810b480:	2300      	movs	r3, #0
 810b482:	647b      	str	r3, [r7, #68]	@ 0x44
 810b484:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810b488:	460b      	mov	r3, r1
 810b48a:	4313      	orrs	r3, r2
 810b48c:	d00e      	beq.n	810b4ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810b48e:	4b86      	ldr	r3, [pc, #536]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b490:	691b      	ldr	r3, [r3, #16]
 810b492:	4a85      	ldr	r2, [pc, #532]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b494:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810b498:	6113      	str	r3, [r2, #16]
 810b49a:	4b83      	ldr	r3, [pc, #524]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b49c:	6919      	ldr	r1, [r3, #16]
 810b49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b4a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810b4a6:	4a80      	ldr	r2, [pc, #512]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b4a8:	430b      	orrs	r3, r1
 810b4aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810b4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b4b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810b4b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 810b4ba:	2300      	movs	r3, #0
 810b4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b4be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810b4c2:	460b      	mov	r3, r1
 810b4c4:	4313      	orrs	r3, r2
 810b4c6:	d009      	beq.n	810b4dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810b4c8:	4b77      	ldr	r3, [pc, #476]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b4ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b4cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4d6:	4a74      	ldr	r2, [pc, #464]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b4d8:	430b      	orrs	r3, r1
 810b4da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810b4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b4e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810b4e8:	633b      	str	r3, [r7, #48]	@ 0x30
 810b4ea:	2300      	movs	r3, #0
 810b4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 810b4ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810b4f2:	460b      	mov	r3, r1
 810b4f4:	4313      	orrs	r3, r2
 810b4f6:	d00a      	beq.n	810b50e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810b4f8:	4b6b      	ldr	r3, [pc, #428]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b4fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4fc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810b500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b508:	4a67      	ldr	r2, [pc, #412]	@ (810b6a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810b50a:	430b      	orrs	r3, r1
 810b50c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810b50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b516:	2100      	movs	r1, #0
 810b518:	62b9      	str	r1, [r7, #40]	@ 0x28
 810b51a:	f003 0301 	and.w	r3, r3, #1
 810b51e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810b520:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810b524:	460b      	mov	r3, r1
 810b526:	4313      	orrs	r3, r2
 810b528:	d011      	beq.n	810b54e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b52e:	3308      	adds	r3, #8
 810b530:	2100      	movs	r1, #0
 810b532:	4618      	mov	r0, r3
 810b534:	f001 fa4a 	bl	810c9cc <RCCEx_PLL2_Config>
 810b538:	4603      	mov	r3, r0
 810b53a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b53e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b542:	2b00      	cmp	r3, #0
 810b544:	d003      	beq.n	810b54e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b54a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810b54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b556:	2100      	movs	r1, #0
 810b558:	6239      	str	r1, [r7, #32]
 810b55a:	f003 0302 	and.w	r3, r3, #2
 810b55e:	627b      	str	r3, [r7, #36]	@ 0x24
 810b560:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810b564:	460b      	mov	r3, r1
 810b566:	4313      	orrs	r3, r2
 810b568:	d011      	beq.n	810b58e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810b56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b56e:	3308      	adds	r3, #8
 810b570:	2101      	movs	r1, #1
 810b572:	4618      	mov	r0, r3
 810b574:	f001 fa2a 	bl	810c9cc <RCCEx_PLL2_Config>
 810b578:	4603      	mov	r3, r0
 810b57a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b57e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b582:	2b00      	cmp	r3, #0
 810b584:	d003      	beq.n	810b58e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b58a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810b58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b596:	2100      	movs	r1, #0
 810b598:	61b9      	str	r1, [r7, #24]
 810b59a:	f003 0304 	and.w	r3, r3, #4
 810b59e:	61fb      	str	r3, [r7, #28]
 810b5a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810b5a4:	460b      	mov	r3, r1
 810b5a6:	4313      	orrs	r3, r2
 810b5a8:	d011      	beq.n	810b5ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b5ae:	3308      	adds	r3, #8
 810b5b0:	2102      	movs	r1, #2
 810b5b2:	4618      	mov	r0, r3
 810b5b4:	f001 fa0a 	bl	810c9cc <RCCEx_PLL2_Config>
 810b5b8:	4603      	mov	r3, r0
 810b5ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b5be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b5c2:	2b00      	cmp	r3, #0
 810b5c4:	d003      	beq.n	810b5ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b5ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810b5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b5d6:	2100      	movs	r1, #0
 810b5d8:	6139      	str	r1, [r7, #16]
 810b5da:	f003 0308 	and.w	r3, r3, #8
 810b5de:	617b      	str	r3, [r7, #20]
 810b5e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810b5e4:	460b      	mov	r3, r1
 810b5e6:	4313      	orrs	r3, r2
 810b5e8:	d011      	beq.n	810b60e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b5ee:	3328      	adds	r3, #40	@ 0x28
 810b5f0:	2100      	movs	r1, #0
 810b5f2:	4618      	mov	r0, r3
 810b5f4:	f001 fa9c 	bl	810cb30 <RCCEx_PLL3_Config>
 810b5f8:	4603      	mov	r3, r0
 810b5fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810b5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b602:	2b00      	cmp	r3, #0
 810b604:	d003      	beq.n	810b60e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b60a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810b60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b616:	2100      	movs	r1, #0
 810b618:	60b9      	str	r1, [r7, #8]
 810b61a:	f003 0310 	and.w	r3, r3, #16
 810b61e:	60fb      	str	r3, [r7, #12]
 810b620:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810b624:	460b      	mov	r3, r1
 810b626:	4313      	orrs	r3, r2
 810b628:	d011      	beq.n	810b64e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b62e:	3328      	adds	r3, #40	@ 0x28
 810b630:	2101      	movs	r1, #1
 810b632:	4618      	mov	r0, r3
 810b634:	f001 fa7c 	bl	810cb30 <RCCEx_PLL3_Config>
 810b638:	4603      	mov	r3, r0
 810b63a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b63e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b642:	2b00      	cmp	r3, #0
 810b644:	d003      	beq.n	810b64e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b64a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810b64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b656:	2100      	movs	r1, #0
 810b658:	6039      	str	r1, [r7, #0]
 810b65a:	f003 0320 	and.w	r3, r3, #32
 810b65e:	607b      	str	r3, [r7, #4]
 810b660:	e9d7 1200 	ldrd	r1, r2, [r7]
 810b664:	460b      	mov	r3, r1
 810b666:	4313      	orrs	r3, r2
 810b668:	d011      	beq.n	810b68e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810b66e:	3328      	adds	r3, #40	@ 0x28
 810b670:	2102      	movs	r1, #2
 810b672:	4618      	mov	r0, r3
 810b674:	f001 fa5c 	bl	810cb30 <RCCEx_PLL3_Config>
 810b678:	4603      	mov	r3, r0
 810b67a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810b67e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b682:	2b00      	cmp	r3, #0
 810b684:	d003      	beq.n	810b68e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810b68a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810b68e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810b692:	2b00      	cmp	r3, #0
 810b694:	d101      	bne.n	810b69a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810b696:	2300      	movs	r3, #0
 810b698:	e000      	b.n	810b69c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810b69a:	2301      	movs	r3, #1
}
 810b69c:	4618      	mov	r0, r3
 810b69e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810b6a2:	46bd      	mov	sp, r7
 810b6a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b6a8:	58024400 	.word	0x58024400

0810b6ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 810b6ac:	b580      	push	{r7, lr}
 810b6ae:	b090      	sub	sp, #64	@ 0x40
 810b6b0:	af00      	add	r7, sp, #0
 810b6b2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810b6b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b6ba:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810b6be:	430b      	orrs	r3, r1
 810b6c0:	f040 8094 	bne.w	810b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 810b6c4:	4b9e      	ldr	r3, [pc, #632]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b6c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b6c8:	f003 0307 	and.w	r3, r3, #7
 810b6cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b6d0:	2b04      	cmp	r3, #4
 810b6d2:	f200 8087 	bhi.w	810b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810b6d6:	a201      	add	r2, pc, #4	@ (adr r2, 810b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810b6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b6dc:	0810b6f1 	.word	0x0810b6f1
 810b6e0:	0810b719 	.word	0x0810b719
 810b6e4:	0810b741 	.word	0x0810b741
 810b6e8:	0810b7dd 	.word	0x0810b7dd
 810b6ec:	0810b769 	.word	0x0810b769
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b6f0:	4b93      	ldr	r3, [pc, #588]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b6f2:	681b      	ldr	r3, [r3, #0]
 810b6f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b6f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b6fc:	d108      	bne.n	810b710 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b6fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b702:	4618      	mov	r0, r3
 810b704:	f001 f810 	bl	810c728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b70c:	f000 bd45 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b710:	2300      	movs	r3, #0
 810b712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b714:	f000 bd41 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b718:	4b89      	ldr	r3, [pc, #548]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b71a:	681b      	ldr	r3, [r3, #0]
 810b71c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b724:	d108      	bne.n	810b738 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b726:	f107 0318 	add.w	r3, r7, #24
 810b72a:	4618      	mov	r0, r3
 810b72c:	f000 fd54 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b730:	69bb      	ldr	r3, [r7, #24]
 810b732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b734:	f000 bd31 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b738:	2300      	movs	r3, #0
 810b73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b73c:	f000 bd2d 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b740:	4b7f      	ldr	r3, [pc, #508]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b742:	681b      	ldr	r3, [r3, #0]
 810b744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b74c:	d108      	bne.n	810b760 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b74e:	f107 030c 	add.w	r3, r7, #12
 810b752:	4618      	mov	r0, r3
 810b754:	f000 fe94 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b758:	68fb      	ldr	r3, [r7, #12]
 810b75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b75c:	f000 bd1d 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b760:	2300      	movs	r3, #0
 810b762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b764:	f000 bd19 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b768:	4b75      	ldr	r3, [pc, #468]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b76a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b76c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b770:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b772:	4b73      	ldr	r3, [pc, #460]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b774:	681b      	ldr	r3, [r3, #0]
 810b776:	f003 0304 	and.w	r3, r3, #4
 810b77a:	2b04      	cmp	r3, #4
 810b77c:	d10c      	bne.n	810b798 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810b77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b780:	2b00      	cmp	r3, #0
 810b782:	d109      	bne.n	810b798 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b784:	4b6e      	ldr	r3, [pc, #440]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b786:	681b      	ldr	r3, [r3, #0]
 810b788:	08db      	lsrs	r3, r3, #3
 810b78a:	f003 0303 	and.w	r3, r3, #3
 810b78e:	4a6d      	ldr	r2, [pc, #436]	@ (810b944 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810b790:	fa22 f303 	lsr.w	r3, r2, r3
 810b794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b796:	e01f      	b.n	810b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b798:	4b69      	ldr	r3, [pc, #420]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b79a:	681b      	ldr	r3, [r3, #0]
 810b79c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b7a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b7a4:	d106      	bne.n	810b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810b7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b7a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b7ac:	d102      	bne.n	810b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b7ae:	4b66      	ldr	r3, [pc, #408]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810b7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b7b2:	e011      	b.n	810b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b7b4:	4b62      	ldr	r3, [pc, #392]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b7b6:	681b      	ldr	r3, [r3, #0]
 810b7b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b7bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b7c0:	d106      	bne.n	810b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810b7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b7c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b7c8:	d102      	bne.n	810b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b7ca:	4b60      	ldr	r3, [pc, #384]	@ (810b94c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810b7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b7ce:	e003      	b.n	810b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b7d0:	2300      	movs	r3, #0
 810b7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b7d4:	f000 bce1 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b7d8:	f000 bcdf 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b7dc:	4b5c      	ldr	r3, [pc, #368]	@ (810b950 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810b7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b7e0:	f000 bcdb 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b7e4:	2300      	movs	r3, #0
 810b7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b7e8:	f000 bcd7 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810b7ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b7f0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 810b7f4:	430b      	orrs	r3, r1
 810b7f6:	f040 80ad 	bne.w	810b954 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810b7fa:	4b51      	ldr	r3, [pc, #324]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b7fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b7fe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810b802:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b80a:	d056      	beq.n	810b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b80e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b812:	f200 8090 	bhi.w	810b936 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b818:	2bc0      	cmp	r3, #192	@ 0xc0
 810b81a:	f000 8088 	beq.w	810b92e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810b81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b820:	2bc0      	cmp	r3, #192	@ 0xc0
 810b822:	f200 8088 	bhi.w	810b936 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b828:	2b80      	cmp	r3, #128	@ 0x80
 810b82a:	d032      	beq.n	810b892 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 810b82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b82e:	2b80      	cmp	r3, #128	@ 0x80
 810b830:	f200 8081 	bhi.w	810b936 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b836:	2b00      	cmp	r3, #0
 810b838:	d003      	beq.n	810b842 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810b83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b83c:	2b40      	cmp	r3, #64	@ 0x40
 810b83e:	d014      	beq.n	810b86a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810b840:	e079      	b.n	810b936 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b842:	4b3f      	ldr	r3, [pc, #252]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b844:	681b      	ldr	r3, [r3, #0]
 810b846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b84a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b84e:	d108      	bne.n	810b862 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b854:	4618      	mov	r0, r3
 810b856:	f000 ff67 	bl	810c728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b85e:	f000 bc9c 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b862:	2300      	movs	r3, #0
 810b864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b866:	f000 bc98 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b86a:	4b35      	ldr	r3, [pc, #212]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b86c:	681b      	ldr	r3, [r3, #0]
 810b86e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b876:	d108      	bne.n	810b88a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b878:	f107 0318 	add.w	r3, r7, #24
 810b87c:	4618      	mov	r0, r3
 810b87e:	f000 fcab 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b882:	69bb      	ldr	r3, [r7, #24]
 810b884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b886:	f000 bc88 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b88a:	2300      	movs	r3, #0
 810b88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b88e:	f000 bc84 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b892:	4b2b      	ldr	r3, [pc, #172]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b894:	681b      	ldr	r3, [r3, #0]
 810b896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810b89a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b89e:	d108      	bne.n	810b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b8a0:	f107 030c 	add.w	r3, r7, #12
 810b8a4:	4618      	mov	r0, r3
 810b8a6:	f000 fdeb 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b8aa:	68fb      	ldr	r3, [r7, #12]
 810b8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b8ae:	f000 bc74 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b8b2:	2300      	movs	r3, #0
 810b8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b8b6:	f000 bc70 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b8ba:	4b21      	ldr	r3, [pc, #132]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b8be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810b8c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b8c4:	4b1e      	ldr	r3, [pc, #120]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8c6:	681b      	ldr	r3, [r3, #0]
 810b8c8:	f003 0304 	and.w	r3, r3, #4
 810b8cc:	2b04      	cmp	r3, #4
 810b8ce:	d10c      	bne.n	810b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810b8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b8d2:	2b00      	cmp	r3, #0
 810b8d4:	d109      	bne.n	810b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b8d6:	4b1a      	ldr	r3, [pc, #104]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8d8:	681b      	ldr	r3, [r3, #0]
 810b8da:	08db      	lsrs	r3, r3, #3
 810b8dc:	f003 0303 	and.w	r3, r3, #3
 810b8e0:	4a18      	ldr	r2, [pc, #96]	@ (810b944 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810b8e2:	fa22 f303 	lsr.w	r3, r2, r3
 810b8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b8e8:	e01f      	b.n	810b92a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b8ea:	4b15      	ldr	r3, [pc, #84]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8ec:	681b      	ldr	r3, [r3, #0]
 810b8ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b8f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b8f6:	d106      	bne.n	810b906 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810b8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b8fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b8fe:	d102      	bne.n	810b906 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b900:	4b11      	ldr	r3, [pc, #68]	@ (810b948 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810b902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b904:	e011      	b.n	810b92a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b906:	4b0e      	ldr	r3, [pc, #56]	@ (810b940 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b908:	681b      	ldr	r3, [r3, #0]
 810b90a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b90e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b912:	d106      	bne.n	810b922 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 810b914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b91a:	d102      	bne.n	810b922 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b91c:	4b0b      	ldr	r3, [pc, #44]	@ (810b94c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810b91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b920:	e003      	b.n	810b92a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b922:	2300      	movs	r3, #0
 810b924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810b926:	f000 bc38 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b92a:	f000 bc36 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b92e:	4b08      	ldr	r3, [pc, #32]	@ (810b950 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b932:	f000 bc32 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b936:	2300      	movs	r3, #0
 810b938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b93a:	f000 bc2e 	b.w	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b93e:	bf00      	nop
 810b940:	58024400 	.word	0x58024400
 810b944:	03d09000 	.word	0x03d09000
 810b948:	003d0900 	.word	0x003d0900
 810b94c:	007a1200 	.word	0x007a1200
 810b950:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810b954:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b958:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 810b95c:	430b      	orrs	r3, r1
 810b95e:	f040 809c 	bne.w	810ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810b962:	4b9e      	ldr	r3, [pc, #632]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b966:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 810b96a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810b96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b96e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810b972:	d054      	beq.n	810ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 810b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b976:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810b97a:	f200 808b 	bhi.w	810ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b980:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810b984:	f000 8083 	beq.w	810ba8e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b98a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810b98e:	f200 8081 	bhi.w	810ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b994:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810b998:	d02f      	beq.n	810b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810b99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b99c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810b9a0:	d878      	bhi.n	810ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9a4:	2b00      	cmp	r3, #0
 810b9a6:	d004      	beq.n	810b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b9aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b9ae:	d012      	beq.n	810b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810b9b0:	e070      	b.n	810ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b9b2:	4b8a      	ldr	r3, [pc, #552]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9b4:	681b      	ldr	r3, [r3, #0]
 810b9b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810b9ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b9be:	d107      	bne.n	810b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b9c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b9c4:	4618      	mov	r0, r3
 810b9c6:	f000 feaf 	bl	810c728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9ce:	e3e4      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b9d0:	2300      	movs	r3, #0
 810b9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9d4:	e3e1      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b9d6:	4b81      	ldr	r3, [pc, #516]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9d8:	681b      	ldr	r3, [r3, #0]
 810b9da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b9de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810b9e2:	d107      	bne.n	810b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b9e4:	f107 0318 	add.w	r3, r7, #24
 810b9e8:	4618      	mov	r0, r3
 810b9ea:	f000 fbf5 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b9ee:	69bb      	ldr	r3, [r7, #24]
 810b9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9f2:	e3d2      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b9f4:	2300      	movs	r3, #0
 810b9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9f8:	e3cf      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b9fa:	4b78      	ldr	r3, [pc, #480]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9fc:	681b      	ldr	r3, [r3, #0]
 810b9fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ba02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ba06:	d107      	bne.n	810ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ba08:	f107 030c 	add.w	r3, r7, #12
 810ba0c:	4618      	mov	r0, r3
 810ba0e:	f000 fd37 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810ba12:	68fb      	ldr	r3, [r7, #12]
 810ba14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810ba16:	e3c0      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810ba18:	2300      	movs	r3, #0
 810ba1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba1c:	e3bd      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810ba1e:	4b6f      	ldr	r3, [pc, #444]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ba22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810ba26:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810ba28:	4b6c      	ldr	r3, [pc, #432]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba2a:	681b      	ldr	r3, [r3, #0]
 810ba2c:	f003 0304 	and.w	r3, r3, #4
 810ba30:	2b04      	cmp	r3, #4
 810ba32:	d10c      	bne.n	810ba4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 810ba34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba36:	2b00      	cmp	r3, #0
 810ba38:	d109      	bne.n	810ba4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810ba3a:	4b68      	ldr	r3, [pc, #416]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba3c:	681b      	ldr	r3, [r3, #0]
 810ba3e:	08db      	lsrs	r3, r3, #3
 810ba40:	f003 0303 	and.w	r3, r3, #3
 810ba44:	4a66      	ldr	r2, [pc, #408]	@ (810bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810ba46:	fa22 f303 	lsr.w	r3, r2, r3
 810ba4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ba4c:	e01e      	b.n	810ba8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810ba4e:	4b63      	ldr	r3, [pc, #396]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba50:	681b      	ldr	r3, [r3, #0]
 810ba52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810ba56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ba5a:	d106      	bne.n	810ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810ba5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810ba62:	d102      	bne.n	810ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810ba64:	4b5f      	ldr	r3, [pc, #380]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810ba66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ba68:	e010      	b.n	810ba8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ba6a:	4b5c      	ldr	r3, [pc, #368]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba6c:	681b      	ldr	r3, [r3, #0]
 810ba6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810ba72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810ba76:	d106      	bne.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810ba78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ba7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ba7e:	d102      	bne.n	810ba86 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810ba80:	4b59      	ldr	r3, [pc, #356]	@ (810bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810ba82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ba84:	e002      	b.n	810ba8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810ba86:	2300      	movs	r3, #0
 810ba88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810ba8a:	e386      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810ba8c:	e385      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810ba8e:	4b57      	ldr	r3, [pc, #348]	@ (810bbec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba92:	e382      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810ba94:	2300      	movs	r3, #0
 810ba96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ba98:	e37f      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810ba9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ba9e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810baa2:	430b      	orrs	r3, r1
 810baa4:	f040 80a7 	bne.w	810bbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810baa8:	4b4c      	ldr	r3, [pc, #304]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810baaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810baac:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810bab0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810bab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bab4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810bab8:	d055      	beq.n	810bb66 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810baba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810babc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810bac0:	f200 8096 	bhi.w	810bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810bac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bac6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810baca:	f000 8084 	beq.w	810bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810bace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bad0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810bad4:	f200 808c 	bhi.w	810bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810bad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bade:	d030      	beq.n	810bb42 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810bae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810bae2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bae6:	f200 8083 	bhi.w	810bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810baea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810baec:	2b00      	cmp	r3, #0
 810baee:	d004      	beq.n	810bafa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810baf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810baf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810baf6:	d012      	beq.n	810bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 810baf8:	e07a      	b.n	810bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bafa:	4b38      	ldr	r3, [pc, #224]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bafc:	681b      	ldr	r3, [r3, #0]
 810bafe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810bb02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bb06:	d107      	bne.n	810bb18 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bb08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bb0c:	4618      	mov	r0, r3
 810bb0e:	f000 fe0b 	bl	810c728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb16:	e340      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb18:	2300      	movs	r3, #0
 810bb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb1c:	e33d      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bb1e:	4b2f      	ldr	r3, [pc, #188]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb20:	681b      	ldr	r3, [r3, #0]
 810bb22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bb26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bb2a:	d107      	bne.n	810bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bb2c:	f107 0318 	add.w	r3, r7, #24
 810bb30:	4618      	mov	r0, r3
 810bb32:	f000 fb51 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810bb36:	69bb      	ldr	r3, [r7, #24]
 810bb38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb3a:	e32e      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb3c:	2300      	movs	r3, #0
 810bb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb40:	e32b      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bb42:	4b26      	ldr	r3, [pc, #152]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb44:	681b      	ldr	r3, [r3, #0]
 810bb46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bb4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bb4e:	d107      	bne.n	810bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bb50:	f107 030c 	add.w	r3, r7, #12
 810bb54:	4618      	mov	r0, r3
 810bb56:	f000 fc93 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810bb5a:	68fb      	ldr	r3, [r7, #12]
 810bb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb5e:	e31c      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb60:	2300      	movs	r3, #0
 810bb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb64:	e319      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810bb66:	4b1d      	ldr	r3, [pc, #116]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bb6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810bb6e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810bb70:	4b1a      	ldr	r3, [pc, #104]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb72:	681b      	ldr	r3, [r3, #0]
 810bb74:	f003 0304 	and.w	r3, r3, #4
 810bb78:	2b04      	cmp	r3, #4
 810bb7a:	d10c      	bne.n	810bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810bb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bb7e:	2b00      	cmp	r3, #0
 810bb80:	d109      	bne.n	810bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bb82:	4b16      	ldr	r3, [pc, #88]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb84:	681b      	ldr	r3, [r3, #0]
 810bb86:	08db      	lsrs	r3, r3, #3
 810bb88:	f003 0303 	and.w	r3, r3, #3
 810bb8c:	4a14      	ldr	r2, [pc, #80]	@ (810bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810bb8e:	fa22 f303 	lsr.w	r3, r2, r3
 810bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bb94:	e01e      	b.n	810bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bb96:	4b11      	ldr	r3, [pc, #68]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb98:	681b      	ldr	r3, [r3, #0]
 810bb9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bb9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bba2:	d106      	bne.n	810bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810bba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bba6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bbaa:	d102      	bne.n	810bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bbac:	4b0d      	ldr	r3, [pc, #52]	@ (810bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810bbae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bbb0:	e010      	b.n	810bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810bbb2:	4b0a      	ldr	r3, [pc, #40]	@ (810bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bbb4:	681b      	ldr	r3, [r3, #0]
 810bbb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bbba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bbbe:	d106      	bne.n	810bbce <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810bbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bbc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bbc6:	d102      	bne.n	810bbce <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bbc8:	4b07      	ldr	r3, [pc, #28]	@ (810bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810bbca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bbcc:	e002      	b.n	810bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bbce:	2300      	movs	r3, #0
 810bbd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810bbd2:	e2e2      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bbd4:	e2e1      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810bbd6:	4b05      	ldr	r3, [pc, #20]	@ (810bbec <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810bbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bbda:	e2de      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bbdc:	58024400 	.word	0x58024400
 810bbe0:	03d09000 	.word	0x03d09000
 810bbe4:	003d0900 	.word	0x003d0900
 810bbe8:	007a1200 	.word	0x007a1200
 810bbec:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810bbf0:	2300      	movs	r3, #0
 810bbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bbf4:	e2d1      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810bbf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bbfa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810bbfe:	430b      	orrs	r3, r1
 810bc00:	f040 809c 	bne.w	810bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810bc04:	4b93      	ldr	r3, [pc, #588]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bc08:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810bc0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810bc14:	d054      	beq.n	810bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810bc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810bc1c:	f200 808b 	bhi.w	810bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810bc26:	f000 8083 	beq.w	810bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810bc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810bc30:	f200 8081 	bhi.w	810bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810bc3a:	d02f      	beq.n	810bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810bc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810bc42:	d878      	bhi.n	810bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc46:	2b00      	cmp	r3, #0
 810bc48:	d004      	beq.n	810bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810bc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bc4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810bc50:	d012      	beq.n	810bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810bc52:	e070      	b.n	810bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bc54:	4b7f      	ldr	r3, [pc, #508]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc56:	681b      	ldr	r3, [r3, #0]
 810bc58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810bc5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bc60:	d107      	bne.n	810bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bc62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bc66:	4618      	mov	r0, r3
 810bc68:	f000 fd5e 	bl	810c728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc70:	e293      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc72:	2300      	movs	r3, #0
 810bc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc76:	e290      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bc78:	4b76      	ldr	r3, [pc, #472]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc7a:	681b      	ldr	r3, [r3, #0]
 810bc7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bc80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bc84:	d107      	bne.n	810bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bc86:	f107 0318 	add.w	r3, r7, #24
 810bc8a:	4618      	mov	r0, r3
 810bc8c:	f000 faa4 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810bc90:	69bb      	ldr	r3, [r7, #24]
 810bc92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc94:	e281      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc96:	2300      	movs	r3, #0
 810bc98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bc9a:	e27e      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bc9c:	4b6d      	ldr	r3, [pc, #436]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc9e:	681b      	ldr	r3, [r3, #0]
 810bca0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bca8:	d107      	bne.n	810bcba <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bcaa:	f107 030c 	add.w	r3, r7, #12
 810bcae:	4618      	mov	r0, r3
 810bcb0:	f000 fbe6 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810bcb4:	68fb      	ldr	r3, [r7, #12]
 810bcb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bcb8:	e26f      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bcba:	2300      	movs	r3, #0
 810bcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bcbe:	e26c      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810bcc0:	4b64      	ldr	r3, [pc, #400]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bcc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bcc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810bcc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810bcca:	4b62      	ldr	r3, [pc, #392]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bccc:	681b      	ldr	r3, [r3, #0]
 810bcce:	f003 0304 	and.w	r3, r3, #4
 810bcd2:	2b04      	cmp	r3, #4
 810bcd4:	d10c      	bne.n	810bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810bcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bcd8:	2b00      	cmp	r3, #0
 810bcda:	d109      	bne.n	810bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bcdc:	4b5d      	ldr	r3, [pc, #372]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bcde:	681b      	ldr	r3, [r3, #0]
 810bce0:	08db      	lsrs	r3, r3, #3
 810bce2:	f003 0303 	and.w	r3, r3, #3
 810bce6:	4a5c      	ldr	r2, [pc, #368]	@ (810be58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810bce8:	fa22 f303 	lsr.w	r3, r2, r3
 810bcec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bcee:	e01e      	b.n	810bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bcf0:	4b58      	ldr	r3, [pc, #352]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bcf2:	681b      	ldr	r3, [r3, #0]
 810bcf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bcf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bcfc:	d106      	bne.n	810bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810bcfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bd00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bd04:	d102      	bne.n	810bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bd06:	4b55      	ldr	r3, [pc, #340]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810bd08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bd0a:	e010      	b.n	810bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810bd0c:	4b51      	ldr	r3, [pc, #324]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bd0e:	681b      	ldr	r3, [r3, #0]
 810bd10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bd14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bd18:	d106      	bne.n	810bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810bd1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bd1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bd20:	d102      	bne.n	810bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bd22:	4b4f      	ldr	r3, [pc, #316]	@ (810be60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810bd24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bd26:	e002      	b.n	810bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bd28:	2300      	movs	r3, #0
 810bd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810bd2c:	e235      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bd2e:	e234      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810bd30:	4b4c      	ldr	r3, [pc, #304]	@ (810be64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810bd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd34:	e231      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810bd36:	2300      	movs	r3, #0
 810bd38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd3a:	e22e      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810bd3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bd40:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 810bd44:	430b      	orrs	r3, r1
 810bd46:	f040 808f 	bne.w	810be68 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810bd4a:	4b42      	ldr	r3, [pc, #264]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bd4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bd4e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810bd52:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 810bd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810bd5a:	d06b      	beq.n	810be34 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810bd62:	d874      	bhi.n	810be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810bd6a:	d056      	beq.n	810be1a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810bd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810bd72:	d86c      	bhi.n	810be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810bd7a:	d03b      	beq.n	810bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810bd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810bd82:	d864      	bhi.n	810be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bd8a:	d021      	beq.n	810bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810bd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bd92:	d85c      	bhi.n	810be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd96:	2b00      	cmp	r3, #0
 810bd98:	d004      	beq.n	810bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810bd9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bda0:	d004      	beq.n	810bdac <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810bda2:	e054      	b.n	810be4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810bda4:	f7fe fa4c 	bl	810a240 <HAL_RCC_GetPCLK1Freq>
 810bda8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bdaa:	e1f6      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bdac:	4b29      	ldr	r3, [pc, #164]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdae:	681b      	ldr	r3, [r3, #0]
 810bdb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bdb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bdb8:	d107      	bne.n	810bdca <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bdba:	f107 0318 	add.w	r3, r7, #24
 810bdbe:	4618      	mov	r0, r3
 810bdc0:	f000 fa0a 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810bdc4:	69fb      	ldr	r3, [r7, #28]
 810bdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bdc8:	e1e7      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bdca:	2300      	movs	r3, #0
 810bdcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bdce:	e1e4      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bdd0:	4b20      	ldr	r3, [pc, #128]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdd2:	681b      	ldr	r3, [r3, #0]
 810bdd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bdd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bddc:	d107      	bne.n	810bdee <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bdde:	f107 030c 	add.w	r3, r7, #12
 810bde2:	4618      	mov	r0, r3
 810bde4:	f000 fb4c 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810bde8:	693b      	ldr	r3, [r7, #16]
 810bdea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bdec:	e1d5      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bdee:	2300      	movs	r3, #0
 810bdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bdf2:	e1d2      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810bdf4:	4b17      	ldr	r3, [pc, #92]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdf6:	681b      	ldr	r3, [r3, #0]
 810bdf8:	f003 0304 	and.w	r3, r3, #4
 810bdfc:	2b04      	cmp	r3, #4
 810bdfe:	d109      	bne.n	810be14 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810be00:	4b14      	ldr	r3, [pc, #80]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810be02:	681b      	ldr	r3, [r3, #0]
 810be04:	08db      	lsrs	r3, r3, #3
 810be06:	f003 0303 	and.w	r3, r3, #3
 810be0a:	4a13      	ldr	r2, [pc, #76]	@ (810be58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810be0c:	fa22 f303 	lsr.w	r3, r2, r3
 810be10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810be12:	e1c2      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810be14:	2300      	movs	r3, #0
 810be16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810be18:	e1bf      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810be1a:	4b0e      	ldr	r3, [pc, #56]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810be1c:	681b      	ldr	r3, [r3, #0]
 810be1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810be22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810be26:	d102      	bne.n	810be2e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810be28:	4b0c      	ldr	r3, [pc, #48]	@ (810be5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810be2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810be2c:	e1b5      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810be2e:	2300      	movs	r3, #0
 810be30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810be32:	e1b2      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810be34:	4b07      	ldr	r3, [pc, #28]	@ (810be54 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810be36:	681b      	ldr	r3, [r3, #0]
 810be38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810be3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810be40:	d102      	bne.n	810be48 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810be42:	4b07      	ldr	r3, [pc, #28]	@ (810be60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810be44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810be46:	e1a8      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810be48:	2300      	movs	r3, #0
 810be4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810be4c:	e1a5      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810be4e:	2300      	movs	r3, #0
 810be50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810be52:	e1a2      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810be54:	58024400 	.word	0x58024400
 810be58:	03d09000 	.word	0x03d09000
 810be5c:	003d0900 	.word	0x003d0900
 810be60:	007a1200 	.word	0x007a1200
 810be64:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810be68:	e9d7 2300 	ldrd	r2, r3, [r7]
 810be6c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810be70:	430b      	orrs	r3, r1
 810be72:	d173      	bne.n	810bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 810be74:	4b9c      	ldr	r3, [pc, #624]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810be76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810be78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810be7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810be7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810be84:	d02f      	beq.n	810bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810be86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810be8c:	d863      	bhi.n	810bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810be8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be90:	2b00      	cmp	r3, #0
 810be92:	d004      	beq.n	810be9e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 810be94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810be96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810be9a:	d012      	beq.n	810bec2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810be9c:	e05b      	b.n	810bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810be9e:	4b92      	ldr	r3, [pc, #584]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bea0:	681b      	ldr	r3, [r3, #0]
 810bea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810beaa:	d107      	bne.n	810bebc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810beac:	f107 0318 	add.w	r3, r7, #24
 810beb0:	4618      	mov	r0, r3
 810beb2:	f000 f991 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810beb6:	69bb      	ldr	r3, [r7, #24]
 810beb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810beba:	e16e      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bebc:	2300      	movs	r3, #0
 810bebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bec0:	e16b      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bec2:	4b89      	ldr	r3, [pc, #548]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bec4:	681b      	ldr	r3, [r3, #0]
 810bec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810beca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bece:	d107      	bne.n	810bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bed0:	f107 030c 	add.w	r3, r7, #12
 810bed4:	4618      	mov	r0, r3
 810bed6:	f000 fad3 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810beda:	697b      	ldr	r3, [r7, #20]
 810bedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bede:	e15c      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bee0:	2300      	movs	r3, #0
 810bee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bee4:	e159      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810bee6:	4b80      	ldr	r3, [pc, #512]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810beea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810beee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810bef0:	4b7d      	ldr	r3, [pc, #500]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bef2:	681b      	ldr	r3, [r3, #0]
 810bef4:	f003 0304 	and.w	r3, r3, #4
 810bef8:	2b04      	cmp	r3, #4
 810befa:	d10c      	bne.n	810bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810befc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810befe:	2b00      	cmp	r3, #0
 810bf00:	d109      	bne.n	810bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bf02:	4b79      	ldr	r3, [pc, #484]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf04:	681b      	ldr	r3, [r3, #0]
 810bf06:	08db      	lsrs	r3, r3, #3
 810bf08:	f003 0303 	and.w	r3, r3, #3
 810bf0c:	4a77      	ldr	r2, [pc, #476]	@ (810c0ec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810bf0e:	fa22 f303 	lsr.w	r3, r2, r3
 810bf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bf14:	e01e      	b.n	810bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bf16:	4b74      	ldr	r3, [pc, #464]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf18:	681b      	ldr	r3, [r3, #0]
 810bf1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bf1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bf22:	d106      	bne.n	810bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 810bf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bf26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bf2a:	d102      	bne.n	810bf32 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bf2c:	4b70      	ldr	r3, [pc, #448]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810bf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bf30:	e010      	b.n	810bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810bf32:	4b6d      	ldr	r3, [pc, #436]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf34:	681b      	ldr	r3, [r3, #0]
 810bf36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bf3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bf3e:	d106      	bne.n	810bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810bf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bf42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bf46:	d102      	bne.n	810bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bf48:	4b6a      	ldr	r3, [pc, #424]	@ (810c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810bf4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810bf4c:	e002      	b.n	810bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bf4e:	2300      	movs	r3, #0
 810bf50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810bf52:	e122      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bf54:	e121      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810bf56:	2300      	movs	r3, #0
 810bf58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bf5a:	e11e      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810bf5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bf60:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 810bf64:	430b      	orrs	r3, r1
 810bf66:	d133      	bne.n	810bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810bf68:	4b5f      	ldr	r3, [pc, #380]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bf6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810bf70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bf72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bf74:	2b00      	cmp	r3, #0
 810bf76:	d004      	beq.n	810bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810bf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bf7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bf7e:	d012      	beq.n	810bfa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810bf80:	e023      	b.n	810bfca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bf82:	4b59      	ldr	r3, [pc, #356]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf84:	681b      	ldr	r3, [r3, #0]
 810bf86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810bf8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810bf8e:	d107      	bne.n	810bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bf90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bf94:	4618      	mov	r0, r3
 810bf96:	f000 fbc7 	bl	810c728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bf9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bf9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bf9e:	e0fc      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bfa0:	2300      	movs	r3, #0
 810bfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bfa4:	e0f9      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bfa6:	4b50      	ldr	r3, [pc, #320]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bfa8:	681b      	ldr	r3, [r3, #0]
 810bfaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bfae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810bfb2:	d107      	bne.n	810bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bfb4:	f107 0318 	add.w	r3, r7, #24
 810bfb8:	4618      	mov	r0, r3
 810bfba:	f000 f90d 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810bfbe:	6a3b      	ldr	r3, [r7, #32]
 810bfc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bfc2:	e0ea      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bfc4:	2300      	movs	r3, #0
 810bfc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bfc8:	e0e7      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810bfca:	2300      	movs	r3, #0
 810bfcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bfce:	e0e4      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810bfd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bfd4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 810bfd8:	430b      	orrs	r3, r1
 810bfda:	f040 808d 	bne.w	810c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810bfde:	4b42      	ldr	r3, [pc, #264]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bfe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810bfe2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810bfe6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810bfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bfea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810bfee:	d06b      	beq.n	810c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810bff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810bff6:	d874      	bhi.n	810c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bffe:	d056      	beq.n	810c0ae <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810c000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c006:	d86c      	bhi.n	810c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810c008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c00a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810c00e:	d03b      	beq.n	810c088 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810c010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c012:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810c016:	d864      	bhi.n	810c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c01a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c01e:	d021      	beq.n	810c064 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810c020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c026:	d85c      	bhi.n	810c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810c028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c02a:	2b00      	cmp	r3, #0
 810c02c:	d004      	beq.n	810c038 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810c02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c034:	d004      	beq.n	810c040 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810c036:	e054      	b.n	810c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810c038:	f000 f8b8 	bl	810c1ac <HAL_RCCEx_GetD3PCLK1Freq>
 810c03c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810c03e:	e0ac      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810c040:	4b29      	ldr	r3, [pc, #164]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c042:	681b      	ldr	r3, [r3, #0]
 810c044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810c048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810c04c:	d107      	bne.n	810c05e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c04e:	f107 0318 	add.w	r3, r7, #24
 810c052:	4618      	mov	r0, r3
 810c054:	f000 f8c0 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810c058:	69fb      	ldr	r3, [r7, #28]
 810c05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c05c:	e09d      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c05e:	2300      	movs	r3, #0
 810c060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c062:	e09a      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810c064:	4b20      	ldr	r3, [pc, #128]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c066:	681b      	ldr	r3, [r3, #0]
 810c068:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810c06c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c070:	d107      	bne.n	810c082 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c072:	f107 030c 	add.w	r3, r7, #12
 810c076:	4618      	mov	r0, r3
 810c078:	f000 fa02 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810c07c:	693b      	ldr	r3, [r7, #16]
 810c07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c080:	e08b      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c082:	2300      	movs	r3, #0
 810c084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c086:	e088      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810c088:	4b17      	ldr	r3, [pc, #92]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c08a:	681b      	ldr	r3, [r3, #0]
 810c08c:	f003 0304 	and.w	r3, r3, #4
 810c090:	2b04      	cmp	r3, #4
 810c092:	d109      	bne.n	810c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c094:	4b14      	ldr	r3, [pc, #80]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c096:	681b      	ldr	r3, [r3, #0]
 810c098:	08db      	lsrs	r3, r3, #3
 810c09a:	f003 0303 	and.w	r3, r3, #3
 810c09e:	4a13      	ldr	r2, [pc, #76]	@ (810c0ec <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810c0a0:	fa22 f303 	lsr.w	r3, r2, r3
 810c0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c0a6:	e078      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c0a8:	2300      	movs	r3, #0
 810c0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c0ac:	e075      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810c0ae:	4b0e      	ldr	r3, [pc, #56]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c0b0:	681b      	ldr	r3, [r3, #0]
 810c0b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810c0b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c0ba:	d102      	bne.n	810c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810c0bc:	4b0c      	ldr	r3, [pc, #48]	@ (810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810c0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c0c0:	e06b      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c0c2:	2300      	movs	r3, #0
 810c0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c0c6:	e068      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810c0c8:	4b07      	ldr	r3, [pc, #28]	@ (810c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c0ca:	681b      	ldr	r3, [r3, #0]
 810c0cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810c0d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810c0d4:	d102      	bne.n	810c0dc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810c0d6:	4b07      	ldr	r3, [pc, #28]	@ (810c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810c0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c0da:	e05e      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c0dc:	2300      	movs	r3, #0
 810c0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c0e0:	e05b      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810c0e2:	2300      	movs	r3, #0
 810c0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c0e6:	e058      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810c0e8:	58024400 	.word	0x58024400
 810c0ec:	03d09000 	.word	0x03d09000
 810c0f0:	003d0900 	.word	0x003d0900
 810c0f4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810c0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c0fc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810c100:	430b      	orrs	r3, r1
 810c102:	d148      	bne.n	810c196 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810c104:	4b27      	ldr	r3, [pc, #156]	@ (810c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c108:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810c10c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810c10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c114:	d02a      	beq.n	810c16c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810c116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c11c:	d838      	bhi.n	810c190 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810c11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c120:	2b00      	cmp	r3, #0
 810c122:	d004      	beq.n	810c12e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810c124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c12a:	d00d      	beq.n	810c148 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810c12c:	e030      	b.n	810c190 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810c12e:	4b1d      	ldr	r3, [pc, #116]	@ (810c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c130:	681b      	ldr	r3, [r3, #0]
 810c132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810c136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810c13a:	d102      	bne.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810c13c:	4b1a      	ldr	r3, [pc, #104]	@ (810c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810c13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c140:	e02b      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c142:	2300      	movs	r3, #0
 810c144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c146:	e028      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810c148:	4b16      	ldr	r3, [pc, #88]	@ (810c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c14a:	681b      	ldr	r3, [r3, #0]
 810c14c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810c150:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810c154:	d107      	bne.n	810c166 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810c156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810c15a:	4618      	mov	r0, r3
 810c15c:	f000 fae4 	bl	810c728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810c160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810c162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c164:	e019      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c166:	2300      	movs	r3, #0
 810c168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c16a:	e016      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810c16c:	4b0d      	ldr	r3, [pc, #52]	@ (810c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c16e:	681b      	ldr	r3, [r3, #0]
 810c170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810c174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810c178:	d107      	bne.n	810c18a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c17a:	f107 0318 	add.w	r3, r7, #24
 810c17e:	4618      	mov	r0, r3
 810c180:	f000 f82a 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810c184:	69fb      	ldr	r3, [r7, #28]
 810c186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c188:	e007      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c18a:	2300      	movs	r3, #0
 810c18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c18e:	e004      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810c190:	2300      	movs	r3, #0
 810c192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810c194:	e001      	b.n	810c19a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810c196:	2300      	movs	r3, #0
 810c198:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 810c19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810c19c:	4618      	mov	r0, r3
 810c19e:	3740      	adds	r7, #64	@ 0x40
 810c1a0:	46bd      	mov	sp, r7
 810c1a2:	bd80      	pop	{r7, pc}
 810c1a4:	58024400 	.word	0x58024400
 810c1a8:	007a1200 	.word	0x007a1200

0810c1ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810c1ac:	b580      	push	{r7, lr}
 810c1ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810c1b0:	f7fe f814 	bl	810a1dc <HAL_RCC_GetHCLKFreq>
 810c1b4:	4602      	mov	r2, r0
 810c1b6:	4b06      	ldr	r3, [pc, #24]	@ (810c1d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810c1b8:	6a1b      	ldr	r3, [r3, #32]
 810c1ba:	091b      	lsrs	r3, r3, #4
 810c1bc:	f003 0307 	and.w	r3, r3, #7
 810c1c0:	4904      	ldr	r1, [pc, #16]	@ (810c1d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810c1c2:	5ccb      	ldrb	r3, [r1, r3]
 810c1c4:	f003 031f 	and.w	r3, r3, #31
 810c1c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810c1cc:	4618      	mov	r0, r3
 810c1ce:	bd80      	pop	{r7, pc}
 810c1d0:	58024400 	.word	0x58024400
 810c1d4:	08115c60 	.word	0x08115c60

0810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810c1d8:	b480      	push	{r7}
 810c1da:	b089      	sub	sp, #36	@ 0x24
 810c1dc:	af00      	add	r7, sp, #0
 810c1de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c1e0:	4ba1      	ldr	r3, [pc, #644]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c1e4:	f003 0303 	and.w	r3, r3, #3
 810c1e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810c1ea:	4b9f      	ldr	r3, [pc, #636]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c1ee:	0b1b      	lsrs	r3, r3, #12
 810c1f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c1f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810c1f6:	4b9c      	ldr	r3, [pc, #624]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c1fa:	091b      	lsrs	r3, r3, #4
 810c1fc:	f003 0301 	and.w	r3, r3, #1
 810c200:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810c202:	4b99      	ldr	r3, [pc, #612]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c206:	08db      	lsrs	r3, r3, #3
 810c208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c20c:	693a      	ldr	r2, [r7, #16]
 810c20e:	fb02 f303 	mul.w	r3, r2, r3
 810c212:	ee07 3a90 	vmov	s15, r3
 810c216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c21a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810c21e:	697b      	ldr	r3, [r7, #20]
 810c220:	2b00      	cmp	r3, #0
 810c222:	f000 8111 	beq.w	810c448 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810c226:	69bb      	ldr	r3, [r7, #24]
 810c228:	2b02      	cmp	r3, #2
 810c22a:	f000 8083 	beq.w	810c334 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810c22e:	69bb      	ldr	r3, [r7, #24]
 810c230:	2b02      	cmp	r3, #2
 810c232:	f200 80a1 	bhi.w	810c378 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810c236:	69bb      	ldr	r3, [r7, #24]
 810c238:	2b00      	cmp	r3, #0
 810c23a:	d003      	beq.n	810c244 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810c23c:	69bb      	ldr	r3, [r7, #24]
 810c23e:	2b01      	cmp	r3, #1
 810c240:	d056      	beq.n	810c2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810c242:	e099      	b.n	810c378 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c244:	4b88      	ldr	r3, [pc, #544]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c246:	681b      	ldr	r3, [r3, #0]
 810c248:	f003 0320 	and.w	r3, r3, #32
 810c24c:	2b00      	cmp	r3, #0
 810c24e:	d02d      	beq.n	810c2ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c250:	4b85      	ldr	r3, [pc, #532]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c252:	681b      	ldr	r3, [r3, #0]
 810c254:	08db      	lsrs	r3, r3, #3
 810c256:	f003 0303 	and.w	r3, r3, #3
 810c25a:	4a84      	ldr	r2, [pc, #528]	@ (810c46c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810c25c:	fa22 f303 	lsr.w	r3, r2, r3
 810c260:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c262:	68bb      	ldr	r3, [r7, #8]
 810c264:	ee07 3a90 	vmov	s15, r3
 810c268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c26c:	697b      	ldr	r3, [r7, #20]
 810c26e:	ee07 3a90 	vmov	s15, r3
 810c272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c27a:	4b7b      	ldr	r3, [pc, #492]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c282:	ee07 3a90 	vmov	s15, r3
 810c286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c28a:	ed97 6a03 	vldr	s12, [r7, #12]
 810c28e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c29a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c29e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c2a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c2aa:	e087      	b.n	810c3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c2ac:	697b      	ldr	r3, [r7, #20]
 810c2ae:	ee07 3a90 	vmov	s15, r3
 810c2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c2b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810c474 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810c2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c2be:	4b6a      	ldr	r3, [pc, #424]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c2c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c2c6:	ee07 3a90 	vmov	s15, r3
 810c2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c2ce:	ed97 6a03 	vldr	s12, [r7, #12]
 810c2d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c2de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c2ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c2ee:	e065      	b.n	810c3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c2f0:	697b      	ldr	r3, [r7, #20]
 810c2f2:	ee07 3a90 	vmov	s15, r3
 810c2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c2fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810c478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810c2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c302:	4b59      	ldr	r3, [pc, #356]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c30a:	ee07 3a90 	vmov	s15, r3
 810c30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c312:	ed97 6a03 	vldr	s12, [r7, #12]
 810c316:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c32e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c332:	e043      	b.n	810c3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c334:	697b      	ldr	r3, [r7, #20]
 810c336:	ee07 3a90 	vmov	s15, r3
 810c33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c33e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810c47c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810c342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c346:	4b48      	ldr	r3, [pc, #288]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c34e:	ee07 3a90 	vmov	s15, r3
 810c352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c356:	ed97 6a03 	vldr	s12, [r7, #12]
 810c35a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c376:	e021      	b.n	810c3bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c378:	697b      	ldr	r3, [r7, #20]
 810c37a:	ee07 3a90 	vmov	s15, r3
 810c37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c382:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810c478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810c386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c38a:	4b37      	ldr	r3, [pc, #220]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c392:	ee07 3a90 	vmov	s15, r3
 810c396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c39a:	ed97 6a03 	vldr	s12, [r7, #12]
 810c39e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810c470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c3aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c3b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c3ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810c3bc:	4b2a      	ldr	r3, [pc, #168]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c3c0:	0a5b      	lsrs	r3, r3, #9
 810c3c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c3c6:	ee07 3a90 	vmov	s15, r3
 810c3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c3ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c3d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c3d6:	edd7 6a07 	vldr	s13, [r7, #28]
 810c3da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c3de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c3e2:	ee17 2a90 	vmov	r2, s15
 810c3e6:	687b      	ldr	r3, [r7, #4]
 810c3e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810c3ea:	4b1f      	ldr	r3, [pc, #124]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c3ee:	0c1b      	lsrs	r3, r3, #16
 810c3f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c3f4:	ee07 3a90 	vmov	s15, r3
 810c3f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c3fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c400:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c404:	edd7 6a07 	vldr	s13, [r7, #28]
 810c408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c40c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c410:	ee17 2a90 	vmov	r2, s15
 810c414:	687b      	ldr	r3, [r7, #4]
 810c416:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810c418:	4b13      	ldr	r3, [pc, #76]	@ (810c468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810c41c:	0e1b      	lsrs	r3, r3, #24
 810c41e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c422:	ee07 3a90 	vmov	s15, r3
 810c426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c42a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c42e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c432:	edd7 6a07 	vldr	s13, [r7, #28]
 810c436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c43a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c43e:	ee17 2a90 	vmov	r2, s15
 810c442:	687b      	ldr	r3, [r7, #4]
 810c444:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810c446:	e008      	b.n	810c45a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810c448:	687b      	ldr	r3, [r7, #4]
 810c44a:	2200      	movs	r2, #0
 810c44c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810c44e:	687b      	ldr	r3, [r7, #4]
 810c450:	2200      	movs	r2, #0
 810c452:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810c454:	687b      	ldr	r3, [r7, #4]
 810c456:	2200      	movs	r2, #0
 810c458:	609a      	str	r2, [r3, #8]
}
 810c45a:	bf00      	nop
 810c45c:	3724      	adds	r7, #36	@ 0x24
 810c45e:	46bd      	mov	sp, r7
 810c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c464:	4770      	bx	lr
 810c466:	bf00      	nop
 810c468:	58024400 	.word	0x58024400
 810c46c:	03d09000 	.word	0x03d09000
 810c470:	46000000 	.word	0x46000000
 810c474:	4c742400 	.word	0x4c742400
 810c478:	4a742400 	.word	0x4a742400
 810c47c:	4af42400 	.word	0x4af42400

0810c480 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810c480:	b480      	push	{r7}
 810c482:	b089      	sub	sp, #36	@ 0x24
 810c484:	af00      	add	r7, sp, #0
 810c486:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c488:	4ba1      	ldr	r3, [pc, #644]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c48c:	f003 0303 	and.w	r3, r3, #3
 810c490:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810c492:	4b9f      	ldr	r3, [pc, #636]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c496:	0d1b      	lsrs	r3, r3, #20
 810c498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c49c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810c49e:	4b9c      	ldr	r3, [pc, #624]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c4a2:	0a1b      	lsrs	r3, r3, #8
 810c4a4:	f003 0301 	and.w	r3, r3, #1
 810c4a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810c4aa:	4b99      	ldr	r3, [pc, #612]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810c4ae:	08db      	lsrs	r3, r3, #3
 810c4b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c4b4:	693a      	ldr	r2, [r7, #16]
 810c4b6:	fb02 f303 	mul.w	r3, r2, r3
 810c4ba:	ee07 3a90 	vmov	s15, r3
 810c4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c4c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810c4c6:	697b      	ldr	r3, [r7, #20]
 810c4c8:	2b00      	cmp	r3, #0
 810c4ca:	f000 8111 	beq.w	810c6f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810c4ce:	69bb      	ldr	r3, [r7, #24]
 810c4d0:	2b02      	cmp	r3, #2
 810c4d2:	f000 8083 	beq.w	810c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810c4d6:	69bb      	ldr	r3, [r7, #24]
 810c4d8:	2b02      	cmp	r3, #2
 810c4da:	f200 80a1 	bhi.w	810c620 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810c4de:	69bb      	ldr	r3, [r7, #24]
 810c4e0:	2b00      	cmp	r3, #0
 810c4e2:	d003      	beq.n	810c4ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810c4e4:	69bb      	ldr	r3, [r7, #24]
 810c4e6:	2b01      	cmp	r3, #1
 810c4e8:	d056      	beq.n	810c598 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810c4ea:	e099      	b.n	810c620 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c4ec:	4b88      	ldr	r3, [pc, #544]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4ee:	681b      	ldr	r3, [r3, #0]
 810c4f0:	f003 0320 	and.w	r3, r3, #32
 810c4f4:	2b00      	cmp	r3, #0
 810c4f6:	d02d      	beq.n	810c554 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c4f8:	4b85      	ldr	r3, [pc, #532]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4fa:	681b      	ldr	r3, [r3, #0]
 810c4fc:	08db      	lsrs	r3, r3, #3
 810c4fe:	f003 0303 	and.w	r3, r3, #3
 810c502:	4a84      	ldr	r2, [pc, #528]	@ (810c714 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810c504:	fa22 f303 	lsr.w	r3, r2, r3
 810c508:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c50a:	68bb      	ldr	r3, [r7, #8]
 810c50c:	ee07 3a90 	vmov	s15, r3
 810c510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c514:	697b      	ldr	r3, [r7, #20]
 810c516:	ee07 3a90 	vmov	s15, r3
 810c51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c522:	4b7b      	ldr	r3, [pc, #492]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c52a:	ee07 3a90 	vmov	s15, r3
 810c52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c532:	ed97 6a03 	vldr	s12, [r7, #12]
 810c536:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c54e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c552:	e087      	b.n	810c664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c554:	697b      	ldr	r3, [r7, #20]
 810c556:	ee07 3a90 	vmov	s15, r3
 810c55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c55e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810c71c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810c562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c566:	4b6a      	ldr	r3, [pc, #424]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c56e:	ee07 3a90 	vmov	s15, r3
 810c572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c576:	ed97 6a03 	vldr	s12, [r7, #12]
 810c57a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c596:	e065      	b.n	810c664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c598:	697b      	ldr	r3, [r7, #20]
 810c59a:	ee07 3a90 	vmov	s15, r3
 810c59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c5a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810c720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810c5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c5aa:	4b59      	ldr	r3, [pc, #356]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c5b2:	ee07 3a90 	vmov	s15, r3
 810c5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 810c5be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c5ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c5da:	e043      	b.n	810c664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c5dc:	697b      	ldr	r3, [r7, #20]
 810c5de:	ee07 3a90 	vmov	s15, r3
 810c5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c5e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810c724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810c5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c5ee:	4b48      	ldr	r3, [pc, #288]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c5f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c5f6:	ee07 3a90 	vmov	s15, r3
 810c5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 810c602:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c60e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c616:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c61e:	e021      	b.n	810c664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c620:	697b      	ldr	r3, [r7, #20]
 810c622:	ee07 3a90 	vmov	s15, r3
 810c626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c62a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810c720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810c62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c632:	4b37      	ldr	r3, [pc, #220]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c63a:	ee07 3a90 	vmov	s15, r3
 810c63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c642:	ed97 6a03 	vldr	s12, [r7, #12]
 810c646:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810c718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c65e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c662:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810c664:	4b2a      	ldr	r3, [pc, #168]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c668:	0a5b      	lsrs	r3, r3, #9
 810c66a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c66e:	ee07 3a90 	vmov	s15, r3
 810c672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c67a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c67e:	edd7 6a07 	vldr	s13, [r7, #28]
 810c682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c68a:	ee17 2a90 	vmov	r2, s15
 810c68e:	687b      	ldr	r3, [r7, #4]
 810c690:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810c692:	4b1f      	ldr	r3, [pc, #124]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c696:	0c1b      	lsrs	r3, r3, #16
 810c698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c69c:	ee07 3a90 	vmov	s15, r3
 810c6a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c6a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c6a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c6ac:	edd7 6a07 	vldr	s13, [r7, #28]
 810c6b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c6b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c6b8:	ee17 2a90 	vmov	r2, s15
 810c6bc:	687b      	ldr	r3, [r7, #4]
 810c6be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810c6c0:	4b13      	ldr	r3, [pc, #76]	@ (810c710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c6c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c6c4:	0e1b      	lsrs	r3, r3, #24
 810c6c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c6ca:	ee07 3a90 	vmov	s15, r3
 810c6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c6d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c6d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c6da:	edd7 6a07 	vldr	s13, [r7, #28]
 810c6de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c6e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c6e6:	ee17 2a90 	vmov	r2, s15
 810c6ea:	687b      	ldr	r3, [r7, #4]
 810c6ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810c6ee:	e008      	b.n	810c702 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810c6f0:	687b      	ldr	r3, [r7, #4]
 810c6f2:	2200      	movs	r2, #0
 810c6f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810c6f6:	687b      	ldr	r3, [r7, #4]
 810c6f8:	2200      	movs	r2, #0
 810c6fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810c6fc:	687b      	ldr	r3, [r7, #4]
 810c6fe:	2200      	movs	r2, #0
 810c700:	609a      	str	r2, [r3, #8]
}
 810c702:	bf00      	nop
 810c704:	3724      	adds	r7, #36	@ 0x24
 810c706:	46bd      	mov	sp, r7
 810c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c70c:	4770      	bx	lr
 810c70e:	bf00      	nop
 810c710:	58024400 	.word	0x58024400
 810c714:	03d09000 	.word	0x03d09000
 810c718:	46000000 	.word	0x46000000
 810c71c:	4c742400 	.word	0x4c742400
 810c720:	4a742400 	.word	0x4a742400
 810c724:	4af42400 	.word	0x4af42400

0810c728 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810c728:	b480      	push	{r7}
 810c72a:	b089      	sub	sp, #36	@ 0x24
 810c72c:	af00      	add	r7, sp, #0
 810c72e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c730:	4ba0      	ldr	r3, [pc, #640]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c734:	f003 0303 	and.w	r3, r3, #3
 810c738:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810c73a:	4b9e      	ldr	r3, [pc, #632]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c73e:	091b      	lsrs	r3, r3, #4
 810c740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c744:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810c746:	4b9b      	ldr	r3, [pc, #620]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c74a:	f003 0301 	and.w	r3, r3, #1
 810c74e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810c750:	4b98      	ldr	r3, [pc, #608]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c754:	08db      	lsrs	r3, r3, #3
 810c756:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c75a:	693a      	ldr	r2, [r7, #16]
 810c75c:	fb02 f303 	mul.w	r3, r2, r3
 810c760:	ee07 3a90 	vmov	s15, r3
 810c764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c768:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810c76c:	697b      	ldr	r3, [r7, #20]
 810c76e:	2b00      	cmp	r3, #0
 810c770:	f000 8111 	beq.w	810c996 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810c774:	69bb      	ldr	r3, [r7, #24]
 810c776:	2b02      	cmp	r3, #2
 810c778:	f000 8083 	beq.w	810c882 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810c77c:	69bb      	ldr	r3, [r7, #24]
 810c77e:	2b02      	cmp	r3, #2
 810c780:	f200 80a1 	bhi.w	810c8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810c784:	69bb      	ldr	r3, [r7, #24]
 810c786:	2b00      	cmp	r3, #0
 810c788:	d003      	beq.n	810c792 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810c78a:	69bb      	ldr	r3, [r7, #24]
 810c78c:	2b01      	cmp	r3, #1
 810c78e:	d056      	beq.n	810c83e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810c790:	e099      	b.n	810c8c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c792:	4b88      	ldr	r3, [pc, #544]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c794:	681b      	ldr	r3, [r3, #0]
 810c796:	f003 0320 	and.w	r3, r3, #32
 810c79a:	2b00      	cmp	r3, #0
 810c79c:	d02d      	beq.n	810c7fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c79e:	4b85      	ldr	r3, [pc, #532]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c7a0:	681b      	ldr	r3, [r3, #0]
 810c7a2:	08db      	lsrs	r3, r3, #3
 810c7a4:	f003 0303 	and.w	r3, r3, #3
 810c7a8:	4a83      	ldr	r2, [pc, #524]	@ (810c9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810c7aa:	fa22 f303 	lsr.w	r3, r2, r3
 810c7ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c7b0:	68bb      	ldr	r3, [r7, #8]
 810c7b2:	ee07 3a90 	vmov	s15, r3
 810c7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c7ba:	697b      	ldr	r3, [r7, #20]
 810c7bc:	ee07 3a90 	vmov	s15, r3
 810c7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c7c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c7c8:	4b7a      	ldr	r3, [pc, #488]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c7ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c7d0:	ee07 3a90 	vmov	s15, r3
 810c7d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c7d8:	ed97 6a03 	vldr	s12, [r7, #12]
 810c7dc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c7e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c7e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c7e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c7ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c7f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c7f8:	e087      	b.n	810c90a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c7fa:	697b      	ldr	r3, [r7, #20]
 810c7fc:	ee07 3a90 	vmov	s15, r3
 810c800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c804:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810c9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c80c:	4b69      	ldr	r3, [pc, #420]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c80e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c814:	ee07 3a90 	vmov	s15, r3
 810c818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c81c:	ed97 6a03 	vldr	s12, [r7, #12]
 810c820:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c82c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c834:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c838:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c83c:	e065      	b.n	810c90a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c83e:	697b      	ldr	r3, [r7, #20]
 810c840:	ee07 3a90 	vmov	s15, r3
 810c844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c848:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810c9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810c84c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c850:	4b58      	ldr	r3, [pc, #352]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c858:	ee07 3a90 	vmov	s15, r3
 810c85c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c860:	ed97 6a03 	vldr	s12, [r7, #12]
 810c864:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c86c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c870:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c878:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c87c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c880:	e043      	b.n	810c90a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c882:	697b      	ldr	r3, [r7, #20]
 810c884:	ee07 3a90 	vmov	s15, r3
 810c888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c88c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810c9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810c890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c894:	4b47      	ldr	r3, [pc, #284]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c89c:	ee07 3a90 	vmov	s15, r3
 810c8a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c8a4:	ed97 6a03 	vldr	s12, [r7, #12]
 810c8a8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c8ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c8b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c8b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c8bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c8c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c8c4:	e021      	b.n	810c90a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c8c6:	697b      	ldr	r3, [r7, #20]
 810c8c8:	ee07 3a90 	vmov	s15, r3
 810c8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c8d0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810c9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c8d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c8d8:	4b36      	ldr	r3, [pc, #216]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c8e0:	ee07 3a90 	vmov	s15, r3
 810c8e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c8e8:	ed97 6a03 	vldr	s12, [r7, #12]
 810c8ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c8f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c8f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c8f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c8fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c900:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c904:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c908:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810c90a:	4b2a      	ldr	r3, [pc, #168]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c90e:	0a5b      	lsrs	r3, r3, #9
 810c910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c914:	ee07 3a90 	vmov	s15, r3
 810c918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c91c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c920:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c924:	edd7 6a07 	vldr	s13, [r7, #28]
 810c928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c92c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c930:	ee17 2a90 	vmov	r2, s15
 810c934:	687b      	ldr	r3, [r7, #4]
 810c936:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810c938:	4b1e      	ldr	r3, [pc, #120]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c93c:	0c1b      	lsrs	r3, r3, #16
 810c93e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c942:	ee07 3a90 	vmov	s15, r3
 810c946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c94a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c94e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c952:	edd7 6a07 	vldr	s13, [r7, #28]
 810c956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c95a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c95e:	ee17 2a90 	vmov	r2, s15
 810c962:	687b      	ldr	r3, [r7, #4]
 810c964:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810c966:	4b13      	ldr	r3, [pc, #76]	@ (810c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c96a:	0e1b      	lsrs	r3, r3, #24
 810c96c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c970:	ee07 3a90 	vmov	s15, r3
 810c974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c978:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810c97c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c980:	edd7 6a07 	vldr	s13, [r7, #28]
 810c984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c98c:	ee17 2a90 	vmov	r2, s15
 810c990:	687b      	ldr	r3, [r7, #4]
 810c992:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810c994:	e008      	b.n	810c9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810c996:	687b      	ldr	r3, [r7, #4]
 810c998:	2200      	movs	r2, #0
 810c99a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810c99c:	687b      	ldr	r3, [r7, #4]
 810c99e:	2200      	movs	r2, #0
 810c9a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810c9a2:	687b      	ldr	r3, [r7, #4]
 810c9a4:	2200      	movs	r2, #0
 810c9a6:	609a      	str	r2, [r3, #8]
}
 810c9a8:	bf00      	nop
 810c9aa:	3724      	adds	r7, #36	@ 0x24
 810c9ac:	46bd      	mov	sp, r7
 810c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9b2:	4770      	bx	lr
 810c9b4:	58024400 	.word	0x58024400
 810c9b8:	03d09000 	.word	0x03d09000
 810c9bc:	46000000 	.word	0x46000000
 810c9c0:	4c742400 	.word	0x4c742400
 810c9c4:	4a742400 	.word	0x4a742400
 810c9c8:	4af42400 	.word	0x4af42400

0810c9cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810c9cc:	b580      	push	{r7, lr}
 810c9ce:	b084      	sub	sp, #16
 810c9d0:	af00      	add	r7, sp, #0
 810c9d2:	6078      	str	r0, [r7, #4]
 810c9d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810c9d6:	2300      	movs	r3, #0
 810c9d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810c9da:	4b54      	ldr	r3, [pc, #336]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810c9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c9de:	f003 0303 	and.w	r3, r3, #3
 810c9e2:	2b03      	cmp	r3, #3
 810c9e4:	d101      	bne.n	810c9ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810c9e6:	2301      	movs	r3, #1
 810c9e8:	e09b      	b.n	810cb22 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810c9ea:	4b50      	ldr	r3, [pc, #320]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810c9ec:	681b      	ldr	r3, [r3, #0]
 810c9ee:	4a4f      	ldr	r2, [pc, #316]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810c9f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810c9f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c9f6:	f7f8 f98b 	bl	8104d10 <HAL_GetTick>
 810c9fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810c9fc:	e008      	b.n	810ca10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810c9fe:	f7f8 f987 	bl	8104d10 <HAL_GetTick>
 810ca02:	4602      	mov	r2, r0
 810ca04:	68bb      	ldr	r3, [r7, #8]
 810ca06:	1ad3      	subs	r3, r2, r3
 810ca08:	2b02      	cmp	r3, #2
 810ca0a:	d901      	bls.n	810ca10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810ca0c:	2303      	movs	r3, #3
 810ca0e:	e088      	b.n	810cb22 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810ca10:	4b46      	ldr	r3, [pc, #280]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca12:	681b      	ldr	r3, [r3, #0]
 810ca14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810ca18:	2b00      	cmp	r3, #0
 810ca1a:	d1f0      	bne.n	810c9fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810ca1c:	4b43      	ldr	r3, [pc, #268]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ca20:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810ca24:	687b      	ldr	r3, [r7, #4]
 810ca26:	681b      	ldr	r3, [r3, #0]
 810ca28:	031b      	lsls	r3, r3, #12
 810ca2a:	4940      	ldr	r1, [pc, #256]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca2c:	4313      	orrs	r3, r2
 810ca2e:	628b      	str	r3, [r1, #40]	@ 0x28
 810ca30:	687b      	ldr	r3, [r7, #4]
 810ca32:	685b      	ldr	r3, [r3, #4]
 810ca34:	3b01      	subs	r3, #1
 810ca36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810ca3a:	687b      	ldr	r3, [r7, #4]
 810ca3c:	689b      	ldr	r3, [r3, #8]
 810ca3e:	3b01      	subs	r3, #1
 810ca40:	025b      	lsls	r3, r3, #9
 810ca42:	b29b      	uxth	r3, r3
 810ca44:	431a      	orrs	r2, r3
 810ca46:	687b      	ldr	r3, [r7, #4]
 810ca48:	68db      	ldr	r3, [r3, #12]
 810ca4a:	3b01      	subs	r3, #1
 810ca4c:	041b      	lsls	r3, r3, #16
 810ca4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810ca52:	431a      	orrs	r2, r3
 810ca54:	687b      	ldr	r3, [r7, #4]
 810ca56:	691b      	ldr	r3, [r3, #16]
 810ca58:	3b01      	subs	r3, #1
 810ca5a:	061b      	lsls	r3, r3, #24
 810ca5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810ca60:	4932      	ldr	r1, [pc, #200]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca62:	4313      	orrs	r3, r2
 810ca64:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810ca66:	4b31      	ldr	r3, [pc, #196]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810ca6e:	687b      	ldr	r3, [r7, #4]
 810ca70:	695b      	ldr	r3, [r3, #20]
 810ca72:	492e      	ldr	r1, [pc, #184]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca74:	4313      	orrs	r3, r2
 810ca76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810ca78:	4b2c      	ldr	r3, [pc, #176]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca7c:	f023 0220 	bic.w	r2, r3, #32
 810ca80:	687b      	ldr	r3, [r7, #4]
 810ca82:	699b      	ldr	r3, [r3, #24]
 810ca84:	4929      	ldr	r1, [pc, #164]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca86:	4313      	orrs	r3, r2
 810ca88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810ca8a:	4b28      	ldr	r3, [pc, #160]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca8e:	4a27      	ldr	r2, [pc, #156]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca90:	f023 0310 	bic.w	r3, r3, #16
 810ca94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810ca96:	4b25      	ldr	r3, [pc, #148]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810ca98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ca9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810ca9e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810caa2:	687a      	ldr	r2, [r7, #4]
 810caa4:	69d2      	ldr	r2, [r2, #28]
 810caa6:	00d2      	lsls	r2, r2, #3
 810caa8:	4920      	ldr	r1, [pc, #128]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810caaa:	4313      	orrs	r3, r2
 810caac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810caae:	4b1f      	ldr	r3, [pc, #124]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cab2:	4a1e      	ldr	r2, [pc, #120]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cab4:	f043 0310 	orr.w	r3, r3, #16
 810cab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810caba:	683b      	ldr	r3, [r7, #0]
 810cabc:	2b00      	cmp	r3, #0
 810cabe:	d106      	bne.n	810cace <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810cac0:	4b1a      	ldr	r3, [pc, #104]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cac4:	4a19      	ldr	r2, [pc, #100]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cac6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810caca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cacc:	e00f      	b.n	810caee <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810cace:	683b      	ldr	r3, [r7, #0]
 810cad0:	2b01      	cmp	r3, #1
 810cad2:	d106      	bne.n	810cae2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810cad4:	4b15      	ldr	r3, [pc, #84]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cad8:	4a14      	ldr	r2, [pc, #80]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810cade:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cae0:	e005      	b.n	810caee <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810cae2:	4b12      	ldr	r3, [pc, #72]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cae6:	4a11      	ldr	r2, [pc, #68]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810caec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810caee:	4b0f      	ldr	r3, [pc, #60]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810caf0:	681b      	ldr	r3, [r3, #0]
 810caf2:	4a0e      	ldr	r2, [pc, #56]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810caf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810caf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cafa:	f7f8 f909 	bl	8104d10 <HAL_GetTick>
 810cafe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810cb00:	e008      	b.n	810cb14 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810cb02:	f7f8 f905 	bl	8104d10 <HAL_GetTick>
 810cb06:	4602      	mov	r2, r0
 810cb08:	68bb      	ldr	r3, [r7, #8]
 810cb0a:	1ad3      	subs	r3, r2, r3
 810cb0c:	2b02      	cmp	r3, #2
 810cb0e:	d901      	bls.n	810cb14 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810cb10:	2303      	movs	r3, #3
 810cb12:	e006      	b.n	810cb22 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810cb14:	4b05      	ldr	r3, [pc, #20]	@ (810cb2c <RCCEx_PLL2_Config+0x160>)
 810cb16:	681b      	ldr	r3, [r3, #0]
 810cb18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810cb1c:	2b00      	cmp	r3, #0
 810cb1e:	d0f0      	beq.n	810cb02 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810cb20:	7bfb      	ldrb	r3, [r7, #15]
}
 810cb22:	4618      	mov	r0, r3
 810cb24:	3710      	adds	r7, #16
 810cb26:	46bd      	mov	sp, r7
 810cb28:	bd80      	pop	{r7, pc}
 810cb2a:	bf00      	nop
 810cb2c:	58024400 	.word	0x58024400

0810cb30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810cb30:	b580      	push	{r7, lr}
 810cb32:	b084      	sub	sp, #16
 810cb34:	af00      	add	r7, sp, #0
 810cb36:	6078      	str	r0, [r7, #4]
 810cb38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810cb3a:	2300      	movs	r3, #0
 810cb3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810cb3e:	4b54      	ldr	r3, [pc, #336]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cb40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810cb42:	f003 0303 	and.w	r3, r3, #3
 810cb46:	2b03      	cmp	r3, #3
 810cb48:	d101      	bne.n	810cb4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810cb4a:	2301      	movs	r3, #1
 810cb4c:	e09b      	b.n	810cc86 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810cb4e:	4b50      	ldr	r3, [pc, #320]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cb50:	681b      	ldr	r3, [r3, #0]
 810cb52:	4a4f      	ldr	r2, [pc, #316]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cb54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810cb58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cb5a:	f7f8 f8d9 	bl	8104d10 <HAL_GetTick>
 810cb5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810cb60:	e008      	b.n	810cb74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810cb62:	f7f8 f8d5 	bl	8104d10 <HAL_GetTick>
 810cb66:	4602      	mov	r2, r0
 810cb68:	68bb      	ldr	r3, [r7, #8]
 810cb6a:	1ad3      	subs	r3, r2, r3
 810cb6c:	2b02      	cmp	r3, #2
 810cb6e:	d901      	bls.n	810cb74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810cb70:	2303      	movs	r3, #3
 810cb72:	e088      	b.n	810cc86 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810cb74:	4b46      	ldr	r3, [pc, #280]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cb76:	681b      	ldr	r3, [r3, #0]
 810cb78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810cb7c:	2b00      	cmp	r3, #0
 810cb7e:	d1f0      	bne.n	810cb62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810cb80:	4b43      	ldr	r3, [pc, #268]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810cb84:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810cb88:	687b      	ldr	r3, [r7, #4]
 810cb8a:	681b      	ldr	r3, [r3, #0]
 810cb8c:	051b      	lsls	r3, r3, #20
 810cb8e:	4940      	ldr	r1, [pc, #256]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cb90:	4313      	orrs	r3, r2
 810cb92:	628b      	str	r3, [r1, #40]	@ 0x28
 810cb94:	687b      	ldr	r3, [r7, #4]
 810cb96:	685b      	ldr	r3, [r3, #4]
 810cb98:	3b01      	subs	r3, #1
 810cb9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810cb9e:	687b      	ldr	r3, [r7, #4]
 810cba0:	689b      	ldr	r3, [r3, #8]
 810cba2:	3b01      	subs	r3, #1
 810cba4:	025b      	lsls	r3, r3, #9
 810cba6:	b29b      	uxth	r3, r3
 810cba8:	431a      	orrs	r2, r3
 810cbaa:	687b      	ldr	r3, [r7, #4]
 810cbac:	68db      	ldr	r3, [r3, #12]
 810cbae:	3b01      	subs	r3, #1
 810cbb0:	041b      	lsls	r3, r3, #16
 810cbb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810cbb6:	431a      	orrs	r2, r3
 810cbb8:	687b      	ldr	r3, [r7, #4]
 810cbba:	691b      	ldr	r3, [r3, #16]
 810cbbc:	3b01      	subs	r3, #1
 810cbbe:	061b      	lsls	r3, r3, #24
 810cbc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810cbc4:	4932      	ldr	r1, [pc, #200]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cbc6:	4313      	orrs	r3, r2
 810cbc8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810cbca:	4b31      	ldr	r3, [pc, #196]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810cbd2:	687b      	ldr	r3, [r7, #4]
 810cbd4:	695b      	ldr	r3, [r3, #20]
 810cbd6:	492e      	ldr	r1, [pc, #184]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cbd8:	4313      	orrs	r3, r2
 810cbda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810cbdc:	4b2c      	ldr	r3, [pc, #176]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cbde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbe0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810cbe4:	687b      	ldr	r3, [r7, #4]
 810cbe6:	699b      	ldr	r3, [r3, #24]
 810cbe8:	4929      	ldr	r1, [pc, #164]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cbea:	4313      	orrs	r3, r2
 810cbec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810cbee:	4b28      	ldr	r3, [pc, #160]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cbf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbf2:	4a27      	ldr	r2, [pc, #156]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cbf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810cbf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810cbfa:	4b25      	ldr	r3, [pc, #148]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cbfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810cbfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810cc02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810cc06:	687a      	ldr	r2, [r7, #4]
 810cc08:	69d2      	ldr	r2, [r2, #28]
 810cc0a:	00d2      	lsls	r2, r2, #3
 810cc0c:	4920      	ldr	r1, [pc, #128]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc0e:	4313      	orrs	r3, r2
 810cc10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810cc12:	4b1f      	ldr	r3, [pc, #124]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc16:	4a1e      	ldr	r2, [pc, #120]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810cc1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810cc1e:	683b      	ldr	r3, [r7, #0]
 810cc20:	2b00      	cmp	r3, #0
 810cc22:	d106      	bne.n	810cc32 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810cc24:	4b1a      	ldr	r3, [pc, #104]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc28:	4a19      	ldr	r2, [pc, #100]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810cc2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cc30:	e00f      	b.n	810cc52 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810cc32:	683b      	ldr	r3, [r7, #0]
 810cc34:	2b01      	cmp	r3, #1
 810cc36:	d106      	bne.n	810cc46 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810cc38:	4b15      	ldr	r3, [pc, #84]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc3c:	4a14      	ldr	r2, [pc, #80]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810cc42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cc44:	e005      	b.n	810cc52 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810cc46:	4b12      	ldr	r3, [pc, #72]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc4a:	4a11      	ldr	r2, [pc, #68]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810cc50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810cc52:	4b0f      	ldr	r3, [pc, #60]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc54:	681b      	ldr	r3, [r3, #0]
 810cc56:	4a0e      	ldr	r2, [pc, #56]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810cc5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cc5e:	f7f8 f857 	bl	8104d10 <HAL_GetTick>
 810cc62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810cc64:	e008      	b.n	810cc78 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810cc66:	f7f8 f853 	bl	8104d10 <HAL_GetTick>
 810cc6a:	4602      	mov	r2, r0
 810cc6c:	68bb      	ldr	r3, [r7, #8]
 810cc6e:	1ad3      	subs	r3, r2, r3
 810cc70:	2b02      	cmp	r3, #2
 810cc72:	d901      	bls.n	810cc78 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810cc74:	2303      	movs	r3, #3
 810cc76:	e006      	b.n	810cc86 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810cc78:	4b05      	ldr	r3, [pc, #20]	@ (810cc90 <RCCEx_PLL3_Config+0x160>)
 810cc7a:	681b      	ldr	r3, [r3, #0]
 810cc7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810cc80:	2b00      	cmp	r3, #0
 810cc82:	d0f0      	beq.n	810cc66 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810cc84:	7bfb      	ldrb	r3, [r7, #15]
}
 810cc86:	4618      	mov	r0, r3
 810cc88:	3710      	adds	r7, #16
 810cc8a:	46bd      	mov	sp, r7
 810cc8c:	bd80      	pop	{r7, pc}
 810cc8e:	bf00      	nop
 810cc90:	58024400 	.word	0x58024400

0810cc94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810cc94:	b580      	push	{r7, lr}
 810cc96:	b082      	sub	sp, #8
 810cc98:	af00      	add	r7, sp, #0
 810cc9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810cc9c:	687b      	ldr	r3, [r7, #4]
 810cc9e:	2b00      	cmp	r3, #0
 810cca0:	d101      	bne.n	810cca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810cca2:	2301      	movs	r3, #1
 810cca4:	e049      	b.n	810cd3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810cca6:	687b      	ldr	r3, [r7, #4]
 810cca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ccac:	b2db      	uxtb	r3, r3
 810ccae:	2b00      	cmp	r3, #0
 810ccb0:	d106      	bne.n	810ccc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ccb2:	687b      	ldr	r3, [r7, #4]
 810ccb4:	2200      	movs	r2, #0
 810ccb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810ccba:	6878      	ldr	r0, [r7, #4]
 810ccbc:	f7f7 fb16 	bl	81042ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ccc0:	687b      	ldr	r3, [r7, #4]
 810ccc2:	2202      	movs	r2, #2
 810ccc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ccc8:	687b      	ldr	r3, [r7, #4]
 810ccca:	681a      	ldr	r2, [r3, #0]
 810cccc:	687b      	ldr	r3, [r7, #4]
 810ccce:	3304      	adds	r3, #4
 810ccd0:	4619      	mov	r1, r3
 810ccd2:	4610      	mov	r0, r2
 810ccd4:	f000 fe70 	bl	810d9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ccd8:	687b      	ldr	r3, [r7, #4]
 810ccda:	2201      	movs	r2, #1
 810ccdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810cce0:	687b      	ldr	r3, [r7, #4]
 810cce2:	2201      	movs	r2, #1
 810cce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810cce8:	687b      	ldr	r3, [r7, #4]
 810ccea:	2201      	movs	r2, #1
 810ccec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ccf0:	687b      	ldr	r3, [r7, #4]
 810ccf2:	2201      	movs	r2, #1
 810ccf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ccf8:	687b      	ldr	r3, [r7, #4]
 810ccfa:	2201      	movs	r2, #1
 810ccfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810cd00:	687b      	ldr	r3, [r7, #4]
 810cd02:	2201      	movs	r2, #1
 810cd04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810cd08:	687b      	ldr	r3, [r7, #4]
 810cd0a:	2201      	movs	r2, #1
 810cd0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810cd10:	687b      	ldr	r3, [r7, #4]
 810cd12:	2201      	movs	r2, #1
 810cd14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cd18:	687b      	ldr	r3, [r7, #4]
 810cd1a:	2201      	movs	r2, #1
 810cd1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cd20:	687b      	ldr	r3, [r7, #4]
 810cd22:	2201      	movs	r2, #1
 810cd24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810cd28:	687b      	ldr	r3, [r7, #4]
 810cd2a:	2201      	movs	r2, #1
 810cd2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810cd30:	687b      	ldr	r3, [r7, #4]
 810cd32:	2201      	movs	r2, #1
 810cd34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810cd38:	2300      	movs	r3, #0
}
 810cd3a:	4618      	mov	r0, r3
 810cd3c:	3708      	adds	r7, #8
 810cd3e:	46bd      	mov	sp, r7
 810cd40:	bd80      	pop	{r7, pc}
	...

0810cd44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 810cd44:	b480      	push	{r7}
 810cd46:	b085      	sub	sp, #20
 810cd48:	af00      	add	r7, sp, #0
 810cd4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810cd4c:	687b      	ldr	r3, [r7, #4]
 810cd4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810cd52:	b2db      	uxtb	r3, r3
 810cd54:	2b01      	cmp	r3, #1
 810cd56:	d001      	beq.n	810cd5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 810cd58:	2301      	movs	r3, #1
 810cd5a:	e04c      	b.n	810cdf6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810cd5c:	687b      	ldr	r3, [r7, #4]
 810cd5e:	2202      	movs	r2, #2
 810cd60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810cd64:	687b      	ldr	r3, [r7, #4]
 810cd66:	681b      	ldr	r3, [r3, #0]
 810cd68:	4a26      	ldr	r2, [pc, #152]	@ (810ce04 <HAL_TIM_Base_Start+0xc0>)
 810cd6a:	4293      	cmp	r3, r2
 810cd6c:	d022      	beq.n	810cdb4 <HAL_TIM_Base_Start+0x70>
 810cd6e:	687b      	ldr	r3, [r7, #4]
 810cd70:	681b      	ldr	r3, [r3, #0]
 810cd72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810cd76:	d01d      	beq.n	810cdb4 <HAL_TIM_Base_Start+0x70>
 810cd78:	687b      	ldr	r3, [r7, #4]
 810cd7a:	681b      	ldr	r3, [r3, #0]
 810cd7c:	4a22      	ldr	r2, [pc, #136]	@ (810ce08 <HAL_TIM_Base_Start+0xc4>)
 810cd7e:	4293      	cmp	r3, r2
 810cd80:	d018      	beq.n	810cdb4 <HAL_TIM_Base_Start+0x70>
 810cd82:	687b      	ldr	r3, [r7, #4]
 810cd84:	681b      	ldr	r3, [r3, #0]
 810cd86:	4a21      	ldr	r2, [pc, #132]	@ (810ce0c <HAL_TIM_Base_Start+0xc8>)
 810cd88:	4293      	cmp	r3, r2
 810cd8a:	d013      	beq.n	810cdb4 <HAL_TIM_Base_Start+0x70>
 810cd8c:	687b      	ldr	r3, [r7, #4]
 810cd8e:	681b      	ldr	r3, [r3, #0]
 810cd90:	4a1f      	ldr	r2, [pc, #124]	@ (810ce10 <HAL_TIM_Base_Start+0xcc>)
 810cd92:	4293      	cmp	r3, r2
 810cd94:	d00e      	beq.n	810cdb4 <HAL_TIM_Base_Start+0x70>
 810cd96:	687b      	ldr	r3, [r7, #4]
 810cd98:	681b      	ldr	r3, [r3, #0]
 810cd9a:	4a1e      	ldr	r2, [pc, #120]	@ (810ce14 <HAL_TIM_Base_Start+0xd0>)
 810cd9c:	4293      	cmp	r3, r2
 810cd9e:	d009      	beq.n	810cdb4 <HAL_TIM_Base_Start+0x70>
 810cda0:	687b      	ldr	r3, [r7, #4]
 810cda2:	681b      	ldr	r3, [r3, #0]
 810cda4:	4a1c      	ldr	r2, [pc, #112]	@ (810ce18 <HAL_TIM_Base_Start+0xd4>)
 810cda6:	4293      	cmp	r3, r2
 810cda8:	d004      	beq.n	810cdb4 <HAL_TIM_Base_Start+0x70>
 810cdaa:	687b      	ldr	r3, [r7, #4]
 810cdac:	681b      	ldr	r3, [r3, #0]
 810cdae:	4a1b      	ldr	r2, [pc, #108]	@ (810ce1c <HAL_TIM_Base_Start+0xd8>)
 810cdb0:	4293      	cmp	r3, r2
 810cdb2:	d115      	bne.n	810cde0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810cdb4:	687b      	ldr	r3, [r7, #4]
 810cdb6:	681b      	ldr	r3, [r3, #0]
 810cdb8:	689a      	ldr	r2, [r3, #8]
 810cdba:	4b19      	ldr	r3, [pc, #100]	@ (810ce20 <HAL_TIM_Base_Start+0xdc>)
 810cdbc:	4013      	ands	r3, r2
 810cdbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cdc0:	68fb      	ldr	r3, [r7, #12]
 810cdc2:	2b06      	cmp	r3, #6
 810cdc4:	d015      	beq.n	810cdf2 <HAL_TIM_Base_Start+0xae>
 810cdc6:	68fb      	ldr	r3, [r7, #12]
 810cdc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810cdcc:	d011      	beq.n	810cdf2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810cdce:	687b      	ldr	r3, [r7, #4]
 810cdd0:	681b      	ldr	r3, [r3, #0]
 810cdd2:	681a      	ldr	r2, [r3, #0]
 810cdd4:	687b      	ldr	r3, [r7, #4]
 810cdd6:	681b      	ldr	r3, [r3, #0]
 810cdd8:	f042 0201 	orr.w	r2, r2, #1
 810cddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cdde:	e008      	b.n	810cdf2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810cde0:	687b      	ldr	r3, [r7, #4]
 810cde2:	681b      	ldr	r3, [r3, #0]
 810cde4:	681a      	ldr	r2, [r3, #0]
 810cde6:	687b      	ldr	r3, [r7, #4]
 810cde8:	681b      	ldr	r3, [r3, #0]
 810cdea:	f042 0201 	orr.w	r2, r2, #1
 810cdee:	601a      	str	r2, [r3, #0]
 810cdf0:	e000      	b.n	810cdf4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cdf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810cdf4:	2300      	movs	r3, #0
}
 810cdf6:	4618      	mov	r0, r3
 810cdf8:	3714      	adds	r7, #20
 810cdfa:	46bd      	mov	sp, r7
 810cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce00:	4770      	bx	lr
 810ce02:	bf00      	nop
 810ce04:	40010000 	.word	0x40010000
 810ce08:	40000400 	.word	0x40000400
 810ce0c:	40000800 	.word	0x40000800
 810ce10:	40000c00 	.word	0x40000c00
 810ce14:	40010400 	.word	0x40010400
 810ce18:	40001800 	.word	0x40001800
 810ce1c:	40014000 	.word	0x40014000
 810ce20:	00010007 	.word	0x00010007

0810ce24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810ce24:	b480      	push	{r7}
 810ce26:	b085      	sub	sp, #20
 810ce28:	af00      	add	r7, sp, #0
 810ce2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810ce2c:	687b      	ldr	r3, [r7, #4]
 810ce2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ce32:	b2db      	uxtb	r3, r3
 810ce34:	2b01      	cmp	r3, #1
 810ce36:	d001      	beq.n	810ce3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810ce38:	2301      	movs	r3, #1
 810ce3a:	e054      	b.n	810cee6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ce3c:	687b      	ldr	r3, [r7, #4]
 810ce3e:	2202      	movs	r2, #2
 810ce40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810ce44:	687b      	ldr	r3, [r7, #4]
 810ce46:	681b      	ldr	r3, [r3, #0]
 810ce48:	68da      	ldr	r2, [r3, #12]
 810ce4a:	687b      	ldr	r3, [r7, #4]
 810ce4c:	681b      	ldr	r3, [r3, #0]
 810ce4e:	f042 0201 	orr.w	r2, r2, #1
 810ce52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ce54:	687b      	ldr	r3, [r7, #4]
 810ce56:	681b      	ldr	r3, [r3, #0]
 810ce58:	4a26      	ldr	r2, [pc, #152]	@ (810cef4 <HAL_TIM_Base_Start_IT+0xd0>)
 810ce5a:	4293      	cmp	r3, r2
 810ce5c:	d022      	beq.n	810cea4 <HAL_TIM_Base_Start_IT+0x80>
 810ce5e:	687b      	ldr	r3, [r7, #4]
 810ce60:	681b      	ldr	r3, [r3, #0]
 810ce62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ce66:	d01d      	beq.n	810cea4 <HAL_TIM_Base_Start_IT+0x80>
 810ce68:	687b      	ldr	r3, [r7, #4]
 810ce6a:	681b      	ldr	r3, [r3, #0]
 810ce6c:	4a22      	ldr	r2, [pc, #136]	@ (810cef8 <HAL_TIM_Base_Start_IT+0xd4>)
 810ce6e:	4293      	cmp	r3, r2
 810ce70:	d018      	beq.n	810cea4 <HAL_TIM_Base_Start_IT+0x80>
 810ce72:	687b      	ldr	r3, [r7, #4]
 810ce74:	681b      	ldr	r3, [r3, #0]
 810ce76:	4a21      	ldr	r2, [pc, #132]	@ (810cefc <HAL_TIM_Base_Start_IT+0xd8>)
 810ce78:	4293      	cmp	r3, r2
 810ce7a:	d013      	beq.n	810cea4 <HAL_TIM_Base_Start_IT+0x80>
 810ce7c:	687b      	ldr	r3, [r7, #4]
 810ce7e:	681b      	ldr	r3, [r3, #0]
 810ce80:	4a1f      	ldr	r2, [pc, #124]	@ (810cf00 <HAL_TIM_Base_Start_IT+0xdc>)
 810ce82:	4293      	cmp	r3, r2
 810ce84:	d00e      	beq.n	810cea4 <HAL_TIM_Base_Start_IT+0x80>
 810ce86:	687b      	ldr	r3, [r7, #4]
 810ce88:	681b      	ldr	r3, [r3, #0]
 810ce8a:	4a1e      	ldr	r2, [pc, #120]	@ (810cf04 <HAL_TIM_Base_Start_IT+0xe0>)
 810ce8c:	4293      	cmp	r3, r2
 810ce8e:	d009      	beq.n	810cea4 <HAL_TIM_Base_Start_IT+0x80>
 810ce90:	687b      	ldr	r3, [r7, #4]
 810ce92:	681b      	ldr	r3, [r3, #0]
 810ce94:	4a1c      	ldr	r2, [pc, #112]	@ (810cf08 <HAL_TIM_Base_Start_IT+0xe4>)
 810ce96:	4293      	cmp	r3, r2
 810ce98:	d004      	beq.n	810cea4 <HAL_TIM_Base_Start_IT+0x80>
 810ce9a:	687b      	ldr	r3, [r7, #4]
 810ce9c:	681b      	ldr	r3, [r3, #0]
 810ce9e:	4a1b      	ldr	r2, [pc, #108]	@ (810cf0c <HAL_TIM_Base_Start_IT+0xe8>)
 810cea0:	4293      	cmp	r3, r2
 810cea2:	d115      	bne.n	810ced0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810cea4:	687b      	ldr	r3, [r7, #4]
 810cea6:	681b      	ldr	r3, [r3, #0]
 810cea8:	689a      	ldr	r2, [r3, #8]
 810ceaa:	4b19      	ldr	r3, [pc, #100]	@ (810cf10 <HAL_TIM_Base_Start_IT+0xec>)
 810ceac:	4013      	ands	r3, r2
 810ceae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ceb0:	68fb      	ldr	r3, [r7, #12]
 810ceb2:	2b06      	cmp	r3, #6
 810ceb4:	d015      	beq.n	810cee2 <HAL_TIM_Base_Start_IT+0xbe>
 810ceb6:	68fb      	ldr	r3, [r7, #12]
 810ceb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810cebc:	d011      	beq.n	810cee2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810cebe:	687b      	ldr	r3, [r7, #4]
 810cec0:	681b      	ldr	r3, [r3, #0]
 810cec2:	681a      	ldr	r2, [r3, #0]
 810cec4:	687b      	ldr	r3, [r7, #4]
 810cec6:	681b      	ldr	r3, [r3, #0]
 810cec8:	f042 0201 	orr.w	r2, r2, #1
 810cecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cece:	e008      	b.n	810cee2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810ced0:	687b      	ldr	r3, [r7, #4]
 810ced2:	681b      	ldr	r3, [r3, #0]
 810ced4:	681a      	ldr	r2, [r3, #0]
 810ced6:	687b      	ldr	r3, [r7, #4]
 810ced8:	681b      	ldr	r3, [r3, #0]
 810ceda:	f042 0201 	orr.w	r2, r2, #1
 810cede:	601a      	str	r2, [r3, #0]
 810cee0:	e000      	b.n	810cee4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cee2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810cee4:	2300      	movs	r3, #0
}
 810cee6:	4618      	mov	r0, r3
 810cee8:	3714      	adds	r7, #20
 810ceea:	46bd      	mov	sp, r7
 810ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cef0:	4770      	bx	lr
 810cef2:	bf00      	nop
 810cef4:	40010000 	.word	0x40010000
 810cef8:	40000400 	.word	0x40000400
 810cefc:	40000800 	.word	0x40000800
 810cf00:	40000c00 	.word	0x40000c00
 810cf04:	40010400 	.word	0x40010400
 810cf08:	40001800 	.word	0x40001800
 810cf0c:	40014000 	.word	0x40014000
 810cf10:	00010007 	.word	0x00010007

0810cf14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810cf14:	b580      	push	{r7, lr}
 810cf16:	b082      	sub	sp, #8
 810cf18:	af00      	add	r7, sp, #0
 810cf1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810cf1c:	687b      	ldr	r3, [r7, #4]
 810cf1e:	2b00      	cmp	r3, #0
 810cf20:	d101      	bne.n	810cf26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810cf22:	2301      	movs	r3, #1
 810cf24:	e049      	b.n	810cfba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810cf26:	687b      	ldr	r3, [r7, #4]
 810cf28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810cf2c:	b2db      	uxtb	r3, r3
 810cf2e:	2b00      	cmp	r3, #0
 810cf30:	d106      	bne.n	810cf40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810cf32:	687b      	ldr	r3, [r7, #4]
 810cf34:	2200      	movs	r2, #0
 810cf36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810cf3a:	6878      	ldr	r0, [r7, #4]
 810cf3c:	f000 f841 	bl	810cfc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810cf40:	687b      	ldr	r3, [r7, #4]
 810cf42:	2202      	movs	r2, #2
 810cf44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810cf48:	687b      	ldr	r3, [r7, #4]
 810cf4a:	681a      	ldr	r2, [r3, #0]
 810cf4c:	687b      	ldr	r3, [r7, #4]
 810cf4e:	3304      	adds	r3, #4
 810cf50:	4619      	mov	r1, r3
 810cf52:	4610      	mov	r0, r2
 810cf54:	f000 fd30 	bl	810d9b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810cf58:	687b      	ldr	r3, [r7, #4]
 810cf5a:	2201      	movs	r2, #1
 810cf5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810cf60:	687b      	ldr	r3, [r7, #4]
 810cf62:	2201      	movs	r2, #1
 810cf64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810cf68:	687b      	ldr	r3, [r7, #4]
 810cf6a:	2201      	movs	r2, #1
 810cf6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810cf70:	687b      	ldr	r3, [r7, #4]
 810cf72:	2201      	movs	r2, #1
 810cf74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810cf78:	687b      	ldr	r3, [r7, #4]
 810cf7a:	2201      	movs	r2, #1
 810cf7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810cf80:	687b      	ldr	r3, [r7, #4]
 810cf82:	2201      	movs	r2, #1
 810cf84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810cf88:	687b      	ldr	r3, [r7, #4]
 810cf8a:	2201      	movs	r2, #1
 810cf8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810cf90:	687b      	ldr	r3, [r7, #4]
 810cf92:	2201      	movs	r2, #1
 810cf94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cf98:	687b      	ldr	r3, [r7, #4]
 810cf9a:	2201      	movs	r2, #1
 810cf9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cfa0:	687b      	ldr	r3, [r7, #4]
 810cfa2:	2201      	movs	r2, #1
 810cfa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810cfa8:	687b      	ldr	r3, [r7, #4]
 810cfaa:	2201      	movs	r2, #1
 810cfac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810cfb0:	687b      	ldr	r3, [r7, #4]
 810cfb2:	2201      	movs	r2, #1
 810cfb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810cfb8:	2300      	movs	r3, #0
}
 810cfba:	4618      	mov	r0, r3
 810cfbc:	3708      	adds	r7, #8
 810cfbe:	46bd      	mov	sp, r7
 810cfc0:	bd80      	pop	{r7, pc}

0810cfc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810cfc2:	b480      	push	{r7}
 810cfc4:	b083      	sub	sp, #12
 810cfc6:	af00      	add	r7, sp, #0
 810cfc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810cfca:	bf00      	nop
 810cfcc:	370c      	adds	r7, #12
 810cfce:	46bd      	mov	sp, r7
 810cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfd4:	4770      	bx	lr
	...

0810cfd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810cfd8:	b580      	push	{r7, lr}
 810cfda:	b084      	sub	sp, #16
 810cfdc:	af00      	add	r7, sp, #0
 810cfde:	6078      	str	r0, [r7, #4]
 810cfe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810cfe2:	683b      	ldr	r3, [r7, #0]
 810cfe4:	2b00      	cmp	r3, #0
 810cfe6:	d109      	bne.n	810cffc <HAL_TIM_PWM_Start+0x24>
 810cfe8:	687b      	ldr	r3, [r7, #4]
 810cfea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 810cfee:	b2db      	uxtb	r3, r3
 810cff0:	2b01      	cmp	r3, #1
 810cff2:	bf14      	ite	ne
 810cff4:	2301      	movne	r3, #1
 810cff6:	2300      	moveq	r3, #0
 810cff8:	b2db      	uxtb	r3, r3
 810cffa:	e03c      	b.n	810d076 <HAL_TIM_PWM_Start+0x9e>
 810cffc:	683b      	ldr	r3, [r7, #0]
 810cffe:	2b04      	cmp	r3, #4
 810d000:	d109      	bne.n	810d016 <HAL_TIM_PWM_Start+0x3e>
 810d002:	687b      	ldr	r3, [r7, #4]
 810d004:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 810d008:	b2db      	uxtb	r3, r3
 810d00a:	2b01      	cmp	r3, #1
 810d00c:	bf14      	ite	ne
 810d00e:	2301      	movne	r3, #1
 810d010:	2300      	moveq	r3, #0
 810d012:	b2db      	uxtb	r3, r3
 810d014:	e02f      	b.n	810d076 <HAL_TIM_PWM_Start+0x9e>
 810d016:	683b      	ldr	r3, [r7, #0]
 810d018:	2b08      	cmp	r3, #8
 810d01a:	d109      	bne.n	810d030 <HAL_TIM_PWM_Start+0x58>
 810d01c:	687b      	ldr	r3, [r7, #4]
 810d01e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810d022:	b2db      	uxtb	r3, r3
 810d024:	2b01      	cmp	r3, #1
 810d026:	bf14      	ite	ne
 810d028:	2301      	movne	r3, #1
 810d02a:	2300      	moveq	r3, #0
 810d02c:	b2db      	uxtb	r3, r3
 810d02e:	e022      	b.n	810d076 <HAL_TIM_PWM_Start+0x9e>
 810d030:	683b      	ldr	r3, [r7, #0]
 810d032:	2b0c      	cmp	r3, #12
 810d034:	d109      	bne.n	810d04a <HAL_TIM_PWM_Start+0x72>
 810d036:	687b      	ldr	r3, [r7, #4]
 810d038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810d03c:	b2db      	uxtb	r3, r3
 810d03e:	2b01      	cmp	r3, #1
 810d040:	bf14      	ite	ne
 810d042:	2301      	movne	r3, #1
 810d044:	2300      	moveq	r3, #0
 810d046:	b2db      	uxtb	r3, r3
 810d048:	e015      	b.n	810d076 <HAL_TIM_PWM_Start+0x9e>
 810d04a:	683b      	ldr	r3, [r7, #0]
 810d04c:	2b10      	cmp	r3, #16
 810d04e:	d109      	bne.n	810d064 <HAL_TIM_PWM_Start+0x8c>
 810d050:	687b      	ldr	r3, [r7, #4]
 810d052:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810d056:	b2db      	uxtb	r3, r3
 810d058:	2b01      	cmp	r3, #1
 810d05a:	bf14      	ite	ne
 810d05c:	2301      	movne	r3, #1
 810d05e:	2300      	moveq	r3, #0
 810d060:	b2db      	uxtb	r3, r3
 810d062:	e008      	b.n	810d076 <HAL_TIM_PWM_Start+0x9e>
 810d064:	687b      	ldr	r3, [r7, #4]
 810d066:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 810d06a:	b2db      	uxtb	r3, r3
 810d06c:	2b01      	cmp	r3, #1
 810d06e:	bf14      	ite	ne
 810d070:	2301      	movne	r3, #1
 810d072:	2300      	moveq	r3, #0
 810d074:	b2db      	uxtb	r3, r3
 810d076:	2b00      	cmp	r3, #0
 810d078:	d001      	beq.n	810d07e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810d07a:	2301      	movs	r3, #1
 810d07c:	e0a1      	b.n	810d1c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810d07e:	683b      	ldr	r3, [r7, #0]
 810d080:	2b00      	cmp	r3, #0
 810d082:	d104      	bne.n	810d08e <HAL_TIM_PWM_Start+0xb6>
 810d084:	687b      	ldr	r3, [r7, #4]
 810d086:	2202      	movs	r2, #2
 810d088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810d08c:	e023      	b.n	810d0d6 <HAL_TIM_PWM_Start+0xfe>
 810d08e:	683b      	ldr	r3, [r7, #0]
 810d090:	2b04      	cmp	r3, #4
 810d092:	d104      	bne.n	810d09e <HAL_TIM_PWM_Start+0xc6>
 810d094:	687b      	ldr	r3, [r7, #4]
 810d096:	2202      	movs	r2, #2
 810d098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810d09c:	e01b      	b.n	810d0d6 <HAL_TIM_PWM_Start+0xfe>
 810d09e:	683b      	ldr	r3, [r7, #0]
 810d0a0:	2b08      	cmp	r3, #8
 810d0a2:	d104      	bne.n	810d0ae <HAL_TIM_PWM_Start+0xd6>
 810d0a4:	687b      	ldr	r3, [r7, #4]
 810d0a6:	2202      	movs	r2, #2
 810d0a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810d0ac:	e013      	b.n	810d0d6 <HAL_TIM_PWM_Start+0xfe>
 810d0ae:	683b      	ldr	r3, [r7, #0]
 810d0b0:	2b0c      	cmp	r3, #12
 810d0b2:	d104      	bne.n	810d0be <HAL_TIM_PWM_Start+0xe6>
 810d0b4:	687b      	ldr	r3, [r7, #4]
 810d0b6:	2202      	movs	r2, #2
 810d0b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810d0bc:	e00b      	b.n	810d0d6 <HAL_TIM_PWM_Start+0xfe>
 810d0be:	683b      	ldr	r3, [r7, #0]
 810d0c0:	2b10      	cmp	r3, #16
 810d0c2:	d104      	bne.n	810d0ce <HAL_TIM_PWM_Start+0xf6>
 810d0c4:	687b      	ldr	r3, [r7, #4]
 810d0c6:	2202      	movs	r2, #2
 810d0c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810d0cc:	e003      	b.n	810d0d6 <HAL_TIM_PWM_Start+0xfe>
 810d0ce:	687b      	ldr	r3, [r7, #4]
 810d0d0:	2202      	movs	r2, #2
 810d0d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810d0d6:	687b      	ldr	r3, [r7, #4]
 810d0d8:	681b      	ldr	r3, [r3, #0]
 810d0da:	2201      	movs	r2, #1
 810d0dc:	6839      	ldr	r1, [r7, #0]
 810d0de:	4618      	mov	r0, r3
 810d0e0:	f001 f882 	bl	810e1e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810d0e4:	687b      	ldr	r3, [r7, #4]
 810d0e6:	681b      	ldr	r3, [r3, #0]
 810d0e8:	4a38      	ldr	r2, [pc, #224]	@ (810d1cc <HAL_TIM_PWM_Start+0x1f4>)
 810d0ea:	4293      	cmp	r3, r2
 810d0ec:	d013      	beq.n	810d116 <HAL_TIM_PWM_Start+0x13e>
 810d0ee:	687b      	ldr	r3, [r7, #4]
 810d0f0:	681b      	ldr	r3, [r3, #0]
 810d0f2:	4a37      	ldr	r2, [pc, #220]	@ (810d1d0 <HAL_TIM_PWM_Start+0x1f8>)
 810d0f4:	4293      	cmp	r3, r2
 810d0f6:	d00e      	beq.n	810d116 <HAL_TIM_PWM_Start+0x13e>
 810d0f8:	687b      	ldr	r3, [r7, #4]
 810d0fa:	681b      	ldr	r3, [r3, #0]
 810d0fc:	4a35      	ldr	r2, [pc, #212]	@ (810d1d4 <HAL_TIM_PWM_Start+0x1fc>)
 810d0fe:	4293      	cmp	r3, r2
 810d100:	d009      	beq.n	810d116 <HAL_TIM_PWM_Start+0x13e>
 810d102:	687b      	ldr	r3, [r7, #4]
 810d104:	681b      	ldr	r3, [r3, #0]
 810d106:	4a34      	ldr	r2, [pc, #208]	@ (810d1d8 <HAL_TIM_PWM_Start+0x200>)
 810d108:	4293      	cmp	r3, r2
 810d10a:	d004      	beq.n	810d116 <HAL_TIM_PWM_Start+0x13e>
 810d10c:	687b      	ldr	r3, [r7, #4]
 810d10e:	681b      	ldr	r3, [r3, #0]
 810d110:	4a32      	ldr	r2, [pc, #200]	@ (810d1dc <HAL_TIM_PWM_Start+0x204>)
 810d112:	4293      	cmp	r3, r2
 810d114:	d101      	bne.n	810d11a <HAL_TIM_PWM_Start+0x142>
 810d116:	2301      	movs	r3, #1
 810d118:	e000      	b.n	810d11c <HAL_TIM_PWM_Start+0x144>
 810d11a:	2300      	movs	r3, #0
 810d11c:	2b00      	cmp	r3, #0
 810d11e:	d007      	beq.n	810d130 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810d120:	687b      	ldr	r3, [r7, #4]
 810d122:	681b      	ldr	r3, [r3, #0]
 810d124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810d126:	687b      	ldr	r3, [r7, #4]
 810d128:	681b      	ldr	r3, [r3, #0]
 810d12a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810d12e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810d130:	687b      	ldr	r3, [r7, #4]
 810d132:	681b      	ldr	r3, [r3, #0]
 810d134:	4a25      	ldr	r2, [pc, #148]	@ (810d1cc <HAL_TIM_PWM_Start+0x1f4>)
 810d136:	4293      	cmp	r3, r2
 810d138:	d022      	beq.n	810d180 <HAL_TIM_PWM_Start+0x1a8>
 810d13a:	687b      	ldr	r3, [r7, #4]
 810d13c:	681b      	ldr	r3, [r3, #0]
 810d13e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d142:	d01d      	beq.n	810d180 <HAL_TIM_PWM_Start+0x1a8>
 810d144:	687b      	ldr	r3, [r7, #4]
 810d146:	681b      	ldr	r3, [r3, #0]
 810d148:	4a25      	ldr	r2, [pc, #148]	@ (810d1e0 <HAL_TIM_PWM_Start+0x208>)
 810d14a:	4293      	cmp	r3, r2
 810d14c:	d018      	beq.n	810d180 <HAL_TIM_PWM_Start+0x1a8>
 810d14e:	687b      	ldr	r3, [r7, #4]
 810d150:	681b      	ldr	r3, [r3, #0]
 810d152:	4a24      	ldr	r2, [pc, #144]	@ (810d1e4 <HAL_TIM_PWM_Start+0x20c>)
 810d154:	4293      	cmp	r3, r2
 810d156:	d013      	beq.n	810d180 <HAL_TIM_PWM_Start+0x1a8>
 810d158:	687b      	ldr	r3, [r7, #4]
 810d15a:	681b      	ldr	r3, [r3, #0]
 810d15c:	4a22      	ldr	r2, [pc, #136]	@ (810d1e8 <HAL_TIM_PWM_Start+0x210>)
 810d15e:	4293      	cmp	r3, r2
 810d160:	d00e      	beq.n	810d180 <HAL_TIM_PWM_Start+0x1a8>
 810d162:	687b      	ldr	r3, [r7, #4]
 810d164:	681b      	ldr	r3, [r3, #0]
 810d166:	4a1a      	ldr	r2, [pc, #104]	@ (810d1d0 <HAL_TIM_PWM_Start+0x1f8>)
 810d168:	4293      	cmp	r3, r2
 810d16a:	d009      	beq.n	810d180 <HAL_TIM_PWM_Start+0x1a8>
 810d16c:	687b      	ldr	r3, [r7, #4]
 810d16e:	681b      	ldr	r3, [r3, #0]
 810d170:	4a1e      	ldr	r2, [pc, #120]	@ (810d1ec <HAL_TIM_PWM_Start+0x214>)
 810d172:	4293      	cmp	r3, r2
 810d174:	d004      	beq.n	810d180 <HAL_TIM_PWM_Start+0x1a8>
 810d176:	687b      	ldr	r3, [r7, #4]
 810d178:	681b      	ldr	r3, [r3, #0]
 810d17a:	4a16      	ldr	r2, [pc, #88]	@ (810d1d4 <HAL_TIM_PWM_Start+0x1fc>)
 810d17c:	4293      	cmp	r3, r2
 810d17e:	d115      	bne.n	810d1ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810d180:	687b      	ldr	r3, [r7, #4]
 810d182:	681b      	ldr	r3, [r3, #0]
 810d184:	689a      	ldr	r2, [r3, #8]
 810d186:	4b1a      	ldr	r3, [pc, #104]	@ (810d1f0 <HAL_TIM_PWM_Start+0x218>)
 810d188:	4013      	ands	r3, r2
 810d18a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810d18c:	68fb      	ldr	r3, [r7, #12]
 810d18e:	2b06      	cmp	r3, #6
 810d190:	d015      	beq.n	810d1be <HAL_TIM_PWM_Start+0x1e6>
 810d192:	68fb      	ldr	r3, [r7, #12]
 810d194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d198:	d011      	beq.n	810d1be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810d19a:	687b      	ldr	r3, [r7, #4]
 810d19c:	681b      	ldr	r3, [r3, #0]
 810d19e:	681a      	ldr	r2, [r3, #0]
 810d1a0:	687b      	ldr	r3, [r7, #4]
 810d1a2:	681b      	ldr	r3, [r3, #0]
 810d1a4:	f042 0201 	orr.w	r2, r2, #1
 810d1a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810d1aa:	e008      	b.n	810d1be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810d1ac:	687b      	ldr	r3, [r7, #4]
 810d1ae:	681b      	ldr	r3, [r3, #0]
 810d1b0:	681a      	ldr	r2, [r3, #0]
 810d1b2:	687b      	ldr	r3, [r7, #4]
 810d1b4:	681b      	ldr	r3, [r3, #0]
 810d1b6:	f042 0201 	orr.w	r2, r2, #1
 810d1ba:	601a      	str	r2, [r3, #0]
 810d1bc:	e000      	b.n	810d1c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810d1be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810d1c0:	2300      	movs	r3, #0
}
 810d1c2:	4618      	mov	r0, r3
 810d1c4:	3710      	adds	r7, #16
 810d1c6:	46bd      	mov	sp, r7
 810d1c8:	bd80      	pop	{r7, pc}
 810d1ca:	bf00      	nop
 810d1cc:	40010000 	.word	0x40010000
 810d1d0:	40010400 	.word	0x40010400
 810d1d4:	40014000 	.word	0x40014000
 810d1d8:	40014400 	.word	0x40014400
 810d1dc:	40014800 	.word	0x40014800
 810d1e0:	40000400 	.word	0x40000400
 810d1e4:	40000800 	.word	0x40000800
 810d1e8:	40000c00 	.word	0x40000c00
 810d1ec:	40001800 	.word	0x40001800
 810d1f0:	00010007 	.word	0x00010007

0810d1f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 810d1f4:	b580      	push	{r7, lr}
 810d1f6:	b086      	sub	sp, #24
 810d1f8:	af00      	add	r7, sp, #0
 810d1fa:	6078      	str	r0, [r7, #4]
 810d1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 810d1fe:	687b      	ldr	r3, [r7, #4]
 810d200:	2b00      	cmp	r3, #0
 810d202:	d101      	bne.n	810d208 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 810d204:	2301      	movs	r3, #1
 810d206:	e097      	b.n	810d338 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 810d208:	687b      	ldr	r3, [r7, #4]
 810d20a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810d20e:	b2db      	uxtb	r3, r3
 810d210:	2b00      	cmp	r3, #0
 810d212:	d106      	bne.n	810d222 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810d214:	687b      	ldr	r3, [r7, #4]
 810d216:	2200      	movs	r2, #0
 810d218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 810d21c:	6878      	ldr	r0, [r7, #4]
 810d21e:	f7f7 f917 	bl	8104450 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810d222:	687b      	ldr	r3, [r7, #4]
 810d224:	2202      	movs	r2, #2
 810d226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810d22a:	687b      	ldr	r3, [r7, #4]
 810d22c:	681b      	ldr	r3, [r3, #0]
 810d22e:	689b      	ldr	r3, [r3, #8]
 810d230:	687a      	ldr	r2, [r7, #4]
 810d232:	6812      	ldr	r2, [r2, #0]
 810d234:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 810d238:	f023 0307 	bic.w	r3, r3, #7
 810d23c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810d23e:	687b      	ldr	r3, [r7, #4]
 810d240:	681a      	ldr	r2, [r3, #0]
 810d242:	687b      	ldr	r3, [r7, #4]
 810d244:	3304      	adds	r3, #4
 810d246:	4619      	mov	r1, r3
 810d248:	4610      	mov	r0, r2
 810d24a:	f000 fbb5 	bl	810d9b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810d24e:	687b      	ldr	r3, [r7, #4]
 810d250:	681b      	ldr	r3, [r3, #0]
 810d252:	689b      	ldr	r3, [r3, #8]
 810d254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810d256:	687b      	ldr	r3, [r7, #4]
 810d258:	681b      	ldr	r3, [r3, #0]
 810d25a:	699b      	ldr	r3, [r3, #24]
 810d25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810d25e:	687b      	ldr	r3, [r7, #4]
 810d260:	681b      	ldr	r3, [r3, #0]
 810d262:	6a1b      	ldr	r3, [r3, #32]
 810d264:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810d266:	683b      	ldr	r3, [r7, #0]
 810d268:	681b      	ldr	r3, [r3, #0]
 810d26a:	697a      	ldr	r2, [r7, #20]
 810d26c:	4313      	orrs	r3, r2
 810d26e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 810d270:	693b      	ldr	r3, [r7, #16]
 810d272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810d276:	f023 0303 	bic.w	r3, r3, #3
 810d27a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 810d27c:	683b      	ldr	r3, [r7, #0]
 810d27e:	689a      	ldr	r2, [r3, #8]
 810d280:	683b      	ldr	r3, [r7, #0]
 810d282:	699b      	ldr	r3, [r3, #24]
 810d284:	021b      	lsls	r3, r3, #8
 810d286:	4313      	orrs	r3, r2
 810d288:	693a      	ldr	r2, [r7, #16]
 810d28a:	4313      	orrs	r3, r2
 810d28c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810d28e:	693b      	ldr	r3, [r7, #16]
 810d290:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 810d294:	f023 030c 	bic.w	r3, r3, #12
 810d298:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810d29a:	693b      	ldr	r3, [r7, #16]
 810d29c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810d2a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810d2a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810d2a6:	683b      	ldr	r3, [r7, #0]
 810d2a8:	68da      	ldr	r2, [r3, #12]
 810d2aa:	683b      	ldr	r3, [r7, #0]
 810d2ac:	69db      	ldr	r3, [r3, #28]
 810d2ae:	021b      	lsls	r3, r3, #8
 810d2b0:	4313      	orrs	r3, r2
 810d2b2:	693a      	ldr	r2, [r7, #16]
 810d2b4:	4313      	orrs	r3, r2
 810d2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 810d2b8:	683b      	ldr	r3, [r7, #0]
 810d2ba:	691b      	ldr	r3, [r3, #16]
 810d2bc:	011a      	lsls	r2, r3, #4
 810d2be:	683b      	ldr	r3, [r7, #0]
 810d2c0:	6a1b      	ldr	r3, [r3, #32]
 810d2c2:	031b      	lsls	r3, r3, #12
 810d2c4:	4313      	orrs	r3, r2
 810d2c6:	693a      	ldr	r2, [r7, #16]
 810d2c8:	4313      	orrs	r3, r2
 810d2ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 810d2cc:	68fb      	ldr	r3, [r7, #12]
 810d2ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 810d2d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 810d2d4:	68fb      	ldr	r3, [r7, #12]
 810d2d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 810d2da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 810d2dc:	683b      	ldr	r3, [r7, #0]
 810d2de:	685a      	ldr	r2, [r3, #4]
 810d2e0:	683b      	ldr	r3, [r7, #0]
 810d2e2:	695b      	ldr	r3, [r3, #20]
 810d2e4:	011b      	lsls	r3, r3, #4
 810d2e6:	4313      	orrs	r3, r2
 810d2e8:	68fa      	ldr	r2, [r7, #12]
 810d2ea:	4313      	orrs	r3, r2
 810d2ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810d2ee:	687b      	ldr	r3, [r7, #4]
 810d2f0:	681b      	ldr	r3, [r3, #0]
 810d2f2:	697a      	ldr	r2, [r7, #20]
 810d2f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810d2f6:	687b      	ldr	r3, [r7, #4]
 810d2f8:	681b      	ldr	r3, [r3, #0]
 810d2fa:	693a      	ldr	r2, [r7, #16]
 810d2fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 810d2fe:	687b      	ldr	r3, [r7, #4]
 810d300:	681b      	ldr	r3, [r3, #0]
 810d302:	68fa      	ldr	r2, [r7, #12]
 810d304:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810d306:	687b      	ldr	r3, [r7, #4]
 810d308:	2201      	movs	r2, #1
 810d30a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810d30e:	687b      	ldr	r3, [r7, #4]
 810d310:	2201      	movs	r2, #1
 810d312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810d316:	687b      	ldr	r3, [r7, #4]
 810d318:	2201      	movs	r2, #1
 810d31a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810d31e:	687b      	ldr	r3, [r7, #4]
 810d320:	2201      	movs	r2, #1
 810d322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810d326:	687b      	ldr	r3, [r7, #4]
 810d328:	2201      	movs	r2, #1
 810d32a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810d32e:	687b      	ldr	r3, [r7, #4]
 810d330:	2201      	movs	r2, #1
 810d332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810d336:	2300      	movs	r3, #0
}
 810d338:	4618      	mov	r0, r3
 810d33a:	3718      	adds	r7, #24
 810d33c:	46bd      	mov	sp, r7
 810d33e:	bd80      	pop	{r7, pc}

0810d340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810d340:	b580      	push	{r7, lr}
 810d342:	b084      	sub	sp, #16
 810d344:	af00      	add	r7, sp, #0
 810d346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810d348:	687b      	ldr	r3, [r7, #4]
 810d34a:	681b      	ldr	r3, [r3, #0]
 810d34c:	68db      	ldr	r3, [r3, #12]
 810d34e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810d350:	687b      	ldr	r3, [r7, #4]
 810d352:	681b      	ldr	r3, [r3, #0]
 810d354:	691b      	ldr	r3, [r3, #16]
 810d356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810d358:	68bb      	ldr	r3, [r7, #8]
 810d35a:	f003 0302 	and.w	r3, r3, #2
 810d35e:	2b00      	cmp	r3, #0
 810d360:	d020      	beq.n	810d3a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810d362:	68fb      	ldr	r3, [r7, #12]
 810d364:	f003 0302 	and.w	r3, r3, #2
 810d368:	2b00      	cmp	r3, #0
 810d36a:	d01b      	beq.n	810d3a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810d36c:	687b      	ldr	r3, [r7, #4]
 810d36e:	681b      	ldr	r3, [r3, #0]
 810d370:	f06f 0202 	mvn.w	r2, #2
 810d374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810d376:	687b      	ldr	r3, [r7, #4]
 810d378:	2201      	movs	r2, #1
 810d37a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810d37c:	687b      	ldr	r3, [r7, #4]
 810d37e:	681b      	ldr	r3, [r3, #0]
 810d380:	699b      	ldr	r3, [r3, #24]
 810d382:	f003 0303 	and.w	r3, r3, #3
 810d386:	2b00      	cmp	r3, #0
 810d388:	d003      	beq.n	810d392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810d38a:	6878      	ldr	r0, [r7, #4]
 810d38c:	f000 faf6 	bl	810d97c <HAL_TIM_IC_CaptureCallback>
 810d390:	e005      	b.n	810d39e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810d392:	6878      	ldr	r0, [r7, #4]
 810d394:	f000 fae8 	bl	810d968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d398:	6878      	ldr	r0, [r7, #4]
 810d39a:	f000 faf9 	bl	810d990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d39e:	687b      	ldr	r3, [r7, #4]
 810d3a0:	2200      	movs	r2, #0
 810d3a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810d3a4:	68bb      	ldr	r3, [r7, #8]
 810d3a6:	f003 0304 	and.w	r3, r3, #4
 810d3aa:	2b00      	cmp	r3, #0
 810d3ac:	d020      	beq.n	810d3f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810d3ae:	68fb      	ldr	r3, [r7, #12]
 810d3b0:	f003 0304 	and.w	r3, r3, #4
 810d3b4:	2b00      	cmp	r3, #0
 810d3b6:	d01b      	beq.n	810d3f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810d3b8:	687b      	ldr	r3, [r7, #4]
 810d3ba:	681b      	ldr	r3, [r3, #0]
 810d3bc:	f06f 0204 	mvn.w	r2, #4
 810d3c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810d3c2:	687b      	ldr	r3, [r7, #4]
 810d3c4:	2202      	movs	r2, #2
 810d3c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810d3c8:	687b      	ldr	r3, [r7, #4]
 810d3ca:	681b      	ldr	r3, [r3, #0]
 810d3cc:	699b      	ldr	r3, [r3, #24]
 810d3ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810d3d2:	2b00      	cmp	r3, #0
 810d3d4:	d003      	beq.n	810d3de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d3d6:	6878      	ldr	r0, [r7, #4]
 810d3d8:	f000 fad0 	bl	810d97c <HAL_TIM_IC_CaptureCallback>
 810d3dc:	e005      	b.n	810d3ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d3de:	6878      	ldr	r0, [r7, #4]
 810d3e0:	f000 fac2 	bl	810d968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d3e4:	6878      	ldr	r0, [r7, #4]
 810d3e6:	f000 fad3 	bl	810d990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d3ea:	687b      	ldr	r3, [r7, #4]
 810d3ec:	2200      	movs	r2, #0
 810d3ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810d3f0:	68bb      	ldr	r3, [r7, #8]
 810d3f2:	f003 0308 	and.w	r3, r3, #8
 810d3f6:	2b00      	cmp	r3, #0
 810d3f8:	d020      	beq.n	810d43c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810d3fa:	68fb      	ldr	r3, [r7, #12]
 810d3fc:	f003 0308 	and.w	r3, r3, #8
 810d400:	2b00      	cmp	r3, #0
 810d402:	d01b      	beq.n	810d43c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810d404:	687b      	ldr	r3, [r7, #4]
 810d406:	681b      	ldr	r3, [r3, #0]
 810d408:	f06f 0208 	mvn.w	r2, #8
 810d40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810d40e:	687b      	ldr	r3, [r7, #4]
 810d410:	2204      	movs	r2, #4
 810d412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810d414:	687b      	ldr	r3, [r7, #4]
 810d416:	681b      	ldr	r3, [r3, #0]
 810d418:	69db      	ldr	r3, [r3, #28]
 810d41a:	f003 0303 	and.w	r3, r3, #3
 810d41e:	2b00      	cmp	r3, #0
 810d420:	d003      	beq.n	810d42a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d422:	6878      	ldr	r0, [r7, #4]
 810d424:	f000 faaa 	bl	810d97c <HAL_TIM_IC_CaptureCallback>
 810d428:	e005      	b.n	810d436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d42a:	6878      	ldr	r0, [r7, #4]
 810d42c:	f000 fa9c 	bl	810d968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d430:	6878      	ldr	r0, [r7, #4]
 810d432:	f000 faad 	bl	810d990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d436:	687b      	ldr	r3, [r7, #4]
 810d438:	2200      	movs	r2, #0
 810d43a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810d43c:	68bb      	ldr	r3, [r7, #8]
 810d43e:	f003 0310 	and.w	r3, r3, #16
 810d442:	2b00      	cmp	r3, #0
 810d444:	d020      	beq.n	810d488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810d446:	68fb      	ldr	r3, [r7, #12]
 810d448:	f003 0310 	and.w	r3, r3, #16
 810d44c:	2b00      	cmp	r3, #0
 810d44e:	d01b      	beq.n	810d488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810d450:	687b      	ldr	r3, [r7, #4]
 810d452:	681b      	ldr	r3, [r3, #0]
 810d454:	f06f 0210 	mvn.w	r2, #16
 810d458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810d45a:	687b      	ldr	r3, [r7, #4]
 810d45c:	2208      	movs	r2, #8
 810d45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810d460:	687b      	ldr	r3, [r7, #4]
 810d462:	681b      	ldr	r3, [r3, #0]
 810d464:	69db      	ldr	r3, [r3, #28]
 810d466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810d46a:	2b00      	cmp	r3, #0
 810d46c:	d003      	beq.n	810d476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d46e:	6878      	ldr	r0, [r7, #4]
 810d470:	f000 fa84 	bl	810d97c <HAL_TIM_IC_CaptureCallback>
 810d474:	e005      	b.n	810d482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d476:	6878      	ldr	r0, [r7, #4]
 810d478:	f000 fa76 	bl	810d968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d47c:	6878      	ldr	r0, [r7, #4]
 810d47e:	f000 fa87 	bl	810d990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d482:	687b      	ldr	r3, [r7, #4]
 810d484:	2200      	movs	r2, #0
 810d486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810d488:	68bb      	ldr	r3, [r7, #8]
 810d48a:	f003 0301 	and.w	r3, r3, #1
 810d48e:	2b00      	cmp	r3, #0
 810d490:	d00c      	beq.n	810d4ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810d492:	68fb      	ldr	r3, [r7, #12]
 810d494:	f003 0301 	and.w	r3, r3, #1
 810d498:	2b00      	cmp	r3, #0
 810d49a:	d007      	beq.n	810d4ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810d49c:	687b      	ldr	r3, [r7, #4]
 810d49e:	681b      	ldr	r3, [r3, #0]
 810d4a0:	f06f 0201 	mvn.w	r2, #1
 810d4a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810d4a6:	6878      	ldr	r0, [r7, #4]
 810d4a8:	f7f6 fc66 	bl	8103d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810d4ac:	68bb      	ldr	r3, [r7, #8]
 810d4ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d4b2:	2b00      	cmp	r3, #0
 810d4b4:	d104      	bne.n	810d4c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810d4b6:	68bb      	ldr	r3, [r7, #8]
 810d4b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810d4bc:	2b00      	cmp	r3, #0
 810d4be:	d00c      	beq.n	810d4da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810d4c0:	68fb      	ldr	r3, [r7, #12]
 810d4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d4c6:	2b00      	cmp	r3, #0
 810d4c8:	d007      	beq.n	810d4da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810d4ca:	687b      	ldr	r3, [r7, #4]
 810d4cc:	681b      	ldr	r3, [r3, #0]
 810d4ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810d4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810d4d4:	6878      	ldr	r0, [r7, #4]
 810d4d6:	f000 ffc3 	bl	810e460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810d4da:	68bb      	ldr	r3, [r7, #8]
 810d4dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810d4e0:	2b00      	cmp	r3, #0
 810d4e2:	d00c      	beq.n	810d4fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810d4e4:	68fb      	ldr	r3, [r7, #12]
 810d4e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d4ea:	2b00      	cmp	r3, #0
 810d4ec:	d007      	beq.n	810d4fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810d4ee:	687b      	ldr	r3, [r7, #4]
 810d4f0:	681b      	ldr	r3, [r3, #0]
 810d4f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810d4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810d4f8:	6878      	ldr	r0, [r7, #4]
 810d4fa:	f000 ffbb 	bl	810e474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810d4fe:	68bb      	ldr	r3, [r7, #8]
 810d500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d504:	2b00      	cmp	r3, #0
 810d506:	d00c      	beq.n	810d522 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810d508:	68fb      	ldr	r3, [r7, #12]
 810d50a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d50e:	2b00      	cmp	r3, #0
 810d510:	d007      	beq.n	810d522 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810d512:	687b      	ldr	r3, [r7, #4]
 810d514:	681b      	ldr	r3, [r3, #0]
 810d516:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810d51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810d51c:	6878      	ldr	r0, [r7, #4]
 810d51e:	f000 fa41 	bl	810d9a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810d522:	68bb      	ldr	r3, [r7, #8]
 810d524:	f003 0320 	and.w	r3, r3, #32
 810d528:	2b00      	cmp	r3, #0
 810d52a:	d00c      	beq.n	810d546 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810d52c:	68fb      	ldr	r3, [r7, #12]
 810d52e:	f003 0320 	and.w	r3, r3, #32
 810d532:	2b00      	cmp	r3, #0
 810d534:	d007      	beq.n	810d546 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810d536:	687b      	ldr	r3, [r7, #4]
 810d538:	681b      	ldr	r3, [r3, #0]
 810d53a:	f06f 0220 	mvn.w	r2, #32
 810d53e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810d540:	6878      	ldr	r0, [r7, #4]
 810d542:	f000 ff83 	bl	810e44c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810d546:	bf00      	nop
 810d548:	3710      	adds	r7, #16
 810d54a:	46bd      	mov	sp, r7
 810d54c:	bd80      	pop	{r7, pc}
	...

0810d550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810d550:	b580      	push	{r7, lr}
 810d552:	b086      	sub	sp, #24
 810d554:	af00      	add	r7, sp, #0
 810d556:	60f8      	str	r0, [r7, #12]
 810d558:	60b9      	str	r1, [r7, #8]
 810d55a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810d55c:	2300      	movs	r3, #0
 810d55e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810d560:	68fb      	ldr	r3, [r7, #12]
 810d562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810d566:	2b01      	cmp	r3, #1
 810d568:	d101      	bne.n	810d56e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810d56a:	2302      	movs	r3, #2
 810d56c:	e0ff      	b.n	810d76e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810d56e:	68fb      	ldr	r3, [r7, #12]
 810d570:	2201      	movs	r2, #1
 810d572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810d576:	687b      	ldr	r3, [r7, #4]
 810d578:	2b14      	cmp	r3, #20
 810d57a:	f200 80f0 	bhi.w	810d75e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810d57e:	a201      	add	r2, pc, #4	@ (adr r2, 810d584 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810d580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d584:	0810d5d9 	.word	0x0810d5d9
 810d588:	0810d75f 	.word	0x0810d75f
 810d58c:	0810d75f 	.word	0x0810d75f
 810d590:	0810d75f 	.word	0x0810d75f
 810d594:	0810d619 	.word	0x0810d619
 810d598:	0810d75f 	.word	0x0810d75f
 810d59c:	0810d75f 	.word	0x0810d75f
 810d5a0:	0810d75f 	.word	0x0810d75f
 810d5a4:	0810d65b 	.word	0x0810d65b
 810d5a8:	0810d75f 	.word	0x0810d75f
 810d5ac:	0810d75f 	.word	0x0810d75f
 810d5b0:	0810d75f 	.word	0x0810d75f
 810d5b4:	0810d69b 	.word	0x0810d69b
 810d5b8:	0810d75f 	.word	0x0810d75f
 810d5bc:	0810d75f 	.word	0x0810d75f
 810d5c0:	0810d75f 	.word	0x0810d75f
 810d5c4:	0810d6dd 	.word	0x0810d6dd
 810d5c8:	0810d75f 	.word	0x0810d75f
 810d5cc:	0810d75f 	.word	0x0810d75f
 810d5d0:	0810d75f 	.word	0x0810d75f
 810d5d4:	0810d71d 	.word	0x0810d71d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810d5d8:	68fb      	ldr	r3, [r7, #12]
 810d5da:	681b      	ldr	r3, [r3, #0]
 810d5dc:	68b9      	ldr	r1, [r7, #8]
 810d5de:	4618      	mov	r0, r3
 810d5e0:	f000 fa90 	bl	810db04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810d5e4:	68fb      	ldr	r3, [r7, #12]
 810d5e6:	681b      	ldr	r3, [r3, #0]
 810d5e8:	699a      	ldr	r2, [r3, #24]
 810d5ea:	68fb      	ldr	r3, [r7, #12]
 810d5ec:	681b      	ldr	r3, [r3, #0]
 810d5ee:	f042 0208 	orr.w	r2, r2, #8
 810d5f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810d5f4:	68fb      	ldr	r3, [r7, #12]
 810d5f6:	681b      	ldr	r3, [r3, #0]
 810d5f8:	699a      	ldr	r2, [r3, #24]
 810d5fa:	68fb      	ldr	r3, [r7, #12]
 810d5fc:	681b      	ldr	r3, [r3, #0]
 810d5fe:	f022 0204 	bic.w	r2, r2, #4
 810d602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810d604:	68fb      	ldr	r3, [r7, #12]
 810d606:	681b      	ldr	r3, [r3, #0]
 810d608:	6999      	ldr	r1, [r3, #24]
 810d60a:	68bb      	ldr	r3, [r7, #8]
 810d60c:	691a      	ldr	r2, [r3, #16]
 810d60e:	68fb      	ldr	r3, [r7, #12]
 810d610:	681b      	ldr	r3, [r3, #0]
 810d612:	430a      	orrs	r2, r1
 810d614:	619a      	str	r2, [r3, #24]
      break;
 810d616:	e0a5      	b.n	810d764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810d618:	68fb      	ldr	r3, [r7, #12]
 810d61a:	681b      	ldr	r3, [r3, #0]
 810d61c:	68b9      	ldr	r1, [r7, #8]
 810d61e:	4618      	mov	r0, r3
 810d620:	f000 fb00 	bl	810dc24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810d624:	68fb      	ldr	r3, [r7, #12]
 810d626:	681b      	ldr	r3, [r3, #0]
 810d628:	699a      	ldr	r2, [r3, #24]
 810d62a:	68fb      	ldr	r3, [r7, #12]
 810d62c:	681b      	ldr	r3, [r3, #0]
 810d62e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810d632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810d634:	68fb      	ldr	r3, [r7, #12]
 810d636:	681b      	ldr	r3, [r3, #0]
 810d638:	699a      	ldr	r2, [r3, #24]
 810d63a:	68fb      	ldr	r3, [r7, #12]
 810d63c:	681b      	ldr	r3, [r3, #0]
 810d63e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810d642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810d644:	68fb      	ldr	r3, [r7, #12]
 810d646:	681b      	ldr	r3, [r3, #0]
 810d648:	6999      	ldr	r1, [r3, #24]
 810d64a:	68bb      	ldr	r3, [r7, #8]
 810d64c:	691b      	ldr	r3, [r3, #16]
 810d64e:	021a      	lsls	r2, r3, #8
 810d650:	68fb      	ldr	r3, [r7, #12]
 810d652:	681b      	ldr	r3, [r3, #0]
 810d654:	430a      	orrs	r2, r1
 810d656:	619a      	str	r2, [r3, #24]
      break;
 810d658:	e084      	b.n	810d764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810d65a:	68fb      	ldr	r3, [r7, #12]
 810d65c:	681b      	ldr	r3, [r3, #0]
 810d65e:	68b9      	ldr	r1, [r7, #8]
 810d660:	4618      	mov	r0, r3
 810d662:	f000 fb69 	bl	810dd38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810d666:	68fb      	ldr	r3, [r7, #12]
 810d668:	681b      	ldr	r3, [r3, #0]
 810d66a:	69da      	ldr	r2, [r3, #28]
 810d66c:	68fb      	ldr	r3, [r7, #12]
 810d66e:	681b      	ldr	r3, [r3, #0]
 810d670:	f042 0208 	orr.w	r2, r2, #8
 810d674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810d676:	68fb      	ldr	r3, [r7, #12]
 810d678:	681b      	ldr	r3, [r3, #0]
 810d67a:	69da      	ldr	r2, [r3, #28]
 810d67c:	68fb      	ldr	r3, [r7, #12]
 810d67e:	681b      	ldr	r3, [r3, #0]
 810d680:	f022 0204 	bic.w	r2, r2, #4
 810d684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810d686:	68fb      	ldr	r3, [r7, #12]
 810d688:	681b      	ldr	r3, [r3, #0]
 810d68a:	69d9      	ldr	r1, [r3, #28]
 810d68c:	68bb      	ldr	r3, [r7, #8]
 810d68e:	691a      	ldr	r2, [r3, #16]
 810d690:	68fb      	ldr	r3, [r7, #12]
 810d692:	681b      	ldr	r3, [r3, #0]
 810d694:	430a      	orrs	r2, r1
 810d696:	61da      	str	r2, [r3, #28]
      break;
 810d698:	e064      	b.n	810d764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810d69a:	68fb      	ldr	r3, [r7, #12]
 810d69c:	681b      	ldr	r3, [r3, #0]
 810d69e:	68b9      	ldr	r1, [r7, #8]
 810d6a0:	4618      	mov	r0, r3
 810d6a2:	f000 fbd1 	bl	810de48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810d6a6:	68fb      	ldr	r3, [r7, #12]
 810d6a8:	681b      	ldr	r3, [r3, #0]
 810d6aa:	69da      	ldr	r2, [r3, #28]
 810d6ac:	68fb      	ldr	r3, [r7, #12]
 810d6ae:	681b      	ldr	r3, [r3, #0]
 810d6b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810d6b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810d6b6:	68fb      	ldr	r3, [r7, #12]
 810d6b8:	681b      	ldr	r3, [r3, #0]
 810d6ba:	69da      	ldr	r2, [r3, #28]
 810d6bc:	68fb      	ldr	r3, [r7, #12]
 810d6be:	681b      	ldr	r3, [r3, #0]
 810d6c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810d6c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810d6c6:	68fb      	ldr	r3, [r7, #12]
 810d6c8:	681b      	ldr	r3, [r3, #0]
 810d6ca:	69d9      	ldr	r1, [r3, #28]
 810d6cc:	68bb      	ldr	r3, [r7, #8]
 810d6ce:	691b      	ldr	r3, [r3, #16]
 810d6d0:	021a      	lsls	r2, r3, #8
 810d6d2:	68fb      	ldr	r3, [r7, #12]
 810d6d4:	681b      	ldr	r3, [r3, #0]
 810d6d6:	430a      	orrs	r2, r1
 810d6d8:	61da      	str	r2, [r3, #28]
      break;
 810d6da:	e043      	b.n	810d764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810d6dc:	68fb      	ldr	r3, [r7, #12]
 810d6de:	681b      	ldr	r3, [r3, #0]
 810d6e0:	68b9      	ldr	r1, [r7, #8]
 810d6e2:	4618      	mov	r0, r3
 810d6e4:	f000 fc1a 	bl	810df1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810d6e8:	68fb      	ldr	r3, [r7, #12]
 810d6ea:	681b      	ldr	r3, [r3, #0]
 810d6ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810d6ee:	68fb      	ldr	r3, [r7, #12]
 810d6f0:	681b      	ldr	r3, [r3, #0]
 810d6f2:	f042 0208 	orr.w	r2, r2, #8
 810d6f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810d6f8:	68fb      	ldr	r3, [r7, #12]
 810d6fa:	681b      	ldr	r3, [r3, #0]
 810d6fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810d6fe:	68fb      	ldr	r3, [r7, #12]
 810d700:	681b      	ldr	r3, [r3, #0]
 810d702:	f022 0204 	bic.w	r2, r2, #4
 810d706:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810d708:	68fb      	ldr	r3, [r7, #12]
 810d70a:	681b      	ldr	r3, [r3, #0]
 810d70c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810d70e:	68bb      	ldr	r3, [r7, #8]
 810d710:	691a      	ldr	r2, [r3, #16]
 810d712:	68fb      	ldr	r3, [r7, #12]
 810d714:	681b      	ldr	r3, [r3, #0]
 810d716:	430a      	orrs	r2, r1
 810d718:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810d71a:	e023      	b.n	810d764 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810d71c:	68fb      	ldr	r3, [r7, #12]
 810d71e:	681b      	ldr	r3, [r3, #0]
 810d720:	68b9      	ldr	r1, [r7, #8]
 810d722:	4618      	mov	r0, r3
 810d724:	f000 fc5e 	bl	810dfe4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810d728:	68fb      	ldr	r3, [r7, #12]
 810d72a:	681b      	ldr	r3, [r3, #0]
 810d72c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810d72e:	68fb      	ldr	r3, [r7, #12]
 810d730:	681b      	ldr	r3, [r3, #0]
 810d732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810d736:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810d738:	68fb      	ldr	r3, [r7, #12]
 810d73a:	681b      	ldr	r3, [r3, #0]
 810d73c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810d73e:	68fb      	ldr	r3, [r7, #12]
 810d740:	681b      	ldr	r3, [r3, #0]
 810d742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810d746:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810d748:	68fb      	ldr	r3, [r7, #12]
 810d74a:	681b      	ldr	r3, [r3, #0]
 810d74c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810d74e:	68bb      	ldr	r3, [r7, #8]
 810d750:	691b      	ldr	r3, [r3, #16]
 810d752:	021a      	lsls	r2, r3, #8
 810d754:	68fb      	ldr	r3, [r7, #12]
 810d756:	681b      	ldr	r3, [r3, #0]
 810d758:	430a      	orrs	r2, r1
 810d75a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810d75c:	e002      	b.n	810d764 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810d75e:	2301      	movs	r3, #1
 810d760:	75fb      	strb	r3, [r7, #23]
      break;
 810d762:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810d764:	68fb      	ldr	r3, [r7, #12]
 810d766:	2200      	movs	r2, #0
 810d768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810d76c:	7dfb      	ldrb	r3, [r7, #23]
}
 810d76e:	4618      	mov	r0, r3
 810d770:	3718      	adds	r7, #24
 810d772:	46bd      	mov	sp, r7
 810d774:	bd80      	pop	{r7, pc}
 810d776:	bf00      	nop

0810d778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810d778:	b580      	push	{r7, lr}
 810d77a:	b084      	sub	sp, #16
 810d77c:	af00      	add	r7, sp, #0
 810d77e:	6078      	str	r0, [r7, #4]
 810d780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810d782:	2300      	movs	r3, #0
 810d784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810d786:	687b      	ldr	r3, [r7, #4]
 810d788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810d78c:	2b01      	cmp	r3, #1
 810d78e:	d101      	bne.n	810d794 <HAL_TIM_ConfigClockSource+0x1c>
 810d790:	2302      	movs	r3, #2
 810d792:	e0de      	b.n	810d952 <HAL_TIM_ConfigClockSource+0x1da>
 810d794:	687b      	ldr	r3, [r7, #4]
 810d796:	2201      	movs	r2, #1
 810d798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810d79c:	687b      	ldr	r3, [r7, #4]
 810d79e:	2202      	movs	r2, #2
 810d7a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810d7a4:	687b      	ldr	r3, [r7, #4]
 810d7a6:	681b      	ldr	r3, [r3, #0]
 810d7a8:	689b      	ldr	r3, [r3, #8]
 810d7aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810d7ac:	68bb      	ldr	r3, [r7, #8]
 810d7ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810d7b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810d7b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810d7b8:	68bb      	ldr	r3, [r7, #8]
 810d7ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810d7be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810d7c0:	687b      	ldr	r3, [r7, #4]
 810d7c2:	681b      	ldr	r3, [r3, #0]
 810d7c4:	68ba      	ldr	r2, [r7, #8]
 810d7c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810d7c8:	683b      	ldr	r3, [r7, #0]
 810d7ca:	681b      	ldr	r3, [r3, #0]
 810d7cc:	4a63      	ldr	r2, [pc, #396]	@ (810d95c <HAL_TIM_ConfigClockSource+0x1e4>)
 810d7ce:	4293      	cmp	r3, r2
 810d7d0:	f000 80a9 	beq.w	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d7d4:	4a61      	ldr	r2, [pc, #388]	@ (810d95c <HAL_TIM_ConfigClockSource+0x1e4>)
 810d7d6:	4293      	cmp	r3, r2
 810d7d8:	f200 80ae 	bhi.w	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d7dc:	4a60      	ldr	r2, [pc, #384]	@ (810d960 <HAL_TIM_ConfigClockSource+0x1e8>)
 810d7de:	4293      	cmp	r3, r2
 810d7e0:	f000 80a1 	beq.w	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d7e4:	4a5e      	ldr	r2, [pc, #376]	@ (810d960 <HAL_TIM_ConfigClockSource+0x1e8>)
 810d7e6:	4293      	cmp	r3, r2
 810d7e8:	f200 80a6 	bhi.w	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d7ec:	4a5d      	ldr	r2, [pc, #372]	@ (810d964 <HAL_TIM_ConfigClockSource+0x1ec>)
 810d7ee:	4293      	cmp	r3, r2
 810d7f0:	f000 8099 	beq.w	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d7f4:	4a5b      	ldr	r2, [pc, #364]	@ (810d964 <HAL_TIM_ConfigClockSource+0x1ec>)
 810d7f6:	4293      	cmp	r3, r2
 810d7f8:	f200 809e 	bhi.w	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d7fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810d800:	f000 8091 	beq.w	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d804:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810d808:	f200 8096 	bhi.w	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d80c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d810:	f000 8089 	beq.w	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d818:	f200 808e 	bhi.w	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d81c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810d820:	d03e      	beq.n	810d8a0 <HAL_TIM_ConfigClockSource+0x128>
 810d822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810d826:	f200 8087 	bhi.w	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d82a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810d82e:	f000 8086 	beq.w	810d93e <HAL_TIM_ConfigClockSource+0x1c6>
 810d832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810d836:	d87f      	bhi.n	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d838:	2b70      	cmp	r3, #112	@ 0x70
 810d83a:	d01a      	beq.n	810d872 <HAL_TIM_ConfigClockSource+0xfa>
 810d83c:	2b70      	cmp	r3, #112	@ 0x70
 810d83e:	d87b      	bhi.n	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d840:	2b60      	cmp	r3, #96	@ 0x60
 810d842:	d050      	beq.n	810d8e6 <HAL_TIM_ConfigClockSource+0x16e>
 810d844:	2b60      	cmp	r3, #96	@ 0x60
 810d846:	d877      	bhi.n	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d848:	2b50      	cmp	r3, #80	@ 0x50
 810d84a:	d03c      	beq.n	810d8c6 <HAL_TIM_ConfigClockSource+0x14e>
 810d84c:	2b50      	cmp	r3, #80	@ 0x50
 810d84e:	d873      	bhi.n	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d850:	2b40      	cmp	r3, #64	@ 0x40
 810d852:	d058      	beq.n	810d906 <HAL_TIM_ConfigClockSource+0x18e>
 810d854:	2b40      	cmp	r3, #64	@ 0x40
 810d856:	d86f      	bhi.n	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d858:	2b30      	cmp	r3, #48	@ 0x30
 810d85a:	d064      	beq.n	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d85c:	2b30      	cmp	r3, #48	@ 0x30
 810d85e:	d86b      	bhi.n	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d860:	2b20      	cmp	r3, #32
 810d862:	d060      	beq.n	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d864:	2b20      	cmp	r3, #32
 810d866:	d867      	bhi.n	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
 810d868:	2b00      	cmp	r3, #0
 810d86a:	d05c      	beq.n	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d86c:	2b10      	cmp	r3, #16
 810d86e:	d05a      	beq.n	810d926 <HAL_TIM_ConfigClockSource+0x1ae>
 810d870:	e062      	b.n	810d938 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810d872:	687b      	ldr	r3, [r7, #4]
 810d874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810d876:	683b      	ldr	r3, [r7, #0]
 810d878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810d87a:	683b      	ldr	r3, [r7, #0]
 810d87c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810d87e:	683b      	ldr	r3, [r7, #0]
 810d880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810d882:	f000 fc91 	bl	810e1a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810d886:	687b      	ldr	r3, [r7, #4]
 810d888:	681b      	ldr	r3, [r3, #0]
 810d88a:	689b      	ldr	r3, [r3, #8]
 810d88c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810d88e:	68bb      	ldr	r3, [r7, #8]
 810d890:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810d894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810d896:	687b      	ldr	r3, [r7, #4]
 810d898:	681b      	ldr	r3, [r3, #0]
 810d89a:	68ba      	ldr	r2, [r7, #8]
 810d89c:	609a      	str	r2, [r3, #8]
      break;
 810d89e:	e04f      	b.n	810d940 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810d8a0:	687b      	ldr	r3, [r7, #4]
 810d8a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810d8a4:	683b      	ldr	r3, [r7, #0]
 810d8a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810d8a8:	683b      	ldr	r3, [r7, #0]
 810d8aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810d8ac:	683b      	ldr	r3, [r7, #0]
 810d8ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810d8b0:	f000 fc7a 	bl	810e1a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810d8b4:	687b      	ldr	r3, [r7, #4]
 810d8b6:	681b      	ldr	r3, [r3, #0]
 810d8b8:	689a      	ldr	r2, [r3, #8]
 810d8ba:	687b      	ldr	r3, [r7, #4]
 810d8bc:	681b      	ldr	r3, [r3, #0]
 810d8be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810d8c2:	609a      	str	r2, [r3, #8]
      break;
 810d8c4:	e03c      	b.n	810d940 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810d8c6:	687b      	ldr	r3, [r7, #4]
 810d8c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810d8ca:	683b      	ldr	r3, [r7, #0]
 810d8cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810d8ce:	683b      	ldr	r3, [r7, #0]
 810d8d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810d8d2:	461a      	mov	r2, r3
 810d8d4:	f000 fbec 	bl	810e0b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810d8d8:	687b      	ldr	r3, [r7, #4]
 810d8da:	681b      	ldr	r3, [r3, #0]
 810d8dc:	2150      	movs	r1, #80	@ 0x50
 810d8de:	4618      	mov	r0, r3
 810d8e0:	f000 fc45 	bl	810e16e <TIM_ITRx_SetConfig>
      break;
 810d8e4:	e02c      	b.n	810d940 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810d8e6:	687b      	ldr	r3, [r7, #4]
 810d8e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810d8ea:	683b      	ldr	r3, [r7, #0]
 810d8ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810d8ee:	683b      	ldr	r3, [r7, #0]
 810d8f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810d8f2:	461a      	mov	r2, r3
 810d8f4:	f000 fc0b 	bl	810e10e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810d8f8:	687b      	ldr	r3, [r7, #4]
 810d8fa:	681b      	ldr	r3, [r3, #0]
 810d8fc:	2160      	movs	r1, #96	@ 0x60
 810d8fe:	4618      	mov	r0, r3
 810d900:	f000 fc35 	bl	810e16e <TIM_ITRx_SetConfig>
      break;
 810d904:	e01c      	b.n	810d940 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810d906:	687b      	ldr	r3, [r7, #4]
 810d908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810d90a:	683b      	ldr	r3, [r7, #0]
 810d90c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810d90e:	683b      	ldr	r3, [r7, #0]
 810d910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810d912:	461a      	mov	r2, r3
 810d914:	f000 fbcc 	bl	810e0b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810d918:	687b      	ldr	r3, [r7, #4]
 810d91a:	681b      	ldr	r3, [r3, #0]
 810d91c:	2140      	movs	r1, #64	@ 0x40
 810d91e:	4618      	mov	r0, r3
 810d920:	f000 fc25 	bl	810e16e <TIM_ITRx_SetConfig>
      break;
 810d924:	e00c      	b.n	810d940 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810d926:	687b      	ldr	r3, [r7, #4]
 810d928:	681a      	ldr	r2, [r3, #0]
 810d92a:	683b      	ldr	r3, [r7, #0]
 810d92c:	681b      	ldr	r3, [r3, #0]
 810d92e:	4619      	mov	r1, r3
 810d930:	4610      	mov	r0, r2
 810d932:	f000 fc1c 	bl	810e16e <TIM_ITRx_SetConfig>
      break;
 810d936:	e003      	b.n	810d940 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810d938:	2301      	movs	r3, #1
 810d93a:	73fb      	strb	r3, [r7, #15]
      break;
 810d93c:	e000      	b.n	810d940 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810d93e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810d940:	687b      	ldr	r3, [r7, #4]
 810d942:	2201      	movs	r2, #1
 810d944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810d948:	687b      	ldr	r3, [r7, #4]
 810d94a:	2200      	movs	r2, #0
 810d94c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810d950:	7bfb      	ldrb	r3, [r7, #15]
}
 810d952:	4618      	mov	r0, r3
 810d954:	3710      	adds	r7, #16
 810d956:	46bd      	mov	sp, r7
 810d958:	bd80      	pop	{r7, pc}
 810d95a:	bf00      	nop
 810d95c:	00100040 	.word	0x00100040
 810d960:	00100030 	.word	0x00100030
 810d964:	00100020 	.word	0x00100020

0810d968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810d968:	b480      	push	{r7}
 810d96a:	b083      	sub	sp, #12
 810d96c:	af00      	add	r7, sp, #0
 810d96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810d970:	bf00      	nop
 810d972:	370c      	adds	r7, #12
 810d974:	46bd      	mov	sp, r7
 810d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d97a:	4770      	bx	lr

0810d97c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810d97c:	b480      	push	{r7}
 810d97e:	b083      	sub	sp, #12
 810d980:	af00      	add	r7, sp, #0
 810d982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810d984:	bf00      	nop
 810d986:	370c      	adds	r7, #12
 810d988:	46bd      	mov	sp, r7
 810d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d98e:	4770      	bx	lr

0810d990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810d990:	b480      	push	{r7}
 810d992:	b083      	sub	sp, #12
 810d994:	af00      	add	r7, sp, #0
 810d996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810d998:	bf00      	nop
 810d99a:	370c      	adds	r7, #12
 810d99c:	46bd      	mov	sp, r7
 810d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9a2:	4770      	bx	lr

0810d9a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810d9a4:	b480      	push	{r7}
 810d9a6:	b083      	sub	sp, #12
 810d9a8:	af00      	add	r7, sp, #0
 810d9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810d9ac:	bf00      	nop
 810d9ae:	370c      	adds	r7, #12
 810d9b0:	46bd      	mov	sp, r7
 810d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9b6:	4770      	bx	lr

0810d9b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810d9b8:	b480      	push	{r7}
 810d9ba:	b085      	sub	sp, #20
 810d9bc:	af00      	add	r7, sp, #0
 810d9be:	6078      	str	r0, [r7, #4]
 810d9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810d9c2:	687b      	ldr	r3, [r7, #4]
 810d9c4:	681b      	ldr	r3, [r3, #0]
 810d9c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810d9c8:	687b      	ldr	r3, [r7, #4]
 810d9ca:	4a46      	ldr	r2, [pc, #280]	@ (810dae4 <TIM_Base_SetConfig+0x12c>)
 810d9cc:	4293      	cmp	r3, r2
 810d9ce:	d013      	beq.n	810d9f8 <TIM_Base_SetConfig+0x40>
 810d9d0:	687b      	ldr	r3, [r7, #4]
 810d9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d9d6:	d00f      	beq.n	810d9f8 <TIM_Base_SetConfig+0x40>
 810d9d8:	687b      	ldr	r3, [r7, #4]
 810d9da:	4a43      	ldr	r2, [pc, #268]	@ (810dae8 <TIM_Base_SetConfig+0x130>)
 810d9dc:	4293      	cmp	r3, r2
 810d9de:	d00b      	beq.n	810d9f8 <TIM_Base_SetConfig+0x40>
 810d9e0:	687b      	ldr	r3, [r7, #4]
 810d9e2:	4a42      	ldr	r2, [pc, #264]	@ (810daec <TIM_Base_SetConfig+0x134>)
 810d9e4:	4293      	cmp	r3, r2
 810d9e6:	d007      	beq.n	810d9f8 <TIM_Base_SetConfig+0x40>
 810d9e8:	687b      	ldr	r3, [r7, #4]
 810d9ea:	4a41      	ldr	r2, [pc, #260]	@ (810daf0 <TIM_Base_SetConfig+0x138>)
 810d9ec:	4293      	cmp	r3, r2
 810d9ee:	d003      	beq.n	810d9f8 <TIM_Base_SetConfig+0x40>
 810d9f0:	687b      	ldr	r3, [r7, #4]
 810d9f2:	4a40      	ldr	r2, [pc, #256]	@ (810daf4 <TIM_Base_SetConfig+0x13c>)
 810d9f4:	4293      	cmp	r3, r2
 810d9f6:	d108      	bne.n	810da0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810d9f8:	68fb      	ldr	r3, [r7, #12]
 810d9fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810d9fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810da00:	683b      	ldr	r3, [r7, #0]
 810da02:	685b      	ldr	r3, [r3, #4]
 810da04:	68fa      	ldr	r2, [r7, #12]
 810da06:	4313      	orrs	r3, r2
 810da08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810da0a:	687b      	ldr	r3, [r7, #4]
 810da0c:	4a35      	ldr	r2, [pc, #212]	@ (810dae4 <TIM_Base_SetConfig+0x12c>)
 810da0e:	4293      	cmp	r3, r2
 810da10:	d01f      	beq.n	810da52 <TIM_Base_SetConfig+0x9a>
 810da12:	687b      	ldr	r3, [r7, #4]
 810da14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810da18:	d01b      	beq.n	810da52 <TIM_Base_SetConfig+0x9a>
 810da1a:	687b      	ldr	r3, [r7, #4]
 810da1c:	4a32      	ldr	r2, [pc, #200]	@ (810dae8 <TIM_Base_SetConfig+0x130>)
 810da1e:	4293      	cmp	r3, r2
 810da20:	d017      	beq.n	810da52 <TIM_Base_SetConfig+0x9a>
 810da22:	687b      	ldr	r3, [r7, #4]
 810da24:	4a31      	ldr	r2, [pc, #196]	@ (810daec <TIM_Base_SetConfig+0x134>)
 810da26:	4293      	cmp	r3, r2
 810da28:	d013      	beq.n	810da52 <TIM_Base_SetConfig+0x9a>
 810da2a:	687b      	ldr	r3, [r7, #4]
 810da2c:	4a30      	ldr	r2, [pc, #192]	@ (810daf0 <TIM_Base_SetConfig+0x138>)
 810da2e:	4293      	cmp	r3, r2
 810da30:	d00f      	beq.n	810da52 <TIM_Base_SetConfig+0x9a>
 810da32:	687b      	ldr	r3, [r7, #4]
 810da34:	4a2f      	ldr	r2, [pc, #188]	@ (810daf4 <TIM_Base_SetConfig+0x13c>)
 810da36:	4293      	cmp	r3, r2
 810da38:	d00b      	beq.n	810da52 <TIM_Base_SetConfig+0x9a>
 810da3a:	687b      	ldr	r3, [r7, #4]
 810da3c:	4a2e      	ldr	r2, [pc, #184]	@ (810daf8 <TIM_Base_SetConfig+0x140>)
 810da3e:	4293      	cmp	r3, r2
 810da40:	d007      	beq.n	810da52 <TIM_Base_SetConfig+0x9a>
 810da42:	687b      	ldr	r3, [r7, #4]
 810da44:	4a2d      	ldr	r2, [pc, #180]	@ (810dafc <TIM_Base_SetConfig+0x144>)
 810da46:	4293      	cmp	r3, r2
 810da48:	d003      	beq.n	810da52 <TIM_Base_SetConfig+0x9a>
 810da4a:	687b      	ldr	r3, [r7, #4]
 810da4c:	4a2c      	ldr	r2, [pc, #176]	@ (810db00 <TIM_Base_SetConfig+0x148>)
 810da4e:	4293      	cmp	r3, r2
 810da50:	d108      	bne.n	810da64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810da52:	68fb      	ldr	r3, [r7, #12]
 810da54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810da58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810da5a:	683b      	ldr	r3, [r7, #0]
 810da5c:	68db      	ldr	r3, [r3, #12]
 810da5e:	68fa      	ldr	r2, [r7, #12]
 810da60:	4313      	orrs	r3, r2
 810da62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810da64:	68fb      	ldr	r3, [r7, #12]
 810da66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810da6a:	683b      	ldr	r3, [r7, #0]
 810da6c:	695b      	ldr	r3, [r3, #20]
 810da6e:	4313      	orrs	r3, r2
 810da70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810da72:	687b      	ldr	r3, [r7, #4]
 810da74:	68fa      	ldr	r2, [r7, #12]
 810da76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810da78:	683b      	ldr	r3, [r7, #0]
 810da7a:	689a      	ldr	r2, [r3, #8]
 810da7c:	687b      	ldr	r3, [r7, #4]
 810da7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810da80:	683b      	ldr	r3, [r7, #0]
 810da82:	681a      	ldr	r2, [r3, #0]
 810da84:	687b      	ldr	r3, [r7, #4]
 810da86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810da88:	687b      	ldr	r3, [r7, #4]
 810da8a:	4a16      	ldr	r2, [pc, #88]	@ (810dae4 <TIM_Base_SetConfig+0x12c>)
 810da8c:	4293      	cmp	r3, r2
 810da8e:	d00f      	beq.n	810dab0 <TIM_Base_SetConfig+0xf8>
 810da90:	687b      	ldr	r3, [r7, #4]
 810da92:	4a18      	ldr	r2, [pc, #96]	@ (810daf4 <TIM_Base_SetConfig+0x13c>)
 810da94:	4293      	cmp	r3, r2
 810da96:	d00b      	beq.n	810dab0 <TIM_Base_SetConfig+0xf8>
 810da98:	687b      	ldr	r3, [r7, #4]
 810da9a:	4a17      	ldr	r2, [pc, #92]	@ (810daf8 <TIM_Base_SetConfig+0x140>)
 810da9c:	4293      	cmp	r3, r2
 810da9e:	d007      	beq.n	810dab0 <TIM_Base_SetConfig+0xf8>
 810daa0:	687b      	ldr	r3, [r7, #4]
 810daa2:	4a16      	ldr	r2, [pc, #88]	@ (810dafc <TIM_Base_SetConfig+0x144>)
 810daa4:	4293      	cmp	r3, r2
 810daa6:	d003      	beq.n	810dab0 <TIM_Base_SetConfig+0xf8>
 810daa8:	687b      	ldr	r3, [r7, #4]
 810daaa:	4a15      	ldr	r2, [pc, #84]	@ (810db00 <TIM_Base_SetConfig+0x148>)
 810daac:	4293      	cmp	r3, r2
 810daae:	d103      	bne.n	810dab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810dab0:	683b      	ldr	r3, [r7, #0]
 810dab2:	691a      	ldr	r2, [r3, #16]
 810dab4:	687b      	ldr	r3, [r7, #4]
 810dab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810dab8:	687b      	ldr	r3, [r7, #4]
 810daba:	2201      	movs	r2, #1
 810dabc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810dabe:	687b      	ldr	r3, [r7, #4]
 810dac0:	691b      	ldr	r3, [r3, #16]
 810dac2:	f003 0301 	and.w	r3, r3, #1
 810dac6:	2b01      	cmp	r3, #1
 810dac8:	d105      	bne.n	810dad6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810daca:	687b      	ldr	r3, [r7, #4]
 810dacc:	691b      	ldr	r3, [r3, #16]
 810dace:	f023 0201 	bic.w	r2, r3, #1
 810dad2:	687b      	ldr	r3, [r7, #4]
 810dad4:	611a      	str	r2, [r3, #16]
  }
}
 810dad6:	bf00      	nop
 810dad8:	3714      	adds	r7, #20
 810dada:	46bd      	mov	sp, r7
 810dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dae0:	4770      	bx	lr
 810dae2:	bf00      	nop
 810dae4:	40010000 	.word	0x40010000
 810dae8:	40000400 	.word	0x40000400
 810daec:	40000800 	.word	0x40000800
 810daf0:	40000c00 	.word	0x40000c00
 810daf4:	40010400 	.word	0x40010400
 810daf8:	40014000 	.word	0x40014000
 810dafc:	40014400 	.word	0x40014400
 810db00:	40014800 	.word	0x40014800

0810db04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810db04:	b480      	push	{r7}
 810db06:	b087      	sub	sp, #28
 810db08:	af00      	add	r7, sp, #0
 810db0a:	6078      	str	r0, [r7, #4]
 810db0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810db0e:	687b      	ldr	r3, [r7, #4]
 810db10:	6a1b      	ldr	r3, [r3, #32]
 810db12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810db14:	687b      	ldr	r3, [r7, #4]
 810db16:	6a1b      	ldr	r3, [r3, #32]
 810db18:	f023 0201 	bic.w	r2, r3, #1
 810db1c:	687b      	ldr	r3, [r7, #4]
 810db1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810db20:	687b      	ldr	r3, [r7, #4]
 810db22:	685b      	ldr	r3, [r3, #4]
 810db24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810db26:	687b      	ldr	r3, [r7, #4]
 810db28:	699b      	ldr	r3, [r3, #24]
 810db2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810db2c:	68fb      	ldr	r3, [r7, #12]
 810db2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810db32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810db36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810db38:	68fb      	ldr	r3, [r7, #12]
 810db3a:	f023 0303 	bic.w	r3, r3, #3
 810db3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810db40:	683b      	ldr	r3, [r7, #0]
 810db42:	681b      	ldr	r3, [r3, #0]
 810db44:	68fa      	ldr	r2, [r7, #12]
 810db46:	4313      	orrs	r3, r2
 810db48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810db4a:	697b      	ldr	r3, [r7, #20]
 810db4c:	f023 0302 	bic.w	r3, r3, #2
 810db50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810db52:	683b      	ldr	r3, [r7, #0]
 810db54:	689b      	ldr	r3, [r3, #8]
 810db56:	697a      	ldr	r2, [r7, #20]
 810db58:	4313      	orrs	r3, r2
 810db5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810db5c:	687b      	ldr	r3, [r7, #4]
 810db5e:	4a2c      	ldr	r2, [pc, #176]	@ (810dc10 <TIM_OC1_SetConfig+0x10c>)
 810db60:	4293      	cmp	r3, r2
 810db62:	d00f      	beq.n	810db84 <TIM_OC1_SetConfig+0x80>
 810db64:	687b      	ldr	r3, [r7, #4]
 810db66:	4a2b      	ldr	r2, [pc, #172]	@ (810dc14 <TIM_OC1_SetConfig+0x110>)
 810db68:	4293      	cmp	r3, r2
 810db6a:	d00b      	beq.n	810db84 <TIM_OC1_SetConfig+0x80>
 810db6c:	687b      	ldr	r3, [r7, #4]
 810db6e:	4a2a      	ldr	r2, [pc, #168]	@ (810dc18 <TIM_OC1_SetConfig+0x114>)
 810db70:	4293      	cmp	r3, r2
 810db72:	d007      	beq.n	810db84 <TIM_OC1_SetConfig+0x80>
 810db74:	687b      	ldr	r3, [r7, #4]
 810db76:	4a29      	ldr	r2, [pc, #164]	@ (810dc1c <TIM_OC1_SetConfig+0x118>)
 810db78:	4293      	cmp	r3, r2
 810db7a:	d003      	beq.n	810db84 <TIM_OC1_SetConfig+0x80>
 810db7c:	687b      	ldr	r3, [r7, #4]
 810db7e:	4a28      	ldr	r2, [pc, #160]	@ (810dc20 <TIM_OC1_SetConfig+0x11c>)
 810db80:	4293      	cmp	r3, r2
 810db82:	d10c      	bne.n	810db9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810db84:	697b      	ldr	r3, [r7, #20]
 810db86:	f023 0308 	bic.w	r3, r3, #8
 810db8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810db8c:	683b      	ldr	r3, [r7, #0]
 810db8e:	68db      	ldr	r3, [r3, #12]
 810db90:	697a      	ldr	r2, [r7, #20]
 810db92:	4313      	orrs	r3, r2
 810db94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810db96:	697b      	ldr	r3, [r7, #20]
 810db98:	f023 0304 	bic.w	r3, r3, #4
 810db9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810db9e:	687b      	ldr	r3, [r7, #4]
 810dba0:	4a1b      	ldr	r2, [pc, #108]	@ (810dc10 <TIM_OC1_SetConfig+0x10c>)
 810dba2:	4293      	cmp	r3, r2
 810dba4:	d00f      	beq.n	810dbc6 <TIM_OC1_SetConfig+0xc2>
 810dba6:	687b      	ldr	r3, [r7, #4]
 810dba8:	4a1a      	ldr	r2, [pc, #104]	@ (810dc14 <TIM_OC1_SetConfig+0x110>)
 810dbaa:	4293      	cmp	r3, r2
 810dbac:	d00b      	beq.n	810dbc6 <TIM_OC1_SetConfig+0xc2>
 810dbae:	687b      	ldr	r3, [r7, #4]
 810dbb0:	4a19      	ldr	r2, [pc, #100]	@ (810dc18 <TIM_OC1_SetConfig+0x114>)
 810dbb2:	4293      	cmp	r3, r2
 810dbb4:	d007      	beq.n	810dbc6 <TIM_OC1_SetConfig+0xc2>
 810dbb6:	687b      	ldr	r3, [r7, #4]
 810dbb8:	4a18      	ldr	r2, [pc, #96]	@ (810dc1c <TIM_OC1_SetConfig+0x118>)
 810dbba:	4293      	cmp	r3, r2
 810dbbc:	d003      	beq.n	810dbc6 <TIM_OC1_SetConfig+0xc2>
 810dbbe:	687b      	ldr	r3, [r7, #4]
 810dbc0:	4a17      	ldr	r2, [pc, #92]	@ (810dc20 <TIM_OC1_SetConfig+0x11c>)
 810dbc2:	4293      	cmp	r3, r2
 810dbc4:	d111      	bne.n	810dbea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810dbc6:	693b      	ldr	r3, [r7, #16]
 810dbc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810dbcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810dbce:	693b      	ldr	r3, [r7, #16]
 810dbd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810dbd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810dbd6:	683b      	ldr	r3, [r7, #0]
 810dbd8:	695b      	ldr	r3, [r3, #20]
 810dbda:	693a      	ldr	r2, [r7, #16]
 810dbdc:	4313      	orrs	r3, r2
 810dbde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810dbe0:	683b      	ldr	r3, [r7, #0]
 810dbe2:	699b      	ldr	r3, [r3, #24]
 810dbe4:	693a      	ldr	r2, [r7, #16]
 810dbe6:	4313      	orrs	r3, r2
 810dbe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810dbea:	687b      	ldr	r3, [r7, #4]
 810dbec:	693a      	ldr	r2, [r7, #16]
 810dbee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810dbf0:	687b      	ldr	r3, [r7, #4]
 810dbf2:	68fa      	ldr	r2, [r7, #12]
 810dbf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810dbf6:	683b      	ldr	r3, [r7, #0]
 810dbf8:	685a      	ldr	r2, [r3, #4]
 810dbfa:	687b      	ldr	r3, [r7, #4]
 810dbfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810dbfe:	687b      	ldr	r3, [r7, #4]
 810dc00:	697a      	ldr	r2, [r7, #20]
 810dc02:	621a      	str	r2, [r3, #32]
}
 810dc04:	bf00      	nop
 810dc06:	371c      	adds	r7, #28
 810dc08:	46bd      	mov	sp, r7
 810dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc0e:	4770      	bx	lr
 810dc10:	40010000 	.word	0x40010000
 810dc14:	40010400 	.word	0x40010400
 810dc18:	40014000 	.word	0x40014000
 810dc1c:	40014400 	.word	0x40014400
 810dc20:	40014800 	.word	0x40014800

0810dc24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810dc24:	b480      	push	{r7}
 810dc26:	b087      	sub	sp, #28
 810dc28:	af00      	add	r7, sp, #0
 810dc2a:	6078      	str	r0, [r7, #4]
 810dc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810dc2e:	687b      	ldr	r3, [r7, #4]
 810dc30:	6a1b      	ldr	r3, [r3, #32]
 810dc32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810dc34:	687b      	ldr	r3, [r7, #4]
 810dc36:	6a1b      	ldr	r3, [r3, #32]
 810dc38:	f023 0210 	bic.w	r2, r3, #16
 810dc3c:	687b      	ldr	r3, [r7, #4]
 810dc3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810dc40:	687b      	ldr	r3, [r7, #4]
 810dc42:	685b      	ldr	r3, [r3, #4]
 810dc44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810dc46:	687b      	ldr	r3, [r7, #4]
 810dc48:	699b      	ldr	r3, [r3, #24]
 810dc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810dc4c:	68fb      	ldr	r3, [r7, #12]
 810dc4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810dc52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810dc56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810dc58:	68fb      	ldr	r3, [r7, #12]
 810dc5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810dc5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810dc60:	683b      	ldr	r3, [r7, #0]
 810dc62:	681b      	ldr	r3, [r3, #0]
 810dc64:	021b      	lsls	r3, r3, #8
 810dc66:	68fa      	ldr	r2, [r7, #12]
 810dc68:	4313      	orrs	r3, r2
 810dc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810dc6c:	697b      	ldr	r3, [r7, #20]
 810dc6e:	f023 0320 	bic.w	r3, r3, #32
 810dc72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810dc74:	683b      	ldr	r3, [r7, #0]
 810dc76:	689b      	ldr	r3, [r3, #8]
 810dc78:	011b      	lsls	r3, r3, #4
 810dc7a:	697a      	ldr	r2, [r7, #20]
 810dc7c:	4313      	orrs	r3, r2
 810dc7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810dc80:	687b      	ldr	r3, [r7, #4]
 810dc82:	4a28      	ldr	r2, [pc, #160]	@ (810dd24 <TIM_OC2_SetConfig+0x100>)
 810dc84:	4293      	cmp	r3, r2
 810dc86:	d003      	beq.n	810dc90 <TIM_OC2_SetConfig+0x6c>
 810dc88:	687b      	ldr	r3, [r7, #4]
 810dc8a:	4a27      	ldr	r2, [pc, #156]	@ (810dd28 <TIM_OC2_SetConfig+0x104>)
 810dc8c:	4293      	cmp	r3, r2
 810dc8e:	d10d      	bne.n	810dcac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810dc90:	697b      	ldr	r3, [r7, #20]
 810dc92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810dc96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810dc98:	683b      	ldr	r3, [r7, #0]
 810dc9a:	68db      	ldr	r3, [r3, #12]
 810dc9c:	011b      	lsls	r3, r3, #4
 810dc9e:	697a      	ldr	r2, [r7, #20]
 810dca0:	4313      	orrs	r3, r2
 810dca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810dca4:	697b      	ldr	r3, [r7, #20]
 810dca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810dcaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810dcac:	687b      	ldr	r3, [r7, #4]
 810dcae:	4a1d      	ldr	r2, [pc, #116]	@ (810dd24 <TIM_OC2_SetConfig+0x100>)
 810dcb0:	4293      	cmp	r3, r2
 810dcb2:	d00f      	beq.n	810dcd4 <TIM_OC2_SetConfig+0xb0>
 810dcb4:	687b      	ldr	r3, [r7, #4]
 810dcb6:	4a1c      	ldr	r2, [pc, #112]	@ (810dd28 <TIM_OC2_SetConfig+0x104>)
 810dcb8:	4293      	cmp	r3, r2
 810dcba:	d00b      	beq.n	810dcd4 <TIM_OC2_SetConfig+0xb0>
 810dcbc:	687b      	ldr	r3, [r7, #4]
 810dcbe:	4a1b      	ldr	r2, [pc, #108]	@ (810dd2c <TIM_OC2_SetConfig+0x108>)
 810dcc0:	4293      	cmp	r3, r2
 810dcc2:	d007      	beq.n	810dcd4 <TIM_OC2_SetConfig+0xb0>
 810dcc4:	687b      	ldr	r3, [r7, #4]
 810dcc6:	4a1a      	ldr	r2, [pc, #104]	@ (810dd30 <TIM_OC2_SetConfig+0x10c>)
 810dcc8:	4293      	cmp	r3, r2
 810dcca:	d003      	beq.n	810dcd4 <TIM_OC2_SetConfig+0xb0>
 810dccc:	687b      	ldr	r3, [r7, #4]
 810dcce:	4a19      	ldr	r2, [pc, #100]	@ (810dd34 <TIM_OC2_SetConfig+0x110>)
 810dcd0:	4293      	cmp	r3, r2
 810dcd2:	d113      	bne.n	810dcfc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810dcd4:	693b      	ldr	r3, [r7, #16]
 810dcd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810dcda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810dcdc:	693b      	ldr	r3, [r7, #16]
 810dcde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810dce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810dce4:	683b      	ldr	r3, [r7, #0]
 810dce6:	695b      	ldr	r3, [r3, #20]
 810dce8:	009b      	lsls	r3, r3, #2
 810dcea:	693a      	ldr	r2, [r7, #16]
 810dcec:	4313      	orrs	r3, r2
 810dcee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810dcf0:	683b      	ldr	r3, [r7, #0]
 810dcf2:	699b      	ldr	r3, [r3, #24]
 810dcf4:	009b      	lsls	r3, r3, #2
 810dcf6:	693a      	ldr	r2, [r7, #16]
 810dcf8:	4313      	orrs	r3, r2
 810dcfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810dcfc:	687b      	ldr	r3, [r7, #4]
 810dcfe:	693a      	ldr	r2, [r7, #16]
 810dd00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810dd02:	687b      	ldr	r3, [r7, #4]
 810dd04:	68fa      	ldr	r2, [r7, #12]
 810dd06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810dd08:	683b      	ldr	r3, [r7, #0]
 810dd0a:	685a      	ldr	r2, [r3, #4]
 810dd0c:	687b      	ldr	r3, [r7, #4]
 810dd0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810dd10:	687b      	ldr	r3, [r7, #4]
 810dd12:	697a      	ldr	r2, [r7, #20]
 810dd14:	621a      	str	r2, [r3, #32]
}
 810dd16:	bf00      	nop
 810dd18:	371c      	adds	r7, #28
 810dd1a:	46bd      	mov	sp, r7
 810dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd20:	4770      	bx	lr
 810dd22:	bf00      	nop
 810dd24:	40010000 	.word	0x40010000
 810dd28:	40010400 	.word	0x40010400
 810dd2c:	40014000 	.word	0x40014000
 810dd30:	40014400 	.word	0x40014400
 810dd34:	40014800 	.word	0x40014800

0810dd38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810dd38:	b480      	push	{r7}
 810dd3a:	b087      	sub	sp, #28
 810dd3c:	af00      	add	r7, sp, #0
 810dd3e:	6078      	str	r0, [r7, #4]
 810dd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810dd42:	687b      	ldr	r3, [r7, #4]
 810dd44:	6a1b      	ldr	r3, [r3, #32]
 810dd46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810dd48:	687b      	ldr	r3, [r7, #4]
 810dd4a:	6a1b      	ldr	r3, [r3, #32]
 810dd4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810dd50:	687b      	ldr	r3, [r7, #4]
 810dd52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810dd54:	687b      	ldr	r3, [r7, #4]
 810dd56:	685b      	ldr	r3, [r3, #4]
 810dd58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810dd5a:	687b      	ldr	r3, [r7, #4]
 810dd5c:	69db      	ldr	r3, [r3, #28]
 810dd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810dd60:	68fb      	ldr	r3, [r7, #12]
 810dd62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810dd66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810dd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810dd6c:	68fb      	ldr	r3, [r7, #12]
 810dd6e:	f023 0303 	bic.w	r3, r3, #3
 810dd72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810dd74:	683b      	ldr	r3, [r7, #0]
 810dd76:	681b      	ldr	r3, [r3, #0]
 810dd78:	68fa      	ldr	r2, [r7, #12]
 810dd7a:	4313      	orrs	r3, r2
 810dd7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810dd7e:	697b      	ldr	r3, [r7, #20]
 810dd80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810dd84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810dd86:	683b      	ldr	r3, [r7, #0]
 810dd88:	689b      	ldr	r3, [r3, #8]
 810dd8a:	021b      	lsls	r3, r3, #8
 810dd8c:	697a      	ldr	r2, [r7, #20]
 810dd8e:	4313      	orrs	r3, r2
 810dd90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810dd92:	687b      	ldr	r3, [r7, #4]
 810dd94:	4a27      	ldr	r2, [pc, #156]	@ (810de34 <TIM_OC3_SetConfig+0xfc>)
 810dd96:	4293      	cmp	r3, r2
 810dd98:	d003      	beq.n	810dda2 <TIM_OC3_SetConfig+0x6a>
 810dd9a:	687b      	ldr	r3, [r7, #4]
 810dd9c:	4a26      	ldr	r2, [pc, #152]	@ (810de38 <TIM_OC3_SetConfig+0x100>)
 810dd9e:	4293      	cmp	r3, r2
 810dda0:	d10d      	bne.n	810ddbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810dda2:	697b      	ldr	r3, [r7, #20]
 810dda4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810dda8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810ddaa:	683b      	ldr	r3, [r7, #0]
 810ddac:	68db      	ldr	r3, [r3, #12]
 810ddae:	021b      	lsls	r3, r3, #8
 810ddb0:	697a      	ldr	r2, [r7, #20]
 810ddb2:	4313      	orrs	r3, r2
 810ddb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810ddb6:	697b      	ldr	r3, [r7, #20]
 810ddb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810ddbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ddbe:	687b      	ldr	r3, [r7, #4]
 810ddc0:	4a1c      	ldr	r2, [pc, #112]	@ (810de34 <TIM_OC3_SetConfig+0xfc>)
 810ddc2:	4293      	cmp	r3, r2
 810ddc4:	d00f      	beq.n	810dde6 <TIM_OC3_SetConfig+0xae>
 810ddc6:	687b      	ldr	r3, [r7, #4]
 810ddc8:	4a1b      	ldr	r2, [pc, #108]	@ (810de38 <TIM_OC3_SetConfig+0x100>)
 810ddca:	4293      	cmp	r3, r2
 810ddcc:	d00b      	beq.n	810dde6 <TIM_OC3_SetConfig+0xae>
 810ddce:	687b      	ldr	r3, [r7, #4]
 810ddd0:	4a1a      	ldr	r2, [pc, #104]	@ (810de3c <TIM_OC3_SetConfig+0x104>)
 810ddd2:	4293      	cmp	r3, r2
 810ddd4:	d007      	beq.n	810dde6 <TIM_OC3_SetConfig+0xae>
 810ddd6:	687b      	ldr	r3, [r7, #4]
 810ddd8:	4a19      	ldr	r2, [pc, #100]	@ (810de40 <TIM_OC3_SetConfig+0x108>)
 810ddda:	4293      	cmp	r3, r2
 810dddc:	d003      	beq.n	810dde6 <TIM_OC3_SetConfig+0xae>
 810ddde:	687b      	ldr	r3, [r7, #4]
 810dde0:	4a18      	ldr	r2, [pc, #96]	@ (810de44 <TIM_OC3_SetConfig+0x10c>)
 810dde2:	4293      	cmp	r3, r2
 810dde4:	d113      	bne.n	810de0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810dde6:	693b      	ldr	r3, [r7, #16]
 810dde8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810ddec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810ddee:	693b      	ldr	r3, [r7, #16]
 810ddf0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810ddf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810ddf6:	683b      	ldr	r3, [r7, #0]
 810ddf8:	695b      	ldr	r3, [r3, #20]
 810ddfa:	011b      	lsls	r3, r3, #4
 810ddfc:	693a      	ldr	r2, [r7, #16]
 810ddfe:	4313      	orrs	r3, r2
 810de00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810de02:	683b      	ldr	r3, [r7, #0]
 810de04:	699b      	ldr	r3, [r3, #24]
 810de06:	011b      	lsls	r3, r3, #4
 810de08:	693a      	ldr	r2, [r7, #16]
 810de0a:	4313      	orrs	r3, r2
 810de0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810de0e:	687b      	ldr	r3, [r7, #4]
 810de10:	693a      	ldr	r2, [r7, #16]
 810de12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810de14:	687b      	ldr	r3, [r7, #4]
 810de16:	68fa      	ldr	r2, [r7, #12]
 810de18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810de1a:	683b      	ldr	r3, [r7, #0]
 810de1c:	685a      	ldr	r2, [r3, #4]
 810de1e:	687b      	ldr	r3, [r7, #4]
 810de20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810de22:	687b      	ldr	r3, [r7, #4]
 810de24:	697a      	ldr	r2, [r7, #20]
 810de26:	621a      	str	r2, [r3, #32]
}
 810de28:	bf00      	nop
 810de2a:	371c      	adds	r7, #28
 810de2c:	46bd      	mov	sp, r7
 810de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de32:	4770      	bx	lr
 810de34:	40010000 	.word	0x40010000
 810de38:	40010400 	.word	0x40010400
 810de3c:	40014000 	.word	0x40014000
 810de40:	40014400 	.word	0x40014400
 810de44:	40014800 	.word	0x40014800

0810de48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810de48:	b480      	push	{r7}
 810de4a:	b087      	sub	sp, #28
 810de4c:	af00      	add	r7, sp, #0
 810de4e:	6078      	str	r0, [r7, #4]
 810de50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810de52:	687b      	ldr	r3, [r7, #4]
 810de54:	6a1b      	ldr	r3, [r3, #32]
 810de56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810de58:	687b      	ldr	r3, [r7, #4]
 810de5a:	6a1b      	ldr	r3, [r3, #32]
 810de5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810de60:	687b      	ldr	r3, [r7, #4]
 810de62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810de64:	687b      	ldr	r3, [r7, #4]
 810de66:	685b      	ldr	r3, [r3, #4]
 810de68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810de6a:	687b      	ldr	r3, [r7, #4]
 810de6c:	69db      	ldr	r3, [r3, #28]
 810de6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810de70:	68fb      	ldr	r3, [r7, #12]
 810de72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810de76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810de7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810de7c:	68fb      	ldr	r3, [r7, #12]
 810de7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810de82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810de84:	683b      	ldr	r3, [r7, #0]
 810de86:	681b      	ldr	r3, [r3, #0]
 810de88:	021b      	lsls	r3, r3, #8
 810de8a:	68fa      	ldr	r2, [r7, #12]
 810de8c:	4313      	orrs	r3, r2
 810de8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810de90:	693b      	ldr	r3, [r7, #16]
 810de92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810de96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810de98:	683b      	ldr	r3, [r7, #0]
 810de9a:	689b      	ldr	r3, [r3, #8]
 810de9c:	031b      	lsls	r3, r3, #12
 810de9e:	693a      	ldr	r2, [r7, #16]
 810dea0:	4313      	orrs	r3, r2
 810dea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810dea4:	687b      	ldr	r3, [r7, #4]
 810dea6:	4a18      	ldr	r2, [pc, #96]	@ (810df08 <TIM_OC4_SetConfig+0xc0>)
 810dea8:	4293      	cmp	r3, r2
 810deaa:	d00f      	beq.n	810decc <TIM_OC4_SetConfig+0x84>
 810deac:	687b      	ldr	r3, [r7, #4]
 810deae:	4a17      	ldr	r2, [pc, #92]	@ (810df0c <TIM_OC4_SetConfig+0xc4>)
 810deb0:	4293      	cmp	r3, r2
 810deb2:	d00b      	beq.n	810decc <TIM_OC4_SetConfig+0x84>
 810deb4:	687b      	ldr	r3, [r7, #4]
 810deb6:	4a16      	ldr	r2, [pc, #88]	@ (810df10 <TIM_OC4_SetConfig+0xc8>)
 810deb8:	4293      	cmp	r3, r2
 810deba:	d007      	beq.n	810decc <TIM_OC4_SetConfig+0x84>
 810debc:	687b      	ldr	r3, [r7, #4]
 810debe:	4a15      	ldr	r2, [pc, #84]	@ (810df14 <TIM_OC4_SetConfig+0xcc>)
 810dec0:	4293      	cmp	r3, r2
 810dec2:	d003      	beq.n	810decc <TIM_OC4_SetConfig+0x84>
 810dec4:	687b      	ldr	r3, [r7, #4]
 810dec6:	4a14      	ldr	r2, [pc, #80]	@ (810df18 <TIM_OC4_SetConfig+0xd0>)
 810dec8:	4293      	cmp	r3, r2
 810deca:	d109      	bne.n	810dee0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810decc:	697b      	ldr	r3, [r7, #20]
 810dece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810ded2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810ded4:	683b      	ldr	r3, [r7, #0]
 810ded6:	695b      	ldr	r3, [r3, #20]
 810ded8:	019b      	lsls	r3, r3, #6
 810deda:	697a      	ldr	r2, [r7, #20]
 810dedc:	4313      	orrs	r3, r2
 810dede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810dee0:	687b      	ldr	r3, [r7, #4]
 810dee2:	697a      	ldr	r2, [r7, #20]
 810dee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810dee6:	687b      	ldr	r3, [r7, #4]
 810dee8:	68fa      	ldr	r2, [r7, #12]
 810deea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810deec:	683b      	ldr	r3, [r7, #0]
 810deee:	685a      	ldr	r2, [r3, #4]
 810def0:	687b      	ldr	r3, [r7, #4]
 810def2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810def4:	687b      	ldr	r3, [r7, #4]
 810def6:	693a      	ldr	r2, [r7, #16]
 810def8:	621a      	str	r2, [r3, #32]
}
 810defa:	bf00      	nop
 810defc:	371c      	adds	r7, #28
 810defe:	46bd      	mov	sp, r7
 810df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df04:	4770      	bx	lr
 810df06:	bf00      	nop
 810df08:	40010000 	.word	0x40010000
 810df0c:	40010400 	.word	0x40010400
 810df10:	40014000 	.word	0x40014000
 810df14:	40014400 	.word	0x40014400
 810df18:	40014800 	.word	0x40014800

0810df1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810df1c:	b480      	push	{r7}
 810df1e:	b087      	sub	sp, #28
 810df20:	af00      	add	r7, sp, #0
 810df22:	6078      	str	r0, [r7, #4]
 810df24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810df26:	687b      	ldr	r3, [r7, #4]
 810df28:	6a1b      	ldr	r3, [r3, #32]
 810df2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810df2c:	687b      	ldr	r3, [r7, #4]
 810df2e:	6a1b      	ldr	r3, [r3, #32]
 810df30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810df34:	687b      	ldr	r3, [r7, #4]
 810df36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810df38:	687b      	ldr	r3, [r7, #4]
 810df3a:	685b      	ldr	r3, [r3, #4]
 810df3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810df3e:	687b      	ldr	r3, [r7, #4]
 810df40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810df42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810df44:	68fb      	ldr	r3, [r7, #12]
 810df46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810df4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810df4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810df50:	683b      	ldr	r3, [r7, #0]
 810df52:	681b      	ldr	r3, [r3, #0]
 810df54:	68fa      	ldr	r2, [r7, #12]
 810df56:	4313      	orrs	r3, r2
 810df58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810df5a:	693b      	ldr	r3, [r7, #16]
 810df5c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810df60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810df62:	683b      	ldr	r3, [r7, #0]
 810df64:	689b      	ldr	r3, [r3, #8]
 810df66:	041b      	lsls	r3, r3, #16
 810df68:	693a      	ldr	r2, [r7, #16]
 810df6a:	4313      	orrs	r3, r2
 810df6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810df6e:	687b      	ldr	r3, [r7, #4]
 810df70:	4a17      	ldr	r2, [pc, #92]	@ (810dfd0 <TIM_OC5_SetConfig+0xb4>)
 810df72:	4293      	cmp	r3, r2
 810df74:	d00f      	beq.n	810df96 <TIM_OC5_SetConfig+0x7a>
 810df76:	687b      	ldr	r3, [r7, #4]
 810df78:	4a16      	ldr	r2, [pc, #88]	@ (810dfd4 <TIM_OC5_SetConfig+0xb8>)
 810df7a:	4293      	cmp	r3, r2
 810df7c:	d00b      	beq.n	810df96 <TIM_OC5_SetConfig+0x7a>
 810df7e:	687b      	ldr	r3, [r7, #4]
 810df80:	4a15      	ldr	r2, [pc, #84]	@ (810dfd8 <TIM_OC5_SetConfig+0xbc>)
 810df82:	4293      	cmp	r3, r2
 810df84:	d007      	beq.n	810df96 <TIM_OC5_SetConfig+0x7a>
 810df86:	687b      	ldr	r3, [r7, #4]
 810df88:	4a14      	ldr	r2, [pc, #80]	@ (810dfdc <TIM_OC5_SetConfig+0xc0>)
 810df8a:	4293      	cmp	r3, r2
 810df8c:	d003      	beq.n	810df96 <TIM_OC5_SetConfig+0x7a>
 810df8e:	687b      	ldr	r3, [r7, #4]
 810df90:	4a13      	ldr	r2, [pc, #76]	@ (810dfe0 <TIM_OC5_SetConfig+0xc4>)
 810df92:	4293      	cmp	r3, r2
 810df94:	d109      	bne.n	810dfaa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810df96:	697b      	ldr	r3, [r7, #20]
 810df98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810df9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810df9e:	683b      	ldr	r3, [r7, #0]
 810dfa0:	695b      	ldr	r3, [r3, #20]
 810dfa2:	021b      	lsls	r3, r3, #8
 810dfa4:	697a      	ldr	r2, [r7, #20]
 810dfa6:	4313      	orrs	r3, r2
 810dfa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810dfaa:	687b      	ldr	r3, [r7, #4]
 810dfac:	697a      	ldr	r2, [r7, #20]
 810dfae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810dfb0:	687b      	ldr	r3, [r7, #4]
 810dfb2:	68fa      	ldr	r2, [r7, #12]
 810dfb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810dfb6:	683b      	ldr	r3, [r7, #0]
 810dfb8:	685a      	ldr	r2, [r3, #4]
 810dfba:	687b      	ldr	r3, [r7, #4]
 810dfbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810dfbe:	687b      	ldr	r3, [r7, #4]
 810dfc0:	693a      	ldr	r2, [r7, #16]
 810dfc2:	621a      	str	r2, [r3, #32]
}
 810dfc4:	bf00      	nop
 810dfc6:	371c      	adds	r7, #28
 810dfc8:	46bd      	mov	sp, r7
 810dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dfce:	4770      	bx	lr
 810dfd0:	40010000 	.word	0x40010000
 810dfd4:	40010400 	.word	0x40010400
 810dfd8:	40014000 	.word	0x40014000
 810dfdc:	40014400 	.word	0x40014400
 810dfe0:	40014800 	.word	0x40014800

0810dfe4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810dfe4:	b480      	push	{r7}
 810dfe6:	b087      	sub	sp, #28
 810dfe8:	af00      	add	r7, sp, #0
 810dfea:	6078      	str	r0, [r7, #4]
 810dfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810dfee:	687b      	ldr	r3, [r7, #4]
 810dff0:	6a1b      	ldr	r3, [r3, #32]
 810dff2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810dff4:	687b      	ldr	r3, [r7, #4]
 810dff6:	6a1b      	ldr	r3, [r3, #32]
 810dff8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810dffc:	687b      	ldr	r3, [r7, #4]
 810dffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810e000:	687b      	ldr	r3, [r7, #4]
 810e002:	685b      	ldr	r3, [r3, #4]
 810e004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810e006:	687b      	ldr	r3, [r7, #4]
 810e008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810e00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810e00c:	68fb      	ldr	r3, [r7, #12]
 810e00e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810e012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810e016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810e018:	683b      	ldr	r3, [r7, #0]
 810e01a:	681b      	ldr	r3, [r3, #0]
 810e01c:	021b      	lsls	r3, r3, #8
 810e01e:	68fa      	ldr	r2, [r7, #12]
 810e020:	4313      	orrs	r3, r2
 810e022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810e024:	693b      	ldr	r3, [r7, #16]
 810e026:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810e02a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810e02c:	683b      	ldr	r3, [r7, #0]
 810e02e:	689b      	ldr	r3, [r3, #8]
 810e030:	051b      	lsls	r3, r3, #20
 810e032:	693a      	ldr	r2, [r7, #16]
 810e034:	4313      	orrs	r3, r2
 810e036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810e038:	687b      	ldr	r3, [r7, #4]
 810e03a:	4a18      	ldr	r2, [pc, #96]	@ (810e09c <TIM_OC6_SetConfig+0xb8>)
 810e03c:	4293      	cmp	r3, r2
 810e03e:	d00f      	beq.n	810e060 <TIM_OC6_SetConfig+0x7c>
 810e040:	687b      	ldr	r3, [r7, #4]
 810e042:	4a17      	ldr	r2, [pc, #92]	@ (810e0a0 <TIM_OC6_SetConfig+0xbc>)
 810e044:	4293      	cmp	r3, r2
 810e046:	d00b      	beq.n	810e060 <TIM_OC6_SetConfig+0x7c>
 810e048:	687b      	ldr	r3, [r7, #4]
 810e04a:	4a16      	ldr	r2, [pc, #88]	@ (810e0a4 <TIM_OC6_SetConfig+0xc0>)
 810e04c:	4293      	cmp	r3, r2
 810e04e:	d007      	beq.n	810e060 <TIM_OC6_SetConfig+0x7c>
 810e050:	687b      	ldr	r3, [r7, #4]
 810e052:	4a15      	ldr	r2, [pc, #84]	@ (810e0a8 <TIM_OC6_SetConfig+0xc4>)
 810e054:	4293      	cmp	r3, r2
 810e056:	d003      	beq.n	810e060 <TIM_OC6_SetConfig+0x7c>
 810e058:	687b      	ldr	r3, [r7, #4]
 810e05a:	4a14      	ldr	r2, [pc, #80]	@ (810e0ac <TIM_OC6_SetConfig+0xc8>)
 810e05c:	4293      	cmp	r3, r2
 810e05e:	d109      	bne.n	810e074 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810e060:	697b      	ldr	r3, [r7, #20]
 810e062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810e066:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810e068:	683b      	ldr	r3, [r7, #0]
 810e06a:	695b      	ldr	r3, [r3, #20]
 810e06c:	029b      	lsls	r3, r3, #10
 810e06e:	697a      	ldr	r2, [r7, #20]
 810e070:	4313      	orrs	r3, r2
 810e072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810e074:	687b      	ldr	r3, [r7, #4]
 810e076:	697a      	ldr	r2, [r7, #20]
 810e078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810e07a:	687b      	ldr	r3, [r7, #4]
 810e07c:	68fa      	ldr	r2, [r7, #12]
 810e07e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810e080:	683b      	ldr	r3, [r7, #0]
 810e082:	685a      	ldr	r2, [r3, #4]
 810e084:	687b      	ldr	r3, [r7, #4]
 810e086:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810e088:	687b      	ldr	r3, [r7, #4]
 810e08a:	693a      	ldr	r2, [r7, #16]
 810e08c:	621a      	str	r2, [r3, #32]
}
 810e08e:	bf00      	nop
 810e090:	371c      	adds	r7, #28
 810e092:	46bd      	mov	sp, r7
 810e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e098:	4770      	bx	lr
 810e09a:	bf00      	nop
 810e09c:	40010000 	.word	0x40010000
 810e0a0:	40010400 	.word	0x40010400
 810e0a4:	40014000 	.word	0x40014000
 810e0a8:	40014400 	.word	0x40014400
 810e0ac:	40014800 	.word	0x40014800

0810e0b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810e0b0:	b480      	push	{r7}
 810e0b2:	b087      	sub	sp, #28
 810e0b4:	af00      	add	r7, sp, #0
 810e0b6:	60f8      	str	r0, [r7, #12]
 810e0b8:	60b9      	str	r1, [r7, #8]
 810e0ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810e0bc:	68fb      	ldr	r3, [r7, #12]
 810e0be:	6a1b      	ldr	r3, [r3, #32]
 810e0c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810e0c2:	68fb      	ldr	r3, [r7, #12]
 810e0c4:	6a1b      	ldr	r3, [r3, #32]
 810e0c6:	f023 0201 	bic.w	r2, r3, #1
 810e0ca:	68fb      	ldr	r3, [r7, #12]
 810e0cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810e0ce:	68fb      	ldr	r3, [r7, #12]
 810e0d0:	699b      	ldr	r3, [r3, #24]
 810e0d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810e0d4:	693b      	ldr	r3, [r7, #16]
 810e0d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810e0da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810e0dc:	687b      	ldr	r3, [r7, #4]
 810e0de:	011b      	lsls	r3, r3, #4
 810e0e0:	693a      	ldr	r2, [r7, #16]
 810e0e2:	4313      	orrs	r3, r2
 810e0e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810e0e6:	697b      	ldr	r3, [r7, #20]
 810e0e8:	f023 030a 	bic.w	r3, r3, #10
 810e0ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810e0ee:	697a      	ldr	r2, [r7, #20]
 810e0f0:	68bb      	ldr	r3, [r7, #8]
 810e0f2:	4313      	orrs	r3, r2
 810e0f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810e0f6:	68fb      	ldr	r3, [r7, #12]
 810e0f8:	693a      	ldr	r2, [r7, #16]
 810e0fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810e0fc:	68fb      	ldr	r3, [r7, #12]
 810e0fe:	697a      	ldr	r2, [r7, #20]
 810e100:	621a      	str	r2, [r3, #32]
}
 810e102:	bf00      	nop
 810e104:	371c      	adds	r7, #28
 810e106:	46bd      	mov	sp, r7
 810e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e10c:	4770      	bx	lr

0810e10e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810e10e:	b480      	push	{r7}
 810e110:	b087      	sub	sp, #28
 810e112:	af00      	add	r7, sp, #0
 810e114:	60f8      	str	r0, [r7, #12]
 810e116:	60b9      	str	r1, [r7, #8]
 810e118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810e11a:	68fb      	ldr	r3, [r7, #12]
 810e11c:	6a1b      	ldr	r3, [r3, #32]
 810e11e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810e120:	68fb      	ldr	r3, [r7, #12]
 810e122:	6a1b      	ldr	r3, [r3, #32]
 810e124:	f023 0210 	bic.w	r2, r3, #16
 810e128:	68fb      	ldr	r3, [r7, #12]
 810e12a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810e12c:	68fb      	ldr	r3, [r7, #12]
 810e12e:	699b      	ldr	r3, [r3, #24]
 810e130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810e132:	693b      	ldr	r3, [r7, #16]
 810e134:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810e138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810e13a:	687b      	ldr	r3, [r7, #4]
 810e13c:	031b      	lsls	r3, r3, #12
 810e13e:	693a      	ldr	r2, [r7, #16]
 810e140:	4313      	orrs	r3, r2
 810e142:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810e144:	697b      	ldr	r3, [r7, #20]
 810e146:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810e14a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810e14c:	68bb      	ldr	r3, [r7, #8]
 810e14e:	011b      	lsls	r3, r3, #4
 810e150:	697a      	ldr	r2, [r7, #20]
 810e152:	4313      	orrs	r3, r2
 810e154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810e156:	68fb      	ldr	r3, [r7, #12]
 810e158:	693a      	ldr	r2, [r7, #16]
 810e15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810e15c:	68fb      	ldr	r3, [r7, #12]
 810e15e:	697a      	ldr	r2, [r7, #20]
 810e160:	621a      	str	r2, [r3, #32]
}
 810e162:	bf00      	nop
 810e164:	371c      	adds	r7, #28
 810e166:	46bd      	mov	sp, r7
 810e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e16c:	4770      	bx	lr

0810e16e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810e16e:	b480      	push	{r7}
 810e170:	b085      	sub	sp, #20
 810e172:	af00      	add	r7, sp, #0
 810e174:	6078      	str	r0, [r7, #4]
 810e176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810e178:	687b      	ldr	r3, [r7, #4]
 810e17a:	689b      	ldr	r3, [r3, #8]
 810e17c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810e17e:	68fb      	ldr	r3, [r7, #12]
 810e180:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810e184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810e188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810e18a:	683a      	ldr	r2, [r7, #0]
 810e18c:	68fb      	ldr	r3, [r7, #12]
 810e18e:	4313      	orrs	r3, r2
 810e190:	f043 0307 	orr.w	r3, r3, #7
 810e194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810e196:	687b      	ldr	r3, [r7, #4]
 810e198:	68fa      	ldr	r2, [r7, #12]
 810e19a:	609a      	str	r2, [r3, #8]
}
 810e19c:	bf00      	nop
 810e19e:	3714      	adds	r7, #20
 810e1a0:	46bd      	mov	sp, r7
 810e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1a6:	4770      	bx	lr

0810e1a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810e1a8:	b480      	push	{r7}
 810e1aa:	b087      	sub	sp, #28
 810e1ac:	af00      	add	r7, sp, #0
 810e1ae:	60f8      	str	r0, [r7, #12]
 810e1b0:	60b9      	str	r1, [r7, #8]
 810e1b2:	607a      	str	r2, [r7, #4]
 810e1b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810e1b6:	68fb      	ldr	r3, [r7, #12]
 810e1b8:	689b      	ldr	r3, [r3, #8]
 810e1ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810e1bc:	697b      	ldr	r3, [r7, #20]
 810e1be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810e1c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810e1c4:	683b      	ldr	r3, [r7, #0]
 810e1c6:	021a      	lsls	r2, r3, #8
 810e1c8:	687b      	ldr	r3, [r7, #4]
 810e1ca:	431a      	orrs	r2, r3
 810e1cc:	68bb      	ldr	r3, [r7, #8]
 810e1ce:	4313      	orrs	r3, r2
 810e1d0:	697a      	ldr	r2, [r7, #20]
 810e1d2:	4313      	orrs	r3, r2
 810e1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810e1d6:	68fb      	ldr	r3, [r7, #12]
 810e1d8:	697a      	ldr	r2, [r7, #20]
 810e1da:	609a      	str	r2, [r3, #8]
}
 810e1dc:	bf00      	nop
 810e1de:	371c      	adds	r7, #28
 810e1e0:	46bd      	mov	sp, r7
 810e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1e6:	4770      	bx	lr

0810e1e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810e1e8:	b480      	push	{r7}
 810e1ea:	b087      	sub	sp, #28
 810e1ec:	af00      	add	r7, sp, #0
 810e1ee:	60f8      	str	r0, [r7, #12]
 810e1f0:	60b9      	str	r1, [r7, #8]
 810e1f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810e1f4:	68bb      	ldr	r3, [r7, #8]
 810e1f6:	f003 031f 	and.w	r3, r3, #31
 810e1fa:	2201      	movs	r2, #1
 810e1fc:	fa02 f303 	lsl.w	r3, r2, r3
 810e200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810e202:	68fb      	ldr	r3, [r7, #12]
 810e204:	6a1a      	ldr	r2, [r3, #32]
 810e206:	697b      	ldr	r3, [r7, #20]
 810e208:	43db      	mvns	r3, r3
 810e20a:	401a      	ands	r2, r3
 810e20c:	68fb      	ldr	r3, [r7, #12]
 810e20e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810e210:	68fb      	ldr	r3, [r7, #12]
 810e212:	6a1a      	ldr	r2, [r3, #32]
 810e214:	68bb      	ldr	r3, [r7, #8]
 810e216:	f003 031f 	and.w	r3, r3, #31
 810e21a:	6879      	ldr	r1, [r7, #4]
 810e21c:	fa01 f303 	lsl.w	r3, r1, r3
 810e220:	431a      	orrs	r2, r3
 810e222:	68fb      	ldr	r3, [r7, #12]
 810e224:	621a      	str	r2, [r3, #32]
}
 810e226:	bf00      	nop
 810e228:	371c      	adds	r7, #28
 810e22a:	46bd      	mov	sp, r7
 810e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e230:	4770      	bx	lr
	...

0810e234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810e234:	b480      	push	{r7}
 810e236:	b085      	sub	sp, #20
 810e238:	af00      	add	r7, sp, #0
 810e23a:	6078      	str	r0, [r7, #4]
 810e23c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810e23e:	687b      	ldr	r3, [r7, #4]
 810e240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810e244:	2b01      	cmp	r3, #1
 810e246:	d101      	bne.n	810e24c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810e248:	2302      	movs	r3, #2
 810e24a:	e06d      	b.n	810e328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810e24c:	687b      	ldr	r3, [r7, #4]
 810e24e:	2201      	movs	r2, #1
 810e250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e254:	687b      	ldr	r3, [r7, #4]
 810e256:	2202      	movs	r2, #2
 810e258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	681b      	ldr	r3, [r3, #0]
 810e260:	685b      	ldr	r3, [r3, #4]
 810e262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810e264:	687b      	ldr	r3, [r7, #4]
 810e266:	681b      	ldr	r3, [r3, #0]
 810e268:	689b      	ldr	r3, [r3, #8]
 810e26a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810e26c:	687b      	ldr	r3, [r7, #4]
 810e26e:	681b      	ldr	r3, [r3, #0]
 810e270:	4a30      	ldr	r2, [pc, #192]	@ (810e334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810e272:	4293      	cmp	r3, r2
 810e274:	d004      	beq.n	810e280 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810e276:	687b      	ldr	r3, [r7, #4]
 810e278:	681b      	ldr	r3, [r3, #0]
 810e27a:	4a2f      	ldr	r2, [pc, #188]	@ (810e338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810e27c:	4293      	cmp	r3, r2
 810e27e:	d108      	bne.n	810e292 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810e280:	68fb      	ldr	r3, [r7, #12]
 810e282:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810e286:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810e288:	683b      	ldr	r3, [r7, #0]
 810e28a:	685b      	ldr	r3, [r3, #4]
 810e28c:	68fa      	ldr	r2, [r7, #12]
 810e28e:	4313      	orrs	r3, r2
 810e290:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810e292:	68fb      	ldr	r3, [r7, #12]
 810e294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810e298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810e29a:	683b      	ldr	r3, [r7, #0]
 810e29c:	681b      	ldr	r3, [r3, #0]
 810e29e:	68fa      	ldr	r2, [r7, #12]
 810e2a0:	4313      	orrs	r3, r2
 810e2a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810e2a4:	687b      	ldr	r3, [r7, #4]
 810e2a6:	681b      	ldr	r3, [r3, #0]
 810e2a8:	68fa      	ldr	r2, [r7, #12]
 810e2aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810e2ac:	687b      	ldr	r3, [r7, #4]
 810e2ae:	681b      	ldr	r3, [r3, #0]
 810e2b0:	4a20      	ldr	r2, [pc, #128]	@ (810e334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810e2b2:	4293      	cmp	r3, r2
 810e2b4:	d022      	beq.n	810e2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2b6:	687b      	ldr	r3, [r7, #4]
 810e2b8:	681b      	ldr	r3, [r3, #0]
 810e2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810e2be:	d01d      	beq.n	810e2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2c0:	687b      	ldr	r3, [r7, #4]
 810e2c2:	681b      	ldr	r3, [r3, #0]
 810e2c4:	4a1d      	ldr	r2, [pc, #116]	@ (810e33c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810e2c6:	4293      	cmp	r3, r2
 810e2c8:	d018      	beq.n	810e2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2ca:	687b      	ldr	r3, [r7, #4]
 810e2cc:	681b      	ldr	r3, [r3, #0]
 810e2ce:	4a1c      	ldr	r2, [pc, #112]	@ (810e340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810e2d0:	4293      	cmp	r3, r2
 810e2d2:	d013      	beq.n	810e2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2d4:	687b      	ldr	r3, [r7, #4]
 810e2d6:	681b      	ldr	r3, [r3, #0]
 810e2d8:	4a1a      	ldr	r2, [pc, #104]	@ (810e344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810e2da:	4293      	cmp	r3, r2
 810e2dc:	d00e      	beq.n	810e2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2de:	687b      	ldr	r3, [r7, #4]
 810e2e0:	681b      	ldr	r3, [r3, #0]
 810e2e2:	4a15      	ldr	r2, [pc, #84]	@ (810e338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810e2e4:	4293      	cmp	r3, r2
 810e2e6:	d009      	beq.n	810e2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2e8:	687b      	ldr	r3, [r7, #4]
 810e2ea:	681b      	ldr	r3, [r3, #0]
 810e2ec:	4a16      	ldr	r2, [pc, #88]	@ (810e348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810e2ee:	4293      	cmp	r3, r2
 810e2f0:	d004      	beq.n	810e2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810e2f2:	687b      	ldr	r3, [r7, #4]
 810e2f4:	681b      	ldr	r3, [r3, #0]
 810e2f6:	4a15      	ldr	r2, [pc, #84]	@ (810e34c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810e2f8:	4293      	cmp	r3, r2
 810e2fa:	d10c      	bne.n	810e316 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810e2fc:	68bb      	ldr	r3, [r7, #8]
 810e2fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810e302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810e304:	683b      	ldr	r3, [r7, #0]
 810e306:	689b      	ldr	r3, [r3, #8]
 810e308:	68ba      	ldr	r2, [r7, #8]
 810e30a:	4313      	orrs	r3, r2
 810e30c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810e30e:	687b      	ldr	r3, [r7, #4]
 810e310:	681b      	ldr	r3, [r3, #0]
 810e312:	68ba      	ldr	r2, [r7, #8]
 810e314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810e316:	687b      	ldr	r3, [r7, #4]
 810e318:	2201      	movs	r2, #1
 810e31a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810e31e:	687b      	ldr	r3, [r7, #4]
 810e320:	2200      	movs	r2, #0
 810e322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810e326:	2300      	movs	r3, #0
}
 810e328:	4618      	mov	r0, r3
 810e32a:	3714      	adds	r7, #20
 810e32c:	46bd      	mov	sp, r7
 810e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e332:	4770      	bx	lr
 810e334:	40010000 	.word	0x40010000
 810e338:	40010400 	.word	0x40010400
 810e33c:	40000400 	.word	0x40000400
 810e340:	40000800 	.word	0x40000800
 810e344:	40000c00 	.word	0x40000c00
 810e348:	40001800 	.word	0x40001800
 810e34c:	40014000 	.word	0x40014000

0810e350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810e350:	b480      	push	{r7}
 810e352:	b085      	sub	sp, #20
 810e354:	af00      	add	r7, sp, #0
 810e356:	6078      	str	r0, [r7, #4]
 810e358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810e35a:	2300      	movs	r3, #0
 810e35c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810e35e:	687b      	ldr	r3, [r7, #4]
 810e360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810e364:	2b01      	cmp	r3, #1
 810e366:	d101      	bne.n	810e36c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810e368:	2302      	movs	r3, #2
 810e36a:	e065      	b.n	810e438 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810e36c:	687b      	ldr	r3, [r7, #4]
 810e36e:	2201      	movs	r2, #1
 810e370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810e374:	68fb      	ldr	r3, [r7, #12]
 810e376:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810e37a:	683b      	ldr	r3, [r7, #0]
 810e37c:	68db      	ldr	r3, [r3, #12]
 810e37e:	4313      	orrs	r3, r2
 810e380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810e382:	68fb      	ldr	r3, [r7, #12]
 810e384:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810e388:	683b      	ldr	r3, [r7, #0]
 810e38a:	689b      	ldr	r3, [r3, #8]
 810e38c:	4313      	orrs	r3, r2
 810e38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810e390:	68fb      	ldr	r3, [r7, #12]
 810e392:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810e396:	683b      	ldr	r3, [r7, #0]
 810e398:	685b      	ldr	r3, [r3, #4]
 810e39a:	4313      	orrs	r3, r2
 810e39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810e39e:	68fb      	ldr	r3, [r7, #12]
 810e3a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810e3a4:	683b      	ldr	r3, [r7, #0]
 810e3a6:	681b      	ldr	r3, [r3, #0]
 810e3a8:	4313      	orrs	r3, r2
 810e3aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810e3ac:	68fb      	ldr	r3, [r7, #12]
 810e3ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810e3b2:	683b      	ldr	r3, [r7, #0]
 810e3b4:	691b      	ldr	r3, [r3, #16]
 810e3b6:	4313      	orrs	r3, r2
 810e3b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810e3ba:	68fb      	ldr	r3, [r7, #12]
 810e3bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810e3c0:	683b      	ldr	r3, [r7, #0]
 810e3c2:	695b      	ldr	r3, [r3, #20]
 810e3c4:	4313      	orrs	r3, r2
 810e3c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810e3c8:	68fb      	ldr	r3, [r7, #12]
 810e3ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810e3ce:	683b      	ldr	r3, [r7, #0]
 810e3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e3d2:	4313      	orrs	r3, r2
 810e3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810e3d6:	68fb      	ldr	r3, [r7, #12]
 810e3d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810e3dc:	683b      	ldr	r3, [r7, #0]
 810e3de:	699b      	ldr	r3, [r3, #24]
 810e3e0:	041b      	lsls	r3, r3, #16
 810e3e2:	4313      	orrs	r3, r2
 810e3e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810e3e6:	687b      	ldr	r3, [r7, #4]
 810e3e8:	681b      	ldr	r3, [r3, #0]
 810e3ea:	4a16      	ldr	r2, [pc, #88]	@ (810e444 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810e3ec:	4293      	cmp	r3, r2
 810e3ee:	d004      	beq.n	810e3fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810e3f0:	687b      	ldr	r3, [r7, #4]
 810e3f2:	681b      	ldr	r3, [r3, #0]
 810e3f4:	4a14      	ldr	r2, [pc, #80]	@ (810e448 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810e3f6:	4293      	cmp	r3, r2
 810e3f8:	d115      	bne.n	810e426 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810e3fa:	68fb      	ldr	r3, [r7, #12]
 810e3fc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810e400:	683b      	ldr	r3, [r7, #0]
 810e402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e404:	051b      	lsls	r3, r3, #20
 810e406:	4313      	orrs	r3, r2
 810e408:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810e40a:	68fb      	ldr	r3, [r7, #12]
 810e40c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810e410:	683b      	ldr	r3, [r7, #0]
 810e412:	69db      	ldr	r3, [r3, #28]
 810e414:	4313      	orrs	r3, r2
 810e416:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810e418:	68fb      	ldr	r3, [r7, #12]
 810e41a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810e41e:	683b      	ldr	r3, [r7, #0]
 810e420:	6a1b      	ldr	r3, [r3, #32]
 810e422:	4313      	orrs	r3, r2
 810e424:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810e426:	687b      	ldr	r3, [r7, #4]
 810e428:	681b      	ldr	r3, [r3, #0]
 810e42a:	68fa      	ldr	r2, [r7, #12]
 810e42c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810e42e:	687b      	ldr	r3, [r7, #4]
 810e430:	2200      	movs	r2, #0
 810e432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810e436:	2300      	movs	r3, #0
}
 810e438:	4618      	mov	r0, r3
 810e43a:	3714      	adds	r7, #20
 810e43c:	46bd      	mov	sp, r7
 810e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e442:	4770      	bx	lr
 810e444:	40010000 	.word	0x40010000
 810e448:	40010400 	.word	0x40010400

0810e44c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810e44c:	b480      	push	{r7}
 810e44e:	b083      	sub	sp, #12
 810e450:	af00      	add	r7, sp, #0
 810e452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810e454:	bf00      	nop
 810e456:	370c      	adds	r7, #12
 810e458:	46bd      	mov	sp, r7
 810e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e45e:	4770      	bx	lr

0810e460 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810e460:	b480      	push	{r7}
 810e462:	b083      	sub	sp, #12
 810e464:	af00      	add	r7, sp, #0
 810e466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810e468:	bf00      	nop
 810e46a:	370c      	adds	r7, #12
 810e46c:	46bd      	mov	sp, r7
 810e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e472:	4770      	bx	lr

0810e474 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810e474:	b480      	push	{r7}
 810e476:	b083      	sub	sp, #12
 810e478:	af00      	add	r7, sp, #0
 810e47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810e47c:	bf00      	nop
 810e47e:	370c      	adds	r7, #12
 810e480:	46bd      	mov	sp, r7
 810e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e486:	4770      	bx	lr

0810e488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810e488:	b580      	push	{r7, lr}
 810e48a:	b082      	sub	sp, #8
 810e48c:	af00      	add	r7, sp, #0
 810e48e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810e490:	687b      	ldr	r3, [r7, #4]
 810e492:	2b00      	cmp	r3, #0
 810e494:	d101      	bne.n	810e49a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810e496:	2301      	movs	r3, #1
 810e498:	e042      	b.n	810e520 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810e49a:	687b      	ldr	r3, [r7, #4]
 810e49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810e4a0:	2b00      	cmp	r3, #0
 810e4a2:	d106      	bne.n	810e4b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810e4a4:	687b      	ldr	r3, [r7, #4]
 810e4a6:	2200      	movs	r2, #0
 810e4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810e4ac:	6878      	ldr	r0, [r7, #4]
 810e4ae:	f7f6 f8bd 	bl	810462c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810e4b2:	687b      	ldr	r3, [r7, #4]
 810e4b4:	2224      	movs	r2, #36	@ 0x24
 810e4b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810e4ba:	687b      	ldr	r3, [r7, #4]
 810e4bc:	681b      	ldr	r3, [r3, #0]
 810e4be:	681a      	ldr	r2, [r3, #0]
 810e4c0:	687b      	ldr	r3, [r7, #4]
 810e4c2:	681b      	ldr	r3, [r3, #0]
 810e4c4:	f022 0201 	bic.w	r2, r2, #1
 810e4c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810e4ca:	687b      	ldr	r3, [r7, #4]
 810e4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e4ce:	2b00      	cmp	r3, #0
 810e4d0:	d002      	beq.n	810e4d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810e4d2:	6878      	ldr	r0, [r7, #4]
 810e4d4:	f001 fb0c 	bl	810faf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810e4d8:	6878      	ldr	r0, [r7, #4]
 810e4da:	f000 fda1 	bl	810f020 <UART_SetConfig>
 810e4de:	4603      	mov	r3, r0
 810e4e0:	2b01      	cmp	r3, #1
 810e4e2:	d101      	bne.n	810e4e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810e4e4:	2301      	movs	r3, #1
 810e4e6:	e01b      	b.n	810e520 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810e4e8:	687b      	ldr	r3, [r7, #4]
 810e4ea:	681b      	ldr	r3, [r3, #0]
 810e4ec:	685a      	ldr	r2, [r3, #4]
 810e4ee:	687b      	ldr	r3, [r7, #4]
 810e4f0:	681b      	ldr	r3, [r3, #0]
 810e4f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810e4f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810e4f8:	687b      	ldr	r3, [r7, #4]
 810e4fa:	681b      	ldr	r3, [r3, #0]
 810e4fc:	689a      	ldr	r2, [r3, #8]
 810e4fe:	687b      	ldr	r3, [r7, #4]
 810e500:	681b      	ldr	r3, [r3, #0]
 810e502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810e506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810e508:	687b      	ldr	r3, [r7, #4]
 810e50a:	681b      	ldr	r3, [r3, #0]
 810e50c:	681a      	ldr	r2, [r3, #0]
 810e50e:	687b      	ldr	r3, [r7, #4]
 810e510:	681b      	ldr	r3, [r3, #0]
 810e512:	f042 0201 	orr.w	r2, r2, #1
 810e516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810e518:	6878      	ldr	r0, [r7, #4]
 810e51a:	f001 fb8b 	bl	810fc34 <UART_CheckIdleState>
 810e51e:	4603      	mov	r3, r0
}
 810e520:	4618      	mov	r0, r3
 810e522:	3708      	adds	r7, #8
 810e524:	46bd      	mov	sp, r7
 810e526:	bd80      	pop	{r7, pc}

0810e528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810e528:	b580      	push	{r7, lr}
 810e52a:	b08a      	sub	sp, #40	@ 0x28
 810e52c:	af02      	add	r7, sp, #8
 810e52e:	60f8      	str	r0, [r7, #12]
 810e530:	60b9      	str	r1, [r7, #8]
 810e532:	603b      	str	r3, [r7, #0]
 810e534:	4613      	mov	r3, r2
 810e536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810e538:	68fb      	ldr	r3, [r7, #12]
 810e53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810e53e:	2b20      	cmp	r3, #32
 810e540:	d17b      	bne.n	810e63a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810e542:	68bb      	ldr	r3, [r7, #8]
 810e544:	2b00      	cmp	r3, #0
 810e546:	d002      	beq.n	810e54e <HAL_UART_Transmit+0x26>
 810e548:	88fb      	ldrh	r3, [r7, #6]
 810e54a:	2b00      	cmp	r3, #0
 810e54c:	d101      	bne.n	810e552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810e54e:	2301      	movs	r3, #1
 810e550:	e074      	b.n	810e63c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e552:	68fb      	ldr	r3, [r7, #12]
 810e554:	2200      	movs	r2, #0
 810e556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810e55a:	68fb      	ldr	r3, [r7, #12]
 810e55c:	2221      	movs	r2, #33	@ 0x21
 810e55e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810e562:	f7f6 fbd5 	bl	8104d10 <HAL_GetTick>
 810e566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810e568:	68fb      	ldr	r3, [r7, #12]
 810e56a:	88fa      	ldrh	r2, [r7, #6]
 810e56c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810e570:	68fb      	ldr	r3, [r7, #12]
 810e572:	88fa      	ldrh	r2, [r7, #6]
 810e574:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810e578:	68fb      	ldr	r3, [r7, #12]
 810e57a:	689b      	ldr	r3, [r3, #8]
 810e57c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810e580:	d108      	bne.n	810e594 <HAL_UART_Transmit+0x6c>
 810e582:	68fb      	ldr	r3, [r7, #12]
 810e584:	691b      	ldr	r3, [r3, #16]
 810e586:	2b00      	cmp	r3, #0
 810e588:	d104      	bne.n	810e594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810e58a:	2300      	movs	r3, #0
 810e58c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810e58e:	68bb      	ldr	r3, [r7, #8]
 810e590:	61bb      	str	r3, [r7, #24]
 810e592:	e003      	b.n	810e59c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810e594:	68bb      	ldr	r3, [r7, #8]
 810e596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810e598:	2300      	movs	r3, #0
 810e59a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810e59c:	e030      	b.n	810e600 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810e59e:	683b      	ldr	r3, [r7, #0]
 810e5a0:	9300      	str	r3, [sp, #0]
 810e5a2:	697b      	ldr	r3, [r7, #20]
 810e5a4:	2200      	movs	r2, #0
 810e5a6:	2180      	movs	r1, #128	@ 0x80
 810e5a8:	68f8      	ldr	r0, [r7, #12]
 810e5aa:	f001 fbed 	bl	810fd88 <UART_WaitOnFlagUntilTimeout>
 810e5ae:	4603      	mov	r3, r0
 810e5b0:	2b00      	cmp	r3, #0
 810e5b2:	d005      	beq.n	810e5c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810e5b4:	68fb      	ldr	r3, [r7, #12]
 810e5b6:	2220      	movs	r2, #32
 810e5b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810e5bc:	2303      	movs	r3, #3
 810e5be:	e03d      	b.n	810e63c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810e5c0:	69fb      	ldr	r3, [r7, #28]
 810e5c2:	2b00      	cmp	r3, #0
 810e5c4:	d10b      	bne.n	810e5de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810e5c6:	69bb      	ldr	r3, [r7, #24]
 810e5c8:	881b      	ldrh	r3, [r3, #0]
 810e5ca:	461a      	mov	r2, r3
 810e5cc:	68fb      	ldr	r3, [r7, #12]
 810e5ce:	681b      	ldr	r3, [r3, #0]
 810e5d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810e5d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810e5d6:	69bb      	ldr	r3, [r7, #24]
 810e5d8:	3302      	adds	r3, #2
 810e5da:	61bb      	str	r3, [r7, #24]
 810e5dc:	e007      	b.n	810e5ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810e5de:	69fb      	ldr	r3, [r7, #28]
 810e5e0:	781a      	ldrb	r2, [r3, #0]
 810e5e2:	68fb      	ldr	r3, [r7, #12]
 810e5e4:	681b      	ldr	r3, [r3, #0]
 810e5e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810e5e8:	69fb      	ldr	r3, [r7, #28]
 810e5ea:	3301      	adds	r3, #1
 810e5ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810e5ee:	68fb      	ldr	r3, [r7, #12]
 810e5f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810e5f4:	b29b      	uxth	r3, r3
 810e5f6:	3b01      	subs	r3, #1
 810e5f8:	b29a      	uxth	r2, r3
 810e5fa:	68fb      	ldr	r3, [r7, #12]
 810e5fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810e600:	68fb      	ldr	r3, [r7, #12]
 810e602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810e606:	b29b      	uxth	r3, r3
 810e608:	2b00      	cmp	r3, #0
 810e60a:	d1c8      	bne.n	810e59e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810e60c:	683b      	ldr	r3, [r7, #0]
 810e60e:	9300      	str	r3, [sp, #0]
 810e610:	697b      	ldr	r3, [r7, #20]
 810e612:	2200      	movs	r2, #0
 810e614:	2140      	movs	r1, #64	@ 0x40
 810e616:	68f8      	ldr	r0, [r7, #12]
 810e618:	f001 fbb6 	bl	810fd88 <UART_WaitOnFlagUntilTimeout>
 810e61c:	4603      	mov	r3, r0
 810e61e:	2b00      	cmp	r3, #0
 810e620:	d005      	beq.n	810e62e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810e622:	68fb      	ldr	r3, [r7, #12]
 810e624:	2220      	movs	r2, #32
 810e626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810e62a:	2303      	movs	r3, #3
 810e62c:	e006      	b.n	810e63c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810e62e:	68fb      	ldr	r3, [r7, #12]
 810e630:	2220      	movs	r2, #32
 810e632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810e636:	2300      	movs	r3, #0
 810e638:	e000      	b.n	810e63c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810e63a:	2302      	movs	r3, #2
  }
}
 810e63c:	4618      	mov	r0, r3
 810e63e:	3720      	adds	r7, #32
 810e640:	46bd      	mov	sp, r7
 810e642:	bd80      	pop	{r7, pc}

0810e644 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810e644:	b580      	push	{r7, lr}
 810e646:	b08a      	sub	sp, #40	@ 0x28
 810e648:	af02      	add	r7, sp, #8
 810e64a:	60f8      	str	r0, [r7, #12]
 810e64c:	60b9      	str	r1, [r7, #8]
 810e64e:	603b      	str	r3, [r7, #0]
 810e650:	4613      	mov	r3, r2
 810e652:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810e654:	68fb      	ldr	r3, [r7, #12]
 810e656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e65a:	2b20      	cmp	r3, #32
 810e65c:	f040 80b5 	bne.w	810e7ca <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810e660:	68bb      	ldr	r3, [r7, #8]
 810e662:	2b00      	cmp	r3, #0
 810e664:	d002      	beq.n	810e66c <HAL_UART_Receive+0x28>
 810e666:	88fb      	ldrh	r3, [r7, #6]
 810e668:	2b00      	cmp	r3, #0
 810e66a:	d101      	bne.n	810e670 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810e66c:	2301      	movs	r3, #1
 810e66e:	e0ad      	b.n	810e7cc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e670:	68fb      	ldr	r3, [r7, #12]
 810e672:	2200      	movs	r2, #0
 810e674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810e678:	68fb      	ldr	r3, [r7, #12]
 810e67a:	2222      	movs	r2, #34	@ 0x22
 810e67c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e680:	68fb      	ldr	r3, [r7, #12]
 810e682:	2200      	movs	r2, #0
 810e684:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810e686:	f7f6 fb43 	bl	8104d10 <HAL_GetTick>
 810e68a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810e68c:	68fb      	ldr	r3, [r7, #12]
 810e68e:	88fa      	ldrh	r2, [r7, #6]
 810e690:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810e694:	68fb      	ldr	r3, [r7, #12]
 810e696:	88fa      	ldrh	r2, [r7, #6]
 810e698:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810e69c:	68fb      	ldr	r3, [r7, #12]
 810e69e:	689b      	ldr	r3, [r3, #8]
 810e6a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810e6a4:	d10e      	bne.n	810e6c4 <HAL_UART_Receive+0x80>
 810e6a6:	68fb      	ldr	r3, [r7, #12]
 810e6a8:	691b      	ldr	r3, [r3, #16]
 810e6aa:	2b00      	cmp	r3, #0
 810e6ac:	d105      	bne.n	810e6ba <HAL_UART_Receive+0x76>
 810e6ae:	68fb      	ldr	r3, [r7, #12]
 810e6b0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810e6b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e6b8:	e02d      	b.n	810e716 <HAL_UART_Receive+0xd2>
 810e6ba:	68fb      	ldr	r3, [r7, #12]
 810e6bc:	22ff      	movs	r2, #255	@ 0xff
 810e6be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e6c2:	e028      	b.n	810e716 <HAL_UART_Receive+0xd2>
 810e6c4:	68fb      	ldr	r3, [r7, #12]
 810e6c6:	689b      	ldr	r3, [r3, #8]
 810e6c8:	2b00      	cmp	r3, #0
 810e6ca:	d10d      	bne.n	810e6e8 <HAL_UART_Receive+0xa4>
 810e6cc:	68fb      	ldr	r3, [r7, #12]
 810e6ce:	691b      	ldr	r3, [r3, #16]
 810e6d0:	2b00      	cmp	r3, #0
 810e6d2:	d104      	bne.n	810e6de <HAL_UART_Receive+0x9a>
 810e6d4:	68fb      	ldr	r3, [r7, #12]
 810e6d6:	22ff      	movs	r2, #255	@ 0xff
 810e6d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e6dc:	e01b      	b.n	810e716 <HAL_UART_Receive+0xd2>
 810e6de:	68fb      	ldr	r3, [r7, #12]
 810e6e0:	227f      	movs	r2, #127	@ 0x7f
 810e6e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e6e6:	e016      	b.n	810e716 <HAL_UART_Receive+0xd2>
 810e6e8:	68fb      	ldr	r3, [r7, #12]
 810e6ea:	689b      	ldr	r3, [r3, #8]
 810e6ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810e6f0:	d10d      	bne.n	810e70e <HAL_UART_Receive+0xca>
 810e6f2:	68fb      	ldr	r3, [r7, #12]
 810e6f4:	691b      	ldr	r3, [r3, #16]
 810e6f6:	2b00      	cmp	r3, #0
 810e6f8:	d104      	bne.n	810e704 <HAL_UART_Receive+0xc0>
 810e6fa:	68fb      	ldr	r3, [r7, #12]
 810e6fc:	227f      	movs	r2, #127	@ 0x7f
 810e6fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e702:	e008      	b.n	810e716 <HAL_UART_Receive+0xd2>
 810e704:	68fb      	ldr	r3, [r7, #12]
 810e706:	223f      	movs	r2, #63	@ 0x3f
 810e708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810e70c:	e003      	b.n	810e716 <HAL_UART_Receive+0xd2>
 810e70e:	68fb      	ldr	r3, [r7, #12]
 810e710:	2200      	movs	r2, #0
 810e712:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810e716:	68fb      	ldr	r3, [r7, #12]
 810e718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e71c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810e71e:	68fb      	ldr	r3, [r7, #12]
 810e720:	689b      	ldr	r3, [r3, #8]
 810e722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810e726:	d108      	bne.n	810e73a <HAL_UART_Receive+0xf6>
 810e728:	68fb      	ldr	r3, [r7, #12]
 810e72a:	691b      	ldr	r3, [r3, #16]
 810e72c:	2b00      	cmp	r3, #0
 810e72e:	d104      	bne.n	810e73a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810e730:	2300      	movs	r3, #0
 810e732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810e734:	68bb      	ldr	r3, [r7, #8]
 810e736:	61bb      	str	r3, [r7, #24]
 810e738:	e003      	b.n	810e742 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810e73a:	68bb      	ldr	r3, [r7, #8]
 810e73c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810e73e:	2300      	movs	r3, #0
 810e740:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810e742:	e036      	b.n	810e7b2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810e744:	683b      	ldr	r3, [r7, #0]
 810e746:	9300      	str	r3, [sp, #0]
 810e748:	697b      	ldr	r3, [r7, #20]
 810e74a:	2200      	movs	r2, #0
 810e74c:	2120      	movs	r1, #32
 810e74e:	68f8      	ldr	r0, [r7, #12]
 810e750:	f001 fb1a 	bl	810fd88 <UART_WaitOnFlagUntilTimeout>
 810e754:	4603      	mov	r3, r0
 810e756:	2b00      	cmp	r3, #0
 810e758:	d005      	beq.n	810e766 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810e75a:	68fb      	ldr	r3, [r7, #12]
 810e75c:	2220      	movs	r2, #32
 810e75e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810e762:	2303      	movs	r3, #3
 810e764:	e032      	b.n	810e7cc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810e766:	69fb      	ldr	r3, [r7, #28]
 810e768:	2b00      	cmp	r3, #0
 810e76a:	d10c      	bne.n	810e786 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810e76c:	68fb      	ldr	r3, [r7, #12]
 810e76e:	681b      	ldr	r3, [r3, #0]
 810e770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e772:	b29a      	uxth	r2, r3
 810e774:	8a7b      	ldrh	r3, [r7, #18]
 810e776:	4013      	ands	r3, r2
 810e778:	b29a      	uxth	r2, r3
 810e77a:	69bb      	ldr	r3, [r7, #24]
 810e77c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810e77e:	69bb      	ldr	r3, [r7, #24]
 810e780:	3302      	adds	r3, #2
 810e782:	61bb      	str	r3, [r7, #24]
 810e784:	e00c      	b.n	810e7a0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810e786:	68fb      	ldr	r3, [r7, #12]
 810e788:	681b      	ldr	r3, [r3, #0]
 810e78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e78c:	b2da      	uxtb	r2, r3
 810e78e:	8a7b      	ldrh	r3, [r7, #18]
 810e790:	b2db      	uxtb	r3, r3
 810e792:	4013      	ands	r3, r2
 810e794:	b2da      	uxtb	r2, r3
 810e796:	69fb      	ldr	r3, [r7, #28]
 810e798:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810e79a:	69fb      	ldr	r3, [r7, #28]
 810e79c:	3301      	adds	r3, #1
 810e79e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810e7a0:	68fb      	ldr	r3, [r7, #12]
 810e7a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e7a6:	b29b      	uxth	r3, r3
 810e7a8:	3b01      	subs	r3, #1
 810e7aa:	b29a      	uxth	r2, r3
 810e7ac:	68fb      	ldr	r3, [r7, #12]
 810e7ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810e7b2:	68fb      	ldr	r3, [r7, #12]
 810e7b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e7b8:	b29b      	uxth	r3, r3
 810e7ba:	2b00      	cmp	r3, #0
 810e7bc:	d1c2      	bne.n	810e744 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810e7be:	68fb      	ldr	r3, [r7, #12]
 810e7c0:	2220      	movs	r2, #32
 810e7c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810e7c6:	2300      	movs	r3, #0
 810e7c8:	e000      	b.n	810e7cc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810e7ca:	2302      	movs	r3, #2
  }
}
 810e7cc:	4618      	mov	r0, r3
 810e7ce:	3720      	adds	r7, #32
 810e7d0:	46bd      	mov	sp, r7
 810e7d2:	bd80      	pop	{r7, pc}

0810e7d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810e7d4:	b580      	push	{r7, lr}
 810e7d6:	b08a      	sub	sp, #40	@ 0x28
 810e7d8:	af00      	add	r7, sp, #0
 810e7da:	60f8      	str	r0, [r7, #12]
 810e7dc:	60b9      	str	r1, [r7, #8]
 810e7de:	4613      	mov	r3, r2
 810e7e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810e7e2:	68fb      	ldr	r3, [r7, #12]
 810e7e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e7e8:	2b20      	cmp	r3, #32
 810e7ea:	d137      	bne.n	810e85c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 810e7ec:	68bb      	ldr	r3, [r7, #8]
 810e7ee:	2b00      	cmp	r3, #0
 810e7f0:	d002      	beq.n	810e7f8 <HAL_UART_Receive_IT+0x24>
 810e7f2:	88fb      	ldrh	r3, [r7, #6]
 810e7f4:	2b00      	cmp	r3, #0
 810e7f6:	d101      	bne.n	810e7fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 810e7f8:	2301      	movs	r3, #1
 810e7fa:	e030      	b.n	810e85e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e7fc:	68fb      	ldr	r3, [r7, #12]
 810e7fe:	2200      	movs	r2, #0
 810e800:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e802:	68fb      	ldr	r3, [r7, #12]
 810e804:	681b      	ldr	r3, [r3, #0]
 810e806:	4a18      	ldr	r2, [pc, #96]	@ (810e868 <HAL_UART_Receive_IT+0x94>)
 810e808:	4293      	cmp	r3, r2
 810e80a:	d01f      	beq.n	810e84c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e80c:	68fb      	ldr	r3, [r7, #12]
 810e80e:	681b      	ldr	r3, [r3, #0]
 810e810:	685b      	ldr	r3, [r3, #4]
 810e812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e816:	2b00      	cmp	r3, #0
 810e818:	d018      	beq.n	810e84c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e81a:	68fb      	ldr	r3, [r7, #12]
 810e81c:	681b      	ldr	r3, [r3, #0]
 810e81e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e820:	697b      	ldr	r3, [r7, #20]
 810e822:	e853 3f00 	ldrex	r3, [r3]
 810e826:	613b      	str	r3, [r7, #16]
   return(result);
 810e828:	693b      	ldr	r3, [r7, #16]
 810e82a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810e82e:	627b      	str	r3, [r7, #36]	@ 0x24
 810e830:	68fb      	ldr	r3, [r7, #12]
 810e832:	681b      	ldr	r3, [r3, #0]
 810e834:	461a      	mov	r2, r3
 810e836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e838:	623b      	str	r3, [r7, #32]
 810e83a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e83c:	69f9      	ldr	r1, [r7, #28]
 810e83e:	6a3a      	ldr	r2, [r7, #32]
 810e840:	e841 2300 	strex	r3, r2, [r1]
 810e844:	61bb      	str	r3, [r7, #24]
   return(result);
 810e846:	69bb      	ldr	r3, [r7, #24]
 810e848:	2b00      	cmp	r3, #0
 810e84a:	d1e6      	bne.n	810e81a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 810e84c:	88fb      	ldrh	r3, [r7, #6]
 810e84e:	461a      	mov	r2, r3
 810e850:	68b9      	ldr	r1, [r7, #8]
 810e852:	68f8      	ldr	r0, [r7, #12]
 810e854:	f001 fb06 	bl	810fe64 <UART_Start_Receive_IT>
 810e858:	4603      	mov	r3, r0
 810e85a:	e000      	b.n	810e85e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810e85c:	2302      	movs	r3, #2
  }
}
 810e85e:	4618      	mov	r0, r3
 810e860:	3728      	adds	r7, #40	@ 0x28
 810e862:	46bd      	mov	sp, r7
 810e864:	bd80      	pop	{r7, pc}
 810e866:	bf00      	nop
 810e868:	58000c00 	.word	0x58000c00

0810e86c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810e86c:	b580      	push	{r7, lr}
 810e86e:	b0ba      	sub	sp, #232	@ 0xe8
 810e870:	af00      	add	r7, sp, #0
 810e872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810e874:	687b      	ldr	r3, [r7, #4]
 810e876:	681b      	ldr	r3, [r3, #0]
 810e878:	69db      	ldr	r3, [r3, #28]
 810e87a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810e87e:	687b      	ldr	r3, [r7, #4]
 810e880:	681b      	ldr	r3, [r3, #0]
 810e882:	681b      	ldr	r3, [r3, #0]
 810e884:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810e888:	687b      	ldr	r3, [r7, #4]
 810e88a:	681b      	ldr	r3, [r3, #0]
 810e88c:	689b      	ldr	r3, [r3, #8]
 810e88e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810e892:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 810e896:	f640 030f 	movw	r3, #2063	@ 0x80f
 810e89a:	4013      	ands	r3, r2
 810e89c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810e8a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810e8a4:	2b00      	cmp	r3, #0
 810e8a6:	d11b      	bne.n	810e8e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810e8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e8ac:	f003 0320 	and.w	r3, r3, #32
 810e8b0:	2b00      	cmp	r3, #0
 810e8b2:	d015      	beq.n	810e8e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810e8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810e8b8:	f003 0320 	and.w	r3, r3, #32
 810e8bc:	2b00      	cmp	r3, #0
 810e8be:	d105      	bne.n	810e8cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810e8c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810e8c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810e8c8:	2b00      	cmp	r3, #0
 810e8ca:	d009      	beq.n	810e8e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 810e8cc:	687b      	ldr	r3, [r7, #4]
 810e8ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810e8d0:	2b00      	cmp	r3, #0
 810e8d2:	f000 8379 	beq.w	810efc8 <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 810e8d6:	687b      	ldr	r3, [r7, #4]
 810e8d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810e8da:	6878      	ldr	r0, [r7, #4]
 810e8dc:	4798      	blx	r3
      }
      return;
 810e8de:	e373      	b.n	810efc8 <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810e8e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810e8e4:	2b00      	cmp	r3, #0
 810e8e6:	f000 8123 	beq.w	810eb30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810e8ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810e8ee:	4b8d      	ldr	r3, [pc, #564]	@ (810eb24 <HAL_UART_IRQHandler+0x2b8>)
 810e8f0:	4013      	ands	r3, r2
 810e8f2:	2b00      	cmp	r3, #0
 810e8f4:	d106      	bne.n	810e904 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810e8f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 810e8fa:	4b8b      	ldr	r3, [pc, #556]	@ (810eb28 <HAL_UART_IRQHandler+0x2bc>)
 810e8fc:	4013      	ands	r3, r2
 810e8fe:	2b00      	cmp	r3, #0
 810e900:	f000 8116 	beq.w	810eb30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810e904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e908:	f003 0301 	and.w	r3, r3, #1
 810e90c:	2b00      	cmp	r3, #0
 810e90e:	d011      	beq.n	810e934 <HAL_UART_IRQHandler+0xc8>
 810e910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810e914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e918:	2b00      	cmp	r3, #0
 810e91a:	d00b      	beq.n	810e934 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810e91c:	687b      	ldr	r3, [r7, #4]
 810e91e:	681b      	ldr	r3, [r3, #0]
 810e920:	2201      	movs	r2, #1
 810e922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810e924:	687b      	ldr	r3, [r7, #4]
 810e926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e92a:	f043 0201 	orr.w	r2, r3, #1
 810e92e:	687b      	ldr	r3, [r7, #4]
 810e930:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e938:	f003 0302 	and.w	r3, r3, #2
 810e93c:	2b00      	cmp	r3, #0
 810e93e:	d011      	beq.n	810e964 <HAL_UART_IRQHandler+0xf8>
 810e940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810e944:	f003 0301 	and.w	r3, r3, #1
 810e948:	2b00      	cmp	r3, #0
 810e94a:	d00b      	beq.n	810e964 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810e94c:	687b      	ldr	r3, [r7, #4]
 810e94e:	681b      	ldr	r3, [r3, #0]
 810e950:	2202      	movs	r2, #2
 810e952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810e954:	687b      	ldr	r3, [r7, #4]
 810e956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e95a:	f043 0204 	orr.w	r2, r3, #4
 810e95e:	687b      	ldr	r3, [r7, #4]
 810e960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e968:	f003 0304 	and.w	r3, r3, #4
 810e96c:	2b00      	cmp	r3, #0
 810e96e:	d011      	beq.n	810e994 <HAL_UART_IRQHandler+0x128>
 810e970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810e974:	f003 0301 	and.w	r3, r3, #1
 810e978:	2b00      	cmp	r3, #0
 810e97a:	d00b      	beq.n	810e994 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810e97c:	687b      	ldr	r3, [r7, #4]
 810e97e:	681b      	ldr	r3, [r3, #0]
 810e980:	2204      	movs	r2, #4
 810e982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810e984:	687b      	ldr	r3, [r7, #4]
 810e986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e98a:	f043 0202 	orr.w	r2, r3, #2
 810e98e:	687b      	ldr	r3, [r7, #4]
 810e990:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810e994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e998:	f003 0308 	and.w	r3, r3, #8
 810e99c:	2b00      	cmp	r3, #0
 810e99e:	d017      	beq.n	810e9d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810e9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810e9a4:	f003 0320 	and.w	r3, r3, #32
 810e9a8:	2b00      	cmp	r3, #0
 810e9aa:	d105      	bne.n	810e9b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810e9ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810e9b0:	4b5c      	ldr	r3, [pc, #368]	@ (810eb24 <HAL_UART_IRQHandler+0x2b8>)
 810e9b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810e9b4:	2b00      	cmp	r3, #0
 810e9b6:	d00b      	beq.n	810e9d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810e9b8:	687b      	ldr	r3, [r7, #4]
 810e9ba:	681b      	ldr	r3, [r3, #0]
 810e9bc:	2208      	movs	r2, #8
 810e9be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810e9c0:	687b      	ldr	r3, [r7, #4]
 810e9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e9c6:	f043 0208 	orr.w	r2, r3, #8
 810e9ca:	687b      	ldr	r3, [r7, #4]
 810e9cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810e9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810e9d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810e9d8:	2b00      	cmp	r3, #0
 810e9da:	d012      	beq.n	810ea02 <HAL_UART_IRQHandler+0x196>
 810e9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810e9e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810e9e4:	2b00      	cmp	r3, #0
 810e9e6:	d00c      	beq.n	810ea02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810e9e8:	687b      	ldr	r3, [r7, #4]
 810e9ea:	681b      	ldr	r3, [r3, #0]
 810e9ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810e9f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810e9f2:	687b      	ldr	r3, [r7, #4]
 810e9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e9f8:	f043 0220 	orr.w	r2, r3, #32
 810e9fc:	687b      	ldr	r3, [r7, #4]
 810e9fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810ea02:	687b      	ldr	r3, [r7, #4]
 810ea04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea08:	2b00      	cmp	r3, #0
 810ea0a:	f000 82df 	beq.w	810efcc <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810ea0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ea12:	f003 0320 	and.w	r3, r3, #32
 810ea16:	2b00      	cmp	r3, #0
 810ea18:	d013      	beq.n	810ea42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810ea1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ea1e:	f003 0320 	and.w	r3, r3, #32
 810ea22:	2b00      	cmp	r3, #0
 810ea24:	d105      	bne.n	810ea32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810ea26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810ea2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810ea2e:	2b00      	cmp	r3, #0
 810ea30:	d007      	beq.n	810ea42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810ea32:	687b      	ldr	r3, [r7, #4]
 810ea34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810ea36:	2b00      	cmp	r3, #0
 810ea38:	d003      	beq.n	810ea42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810ea3a:	687b      	ldr	r3, [r7, #4]
 810ea3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810ea3e:	6878      	ldr	r0, [r7, #4]
 810ea40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810ea42:	687b      	ldr	r3, [r7, #4]
 810ea44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810ea4c:	687b      	ldr	r3, [r7, #4]
 810ea4e:	681b      	ldr	r3, [r3, #0]
 810ea50:	689b      	ldr	r3, [r3, #8]
 810ea52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ea56:	2b40      	cmp	r3, #64	@ 0x40
 810ea58:	d005      	beq.n	810ea66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810ea5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810ea5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810ea62:	2b00      	cmp	r3, #0
 810ea64:	d054      	beq.n	810eb10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810ea66:	6878      	ldr	r0, [r7, #4]
 810ea68:	f001 fb1e 	bl	81100a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ea6c:	687b      	ldr	r3, [r7, #4]
 810ea6e:	681b      	ldr	r3, [r3, #0]
 810ea70:	689b      	ldr	r3, [r3, #8]
 810ea72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ea76:	2b40      	cmp	r3, #64	@ 0x40
 810ea78:	d146      	bne.n	810eb08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ea7a:	687b      	ldr	r3, [r7, #4]
 810ea7c:	681b      	ldr	r3, [r3, #0]
 810ea7e:	3308      	adds	r3, #8
 810ea80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ea84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810ea88:	e853 3f00 	ldrex	r3, [r3]
 810ea8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 810ea90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810ea94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810ea98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810ea9c:	687b      	ldr	r3, [r7, #4]
 810ea9e:	681b      	ldr	r3, [r3, #0]
 810eaa0:	3308      	adds	r3, #8
 810eaa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 810eaa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 810eaaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eaae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 810eab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 810eab6:	e841 2300 	strex	r3, r2, [r1]
 810eaba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 810eabe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810eac2:	2b00      	cmp	r3, #0
 810eac4:	d1d9      	bne.n	810ea7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810eac6:	687b      	ldr	r3, [r7, #4]
 810eac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eacc:	2b00      	cmp	r3, #0
 810eace:	d017      	beq.n	810eb00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810ead0:	687b      	ldr	r3, [r7, #4]
 810ead2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ead6:	4a15      	ldr	r2, [pc, #84]	@ (810eb2c <HAL_UART_IRQHandler+0x2c0>)
 810ead8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810eada:	687b      	ldr	r3, [r7, #4]
 810eadc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eae0:	4618      	mov	r0, r3
 810eae2:	f7f8 fdd5 	bl	8107690 <HAL_DMA_Abort_IT>
 810eae6:	4603      	mov	r3, r0
 810eae8:	2b00      	cmp	r3, #0
 810eaea:	d019      	beq.n	810eb20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810eaec:	687b      	ldr	r3, [r7, #4]
 810eaee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eaf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810eaf4:	687a      	ldr	r2, [r7, #4]
 810eaf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 810eafa:	4610      	mov	r0, r2
 810eafc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eafe:	e00f      	b.n	810eb20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810eb00:	6878      	ldr	r0, [r7, #4]
 810eb02:	f000 fa77 	bl	810eff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb06:	e00b      	b.n	810eb20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810eb08:	6878      	ldr	r0, [r7, #4]
 810eb0a:	f000 fa73 	bl	810eff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb0e:	e007      	b.n	810eb20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810eb10:	6878      	ldr	r0, [r7, #4]
 810eb12:	f000 fa6f 	bl	810eff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810eb16:	687b      	ldr	r3, [r7, #4]
 810eb18:	2200      	movs	r2, #0
 810eb1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810eb1e:	e255      	b.n	810efcc <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb20:	bf00      	nop
    return;
 810eb22:	e253      	b.n	810efcc <HAL_UART_IRQHandler+0x760>
 810eb24:	10000001 	.word	0x10000001
 810eb28:	04000120 	.word	0x04000120
 810eb2c:	08110175 	.word	0x08110175

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810eb30:	687b      	ldr	r3, [r7, #4]
 810eb32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810eb34:	2b01      	cmp	r3, #1
 810eb36:	f040 81e9 	bne.w	810ef0c <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810eb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810eb3e:	f003 0310 	and.w	r3, r3, #16
 810eb42:	2b00      	cmp	r3, #0
 810eb44:	f000 81e2 	beq.w	810ef0c <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810eb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810eb4c:	f003 0310 	and.w	r3, r3, #16
 810eb50:	2b00      	cmp	r3, #0
 810eb52:	f000 81db 	beq.w	810ef0c <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810eb56:	687b      	ldr	r3, [r7, #4]
 810eb58:	681b      	ldr	r3, [r3, #0]
 810eb5a:	2210      	movs	r2, #16
 810eb5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810eb5e:	687b      	ldr	r3, [r7, #4]
 810eb60:	681b      	ldr	r3, [r3, #0]
 810eb62:	689b      	ldr	r3, [r3, #8]
 810eb64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810eb68:	2b40      	cmp	r3, #64	@ 0x40
 810eb6a:	f040 8151 	bne.w	810ee10 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810eb6e:	687b      	ldr	r3, [r7, #4]
 810eb70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eb74:	681b      	ldr	r3, [r3, #0]
 810eb76:	4a96      	ldr	r2, [pc, #600]	@ (810edd0 <HAL_UART_IRQHandler+0x564>)
 810eb78:	4293      	cmp	r3, r2
 810eb7a:	d068      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810eb7c:	687b      	ldr	r3, [r7, #4]
 810eb7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eb82:	681b      	ldr	r3, [r3, #0]
 810eb84:	4a93      	ldr	r2, [pc, #588]	@ (810edd4 <HAL_UART_IRQHandler+0x568>)
 810eb86:	4293      	cmp	r3, r2
 810eb88:	d061      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810eb8a:	687b      	ldr	r3, [r7, #4]
 810eb8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eb90:	681b      	ldr	r3, [r3, #0]
 810eb92:	4a91      	ldr	r2, [pc, #580]	@ (810edd8 <HAL_UART_IRQHandler+0x56c>)
 810eb94:	4293      	cmp	r3, r2
 810eb96:	d05a      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810eb98:	687b      	ldr	r3, [r7, #4]
 810eb9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eb9e:	681b      	ldr	r3, [r3, #0]
 810eba0:	4a8e      	ldr	r2, [pc, #568]	@ (810eddc <HAL_UART_IRQHandler+0x570>)
 810eba2:	4293      	cmp	r3, r2
 810eba4:	d053      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810eba6:	687b      	ldr	r3, [r7, #4]
 810eba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebac:	681b      	ldr	r3, [r3, #0]
 810ebae:	4a8c      	ldr	r2, [pc, #560]	@ (810ede0 <HAL_UART_IRQHandler+0x574>)
 810ebb0:	4293      	cmp	r3, r2
 810ebb2:	d04c      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ebb4:	687b      	ldr	r3, [r7, #4]
 810ebb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebba:	681b      	ldr	r3, [r3, #0]
 810ebbc:	4a89      	ldr	r2, [pc, #548]	@ (810ede4 <HAL_UART_IRQHandler+0x578>)
 810ebbe:	4293      	cmp	r3, r2
 810ebc0:	d045      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ebc2:	687b      	ldr	r3, [r7, #4]
 810ebc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebc8:	681b      	ldr	r3, [r3, #0]
 810ebca:	4a87      	ldr	r2, [pc, #540]	@ (810ede8 <HAL_UART_IRQHandler+0x57c>)
 810ebcc:	4293      	cmp	r3, r2
 810ebce:	d03e      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ebd0:	687b      	ldr	r3, [r7, #4]
 810ebd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebd6:	681b      	ldr	r3, [r3, #0]
 810ebd8:	4a84      	ldr	r2, [pc, #528]	@ (810edec <HAL_UART_IRQHandler+0x580>)
 810ebda:	4293      	cmp	r3, r2
 810ebdc:	d037      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ebde:	687b      	ldr	r3, [r7, #4]
 810ebe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebe4:	681b      	ldr	r3, [r3, #0]
 810ebe6:	4a82      	ldr	r2, [pc, #520]	@ (810edf0 <HAL_UART_IRQHandler+0x584>)
 810ebe8:	4293      	cmp	r3, r2
 810ebea:	d030      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ebec:	687b      	ldr	r3, [r7, #4]
 810ebee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ebf2:	681b      	ldr	r3, [r3, #0]
 810ebf4:	4a7f      	ldr	r2, [pc, #508]	@ (810edf4 <HAL_UART_IRQHandler+0x588>)
 810ebf6:	4293      	cmp	r3, r2
 810ebf8:	d029      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ebfa:	687b      	ldr	r3, [r7, #4]
 810ebfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec00:	681b      	ldr	r3, [r3, #0]
 810ec02:	4a7d      	ldr	r2, [pc, #500]	@ (810edf8 <HAL_UART_IRQHandler+0x58c>)
 810ec04:	4293      	cmp	r3, r2
 810ec06:	d022      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ec08:	687b      	ldr	r3, [r7, #4]
 810ec0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec0e:	681b      	ldr	r3, [r3, #0]
 810ec10:	4a7a      	ldr	r2, [pc, #488]	@ (810edfc <HAL_UART_IRQHandler+0x590>)
 810ec12:	4293      	cmp	r3, r2
 810ec14:	d01b      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ec16:	687b      	ldr	r3, [r7, #4]
 810ec18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec1c:	681b      	ldr	r3, [r3, #0]
 810ec1e:	4a78      	ldr	r2, [pc, #480]	@ (810ee00 <HAL_UART_IRQHandler+0x594>)
 810ec20:	4293      	cmp	r3, r2
 810ec22:	d014      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ec24:	687b      	ldr	r3, [r7, #4]
 810ec26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec2a:	681b      	ldr	r3, [r3, #0]
 810ec2c:	4a75      	ldr	r2, [pc, #468]	@ (810ee04 <HAL_UART_IRQHandler+0x598>)
 810ec2e:	4293      	cmp	r3, r2
 810ec30:	d00d      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ec32:	687b      	ldr	r3, [r7, #4]
 810ec34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec38:	681b      	ldr	r3, [r3, #0]
 810ec3a:	4a73      	ldr	r2, [pc, #460]	@ (810ee08 <HAL_UART_IRQHandler+0x59c>)
 810ec3c:	4293      	cmp	r3, r2
 810ec3e:	d006      	beq.n	810ec4e <HAL_UART_IRQHandler+0x3e2>
 810ec40:	687b      	ldr	r3, [r7, #4]
 810ec42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec46:	681b      	ldr	r3, [r3, #0]
 810ec48:	4a70      	ldr	r2, [pc, #448]	@ (810ee0c <HAL_UART_IRQHandler+0x5a0>)
 810ec4a:	4293      	cmp	r3, r2
 810ec4c:	d106      	bne.n	810ec5c <HAL_UART_IRQHandler+0x3f0>
 810ec4e:	687b      	ldr	r3, [r7, #4]
 810ec50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec54:	681b      	ldr	r3, [r3, #0]
 810ec56:	685b      	ldr	r3, [r3, #4]
 810ec58:	b29b      	uxth	r3, r3
 810ec5a:	e005      	b.n	810ec68 <HAL_UART_IRQHandler+0x3fc>
 810ec5c:	687b      	ldr	r3, [r7, #4]
 810ec5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec62:	681b      	ldr	r3, [r3, #0]
 810ec64:	685b      	ldr	r3, [r3, #4]
 810ec66:	b29b      	uxth	r3, r3
 810ec68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 810ec6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 810ec70:	2b00      	cmp	r3, #0
 810ec72:	f000 81ad 	beq.w	810efd0 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810ec76:	687b      	ldr	r3, [r7, #4]
 810ec78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ec7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810ec80:	429a      	cmp	r2, r3
 810ec82:	f080 81a5 	bcs.w	810efd0 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810ec86:	687b      	ldr	r3, [r7, #4]
 810ec88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810ec8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810ec90:	687b      	ldr	r3, [r7, #4]
 810ec92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ec96:	69db      	ldr	r3, [r3, #28]
 810ec98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ec9c:	f000 8087 	beq.w	810edae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810eca0:	687b      	ldr	r3, [r7, #4]
 810eca2:	681b      	ldr	r3, [r3, #0]
 810eca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 810ecac:	e853 3f00 	ldrex	r3, [r3]
 810ecb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 810ecb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810ecb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810ecbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810ecc0:	687b      	ldr	r3, [r7, #4]
 810ecc2:	681b      	ldr	r3, [r3, #0]
 810ecc4:	461a      	mov	r2, r3
 810ecc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 810ecca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810ecce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ecd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 810ecd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810ecda:	e841 2300 	strex	r3, r2, [r1]
 810ecde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810ece2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810ece6:	2b00      	cmp	r3, #0
 810ece8:	d1da      	bne.n	810eca0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ecea:	687b      	ldr	r3, [r7, #4]
 810ecec:	681b      	ldr	r3, [r3, #0]
 810ecee:	3308      	adds	r3, #8
 810ecf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ecf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810ecf4:	e853 3f00 	ldrex	r3, [r3]
 810ecf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810ecfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810ecfc:	f023 0301 	bic.w	r3, r3, #1
 810ed00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810ed04:	687b      	ldr	r3, [r7, #4]
 810ed06:	681b      	ldr	r3, [r3, #0]
 810ed08:	3308      	adds	r3, #8
 810ed0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 810ed0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810ed12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ed14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810ed16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810ed1a:	e841 2300 	strex	r3, r2, [r1]
 810ed1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810ed20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810ed22:	2b00      	cmp	r3, #0
 810ed24:	d1e1      	bne.n	810ecea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ed26:	687b      	ldr	r3, [r7, #4]
 810ed28:	681b      	ldr	r3, [r3, #0]
 810ed2a:	3308      	adds	r3, #8
 810ed2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ed2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810ed30:	e853 3f00 	ldrex	r3, [r3]
 810ed34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810ed36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810ed38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810ed3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810ed40:	687b      	ldr	r3, [r7, #4]
 810ed42:	681b      	ldr	r3, [r3, #0]
 810ed44:	3308      	adds	r3, #8
 810ed46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 810ed4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810ed4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ed4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810ed50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810ed52:	e841 2300 	strex	r3, r2, [r1]
 810ed56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810ed58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810ed5a:	2b00      	cmp	r3, #0
 810ed5c:	d1e3      	bne.n	810ed26 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810ed5e:	687b      	ldr	r3, [r7, #4]
 810ed60:	2220      	movs	r2, #32
 810ed62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ed66:	687b      	ldr	r3, [r7, #4]
 810ed68:	2200      	movs	r2, #0
 810ed6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ed6c:	687b      	ldr	r3, [r7, #4]
 810ed6e:	681b      	ldr	r3, [r3, #0]
 810ed70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ed72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ed74:	e853 3f00 	ldrex	r3, [r3]
 810ed78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810ed7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ed7c:	f023 0310 	bic.w	r3, r3, #16
 810ed80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810ed84:	687b      	ldr	r3, [r7, #4]
 810ed86:	681b      	ldr	r3, [r3, #0]
 810ed88:	461a      	mov	r2, r3
 810ed8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810ed8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 810ed90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ed92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810ed94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810ed96:	e841 2300 	strex	r3, r2, [r1]
 810ed9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810ed9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ed9e:	2b00      	cmp	r3, #0
 810eda0:	d1e4      	bne.n	810ed6c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810eda2:	687b      	ldr	r3, [r7, #4]
 810eda4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810eda8:	4618      	mov	r0, r3
 810edaa:	f7f8 f953 	bl	8107054 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810edae:	687b      	ldr	r3, [r7, #4]
 810edb0:	2202      	movs	r2, #2
 810edb2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810edb4:	687b      	ldr	r3, [r7, #4]
 810edb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810edba:	687b      	ldr	r3, [r7, #4]
 810edbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810edc0:	b29b      	uxth	r3, r3
 810edc2:	1ad3      	subs	r3, r2, r3
 810edc4:	b29b      	uxth	r3, r3
 810edc6:	4619      	mov	r1, r3
 810edc8:	6878      	ldr	r0, [r7, #4]
 810edca:	f000 f91d 	bl	810f008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810edce:	e0ff      	b.n	810efd0 <HAL_UART_IRQHandler+0x764>
 810edd0:	40020010 	.word	0x40020010
 810edd4:	40020028 	.word	0x40020028
 810edd8:	40020040 	.word	0x40020040
 810eddc:	40020058 	.word	0x40020058
 810ede0:	40020070 	.word	0x40020070
 810ede4:	40020088 	.word	0x40020088
 810ede8:	400200a0 	.word	0x400200a0
 810edec:	400200b8 	.word	0x400200b8
 810edf0:	40020410 	.word	0x40020410
 810edf4:	40020428 	.word	0x40020428
 810edf8:	40020440 	.word	0x40020440
 810edfc:	40020458 	.word	0x40020458
 810ee00:	40020470 	.word	0x40020470
 810ee04:	40020488 	.word	0x40020488
 810ee08:	400204a0 	.word	0x400204a0
 810ee0c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810ee10:	687b      	ldr	r3, [r7, #4]
 810ee12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810ee16:	687b      	ldr	r3, [r7, #4]
 810ee18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ee1c:	b29b      	uxth	r3, r3
 810ee1e:	1ad3      	subs	r3, r2, r3
 810ee20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 810ee24:	687b      	ldr	r3, [r7, #4]
 810ee26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ee2a:	b29b      	uxth	r3, r3
 810ee2c:	2b00      	cmp	r3, #0
 810ee2e:	f000 80d1 	beq.w	810efd4 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 810ee32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810ee36:	2b00      	cmp	r3, #0
 810ee38:	f000 80cc 	beq.w	810efd4 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ee3c:	687b      	ldr	r3, [r7, #4]
 810ee3e:	681b      	ldr	r3, [r3, #0]
 810ee40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ee42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ee44:	e853 3f00 	ldrex	r3, [r3]
 810ee48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810ee4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ee4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ee50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810ee54:	687b      	ldr	r3, [r7, #4]
 810ee56:	681b      	ldr	r3, [r3, #0]
 810ee58:	461a      	mov	r2, r3
 810ee5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 810ee5e:	647b      	str	r3, [r7, #68]	@ 0x44
 810ee60:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ee62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810ee64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ee66:	e841 2300 	strex	r3, r2, [r1]
 810ee6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810ee6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ee6e:	2b00      	cmp	r3, #0
 810ee70:	d1e4      	bne.n	810ee3c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810ee72:	687b      	ldr	r3, [r7, #4]
 810ee74:	681b      	ldr	r3, [r3, #0]
 810ee76:	3308      	adds	r3, #8
 810ee78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ee7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ee7c:	e853 3f00 	ldrex	r3, [r3]
 810ee80:	623b      	str	r3, [r7, #32]
   return(result);
 810ee82:	6a3b      	ldr	r3, [r7, #32]
 810ee84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810ee88:	f023 0301 	bic.w	r3, r3, #1
 810ee8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810ee90:	687b      	ldr	r3, [r7, #4]
 810ee92:	681b      	ldr	r3, [r3, #0]
 810ee94:	3308      	adds	r3, #8
 810ee96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810ee9a:	633a      	str	r2, [r7, #48]	@ 0x30
 810ee9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ee9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810eea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810eea2:	e841 2300 	strex	r3, r2, [r1]
 810eea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810eea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eeaa:	2b00      	cmp	r3, #0
 810eeac:	d1e1      	bne.n	810ee72 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810eeae:	687b      	ldr	r3, [r7, #4]
 810eeb0:	2220      	movs	r2, #32
 810eeb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810eeb6:	687b      	ldr	r3, [r7, #4]
 810eeb8:	2200      	movs	r2, #0
 810eeba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810eebc:	687b      	ldr	r3, [r7, #4]
 810eebe:	2200      	movs	r2, #0
 810eec0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810eec2:	687b      	ldr	r3, [r7, #4]
 810eec4:	681b      	ldr	r3, [r3, #0]
 810eec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eec8:	693b      	ldr	r3, [r7, #16]
 810eeca:	e853 3f00 	ldrex	r3, [r3]
 810eece:	60fb      	str	r3, [r7, #12]
   return(result);
 810eed0:	68fb      	ldr	r3, [r7, #12]
 810eed2:	f023 0310 	bic.w	r3, r3, #16
 810eed6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810eeda:	687b      	ldr	r3, [r7, #4]
 810eedc:	681b      	ldr	r3, [r3, #0]
 810eede:	461a      	mov	r2, r3
 810eee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 810eee4:	61fb      	str	r3, [r7, #28]
 810eee6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eee8:	69b9      	ldr	r1, [r7, #24]
 810eeea:	69fa      	ldr	r2, [r7, #28]
 810eeec:	e841 2300 	strex	r3, r2, [r1]
 810eef0:	617b      	str	r3, [r7, #20]
   return(result);
 810eef2:	697b      	ldr	r3, [r7, #20]
 810eef4:	2b00      	cmp	r3, #0
 810eef6:	d1e4      	bne.n	810eec2 <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810eef8:	687b      	ldr	r3, [r7, #4]
 810eefa:	2202      	movs	r2, #2
 810eefc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810eefe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810ef02:	4619      	mov	r1, r3
 810ef04:	6878      	ldr	r0, [r7, #4]
 810ef06:	f000 f87f 	bl	810f008 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810ef0a:	e063      	b.n	810efd4 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810ef0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ef10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810ef14:	2b00      	cmp	r3, #0
 810ef16:	d00e      	beq.n	810ef36 <HAL_UART_IRQHandler+0x6ca>
 810ef18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810ef1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810ef20:	2b00      	cmp	r3, #0
 810ef22:	d008      	beq.n	810ef36 <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810ef24:	687b      	ldr	r3, [r7, #4]
 810ef26:	681b      	ldr	r3, [r3, #0]
 810ef28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 810ef2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810ef2e:	6878      	ldr	r0, [r7, #4]
 810ef30:	f001 fe7e 	bl	8110c30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810ef34:	e051      	b.n	810efda <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810ef36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ef3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ef3e:	2b00      	cmp	r3, #0
 810ef40:	d014      	beq.n	810ef6c <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810ef42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ef46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ef4a:	2b00      	cmp	r3, #0
 810ef4c:	d105      	bne.n	810ef5a <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810ef4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810ef52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810ef56:	2b00      	cmp	r3, #0
 810ef58:	d008      	beq.n	810ef6c <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 810ef5a:	687b      	ldr	r3, [r7, #4]
 810ef5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ef5e:	2b00      	cmp	r3, #0
 810ef60:	d03a      	beq.n	810efd8 <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 810ef62:	687b      	ldr	r3, [r7, #4]
 810ef64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810ef66:	6878      	ldr	r0, [r7, #4]
 810ef68:	4798      	blx	r3
    }
    return;
 810ef6a:	e035      	b.n	810efd8 <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810ef6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ef70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ef74:	2b00      	cmp	r3, #0
 810ef76:	d009      	beq.n	810ef8c <HAL_UART_IRQHandler+0x720>
 810ef78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ef7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810ef80:	2b00      	cmp	r3, #0
 810ef82:	d003      	beq.n	810ef8c <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 810ef84:	6878      	ldr	r0, [r7, #4]
 810ef86:	f001 f90b 	bl	81101a0 <UART_EndTransmit_IT>
    return;
 810ef8a:	e026      	b.n	810efda <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810ef8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ef90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810ef94:	2b00      	cmp	r3, #0
 810ef96:	d009      	beq.n	810efac <HAL_UART_IRQHandler+0x740>
 810ef98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ef9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810efa0:	2b00      	cmp	r3, #0
 810efa2:	d003      	beq.n	810efac <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810efa4:	6878      	ldr	r0, [r7, #4]
 810efa6:	f001 fe57 	bl	8110c58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810efaa:	e016      	b.n	810efda <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810efac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810efb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810efb4:	2b00      	cmp	r3, #0
 810efb6:	d010      	beq.n	810efda <HAL_UART_IRQHandler+0x76e>
 810efb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810efbc:	2b00      	cmp	r3, #0
 810efbe:	da0c      	bge.n	810efda <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810efc0:	6878      	ldr	r0, [r7, #4]
 810efc2:	f001 fe3f 	bl	8110c44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810efc6:	e008      	b.n	810efda <HAL_UART_IRQHandler+0x76e>
      return;
 810efc8:	bf00      	nop
 810efca:	e006      	b.n	810efda <HAL_UART_IRQHandler+0x76e>
    return;
 810efcc:	bf00      	nop
 810efce:	e004      	b.n	810efda <HAL_UART_IRQHandler+0x76e>
      return;
 810efd0:	bf00      	nop
 810efd2:	e002      	b.n	810efda <HAL_UART_IRQHandler+0x76e>
      return;
 810efd4:	bf00      	nop
 810efd6:	e000      	b.n	810efda <HAL_UART_IRQHandler+0x76e>
    return;
 810efd8:	bf00      	nop
  }
}
 810efda:	37e8      	adds	r7, #232	@ 0xe8
 810efdc:	46bd      	mov	sp, r7
 810efde:	bd80      	pop	{r7, pc}

0810efe0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810efe0:	b480      	push	{r7}
 810efe2:	b083      	sub	sp, #12
 810efe4:	af00      	add	r7, sp, #0
 810efe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810efe8:	bf00      	nop
 810efea:	370c      	adds	r7, #12
 810efec:	46bd      	mov	sp, r7
 810efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eff2:	4770      	bx	lr

0810eff4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810eff4:	b480      	push	{r7}
 810eff6:	b083      	sub	sp, #12
 810eff8:	af00      	add	r7, sp, #0
 810effa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810effc:	bf00      	nop
 810effe:	370c      	adds	r7, #12
 810f000:	46bd      	mov	sp, r7
 810f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f006:	4770      	bx	lr

0810f008 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810f008:	b480      	push	{r7}
 810f00a:	b083      	sub	sp, #12
 810f00c:	af00      	add	r7, sp, #0
 810f00e:	6078      	str	r0, [r7, #4]
 810f010:	460b      	mov	r3, r1
 810f012:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810f014:	bf00      	nop
 810f016:	370c      	adds	r7, #12
 810f018:	46bd      	mov	sp, r7
 810f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f01e:	4770      	bx	lr

0810f020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810f020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810f024:	b092      	sub	sp, #72	@ 0x48
 810f026:	af00      	add	r7, sp, #0
 810f028:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810f02a:	2300      	movs	r3, #0
 810f02c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810f030:	697b      	ldr	r3, [r7, #20]
 810f032:	689a      	ldr	r2, [r3, #8]
 810f034:	697b      	ldr	r3, [r7, #20]
 810f036:	691b      	ldr	r3, [r3, #16]
 810f038:	431a      	orrs	r2, r3
 810f03a:	697b      	ldr	r3, [r7, #20]
 810f03c:	695b      	ldr	r3, [r3, #20]
 810f03e:	431a      	orrs	r2, r3
 810f040:	697b      	ldr	r3, [r7, #20]
 810f042:	69db      	ldr	r3, [r3, #28]
 810f044:	4313      	orrs	r3, r2
 810f046:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810f048:	697b      	ldr	r3, [r7, #20]
 810f04a:	681b      	ldr	r3, [r3, #0]
 810f04c:	681a      	ldr	r2, [r3, #0]
 810f04e:	4bbd      	ldr	r3, [pc, #756]	@ (810f344 <UART_SetConfig+0x324>)
 810f050:	4013      	ands	r3, r2
 810f052:	697a      	ldr	r2, [r7, #20]
 810f054:	6812      	ldr	r2, [r2, #0]
 810f056:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810f058:	430b      	orrs	r3, r1
 810f05a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810f05c:	697b      	ldr	r3, [r7, #20]
 810f05e:	681b      	ldr	r3, [r3, #0]
 810f060:	685b      	ldr	r3, [r3, #4]
 810f062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810f066:	697b      	ldr	r3, [r7, #20]
 810f068:	68da      	ldr	r2, [r3, #12]
 810f06a:	697b      	ldr	r3, [r7, #20]
 810f06c:	681b      	ldr	r3, [r3, #0]
 810f06e:	430a      	orrs	r2, r1
 810f070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810f072:	697b      	ldr	r3, [r7, #20]
 810f074:	699b      	ldr	r3, [r3, #24]
 810f076:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810f078:	697b      	ldr	r3, [r7, #20]
 810f07a:	681b      	ldr	r3, [r3, #0]
 810f07c:	4ab2      	ldr	r2, [pc, #712]	@ (810f348 <UART_SetConfig+0x328>)
 810f07e:	4293      	cmp	r3, r2
 810f080:	d004      	beq.n	810f08c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810f082:	697b      	ldr	r3, [r7, #20]
 810f084:	6a1b      	ldr	r3, [r3, #32]
 810f086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810f088:	4313      	orrs	r3, r2
 810f08a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810f08c:	697b      	ldr	r3, [r7, #20]
 810f08e:	681b      	ldr	r3, [r3, #0]
 810f090:	689b      	ldr	r3, [r3, #8]
 810f092:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810f096:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810f09a:	697a      	ldr	r2, [r7, #20]
 810f09c:	6812      	ldr	r2, [r2, #0]
 810f09e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810f0a0:	430b      	orrs	r3, r1
 810f0a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810f0a4:	697b      	ldr	r3, [r7, #20]
 810f0a6:	681b      	ldr	r3, [r3, #0]
 810f0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f0aa:	f023 010f 	bic.w	r1, r3, #15
 810f0ae:	697b      	ldr	r3, [r7, #20]
 810f0b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810f0b2:	697b      	ldr	r3, [r7, #20]
 810f0b4:	681b      	ldr	r3, [r3, #0]
 810f0b6:	430a      	orrs	r2, r1
 810f0b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810f0ba:	697b      	ldr	r3, [r7, #20]
 810f0bc:	681b      	ldr	r3, [r3, #0]
 810f0be:	4aa3      	ldr	r2, [pc, #652]	@ (810f34c <UART_SetConfig+0x32c>)
 810f0c0:	4293      	cmp	r3, r2
 810f0c2:	d177      	bne.n	810f1b4 <UART_SetConfig+0x194>
 810f0c4:	4ba2      	ldr	r3, [pc, #648]	@ (810f350 <UART_SetConfig+0x330>)
 810f0c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f0c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810f0cc:	2b28      	cmp	r3, #40	@ 0x28
 810f0ce:	d86d      	bhi.n	810f1ac <UART_SetConfig+0x18c>
 810f0d0:	a201      	add	r2, pc, #4	@ (adr r2, 810f0d8 <UART_SetConfig+0xb8>)
 810f0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f0d6:	bf00      	nop
 810f0d8:	0810f17d 	.word	0x0810f17d
 810f0dc:	0810f1ad 	.word	0x0810f1ad
 810f0e0:	0810f1ad 	.word	0x0810f1ad
 810f0e4:	0810f1ad 	.word	0x0810f1ad
 810f0e8:	0810f1ad 	.word	0x0810f1ad
 810f0ec:	0810f1ad 	.word	0x0810f1ad
 810f0f0:	0810f1ad 	.word	0x0810f1ad
 810f0f4:	0810f1ad 	.word	0x0810f1ad
 810f0f8:	0810f185 	.word	0x0810f185
 810f0fc:	0810f1ad 	.word	0x0810f1ad
 810f100:	0810f1ad 	.word	0x0810f1ad
 810f104:	0810f1ad 	.word	0x0810f1ad
 810f108:	0810f1ad 	.word	0x0810f1ad
 810f10c:	0810f1ad 	.word	0x0810f1ad
 810f110:	0810f1ad 	.word	0x0810f1ad
 810f114:	0810f1ad 	.word	0x0810f1ad
 810f118:	0810f18d 	.word	0x0810f18d
 810f11c:	0810f1ad 	.word	0x0810f1ad
 810f120:	0810f1ad 	.word	0x0810f1ad
 810f124:	0810f1ad 	.word	0x0810f1ad
 810f128:	0810f1ad 	.word	0x0810f1ad
 810f12c:	0810f1ad 	.word	0x0810f1ad
 810f130:	0810f1ad 	.word	0x0810f1ad
 810f134:	0810f1ad 	.word	0x0810f1ad
 810f138:	0810f195 	.word	0x0810f195
 810f13c:	0810f1ad 	.word	0x0810f1ad
 810f140:	0810f1ad 	.word	0x0810f1ad
 810f144:	0810f1ad 	.word	0x0810f1ad
 810f148:	0810f1ad 	.word	0x0810f1ad
 810f14c:	0810f1ad 	.word	0x0810f1ad
 810f150:	0810f1ad 	.word	0x0810f1ad
 810f154:	0810f1ad 	.word	0x0810f1ad
 810f158:	0810f19d 	.word	0x0810f19d
 810f15c:	0810f1ad 	.word	0x0810f1ad
 810f160:	0810f1ad 	.word	0x0810f1ad
 810f164:	0810f1ad 	.word	0x0810f1ad
 810f168:	0810f1ad 	.word	0x0810f1ad
 810f16c:	0810f1ad 	.word	0x0810f1ad
 810f170:	0810f1ad 	.word	0x0810f1ad
 810f174:	0810f1ad 	.word	0x0810f1ad
 810f178:	0810f1a5 	.word	0x0810f1a5
 810f17c:	2301      	movs	r3, #1
 810f17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f182:	e220      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f184:	2304      	movs	r3, #4
 810f186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f18a:	e21c      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f18c:	2308      	movs	r3, #8
 810f18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f192:	e218      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f194:	2310      	movs	r3, #16
 810f196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f19a:	e214      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f19c:	2320      	movs	r3, #32
 810f19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1a2:	e210      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f1a4:	2340      	movs	r3, #64	@ 0x40
 810f1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1aa:	e20c      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f1ac:	2380      	movs	r3, #128	@ 0x80
 810f1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1b2:	e208      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f1b4:	697b      	ldr	r3, [r7, #20]
 810f1b6:	681b      	ldr	r3, [r3, #0]
 810f1b8:	4a66      	ldr	r2, [pc, #408]	@ (810f354 <UART_SetConfig+0x334>)
 810f1ba:	4293      	cmp	r3, r2
 810f1bc:	d130      	bne.n	810f220 <UART_SetConfig+0x200>
 810f1be:	4b64      	ldr	r3, [pc, #400]	@ (810f350 <UART_SetConfig+0x330>)
 810f1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f1c2:	f003 0307 	and.w	r3, r3, #7
 810f1c6:	2b05      	cmp	r3, #5
 810f1c8:	d826      	bhi.n	810f218 <UART_SetConfig+0x1f8>
 810f1ca:	a201      	add	r2, pc, #4	@ (adr r2, 810f1d0 <UART_SetConfig+0x1b0>)
 810f1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f1d0:	0810f1e9 	.word	0x0810f1e9
 810f1d4:	0810f1f1 	.word	0x0810f1f1
 810f1d8:	0810f1f9 	.word	0x0810f1f9
 810f1dc:	0810f201 	.word	0x0810f201
 810f1e0:	0810f209 	.word	0x0810f209
 810f1e4:	0810f211 	.word	0x0810f211
 810f1e8:	2300      	movs	r3, #0
 810f1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1ee:	e1ea      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f1f0:	2304      	movs	r3, #4
 810f1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1f6:	e1e6      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f1f8:	2308      	movs	r3, #8
 810f1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f1fe:	e1e2      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f200:	2310      	movs	r3, #16
 810f202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f206:	e1de      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f208:	2320      	movs	r3, #32
 810f20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f20e:	e1da      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f210:	2340      	movs	r3, #64	@ 0x40
 810f212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f216:	e1d6      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f218:	2380      	movs	r3, #128	@ 0x80
 810f21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f21e:	e1d2      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f220:	697b      	ldr	r3, [r7, #20]
 810f222:	681b      	ldr	r3, [r3, #0]
 810f224:	4a4c      	ldr	r2, [pc, #304]	@ (810f358 <UART_SetConfig+0x338>)
 810f226:	4293      	cmp	r3, r2
 810f228:	d130      	bne.n	810f28c <UART_SetConfig+0x26c>
 810f22a:	4b49      	ldr	r3, [pc, #292]	@ (810f350 <UART_SetConfig+0x330>)
 810f22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f22e:	f003 0307 	and.w	r3, r3, #7
 810f232:	2b05      	cmp	r3, #5
 810f234:	d826      	bhi.n	810f284 <UART_SetConfig+0x264>
 810f236:	a201      	add	r2, pc, #4	@ (adr r2, 810f23c <UART_SetConfig+0x21c>)
 810f238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f23c:	0810f255 	.word	0x0810f255
 810f240:	0810f25d 	.word	0x0810f25d
 810f244:	0810f265 	.word	0x0810f265
 810f248:	0810f26d 	.word	0x0810f26d
 810f24c:	0810f275 	.word	0x0810f275
 810f250:	0810f27d 	.word	0x0810f27d
 810f254:	2300      	movs	r3, #0
 810f256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f25a:	e1b4      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f25c:	2304      	movs	r3, #4
 810f25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f262:	e1b0      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f264:	2308      	movs	r3, #8
 810f266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f26a:	e1ac      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f26c:	2310      	movs	r3, #16
 810f26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f272:	e1a8      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f274:	2320      	movs	r3, #32
 810f276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f27a:	e1a4      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f27c:	2340      	movs	r3, #64	@ 0x40
 810f27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f282:	e1a0      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f284:	2380      	movs	r3, #128	@ 0x80
 810f286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f28a:	e19c      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f28c:	697b      	ldr	r3, [r7, #20]
 810f28e:	681b      	ldr	r3, [r3, #0]
 810f290:	4a32      	ldr	r2, [pc, #200]	@ (810f35c <UART_SetConfig+0x33c>)
 810f292:	4293      	cmp	r3, r2
 810f294:	d130      	bne.n	810f2f8 <UART_SetConfig+0x2d8>
 810f296:	4b2e      	ldr	r3, [pc, #184]	@ (810f350 <UART_SetConfig+0x330>)
 810f298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f29a:	f003 0307 	and.w	r3, r3, #7
 810f29e:	2b05      	cmp	r3, #5
 810f2a0:	d826      	bhi.n	810f2f0 <UART_SetConfig+0x2d0>
 810f2a2:	a201      	add	r2, pc, #4	@ (adr r2, 810f2a8 <UART_SetConfig+0x288>)
 810f2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f2a8:	0810f2c1 	.word	0x0810f2c1
 810f2ac:	0810f2c9 	.word	0x0810f2c9
 810f2b0:	0810f2d1 	.word	0x0810f2d1
 810f2b4:	0810f2d9 	.word	0x0810f2d9
 810f2b8:	0810f2e1 	.word	0x0810f2e1
 810f2bc:	0810f2e9 	.word	0x0810f2e9
 810f2c0:	2300      	movs	r3, #0
 810f2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2c6:	e17e      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f2c8:	2304      	movs	r3, #4
 810f2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2ce:	e17a      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f2d0:	2308      	movs	r3, #8
 810f2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2d6:	e176      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f2d8:	2310      	movs	r3, #16
 810f2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2de:	e172      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f2e0:	2320      	movs	r3, #32
 810f2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2e6:	e16e      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f2e8:	2340      	movs	r3, #64	@ 0x40
 810f2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2ee:	e16a      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f2f0:	2380      	movs	r3, #128	@ 0x80
 810f2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f2f6:	e166      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f2f8:	697b      	ldr	r3, [r7, #20]
 810f2fa:	681b      	ldr	r3, [r3, #0]
 810f2fc:	4a18      	ldr	r2, [pc, #96]	@ (810f360 <UART_SetConfig+0x340>)
 810f2fe:	4293      	cmp	r3, r2
 810f300:	d140      	bne.n	810f384 <UART_SetConfig+0x364>
 810f302:	4b13      	ldr	r3, [pc, #76]	@ (810f350 <UART_SetConfig+0x330>)
 810f304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f306:	f003 0307 	and.w	r3, r3, #7
 810f30a:	2b05      	cmp	r3, #5
 810f30c:	d836      	bhi.n	810f37c <UART_SetConfig+0x35c>
 810f30e:	a201      	add	r2, pc, #4	@ (adr r2, 810f314 <UART_SetConfig+0x2f4>)
 810f310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f314:	0810f32d 	.word	0x0810f32d
 810f318:	0810f335 	.word	0x0810f335
 810f31c:	0810f33d 	.word	0x0810f33d
 810f320:	0810f365 	.word	0x0810f365
 810f324:	0810f36d 	.word	0x0810f36d
 810f328:	0810f375 	.word	0x0810f375
 810f32c:	2300      	movs	r3, #0
 810f32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f332:	e148      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f334:	2304      	movs	r3, #4
 810f336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f33a:	e144      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f33c:	2308      	movs	r3, #8
 810f33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f342:	e140      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f344:	cfff69f3 	.word	0xcfff69f3
 810f348:	58000c00 	.word	0x58000c00
 810f34c:	40011000 	.word	0x40011000
 810f350:	58024400 	.word	0x58024400
 810f354:	40004400 	.word	0x40004400
 810f358:	40004800 	.word	0x40004800
 810f35c:	40004c00 	.word	0x40004c00
 810f360:	40005000 	.word	0x40005000
 810f364:	2310      	movs	r3, #16
 810f366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f36a:	e12c      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f36c:	2320      	movs	r3, #32
 810f36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f372:	e128      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f374:	2340      	movs	r3, #64	@ 0x40
 810f376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f37a:	e124      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f37c:	2380      	movs	r3, #128	@ 0x80
 810f37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f382:	e120      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f384:	697b      	ldr	r3, [r7, #20]
 810f386:	681b      	ldr	r3, [r3, #0]
 810f388:	4acb      	ldr	r2, [pc, #812]	@ (810f6b8 <UART_SetConfig+0x698>)
 810f38a:	4293      	cmp	r3, r2
 810f38c:	d176      	bne.n	810f47c <UART_SetConfig+0x45c>
 810f38e:	4bcb      	ldr	r3, [pc, #812]	@ (810f6bc <UART_SetConfig+0x69c>)
 810f390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f392:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810f396:	2b28      	cmp	r3, #40	@ 0x28
 810f398:	d86c      	bhi.n	810f474 <UART_SetConfig+0x454>
 810f39a:	a201      	add	r2, pc, #4	@ (adr r2, 810f3a0 <UART_SetConfig+0x380>)
 810f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f3a0:	0810f445 	.word	0x0810f445
 810f3a4:	0810f475 	.word	0x0810f475
 810f3a8:	0810f475 	.word	0x0810f475
 810f3ac:	0810f475 	.word	0x0810f475
 810f3b0:	0810f475 	.word	0x0810f475
 810f3b4:	0810f475 	.word	0x0810f475
 810f3b8:	0810f475 	.word	0x0810f475
 810f3bc:	0810f475 	.word	0x0810f475
 810f3c0:	0810f44d 	.word	0x0810f44d
 810f3c4:	0810f475 	.word	0x0810f475
 810f3c8:	0810f475 	.word	0x0810f475
 810f3cc:	0810f475 	.word	0x0810f475
 810f3d0:	0810f475 	.word	0x0810f475
 810f3d4:	0810f475 	.word	0x0810f475
 810f3d8:	0810f475 	.word	0x0810f475
 810f3dc:	0810f475 	.word	0x0810f475
 810f3e0:	0810f455 	.word	0x0810f455
 810f3e4:	0810f475 	.word	0x0810f475
 810f3e8:	0810f475 	.word	0x0810f475
 810f3ec:	0810f475 	.word	0x0810f475
 810f3f0:	0810f475 	.word	0x0810f475
 810f3f4:	0810f475 	.word	0x0810f475
 810f3f8:	0810f475 	.word	0x0810f475
 810f3fc:	0810f475 	.word	0x0810f475
 810f400:	0810f45d 	.word	0x0810f45d
 810f404:	0810f475 	.word	0x0810f475
 810f408:	0810f475 	.word	0x0810f475
 810f40c:	0810f475 	.word	0x0810f475
 810f410:	0810f475 	.word	0x0810f475
 810f414:	0810f475 	.word	0x0810f475
 810f418:	0810f475 	.word	0x0810f475
 810f41c:	0810f475 	.word	0x0810f475
 810f420:	0810f465 	.word	0x0810f465
 810f424:	0810f475 	.word	0x0810f475
 810f428:	0810f475 	.word	0x0810f475
 810f42c:	0810f475 	.word	0x0810f475
 810f430:	0810f475 	.word	0x0810f475
 810f434:	0810f475 	.word	0x0810f475
 810f438:	0810f475 	.word	0x0810f475
 810f43c:	0810f475 	.word	0x0810f475
 810f440:	0810f46d 	.word	0x0810f46d
 810f444:	2301      	movs	r3, #1
 810f446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f44a:	e0bc      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f44c:	2304      	movs	r3, #4
 810f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f452:	e0b8      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f454:	2308      	movs	r3, #8
 810f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f45a:	e0b4      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f45c:	2310      	movs	r3, #16
 810f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f462:	e0b0      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f464:	2320      	movs	r3, #32
 810f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f46a:	e0ac      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f46c:	2340      	movs	r3, #64	@ 0x40
 810f46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f472:	e0a8      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f474:	2380      	movs	r3, #128	@ 0x80
 810f476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f47a:	e0a4      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f47c:	697b      	ldr	r3, [r7, #20]
 810f47e:	681b      	ldr	r3, [r3, #0]
 810f480:	4a8f      	ldr	r2, [pc, #572]	@ (810f6c0 <UART_SetConfig+0x6a0>)
 810f482:	4293      	cmp	r3, r2
 810f484:	d130      	bne.n	810f4e8 <UART_SetConfig+0x4c8>
 810f486:	4b8d      	ldr	r3, [pc, #564]	@ (810f6bc <UART_SetConfig+0x69c>)
 810f488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f48a:	f003 0307 	and.w	r3, r3, #7
 810f48e:	2b05      	cmp	r3, #5
 810f490:	d826      	bhi.n	810f4e0 <UART_SetConfig+0x4c0>
 810f492:	a201      	add	r2, pc, #4	@ (adr r2, 810f498 <UART_SetConfig+0x478>)
 810f494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f498:	0810f4b1 	.word	0x0810f4b1
 810f49c:	0810f4b9 	.word	0x0810f4b9
 810f4a0:	0810f4c1 	.word	0x0810f4c1
 810f4a4:	0810f4c9 	.word	0x0810f4c9
 810f4a8:	0810f4d1 	.word	0x0810f4d1
 810f4ac:	0810f4d9 	.word	0x0810f4d9
 810f4b0:	2300      	movs	r3, #0
 810f4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4b6:	e086      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f4b8:	2304      	movs	r3, #4
 810f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4be:	e082      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f4c0:	2308      	movs	r3, #8
 810f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4c6:	e07e      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f4c8:	2310      	movs	r3, #16
 810f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4ce:	e07a      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f4d0:	2320      	movs	r3, #32
 810f4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4d6:	e076      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f4d8:	2340      	movs	r3, #64	@ 0x40
 810f4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4de:	e072      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f4e0:	2380      	movs	r3, #128	@ 0x80
 810f4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f4e6:	e06e      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f4e8:	697b      	ldr	r3, [r7, #20]
 810f4ea:	681b      	ldr	r3, [r3, #0]
 810f4ec:	4a75      	ldr	r2, [pc, #468]	@ (810f6c4 <UART_SetConfig+0x6a4>)
 810f4ee:	4293      	cmp	r3, r2
 810f4f0:	d130      	bne.n	810f554 <UART_SetConfig+0x534>
 810f4f2:	4b72      	ldr	r3, [pc, #456]	@ (810f6bc <UART_SetConfig+0x69c>)
 810f4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810f4f6:	f003 0307 	and.w	r3, r3, #7
 810f4fa:	2b05      	cmp	r3, #5
 810f4fc:	d826      	bhi.n	810f54c <UART_SetConfig+0x52c>
 810f4fe:	a201      	add	r2, pc, #4	@ (adr r2, 810f504 <UART_SetConfig+0x4e4>)
 810f500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f504:	0810f51d 	.word	0x0810f51d
 810f508:	0810f525 	.word	0x0810f525
 810f50c:	0810f52d 	.word	0x0810f52d
 810f510:	0810f535 	.word	0x0810f535
 810f514:	0810f53d 	.word	0x0810f53d
 810f518:	0810f545 	.word	0x0810f545
 810f51c:	2300      	movs	r3, #0
 810f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f522:	e050      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f524:	2304      	movs	r3, #4
 810f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f52a:	e04c      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f52c:	2308      	movs	r3, #8
 810f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f532:	e048      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f534:	2310      	movs	r3, #16
 810f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f53a:	e044      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f53c:	2320      	movs	r3, #32
 810f53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f542:	e040      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f544:	2340      	movs	r3, #64	@ 0x40
 810f546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f54a:	e03c      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f54c:	2380      	movs	r3, #128	@ 0x80
 810f54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f552:	e038      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f554:	697b      	ldr	r3, [r7, #20]
 810f556:	681b      	ldr	r3, [r3, #0]
 810f558:	4a5b      	ldr	r2, [pc, #364]	@ (810f6c8 <UART_SetConfig+0x6a8>)
 810f55a:	4293      	cmp	r3, r2
 810f55c:	d130      	bne.n	810f5c0 <UART_SetConfig+0x5a0>
 810f55e:	4b57      	ldr	r3, [pc, #348]	@ (810f6bc <UART_SetConfig+0x69c>)
 810f560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810f562:	f003 0307 	and.w	r3, r3, #7
 810f566:	2b05      	cmp	r3, #5
 810f568:	d826      	bhi.n	810f5b8 <UART_SetConfig+0x598>
 810f56a:	a201      	add	r2, pc, #4	@ (adr r2, 810f570 <UART_SetConfig+0x550>)
 810f56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f570:	0810f589 	.word	0x0810f589
 810f574:	0810f591 	.word	0x0810f591
 810f578:	0810f599 	.word	0x0810f599
 810f57c:	0810f5a1 	.word	0x0810f5a1
 810f580:	0810f5a9 	.word	0x0810f5a9
 810f584:	0810f5b1 	.word	0x0810f5b1
 810f588:	2302      	movs	r3, #2
 810f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f58e:	e01a      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f590:	2304      	movs	r3, #4
 810f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f596:	e016      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f598:	2308      	movs	r3, #8
 810f59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f59e:	e012      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f5a0:	2310      	movs	r3, #16
 810f5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5a6:	e00e      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f5a8:	2320      	movs	r3, #32
 810f5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5ae:	e00a      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f5b0:	2340      	movs	r3, #64	@ 0x40
 810f5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5b6:	e006      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f5b8:	2380      	movs	r3, #128	@ 0x80
 810f5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810f5be:	e002      	b.n	810f5c6 <UART_SetConfig+0x5a6>
 810f5c0:	2380      	movs	r3, #128	@ 0x80
 810f5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810f5c6:	697b      	ldr	r3, [r7, #20]
 810f5c8:	681b      	ldr	r3, [r3, #0]
 810f5ca:	4a3f      	ldr	r2, [pc, #252]	@ (810f6c8 <UART_SetConfig+0x6a8>)
 810f5cc:	4293      	cmp	r3, r2
 810f5ce:	f040 80f8 	bne.w	810f7c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810f5d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810f5d6:	2b20      	cmp	r3, #32
 810f5d8:	dc46      	bgt.n	810f668 <UART_SetConfig+0x648>
 810f5da:	2b02      	cmp	r3, #2
 810f5dc:	f2c0 8082 	blt.w	810f6e4 <UART_SetConfig+0x6c4>
 810f5e0:	3b02      	subs	r3, #2
 810f5e2:	2b1e      	cmp	r3, #30
 810f5e4:	d87e      	bhi.n	810f6e4 <UART_SetConfig+0x6c4>
 810f5e6:	a201      	add	r2, pc, #4	@ (adr r2, 810f5ec <UART_SetConfig+0x5cc>)
 810f5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f5ec:	0810f66f 	.word	0x0810f66f
 810f5f0:	0810f6e5 	.word	0x0810f6e5
 810f5f4:	0810f677 	.word	0x0810f677
 810f5f8:	0810f6e5 	.word	0x0810f6e5
 810f5fc:	0810f6e5 	.word	0x0810f6e5
 810f600:	0810f6e5 	.word	0x0810f6e5
 810f604:	0810f687 	.word	0x0810f687
 810f608:	0810f6e5 	.word	0x0810f6e5
 810f60c:	0810f6e5 	.word	0x0810f6e5
 810f610:	0810f6e5 	.word	0x0810f6e5
 810f614:	0810f6e5 	.word	0x0810f6e5
 810f618:	0810f6e5 	.word	0x0810f6e5
 810f61c:	0810f6e5 	.word	0x0810f6e5
 810f620:	0810f6e5 	.word	0x0810f6e5
 810f624:	0810f697 	.word	0x0810f697
 810f628:	0810f6e5 	.word	0x0810f6e5
 810f62c:	0810f6e5 	.word	0x0810f6e5
 810f630:	0810f6e5 	.word	0x0810f6e5
 810f634:	0810f6e5 	.word	0x0810f6e5
 810f638:	0810f6e5 	.word	0x0810f6e5
 810f63c:	0810f6e5 	.word	0x0810f6e5
 810f640:	0810f6e5 	.word	0x0810f6e5
 810f644:	0810f6e5 	.word	0x0810f6e5
 810f648:	0810f6e5 	.word	0x0810f6e5
 810f64c:	0810f6e5 	.word	0x0810f6e5
 810f650:	0810f6e5 	.word	0x0810f6e5
 810f654:	0810f6e5 	.word	0x0810f6e5
 810f658:	0810f6e5 	.word	0x0810f6e5
 810f65c:	0810f6e5 	.word	0x0810f6e5
 810f660:	0810f6e5 	.word	0x0810f6e5
 810f664:	0810f6d7 	.word	0x0810f6d7
 810f668:	2b40      	cmp	r3, #64	@ 0x40
 810f66a:	d037      	beq.n	810f6dc <UART_SetConfig+0x6bc>
 810f66c:	e03a      	b.n	810f6e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810f66e:	f7fc fd9d 	bl	810c1ac <HAL_RCCEx_GetD3PCLK1Freq>
 810f672:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f674:	e03c      	b.n	810f6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810f676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810f67a:	4618      	mov	r0, r3
 810f67c:	f7fc fdac 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810f680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f684:	e034      	b.n	810f6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810f686:	f107 0318 	add.w	r3, r7, #24
 810f68a:	4618      	mov	r0, r3
 810f68c:	f7fc fef8 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810f690:	69fb      	ldr	r3, [r7, #28]
 810f692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f694:	e02c      	b.n	810f6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810f696:	4b09      	ldr	r3, [pc, #36]	@ (810f6bc <UART_SetConfig+0x69c>)
 810f698:	681b      	ldr	r3, [r3, #0]
 810f69a:	f003 0320 	and.w	r3, r3, #32
 810f69e:	2b00      	cmp	r3, #0
 810f6a0:	d016      	beq.n	810f6d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810f6a2:	4b06      	ldr	r3, [pc, #24]	@ (810f6bc <UART_SetConfig+0x69c>)
 810f6a4:	681b      	ldr	r3, [r3, #0]
 810f6a6:	08db      	lsrs	r3, r3, #3
 810f6a8:	f003 0303 	and.w	r3, r3, #3
 810f6ac:	4a07      	ldr	r2, [pc, #28]	@ (810f6cc <UART_SetConfig+0x6ac>)
 810f6ae:	fa22 f303 	lsr.w	r3, r2, r3
 810f6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810f6b4:	e01c      	b.n	810f6f0 <UART_SetConfig+0x6d0>
 810f6b6:	bf00      	nop
 810f6b8:	40011400 	.word	0x40011400
 810f6bc:	58024400 	.word	0x58024400
 810f6c0:	40007800 	.word	0x40007800
 810f6c4:	40007c00 	.word	0x40007c00
 810f6c8:	58000c00 	.word	0x58000c00
 810f6cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810f6d0:	4b9d      	ldr	r3, [pc, #628]	@ (810f948 <UART_SetConfig+0x928>)
 810f6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f6d4:	e00c      	b.n	810f6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810f6d6:	4b9d      	ldr	r3, [pc, #628]	@ (810f94c <UART_SetConfig+0x92c>)
 810f6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f6da:	e009      	b.n	810f6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810f6dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810f6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f6e2:	e005      	b.n	810f6f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810f6e4:	2300      	movs	r3, #0
 810f6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810f6e8:	2301      	movs	r3, #1
 810f6ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810f6ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810f6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f6f2:	2b00      	cmp	r3, #0
 810f6f4:	f000 81de 	beq.w	810fab4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810f6f8:	697b      	ldr	r3, [r7, #20]
 810f6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f6fc:	4a94      	ldr	r2, [pc, #592]	@ (810f950 <UART_SetConfig+0x930>)
 810f6fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810f702:	461a      	mov	r2, r3
 810f704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f706:	fbb3 f3f2 	udiv	r3, r3, r2
 810f70a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810f70c:	697b      	ldr	r3, [r7, #20]
 810f70e:	685a      	ldr	r2, [r3, #4]
 810f710:	4613      	mov	r3, r2
 810f712:	005b      	lsls	r3, r3, #1
 810f714:	4413      	add	r3, r2
 810f716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f718:	429a      	cmp	r2, r3
 810f71a:	d305      	bcc.n	810f728 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810f71c:	697b      	ldr	r3, [r7, #20]
 810f71e:	685b      	ldr	r3, [r3, #4]
 810f720:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810f722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f724:	429a      	cmp	r2, r3
 810f726:	d903      	bls.n	810f730 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810f728:	2301      	movs	r3, #1
 810f72a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810f72e:	e1c1      	b.n	810fab4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810f730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f732:	2200      	movs	r2, #0
 810f734:	60bb      	str	r3, [r7, #8]
 810f736:	60fa      	str	r2, [r7, #12]
 810f738:	697b      	ldr	r3, [r7, #20]
 810f73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f73c:	4a84      	ldr	r2, [pc, #528]	@ (810f950 <UART_SetConfig+0x930>)
 810f73e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810f742:	b29b      	uxth	r3, r3
 810f744:	2200      	movs	r2, #0
 810f746:	603b      	str	r3, [r7, #0]
 810f748:	607a      	str	r2, [r7, #4]
 810f74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810f74e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810f752:	f7f1 fb21 	bl	8100d98 <__aeabi_uldivmod>
 810f756:	4602      	mov	r2, r0
 810f758:	460b      	mov	r3, r1
 810f75a:	4610      	mov	r0, r2
 810f75c:	4619      	mov	r1, r3
 810f75e:	f04f 0200 	mov.w	r2, #0
 810f762:	f04f 0300 	mov.w	r3, #0
 810f766:	020b      	lsls	r3, r1, #8
 810f768:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810f76c:	0202      	lsls	r2, r0, #8
 810f76e:	6979      	ldr	r1, [r7, #20]
 810f770:	6849      	ldr	r1, [r1, #4]
 810f772:	0849      	lsrs	r1, r1, #1
 810f774:	2000      	movs	r0, #0
 810f776:	460c      	mov	r4, r1
 810f778:	4605      	mov	r5, r0
 810f77a:	eb12 0804 	adds.w	r8, r2, r4
 810f77e:	eb43 0905 	adc.w	r9, r3, r5
 810f782:	697b      	ldr	r3, [r7, #20]
 810f784:	685b      	ldr	r3, [r3, #4]
 810f786:	2200      	movs	r2, #0
 810f788:	469a      	mov	sl, r3
 810f78a:	4693      	mov	fp, r2
 810f78c:	4652      	mov	r2, sl
 810f78e:	465b      	mov	r3, fp
 810f790:	4640      	mov	r0, r8
 810f792:	4649      	mov	r1, r9
 810f794:	f7f1 fb00 	bl	8100d98 <__aeabi_uldivmod>
 810f798:	4602      	mov	r2, r0
 810f79a:	460b      	mov	r3, r1
 810f79c:	4613      	mov	r3, r2
 810f79e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810f7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f7a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810f7a6:	d308      	bcc.n	810f7ba <UART_SetConfig+0x79a>
 810f7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f7aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810f7ae:	d204      	bcs.n	810f7ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810f7b0:	697b      	ldr	r3, [r7, #20]
 810f7b2:	681b      	ldr	r3, [r3, #0]
 810f7b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810f7b6:	60da      	str	r2, [r3, #12]
 810f7b8:	e17c      	b.n	810fab4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810f7ba:	2301      	movs	r3, #1
 810f7bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810f7c0:	e178      	b.n	810fab4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810f7c2:	697b      	ldr	r3, [r7, #20]
 810f7c4:	69db      	ldr	r3, [r3, #28]
 810f7c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810f7ca:	f040 80c5 	bne.w	810f958 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810f7ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810f7d2:	2b20      	cmp	r3, #32
 810f7d4:	dc48      	bgt.n	810f868 <UART_SetConfig+0x848>
 810f7d6:	2b00      	cmp	r3, #0
 810f7d8:	db7b      	blt.n	810f8d2 <UART_SetConfig+0x8b2>
 810f7da:	2b20      	cmp	r3, #32
 810f7dc:	d879      	bhi.n	810f8d2 <UART_SetConfig+0x8b2>
 810f7de:	a201      	add	r2, pc, #4	@ (adr r2, 810f7e4 <UART_SetConfig+0x7c4>)
 810f7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f7e4:	0810f86f 	.word	0x0810f86f
 810f7e8:	0810f877 	.word	0x0810f877
 810f7ec:	0810f8d3 	.word	0x0810f8d3
 810f7f0:	0810f8d3 	.word	0x0810f8d3
 810f7f4:	0810f87f 	.word	0x0810f87f
 810f7f8:	0810f8d3 	.word	0x0810f8d3
 810f7fc:	0810f8d3 	.word	0x0810f8d3
 810f800:	0810f8d3 	.word	0x0810f8d3
 810f804:	0810f88f 	.word	0x0810f88f
 810f808:	0810f8d3 	.word	0x0810f8d3
 810f80c:	0810f8d3 	.word	0x0810f8d3
 810f810:	0810f8d3 	.word	0x0810f8d3
 810f814:	0810f8d3 	.word	0x0810f8d3
 810f818:	0810f8d3 	.word	0x0810f8d3
 810f81c:	0810f8d3 	.word	0x0810f8d3
 810f820:	0810f8d3 	.word	0x0810f8d3
 810f824:	0810f89f 	.word	0x0810f89f
 810f828:	0810f8d3 	.word	0x0810f8d3
 810f82c:	0810f8d3 	.word	0x0810f8d3
 810f830:	0810f8d3 	.word	0x0810f8d3
 810f834:	0810f8d3 	.word	0x0810f8d3
 810f838:	0810f8d3 	.word	0x0810f8d3
 810f83c:	0810f8d3 	.word	0x0810f8d3
 810f840:	0810f8d3 	.word	0x0810f8d3
 810f844:	0810f8d3 	.word	0x0810f8d3
 810f848:	0810f8d3 	.word	0x0810f8d3
 810f84c:	0810f8d3 	.word	0x0810f8d3
 810f850:	0810f8d3 	.word	0x0810f8d3
 810f854:	0810f8d3 	.word	0x0810f8d3
 810f858:	0810f8d3 	.word	0x0810f8d3
 810f85c:	0810f8d3 	.word	0x0810f8d3
 810f860:	0810f8d3 	.word	0x0810f8d3
 810f864:	0810f8c5 	.word	0x0810f8c5
 810f868:	2b40      	cmp	r3, #64	@ 0x40
 810f86a:	d02e      	beq.n	810f8ca <UART_SetConfig+0x8aa>
 810f86c:	e031      	b.n	810f8d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810f86e:	f7fa fce7 	bl	810a240 <HAL_RCC_GetPCLK1Freq>
 810f872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f874:	e033      	b.n	810f8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810f876:	f7fa fcf9 	bl	810a26c <HAL_RCC_GetPCLK2Freq>
 810f87a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f87c:	e02f      	b.n	810f8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810f87e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810f882:	4618      	mov	r0, r3
 810f884:	f7fc fca8 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810f888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f88c:	e027      	b.n	810f8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810f88e:	f107 0318 	add.w	r3, r7, #24
 810f892:	4618      	mov	r0, r3
 810f894:	f7fc fdf4 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810f898:	69fb      	ldr	r3, [r7, #28]
 810f89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f89c:	e01f      	b.n	810f8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810f89e:	4b2d      	ldr	r3, [pc, #180]	@ (810f954 <UART_SetConfig+0x934>)
 810f8a0:	681b      	ldr	r3, [r3, #0]
 810f8a2:	f003 0320 	and.w	r3, r3, #32
 810f8a6:	2b00      	cmp	r3, #0
 810f8a8:	d009      	beq.n	810f8be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810f8aa:	4b2a      	ldr	r3, [pc, #168]	@ (810f954 <UART_SetConfig+0x934>)
 810f8ac:	681b      	ldr	r3, [r3, #0]
 810f8ae:	08db      	lsrs	r3, r3, #3
 810f8b0:	f003 0303 	and.w	r3, r3, #3
 810f8b4:	4a24      	ldr	r2, [pc, #144]	@ (810f948 <UART_SetConfig+0x928>)
 810f8b6:	fa22 f303 	lsr.w	r3, r2, r3
 810f8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810f8bc:	e00f      	b.n	810f8de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810f8be:	4b22      	ldr	r3, [pc, #136]	@ (810f948 <UART_SetConfig+0x928>)
 810f8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f8c2:	e00c      	b.n	810f8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810f8c4:	4b21      	ldr	r3, [pc, #132]	@ (810f94c <UART_SetConfig+0x92c>)
 810f8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f8c8:	e009      	b.n	810f8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810f8ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810f8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f8d0:	e005      	b.n	810f8de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810f8d2:	2300      	movs	r3, #0
 810f8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810f8d6:	2301      	movs	r3, #1
 810f8d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810f8dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810f8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f8e0:	2b00      	cmp	r3, #0
 810f8e2:	f000 80e7 	beq.w	810fab4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810f8e6:	697b      	ldr	r3, [r7, #20]
 810f8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f8ea:	4a19      	ldr	r2, [pc, #100]	@ (810f950 <UART_SetConfig+0x930>)
 810f8ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810f8f0:	461a      	mov	r2, r3
 810f8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f8f4:	fbb3 f3f2 	udiv	r3, r3, r2
 810f8f8:	005a      	lsls	r2, r3, #1
 810f8fa:	697b      	ldr	r3, [r7, #20]
 810f8fc:	685b      	ldr	r3, [r3, #4]
 810f8fe:	085b      	lsrs	r3, r3, #1
 810f900:	441a      	add	r2, r3
 810f902:	697b      	ldr	r3, [r7, #20]
 810f904:	685b      	ldr	r3, [r3, #4]
 810f906:	fbb2 f3f3 	udiv	r3, r2, r3
 810f90a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810f90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f90e:	2b0f      	cmp	r3, #15
 810f910:	d916      	bls.n	810f940 <UART_SetConfig+0x920>
 810f912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f918:	d212      	bcs.n	810f940 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810f91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f91c:	b29b      	uxth	r3, r3
 810f91e:	f023 030f 	bic.w	r3, r3, #15
 810f922:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810f924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f926:	085b      	lsrs	r3, r3, #1
 810f928:	b29b      	uxth	r3, r3
 810f92a:	f003 0307 	and.w	r3, r3, #7
 810f92e:	b29a      	uxth	r2, r3
 810f930:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810f932:	4313      	orrs	r3, r2
 810f934:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810f936:	697b      	ldr	r3, [r7, #20]
 810f938:	681b      	ldr	r3, [r3, #0]
 810f93a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810f93c:	60da      	str	r2, [r3, #12]
 810f93e:	e0b9      	b.n	810fab4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810f940:	2301      	movs	r3, #1
 810f942:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810f946:	e0b5      	b.n	810fab4 <UART_SetConfig+0xa94>
 810f948:	03d09000 	.word	0x03d09000
 810f94c:	003d0900 	.word	0x003d0900
 810f950:	08115c78 	.word	0x08115c78
 810f954:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810f958:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810f95c:	2b20      	cmp	r3, #32
 810f95e:	dc49      	bgt.n	810f9f4 <UART_SetConfig+0x9d4>
 810f960:	2b00      	cmp	r3, #0
 810f962:	db7c      	blt.n	810fa5e <UART_SetConfig+0xa3e>
 810f964:	2b20      	cmp	r3, #32
 810f966:	d87a      	bhi.n	810fa5e <UART_SetConfig+0xa3e>
 810f968:	a201      	add	r2, pc, #4	@ (adr r2, 810f970 <UART_SetConfig+0x950>)
 810f96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f96e:	bf00      	nop
 810f970:	0810f9fb 	.word	0x0810f9fb
 810f974:	0810fa03 	.word	0x0810fa03
 810f978:	0810fa5f 	.word	0x0810fa5f
 810f97c:	0810fa5f 	.word	0x0810fa5f
 810f980:	0810fa0b 	.word	0x0810fa0b
 810f984:	0810fa5f 	.word	0x0810fa5f
 810f988:	0810fa5f 	.word	0x0810fa5f
 810f98c:	0810fa5f 	.word	0x0810fa5f
 810f990:	0810fa1b 	.word	0x0810fa1b
 810f994:	0810fa5f 	.word	0x0810fa5f
 810f998:	0810fa5f 	.word	0x0810fa5f
 810f99c:	0810fa5f 	.word	0x0810fa5f
 810f9a0:	0810fa5f 	.word	0x0810fa5f
 810f9a4:	0810fa5f 	.word	0x0810fa5f
 810f9a8:	0810fa5f 	.word	0x0810fa5f
 810f9ac:	0810fa5f 	.word	0x0810fa5f
 810f9b0:	0810fa2b 	.word	0x0810fa2b
 810f9b4:	0810fa5f 	.word	0x0810fa5f
 810f9b8:	0810fa5f 	.word	0x0810fa5f
 810f9bc:	0810fa5f 	.word	0x0810fa5f
 810f9c0:	0810fa5f 	.word	0x0810fa5f
 810f9c4:	0810fa5f 	.word	0x0810fa5f
 810f9c8:	0810fa5f 	.word	0x0810fa5f
 810f9cc:	0810fa5f 	.word	0x0810fa5f
 810f9d0:	0810fa5f 	.word	0x0810fa5f
 810f9d4:	0810fa5f 	.word	0x0810fa5f
 810f9d8:	0810fa5f 	.word	0x0810fa5f
 810f9dc:	0810fa5f 	.word	0x0810fa5f
 810f9e0:	0810fa5f 	.word	0x0810fa5f
 810f9e4:	0810fa5f 	.word	0x0810fa5f
 810f9e8:	0810fa5f 	.word	0x0810fa5f
 810f9ec:	0810fa5f 	.word	0x0810fa5f
 810f9f0:	0810fa51 	.word	0x0810fa51
 810f9f4:	2b40      	cmp	r3, #64	@ 0x40
 810f9f6:	d02e      	beq.n	810fa56 <UART_SetConfig+0xa36>
 810f9f8:	e031      	b.n	810fa5e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810f9fa:	f7fa fc21 	bl	810a240 <HAL_RCC_GetPCLK1Freq>
 810f9fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810fa00:	e033      	b.n	810fa6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810fa02:	f7fa fc33 	bl	810a26c <HAL_RCC_GetPCLK2Freq>
 810fa06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810fa08:	e02f      	b.n	810fa6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810fa0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810fa0e:	4618      	mov	r0, r3
 810fa10:	f7fc fbe2 	bl	810c1d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810fa14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa18:	e027      	b.n	810fa6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810fa1a:	f107 0318 	add.w	r3, r7, #24
 810fa1e:	4618      	mov	r0, r3
 810fa20:	f7fc fd2e 	bl	810c480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810fa24:	69fb      	ldr	r3, [r7, #28]
 810fa26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa28:	e01f      	b.n	810fa6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810fa2a:	4b2d      	ldr	r3, [pc, #180]	@ (810fae0 <UART_SetConfig+0xac0>)
 810fa2c:	681b      	ldr	r3, [r3, #0]
 810fa2e:	f003 0320 	and.w	r3, r3, #32
 810fa32:	2b00      	cmp	r3, #0
 810fa34:	d009      	beq.n	810fa4a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810fa36:	4b2a      	ldr	r3, [pc, #168]	@ (810fae0 <UART_SetConfig+0xac0>)
 810fa38:	681b      	ldr	r3, [r3, #0]
 810fa3a:	08db      	lsrs	r3, r3, #3
 810fa3c:	f003 0303 	and.w	r3, r3, #3
 810fa40:	4a28      	ldr	r2, [pc, #160]	@ (810fae4 <UART_SetConfig+0xac4>)
 810fa42:	fa22 f303 	lsr.w	r3, r2, r3
 810fa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810fa48:	e00f      	b.n	810fa6a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810fa4a:	4b26      	ldr	r3, [pc, #152]	@ (810fae4 <UART_SetConfig+0xac4>)
 810fa4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa4e:	e00c      	b.n	810fa6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810fa50:	4b25      	ldr	r3, [pc, #148]	@ (810fae8 <UART_SetConfig+0xac8>)
 810fa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa54:	e009      	b.n	810fa6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810fa56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810fa5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810fa5c:	e005      	b.n	810fa6a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810fa5e:	2300      	movs	r3, #0
 810fa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810fa62:	2301      	movs	r3, #1
 810fa64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810fa68:	bf00      	nop
    }

    if (pclk != 0U)
 810fa6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810fa6c:	2b00      	cmp	r3, #0
 810fa6e:	d021      	beq.n	810fab4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810fa70:	697b      	ldr	r3, [r7, #20]
 810fa72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810fa74:	4a1d      	ldr	r2, [pc, #116]	@ (810faec <UART_SetConfig+0xacc>)
 810fa76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810fa7a:	461a      	mov	r2, r3
 810fa7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810fa7e:	fbb3 f2f2 	udiv	r2, r3, r2
 810fa82:	697b      	ldr	r3, [r7, #20]
 810fa84:	685b      	ldr	r3, [r3, #4]
 810fa86:	085b      	lsrs	r3, r3, #1
 810fa88:	441a      	add	r2, r3
 810fa8a:	697b      	ldr	r3, [r7, #20]
 810fa8c:	685b      	ldr	r3, [r3, #4]
 810fa8e:	fbb2 f3f3 	udiv	r3, r2, r3
 810fa92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810fa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fa96:	2b0f      	cmp	r3, #15
 810fa98:	d909      	bls.n	810faae <UART_SetConfig+0xa8e>
 810fa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fa9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810faa0:	d205      	bcs.n	810faae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810faa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810faa4:	b29a      	uxth	r2, r3
 810faa6:	697b      	ldr	r3, [r7, #20]
 810faa8:	681b      	ldr	r3, [r3, #0]
 810faaa:	60da      	str	r2, [r3, #12]
 810faac:	e002      	b.n	810fab4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810faae:	2301      	movs	r3, #1
 810fab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810fab4:	697b      	ldr	r3, [r7, #20]
 810fab6:	2201      	movs	r2, #1
 810fab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810fabc:	697b      	ldr	r3, [r7, #20]
 810fabe:	2201      	movs	r2, #1
 810fac0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810fac4:	697b      	ldr	r3, [r7, #20]
 810fac6:	2200      	movs	r2, #0
 810fac8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810faca:	697b      	ldr	r3, [r7, #20]
 810facc:	2200      	movs	r2, #0
 810face:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810fad0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810fad4:	4618      	mov	r0, r3
 810fad6:	3748      	adds	r7, #72	@ 0x48
 810fad8:	46bd      	mov	sp, r7
 810fada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810fade:	bf00      	nop
 810fae0:	58024400 	.word	0x58024400
 810fae4:	03d09000 	.word	0x03d09000
 810fae8:	003d0900 	.word	0x003d0900
 810faec:	08115c78 	.word	0x08115c78

0810faf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810faf0:	b480      	push	{r7}
 810faf2:	b083      	sub	sp, #12
 810faf4:	af00      	add	r7, sp, #0
 810faf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810faf8:	687b      	ldr	r3, [r7, #4]
 810fafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fafc:	f003 0308 	and.w	r3, r3, #8
 810fb00:	2b00      	cmp	r3, #0
 810fb02:	d00a      	beq.n	810fb1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810fb04:	687b      	ldr	r3, [r7, #4]
 810fb06:	681b      	ldr	r3, [r3, #0]
 810fb08:	685b      	ldr	r3, [r3, #4]
 810fb0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810fb0e:	687b      	ldr	r3, [r7, #4]
 810fb10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810fb12:	687b      	ldr	r3, [r7, #4]
 810fb14:	681b      	ldr	r3, [r3, #0]
 810fb16:	430a      	orrs	r2, r1
 810fb18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810fb1a:	687b      	ldr	r3, [r7, #4]
 810fb1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb1e:	f003 0301 	and.w	r3, r3, #1
 810fb22:	2b00      	cmp	r3, #0
 810fb24:	d00a      	beq.n	810fb3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810fb26:	687b      	ldr	r3, [r7, #4]
 810fb28:	681b      	ldr	r3, [r3, #0]
 810fb2a:	685b      	ldr	r3, [r3, #4]
 810fb2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810fb30:	687b      	ldr	r3, [r7, #4]
 810fb32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fb34:	687b      	ldr	r3, [r7, #4]
 810fb36:	681b      	ldr	r3, [r3, #0]
 810fb38:	430a      	orrs	r2, r1
 810fb3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810fb3c:	687b      	ldr	r3, [r7, #4]
 810fb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb40:	f003 0302 	and.w	r3, r3, #2
 810fb44:	2b00      	cmp	r3, #0
 810fb46:	d00a      	beq.n	810fb5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810fb48:	687b      	ldr	r3, [r7, #4]
 810fb4a:	681b      	ldr	r3, [r3, #0]
 810fb4c:	685b      	ldr	r3, [r3, #4]
 810fb4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810fb52:	687b      	ldr	r3, [r7, #4]
 810fb54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810fb56:	687b      	ldr	r3, [r7, #4]
 810fb58:	681b      	ldr	r3, [r3, #0]
 810fb5a:	430a      	orrs	r2, r1
 810fb5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810fb5e:	687b      	ldr	r3, [r7, #4]
 810fb60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb62:	f003 0304 	and.w	r3, r3, #4
 810fb66:	2b00      	cmp	r3, #0
 810fb68:	d00a      	beq.n	810fb80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810fb6a:	687b      	ldr	r3, [r7, #4]
 810fb6c:	681b      	ldr	r3, [r3, #0]
 810fb6e:	685b      	ldr	r3, [r3, #4]
 810fb70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810fb74:	687b      	ldr	r3, [r7, #4]
 810fb76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810fb78:	687b      	ldr	r3, [r7, #4]
 810fb7a:	681b      	ldr	r3, [r3, #0]
 810fb7c:	430a      	orrs	r2, r1
 810fb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810fb80:	687b      	ldr	r3, [r7, #4]
 810fb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fb84:	f003 0310 	and.w	r3, r3, #16
 810fb88:	2b00      	cmp	r3, #0
 810fb8a:	d00a      	beq.n	810fba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810fb8c:	687b      	ldr	r3, [r7, #4]
 810fb8e:	681b      	ldr	r3, [r3, #0]
 810fb90:	689b      	ldr	r3, [r3, #8]
 810fb92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810fb96:	687b      	ldr	r3, [r7, #4]
 810fb98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810fb9a:	687b      	ldr	r3, [r7, #4]
 810fb9c:	681b      	ldr	r3, [r3, #0]
 810fb9e:	430a      	orrs	r2, r1
 810fba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810fba2:	687b      	ldr	r3, [r7, #4]
 810fba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fba6:	f003 0320 	and.w	r3, r3, #32
 810fbaa:	2b00      	cmp	r3, #0
 810fbac:	d00a      	beq.n	810fbc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810fbae:	687b      	ldr	r3, [r7, #4]
 810fbb0:	681b      	ldr	r3, [r3, #0]
 810fbb2:	689b      	ldr	r3, [r3, #8]
 810fbb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810fbb8:	687b      	ldr	r3, [r7, #4]
 810fbba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810fbbc:	687b      	ldr	r3, [r7, #4]
 810fbbe:	681b      	ldr	r3, [r3, #0]
 810fbc0:	430a      	orrs	r2, r1
 810fbc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810fbc4:	687b      	ldr	r3, [r7, #4]
 810fbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fbc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810fbcc:	2b00      	cmp	r3, #0
 810fbce:	d01a      	beq.n	810fc06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810fbd0:	687b      	ldr	r3, [r7, #4]
 810fbd2:	681b      	ldr	r3, [r3, #0]
 810fbd4:	685b      	ldr	r3, [r3, #4]
 810fbd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810fbda:	687b      	ldr	r3, [r7, #4]
 810fbdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810fbde:	687b      	ldr	r3, [r7, #4]
 810fbe0:	681b      	ldr	r3, [r3, #0]
 810fbe2:	430a      	orrs	r2, r1
 810fbe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810fbe6:	687b      	ldr	r3, [r7, #4]
 810fbe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810fbea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810fbee:	d10a      	bne.n	810fc06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810fbf0:	687b      	ldr	r3, [r7, #4]
 810fbf2:	681b      	ldr	r3, [r3, #0]
 810fbf4:	685b      	ldr	r3, [r3, #4]
 810fbf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810fbfa:	687b      	ldr	r3, [r7, #4]
 810fbfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810fbfe:	687b      	ldr	r3, [r7, #4]
 810fc00:	681b      	ldr	r3, [r3, #0]
 810fc02:	430a      	orrs	r2, r1
 810fc04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810fc06:	687b      	ldr	r3, [r7, #4]
 810fc08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810fc0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810fc0e:	2b00      	cmp	r3, #0
 810fc10:	d00a      	beq.n	810fc28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810fc12:	687b      	ldr	r3, [r7, #4]
 810fc14:	681b      	ldr	r3, [r3, #0]
 810fc16:	685b      	ldr	r3, [r3, #4]
 810fc18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810fc1c:	687b      	ldr	r3, [r7, #4]
 810fc1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810fc20:	687b      	ldr	r3, [r7, #4]
 810fc22:	681b      	ldr	r3, [r3, #0]
 810fc24:	430a      	orrs	r2, r1
 810fc26:	605a      	str	r2, [r3, #4]
  }
}
 810fc28:	bf00      	nop
 810fc2a:	370c      	adds	r7, #12
 810fc2c:	46bd      	mov	sp, r7
 810fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fc32:	4770      	bx	lr

0810fc34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810fc34:	b580      	push	{r7, lr}
 810fc36:	b098      	sub	sp, #96	@ 0x60
 810fc38:	af02      	add	r7, sp, #8
 810fc3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810fc3c:	687b      	ldr	r3, [r7, #4]
 810fc3e:	2200      	movs	r2, #0
 810fc40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810fc44:	f7f5 f864 	bl	8104d10 <HAL_GetTick>
 810fc48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810fc4a:	687b      	ldr	r3, [r7, #4]
 810fc4c:	681b      	ldr	r3, [r3, #0]
 810fc4e:	681b      	ldr	r3, [r3, #0]
 810fc50:	f003 0308 	and.w	r3, r3, #8
 810fc54:	2b08      	cmp	r3, #8
 810fc56:	d12f      	bne.n	810fcb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810fc58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810fc5c:	9300      	str	r3, [sp, #0]
 810fc5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fc60:	2200      	movs	r2, #0
 810fc62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810fc66:	6878      	ldr	r0, [r7, #4]
 810fc68:	f000 f88e 	bl	810fd88 <UART_WaitOnFlagUntilTimeout>
 810fc6c:	4603      	mov	r3, r0
 810fc6e:	2b00      	cmp	r3, #0
 810fc70:	d022      	beq.n	810fcb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810fc72:	687b      	ldr	r3, [r7, #4]
 810fc74:	681b      	ldr	r3, [r3, #0]
 810fc76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810fc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810fc7a:	e853 3f00 	ldrex	r3, [r3]
 810fc7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810fc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810fc82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810fc86:	653b      	str	r3, [r7, #80]	@ 0x50
 810fc88:	687b      	ldr	r3, [r7, #4]
 810fc8a:	681b      	ldr	r3, [r3, #0]
 810fc8c:	461a      	mov	r2, r3
 810fc8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810fc90:	647b      	str	r3, [r7, #68]	@ 0x44
 810fc92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810fc94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810fc96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810fc98:	e841 2300 	strex	r3, r2, [r1]
 810fc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810fc9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810fca0:	2b00      	cmp	r3, #0
 810fca2:	d1e6      	bne.n	810fc72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810fca4:	687b      	ldr	r3, [r7, #4]
 810fca6:	2220      	movs	r2, #32
 810fca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810fcac:	687b      	ldr	r3, [r7, #4]
 810fcae:	2200      	movs	r2, #0
 810fcb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810fcb4:	2303      	movs	r3, #3
 810fcb6:	e063      	b.n	810fd80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810fcb8:	687b      	ldr	r3, [r7, #4]
 810fcba:	681b      	ldr	r3, [r3, #0]
 810fcbc:	681b      	ldr	r3, [r3, #0]
 810fcbe:	f003 0304 	and.w	r3, r3, #4
 810fcc2:	2b04      	cmp	r3, #4
 810fcc4:	d149      	bne.n	810fd5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810fcc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810fcca:	9300      	str	r3, [sp, #0]
 810fccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810fcce:	2200      	movs	r2, #0
 810fcd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810fcd4:	6878      	ldr	r0, [r7, #4]
 810fcd6:	f000 f857 	bl	810fd88 <UART_WaitOnFlagUntilTimeout>
 810fcda:	4603      	mov	r3, r0
 810fcdc:	2b00      	cmp	r3, #0
 810fcde:	d03c      	beq.n	810fd5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810fce0:	687b      	ldr	r3, [r7, #4]
 810fce2:	681b      	ldr	r3, [r3, #0]
 810fce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810fce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810fce8:	e853 3f00 	ldrex	r3, [r3]
 810fcec:	623b      	str	r3, [r7, #32]
   return(result);
 810fcee:	6a3b      	ldr	r3, [r7, #32]
 810fcf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810fcf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810fcf6:	687b      	ldr	r3, [r7, #4]
 810fcf8:	681b      	ldr	r3, [r3, #0]
 810fcfa:	461a      	mov	r2, r3
 810fcfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810fcfe:	633b      	str	r3, [r7, #48]	@ 0x30
 810fd00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810fd02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810fd04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810fd06:	e841 2300 	strex	r3, r2, [r1]
 810fd0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810fd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fd0e:	2b00      	cmp	r3, #0
 810fd10:	d1e6      	bne.n	810fce0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810fd12:	687b      	ldr	r3, [r7, #4]
 810fd14:	681b      	ldr	r3, [r3, #0]
 810fd16:	3308      	adds	r3, #8
 810fd18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810fd1a:	693b      	ldr	r3, [r7, #16]
 810fd1c:	e853 3f00 	ldrex	r3, [r3]
 810fd20:	60fb      	str	r3, [r7, #12]
   return(result);
 810fd22:	68fb      	ldr	r3, [r7, #12]
 810fd24:	f023 0301 	bic.w	r3, r3, #1
 810fd28:	64bb      	str	r3, [r7, #72]	@ 0x48
 810fd2a:	687b      	ldr	r3, [r7, #4]
 810fd2c:	681b      	ldr	r3, [r3, #0]
 810fd2e:	3308      	adds	r3, #8
 810fd30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810fd32:	61fa      	str	r2, [r7, #28]
 810fd34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810fd36:	69b9      	ldr	r1, [r7, #24]
 810fd38:	69fa      	ldr	r2, [r7, #28]
 810fd3a:	e841 2300 	strex	r3, r2, [r1]
 810fd3e:	617b      	str	r3, [r7, #20]
   return(result);
 810fd40:	697b      	ldr	r3, [r7, #20]
 810fd42:	2b00      	cmp	r3, #0
 810fd44:	d1e5      	bne.n	810fd12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810fd46:	687b      	ldr	r3, [r7, #4]
 810fd48:	2220      	movs	r2, #32
 810fd4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810fd4e:	687b      	ldr	r3, [r7, #4]
 810fd50:	2200      	movs	r2, #0
 810fd52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810fd56:	2303      	movs	r3, #3
 810fd58:	e012      	b.n	810fd80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810fd5a:	687b      	ldr	r3, [r7, #4]
 810fd5c:	2220      	movs	r2, #32
 810fd5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810fd62:	687b      	ldr	r3, [r7, #4]
 810fd64:	2220      	movs	r2, #32
 810fd66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810fd6a:	687b      	ldr	r3, [r7, #4]
 810fd6c:	2200      	movs	r2, #0
 810fd6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810fd70:	687b      	ldr	r3, [r7, #4]
 810fd72:	2200      	movs	r2, #0
 810fd74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810fd76:	687b      	ldr	r3, [r7, #4]
 810fd78:	2200      	movs	r2, #0
 810fd7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810fd7e:	2300      	movs	r3, #0
}
 810fd80:	4618      	mov	r0, r3
 810fd82:	3758      	adds	r7, #88	@ 0x58
 810fd84:	46bd      	mov	sp, r7
 810fd86:	bd80      	pop	{r7, pc}

0810fd88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810fd88:	b580      	push	{r7, lr}
 810fd8a:	b084      	sub	sp, #16
 810fd8c:	af00      	add	r7, sp, #0
 810fd8e:	60f8      	str	r0, [r7, #12]
 810fd90:	60b9      	str	r1, [r7, #8]
 810fd92:	603b      	str	r3, [r7, #0]
 810fd94:	4613      	mov	r3, r2
 810fd96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810fd98:	e04f      	b.n	810fe3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810fd9a:	69bb      	ldr	r3, [r7, #24]
 810fd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fda0:	d04b      	beq.n	810fe3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810fda2:	f7f4 ffb5 	bl	8104d10 <HAL_GetTick>
 810fda6:	4602      	mov	r2, r0
 810fda8:	683b      	ldr	r3, [r7, #0]
 810fdaa:	1ad3      	subs	r3, r2, r3
 810fdac:	69ba      	ldr	r2, [r7, #24]
 810fdae:	429a      	cmp	r2, r3
 810fdb0:	d302      	bcc.n	810fdb8 <UART_WaitOnFlagUntilTimeout+0x30>
 810fdb2:	69bb      	ldr	r3, [r7, #24]
 810fdb4:	2b00      	cmp	r3, #0
 810fdb6:	d101      	bne.n	810fdbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810fdb8:	2303      	movs	r3, #3
 810fdba:	e04e      	b.n	810fe5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810fdbc:	68fb      	ldr	r3, [r7, #12]
 810fdbe:	681b      	ldr	r3, [r3, #0]
 810fdc0:	681b      	ldr	r3, [r3, #0]
 810fdc2:	f003 0304 	and.w	r3, r3, #4
 810fdc6:	2b00      	cmp	r3, #0
 810fdc8:	d037      	beq.n	810fe3a <UART_WaitOnFlagUntilTimeout+0xb2>
 810fdca:	68bb      	ldr	r3, [r7, #8]
 810fdcc:	2b80      	cmp	r3, #128	@ 0x80
 810fdce:	d034      	beq.n	810fe3a <UART_WaitOnFlagUntilTimeout+0xb2>
 810fdd0:	68bb      	ldr	r3, [r7, #8]
 810fdd2:	2b40      	cmp	r3, #64	@ 0x40
 810fdd4:	d031      	beq.n	810fe3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810fdd6:	68fb      	ldr	r3, [r7, #12]
 810fdd8:	681b      	ldr	r3, [r3, #0]
 810fdda:	69db      	ldr	r3, [r3, #28]
 810fddc:	f003 0308 	and.w	r3, r3, #8
 810fde0:	2b08      	cmp	r3, #8
 810fde2:	d110      	bne.n	810fe06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810fde4:	68fb      	ldr	r3, [r7, #12]
 810fde6:	681b      	ldr	r3, [r3, #0]
 810fde8:	2208      	movs	r2, #8
 810fdea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810fdec:	68f8      	ldr	r0, [r7, #12]
 810fdee:	f000 f95b 	bl	81100a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810fdf2:	68fb      	ldr	r3, [r7, #12]
 810fdf4:	2208      	movs	r2, #8
 810fdf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810fdfa:	68fb      	ldr	r3, [r7, #12]
 810fdfc:	2200      	movs	r2, #0
 810fdfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810fe02:	2301      	movs	r3, #1
 810fe04:	e029      	b.n	810fe5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810fe06:	68fb      	ldr	r3, [r7, #12]
 810fe08:	681b      	ldr	r3, [r3, #0]
 810fe0a:	69db      	ldr	r3, [r3, #28]
 810fe0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810fe10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810fe14:	d111      	bne.n	810fe3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810fe16:	68fb      	ldr	r3, [r7, #12]
 810fe18:	681b      	ldr	r3, [r3, #0]
 810fe1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810fe1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810fe20:	68f8      	ldr	r0, [r7, #12]
 810fe22:	f000 f941 	bl	81100a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810fe26:	68fb      	ldr	r3, [r7, #12]
 810fe28:	2220      	movs	r2, #32
 810fe2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810fe2e:	68fb      	ldr	r3, [r7, #12]
 810fe30:	2200      	movs	r2, #0
 810fe32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810fe36:	2303      	movs	r3, #3
 810fe38:	e00f      	b.n	810fe5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810fe3a:	68fb      	ldr	r3, [r7, #12]
 810fe3c:	681b      	ldr	r3, [r3, #0]
 810fe3e:	69da      	ldr	r2, [r3, #28]
 810fe40:	68bb      	ldr	r3, [r7, #8]
 810fe42:	4013      	ands	r3, r2
 810fe44:	68ba      	ldr	r2, [r7, #8]
 810fe46:	429a      	cmp	r2, r3
 810fe48:	bf0c      	ite	eq
 810fe4a:	2301      	moveq	r3, #1
 810fe4c:	2300      	movne	r3, #0
 810fe4e:	b2db      	uxtb	r3, r3
 810fe50:	461a      	mov	r2, r3
 810fe52:	79fb      	ldrb	r3, [r7, #7]
 810fe54:	429a      	cmp	r2, r3
 810fe56:	d0a0      	beq.n	810fd9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810fe58:	2300      	movs	r3, #0
}
 810fe5a:	4618      	mov	r0, r3
 810fe5c:	3710      	adds	r7, #16
 810fe5e:	46bd      	mov	sp, r7
 810fe60:	bd80      	pop	{r7, pc}
	...

0810fe64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810fe64:	b480      	push	{r7}
 810fe66:	b0a3      	sub	sp, #140	@ 0x8c
 810fe68:	af00      	add	r7, sp, #0
 810fe6a:	60f8      	str	r0, [r7, #12]
 810fe6c:	60b9      	str	r1, [r7, #8]
 810fe6e:	4613      	mov	r3, r2
 810fe70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810fe72:	68fb      	ldr	r3, [r7, #12]
 810fe74:	68ba      	ldr	r2, [r7, #8]
 810fe76:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810fe78:	68fb      	ldr	r3, [r7, #12]
 810fe7a:	88fa      	ldrh	r2, [r7, #6]
 810fe7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810fe80:	68fb      	ldr	r3, [r7, #12]
 810fe82:	88fa      	ldrh	r2, [r7, #6]
 810fe84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810fe88:	68fb      	ldr	r3, [r7, #12]
 810fe8a:	2200      	movs	r2, #0
 810fe8c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810fe8e:	68fb      	ldr	r3, [r7, #12]
 810fe90:	689b      	ldr	r3, [r3, #8]
 810fe92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810fe96:	d10e      	bne.n	810feb6 <UART_Start_Receive_IT+0x52>
 810fe98:	68fb      	ldr	r3, [r7, #12]
 810fe9a:	691b      	ldr	r3, [r3, #16]
 810fe9c:	2b00      	cmp	r3, #0
 810fe9e:	d105      	bne.n	810feac <UART_Start_Receive_IT+0x48>
 810fea0:	68fb      	ldr	r3, [r7, #12]
 810fea2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810fea6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810feaa:	e02d      	b.n	810ff08 <UART_Start_Receive_IT+0xa4>
 810feac:	68fb      	ldr	r3, [r7, #12]
 810feae:	22ff      	movs	r2, #255	@ 0xff
 810feb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810feb4:	e028      	b.n	810ff08 <UART_Start_Receive_IT+0xa4>
 810feb6:	68fb      	ldr	r3, [r7, #12]
 810feb8:	689b      	ldr	r3, [r3, #8]
 810feba:	2b00      	cmp	r3, #0
 810febc:	d10d      	bne.n	810feda <UART_Start_Receive_IT+0x76>
 810febe:	68fb      	ldr	r3, [r7, #12]
 810fec0:	691b      	ldr	r3, [r3, #16]
 810fec2:	2b00      	cmp	r3, #0
 810fec4:	d104      	bne.n	810fed0 <UART_Start_Receive_IT+0x6c>
 810fec6:	68fb      	ldr	r3, [r7, #12]
 810fec8:	22ff      	movs	r2, #255	@ 0xff
 810feca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810fece:	e01b      	b.n	810ff08 <UART_Start_Receive_IT+0xa4>
 810fed0:	68fb      	ldr	r3, [r7, #12]
 810fed2:	227f      	movs	r2, #127	@ 0x7f
 810fed4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810fed8:	e016      	b.n	810ff08 <UART_Start_Receive_IT+0xa4>
 810feda:	68fb      	ldr	r3, [r7, #12]
 810fedc:	689b      	ldr	r3, [r3, #8]
 810fede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810fee2:	d10d      	bne.n	810ff00 <UART_Start_Receive_IT+0x9c>
 810fee4:	68fb      	ldr	r3, [r7, #12]
 810fee6:	691b      	ldr	r3, [r3, #16]
 810fee8:	2b00      	cmp	r3, #0
 810feea:	d104      	bne.n	810fef6 <UART_Start_Receive_IT+0x92>
 810feec:	68fb      	ldr	r3, [r7, #12]
 810feee:	227f      	movs	r2, #127	@ 0x7f
 810fef0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810fef4:	e008      	b.n	810ff08 <UART_Start_Receive_IT+0xa4>
 810fef6:	68fb      	ldr	r3, [r7, #12]
 810fef8:	223f      	movs	r2, #63	@ 0x3f
 810fefa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810fefe:	e003      	b.n	810ff08 <UART_Start_Receive_IT+0xa4>
 810ff00:	68fb      	ldr	r3, [r7, #12]
 810ff02:	2200      	movs	r2, #0
 810ff04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ff08:	68fb      	ldr	r3, [r7, #12]
 810ff0a:	2200      	movs	r2, #0
 810ff0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810ff10:	68fb      	ldr	r3, [r7, #12]
 810ff12:	2222      	movs	r2, #34	@ 0x22
 810ff14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ff18:	68fb      	ldr	r3, [r7, #12]
 810ff1a:	681b      	ldr	r3, [r3, #0]
 810ff1c:	3308      	adds	r3, #8
 810ff1e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ff20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810ff22:	e853 3f00 	ldrex	r3, [r3]
 810ff26:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810ff28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810ff2a:	f043 0301 	orr.w	r3, r3, #1
 810ff2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810ff32:	68fb      	ldr	r3, [r7, #12]
 810ff34:	681b      	ldr	r3, [r3, #0]
 810ff36:	3308      	adds	r3, #8
 810ff38:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810ff3c:	673a      	str	r2, [r7, #112]	@ 0x70
 810ff3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ff40:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810ff42:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810ff44:	e841 2300 	strex	r3, r2, [r1]
 810ff48:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810ff4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810ff4c:	2b00      	cmp	r3, #0
 810ff4e:	d1e3      	bne.n	810ff18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810ff50:	68fb      	ldr	r3, [r7, #12]
 810ff52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ff54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ff58:	d14f      	bne.n	810fffa <UART_Start_Receive_IT+0x196>
 810ff5a:	68fb      	ldr	r3, [r7, #12]
 810ff5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810ff60:	88fa      	ldrh	r2, [r7, #6]
 810ff62:	429a      	cmp	r2, r3
 810ff64:	d349      	bcc.n	810fffa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810ff66:	68fb      	ldr	r3, [r7, #12]
 810ff68:	689b      	ldr	r3, [r3, #8]
 810ff6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810ff6e:	d107      	bne.n	810ff80 <UART_Start_Receive_IT+0x11c>
 810ff70:	68fb      	ldr	r3, [r7, #12]
 810ff72:	691b      	ldr	r3, [r3, #16]
 810ff74:	2b00      	cmp	r3, #0
 810ff76:	d103      	bne.n	810ff80 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810ff78:	68fb      	ldr	r3, [r7, #12]
 810ff7a:	4a47      	ldr	r2, [pc, #284]	@ (8110098 <UART_Start_Receive_IT+0x234>)
 810ff7c:	675a      	str	r2, [r3, #116]	@ 0x74
 810ff7e:	e002      	b.n	810ff86 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810ff80:	68fb      	ldr	r3, [r7, #12]
 810ff82:	4a46      	ldr	r2, [pc, #280]	@ (811009c <UART_Start_Receive_IT+0x238>)
 810ff84:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810ff86:	68fb      	ldr	r3, [r7, #12]
 810ff88:	691b      	ldr	r3, [r3, #16]
 810ff8a:	2b00      	cmp	r3, #0
 810ff8c:	d01a      	beq.n	810ffc4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810ff8e:	68fb      	ldr	r3, [r7, #12]
 810ff90:	681b      	ldr	r3, [r3, #0]
 810ff92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ff94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ff96:	e853 3f00 	ldrex	r3, [r3]
 810ff9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810ff9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ff9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810ffa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810ffa6:	68fb      	ldr	r3, [r7, #12]
 810ffa8:	681b      	ldr	r3, [r3, #0]
 810ffaa:	461a      	mov	r2, r3
 810ffac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810ffb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810ffb2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ffb4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810ffb6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810ffb8:	e841 2300 	strex	r3, r2, [r1]
 810ffbc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810ffbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810ffc0:	2b00      	cmp	r3, #0
 810ffc2:	d1e4      	bne.n	810ff8e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810ffc4:	68fb      	ldr	r3, [r7, #12]
 810ffc6:	681b      	ldr	r3, [r3, #0]
 810ffc8:	3308      	adds	r3, #8
 810ffca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ffcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ffce:	e853 3f00 	ldrex	r3, [r3]
 810ffd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810ffd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ffd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810ffda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810ffdc:	68fb      	ldr	r3, [r7, #12]
 810ffde:	681b      	ldr	r3, [r3, #0]
 810ffe0:	3308      	adds	r3, #8
 810ffe2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810ffe4:	64ba      	str	r2, [r7, #72]	@ 0x48
 810ffe6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ffe8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810ffea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810ffec:	e841 2300 	strex	r3, r2, [r1]
 810fff0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810fff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fff4:	2b00      	cmp	r3, #0
 810fff6:	d1e5      	bne.n	810ffc4 <UART_Start_Receive_IT+0x160>
 810fff8:	e046      	b.n	8110088 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810fffa:	68fb      	ldr	r3, [r7, #12]
 810fffc:	689b      	ldr	r3, [r3, #8]
 810fffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8110002:	d107      	bne.n	8110014 <UART_Start_Receive_IT+0x1b0>
 8110004:	68fb      	ldr	r3, [r7, #12]
 8110006:	691b      	ldr	r3, [r3, #16]
 8110008:	2b00      	cmp	r3, #0
 811000a:	d103      	bne.n	8110014 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 811000c:	68fb      	ldr	r3, [r7, #12]
 811000e:	4a24      	ldr	r2, [pc, #144]	@ (81100a0 <UART_Start_Receive_IT+0x23c>)
 8110010:	675a      	str	r2, [r3, #116]	@ 0x74
 8110012:	e002      	b.n	811001a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8110014:	68fb      	ldr	r3, [r7, #12]
 8110016:	4a23      	ldr	r2, [pc, #140]	@ (81100a4 <UART_Start_Receive_IT+0x240>)
 8110018:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 811001a:	68fb      	ldr	r3, [r7, #12]
 811001c:	691b      	ldr	r3, [r3, #16]
 811001e:	2b00      	cmp	r3, #0
 8110020:	d019      	beq.n	8110056 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8110022:	68fb      	ldr	r3, [r7, #12]
 8110024:	681b      	ldr	r3, [r3, #0]
 8110026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811002a:	e853 3f00 	ldrex	r3, [r3]
 811002e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8110030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110032:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8110036:	677b      	str	r3, [r7, #116]	@ 0x74
 8110038:	68fb      	ldr	r3, [r7, #12]
 811003a:	681b      	ldr	r3, [r3, #0]
 811003c:	461a      	mov	r2, r3
 811003e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8110040:	637b      	str	r3, [r7, #52]	@ 0x34
 8110042:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110044:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8110046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8110048:	e841 2300 	strex	r3, r2, [r1]
 811004c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 811004e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110050:	2b00      	cmp	r3, #0
 8110052:	d1e6      	bne.n	8110022 <UART_Start_Receive_IT+0x1be>
 8110054:	e018      	b.n	8110088 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8110056:	68fb      	ldr	r3, [r7, #12]
 8110058:	681b      	ldr	r3, [r3, #0]
 811005a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811005c:	697b      	ldr	r3, [r7, #20]
 811005e:	e853 3f00 	ldrex	r3, [r3]
 8110062:	613b      	str	r3, [r7, #16]
   return(result);
 8110064:	693b      	ldr	r3, [r7, #16]
 8110066:	f043 0320 	orr.w	r3, r3, #32
 811006a:	67bb      	str	r3, [r7, #120]	@ 0x78
 811006c:	68fb      	ldr	r3, [r7, #12]
 811006e:	681b      	ldr	r3, [r3, #0]
 8110070:	461a      	mov	r2, r3
 8110072:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8110074:	623b      	str	r3, [r7, #32]
 8110076:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110078:	69f9      	ldr	r1, [r7, #28]
 811007a:	6a3a      	ldr	r2, [r7, #32]
 811007c:	e841 2300 	strex	r3, r2, [r1]
 8110080:	61bb      	str	r3, [r7, #24]
   return(result);
 8110082:	69bb      	ldr	r3, [r7, #24]
 8110084:	2b00      	cmp	r3, #0
 8110086:	d1e6      	bne.n	8110056 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8110088:	2300      	movs	r3, #0
}
 811008a:	4618      	mov	r0, r3
 811008c:	378c      	adds	r7, #140	@ 0x8c
 811008e:	46bd      	mov	sp, r7
 8110090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110094:	4770      	bx	lr
 8110096:	bf00      	nop
 8110098:	081108c9 	.word	0x081108c9
 811009c:	08110569 	.word	0x08110569
 81100a0:	081103b1 	.word	0x081103b1
 81100a4:	081101f9 	.word	0x081101f9

081100a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81100a8:	b480      	push	{r7}
 81100aa:	b095      	sub	sp, #84	@ 0x54
 81100ac:	af00      	add	r7, sp, #0
 81100ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81100b0:	687b      	ldr	r3, [r7, #4]
 81100b2:	681b      	ldr	r3, [r3, #0]
 81100b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81100b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81100b8:	e853 3f00 	ldrex	r3, [r3]
 81100bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81100be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81100c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81100c6:	687b      	ldr	r3, [r7, #4]
 81100c8:	681b      	ldr	r3, [r3, #0]
 81100ca:	461a      	mov	r2, r3
 81100cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81100ce:	643b      	str	r3, [r7, #64]	@ 0x40
 81100d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81100d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81100d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81100d6:	e841 2300 	strex	r3, r2, [r1]
 81100da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81100dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81100de:	2b00      	cmp	r3, #0
 81100e0:	d1e6      	bne.n	81100b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81100e2:	687b      	ldr	r3, [r7, #4]
 81100e4:	681b      	ldr	r3, [r3, #0]
 81100e6:	3308      	adds	r3, #8
 81100e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81100ea:	6a3b      	ldr	r3, [r7, #32]
 81100ec:	e853 3f00 	ldrex	r3, [r3]
 81100f0:	61fb      	str	r3, [r7, #28]
   return(result);
 81100f2:	69fb      	ldr	r3, [r7, #28]
 81100f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81100f8:	f023 0301 	bic.w	r3, r3, #1
 81100fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 81100fe:	687b      	ldr	r3, [r7, #4]
 8110100:	681b      	ldr	r3, [r3, #0]
 8110102:	3308      	adds	r3, #8
 8110104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8110106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8110108:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811010a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811010c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811010e:	e841 2300 	strex	r3, r2, [r1]
 8110112:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8110114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110116:	2b00      	cmp	r3, #0
 8110118:	d1e3      	bne.n	81100e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 811011a:	687b      	ldr	r3, [r7, #4]
 811011c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811011e:	2b01      	cmp	r3, #1
 8110120:	d118      	bne.n	8110154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110122:	687b      	ldr	r3, [r7, #4]
 8110124:	681b      	ldr	r3, [r3, #0]
 8110126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110128:	68fb      	ldr	r3, [r7, #12]
 811012a:	e853 3f00 	ldrex	r3, [r3]
 811012e:	60bb      	str	r3, [r7, #8]
   return(result);
 8110130:	68bb      	ldr	r3, [r7, #8]
 8110132:	f023 0310 	bic.w	r3, r3, #16
 8110136:	647b      	str	r3, [r7, #68]	@ 0x44
 8110138:	687b      	ldr	r3, [r7, #4]
 811013a:	681b      	ldr	r3, [r3, #0]
 811013c:	461a      	mov	r2, r3
 811013e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110140:	61bb      	str	r3, [r7, #24]
 8110142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110144:	6979      	ldr	r1, [r7, #20]
 8110146:	69ba      	ldr	r2, [r7, #24]
 8110148:	e841 2300 	strex	r3, r2, [r1]
 811014c:	613b      	str	r3, [r7, #16]
   return(result);
 811014e:	693b      	ldr	r3, [r7, #16]
 8110150:	2b00      	cmp	r3, #0
 8110152:	d1e6      	bne.n	8110122 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8110154:	687b      	ldr	r3, [r7, #4]
 8110156:	2220      	movs	r2, #32
 8110158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 811015c:	687b      	ldr	r3, [r7, #4]
 811015e:	2200      	movs	r2, #0
 8110160:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8110162:	687b      	ldr	r3, [r7, #4]
 8110164:	2200      	movs	r2, #0
 8110166:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8110168:	bf00      	nop
 811016a:	3754      	adds	r7, #84	@ 0x54
 811016c:	46bd      	mov	sp, r7
 811016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110172:	4770      	bx	lr

08110174 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8110174:	b580      	push	{r7, lr}
 8110176:	b084      	sub	sp, #16
 8110178:	af00      	add	r7, sp, #0
 811017a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 811017c:	687b      	ldr	r3, [r7, #4]
 811017e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8110180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8110182:	68fb      	ldr	r3, [r7, #12]
 8110184:	2200      	movs	r2, #0
 8110186:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 811018a:	68fb      	ldr	r3, [r7, #12]
 811018c:	2200      	movs	r2, #0
 811018e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8110192:	68f8      	ldr	r0, [r7, #12]
 8110194:	f7fe ff2e 	bl	810eff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8110198:	bf00      	nop
 811019a:	3710      	adds	r7, #16
 811019c:	46bd      	mov	sp, r7
 811019e:	bd80      	pop	{r7, pc}

081101a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 81101a0:	b580      	push	{r7, lr}
 81101a2:	b088      	sub	sp, #32
 81101a4:	af00      	add	r7, sp, #0
 81101a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81101a8:	687b      	ldr	r3, [r7, #4]
 81101aa:	681b      	ldr	r3, [r3, #0]
 81101ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81101ae:	68fb      	ldr	r3, [r7, #12]
 81101b0:	e853 3f00 	ldrex	r3, [r3]
 81101b4:	60bb      	str	r3, [r7, #8]
   return(result);
 81101b6:	68bb      	ldr	r3, [r7, #8]
 81101b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81101bc:	61fb      	str	r3, [r7, #28]
 81101be:	687b      	ldr	r3, [r7, #4]
 81101c0:	681b      	ldr	r3, [r3, #0]
 81101c2:	461a      	mov	r2, r3
 81101c4:	69fb      	ldr	r3, [r7, #28]
 81101c6:	61bb      	str	r3, [r7, #24]
 81101c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81101ca:	6979      	ldr	r1, [r7, #20]
 81101cc:	69ba      	ldr	r2, [r7, #24]
 81101ce:	e841 2300 	strex	r3, r2, [r1]
 81101d2:	613b      	str	r3, [r7, #16]
   return(result);
 81101d4:	693b      	ldr	r3, [r7, #16]
 81101d6:	2b00      	cmp	r3, #0
 81101d8:	d1e6      	bne.n	81101a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81101da:	687b      	ldr	r3, [r7, #4]
 81101dc:	2220      	movs	r2, #32
 81101de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 81101e2:	687b      	ldr	r3, [r7, #4]
 81101e4:	2200      	movs	r2, #0
 81101e6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 81101e8:	6878      	ldr	r0, [r7, #4]
 81101ea:	f7fe fef9 	bl	810efe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81101ee:	bf00      	nop
 81101f0:	3720      	adds	r7, #32
 81101f2:	46bd      	mov	sp, r7
 81101f4:	bd80      	pop	{r7, pc}
	...

081101f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 81101f8:	b580      	push	{r7, lr}
 81101fa:	b09c      	sub	sp, #112	@ 0x70
 81101fc:	af00      	add	r7, sp, #0
 81101fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8110200:	687b      	ldr	r3, [r7, #4]
 8110202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8110206:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 811020a:	687b      	ldr	r3, [r7, #4]
 811020c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110210:	2b22      	cmp	r3, #34	@ 0x22
 8110212:	f040 80be 	bne.w	8110392 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8110216:	687b      	ldr	r3, [r7, #4]
 8110218:	681b      	ldr	r3, [r3, #0]
 811021a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811021c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8110220:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8110224:	b2d9      	uxtb	r1, r3
 8110226:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 811022a:	b2da      	uxtb	r2, r3
 811022c:	687b      	ldr	r3, [r7, #4]
 811022e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110230:	400a      	ands	r2, r1
 8110232:	b2d2      	uxtb	r2, r2
 8110234:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8110236:	687b      	ldr	r3, [r7, #4]
 8110238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811023a:	1c5a      	adds	r2, r3, #1
 811023c:	687b      	ldr	r3, [r7, #4]
 811023e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8110240:	687b      	ldr	r3, [r7, #4]
 8110242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110246:	b29b      	uxth	r3, r3
 8110248:	3b01      	subs	r3, #1
 811024a:	b29a      	uxth	r2, r3
 811024c:	687b      	ldr	r3, [r7, #4]
 811024e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8110252:	687b      	ldr	r3, [r7, #4]
 8110254:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110258:	b29b      	uxth	r3, r3
 811025a:	2b00      	cmp	r3, #0
 811025c:	f040 80a1 	bne.w	81103a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8110260:	687b      	ldr	r3, [r7, #4]
 8110262:	681b      	ldr	r3, [r3, #0]
 8110264:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110268:	e853 3f00 	ldrex	r3, [r3]
 811026c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 811026e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8110274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8110276:	687b      	ldr	r3, [r7, #4]
 8110278:	681b      	ldr	r3, [r3, #0]
 811027a:	461a      	mov	r2, r3
 811027c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 811027e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8110280:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110282:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8110284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8110286:	e841 2300 	strex	r3, r2, [r1]
 811028a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 811028c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811028e:	2b00      	cmp	r3, #0
 8110290:	d1e6      	bne.n	8110260 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8110292:	687b      	ldr	r3, [r7, #4]
 8110294:	681b      	ldr	r3, [r3, #0]
 8110296:	3308      	adds	r3, #8
 8110298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811029a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811029c:	e853 3f00 	ldrex	r3, [r3]
 81102a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81102a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81102a4:	f023 0301 	bic.w	r3, r3, #1
 81102a8:	667b      	str	r3, [r7, #100]	@ 0x64
 81102aa:	687b      	ldr	r3, [r7, #4]
 81102ac:	681b      	ldr	r3, [r3, #0]
 81102ae:	3308      	adds	r3, #8
 81102b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 81102b2:	647a      	str	r2, [r7, #68]	@ 0x44
 81102b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81102b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81102b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81102ba:	e841 2300 	strex	r3, r2, [r1]
 81102be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81102c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81102c2:	2b00      	cmp	r3, #0
 81102c4:	d1e5      	bne.n	8110292 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 81102c6:	687b      	ldr	r3, [r7, #4]
 81102c8:	2220      	movs	r2, #32
 81102ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 81102ce:	687b      	ldr	r3, [r7, #4]
 81102d0:	2200      	movs	r2, #0
 81102d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 81102d4:	687b      	ldr	r3, [r7, #4]
 81102d6:	2200      	movs	r2, #0
 81102d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 81102da:	687b      	ldr	r3, [r7, #4]
 81102dc:	681b      	ldr	r3, [r3, #0]
 81102de:	4a33      	ldr	r2, [pc, #204]	@ (81103ac <UART_RxISR_8BIT+0x1b4>)
 81102e0:	4293      	cmp	r3, r2
 81102e2:	d01f      	beq.n	8110324 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 81102e4:	687b      	ldr	r3, [r7, #4]
 81102e6:	681b      	ldr	r3, [r3, #0]
 81102e8:	685b      	ldr	r3, [r3, #4]
 81102ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81102ee:	2b00      	cmp	r3, #0
 81102f0:	d018      	beq.n	8110324 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 81102f2:	687b      	ldr	r3, [r7, #4]
 81102f4:	681b      	ldr	r3, [r3, #0]
 81102f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81102f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81102fa:	e853 3f00 	ldrex	r3, [r3]
 81102fe:	623b      	str	r3, [r7, #32]
   return(result);
 8110300:	6a3b      	ldr	r3, [r7, #32]
 8110302:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8110306:	663b      	str	r3, [r7, #96]	@ 0x60
 8110308:	687b      	ldr	r3, [r7, #4]
 811030a:	681b      	ldr	r3, [r3, #0]
 811030c:	461a      	mov	r2, r3
 811030e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8110310:	633b      	str	r3, [r7, #48]	@ 0x30
 8110312:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8110316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110318:	e841 2300 	strex	r3, r2, [r1]
 811031c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 811031e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110320:	2b00      	cmp	r3, #0
 8110322:	d1e6      	bne.n	81102f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110324:	687b      	ldr	r3, [r7, #4]
 8110326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110328:	2b01      	cmp	r3, #1
 811032a:	d12e      	bne.n	811038a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 811032c:	687b      	ldr	r3, [r7, #4]
 811032e:	2200      	movs	r2, #0
 8110330:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110332:	687b      	ldr	r3, [r7, #4]
 8110334:	681b      	ldr	r3, [r3, #0]
 8110336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110338:	693b      	ldr	r3, [r7, #16]
 811033a:	e853 3f00 	ldrex	r3, [r3]
 811033e:	60fb      	str	r3, [r7, #12]
   return(result);
 8110340:	68fb      	ldr	r3, [r7, #12]
 8110342:	f023 0310 	bic.w	r3, r3, #16
 8110346:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8110348:	687b      	ldr	r3, [r7, #4]
 811034a:	681b      	ldr	r3, [r3, #0]
 811034c:	461a      	mov	r2, r3
 811034e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8110350:	61fb      	str	r3, [r7, #28]
 8110352:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110354:	69b9      	ldr	r1, [r7, #24]
 8110356:	69fa      	ldr	r2, [r7, #28]
 8110358:	e841 2300 	strex	r3, r2, [r1]
 811035c:	617b      	str	r3, [r7, #20]
   return(result);
 811035e:	697b      	ldr	r3, [r7, #20]
 8110360:	2b00      	cmp	r3, #0
 8110362:	d1e6      	bne.n	8110332 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8110364:	687b      	ldr	r3, [r7, #4]
 8110366:	681b      	ldr	r3, [r3, #0]
 8110368:	69db      	ldr	r3, [r3, #28]
 811036a:	f003 0310 	and.w	r3, r3, #16
 811036e:	2b10      	cmp	r3, #16
 8110370:	d103      	bne.n	811037a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8110372:	687b      	ldr	r3, [r7, #4]
 8110374:	681b      	ldr	r3, [r3, #0]
 8110376:	2210      	movs	r2, #16
 8110378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 811037a:	687b      	ldr	r3, [r7, #4]
 811037c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8110380:	4619      	mov	r1, r3
 8110382:	6878      	ldr	r0, [r7, #4]
 8110384:	f7fe fe40 	bl	810f008 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8110388:	e00b      	b.n	81103a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 811038a:	6878      	ldr	r0, [r7, #4]
 811038c:	f7f3 fdf0 	bl	8103f70 <HAL_UART_RxCpltCallback>
}
 8110390:	e007      	b.n	81103a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8110392:	687b      	ldr	r3, [r7, #4]
 8110394:	681b      	ldr	r3, [r3, #0]
 8110396:	699a      	ldr	r2, [r3, #24]
 8110398:	687b      	ldr	r3, [r7, #4]
 811039a:	681b      	ldr	r3, [r3, #0]
 811039c:	f042 0208 	orr.w	r2, r2, #8
 81103a0:	619a      	str	r2, [r3, #24]
}
 81103a2:	bf00      	nop
 81103a4:	3770      	adds	r7, #112	@ 0x70
 81103a6:	46bd      	mov	sp, r7
 81103a8:	bd80      	pop	{r7, pc}
 81103aa:	bf00      	nop
 81103ac:	58000c00 	.word	0x58000c00

081103b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 81103b0:	b580      	push	{r7, lr}
 81103b2:	b09c      	sub	sp, #112	@ 0x70
 81103b4:	af00      	add	r7, sp, #0
 81103b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 81103b8:	687b      	ldr	r3, [r7, #4]
 81103ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81103be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81103c2:	687b      	ldr	r3, [r7, #4]
 81103c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81103c8:	2b22      	cmp	r3, #34	@ 0x22
 81103ca:	f040 80be 	bne.w	811054a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81103ce:	687b      	ldr	r3, [r7, #4]
 81103d0:	681b      	ldr	r3, [r3, #0]
 81103d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81103d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 81103d8:	687b      	ldr	r3, [r7, #4]
 81103da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81103dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 81103de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 81103e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 81103e6:	4013      	ands	r3, r2
 81103e8:	b29a      	uxth	r2, r3
 81103ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81103ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 81103ee:	687b      	ldr	r3, [r7, #4]
 81103f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81103f2:	1c9a      	adds	r2, r3, #2
 81103f4:	687b      	ldr	r3, [r7, #4]
 81103f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 81103f8:	687b      	ldr	r3, [r7, #4]
 81103fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81103fe:	b29b      	uxth	r3, r3
 8110400:	3b01      	subs	r3, #1
 8110402:	b29a      	uxth	r2, r3
 8110404:	687b      	ldr	r3, [r7, #4]
 8110406:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 811040a:	687b      	ldr	r3, [r7, #4]
 811040c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110410:	b29b      	uxth	r3, r3
 8110412:	2b00      	cmp	r3, #0
 8110414:	f040 80a1 	bne.w	811055a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8110418:	687b      	ldr	r3, [r7, #4]
 811041a:	681b      	ldr	r3, [r3, #0]
 811041c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811041e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110420:	e853 3f00 	ldrex	r3, [r3]
 8110424:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8110426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 811042c:	667b      	str	r3, [r7, #100]	@ 0x64
 811042e:	687b      	ldr	r3, [r7, #4]
 8110430:	681b      	ldr	r3, [r3, #0]
 8110432:	461a      	mov	r2, r3
 8110434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8110436:	657b      	str	r3, [r7, #84]	@ 0x54
 8110438:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811043a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 811043c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 811043e:	e841 2300 	strex	r3, r2, [r1]
 8110442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8110444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110446:	2b00      	cmp	r3, #0
 8110448:	d1e6      	bne.n	8110418 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 811044a:	687b      	ldr	r3, [r7, #4]
 811044c:	681b      	ldr	r3, [r3, #0]
 811044e:	3308      	adds	r3, #8
 8110450:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110454:	e853 3f00 	ldrex	r3, [r3]
 8110458:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 811045a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811045c:	f023 0301 	bic.w	r3, r3, #1
 8110460:	663b      	str	r3, [r7, #96]	@ 0x60
 8110462:	687b      	ldr	r3, [r7, #4]
 8110464:	681b      	ldr	r3, [r3, #0]
 8110466:	3308      	adds	r3, #8
 8110468:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 811046a:	643a      	str	r2, [r7, #64]	@ 0x40
 811046c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811046e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8110470:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8110472:	e841 2300 	strex	r3, r2, [r1]
 8110476:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8110478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811047a:	2b00      	cmp	r3, #0
 811047c:	d1e5      	bne.n	811044a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 811047e:	687b      	ldr	r3, [r7, #4]
 8110480:	2220      	movs	r2, #32
 8110482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8110486:	687b      	ldr	r3, [r7, #4]
 8110488:	2200      	movs	r2, #0
 811048a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 811048c:	687b      	ldr	r3, [r7, #4]
 811048e:	2200      	movs	r2, #0
 8110490:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8110492:	687b      	ldr	r3, [r7, #4]
 8110494:	681b      	ldr	r3, [r3, #0]
 8110496:	4a33      	ldr	r2, [pc, #204]	@ (8110564 <UART_RxISR_16BIT+0x1b4>)
 8110498:	4293      	cmp	r3, r2
 811049a:	d01f      	beq.n	81104dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 811049c:	687b      	ldr	r3, [r7, #4]
 811049e:	681b      	ldr	r3, [r3, #0]
 81104a0:	685b      	ldr	r3, [r3, #4]
 81104a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81104a6:	2b00      	cmp	r3, #0
 81104a8:	d018      	beq.n	81104dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 81104aa:	687b      	ldr	r3, [r7, #4]
 81104ac:	681b      	ldr	r3, [r3, #0]
 81104ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81104b0:	6a3b      	ldr	r3, [r7, #32]
 81104b2:	e853 3f00 	ldrex	r3, [r3]
 81104b6:	61fb      	str	r3, [r7, #28]
   return(result);
 81104b8:	69fb      	ldr	r3, [r7, #28]
 81104ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81104be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81104c0:	687b      	ldr	r3, [r7, #4]
 81104c2:	681b      	ldr	r3, [r3, #0]
 81104c4:	461a      	mov	r2, r3
 81104c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81104c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81104ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81104cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81104ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81104d0:	e841 2300 	strex	r3, r2, [r1]
 81104d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81104d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81104d8:	2b00      	cmp	r3, #0
 81104da:	d1e6      	bne.n	81104aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81104dc:	687b      	ldr	r3, [r7, #4]
 81104de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81104e0:	2b01      	cmp	r3, #1
 81104e2:	d12e      	bne.n	8110542 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81104e4:	687b      	ldr	r3, [r7, #4]
 81104e6:	2200      	movs	r2, #0
 81104e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81104ea:	687b      	ldr	r3, [r7, #4]
 81104ec:	681b      	ldr	r3, [r3, #0]
 81104ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81104f0:	68fb      	ldr	r3, [r7, #12]
 81104f2:	e853 3f00 	ldrex	r3, [r3]
 81104f6:	60bb      	str	r3, [r7, #8]
   return(result);
 81104f8:	68bb      	ldr	r3, [r7, #8]
 81104fa:	f023 0310 	bic.w	r3, r3, #16
 81104fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8110500:	687b      	ldr	r3, [r7, #4]
 8110502:	681b      	ldr	r3, [r3, #0]
 8110504:	461a      	mov	r2, r3
 8110506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8110508:	61bb      	str	r3, [r7, #24]
 811050a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811050c:	6979      	ldr	r1, [r7, #20]
 811050e:	69ba      	ldr	r2, [r7, #24]
 8110510:	e841 2300 	strex	r3, r2, [r1]
 8110514:	613b      	str	r3, [r7, #16]
   return(result);
 8110516:	693b      	ldr	r3, [r7, #16]
 8110518:	2b00      	cmp	r3, #0
 811051a:	d1e6      	bne.n	81104ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 811051c:	687b      	ldr	r3, [r7, #4]
 811051e:	681b      	ldr	r3, [r3, #0]
 8110520:	69db      	ldr	r3, [r3, #28]
 8110522:	f003 0310 	and.w	r3, r3, #16
 8110526:	2b10      	cmp	r3, #16
 8110528:	d103      	bne.n	8110532 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 811052a:	687b      	ldr	r3, [r7, #4]
 811052c:	681b      	ldr	r3, [r3, #0]
 811052e:	2210      	movs	r2, #16
 8110530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8110532:	687b      	ldr	r3, [r7, #4]
 8110534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8110538:	4619      	mov	r1, r3
 811053a:	6878      	ldr	r0, [r7, #4]
 811053c:	f7fe fd64 	bl	810f008 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8110540:	e00b      	b.n	811055a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8110542:	6878      	ldr	r0, [r7, #4]
 8110544:	f7f3 fd14 	bl	8103f70 <HAL_UART_RxCpltCallback>
}
 8110548:	e007      	b.n	811055a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 811054a:	687b      	ldr	r3, [r7, #4]
 811054c:	681b      	ldr	r3, [r3, #0]
 811054e:	699a      	ldr	r2, [r3, #24]
 8110550:	687b      	ldr	r3, [r7, #4]
 8110552:	681b      	ldr	r3, [r3, #0]
 8110554:	f042 0208 	orr.w	r2, r2, #8
 8110558:	619a      	str	r2, [r3, #24]
}
 811055a:	bf00      	nop
 811055c:	3770      	adds	r7, #112	@ 0x70
 811055e:	46bd      	mov	sp, r7
 8110560:	bd80      	pop	{r7, pc}
 8110562:	bf00      	nop
 8110564:	58000c00 	.word	0x58000c00

08110568 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8110568:	b580      	push	{r7, lr}
 811056a:	b0ac      	sub	sp, #176	@ 0xb0
 811056c:	af00      	add	r7, sp, #0
 811056e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8110570:	687b      	ldr	r3, [r7, #4]
 8110572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8110576:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 811057a:	687b      	ldr	r3, [r7, #4]
 811057c:	681b      	ldr	r3, [r3, #0]
 811057e:	69db      	ldr	r3, [r3, #28]
 8110580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8110584:	687b      	ldr	r3, [r7, #4]
 8110586:	681b      	ldr	r3, [r3, #0]
 8110588:	681b      	ldr	r3, [r3, #0]
 811058a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 811058e:	687b      	ldr	r3, [r7, #4]
 8110590:	681b      	ldr	r3, [r3, #0]
 8110592:	689b      	ldr	r3, [r3, #8]
 8110594:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8110598:	687b      	ldr	r3, [r7, #4]
 811059a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811059e:	2b22      	cmp	r3, #34	@ 0x22
 81105a0:	f040 8182 	bne.w	81108a8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 81105a4:	687b      	ldr	r3, [r7, #4]
 81105a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 81105aa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81105ae:	e125      	b.n	81107fc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 81105b0:	687b      	ldr	r3, [r7, #4]
 81105b2:	681b      	ldr	r3, [r3, #0]
 81105b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81105b6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81105ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 81105be:	b2d9      	uxtb	r1, r3
 81105c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 81105c4:	b2da      	uxtb	r2, r3
 81105c6:	687b      	ldr	r3, [r7, #4]
 81105c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81105ca:	400a      	ands	r2, r1
 81105cc:	b2d2      	uxtb	r2, r2
 81105ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 81105d0:	687b      	ldr	r3, [r7, #4]
 81105d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81105d4:	1c5a      	adds	r2, r3, #1
 81105d6:	687b      	ldr	r3, [r7, #4]
 81105d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 81105da:	687b      	ldr	r3, [r7, #4]
 81105dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81105e0:	b29b      	uxth	r3, r3
 81105e2:	3b01      	subs	r3, #1
 81105e4:	b29a      	uxth	r2, r3
 81105e6:	687b      	ldr	r3, [r7, #4]
 81105e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 81105ec:	687b      	ldr	r3, [r7, #4]
 81105ee:	681b      	ldr	r3, [r3, #0]
 81105f0:	69db      	ldr	r3, [r3, #28]
 81105f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 81105f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 81105fa:	f003 0307 	and.w	r3, r3, #7
 81105fe:	2b00      	cmp	r3, #0
 8110600:	d053      	beq.n	81106aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8110602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8110606:	f003 0301 	and.w	r3, r3, #1
 811060a:	2b00      	cmp	r3, #0
 811060c:	d011      	beq.n	8110632 <UART_RxISR_8BIT_FIFOEN+0xca>
 811060e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8110612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8110616:	2b00      	cmp	r3, #0
 8110618:	d00b      	beq.n	8110632 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 811061a:	687b      	ldr	r3, [r7, #4]
 811061c:	681b      	ldr	r3, [r3, #0]
 811061e:	2201      	movs	r2, #1
 8110620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8110622:	687b      	ldr	r3, [r7, #4]
 8110624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110628:	f043 0201 	orr.w	r2, r3, #1
 811062c:	687b      	ldr	r3, [r7, #4]
 811062e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8110632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8110636:	f003 0302 	and.w	r3, r3, #2
 811063a:	2b00      	cmp	r3, #0
 811063c:	d011      	beq.n	8110662 <UART_RxISR_8BIT_FIFOEN+0xfa>
 811063e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8110642:	f003 0301 	and.w	r3, r3, #1
 8110646:	2b00      	cmp	r3, #0
 8110648:	d00b      	beq.n	8110662 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 811064a:	687b      	ldr	r3, [r7, #4]
 811064c:	681b      	ldr	r3, [r3, #0]
 811064e:	2202      	movs	r2, #2
 8110650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8110652:	687b      	ldr	r3, [r7, #4]
 8110654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110658:	f043 0204 	orr.w	r2, r3, #4
 811065c:	687b      	ldr	r3, [r7, #4]
 811065e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8110662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8110666:	f003 0304 	and.w	r3, r3, #4
 811066a:	2b00      	cmp	r3, #0
 811066c:	d011      	beq.n	8110692 <UART_RxISR_8BIT_FIFOEN+0x12a>
 811066e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8110672:	f003 0301 	and.w	r3, r3, #1
 8110676:	2b00      	cmp	r3, #0
 8110678:	d00b      	beq.n	8110692 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 811067a:	687b      	ldr	r3, [r7, #4]
 811067c:	681b      	ldr	r3, [r3, #0]
 811067e:	2204      	movs	r2, #4
 8110680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8110682:	687b      	ldr	r3, [r7, #4]
 8110684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110688:	f043 0202 	orr.w	r2, r3, #2
 811068c:	687b      	ldr	r3, [r7, #4]
 811068e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8110692:	687b      	ldr	r3, [r7, #4]
 8110694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110698:	2b00      	cmp	r3, #0
 811069a:	d006      	beq.n	81106aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 811069c:	6878      	ldr	r0, [r7, #4]
 811069e:	f7fe fca9 	bl	810eff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 81106a2:	687b      	ldr	r3, [r7, #4]
 81106a4:	2200      	movs	r2, #0
 81106a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 81106aa:	687b      	ldr	r3, [r7, #4]
 81106ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81106b0:	b29b      	uxth	r3, r3
 81106b2:	2b00      	cmp	r3, #0
 81106b4:	f040 80a2 	bne.w	81107fc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81106b8:	687b      	ldr	r3, [r7, #4]
 81106ba:	681b      	ldr	r3, [r3, #0]
 81106bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81106be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81106c0:	e853 3f00 	ldrex	r3, [r3]
 81106c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 81106c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81106c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81106cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81106d0:	687b      	ldr	r3, [r7, #4]
 81106d2:	681b      	ldr	r3, [r3, #0]
 81106d4:	461a      	mov	r2, r3
 81106d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81106da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81106dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81106de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 81106e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 81106e2:	e841 2300 	strex	r3, r2, [r1]
 81106e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 81106e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81106ea:	2b00      	cmp	r3, #0
 81106ec:	d1e4      	bne.n	81106b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81106ee:	687b      	ldr	r3, [r7, #4]
 81106f0:	681b      	ldr	r3, [r3, #0]
 81106f2:	3308      	adds	r3, #8
 81106f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81106f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81106f8:	e853 3f00 	ldrex	r3, [r3]
 81106fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 81106fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8110700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110704:	f023 0301 	bic.w	r3, r3, #1
 8110708:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 811070c:	687b      	ldr	r3, [r7, #4]
 811070e:	681b      	ldr	r3, [r3, #0]
 8110710:	3308      	adds	r3, #8
 8110712:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8110716:	66ba      	str	r2, [r7, #104]	@ 0x68
 8110718:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811071a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 811071c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 811071e:	e841 2300 	strex	r3, r2, [r1]
 8110722:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8110724:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8110726:	2b00      	cmp	r3, #0
 8110728:	d1e1      	bne.n	81106ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 811072a:	687b      	ldr	r3, [r7, #4]
 811072c:	2220      	movs	r2, #32
 811072e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8110732:	687b      	ldr	r3, [r7, #4]
 8110734:	2200      	movs	r2, #0
 8110736:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8110738:	687b      	ldr	r3, [r7, #4]
 811073a:	2200      	movs	r2, #0
 811073c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 811073e:	687b      	ldr	r3, [r7, #4]
 8110740:	681b      	ldr	r3, [r3, #0]
 8110742:	4a5f      	ldr	r2, [pc, #380]	@ (81108c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8110744:	4293      	cmp	r3, r2
 8110746:	d021      	beq.n	811078c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8110748:	687b      	ldr	r3, [r7, #4]
 811074a:	681b      	ldr	r3, [r3, #0]
 811074c:	685b      	ldr	r3, [r3, #4]
 811074e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8110752:	2b00      	cmp	r3, #0
 8110754:	d01a      	beq.n	811078c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8110756:	687b      	ldr	r3, [r7, #4]
 8110758:	681b      	ldr	r3, [r3, #0]
 811075a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811075c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811075e:	e853 3f00 	ldrex	r3, [r3]
 8110762:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8110764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8110766:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 811076a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 811076e:	687b      	ldr	r3, [r7, #4]
 8110770:	681b      	ldr	r3, [r3, #0]
 8110772:	461a      	mov	r2, r3
 8110774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8110778:	657b      	str	r3, [r7, #84]	@ 0x54
 811077a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811077c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 811077e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8110780:	e841 2300 	strex	r3, r2, [r1]
 8110784:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8110786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110788:	2b00      	cmp	r3, #0
 811078a:	d1e4      	bne.n	8110756 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 811078c:	687b      	ldr	r3, [r7, #4]
 811078e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110790:	2b01      	cmp	r3, #1
 8110792:	d130      	bne.n	81107f6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8110794:	687b      	ldr	r3, [r7, #4]
 8110796:	2200      	movs	r2, #0
 8110798:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 811079a:	687b      	ldr	r3, [r7, #4]
 811079c:	681b      	ldr	r3, [r3, #0]
 811079e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81107a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81107a2:	e853 3f00 	ldrex	r3, [r3]
 81107a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81107a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81107aa:	f023 0310 	bic.w	r3, r3, #16
 81107ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81107b2:	687b      	ldr	r3, [r7, #4]
 81107b4:	681b      	ldr	r3, [r3, #0]
 81107b6:	461a      	mov	r2, r3
 81107b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 81107bc:	643b      	str	r3, [r7, #64]	@ 0x40
 81107be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81107c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81107c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81107c4:	e841 2300 	strex	r3, r2, [r1]
 81107c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81107ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81107cc:	2b00      	cmp	r3, #0
 81107ce:	d1e4      	bne.n	811079a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 81107d0:	687b      	ldr	r3, [r7, #4]
 81107d2:	681b      	ldr	r3, [r3, #0]
 81107d4:	69db      	ldr	r3, [r3, #28]
 81107d6:	f003 0310 	and.w	r3, r3, #16
 81107da:	2b10      	cmp	r3, #16
 81107dc:	d103      	bne.n	81107e6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81107de:	687b      	ldr	r3, [r7, #4]
 81107e0:	681b      	ldr	r3, [r3, #0]
 81107e2:	2210      	movs	r2, #16
 81107e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 81107e6:	687b      	ldr	r3, [r7, #4]
 81107e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 81107ec:	4619      	mov	r1, r3
 81107ee:	6878      	ldr	r0, [r7, #4]
 81107f0:	f7fe fc0a 	bl	810f008 <HAL_UARTEx_RxEventCallback>
 81107f4:	e002      	b.n	81107fc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 81107f6:	6878      	ldr	r0, [r7, #4]
 81107f8:	f7f3 fbba 	bl	8103f70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81107fc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8110800:	2b00      	cmp	r3, #0
 8110802:	d006      	beq.n	8110812 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8110804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8110808:	f003 0320 	and.w	r3, r3, #32
 811080c:	2b00      	cmp	r3, #0
 811080e:	f47f aecf 	bne.w	81105b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8110812:	687b      	ldr	r3, [r7, #4]
 8110814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110818:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 811081c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8110820:	2b00      	cmp	r3, #0
 8110822:	d049      	beq.n	81108b8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8110824:	687b      	ldr	r3, [r7, #4]
 8110826:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 811082a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 811082e:	429a      	cmp	r2, r3
 8110830:	d242      	bcs.n	81108b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8110832:	687b      	ldr	r3, [r7, #4]
 8110834:	681b      	ldr	r3, [r3, #0]
 8110836:	3308      	adds	r3, #8
 8110838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811083a:	6a3b      	ldr	r3, [r7, #32]
 811083c:	e853 3f00 	ldrex	r3, [r3]
 8110840:	61fb      	str	r3, [r7, #28]
   return(result);
 8110842:	69fb      	ldr	r3, [r7, #28]
 8110844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 811084c:	687b      	ldr	r3, [r7, #4]
 811084e:	681b      	ldr	r3, [r3, #0]
 8110850:	3308      	adds	r3, #8
 8110852:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8110856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8110858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811085a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811085c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811085e:	e841 2300 	strex	r3, r2, [r1]
 8110862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8110864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110866:	2b00      	cmp	r3, #0
 8110868:	d1e3      	bne.n	8110832 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 811086a:	687b      	ldr	r3, [r7, #4]
 811086c:	4a15      	ldr	r2, [pc, #84]	@ (81108c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 811086e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8110870:	687b      	ldr	r3, [r7, #4]
 8110872:	681b      	ldr	r3, [r3, #0]
 8110874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110876:	68fb      	ldr	r3, [r7, #12]
 8110878:	e853 3f00 	ldrex	r3, [r3]
 811087c:	60bb      	str	r3, [r7, #8]
   return(result);
 811087e:	68bb      	ldr	r3, [r7, #8]
 8110880:	f043 0320 	orr.w	r3, r3, #32
 8110884:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8110888:	687b      	ldr	r3, [r7, #4]
 811088a:	681b      	ldr	r3, [r3, #0]
 811088c:	461a      	mov	r2, r3
 811088e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8110892:	61bb      	str	r3, [r7, #24]
 8110894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110896:	6979      	ldr	r1, [r7, #20]
 8110898:	69ba      	ldr	r2, [r7, #24]
 811089a:	e841 2300 	strex	r3, r2, [r1]
 811089e:	613b      	str	r3, [r7, #16]
   return(result);
 81108a0:	693b      	ldr	r3, [r7, #16]
 81108a2:	2b00      	cmp	r3, #0
 81108a4:	d1e4      	bne.n	8110870 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 81108a6:	e007      	b.n	81108b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 81108a8:	687b      	ldr	r3, [r7, #4]
 81108aa:	681b      	ldr	r3, [r3, #0]
 81108ac:	699a      	ldr	r2, [r3, #24]
 81108ae:	687b      	ldr	r3, [r7, #4]
 81108b0:	681b      	ldr	r3, [r3, #0]
 81108b2:	f042 0208 	orr.w	r2, r2, #8
 81108b6:	619a      	str	r2, [r3, #24]
}
 81108b8:	bf00      	nop
 81108ba:	37b0      	adds	r7, #176	@ 0xb0
 81108bc:	46bd      	mov	sp, r7
 81108be:	bd80      	pop	{r7, pc}
 81108c0:	58000c00 	.word	0x58000c00
 81108c4:	081101f9 	.word	0x081101f9

081108c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 81108c8:	b580      	push	{r7, lr}
 81108ca:	b0ae      	sub	sp, #184	@ 0xb8
 81108cc:	af00      	add	r7, sp, #0
 81108ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 81108d0:	687b      	ldr	r3, [r7, #4]
 81108d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81108d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 81108da:	687b      	ldr	r3, [r7, #4]
 81108dc:	681b      	ldr	r3, [r3, #0]
 81108de:	69db      	ldr	r3, [r3, #28]
 81108e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 81108e4:	687b      	ldr	r3, [r7, #4]
 81108e6:	681b      	ldr	r3, [r3, #0]
 81108e8:	681b      	ldr	r3, [r3, #0]
 81108ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 81108ee:	687b      	ldr	r3, [r7, #4]
 81108f0:	681b      	ldr	r3, [r3, #0]
 81108f2:	689b      	ldr	r3, [r3, #8]
 81108f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 81108f8:	687b      	ldr	r3, [r7, #4]
 81108fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81108fe:	2b22      	cmp	r3, #34	@ 0x22
 8110900:	f040 8186 	bne.w	8110c10 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8110904:	687b      	ldr	r3, [r7, #4]
 8110906:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 811090a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 811090e:	e129      	b.n	8110b64 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8110910:	687b      	ldr	r3, [r7, #4]
 8110912:	681b      	ldr	r3, [r3, #0]
 8110914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110916:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 811091a:	687b      	ldr	r3, [r7, #4]
 811091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811091e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8110922:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8110926:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 811092a:	4013      	ands	r3, r2
 811092c:	b29a      	uxth	r2, r3
 811092e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8110932:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8110934:	687b      	ldr	r3, [r7, #4]
 8110936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8110938:	1c9a      	adds	r2, r3, #2
 811093a:	687b      	ldr	r3, [r7, #4]
 811093c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 811093e:	687b      	ldr	r3, [r7, #4]
 8110940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110944:	b29b      	uxth	r3, r3
 8110946:	3b01      	subs	r3, #1
 8110948:	b29a      	uxth	r2, r3
 811094a:	687b      	ldr	r3, [r7, #4]
 811094c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8110950:	687b      	ldr	r3, [r7, #4]
 8110952:	681b      	ldr	r3, [r3, #0]
 8110954:	69db      	ldr	r3, [r3, #28]
 8110956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 811095a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 811095e:	f003 0307 	and.w	r3, r3, #7
 8110962:	2b00      	cmp	r3, #0
 8110964:	d053      	beq.n	8110a0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8110966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 811096a:	f003 0301 	and.w	r3, r3, #1
 811096e:	2b00      	cmp	r3, #0
 8110970:	d011      	beq.n	8110996 <UART_RxISR_16BIT_FIFOEN+0xce>
 8110972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8110976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 811097a:	2b00      	cmp	r3, #0
 811097c:	d00b      	beq.n	8110996 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 811097e:	687b      	ldr	r3, [r7, #4]
 8110980:	681b      	ldr	r3, [r3, #0]
 8110982:	2201      	movs	r2, #1
 8110984:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8110986:	687b      	ldr	r3, [r7, #4]
 8110988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811098c:	f043 0201 	orr.w	r2, r3, #1
 8110990:	687b      	ldr	r3, [r7, #4]
 8110992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8110996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 811099a:	f003 0302 	and.w	r3, r3, #2
 811099e:	2b00      	cmp	r3, #0
 81109a0:	d011      	beq.n	81109c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 81109a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 81109a6:	f003 0301 	and.w	r3, r3, #1
 81109aa:	2b00      	cmp	r3, #0
 81109ac:	d00b      	beq.n	81109c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81109ae:	687b      	ldr	r3, [r7, #4]
 81109b0:	681b      	ldr	r3, [r3, #0]
 81109b2:	2202      	movs	r2, #2
 81109b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 81109b6:	687b      	ldr	r3, [r7, #4]
 81109b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81109bc:	f043 0204 	orr.w	r2, r3, #4
 81109c0:	687b      	ldr	r3, [r7, #4]
 81109c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81109c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 81109ca:	f003 0304 	and.w	r3, r3, #4
 81109ce:	2b00      	cmp	r3, #0
 81109d0:	d011      	beq.n	81109f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 81109d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 81109d6:	f003 0301 	and.w	r3, r3, #1
 81109da:	2b00      	cmp	r3, #0
 81109dc:	d00b      	beq.n	81109f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81109de:	687b      	ldr	r3, [r7, #4]
 81109e0:	681b      	ldr	r3, [r3, #0]
 81109e2:	2204      	movs	r2, #4
 81109e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 81109e6:	687b      	ldr	r3, [r7, #4]
 81109e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81109ec:	f043 0202 	orr.w	r2, r3, #2
 81109f0:	687b      	ldr	r3, [r7, #4]
 81109f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81109f6:	687b      	ldr	r3, [r7, #4]
 81109f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81109fc:	2b00      	cmp	r3, #0
 81109fe:	d006      	beq.n	8110a0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8110a00:	6878      	ldr	r0, [r7, #4]
 8110a02:	f7fe faf7 	bl	810eff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8110a06:	687b      	ldr	r3, [r7, #4]
 8110a08:	2200      	movs	r2, #0
 8110a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8110a0e:	687b      	ldr	r3, [r7, #4]
 8110a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110a14:	b29b      	uxth	r3, r3
 8110a16:	2b00      	cmp	r3, #0
 8110a18:	f040 80a4 	bne.w	8110b64 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8110a1c:	687b      	ldr	r3, [r7, #4]
 8110a1e:	681b      	ldr	r3, [r3, #0]
 8110a20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8110a24:	e853 3f00 	ldrex	r3, [r3]
 8110a28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8110a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8110a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8110a30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8110a34:	687b      	ldr	r3, [r7, #4]
 8110a36:	681b      	ldr	r3, [r3, #0]
 8110a38:	461a      	mov	r2, r3
 8110a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8110a3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8110a42:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110a44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8110a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8110a4a:	e841 2300 	strex	r3, r2, [r1]
 8110a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8110a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8110a52:	2b00      	cmp	r3, #0
 8110a54:	d1e2      	bne.n	8110a1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8110a56:	687b      	ldr	r3, [r7, #4]
 8110a58:	681b      	ldr	r3, [r3, #0]
 8110a5a:	3308      	adds	r3, #8
 8110a5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8110a60:	e853 3f00 	ldrex	r3, [r3]
 8110a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8110a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8110a68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110a6c:	f023 0301 	bic.w	r3, r3, #1
 8110a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8110a74:	687b      	ldr	r3, [r7, #4]
 8110a76:	681b      	ldr	r3, [r3, #0]
 8110a78:	3308      	adds	r3, #8
 8110a7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8110a7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8110a80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110a82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8110a84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8110a86:	e841 2300 	strex	r3, r2, [r1]
 8110a8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8110a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8110a8e:	2b00      	cmp	r3, #0
 8110a90:	d1e1      	bne.n	8110a56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8110a92:	687b      	ldr	r3, [r7, #4]
 8110a94:	2220      	movs	r2, #32
 8110a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8110a9a:	687b      	ldr	r3, [r7, #4]
 8110a9c:	2200      	movs	r2, #0
 8110a9e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8110aa0:	687b      	ldr	r3, [r7, #4]
 8110aa2:	2200      	movs	r2, #0
 8110aa4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8110aa6:	687b      	ldr	r3, [r7, #4]
 8110aa8:	681b      	ldr	r3, [r3, #0]
 8110aaa:	4a5f      	ldr	r2, [pc, #380]	@ (8110c28 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8110aac:	4293      	cmp	r3, r2
 8110aae:	d021      	beq.n	8110af4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8110ab0:	687b      	ldr	r3, [r7, #4]
 8110ab2:	681b      	ldr	r3, [r3, #0]
 8110ab4:	685b      	ldr	r3, [r3, #4]
 8110ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8110aba:	2b00      	cmp	r3, #0
 8110abc:	d01a      	beq.n	8110af4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8110abe:	687b      	ldr	r3, [r7, #4]
 8110ac0:	681b      	ldr	r3, [r3, #0]
 8110ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8110ac6:	e853 3f00 	ldrex	r3, [r3]
 8110aca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8110acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8110ace:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8110ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8110ad6:	687b      	ldr	r3, [r7, #4]
 8110ad8:	681b      	ldr	r3, [r3, #0]
 8110ada:	461a      	mov	r2, r3
 8110adc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8110ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8110ae2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110ae4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8110ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8110ae8:	e841 2300 	strex	r3, r2, [r1]
 8110aec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8110aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8110af0:	2b00      	cmp	r3, #0
 8110af2:	d1e4      	bne.n	8110abe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110af4:	687b      	ldr	r3, [r7, #4]
 8110af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110af8:	2b01      	cmp	r3, #1
 8110afa:	d130      	bne.n	8110b5e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8110afc:	687b      	ldr	r3, [r7, #4]
 8110afe:	2200      	movs	r2, #0
 8110b00:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110b02:	687b      	ldr	r3, [r7, #4]
 8110b04:	681b      	ldr	r3, [r3, #0]
 8110b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110b0a:	e853 3f00 	ldrex	r3, [r3]
 8110b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8110b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110b12:	f023 0310 	bic.w	r3, r3, #16
 8110b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8110b1a:	687b      	ldr	r3, [r7, #4]
 8110b1c:	681b      	ldr	r3, [r3, #0]
 8110b1e:	461a      	mov	r2, r3
 8110b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8110b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8110b26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8110b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8110b2c:	e841 2300 	strex	r3, r2, [r1]
 8110b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8110b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8110b34:	2b00      	cmp	r3, #0
 8110b36:	d1e4      	bne.n	8110b02 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8110b38:	687b      	ldr	r3, [r7, #4]
 8110b3a:	681b      	ldr	r3, [r3, #0]
 8110b3c:	69db      	ldr	r3, [r3, #28]
 8110b3e:	f003 0310 	and.w	r3, r3, #16
 8110b42:	2b10      	cmp	r3, #16
 8110b44:	d103      	bne.n	8110b4e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8110b46:	687b      	ldr	r3, [r7, #4]
 8110b48:	681b      	ldr	r3, [r3, #0]
 8110b4a:	2210      	movs	r2, #16
 8110b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8110b4e:	687b      	ldr	r3, [r7, #4]
 8110b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8110b54:	4619      	mov	r1, r3
 8110b56:	6878      	ldr	r0, [r7, #4]
 8110b58:	f7fe fa56 	bl	810f008 <HAL_UARTEx_RxEventCallback>
 8110b5c:	e002      	b.n	8110b64 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8110b5e:	6878      	ldr	r0, [r7, #4]
 8110b60:	f7f3 fa06 	bl	8103f70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8110b64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8110b68:	2b00      	cmp	r3, #0
 8110b6a:	d006      	beq.n	8110b7a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8110b6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8110b70:	f003 0320 	and.w	r3, r3, #32
 8110b74:	2b00      	cmp	r3, #0
 8110b76:	f47f aecb 	bne.w	8110910 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8110b7a:	687b      	ldr	r3, [r7, #4]
 8110b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8110b80:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8110b84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8110b88:	2b00      	cmp	r3, #0
 8110b8a:	d049      	beq.n	8110c20 <UART_RxISR_16BIT_FIFOEN+0x358>
 8110b8c:	687b      	ldr	r3, [r7, #4]
 8110b8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8110b92:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8110b96:	429a      	cmp	r2, r3
 8110b98:	d242      	bcs.n	8110c20 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8110b9a:	687b      	ldr	r3, [r7, #4]
 8110b9c:	681b      	ldr	r3, [r3, #0]
 8110b9e:	3308      	adds	r3, #8
 8110ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110ba4:	e853 3f00 	ldrex	r3, [r3]
 8110ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8110baa:	6a3b      	ldr	r3, [r7, #32]
 8110bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8110bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8110bb4:	687b      	ldr	r3, [r7, #4]
 8110bb6:	681b      	ldr	r3, [r3, #0]
 8110bb8:	3308      	adds	r3, #8
 8110bba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8110bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8110bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8110bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110bc6:	e841 2300 	strex	r3, r2, [r1]
 8110bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8110bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110bce:	2b00      	cmp	r3, #0
 8110bd0:	d1e3      	bne.n	8110b9a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8110bd2:	687b      	ldr	r3, [r7, #4]
 8110bd4:	4a15      	ldr	r2, [pc, #84]	@ (8110c2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8110bd6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8110bd8:	687b      	ldr	r3, [r7, #4]
 8110bda:	681b      	ldr	r3, [r3, #0]
 8110bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110bde:	693b      	ldr	r3, [r7, #16]
 8110be0:	e853 3f00 	ldrex	r3, [r3]
 8110be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8110be6:	68fb      	ldr	r3, [r7, #12]
 8110be8:	f043 0320 	orr.w	r3, r3, #32
 8110bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8110bf0:	687b      	ldr	r3, [r7, #4]
 8110bf2:	681b      	ldr	r3, [r3, #0]
 8110bf4:	461a      	mov	r2, r3
 8110bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8110bfa:	61fb      	str	r3, [r7, #28]
 8110bfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110bfe:	69b9      	ldr	r1, [r7, #24]
 8110c00:	69fa      	ldr	r2, [r7, #28]
 8110c02:	e841 2300 	strex	r3, r2, [r1]
 8110c06:	617b      	str	r3, [r7, #20]
   return(result);
 8110c08:	697b      	ldr	r3, [r7, #20]
 8110c0a:	2b00      	cmp	r3, #0
 8110c0c:	d1e4      	bne.n	8110bd8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8110c0e:	e007      	b.n	8110c20 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8110c10:	687b      	ldr	r3, [r7, #4]
 8110c12:	681b      	ldr	r3, [r3, #0]
 8110c14:	699a      	ldr	r2, [r3, #24]
 8110c16:	687b      	ldr	r3, [r7, #4]
 8110c18:	681b      	ldr	r3, [r3, #0]
 8110c1a:	f042 0208 	orr.w	r2, r2, #8
 8110c1e:	619a      	str	r2, [r3, #24]
}
 8110c20:	bf00      	nop
 8110c22:	37b8      	adds	r7, #184	@ 0xb8
 8110c24:	46bd      	mov	sp, r7
 8110c26:	bd80      	pop	{r7, pc}
 8110c28:	58000c00 	.word	0x58000c00
 8110c2c:	081103b1 	.word	0x081103b1

08110c30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8110c30:	b480      	push	{r7}
 8110c32:	b083      	sub	sp, #12
 8110c34:	af00      	add	r7, sp, #0
 8110c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8110c38:	bf00      	nop
 8110c3a:	370c      	adds	r7, #12
 8110c3c:	46bd      	mov	sp, r7
 8110c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c42:	4770      	bx	lr

08110c44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8110c44:	b480      	push	{r7}
 8110c46:	b083      	sub	sp, #12
 8110c48:	af00      	add	r7, sp, #0
 8110c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8110c4c:	bf00      	nop
 8110c4e:	370c      	adds	r7, #12
 8110c50:	46bd      	mov	sp, r7
 8110c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c56:	4770      	bx	lr

08110c58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8110c58:	b480      	push	{r7}
 8110c5a:	b083      	sub	sp, #12
 8110c5c:	af00      	add	r7, sp, #0
 8110c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8110c60:	bf00      	nop
 8110c62:	370c      	adds	r7, #12
 8110c64:	46bd      	mov	sp, r7
 8110c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c6a:	4770      	bx	lr

08110c6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8110c6c:	b480      	push	{r7}
 8110c6e:	b085      	sub	sp, #20
 8110c70:	af00      	add	r7, sp, #0
 8110c72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110c74:	687b      	ldr	r3, [r7, #4]
 8110c76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8110c7a:	2b01      	cmp	r3, #1
 8110c7c:	d101      	bne.n	8110c82 <HAL_UARTEx_DisableFifoMode+0x16>
 8110c7e:	2302      	movs	r3, #2
 8110c80:	e027      	b.n	8110cd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8110c82:	687b      	ldr	r3, [r7, #4]
 8110c84:	2201      	movs	r2, #1
 8110c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8110c8a:	687b      	ldr	r3, [r7, #4]
 8110c8c:	2224      	movs	r2, #36	@ 0x24
 8110c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110c92:	687b      	ldr	r3, [r7, #4]
 8110c94:	681b      	ldr	r3, [r3, #0]
 8110c96:	681b      	ldr	r3, [r3, #0]
 8110c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110c9a:	687b      	ldr	r3, [r7, #4]
 8110c9c:	681b      	ldr	r3, [r3, #0]
 8110c9e:	681a      	ldr	r2, [r3, #0]
 8110ca0:	687b      	ldr	r3, [r7, #4]
 8110ca2:	681b      	ldr	r3, [r3, #0]
 8110ca4:	f022 0201 	bic.w	r2, r2, #1
 8110ca8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8110caa:	68fb      	ldr	r3, [r7, #12]
 8110cac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8110cb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8110cb2:	687b      	ldr	r3, [r7, #4]
 8110cb4:	2200      	movs	r2, #0
 8110cb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110cb8:	687b      	ldr	r3, [r7, #4]
 8110cba:	681b      	ldr	r3, [r3, #0]
 8110cbc:	68fa      	ldr	r2, [r7, #12]
 8110cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110cc0:	687b      	ldr	r3, [r7, #4]
 8110cc2:	2220      	movs	r2, #32
 8110cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110cc8:	687b      	ldr	r3, [r7, #4]
 8110cca:	2200      	movs	r2, #0
 8110ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8110cd0:	2300      	movs	r3, #0
}
 8110cd2:	4618      	mov	r0, r3
 8110cd4:	3714      	adds	r7, #20
 8110cd6:	46bd      	mov	sp, r7
 8110cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110cdc:	4770      	bx	lr

08110cde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8110cde:	b580      	push	{r7, lr}
 8110ce0:	b084      	sub	sp, #16
 8110ce2:	af00      	add	r7, sp, #0
 8110ce4:	6078      	str	r0, [r7, #4]
 8110ce6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110ce8:	687b      	ldr	r3, [r7, #4]
 8110cea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8110cee:	2b01      	cmp	r3, #1
 8110cf0:	d101      	bne.n	8110cf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8110cf2:	2302      	movs	r3, #2
 8110cf4:	e02d      	b.n	8110d52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8110cf6:	687b      	ldr	r3, [r7, #4]
 8110cf8:	2201      	movs	r2, #1
 8110cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8110cfe:	687b      	ldr	r3, [r7, #4]
 8110d00:	2224      	movs	r2, #36	@ 0x24
 8110d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110d06:	687b      	ldr	r3, [r7, #4]
 8110d08:	681b      	ldr	r3, [r3, #0]
 8110d0a:	681b      	ldr	r3, [r3, #0]
 8110d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110d0e:	687b      	ldr	r3, [r7, #4]
 8110d10:	681b      	ldr	r3, [r3, #0]
 8110d12:	681a      	ldr	r2, [r3, #0]
 8110d14:	687b      	ldr	r3, [r7, #4]
 8110d16:	681b      	ldr	r3, [r3, #0]
 8110d18:	f022 0201 	bic.w	r2, r2, #1
 8110d1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8110d1e:	687b      	ldr	r3, [r7, #4]
 8110d20:	681b      	ldr	r3, [r3, #0]
 8110d22:	689b      	ldr	r3, [r3, #8]
 8110d24:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8110d28:	687b      	ldr	r3, [r7, #4]
 8110d2a:	681b      	ldr	r3, [r3, #0]
 8110d2c:	683a      	ldr	r2, [r7, #0]
 8110d2e:	430a      	orrs	r2, r1
 8110d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110d32:	6878      	ldr	r0, [r7, #4]
 8110d34:	f000 f850 	bl	8110dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110d38:	687b      	ldr	r3, [r7, #4]
 8110d3a:	681b      	ldr	r3, [r3, #0]
 8110d3c:	68fa      	ldr	r2, [r7, #12]
 8110d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110d40:	687b      	ldr	r3, [r7, #4]
 8110d42:	2220      	movs	r2, #32
 8110d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110d48:	687b      	ldr	r3, [r7, #4]
 8110d4a:	2200      	movs	r2, #0
 8110d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8110d50:	2300      	movs	r3, #0
}
 8110d52:	4618      	mov	r0, r3
 8110d54:	3710      	adds	r7, #16
 8110d56:	46bd      	mov	sp, r7
 8110d58:	bd80      	pop	{r7, pc}

08110d5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8110d5a:	b580      	push	{r7, lr}
 8110d5c:	b084      	sub	sp, #16
 8110d5e:	af00      	add	r7, sp, #0
 8110d60:	6078      	str	r0, [r7, #4]
 8110d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110d64:	687b      	ldr	r3, [r7, #4]
 8110d66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8110d6a:	2b01      	cmp	r3, #1
 8110d6c:	d101      	bne.n	8110d72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8110d6e:	2302      	movs	r3, #2
 8110d70:	e02d      	b.n	8110dce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8110d72:	687b      	ldr	r3, [r7, #4]
 8110d74:	2201      	movs	r2, #1
 8110d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8110d7a:	687b      	ldr	r3, [r7, #4]
 8110d7c:	2224      	movs	r2, #36	@ 0x24
 8110d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110d82:	687b      	ldr	r3, [r7, #4]
 8110d84:	681b      	ldr	r3, [r3, #0]
 8110d86:	681b      	ldr	r3, [r3, #0]
 8110d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110d8a:	687b      	ldr	r3, [r7, #4]
 8110d8c:	681b      	ldr	r3, [r3, #0]
 8110d8e:	681a      	ldr	r2, [r3, #0]
 8110d90:	687b      	ldr	r3, [r7, #4]
 8110d92:	681b      	ldr	r3, [r3, #0]
 8110d94:	f022 0201 	bic.w	r2, r2, #1
 8110d98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8110d9a:	687b      	ldr	r3, [r7, #4]
 8110d9c:	681b      	ldr	r3, [r3, #0]
 8110d9e:	689b      	ldr	r3, [r3, #8]
 8110da0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8110da4:	687b      	ldr	r3, [r7, #4]
 8110da6:	681b      	ldr	r3, [r3, #0]
 8110da8:	683a      	ldr	r2, [r7, #0]
 8110daa:	430a      	orrs	r2, r1
 8110dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110dae:	6878      	ldr	r0, [r7, #4]
 8110db0:	f000 f812 	bl	8110dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110db4:	687b      	ldr	r3, [r7, #4]
 8110db6:	681b      	ldr	r3, [r3, #0]
 8110db8:	68fa      	ldr	r2, [r7, #12]
 8110dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110dbc:	687b      	ldr	r3, [r7, #4]
 8110dbe:	2220      	movs	r2, #32
 8110dc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110dc4:	687b      	ldr	r3, [r7, #4]
 8110dc6:	2200      	movs	r2, #0
 8110dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8110dcc:	2300      	movs	r3, #0
}
 8110dce:	4618      	mov	r0, r3
 8110dd0:	3710      	adds	r7, #16
 8110dd2:	46bd      	mov	sp, r7
 8110dd4:	bd80      	pop	{r7, pc}
	...

08110dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8110dd8:	b480      	push	{r7}
 8110dda:	b085      	sub	sp, #20
 8110ddc:	af00      	add	r7, sp, #0
 8110dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8110de0:	687b      	ldr	r3, [r7, #4]
 8110de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8110de4:	2b00      	cmp	r3, #0
 8110de6:	d108      	bne.n	8110dfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8110de8:	687b      	ldr	r3, [r7, #4]
 8110dea:	2201      	movs	r2, #1
 8110dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8110df0:	687b      	ldr	r3, [r7, #4]
 8110df2:	2201      	movs	r2, #1
 8110df4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8110df8:	e031      	b.n	8110e5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8110dfa:	2310      	movs	r3, #16
 8110dfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8110dfe:	2310      	movs	r3, #16
 8110e00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8110e02:	687b      	ldr	r3, [r7, #4]
 8110e04:	681b      	ldr	r3, [r3, #0]
 8110e06:	689b      	ldr	r3, [r3, #8]
 8110e08:	0e5b      	lsrs	r3, r3, #25
 8110e0a:	b2db      	uxtb	r3, r3
 8110e0c:	f003 0307 	and.w	r3, r3, #7
 8110e10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8110e12:	687b      	ldr	r3, [r7, #4]
 8110e14:	681b      	ldr	r3, [r3, #0]
 8110e16:	689b      	ldr	r3, [r3, #8]
 8110e18:	0f5b      	lsrs	r3, r3, #29
 8110e1a:	b2db      	uxtb	r3, r3
 8110e1c:	f003 0307 	and.w	r3, r3, #7
 8110e20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110e22:	7bbb      	ldrb	r3, [r7, #14]
 8110e24:	7b3a      	ldrb	r2, [r7, #12]
 8110e26:	4911      	ldr	r1, [pc, #68]	@ (8110e6c <UARTEx_SetNbDataToProcess+0x94>)
 8110e28:	5c8a      	ldrb	r2, [r1, r2]
 8110e2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8110e2e:	7b3a      	ldrb	r2, [r7, #12]
 8110e30:	490f      	ldr	r1, [pc, #60]	@ (8110e70 <UARTEx_SetNbDataToProcess+0x98>)
 8110e32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110e34:	fb93 f3f2 	sdiv	r3, r3, r2
 8110e38:	b29a      	uxth	r2, r3
 8110e3a:	687b      	ldr	r3, [r7, #4]
 8110e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110e40:	7bfb      	ldrb	r3, [r7, #15]
 8110e42:	7b7a      	ldrb	r2, [r7, #13]
 8110e44:	4909      	ldr	r1, [pc, #36]	@ (8110e6c <UARTEx_SetNbDataToProcess+0x94>)
 8110e46:	5c8a      	ldrb	r2, [r1, r2]
 8110e48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8110e4c:	7b7a      	ldrb	r2, [r7, #13]
 8110e4e:	4908      	ldr	r1, [pc, #32]	@ (8110e70 <UARTEx_SetNbDataToProcess+0x98>)
 8110e50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110e52:	fb93 f3f2 	sdiv	r3, r3, r2
 8110e56:	b29a      	uxth	r2, r3
 8110e58:	687b      	ldr	r3, [r7, #4]
 8110e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8110e5e:	bf00      	nop
 8110e60:	3714      	adds	r7, #20
 8110e62:	46bd      	mov	sp, r7
 8110e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110e68:	4770      	bx	lr
 8110e6a:	bf00      	nop
 8110e6c:	08115c90 	.word	0x08115c90
 8110e70:	08115c98 	.word	0x08115c98

08110e74 <arm_mat_trans_f32>:
 8110e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110e78:	8802      	ldrh	r2, [r0, #0]
 8110e7a:	884b      	ldrh	r3, [r1, #2]
 8110e7c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8110e80:	684f      	ldr	r7, [r1, #4]
 8110e82:	8840      	ldrh	r0, [r0, #2]
 8110e84:	4293      	cmp	r3, r2
 8110e86:	b083      	sub	sp, #12
 8110e88:	d14c      	bne.n	8110f24 <arm_mat_trans_f32+0xb0>
 8110e8a:	f8b1 e000 	ldrh.w	lr, [r1]
 8110e8e:	4586      	cmp	lr, r0
 8110e90:	d148      	bne.n	8110f24 <arm_mat_trans_f32+0xb0>
 8110e92:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8110e96:	009c      	lsls	r4, r3, #2
 8110e98:	f00e 0e03 	and.w	lr, lr, #3
 8110e9c:	fb08 f904 	mul.w	r9, r8, r4
 8110ea0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8110ea4:	011d      	lsls	r5, r3, #4
 8110ea6:	00db      	lsls	r3, r3, #3
 8110ea8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8110eac:	eb07 0a04 	add.w	sl, r7, r4
 8110eb0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8110eb4:	9201      	str	r2, [sp, #4]
 8110eb6:	9300      	str	r3, [sp, #0]
 8110eb8:	463b      	mov	r3, r7
 8110eba:	f1b8 0f00 	cmp.w	r8, #0
 8110ebe:	d01d      	beq.n	8110efc <arm_mat_trans_f32+0x88>
 8110ec0:	9900      	ldr	r1, [sp, #0]
 8110ec2:	f10c 0210 	add.w	r2, ip, #16
 8110ec6:	4439      	add	r1, r7
 8110ec8:	4640      	mov	r0, r8
 8110eca:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8110ece:	601e      	str	r6, [r3, #0]
 8110ed0:	ed52 7a03 	vldr	s15, [r2, #-12]
 8110ed4:	191e      	adds	r6, r3, r4
 8110ed6:	edc6 7a00 	vstr	s15, [r6]
 8110eda:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8110ede:	600e      	str	r6, [r1, #0]
 8110ee0:	ed52 7a01 	vldr	s15, [r2, #-4]
 8110ee4:	190e      	adds	r6, r1, r4
 8110ee6:	3801      	subs	r0, #1
 8110ee8:	442b      	add	r3, r5
 8110eea:	f102 0210 	add.w	r2, r2, #16
 8110eee:	edc6 7a00 	vstr	s15, [r6]
 8110ef2:	4429      	add	r1, r5
 8110ef4:	d1e9      	bne.n	8110eca <arm_mat_trans_f32+0x56>
 8110ef6:	44dc      	add	ip, fp
 8110ef8:	eb09 0307 	add.w	r3, r9, r7
 8110efc:	f1be 0f00 	cmp.w	lr, #0
 8110f00:	d009      	beq.n	8110f16 <arm_mat_trans_f32+0xa2>
 8110f02:	4672      	mov	r2, lr
 8110f04:	4661      	mov	r1, ip
 8110f06:	f851 0b04 	ldr.w	r0, [r1], #4
 8110f0a:	6018      	str	r0, [r3, #0]
 8110f0c:	3a01      	subs	r2, #1
 8110f0e:	4423      	add	r3, r4
 8110f10:	d1f9      	bne.n	8110f06 <arm_mat_trans_f32+0x92>
 8110f12:	9b01      	ldr	r3, [sp, #4]
 8110f14:	449c      	add	ip, r3
 8110f16:	3704      	adds	r7, #4
 8110f18:	4557      	cmp	r7, sl
 8110f1a:	d1cd      	bne.n	8110eb8 <arm_mat_trans_f32+0x44>
 8110f1c:	2000      	movs	r0, #0
 8110f1e:	b003      	add	sp, #12
 8110f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110f24:	f06f 0002 	mvn.w	r0, #2
 8110f28:	e7f9      	b.n	8110f1e <arm_mat_trans_f32+0xaa>
 8110f2a:	bf00      	nop

08110f2c <arm_mat_sub_f32>:
 8110f2c:	b4f0      	push	{r4, r5, r6, r7}
 8110f2e:	e9d1 4700 	ldrd	r4, r7, [r1]
 8110f32:	6803      	ldr	r3, [r0, #0]
 8110f34:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8110f38:	6856      	ldr	r6, [r2, #4]
 8110f3a:	42a3      	cmp	r3, r4
 8110f3c:	d15d      	bne.n	8110ffa <arm_mat_sub_f32+0xce>
 8110f3e:	6812      	ldr	r2, [r2, #0]
 8110f40:	4293      	cmp	r3, r2
 8110f42:	d15a      	bne.n	8110ffa <arm_mat_sub_f32+0xce>
 8110f44:	8803      	ldrh	r3, [r0, #0]
 8110f46:	8844      	ldrh	r4, [r0, #2]
 8110f48:	fb04 f403 	mul.w	r4, r4, r3
 8110f4c:	08a5      	lsrs	r5, r4, #2
 8110f4e:	d032      	beq.n	8110fb6 <arm_mat_sub_f32+0x8a>
 8110f50:	f10c 0110 	add.w	r1, ip, #16
 8110f54:	f107 0210 	add.w	r2, r7, #16
 8110f58:	f106 0310 	add.w	r3, r6, #16
 8110f5c:	4628      	mov	r0, r5
 8110f5e:	ed12 7a04 	vldr	s14, [r2, #-16]
 8110f62:	ed51 7a04 	vldr	s15, [r1, #-16]
 8110f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110f6a:	3801      	subs	r0, #1
 8110f6c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8110f70:	ed12 7a03 	vldr	s14, [r2, #-12]
 8110f74:	ed51 7a03 	vldr	s15, [r1, #-12]
 8110f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110f7c:	f101 0110 	add.w	r1, r1, #16
 8110f80:	ed43 7a03 	vstr	s15, [r3, #-12]
 8110f84:	ed12 7a02 	vldr	s14, [r2, #-8]
 8110f88:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8110f8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110f90:	f102 0210 	add.w	r2, r2, #16
 8110f94:	ed43 7a02 	vstr	s15, [r3, #-8]
 8110f98:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8110f9c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8110fa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110fa4:	f103 0310 	add.w	r3, r3, #16
 8110fa8:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8110fac:	d1d7      	bne.n	8110f5e <arm_mat_sub_f32+0x32>
 8110fae:	012b      	lsls	r3, r5, #4
 8110fb0:	449c      	add	ip, r3
 8110fb2:	441f      	add	r7, r3
 8110fb4:	441e      	add	r6, r3
 8110fb6:	f014 0403 	ands.w	r4, r4, #3
 8110fba:	d01b      	beq.n	8110ff4 <arm_mat_sub_f32+0xc8>
 8110fbc:	eddc 7a00 	vldr	s15, [ip]
 8110fc0:	ed97 7a00 	vldr	s14, [r7]
 8110fc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110fc8:	3c01      	subs	r4, #1
 8110fca:	edc6 7a00 	vstr	s15, [r6]
 8110fce:	d011      	beq.n	8110ff4 <arm_mat_sub_f32+0xc8>
 8110fd0:	eddc 7a01 	vldr	s15, [ip, #4]
 8110fd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8110fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110fdc:	2c01      	cmp	r4, #1
 8110fde:	edc6 7a01 	vstr	s15, [r6, #4]
 8110fe2:	d007      	beq.n	8110ff4 <arm_mat_sub_f32+0xc8>
 8110fe4:	eddc 7a02 	vldr	s15, [ip, #8]
 8110fe8:	ed97 7a02 	vldr	s14, [r7, #8]
 8110fec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110ff0:	edc6 7a02 	vstr	s15, [r6, #8]
 8110ff4:	2000      	movs	r0, #0
 8110ff6:	bcf0      	pop	{r4, r5, r6, r7}
 8110ff8:	4770      	bx	lr
 8110ffa:	f06f 0002 	mvn.w	r0, #2
 8110ffe:	e7fa      	b.n	8110ff6 <arm_mat_sub_f32+0xca>

08111000 <arm_mat_mult_f32>:
 8111000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111004:	8845      	ldrh	r5, [r0, #2]
 8111006:	880b      	ldrh	r3, [r1, #0]
 8111008:	8806      	ldrh	r6, [r0, #0]
 811100a:	6847      	ldr	r7, [r0, #4]
 811100c:	6854      	ldr	r4, [r2, #4]
 811100e:	6848      	ldr	r0, [r1, #4]
 8111010:	b08b      	sub	sp, #44	@ 0x2c
 8111012:	42ab      	cmp	r3, r5
 8111014:	9109      	str	r1, [sp, #36]	@ 0x24
 8111016:	9604      	str	r6, [sp, #16]
 8111018:	8849      	ldrh	r1, [r1, #2]
 811101a:	f040 808a 	bne.w	8111132 <arm_mat_mult_f32+0x132>
 811101e:	8815      	ldrh	r5, [r2, #0]
 8111020:	42b5      	cmp	r5, r6
 8111022:	f040 8086 	bne.w	8111132 <arm_mat_mult_f32+0x132>
 8111026:	8852      	ldrh	r2, [r2, #2]
 8111028:	428a      	cmp	r2, r1
 811102a:	f040 8082 	bne.w	8111132 <arm_mat_mult_f32+0x132>
 811102e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8111032:	1d01      	adds	r1, r0, #4
 8111034:	0116      	lsls	r6, r2, #4
 8111036:	9108      	str	r1, [sp, #32]
 8111038:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 811103c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8111040:	9101      	str	r1, [sp, #4]
 8111042:	fb06 f108 	mul.w	r1, r6, r8
 8111046:	0095      	lsls	r5, r2, #2
 8111048:	9103      	str	r1, [sp, #12]
 811104a:	00d2      	lsls	r2, r2, #3
 811104c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8111050:	f003 0903 	and.w	r9, r3, #3
 8111054:	009b      	lsls	r3, r3, #2
 8111056:	f107 0b10 	add.w	fp, r7, #16
 811105a:	eb04 0a05 	add.w	sl, r4, r5
 811105e:	9107      	str	r1, [sp, #28]
 8111060:	9202      	str	r2, [sp, #8]
 8111062:	9306      	str	r3, [sp, #24]
 8111064:	f1ab 0310 	sub.w	r3, fp, #16
 8111068:	9305      	str	r3, [sp, #20]
 811106a:	9b07      	ldr	r3, [sp, #28]
 811106c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8111070:	eb03 0c0a 	add.w	ip, r3, sl
 8111074:	eddf 7a31 	vldr	s15, [pc, #196]	@ 811113c <arm_mat_mult_f32+0x13c>
 8111078:	f1b8 0f00 	cmp.w	r8, #0
 811107c:	d053      	beq.n	8111126 <arm_mat_mult_f32+0x126>
 811107e:	9b02      	ldr	r3, [sp, #8]
 8111080:	4644      	mov	r4, r8
 8111082:	18c1      	adds	r1, r0, r3
 8111084:	4602      	mov	r2, r0
 8111086:	465b      	mov	r3, fp
 8111088:	ed92 6a00 	vldr	s12, [r2]
 811108c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8111090:	ed53 4a03 	vldr	s9, [r3, #-12]
 8111094:	ed53 6a02 	vldr	s13, [r3, #-8]
 8111098:	ed91 5a00 	vldr	s10, [r1]
 811109c:	ed53 5a01 	vldr	s11, [r3, #-4]
 81110a0:	1957      	adds	r7, r2, r5
 81110a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 81110a6:	ed97 6a00 	vldr	s12, [r7]
 81110aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 81110ae:	ee26 6a24 	vmul.f32	s12, s12, s9
 81110b2:	194f      	adds	r7, r1, r5
 81110b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 81110b8:	ee26 7a85 	vmul.f32	s14, s13, s10
 81110bc:	edd7 7a00 	vldr	s15, [r7]
 81110c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 81110c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 81110c8:	3c01      	subs	r4, #1
 81110ca:	4432      	add	r2, r6
 81110cc:	4431      	add	r1, r6
 81110ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 81110d2:	f103 0310 	add.w	r3, r3, #16
 81110d6:	d1d7      	bne.n	8111088 <arm_mat_mult_f32+0x88>
 81110d8:	9b03      	ldr	r3, [sp, #12]
 81110da:	9a01      	ldr	r2, [sp, #4]
 81110dc:	4418      	add	r0, r3
 81110de:	f1b9 0f00 	cmp.w	r9, #0
 81110e2:	d00b      	beq.n	81110fc <arm_mat_mult_f32+0xfc>
 81110e4:	464b      	mov	r3, r9
 81110e6:	edd0 6a00 	vldr	s13, [r0]
 81110ea:	ecb2 7a01 	vldmia	r2!, {s14}
 81110ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 81110f2:	3b01      	subs	r3, #1
 81110f4:	4428      	add	r0, r5
 81110f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 81110fa:	d1f4      	bne.n	81110e6 <arm_mat_mult_f32+0xe6>
 81110fc:	ecec 7a01 	vstmia	ip!, {s15}
 8111100:	45d4      	cmp	ip, sl
 8111102:	4670      	mov	r0, lr
 8111104:	f10e 0e04 	add.w	lr, lr, #4
 8111108:	d1b4      	bne.n	8111074 <arm_mat_mult_f32+0x74>
 811110a:	9a01      	ldr	r2, [sp, #4]
 811110c:	9b06      	ldr	r3, [sp, #24]
 811110e:	4611      	mov	r1, r2
 8111110:	4419      	add	r1, r3
 8111112:	449b      	add	fp, r3
 8111114:	9b04      	ldr	r3, [sp, #16]
 8111116:	9101      	str	r1, [sp, #4]
 8111118:	3b01      	subs	r3, #1
 811111a:	44aa      	add	sl, r5
 811111c:	9304      	str	r3, [sp, #16]
 811111e:	d004      	beq.n	811112a <arm_mat_mult_f32+0x12a>
 8111120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111122:	6858      	ldr	r0, [r3, #4]
 8111124:	e79e      	b.n	8111064 <arm_mat_mult_f32+0x64>
 8111126:	9a05      	ldr	r2, [sp, #20]
 8111128:	e7d9      	b.n	81110de <arm_mat_mult_f32+0xde>
 811112a:	4618      	mov	r0, r3
 811112c:	b00b      	add	sp, #44	@ 0x2c
 811112e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111132:	f06f 0002 	mvn.w	r0, #2
 8111136:	b00b      	add	sp, #44	@ 0x2c
 8111138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811113c:	00000000 	.word	0x00000000

08111140 <arm_mat_inverse_f32>:
 8111140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111144:	8843      	ldrh	r3, [r0, #2]
 8111146:	8804      	ldrh	r4, [r0, #0]
 8111148:	684e      	ldr	r6, [r1, #4]
 811114a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 811114e:	b087      	sub	sp, #28
 8111150:	429c      	cmp	r4, r3
 8111152:	9301      	str	r3, [sp, #4]
 8111154:	9603      	str	r6, [sp, #12]
 8111156:	f040 80ea 	bne.w	811132e <arm_mat_inverse_f32+0x1ee>
 811115a:	880a      	ldrh	r2, [r1, #0]
 811115c:	884b      	ldrh	r3, [r1, #2]
 811115e:	4293      	cmp	r3, r2
 8111160:	f040 80e5 	bne.w	811132e <arm_mat_inverse_f32+0x1ee>
 8111164:	429c      	cmp	r4, r3
 8111166:	f040 80e2 	bne.w	811132e <arm_mat_inverse_f32+0x1ee>
 811116a:	9005      	str	r0, [sp, #20]
 811116c:	b30c      	cbz	r4, 81111b2 <arm_mat_inverse_f32+0x72>
 811116e:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8111172:	1e67      	subs	r7, r4, #1
 8111174:	f846 bb04 	str.w	fp, [r6], #4
 8111178:	d01b      	beq.n	81111b2 <arm_mat_inverse_f32+0x72>
 811117a:	f04f 0801 	mov.w	r8, #1
 811117e:	00ba      	lsls	r2, r7, #2
 8111180:	eb06 0a02 	add.w	sl, r6, r2
 8111184:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8111188:	4630      	mov	r0, r6
 811118a:	2100      	movs	r1, #0
 811118c:	f001 f9c2 	bl	8112514 <memset>
 8111190:	eb0a 0605 	add.w	r6, sl, r5
 8111194:	462a      	mov	r2, r5
 8111196:	2100      	movs	r1, #0
 8111198:	4650      	mov	r0, sl
 811119a:	f1b8 0f00 	cmp.w	r8, #0
 811119e:	f000 80cb 	beq.w	8111338 <arm_mat_inverse_f32+0x1f8>
 81111a2:	f001 f9b7 	bl	8112514 <memset>
 81111a6:	3f01      	subs	r7, #1
 81111a8:	f108 0801 	add.w	r8, r8, #1
 81111ac:	f846 bb04 	str.w	fp, [r6], #4
 81111b0:	d1e5      	bne.n	811117e <arm_mat_inverse_f32+0x3e>
 81111b2:	9b01      	ldr	r3, [sp, #4]
 81111b4:	2b00      	cmp	r3, #0
 81111b6:	f000 80b5 	beq.w	8111324 <arm_mat_inverse_f32+0x1e4>
 81111ba:	009d      	lsls	r5, r3, #2
 81111bc:	eb09 0205 	add.w	r2, r9, r5
 81111c0:	46cc      	mov	ip, r9
 81111c2:	9202      	str	r2, [sp, #8]
 81111c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 81111c8:	1d2a      	adds	r2, r5, #4
 81111ca:	9204      	str	r2, [sp, #16]
 81111cc:	462f      	mov	r7, r5
 81111ce:	469e      	mov	lr, r3
 81111d0:	2600      	movs	r6, #0
 81111d2:	9b02      	ldr	r3, [sp, #8]
 81111d4:	eddc 6a00 	vldr	s13, [ip]
 81111d8:	42b4      	cmp	r4, r6
 81111da:	eba3 0b07 	sub.w	fp, r3, r7
 81111de:	f000 80a1 	beq.w	8111324 <arm_mat_inverse_f32+0x1e4>
 81111e2:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8111348 <arm_mat_inverse_f32+0x208>
 81111e6:	4632      	mov	r2, r6
 81111e8:	4663      	mov	r3, ip
 81111ea:	e00b      	b.n	8111204 <arm_mat_inverse_f32+0xc4>
 81111ec:	eef4 7a47 	vcmp.f32	s15, s14
 81111f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81111f4:	f102 0201 	add.w	r2, r2, #1
 81111f8:	bfc8      	it	gt
 81111fa:	eeb0 7a67 	vmovgt.f32	s14, s15
 81111fe:	42a2      	cmp	r2, r4
 8111200:	442b      	add	r3, r5
 8111202:	d014      	beq.n	811122e <arm_mat_inverse_f32+0xee>
 8111204:	edd3 7a00 	vldr	s15, [r3]
 8111208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 811120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8111210:	eeb1 6a67 	vneg.f32	s12, s15
 8111214:	dcea      	bgt.n	81111ec <arm_mat_inverse_f32+0xac>
 8111216:	eeb4 6a47 	vcmp.f32	s12, s14
 811121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 811121e:	f102 0201 	add.w	r2, r2, #1
 8111222:	bfc8      	it	gt
 8111224:	eeb0 7a46 	vmovgt.f32	s14, s12
 8111228:	42a2      	cmp	r2, r4
 811122a:	442b      	add	r3, r5
 811122c:	d1ea      	bne.n	8111204 <arm_mat_inverse_f32+0xc4>
 811122e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8111232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8111236:	d075      	beq.n	8111324 <arm_mat_inverse_f32+0x1e4>
 8111238:	eef5 6a40 	vcmp.f32	s13, #0.0
 811123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8111240:	d070      	beq.n	8111324 <arm_mat_inverse_f32+0x1e4>
 8111242:	4672      	mov	r2, lr
 8111244:	4663      	mov	r3, ip
 8111246:	ed93 7a00 	vldr	s14, [r3]
 811124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 811124e:	3a01      	subs	r2, #1
 8111250:	ece3 7a01 	vstmia	r3!, {s15}
 8111254:	d1f7      	bne.n	8111246 <arm_mat_inverse_f32+0x106>
 8111256:	9901      	ldr	r1, [sp, #4]
 8111258:	464b      	mov	r3, r9
 811125a:	ed93 7a00 	vldr	s14, [r3]
 811125e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8111262:	3901      	subs	r1, #1
 8111264:	ece3 7a01 	vstmia	r3!, {s15}
 8111268:	d1f7      	bne.n	811125a <arm_mat_inverse_f32+0x11a>
 811126a:	9803      	ldr	r0, [sp, #12]
 811126c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8111270:	42b1      	cmp	r1, r6
 8111272:	d039      	beq.n	81112e8 <arm_mat_inverse_f32+0x1a8>
 8111274:	eddb 6a00 	vldr	s13, [fp]
 8111278:	465a      	mov	r2, fp
 811127a:	4673      	mov	r3, lr
 811127c:	46e2      	mov	sl, ip
 811127e:	ecba 7a01 	vldmia	sl!, {s14}
 8111282:	edd2 7a00 	vldr	s15, [r2]
 8111286:	ee26 7a87 	vmul.f32	s14, s13, s14
 811128a:	3b01      	subs	r3, #1
 811128c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8111290:	ece2 7a01 	vstmia	r2!, {s15}
 8111294:	d1f3      	bne.n	811127e <arm_mat_inverse_f32+0x13e>
 8111296:	9b01      	ldr	r3, [sp, #4]
 8111298:	44bb      	add	fp, r7
 811129a:	4602      	mov	r2, r0
 811129c:	46ca      	mov	sl, r9
 811129e:	ecba 7a01 	vldmia	sl!, {s14}
 81112a2:	edd2 7a00 	vldr	s15, [r2]
 81112a6:	ee26 7a87 	vmul.f32	s14, s13, s14
 81112aa:	3b01      	subs	r3, #1
 81112ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81112b0:	ece2 7a01 	vstmia	r2!, {s15}
 81112b4:	d1f3      	bne.n	811129e <arm_mat_inverse_f32+0x15e>
 81112b6:	4428      	add	r0, r5
 81112b8:	3101      	adds	r1, #1
 81112ba:	428c      	cmp	r4, r1
 81112bc:	44c3      	add	fp, r8
 81112be:	d1d7      	bne.n	8111270 <arm_mat_inverse_f32+0x130>
 81112c0:	9b04      	ldr	r3, [sp, #16]
 81112c2:	f1be 0e01 	subs.w	lr, lr, #1
 81112c6:	f106 0601 	add.w	r6, r6, #1
 81112ca:	449c      	add	ip, r3
 81112cc:	f1a7 0704 	sub.w	r7, r7, #4
 81112d0:	44a9      	add	r9, r5
 81112d2:	f47f af7e 	bne.w	81111d2 <arm_mat_inverse_f32+0x92>
 81112d6:	eef5 6a40 	vcmp.f32	s13, #0.0
 81112da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81112de:	d006      	beq.n	81112ee <arm_mat_inverse_f32+0x1ae>
 81112e0:	2000      	movs	r0, #0
 81112e2:	b007      	add	sp, #28
 81112e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81112e8:	44bb      	add	fp, r7
 81112ea:	4428      	add	r0, r5
 81112ec:	e7e4      	b.n	81112b8 <arm_mat_inverse_f32+0x178>
 81112ee:	9b05      	ldr	r3, [sp, #20]
 81112f0:	9a01      	ldr	r2, [sp, #4]
 81112f2:	685b      	ldr	r3, [r3, #4]
 81112f4:	edd3 7a00 	vldr	s15, [r3]
 81112f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 81112fc:	fb02 f204 	mul.w	r2, r2, r4
 8111300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8111304:	4614      	mov	r4, r2
 8111306:	bf08      	it	eq
 8111308:	3304      	addeq	r3, #4
 811130a:	d007      	beq.n	811131c <arm_mat_inverse_f32+0x1dc>
 811130c:	e7e8      	b.n	81112e0 <arm_mat_inverse_f32+0x1a0>
 811130e:	ecf3 7a01 	vldmia	r3!, {s15}
 8111312:	eef5 7a40 	vcmp.f32	s15, #0.0
 8111316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 811131a:	d1e1      	bne.n	81112e0 <arm_mat_inverse_f32+0x1a0>
 811131c:	f10e 0e01 	add.w	lr, lr, #1
 8111320:	4574      	cmp	r4, lr
 8111322:	d1f4      	bne.n	811130e <arm_mat_inverse_f32+0x1ce>
 8111324:	f06f 0004 	mvn.w	r0, #4
 8111328:	b007      	add	sp, #28
 811132a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811132e:	f06f 0002 	mvn.w	r0, #2
 8111332:	b007      	add	sp, #28
 8111334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111338:	4656      	mov	r6, sl
 811133a:	3f01      	subs	r7, #1
 811133c:	f846 bb04 	str.w	fp, [r6], #4
 8111340:	f47f af1b 	bne.w	811117a <arm_mat_inverse_f32+0x3a>
 8111344:	e735      	b.n	81111b2 <arm_mat_inverse_f32+0x72>
 8111346:	bf00      	nop
 8111348:	00000000 	.word	0x00000000

0811134c <arm_mat_init_f32>:
 811134c:	8001      	strh	r1, [r0, #0]
 811134e:	8042      	strh	r2, [r0, #2]
 8111350:	6043      	str	r3, [r0, #4]
 8111352:	4770      	bx	lr

08111354 <arm_mat_add_f32>:
 8111354:	b4f0      	push	{r4, r5, r6, r7}
 8111356:	e9d1 4700 	ldrd	r4, r7, [r1]
 811135a:	6803      	ldr	r3, [r0, #0]
 811135c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8111360:	6856      	ldr	r6, [r2, #4]
 8111362:	42a3      	cmp	r3, r4
 8111364:	d15d      	bne.n	8111422 <arm_mat_add_f32+0xce>
 8111366:	6812      	ldr	r2, [r2, #0]
 8111368:	4293      	cmp	r3, r2
 811136a:	d15a      	bne.n	8111422 <arm_mat_add_f32+0xce>
 811136c:	8803      	ldrh	r3, [r0, #0]
 811136e:	8844      	ldrh	r4, [r0, #2]
 8111370:	fb04 f403 	mul.w	r4, r4, r3
 8111374:	08a5      	lsrs	r5, r4, #2
 8111376:	d032      	beq.n	81113de <arm_mat_add_f32+0x8a>
 8111378:	f10c 0110 	add.w	r1, ip, #16
 811137c:	f107 0210 	add.w	r2, r7, #16
 8111380:	f106 0310 	add.w	r3, r6, #16
 8111384:	4628      	mov	r0, r5
 8111386:	ed12 7a04 	vldr	s14, [r2, #-16]
 811138a:	ed51 7a04 	vldr	s15, [r1, #-16]
 811138e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8111392:	3801      	subs	r0, #1
 8111394:	ed43 7a04 	vstr	s15, [r3, #-16]
 8111398:	ed12 7a03 	vldr	s14, [r2, #-12]
 811139c:	ed51 7a03 	vldr	s15, [r1, #-12]
 81113a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 81113a4:	f101 0110 	add.w	r1, r1, #16
 81113a8:	ed43 7a03 	vstr	s15, [r3, #-12]
 81113ac:	ed12 7a02 	vldr	s14, [r2, #-8]
 81113b0:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 81113b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 81113b8:	f102 0210 	add.w	r2, r2, #16
 81113bc:	ed43 7a02 	vstr	s15, [r3, #-8]
 81113c0:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 81113c4:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 81113c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 81113cc:	f103 0310 	add.w	r3, r3, #16
 81113d0:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 81113d4:	d1d7      	bne.n	8111386 <arm_mat_add_f32+0x32>
 81113d6:	012b      	lsls	r3, r5, #4
 81113d8:	449c      	add	ip, r3
 81113da:	441f      	add	r7, r3
 81113dc:	441e      	add	r6, r3
 81113de:	f014 0403 	ands.w	r4, r4, #3
 81113e2:	d01b      	beq.n	811141c <arm_mat_add_f32+0xc8>
 81113e4:	edd7 7a00 	vldr	s15, [r7]
 81113e8:	ed9c 7a00 	vldr	s14, [ip]
 81113ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 81113f0:	3c01      	subs	r4, #1
 81113f2:	edc6 7a00 	vstr	s15, [r6]
 81113f6:	d011      	beq.n	811141c <arm_mat_add_f32+0xc8>
 81113f8:	eddc 7a01 	vldr	s15, [ip, #4]
 81113fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8111400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8111404:	2c01      	cmp	r4, #1
 8111406:	edc6 7a01 	vstr	s15, [r6, #4]
 811140a:	d007      	beq.n	811141c <arm_mat_add_f32+0xc8>
 811140c:	eddc 7a02 	vldr	s15, [ip, #8]
 8111410:	ed97 7a02 	vldr	s14, [r7, #8]
 8111414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8111418:	edc6 7a02 	vstr	s15, [r6, #8]
 811141c:	2000      	movs	r0, #0
 811141e:	bcf0      	pop	{r4, r5, r6, r7}
 8111420:	4770      	bx	lr
 8111422:	f06f 0002 	mvn.w	r0, #2
 8111426:	e7fa      	b.n	811141e <arm_mat_add_f32+0xca>

08111428 <arm_fir_init_f32>:
 8111428:	b538      	push	{r3, r4, r5, lr}
 811142a:	9c04      	ldr	r4, [sp, #16]
 811142c:	6082      	str	r2, [r0, #8]
 811142e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8111432:	3c01      	subs	r4, #1
 8111434:	440c      	add	r4, r1
 8111436:	8001      	strh	r1, [r0, #0]
 8111438:	4605      	mov	r5, r0
 811143a:	00a2      	lsls	r2, r4, #2
 811143c:	4618      	mov	r0, r3
 811143e:	2100      	movs	r1, #0
 8111440:	f001 f868 	bl	8112514 <memset>
 8111444:	6068      	str	r0, [r5, #4]
 8111446:	bd38      	pop	{r3, r4, r5, pc}

08111448 <srand>:
 8111448:	b538      	push	{r3, r4, r5, lr}
 811144a:	4b10      	ldr	r3, [pc, #64]	@ (811148c <srand+0x44>)
 811144c:	681d      	ldr	r5, [r3, #0]
 811144e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8111450:	4604      	mov	r4, r0
 8111452:	b9b3      	cbnz	r3, 8111482 <srand+0x3a>
 8111454:	2018      	movs	r0, #24
 8111456:	f001 ffa5 	bl	81133a4 <malloc>
 811145a:	4602      	mov	r2, r0
 811145c:	6328      	str	r0, [r5, #48]	@ 0x30
 811145e:	b920      	cbnz	r0, 811146a <srand+0x22>
 8111460:	4b0b      	ldr	r3, [pc, #44]	@ (8111490 <srand+0x48>)
 8111462:	480c      	ldr	r0, [pc, #48]	@ (8111494 <srand+0x4c>)
 8111464:	2146      	movs	r1, #70	@ 0x46
 8111466:	f001 f8e9 	bl	811263c <__assert_func>
 811146a:	490b      	ldr	r1, [pc, #44]	@ (8111498 <srand+0x50>)
 811146c:	4b0b      	ldr	r3, [pc, #44]	@ (811149c <srand+0x54>)
 811146e:	e9c0 1300 	strd	r1, r3, [r0]
 8111472:	4b0b      	ldr	r3, [pc, #44]	@ (81114a0 <srand+0x58>)
 8111474:	6083      	str	r3, [r0, #8]
 8111476:	230b      	movs	r3, #11
 8111478:	8183      	strh	r3, [r0, #12]
 811147a:	2100      	movs	r1, #0
 811147c:	2001      	movs	r0, #1
 811147e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8111482:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8111484:	2200      	movs	r2, #0
 8111486:	611c      	str	r4, [r3, #16]
 8111488:	615a      	str	r2, [r3, #20]
 811148a:	bd38      	pop	{r3, r4, r5, pc}
 811148c:	100000b0 	.word	0x100000b0
 8111490:	08115ca0 	.word	0x08115ca0
 8111494:	08115cb7 	.word	0x08115cb7
 8111498:	abcd330e 	.word	0xabcd330e
 811149c:	e66d1234 	.word	0xe66d1234
 81114a0:	0005deec 	.word	0x0005deec

081114a4 <__cvt>:
 81114a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81114a8:	ec57 6b10 	vmov	r6, r7, d0
 81114ac:	2f00      	cmp	r7, #0
 81114ae:	460c      	mov	r4, r1
 81114b0:	4619      	mov	r1, r3
 81114b2:	463b      	mov	r3, r7
 81114b4:	bfbb      	ittet	lt
 81114b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 81114ba:	461f      	movlt	r7, r3
 81114bc:	2300      	movge	r3, #0
 81114be:	232d      	movlt	r3, #45	@ 0x2d
 81114c0:	700b      	strb	r3, [r1, #0]
 81114c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81114c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 81114c8:	4691      	mov	r9, r2
 81114ca:	f023 0820 	bic.w	r8, r3, #32
 81114ce:	bfbc      	itt	lt
 81114d0:	4632      	movlt	r2, r6
 81114d2:	4616      	movlt	r6, r2
 81114d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81114d8:	d005      	beq.n	81114e6 <__cvt+0x42>
 81114da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 81114de:	d100      	bne.n	81114e2 <__cvt+0x3e>
 81114e0:	3401      	adds	r4, #1
 81114e2:	2102      	movs	r1, #2
 81114e4:	e000      	b.n	81114e8 <__cvt+0x44>
 81114e6:	2103      	movs	r1, #3
 81114e8:	ab03      	add	r3, sp, #12
 81114ea:	9301      	str	r3, [sp, #4]
 81114ec:	ab02      	add	r3, sp, #8
 81114ee:	9300      	str	r3, [sp, #0]
 81114f0:	ec47 6b10 	vmov	d0, r6, r7
 81114f4:	4653      	mov	r3, sl
 81114f6:	4622      	mov	r2, r4
 81114f8:	f001 f946 	bl	8112788 <_dtoa_r>
 81114fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8111500:	4605      	mov	r5, r0
 8111502:	d119      	bne.n	8111538 <__cvt+0x94>
 8111504:	f019 0f01 	tst.w	r9, #1
 8111508:	d00e      	beq.n	8111528 <__cvt+0x84>
 811150a:	eb00 0904 	add.w	r9, r0, r4
 811150e:	2200      	movs	r2, #0
 8111510:	2300      	movs	r3, #0
 8111512:	4630      	mov	r0, r6
 8111514:	4639      	mov	r1, r7
 8111516:	f7ef fb5f 	bl	8100bd8 <__aeabi_dcmpeq>
 811151a:	b108      	cbz	r0, 8111520 <__cvt+0x7c>
 811151c:	f8cd 900c 	str.w	r9, [sp, #12]
 8111520:	2230      	movs	r2, #48	@ 0x30
 8111522:	9b03      	ldr	r3, [sp, #12]
 8111524:	454b      	cmp	r3, r9
 8111526:	d31e      	bcc.n	8111566 <__cvt+0xc2>
 8111528:	9b03      	ldr	r3, [sp, #12]
 811152a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811152c:	1b5b      	subs	r3, r3, r5
 811152e:	4628      	mov	r0, r5
 8111530:	6013      	str	r3, [r2, #0]
 8111532:	b004      	add	sp, #16
 8111534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111538:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 811153c:	eb00 0904 	add.w	r9, r0, r4
 8111540:	d1e5      	bne.n	811150e <__cvt+0x6a>
 8111542:	7803      	ldrb	r3, [r0, #0]
 8111544:	2b30      	cmp	r3, #48	@ 0x30
 8111546:	d10a      	bne.n	811155e <__cvt+0xba>
 8111548:	2200      	movs	r2, #0
 811154a:	2300      	movs	r3, #0
 811154c:	4630      	mov	r0, r6
 811154e:	4639      	mov	r1, r7
 8111550:	f7ef fb42 	bl	8100bd8 <__aeabi_dcmpeq>
 8111554:	b918      	cbnz	r0, 811155e <__cvt+0xba>
 8111556:	f1c4 0401 	rsb	r4, r4, #1
 811155a:	f8ca 4000 	str.w	r4, [sl]
 811155e:	f8da 3000 	ldr.w	r3, [sl]
 8111562:	4499      	add	r9, r3
 8111564:	e7d3      	b.n	811150e <__cvt+0x6a>
 8111566:	1c59      	adds	r1, r3, #1
 8111568:	9103      	str	r1, [sp, #12]
 811156a:	701a      	strb	r2, [r3, #0]
 811156c:	e7d9      	b.n	8111522 <__cvt+0x7e>

0811156e <__exponent>:
 811156e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8111570:	2900      	cmp	r1, #0
 8111572:	bfba      	itte	lt
 8111574:	4249      	neglt	r1, r1
 8111576:	232d      	movlt	r3, #45	@ 0x2d
 8111578:	232b      	movge	r3, #43	@ 0x2b
 811157a:	2909      	cmp	r1, #9
 811157c:	7002      	strb	r2, [r0, #0]
 811157e:	7043      	strb	r3, [r0, #1]
 8111580:	dd29      	ble.n	81115d6 <__exponent+0x68>
 8111582:	f10d 0307 	add.w	r3, sp, #7
 8111586:	461d      	mov	r5, r3
 8111588:	270a      	movs	r7, #10
 811158a:	461a      	mov	r2, r3
 811158c:	fbb1 f6f7 	udiv	r6, r1, r7
 8111590:	fb07 1416 	mls	r4, r7, r6, r1
 8111594:	3430      	adds	r4, #48	@ 0x30
 8111596:	f802 4c01 	strb.w	r4, [r2, #-1]
 811159a:	460c      	mov	r4, r1
 811159c:	2c63      	cmp	r4, #99	@ 0x63
 811159e:	f103 33ff 	add.w	r3, r3, #4294967295
 81115a2:	4631      	mov	r1, r6
 81115a4:	dcf1      	bgt.n	811158a <__exponent+0x1c>
 81115a6:	3130      	adds	r1, #48	@ 0x30
 81115a8:	1e94      	subs	r4, r2, #2
 81115aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 81115ae:	1c41      	adds	r1, r0, #1
 81115b0:	4623      	mov	r3, r4
 81115b2:	42ab      	cmp	r3, r5
 81115b4:	d30a      	bcc.n	81115cc <__exponent+0x5e>
 81115b6:	f10d 0309 	add.w	r3, sp, #9
 81115ba:	1a9b      	subs	r3, r3, r2
 81115bc:	42ac      	cmp	r4, r5
 81115be:	bf88      	it	hi
 81115c0:	2300      	movhi	r3, #0
 81115c2:	3302      	adds	r3, #2
 81115c4:	4403      	add	r3, r0
 81115c6:	1a18      	subs	r0, r3, r0
 81115c8:	b003      	add	sp, #12
 81115ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81115cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 81115d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 81115d4:	e7ed      	b.n	81115b2 <__exponent+0x44>
 81115d6:	2330      	movs	r3, #48	@ 0x30
 81115d8:	3130      	adds	r1, #48	@ 0x30
 81115da:	7083      	strb	r3, [r0, #2]
 81115dc:	70c1      	strb	r1, [r0, #3]
 81115de:	1d03      	adds	r3, r0, #4
 81115e0:	e7f1      	b.n	81115c6 <__exponent+0x58>
	...

081115e4 <_printf_float>:
 81115e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81115e8:	b08d      	sub	sp, #52	@ 0x34
 81115ea:	460c      	mov	r4, r1
 81115ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 81115f0:	4616      	mov	r6, r2
 81115f2:	461f      	mov	r7, r3
 81115f4:	4605      	mov	r5, r0
 81115f6:	f000 ff95 	bl	8112524 <_localeconv_r>
 81115fa:	6803      	ldr	r3, [r0, #0]
 81115fc:	9304      	str	r3, [sp, #16]
 81115fe:	4618      	mov	r0, r3
 8111600:	f7ee febe 	bl	8100380 <strlen>
 8111604:	2300      	movs	r3, #0
 8111606:	930a      	str	r3, [sp, #40]	@ 0x28
 8111608:	f8d8 3000 	ldr.w	r3, [r8]
 811160c:	9005      	str	r0, [sp, #20]
 811160e:	3307      	adds	r3, #7
 8111610:	f023 0307 	bic.w	r3, r3, #7
 8111614:	f103 0208 	add.w	r2, r3, #8
 8111618:	f894 a018 	ldrb.w	sl, [r4, #24]
 811161c:	f8d4 b000 	ldr.w	fp, [r4]
 8111620:	f8c8 2000 	str.w	r2, [r8]
 8111624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8111628:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 811162c:	9307      	str	r3, [sp, #28]
 811162e:	f8cd 8018 	str.w	r8, [sp, #24]
 8111632:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8111636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 811163a:	4b9c      	ldr	r3, [pc, #624]	@ (81118ac <_printf_float+0x2c8>)
 811163c:	f04f 32ff 	mov.w	r2, #4294967295
 8111640:	f7ef fafc 	bl	8100c3c <__aeabi_dcmpun>
 8111644:	bb70      	cbnz	r0, 81116a4 <_printf_float+0xc0>
 8111646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 811164a:	4b98      	ldr	r3, [pc, #608]	@ (81118ac <_printf_float+0x2c8>)
 811164c:	f04f 32ff 	mov.w	r2, #4294967295
 8111650:	f7ef fad6 	bl	8100c00 <__aeabi_dcmple>
 8111654:	bb30      	cbnz	r0, 81116a4 <_printf_float+0xc0>
 8111656:	2200      	movs	r2, #0
 8111658:	2300      	movs	r3, #0
 811165a:	4640      	mov	r0, r8
 811165c:	4649      	mov	r1, r9
 811165e:	f7ef fac5 	bl	8100bec <__aeabi_dcmplt>
 8111662:	b110      	cbz	r0, 811166a <_printf_float+0x86>
 8111664:	232d      	movs	r3, #45	@ 0x2d
 8111666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811166a:	4a91      	ldr	r2, [pc, #580]	@ (81118b0 <_printf_float+0x2cc>)
 811166c:	4b91      	ldr	r3, [pc, #580]	@ (81118b4 <_printf_float+0x2d0>)
 811166e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8111672:	bf94      	ite	ls
 8111674:	4690      	movls	r8, r2
 8111676:	4698      	movhi	r8, r3
 8111678:	2303      	movs	r3, #3
 811167a:	6123      	str	r3, [r4, #16]
 811167c:	f02b 0304 	bic.w	r3, fp, #4
 8111680:	6023      	str	r3, [r4, #0]
 8111682:	f04f 0900 	mov.w	r9, #0
 8111686:	9700      	str	r7, [sp, #0]
 8111688:	4633      	mov	r3, r6
 811168a:	aa0b      	add	r2, sp, #44	@ 0x2c
 811168c:	4621      	mov	r1, r4
 811168e:	4628      	mov	r0, r5
 8111690:	f000 f9d2 	bl	8111a38 <_printf_common>
 8111694:	3001      	adds	r0, #1
 8111696:	f040 808d 	bne.w	81117b4 <_printf_float+0x1d0>
 811169a:	f04f 30ff 	mov.w	r0, #4294967295
 811169e:	b00d      	add	sp, #52	@ 0x34
 81116a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81116a4:	4642      	mov	r2, r8
 81116a6:	464b      	mov	r3, r9
 81116a8:	4640      	mov	r0, r8
 81116aa:	4649      	mov	r1, r9
 81116ac:	f7ef fac6 	bl	8100c3c <__aeabi_dcmpun>
 81116b0:	b140      	cbz	r0, 81116c4 <_printf_float+0xe0>
 81116b2:	464b      	mov	r3, r9
 81116b4:	2b00      	cmp	r3, #0
 81116b6:	bfbc      	itt	lt
 81116b8:	232d      	movlt	r3, #45	@ 0x2d
 81116ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 81116be:	4a7e      	ldr	r2, [pc, #504]	@ (81118b8 <_printf_float+0x2d4>)
 81116c0:	4b7e      	ldr	r3, [pc, #504]	@ (81118bc <_printf_float+0x2d8>)
 81116c2:	e7d4      	b.n	811166e <_printf_float+0x8a>
 81116c4:	6863      	ldr	r3, [r4, #4]
 81116c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 81116ca:	9206      	str	r2, [sp, #24]
 81116cc:	1c5a      	adds	r2, r3, #1
 81116ce:	d13b      	bne.n	8111748 <_printf_float+0x164>
 81116d0:	2306      	movs	r3, #6
 81116d2:	6063      	str	r3, [r4, #4]
 81116d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 81116d8:	2300      	movs	r3, #0
 81116da:	6022      	str	r2, [r4, #0]
 81116dc:	9303      	str	r3, [sp, #12]
 81116de:	ab0a      	add	r3, sp, #40	@ 0x28
 81116e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 81116e4:	ab09      	add	r3, sp, #36	@ 0x24
 81116e6:	9300      	str	r3, [sp, #0]
 81116e8:	6861      	ldr	r1, [r4, #4]
 81116ea:	ec49 8b10 	vmov	d0, r8, r9
 81116ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 81116f2:	4628      	mov	r0, r5
 81116f4:	f7ff fed6 	bl	81114a4 <__cvt>
 81116f8:	9b06      	ldr	r3, [sp, #24]
 81116fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81116fc:	2b47      	cmp	r3, #71	@ 0x47
 81116fe:	4680      	mov	r8, r0
 8111700:	d129      	bne.n	8111756 <_printf_float+0x172>
 8111702:	1cc8      	adds	r0, r1, #3
 8111704:	db02      	blt.n	811170c <_printf_float+0x128>
 8111706:	6863      	ldr	r3, [r4, #4]
 8111708:	4299      	cmp	r1, r3
 811170a:	dd41      	ble.n	8111790 <_printf_float+0x1ac>
 811170c:	f1aa 0a02 	sub.w	sl, sl, #2
 8111710:	fa5f fa8a 	uxtb.w	sl, sl
 8111714:	3901      	subs	r1, #1
 8111716:	4652      	mov	r2, sl
 8111718:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 811171c:	9109      	str	r1, [sp, #36]	@ 0x24
 811171e:	f7ff ff26 	bl	811156e <__exponent>
 8111722:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8111724:	1813      	adds	r3, r2, r0
 8111726:	2a01      	cmp	r2, #1
 8111728:	4681      	mov	r9, r0
 811172a:	6123      	str	r3, [r4, #16]
 811172c:	dc02      	bgt.n	8111734 <_printf_float+0x150>
 811172e:	6822      	ldr	r2, [r4, #0]
 8111730:	07d2      	lsls	r2, r2, #31
 8111732:	d501      	bpl.n	8111738 <_printf_float+0x154>
 8111734:	3301      	adds	r3, #1
 8111736:	6123      	str	r3, [r4, #16]
 8111738:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 811173c:	2b00      	cmp	r3, #0
 811173e:	d0a2      	beq.n	8111686 <_printf_float+0xa2>
 8111740:	232d      	movs	r3, #45	@ 0x2d
 8111742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111746:	e79e      	b.n	8111686 <_printf_float+0xa2>
 8111748:	9a06      	ldr	r2, [sp, #24]
 811174a:	2a47      	cmp	r2, #71	@ 0x47
 811174c:	d1c2      	bne.n	81116d4 <_printf_float+0xf0>
 811174e:	2b00      	cmp	r3, #0
 8111750:	d1c0      	bne.n	81116d4 <_printf_float+0xf0>
 8111752:	2301      	movs	r3, #1
 8111754:	e7bd      	b.n	81116d2 <_printf_float+0xee>
 8111756:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 811175a:	d9db      	bls.n	8111714 <_printf_float+0x130>
 811175c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8111760:	d118      	bne.n	8111794 <_printf_float+0x1b0>
 8111762:	2900      	cmp	r1, #0
 8111764:	6863      	ldr	r3, [r4, #4]
 8111766:	dd0b      	ble.n	8111780 <_printf_float+0x19c>
 8111768:	6121      	str	r1, [r4, #16]
 811176a:	b913      	cbnz	r3, 8111772 <_printf_float+0x18e>
 811176c:	6822      	ldr	r2, [r4, #0]
 811176e:	07d0      	lsls	r0, r2, #31
 8111770:	d502      	bpl.n	8111778 <_printf_float+0x194>
 8111772:	3301      	adds	r3, #1
 8111774:	440b      	add	r3, r1
 8111776:	6123      	str	r3, [r4, #16]
 8111778:	65a1      	str	r1, [r4, #88]	@ 0x58
 811177a:	f04f 0900 	mov.w	r9, #0
 811177e:	e7db      	b.n	8111738 <_printf_float+0x154>
 8111780:	b913      	cbnz	r3, 8111788 <_printf_float+0x1a4>
 8111782:	6822      	ldr	r2, [r4, #0]
 8111784:	07d2      	lsls	r2, r2, #31
 8111786:	d501      	bpl.n	811178c <_printf_float+0x1a8>
 8111788:	3302      	adds	r3, #2
 811178a:	e7f4      	b.n	8111776 <_printf_float+0x192>
 811178c:	2301      	movs	r3, #1
 811178e:	e7f2      	b.n	8111776 <_printf_float+0x192>
 8111790:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8111794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8111796:	4299      	cmp	r1, r3
 8111798:	db05      	blt.n	81117a6 <_printf_float+0x1c2>
 811179a:	6823      	ldr	r3, [r4, #0]
 811179c:	6121      	str	r1, [r4, #16]
 811179e:	07d8      	lsls	r0, r3, #31
 81117a0:	d5ea      	bpl.n	8111778 <_printf_float+0x194>
 81117a2:	1c4b      	adds	r3, r1, #1
 81117a4:	e7e7      	b.n	8111776 <_printf_float+0x192>
 81117a6:	2900      	cmp	r1, #0
 81117a8:	bfd4      	ite	le
 81117aa:	f1c1 0202 	rsble	r2, r1, #2
 81117ae:	2201      	movgt	r2, #1
 81117b0:	4413      	add	r3, r2
 81117b2:	e7e0      	b.n	8111776 <_printf_float+0x192>
 81117b4:	6823      	ldr	r3, [r4, #0]
 81117b6:	055a      	lsls	r2, r3, #21
 81117b8:	d407      	bmi.n	81117ca <_printf_float+0x1e6>
 81117ba:	6923      	ldr	r3, [r4, #16]
 81117bc:	4642      	mov	r2, r8
 81117be:	4631      	mov	r1, r6
 81117c0:	4628      	mov	r0, r5
 81117c2:	47b8      	blx	r7
 81117c4:	3001      	adds	r0, #1
 81117c6:	d12b      	bne.n	8111820 <_printf_float+0x23c>
 81117c8:	e767      	b.n	811169a <_printf_float+0xb6>
 81117ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81117ce:	f240 80dd 	bls.w	811198c <_printf_float+0x3a8>
 81117d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81117d6:	2200      	movs	r2, #0
 81117d8:	2300      	movs	r3, #0
 81117da:	f7ef f9fd 	bl	8100bd8 <__aeabi_dcmpeq>
 81117de:	2800      	cmp	r0, #0
 81117e0:	d033      	beq.n	811184a <_printf_float+0x266>
 81117e2:	4a37      	ldr	r2, [pc, #220]	@ (81118c0 <_printf_float+0x2dc>)
 81117e4:	2301      	movs	r3, #1
 81117e6:	4631      	mov	r1, r6
 81117e8:	4628      	mov	r0, r5
 81117ea:	47b8      	blx	r7
 81117ec:	3001      	adds	r0, #1
 81117ee:	f43f af54 	beq.w	811169a <_printf_float+0xb6>
 81117f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 81117f6:	4543      	cmp	r3, r8
 81117f8:	db02      	blt.n	8111800 <_printf_float+0x21c>
 81117fa:	6823      	ldr	r3, [r4, #0]
 81117fc:	07d8      	lsls	r0, r3, #31
 81117fe:	d50f      	bpl.n	8111820 <_printf_float+0x23c>
 8111800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8111804:	4631      	mov	r1, r6
 8111806:	4628      	mov	r0, r5
 8111808:	47b8      	blx	r7
 811180a:	3001      	adds	r0, #1
 811180c:	f43f af45 	beq.w	811169a <_printf_float+0xb6>
 8111810:	f04f 0900 	mov.w	r9, #0
 8111814:	f108 38ff 	add.w	r8, r8, #4294967295
 8111818:	f104 0a1a 	add.w	sl, r4, #26
 811181c:	45c8      	cmp	r8, r9
 811181e:	dc09      	bgt.n	8111834 <_printf_float+0x250>
 8111820:	6823      	ldr	r3, [r4, #0]
 8111822:	079b      	lsls	r3, r3, #30
 8111824:	f100 8103 	bmi.w	8111a2e <_printf_float+0x44a>
 8111828:	68e0      	ldr	r0, [r4, #12]
 811182a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 811182c:	4298      	cmp	r0, r3
 811182e:	bfb8      	it	lt
 8111830:	4618      	movlt	r0, r3
 8111832:	e734      	b.n	811169e <_printf_float+0xba>
 8111834:	2301      	movs	r3, #1
 8111836:	4652      	mov	r2, sl
 8111838:	4631      	mov	r1, r6
 811183a:	4628      	mov	r0, r5
 811183c:	47b8      	blx	r7
 811183e:	3001      	adds	r0, #1
 8111840:	f43f af2b 	beq.w	811169a <_printf_float+0xb6>
 8111844:	f109 0901 	add.w	r9, r9, #1
 8111848:	e7e8      	b.n	811181c <_printf_float+0x238>
 811184a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811184c:	2b00      	cmp	r3, #0
 811184e:	dc39      	bgt.n	81118c4 <_printf_float+0x2e0>
 8111850:	4a1b      	ldr	r2, [pc, #108]	@ (81118c0 <_printf_float+0x2dc>)
 8111852:	2301      	movs	r3, #1
 8111854:	4631      	mov	r1, r6
 8111856:	4628      	mov	r0, r5
 8111858:	47b8      	blx	r7
 811185a:	3001      	adds	r0, #1
 811185c:	f43f af1d 	beq.w	811169a <_printf_float+0xb6>
 8111860:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8111864:	ea59 0303 	orrs.w	r3, r9, r3
 8111868:	d102      	bne.n	8111870 <_printf_float+0x28c>
 811186a:	6823      	ldr	r3, [r4, #0]
 811186c:	07d9      	lsls	r1, r3, #31
 811186e:	d5d7      	bpl.n	8111820 <_printf_float+0x23c>
 8111870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8111874:	4631      	mov	r1, r6
 8111876:	4628      	mov	r0, r5
 8111878:	47b8      	blx	r7
 811187a:	3001      	adds	r0, #1
 811187c:	f43f af0d 	beq.w	811169a <_printf_float+0xb6>
 8111880:	f04f 0a00 	mov.w	sl, #0
 8111884:	f104 0b1a 	add.w	fp, r4, #26
 8111888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811188a:	425b      	negs	r3, r3
 811188c:	4553      	cmp	r3, sl
 811188e:	dc01      	bgt.n	8111894 <_printf_float+0x2b0>
 8111890:	464b      	mov	r3, r9
 8111892:	e793      	b.n	81117bc <_printf_float+0x1d8>
 8111894:	2301      	movs	r3, #1
 8111896:	465a      	mov	r2, fp
 8111898:	4631      	mov	r1, r6
 811189a:	4628      	mov	r0, r5
 811189c:	47b8      	blx	r7
 811189e:	3001      	adds	r0, #1
 81118a0:	f43f aefb 	beq.w	811169a <_printf_float+0xb6>
 81118a4:	f10a 0a01 	add.w	sl, sl, #1
 81118a8:	e7ee      	b.n	8111888 <_printf_float+0x2a4>
 81118aa:	bf00      	nop
 81118ac:	7fefffff 	.word	0x7fefffff
 81118b0:	08115d0f 	.word	0x08115d0f
 81118b4:	08115d13 	.word	0x08115d13
 81118b8:	08115d17 	.word	0x08115d17
 81118bc:	08115d1b 	.word	0x08115d1b
 81118c0:	08115d1f 	.word	0x08115d1f
 81118c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81118c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81118ca:	4553      	cmp	r3, sl
 81118cc:	bfa8      	it	ge
 81118ce:	4653      	movge	r3, sl
 81118d0:	2b00      	cmp	r3, #0
 81118d2:	4699      	mov	r9, r3
 81118d4:	dc36      	bgt.n	8111944 <_printf_float+0x360>
 81118d6:	f04f 0b00 	mov.w	fp, #0
 81118da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81118de:	f104 021a 	add.w	r2, r4, #26
 81118e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81118e4:	9306      	str	r3, [sp, #24]
 81118e6:	eba3 0309 	sub.w	r3, r3, r9
 81118ea:	455b      	cmp	r3, fp
 81118ec:	dc31      	bgt.n	8111952 <_printf_float+0x36e>
 81118ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81118f0:	459a      	cmp	sl, r3
 81118f2:	dc3a      	bgt.n	811196a <_printf_float+0x386>
 81118f4:	6823      	ldr	r3, [r4, #0]
 81118f6:	07da      	lsls	r2, r3, #31
 81118f8:	d437      	bmi.n	811196a <_printf_float+0x386>
 81118fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81118fc:	ebaa 0903 	sub.w	r9, sl, r3
 8111900:	9b06      	ldr	r3, [sp, #24]
 8111902:	ebaa 0303 	sub.w	r3, sl, r3
 8111906:	4599      	cmp	r9, r3
 8111908:	bfa8      	it	ge
 811190a:	4699      	movge	r9, r3
 811190c:	f1b9 0f00 	cmp.w	r9, #0
 8111910:	dc33      	bgt.n	811197a <_printf_float+0x396>
 8111912:	f04f 0800 	mov.w	r8, #0
 8111916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 811191a:	f104 0b1a 	add.w	fp, r4, #26
 811191e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111920:	ebaa 0303 	sub.w	r3, sl, r3
 8111924:	eba3 0309 	sub.w	r3, r3, r9
 8111928:	4543      	cmp	r3, r8
 811192a:	f77f af79 	ble.w	8111820 <_printf_float+0x23c>
 811192e:	2301      	movs	r3, #1
 8111930:	465a      	mov	r2, fp
 8111932:	4631      	mov	r1, r6
 8111934:	4628      	mov	r0, r5
 8111936:	47b8      	blx	r7
 8111938:	3001      	adds	r0, #1
 811193a:	f43f aeae 	beq.w	811169a <_printf_float+0xb6>
 811193e:	f108 0801 	add.w	r8, r8, #1
 8111942:	e7ec      	b.n	811191e <_printf_float+0x33a>
 8111944:	4642      	mov	r2, r8
 8111946:	4631      	mov	r1, r6
 8111948:	4628      	mov	r0, r5
 811194a:	47b8      	blx	r7
 811194c:	3001      	adds	r0, #1
 811194e:	d1c2      	bne.n	81118d6 <_printf_float+0x2f2>
 8111950:	e6a3      	b.n	811169a <_printf_float+0xb6>
 8111952:	2301      	movs	r3, #1
 8111954:	4631      	mov	r1, r6
 8111956:	4628      	mov	r0, r5
 8111958:	9206      	str	r2, [sp, #24]
 811195a:	47b8      	blx	r7
 811195c:	3001      	adds	r0, #1
 811195e:	f43f ae9c 	beq.w	811169a <_printf_float+0xb6>
 8111962:	9a06      	ldr	r2, [sp, #24]
 8111964:	f10b 0b01 	add.w	fp, fp, #1
 8111968:	e7bb      	b.n	81118e2 <_printf_float+0x2fe>
 811196a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 811196e:	4631      	mov	r1, r6
 8111970:	4628      	mov	r0, r5
 8111972:	47b8      	blx	r7
 8111974:	3001      	adds	r0, #1
 8111976:	d1c0      	bne.n	81118fa <_printf_float+0x316>
 8111978:	e68f      	b.n	811169a <_printf_float+0xb6>
 811197a:	9a06      	ldr	r2, [sp, #24]
 811197c:	464b      	mov	r3, r9
 811197e:	4442      	add	r2, r8
 8111980:	4631      	mov	r1, r6
 8111982:	4628      	mov	r0, r5
 8111984:	47b8      	blx	r7
 8111986:	3001      	adds	r0, #1
 8111988:	d1c3      	bne.n	8111912 <_printf_float+0x32e>
 811198a:	e686      	b.n	811169a <_printf_float+0xb6>
 811198c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8111990:	f1ba 0f01 	cmp.w	sl, #1
 8111994:	dc01      	bgt.n	811199a <_printf_float+0x3b6>
 8111996:	07db      	lsls	r3, r3, #31
 8111998:	d536      	bpl.n	8111a08 <_printf_float+0x424>
 811199a:	2301      	movs	r3, #1
 811199c:	4642      	mov	r2, r8
 811199e:	4631      	mov	r1, r6
 81119a0:	4628      	mov	r0, r5
 81119a2:	47b8      	blx	r7
 81119a4:	3001      	adds	r0, #1
 81119a6:	f43f ae78 	beq.w	811169a <_printf_float+0xb6>
 81119aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81119ae:	4631      	mov	r1, r6
 81119b0:	4628      	mov	r0, r5
 81119b2:	47b8      	blx	r7
 81119b4:	3001      	adds	r0, #1
 81119b6:	f43f ae70 	beq.w	811169a <_printf_float+0xb6>
 81119ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81119be:	2200      	movs	r2, #0
 81119c0:	2300      	movs	r3, #0
 81119c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81119c6:	f7ef f907 	bl	8100bd8 <__aeabi_dcmpeq>
 81119ca:	b9c0      	cbnz	r0, 81119fe <_printf_float+0x41a>
 81119cc:	4653      	mov	r3, sl
 81119ce:	f108 0201 	add.w	r2, r8, #1
 81119d2:	4631      	mov	r1, r6
 81119d4:	4628      	mov	r0, r5
 81119d6:	47b8      	blx	r7
 81119d8:	3001      	adds	r0, #1
 81119da:	d10c      	bne.n	81119f6 <_printf_float+0x412>
 81119dc:	e65d      	b.n	811169a <_printf_float+0xb6>
 81119de:	2301      	movs	r3, #1
 81119e0:	465a      	mov	r2, fp
 81119e2:	4631      	mov	r1, r6
 81119e4:	4628      	mov	r0, r5
 81119e6:	47b8      	blx	r7
 81119e8:	3001      	adds	r0, #1
 81119ea:	f43f ae56 	beq.w	811169a <_printf_float+0xb6>
 81119ee:	f108 0801 	add.w	r8, r8, #1
 81119f2:	45d0      	cmp	r8, sl
 81119f4:	dbf3      	blt.n	81119de <_printf_float+0x3fa>
 81119f6:	464b      	mov	r3, r9
 81119f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 81119fc:	e6df      	b.n	81117be <_printf_float+0x1da>
 81119fe:	f04f 0800 	mov.w	r8, #0
 8111a02:	f104 0b1a 	add.w	fp, r4, #26
 8111a06:	e7f4      	b.n	81119f2 <_printf_float+0x40e>
 8111a08:	2301      	movs	r3, #1
 8111a0a:	4642      	mov	r2, r8
 8111a0c:	e7e1      	b.n	81119d2 <_printf_float+0x3ee>
 8111a0e:	2301      	movs	r3, #1
 8111a10:	464a      	mov	r2, r9
 8111a12:	4631      	mov	r1, r6
 8111a14:	4628      	mov	r0, r5
 8111a16:	47b8      	blx	r7
 8111a18:	3001      	adds	r0, #1
 8111a1a:	f43f ae3e 	beq.w	811169a <_printf_float+0xb6>
 8111a1e:	f108 0801 	add.w	r8, r8, #1
 8111a22:	68e3      	ldr	r3, [r4, #12]
 8111a24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8111a26:	1a5b      	subs	r3, r3, r1
 8111a28:	4543      	cmp	r3, r8
 8111a2a:	dcf0      	bgt.n	8111a0e <_printf_float+0x42a>
 8111a2c:	e6fc      	b.n	8111828 <_printf_float+0x244>
 8111a2e:	f04f 0800 	mov.w	r8, #0
 8111a32:	f104 0919 	add.w	r9, r4, #25
 8111a36:	e7f4      	b.n	8111a22 <_printf_float+0x43e>

08111a38 <_printf_common>:
 8111a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111a3c:	4616      	mov	r6, r2
 8111a3e:	4698      	mov	r8, r3
 8111a40:	688a      	ldr	r2, [r1, #8]
 8111a42:	690b      	ldr	r3, [r1, #16]
 8111a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8111a48:	4293      	cmp	r3, r2
 8111a4a:	bfb8      	it	lt
 8111a4c:	4613      	movlt	r3, r2
 8111a4e:	6033      	str	r3, [r6, #0]
 8111a50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8111a54:	4607      	mov	r7, r0
 8111a56:	460c      	mov	r4, r1
 8111a58:	b10a      	cbz	r2, 8111a5e <_printf_common+0x26>
 8111a5a:	3301      	adds	r3, #1
 8111a5c:	6033      	str	r3, [r6, #0]
 8111a5e:	6823      	ldr	r3, [r4, #0]
 8111a60:	0699      	lsls	r1, r3, #26
 8111a62:	bf42      	ittt	mi
 8111a64:	6833      	ldrmi	r3, [r6, #0]
 8111a66:	3302      	addmi	r3, #2
 8111a68:	6033      	strmi	r3, [r6, #0]
 8111a6a:	6825      	ldr	r5, [r4, #0]
 8111a6c:	f015 0506 	ands.w	r5, r5, #6
 8111a70:	d106      	bne.n	8111a80 <_printf_common+0x48>
 8111a72:	f104 0a19 	add.w	sl, r4, #25
 8111a76:	68e3      	ldr	r3, [r4, #12]
 8111a78:	6832      	ldr	r2, [r6, #0]
 8111a7a:	1a9b      	subs	r3, r3, r2
 8111a7c:	42ab      	cmp	r3, r5
 8111a7e:	dc26      	bgt.n	8111ace <_printf_common+0x96>
 8111a80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8111a84:	6822      	ldr	r2, [r4, #0]
 8111a86:	3b00      	subs	r3, #0
 8111a88:	bf18      	it	ne
 8111a8a:	2301      	movne	r3, #1
 8111a8c:	0692      	lsls	r2, r2, #26
 8111a8e:	d42b      	bmi.n	8111ae8 <_printf_common+0xb0>
 8111a90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8111a94:	4641      	mov	r1, r8
 8111a96:	4638      	mov	r0, r7
 8111a98:	47c8      	blx	r9
 8111a9a:	3001      	adds	r0, #1
 8111a9c:	d01e      	beq.n	8111adc <_printf_common+0xa4>
 8111a9e:	6823      	ldr	r3, [r4, #0]
 8111aa0:	6922      	ldr	r2, [r4, #16]
 8111aa2:	f003 0306 	and.w	r3, r3, #6
 8111aa6:	2b04      	cmp	r3, #4
 8111aa8:	bf02      	ittt	eq
 8111aaa:	68e5      	ldreq	r5, [r4, #12]
 8111aac:	6833      	ldreq	r3, [r6, #0]
 8111aae:	1aed      	subeq	r5, r5, r3
 8111ab0:	68a3      	ldr	r3, [r4, #8]
 8111ab2:	bf0c      	ite	eq
 8111ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8111ab8:	2500      	movne	r5, #0
 8111aba:	4293      	cmp	r3, r2
 8111abc:	bfc4      	itt	gt
 8111abe:	1a9b      	subgt	r3, r3, r2
 8111ac0:	18ed      	addgt	r5, r5, r3
 8111ac2:	2600      	movs	r6, #0
 8111ac4:	341a      	adds	r4, #26
 8111ac6:	42b5      	cmp	r5, r6
 8111ac8:	d11a      	bne.n	8111b00 <_printf_common+0xc8>
 8111aca:	2000      	movs	r0, #0
 8111acc:	e008      	b.n	8111ae0 <_printf_common+0xa8>
 8111ace:	2301      	movs	r3, #1
 8111ad0:	4652      	mov	r2, sl
 8111ad2:	4641      	mov	r1, r8
 8111ad4:	4638      	mov	r0, r7
 8111ad6:	47c8      	blx	r9
 8111ad8:	3001      	adds	r0, #1
 8111ada:	d103      	bne.n	8111ae4 <_printf_common+0xac>
 8111adc:	f04f 30ff 	mov.w	r0, #4294967295
 8111ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111ae4:	3501      	adds	r5, #1
 8111ae6:	e7c6      	b.n	8111a76 <_printf_common+0x3e>
 8111ae8:	18e1      	adds	r1, r4, r3
 8111aea:	1c5a      	adds	r2, r3, #1
 8111aec:	2030      	movs	r0, #48	@ 0x30
 8111aee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8111af2:	4422      	add	r2, r4
 8111af4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8111af8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8111afc:	3302      	adds	r3, #2
 8111afe:	e7c7      	b.n	8111a90 <_printf_common+0x58>
 8111b00:	2301      	movs	r3, #1
 8111b02:	4622      	mov	r2, r4
 8111b04:	4641      	mov	r1, r8
 8111b06:	4638      	mov	r0, r7
 8111b08:	47c8      	blx	r9
 8111b0a:	3001      	adds	r0, #1
 8111b0c:	d0e6      	beq.n	8111adc <_printf_common+0xa4>
 8111b0e:	3601      	adds	r6, #1
 8111b10:	e7d9      	b.n	8111ac6 <_printf_common+0x8e>
	...

08111b14 <_printf_i>:
 8111b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8111b18:	7e0f      	ldrb	r7, [r1, #24]
 8111b1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8111b1c:	2f78      	cmp	r7, #120	@ 0x78
 8111b1e:	4691      	mov	r9, r2
 8111b20:	4680      	mov	r8, r0
 8111b22:	460c      	mov	r4, r1
 8111b24:	469a      	mov	sl, r3
 8111b26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8111b2a:	d807      	bhi.n	8111b3c <_printf_i+0x28>
 8111b2c:	2f62      	cmp	r7, #98	@ 0x62
 8111b2e:	d80a      	bhi.n	8111b46 <_printf_i+0x32>
 8111b30:	2f00      	cmp	r7, #0
 8111b32:	f000 80d2 	beq.w	8111cda <_printf_i+0x1c6>
 8111b36:	2f58      	cmp	r7, #88	@ 0x58
 8111b38:	f000 80b9 	beq.w	8111cae <_printf_i+0x19a>
 8111b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8111b40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8111b44:	e03a      	b.n	8111bbc <_printf_i+0xa8>
 8111b46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8111b4a:	2b15      	cmp	r3, #21
 8111b4c:	d8f6      	bhi.n	8111b3c <_printf_i+0x28>
 8111b4e:	a101      	add	r1, pc, #4	@ (adr r1, 8111b54 <_printf_i+0x40>)
 8111b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8111b54:	08111bad 	.word	0x08111bad
 8111b58:	08111bc1 	.word	0x08111bc1
 8111b5c:	08111b3d 	.word	0x08111b3d
 8111b60:	08111b3d 	.word	0x08111b3d
 8111b64:	08111b3d 	.word	0x08111b3d
 8111b68:	08111b3d 	.word	0x08111b3d
 8111b6c:	08111bc1 	.word	0x08111bc1
 8111b70:	08111b3d 	.word	0x08111b3d
 8111b74:	08111b3d 	.word	0x08111b3d
 8111b78:	08111b3d 	.word	0x08111b3d
 8111b7c:	08111b3d 	.word	0x08111b3d
 8111b80:	08111cc1 	.word	0x08111cc1
 8111b84:	08111beb 	.word	0x08111beb
 8111b88:	08111c7b 	.word	0x08111c7b
 8111b8c:	08111b3d 	.word	0x08111b3d
 8111b90:	08111b3d 	.word	0x08111b3d
 8111b94:	08111ce3 	.word	0x08111ce3
 8111b98:	08111b3d 	.word	0x08111b3d
 8111b9c:	08111beb 	.word	0x08111beb
 8111ba0:	08111b3d 	.word	0x08111b3d
 8111ba4:	08111b3d 	.word	0x08111b3d
 8111ba8:	08111c83 	.word	0x08111c83
 8111bac:	6833      	ldr	r3, [r6, #0]
 8111bae:	1d1a      	adds	r2, r3, #4
 8111bb0:	681b      	ldr	r3, [r3, #0]
 8111bb2:	6032      	str	r2, [r6, #0]
 8111bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8111bb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8111bbc:	2301      	movs	r3, #1
 8111bbe:	e09d      	b.n	8111cfc <_printf_i+0x1e8>
 8111bc0:	6833      	ldr	r3, [r6, #0]
 8111bc2:	6820      	ldr	r0, [r4, #0]
 8111bc4:	1d19      	adds	r1, r3, #4
 8111bc6:	6031      	str	r1, [r6, #0]
 8111bc8:	0606      	lsls	r6, r0, #24
 8111bca:	d501      	bpl.n	8111bd0 <_printf_i+0xbc>
 8111bcc:	681d      	ldr	r5, [r3, #0]
 8111bce:	e003      	b.n	8111bd8 <_printf_i+0xc4>
 8111bd0:	0645      	lsls	r5, r0, #25
 8111bd2:	d5fb      	bpl.n	8111bcc <_printf_i+0xb8>
 8111bd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8111bd8:	2d00      	cmp	r5, #0
 8111bda:	da03      	bge.n	8111be4 <_printf_i+0xd0>
 8111bdc:	232d      	movs	r3, #45	@ 0x2d
 8111bde:	426d      	negs	r5, r5
 8111be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111be4:	4859      	ldr	r0, [pc, #356]	@ (8111d4c <_printf_i+0x238>)
 8111be6:	230a      	movs	r3, #10
 8111be8:	e011      	b.n	8111c0e <_printf_i+0xfa>
 8111bea:	6821      	ldr	r1, [r4, #0]
 8111bec:	6833      	ldr	r3, [r6, #0]
 8111bee:	0608      	lsls	r0, r1, #24
 8111bf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8111bf4:	d402      	bmi.n	8111bfc <_printf_i+0xe8>
 8111bf6:	0649      	lsls	r1, r1, #25
 8111bf8:	bf48      	it	mi
 8111bfa:	b2ad      	uxthmi	r5, r5
 8111bfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8111bfe:	4853      	ldr	r0, [pc, #332]	@ (8111d4c <_printf_i+0x238>)
 8111c00:	6033      	str	r3, [r6, #0]
 8111c02:	bf14      	ite	ne
 8111c04:	230a      	movne	r3, #10
 8111c06:	2308      	moveq	r3, #8
 8111c08:	2100      	movs	r1, #0
 8111c0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8111c0e:	6866      	ldr	r6, [r4, #4]
 8111c10:	60a6      	str	r6, [r4, #8]
 8111c12:	2e00      	cmp	r6, #0
 8111c14:	bfa2      	ittt	ge
 8111c16:	6821      	ldrge	r1, [r4, #0]
 8111c18:	f021 0104 	bicge.w	r1, r1, #4
 8111c1c:	6021      	strge	r1, [r4, #0]
 8111c1e:	b90d      	cbnz	r5, 8111c24 <_printf_i+0x110>
 8111c20:	2e00      	cmp	r6, #0
 8111c22:	d04b      	beq.n	8111cbc <_printf_i+0x1a8>
 8111c24:	4616      	mov	r6, r2
 8111c26:	fbb5 f1f3 	udiv	r1, r5, r3
 8111c2a:	fb03 5711 	mls	r7, r3, r1, r5
 8111c2e:	5dc7      	ldrb	r7, [r0, r7]
 8111c30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8111c34:	462f      	mov	r7, r5
 8111c36:	42bb      	cmp	r3, r7
 8111c38:	460d      	mov	r5, r1
 8111c3a:	d9f4      	bls.n	8111c26 <_printf_i+0x112>
 8111c3c:	2b08      	cmp	r3, #8
 8111c3e:	d10b      	bne.n	8111c58 <_printf_i+0x144>
 8111c40:	6823      	ldr	r3, [r4, #0]
 8111c42:	07df      	lsls	r7, r3, #31
 8111c44:	d508      	bpl.n	8111c58 <_printf_i+0x144>
 8111c46:	6923      	ldr	r3, [r4, #16]
 8111c48:	6861      	ldr	r1, [r4, #4]
 8111c4a:	4299      	cmp	r1, r3
 8111c4c:	bfde      	ittt	le
 8111c4e:	2330      	movle	r3, #48	@ 0x30
 8111c50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8111c54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8111c58:	1b92      	subs	r2, r2, r6
 8111c5a:	6122      	str	r2, [r4, #16]
 8111c5c:	f8cd a000 	str.w	sl, [sp]
 8111c60:	464b      	mov	r3, r9
 8111c62:	aa03      	add	r2, sp, #12
 8111c64:	4621      	mov	r1, r4
 8111c66:	4640      	mov	r0, r8
 8111c68:	f7ff fee6 	bl	8111a38 <_printf_common>
 8111c6c:	3001      	adds	r0, #1
 8111c6e:	d14a      	bne.n	8111d06 <_printf_i+0x1f2>
 8111c70:	f04f 30ff 	mov.w	r0, #4294967295
 8111c74:	b004      	add	sp, #16
 8111c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111c7a:	6823      	ldr	r3, [r4, #0]
 8111c7c:	f043 0320 	orr.w	r3, r3, #32
 8111c80:	6023      	str	r3, [r4, #0]
 8111c82:	4833      	ldr	r0, [pc, #204]	@ (8111d50 <_printf_i+0x23c>)
 8111c84:	2778      	movs	r7, #120	@ 0x78
 8111c86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8111c8a:	6823      	ldr	r3, [r4, #0]
 8111c8c:	6831      	ldr	r1, [r6, #0]
 8111c8e:	061f      	lsls	r7, r3, #24
 8111c90:	f851 5b04 	ldr.w	r5, [r1], #4
 8111c94:	d402      	bmi.n	8111c9c <_printf_i+0x188>
 8111c96:	065f      	lsls	r7, r3, #25
 8111c98:	bf48      	it	mi
 8111c9a:	b2ad      	uxthmi	r5, r5
 8111c9c:	6031      	str	r1, [r6, #0]
 8111c9e:	07d9      	lsls	r1, r3, #31
 8111ca0:	bf44      	itt	mi
 8111ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8111ca6:	6023      	strmi	r3, [r4, #0]
 8111ca8:	b11d      	cbz	r5, 8111cb2 <_printf_i+0x19e>
 8111caa:	2310      	movs	r3, #16
 8111cac:	e7ac      	b.n	8111c08 <_printf_i+0xf4>
 8111cae:	4827      	ldr	r0, [pc, #156]	@ (8111d4c <_printf_i+0x238>)
 8111cb0:	e7e9      	b.n	8111c86 <_printf_i+0x172>
 8111cb2:	6823      	ldr	r3, [r4, #0]
 8111cb4:	f023 0320 	bic.w	r3, r3, #32
 8111cb8:	6023      	str	r3, [r4, #0]
 8111cba:	e7f6      	b.n	8111caa <_printf_i+0x196>
 8111cbc:	4616      	mov	r6, r2
 8111cbe:	e7bd      	b.n	8111c3c <_printf_i+0x128>
 8111cc0:	6833      	ldr	r3, [r6, #0]
 8111cc2:	6825      	ldr	r5, [r4, #0]
 8111cc4:	6961      	ldr	r1, [r4, #20]
 8111cc6:	1d18      	adds	r0, r3, #4
 8111cc8:	6030      	str	r0, [r6, #0]
 8111cca:	062e      	lsls	r6, r5, #24
 8111ccc:	681b      	ldr	r3, [r3, #0]
 8111cce:	d501      	bpl.n	8111cd4 <_printf_i+0x1c0>
 8111cd0:	6019      	str	r1, [r3, #0]
 8111cd2:	e002      	b.n	8111cda <_printf_i+0x1c6>
 8111cd4:	0668      	lsls	r0, r5, #25
 8111cd6:	d5fb      	bpl.n	8111cd0 <_printf_i+0x1bc>
 8111cd8:	8019      	strh	r1, [r3, #0]
 8111cda:	2300      	movs	r3, #0
 8111cdc:	6123      	str	r3, [r4, #16]
 8111cde:	4616      	mov	r6, r2
 8111ce0:	e7bc      	b.n	8111c5c <_printf_i+0x148>
 8111ce2:	6833      	ldr	r3, [r6, #0]
 8111ce4:	1d1a      	adds	r2, r3, #4
 8111ce6:	6032      	str	r2, [r6, #0]
 8111ce8:	681e      	ldr	r6, [r3, #0]
 8111cea:	6862      	ldr	r2, [r4, #4]
 8111cec:	2100      	movs	r1, #0
 8111cee:	4630      	mov	r0, r6
 8111cf0:	f7ee faf6 	bl	81002e0 <memchr>
 8111cf4:	b108      	cbz	r0, 8111cfa <_printf_i+0x1e6>
 8111cf6:	1b80      	subs	r0, r0, r6
 8111cf8:	6060      	str	r0, [r4, #4]
 8111cfa:	6863      	ldr	r3, [r4, #4]
 8111cfc:	6123      	str	r3, [r4, #16]
 8111cfe:	2300      	movs	r3, #0
 8111d00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8111d04:	e7aa      	b.n	8111c5c <_printf_i+0x148>
 8111d06:	6923      	ldr	r3, [r4, #16]
 8111d08:	4632      	mov	r2, r6
 8111d0a:	4649      	mov	r1, r9
 8111d0c:	4640      	mov	r0, r8
 8111d0e:	47d0      	blx	sl
 8111d10:	3001      	adds	r0, #1
 8111d12:	d0ad      	beq.n	8111c70 <_printf_i+0x15c>
 8111d14:	6823      	ldr	r3, [r4, #0]
 8111d16:	079b      	lsls	r3, r3, #30
 8111d18:	d413      	bmi.n	8111d42 <_printf_i+0x22e>
 8111d1a:	68e0      	ldr	r0, [r4, #12]
 8111d1c:	9b03      	ldr	r3, [sp, #12]
 8111d1e:	4298      	cmp	r0, r3
 8111d20:	bfb8      	it	lt
 8111d22:	4618      	movlt	r0, r3
 8111d24:	e7a6      	b.n	8111c74 <_printf_i+0x160>
 8111d26:	2301      	movs	r3, #1
 8111d28:	4632      	mov	r2, r6
 8111d2a:	4649      	mov	r1, r9
 8111d2c:	4640      	mov	r0, r8
 8111d2e:	47d0      	blx	sl
 8111d30:	3001      	adds	r0, #1
 8111d32:	d09d      	beq.n	8111c70 <_printf_i+0x15c>
 8111d34:	3501      	adds	r5, #1
 8111d36:	68e3      	ldr	r3, [r4, #12]
 8111d38:	9903      	ldr	r1, [sp, #12]
 8111d3a:	1a5b      	subs	r3, r3, r1
 8111d3c:	42ab      	cmp	r3, r5
 8111d3e:	dcf2      	bgt.n	8111d26 <_printf_i+0x212>
 8111d40:	e7eb      	b.n	8111d1a <_printf_i+0x206>
 8111d42:	2500      	movs	r5, #0
 8111d44:	f104 0619 	add.w	r6, r4, #25
 8111d48:	e7f5      	b.n	8111d36 <_printf_i+0x222>
 8111d4a:	bf00      	nop
 8111d4c:	08115d21 	.word	0x08115d21
 8111d50:	08115d32 	.word	0x08115d32

08111d54 <_scanf_float>:
 8111d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111d58:	b087      	sub	sp, #28
 8111d5a:	4617      	mov	r7, r2
 8111d5c:	9303      	str	r3, [sp, #12]
 8111d5e:	688b      	ldr	r3, [r1, #8]
 8111d60:	1e5a      	subs	r2, r3, #1
 8111d62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8111d66:	bf81      	itttt	hi
 8111d68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8111d6c:	eb03 0b05 	addhi.w	fp, r3, r5
 8111d70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8111d74:	608b      	strhi	r3, [r1, #8]
 8111d76:	680b      	ldr	r3, [r1, #0]
 8111d78:	460a      	mov	r2, r1
 8111d7a:	f04f 0500 	mov.w	r5, #0
 8111d7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8111d82:	f842 3b1c 	str.w	r3, [r2], #28
 8111d86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8111d8a:	4680      	mov	r8, r0
 8111d8c:	460c      	mov	r4, r1
 8111d8e:	bf98      	it	ls
 8111d90:	f04f 0b00 	movls.w	fp, #0
 8111d94:	9201      	str	r2, [sp, #4]
 8111d96:	4616      	mov	r6, r2
 8111d98:	46aa      	mov	sl, r5
 8111d9a:	46a9      	mov	r9, r5
 8111d9c:	9502      	str	r5, [sp, #8]
 8111d9e:	68a2      	ldr	r2, [r4, #8]
 8111da0:	b152      	cbz	r2, 8111db8 <_scanf_float+0x64>
 8111da2:	683b      	ldr	r3, [r7, #0]
 8111da4:	781b      	ldrb	r3, [r3, #0]
 8111da6:	2b4e      	cmp	r3, #78	@ 0x4e
 8111da8:	d864      	bhi.n	8111e74 <_scanf_float+0x120>
 8111daa:	2b40      	cmp	r3, #64	@ 0x40
 8111dac:	d83c      	bhi.n	8111e28 <_scanf_float+0xd4>
 8111dae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8111db2:	b2c8      	uxtb	r0, r1
 8111db4:	280e      	cmp	r0, #14
 8111db6:	d93a      	bls.n	8111e2e <_scanf_float+0xda>
 8111db8:	f1b9 0f00 	cmp.w	r9, #0
 8111dbc:	d003      	beq.n	8111dc6 <_scanf_float+0x72>
 8111dbe:	6823      	ldr	r3, [r4, #0]
 8111dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8111dc4:	6023      	str	r3, [r4, #0]
 8111dc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8111dca:	f1ba 0f01 	cmp.w	sl, #1
 8111dce:	f200 8117 	bhi.w	8112000 <_scanf_float+0x2ac>
 8111dd2:	9b01      	ldr	r3, [sp, #4]
 8111dd4:	429e      	cmp	r6, r3
 8111dd6:	f200 8108 	bhi.w	8111fea <_scanf_float+0x296>
 8111dda:	2001      	movs	r0, #1
 8111ddc:	b007      	add	sp, #28
 8111dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111de2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8111de6:	2a0d      	cmp	r2, #13
 8111de8:	d8e6      	bhi.n	8111db8 <_scanf_float+0x64>
 8111dea:	a101      	add	r1, pc, #4	@ (adr r1, 8111df0 <_scanf_float+0x9c>)
 8111dec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8111df0:	08111f37 	.word	0x08111f37
 8111df4:	08111db9 	.word	0x08111db9
 8111df8:	08111db9 	.word	0x08111db9
 8111dfc:	08111db9 	.word	0x08111db9
 8111e00:	08111f97 	.word	0x08111f97
 8111e04:	08111f6f 	.word	0x08111f6f
 8111e08:	08111db9 	.word	0x08111db9
 8111e0c:	08111db9 	.word	0x08111db9
 8111e10:	08111f45 	.word	0x08111f45
 8111e14:	08111db9 	.word	0x08111db9
 8111e18:	08111db9 	.word	0x08111db9
 8111e1c:	08111db9 	.word	0x08111db9
 8111e20:	08111db9 	.word	0x08111db9
 8111e24:	08111efd 	.word	0x08111efd
 8111e28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8111e2c:	e7db      	b.n	8111de6 <_scanf_float+0x92>
 8111e2e:	290e      	cmp	r1, #14
 8111e30:	d8c2      	bhi.n	8111db8 <_scanf_float+0x64>
 8111e32:	a001      	add	r0, pc, #4	@ (adr r0, 8111e38 <_scanf_float+0xe4>)
 8111e34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8111e38:	08111eed 	.word	0x08111eed
 8111e3c:	08111db9 	.word	0x08111db9
 8111e40:	08111eed 	.word	0x08111eed
 8111e44:	08111f83 	.word	0x08111f83
 8111e48:	08111db9 	.word	0x08111db9
 8111e4c:	08111e95 	.word	0x08111e95
 8111e50:	08111ed3 	.word	0x08111ed3
 8111e54:	08111ed3 	.word	0x08111ed3
 8111e58:	08111ed3 	.word	0x08111ed3
 8111e5c:	08111ed3 	.word	0x08111ed3
 8111e60:	08111ed3 	.word	0x08111ed3
 8111e64:	08111ed3 	.word	0x08111ed3
 8111e68:	08111ed3 	.word	0x08111ed3
 8111e6c:	08111ed3 	.word	0x08111ed3
 8111e70:	08111ed3 	.word	0x08111ed3
 8111e74:	2b6e      	cmp	r3, #110	@ 0x6e
 8111e76:	d809      	bhi.n	8111e8c <_scanf_float+0x138>
 8111e78:	2b60      	cmp	r3, #96	@ 0x60
 8111e7a:	d8b2      	bhi.n	8111de2 <_scanf_float+0x8e>
 8111e7c:	2b54      	cmp	r3, #84	@ 0x54
 8111e7e:	d07b      	beq.n	8111f78 <_scanf_float+0x224>
 8111e80:	2b59      	cmp	r3, #89	@ 0x59
 8111e82:	d199      	bne.n	8111db8 <_scanf_float+0x64>
 8111e84:	2d07      	cmp	r5, #7
 8111e86:	d197      	bne.n	8111db8 <_scanf_float+0x64>
 8111e88:	2508      	movs	r5, #8
 8111e8a:	e02c      	b.n	8111ee6 <_scanf_float+0x192>
 8111e8c:	2b74      	cmp	r3, #116	@ 0x74
 8111e8e:	d073      	beq.n	8111f78 <_scanf_float+0x224>
 8111e90:	2b79      	cmp	r3, #121	@ 0x79
 8111e92:	e7f6      	b.n	8111e82 <_scanf_float+0x12e>
 8111e94:	6821      	ldr	r1, [r4, #0]
 8111e96:	05c8      	lsls	r0, r1, #23
 8111e98:	d51b      	bpl.n	8111ed2 <_scanf_float+0x17e>
 8111e9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8111e9e:	6021      	str	r1, [r4, #0]
 8111ea0:	f109 0901 	add.w	r9, r9, #1
 8111ea4:	f1bb 0f00 	cmp.w	fp, #0
 8111ea8:	d003      	beq.n	8111eb2 <_scanf_float+0x15e>
 8111eaa:	3201      	adds	r2, #1
 8111eac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8111eb0:	60a2      	str	r2, [r4, #8]
 8111eb2:	68a3      	ldr	r3, [r4, #8]
 8111eb4:	3b01      	subs	r3, #1
 8111eb6:	60a3      	str	r3, [r4, #8]
 8111eb8:	6923      	ldr	r3, [r4, #16]
 8111eba:	3301      	adds	r3, #1
 8111ebc:	6123      	str	r3, [r4, #16]
 8111ebe:	687b      	ldr	r3, [r7, #4]
 8111ec0:	3b01      	subs	r3, #1
 8111ec2:	2b00      	cmp	r3, #0
 8111ec4:	607b      	str	r3, [r7, #4]
 8111ec6:	f340 8087 	ble.w	8111fd8 <_scanf_float+0x284>
 8111eca:	683b      	ldr	r3, [r7, #0]
 8111ecc:	3301      	adds	r3, #1
 8111ece:	603b      	str	r3, [r7, #0]
 8111ed0:	e765      	b.n	8111d9e <_scanf_float+0x4a>
 8111ed2:	eb1a 0105 	adds.w	r1, sl, r5
 8111ed6:	f47f af6f 	bne.w	8111db8 <_scanf_float+0x64>
 8111eda:	6822      	ldr	r2, [r4, #0]
 8111edc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8111ee0:	6022      	str	r2, [r4, #0]
 8111ee2:	460d      	mov	r5, r1
 8111ee4:	468a      	mov	sl, r1
 8111ee6:	f806 3b01 	strb.w	r3, [r6], #1
 8111eea:	e7e2      	b.n	8111eb2 <_scanf_float+0x15e>
 8111eec:	6822      	ldr	r2, [r4, #0]
 8111eee:	0610      	lsls	r0, r2, #24
 8111ef0:	f57f af62 	bpl.w	8111db8 <_scanf_float+0x64>
 8111ef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8111ef8:	6022      	str	r2, [r4, #0]
 8111efa:	e7f4      	b.n	8111ee6 <_scanf_float+0x192>
 8111efc:	f1ba 0f00 	cmp.w	sl, #0
 8111f00:	d10e      	bne.n	8111f20 <_scanf_float+0x1cc>
 8111f02:	f1b9 0f00 	cmp.w	r9, #0
 8111f06:	d10e      	bne.n	8111f26 <_scanf_float+0x1d2>
 8111f08:	6822      	ldr	r2, [r4, #0]
 8111f0a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8111f0e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8111f12:	d108      	bne.n	8111f26 <_scanf_float+0x1d2>
 8111f14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8111f18:	6022      	str	r2, [r4, #0]
 8111f1a:	f04f 0a01 	mov.w	sl, #1
 8111f1e:	e7e2      	b.n	8111ee6 <_scanf_float+0x192>
 8111f20:	f1ba 0f02 	cmp.w	sl, #2
 8111f24:	d055      	beq.n	8111fd2 <_scanf_float+0x27e>
 8111f26:	2d01      	cmp	r5, #1
 8111f28:	d002      	beq.n	8111f30 <_scanf_float+0x1dc>
 8111f2a:	2d04      	cmp	r5, #4
 8111f2c:	f47f af44 	bne.w	8111db8 <_scanf_float+0x64>
 8111f30:	3501      	adds	r5, #1
 8111f32:	b2ed      	uxtb	r5, r5
 8111f34:	e7d7      	b.n	8111ee6 <_scanf_float+0x192>
 8111f36:	f1ba 0f01 	cmp.w	sl, #1
 8111f3a:	f47f af3d 	bne.w	8111db8 <_scanf_float+0x64>
 8111f3e:	f04f 0a02 	mov.w	sl, #2
 8111f42:	e7d0      	b.n	8111ee6 <_scanf_float+0x192>
 8111f44:	b97d      	cbnz	r5, 8111f66 <_scanf_float+0x212>
 8111f46:	f1b9 0f00 	cmp.w	r9, #0
 8111f4a:	f47f af38 	bne.w	8111dbe <_scanf_float+0x6a>
 8111f4e:	6822      	ldr	r2, [r4, #0]
 8111f50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8111f54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8111f58:	f040 8108 	bne.w	811216c <_scanf_float+0x418>
 8111f5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8111f60:	6022      	str	r2, [r4, #0]
 8111f62:	2501      	movs	r5, #1
 8111f64:	e7bf      	b.n	8111ee6 <_scanf_float+0x192>
 8111f66:	2d03      	cmp	r5, #3
 8111f68:	d0e2      	beq.n	8111f30 <_scanf_float+0x1dc>
 8111f6a:	2d05      	cmp	r5, #5
 8111f6c:	e7de      	b.n	8111f2c <_scanf_float+0x1d8>
 8111f6e:	2d02      	cmp	r5, #2
 8111f70:	f47f af22 	bne.w	8111db8 <_scanf_float+0x64>
 8111f74:	2503      	movs	r5, #3
 8111f76:	e7b6      	b.n	8111ee6 <_scanf_float+0x192>
 8111f78:	2d06      	cmp	r5, #6
 8111f7a:	f47f af1d 	bne.w	8111db8 <_scanf_float+0x64>
 8111f7e:	2507      	movs	r5, #7
 8111f80:	e7b1      	b.n	8111ee6 <_scanf_float+0x192>
 8111f82:	6822      	ldr	r2, [r4, #0]
 8111f84:	0591      	lsls	r1, r2, #22
 8111f86:	f57f af17 	bpl.w	8111db8 <_scanf_float+0x64>
 8111f8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8111f8e:	6022      	str	r2, [r4, #0]
 8111f90:	f8cd 9008 	str.w	r9, [sp, #8]
 8111f94:	e7a7      	b.n	8111ee6 <_scanf_float+0x192>
 8111f96:	6822      	ldr	r2, [r4, #0]
 8111f98:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8111f9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8111fa0:	d006      	beq.n	8111fb0 <_scanf_float+0x25c>
 8111fa2:	0550      	lsls	r0, r2, #21
 8111fa4:	f57f af08 	bpl.w	8111db8 <_scanf_float+0x64>
 8111fa8:	f1b9 0f00 	cmp.w	r9, #0
 8111fac:	f000 80de 	beq.w	811216c <_scanf_float+0x418>
 8111fb0:	0591      	lsls	r1, r2, #22
 8111fb2:	bf58      	it	pl
 8111fb4:	9902      	ldrpl	r1, [sp, #8]
 8111fb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8111fba:	bf58      	it	pl
 8111fbc:	eba9 0101 	subpl.w	r1, r9, r1
 8111fc0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8111fc4:	bf58      	it	pl
 8111fc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8111fca:	6022      	str	r2, [r4, #0]
 8111fcc:	f04f 0900 	mov.w	r9, #0
 8111fd0:	e789      	b.n	8111ee6 <_scanf_float+0x192>
 8111fd2:	f04f 0a03 	mov.w	sl, #3
 8111fd6:	e786      	b.n	8111ee6 <_scanf_float+0x192>
 8111fd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8111fdc:	4639      	mov	r1, r7
 8111fde:	4640      	mov	r0, r8
 8111fe0:	4798      	blx	r3
 8111fe2:	2800      	cmp	r0, #0
 8111fe4:	f43f aedb 	beq.w	8111d9e <_scanf_float+0x4a>
 8111fe8:	e6e6      	b.n	8111db8 <_scanf_float+0x64>
 8111fea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8111fee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8111ff2:	463a      	mov	r2, r7
 8111ff4:	4640      	mov	r0, r8
 8111ff6:	4798      	blx	r3
 8111ff8:	6923      	ldr	r3, [r4, #16]
 8111ffa:	3b01      	subs	r3, #1
 8111ffc:	6123      	str	r3, [r4, #16]
 8111ffe:	e6e8      	b.n	8111dd2 <_scanf_float+0x7e>
 8112000:	1e6b      	subs	r3, r5, #1
 8112002:	2b06      	cmp	r3, #6
 8112004:	d824      	bhi.n	8112050 <_scanf_float+0x2fc>
 8112006:	2d02      	cmp	r5, #2
 8112008:	d836      	bhi.n	8112078 <_scanf_float+0x324>
 811200a:	9b01      	ldr	r3, [sp, #4]
 811200c:	429e      	cmp	r6, r3
 811200e:	f67f aee4 	bls.w	8111dda <_scanf_float+0x86>
 8112012:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112016:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 811201a:	463a      	mov	r2, r7
 811201c:	4640      	mov	r0, r8
 811201e:	4798      	blx	r3
 8112020:	6923      	ldr	r3, [r4, #16]
 8112022:	3b01      	subs	r3, #1
 8112024:	6123      	str	r3, [r4, #16]
 8112026:	e7f0      	b.n	811200a <_scanf_float+0x2b6>
 8112028:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811202c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8112030:	463a      	mov	r2, r7
 8112032:	4640      	mov	r0, r8
 8112034:	4798      	blx	r3
 8112036:	6923      	ldr	r3, [r4, #16]
 8112038:	3b01      	subs	r3, #1
 811203a:	6123      	str	r3, [r4, #16]
 811203c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8112040:	fa5f fa8a 	uxtb.w	sl, sl
 8112044:	f1ba 0f02 	cmp.w	sl, #2
 8112048:	d1ee      	bne.n	8112028 <_scanf_float+0x2d4>
 811204a:	3d03      	subs	r5, #3
 811204c:	b2ed      	uxtb	r5, r5
 811204e:	1b76      	subs	r6, r6, r5
 8112050:	6823      	ldr	r3, [r4, #0]
 8112052:	05da      	lsls	r2, r3, #23
 8112054:	d530      	bpl.n	81120b8 <_scanf_float+0x364>
 8112056:	055b      	lsls	r3, r3, #21
 8112058:	d511      	bpl.n	811207e <_scanf_float+0x32a>
 811205a:	9b01      	ldr	r3, [sp, #4]
 811205c:	429e      	cmp	r6, r3
 811205e:	f67f aebc 	bls.w	8111dda <_scanf_float+0x86>
 8112062:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8112066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 811206a:	463a      	mov	r2, r7
 811206c:	4640      	mov	r0, r8
 811206e:	4798      	blx	r3
 8112070:	6923      	ldr	r3, [r4, #16]
 8112072:	3b01      	subs	r3, #1
 8112074:	6123      	str	r3, [r4, #16]
 8112076:	e7f0      	b.n	811205a <_scanf_float+0x306>
 8112078:	46aa      	mov	sl, r5
 811207a:	46b3      	mov	fp, r6
 811207c:	e7de      	b.n	811203c <_scanf_float+0x2e8>
 811207e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8112082:	6923      	ldr	r3, [r4, #16]
 8112084:	2965      	cmp	r1, #101	@ 0x65
 8112086:	f103 33ff 	add.w	r3, r3, #4294967295
 811208a:	f106 35ff 	add.w	r5, r6, #4294967295
 811208e:	6123      	str	r3, [r4, #16]
 8112090:	d00c      	beq.n	81120ac <_scanf_float+0x358>
 8112092:	2945      	cmp	r1, #69	@ 0x45
 8112094:	d00a      	beq.n	81120ac <_scanf_float+0x358>
 8112096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811209a:	463a      	mov	r2, r7
 811209c:	4640      	mov	r0, r8
 811209e:	4798      	blx	r3
 81120a0:	6923      	ldr	r3, [r4, #16]
 81120a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81120a6:	3b01      	subs	r3, #1
 81120a8:	1eb5      	subs	r5, r6, #2
 81120aa:	6123      	str	r3, [r4, #16]
 81120ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81120b0:	463a      	mov	r2, r7
 81120b2:	4640      	mov	r0, r8
 81120b4:	4798      	blx	r3
 81120b6:	462e      	mov	r6, r5
 81120b8:	6822      	ldr	r2, [r4, #0]
 81120ba:	f012 0210 	ands.w	r2, r2, #16
 81120be:	d001      	beq.n	81120c4 <_scanf_float+0x370>
 81120c0:	2000      	movs	r0, #0
 81120c2:	e68b      	b.n	8111ddc <_scanf_float+0x88>
 81120c4:	7032      	strb	r2, [r6, #0]
 81120c6:	6823      	ldr	r3, [r4, #0]
 81120c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 81120cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81120d0:	d11c      	bne.n	811210c <_scanf_float+0x3b8>
 81120d2:	9b02      	ldr	r3, [sp, #8]
 81120d4:	454b      	cmp	r3, r9
 81120d6:	eba3 0209 	sub.w	r2, r3, r9
 81120da:	d123      	bne.n	8112124 <_scanf_float+0x3d0>
 81120dc:	9901      	ldr	r1, [sp, #4]
 81120de:	2200      	movs	r2, #0
 81120e0:	4640      	mov	r0, r8
 81120e2:	f002 fcc9 	bl	8114a78 <_strtod_r>
 81120e6:	9b03      	ldr	r3, [sp, #12]
 81120e8:	6821      	ldr	r1, [r4, #0]
 81120ea:	681b      	ldr	r3, [r3, #0]
 81120ec:	f011 0f02 	tst.w	r1, #2
 81120f0:	ec57 6b10 	vmov	r6, r7, d0
 81120f4:	f103 0204 	add.w	r2, r3, #4
 81120f8:	d01f      	beq.n	811213a <_scanf_float+0x3e6>
 81120fa:	9903      	ldr	r1, [sp, #12]
 81120fc:	600a      	str	r2, [r1, #0]
 81120fe:	681b      	ldr	r3, [r3, #0]
 8112100:	e9c3 6700 	strd	r6, r7, [r3]
 8112104:	68e3      	ldr	r3, [r4, #12]
 8112106:	3301      	adds	r3, #1
 8112108:	60e3      	str	r3, [r4, #12]
 811210a:	e7d9      	b.n	81120c0 <_scanf_float+0x36c>
 811210c:	9b04      	ldr	r3, [sp, #16]
 811210e:	2b00      	cmp	r3, #0
 8112110:	d0e4      	beq.n	81120dc <_scanf_float+0x388>
 8112112:	9905      	ldr	r1, [sp, #20]
 8112114:	230a      	movs	r3, #10
 8112116:	3101      	adds	r1, #1
 8112118:	4640      	mov	r0, r8
 811211a:	f002 fd2d 	bl	8114b78 <_strtol_r>
 811211e:	9b04      	ldr	r3, [sp, #16]
 8112120:	9e05      	ldr	r6, [sp, #20]
 8112122:	1ac2      	subs	r2, r0, r3
 8112124:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8112128:	429e      	cmp	r6, r3
 811212a:	bf28      	it	cs
 811212c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8112130:	4910      	ldr	r1, [pc, #64]	@ (8112174 <_scanf_float+0x420>)
 8112132:	4630      	mov	r0, r6
 8112134:	f000 f8f6 	bl	8112324 <siprintf>
 8112138:	e7d0      	b.n	81120dc <_scanf_float+0x388>
 811213a:	f011 0f04 	tst.w	r1, #4
 811213e:	9903      	ldr	r1, [sp, #12]
 8112140:	600a      	str	r2, [r1, #0]
 8112142:	d1dc      	bne.n	81120fe <_scanf_float+0x3aa>
 8112144:	681d      	ldr	r5, [r3, #0]
 8112146:	4632      	mov	r2, r6
 8112148:	463b      	mov	r3, r7
 811214a:	4630      	mov	r0, r6
 811214c:	4639      	mov	r1, r7
 811214e:	f7ee fd75 	bl	8100c3c <__aeabi_dcmpun>
 8112152:	b128      	cbz	r0, 8112160 <_scanf_float+0x40c>
 8112154:	4808      	ldr	r0, [pc, #32]	@ (8112178 <_scanf_float+0x424>)
 8112156:	f000 fa6b 	bl	8112630 <nanf>
 811215a:	ed85 0a00 	vstr	s0, [r5]
 811215e:	e7d1      	b.n	8112104 <_scanf_float+0x3b0>
 8112160:	4630      	mov	r0, r6
 8112162:	4639      	mov	r1, r7
 8112164:	f7ee fdc8 	bl	8100cf8 <__aeabi_d2f>
 8112168:	6028      	str	r0, [r5, #0]
 811216a:	e7cb      	b.n	8112104 <_scanf_float+0x3b0>
 811216c:	f04f 0900 	mov.w	r9, #0
 8112170:	e629      	b.n	8111dc6 <_scanf_float+0x72>
 8112172:	bf00      	nop
 8112174:	08115d43 	.word	0x08115d43
 8112178:	08115d83 	.word	0x08115d83

0811217c <std>:
 811217c:	2300      	movs	r3, #0
 811217e:	b510      	push	{r4, lr}
 8112180:	4604      	mov	r4, r0
 8112182:	e9c0 3300 	strd	r3, r3, [r0]
 8112186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811218a:	6083      	str	r3, [r0, #8]
 811218c:	8181      	strh	r1, [r0, #12]
 811218e:	6643      	str	r3, [r0, #100]	@ 0x64
 8112190:	81c2      	strh	r2, [r0, #14]
 8112192:	6183      	str	r3, [r0, #24]
 8112194:	4619      	mov	r1, r3
 8112196:	2208      	movs	r2, #8
 8112198:	305c      	adds	r0, #92	@ 0x5c
 811219a:	f000 f9bb 	bl	8112514 <memset>
 811219e:	4b0d      	ldr	r3, [pc, #52]	@ (81121d4 <std+0x58>)
 81121a0:	6263      	str	r3, [r4, #36]	@ 0x24
 81121a2:	4b0d      	ldr	r3, [pc, #52]	@ (81121d8 <std+0x5c>)
 81121a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 81121a6:	4b0d      	ldr	r3, [pc, #52]	@ (81121dc <std+0x60>)
 81121a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 81121aa:	4b0d      	ldr	r3, [pc, #52]	@ (81121e0 <std+0x64>)
 81121ac:	6323      	str	r3, [r4, #48]	@ 0x30
 81121ae:	4b0d      	ldr	r3, [pc, #52]	@ (81121e4 <std+0x68>)
 81121b0:	6224      	str	r4, [r4, #32]
 81121b2:	429c      	cmp	r4, r3
 81121b4:	d006      	beq.n	81121c4 <std+0x48>
 81121b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 81121ba:	4294      	cmp	r4, r2
 81121bc:	d002      	beq.n	81121c4 <std+0x48>
 81121be:	33d0      	adds	r3, #208	@ 0xd0
 81121c0:	429c      	cmp	r4, r3
 81121c2:	d105      	bne.n	81121d0 <std+0x54>
 81121c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 81121c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81121cc:	f000 ba1e 	b.w	811260c <__retarget_lock_init_recursive>
 81121d0:	bd10      	pop	{r4, pc}
 81121d2:	bf00      	nop
 81121d4:	08112365 	.word	0x08112365
 81121d8:	08112387 	.word	0x08112387
 81121dc:	081123bf 	.word	0x081123bf
 81121e0:	081123e3 	.word	0x081123e3
 81121e4:	1000d384 	.word	0x1000d384

081121e8 <stdio_exit_handler>:
 81121e8:	4a02      	ldr	r2, [pc, #8]	@ (81121f4 <stdio_exit_handler+0xc>)
 81121ea:	4903      	ldr	r1, [pc, #12]	@ (81121f8 <stdio_exit_handler+0x10>)
 81121ec:	4803      	ldr	r0, [pc, #12]	@ (81121fc <stdio_exit_handler+0x14>)
 81121ee:	f000 b869 	b.w	81122c4 <_fwalk_sglue>
 81121f2:	bf00      	nop
 81121f4:	100000a4 	.word	0x100000a4
 81121f8:	081151b9 	.word	0x081151b9
 81121fc:	100000b4 	.word	0x100000b4

08112200 <cleanup_stdio>:
 8112200:	6841      	ldr	r1, [r0, #4]
 8112202:	4b0c      	ldr	r3, [pc, #48]	@ (8112234 <cleanup_stdio+0x34>)
 8112204:	4299      	cmp	r1, r3
 8112206:	b510      	push	{r4, lr}
 8112208:	4604      	mov	r4, r0
 811220a:	d001      	beq.n	8112210 <cleanup_stdio+0x10>
 811220c:	f002 ffd4 	bl	81151b8 <_fflush_r>
 8112210:	68a1      	ldr	r1, [r4, #8]
 8112212:	4b09      	ldr	r3, [pc, #36]	@ (8112238 <cleanup_stdio+0x38>)
 8112214:	4299      	cmp	r1, r3
 8112216:	d002      	beq.n	811221e <cleanup_stdio+0x1e>
 8112218:	4620      	mov	r0, r4
 811221a:	f002 ffcd 	bl	81151b8 <_fflush_r>
 811221e:	68e1      	ldr	r1, [r4, #12]
 8112220:	4b06      	ldr	r3, [pc, #24]	@ (811223c <cleanup_stdio+0x3c>)
 8112222:	4299      	cmp	r1, r3
 8112224:	d004      	beq.n	8112230 <cleanup_stdio+0x30>
 8112226:	4620      	mov	r0, r4
 8112228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811222c:	f002 bfc4 	b.w	81151b8 <_fflush_r>
 8112230:	bd10      	pop	{r4, pc}
 8112232:	bf00      	nop
 8112234:	1000d384 	.word	0x1000d384
 8112238:	1000d3ec 	.word	0x1000d3ec
 811223c:	1000d454 	.word	0x1000d454

08112240 <global_stdio_init.part.0>:
 8112240:	b510      	push	{r4, lr}
 8112242:	4b0b      	ldr	r3, [pc, #44]	@ (8112270 <global_stdio_init.part.0+0x30>)
 8112244:	4c0b      	ldr	r4, [pc, #44]	@ (8112274 <global_stdio_init.part.0+0x34>)
 8112246:	4a0c      	ldr	r2, [pc, #48]	@ (8112278 <global_stdio_init.part.0+0x38>)
 8112248:	601a      	str	r2, [r3, #0]
 811224a:	4620      	mov	r0, r4
 811224c:	2200      	movs	r2, #0
 811224e:	2104      	movs	r1, #4
 8112250:	f7ff ff94 	bl	811217c <std>
 8112254:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8112258:	2201      	movs	r2, #1
 811225a:	2109      	movs	r1, #9
 811225c:	f7ff ff8e 	bl	811217c <std>
 8112260:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8112264:	2202      	movs	r2, #2
 8112266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811226a:	2112      	movs	r1, #18
 811226c:	f7ff bf86 	b.w	811217c <std>
 8112270:	1000d4bc 	.word	0x1000d4bc
 8112274:	1000d384 	.word	0x1000d384
 8112278:	081121e9 	.word	0x081121e9

0811227c <__sfp_lock_acquire>:
 811227c:	4801      	ldr	r0, [pc, #4]	@ (8112284 <__sfp_lock_acquire+0x8>)
 811227e:	f000 b9c6 	b.w	811260e <__retarget_lock_acquire_recursive>
 8112282:	bf00      	nop
 8112284:	1000d4c5 	.word	0x1000d4c5

08112288 <__sfp_lock_release>:
 8112288:	4801      	ldr	r0, [pc, #4]	@ (8112290 <__sfp_lock_release+0x8>)
 811228a:	f000 b9c1 	b.w	8112610 <__retarget_lock_release_recursive>
 811228e:	bf00      	nop
 8112290:	1000d4c5 	.word	0x1000d4c5

08112294 <__sinit>:
 8112294:	b510      	push	{r4, lr}
 8112296:	4604      	mov	r4, r0
 8112298:	f7ff fff0 	bl	811227c <__sfp_lock_acquire>
 811229c:	6a23      	ldr	r3, [r4, #32]
 811229e:	b11b      	cbz	r3, 81122a8 <__sinit+0x14>
 81122a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81122a4:	f7ff bff0 	b.w	8112288 <__sfp_lock_release>
 81122a8:	4b04      	ldr	r3, [pc, #16]	@ (81122bc <__sinit+0x28>)
 81122aa:	6223      	str	r3, [r4, #32]
 81122ac:	4b04      	ldr	r3, [pc, #16]	@ (81122c0 <__sinit+0x2c>)
 81122ae:	681b      	ldr	r3, [r3, #0]
 81122b0:	2b00      	cmp	r3, #0
 81122b2:	d1f5      	bne.n	81122a0 <__sinit+0xc>
 81122b4:	f7ff ffc4 	bl	8112240 <global_stdio_init.part.0>
 81122b8:	e7f2      	b.n	81122a0 <__sinit+0xc>
 81122ba:	bf00      	nop
 81122bc:	08112201 	.word	0x08112201
 81122c0:	1000d4bc 	.word	0x1000d4bc

081122c4 <_fwalk_sglue>:
 81122c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81122c8:	4607      	mov	r7, r0
 81122ca:	4688      	mov	r8, r1
 81122cc:	4614      	mov	r4, r2
 81122ce:	2600      	movs	r6, #0
 81122d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81122d4:	f1b9 0901 	subs.w	r9, r9, #1
 81122d8:	d505      	bpl.n	81122e6 <_fwalk_sglue+0x22>
 81122da:	6824      	ldr	r4, [r4, #0]
 81122dc:	2c00      	cmp	r4, #0
 81122de:	d1f7      	bne.n	81122d0 <_fwalk_sglue+0xc>
 81122e0:	4630      	mov	r0, r6
 81122e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81122e6:	89ab      	ldrh	r3, [r5, #12]
 81122e8:	2b01      	cmp	r3, #1
 81122ea:	d907      	bls.n	81122fc <_fwalk_sglue+0x38>
 81122ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81122f0:	3301      	adds	r3, #1
 81122f2:	d003      	beq.n	81122fc <_fwalk_sglue+0x38>
 81122f4:	4629      	mov	r1, r5
 81122f6:	4638      	mov	r0, r7
 81122f8:	47c0      	blx	r8
 81122fa:	4306      	orrs	r6, r0
 81122fc:	3568      	adds	r5, #104	@ 0x68
 81122fe:	e7e9      	b.n	81122d4 <_fwalk_sglue+0x10>

08112300 <iprintf>:
 8112300:	b40f      	push	{r0, r1, r2, r3}
 8112302:	b507      	push	{r0, r1, r2, lr}
 8112304:	4906      	ldr	r1, [pc, #24]	@ (8112320 <iprintf+0x20>)
 8112306:	ab04      	add	r3, sp, #16
 8112308:	6808      	ldr	r0, [r1, #0]
 811230a:	f853 2b04 	ldr.w	r2, [r3], #4
 811230e:	6881      	ldr	r1, [r0, #8]
 8112310:	9301      	str	r3, [sp, #4]
 8112312:	f002 fdb5 	bl	8114e80 <_vfiprintf_r>
 8112316:	b003      	add	sp, #12
 8112318:	f85d eb04 	ldr.w	lr, [sp], #4
 811231c:	b004      	add	sp, #16
 811231e:	4770      	bx	lr
 8112320:	100000b0 	.word	0x100000b0

08112324 <siprintf>:
 8112324:	b40e      	push	{r1, r2, r3}
 8112326:	b500      	push	{lr}
 8112328:	b09c      	sub	sp, #112	@ 0x70
 811232a:	ab1d      	add	r3, sp, #116	@ 0x74
 811232c:	9002      	str	r0, [sp, #8]
 811232e:	9006      	str	r0, [sp, #24]
 8112330:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8112334:	4809      	ldr	r0, [pc, #36]	@ (811235c <siprintf+0x38>)
 8112336:	9107      	str	r1, [sp, #28]
 8112338:	9104      	str	r1, [sp, #16]
 811233a:	4909      	ldr	r1, [pc, #36]	@ (8112360 <siprintf+0x3c>)
 811233c:	f853 2b04 	ldr.w	r2, [r3], #4
 8112340:	9105      	str	r1, [sp, #20]
 8112342:	6800      	ldr	r0, [r0, #0]
 8112344:	9301      	str	r3, [sp, #4]
 8112346:	a902      	add	r1, sp, #8
 8112348:	f002 fc74 	bl	8114c34 <_svfiprintf_r>
 811234c:	9b02      	ldr	r3, [sp, #8]
 811234e:	2200      	movs	r2, #0
 8112350:	701a      	strb	r2, [r3, #0]
 8112352:	b01c      	add	sp, #112	@ 0x70
 8112354:	f85d eb04 	ldr.w	lr, [sp], #4
 8112358:	b003      	add	sp, #12
 811235a:	4770      	bx	lr
 811235c:	100000b0 	.word	0x100000b0
 8112360:	ffff0208 	.word	0xffff0208

08112364 <__sread>:
 8112364:	b510      	push	{r4, lr}
 8112366:	460c      	mov	r4, r1
 8112368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811236c:	f000 f900 	bl	8112570 <_read_r>
 8112370:	2800      	cmp	r0, #0
 8112372:	bfab      	itete	ge
 8112374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8112376:	89a3      	ldrhlt	r3, [r4, #12]
 8112378:	181b      	addge	r3, r3, r0
 811237a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 811237e:	bfac      	ite	ge
 8112380:	6563      	strge	r3, [r4, #84]	@ 0x54
 8112382:	81a3      	strhlt	r3, [r4, #12]
 8112384:	bd10      	pop	{r4, pc}

08112386 <__swrite>:
 8112386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811238a:	461f      	mov	r7, r3
 811238c:	898b      	ldrh	r3, [r1, #12]
 811238e:	05db      	lsls	r3, r3, #23
 8112390:	4605      	mov	r5, r0
 8112392:	460c      	mov	r4, r1
 8112394:	4616      	mov	r6, r2
 8112396:	d505      	bpl.n	81123a4 <__swrite+0x1e>
 8112398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811239c:	2302      	movs	r3, #2
 811239e:	2200      	movs	r2, #0
 81123a0:	f000 f8d4 	bl	811254c <_lseek_r>
 81123a4:	89a3      	ldrh	r3, [r4, #12]
 81123a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81123aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81123ae:	81a3      	strh	r3, [r4, #12]
 81123b0:	4632      	mov	r2, r6
 81123b2:	463b      	mov	r3, r7
 81123b4:	4628      	mov	r0, r5
 81123b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81123ba:	f000 b8eb 	b.w	8112594 <_write_r>

081123be <__sseek>:
 81123be:	b510      	push	{r4, lr}
 81123c0:	460c      	mov	r4, r1
 81123c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81123c6:	f000 f8c1 	bl	811254c <_lseek_r>
 81123ca:	1c43      	adds	r3, r0, #1
 81123cc:	89a3      	ldrh	r3, [r4, #12]
 81123ce:	bf15      	itete	ne
 81123d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 81123d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 81123d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 81123da:	81a3      	strheq	r3, [r4, #12]
 81123dc:	bf18      	it	ne
 81123de:	81a3      	strhne	r3, [r4, #12]
 81123e0:	bd10      	pop	{r4, pc}

081123e2 <__sclose>:
 81123e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81123e6:	f000 b8a1 	b.w	811252c <_close_r>

081123ea <__swbuf_r>:
 81123ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81123ec:	460e      	mov	r6, r1
 81123ee:	4614      	mov	r4, r2
 81123f0:	4605      	mov	r5, r0
 81123f2:	b118      	cbz	r0, 81123fc <__swbuf_r+0x12>
 81123f4:	6a03      	ldr	r3, [r0, #32]
 81123f6:	b90b      	cbnz	r3, 81123fc <__swbuf_r+0x12>
 81123f8:	f7ff ff4c 	bl	8112294 <__sinit>
 81123fc:	69a3      	ldr	r3, [r4, #24]
 81123fe:	60a3      	str	r3, [r4, #8]
 8112400:	89a3      	ldrh	r3, [r4, #12]
 8112402:	071a      	lsls	r2, r3, #28
 8112404:	d501      	bpl.n	811240a <__swbuf_r+0x20>
 8112406:	6923      	ldr	r3, [r4, #16]
 8112408:	b943      	cbnz	r3, 811241c <__swbuf_r+0x32>
 811240a:	4621      	mov	r1, r4
 811240c:	4628      	mov	r0, r5
 811240e:	f000 f82b 	bl	8112468 <__swsetup_r>
 8112412:	b118      	cbz	r0, 811241c <__swbuf_r+0x32>
 8112414:	f04f 37ff 	mov.w	r7, #4294967295
 8112418:	4638      	mov	r0, r7
 811241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811241c:	6823      	ldr	r3, [r4, #0]
 811241e:	6922      	ldr	r2, [r4, #16]
 8112420:	1a98      	subs	r0, r3, r2
 8112422:	6963      	ldr	r3, [r4, #20]
 8112424:	b2f6      	uxtb	r6, r6
 8112426:	4283      	cmp	r3, r0
 8112428:	4637      	mov	r7, r6
 811242a:	dc05      	bgt.n	8112438 <__swbuf_r+0x4e>
 811242c:	4621      	mov	r1, r4
 811242e:	4628      	mov	r0, r5
 8112430:	f002 fec2 	bl	81151b8 <_fflush_r>
 8112434:	2800      	cmp	r0, #0
 8112436:	d1ed      	bne.n	8112414 <__swbuf_r+0x2a>
 8112438:	68a3      	ldr	r3, [r4, #8]
 811243a:	3b01      	subs	r3, #1
 811243c:	60a3      	str	r3, [r4, #8]
 811243e:	6823      	ldr	r3, [r4, #0]
 8112440:	1c5a      	adds	r2, r3, #1
 8112442:	6022      	str	r2, [r4, #0]
 8112444:	701e      	strb	r6, [r3, #0]
 8112446:	6962      	ldr	r2, [r4, #20]
 8112448:	1c43      	adds	r3, r0, #1
 811244a:	429a      	cmp	r2, r3
 811244c:	d004      	beq.n	8112458 <__swbuf_r+0x6e>
 811244e:	89a3      	ldrh	r3, [r4, #12]
 8112450:	07db      	lsls	r3, r3, #31
 8112452:	d5e1      	bpl.n	8112418 <__swbuf_r+0x2e>
 8112454:	2e0a      	cmp	r6, #10
 8112456:	d1df      	bne.n	8112418 <__swbuf_r+0x2e>
 8112458:	4621      	mov	r1, r4
 811245a:	4628      	mov	r0, r5
 811245c:	f002 feac 	bl	81151b8 <_fflush_r>
 8112460:	2800      	cmp	r0, #0
 8112462:	d0d9      	beq.n	8112418 <__swbuf_r+0x2e>
 8112464:	e7d6      	b.n	8112414 <__swbuf_r+0x2a>
	...

08112468 <__swsetup_r>:
 8112468:	b538      	push	{r3, r4, r5, lr}
 811246a:	4b29      	ldr	r3, [pc, #164]	@ (8112510 <__swsetup_r+0xa8>)
 811246c:	4605      	mov	r5, r0
 811246e:	6818      	ldr	r0, [r3, #0]
 8112470:	460c      	mov	r4, r1
 8112472:	b118      	cbz	r0, 811247c <__swsetup_r+0x14>
 8112474:	6a03      	ldr	r3, [r0, #32]
 8112476:	b90b      	cbnz	r3, 811247c <__swsetup_r+0x14>
 8112478:	f7ff ff0c 	bl	8112294 <__sinit>
 811247c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112480:	0719      	lsls	r1, r3, #28
 8112482:	d422      	bmi.n	81124ca <__swsetup_r+0x62>
 8112484:	06da      	lsls	r2, r3, #27
 8112486:	d407      	bmi.n	8112498 <__swsetup_r+0x30>
 8112488:	2209      	movs	r2, #9
 811248a:	602a      	str	r2, [r5, #0]
 811248c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112490:	81a3      	strh	r3, [r4, #12]
 8112492:	f04f 30ff 	mov.w	r0, #4294967295
 8112496:	e033      	b.n	8112500 <__swsetup_r+0x98>
 8112498:	0758      	lsls	r0, r3, #29
 811249a:	d512      	bpl.n	81124c2 <__swsetup_r+0x5a>
 811249c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811249e:	b141      	cbz	r1, 81124b2 <__swsetup_r+0x4a>
 81124a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81124a4:	4299      	cmp	r1, r3
 81124a6:	d002      	beq.n	81124ae <__swsetup_r+0x46>
 81124a8:	4628      	mov	r0, r5
 81124aa:	f000 ff31 	bl	8113310 <_free_r>
 81124ae:	2300      	movs	r3, #0
 81124b0:	6363      	str	r3, [r4, #52]	@ 0x34
 81124b2:	89a3      	ldrh	r3, [r4, #12]
 81124b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 81124b8:	81a3      	strh	r3, [r4, #12]
 81124ba:	2300      	movs	r3, #0
 81124bc:	6063      	str	r3, [r4, #4]
 81124be:	6923      	ldr	r3, [r4, #16]
 81124c0:	6023      	str	r3, [r4, #0]
 81124c2:	89a3      	ldrh	r3, [r4, #12]
 81124c4:	f043 0308 	orr.w	r3, r3, #8
 81124c8:	81a3      	strh	r3, [r4, #12]
 81124ca:	6923      	ldr	r3, [r4, #16]
 81124cc:	b94b      	cbnz	r3, 81124e2 <__swsetup_r+0x7a>
 81124ce:	89a3      	ldrh	r3, [r4, #12]
 81124d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81124d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81124d8:	d003      	beq.n	81124e2 <__swsetup_r+0x7a>
 81124da:	4621      	mov	r1, r4
 81124dc:	4628      	mov	r0, r5
 81124de:	f002 fecb 	bl	8115278 <__smakebuf_r>
 81124e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81124e6:	f013 0201 	ands.w	r2, r3, #1
 81124ea:	d00a      	beq.n	8112502 <__swsetup_r+0x9a>
 81124ec:	2200      	movs	r2, #0
 81124ee:	60a2      	str	r2, [r4, #8]
 81124f0:	6962      	ldr	r2, [r4, #20]
 81124f2:	4252      	negs	r2, r2
 81124f4:	61a2      	str	r2, [r4, #24]
 81124f6:	6922      	ldr	r2, [r4, #16]
 81124f8:	b942      	cbnz	r2, 811250c <__swsetup_r+0xa4>
 81124fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 81124fe:	d1c5      	bne.n	811248c <__swsetup_r+0x24>
 8112500:	bd38      	pop	{r3, r4, r5, pc}
 8112502:	0799      	lsls	r1, r3, #30
 8112504:	bf58      	it	pl
 8112506:	6962      	ldrpl	r2, [r4, #20]
 8112508:	60a2      	str	r2, [r4, #8]
 811250a:	e7f4      	b.n	81124f6 <__swsetup_r+0x8e>
 811250c:	2000      	movs	r0, #0
 811250e:	e7f7      	b.n	8112500 <__swsetup_r+0x98>
 8112510:	100000b0 	.word	0x100000b0

08112514 <memset>:
 8112514:	4402      	add	r2, r0
 8112516:	4603      	mov	r3, r0
 8112518:	4293      	cmp	r3, r2
 811251a:	d100      	bne.n	811251e <memset+0xa>
 811251c:	4770      	bx	lr
 811251e:	f803 1b01 	strb.w	r1, [r3], #1
 8112522:	e7f9      	b.n	8112518 <memset+0x4>

08112524 <_localeconv_r>:
 8112524:	4800      	ldr	r0, [pc, #0]	@ (8112528 <_localeconv_r+0x4>)
 8112526:	4770      	bx	lr
 8112528:	100001f0 	.word	0x100001f0

0811252c <_close_r>:
 811252c:	b538      	push	{r3, r4, r5, lr}
 811252e:	4d06      	ldr	r5, [pc, #24]	@ (8112548 <_close_r+0x1c>)
 8112530:	2300      	movs	r3, #0
 8112532:	4604      	mov	r4, r0
 8112534:	4608      	mov	r0, r1
 8112536:	602b      	str	r3, [r5, #0]
 8112538:	f7f2 faae 	bl	8104a98 <_close>
 811253c:	1c43      	adds	r3, r0, #1
 811253e:	d102      	bne.n	8112546 <_close_r+0x1a>
 8112540:	682b      	ldr	r3, [r5, #0]
 8112542:	b103      	cbz	r3, 8112546 <_close_r+0x1a>
 8112544:	6023      	str	r3, [r4, #0]
 8112546:	bd38      	pop	{r3, r4, r5, pc}
 8112548:	1000d4c0 	.word	0x1000d4c0

0811254c <_lseek_r>:
 811254c:	b538      	push	{r3, r4, r5, lr}
 811254e:	4d07      	ldr	r5, [pc, #28]	@ (811256c <_lseek_r+0x20>)
 8112550:	4604      	mov	r4, r0
 8112552:	4608      	mov	r0, r1
 8112554:	4611      	mov	r1, r2
 8112556:	2200      	movs	r2, #0
 8112558:	602a      	str	r2, [r5, #0]
 811255a:	461a      	mov	r2, r3
 811255c:	f7f2 fac3 	bl	8104ae6 <_lseek>
 8112560:	1c43      	adds	r3, r0, #1
 8112562:	d102      	bne.n	811256a <_lseek_r+0x1e>
 8112564:	682b      	ldr	r3, [r5, #0]
 8112566:	b103      	cbz	r3, 811256a <_lseek_r+0x1e>
 8112568:	6023      	str	r3, [r4, #0]
 811256a:	bd38      	pop	{r3, r4, r5, pc}
 811256c:	1000d4c0 	.word	0x1000d4c0

08112570 <_read_r>:
 8112570:	b538      	push	{r3, r4, r5, lr}
 8112572:	4d07      	ldr	r5, [pc, #28]	@ (8112590 <_read_r+0x20>)
 8112574:	4604      	mov	r4, r0
 8112576:	4608      	mov	r0, r1
 8112578:	4611      	mov	r1, r2
 811257a:	2200      	movs	r2, #0
 811257c:	602a      	str	r2, [r5, #0]
 811257e:	461a      	mov	r2, r3
 8112580:	f7f2 fa6b 	bl	8104a5a <_read>
 8112584:	1c43      	adds	r3, r0, #1
 8112586:	d102      	bne.n	811258e <_read_r+0x1e>
 8112588:	682b      	ldr	r3, [r5, #0]
 811258a:	b103      	cbz	r3, 811258e <_read_r+0x1e>
 811258c:	6023      	str	r3, [r4, #0]
 811258e:	bd38      	pop	{r3, r4, r5, pc}
 8112590:	1000d4c0 	.word	0x1000d4c0

08112594 <_write_r>:
 8112594:	b538      	push	{r3, r4, r5, lr}
 8112596:	4d07      	ldr	r5, [pc, #28]	@ (81125b4 <_write_r+0x20>)
 8112598:	4604      	mov	r4, r0
 811259a:	4608      	mov	r0, r1
 811259c:	4611      	mov	r1, r2
 811259e:	2200      	movs	r2, #0
 81125a0:	602a      	str	r2, [r5, #0]
 81125a2:	461a      	mov	r2, r3
 81125a4:	f7f1 fd90 	bl	81040c8 <_write>
 81125a8:	1c43      	adds	r3, r0, #1
 81125aa:	d102      	bne.n	81125b2 <_write_r+0x1e>
 81125ac:	682b      	ldr	r3, [r5, #0]
 81125ae:	b103      	cbz	r3, 81125b2 <_write_r+0x1e>
 81125b0:	6023      	str	r3, [r4, #0]
 81125b2:	bd38      	pop	{r3, r4, r5, pc}
 81125b4:	1000d4c0 	.word	0x1000d4c0

081125b8 <__errno>:
 81125b8:	4b01      	ldr	r3, [pc, #4]	@ (81125c0 <__errno+0x8>)
 81125ba:	6818      	ldr	r0, [r3, #0]
 81125bc:	4770      	bx	lr
 81125be:	bf00      	nop
 81125c0:	100000b0 	.word	0x100000b0

081125c4 <__libc_init_array>:
 81125c4:	b570      	push	{r4, r5, r6, lr}
 81125c6:	4d0d      	ldr	r5, [pc, #52]	@ (81125fc <__libc_init_array+0x38>)
 81125c8:	4c0d      	ldr	r4, [pc, #52]	@ (8112600 <__libc_init_array+0x3c>)
 81125ca:	1b64      	subs	r4, r4, r5
 81125cc:	10a4      	asrs	r4, r4, #2
 81125ce:	2600      	movs	r6, #0
 81125d0:	42a6      	cmp	r6, r4
 81125d2:	d109      	bne.n	81125e8 <__libc_init_array+0x24>
 81125d4:	4d0b      	ldr	r5, [pc, #44]	@ (8112604 <__libc_init_array+0x40>)
 81125d6:	4c0c      	ldr	r4, [pc, #48]	@ (8112608 <__libc_init_array+0x44>)
 81125d8:	f003 fade 	bl	8115b98 <_init>
 81125dc:	1b64      	subs	r4, r4, r5
 81125de:	10a4      	asrs	r4, r4, #2
 81125e0:	2600      	movs	r6, #0
 81125e2:	42a6      	cmp	r6, r4
 81125e4:	d105      	bne.n	81125f2 <__libc_init_array+0x2e>
 81125e6:	bd70      	pop	{r4, r5, r6, pc}
 81125e8:	f855 3b04 	ldr.w	r3, [r5], #4
 81125ec:	4798      	blx	r3
 81125ee:	3601      	adds	r6, #1
 81125f0:	e7ee      	b.n	81125d0 <__libc_init_array+0xc>
 81125f2:	f855 3b04 	ldr.w	r3, [r5], #4
 81125f6:	4798      	blx	r3
 81125f8:	3601      	adds	r6, #1
 81125fa:	e7f2      	b.n	81125e2 <__libc_init_array+0x1e>
 81125fc:	0811612c 	.word	0x0811612c
 8112600:	0811612c 	.word	0x0811612c
 8112604:	0811612c 	.word	0x0811612c
 8112608:	08116130 	.word	0x08116130

0811260c <__retarget_lock_init_recursive>:
 811260c:	4770      	bx	lr

0811260e <__retarget_lock_acquire_recursive>:
 811260e:	4770      	bx	lr

08112610 <__retarget_lock_release_recursive>:
 8112610:	4770      	bx	lr

08112612 <memcpy>:
 8112612:	440a      	add	r2, r1
 8112614:	4291      	cmp	r1, r2
 8112616:	f100 33ff 	add.w	r3, r0, #4294967295
 811261a:	d100      	bne.n	811261e <memcpy+0xc>
 811261c:	4770      	bx	lr
 811261e:	b510      	push	{r4, lr}
 8112620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8112624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8112628:	4291      	cmp	r1, r2
 811262a:	d1f9      	bne.n	8112620 <memcpy+0xe>
 811262c:	bd10      	pop	{r4, pc}
	...

08112630 <nanf>:
 8112630:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8112638 <nanf+0x8>
 8112634:	4770      	bx	lr
 8112636:	bf00      	nop
 8112638:	7fc00000 	.word	0x7fc00000

0811263c <__assert_func>:
 811263c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811263e:	4614      	mov	r4, r2
 8112640:	461a      	mov	r2, r3
 8112642:	4b09      	ldr	r3, [pc, #36]	@ (8112668 <__assert_func+0x2c>)
 8112644:	681b      	ldr	r3, [r3, #0]
 8112646:	4605      	mov	r5, r0
 8112648:	68d8      	ldr	r0, [r3, #12]
 811264a:	b954      	cbnz	r4, 8112662 <__assert_func+0x26>
 811264c:	4b07      	ldr	r3, [pc, #28]	@ (811266c <__assert_func+0x30>)
 811264e:	461c      	mov	r4, r3
 8112650:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8112654:	9100      	str	r1, [sp, #0]
 8112656:	462b      	mov	r3, r5
 8112658:	4905      	ldr	r1, [pc, #20]	@ (8112670 <__assert_func+0x34>)
 811265a:	f002 fdd5 	bl	8115208 <fiprintf>
 811265e:	f002 feaf 	bl	81153c0 <abort>
 8112662:	4b04      	ldr	r3, [pc, #16]	@ (8112674 <__assert_func+0x38>)
 8112664:	e7f4      	b.n	8112650 <__assert_func+0x14>
 8112666:	bf00      	nop
 8112668:	100000b0 	.word	0x100000b0
 811266c:	08115d83 	.word	0x08115d83
 8112670:	08115d55 	.word	0x08115d55
 8112674:	08115d48 	.word	0x08115d48

08112678 <quorem>:
 8112678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811267c:	6903      	ldr	r3, [r0, #16]
 811267e:	690c      	ldr	r4, [r1, #16]
 8112680:	42a3      	cmp	r3, r4
 8112682:	4607      	mov	r7, r0
 8112684:	db7e      	blt.n	8112784 <quorem+0x10c>
 8112686:	3c01      	subs	r4, #1
 8112688:	f101 0814 	add.w	r8, r1, #20
 811268c:	00a3      	lsls	r3, r4, #2
 811268e:	f100 0514 	add.w	r5, r0, #20
 8112692:	9300      	str	r3, [sp, #0]
 8112694:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8112698:	9301      	str	r3, [sp, #4]
 811269a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 811269e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81126a2:	3301      	adds	r3, #1
 81126a4:	429a      	cmp	r2, r3
 81126a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81126aa:	fbb2 f6f3 	udiv	r6, r2, r3
 81126ae:	d32e      	bcc.n	811270e <quorem+0x96>
 81126b0:	f04f 0a00 	mov.w	sl, #0
 81126b4:	46c4      	mov	ip, r8
 81126b6:	46ae      	mov	lr, r5
 81126b8:	46d3      	mov	fp, sl
 81126ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 81126be:	b298      	uxth	r0, r3
 81126c0:	fb06 a000 	mla	r0, r6, r0, sl
 81126c4:	0c02      	lsrs	r2, r0, #16
 81126c6:	0c1b      	lsrs	r3, r3, #16
 81126c8:	fb06 2303 	mla	r3, r6, r3, r2
 81126cc:	f8de 2000 	ldr.w	r2, [lr]
 81126d0:	b280      	uxth	r0, r0
 81126d2:	b292      	uxth	r2, r2
 81126d4:	1a12      	subs	r2, r2, r0
 81126d6:	445a      	add	r2, fp
 81126d8:	f8de 0000 	ldr.w	r0, [lr]
 81126dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81126e0:	b29b      	uxth	r3, r3
 81126e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 81126e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 81126ea:	b292      	uxth	r2, r2
 81126ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 81126f0:	45e1      	cmp	r9, ip
 81126f2:	f84e 2b04 	str.w	r2, [lr], #4
 81126f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 81126fa:	d2de      	bcs.n	81126ba <quorem+0x42>
 81126fc:	9b00      	ldr	r3, [sp, #0]
 81126fe:	58eb      	ldr	r3, [r5, r3]
 8112700:	b92b      	cbnz	r3, 811270e <quorem+0x96>
 8112702:	9b01      	ldr	r3, [sp, #4]
 8112704:	3b04      	subs	r3, #4
 8112706:	429d      	cmp	r5, r3
 8112708:	461a      	mov	r2, r3
 811270a:	d32f      	bcc.n	811276c <quorem+0xf4>
 811270c:	613c      	str	r4, [r7, #16]
 811270e:	4638      	mov	r0, r7
 8112710:	f001 f9c2 	bl	8113a98 <__mcmp>
 8112714:	2800      	cmp	r0, #0
 8112716:	db25      	blt.n	8112764 <quorem+0xec>
 8112718:	4629      	mov	r1, r5
 811271a:	2000      	movs	r0, #0
 811271c:	f858 2b04 	ldr.w	r2, [r8], #4
 8112720:	f8d1 c000 	ldr.w	ip, [r1]
 8112724:	fa1f fe82 	uxth.w	lr, r2
 8112728:	fa1f f38c 	uxth.w	r3, ip
 811272c:	eba3 030e 	sub.w	r3, r3, lr
 8112730:	4403      	add	r3, r0
 8112732:	0c12      	lsrs	r2, r2, #16
 8112734:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8112738:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 811273c:	b29b      	uxth	r3, r3
 811273e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8112742:	45c1      	cmp	r9, r8
 8112744:	f841 3b04 	str.w	r3, [r1], #4
 8112748:	ea4f 4022 	mov.w	r0, r2, asr #16
 811274c:	d2e6      	bcs.n	811271c <quorem+0xa4>
 811274e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8112752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8112756:	b922      	cbnz	r2, 8112762 <quorem+0xea>
 8112758:	3b04      	subs	r3, #4
 811275a:	429d      	cmp	r5, r3
 811275c:	461a      	mov	r2, r3
 811275e:	d30b      	bcc.n	8112778 <quorem+0x100>
 8112760:	613c      	str	r4, [r7, #16]
 8112762:	3601      	adds	r6, #1
 8112764:	4630      	mov	r0, r6
 8112766:	b003      	add	sp, #12
 8112768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811276c:	6812      	ldr	r2, [r2, #0]
 811276e:	3b04      	subs	r3, #4
 8112770:	2a00      	cmp	r2, #0
 8112772:	d1cb      	bne.n	811270c <quorem+0x94>
 8112774:	3c01      	subs	r4, #1
 8112776:	e7c6      	b.n	8112706 <quorem+0x8e>
 8112778:	6812      	ldr	r2, [r2, #0]
 811277a:	3b04      	subs	r3, #4
 811277c:	2a00      	cmp	r2, #0
 811277e:	d1ef      	bne.n	8112760 <quorem+0xe8>
 8112780:	3c01      	subs	r4, #1
 8112782:	e7ea      	b.n	811275a <quorem+0xe2>
 8112784:	2000      	movs	r0, #0
 8112786:	e7ee      	b.n	8112766 <quorem+0xee>

08112788 <_dtoa_r>:
 8112788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811278c:	69c7      	ldr	r7, [r0, #28]
 811278e:	b099      	sub	sp, #100	@ 0x64
 8112790:	ed8d 0b02 	vstr	d0, [sp, #8]
 8112794:	ec55 4b10 	vmov	r4, r5, d0
 8112798:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 811279a:	9109      	str	r1, [sp, #36]	@ 0x24
 811279c:	4683      	mov	fp, r0
 811279e:	920e      	str	r2, [sp, #56]	@ 0x38
 81127a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 81127a2:	b97f      	cbnz	r7, 81127c4 <_dtoa_r+0x3c>
 81127a4:	2010      	movs	r0, #16
 81127a6:	f000 fdfd 	bl	81133a4 <malloc>
 81127aa:	4602      	mov	r2, r0
 81127ac:	f8cb 001c 	str.w	r0, [fp, #28]
 81127b0:	b920      	cbnz	r0, 81127bc <_dtoa_r+0x34>
 81127b2:	4ba7      	ldr	r3, [pc, #668]	@ (8112a50 <_dtoa_r+0x2c8>)
 81127b4:	21ef      	movs	r1, #239	@ 0xef
 81127b6:	48a7      	ldr	r0, [pc, #668]	@ (8112a54 <_dtoa_r+0x2cc>)
 81127b8:	f7ff ff40 	bl	811263c <__assert_func>
 81127bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 81127c0:	6007      	str	r7, [r0, #0]
 81127c2:	60c7      	str	r7, [r0, #12]
 81127c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 81127c8:	6819      	ldr	r1, [r3, #0]
 81127ca:	b159      	cbz	r1, 81127e4 <_dtoa_r+0x5c>
 81127cc:	685a      	ldr	r2, [r3, #4]
 81127ce:	604a      	str	r2, [r1, #4]
 81127d0:	2301      	movs	r3, #1
 81127d2:	4093      	lsls	r3, r2
 81127d4:	608b      	str	r3, [r1, #8]
 81127d6:	4658      	mov	r0, fp
 81127d8:	f000 feda 	bl	8113590 <_Bfree>
 81127dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 81127e0:	2200      	movs	r2, #0
 81127e2:	601a      	str	r2, [r3, #0]
 81127e4:	1e2b      	subs	r3, r5, #0
 81127e6:	bfb9      	ittee	lt
 81127e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 81127ec:	9303      	strlt	r3, [sp, #12]
 81127ee:	2300      	movge	r3, #0
 81127f0:	6033      	strge	r3, [r6, #0]
 81127f2:	9f03      	ldr	r7, [sp, #12]
 81127f4:	4b98      	ldr	r3, [pc, #608]	@ (8112a58 <_dtoa_r+0x2d0>)
 81127f6:	bfbc      	itt	lt
 81127f8:	2201      	movlt	r2, #1
 81127fa:	6032      	strlt	r2, [r6, #0]
 81127fc:	43bb      	bics	r3, r7
 81127fe:	d112      	bne.n	8112826 <_dtoa_r+0x9e>
 8112800:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8112802:	f242 730f 	movw	r3, #9999	@ 0x270f
 8112806:	6013      	str	r3, [r2, #0]
 8112808:	f3c7 0313 	ubfx	r3, r7, #0, #20
 811280c:	4323      	orrs	r3, r4
 811280e:	f000 854d 	beq.w	81132ac <_dtoa_r+0xb24>
 8112812:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8112814:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8112a6c <_dtoa_r+0x2e4>
 8112818:	2b00      	cmp	r3, #0
 811281a:	f000 854f 	beq.w	81132bc <_dtoa_r+0xb34>
 811281e:	f10a 0303 	add.w	r3, sl, #3
 8112822:	f000 bd49 	b.w	81132b8 <_dtoa_r+0xb30>
 8112826:	ed9d 7b02 	vldr	d7, [sp, #8]
 811282a:	2200      	movs	r2, #0
 811282c:	ec51 0b17 	vmov	r0, r1, d7
 8112830:	2300      	movs	r3, #0
 8112832:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8112836:	f7ee f9cf 	bl	8100bd8 <__aeabi_dcmpeq>
 811283a:	4680      	mov	r8, r0
 811283c:	b158      	cbz	r0, 8112856 <_dtoa_r+0xce>
 811283e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8112840:	2301      	movs	r3, #1
 8112842:	6013      	str	r3, [r2, #0]
 8112844:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8112846:	b113      	cbz	r3, 811284e <_dtoa_r+0xc6>
 8112848:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 811284a:	4b84      	ldr	r3, [pc, #528]	@ (8112a5c <_dtoa_r+0x2d4>)
 811284c:	6013      	str	r3, [r2, #0]
 811284e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8112a70 <_dtoa_r+0x2e8>
 8112852:	f000 bd33 	b.w	81132bc <_dtoa_r+0xb34>
 8112856:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 811285a:	aa16      	add	r2, sp, #88	@ 0x58
 811285c:	a917      	add	r1, sp, #92	@ 0x5c
 811285e:	4658      	mov	r0, fp
 8112860:	f001 fa3a 	bl	8113cd8 <__d2b>
 8112864:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8112868:	4681      	mov	r9, r0
 811286a:	2e00      	cmp	r6, #0
 811286c:	d077      	beq.n	811295e <_dtoa_r+0x1d6>
 811286e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8112870:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8112874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811287c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8112880:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8112884:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8112888:	4619      	mov	r1, r3
 811288a:	2200      	movs	r2, #0
 811288c:	4b74      	ldr	r3, [pc, #464]	@ (8112a60 <_dtoa_r+0x2d8>)
 811288e:	f7ed fd83 	bl	8100398 <__aeabi_dsub>
 8112892:	a369      	add	r3, pc, #420	@ (adr r3, 8112a38 <_dtoa_r+0x2b0>)
 8112894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112898:	f7ed ff36 	bl	8100708 <__aeabi_dmul>
 811289c:	a368      	add	r3, pc, #416	@ (adr r3, 8112a40 <_dtoa_r+0x2b8>)
 811289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81128a2:	f7ed fd7b 	bl	810039c <__adddf3>
 81128a6:	4604      	mov	r4, r0
 81128a8:	4630      	mov	r0, r6
 81128aa:	460d      	mov	r5, r1
 81128ac:	f7ed fec2 	bl	8100634 <__aeabi_i2d>
 81128b0:	a365      	add	r3, pc, #404	@ (adr r3, 8112a48 <_dtoa_r+0x2c0>)
 81128b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81128b6:	f7ed ff27 	bl	8100708 <__aeabi_dmul>
 81128ba:	4602      	mov	r2, r0
 81128bc:	460b      	mov	r3, r1
 81128be:	4620      	mov	r0, r4
 81128c0:	4629      	mov	r1, r5
 81128c2:	f7ed fd6b 	bl	810039c <__adddf3>
 81128c6:	4604      	mov	r4, r0
 81128c8:	460d      	mov	r5, r1
 81128ca:	f7ee f9cd 	bl	8100c68 <__aeabi_d2iz>
 81128ce:	2200      	movs	r2, #0
 81128d0:	4607      	mov	r7, r0
 81128d2:	2300      	movs	r3, #0
 81128d4:	4620      	mov	r0, r4
 81128d6:	4629      	mov	r1, r5
 81128d8:	f7ee f988 	bl	8100bec <__aeabi_dcmplt>
 81128dc:	b140      	cbz	r0, 81128f0 <_dtoa_r+0x168>
 81128de:	4638      	mov	r0, r7
 81128e0:	f7ed fea8 	bl	8100634 <__aeabi_i2d>
 81128e4:	4622      	mov	r2, r4
 81128e6:	462b      	mov	r3, r5
 81128e8:	f7ee f976 	bl	8100bd8 <__aeabi_dcmpeq>
 81128ec:	b900      	cbnz	r0, 81128f0 <_dtoa_r+0x168>
 81128ee:	3f01      	subs	r7, #1
 81128f0:	2f16      	cmp	r7, #22
 81128f2:	d851      	bhi.n	8112998 <_dtoa_r+0x210>
 81128f4:	4b5b      	ldr	r3, [pc, #364]	@ (8112a64 <_dtoa_r+0x2dc>)
 81128f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81128fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81128fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112902:	f7ee f973 	bl	8100bec <__aeabi_dcmplt>
 8112906:	2800      	cmp	r0, #0
 8112908:	d048      	beq.n	811299c <_dtoa_r+0x214>
 811290a:	3f01      	subs	r7, #1
 811290c:	2300      	movs	r3, #0
 811290e:	9312      	str	r3, [sp, #72]	@ 0x48
 8112910:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8112912:	1b9b      	subs	r3, r3, r6
 8112914:	1e5a      	subs	r2, r3, #1
 8112916:	bf44      	itt	mi
 8112918:	f1c3 0801 	rsbmi	r8, r3, #1
 811291c:	2300      	movmi	r3, #0
 811291e:	9208      	str	r2, [sp, #32]
 8112920:	bf54      	ite	pl
 8112922:	f04f 0800 	movpl.w	r8, #0
 8112926:	9308      	strmi	r3, [sp, #32]
 8112928:	2f00      	cmp	r7, #0
 811292a:	db39      	blt.n	81129a0 <_dtoa_r+0x218>
 811292c:	9b08      	ldr	r3, [sp, #32]
 811292e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8112930:	443b      	add	r3, r7
 8112932:	9308      	str	r3, [sp, #32]
 8112934:	2300      	movs	r3, #0
 8112936:	930a      	str	r3, [sp, #40]	@ 0x28
 8112938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811293a:	2b09      	cmp	r3, #9
 811293c:	d864      	bhi.n	8112a08 <_dtoa_r+0x280>
 811293e:	2b05      	cmp	r3, #5
 8112940:	bfc4      	itt	gt
 8112942:	3b04      	subgt	r3, #4
 8112944:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8112946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112948:	f1a3 0302 	sub.w	r3, r3, #2
 811294c:	bfcc      	ite	gt
 811294e:	2400      	movgt	r4, #0
 8112950:	2401      	movle	r4, #1
 8112952:	2b03      	cmp	r3, #3
 8112954:	d863      	bhi.n	8112a1e <_dtoa_r+0x296>
 8112956:	e8df f003 	tbb	[pc, r3]
 811295a:	372a      	.short	0x372a
 811295c:	5535      	.short	0x5535
 811295e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8112962:	441e      	add	r6, r3
 8112964:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8112968:	2b20      	cmp	r3, #32
 811296a:	bfc1      	itttt	gt
 811296c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8112970:	409f      	lslgt	r7, r3
 8112972:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8112976:	fa24 f303 	lsrgt.w	r3, r4, r3
 811297a:	bfd6      	itet	le
 811297c:	f1c3 0320 	rsble	r3, r3, #32
 8112980:	ea47 0003 	orrgt.w	r0, r7, r3
 8112984:	fa04 f003 	lslle.w	r0, r4, r3
 8112988:	f7ed fe44 	bl	8100614 <__aeabi_ui2d>
 811298c:	2201      	movs	r2, #1
 811298e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8112992:	3e01      	subs	r6, #1
 8112994:	9214      	str	r2, [sp, #80]	@ 0x50
 8112996:	e777      	b.n	8112888 <_dtoa_r+0x100>
 8112998:	2301      	movs	r3, #1
 811299a:	e7b8      	b.n	811290e <_dtoa_r+0x186>
 811299c:	9012      	str	r0, [sp, #72]	@ 0x48
 811299e:	e7b7      	b.n	8112910 <_dtoa_r+0x188>
 81129a0:	427b      	negs	r3, r7
 81129a2:	930a      	str	r3, [sp, #40]	@ 0x28
 81129a4:	2300      	movs	r3, #0
 81129a6:	eba8 0807 	sub.w	r8, r8, r7
 81129aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 81129ac:	e7c4      	b.n	8112938 <_dtoa_r+0x1b0>
 81129ae:	2300      	movs	r3, #0
 81129b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 81129b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81129b4:	2b00      	cmp	r3, #0
 81129b6:	dc35      	bgt.n	8112a24 <_dtoa_r+0x29c>
 81129b8:	2301      	movs	r3, #1
 81129ba:	9300      	str	r3, [sp, #0]
 81129bc:	9307      	str	r3, [sp, #28]
 81129be:	461a      	mov	r2, r3
 81129c0:	920e      	str	r2, [sp, #56]	@ 0x38
 81129c2:	e00b      	b.n	81129dc <_dtoa_r+0x254>
 81129c4:	2301      	movs	r3, #1
 81129c6:	e7f3      	b.n	81129b0 <_dtoa_r+0x228>
 81129c8:	2300      	movs	r3, #0
 81129ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 81129cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81129ce:	18fb      	adds	r3, r7, r3
 81129d0:	9300      	str	r3, [sp, #0]
 81129d2:	3301      	adds	r3, #1
 81129d4:	2b01      	cmp	r3, #1
 81129d6:	9307      	str	r3, [sp, #28]
 81129d8:	bfb8      	it	lt
 81129da:	2301      	movlt	r3, #1
 81129dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 81129e0:	2100      	movs	r1, #0
 81129e2:	2204      	movs	r2, #4
 81129e4:	f102 0514 	add.w	r5, r2, #20
 81129e8:	429d      	cmp	r5, r3
 81129ea:	d91f      	bls.n	8112a2c <_dtoa_r+0x2a4>
 81129ec:	6041      	str	r1, [r0, #4]
 81129ee:	4658      	mov	r0, fp
 81129f0:	f000 fd8e 	bl	8113510 <_Balloc>
 81129f4:	4682      	mov	sl, r0
 81129f6:	2800      	cmp	r0, #0
 81129f8:	d13c      	bne.n	8112a74 <_dtoa_r+0x2ec>
 81129fa:	4b1b      	ldr	r3, [pc, #108]	@ (8112a68 <_dtoa_r+0x2e0>)
 81129fc:	4602      	mov	r2, r0
 81129fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8112a02:	e6d8      	b.n	81127b6 <_dtoa_r+0x2e>
 8112a04:	2301      	movs	r3, #1
 8112a06:	e7e0      	b.n	81129ca <_dtoa_r+0x242>
 8112a08:	2401      	movs	r4, #1
 8112a0a:	2300      	movs	r3, #0
 8112a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8112a0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8112a10:	f04f 33ff 	mov.w	r3, #4294967295
 8112a14:	9300      	str	r3, [sp, #0]
 8112a16:	9307      	str	r3, [sp, #28]
 8112a18:	2200      	movs	r2, #0
 8112a1a:	2312      	movs	r3, #18
 8112a1c:	e7d0      	b.n	81129c0 <_dtoa_r+0x238>
 8112a1e:	2301      	movs	r3, #1
 8112a20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8112a22:	e7f5      	b.n	8112a10 <_dtoa_r+0x288>
 8112a24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112a26:	9300      	str	r3, [sp, #0]
 8112a28:	9307      	str	r3, [sp, #28]
 8112a2a:	e7d7      	b.n	81129dc <_dtoa_r+0x254>
 8112a2c:	3101      	adds	r1, #1
 8112a2e:	0052      	lsls	r2, r2, #1
 8112a30:	e7d8      	b.n	81129e4 <_dtoa_r+0x25c>
 8112a32:	bf00      	nop
 8112a34:	f3af 8000 	nop.w
 8112a38:	636f4361 	.word	0x636f4361
 8112a3c:	3fd287a7 	.word	0x3fd287a7
 8112a40:	8b60c8b3 	.word	0x8b60c8b3
 8112a44:	3fc68a28 	.word	0x3fc68a28
 8112a48:	509f79fb 	.word	0x509f79fb
 8112a4c:	3fd34413 	.word	0x3fd34413
 8112a50:	08115ca0 	.word	0x08115ca0
 8112a54:	08115d91 	.word	0x08115d91
 8112a58:	7ff00000 	.word	0x7ff00000
 8112a5c:	08115d20 	.word	0x08115d20
 8112a60:	3ff80000 	.word	0x3ff80000
 8112a64:	08115e88 	.word	0x08115e88
 8112a68:	08115de9 	.word	0x08115de9
 8112a6c:	08115d8d 	.word	0x08115d8d
 8112a70:	08115d1f 	.word	0x08115d1f
 8112a74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8112a78:	6018      	str	r0, [r3, #0]
 8112a7a:	9b07      	ldr	r3, [sp, #28]
 8112a7c:	2b0e      	cmp	r3, #14
 8112a7e:	f200 80a4 	bhi.w	8112bca <_dtoa_r+0x442>
 8112a82:	2c00      	cmp	r4, #0
 8112a84:	f000 80a1 	beq.w	8112bca <_dtoa_r+0x442>
 8112a88:	2f00      	cmp	r7, #0
 8112a8a:	dd33      	ble.n	8112af4 <_dtoa_r+0x36c>
 8112a8c:	4bad      	ldr	r3, [pc, #692]	@ (8112d44 <_dtoa_r+0x5bc>)
 8112a8e:	f007 020f 	and.w	r2, r7, #15
 8112a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8112a96:	ed93 7b00 	vldr	d7, [r3]
 8112a9a:	05f8      	lsls	r0, r7, #23
 8112a9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8112aa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8112aa4:	d516      	bpl.n	8112ad4 <_dtoa_r+0x34c>
 8112aa6:	4ba8      	ldr	r3, [pc, #672]	@ (8112d48 <_dtoa_r+0x5c0>)
 8112aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8112ab0:	f7ed ff54 	bl	810095c <__aeabi_ddiv>
 8112ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112ab8:	f004 040f 	and.w	r4, r4, #15
 8112abc:	2603      	movs	r6, #3
 8112abe:	4da2      	ldr	r5, [pc, #648]	@ (8112d48 <_dtoa_r+0x5c0>)
 8112ac0:	b954      	cbnz	r4, 8112ad8 <_dtoa_r+0x350>
 8112ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8112ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112aca:	f7ed ff47 	bl	810095c <__aeabi_ddiv>
 8112ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112ad2:	e028      	b.n	8112b26 <_dtoa_r+0x39e>
 8112ad4:	2602      	movs	r6, #2
 8112ad6:	e7f2      	b.n	8112abe <_dtoa_r+0x336>
 8112ad8:	07e1      	lsls	r1, r4, #31
 8112ada:	d508      	bpl.n	8112aee <_dtoa_r+0x366>
 8112adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8112ae0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8112ae4:	f7ed fe10 	bl	8100708 <__aeabi_dmul>
 8112ae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8112aec:	3601      	adds	r6, #1
 8112aee:	1064      	asrs	r4, r4, #1
 8112af0:	3508      	adds	r5, #8
 8112af2:	e7e5      	b.n	8112ac0 <_dtoa_r+0x338>
 8112af4:	f000 80d2 	beq.w	8112c9c <_dtoa_r+0x514>
 8112af8:	427c      	negs	r4, r7
 8112afa:	4b92      	ldr	r3, [pc, #584]	@ (8112d44 <_dtoa_r+0x5bc>)
 8112afc:	4d92      	ldr	r5, [pc, #584]	@ (8112d48 <_dtoa_r+0x5c0>)
 8112afe:	f004 020f 	and.w	r2, r4, #15
 8112b02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8112b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112b0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112b0e:	f7ed fdfb 	bl	8100708 <__aeabi_dmul>
 8112b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112b16:	1124      	asrs	r4, r4, #4
 8112b18:	2300      	movs	r3, #0
 8112b1a:	2602      	movs	r6, #2
 8112b1c:	2c00      	cmp	r4, #0
 8112b1e:	f040 80b2 	bne.w	8112c86 <_dtoa_r+0x4fe>
 8112b22:	2b00      	cmp	r3, #0
 8112b24:	d1d3      	bne.n	8112ace <_dtoa_r+0x346>
 8112b26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8112b28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8112b2c:	2b00      	cmp	r3, #0
 8112b2e:	f000 80b7 	beq.w	8112ca0 <_dtoa_r+0x518>
 8112b32:	4b86      	ldr	r3, [pc, #536]	@ (8112d4c <_dtoa_r+0x5c4>)
 8112b34:	2200      	movs	r2, #0
 8112b36:	4620      	mov	r0, r4
 8112b38:	4629      	mov	r1, r5
 8112b3a:	f7ee f857 	bl	8100bec <__aeabi_dcmplt>
 8112b3e:	2800      	cmp	r0, #0
 8112b40:	f000 80ae 	beq.w	8112ca0 <_dtoa_r+0x518>
 8112b44:	9b07      	ldr	r3, [sp, #28]
 8112b46:	2b00      	cmp	r3, #0
 8112b48:	f000 80aa 	beq.w	8112ca0 <_dtoa_r+0x518>
 8112b4c:	9b00      	ldr	r3, [sp, #0]
 8112b4e:	2b00      	cmp	r3, #0
 8112b50:	dd37      	ble.n	8112bc2 <_dtoa_r+0x43a>
 8112b52:	1e7b      	subs	r3, r7, #1
 8112b54:	9304      	str	r3, [sp, #16]
 8112b56:	4620      	mov	r0, r4
 8112b58:	4b7d      	ldr	r3, [pc, #500]	@ (8112d50 <_dtoa_r+0x5c8>)
 8112b5a:	2200      	movs	r2, #0
 8112b5c:	4629      	mov	r1, r5
 8112b5e:	f7ed fdd3 	bl	8100708 <__aeabi_dmul>
 8112b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112b66:	9c00      	ldr	r4, [sp, #0]
 8112b68:	3601      	adds	r6, #1
 8112b6a:	4630      	mov	r0, r6
 8112b6c:	f7ed fd62 	bl	8100634 <__aeabi_i2d>
 8112b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112b74:	f7ed fdc8 	bl	8100708 <__aeabi_dmul>
 8112b78:	4b76      	ldr	r3, [pc, #472]	@ (8112d54 <_dtoa_r+0x5cc>)
 8112b7a:	2200      	movs	r2, #0
 8112b7c:	f7ed fc0e 	bl	810039c <__adddf3>
 8112b80:	4605      	mov	r5, r0
 8112b82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8112b86:	2c00      	cmp	r4, #0
 8112b88:	f040 808d 	bne.w	8112ca6 <_dtoa_r+0x51e>
 8112b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112b90:	4b71      	ldr	r3, [pc, #452]	@ (8112d58 <_dtoa_r+0x5d0>)
 8112b92:	2200      	movs	r2, #0
 8112b94:	f7ed fc00 	bl	8100398 <__aeabi_dsub>
 8112b98:	4602      	mov	r2, r0
 8112b9a:	460b      	mov	r3, r1
 8112b9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8112ba0:	462a      	mov	r2, r5
 8112ba2:	4633      	mov	r3, r6
 8112ba4:	f7ee f840 	bl	8100c28 <__aeabi_dcmpgt>
 8112ba8:	2800      	cmp	r0, #0
 8112baa:	f040 828b 	bne.w	81130c4 <_dtoa_r+0x93c>
 8112bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112bb2:	462a      	mov	r2, r5
 8112bb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8112bb8:	f7ee f818 	bl	8100bec <__aeabi_dcmplt>
 8112bbc:	2800      	cmp	r0, #0
 8112bbe:	f040 8128 	bne.w	8112e12 <_dtoa_r+0x68a>
 8112bc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8112bc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8112bca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8112bcc:	2b00      	cmp	r3, #0
 8112bce:	f2c0 815a 	blt.w	8112e86 <_dtoa_r+0x6fe>
 8112bd2:	2f0e      	cmp	r7, #14
 8112bd4:	f300 8157 	bgt.w	8112e86 <_dtoa_r+0x6fe>
 8112bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8112d44 <_dtoa_r+0x5bc>)
 8112bda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8112bde:	ed93 7b00 	vldr	d7, [r3]
 8112be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112be4:	2b00      	cmp	r3, #0
 8112be6:	ed8d 7b00 	vstr	d7, [sp]
 8112bea:	da03      	bge.n	8112bf4 <_dtoa_r+0x46c>
 8112bec:	9b07      	ldr	r3, [sp, #28]
 8112bee:	2b00      	cmp	r3, #0
 8112bf0:	f340 8101 	ble.w	8112df6 <_dtoa_r+0x66e>
 8112bf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8112bf8:	4656      	mov	r6, sl
 8112bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8112bfe:	4620      	mov	r0, r4
 8112c00:	4629      	mov	r1, r5
 8112c02:	f7ed feab 	bl	810095c <__aeabi_ddiv>
 8112c06:	f7ee f82f 	bl	8100c68 <__aeabi_d2iz>
 8112c0a:	4680      	mov	r8, r0
 8112c0c:	f7ed fd12 	bl	8100634 <__aeabi_i2d>
 8112c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8112c14:	f7ed fd78 	bl	8100708 <__aeabi_dmul>
 8112c18:	4602      	mov	r2, r0
 8112c1a:	460b      	mov	r3, r1
 8112c1c:	4620      	mov	r0, r4
 8112c1e:	4629      	mov	r1, r5
 8112c20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8112c24:	f7ed fbb8 	bl	8100398 <__aeabi_dsub>
 8112c28:	f806 4b01 	strb.w	r4, [r6], #1
 8112c2c:	9d07      	ldr	r5, [sp, #28]
 8112c2e:	eba6 040a 	sub.w	r4, r6, sl
 8112c32:	42a5      	cmp	r5, r4
 8112c34:	4602      	mov	r2, r0
 8112c36:	460b      	mov	r3, r1
 8112c38:	f040 8117 	bne.w	8112e6a <_dtoa_r+0x6e2>
 8112c3c:	f7ed fbae 	bl	810039c <__adddf3>
 8112c40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8112c44:	4604      	mov	r4, r0
 8112c46:	460d      	mov	r5, r1
 8112c48:	f7ed ffee 	bl	8100c28 <__aeabi_dcmpgt>
 8112c4c:	2800      	cmp	r0, #0
 8112c4e:	f040 80f9 	bne.w	8112e44 <_dtoa_r+0x6bc>
 8112c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8112c56:	4620      	mov	r0, r4
 8112c58:	4629      	mov	r1, r5
 8112c5a:	f7ed ffbd 	bl	8100bd8 <__aeabi_dcmpeq>
 8112c5e:	b118      	cbz	r0, 8112c68 <_dtoa_r+0x4e0>
 8112c60:	f018 0f01 	tst.w	r8, #1
 8112c64:	f040 80ee 	bne.w	8112e44 <_dtoa_r+0x6bc>
 8112c68:	4649      	mov	r1, r9
 8112c6a:	4658      	mov	r0, fp
 8112c6c:	f000 fc90 	bl	8113590 <_Bfree>
 8112c70:	2300      	movs	r3, #0
 8112c72:	7033      	strb	r3, [r6, #0]
 8112c74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8112c76:	3701      	adds	r7, #1
 8112c78:	601f      	str	r7, [r3, #0]
 8112c7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8112c7c:	2b00      	cmp	r3, #0
 8112c7e:	f000 831d 	beq.w	81132bc <_dtoa_r+0xb34>
 8112c82:	601e      	str	r6, [r3, #0]
 8112c84:	e31a      	b.n	81132bc <_dtoa_r+0xb34>
 8112c86:	07e2      	lsls	r2, r4, #31
 8112c88:	d505      	bpl.n	8112c96 <_dtoa_r+0x50e>
 8112c8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8112c8e:	f7ed fd3b 	bl	8100708 <__aeabi_dmul>
 8112c92:	3601      	adds	r6, #1
 8112c94:	2301      	movs	r3, #1
 8112c96:	1064      	asrs	r4, r4, #1
 8112c98:	3508      	adds	r5, #8
 8112c9a:	e73f      	b.n	8112b1c <_dtoa_r+0x394>
 8112c9c:	2602      	movs	r6, #2
 8112c9e:	e742      	b.n	8112b26 <_dtoa_r+0x39e>
 8112ca0:	9c07      	ldr	r4, [sp, #28]
 8112ca2:	9704      	str	r7, [sp, #16]
 8112ca4:	e761      	b.n	8112b6a <_dtoa_r+0x3e2>
 8112ca6:	4b27      	ldr	r3, [pc, #156]	@ (8112d44 <_dtoa_r+0x5bc>)
 8112ca8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8112caa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8112cae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8112cb2:	4454      	add	r4, sl
 8112cb4:	2900      	cmp	r1, #0
 8112cb6:	d053      	beq.n	8112d60 <_dtoa_r+0x5d8>
 8112cb8:	4928      	ldr	r1, [pc, #160]	@ (8112d5c <_dtoa_r+0x5d4>)
 8112cba:	2000      	movs	r0, #0
 8112cbc:	f7ed fe4e 	bl	810095c <__aeabi_ddiv>
 8112cc0:	4633      	mov	r3, r6
 8112cc2:	462a      	mov	r2, r5
 8112cc4:	f7ed fb68 	bl	8100398 <__aeabi_dsub>
 8112cc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8112ccc:	4656      	mov	r6, sl
 8112cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112cd2:	f7ed ffc9 	bl	8100c68 <__aeabi_d2iz>
 8112cd6:	4605      	mov	r5, r0
 8112cd8:	f7ed fcac 	bl	8100634 <__aeabi_i2d>
 8112cdc:	4602      	mov	r2, r0
 8112cde:	460b      	mov	r3, r1
 8112ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112ce4:	f7ed fb58 	bl	8100398 <__aeabi_dsub>
 8112ce8:	3530      	adds	r5, #48	@ 0x30
 8112cea:	4602      	mov	r2, r0
 8112cec:	460b      	mov	r3, r1
 8112cee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8112cf2:	f806 5b01 	strb.w	r5, [r6], #1
 8112cf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8112cfa:	f7ed ff77 	bl	8100bec <__aeabi_dcmplt>
 8112cfe:	2800      	cmp	r0, #0
 8112d00:	d171      	bne.n	8112de6 <_dtoa_r+0x65e>
 8112d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112d06:	4911      	ldr	r1, [pc, #68]	@ (8112d4c <_dtoa_r+0x5c4>)
 8112d08:	2000      	movs	r0, #0
 8112d0a:	f7ed fb45 	bl	8100398 <__aeabi_dsub>
 8112d0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8112d12:	f7ed ff6b 	bl	8100bec <__aeabi_dcmplt>
 8112d16:	2800      	cmp	r0, #0
 8112d18:	f040 8095 	bne.w	8112e46 <_dtoa_r+0x6be>
 8112d1c:	42a6      	cmp	r6, r4
 8112d1e:	f43f af50 	beq.w	8112bc2 <_dtoa_r+0x43a>
 8112d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8112d26:	4b0a      	ldr	r3, [pc, #40]	@ (8112d50 <_dtoa_r+0x5c8>)
 8112d28:	2200      	movs	r2, #0
 8112d2a:	f7ed fced 	bl	8100708 <__aeabi_dmul>
 8112d2e:	4b08      	ldr	r3, [pc, #32]	@ (8112d50 <_dtoa_r+0x5c8>)
 8112d30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8112d34:	2200      	movs	r2, #0
 8112d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112d3a:	f7ed fce5 	bl	8100708 <__aeabi_dmul>
 8112d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112d42:	e7c4      	b.n	8112cce <_dtoa_r+0x546>
 8112d44:	08115e88 	.word	0x08115e88
 8112d48:	08115e60 	.word	0x08115e60
 8112d4c:	3ff00000 	.word	0x3ff00000
 8112d50:	40240000 	.word	0x40240000
 8112d54:	401c0000 	.word	0x401c0000
 8112d58:	40140000 	.word	0x40140000
 8112d5c:	3fe00000 	.word	0x3fe00000
 8112d60:	4631      	mov	r1, r6
 8112d62:	4628      	mov	r0, r5
 8112d64:	f7ed fcd0 	bl	8100708 <__aeabi_dmul>
 8112d68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8112d6c:	9415      	str	r4, [sp, #84]	@ 0x54
 8112d6e:	4656      	mov	r6, sl
 8112d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112d74:	f7ed ff78 	bl	8100c68 <__aeabi_d2iz>
 8112d78:	4605      	mov	r5, r0
 8112d7a:	f7ed fc5b 	bl	8100634 <__aeabi_i2d>
 8112d7e:	4602      	mov	r2, r0
 8112d80:	460b      	mov	r3, r1
 8112d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112d86:	f7ed fb07 	bl	8100398 <__aeabi_dsub>
 8112d8a:	3530      	adds	r5, #48	@ 0x30
 8112d8c:	f806 5b01 	strb.w	r5, [r6], #1
 8112d90:	4602      	mov	r2, r0
 8112d92:	460b      	mov	r3, r1
 8112d94:	42a6      	cmp	r6, r4
 8112d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8112d9a:	f04f 0200 	mov.w	r2, #0
 8112d9e:	d124      	bne.n	8112dea <_dtoa_r+0x662>
 8112da0:	4bac      	ldr	r3, [pc, #688]	@ (8113054 <_dtoa_r+0x8cc>)
 8112da2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8112da6:	f7ed faf9 	bl	810039c <__adddf3>
 8112daa:	4602      	mov	r2, r0
 8112dac:	460b      	mov	r3, r1
 8112dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112db2:	f7ed ff39 	bl	8100c28 <__aeabi_dcmpgt>
 8112db6:	2800      	cmp	r0, #0
 8112db8:	d145      	bne.n	8112e46 <_dtoa_r+0x6be>
 8112dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8112dbe:	49a5      	ldr	r1, [pc, #660]	@ (8113054 <_dtoa_r+0x8cc>)
 8112dc0:	2000      	movs	r0, #0
 8112dc2:	f7ed fae9 	bl	8100398 <__aeabi_dsub>
 8112dc6:	4602      	mov	r2, r0
 8112dc8:	460b      	mov	r3, r1
 8112dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8112dce:	f7ed ff0d 	bl	8100bec <__aeabi_dcmplt>
 8112dd2:	2800      	cmp	r0, #0
 8112dd4:	f43f aef5 	beq.w	8112bc2 <_dtoa_r+0x43a>
 8112dd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8112dda:	1e73      	subs	r3, r6, #1
 8112ddc:	9315      	str	r3, [sp, #84]	@ 0x54
 8112dde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8112de2:	2b30      	cmp	r3, #48	@ 0x30
 8112de4:	d0f8      	beq.n	8112dd8 <_dtoa_r+0x650>
 8112de6:	9f04      	ldr	r7, [sp, #16]
 8112de8:	e73e      	b.n	8112c68 <_dtoa_r+0x4e0>
 8112dea:	4b9b      	ldr	r3, [pc, #620]	@ (8113058 <_dtoa_r+0x8d0>)
 8112dec:	f7ed fc8c 	bl	8100708 <__aeabi_dmul>
 8112df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8112df4:	e7bc      	b.n	8112d70 <_dtoa_r+0x5e8>
 8112df6:	d10c      	bne.n	8112e12 <_dtoa_r+0x68a>
 8112df8:	4b98      	ldr	r3, [pc, #608]	@ (811305c <_dtoa_r+0x8d4>)
 8112dfa:	2200      	movs	r2, #0
 8112dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8112e00:	f7ed fc82 	bl	8100708 <__aeabi_dmul>
 8112e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8112e08:	f7ed ff04 	bl	8100c14 <__aeabi_dcmpge>
 8112e0c:	2800      	cmp	r0, #0
 8112e0e:	f000 8157 	beq.w	81130c0 <_dtoa_r+0x938>
 8112e12:	2400      	movs	r4, #0
 8112e14:	4625      	mov	r5, r4
 8112e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112e18:	43db      	mvns	r3, r3
 8112e1a:	9304      	str	r3, [sp, #16]
 8112e1c:	4656      	mov	r6, sl
 8112e1e:	2700      	movs	r7, #0
 8112e20:	4621      	mov	r1, r4
 8112e22:	4658      	mov	r0, fp
 8112e24:	f000 fbb4 	bl	8113590 <_Bfree>
 8112e28:	2d00      	cmp	r5, #0
 8112e2a:	d0dc      	beq.n	8112de6 <_dtoa_r+0x65e>
 8112e2c:	b12f      	cbz	r7, 8112e3a <_dtoa_r+0x6b2>
 8112e2e:	42af      	cmp	r7, r5
 8112e30:	d003      	beq.n	8112e3a <_dtoa_r+0x6b2>
 8112e32:	4639      	mov	r1, r7
 8112e34:	4658      	mov	r0, fp
 8112e36:	f000 fbab 	bl	8113590 <_Bfree>
 8112e3a:	4629      	mov	r1, r5
 8112e3c:	4658      	mov	r0, fp
 8112e3e:	f000 fba7 	bl	8113590 <_Bfree>
 8112e42:	e7d0      	b.n	8112de6 <_dtoa_r+0x65e>
 8112e44:	9704      	str	r7, [sp, #16]
 8112e46:	4633      	mov	r3, r6
 8112e48:	461e      	mov	r6, r3
 8112e4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8112e4e:	2a39      	cmp	r2, #57	@ 0x39
 8112e50:	d107      	bne.n	8112e62 <_dtoa_r+0x6da>
 8112e52:	459a      	cmp	sl, r3
 8112e54:	d1f8      	bne.n	8112e48 <_dtoa_r+0x6c0>
 8112e56:	9a04      	ldr	r2, [sp, #16]
 8112e58:	3201      	adds	r2, #1
 8112e5a:	9204      	str	r2, [sp, #16]
 8112e5c:	2230      	movs	r2, #48	@ 0x30
 8112e5e:	f88a 2000 	strb.w	r2, [sl]
 8112e62:	781a      	ldrb	r2, [r3, #0]
 8112e64:	3201      	adds	r2, #1
 8112e66:	701a      	strb	r2, [r3, #0]
 8112e68:	e7bd      	b.n	8112de6 <_dtoa_r+0x65e>
 8112e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8113058 <_dtoa_r+0x8d0>)
 8112e6c:	2200      	movs	r2, #0
 8112e6e:	f7ed fc4b 	bl	8100708 <__aeabi_dmul>
 8112e72:	2200      	movs	r2, #0
 8112e74:	2300      	movs	r3, #0
 8112e76:	4604      	mov	r4, r0
 8112e78:	460d      	mov	r5, r1
 8112e7a:	f7ed fead 	bl	8100bd8 <__aeabi_dcmpeq>
 8112e7e:	2800      	cmp	r0, #0
 8112e80:	f43f aebb 	beq.w	8112bfa <_dtoa_r+0x472>
 8112e84:	e6f0      	b.n	8112c68 <_dtoa_r+0x4e0>
 8112e86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8112e88:	2a00      	cmp	r2, #0
 8112e8a:	f000 80db 	beq.w	8113044 <_dtoa_r+0x8bc>
 8112e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112e90:	2a01      	cmp	r2, #1
 8112e92:	f300 80bf 	bgt.w	8113014 <_dtoa_r+0x88c>
 8112e96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8112e98:	2a00      	cmp	r2, #0
 8112e9a:	f000 80b7 	beq.w	811300c <_dtoa_r+0x884>
 8112e9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8112ea2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8112ea4:	4646      	mov	r6, r8
 8112ea6:	9a08      	ldr	r2, [sp, #32]
 8112ea8:	2101      	movs	r1, #1
 8112eaa:	441a      	add	r2, r3
 8112eac:	4658      	mov	r0, fp
 8112eae:	4498      	add	r8, r3
 8112eb0:	9208      	str	r2, [sp, #32]
 8112eb2:	f000 fc6b 	bl	811378c <__i2b>
 8112eb6:	4605      	mov	r5, r0
 8112eb8:	b15e      	cbz	r6, 8112ed2 <_dtoa_r+0x74a>
 8112eba:	9b08      	ldr	r3, [sp, #32]
 8112ebc:	2b00      	cmp	r3, #0
 8112ebe:	dd08      	ble.n	8112ed2 <_dtoa_r+0x74a>
 8112ec0:	42b3      	cmp	r3, r6
 8112ec2:	9a08      	ldr	r2, [sp, #32]
 8112ec4:	bfa8      	it	ge
 8112ec6:	4633      	movge	r3, r6
 8112ec8:	eba8 0803 	sub.w	r8, r8, r3
 8112ecc:	1af6      	subs	r6, r6, r3
 8112ece:	1ad3      	subs	r3, r2, r3
 8112ed0:	9308      	str	r3, [sp, #32]
 8112ed2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112ed4:	b1f3      	cbz	r3, 8112f14 <_dtoa_r+0x78c>
 8112ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8112ed8:	2b00      	cmp	r3, #0
 8112eda:	f000 80b7 	beq.w	811304c <_dtoa_r+0x8c4>
 8112ede:	b18c      	cbz	r4, 8112f04 <_dtoa_r+0x77c>
 8112ee0:	4629      	mov	r1, r5
 8112ee2:	4622      	mov	r2, r4
 8112ee4:	4658      	mov	r0, fp
 8112ee6:	f000 fd11 	bl	811390c <__pow5mult>
 8112eea:	464a      	mov	r2, r9
 8112eec:	4601      	mov	r1, r0
 8112eee:	4605      	mov	r5, r0
 8112ef0:	4658      	mov	r0, fp
 8112ef2:	f000 fc61 	bl	81137b8 <__multiply>
 8112ef6:	4649      	mov	r1, r9
 8112ef8:	9004      	str	r0, [sp, #16]
 8112efa:	4658      	mov	r0, fp
 8112efc:	f000 fb48 	bl	8113590 <_Bfree>
 8112f00:	9b04      	ldr	r3, [sp, #16]
 8112f02:	4699      	mov	r9, r3
 8112f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112f06:	1b1a      	subs	r2, r3, r4
 8112f08:	d004      	beq.n	8112f14 <_dtoa_r+0x78c>
 8112f0a:	4649      	mov	r1, r9
 8112f0c:	4658      	mov	r0, fp
 8112f0e:	f000 fcfd 	bl	811390c <__pow5mult>
 8112f12:	4681      	mov	r9, r0
 8112f14:	2101      	movs	r1, #1
 8112f16:	4658      	mov	r0, fp
 8112f18:	f000 fc38 	bl	811378c <__i2b>
 8112f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112f1e:	4604      	mov	r4, r0
 8112f20:	2b00      	cmp	r3, #0
 8112f22:	f000 81cf 	beq.w	81132c4 <_dtoa_r+0xb3c>
 8112f26:	461a      	mov	r2, r3
 8112f28:	4601      	mov	r1, r0
 8112f2a:	4658      	mov	r0, fp
 8112f2c:	f000 fcee 	bl	811390c <__pow5mult>
 8112f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112f32:	2b01      	cmp	r3, #1
 8112f34:	4604      	mov	r4, r0
 8112f36:	f300 8095 	bgt.w	8113064 <_dtoa_r+0x8dc>
 8112f3a:	9b02      	ldr	r3, [sp, #8]
 8112f3c:	2b00      	cmp	r3, #0
 8112f3e:	f040 8087 	bne.w	8113050 <_dtoa_r+0x8c8>
 8112f42:	9b03      	ldr	r3, [sp, #12]
 8112f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112f48:	2b00      	cmp	r3, #0
 8112f4a:	f040 8089 	bne.w	8113060 <_dtoa_r+0x8d8>
 8112f4e:	9b03      	ldr	r3, [sp, #12]
 8112f50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8112f54:	0d1b      	lsrs	r3, r3, #20
 8112f56:	051b      	lsls	r3, r3, #20
 8112f58:	b12b      	cbz	r3, 8112f66 <_dtoa_r+0x7de>
 8112f5a:	9b08      	ldr	r3, [sp, #32]
 8112f5c:	3301      	adds	r3, #1
 8112f5e:	9308      	str	r3, [sp, #32]
 8112f60:	f108 0801 	add.w	r8, r8, #1
 8112f64:	2301      	movs	r3, #1
 8112f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8112f68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112f6a:	2b00      	cmp	r3, #0
 8112f6c:	f000 81b0 	beq.w	81132d0 <_dtoa_r+0xb48>
 8112f70:	6923      	ldr	r3, [r4, #16]
 8112f72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8112f76:	6918      	ldr	r0, [r3, #16]
 8112f78:	f000 fbbc 	bl	81136f4 <__hi0bits>
 8112f7c:	f1c0 0020 	rsb	r0, r0, #32
 8112f80:	9b08      	ldr	r3, [sp, #32]
 8112f82:	4418      	add	r0, r3
 8112f84:	f010 001f 	ands.w	r0, r0, #31
 8112f88:	d077      	beq.n	811307a <_dtoa_r+0x8f2>
 8112f8a:	f1c0 0320 	rsb	r3, r0, #32
 8112f8e:	2b04      	cmp	r3, #4
 8112f90:	dd6b      	ble.n	811306a <_dtoa_r+0x8e2>
 8112f92:	9b08      	ldr	r3, [sp, #32]
 8112f94:	f1c0 001c 	rsb	r0, r0, #28
 8112f98:	4403      	add	r3, r0
 8112f9a:	4480      	add	r8, r0
 8112f9c:	4406      	add	r6, r0
 8112f9e:	9308      	str	r3, [sp, #32]
 8112fa0:	f1b8 0f00 	cmp.w	r8, #0
 8112fa4:	dd05      	ble.n	8112fb2 <_dtoa_r+0x82a>
 8112fa6:	4649      	mov	r1, r9
 8112fa8:	4642      	mov	r2, r8
 8112faa:	4658      	mov	r0, fp
 8112fac:	f000 fd08 	bl	81139c0 <__lshift>
 8112fb0:	4681      	mov	r9, r0
 8112fb2:	9b08      	ldr	r3, [sp, #32]
 8112fb4:	2b00      	cmp	r3, #0
 8112fb6:	dd05      	ble.n	8112fc4 <_dtoa_r+0x83c>
 8112fb8:	4621      	mov	r1, r4
 8112fba:	461a      	mov	r2, r3
 8112fbc:	4658      	mov	r0, fp
 8112fbe:	f000 fcff 	bl	81139c0 <__lshift>
 8112fc2:	4604      	mov	r4, r0
 8112fc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8112fc6:	2b00      	cmp	r3, #0
 8112fc8:	d059      	beq.n	811307e <_dtoa_r+0x8f6>
 8112fca:	4621      	mov	r1, r4
 8112fcc:	4648      	mov	r0, r9
 8112fce:	f000 fd63 	bl	8113a98 <__mcmp>
 8112fd2:	2800      	cmp	r0, #0
 8112fd4:	da53      	bge.n	811307e <_dtoa_r+0x8f6>
 8112fd6:	1e7b      	subs	r3, r7, #1
 8112fd8:	9304      	str	r3, [sp, #16]
 8112fda:	4649      	mov	r1, r9
 8112fdc:	2300      	movs	r3, #0
 8112fde:	220a      	movs	r2, #10
 8112fe0:	4658      	mov	r0, fp
 8112fe2:	f000 faf7 	bl	81135d4 <__multadd>
 8112fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8112fe8:	4681      	mov	r9, r0
 8112fea:	2b00      	cmp	r3, #0
 8112fec:	f000 8172 	beq.w	81132d4 <_dtoa_r+0xb4c>
 8112ff0:	2300      	movs	r3, #0
 8112ff2:	4629      	mov	r1, r5
 8112ff4:	220a      	movs	r2, #10
 8112ff6:	4658      	mov	r0, fp
 8112ff8:	f000 faec 	bl	81135d4 <__multadd>
 8112ffc:	9b00      	ldr	r3, [sp, #0]
 8112ffe:	2b00      	cmp	r3, #0
 8113000:	4605      	mov	r5, r0
 8113002:	dc67      	bgt.n	81130d4 <_dtoa_r+0x94c>
 8113004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113006:	2b02      	cmp	r3, #2
 8113008:	dc41      	bgt.n	811308e <_dtoa_r+0x906>
 811300a:	e063      	b.n	81130d4 <_dtoa_r+0x94c>
 811300c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 811300e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8113012:	e746      	b.n	8112ea2 <_dtoa_r+0x71a>
 8113014:	9b07      	ldr	r3, [sp, #28]
 8113016:	1e5c      	subs	r4, r3, #1
 8113018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811301a:	42a3      	cmp	r3, r4
 811301c:	bfbf      	itttt	lt
 811301e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8113020:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8113022:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8113024:	1ae3      	sublt	r3, r4, r3
 8113026:	bfb4      	ite	lt
 8113028:	18d2      	addlt	r2, r2, r3
 811302a:	1b1c      	subge	r4, r3, r4
 811302c:	9b07      	ldr	r3, [sp, #28]
 811302e:	bfbc      	itt	lt
 8113030:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8113032:	2400      	movlt	r4, #0
 8113034:	2b00      	cmp	r3, #0
 8113036:	bfb5      	itete	lt
 8113038:	eba8 0603 	sublt.w	r6, r8, r3
 811303c:	9b07      	ldrge	r3, [sp, #28]
 811303e:	2300      	movlt	r3, #0
 8113040:	4646      	movge	r6, r8
 8113042:	e730      	b.n	8112ea6 <_dtoa_r+0x71e>
 8113044:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8113046:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8113048:	4646      	mov	r6, r8
 811304a:	e735      	b.n	8112eb8 <_dtoa_r+0x730>
 811304c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 811304e:	e75c      	b.n	8112f0a <_dtoa_r+0x782>
 8113050:	2300      	movs	r3, #0
 8113052:	e788      	b.n	8112f66 <_dtoa_r+0x7de>
 8113054:	3fe00000 	.word	0x3fe00000
 8113058:	40240000 	.word	0x40240000
 811305c:	40140000 	.word	0x40140000
 8113060:	9b02      	ldr	r3, [sp, #8]
 8113062:	e780      	b.n	8112f66 <_dtoa_r+0x7de>
 8113064:	2300      	movs	r3, #0
 8113066:	930a      	str	r3, [sp, #40]	@ 0x28
 8113068:	e782      	b.n	8112f70 <_dtoa_r+0x7e8>
 811306a:	d099      	beq.n	8112fa0 <_dtoa_r+0x818>
 811306c:	9a08      	ldr	r2, [sp, #32]
 811306e:	331c      	adds	r3, #28
 8113070:	441a      	add	r2, r3
 8113072:	4498      	add	r8, r3
 8113074:	441e      	add	r6, r3
 8113076:	9208      	str	r2, [sp, #32]
 8113078:	e792      	b.n	8112fa0 <_dtoa_r+0x818>
 811307a:	4603      	mov	r3, r0
 811307c:	e7f6      	b.n	811306c <_dtoa_r+0x8e4>
 811307e:	9b07      	ldr	r3, [sp, #28]
 8113080:	9704      	str	r7, [sp, #16]
 8113082:	2b00      	cmp	r3, #0
 8113084:	dc20      	bgt.n	81130c8 <_dtoa_r+0x940>
 8113086:	9300      	str	r3, [sp, #0]
 8113088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811308a:	2b02      	cmp	r3, #2
 811308c:	dd1e      	ble.n	81130cc <_dtoa_r+0x944>
 811308e:	9b00      	ldr	r3, [sp, #0]
 8113090:	2b00      	cmp	r3, #0
 8113092:	f47f aec0 	bne.w	8112e16 <_dtoa_r+0x68e>
 8113096:	4621      	mov	r1, r4
 8113098:	2205      	movs	r2, #5
 811309a:	4658      	mov	r0, fp
 811309c:	f000 fa9a 	bl	81135d4 <__multadd>
 81130a0:	4601      	mov	r1, r0
 81130a2:	4604      	mov	r4, r0
 81130a4:	4648      	mov	r0, r9
 81130a6:	f000 fcf7 	bl	8113a98 <__mcmp>
 81130aa:	2800      	cmp	r0, #0
 81130ac:	f77f aeb3 	ble.w	8112e16 <_dtoa_r+0x68e>
 81130b0:	4656      	mov	r6, sl
 81130b2:	2331      	movs	r3, #49	@ 0x31
 81130b4:	f806 3b01 	strb.w	r3, [r6], #1
 81130b8:	9b04      	ldr	r3, [sp, #16]
 81130ba:	3301      	adds	r3, #1
 81130bc:	9304      	str	r3, [sp, #16]
 81130be:	e6ae      	b.n	8112e1e <_dtoa_r+0x696>
 81130c0:	9c07      	ldr	r4, [sp, #28]
 81130c2:	9704      	str	r7, [sp, #16]
 81130c4:	4625      	mov	r5, r4
 81130c6:	e7f3      	b.n	81130b0 <_dtoa_r+0x928>
 81130c8:	9b07      	ldr	r3, [sp, #28]
 81130ca:	9300      	str	r3, [sp, #0]
 81130cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81130ce:	2b00      	cmp	r3, #0
 81130d0:	f000 8104 	beq.w	81132dc <_dtoa_r+0xb54>
 81130d4:	2e00      	cmp	r6, #0
 81130d6:	dd05      	ble.n	81130e4 <_dtoa_r+0x95c>
 81130d8:	4629      	mov	r1, r5
 81130da:	4632      	mov	r2, r6
 81130dc:	4658      	mov	r0, fp
 81130de:	f000 fc6f 	bl	81139c0 <__lshift>
 81130e2:	4605      	mov	r5, r0
 81130e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81130e6:	2b00      	cmp	r3, #0
 81130e8:	d05a      	beq.n	81131a0 <_dtoa_r+0xa18>
 81130ea:	6869      	ldr	r1, [r5, #4]
 81130ec:	4658      	mov	r0, fp
 81130ee:	f000 fa0f 	bl	8113510 <_Balloc>
 81130f2:	4606      	mov	r6, r0
 81130f4:	b928      	cbnz	r0, 8113102 <_dtoa_r+0x97a>
 81130f6:	4b84      	ldr	r3, [pc, #528]	@ (8113308 <_dtoa_r+0xb80>)
 81130f8:	4602      	mov	r2, r0
 81130fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 81130fe:	f7ff bb5a 	b.w	81127b6 <_dtoa_r+0x2e>
 8113102:	692a      	ldr	r2, [r5, #16]
 8113104:	3202      	adds	r2, #2
 8113106:	0092      	lsls	r2, r2, #2
 8113108:	f105 010c 	add.w	r1, r5, #12
 811310c:	300c      	adds	r0, #12
 811310e:	f7ff fa80 	bl	8112612 <memcpy>
 8113112:	2201      	movs	r2, #1
 8113114:	4631      	mov	r1, r6
 8113116:	4658      	mov	r0, fp
 8113118:	f000 fc52 	bl	81139c0 <__lshift>
 811311c:	f10a 0301 	add.w	r3, sl, #1
 8113120:	9307      	str	r3, [sp, #28]
 8113122:	9b00      	ldr	r3, [sp, #0]
 8113124:	4453      	add	r3, sl
 8113126:	930b      	str	r3, [sp, #44]	@ 0x2c
 8113128:	9b02      	ldr	r3, [sp, #8]
 811312a:	f003 0301 	and.w	r3, r3, #1
 811312e:	462f      	mov	r7, r5
 8113130:	930a      	str	r3, [sp, #40]	@ 0x28
 8113132:	4605      	mov	r5, r0
 8113134:	9b07      	ldr	r3, [sp, #28]
 8113136:	4621      	mov	r1, r4
 8113138:	3b01      	subs	r3, #1
 811313a:	4648      	mov	r0, r9
 811313c:	9300      	str	r3, [sp, #0]
 811313e:	f7ff fa9b 	bl	8112678 <quorem>
 8113142:	4639      	mov	r1, r7
 8113144:	9002      	str	r0, [sp, #8]
 8113146:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 811314a:	4648      	mov	r0, r9
 811314c:	f000 fca4 	bl	8113a98 <__mcmp>
 8113150:	462a      	mov	r2, r5
 8113152:	9008      	str	r0, [sp, #32]
 8113154:	4621      	mov	r1, r4
 8113156:	4658      	mov	r0, fp
 8113158:	f000 fcba 	bl	8113ad0 <__mdiff>
 811315c:	68c2      	ldr	r2, [r0, #12]
 811315e:	4606      	mov	r6, r0
 8113160:	bb02      	cbnz	r2, 81131a4 <_dtoa_r+0xa1c>
 8113162:	4601      	mov	r1, r0
 8113164:	4648      	mov	r0, r9
 8113166:	f000 fc97 	bl	8113a98 <__mcmp>
 811316a:	4602      	mov	r2, r0
 811316c:	4631      	mov	r1, r6
 811316e:	4658      	mov	r0, fp
 8113170:	920e      	str	r2, [sp, #56]	@ 0x38
 8113172:	f000 fa0d 	bl	8113590 <_Bfree>
 8113176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8113178:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811317a:	9e07      	ldr	r6, [sp, #28]
 811317c:	ea43 0102 	orr.w	r1, r3, r2
 8113180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8113182:	4319      	orrs	r1, r3
 8113184:	d110      	bne.n	81131a8 <_dtoa_r+0xa20>
 8113186:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 811318a:	d029      	beq.n	81131e0 <_dtoa_r+0xa58>
 811318c:	9b08      	ldr	r3, [sp, #32]
 811318e:	2b00      	cmp	r3, #0
 8113190:	dd02      	ble.n	8113198 <_dtoa_r+0xa10>
 8113192:	9b02      	ldr	r3, [sp, #8]
 8113194:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8113198:	9b00      	ldr	r3, [sp, #0]
 811319a:	f883 8000 	strb.w	r8, [r3]
 811319e:	e63f      	b.n	8112e20 <_dtoa_r+0x698>
 81131a0:	4628      	mov	r0, r5
 81131a2:	e7bb      	b.n	811311c <_dtoa_r+0x994>
 81131a4:	2201      	movs	r2, #1
 81131a6:	e7e1      	b.n	811316c <_dtoa_r+0x9e4>
 81131a8:	9b08      	ldr	r3, [sp, #32]
 81131aa:	2b00      	cmp	r3, #0
 81131ac:	db04      	blt.n	81131b8 <_dtoa_r+0xa30>
 81131ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81131b0:	430b      	orrs	r3, r1
 81131b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 81131b4:	430b      	orrs	r3, r1
 81131b6:	d120      	bne.n	81131fa <_dtoa_r+0xa72>
 81131b8:	2a00      	cmp	r2, #0
 81131ba:	dded      	ble.n	8113198 <_dtoa_r+0xa10>
 81131bc:	4649      	mov	r1, r9
 81131be:	2201      	movs	r2, #1
 81131c0:	4658      	mov	r0, fp
 81131c2:	f000 fbfd 	bl	81139c0 <__lshift>
 81131c6:	4621      	mov	r1, r4
 81131c8:	4681      	mov	r9, r0
 81131ca:	f000 fc65 	bl	8113a98 <__mcmp>
 81131ce:	2800      	cmp	r0, #0
 81131d0:	dc03      	bgt.n	81131da <_dtoa_r+0xa52>
 81131d2:	d1e1      	bne.n	8113198 <_dtoa_r+0xa10>
 81131d4:	f018 0f01 	tst.w	r8, #1
 81131d8:	d0de      	beq.n	8113198 <_dtoa_r+0xa10>
 81131da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 81131de:	d1d8      	bne.n	8113192 <_dtoa_r+0xa0a>
 81131e0:	9a00      	ldr	r2, [sp, #0]
 81131e2:	2339      	movs	r3, #57	@ 0x39
 81131e4:	7013      	strb	r3, [r2, #0]
 81131e6:	4633      	mov	r3, r6
 81131e8:	461e      	mov	r6, r3
 81131ea:	3b01      	subs	r3, #1
 81131ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 81131f0:	2a39      	cmp	r2, #57	@ 0x39
 81131f2:	d052      	beq.n	811329a <_dtoa_r+0xb12>
 81131f4:	3201      	adds	r2, #1
 81131f6:	701a      	strb	r2, [r3, #0]
 81131f8:	e612      	b.n	8112e20 <_dtoa_r+0x698>
 81131fa:	2a00      	cmp	r2, #0
 81131fc:	dd07      	ble.n	811320e <_dtoa_r+0xa86>
 81131fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8113202:	d0ed      	beq.n	81131e0 <_dtoa_r+0xa58>
 8113204:	9a00      	ldr	r2, [sp, #0]
 8113206:	f108 0301 	add.w	r3, r8, #1
 811320a:	7013      	strb	r3, [r2, #0]
 811320c:	e608      	b.n	8112e20 <_dtoa_r+0x698>
 811320e:	9b07      	ldr	r3, [sp, #28]
 8113210:	9a07      	ldr	r2, [sp, #28]
 8113212:	f803 8c01 	strb.w	r8, [r3, #-1]
 8113216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113218:	4293      	cmp	r3, r2
 811321a:	d028      	beq.n	811326e <_dtoa_r+0xae6>
 811321c:	4649      	mov	r1, r9
 811321e:	2300      	movs	r3, #0
 8113220:	220a      	movs	r2, #10
 8113222:	4658      	mov	r0, fp
 8113224:	f000 f9d6 	bl	81135d4 <__multadd>
 8113228:	42af      	cmp	r7, r5
 811322a:	4681      	mov	r9, r0
 811322c:	f04f 0300 	mov.w	r3, #0
 8113230:	f04f 020a 	mov.w	r2, #10
 8113234:	4639      	mov	r1, r7
 8113236:	4658      	mov	r0, fp
 8113238:	d107      	bne.n	811324a <_dtoa_r+0xac2>
 811323a:	f000 f9cb 	bl	81135d4 <__multadd>
 811323e:	4607      	mov	r7, r0
 8113240:	4605      	mov	r5, r0
 8113242:	9b07      	ldr	r3, [sp, #28]
 8113244:	3301      	adds	r3, #1
 8113246:	9307      	str	r3, [sp, #28]
 8113248:	e774      	b.n	8113134 <_dtoa_r+0x9ac>
 811324a:	f000 f9c3 	bl	81135d4 <__multadd>
 811324e:	4629      	mov	r1, r5
 8113250:	4607      	mov	r7, r0
 8113252:	2300      	movs	r3, #0
 8113254:	220a      	movs	r2, #10
 8113256:	4658      	mov	r0, fp
 8113258:	f000 f9bc 	bl	81135d4 <__multadd>
 811325c:	4605      	mov	r5, r0
 811325e:	e7f0      	b.n	8113242 <_dtoa_r+0xaba>
 8113260:	9b00      	ldr	r3, [sp, #0]
 8113262:	2b00      	cmp	r3, #0
 8113264:	bfcc      	ite	gt
 8113266:	461e      	movgt	r6, r3
 8113268:	2601      	movle	r6, #1
 811326a:	4456      	add	r6, sl
 811326c:	2700      	movs	r7, #0
 811326e:	4649      	mov	r1, r9
 8113270:	2201      	movs	r2, #1
 8113272:	4658      	mov	r0, fp
 8113274:	f000 fba4 	bl	81139c0 <__lshift>
 8113278:	4621      	mov	r1, r4
 811327a:	4681      	mov	r9, r0
 811327c:	f000 fc0c 	bl	8113a98 <__mcmp>
 8113280:	2800      	cmp	r0, #0
 8113282:	dcb0      	bgt.n	81131e6 <_dtoa_r+0xa5e>
 8113284:	d102      	bne.n	811328c <_dtoa_r+0xb04>
 8113286:	f018 0f01 	tst.w	r8, #1
 811328a:	d1ac      	bne.n	81131e6 <_dtoa_r+0xa5e>
 811328c:	4633      	mov	r3, r6
 811328e:	461e      	mov	r6, r3
 8113290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8113294:	2a30      	cmp	r2, #48	@ 0x30
 8113296:	d0fa      	beq.n	811328e <_dtoa_r+0xb06>
 8113298:	e5c2      	b.n	8112e20 <_dtoa_r+0x698>
 811329a:	459a      	cmp	sl, r3
 811329c:	d1a4      	bne.n	81131e8 <_dtoa_r+0xa60>
 811329e:	9b04      	ldr	r3, [sp, #16]
 81132a0:	3301      	adds	r3, #1
 81132a2:	9304      	str	r3, [sp, #16]
 81132a4:	2331      	movs	r3, #49	@ 0x31
 81132a6:	f88a 3000 	strb.w	r3, [sl]
 81132aa:	e5b9      	b.n	8112e20 <_dtoa_r+0x698>
 81132ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81132ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 811330c <_dtoa_r+0xb84>
 81132b2:	b11b      	cbz	r3, 81132bc <_dtoa_r+0xb34>
 81132b4:	f10a 0308 	add.w	r3, sl, #8
 81132b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 81132ba:	6013      	str	r3, [r2, #0]
 81132bc:	4650      	mov	r0, sl
 81132be:	b019      	add	sp, #100	@ 0x64
 81132c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81132c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81132c6:	2b01      	cmp	r3, #1
 81132c8:	f77f ae37 	ble.w	8112f3a <_dtoa_r+0x7b2>
 81132cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81132ce:	930a      	str	r3, [sp, #40]	@ 0x28
 81132d0:	2001      	movs	r0, #1
 81132d2:	e655      	b.n	8112f80 <_dtoa_r+0x7f8>
 81132d4:	9b00      	ldr	r3, [sp, #0]
 81132d6:	2b00      	cmp	r3, #0
 81132d8:	f77f aed6 	ble.w	8113088 <_dtoa_r+0x900>
 81132dc:	4656      	mov	r6, sl
 81132de:	4621      	mov	r1, r4
 81132e0:	4648      	mov	r0, r9
 81132e2:	f7ff f9c9 	bl	8112678 <quorem>
 81132e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 81132ea:	f806 8b01 	strb.w	r8, [r6], #1
 81132ee:	9b00      	ldr	r3, [sp, #0]
 81132f0:	eba6 020a 	sub.w	r2, r6, sl
 81132f4:	4293      	cmp	r3, r2
 81132f6:	ddb3      	ble.n	8113260 <_dtoa_r+0xad8>
 81132f8:	4649      	mov	r1, r9
 81132fa:	2300      	movs	r3, #0
 81132fc:	220a      	movs	r2, #10
 81132fe:	4658      	mov	r0, fp
 8113300:	f000 f968 	bl	81135d4 <__multadd>
 8113304:	4681      	mov	r9, r0
 8113306:	e7ea      	b.n	81132de <_dtoa_r+0xb56>
 8113308:	08115de9 	.word	0x08115de9
 811330c:	08115d84 	.word	0x08115d84

08113310 <_free_r>:
 8113310:	b538      	push	{r3, r4, r5, lr}
 8113312:	4605      	mov	r5, r0
 8113314:	2900      	cmp	r1, #0
 8113316:	d041      	beq.n	811339c <_free_r+0x8c>
 8113318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811331c:	1f0c      	subs	r4, r1, #4
 811331e:	2b00      	cmp	r3, #0
 8113320:	bfb8      	it	lt
 8113322:	18e4      	addlt	r4, r4, r3
 8113324:	f000 f8e8 	bl	81134f8 <__malloc_lock>
 8113328:	4a1d      	ldr	r2, [pc, #116]	@ (81133a0 <_free_r+0x90>)
 811332a:	6813      	ldr	r3, [r2, #0]
 811332c:	b933      	cbnz	r3, 811333c <_free_r+0x2c>
 811332e:	6063      	str	r3, [r4, #4]
 8113330:	6014      	str	r4, [r2, #0]
 8113332:	4628      	mov	r0, r5
 8113334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8113338:	f000 b8e4 	b.w	8113504 <__malloc_unlock>
 811333c:	42a3      	cmp	r3, r4
 811333e:	d908      	bls.n	8113352 <_free_r+0x42>
 8113340:	6820      	ldr	r0, [r4, #0]
 8113342:	1821      	adds	r1, r4, r0
 8113344:	428b      	cmp	r3, r1
 8113346:	bf01      	itttt	eq
 8113348:	6819      	ldreq	r1, [r3, #0]
 811334a:	685b      	ldreq	r3, [r3, #4]
 811334c:	1809      	addeq	r1, r1, r0
 811334e:	6021      	streq	r1, [r4, #0]
 8113350:	e7ed      	b.n	811332e <_free_r+0x1e>
 8113352:	461a      	mov	r2, r3
 8113354:	685b      	ldr	r3, [r3, #4]
 8113356:	b10b      	cbz	r3, 811335c <_free_r+0x4c>
 8113358:	42a3      	cmp	r3, r4
 811335a:	d9fa      	bls.n	8113352 <_free_r+0x42>
 811335c:	6811      	ldr	r1, [r2, #0]
 811335e:	1850      	adds	r0, r2, r1
 8113360:	42a0      	cmp	r0, r4
 8113362:	d10b      	bne.n	811337c <_free_r+0x6c>
 8113364:	6820      	ldr	r0, [r4, #0]
 8113366:	4401      	add	r1, r0
 8113368:	1850      	adds	r0, r2, r1
 811336a:	4283      	cmp	r3, r0
 811336c:	6011      	str	r1, [r2, #0]
 811336e:	d1e0      	bne.n	8113332 <_free_r+0x22>
 8113370:	6818      	ldr	r0, [r3, #0]
 8113372:	685b      	ldr	r3, [r3, #4]
 8113374:	6053      	str	r3, [r2, #4]
 8113376:	4408      	add	r0, r1
 8113378:	6010      	str	r0, [r2, #0]
 811337a:	e7da      	b.n	8113332 <_free_r+0x22>
 811337c:	d902      	bls.n	8113384 <_free_r+0x74>
 811337e:	230c      	movs	r3, #12
 8113380:	602b      	str	r3, [r5, #0]
 8113382:	e7d6      	b.n	8113332 <_free_r+0x22>
 8113384:	6820      	ldr	r0, [r4, #0]
 8113386:	1821      	adds	r1, r4, r0
 8113388:	428b      	cmp	r3, r1
 811338a:	bf04      	itt	eq
 811338c:	6819      	ldreq	r1, [r3, #0]
 811338e:	685b      	ldreq	r3, [r3, #4]
 8113390:	6063      	str	r3, [r4, #4]
 8113392:	bf04      	itt	eq
 8113394:	1809      	addeq	r1, r1, r0
 8113396:	6021      	streq	r1, [r4, #0]
 8113398:	6054      	str	r4, [r2, #4]
 811339a:	e7ca      	b.n	8113332 <_free_r+0x22>
 811339c:	bd38      	pop	{r3, r4, r5, pc}
 811339e:	bf00      	nop
 81133a0:	1000d4cc 	.word	0x1000d4cc

081133a4 <malloc>:
 81133a4:	4b02      	ldr	r3, [pc, #8]	@ (81133b0 <malloc+0xc>)
 81133a6:	4601      	mov	r1, r0
 81133a8:	6818      	ldr	r0, [r3, #0]
 81133aa:	f000 b825 	b.w	81133f8 <_malloc_r>
 81133ae:	bf00      	nop
 81133b0:	100000b0 	.word	0x100000b0

081133b4 <sbrk_aligned>:
 81133b4:	b570      	push	{r4, r5, r6, lr}
 81133b6:	4e0f      	ldr	r6, [pc, #60]	@ (81133f4 <sbrk_aligned+0x40>)
 81133b8:	460c      	mov	r4, r1
 81133ba:	6831      	ldr	r1, [r6, #0]
 81133bc:	4605      	mov	r5, r0
 81133be:	b911      	cbnz	r1, 81133c6 <sbrk_aligned+0x12>
 81133c0:	f001 ffe4 	bl	811538c <_sbrk_r>
 81133c4:	6030      	str	r0, [r6, #0]
 81133c6:	4621      	mov	r1, r4
 81133c8:	4628      	mov	r0, r5
 81133ca:	f001 ffdf 	bl	811538c <_sbrk_r>
 81133ce:	1c43      	adds	r3, r0, #1
 81133d0:	d103      	bne.n	81133da <sbrk_aligned+0x26>
 81133d2:	f04f 34ff 	mov.w	r4, #4294967295
 81133d6:	4620      	mov	r0, r4
 81133d8:	bd70      	pop	{r4, r5, r6, pc}
 81133da:	1cc4      	adds	r4, r0, #3
 81133dc:	f024 0403 	bic.w	r4, r4, #3
 81133e0:	42a0      	cmp	r0, r4
 81133e2:	d0f8      	beq.n	81133d6 <sbrk_aligned+0x22>
 81133e4:	1a21      	subs	r1, r4, r0
 81133e6:	4628      	mov	r0, r5
 81133e8:	f001 ffd0 	bl	811538c <_sbrk_r>
 81133ec:	3001      	adds	r0, #1
 81133ee:	d1f2      	bne.n	81133d6 <sbrk_aligned+0x22>
 81133f0:	e7ef      	b.n	81133d2 <sbrk_aligned+0x1e>
 81133f2:	bf00      	nop
 81133f4:	1000d4c8 	.word	0x1000d4c8

081133f8 <_malloc_r>:
 81133f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81133fc:	1ccd      	adds	r5, r1, #3
 81133fe:	f025 0503 	bic.w	r5, r5, #3
 8113402:	3508      	adds	r5, #8
 8113404:	2d0c      	cmp	r5, #12
 8113406:	bf38      	it	cc
 8113408:	250c      	movcc	r5, #12
 811340a:	2d00      	cmp	r5, #0
 811340c:	4606      	mov	r6, r0
 811340e:	db01      	blt.n	8113414 <_malloc_r+0x1c>
 8113410:	42a9      	cmp	r1, r5
 8113412:	d904      	bls.n	811341e <_malloc_r+0x26>
 8113414:	230c      	movs	r3, #12
 8113416:	6033      	str	r3, [r6, #0]
 8113418:	2000      	movs	r0, #0
 811341a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811341e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 81134f4 <_malloc_r+0xfc>
 8113422:	f000 f869 	bl	81134f8 <__malloc_lock>
 8113426:	f8d8 3000 	ldr.w	r3, [r8]
 811342a:	461c      	mov	r4, r3
 811342c:	bb44      	cbnz	r4, 8113480 <_malloc_r+0x88>
 811342e:	4629      	mov	r1, r5
 8113430:	4630      	mov	r0, r6
 8113432:	f7ff ffbf 	bl	81133b4 <sbrk_aligned>
 8113436:	1c43      	adds	r3, r0, #1
 8113438:	4604      	mov	r4, r0
 811343a:	d158      	bne.n	81134ee <_malloc_r+0xf6>
 811343c:	f8d8 4000 	ldr.w	r4, [r8]
 8113440:	4627      	mov	r7, r4
 8113442:	2f00      	cmp	r7, #0
 8113444:	d143      	bne.n	81134ce <_malloc_r+0xd6>
 8113446:	2c00      	cmp	r4, #0
 8113448:	d04b      	beq.n	81134e2 <_malloc_r+0xea>
 811344a:	6823      	ldr	r3, [r4, #0]
 811344c:	4639      	mov	r1, r7
 811344e:	4630      	mov	r0, r6
 8113450:	eb04 0903 	add.w	r9, r4, r3
 8113454:	f001 ff9a 	bl	811538c <_sbrk_r>
 8113458:	4581      	cmp	r9, r0
 811345a:	d142      	bne.n	81134e2 <_malloc_r+0xea>
 811345c:	6821      	ldr	r1, [r4, #0]
 811345e:	1a6d      	subs	r5, r5, r1
 8113460:	4629      	mov	r1, r5
 8113462:	4630      	mov	r0, r6
 8113464:	f7ff ffa6 	bl	81133b4 <sbrk_aligned>
 8113468:	3001      	adds	r0, #1
 811346a:	d03a      	beq.n	81134e2 <_malloc_r+0xea>
 811346c:	6823      	ldr	r3, [r4, #0]
 811346e:	442b      	add	r3, r5
 8113470:	6023      	str	r3, [r4, #0]
 8113472:	f8d8 3000 	ldr.w	r3, [r8]
 8113476:	685a      	ldr	r2, [r3, #4]
 8113478:	bb62      	cbnz	r2, 81134d4 <_malloc_r+0xdc>
 811347a:	f8c8 7000 	str.w	r7, [r8]
 811347e:	e00f      	b.n	81134a0 <_malloc_r+0xa8>
 8113480:	6822      	ldr	r2, [r4, #0]
 8113482:	1b52      	subs	r2, r2, r5
 8113484:	d420      	bmi.n	81134c8 <_malloc_r+0xd0>
 8113486:	2a0b      	cmp	r2, #11
 8113488:	d917      	bls.n	81134ba <_malloc_r+0xc2>
 811348a:	1961      	adds	r1, r4, r5
 811348c:	42a3      	cmp	r3, r4
 811348e:	6025      	str	r5, [r4, #0]
 8113490:	bf18      	it	ne
 8113492:	6059      	strne	r1, [r3, #4]
 8113494:	6863      	ldr	r3, [r4, #4]
 8113496:	bf08      	it	eq
 8113498:	f8c8 1000 	streq.w	r1, [r8]
 811349c:	5162      	str	r2, [r4, r5]
 811349e:	604b      	str	r3, [r1, #4]
 81134a0:	4630      	mov	r0, r6
 81134a2:	f000 f82f 	bl	8113504 <__malloc_unlock>
 81134a6:	f104 000b 	add.w	r0, r4, #11
 81134aa:	1d23      	adds	r3, r4, #4
 81134ac:	f020 0007 	bic.w	r0, r0, #7
 81134b0:	1ac2      	subs	r2, r0, r3
 81134b2:	bf1c      	itt	ne
 81134b4:	1a1b      	subne	r3, r3, r0
 81134b6:	50a3      	strne	r3, [r4, r2]
 81134b8:	e7af      	b.n	811341a <_malloc_r+0x22>
 81134ba:	6862      	ldr	r2, [r4, #4]
 81134bc:	42a3      	cmp	r3, r4
 81134be:	bf0c      	ite	eq
 81134c0:	f8c8 2000 	streq.w	r2, [r8]
 81134c4:	605a      	strne	r2, [r3, #4]
 81134c6:	e7eb      	b.n	81134a0 <_malloc_r+0xa8>
 81134c8:	4623      	mov	r3, r4
 81134ca:	6864      	ldr	r4, [r4, #4]
 81134cc:	e7ae      	b.n	811342c <_malloc_r+0x34>
 81134ce:	463c      	mov	r4, r7
 81134d0:	687f      	ldr	r7, [r7, #4]
 81134d2:	e7b6      	b.n	8113442 <_malloc_r+0x4a>
 81134d4:	461a      	mov	r2, r3
 81134d6:	685b      	ldr	r3, [r3, #4]
 81134d8:	42a3      	cmp	r3, r4
 81134da:	d1fb      	bne.n	81134d4 <_malloc_r+0xdc>
 81134dc:	2300      	movs	r3, #0
 81134de:	6053      	str	r3, [r2, #4]
 81134e0:	e7de      	b.n	81134a0 <_malloc_r+0xa8>
 81134e2:	230c      	movs	r3, #12
 81134e4:	6033      	str	r3, [r6, #0]
 81134e6:	4630      	mov	r0, r6
 81134e8:	f000 f80c 	bl	8113504 <__malloc_unlock>
 81134ec:	e794      	b.n	8113418 <_malloc_r+0x20>
 81134ee:	6005      	str	r5, [r0, #0]
 81134f0:	e7d6      	b.n	81134a0 <_malloc_r+0xa8>
 81134f2:	bf00      	nop
 81134f4:	1000d4cc 	.word	0x1000d4cc

081134f8 <__malloc_lock>:
 81134f8:	4801      	ldr	r0, [pc, #4]	@ (8113500 <__malloc_lock+0x8>)
 81134fa:	f7ff b888 	b.w	811260e <__retarget_lock_acquire_recursive>
 81134fe:	bf00      	nop
 8113500:	1000d4c4 	.word	0x1000d4c4

08113504 <__malloc_unlock>:
 8113504:	4801      	ldr	r0, [pc, #4]	@ (811350c <__malloc_unlock+0x8>)
 8113506:	f7ff b883 	b.w	8112610 <__retarget_lock_release_recursive>
 811350a:	bf00      	nop
 811350c:	1000d4c4 	.word	0x1000d4c4

08113510 <_Balloc>:
 8113510:	b570      	push	{r4, r5, r6, lr}
 8113512:	69c6      	ldr	r6, [r0, #28]
 8113514:	4604      	mov	r4, r0
 8113516:	460d      	mov	r5, r1
 8113518:	b976      	cbnz	r6, 8113538 <_Balloc+0x28>
 811351a:	2010      	movs	r0, #16
 811351c:	f7ff ff42 	bl	81133a4 <malloc>
 8113520:	4602      	mov	r2, r0
 8113522:	61e0      	str	r0, [r4, #28]
 8113524:	b920      	cbnz	r0, 8113530 <_Balloc+0x20>
 8113526:	4b18      	ldr	r3, [pc, #96]	@ (8113588 <_Balloc+0x78>)
 8113528:	4818      	ldr	r0, [pc, #96]	@ (811358c <_Balloc+0x7c>)
 811352a:	216b      	movs	r1, #107	@ 0x6b
 811352c:	f7ff f886 	bl	811263c <__assert_func>
 8113530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8113534:	6006      	str	r6, [r0, #0]
 8113536:	60c6      	str	r6, [r0, #12]
 8113538:	69e6      	ldr	r6, [r4, #28]
 811353a:	68f3      	ldr	r3, [r6, #12]
 811353c:	b183      	cbz	r3, 8113560 <_Balloc+0x50>
 811353e:	69e3      	ldr	r3, [r4, #28]
 8113540:	68db      	ldr	r3, [r3, #12]
 8113542:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8113546:	b9b8      	cbnz	r0, 8113578 <_Balloc+0x68>
 8113548:	2101      	movs	r1, #1
 811354a:	fa01 f605 	lsl.w	r6, r1, r5
 811354e:	1d72      	adds	r2, r6, #5
 8113550:	0092      	lsls	r2, r2, #2
 8113552:	4620      	mov	r0, r4
 8113554:	f001 ff3b 	bl	81153ce <_calloc_r>
 8113558:	b160      	cbz	r0, 8113574 <_Balloc+0x64>
 811355a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 811355e:	e00e      	b.n	811357e <_Balloc+0x6e>
 8113560:	2221      	movs	r2, #33	@ 0x21
 8113562:	2104      	movs	r1, #4
 8113564:	4620      	mov	r0, r4
 8113566:	f001 ff32 	bl	81153ce <_calloc_r>
 811356a:	69e3      	ldr	r3, [r4, #28]
 811356c:	60f0      	str	r0, [r6, #12]
 811356e:	68db      	ldr	r3, [r3, #12]
 8113570:	2b00      	cmp	r3, #0
 8113572:	d1e4      	bne.n	811353e <_Balloc+0x2e>
 8113574:	2000      	movs	r0, #0
 8113576:	bd70      	pop	{r4, r5, r6, pc}
 8113578:	6802      	ldr	r2, [r0, #0]
 811357a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 811357e:	2300      	movs	r3, #0
 8113580:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8113584:	e7f7      	b.n	8113576 <_Balloc+0x66>
 8113586:	bf00      	nop
 8113588:	08115ca0 	.word	0x08115ca0
 811358c:	08115dfa 	.word	0x08115dfa

08113590 <_Bfree>:
 8113590:	b570      	push	{r4, r5, r6, lr}
 8113592:	69c6      	ldr	r6, [r0, #28]
 8113594:	4605      	mov	r5, r0
 8113596:	460c      	mov	r4, r1
 8113598:	b976      	cbnz	r6, 81135b8 <_Bfree+0x28>
 811359a:	2010      	movs	r0, #16
 811359c:	f7ff ff02 	bl	81133a4 <malloc>
 81135a0:	4602      	mov	r2, r0
 81135a2:	61e8      	str	r0, [r5, #28]
 81135a4:	b920      	cbnz	r0, 81135b0 <_Bfree+0x20>
 81135a6:	4b09      	ldr	r3, [pc, #36]	@ (81135cc <_Bfree+0x3c>)
 81135a8:	4809      	ldr	r0, [pc, #36]	@ (81135d0 <_Bfree+0x40>)
 81135aa:	218f      	movs	r1, #143	@ 0x8f
 81135ac:	f7ff f846 	bl	811263c <__assert_func>
 81135b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81135b4:	6006      	str	r6, [r0, #0]
 81135b6:	60c6      	str	r6, [r0, #12]
 81135b8:	b13c      	cbz	r4, 81135ca <_Bfree+0x3a>
 81135ba:	69eb      	ldr	r3, [r5, #28]
 81135bc:	6862      	ldr	r2, [r4, #4]
 81135be:	68db      	ldr	r3, [r3, #12]
 81135c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81135c4:	6021      	str	r1, [r4, #0]
 81135c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81135ca:	bd70      	pop	{r4, r5, r6, pc}
 81135cc:	08115ca0 	.word	0x08115ca0
 81135d0:	08115dfa 	.word	0x08115dfa

081135d4 <__multadd>:
 81135d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81135d8:	690d      	ldr	r5, [r1, #16]
 81135da:	4607      	mov	r7, r0
 81135dc:	460c      	mov	r4, r1
 81135de:	461e      	mov	r6, r3
 81135e0:	f101 0c14 	add.w	ip, r1, #20
 81135e4:	2000      	movs	r0, #0
 81135e6:	f8dc 3000 	ldr.w	r3, [ip]
 81135ea:	b299      	uxth	r1, r3
 81135ec:	fb02 6101 	mla	r1, r2, r1, r6
 81135f0:	0c1e      	lsrs	r6, r3, #16
 81135f2:	0c0b      	lsrs	r3, r1, #16
 81135f4:	fb02 3306 	mla	r3, r2, r6, r3
 81135f8:	b289      	uxth	r1, r1
 81135fa:	3001      	adds	r0, #1
 81135fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8113600:	4285      	cmp	r5, r0
 8113602:	f84c 1b04 	str.w	r1, [ip], #4
 8113606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 811360a:	dcec      	bgt.n	81135e6 <__multadd+0x12>
 811360c:	b30e      	cbz	r6, 8113652 <__multadd+0x7e>
 811360e:	68a3      	ldr	r3, [r4, #8]
 8113610:	42ab      	cmp	r3, r5
 8113612:	dc19      	bgt.n	8113648 <__multadd+0x74>
 8113614:	6861      	ldr	r1, [r4, #4]
 8113616:	4638      	mov	r0, r7
 8113618:	3101      	adds	r1, #1
 811361a:	f7ff ff79 	bl	8113510 <_Balloc>
 811361e:	4680      	mov	r8, r0
 8113620:	b928      	cbnz	r0, 811362e <__multadd+0x5a>
 8113622:	4602      	mov	r2, r0
 8113624:	4b0c      	ldr	r3, [pc, #48]	@ (8113658 <__multadd+0x84>)
 8113626:	480d      	ldr	r0, [pc, #52]	@ (811365c <__multadd+0x88>)
 8113628:	21ba      	movs	r1, #186	@ 0xba
 811362a:	f7ff f807 	bl	811263c <__assert_func>
 811362e:	6922      	ldr	r2, [r4, #16]
 8113630:	3202      	adds	r2, #2
 8113632:	f104 010c 	add.w	r1, r4, #12
 8113636:	0092      	lsls	r2, r2, #2
 8113638:	300c      	adds	r0, #12
 811363a:	f7fe ffea 	bl	8112612 <memcpy>
 811363e:	4621      	mov	r1, r4
 8113640:	4638      	mov	r0, r7
 8113642:	f7ff ffa5 	bl	8113590 <_Bfree>
 8113646:	4644      	mov	r4, r8
 8113648:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 811364c:	3501      	adds	r5, #1
 811364e:	615e      	str	r6, [r3, #20]
 8113650:	6125      	str	r5, [r4, #16]
 8113652:	4620      	mov	r0, r4
 8113654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113658:	08115de9 	.word	0x08115de9
 811365c:	08115dfa 	.word	0x08115dfa

08113660 <__s2b>:
 8113660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113664:	460c      	mov	r4, r1
 8113666:	4615      	mov	r5, r2
 8113668:	461f      	mov	r7, r3
 811366a:	2209      	movs	r2, #9
 811366c:	3308      	adds	r3, #8
 811366e:	4606      	mov	r6, r0
 8113670:	fb93 f3f2 	sdiv	r3, r3, r2
 8113674:	2100      	movs	r1, #0
 8113676:	2201      	movs	r2, #1
 8113678:	429a      	cmp	r2, r3
 811367a:	db09      	blt.n	8113690 <__s2b+0x30>
 811367c:	4630      	mov	r0, r6
 811367e:	f7ff ff47 	bl	8113510 <_Balloc>
 8113682:	b940      	cbnz	r0, 8113696 <__s2b+0x36>
 8113684:	4602      	mov	r2, r0
 8113686:	4b19      	ldr	r3, [pc, #100]	@ (81136ec <__s2b+0x8c>)
 8113688:	4819      	ldr	r0, [pc, #100]	@ (81136f0 <__s2b+0x90>)
 811368a:	21d3      	movs	r1, #211	@ 0xd3
 811368c:	f7fe ffd6 	bl	811263c <__assert_func>
 8113690:	0052      	lsls	r2, r2, #1
 8113692:	3101      	adds	r1, #1
 8113694:	e7f0      	b.n	8113678 <__s2b+0x18>
 8113696:	9b08      	ldr	r3, [sp, #32]
 8113698:	6143      	str	r3, [r0, #20]
 811369a:	2d09      	cmp	r5, #9
 811369c:	f04f 0301 	mov.w	r3, #1
 81136a0:	6103      	str	r3, [r0, #16]
 81136a2:	dd16      	ble.n	81136d2 <__s2b+0x72>
 81136a4:	f104 0909 	add.w	r9, r4, #9
 81136a8:	46c8      	mov	r8, r9
 81136aa:	442c      	add	r4, r5
 81136ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 81136b0:	4601      	mov	r1, r0
 81136b2:	3b30      	subs	r3, #48	@ 0x30
 81136b4:	220a      	movs	r2, #10
 81136b6:	4630      	mov	r0, r6
 81136b8:	f7ff ff8c 	bl	81135d4 <__multadd>
 81136bc:	45a0      	cmp	r8, r4
 81136be:	d1f5      	bne.n	81136ac <__s2b+0x4c>
 81136c0:	f1a5 0408 	sub.w	r4, r5, #8
 81136c4:	444c      	add	r4, r9
 81136c6:	1b2d      	subs	r5, r5, r4
 81136c8:	1963      	adds	r3, r4, r5
 81136ca:	42bb      	cmp	r3, r7
 81136cc:	db04      	blt.n	81136d8 <__s2b+0x78>
 81136ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81136d2:	340a      	adds	r4, #10
 81136d4:	2509      	movs	r5, #9
 81136d6:	e7f6      	b.n	81136c6 <__s2b+0x66>
 81136d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 81136dc:	4601      	mov	r1, r0
 81136de:	3b30      	subs	r3, #48	@ 0x30
 81136e0:	220a      	movs	r2, #10
 81136e2:	4630      	mov	r0, r6
 81136e4:	f7ff ff76 	bl	81135d4 <__multadd>
 81136e8:	e7ee      	b.n	81136c8 <__s2b+0x68>
 81136ea:	bf00      	nop
 81136ec:	08115de9 	.word	0x08115de9
 81136f0:	08115dfa 	.word	0x08115dfa

081136f4 <__hi0bits>:
 81136f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 81136f8:	4603      	mov	r3, r0
 81136fa:	bf36      	itet	cc
 81136fc:	0403      	lslcc	r3, r0, #16
 81136fe:	2000      	movcs	r0, #0
 8113700:	2010      	movcc	r0, #16
 8113702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8113706:	bf3c      	itt	cc
 8113708:	021b      	lslcc	r3, r3, #8
 811370a:	3008      	addcc	r0, #8
 811370c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8113710:	bf3c      	itt	cc
 8113712:	011b      	lslcc	r3, r3, #4
 8113714:	3004      	addcc	r0, #4
 8113716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811371a:	bf3c      	itt	cc
 811371c:	009b      	lslcc	r3, r3, #2
 811371e:	3002      	addcc	r0, #2
 8113720:	2b00      	cmp	r3, #0
 8113722:	db05      	blt.n	8113730 <__hi0bits+0x3c>
 8113724:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8113728:	f100 0001 	add.w	r0, r0, #1
 811372c:	bf08      	it	eq
 811372e:	2020      	moveq	r0, #32
 8113730:	4770      	bx	lr

08113732 <__lo0bits>:
 8113732:	6803      	ldr	r3, [r0, #0]
 8113734:	4602      	mov	r2, r0
 8113736:	f013 0007 	ands.w	r0, r3, #7
 811373a:	d00b      	beq.n	8113754 <__lo0bits+0x22>
 811373c:	07d9      	lsls	r1, r3, #31
 811373e:	d421      	bmi.n	8113784 <__lo0bits+0x52>
 8113740:	0798      	lsls	r0, r3, #30
 8113742:	bf49      	itett	mi
 8113744:	085b      	lsrmi	r3, r3, #1
 8113746:	089b      	lsrpl	r3, r3, #2
 8113748:	2001      	movmi	r0, #1
 811374a:	6013      	strmi	r3, [r2, #0]
 811374c:	bf5c      	itt	pl
 811374e:	6013      	strpl	r3, [r2, #0]
 8113750:	2002      	movpl	r0, #2
 8113752:	4770      	bx	lr
 8113754:	b299      	uxth	r1, r3
 8113756:	b909      	cbnz	r1, 811375c <__lo0bits+0x2a>
 8113758:	0c1b      	lsrs	r3, r3, #16
 811375a:	2010      	movs	r0, #16
 811375c:	b2d9      	uxtb	r1, r3
 811375e:	b909      	cbnz	r1, 8113764 <__lo0bits+0x32>
 8113760:	3008      	adds	r0, #8
 8113762:	0a1b      	lsrs	r3, r3, #8
 8113764:	0719      	lsls	r1, r3, #28
 8113766:	bf04      	itt	eq
 8113768:	091b      	lsreq	r3, r3, #4
 811376a:	3004      	addeq	r0, #4
 811376c:	0799      	lsls	r1, r3, #30
 811376e:	bf04      	itt	eq
 8113770:	089b      	lsreq	r3, r3, #2
 8113772:	3002      	addeq	r0, #2
 8113774:	07d9      	lsls	r1, r3, #31
 8113776:	d403      	bmi.n	8113780 <__lo0bits+0x4e>
 8113778:	085b      	lsrs	r3, r3, #1
 811377a:	f100 0001 	add.w	r0, r0, #1
 811377e:	d003      	beq.n	8113788 <__lo0bits+0x56>
 8113780:	6013      	str	r3, [r2, #0]
 8113782:	4770      	bx	lr
 8113784:	2000      	movs	r0, #0
 8113786:	4770      	bx	lr
 8113788:	2020      	movs	r0, #32
 811378a:	4770      	bx	lr

0811378c <__i2b>:
 811378c:	b510      	push	{r4, lr}
 811378e:	460c      	mov	r4, r1
 8113790:	2101      	movs	r1, #1
 8113792:	f7ff febd 	bl	8113510 <_Balloc>
 8113796:	4602      	mov	r2, r0
 8113798:	b928      	cbnz	r0, 81137a6 <__i2b+0x1a>
 811379a:	4b05      	ldr	r3, [pc, #20]	@ (81137b0 <__i2b+0x24>)
 811379c:	4805      	ldr	r0, [pc, #20]	@ (81137b4 <__i2b+0x28>)
 811379e:	f240 1145 	movw	r1, #325	@ 0x145
 81137a2:	f7fe ff4b 	bl	811263c <__assert_func>
 81137a6:	2301      	movs	r3, #1
 81137a8:	6144      	str	r4, [r0, #20]
 81137aa:	6103      	str	r3, [r0, #16]
 81137ac:	bd10      	pop	{r4, pc}
 81137ae:	bf00      	nop
 81137b0:	08115de9 	.word	0x08115de9
 81137b4:	08115dfa 	.word	0x08115dfa

081137b8 <__multiply>:
 81137b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81137bc:	4614      	mov	r4, r2
 81137be:	690a      	ldr	r2, [r1, #16]
 81137c0:	6923      	ldr	r3, [r4, #16]
 81137c2:	429a      	cmp	r2, r3
 81137c4:	bfa8      	it	ge
 81137c6:	4623      	movge	r3, r4
 81137c8:	460f      	mov	r7, r1
 81137ca:	bfa4      	itt	ge
 81137cc:	460c      	movge	r4, r1
 81137ce:	461f      	movge	r7, r3
 81137d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 81137d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 81137d8:	68a3      	ldr	r3, [r4, #8]
 81137da:	6861      	ldr	r1, [r4, #4]
 81137dc:	eb0a 0609 	add.w	r6, sl, r9
 81137e0:	42b3      	cmp	r3, r6
 81137e2:	b085      	sub	sp, #20
 81137e4:	bfb8      	it	lt
 81137e6:	3101      	addlt	r1, #1
 81137e8:	f7ff fe92 	bl	8113510 <_Balloc>
 81137ec:	b930      	cbnz	r0, 81137fc <__multiply+0x44>
 81137ee:	4602      	mov	r2, r0
 81137f0:	4b44      	ldr	r3, [pc, #272]	@ (8113904 <__multiply+0x14c>)
 81137f2:	4845      	ldr	r0, [pc, #276]	@ (8113908 <__multiply+0x150>)
 81137f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 81137f8:	f7fe ff20 	bl	811263c <__assert_func>
 81137fc:	f100 0514 	add.w	r5, r0, #20
 8113800:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8113804:	462b      	mov	r3, r5
 8113806:	2200      	movs	r2, #0
 8113808:	4543      	cmp	r3, r8
 811380a:	d321      	bcc.n	8113850 <__multiply+0x98>
 811380c:	f107 0114 	add.w	r1, r7, #20
 8113810:	f104 0214 	add.w	r2, r4, #20
 8113814:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8113818:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 811381c:	9302      	str	r3, [sp, #8]
 811381e:	1b13      	subs	r3, r2, r4
 8113820:	3b15      	subs	r3, #21
 8113822:	f023 0303 	bic.w	r3, r3, #3
 8113826:	3304      	adds	r3, #4
 8113828:	f104 0715 	add.w	r7, r4, #21
 811382c:	42ba      	cmp	r2, r7
 811382e:	bf38      	it	cc
 8113830:	2304      	movcc	r3, #4
 8113832:	9301      	str	r3, [sp, #4]
 8113834:	9b02      	ldr	r3, [sp, #8]
 8113836:	9103      	str	r1, [sp, #12]
 8113838:	428b      	cmp	r3, r1
 811383a:	d80c      	bhi.n	8113856 <__multiply+0x9e>
 811383c:	2e00      	cmp	r6, #0
 811383e:	dd03      	ble.n	8113848 <__multiply+0x90>
 8113840:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8113844:	2b00      	cmp	r3, #0
 8113846:	d05b      	beq.n	8113900 <__multiply+0x148>
 8113848:	6106      	str	r6, [r0, #16]
 811384a:	b005      	add	sp, #20
 811384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113850:	f843 2b04 	str.w	r2, [r3], #4
 8113854:	e7d8      	b.n	8113808 <__multiply+0x50>
 8113856:	f8b1 a000 	ldrh.w	sl, [r1]
 811385a:	f1ba 0f00 	cmp.w	sl, #0
 811385e:	d024      	beq.n	81138aa <__multiply+0xf2>
 8113860:	f104 0e14 	add.w	lr, r4, #20
 8113864:	46a9      	mov	r9, r5
 8113866:	f04f 0c00 	mov.w	ip, #0
 811386a:	f85e 7b04 	ldr.w	r7, [lr], #4
 811386e:	f8d9 3000 	ldr.w	r3, [r9]
 8113872:	fa1f fb87 	uxth.w	fp, r7
 8113876:	b29b      	uxth	r3, r3
 8113878:	fb0a 330b 	mla	r3, sl, fp, r3
 811387c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8113880:	f8d9 7000 	ldr.w	r7, [r9]
 8113884:	4463      	add	r3, ip
 8113886:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 811388a:	fb0a c70b 	mla	r7, sl, fp, ip
 811388e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8113892:	b29b      	uxth	r3, r3
 8113894:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8113898:	4572      	cmp	r2, lr
 811389a:	f849 3b04 	str.w	r3, [r9], #4
 811389e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81138a2:	d8e2      	bhi.n	811386a <__multiply+0xb2>
 81138a4:	9b01      	ldr	r3, [sp, #4]
 81138a6:	f845 c003 	str.w	ip, [r5, r3]
 81138aa:	9b03      	ldr	r3, [sp, #12]
 81138ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 81138b0:	3104      	adds	r1, #4
 81138b2:	f1b9 0f00 	cmp.w	r9, #0
 81138b6:	d021      	beq.n	81138fc <__multiply+0x144>
 81138b8:	682b      	ldr	r3, [r5, #0]
 81138ba:	f104 0c14 	add.w	ip, r4, #20
 81138be:	46ae      	mov	lr, r5
 81138c0:	f04f 0a00 	mov.w	sl, #0
 81138c4:	f8bc b000 	ldrh.w	fp, [ip]
 81138c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 81138cc:	fb09 770b 	mla	r7, r9, fp, r7
 81138d0:	4457      	add	r7, sl
 81138d2:	b29b      	uxth	r3, r3
 81138d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81138d8:	f84e 3b04 	str.w	r3, [lr], #4
 81138dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 81138e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81138e4:	f8be 3000 	ldrh.w	r3, [lr]
 81138e8:	fb09 330a 	mla	r3, r9, sl, r3
 81138ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 81138f0:	4562      	cmp	r2, ip
 81138f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81138f6:	d8e5      	bhi.n	81138c4 <__multiply+0x10c>
 81138f8:	9f01      	ldr	r7, [sp, #4]
 81138fa:	51eb      	str	r3, [r5, r7]
 81138fc:	3504      	adds	r5, #4
 81138fe:	e799      	b.n	8113834 <__multiply+0x7c>
 8113900:	3e01      	subs	r6, #1
 8113902:	e79b      	b.n	811383c <__multiply+0x84>
 8113904:	08115de9 	.word	0x08115de9
 8113908:	08115dfa 	.word	0x08115dfa

0811390c <__pow5mult>:
 811390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113910:	4615      	mov	r5, r2
 8113912:	f012 0203 	ands.w	r2, r2, #3
 8113916:	4607      	mov	r7, r0
 8113918:	460e      	mov	r6, r1
 811391a:	d007      	beq.n	811392c <__pow5mult+0x20>
 811391c:	4c25      	ldr	r4, [pc, #148]	@ (81139b4 <__pow5mult+0xa8>)
 811391e:	3a01      	subs	r2, #1
 8113920:	2300      	movs	r3, #0
 8113922:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8113926:	f7ff fe55 	bl	81135d4 <__multadd>
 811392a:	4606      	mov	r6, r0
 811392c:	10ad      	asrs	r5, r5, #2
 811392e:	d03d      	beq.n	81139ac <__pow5mult+0xa0>
 8113930:	69fc      	ldr	r4, [r7, #28]
 8113932:	b97c      	cbnz	r4, 8113954 <__pow5mult+0x48>
 8113934:	2010      	movs	r0, #16
 8113936:	f7ff fd35 	bl	81133a4 <malloc>
 811393a:	4602      	mov	r2, r0
 811393c:	61f8      	str	r0, [r7, #28]
 811393e:	b928      	cbnz	r0, 811394c <__pow5mult+0x40>
 8113940:	4b1d      	ldr	r3, [pc, #116]	@ (81139b8 <__pow5mult+0xac>)
 8113942:	481e      	ldr	r0, [pc, #120]	@ (81139bc <__pow5mult+0xb0>)
 8113944:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8113948:	f7fe fe78 	bl	811263c <__assert_func>
 811394c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8113950:	6004      	str	r4, [r0, #0]
 8113952:	60c4      	str	r4, [r0, #12]
 8113954:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8113958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 811395c:	b94c      	cbnz	r4, 8113972 <__pow5mult+0x66>
 811395e:	f240 2171 	movw	r1, #625	@ 0x271
 8113962:	4638      	mov	r0, r7
 8113964:	f7ff ff12 	bl	811378c <__i2b>
 8113968:	2300      	movs	r3, #0
 811396a:	f8c8 0008 	str.w	r0, [r8, #8]
 811396e:	4604      	mov	r4, r0
 8113970:	6003      	str	r3, [r0, #0]
 8113972:	f04f 0900 	mov.w	r9, #0
 8113976:	07eb      	lsls	r3, r5, #31
 8113978:	d50a      	bpl.n	8113990 <__pow5mult+0x84>
 811397a:	4631      	mov	r1, r6
 811397c:	4622      	mov	r2, r4
 811397e:	4638      	mov	r0, r7
 8113980:	f7ff ff1a 	bl	81137b8 <__multiply>
 8113984:	4631      	mov	r1, r6
 8113986:	4680      	mov	r8, r0
 8113988:	4638      	mov	r0, r7
 811398a:	f7ff fe01 	bl	8113590 <_Bfree>
 811398e:	4646      	mov	r6, r8
 8113990:	106d      	asrs	r5, r5, #1
 8113992:	d00b      	beq.n	81139ac <__pow5mult+0xa0>
 8113994:	6820      	ldr	r0, [r4, #0]
 8113996:	b938      	cbnz	r0, 81139a8 <__pow5mult+0x9c>
 8113998:	4622      	mov	r2, r4
 811399a:	4621      	mov	r1, r4
 811399c:	4638      	mov	r0, r7
 811399e:	f7ff ff0b 	bl	81137b8 <__multiply>
 81139a2:	6020      	str	r0, [r4, #0]
 81139a4:	f8c0 9000 	str.w	r9, [r0]
 81139a8:	4604      	mov	r4, r0
 81139aa:	e7e4      	b.n	8113976 <__pow5mult+0x6a>
 81139ac:	4630      	mov	r0, r6
 81139ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81139b2:	bf00      	nop
 81139b4:	08115e54 	.word	0x08115e54
 81139b8:	08115ca0 	.word	0x08115ca0
 81139bc:	08115dfa 	.word	0x08115dfa

081139c0 <__lshift>:
 81139c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81139c4:	460c      	mov	r4, r1
 81139c6:	6849      	ldr	r1, [r1, #4]
 81139c8:	6923      	ldr	r3, [r4, #16]
 81139ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81139ce:	68a3      	ldr	r3, [r4, #8]
 81139d0:	4607      	mov	r7, r0
 81139d2:	4691      	mov	r9, r2
 81139d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81139d8:	f108 0601 	add.w	r6, r8, #1
 81139dc:	42b3      	cmp	r3, r6
 81139de:	db0b      	blt.n	81139f8 <__lshift+0x38>
 81139e0:	4638      	mov	r0, r7
 81139e2:	f7ff fd95 	bl	8113510 <_Balloc>
 81139e6:	4605      	mov	r5, r0
 81139e8:	b948      	cbnz	r0, 81139fe <__lshift+0x3e>
 81139ea:	4602      	mov	r2, r0
 81139ec:	4b28      	ldr	r3, [pc, #160]	@ (8113a90 <__lshift+0xd0>)
 81139ee:	4829      	ldr	r0, [pc, #164]	@ (8113a94 <__lshift+0xd4>)
 81139f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 81139f4:	f7fe fe22 	bl	811263c <__assert_func>
 81139f8:	3101      	adds	r1, #1
 81139fa:	005b      	lsls	r3, r3, #1
 81139fc:	e7ee      	b.n	81139dc <__lshift+0x1c>
 81139fe:	2300      	movs	r3, #0
 8113a00:	f100 0114 	add.w	r1, r0, #20
 8113a04:	f100 0210 	add.w	r2, r0, #16
 8113a08:	4618      	mov	r0, r3
 8113a0a:	4553      	cmp	r3, sl
 8113a0c:	db33      	blt.n	8113a76 <__lshift+0xb6>
 8113a0e:	6920      	ldr	r0, [r4, #16]
 8113a10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8113a14:	f104 0314 	add.w	r3, r4, #20
 8113a18:	f019 091f 	ands.w	r9, r9, #31
 8113a1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8113a20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8113a24:	d02b      	beq.n	8113a7e <__lshift+0xbe>
 8113a26:	f1c9 0e20 	rsb	lr, r9, #32
 8113a2a:	468a      	mov	sl, r1
 8113a2c:	2200      	movs	r2, #0
 8113a2e:	6818      	ldr	r0, [r3, #0]
 8113a30:	fa00 f009 	lsl.w	r0, r0, r9
 8113a34:	4310      	orrs	r0, r2
 8113a36:	f84a 0b04 	str.w	r0, [sl], #4
 8113a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8113a3e:	459c      	cmp	ip, r3
 8113a40:	fa22 f20e 	lsr.w	r2, r2, lr
 8113a44:	d8f3      	bhi.n	8113a2e <__lshift+0x6e>
 8113a46:	ebac 0304 	sub.w	r3, ip, r4
 8113a4a:	3b15      	subs	r3, #21
 8113a4c:	f023 0303 	bic.w	r3, r3, #3
 8113a50:	3304      	adds	r3, #4
 8113a52:	f104 0015 	add.w	r0, r4, #21
 8113a56:	4584      	cmp	ip, r0
 8113a58:	bf38      	it	cc
 8113a5a:	2304      	movcc	r3, #4
 8113a5c:	50ca      	str	r2, [r1, r3]
 8113a5e:	b10a      	cbz	r2, 8113a64 <__lshift+0xa4>
 8113a60:	f108 0602 	add.w	r6, r8, #2
 8113a64:	3e01      	subs	r6, #1
 8113a66:	4638      	mov	r0, r7
 8113a68:	612e      	str	r6, [r5, #16]
 8113a6a:	4621      	mov	r1, r4
 8113a6c:	f7ff fd90 	bl	8113590 <_Bfree>
 8113a70:	4628      	mov	r0, r5
 8113a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8113a76:	f842 0f04 	str.w	r0, [r2, #4]!
 8113a7a:	3301      	adds	r3, #1
 8113a7c:	e7c5      	b.n	8113a0a <__lshift+0x4a>
 8113a7e:	3904      	subs	r1, #4
 8113a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8113a84:	f841 2f04 	str.w	r2, [r1, #4]!
 8113a88:	459c      	cmp	ip, r3
 8113a8a:	d8f9      	bhi.n	8113a80 <__lshift+0xc0>
 8113a8c:	e7ea      	b.n	8113a64 <__lshift+0xa4>
 8113a8e:	bf00      	nop
 8113a90:	08115de9 	.word	0x08115de9
 8113a94:	08115dfa 	.word	0x08115dfa

08113a98 <__mcmp>:
 8113a98:	690a      	ldr	r2, [r1, #16]
 8113a9a:	4603      	mov	r3, r0
 8113a9c:	6900      	ldr	r0, [r0, #16]
 8113a9e:	1a80      	subs	r0, r0, r2
 8113aa0:	b530      	push	{r4, r5, lr}
 8113aa2:	d10e      	bne.n	8113ac2 <__mcmp+0x2a>
 8113aa4:	3314      	adds	r3, #20
 8113aa6:	3114      	adds	r1, #20
 8113aa8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8113aac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8113ab0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8113ab4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8113ab8:	4295      	cmp	r5, r2
 8113aba:	d003      	beq.n	8113ac4 <__mcmp+0x2c>
 8113abc:	d205      	bcs.n	8113aca <__mcmp+0x32>
 8113abe:	f04f 30ff 	mov.w	r0, #4294967295
 8113ac2:	bd30      	pop	{r4, r5, pc}
 8113ac4:	42a3      	cmp	r3, r4
 8113ac6:	d3f3      	bcc.n	8113ab0 <__mcmp+0x18>
 8113ac8:	e7fb      	b.n	8113ac2 <__mcmp+0x2a>
 8113aca:	2001      	movs	r0, #1
 8113acc:	e7f9      	b.n	8113ac2 <__mcmp+0x2a>
	...

08113ad0 <__mdiff>:
 8113ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113ad4:	4689      	mov	r9, r1
 8113ad6:	4606      	mov	r6, r0
 8113ad8:	4611      	mov	r1, r2
 8113ada:	4648      	mov	r0, r9
 8113adc:	4614      	mov	r4, r2
 8113ade:	f7ff ffdb 	bl	8113a98 <__mcmp>
 8113ae2:	1e05      	subs	r5, r0, #0
 8113ae4:	d112      	bne.n	8113b0c <__mdiff+0x3c>
 8113ae6:	4629      	mov	r1, r5
 8113ae8:	4630      	mov	r0, r6
 8113aea:	f7ff fd11 	bl	8113510 <_Balloc>
 8113aee:	4602      	mov	r2, r0
 8113af0:	b928      	cbnz	r0, 8113afe <__mdiff+0x2e>
 8113af2:	4b3f      	ldr	r3, [pc, #252]	@ (8113bf0 <__mdiff+0x120>)
 8113af4:	f240 2137 	movw	r1, #567	@ 0x237
 8113af8:	483e      	ldr	r0, [pc, #248]	@ (8113bf4 <__mdiff+0x124>)
 8113afa:	f7fe fd9f 	bl	811263c <__assert_func>
 8113afe:	2301      	movs	r3, #1
 8113b00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8113b04:	4610      	mov	r0, r2
 8113b06:	b003      	add	sp, #12
 8113b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113b0c:	bfbc      	itt	lt
 8113b0e:	464b      	movlt	r3, r9
 8113b10:	46a1      	movlt	r9, r4
 8113b12:	4630      	mov	r0, r6
 8113b14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8113b18:	bfba      	itte	lt
 8113b1a:	461c      	movlt	r4, r3
 8113b1c:	2501      	movlt	r5, #1
 8113b1e:	2500      	movge	r5, #0
 8113b20:	f7ff fcf6 	bl	8113510 <_Balloc>
 8113b24:	4602      	mov	r2, r0
 8113b26:	b918      	cbnz	r0, 8113b30 <__mdiff+0x60>
 8113b28:	4b31      	ldr	r3, [pc, #196]	@ (8113bf0 <__mdiff+0x120>)
 8113b2a:	f240 2145 	movw	r1, #581	@ 0x245
 8113b2e:	e7e3      	b.n	8113af8 <__mdiff+0x28>
 8113b30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8113b34:	6926      	ldr	r6, [r4, #16]
 8113b36:	60c5      	str	r5, [r0, #12]
 8113b38:	f109 0310 	add.w	r3, r9, #16
 8113b3c:	f109 0514 	add.w	r5, r9, #20
 8113b40:	f104 0e14 	add.w	lr, r4, #20
 8113b44:	f100 0b14 	add.w	fp, r0, #20
 8113b48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8113b4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8113b50:	9301      	str	r3, [sp, #4]
 8113b52:	46d9      	mov	r9, fp
 8113b54:	f04f 0c00 	mov.w	ip, #0
 8113b58:	9b01      	ldr	r3, [sp, #4]
 8113b5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8113b5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8113b62:	9301      	str	r3, [sp, #4]
 8113b64:	fa1f f38a 	uxth.w	r3, sl
 8113b68:	4619      	mov	r1, r3
 8113b6a:	b283      	uxth	r3, r0
 8113b6c:	1acb      	subs	r3, r1, r3
 8113b6e:	0c00      	lsrs	r0, r0, #16
 8113b70:	4463      	add	r3, ip
 8113b72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8113b76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8113b7a:	b29b      	uxth	r3, r3
 8113b7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8113b80:	4576      	cmp	r6, lr
 8113b82:	f849 3b04 	str.w	r3, [r9], #4
 8113b86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8113b8a:	d8e5      	bhi.n	8113b58 <__mdiff+0x88>
 8113b8c:	1b33      	subs	r3, r6, r4
 8113b8e:	3b15      	subs	r3, #21
 8113b90:	f023 0303 	bic.w	r3, r3, #3
 8113b94:	3415      	adds	r4, #21
 8113b96:	3304      	adds	r3, #4
 8113b98:	42a6      	cmp	r6, r4
 8113b9a:	bf38      	it	cc
 8113b9c:	2304      	movcc	r3, #4
 8113b9e:	441d      	add	r5, r3
 8113ba0:	445b      	add	r3, fp
 8113ba2:	461e      	mov	r6, r3
 8113ba4:	462c      	mov	r4, r5
 8113ba6:	4544      	cmp	r4, r8
 8113ba8:	d30e      	bcc.n	8113bc8 <__mdiff+0xf8>
 8113baa:	f108 0103 	add.w	r1, r8, #3
 8113bae:	1b49      	subs	r1, r1, r5
 8113bb0:	f021 0103 	bic.w	r1, r1, #3
 8113bb4:	3d03      	subs	r5, #3
 8113bb6:	45a8      	cmp	r8, r5
 8113bb8:	bf38      	it	cc
 8113bba:	2100      	movcc	r1, #0
 8113bbc:	440b      	add	r3, r1
 8113bbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8113bc2:	b191      	cbz	r1, 8113bea <__mdiff+0x11a>
 8113bc4:	6117      	str	r7, [r2, #16]
 8113bc6:	e79d      	b.n	8113b04 <__mdiff+0x34>
 8113bc8:	f854 1b04 	ldr.w	r1, [r4], #4
 8113bcc:	46e6      	mov	lr, ip
 8113bce:	0c08      	lsrs	r0, r1, #16
 8113bd0:	fa1c fc81 	uxtah	ip, ip, r1
 8113bd4:	4471      	add	r1, lr
 8113bd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8113bda:	b289      	uxth	r1, r1
 8113bdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8113be0:	f846 1b04 	str.w	r1, [r6], #4
 8113be4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8113be8:	e7dd      	b.n	8113ba6 <__mdiff+0xd6>
 8113bea:	3f01      	subs	r7, #1
 8113bec:	e7e7      	b.n	8113bbe <__mdiff+0xee>
 8113bee:	bf00      	nop
 8113bf0:	08115de9 	.word	0x08115de9
 8113bf4:	08115dfa 	.word	0x08115dfa

08113bf8 <__ulp>:
 8113bf8:	b082      	sub	sp, #8
 8113bfa:	ed8d 0b00 	vstr	d0, [sp]
 8113bfe:	9a01      	ldr	r2, [sp, #4]
 8113c00:	4b0f      	ldr	r3, [pc, #60]	@ (8113c40 <__ulp+0x48>)
 8113c02:	4013      	ands	r3, r2
 8113c04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8113c08:	2b00      	cmp	r3, #0
 8113c0a:	dc08      	bgt.n	8113c1e <__ulp+0x26>
 8113c0c:	425b      	negs	r3, r3
 8113c0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8113c12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8113c16:	da04      	bge.n	8113c22 <__ulp+0x2a>
 8113c18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8113c1c:	4113      	asrs	r3, r2
 8113c1e:	2200      	movs	r2, #0
 8113c20:	e008      	b.n	8113c34 <__ulp+0x3c>
 8113c22:	f1a2 0314 	sub.w	r3, r2, #20
 8113c26:	2b1e      	cmp	r3, #30
 8113c28:	bfda      	itte	le
 8113c2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8113c2e:	40da      	lsrle	r2, r3
 8113c30:	2201      	movgt	r2, #1
 8113c32:	2300      	movs	r3, #0
 8113c34:	4619      	mov	r1, r3
 8113c36:	4610      	mov	r0, r2
 8113c38:	ec41 0b10 	vmov	d0, r0, r1
 8113c3c:	b002      	add	sp, #8
 8113c3e:	4770      	bx	lr
 8113c40:	7ff00000 	.word	0x7ff00000

08113c44 <__b2d>:
 8113c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113c48:	6906      	ldr	r6, [r0, #16]
 8113c4a:	f100 0814 	add.w	r8, r0, #20
 8113c4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8113c52:	1f37      	subs	r7, r6, #4
 8113c54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8113c58:	4610      	mov	r0, r2
 8113c5a:	f7ff fd4b 	bl	81136f4 <__hi0bits>
 8113c5e:	f1c0 0320 	rsb	r3, r0, #32
 8113c62:	280a      	cmp	r0, #10
 8113c64:	600b      	str	r3, [r1, #0]
 8113c66:	491b      	ldr	r1, [pc, #108]	@ (8113cd4 <__b2d+0x90>)
 8113c68:	dc15      	bgt.n	8113c96 <__b2d+0x52>
 8113c6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8113c6e:	fa22 f30c 	lsr.w	r3, r2, ip
 8113c72:	45b8      	cmp	r8, r7
 8113c74:	ea43 0501 	orr.w	r5, r3, r1
 8113c78:	bf34      	ite	cc
 8113c7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8113c7e:	2300      	movcs	r3, #0
 8113c80:	3015      	adds	r0, #21
 8113c82:	fa02 f000 	lsl.w	r0, r2, r0
 8113c86:	fa23 f30c 	lsr.w	r3, r3, ip
 8113c8a:	4303      	orrs	r3, r0
 8113c8c:	461c      	mov	r4, r3
 8113c8e:	ec45 4b10 	vmov	d0, r4, r5
 8113c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113c96:	45b8      	cmp	r8, r7
 8113c98:	bf3a      	itte	cc
 8113c9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8113c9e:	f1a6 0708 	subcc.w	r7, r6, #8
 8113ca2:	2300      	movcs	r3, #0
 8113ca4:	380b      	subs	r0, #11
 8113ca6:	d012      	beq.n	8113cce <__b2d+0x8a>
 8113ca8:	f1c0 0120 	rsb	r1, r0, #32
 8113cac:	fa23 f401 	lsr.w	r4, r3, r1
 8113cb0:	4082      	lsls	r2, r0
 8113cb2:	4322      	orrs	r2, r4
 8113cb4:	4547      	cmp	r7, r8
 8113cb6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8113cba:	bf8c      	ite	hi
 8113cbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8113cc0:	2200      	movls	r2, #0
 8113cc2:	4083      	lsls	r3, r0
 8113cc4:	40ca      	lsrs	r2, r1
 8113cc6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8113cca:	4313      	orrs	r3, r2
 8113ccc:	e7de      	b.n	8113c8c <__b2d+0x48>
 8113cce:	ea42 0501 	orr.w	r5, r2, r1
 8113cd2:	e7db      	b.n	8113c8c <__b2d+0x48>
 8113cd4:	3ff00000 	.word	0x3ff00000

08113cd8 <__d2b>:
 8113cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8113cdc:	460f      	mov	r7, r1
 8113cde:	2101      	movs	r1, #1
 8113ce0:	ec59 8b10 	vmov	r8, r9, d0
 8113ce4:	4616      	mov	r6, r2
 8113ce6:	f7ff fc13 	bl	8113510 <_Balloc>
 8113cea:	4604      	mov	r4, r0
 8113cec:	b930      	cbnz	r0, 8113cfc <__d2b+0x24>
 8113cee:	4602      	mov	r2, r0
 8113cf0:	4b23      	ldr	r3, [pc, #140]	@ (8113d80 <__d2b+0xa8>)
 8113cf2:	4824      	ldr	r0, [pc, #144]	@ (8113d84 <__d2b+0xac>)
 8113cf4:	f240 310f 	movw	r1, #783	@ 0x30f
 8113cf8:	f7fe fca0 	bl	811263c <__assert_func>
 8113cfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8113d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8113d04:	b10d      	cbz	r5, 8113d0a <__d2b+0x32>
 8113d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8113d0a:	9301      	str	r3, [sp, #4]
 8113d0c:	f1b8 0300 	subs.w	r3, r8, #0
 8113d10:	d023      	beq.n	8113d5a <__d2b+0x82>
 8113d12:	4668      	mov	r0, sp
 8113d14:	9300      	str	r3, [sp, #0]
 8113d16:	f7ff fd0c 	bl	8113732 <__lo0bits>
 8113d1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8113d1e:	b1d0      	cbz	r0, 8113d56 <__d2b+0x7e>
 8113d20:	f1c0 0320 	rsb	r3, r0, #32
 8113d24:	fa02 f303 	lsl.w	r3, r2, r3
 8113d28:	430b      	orrs	r3, r1
 8113d2a:	40c2      	lsrs	r2, r0
 8113d2c:	6163      	str	r3, [r4, #20]
 8113d2e:	9201      	str	r2, [sp, #4]
 8113d30:	9b01      	ldr	r3, [sp, #4]
 8113d32:	61a3      	str	r3, [r4, #24]
 8113d34:	2b00      	cmp	r3, #0
 8113d36:	bf0c      	ite	eq
 8113d38:	2201      	moveq	r2, #1
 8113d3a:	2202      	movne	r2, #2
 8113d3c:	6122      	str	r2, [r4, #16]
 8113d3e:	b1a5      	cbz	r5, 8113d6a <__d2b+0x92>
 8113d40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8113d44:	4405      	add	r5, r0
 8113d46:	603d      	str	r5, [r7, #0]
 8113d48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8113d4c:	6030      	str	r0, [r6, #0]
 8113d4e:	4620      	mov	r0, r4
 8113d50:	b003      	add	sp, #12
 8113d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8113d56:	6161      	str	r1, [r4, #20]
 8113d58:	e7ea      	b.n	8113d30 <__d2b+0x58>
 8113d5a:	a801      	add	r0, sp, #4
 8113d5c:	f7ff fce9 	bl	8113732 <__lo0bits>
 8113d60:	9b01      	ldr	r3, [sp, #4]
 8113d62:	6163      	str	r3, [r4, #20]
 8113d64:	3020      	adds	r0, #32
 8113d66:	2201      	movs	r2, #1
 8113d68:	e7e8      	b.n	8113d3c <__d2b+0x64>
 8113d6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8113d6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8113d72:	6038      	str	r0, [r7, #0]
 8113d74:	6918      	ldr	r0, [r3, #16]
 8113d76:	f7ff fcbd 	bl	81136f4 <__hi0bits>
 8113d7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8113d7e:	e7e5      	b.n	8113d4c <__d2b+0x74>
 8113d80:	08115de9 	.word	0x08115de9
 8113d84:	08115dfa 	.word	0x08115dfa

08113d88 <__ratio>:
 8113d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113d8c:	b085      	sub	sp, #20
 8113d8e:	e9cd 1000 	strd	r1, r0, [sp]
 8113d92:	a902      	add	r1, sp, #8
 8113d94:	f7ff ff56 	bl	8113c44 <__b2d>
 8113d98:	9800      	ldr	r0, [sp, #0]
 8113d9a:	a903      	add	r1, sp, #12
 8113d9c:	ec55 4b10 	vmov	r4, r5, d0
 8113da0:	f7ff ff50 	bl	8113c44 <__b2d>
 8113da4:	9b01      	ldr	r3, [sp, #4]
 8113da6:	6919      	ldr	r1, [r3, #16]
 8113da8:	9b00      	ldr	r3, [sp, #0]
 8113daa:	691b      	ldr	r3, [r3, #16]
 8113dac:	1ac9      	subs	r1, r1, r3
 8113dae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8113db2:	1a9b      	subs	r3, r3, r2
 8113db4:	ec5b ab10 	vmov	sl, fp, d0
 8113db8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8113dbc:	2b00      	cmp	r3, #0
 8113dbe:	bfce      	itee	gt
 8113dc0:	462a      	movgt	r2, r5
 8113dc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8113dc6:	465a      	movle	r2, fp
 8113dc8:	462f      	mov	r7, r5
 8113dca:	46d9      	mov	r9, fp
 8113dcc:	bfcc      	ite	gt
 8113dce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8113dd2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8113dd6:	464b      	mov	r3, r9
 8113dd8:	4652      	mov	r2, sl
 8113dda:	4620      	mov	r0, r4
 8113ddc:	4639      	mov	r1, r7
 8113dde:	f7ec fdbd 	bl	810095c <__aeabi_ddiv>
 8113de2:	ec41 0b10 	vmov	d0, r0, r1
 8113de6:	b005      	add	sp, #20
 8113de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08113dec <__copybits>:
 8113dec:	3901      	subs	r1, #1
 8113dee:	b570      	push	{r4, r5, r6, lr}
 8113df0:	1149      	asrs	r1, r1, #5
 8113df2:	6914      	ldr	r4, [r2, #16]
 8113df4:	3101      	adds	r1, #1
 8113df6:	f102 0314 	add.w	r3, r2, #20
 8113dfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8113dfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8113e02:	1f05      	subs	r5, r0, #4
 8113e04:	42a3      	cmp	r3, r4
 8113e06:	d30c      	bcc.n	8113e22 <__copybits+0x36>
 8113e08:	1aa3      	subs	r3, r4, r2
 8113e0a:	3b11      	subs	r3, #17
 8113e0c:	f023 0303 	bic.w	r3, r3, #3
 8113e10:	3211      	adds	r2, #17
 8113e12:	42a2      	cmp	r2, r4
 8113e14:	bf88      	it	hi
 8113e16:	2300      	movhi	r3, #0
 8113e18:	4418      	add	r0, r3
 8113e1a:	2300      	movs	r3, #0
 8113e1c:	4288      	cmp	r0, r1
 8113e1e:	d305      	bcc.n	8113e2c <__copybits+0x40>
 8113e20:	bd70      	pop	{r4, r5, r6, pc}
 8113e22:	f853 6b04 	ldr.w	r6, [r3], #4
 8113e26:	f845 6f04 	str.w	r6, [r5, #4]!
 8113e2a:	e7eb      	b.n	8113e04 <__copybits+0x18>
 8113e2c:	f840 3b04 	str.w	r3, [r0], #4
 8113e30:	e7f4      	b.n	8113e1c <__copybits+0x30>

08113e32 <__any_on>:
 8113e32:	f100 0214 	add.w	r2, r0, #20
 8113e36:	6900      	ldr	r0, [r0, #16]
 8113e38:	114b      	asrs	r3, r1, #5
 8113e3a:	4298      	cmp	r0, r3
 8113e3c:	b510      	push	{r4, lr}
 8113e3e:	db11      	blt.n	8113e64 <__any_on+0x32>
 8113e40:	dd0a      	ble.n	8113e58 <__any_on+0x26>
 8113e42:	f011 011f 	ands.w	r1, r1, #31
 8113e46:	d007      	beq.n	8113e58 <__any_on+0x26>
 8113e48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8113e4c:	fa24 f001 	lsr.w	r0, r4, r1
 8113e50:	fa00 f101 	lsl.w	r1, r0, r1
 8113e54:	428c      	cmp	r4, r1
 8113e56:	d10b      	bne.n	8113e70 <__any_on+0x3e>
 8113e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8113e5c:	4293      	cmp	r3, r2
 8113e5e:	d803      	bhi.n	8113e68 <__any_on+0x36>
 8113e60:	2000      	movs	r0, #0
 8113e62:	bd10      	pop	{r4, pc}
 8113e64:	4603      	mov	r3, r0
 8113e66:	e7f7      	b.n	8113e58 <__any_on+0x26>
 8113e68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8113e6c:	2900      	cmp	r1, #0
 8113e6e:	d0f5      	beq.n	8113e5c <__any_on+0x2a>
 8113e70:	2001      	movs	r0, #1
 8113e72:	e7f6      	b.n	8113e62 <__any_on+0x30>

08113e74 <sulp>:
 8113e74:	b570      	push	{r4, r5, r6, lr}
 8113e76:	4604      	mov	r4, r0
 8113e78:	460d      	mov	r5, r1
 8113e7a:	ec45 4b10 	vmov	d0, r4, r5
 8113e7e:	4616      	mov	r6, r2
 8113e80:	f7ff feba 	bl	8113bf8 <__ulp>
 8113e84:	ec51 0b10 	vmov	r0, r1, d0
 8113e88:	b17e      	cbz	r6, 8113eaa <sulp+0x36>
 8113e8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8113e8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8113e92:	2b00      	cmp	r3, #0
 8113e94:	dd09      	ble.n	8113eaa <sulp+0x36>
 8113e96:	051b      	lsls	r3, r3, #20
 8113e98:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8113e9c:	2400      	movs	r4, #0
 8113e9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8113ea2:	4622      	mov	r2, r4
 8113ea4:	462b      	mov	r3, r5
 8113ea6:	f7ec fc2f 	bl	8100708 <__aeabi_dmul>
 8113eaa:	ec41 0b10 	vmov	d0, r0, r1
 8113eae:	bd70      	pop	{r4, r5, r6, pc}

08113eb0 <_strtod_l>:
 8113eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113eb4:	b09f      	sub	sp, #124	@ 0x7c
 8113eb6:	460c      	mov	r4, r1
 8113eb8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8113eba:	2200      	movs	r2, #0
 8113ebc:	921a      	str	r2, [sp, #104]	@ 0x68
 8113ebe:	9005      	str	r0, [sp, #20]
 8113ec0:	f04f 0a00 	mov.w	sl, #0
 8113ec4:	f04f 0b00 	mov.w	fp, #0
 8113ec8:	460a      	mov	r2, r1
 8113eca:	9219      	str	r2, [sp, #100]	@ 0x64
 8113ecc:	7811      	ldrb	r1, [r2, #0]
 8113ece:	292b      	cmp	r1, #43	@ 0x2b
 8113ed0:	d04a      	beq.n	8113f68 <_strtod_l+0xb8>
 8113ed2:	d838      	bhi.n	8113f46 <_strtod_l+0x96>
 8113ed4:	290d      	cmp	r1, #13
 8113ed6:	d832      	bhi.n	8113f3e <_strtod_l+0x8e>
 8113ed8:	2908      	cmp	r1, #8
 8113eda:	d832      	bhi.n	8113f42 <_strtod_l+0x92>
 8113edc:	2900      	cmp	r1, #0
 8113ede:	d03b      	beq.n	8113f58 <_strtod_l+0xa8>
 8113ee0:	2200      	movs	r2, #0
 8113ee2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8113ee4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8113ee6:	782a      	ldrb	r2, [r5, #0]
 8113ee8:	2a30      	cmp	r2, #48	@ 0x30
 8113eea:	f040 80b3 	bne.w	8114054 <_strtod_l+0x1a4>
 8113eee:	786a      	ldrb	r2, [r5, #1]
 8113ef0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8113ef4:	2a58      	cmp	r2, #88	@ 0x58
 8113ef6:	d16e      	bne.n	8113fd6 <_strtod_l+0x126>
 8113ef8:	9302      	str	r3, [sp, #8]
 8113efa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113efc:	9301      	str	r3, [sp, #4]
 8113efe:	ab1a      	add	r3, sp, #104	@ 0x68
 8113f00:	9300      	str	r3, [sp, #0]
 8113f02:	4a8e      	ldr	r2, [pc, #568]	@ (811413c <_strtod_l+0x28c>)
 8113f04:	9805      	ldr	r0, [sp, #20]
 8113f06:	ab1b      	add	r3, sp, #108	@ 0x6c
 8113f08:	a919      	add	r1, sp, #100	@ 0x64
 8113f0a:	f001 fadb 	bl	81154c4 <__gethex>
 8113f0e:	f010 060f 	ands.w	r6, r0, #15
 8113f12:	4604      	mov	r4, r0
 8113f14:	d005      	beq.n	8113f22 <_strtod_l+0x72>
 8113f16:	2e06      	cmp	r6, #6
 8113f18:	d128      	bne.n	8113f6c <_strtod_l+0xbc>
 8113f1a:	3501      	adds	r5, #1
 8113f1c:	2300      	movs	r3, #0
 8113f1e:	9519      	str	r5, [sp, #100]	@ 0x64
 8113f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8113f22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8113f24:	2b00      	cmp	r3, #0
 8113f26:	f040 858e 	bne.w	8114a46 <_strtod_l+0xb96>
 8113f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8113f2c:	b1cb      	cbz	r3, 8113f62 <_strtod_l+0xb2>
 8113f2e:	4652      	mov	r2, sl
 8113f30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8113f34:	ec43 2b10 	vmov	d0, r2, r3
 8113f38:	b01f      	add	sp, #124	@ 0x7c
 8113f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113f3e:	2920      	cmp	r1, #32
 8113f40:	d1ce      	bne.n	8113ee0 <_strtod_l+0x30>
 8113f42:	3201      	adds	r2, #1
 8113f44:	e7c1      	b.n	8113eca <_strtod_l+0x1a>
 8113f46:	292d      	cmp	r1, #45	@ 0x2d
 8113f48:	d1ca      	bne.n	8113ee0 <_strtod_l+0x30>
 8113f4a:	2101      	movs	r1, #1
 8113f4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8113f4e:	1c51      	adds	r1, r2, #1
 8113f50:	9119      	str	r1, [sp, #100]	@ 0x64
 8113f52:	7852      	ldrb	r2, [r2, #1]
 8113f54:	2a00      	cmp	r2, #0
 8113f56:	d1c5      	bne.n	8113ee4 <_strtod_l+0x34>
 8113f58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8113f5a:	9419      	str	r4, [sp, #100]	@ 0x64
 8113f5c:	2b00      	cmp	r3, #0
 8113f5e:	f040 8570 	bne.w	8114a42 <_strtod_l+0xb92>
 8113f62:	4652      	mov	r2, sl
 8113f64:	465b      	mov	r3, fp
 8113f66:	e7e5      	b.n	8113f34 <_strtod_l+0x84>
 8113f68:	2100      	movs	r1, #0
 8113f6a:	e7ef      	b.n	8113f4c <_strtod_l+0x9c>
 8113f6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8113f6e:	b13a      	cbz	r2, 8113f80 <_strtod_l+0xd0>
 8113f70:	2135      	movs	r1, #53	@ 0x35
 8113f72:	a81c      	add	r0, sp, #112	@ 0x70
 8113f74:	f7ff ff3a 	bl	8113dec <__copybits>
 8113f78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8113f7a:	9805      	ldr	r0, [sp, #20]
 8113f7c:	f7ff fb08 	bl	8113590 <_Bfree>
 8113f80:	3e01      	subs	r6, #1
 8113f82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8113f84:	2e04      	cmp	r6, #4
 8113f86:	d806      	bhi.n	8113f96 <_strtod_l+0xe6>
 8113f88:	e8df f006 	tbb	[pc, r6]
 8113f8c:	201d0314 	.word	0x201d0314
 8113f90:	14          	.byte	0x14
 8113f91:	00          	.byte	0x00
 8113f92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8113f96:	05e1      	lsls	r1, r4, #23
 8113f98:	bf48      	it	mi
 8113f9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8113f9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8113fa2:	0d1b      	lsrs	r3, r3, #20
 8113fa4:	051b      	lsls	r3, r3, #20
 8113fa6:	2b00      	cmp	r3, #0
 8113fa8:	d1bb      	bne.n	8113f22 <_strtod_l+0x72>
 8113faa:	f7fe fb05 	bl	81125b8 <__errno>
 8113fae:	2322      	movs	r3, #34	@ 0x22
 8113fb0:	6003      	str	r3, [r0, #0]
 8113fb2:	e7b6      	b.n	8113f22 <_strtod_l+0x72>
 8113fb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8113fb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8113fbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8113fc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8113fc4:	e7e7      	b.n	8113f96 <_strtod_l+0xe6>
 8113fc6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8114144 <_strtod_l+0x294>
 8113fca:	e7e4      	b.n	8113f96 <_strtod_l+0xe6>
 8113fcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8113fd0:	f04f 3aff 	mov.w	sl, #4294967295
 8113fd4:	e7df      	b.n	8113f96 <_strtod_l+0xe6>
 8113fd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8113fd8:	1c5a      	adds	r2, r3, #1
 8113fda:	9219      	str	r2, [sp, #100]	@ 0x64
 8113fdc:	785b      	ldrb	r3, [r3, #1]
 8113fde:	2b30      	cmp	r3, #48	@ 0x30
 8113fe0:	d0f9      	beq.n	8113fd6 <_strtod_l+0x126>
 8113fe2:	2b00      	cmp	r3, #0
 8113fe4:	d09d      	beq.n	8113f22 <_strtod_l+0x72>
 8113fe6:	2301      	movs	r3, #1
 8113fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8113fea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8113fec:	930c      	str	r3, [sp, #48]	@ 0x30
 8113fee:	2300      	movs	r3, #0
 8113ff0:	9308      	str	r3, [sp, #32]
 8113ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8113ff4:	461f      	mov	r7, r3
 8113ff6:	220a      	movs	r2, #10
 8113ff8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8113ffa:	7805      	ldrb	r5, [r0, #0]
 8113ffc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8114000:	b2d9      	uxtb	r1, r3
 8114002:	2909      	cmp	r1, #9
 8114004:	d928      	bls.n	8114058 <_strtod_l+0x1a8>
 8114006:	494e      	ldr	r1, [pc, #312]	@ (8114140 <_strtod_l+0x290>)
 8114008:	2201      	movs	r2, #1
 811400a:	f001 f98b 	bl	8115324 <strncmp>
 811400e:	2800      	cmp	r0, #0
 8114010:	d032      	beq.n	8114078 <_strtod_l+0x1c8>
 8114012:	2000      	movs	r0, #0
 8114014:	462a      	mov	r2, r5
 8114016:	4681      	mov	r9, r0
 8114018:	463d      	mov	r5, r7
 811401a:	4603      	mov	r3, r0
 811401c:	2a65      	cmp	r2, #101	@ 0x65
 811401e:	d001      	beq.n	8114024 <_strtod_l+0x174>
 8114020:	2a45      	cmp	r2, #69	@ 0x45
 8114022:	d114      	bne.n	811404e <_strtod_l+0x19e>
 8114024:	b91d      	cbnz	r5, 811402e <_strtod_l+0x17e>
 8114026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114028:	4302      	orrs	r2, r0
 811402a:	d095      	beq.n	8113f58 <_strtod_l+0xa8>
 811402c:	2500      	movs	r5, #0
 811402e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8114030:	1c62      	adds	r2, r4, #1
 8114032:	9219      	str	r2, [sp, #100]	@ 0x64
 8114034:	7862      	ldrb	r2, [r4, #1]
 8114036:	2a2b      	cmp	r2, #43	@ 0x2b
 8114038:	d077      	beq.n	811412a <_strtod_l+0x27a>
 811403a:	2a2d      	cmp	r2, #45	@ 0x2d
 811403c:	d07b      	beq.n	8114136 <_strtod_l+0x286>
 811403e:	f04f 0c00 	mov.w	ip, #0
 8114042:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8114046:	2909      	cmp	r1, #9
 8114048:	f240 8082 	bls.w	8114150 <_strtod_l+0x2a0>
 811404c:	9419      	str	r4, [sp, #100]	@ 0x64
 811404e:	f04f 0800 	mov.w	r8, #0
 8114052:	e0a2      	b.n	811419a <_strtod_l+0x2ea>
 8114054:	2300      	movs	r3, #0
 8114056:	e7c7      	b.n	8113fe8 <_strtod_l+0x138>
 8114058:	2f08      	cmp	r7, #8
 811405a:	bfd5      	itete	le
 811405c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 811405e:	9908      	ldrgt	r1, [sp, #32]
 8114060:	fb02 3301 	mlale	r3, r2, r1, r3
 8114064:	fb02 3301 	mlagt	r3, r2, r1, r3
 8114068:	f100 0001 	add.w	r0, r0, #1
 811406c:	bfd4      	ite	le
 811406e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8114070:	9308      	strgt	r3, [sp, #32]
 8114072:	3701      	adds	r7, #1
 8114074:	9019      	str	r0, [sp, #100]	@ 0x64
 8114076:	e7bf      	b.n	8113ff8 <_strtod_l+0x148>
 8114078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811407a:	1c5a      	adds	r2, r3, #1
 811407c:	9219      	str	r2, [sp, #100]	@ 0x64
 811407e:	785a      	ldrb	r2, [r3, #1]
 8114080:	b37f      	cbz	r7, 81140e2 <_strtod_l+0x232>
 8114082:	4681      	mov	r9, r0
 8114084:	463d      	mov	r5, r7
 8114086:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 811408a:	2b09      	cmp	r3, #9
 811408c:	d912      	bls.n	81140b4 <_strtod_l+0x204>
 811408e:	2301      	movs	r3, #1
 8114090:	e7c4      	b.n	811401c <_strtod_l+0x16c>
 8114092:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114094:	1c5a      	adds	r2, r3, #1
 8114096:	9219      	str	r2, [sp, #100]	@ 0x64
 8114098:	785a      	ldrb	r2, [r3, #1]
 811409a:	3001      	adds	r0, #1
 811409c:	2a30      	cmp	r2, #48	@ 0x30
 811409e:	d0f8      	beq.n	8114092 <_strtod_l+0x1e2>
 81140a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 81140a4:	2b08      	cmp	r3, #8
 81140a6:	f200 84d3 	bhi.w	8114a50 <_strtod_l+0xba0>
 81140aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81140ac:	930c      	str	r3, [sp, #48]	@ 0x30
 81140ae:	4681      	mov	r9, r0
 81140b0:	2000      	movs	r0, #0
 81140b2:	4605      	mov	r5, r0
 81140b4:	3a30      	subs	r2, #48	@ 0x30
 81140b6:	f100 0301 	add.w	r3, r0, #1
 81140ba:	d02a      	beq.n	8114112 <_strtod_l+0x262>
 81140bc:	4499      	add	r9, r3
 81140be:	eb00 0c05 	add.w	ip, r0, r5
 81140c2:	462b      	mov	r3, r5
 81140c4:	210a      	movs	r1, #10
 81140c6:	4563      	cmp	r3, ip
 81140c8:	d10d      	bne.n	81140e6 <_strtod_l+0x236>
 81140ca:	1c69      	adds	r1, r5, #1
 81140cc:	4401      	add	r1, r0
 81140ce:	4428      	add	r0, r5
 81140d0:	2808      	cmp	r0, #8
 81140d2:	dc16      	bgt.n	8114102 <_strtod_l+0x252>
 81140d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 81140d6:	230a      	movs	r3, #10
 81140d8:	fb03 2300 	mla	r3, r3, r0, r2
 81140dc:	930a      	str	r3, [sp, #40]	@ 0x28
 81140de:	2300      	movs	r3, #0
 81140e0:	e018      	b.n	8114114 <_strtod_l+0x264>
 81140e2:	4638      	mov	r0, r7
 81140e4:	e7da      	b.n	811409c <_strtod_l+0x1ec>
 81140e6:	2b08      	cmp	r3, #8
 81140e8:	f103 0301 	add.w	r3, r3, #1
 81140ec:	dc03      	bgt.n	81140f6 <_strtod_l+0x246>
 81140ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 81140f0:	434e      	muls	r6, r1
 81140f2:	960a      	str	r6, [sp, #40]	@ 0x28
 81140f4:	e7e7      	b.n	81140c6 <_strtod_l+0x216>
 81140f6:	2b10      	cmp	r3, #16
 81140f8:	bfde      	ittt	le
 81140fa:	9e08      	ldrle	r6, [sp, #32]
 81140fc:	434e      	mulle	r6, r1
 81140fe:	9608      	strle	r6, [sp, #32]
 8114100:	e7e1      	b.n	81140c6 <_strtod_l+0x216>
 8114102:	280f      	cmp	r0, #15
 8114104:	dceb      	bgt.n	81140de <_strtod_l+0x22e>
 8114106:	9808      	ldr	r0, [sp, #32]
 8114108:	230a      	movs	r3, #10
 811410a:	fb03 2300 	mla	r3, r3, r0, r2
 811410e:	9308      	str	r3, [sp, #32]
 8114110:	e7e5      	b.n	81140de <_strtod_l+0x22e>
 8114112:	4629      	mov	r1, r5
 8114114:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114116:	1c50      	adds	r0, r2, #1
 8114118:	9019      	str	r0, [sp, #100]	@ 0x64
 811411a:	7852      	ldrb	r2, [r2, #1]
 811411c:	4618      	mov	r0, r3
 811411e:	460d      	mov	r5, r1
 8114120:	e7b1      	b.n	8114086 <_strtod_l+0x1d6>
 8114122:	f04f 0900 	mov.w	r9, #0
 8114126:	2301      	movs	r3, #1
 8114128:	e77d      	b.n	8114026 <_strtod_l+0x176>
 811412a:	f04f 0c00 	mov.w	ip, #0
 811412e:	1ca2      	adds	r2, r4, #2
 8114130:	9219      	str	r2, [sp, #100]	@ 0x64
 8114132:	78a2      	ldrb	r2, [r4, #2]
 8114134:	e785      	b.n	8114042 <_strtod_l+0x192>
 8114136:	f04f 0c01 	mov.w	ip, #1
 811413a:	e7f8      	b.n	811412e <_strtod_l+0x27e>
 811413c:	08115f68 	.word	0x08115f68
 8114140:	08115f50 	.word	0x08115f50
 8114144:	7ff00000 	.word	0x7ff00000
 8114148:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 811414a:	1c51      	adds	r1, r2, #1
 811414c:	9119      	str	r1, [sp, #100]	@ 0x64
 811414e:	7852      	ldrb	r2, [r2, #1]
 8114150:	2a30      	cmp	r2, #48	@ 0x30
 8114152:	d0f9      	beq.n	8114148 <_strtod_l+0x298>
 8114154:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8114158:	2908      	cmp	r1, #8
 811415a:	f63f af78 	bhi.w	811404e <_strtod_l+0x19e>
 811415e:	3a30      	subs	r2, #48	@ 0x30
 8114160:	920e      	str	r2, [sp, #56]	@ 0x38
 8114162:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8114164:	920f      	str	r2, [sp, #60]	@ 0x3c
 8114166:	f04f 080a 	mov.w	r8, #10
 811416a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 811416c:	1c56      	adds	r6, r2, #1
 811416e:	9619      	str	r6, [sp, #100]	@ 0x64
 8114170:	7852      	ldrb	r2, [r2, #1]
 8114172:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8114176:	f1be 0f09 	cmp.w	lr, #9
 811417a:	d939      	bls.n	81141f0 <_strtod_l+0x340>
 811417c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 811417e:	1a76      	subs	r6, r6, r1
 8114180:	2e08      	cmp	r6, #8
 8114182:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8114186:	dc03      	bgt.n	8114190 <_strtod_l+0x2e0>
 8114188:	990e      	ldr	r1, [sp, #56]	@ 0x38
 811418a:	4588      	cmp	r8, r1
 811418c:	bfa8      	it	ge
 811418e:	4688      	movge	r8, r1
 8114190:	f1bc 0f00 	cmp.w	ip, #0
 8114194:	d001      	beq.n	811419a <_strtod_l+0x2ea>
 8114196:	f1c8 0800 	rsb	r8, r8, #0
 811419a:	2d00      	cmp	r5, #0
 811419c:	d14e      	bne.n	811423c <_strtod_l+0x38c>
 811419e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81141a0:	4308      	orrs	r0, r1
 81141a2:	f47f aebe 	bne.w	8113f22 <_strtod_l+0x72>
 81141a6:	2b00      	cmp	r3, #0
 81141a8:	f47f aed6 	bne.w	8113f58 <_strtod_l+0xa8>
 81141ac:	2a69      	cmp	r2, #105	@ 0x69
 81141ae:	d028      	beq.n	8114202 <_strtod_l+0x352>
 81141b0:	dc25      	bgt.n	81141fe <_strtod_l+0x34e>
 81141b2:	2a49      	cmp	r2, #73	@ 0x49
 81141b4:	d025      	beq.n	8114202 <_strtod_l+0x352>
 81141b6:	2a4e      	cmp	r2, #78	@ 0x4e
 81141b8:	f47f aece 	bne.w	8113f58 <_strtod_l+0xa8>
 81141bc:	499b      	ldr	r1, [pc, #620]	@ (811442c <_strtod_l+0x57c>)
 81141be:	a819      	add	r0, sp, #100	@ 0x64
 81141c0:	f001 fba2 	bl	8115908 <__match>
 81141c4:	2800      	cmp	r0, #0
 81141c6:	f43f aec7 	beq.w	8113f58 <_strtod_l+0xa8>
 81141ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81141cc:	781b      	ldrb	r3, [r3, #0]
 81141ce:	2b28      	cmp	r3, #40	@ 0x28
 81141d0:	d12e      	bne.n	8114230 <_strtod_l+0x380>
 81141d2:	4997      	ldr	r1, [pc, #604]	@ (8114430 <_strtod_l+0x580>)
 81141d4:	aa1c      	add	r2, sp, #112	@ 0x70
 81141d6:	a819      	add	r0, sp, #100	@ 0x64
 81141d8:	f001 fbaa 	bl	8115930 <__hexnan>
 81141dc:	2805      	cmp	r0, #5
 81141de:	d127      	bne.n	8114230 <_strtod_l+0x380>
 81141e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 81141e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 81141e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 81141ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 81141ee:	e698      	b.n	8113f22 <_strtod_l+0x72>
 81141f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 81141f2:	fb08 2101 	mla	r1, r8, r1, r2
 81141f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 81141fa:	920e      	str	r2, [sp, #56]	@ 0x38
 81141fc:	e7b5      	b.n	811416a <_strtod_l+0x2ba>
 81141fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8114200:	e7da      	b.n	81141b8 <_strtod_l+0x308>
 8114202:	498c      	ldr	r1, [pc, #560]	@ (8114434 <_strtod_l+0x584>)
 8114204:	a819      	add	r0, sp, #100	@ 0x64
 8114206:	f001 fb7f 	bl	8115908 <__match>
 811420a:	2800      	cmp	r0, #0
 811420c:	f43f aea4 	beq.w	8113f58 <_strtod_l+0xa8>
 8114210:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114212:	4989      	ldr	r1, [pc, #548]	@ (8114438 <_strtod_l+0x588>)
 8114214:	3b01      	subs	r3, #1
 8114216:	a819      	add	r0, sp, #100	@ 0x64
 8114218:	9319      	str	r3, [sp, #100]	@ 0x64
 811421a:	f001 fb75 	bl	8115908 <__match>
 811421e:	b910      	cbnz	r0, 8114226 <_strtod_l+0x376>
 8114220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114222:	3301      	adds	r3, #1
 8114224:	9319      	str	r3, [sp, #100]	@ 0x64
 8114226:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8114448 <_strtod_l+0x598>
 811422a:	f04f 0a00 	mov.w	sl, #0
 811422e:	e678      	b.n	8113f22 <_strtod_l+0x72>
 8114230:	4882      	ldr	r0, [pc, #520]	@ (811443c <_strtod_l+0x58c>)
 8114232:	f001 f8bd 	bl	81153b0 <nan>
 8114236:	ec5b ab10 	vmov	sl, fp, d0
 811423a:	e672      	b.n	8113f22 <_strtod_l+0x72>
 811423c:	eba8 0309 	sub.w	r3, r8, r9
 8114240:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8114242:	9309      	str	r3, [sp, #36]	@ 0x24
 8114244:	2f00      	cmp	r7, #0
 8114246:	bf08      	it	eq
 8114248:	462f      	moveq	r7, r5
 811424a:	2d10      	cmp	r5, #16
 811424c:	462c      	mov	r4, r5
 811424e:	bfa8      	it	ge
 8114250:	2410      	movge	r4, #16
 8114252:	f7ec f9df 	bl	8100614 <__aeabi_ui2d>
 8114256:	2d09      	cmp	r5, #9
 8114258:	4682      	mov	sl, r0
 811425a:	468b      	mov	fp, r1
 811425c:	dc13      	bgt.n	8114286 <_strtod_l+0x3d6>
 811425e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114260:	2b00      	cmp	r3, #0
 8114262:	f43f ae5e 	beq.w	8113f22 <_strtod_l+0x72>
 8114266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114268:	dd78      	ble.n	811435c <_strtod_l+0x4ac>
 811426a:	2b16      	cmp	r3, #22
 811426c:	dc5f      	bgt.n	811432e <_strtod_l+0x47e>
 811426e:	4974      	ldr	r1, [pc, #464]	@ (8114440 <_strtod_l+0x590>)
 8114270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8114274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8114278:	4652      	mov	r2, sl
 811427a:	465b      	mov	r3, fp
 811427c:	f7ec fa44 	bl	8100708 <__aeabi_dmul>
 8114280:	4682      	mov	sl, r0
 8114282:	468b      	mov	fp, r1
 8114284:	e64d      	b.n	8113f22 <_strtod_l+0x72>
 8114286:	4b6e      	ldr	r3, [pc, #440]	@ (8114440 <_strtod_l+0x590>)
 8114288:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 811428c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8114290:	f7ec fa3a 	bl	8100708 <__aeabi_dmul>
 8114294:	4682      	mov	sl, r0
 8114296:	9808      	ldr	r0, [sp, #32]
 8114298:	468b      	mov	fp, r1
 811429a:	f7ec f9bb 	bl	8100614 <__aeabi_ui2d>
 811429e:	4602      	mov	r2, r0
 81142a0:	460b      	mov	r3, r1
 81142a2:	4650      	mov	r0, sl
 81142a4:	4659      	mov	r1, fp
 81142a6:	f7ec f879 	bl	810039c <__adddf3>
 81142aa:	2d0f      	cmp	r5, #15
 81142ac:	4682      	mov	sl, r0
 81142ae:	468b      	mov	fp, r1
 81142b0:	ddd5      	ble.n	811425e <_strtod_l+0x3ae>
 81142b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81142b4:	1b2c      	subs	r4, r5, r4
 81142b6:	441c      	add	r4, r3
 81142b8:	2c00      	cmp	r4, #0
 81142ba:	f340 8096 	ble.w	81143ea <_strtod_l+0x53a>
 81142be:	f014 030f 	ands.w	r3, r4, #15
 81142c2:	d00a      	beq.n	81142da <_strtod_l+0x42a>
 81142c4:	495e      	ldr	r1, [pc, #376]	@ (8114440 <_strtod_l+0x590>)
 81142c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81142ca:	4652      	mov	r2, sl
 81142cc:	465b      	mov	r3, fp
 81142ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 81142d2:	f7ec fa19 	bl	8100708 <__aeabi_dmul>
 81142d6:	4682      	mov	sl, r0
 81142d8:	468b      	mov	fp, r1
 81142da:	f034 040f 	bics.w	r4, r4, #15
 81142de:	d073      	beq.n	81143c8 <_strtod_l+0x518>
 81142e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 81142e4:	dd48      	ble.n	8114378 <_strtod_l+0x4c8>
 81142e6:	2400      	movs	r4, #0
 81142e8:	46a0      	mov	r8, r4
 81142ea:	940a      	str	r4, [sp, #40]	@ 0x28
 81142ec:	46a1      	mov	r9, r4
 81142ee:	9a05      	ldr	r2, [sp, #20]
 81142f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8114448 <_strtod_l+0x598>
 81142f4:	2322      	movs	r3, #34	@ 0x22
 81142f6:	6013      	str	r3, [r2, #0]
 81142f8:	f04f 0a00 	mov.w	sl, #0
 81142fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81142fe:	2b00      	cmp	r3, #0
 8114300:	f43f ae0f 	beq.w	8113f22 <_strtod_l+0x72>
 8114304:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114306:	9805      	ldr	r0, [sp, #20]
 8114308:	f7ff f942 	bl	8113590 <_Bfree>
 811430c:	9805      	ldr	r0, [sp, #20]
 811430e:	4649      	mov	r1, r9
 8114310:	f7ff f93e 	bl	8113590 <_Bfree>
 8114314:	9805      	ldr	r0, [sp, #20]
 8114316:	4641      	mov	r1, r8
 8114318:	f7ff f93a 	bl	8113590 <_Bfree>
 811431c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 811431e:	9805      	ldr	r0, [sp, #20]
 8114320:	f7ff f936 	bl	8113590 <_Bfree>
 8114324:	9805      	ldr	r0, [sp, #20]
 8114326:	4621      	mov	r1, r4
 8114328:	f7ff f932 	bl	8113590 <_Bfree>
 811432c:	e5f9      	b.n	8113f22 <_strtod_l+0x72>
 811432e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114330:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8114334:	4293      	cmp	r3, r2
 8114336:	dbbc      	blt.n	81142b2 <_strtod_l+0x402>
 8114338:	4c41      	ldr	r4, [pc, #260]	@ (8114440 <_strtod_l+0x590>)
 811433a:	f1c5 050f 	rsb	r5, r5, #15
 811433e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8114342:	4652      	mov	r2, sl
 8114344:	465b      	mov	r3, fp
 8114346:	e9d1 0100 	ldrd	r0, r1, [r1]
 811434a:	f7ec f9dd 	bl	8100708 <__aeabi_dmul>
 811434e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114350:	1b5d      	subs	r5, r3, r5
 8114352:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8114356:	e9d4 2300 	ldrd	r2, r3, [r4]
 811435a:	e78f      	b.n	811427c <_strtod_l+0x3cc>
 811435c:	3316      	adds	r3, #22
 811435e:	dba8      	blt.n	81142b2 <_strtod_l+0x402>
 8114360:	4b37      	ldr	r3, [pc, #220]	@ (8114440 <_strtod_l+0x590>)
 8114362:	eba9 0808 	sub.w	r8, r9, r8
 8114366:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 811436a:	e9d8 2300 	ldrd	r2, r3, [r8]
 811436e:	4650      	mov	r0, sl
 8114370:	4659      	mov	r1, fp
 8114372:	f7ec faf3 	bl	810095c <__aeabi_ddiv>
 8114376:	e783      	b.n	8114280 <_strtod_l+0x3d0>
 8114378:	4b32      	ldr	r3, [pc, #200]	@ (8114444 <_strtod_l+0x594>)
 811437a:	9308      	str	r3, [sp, #32]
 811437c:	2300      	movs	r3, #0
 811437e:	1124      	asrs	r4, r4, #4
 8114380:	4650      	mov	r0, sl
 8114382:	4659      	mov	r1, fp
 8114384:	461e      	mov	r6, r3
 8114386:	2c01      	cmp	r4, #1
 8114388:	dc21      	bgt.n	81143ce <_strtod_l+0x51e>
 811438a:	b10b      	cbz	r3, 8114390 <_strtod_l+0x4e0>
 811438c:	4682      	mov	sl, r0
 811438e:	468b      	mov	fp, r1
 8114390:	492c      	ldr	r1, [pc, #176]	@ (8114444 <_strtod_l+0x594>)
 8114392:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8114396:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 811439a:	4652      	mov	r2, sl
 811439c:	465b      	mov	r3, fp
 811439e:	e9d1 0100 	ldrd	r0, r1, [r1]
 81143a2:	f7ec f9b1 	bl	8100708 <__aeabi_dmul>
 81143a6:	4b28      	ldr	r3, [pc, #160]	@ (8114448 <_strtod_l+0x598>)
 81143a8:	460a      	mov	r2, r1
 81143aa:	400b      	ands	r3, r1
 81143ac:	4927      	ldr	r1, [pc, #156]	@ (811444c <_strtod_l+0x59c>)
 81143ae:	428b      	cmp	r3, r1
 81143b0:	4682      	mov	sl, r0
 81143b2:	d898      	bhi.n	81142e6 <_strtod_l+0x436>
 81143b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 81143b8:	428b      	cmp	r3, r1
 81143ba:	bf86      	itte	hi
 81143bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8114450 <_strtod_l+0x5a0>
 81143c0:	f04f 3aff 	movhi.w	sl, #4294967295
 81143c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 81143c8:	2300      	movs	r3, #0
 81143ca:	9308      	str	r3, [sp, #32]
 81143cc:	e07a      	b.n	81144c4 <_strtod_l+0x614>
 81143ce:	07e2      	lsls	r2, r4, #31
 81143d0:	d505      	bpl.n	81143de <_strtod_l+0x52e>
 81143d2:	9b08      	ldr	r3, [sp, #32]
 81143d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81143d8:	f7ec f996 	bl	8100708 <__aeabi_dmul>
 81143dc:	2301      	movs	r3, #1
 81143de:	9a08      	ldr	r2, [sp, #32]
 81143e0:	3208      	adds	r2, #8
 81143e2:	3601      	adds	r6, #1
 81143e4:	1064      	asrs	r4, r4, #1
 81143e6:	9208      	str	r2, [sp, #32]
 81143e8:	e7cd      	b.n	8114386 <_strtod_l+0x4d6>
 81143ea:	d0ed      	beq.n	81143c8 <_strtod_l+0x518>
 81143ec:	4264      	negs	r4, r4
 81143ee:	f014 020f 	ands.w	r2, r4, #15
 81143f2:	d00a      	beq.n	811440a <_strtod_l+0x55a>
 81143f4:	4b12      	ldr	r3, [pc, #72]	@ (8114440 <_strtod_l+0x590>)
 81143f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81143fa:	4650      	mov	r0, sl
 81143fc:	4659      	mov	r1, fp
 81143fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114402:	f7ec faab 	bl	810095c <__aeabi_ddiv>
 8114406:	4682      	mov	sl, r0
 8114408:	468b      	mov	fp, r1
 811440a:	1124      	asrs	r4, r4, #4
 811440c:	d0dc      	beq.n	81143c8 <_strtod_l+0x518>
 811440e:	2c1f      	cmp	r4, #31
 8114410:	dd20      	ble.n	8114454 <_strtod_l+0x5a4>
 8114412:	2400      	movs	r4, #0
 8114414:	46a0      	mov	r8, r4
 8114416:	940a      	str	r4, [sp, #40]	@ 0x28
 8114418:	46a1      	mov	r9, r4
 811441a:	9a05      	ldr	r2, [sp, #20]
 811441c:	2322      	movs	r3, #34	@ 0x22
 811441e:	f04f 0a00 	mov.w	sl, #0
 8114422:	f04f 0b00 	mov.w	fp, #0
 8114426:	6013      	str	r3, [r2, #0]
 8114428:	e768      	b.n	81142fc <_strtod_l+0x44c>
 811442a:	bf00      	nop
 811442c:	08115d1c 	.word	0x08115d1c
 8114430:	08115f54 	.word	0x08115f54
 8114434:	08115d14 	.word	0x08115d14
 8114438:	08115d87 	.word	0x08115d87
 811443c:	08115d83 	.word	0x08115d83
 8114440:	08115e88 	.word	0x08115e88
 8114444:	08115e60 	.word	0x08115e60
 8114448:	7ff00000 	.word	0x7ff00000
 811444c:	7ca00000 	.word	0x7ca00000
 8114450:	7fefffff 	.word	0x7fefffff
 8114454:	f014 0310 	ands.w	r3, r4, #16
 8114458:	bf18      	it	ne
 811445a:	236a      	movne	r3, #106	@ 0x6a
 811445c:	4ea9      	ldr	r6, [pc, #676]	@ (8114704 <_strtod_l+0x854>)
 811445e:	9308      	str	r3, [sp, #32]
 8114460:	4650      	mov	r0, sl
 8114462:	4659      	mov	r1, fp
 8114464:	2300      	movs	r3, #0
 8114466:	07e2      	lsls	r2, r4, #31
 8114468:	d504      	bpl.n	8114474 <_strtod_l+0x5c4>
 811446a:	e9d6 2300 	ldrd	r2, r3, [r6]
 811446e:	f7ec f94b 	bl	8100708 <__aeabi_dmul>
 8114472:	2301      	movs	r3, #1
 8114474:	1064      	asrs	r4, r4, #1
 8114476:	f106 0608 	add.w	r6, r6, #8
 811447a:	d1f4      	bne.n	8114466 <_strtod_l+0x5b6>
 811447c:	b10b      	cbz	r3, 8114482 <_strtod_l+0x5d2>
 811447e:	4682      	mov	sl, r0
 8114480:	468b      	mov	fp, r1
 8114482:	9b08      	ldr	r3, [sp, #32]
 8114484:	b1b3      	cbz	r3, 81144b4 <_strtod_l+0x604>
 8114486:	f3cb 520a 	ubfx	r2, fp, #20, #11
 811448a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 811448e:	2b00      	cmp	r3, #0
 8114490:	4659      	mov	r1, fp
 8114492:	dd0f      	ble.n	81144b4 <_strtod_l+0x604>
 8114494:	2b1f      	cmp	r3, #31
 8114496:	dd55      	ble.n	8114544 <_strtod_l+0x694>
 8114498:	2b34      	cmp	r3, #52	@ 0x34
 811449a:	bfde      	ittt	le
 811449c:	f04f 33ff 	movle.w	r3, #4294967295
 81144a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 81144a4:	4093      	lslle	r3, r2
 81144a6:	f04f 0a00 	mov.w	sl, #0
 81144aa:	bfcc      	ite	gt
 81144ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 81144b0:	ea03 0b01 	andle.w	fp, r3, r1
 81144b4:	2200      	movs	r2, #0
 81144b6:	2300      	movs	r3, #0
 81144b8:	4650      	mov	r0, sl
 81144ba:	4659      	mov	r1, fp
 81144bc:	f7ec fb8c 	bl	8100bd8 <__aeabi_dcmpeq>
 81144c0:	2800      	cmp	r0, #0
 81144c2:	d1a6      	bne.n	8114412 <_strtod_l+0x562>
 81144c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81144c6:	9300      	str	r3, [sp, #0]
 81144c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 81144ca:	9805      	ldr	r0, [sp, #20]
 81144cc:	462b      	mov	r3, r5
 81144ce:	463a      	mov	r2, r7
 81144d0:	f7ff f8c6 	bl	8113660 <__s2b>
 81144d4:	900a      	str	r0, [sp, #40]	@ 0x28
 81144d6:	2800      	cmp	r0, #0
 81144d8:	f43f af05 	beq.w	81142e6 <_strtod_l+0x436>
 81144dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81144de:	2a00      	cmp	r2, #0
 81144e0:	eba9 0308 	sub.w	r3, r9, r8
 81144e4:	bfa8      	it	ge
 81144e6:	2300      	movge	r3, #0
 81144e8:	9312      	str	r3, [sp, #72]	@ 0x48
 81144ea:	2400      	movs	r4, #0
 81144ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 81144f0:	9316      	str	r3, [sp, #88]	@ 0x58
 81144f2:	46a0      	mov	r8, r4
 81144f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81144f6:	9805      	ldr	r0, [sp, #20]
 81144f8:	6859      	ldr	r1, [r3, #4]
 81144fa:	f7ff f809 	bl	8113510 <_Balloc>
 81144fe:	4681      	mov	r9, r0
 8114500:	2800      	cmp	r0, #0
 8114502:	f43f aef4 	beq.w	81142ee <_strtod_l+0x43e>
 8114506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8114508:	691a      	ldr	r2, [r3, #16]
 811450a:	3202      	adds	r2, #2
 811450c:	f103 010c 	add.w	r1, r3, #12
 8114510:	0092      	lsls	r2, r2, #2
 8114512:	300c      	adds	r0, #12
 8114514:	f7fe f87d 	bl	8112612 <memcpy>
 8114518:	ec4b ab10 	vmov	d0, sl, fp
 811451c:	9805      	ldr	r0, [sp, #20]
 811451e:	aa1c      	add	r2, sp, #112	@ 0x70
 8114520:	a91b      	add	r1, sp, #108	@ 0x6c
 8114522:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8114526:	f7ff fbd7 	bl	8113cd8 <__d2b>
 811452a:	901a      	str	r0, [sp, #104]	@ 0x68
 811452c:	2800      	cmp	r0, #0
 811452e:	f43f aede 	beq.w	81142ee <_strtod_l+0x43e>
 8114532:	9805      	ldr	r0, [sp, #20]
 8114534:	2101      	movs	r1, #1
 8114536:	f7ff f929 	bl	811378c <__i2b>
 811453a:	4680      	mov	r8, r0
 811453c:	b948      	cbnz	r0, 8114552 <_strtod_l+0x6a2>
 811453e:	f04f 0800 	mov.w	r8, #0
 8114542:	e6d4      	b.n	81142ee <_strtod_l+0x43e>
 8114544:	f04f 32ff 	mov.w	r2, #4294967295
 8114548:	fa02 f303 	lsl.w	r3, r2, r3
 811454c:	ea03 0a0a 	and.w	sl, r3, sl
 8114550:	e7b0      	b.n	81144b4 <_strtod_l+0x604>
 8114552:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8114554:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8114556:	2d00      	cmp	r5, #0
 8114558:	bfab      	itete	ge
 811455a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 811455c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 811455e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8114560:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8114562:	bfac      	ite	ge
 8114564:	18ef      	addge	r7, r5, r3
 8114566:	1b5e      	sublt	r6, r3, r5
 8114568:	9b08      	ldr	r3, [sp, #32]
 811456a:	1aed      	subs	r5, r5, r3
 811456c:	4415      	add	r5, r2
 811456e:	4b66      	ldr	r3, [pc, #408]	@ (8114708 <_strtod_l+0x858>)
 8114570:	3d01      	subs	r5, #1
 8114572:	429d      	cmp	r5, r3
 8114574:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8114578:	da50      	bge.n	811461c <_strtod_l+0x76c>
 811457a:	1b5b      	subs	r3, r3, r5
 811457c:	2b1f      	cmp	r3, #31
 811457e:	eba2 0203 	sub.w	r2, r2, r3
 8114582:	f04f 0101 	mov.w	r1, #1
 8114586:	dc3d      	bgt.n	8114604 <_strtod_l+0x754>
 8114588:	fa01 f303 	lsl.w	r3, r1, r3
 811458c:	9313      	str	r3, [sp, #76]	@ 0x4c
 811458e:	2300      	movs	r3, #0
 8114590:	9310      	str	r3, [sp, #64]	@ 0x40
 8114592:	18bd      	adds	r5, r7, r2
 8114594:	9b08      	ldr	r3, [sp, #32]
 8114596:	42af      	cmp	r7, r5
 8114598:	4416      	add	r6, r2
 811459a:	441e      	add	r6, r3
 811459c:	463b      	mov	r3, r7
 811459e:	bfa8      	it	ge
 81145a0:	462b      	movge	r3, r5
 81145a2:	42b3      	cmp	r3, r6
 81145a4:	bfa8      	it	ge
 81145a6:	4633      	movge	r3, r6
 81145a8:	2b00      	cmp	r3, #0
 81145aa:	bfc2      	ittt	gt
 81145ac:	1aed      	subgt	r5, r5, r3
 81145ae:	1af6      	subgt	r6, r6, r3
 81145b0:	1aff      	subgt	r7, r7, r3
 81145b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81145b4:	2b00      	cmp	r3, #0
 81145b6:	dd16      	ble.n	81145e6 <_strtod_l+0x736>
 81145b8:	4641      	mov	r1, r8
 81145ba:	9805      	ldr	r0, [sp, #20]
 81145bc:	461a      	mov	r2, r3
 81145be:	f7ff f9a5 	bl	811390c <__pow5mult>
 81145c2:	4680      	mov	r8, r0
 81145c4:	2800      	cmp	r0, #0
 81145c6:	d0ba      	beq.n	811453e <_strtod_l+0x68e>
 81145c8:	4601      	mov	r1, r0
 81145ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 81145cc:	9805      	ldr	r0, [sp, #20]
 81145ce:	f7ff f8f3 	bl	81137b8 <__multiply>
 81145d2:	900e      	str	r0, [sp, #56]	@ 0x38
 81145d4:	2800      	cmp	r0, #0
 81145d6:	f43f ae8a 	beq.w	81142ee <_strtod_l+0x43e>
 81145da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81145dc:	9805      	ldr	r0, [sp, #20]
 81145de:	f7fe ffd7 	bl	8113590 <_Bfree>
 81145e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81145e4:	931a      	str	r3, [sp, #104]	@ 0x68
 81145e6:	2d00      	cmp	r5, #0
 81145e8:	dc1d      	bgt.n	8114626 <_strtod_l+0x776>
 81145ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81145ec:	2b00      	cmp	r3, #0
 81145ee:	dd23      	ble.n	8114638 <_strtod_l+0x788>
 81145f0:	4649      	mov	r1, r9
 81145f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 81145f4:	9805      	ldr	r0, [sp, #20]
 81145f6:	f7ff f989 	bl	811390c <__pow5mult>
 81145fa:	4681      	mov	r9, r0
 81145fc:	b9e0      	cbnz	r0, 8114638 <_strtod_l+0x788>
 81145fe:	f04f 0900 	mov.w	r9, #0
 8114602:	e674      	b.n	81142ee <_strtod_l+0x43e>
 8114604:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8114608:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 811460c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8114610:	35e2      	adds	r5, #226	@ 0xe2
 8114612:	fa01 f305 	lsl.w	r3, r1, r5
 8114616:	9310      	str	r3, [sp, #64]	@ 0x40
 8114618:	9113      	str	r1, [sp, #76]	@ 0x4c
 811461a:	e7ba      	b.n	8114592 <_strtod_l+0x6e2>
 811461c:	2300      	movs	r3, #0
 811461e:	9310      	str	r3, [sp, #64]	@ 0x40
 8114620:	2301      	movs	r3, #1
 8114622:	9313      	str	r3, [sp, #76]	@ 0x4c
 8114624:	e7b5      	b.n	8114592 <_strtod_l+0x6e2>
 8114626:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114628:	9805      	ldr	r0, [sp, #20]
 811462a:	462a      	mov	r2, r5
 811462c:	f7ff f9c8 	bl	81139c0 <__lshift>
 8114630:	901a      	str	r0, [sp, #104]	@ 0x68
 8114632:	2800      	cmp	r0, #0
 8114634:	d1d9      	bne.n	81145ea <_strtod_l+0x73a>
 8114636:	e65a      	b.n	81142ee <_strtod_l+0x43e>
 8114638:	2e00      	cmp	r6, #0
 811463a:	dd07      	ble.n	811464c <_strtod_l+0x79c>
 811463c:	4649      	mov	r1, r9
 811463e:	9805      	ldr	r0, [sp, #20]
 8114640:	4632      	mov	r2, r6
 8114642:	f7ff f9bd 	bl	81139c0 <__lshift>
 8114646:	4681      	mov	r9, r0
 8114648:	2800      	cmp	r0, #0
 811464a:	d0d8      	beq.n	81145fe <_strtod_l+0x74e>
 811464c:	2f00      	cmp	r7, #0
 811464e:	dd08      	ble.n	8114662 <_strtod_l+0x7b2>
 8114650:	4641      	mov	r1, r8
 8114652:	9805      	ldr	r0, [sp, #20]
 8114654:	463a      	mov	r2, r7
 8114656:	f7ff f9b3 	bl	81139c0 <__lshift>
 811465a:	4680      	mov	r8, r0
 811465c:	2800      	cmp	r0, #0
 811465e:	f43f ae46 	beq.w	81142ee <_strtod_l+0x43e>
 8114662:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8114664:	9805      	ldr	r0, [sp, #20]
 8114666:	464a      	mov	r2, r9
 8114668:	f7ff fa32 	bl	8113ad0 <__mdiff>
 811466c:	4604      	mov	r4, r0
 811466e:	2800      	cmp	r0, #0
 8114670:	f43f ae3d 	beq.w	81142ee <_strtod_l+0x43e>
 8114674:	68c3      	ldr	r3, [r0, #12]
 8114676:	930f      	str	r3, [sp, #60]	@ 0x3c
 8114678:	2300      	movs	r3, #0
 811467a:	60c3      	str	r3, [r0, #12]
 811467c:	4641      	mov	r1, r8
 811467e:	f7ff fa0b 	bl	8113a98 <__mcmp>
 8114682:	2800      	cmp	r0, #0
 8114684:	da46      	bge.n	8114714 <_strtod_l+0x864>
 8114686:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114688:	ea53 030a 	orrs.w	r3, r3, sl
 811468c:	d16c      	bne.n	8114768 <_strtod_l+0x8b8>
 811468e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8114692:	2b00      	cmp	r3, #0
 8114694:	d168      	bne.n	8114768 <_strtod_l+0x8b8>
 8114696:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 811469a:	0d1b      	lsrs	r3, r3, #20
 811469c:	051b      	lsls	r3, r3, #20
 811469e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81146a2:	d961      	bls.n	8114768 <_strtod_l+0x8b8>
 81146a4:	6963      	ldr	r3, [r4, #20]
 81146a6:	b913      	cbnz	r3, 81146ae <_strtod_l+0x7fe>
 81146a8:	6923      	ldr	r3, [r4, #16]
 81146aa:	2b01      	cmp	r3, #1
 81146ac:	dd5c      	ble.n	8114768 <_strtod_l+0x8b8>
 81146ae:	4621      	mov	r1, r4
 81146b0:	2201      	movs	r2, #1
 81146b2:	9805      	ldr	r0, [sp, #20]
 81146b4:	f7ff f984 	bl	81139c0 <__lshift>
 81146b8:	4641      	mov	r1, r8
 81146ba:	4604      	mov	r4, r0
 81146bc:	f7ff f9ec 	bl	8113a98 <__mcmp>
 81146c0:	2800      	cmp	r0, #0
 81146c2:	dd51      	ble.n	8114768 <_strtod_l+0x8b8>
 81146c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81146c8:	9a08      	ldr	r2, [sp, #32]
 81146ca:	0d1b      	lsrs	r3, r3, #20
 81146cc:	051b      	lsls	r3, r3, #20
 81146ce:	2a00      	cmp	r2, #0
 81146d0:	d06b      	beq.n	81147aa <_strtod_l+0x8fa>
 81146d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81146d6:	d868      	bhi.n	81147aa <_strtod_l+0x8fa>
 81146d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 81146dc:	f67f ae9d 	bls.w	811441a <_strtod_l+0x56a>
 81146e0:	4b0a      	ldr	r3, [pc, #40]	@ (811470c <_strtod_l+0x85c>)
 81146e2:	4650      	mov	r0, sl
 81146e4:	4659      	mov	r1, fp
 81146e6:	2200      	movs	r2, #0
 81146e8:	f7ec f80e 	bl	8100708 <__aeabi_dmul>
 81146ec:	4b08      	ldr	r3, [pc, #32]	@ (8114710 <_strtod_l+0x860>)
 81146ee:	400b      	ands	r3, r1
 81146f0:	4682      	mov	sl, r0
 81146f2:	468b      	mov	fp, r1
 81146f4:	2b00      	cmp	r3, #0
 81146f6:	f47f ae05 	bne.w	8114304 <_strtod_l+0x454>
 81146fa:	9a05      	ldr	r2, [sp, #20]
 81146fc:	2322      	movs	r3, #34	@ 0x22
 81146fe:	6013      	str	r3, [r2, #0]
 8114700:	e600      	b.n	8114304 <_strtod_l+0x454>
 8114702:	bf00      	nop
 8114704:	08115f80 	.word	0x08115f80
 8114708:	fffffc02 	.word	0xfffffc02
 811470c:	39500000 	.word	0x39500000
 8114710:	7ff00000 	.word	0x7ff00000
 8114714:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8114718:	d165      	bne.n	81147e6 <_strtod_l+0x936>
 811471a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 811471c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8114720:	b35a      	cbz	r2, 811477a <_strtod_l+0x8ca>
 8114722:	4a9f      	ldr	r2, [pc, #636]	@ (81149a0 <_strtod_l+0xaf0>)
 8114724:	4293      	cmp	r3, r2
 8114726:	d12b      	bne.n	8114780 <_strtod_l+0x8d0>
 8114728:	9b08      	ldr	r3, [sp, #32]
 811472a:	4651      	mov	r1, sl
 811472c:	b303      	cbz	r3, 8114770 <_strtod_l+0x8c0>
 811472e:	4b9d      	ldr	r3, [pc, #628]	@ (81149a4 <_strtod_l+0xaf4>)
 8114730:	465a      	mov	r2, fp
 8114732:	4013      	ands	r3, r2
 8114734:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8114738:	f04f 32ff 	mov.w	r2, #4294967295
 811473c:	d81b      	bhi.n	8114776 <_strtod_l+0x8c6>
 811473e:	0d1b      	lsrs	r3, r3, #20
 8114740:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8114744:	fa02 f303 	lsl.w	r3, r2, r3
 8114748:	4299      	cmp	r1, r3
 811474a:	d119      	bne.n	8114780 <_strtod_l+0x8d0>
 811474c:	4b96      	ldr	r3, [pc, #600]	@ (81149a8 <_strtod_l+0xaf8>)
 811474e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8114750:	429a      	cmp	r2, r3
 8114752:	d102      	bne.n	811475a <_strtod_l+0x8aa>
 8114754:	3101      	adds	r1, #1
 8114756:	f43f adca 	beq.w	81142ee <_strtod_l+0x43e>
 811475a:	4b92      	ldr	r3, [pc, #584]	@ (81149a4 <_strtod_l+0xaf4>)
 811475c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811475e:	401a      	ands	r2, r3
 8114760:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8114764:	f04f 0a00 	mov.w	sl, #0
 8114768:	9b08      	ldr	r3, [sp, #32]
 811476a:	2b00      	cmp	r3, #0
 811476c:	d1b8      	bne.n	81146e0 <_strtod_l+0x830>
 811476e:	e5c9      	b.n	8114304 <_strtod_l+0x454>
 8114770:	f04f 33ff 	mov.w	r3, #4294967295
 8114774:	e7e8      	b.n	8114748 <_strtod_l+0x898>
 8114776:	4613      	mov	r3, r2
 8114778:	e7e6      	b.n	8114748 <_strtod_l+0x898>
 811477a:	ea53 030a 	orrs.w	r3, r3, sl
 811477e:	d0a1      	beq.n	81146c4 <_strtod_l+0x814>
 8114780:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8114782:	b1db      	cbz	r3, 81147bc <_strtod_l+0x90c>
 8114784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8114786:	4213      	tst	r3, r2
 8114788:	d0ee      	beq.n	8114768 <_strtod_l+0x8b8>
 811478a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811478c:	9a08      	ldr	r2, [sp, #32]
 811478e:	4650      	mov	r0, sl
 8114790:	4659      	mov	r1, fp
 8114792:	b1bb      	cbz	r3, 81147c4 <_strtod_l+0x914>
 8114794:	f7ff fb6e 	bl	8113e74 <sulp>
 8114798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811479c:	ec53 2b10 	vmov	r2, r3, d0
 81147a0:	f7eb fdfc 	bl	810039c <__adddf3>
 81147a4:	4682      	mov	sl, r0
 81147a6:	468b      	mov	fp, r1
 81147a8:	e7de      	b.n	8114768 <_strtod_l+0x8b8>
 81147aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 81147ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 81147b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 81147b6:	f04f 3aff 	mov.w	sl, #4294967295
 81147ba:	e7d5      	b.n	8114768 <_strtod_l+0x8b8>
 81147bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81147be:	ea13 0f0a 	tst.w	r3, sl
 81147c2:	e7e1      	b.n	8114788 <_strtod_l+0x8d8>
 81147c4:	f7ff fb56 	bl	8113e74 <sulp>
 81147c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81147cc:	ec53 2b10 	vmov	r2, r3, d0
 81147d0:	f7eb fde2 	bl	8100398 <__aeabi_dsub>
 81147d4:	2200      	movs	r2, #0
 81147d6:	2300      	movs	r3, #0
 81147d8:	4682      	mov	sl, r0
 81147da:	468b      	mov	fp, r1
 81147dc:	f7ec f9fc 	bl	8100bd8 <__aeabi_dcmpeq>
 81147e0:	2800      	cmp	r0, #0
 81147e2:	d0c1      	beq.n	8114768 <_strtod_l+0x8b8>
 81147e4:	e619      	b.n	811441a <_strtod_l+0x56a>
 81147e6:	4641      	mov	r1, r8
 81147e8:	4620      	mov	r0, r4
 81147ea:	f7ff facd 	bl	8113d88 <__ratio>
 81147ee:	ec57 6b10 	vmov	r6, r7, d0
 81147f2:	2200      	movs	r2, #0
 81147f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81147f8:	4630      	mov	r0, r6
 81147fa:	4639      	mov	r1, r7
 81147fc:	f7ec fa00 	bl	8100c00 <__aeabi_dcmple>
 8114800:	2800      	cmp	r0, #0
 8114802:	d06f      	beq.n	81148e4 <_strtod_l+0xa34>
 8114804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8114806:	2b00      	cmp	r3, #0
 8114808:	d17a      	bne.n	8114900 <_strtod_l+0xa50>
 811480a:	f1ba 0f00 	cmp.w	sl, #0
 811480e:	d158      	bne.n	81148c2 <_strtod_l+0xa12>
 8114810:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8114812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8114816:	2b00      	cmp	r3, #0
 8114818:	d15a      	bne.n	81148d0 <_strtod_l+0xa20>
 811481a:	4b64      	ldr	r3, [pc, #400]	@ (81149ac <_strtod_l+0xafc>)
 811481c:	2200      	movs	r2, #0
 811481e:	4630      	mov	r0, r6
 8114820:	4639      	mov	r1, r7
 8114822:	f7ec f9e3 	bl	8100bec <__aeabi_dcmplt>
 8114826:	2800      	cmp	r0, #0
 8114828:	d159      	bne.n	81148de <_strtod_l+0xa2e>
 811482a:	4630      	mov	r0, r6
 811482c:	4639      	mov	r1, r7
 811482e:	4b60      	ldr	r3, [pc, #384]	@ (81149b0 <_strtod_l+0xb00>)
 8114830:	2200      	movs	r2, #0
 8114832:	f7eb ff69 	bl	8100708 <__aeabi_dmul>
 8114836:	4606      	mov	r6, r0
 8114838:	460f      	mov	r7, r1
 811483a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 811483e:	9606      	str	r6, [sp, #24]
 8114840:	9307      	str	r3, [sp, #28]
 8114842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8114846:	4d57      	ldr	r5, [pc, #348]	@ (81149a4 <_strtod_l+0xaf4>)
 8114848:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 811484c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811484e:	401d      	ands	r5, r3
 8114850:	4b58      	ldr	r3, [pc, #352]	@ (81149b4 <_strtod_l+0xb04>)
 8114852:	429d      	cmp	r5, r3
 8114854:	f040 80b2 	bne.w	81149bc <_strtod_l+0xb0c>
 8114858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811485a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 811485e:	ec4b ab10 	vmov	d0, sl, fp
 8114862:	f7ff f9c9 	bl	8113bf8 <__ulp>
 8114866:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 811486a:	ec51 0b10 	vmov	r0, r1, d0
 811486e:	f7eb ff4b 	bl	8100708 <__aeabi_dmul>
 8114872:	4652      	mov	r2, sl
 8114874:	465b      	mov	r3, fp
 8114876:	f7eb fd91 	bl	810039c <__adddf3>
 811487a:	460b      	mov	r3, r1
 811487c:	4949      	ldr	r1, [pc, #292]	@ (81149a4 <_strtod_l+0xaf4>)
 811487e:	4a4e      	ldr	r2, [pc, #312]	@ (81149b8 <_strtod_l+0xb08>)
 8114880:	4019      	ands	r1, r3
 8114882:	4291      	cmp	r1, r2
 8114884:	4682      	mov	sl, r0
 8114886:	d942      	bls.n	811490e <_strtod_l+0xa5e>
 8114888:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 811488a:	4b47      	ldr	r3, [pc, #284]	@ (81149a8 <_strtod_l+0xaf8>)
 811488c:	429a      	cmp	r2, r3
 811488e:	d103      	bne.n	8114898 <_strtod_l+0x9e8>
 8114890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8114892:	3301      	adds	r3, #1
 8114894:	f43f ad2b 	beq.w	81142ee <_strtod_l+0x43e>
 8114898:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 81149a8 <_strtod_l+0xaf8>
 811489c:	f04f 3aff 	mov.w	sl, #4294967295
 81148a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81148a2:	9805      	ldr	r0, [sp, #20]
 81148a4:	f7fe fe74 	bl	8113590 <_Bfree>
 81148a8:	9805      	ldr	r0, [sp, #20]
 81148aa:	4649      	mov	r1, r9
 81148ac:	f7fe fe70 	bl	8113590 <_Bfree>
 81148b0:	9805      	ldr	r0, [sp, #20]
 81148b2:	4641      	mov	r1, r8
 81148b4:	f7fe fe6c 	bl	8113590 <_Bfree>
 81148b8:	9805      	ldr	r0, [sp, #20]
 81148ba:	4621      	mov	r1, r4
 81148bc:	f7fe fe68 	bl	8113590 <_Bfree>
 81148c0:	e618      	b.n	81144f4 <_strtod_l+0x644>
 81148c2:	f1ba 0f01 	cmp.w	sl, #1
 81148c6:	d103      	bne.n	81148d0 <_strtod_l+0xa20>
 81148c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81148ca:	2b00      	cmp	r3, #0
 81148cc:	f43f ada5 	beq.w	811441a <_strtod_l+0x56a>
 81148d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8114980 <_strtod_l+0xad0>
 81148d4:	4f35      	ldr	r7, [pc, #212]	@ (81149ac <_strtod_l+0xafc>)
 81148d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 81148da:	2600      	movs	r6, #0
 81148dc:	e7b1      	b.n	8114842 <_strtod_l+0x992>
 81148de:	4f34      	ldr	r7, [pc, #208]	@ (81149b0 <_strtod_l+0xb00>)
 81148e0:	2600      	movs	r6, #0
 81148e2:	e7aa      	b.n	811483a <_strtod_l+0x98a>
 81148e4:	4b32      	ldr	r3, [pc, #200]	@ (81149b0 <_strtod_l+0xb00>)
 81148e6:	4630      	mov	r0, r6
 81148e8:	4639      	mov	r1, r7
 81148ea:	2200      	movs	r2, #0
 81148ec:	f7eb ff0c 	bl	8100708 <__aeabi_dmul>
 81148f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81148f2:	4606      	mov	r6, r0
 81148f4:	460f      	mov	r7, r1
 81148f6:	2b00      	cmp	r3, #0
 81148f8:	d09f      	beq.n	811483a <_strtod_l+0x98a>
 81148fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 81148fe:	e7a0      	b.n	8114842 <_strtod_l+0x992>
 8114900:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8114988 <_strtod_l+0xad8>
 8114904:	ed8d 7b06 	vstr	d7, [sp, #24]
 8114908:	ec57 6b17 	vmov	r6, r7, d7
 811490c:	e799      	b.n	8114842 <_strtod_l+0x992>
 811490e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8114912:	9b08      	ldr	r3, [sp, #32]
 8114914:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8114918:	2b00      	cmp	r3, #0
 811491a:	d1c1      	bne.n	81148a0 <_strtod_l+0x9f0>
 811491c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8114920:	0d1b      	lsrs	r3, r3, #20
 8114922:	051b      	lsls	r3, r3, #20
 8114924:	429d      	cmp	r5, r3
 8114926:	d1bb      	bne.n	81148a0 <_strtod_l+0x9f0>
 8114928:	4630      	mov	r0, r6
 811492a:	4639      	mov	r1, r7
 811492c:	f7ec fa4c 	bl	8100dc8 <__aeabi_d2lz>
 8114930:	f7eb febc 	bl	81006ac <__aeabi_l2d>
 8114934:	4602      	mov	r2, r0
 8114936:	460b      	mov	r3, r1
 8114938:	4630      	mov	r0, r6
 811493a:	4639      	mov	r1, r7
 811493c:	f7eb fd2c 	bl	8100398 <__aeabi_dsub>
 8114940:	460b      	mov	r3, r1
 8114942:	4602      	mov	r2, r0
 8114944:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8114948:	f3cb 0613 	ubfx	r6, fp, #0, #20
 811494c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811494e:	ea46 060a 	orr.w	r6, r6, sl
 8114952:	431e      	orrs	r6, r3
 8114954:	d06f      	beq.n	8114a36 <_strtod_l+0xb86>
 8114956:	a30e      	add	r3, pc, #56	@ (adr r3, 8114990 <_strtod_l+0xae0>)
 8114958:	e9d3 2300 	ldrd	r2, r3, [r3]
 811495c:	f7ec f946 	bl	8100bec <__aeabi_dcmplt>
 8114960:	2800      	cmp	r0, #0
 8114962:	f47f accf 	bne.w	8114304 <_strtod_l+0x454>
 8114966:	a30c      	add	r3, pc, #48	@ (adr r3, 8114998 <_strtod_l+0xae8>)
 8114968:	e9d3 2300 	ldrd	r2, r3, [r3]
 811496c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8114970:	f7ec f95a 	bl	8100c28 <__aeabi_dcmpgt>
 8114974:	2800      	cmp	r0, #0
 8114976:	d093      	beq.n	81148a0 <_strtod_l+0x9f0>
 8114978:	e4c4      	b.n	8114304 <_strtod_l+0x454>
 811497a:	bf00      	nop
 811497c:	f3af 8000 	nop.w
 8114980:	00000000 	.word	0x00000000
 8114984:	bff00000 	.word	0xbff00000
 8114988:	00000000 	.word	0x00000000
 811498c:	3ff00000 	.word	0x3ff00000
 8114990:	94a03595 	.word	0x94a03595
 8114994:	3fdfffff 	.word	0x3fdfffff
 8114998:	35afe535 	.word	0x35afe535
 811499c:	3fe00000 	.word	0x3fe00000
 81149a0:	000fffff 	.word	0x000fffff
 81149a4:	7ff00000 	.word	0x7ff00000
 81149a8:	7fefffff 	.word	0x7fefffff
 81149ac:	3ff00000 	.word	0x3ff00000
 81149b0:	3fe00000 	.word	0x3fe00000
 81149b4:	7fe00000 	.word	0x7fe00000
 81149b8:	7c9fffff 	.word	0x7c9fffff
 81149bc:	9b08      	ldr	r3, [sp, #32]
 81149be:	b323      	cbz	r3, 8114a0a <_strtod_l+0xb5a>
 81149c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 81149c4:	d821      	bhi.n	8114a0a <_strtod_l+0xb5a>
 81149c6:	a328      	add	r3, pc, #160	@ (adr r3, 8114a68 <_strtod_l+0xbb8>)
 81149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81149cc:	4630      	mov	r0, r6
 81149ce:	4639      	mov	r1, r7
 81149d0:	f7ec f916 	bl	8100c00 <__aeabi_dcmple>
 81149d4:	b1a0      	cbz	r0, 8114a00 <_strtod_l+0xb50>
 81149d6:	4639      	mov	r1, r7
 81149d8:	4630      	mov	r0, r6
 81149da:	f7ec f96d 	bl	8100cb8 <__aeabi_d2uiz>
 81149de:	2801      	cmp	r0, #1
 81149e0:	bf38      	it	cc
 81149e2:	2001      	movcc	r0, #1
 81149e4:	f7eb fe16 	bl	8100614 <__aeabi_ui2d>
 81149e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81149ea:	4606      	mov	r6, r0
 81149ec:	460f      	mov	r7, r1
 81149ee:	b9fb      	cbnz	r3, 8114a30 <_strtod_l+0xb80>
 81149f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81149f4:	9014      	str	r0, [sp, #80]	@ 0x50
 81149f6:	9315      	str	r3, [sp, #84]	@ 0x54
 81149f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 81149fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8114a00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8114a02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8114a06:	1b5b      	subs	r3, r3, r5
 8114a08:	9311      	str	r3, [sp, #68]	@ 0x44
 8114a0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8114a0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8114a12:	f7ff f8f1 	bl	8113bf8 <__ulp>
 8114a16:	4650      	mov	r0, sl
 8114a18:	ec53 2b10 	vmov	r2, r3, d0
 8114a1c:	4659      	mov	r1, fp
 8114a1e:	f7eb fe73 	bl	8100708 <__aeabi_dmul>
 8114a22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8114a26:	f7eb fcb9 	bl	810039c <__adddf3>
 8114a2a:	4682      	mov	sl, r0
 8114a2c:	468b      	mov	fp, r1
 8114a2e:	e770      	b.n	8114912 <_strtod_l+0xa62>
 8114a30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8114a34:	e7e0      	b.n	81149f8 <_strtod_l+0xb48>
 8114a36:	a30e      	add	r3, pc, #56	@ (adr r3, 8114a70 <_strtod_l+0xbc0>)
 8114a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8114a3c:	f7ec f8d6 	bl	8100bec <__aeabi_dcmplt>
 8114a40:	e798      	b.n	8114974 <_strtod_l+0xac4>
 8114a42:	2300      	movs	r3, #0
 8114a44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8114a46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8114a48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8114a4a:	6013      	str	r3, [r2, #0]
 8114a4c:	f7ff ba6d 	b.w	8113f2a <_strtod_l+0x7a>
 8114a50:	2a65      	cmp	r2, #101	@ 0x65
 8114a52:	f43f ab66 	beq.w	8114122 <_strtod_l+0x272>
 8114a56:	2a45      	cmp	r2, #69	@ 0x45
 8114a58:	f43f ab63 	beq.w	8114122 <_strtod_l+0x272>
 8114a5c:	2301      	movs	r3, #1
 8114a5e:	f7ff bb9e 	b.w	811419e <_strtod_l+0x2ee>
 8114a62:	bf00      	nop
 8114a64:	f3af 8000 	nop.w
 8114a68:	ffc00000 	.word	0xffc00000
 8114a6c:	41dfffff 	.word	0x41dfffff
 8114a70:	94a03595 	.word	0x94a03595
 8114a74:	3fcfffff 	.word	0x3fcfffff

08114a78 <_strtod_r>:
 8114a78:	4b01      	ldr	r3, [pc, #4]	@ (8114a80 <_strtod_r+0x8>)
 8114a7a:	f7ff ba19 	b.w	8113eb0 <_strtod_l>
 8114a7e:	bf00      	nop
 8114a80:	10000100 	.word	0x10000100

08114a84 <_strtol_l.constprop.0>:
 8114a84:	2b24      	cmp	r3, #36	@ 0x24
 8114a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114a8a:	4686      	mov	lr, r0
 8114a8c:	4690      	mov	r8, r2
 8114a8e:	d801      	bhi.n	8114a94 <_strtol_l.constprop.0+0x10>
 8114a90:	2b01      	cmp	r3, #1
 8114a92:	d106      	bne.n	8114aa2 <_strtol_l.constprop.0+0x1e>
 8114a94:	f7fd fd90 	bl	81125b8 <__errno>
 8114a98:	2316      	movs	r3, #22
 8114a9a:	6003      	str	r3, [r0, #0]
 8114a9c:	2000      	movs	r0, #0
 8114a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8114aa2:	4834      	ldr	r0, [pc, #208]	@ (8114b74 <_strtol_l.constprop.0+0xf0>)
 8114aa4:	460d      	mov	r5, r1
 8114aa6:	462a      	mov	r2, r5
 8114aa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8114aac:	5d06      	ldrb	r6, [r0, r4]
 8114aae:	f016 0608 	ands.w	r6, r6, #8
 8114ab2:	d1f8      	bne.n	8114aa6 <_strtol_l.constprop.0+0x22>
 8114ab4:	2c2d      	cmp	r4, #45	@ 0x2d
 8114ab6:	d12d      	bne.n	8114b14 <_strtol_l.constprop.0+0x90>
 8114ab8:	782c      	ldrb	r4, [r5, #0]
 8114aba:	2601      	movs	r6, #1
 8114abc:	1c95      	adds	r5, r2, #2
 8114abe:	f033 0210 	bics.w	r2, r3, #16
 8114ac2:	d109      	bne.n	8114ad8 <_strtol_l.constprop.0+0x54>
 8114ac4:	2c30      	cmp	r4, #48	@ 0x30
 8114ac6:	d12a      	bne.n	8114b1e <_strtol_l.constprop.0+0x9a>
 8114ac8:	782a      	ldrb	r2, [r5, #0]
 8114aca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8114ace:	2a58      	cmp	r2, #88	@ 0x58
 8114ad0:	d125      	bne.n	8114b1e <_strtol_l.constprop.0+0x9a>
 8114ad2:	786c      	ldrb	r4, [r5, #1]
 8114ad4:	2310      	movs	r3, #16
 8114ad6:	3502      	adds	r5, #2
 8114ad8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8114adc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8114ae0:	2200      	movs	r2, #0
 8114ae2:	fbbc f9f3 	udiv	r9, ip, r3
 8114ae6:	4610      	mov	r0, r2
 8114ae8:	fb03 ca19 	mls	sl, r3, r9, ip
 8114aec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8114af0:	2f09      	cmp	r7, #9
 8114af2:	d81b      	bhi.n	8114b2c <_strtol_l.constprop.0+0xa8>
 8114af4:	463c      	mov	r4, r7
 8114af6:	42a3      	cmp	r3, r4
 8114af8:	dd27      	ble.n	8114b4a <_strtol_l.constprop.0+0xc6>
 8114afa:	1c57      	adds	r7, r2, #1
 8114afc:	d007      	beq.n	8114b0e <_strtol_l.constprop.0+0x8a>
 8114afe:	4581      	cmp	r9, r0
 8114b00:	d320      	bcc.n	8114b44 <_strtol_l.constprop.0+0xc0>
 8114b02:	d101      	bne.n	8114b08 <_strtol_l.constprop.0+0x84>
 8114b04:	45a2      	cmp	sl, r4
 8114b06:	db1d      	blt.n	8114b44 <_strtol_l.constprop.0+0xc0>
 8114b08:	fb00 4003 	mla	r0, r0, r3, r4
 8114b0c:	2201      	movs	r2, #1
 8114b0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8114b12:	e7eb      	b.n	8114aec <_strtol_l.constprop.0+0x68>
 8114b14:	2c2b      	cmp	r4, #43	@ 0x2b
 8114b16:	bf04      	itt	eq
 8114b18:	782c      	ldrbeq	r4, [r5, #0]
 8114b1a:	1c95      	addeq	r5, r2, #2
 8114b1c:	e7cf      	b.n	8114abe <_strtol_l.constprop.0+0x3a>
 8114b1e:	2b00      	cmp	r3, #0
 8114b20:	d1da      	bne.n	8114ad8 <_strtol_l.constprop.0+0x54>
 8114b22:	2c30      	cmp	r4, #48	@ 0x30
 8114b24:	bf0c      	ite	eq
 8114b26:	2308      	moveq	r3, #8
 8114b28:	230a      	movne	r3, #10
 8114b2a:	e7d5      	b.n	8114ad8 <_strtol_l.constprop.0+0x54>
 8114b2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8114b30:	2f19      	cmp	r7, #25
 8114b32:	d801      	bhi.n	8114b38 <_strtol_l.constprop.0+0xb4>
 8114b34:	3c37      	subs	r4, #55	@ 0x37
 8114b36:	e7de      	b.n	8114af6 <_strtol_l.constprop.0+0x72>
 8114b38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8114b3c:	2f19      	cmp	r7, #25
 8114b3e:	d804      	bhi.n	8114b4a <_strtol_l.constprop.0+0xc6>
 8114b40:	3c57      	subs	r4, #87	@ 0x57
 8114b42:	e7d8      	b.n	8114af6 <_strtol_l.constprop.0+0x72>
 8114b44:	f04f 32ff 	mov.w	r2, #4294967295
 8114b48:	e7e1      	b.n	8114b0e <_strtol_l.constprop.0+0x8a>
 8114b4a:	1c53      	adds	r3, r2, #1
 8114b4c:	d108      	bne.n	8114b60 <_strtol_l.constprop.0+0xdc>
 8114b4e:	2322      	movs	r3, #34	@ 0x22
 8114b50:	f8ce 3000 	str.w	r3, [lr]
 8114b54:	4660      	mov	r0, ip
 8114b56:	f1b8 0f00 	cmp.w	r8, #0
 8114b5a:	d0a0      	beq.n	8114a9e <_strtol_l.constprop.0+0x1a>
 8114b5c:	1e69      	subs	r1, r5, #1
 8114b5e:	e006      	b.n	8114b6e <_strtol_l.constprop.0+0xea>
 8114b60:	b106      	cbz	r6, 8114b64 <_strtol_l.constprop.0+0xe0>
 8114b62:	4240      	negs	r0, r0
 8114b64:	f1b8 0f00 	cmp.w	r8, #0
 8114b68:	d099      	beq.n	8114a9e <_strtol_l.constprop.0+0x1a>
 8114b6a:	2a00      	cmp	r2, #0
 8114b6c:	d1f6      	bne.n	8114b5c <_strtol_l.constprop.0+0xd8>
 8114b6e:	f8c8 1000 	str.w	r1, [r8]
 8114b72:	e794      	b.n	8114a9e <_strtol_l.constprop.0+0x1a>
 8114b74:	08115fa9 	.word	0x08115fa9

08114b78 <_strtol_r>:
 8114b78:	f7ff bf84 	b.w	8114a84 <_strtol_l.constprop.0>

08114b7c <__ssputs_r>:
 8114b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8114b80:	688e      	ldr	r6, [r1, #8]
 8114b82:	461f      	mov	r7, r3
 8114b84:	42be      	cmp	r6, r7
 8114b86:	680b      	ldr	r3, [r1, #0]
 8114b88:	4682      	mov	sl, r0
 8114b8a:	460c      	mov	r4, r1
 8114b8c:	4690      	mov	r8, r2
 8114b8e:	d82d      	bhi.n	8114bec <__ssputs_r+0x70>
 8114b90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8114b94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8114b98:	d026      	beq.n	8114be8 <__ssputs_r+0x6c>
 8114b9a:	6965      	ldr	r5, [r4, #20]
 8114b9c:	6909      	ldr	r1, [r1, #16]
 8114b9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8114ba2:	eba3 0901 	sub.w	r9, r3, r1
 8114ba6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8114baa:	1c7b      	adds	r3, r7, #1
 8114bac:	444b      	add	r3, r9
 8114bae:	106d      	asrs	r5, r5, #1
 8114bb0:	429d      	cmp	r5, r3
 8114bb2:	bf38      	it	cc
 8114bb4:	461d      	movcc	r5, r3
 8114bb6:	0553      	lsls	r3, r2, #21
 8114bb8:	d527      	bpl.n	8114c0a <__ssputs_r+0x8e>
 8114bba:	4629      	mov	r1, r5
 8114bbc:	f7fe fc1c 	bl	81133f8 <_malloc_r>
 8114bc0:	4606      	mov	r6, r0
 8114bc2:	b360      	cbz	r0, 8114c1e <__ssputs_r+0xa2>
 8114bc4:	6921      	ldr	r1, [r4, #16]
 8114bc6:	464a      	mov	r2, r9
 8114bc8:	f7fd fd23 	bl	8112612 <memcpy>
 8114bcc:	89a3      	ldrh	r3, [r4, #12]
 8114bce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8114bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8114bd6:	81a3      	strh	r3, [r4, #12]
 8114bd8:	6126      	str	r6, [r4, #16]
 8114bda:	6165      	str	r5, [r4, #20]
 8114bdc:	444e      	add	r6, r9
 8114bde:	eba5 0509 	sub.w	r5, r5, r9
 8114be2:	6026      	str	r6, [r4, #0]
 8114be4:	60a5      	str	r5, [r4, #8]
 8114be6:	463e      	mov	r6, r7
 8114be8:	42be      	cmp	r6, r7
 8114bea:	d900      	bls.n	8114bee <__ssputs_r+0x72>
 8114bec:	463e      	mov	r6, r7
 8114bee:	6820      	ldr	r0, [r4, #0]
 8114bf0:	4632      	mov	r2, r6
 8114bf2:	4641      	mov	r1, r8
 8114bf4:	f000 fb7c 	bl	81152f0 <memmove>
 8114bf8:	68a3      	ldr	r3, [r4, #8]
 8114bfa:	1b9b      	subs	r3, r3, r6
 8114bfc:	60a3      	str	r3, [r4, #8]
 8114bfe:	6823      	ldr	r3, [r4, #0]
 8114c00:	4433      	add	r3, r6
 8114c02:	6023      	str	r3, [r4, #0]
 8114c04:	2000      	movs	r0, #0
 8114c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8114c0a:	462a      	mov	r2, r5
 8114c0c:	f000 ff3d 	bl	8115a8a <_realloc_r>
 8114c10:	4606      	mov	r6, r0
 8114c12:	2800      	cmp	r0, #0
 8114c14:	d1e0      	bne.n	8114bd8 <__ssputs_r+0x5c>
 8114c16:	6921      	ldr	r1, [r4, #16]
 8114c18:	4650      	mov	r0, sl
 8114c1a:	f7fe fb79 	bl	8113310 <_free_r>
 8114c1e:	230c      	movs	r3, #12
 8114c20:	f8ca 3000 	str.w	r3, [sl]
 8114c24:	89a3      	ldrh	r3, [r4, #12]
 8114c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8114c2a:	81a3      	strh	r3, [r4, #12]
 8114c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8114c30:	e7e9      	b.n	8114c06 <__ssputs_r+0x8a>
	...

08114c34 <_svfiprintf_r>:
 8114c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114c38:	4698      	mov	r8, r3
 8114c3a:	898b      	ldrh	r3, [r1, #12]
 8114c3c:	061b      	lsls	r3, r3, #24
 8114c3e:	b09d      	sub	sp, #116	@ 0x74
 8114c40:	4607      	mov	r7, r0
 8114c42:	460d      	mov	r5, r1
 8114c44:	4614      	mov	r4, r2
 8114c46:	d510      	bpl.n	8114c6a <_svfiprintf_r+0x36>
 8114c48:	690b      	ldr	r3, [r1, #16]
 8114c4a:	b973      	cbnz	r3, 8114c6a <_svfiprintf_r+0x36>
 8114c4c:	2140      	movs	r1, #64	@ 0x40
 8114c4e:	f7fe fbd3 	bl	81133f8 <_malloc_r>
 8114c52:	6028      	str	r0, [r5, #0]
 8114c54:	6128      	str	r0, [r5, #16]
 8114c56:	b930      	cbnz	r0, 8114c66 <_svfiprintf_r+0x32>
 8114c58:	230c      	movs	r3, #12
 8114c5a:	603b      	str	r3, [r7, #0]
 8114c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8114c60:	b01d      	add	sp, #116	@ 0x74
 8114c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114c66:	2340      	movs	r3, #64	@ 0x40
 8114c68:	616b      	str	r3, [r5, #20]
 8114c6a:	2300      	movs	r3, #0
 8114c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8114c6e:	2320      	movs	r3, #32
 8114c70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8114c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8114c78:	2330      	movs	r3, #48	@ 0x30
 8114c7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8114e18 <_svfiprintf_r+0x1e4>
 8114c7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8114c82:	f04f 0901 	mov.w	r9, #1
 8114c86:	4623      	mov	r3, r4
 8114c88:	469a      	mov	sl, r3
 8114c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8114c8e:	b10a      	cbz	r2, 8114c94 <_svfiprintf_r+0x60>
 8114c90:	2a25      	cmp	r2, #37	@ 0x25
 8114c92:	d1f9      	bne.n	8114c88 <_svfiprintf_r+0x54>
 8114c94:	ebba 0b04 	subs.w	fp, sl, r4
 8114c98:	d00b      	beq.n	8114cb2 <_svfiprintf_r+0x7e>
 8114c9a:	465b      	mov	r3, fp
 8114c9c:	4622      	mov	r2, r4
 8114c9e:	4629      	mov	r1, r5
 8114ca0:	4638      	mov	r0, r7
 8114ca2:	f7ff ff6b 	bl	8114b7c <__ssputs_r>
 8114ca6:	3001      	adds	r0, #1
 8114ca8:	f000 80a7 	beq.w	8114dfa <_svfiprintf_r+0x1c6>
 8114cac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114cae:	445a      	add	r2, fp
 8114cb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8114cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8114cb6:	2b00      	cmp	r3, #0
 8114cb8:	f000 809f 	beq.w	8114dfa <_svfiprintf_r+0x1c6>
 8114cbc:	2300      	movs	r3, #0
 8114cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8114cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8114cc6:	f10a 0a01 	add.w	sl, sl, #1
 8114cca:	9304      	str	r3, [sp, #16]
 8114ccc:	9307      	str	r3, [sp, #28]
 8114cce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8114cd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8114cd4:	4654      	mov	r4, sl
 8114cd6:	2205      	movs	r2, #5
 8114cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114cdc:	484e      	ldr	r0, [pc, #312]	@ (8114e18 <_svfiprintf_r+0x1e4>)
 8114cde:	f7eb faff 	bl	81002e0 <memchr>
 8114ce2:	9a04      	ldr	r2, [sp, #16]
 8114ce4:	b9d8      	cbnz	r0, 8114d1e <_svfiprintf_r+0xea>
 8114ce6:	06d0      	lsls	r0, r2, #27
 8114ce8:	bf44      	itt	mi
 8114cea:	2320      	movmi	r3, #32
 8114cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8114cf0:	0711      	lsls	r1, r2, #28
 8114cf2:	bf44      	itt	mi
 8114cf4:	232b      	movmi	r3, #43	@ 0x2b
 8114cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8114cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8114cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8114d00:	d015      	beq.n	8114d2e <_svfiprintf_r+0xfa>
 8114d02:	9a07      	ldr	r2, [sp, #28]
 8114d04:	4654      	mov	r4, sl
 8114d06:	2000      	movs	r0, #0
 8114d08:	f04f 0c0a 	mov.w	ip, #10
 8114d0c:	4621      	mov	r1, r4
 8114d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8114d12:	3b30      	subs	r3, #48	@ 0x30
 8114d14:	2b09      	cmp	r3, #9
 8114d16:	d94b      	bls.n	8114db0 <_svfiprintf_r+0x17c>
 8114d18:	b1b0      	cbz	r0, 8114d48 <_svfiprintf_r+0x114>
 8114d1a:	9207      	str	r2, [sp, #28]
 8114d1c:	e014      	b.n	8114d48 <_svfiprintf_r+0x114>
 8114d1e:	eba0 0308 	sub.w	r3, r0, r8
 8114d22:	fa09 f303 	lsl.w	r3, r9, r3
 8114d26:	4313      	orrs	r3, r2
 8114d28:	9304      	str	r3, [sp, #16]
 8114d2a:	46a2      	mov	sl, r4
 8114d2c:	e7d2      	b.n	8114cd4 <_svfiprintf_r+0xa0>
 8114d2e:	9b03      	ldr	r3, [sp, #12]
 8114d30:	1d19      	adds	r1, r3, #4
 8114d32:	681b      	ldr	r3, [r3, #0]
 8114d34:	9103      	str	r1, [sp, #12]
 8114d36:	2b00      	cmp	r3, #0
 8114d38:	bfbb      	ittet	lt
 8114d3a:	425b      	neglt	r3, r3
 8114d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8114d40:	9307      	strge	r3, [sp, #28]
 8114d42:	9307      	strlt	r3, [sp, #28]
 8114d44:	bfb8      	it	lt
 8114d46:	9204      	strlt	r2, [sp, #16]
 8114d48:	7823      	ldrb	r3, [r4, #0]
 8114d4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8114d4c:	d10a      	bne.n	8114d64 <_svfiprintf_r+0x130>
 8114d4e:	7863      	ldrb	r3, [r4, #1]
 8114d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8114d52:	d132      	bne.n	8114dba <_svfiprintf_r+0x186>
 8114d54:	9b03      	ldr	r3, [sp, #12]
 8114d56:	1d1a      	adds	r2, r3, #4
 8114d58:	681b      	ldr	r3, [r3, #0]
 8114d5a:	9203      	str	r2, [sp, #12]
 8114d5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8114d60:	3402      	adds	r4, #2
 8114d62:	9305      	str	r3, [sp, #20]
 8114d64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8114e28 <_svfiprintf_r+0x1f4>
 8114d68:	7821      	ldrb	r1, [r4, #0]
 8114d6a:	2203      	movs	r2, #3
 8114d6c:	4650      	mov	r0, sl
 8114d6e:	f7eb fab7 	bl	81002e0 <memchr>
 8114d72:	b138      	cbz	r0, 8114d84 <_svfiprintf_r+0x150>
 8114d74:	9b04      	ldr	r3, [sp, #16]
 8114d76:	eba0 000a 	sub.w	r0, r0, sl
 8114d7a:	2240      	movs	r2, #64	@ 0x40
 8114d7c:	4082      	lsls	r2, r0
 8114d7e:	4313      	orrs	r3, r2
 8114d80:	3401      	adds	r4, #1
 8114d82:	9304      	str	r3, [sp, #16]
 8114d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114d88:	4824      	ldr	r0, [pc, #144]	@ (8114e1c <_svfiprintf_r+0x1e8>)
 8114d8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8114d8e:	2206      	movs	r2, #6
 8114d90:	f7eb faa6 	bl	81002e0 <memchr>
 8114d94:	2800      	cmp	r0, #0
 8114d96:	d036      	beq.n	8114e06 <_svfiprintf_r+0x1d2>
 8114d98:	4b21      	ldr	r3, [pc, #132]	@ (8114e20 <_svfiprintf_r+0x1ec>)
 8114d9a:	bb1b      	cbnz	r3, 8114de4 <_svfiprintf_r+0x1b0>
 8114d9c:	9b03      	ldr	r3, [sp, #12]
 8114d9e:	3307      	adds	r3, #7
 8114da0:	f023 0307 	bic.w	r3, r3, #7
 8114da4:	3308      	adds	r3, #8
 8114da6:	9303      	str	r3, [sp, #12]
 8114da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8114daa:	4433      	add	r3, r6
 8114dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8114dae:	e76a      	b.n	8114c86 <_svfiprintf_r+0x52>
 8114db0:	fb0c 3202 	mla	r2, ip, r2, r3
 8114db4:	460c      	mov	r4, r1
 8114db6:	2001      	movs	r0, #1
 8114db8:	e7a8      	b.n	8114d0c <_svfiprintf_r+0xd8>
 8114dba:	2300      	movs	r3, #0
 8114dbc:	3401      	adds	r4, #1
 8114dbe:	9305      	str	r3, [sp, #20]
 8114dc0:	4619      	mov	r1, r3
 8114dc2:	f04f 0c0a 	mov.w	ip, #10
 8114dc6:	4620      	mov	r0, r4
 8114dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8114dcc:	3a30      	subs	r2, #48	@ 0x30
 8114dce:	2a09      	cmp	r2, #9
 8114dd0:	d903      	bls.n	8114dda <_svfiprintf_r+0x1a6>
 8114dd2:	2b00      	cmp	r3, #0
 8114dd4:	d0c6      	beq.n	8114d64 <_svfiprintf_r+0x130>
 8114dd6:	9105      	str	r1, [sp, #20]
 8114dd8:	e7c4      	b.n	8114d64 <_svfiprintf_r+0x130>
 8114dda:	fb0c 2101 	mla	r1, ip, r1, r2
 8114dde:	4604      	mov	r4, r0
 8114de0:	2301      	movs	r3, #1
 8114de2:	e7f0      	b.n	8114dc6 <_svfiprintf_r+0x192>
 8114de4:	ab03      	add	r3, sp, #12
 8114de6:	9300      	str	r3, [sp, #0]
 8114de8:	462a      	mov	r2, r5
 8114dea:	4b0e      	ldr	r3, [pc, #56]	@ (8114e24 <_svfiprintf_r+0x1f0>)
 8114dec:	a904      	add	r1, sp, #16
 8114dee:	4638      	mov	r0, r7
 8114df0:	f7fc fbf8 	bl	81115e4 <_printf_float>
 8114df4:	1c42      	adds	r2, r0, #1
 8114df6:	4606      	mov	r6, r0
 8114df8:	d1d6      	bne.n	8114da8 <_svfiprintf_r+0x174>
 8114dfa:	89ab      	ldrh	r3, [r5, #12]
 8114dfc:	065b      	lsls	r3, r3, #25
 8114dfe:	f53f af2d 	bmi.w	8114c5c <_svfiprintf_r+0x28>
 8114e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8114e04:	e72c      	b.n	8114c60 <_svfiprintf_r+0x2c>
 8114e06:	ab03      	add	r3, sp, #12
 8114e08:	9300      	str	r3, [sp, #0]
 8114e0a:	462a      	mov	r2, r5
 8114e0c:	4b05      	ldr	r3, [pc, #20]	@ (8114e24 <_svfiprintf_r+0x1f0>)
 8114e0e:	a904      	add	r1, sp, #16
 8114e10:	4638      	mov	r0, r7
 8114e12:	f7fc fe7f 	bl	8111b14 <_printf_i>
 8114e16:	e7ed      	b.n	8114df4 <_svfiprintf_r+0x1c0>
 8114e18:	081160a9 	.word	0x081160a9
 8114e1c:	081160b3 	.word	0x081160b3
 8114e20:	081115e5 	.word	0x081115e5
 8114e24:	08114b7d 	.word	0x08114b7d
 8114e28:	081160af 	.word	0x081160af

08114e2c <__sfputc_r>:
 8114e2c:	6893      	ldr	r3, [r2, #8]
 8114e2e:	3b01      	subs	r3, #1
 8114e30:	2b00      	cmp	r3, #0
 8114e32:	b410      	push	{r4}
 8114e34:	6093      	str	r3, [r2, #8]
 8114e36:	da08      	bge.n	8114e4a <__sfputc_r+0x1e>
 8114e38:	6994      	ldr	r4, [r2, #24]
 8114e3a:	42a3      	cmp	r3, r4
 8114e3c:	db01      	blt.n	8114e42 <__sfputc_r+0x16>
 8114e3e:	290a      	cmp	r1, #10
 8114e40:	d103      	bne.n	8114e4a <__sfputc_r+0x1e>
 8114e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8114e46:	f7fd bad0 	b.w	81123ea <__swbuf_r>
 8114e4a:	6813      	ldr	r3, [r2, #0]
 8114e4c:	1c58      	adds	r0, r3, #1
 8114e4e:	6010      	str	r0, [r2, #0]
 8114e50:	7019      	strb	r1, [r3, #0]
 8114e52:	4608      	mov	r0, r1
 8114e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8114e58:	4770      	bx	lr

08114e5a <__sfputs_r>:
 8114e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8114e5c:	4606      	mov	r6, r0
 8114e5e:	460f      	mov	r7, r1
 8114e60:	4614      	mov	r4, r2
 8114e62:	18d5      	adds	r5, r2, r3
 8114e64:	42ac      	cmp	r4, r5
 8114e66:	d101      	bne.n	8114e6c <__sfputs_r+0x12>
 8114e68:	2000      	movs	r0, #0
 8114e6a:	e007      	b.n	8114e7c <__sfputs_r+0x22>
 8114e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114e70:	463a      	mov	r2, r7
 8114e72:	4630      	mov	r0, r6
 8114e74:	f7ff ffda 	bl	8114e2c <__sfputc_r>
 8114e78:	1c43      	adds	r3, r0, #1
 8114e7a:	d1f3      	bne.n	8114e64 <__sfputs_r+0xa>
 8114e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08114e80 <_vfiprintf_r>:
 8114e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8114e84:	460d      	mov	r5, r1
 8114e86:	b09d      	sub	sp, #116	@ 0x74
 8114e88:	4614      	mov	r4, r2
 8114e8a:	4698      	mov	r8, r3
 8114e8c:	4606      	mov	r6, r0
 8114e8e:	b118      	cbz	r0, 8114e98 <_vfiprintf_r+0x18>
 8114e90:	6a03      	ldr	r3, [r0, #32]
 8114e92:	b90b      	cbnz	r3, 8114e98 <_vfiprintf_r+0x18>
 8114e94:	f7fd f9fe 	bl	8112294 <__sinit>
 8114e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8114e9a:	07d9      	lsls	r1, r3, #31
 8114e9c:	d405      	bmi.n	8114eaa <_vfiprintf_r+0x2a>
 8114e9e:	89ab      	ldrh	r3, [r5, #12]
 8114ea0:	059a      	lsls	r2, r3, #22
 8114ea2:	d402      	bmi.n	8114eaa <_vfiprintf_r+0x2a>
 8114ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8114ea6:	f7fd fbb2 	bl	811260e <__retarget_lock_acquire_recursive>
 8114eaa:	89ab      	ldrh	r3, [r5, #12]
 8114eac:	071b      	lsls	r3, r3, #28
 8114eae:	d501      	bpl.n	8114eb4 <_vfiprintf_r+0x34>
 8114eb0:	692b      	ldr	r3, [r5, #16]
 8114eb2:	b99b      	cbnz	r3, 8114edc <_vfiprintf_r+0x5c>
 8114eb4:	4629      	mov	r1, r5
 8114eb6:	4630      	mov	r0, r6
 8114eb8:	f7fd fad6 	bl	8112468 <__swsetup_r>
 8114ebc:	b170      	cbz	r0, 8114edc <_vfiprintf_r+0x5c>
 8114ebe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8114ec0:	07dc      	lsls	r4, r3, #31
 8114ec2:	d504      	bpl.n	8114ece <_vfiprintf_r+0x4e>
 8114ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8114ec8:	b01d      	add	sp, #116	@ 0x74
 8114eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8114ece:	89ab      	ldrh	r3, [r5, #12]
 8114ed0:	0598      	lsls	r0, r3, #22
 8114ed2:	d4f7      	bmi.n	8114ec4 <_vfiprintf_r+0x44>
 8114ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8114ed6:	f7fd fb9b 	bl	8112610 <__retarget_lock_release_recursive>
 8114eda:	e7f3      	b.n	8114ec4 <_vfiprintf_r+0x44>
 8114edc:	2300      	movs	r3, #0
 8114ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8114ee0:	2320      	movs	r3, #32
 8114ee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8114ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8114eea:	2330      	movs	r3, #48	@ 0x30
 8114eec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 811509c <_vfiprintf_r+0x21c>
 8114ef0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8114ef4:	f04f 0901 	mov.w	r9, #1
 8114ef8:	4623      	mov	r3, r4
 8114efa:	469a      	mov	sl, r3
 8114efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8114f00:	b10a      	cbz	r2, 8114f06 <_vfiprintf_r+0x86>
 8114f02:	2a25      	cmp	r2, #37	@ 0x25
 8114f04:	d1f9      	bne.n	8114efa <_vfiprintf_r+0x7a>
 8114f06:	ebba 0b04 	subs.w	fp, sl, r4
 8114f0a:	d00b      	beq.n	8114f24 <_vfiprintf_r+0xa4>
 8114f0c:	465b      	mov	r3, fp
 8114f0e:	4622      	mov	r2, r4
 8114f10:	4629      	mov	r1, r5
 8114f12:	4630      	mov	r0, r6
 8114f14:	f7ff ffa1 	bl	8114e5a <__sfputs_r>
 8114f18:	3001      	adds	r0, #1
 8114f1a:	f000 80a7 	beq.w	811506c <_vfiprintf_r+0x1ec>
 8114f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8114f20:	445a      	add	r2, fp
 8114f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8114f24:	f89a 3000 	ldrb.w	r3, [sl]
 8114f28:	2b00      	cmp	r3, #0
 8114f2a:	f000 809f 	beq.w	811506c <_vfiprintf_r+0x1ec>
 8114f2e:	2300      	movs	r3, #0
 8114f30:	f04f 32ff 	mov.w	r2, #4294967295
 8114f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8114f38:	f10a 0a01 	add.w	sl, sl, #1
 8114f3c:	9304      	str	r3, [sp, #16]
 8114f3e:	9307      	str	r3, [sp, #28]
 8114f40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8114f44:	931a      	str	r3, [sp, #104]	@ 0x68
 8114f46:	4654      	mov	r4, sl
 8114f48:	2205      	movs	r2, #5
 8114f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114f4e:	4853      	ldr	r0, [pc, #332]	@ (811509c <_vfiprintf_r+0x21c>)
 8114f50:	f7eb f9c6 	bl	81002e0 <memchr>
 8114f54:	9a04      	ldr	r2, [sp, #16]
 8114f56:	b9d8      	cbnz	r0, 8114f90 <_vfiprintf_r+0x110>
 8114f58:	06d1      	lsls	r1, r2, #27
 8114f5a:	bf44      	itt	mi
 8114f5c:	2320      	movmi	r3, #32
 8114f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8114f62:	0713      	lsls	r3, r2, #28
 8114f64:	bf44      	itt	mi
 8114f66:	232b      	movmi	r3, #43	@ 0x2b
 8114f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8114f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8114f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8114f72:	d015      	beq.n	8114fa0 <_vfiprintf_r+0x120>
 8114f74:	9a07      	ldr	r2, [sp, #28]
 8114f76:	4654      	mov	r4, sl
 8114f78:	2000      	movs	r0, #0
 8114f7a:	f04f 0c0a 	mov.w	ip, #10
 8114f7e:	4621      	mov	r1, r4
 8114f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8114f84:	3b30      	subs	r3, #48	@ 0x30
 8114f86:	2b09      	cmp	r3, #9
 8114f88:	d94b      	bls.n	8115022 <_vfiprintf_r+0x1a2>
 8114f8a:	b1b0      	cbz	r0, 8114fba <_vfiprintf_r+0x13a>
 8114f8c:	9207      	str	r2, [sp, #28]
 8114f8e:	e014      	b.n	8114fba <_vfiprintf_r+0x13a>
 8114f90:	eba0 0308 	sub.w	r3, r0, r8
 8114f94:	fa09 f303 	lsl.w	r3, r9, r3
 8114f98:	4313      	orrs	r3, r2
 8114f9a:	9304      	str	r3, [sp, #16]
 8114f9c:	46a2      	mov	sl, r4
 8114f9e:	e7d2      	b.n	8114f46 <_vfiprintf_r+0xc6>
 8114fa0:	9b03      	ldr	r3, [sp, #12]
 8114fa2:	1d19      	adds	r1, r3, #4
 8114fa4:	681b      	ldr	r3, [r3, #0]
 8114fa6:	9103      	str	r1, [sp, #12]
 8114fa8:	2b00      	cmp	r3, #0
 8114faa:	bfbb      	ittet	lt
 8114fac:	425b      	neglt	r3, r3
 8114fae:	f042 0202 	orrlt.w	r2, r2, #2
 8114fb2:	9307      	strge	r3, [sp, #28]
 8114fb4:	9307      	strlt	r3, [sp, #28]
 8114fb6:	bfb8      	it	lt
 8114fb8:	9204      	strlt	r2, [sp, #16]
 8114fba:	7823      	ldrb	r3, [r4, #0]
 8114fbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8114fbe:	d10a      	bne.n	8114fd6 <_vfiprintf_r+0x156>
 8114fc0:	7863      	ldrb	r3, [r4, #1]
 8114fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8114fc4:	d132      	bne.n	811502c <_vfiprintf_r+0x1ac>
 8114fc6:	9b03      	ldr	r3, [sp, #12]
 8114fc8:	1d1a      	adds	r2, r3, #4
 8114fca:	681b      	ldr	r3, [r3, #0]
 8114fcc:	9203      	str	r2, [sp, #12]
 8114fce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8114fd2:	3402      	adds	r4, #2
 8114fd4:	9305      	str	r3, [sp, #20]
 8114fd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 81150ac <_vfiprintf_r+0x22c>
 8114fda:	7821      	ldrb	r1, [r4, #0]
 8114fdc:	2203      	movs	r2, #3
 8114fde:	4650      	mov	r0, sl
 8114fe0:	f7eb f97e 	bl	81002e0 <memchr>
 8114fe4:	b138      	cbz	r0, 8114ff6 <_vfiprintf_r+0x176>
 8114fe6:	9b04      	ldr	r3, [sp, #16]
 8114fe8:	eba0 000a 	sub.w	r0, r0, sl
 8114fec:	2240      	movs	r2, #64	@ 0x40
 8114fee:	4082      	lsls	r2, r0
 8114ff0:	4313      	orrs	r3, r2
 8114ff2:	3401      	adds	r4, #1
 8114ff4:	9304      	str	r3, [sp, #16]
 8114ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8114ffa:	4829      	ldr	r0, [pc, #164]	@ (81150a0 <_vfiprintf_r+0x220>)
 8114ffc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8115000:	2206      	movs	r2, #6
 8115002:	f7eb f96d 	bl	81002e0 <memchr>
 8115006:	2800      	cmp	r0, #0
 8115008:	d03f      	beq.n	811508a <_vfiprintf_r+0x20a>
 811500a:	4b26      	ldr	r3, [pc, #152]	@ (81150a4 <_vfiprintf_r+0x224>)
 811500c:	bb1b      	cbnz	r3, 8115056 <_vfiprintf_r+0x1d6>
 811500e:	9b03      	ldr	r3, [sp, #12]
 8115010:	3307      	adds	r3, #7
 8115012:	f023 0307 	bic.w	r3, r3, #7
 8115016:	3308      	adds	r3, #8
 8115018:	9303      	str	r3, [sp, #12]
 811501a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811501c:	443b      	add	r3, r7
 811501e:	9309      	str	r3, [sp, #36]	@ 0x24
 8115020:	e76a      	b.n	8114ef8 <_vfiprintf_r+0x78>
 8115022:	fb0c 3202 	mla	r2, ip, r2, r3
 8115026:	460c      	mov	r4, r1
 8115028:	2001      	movs	r0, #1
 811502a:	e7a8      	b.n	8114f7e <_vfiprintf_r+0xfe>
 811502c:	2300      	movs	r3, #0
 811502e:	3401      	adds	r4, #1
 8115030:	9305      	str	r3, [sp, #20]
 8115032:	4619      	mov	r1, r3
 8115034:	f04f 0c0a 	mov.w	ip, #10
 8115038:	4620      	mov	r0, r4
 811503a:	f810 2b01 	ldrb.w	r2, [r0], #1
 811503e:	3a30      	subs	r2, #48	@ 0x30
 8115040:	2a09      	cmp	r2, #9
 8115042:	d903      	bls.n	811504c <_vfiprintf_r+0x1cc>
 8115044:	2b00      	cmp	r3, #0
 8115046:	d0c6      	beq.n	8114fd6 <_vfiprintf_r+0x156>
 8115048:	9105      	str	r1, [sp, #20]
 811504a:	e7c4      	b.n	8114fd6 <_vfiprintf_r+0x156>
 811504c:	fb0c 2101 	mla	r1, ip, r1, r2
 8115050:	4604      	mov	r4, r0
 8115052:	2301      	movs	r3, #1
 8115054:	e7f0      	b.n	8115038 <_vfiprintf_r+0x1b8>
 8115056:	ab03      	add	r3, sp, #12
 8115058:	9300      	str	r3, [sp, #0]
 811505a:	462a      	mov	r2, r5
 811505c:	4b12      	ldr	r3, [pc, #72]	@ (81150a8 <_vfiprintf_r+0x228>)
 811505e:	a904      	add	r1, sp, #16
 8115060:	4630      	mov	r0, r6
 8115062:	f7fc fabf 	bl	81115e4 <_printf_float>
 8115066:	4607      	mov	r7, r0
 8115068:	1c78      	adds	r0, r7, #1
 811506a:	d1d6      	bne.n	811501a <_vfiprintf_r+0x19a>
 811506c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811506e:	07d9      	lsls	r1, r3, #31
 8115070:	d405      	bmi.n	811507e <_vfiprintf_r+0x1fe>
 8115072:	89ab      	ldrh	r3, [r5, #12]
 8115074:	059a      	lsls	r2, r3, #22
 8115076:	d402      	bmi.n	811507e <_vfiprintf_r+0x1fe>
 8115078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811507a:	f7fd fac9 	bl	8112610 <__retarget_lock_release_recursive>
 811507e:	89ab      	ldrh	r3, [r5, #12]
 8115080:	065b      	lsls	r3, r3, #25
 8115082:	f53f af1f 	bmi.w	8114ec4 <_vfiprintf_r+0x44>
 8115086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8115088:	e71e      	b.n	8114ec8 <_vfiprintf_r+0x48>
 811508a:	ab03      	add	r3, sp, #12
 811508c:	9300      	str	r3, [sp, #0]
 811508e:	462a      	mov	r2, r5
 8115090:	4b05      	ldr	r3, [pc, #20]	@ (81150a8 <_vfiprintf_r+0x228>)
 8115092:	a904      	add	r1, sp, #16
 8115094:	4630      	mov	r0, r6
 8115096:	f7fc fd3d 	bl	8111b14 <_printf_i>
 811509a:	e7e4      	b.n	8115066 <_vfiprintf_r+0x1e6>
 811509c:	081160a9 	.word	0x081160a9
 81150a0:	081160b3 	.word	0x081160b3
 81150a4:	081115e5 	.word	0x081115e5
 81150a8:	08114e5b 	.word	0x08114e5b
 81150ac:	081160af 	.word	0x081160af

081150b0 <__sflush_r>:
 81150b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81150b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81150b8:	0716      	lsls	r6, r2, #28
 81150ba:	4605      	mov	r5, r0
 81150bc:	460c      	mov	r4, r1
 81150be:	d454      	bmi.n	811516a <__sflush_r+0xba>
 81150c0:	684b      	ldr	r3, [r1, #4]
 81150c2:	2b00      	cmp	r3, #0
 81150c4:	dc02      	bgt.n	81150cc <__sflush_r+0x1c>
 81150c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 81150c8:	2b00      	cmp	r3, #0
 81150ca:	dd48      	ble.n	811515e <__sflush_r+0xae>
 81150cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81150ce:	2e00      	cmp	r6, #0
 81150d0:	d045      	beq.n	811515e <__sflush_r+0xae>
 81150d2:	2300      	movs	r3, #0
 81150d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81150d8:	682f      	ldr	r7, [r5, #0]
 81150da:	6a21      	ldr	r1, [r4, #32]
 81150dc:	602b      	str	r3, [r5, #0]
 81150de:	d030      	beq.n	8115142 <__sflush_r+0x92>
 81150e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81150e2:	89a3      	ldrh	r3, [r4, #12]
 81150e4:	0759      	lsls	r1, r3, #29
 81150e6:	d505      	bpl.n	81150f4 <__sflush_r+0x44>
 81150e8:	6863      	ldr	r3, [r4, #4]
 81150ea:	1ad2      	subs	r2, r2, r3
 81150ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81150ee:	b10b      	cbz	r3, 81150f4 <__sflush_r+0x44>
 81150f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81150f2:	1ad2      	subs	r2, r2, r3
 81150f4:	2300      	movs	r3, #0
 81150f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81150f8:	6a21      	ldr	r1, [r4, #32]
 81150fa:	4628      	mov	r0, r5
 81150fc:	47b0      	blx	r6
 81150fe:	1c43      	adds	r3, r0, #1
 8115100:	89a3      	ldrh	r3, [r4, #12]
 8115102:	d106      	bne.n	8115112 <__sflush_r+0x62>
 8115104:	6829      	ldr	r1, [r5, #0]
 8115106:	291d      	cmp	r1, #29
 8115108:	d82b      	bhi.n	8115162 <__sflush_r+0xb2>
 811510a:	4a2a      	ldr	r2, [pc, #168]	@ (81151b4 <__sflush_r+0x104>)
 811510c:	410a      	asrs	r2, r1
 811510e:	07d6      	lsls	r6, r2, #31
 8115110:	d427      	bmi.n	8115162 <__sflush_r+0xb2>
 8115112:	2200      	movs	r2, #0
 8115114:	6062      	str	r2, [r4, #4]
 8115116:	04d9      	lsls	r1, r3, #19
 8115118:	6922      	ldr	r2, [r4, #16]
 811511a:	6022      	str	r2, [r4, #0]
 811511c:	d504      	bpl.n	8115128 <__sflush_r+0x78>
 811511e:	1c42      	adds	r2, r0, #1
 8115120:	d101      	bne.n	8115126 <__sflush_r+0x76>
 8115122:	682b      	ldr	r3, [r5, #0]
 8115124:	b903      	cbnz	r3, 8115128 <__sflush_r+0x78>
 8115126:	6560      	str	r0, [r4, #84]	@ 0x54
 8115128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811512a:	602f      	str	r7, [r5, #0]
 811512c:	b1b9      	cbz	r1, 811515e <__sflush_r+0xae>
 811512e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8115132:	4299      	cmp	r1, r3
 8115134:	d002      	beq.n	811513c <__sflush_r+0x8c>
 8115136:	4628      	mov	r0, r5
 8115138:	f7fe f8ea 	bl	8113310 <_free_r>
 811513c:	2300      	movs	r3, #0
 811513e:	6363      	str	r3, [r4, #52]	@ 0x34
 8115140:	e00d      	b.n	811515e <__sflush_r+0xae>
 8115142:	2301      	movs	r3, #1
 8115144:	4628      	mov	r0, r5
 8115146:	47b0      	blx	r6
 8115148:	4602      	mov	r2, r0
 811514a:	1c50      	adds	r0, r2, #1
 811514c:	d1c9      	bne.n	81150e2 <__sflush_r+0x32>
 811514e:	682b      	ldr	r3, [r5, #0]
 8115150:	2b00      	cmp	r3, #0
 8115152:	d0c6      	beq.n	81150e2 <__sflush_r+0x32>
 8115154:	2b1d      	cmp	r3, #29
 8115156:	d001      	beq.n	811515c <__sflush_r+0xac>
 8115158:	2b16      	cmp	r3, #22
 811515a:	d11e      	bne.n	811519a <__sflush_r+0xea>
 811515c:	602f      	str	r7, [r5, #0]
 811515e:	2000      	movs	r0, #0
 8115160:	e022      	b.n	81151a8 <__sflush_r+0xf8>
 8115162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8115166:	b21b      	sxth	r3, r3
 8115168:	e01b      	b.n	81151a2 <__sflush_r+0xf2>
 811516a:	690f      	ldr	r7, [r1, #16]
 811516c:	2f00      	cmp	r7, #0
 811516e:	d0f6      	beq.n	811515e <__sflush_r+0xae>
 8115170:	0793      	lsls	r3, r2, #30
 8115172:	680e      	ldr	r6, [r1, #0]
 8115174:	bf08      	it	eq
 8115176:	694b      	ldreq	r3, [r1, #20]
 8115178:	600f      	str	r7, [r1, #0]
 811517a:	bf18      	it	ne
 811517c:	2300      	movne	r3, #0
 811517e:	eba6 0807 	sub.w	r8, r6, r7
 8115182:	608b      	str	r3, [r1, #8]
 8115184:	f1b8 0f00 	cmp.w	r8, #0
 8115188:	dde9      	ble.n	811515e <__sflush_r+0xae>
 811518a:	6a21      	ldr	r1, [r4, #32]
 811518c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 811518e:	4643      	mov	r3, r8
 8115190:	463a      	mov	r2, r7
 8115192:	4628      	mov	r0, r5
 8115194:	47b0      	blx	r6
 8115196:	2800      	cmp	r0, #0
 8115198:	dc08      	bgt.n	81151ac <__sflush_r+0xfc>
 811519a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811519e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81151a2:	81a3      	strh	r3, [r4, #12]
 81151a4:	f04f 30ff 	mov.w	r0, #4294967295
 81151a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81151ac:	4407      	add	r7, r0
 81151ae:	eba8 0800 	sub.w	r8, r8, r0
 81151b2:	e7e7      	b.n	8115184 <__sflush_r+0xd4>
 81151b4:	dfbffffe 	.word	0xdfbffffe

081151b8 <_fflush_r>:
 81151b8:	b538      	push	{r3, r4, r5, lr}
 81151ba:	690b      	ldr	r3, [r1, #16]
 81151bc:	4605      	mov	r5, r0
 81151be:	460c      	mov	r4, r1
 81151c0:	b913      	cbnz	r3, 81151c8 <_fflush_r+0x10>
 81151c2:	2500      	movs	r5, #0
 81151c4:	4628      	mov	r0, r5
 81151c6:	bd38      	pop	{r3, r4, r5, pc}
 81151c8:	b118      	cbz	r0, 81151d2 <_fflush_r+0x1a>
 81151ca:	6a03      	ldr	r3, [r0, #32]
 81151cc:	b90b      	cbnz	r3, 81151d2 <_fflush_r+0x1a>
 81151ce:	f7fd f861 	bl	8112294 <__sinit>
 81151d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81151d6:	2b00      	cmp	r3, #0
 81151d8:	d0f3      	beq.n	81151c2 <_fflush_r+0xa>
 81151da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 81151dc:	07d0      	lsls	r0, r2, #31
 81151de:	d404      	bmi.n	81151ea <_fflush_r+0x32>
 81151e0:	0599      	lsls	r1, r3, #22
 81151e2:	d402      	bmi.n	81151ea <_fflush_r+0x32>
 81151e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81151e6:	f7fd fa12 	bl	811260e <__retarget_lock_acquire_recursive>
 81151ea:	4628      	mov	r0, r5
 81151ec:	4621      	mov	r1, r4
 81151ee:	f7ff ff5f 	bl	81150b0 <__sflush_r>
 81151f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81151f4:	07da      	lsls	r2, r3, #31
 81151f6:	4605      	mov	r5, r0
 81151f8:	d4e4      	bmi.n	81151c4 <_fflush_r+0xc>
 81151fa:	89a3      	ldrh	r3, [r4, #12]
 81151fc:	059b      	lsls	r3, r3, #22
 81151fe:	d4e1      	bmi.n	81151c4 <_fflush_r+0xc>
 8115200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8115202:	f7fd fa05 	bl	8112610 <__retarget_lock_release_recursive>
 8115206:	e7dd      	b.n	81151c4 <_fflush_r+0xc>

08115208 <fiprintf>:
 8115208:	b40e      	push	{r1, r2, r3}
 811520a:	b503      	push	{r0, r1, lr}
 811520c:	4601      	mov	r1, r0
 811520e:	ab03      	add	r3, sp, #12
 8115210:	4805      	ldr	r0, [pc, #20]	@ (8115228 <fiprintf+0x20>)
 8115212:	f853 2b04 	ldr.w	r2, [r3], #4
 8115216:	6800      	ldr	r0, [r0, #0]
 8115218:	9301      	str	r3, [sp, #4]
 811521a:	f7ff fe31 	bl	8114e80 <_vfiprintf_r>
 811521e:	b002      	add	sp, #8
 8115220:	f85d eb04 	ldr.w	lr, [sp], #4
 8115224:	b003      	add	sp, #12
 8115226:	4770      	bx	lr
 8115228:	100000b0 	.word	0x100000b0

0811522c <__swhatbuf_r>:
 811522c:	b570      	push	{r4, r5, r6, lr}
 811522e:	460c      	mov	r4, r1
 8115230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8115234:	2900      	cmp	r1, #0
 8115236:	b096      	sub	sp, #88	@ 0x58
 8115238:	4615      	mov	r5, r2
 811523a:	461e      	mov	r6, r3
 811523c:	da0d      	bge.n	811525a <__swhatbuf_r+0x2e>
 811523e:	89a3      	ldrh	r3, [r4, #12]
 8115240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8115244:	f04f 0100 	mov.w	r1, #0
 8115248:	bf14      	ite	ne
 811524a:	2340      	movne	r3, #64	@ 0x40
 811524c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8115250:	2000      	movs	r0, #0
 8115252:	6031      	str	r1, [r6, #0]
 8115254:	602b      	str	r3, [r5, #0]
 8115256:	b016      	add	sp, #88	@ 0x58
 8115258:	bd70      	pop	{r4, r5, r6, pc}
 811525a:	466a      	mov	r2, sp
 811525c:	f000 f874 	bl	8115348 <_fstat_r>
 8115260:	2800      	cmp	r0, #0
 8115262:	dbec      	blt.n	811523e <__swhatbuf_r+0x12>
 8115264:	9901      	ldr	r1, [sp, #4]
 8115266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 811526a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 811526e:	4259      	negs	r1, r3
 8115270:	4159      	adcs	r1, r3
 8115272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8115276:	e7eb      	b.n	8115250 <__swhatbuf_r+0x24>

08115278 <__smakebuf_r>:
 8115278:	898b      	ldrh	r3, [r1, #12]
 811527a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811527c:	079d      	lsls	r5, r3, #30
 811527e:	4606      	mov	r6, r0
 8115280:	460c      	mov	r4, r1
 8115282:	d507      	bpl.n	8115294 <__smakebuf_r+0x1c>
 8115284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8115288:	6023      	str	r3, [r4, #0]
 811528a:	6123      	str	r3, [r4, #16]
 811528c:	2301      	movs	r3, #1
 811528e:	6163      	str	r3, [r4, #20]
 8115290:	b003      	add	sp, #12
 8115292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8115294:	ab01      	add	r3, sp, #4
 8115296:	466a      	mov	r2, sp
 8115298:	f7ff ffc8 	bl	811522c <__swhatbuf_r>
 811529c:	9f00      	ldr	r7, [sp, #0]
 811529e:	4605      	mov	r5, r0
 81152a0:	4639      	mov	r1, r7
 81152a2:	4630      	mov	r0, r6
 81152a4:	f7fe f8a8 	bl	81133f8 <_malloc_r>
 81152a8:	b948      	cbnz	r0, 81152be <__smakebuf_r+0x46>
 81152aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81152ae:	059a      	lsls	r2, r3, #22
 81152b0:	d4ee      	bmi.n	8115290 <__smakebuf_r+0x18>
 81152b2:	f023 0303 	bic.w	r3, r3, #3
 81152b6:	f043 0302 	orr.w	r3, r3, #2
 81152ba:	81a3      	strh	r3, [r4, #12]
 81152bc:	e7e2      	b.n	8115284 <__smakebuf_r+0xc>
 81152be:	89a3      	ldrh	r3, [r4, #12]
 81152c0:	6020      	str	r0, [r4, #0]
 81152c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81152c6:	81a3      	strh	r3, [r4, #12]
 81152c8:	9b01      	ldr	r3, [sp, #4]
 81152ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 81152ce:	b15b      	cbz	r3, 81152e8 <__smakebuf_r+0x70>
 81152d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81152d4:	4630      	mov	r0, r6
 81152d6:	f000 f849 	bl	811536c <_isatty_r>
 81152da:	b128      	cbz	r0, 81152e8 <__smakebuf_r+0x70>
 81152dc:	89a3      	ldrh	r3, [r4, #12]
 81152de:	f023 0303 	bic.w	r3, r3, #3
 81152e2:	f043 0301 	orr.w	r3, r3, #1
 81152e6:	81a3      	strh	r3, [r4, #12]
 81152e8:	89a3      	ldrh	r3, [r4, #12]
 81152ea:	431d      	orrs	r5, r3
 81152ec:	81a5      	strh	r5, [r4, #12]
 81152ee:	e7cf      	b.n	8115290 <__smakebuf_r+0x18>

081152f0 <memmove>:
 81152f0:	4288      	cmp	r0, r1
 81152f2:	b510      	push	{r4, lr}
 81152f4:	eb01 0402 	add.w	r4, r1, r2
 81152f8:	d902      	bls.n	8115300 <memmove+0x10>
 81152fa:	4284      	cmp	r4, r0
 81152fc:	4623      	mov	r3, r4
 81152fe:	d807      	bhi.n	8115310 <memmove+0x20>
 8115300:	1e43      	subs	r3, r0, #1
 8115302:	42a1      	cmp	r1, r4
 8115304:	d008      	beq.n	8115318 <memmove+0x28>
 8115306:	f811 2b01 	ldrb.w	r2, [r1], #1
 811530a:	f803 2f01 	strb.w	r2, [r3, #1]!
 811530e:	e7f8      	b.n	8115302 <memmove+0x12>
 8115310:	4402      	add	r2, r0
 8115312:	4601      	mov	r1, r0
 8115314:	428a      	cmp	r2, r1
 8115316:	d100      	bne.n	811531a <memmove+0x2a>
 8115318:	bd10      	pop	{r4, pc}
 811531a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811531e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8115322:	e7f7      	b.n	8115314 <memmove+0x24>

08115324 <strncmp>:
 8115324:	b510      	push	{r4, lr}
 8115326:	b16a      	cbz	r2, 8115344 <strncmp+0x20>
 8115328:	3901      	subs	r1, #1
 811532a:	1884      	adds	r4, r0, r2
 811532c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8115330:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8115334:	429a      	cmp	r2, r3
 8115336:	d103      	bne.n	8115340 <strncmp+0x1c>
 8115338:	42a0      	cmp	r0, r4
 811533a:	d001      	beq.n	8115340 <strncmp+0x1c>
 811533c:	2a00      	cmp	r2, #0
 811533e:	d1f5      	bne.n	811532c <strncmp+0x8>
 8115340:	1ad0      	subs	r0, r2, r3
 8115342:	bd10      	pop	{r4, pc}
 8115344:	4610      	mov	r0, r2
 8115346:	e7fc      	b.n	8115342 <strncmp+0x1e>

08115348 <_fstat_r>:
 8115348:	b538      	push	{r3, r4, r5, lr}
 811534a:	4d07      	ldr	r5, [pc, #28]	@ (8115368 <_fstat_r+0x20>)
 811534c:	2300      	movs	r3, #0
 811534e:	4604      	mov	r4, r0
 8115350:	4608      	mov	r0, r1
 8115352:	4611      	mov	r1, r2
 8115354:	602b      	str	r3, [r5, #0]
 8115356:	f7ef fbab 	bl	8104ab0 <_fstat>
 811535a:	1c43      	adds	r3, r0, #1
 811535c:	d102      	bne.n	8115364 <_fstat_r+0x1c>
 811535e:	682b      	ldr	r3, [r5, #0]
 8115360:	b103      	cbz	r3, 8115364 <_fstat_r+0x1c>
 8115362:	6023      	str	r3, [r4, #0]
 8115364:	bd38      	pop	{r3, r4, r5, pc}
 8115366:	bf00      	nop
 8115368:	1000d4c0 	.word	0x1000d4c0

0811536c <_isatty_r>:
 811536c:	b538      	push	{r3, r4, r5, lr}
 811536e:	4d06      	ldr	r5, [pc, #24]	@ (8115388 <_isatty_r+0x1c>)
 8115370:	2300      	movs	r3, #0
 8115372:	4604      	mov	r4, r0
 8115374:	4608      	mov	r0, r1
 8115376:	602b      	str	r3, [r5, #0]
 8115378:	f7ef fbaa 	bl	8104ad0 <_isatty>
 811537c:	1c43      	adds	r3, r0, #1
 811537e:	d102      	bne.n	8115386 <_isatty_r+0x1a>
 8115380:	682b      	ldr	r3, [r5, #0]
 8115382:	b103      	cbz	r3, 8115386 <_isatty_r+0x1a>
 8115384:	6023      	str	r3, [r4, #0]
 8115386:	bd38      	pop	{r3, r4, r5, pc}
 8115388:	1000d4c0 	.word	0x1000d4c0

0811538c <_sbrk_r>:
 811538c:	b538      	push	{r3, r4, r5, lr}
 811538e:	4d06      	ldr	r5, [pc, #24]	@ (81153a8 <_sbrk_r+0x1c>)
 8115390:	2300      	movs	r3, #0
 8115392:	4604      	mov	r4, r0
 8115394:	4608      	mov	r0, r1
 8115396:	602b      	str	r3, [r5, #0]
 8115398:	f7ef fbb2 	bl	8104b00 <_sbrk>
 811539c:	1c43      	adds	r3, r0, #1
 811539e:	d102      	bne.n	81153a6 <_sbrk_r+0x1a>
 81153a0:	682b      	ldr	r3, [r5, #0]
 81153a2:	b103      	cbz	r3, 81153a6 <_sbrk_r+0x1a>
 81153a4:	6023      	str	r3, [r4, #0]
 81153a6:	bd38      	pop	{r3, r4, r5, pc}
 81153a8:	1000d4c0 	.word	0x1000d4c0
 81153ac:	00000000 	.word	0x00000000

081153b0 <nan>:
 81153b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 81153b8 <nan+0x8>
 81153b4:	4770      	bx	lr
 81153b6:	bf00      	nop
 81153b8:	00000000 	.word	0x00000000
 81153bc:	7ff80000 	.word	0x7ff80000

081153c0 <abort>:
 81153c0:	b508      	push	{r3, lr}
 81153c2:	2006      	movs	r0, #6
 81153c4:	f000 fbc4 	bl	8115b50 <raise>
 81153c8:	2001      	movs	r0, #1
 81153ca:	f7ef fb3b 	bl	8104a44 <_exit>

081153ce <_calloc_r>:
 81153ce:	b570      	push	{r4, r5, r6, lr}
 81153d0:	fba1 5402 	umull	r5, r4, r1, r2
 81153d4:	b93c      	cbnz	r4, 81153e6 <_calloc_r+0x18>
 81153d6:	4629      	mov	r1, r5
 81153d8:	f7fe f80e 	bl	81133f8 <_malloc_r>
 81153dc:	4606      	mov	r6, r0
 81153de:	b928      	cbnz	r0, 81153ec <_calloc_r+0x1e>
 81153e0:	2600      	movs	r6, #0
 81153e2:	4630      	mov	r0, r6
 81153e4:	bd70      	pop	{r4, r5, r6, pc}
 81153e6:	220c      	movs	r2, #12
 81153e8:	6002      	str	r2, [r0, #0]
 81153ea:	e7f9      	b.n	81153e0 <_calloc_r+0x12>
 81153ec:	462a      	mov	r2, r5
 81153ee:	4621      	mov	r1, r4
 81153f0:	f7fd f890 	bl	8112514 <memset>
 81153f4:	e7f5      	b.n	81153e2 <_calloc_r+0x14>

081153f6 <rshift>:
 81153f6:	6903      	ldr	r3, [r0, #16]
 81153f8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 81153fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8115400:	ea4f 1261 	mov.w	r2, r1, asr #5
 8115404:	f100 0414 	add.w	r4, r0, #20
 8115408:	dd45      	ble.n	8115496 <rshift+0xa0>
 811540a:	f011 011f 	ands.w	r1, r1, #31
 811540e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8115412:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8115416:	d10c      	bne.n	8115432 <rshift+0x3c>
 8115418:	f100 0710 	add.w	r7, r0, #16
 811541c:	4629      	mov	r1, r5
 811541e:	42b1      	cmp	r1, r6
 8115420:	d334      	bcc.n	811548c <rshift+0x96>
 8115422:	1a9b      	subs	r3, r3, r2
 8115424:	009b      	lsls	r3, r3, #2
 8115426:	1eea      	subs	r2, r5, #3
 8115428:	4296      	cmp	r6, r2
 811542a:	bf38      	it	cc
 811542c:	2300      	movcc	r3, #0
 811542e:	4423      	add	r3, r4
 8115430:	e015      	b.n	811545e <rshift+0x68>
 8115432:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8115436:	f1c1 0820 	rsb	r8, r1, #32
 811543a:	40cf      	lsrs	r7, r1
 811543c:	f105 0e04 	add.w	lr, r5, #4
 8115440:	46a1      	mov	r9, r4
 8115442:	4576      	cmp	r6, lr
 8115444:	46f4      	mov	ip, lr
 8115446:	d815      	bhi.n	8115474 <rshift+0x7e>
 8115448:	1a9a      	subs	r2, r3, r2
 811544a:	0092      	lsls	r2, r2, #2
 811544c:	3a04      	subs	r2, #4
 811544e:	3501      	adds	r5, #1
 8115450:	42ae      	cmp	r6, r5
 8115452:	bf38      	it	cc
 8115454:	2200      	movcc	r2, #0
 8115456:	18a3      	adds	r3, r4, r2
 8115458:	50a7      	str	r7, [r4, r2]
 811545a:	b107      	cbz	r7, 811545e <rshift+0x68>
 811545c:	3304      	adds	r3, #4
 811545e:	1b1a      	subs	r2, r3, r4
 8115460:	42a3      	cmp	r3, r4
 8115462:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8115466:	bf08      	it	eq
 8115468:	2300      	moveq	r3, #0
 811546a:	6102      	str	r2, [r0, #16]
 811546c:	bf08      	it	eq
 811546e:	6143      	streq	r3, [r0, #20]
 8115470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8115474:	f8dc c000 	ldr.w	ip, [ip]
 8115478:	fa0c fc08 	lsl.w	ip, ip, r8
 811547c:	ea4c 0707 	orr.w	r7, ip, r7
 8115480:	f849 7b04 	str.w	r7, [r9], #4
 8115484:	f85e 7b04 	ldr.w	r7, [lr], #4
 8115488:	40cf      	lsrs	r7, r1
 811548a:	e7da      	b.n	8115442 <rshift+0x4c>
 811548c:	f851 cb04 	ldr.w	ip, [r1], #4
 8115490:	f847 cf04 	str.w	ip, [r7, #4]!
 8115494:	e7c3      	b.n	811541e <rshift+0x28>
 8115496:	4623      	mov	r3, r4
 8115498:	e7e1      	b.n	811545e <rshift+0x68>

0811549a <__hexdig_fun>:
 811549a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 811549e:	2b09      	cmp	r3, #9
 81154a0:	d802      	bhi.n	81154a8 <__hexdig_fun+0xe>
 81154a2:	3820      	subs	r0, #32
 81154a4:	b2c0      	uxtb	r0, r0
 81154a6:	4770      	bx	lr
 81154a8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 81154ac:	2b05      	cmp	r3, #5
 81154ae:	d801      	bhi.n	81154b4 <__hexdig_fun+0x1a>
 81154b0:	3847      	subs	r0, #71	@ 0x47
 81154b2:	e7f7      	b.n	81154a4 <__hexdig_fun+0xa>
 81154b4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 81154b8:	2b05      	cmp	r3, #5
 81154ba:	d801      	bhi.n	81154c0 <__hexdig_fun+0x26>
 81154bc:	3827      	subs	r0, #39	@ 0x27
 81154be:	e7f1      	b.n	81154a4 <__hexdig_fun+0xa>
 81154c0:	2000      	movs	r0, #0
 81154c2:	4770      	bx	lr

081154c4 <__gethex>:
 81154c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81154c8:	b085      	sub	sp, #20
 81154ca:	468a      	mov	sl, r1
 81154cc:	9302      	str	r3, [sp, #8]
 81154ce:	680b      	ldr	r3, [r1, #0]
 81154d0:	9001      	str	r0, [sp, #4]
 81154d2:	4690      	mov	r8, r2
 81154d4:	1c9c      	adds	r4, r3, #2
 81154d6:	46a1      	mov	r9, r4
 81154d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 81154dc:	2830      	cmp	r0, #48	@ 0x30
 81154de:	d0fa      	beq.n	81154d6 <__gethex+0x12>
 81154e0:	eba9 0303 	sub.w	r3, r9, r3
 81154e4:	f1a3 0b02 	sub.w	fp, r3, #2
 81154e8:	f7ff ffd7 	bl	811549a <__hexdig_fun>
 81154ec:	4605      	mov	r5, r0
 81154ee:	2800      	cmp	r0, #0
 81154f0:	d168      	bne.n	81155c4 <__gethex+0x100>
 81154f2:	49a0      	ldr	r1, [pc, #640]	@ (8115774 <__gethex+0x2b0>)
 81154f4:	2201      	movs	r2, #1
 81154f6:	4648      	mov	r0, r9
 81154f8:	f7ff ff14 	bl	8115324 <strncmp>
 81154fc:	4607      	mov	r7, r0
 81154fe:	2800      	cmp	r0, #0
 8115500:	d167      	bne.n	81155d2 <__gethex+0x10e>
 8115502:	f899 0001 	ldrb.w	r0, [r9, #1]
 8115506:	4626      	mov	r6, r4
 8115508:	f7ff ffc7 	bl	811549a <__hexdig_fun>
 811550c:	2800      	cmp	r0, #0
 811550e:	d062      	beq.n	81155d6 <__gethex+0x112>
 8115510:	4623      	mov	r3, r4
 8115512:	7818      	ldrb	r0, [r3, #0]
 8115514:	2830      	cmp	r0, #48	@ 0x30
 8115516:	4699      	mov	r9, r3
 8115518:	f103 0301 	add.w	r3, r3, #1
 811551c:	d0f9      	beq.n	8115512 <__gethex+0x4e>
 811551e:	f7ff ffbc 	bl	811549a <__hexdig_fun>
 8115522:	fab0 f580 	clz	r5, r0
 8115526:	096d      	lsrs	r5, r5, #5
 8115528:	f04f 0b01 	mov.w	fp, #1
 811552c:	464a      	mov	r2, r9
 811552e:	4616      	mov	r6, r2
 8115530:	3201      	adds	r2, #1
 8115532:	7830      	ldrb	r0, [r6, #0]
 8115534:	f7ff ffb1 	bl	811549a <__hexdig_fun>
 8115538:	2800      	cmp	r0, #0
 811553a:	d1f8      	bne.n	811552e <__gethex+0x6a>
 811553c:	498d      	ldr	r1, [pc, #564]	@ (8115774 <__gethex+0x2b0>)
 811553e:	2201      	movs	r2, #1
 8115540:	4630      	mov	r0, r6
 8115542:	f7ff feef 	bl	8115324 <strncmp>
 8115546:	2800      	cmp	r0, #0
 8115548:	d13f      	bne.n	81155ca <__gethex+0x106>
 811554a:	b944      	cbnz	r4, 811555e <__gethex+0x9a>
 811554c:	1c74      	adds	r4, r6, #1
 811554e:	4622      	mov	r2, r4
 8115550:	4616      	mov	r6, r2
 8115552:	3201      	adds	r2, #1
 8115554:	7830      	ldrb	r0, [r6, #0]
 8115556:	f7ff ffa0 	bl	811549a <__hexdig_fun>
 811555a:	2800      	cmp	r0, #0
 811555c:	d1f8      	bne.n	8115550 <__gethex+0x8c>
 811555e:	1ba4      	subs	r4, r4, r6
 8115560:	00a7      	lsls	r7, r4, #2
 8115562:	7833      	ldrb	r3, [r6, #0]
 8115564:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8115568:	2b50      	cmp	r3, #80	@ 0x50
 811556a:	d13e      	bne.n	81155ea <__gethex+0x126>
 811556c:	7873      	ldrb	r3, [r6, #1]
 811556e:	2b2b      	cmp	r3, #43	@ 0x2b
 8115570:	d033      	beq.n	81155da <__gethex+0x116>
 8115572:	2b2d      	cmp	r3, #45	@ 0x2d
 8115574:	d034      	beq.n	81155e0 <__gethex+0x11c>
 8115576:	1c71      	adds	r1, r6, #1
 8115578:	2400      	movs	r4, #0
 811557a:	7808      	ldrb	r0, [r1, #0]
 811557c:	f7ff ff8d 	bl	811549a <__hexdig_fun>
 8115580:	1e43      	subs	r3, r0, #1
 8115582:	b2db      	uxtb	r3, r3
 8115584:	2b18      	cmp	r3, #24
 8115586:	d830      	bhi.n	81155ea <__gethex+0x126>
 8115588:	f1a0 0210 	sub.w	r2, r0, #16
 811558c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8115590:	f7ff ff83 	bl	811549a <__hexdig_fun>
 8115594:	f100 3cff 	add.w	ip, r0, #4294967295
 8115598:	fa5f fc8c 	uxtb.w	ip, ip
 811559c:	f1bc 0f18 	cmp.w	ip, #24
 81155a0:	f04f 030a 	mov.w	r3, #10
 81155a4:	d91e      	bls.n	81155e4 <__gethex+0x120>
 81155a6:	b104      	cbz	r4, 81155aa <__gethex+0xe6>
 81155a8:	4252      	negs	r2, r2
 81155aa:	4417      	add	r7, r2
 81155ac:	f8ca 1000 	str.w	r1, [sl]
 81155b0:	b1ed      	cbz	r5, 81155ee <__gethex+0x12a>
 81155b2:	f1bb 0f00 	cmp.w	fp, #0
 81155b6:	bf0c      	ite	eq
 81155b8:	2506      	moveq	r5, #6
 81155ba:	2500      	movne	r5, #0
 81155bc:	4628      	mov	r0, r5
 81155be:	b005      	add	sp, #20
 81155c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81155c4:	2500      	movs	r5, #0
 81155c6:	462c      	mov	r4, r5
 81155c8:	e7b0      	b.n	811552c <__gethex+0x68>
 81155ca:	2c00      	cmp	r4, #0
 81155cc:	d1c7      	bne.n	811555e <__gethex+0x9a>
 81155ce:	4627      	mov	r7, r4
 81155d0:	e7c7      	b.n	8115562 <__gethex+0x9e>
 81155d2:	464e      	mov	r6, r9
 81155d4:	462f      	mov	r7, r5
 81155d6:	2501      	movs	r5, #1
 81155d8:	e7c3      	b.n	8115562 <__gethex+0x9e>
 81155da:	2400      	movs	r4, #0
 81155dc:	1cb1      	adds	r1, r6, #2
 81155de:	e7cc      	b.n	811557a <__gethex+0xb6>
 81155e0:	2401      	movs	r4, #1
 81155e2:	e7fb      	b.n	81155dc <__gethex+0x118>
 81155e4:	fb03 0002 	mla	r0, r3, r2, r0
 81155e8:	e7ce      	b.n	8115588 <__gethex+0xc4>
 81155ea:	4631      	mov	r1, r6
 81155ec:	e7de      	b.n	81155ac <__gethex+0xe8>
 81155ee:	eba6 0309 	sub.w	r3, r6, r9
 81155f2:	3b01      	subs	r3, #1
 81155f4:	4629      	mov	r1, r5
 81155f6:	2b07      	cmp	r3, #7
 81155f8:	dc0a      	bgt.n	8115610 <__gethex+0x14c>
 81155fa:	9801      	ldr	r0, [sp, #4]
 81155fc:	f7fd ff88 	bl	8113510 <_Balloc>
 8115600:	4604      	mov	r4, r0
 8115602:	b940      	cbnz	r0, 8115616 <__gethex+0x152>
 8115604:	4b5c      	ldr	r3, [pc, #368]	@ (8115778 <__gethex+0x2b4>)
 8115606:	4602      	mov	r2, r0
 8115608:	21e4      	movs	r1, #228	@ 0xe4
 811560a:	485c      	ldr	r0, [pc, #368]	@ (811577c <__gethex+0x2b8>)
 811560c:	f7fd f816 	bl	811263c <__assert_func>
 8115610:	3101      	adds	r1, #1
 8115612:	105b      	asrs	r3, r3, #1
 8115614:	e7ef      	b.n	81155f6 <__gethex+0x132>
 8115616:	f100 0a14 	add.w	sl, r0, #20
 811561a:	2300      	movs	r3, #0
 811561c:	4655      	mov	r5, sl
 811561e:	469b      	mov	fp, r3
 8115620:	45b1      	cmp	r9, r6
 8115622:	d337      	bcc.n	8115694 <__gethex+0x1d0>
 8115624:	f845 bb04 	str.w	fp, [r5], #4
 8115628:	eba5 050a 	sub.w	r5, r5, sl
 811562c:	10ad      	asrs	r5, r5, #2
 811562e:	6125      	str	r5, [r4, #16]
 8115630:	4658      	mov	r0, fp
 8115632:	f7fe f85f 	bl	81136f4 <__hi0bits>
 8115636:	016d      	lsls	r5, r5, #5
 8115638:	f8d8 6000 	ldr.w	r6, [r8]
 811563c:	1a2d      	subs	r5, r5, r0
 811563e:	42b5      	cmp	r5, r6
 8115640:	dd54      	ble.n	81156ec <__gethex+0x228>
 8115642:	1bad      	subs	r5, r5, r6
 8115644:	4629      	mov	r1, r5
 8115646:	4620      	mov	r0, r4
 8115648:	f7fe fbf3 	bl	8113e32 <__any_on>
 811564c:	4681      	mov	r9, r0
 811564e:	b178      	cbz	r0, 8115670 <__gethex+0x1ac>
 8115650:	1e6b      	subs	r3, r5, #1
 8115652:	1159      	asrs	r1, r3, #5
 8115654:	f003 021f 	and.w	r2, r3, #31
 8115658:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 811565c:	f04f 0901 	mov.w	r9, #1
 8115660:	fa09 f202 	lsl.w	r2, r9, r2
 8115664:	420a      	tst	r2, r1
 8115666:	d003      	beq.n	8115670 <__gethex+0x1ac>
 8115668:	454b      	cmp	r3, r9
 811566a:	dc36      	bgt.n	81156da <__gethex+0x216>
 811566c:	f04f 0902 	mov.w	r9, #2
 8115670:	4629      	mov	r1, r5
 8115672:	4620      	mov	r0, r4
 8115674:	f7ff febf 	bl	81153f6 <rshift>
 8115678:	442f      	add	r7, r5
 811567a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811567e:	42bb      	cmp	r3, r7
 8115680:	da42      	bge.n	8115708 <__gethex+0x244>
 8115682:	9801      	ldr	r0, [sp, #4]
 8115684:	4621      	mov	r1, r4
 8115686:	f7fd ff83 	bl	8113590 <_Bfree>
 811568a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811568c:	2300      	movs	r3, #0
 811568e:	6013      	str	r3, [r2, #0]
 8115690:	25a3      	movs	r5, #163	@ 0xa3
 8115692:	e793      	b.n	81155bc <__gethex+0xf8>
 8115694:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8115698:	2a2e      	cmp	r2, #46	@ 0x2e
 811569a:	d012      	beq.n	81156c2 <__gethex+0x1fe>
 811569c:	2b20      	cmp	r3, #32
 811569e:	d104      	bne.n	81156aa <__gethex+0x1e6>
 81156a0:	f845 bb04 	str.w	fp, [r5], #4
 81156a4:	f04f 0b00 	mov.w	fp, #0
 81156a8:	465b      	mov	r3, fp
 81156aa:	7830      	ldrb	r0, [r6, #0]
 81156ac:	9303      	str	r3, [sp, #12]
 81156ae:	f7ff fef4 	bl	811549a <__hexdig_fun>
 81156b2:	9b03      	ldr	r3, [sp, #12]
 81156b4:	f000 000f 	and.w	r0, r0, #15
 81156b8:	4098      	lsls	r0, r3
 81156ba:	ea4b 0b00 	orr.w	fp, fp, r0
 81156be:	3304      	adds	r3, #4
 81156c0:	e7ae      	b.n	8115620 <__gethex+0x15c>
 81156c2:	45b1      	cmp	r9, r6
 81156c4:	d8ea      	bhi.n	811569c <__gethex+0x1d8>
 81156c6:	492b      	ldr	r1, [pc, #172]	@ (8115774 <__gethex+0x2b0>)
 81156c8:	9303      	str	r3, [sp, #12]
 81156ca:	2201      	movs	r2, #1
 81156cc:	4630      	mov	r0, r6
 81156ce:	f7ff fe29 	bl	8115324 <strncmp>
 81156d2:	9b03      	ldr	r3, [sp, #12]
 81156d4:	2800      	cmp	r0, #0
 81156d6:	d1e1      	bne.n	811569c <__gethex+0x1d8>
 81156d8:	e7a2      	b.n	8115620 <__gethex+0x15c>
 81156da:	1ea9      	subs	r1, r5, #2
 81156dc:	4620      	mov	r0, r4
 81156de:	f7fe fba8 	bl	8113e32 <__any_on>
 81156e2:	2800      	cmp	r0, #0
 81156e4:	d0c2      	beq.n	811566c <__gethex+0x1a8>
 81156e6:	f04f 0903 	mov.w	r9, #3
 81156ea:	e7c1      	b.n	8115670 <__gethex+0x1ac>
 81156ec:	da09      	bge.n	8115702 <__gethex+0x23e>
 81156ee:	1b75      	subs	r5, r6, r5
 81156f0:	4621      	mov	r1, r4
 81156f2:	9801      	ldr	r0, [sp, #4]
 81156f4:	462a      	mov	r2, r5
 81156f6:	f7fe f963 	bl	81139c0 <__lshift>
 81156fa:	1b7f      	subs	r7, r7, r5
 81156fc:	4604      	mov	r4, r0
 81156fe:	f100 0a14 	add.w	sl, r0, #20
 8115702:	f04f 0900 	mov.w	r9, #0
 8115706:	e7b8      	b.n	811567a <__gethex+0x1b6>
 8115708:	f8d8 5004 	ldr.w	r5, [r8, #4]
 811570c:	42bd      	cmp	r5, r7
 811570e:	dd6f      	ble.n	81157f0 <__gethex+0x32c>
 8115710:	1bed      	subs	r5, r5, r7
 8115712:	42ae      	cmp	r6, r5
 8115714:	dc34      	bgt.n	8115780 <__gethex+0x2bc>
 8115716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811571a:	2b02      	cmp	r3, #2
 811571c:	d022      	beq.n	8115764 <__gethex+0x2a0>
 811571e:	2b03      	cmp	r3, #3
 8115720:	d024      	beq.n	811576c <__gethex+0x2a8>
 8115722:	2b01      	cmp	r3, #1
 8115724:	d115      	bne.n	8115752 <__gethex+0x28e>
 8115726:	42ae      	cmp	r6, r5
 8115728:	d113      	bne.n	8115752 <__gethex+0x28e>
 811572a:	2e01      	cmp	r6, #1
 811572c:	d10b      	bne.n	8115746 <__gethex+0x282>
 811572e:	9a02      	ldr	r2, [sp, #8]
 8115730:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8115734:	6013      	str	r3, [r2, #0]
 8115736:	2301      	movs	r3, #1
 8115738:	6123      	str	r3, [r4, #16]
 811573a:	f8ca 3000 	str.w	r3, [sl]
 811573e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8115740:	2562      	movs	r5, #98	@ 0x62
 8115742:	601c      	str	r4, [r3, #0]
 8115744:	e73a      	b.n	81155bc <__gethex+0xf8>
 8115746:	1e71      	subs	r1, r6, #1
 8115748:	4620      	mov	r0, r4
 811574a:	f7fe fb72 	bl	8113e32 <__any_on>
 811574e:	2800      	cmp	r0, #0
 8115750:	d1ed      	bne.n	811572e <__gethex+0x26a>
 8115752:	9801      	ldr	r0, [sp, #4]
 8115754:	4621      	mov	r1, r4
 8115756:	f7fd ff1b 	bl	8113590 <_Bfree>
 811575a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811575c:	2300      	movs	r3, #0
 811575e:	6013      	str	r3, [r2, #0]
 8115760:	2550      	movs	r5, #80	@ 0x50
 8115762:	e72b      	b.n	81155bc <__gethex+0xf8>
 8115764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8115766:	2b00      	cmp	r3, #0
 8115768:	d1f3      	bne.n	8115752 <__gethex+0x28e>
 811576a:	e7e0      	b.n	811572e <__gethex+0x26a>
 811576c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811576e:	2b00      	cmp	r3, #0
 8115770:	d1dd      	bne.n	811572e <__gethex+0x26a>
 8115772:	e7ee      	b.n	8115752 <__gethex+0x28e>
 8115774:	08115f50 	.word	0x08115f50
 8115778:	08115de9 	.word	0x08115de9
 811577c:	081160c2 	.word	0x081160c2
 8115780:	1e6f      	subs	r7, r5, #1
 8115782:	f1b9 0f00 	cmp.w	r9, #0
 8115786:	d130      	bne.n	81157ea <__gethex+0x326>
 8115788:	b127      	cbz	r7, 8115794 <__gethex+0x2d0>
 811578a:	4639      	mov	r1, r7
 811578c:	4620      	mov	r0, r4
 811578e:	f7fe fb50 	bl	8113e32 <__any_on>
 8115792:	4681      	mov	r9, r0
 8115794:	117a      	asrs	r2, r7, #5
 8115796:	2301      	movs	r3, #1
 8115798:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 811579c:	f007 071f 	and.w	r7, r7, #31
 81157a0:	40bb      	lsls	r3, r7
 81157a2:	4213      	tst	r3, r2
 81157a4:	4629      	mov	r1, r5
 81157a6:	4620      	mov	r0, r4
 81157a8:	bf18      	it	ne
 81157aa:	f049 0902 	orrne.w	r9, r9, #2
 81157ae:	f7ff fe22 	bl	81153f6 <rshift>
 81157b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 81157b6:	1b76      	subs	r6, r6, r5
 81157b8:	2502      	movs	r5, #2
 81157ba:	f1b9 0f00 	cmp.w	r9, #0
 81157be:	d047      	beq.n	8115850 <__gethex+0x38c>
 81157c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81157c4:	2b02      	cmp	r3, #2
 81157c6:	d015      	beq.n	81157f4 <__gethex+0x330>
 81157c8:	2b03      	cmp	r3, #3
 81157ca:	d017      	beq.n	81157fc <__gethex+0x338>
 81157cc:	2b01      	cmp	r3, #1
 81157ce:	d109      	bne.n	81157e4 <__gethex+0x320>
 81157d0:	f019 0f02 	tst.w	r9, #2
 81157d4:	d006      	beq.n	81157e4 <__gethex+0x320>
 81157d6:	f8da 3000 	ldr.w	r3, [sl]
 81157da:	ea49 0903 	orr.w	r9, r9, r3
 81157de:	f019 0f01 	tst.w	r9, #1
 81157e2:	d10e      	bne.n	8115802 <__gethex+0x33e>
 81157e4:	f045 0510 	orr.w	r5, r5, #16
 81157e8:	e032      	b.n	8115850 <__gethex+0x38c>
 81157ea:	f04f 0901 	mov.w	r9, #1
 81157ee:	e7d1      	b.n	8115794 <__gethex+0x2d0>
 81157f0:	2501      	movs	r5, #1
 81157f2:	e7e2      	b.n	81157ba <__gethex+0x2f6>
 81157f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81157f6:	f1c3 0301 	rsb	r3, r3, #1
 81157fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 81157fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81157fe:	2b00      	cmp	r3, #0
 8115800:	d0f0      	beq.n	81157e4 <__gethex+0x320>
 8115802:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8115806:	f104 0314 	add.w	r3, r4, #20
 811580a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 811580e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8115812:	f04f 0c00 	mov.w	ip, #0
 8115816:	4618      	mov	r0, r3
 8115818:	f853 2b04 	ldr.w	r2, [r3], #4
 811581c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8115820:	d01b      	beq.n	811585a <__gethex+0x396>
 8115822:	3201      	adds	r2, #1
 8115824:	6002      	str	r2, [r0, #0]
 8115826:	2d02      	cmp	r5, #2
 8115828:	f104 0314 	add.w	r3, r4, #20
 811582c:	d13c      	bne.n	81158a8 <__gethex+0x3e4>
 811582e:	f8d8 2000 	ldr.w	r2, [r8]
 8115832:	3a01      	subs	r2, #1
 8115834:	42b2      	cmp	r2, r6
 8115836:	d109      	bne.n	811584c <__gethex+0x388>
 8115838:	1171      	asrs	r1, r6, #5
 811583a:	2201      	movs	r2, #1
 811583c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8115840:	f006 061f 	and.w	r6, r6, #31
 8115844:	fa02 f606 	lsl.w	r6, r2, r6
 8115848:	421e      	tst	r6, r3
 811584a:	d13a      	bne.n	81158c2 <__gethex+0x3fe>
 811584c:	f045 0520 	orr.w	r5, r5, #32
 8115850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8115852:	601c      	str	r4, [r3, #0]
 8115854:	9b02      	ldr	r3, [sp, #8]
 8115856:	601f      	str	r7, [r3, #0]
 8115858:	e6b0      	b.n	81155bc <__gethex+0xf8>
 811585a:	4299      	cmp	r1, r3
 811585c:	f843 cc04 	str.w	ip, [r3, #-4]
 8115860:	d8d9      	bhi.n	8115816 <__gethex+0x352>
 8115862:	68a3      	ldr	r3, [r4, #8]
 8115864:	459b      	cmp	fp, r3
 8115866:	db17      	blt.n	8115898 <__gethex+0x3d4>
 8115868:	6861      	ldr	r1, [r4, #4]
 811586a:	9801      	ldr	r0, [sp, #4]
 811586c:	3101      	adds	r1, #1
 811586e:	f7fd fe4f 	bl	8113510 <_Balloc>
 8115872:	4681      	mov	r9, r0
 8115874:	b918      	cbnz	r0, 811587e <__gethex+0x3ba>
 8115876:	4b1a      	ldr	r3, [pc, #104]	@ (81158e0 <__gethex+0x41c>)
 8115878:	4602      	mov	r2, r0
 811587a:	2184      	movs	r1, #132	@ 0x84
 811587c:	e6c5      	b.n	811560a <__gethex+0x146>
 811587e:	6922      	ldr	r2, [r4, #16]
 8115880:	3202      	adds	r2, #2
 8115882:	f104 010c 	add.w	r1, r4, #12
 8115886:	0092      	lsls	r2, r2, #2
 8115888:	300c      	adds	r0, #12
 811588a:	f7fc fec2 	bl	8112612 <memcpy>
 811588e:	4621      	mov	r1, r4
 8115890:	9801      	ldr	r0, [sp, #4]
 8115892:	f7fd fe7d 	bl	8113590 <_Bfree>
 8115896:	464c      	mov	r4, r9
 8115898:	6923      	ldr	r3, [r4, #16]
 811589a:	1c5a      	adds	r2, r3, #1
 811589c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81158a0:	6122      	str	r2, [r4, #16]
 81158a2:	2201      	movs	r2, #1
 81158a4:	615a      	str	r2, [r3, #20]
 81158a6:	e7be      	b.n	8115826 <__gethex+0x362>
 81158a8:	6922      	ldr	r2, [r4, #16]
 81158aa:	455a      	cmp	r2, fp
 81158ac:	dd0b      	ble.n	81158c6 <__gethex+0x402>
 81158ae:	2101      	movs	r1, #1
 81158b0:	4620      	mov	r0, r4
 81158b2:	f7ff fda0 	bl	81153f6 <rshift>
 81158b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81158ba:	3701      	adds	r7, #1
 81158bc:	42bb      	cmp	r3, r7
 81158be:	f6ff aee0 	blt.w	8115682 <__gethex+0x1be>
 81158c2:	2501      	movs	r5, #1
 81158c4:	e7c2      	b.n	811584c <__gethex+0x388>
 81158c6:	f016 061f 	ands.w	r6, r6, #31
 81158ca:	d0fa      	beq.n	81158c2 <__gethex+0x3fe>
 81158cc:	4453      	add	r3, sl
 81158ce:	f1c6 0620 	rsb	r6, r6, #32
 81158d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 81158d6:	f7fd ff0d 	bl	81136f4 <__hi0bits>
 81158da:	42b0      	cmp	r0, r6
 81158dc:	dbe7      	blt.n	81158ae <__gethex+0x3ea>
 81158de:	e7f0      	b.n	81158c2 <__gethex+0x3fe>
 81158e0:	08115de9 	.word	0x08115de9

081158e4 <L_shift>:
 81158e4:	f1c2 0208 	rsb	r2, r2, #8
 81158e8:	0092      	lsls	r2, r2, #2
 81158ea:	b570      	push	{r4, r5, r6, lr}
 81158ec:	f1c2 0620 	rsb	r6, r2, #32
 81158f0:	6843      	ldr	r3, [r0, #4]
 81158f2:	6804      	ldr	r4, [r0, #0]
 81158f4:	fa03 f506 	lsl.w	r5, r3, r6
 81158f8:	432c      	orrs	r4, r5
 81158fa:	40d3      	lsrs	r3, r2
 81158fc:	6004      	str	r4, [r0, #0]
 81158fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8115902:	4288      	cmp	r0, r1
 8115904:	d3f4      	bcc.n	81158f0 <L_shift+0xc>
 8115906:	bd70      	pop	{r4, r5, r6, pc}

08115908 <__match>:
 8115908:	b530      	push	{r4, r5, lr}
 811590a:	6803      	ldr	r3, [r0, #0]
 811590c:	3301      	adds	r3, #1
 811590e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8115912:	b914      	cbnz	r4, 811591a <__match+0x12>
 8115914:	6003      	str	r3, [r0, #0]
 8115916:	2001      	movs	r0, #1
 8115918:	bd30      	pop	{r4, r5, pc}
 811591a:	f813 2b01 	ldrb.w	r2, [r3], #1
 811591e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8115922:	2d19      	cmp	r5, #25
 8115924:	bf98      	it	ls
 8115926:	3220      	addls	r2, #32
 8115928:	42a2      	cmp	r2, r4
 811592a:	d0f0      	beq.n	811590e <__match+0x6>
 811592c:	2000      	movs	r0, #0
 811592e:	e7f3      	b.n	8115918 <__match+0x10>

08115930 <__hexnan>:
 8115930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8115934:	680b      	ldr	r3, [r1, #0]
 8115936:	6801      	ldr	r1, [r0, #0]
 8115938:	115e      	asrs	r6, r3, #5
 811593a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 811593e:	f013 031f 	ands.w	r3, r3, #31
 8115942:	b087      	sub	sp, #28
 8115944:	bf18      	it	ne
 8115946:	3604      	addne	r6, #4
 8115948:	2500      	movs	r5, #0
 811594a:	1f37      	subs	r7, r6, #4
 811594c:	4682      	mov	sl, r0
 811594e:	4690      	mov	r8, r2
 8115950:	9301      	str	r3, [sp, #4]
 8115952:	f846 5c04 	str.w	r5, [r6, #-4]
 8115956:	46b9      	mov	r9, r7
 8115958:	463c      	mov	r4, r7
 811595a:	9502      	str	r5, [sp, #8]
 811595c:	46ab      	mov	fp, r5
 811595e:	784a      	ldrb	r2, [r1, #1]
 8115960:	1c4b      	adds	r3, r1, #1
 8115962:	9303      	str	r3, [sp, #12]
 8115964:	b342      	cbz	r2, 81159b8 <__hexnan+0x88>
 8115966:	4610      	mov	r0, r2
 8115968:	9105      	str	r1, [sp, #20]
 811596a:	9204      	str	r2, [sp, #16]
 811596c:	f7ff fd95 	bl	811549a <__hexdig_fun>
 8115970:	2800      	cmp	r0, #0
 8115972:	d151      	bne.n	8115a18 <__hexnan+0xe8>
 8115974:	9a04      	ldr	r2, [sp, #16]
 8115976:	9905      	ldr	r1, [sp, #20]
 8115978:	2a20      	cmp	r2, #32
 811597a:	d818      	bhi.n	81159ae <__hexnan+0x7e>
 811597c:	9b02      	ldr	r3, [sp, #8]
 811597e:	459b      	cmp	fp, r3
 8115980:	dd13      	ble.n	81159aa <__hexnan+0x7a>
 8115982:	454c      	cmp	r4, r9
 8115984:	d206      	bcs.n	8115994 <__hexnan+0x64>
 8115986:	2d07      	cmp	r5, #7
 8115988:	dc04      	bgt.n	8115994 <__hexnan+0x64>
 811598a:	462a      	mov	r2, r5
 811598c:	4649      	mov	r1, r9
 811598e:	4620      	mov	r0, r4
 8115990:	f7ff ffa8 	bl	81158e4 <L_shift>
 8115994:	4544      	cmp	r4, r8
 8115996:	d952      	bls.n	8115a3e <__hexnan+0x10e>
 8115998:	2300      	movs	r3, #0
 811599a:	f1a4 0904 	sub.w	r9, r4, #4
 811599e:	f844 3c04 	str.w	r3, [r4, #-4]
 81159a2:	f8cd b008 	str.w	fp, [sp, #8]
 81159a6:	464c      	mov	r4, r9
 81159a8:	461d      	mov	r5, r3
 81159aa:	9903      	ldr	r1, [sp, #12]
 81159ac:	e7d7      	b.n	811595e <__hexnan+0x2e>
 81159ae:	2a29      	cmp	r2, #41	@ 0x29
 81159b0:	d157      	bne.n	8115a62 <__hexnan+0x132>
 81159b2:	3102      	adds	r1, #2
 81159b4:	f8ca 1000 	str.w	r1, [sl]
 81159b8:	f1bb 0f00 	cmp.w	fp, #0
 81159bc:	d051      	beq.n	8115a62 <__hexnan+0x132>
 81159be:	454c      	cmp	r4, r9
 81159c0:	d206      	bcs.n	81159d0 <__hexnan+0xa0>
 81159c2:	2d07      	cmp	r5, #7
 81159c4:	dc04      	bgt.n	81159d0 <__hexnan+0xa0>
 81159c6:	462a      	mov	r2, r5
 81159c8:	4649      	mov	r1, r9
 81159ca:	4620      	mov	r0, r4
 81159cc:	f7ff ff8a 	bl	81158e4 <L_shift>
 81159d0:	4544      	cmp	r4, r8
 81159d2:	d936      	bls.n	8115a42 <__hexnan+0x112>
 81159d4:	f1a8 0204 	sub.w	r2, r8, #4
 81159d8:	4623      	mov	r3, r4
 81159da:	f853 1b04 	ldr.w	r1, [r3], #4
 81159de:	f842 1f04 	str.w	r1, [r2, #4]!
 81159e2:	429f      	cmp	r7, r3
 81159e4:	d2f9      	bcs.n	81159da <__hexnan+0xaa>
 81159e6:	1b3b      	subs	r3, r7, r4
 81159e8:	f023 0303 	bic.w	r3, r3, #3
 81159ec:	3304      	adds	r3, #4
 81159ee:	3401      	adds	r4, #1
 81159f0:	3e03      	subs	r6, #3
 81159f2:	42b4      	cmp	r4, r6
 81159f4:	bf88      	it	hi
 81159f6:	2304      	movhi	r3, #4
 81159f8:	4443      	add	r3, r8
 81159fa:	2200      	movs	r2, #0
 81159fc:	f843 2b04 	str.w	r2, [r3], #4
 8115a00:	429f      	cmp	r7, r3
 8115a02:	d2fb      	bcs.n	81159fc <__hexnan+0xcc>
 8115a04:	683b      	ldr	r3, [r7, #0]
 8115a06:	b91b      	cbnz	r3, 8115a10 <__hexnan+0xe0>
 8115a08:	4547      	cmp	r7, r8
 8115a0a:	d128      	bne.n	8115a5e <__hexnan+0x12e>
 8115a0c:	2301      	movs	r3, #1
 8115a0e:	603b      	str	r3, [r7, #0]
 8115a10:	2005      	movs	r0, #5
 8115a12:	b007      	add	sp, #28
 8115a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8115a18:	3501      	adds	r5, #1
 8115a1a:	2d08      	cmp	r5, #8
 8115a1c:	f10b 0b01 	add.w	fp, fp, #1
 8115a20:	dd06      	ble.n	8115a30 <__hexnan+0x100>
 8115a22:	4544      	cmp	r4, r8
 8115a24:	d9c1      	bls.n	81159aa <__hexnan+0x7a>
 8115a26:	2300      	movs	r3, #0
 8115a28:	f844 3c04 	str.w	r3, [r4, #-4]
 8115a2c:	2501      	movs	r5, #1
 8115a2e:	3c04      	subs	r4, #4
 8115a30:	6822      	ldr	r2, [r4, #0]
 8115a32:	f000 000f 	and.w	r0, r0, #15
 8115a36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8115a3a:	6020      	str	r0, [r4, #0]
 8115a3c:	e7b5      	b.n	81159aa <__hexnan+0x7a>
 8115a3e:	2508      	movs	r5, #8
 8115a40:	e7b3      	b.n	81159aa <__hexnan+0x7a>
 8115a42:	9b01      	ldr	r3, [sp, #4]
 8115a44:	2b00      	cmp	r3, #0
 8115a46:	d0dd      	beq.n	8115a04 <__hexnan+0xd4>
 8115a48:	f1c3 0320 	rsb	r3, r3, #32
 8115a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8115a50:	40da      	lsrs	r2, r3
 8115a52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8115a56:	4013      	ands	r3, r2
 8115a58:	f846 3c04 	str.w	r3, [r6, #-4]
 8115a5c:	e7d2      	b.n	8115a04 <__hexnan+0xd4>
 8115a5e:	3f04      	subs	r7, #4
 8115a60:	e7d0      	b.n	8115a04 <__hexnan+0xd4>
 8115a62:	2004      	movs	r0, #4
 8115a64:	e7d5      	b.n	8115a12 <__hexnan+0xe2>

08115a66 <__ascii_mbtowc>:
 8115a66:	b082      	sub	sp, #8
 8115a68:	b901      	cbnz	r1, 8115a6c <__ascii_mbtowc+0x6>
 8115a6a:	a901      	add	r1, sp, #4
 8115a6c:	b142      	cbz	r2, 8115a80 <__ascii_mbtowc+0x1a>
 8115a6e:	b14b      	cbz	r3, 8115a84 <__ascii_mbtowc+0x1e>
 8115a70:	7813      	ldrb	r3, [r2, #0]
 8115a72:	600b      	str	r3, [r1, #0]
 8115a74:	7812      	ldrb	r2, [r2, #0]
 8115a76:	1e10      	subs	r0, r2, #0
 8115a78:	bf18      	it	ne
 8115a7a:	2001      	movne	r0, #1
 8115a7c:	b002      	add	sp, #8
 8115a7e:	4770      	bx	lr
 8115a80:	4610      	mov	r0, r2
 8115a82:	e7fb      	b.n	8115a7c <__ascii_mbtowc+0x16>
 8115a84:	f06f 0001 	mvn.w	r0, #1
 8115a88:	e7f8      	b.n	8115a7c <__ascii_mbtowc+0x16>

08115a8a <_realloc_r>:
 8115a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8115a8e:	4680      	mov	r8, r0
 8115a90:	4615      	mov	r5, r2
 8115a92:	460c      	mov	r4, r1
 8115a94:	b921      	cbnz	r1, 8115aa0 <_realloc_r+0x16>
 8115a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8115a9a:	4611      	mov	r1, r2
 8115a9c:	f7fd bcac 	b.w	81133f8 <_malloc_r>
 8115aa0:	b92a      	cbnz	r2, 8115aae <_realloc_r+0x24>
 8115aa2:	f7fd fc35 	bl	8113310 <_free_r>
 8115aa6:	2400      	movs	r4, #0
 8115aa8:	4620      	mov	r0, r4
 8115aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8115aae:	f000 f86b 	bl	8115b88 <_malloc_usable_size_r>
 8115ab2:	4285      	cmp	r5, r0
 8115ab4:	4606      	mov	r6, r0
 8115ab6:	d802      	bhi.n	8115abe <_realloc_r+0x34>
 8115ab8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8115abc:	d8f4      	bhi.n	8115aa8 <_realloc_r+0x1e>
 8115abe:	4629      	mov	r1, r5
 8115ac0:	4640      	mov	r0, r8
 8115ac2:	f7fd fc99 	bl	81133f8 <_malloc_r>
 8115ac6:	4607      	mov	r7, r0
 8115ac8:	2800      	cmp	r0, #0
 8115aca:	d0ec      	beq.n	8115aa6 <_realloc_r+0x1c>
 8115acc:	42b5      	cmp	r5, r6
 8115ace:	462a      	mov	r2, r5
 8115ad0:	4621      	mov	r1, r4
 8115ad2:	bf28      	it	cs
 8115ad4:	4632      	movcs	r2, r6
 8115ad6:	f7fc fd9c 	bl	8112612 <memcpy>
 8115ada:	4621      	mov	r1, r4
 8115adc:	4640      	mov	r0, r8
 8115ade:	f7fd fc17 	bl	8113310 <_free_r>
 8115ae2:	463c      	mov	r4, r7
 8115ae4:	e7e0      	b.n	8115aa8 <_realloc_r+0x1e>

08115ae6 <__ascii_wctomb>:
 8115ae6:	4603      	mov	r3, r0
 8115ae8:	4608      	mov	r0, r1
 8115aea:	b141      	cbz	r1, 8115afe <__ascii_wctomb+0x18>
 8115aec:	2aff      	cmp	r2, #255	@ 0xff
 8115aee:	d904      	bls.n	8115afa <__ascii_wctomb+0x14>
 8115af0:	228a      	movs	r2, #138	@ 0x8a
 8115af2:	601a      	str	r2, [r3, #0]
 8115af4:	f04f 30ff 	mov.w	r0, #4294967295
 8115af8:	4770      	bx	lr
 8115afa:	700a      	strb	r2, [r1, #0]
 8115afc:	2001      	movs	r0, #1
 8115afe:	4770      	bx	lr

08115b00 <_raise_r>:
 8115b00:	291f      	cmp	r1, #31
 8115b02:	b538      	push	{r3, r4, r5, lr}
 8115b04:	4605      	mov	r5, r0
 8115b06:	460c      	mov	r4, r1
 8115b08:	d904      	bls.n	8115b14 <_raise_r+0x14>
 8115b0a:	2316      	movs	r3, #22
 8115b0c:	6003      	str	r3, [r0, #0]
 8115b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8115b12:	bd38      	pop	{r3, r4, r5, pc}
 8115b14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8115b16:	b112      	cbz	r2, 8115b1e <_raise_r+0x1e>
 8115b18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8115b1c:	b94b      	cbnz	r3, 8115b32 <_raise_r+0x32>
 8115b1e:	4628      	mov	r0, r5
 8115b20:	f000 f830 	bl	8115b84 <_getpid_r>
 8115b24:	4622      	mov	r2, r4
 8115b26:	4601      	mov	r1, r0
 8115b28:	4628      	mov	r0, r5
 8115b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8115b2e:	f000 b817 	b.w	8115b60 <_kill_r>
 8115b32:	2b01      	cmp	r3, #1
 8115b34:	d00a      	beq.n	8115b4c <_raise_r+0x4c>
 8115b36:	1c59      	adds	r1, r3, #1
 8115b38:	d103      	bne.n	8115b42 <_raise_r+0x42>
 8115b3a:	2316      	movs	r3, #22
 8115b3c:	6003      	str	r3, [r0, #0]
 8115b3e:	2001      	movs	r0, #1
 8115b40:	e7e7      	b.n	8115b12 <_raise_r+0x12>
 8115b42:	2100      	movs	r1, #0
 8115b44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8115b48:	4620      	mov	r0, r4
 8115b4a:	4798      	blx	r3
 8115b4c:	2000      	movs	r0, #0
 8115b4e:	e7e0      	b.n	8115b12 <_raise_r+0x12>

08115b50 <raise>:
 8115b50:	4b02      	ldr	r3, [pc, #8]	@ (8115b5c <raise+0xc>)
 8115b52:	4601      	mov	r1, r0
 8115b54:	6818      	ldr	r0, [r3, #0]
 8115b56:	f7ff bfd3 	b.w	8115b00 <_raise_r>
 8115b5a:	bf00      	nop
 8115b5c:	100000b0 	.word	0x100000b0

08115b60 <_kill_r>:
 8115b60:	b538      	push	{r3, r4, r5, lr}
 8115b62:	4d07      	ldr	r5, [pc, #28]	@ (8115b80 <_kill_r+0x20>)
 8115b64:	2300      	movs	r3, #0
 8115b66:	4604      	mov	r4, r0
 8115b68:	4608      	mov	r0, r1
 8115b6a:	4611      	mov	r1, r2
 8115b6c:	602b      	str	r3, [r5, #0]
 8115b6e:	f7ee ff59 	bl	8104a24 <_kill>
 8115b72:	1c43      	adds	r3, r0, #1
 8115b74:	d102      	bne.n	8115b7c <_kill_r+0x1c>
 8115b76:	682b      	ldr	r3, [r5, #0]
 8115b78:	b103      	cbz	r3, 8115b7c <_kill_r+0x1c>
 8115b7a:	6023      	str	r3, [r4, #0]
 8115b7c:	bd38      	pop	{r3, r4, r5, pc}
 8115b7e:	bf00      	nop
 8115b80:	1000d4c0 	.word	0x1000d4c0

08115b84 <_getpid_r>:
 8115b84:	f7ee bf46 	b.w	8104a14 <_getpid>

08115b88 <_malloc_usable_size_r>:
 8115b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8115b8c:	1f18      	subs	r0, r3, #4
 8115b8e:	2b00      	cmp	r3, #0
 8115b90:	bfbc      	itt	lt
 8115b92:	580b      	ldrlt	r3, [r1, r0]
 8115b94:	18c0      	addlt	r0, r0, r3
 8115b96:	4770      	bx	lr

08115b98 <_init>:
 8115b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8115b9a:	bf00      	nop
 8115b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8115b9e:	bc08      	pop	{r3}
 8115ba0:	469e      	mov	lr, r3
 8115ba2:	4770      	bx	lr

08115ba4 <_fini>:
 8115ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8115ba6:	bf00      	nop
 8115ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8115baa:	bc08      	pop	{r3}
 8115bac:	469e      	mov	lr, r3
 8115bae:	4770      	bx	lr
