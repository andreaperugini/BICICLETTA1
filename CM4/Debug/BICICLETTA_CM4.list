
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011760  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c20  08111a00  08111a00  00012a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08112620  08112620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08112628  08112628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0811262c  0811262c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000250  10000000  08112630  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000548  10000250  08112880  00014250  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000798  08112880  00014798  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00014250  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026cf2  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046c0  00000000  00000000  0003af72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c40  00000000  00000000  0003f638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000157f  00000000  00000000  00041278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f55c  00000000  00000000  000427f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024424  00000000  00000000  00081d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a2a4b  00000000  00000000  000a6177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  00248bc2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008fb4  00000000  00000000  00248c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00251c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000016fd  00000000  00000000  00251c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000060  00000000  00000000  00253397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000250 	.word	0x10000250
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081119e8 	.word	0x081119e8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000254 	.word	0x10000254
 81002dc:	081119e8 	.word	0x081119e8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <DegreeSec2RPM>:
 */
#include "DC_motor.h"
#include "main.h"
#include "stdint.h"

float DegreeSec2RPM(float speed_degsec){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = (speed_degsec * 60)/360;
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 810115c <DegreeSec2RPM+0x38>
 8101136:	ee27 7a87 	vmul.f32	s14, s15, s14
 810113a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8101160 <DegreeSec2RPM+0x3c>
 810113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101142:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	ee07 3a90 	vmov	s15, r3
}
 810114c:	eeb0 0a67 	vmov.f32	s0, s15
 8101150:	3714      	adds	r7, #20
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	42700000 	.word	0x42700000
 8101160:	43b40000 	.word	0x43b40000

08101164 <Voltage2Duty>:

float Voltage2Duty(float u){
 8101164:	b480      	push	{r7}
 8101166:	b085      	sub	sp, #20
 8101168:	af00      	add	r7, sp, #0
 810116a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810116e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810117a:	d805      	bhi.n	8101188 <Voltage2Duty+0x24>
		u = -u;
 810117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101180:	eef1 7a67 	vneg.f32	s15, s15
 8101184:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101188:	edd7 7a01 	vldr	s15, [r7, #4]
 810118c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011e0 <Voltage2Duty+0x7c>
 8101190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101194:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8101198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810119c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 81011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 81011a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011e0 <Voltage2Duty+0x7c>
 81011a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 81011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011b0:	dd02      	ble.n	81011b8 <Voltage2Duty+0x54>
		duty = 100;
 81011b2:	4b0c      	ldr	r3, [pc, #48]	@ (81011e4 <Voltage2Duty+0x80>)
 81011b4:	60fb      	str	r3, [r7, #12]
 81011b6:	e009      	b.n	81011cc <Voltage2Duty+0x68>
	}else if(duty < 0){
 81011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 81011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011c4:	d502      	bpl.n	81011cc <Voltage2Duty+0x68>
		duty = 0;
 81011c6:	f04f 0300 	mov.w	r3, #0
 81011ca:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	ee07 3a90 	vmov	s15, r3
}
 81011d2:	eeb0 0a67 	vmov.f32	s0, s15
 81011d6:	3714      	adds	r7, #20
 81011d8:	46bd      	mov	sp, r7
 81011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011de:	4770      	bx	lr
 81011e0:	42c80000 	.word	0x42c80000
 81011e4:	42c80000 	.word	0x42c80000

081011e8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011e8:	b480      	push	{r7}
 81011ea:	b085      	sub	sp, #20
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011f2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011fe:	db02      	blt.n	8101206 <Ref2Direction+0x1e>
		direction = 0;
 8101200:	2300      	movs	r3, #0
 8101202:	73fb      	strb	r3, [r7, #15]
 8101204:	e001      	b.n	810120a <Ref2Direction+0x22>
	} else {
		direction = 1;
 8101206:	2301      	movs	r3, #1
 8101208:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 810120a:	7bfb      	ldrb	r3, [r7, #15]
}
 810120c:	4618      	mov	r0, r3
 810120e:	3714      	adds	r7, #20
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr

08101218 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 8101218:	b5b0      	push	{r4, r5, r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	ed87 0a01 	vstr	s0, [r7, #4]
 8101222:	4603      	mov	r3, r0
 8101224:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 8101226:	6878      	ldr	r0, [r7, #4]
 8101228:	f7ff fa16 	bl	8100658 <__aeabi_f2d>
 810122c:	f04f 0200 	mov.w	r2, #0
 8101230:	4b17      	ldr	r3, [pc, #92]	@ (8101290 <set_PWM_and_dir_back_wheel+0x78>)
 8101232:	f7ff fb93 	bl	810095c <__aeabi_ddiv>
 8101236:	4602      	mov	r2, r0
 8101238:	460b      	mov	r3, r1
 810123a:	4614      	mov	r4, r2
 810123c:	461d      	mov	r5, r3
 810123e:	4b15      	ldr	r3, [pc, #84]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 8101240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101242:	4618      	mov	r0, r3
 8101244:	f7ff f9e6 	bl	8100614 <__aeabi_ui2d>
 8101248:	4602      	mov	r2, r0
 810124a:	460b      	mov	r3, r1
 810124c:	4620      	mov	r0, r4
 810124e:	4629      	mov	r1, r5
 8101250:	f7ff fa5a 	bl	8100708 <__aeabi_dmul>
 8101254:	4602      	mov	r2, r0
 8101256:	460b      	mov	r3, r1
 8101258:	4c0e      	ldr	r4, [pc, #56]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 810125a:	4610      	mov	r0, r2
 810125c:	4619      	mov	r1, r3
 810125e:	f7ff fd2b 	bl	8100cb8 <__aeabi_d2uiz>
 8101262:	4603      	mov	r3, r0
 8101264:	6363      	str	r3, [r4, #52]	@ 0x34

	//ARR:valore massimo che il contatore può raggiungere


	//Qui non ho capito a che serve
	if(direction == 0){
 8101266:	78fb      	ldrb	r3, [r7, #3]
 8101268:	2b00      	cmp	r3, #0
 810126a:	d105      	bne.n	8101278 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810126c:	2200      	movs	r2, #0
 810126e:	2110      	movs	r1, #16
 8101270:	4809      	ldr	r0, [pc, #36]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101272:	f004 f975 	bl	8105560 <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101276:	e007      	b.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101278:	78fb      	ldrb	r3, [r7, #3]
 810127a:	2b01      	cmp	r3, #1
 810127c:	d104      	bne.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810127e:	2201      	movs	r2, #1
 8101280:	2110      	movs	r1, #16
 8101282:	4805      	ldr	r0, [pc, #20]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101284:	f004 f96c 	bl	8105560 <HAL_GPIO_WritePin>
}
 8101288:	bf00      	nop
 810128a:	3708      	adds	r7, #8
 810128c:	46bd      	mov	sp, r7
 810128e:	bdb0      	pop	{r4, r5, r7, pc}
 8101290:	40590000 	.word	0x40590000
 8101294:	40010000 	.word	0x40010000
 8101298:	58020000 	.word	0x58020000

0810129c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 81012a6:	4603      	mov	r3, r0
 81012a8:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 81012aa:	edd7 7a01 	vldr	s15, [r7, #4]
 81012ae:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012fc <set_PWM_and_dir_front_wheel+0x60>
 81012b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81012b6:	4b12      	ldr	r3, [pc, #72]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ba:	ee07 3a90 	vmov	s15, r3
 81012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012cc:	ee17 2a90 	vmov	r2, s15
 81012d0:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 81012d2:	78fb      	ldrb	r3, [r7, #3]
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d105      	bne.n	81012e4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 81012d8:	2200      	movs	r2, #0
 81012da:	2120      	movs	r1, #32
 81012dc:	4809      	ldr	r0, [pc, #36]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012de:	f004 f93f 	bl	8105560 <HAL_GPIO_WritePin>
	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 81012e2:	e007      	b.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012e4:	78fb      	ldrb	r3, [r7, #3]
 81012e6:	2b01      	cmp	r3, #1
 81012e8:	d104      	bne.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 81012ea:	2201      	movs	r2, #1
 81012ec:	2120      	movs	r1, #32
 81012ee:	4805      	ldr	r0, [pc, #20]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012f0:	f004 f936 	bl	8105560 <HAL_GPIO_WritePin>
}
 81012f4:	bf00      	nop
 81012f6:	3708      	adds	r7, #8
 81012f8:	46bd      	mov	sp, r7
 81012fa:	bd80      	pop	{r7, pc}
 81012fc:	42c80000 	.word	0x42c80000
 8101300:	40000400 	.word	0x40000400
 8101304:	58020000 	.word	0x58020000

08101308 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 8101308:	b480      	push	{r7}
 810130a:	b085      	sub	sp, #20
 810130c:	af00      	add	r7, sp, #0
 810130e:	60f8      	str	r0, [r7, #12]
 8101310:	ed87 0a02 	vstr	s0, [r7, #8]
 8101314:	edc7 0a01 	vstr	s1, [r7, #4]
 8101318:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 810131c:	68fb      	ldr	r3, [r7, #12]
 810131e:	68ba      	ldr	r2, [r7, #8]
 8101320:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8101322:	68fb      	ldr	r3, [r7, #12]
 8101324:	687a      	ldr	r2, [r7, #4]
 8101326:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	683a      	ldr	r2, [r7, #0]
 810132c:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	f04f 0200 	mov.w	r2, #0
 8101334:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 8101336:	68fb      	ldr	r3, [r7, #12]
 8101338:	f04f 0200 	mov.w	r2, #0
 810133c:	61da      	str	r2, [r3, #28]

}
 810133e:	bf00      	nop
 8101340:	3714      	adds	r7, #20
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr

0810134a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810134a:	b480      	push	{r7}
 810134c:	b085      	sub	sp, #20
 810134e:	af00      	add	r7, sp, #0
 8101350:	60f8      	str	r0, [r7, #12]
 8101352:	ed87 0a02 	vstr	s0, [r7, #8]
 8101356:	edc7 0a01 	vstr	s1, [r7, #4]
 810135a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	68ba      	ldr	r2, [r7, #8]
 8101362:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	683a      	ldr	r2, [r7, #0]
 8101368:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810136a:	68fb      	ldr	r3, [r7, #12]
 810136c:	687a      	ldr	r2, [r7, #4]
 810136e:	605a      	str	r2, [r3, #4]
}
 8101370:	bf00      	nop
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr

0810137c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810137c:	b480      	push	{r7}
 810137e:	b089      	sub	sp, #36	@ 0x24
 8101380:	af00      	add	r7, sp, #0
 8101382:	60f8      	str	r0, [r7, #12]
 8101384:	ed87 0a02 	vstr	s0, [r7, #8]
 8101388:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810138c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101390:	edd7 7a02 	vldr	s15, [r7, #8]
 8101394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101398:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	edd3 7a00 	vldr	s15, [r3]
 81013a2:	ed97 7a06 	vldr	s14, [r7, #24]
 81013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013aa:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	ed93 7a07 	vldr	s14, [r3, #28]
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	edd3 6a01 	vldr	s13, [r3, #4]
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	edd3 7a03 	vldr	s15, [r3, #12]
 81013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	edd3 7a06 	vldr	s15, [r3, #24]
 81013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	69ba      	ldr	r2, [r7, #24]
 81013da:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 81013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 81013e0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013e8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ec:	68fb      	ldr	r3, [r7, #12]
 81013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 81013f2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013fe:	dd03      	ble.n	8101408 <PID_controller+0x8c>
		u = p->u_max;
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	691b      	ldr	r3, [r3, #16]
 8101404:	61fb      	str	r3, [r7, #28]
 8101406:	e010      	b.n	810142a <PID_controller+0xae>
	}else if(u<p->u_min){
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	edd3 7a05 	vldr	s15, [r3, #20]
 810140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810141a:	d503      	bpl.n	8101424 <PID_controller+0xa8>
		u = p->u_min;
 810141c:	68fb      	ldr	r3, [r7, #12]
 810141e:	695b      	ldr	r3, [r3, #20]
 8101420:	61fb      	str	r3, [r7, #28]
 8101422:	e002      	b.n	810142a <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	693a      	ldr	r2, [r7, #16]
 8101428:	61da      	str	r2, [r3, #28]
	}

	return u;
 810142a:	69fb      	ldr	r3, [r7, #28]
 810142c:	ee07 3a90 	vmov	s15, r3

}
 8101430:	eeb0 0a67 	vmov.f32	s0, s15
 8101434:	3724      	adds	r7, #36	@ 0x24
 8101436:	46bd      	mov	sp, r7
 8101438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143c:	4770      	bx	lr

0810143e <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810143e:	b580      	push	{r7, lr}
 8101440:	b082      	sub	sp, #8
 8101442:	af00      	add	r7, sp, #0
 8101444:	4603      	mov	r3, r0
 8101446:	71fb      	strb	r3, [r7, #7]
 8101448:	79fb      	ldrb	r3, [r7, #7]
 810144a:	4619      	mov	r1, r3
 810144c:	2007      	movs	r0, #7
 810144e:	f000 f8b5 	bl	81015bc <bno055_writeData>
 8101452:	bf00      	nop
 8101454:	3708      	adds	r7, #8
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}

0810145a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810145a:	b580      	push	{r7, lr}
 810145c:	b082      	sub	sp, #8
 810145e:	af00      	add	r7, sp, #0
 8101460:	4603      	mov	r3, r0
 8101462:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101464:	79fb      	ldrb	r3, [r7, #7]
 8101466:	4619      	mov	r1, r3
 8101468:	203d      	movs	r0, #61	@ 0x3d
 810146a:	f000 f8a7 	bl	81015bc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810146e:	79fb      	ldrb	r3, [r7, #7]
 8101470:	2b00      	cmp	r3, #0
 8101472:	d103      	bne.n	810147c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101474:	2064      	movs	r0, #100	@ 0x64
 8101476:	f000 f895 	bl	81015a4 <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810147a:	e002      	b.n	8101482 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810147c:	2050      	movs	r0, #80	@ 0x50
 810147e:	f000 f891 	bl	81015a4 <bno055_delay>
}
 8101482:	bf00      	nop
 8101484:	3708      	adds	r7, #8
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}

0810148a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810148a:	b580      	push	{r7, lr}
 810148c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810148e:	2000      	movs	r0, #0
 8101490:	f7ff ffe3 	bl	810145a <bno055_setOperationMode>
}
 8101494:	bf00      	nop
 8101496:	bd80      	pop	{r7, pc}

08101498 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101498:	b580      	push	{r7, lr}
 810149a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810149c:	200c      	movs	r0, #12
 810149e:	f7ff ffdc 	bl	810145a <bno055_setOperationMode>
}
 81014a2:	bf00      	nop
 81014a4:	bd80      	pop	{r7, pc}

081014a6 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81014a6:	b580      	push	{r7, lr}
 81014a8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81014aa:	2120      	movs	r1, #32
 81014ac:	203f      	movs	r0, #63	@ 0x3f
 81014ae:	f000 f885 	bl	81015bc <bno055_writeData>
  bno055_delay(700);
 81014b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 81014b6:	f000 f875 	bl	81015a4 <bno055_delay>
}
 81014ba:	bf00      	nop
 81014bc:	bd80      	pop	{r7, pc}
	...

081014c0 <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81014c0:	b580      	push	{r7, lr}
 81014c2:	b082      	sub	sp, #8
 81014c4:	af00      	add	r7, sp, #0
  bno055_reset();
 81014c6:	f7ff ffee 	bl	81014a6 <bno055_reset>

  uint8_t id = 0;
 81014ca:	2300      	movs	r3, #0
 81014cc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81014ce:	1dfb      	adds	r3, r7, #7
 81014d0:	2201      	movs	r2, #1
 81014d2:	4619      	mov	r1, r3
 81014d4:	2000      	movs	r0, #0
 81014d6:	f000 f94b 	bl	8101770 <bno055_readData>
  if (id != BNO055_ID) {
 81014da:	79fb      	ldrb	r3, [r7, #7]
 81014dc:	2ba0      	cmp	r3, #160	@ 0xa0
 81014de:	d004      	beq.n	81014ea <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81014e0:	79fb      	ldrb	r3, [r7, #7]
 81014e2:	4619      	mov	r1, r3
 81014e4:	4809      	ldr	r0, [pc, #36]	@ (810150c <bno055_setup+0x4c>)
 81014e6:	f00b fda3 	bl	810d030 <iprintf>
  }
  bno055_setPage(0);
 81014ea:	2000      	movs	r0, #0
 81014ec:	f7ff ffa7 	bl	810143e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81014f0:	2100      	movs	r1, #0
 81014f2:	203f      	movs	r0, #63	@ 0x3f
 81014f4:	f000 f862 	bl	81015bc <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014f8:	f7ff ffc7 	bl	810148a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014fc:	200a      	movs	r0, #10
 81014fe:	f000 f851 	bl	81015a4 <bno055_delay>
}
 8101502:	bf00      	nop
 8101504:	3708      	adds	r7, #8
 8101506:	46bd      	mov	sp, r7
 8101508:	bd80      	pop	{r7, pc}
 810150a:	bf00      	nop
 810150c:	08111a00 	.word	0x08111a00

08101510 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 8101510:	b580      	push	{r7, lr}
 8101512:	b084      	sub	sp, #16
 8101514:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 8101516:	2000      	movs	r0, #0
 8101518:	f7ff ff91 	bl	810143e <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 810151c:	2300      	movs	r3, #0
 810151e:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8101520:	2300      	movs	r3, #0
 8101522:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 8101524:	1dfb      	adds	r3, r7, #7
 8101526:	2201      	movs	r2, #1
 8101528:	4619      	mov	r1, r3
 810152a:	2035      	movs	r0, #53	@ 0x35
 810152c:	f000 f920 	bl	8101770 <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8101530:	79fb      	ldrb	r3, [r7, #7]
 8101532:	099b      	lsrs	r3, r3, #6
 8101534:	b2db      	uxtb	r3, r3
 8101536:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8101538:	79fb      	ldrb	r3, [r7, #7]
 810153a:	091b      	lsrs	r3, r3, #4
 810153c:	b2db      	uxtb	r3, r3
 810153e:	f003 0303 	and.w	r3, r3, #3
 8101542:	b2db      	uxtb	r3, r3
 8101544:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 8101546:	79fb      	ldrb	r3, [r7, #7]
 8101548:	089b      	lsrs	r3, r3, #2
 810154a:	b2db      	uxtb	r3, r3
 810154c:	f003 0303 	and.w	r3, r3, #3
 8101550:	b2db      	uxtb	r3, r3
 8101552:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 8101554:	79fb      	ldrb	r3, [r7, #7]
 8101556:	f003 0303 	and.w	r3, r3, #3
 810155a:	b2db      	uxtb	r3, r3
 810155c:	72bb      	strb	r3, [r7, #10]
  return cal;
 810155e:	68bb      	ldr	r3, [r7, #8]
 8101560:	60fb      	str	r3, [r7, #12]
 8101562:	2300      	movs	r3, #0
 8101564:	7b3a      	ldrb	r2, [r7, #12]
 8101566:	f362 0307 	bfi	r3, r2, #0, #8
 810156a:	7b7a      	ldrb	r2, [r7, #13]
 810156c:	f362 230f 	bfi	r3, r2, #8, #8
 8101570:	7bba      	ldrb	r2, [r7, #14]
 8101572:	f362 4317 	bfi	r3, r2, #16, #8
 8101576:	7bfa      	ldrb	r2, [r7, #15]
 8101578:	f362 631f 	bfi	r3, r2, #24, #8
}
 810157c:	4618      	mov	r0, r3
 810157e:	3710      	adds	r7, #16
 8101580:	46bd      	mov	sp, r7
 8101582:	bd80      	pop	{r7, pc}

08101584 <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101584:	b480      	push	{r7}
 8101586:	b083      	sub	sp, #12
 8101588:	af00      	add	r7, sp, #0
 810158a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810158c:	4a04      	ldr	r2, [pc, #16]	@ (81015a0 <bno055_assignI2C+0x1c>)
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	6013      	str	r3, [r2, #0]
}
 8101592:	bf00      	nop
 8101594:	370c      	adds	r7, #12
 8101596:	46bd      	mov	sp, r7
 8101598:	f85d 7b04 	ldr.w	r7, [sp], #4
 810159c:	4770      	bx	lr
 810159e:	bf00      	nop
 81015a0:	1000026c 	.word	0x1000026c

081015a4 <bno055_delay>:

void bno055_delay(int time) {
 81015a4:	b580      	push	{r7, lr}
 81015a6:	b082      	sub	sp, #8
 81015a8:	af00      	add	r7, sp, #0
 81015aa:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	4618      	mov	r0, r3
 81015b0:	f001 ffea 	bl	8103588 <HAL_Delay>
#endif
}
 81015b4:	bf00      	nop
 81015b6:	3708      	adds	r7, #8
 81015b8:	46bd      	mov	sp, r7
 81015ba:	bd80      	pop	{r7, pc}

081015bc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81015bc:	b580      	push	{r7, lr}
 81015be:	b088      	sub	sp, #32
 81015c0:	af02      	add	r7, sp, #8
 81015c2:	4603      	mov	r3, r0
 81015c4:	460a      	mov	r2, r1
 81015c6:	71fb      	strb	r3, [r7, #7]
 81015c8:	4613      	mov	r3, r2
 81015ca:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81015cc:	79fb      	ldrb	r3, [r7, #7]
 81015ce:	733b      	strb	r3, [r7, #12]
 81015d0:	79bb      	ldrb	r3, [r7, #6]
 81015d2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81015d4:	4b53      	ldr	r3, [pc, #332]	@ (8101724 <bno055_writeData+0x168>)
 81015d6:	6818      	ldr	r0, [r3, #0]
 81015d8:	f107 020c 	add.w	r2, r7, #12
 81015dc:	230a      	movs	r3, #10
 81015de:	9300      	str	r3, [sp, #0]
 81015e0:	2302      	movs	r3, #2
 81015e2:	2150      	movs	r1, #80	@ 0x50
 81015e4:	f004 f89e 	bl	8105724 <HAL_I2C_Master_Transmit>
 81015e8:	4603      	mov	r3, r0
 81015ea:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81015ec:	7dfb      	ldrb	r3, [r7, #23]
 81015ee:	2b00      	cmp	r3, #0
 81015f0:	f000 8092 	beq.w	8101718 <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 81015f4:	7dfb      	ldrb	r3, [r7, #23]
 81015f6:	2b01      	cmp	r3, #1
 81015f8:	d103      	bne.n	8101602 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81015fa:	484b      	ldr	r0, [pc, #300]	@ (8101728 <bno055_writeData+0x16c>)
 81015fc:	f00b fd80 	bl	810d100 <puts>
 8101600:	e012      	b.n	8101628 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101602:	7dfb      	ldrb	r3, [r7, #23]
 8101604:	2b03      	cmp	r3, #3
 8101606:	d103      	bne.n	8101610 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101608:	4848      	ldr	r0, [pc, #288]	@ (810172c <bno055_writeData+0x170>)
 810160a:	f00b fd79 	bl	810d100 <puts>
 810160e:	e00b      	b.n	8101628 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101610:	7dfb      	ldrb	r3, [r7, #23]
 8101612:	2b02      	cmp	r3, #2
 8101614:	d103      	bne.n	810161e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101616:	4846      	ldr	r0, [pc, #280]	@ (8101730 <bno055_writeData+0x174>)
 8101618:	f00b fd72 	bl	810d100 <puts>
 810161c:	e004      	b.n	8101628 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810161e:	7dfb      	ldrb	r3, [r7, #23]
 8101620:	4619      	mov	r1, r3
 8101622:	4844      	ldr	r0, [pc, #272]	@ (8101734 <bno055_writeData+0x178>)
 8101624:	f00b fd04 	bl	810d030 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101628:	4b3e      	ldr	r3, [pc, #248]	@ (8101724 <bno055_writeData+0x168>)
 810162a:	681b      	ldr	r3, [r3, #0]
 810162c:	4618      	mov	r0, r3
 810162e:	f004 fa95 	bl	8105b5c <HAL_I2C_GetError>
 8101632:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101634:	693b      	ldr	r3, [r7, #16]
 8101636:	2b00      	cmp	r3, #0
 8101638:	d070      	beq.n	810171c <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810163a:	693b      	ldr	r3, [r7, #16]
 810163c:	2b01      	cmp	r3, #1
 810163e:	d103      	bne.n	8101648 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101640:	483d      	ldr	r0, [pc, #244]	@ (8101738 <bno055_writeData+0x17c>)
 8101642:	f00b fd5d 	bl	810d100 <puts>
 8101646:	e021      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101648:	693b      	ldr	r3, [r7, #16]
 810164a:	2b02      	cmp	r3, #2
 810164c:	d103      	bne.n	8101656 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810164e:	483b      	ldr	r0, [pc, #236]	@ (810173c <bno055_writeData+0x180>)
 8101650:	f00b fd56 	bl	810d100 <puts>
 8101654:	e01a      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101656:	693b      	ldr	r3, [r7, #16]
 8101658:	2b04      	cmp	r3, #4
 810165a:	d103      	bne.n	8101664 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810165c:	4838      	ldr	r0, [pc, #224]	@ (8101740 <bno055_writeData+0x184>)
 810165e:	f00b fd4f 	bl	810d100 <puts>
 8101662:	e013      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101664:	693b      	ldr	r3, [r7, #16]
 8101666:	2b08      	cmp	r3, #8
 8101668:	d103      	bne.n	8101672 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810166a:	4836      	ldr	r0, [pc, #216]	@ (8101744 <bno055_writeData+0x188>)
 810166c:	f00b fd48 	bl	810d100 <puts>
 8101670:	e00c      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101672:	693b      	ldr	r3, [r7, #16]
 8101674:	2b10      	cmp	r3, #16
 8101676:	d103      	bne.n	8101680 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101678:	4833      	ldr	r0, [pc, #204]	@ (8101748 <bno055_writeData+0x18c>)
 810167a:	f00b fd41 	bl	810d100 <puts>
 810167e:	e005      	b.n	810168c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101680:	693b      	ldr	r3, [r7, #16]
 8101682:	2b20      	cmp	r3, #32
 8101684:	d102      	bne.n	810168c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101686:	4831      	ldr	r0, [pc, #196]	@ (810174c <bno055_writeData+0x190>)
 8101688:	f00b fd3a 	bl	810d100 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810168c:	4b25      	ldr	r3, [pc, #148]	@ (8101724 <bno055_writeData+0x168>)
 810168e:	681b      	ldr	r3, [r3, #0]
 8101690:	4618      	mov	r0, r3
 8101692:	f004 fa55 	bl	8105b40 <HAL_I2C_GetState>
 8101696:	4603      	mov	r3, r0
 8101698:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810169a:	7bfb      	ldrb	r3, [r7, #15]
 810169c:	2b00      	cmp	r3, #0
 810169e:	d103      	bne.n	81016a8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 81016a0:	482b      	ldr	r0, [pc, #172]	@ (8101750 <bno055_writeData+0x194>)
 81016a2:	f00b fd2d 	bl	810d100 <puts>
 81016a6:	e03a      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 81016a8:	7bfb      	ldrb	r3, [r7, #15]
 81016aa:	2b20      	cmp	r3, #32
 81016ac:	d103      	bne.n	81016b6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 81016ae:	4828      	ldr	r0, [pc, #160]	@ (8101750 <bno055_writeData+0x194>)
 81016b0:	f00b fd26 	bl	810d100 <puts>
 81016b4:	e033      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 81016b6:	7bfb      	ldrb	r3, [r7, #15]
 81016b8:	2b24      	cmp	r3, #36	@ 0x24
 81016ba:	d103      	bne.n	81016c4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 81016bc:	4825      	ldr	r0, [pc, #148]	@ (8101754 <bno055_writeData+0x198>)
 81016be:	f00b fd1f 	bl	810d100 <puts>
 81016c2:	e02c      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 81016c4:	7bfb      	ldrb	r3, [r7, #15]
 81016c6:	2b21      	cmp	r3, #33	@ 0x21
 81016c8:	d103      	bne.n	81016d2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 81016ca:	4823      	ldr	r0, [pc, #140]	@ (8101758 <bno055_writeData+0x19c>)
 81016cc:	f00b fd18 	bl	810d100 <puts>
 81016d0:	e025      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 81016d2:	7bfb      	ldrb	r3, [r7, #15]
 81016d4:	2b22      	cmp	r3, #34	@ 0x22
 81016d6:	d103      	bne.n	81016e0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 81016d8:	4820      	ldr	r0, [pc, #128]	@ (810175c <bno055_writeData+0x1a0>)
 81016da:	f00b fd11 	bl	810d100 <puts>
 81016de:	e01e      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 81016e0:	7bfb      	ldrb	r3, [r7, #15]
 81016e2:	2b28      	cmp	r3, #40	@ 0x28
 81016e4:	d103      	bne.n	81016ee <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 81016e6:	481e      	ldr	r0, [pc, #120]	@ (8101760 <bno055_writeData+0x1a4>)
 81016e8:	f00b fd0a 	bl	810d100 <puts>
 81016ec:	e017      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 81016ee:	7bfb      	ldrb	r3, [r7, #15]
 81016f0:	2b29      	cmp	r3, #41	@ 0x29
 81016f2:	d103      	bne.n	81016fc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 81016f4:	481b      	ldr	r0, [pc, #108]	@ (8101764 <bno055_writeData+0x1a8>)
 81016f6:	f00b fd03 	bl	810d100 <puts>
 81016fa:	e010      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 81016fc:	7bfb      	ldrb	r3, [r7, #15]
 81016fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8101700:	d103      	bne.n	810170a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101702:	4819      	ldr	r0, [pc, #100]	@ (8101768 <bno055_writeData+0x1ac>)
 8101704:	f00b fcfc 	bl	810d100 <puts>
 8101708:	e009      	b.n	810171e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 810170a:	7bfb      	ldrb	r3, [r7, #15]
 810170c:	2b60      	cmp	r3, #96	@ 0x60
 810170e:	d106      	bne.n	810171e <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101710:	4816      	ldr	r0, [pc, #88]	@ (810176c <bno055_writeData+0x1b0>)
 8101712:	f00b fcf5 	bl	810d100 <puts>
 8101716:	e002      	b.n	810171e <bno055_writeData+0x162>
    return;
 8101718:	bf00      	nop
 810171a:	e000      	b.n	810171e <bno055_writeData+0x162>
    return;
 810171c:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810171e:	3718      	adds	r7, #24
 8101720:	46bd      	mov	sp, r7
 8101722:	bd80      	pop	{r7, pc}
 8101724:	1000026c 	.word	0x1000026c
 8101728:	08111aa0 	.word	0x08111aa0
 810172c:	08111ac4 	.word	0x08111ac4
 8101730:	08111aec 	.word	0x08111aec
 8101734:	08111b10 	.word	0x08111b10
 8101738:	08111b28 	.word	0x08111b28
 810173c:	08111b3c 	.word	0x08111b3c
 8101740:	08111b50 	.word	0x08111b50
 8101744:	08111b64 	.word	0x08111b64
 8101748:	08111b78 	.word	0x08111b78
 810174c:	08111b8c 	.word	0x08111b8c
 8101750:	08111ba4 	.word	0x08111ba4
 8101754:	08111bbc 	.word	0x08111bbc
 8101758:	08111bd0 	.word	0x08111bd0
 810175c:	08111be8 	.word	0x08111be8
 8101760:	08111c00 	.word	0x08111c00
 8101764:	08111c18 	.word	0x08111c18
 8101768:	08111c38 	.word	0x08111c38
 810176c:	08111c58 	.word	0x08111c58

08101770 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101770:	b580      	push	{r7, lr}
 8101772:	b086      	sub	sp, #24
 8101774:	af02      	add	r7, sp, #8
 8101776:	4603      	mov	r3, r0
 8101778:	6039      	str	r1, [r7, #0]
 810177a:	71fb      	strb	r3, [r7, #7]
 810177c:	4613      	mov	r3, r2
 810177e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101780:	4b1c      	ldr	r3, [pc, #112]	@ (81017f4 <bno055_readData+0x84>)
 8101782:	6818      	ldr	r0, [r3, #0]
 8101784:	1dfa      	adds	r2, r7, #7
 8101786:	2364      	movs	r3, #100	@ 0x64
 8101788:	9300      	str	r3, [sp, #0]
 810178a:	2301      	movs	r3, #1
 810178c:	2150      	movs	r1, #80	@ 0x50
 810178e:	f003 ffc9 	bl	8105724 <HAL_I2C_Master_Transmit>
 8101792:	4603      	mov	r3, r0
 8101794:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101796:	4b17      	ldr	r3, [pc, #92]	@ (81017f4 <bno055_readData+0x84>)
 8101798:	6818      	ldr	r0, [r3, #0]
 810179a:	79bb      	ldrb	r3, [r7, #6]
 810179c:	b29b      	uxth	r3, r3
 810179e:	2264      	movs	r2, #100	@ 0x64
 81017a0:	9200      	str	r2, [sp, #0]
 81017a2:	683a      	ldr	r2, [r7, #0]
 81017a4:	2150      	movs	r1, #80	@ 0x50
 81017a6:	f004 f8d5 	bl	8105954 <HAL_I2C_Master_Receive>
 81017aa:	4603      	mov	r3, r0
 81017ac:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 81017ae:	7bfb      	ldrb	r3, [r7, #15]
 81017b0:	2b00      	cmp	r3, #0
 81017b2:	d01a      	beq.n	81017ea <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 81017b4:	7bfb      	ldrb	r3, [r7, #15]
 81017b6:	2b01      	cmp	r3, #1
 81017b8:	d103      	bne.n	81017c2 <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81017ba:	480f      	ldr	r0, [pc, #60]	@ (81017f8 <bno055_readData+0x88>)
 81017bc:	f00b fca0 	bl	810d100 <puts>
 81017c0:	e014      	b.n	81017ec <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 81017c2:	7bfb      	ldrb	r3, [r7, #15]
 81017c4:	2b03      	cmp	r3, #3
 81017c6:	d103      	bne.n	81017d0 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 81017c8:	480c      	ldr	r0, [pc, #48]	@ (81017fc <bno055_readData+0x8c>)
 81017ca:	f00b fc99 	bl	810d100 <puts>
 81017ce:	e00d      	b.n	81017ec <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 81017d0:	7bfb      	ldrb	r3, [r7, #15]
 81017d2:	2b02      	cmp	r3, #2
 81017d4:	d103      	bne.n	81017de <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 81017d6:	480a      	ldr	r0, [pc, #40]	@ (8101800 <bno055_readData+0x90>)
 81017d8:	f00b fc92 	bl	810d100 <puts>
 81017dc:	e006      	b.n	81017ec <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 81017de:	7bfb      	ldrb	r3, [r7, #15]
 81017e0:	4619      	mov	r1, r3
 81017e2:	4808      	ldr	r0, [pc, #32]	@ (8101804 <bno055_readData+0x94>)
 81017e4:	f00b fc24 	bl	810d030 <iprintf>
 81017e8:	e000      	b.n	81017ec <bno055_readData+0x7c>
	    return;
 81017ea:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 81017ec:	3710      	adds	r7, #16
 81017ee:	46bd      	mov	sp, r7
 81017f0:	bd80      	pop	{r7, pc}
 81017f2:	bf00      	nop
 81017f4:	1000026c 	.word	0x1000026c
 81017f8:	08111aa0 	.word	0x08111aa0
 81017fc:	08111ac4 	.word	0x08111ac4
 8101800:	08111aec 	.word	0x08111aec
 8101804:	08111b10 	.word	0x08111b10

08101808 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101808:	b580      	push	{r7, lr}
 810180a:	b084      	sub	sp, #16
 810180c:	af00      	add	r7, sp, #0
 810180e:	4603      	mov	r3, r0
 8101810:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101812:	f107 030f 	add.w	r3, r7, #15
 8101816:	2201      	movs	r2, #1
 8101818:	4619      	mov	r1, r3
 810181a:	203e      	movs	r0, #62	@ 0x3e
 810181c:	f7ff ffa8 	bl	8101770 <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101820:	7bfb      	ldrb	r3, [r7, #15]
 8101822:	f023 0303 	bic.w	r3, r3, #3
 8101826:	b2db      	uxtb	r3, r3
 8101828:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810182a:	7bfa      	ldrb	r2, [r7, #15]
 810182c:	79fb      	ldrb	r3, [r7, #7]
 810182e:	4313      	orrs	r3, r2
 8101830:	b2db      	uxtb	r3, r3
 8101832:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101834:	7bfb      	ldrb	r3, [r7, #15]
 8101836:	4619      	mov	r1, r3
 8101838:	203e      	movs	r0, #62	@ 0x3e
 810183a:	f7ff febf 	bl	81015bc <bno055_writeData>
}
 810183e:	bf00      	nop
 8101840:	3710      	adds	r7, #16
 8101842:	46bd      	mov	sp, r7
 8101844:	bd80      	pop	{r7, pc}

08101846 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 8101846:	b580      	push	{r7, lr}
 8101848:	b082      	sub	sp, #8
 810184a:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 810184c:	1dfb      	adds	r3, r7, #7
 810184e:	2201      	movs	r2, #1
 8101850:	4619      	mov	r1, r3
 8101852:	203e      	movs	r0, #62	@ 0x3e
 8101854:	f7ff ff8c 	bl	8101770 <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 8101858:	79fb      	ldrb	r3, [r7, #7]
 810185a:	f003 0303 	and.w	r3, r3, #3
 810185e:	b2db      	uxtb	r3, r3
 8101860:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 8101862:	79fb      	ldrb	r3, [r7, #7]
}
 8101864:	4618      	mov	r0, r3
 8101866:	3708      	adds	r7, #8
 8101868:	46bd      	mov	sp, r7
 810186a:	bd80      	pop	{r7, pc}

0810186c <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 810186c:	b580      	push	{r7, lr}
 810186e:	b084      	sub	sp, #16
 8101870:	af00      	add	r7, sp, #0
 8101872:	60f8      	str	r0, [r7, #12]
 8101874:	60b9      	str	r1, [r7, #8]
 8101876:	607a      	str	r2, [r7, #4]
 8101878:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 810187a:	68f8      	ldr	r0, [r7, #12]
 810187c:	68bb      	ldr	r3, [r7, #8]
 810187e:	2202      	movs	r2, #2
 8101880:	2102      	movs	r1, #2
 8101882:	f00a fc39 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 8101886:	68fb      	ldr	r3, [r7, #12]
 8101888:	f103 0008 	add.w	r0, r3, #8
 810188c:	687b      	ldr	r3, [r7, #4]
 810188e:	2201      	movs	r2, #1
 8101890:	2102      	movs	r1, #2
 8101892:	f00a fc31 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 8101896:	68fb      	ldr	r3, [r7, #12]
 8101898:	f103 0010 	add.w	r0, r3, #16
 810189c:	683b      	ldr	r3, [r7, #0]
 810189e:	2202      	movs	r2, #2
 81018a0:	2102      	movs	r1, #2
 81018a2:	f00a fc29 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 81018a6:	68fb      	ldr	r3, [r7, #12]
 81018a8:	f103 0018 	add.w	r0, r3, #24
 81018ac:	69bb      	ldr	r3, [r7, #24]
 81018ae:	2202      	movs	r2, #2
 81018b0:	2102      	movs	r1, #2
 81018b2:	f00a fc21 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 81018b6:	68fb      	ldr	r3, [r7, #12]
 81018b8:	f103 0020 	add.w	r0, r3, #32
 81018bc:	69fb      	ldr	r3, [r7, #28]
 81018be:	2202      	movs	r2, #2
 81018c0:	2102      	movs	r1, #2
 81018c2:	f00a fc19 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 81018c6:	68fb      	ldr	r3, [r7, #12]
 81018c8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 81018cc:	6a3b      	ldr	r3, [r7, #32]
 81018ce:	2202      	movs	r2, #2
 81018d0:	2102      	movs	r1, #2
 81018d2:	f00a fc11 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 81018d6:	68fb      	ldr	r3, [r7, #12]
 81018d8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 81018dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81018de:	2201      	movs	r2, #1
 81018e0:	2102      	movs	r1, #2
 81018e2:	f00a fc09 	bl	810c0f8 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 81018e6:	68fb      	ldr	r3, [r7, #12]
 81018e8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 81018ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81018f0:	2202      	movs	r2, #2
 81018f2:	2102      	movs	r1, #2
 81018f4:	f00a fc00 	bl	810c0f8 <arm_mat_init_f32>

}
 81018f8:	bf00      	nop
 81018fa:	3710      	adds	r7, #16
 81018fc:	46bd      	mov	sp, r7
 81018fe:	bd80      	pop	{r7, pc}

08101900 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101900:	b580      	push	{r7, lr}
 8101902:	b09c      	sub	sp, #112	@ 0x70
 8101904:	af00      	add	r7, sp, #0
 8101906:	6078      	str	r0, [r7, #4]
 8101908:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 810190a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810190e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101912:	2201      	movs	r2, #1
 8101914:	2102      	movs	r1, #2
 8101916:	f00a fbef 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 810191a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810191e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101922:	2201      	movs	r2, #1
 8101924:	2102      	movs	r1, #2
 8101926:	f00a fbe7 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 810192a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810192e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101932:	2202      	movs	r2, #2
 8101934:	2102      	movs	r1, #2
 8101936:	f00a fbdf 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 810193a:	f107 0318 	add.w	r3, r7, #24
 810193e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101942:	2202      	movs	r2, #2
 8101944:	2102      	movs	r1, #2
 8101946:	f00a fbd7 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 810194a:	f107 0308 	add.w	r3, r7, #8
 810194e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101952:	2202      	movs	r2, #2
 8101954:	2102      	movs	r1, #2
 8101956:	f00a fbcf 	bl	810c0f8 <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 810195a:	6878      	ldr	r0, [r7, #4]
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	3338      	adds	r3, #56	@ 0x38
 8101960:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101964:	4619      	mov	r1, r3
 8101966:	f00a fa21 	bl	810bdac <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	3308      	adds	r3, #8
 810196e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101972:	6839      	ldr	r1, [r7, #0]
 8101974:	4618      	mov	r0, r3
 8101976:	f00a fa19 	bl	810bdac <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 810197a:	687b      	ldr	r3, [r7, #4]
 810197c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101980:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101984:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101988:	4618      	mov	r0, r3
 810198a:	f00a fbb9 	bl	810c100 <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 810198e:	6878      	ldr	r0, [r7, #4]
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	3328      	adds	r3, #40	@ 0x28
 8101994:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101998:	4619      	mov	r1, r3
 810199a:	f00a fa07 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 81019a4:	4611      	mov	r1, r2
 81019a6:	4618      	mov	r0, r3
 81019a8:	f00a f93a 	bl	810bc20 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 81019ac:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 81019b0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 81019b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 81019b8:	4618      	mov	r0, r3
 81019ba:	f00a f9f7 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 81019be:	687b      	ldr	r3, [r7, #4]
 81019c0:	f103 0118 	add.w	r1, r3, #24
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 81019ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 81019ce:	4618      	mov	r0, r3
 81019d0:	f00a fb96 	bl	810c100 <arm_mat_add_f32>


}
 81019d4:	bf00      	nop
 81019d6:	3770      	adds	r7, #112	@ 0x70
 81019d8:	46bd      	mov	sp, r7
 81019da:	bd80      	pop	{r7, pc}

081019dc <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 81019dc:	b580      	push	{r7, lr}
 81019de:	b0dc      	sub	sp, #368	@ 0x170
 81019e0:	af00      	add	r7, sp, #0
 81019e2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 81019e6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 81019ea:	6018      	str	r0, [r3, #0]
 81019ec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 81019f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81019f4:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 81019f6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 81019fa:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 81019fe:	2202      	movs	r2, #2
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00a fb79 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101a06:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101a0a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101a0e:	2202      	movs	r2, #2
 8101a10:	2102      	movs	r1, #2
 8101a12:	f00a fb71 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101a16:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101a1a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101a1e:	2202      	movs	r2, #2
 8101a20:	2102      	movs	r1, #2
 8101a22:	f00a fb69 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101a26:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101a2a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101a2e:	2202      	movs	r2, #2
 8101a30:	2102      	movs	r1, #2
 8101a32:	f00a fb61 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101a36:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101a3a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101a3e:	2202      	movs	r2, #2
 8101a40:	2102      	movs	r1, #2
 8101a42:	f00a fb59 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101a46:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101a4a:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101a4e:	2202      	movs	r2, #2
 8101a50:	2102      	movs	r1, #2
 8101a52:	f00a fb51 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101a56:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101a5a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101a5e:	2202      	movs	r2, #2
 8101a60:	2102      	movs	r1, #2
 8101a62:	f00a fb49 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101a66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101a6a:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101a6e:	2202      	movs	r2, #2
 8101a70:	2102      	movs	r1, #2
 8101a72:	f00a fb41 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101a76:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101a7a:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101a7e:	2202      	movs	r2, #2
 8101a80:	2102      	movs	r1, #2
 8101a82:	f00a fb39 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101a86:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101a8a:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101a8e:	2202      	movs	r2, #2
 8101a90:	2102      	movs	r1, #2
 8101a92:	f00a fb31 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101a96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a9a:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101a9e:	2202      	movs	r2, #2
 8101aa0:	2102      	movs	r1, #2
 8101aa2:	f00a fb29 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101aa6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101aaa:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101aae:	2202      	movs	r2, #2
 8101ab0:	2102      	movs	r1, #2
 8101ab2:	f00a fb21 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101ab6:	f107 0320 	add.w	r3, r7, #32
 8101aba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101abe:	2202      	movs	r2, #2
 8101ac0:	2102      	movs	r1, #2
 8101ac2:	f00a fb19 	bl	810c0f8 <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101ac6:	f107 0318 	add.w	r3, r7, #24
 8101aca:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101ace:	2201      	movs	r2, #1
 8101ad0:	2102      	movs	r1, #2
 8101ad2:	f00a fb11 	bl	810c0f8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101ad6:	f107 0310 	add.w	r3, r7, #16
 8101ada:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101ade:	2201      	movs	r2, #1
 8101ae0:	2102      	movs	r1, #2
 8101ae2:	f00a fb09 	bl	810c0f8 <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101ae6:	f107 0308 	add.w	r3, r7, #8
 8101aea:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101aee:	2201      	movs	r2, #1
 8101af0:	2102      	movs	r1, #2
 8101af2:	f00a fb01 	bl	810c0f8 <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101af6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101afa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	3310      	adds	r3, #16
 8101b02:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101b06:	4611      	mov	r1, r2
 8101b08:	4618      	mov	r0, r3
 8101b0a:	f00a f889 	bl	810bc20 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101b0e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b12:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b16:	681b      	ldr	r3, [r3, #0]
 8101b18:	3328      	adds	r3, #40	@ 0x28
 8101b1a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101b1e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101b22:	4618      	mov	r0, r3
 8101b24:	f00a f942 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101b28:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b2c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b30:	681b      	ldr	r3, [r3, #0]
 8101b32:	3310      	adds	r3, #16
 8101b34:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101b38:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101b3c:	4618      	mov	r0, r3
 8101b3e:	f00a f935 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101b42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b4a:	681b      	ldr	r3, [r3, #0]
 8101b4c:	f103 0120 	add.w	r1, r3, #32
 8101b50:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101b54:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101b58:	4618      	mov	r0, r3
 8101b5a:	f00a fad1 	bl	810c100 <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101b5e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101b62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101b66:	4611      	mov	r1, r2
 8101b68:	4618      	mov	r0, r3
 8101b6a:	f00a f9bf 	bl	810beec <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101b6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101b7c:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101b80:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101b84:	4618      	mov	r0, r3
 8101b86:	f00a f911 	bl	810bdac <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101b8a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b8e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	f103 0010 	add.w	r0, r3, #16
 8101b98:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b9c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	3338      	adds	r3, #56	@ 0x38
 8101ba4:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101ba8:	4619      	mov	r1, r3
 8101baa:	f00a f8ff 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101bae:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101bb2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101bb6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101bba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101bbe:	6818      	ldr	r0, [r3, #0]
 8101bc0:	f00a f88a 	bl	810bcd8 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101bc4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101bc8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101bcc:	681b      	ldr	r3, [r3, #0]
 8101bce:	3330      	adds	r3, #48	@ 0x30
 8101bd0:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101bd4:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101bd8:	4618      	mov	r0, r3
 8101bda:	f00a f8e7 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101bde:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101be2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101bec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101bf0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101bfa:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101bfe:	4619      	mov	r1, r3
 8101c00:	f00a fa7e 	bl	810c100 <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101c04:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c0c:	681b      	ldr	r3, [r3, #0]
 8101c0e:	3310      	adds	r3, #16
 8101c10:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101c14:	4611      	mov	r1, r2
 8101c16:	4618      	mov	r0, r3
 8101c18:	f00a f802 	bl	810bc20 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101c1c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c24:	681b      	ldr	r3, [r3, #0]
 8101c26:	3328      	adds	r3, #40	@ 0x28
 8101c28:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101c2c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101c30:	4618      	mov	r0, r3
 8101c32:	f00a f8bb 	bl	810bdac <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101c36:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c3a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	3330      	adds	r3, #48	@ 0x30
 8101c42:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101c46:	4611      	mov	r1, r2
 8101c48:	4618      	mov	r0, r3
 8101c4a:	f009 ffe9 	bl	810bc20 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101c4e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101c52:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101c56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101c5a:	4618      	mov	r0, r3
 8101c5c:	f00a f8a6 	bl	810bdac <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101c60:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c64:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c68:	681b      	ldr	r3, [r3, #0]
 8101c6a:	f103 0010 	add.w	r0, r3, #16
 8101c6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	3328      	adds	r3, #40	@ 0x28
 8101c7a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101c7e:	4619      	mov	r1, r3
 8101c80:	f00a f894 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101c84:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c88:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c8c:	681b      	ldr	r3, [r3, #0]
 8101c8e:	3330      	adds	r3, #48	@ 0x30
 8101c90:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101c94:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101c98:	4618      	mov	r0, r3
 8101c9a:	f00a f887 	bl	810bdac <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101c9e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ca2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101ca6:	681b      	ldr	r3, [r3, #0]
 8101ca8:	f103 0010 	add.w	r0, r3, #16
 8101cac:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cb0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cb4:	681b      	ldr	r3, [r3, #0]
 8101cb6:	3328      	adds	r3, #40	@ 0x28
 8101cb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101cbc:	4619      	mov	r1, r3
 8101cbe:	f00a f875 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101cc2:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101cc6:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101cca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101cce:	4618      	mov	r0, r3
 8101cd0:	f00a f86c 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101cd4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cd8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cdc:	681b      	ldr	r3, [r3, #0]
 8101cde:	f103 0120 	add.w	r1, r3, #32
 8101ce2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101ce6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101cea:	4618      	mov	r0, r3
 8101cec:	f00a fa08 	bl	810c100 <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101cf0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cf4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cf8:	681b      	ldr	r3, [r3, #0]
 8101cfa:	3330      	adds	r3, #48	@ 0x30
 8101cfc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101d00:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101d04:	4618      	mov	r0, r3
 8101d06:	f00a f851 	bl	810bdac <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101d0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101d0e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101d16:	4618      	mov	r0, r3
 8101d18:	f00a f848 	bl	810bdac <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101d1c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	3328      	adds	r3, #40	@ 0x28
 8101d28:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101d2c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101d30:	4618      	mov	r0, r3
 8101d32:	f009 ffd1 	bl	810bcd8 <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101d36:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101d3a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101d3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101d42:	4618      	mov	r0, r3
 8101d44:	f009 ffc8 	bl	810bcd8 <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101d48:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d50:	681b      	ldr	r3, [r3, #0]
 8101d52:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101d56:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101d5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101d5e:	4618      	mov	r0, r3
 8101d60:	f00a f9ce 	bl	810c100 <arm_mat_add_f32>


}
 8101d64:	bf00      	nop
 8101d66:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101d6a:	46bd      	mov	sp, r7
 8101d6c:	bd80      	pop	{r7, pc}
	...

08101d70 <getSpeed>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101d70:	b480      	push	{r7}
 8101d72:	b085      	sub	sp, #20
 8101d74:	af00      	add	r7, sp, #0
 8101d76:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 6; //secondi di rampa
 8101d7a:	4b13      	ldr	r3, [pc, #76]	@ (8101dc8 <getSpeed+0x58>)
 8101d7c:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101d7e:	4b13      	ldr	r3, [pc, #76]	@ (8101dcc <getSpeed+0x5c>)
 8101d80:	edd3 7a00 	vldr	s15, [r3]
 8101d84:	ed97 7a01 	vldr	s14, [r7, #4]
 8101d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101d90:	d50f      	bpl.n	8101db2 <getSpeed+0x42>
		return actual_speed + speed * dt / ramp_time;
 8101d92:	4b0e      	ldr	r3, [pc, #56]	@ (8101dcc <getSpeed+0x5c>)
 8101d94:	edd3 7a00 	vldr	s15, [r3]
 8101d98:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8101dd0 <getSpeed+0x60>
 8101d9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8101da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101da8:	edd7 7a01 	vldr	s15, [r7, #4]
 8101dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101db0:	e002      	b.n	8101db8 <getSpeed+0x48>
	} else
		return speed;
 8101db2:	4b06      	ldr	r3, [pc, #24]	@ (8101dcc <getSpeed+0x5c>)
 8101db4:	edd3 7a00 	vldr	s15, [r3]
}
 8101db8:	eeb0 0a67 	vmov.f32	s0, s15
 8101dbc:	3714      	adds	r7, #20
 8101dbe:	46bd      	mov	sp, r7
 8101dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dc4:	4770      	bx	lr
 8101dc6:	bf00      	nop
 8101dc8:	40c00000 	.word	0x40c00000
 8101dcc:	10000008 	.word	0x10000008
 8101dd0:	3c23d70a 	.word	0x3c23d70a
 8101dd4:	00000000 	.word	0x00000000

08101dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101dd8:	b5b0      	push	{r4, r5, r7, lr}
 8101dda:	b094      	sub	sp, #80	@ 0x50
 8101ddc:	af06      	add	r7, sp, #24

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8101dde:	4b14      	ldr	r3, [pc, #80]	@ (8101e30 <main+0x58>)
 8101de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101de4:	4a12      	ldr	r2, [pc, #72]	@ (8101e30 <main+0x58>)
 8101de6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101dee:	4b10      	ldr	r3, [pc, #64]	@ (8101e30 <main+0x58>)
 8101df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101df8:	60bb      	str	r3, [r7, #8]
 8101dfa:	68bb      	ldr	r3, [r7, #8]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101dfc:	2001      	movs	r0, #1
 8101dfe:	f003 fbe3 	bl	81055c8 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8101e02:	f004 fa6f 	bl	81062e4 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8101e06:	2201      	movs	r2, #1
 8101e08:	2102      	movs	r1, #2
 8101e0a:	2000      	movs	r0, #0
 8101e0c:	f004 f9f0 	bl	81061f0 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e10:	4b08      	ldr	r3, [pc, #32]	@ (8101e34 <main+0x5c>)
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	091b      	lsrs	r3, r3, #4
 8101e16:	f003 030f 	and.w	r3, r3, #15
 8101e1a:	2b07      	cmp	r3, #7
 8101e1c:	d10e      	bne.n	8101e3c <main+0x64>
 8101e1e:	4b06      	ldr	r3, [pc, #24]	@ (8101e38 <main+0x60>)
 8101e20:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101e24:	4a04      	ldr	r2, [pc, #16]	@ (8101e38 <main+0x60>)
 8101e26:	f043 0301 	orr.w	r3, r3, #1
 8101e2a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101e2e:	e00d      	b.n	8101e4c <main+0x74>
 8101e30:	58024400 	.word	0x58024400
 8101e34:	e000ed00 	.word	0xe000ed00
 8101e38:	58026400 	.word	0x58026400
 8101e3c:	4bca      	ldr	r3, [pc, #808]	@ (8102168 <main+0x390>)
 8101e3e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101e42:	4ac9      	ldr	r2, [pc, #804]	@ (8102168 <main+0x390>)
 8101e44:	f043 0301 	orr.w	r3, r3, #1
 8101e48:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101e4c:	f001 fae8 	bl	8103420 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_GPIO_Init();
 8101e50:	f000 fe46 	bl	8102ae0 <MX_GPIO_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART3_UART_Init();
 8101e54:	f000 fdf8 	bl	8102a48 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8101e58:	f000 fbee 	bl	8102638 <MX_I2C1_Init>
  MX_TIM1_Init();
 8101e5c:	f000 fc2c 	bl	81026b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8101e60:	f000 fcd6 	bl	8102810 <MX_TIM2_Init>
  MX_TIM4_Init();
 8101e64:	f000 fd9a 	bl	810299c <MX_TIM4_Init>
  MX_ADC1_Init();
 8101e68:	f000 fb6e 	bl	8102548 <MX_ADC1_Init>
  MX_TIM3_Init();
 8101e6c:	f000 fd1e 	bl	81028ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8101e70:	48be      	ldr	r0, [pc, #760]	@ (810216c <main+0x394>)
 8101e72:	f007 f973 	bl	810915c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101e76:	2100      	movs	r1, #0
 8101e78:	48bd      	ldr	r0, [pc, #756]	@ (8102170 <main+0x398>)
 8101e7a:	f007 fa49 	bl	8109310 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8101e7e:	2100      	movs	r1, #0
 8101e80:	48bc      	ldr	r0, [pc, #752]	@ (8102174 <main+0x39c>)
 8101e82:	f007 fa45 	bl	8109310 <HAL_TIM_PWM_Start>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 8101e86:	48bc      	ldr	r0, [pc, #752]	@ (8102178 <main+0x3a0>)
 8101e88:	f7ff fb7c 	bl	8101584 <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 8101e8c:	f7ff fb18 	bl	81014c0 <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 8101e90:	2000      	movs	r0, #0
 8101e92:	f7ff fcb9 	bl	8101808 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 8101e96:	f7ff fcd6 	bl	8101846 <bno055_getPowerMode>
 8101e9a:	4603      	mov	r3, r0
 8101e9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 8101ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8101ea4:	4619      	mov	r1, r3
 8101ea6:	48b5      	ldr	r0, [pc, #724]	@ (810217c <main+0x3a4>)
 8101ea8:	f00b f8c2 	bl	810d030 <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 8101eac:	f7ff faf4 	bl	8101498 <bno055_setOperationModeNDOF>

	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 8101eb0:	f7ff fb2e 	bl	8101510 <bno055_getCalibrationState>
 8101eb4:	4603      	mov	r3, r0
 8101eb6:	60fb      	str	r3, [r7, #12]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
			cal.gyro, cal.accel, cal.mag, cal.sys);
 8101eb8:	7b7b      	ldrb	r3, [r7, #13]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
 8101eba:	4619      	mov	r1, r3
			cal.gyro, cal.accel, cal.mag, cal.sys);
 8101ebc:	7bfb      	ldrb	r3, [r7, #15]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
 8101ebe:	461a      	mov	r2, r3
			cal.gyro, cal.accel, cal.mag, cal.sys);
 8101ec0:	7bbb      	ldrb	r3, [r7, #14]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
 8101ec2:	4618      	mov	r0, r3
			cal.gyro, cal.accel, cal.mag, cal.sys);
 8101ec4:	7b3b      	ldrb	r3, [r7, #12]
	printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n", //questo andrebbe nel while per vedere se ha calibrato
 8101ec6:	9300      	str	r3, [sp, #0]
 8101ec8:	4603      	mov	r3, r0
 8101eca:	48ad      	ldr	r0, [pc, #692]	@ (8102180 <main+0x3a8>)
 8101ecc:	f00b f8b0 	bl	810d030 <iprintf>
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 8101ed0:	eddf 7aac 	vldr	s15, [pc, #688]	@ 8102184 <main+0x3ac>
 8101ed4:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 8101ed8:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8101edc:	eeb0 0a67 	vmov.f32	s0, s15
 8101ee0:	48a9      	ldr	r0, [pc, #676]	@ (8102188 <main+0x3b0>)
 8101ee2:	f7ff fa11 	bl	8101308 <init_PID>
	tune_PID(&pid_speed, 0.001, 0.05, 0);
 8101ee6:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 810218c <main+0x3b4>
 8101eea:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8102190 <main+0x3b8>
 8101eee:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8102194 <main+0x3bc>
 8101ef2:	48a5      	ldr	r0, [pc, #660]	@ (8102188 <main+0x3b0>)
 8101ef4:	f7ff fa29 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//PID angolo roll
	init_PID(&pid_roll, dt, 90, -90);
 8101ef8:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 8102184 <main+0x3ac>
 8101efc:	ed9f 1aa6 	vldr	s2, [pc, #664]	@ 8102198 <main+0x3c0>
 8101f00:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 810219c <main+0x3c4>
 8101f04:	eeb0 0a67 	vmov.f32	s0, s15
 8101f08:	48a5      	ldr	r0, [pc, #660]	@ (81021a0 <main+0x3c8>)
 8101f0a:	f7ff f9fd 	bl	8101308 <init_PID>
	tune_PID(&pid_roll, 18, 6, 0.5);
 8101f0e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8101f12:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8101f16:	eeb3 0a02 	vmov.f32	s0, #50	@ 0x41900000  18.0
 8101f1a:	48a1      	ldr	r0, [pc, #644]	@ (81021a0 <main+0x3c8>)
 8101f1c:	f7ff fa15 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 8101f20:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8102184 <main+0x3ac>
 8101f24:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 8101f28:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8101f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8101f30:	489c      	ldr	r0, [pc, #624]	@ (81021a4 <main+0x3cc>)
 8101f32:	f7ff f9e9 	bl	8101308 <init_PID>
	tune_PID(&pid_steering_torque, 67, 34, 0);
 8101f36:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 810218c <main+0x3b4>
 8101f3a:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 81021a8 <main+0x3d0>
 8101f3e:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 81021ac <main+0x3d4>
 8101f42:	4898      	ldr	r0, [pc, #608]	@ (81021a4 <main+0x3cc>)
 8101f44:	f7ff fa01 	bl	810134a <tune_PID>
	//*************************

	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 8101f48:	4b99      	ldr	r3, [pc, #612]	@ (81021b0 <main+0x3d8>)
 8101f4a:	2201      	movs	r2, #1
 8101f4c:	2101      	movs	r1, #1
 8101f4e:	4899      	ldr	r0, [pc, #612]	@ (81021b4 <main+0x3dc>)
 8101f50:	f00a f8d2 	bl	810c0f8 <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 8101f54:	4b98      	ldr	r3, [pc, #608]	@ (81021b8 <main+0x3e0>)
 8101f56:	2201      	movs	r2, #1
 8101f58:	2102      	movs	r1, #2
 8101f5a:	4898      	ldr	r0, [pc, #608]	@ (81021bc <main+0x3e4>)
 8101f5c:	f00a f8cc 	bl	810c0f8 <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 8101f60:	4b97      	ldr	r3, [pc, #604]	@ (81021c0 <main+0x3e8>)
 8101f62:	9304      	str	r3, [sp, #16]
 8101f64:	4b97      	ldr	r3, [pc, #604]	@ (81021c4 <main+0x3ec>)
 8101f66:	9303      	str	r3, [sp, #12]
 8101f68:	4b97      	ldr	r3, [pc, #604]	@ (81021c8 <main+0x3f0>)
 8101f6a:	9302      	str	r3, [sp, #8]
 8101f6c:	4b97      	ldr	r3, [pc, #604]	@ (81021cc <main+0x3f4>)
 8101f6e:	9301      	str	r3, [sp, #4]
 8101f70:	4b97      	ldr	r3, [pc, #604]	@ (81021d0 <main+0x3f8>)
 8101f72:	9300      	str	r3, [sp, #0]
 8101f74:	4b97      	ldr	r3, [pc, #604]	@ (81021d4 <main+0x3fc>)
 8101f76:	4a98      	ldr	r2, [pc, #608]	@ (81021d8 <main+0x400>)
 8101f78:	4998      	ldr	r1, [pc, #608]	@ (81021dc <main+0x404>)
 8101f7a:	4899      	ldr	r0, [pc, #612]	@ (81021e0 <main+0x408>)
 8101f7c:	f7ff fc76 	bl	810186c <kalman_filter_init>
			&P_data, &K_data, &x_data);
	u_data[0] = -dt * lambda * b / (1 - dt * lambda);
 8101f80:	eddf 7a80 	vldr	s15, [pc, #512]	@ 8102184 <main+0x3ac>
 8101f84:	eef1 7a67 	vneg.f32	s15, s15
 8101f88:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 81021e4 <main+0x40c>
 8101f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101f90:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 81021e8 <main+0x410>
 8101f94:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101f98:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8102184 <main+0x3ac>
 8101f9c:	eddf 7a91 	vldr	s15, [pc, #580]	@ 81021e4 <main+0x40c>
 8101fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101fb0:	4b7f      	ldr	r3, [pc, #508]	@ (81021b0 <main+0x3d8>)
 8101fb2:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (flag_Tc == 1) {
 8101fb6:	4b8d      	ldr	r3, [pc, #564]	@ (81021ec <main+0x414>)
 8101fb8:	edd3 7a00 	vldr	s15, [r3]
 8101fbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101fc0:	eef4 7a47 	vcmp.f32	s15, s14
 8101fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101fc8:	d1f5      	bne.n	8101fb6 <main+0x1de>
			flag_Tc = 0;
 8101fca:	4b88      	ldr	r3, [pc, #544]	@ (81021ec <main+0x414>)
 8101fcc:	f04f 0200 	mov.w	r2, #0
 8101fd0:	601a      	str	r2, [r3, #0]
			//#####################################
			//##             BNO055			   ##
			//#####################################
			//*******************************

			flag_BNO055_Data_Ready = 1; //perche non va mai a 1 non ho capito perche
 8101fd2:	4b87      	ldr	r3, [pc, #540]	@ (81021f0 <main+0x418>)
 8101fd4:	2201      	movs	r2, #1
 8101fd6:	601a      	str	r2, [r3, #0]
			if (flag_BNO055_Data_Ready == 1) {
 8101fd8:	4b85      	ldr	r3, [pc, #532]	@ (81021f0 <main+0x418>)
 8101fda:	681b      	ldr	r3, [r3, #0]
 8101fdc:	2b01      	cmp	r3, #1
 8101fde:	d1ea      	bne.n	8101fb6 <main+0x1de>
				flag_BNO055_Data_Ready = 1; //da mettere poi a 0 appena funziona
 8101fe0:	4b83      	ldr	r3, [pc, #524]	@ (81021f0 <main+0x418>)
 8101fe2:	2201      	movs	r2, #1
 8101fe4:	601a      	str	r2, [r3, #0]

				//	bno055_writeData(BNO055_SYS_TRIGGER, 0x40); //reset int
				//	bno055_calibration_state_t cal = bno055_getCalibrationState();
				if (cal.sys == 3)
 8101fe6:	7b3b      	ldrb	r3, [r7, #12]
 8101fe8:	2b03      	cmp	r3, #3
 8101fea:	d102      	bne.n	8101ff2 <main+0x21a>
					bno055_calibrated = 1;
 8101fec:	4b81      	ldr	r3, [pc, #516]	@ (81021f4 <main+0x41c>)
 8101fee:	2201      	movs	r2, #1
 8101ff0:	601a      	str	r2, [r3, #0]

				bno055_calibrated = 1; //da togliere
 8101ff2:	4b80      	ldr	r3, [pc, #512]	@ (81021f4 <main+0x41c>)
 8101ff4:	2201      	movs	r2, #1
 8101ff6:	601a      	str	r2, [r3, #0]
				if (bno055_calibrated) {
 8101ff8:	4b7e      	ldr	r3, [pc, #504]	@ (81021f4 <main+0x41c>)
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	2b00      	cmp	r3, #0
 8101ffe:	d0da      	beq.n	8101fb6 <main+0x1de>
					//#####################################
					//##          RUOTA DIETRO		   ##
					//#####################################
					//*******************************
					//Ottengo velocita ruota dietro
					counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 8102000:	4b7d      	ldr	r3, [pc, #500]	@ (81021f8 <main+0x420>)
 8102002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102004:	4618      	mov	r0, r3
 8102006:	f7fe fb05 	bl	8100614 <__aeabi_ui2d>
 810200a:	4604      	mov	r4, r0
 810200c:	460d      	mov	r5, r1
 810200e:	4b7a      	ldr	r3, [pc, #488]	@ (81021f8 <main+0x420>)
 8102010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102012:	085b      	lsrs	r3, r3, #1
 8102014:	4618      	mov	r0, r3
 8102016:	f7fe fafd 	bl	8100614 <__aeabi_ui2d>
 810201a:	4602      	mov	r2, r0
 810201c:	460b      	mov	r3, r1
 810201e:	4620      	mov	r0, r4
 8102020:	4629      	mov	r1, r5
 8102022:	f7fe f9b9 	bl	8100398 <__aeabi_dsub>
 8102026:	4602      	mov	r2, r0
 8102028:	460b      	mov	r3, r1
 810202a:	4610      	mov	r0, r2
 810202c:	4619      	mov	r1, r3
 810202e:	f7fe fe63 	bl	8100cf8 <__aeabi_d2f>
 8102032:	4603      	mov	r3, r0
 8102034:	4a71      	ldr	r2, [pc, #452]	@ (81021fc <main+0x424>)
 8102036:	6013      	str	r3, [r2, #0]
					TIM4->CNT = (TIM4->ARR) / 2;
 8102038:	4b6f      	ldr	r3, [pc, #444]	@ (81021f8 <main+0x420>)
 810203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810203c:	4a6e      	ldr	r2, [pc, #440]	@ (81021f8 <main+0x420>)
 810203e:	085b      	lsrs	r3, r3, #1
 8102040:	6253      	str	r3, [r2, #36]	@ 0x24

					delta_angle_degree = (counts * 360) / (13 * 4 * 66);
 8102042:	4b6e      	ldr	r3, [pc, #440]	@ (81021fc <main+0x424>)
 8102044:	edd3 7a00 	vldr	s15, [r3]
 8102048:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8102200 <main+0x428>
 810204c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102050:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8102204 <main+0x42c>
 8102054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102058:	4b6b      	ldr	r3, [pc, #428]	@ (8102208 <main+0x430>)
 810205a:	edc3 7a00 	vstr	s15, [r3]
					speed_degsec = delta_angle_degree / dt;
 810205e:	4b6a      	ldr	r3, [pc, #424]	@ (8102208 <main+0x430>)
 8102060:	ed93 7a00 	vldr	s14, [r3]
 8102064:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8102184 <main+0x3ac>
 8102068:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810206c:	4b67      	ldr	r3, [pc, #412]	@ (810220c <main+0x434>)
 810206e:	edc3 7a00 	vstr	s15, [r3]
					speed_rpm = -(DegreeSec2RPM(speed_degsec) / 28 * 18); //wtf perche il meno???
 8102072:	4b66      	ldr	r3, [pc, #408]	@ (810220c <main+0x434>)
 8102074:	edd3 7a00 	vldr	s15, [r3]
 8102078:	eeb0 0a67 	vmov.f32	s0, s15
 810207c:	f7ff f852 	bl	8101124 <DegreeSec2RPM>
 8102080:	eeb0 7a40 	vmov.f32	s14, s0
 8102084:	eef3 6a0c 	vmov.f32	s13, #60	@ 0x41e00000  28.0
 8102088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810208c:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8102090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102094:	eef1 7a67 	vneg.f32	s15, s15
 8102098:	4b5d      	ldr	r3, [pc, #372]	@ (8102210 <main+0x438>)
 810209a:	edc3 7a00 	vstr	s15, [r3]
					//*******************************

					//******************************+
					//PID ruota dietro
					desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 810209e:	4b5d      	ldr	r3, [pc, #372]	@ (8102214 <main+0x43c>)
 81020a0:	edd3 7a00 	vldr	s15, [r3]
 81020a4:	eeb0 0a67 	vmov.f32	s0, s15
 81020a8:	f7ff fe62 	bl	8101d70 <getSpeed>
 81020ac:	eef0 7a40 	vmov.f32	s15, s0
 81020b0:	4b58      	ldr	r3, [pc, #352]	@ (8102214 <main+0x43c>)
 81020b2:	edc3 7a00 	vstr	s15, [r3]
					desired_speed_rpm = DegreeSec2RPM(
 81020b6:	4b57      	ldr	r3, [pc, #348]	@ (8102214 <main+0x43c>)
 81020b8:	edd3 7a00 	vldr	s15, [r3]
 81020bc:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 81020c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81020c4:	eeb0 0a47 	vmov.f32	s0, s14
 81020c8:	f7ff f82c 	bl	8101124 <DegreeSec2RPM>
 81020cc:	eef0 7a40 	vmov.f32	s15, s0
 81020d0:	4b51      	ldr	r3, [pc, #324]	@ (8102218 <main+0x440>)
 81020d2:	edc3 7a00 	vstr	s15, [r3]
							desired_speed_metsec / radius);

					u_back_wheel = PID_controller(&pid_speed, speed_rpm,
 81020d6:	4b4e      	ldr	r3, [pc, #312]	@ (8102210 <main+0x438>)
 81020d8:	edd3 7a00 	vldr	s15, [r3]
 81020dc:	4b4e      	ldr	r3, [pc, #312]	@ (8102218 <main+0x440>)
 81020de:	ed93 7a00 	vldr	s14, [r3]
 81020e2:	eef0 0a47 	vmov.f32	s1, s14
 81020e6:	eeb0 0a67 	vmov.f32	s0, s15
 81020ea:	4827      	ldr	r0, [pc, #156]	@ (8102188 <main+0x3b0>)
 81020ec:	f7ff f946 	bl	810137c <PID_controller>
 81020f0:	eef0 7a40 	vmov.f32	s15, s0
 81020f4:	4b49      	ldr	r3, [pc, #292]	@ (810221c <main+0x444>)
 81020f6:	edc3 7a00 	vstr	s15, [r3]
							desired_speed_rpm);
					duty_back_wheel = Voltage2Duty(u_back_wheel);
 81020fa:	4b48      	ldr	r3, [pc, #288]	@ (810221c <main+0x444>)
 81020fc:	edd3 7a00 	vldr	s15, [r3]
 8102100:	eeb0 0a67 	vmov.f32	s0, s15
 8102104:	f7ff f82e 	bl	8101164 <Voltage2Duty>
 8102108:	eef0 7a40 	vmov.f32	s15, s0
 810210c:	4b44      	ldr	r3, [pc, #272]	@ (8102220 <main+0x448>)
 810210e:	edc3 7a00 	vstr	s15, [r3]
					direction_back_wheel = Ref2Direction(desired_speed_rpm); //in teoria non serve perche la direzione è sempre in avanti
 8102112:	4b41      	ldr	r3, [pc, #260]	@ (8102218 <main+0x440>)
 8102114:	edd3 7a00 	vldr	s15, [r3]
 8102118:	eeb0 0a67 	vmov.f32	s0, s15
 810211c:	f7ff f864 	bl	81011e8 <Ref2Direction>
 8102120:	4603      	mov	r3, r0
 8102122:	461a      	mov	r2, r3
 8102124:	4b3f      	ldr	r3, [pc, #252]	@ (8102224 <main+0x44c>)
 8102126:	601a      	str	r2, [r3, #0]
					set_PWM_and_dir_back_wheel(duty_back_wheel,
 8102128:	4b3d      	ldr	r3, [pc, #244]	@ (8102220 <main+0x448>)
 810212a:	edd3 7a00 	vldr	s15, [r3]
 810212e:	4b3d      	ldr	r3, [pc, #244]	@ (8102224 <main+0x44c>)
 8102130:	681b      	ldr	r3, [r3, #0]
 8102132:	b2db      	uxtb	r3, r3
 8102134:	4618      	mov	r0, r3
 8102136:	eeb0 0a67 	vmov.f32	s0, s15
 810213a:	f7ff f86d 	bl	8101218 <set_PWM_and_dir_back_wheel>

					//#####################################
					//##          PID YAW RATE		   ##
					//#####################################
					//******************************
					desired_yaw_rate = 0;
 810213e:	4b3a      	ldr	r3, [pc, #232]	@ (8102228 <main+0x450>)
 8102140:	f04f 0200 	mov.w	r2, #0
 8102144:	601a      	str	r2, [r3, #0]
					desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 8102146:	4b39      	ldr	r3, [pc, #228]	@ (810222c <main+0x454>)
 8102148:	edd3 7a00 	vldr	s15, [r3]
 810214c:	4b36      	ldr	r3, [pc, #216]	@ (8102228 <main+0x450>)
 810214e:	ed93 7a00 	vldr	s14, [r3]
 8102152:	eef0 0a47 	vmov.f32	s1, s14
 8102156:	eeb0 0a67 	vmov.f32	s0, s15
 810215a:	4835      	ldr	r0, [pc, #212]	@ (8102230 <main+0x458>)
 810215c:	f7ff f90e 	bl	810137c <PID_controller>
 8102160:	eef0 7a40 	vmov.f32	s15, s0
 8102164:	e066      	b.n	8102234 <main+0x45c>
 8102166:	bf00      	nop
 8102168:	58026400 	.word	0x58026400
 810216c:	10000374 	.word	0x10000374
 8102170:	10000328 	.word	0x10000328
 8102174:	100003c0 	.word	0x100003c0
 8102178:	100002d4 	.word	0x100002d4
 810217c:	08111f54 	.word	0x08111f54
 8102180:	08111f78 	.word	0x08111f78
 8102184:	3c23d70a 	.word	0x3c23d70a
 8102188:	100004ec 	.word	0x100004ec
 810218c:	00000000 	.word	0x00000000
 8102190:	3d4ccccd 	.word	0x3d4ccccd
 8102194:	3a83126f 	.word	0x3a83126f
 8102198:	c2b40000 	.word	0xc2b40000
 810219c:	42b40000 	.word	0x42b40000
 81021a0:	1000052c 	.word	0x1000052c
 81021a4:	1000054c 	.word	0x1000054c
 81021a8:	42080000 	.word	0x42080000
 81021ac:	42860000 	.word	0x42860000
 81021b0:	10000638 	.word	0x10000638
 81021b4:	10000628 	.word	0x10000628
 81021b8:	1000063c 	.word	0x1000063c
 81021bc:	10000630 	.word	0x10000630
 81021c0:	10000620 	.word	0x10000620
 81021c4:	10000070 	.word	0x10000070
 81021c8:	10000060 	.word	0x10000060
 81021cc:	10000050 	.word	0x10000050
 81021d0:	10000040 	.word	0x10000040
 81021d4:	10000030 	.word	0x10000030
 81021d8:	10000028 	.word	0x10000028
 81021dc:	10000018 	.word	0x10000018
 81021e0:	100005e0 	.word	0x100005e0
 81021e4:	c93b6280 	.word	0xc93b6280
 81021e8:	401ef4f1 	.word	0x401ef4f1
 81021ec:	10000570 	.word	0x10000570
 81021f0:	1000056c 	.word	0x1000056c
 81021f4:	10000598 	.word	0x10000598
 81021f8:	40000800 	.word	0x40000800
 81021fc:	10000574 	.word	0x10000574
 8102200:	43b40000 	.word	0x43b40000
 8102204:	45568000 	.word	0x45568000
 8102208:	10000578 	.word	0x10000578
 810220c:	1000057c 	.word	0x1000057c
 8102210:	10000580 	.word	0x10000580
 8102214:	10000584 	.word	0x10000584
 8102218:	10000588 	.word	0x10000588
 810221c:	1000058c 	.word	0x1000058c
 8102220:	10000590 	.word	0x10000590
 8102224:	10000594 	.word	0x10000594
 8102228:	1000059c 	.word	0x1000059c
 810222c:	100005bc 	.word	0x100005bc
 8102230:	1000050c 	.word	0x1000050c
 8102234:	4ba6      	ldr	r3, [pc, #664]	@ (81024d0 <main+0x6f8>)
 8102236:	edc3 7a00 	vstr	s15, [r3]

					//#####################################
					//##            PID ROLL			   ##
					//#####################################
					//******************************
					desired_torque = PID_controller(&pid_roll, roll,
 810223a:	4ba6      	ldr	r3, [pc, #664]	@ (81024d4 <main+0x6fc>)
 810223c:	edd3 7a00 	vldr	s15, [r3]
 8102240:	4ba3      	ldr	r3, [pc, #652]	@ (81024d0 <main+0x6f8>)
 8102242:	ed93 7a00 	vldr	s14, [r3]
 8102246:	eef0 0a47 	vmov.f32	s1, s14
 810224a:	eeb0 0a67 	vmov.f32	s0, s15
 810224e:	48a2      	ldr	r0, [pc, #648]	@ (81024d8 <main+0x700>)
 8102250:	f7ff f894 	bl	810137c <PID_controller>
 8102254:	eef0 7a40 	vmov.f32	s15, s0
 8102258:	4ba0      	ldr	r3, [pc, #640]	@ (81024dc <main+0x704>)
 810225a:	edc3 7a00 	vstr	s15, [r3]
					//#####################################
					//##         LOW-PASS FILTER	   	   ##
					//#####################################
					//******************************
					//filtro passa basso 1/s+1 discretizzato con Matlab
					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 810225e:	4ba0      	ldr	r3, [pc, #640]	@ (81024e0 <main+0x708>)
 8102260:	681b      	ldr	r3, [r3, #0]
 8102262:	4618      	mov	r0, r3
 8102264:	f7fe f9f8 	bl	8100658 <__aeabi_f2d>
 8102268:	a38f      	add	r3, pc, #572	@ (adr r3, 81024a8 <main+0x6d0>)
 810226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810226e:	f7fe fa4b 	bl	8100708 <__aeabi_dmul>
 8102272:	4602      	mov	r2, r0
 8102274:	460b      	mov	r3, r1
 8102276:	4614      	mov	r4, r2
 8102278:	461d      	mov	r5, r3
							+ 0.00995 * old_desired_torque;
 810227a:	4b9a      	ldr	r3, [pc, #616]	@ (81024e4 <main+0x70c>)
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	4618      	mov	r0, r3
 8102280:	f7fe f9ea 	bl	8100658 <__aeabi_f2d>
 8102284:	a38a      	add	r3, pc, #552	@ (adr r3, 81024b0 <main+0x6d8>)
 8102286:	e9d3 2300 	ldrd	r2, r3, [r3]
 810228a:	f7fe fa3d 	bl	8100708 <__aeabi_dmul>
 810228e:	4602      	mov	r2, r0
 8102290:	460b      	mov	r3, r1
 8102292:	4620      	mov	r0, r4
 8102294:	4629      	mov	r1, r5
 8102296:	f7fe f881 	bl	810039c <__adddf3>
 810229a:	4602      	mov	r2, r0
 810229c:	460b      	mov	r3, r1
 810229e:	4610      	mov	r0, r2
 81022a0:	4619      	mov	r1, r3
 81022a2:	f7fe fd29 	bl	8100cf8 <__aeabi_d2f>
 81022a6:	4603      	mov	r3, r0
					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 81022a8:	4a8f      	ldr	r2, [pc, #572]	@ (81024e8 <main+0x710>)
 81022aa:	6013      	str	r3, [r2, #0]
					old_desired_torque = desired_torque;
 81022ac:	4b8b      	ldr	r3, [pc, #556]	@ (81024dc <main+0x704>)
 81022ae:	681b      	ldr	r3, [r3, #0]
 81022b0:	4a8c      	ldr	r2, [pc, #560]	@ (81024e4 <main+0x70c>)
 81022b2:	6013      	str	r3, [r2, #0]
					old_desired_filtered_torque = desired_filtered_torque;
 81022b4:	4b8c      	ldr	r3, [pc, #560]	@ (81024e8 <main+0x710>)
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	4a89      	ldr	r2, [pc, #548]	@ (81024e0 <main+0x708>)
 81022ba:	6013      	str	r3, [r2, #0]
					//#####################################
					//##            STERZO			   ##
					//#####################################
					//******************************
					//Calcolo valore corrente
					HAL_ADC_Start(&hadc1);
 81022bc:	488b      	ldr	r0, [pc, #556]	@ (81024ec <main+0x714>)
 81022be:	f001 fd65 	bl	8103d8c <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, timeout);
 81022c2:	4b8b      	ldr	r3, [pc, #556]	@ (81024f0 <main+0x718>)
 81022c4:	681b      	ldr	r3, [r3, #0]
 81022c6:	4619      	mov	r1, r3
 81022c8:	4888      	ldr	r0, [pc, #544]	@ (81024ec <main+0x714>)
 81022ca:	f001 fe5d 	bl	8103f88 <HAL_ADC_PollForConversion>
					CountValue = HAL_ADC_GetValue(&hadc1);
 81022ce:	4887      	ldr	r0, [pc, #540]	@ (81024ec <main+0x714>)
 81022d0:	f001 ff4e 	bl	8104170 <HAL_ADC_GetValue>
 81022d4:	ee07 0a90 	vmov	s15, r0
 81022d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81022dc:	4b85      	ldr	r3, [pc, #532]	@ (81024f4 <main+0x71c>)
 81022de:	edc3 7a00 	vstr	s15, [r3]
					volt = ((float) CountValue) * Vref / (resolution);
 81022e2:	4b84      	ldr	r3, [pc, #528]	@ (81024f4 <main+0x71c>)
 81022e4:	ed93 7a00 	vldr	s14, [r3]
 81022e8:	4b83      	ldr	r3, [pc, #524]	@ (81024f8 <main+0x720>)
 81022ea:	edd3 7a00 	vldr	s15, [r3]
 81022ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 81022f2:	4b82      	ldr	r3, [pc, #520]	@ (81024fc <main+0x724>)
 81022f4:	ed93 7a00 	vldr	s14, [r3]
 81022f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81022fc:	4b80      	ldr	r3, [pc, #512]	@ (8102500 <main+0x728>)
 81022fe:	edc3 7a00 	vstr	s15, [r3]
					HAL_ADC_Stop(&hadc1);
 8102302:	487a      	ldr	r0, [pc, #488]	@ (81024ec <main+0x714>)
 8102304:	f001 fe0c 	bl	8103f20 <HAL_ADC_Stop>
					VoltSens = volt * 1.524 - 0.1018;
 8102308:	4b7d      	ldr	r3, [pc, #500]	@ (8102500 <main+0x728>)
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	4618      	mov	r0, r3
 810230e:	f7fe f9a3 	bl	8100658 <__aeabi_f2d>
 8102312:	a369      	add	r3, pc, #420	@ (adr r3, 81024b8 <main+0x6e0>)
 8102314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102318:	f7fe f9f6 	bl	8100708 <__aeabi_dmul>
 810231c:	4602      	mov	r2, r0
 810231e:	460b      	mov	r3, r1
 8102320:	4610      	mov	r0, r2
 8102322:	4619      	mov	r1, r3
 8102324:	a366      	add	r3, pc, #408	@ (adr r3, 81024c0 <main+0x6e8>)
 8102326:	e9d3 2300 	ldrd	r2, r3, [r3]
 810232a:	f7fe f835 	bl	8100398 <__aeabi_dsub>
 810232e:	4602      	mov	r2, r0
 8102330:	460b      	mov	r3, r1
 8102332:	4610      	mov	r0, r2
 8102334:	4619      	mov	r1, r3
 8102336:	f7fe fcdf 	bl	8100cf8 <__aeabi_d2f>
 810233a:	4603      	mov	r3, r0
 810233c:	4a71      	ldr	r2, [pc, #452]	@ (8102504 <main+0x72c>)
 810233e:	6013      	str	r3, [r2, #0]

					//Filtro di Kalman per corrente
					//setta i valori di input e di misura per il filtro di kalman
					z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 8102340:	4b70      	ldr	r3, [pc, #448]	@ (8102504 <main+0x72c>)
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	4a70      	ldr	r2, [pc, #448]	@ (8102508 <main+0x730>)
 8102346:	6013      	str	r3, [r2, #0]
					z_data[1] = x_data[1]; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 8102348:	4b70      	ldr	r3, [pc, #448]	@ (810250c <main+0x734>)
 810234a:	685b      	ldr	r3, [r3, #4]
 810234c:	4a6e      	ldr	r2, [pc, #440]	@ (8102508 <main+0x730>)
 810234e:	6053      	str	r3, [r2, #4]
					//z_data[1] = misuracorrente; //qua ci va la misura della corrente. scelta grazie al pwm dalla formula I = V/R
					kalman_predict(&kf, &u);
 8102350:	496f      	ldr	r1, [pc, #444]	@ (8102510 <main+0x738>)
 8102352:	4870      	ldr	r0, [pc, #448]	@ (8102514 <main+0x73c>)
 8102354:	f7ff fad4 	bl	8101900 <kalman_predict>
					kalman_update(&kf, &z);
 8102358:	496f      	ldr	r1, [pc, #444]	@ (8102518 <main+0x740>)
 810235a:	486e      	ldr	r0, [pc, #440]	@ (8102514 <main+0x73c>)
 810235c:	f7ff fb3e 	bl	81019dc <kalman_update>
					filtered_current = x_data[1];
 8102360:	4b6a      	ldr	r3, [pc, #424]	@ (810250c <main+0x734>)
 8102362:	685b      	ldr	r3, [r3, #4]
 8102364:	4a6d      	ldr	r2, [pc, #436]	@ (810251c <main+0x744>)
 8102366:	6013      	str	r3, [r2, #0]


					//calcolo coppia
					torque = filtered_current * K;
 8102368:	4b6c      	ldr	r3, [pc, #432]	@ (810251c <main+0x744>)
 810236a:	edd3 7a00 	vldr	s15, [r3]
 810236e:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8102520 <main+0x748>
 8102372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102376:	4b6b      	ldr	r3, [pc, #428]	@ (8102524 <main+0x74c>)
 8102378:	edc3 7a00 	vstr	s15, [r3]

					//PID
					//test

					desired_torque = 2 * K * sin((n_ref / 1000.0) * 2 * 3.14);
 810237c:	eddf 7a68 	vldr	s15, [pc, #416]	@ 8102520 <main+0x748>
 8102380:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8102384:	ee17 0a90 	vmov	r0, s15
 8102388:	f7fe f966 	bl	8100658 <__aeabi_f2d>
 810238c:	4604      	mov	r4, r0
 810238e:	460d      	mov	r5, r1
 8102390:	4b65      	ldr	r3, [pc, #404]	@ (8102528 <main+0x750>)
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	4618      	mov	r0, r3
 8102396:	f7fe f94d 	bl	8100634 <__aeabi_i2d>
 810239a:	f04f 0200 	mov.w	r2, #0
 810239e:	4b63      	ldr	r3, [pc, #396]	@ (810252c <main+0x754>)
 81023a0:	f7fe fadc 	bl	810095c <__aeabi_ddiv>
 81023a4:	4602      	mov	r2, r0
 81023a6:	460b      	mov	r3, r1
 81023a8:	4610      	mov	r0, r2
 81023aa:	4619      	mov	r1, r3
 81023ac:	4602      	mov	r2, r0
 81023ae:	460b      	mov	r3, r1
 81023b0:	f7fd fff4 	bl	810039c <__adddf3>
 81023b4:	4602      	mov	r2, r0
 81023b6:	460b      	mov	r3, r1
 81023b8:	4610      	mov	r0, r2
 81023ba:	4619      	mov	r1, r3
 81023bc:	a342      	add	r3, pc, #264	@ (adr r3, 81024c8 <main+0x6f0>)
 81023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023c2:	f7fe f9a1 	bl	8100708 <__aeabi_dmul>
 81023c6:	4602      	mov	r2, r0
 81023c8:	460b      	mov	r3, r1
 81023ca:	ec43 2b17 	vmov	d7, r2, r3
 81023ce:	eeb0 0a47 	vmov.f32	s0, s14
 81023d2:	eef0 0a67 	vmov.f32	s1, s15
 81023d6:	f00e fad7 	bl	8110988 <sin>
 81023da:	ec53 2b10 	vmov	r2, r3, d0
 81023de:	4620      	mov	r0, r4
 81023e0:	4629      	mov	r1, r5
 81023e2:	f7fe f991 	bl	8100708 <__aeabi_dmul>
 81023e6:	4602      	mov	r2, r0
 81023e8:	460b      	mov	r3, r1
 81023ea:	4610      	mov	r0, r2
 81023ec:	4619      	mov	r1, r3
 81023ee:	f7fe fc83 	bl	8100cf8 <__aeabi_d2f>
 81023f2:	4603      	mov	r3, r0
 81023f4:	4a39      	ldr	r2, [pc, #228]	@ (81024dc <main+0x704>)
 81023f6:	6013      	str	r3, [r2, #0]
					printf("u_front_wheel: %.3f ", u_front_wheel);
					printf("duty_front_wheel: %.3f \r\n", duty_front_wheel);
					printf("coppia des: %.3f", desired_torque);
					printf("coppia: %.3f \r\n", torque);
					*/
					printf("u_front_wheel: %.3f ", u_front_wheel);
 81023f8:	4b4d      	ldr	r3, [pc, #308]	@ (8102530 <main+0x758>)
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	4618      	mov	r0, r3
 81023fe:	f7fe f92b 	bl	8100658 <__aeabi_f2d>
 8102402:	4602      	mov	r2, r0
 8102404:	460b      	mov	r3, r1
 8102406:	484b      	ldr	r0, [pc, #300]	@ (8102534 <main+0x75c>)
 8102408:	f00a fe12 	bl	810d030 <iprintf>

					torque = 0;
 810240c:	4b45      	ldr	r3, [pc, #276]	@ (8102524 <main+0x74c>)
 810240e:	f04f 0200 	mov.w	r2, #0
 8102412:	601a      	str	r2, [r3, #0]
					u_front_wheel = PID_controller(&pid_steering_torque, torque,
 8102414:	4b43      	ldr	r3, [pc, #268]	@ (8102524 <main+0x74c>)
 8102416:	edd3 7a00 	vldr	s15, [r3]
 810241a:	4b30      	ldr	r3, [pc, #192]	@ (81024dc <main+0x704>)
 810241c:	ed93 7a00 	vldr	s14, [r3]
 8102420:	eef0 0a47 	vmov.f32	s1, s14
 8102424:	eeb0 0a67 	vmov.f32	s0, s15
 8102428:	4843      	ldr	r0, [pc, #268]	@ (8102538 <main+0x760>)
 810242a:	f7fe ffa7 	bl	810137c <PID_controller>
 810242e:	eef0 7a40 	vmov.f32	s15, s0
 8102432:	4b3f      	ldr	r3, [pc, #252]	@ (8102530 <main+0x758>)
 8102434:	edc3 7a00 	vstr	s15, [r3]
							desired_torque);



					duty_front_wheel = Voltage2Duty(u_front_wheel);
 8102438:	4b3d      	ldr	r3, [pc, #244]	@ (8102530 <main+0x758>)
 810243a:	edd3 7a00 	vldr	s15, [r3]
 810243e:	eeb0 0a67 	vmov.f32	s0, s15
 8102442:	f7fe fe8f 	bl	8101164 <Voltage2Duty>
 8102446:	eef0 7a40 	vmov.f32	s15, s0
 810244a:	4b3c      	ldr	r3, [pc, #240]	@ (810253c <main+0x764>)
 810244c:	edc3 7a00 	vstr	s15, [r3]
					dir_front_wheel = Ref2Direction(u_front_wheel);
 8102450:	4b37      	ldr	r3, [pc, #220]	@ (8102530 <main+0x758>)
 8102452:	edd3 7a00 	vldr	s15, [r3]
 8102456:	eeb0 0a67 	vmov.f32	s0, s15
 810245a:	f7fe fec5 	bl	81011e8 <Ref2Direction>
 810245e:	4603      	mov	r3, r0
 8102460:	ee07 3a90 	vmov	s15, r3
 8102464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102468:	4b35      	ldr	r3, [pc, #212]	@ (8102540 <main+0x768>)
 810246a:	edc3 7a00 	vstr	s15, [r3]
					set_PWM_and_dir_front_wheel(duty_front_wheel,
 810246e:	4b33      	ldr	r3, [pc, #204]	@ (810253c <main+0x764>)
 8102470:	ed93 7a00 	vldr	s14, [r3]
 8102474:	4b32      	ldr	r3, [pc, #200]	@ (8102540 <main+0x768>)
 8102476:	edd3 7a00 	vldr	s15, [r3]
 810247a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810247e:	edc7 7a01 	vstr	s15, [r7, #4]
 8102482:	793b      	ldrb	r3, [r7, #4]
 8102484:	b2db      	uxtb	r3, r3
 8102486:	4618      	mov	r0, r3
 8102488:	eeb0 0a47 	vmov.f32	s0, s14
 810248c:	f7fe ff06 	bl	810129c <set_PWM_and_dir_front_wheel>
							dir_front_wheel);
					printf("dir_front_wheel %.3f \r\n",dir_front_wheel);
 8102490:	4b2b      	ldr	r3, [pc, #172]	@ (8102540 <main+0x768>)
 8102492:	681b      	ldr	r3, [r3, #0]
 8102494:	4618      	mov	r0, r3
 8102496:	f7fe f8df 	bl	8100658 <__aeabi_f2d>
 810249a:	4602      	mov	r2, r0
 810249c:	460b      	mov	r3, r1
 810249e:	4829      	ldr	r0, [pc, #164]	@ (8102544 <main+0x76c>)
 81024a0:	f00a fdc6 	bl	810d030 <iprintf>
		if (flag_Tc == 1) {
 81024a4:	e587      	b.n	8101fb6 <main+0x1de>
 81024a6:	bf00      	nop
 81024a8:	7ae147ae 	.word	0x7ae147ae
 81024ac:	3fefae14 	.word	0x3fefae14
 81024b0:	64c2f838 	.word	0x64c2f838
 81024b4:	3f8460aa 	.word	0x3f8460aa
 81024b8:	d2f1a9fc 	.word	0xd2f1a9fc
 81024bc:	3ff8624d 	.word	0x3ff8624d
 81024c0:	96bb98c8 	.word	0x96bb98c8
 81024c4:	3fba0f90 	.word	0x3fba0f90
 81024c8:	51eb851f 	.word	0x51eb851f
 81024cc:	40091eb8 	.word	0x40091eb8
 81024d0:	100005a0 	.word	0x100005a0
 81024d4:	100005c0 	.word	0x100005c0
 81024d8:	1000052c 	.word	0x1000052c
 81024dc:	100005a4 	.word	0x100005a4
 81024e0:	100005ac 	.word	0x100005ac
 81024e4:	100005b0 	.word	0x100005b0
 81024e8:	100005a8 	.word	0x100005a8
 81024ec:	10000270 	.word	0x10000270
 81024f0:	1000000c 	.word	0x1000000c
 81024f4:	100005b4 	.word	0x100005b4
 81024f8:	10000014 	.word	0x10000014
 81024fc:	10000010 	.word	0x10000010
 8102500:	100005b8 	.word	0x100005b8
 8102504:	100005dc 	.word	0x100005dc
 8102508:	1000063c 	.word	0x1000063c
 810250c:	10000620 	.word	0x10000620
 8102510:	10000628 	.word	0x10000628
 8102514:	100005e0 	.word	0x100005e0
 8102518:	10000630 	.word	0x10000630
 810251c:	100005d0 	.word	0x100005d0
 8102520:	3cbfb15b 	.word	0x3cbfb15b
 8102524:	100005d4 	.word	0x100005d4
 8102528:	100005d8 	.word	0x100005d8
 810252c:	408f4000 	.word	0x408f4000
 8102530:	100005c4 	.word	0x100005c4
 8102534:	08111fb0 	.word	0x08111fb0
 8102538:	1000054c 	.word	0x1000054c
 810253c:	100005cc 	.word	0x100005cc
 8102540:	100005c8 	.word	0x100005c8
 8102544:	08111fc8 	.word	0x08111fc8

08102548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8102548:	b580      	push	{r7, lr}
 810254a:	b08a      	sub	sp, #40	@ 0x28
 810254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810254e:	f107 031c 	add.w	r3, r7, #28
 8102552:	2200      	movs	r2, #0
 8102554:	601a      	str	r2, [r3, #0]
 8102556:	605a      	str	r2, [r3, #4]
 8102558:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810255a:	463b      	mov	r3, r7
 810255c:	2200      	movs	r2, #0
 810255e:	601a      	str	r2, [r3, #0]
 8102560:	605a      	str	r2, [r3, #4]
 8102562:	609a      	str	r2, [r3, #8]
 8102564:	60da      	str	r2, [r3, #12]
 8102566:	611a      	str	r2, [r3, #16]
 8102568:	615a      	str	r2, [r3, #20]
 810256a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810256c:	4b2f      	ldr	r3, [pc, #188]	@ (810262c <MX_ADC1_Init+0xe4>)
 810256e:	4a30      	ldr	r2, [pc, #192]	@ (8102630 <MX_ADC1_Init+0xe8>)
 8102570:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8102572:	4b2e      	ldr	r3, [pc, #184]	@ (810262c <MX_ADC1_Init+0xe4>)
 8102574:	2200      	movs	r2, #0
 8102576:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8102578:	4b2c      	ldr	r3, [pc, #176]	@ (810262c <MX_ADC1_Init+0xe4>)
 810257a:	2200      	movs	r2, #0
 810257c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810257e:	4b2b      	ldr	r3, [pc, #172]	@ (810262c <MX_ADC1_Init+0xe4>)
 8102580:	2200      	movs	r2, #0
 8102582:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8102584:	4b29      	ldr	r3, [pc, #164]	@ (810262c <MX_ADC1_Init+0xe4>)
 8102586:	2204      	movs	r2, #4
 8102588:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810258a:	4b28      	ldr	r3, [pc, #160]	@ (810262c <MX_ADC1_Init+0xe4>)
 810258c:	2200      	movs	r2, #0
 810258e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8102590:	4b26      	ldr	r3, [pc, #152]	@ (810262c <MX_ADC1_Init+0xe4>)
 8102592:	2200      	movs	r2, #0
 8102594:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8102596:	4b25      	ldr	r3, [pc, #148]	@ (810262c <MX_ADC1_Init+0xe4>)
 8102598:	2201      	movs	r2, #1
 810259a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810259c:	4b23      	ldr	r3, [pc, #140]	@ (810262c <MX_ADC1_Init+0xe4>)
 810259e:	2200      	movs	r2, #0
 81025a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81025a2:	4b22      	ldr	r3, [pc, #136]	@ (810262c <MX_ADC1_Init+0xe4>)
 81025a4:	2200      	movs	r2, #0
 81025a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81025a8:	4b20      	ldr	r3, [pc, #128]	@ (810262c <MX_ADC1_Init+0xe4>)
 81025aa:	2200      	movs	r2, #0
 81025ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81025ae:	4b1f      	ldr	r3, [pc, #124]	@ (810262c <MX_ADC1_Init+0xe4>)
 81025b0:	2200      	movs	r2, #0
 81025b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81025b4:	4b1d      	ldr	r3, [pc, #116]	@ (810262c <MX_ADC1_Init+0xe4>)
 81025b6:	2200      	movs	r2, #0
 81025b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81025ba:	4b1c      	ldr	r3, [pc, #112]	@ (810262c <MX_ADC1_Init+0xe4>)
 81025bc:	2200      	movs	r2, #0
 81025be:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81025c0:	4b1a      	ldr	r3, [pc, #104]	@ (810262c <MX_ADC1_Init+0xe4>)
 81025c2:	2200      	movs	r2, #0
 81025c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81025c8:	4818      	ldr	r0, [pc, #96]	@ (810262c <MX_ADC1_Init+0xe4>)
 81025ca:	f001 fa3d 	bl	8103a48 <HAL_ADC_Init>
 81025ce:	4603      	mov	r3, r0
 81025d0:	2b00      	cmp	r3, #0
 81025d2:	d001      	beq.n	81025d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 81025d4:	f000 fb8a 	bl	8102cec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81025d8:	2300      	movs	r3, #0
 81025da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81025dc:	f107 031c 	add.w	r3, r7, #28
 81025e0:	4619      	mov	r1, r3
 81025e2:	4812      	ldr	r0, [pc, #72]	@ (810262c <MX_ADC1_Init+0xe4>)
 81025e4:	f002 fc06 	bl	8104df4 <HAL_ADCEx_MultiModeConfigChannel>
 81025e8:	4603      	mov	r3, r0
 81025ea:	2b00      	cmp	r3, #0
 81025ec:	d001      	beq.n	81025f2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81025ee:	f000 fb7d 	bl	8102cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 81025f2:	4b10      	ldr	r3, [pc, #64]	@ (8102634 <MX_ADC1_Init+0xec>)
 81025f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81025f6:	2306      	movs	r3, #6
 81025f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81025fa:	2300      	movs	r3, #0
 81025fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81025fe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8102602:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8102604:	2304      	movs	r3, #4
 8102606:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8102608:	2300      	movs	r3, #0
 810260a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 810260c:	2300      	movs	r3, #0
 810260e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8102610:	463b      	mov	r3, r7
 8102612:	4619      	mov	r1, r3
 8102614:	4805      	ldr	r0, [pc, #20]	@ (810262c <MX_ADC1_Init+0xe4>)
 8102616:	f001 fdb9 	bl	810418c <HAL_ADC_ConfigChannel>
 810261a:	4603      	mov	r3, r0
 810261c:	2b00      	cmp	r3, #0
 810261e:	d001      	beq.n	8102624 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8102620:	f000 fb64 	bl	8102cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8102624:	bf00      	nop
 8102626:	3728      	adds	r7, #40	@ 0x28
 8102628:	46bd      	mov	sp, r7
 810262a:	bd80      	pop	{r7, pc}
 810262c:	10000270 	.word	0x10000270
 8102630:	40022000 	.word	0x40022000
 8102634:	08600004 	.word	0x08600004

08102638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102638:	b580      	push	{r7, lr}
 810263a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 810263c:	4b1b      	ldr	r3, [pc, #108]	@ (81026ac <MX_I2C1_Init+0x74>)
 810263e:	4a1c      	ldr	r2, [pc, #112]	@ (81026b0 <MX_I2C1_Init+0x78>)
 8102640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8102642:	4b1a      	ldr	r3, [pc, #104]	@ (81026ac <MX_I2C1_Init+0x74>)
 8102644:	4a1b      	ldr	r2, [pc, #108]	@ (81026b4 <MX_I2C1_Init+0x7c>)
 8102646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102648:	4b18      	ldr	r3, [pc, #96]	@ (81026ac <MX_I2C1_Init+0x74>)
 810264a:	2200      	movs	r2, #0
 810264c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810264e:	4b17      	ldr	r3, [pc, #92]	@ (81026ac <MX_I2C1_Init+0x74>)
 8102650:	2201      	movs	r2, #1
 8102652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102654:	4b15      	ldr	r3, [pc, #84]	@ (81026ac <MX_I2C1_Init+0x74>)
 8102656:	2200      	movs	r2, #0
 8102658:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810265a:	4b14      	ldr	r3, [pc, #80]	@ (81026ac <MX_I2C1_Init+0x74>)
 810265c:	2200      	movs	r2, #0
 810265e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102660:	4b12      	ldr	r3, [pc, #72]	@ (81026ac <MX_I2C1_Init+0x74>)
 8102662:	2200      	movs	r2, #0
 8102664:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102666:	4b11      	ldr	r3, [pc, #68]	@ (81026ac <MX_I2C1_Init+0x74>)
 8102668:	2200      	movs	r2, #0
 810266a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810266c:	4b0f      	ldr	r3, [pc, #60]	@ (81026ac <MX_I2C1_Init+0x74>)
 810266e:	2200      	movs	r2, #0
 8102670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8102672:	480e      	ldr	r0, [pc, #56]	@ (81026ac <MX_I2C1_Init+0x74>)
 8102674:	f002 ffba 	bl	81055ec <HAL_I2C_Init>
 8102678:	4603      	mov	r3, r0
 810267a:	2b00      	cmp	r3, #0
 810267c:	d001      	beq.n	8102682 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810267e:	f000 fb35 	bl	8102cec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8102682:	2100      	movs	r1, #0
 8102684:	4809      	ldr	r0, [pc, #36]	@ (81026ac <MX_I2C1_Init+0x74>)
 8102686:	f003 fd1b 	bl	81060c0 <HAL_I2CEx_ConfigAnalogFilter>
 810268a:	4603      	mov	r3, r0
 810268c:	2b00      	cmp	r3, #0
 810268e:	d001      	beq.n	8102694 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102690:	f000 fb2c 	bl	8102cec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102694:	2100      	movs	r1, #0
 8102696:	4805      	ldr	r0, [pc, #20]	@ (81026ac <MX_I2C1_Init+0x74>)
 8102698:	f003 fd5d 	bl	8106156 <HAL_I2CEx_ConfigDigitalFilter>
 810269c:	4603      	mov	r3, r0
 810269e:	2b00      	cmp	r3, #0
 81026a0:	d001      	beq.n	81026a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81026a2:	f000 fb23 	bl	8102cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81026a6:	bf00      	nop
 81026a8:	bd80      	pop	{r7, pc}
 81026aa:	bf00      	nop
 81026ac:	100002d4 	.word	0x100002d4
 81026b0:	40005400 	.word	0x40005400
 81026b4:	10c0ecff 	.word	0x10c0ecff

081026b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81026b8:	b580      	push	{r7, lr}
 81026ba:	b09a      	sub	sp, #104	@ 0x68
 81026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81026be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 81026c2:	2200      	movs	r2, #0
 81026c4:	601a      	str	r2, [r3, #0]
 81026c6:	605a      	str	r2, [r3, #4]
 81026c8:	609a      	str	r2, [r3, #8]
 81026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81026cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81026d0:	2200      	movs	r2, #0
 81026d2:	601a      	str	r2, [r3, #0]
 81026d4:	605a      	str	r2, [r3, #4]
 81026d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81026d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81026dc:	2200      	movs	r2, #0
 81026de:	601a      	str	r2, [r3, #0]
 81026e0:	605a      	str	r2, [r3, #4]
 81026e2:	609a      	str	r2, [r3, #8]
 81026e4:	60da      	str	r2, [r3, #12]
 81026e6:	611a      	str	r2, [r3, #16]
 81026e8:	615a      	str	r2, [r3, #20]
 81026ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81026ec:	1d3b      	adds	r3, r7, #4
 81026ee:	222c      	movs	r2, #44	@ 0x2c
 81026f0:	2100      	movs	r1, #0
 81026f2:	4618      	mov	r0, r3
 81026f4:	f00a fe04 	bl	810d300 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81026f8:	4b43      	ldr	r3, [pc, #268]	@ (8102808 <MX_TIM1_Init+0x150>)
 81026fa:	4a44      	ldr	r2, [pc, #272]	@ (810280c <MX_TIM1_Init+0x154>)
 81026fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 81026fe:	4b42      	ldr	r3, [pc, #264]	@ (8102808 <MX_TIM1_Init+0x150>)
 8102700:	22c7      	movs	r2, #199	@ 0xc7
 8102702:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102704:	4b40      	ldr	r3, [pc, #256]	@ (8102808 <MX_TIM1_Init+0x150>)
 8102706:	2200      	movs	r2, #0
 8102708:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 810270a:	4b3f      	ldr	r3, [pc, #252]	@ (8102808 <MX_TIM1_Init+0x150>)
 810270c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8102710:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102712:	4b3d      	ldr	r3, [pc, #244]	@ (8102808 <MX_TIM1_Init+0x150>)
 8102714:	2200      	movs	r2, #0
 8102716:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102718:	4b3b      	ldr	r3, [pc, #236]	@ (8102808 <MX_TIM1_Init+0x150>)
 810271a:	2200      	movs	r2, #0
 810271c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810271e:	4b3a      	ldr	r3, [pc, #232]	@ (8102808 <MX_TIM1_Init+0x150>)
 8102720:	2200      	movs	r2, #0
 8102722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8102724:	4838      	ldr	r0, [pc, #224]	@ (8102808 <MX_TIM1_Init+0x150>)
 8102726:	f006 fcc1 	bl	81090ac <HAL_TIM_Base_Init>
 810272a:	4603      	mov	r3, r0
 810272c:	2b00      	cmp	r3, #0
 810272e:	d001      	beq.n	8102734 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8102730:	f000 fadc 	bl	8102cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102738:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810273a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 810273e:	4619      	mov	r1, r3
 8102740:	4831      	ldr	r0, [pc, #196]	@ (8102808 <MX_TIM1_Init+0x150>)
 8102742:	f007 f9b5 	bl	8109ab0 <HAL_TIM_ConfigClockSource>
 8102746:	4603      	mov	r3, r0
 8102748:	2b00      	cmp	r3, #0
 810274a:	d001      	beq.n	8102750 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 810274c:	f000 face 	bl	8102cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8102750:	482d      	ldr	r0, [pc, #180]	@ (8102808 <MX_TIM1_Init+0x150>)
 8102752:	f006 fd7b 	bl	810924c <HAL_TIM_PWM_Init>
 8102756:	4603      	mov	r3, r0
 8102758:	2b00      	cmp	r3, #0
 810275a:	d001      	beq.n	8102760 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 810275c:	f000 fac6 	bl	8102cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102760:	2300      	movs	r3, #0
 8102762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102764:	2300      	movs	r3, #0
 8102766:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102768:	2300      	movs	r3, #0
 810276a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810276c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8102770:	4619      	mov	r1, r3
 8102772:	4825      	ldr	r0, [pc, #148]	@ (8102808 <MX_TIM1_Init+0x150>)
 8102774:	f007 fefa 	bl	810a56c <HAL_TIMEx_MasterConfigSynchronization>
 8102778:	4603      	mov	r3, r0
 810277a:	2b00      	cmp	r3, #0
 810277c:	d001      	beq.n	8102782 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 810277e:	f000 fab5 	bl	8102cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102782:	2360      	movs	r3, #96	@ 0x60
 8102784:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8102786:	2300      	movs	r3, #0
 8102788:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810278a:	2300      	movs	r3, #0
 810278c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810278e:	2300      	movs	r3, #0
 8102790:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102792:	2300      	movs	r3, #0
 8102794:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8102796:	2300      	movs	r3, #0
 8102798:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810279a:	2300      	movs	r3, #0
 810279c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810279e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81027a2:	2200      	movs	r2, #0
 81027a4:	4619      	mov	r1, r3
 81027a6:	4818      	ldr	r0, [pc, #96]	@ (8102808 <MX_TIM1_Init+0x150>)
 81027a8:	f007 f86e 	bl	8109888 <HAL_TIM_PWM_ConfigChannel>
 81027ac:	4603      	mov	r3, r0
 81027ae:	2b00      	cmp	r3, #0
 81027b0:	d001      	beq.n	81027b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 81027b2:	f000 fa9b 	bl	8102cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81027b6:	2300      	movs	r3, #0
 81027b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81027ba:	2300      	movs	r3, #0
 81027bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81027be:	2300      	movs	r3, #0
 81027c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81027c2:	2300      	movs	r3, #0
 81027c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81027c6:	2300      	movs	r3, #0
 81027c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81027ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81027ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81027d0:	2300      	movs	r3, #0
 81027d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81027d4:	2300      	movs	r3, #0
 81027d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81027d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81027de:	2300      	movs	r3, #0
 81027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81027e2:	2300      	movs	r3, #0
 81027e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81027e6:	1d3b      	adds	r3, r7, #4
 81027e8:	4619      	mov	r1, r3
 81027ea:	4807      	ldr	r0, [pc, #28]	@ (8102808 <MX_TIM1_Init+0x150>)
 81027ec:	f007 ff4c 	bl	810a688 <HAL_TIMEx_ConfigBreakDeadTime>
 81027f0:	4603      	mov	r3, r0
 81027f2:	2b00      	cmp	r3, #0
 81027f4:	d001      	beq.n	81027fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 81027f6:	f000 fa79 	bl	8102cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81027fa:	4803      	ldr	r0, [pc, #12]	@ (8102808 <MX_TIM1_Init+0x150>)
 81027fc:	f000 fc10 	bl	8103020 <HAL_TIM_MspPostInit>

}
 8102800:	bf00      	nop
 8102802:	3768      	adds	r7, #104	@ 0x68
 8102804:	46bd      	mov	sp, r7
 8102806:	bd80      	pop	{r7, pc}
 8102808:	10000328 	.word	0x10000328
 810280c:	40010000 	.word	0x40010000

08102810 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8102810:	b580      	push	{r7, lr}
 8102812:	b088      	sub	sp, #32
 8102814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102816:	f107 0310 	add.w	r3, r7, #16
 810281a:	2200      	movs	r2, #0
 810281c:	601a      	str	r2, [r3, #0]
 810281e:	605a      	str	r2, [r3, #4]
 8102820:	609a      	str	r2, [r3, #8]
 8102822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102824:	1d3b      	adds	r3, r7, #4
 8102826:	2200      	movs	r2, #0
 8102828:	601a      	str	r2, [r3, #0]
 810282a:	605a      	str	r2, [r3, #4]
 810282c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810282e:	4b1e      	ldr	r3, [pc, #120]	@ (81028a8 <MX_TIM2_Init+0x98>)
 8102830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8102834:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8102836:	4b1c      	ldr	r3, [pc, #112]	@ (81028a8 <MX_TIM2_Init+0x98>)
 8102838:	22c7      	movs	r2, #199	@ 0xc7
 810283a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810283c:	4b1a      	ldr	r3, [pc, #104]	@ (81028a8 <MX_TIM2_Init+0x98>)
 810283e:	2200      	movs	r2, #0
 8102840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8102842:	4b19      	ldr	r3, [pc, #100]	@ (81028a8 <MX_TIM2_Init+0x98>)
 8102844:	f242 720f 	movw	r2, #9999	@ 0x270f
 8102848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810284a:	4b17      	ldr	r3, [pc, #92]	@ (81028a8 <MX_TIM2_Init+0x98>)
 810284c:	2200      	movs	r2, #0
 810284e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102850:	4b15      	ldr	r3, [pc, #84]	@ (81028a8 <MX_TIM2_Init+0x98>)
 8102852:	2200      	movs	r2, #0
 8102854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8102856:	4814      	ldr	r0, [pc, #80]	@ (81028a8 <MX_TIM2_Init+0x98>)
 8102858:	f006 fc28 	bl	81090ac <HAL_TIM_Base_Init>
 810285c:	4603      	mov	r3, r0
 810285e:	2b00      	cmp	r3, #0
 8102860:	d001      	beq.n	8102866 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8102862:	f000 fa43 	bl	8102cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810286a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 810286c:	f107 0310 	add.w	r3, r7, #16
 8102870:	4619      	mov	r1, r3
 8102872:	480d      	ldr	r0, [pc, #52]	@ (81028a8 <MX_TIM2_Init+0x98>)
 8102874:	f007 f91c 	bl	8109ab0 <HAL_TIM_ConfigClockSource>
 8102878:	4603      	mov	r3, r0
 810287a:	2b00      	cmp	r3, #0
 810287c:	d001      	beq.n	8102882 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 810287e:	f000 fa35 	bl	8102cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102882:	2300      	movs	r3, #0
 8102884:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102886:	2300      	movs	r3, #0
 8102888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810288a:	1d3b      	adds	r3, r7, #4
 810288c:	4619      	mov	r1, r3
 810288e:	4806      	ldr	r0, [pc, #24]	@ (81028a8 <MX_TIM2_Init+0x98>)
 8102890:	f007 fe6c 	bl	810a56c <HAL_TIMEx_MasterConfigSynchronization>
 8102894:	4603      	mov	r3, r0
 8102896:	2b00      	cmp	r3, #0
 8102898:	d001      	beq.n	810289e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 810289a:	f000 fa27 	bl	8102cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 810289e:	bf00      	nop
 81028a0:	3720      	adds	r7, #32
 81028a2:	46bd      	mov	sp, r7
 81028a4:	bd80      	pop	{r7, pc}
 81028a6:	bf00      	nop
 81028a8:	10000374 	.word	0x10000374

081028ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81028ac:	b580      	push	{r7, lr}
 81028ae:	b08e      	sub	sp, #56	@ 0x38
 81028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81028b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81028b6:	2200      	movs	r2, #0
 81028b8:	601a      	str	r2, [r3, #0]
 81028ba:	605a      	str	r2, [r3, #4]
 81028bc:	609a      	str	r2, [r3, #8]
 81028be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81028c0:	f107 031c 	add.w	r3, r7, #28
 81028c4:	2200      	movs	r2, #0
 81028c6:	601a      	str	r2, [r3, #0]
 81028c8:	605a      	str	r2, [r3, #4]
 81028ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81028cc:	463b      	mov	r3, r7
 81028ce:	2200      	movs	r2, #0
 81028d0:	601a      	str	r2, [r3, #0]
 81028d2:	605a      	str	r2, [r3, #4]
 81028d4:	609a      	str	r2, [r3, #8]
 81028d6:	60da      	str	r2, [r3, #12]
 81028d8:	611a      	str	r2, [r3, #16]
 81028da:	615a      	str	r2, [r3, #20]
 81028dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81028de:	4b2d      	ldr	r3, [pc, #180]	@ (8102994 <MX_TIM3_Init+0xe8>)
 81028e0:	4a2d      	ldr	r2, [pc, #180]	@ (8102998 <MX_TIM3_Init+0xec>)
 81028e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 81028e4:	4b2b      	ldr	r3, [pc, #172]	@ (8102994 <MX_TIM3_Init+0xe8>)
 81028e6:	22c7      	movs	r2, #199	@ 0xc7
 81028e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81028ea:	4b2a      	ldr	r3, [pc, #168]	@ (8102994 <MX_TIM3_Init+0xe8>)
 81028ec:	2200      	movs	r2, #0
 81028ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 81028f0:	4b28      	ldr	r3, [pc, #160]	@ (8102994 <MX_TIM3_Init+0xe8>)
 81028f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81028f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81028f8:	4b26      	ldr	r3, [pc, #152]	@ (8102994 <MX_TIM3_Init+0xe8>)
 81028fa:	2200      	movs	r2, #0
 81028fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81028fe:	4b25      	ldr	r3, [pc, #148]	@ (8102994 <MX_TIM3_Init+0xe8>)
 8102900:	2200      	movs	r2, #0
 8102902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8102904:	4823      	ldr	r0, [pc, #140]	@ (8102994 <MX_TIM3_Init+0xe8>)
 8102906:	f006 fbd1 	bl	81090ac <HAL_TIM_Base_Init>
 810290a:	4603      	mov	r3, r0
 810290c:	2b00      	cmp	r3, #0
 810290e:	d001      	beq.n	8102914 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8102910:	f000 f9ec 	bl	8102cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102918:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 810291a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810291e:	4619      	mov	r1, r3
 8102920:	481c      	ldr	r0, [pc, #112]	@ (8102994 <MX_TIM3_Init+0xe8>)
 8102922:	f007 f8c5 	bl	8109ab0 <HAL_TIM_ConfigClockSource>
 8102926:	4603      	mov	r3, r0
 8102928:	2b00      	cmp	r3, #0
 810292a:	d001      	beq.n	8102930 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 810292c:	f000 f9de 	bl	8102cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102930:	4818      	ldr	r0, [pc, #96]	@ (8102994 <MX_TIM3_Init+0xe8>)
 8102932:	f006 fc8b 	bl	810924c <HAL_TIM_PWM_Init>
 8102936:	4603      	mov	r3, r0
 8102938:	2b00      	cmp	r3, #0
 810293a:	d001      	beq.n	8102940 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 810293c:	f000 f9d6 	bl	8102cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102940:	2300      	movs	r3, #0
 8102942:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102944:	2300      	movs	r3, #0
 8102946:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102948:	f107 031c 	add.w	r3, r7, #28
 810294c:	4619      	mov	r1, r3
 810294e:	4811      	ldr	r0, [pc, #68]	@ (8102994 <MX_TIM3_Init+0xe8>)
 8102950:	f007 fe0c 	bl	810a56c <HAL_TIMEx_MasterConfigSynchronization>
 8102954:	4603      	mov	r3, r0
 8102956:	2b00      	cmp	r3, #0
 8102958:	d001      	beq.n	810295e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 810295a:	f000 f9c7 	bl	8102cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810295e:	2360      	movs	r3, #96	@ 0x60
 8102960:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8102962:	2300      	movs	r3, #0
 8102964:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102966:	2300      	movs	r3, #0
 8102968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810296a:	2300      	movs	r3, #0
 810296c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810296e:	463b      	mov	r3, r7
 8102970:	2200      	movs	r2, #0
 8102972:	4619      	mov	r1, r3
 8102974:	4807      	ldr	r0, [pc, #28]	@ (8102994 <MX_TIM3_Init+0xe8>)
 8102976:	f006 ff87 	bl	8109888 <HAL_TIM_PWM_ConfigChannel>
 810297a:	4603      	mov	r3, r0
 810297c:	2b00      	cmp	r3, #0
 810297e:	d001      	beq.n	8102984 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8102980:	f000 f9b4 	bl	8102cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8102984:	4803      	ldr	r0, [pc, #12]	@ (8102994 <MX_TIM3_Init+0xe8>)
 8102986:	f000 fb4b 	bl	8103020 <HAL_TIM_MspPostInit>

}
 810298a:	bf00      	nop
 810298c:	3738      	adds	r7, #56	@ 0x38
 810298e:	46bd      	mov	sp, r7
 8102990:	bd80      	pop	{r7, pc}
 8102992:	bf00      	nop
 8102994:	100003c0 	.word	0x100003c0
 8102998:	40000400 	.word	0x40000400

0810299c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 810299c:	b580      	push	{r7, lr}
 810299e:	b08c      	sub	sp, #48	@ 0x30
 81029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81029a2:	f107 030c 	add.w	r3, r7, #12
 81029a6:	2224      	movs	r2, #36	@ 0x24
 81029a8:	2100      	movs	r1, #0
 81029aa:	4618      	mov	r0, r3
 81029ac:	f00a fca8 	bl	810d300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81029b0:	463b      	mov	r3, r7
 81029b2:	2200      	movs	r2, #0
 81029b4:	601a      	str	r2, [r3, #0]
 81029b6:	605a      	str	r2, [r3, #4]
 81029b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81029ba:	4b21      	ldr	r3, [pc, #132]	@ (8102a40 <MX_TIM4_Init+0xa4>)
 81029bc:	4a21      	ldr	r2, [pc, #132]	@ (8102a44 <MX_TIM4_Init+0xa8>)
 81029be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81029c0:	4b1f      	ldr	r3, [pc, #124]	@ (8102a40 <MX_TIM4_Init+0xa4>)
 81029c2:	2200      	movs	r2, #0
 81029c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8102a40 <MX_TIM4_Init+0xa4>)
 81029c8:	2200      	movs	r2, #0
 81029ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3423-1;
 81029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8102a40 <MX_TIM4_Init+0xa4>)
 81029ce:	f640 525e 	movw	r2, #3422	@ 0xd5e
 81029d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81029d4:	4b1a      	ldr	r3, [pc, #104]	@ (8102a40 <MX_TIM4_Init+0xa4>)
 81029d6:	2200      	movs	r2, #0
 81029d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81029da:	4b19      	ldr	r3, [pc, #100]	@ (8102a40 <MX_TIM4_Init+0xa4>)
 81029dc:	2200      	movs	r2, #0
 81029de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 81029e0:	2301      	movs	r3, #1
 81029e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81029e4:	2300      	movs	r3, #0
 81029e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81029e8:	2301      	movs	r3, #1
 81029ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81029ec:	2300      	movs	r3, #0
 81029ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 81029f0:	2300      	movs	r3, #0
 81029f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81029f4:	2300      	movs	r3, #0
 81029f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81029f8:	2301      	movs	r3, #1
 81029fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81029fc:	2300      	movs	r3, #0
 81029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8102a00:	2300      	movs	r3, #0
 8102a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102a04:	f107 030c 	add.w	r3, r7, #12
 8102a08:	4619      	mov	r1, r3
 8102a0a:	480d      	ldr	r0, [pc, #52]	@ (8102a40 <MX_TIM4_Init+0xa4>)
 8102a0c:	f006 fd8e 	bl	810952c <HAL_TIM_Encoder_Init>
 8102a10:	4603      	mov	r3, r0
 8102a12:	2b00      	cmp	r3, #0
 8102a14:	d001      	beq.n	8102a1a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8102a16:	f000 f969 	bl	8102cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102a1a:	2300      	movs	r3, #0
 8102a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102a1e:	2300      	movs	r3, #0
 8102a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8102a22:	463b      	mov	r3, r7
 8102a24:	4619      	mov	r1, r3
 8102a26:	4806      	ldr	r0, [pc, #24]	@ (8102a40 <MX_TIM4_Init+0xa4>)
 8102a28:	f007 fda0 	bl	810a56c <HAL_TIMEx_MasterConfigSynchronization>
 8102a2c:	4603      	mov	r3, r0
 8102a2e:	2b00      	cmp	r3, #0
 8102a30:	d001      	beq.n	8102a36 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8102a32:	f000 f95b 	bl	8102cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8102a36:	bf00      	nop
 8102a38:	3730      	adds	r7, #48	@ 0x30
 8102a3a:	46bd      	mov	sp, r7
 8102a3c:	bd80      	pop	{r7, pc}
 8102a3e:	bf00      	nop
 8102a40:	1000040c 	.word	0x1000040c
 8102a44:	40000800 	.word	0x40000800

08102a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8102a48:	b580      	push	{r7, lr}
 8102a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102a4c:	4b22      	ldr	r3, [pc, #136]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a4e:	4a23      	ldr	r2, [pc, #140]	@ (8102adc <MX_USART3_UART_Init+0x94>)
 8102a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102a52:	4b21      	ldr	r3, [pc, #132]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8102a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a5c:	2200      	movs	r2, #0
 8102a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102a60:	4b1d      	ldr	r3, [pc, #116]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a62:	2200      	movs	r2, #0
 8102a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102a66:	4b1c      	ldr	r3, [pc, #112]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a68:	2200      	movs	r2, #0
 8102a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a6e:	220c      	movs	r2, #12
 8102a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102a72:	4b19      	ldr	r3, [pc, #100]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a74:	2200      	movs	r2, #0
 8102a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102a78:	4b17      	ldr	r3, [pc, #92]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a7a:	2200      	movs	r2, #0
 8102a7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102a7e:	4b16      	ldr	r3, [pc, #88]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a80:	2200      	movs	r2, #0
 8102a82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102a84:	4b14      	ldr	r3, [pc, #80]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a86:	2200      	movs	r2, #0
 8102a88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102a8a:	4b13      	ldr	r3, [pc, #76]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a8c:	2200      	movs	r2, #0
 8102a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102a90:	4811      	ldr	r0, [pc, #68]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102a92:	f007 fe95 	bl	810a7c0 <HAL_UART_Init>
 8102a96:	4603      	mov	r3, r0
 8102a98:	2b00      	cmp	r3, #0
 8102a9a:	d001      	beq.n	8102aa0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102a9c:	f000 f926 	bl	8102cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102aa0:	2100      	movs	r1, #0
 8102aa2:	480d      	ldr	r0, [pc, #52]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102aa4:	f008 fff2 	bl	810ba8c <HAL_UARTEx_SetTxFifoThreshold>
 8102aa8:	4603      	mov	r3, r0
 8102aaa:	2b00      	cmp	r3, #0
 8102aac:	d001      	beq.n	8102ab2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102aae:	f000 f91d 	bl	8102cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102ab2:	2100      	movs	r1, #0
 8102ab4:	4808      	ldr	r0, [pc, #32]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102ab6:	f009 f827 	bl	810bb08 <HAL_UARTEx_SetRxFifoThreshold>
 8102aba:	4603      	mov	r3, r0
 8102abc:	2b00      	cmp	r3, #0
 8102abe:	d001      	beq.n	8102ac4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102ac0:	f000 f914 	bl	8102cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102ac4:	4804      	ldr	r0, [pc, #16]	@ (8102ad8 <MX_USART3_UART_Init+0x90>)
 8102ac6:	f008 ffa8 	bl	810ba1a <HAL_UARTEx_DisableFifoMode>
 8102aca:	4603      	mov	r3, r0
 8102acc:	2b00      	cmp	r3, #0
 8102ace:	d001      	beq.n	8102ad4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102ad0:	f000 f90c 	bl	8102cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102ad4:	bf00      	nop
 8102ad6:	bd80      	pop	{r7, pc}
 8102ad8:	10000458 	.word	0x10000458
 8102adc:	40004800 	.word	0x40004800

08102ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8102ae0:	b580      	push	{r7, lr}
 8102ae2:	b08a      	sub	sp, #40	@ 0x28
 8102ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ae6:	f107 0314 	add.w	r3, r7, #20
 8102aea:	2200      	movs	r2, #0
 8102aec:	601a      	str	r2, [r3, #0]
 8102aee:	605a      	str	r2, [r3, #4]
 8102af0:	609a      	str	r2, [r3, #8]
 8102af2:	60da      	str	r2, [r3, #12]
 8102af4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102af6:	4b46      	ldr	r3, [pc, #280]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102afc:	4a44      	ldr	r2, [pc, #272]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102afe:	f043 0301 	orr.w	r3, r3, #1
 8102b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102b06:	4b42      	ldr	r3, [pc, #264]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b0c:	f003 0301 	and.w	r3, r3, #1
 8102b10:	613b      	str	r3, [r7, #16]
 8102b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8102b14:	4b3e      	ldr	r3, [pc, #248]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b1c:	f043 0320 	orr.w	r3, r3, #32
 8102b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102b24:	4b3a      	ldr	r3, [pc, #232]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b2a:	f003 0320 	and.w	r3, r3, #32
 8102b2e:	60fb      	str	r3, [r7, #12]
 8102b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102b32:	4b37      	ldr	r3, [pc, #220]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b38:	4a35      	ldr	r2, [pc, #212]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b3a:	f043 0310 	orr.w	r3, r3, #16
 8102b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102b42:	4b33      	ldr	r3, [pc, #204]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b48:	f003 0310 	and.w	r3, r3, #16
 8102b4c:	60bb      	str	r3, [r7, #8]
 8102b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102b50:	4b2f      	ldr	r3, [pc, #188]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b56:	4a2e      	ldr	r2, [pc, #184]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b58:	f043 0302 	orr.w	r3, r3, #2
 8102b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102b60:	4b2b      	ldr	r3, [pc, #172]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b66:	f003 0302 	and.w	r3, r3, #2
 8102b6a:	607b      	str	r3, [r7, #4]
 8102b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102b6e:	4b28      	ldr	r3, [pc, #160]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b74:	4a26      	ldr	r2, [pc, #152]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b76:	f043 0308 	orr.w	r3, r3, #8
 8102b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102b7e:	4b24      	ldr	r3, [pc, #144]	@ (8102c10 <MX_GPIO_Init+0x130>)
 8102b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102b84:	f003 0308 	and.w	r3, r3, #8
 8102b88:	603b      	str	r3, [r7, #0]
 8102b8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8102b8c:	2200      	movs	r2, #0
 8102b8e:	2130      	movs	r1, #48	@ 0x30
 8102b90:	4820      	ldr	r0, [pc, #128]	@ (8102c14 <MX_GPIO_Init+0x134>)
 8102b92:	f002 fce5 	bl	8105560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8102b96:	2200      	movs	r2, #0
 8102b98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8102b9c:	481e      	ldr	r0, [pc, #120]	@ (8102c18 <MX_GPIO_Init+0x138>)
 8102b9e:	f002 fcdf 	bl	8105560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8102ba2:	2308      	movs	r3, #8
 8102ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8102ba6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8102baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102bac:	2300      	movs	r3, #0
 8102bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102bb0:	f107 0314 	add.w	r3, r7, #20
 8102bb4:	4619      	mov	r1, r3
 8102bb6:	4817      	ldr	r0, [pc, #92]	@ (8102c14 <MX_GPIO_Init+0x134>)
 8102bb8:	f002 fb22 	bl	8105200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8102bbc:	2330      	movs	r3, #48	@ 0x30
 8102bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102bc0:	2301      	movs	r3, #1
 8102bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102bc4:	2300      	movs	r3, #0
 8102bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102bc8:	2300      	movs	r3, #0
 8102bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102bcc:	f107 0314 	add.w	r3, r7, #20
 8102bd0:	4619      	mov	r1, r3
 8102bd2:	4810      	ldr	r0, [pc, #64]	@ (8102c14 <MX_GPIO_Init+0x134>)
 8102bd4:	f002 fb14 	bl	8105200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8102bd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102bde:	2301      	movs	r3, #1
 8102be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102be2:	2300      	movs	r3, #0
 8102be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102be6:	2300      	movs	r3, #0
 8102be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102bea:	f107 0314 	add.w	r3, r7, #20
 8102bee:	4619      	mov	r1, r3
 8102bf0:	4809      	ldr	r0, [pc, #36]	@ (8102c18 <MX_GPIO_Init+0x138>)
 8102bf2:	f002 fb05 	bl	8105200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8102bf6:	2200      	movs	r2, #0
 8102bf8:	2100      	movs	r1, #0
 8102bfa:	2009      	movs	r0, #9
 8102bfc:	f002 fab7 	bl	810516e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8102c00:	2009      	movs	r0, #9
 8102c02:	f002 face 	bl	81051a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8102c06:	bf00      	nop
 8102c08:	3728      	adds	r7, #40	@ 0x28
 8102c0a:	46bd      	mov	sp, r7
 8102c0c:	bd80      	pop	{r7, pc}
 8102c0e:	bf00      	nop
 8102c10:	58024400 	.word	0x58024400
 8102c14:	58020000 	.word	0x58020000
 8102c18:	58020400 	.word	0x58020400

08102c1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8102c1c:	b480      	push	{r7}
 8102c1e:	b083      	sub	sp, #12
 8102c20:	af00      	add	r7, sp, #0
 8102c22:	4603      	mov	r3, r0
 8102c24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8102c26:	88fb      	ldrh	r3, [r7, #6]
 8102c28:	2b08      	cmp	r3, #8
 8102c2a:	d102      	bne.n	8102c32 <HAL_GPIO_EXTI_Callback+0x16>
		flag_BNO055_Data_Ready = 1;
 8102c2c:	4b04      	ldr	r3, [pc, #16]	@ (8102c40 <HAL_GPIO_EXTI_Callback+0x24>)
 8102c2e:	2201      	movs	r2, #1
 8102c30:	601a      	str	r2, [r3, #0]
	}
}
 8102c32:	bf00      	nop
 8102c34:	370c      	adds	r7, #12
 8102c36:	46bd      	mov	sp, r7
 8102c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c3c:	4770      	bx	lr
 8102c3e:	bf00      	nop
 8102c40:	1000056c 	.word	0x1000056c

08102c44 <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8102c44:	b480      	push	{r7}
 8102c46:	b083      	sub	sp, #12
 8102c48:	af00      	add	r7, sp, #0
 8102c4a:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8102c84 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8102c50:	4293      	cmp	r3, r2
 8102c52:	d111      	bne.n	8102c78 <HAL_TIM_PeriodElapsedCallback+0x34>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 8102c54:	4b0c      	ldr	r3, [pc, #48]	@ (8102c88 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8102c56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8102c5a:	601a      	str	r2, [r3, #0]
		n_ref++;
 8102c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8102c8c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	3301      	adds	r3, #1
 8102c62:	4a0a      	ldr	r2, [pc, #40]	@ (8102c8c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102c64:	6013      	str	r3, [r2, #0]

		if (n_ref > 100 * 50)
 8102c66:	4b09      	ldr	r3, [pc, #36]	@ (8102c8c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102c68:	681b      	ldr	r3, [r3, #0]
 8102c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8102c6e:	4293      	cmp	r3, r2
 8102c70:	dd02      	ble.n	8102c78 <HAL_TIM_PeriodElapsedCallback+0x34>
			n_ref = 0;
 8102c72:	4b06      	ldr	r3, [pc, #24]	@ (8102c8c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102c74:	2200      	movs	r2, #0
 8102c76:	601a      	str	r2, [r3, #0]

	}
}
 8102c78:	bf00      	nop
 8102c7a:	370c      	adds	r7, #12
 8102c7c:	46bd      	mov	sp, r7
 8102c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c82:	4770      	bx	lr
 8102c84:	10000374 	.word	0x10000374
 8102c88:	10000570 	.word	0x10000570
 8102c8c:	100005d8 	.word	0x100005d8

08102c90 <__io_putchar>:
//*******************

//******************
//INPUT E OUTPUT USART
int __io_putchar(int ch) {
 8102c90:	b580      	push	{r7, lr}
 8102c92:	b082      	sub	sp, #8
 8102c94:	af00      	add	r7, sp, #0
 8102c96:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8102c98:	1d39      	adds	r1, r7, #4
 8102c9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102c9e:	2201      	movs	r2, #1
 8102ca0:	4803      	ldr	r0, [pc, #12]	@ (8102cb0 <__io_putchar+0x20>)
 8102ca2:	f007 fddd 	bl	810a860 <HAL_UART_Transmit>
	return ch;
 8102ca6:	687b      	ldr	r3, [r7, #4]
}
 8102ca8:	4618      	mov	r0, r3
 8102caa:	3708      	adds	r7, #8
 8102cac:	46bd      	mov	sp, r7
 8102cae:	bd80      	pop	{r7, pc}
 8102cb0:	10000458 	.word	0x10000458

08102cb4 <__io_getchar>:
int __io_getchar(void) {
 8102cb4:	b580      	push	{r7, lr}
 8102cb6:	b082      	sub	sp, #8
 8102cb8:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8102cba:	4b0b      	ldr	r3, [pc, #44]	@ (8102ce8 <__io_getchar+0x34>)
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	2208      	movs	r2, #8
 8102cc0:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8102cc2:	1df9      	adds	r1, r7, #7
 8102cc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102cc8:	2201      	movs	r2, #1
 8102cca:	4807      	ldr	r0, [pc, #28]	@ (8102ce8 <__io_getchar+0x34>)
 8102ccc:	f007 fe56 	bl	810a97c <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8102cd0:	1df9      	adds	r1, r7, #7
 8102cd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102cd6:	2201      	movs	r2, #1
 8102cd8:	4803      	ldr	r0, [pc, #12]	@ (8102ce8 <__io_getchar+0x34>)
 8102cda:	f007 fdc1 	bl	810a860 <HAL_UART_Transmit>
	return ch;
 8102cde:	79fb      	ldrb	r3, [r7, #7]
}
 8102ce0:	4618      	mov	r0, r3
 8102ce2:	3708      	adds	r7, #8
 8102ce4:	46bd      	mov	sp, r7
 8102ce6:	bd80      	pop	{r7, pc}
 8102ce8:	10000458 	.word	0x10000458

08102cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102cec:	b480      	push	{r7}
 8102cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102cf0:	b672      	cpsid	i
}
 8102cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8102cf4:	bf00      	nop
 8102cf6:	e7fd      	b.n	8102cf4 <Error_Handler+0x8>

08102cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102cf8:	b480      	push	{r7}
 8102cfa:	b083      	sub	sp, #12
 8102cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8102d28 <HAL_MspInit+0x30>)
 8102d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102d04:	4a08      	ldr	r2, [pc, #32]	@ (8102d28 <HAL_MspInit+0x30>)
 8102d06:	f043 0302 	orr.w	r3, r3, #2
 8102d0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102d0e:	4b06      	ldr	r3, [pc, #24]	@ (8102d28 <HAL_MspInit+0x30>)
 8102d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102d14:	f003 0302 	and.w	r3, r3, #2
 8102d18:	607b      	str	r3, [r7, #4]
 8102d1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102d1c:	bf00      	nop
 8102d1e:	370c      	adds	r7, #12
 8102d20:	46bd      	mov	sp, r7
 8102d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d26:	4770      	bx	lr
 8102d28:	58024400 	.word	0x58024400

08102d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8102d2c:	b580      	push	{r7, lr}
 8102d2e:	b0ba      	sub	sp, #232	@ 0xe8
 8102d30:	af00      	add	r7, sp, #0
 8102d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102d34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102d38:	2200      	movs	r2, #0
 8102d3a:	601a      	str	r2, [r3, #0]
 8102d3c:	605a      	str	r2, [r3, #4]
 8102d3e:	609a      	str	r2, [r3, #8]
 8102d40:	60da      	str	r2, [r3, #12]
 8102d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102d44:	f107 0310 	add.w	r3, r7, #16
 8102d48:	22c0      	movs	r2, #192	@ 0xc0
 8102d4a:	2100      	movs	r1, #0
 8102d4c:	4618      	mov	r0, r3
 8102d4e:	f00a fad7 	bl	810d300 <memset>
  if(hadc->Instance==ADC1)
 8102d52:	687b      	ldr	r3, [r7, #4]
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	4a2c      	ldr	r2, [pc, #176]	@ (8102e08 <HAL_ADC_MspInit+0xdc>)
 8102d58:	4293      	cmp	r3, r2
 8102d5a:	d151      	bne.n	8102e00 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8102d5c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8102d60:	f04f 0300 	mov.w	r3, #0
 8102d64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8102d68:	2301      	movs	r3, #1
 8102d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8102d6c:	2312      	movs	r3, #18
 8102d6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8102d70:	2302      	movs	r3, #2
 8102d72:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8102d74:	2302      	movs	r3, #2
 8102d76:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8102d78:	2302      	movs	r3, #2
 8102d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8102d7c:	23c0      	movs	r3, #192	@ 0xc0
 8102d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8102d80:	2320      	movs	r3, #32
 8102d82:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8102d84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8102d88:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8102d8a:	2300      	movs	r3, #0
 8102d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102d90:	f107 0310 	add.w	r3, r7, #16
 8102d94:	4618      	mov	r0, r3
 8102d96:	f003 fc8b 	bl	81066b0 <HAL_RCCEx_PeriphCLKConfig>
 8102d9a:	4603      	mov	r3, r0
 8102d9c:	2b00      	cmp	r3, #0
 8102d9e:	d001      	beq.n	8102da4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8102da0:	f7ff ffa4 	bl	8102cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8102da4:	4b19      	ldr	r3, [pc, #100]	@ (8102e0c <HAL_ADC_MspInit+0xe0>)
 8102da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102daa:	4a18      	ldr	r2, [pc, #96]	@ (8102e0c <HAL_ADC_MspInit+0xe0>)
 8102dac:	f043 0320 	orr.w	r3, r3, #32
 8102db0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102db4:	4b15      	ldr	r3, [pc, #84]	@ (8102e0c <HAL_ADC_MspInit+0xe0>)
 8102db6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102dba:	f003 0320 	and.w	r3, r3, #32
 8102dbe:	60fb      	str	r3, [r7, #12]
 8102dc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102dc2:	4b12      	ldr	r3, [pc, #72]	@ (8102e0c <HAL_ADC_MspInit+0xe0>)
 8102dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102dc8:	4a10      	ldr	r2, [pc, #64]	@ (8102e0c <HAL_ADC_MspInit+0xe0>)
 8102dca:	f043 0320 	orr.w	r3, r3, #32
 8102dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8102e0c <HAL_ADC_MspInit+0xe0>)
 8102dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102dd8:	f003 0320 	and.w	r3, r3, #32
 8102ddc:	60bb      	str	r3, [r7, #8]
 8102dde:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8102de0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102de4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8102de8:	2303      	movs	r3, #3
 8102dea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102dee:	2300      	movs	r3, #0
 8102df0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8102df4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102df8:	4619      	mov	r1, r3
 8102dfa:	4805      	ldr	r0, [pc, #20]	@ (8102e10 <HAL_ADC_MspInit+0xe4>)
 8102dfc:	f002 fa00 	bl	8105200 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8102e00:	bf00      	nop
 8102e02:	37e8      	adds	r7, #232	@ 0xe8
 8102e04:	46bd      	mov	sp, r7
 8102e06:	bd80      	pop	{r7, pc}
 8102e08:	40022000 	.word	0x40022000
 8102e0c:	58024400 	.word	0x58024400
 8102e10:	58021400 	.word	0x58021400

08102e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102e14:	b580      	push	{r7, lr}
 8102e16:	b0ba      	sub	sp, #232	@ 0xe8
 8102e18:	af00      	add	r7, sp, #0
 8102e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102e1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102e20:	2200      	movs	r2, #0
 8102e22:	601a      	str	r2, [r3, #0]
 8102e24:	605a      	str	r2, [r3, #4]
 8102e26:	609a      	str	r2, [r3, #8]
 8102e28:	60da      	str	r2, [r3, #12]
 8102e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102e2c:	f107 0310 	add.w	r3, r7, #16
 8102e30:	22c0      	movs	r2, #192	@ 0xc0
 8102e32:	2100      	movs	r1, #0
 8102e34:	4618      	mov	r0, r3
 8102e36:	f00a fa63 	bl	810d300 <memset>
  if(hi2c->Instance==I2C1)
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	4a26      	ldr	r2, [pc, #152]	@ (8102ed8 <HAL_I2C_MspInit+0xc4>)
 8102e40:	4293      	cmp	r3, r2
 8102e42:	d145      	bne.n	8102ed0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102e44:	f04f 0208 	mov.w	r2, #8
 8102e48:	f04f 0300 	mov.w	r3, #0
 8102e4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102e50:	2300      	movs	r3, #0
 8102e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102e56:	f107 0310 	add.w	r3, r7, #16
 8102e5a:	4618      	mov	r0, r3
 8102e5c:	f003 fc28 	bl	81066b0 <HAL_RCCEx_PeriphCLKConfig>
 8102e60:	4603      	mov	r3, r0
 8102e62:	2b00      	cmp	r3, #0
 8102e64:	d001      	beq.n	8102e6a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102e66:	f7ff ff41 	bl	8102cec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8102edc <HAL_I2C_MspInit+0xc8>)
 8102e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e70:	4a1a      	ldr	r2, [pc, #104]	@ (8102edc <HAL_I2C_MspInit+0xc8>)
 8102e72:	f043 0302 	orr.w	r3, r3, #2
 8102e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102e7a:	4b18      	ldr	r3, [pc, #96]	@ (8102edc <HAL_I2C_MspInit+0xc8>)
 8102e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e80:	f003 0302 	and.w	r3, r3, #2
 8102e84:	60fb      	str	r3, [r7, #12]
 8102e86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102e88:	23c0      	movs	r3, #192	@ 0xc0
 8102e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102e8e:	2312      	movs	r3, #18
 8102e90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e94:	2300      	movs	r3, #0
 8102e96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e9a:	2300      	movs	r3, #0
 8102e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102ea0:	2304      	movs	r3, #4
 8102ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ea6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102eaa:	4619      	mov	r1, r3
 8102eac:	480c      	ldr	r0, [pc, #48]	@ (8102ee0 <HAL_I2C_MspInit+0xcc>)
 8102eae:	f002 f9a7 	bl	8105200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8102edc <HAL_I2C_MspInit+0xc8>)
 8102eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102eb8:	4a08      	ldr	r2, [pc, #32]	@ (8102edc <HAL_I2C_MspInit+0xc8>)
 8102eba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8102ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102ec2:	4b06      	ldr	r3, [pc, #24]	@ (8102edc <HAL_I2C_MspInit+0xc8>)
 8102ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102ecc:	60bb      	str	r3, [r7, #8]
 8102ece:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102ed0:	bf00      	nop
 8102ed2:	37e8      	adds	r7, #232	@ 0xe8
 8102ed4:	46bd      	mov	sp, r7
 8102ed6:	bd80      	pop	{r7, pc}
 8102ed8:	40005400 	.word	0x40005400
 8102edc:	58024400 	.word	0x58024400
 8102ee0:	58020400 	.word	0x58020400

08102ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102ee4:	b580      	push	{r7, lr}
 8102ee6:	b086      	sub	sp, #24
 8102ee8:	af00      	add	r7, sp, #0
 8102eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8102eec:	687b      	ldr	r3, [r7, #4]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	4a23      	ldr	r2, [pc, #140]	@ (8102f80 <HAL_TIM_Base_MspInit+0x9c>)
 8102ef2:	4293      	cmp	r3, r2
 8102ef4:	d10f      	bne.n	8102f16 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102ef6:	4b23      	ldr	r3, [pc, #140]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102efc:	4a21      	ldr	r2, [pc, #132]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102efe:	f043 0301 	orr.w	r3, r3, #1
 8102f02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102f06:	4b1f      	ldr	r3, [pc, #124]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102f0c:	f003 0301 	and.w	r3, r3, #1
 8102f10:	617b      	str	r3, [r7, #20]
 8102f12:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8102f14:	e030      	b.n	8102f78 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	681b      	ldr	r3, [r3, #0]
 8102f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102f1e:	d117      	bne.n	8102f50 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102f20:	4b18      	ldr	r3, [pc, #96]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102f22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102f26:	4a17      	ldr	r2, [pc, #92]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102f28:	f043 0301 	orr.w	r3, r3, #1
 8102f2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102f30:	4b14      	ldr	r3, [pc, #80]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102f36:	f003 0301 	and.w	r3, r3, #1
 8102f3a:	613b      	str	r3, [r7, #16]
 8102f3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102f3e:	2200      	movs	r2, #0
 8102f40:	2100      	movs	r1, #0
 8102f42:	201c      	movs	r0, #28
 8102f44:	f002 f913 	bl	810516e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102f48:	201c      	movs	r0, #28
 8102f4a:	f002 f92a 	bl	81051a2 <HAL_NVIC_EnableIRQ>
}
 8102f4e:	e013      	b.n	8102f78 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	681b      	ldr	r3, [r3, #0]
 8102f54:	4a0c      	ldr	r2, [pc, #48]	@ (8102f88 <HAL_TIM_Base_MspInit+0xa4>)
 8102f56:	4293      	cmp	r3, r2
 8102f58:	d10e      	bne.n	8102f78 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102f60:	4a08      	ldr	r2, [pc, #32]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102f62:	f043 0302 	orr.w	r3, r3, #2
 8102f66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102f6a:	4b06      	ldr	r3, [pc, #24]	@ (8102f84 <HAL_TIM_Base_MspInit+0xa0>)
 8102f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102f70:	f003 0302 	and.w	r3, r3, #2
 8102f74:	60fb      	str	r3, [r7, #12]
 8102f76:	68fb      	ldr	r3, [r7, #12]
}
 8102f78:	bf00      	nop
 8102f7a:	3718      	adds	r7, #24
 8102f7c:	46bd      	mov	sp, r7
 8102f7e:	bd80      	pop	{r7, pc}
 8102f80:	40010000 	.word	0x40010000
 8102f84:	58024400 	.word	0x58024400
 8102f88:	40000400 	.word	0x40000400

08102f8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8102f8c:	b580      	push	{r7, lr}
 8102f8e:	b08a      	sub	sp, #40	@ 0x28
 8102f90:	af00      	add	r7, sp, #0
 8102f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102f94:	f107 0314 	add.w	r3, r7, #20
 8102f98:	2200      	movs	r2, #0
 8102f9a:	601a      	str	r2, [r3, #0]
 8102f9c:	605a      	str	r2, [r3, #4]
 8102f9e:	609a      	str	r2, [r3, #8]
 8102fa0:	60da      	str	r2, [r3, #12]
 8102fa2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8103014 <HAL_TIM_Encoder_MspInit+0x88>)
 8102faa:	4293      	cmp	r3, r2
 8102fac:	d12e      	bne.n	810300c <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102fae:	4b1a      	ldr	r3, [pc, #104]	@ (8103018 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102fb4:	4a18      	ldr	r2, [pc, #96]	@ (8103018 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102fb6:	f043 0304 	orr.w	r3, r3, #4
 8102fba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102fbe:	4b16      	ldr	r3, [pc, #88]	@ (8103018 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102fc4:	f003 0304 	and.w	r3, r3, #4
 8102fc8:	613b      	str	r3, [r7, #16]
 8102fca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102fcc:	4b12      	ldr	r3, [pc, #72]	@ (8103018 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102fd2:	4a11      	ldr	r2, [pc, #68]	@ (8103018 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102fd4:	f043 0308 	orr.w	r3, r3, #8
 8102fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8103018 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102fe2:	f003 0308 	and.w	r3, r3, #8
 8102fe6:	60fb      	str	r3, [r7, #12]
 8102fe8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8102fea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8102fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ff0:	2302      	movs	r3, #2
 8102ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ff4:	2300      	movs	r3, #0
 8102ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102ff8:	2300      	movs	r3, #0
 8102ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102ffc:	2302      	movs	r3, #2
 8102ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103000:	f107 0314 	add.w	r3, r7, #20
 8103004:	4619      	mov	r1, r3
 8103006:	4805      	ldr	r0, [pc, #20]	@ (810301c <HAL_TIM_Encoder_MspInit+0x90>)
 8103008:	f002 f8fa 	bl	8105200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 810300c:	bf00      	nop
 810300e:	3728      	adds	r7, #40	@ 0x28
 8103010:	46bd      	mov	sp, r7
 8103012:	bd80      	pop	{r7, pc}
 8103014:	40000800 	.word	0x40000800
 8103018:	58024400 	.word	0x58024400
 810301c:	58020c00 	.word	0x58020c00

08103020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8103020:	b580      	push	{r7, lr}
 8103022:	b08a      	sub	sp, #40	@ 0x28
 8103024:	af00      	add	r7, sp, #0
 8103026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103028:	f107 0314 	add.w	r3, r7, #20
 810302c:	2200      	movs	r2, #0
 810302e:	601a      	str	r2, [r3, #0]
 8103030:	605a      	str	r2, [r3, #4]
 8103032:	609a      	str	r2, [r3, #8]
 8103034:	60da      	str	r2, [r3, #12]
 8103036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	4a25      	ldr	r2, [pc, #148]	@ (81030d4 <HAL_TIM_MspPostInit+0xb4>)
 810303e:	4293      	cmp	r3, r2
 8103040:	d120      	bne.n	8103084 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8103042:	4b25      	ldr	r3, [pc, #148]	@ (81030d8 <HAL_TIM_MspPostInit+0xb8>)
 8103044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103048:	4a23      	ldr	r2, [pc, #140]	@ (81030d8 <HAL_TIM_MspPostInit+0xb8>)
 810304a:	f043 0310 	orr.w	r3, r3, #16
 810304e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103052:	4b21      	ldr	r3, [pc, #132]	@ (81030d8 <HAL_TIM_MspPostInit+0xb8>)
 8103054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103058:	f003 0310 	and.w	r3, r3, #16
 810305c:	613b      	str	r3, [r7, #16]
 810305e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8103060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103066:	2302      	movs	r3, #2
 8103068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810306a:	2300      	movs	r3, #0
 810306c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810306e:	2300      	movs	r3, #0
 8103070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8103072:	2301      	movs	r3, #1
 8103074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8103076:	f107 0314 	add.w	r3, r7, #20
 810307a:	4619      	mov	r1, r3
 810307c:	4817      	ldr	r0, [pc, #92]	@ (81030dc <HAL_TIM_MspPostInit+0xbc>)
 810307e:	f002 f8bf 	bl	8105200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8103082:	e023      	b.n	81030cc <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	4a15      	ldr	r2, [pc, #84]	@ (81030e0 <HAL_TIM_MspPostInit+0xc0>)
 810308a:	4293      	cmp	r3, r2
 810308c:	d11e      	bne.n	81030cc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810308e:	4b12      	ldr	r3, [pc, #72]	@ (81030d8 <HAL_TIM_MspPostInit+0xb8>)
 8103090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103094:	4a10      	ldr	r2, [pc, #64]	@ (81030d8 <HAL_TIM_MspPostInit+0xb8>)
 8103096:	f043 0301 	orr.w	r3, r3, #1
 810309a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810309e:	4b0e      	ldr	r3, [pc, #56]	@ (81030d8 <HAL_TIM_MspPostInit+0xb8>)
 81030a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81030a4:	f003 0301 	and.w	r3, r3, #1
 81030a8:	60fb      	str	r3, [r7, #12]
 81030aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81030ac:	2340      	movs	r3, #64	@ 0x40
 81030ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81030b0:	2302      	movs	r3, #2
 81030b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81030b4:	2300      	movs	r3, #0
 81030b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81030b8:	2300      	movs	r3, #0
 81030ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81030bc:	2302      	movs	r3, #2
 81030be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81030c0:	f107 0314 	add.w	r3, r7, #20
 81030c4:	4619      	mov	r1, r3
 81030c6:	4807      	ldr	r0, [pc, #28]	@ (81030e4 <HAL_TIM_MspPostInit+0xc4>)
 81030c8:	f002 f89a 	bl	8105200 <HAL_GPIO_Init>
}
 81030cc:	bf00      	nop
 81030ce:	3728      	adds	r7, #40	@ 0x28
 81030d0:	46bd      	mov	sp, r7
 81030d2:	bd80      	pop	{r7, pc}
 81030d4:	40010000 	.word	0x40010000
 81030d8:	58024400 	.word	0x58024400
 81030dc:	58021000 	.word	0x58021000
 81030e0:	40000400 	.word	0x40000400
 81030e4:	58020000 	.word	0x58020000

081030e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81030e8:	b580      	push	{r7, lr}
 81030ea:	b0ba      	sub	sp, #232	@ 0xe8
 81030ec:	af00      	add	r7, sp, #0
 81030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81030f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81030f4:	2200      	movs	r2, #0
 81030f6:	601a      	str	r2, [r3, #0]
 81030f8:	605a      	str	r2, [r3, #4]
 81030fa:	609a      	str	r2, [r3, #8]
 81030fc:	60da      	str	r2, [r3, #12]
 81030fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103100:	f107 0310 	add.w	r3, r7, #16
 8103104:	22c0      	movs	r2, #192	@ 0xc0
 8103106:	2100      	movs	r1, #0
 8103108:	4618      	mov	r0, r3
 810310a:	f00a f8f9 	bl	810d300 <memset>
  if(huart->Instance==USART3)
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	681b      	ldr	r3, [r3, #0]
 8103112:	4a27      	ldr	r2, [pc, #156]	@ (81031b0 <HAL_UART_MspInit+0xc8>)
 8103114:	4293      	cmp	r3, r2
 8103116:	d146      	bne.n	81031a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8103118:	f04f 0202 	mov.w	r2, #2
 810311c:	f04f 0300 	mov.w	r3, #0
 8103120:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103124:	2300      	movs	r3, #0
 8103126:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810312a:	f107 0310 	add.w	r3, r7, #16
 810312e:	4618      	mov	r0, r3
 8103130:	f003 fabe 	bl	81066b0 <HAL_RCCEx_PeriphCLKConfig>
 8103134:	4603      	mov	r3, r0
 8103136:	2b00      	cmp	r3, #0
 8103138:	d001      	beq.n	810313e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810313a:	f7ff fdd7 	bl	8102cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810313e:	4b1d      	ldr	r3, [pc, #116]	@ (81031b4 <HAL_UART_MspInit+0xcc>)
 8103140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103144:	4a1b      	ldr	r2, [pc, #108]	@ (81031b4 <HAL_UART_MspInit+0xcc>)
 8103146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810314a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810314e:	4b19      	ldr	r3, [pc, #100]	@ (81031b4 <HAL_UART_MspInit+0xcc>)
 8103150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103154:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103158:	60fb      	str	r3, [r7, #12]
 810315a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810315c:	4b15      	ldr	r3, [pc, #84]	@ (81031b4 <HAL_UART_MspInit+0xcc>)
 810315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103162:	4a14      	ldr	r2, [pc, #80]	@ (81031b4 <HAL_UART_MspInit+0xcc>)
 8103164:	f043 0308 	orr.w	r3, r3, #8
 8103168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810316c:	4b11      	ldr	r3, [pc, #68]	@ (81031b4 <HAL_UART_MspInit+0xcc>)
 810316e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103172:	f003 0308 	and.w	r3, r3, #8
 8103176:	60bb      	str	r3, [r7, #8]
 8103178:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 810317a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810317e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103182:	2302      	movs	r3, #2
 8103184:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103188:	2300      	movs	r3, #0
 810318a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810318e:	2300      	movs	r3, #0
 8103190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103194:	2307      	movs	r3, #7
 8103196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810319a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810319e:	4619      	mov	r1, r3
 81031a0:	4805      	ldr	r0, [pc, #20]	@ (81031b8 <HAL_UART_MspInit+0xd0>)
 81031a2:	f002 f82d 	bl	8105200 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81031a6:	bf00      	nop
 81031a8:	37e8      	adds	r7, #232	@ 0xe8
 81031aa:	46bd      	mov	sp, r7
 81031ac:	bd80      	pop	{r7, pc}
 81031ae:	bf00      	nop
 81031b0:	40004800 	.word	0x40004800
 81031b4:	58024400 	.word	0x58024400
 81031b8:	58020c00 	.word	0x58020c00

081031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81031bc:	b480      	push	{r7}
 81031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81031c0:	bf00      	nop
 81031c2:	e7fd      	b.n	81031c0 <NMI_Handler+0x4>

081031c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81031c4:	b480      	push	{r7}
 81031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81031c8:	bf00      	nop
 81031ca:	e7fd      	b.n	81031c8 <HardFault_Handler+0x4>

081031cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81031cc:	b480      	push	{r7}
 81031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81031d0:	bf00      	nop
 81031d2:	e7fd      	b.n	81031d0 <MemManage_Handler+0x4>

081031d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81031d4:	b480      	push	{r7}
 81031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81031d8:	bf00      	nop
 81031da:	e7fd      	b.n	81031d8 <BusFault_Handler+0x4>

081031dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81031dc:	b480      	push	{r7}
 81031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81031e0:	bf00      	nop
 81031e2:	e7fd      	b.n	81031e0 <UsageFault_Handler+0x4>

081031e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81031e4:	b480      	push	{r7}
 81031e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81031e8:	bf00      	nop
 81031ea:	46bd      	mov	sp, r7
 81031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031f0:	4770      	bx	lr

081031f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81031f2:	b480      	push	{r7}
 81031f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81031f6:	bf00      	nop
 81031f8:	46bd      	mov	sp, r7
 81031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031fe:	4770      	bx	lr

08103200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8103200:	b480      	push	{r7}
 8103202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8103204:	bf00      	nop
 8103206:	46bd      	mov	sp, r7
 8103208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810320c:	4770      	bx	lr

0810320e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810320e:	b580      	push	{r7, lr}
 8103210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8103212:	f000 f999 	bl	8103548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8103216:	bf00      	nop
 8103218:	bd80      	pop	{r7, pc}

0810321a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 810321a:	b580      	push	{r7, lr}
 810321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 810321e:	2008      	movs	r0, #8
 8103220:	f002 f9b7 	bl	8105592 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8103224:	bf00      	nop
 8103226:	bd80      	pop	{r7, pc}

08103228 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8103228:	b580      	push	{r7, lr}
 810322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 810322c:	4802      	ldr	r0, [pc, #8]	@ (8103238 <TIM2_IRQHandler+0x10>)
 810322e:	f006 fa23 	bl	8109678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8103232:	bf00      	nop
 8103234:	bd80      	pop	{r7, pc}
 8103236:	bf00      	nop
 8103238:	10000374 	.word	0x10000374

0810323c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810323c:	b480      	push	{r7}
 810323e:	af00      	add	r7, sp, #0
  return 1;
 8103240:	2301      	movs	r3, #1
}
 8103242:	4618      	mov	r0, r3
 8103244:	46bd      	mov	sp, r7
 8103246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810324a:	4770      	bx	lr

0810324c <_kill>:

int _kill(int pid, int sig)
{
 810324c:	b580      	push	{r7, lr}
 810324e:	b082      	sub	sp, #8
 8103250:	af00      	add	r7, sp, #0
 8103252:	6078      	str	r0, [r7, #4]
 8103254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8103256:	f00a f8a5 	bl	810d3a4 <__errno>
 810325a:	4603      	mov	r3, r0
 810325c:	2216      	movs	r2, #22
 810325e:	601a      	str	r2, [r3, #0]
  return -1;
 8103260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103264:	4618      	mov	r0, r3
 8103266:	3708      	adds	r7, #8
 8103268:	46bd      	mov	sp, r7
 810326a:	bd80      	pop	{r7, pc}

0810326c <_exit>:

void _exit (int status)
{
 810326c:	b580      	push	{r7, lr}
 810326e:	b082      	sub	sp, #8
 8103270:	af00      	add	r7, sp, #0
 8103272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8103274:	f04f 31ff 	mov.w	r1, #4294967295
 8103278:	6878      	ldr	r0, [r7, #4]
 810327a:	f7ff ffe7 	bl	810324c <_kill>
  while (1) {}    /* Make sure we hang here */
 810327e:	bf00      	nop
 8103280:	e7fd      	b.n	810327e <_exit+0x12>

08103282 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8103282:	b580      	push	{r7, lr}
 8103284:	b086      	sub	sp, #24
 8103286:	af00      	add	r7, sp, #0
 8103288:	60f8      	str	r0, [r7, #12]
 810328a:	60b9      	str	r1, [r7, #8]
 810328c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 810328e:	2301      	movs	r3, #1
 8103290:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103292:	2300      	movs	r3, #0
 8103294:	617b      	str	r3, [r7, #20]
 8103296:	e00a      	b.n	81032ae <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8103298:	f7ff fd0c 	bl	8102cb4 <__io_getchar>
 810329c:	4601      	mov	r1, r0
 810329e:	68bb      	ldr	r3, [r7, #8]
 81032a0:	1c5a      	adds	r2, r3, #1
 81032a2:	60ba      	str	r2, [r7, #8]
 81032a4:	b2ca      	uxtb	r2, r1
 81032a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032a8:	697b      	ldr	r3, [r7, #20]
 81032aa:	3301      	adds	r3, #1
 81032ac:	617b      	str	r3, [r7, #20]
 81032ae:	697a      	ldr	r2, [r7, #20]
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	429a      	cmp	r2, r3
 81032b4:	dbf0      	blt.n	8103298 <_read+0x16>
  }

  return len;
 81032b6:	687b      	ldr	r3, [r7, #4]
}
 81032b8:	4618      	mov	r0, r3
 81032ba:	3718      	adds	r7, #24
 81032bc:	46bd      	mov	sp, r7
 81032be:	bd80      	pop	{r7, pc}

081032c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81032c0:	b580      	push	{r7, lr}
 81032c2:	b086      	sub	sp, #24
 81032c4:	af00      	add	r7, sp, #0
 81032c6:	60f8      	str	r0, [r7, #12]
 81032c8:	60b9      	str	r1, [r7, #8]
 81032ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032cc:	2300      	movs	r3, #0
 81032ce:	617b      	str	r3, [r7, #20]
 81032d0:	e009      	b.n	81032e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81032d2:	68bb      	ldr	r3, [r7, #8]
 81032d4:	1c5a      	adds	r2, r3, #1
 81032d6:	60ba      	str	r2, [r7, #8]
 81032d8:	781b      	ldrb	r3, [r3, #0]
 81032da:	4618      	mov	r0, r3
 81032dc:	f7ff fcd8 	bl	8102c90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032e0:	697b      	ldr	r3, [r7, #20]
 81032e2:	3301      	adds	r3, #1
 81032e4:	617b      	str	r3, [r7, #20]
 81032e6:	697a      	ldr	r2, [r7, #20]
 81032e8:	687b      	ldr	r3, [r7, #4]
 81032ea:	429a      	cmp	r2, r3
 81032ec:	dbf1      	blt.n	81032d2 <_write+0x12>
  }
  return len;
 81032ee:	687b      	ldr	r3, [r7, #4]
}
 81032f0:	4618      	mov	r0, r3
 81032f2:	3718      	adds	r7, #24
 81032f4:	46bd      	mov	sp, r7
 81032f6:	bd80      	pop	{r7, pc}

081032f8 <_close>:

int _close(int file)
{
 81032f8:	b480      	push	{r7}
 81032fa:	b083      	sub	sp, #12
 81032fc:	af00      	add	r7, sp, #0
 81032fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8103300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103304:	4618      	mov	r0, r3
 8103306:	370c      	adds	r7, #12
 8103308:	46bd      	mov	sp, r7
 810330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810330e:	4770      	bx	lr

08103310 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8103310:	b480      	push	{r7}
 8103312:	b083      	sub	sp, #12
 8103314:	af00      	add	r7, sp, #0
 8103316:	6078      	str	r0, [r7, #4]
 8103318:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 810331a:	683b      	ldr	r3, [r7, #0]
 810331c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8103320:	605a      	str	r2, [r3, #4]
  return 0;
 8103322:	2300      	movs	r3, #0
}
 8103324:	4618      	mov	r0, r3
 8103326:	370c      	adds	r7, #12
 8103328:	46bd      	mov	sp, r7
 810332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810332e:	4770      	bx	lr

08103330 <_isatty>:

int _isatty(int file)
{
 8103330:	b480      	push	{r7}
 8103332:	b083      	sub	sp, #12
 8103334:	af00      	add	r7, sp, #0
 8103336:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8103338:	2301      	movs	r3, #1
}
 810333a:	4618      	mov	r0, r3
 810333c:	370c      	adds	r7, #12
 810333e:	46bd      	mov	sp, r7
 8103340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103344:	4770      	bx	lr

08103346 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103346:	b480      	push	{r7}
 8103348:	b085      	sub	sp, #20
 810334a:	af00      	add	r7, sp, #0
 810334c:	60f8      	str	r0, [r7, #12]
 810334e:	60b9      	str	r1, [r7, #8]
 8103350:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8103352:	2300      	movs	r3, #0
}
 8103354:	4618      	mov	r0, r3
 8103356:	3714      	adds	r7, #20
 8103358:	46bd      	mov	sp, r7
 810335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810335e:	4770      	bx	lr

08103360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8103360:	b580      	push	{r7, lr}
 8103362:	b086      	sub	sp, #24
 8103364:	af00      	add	r7, sp, #0
 8103366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103368:	4a14      	ldr	r2, [pc, #80]	@ (81033bc <_sbrk+0x5c>)
 810336a:	4b15      	ldr	r3, [pc, #84]	@ (81033c0 <_sbrk+0x60>)
 810336c:	1ad3      	subs	r3, r2, r3
 810336e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8103370:	697b      	ldr	r3, [r7, #20]
 8103372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103374:	4b13      	ldr	r3, [pc, #76]	@ (81033c4 <_sbrk+0x64>)
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	2b00      	cmp	r3, #0
 810337a:	d102      	bne.n	8103382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810337c:	4b11      	ldr	r3, [pc, #68]	@ (81033c4 <_sbrk+0x64>)
 810337e:	4a12      	ldr	r2, [pc, #72]	@ (81033c8 <_sbrk+0x68>)
 8103380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8103382:	4b10      	ldr	r3, [pc, #64]	@ (81033c4 <_sbrk+0x64>)
 8103384:	681a      	ldr	r2, [r3, #0]
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	4413      	add	r3, r2
 810338a:	693a      	ldr	r2, [r7, #16]
 810338c:	429a      	cmp	r2, r3
 810338e:	d207      	bcs.n	81033a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8103390:	f00a f808 	bl	810d3a4 <__errno>
 8103394:	4603      	mov	r3, r0
 8103396:	220c      	movs	r2, #12
 8103398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810339a:	f04f 33ff 	mov.w	r3, #4294967295
 810339e:	e009      	b.n	81033b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81033a0:	4b08      	ldr	r3, [pc, #32]	@ (81033c4 <_sbrk+0x64>)
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81033a6:	4b07      	ldr	r3, [pc, #28]	@ (81033c4 <_sbrk+0x64>)
 81033a8:	681a      	ldr	r2, [r3, #0]
 81033aa:	687b      	ldr	r3, [r7, #4]
 81033ac:	4413      	add	r3, r2
 81033ae:	4a05      	ldr	r2, [pc, #20]	@ (81033c4 <_sbrk+0x64>)
 81033b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81033b2:	68fb      	ldr	r3, [r7, #12]
}
 81033b4:	4618      	mov	r0, r3
 81033b6:	3718      	adds	r7, #24
 81033b8:	46bd      	mov	sp, r7
 81033ba:	bd80      	pop	{r7, pc}
 81033bc:	10048000 	.word	0x10048000
 81033c0:	00000400 	.word	0x00000400
 81033c4:	10000644 	.word	0x10000644
 81033c8:	10000798 	.word	0x10000798

081033cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81033cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81033d0:	f7fd fe90 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81033d4:	480c      	ldr	r0, [pc, #48]	@ (8103408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81033d6:	490d      	ldr	r1, [pc, #52]	@ (810340c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81033d8:	4a0d      	ldr	r2, [pc, #52]	@ (8103410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81033da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81033dc:	e002      	b.n	81033e4 <LoopCopyDataInit>

081033de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81033de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81033e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81033e2:	3304      	adds	r3, #4

081033e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81033e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81033e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81033e8:	d3f9      	bcc.n	81033de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81033ea:	4a0a      	ldr	r2, [pc, #40]	@ (8103414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81033ec:	4c0a      	ldr	r4, [pc, #40]	@ (8103418 <LoopFillZerobss+0x22>)
  movs r3, #0
 81033ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 81033f0:	e001      	b.n	81033f6 <LoopFillZerobss>

081033f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81033f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81033f4:	3204      	adds	r2, #4

081033f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81033f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81033f8:	d3fb      	bcc.n	81033f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81033fa:	f009 ffd9 	bl	810d3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81033fe:	f7fe fceb 	bl	8101dd8 <main>
  bx  lr
 8103402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103404:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103408:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810340c:	10000250 	.word	0x10000250
  ldr r2, =_sidata
 8103410:	08112630 	.word	0x08112630
  ldr r2, =_sbss
 8103414:	10000250 	.word	0x10000250
  ldr r4, =_ebss
 8103418:	10000798 	.word	0x10000798

0810341c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810341c:	e7fe      	b.n	810341c <ADC3_IRQHandler>
	...

08103420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103420:	b580      	push	{r7, lr}
 8103422:	b082      	sub	sp, #8
 8103424:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103426:	4b28      	ldr	r3, [pc, #160]	@ (81034c8 <HAL_Init+0xa8>)
 8103428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810342c:	4a26      	ldr	r2, [pc, #152]	@ (81034c8 <HAL_Init+0xa8>)
 810342e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8103432:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103436:	4b24      	ldr	r3, [pc, #144]	@ (81034c8 <HAL_Init+0xa8>)
 8103438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810343c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103440:	603b      	str	r3, [r7, #0]
 8103442:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103444:	4b21      	ldr	r3, [pc, #132]	@ (81034cc <HAL_Init+0xac>)
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810344c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103450:	4a1e      	ldr	r2, [pc, #120]	@ (81034cc <HAL_Init+0xac>)
 8103452:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8103456:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103458:	4b1c      	ldr	r3, [pc, #112]	@ (81034cc <HAL_Init+0xac>)
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	4a1b      	ldr	r2, [pc, #108]	@ (81034cc <HAL_Init+0xac>)
 810345e:	f043 0301 	orr.w	r3, r3, #1
 8103462:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103464:	2003      	movs	r0, #3
 8103466:	f001 fe77 	bl	8105158 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810346a:	f002 ff49 	bl	8106300 <HAL_RCC_GetSysClockFreq>
 810346e:	4602      	mov	r2, r0
 8103470:	4b15      	ldr	r3, [pc, #84]	@ (81034c8 <HAL_Init+0xa8>)
 8103472:	699b      	ldr	r3, [r3, #24]
 8103474:	0a1b      	lsrs	r3, r3, #8
 8103476:	f003 030f 	and.w	r3, r3, #15
 810347a:	4915      	ldr	r1, [pc, #84]	@ (81034d0 <HAL_Init+0xb0>)
 810347c:	5ccb      	ldrb	r3, [r1, r3]
 810347e:	f003 031f 	and.w	r3, r3, #31
 8103482:	fa22 f303 	lsr.w	r3, r2, r3
 8103486:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103488:	4b0f      	ldr	r3, [pc, #60]	@ (81034c8 <HAL_Init+0xa8>)
 810348a:	699b      	ldr	r3, [r3, #24]
 810348c:	f003 030f 	and.w	r3, r3, #15
 8103490:	4a0f      	ldr	r2, [pc, #60]	@ (81034d0 <HAL_Init+0xb0>)
 8103492:	5cd3      	ldrb	r3, [r2, r3]
 8103494:	f003 031f 	and.w	r3, r3, #31
 8103498:	687a      	ldr	r2, [r7, #4]
 810349a:	fa22 f303 	lsr.w	r3, r2, r3
 810349e:	4a0d      	ldr	r2, [pc, #52]	@ (81034d4 <HAL_Init+0xb4>)
 81034a0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81034a2:	4b0c      	ldr	r3, [pc, #48]	@ (81034d4 <HAL_Init+0xb4>)
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	4a0c      	ldr	r2, [pc, #48]	@ (81034d8 <HAL_Init+0xb8>)
 81034a8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81034aa:	2000      	movs	r0, #0
 81034ac:	f000 f816 	bl	81034dc <HAL_InitTick>
 81034b0:	4603      	mov	r3, r0
 81034b2:	2b00      	cmp	r3, #0
 81034b4:	d001      	beq.n	81034ba <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81034b6:	2301      	movs	r3, #1
 81034b8:	e002      	b.n	81034c0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81034ba:	f7ff fc1d 	bl	8102cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81034be:	2300      	movs	r3, #0
}
 81034c0:	4618      	mov	r0, r3
 81034c2:	3708      	adds	r7, #8
 81034c4:	46bd      	mov	sp, r7
 81034c6:	bd80      	pop	{r7, pc}
 81034c8:	58024400 	.word	0x58024400
 81034cc:	40024400 	.word	0x40024400
 81034d0:	08111fe0 	.word	0x08111fe0
 81034d4:	10000004 	.word	0x10000004
 81034d8:	10000000 	.word	0x10000000

081034dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81034dc:	b580      	push	{r7, lr}
 81034de:	b082      	sub	sp, #8
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81034e4:	4b15      	ldr	r3, [pc, #84]	@ (810353c <HAL_InitTick+0x60>)
 81034e6:	781b      	ldrb	r3, [r3, #0]
 81034e8:	2b00      	cmp	r3, #0
 81034ea:	d101      	bne.n	81034f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81034ec:	2301      	movs	r3, #1
 81034ee:	e021      	b.n	8103534 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81034f0:	4b13      	ldr	r3, [pc, #76]	@ (8103540 <HAL_InitTick+0x64>)
 81034f2:	681a      	ldr	r2, [r3, #0]
 81034f4:	4b11      	ldr	r3, [pc, #68]	@ (810353c <HAL_InitTick+0x60>)
 81034f6:	781b      	ldrb	r3, [r3, #0]
 81034f8:	4619      	mov	r1, r3
 81034fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81034fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8103502:	fbb2 f3f3 	udiv	r3, r2, r3
 8103506:	4618      	mov	r0, r3
 8103508:	f001 fe59 	bl	81051be <HAL_SYSTICK_Config>
 810350c:	4603      	mov	r3, r0
 810350e:	2b00      	cmp	r3, #0
 8103510:	d001      	beq.n	8103516 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103512:	2301      	movs	r3, #1
 8103514:	e00e      	b.n	8103534 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	2b0f      	cmp	r3, #15
 810351a:	d80a      	bhi.n	8103532 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810351c:	2200      	movs	r2, #0
 810351e:	6879      	ldr	r1, [r7, #4]
 8103520:	f04f 30ff 	mov.w	r0, #4294967295
 8103524:	f001 fe23 	bl	810516e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103528:	4a06      	ldr	r2, [pc, #24]	@ (8103544 <HAL_InitTick+0x68>)
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810352e:	2300      	movs	r3, #0
 8103530:	e000      	b.n	8103534 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103532:	2301      	movs	r3, #1
}
 8103534:	4618      	mov	r0, r3
 8103536:	3708      	adds	r7, #8
 8103538:	46bd      	mov	sp, r7
 810353a:	bd80      	pop	{r7, pc}
 810353c:	10000084 	.word	0x10000084
 8103540:	10000000 	.word	0x10000000
 8103544:	10000080 	.word	0x10000080

08103548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103548:	b480      	push	{r7}
 810354a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810354c:	4b06      	ldr	r3, [pc, #24]	@ (8103568 <HAL_IncTick+0x20>)
 810354e:	781b      	ldrb	r3, [r3, #0]
 8103550:	461a      	mov	r2, r3
 8103552:	4b06      	ldr	r3, [pc, #24]	@ (810356c <HAL_IncTick+0x24>)
 8103554:	681b      	ldr	r3, [r3, #0]
 8103556:	4413      	add	r3, r2
 8103558:	4a04      	ldr	r2, [pc, #16]	@ (810356c <HAL_IncTick+0x24>)
 810355a:	6013      	str	r3, [r2, #0]
}
 810355c:	bf00      	nop
 810355e:	46bd      	mov	sp, r7
 8103560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103564:	4770      	bx	lr
 8103566:	bf00      	nop
 8103568:	10000084 	.word	0x10000084
 810356c:	10000648 	.word	0x10000648

08103570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103570:	b480      	push	{r7}
 8103572:	af00      	add	r7, sp, #0
  return uwTick;
 8103574:	4b03      	ldr	r3, [pc, #12]	@ (8103584 <HAL_GetTick+0x14>)
 8103576:	681b      	ldr	r3, [r3, #0]
}
 8103578:	4618      	mov	r0, r3
 810357a:	46bd      	mov	sp, r7
 810357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103580:	4770      	bx	lr
 8103582:	bf00      	nop
 8103584:	10000648 	.word	0x10000648

08103588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103588:	b580      	push	{r7, lr}
 810358a:	b084      	sub	sp, #16
 810358c:	af00      	add	r7, sp, #0
 810358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103590:	f7ff ffee 	bl	8103570 <HAL_GetTick>
 8103594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810359a:	68fb      	ldr	r3, [r7, #12]
 810359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81035a0:	d005      	beq.n	81035ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81035a2:	4b0a      	ldr	r3, [pc, #40]	@ (81035cc <HAL_Delay+0x44>)
 81035a4:	781b      	ldrb	r3, [r3, #0]
 81035a6:	461a      	mov	r2, r3
 81035a8:	68fb      	ldr	r3, [r7, #12]
 81035aa:	4413      	add	r3, r2
 81035ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81035ae:	bf00      	nop
 81035b0:	f7ff ffde 	bl	8103570 <HAL_GetTick>
 81035b4:	4602      	mov	r2, r0
 81035b6:	68bb      	ldr	r3, [r7, #8]
 81035b8:	1ad3      	subs	r3, r2, r3
 81035ba:	68fa      	ldr	r2, [r7, #12]
 81035bc:	429a      	cmp	r2, r3
 81035be:	d8f7      	bhi.n	81035b0 <HAL_Delay+0x28>
  {
  }
}
 81035c0:	bf00      	nop
 81035c2:	bf00      	nop
 81035c4:	3710      	adds	r7, #16
 81035c6:	46bd      	mov	sp, r7
 81035c8:	bd80      	pop	{r7, pc}
 81035ca:	bf00      	nop
 81035cc:	10000084 	.word	0x10000084

081035d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81035d0:	b480      	push	{r7}
 81035d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81035d4:	4b03      	ldr	r3, [pc, #12]	@ (81035e4 <HAL_GetREVID+0x14>)
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	0c1b      	lsrs	r3, r3, #16
}
 81035da:	4618      	mov	r0, r3
 81035dc:	46bd      	mov	sp, r7
 81035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035e2:	4770      	bx	lr
 81035e4:	5c001000 	.word	0x5c001000

081035e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81035e8:	b480      	push	{r7}
 81035ea:	b083      	sub	sp, #12
 81035ec:	af00      	add	r7, sp, #0
 81035ee:	6078      	str	r0, [r7, #4]
 81035f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	689b      	ldr	r3, [r3, #8]
 81035f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 81035fa:	683b      	ldr	r3, [r7, #0]
 81035fc:	431a      	orrs	r2, r3
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	609a      	str	r2, [r3, #8]
}
 8103602:	bf00      	nop
 8103604:	370c      	adds	r7, #12
 8103606:	46bd      	mov	sp, r7
 8103608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810360c:	4770      	bx	lr

0810360e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810360e:	b480      	push	{r7}
 8103610:	b083      	sub	sp, #12
 8103612:	af00      	add	r7, sp, #0
 8103614:	6078      	str	r0, [r7, #4]
 8103616:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	689b      	ldr	r3, [r3, #8]
 810361c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8103620:	683b      	ldr	r3, [r7, #0]
 8103622:	431a      	orrs	r2, r3
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	609a      	str	r2, [r3, #8]
}
 8103628:	bf00      	nop
 810362a:	370c      	adds	r7, #12
 810362c:	46bd      	mov	sp, r7
 810362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103632:	4770      	bx	lr

08103634 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103634:	b480      	push	{r7}
 8103636:	b083      	sub	sp, #12
 8103638:	af00      	add	r7, sp, #0
 810363a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	689b      	ldr	r3, [r3, #8]
 8103640:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8103644:	4618      	mov	r0, r3
 8103646:	370c      	adds	r7, #12
 8103648:	46bd      	mov	sp, r7
 810364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810364e:	4770      	bx	lr

08103650 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8103650:	b480      	push	{r7}
 8103652:	b087      	sub	sp, #28
 8103654:	af00      	add	r7, sp, #0
 8103656:	60f8      	str	r0, [r7, #12]
 8103658:	60b9      	str	r1, [r7, #8]
 810365a:	607a      	str	r2, [r7, #4]
 810365c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810365e:	68fb      	ldr	r3, [r7, #12]
 8103660:	3360      	adds	r3, #96	@ 0x60
 8103662:	461a      	mov	r2, r3
 8103664:	68bb      	ldr	r3, [r7, #8]
 8103666:	009b      	lsls	r3, r3, #2
 8103668:	4413      	add	r3, r2
 810366a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 810366c:	697b      	ldr	r3, [r7, #20]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 810367a:	683b      	ldr	r3, [r7, #0]
 810367c:	430b      	orrs	r3, r1
 810367e:	431a      	orrs	r2, r3
 8103680:	697b      	ldr	r3, [r7, #20]
 8103682:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103684:	bf00      	nop
 8103686:	371c      	adds	r7, #28
 8103688:	46bd      	mov	sp, r7
 810368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810368e:	4770      	bx	lr

08103690 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8103690:	b480      	push	{r7}
 8103692:	b085      	sub	sp, #20
 8103694:	af00      	add	r7, sp, #0
 8103696:	60f8      	str	r0, [r7, #12]
 8103698:	60b9      	str	r1, [r7, #8]
 810369a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 810369c:	68fb      	ldr	r3, [r7, #12]
 810369e:	691b      	ldr	r3, [r3, #16]
 81036a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 81036a4:	68bb      	ldr	r3, [r7, #8]
 81036a6:	f003 031f 	and.w	r3, r3, #31
 81036aa:	6879      	ldr	r1, [r7, #4]
 81036ac:	fa01 f303 	lsl.w	r3, r1, r3
 81036b0:	431a      	orrs	r2, r3
 81036b2:	68fb      	ldr	r3, [r7, #12]
 81036b4:	611a      	str	r2, [r3, #16]
}
 81036b6:	bf00      	nop
 81036b8:	3714      	adds	r7, #20
 81036ba:	46bd      	mov	sp, r7
 81036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036c0:	4770      	bx	lr

081036c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81036c2:	b480      	push	{r7}
 81036c4:	b087      	sub	sp, #28
 81036c6:	af00      	add	r7, sp, #0
 81036c8:	60f8      	str	r0, [r7, #12]
 81036ca:	60b9      	str	r1, [r7, #8]
 81036cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81036ce:	68fb      	ldr	r3, [r7, #12]
 81036d0:	3360      	adds	r3, #96	@ 0x60
 81036d2:	461a      	mov	r2, r3
 81036d4:	68bb      	ldr	r3, [r7, #8]
 81036d6:	009b      	lsls	r3, r3, #2
 81036d8:	4413      	add	r3, r2
 81036da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81036dc:	697b      	ldr	r3, [r7, #20]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	431a      	orrs	r2, r3
 81036e8:	697b      	ldr	r3, [r7, #20]
 81036ea:	601a      	str	r2, [r3, #0]
  }
}
 81036ec:	bf00      	nop
 81036ee:	371c      	adds	r7, #28
 81036f0:	46bd      	mov	sp, r7
 81036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036f6:	4770      	bx	lr

081036f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81036f8:	b480      	push	{r7}
 81036fa:	b083      	sub	sp, #12
 81036fc:	af00      	add	r7, sp, #0
 81036fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	68db      	ldr	r3, [r3, #12]
 8103704:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8103708:	2b00      	cmp	r3, #0
 810370a:	d101      	bne.n	8103710 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 810370c:	2301      	movs	r3, #1
 810370e:	e000      	b.n	8103712 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8103710:	2300      	movs	r3, #0
}
 8103712:	4618      	mov	r0, r3
 8103714:	370c      	adds	r7, #12
 8103716:	46bd      	mov	sp, r7
 8103718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810371c:	4770      	bx	lr

0810371e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 810371e:	b480      	push	{r7}
 8103720:	b087      	sub	sp, #28
 8103722:	af00      	add	r7, sp, #0
 8103724:	60f8      	str	r0, [r7, #12]
 8103726:	60b9      	str	r1, [r7, #8]
 8103728:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 810372a:	68fb      	ldr	r3, [r7, #12]
 810372c:	3330      	adds	r3, #48	@ 0x30
 810372e:	461a      	mov	r2, r3
 8103730:	68bb      	ldr	r3, [r7, #8]
 8103732:	0a1b      	lsrs	r3, r3, #8
 8103734:	009b      	lsls	r3, r3, #2
 8103736:	f003 030c 	and.w	r3, r3, #12
 810373a:	4413      	add	r3, r2
 810373c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810373e:	697b      	ldr	r3, [r7, #20]
 8103740:	681a      	ldr	r2, [r3, #0]
 8103742:	68bb      	ldr	r3, [r7, #8]
 8103744:	f003 031f 	and.w	r3, r3, #31
 8103748:	211f      	movs	r1, #31
 810374a:	fa01 f303 	lsl.w	r3, r1, r3
 810374e:	43db      	mvns	r3, r3
 8103750:	401a      	ands	r2, r3
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	0e9b      	lsrs	r3, r3, #26
 8103756:	f003 011f 	and.w	r1, r3, #31
 810375a:	68bb      	ldr	r3, [r7, #8]
 810375c:	f003 031f 	and.w	r3, r3, #31
 8103760:	fa01 f303 	lsl.w	r3, r1, r3
 8103764:	431a      	orrs	r2, r3
 8103766:	697b      	ldr	r3, [r7, #20]
 8103768:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810376a:	bf00      	nop
 810376c:	371c      	adds	r7, #28
 810376e:	46bd      	mov	sp, r7
 8103770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103774:	4770      	bx	lr

08103776 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103776:	b480      	push	{r7}
 8103778:	b087      	sub	sp, #28
 810377a:	af00      	add	r7, sp, #0
 810377c:	60f8      	str	r0, [r7, #12]
 810377e:	60b9      	str	r1, [r7, #8]
 8103780:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8103782:	68fb      	ldr	r3, [r7, #12]
 8103784:	3314      	adds	r3, #20
 8103786:	461a      	mov	r2, r3
 8103788:	68bb      	ldr	r3, [r7, #8]
 810378a:	0e5b      	lsrs	r3, r3, #25
 810378c:	009b      	lsls	r3, r3, #2
 810378e:	f003 0304 	and.w	r3, r3, #4
 8103792:	4413      	add	r3, r2
 8103794:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103796:	697b      	ldr	r3, [r7, #20]
 8103798:	681a      	ldr	r2, [r3, #0]
 810379a:	68bb      	ldr	r3, [r7, #8]
 810379c:	0d1b      	lsrs	r3, r3, #20
 810379e:	f003 031f 	and.w	r3, r3, #31
 81037a2:	2107      	movs	r1, #7
 81037a4:	fa01 f303 	lsl.w	r3, r1, r3
 81037a8:	43db      	mvns	r3, r3
 81037aa:	401a      	ands	r2, r3
 81037ac:	68bb      	ldr	r3, [r7, #8]
 81037ae:	0d1b      	lsrs	r3, r3, #20
 81037b0:	f003 031f 	and.w	r3, r3, #31
 81037b4:	6879      	ldr	r1, [r7, #4]
 81037b6:	fa01 f303 	lsl.w	r3, r1, r3
 81037ba:	431a      	orrs	r2, r3
 81037bc:	697b      	ldr	r3, [r7, #20]
 81037be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81037c0:	bf00      	nop
 81037c2:	371c      	adds	r7, #28
 81037c4:	46bd      	mov	sp, r7
 81037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ca:	4770      	bx	lr

081037cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81037cc:	b480      	push	{r7}
 81037ce:	b085      	sub	sp, #20
 81037d0:	af00      	add	r7, sp, #0
 81037d2:	60f8      	str	r0, [r7, #12]
 81037d4:	60b9      	str	r1, [r7, #8]
 81037d6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81037d8:	68fb      	ldr	r3, [r7, #12]
 81037da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 81037de:	68bb      	ldr	r3, [r7, #8]
 81037e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81037e4:	43db      	mvns	r3, r3
 81037e6:	401a      	ands	r2, r3
 81037e8:	687b      	ldr	r3, [r7, #4]
 81037ea:	f003 0318 	and.w	r3, r3, #24
 81037ee:	4908      	ldr	r1, [pc, #32]	@ (8103810 <LL_ADC_SetChannelSingleDiff+0x44>)
 81037f0:	40d9      	lsrs	r1, r3
 81037f2:	68bb      	ldr	r3, [r7, #8]
 81037f4:	400b      	ands	r3, r1
 81037f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81037fa:	431a      	orrs	r2, r3
 81037fc:	68fb      	ldr	r3, [r7, #12]
 81037fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8103802:	bf00      	nop
 8103804:	3714      	adds	r7, #20
 8103806:	46bd      	mov	sp, r7
 8103808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810380c:	4770      	bx	lr
 810380e:	bf00      	nop
 8103810:	000fffff 	.word	0x000fffff

08103814 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103814:	b480      	push	{r7}
 8103816:	b083      	sub	sp, #12
 8103818:	af00      	add	r7, sp, #0
 810381a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	689b      	ldr	r3, [r3, #8]
 8103820:	f003 031f 	and.w	r3, r3, #31
}
 8103824:	4618      	mov	r0, r3
 8103826:	370c      	adds	r7, #12
 8103828:	46bd      	mov	sp, r7
 810382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810382e:	4770      	bx	lr

08103830 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103830:	b480      	push	{r7}
 8103832:	b083      	sub	sp, #12
 8103834:	af00      	add	r7, sp, #0
 8103836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	689b      	ldr	r3, [r3, #8]
 810383c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8103840:	4618      	mov	r0, r3
 8103842:	370c      	adds	r7, #12
 8103844:	46bd      	mov	sp, r7
 8103846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810384a:	4770      	bx	lr

0810384c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 810384c:	b480      	push	{r7}
 810384e:	b083      	sub	sp, #12
 8103850:	af00      	add	r7, sp, #0
 8103852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	689b      	ldr	r3, [r3, #8]
 8103858:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 810385c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103860:	687a      	ldr	r2, [r7, #4]
 8103862:	6093      	str	r3, [r2, #8]
}
 8103864:	bf00      	nop
 8103866:	370c      	adds	r7, #12
 8103868:	46bd      	mov	sp, r7
 810386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810386e:	4770      	bx	lr

08103870 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8103870:	b480      	push	{r7}
 8103872:	b083      	sub	sp, #12
 8103874:	af00      	add	r7, sp, #0
 8103876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	689b      	ldr	r3, [r3, #8]
 810387c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103884:	d101      	bne.n	810388a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8103886:	2301      	movs	r3, #1
 8103888:	e000      	b.n	810388c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810388a:	2300      	movs	r3, #0
}
 810388c:	4618      	mov	r0, r3
 810388e:	370c      	adds	r7, #12
 8103890:	46bd      	mov	sp, r7
 8103892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103896:	4770      	bx	lr

08103898 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8103898:	b480      	push	{r7}
 810389a:	b083      	sub	sp, #12
 810389c:	af00      	add	r7, sp, #0
 810389e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	689b      	ldr	r3, [r3, #8]
 81038a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 81038a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81038ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 81038b4:	bf00      	nop
 81038b6:	370c      	adds	r7, #12
 81038b8:	46bd      	mov	sp, r7
 81038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038be:	4770      	bx	lr

081038c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 81038c0:	b480      	push	{r7}
 81038c2:	b083      	sub	sp, #12
 81038c4:	af00      	add	r7, sp, #0
 81038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	689b      	ldr	r3, [r3, #8]
 81038cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81038d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81038d4:	d101      	bne.n	81038da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81038d6:	2301      	movs	r3, #1
 81038d8:	e000      	b.n	81038dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81038da:	2300      	movs	r3, #0
}
 81038dc:	4618      	mov	r0, r3
 81038de:	370c      	adds	r7, #12
 81038e0:	46bd      	mov	sp, r7
 81038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038e6:	4770      	bx	lr

081038e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 81038e8:	b480      	push	{r7}
 81038ea:	b083      	sub	sp, #12
 81038ec:	af00      	add	r7, sp, #0
 81038ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	689b      	ldr	r3, [r3, #8]
 81038f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81038f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81038fc:	f043 0201 	orr.w	r2, r3, #1
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8103904:	bf00      	nop
 8103906:	370c      	adds	r7, #12
 8103908:	46bd      	mov	sp, r7
 810390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810390e:	4770      	bx	lr

08103910 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8103910:	b480      	push	{r7}
 8103912:	b083      	sub	sp, #12
 8103914:	af00      	add	r7, sp, #0
 8103916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	689b      	ldr	r3, [r3, #8]
 810391c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103920:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103924:	f043 0202 	orr.w	r2, r3, #2
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 810392c:	bf00      	nop
 810392e:	370c      	adds	r7, #12
 8103930:	46bd      	mov	sp, r7
 8103932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103936:	4770      	bx	lr

08103938 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8103938:	b480      	push	{r7}
 810393a:	b083      	sub	sp, #12
 810393c:	af00      	add	r7, sp, #0
 810393e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	689b      	ldr	r3, [r3, #8]
 8103944:	f003 0301 	and.w	r3, r3, #1
 8103948:	2b01      	cmp	r3, #1
 810394a:	d101      	bne.n	8103950 <LL_ADC_IsEnabled+0x18>
 810394c:	2301      	movs	r3, #1
 810394e:	e000      	b.n	8103952 <LL_ADC_IsEnabled+0x1a>
 8103950:	2300      	movs	r3, #0
}
 8103952:	4618      	mov	r0, r3
 8103954:	370c      	adds	r7, #12
 8103956:	46bd      	mov	sp, r7
 8103958:	f85d 7b04 	ldr.w	r7, [sp], #4
 810395c:	4770      	bx	lr

0810395e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 810395e:	b480      	push	{r7}
 8103960:	b083      	sub	sp, #12
 8103962:	af00      	add	r7, sp, #0
 8103964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	689b      	ldr	r3, [r3, #8]
 810396a:	f003 0302 	and.w	r3, r3, #2
 810396e:	2b02      	cmp	r3, #2
 8103970:	d101      	bne.n	8103976 <LL_ADC_IsDisableOngoing+0x18>
 8103972:	2301      	movs	r3, #1
 8103974:	e000      	b.n	8103978 <LL_ADC_IsDisableOngoing+0x1a>
 8103976:	2300      	movs	r3, #0
}
 8103978:	4618      	mov	r0, r3
 810397a:	370c      	adds	r7, #12
 810397c:	46bd      	mov	sp, r7
 810397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103982:	4770      	bx	lr

08103984 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8103984:	b480      	push	{r7}
 8103986:	b083      	sub	sp, #12
 8103988:	af00      	add	r7, sp, #0
 810398a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	689b      	ldr	r3, [r3, #8]
 8103990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103994:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103998:	f043 0204 	orr.w	r2, r3, #4
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 81039a0:	bf00      	nop
 81039a2:	370c      	adds	r7, #12
 81039a4:	46bd      	mov	sp, r7
 81039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039aa:	4770      	bx	lr

081039ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 81039ac:	b480      	push	{r7}
 81039ae:	b083      	sub	sp, #12
 81039b0:	af00      	add	r7, sp, #0
 81039b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	689b      	ldr	r3, [r3, #8]
 81039b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81039bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81039c0:	f043 0210 	orr.w	r2, r3, #16
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 81039c8:	bf00      	nop
 81039ca:	370c      	adds	r7, #12
 81039cc:	46bd      	mov	sp, r7
 81039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039d2:	4770      	bx	lr

081039d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81039d4:	b480      	push	{r7}
 81039d6:	b083      	sub	sp, #12
 81039d8:	af00      	add	r7, sp, #0
 81039da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	689b      	ldr	r3, [r3, #8]
 81039e0:	f003 0304 	and.w	r3, r3, #4
 81039e4:	2b04      	cmp	r3, #4
 81039e6:	d101      	bne.n	81039ec <LL_ADC_REG_IsConversionOngoing+0x18>
 81039e8:	2301      	movs	r3, #1
 81039ea:	e000      	b.n	81039ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 81039ec:	2300      	movs	r3, #0
}
 81039ee:	4618      	mov	r0, r3
 81039f0:	370c      	adds	r7, #12
 81039f2:	46bd      	mov	sp, r7
 81039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039f8:	4770      	bx	lr

081039fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 81039fa:	b480      	push	{r7}
 81039fc:	b083      	sub	sp, #12
 81039fe:	af00      	add	r7, sp, #0
 8103a00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	689b      	ldr	r3, [r3, #8]
 8103a06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103a0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8103a0e:	f043 0220 	orr.w	r2, r3, #32
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8103a16:	bf00      	nop
 8103a18:	370c      	adds	r7, #12
 8103a1a:	46bd      	mov	sp, r7
 8103a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a20:	4770      	bx	lr

08103a22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103a22:	b480      	push	{r7}
 8103a24:	b083      	sub	sp, #12
 8103a26:	af00      	add	r7, sp, #0
 8103a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	689b      	ldr	r3, [r3, #8]
 8103a2e:	f003 0308 	and.w	r3, r3, #8
 8103a32:	2b08      	cmp	r3, #8
 8103a34:	d101      	bne.n	8103a3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8103a36:	2301      	movs	r3, #1
 8103a38:	e000      	b.n	8103a3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8103a3a:	2300      	movs	r3, #0
}
 8103a3c:	4618      	mov	r0, r3
 8103a3e:	370c      	adds	r7, #12
 8103a40:	46bd      	mov	sp, r7
 8103a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a46:	4770      	bx	lr

08103a48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8103a48:	b590      	push	{r4, r7, lr}
 8103a4a:	b089      	sub	sp, #36	@ 0x24
 8103a4c:	af00      	add	r7, sp, #0
 8103a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103a50:	2300      	movs	r3, #0
 8103a52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8103a54:	2300      	movs	r3, #0
 8103a56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	2b00      	cmp	r3, #0
 8103a5c:	d101      	bne.n	8103a62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8103a5e:	2301      	movs	r3, #1
 8103a60:	e18f      	b.n	8103d82 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	68db      	ldr	r3, [r3, #12]
 8103a66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a6c:	2b00      	cmp	r3, #0
 8103a6e:	d109      	bne.n	8103a84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8103a70:	6878      	ldr	r0, [r7, #4]
 8103a72:	f7ff f95b 	bl	8102d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	2200      	movs	r2, #0
 8103a7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	2200      	movs	r2, #0
 8103a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	4618      	mov	r0, r3
 8103a8a:	f7ff fef1 	bl	8103870 <LL_ADC_IsDeepPowerDownEnabled>
 8103a8e:	4603      	mov	r3, r0
 8103a90:	2b00      	cmp	r3, #0
 8103a92:	d004      	beq.n	8103a9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	4618      	mov	r0, r3
 8103a9a:	f7ff fed7 	bl	810384c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	4618      	mov	r0, r3
 8103aa4:	f7ff ff0c 	bl	81038c0 <LL_ADC_IsInternalRegulatorEnabled>
 8103aa8:	4603      	mov	r3, r0
 8103aaa:	2b00      	cmp	r3, #0
 8103aac:	d114      	bne.n	8103ad8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	681b      	ldr	r3, [r3, #0]
 8103ab2:	4618      	mov	r0, r3
 8103ab4:	f7ff fef0 	bl	8103898 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103ab8:	4b88      	ldr	r3, [pc, #544]	@ (8103cdc <HAL_ADC_Init+0x294>)
 8103aba:	681b      	ldr	r3, [r3, #0]
 8103abc:	099b      	lsrs	r3, r3, #6
 8103abe:	4a88      	ldr	r2, [pc, #544]	@ (8103ce0 <HAL_ADC_Init+0x298>)
 8103ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8103ac4:	099b      	lsrs	r3, r3, #6
 8103ac6:	3301      	adds	r3, #1
 8103ac8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103aca:	e002      	b.n	8103ad2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103acc:	68bb      	ldr	r3, [r7, #8]
 8103ace:	3b01      	subs	r3, #1
 8103ad0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103ad2:	68bb      	ldr	r3, [r7, #8]
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	d1f9      	bne.n	8103acc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103ad8:	687b      	ldr	r3, [r7, #4]
 8103ada:	681b      	ldr	r3, [r3, #0]
 8103adc:	4618      	mov	r0, r3
 8103ade:	f7ff feef 	bl	81038c0 <LL_ADC_IsInternalRegulatorEnabled>
 8103ae2:	4603      	mov	r3, r0
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d10d      	bne.n	8103b04 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103aec:	f043 0210 	orr.w	r2, r3, #16
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103af8:	f043 0201 	orr.w	r2, r3, #1
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8103b00:	2301      	movs	r3, #1
 8103b02:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	4618      	mov	r0, r3
 8103b0a:	f7ff ff63 	bl	81039d4 <LL_ADC_REG_IsConversionOngoing>
 8103b0e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b14:	f003 0310 	and.w	r3, r3, #16
 8103b18:	2b00      	cmp	r3, #0
 8103b1a:	f040 8129 	bne.w	8103d70 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8103b1e:	697b      	ldr	r3, [r7, #20]
 8103b20:	2b00      	cmp	r3, #0
 8103b22:	f040 8125 	bne.w	8103d70 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b2a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8103b2e:	f043 0202 	orr.w	r2, r3, #2
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	f7ff fefc 	bl	8103938 <LL_ADC_IsEnabled>
 8103b40:	4603      	mov	r3, r0
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	d136      	bne.n	8103bb4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	4a66      	ldr	r2, [pc, #408]	@ (8103ce4 <HAL_ADC_Init+0x29c>)
 8103b4c:	4293      	cmp	r3, r2
 8103b4e:	d004      	beq.n	8103b5a <HAL_ADC_Init+0x112>
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	681b      	ldr	r3, [r3, #0]
 8103b54:	4a64      	ldr	r2, [pc, #400]	@ (8103ce8 <HAL_ADC_Init+0x2a0>)
 8103b56:	4293      	cmp	r3, r2
 8103b58:	d10e      	bne.n	8103b78 <HAL_ADC_Init+0x130>
 8103b5a:	4862      	ldr	r0, [pc, #392]	@ (8103ce4 <HAL_ADC_Init+0x29c>)
 8103b5c:	f7ff feec 	bl	8103938 <LL_ADC_IsEnabled>
 8103b60:	4604      	mov	r4, r0
 8103b62:	4861      	ldr	r0, [pc, #388]	@ (8103ce8 <HAL_ADC_Init+0x2a0>)
 8103b64:	f7ff fee8 	bl	8103938 <LL_ADC_IsEnabled>
 8103b68:	4603      	mov	r3, r0
 8103b6a:	4323      	orrs	r3, r4
 8103b6c:	2b00      	cmp	r3, #0
 8103b6e:	bf0c      	ite	eq
 8103b70:	2301      	moveq	r3, #1
 8103b72:	2300      	movne	r3, #0
 8103b74:	b2db      	uxtb	r3, r3
 8103b76:	e008      	b.n	8103b8a <HAL_ADC_Init+0x142>
 8103b78:	485c      	ldr	r0, [pc, #368]	@ (8103cec <HAL_ADC_Init+0x2a4>)
 8103b7a:	f7ff fedd 	bl	8103938 <LL_ADC_IsEnabled>
 8103b7e:	4603      	mov	r3, r0
 8103b80:	2b00      	cmp	r3, #0
 8103b82:	bf0c      	ite	eq
 8103b84:	2301      	moveq	r3, #1
 8103b86:	2300      	movne	r3, #0
 8103b88:	b2db      	uxtb	r3, r3
 8103b8a:	2b00      	cmp	r3, #0
 8103b8c:	d012      	beq.n	8103bb4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	4a54      	ldr	r2, [pc, #336]	@ (8103ce4 <HAL_ADC_Init+0x29c>)
 8103b94:	4293      	cmp	r3, r2
 8103b96:	d004      	beq.n	8103ba2 <HAL_ADC_Init+0x15a>
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	4a52      	ldr	r2, [pc, #328]	@ (8103ce8 <HAL_ADC_Init+0x2a0>)
 8103b9e:	4293      	cmp	r3, r2
 8103ba0:	d101      	bne.n	8103ba6 <HAL_ADC_Init+0x15e>
 8103ba2:	4a53      	ldr	r2, [pc, #332]	@ (8103cf0 <HAL_ADC_Init+0x2a8>)
 8103ba4:	e000      	b.n	8103ba8 <HAL_ADC_Init+0x160>
 8103ba6:	4a53      	ldr	r2, [pc, #332]	@ (8103cf4 <HAL_ADC_Init+0x2ac>)
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	685b      	ldr	r3, [r3, #4]
 8103bac:	4619      	mov	r1, r3
 8103bae:	4610      	mov	r0, r2
 8103bb0:	f7ff fd1a 	bl	81035e8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103bb4:	f7ff fd0c 	bl	81035d0 <HAL_GetREVID>
 8103bb8:	4603      	mov	r3, r0
 8103bba:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103bbe:	4293      	cmp	r3, r2
 8103bc0:	d914      	bls.n	8103bec <HAL_ADC_Init+0x1a4>
 8103bc2:	687b      	ldr	r3, [r7, #4]
 8103bc4:	689b      	ldr	r3, [r3, #8]
 8103bc6:	2b10      	cmp	r3, #16
 8103bc8:	d110      	bne.n	8103bec <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	7d5b      	ldrb	r3, [r3, #21]
 8103bce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103bd4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103bd6:	687b      	ldr	r3, [r7, #4]
 8103bd8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103bda:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	7f1b      	ldrb	r3, [r3, #28]
 8103be0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103be2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103be4:	f043 030c 	orr.w	r3, r3, #12
 8103be8:	61bb      	str	r3, [r7, #24]
 8103bea:	e00d      	b.n	8103c08 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	7d5b      	ldrb	r3, [r3, #21]
 8103bf0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103bf6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103bfc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103bfe:	687b      	ldr	r3, [r7, #4]
 8103c00:	7f1b      	ldrb	r3, [r3, #28]
 8103c02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103c04:	4313      	orrs	r3, r2
 8103c06:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	7f1b      	ldrb	r3, [r3, #28]
 8103c0c:	2b01      	cmp	r3, #1
 8103c0e:	d106      	bne.n	8103c1e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	6a1b      	ldr	r3, [r3, #32]
 8103c14:	3b01      	subs	r3, #1
 8103c16:	045b      	lsls	r3, r3, #17
 8103c18:	69ba      	ldr	r2, [r7, #24]
 8103c1a:	4313      	orrs	r3, r2
 8103c1c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d009      	beq.n	8103c3a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c2a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103c32:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103c34:	69ba      	ldr	r2, [r7, #24]
 8103c36:	4313      	orrs	r3, r2
 8103c38:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	681b      	ldr	r3, [r3, #0]
 8103c3e:	68da      	ldr	r2, [r3, #12]
 8103c40:	4b2d      	ldr	r3, [pc, #180]	@ (8103cf8 <HAL_ADC_Init+0x2b0>)
 8103c42:	4013      	ands	r3, r2
 8103c44:	687a      	ldr	r2, [r7, #4]
 8103c46:	6812      	ldr	r2, [r2, #0]
 8103c48:	69b9      	ldr	r1, [r7, #24]
 8103c4a:	430b      	orrs	r3, r1
 8103c4c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	681b      	ldr	r3, [r3, #0]
 8103c52:	4618      	mov	r0, r3
 8103c54:	f7ff febe 	bl	81039d4 <LL_ADC_REG_IsConversionOngoing>
 8103c58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	4618      	mov	r0, r3
 8103c60:	f7ff fedf 	bl	8103a22 <LL_ADC_INJ_IsConversionOngoing>
 8103c64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103c66:	693b      	ldr	r3, [r7, #16]
 8103c68:	2b00      	cmp	r3, #0
 8103c6a:	d15f      	bne.n	8103d2c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103c6c:	68fb      	ldr	r3, [r7, #12]
 8103c6e:	2b00      	cmp	r3, #0
 8103c70:	d15c      	bne.n	8103d2c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	7d1b      	ldrb	r3, [r3, #20]
 8103c76:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8103c7c:	4313      	orrs	r3, r2
 8103c7e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	681b      	ldr	r3, [r3, #0]
 8103c84:	68db      	ldr	r3, [r3, #12]
 8103c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8103c8a:	f023 0303 	bic.w	r3, r3, #3
 8103c8e:	687a      	ldr	r2, [r7, #4]
 8103c90:	6812      	ldr	r2, [r2, #0]
 8103c92:	69b9      	ldr	r1, [r7, #24]
 8103c94:	430b      	orrs	r3, r1
 8103c96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8103c9e:	2b01      	cmp	r3, #1
 8103ca0:	d12e      	bne.n	8103d00 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103ca6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	681b      	ldr	r3, [r3, #0]
 8103cac:	691a      	ldr	r2, [r3, #16]
 8103cae:	4b13      	ldr	r3, [pc, #76]	@ (8103cfc <HAL_ADC_Init+0x2b4>)
 8103cb0:	4013      	ands	r3, r2
 8103cb2:	687a      	ldr	r2, [r7, #4]
 8103cb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8103cb6:	3a01      	subs	r2, #1
 8103cb8:	0411      	lsls	r1, r2, #16
 8103cba:	687a      	ldr	r2, [r7, #4]
 8103cbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8103cbe:	4311      	orrs	r1, r2
 8103cc0:	687a      	ldr	r2, [r7, #4]
 8103cc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8103cc4:	4311      	orrs	r1, r2
 8103cc6:	687a      	ldr	r2, [r7, #4]
 8103cc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8103cca:	430a      	orrs	r2, r1
 8103ccc:	431a      	orrs	r2, r3
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	681b      	ldr	r3, [r3, #0]
 8103cd2:	f042 0201 	orr.w	r2, r2, #1
 8103cd6:	611a      	str	r2, [r3, #16]
 8103cd8:	e01a      	b.n	8103d10 <HAL_ADC_Init+0x2c8>
 8103cda:	bf00      	nop
 8103cdc:	10000000 	.word	0x10000000
 8103ce0:	053e2d63 	.word	0x053e2d63
 8103ce4:	40022000 	.word	0x40022000
 8103ce8:	40022100 	.word	0x40022100
 8103cec:	58026000 	.word	0x58026000
 8103cf0:	40022300 	.word	0x40022300
 8103cf4:	58026300 	.word	0x58026300
 8103cf8:	fff0c003 	.word	0xfff0c003
 8103cfc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	681b      	ldr	r3, [r3, #0]
 8103d04:	691a      	ldr	r2, [r3, #16]
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	681b      	ldr	r3, [r3, #0]
 8103d0a:	f022 0201 	bic.w	r2, r2, #1
 8103d0e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	691b      	ldr	r3, [r3, #16]
 8103d16:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	681b      	ldr	r3, [r3, #0]
 8103d22:	430a      	orrs	r2, r1
 8103d24:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8103d26:	6878      	ldr	r0, [r7, #4]
 8103d28:	f000 ff32 	bl	8104b90 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	68db      	ldr	r3, [r3, #12]
 8103d30:	2b01      	cmp	r3, #1
 8103d32:	d10c      	bne.n	8103d4e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103d3a:	f023 010f 	bic.w	r1, r3, #15
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	699b      	ldr	r3, [r3, #24]
 8103d42:	1e5a      	subs	r2, r3, #1
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	430a      	orrs	r2, r1
 8103d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8103d4c:	e007      	b.n	8103d5e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	681b      	ldr	r3, [r3, #0]
 8103d58:	f022 020f 	bic.w	r2, r2, #15
 8103d5c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d62:	f023 0303 	bic.w	r3, r3, #3
 8103d66:	f043 0201 	orr.w	r2, r3, #1
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8103d6e:	e007      	b.n	8103d80 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103d74:	f043 0210 	orr.w	r2, r3, #16
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103d7c:	2301      	movs	r3, #1
 8103d7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8103d82:	4618      	mov	r0, r3
 8103d84:	3724      	adds	r7, #36	@ 0x24
 8103d86:	46bd      	mov	sp, r7
 8103d88:	bd90      	pop	{r4, r7, pc}
 8103d8a:	bf00      	nop

08103d8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8103d8c:	b580      	push	{r7, lr}
 8103d8e:	b086      	sub	sp, #24
 8103d90:	af00      	add	r7, sp, #0
 8103d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	4a5d      	ldr	r2, [pc, #372]	@ (8103f10 <HAL_ADC_Start+0x184>)
 8103d9a:	4293      	cmp	r3, r2
 8103d9c:	d004      	beq.n	8103da8 <HAL_ADC_Start+0x1c>
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	4a5c      	ldr	r2, [pc, #368]	@ (8103f14 <HAL_ADC_Start+0x188>)
 8103da4:	4293      	cmp	r3, r2
 8103da6:	d101      	bne.n	8103dac <HAL_ADC_Start+0x20>
 8103da8:	4b5b      	ldr	r3, [pc, #364]	@ (8103f18 <HAL_ADC_Start+0x18c>)
 8103daa:	e000      	b.n	8103dae <HAL_ADC_Start+0x22>
 8103dac:	4b5b      	ldr	r3, [pc, #364]	@ (8103f1c <HAL_ADC_Start+0x190>)
 8103dae:	4618      	mov	r0, r3
 8103db0:	f7ff fd30 	bl	8103814 <LL_ADC_GetMultimode>
 8103db4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	4618      	mov	r0, r3
 8103dbc:	f7ff fe0a 	bl	81039d4 <LL_ADC_REG_IsConversionOngoing>
 8103dc0:	4603      	mov	r3, r0
 8103dc2:	2b00      	cmp	r3, #0
 8103dc4:	f040 809c 	bne.w	8103f00 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8103dc8:	687b      	ldr	r3, [r7, #4]
 8103dca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103dce:	2b01      	cmp	r3, #1
 8103dd0:	d101      	bne.n	8103dd6 <HAL_ADC_Start+0x4a>
 8103dd2:	2302      	movs	r3, #2
 8103dd4:	e097      	b.n	8103f06 <HAL_ADC_Start+0x17a>
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	2201      	movs	r2, #1
 8103dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8103dde:	6878      	ldr	r0, [r7, #4]
 8103de0:	f000 fdec 	bl	81049bc <ADC_Enable>
 8103de4:	4603      	mov	r3, r0
 8103de6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8103de8:	7dfb      	ldrb	r3, [r7, #23]
 8103dea:	2b00      	cmp	r3, #0
 8103dec:	f040 8083 	bne.w	8103ef6 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103df4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103df8:	f023 0301 	bic.w	r3, r3, #1
 8103dfc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	4a42      	ldr	r2, [pc, #264]	@ (8103f14 <HAL_ADC_Start+0x188>)
 8103e0a:	4293      	cmp	r3, r2
 8103e0c:	d002      	beq.n	8103e14 <HAL_ADC_Start+0x88>
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	e000      	b.n	8103e16 <HAL_ADC_Start+0x8a>
 8103e14:	4b3e      	ldr	r3, [pc, #248]	@ (8103f10 <HAL_ADC_Start+0x184>)
 8103e16:	687a      	ldr	r2, [r7, #4]
 8103e18:	6812      	ldr	r2, [r2, #0]
 8103e1a:	4293      	cmp	r3, r2
 8103e1c:	d002      	beq.n	8103e24 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103e1e:	693b      	ldr	r3, [r7, #16]
 8103e20:	2b00      	cmp	r3, #0
 8103e22:	d105      	bne.n	8103e30 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103e28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8103e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103e3c:	d106      	bne.n	8103e4c <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103e42:	f023 0206 	bic.w	r2, r3, #6
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	659a      	str	r2, [r3, #88]	@ 0x58
 8103e4a:	e002      	b.n	8103e52 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	2200      	movs	r2, #0
 8103e50:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	681b      	ldr	r3, [r3, #0]
 8103e56:	221c      	movs	r2, #28
 8103e58:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	2200      	movs	r2, #0
 8103e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	4a2b      	ldr	r2, [pc, #172]	@ (8103f14 <HAL_ADC_Start+0x188>)
 8103e68:	4293      	cmp	r3, r2
 8103e6a:	d002      	beq.n	8103e72 <HAL_ADC_Start+0xe6>
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	e000      	b.n	8103e74 <HAL_ADC_Start+0xe8>
 8103e72:	4b27      	ldr	r3, [pc, #156]	@ (8103f10 <HAL_ADC_Start+0x184>)
 8103e74:	687a      	ldr	r2, [r7, #4]
 8103e76:	6812      	ldr	r2, [r2, #0]
 8103e78:	4293      	cmp	r3, r2
 8103e7a:	d008      	beq.n	8103e8e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103e7c:	693b      	ldr	r3, [r7, #16]
 8103e7e:	2b00      	cmp	r3, #0
 8103e80:	d005      	beq.n	8103e8e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103e82:	693b      	ldr	r3, [r7, #16]
 8103e84:	2b05      	cmp	r3, #5
 8103e86:	d002      	beq.n	8103e8e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103e88:	693b      	ldr	r3, [r7, #16]
 8103e8a:	2b09      	cmp	r3, #9
 8103e8c:	d114      	bne.n	8103eb8 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	681b      	ldr	r3, [r3, #0]
 8103e92:	68db      	ldr	r3, [r3, #12]
 8103e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103e98:	2b00      	cmp	r3, #0
 8103e9a:	d007      	beq.n	8103eac <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ea0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8103ea4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	4618      	mov	r0, r3
 8103eb2:	f7ff fd67 	bl	8103984 <LL_ADC_REG_StartConversion>
 8103eb6:	e025      	b.n	8103f04 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ebc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	4a12      	ldr	r2, [pc, #72]	@ (8103f14 <HAL_ADC_Start+0x188>)
 8103eca:	4293      	cmp	r3, r2
 8103ecc:	d002      	beq.n	8103ed4 <HAL_ADC_Start+0x148>
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	e000      	b.n	8103ed6 <HAL_ADC_Start+0x14a>
 8103ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8103f10 <HAL_ADC_Start+0x184>)
 8103ed6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8103ed8:	68fb      	ldr	r3, [r7, #12]
 8103eda:	68db      	ldr	r3, [r3, #12]
 8103edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103ee0:	2b00      	cmp	r3, #0
 8103ee2:	d00f      	beq.n	8103f04 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103ee8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8103eec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	655a      	str	r2, [r3, #84]	@ 0x54
 8103ef4:	e006      	b.n	8103f04 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	2200      	movs	r2, #0
 8103efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8103efe:	e001      	b.n	8103f04 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8103f00:	2302      	movs	r3, #2
 8103f02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8103f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8103f06:	4618      	mov	r0, r3
 8103f08:	3718      	adds	r7, #24
 8103f0a:	46bd      	mov	sp, r7
 8103f0c:	bd80      	pop	{r7, pc}
 8103f0e:	bf00      	nop
 8103f10:	40022000 	.word	0x40022000
 8103f14:	40022100 	.word	0x40022100
 8103f18:	40022300 	.word	0x40022300
 8103f1c:	58026300 	.word	0x58026300

08103f20 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8103f20:	b580      	push	{r7, lr}
 8103f22:	b084      	sub	sp, #16
 8103f24:	af00      	add	r7, sp, #0
 8103f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8103f28:	687b      	ldr	r3, [r7, #4]
 8103f2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103f2e:	2b01      	cmp	r3, #1
 8103f30:	d101      	bne.n	8103f36 <HAL_ADC_Stop+0x16>
 8103f32:	2302      	movs	r3, #2
 8103f34:	e023      	b.n	8103f7e <HAL_ADC_Stop+0x5e>
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	2201      	movs	r2, #1
 8103f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8103f3e:	2103      	movs	r1, #3
 8103f40:	6878      	ldr	r0, [r7, #4]
 8103f42:	f000 fc7f 	bl	8104844 <ADC_ConversionStop>
 8103f46:	4603      	mov	r3, r0
 8103f48:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8103f4a:	7bfb      	ldrb	r3, [r7, #15]
 8103f4c:	2b00      	cmp	r3, #0
 8103f4e:	d111      	bne.n	8103f74 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8103f50:	6878      	ldr	r0, [r7, #4]
 8103f52:	f000 fdbd 	bl	8104ad0 <ADC_Disable>
 8103f56:	4603      	mov	r3, r0
 8103f58:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8103f5a:	7bfb      	ldrb	r3, [r7, #15]
 8103f5c:	2b00      	cmp	r3, #0
 8103f5e:	d109      	bne.n	8103f74 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f64:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8103f68:	f023 0301 	bic.w	r3, r3, #1
 8103f6c:	f043 0201 	orr.w	r2, r3, #1
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	2200      	movs	r2, #0
 8103f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8103f7e:	4618      	mov	r0, r3
 8103f80:	3710      	adds	r7, #16
 8103f82:	46bd      	mov	sp, r7
 8103f84:	bd80      	pop	{r7, pc}
	...

08103f88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8103f88:	b580      	push	{r7, lr}
 8103f8a:	b088      	sub	sp, #32
 8103f8c:	af00      	add	r7, sp, #0
 8103f8e:	6078      	str	r0, [r7, #4]
 8103f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	681b      	ldr	r3, [r3, #0]
 8103f96:	4a72      	ldr	r2, [pc, #456]	@ (8104160 <HAL_ADC_PollForConversion+0x1d8>)
 8103f98:	4293      	cmp	r3, r2
 8103f9a:	d004      	beq.n	8103fa6 <HAL_ADC_PollForConversion+0x1e>
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	681b      	ldr	r3, [r3, #0]
 8103fa0:	4a70      	ldr	r2, [pc, #448]	@ (8104164 <HAL_ADC_PollForConversion+0x1dc>)
 8103fa2:	4293      	cmp	r3, r2
 8103fa4:	d101      	bne.n	8103faa <HAL_ADC_PollForConversion+0x22>
 8103fa6:	4b70      	ldr	r3, [pc, #448]	@ (8104168 <HAL_ADC_PollForConversion+0x1e0>)
 8103fa8:	e000      	b.n	8103fac <HAL_ADC_PollForConversion+0x24>
 8103faa:	4b70      	ldr	r3, [pc, #448]	@ (810416c <HAL_ADC_PollForConversion+0x1e4>)
 8103fac:	4618      	mov	r0, r3
 8103fae:	f7ff fc31 	bl	8103814 <LL_ADC_GetMultimode>
 8103fb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	691b      	ldr	r3, [r3, #16]
 8103fb8:	2b08      	cmp	r3, #8
 8103fba:	d102      	bne.n	8103fc2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8103fbc:	2308      	movs	r3, #8
 8103fbe:	61fb      	str	r3, [r7, #28]
 8103fc0:	e037      	b.n	8104032 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103fc2:	697b      	ldr	r3, [r7, #20]
 8103fc4:	2b00      	cmp	r3, #0
 8103fc6:	d005      	beq.n	8103fd4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103fc8:	697b      	ldr	r3, [r7, #20]
 8103fca:	2b05      	cmp	r3, #5
 8103fcc:	d002      	beq.n	8103fd4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103fce:	697b      	ldr	r3, [r7, #20]
 8103fd0:	2b09      	cmp	r3, #9
 8103fd2:	d111      	bne.n	8103ff8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	68db      	ldr	r3, [r3, #12]
 8103fda:	f003 0301 	and.w	r3, r3, #1
 8103fde:	2b00      	cmp	r3, #0
 8103fe0:	d007      	beq.n	8103ff2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fe6:	f043 0220 	orr.w	r2, r3, #32
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8103fee:	2301      	movs	r3, #1
 8103ff0:	e0b1      	b.n	8104156 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8103ff2:	2304      	movs	r3, #4
 8103ff4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8103ff6:	e01c      	b.n	8104032 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	4a58      	ldr	r2, [pc, #352]	@ (8104160 <HAL_ADC_PollForConversion+0x1d8>)
 8103ffe:	4293      	cmp	r3, r2
 8104000:	d004      	beq.n	810400c <HAL_ADC_PollForConversion+0x84>
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	4a57      	ldr	r2, [pc, #348]	@ (8104164 <HAL_ADC_PollForConversion+0x1dc>)
 8104008:	4293      	cmp	r3, r2
 810400a:	d101      	bne.n	8104010 <HAL_ADC_PollForConversion+0x88>
 810400c:	4b56      	ldr	r3, [pc, #344]	@ (8104168 <HAL_ADC_PollForConversion+0x1e0>)
 810400e:	e000      	b.n	8104012 <HAL_ADC_PollForConversion+0x8a>
 8104010:	4b56      	ldr	r3, [pc, #344]	@ (810416c <HAL_ADC_PollForConversion+0x1e4>)
 8104012:	4618      	mov	r0, r3
 8104014:	f7ff fc0c 	bl	8103830 <LL_ADC_GetMultiDMATransfer>
 8104018:	4603      	mov	r3, r0
 810401a:	2b00      	cmp	r3, #0
 810401c:	d007      	beq.n	810402e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104022:	f043 0220 	orr.w	r2, r3, #32
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 810402a:	2301      	movs	r3, #1
 810402c:	e093      	b.n	8104156 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 810402e:	2304      	movs	r3, #4
 8104030:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8104032:	f7ff fa9d 	bl	8103570 <HAL_GetTick>
 8104036:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104038:	e021      	b.n	810407e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 810403a:	683b      	ldr	r3, [r7, #0]
 810403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104040:	d01d      	beq.n	810407e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8104042:	f7ff fa95 	bl	8103570 <HAL_GetTick>
 8104046:	4602      	mov	r2, r0
 8104048:	693b      	ldr	r3, [r7, #16]
 810404a:	1ad3      	subs	r3, r2, r3
 810404c:	683a      	ldr	r2, [r7, #0]
 810404e:	429a      	cmp	r2, r3
 8104050:	d302      	bcc.n	8104058 <HAL_ADC_PollForConversion+0xd0>
 8104052:	683b      	ldr	r3, [r7, #0]
 8104054:	2b00      	cmp	r3, #0
 8104056:	d112      	bne.n	810407e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	681a      	ldr	r2, [r3, #0]
 810405e:	69fb      	ldr	r3, [r7, #28]
 8104060:	4013      	ands	r3, r2
 8104062:	2b00      	cmp	r3, #0
 8104064:	d10b      	bne.n	810407e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810406a:	f043 0204 	orr.w	r2, r3, #4
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	2200      	movs	r2, #0
 8104076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 810407a:	2303      	movs	r3, #3
 810407c:	e06b      	b.n	8104156 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	681a      	ldr	r2, [r3, #0]
 8104084:	69fb      	ldr	r3, [r7, #28]
 8104086:	4013      	ands	r3, r2
 8104088:	2b00      	cmp	r3, #0
 810408a:	d0d6      	beq.n	810403a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104090:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	4618      	mov	r0, r3
 810409e:	f7ff fb2b 	bl	81036f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 81040a2:	4603      	mov	r3, r0
 81040a4:	2b00      	cmp	r3, #0
 81040a6:	d01c      	beq.n	81040e2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	7d5b      	ldrb	r3, [r3, #21]
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d118      	bne.n	81040e2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	681b      	ldr	r3, [r3, #0]
 81040b6:	f003 0308 	and.w	r3, r3, #8
 81040ba:	2b08      	cmp	r3, #8
 81040bc:	d111      	bne.n	81040e2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81040c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81040ca:	687b      	ldr	r3, [r7, #4]
 81040cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81040ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81040d2:	2b00      	cmp	r3, #0
 81040d4:	d105      	bne.n	81040e2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81040da:	f043 0201 	orr.w	r2, r3, #1
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a1f      	ldr	r2, [pc, #124]	@ (8104164 <HAL_ADC_PollForConversion+0x1dc>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d002      	beq.n	81040f2 <HAL_ADC_PollForConversion+0x16a>
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	e000      	b.n	81040f4 <HAL_ADC_PollForConversion+0x16c>
 81040f2:	4b1b      	ldr	r3, [pc, #108]	@ (8104160 <HAL_ADC_PollForConversion+0x1d8>)
 81040f4:	687a      	ldr	r2, [r7, #4]
 81040f6:	6812      	ldr	r2, [r2, #0]
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d008      	beq.n	810410e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81040fc:	697b      	ldr	r3, [r7, #20]
 81040fe:	2b00      	cmp	r3, #0
 8104100:	d005      	beq.n	810410e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104102:	697b      	ldr	r3, [r7, #20]
 8104104:	2b05      	cmp	r3, #5
 8104106:	d002      	beq.n	810410e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104108:	697b      	ldr	r3, [r7, #20]
 810410a:	2b09      	cmp	r3, #9
 810410c:	d104      	bne.n	8104118 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	681b      	ldr	r3, [r3, #0]
 8104112:	68db      	ldr	r3, [r3, #12]
 8104114:	61bb      	str	r3, [r7, #24]
 8104116:	e00c      	b.n	8104132 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	681b      	ldr	r3, [r3, #0]
 810411c:	4a11      	ldr	r2, [pc, #68]	@ (8104164 <HAL_ADC_PollForConversion+0x1dc>)
 810411e:	4293      	cmp	r3, r2
 8104120:	d002      	beq.n	8104128 <HAL_ADC_PollForConversion+0x1a0>
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	e000      	b.n	810412a <HAL_ADC_PollForConversion+0x1a2>
 8104128:	4b0d      	ldr	r3, [pc, #52]	@ (8104160 <HAL_ADC_PollForConversion+0x1d8>)
 810412a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 810412c:	68fb      	ldr	r3, [r7, #12]
 810412e:	68db      	ldr	r3, [r3, #12]
 8104130:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8104132:	69fb      	ldr	r3, [r7, #28]
 8104134:	2b08      	cmp	r3, #8
 8104136:	d104      	bne.n	8104142 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	2208      	movs	r2, #8
 810413e:	601a      	str	r2, [r3, #0]
 8104140:	e008      	b.n	8104154 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8104142:	69bb      	ldr	r3, [r7, #24]
 8104144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104148:	2b00      	cmp	r3, #0
 810414a:	d103      	bne.n	8104154 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	220c      	movs	r2, #12
 8104152:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8104154:	2300      	movs	r3, #0
}
 8104156:	4618      	mov	r0, r3
 8104158:	3720      	adds	r7, #32
 810415a:	46bd      	mov	sp, r7
 810415c:	bd80      	pop	{r7, pc}
 810415e:	bf00      	nop
 8104160:	40022000 	.word	0x40022000
 8104164:	40022100 	.word	0x40022100
 8104168:	40022300 	.word	0x40022300
 810416c:	58026300 	.word	0x58026300

08104170 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8104170:	b480      	push	{r7}
 8104172:	b083      	sub	sp, #12
 8104174:	af00      	add	r7, sp, #0
 8104176:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 810417e:	4618      	mov	r0, r3
 8104180:	370c      	adds	r7, #12
 8104182:	46bd      	mov	sp, r7
 8104184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104188:	4770      	bx	lr
	...

0810418c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810418c:	b590      	push	{r4, r7, lr}
 810418e:	b0a1      	sub	sp, #132	@ 0x84
 8104190:	af00      	add	r7, sp, #0
 8104192:	6078      	str	r0, [r7, #4]
 8104194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104196:	2300      	movs	r3, #0
 8104198:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810419c:	2300      	movs	r3, #0
 810419e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81041a0:	683b      	ldr	r3, [r7, #0]
 81041a2:	68db      	ldr	r3, [r3, #12]
 81041a4:	4a65      	ldr	r2, [pc, #404]	@ (810433c <HAL_ADC_ConfigChannel+0x1b0>)
 81041a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81041ae:	2b01      	cmp	r3, #1
 81041b0:	d101      	bne.n	81041b6 <HAL_ADC_ConfigChannel+0x2a>
 81041b2:	2302      	movs	r3, #2
 81041b4:	e32e      	b.n	8104814 <HAL_ADC_ConfigChannel+0x688>
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	2201      	movs	r2, #1
 81041ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	681b      	ldr	r3, [r3, #0]
 81041c2:	4618      	mov	r0, r3
 81041c4:	f7ff fc06 	bl	81039d4 <LL_ADC_REG_IsConversionOngoing>
 81041c8:	4603      	mov	r3, r0
 81041ca:	2b00      	cmp	r3, #0
 81041cc:	f040 8313 	bne.w	81047f6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 81041d0:	683b      	ldr	r3, [r7, #0]
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	2b00      	cmp	r3, #0
 81041d6:	db2c      	blt.n	8104232 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81041d8:	683b      	ldr	r3, [r7, #0]
 81041da:	681b      	ldr	r3, [r3, #0]
 81041dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	d108      	bne.n	81041f6 <HAL_ADC_ConfigChannel+0x6a>
 81041e4:	683b      	ldr	r3, [r7, #0]
 81041e6:	681b      	ldr	r3, [r3, #0]
 81041e8:	0e9b      	lsrs	r3, r3, #26
 81041ea:	f003 031f 	and.w	r3, r3, #31
 81041ee:	2201      	movs	r2, #1
 81041f0:	fa02 f303 	lsl.w	r3, r2, r3
 81041f4:	e016      	b.n	8104224 <HAL_ADC_ConfigChannel+0x98>
 81041f6:	683b      	ldr	r3, [r7, #0]
 81041f8:	681b      	ldr	r3, [r3, #0]
 81041fa:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81041fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81041fe:	fa93 f3a3 	rbit	r3, r3
 8104202:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8104204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8104206:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8104208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810420a:	2b00      	cmp	r3, #0
 810420c:	d101      	bne.n	8104212 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 810420e:	2320      	movs	r3, #32
 8104210:	e003      	b.n	810421a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8104212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8104214:	fab3 f383 	clz	r3, r3
 8104218:	b2db      	uxtb	r3, r3
 810421a:	f003 031f 	and.w	r3, r3, #31
 810421e:	2201      	movs	r2, #1
 8104220:	fa02 f303 	lsl.w	r3, r2, r3
 8104224:	687a      	ldr	r2, [r7, #4]
 8104226:	6812      	ldr	r2, [r2, #0]
 8104228:	69d1      	ldr	r1, [r2, #28]
 810422a:	687a      	ldr	r2, [r7, #4]
 810422c:	6812      	ldr	r2, [r2, #0]
 810422e:	430b      	orrs	r3, r1
 8104230:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8104232:	687b      	ldr	r3, [r7, #4]
 8104234:	6818      	ldr	r0, [r3, #0]
 8104236:	683b      	ldr	r3, [r7, #0]
 8104238:	6859      	ldr	r1, [r3, #4]
 810423a:	683b      	ldr	r3, [r7, #0]
 810423c:	681b      	ldr	r3, [r3, #0]
 810423e:	461a      	mov	r2, r3
 8104240:	f7ff fa6d 	bl	810371e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	681b      	ldr	r3, [r3, #0]
 8104248:	4618      	mov	r0, r3
 810424a:	f7ff fbc3 	bl	81039d4 <LL_ADC_REG_IsConversionOngoing>
 810424e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	4618      	mov	r0, r3
 8104256:	f7ff fbe4 	bl	8103a22 <LL_ADC_INJ_IsConversionOngoing>
 810425a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810425c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810425e:	2b00      	cmp	r3, #0
 8104260:	f040 80b8 	bne.w	81043d4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8104264:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8104266:	2b00      	cmp	r3, #0
 8104268:	f040 80b4 	bne.w	81043d4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	6818      	ldr	r0, [r3, #0]
 8104270:	683b      	ldr	r3, [r7, #0]
 8104272:	6819      	ldr	r1, [r3, #0]
 8104274:	683b      	ldr	r3, [r7, #0]
 8104276:	689b      	ldr	r3, [r3, #8]
 8104278:	461a      	mov	r2, r3
 810427a:	f7ff fa7c 	bl	8103776 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810427e:	4b30      	ldr	r3, [pc, #192]	@ (8104340 <HAL_ADC_ConfigChannel+0x1b4>)
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8104286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810428a:	d10b      	bne.n	81042a4 <HAL_ADC_ConfigChannel+0x118>
 810428c:	683b      	ldr	r3, [r7, #0]
 810428e:	695a      	ldr	r2, [r3, #20]
 8104290:	687b      	ldr	r3, [r7, #4]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	68db      	ldr	r3, [r3, #12]
 8104296:	089b      	lsrs	r3, r3, #2
 8104298:	f003 0307 	and.w	r3, r3, #7
 810429c:	005b      	lsls	r3, r3, #1
 810429e:	fa02 f303 	lsl.w	r3, r2, r3
 81042a2:	e01d      	b.n	81042e0 <HAL_ADC_ConfigChannel+0x154>
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	68db      	ldr	r3, [r3, #12]
 81042aa:	f003 0310 	and.w	r3, r3, #16
 81042ae:	2b00      	cmp	r3, #0
 81042b0:	d10b      	bne.n	81042ca <HAL_ADC_ConfigChannel+0x13e>
 81042b2:	683b      	ldr	r3, [r7, #0]
 81042b4:	695a      	ldr	r2, [r3, #20]
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	68db      	ldr	r3, [r3, #12]
 81042bc:	089b      	lsrs	r3, r3, #2
 81042be:	f003 0307 	and.w	r3, r3, #7
 81042c2:	005b      	lsls	r3, r3, #1
 81042c4:	fa02 f303 	lsl.w	r3, r2, r3
 81042c8:	e00a      	b.n	81042e0 <HAL_ADC_ConfigChannel+0x154>
 81042ca:	683b      	ldr	r3, [r7, #0]
 81042cc:	695a      	ldr	r2, [r3, #20]
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	68db      	ldr	r3, [r3, #12]
 81042d4:	089b      	lsrs	r3, r3, #2
 81042d6:	f003 0304 	and.w	r3, r3, #4
 81042da:	005b      	lsls	r3, r3, #1
 81042dc:	fa02 f303 	lsl.w	r3, r2, r3
 81042e0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81042e2:	683b      	ldr	r3, [r7, #0]
 81042e4:	691b      	ldr	r3, [r3, #16]
 81042e6:	2b04      	cmp	r3, #4
 81042e8:	d02c      	beq.n	8104344 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	6818      	ldr	r0, [r3, #0]
 81042ee:	683b      	ldr	r3, [r7, #0]
 81042f0:	6919      	ldr	r1, [r3, #16]
 81042f2:	683b      	ldr	r3, [r7, #0]
 81042f4:	681a      	ldr	r2, [r3, #0]
 81042f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81042f8:	f7ff f9aa 	bl	8103650 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	6818      	ldr	r0, [r3, #0]
 8104300:	683b      	ldr	r3, [r7, #0]
 8104302:	6919      	ldr	r1, [r3, #16]
 8104304:	683b      	ldr	r3, [r7, #0]
 8104306:	7e5b      	ldrb	r3, [r3, #25]
 8104308:	2b01      	cmp	r3, #1
 810430a:	d102      	bne.n	8104312 <HAL_ADC_ConfigChannel+0x186>
 810430c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8104310:	e000      	b.n	8104314 <HAL_ADC_ConfigChannel+0x188>
 8104312:	2300      	movs	r3, #0
 8104314:	461a      	mov	r2, r3
 8104316:	f7ff f9d4 	bl	81036c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	6818      	ldr	r0, [r3, #0]
 810431e:	683b      	ldr	r3, [r7, #0]
 8104320:	6919      	ldr	r1, [r3, #16]
 8104322:	683b      	ldr	r3, [r7, #0]
 8104324:	7e1b      	ldrb	r3, [r3, #24]
 8104326:	2b01      	cmp	r3, #1
 8104328:	d102      	bne.n	8104330 <HAL_ADC_ConfigChannel+0x1a4>
 810432a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810432e:	e000      	b.n	8104332 <HAL_ADC_ConfigChannel+0x1a6>
 8104330:	2300      	movs	r3, #0
 8104332:	461a      	mov	r2, r3
 8104334:	f7ff f9ac 	bl	8103690 <LL_ADC_SetDataRightShift>
 8104338:	e04c      	b.n	81043d4 <HAL_ADC_ConfigChannel+0x248>
 810433a:	bf00      	nop
 810433c:	47ff0000 	.word	0x47ff0000
 8104340:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810434a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810434e:	683b      	ldr	r3, [r7, #0]
 8104350:	681b      	ldr	r3, [r3, #0]
 8104352:	069b      	lsls	r3, r3, #26
 8104354:	429a      	cmp	r2, r3
 8104356:	d107      	bne.n	8104368 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8104358:	687b      	ldr	r3, [r7, #4]
 810435a:	681b      	ldr	r3, [r3, #0]
 810435c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8104366:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810436e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104372:	683b      	ldr	r3, [r7, #0]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	069b      	lsls	r3, r3, #26
 8104378:	429a      	cmp	r2, r3
 810437a:	d107      	bne.n	810438c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	681b      	ldr	r3, [r3, #0]
 8104380:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810438a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104392:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104396:	683b      	ldr	r3, [r7, #0]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	069b      	lsls	r3, r3, #26
 810439c:	429a      	cmp	r2, r3
 810439e:	d107      	bne.n	81043b0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81043ae:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81043b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81043ba:	683b      	ldr	r3, [r7, #0]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	069b      	lsls	r3, r3, #26
 81043c0:	429a      	cmp	r2, r3
 81043c2:	d107      	bne.n	81043d4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81043d2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	4618      	mov	r0, r3
 81043da:	f7ff faad 	bl	8103938 <LL_ADC_IsEnabled>
 81043de:	4603      	mov	r3, r0
 81043e0:	2b00      	cmp	r3, #0
 81043e2:	f040 8211 	bne.w	8104808 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	6818      	ldr	r0, [r3, #0]
 81043ea:	683b      	ldr	r3, [r7, #0]
 81043ec:	6819      	ldr	r1, [r3, #0]
 81043ee:	683b      	ldr	r3, [r7, #0]
 81043f0:	68db      	ldr	r3, [r3, #12]
 81043f2:	461a      	mov	r2, r3
 81043f4:	f7ff f9ea 	bl	81037cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81043f8:	683b      	ldr	r3, [r7, #0]
 81043fa:	68db      	ldr	r3, [r3, #12]
 81043fc:	4aa1      	ldr	r2, [pc, #644]	@ (8104684 <HAL_ADC_ConfigChannel+0x4f8>)
 81043fe:	4293      	cmp	r3, r2
 8104400:	f040 812e 	bne.w	8104660 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104404:	687b      	ldr	r3, [r7, #4]
 8104406:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104408:	683b      	ldr	r3, [r7, #0]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104410:	2b00      	cmp	r3, #0
 8104412:	d10b      	bne.n	810442c <HAL_ADC_ConfigChannel+0x2a0>
 8104414:	683b      	ldr	r3, [r7, #0]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	0e9b      	lsrs	r3, r3, #26
 810441a:	3301      	adds	r3, #1
 810441c:	f003 031f 	and.w	r3, r3, #31
 8104420:	2b09      	cmp	r3, #9
 8104422:	bf94      	ite	ls
 8104424:	2301      	movls	r3, #1
 8104426:	2300      	movhi	r3, #0
 8104428:	b2db      	uxtb	r3, r3
 810442a:	e019      	b.n	8104460 <HAL_ADC_ConfigChannel+0x2d4>
 810442c:	683b      	ldr	r3, [r7, #0]
 810442e:	681b      	ldr	r3, [r3, #0]
 8104430:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8104434:	fa93 f3a3 	rbit	r3, r3
 8104438:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 810443a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810443c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 810443e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8104440:	2b00      	cmp	r3, #0
 8104442:	d101      	bne.n	8104448 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8104444:	2320      	movs	r3, #32
 8104446:	e003      	b.n	8104450 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8104448:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810444a:	fab3 f383 	clz	r3, r3
 810444e:	b2db      	uxtb	r3, r3
 8104450:	3301      	adds	r3, #1
 8104452:	f003 031f 	and.w	r3, r3, #31
 8104456:	2b09      	cmp	r3, #9
 8104458:	bf94      	ite	ls
 810445a:	2301      	movls	r3, #1
 810445c:	2300      	movhi	r3, #0
 810445e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104460:	2b00      	cmp	r3, #0
 8104462:	d079      	beq.n	8104558 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104464:	683b      	ldr	r3, [r7, #0]
 8104466:	681b      	ldr	r3, [r3, #0]
 8104468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810446c:	2b00      	cmp	r3, #0
 810446e:	d107      	bne.n	8104480 <HAL_ADC_ConfigChannel+0x2f4>
 8104470:	683b      	ldr	r3, [r7, #0]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	0e9b      	lsrs	r3, r3, #26
 8104476:	3301      	adds	r3, #1
 8104478:	069b      	lsls	r3, r3, #26
 810447a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810447e:	e015      	b.n	81044ac <HAL_ADC_ConfigChannel+0x320>
 8104480:	683b      	ldr	r3, [r7, #0]
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104488:	fa93 f3a3 	rbit	r3, r3
 810448c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 810448e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8104490:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8104492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104494:	2b00      	cmp	r3, #0
 8104496:	d101      	bne.n	810449c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8104498:	2320      	movs	r3, #32
 810449a:	e003      	b.n	81044a4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 810449c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810449e:	fab3 f383 	clz	r3, r3
 81044a2:	b2db      	uxtb	r3, r3
 81044a4:	3301      	adds	r3, #1
 81044a6:	069b      	lsls	r3, r3, #26
 81044a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81044ac:	683b      	ldr	r3, [r7, #0]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81044b4:	2b00      	cmp	r3, #0
 81044b6:	d109      	bne.n	81044cc <HAL_ADC_ConfigChannel+0x340>
 81044b8:	683b      	ldr	r3, [r7, #0]
 81044ba:	681b      	ldr	r3, [r3, #0]
 81044bc:	0e9b      	lsrs	r3, r3, #26
 81044be:	3301      	adds	r3, #1
 81044c0:	f003 031f 	and.w	r3, r3, #31
 81044c4:	2101      	movs	r1, #1
 81044c6:	fa01 f303 	lsl.w	r3, r1, r3
 81044ca:	e017      	b.n	81044fc <HAL_ADC_ConfigChannel+0x370>
 81044cc:	683b      	ldr	r3, [r7, #0]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81044d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81044d4:	fa93 f3a3 	rbit	r3, r3
 81044d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 81044da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81044dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 81044de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81044e0:	2b00      	cmp	r3, #0
 81044e2:	d101      	bne.n	81044e8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 81044e4:	2320      	movs	r3, #32
 81044e6:	e003      	b.n	81044f0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 81044e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81044ea:	fab3 f383 	clz	r3, r3
 81044ee:	b2db      	uxtb	r3, r3
 81044f0:	3301      	adds	r3, #1
 81044f2:	f003 031f 	and.w	r3, r3, #31
 81044f6:	2101      	movs	r1, #1
 81044f8:	fa01 f303 	lsl.w	r3, r1, r3
 81044fc:	ea42 0103 	orr.w	r1, r2, r3
 8104500:	683b      	ldr	r3, [r7, #0]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104508:	2b00      	cmp	r3, #0
 810450a:	d10a      	bne.n	8104522 <HAL_ADC_ConfigChannel+0x396>
 810450c:	683b      	ldr	r3, [r7, #0]
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	0e9b      	lsrs	r3, r3, #26
 8104512:	3301      	adds	r3, #1
 8104514:	f003 021f 	and.w	r2, r3, #31
 8104518:	4613      	mov	r3, r2
 810451a:	005b      	lsls	r3, r3, #1
 810451c:	4413      	add	r3, r2
 810451e:	051b      	lsls	r3, r3, #20
 8104520:	e018      	b.n	8104554 <HAL_ADC_ConfigChannel+0x3c8>
 8104522:	683b      	ldr	r3, [r7, #0]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810452a:	fa93 f3a3 	rbit	r3, r3
 810452e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8104530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104532:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8104534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104536:	2b00      	cmp	r3, #0
 8104538:	d101      	bne.n	810453e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 810453a:	2320      	movs	r3, #32
 810453c:	e003      	b.n	8104546 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 810453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104540:	fab3 f383 	clz	r3, r3
 8104544:	b2db      	uxtb	r3, r3
 8104546:	3301      	adds	r3, #1
 8104548:	f003 021f 	and.w	r2, r3, #31
 810454c:	4613      	mov	r3, r2
 810454e:	005b      	lsls	r3, r3, #1
 8104550:	4413      	add	r3, r2
 8104552:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104554:	430b      	orrs	r3, r1
 8104556:	e07e      	b.n	8104656 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8104558:	683b      	ldr	r3, [r7, #0]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104560:	2b00      	cmp	r3, #0
 8104562:	d107      	bne.n	8104574 <HAL_ADC_ConfigChannel+0x3e8>
 8104564:	683b      	ldr	r3, [r7, #0]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	0e9b      	lsrs	r3, r3, #26
 810456a:	3301      	adds	r3, #1
 810456c:	069b      	lsls	r3, r3, #26
 810456e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8104572:	e015      	b.n	81045a0 <HAL_ADC_ConfigChannel+0x414>
 8104574:	683b      	ldr	r3, [r7, #0]
 8104576:	681b      	ldr	r3, [r3, #0]
 8104578:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810457c:	fa93 f3a3 	rbit	r3, r3
 8104580:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8104582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8104586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104588:	2b00      	cmp	r3, #0
 810458a:	d101      	bne.n	8104590 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 810458c:	2320      	movs	r3, #32
 810458e:	e003      	b.n	8104598 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8104590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104592:	fab3 f383 	clz	r3, r3
 8104596:	b2db      	uxtb	r3, r3
 8104598:	3301      	adds	r3, #1
 810459a:	069b      	lsls	r3, r3, #26
 810459c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81045a0:	683b      	ldr	r3, [r7, #0]
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	d109      	bne.n	81045c0 <HAL_ADC_ConfigChannel+0x434>
 81045ac:	683b      	ldr	r3, [r7, #0]
 81045ae:	681b      	ldr	r3, [r3, #0]
 81045b0:	0e9b      	lsrs	r3, r3, #26
 81045b2:	3301      	adds	r3, #1
 81045b4:	f003 031f 	and.w	r3, r3, #31
 81045b8:	2101      	movs	r1, #1
 81045ba:	fa01 f303 	lsl.w	r3, r1, r3
 81045be:	e017      	b.n	81045f0 <HAL_ADC_ConfigChannel+0x464>
 81045c0:	683b      	ldr	r3, [r7, #0]
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81045c6:	69fb      	ldr	r3, [r7, #28]
 81045c8:	fa93 f3a3 	rbit	r3, r3
 81045cc:	61bb      	str	r3, [r7, #24]
  return result;
 81045ce:	69bb      	ldr	r3, [r7, #24]
 81045d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81045d2:	6a3b      	ldr	r3, [r7, #32]
 81045d4:	2b00      	cmp	r3, #0
 81045d6:	d101      	bne.n	81045dc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 81045d8:	2320      	movs	r3, #32
 81045da:	e003      	b.n	81045e4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 81045dc:	6a3b      	ldr	r3, [r7, #32]
 81045de:	fab3 f383 	clz	r3, r3
 81045e2:	b2db      	uxtb	r3, r3
 81045e4:	3301      	adds	r3, #1
 81045e6:	f003 031f 	and.w	r3, r3, #31
 81045ea:	2101      	movs	r1, #1
 81045ec:	fa01 f303 	lsl.w	r3, r1, r3
 81045f0:	ea42 0103 	orr.w	r1, r2, r3
 81045f4:	683b      	ldr	r3, [r7, #0]
 81045f6:	681b      	ldr	r3, [r3, #0]
 81045f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81045fc:	2b00      	cmp	r3, #0
 81045fe:	d10d      	bne.n	810461c <HAL_ADC_ConfigChannel+0x490>
 8104600:	683b      	ldr	r3, [r7, #0]
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	0e9b      	lsrs	r3, r3, #26
 8104606:	3301      	adds	r3, #1
 8104608:	f003 021f 	and.w	r2, r3, #31
 810460c:	4613      	mov	r3, r2
 810460e:	005b      	lsls	r3, r3, #1
 8104610:	4413      	add	r3, r2
 8104612:	3b1e      	subs	r3, #30
 8104614:	051b      	lsls	r3, r3, #20
 8104616:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810461a:	e01b      	b.n	8104654 <HAL_ADC_ConfigChannel+0x4c8>
 810461c:	683b      	ldr	r3, [r7, #0]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104622:	693b      	ldr	r3, [r7, #16]
 8104624:	fa93 f3a3 	rbit	r3, r3
 8104628:	60fb      	str	r3, [r7, #12]
  return result;
 810462a:	68fb      	ldr	r3, [r7, #12]
 810462c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 810462e:	697b      	ldr	r3, [r7, #20]
 8104630:	2b00      	cmp	r3, #0
 8104632:	d101      	bne.n	8104638 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8104634:	2320      	movs	r3, #32
 8104636:	e003      	b.n	8104640 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8104638:	697b      	ldr	r3, [r7, #20]
 810463a:	fab3 f383 	clz	r3, r3
 810463e:	b2db      	uxtb	r3, r3
 8104640:	3301      	adds	r3, #1
 8104642:	f003 021f 	and.w	r2, r3, #31
 8104646:	4613      	mov	r3, r2
 8104648:	005b      	lsls	r3, r3, #1
 810464a:	4413      	add	r3, r2
 810464c:	3b1e      	subs	r3, #30
 810464e:	051b      	lsls	r3, r3, #20
 8104650:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8104654:	430b      	orrs	r3, r1
 8104656:	683a      	ldr	r2, [r7, #0]
 8104658:	6892      	ldr	r2, [r2, #8]
 810465a:	4619      	mov	r1, r3
 810465c:	f7ff f88b 	bl	8103776 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8104660:	683b      	ldr	r3, [r7, #0]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	2b00      	cmp	r3, #0
 8104666:	f280 80cf 	bge.w	8104808 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	681b      	ldr	r3, [r3, #0]
 810466e:	4a06      	ldr	r2, [pc, #24]	@ (8104688 <HAL_ADC_ConfigChannel+0x4fc>)
 8104670:	4293      	cmp	r3, r2
 8104672:	d004      	beq.n	810467e <HAL_ADC_ConfigChannel+0x4f2>
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	4a04      	ldr	r2, [pc, #16]	@ (810468c <HAL_ADC_ConfigChannel+0x500>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d10a      	bne.n	8104694 <HAL_ADC_ConfigChannel+0x508>
 810467e:	4b04      	ldr	r3, [pc, #16]	@ (8104690 <HAL_ADC_ConfigChannel+0x504>)
 8104680:	e009      	b.n	8104696 <HAL_ADC_ConfigChannel+0x50a>
 8104682:	bf00      	nop
 8104684:	47ff0000 	.word	0x47ff0000
 8104688:	40022000 	.word	0x40022000
 810468c:	40022100 	.word	0x40022100
 8104690:	40022300 	.word	0x40022300
 8104694:	4b61      	ldr	r3, [pc, #388]	@ (810481c <HAL_ADC_ConfigChannel+0x690>)
 8104696:	4618      	mov	r0, r3
 8104698:	f7fe ffcc 	bl	8103634 <LL_ADC_GetCommonPathInternalCh>
 810469c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	4a5f      	ldr	r2, [pc, #380]	@ (8104820 <HAL_ADC_ConfigChannel+0x694>)
 81046a4:	4293      	cmp	r3, r2
 81046a6:	d004      	beq.n	81046b2 <HAL_ADC_ConfigChannel+0x526>
 81046a8:	687b      	ldr	r3, [r7, #4]
 81046aa:	681b      	ldr	r3, [r3, #0]
 81046ac:	4a5d      	ldr	r2, [pc, #372]	@ (8104824 <HAL_ADC_ConfigChannel+0x698>)
 81046ae:	4293      	cmp	r3, r2
 81046b0:	d10e      	bne.n	81046d0 <HAL_ADC_ConfigChannel+0x544>
 81046b2:	485b      	ldr	r0, [pc, #364]	@ (8104820 <HAL_ADC_ConfigChannel+0x694>)
 81046b4:	f7ff f940 	bl	8103938 <LL_ADC_IsEnabled>
 81046b8:	4604      	mov	r4, r0
 81046ba:	485a      	ldr	r0, [pc, #360]	@ (8104824 <HAL_ADC_ConfigChannel+0x698>)
 81046bc:	f7ff f93c 	bl	8103938 <LL_ADC_IsEnabled>
 81046c0:	4603      	mov	r3, r0
 81046c2:	4323      	orrs	r3, r4
 81046c4:	2b00      	cmp	r3, #0
 81046c6:	bf0c      	ite	eq
 81046c8:	2301      	moveq	r3, #1
 81046ca:	2300      	movne	r3, #0
 81046cc:	b2db      	uxtb	r3, r3
 81046ce:	e008      	b.n	81046e2 <HAL_ADC_ConfigChannel+0x556>
 81046d0:	4855      	ldr	r0, [pc, #340]	@ (8104828 <HAL_ADC_ConfigChannel+0x69c>)
 81046d2:	f7ff f931 	bl	8103938 <LL_ADC_IsEnabled>
 81046d6:	4603      	mov	r3, r0
 81046d8:	2b00      	cmp	r3, #0
 81046da:	bf0c      	ite	eq
 81046dc:	2301      	moveq	r3, #1
 81046de:	2300      	movne	r3, #0
 81046e0:	b2db      	uxtb	r3, r3
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d07d      	beq.n	81047e2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81046e6:	683b      	ldr	r3, [r7, #0]
 81046e8:	681b      	ldr	r3, [r3, #0]
 81046ea:	4a50      	ldr	r2, [pc, #320]	@ (810482c <HAL_ADC_ConfigChannel+0x6a0>)
 81046ec:	4293      	cmp	r3, r2
 81046ee:	d130      	bne.n	8104752 <HAL_ADC_ConfigChannel+0x5c6>
 81046f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81046f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81046f6:	2b00      	cmp	r3, #0
 81046f8:	d12b      	bne.n	8104752 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	4a4a      	ldr	r2, [pc, #296]	@ (8104828 <HAL_ADC_ConfigChannel+0x69c>)
 8104700:	4293      	cmp	r3, r2
 8104702:	f040 8081 	bne.w	8104808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	4a45      	ldr	r2, [pc, #276]	@ (8104820 <HAL_ADC_ConfigChannel+0x694>)
 810470c:	4293      	cmp	r3, r2
 810470e:	d004      	beq.n	810471a <HAL_ADC_ConfigChannel+0x58e>
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	4a43      	ldr	r2, [pc, #268]	@ (8104824 <HAL_ADC_ConfigChannel+0x698>)
 8104716:	4293      	cmp	r3, r2
 8104718:	d101      	bne.n	810471e <HAL_ADC_ConfigChannel+0x592>
 810471a:	4a45      	ldr	r2, [pc, #276]	@ (8104830 <HAL_ADC_ConfigChannel+0x6a4>)
 810471c:	e000      	b.n	8104720 <HAL_ADC_ConfigChannel+0x594>
 810471e:	4a3f      	ldr	r2, [pc, #252]	@ (810481c <HAL_ADC_ConfigChannel+0x690>)
 8104720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104722:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104726:	4619      	mov	r1, r3
 8104728:	4610      	mov	r0, r2
 810472a:	f7fe ff70 	bl	810360e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810472e:	4b41      	ldr	r3, [pc, #260]	@ (8104834 <HAL_ADC_ConfigChannel+0x6a8>)
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	099b      	lsrs	r3, r3, #6
 8104734:	4a40      	ldr	r2, [pc, #256]	@ (8104838 <HAL_ADC_ConfigChannel+0x6ac>)
 8104736:	fba2 2303 	umull	r2, r3, r2, r3
 810473a:	099b      	lsrs	r3, r3, #6
 810473c:	3301      	adds	r3, #1
 810473e:	005b      	lsls	r3, r3, #1
 8104740:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8104742:	e002      	b.n	810474a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8104744:	68bb      	ldr	r3, [r7, #8]
 8104746:	3b01      	subs	r3, #1
 8104748:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810474a:	68bb      	ldr	r3, [r7, #8]
 810474c:	2b00      	cmp	r3, #0
 810474e:	d1f9      	bne.n	8104744 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8104750:	e05a      	b.n	8104808 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8104752:	683b      	ldr	r3, [r7, #0]
 8104754:	681b      	ldr	r3, [r3, #0]
 8104756:	4a39      	ldr	r2, [pc, #228]	@ (810483c <HAL_ADC_ConfigChannel+0x6b0>)
 8104758:	4293      	cmp	r3, r2
 810475a:	d11e      	bne.n	810479a <HAL_ADC_ConfigChannel+0x60e>
 810475c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810475e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8104762:	2b00      	cmp	r3, #0
 8104764:	d119      	bne.n	810479a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	681b      	ldr	r3, [r3, #0]
 810476a:	4a2f      	ldr	r2, [pc, #188]	@ (8104828 <HAL_ADC_ConfigChannel+0x69c>)
 810476c:	4293      	cmp	r3, r2
 810476e:	d14b      	bne.n	8104808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	681b      	ldr	r3, [r3, #0]
 8104774:	4a2a      	ldr	r2, [pc, #168]	@ (8104820 <HAL_ADC_ConfigChannel+0x694>)
 8104776:	4293      	cmp	r3, r2
 8104778:	d004      	beq.n	8104784 <HAL_ADC_ConfigChannel+0x5f8>
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	4a29      	ldr	r2, [pc, #164]	@ (8104824 <HAL_ADC_ConfigChannel+0x698>)
 8104780:	4293      	cmp	r3, r2
 8104782:	d101      	bne.n	8104788 <HAL_ADC_ConfigChannel+0x5fc>
 8104784:	4a2a      	ldr	r2, [pc, #168]	@ (8104830 <HAL_ADC_ConfigChannel+0x6a4>)
 8104786:	e000      	b.n	810478a <HAL_ADC_ConfigChannel+0x5fe>
 8104788:	4a24      	ldr	r2, [pc, #144]	@ (810481c <HAL_ADC_ConfigChannel+0x690>)
 810478a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810478c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104790:	4619      	mov	r1, r3
 8104792:	4610      	mov	r0, r2
 8104794:	f7fe ff3b 	bl	810360e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8104798:	e036      	b.n	8104808 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810479a:	683b      	ldr	r3, [r7, #0]
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	4a28      	ldr	r2, [pc, #160]	@ (8104840 <HAL_ADC_ConfigChannel+0x6b4>)
 81047a0:	4293      	cmp	r3, r2
 81047a2:	d131      	bne.n	8104808 <HAL_ADC_ConfigChannel+0x67c>
 81047a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81047a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81047aa:	2b00      	cmp	r3, #0
 81047ac:	d12c      	bne.n	8104808 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	4a1d      	ldr	r2, [pc, #116]	@ (8104828 <HAL_ADC_ConfigChannel+0x69c>)
 81047b4:	4293      	cmp	r3, r2
 81047b6:	d127      	bne.n	8104808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	681b      	ldr	r3, [r3, #0]
 81047bc:	4a18      	ldr	r2, [pc, #96]	@ (8104820 <HAL_ADC_ConfigChannel+0x694>)
 81047be:	4293      	cmp	r3, r2
 81047c0:	d004      	beq.n	81047cc <HAL_ADC_ConfigChannel+0x640>
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	681b      	ldr	r3, [r3, #0]
 81047c6:	4a17      	ldr	r2, [pc, #92]	@ (8104824 <HAL_ADC_ConfigChannel+0x698>)
 81047c8:	4293      	cmp	r3, r2
 81047ca:	d101      	bne.n	81047d0 <HAL_ADC_ConfigChannel+0x644>
 81047cc:	4a18      	ldr	r2, [pc, #96]	@ (8104830 <HAL_ADC_ConfigChannel+0x6a4>)
 81047ce:	e000      	b.n	81047d2 <HAL_ADC_ConfigChannel+0x646>
 81047d0:	4a12      	ldr	r2, [pc, #72]	@ (810481c <HAL_ADC_ConfigChannel+0x690>)
 81047d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81047d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81047d8:	4619      	mov	r1, r3
 81047da:	4610      	mov	r0, r2
 81047dc:	f7fe ff17 	bl	810360e <LL_ADC_SetCommonPathInternalCh>
 81047e0:	e012      	b.n	8104808 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81047e6:	f043 0220 	orr.w	r2, r3, #32
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 81047ee:	2301      	movs	r3, #1
 81047f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 81047f4:	e008      	b.n	8104808 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81047fa:	f043 0220 	orr.w	r2, r3, #32
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104802:	2301      	movs	r3, #1
 8104804:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	2200      	movs	r2, #0
 810480c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104810:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8104814:	4618      	mov	r0, r3
 8104816:	3784      	adds	r7, #132	@ 0x84
 8104818:	46bd      	mov	sp, r7
 810481a:	bd90      	pop	{r4, r7, pc}
 810481c:	58026300 	.word	0x58026300
 8104820:	40022000 	.word	0x40022000
 8104824:	40022100 	.word	0x40022100
 8104828:	58026000 	.word	0x58026000
 810482c:	cb840000 	.word	0xcb840000
 8104830:	40022300 	.word	0x40022300
 8104834:	10000000 	.word	0x10000000
 8104838:	053e2d63 	.word	0x053e2d63
 810483c:	c7520000 	.word	0xc7520000
 8104840:	cfb80000 	.word	0xcfb80000

08104844 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8104844:	b580      	push	{r7, lr}
 8104846:	b088      	sub	sp, #32
 8104848:	af00      	add	r7, sp, #0
 810484a:	6078      	str	r0, [r7, #4]
 810484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 810484e:	2300      	movs	r3, #0
 8104850:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8104852:	683b      	ldr	r3, [r7, #0]
 8104854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	4618      	mov	r0, r3
 810485c:	f7ff f8ba 	bl	81039d4 <LL_ADC_REG_IsConversionOngoing>
 8104860:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	4618      	mov	r0, r3
 8104868:	f7ff f8db 	bl	8103a22 <LL_ADC_INJ_IsConversionOngoing>
 810486c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 810486e:	693b      	ldr	r3, [r7, #16]
 8104870:	2b00      	cmp	r3, #0
 8104872:	d103      	bne.n	810487c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8104874:	68fb      	ldr	r3, [r7, #12]
 8104876:	2b00      	cmp	r3, #0
 8104878:	f000 8098 	beq.w	81049ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 810487c:	687b      	ldr	r3, [r7, #4]
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	68db      	ldr	r3, [r3, #12]
 8104882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104886:	2b00      	cmp	r3, #0
 8104888:	d02a      	beq.n	81048e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	7d5b      	ldrb	r3, [r3, #21]
 810488e:	2b01      	cmp	r3, #1
 8104890:	d126      	bne.n	81048e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8104892:	687b      	ldr	r3, [r7, #4]
 8104894:	7d1b      	ldrb	r3, [r3, #20]
 8104896:	2b01      	cmp	r3, #1
 8104898:	d122      	bne.n	81048e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 810489a:	2301      	movs	r3, #1
 810489c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 810489e:	e014      	b.n	81048ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 81048a0:	69fb      	ldr	r3, [r7, #28]
 81048a2:	4a45      	ldr	r2, [pc, #276]	@ (81049b8 <ADC_ConversionStop+0x174>)
 81048a4:	4293      	cmp	r3, r2
 81048a6:	d90d      	bls.n	81048c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81048ac:	f043 0210 	orr.w	r2, r3, #16
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81048b8:	f043 0201 	orr.w	r2, r3, #1
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 81048c0:	2301      	movs	r3, #1
 81048c2:	e074      	b.n	81049ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 81048c4:	69fb      	ldr	r3, [r7, #28]
 81048c6:	3301      	adds	r3, #1
 81048c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	681b      	ldr	r3, [r3, #0]
 81048ce:	681b      	ldr	r3, [r3, #0]
 81048d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81048d4:	2b40      	cmp	r3, #64	@ 0x40
 81048d6:	d1e3      	bne.n	81048a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	2240      	movs	r2, #64	@ 0x40
 81048de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 81048e0:	69bb      	ldr	r3, [r7, #24]
 81048e2:	2b02      	cmp	r3, #2
 81048e4:	d014      	beq.n	8104910 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	4618      	mov	r0, r3
 81048ec:	f7ff f872 	bl	81039d4 <LL_ADC_REG_IsConversionOngoing>
 81048f0:	4603      	mov	r3, r0
 81048f2:	2b00      	cmp	r3, #0
 81048f4:	d00c      	beq.n	8104910 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	4618      	mov	r0, r3
 81048fc:	f7ff f82f 	bl	810395e <LL_ADC_IsDisableOngoing>
 8104900:	4603      	mov	r3, r0
 8104902:	2b00      	cmp	r3, #0
 8104904:	d104      	bne.n	8104910 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	4618      	mov	r0, r3
 810490c:	f7ff f84e 	bl	81039ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8104910:	69bb      	ldr	r3, [r7, #24]
 8104912:	2b01      	cmp	r3, #1
 8104914:	d014      	beq.n	8104940 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	4618      	mov	r0, r3
 810491c:	f7ff f881 	bl	8103a22 <LL_ADC_INJ_IsConversionOngoing>
 8104920:	4603      	mov	r3, r0
 8104922:	2b00      	cmp	r3, #0
 8104924:	d00c      	beq.n	8104940 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	681b      	ldr	r3, [r3, #0]
 810492a:	4618      	mov	r0, r3
 810492c:	f7ff f817 	bl	810395e <LL_ADC_IsDisableOngoing>
 8104930:	4603      	mov	r3, r0
 8104932:	2b00      	cmp	r3, #0
 8104934:	d104      	bne.n	8104940 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	4618      	mov	r0, r3
 810493c:	f7ff f85d 	bl	81039fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8104940:	69bb      	ldr	r3, [r7, #24]
 8104942:	2b02      	cmp	r3, #2
 8104944:	d005      	beq.n	8104952 <ADC_ConversionStop+0x10e>
 8104946:	69bb      	ldr	r3, [r7, #24]
 8104948:	2b03      	cmp	r3, #3
 810494a:	d105      	bne.n	8104958 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 810494c:	230c      	movs	r3, #12
 810494e:	617b      	str	r3, [r7, #20]
        break;
 8104950:	e005      	b.n	810495e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8104952:	2308      	movs	r3, #8
 8104954:	617b      	str	r3, [r7, #20]
        break;
 8104956:	e002      	b.n	810495e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8104958:	2304      	movs	r3, #4
 810495a:	617b      	str	r3, [r7, #20]
        break;
 810495c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 810495e:	f7fe fe07 	bl	8103570 <HAL_GetTick>
 8104962:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8104964:	e01b      	b.n	810499e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8104966:	f7fe fe03 	bl	8103570 <HAL_GetTick>
 810496a:	4602      	mov	r2, r0
 810496c:	68bb      	ldr	r3, [r7, #8]
 810496e:	1ad3      	subs	r3, r2, r3
 8104970:	2b05      	cmp	r3, #5
 8104972:	d914      	bls.n	810499e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8104974:	687b      	ldr	r3, [r7, #4]
 8104976:	681b      	ldr	r3, [r3, #0]
 8104978:	689a      	ldr	r2, [r3, #8]
 810497a:	697b      	ldr	r3, [r7, #20]
 810497c:	4013      	ands	r3, r2
 810497e:	2b00      	cmp	r3, #0
 8104980:	d00d      	beq.n	810499e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104986:	f043 0210 	orr.w	r2, r3, #16
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104992:	f043 0201 	orr.w	r2, r3, #1
 8104996:	687b      	ldr	r3, [r7, #4]
 8104998:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 810499a:	2301      	movs	r3, #1
 810499c:	e007      	b.n	81049ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	689a      	ldr	r2, [r3, #8]
 81049a4:	697b      	ldr	r3, [r7, #20]
 81049a6:	4013      	ands	r3, r2
 81049a8:	2b00      	cmp	r3, #0
 81049aa:	d1dc      	bne.n	8104966 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 81049ac:	2300      	movs	r3, #0
}
 81049ae:	4618      	mov	r0, r3
 81049b0:	3720      	adds	r7, #32
 81049b2:	46bd      	mov	sp, r7
 81049b4:	bd80      	pop	{r7, pc}
 81049b6:	bf00      	nop
 81049b8:	000cdbff 	.word	0x000cdbff

081049bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 81049bc:	b580      	push	{r7, lr}
 81049be:	b084      	sub	sp, #16
 81049c0:	af00      	add	r7, sp, #0
 81049c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81049c4:	687b      	ldr	r3, [r7, #4]
 81049c6:	681b      	ldr	r3, [r3, #0]
 81049c8:	4618      	mov	r0, r3
 81049ca:	f7fe ffb5 	bl	8103938 <LL_ADC_IsEnabled>
 81049ce:	4603      	mov	r3, r0
 81049d0:	2b00      	cmp	r3, #0
 81049d2:	d16e      	bne.n	8104ab2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	689a      	ldr	r2, [r3, #8]
 81049da:	4b38      	ldr	r3, [pc, #224]	@ (8104abc <ADC_Enable+0x100>)
 81049dc:	4013      	ands	r3, r2
 81049de:	2b00      	cmp	r3, #0
 81049e0:	d00d      	beq.n	81049fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81049e2:	687b      	ldr	r3, [r7, #4]
 81049e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81049e6:	f043 0210 	orr.w	r2, r3, #16
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81049f2:	f043 0201 	orr.w	r2, r3, #1
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 81049fa:	2301      	movs	r3, #1
 81049fc:	e05a      	b.n	8104ab4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	681b      	ldr	r3, [r3, #0]
 8104a02:	4618      	mov	r0, r3
 8104a04:	f7fe ff70 	bl	81038e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8104a08:	f7fe fdb2 	bl	8103570 <HAL_GetTick>
 8104a0c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	681b      	ldr	r3, [r3, #0]
 8104a12:	4a2b      	ldr	r2, [pc, #172]	@ (8104ac0 <ADC_Enable+0x104>)
 8104a14:	4293      	cmp	r3, r2
 8104a16:	d004      	beq.n	8104a22 <ADC_Enable+0x66>
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	4a29      	ldr	r2, [pc, #164]	@ (8104ac4 <ADC_Enable+0x108>)
 8104a1e:	4293      	cmp	r3, r2
 8104a20:	d101      	bne.n	8104a26 <ADC_Enable+0x6a>
 8104a22:	4b29      	ldr	r3, [pc, #164]	@ (8104ac8 <ADC_Enable+0x10c>)
 8104a24:	e000      	b.n	8104a28 <ADC_Enable+0x6c>
 8104a26:	4b29      	ldr	r3, [pc, #164]	@ (8104acc <ADC_Enable+0x110>)
 8104a28:	4618      	mov	r0, r3
 8104a2a:	f7fe fef3 	bl	8103814 <LL_ADC_GetMultimode>
 8104a2e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104a30:	687b      	ldr	r3, [r7, #4]
 8104a32:	681b      	ldr	r3, [r3, #0]
 8104a34:	4a23      	ldr	r2, [pc, #140]	@ (8104ac4 <ADC_Enable+0x108>)
 8104a36:	4293      	cmp	r3, r2
 8104a38:	d002      	beq.n	8104a40 <ADC_Enable+0x84>
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	e000      	b.n	8104a42 <ADC_Enable+0x86>
 8104a40:	4b1f      	ldr	r3, [pc, #124]	@ (8104ac0 <ADC_Enable+0x104>)
 8104a42:	687a      	ldr	r2, [r7, #4]
 8104a44:	6812      	ldr	r2, [r2, #0]
 8104a46:	4293      	cmp	r3, r2
 8104a48:	d02c      	beq.n	8104aa4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104a4a:	68bb      	ldr	r3, [r7, #8]
 8104a4c:	2b00      	cmp	r3, #0
 8104a4e:	d130      	bne.n	8104ab2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8104a50:	e028      	b.n	8104aa4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	4618      	mov	r0, r3
 8104a58:	f7fe ff6e 	bl	8103938 <LL_ADC_IsEnabled>
 8104a5c:	4603      	mov	r3, r0
 8104a5e:	2b00      	cmp	r3, #0
 8104a60:	d104      	bne.n	8104a6c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8104a62:	687b      	ldr	r3, [r7, #4]
 8104a64:	681b      	ldr	r3, [r3, #0]
 8104a66:	4618      	mov	r0, r3
 8104a68:	f7fe ff3e 	bl	81038e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8104a6c:	f7fe fd80 	bl	8103570 <HAL_GetTick>
 8104a70:	4602      	mov	r2, r0
 8104a72:	68fb      	ldr	r3, [r7, #12]
 8104a74:	1ad3      	subs	r3, r2, r3
 8104a76:	2b02      	cmp	r3, #2
 8104a78:	d914      	bls.n	8104aa4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	f003 0301 	and.w	r3, r3, #1
 8104a84:	2b01      	cmp	r3, #1
 8104a86:	d00d      	beq.n	8104aa4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104a8c:	f043 0210 	orr.w	r2, r3, #16
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104a94:	687b      	ldr	r3, [r7, #4]
 8104a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104a98:	f043 0201 	orr.w	r2, r3, #1
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8104aa0:	2301      	movs	r3, #1
 8104aa2:	e007      	b.n	8104ab4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	681b      	ldr	r3, [r3, #0]
 8104aaa:	f003 0301 	and.w	r3, r3, #1
 8104aae:	2b01      	cmp	r3, #1
 8104ab0:	d1cf      	bne.n	8104a52 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8104ab2:	2300      	movs	r3, #0
}
 8104ab4:	4618      	mov	r0, r3
 8104ab6:	3710      	adds	r7, #16
 8104ab8:	46bd      	mov	sp, r7
 8104aba:	bd80      	pop	{r7, pc}
 8104abc:	8000003f 	.word	0x8000003f
 8104ac0:	40022000 	.word	0x40022000
 8104ac4:	40022100 	.word	0x40022100
 8104ac8:	40022300 	.word	0x40022300
 8104acc:	58026300 	.word	0x58026300

08104ad0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8104ad0:	b580      	push	{r7, lr}
 8104ad2:	b084      	sub	sp, #16
 8104ad4:	af00      	add	r7, sp, #0
 8104ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8104ad8:	687b      	ldr	r3, [r7, #4]
 8104ada:	681b      	ldr	r3, [r3, #0]
 8104adc:	4618      	mov	r0, r3
 8104ade:	f7fe ff3e 	bl	810395e <LL_ADC_IsDisableOngoing>
 8104ae2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	4618      	mov	r0, r3
 8104aea:	f7fe ff25 	bl	8103938 <LL_ADC_IsEnabled>
 8104aee:	4603      	mov	r3, r0
 8104af0:	2b00      	cmp	r3, #0
 8104af2:	d047      	beq.n	8104b84 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8104af4:	68fb      	ldr	r3, [r7, #12]
 8104af6:	2b00      	cmp	r3, #0
 8104af8:	d144      	bne.n	8104b84 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8104afa:	687b      	ldr	r3, [r7, #4]
 8104afc:	681b      	ldr	r3, [r3, #0]
 8104afe:	689b      	ldr	r3, [r3, #8]
 8104b00:	f003 030d 	and.w	r3, r3, #13
 8104b04:	2b01      	cmp	r3, #1
 8104b06:	d10c      	bne.n	8104b22 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	681b      	ldr	r3, [r3, #0]
 8104b0c:	4618      	mov	r0, r3
 8104b0e:	f7fe feff 	bl	8103910 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8104b12:	687b      	ldr	r3, [r7, #4]
 8104b14:	681b      	ldr	r3, [r3, #0]
 8104b16:	2203      	movs	r2, #3
 8104b18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8104b1a:	f7fe fd29 	bl	8103570 <HAL_GetTick>
 8104b1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8104b20:	e029      	b.n	8104b76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104b26:	f043 0210 	orr.w	r2, r3, #16
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b32:	f043 0201 	orr.w	r2, r3, #1
 8104b36:	687b      	ldr	r3, [r7, #4]
 8104b38:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8104b3a:	2301      	movs	r3, #1
 8104b3c:	e023      	b.n	8104b86 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8104b3e:	f7fe fd17 	bl	8103570 <HAL_GetTick>
 8104b42:	4602      	mov	r2, r0
 8104b44:	68bb      	ldr	r3, [r7, #8]
 8104b46:	1ad3      	subs	r3, r2, r3
 8104b48:	2b02      	cmp	r3, #2
 8104b4a:	d914      	bls.n	8104b76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	689b      	ldr	r3, [r3, #8]
 8104b52:	f003 0301 	and.w	r3, r3, #1
 8104b56:	2b00      	cmp	r3, #0
 8104b58:	d00d      	beq.n	8104b76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104b5e:	f043 0210 	orr.w	r2, r3, #16
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b6a:	f043 0201 	orr.w	r2, r3, #1
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8104b72:	2301      	movs	r3, #1
 8104b74:	e007      	b.n	8104b86 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	689b      	ldr	r3, [r3, #8]
 8104b7c:	f003 0301 	and.w	r3, r3, #1
 8104b80:	2b00      	cmp	r3, #0
 8104b82:	d1dc      	bne.n	8104b3e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8104b84:	2300      	movs	r3, #0
}
 8104b86:	4618      	mov	r0, r3
 8104b88:	3710      	adds	r7, #16
 8104b8a:	46bd      	mov	sp, r7
 8104b8c:	bd80      	pop	{r7, pc}
	...

08104b90 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8104b90:	b580      	push	{r7, lr}
 8104b92:	b084      	sub	sp, #16
 8104b94:	af00      	add	r7, sp, #0
 8104b96:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	681b      	ldr	r3, [r3, #0]
 8104b9c:	4a7a      	ldr	r2, [pc, #488]	@ (8104d88 <ADC_ConfigureBoostMode+0x1f8>)
 8104b9e:	4293      	cmp	r3, r2
 8104ba0:	d004      	beq.n	8104bac <ADC_ConfigureBoostMode+0x1c>
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	681b      	ldr	r3, [r3, #0]
 8104ba6:	4a79      	ldr	r2, [pc, #484]	@ (8104d8c <ADC_ConfigureBoostMode+0x1fc>)
 8104ba8:	4293      	cmp	r3, r2
 8104baa:	d109      	bne.n	8104bc0 <ADC_ConfigureBoostMode+0x30>
 8104bac:	4b78      	ldr	r3, [pc, #480]	@ (8104d90 <ADC_ConfigureBoostMode+0x200>)
 8104bae:	689b      	ldr	r3, [r3, #8]
 8104bb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104bb4:	2b00      	cmp	r3, #0
 8104bb6:	bf14      	ite	ne
 8104bb8:	2301      	movne	r3, #1
 8104bba:	2300      	moveq	r3, #0
 8104bbc:	b2db      	uxtb	r3, r3
 8104bbe:	e008      	b.n	8104bd2 <ADC_ConfigureBoostMode+0x42>
 8104bc0:	4b74      	ldr	r3, [pc, #464]	@ (8104d94 <ADC_ConfigureBoostMode+0x204>)
 8104bc2:	689b      	ldr	r3, [r3, #8]
 8104bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104bc8:	2b00      	cmp	r3, #0
 8104bca:	bf14      	ite	ne
 8104bcc:	2301      	movne	r3, #1
 8104bce:	2300      	moveq	r3, #0
 8104bd0:	b2db      	uxtb	r3, r3
 8104bd2:	2b00      	cmp	r3, #0
 8104bd4:	d01c      	beq.n	8104c10 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8104bd6:	f001 fd0d 	bl	81065f4 <HAL_RCC_GetHCLKFreq>
 8104bda:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104bdc:	687b      	ldr	r3, [r7, #4]
 8104bde:	685b      	ldr	r3, [r3, #4]
 8104be0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104be4:	d010      	beq.n	8104c08 <ADC_ConfigureBoostMode+0x78>
 8104be6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104bea:	d873      	bhi.n	8104cd4 <ADC_ConfigureBoostMode+0x144>
 8104bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104bf0:	d002      	beq.n	8104bf8 <ADC_ConfigureBoostMode+0x68>
 8104bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104bf6:	d16d      	bne.n	8104cd4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8104bf8:	687b      	ldr	r3, [r7, #4]
 8104bfa:	685b      	ldr	r3, [r3, #4]
 8104bfc:	0c1b      	lsrs	r3, r3, #16
 8104bfe:	68fa      	ldr	r2, [r7, #12]
 8104c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8104c04:	60fb      	str	r3, [r7, #12]
        break;
 8104c06:	e068      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8104c08:	68fb      	ldr	r3, [r7, #12]
 8104c0a:	089b      	lsrs	r3, r3, #2
 8104c0c:	60fb      	str	r3, [r7, #12]
        break;
 8104c0e:	e064      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8104c10:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8104c14:	f04f 0100 	mov.w	r1, #0
 8104c18:	f002 ff54 	bl	8107ac4 <HAL_RCCEx_GetPeriphCLKFreq>
 8104c1c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	685b      	ldr	r3, [r3, #4]
 8104c22:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8104c26:	d051      	beq.n	8104ccc <ADC_ConfigureBoostMode+0x13c>
 8104c28:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8104c2c:	d854      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c2e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8104c32:	d047      	beq.n	8104cc4 <ADC_ConfigureBoostMode+0x134>
 8104c34:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8104c38:	d84e      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c3a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8104c3e:	d03d      	beq.n	8104cbc <ADC_ConfigureBoostMode+0x12c>
 8104c40:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8104c44:	d848      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104c4a:	d033      	beq.n	8104cb4 <ADC_ConfigureBoostMode+0x124>
 8104c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104c50:	d842      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c52:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8104c56:	d029      	beq.n	8104cac <ADC_ConfigureBoostMode+0x11c>
 8104c58:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8104c5c:	d83c      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c5e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8104c62:	d01a      	beq.n	8104c9a <ADC_ConfigureBoostMode+0x10a>
 8104c64:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8104c68:	d836      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c6a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8104c6e:	d014      	beq.n	8104c9a <ADC_ConfigureBoostMode+0x10a>
 8104c70:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8104c74:	d830      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104c7a:	d00e      	beq.n	8104c9a <ADC_ConfigureBoostMode+0x10a>
 8104c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104c80:	d82a      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104c86:	d008      	beq.n	8104c9a <ADC_ConfigureBoostMode+0x10a>
 8104c88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104c8c:	d824      	bhi.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
 8104c8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104c92:	d002      	beq.n	8104c9a <ADC_ConfigureBoostMode+0x10a>
 8104c94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8104c98:	d11e      	bne.n	8104cd8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	685b      	ldr	r3, [r3, #4]
 8104c9e:	0c9b      	lsrs	r3, r3, #18
 8104ca0:	005b      	lsls	r3, r3, #1
 8104ca2:	68fa      	ldr	r2, [r7, #12]
 8104ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8104ca8:	60fb      	str	r3, [r7, #12]
        break;
 8104caa:	e016      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8104cac:	68fb      	ldr	r3, [r7, #12]
 8104cae:	091b      	lsrs	r3, r3, #4
 8104cb0:	60fb      	str	r3, [r7, #12]
        break;
 8104cb2:	e012      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8104cb4:	68fb      	ldr	r3, [r7, #12]
 8104cb6:	095b      	lsrs	r3, r3, #5
 8104cb8:	60fb      	str	r3, [r7, #12]
        break;
 8104cba:	e00e      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8104cbc:	68fb      	ldr	r3, [r7, #12]
 8104cbe:	099b      	lsrs	r3, r3, #6
 8104cc0:	60fb      	str	r3, [r7, #12]
        break;
 8104cc2:	e00a      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8104cc4:	68fb      	ldr	r3, [r7, #12]
 8104cc6:	09db      	lsrs	r3, r3, #7
 8104cc8:	60fb      	str	r3, [r7, #12]
        break;
 8104cca:	e006      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8104ccc:	68fb      	ldr	r3, [r7, #12]
 8104cce:	0a1b      	lsrs	r3, r3, #8
 8104cd0:	60fb      	str	r3, [r7, #12]
        break;
 8104cd2:	e002      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
        break;
 8104cd4:	bf00      	nop
 8104cd6:	e000      	b.n	8104cda <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8104cd8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8104cda:	f7fe fc79 	bl	81035d0 <HAL_GetREVID>
 8104cde:	4603      	mov	r3, r0
 8104ce0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8104ce4:	4293      	cmp	r3, r2
 8104ce6:	d815      	bhi.n	8104d14 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8104ce8:	68fb      	ldr	r3, [r7, #12]
 8104cea:	4a2b      	ldr	r2, [pc, #172]	@ (8104d98 <ADC_ConfigureBoostMode+0x208>)
 8104cec:	4293      	cmp	r3, r2
 8104cee:	d908      	bls.n	8104d02 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	689a      	ldr	r2, [r3, #8]
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	681b      	ldr	r3, [r3, #0]
 8104cfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8104cfe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8104d00:	e03e      	b.n	8104d80 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	681b      	ldr	r3, [r3, #0]
 8104d06:	689a      	ldr	r2, [r3, #8]
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	681b      	ldr	r3, [r3, #0]
 8104d0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104d10:	609a      	str	r2, [r3, #8]
}
 8104d12:	e035      	b.n	8104d80 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8104d14:	68fb      	ldr	r3, [r7, #12]
 8104d16:	085b      	lsrs	r3, r3, #1
 8104d18:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8104d1a:	68fb      	ldr	r3, [r7, #12]
 8104d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8104d9c <ADC_ConfigureBoostMode+0x20c>)
 8104d1e:	4293      	cmp	r3, r2
 8104d20:	d808      	bhi.n	8104d34 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	689a      	ldr	r2, [r3, #8]
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8104d30:	609a      	str	r2, [r3, #8]
}
 8104d32:	e025      	b.n	8104d80 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8104d34:	68fb      	ldr	r3, [r7, #12]
 8104d36:	4a1a      	ldr	r2, [pc, #104]	@ (8104da0 <ADC_ConfigureBoostMode+0x210>)
 8104d38:	4293      	cmp	r3, r2
 8104d3a:	d80a      	bhi.n	8104d52 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	689b      	ldr	r3, [r3, #8]
 8104d42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8104d46:	687b      	ldr	r3, [r7, #4]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8104d4e:	609a      	str	r2, [r3, #8]
}
 8104d50:	e016      	b.n	8104d80 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8104d52:	68fb      	ldr	r3, [r7, #12]
 8104d54:	4a13      	ldr	r2, [pc, #76]	@ (8104da4 <ADC_ConfigureBoostMode+0x214>)
 8104d56:	4293      	cmp	r3, r2
 8104d58:	d80a      	bhi.n	8104d70 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	689b      	ldr	r3, [r3, #8]
 8104d60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8104d6c:	609a      	str	r2, [r3, #8]
}
 8104d6e:	e007      	b.n	8104d80 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	689a      	ldr	r2, [r3, #8]
 8104d76:	687b      	ldr	r3, [r7, #4]
 8104d78:	681b      	ldr	r3, [r3, #0]
 8104d7a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8104d7e:	609a      	str	r2, [r3, #8]
}
 8104d80:	bf00      	nop
 8104d82:	3710      	adds	r7, #16
 8104d84:	46bd      	mov	sp, r7
 8104d86:	bd80      	pop	{r7, pc}
 8104d88:	40022000 	.word	0x40022000
 8104d8c:	40022100 	.word	0x40022100
 8104d90:	40022300 	.word	0x40022300
 8104d94:	58026300 	.word	0x58026300
 8104d98:	01312d00 	.word	0x01312d00
 8104d9c:	005f5e10 	.word	0x005f5e10
 8104da0:	00bebc20 	.word	0x00bebc20
 8104da4:	017d7840 	.word	0x017d7840

08104da8 <LL_ADC_IsEnabled>:
{
 8104da8:	b480      	push	{r7}
 8104daa:	b083      	sub	sp, #12
 8104dac:	af00      	add	r7, sp, #0
 8104dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	689b      	ldr	r3, [r3, #8]
 8104db4:	f003 0301 	and.w	r3, r3, #1
 8104db8:	2b01      	cmp	r3, #1
 8104dba:	d101      	bne.n	8104dc0 <LL_ADC_IsEnabled+0x18>
 8104dbc:	2301      	movs	r3, #1
 8104dbe:	e000      	b.n	8104dc2 <LL_ADC_IsEnabled+0x1a>
 8104dc0:	2300      	movs	r3, #0
}
 8104dc2:	4618      	mov	r0, r3
 8104dc4:	370c      	adds	r7, #12
 8104dc6:	46bd      	mov	sp, r7
 8104dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dcc:	4770      	bx	lr

08104dce <LL_ADC_REG_IsConversionOngoing>:
{
 8104dce:	b480      	push	{r7}
 8104dd0:	b083      	sub	sp, #12
 8104dd2:	af00      	add	r7, sp, #0
 8104dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	689b      	ldr	r3, [r3, #8]
 8104dda:	f003 0304 	and.w	r3, r3, #4
 8104dde:	2b04      	cmp	r3, #4
 8104de0:	d101      	bne.n	8104de6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8104de2:	2301      	movs	r3, #1
 8104de4:	e000      	b.n	8104de8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8104de6:	2300      	movs	r3, #0
}
 8104de8:	4618      	mov	r0, r3
 8104dea:	370c      	adds	r7, #12
 8104dec:	46bd      	mov	sp, r7
 8104dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104df2:	4770      	bx	lr

08104df4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104df4:	b590      	push	{r4, r7, lr}
 8104df6:	b09f      	sub	sp, #124	@ 0x7c
 8104df8:	af00      	add	r7, sp, #0
 8104dfa:	6078      	str	r0, [r7, #4]
 8104dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104dfe:	2300      	movs	r3, #0
 8104e00:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104e04:	687b      	ldr	r3, [r7, #4]
 8104e06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104e0a:	2b01      	cmp	r3, #1
 8104e0c:	d101      	bne.n	8104e12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8104e0e:	2302      	movs	r3, #2
 8104e10:	e0c4      	b.n	8104f9c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	2201      	movs	r2, #1
 8104e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8104e1a:	2300      	movs	r3, #0
 8104e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8104e1e:	2300      	movs	r3, #0
 8104e20:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	681b      	ldr	r3, [r3, #0]
 8104e26:	4a5f      	ldr	r2, [pc, #380]	@ (8104fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104e28:	4293      	cmp	r3, r2
 8104e2a:	d102      	bne.n	8104e32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8104e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8104fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104e2e:	60bb      	str	r3, [r7, #8]
 8104e30:	e001      	b.n	8104e36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8104e32:	2300      	movs	r3, #0
 8104e34:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8104e36:	68bb      	ldr	r3, [r7, #8]
 8104e38:	2b00      	cmp	r3, #0
 8104e3a:	d10b      	bne.n	8104e54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e40:	f043 0220 	orr.w	r2, r3, #32
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	2200      	movs	r2, #0
 8104e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8104e50:	2301      	movs	r3, #1
 8104e52:	e0a3      	b.n	8104f9c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8104e54:	68bb      	ldr	r3, [r7, #8]
 8104e56:	4618      	mov	r0, r3
 8104e58:	f7ff ffb9 	bl	8104dce <LL_ADC_REG_IsConversionOngoing>
 8104e5c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	4618      	mov	r0, r3
 8104e64:	f7ff ffb3 	bl	8104dce <LL_ADC_REG_IsConversionOngoing>
 8104e68:	4603      	mov	r3, r0
 8104e6a:	2b00      	cmp	r3, #0
 8104e6c:	f040 8085 	bne.w	8104f7a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8104e70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104e72:	2b00      	cmp	r3, #0
 8104e74:	f040 8081 	bne.w	8104f7a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	4a49      	ldr	r2, [pc, #292]	@ (8104fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104e7e:	4293      	cmp	r3, r2
 8104e80:	d004      	beq.n	8104e8c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	681b      	ldr	r3, [r3, #0]
 8104e86:	4a48      	ldr	r2, [pc, #288]	@ (8104fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104e88:	4293      	cmp	r3, r2
 8104e8a:	d101      	bne.n	8104e90 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8104e8c:	4b47      	ldr	r3, [pc, #284]	@ (8104fac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8104e8e:	e000      	b.n	8104e92 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8104e90:	4b47      	ldr	r3, [pc, #284]	@ (8104fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8104e92:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104e94:	683b      	ldr	r3, [r7, #0]
 8104e96:	681b      	ldr	r3, [r3, #0]
 8104e98:	2b00      	cmp	r3, #0
 8104e9a:	d03b      	beq.n	8104f14 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8104e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104e9e:	689b      	ldr	r3, [r3, #8]
 8104ea0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8104ea4:	683b      	ldr	r3, [r7, #0]
 8104ea6:	685b      	ldr	r3, [r3, #4]
 8104ea8:	431a      	orrs	r2, r3
 8104eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104eac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104eae:	687b      	ldr	r3, [r7, #4]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	4a3c      	ldr	r2, [pc, #240]	@ (8104fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104eb4:	4293      	cmp	r3, r2
 8104eb6:	d004      	beq.n	8104ec2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	4a3a      	ldr	r2, [pc, #232]	@ (8104fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104ebe:	4293      	cmp	r3, r2
 8104ec0:	d10e      	bne.n	8104ee0 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8104ec2:	4838      	ldr	r0, [pc, #224]	@ (8104fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104ec4:	f7ff ff70 	bl	8104da8 <LL_ADC_IsEnabled>
 8104ec8:	4604      	mov	r4, r0
 8104eca:	4837      	ldr	r0, [pc, #220]	@ (8104fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104ecc:	f7ff ff6c 	bl	8104da8 <LL_ADC_IsEnabled>
 8104ed0:	4603      	mov	r3, r0
 8104ed2:	4323      	orrs	r3, r4
 8104ed4:	2b00      	cmp	r3, #0
 8104ed6:	bf0c      	ite	eq
 8104ed8:	2301      	moveq	r3, #1
 8104eda:	2300      	movne	r3, #0
 8104edc:	b2db      	uxtb	r3, r3
 8104ede:	e008      	b.n	8104ef2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8104ee0:	4834      	ldr	r0, [pc, #208]	@ (8104fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104ee2:	f7ff ff61 	bl	8104da8 <LL_ADC_IsEnabled>
 8104ee6:	4603      	mov	r3, r0
 8104ee8:	2b00      	cmp	r3, #0
 8104eea:	bf0c      	ite	eq
 8104eec:	2301      	moveq	r3, #1
 8104eee:	2300      	movne	r3, #0
 8104ef0:	b2db      	uxtb	r3, r3
 8104ef2:	2b00      	cmp	r3, #0
 8104ef4:	d04b      	beq.n	8104f8e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8104ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104ef8:	689b      	ldr	r3, [r3, #8]
 8104efa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8104efe:	f023 030f 	bic.w	r3, r3, #15
 8104f02:	683a      	ldr	r2, [r7, #0]
 8104f04:	6811      	ldr	r1, [r2, #0]
 8104f06:	683a      	ldr	r2, [r7, #0]
 8104f08:	6892      	ldr	r2, [r2, #8]
 8104f0a:	430a      	orrs	r2, r1
 8104f0c:	431a      	orrs	r2, r3
 8104f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104f10:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104f12:	e03c      	b.n	8104f8e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104f16:	689b      	ldr	r3, [r3, #8]
 8104f18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8104f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104f1e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	4a1f      	ldr	r2, [pc, #124]	@ (8104fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104f26:	4293      	cmp	r3, r2
 8104f28:	d004      	beq.n	8104f34 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8104f2a:	687b      	ldr	r3, [r7, #4]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8104fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104f30:	4293      	cmp	r3, r2
 8104f32:	d10e      	bne.n	8104f52 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8104f34:	481b      	ldr	r0, [pc, #108]	@ (8104fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104f36:	f7ff ff37 	bl	8104da8 <LL_ADC_IsEnabled>
 8104f3a:	4604      	mov	r4, r0
 8104f3c:	481a      	ldr	r0, [pc, #104]	@ (8104fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104f3e:	f7ff ff33 	bl	8104da8 <LL_ADC_IsEnabled>
 8104f42:	4603      	mov	r3, r0
 8104f44:	4323      	orrs	r3, r4
 8104f46:	2b00      	cmp	r3, #0
 8104f48:	bf0c      	ite	eq
 8104f4a:	2301      	moveq	r3, #1
 8104f4c:	2300      	movne	r3, #0
 8104f4e:	b2db      	uxtb	r3, r3
 8104f50:	e008      	b.n	8104f64 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8104f52:	4818      	ldr	r0, [pc, #96]	@ (8104fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104f54:	f7ff ff28 	bl	8104da8 <LL_ADC_IsEnabled>
 8104f58:	4603      	mov	r3, r0
 8104f5a:	2b00      	cmp	r3, #0
 8104f5c:	bf0c      	ite	eq
 8104f5e:	2301      	moveq	r3, #1
 8104f60:	2300      	movne	r3, #0
 8104f62:	b2db      	uxtb	r3, r3
 8104f64:	2b00      	cmp	r3, #0
 8104f66:	d012      	beq.n	8104f8e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8104f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8104f6a:	689b      	ldr	r3, [r3, #8]
 8104f6c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8104f70:	f023 030f 	bic.w	r3, r3, #15
 8104f74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8104f76:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104f78:	e009      	b.n	8104f8e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f7e:	f043 0220 	orr.w	r2, r3, #32
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104f86:	2301      	movs	r3, #1
 8104f88:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8104f8c:	e000      	b.n	8104f90 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104f8e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	2200      	movs	r2, #0
 8104f94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104f98:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8104f9c:	4618      	mov	r0, r3
 8104f9e:	377c      	adds	r7, #124	@ 0x7c
 8104fa0:	46bd      	mov	sp, r7
 8104fa2:	bd90      	pop	{r4, r7, pc}
 8104fa4:	40022000 	.word	0x40022000
 8104fa8:	40022100 	.word	0x40022100
 8104fac:	40022300 	.word	0x40022300
 8104fb0:	58026300 	.word	0x58026300
 8104fb4:	58026000 	.word	0x58026000

08104fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104fb8:	b480      	push	{r7}
 8104fba:	b085      	sub	sp, #20
 8104fbc:	af00      	add	r7, sp, #0
 8104fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	f003 0307 	and.w	r3, r3, #7
 8104fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8104ffc <__NVIC_SetPriorityGrouping+0x44>)
 8104fca:	68db      	ldr	r3, [r3, #12]
 8104fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104fce:	68ba      	ldr	r2, [r7, #8]
 8104fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8104fd4:	4013      	ands	r3, r2
 8104fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104fd8:	68fb      	ldr	r3, [r7, #12]
 8104fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104fdc:	68bb      	ldr	r3, [r7, #8]
 8104fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8104fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104fea:	4a04      	ldr	r2, [pc, #16]	@ (8104ffc <__NVIC_SetPriorityGrouping+0x44>)
 8104fec:	68bb      	ldr	r3, [r7, #8]
 8104fee:	60d3      	str	r3, [r2, #12]
}
 8104ff0:	bf00      	nop
 8104ff2:	3714      	adds	r7, #20
 8104ff4:	46bd      	mov	sp, r7
 8104ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ffa:	4770      	bx	lr
 8104ffc:	e000ed00 	.word	0xe000ed00

08105000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8105000:	b480      	push	{r7}
 8105002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8105004:	4b04      	ldr	r3, [pc, #16]	@ (8105018 <__NVIC_GetPriorityGrouping+0x18>)
 8105006:	68db      	ldr	r3, [r3, #12]
 8105008:	0a1b      	lsrs	r3, r3, #8
 810500a:	f003 0307 	and.w	r3, r3, #7
}
 810500e:	4618      	mov	r0, r3
 8105010:	46bd      	mov	sp, r7
 8105012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105016:	4770      	bx	lr
 8105018:	e000ed00 	.word	0xe000ed00

0810501c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810501c:	b480      	push	{r7}
 810501e:	b083      	sub	sp, #12
 8105020:	af00      	add	r7, sp, #0
 8105022:	4603      	mov	r3, r0
 8105024:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810502a:	2b00      	cmp	r3, #0
 810502c:	db0b      	blt.n	8105046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810502e:	88fb      	ldrh	r3, [r7, #6]
 8105030:	f003 021f 	and.w	r2, r3, #31
 8105034:	4907      	ldr	r1, [pc, #28]	@ (8105054 <__NVIC_EnableIRQ+0x38>)
 8105036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810503a:	095b      	lsrs	r3, r3, #5
 810503c:	2001      	movs	r0, #1
 810503e:	fa00 f202 	lsl.w	r2, r0, r2
 8105042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105046:	bf00      	nop
 8105048:	370c      	adds	r7, #12
 810504a:	46bd      	mov	sp, r7
 810504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105050:	4770      	bx	lr
 8105052:	bf00      	nop
 8105054:	e000e100 	.word	0xe000e100

08105058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105058:	b480      	push	{r7}
 810505a:	b083      	sub	sp, #12
 810505c:	af00      	add	r7, sp, #0
 810505e:	4603      	mov	r3, r0
 8105060:	6039      	str	r1, [r7, #0]
 8105062:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105068:	2b00      	cmp	r3, #0
 810506a:	db0a      	blt.n	8105082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810506c:	683b      	ldr	r3, [r7, #0]
 810506e:	b2da      	uxtb	r2, r3
 8105070:	490c      	ldr	r1, [pc, #48]	@ (81050a4 <__NVIC_SetPriority+0x4c>)
 8105072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105076:	0112      	lsls	r2, r2, #4
 8105078:	b2d2      	uxtb	r2, r2
 810507a:	440b      	add	r3, r1
 810507c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8105080:	e00a      	b.n	8105098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105082:	683b      	ldr	r3, [r7, #0]
 8105084:	b2da      	uxtb	r2, r3
 8105086:	4908      	ldr	r1, [pc, #32]	@ (81050a8 <__NVIC_SetPriority+0x50>)
 8105088:	88fb      	ldrh	r3, [r7, #6]
 810508a:	f003 030f 	and.w	r3, r3, #15
 810508e:	3b04      	subs	r3, #4
 8105090:	0112      	lsls	r2, r2, #4
 8105092:	b2d2      	uxtb	r2, r2
 8105094:	440b      	add	r3, r1
 8105096:	761a      	strb	r2, [r3, #24]
}
 8105098:	bf00      	nop
 810509a:	370c      	adds	r7, #12
 810509c:	46bd      	mov	sp, r7
 810509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050a2:	4770      	bx	lr
 81050a4:	e000e100 	.word	0xe000e100
 81050a8:	e000ed00 	.word	0xe000ed00

081050ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81050ac:	b480      	push	{r7}
 81050ae:	b089      	sub	sp, #36	@ 0x24
 81050b0:	af00      	add	r7, sp, #0
 81050b2:	60f8      	str	r0, [r7, #12]
 81050b4:	60b9      	str	r1, [r7, #8]
 81050b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81050b8:	68fb      	ldr	r3, [r7, #12]
 81050ba:	f003 0307 	and.w	r3, r3, #7
 81050be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81050c0:	69fb      	ldr	r3, [r7, #28]
 81050c2:	f1c3 0307 	rsb	r3, r3, #7
 81050c6:	2b04      	cmp	r3, #4
 81050c8:	bf28      	it	cs
 81050ca:	2304      	movcs	r3, #4
 81050cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81050ce:	69fb      	ldr	r3, [r7, #28]
 81050d0:	3304      	adds	r3, #4
 81050d2:	2b06      	cmp	r3, #6
 81050d4:	d902      	bls.n	81050dc <NVIC_EncodePriority+0x30>
 81050d6:	69fb      	ldr	r3, [r7, #28]
 81050d8:	3b03      	subs	r3, #3
 81050da:	e000      	b.n	81050de <NVIC_EncodePriority+0x32>
 81050dc:	2300      	movs	r3, #0
 81050de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81050e0:	f04f 32ff 	mov.w	r2, #4294967295
 81050e4:	69bb      	ldr	r3, [r7, #24]
 81050e6:	fa02 f303 	lsl.w	r3, r2, r3
 81050ea:	43da      	mvns	r2, r3
 81050ec:	68bb      	ldr	r3, [r7, #8]
 81050ee:	401a      	ands	r2, r3
 81050f0:	697b      	ldr	r3, [r7, #20]
 81050f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81050f4:	f04f 31ff 	mov.w	r1, #4294967295
 81050f8:	697b      	ldr	r3, [r7, #20]
 81050fa:	fa01 f303 	lsl.w	r3, r1, r3
 81050fe:	43d9      	mvns	r1, r3
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105104:	4313      	orrs	r3, r2
         );
}
 8105106:	4618      	mov	r0, r3
 8105108:	3724      	adds	r7, #36	@ 0x24
 810510a:	46bd      	mov	sp, r7
 810510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105110:	4770      	bx	lr
	...

08105114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105114:	b580      	push	{r7, lr}
 8105116:	b082      	sub	sp, #8
 8105118:	af00      	add	r7, sp, #0
 810511a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810511c:	687b      	ldr	r3, [r7, #4]
 810511e:	3b01      	subs	r3, #1
 8105120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105124:	d301      	bcc.n	810512a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8105126:	2301      	movs	r3, #1
 8105128:	e00f      	b.n	810514a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810512a:	4a0a      	ldr	r2, [pc, #40]	@ (8105154 <SysTick_Config+0x40>)
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	3b01      	subs	r3, #1
 8105130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8105132:	210f      	movs	r1, #15
 8105134:	f04f 30ff 	mov.w	r0, #4294967295
 8105138:	f7ff ff8e 	bl	8105058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810513c:	4b05      	ldr	r3, [pc, #20]	@ (8105154 <SysTick_Config+0x40>)
 810513e:	2200      	movs	r2, #0
 8105140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8105142:	4b04      	ldr	r3, [pc, #16]	@ (8105154 <SysTick_Config+0x40>)
 8105144:	2207      	movs	r2, #7
 8105146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105148:	2300      	movs	r3, #0
}
 810514a:	4618      	mov	r0, r3
 810514c:	3708      	adds	r7, #8
 810514e:	46bd      	mov	sp, r7
 8105150:	bd80      	pop	{r7, pc}
 8105152:	bf00      	nop
 8105154:	e000e010 	.word	0xe000e010

08105158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105158:	b580      	push	{r7, lr}
 810515a:	b082      	sub	sp, #8
 810515c:	af00      	add	r7, sp, #0
 810515e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8105160:	6878      	ldr	r0, [r7, #4]
 8105162:	f7ff ff29 	bl	8104fb8 <__NVIC_SetPriorityGrouping>
}
 8105166:	bf00      	nop
 8105168:	3708      	adds	r7, #8
 810516a:	46bd      	mov	sp, r7
 810516c:	bd80      	pop	{r7, pc}

0810516e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810516e:	b580      	push	{r7, lr}
 8105170:	b086      	sub	sp, #24
 8105172:	af00      	add	r7, sp, #0
 8105174:	4603      	mov	r3, r0
 8105176:	60b9      	str	r1, [r7, #8]
 8105178:	607a      	str	r2, [r7, #4]
 810517a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810517c:	f7ff ff40 	bl	8105000 <__NVIC_GetPriorityGrouping>
 8105180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8105182:	687a      	ldr	r2, [r7, #4]
 8105184:	68b9      	ldr	r1, [r7, #8]
 8105186:	6978      	ldr	r0, [r7, #20]
 8105188:	f7ff ff90 	bl	81050ac <NVIC_EncodePriority>
 810518c:	4602      	mov	r2, r0
 810518e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8105192:	4611      	mov	r1, r2
 8105194:	4618      	mov	r0, r3
 8105196:	f7ff ff5f 	bl	8105058 <__NVIC_SetPriority>
}
 810519a:	bf00      	nop
 810519c:	3718      	adds	r7, #24
 810519e:	46bd      	mov	sp, r7
 81051a0:	bd80      	pop	{r7, pc}

081051a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81051a2:	b580      	push	{r7, lr}
 81051a4:	b082      	sub	sp, #8
 81051a6:	af00      	add	r7, sp, #0
 81051a8:	4603      	mov	r3, r0
 81051aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81051ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81051b0:	4618      	mov	r0, r3
 81051b2:	f7ff ff33 	bl	810501c <__NVIC_EnableIRQ>
}
 81051b6:	bf00      	nop
 81051b8:	3708      	adds	r7, #8
 81051ba:	46bd      	mov	sp, r7
 81051bc:	bd80      	pop	{r7, pc}

081051be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81051be:	b580      	push	{r7, lr}
 81051c0:	b082      	sub	sp, #8
 81051c2:	af00      	add	r7, sp, #0
 81051c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81051c6:	6878      	ldr	r0, [r7, #4]
 81051c8:	f7ff ffa4 	bl	8105114 <SysTick_Config>
 81051cc:	4603      	mov	r3, r0
}
 81051ce:	4618      	mov	r0, r3
 81051d0:	3708      	adds	r7, #8
 81051d2:	46bd      	mov	sp, r7
 81051d4:	bd80      	pop	{r7, pc}
	...

081051d8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81051d8:	b480      	push	{r7}
 81051da:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81051dc:	4b07      	ldr	r3, [pc, #28]	@ (81051fc <HAL_GetCurrentCPUID+0x24>)
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	091b      	lsrs	r3, r3, #4
 81051e2:	f003 030f 	and.w	r3, r3, #15
 81051e6:	2b07      	cmp	r3, #7
 81051e8:	d101      	bne.n	81051ee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81051ea:	2303      	movs	r3, #3
 81051ec:	e000      	b.n	81051f0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81051ee:	2301      	movs	r3, #1
  }
}
 81051f0:	4618      	mov	r0, r3
 81051f2:	46bd      	mov	sp, r7
 81051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051f8:	4770      	bx	lr
 81051fa:	bf00      	nop
 81051fc:	e000ed00 	.word	0xe000ed00

08105200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8105200:	b480      	push	{r7}
 8105202:	b089      	sub	sp, #36	@ 0x24
 8105204:	af00      	add	r7, sp, #0
 8105206:	6078      	str	r0, [r7, #4]
 8105208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810520a:	2300      	movs	r3, #0
 810520c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810520e:	4b89      	ldr	r3, [pc, #548]	@ (8105434 <HAL_GPIO_Init+0x234>)
 8105210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105212:	e194      	b.n	810553e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105214:	683b      	ldr	r3, [r7, #0]
 8105216:	681a      	ldr	r2, [r3, #0]
 8105218:	2101      	movs	r1, #1
 810521a:	69fb      	ldr	r3, [r7, #28]
 810521c:	fa01 f303 	lsl.w	r3, r1, r3
 8105220:	4013      	ands	r3, r2
 8105222:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105224:	693b      	ldr	r3, [r7, #16]
 8105226:	2b00      	cmp	r3, #0
 8105228:	f000 8186 	beq.w	8105538 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810522c:	683b      	ldr	r3, [r7, #0]
 810522e:	685b      	ldr	r3, [r3, #4]
 8105230:	f003 0303 	and.w	r3, r3, #3
 8105234:	2b01      	cmp	r3, #1
 8105236:	d005      	beq.n	8105244 <HAL_GPIO_Init+0x44>
 8105238:	683b      	ldr	r3, [r7, #0]
 810523a:	685b      	ldr	r3, [r3, #4]
 810523c:	f003 0303 	and.w	r3, r3, #3
 8105240:	2b02      	cmp	r3, #2
 8105242:	d130      	bne.n	81052a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	689b      	ldr	r3, [r3, #8]
 8105248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810524a:	69fb      	ldr	r3, [r7, #28]
 810524c:	005b      	lsls	r3, r3, #1
 810524e:	2203      	movs	r2, #3
 8105250:	fa02 f303 	lsl.w	r3, r2, r3
 8105254:	43db      	mvns	r3, r3
 8105256:	69ba      	ldr	r2, [r7, #24]
 8105258:	4013      	ands	r3, r2
 810525a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810525c:	683b      	ldr	r3, [r7, #0]
 810525e:	68da      	ldr	r2, [r3, #12]
 8105260:	69fb      	ldr	r3, [r7, #28]
 8105262:	005b      	lsls	r3, r3, #1
 8105264:	fa02 f303 	lsl.w	r3, r2, r3
 8105268:	69ba      	ldr	r2, [r7, #24]
 810526a:	4313      	orrs	r3, r2
 810526c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	69ba      	ldr	r2, [r7, #24]
 8105272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	685b      	ldr	r3, [r3, #4]
 8105278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810527a:	2201      	movs	r2, #1
 810527c:	69fb      	ldr	r3, [r7, #28]
 810527e:	fa02 f303 	lsl.w	r3, r2, r3
 8105282:	43db      	mvns	r3, r3
 8105284:	69ba      	ldr	r2, [r7, #24]
 8105286:	4013      	ands	r3, r2
 8105288:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810528a:	683b      	ldr	r3, [r7, #0]
 810528c:	685b      	ldr	r3, [r3, #4]
 810528e:	091b      	lsrs	r3, r3, #4
 8105290:	f003 0201 	and.w	r2, r3, #1
 8105294:	69fb      	ldr	r3, [r7, #28]
 8105296:	fa02 f303 	lsl.w	r3, r2, r3
 810529a:	69ba      	ldr	r2, [r7, #24]
 810529c:	4313      	orrs	r3, r2
 810529e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	69ba      	ldr	r2, [r7, #24]
 81052a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81052a6:	683b      	ldr	r3, [r7, #0]
 81052a8:	685b      	ldr	r3, [r3, #4]
 81052aa:	f003 0303 	and.w	r3, r3, #3
 81052ae:	2b03      	cmp	r3, #3
 81052b0:	d017      	beq.n	81052e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	68db      	ldr	r3, [r3, #12]
 81052b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81052b8:	69fb      	ldr	r3, [r7, #28]
 81052ba:	005b      	lsls	r3, r3, #1
 81052bc:	2203      	movs	r2, #3
 81052be:	fa02 f303 	lsl.w	r3, r2, r3
 81052c2:	43db      	mvns	r3, r3
 81052c4:	69ba      	ldr	r2, [r7, #24]
 81052c6:	4013      	ands	r3, r2
 81052c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81052ca:	683b      	ldr	r3, [r7, #0]
 81052cc:	689a      	ldr	r2, [r3, #8]
 81052ce:	69fb      	ldr	r3, [r7, #28]
 81052d0:	005b      	lsls	r3, r3, #1
 81052d2:	fa02 f303 	lsl.w	r3, r2, r3
 81052d6:	69ba      	ldr	r2, [r7, #24]
 81052d8:	4313      	orrs	r3, r2
 81052da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	69ba      	ldr	r2, [r7, #24]
 81052e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81052e2:	683b      	ldr	r3, [r7, #0]
 81052e4:	685b      	ldr	r3, [r3, #4]
 81052e6:	f003 0303 	and.w	r3, r3, #3
 81052ea:	2b02      	cmp	r3, #2
 81052ec:	d123      	bne.n	8105336 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81052ee:	69fb      	ldr	r3, [r7, #28]
 81052f0:	08da      	lsrs	r2, r3, #3
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	3208      	adds	r2, #8
 81052f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81052fc:	69fb      	ldr	r3, [r7, #28]
 81052fe:	f003 0307 	and.w	r3, r3, #7
 8105302:	009b      	lsls	r3, r3, #2
 8105304:	220f      	movs	r2, #15
 8105306:	fa02 f303 	lsl.w	r3, r2, r3
 810530a:	43db      	mvns	r3, r3
 810530c:	69ba      	ldr	r2, [r7, #24]
 810530e:	4013      	ands	r3, r2
 8105310:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105312:	683b      	ldr	r3, [r7, #0]
 8105314:	691a      	ldr	r2, [r3, #16]
 8105316:	69fb      	ldr	r3, [r7, #28]
 8105318:	f003 0307 	and.w	r3, r3, #7
 810531c:	009b      	lsls	r3, r3, #2
 810531e:	fa02 f303 	lsl.w	r3, r2, r3
 8105322:	69ba      	ldr	r2, [r7, #24]
 8105324:	4313      	orrs	r3, r2
 8105326:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105328:	69fb      	ldr	r3, [r7, #28]
 810532a:	08da      	lsrs	r2, r3, #3
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	3208      	adds	r2, #8
 8105330:	69b9      	ldr	r1, [r7, #24]
 8105332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	681b      	ldr	r3, [r3, #0]
 810533a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810533c:	69fb      	ldr	r3, [r7, #28]
 810533e:	005b      	lsls	r3, r3, #1
 8105340:	2203      	movs	r2, #3
 8105342:	fa02 f303 	lsl.w	r3, r2, r3
 8105346:	43db      	mvns	r3, r3
 8105348:	69ba      	ldr	r2, [r7, #24]
 810534a:	4013      	ands	r3, r2
 810534c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810534e:	683b      	ldr	r3, [r7, #0]
 8105350:	685b      	ldr	r3, [r3, #4]
 8105352:	f003 0203 	and.w	r2, r3, #3
 8105356:	69fb      	ldr	r3, [r7, #28]
 8105358:	005b      	lsls	r3, r3, #1
 810535a:	fa02 f303 	lsl.w	r3, r2, r3
 810535e:	69ba      	ldr	r2, [r7, #24]
 8105360:	4313      	orrs	r3, r2
 8105362:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	69ba      	ldr	r2, [r7, #24]
 8105368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810536a:	683b      	ldr	r3, [r7, #0]
 810536c:	685b      	ldr	r3, [r3, #4]
 810536e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105372:	2b00      	cmp	r3, #0
 8105374:	f000 80e0 	beq.w	8105538 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105378:	4b2f      	ldr	r3, [pc, #188]	@ (8105438 <HAL_GPIO_Init+0x238>)
 810537a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810537e:	4a2e      	ldr	r2, [pc, #184]	@ (8105438 <HAL_GPIO_Init+0x238>)
 8105380:	f043 0302 	orr.w	r3, r3, #2
 8105384:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105388:	4b2b      	ldr	r3, [pc, #172]	@ (8105438 <HAL_GPIO_Init+0x238>)
 810538a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810538e:	f003 0302 	and.w	r3, r3, #2
 8105392:	60fb      	str	r3, [r7, #12]
 8105394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105396:	4a29      	ldr	r2, [pc, #164]	@ (810543c <HAL_GPIO_Init+0x23c>)
 8105398:	69fb      	ldr	r3, [r7, #28]
 810539a:	089b      	lsrs	r3, r3, #2
 810539c:	3302      	adds	r3, #2
 810539e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81053a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81053a4:	69fb      	ldr	r3, [r7, #28]
 81053a6:	f003 0303 	and.w	r3, r3, #3
 81053aa:	009b      	lsls	r3, r3, #2
 81053ac:	220f      	movs	r2, #15
 81053ae:	fa02 f303 	lsl.w	r3, r2, r3
 81053b2:	43db      	mvns	r3, r3
 81053b4:	69ba      	ldr	r2, [r7, #24]
 81053b6:	4013      	ands	r3, r2
 81053b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	4a20      	ldr	r2, [pc, #128]	@ (8105440 <HAL_GPIO_Init+0x240>)
 81053be:	4293      	cmp	r3, r2
 81053c0:	d052      	beq.n	8105468 <HAL_GPIO_Init+0x268>
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	4a1f      	ldr	r2, [pc, #124]	@ (8105444 <HAL_GPIO_Init+0x244>)
 81053c6:	4293      	cmp	r3, r2
 81053c8:	d031      	beq.n	810542e <HAL_GPIO_Init+0x22e>
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	4a1e      	ldr	r2, [pc, #120]	@ (8105448 <HAL_GPIO_Init+0x248>)
 81053ce:	4293      	cmp	r3, r2
 81053d0:	d02b      	beq.n	810542a <HAL_GPIO_Init+0x22a>
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	4a1d      	ldr	r2, [pc, #116]	@ (810544c <HAL_GPIO_Init+0x24c>)
 81053d6:	4293      	cmp	r3, r2
 81053d8:	d025      	beq.n	8105426 <HAL_GPIO_Init+0x226>
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	4a1c      	ldr	r2, [pc, #112]	@ (8105450 <HAL_GPIO_Init+0x250>)
 81053de:	4293      	cmp	r3, r2
 81053e0:	d01f      	beq.n	8105422 <HAL_GPIO_Init+0x222>
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	4a1b      	ldr	r2, [pc, #108]	@ (8105454 <HAL_GPIO_Init+0x254>)
 81053e6:	4293      	cmp	r3, r2
 81053e8:	d019      	beq.n	810541e <HAL_GPIO_Init+0x21e>
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	4a1a      	ldr	r2, [pc, #104]	@ (8105458 <HAL_GPIO_Init+0x258>)
 81053ee:	4293      	cmp	r3, r2
 81053f0:	d013      	beq.n	810541a <HAL_GPIO_Init+0x21a>
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	4a19      	ldr	r2, [pc, #100]	@ (810545c <HAL_GPIO_Init+0x25c>)
 81053f6:	4293      	cmp	r3, r2
 81053f8:	d00d      	beq.n	8105416 <HAL_GPIO_Init+0x216>
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	4a18      	ldr	r2, [pc, #96]	@ (8105460 <HAL_GPIO_Init+0x260>)
 81053fe:	4293      	cmp	r3, r2
 8105400:	d007      	beq.n	8105412 <HAL_GPIO_Init+0x212>
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	4a17      	ldr	r2, [pc, #92]	@ (8105464 <HAL_GPIO_Init+0x264>)
 8105406:	4293      	cmp	r3, r2
 8105408:	d101      	bne.n	810540e <HAL_GPIO_Init+0x20e>
 810540a:	2309      	movs	r3, #9
 810540c:	e02d      	b.n	810546a <HAL_GPIO_Init+0x26a>
 810540e:	230a      	movs	r3, #10
 8105410:	e02b      	b.n	810546a <HAL_GPIO_Init+0x26a>
 8105412:	2308      	movs	r3, #8
 8105414:	e029      	b.n	810546a <HAL_GPIO_Init+0x26a>
 8105416:	2307      	movs	r3, #7
 8105418:	e027      	b.n	810546a <HAL_GPIO_Init+0x26a>
 810541a:	2306      	movs	r3, #6
 810541c:	e025      	b.n	810546a <HAL_GPIO_Init+0x26a>
 810541e:	2305      	movs	r3, #5
 8105420:	e023      	b.n	810546a <HAL_GPIO_Init+0x26a>
 8105422:	2304      	movs	r3, #4
 8105424:	e021      	b.n	810546a <HAL_GPIO_Init+0x26a>
 8105426:	2303      	movs	r3, #3
 8105428:	e01f      	b.n	810546a <HAL_GPIO_Init+0x26a>
 810542a:	2302      	movs	r3, #2
 810542c:	e01d      	b.n	810546a <HAL_GPIO_Init+0x26a>
 810542e:	2301      	movs	r3, #1
 8105430:	e01b      	b.n	810546a <HAL_GPIO_Init+0x26a>
 8105432:	bf00      	nop
 8105434:	580000c0 	.word	0x580000c0
 8105438:	58024400 	.word	0x58024400
 810543c:	58000400 	.word	0x58000400
 8105440:	58020000 	.word	0x58020000
 8105444:	58020400 	.word	0x58020400
 8105448:	58020800 	.word	0x58020800
 810544c:	58020c00 	.word	0x58020c00
 8105450:	58021000 	.word	0x58021000
 8105454:	58021400 	.word	0x58021400
 8105458:	58021800 	.word	0x58021800
 810545c:	58021c00 	.word	0x58021c00
 8105460:	58022000 	.word	0x58022000
 8105464:	58022400 	.word	0x58022400
 8105468:	2300      	movs	r3, #0
 810546a:	69fa      	ldr	r2, [r7, #28]
 810546c:	f002 0203 	and.w	r2, r2, #3
 8105470:	0092      	lsls	r2, r2, #2
 8105472:	4093      	lsls	r3, r2
 8105474:	69ba      	ldr	r2, [r7, #24]
 8105476:	4313      	orrs	r3, r2
 8105478:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810547a:	4938      	ldr	r1, [pc, #224]	@ (810555c <HAL_GPIO_Init+0x35c>)
 810547c:	69fb      	ldr	r3, [r7, #28]
 810547e:	089b      	lsrs	r3, r3, #2
 8105480:	3302      	adds	r3, #2
 8105482:	69ba      	ldr	r2, [r7, #24]
 8105484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810548c:	681b      	ldr	r3, [r3, #0]
 810548e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105490:	693b      	ldr	r3, [r7, #16]
 8105492:	43db      	mvns	r3, r3
 8105494:	69ba      	ldr	r2, [r7, #24]
 8105496:	4013      	ands	r3, r2
 8105498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810549a:	683b      	ldr	r3, [r7, #0]
 810549c:	685b      	ldr	r3, [r3, #4]
 810549e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81054a2:	2b00      	cmp	r3, #0
 81054a4:	d003      	beq.n	81054ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81054a6:	69ba      	ldr	r2, [r7, #24]
 81054a8:	693b      	ldr	r3, [r7, #16]
 81054aa:	4313      	orrs	r3, r2
 81054ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81054ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81054b2:	69bb      	ldr	r3, [r7, #24]
 81054b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81054b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81054ba:	685b      	ldr	r3, [r3, #4]
 81054bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81054be:	693b      	ldr	r3, [r7, #16]
 81054c0:	43db      	mvns	r3, r3
 81054c2:	69ba      	ldr	r2, [r7, #24]
 81054c4:	4013      	ands	r3, r2
 81054c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81054c8:	683b      	ldr	r3, [r7, #0]
 81054ca:	685b      	ldr	r3, [r3, #4]
 81054cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	d003      	beq.n	81054dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81054d4:	69ba      	ldr	r2, [r7, #24]
 81054d6:	693b      	ldr	r3, [r7, #16]
 81054d8:	4313      	orrs	r3, r2
 81054da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81054dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81054e0:	69bb      	ldr	r3, [r7, #24]
 81054e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81054e4:	697b      	ldr	r3, [r7, #20]
 81054e6:	685b      	ldr	r3, [r3, #4]
 81054e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81054ea:	693b      	ldr	r3, [r7, #16]
 81054ec:	43db      	mvns	r3, r3
 81054ee:	69ba      	ldr	r2, [r7, #24]
 81054f0:	4013      	ands	r3, r2
 81054f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81054f4:	683b      	ldr	r3, [r7, #0]
 81054f6:	685b      	ldr	r3, [r3, #4]
 81054f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81054fc:	2b00      	cmp	r3, #0
 81054fe:	d003      	beq.n	8105508 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105500:	69ba      	ldr	r2, [r7, #24]
 8105502:	693b      	ldr	r3, [r7, #16]
 8105504:	4313      	orrs	r3, r2
 8105506:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105508:	697b      	ldr	r3, [r7, #20]
 810550a:	69ba      	ldr	r2, [r7, #24]
 810550c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810550e:	697b      	ldr	r3, [r7, #20]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105514:	693b      	ldr	r3, [r7, #16]
 8105516:	43db      	mvns	r3, r3
 8105518:	69ba      	ldr	r2, [r7, #24]
 810551a:	4013      	ands	r3, r2
 810551c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810551e:	683b      	ldr	r3, [r7, #0]
 8105520:	685b      	ldr	r3, [r3, #4]
 8105522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105526:	2b00      	cmp	r3, #0
 8105528:	d003      	beq.n	8105532 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810552a:	69ba      	ldr	r2, [r7, #24]
 810552c:	693b      	ldr	r3, [r7, #16]
 810552e:	4313      	orrs	r3, r2
 8105530:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105532:	697b      	ldr	r3, [r7, #20]
 8105534:	69ba      	ldr	r2, [r7, #24]
 8105536:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105538:	69fb      	ldr	r3, [r7, #28]
 810553a:	3301      	adds	r3, #1
 810553c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810553e:	683b      	ldr	r3, [r7, #0]
 8105540:	681a      	ldr	r2, [r3, #0]
 8105542:	69fb      	ldr	r3, [r7, #28]
 8105544:	fa22 f303 	lsr.w	r3, r2, r3
 8105548:	2b00      	cmp	r3, #0
 810554a:	f47f ae63 	bne.w	8105214 <HAL_GPIO_Init+0x14>
  }
}
 810554e:	bf00      	nop
 8105550:	bf00      	nop
 8105552:	3724      	adds	r7, #36	@ 0x24
 8105554:	46bd      	mov	sp, r7
 8105556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810555a:	4770      	bx	lr
 810555c:	58000400 	.word	0x58000400

08105560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105560:	b480      	push	{r7}
 8105562:	b083      	sub	sp, #12
 8105564:	af00      	add	r7, sp, #0
 8105566:	6078      	str	r0, [r7, #4]
 8105568:	460b      	mov	r3, r1
 810556a:	807b      	strh	r3, [r7, #2]
 810556c:	4613      	mov	r3, r2
 810556e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105570:	787b      	ldrb	r3, [r7, #1]
 8105572:	2b00      	cmp	r3, #0
 8105574:	d003      	beq.n	810557e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105576:	887a      	ldrh	r2, [r7, #2]
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810557c:	e003      	b.n	8105586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810557e:	887b      	ldrh	r3, [r7, #2]
 8105580:	041a      	lsls	r2, r3, #16
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	619a      	str	r2, [r3, #24]
}
 8105586:	bf00      	nop
 8105588:	370c      	adds	r7, #12
 810558a:	46bd      	mov	sp, r7
 810558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105590:	4770      	bx	lr

08105592 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8105592:	b580      	push	{r7, lr}
 8105594:	b082      	sub	sp, #8
 8105596:	af00      	add	r7, sp, #0
 8105598:	4603      	mov	r3, r0
 810559a:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 810559c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81055a0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 81055a4:	88fb      	ldrh	r3, [r7, #6]
 81055a6:	4013      	ands	r3, r2
 81055a8:	2b00      	cmp	r3, #0
 81055aa:	d008      	beq.n	81055be <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81055ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81055b0:	88fb      	ldrh	r3, [r7, #6]
 81055b2:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81055b6:	88fb      	ldrh	r3, [r7, #6]
 81055b8:	4618      	mov	r0, r3
 81055ba:	f7fd fb2f 	bl	8102c1c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81055be:	bf00      	nop
 81055c0:	3708      	adds	r7, #8
 81055c2:	46bd      	mov	sp, r7
 81055c4:	bd80      	pop	{r7, pc}
	...

081055c8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81055c8:	b480      	push	{r7}
 81055ca:	b083      	sub	sp, #12
 81055cc:	af00      	add	r7, sp, #0
 81055ce:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81055d0:	4b05      	ldr	r3, [pc, #20]	@ (81055e8 <HAL_HSEM_ActivateNotification+0x20>)
 81055d2:	681a      	ldr	r2, [r3, #0]
 81055d4:	4904      	ldr	r1, [pc, #16]	@ (81055e8 <HAL_HSEM_ActivateNotification+0x20>)
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	4313      	orrs	r3, r2
 81055da:	600b      	str	r3, [r1, #0]
#endif
}
 81055dc:	bf00      	nop
 81055de:	370c      	adds	r7, #12
 81055e0:	46bd      	mov	sp, r7
 81055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055e6:	4770      	bx	lr
 81055e8:	58026510 	.word	0x58026510

081055ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81055ec:	b580      	push	{r7, lr}
 81055ee:	b082      	sub	sp, #8
 81055f0:	af00      	add	r7, sp, #0
 81055f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	2b00      	cmp	r3, #0
 81055f8:	d101      	bne.n	81055fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81055fa:	2301      	movs	r3, #1
 81055fc:	e08d      	b.n	810571a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81055fe:	687b      	ldr	r3, [r7, #4]
 8105600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105604:	b2db      	uxtb	r3, r3
 8105606:	2b00      	cmp	r3, #0
 8105608:	d106      	bne.n	8105618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	2200      	movs	r2, #0
 810560e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8105612:	6878      	ldr	r0, [r7, #4]
 8105614:	f7fd fbfe 	bl	8102e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	2224      	movs	r2, #36	@ 0x24
 810561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	681a      	ldr	r2, [r3, #0]
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	f022 0201 	bic.w	r2, r2, #1
 810562e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	685a      	ldr	r2, [r3, #4]
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	681b      	ldr	r3, [r3, #0]
 8105638:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 810563c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	681b      	ldr	r3, [r3, #0]
 8105642:	689a      	ldr	r2, [r3, #8]
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810564c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	68db      	ldr	r3, [r3, #12]
 8105652:	2b01      	cmp	r3, #1
 8105654:	d107      	bne.n	8105666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8105656:	687b      	ldr	r3, [r7, #4]
 8105658:	689a      	ldr	r2, [r3, #8]
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	681b      	ldr	r3, [r3, #0]
 810565e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8105662:	609a      	str	r2, [r3, #8]
 8105664:	e006      	b.n	8105674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	689a      	ldr	r2, [r3, #8]
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	681b      	ldr	r3, [r3, #0]
 810566e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8105672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8105674:	687b      	ldr	r3, [r7, #4]
 8105676:	68db      	ldr	r3, [r3, #12]
 8105678:	2b02      	cmp	r3, #2
 810567a:	d108      	bne.n	810568e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810567c:	687b      	ldr	r3, [r7, #4]
 810567e:	681b      	ldr	r3, [r3, #0]
 8105680:	685a      	ldr	r2, [r3, #4]
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	681b      	ldr	r3, [r3, #0]
 8105686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810568a:	605a      	str	r2, [r3, #4]
 810568c:	e007      	b.n	810569e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810568e:	687b      	ldr	r3, [r7, #4]
 8105690:	681b      	ldr	r3, [r3, #0]
 8105692:	685a      	ldr	r2, [r3, #4]
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 810569c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	685b      	ldr	r3, [r3, #4]
 81056a4:	687a      	ldr	r2, [r7, #4]
 81056a6:	6812      	ldr	r2, [r2, #0]
 81056a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81056ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81056b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	68da      	ldr	r2, [r3, #12]
 81056b8:	687b      	ldr	r3, [r7, #4]
 81056ba:	681b      	ldr	r3, [r3, #0]
 81056bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81056c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81056c2:	687b      	ldr	r3, [r7, #4]
 81056c4:	691a      	ldr	r2, [r3, #16]
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	695b      	ldr	r3, [r3, #20]
 81056ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81056ce:	687b      	ldr	r3, [r7, #4]
 81056d0:	699b      	ldr	r3, [r3, #24]
 81056d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81056d4:	687b      	ldr	r3, [r7, #4]
 81056d6:	681b      	ldr	r3, [r3, #0]
 81056d8:	430a      	orrs	r2, r1
 81056da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	69d9      	ldr	r1, [r3, #28]
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	6a1a      	ldr	r2, [r3, #32]
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	681b      	ldr	r3, [r3, #0]
 81056e8:	430a      	orrs	r2, r1
 81056ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	681a      	ldr	r2, [r3, #0]
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	681b      	ldr	r3, [r3, #0]
 81056f6:	f042 0201 	orr.w	r2, r2, #1
 81056fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	2200      	movs	r2, #0
 8105700:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	2220      	movs	r2, #32
 8105706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810570a:	687b      	ldr	r3, [r7, #4]
 810570c:	2200      	movs	r2, #0
 810570e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	2200      	movs	r2, #0
 8105714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8105718:	2300      	movs	r3, #0
}
 810571a:	4618      	mov	r0, r3
 810571c:	3708      	adds	r7, #8
 810571e:	46bd      	mov	sp, r7
 8105720:	bd80      	pop	{r7, pc}
	...

08105724 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8105724:	b580      	push	{r7, lr}
 8105726:	b088      	sub	sp, #32
 8105728:	af02      	add	r7, sp, #8
 810572a:	60f8      	str	r0, [r7, #12]
 810572c:	607a      	str	r2, [r7, #4]
 810572e:	461a      	mov	r2, r3
 8105730:	460b      	mov	r3, r1
 8105732:	817b      	strh	r3, [r7, #10]
 8105734:	4613      	mov	r3, r2
 8105736:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105738:	68fb      	ldr	r3, [r7, #12]
 810573a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810573e:	b2db      	uxtb	r3, r3
 8105740:	2b20      	cmp	r3, #32
 8105742:	f040 80fd 	bne.w	8105940 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105746:	68fb      	ldr	r3, [r7, #12]
 8105748:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810574c:	2b01      	cmp	r3, #1
 810574e:	d101      	bne.n	8105754 <HAL_I2C_Master_Transmit+0x30>
 8105750:	2302      	movs	r3, #2
 8105752:	e0f6      	b.n	8105942 <HAL_I2C_Master_Transmit+0x21e>
 8105754:	68fb      	ldr	r3, [r7, #12]
 8105756:	2201      	movs	r2, #1
 8105758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810575c:	f7fd ff08 	bl	8103570 <HAL_GetTick>
 8105760:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105762:	693b      	ldr	r3, [r7, #16]
 8105764:	9300      	str	r3, [sp, #0]
 8105766:	2319      	movs	r3, #25
 8105768:	2201      	movs	r2, #1
 810576a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810576e:	68f8      	ldr	r0, [r7, #12]
 8105770:	f000 fa24 	bl	8105bbc <I2C_WaitOnFlagUntilTimeout>
 8105774:	4603      	mov	r3, r0
 8105776:	2b00      	cmp	r3, #0
 8105778:	d001      	beq.n	810577e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 810577a:	2301      	movs	r3, #1
 810577c:	e0e1      	b.n	8105942 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	2221      	movs	r2, #33	@ 0x21
 8105782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8105786:	68fb      	ldr	r3, [r7, #12]
 8105788:	2210      	movs	r2, #16
 810578a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810578e:	68fb      	ldr	r3, [r7, #12]
 8105790:	2200      	movs	r2, #0
 8105792:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	687a      	ldr	r2, [r7, #4]
 8105798:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	893a      	ldrh	r2, [r7, #8]
 810579e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81057a0:	68fb      	ldr	r3, [r7, #12]
 81057a2:	2200      	movs	r2, #0
 81057a4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81057a6:	68fb      	ldr	r3, [r7, #12]
 81057a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81057aa:	b29b      	uxth	r3, r3
 81057ac:	2bff      	cmp	r3, #255	@ 0xff
 81057ae:	d906      	bls.n	81057be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81057b0:	68fb      	ldr	r3, [r7, #12]
 81057b2:	22ff      	movs	r2, #255	@ 0xff
 81057b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 81057b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81057ba:	617b      	str	r3, [r7, #20]
 81057bc:	e007      	b.n	81057ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81057be:	68fb      	ldr	r3, [r7, #12]
 81057c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81057c2:	b29a      	uxth	r2, r3
 81057c4:	68fb      	ldr	r3, [r7, #12]
 81057c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 81057c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81057cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81057ce:	68fb      	ldr	r3, [r7, #12]
 81057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81057d2:	2b00      	cmp	r3, #0
 81057d4:	d024      	beq.n	8105820 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81057d6:	68fb      	ldr	r3, [r7, #12]
 81057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81057da:	781a      	ldrb	r2, [r3, #0]
 81057dc:	68fb      	ldr	r3, [r7, #12]
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81057e2:	68fb      	ldr	r3, [r7, #12]
 81057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81057e6:	1c5a      	adds	r2, r3, #1
 81057e8:	68fb      	ldr	r3, [r7, #12]
 81057ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81057ec:	68fb      	ldr	r3, [r7, #12]
 81057ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81057f0:	b29b      	uxth	r3, r3
 81057f2:	3b01      	subs	r3, #1
 81057f4:	b29a      	uxth	r2, r3
 81057f6:	68fb      	ldr	r3, [r7, #12]
 81057f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81057fa:	68fb      	ldr	r3, [r7, #12]
 81057fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81057fe:	3b01      	subs	r3, #1
 8105800:	b29a      	uxth	r2, r3
 8105802:	68fb      	ldr	r3, [r7, #12]
 8105804:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8105806:	68fb      	ldr	r3, [r7, #12]
 8105808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810580a:	b2db      	uxtb	r3, r3
 810580c:	3301      	adds	r3, #1
 810580e:	b2da      	uxtb	r2, r3
 8105810:	8979      	ldrh	r1, [r7, #10]
 8105812:	4b4e      	ldr	r3, [pc, #312]	@ (810594c <HAL_I2C_Master_Transmit+0x228>)
 8105814:	9300      	str	r3, [sp, #0]
 8105816:	697b      	ldr	r3, [r7, #20]
 8105818:	68f8      	ldr	r0, [r7, #12]
 810581a:	f000 fc1f 	bl	810605c <I2C_TransferConfig>
 810581e:	e066      	b.n	81058ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8105820:	68fb      	ldr	r3, [r7, #12]
 8105822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105824:	b2da      	uxtb	r2, r3
 8105826:	8979      	ldrh	r1, [r7, #10]
 8105828:	4b48      	ldr	r3, [pc, #288]	@ (810594c <HAL_I2C_Master_Transmit+0x228>)
 810582a:	9300      	str	r3, [sp, #0]
 810582c:	697b      	ldr	r3, [r7, #20]
 810582e:	68f8      	ldr	r0, [r7, #12]
 8105830:	f000 fc14 	bl	810605c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8105834:	e05b      	b.n	81058ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105836:	693a      	ldr	r2, [r7, #16]
 8105838:	6a39      	ldr	r1, [r7, #32]
 810583a:	68f8      	ldr	r0, [r7, #12]
 810583c:	f000 fa17 	bl	8105c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8105840:	4603      	mov	r3, r0
 8105842:	2b00      	cmp	r3, #0
 8105844:	d001      	beq.n	810584a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8105846:	2301      	movs	r3, #1
 8105848:	e07b      	b.n	8105942 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810584a:	68fb      	ldr	r3, [r7, #12]
 810584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810584e:	781a      	ldrb	r2, [r3, #0]
 8105850:	68fb      	ldr	r3, [r7, #12]
 8105852:	681b      	ldr	r3, [r3, #0]
 8105854:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105856:	68fb      	ldr	r3, [r7, #12]
 8105858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810585a:	1c5a      	adds	r2, r3, #1
 810585c:	68fb      	ldr	r3, [r7, #12]
 810585e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8105860:	68fb      	ldr	r3, [r7, #12]
 8105862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105864:	b29b      	uxth	r3, r3
 8105866:	3b01      	subs	r3, #1
 8105868:	b29a      	uxth	r2, r3
 810586a:	68fb      	ldr	r3, [r7, #12]
 810586c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810586e:	68fb      	ldr	r3, [r7, #12]
 8105870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105872:	3b01      	subs	r3, #1
 8105874:	b29a      	uxth	r2, r3
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810587e:	b29b      	uxth	r3, r3
 8105880:	2b00      	cmp	r3, #0
 8105882:	d034      	beq.n	81058ee <HAL_I2C_Master_Transmit+0x1ca>
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105888:	2b00      	cmp	r3, #0
 810588a:	d130      	bne.n	81058ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810588c:	693b      	ldr	r3, [r7, #16]
 810588e:	9300      	str	r3, [sp, #0]
 8105890:	6a3b      	ldr	r3, [r7, #32]
 8105892:	2200      	movs	r2, #0
 8105894:	2180      	movs	r1, #128	@ 0x80
 8105896:	68f8      	ldr	r0, [r7, #12]
 8105898:	f000 f990 	bl	8105bbc <I2C_WaitOnFlagUntilTimeout>
 810589c:	4603      	mov	r3, r0
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d001      	beq.n	81058a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 81058a2:	2301      	movs	r3, #1
 81058a4:	e04d      	b.n	8105942 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81058a6:	68fb      	ldr	r3, [r7, #12]
 81058a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81058aa:	b29b      	uxth	r3, r3
 81058ac:	2bff      	cmp	r3, #255	@ 0xff
 81058ae:	d90e      	bls.n	81058ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81058b0:	68fb      	ldr	r3, [r7, #12]
 81058b2:	22ff      	movs	r2, #255	@ 0xff
 81058b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81058b6:	68fb      	ldr	r3, [r7, #12]
 81058b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81058ba:	b2da      	uxtb	r2, r3
 81058bc:	8979      	ldrh	r1, [r7, #10]
 81058be:	2300      	movs	r3, #0
 81058c0:	9300      	str	r3, [sp, #0]
 81058c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81058c6:	68f8      	ldr	r0, [r7, #12]
 81058c8:	f000 fbc8 	bl	810605c <I2C_TransferConfig>
 81058cc:	e00f      	b.n	81058ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81058ce:	68fb      	ldr	r3, [r7, #12]
 81058d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81058d2:	b29a      	uxth	r2, r3
 81058d4:	68fb      	ldr	r3, [r7, #12]
 81058d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81058d8:	68fb      	ldr	r3, [r7, #12]
 81058da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81058dc:	b2da      	uxtb	r2, r3
 81058de:	8979      	ldrh	r1, [r7, #10]
 81058e0:	2300      	movs	r3, #0
 81058e2:	9300      	str	r3, [sp, #0]
 81058e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81058e8:	68f8      	ldr	r0, [r7, #12]
 81058ea:	f000 fbb7 	bl	810605c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81058ee:	68fb      	ldr	r3, [r7, #12]
 81058f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81058f2:	b29b      	uxth	r3, r3
 81058f4:	2b00      	cmp	r3, #0
 81058f6:	d19e      	bne.n	8105836 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81058f8:	693a      	ldr	r2, [r7, #16]
 81058fa:	6a39      	ldr	r1, [r7, #32]
 81058fc:	68f8      	ldr	r0, [r7, #12]
 81058fe:	f000 f9fd 	bl	8105cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8105902:	4603      	mov	r3, r0
 8105904:	2b00      	cmp	r3, #0
 8105906:	d001      	beq.n	810590c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8105908:	2301      	movs	r3, #1
 810590a:	e01a      	b.n	8105942 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810590c:	68fb      	ldr	r3, [r7, #12]
 810590e:	681b      	ldr	r3, [r3, #0]
 8105910:	2220      	movs	r2, #32
 8105912:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105914:	68fb      	ldr	r3, [r7, #12]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	6859      	ldr	r1, [r3, #4]
 810591a:	68fb      	ldr	r3, [r7, #12]
 810591c:	681a      	ldr	r2, [r3, #0]
 810591e:	4b0c      	ldr	r3, [pc, #48]	@ (8105950 <HAL_I2C_Master_Transmit+0x22c>)
 8105920:	400b      	ands	r3, r1
 8105922:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105924:	68fb      	ldr	r3, [r7, #12]
 8105926:	2220      	movs	r2, #32
 8105928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810592c:	68fb      	ldr	r3, [r7, #12]
 810592e:	2200      	movs	r2, #0
 8105930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105934:	68fb      	ldr	r3, [r7, #12]
 8105936:	2200      	movs	r2, #0
 8105938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810593c:	2300      	movs	r3, #0
 810593e:	e000      	b.n	8105942 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8105940:	2302      	movs	r3, #2
  }
}
 8105942:	4618      	mov	r0, r3
 8105944:	3718      	adds	r7, #24
 8105946:	46bd      	mov	sp, r7
 8105948:	bd80      	pop	{r7, pc}
 810594a:	bf00      	nop
 810594c:	80002000 	.word	0x80002000
 8105950:	fe00e800 	.word	0xfe00e800

08105954 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8105954:	b580      	push	{r7, lr}
 8105956:	b088      	sub	sp, #32
 8105958:	af02      	add	r7, sp, #8
 810595a:	60f8      	str	r0, [r7, #12]
 810595c:	607a      	str	r2, [r7, #4]
 810595e:	461a      	mov	r2, r3
 8105960:	460b      	mov	r3, r1
 8105962:	817b      	strh	r3, [r7, #10]
 8105964:	4613      	mov	r3, r2
 8105966:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105968:	68fb      	ldr	r3, [r7, #12]
 810596a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810596e:	b2db      	uxtb	r3, r3
 8105970:	2b20      	cmp	r3, #32
 8105972:	f040 80db 	bne.w	8105b2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105976:	68fb      	ldr	r3, [r7, #12]
 8105978:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810597c:	2b01      	cmp	r3, #1
 810597e:	d101      	bne.n	8105984 <HAL_I2C_Master_Receive+0x30>
 8105980:	2302      	movs	r3, #2
 8105982:	e0d4      	b.n	8105b2e <HAL_I2C_Master_Receive+0x1da>
 8105984:	68fb      	ldr	r3, [r7, #12]
 8105986:	2201      	movs	r2, #1
 8105988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810598c:	f7fd fdf0 	bl	8103570 <HAL_GetTick>
 8105990:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8105992:	697b      	ldr	r3, [r7, #20]
 8105994:	9300      	str	r3, [sp, #0]
 8105996:	2319      	movs	r3, #25
 8105998:	2201      	movs	r2, #1
 810599a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810599e:	68f8      	ldr	r0, [r7, #12]
 81059a0:	f000 f90c 	bl	8105bbc <I2C_WaitOnFlagUntilTimeout>
 81059a4:	4603      	mov	r3, r0
 81059a6:	2b00      	cmp	r3, #0
 81059a8:	d001      	beq.n	81059ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81059aa:	2301      	movs	r3, #1
 81059ac:	e0bf      	b.n	8105b2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81059ae:	68fb      	ldr	r3, [r7, #12]
 81059b0:	2222      	movs	r2, #34	@ 0x22
 81059b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81059b6:	68fb      	ldr	r3, [r7, #12]
 81059b8:	2210      	movs	r2, #16
 81059ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81059be:	68fb      	ldr	r3, [r7, #12]
 81059c0:	2200      	movs	r2, #0
 81059c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81059c4:	68fb      	ldr	r3, [r7, #12]
 81059c6:	687a      	ldr	r2, [r7, #4]
 81059c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81059ca:	68fb      	ldr	r3, [r7, #12]
 81059cc:	893a      	ldrh	r2, [r7, #8]
 81059ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81059d0:	68fb      	ldr	r3, [r7, #12]
 81059d2:	2200      	movs	r2, #0
 81059d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81059d6:	68fb      	ldr	r3, [r7, #12]
 81059d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81059da:	b29b      	uxth	r3, r3
 81059dc:	2bff      	cmp	r3, #255	@ 0xff
 81059de:	d90e      	bls.n	81059fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81059e0:	68fb      	ldr	r3, [r7, #12]
 81059e2:	22ff      	movs	r2, #255	@ 0xff
 81059e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81059e6:	68fb      	ldr	r3, [r7, #12]
 81059e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81059ea:	b2da      	uxtb	r2, r3
 81059ec:	8979      	ldrh	r1, [r7, #10]
 81059ee:	4b52      	ldr	r3, [pc, #328]	@ (8105b38 <HAL_I2C_Master_Receive+0x1e4>)
 81059f0:	9300      	str	r3, [sp, #0]
 81059f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81059f6:	68f8      	ldr	r0, [r7, #12]
 81059f8:	f000 fb30 	bl	810605c <I2C_TransferConfig>
 81059fc:	e06d      	b.n	8105ada <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81059fe:	68fb      	ldr	r3, [r7, #12]
 8105a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105a02:	b29a      	uxth	r2, r3
 8105a04:	68fb      	ldr	r3, [r7, #12]
 8105a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8105a08:	68fb      	ldr	r3, [r7, #12]
 8105a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105a0c:	b2da      	uxtb	r2, r3
 8105a0e:	8979      	ldrh	r1, [r7, #10]
 8105a10:	4b49      	ldr	r3, [pc, #292]	@ (8105b38 <HAL_I2C_Master_Receive+0x1e4>)
 8105a12:	9300      	str	r3, [sp, #0]
 8105a14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105a18:	68f8      	ldr	r0, [r7, #12]
 8105a1a:	f000 fb1f 	bl	810605c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8105a1e:	e05c      	b.n	8105ada <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105a20:	697a      	ldr	r2, [r7, #20]
 8105a22:	6a39      	ldr	r1, [r7, #32]
 8105a24:	68f8      	ldr	r0, [r7, #12]
 8105a26:	f000 f9ad 	bl	8105d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8105a2a:	4603      	mov	r3, r0
 8105a2c:	2b00      	cmp	r3, #0
 8105a2e:	d001      	beq.n	8105a34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8105a30:	2301      	movs	r3, #1
 8105a32:	e07c      	b.n	8105b2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105a34:	68fb      	ldr	r3, [r7, #12]
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8105a3a:	68fb      	ldr	r3, [r7, #12]
 8105a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105a3e:	b2d2      	uxtb	r2, r2
 8105a40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8105a42:	68fb      	ldr	r3, [r7, #12]
 8105a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105a46:	1c5a      	adds	r2, r3, #1
 8105a48:	68fb      	ldr	r3, [r7, #12]
 8105a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8105a4c:	68fb      	ldr	r3, [r7, #12]
 8105a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105a50:	3b01      	subs	r3, #1
 8105a52:	b29a      	uxth	r2, r3
 8105a54:	68fb      	ldr	r3, [r7, #12]
 8105a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8105a58:	68fb      	ldr	r3, [r7, #12]
 8105a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105a5c:	b29b      	uxth	r3, r3
 8105a5e:	3b01      	subs	r3, #1
 8105a60:	b29a      	uxth	r2, r3
 8105a62:	68fb      	ldr	r3, [r7, #12]
 8105a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8105a66:	68fb      	ldr	r3, [r7, #12]
 8105a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105a6a:	b29b      	uxth	r3, r3
 8105a6c:	2b00      	cmp	r3, #0
 8105a6e:	d034      	beq.n	8105ada <HAL_I2C_Master_Receive+0x186>
 8105a70:	68fb      	ldr	r3, [r7, #12]
 8105a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105a74:	2b00      	cmp	r3, #0
 8105a76:	d130      	bne.n	8105ada <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8105a78:	697b      	ldr	r3, [r7, #20]
 8105a7a:	9300      	str	r3, [sp, #0]
 8105a7c:	6a3b      	ldr	r3, [r7, #32]
 8105a7e:	2200      	movs	r2, #0
 8105a80:	2180      	movs	r1, #128	@ 0x80
 8105a82:	68f8      	ldr	r0, [r7, #12]
 8105a84:	f000 f89a 	bl	8105bbc <I2C_WaitOnFlagUntilTimeout>
 8105a88:	4603      	mov	r3, r0
 8105a8a:	2b00      	cmp	r3, #0
 8105a8c:	d001      	beq.n	8105a92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8105a8e:	2301      	movs	r3, #1
 8105a90:	e04d      	b.n	8105b2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105a92:	68fb      	ldr	r3, [r7, #12]
 8105a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105a96:	b29b      	uxth	r3, r3
 8105a98:	2bff      	cmp	r3, #255	@ 0xff
 8105a9a:	d90e      	bls.n	8105aba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105a9c:	68fb      	ldr	r3, [r7, #12]
 8105a9e:	22ff      	movs	r2, #255	@ 0xff
 8105aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8105aa2:	68fb      	ldr	r3, [r7, #12]
 8105aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105aa6:	b2da      	uxtb	r2, r3
 8105aa8:	8979      	ldrh	r1, [r7, #10]
 8105aaa:	2300      	movs	r3, #0
 8105aac:	9300      	str	r3, [sp, #0]
 8105aae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8105ab2:	68f8      	ldr	r0, [r7, #12]
 8105ab4:	f000 fad2 	bl	810605c <I2C_TransferConfig>
 8105ab8:	e00f      	b.n	8105ada <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105aba:	68fb      	ldr	r3, [r7, #12]
 8105abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105abe:	b29a      	uxth	r2, r3
 8105ac0:	68fb      	ldr	r3, [r7, #12]
 8105ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8105ac4:	68fb      	ldr	r3, [r7, #12]
 8105ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105ac8:	b2da      	uxtb	r2, r3
 8105aca:	8979      	ldrh	r1, [r7, #10]
 8105acc:	2300      	movs	r3, #0
 8105ace:	9300      	str	r3, [sp, #0]
 8105ad0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8105ad4:	68f8      	ldr	r0, [r7, #12]
 8105ad6:	f000 fac1 	bl	810605c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8105ada:	68fb      	ldr	r3, [r7, #12]
 8105adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8105ade:	b29b      	uxth	r3, r3
 8105ae0:	2b00      	cmp	r3, #0
 8105ae2:	d19d      	bne.n	8105a20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8105ae4:	697a      	ldr	r2, [r7, #20]
 8105ae6:	6a39      	ldr	r1, [r7, #32]
 8105ae8:	68f8      	ldr	r0, [r7, #12]
 8105aea:	f000 f907 	bl	8105cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8105aee:	4603      	mov	r3, r0
 8105af0:	2b00      	cmp	r3, #0
 8105af2:	d001      	beq.n	8105af8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8105af4:	2301      	movs	r3, #1
 8105af6:	e01a      	b.n	8105b2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105af8:	68fb      	ldr	r3, [r7, #12]
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	2220      	movs	r2, #32
 8105afe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105b00:	68fb      	ldr	r3, [r7, #12]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	6859      	ldr	r1, [r3, #4]
 8105b06:	68fb      	ldr	r3, [r7, #12]
 8105b08:	681a      	ldr	r2, [r3, #0]
 8105b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8105b3c <HAL_I2C_Master_Receive+0x1e8>)
 8105b0c:	400b      	ands	r3, r1
 8105b0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8105b10:	68fb      	ldr	r3, [r7, #12]
 8105b12:	2220      	movs	r2, #32
 8105b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105b18:	68fb      	ldr	r3, [r7, #12]
 8105b1a:	2200      	movs	r2, #0
 8105b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105b20:	68fb      	ldr	r3, [r7, #12]
 8105b22:	2200      	movs	r2, #0
 8105b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8105b28:	2300      	movs	r3, #0
 8105b2a:	e000      	b.n	8105b2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8105b2c:	2302      	movs	r3, #2
  }
}
 8105b2e:	4618      	mov	r0, r3
 8105b30:	3718      	adds	r7, #24
 8105b32:	46bd      	mov	sp, r7
 8105b34:	bd80      	pop	{r7, pc}
 8105b36:	bf00      	nop
 8105b38:	80002400 	.word	0x80002400
 8105b3c:	fe00e800 	.word	0xfe00e800

08105b40 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8105b40:	b480      	push	{r7}
 8105b42:	b083      	sub	sp, #12
 8105b44:	af00      	add	r7, sp, #0
 8105b46:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8105b4e:	b2db      	uxtb	r3, r3
}
 8105b50:	4618      	mov	r0, r3
 8105b52:	370c      	adds	r7, #12
 8105b54:	46bd      	mov	sp, r7
 8105b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b5a:	4770      	bx	lr

08105b5c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8105b5c:	b480      	push	{r7}
 8105b5e:	b083      	sub	sp, #12
 8105b60:	af00      	add	r7, sp, #0
 8105b62:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8105b68:	4618      	mov	r0, r3
 8105b6a:	370c      	adds	r7, #12
 8105b6c:	46bd      	mov	sp, r7
 8105b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b72:	4770      	bx	lr

08105b74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105b74:	b480      	push	{r7}
 8105b76:	b083      	sub	sp, #12
 8105b78:	af00      	add	r7, sp, #0
 8105b7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	681b      	ldr	r3, [r3, #0]
 8105b80:	699b      	ldr	r3, [r3, #24]
 8105b82:	f003 0302 	and.w	r3, r3, #2
 8105b86:	2b02      	cmp	r3, #2
 8105b88:	d103      	bne.n	8105b92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	681b      	ldr	r3, [r3, #0]
 8105b8e:	2200      	movs	r2, #0
 8105b90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	699b      	ldr	r3, [r3, #24]
 8105b98:	f003 0301 	and.w	r3, r3, #1
 8105b9c:	2b01      	cmp	r3, #1
 8105b9e:	d007      	beq.n	8105bb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	681b      	ldr	r3, [r3, #0]
 8105ba4:	699a      	ldr	r2, [r3, #24]
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	681b      	ldr	r3, [r3, #0]
 8105baa:	f042 0201 	orr.w	r2, r2, #1
 8105bae:	619a      	str	r2, [r3, #24]
  }
}
 8105bb0:	bf00      	nop
 8105bb2:	370c      	adds	r7, #12
 8105bb4:	46bd      	mov	sp, r7
 8105bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bba:	4770      	bx	lr

08105bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8105bbc:	b580      	push	{r7, lr}
 8105bbe:	b084      	sub	sp, #16
 8105bc0:	af00      	add	r7, sp, #0
 8105bc2:	60f8      	str	r0, [r7, #12]
 8105bc4:	60b9      	str	r1, [r7, #8]
 8105bc6:	603b      	str	r3, [r7, #0]
 8105bc8:	4613      	mov	r3, r2
 8105bca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105bcc:	e03b      	b.n	8105c46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105bce:	69ba      	ldr	r2, [r7, #24]
 8105bd0:	6839      	ldr	r1, [r7, #0]
 8105bd2:	68f8      	ldr	r0, [r7, #12]
 8105bd4:	f000 f962 	bl	8105e9c <I2C_IsErrorOccurred>
 8105bd8:	4603      	mov	r3, r0
 8105bda:	2b00      	cmp	r3, #0
 8105bdc:	d001      	beq.n	8105be2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8105bde:	2301      	movs	r3, #1
 8105be0:	e041      	b.n	8105c66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105be2:	683b      	ldr	r3, [r7, #0]
 8105be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105be8:	d02d      	beq.n	8105c46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105bea:	f7fd fcc1 	bl	8103570 <HAL_GetTick>
 8105bee:	4602      	mov	r2, r0
 8105bf0:	69bb      	ldr	r3, [r7, #24]
 8105bf2:	1ad3      	subs	r3, r2, r3
 8105bf4:	683a      	ldr	r2, [r7, #0]
 8105bf6:	429a      	cmp	r2, r3
 8105bf8:	d302      	bcc.n	8105c00 <I2C_WaitOnFlagUntilTimeout+0x44>
 8105bfa:	683b      	ldr	r3, [r7, #0]
 8105bfc:	2b00      	cmp	r3, #0
 8105bfe:	d122      	bne.n	8105c46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8105c00:	68fb      	ldr	r3, [r7, #12]
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	699a      	ldr	r2, [r3, #24]
 8105c06:	68bb      	ldr	r3, [r7, #8]
 8105c08:	4013      	ands	r3, r2
 8105c0a:	68ba      	ldr	r2, [r7, #8]
 8105c0c:	429a      	cmp	r2, r3
 8105c0e:	bf0c      	ite	eq
 8105c10:	2301      	moveq	r3, #1
 8105c12:	2300      	movne	r3, #0
 8105c14:	b2db      	uxtb	r3, r3
 8105c16:	461a      	mov	r2, r3
 8105c18:	79fb      	ldrb	r3, [r7, #7]
 8105c1a:	429a      	cmp	r2, r3
 8105c1c:	d113      	bne.n	8105c46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105c1e:	68fb      	ldr	r3, [r7, #12]
 8105c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105c22:	f043 0220 	orr.w	r2, r3, #32
 8105c26:	68fb      	ldr	r3, [r7, #12]
 8105c28:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105c2a:	68fb      	ldr	r3, [r7, #12]
 8105c2c:	2220      	movs	r2, #32
 8105c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105c32:	68fb      	ldr	r3, [r7, #12]
 8105c34:	2200      	movs	r2, #0
 8105c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105c3a:	68fb      	ldr	r3, [r7, #12]
 8105c3c:	2200      	movs	r2, #0
 8105c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8105c42:	2301      	movs	r3, #1
 8105c44:	e00f      	b.n	8105c66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105c46:	68fb      	ldr	r3, [r7, #12]
 8105c48:	681b      	ldr	r3, [r3, #0]
 8105c4a:	699a      	ldr	r2, [r3, #24]
 8105c4c:	68bb      	ldr	r3, [r7, #8]
 8105c4e:	4013      	ands	r3, r2
 8105c50:	68ba      	ldr	r2, [r7, #8]
 8105c52:	429a      	cmp	r2, r3
 8105c54:	bf0c      	ite	eq
 8105c56:	2301      	moveq	r3, #1
 8105c58:	2300      	movne	r3, #0
 8105c5a:	b2db      	uxtb	r3, r3
 8105c5c:	461a      	mov	r2, r3
 8105c5e:	79fb      	ldrb	r3, [r7, #7]
 8105c60:	429a      	cmp	r2, r3
 8105c62:	d0b4      	beq.n	8105bce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105c64:	2300      	movs	r3, #0
}
 8105c66:	4618      	mov	r0, r3
 8105c68:	3710      	adds	r7, #16
 8105c6a:	46bd      	mov	sp, r7
 8105c6c:	bd80      	pop	{r7, pc}

08105c6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105c6e:	b580      	push	{r7, lr}
 8105c70:	b084      	sub	sp, #16
 8105c72:	af00      	add	r7, sp, #0
 8105c74:	60f8      	str	r0, [r7, #12]
 8105c76:	60b9      	str	r1, [r7, #8]
 8105c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105c7a:	e033      	b.n	8105ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105c7c:	687a      	ldr	r2, [r7, #4]
 8105c7e:	68b9      	ldr	r1, [r7, #8]
 8105c80:	68f8      	ldr	r0, [r7, #12]
 8105c82:	f000 f90b 	bl	8105e9c <I2C_IsErrorOccurred>
 8105c86:	4603      	mov	r3, r0
 8105c88:	2b00      	cmp	r3, #0
 8105c8a:	d001      	beq.n	8105c90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105c8c:	2301      	movs	r3, #1
 8105c8e:	e031      	b.n	8105cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105c90:	68bb      	ldr	r3, [r7, #8]
 8105c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105c96:	d025      	beq.n	8105ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105c98:	f7fd fc6a 	bl	8103570 <HAL_GetTick>
 8105c9c:	4602      	mov	r2, r0
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	1ad3      	subs	r3, r2, r3
 8105ca2:	68ba      	ldr	r2, [r7, #8]
 8105ca4:	429a      	cmp	r2, r3
 8105ca6:	d302      	bcc.n	8105cae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105ca8:	68bb      	ldr	r3, [r7, #8]
 8105caa:	2b00      	cmp	r3, #0
 8105cac:	d11a      	bne.n	8105ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8105cae:	68fb      	ldr	r3, [r7, #12]
 8105cb0:	681b      	ldr	r3, [r3, #0]
 8105cb2:	699b      	ldr	r3, [r3, #24]
 8105cb4:	f003 0302 	and.w	r3, r3, #2
 8105cb8:	2b02      	cmp	r3, #2
 8105cba:	d013      	beq.n	8105ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105cbc:	68fb      	ldr	r3, [r7, #12]
 8105cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105cc0:	f043 0220 	orr.w	r2, r3, #32
 8105cc4:	68fb      	ldr	r3, [r7, #12]
 8105cc6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105cc8:	68fb      	ldr	r3, [r7, #12]
 8105cca:	2220      	movs	r2, #32
 8105ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105cd0:	68fb      	ldr	r3, [r7, #12]
 8105cd2:	2200      	movs	r2, #0
 8105cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105cd8:	68fb      	ldr	r3, [r7, #12]
 8105cda:	2200      	movs	r2, #0
 8105cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8105ce0:	2301      	movs	r3, #1
 8105ce2:	e007      	b.n	8105cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105ce4:	68fb      	ldr	r3, [r7, #12]
 8105ce6:	681b      	ldr	r3, [r3, #0]
 8105ce8:	699b      	ldr	r3, [r3, #24]
 8105cea:	f003 0302 	and.w	r3, r3, #2
 8105cee:	2b02      	cmp	r3, #2
 8105cf0:	d1c4      	bne.n	8105c7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8105cf2:	2300      	movs	r3, #0
}
 8105cf4:	4618      	mov	r0, r3
 8105cf6:	3710      	adds	r7, #16
 8105cf8:	46bd      	mov	sp, r7
 8105cfa:	bd80      	pop	{r7, pc}

08105cfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105cfc:	b580      	push	{r7, lr}
 8105cfe:	b084      	sub	sp, #16
 8105d00:	af00      	add	r7, sp, #0
 8105d02:	60f8      	str	r0, [r7, #12]
 8105d04:	60b9      	str	r1, [r7, #8]
 8105d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105d08:	e02f      	b.n	8105d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105d0a:	687a      	ldr	r2, [r7, #4]
 8105d0c:	68b9      	ldr	r1, [r7, #8]
 8105d0e:	68f8      	ldr	r0, [r7, #12]
 8105d10:	f000 f8c4 	bl	8105e9c <I2C_IsErrorOccurred>
 8105d14:	4603      	mov	r3, r0
 8105d16:	2b00      	cmp	r3, #0
 8105d18:	d001      	beq.n	8105d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105d1a:	2301      	movs	r3, #1
 8105d1c:	e02d      	b.n	8105d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105d1e:	f7fd fc27 	bl	8103570 <HAL_GetTick>
 8105d22:	4602      	mov	r2, r0
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	1ad3      	subs	r3, r2, r3
 8105d28:	68ba      	ldr	r2, [r7, #8]
 8105d2a:	429a      	cmp	r2, r3
 8105d2c:	d302      	bcc.n	8105d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105d2e:	68bb      	ldr	r3, [r7, #8]
 8105d30:	2b00      	cmp	r3, #0
 8105d32:	d11a      	bne.n	8105d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8105d34:	68fb      	ldr	r3, [r7, #12]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	699b      	ldr	r3, [r3, #24]
 8105d3a:	f003 0320 	and.w	r3, r3, #32
 8105d3e:	2b20      	cmp	r3, #32
 8105d40:	d013      	beq.n	8105d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105d42:	68fb      	ldr	r3, [r7, #12]
 8105d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105d46:	f043 0220 	orr.w	r2, r3, #32
 8105d4a:	68fb      	ldr	r3, [r7, #12]
 8105d4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105d4e:	68fb      	ldr	r3, [r7, #12]
 8105d50:	2220      	movs	r2, #32
 8105d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105d56:	68fb      	ldr	r3, [r7, #12]
 8105d58:	2200      	movs	r2, #0
 8105d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105d5e:	68fb      	ldr	r3, [r7, #12]
 8105d60:	2200      	movs	r2, #0
 8105d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8105d66:	2301      	movs	r3, #1
 8105d68:	e007      	b.n	8105d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105d6a:	68fb      	ldr	r3, [r7, #12]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	699b      	ldr	r3, [r3, #24]
 8105d70:	f003 0320 	and.w	r3, r3, #32
 8105d74:	2b20      	cmp	r3, #32
 8105d76:	d1c8      	bne.n	8105d0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105d78:	2300      	movs	r3, #0
}
 8105d7a:	4618      	mov	r0, r3
 8105d7c:	3710      	adds	r7, #16
 8105d7e:	46bd      	mov	sp, r7
 8105d80:	bd80      	pop	{r7, pc}
	...

08105d84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105d84:	b580      	push	{r7, lr}
 8105d86:	b086      	sub	sp, #24
 8105d88:	af00      	add	r7, sp, #0
 8105d8a:	60f8      	str	r0, [r7, #12]
 8105d8c:	60b9      	str	r1, [r7, #8]
 8105d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105d90:	2300      	movs	r3, #0
 8105d92:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8105d94:	e071      	b.n	8105e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105d96:	687a      	ldr	r2, [r7, #4]
 8105d98:	68b9      	ldr	r1, [r7, #8]
 8105d9a:	68f8      	ldr	r0, [r7, #12]
 8105d9c:	f000 f87e 	bl	8105e9c <I2C_IsErrorOccurred>
 8105da0:	4603      	mov	r3, r0
 8105da2:	2b00      	cmp	r3, #0
 8105da4:	d001      	beq.n	8105daa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8105da6:	2301      	movs	r3, #1
 8105da8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8105daa:	68fb      	ldr	r3, [r7, #12]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	699b      	ldr	r3, [r3, #24]
 8105db0:	f003 0320 	and.w	r3, r3, #32
 8105db4:	2b20      	cmp	r3, #32
 8105db6:	d13b      	bne.n	8105e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8105db8:	7dfb      	ldrb	r3, [r7, #23]
 8105dba:	2b00      	cmp	r3, #0
 8105dbc:	d138      	bne.n	8105e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8105dbe:	68fb      	ldr	r3, [r7, #12]
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	699b      	ldr	r3, [r3, #24]
 8105dc4:	f003 0304 	and.w	r3, r3, #4
 8105dc8:	2b04      	cmp	r3, #4
 8105dca:	d105      	bne.n	8105dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8105dcc:	68fb      	ldr	r3, [r7, #12]
 8105dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8105dd0:	2b00      	cmp	r3, #0
 8105dd2:	d001      	beq.n	8105dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8105dd4:	2300      	movs	r3, #0
 8105dd6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8105dd8:	68fb      	ldr	r3, [r7, #12]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	699b      	ldr	r3, [r3, #24]
 8105dde:	f003 0310 	and.w	r3, r3, #16
 8105de2:	2b10      	cmp	r3, #16
 8105de4:	d121      	bne.n	8105e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105de6:	68fb      	ldr	r3, [r7, #12]
 8105de8:	681b      	ldr	r3, [r3, #0]
 8105dea:	2210      	movs	r2, #16
 8105dec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8105dee:	68fb      	ldr	r3, [r7, #12]
 8105df0:	2204      	movs	r2, #4
 8105df2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105df4:	68fb      	ldr	r3, [r7, #12]
 8105df6:	681b      	ldr	r3, [r3, #0]
 8105df8:	2220      	movs	r2, #32
 8105dfa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8105dfc:	68fb      	ldr	r3, [r7, #12]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	6859      	ldr	r1, [r3, #4]
 8105e02:	68fb      	ldr	r3, [r7, #12]
 8105e04:	681a      	ldr	r2, [r3, #0]
 8105e06:	4b24      	ldr	r3, [pc, #144]	@ (8105e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8105e08:	400b      	ands	r3, r1
 8105e0a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8105e0c:	68fb      	ldr	r3, [r7, #12]
 8105e0e:	2220      	movs	r2, #32
 8105e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105e14:	68fb      	ldr	r3, [r7, #12]
 8105e16:	2200      	movs	r2, #0
 8105e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105e1c:	68fb      	ldr	r3, [r7, #12]
 8105e1e:	2200      	movs	r2, #0
 8105e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8105e24:	2301      	movs	r3, #1
 8105e26:	75fb      	strb	r3, [r7, #23]
 8105e28:	e002      	b.n	8105e30 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105e2a:	68fb      	ldr	r3, [r7, #12]
 8105e2c:	2200      	movs	r2, #0
 8105e2e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8105e30:	f7fd fb9e 	bl	8103570 <HAL_GetTick>
 8105e34:	4602      	mov	r2, r0
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	1ad3      	subs	r3, r2, r3
 8105e3a:	68ba      	ldr	r2, [r7, #8]
 8105e3c:	429a      	cmp	r2, r3
 8105e3e:	d302      	bcc.n	8105e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8105e40:	68bb      	ldr	r3, [r7, #8]
 8105e42:	2b00      	cmp	r3, #0
 8105e44:	d119      	bne.n	8105e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8105e46:	7dfb      	ldrb	r3, [r7, #23]
 8105e48:	2b00      	cmp	r3, #0
 8105e4a:	d116      	bne.n	8105e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	699b      	ldr	r3, [r3, #24]
 8105e52:	f003 0304 	and.w	r3, r3, #4
 8105e56:	2b04      	cmp	r3, #4
 8105e58:	d00f      	beq.n	8105e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105e5a:	68fb      	ldr	r3, [r7, #12]
 8105e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105e5e:	f043 0220 	orr.w	r2, r3, #32
 8105e62:	68fb      	ldr	r3, [r7, #12]
 8105e64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105e66:	68fb      	ldr	r3, [r7, #12]
 8105e68:	2220      	movs	r2, #32
 8105e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105e6e:	68fb      	ldr	r3, [r7, #12]
 8105e70:	2200      	movs	r2, #0
 8105e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8105e76:	2301      	movs	r3, #1
 8105e78:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8105e7a:	68fb      	ldr	r3, [r7, #12]
 8105e7c:	681b      	ldr	r3, [r3, #0]
 8105e7e:	699b      	ldr	r3, [r3, #24]
 8105e80:	f003 0304 	and.w	r3, r3, #4
 8105e84:	2b04      	cmp	r3, #4
 8105e86:	d002      	beq.n	8105e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8105e88:	7dfb      	ldrb	r3, [r7, #23]
 8105e8a:	2b00      	cmp	r3, #0
 8105e8c:	d083      	beq.n	8105d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8105e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8105e90:	4618      	mov	r0, r3
 8105e92:	3718      	adds	r7, #24
 8105e94:	46bd      	mov	sp, r7
 8105e96:	bd80      	pop	{r7, pc}
 8105e98:	fe00e800 	.word	0xfe00e800

08105e9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105e9c:	b580      	push	{r7, lr}
 8105e9e:	b08a      	sub	sp, #40	@ 0x28
 8105ea0:	af00      	add	r7, sp, #0
 8105ea2:	60f8      	str	r0, [r7, #12]
 8105ea4:	60b9      	str	r1, [r7, #8]
 8105ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105ea8:	2300      	movs	r3, #0
 8105eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8105eae:	68fb      	ldr	r3, [r7, #12]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	699b      	ldr	r3, [r3, #24]
 8105eb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8105eb6:	2300      	movs	r3, #0
 8105eb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8105ebe:	69bb      	ldr	r3, [r7, #24]
 8105ec0:	f003 0310 	and.w	r3, r3, #16
 8105ec4:	2b00      	cmp	r3, #0
 8105ec6:	d068      	beq.n	8105f9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105ec8:	68fb      	ldr	r3, [r7, #12]
 8105eca:	681b      	ldr	r3, [r3, #0]
 8105ecc:	2210      	movs	r2, #16
 8105ece:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105ed0:	e049      	b.n	8105f66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105ed2:	68bb      	ldr	r3, [r7, #8]
 8105ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ed8:	d045      	beq.n	8105f66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8105eda:	f7fd fb49 	bl	8103570 <HAL_GetTick>
 8105ede:	4602      	mov	r2, r0
 8105ee0:	69fb      	ldr	r3, [r7, #28]
 8105ee2:	1ad3      	subs	r3, r2, r3
 8105ee4:	68ba      	ldr	r2, [r7, #8]
 8105ee6:	429a      	cmp	r2, r3
 8105ee8:	d302      	bcc.n	8105ef0 <I2C_IsErrorOccurred+0x54>
 8105eea:	68bb      	ldr	r3, [r7, #8]
 8105eec:	2b00      	cmp	r3, #0
 8105eee:	d13a      	bne.n	8105f66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8105ef0:	68fb      	ldr	r3, [r7, #12]
 8105ef2:	681b      	ldr	r3, [r3, #0]
 8105ef4:	685b      	ldr	r3, [r3, #4]
 8105ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8105efa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8105efc:	68fb      	ldr	r3, [r7, #12]
 8105efe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8105f02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8105f04:	68fb      	ldr	r3, [r7, #12]
 8105f06:	681b      	ldr	r3, [r3, #0]
 8105f08:	699b      	ldr	r3, [r3, #24]
 8105f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105f12:	d121      	bne.n	8105f58 <I2C_IsErrorOccurred+0xbc>
 8105f14:	697b      	ldr	r3, [r7, #20]
 8105f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105f1a:	d01d      	beq.n	8105f58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8105f1c:	7cfb      	ldrb	r3, [r7, #19]
 8105f1e:	2b20      	cmp	r3, #32
 8105f20:	d01a      	beq.n	8105f58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8105f22:	68fb      	ldr	r3, [r7, #12]
 8105f24:	681b      	ldr	r3, [r3, #0]
 8105f26:	685a      	ldr	r2, [r3, #4]
 8105f28:	68fb      	ldr	r3, [r7, #12]
 8105f2a:	681b      	ldr	r3, [r3, #0]
 8105f2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8105f30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8105f32:	f7fd fb1d 	bl	8103570 <HAL_GetTick>
 8105f36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105f38:	e00e      	b.n	8105f58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8105f3a:	f7fd fb19 	bl	8103570 <HAL_GetTick>
 8105f3e:	4602      	mov	r2, r0
 8105f40:	69fb      	ldr	r3, [r7, #28]
 8105f42:	1ad3      	subs	r3, r2, r3
 8105f44:	2b19      	cmp	r3, #25
 8105f46:	d907      	bls.n	8105f58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8105f48:	6a3b      	ldr	r3, [r7, #32]
 8105f4a:	f043 0320 	orr.w	r3, r3, #32
 8105f4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8105f50:	2301      	movs	r3, #1
 8105f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8105f56:	e006      	b.n	8105f66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105f58:	68fb      	ldr	r3, [r7, #12]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	699b      	ldr	r3, [r3, #24]
 8105f5e:	f003 0320 	and.w	r3, r3, #32
 8105f62:	2b20      	cmp	r3, #32
 8105f64:	d1e9      	bne.n	8105f3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105f66:	68fb      	ldr	r3, [r7, #12]
 8105f68:	681b      	ldr	r3, [r3, #0]
 8105f6a:	699b      	ldr	r3, [r3, #24]
 8105f6c:	f003 0320 	and.w	r3, r3, #32
 8105f70:	2b20      	cmp	r3, #32
 8105f72:	d003      	beq.n	8105f7c <I2C_IsErrorOccurred+0xe0>
 8105f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8105f78:	2b00      	cmp	r3, #0
 8105f7a:	d0aa      	beq.n	8105ed2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8105f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8105f80:	2b00      	cmp	r3, #0
 8105f82:	d103      	bne.n	8105f8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105f84:	68fb      	ldr	r3, [r7, #12]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	2220      	movs	r2, #32
 8105f8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8105f8c:	6a3b      	ldr	r3, [r7, #32]
 8105f8e:	f043 0304 	orr.w	r3, r3, #4
 8105f92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8105f94:	2301      	movs	r3, #1
 8105f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8105f9a:	68fb      	ldr	r3, [r7, #12]
 8105f9c:	681b      	ldr	r3, [r3, #0]
 8105f9e:	699b      	ldr	r3, [r3, #24]
 8105fa0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8105fa2:	69bb      	ldr	r3, [r7, #24]
 8105fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105fa8:	2b00      	cmp	r3, #0
 8105faa:	d00b      	beq.n	8105fc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8105fac:	6a3b      	ldr	r3, [r7, #32]
 8105fae:	f043 0301 	orr.w	r3, r3, #1
 8105fb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105fb4:	68fb      	ldr	r3, [r7, #12]
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8105fbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105fbe:	2301      	movs	r3, #1
 8105fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8105fc4:	69bb      	ldr	r3, [r7, #24]
 8105fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8105fca:	2b00      	cmp	r3, #0
 8105fcc:	d00b      	beq.n	8105fe6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8105fce:	6a3b      	ldr	r3, [r7, #32]
 8105fd0:	f043 0308 	orr.w	r3, r3, #8
 8105fd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8105fd6:	68fb      	ldr	r3, [r7, #12]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8105fde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105fe0:	2301      	movs	r3, #1
 8105fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8105fe6:	69bb      	ldr	r3, [r7, #24]
 8105fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8105fec:	2b00      	cmp	r3, #0
 8105fee:	d00b      	beq.n	8106008 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8105ff0:	6a3b      	ldr	r3, [r7, #32]
 8105ff2:	f043 0302 	orr.w	r3, r3, #2
 8105ff6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8105ff8:	68fb      	ldr	r3, [r7, #12]
 8105ffa:	681b      	ldr	r3, [r3, #0]
 8105ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8106000:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8106002:	2301      	movs	r3, #1
 8106004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8106008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810600c:	2b00      	cmp	r3, #0
 810600e:	d01c      	beq.n	810604a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8106010:	68f8      	ldr	r0, [r7, #12]
 8106012:	f7ff fdaf 	bl	8105b74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106016:	68fb      	ldr	r3, [r7, #12]
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	6859      	ldr	r1, [r3, #4]
 810601c:	68fb      	ldr	r3, [r7, #12]
 810601e:	681a      	ldr	r2, [r3, #0]
 8106020:	4b0d      	ldr	r3, [pc, #52]	@ (8106058 <I2C_IsErrorOccurred+0x1bc>)
 8106022:	400b      	ands	r3, r1
 8106024:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8106026:	68fb      	ldr	r3, [r7, #12]
 8106028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810602a:	6a3b      	ldr	r3, [r7, #32]
 810602c:	431a      	orrs	r2, r3
 810602e:	68fb      	ldr	r3, [r7, #12]
 8106030:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8106032:	68fb      	ldr	r3, [r7, #12]
 8106034:	2220      	movs	r2, #32
 8106036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810603a:	68fb      	ldr	r3, [r7, #12]
 810603c:	2200      	movs	r2, #0
 810603e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106042:	68fb      	ldr	r3, [r7, #12]
 8106044:	2200      	movs	r2, #0
 8106046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810604a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810604e:	4618      	mov	r0, r3
 8106050:	3728      	adds	r7, #40	@ 0x28
 8106052:	46bd      	mov	sp, r7
 8106054:	bd80      	pop	{r7, pc}
 8106056:	bf00      	nop
 8106058:	fe00e800 	.word	0xfe00e800

0810605c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810605c:	b480      	push	{r7}
 810605e:	b087      	sub	sp, #28
 8106060:	af00      	add	r7, sp, #0
 8106062:	60f8      	str	r0, [r7, #12]
 8106064:	607b      	str	r3, [r7, #4]
 8106066:	460b      	mov	r3, r1
 8106068:	817b      	strh	r3, [r7, #10]
 810606a:	4613      	mov	r3, r2
 810606c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810606e:	897b      	ldrh	r3, [r7, #10]
 8106070:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8106074:	7a7b      	ldrb	r3, [r7, #9]
 8106076:	041b      	lsls	r3, r3, #16
 8106078:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810607c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8106082:	6a3b      	ldr	r3, [r7, #32]
 8106084:	4313      	orrs	r3, r2
 8106086:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810608a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810608c:	68fb      	ldr	r3, [r7, #12]
 810608e:	681b      	ldr	r3, [r3, #0]
 8106090:	685a      	ldr	r2, [r3, #4]
 8106092:	6a3b      	ldr	r3, [r7, #32]
 8106094:	0d5b      	lsrs	r3, r3, #21
 8106096:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 810609a:	4b08      	ldr	r3, [pc, #32]	@ (81060bc <I2C_TransferConfig+0x60>)
 810609c:	430b      	orrs	r3, r1
 810609e:	43db      	mvns	r3, r3
 81060a0:	ea02 0103 	and.w	r1, r2, r3
 81060a4:	68fb      	ldr	r3, [r7, #12]
 81060a6:	681b      	ldr	r3, [r3, #0]
 81060a8:	697a      	ldr	r2, [r7, #20]
 81060aa:	430a      	orrs	r2, r1
 81060ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81060ae:	bf00      	nop
 81060b0:	371c      	adds	r7, #28
 81060b2:	46bd      	mov	sp, r7
 81060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060b8:	4770      	bx	lr
 81060ba:	bf00      	nop
 81060bc:	03ff63ff 	.word	0x03ff63ff

081060c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81060c0:	b480      	push	{r7}
 81060c2:	b083      	sub	sp, #12
 81060c4:	af00      	add	r7, sp, #0
 81060c6:	6078      	str	r0, [r7, #4]
 81060c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81060d0:	b2db      	uxtb	r3, r3
 81060d2:	2b20      	cmp	r3, #32
 81060d4:	d138      	bne.n	8106148 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81060d6:	687b      	ldr	r3, [r7, #4]
 81060d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81060dc:	2b01      	cmp	r3, #1
 81060de:	d101      	bne.n	81060e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81060e0:	2302      	movs	r3, #2
 81060e2:	e032      	b.n	810614a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	2201      	movs	r2, #1
 81060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	2224      	movs	r2, #36	@ 0x24
 81060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81060f4:	687b      	ldr	r3, [r7, #4]
 81060f6:	681b      	ldr	r3, [r3, #0]
 81060f8:	681a      	ldr	r2, [r3, #0]
 81060fa:	687b      	ldr	r3, [r7, #4]
 81060fc:	681b      	ldr	r3, [r3, #0]
 81060fe:	f022 0201 	bic.w	r2, r2, #1
 8106102:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	681b      	ldr	r3, [r3, #0]
 8106108:	681a      	ldr	r2, [r3, #0]
 810610a:	687b      	ldr	r3, [r7, #4]
 810610c:	681b      	ldr	r3, [r3, #0]
 810610e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8106112:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	681b      	ldr	r3, [r3, #0]
 8106118:	6819      	ldr	r1, [r3, #0]
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	681b      	ldr	r3, [r3, #0]
 810611e:	683a      	ldr	r2, [r7, #0]
 8106120:	430a      	orrs	r2, r1
 8106122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	681a      	ldr	r2, [r3, #0]
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	f042 0201 	orr.w	r2, r2, #1
 8106132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	2220      	movs	r2, #32
 8106138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	2200      	movs	r2, #0
 8106140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8106144:	2300      	movs	r3, #0
 8106146:	e000      	b.n	810614a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8106148:	2302      	movs	r3, #2
  }
}
 810614a:	4618      	mov	r0, r3
 810614c:	370c      	adds	r7, #12
 810614e:	46bd      	mov	sp, r7
 8106150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106154:	4770      	bx	lr

08106156 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8106156:	b480      	push	{r7}
 8106158:	b085      	sub	sp, #20
 810615a:	af00      	add	r7, sp, #0
 810615c:	6078      	str	r0, [r7, #4]
 810615e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106166:	b2db      	uxtb	r3, r3
 8106168:	2b20      	cmp	r3, #32
 810616a:	d139      	bne.n	81061e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106172:	2b01      	cmp	r3, #1
 8106174:	d101      	bne.n	810617a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8106176:	2302      	movs	r3, #2
 8106178:	e033      	b.n	81061e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	2201      	movs	r2, #1
 810617e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	2224      	movs	r2, #36	@ 0x24
 8106186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	681a      	ldr	r2, [r3, #0]
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	f022 0201 	bic.w	r2, r2, #1
 8106198:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	681b      	ldr	r3, [r3, #0]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81061a2:	68fb      	ldr	r3, [r7, #12]
 81061a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81061a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81061aa:	683b      	ldr	r3, [r7, #0]
 81061ac:	021b      	lsls	r3, r3, #8
 81061ae:	68fa      	ldr	r2, [r7, #12]
 81061b0:	4313      	orrs	r3, r2
 81061b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	681b      	ldr	r3, [r3, #0]
 81061b8:	68fa      	ldr	r2, [r7, #12]
 81061ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81061bc:	687b      	ldr	r3, [r7, #4]
 81061be:	681b      	ldr	r3, [r3, #0]
 81061c0:	681a      	ldr	r2, [r3, #0]
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	681b      	ldr	r3, [r3, #0]
 81061c6:	f042 0201 	orr.w	r2, r2, #1
 81061ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81061cc:	687b      	ldr	r3, [r7, #4]
 81061ce:	2220      	movs	r2, #32
 81061d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	2200      	movs	r2, #0
 81061d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81061dc:	2300      	movs	r3, #0
 81061de:	e000      	b.n	81061e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81061e0:	2302      	movs	r3, #2
  }
}
 81061e2:	4618      	mov	r0, r3
 81061e4:	3714      	adds	r7, #20
 81061e6:	46bd      	mov	sp, r7
 81061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ec:	4770      	bx	lr
	...

081061f0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81061f0:	b580      	push	{r7, lr}
 81061f2:	b084      	sub	sp, #16
 81061f4:	af00      	add	r7, sp, #0
 81061f6:	60f8      	str	r0, [r7, #12]
 81061f8:	460b      	mov	r3, r1
 81061fa:	607a      	str	r2, [r7, #4]
 81061fc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81061fe:	4b37      	ldr	r3, [pc, #220]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106200:	681b      	ldr	r3, [r3, #0]
 8106202:	f023 0201 	bic.w	r2, r3, #1
 8106206:	4935      	ldr	r1, [pc, #212]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106208:	68fb      	ldr	r3, [r7, #12]
 810620a:	4313      	orrs	r3, r2
 810620c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	2b00      	cmp	r3, #0
 8106212:	d123      	bne.n	810625c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106214:	f7fe ffe0 	bl	81051d8 <HAL_GetCurrentCPUID>
 8106218:	4603      	mov	r3, r0
 810621a:	2b03      	cmp	r3, #3
 810621c:	d158      	bne.n	81062d0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810621e:	4b2f      	ldr	r3, [pc, #188]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106220:	691b      	ldr	r3, [r3, #16]
 8106222:	4a2e      	ldr	r2, [pc, #184]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106224:	f023 0301 	bic.w	r3, r3, #1
 8106228:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810622a:	4b2d      	ldr	r3, [pc, #180]	@ (81062e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810622c:	691b      	ldr	r3, [r3, #16]
 810622e:	4a2c      	ldr	r2, [pc, #176]	@ (81062e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106230:	f043 0304 	orr.w	r3, r3, #4
 8106234:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106236:	f3bf 8f4f 	dsb	sy
}
 810623a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810623c:	f3bf 8f6f 	isb	sy
}
 8106240:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106242:	7afb      	ldrb	r3, [r7, #11]
 8106244:	2b01      	cmp	r3, #1
 8106246:	d101      	bne.n	810624c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106248:	bf30      	wfi
 810624a:	e000      	b.n	810624e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810624c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810624e:	4b24      	ldr	r3, [pc, #144]	@ (81062e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106250:	691b      	ldr	r3, [r3, #16]
 8106252:	4a23      	ldr	r2, [pc, #140]	@ (81062e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106254:	f023 0304 	bic.w	r3, r3, #4
 8106258:	6113      	str	r3, [r2, #16]
 810625a:	e03c      	b.n	81062d6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	2b01      	cmp	r3, #1
 8106260:	d123      	bne.n	81062aa <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8106262:	f7fe ffb9 	bl	81051d8 <HAL_GetCurrentCPUID>
 8106266:	4603      	mov	r3, r0
 8106268:	2b01      	cmp	r3, #1
 810626a:	d133      	bne.n	81062d4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810626c:	4b1b      	ldr	r3, [pc, #108]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 810626e:	695b      	ldr	r3, [r3, #20]
 8106270:	4a1a      	ldr	r2, [pc, #104]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106272:	f023 0302 	bic.w	r3, r3, #2
 8106276:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106278:	4b19      	ldr	r3, [pc, #100]	@ (81062e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810627a:	691b      	ldr	r3, [r3, #16]
 810627c:	4a18      	ldr	r2, [pc, #96]	@ (81062e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810627e:	f043 0304 	orr.w	r3, r3, #4
 8106282:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106284:	f3bf 8f4f 	dsb	sy
}
 8106288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810628a:	f3bf 8f6f 	isb	sy
}
 810628e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106290:	7afb      	ldrb	r3, [r7, #11]
 8106292:	2b01      	cmp	r3, #1
 8106294:	d101      	bne.n	810629a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106296:	bf30      	wfi
 8106298:	e000      	b.n	810629c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810629a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810629c:	4b10      	ldr	r3, [pc, #64]	@ (81062e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810629e:	691b      	ldr	r3, [r3, #16]
 81062a0:	4a0f      	ldr	r2, [pc, #60]	@ (81062e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81062a2:	f023 0304 	bic.w	r3, r3, #4
 81062a6:	6113      	str	r3, [r2, #16]
 81062a8:	e015      	b.n	81062d6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81062aa:	f7fe ff95 	bl	81051d8 <HAL_GetCurrentCPUID>
 81062ae:	4603      	mov	r3, r0
 81062b0:	2b03      	cmp	r3, #3
 81062b2:	d106      	bne.n	81062c2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81062b4:	4b09      	ldr	r3, [pc, #36]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81062b6:	691b      	ldr	r3, [r3, #16]
 81062b8:	4a08      	ldr	r2, [pc, #32]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81062ba:	f023 0304 	bic.w	r3, r3, #4
 81062be:	6113      	str	r3, [r2, #16]
 81062c0:	e009      	b.n	81062d6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81062c2:	4b06      	ldr	r3, [pc, #24]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81062c4:	695b      	ldr	r3, [r3, #20]
 81062c6:	4a05      	ldr	r2, [pc, #20]	@ (81062dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81062c8:	f023 0304 	bic.w	r3, r3, #4
 81062cc:	6153      	str	r3, [r2, #20]
 81062ce:	e002      	b.n	81062d6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81062d0:	bf00      	nop
 81062d2:	e000      	b.n	81062d6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81062d4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81062d6:	3710      	adds	r7, #16
 81062d8:	46bd      	mov	sp, r7
 81062da:	bd80      	pop	{r7, pc}
 81062dc:	58024800 	.word	0x58024800
 81062e0:	e000ed00 	.word	0xe000ed00

081062e4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81062e4:	b580      	push	{r7, lr}
 81062e6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81062e8:	f7fe ff76 	bl	81051d8 <HAL_GetCurrentCPUID>
 81062ec:	4603      	mov	r3, r0
 81062ee:	2b03      	cmp	r3, #3
 81062f0:	d101      	bne.n	81062f6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81062f2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81062f4:	e001      	b.n	81062fa <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81062f6:	bf40      	sev
    __WFE ();
 81062f8:	bf20      	wfe
}
 81062fa:	bf00      	nop
 81062fc:	bd80      	pop	{r7, pc}
	...

08106300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106300:	b480      	push	{r7}
 8106302:	b089      	sub	sp, #36	@ 0x24
 8106304:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106306:	4bb3      	ldr	r3, [pc, #716]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106308:	691b      	ldr	r3, [r3, #16]
 810630a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810630e:	2b18      	cmp	r3, #24
 8106310:	f200 8155 	bhi.w	81065be <HAL_RCC_GetSysClockFreq+0x2be>
 8106314:	a201      	add	r2, pc, #4	@ (adr r2, 810631c <HAL_RCC_GetSysClockFreq+0x1c>)
 8106316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810631a:	bf00      	nop
 810631c:	08106381 	.word	0x08106381
 8106320:	081065bf 	.word	0x081065bf
 8106324:	081065bf 	.word	0x081065bf
 8106328:	081065bf 	.word	0x081065bf
 810632c:	081065bf 	.word	0x081065bf
 8106330:	081065bf 	.word	0x081065bf
 8106334:	081065bf 	.word	0x081065bf
 8106338:	081065bf 	.word	0x081065bf
 810633c:	081063a7 	.word	0x081063a7
 8106340:	081065bf 	.word	0x081065bf
 8106344:	081065bf 	.word	0x081065bf
 8106348:	081065bf 	.word	0x081065bf
 810634c:	081065bf 	.word	0x081065bf
 8106350:	081065bf 	.word	0x081065bf
 8106354:	081065bf 	.word	0x081065bf
 8106358:	081065bf 	.word	0x081065bf
 810635c:	081063ad 	.word	0x081063ad
 8106360:	081065bf 	.word	0x081065bf
 8106364:	081065bf 	.word	0x081065bf
 8106368:	081065bf 	.word	0x081065bf
 810636c:	081065bf 	.word	0x081065bf
 8106370:	081065bf 	.word	0x081065bf
 8106374:	081065bf 	.word	0x081065bf
 8106378:	081065bf 	.word	0x081065bf
 810637c:	081063b3 	.word	0x081063b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106380:	4b94      	ldr	r3, [pc, #592]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	f003 0320 	and.w	r3, r3, #32
 8106388:	2b00      	cmp	r3, #0
 810638a:	d009      	beq.n	81063a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810638c:	4b91      	ldr	r3, [pc, #580]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	08db      	lsrs	r3, r3, #3
 8106392:	f003 0303 	and.w	r3, r3, #3
 8106396:	4a90      	ldr	r2, [pc, #576]	@ (81065d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106398:	fa22 f303 	lsr.w	r3, r2, r3
 810639c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810639e:	e111      	b.n	81065c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81063a0:	4b8d      	ldr	r3, [pc, #564]	@ (81065d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81063a2:	61bb      	str	r3, [r7, #24]
      break;
 81063a4:	e10e      	b.n	81065c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81063a6:	4b8d      	ldr	r3, [pc, #564]	@ (81065dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81063a8:	61bb      	str	r3, [r7, #24]
      break;
 81063aa:	e10b      	b.n	81065c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81063ac:	4b8c      	ldr	r3, [pc, #560]	@ (81065e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81063ae:	61bb      	str	r3, [r7, #24]
      break;
 81063b0:	e108      	b.n	81065c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81063b2:	4b88      	ldr	r3, [pc, #544]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063b6:	f003 0303 	and.w	r3, r3, #3
 81063ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81063bc:	4b85      	ldr	r3, [pc, #532]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063c0:	091b      	lsrs	r3, r3, #4
 81063c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81063c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81063c8:	4b82      	ldr	r3, [pc, #520]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81063cc:	f003 0301 	and.w	r3, r3, #1
 81063d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81063d2:	4b80      	ldr	r3, [pc, #512]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81063d6:	08db      	lsrs	r3, r3, #3
 81063d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81063dc:	68fa      	ldr	r2, [r7, #12]
 81063de:	fb02 f303 	mul.w	r3, r2, r3
 81063e2:	ee07 3a90 	vmov	s15, r3
 81063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81063ee:	693b      	ldr	r3, [r7, #16]
 81063f0:	2b00      	cmp	r3, #0
 81063f2:	f000 80e1 	beq.w	81065b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 81063f6:	697b      	ldr	r3, [r7, #20]
 81063f8:	2b02      	cmp	r3, #2
 81063fa:	f000 8083 	beq.w	8106504 <HAL_RCC_GetSysClockFreq+0x204>
 81063fe:	697b      	ldr	r3, [r7, #20]
 8106400:	2b02      	cmp	r3, #2
 8106402:	f200 80a1 	bhi.w	8106548 <HAL_RCC_GetSysClockFreq+0x248>
 8106406:	697b      	ldr	r3, [r7, #20]
 8106408:	2b00      	cmp	r3, #0
 810640a:	d003      	beq.n	8106414 <HAL_RCC_GetSysClockFreq+0x114>
 810640c:	697b      	ldr	r3, [r7, #20]
 810640e:	2b01      	cmp	r3, #1
 8106410:	d056      	beq.n	81064c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106412:	e099      	b.n	8106548 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106414:	4b6f      	ldr	r3, [pc, #444]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106416:	681b      	ldr	r3, [r3, #0]
 8106418:	f003 0320 	and.w	r3, r3, #32
 810641c:	2b00      	cmp	r3, #0
 810641e:	d02d      	beq.n	810647c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106420:	4b6c      	ldr	r3, [pc, #432]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	08db      	lsrs	r3, r3, #3
 8106426:	f003 0303 	and.w	r3, r3, #3
 810642a:	4a6b      	ldr	r2, [pc, #428]	@ (81065d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810642c:	fa22 f303 	lsr.w	r3, r2, r3
 8106430:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106432:	687b      	ldr	r3, [r7, #4]
 8106434:	ee07 3a90 	vmov	s15, r3
 8106438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810643c:	693b      	ldr	r3, [r7, #16]
 810643e:	ee07 3a90 	vmov	s15, r3
 8106442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810644a:	4b62      	ldr	r3, [pc, #392]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810644c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810644e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106452:	ee07 3a90 	vmov	s15, r3
 8106456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810645a:	ed97 6a02 	vldr	s12, [r7, #8]
 810645e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81065e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810646a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810646e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106476:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810647a:	e087      	b.n	810658c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810647c:	693b      	ldr	r3, [r7, #16]
 810647e:	ee07 3a90 	vmov	s15, r3
 8106482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106486:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81065e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810648a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810648e:	4b51      	ldr	r3, [pc, #324]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106496:	ee07 3a90 	vmov	s15, r3
 810649a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810649e:	ed97 6a02 	vldr	s12, [r7, #8]
 81064a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81065e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81064a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81064b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81064be:	e065      	b.n	810658c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81064c0:	693b      	ldr	r3, [r7, #16]
 81064c2:	ee07 3a90 	vmov	s15, r3
 81064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81065ec <HAL_RCC_GetSysClockFreq+0x2ec>
 81064ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064d2:	4b40      	ldr	r3, [pc, #256]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81064d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064da:	ee07 3a90 	vmov	s15, r3
 81064de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064e2:	ed97 6a02 	vldr	s12, [r7, #8]
 81064e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81065e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81064ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81064f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106502:	e043      	b.n	810658c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106504:	693b      	ldr	r3, [r7, #16]
 8106506:	ee07 3a90 	vmov	s15, r3
 810650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810650e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81065f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106516:	4b2f      	ldr	r3, [pc, #188]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810651a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810651e:	ee07 3a90 	vmov	s15, r3
 8106522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106526:	ed97 6a02 	vldr	s12, [r7, #8]
 810652a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81065e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810652e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810653a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810653e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106546:	e021      	b.n	810658c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106548:	693b      	ldr	r3, [r7, #16]
 810654a:	ee07 3a90 	vmov	s15, r3
 810654e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106552:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81065ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8106556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810655a:	4b1e      	ldr	r3, [pc, #120]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810655e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106562:	ee07 3a90 	vmov	s15, r3
 8106566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810656a:	ed97 6a02 	vldr	s12, [r7, #8]
 810656e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81065e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810657a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810657e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810658a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810658c:	4b11      	ldr	r3, [pc, #68]	@ (81065d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106590:	0a5b      	lsrs	r3, r3, #9
 8106592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106596:	3301      	adds	r3, #1
 8106598:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810659a:	683b      	ldr	r3, [r7, #0]
 810659c:	ee07 3a90 	vmov	s15, r3
 81065a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81065a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81065a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81065ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065b0:	ee17 3a90 	vmov	r3, s15
 81065b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81065b6:	e005      	b.n	81065c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81065b8:	2300      	movs	r3, #0
 81065ba:	61bb      	str	r3, [r7, #24]
      break;
 81065bc:	e002      	b.n	81065c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81065be:	4b07      	ldr	r3, [pc, #28]	@ (81065dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81065c0:	61bb      	str	r3, [r7, #24]
      break;
 81065c2:	bf00      	nop
  }

  return sysclockfreq;
 81065c4:	69bb      	ldr	r3, [r7, #24]
}
 81065c6:	4618      	mov	r0, r3
 81065c8:	3724      	adds	r7, #36	@ 0x24
 81065ca:	46bd      	mov	sp, r7
 81065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065d0:	4770      	bx	lr
 81065d2:	bf00      	nop
 81065d4:	58024400 	.word	0x58024400
 81065d8:	03d09000 	.word	0x03d09000
 81065dc:	003d0900 	.word	0x003d0900
 81065e0:	007a1200 	.word	0x007a1200
 81065e4:	46000000 	.word	0x46000000
 81065e8:	4c742400 	.word	0x4c742400
 81065ec:	4a742400 	.word	0x4a742400
 81065f0:	4af42400 	.word	0x4af42400

081065f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81065f4:	b580      	push	{r7, lr}
 81065f6:	b082      	sub	sp, #8
 81065f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81065fa:	f7ff fe81 	bl	8106300 <HAL_RCC_GetSysClockFreq>
 81065fe:	4602      	mov	r2, r0
 8106600:	4b11      	ldr	r3, [pc, #68]	@ (8106648 <HAL_RCC_GetHCLKFreq+0x54>)
 8106602:	699b      	ldr	r3, [r3, #24]
 8106604:	0a1b      	lsrs	r3, r3, #8
 8106606:	f003 030f 	and.w	r3, r3, #15
 810660a:	4910      	ldr	r1, [pc, #64]	@ (810664c <HAL_RCC_GetHCLKFreq+0x58>)
 810660c:	5ccb      	ldrb	r3, [r1, r3]
 810660e:	f003 031f 	and.w	r3, r3, #31
 8106612:	fa22 f303 	lsr.w	r3, r2, r3
 8106616:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106618:	4b0b      	ldr	r3, [pc, #44]	@ (8106648 <HAL_RCC_GetHCLKFreq+0x54>)
 810661a:	699b      	ldr	r3, [r3, #24]
 810661c:	f003 030f 	and.w	r3, r3, #15
 8106620:	4a0a      	ldr	r2, [pc, #40]	@ (810664c <HAL_RCC_GetHCLKFreq+0x58>)
 8106622:	5cd3      	ldrb	r3, [r2, r3]
 8106624:	f003 031f 	and.w	r3, r3, #31
 8106628:	687a      	ldr	r2, [r7, #4]
 810662a:	fa22 f303 	lsr.w	r3, r2, r3
 810662e:	4a08      	ldr	r2, [pc, #32]	@ (8106650 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106630:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106632:	4b07      	ldr	r3, [pc, #28]	@ (8106650 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	4a07      	ldr	r2, [pc, #28]	@ (8106654 <HAL_RCC_GetHCLKFreq+0x60>)
 8106638:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810663a:	4b05      	ldr	r3, [pc, #20]	@ (8106650 <HAL_RCC_GetHCLKFreq+0x5c>)
 810663c:	681b      	ldr	r3, [r3, #0]
}
 810663e:	4618      	mov	r0, r3
 8106640:	3708      	adds	r7, #8
 8106642:	46bd      	mov	sp, r7
 8106644:	bd80      	pop	{r7, pc}
 8106646:	bf00      	nop
 8106648:	58024400 	.word	0x58024400
 810664c:	08111fe0 	.word	0x08111fe0
 8106650:	10000004 	.word	0x10000004
 8106654:	10000000 	.word	0x10000000

08106658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106658:	b580      	push	{r7, lr}
 810665a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810665c:	f7ff ffca 	bl	81065f4 <HAL_RCC_GetHCLKFreq>
 8106660:	4602      	mov	r2, r0
 8106662:	4b06      	ldr	r3, [pc, #24]	@ (810667c <HAL_RCC_GetPCLK1Freq+0x24>)
 8106664:	69db      	ldr	r3, [r3, #28]
 8106666:	091b      	lsrs	r3, r3, #4
 8106668:	f003 0307 	and.w	r3, r3, #7
 810666c:	4904      	ldr	r1, [pc, #16]	@ (8106680 <HAL_RCC_GetPCLK1Freq+0x28>)
 810666e:	5ccb      	ldrb	r3, [r1, r3]
 8106670:	f003 031f 	and.w	r3, r3, #31
 8106674:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106678:	4618      	mov	r0, r3
 810667a:	bd80      	pop	{r7, pc}
 810667c:	58024400 	.word	0x58024400
 8106680:	08111fe0 	.word	0x08111fe0

08106684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8106684:	b580      	push	{r7, lr}
 8106686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106688:	f7ff ffb4 	bl	81065f4 <HAL_RCC_GetHCLKFreq>
 810668c:	4602      	mov	r2, r0
 810668e:	4b06      	ldr	r3, [pc, #24]	@ (81066a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106690:	69db      	ldr	r3, [r3, #28]
 8106692:	0a1b      	lsrs	r3, r3, #8
 8106694:	f003 0307 	and.w	r3, r3, #7
 8106698:	4904      	ldr	r1, [pc, #16]	@ (81066ac <HAL_RCC_GetPCLK2Freq+0x28>)
 810669a:	5ccb      	ldrb	r3, [r1, r3]
 810669c:	f003 031f 	and.w	r3, r3, #31
 81066a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81066a4:	4618      	mov	r0, r3
 81066a6:	bd80      	pop	{r7, pc}
 81066a8:	58024400 	.word	0x58024400
 81066ac:	08111fe0 	.word	0x08111fe0

081066b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81066b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81066b4:	b0ca      	sub	sp, #296	@ 0x128
 81066b6:	af00      	add	r7, sp, #0
 81066b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81066bc:	2300      	movs	r3, #0
 81066be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81066c2:	2300      	movs	r3, #0
 81066c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81066c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81066d4:	2500      	movs	r5, #0
 81066d6:	ea54 0305 	orrs.w	r3, r4, r5
 81066da:	d049      	beq.n	8106770 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81066e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81066e6:	d02f      	beq.n	8106748 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81066e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81066ec:	d828      	bhi.n	8106740 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81066ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81066f2:	d01a      	beq.n	810672a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81066f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81066f8:	d822      	bhi.n	8106740 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81066fa:	2b00      	cmp	r3, #0
 81066fc:	d003      	beq.n	8106706 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81066fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106702:	d007      	beq.n	8106714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106704:	e01c      	b.n	8106740 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106706:	4bb8      	ldr	r3, [pc, #736]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810670a:	4ab7      	ldr	r2, [pc, #732]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810670c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106710:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106712:	e01a      	b.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106718:	3308      	adds	r3, #8
 810671a:	2102      	movs	r1, #2
 810671c:	4618      	mov	r0, r3
 810671e:	f002 fb61 	bl	8108de4 <RCCEx_PLL2_Config>
 8106722:	4603      	mov	r3, r0
 8106724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106728:	e00f      	b.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810672e:	3328      	adds	r3, #40	@ 0x28
 8106730:	2102      	movs	r1, #2
 8106732:	4618      	mov	r0, r3
 8106734:	f002 fc08 	bl	8108f48 <RCCEx_PLL3_Config>
 8106738:	4603      	mov	r3, r0
 810673a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810673e:	e004      	b.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106740:	2301      	movs	r3, #1
 8106742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106746:	e000      	b.n	810674a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8106748:	bf00      	nop
    }

    if (ret == HAL_OK)
 810674a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810674e:	2b00      	cmp	r3, #0
 8106750:	d10a      	bne.n	8106768 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106752:	4ba5      	ldr	r3, [pc, #660]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106756:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810675e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106760:	4aa1      	ldr	r2, [pc, #644]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106762:	430b      	orrs	r3, r1
 8106764:	6513      	str	r3, [r2, #80]	@ 0x50
 8106766:	e003      	b.n	8106770 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810676c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106778:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810677c:	f04f 0900 	mov.w	r9, #0
 8106780:	ea58 0309 	orrs.w	r3, r8, r9
 8106784:	d047      	beq.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8106786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810678a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810678c:	2b04      	cmp	r3, #4
 810678e:	d82a      	bhi.n	81067e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8106790:	a201      	add	r2, pc, #4	@ (adr r2, 8106798 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8106792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106796:	bf00      	nop
 8106798:	081067ad 	.word	0x081067ad
 810679c:	081067bb 	.word	0x081067bb
 81067a0:	081067d1 	.word	0x081067d1
 81067a4:	081067ef 	.word	0x081067ef
 81067a8:	081067ef 	.word	0x081067ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81067ac:	4b8e      	ldr	r3, [pc, #568]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81067b0:	4a8d      	ldr	r2, [pc, #564]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81067b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81067b8:	e01a      	b.n	81067f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067be:	3308      	adds	r3, #8
 81067c0:	2100      	movs	r1, #0
 81067c2:	4618      	mov	r0, r3
 81067c4:	f002 fb0e 	bl	8108de4 <RCCEx_PLL2_Config>
 81067c8:	4603      	mov	r3, r0
 81067ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81067ce:	e00f      	b.n	81067f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067d4:	3328      	adds	r3, #40	@ 0x28
 81067d6:	2100      	movs	r1, #0
 81067d8:	4618      	mov	r0, r3
 81067da:	f002 fbb5 	bl	8108f48 <RCCEx_PLL3_Config>
 81067de:	4603      	mov	r3, r0
 81067e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81067e4:	e004      	b.n	81067f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81067e6:	2301      	movs	r3, #1
 81067e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81067ec:	e000      	b.n	81067f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81067ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 81067f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81067f4:	2b00      	cmp	r3, #0
 81067f6:	d10a      	bne.n	810680e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81067f8:	4b7b      	ldr	r3, [pc, #492]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81067fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81067fc:	f023 0107 	bic.w	r1, r3, #7
 8106800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106806:	4a78      	ldr	r2, [pc, #480]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106808:	430b      	orrs	r3, r1
 810680a:	6513      	str	r3, [r2, #80]	@ 0x50
 810680c:	e003      	b.n	8106816 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810680e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810681e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8106822:	f04f 0b00 	mov.w	fp, #0
 8106826:	ea5a 030b 	orrs.w	r3, sl, fp
 810682a:	d04c      	beq.n	81068c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106836:	d030      	beq.n	810689a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8106838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810683c:	d829      	bhi.n	8106892 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810683e:	2bc0      	cmp	r3, #192	@ 0xc0
 8106840:	d02d      	beq.n	810689e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8106842:	2bc0      	cmp	r3, #192	@ 0xc0
 8106844:	d825      	bhi.n	8106892 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106846:	2b80      	cmp	r3, #128	@ 0x80
 8106848:	d018      	beq.n	810687c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810684a:	2b80      	cmp	r3, #128	@ 0x80
 810684c:	d821      	bhi.n	8106892 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810684e:	2b00      	cmp	r3, #0
 8106850:	d002      	beq.n	8106858 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8106852:	2b40      	cmp	r3, #64	@ 0x40
 8106854:	d007      	beq.n	8106866 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106856:	e01c      	b.n	8106892 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106858:	4b63      	ldr	r3, [pc, #396]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810685c:	4a62      	ldr	r2, [pc, #392]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810685e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106864:	e01c      	b.n	81068a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810686a:	3308      	adds	r3, #8
 810686c:	2100      	movs	r1, #0
 810686e:	4618      	mov	r0, r3
 8106870:	f002 fab8 	bl	8108de4 <RCCEx_PLL2_Config>
 8106874:	4603      	mov	r3, r0
 8106876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810687a:	e011      	b.n	81068a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106880:	3328      	adds	r3, #40	@ 0x28
 8106882:	2100      	movs	r1, #0
 8106884:	4618      	mov	r0, r3
 8106886:	f002 fb5f 	bl	8108f48 <RCCEx_PLL3_Config>
 810688a:	4603      	mov	r3, r0
 810688c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106890:	e006      	b.n	81068a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106892:	2301      	movs	r3, #1
 8106894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106898:	e002      	b.n	81068a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810689a:	bf00      	nop
 810689c:	e000      	b.n	81068a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810689e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068a4:	2b00      	cmp	r3, #0
 81068a6:	d10a      	bne.n	81068be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81068a8:	4b4f      	ldr	r3, [pc, #316]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81068aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81068ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81068b6:	4a4c      	ldr	r2, [pc, #304]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81068b8:	430b      	orrs	r3, r1
 81068ba:	6513      	str	r3, [r2, #80]	@ 0x50
 81068bc:	e003      	b.n	81068c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81068be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068ce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81068d2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81068d6:	2300      	movs	r3, #0
 81068d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81068dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81068e0:	460b      	mov	r3, r1
 81068e2:	4313      	orrs	r3, r2
 81068e4:	d053      	beq.n	810698e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81068ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81068f2:	d035      	beq.n	8106960 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81068f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81068f8:	d82e      	bhi.n	8106958 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81068fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81068fe:	d031      	beq.n	8106964 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8106900:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8106904:	d828      	bhi.n	8106958 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810690a:	d01a      	beq.n	8106942 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810690c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106910:	d822      	bhi.n	8106958 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106912:	2b00      	cmp	r3, #0
 8106914:	d003      	beq.n	810691e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8106916:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810691a:	d007      	beq.n	810692c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810691c:	e01c      	b.n	8106958 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810691e:	4b32      	ldr	r3, [pc, #200]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106922:	4a31      	ldr	r2, [pc, #196]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810692a:	e01c      	b.n	8106966 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106930:	3308      	adds	r3, #8
 8106932:	2100      	movs	r1, #0
 8106934:	4618      	mov	r0, r3
 8106936:	f002 fa55 	bl	8108de4 <RCCEx_PLL2_Config>
 810693a:	4603      	mov	r3, r0
 810693c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106940:	e011      	b.n	8106966 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106946:	3328      	adds	r3, #40	@ 0x28
 8106948:	2100      	movs	r1, #0
 810694a:	4618      	mov	r0, r3
 810694c:	f002 fafc 	bl	8108f48 <RCCEx_PLL3_Config>
 8106950:	4603      	mov	r3, r0
 8106952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106956:	e006      	b.n	8106966 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106958:	2301      	movs	r3, #1
 810695a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810695e:	e002      	b.n	8106966 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106960:	bf00      	nop
 8106962:	e000      	b.n	8106966 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810696a:	2b00      	cmp	r3, #0
 810696c:	d10b      	bne.n	8106986 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810696e:	4b1e      	ldr	r3, [pc, #120]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106972:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8106976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810697a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810697e:	4a1a      	ldr	r2, [pc, #104]	@ (81069e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106980:	430b      	orrs	r3, r1
 8106982:	6593      	str	r3, [r2, #88]	@ 0x58
 8106984:	e003      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810698a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106996:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810699a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810699e:	2300      	movs	r3, #0
 81069a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81069a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81069a8:	460b      	mov	r3, r1
 81069aa:	4313      	orrs	r3, r2
 81069ac:	d056      	beq.n	8106a5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81069b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81069ba:	d038      	beq.n	8106a2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81069bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81069c0:	d831      	bhi.n	8106a26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81069c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81069c6:	d034      	beq.n	8106a32 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81069c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81069cc:	d82b      	bhi.n	8106a26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81069ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81069d2:	d01d      	beq.n	8106a10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81069d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81069d8:	d825      	bhi.n	8106a26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81069da:	2b00      	cmp	r3, #0
 81069dc:	d006      	beq.n	81069ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81069de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81069e2:	d00a      	beq.n	81069fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81069e4:	e01f      	b.n	8106a26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81069e6:	bf00      	nop
 81069e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81069ec:	4ba2      	ldr	r3, [pc, #648]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069f0:	4aa1      	ldr	r2, [pc, #644]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81069f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81069f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81069f8:	e01c      	b.n	8106a34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069fe:	3308      	adds	r3, #8
 8106a00:	2100      	movs	r1, #0
 8106a02:	4618      	mov	r0, r3
 8106a04:	f002 f9ee 	bl	8108de4 <RCCEx_PLL2_Config>
 8106a08:	4603      	mov	r3, r0
 8106a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106a0e:	e011      	b.n	8106a34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a14:	3328      	adds	r3, #40	@ 0x28
 8106a16:	2100      	movs	r1, #0
 8106a18:	4618      	mov	r0, r3
 8106a1a:	f002 fa95 	bl	8108f48 <RCCEx_PLL3_Config>
 8106a1e:	4603      	mov	r3, r0
 8106a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106a24:	e006      	b.n	8106a34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106a26:	2301      	movs	r3, #1
 8106a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106a2c:	e002      	b.n	8106a34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8106a2e:	bf00      	nop
 8106a30:	e000      	b.n	8106a34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8106a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a38:	2b00      	cmp	r3, #0
 8106a3a:	d10b      	bne.n	8106a54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8106a3c:	4b8e      	ldr	r3, [pc, #568]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106a40:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8106a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8106a4c:	4a8a      	ldr	r2, [pc, #552]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a4e:	430b      	orrs	r3, r1
 8106a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8106a52:	e003      	b.n	8106a5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a64:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8106a68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8106a6c:	2300      	movs	r3, #0
 8106a6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8106a72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8106a76:	460b      	mov	r3, r1
 8106a78:	4313      	orrs	r3, r2
 8106a7a:	d03a      	beq.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8106a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a82:	2b30      	cmp	r3, #48	@ 0x30
 8106a84:	d01f      	beq.n	8106ac6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106a86:	2b30      	cmp	r3, #48	@ 0x30
 8106a88:	d819      	bhi.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106a8a:	2b20      	cmp	r3, #32
 8106a8c:	d00c      	beq.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8106a8e:	2b20      	cmp	r3, #32
 8106a90:	d815      	bhi.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	d019      	beq.n	8106aca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106a96:	2b10      	cmp	r3, #16
 8106a98:	d111      	bne.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a9a:	4b77      	ldr	r3, [pc, #476]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106a9e:	4a76      	ldr	r2, [pc, #472]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106aa6:	e011      	b.n	8106acc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106aac:	3308      	adds	r3, #8
 8106aae:	2102      	movs	r1, #2
 8106ab0:	4618      	mov	r0, r3
 8106ab2:	f002 f997 	bl	8108de4 <RCCEx_PLL2_Config>
 8106ab6:	4603      	mov	r3, r0
 8106ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106abc:	e006      	b.n	8106acc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106abe:	2301      	movs	r3, #1
 8106ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106ac4:	e002      	b.n	8106acc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106ac6:	bf00      	nop
 8106ac8:	e000      	b.n	8106acc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ad0:	2b00      	cmp	r3, #0
 8106ad2:	d10a      	bne.n	8106aea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106ad4:	4b68      	ldr	r3, [pc, #416]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106ad8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8106adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106ae2:	4a65      	ldr	r2, [pc, #404]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106ae4:	430b      	orrs	r3, r1
 8106ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106ae8:	e003      	b.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106afa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8106afe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8106b02:	2300      	movs	r3, #0
 8106b04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8106b08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8106b0c:	460b      	mov	r3, r1
 8106b0e:	4313      	orrs	r3, r2
 8106b10:	d051      	beq.n	8106bb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8106b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106b18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106b1c:	d035      	beq.n	8106b8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8106b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106b22:	d82e      	bhi.n	8106b82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106b24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106b28:	d031      	beq.n	8106b8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8106b2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106b2e:	d828      	bhi.n	8106b82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106b34:	d01a      	beq.n	8106b6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8106b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106b3a:	d822      	bhi.n	8106b82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106b3c:	2b00      	cmp	r3, #0
 8106b3e:	d003      	beq.n	8106b48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8106b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106b44:	d007      	beq.n	8106b56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8106b46:	e01c      	b.n	8106b82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b48:	4b4b      	ldr	r3, [pc, #300]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106b54:	e01c      	b.n	8106b90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b5a:	3308      	adds	r3, #8
 8106b5c:	2100      	movs	r1, #0
 8106b5e:	4618      	mov	r0, r3
 8106b60:	f002 f940 	bl	8108de4 <RCCEx_PLL2_Config>
 8106b64:	4603      	mov	r3, r0
 8106b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106b6a:	e011      	b.n	8106b90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b70:	3328      	adds	r3, #40	@ 0x28
 8106b72:	2100      	movs	r1, #0
 8106b74:	4618      	mov	r0, r3
 8106b76:	f002 f9e7 	bl	8108f48 <RCCEx_PLL3_Config>
 8106b7a:	4603      	mov	r3, r0
 8106b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106b80:	e006      	b.n	8106b90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b82:	2301      	movs	r3, #1
 8106b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106b88:	e002      	b.n	8106b90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106b8a:	bf00      	nop
 8106b8c:	e000      	b.n	8106b90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b94:	2b00      	cmp	r3, #0
 8106b96:	d10a      	bne.n	8106bae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106b98:	4b37      	ldr	r3, [pc, #220]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b9c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8106ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106ba6:	4a34      	ldr	r2, [pc, #208]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106ba8:	430b      	orrs	r3, r1
 8106baa:	6513      	str	r3, [r2, #80]	@ 0x50
 8106bac:	e003      	b.n	8106bb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bbe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8106bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8106bc6:	2300      	movs	r3, #0
 8106bc8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8106bcc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8106bd0:	460b      	mov	r3, r1
 8106bd2:	4313      	orrs	r3, r2
 8106bd4:	d056      	beq.n	8106c84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106be0:	d033      	beq.n	8106c4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106be2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106be6:	d82c      	bhi.n	8106c42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106be8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106bec:	d02f      	beq.n	8106c4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8106bee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106bf2:	d826      	bhi.n	8106c42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106bf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106bf8:	d02b      	beq.n	8106c52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106bfa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106bfe:	d820      	bhi.n	8106c42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c04:	d012      	beq.n	8106c2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106c06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c0a:	d81a      	bhi.n	8106c42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106c0c:	2b00      	cmp	r3, #0
 8106c0e:	d022      	beq.n	8106c56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106c14:	d115      	bne.n	8106c42 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c1a:	3308      	adds	r3, #8
 8106c1c:	2101      	movs	r1, #1
 8106c1e:	4618      	mov	r0, r3
 8106c20:	f002 f8e0 	bl	8108de4 <RCCEx_PLL2_Config>
 8106c24:	4603      	mov	r3, r0
 8106c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106c2a:	e015      	b.n	8106c58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c30:	3328      	adds	r3, #40	@ 0x28
 8106c32:	2101      	movs	r1, #1
 8106c34:	4618      	mov	r0, r3
 8106c36:	f002 f987 	bl	8108f48 <RCCEx_PLL3_Config>
 8106c3a:	4603      	mov	r3, r0
 8106c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106c40:	e00a      	b.n	8106c58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c42:	2301      	movs	r3, #1
 8106c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106c48:	e006      	b.n	8106c58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106c4a:	bf00      	nop
 8106c4c:	e004      	b.n	8106c58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106c4e:	bf00      	nop
 8106c50:	e002      	b.n	8106c58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106c52:	bf00      	nop
 8106c54:	e000      	b.n	8106c58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c5c:	2b00      	cmp	r3, #0
 8106c5e:	d10d      	bne.n	8106c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106c60:	4b05      	ldr	r3, [pc, #20]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106c64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8106c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106c6e:	4a02      	ldr	r2, [pc, #8]	@ (8106c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106c70:	430b      	orrs	r3, r1
 8106c72:	6513      	str	r3, [r2, #80]	@ 0x50
 8106c74:	e006      	b.n	8106c84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106c76:	bf00      	nop
 8106c78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106c80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c8c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8106c90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8106c94:	2300      	movs	r3, #0
 8106c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8106c9a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8106c9e:	460b      	mov	r3, r1
 8106ca0:	4313      	orrs	r3, r2
 8106ca2:	d055      	beq.n	8106d50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106cb0:	d033      	beq.n	8106d1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106cb6:	d82c      	bhi.n	8106d12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106cbc:	d02f      	beq.n	8106d1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106cc2:	d826      	bhi.n	8106d12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106cc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106cc8:	d02b      	beq.n	8106d22 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106cca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106cce:	d820      	bhi.n	8106d12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106cd4:	d012      	beq.n	8106cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106cda:	d81a      	bhi.n	8106d12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106cdc:	2b00      	cmp	r3, #0
 8106cde:	d022      	beq.n	8106d26 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106ce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106ce4:	d115      	bne.n	8106d12 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cea:	3308      	adds	r3, #8
 8106cec:	2101      	movs	r1, #1
 8106cee:	4618      	mov	r0, r3
 8106cf0:	f002 f878 	bl	8108de4 <RCCEx_PLL2_Config>
 8106cf4:	4603      	mov	r3, r0
 8106cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106cfa:	e015      	b.n	8106d28 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d00:	3328      	adds	r3, #40	@ 0x28
 8106d02:	2101      	movs	r1, #1
 8106d04:	4618      	mov	r0, r3
 8106d06:	f002 f91f 	bl	8108f48 <RCCEx_PLL3_Config>
 8106d0a:	4603      	mov	r3, r0
 8106d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106d10:	e00a      	b.n	8106d28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106d12:	2301      	movs	r3, #1
 8106d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d18:	e006      	b.n	8106d28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106d1a:	bf00      	nop
 8106d1c:	e004      	b.n	8106d28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106d1e:	bf00      	nop
 8106d20:	e002      	b.n	8106d28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106d22:	bf00      	nop
 8106d24:	e000      	b.n	8106d28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d2c:	2b00      	cmp	r3, #0
 8106d2e:	d10b      	bne.n	8106d48 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106d30:	4ba4      	ldr	r3, [pc, #656]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106d34:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106d40:	4aa0      	ldr	r2, [pc, #640]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d42:	430b      	orrs	r3, r1
 8106d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8106d46:	e003      	b.n	8106d50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d58:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8106d60:	2300      	movs	r3, #0
 8106d62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8106d66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8106d6a:	460b      	mov	r3, r1
 8106d6c:	4313      	orrs	r3, r2
 8106d6e:	d037      	beq.n	8106de0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106d76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106d7a:	d00e      	beq.n	8106d9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106d80:	d816      	bhi.n	8106db0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106d82:	2b00      	cmp	r3, #0
 8106d84:	d018      	beq.n	8106db8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8106d86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106d8a:	d111      	bne.n	8106db0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d8c:	4b8d      	ldr	r3, [pc, #564]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d90:	4a8c      	ldr	r2, [pc, #560]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106d98:	e00f      	b.n	8106dba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d9e:	3308      	adds	r3, #8
 8106da0:	2101      	movs	r1, #1
 8106da2:	4618      	mov	r0, r3
 8106da4:	f002 f81e 	bl	8108de4 <RCCEx_PLL2_Config>
 8106da8:	4603      	mov	r3, r0
 8106daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106dae:	e004      	b.n	8106dba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106db0:	2301      	movs	r3, #1
 8106db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106db6:	e000      	b.n	8106dba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106dbe:	2b00      	cmp	r3, #0
 8106dc0:	d10a      	bne.n	8106dd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106dc2:	4b80      	ldr	r3, [pc, #512]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106dc6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106dd0:	4a7c      	ldr	r2, [pc, #496]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106dd2:	430b      	orrs	r3, r1
 8106dd4:	6513      	str	r3, [r2, #80]	@ 0x50
 8106dd6:	e003      	b.n	8106de0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106de8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106df0:	2300      	movs	r3, #0
 8106df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8106df6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8106dfa:	460b      	mov	r3, r1
 8106dfc:	4313      	orrs	r3, r2
 8106dfe:	d039      	beq.n	8106e74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106e06:	2b03      	cmp	r3, #3
 8106e08:	d81c      	bhi.n	8106e44 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8106e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8106e10 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8106e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e10:	08106e4d 	.word	0x08106e4d
 8106e14:	08106e21 	.word	0x08106e21
 8106e18:	08106e2f 	.word	0x08106e2f
 8106e1c:	08106e4d 	.word	0x08106e4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e20:	4b68      	ldr	r3, [pc, #416]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e24:	4a67      	ldr	r2, [pc, #412]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106e2c:	e00f      	b.n	8106e4e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e32:	3308      	adds	r3, #8
 8106e34:	2102      	movs	r1, #2
 8106e36:	4618      	mov	r0, r3
 8106e38:	f001 ffd4 	bl	8108de4 <RCCEx_PLL2_Config>
 8106e3c:	4603      	mov	r3, r0
 8106e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106e42:	e004      	b.n	8106e4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106e44:	2301      	movs	r3, #1
 8106e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106e4a:	e000      	b.n	8106e4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e52:	2b00      	cmp	r3, #0
 8106e54:	d10a      	bne.n	8106e6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106e56:	4b5b      	ldr	r3, [pc, #364]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106e5a:	f023 0103 	bic.w	r1, r3, #3
 8106e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106e64:	4a57      	ldr	r2, [pc, #348]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e66:	430b      	orrs	r3, r1
 8106e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106e6a:	e003      	b.n	8106e74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e7c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106e80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106e84:	2300      	movs	r3, #0
 8106e86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106e8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106e8e:	460b      	mov	r3, r1
 8106e90:	4313      	orrs	r3, r2
 8106e92:	f000 809f 	beq.w	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106e96:	4b4c      	ldr	r3, [pc, #304]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106e98:	681b      	ldr	r3, [r3, #0]
 8106e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106ea0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106ea2:	f7fc fb65 	bl	8103570 <HAL_GetTick>
 8106ea6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106eaa:	e00b      	b.n	8106ec4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106eac:	f7fc fb60 	bl	8103570 <HAL_GetTick>
 8106eb0:	4602      	mov	r2, r0
 8106eb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106eb6:	1ad3      	subs	r3, r2, r3
 8106eb8:	2b64      	cmp	r3, #100	@ 0x64
 8106eba:	d903      	bls.n	8106ec4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106ebc:	2303      	movs	r3, #3
 8106ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106ec2:	e005      	b.n	8106ed0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106ec4:	4b40      	ldr	r3, [pc, #256]	@ (8106fc8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106ec6:	681b      	ldr	r3, [r3, #0]
 8106ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	d0ed      	beq.n	8106eac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ed4:	2b00      	cmp	r3, #0
 8106ed6:	d179      	bne.n	8106fcc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106eda:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ee0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106ee4:	4053      	eors	r3, r2
 8106ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106eea:	2b00      	cmp	r3, #0
 8106eec:	d015      	beq.n	8106f1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106eee:	4b35      	ldr	r3, [pc, #212]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106ef6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106efa:	4b32      	ldr	r3, [pc, #200]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106efe:	4a31      	ldr	r2, [pc, #196]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106f04:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106f06:	4b2f      	ldr	r3, [pc, #188]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106f10:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106f12:	4a2c      	ldr	r2, [pc, #176]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f18:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106f26:	d118      	bne.n	8106f5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106f28:	f7fc fb22 	bl	8103570 <HAL_GetTick>
 8106f2c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106f30:	e00d      	b.n	8106f4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106f32:	f7fc fb1d 	bl	8103570 <HAL_GetTick>
 8106f36:	4602      	mov	r2, r0
 8106f38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8106f3c:	1ad2      	subs	r2, r2, r3
 8106f3e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8106f42:	429a      	cmp	r2, r3
 8106f44:	d903      	bls.n	8106f4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8106f46:	2303      	movs	r3, #3
 8106f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8106f4c:	e005      	b.n	8106f5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106f52:	f003 0302 	and.w	r3, r3, #2
 8106f56:	2b00      	cmp	r3, #0
 8106f58:	d0eb      	beq.n	8106f32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106f5e:	2b00      	cmp	r3, #0
 8106f60:	d12b      	bne.n	8106fba <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106f72:	d110      	bne.n	8106f96 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106f74:	4b13      	ldr	r3, [pc, #76]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f76:	691b      	ldr	r3, [r3, #16]
 8106f78:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106f84:	091b      	lsrs	r3, r3, #4
 8106f86:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106f8a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f90:	430b      	orrs	r3, r1
 8106f92:	6113      	str	r3, [r2, #16]
 8106f94:	e005      	b.n	8106fa2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8106f96:	4b0b      	ldr	r3, [pc, #44]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f98:	691b      	ldr	r3, [r3, #16]
 8106f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106fa0:	6113      	str	r3, [r2, #16]
 8106fa2:	4b08      	ldr	r3, [pc, #32]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106fa4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106fb2:	4a04      	ldr	r2, [pc, #16]	@ (8106fc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106fb4:	430b      	orrs	r3, r1
 8106fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8106fb8:	e00c      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8106fc2:	e007      	b.n	8106fd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106fc4:	58024400 	.word	0x58024400
 8106fc8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fdc:	f002 0301 	and.w	r3, r2, #1
 8106fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106fe4:	2300      	movs	r3, #0
 8106fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106fea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106fee:	460b      	mov	r3, r1
 8106ff0:	4313      	orrs	r3, r2
 8106ff2:	f000 8089 	beq.w	8107108 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106ffc:	2b28      	cmp	r3, #40	@ 0x28
 8106ffe:	d86b      	bhi.n	81070d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8107000:	a201      	add	r2, pc, #4	@ (adr r2, 8107008 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8107002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107006:	bf00      	nop
 8107008:	081070e1 	.word	0x081070e1
 810700c:	081070d9 	.word	0x081070d9
 8107010:	081070d9 	.word	0x081070d9
 8107014:	081070d9 	.word	0x081070d9
 8107018:	081070d9 	.word	0x081070d9
 810701c:	081070d9 	.word	0x081070d9
 8107020:	081070d9 	.word	0x081070d9
 8107024:	081070d9 	.word	0x081070d9
 8107028:	081070ad 	.word	0x081070ad
 810702c:	081070d9 	.word	0x081070d9
 8107030:	081070d9 	.word	0x081070d9
 8107034:	081070d9 	.word	0x081070d9
 8107038:	081070d9 	.word	0x081070d9
 810703c:	081070d9 	.word	0x081070d9
 8107040:	081070d9 	.word	0x081070d9
 8107044:	081070d9 	.word	0x081070d9
 8107048:	081070c3 	.word	0x081070c3
 810704c:	081070d9 	.word	0x081070d9
 8107050:	081070d9 	.word	0x081070d9
 8107054:	081070d9 	.word	0x081070d9
 8107058:	081070d9 	.word	0x081070d9
 810705c:	081070d9 	.word	0x081070d9
 8107060:	081070d9 	.word	0x081070d9
 8107064:	081070d9 	.word	0x081070d9
 8107068:	081070e1 	.word	0x081070e1
 810706c:	081070d9 	.word	0x081070d9
 8107070:	081070d9 	.word	0x081070d9
 8107074:	081070d9 	.word	0x081070d9
 8107078:	081070d9 	.word	0x081070d9
 810707c:	081070d9 	.word	0x081070d9
 8107080:	081070d9 	.word	0x081070d9
 8107084:	081070d9 	.word	0x081070d9
 8107088:	081070e1 	.word	0x081070e1
 810708c:	081070d9 	.word	0x081070d9
 8107090:	081070d9 	.word	0x081070d9
 8107094:	081070d9 	.word	0x081070d9
 8107098:	081070d9 	.word	0x081070d9
 810709c:	081070d9 	.word	0x081070d9
 81070a0:	081070d9 	.word	0x081070d9
 81070a4:	081070d9 	.word	0x081070d9
 81070a8:	081070e1 	.word	0x081070e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81070ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070b0:	3308      	adds	r3, #8
 81070b2:	2101      	movs	r1, #1
 81070b4:	4618      	mov	r0, r3
 81070b6:	f001 fe95 	bl	8108de4 <RCCEx_PLL2_Config>
 81070ba:	4603      	mov	r3, r0
 81070bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81070c0:	e00f      	b.n	81070e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070c6:	3328      	adds	r3, #40	@ 0x28
 81070c8:	2101      	movs	r1, #1
 81070ca:	4618      	mov	r0, r3
 81070cc:	f001 ff3c 	bl	8108f48 <RCCEx_PLL3_Config>
 81070d0:	4603      	mov	r3, r0
 81070d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81070d6:	e004      	b.n	81070e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81070d8:	2301      	movs	r3, #1
 81070da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81070de:	e000      	b.n	81070e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81070e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81070e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070e6:	2b00      	cmp	r3, #0
 81070e8:	d10a      	bne.n	8107100 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81070ea:	4bbf      	ldr	r3, [pc, #764]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81070ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81070ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81070f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81070f8:	4abb      	ldr	r2, [pc, #748]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81070fa:	430b      	orrs	r3, r1
 81070fc:	6553      	str	r3, [r2, #84]	@ 0x54
 81070fe:	e003      	b.n	8107108 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8107108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107110:	f002 0302 	and.w	r3, r2, #2
 8107114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8107118:	2300      	movs	r3, #0
 810711a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810711e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8107122:	460b      	mov	r3, r1
 8107124:	4313      	orrs	r3, r2
 8107126:	d041      	beq.n	81071ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8107128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810712c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810712e:	2b05      	cmp	r3, #5
 8107130:	d824      	bhi.n	810717c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8107132:	a201      	add	r2, pc, #4	@ (adr r2, 8107138 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8107134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107138:	08107185 	.word	0x08107185
 810713c:	08107151 	.word	0x08107151
 8107140:	08107167 	.word	0x08107167
 8107144:	08107185 	.word	0x08107185
 8107148:	08107185 	.word	0x08107185
 810714c:	08107185 	.word	0x08107185
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107154:	3308      	adds	r3, #8
 8107156:	2101      	movs	r1, #1
 8107158:	4618      	mov	r0, r3
 810715a:	f001 fe43 	bl	8108de4 <RCCEx_PLL2_Config>
 810715e:	4603      	mov	r3, r0
 8107160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107164:	e00f      	b.n	8107186 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810716a:	3328      	adds	r3, #40	@ 0x28
 810716c:	2101      	movs	r1, #1
 810716e:	4618      	mov	r0, r3
 8107170:	f001 feea 	bl	8108f48 <RCCEx_PLL3_Config>
 8107174:	4603      	mov	r3, r0
 8107176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810717a:	e004      	b.n	8107186 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810717c:	2301      	movs	r3, #1
 810717e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107182:	e000      	b.n	8107186 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8107184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810718a:	2b00      	cmp	r3, #0
 810718c:	d10a      	bne.n	81071a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810718e:	4b96      	ldr	r3, [pc, #600]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107192:	f023 0107 	bic.w	r1, r3, #7
 8107196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810719a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810719c:	4a92      	ldr	r2, [pc, #584]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810719e:	430b      	orrs	r3, r1
 81071a0:	6553      	str	r3, [r2, #84]	@ 0x54
 81071a2:	e003      	b.n	81071ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81071a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81071ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071b4:	f002 0304 	and.w	r3, r2, #4
 81071b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81071bc:	2300      	movs	r3, #0
 81071be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81071c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81071c6:	460b      	mov	r3, r1
 81071c8:	4313      	orrs	r3, r2
 81071ca:	d044      	beq.n	8107256 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81071d4:	2b05      	cmp	r3, #5
 81071d6:	d825      	bhi.n	8107224 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81071d8:	a201      	add	r2, pc, #4	@ (adr r2, 81071e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071de:	bf00      	nop
 81071e0:	0810722d 	.word	0x0810722d
 81071e4:	081071f9 	.word	0x081071f9
 81071e8:	0810720f 	.word	0x0810720f
 81071ec:	0810722d 	.word	0x0810722d
 81071f0:	0810722d 	.word	0x0810722d
 81071f4:	0810722d 	.word	0x0810722d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81071fc:	3308      	adds	r3, #8
 81071fe:	2101      	movs	r1, #1
 8107200:	4618      	mov	r0, r3
 8107202:	f001 fdef 	bl	8108de4 <RCCEx_PLL2_Config>
 8107206:	4603      	mov	r3, r0
 8107208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810720c:	e00f      	b.n	810722e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810720e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107212:	3328      	adds	r3, #40	@ 0x28
 8107214:	2101      	movs	r1, #1
 8107216:	4618      	mov	r0, r3
 8107218:	f001 fe96 	bl	8108f48 <RCCEx_PLL3_Config>
 810721c:	4603      	mov	r3, r0
 810721e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107222:	e004      	b.n	810722e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107224:	2301      	movs	r3, #1
 8107226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810722a:	e000      	b.n	810722e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810722c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810722e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107232:	2b00      	cmp	r3, #0
 8107234:	d10b      	bne.n	810724e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8107236:	4b6c      	ldr	r3, [pc, #432]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810723a:	f023 0107 	bic.w	r1, r3, #7
 810723e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107246:	4a68      	ldr	r2, [pc, #416]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107248:	430b      	orrs	r3, r1
 810724a:	6593      	str	r3, [r2, #88]	@ 0x58
 810724c:	e003      	b.n	8107256 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810724e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107252:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810725e:	f002 0320 	and.w	r3, r2, #32
 8107262:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8107266:	2300      	movs	r3, #0
 8107268:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810726c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8107270:	460b      	mov	r3, r1
 8107272:	4313      	orrs	r3, r2
 8107274:	d055      	beq.n	8107322 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8107276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810727a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810727e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107282:	d033      	beq.n	81072ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8107284:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107288:	d82c      	bhi.n	81072e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810728a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810728e:	d02f      	beq.n	81072f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8107290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107294:	d826      	bhi.n	81072e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107296:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810729a:	d02b      	beq.n	81072f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810729c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81072a0:	d820      	bhi.n	81072e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81072a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81072a6:	d012      	beq.n	81072ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81072a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81072ac:	d81a      	bhi.n	81072e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81072ae:	2b00      	cmp	r3, #0
 81072b0:	d022      	beq.n	81072f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81072b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81072b6:	d115      	bne.n	81072e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81072b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072bc:	3308      	adds	r3, #8
 81072be:	2100      	movs	r1, #0
 81072c0:	4618      	mov	r0, r3
 81072c2:	f001 fd8f 	bl	8108de4 <RCCEx_PLL2_Config>
 81072c6:	4603      	mov	r3, r0
 81072c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81072cc:	e015      	b.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81072ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81072d2:	3328      	adds	r3, #40	@ 0x28
 81072d4:	2102      	movs	r1, #2
 81072d6:	4618      	mov	r0, r3
 81072d8:	f001 fe36 	bl	8108f48 <RCCEx_PLL3_Config>
 81072dc:	4603      	mov	r3, r0
 81072de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81072e2:	e00a      	b.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81072e4:	2301      	movs	r3, #1
 81072e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81072ea:	e006      	b.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81072ec:	bf00      	nop
 81072ee:	e004      	b.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81072f0:	bf00      	nop
 81072f2:	e002      	b.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81072f4:	bf00      	nop
 81072f6:	e000      	b.n	81072fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81072f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81072fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81072fe:	2b00      	cmp	r3, #0
 8107300:	d10b      	bne.n	810731a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107302:	4b39      	ldr	r3, [pc, #228]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107306:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107312:	4a35      	ldr	r2, [pc, #212]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107314:	430b      	orrs	r3, r1
 8107316:	6553      	str	r3, [r2, #84]	@ 0x54
 8107318:	e003      	b.n	8107322 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810731a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810731e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8107322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107326:	e9d3 2300 	ldrd	r2, r3, [r3]
 810732a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810732e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8107332:	2300      	movs	r3, #0
 8107334:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8107338:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810733c:	460b      	mov	r3, r1
 810733e:	4313      	orrs	r3, r2
 8107340:	d058      	beq.n	81073f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8107342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107346:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810734a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810734e:	d033      	beq.n	81073b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8107350:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8107354:	d82c      	bhi.n	81073b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810735a:	d02f      	beq.n	81073bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 810735c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107360:	d826      	bhi.n	81073b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107362:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8107366:	d02b      	beq.n	81073c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8107368:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810736c:	d820      	bhi.n	81073b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810736e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107372:	d012      	beq.n	810739a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107378:	d81a      	bhi.n	81073b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810737a:	2b00      	cmp	r3, #0
 810737c:	d022      	beq.n	81073c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810737e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8107382:	d115      	bne.n	81073b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107388:	3308      	adds	r3, #8
 810738a:	2100      	movs	r1, #0
 810738c:	4618      	mov	r0, r3
 810738e:	f001 fd29 	bl	8108de4 <RCCEx_PLL2_Config>
 8107392:	4603      	mov	r3, r0
 8107394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8107398:	e015      	b.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810739e:	3328      	adds	r3, #40	@ 0x28
 81073a0:	2102      	movs	r1, #2
 81073a2:	4618      	mov	r0, r3
 81073a4:	f001 fdd0 	bl	8108f48 <RCCEx_PLL3_Config>
 81073a8:	4603      	mov	r3, r0
 81073aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81073ae:	e00a      	b.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81073b0:	2301      	movs	r3, #1
 81073b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81073b6:	e006      	b.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81073b8:	bf00      	nop
 81073ba:	e004      	b.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81073bc:	bf00      	nop
 81073be:	e002      	b.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81073c0:	bf00      	nop
 81073c2:	e000      	b.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81073c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81073c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81073ca:	2b00      	cmp	r3, #0
 81073cc:	d10e      	bne.n	81073ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81073ce:	4b06      	ldr	r3, [pc, #24]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81073d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81073d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81073de:	4a02      	ldr	r2, [pc, #8]	@ (81073e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81073e0:	430b      	orrs	r3, r1
 81073e2:	6593      	str	r3, [r2, #88]	@ 0x58
 81073e4:	e006      	b.n	81073f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81073e6:	bf00      	nop
 81073e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81073f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8107400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8107404:	2300      	movs	r3, #0
 8107406:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810740a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810740e:	460b      	mov	r3, r1
 8107410:	4313      	orrs	r3, r2
 8107412:	d055      	beq.n	81074c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107418:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810741c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107420:	d033      	beq.n	810748a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8107422:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8107426:	d82c      	bhi.n	8107482 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810742c:	d02f      	beq.n	810748e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810742e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107432:	d826      	bhi.n	8107482 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107434:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8107438:	d02b      	beq.n	8107492 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810743a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810743e:	d820      	bhi.n	8107482 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107440:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107444:	d012      	beq.n	810746c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8107446:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810744a:	d81a      	bhi.n	8107482 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810744c:	2b00      	cmp	r3, #0
 810744e:	d022      	beq.n	8107496 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8107450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107454:	d115      	bne.n	8107482 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810745a:	3308      	adds	r3, #8
 810745c:	2100      	movs	r1, #0
 810745e:	4618      	mov	r0, r3
 8107460:	f001 fcc0 	bl	8108de4 <RCCEx_PLL2_Config>
 8107464:	4603      	mov	r3, r0
 8107466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810746a:	e015      	b.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107470:	3328      	adds	r3, #40	@ 0x28
 8107472:	2102      	movs	r1, #2
 8107474:	4618      	mov	r0, r3
 8107476:	f001 fd67 	bl	8108f48 <RCCEx_PLL3_Config>
 810747a:	4603      	mov	r3, r0
 810747c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8107480:	e00a      	b.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107482:	2301      	movs	r3, #1
 8107484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107488:	e006      	b.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810748a:	bf00      	nop
 810748c:	e004      	b.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810748e:	bf00      	nop
 8107490:	e002      	b.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107492:	bf00      	nop
 8107494:	e000      	b.n	8107498 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8107496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810749c:	2b00      	cmp	r3, #0
 810749e:	d10b      	bne.n	81074b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81074a0:	4ba1      	ldr	r3, [pc, #644]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074a4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81074b0:	4a9d      	ldr	r2, [pc, #628]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81074b2:	430b      	orrs	r3, r1
 81074b4:	6593      	str	r3, [r2, #88]	@ 0x58
 81074b6:	e003      	b.n	81074c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81074c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074c8:	f002 0308 	and.w	r3, r2, #8
 81074cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81074d0:	2300      	movs	r3, #0
 81074d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81074d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81074da:	460b      	mov	r3, r1
 81074dc:	4313      	orrs	r3, r2
 81074de:	d01e      	beq.n	810751e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81074e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81074e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81074ec:	d10c      	bne.n	8107508 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074f2:	3328      	adds	r3, #40	@ 0x28
 81074f4:	2102      	movs	r1, #2
 81074f6:	4618      	mov	r0, r3
 81074f8:	f001 fd26 	bl	8108f48 <RCCEx_PLL3_Config>
 81074fc:	4603      	mov	r3, r0
 81074fe:	2b00      	cmp	r3, #0
 8107500:	d002      	beq.n	8107508 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8107502:	2301      	movs	r3, #1
 8107504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107508:	4b87      	ldr	r3, [pc, #540]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810750a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810750c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8107510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107518:	4a83      	ldr	r2, [pc, #524]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810751a:	430b      	orrs	r3, r1
 810751c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107526:	f002 0310 	and.w	r3, r2, #16
 810752a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810752e:	2300      	movs	r3, #0
 8107530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8107534:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8107538:	460b      	mov	r3, r1
 810753a:	4313      	orrs	r3, r2
 810753c:	d01e      	beq.n	810757c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810754a:	d10c      	bne.n	8107566 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107550:	3328      	adds	r3, #40	@ 0x28
 8107552:	2102      	movs	r1, #2
 8107554:	4618      	mov	r0, r3
 8107556:	f001 fcf7 	bl	8108f48 <RCCEx_PLL3_Config>
 810755a:	4603      	mov	r3, r0
 810755c:	2b00      	cmp	r3, #0
 810755e:	d002      	beq.n	8107566 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8107560:	2301      	movs	r3, #1
 8107562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8107566:	4b70      	ldr	r3, [pc, #448]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810756a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107572:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8107576:	4a6c      	ldr	r2, [pc, #432]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107578:	430b      	orrs	r3, r1
 810757a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810757c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107584:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8107588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810758c:	2300      	movs	r3, #0
 810758e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8107592:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8107596:	460b      	mov	r3, r1
 8107598:	4313      	orrs	r3, r2
 810759a:	d03e      	beq.n	810761a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810759c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81075a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81075a8:	d022      	beq.n	81075f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81075aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81075ae:	d81b      	bhi.n	81075e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81075b0:	2b00      	cmp	r3, #0
 81075b2:	d003      	beq.n	81075bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81075b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81075b8:	d00b      	beq.n	81075d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81075ba:	e015      	b.n	81075e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075c0:	3308      	adds	r3, #8
 81075c2:	2100      	movs	r1, #0
 81075c4:	4618      	mov	r0, r3
 81075c6:	f001 fc0d 	bl	8108de4 <RCCEx_PLL2_Config>
 81075ca:	4603      	mov	r3, r0
 81075cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81075d0:	e00f      	b.n	81075f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075d6:	3328      	adds	r3, #40	@ 0x28
 81075d8:	2102      	movs	r1, #2
 81075da:	4618      	mov	r0, r3
 81075dc:	f001 fcb4 	bl	8108f48 <RCCEx_PLL3_Config>
 81075e0:	4603      	mov	r3, r0
 81075e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81075e6:	e004      	b.n	81075f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81075e8:	2301      	movs	r3, #1
 81075ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81075ee:	e000      	b.n	81075f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81075f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81075f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075f6:	2b00      	cmp	r3, #0
 81075f8:	d10b      	bne.n	8107612 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81075fa:	4b4b      	ldr	r3, [pc, #300]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81075fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8107602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107606:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810760a:	4a47      	ldr	r2, [pc, #284]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810760c:	430b      	orrs	r3, r1
 810760e:	6593      	str	r3, [r2, #88]	@ 0x58
 8107610:	e003      	b.n	810761a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107622:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8107626:	67bb      	str	r3, [r7, #120]	@ 0x78
 8107628:	2300      	movs	r3, #0
 810762a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810762c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8107630:	460b      	mov	r3, r1
 8107632:	4313      	orrs	r3, r2
 8107634:	d03b      	beq.n	81076ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8107636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810763e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107642:	d01f      	beq.n	8107684 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107644:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107648:	d818      	bhi.n	810767c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810764a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810764e:	d003      	beq.n	8107658 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8107650:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107654:	d007      	beq.n	8107666 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8107656:	e011      	b.n	810767c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107658:	4b33      	ldr	r3, [pc, #204]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810765c:	4a32      	ldr	r2, [pc, #200]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810765e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107664:	e00f      	b.n	8107686 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810766a:	3328      	adds	r3, #40	@ 0x28
 810766c:	2101      	movs	r1, #1
 810766e:	4618      	mov	r0, r3
 8107670:	f001 fc6a 	bl	8108f48 <RCCEx_PLL3_Config>
 8107674:	4603      	mov	r3, r0
 8107676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810767a:	e004      	b.n	8107686 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810767c:	2301      	movs	r3, #1
 810767e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107682:	e000      	b.n	8107686 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8107684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810768a:	2b00      	cmp	r3, #0
 810768c:	d10b      	bne.n	81076a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810768e:	4b26      	ldr	r3, [pc, #152]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107692:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810769a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810769e:	4a22      	ldr	r2, [pc, #136]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81076a0:	430b      	orrs	r3, r1
 81076a2:	6553      	str	r3, [r2, #84]	@ 0x54
 81076a4:	e003      	b.n	81076ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076b6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81076ba:	673b      	str	r3, [r7, #112]	@ 0x70
 81076bc:	2300      	movs	r3, #0
 81076be:	677b      	str	r3, [r7, #116]	@ 0x74
 81076c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81076c4:	460b      	mov	r3, r1
 81076c6:	4313      	orrs	r3, r2
 81076c8:	d034      	beq.n	8107734 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81076d0:	2b00      	cmp	r3, #0
 81076d2:	d003      	beq.n	81076dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81076d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81076d8:	d007      	beq.n	81076ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81076da:	e011      	b.n	8107700 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81076dc:	4b12      	ldr	r3, [pc, #72]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076e0:	4a11      	ldr	r2, [pc, #68]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81076e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81076e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81076e8:	e00e      	b.n	8107708 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076ee:	3308      	adds	r3, #8
 81076f0:	2102      	movs	r1, #2
 81076f2:	4618      	mov	r0, r3
 81076f4:	f001 fb76 	bl	8108de4 <RCCEx_PLL2_Config>
 81076f8:	4603      	mov	r3, r0
 81076fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81076fe:	e003      	b.n	8107708 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8107700:	2301      	movs	r3, #1
 8107702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810770c:	2b00      	cmp	r3, #0
 810770e:	d10d      	bne.n	810772c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107710:	4b05      	ldr	r3, [pc, #20]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107714:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8107718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810771c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810771e:	4a02      	ldr	r2, [pc, #8]	@ (8107728 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107720:	430b      	orrs	r3, r1
 8107722:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107724:	e006      	b.n	8107734 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8107726:	bf00      	nop
 8107728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810772c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107738:	e9d3 2300 	ldrd	r2, r3, [r3]
 810773c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8107740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8107742:	2300      	movs	r3, #0
 8107744:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8107746:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810774a:	460b      	mov	r3, r1
 810774c:	4313      	orrs	r3, r2
 810774e:	d00c      	beq.n	810776a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107754:	3328      	adds	r3, #40	@ 0x28
 8107756:	2102      	movs	r1, #2
 8107758:	4618      	mov	r0, r3
 810775a:	f001 fbf5 	bl	8108f48 <RCCEx_PLL3_Config>
 810775e:	4603      	mov	r3, r0
 8107760:	2b00      	cmp	r3, #0
 8107762:	d002      	beq.n	810776a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107764:	2301      	movs	r3, #1
 8107766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810776a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107772:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8107776:	663b      	str	r3, [r7, #96]	@ 0x60
 8107778:	2300      	movs	r3, #0
 810777a:	667b      	str	r3, [r7, #100]	@ 0x64
 810777c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8107780:	460b      	mov	r3, r1
 8107782:	4313      	orrs	r3, r2
 8107784:	d038      	beq.n	81077f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8107786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810778a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810778e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107792:	d018      	beq.n	81077c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8107794:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107798:	d811      	bhi.n	81077be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810779a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810779e:	d014      	beq.n	81077ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81077a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81077a4:	d80b      	bhi.n	81077be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81077a6:	2b00      	cmp	r3, #0
 81077a8:	d011      	beq.n	81077ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81077aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81077ae:	d106      	bne.n	81077be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81077b0:	4bc3      	ldr	r3, [pc, #780]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81077b4:	4ac2      	ldr	r2, [pc, #776]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81077ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81077bc:	e008      	b.n	81077d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81077be:	2301      	movs	r3, #1
 81077c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81077c4:	e004      	b.n	81077d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81077c6:	bf00      	nop
 81077c8:	e002      	b.n	81077d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81077ca:	bf00      	nop
 81077cc:	e000      	b.n	81077d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81077ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81077d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81077d4:	2b00      	cmp	r3, #0
 81077d6:	d10b      	bne.n	81077f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81077d8:	4bb9      	ldr	r3, [pc, #740]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81077dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81077e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81077e8:	4ab5      	ldr	r2, [pc, #724]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81077ea:	430b      	orrs	r3, r1
 81077ec:	6553      	str	r3, [r2, #84]	@ 0x54
 81077ee:	e003      	b.n	81077f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81077f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81077f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107800:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8107804:	65bb      	str	r3, [r7, #88]	@ 0x58
 8107806:	2300      	movs	r3, #0
 8107808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810780a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810780e:	460b      	mov	r3, r1
 8107810:	4313      	orrs	r3, r2
 8107812:	d009      	beq.n	8107828 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107814:	4baa      	ldr	r3, [pc, #680]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107818:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8107822:	4aa7      	ldr	r2, [pc, #668]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107824:	430b      	orrs	r3, r1
 8107826:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8107828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107830:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8107834:	653b      	str	r3, [r7, #80]	@ 0x50
 8107836:	2300      	movs	r3, #0
 8107838:	657b      	str	r3, [r7, #84]	@ 0x54
 810783a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810783e:	460b      	mov	r3, r1
 8107840:	4313      	orrs	r3, r2
 8107842:	d00a      	beq.n	810785a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107844:	4b9e      	ldr	r3, [pc, #632]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107846:	691b      	ldr	r3, [r3, #16]
 8107848:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107850:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8107854:	4a9a      	ldr	r2, [pc, #616]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107856:	430b      	orrs	r3, r1
 8107858:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107862:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8107866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107868:	2300      	movs	r3, #0
 810786a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810786c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8107870:	460b      	mov	r3, r1
 8107872:	4313      	orrs	r3, r2
 8107874:	d009      	beq.n	810788a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107876:	4b92      	ldr	r3, [pc, #584]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810787a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107884:	4a8e      	ldr	r2, [pc, #568]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107886:	430b      	orrs	r3, r1
 8107888:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107892:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8107896:	643b      	str	r3, [r7, #64]	@ 0x40
 8107898:	2300      	movs	r3, #0
 810789a:	647b      	str	r3, [r7, #68]	@ 0x44
 810789c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81078a0:	460b      	mov	r3, r1
 81078a2:	4313      	orrs	r3, r2
 81078a4:	d00e      	beq.n	81078c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81078a6:	4b86      	ldr	r3, [pc, #536]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078a8:	691b      	ldr	r3, [r3, #16]
 81078aa:	4a85      	ldr	r2, [pc, #532]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81078b0:	6113      	str	r3, [r2, #16]
 81078b2:	4b83      	ldr	r3, [pc, #524]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078b4:	6919      	ldr	r1, [r3, #16]
 81078b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81078be:	4a80      	ldr	r2, [pc, #512]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078c0:	430b      	orrs	r3, r1
 81078c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81078c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81078d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81078d2:	2300      	movs	r3, #0
 81078d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81078d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81078da:	460b      	mov	r3, r1
 81078dc:	4313      	orrs	r3, r2
 81078de:	d009      	beq.n	81078f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81078e0:	4b77      	ldr	r3, [pc, #476]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81078e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81078ee:	4a74      	ldr	r2, [pc, #464]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078f0:	430b      	orrs	r3, r1
 81078f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81078fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8107900:	633b      	str	r3, [r7, #48]	@ 0x30
 8107902:	2300      	movs	r3, #0
 8107904:	637b      	str	r3, [r7, #52]	@ 0x34
 8107906:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810790a:	460b      	mov	r3, r1
 810790c:	4313      	orrs	r3, r2
 810790e:	d00a      	beq.n	8107926 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107910:	4b6b      	ldr	r3, [pc, #428]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107914:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8107918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810791c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8107920:	4a67      	ldr	r2, [pc, #412]	@ (8107ac0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107922:	430b      	orrs	r3, r1
 8107924:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8107926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810792e:	2100      	movs	r1, #0
 8107930:	62b9      	str	r1, [r7, #40]	@ 0x28
 8107932:	f003 0301 	and.w	r3, r3, #1
 8107936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107938:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810793c:	460b      	mov	r3, r1
 810793e:	4313      	orrs	r3, r2
 8107940:	d011      	beq.n	8107966 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107946:	3308      	adds	r3, #8
 8107948:	2100      	movs	r1, #0
 810794a:	4618      	mov	r0, r3
 810794c:	f001 fa4a 	bl	8108de4 <RCCEx_PLL2_Config>
 8107950:	4603      	mov	r3, r0
 8107952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810795a:	2b00      	cmp	r3, #0
 810795c:	d003      	beq.n	8107966 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810795e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8107966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810796e:	2100      	movs	r1, #0
 8107970:	6239      	str	r1, [r7, #32]
 8107972:	f003 0302 	and.w	r3, r3, #2
 8107976:	627b      	str	r3, [r7, #36]	@ 0x24
 8107978:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810797c:	460b      	mov	r3, r1
 810797e:	4313      	orrs	r3, r2
 8107980:	d011      	beq.n	81079a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107986:	3308      	adds	r3, #8
 8107988:	2101      	movs	r1, #1
 810798a:	4618      	mov	r0, r3
 810798c:	f001 fa2a 	bl	8108de4 <RCCEx_PLL2_Config>
 8107990:	4603      	mov	r3, r0
 8107992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810799a:	2b00      	cmp	r3, #0
 810799c:	d003      	beq.n	81079a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810799e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079ae:	2100      	movs	r1, #0
 81079b0:	61b9      	str	r1, [r7, #24]
 81079b2:	f003 0304 	and.w	r3, r3, #4
 81079b6:	61fb      	str	r3, [r7, #28]
 81079b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81079bc:	460b      	mov	r3, r1
 81079be:	4313      	orrs	r3, r2
 81079c0:	d011      	beq.n	81079e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079c6:	3308      	adds	r3, #8
 81079c8:	2102      	movs	r1, #2
 81079ca:	4618      	mov	r0, r3
 81079cc:	f001 fa0a 	bl	8108de4 <RCCEx_PLL2_Config>
 81079d0:	4603      	mov	r3, r0
 81079d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81079d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079da:	2b00      	cmp	r3, #0
 81079dc:	d003      	beq.n	81079e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81079de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079ee:	2100      	movs	r1, #0
 81079f0:	6139      	str	r1, [r7, #16]
 81079f2:	f003 0308 	and.w	r3, r3, #8
 81079f6:	617b      	str	r3, [r7, #20]
 81079f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81079fc:	460b      	mov	r3, r1
 81079fe:	4313      	orrs	r3, r2
 8107a00:	d011      	beq.n	8107a26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a06:	3328      	adds	r3, #40	@ 0x28
 8107a08:	2100      	movs	r1, #0
 8107a0a:	4618      	mov	r0, r3
 8107a0c:	f001 fa9c 	bl	8108f48 <RCCEx_PLL3_Config>
 8107a10:	4603      	mov	r3, r0
 8107a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8107a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a1a:	2b00      	cmp	r3, #0
 8107a1c:	d003      	beq.n	8107a26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8107a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a2e:	2100      	movs	r1, #0
 8107a30:	60b9      	str	r1, [r7, #8]
 8107a32:	f003 0310 	and.w	r3, r3, #16
 8107a36:	60fb      	str	r3, [r7, #12]
 8107a38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8107a3c:	460b      	mov	r3, r1
 8107a3e:	4313      	orrs	r3, r2
 8107a40:	d011      	beq.n	8107a66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a46:	3328      	adds	r3, #40	@ 0x28
 8107a48:	2101      	movs	r1, #1
 8107a4a:	4618      	mov	r0, r3
 8107a4c:	f001 fa7c 	bl	8108f48 <RCCEx_PLL3_Config>
 8107a50:	4603      	mov	r3, r0
 8107a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a5a:	2b00      	cmp	r3, #0
 8107a5c:	d003      	beq.n	8107a66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8107a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a6e:	2100      	movs	r1, #0
 8107a70:	6039      	str	r1, [r7, #0]
 8107a72:	f003 0320 	and.w	r3, r3, #32
 8107a76:	607b      	str	r3, [r7, #4]
 8107a78:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107a7c:	460b      	mov	r3, r1
 8107a7e:	4313      	orrs	r3, r2
 8107a80:	d011      	beq.n	8107aa6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a86:	3328      	adds	r3, #40	@ 0x28
 8107a88:	2102      	movs	r1, #2
 8107a8a:	4618      	mov	r0, r3
 8107a8c:	f001 fa5c 	bl	8108f48 <RCCEx_PLL3_Config>
 8107a90:	4603      	mov	r3, r0
 8107a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8107a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a9a:	2b00      	cmp	r3, #0
 8107a9c:	d003      	beq.n	8107aa6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8107aa6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8107aaa:	2b00      	cmp	r3, #0
 8107aac:	d101      	bne.n	8107ab2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8107aae:	2300      	movs	r3, #0
 8107ab0:	e000      	b.n	8107ab4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8107ab2:	2301      	movs	r3, #1
}
 8107ab4:	4618      	mov	r0, r3
 8107ab6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8107aba:	46bd      	mov	sp, r7
 8107abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107ac0:	58024400 	.word	0x58024400

08107ac4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8107ac4:	b580      	push	{r7, lr}
 8107ac6:	b090      	sub	sp, #64	@ 0x40
 8107ac8:	af00      	add	r7, sp, #0
 8107aca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8107ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107ad2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8107ad6:	430b      	orrs	r3, r1
 8107ad8:	f040 8094 	bne.w	8107c04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8107adc:	4b9e      	ldr	r3, [pc, #632]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107ae0:	f003 0307 	and.w	r3, r3, #7
 8107ae4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ae8:	2b04      	cmp	r3, #4
 8107aea:	f200 8087 	bhi.w	8107bfc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8107aee:	a201      	add	r2, pc, #4	@ (adr r2, 8107af4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8107af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107af4:	08107b09 	.word	0x08107b09
 8107af8:	08107b31 	.word	0x08107b31
 8107afc:	08107b59 	.word	0x08107b59
 8107b00:	08107bf5 	.word	0x08107bf5
 8107b04:	08107b81 	.word	0x08107b81
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107b08:	4b93      	ldr	r3, [pc, #588]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107b14:	d108      	bne.n	8107b28 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107b1a:	4618      	mov	r0, r3
 8107b1c:	f001 f810 	bl	8108b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b24:	f000 bd45 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b28:	2300      	movs	r3, #0
 8107b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b2c:	f000 bd41 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107b30:	4b89      	ldr	r3, [pc, #548]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b32:	681b      	ldr	r3, [r3, #0]
 8107b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107b3c:	d108      	bne.n	8107b50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b3e:	f107 0318 	add.w	r3, r7, #24
 8107b42:	4618      	mov	r0, r3
 8107b44:	f000 fd54 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107b48:	69bb      	ldr	r3, [r7, #24]
 8107b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b4c:	f000 bd31 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b50:	2300      	movs	r3, #0
 8107b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b54:	f000 bd2d 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107b58:	4b7f      	ldr	r3, [pc, #508]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b5a:	681b      	ldr	r3, [r3, #0]
 8107b5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b64:	d108      	bne.n	8107b78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b66:	f107 030c 	add.w	r3, r7, #12
 8107b6a:	4618      	mov	r0, r3
 8107b6c:	f000 fe94 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107b70:	68fb      	ldr	r3, [r7, #12]
 8107b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b74:	f000 bd1d 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b78:	2300      	movs	r3, #0
 8107b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b7c:	f000 bd19 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107b80:	4b75      	ldr	r3, [pc, #468]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107b84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107b88:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107b8a:	4b73      	ldr	r3, [pc, #460]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b8c:	681b      	ldr	r3, [r3, #0]
 8107b8e:	f003 0304 	and.w	r3, r3, #4
 8107b92:	2b04      	cmp	r3, #4
 8107b94:	d10c      	bne.n	8107bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8107b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107b98:	2b00      	cmp	r3, #0
 8107b9a:	d109      	bne.n	8107bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107b9c:	4b6e      	ldr	r3, [pc, #440]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107b9e:	681b      	ldr	r3, [r3, #0]
 8107ba0:	08db      	lsrs	r3, r3, #3
 8107ba2:	f003 0303 	and.w	r3, r3, #3
 8107ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8107bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107bae:	e01f      	b.n	8107bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107bb0:	4b69      	ldr	r3, [pc, #420]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107bb2:	681b      	ldr	r3, [r3, #0]
 8107bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107bbc:	d106      	bne.n	8107bcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8107bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107bc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107bc4:	d102      	bne.n	8107bcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107bc6:	4b66      	ldr	r3, [pc, #408]	@ (8107d60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107bca:	e011      	b.n	8107bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107bcc:	4b62      	ldr	r3, [pc, #392]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107bce:	681b      	ldr	r3, [r3, #0]
 8107bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107bd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107bd8:	d106      	bne.n	8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8107bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107be0:	d102      	bne.n	8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107be2:	4b60      	ldr	r3, [pc, #384]	@ (8107d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107be6:	e003      	b.n	8107bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107be8:	2300      	movs	r3, #0
 8107bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107bec:	f000 bce1 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107bf0:	f000 bcdf 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8107d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bf8:	f000 bcdb 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107bfc:	2300      	movs	r3, #0
 8107bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c00:	f000 bcd7 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107c08:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8107c0c:	430b      	orrs	r3, r1
 8107c0e:	f040 80ad 	bne.w	8107d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8107c12:	4b51      	ldr	r3, [pc, #324]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107c16:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8107c1a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107c22:	d056      	beq.n	8107cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8107c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107c2a:	f200 8090 	bhi.w	8107d4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c30:	2bc0      	cmp	r3, #192	@ 0xc0
 8107c32:	f000 8088 	beq.w	8107d46 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8107c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c38:	2bc0      	cmp	r3, #192	@ 0xc0
 8107c3a:	f200 8088 	bhi.w	8107d4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c40:	2b80      	cmp	r3, #128	@ 0x80
 8107c42:	d032      	beq.n	8107caa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c46:	2b80      	cmp	r3, #128	@ 0x80
 8107c48:	f200 8081 	bhi.w	8107d4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c4e:	2b00      	cmp	r3, #0
 8107c50:	d003      	beq.n	8107c5a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8107c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c54:	2b40      	cmp	r3, #64	@ 0x40
 8107c56:	d014      	beq.n	8107c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8107c58:	e079      	b.n	8107d4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c5c:	681b      	ldr	r3, [r3, #0]
 8107c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107c62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c66:	d108      	bne.n	8107c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107c6c:	4618      	mov	r0, r3
 8107c6e:	f000 ff67 	bl	8108b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c76:	f000 bc9c 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c7a:	2300      	movs	r3, #0
 8107c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c7e:	f000 bc98 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107c82:	4b35      	ldr	r3, [pc, #212]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c84:	681b      	ldr	r3, [r3, #0]
 8107c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107c8e:	d108      	bne.n	8107ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c90:	f107 0318 	add.w	r3, r7, #24
 8107c94:	4618      	mov	r0, r3
 8107c96:	f000 fcab 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107c9a:	69bb      	ldr	r3, [r7, #24]
 8107c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c9e:	f000 bc88 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107ca2:	2300      	movs	r3, #0
 8107ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ca6:	f000 bc84 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107caa:	4b2b      	ldr	r3, [pc, #172]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cac:	681b      	ldr	r3, [r3, #0]
 8107cae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107cb6:	d108      	bne.n	8107cca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107cb8:	f107 030c 	add.w	r3, r7, #12
 8107cbc:	4618      	mov	r0, r3
 8107cbe:	f000 fdeb 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107cc2:	68fb      	ldr	r3, [r7, #12]
 8107cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107cc6:	f000 bc74 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107cca:	2300      	movs	r3, #0
 8107ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107cce:	f000 bc70 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107cd2:	4b21      	ldr	r3, [pc, #132]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107cda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cde:	681b      	ldr	r3, [r3, #0]
 8107ce0:	f003 0304 	and.w	r3, r3, #4
 8107ce4:	2b04      	cmp	r3, #4
 8107ce6:	d10c      	bne.n	8107d02 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8107ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107cea:	2b00      	cmp	r3, #0
 8107cec:	d109      	bne.n	8107d02 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cee:	4b1a      	ldr	r3, [pc, #104]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cf0:	681b      	ldr	r3, [r3, #0]
 8107cf2:	08db      	lsrs	r3, r3, #3
 8107cf4:	f003 0303 	and.w	r3, r3, #3
 8107cf8:	4a18      	ldr	r2, [pc, #96]	@ (8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8107cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d00:	e01f      	b.n	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107d02:	4b15      	ldr	r3, [pc, #84]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107d04:	681b      	ldr	r3, [r3, #0]
 8107d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107d0e:	d106      	bne.n	8107d1e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8107d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107d16:	d102      	bne.n	8107d1e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107d18:	4b11      	ldr	r3, [pc, #68]	@ (8107d60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d1c:	e011      	b.n	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8107d58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107d20:	681b      	ldr	r3, [r3, #0]
 8107d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107d2a:	d106      	bne.n	8107d3a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107d32:	d102      	bne.n	8107d3a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107d34:	4b0b      	ldr	r3, [pc, #44]	@ (8107d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107d38:	e003      	b.n	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107d3a:	2300      	movs	r3, #0
 8107d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107d3e:	f000 bc38 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107d42:	f000 bc36 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107d46:	4b08      	ldr	r3, [pc, #32]	@ (8107d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d4a:	f000 bc32 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107d4e:	2300      	movs	r3, #0
 8107d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107d52:	f000 bc2e 	b.w	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107d56:	bf00      	nop
 8107d58:	58024400 	.word	0x58024400
 8107d5c:	03d09000 	.word	0x03d09000
 8107d60:	003d0900 	.word	0x003d0900
 8107d64:	007a1200 	.word	0x007a1200
 8107d68:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107d70:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8107d74:	430b      	orrs	r3, r1
 8107d76:	f040 809c 	bne.w	8107eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8107d7a:	4b9e      	ldr	r3, [pc, #632]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107d7e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107d82:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107d8a:	d054      	beq.n	8107e36 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107d92:	f200 808b 	bhi.w	8107eac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107d98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107d9c:	f000 8083 	beq.w	8107ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107da2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107da6:	f200 8081 	bhi.w	8107eac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107db0:	d02f      	beq.n	8107e12 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107db8:	d878      	bhi.n	8107eac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dbc:	2b00      	cmp	r3, #0
 8107dbe:	d004      	beq.n	8107dca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107dc6:	d012      	beq.n	8107dee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8107dc8:	e070      	b.n	8107eac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107dca:	4b8a      	ldr	r3, [pc, #552]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107dcc:	681b      	ldr	r3, [r3, #0]
 8107dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107dd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107dd6:	d107      	bne.n	8107de8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107ddc:	4618      	mov	r0, r3
 8107dde:	f000 feaf 	bl	8108b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107de6:	e3e4      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107de8:	2300      	movs	r3, #0
 8107dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107dec:	e3e1      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107dee:	4b81      	ldr	r3, [pc, #516]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107df0:	681b      	ldr	r3, [r3, #0]
 8107df2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107df6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107dfa:	d107      	bne.n	8107e0c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107dfc:	f107 0318 	add.w	r3, r7, #24
 8107e00:	4618      	mov	r0, r3
 8107e02:	f000 fbf5 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107e06:	69bb      	ldr	r3, [r7, #24]
 8107e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e0a:	e3d2      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e0c:	2300      	movs	r3, #0
 8107e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e10:	e3cf      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107e12:	4b78      	ldr	r3, [pc, #480]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107e1e:	d107      	bne.n	8107e30 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107e20:	f107 030c 	add.w	r3, r7, #12
 8107e24:	4618      	mov	r0, r3
 8107e26:	f000 fd37 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107e2a:	68fb      	ldr	r3, [r7, #12]
 8107e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107e2e:	e3c0      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107e30:	2300      	movs	r3, #0
 8107e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107e34:	e3bd      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107e36:	4b6f      	ldr	r3, [pc, #444]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107e3e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107e40:	4b6c      	ldr	r3, [pc, #432]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e42:	681b      	ldr	r3, [r3, #0]
 8107e44:	f003 0304 	and.w	r3, r3, #4
 8107e48:	2b04      	cmp	r3, #4
 8107e4a:	d10c      	bne.n	8107e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e4e:	2b00      	cmp	r3, #0
 8107e50:	d109      	bne.n	8107e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107e52:	4b68      	ldr	r3, [pc, #416]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e54:	681b      	ldr	r3, [r3, #0]
 8107e56:	08db      	lsrs	r3, r3, #3
 8107e58:	f003 0303 	and.w	r3, r3, #3
 8107e5c:	4a66      	ldr	r2, [pc, #408]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8107e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e64:	e01e      	b.n	8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107e66:	4b63      	ldr	r3, [pc, #396]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107e72:	d106      	bne.n	8107e82 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107e7a:	d102      	bne.n	8107e82 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8107ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e80:	e010      	b.n	8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107e82:	4b5c      	ldr	r3, [pc, #368]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107e84:	681b      	ldr	r3, [r3, #0]
 8107e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107e8e:	d106      	bne.n	8107e9e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107e96:	d102      	bne.n	8107e9e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107e98:	4b59      	ldr	r3, [pc, #356]	@ (8108000 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107e9c:	e002      	b.n	8107ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107e9e:	2300      	movs	r3, #0
 8107ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107ea2:	e386      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107ea4:	e385      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107ea6:	4b57      	ldr	r3, [pc, #348]	@ (8108004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107eaa:	e382      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107eac:	2300      	movs	r3, #0
 8107eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107eb0:	e37f      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107eb6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8107eba:	430b      	orrs	r3, r1
 8107ebc:	f040 80a7 	bne.w	810800e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107ec4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107ec8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ecc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107ed0:	d055      	beq.n	8107f7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ed4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107ed8:	f200 8096 	bhi.w	8108008 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ede:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107ee2:	f000 8084 	beq.w	8107fee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8107ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ee8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107eec:	f200 808c 	bhi.w	8108008 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107ef6:	d030      	beq.n	8107f5a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8107ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107efa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107efe:	f200 8083 	bhi.w	8108008 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f04:	2b00      	cmp	r3, #0
 8107f06:	d004      	beq.n	8107f12 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8107f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8107f0e:	d012      	beq.n	8107f36 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8107f10:	e07a      	b.n	8108008 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107f12:	4b38      	ldr	r3, [pc, #224]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107f1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107f1e:	d107      	bne.n	8107f30 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107f24:	4618      	mov	r0, r3
 8107f26:	f000 fe0b 	bl	8108b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f2e:	e340      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f30:	2300      	movs	r3, #0
 8107f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f34:	e33d      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107f36:	4b2f      	ldr	r3, [pc, #188]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f38:	681b      	ldr	r3, [r3, #0]
 8107f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107f42:	d107      	bne.n	8107f54 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f44:	f107 0318 	add.w	r3, r7, #24
 8107f48:	4618      	mov	r0, r3
 8107f4a:	f000 fb51 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107f4e:	69bb      	ldr	r3, [r7, #24]
 8107f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f52:	e32e      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f54:	2300      	movs	r3, #0
 8107f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f58:	e32b      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107f5a:	4b26      	ldr	r3, [pc, #152]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f5c:	681b      	ldr	r3, [r3, #0]
 8107f5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107f62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107f66:	d107      	bne.n	8107f78 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f68:	f107 030c 	add.w	r3, r7, #12
 8107f6c:	4618      	mov	r0, r3
 8107f6e:	f000 fc93 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107f72:	68fb      	ldr	r3, [r7, #12]
 8107f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f76:	e31c      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f78:	2300      	movs	r3, #0
 8107f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107f7c:	e319      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107f86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107f88:	4b1a      	ldr	r3, [pc, #104]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f8a:	681b      	ldr	r3, [r3, #0]
 8107f8c:	f003 0304 	and.w	r3, r3, #4
 8107f90:	2b04      	cmp	r3, #4
 8107f92:	d10c      	bne.n	8107fae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107f96:	2b00      	cmp	r3, #0
 8107f98:	d109      	bne.n	8107fae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f9a:	4b16      	ldr	r3, [pc, #88]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f9c:	681b      	ldr	r3, [r3, #0]
 8107f9e:	08db      	lsrs	r3, r3, #3
 8107fa0:	f003 0303 	and.w	r3, r3, #3
 8107fa4:	4a14      	ldr	r2, [pc, #80]	@ (8107ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8107faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107fac:	e01e      	b.n	8107fec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107fae:	4b11      	ldr	r3, [pc, #68]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107fb0:	681b      	ldr	r3, [r3, #0]
 8107fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107fba:	d106      	bne.n	8107fca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107fc2:	d102      	bne.n	8107fca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8107ffc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107fc8:	e010      	b.n	8107fec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107fca:	4b0a      	ldr	r3, [pc, #40]	@ (8107ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107fcc:	681b      	ldr	r3, [r3, #0]
 8107fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107fd6:	d106      	bne.n	8107fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8107fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107fde:	d102      	bne.n	8107fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107fe0:	4b07      	ldr	r3, [pc, #28]	@ (8108000 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107fe4:	e002      	b.n	8107fec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107fe6:	2300      	movs	r3, #0
 8107fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107fea:	e2e2      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107fec:	e2e1      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107fee:	4b05      	ldr	r3, [pc, #20]	@ (8108004 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107ff2:	e2de      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107ff4:	58024400 	.word	0x58024400
 8107ff8:	03d09000 	.word	0x03d09000
 8107ffc:	003d0900 	.word	0x003d0900
 8108000:	007a1200 	.word	0x007a1200
 8108004:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8108008:	2300      	movs	r3, #0
 810800a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810800c:	e2d1      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810800e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108012:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8108016:	430b      	orrs	r3, r1
 8108018:	f040 809c 	bne.w	8108154 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810801c:	4b93      	ldr	r3, [pc, #588]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810801e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108020:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8108024:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810802c:	d054      	beq.n	81080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810802e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108034:	f200 808b 	bhi.w	810814e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8108038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810803a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810803e:	f000 8083 	beq.w	8108148 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8108042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108044:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8108048:	f200 8081 	bhi.w	810814e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810804e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108052:	d02f      	beq.n	81080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8108054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810805a:	d878      	bhi.n	810814e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810805c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810805e:	2b00      	cmp	r3, #0
 8108060:	d004      	beq.n	810806c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8108062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108068:	d012      	beq.n	8108090 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810806a:	e070      	b.n	810814e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810806c:	4b7f      	ldr	r3, [pc, #508]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810806e:	681b      	ldr	r3, [r3, #0]
 8108070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108074:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108078:	d107      	bne.n	810808a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810807a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810807e:	4618      	mov	r0, r3
 8108080:	f000 fd5e 	bl	8108b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108088:	e293      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810808a:	2300      	movs	r3, #0
 810808c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810808e:	e290      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108090:	4b76      	ldr	r3, [pc, #472]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108092:	681b      	ldr	r3, [r3, #0]
 8108094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810809c:	d107      	bne.n	81080ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810809e:	f107 0318 	add.w	r3, r7, #24
 81080a2:	4618      	mov	r0, r3
 81080a4:	f000 faa4 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81080a8:	69bb      	ldr	r3, [r7, #24]
 81080aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080ac:	e281      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080ae:	2300      	movs	r3, #0
 81080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080b2:	e27e      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81080b4:	4b6d      	ldr	r3, [pc, #436]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080b6:	681b      	ldr	r3, [r3, #0]
 81080b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81080bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81080c0:	d107      	bne.n	81080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81080c2:	f107 030c 	add.w	r3, r7, #12
 81080c6:	4618      	mov	r0, r3
 81080c8:	f000 fbe6 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81080cc:	68fb      	ldr	r3, [r7, #12]
 81080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81080d0:	e26f      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81080d2:	2300      	movs	r3, #0
 81080d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81080d6:	e26c      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81080d8:	4b64      	ldr	r3, [pc, #400]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81080dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81080e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81080e2:	4b62      	ldr	r3, [pc, #392]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080e4:	681b      	ldr	r3, [r3, #0]
 81080e6:	f003 0304 	and.w	r3, r3, #4
 81080ea:	2b04      	cmp	r3, #4
 81080ec:	d10c      	bne.n	8108108 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81080ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81080f0:	2b00      	cmp	r3, #0
 81080f2:	d109      	bne.n	8108108 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81080f4:	4b5d      	ldr	r3, [pc, #372]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81080f6:	681b      	ldr	r3, [r3, #0]
 81080f8:	08db      	lsrs	r3, r3, #3
 81080fa:	f003 0303 	and.w	r3, r3, #3
 81080fe:	4a5c      	ldr	r2, [pc, #368]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8108100:	fa22 f303 	lsr.w	r3, r2, r3
 8108104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108106:	e01e      	b.n	8108146 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108108:	4b58      	ldr	r3, [pc, #352]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810810a:	681b      	ldr	r3, [r3, #0]
 810810c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108114:	d106      	bne.n	8108124 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8108116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810811c:	d102      	bne.n	8108124 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810811e:	4b55      	ldr	r3, [pc, #340]	@ (8108274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8108120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108122:	e010      	b.n	8108146 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108124:	4b51      	ldr	r3, [pc, #324]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108126:	681b      	ldr	r3, [r3, #0]
 8108128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810812c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108130:	d106      	bne.n	8108140 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8108132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108138:	d102      	bne.n	8108140 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810813a:	4b4f      	ldr	r3, [pc, #316]	@ (8108278 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810813e:	e002      	b.n	8108146 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108140:	2300      	movs	r3, #0
 8108142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8108144:	e235      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108146:	e234      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8108148:	4b4c      	ldr	r3, [pc, #304]	@ (810827c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810814c:	e231      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810814e:	2300      	movs	r3, #0
 8108150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108152:	e22e      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8108154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108158:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 810815c:	430b      	orrs	r3, r1
 810815e:	f040 808f 	bne.w	8108280 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8108162:	4b42      	ldr	r3, [pc, #264]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108166:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810816a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 810816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810816e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108172:	d06b      	beq.n	810824c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8108174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108176:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810817a:	d874      	bhi.n	8108266 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810817e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108182:	d056      	beq.n	8108232 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8108184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108186:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810818a:	d86c      	bhi.n	8108266 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810818e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108192:	d03b      	beq.n	810820c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8108194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108196:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810819a:	d864      	bhi.n	8108266 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810819c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810819e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81081a2:	d021      	beq.n	81081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 81081a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81081a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81081aa:	d85c      	bhi.n	8108266 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81081ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81081ae:	2b00      	cmp	r3, #0
 81081b0:	d004      	beq.n	81081bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81081b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81081b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81081b8:	d004      	beq.n	81081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81081ba:	e054      	b.n	8108266 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81081bc:	f7fe fa4c 	bl	8106658 <HAL_RCC_GetPCLK1Freq>
 81081c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81081c2:	e1f6      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81081c4:	4b29      	ldr	r3, [pc, #164]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81081c6:	681b      	ldr	r3, [r3, #0]
 81081c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81081cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81081d0:	d107      	bne.n	81081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81081d2:	f107 0318 	add.w	r3, r7, #24
 81081d6:	4618      	mov	r0, r3
 81081d8:	f000 fa0a 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81081dc:	69fb      	ldr	r3, [r7, #28]
 81081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081e0:	e1e7      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081e2:	2300      	movs	r3, #0
 81081e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81081e6:	e1e4      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81081e8:	4b20      	ldr	r3, [pc, #128]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81081ea:	681b      	ldr	r3, [r3, #0]
 81081ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81081f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81081f4:	d107      	bne.n	8108206 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81081f6:	f107 030c 	add.w	r3, r7, #12
 81081fa:	4618      	mov	r0, r3
 81081fc:	f000 fb4c 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108200:	693b      	ldr	r3, [r7, #16]
 8108202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108204:	e1d5      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108206:	2300      	movs	r3, #0
 8108208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810820a:	e1d2      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810820c:	4b17      	ldr	r3, [pc, #92]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810820e:	681b      	ldr	r3, [r3, #0]
 8108210:	f003 0304 	and.w	r3, r3, #4
 8108214:	2b04      	cmp	r3, #4
 8108216:	d109      	bne.n	810822c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108218:	4b14      	ldr	r3, [pc, #80]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810821a:	681b      	ldr	r3, [r3, #0]
 810821c:	08db      	lsrs	r3, r3, #3
 810821e:	f003 0303 	and.w	r3, r3, #3
 8108222:	4a13      	ldr	r2, [pc, #76]	@ (8108270 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8108224:	fa22 f303 	lsr.w	r3, r2, r3
 8108228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810822a:	e1c2      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810822c:	2300      	movs	r3, #0
 810822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108230:	e1bf      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8108232:	4b0e      	ldr	r3, [pc, #56]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108234:	681b      	ldr	r3, [r3, #0]
 8108236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810823a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810823e:	d102      	bne.n	8108246 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8108240:	4b0c      	ldr	r3, [pc, #48]	@ (8108274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8108242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108244:	e1b5      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108246:	2300      	movs	r3, #0
 8108248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810824a:	e1b2      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810824c:	4b07      	ldr	r3, [pc, #28]	@ (810826c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810824e:	681b      	ldr	r3, [r3, #0]
 8108250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108254:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108258:	d102      	bne.n	8108260 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810825a:	4b07      	ldr	r3, [pc, #28]	@ (8108278 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810825c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810825e:	e1a8      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108260:	2300      	movs	r3, #0
 8108262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108264:	e1a5      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108266:	2300      	movs	r3, #0
 8108268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810826a:	e1a2      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810826c:	58024400 	.word	0x58024400
 8108270:	03d09000 	.word	0x03d09000
 8108274:	003d0900 	.word	0x003d0900
 8108278:	007a1200 	.word	0x007a1200
 810827c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8108280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108284:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8108288:	430b      	orrs	r3, r1
 810828a:	d173      	bne.n	8108374 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 810828c:	4b9c      	ldr	r3, [pc, #624]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810828e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8108294:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810829c:	d02f      	beq.n	81082fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810829e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81082a4:	d863      	bhi.n	810836e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81082a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082a8:	2b00      	cmp	r3, #0
 81082aa:	d004      	beq.n	81082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81082b2:	d012      	beq.n	81082da <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81082b4:	e05b      	b.n	810836e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81082b6:	4b92      	ldr	r3, [pc, #584]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81082b8:	681b      	ldr	r3, [r3, #0]
 81082ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81082be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81082c2:	d107      	bne.n	81082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81082c4:	f107 0318 	add.w	r3, r7, #24
 81082c8:	4618      	mov	r0, r3
 81082ca:	f000 f991 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81082ce:	69bb      	ldr	r3, [r7, #24]
 81082d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81082d2:	e16e      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81082d4:	2300      	movs	r3, #0
 81082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082d8:	e16b      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81082da:	4b89      	ldr	r3, [pc, #548]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81082dc:	681b      	ldr	r3, [r3, #0]
 81082de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81082e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81082e6:	d107      	bne.n	81082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81082e8:	f107 030c 	add.w	r3, r7, #12
 81082ec:	4618      	mov	r0, r3
 81082ee:	f000 fad3 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81082f2:	697b      	ldr	r3, [r7, #20]
 81082f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81082f6:	e15c      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81082f8:	2300      	movs	r3, #0
 81082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81082fc:	e159      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81082fe:	4b80      	ldr	r3, [pc, #512]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108306:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108308:	4b7d      	ldr	r3, [pc, #500]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810830a:	681b      	ldr	r3, [r3, #0]
 810830c:	f003 0304 	and.w	r3, r3, #4
 8108310:	2b04      	cmp	r3, #4
 8108312:	d10c      	bne.n	810832e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8108314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108316:	2b00      	cmp	r3, #0
 8108318:	d109      	bne.n	810832e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810831a:	4b79      	ldr	r3, [pc, #484]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810831c:	681b      	ldr	r3, [r3, #0]
 810831e:	08db      	lsrs	r3, r3, #3
 8108320:	f003 0303 	and.w	r3, r3, #3
 8108324:	4a77      	ldr	r2, [pc, #476]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8108326:	fa22 f303 	lsr.w	r3, r2, r3
 810832a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810832c:	e01e      	b.n	810836c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810832e:	4b74      	ldr	r3, [pc, #464]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108330:	681b      	ldr	r3, [r3, #0]
 8108332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810833a:	d106      	bne.n	810834a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 810833c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810833e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108342:	d102      	bne.n	810834a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108344:	4b70      	ldr	r3, [pc, #448]	@ (8108508 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8108346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108348:	e010      	b.n	810836c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810834a:	4b6d      	ldr	r3, [pc, #436]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810834c:	681b      	ldr	r3, [r3, #0]
 810834e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108356:	d106      	bne.n	8108366 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8108358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810835a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810835e:	d102      	bne.n	8108366 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108360:	4b6a      	ldr	r3, [pc, #424]	@ (810850c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8108362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108364:	e002      	b.n	810836c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108366:	2300      	movs	r3, #0
 8108368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810836a:	e122      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810836c:	e121      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810836e:	2300      	movs	r3, #0
 8108370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108372:	e11e      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8108374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108378:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 810837c:	430b      	orrs	r3, r1
 810837e:	d133      	bne.n	81083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8108380:	4b5f      	ldr	r3, [pc, #380]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108388:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810838a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810838c:	2b00      	cmp	r3, #0
 810838e:	d004      	beq.n	810839a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8108390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108396:	d012      	beq.n	81083be <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8108398:	e023      	b.n	81083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810839a:	4b59      	ldr	r3, [pc, #356]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810839c:	681b      	ldr	r3, [r3, #0]
 810839e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81083a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81083a6:	d107      	bne.n	81083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81083a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81083ac:	4618      	mov	r0, r3
 81083ae:	f000 fbc7 	bl	8108b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81083b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81083b6:	e0fc      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81083b8:	2300      	movs	r3, #0
 81083ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083bc:	e0f9      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81083be:	4b50      	ldr	r3, [pc, #320]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81083c0:	681b      	ldr	r3, [r3, #0]
 81083c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81083c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81083ca:	d107      	bne.n	81083dc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81083cc:	f107 0318 	add.w	r3, r7, #24
 81083d0:	4618      	mov	r0, r3
 81083d2:	f000 f90d 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81083d6:	6a3b      	ldr	r3, [r7, #32]
 81083d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81083da:	e0ea      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81083dc:	2300      	movs	r3, #0
 81083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083e0:	e0e7      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81083e2:	2300      	movs	r3, #0
 81083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81083e6:	e0e4      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81083e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81083ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 81083f0:	430b      	orrs	r3, r1
 81083f2:	f040 808d 	bne.w	8108510 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81083f6:	4b42      	ldr	r3, [pc, #264]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81083f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81083fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 81083fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108406:	d06b      	beq.n	81084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8108408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810840a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810840e:	d874      	bhi.n	81084fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108416:	d056      	beq.n	81084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8108418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810841a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810841e:	d86c      	bhi.n	81084fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108422:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108426:	d03b      	beq.n	81084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8108428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810842a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810842e:	d864      	bhi.n	81084fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108436:	d021      	beq.n	810847c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8108438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810843a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810843e:	d85c      	bhi.n	81084fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108442:	2b00      	cmp	r3, #0
 8108444:	d004      	beq.n	8108450 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8108446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810844c:	d004      	beq.n	8108458 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810844e:	e054      	b.n	81084fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8108450:	f000 f8b8 	bl	81085c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8108454:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108456:	e0ac      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108458:	4b29      	ldr	r3, [pc, #164]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810845a:	681b      	ldr	r3, [r3, #0]
 810845c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108460:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108464:	d107      	bne.n	8108476 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108466:	f107 0318 	add.w	r3, r7, #24
 810846a:	4618      	mov	r0, r3
 810846c:	f000 f8c0 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108470:	69fb      	ldr	r3, [r7, #28]
 8108472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108474:	e09d      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108476:	2300      	movs	r3, #0
 8108478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810847a:	e09a      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810847c:	4b20      	ldr	r3, [pc, #128]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810847e:	681b      	ldr	r3, [r3, #0]
 8108480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108488:	d107      	bne.n	810849a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810848a:	f107 030c 	add.w	r3, r7, #12
 810848e:	4618      	mov	r0, r3
 8108490:	f000 fa02 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108494:	693b      	ldr	r3, [r7, #16]
 8108496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108498:	e08b      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810849a:	2300      	movs	r3, #0
 810849c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810849e:	e088      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81084a0:	4b17      	ldr	r3, [pc, #92]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084a2:	681b      	ldr	r3, [r3, #0]
 81084a4:	f003 0304 	and.w	r3, r3, #4
 81084a8:	2b04      	cmp	r3, #4
 81084aa:	d109      	bne.n	81084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81084ac:	4b14      	ldr	r3, [pc, #80]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084ae:	681b      	ldr	r3, [r3, #0]
 81084b0:	08db      	lsrs	r3, r3, #3
 81084b2:	f003 0303 	and.w	r3, r3, #3
 81084b6:	4a13      	ldr	r2, [pc, #76]	@ (8108504 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81084b8:	fa22 f303 	lsr.w	r3, r2, r3
 81084bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084be:	e078      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084c0:	2300      	movs	r3, #0
 81084c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084c4:	e075      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81084c6:	4b0e      	ldr	r3, [pc, #56]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084c8:	681b      	ldr	r3, [r3, #0]
 81084ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81084ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81084d2:	d102      	bne.n	81084da <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81084d4:	4b0c      	ldr	r3, [pc, #48]	@ (8108508 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81084d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084d8:	e06b      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084da:	2300      	movs	r3, #0
 81084dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084de:	e068      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81084e0:	4b07      	ldr	r3, [pc, #28]	@ (8108500 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084e2:	681b      	ldr	r3, [r3, #0]
 81084e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81084e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81084ec:	d102      	bne.n	81084f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81084ee:	4b07      	ldr	r3, [pc, #28]	@ (810850c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084f2:	e05e      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084f4:	2300      	movs	r3, #0
 81084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084f8:	e05b      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81084fa:	2300      	movs	r3, #0
 81084fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81084fe:	e058      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108500:	58024400 	.word	0x58024400
 8108504:	03d09000 	.word	0x03d09000
 8108508:	003d0900 	.word	0x003d0900
 810850c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8108510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108514:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8108518:	430b      	orrs	r3, r1
 810851a:	d148      	bne.n	81085ae <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810851c:	4b27      	ldr	r3, [pc, #156]	@ (81085bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810851e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108520:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8108524:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8108526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810852c:	d02a      	beq.n	8108584 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108534:	d838      	bhi.n	81085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8108536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108538:	2b00      	cmp	r3, #0
 810853a:	d004      	beq.n	8108546 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810853c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810853e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108542:	d00d      	beq.n	8108560 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108544:	e030      	b.n	81085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108546:	4b1d      	ldr	r3, [pc, #116]	@ (81085bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108548:	681b      	ldr	r3, [r3, #0]
 810854a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810854e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108552:	d102      	bne.n	810855a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108554:	4b1a      	ldr	r3, [pc, #104]	@ (81085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8108556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108558:	e02b      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810855a:	2300      	movs	r3, #0
 810855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810855e:	e028      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108560:	4b16      	ldr	r3, [pc, #88]	@ (81085bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108562:	681b      	ldr	r3, [r3, #0]
 8108564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810856c:	d107      	bne.n	810857e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810856e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108572:	4618      	mov	r0, r3
 8108574:	f000 fae4 	bl	8108b40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8108578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810857c:	e019      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810857e:	2300      	movs	r3, #0
 8108580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108582:	e016      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8108584:	4b0d      	ldr	r3, [pc, #52]	@ (81085bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108586:	681b      	ldr	r3, [r3, #0]
 8108588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810858c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8108590:	d107      	bne.n	81085a2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108592:	f107 0318 	add.w	r3, r7, #24
 8108596:	4618      	mov	r0, r3
 8108598:	f000 f82a 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810859c:	69fb      	ldr	r3, [r7, #28]
 810859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81085a0:	e007      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81085a2:	2300      	movs	r3, #0
 81085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81085a6:	e004      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81085a8:	2300      	movs	r3, #0
 81085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81085ac:	e001      	b.n	81085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81085ae:	2300      	movs	r3, #0
 81085b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 81085b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81085b4:	4618      	mov	r0, r3
 81085b6:	3740      	adds	r7, #64	@ 0x40
 81085b8:	46bd      	mov	sp, r7
 81085ba:	bd80      	pop	{r7, pc}
 81085bc:	58024400 	.word	0x58024400
 81085c0:	007a1200 	.word	0x007a1200

081085c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81085c4:	b580      	push	{r7, lr}
 81085c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81085c8:	f7fe f814 	bl	81065f4 <HAL_RCC_GetHCLKFreq>
 81085cc:	4602      	mov	r2, r0
 81085ce:	4b06      	ldr	r3, [pc, #24]	@ (81085e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81085d0:	6a1b      	ldr	r3, [r3, #32]
 81085d2:	091b      	lsrs	r3, r3, #4
 81085d4:	f003 0307 	and.w	r3, r3, #7
 81085d8:	4904      	ldr	r1, [pc, #16]	@ (81085ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81085da:	5ccb      	ldrb	r3, [r1, r3]
 81085dc:	f003 031f 	and.w	r3, r3, #31
 81085e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81085e4:	4618      	mov	r0, r3
 81085e6:	bd80      	pop	{r7, pc}
 81085e8:	58024400 	.word	0x58024400
 81085ec:	08111fe0 	.word	0x08111fe0

081085f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81085f0:	b480      	push	{r7}
 81085f2:	b089      	sub	sp, #36	@ 0x24
 81085f4:	af00      	add	r7, sp, #0
 81085f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81085f8:	4ba1      	ldr	r3, [pc, #644]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81085fc:	f003 0303 	and.w	r3, r3, #3
 8108600:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8108602:	4b9f      	ldr	r3, [pc, #636]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108606:	0b1b      	lsrs	r3, r3, #12
 8108608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810860c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810860e:	4b9c      	ldr	r3, [pc, #624]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108612:	091b      	lsrs	r3, r3, #4
 8108614:	f003 0301 	and.w	r3, r3, #1
 8108618:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810861a:	4b99      	ldr	r3, [pc, #612]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810861c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810861e:	08db      	lsrs	r3, r3, #3
 8108620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108624:	693a      	ldr	r2, [r7, #16]
 8108626:	fb02 f303 	mul.w	r3, r2, r3
 810862a:	ee07 3a90 	vmov	s15, r3
 810862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8108636:	697b      	ldr	r3, [r7, #20]
 8108638:	2b00      	cmp	r3, #0
 810863a:	f000 8111 	beq.w	8108860 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810863e:	69bb      	ldr	r3, [r7, #24]
 8108640:	2b02      	cmp	r3, #2
 8108642:	f000 8083 	beq.w	810874c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8108646:	69bb      	ldr	r3, [r7, #24]
 8108648:	2b02      	cmp	r3, #2
 810864a:	f200 80a1 	bhi.w	8108790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810864e:	69bb      	ldr	r3, [r7, #24]
 8108650:	2b00      	cmp	r3, #0
 8108652:	d003      	beq.n	810865c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108654:	69bb      	ldr	r3, [r7, #24]
 8108656:	2b01      	cmp	r3, #1
 8108658:	d056      	beq.n	8108708 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810865a:	e099      	b.n	8108790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810865c:	4b88      	ldr	r3, [pc, #544]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810865e:	681b      	ldr	r3, [r3, #0]
 8108660:	f003 0320 	and.w	r3, r3, #32
 8108664:	2b00      	cmp	r3, #0
 8108666:	d02d      	beq.n	81086c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108668:	4b85      	ldr	r3, [pc, #532]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810866a:	681b      	ldr	r3, [r3, #0]
 810866c:	08db      	lsrs	r3, r3, #3
 810866e:	f003 0303 	and.w	r3, r3, #3
 8108672:	4a84      	ldr	r2, [pc, #528]	@ (8108884 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108674:	fa22 f303 	lsr.w	r3, r2, r3
 8108678:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810867a:	68bb      	ldr	r3, [r7, #8]
 810867c:	ee07 3a90 	vmov	s15, r3
 8108680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108684:	697b      	ldr	r3, [r7, #20]
 8108686:	ee07 3a90 	vmov	s15, r3
 810868a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810868e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108692:	4b7b      	ldr	r3, [pc, #492]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810869a:	ee07 3a90 	vmov	s15, r3
 810869e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81086a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81086a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81086aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81086ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81086b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81086b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81086ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81086be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81086c2:	e087      	b.n	81087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81086c4:	697b      	ldr	r3, [r7, #20]
 81086c6:	ee07 3a90 	vmov	s15, r3
 81086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81086ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810888c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81086d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81086d6:	4b6a      	ldr	r3, [pc, #424]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81086d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81086de:	ee07 3a90 	vmov	s15, r3
 81086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81086e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81086ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81086f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108706:	e065      	b.n	81087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108708:	697b      	ldr	r3, [r7, #20]
 810870a:	ee07 3a90 	vmov	s15, r3
 810870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108712:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810871a:	4b59      	ldr	r3, [pc, #356]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108722:	ee07 3a90 	vmov	s15, r3
 8108726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810872a:	ed97 6a03 	vldr	s12, [r7, #12]
 810872e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810873a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810874a:	e043      	b.n	81087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810874c:	697b      	ldr	r3, [r7, #20]
 810874e:	ee07 3a90 	vmov	s15, r3
 8108752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108756:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810875a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810875e:	4b48      	ldr	r3, [pc, #288]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108766:	ee07 3a90 	vmov	s15, r3
 810876a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810876e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108772:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810877a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810877e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108786:	ee67 7a27 	vmul.f32	s15, s14, s15
 810878a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810878e:	e021      	b.n	81087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108790:	697b      	ldr	r3, [r7, #20]
 8108792:	ee07 3a90 	vmov	s15, r3
 8108796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810879a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810879e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087a2:	4b37      	ldr	r3, [pc, #220]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81087a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81087a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087aa:	ee07 3a90 	vmov	s15, r3
 81087ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81087b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81087ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81087be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81087c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81087d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81087d4:	4b2a      	ldr	r3, [pc, #168]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81087d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81087d8:	0a5b      	lsrs	r3, r3, #9
 81087da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81087de:	ee07 3a90 	vmov	s15, r3
 81087e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81087ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 81087ee:	edd7 6a07 	vldr	s13, [r7, #28]
 81087f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81087f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81087fa:	ee17 2a90 	vmov	r2, s15
 81087fe:	687b      	ldr	r3, [r7, #4]
 8108800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8108802:	4b1f      	ldr	r3, [pc, #124]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108806:	0c1b      	lsrs	r3, r3, #16
 8108808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810880c:	ee07 3a90 	vmov	s15, r3
 8108810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108814:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108818:	ee37 7a87 	vadd.f32	s14, s15, s14
 810881c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108828:	ee17 2a90 	vmov	r2, s15
 810882c:	687b      	ldr	r3, [r7, #4]
 810882e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8108830:	4b13      	ldr	r3, [pc, #76]	@ (8108880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108834:	0e1b      	lsrs	r3, r3, #24
 8108836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810883a:	ee07 3a90 	vmov	s15, r3
 810883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108846:	ee37 7a87 	vadd.f32	s14, s15, s14
 810884a:	edd7 6a07 	vldr	s13, [r7, #28]
 810884e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108856:	ee17 2a90 	vmov	r2, s15
 810885a:	687b      	ldr	r3, [r7, #4]
 810885c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810885e:	e008      	b.n	8108872 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108860:	687b      	ldr	r3, [r7, #4]
 8108862:	2200      	movs	r2, #0
 8108864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8108866:	687b      	ldr	r3, [r7, #4]
 8108868:	2200      	movs	r2, #0
 810886a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810886c:	687b      	ldr	r3, [r7, #4]
 810886e:	2200      	movs	r2, #0
 8108870:	609a      	str	r2, [r3, #8]
}
 8108872:	bf00      	nop
 8108874:	3724      	adds	r7, #36	@ 0x24
 8108876:	46bd      	mov	sp, r7
 8108878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810887c:	4770      	bx	lr
 810887e:	bf00      	nop
 8108880:	58024400 	.word	0x58024400
 8108884:	03d09000 	.word	0x03d09000
 8108888:	46000000 	.word	0x46000000
 810888c:	4c742400 	.word	0x4c742400
 8108890:	4a742400 	.word	0x4a742400
 8108894:	4af42400 	.word	0x4af42400

08108898 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8108898:	b480      	push	{r7}
 810889a:	b089      	sub	sp, #36	@ 0x24
 810889c:	af00      	add	r7, sp, #0
 810889e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81088a0:	4ba1      	ldr	r3, [pc, #644]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81088a4:	f003 0303 	and.w	r3, r3, #3
 81088a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81088aa:	4b9f      	ldr	r3, [pc, #636]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81088ae:	0d1b      	lsrs	r3, r3, #20
 81088b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81088b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81088b6:	4b9c      	ldr	r3, [pc, #624]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81088ba:	0a1b      	lsrs	r3, r3, #8
 81088bc:	f003 0301 	and.w	r3, r3, #1
 81088c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81088c2:	4b99      	ldr	r3, [pc, #612]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81088c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81088c6:	08db      	lsrs	r3, r3, #3
 81088c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81088cc:	693a      	ldr	r2, [r7, #16]
 81088ce:	fb02 f303 	mul.w	r3, r2, r3
 81088d2:	ee07 3a90 	vmov	s15, r3
 81088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81088de:	697b      	ldr	r3, [r7, #20]
 81088e0:	2b00      	cmp	r3, #0
 81088e2:	f000 8111 	beq.w	8108b08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81088e6:	69bb      	ldr	r3, [r7, #24]
 81088e8:	2b02      	cmp	r3, #2
 81088ea:	f000 8083 	beq.w	81089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81088ee:	69bb      	ldr	r3, [r7, #24]
 81088f0:	2b02      	cmp	r3, #2
 81088f2:	f200 80a1 	bhi.w	8108a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81088f6:	69bb      	ldr	r3, [r7, #24]
 81088f8:	2b00      	cmp	r3, #0
 81088fa:	d003      	beq.n	8108904 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81088fc:	69bb      	ldr	r3, [r7, #24]
 81088fe:	2b01      	cmp	r3, #1
 8108900:	d056      	beq.n	81089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8108902:	e099      	b.n	8108a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108904:	4b88      	ldr	r3, [pc, #544]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108906:	681b      	ldr	r3, [r3, #0]
 8108908:	f003 0320 	and.w	r3, r3, #32
 810890c:	2b00      	cmp	r3, #0
 810890e:	d02d      	beq.n	810896c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108910:	4b85      	ldr	r3, [pc, #532]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108912:	681b      	ldr	r3, [r3, #0]
 8108914:	08db      	lsrs	r3, r3, #3
 8108916:	f003 0303 	and.w	r3, r3, #3
 810891a:	4a84      	ldr	r2, [pc, #528]	@ (8108b2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810891c:	fa22 f303 	lsr.w	r3, r2, r3
 8108920:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108922:	68bb      	ldr	r3, [r7, #8]
 8108924:	ee07 3a90 	vmov	s15, r3
 8108928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810892c:	697b      	ldr	r3, [r7, #20]
 810892e:	ee07 3a90 	vmov	s15, r3
 8108932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810893a:	4b7b      	ldr	r3, [pc, #492]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810893c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108942:	ee07 3a90 	vmov	s15, r3
 8108946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810894a:	ed97 6a03 	vldr	s12, [r7, #12]
 810894e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810895a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810896a:	e087      	b.n	8108a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810896c:	697b      	ldr	r3, [r7, #20]
 810896e:	ee07 3a90 	vmov	s15, r3
 8108972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108976:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108b34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810897e:	4b6a      	ldr	r3, [pc, #424]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108986:	ee07 3a90 	vmov	s15, r3
 810898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810898e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108992:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810899e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81089aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81089ae:	e065      	b.n	8108a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81089b0:	697b      	ldr	r3, [r7, #20]
 81089b2:	ee07 3a90 	vmov	s15, r3
 81089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81089c2:	4b59      	ldr	r3, [pc, #356]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81089ca:	ee07 3a90 	vmov	s15, r3
 81089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81089d2:	ed97 6a03 	vldr	s12, [r7, #12]
 81089d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81089e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81089ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81089f2:	e043      	b.n	8108a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81089f4:	697b      	ldr	r3, [r7, #20]
 81089f6:	ee07 3a90 	vmov	s15, r3
 81089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8108a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a06:	4b48      	ldr	r3, [pc, #288]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a0e:	ee07 3a90 	vmov	s15, r3
 8108a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8108a1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108a36:	e021      	b.n	8108a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108a38:	697b      	ldr	r3, [r7, #20]
 8108a3a:	ee07 3a90 	vmov	s15, r3
 8108a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a4a:	4b37      	ldr	r3, [pc, #220]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a52:	ee07 3a90 	vmov	s15, r3
 8108a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8108a5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108a7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108a80:	0a5b      	lsrs	r3, r3, #9
 8108a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108a86:	ee07 3a90 	vmov	s15, r3
 8108a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8108a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108aa2:	ee17 2a90 	vmov	r2, s15
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8108aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108aae:	0c1b      	lsrs	r3, r3, #16
 8108ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108ab4:	ee07 3a90 	vmov	s15, r3
 8108ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8108ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108ad0:	ee17 2a90 	vmov	r2, s15
 8108ad4:	687b      	ldr	r3, [r7, #4]
 8108ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8108ad8:	4b13      	ldr	r3, [pc, #76]	@ (8108b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108adc:	0e1b      	lsrs	r3, r3, #24
 8108ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108ae2:	ee07 3a90 	vmov	s15, r3
 8108ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8108af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108afe:	ee17 2a90 	vmov	r2, s15
 8108b02:	687b      	ldr	r3, [r7, #4]
 8108b04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108b06:	e008      	b.n	8108b1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	2200      	movs	r2, #0
 8108b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8108b0e:	687b      	ldr	r3, [r7, #4]
 8108b10:	2200      	movs	r2, #0
 8108b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108b14:	687b      	ldr	r3, [r7, #4]
 8108b16:	2200      	movs	r2, #0
 8108b18:	609a      	str	r2, [r3, #8]
}
 8108b1a:	bf00      	nop
 8108b1c:	3724      	adds	r7, #36	@ 0x24
 8108b1e:	46bd      	mov	sp, r7
 8108b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b24:	4770      	bx	lr
 8108b26:	bf00      	nop
 8108b28:	58024400 	.word	0x58024400
 8108b2c:	03d09000 	.word	0x03d09000
 8108b30:	46000000 	.word	0x46000000
 8108b34:	4c742400 	.word	0x4c742400
 8108b38:	4a742400 	.word	0x4a742400
 8108b3c:	4af42400 	.word	0x4af42400

08108b40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8108b40:	b480      	push	{r7}
 8108b42:	b089      	sub	sp, #36	@ 0x24
 8108b44:	af00      	add	r7, sp, #0
 8108b46:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108b48:	4ba0      	ldr	r3, [pc, #640]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b4c:	f003 0303 	and.w	r3, r3, #3
 8108b50:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8108b52:	4b9e      	ldr	r3, [pc, #632]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108b56:	091b      	lsrs	r3, r3, #4
 8108b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108b5c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8108b5e:	4b9b      	ldr	r3, [pc, #620]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b62:	f003 0301 	and.w	r3, r3, #1
 8108b66:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8108b68:	4b98      	ldr	r3, [pc, #608]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108b6c:	08db      	lsrs	r3, r3, #3
 8108b6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108b72:	693a      	ldr	r2, [r7, #16]
 8108b74:	fb02 f303 	mul.w	r3, r2, r3
 8108b78:	ee07 3a90 	vmov	s15, r3
 8108b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b80:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108b84:	697b      	ldr	r3, [r7, #20]
 8108b86:	2b00      	cmp	r3, #0
 8108b88:	f000 8111 	beq.w	8108dae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108b8c:	69bb      	ldr	r3, [r7, #24]
 8108b8e:	2b02      	cmp	r3, #2
 8108b90:	f000 8083 	beq.w	8108c9a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108b94:	69bb      	ldr	r3, [r7, #24]
 8108b96:	2b02      	cmp	r3, #2
 8108b98:	f200 80a1 	bhi.w	8108cde <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8108b9c:	69bb      	ldr	r3, [r7, #24]
 8108b9e:	2b00      	cmp	r3, #0
 8108ba0:	d003      	beq.n	8108baa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8108ba2:	69bb      	ldr	r3, [r7, #24]
 8108ba4:	2b01      	cmp	r3, #1
 8108ba6:	d056      	beq.n	8108c56 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8108ba8:	e099      	b.n	8108cde <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108baa:	4b88      	ldr	r3, [pc, #544]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108bac:	681b      	ldr	r3, [r3, #0]
 8108bae:	f003 0320 	and.w	r3, r3, #32
 8108bb2:	2b00      	cmp	r3, #0
 8108bb4:	d02d      	beq.n	8108c12 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108bb6:	4b85      	ldr	r3, [pc, #532]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108bb8:	681b      	ldr	r3, [r3, #0]
 8108bba:	08db      	lsrs	r3, r3, #3
 8108bbc:	f003 0303 	and.w	r3, r3, #3
 8108bc0:	4a83      	ldr	r2, [pc, #524]	@ (8108dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8108bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8108bc6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108bc8:	68bb      	ldr	r3, [r7, #8]
 8108bca:	ee07 3a90 	vmov	s15, r3
 8108bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108bd2:	697b      	ldr	r3, [r7, #20]
 8108bd4:	ee07 3a90 	vmov	s15, r3
 8108bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108be0:	4b7a      	ldr	r3, [pc, #488]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108be8:	ee07 3a90 	vmov	s15, r3
 8108bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108bf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8108bf4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8108dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c0c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108c10:	e087      	b.n	8108d22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108c12:	697b      	ldr	r3, [r7, #20]
 8108c14:	ee07 3a90 	vmov	s15, r3
 8108c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c1c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8108dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c24:	4b69      	ldr	r3, [pc, #420]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c2c:	ee07 3a90 	vmov	s15, r3
 8108c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8108c38:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8108dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c54:	e065      	b.n	8108d22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108c56:	697b      	ldr	r3, [r7, #20]
 8108c58:	ee07 3a90 	vmov	s15, r3
 8108c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c60:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8108ddc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c68:	4b58      	ldr	r3, [pc, #352]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c70:	ee07 3a90 	vmov	s15, r3
 8108c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8108c7c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8108dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c98:	e043      	b.n	8108d22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108c9a:	697b      	ldr	r3, [r7, #20]
 8108c9c:	ee07 3a90 	vmov	s15, r3
 8108ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ca4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8108de0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8108ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108cac:	4b47      	ldr	r3, [pc, #284]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108cb4:	ee07 3a90 	vmov	s15, r3
 8108cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108cbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8108cc0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8108dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108cc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108ccc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108cd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108cdc:	e021      	b.n	8108d22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108cde:	697b      	ldr	r3, [r7, #20]
 8108ce0:	ee07 3a90 	vmov	s15, r3
 8108ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ce8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8108dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108cf0:	4b36      	ldr	r3, [pc, #216]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108cf8:	ee07 3a90 	vmov	s15, r3
 8108cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8108d04:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8108dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108d20:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8108d22:	4b2a      	ldr	r3, [pc, #168]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108d26:	0a5b      	lsrs	r3, r3, #9
 8108d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d2c:	ee07 3a90 	vmov	s15, r3
 8108d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108d48:	ee17 2a90 	vmov	r2, s15
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108d50:	4b1e      	ldr	r3, [pc, #120]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108d54:	0c1b      	lsrs	r3, r3, #16
 8108d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d5a:	ee07 3a90 	vmov	s15, r3
 8108d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8108d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108d76:	ee17 2a90 	vmov	r2, s15
 8108d7a:	687b      	ldr	r3, [r7, #4]
 8108d7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108d7e:	4b13      	ldr	r3, [pc, #76]	@ (8108dcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108d82:	0e1b      	lsrs	r3, r3, #24
 8108d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d88:	ee07 3a90 	vmov	s15, r3
 8108d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108d94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8108d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108da4:	ee17 2a90 	vmov	r2, s15
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108dac:	e008      	b.n	8108dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108dae:	687b      	ldr	r3, [r7, #4]
 8108db0:	2200      	movs	r2, #0
 8108db2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108db4:	687b      	ldr	r3, [r7, #4]
 8108db6:	2200      	movs	r2, #0
 8108db8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108dba:	687b      	ldr	r3, [r7, #4]
 8108dbc:	2200      	movs	r2, #0
 8108dbe:	609a      	str	r2, [r3, #8]
}
 8108dc0:	bf00      	nop
 8108dc2:	3724      	adds	r7, #36	@ 0x24
 8108dc4:	46bd      	mov	sp, r7
 8108dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dca:	4770      	bx	lr
 8108dcc:	58024400 	.word	0x58024400
 8108dd0:	03d09000 	.word	0x03d09000
 8108dd4:	46000000 	.word	0x46000000
 8108dd8:	4c742400 	.word	0x4c742400
 8108ddc:	4a742400 	.word	0x4a742400
 8108de0:	4af42400 	.word	0x4af42400

08108de4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108de4:	b580      	push	{r7, lr}
 8108de6:	b084      	sub	sp, #16
 8108de8:	af00      	add	r7, sp, #0
 8108dea:	6078      	str	r0, [r7, #4]
 8108dec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108dee:	2300      	movs	r3, #0
 8108df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108df2:	4b54      	ldr	r3, [pc, #336]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108df6:	f003 0303 	and.w	r3, r3, #3
 8108dfa:	2b03      	cmp	r3, #3
 8108dfc:	d101      	bne.n	8108e02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108dfe:	2301      	movs	r3, #1
 8108e00:	e09b      	b.n	8108f3a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108e02:	4b50      	ldr	r3, [pc, #320]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e04:	681b      	ldr	r3, [r3, #0]
 8108e06:	4a4f      	ldr	r2, [pc, #316]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108e0e:	f7fa fbaf 	bl	8103570 <HAL_GetTick>
 8108e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108e14:	e008      	b.n	8108e28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108e16:	f7fa fbab 	bl	8103570 <HAL_GetTick>
 8108e1a:	4602      	mov	r2, r0
 8108e1c:	68bb      	ldr	r3, [r7, #8]
 8108e1e:	1ad3      	subs	r3, r2, r3
 8108e20:	2b02      	cmp	r3, #2
 8108e22:	d901      	bls.n	8108e28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108e24:	2303      	movs	r3, #3
 8108e26:	e088      	b.n	8108f3a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108e28:	4b46      	ldr	r3, [pc, #280]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e2a:	681b      	ldr	r3, [r3, #0]
 8108e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108e30:	2b00      	cmp	r3, #0
 8108e32:	d1f0      	bne.n	8108e16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108e34:	4b43      	ldr	r3, [pc, #268]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e38:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108e3c:	687b      	ldr	r3, [r7, #4]
 8108e3e:	681b      	ldr	r3, [r3, #0]
 8108e40:	031b      	lsls	r3, r3, #12
 8108e42:	4940      	ldr	r1, [pc, #256]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e44:	4313      	orrs	r3, r2
 8108e46:	628b      	str	r3, [r1, #40]	@ 0x28
 8108e48:	687b      	ldr	r3, [r7, #4]
 8108e4a:	685b      	ldr	r3, [r3, #4]
 8108e4c:	3b01      	subs	r3, #1
 8108e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108e52:	687b      	ldr	r3, [r7, #4]
 8108e54:	689b      	ldr	r3, [r3, #8]
 8108e56:	3b01      	subs	r3, #1
 8108e58:	025b      	lsls	r3, r3, #9
 8108e5a:	b29b      	uxth	r3, r3
 8108e5c:	431a      	orrs	r2, r3
 8108e5e:	687b      	ldr	r3, [r7, #4]
 8108e60:	68db      	ldr	r3, [r3, #12]
 8108e62:	3b01      	subs	r3, #1
 8108e64:	041b      	lsls	r3, r3, #16
 8108e66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108e6a:	431a      	orrs	r2, r3
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	691b      	ldr	r3, [r3, #16]
 8108e70:	3b01      	subs	r3, #1
 8108e72:	061b      	lsls	r3, r3, #24
 8108e74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108e78:	4932      	ldr	r1, [pc, #200]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e7a:	4313      	orrs	r3, r2
 8108e7c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108e7e:	4b31      	ldr	r3, [pc, #196]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108e86:	687b      	ldr	r3, [r7, #4]
 8108e88:	695b      	ldr	r3, [r3, #20]
 8108e8a:	492e      	ldr	r1, [pc, #184]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e8c:	4313      	orrs	r3, r2
 8108e8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108e90:	4b2c      	ldr	r3, [pc, #176]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e94:	f023 0220 	bic.w	r2, r3, #32
 8108e98:	687b      	ldr	r3, [r7, #4]
 8108e9a:	699b      	ldr	r3, [r3, #24]
 8108e9c:	4929      	ldr	r1, [pc, #164]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108e9e:	4313      	orrs	r3, r2
 8108ea0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108ea2:	4b28      	ldr	r3, [pc, #160]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ea6:	4a27      	ldr	r2, [pc, #156]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108ea8:	f023 0310 	bic.w	r3, r3, #16
 8108eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108eae:	4b25      	ldr	r3, [pc, #148]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108eb6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108eba:	687a      	ldr	r2, [r7, #4]
 8108ebc:	69d2      	ldr	r2, [r2, #28]
 8108ebe:	00d2      	lsls	r2, r2, #3
 8108ec0:	4920      	ldr	r1, [pc, #128]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108ec2:	4313      	orrs	r3, r2
 8108ec4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108eca:	4a1e      	ldr	r2, [pc, #120]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108ecc:	f043 0310 	orr.w	r3, r3, #16
 8108ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108ed2:	683b      	ldr	r3, [r7, #0]
 8108ed4:	2b00      	cmp	r3, #0
 8108ed6:	d106      	bne.n	8108ee6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108edc:	4a19      	ldr	r2, [pc, #100]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108ede:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108ee4:	e00f      	b.n	8108f06 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108ee6:	683b      	ldr	r3, [r7, #0]
 8108ee8:	2b01      	cmp	r3, #1
 8108eea:	d106      	bne.n	8108efa <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108eec:	4b15      	ldr	r3, [pc, #84]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ef0:	4a14      	ldr	r2, [pc, #80]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108ef8:	e005      	b.n	8108f06 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108efa:	4b12      	ldr	r3, [pc, #72]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108efe:	4a11      	ldr	r2, [pc, #68]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108f00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108f04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108f06:	4b0f      	ldr	r3, [pc, #60]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108f08:	681b      	ldr	r3, [r3, #0]
 8108f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108f0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f12:	f7fa fb2d 	bl	8103570 <HAL_GetTick>
 8108f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108f18:	e008      	b.n	8108f2c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108f1a:	f7fa fb29 	bl	8103570 <HAL_GetTick>
 8108f1e:	4602      	mov	r2, r0
 8108f20:	68bb      	ldr	r3, [r7, #8]
 8108f22:	1ad3      	subs	r3, r2, r3
 8108f24:	2b02      	cmp	r3, #2
 8108f26:	d901      	bls.n	8108f2c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108f28:	2303      	movs	r3, #3
 8108f2a:	e006      	b.n	8108f3a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108f2c:	4b05      	ldr	r3, [pc, #20]	@ (8108f44 <RCCEx_PLL2_Config+0x160>)
 8108f2e:	681b      	ldr	r3, [r3, #0]
 8108f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108f34:	2b00      	cmp	r3, #0
 8108f36:	d0f0      	beq.n	8108f1a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8108f3a:	4618      	mov	r0, r3
 8108f3c:	3710      	adds	r7, #16
 8108f3e:	46bd      	mov	sp, r7
 8108f40:	bd80      	pop	{r7, pc}
 8108f42:	bf00      	nop
 8108f44:	58024400 	.word	0x58024400

08108f48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108f48:	b580      	push	{r7, lr}
 8108f4a:	b084      	sub	sp, #16
 8108f4c:	af00      	add	r7, sp, #0
 8108f4e:	6078      	str	r0, [r7, #4]
 8108f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108f52:	2300      	movs	r3, #0
 8108f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108f56:	4b54      	ldr	r3, [pc, #336]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108f5a:	f003 0303 	and.w	r3, r3, #3
 8108f5e:	2b03      	cmp	r3, #3
 8108f60:	d101      	bne.n	8108f66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108f62:	2301      	movs	r3, #1
 8108f64:	e09b      	b.n	810909e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108f66:	4b50      	ldr	r3, [pc, #320]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108f68:	681b      	ldr	r3, [r3, #0]
 8108f6a:	4a4f      	ldr	r2, [pc, #316]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f72:	f7fa fafd 	bl	8103570 <HAL_GetTick>
 8108f76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108f78:	e008      	b.n	8108f8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108f7a:	f7fa faf9 	bl	8103570 <HAL_GetTick>
 8108f7e:	4602      	mov	r2, r0
 8108f80:	68bb      	ldr	r3, [r7, #8]
 8108f82:	1ad3      	subs	r3, r2, r3
 8108f84:	2b02      	cmp	r3, #2
 8108f86:	d901      	bls.n	8108f8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108f88:	2303      	movs	r3, #3
 8108f8a:	e088      	b.n	810909e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108f8c:	4b46      	ldr	r3, [pc, #280]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108f8e:	681b      	ldr	r3, [r3, #0]
 8108f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108f94:	2b00      	cmp	r3, #0
 8108f96:	d1f0      	bne.n	8108f7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108f98:	4b43      	ldr	r3, [pc, #268]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108f9c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	681b      	ldr	r3, [r3, #0]
 8108fa4:	051b      	lsls	r3, r3, #20
 8108fa6:	4940      	ldr	r1, [pc, #256]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108fa8:	4313      	orrs	r3, r2
 8108faa:	628b      	str	r3, [r1, #40]	@ 0x28
 8108fac:	687b      	ldr	r3, [r7, #4]
 8108fae:	685b      	ldr	r3, [r3, #4]
 8108fb0:	3b01      	subs	r3, #1
 8108fb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108fb6:	687b      	ldr	r3, [r7, #4]
 8108fb8:	689b      	ldr	r3, [r3, #8]
 8108fba:	3b01      	subs	r3, #1
 8108fbc:	025b      	lsls	r3, r3, #9
 8108fbe:	b29b      	uxth	r3, r3
 8108fc0:	431a      	orrs	r2, r3
 8108fc2:	687b      	ldr	r3, [r7, #4]
 8108fc4:	68db      	ldr	r3, [r3, #12]
 8108fc6:	3b01      	subs	r3, #1
 8108fc8:	041b      	lsls	r3, r3, #16
 8108fca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108fce:	431a      	orrs	r2, r3
 8108fd0:	687b      	ldr	r3, [r7, #4]
 8108fd2:	691b      	ldr	r3, [r3, #16]
 8108fd4:	3b01      	subs	r3, #1
 8108fd6:	061b      	lsls	r3, r3, #24
 8108fd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108fdc:	4932      	ldr	r1, [pc, #200]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108fde:	4313      	orrs	r3, r2
 8108fe0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108fe2:	4b31      	ldr	r3, [pc, #196]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108fe6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	695b      	ldr	r3, [r3, #20]
 8108fee:	492e      	ldr	r1, [pc, #184]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108ff0:	4313      	orrs	r3, r2
 8108ff2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108ff4:	4b2c      	ldr	r3, [pc, #176]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8108ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ff8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	699b      	ldr	r3, [r3, #24]
 8109000:	4929      	ldr	r1, [pc, #164]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109002:	4313      	orrs	r3, r2
 8109004:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8109006:	4b28      	ldr	r3, [pc, #160]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810900a:	4a27      	ldr	r2, [pc, #156]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 810900c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109010:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8109012:	4b25      	ldr	r3, [pc, #148]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109016:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810901a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810901e:	687a      	ldr	r2, [r7, #4]
 8109020:	69d2      	ldr	r2, [r2, #28]
 8109022:	00d2      	lsls	r2, r2, #3
 8109024:	4920      	ldr	r1, [pc, #128]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109026:	4313      	orrs	r3, r2
 8109028:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810902a:	4b1f      	ldr	r3, [pc, #124]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 810902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810902e:	4a1e      	ldr	r2, [pc, #120]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8109034:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8109036:	683b      	ldr	r3, [r7, #0]
 8109038:	2b00      	cmp	r3, #0
 810903a:	d106      	bne.n	810904a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810903c:	4b1a      	ldr	r3, [pc, #104]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 810903e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109040:	4a19      	ldr	r2, [pc, #100]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109042:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8109046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8109048:	e00f      	b.n	810906a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810904a:	683b      	ldr	r3, [r7, #0]
 810904c:	2b01      	cmp	r3, #1
 810904e:	d106      	bne.n	810905e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109050:	4b15      	ldr	r3, [pc, #84]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109054:	4a14      	ldr	r2, [pc, #80]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109056:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810905a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810905c:	e005      	b.n	810906a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810905e:	4b12      	ldr	r3, [pc, #72]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109062:	4a11      	ldr	r2, [pc, #68]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109064:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8109068:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810906a:	4b0f      	ldr	r3, [pc, #60]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 810906c:	681b      	ldr	r3, [r3, #0]
 810906e:	4a0e      	ldr	r2, [pc, #56]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8109074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109076:	f7fa fa7b 	bl	8103570 <HAL_GetTick>
 810907a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810907c:	e008      	b.n	8109090 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810907e:	f7fa fa77 	bl	8103570 <HAL_GetTick>
 8109082:	4602      	mov	r2, r0
 8109084:	68bb      	ldr	r3, [r7, #8]
 8109086:	1ad3      	subs	r3, r2, r3
 8109088:	2b02      	cmp	r3, #2
 810908a:	d901      	bls.n	8109090 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810908c:	2303      	movs	r3, #3
 810908e:	e006      	b.n	810909e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109090:	4b05      	ldr	r3, [pc, #20]	@ (81090a8 <RCCEx_PLL3_Config+0x160>)
 8109092:	681b      	ldr	r3, [r3, #0]
 8109094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109098:	2b00      	cmp	r3, #0
 810909a:	d0f0      	beq.n	810907e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810909c:	7bfb      	ldrb	r3, [r7, #15]
}
 810909e:	4618      	mov	r0, r3
 81090a0:	3710      	adds	r7, #16
 81090a2:	46bd      	mov	sp, r7
 81090a4:	bd80      	pop	{r7, pc}
 81090a6:	bf00      	nop
 81090a8:	58024400 	.word	0x58024400

081090ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81090ac:	b580      	push	{r7, lr}
 81090ae:	b082      	sub	sp, #8
 81090b0:	af00      	add	r7, sp, #0
 81090b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81090b4:	687b      	ldr	r3, [r7, #4]
 81090b6:	2b00      	cmp	r3, #0
 81090b8:	d101      	bne.n	81090be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81090ba:	2301      	movs	r3, #1
 81090bc:	e049      	b.n	8109152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81090be:	687b      	ldr	r3, [r7, #4]
 81090c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81090c4:	b2db      	uxtb	r3, r3
 81090c6:	2b00      	cmp	r3, #0
 81090c8:	d106      	bne.n	81090d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81090ca:	687b      	ldr	r3, [r7, #4]
 81090cc:	2200      	movs	r2, #0
 81090ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81090d2:	6878      	ldr	r0, [r7, #4]
 81090d4:	f7f9 ff06 	bl	8102ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	2202      	movs	r2, #2
 81090dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81090e0:	687b      	ldr	r3, [r7, #4]
 81090e2:	681a      	ldr	r2, [r3, #0]
 81090e4:	687b      	ldr	r3, [r7, #4]
 81090e6:	3304      	adds	r3, #4
 81090e8:	4619      	mov	r1, r3
 81090ea:	4610      	mov	r0, r2
 81090ec:	f000 fe00 	bl	8109cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81090f0:	687b      	ldr	r3, [r7, #4]
 81090f2:	2201      	movs	r2, #1
 81090f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81090f8:	687b      	ldr	r3, [r7, #4]
 81090fa:	2201      	movs	r2, #1
 81090fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109100:	687b      	ldr	r3, [r7, #4]
 8109102:	2201      	movs	r2, #1
 8109104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	2201      	movs	r2, #1
 810910c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109110:	687b      	ldr	r3, [r7, #4]
 8109112:	2201      	movs	r2, #1
 8109114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109118:	687b      	ldr	r3, [r7, #4]
 810911a:	2201      	movs	r2, #1
 810911c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109120:	687b      	ldr	r3, [r7, #4]
 8109122:	2201      	movs	r2, #1
 8109124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109128:	687b      	ldr	r3, [r7, #4]
 810912a:	2201      	movs	r2, #1
 810912c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109130:	687b      	ldr	r3, [r7, #4]
 8109132:	2201      	movs	r2, #1
 8109134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109138:	687b      	ldr	r3, [r7, #4]
 810913a:	2201      	movs	r2, #1
 810913c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109140:	687b      	ldr	r3, [r7, #4]
 8109142:	2201      	movs	r2, #1
 8109144:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109148:	687b      	ldr	r3, [r7, #4]
 810914a:	2201      	movs	r2, #1
 810914c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109150:	2300      	movs	r3, #0
}
 8109152:	4618      	mov	r0, r3
 8109154:	3708      	adds	r7, #8
 8109156:	46bd      	mov	sp, r7
 8109158:	bd80      	pop	{r7, pc}
	...

0810915c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810915c:	b480      	push	{r7}
 810915e:	b085      	sub	sp, #20
 8109160:	af00      	add	r7, sp, #0
 8109162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109164:	687b      	ldr	r3, [r7, #4]
 8109166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810916a:	b2db      	uxtb	r3, r3
 810916c:	2b01      	cmp	r3, #1
 810916e:	d001      	beq.n	8109174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109170:	2301      	movs	r3, #1
 8109172:	e054      	b.n	810921e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	2202      	movs	r2, #2
 8109178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	681b      	ldr	r3, [r3, #0]
 8109180:	68da      	ldr	r2, [r3, #12]
 8109182:	687b      	ldr	r3, [r7, #4]
 8109184:	681b      	ldr	r3, [r3, #0]
 8109186:	f042 0201 	orr.w	r2, r2, #1
 810918a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	681b      	ldr	r3, [r3, #0]
 8109190:	4a26      	ldr	r2, [pc, #152]	@ (810922c <HAL_TIM_Base_Start_IT+0xd0>)
 8109192:	4293      	cmp	r3, r2
 8109194:	d022      	beq.n	81091dc <HAL_TIM_Base_Start_IT+0x80>
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	681b      	ldr	r3, [r3, #0]
 810919a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810919e:	d01d      	beq.n	81091dc <HAL_TIM_Base_Start_IT+0x80>
 81091a0:	687b      	ldr	r3, [r7, #4]
 81091a2:	681b      	ldr	r3, [r3, #0]
 81091a4:	4a22      	ldr	r2, [pc, #136]	@ (8109230 <HAL_TIM_Base_Start_IT+0xd4>)
 81091a6:	4293      	cmp	r3, r2
 81091a8:	d018      	beq.n	81091dc <HAL_TIM_Base_Start_IT+0x80>
 81091aa:	687b      	ldr	r3, [r7, #4]
 81091ac:	681b      	ldr	r3, [r3, #0]
 81091ae:	4a21      	ldr	r2, [pc, #132]	@ (8109234 <HAL_TIM_Base_Start_IT+0xd8>)
 81091b0:	4293      	cmp	r3, r2
 81091b2:	d013      	beq.n	81091dc <HAL_TIM_Base_Start_IT+0x80>
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	681b      	ldr	r3, [r3, #0]
 81091b8:	4a1f      	ldr	r2, [pc, #124]	@ (8109238 <HAL_TIM_Base_Start_IT+0xdc>)
 81091ba:	4293      	cmp	r3, r2
 81091bc:	d00e      	beq.n	81091dc <HAL_TIM_Base_Start_IT+0x80>
 81091be:	687b      	ldr	r3, [r7, #4]
 81091c0:	681b      	ldr	r3, [r3, #0]
 81091c2:	4a1e      	ldr	r2, [pc, #120]	@ (810923c <HAL_TIM_Base_Start_IT+0xe0>)
 81091c4:	4293      	cmp	r3, r2
 81091c6:	d009      	beq.n	81091dc <HAL_TIM_Base_Start_IT+0x80>
 81091c8:	687b      	ldr	r3, [r7, #4]
 81091ca:	681b      	ldr	r3, [r3, #0]
 81091cc:	4a1c      	ldr	r2, [pc, #112]	@ (8109240 <HAL_TIM_Base_Start_IT+0xe4>)
 81091ce:	4293      	cmp	r3, r2
 81091d0:	d004      	beq.n	81091dc <HAL_TIM_Base_Start_IT+0x80>
 81091d2:	687b      	ldr	r3, [r7, #4]
 81091d4:	681b      	ldr	r3, [r3, #0]
 81091d6:	4a1b      	ldr	r2, [pc, #108]	@ (8109244 <HAL_TIM_Base_Start_IT+0xe8>)
 81091d8:	4293      	cmp	r3, r2
 81091da:	d115      	bne.n	8109208 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	681b      	ldr	r3, [r3, #0]
 81091e0:	689a      	ldr	r2, [r3, #8]
 81091e2:	4b19      	ldr	r3, [pc, #100]	@ (8109248 <HAL_TIM_Base_Start_IT+0xec>)
 81091e4:	4013      	ands	r3, r2
 81091e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81091e8:	68fb      	ldr	r3, [r7, #12]
 81091ea:	2b06      	cmp	r3, #6
 81091ec:	d015      	beq.n	810921a <HAL_TIM_Base_Start_IT+0xbe>
 81091ee:	68fb      	ldr	r3, [r7, #12]
 81091f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81091f4:	d011      	beq.n	810921a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	681b      	ldr	r3, [r3, #0]
 81091fa:	681a      	ldr	r2, [r3, #0]
 81091fc:	687b      	ldr	r3, [r7, #4]
 81091fe:	681b      	ldr	r3, [r3, #0]
 8109200:	f042 0201 	orr.w	r2, r2, #1
 8109204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109206:	e008      	b.n	810921a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109208:	687b      	ldr	r3, [r7, #4]
 810920a:	681b      	ldr	r3, [r3, #0]
 810920c:	681a      	ldr	r2, [r3, #0]
 810920e:	687b      	ldr	r3, [r7, #4]
 8109210:	681b      	ldr	r3, [r3, #0]
 8109212:	f042 0201 	orr.w	r2, r2, #1
 8109216:	601a      	str	r2, [r3, #0]
 8109218:	e000      	b.n	810921c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810921a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810921c:	2300      	movs	r3, #0
}
 810921e:	4618      	mov	r0, r3
 8109220:	3714      	adds	r7, #20
 8109222:	46bd      	mov	sp, r7
 8109224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109228:	4770      	bx	lr
 810922a:	bf00      	nop
 810922c:	40010000 	.word	0x40010000
 8109230:	40000400 	.word	0x40000400
 8109234:	40000800 	.word	0x40000800
 8109238:	40000c00 	.word	0x40000c00
 810923c:	40010400 	.word	0x40010400
 8109240:	40001800 	.word	0x40001800
 8109244:	40014000 	.word	0x40014000
 8109248:	00010007 	.word	0x00010007

0810924c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810924c:	b580      	push	{r7, lr}
 810924e:	b082      	sub	sp, #8
 8109250:	af00      	add	r7, sp, #0
 8109252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109254:	687b      	ldr	r3, [r7, #4]
 8109256:	2b00      	cmp	r3, #0
 8109258:	d101      	bne.n	810925e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810925a:	2301      	movs	r3, #1
 810925c:	e049      	b.n	81092f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810925e:	687b      	ldr	r3, [r7, #4]
 8109260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109264:	b2db      	uxtb	r3, r3
 8109266:	2b00      	cmp	r3, #0
 8109268:	d106      	bne.n	8109278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810926a:	687b      	ldr	r3, [r7, #4]
 810926c:	2200      	movs	r2, #0
 810926e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8109272:	6878      	ldr	r0, [r7, #4]
 8109274:	f000 f841 	bl	81092fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109278:	687b      	ldr	r3, [r7, #4]
 810927a:	2202      	movs	r2, #2
 810927c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	681a      	ldr	r2, [r3, #0]
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	3304      	adds	r3, #4
 8109288:	4619      	mov	r1, r3
 810928a:	4610      	mov	r0, r2
 810928c:	f000 fd30 	bl	8109cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	2201      	movs	r2, #1
 8109294:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	2201      	movs	r2, #1
 810929c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81092a0:	687b      	ldr	r3, [r7, #4]
 81092a2:	2201      	movs	r2, #1
 81092a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	2201      	movs	r2, #1
 81092ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81092b0:	687b      	ldr	r3, [r7, #4]
 81092b2:	2201      	movs	r2, #1
 81092b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81092b8:	687b      	ldr	r3, [r7, #4]
 81092ba:	2201      	movs	r2, #1
 81092bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81092c0:	687b      	ldr	r3, [r7, #4]
 81092c2:	2201      	movs	r2, #1
 81092c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	2201      	movs	r2, #1
 81092cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	2201      	movs	r2, #1
 81092d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	2201      	movs	r2, #1
 81092dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81092e0:	687b      	ldr	r3, [r7, #4]
 81092e2:	2201      	movs	r2, #1
 81092e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81092e8:	687b      	ldr	r3, [r7, #4]
 81092ea:	2201      	movs	r2, #1
 81092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81092f0:	2300      	movs	r3, #0
}
 81092f2:	4618      	mov	r0, r3
 81092f4:	3708      	adds	r7, #8
 81092f6:	46bd      	mov	sp, r7
 81092f8:	bd80      	pop	{r7, pc}

081092fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81092fa:	b480      	push	{r7}
 81092fc:	b083      	sub	sp, #12
 81092fe:	af00      	add	r7, sp, #0
 8109300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8109302:	bf00      	nop
 8109304:	370c      	adds	r7, #12
 8109306:	46bd      	mov	sp, r7
 8109308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810930c:	4770      	bx	lr
	...

08109310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8109310:	b580      	push	{r7, lr}
 8109312:	b084      	sub	sp, #16
 8109314:	af00      	add	r7, sp, #0
 8109316:	6078      	str	r0, [r7, #4]
 8109318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810931a:	683b      	ldr	r3, [r7, #0]
 810931c:	2b00      	cmp	r3, #0
 810931e:	d109      	bne.n	8109334 <HAL_TIM_PWM_Start+0x24>
 8109320:	687b      	ldr	r3, [r7, #4]
 8109322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8109326:	b2db      	uxtb	r3, r3
 8109328:	2b01      	cmp	r3, #1
 810932a:	bf14      	ite	ne
 810932c:	2301      	movne	r3, #1
 810932e:	2300      	moveq	r3, #0
 8109330:	b2db      	uxtb	r3, r3
 8109332:	e03c      	b.n	81093ae <HAL_TIM_PWM_Start+0x9e>
 8109334:	683b      	ldr	r3, [r7, #0]
 8109336:	2b04      	cmp	r3, #4
 8109338:	d109      	bne.n	810934e <HAL_TIM_PWM_Start+0x3e>
 810933a:	687b      	ldr	r3, [r7, #4]
 810933c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8109340:	b2db      	uxtb	r3, r3
 8109342:	2b01      	cmp	r3, #1
 8109344:	bf14      	ite	ne
 8109346:	2301      	movne	r3, #1
 8109348:	2300      	moveq	r3, #0
 810934a:	b2db      	uxtb	r3, r3
 810934c:	e02f      	b.n	81093ae <HAL_TIM_PWM_Start+0x9e>
 810934e:	683b      	ldr	r3, [r7, #0]
 8109350:	2b08      	cmp	r3, #8
 8109352:	d109      	bne.n	8109368 <HAL_TIM_PWM_Start+0x58>
 8109354:	687b      	ldr	r3, [r7, #4]
 8109356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810935a:	b2db      	uxtb	r3, r3
 810935c:	2b01      	cmp	r3, #1
 810935e:	bf14      	ite	ne
 8109360:	2301      	movne	r3, #1
 8109362:	2300      	moveq	r3, #0
 8109364:	b2db      	uxtb	r3, r3
 8109366:	e022      	b.n	81093ae <HAL_TIM_PWM_Start+0x9e>
 8109368:	683b      	ldr	r3, [r7, #0]
 810936a:	2b0c      	cmp	r3, #12
 810936c:	d109      	bne.n	8109382 <HAL_TIM_PWM_Start+0x72>
 810936e:	687b      	ldr	r3, [r7, #4]
 8109370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109374:	b2db      	uxtb	r3, r3
 8109376:	2b01      	cmp	r3, #1
 8109378:	bf14      	ite	ne
 810937a:	2301      	movne	r3, #1
 810937c:	2300      	moveq	r3, #0
 810937e:	b2db      	uxtb	r3, r3
 8109380:	e015      	b.n	81093ae <HAL_TIM_PWM_Start+0x9e>
 8109382:	683b      	ldr	r3, [r7, #0]
 8109384:	2b10      	cmp	r3, #16
 8109386:	d109      	bne.n	810939c <HAL_TIM_PWM_Start+0x8c>
 8109388:	687b      	ldr	r3, [r7, #4]
 810938a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810938e:	b2db      	uxtb	r3, r3
 8109390:	2b01      	cmp	r3, #1
 8109392:	bf14      	ite	ne
 8109394:	2301      	movne	r3, #1
 8109396:	2300      	moveq	r3, #0
 8109398:	b2db      	uxtb	r3, r3
 810939a:	e008      	b.n	81093ae <HAL_TIM_PWM_Start+0x9e>
 810939c:	687b      	ldr	r3, [r7, #4]
 810939e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 81093a2:	b2db      	uxtb	r3, r3
 81093a4:	2b01      	cmp	r3, #1
 81093a6:	bf14      	ite	ne
 81093a8:	2301      	movne	r3, #1
 81093aa:	2300      	moveq	r3, #0
 81093ac:	b2db      	uxtb	r3, r3
 81093ae:	2b00      	cmp	r3, #0
 81093b0:	d001      	beq.n	81093b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81093b2:	2301      	movs	r3, #1
 81093b4:	e0a1      	b.n	81094fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81093b6:	683b      	ldr	r3, [r7, #0]
 81093b8:	2b00      	cmp	r3, #0
 81093ba:	d104      	bne.n	81093c6 <HAL_TIM_PWM_Start+0xb6>
 81093bc:	687b      	ldr	r3, [r7, #4]
 81093be:	2202      	movs	r2, #2
 81093c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81093c4:	e023      	b.n	810940e <HAL_TIM_PWM_Start+0xfe>
 81093c6:	683b      	ldr	r3, [r7, #0]
 81093c8:	2b04      	cmp	r3, #4
 81093ca:	d104      	bne.n	81093d6 <HAL_TIM_PWM_Start+0xc6>
 81093cc:	687b      	ldr	r3, [r7, #4]
 81093ce:	2202      	movs	r2, #2
 81093d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81093d4:	e01b      	b.n	810940e <HAL_TIM_PWM_Start+0xfe>
 81093d6:	683b      	ldr	r3, [r7, #0]
 81093d8:	2b08      	cmp	r3, #8
 81093da:	d104      	bne.n	81093e6 <HAL_TIM_PWM_Start+0xd6>
 81093dc:	687b      	ldr	r3, [r7, #4]
 81093de:	2202      	movs	r2, #2
 81093e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81093e4:	e013      	b.n	810940e <HAL_TIM_PWM_Start+0xfe>
 81093e6:	683b      	ldr	r3, [r7, #0]
 81093e8:	2b0c      	cmp	r3, #12
 81093ea:	d104      	bne.n	81093f6 <HAL_TIM_PWM_Start+0xe6>
 81093ec:	687b      	ldr	r3, [r7, #4]
 81093ee:	2202      	movs	r2, #2
 81093f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81093f4:	e00b      	b.n	810940e <HAL_TIM_PWM_Start+0xfe>
 81093f6:	683b      	ldr	r3, [r7, #0]
 81093f8:	2b10      	cmp	r3, #16
 81093fa:	d104      	bne.n	8109406 <HAL_TIM_PWM_Start+0xf6>
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	2202      	movs	r2, #2
 8109400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109404:	e003      	b.n	810940e <HAL_TIM_PWM_Start+0xfe>
 8109406:	687b      	ldr	r3, [r7, #4]
 8109408:	2202      	movs	r2, #2
 810940a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810940e:	687b      	ldr	r3, [r7, #4]
 8109410:	681b      	ldr	r3, [r3, #0]
 8109412:	2201      	movs	r2, #1
 8109414:	6839      	ldr	r1, [r7, #0]
 8109416:	4618      	mov	r0, r3
 8109418:	f001 f882 	bl	810a520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810941c:	687b      	ldr	r3, [r7, #4]
 810941e:	681b      	ldr	r3, [r3, #0]
 8109420:	4a38      	ldr	r2, [pc, #224]	@ (8109504 <HAL_TIM_PWM_Start+0x1f4>)
 8109422:	4293      	cmp	r3, r2
 8109424:	d013      	beq.n	810944e <HAL_TIM_PWM_Start+0x13e>
 8109426:	687b      	ldr	r3, [r7, #4]
 8109428:	681b      	ldr	r3, [r3, #0]
 810942a:	4a37      	ldr	r2, [pc, #220]	@ (8109508 <HAL_TIM_PWM_Start+0x1f8>)
 810942c:	4293      	cmp	r3, r2
 810942e:	d00e      	beq.n	810944e <HAL_TIM_PWM_Start+0x13e>
 8109430:	687b      	ldr	r3, [r7, #4]
 8109432:	681b      	ldr	r3, [r3, #0]
 8109434:	4a35      	ldr	r2, [pc, #212]	@ (810950c <HAL_TIM_PWM_Start+0x1fc>)
 8109436:	4293      	cmp	r3, r2
 8109438:	d009      	beq.n	810944e <HAL_TIM_PWM_Start+0x13e>
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	681b      	ldr	r3, [r3, #0]
 810943e:	4a34      	ldr	r2, [pc, #208]	@ (8109510 <HAL_TIM_PWM_Start+0x200>)
 8109440:	4293      	cmp	r3, r2
 8109442:	d004      	beq.n	810944e <HAL_TIM_PWM_Start+0x13e>
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	681b      	ldr	r3, [r3, #0]
 8109448:	4a32      	ldr	r2, [pc, #200]	@ (8109514 <HAL_TIM_PWM_Start+0x204>)
 810944a:	4293      	cmp	r3, r2
 810944c:	d101      	bne.n	8109452 <HAL_TIM_PWM_Start+0x142>
 810944e:	2301      	movs	r3, #1
 8109450:	e000      	b.n	8109454 <HAL_TIM_PWM_Start+0x144>
 8109452:	2300      	movs	r3, #0
 8109454:	2b00      	cmp	r3, #0
 8109456:	d007      	beq.n	8109468 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	681b      	ldr	r3, [r3, #0]
 810945c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810945e:	687b      	ldr	r3, [r7, #4]
 8109460:	681b      	ldr	r3, [r3, #0]
 8109462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8109466:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109468:	687b      	ldr	r3, [r7, #4]
 810946a:	681b      	ldr	r3, [r3, #0]
 810946c:	4a25      	ldr	r2, [pc, #148]	@ (8109504 <HAL_TIM_PWM_Start+0x1f4>)
 810946e:	4293      	cmp	r3, r2
 8109470:	d022      	beq.n	81094b8 <HAL_TIM_PWM_Start+0x1a8>
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	681b      	ldr	r3, [r3, #0]
 8109476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810947a:	d01d      	beq.n	81094b8 <HAL_TIM_PWM_Start+0x1a8>
 810947c:	687b      	ldr	r3, [r7, #4]
 810947e:	681b      	ldr	r3, [r3, #0]
 8109480:	4a25      	ldr	r2, [pc, #148]	@ (8109518 <HAL_TIM_PWM_Start+0x208>)
 8109482:	4293      	cmp	r3, r2
 8109484:	d018      	beq.n	81094b8 <HAL_TIM_PWM_Start+0x1a8>
 8109486:	687b      	ldr	r3, [r7, #4]
 8109488:	681b      	ldr	r3, [r3, #0]
 810948a:	4a24      	ldr	r2, [pc, #144]	@ (810951c <HAL_TIM_PWM_Start+0x20c>)
 810948c:	4293      	cmp	r3, r2
 810948e:	d013      	beq.n	81094b8 <HAL_TIM_PWM_Start+0x1a8>
 8109490:	687b      	ldr	r3, [r7, #4]
 8109492:	681b      	ldr	r3, [r3, #0]
 8109494:	4a22      	ldr	r2, [pc, #136]	@ (8109520 <HAL_TIM_PWM_Start+0x210>)
 8109496:	4293      	cmp	r3, r2
 8109498:	d00e      	beq.n	81094b8 <HAL_TIM_PWM_Start+0x1a8>
 810949a:	687b      	ldr	r3, [r7, #4]
 810949c:	681b      	ldr	r3, [r3, #0]
 810949e:	4a1a      	ldr	r2, [pc, #104]	@ (8109508 <HAL_TIM_PWM_Start+0x1f8>)
 81094a0:	4293      	cmp	r3, r2
 81094a2:	d009      	beq.n	81094b8 <HAL_TIM_PWM_Start+0x1a8>
 81094a4:	687b      	ldr	r3, [r7, #4]
 81094a6:	681b      	ldr	r3, [r3, #0]
 81094a8:	4a1e      	ldr	r2, [pc, #120]	@ (8109524 <HAL_TIM_PWM_Start+0x214>)
 81094aa:	4293      	cmp	r3, r2
 81094ac:	d004      	beq.n	81094b8 <HAL_TIM_PWM_Start+0x1a8>
 81094ae:	687b      	ldr	r3, [r7, #4]
 81094b0:	681b      	ldr	r3, [r3, #0]
 81094b2:	4a16      	ldr	r2, [pc, #88]	@ (810950c <HAL_TIM_PWM_Start+0x1fc>)
 81094b4:	4293      	cmp	r3, r2
 81094b6:	d115      	bne.n	81094e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81094b8:	687b      	ldr	r3, [r7, #4]
 81094ba:	681b      	ldr	r3, [r3, #0]
 81094bc:	689a      	ldr	r2, [r3, #8]
 81094be:	4b1a      	ldr	r3, [pc, #104]	@ (8109528 <HAL_TIM_PWM_Start+0x218>)
 81094c0:	4013      	ands	r3, r2
 81094c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81094c4:	68fb      	ldr	r3, [r7, #12]
 81094c6:	2b06      	cmp	r3, #6
 81094c8:	d015      	beq.n	81094f6 <HAL_TIM_PWM_Start+0x1e6>
 81094ca:	68fb      	ldr	r3, [r7, #12]
 81094cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81094d0:	d011      	beq.n	81094f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81094d2:	687b      	ldr	r3, [r7, #4]
 81094d4:	681b      	ldr	r3, [r3, #0]
 81094d6:	681a      	ldr	r2, [r3, #0]
 81094d8:	687b      	ldr	r3, [r7, #4]
 81094da:	681b      	ldr	r3, [r3, #0]
 81094dc:	f042 0201 	orr.w	r2, r2, #1
 81094e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81094e2:	e008      	b.n	81094f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81094e4:	687b      	ldr	r3, [r7, #4]
 81094e6:	681b      	ldr	r3, [r3, #0]
 81094e8:	681a      	ldr	r2, [r3, #0]
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	681b      	ldr	r3, [r3, #0]
 81094ee:	f042 0201 	orr.w	r2, r2, #1
 81094f2:	601a      	str	r2, [r3, #0]
 81094f4:	e000      	b.n	81094f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81094f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81094f8:	2300      	movs	r3, #0
}
 81094fa:	4618      	mov	r0, r3
 81094fc:	3710      	adds	r7, #16
 81094fe:	46bd      	mov	sp, r7
 8109500:	bd80      	pop	{r7, pc}
 8109502:	bf00      	nop
 8109504:	40010000 	.word	0x40010000
 8109508:	40010400 	.word	0x40010400
 810950c:	40014000 	.word	0x40014000
 8109510:	40014400 	.word	0x40014400
 8109514:	40014800 	.word	0x40014800
 8109518:	40000400 	.word	0x40000400
 810951c:	40000800 	.word	0x40000800
 8109520:	40000c00 	.word	0x40000c00
 8109524:	40001800 	.word	0x40001800
 8109528:	00010007 	.word	0x00010007

0810952c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 810952c:	b580      	push	{r7, lr}
 810952e:	b086      	sub	sp, #24
 8109530:	af00      	add	r7, sp, #0
 8109532:	6078      	str	r0, [r7, #4]
 8109534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	2b00      	cmp	r3, #0
 810953a:	d101      	bne.n	8109540 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 810953c:	2301      	movs	r3, #1
 810953e:	e097      	b.n	8109670 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8109546:	b2db      	uxtb	r3, r3
 8109548:	2b00      	cmp	r3, #0
 810954a:	d106      	bne.n	810955a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810954c:	687b      	ldr	r3, [r7, #4]
 810954e:	2200      	movs	r2, #0
 8109550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8109554:	6878      	ldr	r0, [r7, #4]
 8109556:	f7f9 fd19 	bl	8102f8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	2202      	movs	r2, #2
 810955e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	681b      	ldr	r3, [r3, #0]
 8109566:	689b      	ldr	r3, [r3, #8]
 8109568:	687a      	ldr	r2, [r7, #4]
 810956a:	6812      	ldr	r2, [r2, #0]
 810956c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8109570:	f023 0307 	bic.w	r3, r3, #7
 8109574:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109576:	687b      	ldr	r3, [r7, #4]
 8109578:	681a      	ldr	r2, [r3, #0]
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	3304      	adds	r3, #4
 810957e:	4619      	mov	r1, r3
 8109580:	4610      	mov	r0, r2
 8109582:	f000 fbb5 	bl	8109cf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8109586:	687b      	ldr	r3, [r7, #4]
 8109588:	681b      	ldr	r3, [r3, #0]
 810958a:	689b      	ldr	r3, [r3, #8]
 810958c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810958e:	687b      	ldr	r3, [r7, #4]
 8109590:	681b      	ldr	r3, [r3, #0]
 8109592:	699b      	ldr	r3, [r3, #24]
 8109594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8109596:	687b      	ldr	r3, [r7, #4]
 8109598:	681b      	ldr	r3, [r3, #0]
 810959a:	6a1b      	ldr	r3, [r3, #32]
 810959c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810959e:	683b      	ldr	r3, [r7, #0]
 81095a0:	681b      	ldr	r3, [r3, #0]
 81095a2:	697a      	ldr	r2, [r7, #20]
 81095a4:	4313      	orrs	r3, r2
 81095a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 81095a8:	693b      	ldr	r3, [r7, #16]
 81095aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81095ae:	f023 0303 	bic.w	r3, r3, #3
 81095b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 81095b4:	683b      	ldr	r3, [r7, #0]
 81095b6:	689a      	ldr	r2, [r3, #8]
 81095b8:	683b      	ldr	r3, [r7, #0]
 81095ba:	699b      	ldr	r3, [r3, #24]
 81095bc:	021b      	lsls	r3, r3, #8
 81095be:	4313      	orrs	r3, r2
 81095c0:	693a      	ldr	r2, [r7, #16]
 81095c2:	4313      	orrs	r3, r2
 81095c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 81095c6:	693b      	ldr	r3, [r7, #16]
 81095c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 81095cc:	f023 030c 	bic.w	r3, r3, #12
 81095d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 81095d2:	693b      	ldr	r3, [r7, #16]
 81095d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 81095d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 81095dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81095de:	683b      	ldr	r3, [r7, #0]
 81095e0:	68da      	ldr	r2, [r3, #12]
 81095e2:	683b      	ldr	r3, [r7, #0]
 81095e4:	69db      	ldr	r3, [r3, #28]
 81095e6:	021b      	lsls	r3, r3, #8
 81095e8:	4313      	orrs	r3, r2
 81095ea:	693a      	ldr	r2, [r7, #16]
 81095ec:	4313      	orrs	r3, r2
 81095ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 81095f0:	683b      	ldr	r3, [r7, #0]
 81095f2:	691b      	ldr	r3, [r3, #16]
 81095f4:	011a      	lsls	r2, r3, #4
 81095f6:	683b      	ldr	r3, [r7, #0]
 81095f8:	6a1b      	ldr	r3, [r3, #32]
 81095fa:	031b      	lsls	r3, r3, #12
 81095fc:	4313      	orrs	r3, r2
 81095fe:	693a      	ldr	r2, [r7, #16]
 8109600:	4313      	orrs	r3, r2
 8109602:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8109604:	68fb      	ldr	r3, [r7, #12]
 8109606:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 810960a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 810960c:	68fb      	ldr	r3, [r7, #12]
 810960e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8109612:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8109614:	683b      	ldr	r3, [r7, #0]
 8109616:	685a      	ldr	r2, [r3, #4]
 8109618:	683b      	ldr	r3, [r7, #0]
 810961a:	695b      	ldr	r3, [r3, #20]
 810961c:	011b      	lsls	r3, r3, #4
 810961e:	4313      	orrs	r3, r2
 8109620:	68fa      	ldr	r2, [r7, #12]
 8109622:	4313      	orrs	r3, r2
 8109624:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	681b      	ldr	r3, [r3, #0]
 810962a:	697a      	ldr	r2, [r7, #20]
 810962c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	681b      	ldr	r3, [r3, #0]
 8109632:	693a      	ldr	r2, [r7, #16]
 8109634:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	681b      	ldr	r3, [r3, #0]
 810963a:	68fa      	ldr	r2, [r7, #12]
 810963c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810963e:	687b      	ldr	r3, [r7, #4]
 8109640:	2201      	movs	r2, #1
 8109642:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8109646:	687b      	ldr	r3, [r7, #4]
 8109648:	2201      	movs	r2, #1
 810964a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810964e:	687b      	ldr	r3, [r7, #4]
 8109650:	2201      	movs	r2, #1
 8109652:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	2201      	movs	r2, #1
 810965a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	2201      	movs	r2, #1
 8109662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109666:	687b      	ldr	r3, [r7, #4]
 8109668:	2201      	movs	r2, #1
 810966a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810966e:	2300      	movs	r3, #0
}
 8109670:	4618      	mov	r0, r3
 8109672:	3718      	adds	r7, #24
 8109674:	46bd      	mov	sp, r7
 8109676:	bd80      	pop	{r7, pc}

08109678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109678:	b580      	push	{r7, lr}
 810967a:	b084      	sub	sp, #16
 810967c:	af00      	add	r7, sp, #0
 810967e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8109680:	687b      	ldr	r3, [r7, #4]
 8109682:	681b      	ldr	r3, [r3, #0]
 8109684:	68db      	ldr	r3, [r3, #12]
 8109686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8109688:	687b      	ldr	r3, [r7, #4]
 810968a:	681b      	ldr	r3, [r3, #0]
 810968c:	691b      	ldr	r3, [r3, #16]
 810968e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8109690:	68bb      	ldr	r3, [r7, #8]
 8109692:	f003 0302 	and.w	r3, r3, #2
 8109696:	2b00      	cmp	r3, #0
 8109698:	d020      	beq.n	81096dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810969a:	68fb      	ldr	r3, [r7, #12]
 810969c:	f003 0302 	and.w	r3, r3, #2
 81096a0:	2b00      	cmp	r3, #0
 81096a2:	d01b      	beq.n	81096dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	681b      	ldr	r3, [r3, #0]
 81096a8:	f06f 0202 	mvn.w	r2, #2
 81096ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81096ae:	687b      	ldr	r3, [r7, #4]
 81096b0:	2201      	movs	r2, #1
 81096b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81096b4:	687b      	ldr	r3, [r7, #4]
 81096b6:	681b      	ldr	r3, [r3, #0]
 81096b8:	699b      	ldr	r3, [r3, #24]
 81096ba:	f003 0303 	and.w	r3, r3, #3
 81096be:	2b00      	cmp	r3, #0
 81096c0:	d003      	beq.n	81096ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81096c2:	6878      	ldr	r0, [r7, #4]
 81096c4:	f000 faf6 	bl	8109cb4 <HAL_TIM_IC_CaptureCallback>
 81096c8:	e005      	b.n	81096d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81096ca:	6878      	ldr	r0, [r7, #4]
 81096cc:	f000 fae8 	bl	8109ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81096d0:	6878      	ldr	r0, [r7, #4]
 81096d2:	f000 faf9 	bl	8109cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81096d6:	687b      	ldr	r3, [r7, #4]
 81096d8:	2200      	movs	r2, #0
 81096da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81096dc:	68bb      	ldr	r3, [r7, #8]
 81096de:	f003 0304 	and.w	r3, r3, #4
 81096e2:	2b00      	cmp	r3, #0
 81096e4:	d020      	beq.n	8109728 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81096e6:	68fb      	ldr	r3, [r7, #12]
 81096e8:	f003 0304 	and.w	r3, r3, #4
 81096ec:	2b00      	cmp	r3, #0
 81096ee:	d01b      	beq.n	8109728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81096f0:	687b      	ldr	r3, [r7, #4]
 81096f2:	681b      	ldr	r3, [r3, #0]
 81096f4:	f06f 0204 	mvn.w	r2, #4
 81096f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81096fa:	687b      	ldr	r3, [r7, #4]
 81096fc:	2202      	movs	r2, #2
 81096fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8109700:	687b      	ldr	r3, [r7, #4]
 8109702:	681b      	ldr	r3, [r3, #0]
 8109704:	699b      	ldr	r3, [r3, #24]
 8109706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810970a:	2b00      	cmp	r3, #0
 810970c:	d003      	beq.n	8109716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810970e:	6878      	ldr	r0, [r7, #4]
 8109710:	f000 fad0 	bl	8109cb4 <HAL_TIM_IC_CaptureCallback>
 8109714:	e005      	b.n	8109722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109716:	6878      	ldr	r0, [r7, #4]
 8109718:	f000 fac2 	bl	8109ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810971c:	6878      	ldr	r0, [r7, #4]
 810971e:	f000 fad3 	bl	8109cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109722:	687b      	ldr	r3, [r7, #4]
 8109724:	2200      	movs	r2, #0
 8109726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8109728:	68bb      	ldr	r3, [r7, #8]
 810972a:	f003 0308 	and.w	r3, r3, #8
 810972e:	2b00      	cmp	r3, #0
 8109730:	d020      	beq.n	8109774 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8109732:	68fb      	ldr	r3, [r7, #12]
 8109734:	f003 0308 	and.w	r3, r3, #8
 8109738:	2b00      	cmp	r3, #0
 810973a:	d01b      	beq.n	8109774 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810973c:	687b      	ldr	r3, [r7, #4]
 810973e:	681b      	ldr	r3, [r3, #0]
 8109740:	f06f 0208 	mvn.w	r2, #8
 8109744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8109746:	687b      	ldr	r3, [r7, #4]
 8109748:	2204      	movs	r2, #4
 810974a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810974c:	687b      	ldr	r3, [r7, #4]
 810974e:	681b      	ldr	r3, [r3, #0]
 8109750:	69db      	ldr	r3, [r3, #28]
 8109752:	f003 0303 	and.w	r3, r3, #3
 8109756:	2b00      	cmp	r3, #0
 8109758:	d003      	beq.n	8109762 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810975a:	6878      	ldr	r0, [r7, #4]
 810975c:	f000 faaa 	bl	8109cb4 <HAL_TIM_IC_CaptureCallback>
 8109760:	e005      	b.n	810976e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109762:	6878      	ldr	r0, [r7, #4]
 8109764:	f000 fa9c 	bl	8109ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109768:	6878      	ldr	r0, [r7, #4]
 810976a:	f000 faad 	bl	8109cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810976e:	687b      	ldr	r3, [r7, #4]
 8109770:	2200      	movs	r2, #0
 8109772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8109774:	68bb      	ldr	r3, [r7, #8]
 8109776:	f003 0310 	and.w	r3, r3, #16
 810977a:	2b00      	cmp	r3, #0
 810977c:	d020      	beq.n	81097c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810977e:	68fb      	ldr	r3, [r7, #12]
 8109780:	f003 0310 	and.w	r3, r3, #16
 8109784:	2b00      	cmp	r3, #0
 8109786:	d01b      	beq.n	81097c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8109788:	687b      	ldr	r3, [r7, #4]
 810978a:	681b      	ldr	r3, [r3, #0]
 810978c:	f06f 0210 	mvn.w	r2, #16
 8109790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8109792:	687b      	ldr	r3, [r7, #4]
 8109794:	2208      	movs	r2, #8
 8109796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	681b      	ldr	r3, [r3, #0]
 810979c:	69db      	ldr	r3, [r3, #28]
 810979e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81097a2:	2b00      	cmp	r3, #0
 81097a4:	d003      	beq.n	81097ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81097a6:	6878      	ldr	r0, [r7, #4]
 81097a8:	f000 fa84 	bl	8109cb4 <HAL_TIM_IC_CaptureCallback>
 81097ac:	e005      	b.n	81097ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81097ae:	6878      	ldr	r0, [r7, #4]
 81097b0:	f000 fa76 	bl	8109ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81097b4:	6878      	ldr	r0, [r7, #4]
 81097b6:	f000 fa87 	bl	8109cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81097ba:	687b      	ldr	r3, [r7, #4]
 81097bc:	2200      	movs	r2, #0
 81097be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81097c0:	68bb      	ldr	r3, [r7, #8]
 81097c2:	f003 0301 	and.w	r3, r3, #1
 81097c6:	2b00      	cmp	r3, #0
 81097c8:	d00c      	beq.n	81097e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81097ca:	68fb      	ldr	r3, [r7, #12]
 81097cc:	f003 0301 	and.w	r3, r3, #1
 81097d0:	2b00      	cmp	r3, #0
 81097d2:	d007      	beq.n	81097e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81097d4:	687b      	ldr	r3, [r7, #4]
 81097d6:	681b      	ldr	r3, [r3, #0]
 81097d8:	f06f 0201 	mvn.w	r2, #1
 81097dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81097de:	6878      	ldr	r0, [r7, #4]
 81097e0:	f7f9 fa30 	bl	8102c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81097e4:	68bb      	ldr	r3, [r7, #8]
 81097e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81097ea:	2b00      	cmp	r3, #0
 81097ec:	d104      	bne.n	81097f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 81097ee:	68bb      	ldr	r3, [r7, #8]
 81097f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81097f4:	2b00      	cmp	r3, #0
 81097f6:	d00c      	beq.n	8109812 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81097f8:	68fb      	ldr	r3, [r7, #12]
 81097fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81097fe:	2b00      	cmp	r3, #0
 8109800:	d007      	beq.n	8109812 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8109802:	687b      	ldr	r3, [r7, #4]
 8109804:	681b      	ldr	r3, [r3, #0]
 8109806:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810980a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810980c:	6878      	ldr	r0, [r7, #4]
 810980e:	f000 ffc3 	bl	810a798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8109812:	68bb      	ldr	r3, [r7, #8]
 8109814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109818:	2b00      	cmp	r3, #0
 810981a:	d00c      	beq.n	8109836 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810981c:	68fb      	ldr	r3, [r7, #12]
 810981e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109822:	2b00      	cmp	r3, #0
 8109824:	d007      	beq.n	8109836 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8109826:	687b      	ldr	r3, [r7, #4]
 8109828:	681b      	ldr	r3, [r3, #0]
 810982a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810982e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8109830:	6878      	ldr	r0, [r7, #4]
 8109832:	f000 ffbb 	bl	810a7ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8109836:	68bb      	ldr	r3, [r7, #8]
 8109838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810983c:	2b00      	cmp	r3, #0
 810983e:	d00c      	beq.n	810985a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8109840:	68fb      	ldr	r3, [r7, #12]
 8109842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109846:	2b00      	cmp	r3, #0
 8109848:	d007      	beq.n	810985a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	681b      	ldr	r3, [r3, #0]
 810984e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8109852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109854:	6878      	ldr	r0, [r7, #4]
 8109856:	f000 fa41 	bl	8109cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810985a:	68bb      	ldr	r3, [r7, #8]
 810985c:	f003 0320 	and.w	r3, r3, #32
 8109860:	2b00      	cmp	r3, #0
 8109862:	d00c      	beq.n	810987e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8109864:	68fb      	ldr	r3, [r7, #12]
 8109866:	f003 0320 	and.w	r3, r3, #32
 810986a:	2b00      	cmp	r3, #0
 810986c:	d007      	beq.n	810987e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810986e:	687b      	ldr	r3, [r7, #4]
 8109870:	681b      	ldr	r3, [r3, #0]
 8109872:	f06f 0220 	mvn.w	r2, #32
 8109876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8109878:	6878      	ldr	r0, [r7, #4]
 810987a:	f000 ff83 	bl	810a784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810987e:	bf00      	nop
 8109880:	3710      	adds	r7, #16
 8109882:	46bd      	mov	sp, r7
 8109884:	bd80      	pop	{r7, pc}
	...

08109888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8109888:	b580      	push	{r7, lr}
 810988a:	b086      	sub	sp, #24
 810988c:	af00      	add	r7, sp, #0
 810988e:	60f8      	str	r0, [r7, #12]
 8109890:	60b9      	str	r1, [r7, #8]
 8109892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109894:	2300      	movs	r3, #0
 8109896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8109898:	68fb      	ldr	r3, [r7, #12]
 810989a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810989e:	2b01      	cmp	r3, #1
 81098a0:	d101      	bne.n	81098a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 81098a2:	2302      	movs	r3, #2
 81098a4:	e0ff      	b.n	8109aa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 81098a6:	68fb      	ldr	r3, [r7, #12]
 81098a8:	2201      	movs	r2, #1
 81098aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 81098ae:	687b      	ldr	r3, [r7, #4]
 81098b0:	2b14      	cmp	r3, #20
 81098b2:	f200 80f0 	bhi.w	8109a96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 81098b6:	a201      	add	r2, pc, #4	@ (adr r2, 81098bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 81098b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81098bc:	08109911 	.word	0x08109911
 81098c0:	08109a97 	.word	0x08109a97
 81098c4:	08109a97 	.word	0x08109a97
 81098c8:	08109a97 	.word	0x08109a97
 81098cc:	08109951 	.word	0x08109951
 81098d0:	08109a97 	.word	0x08109a97
 81098d4:	08109a97 	.word	0x08109a97
 81098d8:	08109a97 	.word	0x08109a97
 81098dc:	08109993 	.word	0x08109993
 81098e0:	08109a97 	.word	0x08109a97
 81098e4:	08109a97 	.word	0x08109a97
 81098e8:	08109a97 	.word	0x08109a97
 81098ec:	081099d3 	.word	0x081099d3
 81098f0:	08109a97 	.word	0x08109a97
 81098f4:	08109a97 	.word	0x08109a97
 81098f8:	08109a97 	.word	0x08109a97
 81098fc:	08109a15 	.word	0x08109a15
 8109900:	08109a97 	.word	0x08109a97
 8109904:	08109a97 	.word	0x08109a97
 8109908:	08109a97 	.word	0x08109a97
 810990c:	08109a55 	.word	0x08109a55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8109910:	68fb      	ldr	r3, [r7, #12]
 8109912:	681b      	ldr	r3, [r3, #0]
 8109914:	68b9      	ldr	r1, [r7, #8]
 8109916:	4618      	mov	r0, r3
 8109918:	f000 fa90 	bl	8109e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810991c:	68fb      	ldr	r3, [r7, #12]
 810991e:	681b      	ldr	r3, [r3, #0]
 8109920:	699a      	ldr	r2, [r3, #24]
 8109922:	68fb      	ldr	r3, [r7, #12]
 8109924:	681b      	ldr	r3, [r3, #0]
 8109926:	f042 0208 	orr.w	r2, r2, #8
 810992a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810992c:	68fb      	ldr	r3, [r7, #12]
 810992e:	681b      	ldr	r3, [r3, #0]
 8109930:	699a      	ldr	r2, [r3, #24]
 8109932:	68fb      	ldr	r3, [r7, #12]
 8109934:	681b      	ldr	r3, [r3, #0]
 8109936:	f022 0204 	bic.w	r2, r2, #4
 810993a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810993c:	68fb      	ldr	r3, [r7, #12]
 810993e:	681b      	ldr	r3, [r3, #0]
 8109940:	6999      	ldr	r1, [r3, #24]
 8109942:	68bb      	ldr	r3, [r7, #8]
 8109944:	691a      	ldr	r2, [r3, #16]
 8109946:	68fb      	ldr	r3, [r7, #12]
 8109948:	681b      	ldr	r3, [r3, #0]
 810994a:	430a      	orrs	r2, r1
 810994c:	619a      	str	r2, [r3, #24]
      break;
 810994e:	e0a5      	b.n	8109a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8109950:	68fb      	ldr	r3, [r7, #12]
 8109952:	681b      	ldr	r3, [r3, #0]
 8109954:	68b9      	ldr	r1, [r7, #8]
 8109956:	4618      	mov	r0, r3
 8109958:	f000 fb00 	bl	8109f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810995c:	68fb      	ldr	r3, [r7, #12]
 810995e:	681b      	ldr	r3, [r3, #0]
 8109960:	699a      	ldr	r2, [r3, #24]
 8109962:	68fb      	ldr	r3, [r7, #12]
 8109964:	681b      	ldr	r3, [r3, #0]
 8109966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810996a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810996c:	68fb      	ldr	r3, [r7, #12]
 810996e:	681b      	ldr	r3, [r3, #0]
 8109970:	699a      	ldr	r2, [r3, #24]
 8109972:	68fb      	ldr	r3, [r7, #12]
 8109974:	681b      	ldr	r3, [r3, #0]
 8109976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810997a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810997c:	68fb      	ldr	r3, [r7, #12]
 810997e:	681b      	ldr	r3, [r3, #0]
 8109980:	6999      	ldr	r1, [r3, #24]
 8109982:	68bb      	ldr	r3, [r7, #8]
 8109984:	691b      	ldr	r3, [r3, #16]
 8109986:	021a      	lsls	r2, r3, #8
 8109988:	68fb      	ldr	r3, [r7, #12]
 810998a:	681b      	ldr	r3, [r3, #0]
 810998c:	430a      	orrs	r2, r1
 810998e:	619a      	str	r2, [r3, #24]
      break;
 8109990:	e084      	b.n	8109a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8109992:	68fb      	ldr	r3, [r7, #12]
 8109994:	681b      	ldr	r3, [r3, #0]
 8109996:	68b9      	ldr	r1, [r7, #8]
 8109998:	4618      	mov	r0, r3
 810999a:	f000 fb69 	bl	810a070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810999e:	68fb      	ldr	r3, [r7, #12]
 81099a0:	681b      	ldr	r3, [r3, #0]
 81099a2:	69da      	ldr	r2, [r3, #28]
 81099a4:	68fb      	ldr	r3, [r7, #12]
 81099a6:	681b      	ldr	r3, [r3, #0]
 81099a8:	f042 0208 	orr.w	r2, r2, #8
 81099ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81099ae:	68fb      	ldr	r3, [r7, #12]
 81099b0:	681b      	ldr	r3, [r3, #0]
 81099b2:	69da      	ldr	r2, [r3, #28]
 81099b4:	68fb      	ldr	r3, [r7, #12]
 81099b6:	681b      	ldr	r3, [r3, #0]
 81099b8:	f022 0204 	bic.w	r2, r2, #4
 81099bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81099be:	68fb      	ldr	r3, [r7, #12]
 81099c0:	681b      	ldr	r3, [r3, #0]
 81099c2:	69d9      	ldr	r1, [r3, #28]
 81099c4:	68bb      	ldr	r3, [r7, #8]
 81099c6:	691a      	ldr	r2, [r3, #16]
 81099c8:	68fb      	ldr	r3, [r7, #12]
 81099ca:	681b      	ldr	r3, [r3, #0]
 81099cc:	430a      	orrs	r2, r1
 81099ce:	61da      	str	r2, [r3, #28]
      break;
 81099d0:	e064      	b.n	8109a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81099d2:	68fb      	ldr	r3, [r7, #12]
 81099d4:	681b      	ldr	r3, [r3, #0]
 81099d6:	68b9      	ldr	r1, [r7, #8]
 81099d8:	4618      	mov	r0, r3
 81099da:	f000 fbd1 	bl	810a180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81099de:	68fb      	ldr	r3, [r7, #12]
 81099e0:	681b      	ldr	r3, [r3, #0]
 81099e2:	69da      	ldr	r2, [r3, #28]
 81099e4:	68fb      	ldr	r3, [r7, #12]
 81099e6:	681b      	ldr	r3, [r3, #0]
 81099e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81099ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81099ee:	68fb      	ldr	r3, [r7, #12]
 81099f0:	681b      	ldr	r3, [r3, #0]
 81099f2:	69da      	ldr	r2, [r3, #28]
 81099f4:	68fb      	ldr	r3, [r7, #12]
 81099f6:	681b      	ldr	r3, [r3, #0]
 81099f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81099fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81099fe:	68fb      	ldr	r3, [r7, #12]
 8109a00:	681b      	ldr	r3, [r3, #0]
 8109a02:	69d9      	ldr	r1, [r3, #28]
 8109a04:	68bb      	ldr	r3, [r7, #8]
 8109a06:	691b      	ldr	r3, [r3, #16]
 8109a08:	021a      	lsls	r2, r3, #8
 8109a0a:	68fb      	ldr	r3, [r7, #12]
 8109a0c:	681b      	ldr	r3, [r3, #0]
 8109a0e:	430a      	orrs	r2, r1
 8109a10:	61da      	str	r2, [r3, #28]
      break;
 8109a12:	e043      	b.n	8109a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8109a14:	68fb      	ldr	r3, [r7, #12]
 8109a16:	681b      	ldr	r3, [r3, #0]
 8109a18:	68b9      	ldr	r1, [r7, #8]
 8109a1a:	4618      	mov	r0, r3
 8109a1c:	f000 fc1a 	bl	810a254 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8109a20:	68fb      	ldr	r3, [r7, #12]
 8109a22:	681b      	ldr	r3, [r3, #0]
 8109a24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109a26:	68fb      	ldr	r3, [r7, #12]
 8109a28:	681b      	ldr	r3, [r3, #0]
 8109a2a:	f042 0208 	orr.w	r2, r2, #8
 8109a2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8109a30:	68fb      	ldr	r3, [r7, #12]
 8109a32:	681b      	ldr	r3, [r3, #0]
 8109a34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109a36:	68fb      	ldr	r3, [r7, #12]
 8109a38:	681b      	ldr	r3, [r3, #0]
 8109a3a:	f022 0204 	bic.w	r2, r2, #4
 8109a3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8109a40:	68fb      	ldr	r3, [r7, #12]
 8109a42:	681b      	ldr	r3, [r3, #0]
 8109a44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8109a46:	68bb      	ldr	r3, [r7, #8]
 8109a48:	691a      	ldr	r2, [r3, #16]
 8109a4a:	68fb      	ldr	r3, [r7, #12]
 8109a4c:	681b      	ldr	r3, [r3, #0]
 8109a4e:	430a      	orrs	r2, r1
 8109a50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8109a52:	e023      	b.n	8109a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8109a54:	68fb      	ldr	r3, [r7, #12]
 8109a56:	681b      	ldr	r3, [r3, #0]
 8109a58:	68b9      	ldr	r1, [r7, #8]
 8109a5a:	4618      	mov	r0, r3
 8109a5c:	f000 fc5e 	bl	810a31c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8109a60:	68fb      	ldr	r3, [r7, #12]
 8109a62:	681b      	ldr	r3, [r3, #0]
 8109a64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109a66:	68fb      	ldr	r3, [r7, #12]
 8109a68:	681b      	ldr	r3, [r3, #0]
 8109a6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8109a6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8109a70:	68fb      	ldr	r3, [r7, #12]
 8109a72:	681b      	ldr	r3, [r3, #0]
 8109a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8109a76:	68fb      	ldr	r3, [r7, #12]
 8109a78:	681b      	ldr	r3, [r3, #0]
 8109a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8109a7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8109a80:	68fb      	ldr	r3, [r7, #12]
 8109a82:	681b      	ldr	r3, [r3, #0]
 8109a84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8109a86:	68bb      	ldr	r3, [r7, #8]
 8109a88:	691b      	ldr	r3, [r3, #16]
 8109a8a:	021a      	lsls	r2, r3, #8
 8109a8c:	68fb      	ldr	r3, [r7, #12]
 8109a8e:	681b      	ldr	r3, [r3, #0]
 8109a90:	430a      	orrs	r2, r1
 8109a92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8109a94:	e002      	b.n	8109a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8109a96:	2301      	movs	r3, #1
 8109a98:	75fb      	strb	r3, [r7, #23]
      break;
 8109a9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8109a9c:	68fb      	ldr	r3, [r7, #12]
 8109a9e:	2200      	movs	r2, #0
 8109aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8109aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8109aa6:	4618      	mov	r0, r3
 8109aa8:	3718      	adds	r7, #24
 8109aaa:	46bd      	mov	sp, r7
 8109aac:	bd80      	pop	{r7, pc}
 8109aae:	bf00      	nop

08109ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8109ab0:	b580      	push	{r7, lr}
 8109ab2:	b084      	sub	sp, #16
 8109ab4:	af00      	add	r7, sp, #0
 8109ab6:	6078      	str	r0, [r7, #4]
 8109ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8109aba:	2300      	movs	r3, #0
 8109abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8109abe:	687b      	ldr	r3, [r7, #4]
 8109ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8109ac4:	2b01      	cmp	r3, #1
 8109ac6:	d101      	bne.n	8109acc <HAL_TIM_ConfigClockSource+0x1c>
 8109ac8:	2302      	movs	r3, #2
 8109aca:	e0de      	b.n	8109c8a <HAL_TIM_ConfigClockSource+0x1da>
 8109acc:	687b      	ldr	r3, [r7, #4]
 8109ace:	2201      	movs	r2, #1
 8109ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8109ad4:	687b      	ldr	r3, [r7, #4]
 8109ad6:	2202      	movs	r2, #2
 8109ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8109adc:	687b      	ldr	r3, [r7, #4]
 8109ade:	681b      	ldr	r3, [r3, #0]
 8109ae0:	689b      	ldr	r3, [r3, #8]
 8109ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8109ae4:	68bb      	ldr	r3, [r7, #8]
 8109ae6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8109aea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8109aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8109af0:	68bb      	ldr	r3, [r7, #8]
 8109af2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8109af6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8109af8:	687b      	ldr	r3, [r7, #4]
 8109afa:	681b      	ldr	r3, [r3, #0]
 8109afc:	68ba      	ldr	r2, [r7, #8]
 8109afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8109b00:	683b      	ldr	r3, [r7, #0]
 8109b02:	681b      	ldr	r3, [r3, #0]
 8109b04:	4a63      	ldr	r2, [pc, #396]	@ (8109c94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8109b06:	4293      	cmp	r3, r2
 8109b08:	f000 80a9 	beq.w	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109b0c:	4a61      	ldr	r2, [pc, #388]	@ (8109c94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8109b0e:	4293      	cmp	r3, r2
 8109b10:	f200 80ae 	bhi.w	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b14:	4a60      	ldr	r2, [pc, #384]	@ (8109c98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8109b16:	4293      	cmp	r3, r2
 8109b18:	f000 80a1 	beq.w	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8109c98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8109b1e:	4293      	cmp	r3, r2
 8109b20:	f200 80a6 	bhi.w	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b24:	4a5d      	ldr	r2, [pc, #372]	@ (8109c9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8109b26:	4293      	cmp	r3, r2
 8109b28:	f000 8099 	beq.w	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109b2c:	4a5b      	ldr	r2, [pc, #364]	@ (8109c9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8109b2e:	4293      	cmp	r3, r2
 8109b30:	f200 809e 	bhi.w	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8109b38:	f000 8091 	beq.w	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109b3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8109b40:	f200 8096 	bhi.w	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109b48:	f000 8089 	beq.w	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109b4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109b50:	f200 808e 	bhi.w	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8109b58:	d03e      	beq.n	8109bd8 <HAL_TIM_ConfigClockSource+0x128>
 8109b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8109b5e:	f200 8087 	bhi.w	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109b66:	f000 8086 	beq.w	8109c76 <HAL_TIM_ConfigClockSource+0x1c6>
 8109b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109b6e:	d87f      	bhi.n	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b70:	2b70      	cmp	r3, #112	@ 0x70
 8109b72:	d01a      	beq.n	8109baa <HAL_TIM_ConfigClockSource+0xfa>
 8109b74:	2b70      	cmp	r3, #112	@ 0x70
 8109b76:	d87b      	bhi.n	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b78:	2b60      	cmp	r3, #96	@ 0x60
 8109b7a:	d050      	beq.n	8109c1e <HAL_TIM_ConfigClockSource+0x16e>
 8109b7c:	2b60      	cmp	r3, #96	@ 0x60
 8109b7e:	d877      	bhi.n	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b80:	2b50      	cmp	r3, #80	@ 0x50
 8109b82:	d03c      	beq.n	8109bfe <HAL_TIM_ConfigClockSource+0x14e>
 8109b84:	2b50      	cmp	r3, #80	@ 0x50
 8109b86:	d873      	bhi.n	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b88:	2b40      	cmp	r3, #64	@ 0x40
 8109b8a:	d058      	beq.n	8109c3e <HAL_TIM_ConfigClockSource+0x18e>
 8109b8c:	2b40      	cmp	r3, #64	@ 0x40
 8109b8e:	d86f      	bhi.n	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b90:	2b30      	cmp	r3, #48	@ 0x30
 8109b92:	d064      	beq.n	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109b94:	2b30      	cmp	r3, #48	@ 0x30
 8109b96:	d86b      	bhi.n	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109b98:	2b20      	cmp	r3, #32
 8109b9a:	d060      	beq.n	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109b9c:	2b20      	cmp	r3, #32
 8109b9e:	d867      	bhi.n	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
 8109ba0:	2b00      	cmp	r3, #0
 8109ba2:	d05c      	beq.n	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109ba4:	2b10      	cmp	r3, #16
 8109ba6:	d05a      	beq.n	8109c5e <HAL_TIM_ConfigClockSource+0x1ae>
 8109ba8:	e062      	b.n	8109c70 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8109baa:	687b      	ldr	r3, [r7, #4]
 8109bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8109bae:	683b      	ldr	r3, [r7, #0]
 8109bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8109bb2:	683b      	ldr	r3, [r7, #0]
 8109bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8109bb6:	683b      	ldr	r3, [r7, #0]
 8109bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8109bba:	f000 fc91 	bl	810a4e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8109bbe:	687b      	ldr	r3, [r7, #4]
 8109bc0:	681b      	ldr	r3, [r3, #0]
 8109bc2:	689b      	ldr	r3, [r3, #8]
 8109bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8109bc6:	68bb      	ldr	r3, [r7, #8]
 8109bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8109bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	681b      	ldr	r3, [r3, #0]
 8109bd2:	68ba      	ldr	r2, [r7, #8]
 8109bd4:	609a      	str	r2, [r3, #8]
      break;
 8109bd6:	e04f      	b.n	8109c78 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8109bd8:	687b      	ldr	r3, [r7, #4]
 8109bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8109bdc:	683b      	ldr	r3, [r7, #0]
 8109bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8109be0:	683b      	ldr	r3, [r7, #0]
 8109be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8109be4:	683b      	ldr	r3, [r7, #0]
 8109be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8109be8:	f000 fc7a 	bl	810a4e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8109bec:	687b      	ldr	r3, [r7, #4]
 8109bee:	681b      	ldr	r3, [r3, #0]
 8109bf0:	689a      	ldr	r2, [r3, #8]
 8109bf2:	687b      	ldr	r3, [r7, #4]
 8109bf4:	681b      	ldr	r3, [r3, #0]
 8109bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8109bfa:	609a      	str	r2, [r3, #8]
      break;
 8109bfc:	e03c      	b.n	8109c78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8109bfe:	687b      	ldr	r3, [r7, #4]
 8109c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8109c02:	683b      	ldr	r3, [r7, #0]
 8109c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8109c06:	683b      	ldr	r3, [r7, #0]
 8109c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8109c0a:	461a      	mov	r2, r3
 8109c0c:	f000 fbec 	bl	810a3e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	681b      	ldr	r3, [r3, #0]
 8109c14:	2150      	movs	r1, #80	@ 0x50
 8109c16:	4618      	mov	r0, r3
 8109c18:	f000 fc45 	bl	810a4a6 <TIM_ITRx_SetConfig>
      break;
 8109c1c:	e02c      	b.n	8109c78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8109c22:	683b      	ldr	r3, [r7, #0]
 8109c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8109c26:	683b      	ldr	r3, [r7, #0]
 8109c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8109c2a:	461a      	mov	r2, r3
 8109c2c:	f000 fc0b 	bl	810a446 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8109c30:	687b      	ldr	r3, [r7, #4]
 8109c32:	681b      	ldr	r3, [r3, #0]
 8109c34:	2160      	movs	r1, #96	@ 0x60
 8109c36:	4618      	mov	r0, r3
 8109c38:	f000 fc35 	bl	810a4a6 <TIM_ITRx_SetConfig>
      break;
 8109c3c:	e01c      	b.n	8109c78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8109c3e:	687b      	ldr	r3, [r7, #4]
 8109c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8109c42:	683b      	ldr	r3, [r7, #0]
 8109c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8109c46:	683b      	ldr	r3, [r7, #0]
 8109c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8109c4a:	461a      	mov	r2, r3
 8109c4c:	f000 fbcc 	bl	810a3e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	681b      	ldr	r3, [r3, #0]
 8109c54:	2140      	movs	r1, #64	@ 0x40
 8109c56:	4618      	mov	r0, r3
 8109c58:	f000 fc25 	bl	810a4a6 <TIM_ITRx_SetConfig>
      break;
 8109c5c:	e00c      	b.n	8109c78 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8109c5e:	687b      	ldr	r3, [r7, #4]
 8109c60:	681a      	ldr	r2, [r3, #0]
 8109c62:	683b      	ldr	r3, [r7, #0]
 8109c64:	681b      	ldr	r3, [r3, #0]
 8109c66:	4619      	mov	r1, r3
 8109c68:	4610      	mov	r0, r2
 8109c6a:	f000 fc1c 	bl	810a4a6 <TIM_ITRx_SetConfig>
      break;
 8109c6e:	e003      	b.n	8109c78 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8109c70:	2301      	movs	r3, #1
 8109c72:	73fb      	strb	r3, [r7, #15]
      break;
 8109c74:	e000      	b.n	8109c78 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8109c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8109c78:	687b      	ldr	r3, [r7, #4]
 8109c7a:	2201      	movs	r2, #1
 8109c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8109c80:	687b      	ldr	r3, [r7, #4]
 8109c82:	2200      	movs	r2, #0
 8109c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8109c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8109c8a:	4618      	mov	r0, r3
 8109c8c:	3710      	adds	r7, #16
 8109c8e:	46bd      	mov	sp, r7
 8109c90:	bd80      	pop	{r7, pc}
 8109c92:	bf00      	nop
 8109c94:	00100040 	.word	0x00100040
 8109c98:	00100030 	.word	0x00100030
 8109c9c:	00100020 	.word	0x00100020

08109ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109ca0:	b480      	push	{r7}
 8109ca2:	b083      	sub	sp, #12
 8109ca4:	af00      	add	r7, sp, #0
 8109ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8109ca8:	bf00      	nop
 8109caa:	370c      	adds	r7, #12
 8109cac:	46bd      	mov	sp, r7
 8109cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cb2:	4770      	bx	lr

08109cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8109cb4:	b480      	push	{r7}
 8109cb6:	b083      	sub	sp, #12
 8109cb8:	af00      	add	r7, sp, #0
 8109cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8109cbc:	bf00      	nop
 8109cbe:	370c      	adds	r7, #12
 8109cc0:	46bd      	mov	sp, r7
 8109cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cc6:	4770      	bx	lr

08109cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8109cc8:	b480      	push	{r7}
 8109cca:	b083      	sub	sp, #12
 8109ccc:	af00      	add	r7, sp, #0
 8109cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8109cd0:	bf00      	nop
 8109cd2:	370c      	adds	r7, #12
 8109cd4:	46bd      	mov	sp, r7
 8109cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cda:	4770      	bx	lr

08109cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8109cdc:	b480      	push	{r7}
 8109cde:	b083      	sub	sp, #12
 8109ce0:	af00      	add	r7, sp, #0
 8109ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8109ce4:	bf00      	nop
 8109ce6:	370c      	adds	r7, #12
 8109ce8:	46bd      	mov	sp, r7
 8109cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cee:	4770      	bx	lr

08109cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8109cf0:	b480      	push	{r7}
 8109cf2:	b085      	sub	sp, #20
 8109cf4:	af00      	add	r7, sp, #0
 8109cf6:	6078      	str	r0, [r7, #4]
 8109cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109cfa:	687b      	ldr	r3, [r7, #4]
 8109cfc:	681b      	ldr	r3, [r3, #0]
 8109cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8109d00:	687b      	ldr	r3, [r7, #4]
 8109d02:	4a46      	ldr	r2, [pc, #280]	@ (8109e1c <TIM_Base_SetConfig+0x12c>)
 8109d04:	4293      	cmp	r3, r2
 8109d06:	d013      	beq.n	8109d30 <TIM_Base_SetConfig+0x40>
 8109d08:	687b      	ldr	r3, [r7, #4]
 8109d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109d0e:	d00f      	beq.n	8109d30 <TIM_Base_SetConfig+0x40>
 8109d10:	687b      	ldr	r3, [r7, #4]
 8109d12:	4a43      	ldr	r2, [pc, #268]	@ (8109e20 <TIM_Base_SetConfig+0x130>)
 8109d14:	4293      	cmp	r3, r2
 8109d16:	d00b      	beq.n	8109d30 <TIM_Base_SetConfig+0x40>
 8109d18:	687b      	ldr	r3, [r7, #4]
 8109d1a:	4a42      	ldr	r2, [pc, #264]	@ (8109e24 <TIM_Base_SetConfig+0x134>)
 8109d1c:	4293      	cmp	r3, r2
 8109d1e:	d007      	beq.n	8109d30 <TIM_Base_SetConfig+0x40>
 8109d20:	687b      	ldr	r3, [r7, #4]
 8109d22:	4a41      	ldr	r2, [pc, #260]	@ (8109e28 <TIM_Base_SetConfig+0x138>)
 8109d24:	4293      	cmp	r3, r2
 8109d26:	d003      	beq.n	8109d30 <TIM_Base_SetConfig+0x40>
 8109d28:	687b      	ldr	r3, [r7, #4]
 8109d2a:	4a40      	ldr	r2, [pc, #256]	@ (8109e2c <TIM_Base_SetConfig+0x13c>)
 8109d2c:	4293      	cmp	r3, r2
 8109d2e:	d108      	bne.n	8109d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109d30:	68fb      	ldr	r3, [r7, #12]
 8109d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109d38:	683b      	ldr	r3, [r7, #0]
 8109d3a:	685b      	ldr	r3, [r3, #4]
 8109d3c:	68fa      	ldr	r2, [r7, #12]
 8109d3e:	4313      	orrs	r3, r2
 8109d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109d42:	687b      	ldr	r3, [r7, #4]
 8109d44:	4a35      	ldr	r2, [pc, #212]	@ (8109e1c <TIM_Base_SetConfig+0x12c>)
 8109d46:	4293      	cmp	r3, r2
 8109d48:	d01f      	beq.n	8109d8a <TIM_Base_SetConfig+0x9a>
 8109d4a:	687b      	ldr	r3, [r7, #4]
 8109d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109d50:	d01b      	beq.n	8109d8a <TIM_Base_SetConfig+0x9a>
 8109d52:	687b      	ldr	r3, [r7, #4]
 8109d54:	4a32      	ldr	r2, [pc, #200]	@ (8109e20 <TIM_Base_SetConfig+0x130>)
 8109d56:	4293      	cmp	r3, r2
 8109d58:	d017      	beq.n	8109d8a <TIM_Base_SetConfig+0x9a>
 8109d5a:	687b      	ldr	r3, [r7, #4]
 8109d5c:	4a31      	ldr	r2, [pc, #196]	@ (8109e24 <TIM_Base_SetConfig+0x134>)
 8109d5e:	4293      	cmp	r3, r2
 8109d60:	d013      	beq.n	8109d8a <TIM_Base_SetConfig+0x9a>
 8109d62:	687b      	ldr	r3, [r7, #4]
 8109d64:	4a30      	ldr	r2, [pc, #192]	@ (8109e28 <TIM_Base_SetConfig+0x138>)
 8109d66:	4293      	cmp	r3, r2
 8109d68:	d00f      	beq.n	8109d8a <TIM_Base_SetConfig+0x9a>
 8109d6a:	687b      	ldr	r3, [r7, #4]
 8109d6c:	4a2f      	ldr	r2, [pc, #188]	@ (8109e2c <TIM_Base_SetConfig+0x13c>)
 8109d6e:	4293      	cmp	r3, r2
 8109d70:	d00b      	beq.n	8109d8a <TIM_Base_SetConfig+0x9a>
 8109d72:	687b      	ldr	r3, [r7, #4]
 8109d74:	4a2e      	ldr	r2, [pc, #184]	@ (8109e30 <TIM_Base_SetConfig+0x140>)
 8109d76:	4293      	cmp	r3, r2
 8109d78:	d007      	beq.n	8109d8a <TIM_Base_SetConfig+0x9a>
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8109e34 <TIM_Base_SetConfig+0x144>)
 8109d7e:	4293      	cmp	r3, r2
 8109d80:	d003      	beq.n	8109d8a <TIM_Base_SetConfig+0x9a>
 8109d82:	687b      	ldr	r3, [r7, #4]
 8109d84:	4a2c      	ldr	r2, [pc, #176]	@ (8109e38 <TIM_Base_SetConfig+0x148>)
 8109d86:	4293      	cmp	r3, r2
 8109d88:	d108      	bne.n	8109d9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109d8a:	68fb      	ldr	r3, [r7, #12]
 8109d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109d92:	683b      	ldr	r3, [r7, #0]
 8109d94:	68db      	ldr	r3, [r3, #12]
 8109d96:	68fa      	ldr	r2, [r7, #12]
 8109d98:	4313      	orrs	r3, r2
 8109d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109d9c:	68fb      	ldr	r3, [r7, #12]
 8109d9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8109da2:	683b      	ldr	r3, [r7, #0]
 8109da4:	695b      	ldr	r3, [r3, #20]
 8109da6:	4313      	orrs	r3, r2
 8109da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8109daa:	687b      	ldr	r3, [r7, #4]
 8109dac:	68fa      	ldr	r2, [r7, #12]
 8109dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109db0:	683b      	ldr	r3, [r7, #0]
 8109db2:	689a      	ldr	r2, [r3, #8]
 8109db4:	687b      	ldr	r3, [r7, #4]
 8109db6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109db8:	683b      	ldr	r3, [r7, #0]
 8109dba:	681a      	ldr	r2, [r3, #0]
 8109dbc:	687b      	ldr	r3, [r7, #4]
 8109dbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109dc0:	687b      	ldr	r3, [r7, #4]
 8109dc2:	4a16      	ldr	r2, [pc, #88]	@ (8109e1c <TIM_Base_SetConfig+0x12c>)
 8109dc4:	4293      	cmp	r3, r2
 8109dc6:	d00f      	beq.n	8109de8 <TIM_Base_SetConfig+0xf8>
 8109dc8:	687b      	ldr	r3, [r7, #4]
 8109dca:	4a18      	ldr	r2, [pc, #96]	@ (8109e2c <TIM_Base_SetConfig+0x13c>)
 8109dcc:	4293      	cmp	r3, r2
 8109dce:	d00b      	beq.n	8109de8 <TIM_Base_SetConfig+0xf8>
 8109dd0:	687b      	ldr	r3, [r7, #4]
 8109dd2:	4a17      	ldr	r2, [pc, #92]	@ (8109e30 <TIM_Base_SetConfig+0x140>)
 8109dd4:	4293      	cmp	r3, r2
 8109dd6:	d007      	beq.n	8109de8 <TIM_Base_SetConfig+0xf8>
 8109dd8:	687b      	ldr	r3, [r7, #4]
 8109dda:	4a16      	ldr	r2, [pc, #88]	@ (8109e34 <TIM_Base_SetConfig+0x144>)
 8109ddc:	4293      	cmp	r3, r2
 8109dde:	d003      	beq.n	8109de8 <TIM_Base_SetConfig+0xf8>
 8109de0:	687b      	ldr	r3, [r7, #4]
 8109de2:	4a15      	ldr	r2, [pc, #84]	@ (8109e38 <TIM_Base_SetConfig+0x148>)
 8109de4:	4293      	cmp	r3, r2
 8109de6:	d103      	bne.n	8109df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109de8:	683b      	ldr	r3, [r7, #0]
 8109dea:	691a      	ldr	r2, [r3, #16]
 8109dec:	687b      	ldr	r3, [r7, #4]
 8109dee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109df0:	687b      	ldr	r3, [r7, #4]
 8109df2:	2201      	movs	r2, #1
 8109df4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	691b      	ldr	r3, [r3, #16]
 8109dfa:	f003 0301 	and.w	r3, r3, #1
 8109dfe:	2b01      	cmp	r3, #1
 8109e00:	d105      	bne.n	8109e0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8109e02:	687b      	ldr	r3, [r7, #4]
 8109e04:	691b      	ldr	r3, [r3, #16]
 8109e06:	f023 0201 	bic.w	r2, r3, #1
 8109e0a:	687b      	ldr	r3, [r7, #4]
 8109e0c:	611a      	str	r2, [r3, #16]
  }
}
 8109e0e:	bf00      	nop
 8109e10:	3714      	adds	r7, #20
 8109e12:	46bd      	mov	sp, r7
 8109e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e18:	4770      	bx	lr
 8109e1a:	bf00      	nop
 8109e1c:	40010000 	.word	0x40010000
 8109e20:	40000400 	.word	0x40000400
 8109e24:	40000800 	.word	0x40000800
 8109e28:	40000c00 	.word	0x40000c00
 8109e2c:	40010400 	.word	0x40010400
 8109e30:	40014000 	.word	0x40014000
 8109e34:	40014400 	.word	0x40014400
 8109e38:	40014800 	.word	0x40014800

08109e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109e3c:	b480      	push	{r7}
 8109e3e:	b087      	sub	sp, #28
 8109e40:	af00      	add	r7, sp, #0
 8109e42:	6078      	str	r0, [r7, #4]
 8109e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109e46:	687b      	ldr	r3, [r7, #4]
 8109e48:	6a1b      	ldr	r3, [r3, #32]
 8109e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109e4c:	687b      	ldr	r3, [r7, #4]
 8109e4e:	6a1b      	ldr	r3, [r3, #32]
 8109e50:	f023 0201 	bic.w	r2, r3, #1
 8109e54:	687b      	ldr	r3, [r7, #4]
 8109e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109e58:	687b      	ldr	r3, [r7, #4]
 8109e5a:	685b      	ldr	r3, [r3, #4]
 8109e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109e5e:	687b      	ldr	r3, [r7, #4]
 8109e60:	699b      	ldr	r3, [r3, #24]
 8109e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8109e64:	68fb      	ldr	r3, [r7, #12]
 8109e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8109e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8109e70:	68fb      	ldr	r3, [r7, #12]
 8109e72:	f023 0303 	bic.w	r3, r3, #3
 8109e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109e78:	683b      	ldr	r3, [r7, #0]
 8109e7a:	681b      	ldr	r3, [r3, #0]
 8109e7c:	68fa      	ldr	r2, [r7, #12]
 8109e7e:	4313      	orrs	r3, r2
 8109e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8109e82:	697b      	ldr	r3, [r7, #20]
 8109e84:	f023 0302 	bic.w	r3, r3, #2
 8109e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8109e8a:	683b      	ldr	r3, [r7, #0]
 8109e8c:	689b      	ldr	r3, [r3, #8]
 8109e8e:	697a      	ldr	r2, [r7, #20]
 8109e90:	4313      	orrs	r3, r2
 8109e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8109e94:	687b      	ldr	r3, [r7, #4]
 8109e96:	4a2c      	ldr	r2, [pc, #176]	@ (8109f48 <TIM_OC1_SetConfig+0x10c>)
 8109e98:	4293      	cmp	r3, r2
 8109e9a:	d00f      	beq.n	8109ebc <TIM_OC1_SetConfig+0x80>
 8109e9c:	687b      	ldr	r3, [r7, #4]
 8109e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8109f4c <TIM_OC1_SetConfig+0x110>)
 8109ea0:	4293      	cmp	r3, r2
 8109ea2:	d00b      	beq.n	8109ebc <TIM_OC1_SetConfig+0x80>
 8109ea4:	687b      	ldr	r3, [r7, #4]
 8109ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8109f50 <TIM_OC1_SetConfig+0x114>)
 8109ea8:	4293      	cmp	r3, r2
 8109eaa:	d007      	beq.n	8109ebc <TIM_OC1_SetConfig+0x80>
 8109eac:	687b      	ldr	r3, [r7, #4]
 8109eae:	4a29      	ldr	r2, [pc, #164]	@ (8109f54 <TIM_OC1_SetConfig+0x118>)
 8109eb0:	4293      	cmp	r3, r2
 8109eb2:	d003      	beq.n	8109ebc <TIM_OC1_SetConfig+0x80>
 8109eb4:	687b      	ldr	r3, [r7, #4]
 8109eb6:	4a28      	ldr	r2, [pc, #160]	@ (8109f58 <TIM_OC1_SetConfig+0x11c>)
 8109eb8:	4293      	cmp	r3, r2
 8109eba:	d10c      	bne.n	8109ed6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8109ebc:	697b      	ldr	r3, [r7, #20]
 8109ebe:	f023 0308 	bic.w	r3, r3, #8
 8109ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8109ec4:	683b      	ldr	r3, [r7, #0]
 8109ec6:	68db      	ldr	r3, [r3, #12]
 8109ec8:	697a      	ldr	r2, [r7, #20]
 8109eca:	4313      	orrs	r3, r2
 8109ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8109ece:	697b      	ldr	r3, [r7, #20]
 8109ed0:	f023 0304 	bic.w	r3, r3, #4
 8109ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109ed6:	687b      	ldr	r3, [r7, #4]
 8109ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8109f48 <TIM_OC1_SetConfig+0x10c>)
 8109eda:	4293      	cmp	r3, r2
 8109edc:	d00f      	beq.n	8109efe <TIM_OC1_SetConfig+0xc2>
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8109f4c <TIM_OC1_SetConfig+0x110>)
 8109ee2:	4293      	cmp	r3, r2
 8109ee4:	d00b      	beq.n	8109efe <TIM_OC1_SetConfig+0xc2>
 8109ee6:	687b      	ldr	r3, [r7, #4]
 8109ee8:	4a19      	ldr	r2, [pc, #100]	@ (8109f50 <TIM_OC1_SetConfig+0x114>)
 8109eea:	4293      	cmp	r3, r2
 8109eec:	d007      	beq.n	8109efe <TIM_OC1_SetConfig+0xc2>
 8109eee:	687b      	ldr	r3, [r7, #4]
 8109ef0:	4a18      	ldr	r2, [pc, #96]	@ (8109f54 <TIM_OC1_SetConfig+0x118>)
 8109ef2:	4293      	cmp	r3, r2
 8109ef4:	d003      	beq.n	8109efe <TIM_OC1_SetConfig+0xc2>
 8109ef6:	687b      	ldr	r3, [r7, #4]
 8109ef8:	4a17      	ldr	r2, [pc, #92]	@ (8109f58 <TIM_OC1_SetConfig+0x11c>)
 8109efa:	4293      	cmp	r3, r2
 8109efc:	d111      	bne.n	8109f22 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8109efe:	693b      	ldr	r3, [r7, #16]
 8109f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8109f06:	693b      	ldr	r3, [r7, #16]
 8109f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8109f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8109f0e:	683b      	ldr	r3, [r7, #0]
 8109f10:	695b      	ldr	r3, [r3, #20]
 8109f12:	693a      	ldr	r2, [r7, #16]
 8109f14:	4313      	orrs	r3, r2
 8109f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8109f18:	683b      	ldr	r3, [r7, #0]
 8109f1a:	699b      	ldr	r3, [r3, #24]
 8109f1c:	693a      	ldr	r2, [r7, #16]
 8109f1e:	4313      	orrs	r3, r2
 8109f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109f22:	687b      	ldr	r3, [r7, #4]
 8109f24:	693a      	ldr	r2, [r7, #16]
 8109f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8109f28:	687b      	ldr	r3, [r7, #4]
 8109f2a:	68fa      	ldr	r2, [r7, #12]
 8109f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8109f2e:	683b      	ldr	r3, [r7, #0]
 8109f30:	685a      	ldr	r2, [r3, #4]
 8109f32:	687b      	ldr	r3, [r7, #4]
 8109f34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109f36:	687b      	ldr	r3, [r7, #4]
 8109f38:	697a      	ldr	r2, [r7, #20]
 8109f3a:	621a      	str	r2, [r3, #32]
}
 8109f3c:	bf00      	nop
 8109f3e:	371c      	adds	r7, #28
 8109f40:	46bd      	mov	sp, r7
 8109f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f46:	4770      	bx	lr
 8109f48:	40010000 	.word	0x40010000
 8109f4c:	40010400 	.word	0x40010400
 8109f50:	40014000 	.word	0x40014000
 8109f54:	40014400 	.word	0x40014400
 8109f58:	40014800 	.word	0x40014800

08109f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109f5c:	b480      	push	{r7}
 8109f5e:	b087      	sub	sp, #28
 8109f60:	af00      	add	r7, sp, #0
 8109f62:	6078      	str	r0, [r7, #4]
 8109f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109f66:	687b      	ldr	r3, [r7, #4]
 8109f68:	6a1b      	ldr	r3, [r3, #32]
 8109f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109f6c:	687b      	ldr	r3, [r7, #4]
 8109f6e:	6a1b      	ldr	r3, [r3, #32]
 8109f70:	f023 0210 	bic.w	r2, r3, #16
 8109f74:	687b      	ldr	r3, [r7, #4]
 8109f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	685b      	ldr	r3, [r3, #4]
 8109f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109f7e:	687b      	ldr	r3, [r7, #4]
 8109f80:	699b      	ldr	r3, [r3, #24]
 8109f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8109f84:	68fb      	ldr	r3, [r7, #12]
 8109f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8109f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8109f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8109f90:	68fb      	ldr	r3, [r7, #12]
 8109f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109f98:	683b      	ldr	r3, [r7, #0]
 8109f9a:	681b      	ldr	r3, [r3, #0]
 8109f9c:	021b      	lsls	r3, r3, #8
 8109f9e:	68fa      	ldr	r2, [r7, #12]
 8109fa0:	4313      	orrs	r3, r2
 8109fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8109fa4:	697b      	ldr	r3, [r7, #20]
 8109fa6:	f023 0320 	bic.w	r3, r3, #32
 8109faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8109fac:	683b      	ldr	r3, [r7, #0]
 8109fae:	689b      	ldr	r3, [r3, #8]
 8109fb0:	011b      	lsls	r3, r3, #4
 8109fb2:	697a      	ldr	r2, [r7, #20]
 8109fb4:	4313      	orrs	r3, r2
 8109fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8109fb8:	687b      	ldr	r3, [r7, #4]
 8109fba:	4a28      	ldr	r2, [pc, #160]	@ (810a05c <TIM_OC2_SetConfig+0x100>)
 8109fbc:	4293      	cmp	r3, r2
 8109fbe:	d003      	beq.n	8109fc8 <TIM_OC2_SetConfig+0x6c>
 8109fc0:	687b      	ldr	r3, [r7, #4]
 8109fc2:	4a27      	ldr	r2, [pc, #156]	@ (810a060 <TIM_OC2_SetConfig+0x104>)
 8109fc4:	4293      	cmp	r3, r2
 8109fc6:	d10d      	bne.n	8109fe4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8109fc8:	697b      	ldr	r3, [r7, #20]
 8109fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8109fd0:	683b      	ldr	r3, [r7, #0]
 8109fd2:	68db      	ldr	r3, [r3, #12]
 8109fd4:	011b      	lsls	r3, r3, #4
 8109fd6:	697a      	ldr	r2, [r7, #20]
 8109fd8:	4313      	orrs	r3, r2
 8109fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8109fdc:	697b      	ldr	r3, [r7, #20]
 8109fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109fe2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109fe4:	687b      	ldr	r3, [r7, #4]
 8109fe6:	4a1d      	ldr	r2, [pc, #116]	@ (810a05c <TIM_OC2_SetConfig+0x100>)
 8109fe8:	4293      	cmp	r3, r2
 8109fea:	d00f      	beq.n	810a00c <TIM_OC2_SetConfig+0xb0>
 8109fec:	687b      	ldr	r3, [r7, #4]
 8109fee:	4a1c      	ldr	r2, [pc, #112]	@ (810a060 <TIM_OC2_SetConfig+0x104>)
 8109ff0:	4293      	cmp	r3, r2
 8109ff2:	d00b      	beq.n	810a00c <TIM_OC2_SetConfig+0xb0>
 8109ff4:	687b      	ldr	r3, [r7, #4]
 8109ff6:	4a1b      	ldr	r2, [pc, #108]	@ (810a064 <TIM_OC2_SetConfig+0x108>)
 8109ff8:	4293      	cmp	r3, r2
 8109ffa:	d007      	beq.n	810a00c <TIM_OC2_SetConfig+0xb0>
 8109ffc:	687b      	ldr	r3, [r7, #4]
 8109ffe:	4a1a      	ldr	r2, [pc, #104]	@ (810a068 <TIM_OC2_SetConfig+0x10c>)
 810a000:	4293      	cmp	r3, r2
 810a002:	d003      	beq.n	810a00c <TIM_OC2_SetConfig+0xb0>
 810a004:	687b      	ldr	r3, [r7, #4]
 810a006:	4a19      	ldr	r2, [pc, #100]	@ (810a06c <TIM_OC2_SetConfig+0x110>)
 810a008:	4293      	cmp	r3, r2
 810a00a:	d113      	bne.n	810a034 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810a00c:	693b      	ldr	r3, [r7, #16]
 810a00e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810a012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810a014:	693b      	ldr	r3, [r7, #16]
 810a016:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810a01a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810a01c:	683b      	ldr	r3, [r7, #0]
 810a01e:	695b      	ldr	r3, [r3, #20]
 810a020:	009b      	lsls	r3, r3, #2
 810a022:	693a      	ldr	r2, [r7, #16]
 810a024:	4313      	orrs	r3, r2
 810a026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810a028:	683b      	ldr	r3, [r7, #0]
 810a02a:	699b      	ldr	r3, [r3, #24]
 810a02c:	009b      	lsls	r3, r3, #2
 810a02e:	693a      	ldr	r2, [r7, #16]
 810a030:	4313      	orrs	r3, r2
 810a032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a034:	687b      	ldr	r3, [r7, #4]
 810a036:	693a      	ldr	r2, [r7, #16]
 810a038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	68fa      	ldr	r2, [r7, #12]
 810a03e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810a040:	683b      	ldr	r3, [r7, #0]
 810a042:	685a      	ldr	r2, [r3, #4]
 810a044:	687b      	ldr	r3, [r7, #4]
 810a046:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a048:	687b      	ldr	r3, [r7, #4]
 810a04a:	697a      	ldr	r2, [r7, #20]
 810a04c:	621a      	str	r2, [r3, #32]
}
 810a04e:	bf00      	nop
 810a050:	371c      	adds	r7, #28
 810a052:	46bd      	mov	sp, r7
 810a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a058:	4770      	bx	lr
 810a05a:	bf00      	nop
 810a05c:	40010000 	.word	0x40010000
 810a060:	40010400 	.word	0x40010400
 810a064:	40014000 	.word	0x40014000
 810a068:	40014400 	.word	0x40014400
 810a06c:	40014800 	.word	0x40014800

0810a070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a070:	b480      	push	{r7}
 810a072:	b087      	sub	sp, #28
 810a074:	af00      	add	r7, sp, #0
 810a076:	6078      	str	r0, [r7, #4]
 810a078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a07a:	687b      	ldr	r3, [r7, #4]
 810a07c:	6a1b      	ldr	r3, [r3, #32]
 810a07e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a080:	687b      	ldr	r3, [r7, #4]
 810a082:	6a1b      	ldr	r3, [r3, #32]
 810a084:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810a088:	687b      	ldr	r3, [r7, #4]
 810a08a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a08c:	687b      	ldr	r3, [r7, #4]
 810a08e:	685b      	ldr	r3, [r3, #4]
 810a090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a092:	687b      	ldr	r3, [r7, #4]
 810a094:	69db      	ldr	r3, [r3, #28]
 810a096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810a098:	68fb      	ldr	r3, [r7, #12]
 810a09a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a09e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810a0a4:	68fb      	ldr	r3, [r7, #12]
 810a0a6:	f023 0303 	bic.w	r3, r3, #3
 810a0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a0ac:	683b      	ldr	r3, [r7, #0]
 810a0ae:	681b      	ldr	r3, [r3, #0]
 810a0b0:	68fa      	ldr	r2, [r7, #12]
 810a0b2:	4313      	orrs	r3, r2
 810a0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810a0b6:	697b      	ldr	r3, [r7, #20]
 810a0b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810a0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810a0be:	683b      	ldr	r3, [r7, #0]
 810a0c0:	689b      	ldr	r3, [r3, #8]
 810a0c2:	021b      	lsls	r3, r3, #8
 810a0c4:	697a      	ldr	r2, [r7, #20]
 810a0c6:	4313      	orrs	r3, r2
 810a0c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810a0ca:	687b      	ldr	r3, [r7, #4]
 810a0cc:	4a27      	ldr	r2, [pc, #156]	@ (810a16c <TIM_OC3_SetConfig+0xfc>)
 810a0ce:	4293      	cmp	r3, r2
 810a0d0:	d003      	beq.n	810a0da <TIM_OC3_SetConfig+0x6a>
 810a0d2:	687b      	ldr	r3, [r7, #4]
 810a0d4:	4a26      	ldr	r2, [pc, #152]	@ (810a170 <TIM_OC3_SetConfig+0x100>)
 810a0d6:	4293      	cmp	r3, r2
 810a0d8:	d10d      	bne.n	810a0f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810a0da:	697b      	ldr	r3, [r7, #20]
 810a0dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810a0e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810a0e2:	683b      	ldr	r3, [r7, #0]
 810a0e4:	68db      	ldr	r3, [r3, #12]
 810a0e6:	021b      	lsls	r3, r3, #8
 810a0e8:	697a      	ldr	r2, [r7, #20]
 810a0ea:	4313      	orrs	r3, r2
 810a0ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810a0ee:	697b      	ldr	r3, [r7, #20]
 810a0f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810a0f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a0f6:	687b      	ldr	r3, [r7, #4]
 810a0f8:	4a1c      	ldr	r2, [pc, #112]	@ (810a16c <TIM_OC3_SetConfig+0xfc>)
 810a0fa:	4293      	cmp	r3, r2
 810a0fc:	d00f      	beq.n	810a11e <TIM_OC3_SetConfig+0xae>
 810a0fe:	687b      	ldr	r3, [r7, #4]
 810a100:	4a1b      	ldr	r2, [pc, #108]	@ (810a170 <TIM_OC3_SetConfig+0x100>)
 810a102:	4293      	cmp	r3, r2
 810a104:	d00b      	beq.n	810a11e <TIM_OC3_SetConfig+0xae>
 810a106:	687b      	ldr	r3, [r7, #4]
 810a108:	4a1a      	ldr	r2, [pc, #104]	@ (810a174 <TIM_OC3_SetConfig+0x104>)
 810a10a:	4293      	cmp	r3, r2
 810a10c:	d007      	beq.n	810a11e <TIM_OC3_SetConfig+0xae>
 810a10e:	687b      	ldr	r3, [r7, #4]
 810a110:	4a19      	ldr	r2, [pc, #100]	@ (810a178 <TIM_OC3_SetConfig+0x108>)
 810a112:	4293      	cmp	r3, r2
 810a114:	d003      	beq.n	810a11e <TIM_OC3_SetConfig+0xae>
 810a116:	687b      	ldr	r3, [r7, #4]
 810a118:	4a18      	ldr	r2, [pc, #96]	@ (810a17c <TIM_OC3_SetConfig+0x10c>)
 810a11a:	4293      	cmp	r3, r2
 810a11c:	d113      	bne.n	810a146 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810a11e:	693b      	ldr	r3, [r7, #16]
 810a120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810a124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810a126:	693b      	ldr	r3, [r7, #16]
 810a128:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810a12c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810a12e:	683b      	ldr	r3, [r7, #0]
 810a130:	695b      	ldr	r3, [r3, #20]
 810a132:	011b      	lsls	r3, r3, #4
 810a134:	693a      	ldr	r2, [r7, #16]
 810a136:	4313      	orrs	r3, r2
 810a138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810a13a:	683b      	ldr	r3, [r7, #0]
 810a13c:	699b      	ldr	r3, [r3, #24]
 810a13e:	011b      	lsls	r3, r3, #4
 810a140:	693a      	ldr	r2, [r7, #16]
 810a142:	4313      	orrs	r3, r2
 810a144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a146:	687b      	ldr	r3, [r7, #4]
 810a148:	693a      	ldr	r2, [r7, #16]
 810a14a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a14c:	687b      	ldr	r3, [r7, #4]
 810a14e:	68fa      	ldr	r2, [r7, #12]
 810a150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810a152:	683b      	ldr	r3, [r7, #0]
 810a154:	685a      	ldr	r2, [r3, #4]
 810a156:	687b      	ldr	r3, [r7, #4]
 810a158:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a15a:	687b      	ldr	r3, [r7, #4]
 810a15c:	697a      	ldr	r2, [r7, #20]
 810a15e:	621a      	str	r2, [r3, #32]
}
 810a160:	bf00      	nop
 810a162:	371c      	adds	r7, #28
 810a164:	46bd      	mov	sp, r7
 810a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a16a:	4770      	bx	lr
 810a16c:	40010000 	.word	0x40010000
 810a170:	40010400 	.word	0x40010400
 810a174:	40014000 	.word	0x40014000
 810a178:	40014400 	.word	0x40014400
 810a17c:	40014800 	.word	0x40014800

0810a180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a180:	b480      	push	{r7}
 810a182:	b087      	sub	sp, #28
 810a184:	af00      	add	r7, sp, #0
 810a186:	6078      	str	r0, [r7, #4]
 810a188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a18a:	687b      	ldr	r3, [r7, #4]
 810a18c:	6a1b      	ldr	r3, [r3, #32]
 810a18e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a190:	687b      	ldr	r3, [r7, #4]
 810a192:	6a1b      	ldr	r3, [r3, #32]
 810a194:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a198:	687b      	ldr	r3, [r7, #4]
 810a19a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a19c:	687b      	ldr	r3, [r7, #4]
 810a19e:	685b      	ldr	r3, [r3, #4]
 810a1a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a1a2:	687b      	ldr	r3, [r7, #4]
 810a1a4:	69db      	ldr	r3, [r3, #28]
 810a1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810a1a8:	68fb      	ldr	r3, [r7, #12]
 810a1aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a1ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a1b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810a1b4:	68fb      	ldr	r3, [r7, #12]
 810a1b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a1ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a1bc:	683b      	ldr	r3, [r7, #0]
 810a1be:	681b      	ldr	r3, [r3, #0]
 810a1c0:	021b      	lsls	r3, r3, #8
 810a1c2:	68fa      	ldr	r2, [r7, #12]
 810a1c4:	4313      	orrs	r3, r2
 810a1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810a1c8:	693b      	ldr	r3, [r7, #16]
 810a1ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810a1ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810a1d0:	683b      	ldr	r3, [r7, #0]
 810a1d2:	689b      	ldr	r3, [r3, #8]
 810a1d4:	031b      	lsls	r3, r3, #12
 810a1d6:	693a      	ldr	r2, [r7, #16]
 810a1d8:	4313      	orrs	r3, r2
 810a1da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a1dc:	687b      	ldr	r3, [r7, #4]
 810a1de:	4a18      	ldr	r2, [pc, #96]	@ (810a240 <TIM_OC4_SetConfig+0xc0>)
 810a1e0:	4293      	cmp	r3, r2
 810a1e2:	d00f      	beq.n	810a204 <TIM_OC4_SetConfig+0x84>
 810a1e4:	687b      	ldr	r3, [r7, #4]
 810a1e6:	4a17      	ldr	r2, [pc, #92]	@ (810a244 <TIM_OC4_SetConfig+0xc4>)
 810a1e8:	4293      	cmp	r3, r2
 810a1ea:	d00b      	beq.n	810a204 <TIM_OC4_SetConfig+0x84>
 810a1ec:	687b      	ldr	r3, [r7, #4]
 810a1ee:	4a16      	ldr	r2, [pc, #88]	@ (810a248 <TIM_OC4_SetConfig+0xc8>)
 810a1f0:	4293      	cmp	r3, r2
 810a1f2:	d007      	beq.n	810a204 <TIM_OC4_SetConfig+0x84>
 810a1f4:	687b      	ldr	r3, [r7, #4]
 810a1f6:	4a15      	ldr	r2, [pc, #84]	@ (810a24c <TIM_OC4_SetConfig+0xcc>)
 810a1f8:	4293      	cmp	r3, r2
 810a1fa:	d003      	beq.n	810a204 <TIM_OC4_SetConfig+0x84>
 810a1fc:	687b      	ldr	r3, [r7, #4]
 810a1fe:	4a14      	ldr	r2, [pc, #80]	@ (810a250 <TIM_OC4_SetConfig+0xd0>)
 810a200:	4293      	cmp	r3, r2
 810a202:	d109      	bne.n	810a218 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810a204:	697b      	ldr	r3, [r7, #20]
 810a206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810a20a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810a20c:	683b      	ldr	r3, [r7, #0]
 810a20e:	695b      	ldr	r3, [r3, #20]
 810a210:	019b      	lsls	r3, r3, #6
 810a212:	697a      	ldr	r2, [r7, #20]
 810a214:	4313      	orrs	r3, r2
 810a216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a218:	687b      	ldr	r3, [r7, #4]
 810a21a:	697a      	ldr	r2, [r7, #20]
 810a21c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	68fa      	ldr	r2, [r7, #12]
 810a222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810a224:	683b      	ldr	r3, [r7, #0]
 810a226:	685a      	ldr	r2, [r3, #4]
 810a228:	687b      	ldr	r3, [r7, #4]
 810a22a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a22c:	687b      	ldr	r3, [r7, #4]
 810a22e:	693a      	ldr	r2, [r7, #16]
 810a230:	621a      	str	r2, [r3, #32]
}
 810a232:	bf00      	nop
 810a234:	371c      	adds	r7, #28
 810a236:	46bd      	mov	sp, r7
 810a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a23c:	4770      	bx	lr
 810a23e:	bf00      	nop
 810a240:	40010000 	.word	0x40010000
 810a244:	40010400 	.word	0x40010400
 810a248:	40014000 	.word	0x40014000
 810a24c:	40014400 	.word	0x40014400
 810a250:	40014800 	.word	0x40014800

0810a254 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810a254:	b480      	push	{r7}
 810a256:	b087      	sub	sp, #28
 810a258:	af00      	add	r7, sp, #0
 810a25a:	6078      	str	r0, [r7, #4]
 810a25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a25e:	687b      	ldr	r3, [r7, #4]
 810a260:	6a1b      	ldr	r3, [r3, #32]
 810a262:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810a264:	687b      	ldr	r3, [r7, #4]
 810a266:	6a1b      	ldr	r3, [r3, #32]
 810a268:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810a26c:	687b      	ldr	r3, [r7, #4]
 810a26e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a270:	687b      	ldr	r3, [r7, #4]
 810a272:	685b      	ldr	r3, [r3, #4]
 810a274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a276:	687b      	ldr	r3, [r7, #4]
 810a278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810a27c:	68fb      	ldr	r3, [r7, #12]
 810a27e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a288:	683b      	ldr	r3, [r7, #0]
 810a28a:	681b      	ldr	r3, [r3, #0]
 810a28c:	68fa      	ldr	r2, [r7, #12]
 810a28e:	4313      	orrs	r3, r2
 810a290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810a292:	693b      	ldr	r3, [r7, #16]
 810a294:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810a298:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810a29a:	683b      	ldr	r3, [r7, #0]
 810a29c:	689b      	ldr	r3, [r3, #8]
 810a29e:	041b      	lsls	r3, r3, #16
 810a2a0:	693a      	ldr	r2, [r7, #16]
 810a2a2:	4313      	orrs	r3, r2
 810a2a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a2a6:	687b      	ldr	r3, [r7, #4]
 810a2a8:	4a17      	ldr	r2, [pc, #92]	@ (810a308 <TIM_OC5_SetConfig+0xb4>)
 810a2aa:	4293      	cmp	r3, r2
 810a2ac:	d00f      	beq.n	810a2ce <TIM_OC5_SetConfig+0x7a>
 810a2ae:	687b      	ldr	r3, [r7, #4]
 810a2b0:	4a16      	ldr	r2, [pc, #88]	@ (810a30c <TIM_OC5_SetConfig+0xb8>)
 810a2b2:	4293      	cmp	r3, r2
 810a2b4:	d00b      	beq.n	810a2ce <TIM_OC5_SetConfig+0x7a>
 810a2b6:	687b      	ldr	r3, [r7, #4]
 810a2b8:	4a15      	ldr	r2, [pc, #84]	@ (810a310 <TIM_OC5_SetConfig+0xbc>)
 810a2ba:	4293      	cmp	r3, r2
 810a2bc:	d007      	beq.n	810a2ce <TIM_OC5_SetConfig+0x7a>
 810a2be:	687b      	ldr	r3, [r7, #4]
 810a2c0:	4a14      	ldr	r2, [pc, #80]	@ (810a314 <TIM_OC5_SetConfig+0xc0>)
 810a2c2:	4293      	cmp	r3, r2
 810a2c4:	d003      	beq.n	810a2ce <TIM_OC5_SetConfig+0x7a>
 810a2c6:	687b      	ldr	r3, [r7, #4]
 810a2c8:	4a13      	ldr	r2, [pc, #76]	@ (810a318 <TIM_OC5_SetConfig+0xc4>)
 810a2ca:	4293      	cmp	r3, r2
 810a2cc:	d109      	bne.n	810a2e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810a2ce:	697b      	ldr	r3, [r7, #20]
 810a2d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a2d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810a2d6:	683b      	ldr	r3, [r7, #0]
 810a2d8:	695b      	ldr	r3, [r3, #20]
 810a2da:	021b      	lsls	r3, r3, #8
 810a2dc:	697a      	ldr	r2, [r7, #20]
 810a2de:	4313      	orrs	r3, r2
 810a2e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a2e2:	687b      	ldr	r3, [r7, #4]
 810a2e4:	697a      	ldr	r2, [r7, #20]
 810a2e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a2e8:	687b      	ldr	r3, [r7, #4]
 810a2ea:	68fa      	ldr	r2, [r7, #12]
 810a2ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810a2ee:	683b      	ldr	r3, [r7, #0]
 810a2f0:	685a      	ldr	r2, [r3, #4]
 810a2f2:	687b      	ldr	r3, [r7, #4]
 810a2f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a2f6:	687b      	ldr	r3, [r7, #4]
 810a2f8:	693a      	ldr	r2, [r7, #16]
 810a2fa:	621a      	str	r2, [r3, #32]
}
 810a2fc:	bf00      	nop
 810a2fe:	371c      	adds	r7, #28
 810a300:	46bd      	mov	sp, r7
 810a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a306:	4770      	bx	lr
 810a308:	40010000 	.word	0x40010000
 810a30c:	40010400 	.word	0x40010400
 810a310:	40014000 	.word	0x40014000
 810a314:	40014400 	.word	0x40014400
 810a318:	40014800 	.word	0x40014800

0810a31c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810a31c:	b480      	push	{r7}
 810a31e:	b087      	sub	sp, #28
 810a320:	af00      	add	r7, sp, #0
 810a322:	6078      	str	r0, [r7, #4]
 810a324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a326:	687b      	ldr	r3, [r7, #4]
 810a328:	6a1b      	ldr	r3, [r3, #32]
 810a32a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810a32c:	687b      	ldr	r3, [r7, #4]
 810a32e:	6a1b      	ldr	r3, [r3, #32]
 810a330:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810a334:	687b      	ldr	r3, [r7, #4]
 810a336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a338:	687b      	ldr	r3, [r7, #4]
 810a33a:	685b      	ldr	r3, [r3, #4]
 810a33c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a33e:	687b      	ldr	r3, [r7, #4]
 810a340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810a344:	68fb      	ldr	r3, [r7, #12]
 810a346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a34a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a34e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a350:	683b      	ldr	r3, [r7, #0]
 810a352:	681b      	ldr	r3, [r3, #0]
 810a354:	021b      	lsls	r3, r3, #8
 810a356:	68fa      	ldr	r2, [r7, #12]
 810a358:	4313      	orrs	r3, r2
 810a35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810a35c:	693b      	ldr	r3, [r7, #16]
 810a35e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810a362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810a364:	683b      	ldr	r3, [r7, #0]
 810a366:	689b      	ldr	r3, [r3, #8]
 810a368:	051b      	lsls	r3, r3, #20
 810a36a:	693a      	ldr	r2, [r7, #16]
 810a36c:	4313      	orrs	r3, r2
 810a36e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a370:	687b      	ldr	r3, [r7, #4]
 810a372:	4a18      	ldr	r2, [pc, #96]	@ (810a3d4 <TIM_OC6_SetConfig+0xb8>)
 810a374:	4293      	cmp	r3, r2
 810a376:	d00f      	beq.n	810a398 <TIM_OC6_SetConfig+0x7c>
 810a378:	687b      	ldr	r3, [r7, #4]
 810a37a:	4a17      	ldr	r2, [pc, #92]	@ (810a3d8 <TIM_OC6_SetConfig+0xbc>)
 810a37c:	4293      	cmp	r3, r2
 810a37e:	d00b      	beq.n	810a398 <TIM_OC6_SetConfig+0x7c>
 810a380:	687b      	ldr	r3, [r7, #4]
 810a382:	4a16      	ldr	r2, [pc, #88]	@ (810a3dc <TIM_OC6_SetConfig+0xc0>)
 810a384:	4293      	cmp	r3, r2
 810a386:	d007      	beq.n	810a398 <TIM_OC6_SetConfig+0x7c>
 810a388:	687b      	ldr	r3, [r7, #4]
 810a38a:	4a15      	ldr	r2, [pc, #84]	@ (810a3e0 <TIM_OC6_SetConfig+0xc4>)
 810a38c:	4293      	cmp	r3, r2
 810a38e:	d003      	beq.n	810a398 <TIM_OC6_SetConfig+0x7c>
 810a390:	687b      	ldr	r3, [r7, #4]
 810a392:	4a14      	ldr	r2, [pc, #80]	@ (810a3e4 <TIM_OC6_SetConfig+0xc8>)
 810a394:	4293      	cmp	r3, r2
 810a396:	d109      	bne.n	810a3ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810a398:	697b      	ldr	r3, [r7, #20]
 810a39a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810a39e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810a3a0:	683b      	ldr	r3, [r7, #0]
 810a3a2:	695b      	ldr	r3, [r3, #20]
 810a3a4:	029b      	lsls	r3, r3, #10
 810a3a6:	697a      	ldr	r2, [r7, #20]
 810a3a8:	4313      	orrs	r3, r2
 810a3aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a3ac:	687b      	ldr	r3, [r7, #4]
 810a3ae:	697a      	ldr	r2, [r7, #20]
 810a3b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a3b2:	687b      	ldr	r3, [r7, #4]
 810a3b4:	68fa      	ldr	r2, [r7, #12]
 810a3b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810a3b8:	683b      	ldr	r3, [r7, #0]
 810a3ba:	685a      	ldr	r2, [r3, #4]
 810a3bc:	687b      	ldr	r3, [r7, #4]
 810a3be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	693a      	ldr	r2, [r7, #16]
 810a3c4:	621a      	str	r2, [r3, #32]
}
 810a3c6:	bf00      	nop
 810a3c8:	371c      	adds	r7, #28
 810a3ca:	46bd      	mov	sp, r7
 810a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3d0:	4770      	bx	lr
 810a3d2:	bf00      	nop
 810a3d4:	40010000 	.word	0x40010000
 810a3d8:	40010400 	.word	0x40010400
 810a3dc:	40014000 	.word	0x40014000
 810a3e0:	40014400 	.word	0x40014400
 810a3e4:	40014800 	.word	0x40014800

0810a3e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810a3e8:	b480      	push	{r7}
 810a3ea:	b087      	sub	sp, #28
 810a3ec:	af00      	add	r7, sp, #0
 810a3ee:	60f8      	str	r0, [r7, #12]
 810a3f0:	60b9      	str	r1, [r7, #8]
 810a3f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810a3f4:	68fb      	ldr	r3, [r7, #12]
 810a3f6:	6a1b      	ldr	r3, [r3, #32]
 810a3f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a3fa:	68fb      	ldr	r3, [r7, #12]
 810a3fc:	6a1b      	ldr	r3, [r3, #32]
 810a3fe:	f023 0201 	bic.w	r2, r3, #1
 810a402:	68fb      	ldr	r3, [r7, #12]
 810a404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a406:	68fb      	ldr	r3, [r7, #12]
 810a408:	699b      	ldr	r3, [r3, #24]
 810a40a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810a40c:	693b      	ldr	r3, [r7, #16]
 810a40e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810a412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810a414:	687b      	ldr	r3, [r7, #4]
 810a416:	011b      	lsls	r3, r3, #4
 810a418:	693a      	ldr	r2, [r7, #16]
 810a41a:	4313      	orrs	r3, r2
 810a41c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810a41e:	697b      	ldr	r3, [r7, #20]
 810a420:	f023 030a 	bic.w	r3, r3, #10
 810a424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810a426:	697a      	ldr	r2, [r7, #20]
 810a428:	68bb      	ldr	r3, [r7, #8]
 810a42a:	4313      	orrs	r3, r2
 810a42c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810a42e:	68fb      	ldr	r3, [r7, #12]
 810a430:	693a      	ldr	r2, [r7, #16]
 810a432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a434:	68fb      	ldr	r3, [r7, #12]
 810a436:	697a      	ldr	r2, [r7, #20]
 810a438:	621a      	str	r2, [r3, #32]
}
 810a43a:	bf00      	nop
 810a43c:	371c      	adds	r7, #28
 810a43e:	46bd      	mov	sp, r7
 810a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a444:	4770      	bx	lr

0810a446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810a446:	b480      	push	{r7}
 810a448:	b087      	sub	sp, #28
 810a44a:	af00      	add	r7, sp, #0
 810a44c:	60f8      	str	r0, [r7, #12]
 810a44e:	60b9      	str	r1, [r7, #8]
 810a450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810a452:	68fb      	ldr	r3, [r7, #12]
 810a454:	6a1b      	ldr	r3, [r3, #32]
 810a456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a458:	68fb      	ldr	r3, [r7, #12]
 810a45a:	6a1b      	ldr	r3, [r3, #32]
 810a45c:	f023 0210 	bic.w	r2, r3, #16
 810a460:	68fb      	ldr	r3, [r7, #12]
 810a462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a464:	68fb      	ldr	r3, [r7, #12]
 810a466:	699b      	ldr	r3, [r3, #24]
 810a468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810a46a:	693b      	ldr	r3, [r7, #16]
 810a46c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810a470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810a472:	687b      	ldr	r3, [r7, #4]
 810a474:	031b      	lsls	r3, r3, #12
 810a476:	693a      	ldr	r2, [r7, #16]
 810a478:	4313      	orrs	r3, r2
 810a47a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810a47c:	697b      	ldr	r3, [r7, #20]
 810a47e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810a482:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810a484:	68bb      	ldr	r3, [r7, #8]
 810a486:	011b      	lsls	r3, r3, #4
 810a488:	697a      	ldr	r2, [r7, #20]
 810a48a:	4313      	orrs	r3, r2
 810a48c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810a48e:	68fb      	ldr	r3, [r7, #12]
 810a490:	693a      	ldr	r2, [r7, #16]
 810a492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a494:	68fb      	ldr	r3, [r7, #12]
 810a496:	697a      	ldr	r2, [r7, #20]
 810a498:	621a      	str	r2, [r3, #32]
}
 810a49a:	bf00      	nop
 810a49c:	371c      	adds	r7, #28
 810a49e:	46bd      	mov	sp, r7
 810a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4a4:	4770      	bx	lr

0810a4a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810a4a6:	b480      	push	{r7}
 810a4a8:	b085      	sub	sp, #20
 810a4aa:	af00      	add	r7, sp, #0
 810a4ac:	6078      	str	r0, [r7, #4]
 810a4ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810a4b0:	687b      	ldr	r3, [r7, #4]
 810a4b2:	689b      	ldr	r3, [r3, #8]
 810a4b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810a4b6:	68fb      	ldr	r3, [r7, #12]
 810a4b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810a4bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a4c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810a4c2:	683a      	ldr	r2, [r7, #0]
 810a4c4:	68fb      	ldr	r3, [r7, #12]
 810a4c6:	4313      	orrs	r3, r2
 810a4c8:	f043 0307 	orr.w	r3, r3, #7
 810a4cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	68fa      	ldr	r2, [r7, #12]
 810a4d2:	609a      	str	r2, [r3, #8]
}
 810a4d4:	bf00      	nop
 810a4d6:	3714      	adds	r7, #20
 810a4d8:	46bd      	mov	sp, r7
 810a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4de:	4770      	bx	lr

0810a4e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810a4e0:	b480      	push	{r7}
 810a4e2:	b087      	sub	sp, #28
 810a4e4:	af00      	add	r7, sp, #0
 810a4e6:	60f8      	str	r0, [r7, #12]
 810a4e8:	60b9      	str	r1, [r7, #8]
 810a4ea:	607a      	str	r2, [r7, #4]
 810a4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810a4ee:	68fb      	ldr	r3, [r7, #12]
 810a4f0:	689b      	ldr	r3, [r3, #8]
 810a4f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810a4f4:	697b      	ldr	r3, [r7, #20]
 810a4f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a4fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810a4fc:	683b      	ldr	r3, [r7, #0]
 810a4fe:	021a      	lsls	r2, r3, #8
 810a500:	687b      	ldr	r3, [r7, #4]
 810a502:	431a      	orrs	r2, r3
 810a504:	68bb      	ldr	r3, [r7, #8]
 810a506:	4313      	orrs	r3, r2
 810a508:	697a      	ldr	r2, [r7, #20]
 810a50a:	4313      	orrs	r3, r2
 810a50c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810a50e:	68fb      	ldr	r3, [r7, #12]
 810a510:	697a      	ldr	r2, [r7, #20]
 810a512:	609a      	str	r2, [r3, #8]
}
 810a514:	bf00      	nop
 810a516:	371c      	adds	r7, #28
 810a518:	46bd      	mov	sp, r7
 810a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a51e:	4770      	bx	lr

0810a520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810a520:	b480      	push	{r7}
 810a522:	b087      	sub	sp, #28
 810a524:	af00      	add	r7, sp, #0
 810a526:	60f8      	str	r0, [r7, #12]
 810a528:	60b9      	str	r1, [r7, #8]
 810a52a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810a52c:	68bb      	ldr	r3, [r7, #8]
 810a52e:	f003 031f 	and.w	r3, r3, #31
 810a532:	2201      	movs	r2, #1
 810a534:	fa02 f303 	lsl.w	r3, r2, r3
 810a538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810a53a:	68fb      	ldr	r3, [r7, #12]
 810a53c:	6a1a      	ldr	r2, [r3, #32]
 810a53e:	697b      	ldr	r3, [r7, #20]
 810a540:	43db      	mvns	r3, r3
 810a542:	401a      	ands	r2, r3
 810a544:	68fb      	ldr	r3, [r7, #12]
 810a546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810a548:	68fb      	ldr	r3, [r7, #12]
 810a54a:	6a1a      	ldr	r2, [r3, #32]
 810a54c:	68bb      	ldr	r3, [r7, #8]
 810a54e:	f003 031f 	and.w	r3, r3, #31
 810a552:	6879      	ldr	r1, [r7, #4]
 810a554:	fa01 f303 	lsl.w	r3, r1, r3
 810a558:	431a      	orrs	r2, r3
 810a55a:	68fb      	ldr	r3, [r7, #12]
 810a55c:	621a      	str	r2, [r3, #32]
}
 810a55e:	bf00      	nop
 810a560:	371c      	adds	r7, #28
 810a562:	46bd      	mov	sp, r7
 810a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a568:	4770      	bx	lr
	...

0810a56c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810a56c:	b480      	push	{r7}
 810a56e:	b085      	sub	sp, #20
 810a570:	af00      	add	r7, sp, #0
 810a572:	6078      	str	r0, [r7, #4]
 810a574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810a576:	687b      	ldr	r3, [r7, #4]
 810a578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a57c:	2b01      	cmp	r3, #1
 810a57e:	d101      	bne.n	810a584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810a580:	2302      	movs	r3, #2
 810a582:	e06d      	b.n	810a660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	2201      	movs	r2, #1
 810a588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a58c:	687b      	ldr	r3, [r7, #4]
 810a58e:	2202      	movs	r2, #2
 810a590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810a594:	687b      	ldr	r3, [r7, #4]
 810a596:	681b      	ldr	r3, [r3, #0]
 810a598:	685b      	ldr	r3, [r3, #4]
 810a59a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810a59c:	687b      	ldr	r3, [r7, #4]
 810a59e:	681b      	ldr	r3, [r3, #0]
 810a5a0:	689b      	ldr	r3, [r3, #8]
 810a5a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810a5a4:	687b      	ldr	r3, [r7, #4]
 810a5a6:	681b      	ldr	r3, [r3, #0]
 810a5a8:	4a30      	ldr	r2, [pc, #192]	@ (810a66c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a5aa:	4293      	cmp	r3, r2
 810a5ac:	d004      	beq.n	810a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810a5ae:	687b      	ldr	r3, [r7, #4]
 810a5b0:	681b      	ldr	r3, [r3, #0]
 810a5b2:	4a2f      	ldr	r2, [pc, #188]	@ (810a670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a5b4:	4293      	cmp	r3, r2
 810a5b6:	d108      	bne.n	810a5ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810a5b8:	68fb      	ldr	r3, [r7, #12]
 810a5ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810a5be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810a5c0:	683b      	ldr	r3, [r7, #0]
 810a5c2:	685b      	ldr	r3, [r3, #4]
 810a5c4:	68fa      	ldr	r2, [r7, #12]
 810a5c6:	4313      	orrs	r3, r2
 810a5c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810a5ca:	68fb      	ldr	r3, [r7, #12]
 810a5cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a5d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810a5d2:	683b      	ldr	r3, [r7, #0]
 810a5d4:	681b      	ldr	r3, [r3, #0]
 810a5d6:	68fa      	ldr	r2, [r7, #12]
 810a5d8:	4313      	orrs	r3, r2
 810a5da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810a5dc:	687b      	ldr	r3, [r7, #4]
 810a5de:	681b      	ldr	r3, [r3, #0]
 810a5e0:	68fa      	ldr	r2, [r7, #12]
 810a5e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	681b      	ldr	r3, [r3, #0]
 810a5e8:	4a20      	ldr	r2, [pc, #128]	@ (810a66c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a5ea:	4293      	cmp	r3, r2
 810a5ec:	d022      	beq.n	810a634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a5ee:	687b      	ldr	r3, [r7, #4]
 810a5f0:	681b      	ldr	r3, [r3, #0]
 810a5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a5f6:	d01d      	beq.n	810a634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a5f8:	687b      	ldr	r3, [r7, #4]
 810a5fa:	681b      	ldr	r3, [r3, #0]
 810a5fc:	4a1d      	ldr	r2, [pc, #116]	@ (810a674 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810a5fe:	4293      	cmp	r3, r2
 810a600:	d018      	beq.n	810a634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a602:	687b      	ldr	r3, [r7, #4]
 810a604:	681b      	ldr	r3, [r3, #0]
 810a606:	4a1c      	ldr	r2, [pc, #112]	@ (810a678 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810a608:	4293      	cmp	r3, r2
 810a60a:	d013      	beq.n	810a634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a60c:	687b      	ldr	r3, [r7, #4]
 810a60e:	681b      	ldr	r3, [r3, #0]
 810a610:	4a1a      	ldr	r2, [pc, #104]	@ (810a67c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810a612:	4293      	cmp	r3, r2
 810a614:	d00e      	beq.n	810a634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a616:	687b      	ldr	r3, [r7, #4]
 810a618:	681b      	ldr	r3, [r3, #0]
 810a61a:	4a15      	ldr	r2, [pc, #84]	@ (810a670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a61c:	4293      	cmp	r3, r2
 810a61e:	d009      	beq.n	810a634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a620:	687b      	ldr	r3, [r7, #4]
 810a622:	681b      	ldr	r3, [r3, #0]
 810a624:	4a16      	ldr	r2, [pc, #88]	@ (810a680 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810a626:	4293      	cmp	r3, r2
 810a628:	d004      	beq.n	810a634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a62a:	687b      	ldr	r3, [r7, #4]
 810a62c:	681b      	ldr	r3, [r3, #0]
 810a62e:	4a15      	ldr	r2, [pc, #84]	@ (810a684 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810a630:	4293      	cmp	r3, r2
 810a632:	d10c      	bne.n	810a64e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810a634:	68bb      	ldr	r3, [r7, #8]
 810a636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a63a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810a63c:	683b      	ldr	r3, [r7, #0]
 810a63e:	689b      	ldr	r3, [r3, #8]
 810a640:	68ba      	ldr	r2, [r7, #8]
 810a642:	4313      	orrs	r3, r2
 810a644:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810a646:	687b      	ldr	r3, [r7, #4]
 810a648:	681b      	ldr	r3, [r3, #0]
 810a64a:	68ba      	ldr	r2, [r7, #8]
 810a64c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810a64e:	687b      	ldr	r3, [r7, #4]
 810a650:	2201      	movs	r2, #1
 810a652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	2200      	movs	r2, #0
 810a65a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810a65e:	2300      	movs	r3, #0
}
 810a660:	4618      	mov	r0, r3
 810a662:	3714      	adds	r7, #20
 810a664:	46bd      	mov	sp, r7
 810a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a66a:	4770      	bx	lr
 810a66c:	40010000 	.word	0x40010000
 810a670:	40010400 	.word	0x40010400
 810a674:	40000400 	.word	0x40000400
 810a678:	40000800 	.word	0x40000800
 810a67c:	40000c00 	.word	0x40000c00
 810a680:	40001800 	.word	0x40001800
 810a684:	40014000 	.word	0x40014000

0810a688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810a688:	b480      	push	{r7}
 810a68a:	b085      	sub	sp, #20
 810a68c:	af00      	add	r7, sp, #0
 810a68e:	6078      	str	r0, [r7, #4]
 810a690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810a692:	2300      	movs	r3, #0
 810a694:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810a696:	687b      	ldr	r3, [r7, #4]
 810a698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a69c:	2b01      	cmp	r3, #1
 810a69e:	d101      	bne.n	810a6a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810a6a0:	2302      	movs	r3, #2
 810a6a2:	e065      	b.n	810a770 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810a6a4:	687b      	ldr	r3, [r7, #4]
 810a6a6:	2201      	movs	r2, #1
 810a6a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810a6ac:	68fb      	ldr	r3, [r7, #12]
 810a6ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810a6b2:	683b      	ldr	r3, [r7, #0]
 810a6b4:	68db      	ldr	r3, [r3, #12]
 810a6b6:	4313      	orrs	r3, r2
 810a6b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810a6ba:	68fb      	ldr	r3, [r7, #12]
 810a6bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810a6c0:	683b      	ldr	r3, [r7, #0]
 810a6c2:	689b      	ldr	r3, [r3, #8]
 810a6c4:	4313      	orrs	r3, r2
 810a6c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810a6c8:	68fb      	ldr	r3, [r7, #12]
 810a6ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810a6ce:	683b      	ldr	r3, [r7, #0]
 810a6d0:	685b      	ldr	r3, [r3, #4]
 810a6d2:	4313      	orrs	r3, r2
 810a6d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810a6d6:	68fb      	ldr	r3, [r7, #12]
 810a6d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810a6dc:	683b      	ldr	r3, [r7, #0]
 810a6de:	681b      	ldr	r3, [r3, #0]
 810a6e0:	4313      	orrs	r3, r2
 810a6e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810a6e4:	68fb      	ldr	r3, [r7, #12]
 810a6e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a6ea:	683b      	ldr	r3, [r7, #0]
 810a6ec:	691b      	ldr	r3, [r3, #16]
 810a6ee:	4313      	orrs	r3, r2
 810a6f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810a6f2:	68fb      	ldr	r3, [r7, #12]
 810a6f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810a6f8:	683b      	ldr	r3, [r7, #0]
 810a6fa:	695b      	ldr	r3, [r3, #20]
 810a6fc:	4313      	orrs	r3, r2
 810a6fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810a700:	68fb      	ldr	r3, [r7, #12]
 810a702:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810a706:	683b      	ldr	r3, [r7, #0]
 810a708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a70a:	4313      	orrs	r3, r2
 810a70c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810a70e:	68fb      	ldr	r3, [r7, #12]
 810a710:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810a714:	683b      	ldr	r3, [r7, #0]
 810a716:	699b      	ldr	r3, [r3, #24]
 810a718:	041b      	lsls	r3, r3, #16
 810a71a:	4313      	orrs	r3, r2
 810a71c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810a71e:	687b      	ldr	r3, [r7, #4]
 810a720:	681b      	ldr	r3, [r3, #0]
 810a722:	4a16      	ldr	r2, [pc, #88]	@ (810a77c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810a724:	4293      	cmp	r3, r2
 810a726:	d004      	beq.n	810a732 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810a728:	687b      	ldr	r3, [r7, #4]
 810a72a:	681b      	ldr	r3, [r3, #0]
 810a72c:	4a14      	ldr	r2, [pc, #80]	@ (810a780 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810a72e:	4293      	cmp	r3, r2
 810a730:	d115      	bne.n	810a75e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810a732:	68fb      	ldr	r3, [r7, #12]
 810a734:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810a738:	683b      	ldr	r3, [r7, #0]
 810a73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a73c:	051b      	lsls	r3, r3, #20
 810a73e:	4313      	orrs	r3, r2
 810a740:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810a742:	68fb      	ldr	r3, [r7, #12]
 810a744:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810a748:	683b      	ldr	r3, [r7, #0]
 810a74a:	69db      	ldr	r3, [r3, #28]
 810a74c:	4313      	orrs	r3, r2
 810a74e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810a750:	68fb      	ldr	r3, [r7, #12]
 810a752:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810a756:	683b      	ldr	r3, [r7, #0]
 810a758:	6a1b      	ldr	r3, [r3, #32]
 810a75a:	4313      	orrs	r3, r2
 810a75c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810a75e:	687b      	ldr	r3, [r7, #4]
 810a760:	681b      	ldr	r3, [r3, #0]
 810a762:	68fa      	ldr	r2, [r7, #12]
 810a764:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810a766:	687b      	ldr	r3, [r7, #4]
 810a768:	2200      	movs	r2, #0
 810a76a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810a76e:	2300      	movs	r3, #0
}
 810a770:	4618      	mov	r0, r3
 810a772:	3714      	adds	r7, #20
 810a774:	46bd      	mov	sp, r7
 810a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a77a:	4770      	bx	lr
 810a77c:	40010000 	.word	0x40010000
 810a780:	40010400 	.word	0x40010400

0810a784 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810a784:	b480      	push	{r7}
 810a786:	b083      	sub	sp, #12
 810a788:	af00      	add	r7, sp, #0
 810a78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810a78c:	bf00      	nop
 810a78e:	370c      	adds	r7, #12
 810a790:	46bd      	mov	sp, r7
 810a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a796:	4770      	bx	lr

0810a798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810a798:	b480      	push	{r7}
 810a79a:	b083      	sub	sp, #12
 810a79c:	af00      	add	r7, sp, #0
 810a79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810a7a0:	bf00      	nop
 810a7a2:	370c      	adds	r7, #12
 810a7a4:	46bd      	mov	sp, r7
 810a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7aa:	4770      	bx	lr

0810a7ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810a7ac:	b480      	push	{r7}
 810a7ae:	b083      	sub	sp, #12
 810a7b0:	af00      	add	r7, sp, #0
 810a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810a7b4:	bf00      	nop
 810a7b6:	370c      	adds	r7, #12
 810a7b8:	46bd      	mov	sp, r7
 810a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7be:	4770      	bx	lr

0810a7c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810a7c0:	b580      	push	{r7, lr}
 810a7c2:	b082      	sub	sp, #8
 810a7c4:	af00      	add	r7, sp, #0
 810a7c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810a7c8:	687b      	ldr	r3, [r7, #4]
 810a7ca:	2b00      	cmp	r3, #0
 810a7cc:	d101      	bne.n	810a7d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810a7ce:	2301      	movs	r3, #1
 810a7d0:	e042      	b.n	810a858 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810a7d2:	687b      	ldr	r3, [r7, #4]
 810a7d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a7d8:	2b00      	cmp	r3, #0
 810a7da:	d106      	bne.n	810a7ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810a7dc:	687b      	ldr	r3, [r7, #4]
 810a7de:	2200      	movs	r2, #0
 810a7e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810a7e4:	6878      	ldr	r0, [r7, #4]
 810a7e6:	f7f8 fc7f 	bl	81030e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810a7ea:	687b      	ldr	r3, [r7, #4]
 810a7ec:	2224      	movs	r2, #36	@ 0x24
 810a7ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810a7f2:	687b      	ldr	r3, [r7, #4]
 810a7f4:	681b      	ldr	r3, [r3, #0]
 810a7f6:	681a      	ldr	r2, [r3, #0]
 810a7f8:	687b      	ldr	r3, [r7, #4]
 810a7fa:	681b      	ldr	r3, [r3, #0]
 810a7fc:	f022 0201 	bic.w	r2, r2, #1
 810a800:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810a802:	687b      	ldr	r3, [r7, #4]
 810a804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a806:	2b00      	cmp	r3, #0
 810a808:	d002      	beq.n	810a810 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810a80a:	6878      	ldr	r0, [r7, #4]
 810a80c:	f000 fee6 	bl	810b5dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810a810:	6878      	ldr	r0, [r7, #4]
 810a812:	f000 f97b 	bl	810ab0c <UART_SetConfig>
 810a816:	4603      	mov	r3, r0
 810a818:	2b01      	cmp	r3, #1
 810a81a:	d101      	bne.n	810a820 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810a81c:	2301      	movs	r3, #1
 810a81e:	e01b      	b.n	810a858 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810a820:	687b      	ldr	r3, [r7, #4]
 810a822:	681b      	ldr	r3, [r3, #0]
 810a824:	685a      	ldr	r2, [r3, #4]
 810a826:	687b      	ldr	r3, [r7, #4]
 810a828:	681b      	ldr	r3, [r3, #0]
 810a82a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810a82e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810a830:	687b      	ldr	r3, [r7, #4]
 810a832:	681b      	ldr	r3, [r3, #0]
 810a834:	689a      	ldr	r2, [r3, #8]
 810a836:	687b      	ldr	r3, [r7, #4]
 810a838:	681b      	ldr	r3, [r3, #0]
 810a83a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810a83e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810a840:	687b      	ldr	r3, [r7, #4]
 810a842:	681b      	ldr	r3, [r3, #0]
 810a844:	681a      	ldr	r2, [r3, #0]
 810a846:	687b      	ldr	r3, [r7, #4]
 810a848:	681b      	ldr	r3, [r3, #0]
 810a84a:	f042 0201 	orr.w	r2, r2, #1
 810a84e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810a850:	6878      	ldr	r0, [r7, #4]
 810a852:	f000 ff65 	bl	810b720 <UART_CheckIdleState>
 810a856:	4603      	mov	r3, r0
}
 810a858:	4618      	mov	r0, r3
 810a85a:	3708      	adds	r7, #8
 810a85c:	46bd      	mov	sp, r7
 810a85e:	bd80      	pop	{r7, pc}

0810a860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810a860:	b580      	push	{r7, lr}
 810a862:	b08a      	sub	sp, #40	@ 0x28
 810a864:	af02      	add	r7, sp, #8
 810a866:	60f8      	str	r0, [r7, #12]
 810a868:	60b9      	str	r1, [r7, #8]
 810a86a:	603b      	str	r3, [r7, #0]
 810a86c:	4613      	mov	r3, r2
 810a86e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810a870:	68fb      	ldr	r3, [r7, #12]
 810a872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a876:	2b20      	cmp	r3, #32
 810a878:	d17b      	bne.n	810a972 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810a87a:	68bb      	ldr	r3, [r7, #8]
 810a87c:	2b00      	cmp	r3, #0
 810a87e:	d002      	beq.n	810a886 <HAL_UART_Transmit+0x26>
 810a880:	88fb      	ldrh	r3, [r7, #6]
 810a882:	2b00      	cmp	r3, #0
 810a884:	d101      	bne.n	810a88a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810a886:	2301      	movs	r3, #1
 810a888:	e074      	b.n	810a974 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a88a:	68fb      	ldr	r3, [r7, #12]
 810a88c:	2200      	movs	r2, #0
 810a88e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810a892:	68fb      	ldr	r3, [r7, #12]
 810a894:	2221      	movs	r2, #33	@ 0x21
 810a896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810a89a:	f7f8 fe69 	bl	8103570 <HAL_GetTick>
 810a89e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810a8a0:	68fb      	ldr	r3, [r7, #12]
 810a8a2:	88fa      	ldrh	r2, [r7, #6]
 810a8a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810a8a8:	68fb      	ldr	r3, [r7, #12]
 810a8aa:	88fa      	ldrh	r2, [r7, #6]
 810a8ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810a8b0:	68fb      	ldr	r3, [r7, #12]
 810a8b2:	689b      	ldr	r3, [r3, #8]
 810a8b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a8b8:	d108      	bne.n	810a8cc <HAL_UART_Transmit+0x6c>
 810a8ba:	68fb      	ldr	r3, [r7, #12]
 810a8bc:	691b      	ldr	r3, [r3, #16]
 810a8be:	2b00      	cmp	r3, #0
 810a8c0:	d104      	bne.n	810a8cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810a8c2:	2300      	movs	r3, #0
 810a8c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810a8c6:	68bb      	ldr	r3, [r7, #8]
 810a8c8:	61bb      	str	r3, [r7, #24]
 810a8ca:	e003      	b.n	810a8d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810a8cc:	68bb      	ldr	r3, [r7, #8]
 810a8ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810a8d0:	2300      	movs	r3, #0
 810a8d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810a8d4:	e030      	b.n	810a938 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810a8d6:	683b      	ldr	r3, [r7, #0]
 810a8d8:	9300      	str	r3, [sp, #0]
 810a8da:	697b      	ldr	r3, [r7, #20]
 810a8dc:	2200      	movs	r2, #0
 810a8de:	2180      	movs	r1, #128	@ 0x80
 810a8e0:	68f8      	ldr	r0, [r7, #12]
 810a8e2:	f000 ffc7 	bl	810b874 <UART_WaitOnFlagUntilTimeout>
 810a8e6:	4603      	mov	r3, r0
 810a8e8:	2b00      	cmp	r3, #0
 810a8ea:	d005      	beq.n	810a8f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810a8ec:	68fb      	ldr	r3, [r7, #12]
 810a8ee:	2220      	movs	r2, #32
 810a8f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810a8f4:	2303      	movs	r3, #3
 810a8f6:	e03d      	b.n	810a974 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810a8f8:	69fb      	ldr	r3, [r7, #28]
 810a8fa:	2b00      	cmp	r3, #0
 810a8fc:	d10b      	bne.n	810a916 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810a8fe:	69bb      	ldr	r3, [r7, #24]
 810a900:	881b      	ldrh	r3, [r3, #0]
 810a902:	461a      	mov	r2, r3
 810a904:	68fb      	ldr	r3, [r7, #12]
 810a906:	681b      	ldr	r3, [r3, #0]
 810a908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810a90c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810a90e:	69bb      	ldr	r3, [r7, #24]
 810a910:	3302      	adds	r3, #2
 810a912:	61bb      	str	r3, [r7, #24]
 810a914:	e007      	b.n	810a926 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810a916:	69fb      	ldr	r3, [r7, #28]
 810a918:	781a      	ldrb	r2, [r3, #0]
 810a91a:	68fb      	ldr	r3, [r7, #12]
 810a91c:	681b      	ldr	r3, [r3, #0]
 810a91e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810a920:	69fb      	ldr	r3, [r7, #28]
 810a922:	3301      	adds	r3, #1
 810a924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810a926:	68fb      	ldr	r3, [r7, #12]
 810a928:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810a92c:	b29b      	uxth	r3, r3
 810a92e:	3b01      	subs	r3, #1
 810a930:	b29a      	uxth	r2, r3
 810a932:	68fb      	ldr	r3, [r7, #12]
 810a934:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810a938:	68fb      	ldr	r3, [r7, #12]
 810a93a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810a93e:	b29b      	uxth	r3, r3
 810a940:	2b00      	cmp	r3, #0
 810a942:	d1c8      	bne.n	810a8d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810a944:	683b      	ldr	r3, [r7, #0]
 810a946:	9300      	str	r3, [sp, #0]
 810a948:	697b      	ldr	r3, [r7, #20]
 810a94a:	2200      	movs	r2, #0
 810a94c:	2140      	movs	r1, #64	@ 0x40
 810a94e:	68f8      	ldr	r0, [r7, #12]
 810a950:	f000 ff90 	bl	810b874 <UART_WaitOnFlagUntilTimeout>
 810a954:	4603      	mov	r3, r0
 810a956:	2b00      	cmp	r3, #0
 810a958:	d005      	beq.n	810a966 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810a95a:	68fb      	ldr	r3, [r7, #12]
 810a95c:	2220      	movs	r2, #32
 810a95e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810a962:	2303      	movs	r3, #3
 810a964:	e006      	b.n	810a974 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810a966:	68fb      	ldr	r3, [r7, #12]
 810a968:	2220      	movs	r2, #32
 810a96a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810a96e:	2300      	movs	r3, #0
 810a970:	e000      	b.n	810a974 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810a972:	2302      	movs	r3, #2
  }
}
 810a974:	4618      	mov	r0, r3
 810a976:	3720      	adds	r7, #32
 810a978:	46bd      	mov	sp, r7
 810a97a:	bd80      	pop	{r7, pc}

0810a97c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810a97c:	b580      	push	{r7, lr}
 810a97e:	b08a      	sub	sp, #40	@ 0x28
 810a980:	af02      	add	r7, sp, #8
 810a982:	60f8      	str	r0, [r7, #12]
 810a984:	60b9      	str	r1, [r7, #8]
 810a986:	603b      	str	r3, [r7, #0]
 810a988:	4613      	mov	r3, r2
 810a98a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810a98c:	68fb      	ldr	r3, [r7, #12]
 810a98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810a992:	2b20      	cmp	r3, #32
 810a994:	f040 80b5 	bne.w	810ab02 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810a998:	68bb      	ldr	r3, [r7, #8]
 810a99a:	2b00      	cmp	r3, #0
 810a99c:	d002      	beq.n	810a9a4 <HAL_UART_Receive+0x28>
 810a99e:	88fb      	ldrh	r3, [r7, #6]
 810a9a0:	2b00      	cmp	r3, #0
 810a9a2:	d101      	bne.n	810a9a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810a9a4:	2301      	movs	r3, #1
 810a9a6:	e0ad      	b.n	810ab04 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a9a8:	68fb      	ldr	r3, [r7, #12]
 810a9aa:	2200      	movs	r2, #0
 810a9ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810a9b0:	68fb      	ldr	r3, [r7, #12]
 810a9b2:	2222      	movs	r2, #34	@ 0x22
 810a9b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a9b8:	68fb      	ldr	r3, [r7, #12]
 810a9ba:	2200      	movs	r2, #0
 810a9bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810a9be:	f7f8 fdd7 	bl	8103570 <HAL_GetTick>
 810a9c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810a9c4:	68fb      	ldr	r3, [r7, #12]
 810a9c6:	88fa      	ldrh	r2, [r7, #6]
 810a9c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810a9cc:	68fb      	ldr	r3, [r7, #12]
 810a9ce:	88fa      	ldrh	r2, [r7, #6]
 810a9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810a9d4:	68fb      	ldr	r3, [r7, #12]
 810a9d6:	689b      	ldr	r3, [r3, #8]
 810a9d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a9dc:	d10e      	bne.n	810a9fc <HAL_UART_Receive+0x80>
 810a9de:	68fb      	ldr	r3, [r7, #12]
 810a9e0:	691b      	ldr	r3, [r3, #16]
 810a9e2:	2b00      	cmp	r3, #0
 810a9e4:	d105      	bne.n	810a9f2 <HAL_UART_Receive+0x76>
 810a9e6:	68fb      	ldr	r3, [r7, #12]
 810a9e8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810a9ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a9f0:	e02d      	b.n	810aa4e <HAL_UART_Receive+0xd2>
 810a9f2:	68fb      	ldr	r3, [r7, #12]
 810a9f4:	22ff      	movs	r2, #255	@ 0xff
 810a9f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a9fa:	e028      	b.n	810aa4e <HAL_UART_Receive+0xd2>
 810a9fc:	68fb      	ldr	r3, [r7, #12]
 810a9fe:	689b      	ldr	r3, [r3, #8]
 810aa00:	2b00      	cmp	r3, #0
 810aa02:	d10d      	bne.n	810aa20 <HAL_UART_Receive+0xa4>
 810aa04:	68fb      	ldr	r3, [r7, #12]
 810aa06:	691b      	ldr	r3, [r3, #16]
 810aa08:	2b00      	cmp	r3, #0
 810aa0a:	d104      	bne.n	810aa16 <HAL_UART_Receive+0x9a>
 810aa0c:	68fb      	ldr	r3, [r7, #12]
 810aa0e:	22ff      	movs	r2, #255	@ 0xff
 810aa10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810aa14:	e01b      	b.n	810aa4e <HAL_UART_Receive+0xd2>
 810aa16:	68fb      	ldr	r3, [r7, #12]
 810aa18:	227f      	movs	r2, #127	@ 0x7f
 810aa1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810aa1e:	e016      	b.n	810aa4e <HAL_UART_Receive+0xd2>
 810aa20:	68fb      	ldr	r3, [r7, #12]
 810aa22:	689b      	ldr	r3, [r3, #8]
 810aa24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810aa28:	d10d      	bne.n	810aa46 <HAL_UART_Receive+0xca>
 810aa2a:	68fb      	ldr	r3, [r7, #12]
 810aa2c:	691b      	ldr	r3, [r3, #16]
 810aa2e:	2b00      	cmp	r3, #0
 810aa30:	d104      	bne.n	810aa3c <HAL_UART_Receive+0xc0>
 810aa32:	68fb      	ldr	r3, [r7, #12]
 810aa34:	227f      	movs	r2, #127	@ 0x7f
 810aa36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810aa3a:	e008      	b.n	810aa4e <HAL_UART_Receive+0xd2>
 810aa3c:	68fb      	ldr	r3, [r7, #12]
 810aa3e:	223f      	movs	r2, #63	@ 0x3f
 810aa40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810aa44:	e003      	b.n	810aa4e <HAL_UART_Receive+0xd2>
 810aa46:	68fb      	ldr	r3, [r7, #12]
 810aa48:	2200      	movs	r2, #0
 810aa4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810aa4e:	68fb      	ldr	r3, [r7, #12]
 810aa50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810aa54:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810aa56:	68fb      	ldr	r3, [r7, #12]
 810aa58:	689b      	ldr	r3, [r3, #8]
 810aa5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810aa5e:	d108      	bne.n	810aa72 <HAL_UART_Receive+0xf6>
 810aa60:	68fb      	ldr	r3, [r7, #12]
 810aa62:	691b      	ldr	r3, [r3, #16]
 810aa64:	2b00      	cmp	r3, #0
 810aa66:	d104      	bne.n	810aa72 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810aa68:	2300      	movs	r3, #0
 810aa6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810aa6c:	68bb      	ldr	r3, [r7, #8]
 810aa6e:	61bb      	str	r3, [r7, #24]
 810aa70:	e003      	b.n	810aa7a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810aa72:	68bb      	ldr	r3, [r7, #8]
 810aa74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810aa76:	2300      	movs	r3, #0
 810aa78:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810aa7a:	e036      	b.n	810aaea <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810aa7c:	683b      	ldr	r3, [r7, #0]
 810aa7e:	9300      	str	r3, [sp, #0]
 810aa80:	697b      	ldr	r3, [r7, #20]
 810aa82:	2200      	movs	r2, #0
 810aa84:	2120      	movs	r1, #32
 810aa86:	68f8      	ldr	r0, [r7, #12]
 810aa88:	f000 fef4 	bl	810b874 <UART_WaitOnFlagUntilTimeout>
 810aa8c:	4603      	mov	r3, r0
 810aa8e:	2b00      	cmp	r3, #0
 810aa90:	d005      	beq.n	810aa9e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810aa92:	68fb      	ldr	r3, [r7, #12]
 810aa94:	2220      	movs	r2, #32
 810aa96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810aa9a:	2303      	movs	r3, #3
 810aa9c:	e032      	b.n	810ab04 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810aa9e:	69fb      	ldr	r3, [r7, #28]
 810aaa0:	2b00      	cmp	r3, #0
 810aaa2:	d10c      	bne.n	810aabe <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810aaa4:	68fb      	ldr	r3, [r7, #12]
 810aaa6:	681b      	ldr	r3, [r3, #0]
 810aaa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aaaa:	b29a      	uxth	r2, r3
 810aaac:	8a7b      	ldrh	r3, [r7, #18]
 810aaae:	4013      	ands	r3, r2
 810aab0:	b29a      	uxth	r2, r3
 810aab2:	69bb      	ldr	r3, [r7, #24]
 810aab4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810aab6:	69bb      	ldr	r3, [r7, #24]
 810aab8:	3302      	adds	r3, #2
 810aaba:	61bb      	str	r3, [r7, #24]
 810aabc:	e00c      	b.n	810aad8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810aabe:	68fb      	ldr	r3, [r7, #12]
 810aac0:	681b      	ldr	r3, [r3, #0]
 810aac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aac4:	b2da      	uxtb	r2, r3
 810aac6:	8a7b      	ldrh	r3, [r7, #18]
 810aac8:	b2db      	uxtb	r3, r3
 810aaca:	4013      	ands	r3, r2
 810aacc:	b2da      	uxtb	r2, r3
 810aace:	69fb      	ldr	r3, [r7, #28]
 810aad0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810aad2:	69fb      	ldr	r3, [r7, #28]
 810aad4:	3301      	adds	r3, #1
 810aad6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810aad8:	68fb      	ldr	r3, [r7, #12]
 810aada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810aade:	b29b      	uxth	r3, r3
 810aae0:	3b01      	subs	r3, #1
 810aae2:	b29a      	uxth	r2, r3
 810aae4:	68fb      	ldr	r3, [r7, #12]
 810aae6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810aaea:	68fb      	ldr	r3, [r7, #12]
 810aaec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810aaf0:	b29b      	uxth	r3, r3
 810aaf2:	2b00      	cmp	r3, #0
 810aaf4:	d1c2      	bne.n	810aa7c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810aaf6:	68fb      	ldr	r3, [r7, #12]
 810aaf8:	2220      	movs	r2, #32
 810aafa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810aafe:	2300      	movs	r3, #0
 810ab00:	e000      	b.n	810ab04 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810ab02:	2302      	movs	r3, #2
  }
}
 810ab04:	4618      	mov	r0, r3
 810ab06:	3720      	adds	r7, #32
 810ab08:	46bd      	mov	sp, r7
 810ab0a:	bd80      	pop	{r7, pc}

0810ab0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810ab0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810ab10:	b092      	sub	sp, #72	@ 0x48
 810ab12:	af00      	add	r7, sp, #0
 810ab14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810ab16:	2300      	movs	r3, #0
 810ab18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810ab1c:	697b      	ldr	r3, [r7, #20]
 810ab1e:	689a      	ldr	r2, [r3, #8]
 810ab20:	697b      	ldr	r3, [r7, #20]
 810ab22:	691b      	ldr	r3, [r3, #16]
 810ab24:	431a      	orrs	r2, r3
 810ab26:	697b      	ldr	r3, [r7, #20]
 810ab28:	695b      	ldr	r3, [r3, #20]
 810ab2a:	431a      	orrs	r2, r3
 810ab2c:	697b      	ldr	r3, [r7, #20]
 810ab2e:	69db      	ldr	r3, [r3, #28]
 810ab30:	4313      	orrs	r3, r2
 810ab32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810ab34:	697b      	ldr	r3, [r7, #20]
 810ab36:	681b      	ldr	r3, [r3, #0]
 810ab38:	681a      	ldr	r2, [r3, #0]
 810ab3a:	4bbd      	ldr	r3, [pc, #756]	@ (810ae30 <UART_SetConfig+0x324>)
 810ab3c:	4013      	ands	r3, r2
 810ab3e:	697a      	ldr	r2, [r7, #20]
 810ab40:	6812      	ldr	r2, [r2, #0]
 810ab42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810ab44:	430b      	orrs	r3, r1
 810ab46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810ab48:	697b      	ldr	r3, [r7, #20]
 810ab4a:	681b      	ldr	r3, [r3, #0]
 810ab4c:	685b      	ldr	r3, [r3, #4]
 810ab4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810ab52:	697b      	ldr	r3, [r7, #20]
 810ab54:	68da      	ldr	r2, [r3, #12]
 810ab56:	697b      	ldr	r3, [r7, #20]
 810ab58:	681b      	ldr	r3, [r3, #0]
 810ab5a:	430a      	orrs	r2, r1
 810ab5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810ab5e:	697b      	ldr	r3, [r7, #20]
 810ab60:	699b      	ldr	r3, [r3, #24]
 810ab62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810ab64:	697b      	ldr	r3, [r7, #20]
 810ab66:	681b      	ldr	r3, [r3, #0]
 810ab68:	4ab2      	ldr	r2, [pc, #712]	@ (810ae34 <UART_SetConfig+0x328>)
 810ab6a:	4293      	cmp	r3, r2
 810ab6c:	d004      	beq.n	810ab78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810ab6e:	697b      	ldr	r3, [r7, #20]
 810ab70:	6a1b      	ldr	r3, [r3, #32]
 810ab72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ab74:	4313      	orrs	r3, r2
 810ab76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810ab78:	697b      	ldr	r3, [r7, #20]
 810ab7a:	681b      	ldr	r3, [r3, #0]
 810ab7c:	689b      	ldr	r3, [r3, #8]
 810ab7e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810ab82:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810ab86:	697a      	ldr	r2, [r7, #20]
 810ab88:	6812      	ldr	r2, [r2, #0]
 810ab8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810ab8c:	430b      	orrs	r3, r1
 810ab8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810ab90:	697b      	ldr	r3, [r7, #20]
 810ab92:	681b      	ldr	r3, [r3, #0]
 810ab94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab96:	f023 010f 	bic.w	r1, r3, #15
 810ab9a:	697b      	ldr	r3, [r7, #20]
 810ab9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810ab9e:	697b      	ldr	r3, [r7, #20]
 810aba0:	681b      	ldr	r3, [r3, #0]
 810aba2:	430a      	orrs	r2, r1
 810aba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810aba6:	697b      	ldr	r3, [r7, #20]
 810aba8:	681b      	ldr	r3, [r3, #0]
 810abaa:	4aa3      	ldr	r2, [pc, #652]	@ (810ae38 <UART_SetConfig+0x32c>)
 810abac:	4293      	cmp	r3, r2
 810abae:	d177      	bne.n	810aca0 <UART_SetConfig+0x194>
 810abb0:	4ba2      	ldr	r3, [pc, #648]	@ (810ae3c <UART_SetConfig+0x330>)
 810abb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810abb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810abb8:	2b28      	cmp	r3, #40	@ 0x28
 810abba:	d86d      	bhi.n	810ac98 <UART_SetConfig+0x18c>
 810abbc:	a201      	add	r2, pc, #4	@ (adr r2, 810abc4 <UART_SetConfig+0xb8>)
 810abbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810abc2:	bf00      	nop
 810abc4:	0810ac69 	.word	0x0810ac69
 810abc8:	0810ac99 	.word	0x0810ac99
 810abcc:	0810ac99 	.word	0x0810ac99
 810abd0:	0810ac99 	.word	0x0810ac99
 810abd4:	0810ac99 	.word	0x0810ac99
 810abd8:	0810ac99 	.word	0x0810ac99
 810abdc:	0810ac99 	.word	0x0810ac99
 810abe0:	0810ac99 	.word	0x0810ac99
 810abe4:	0810ac71 	.word	0x0810ac71
 810abe8:	0810ac99 	.word	0x0810ac99
 810abec:	0810ac99 	.word	0x0810ac99
 810abf0:	0810ac99 	.word	0x0810ac99
 810abf4:	0810ac99 	.word	0x0810ac99
 810abf8:	0810ac99 	.word	0x0810ac99
 810abfc:	0810ac99 	.word	0x0810ac99
 810ac00:	0810ac99 	.word	0x0810ac99
 810ac04:	0810ac79 	.word	0x0810ac79
 810ac08:	0810ac99 	.word	0x0810ac99
 810ac0c:	0810ac99 	.word	0x0810ac99
 810ac10:	0810ac99 	.word	0x0810ac99
 810ac14:	0810ac99 	.word	0x0810ac99
 810ac18:	0810ac99 	.word	0x0810ac99
 810ac1c:	0810ac99 	.word	0x0810ac99
 810ac20:	0810ac99 	.word	0x0810ac99
 810ac24:	0810ac81 	.word	0x0810ac81
 810ac28:	0810ac99 	.word	0x0810ac99
 810ac2c:	0810ac99 	.word	0x0810ac99
 810ac30:	0810ac99 	.word	0x0810ac99
 810ac34:	0810ac99 	.word	0x0810ac99
 810ac38:	0810ac99 	.word	0x0810ac99
 810ac3c:	0810ac99 	.word	0x0810ac99
 810ac40:	0810ac99 	.word	0x0810ac99
 810ac44:	0810ac89 	.word	0x0810ac89
 810ac48:	0810ac99 	.word	0x0810ac99
 810ac4c:	0810ac99 	.word	0x0810ac99
 810ac50:	0810ac99 	.word	0x0810ac99
 810ac54:	0810ac99 	.word	0x0810ac99
 810ac58:	0810ac99 	.word	0x0810ac99
 810ac5c:	0810ac99 	.word	0x0810ac99
 810ac60:	0810ac99 	.word	0x0810ac99
 810ac64:	0810ac91 	.word	0x0810ac91
 810ac68:	2301      	movs	r3, #1
 810ac6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac6e:	e220      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ac70:	2304      	movs	r3, #4
 810ac72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac76:	e21c      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ac78:	2308      	movs	r3, #8
 810ac7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac7e:	e218      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ac80:	2310      	movs	r3, #16
 810ac82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac86:	e214      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ac88:	2320      	movs	r3, #32
 810ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac8e:	e210      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ac90:	2340      	movs	r3, #64	@ 0x40
 810ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac96:	e20c      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ac98:	2380      	movs	r3, #128	@ 0x80
 810ac9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ac9e:	e208      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810aca0:	697b      	ldr	r3, [r7, #20]
 810aca2:	681b      	ldr	r3, [r3, #0]
 810aca4:	4a66      	ldr	r2, [pc, #408]	@ (810ae40 <UART_SetConfig+0x334>)
 810aca6:	4293      	cmp	r3, r2
 810aca8:	d130      	bne.n	810ad0c <UART_SetConfig+0x200>
 810acaa:	4b64      	ldr	r3, [pc, #400]	@ (810ae3c <UART_SetConfig+0x330>)
 810acac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810acae:	f003 0307 	and.w	r3, r3, #7
 810acb2:	2b05      	cmp	r3, #5
 810acb4:	d826      	bhi.n	810ad04 <UART_SetConfig+0x1f8>
 810acb6:	a201      	add	r2, pc, #4	@ (adr r2, 810acbc <UART_SetConfig+0x1b0>)
 810acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810acbc:	0810acd5 	.word	0x0810acd5
 810acc0:	0810acdd 	.word	0x0810acdd
 810acc4:	0810ace5 	.word	0x0810ace5
 810acc8:	0810aced 	.word	0x0810aced
 810accc:	0810acf5 	.word	0x0810acf5
 810acd0:	0810acfd 	.word	0x0810acfd
 810acd4:	2300      	movs	r3, #0
 810acd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810acda:	e1ea      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810acdc:	2304      	movs	r3, #4
 810acde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ace2:	e1e6      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ace4:	2308      	movs	r3, #8
 810ace6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810acea:	e1e2      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810acec:	2310      	movs	r3, #16
 810acee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810acf2:	e1de      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810acf4:	2320      	movs	r3, #32
 810acf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810acfa:	e1da      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810acfc:	2340      	movs	r3, #64	@ 0x40
 810acfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad02:	e1d6      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad04:	2380      	movs	r3, #128	@ 0x80
 810ad06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad0a:	e1d2      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad0c:	697b      	ldr	r3, [r7, #20]
 810ad0e:	681b      	ldr	r3, [r3, #0]
 810ad10:	4a4c      	ldr	r2, [pc, #304]	@ (810ae44 <UART_SetConfig+0x338>)
 810ad12:	4293      	cmp	r3, r2
 810ad14:	d130      	bne.n	810ad78 <UART_SetConfig+0x26c>
 810ad16:	4b49      	ldr	r3, [pc, #292]	@ (810ae3c <UART_SetConfig+0x330>)
 810ad18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ad1a:	f003 0307 	and.w	r3, r3, #7
 810ad1e:	2b05      	cmp	r3, #5
 810ad20:	d826      	bhi.n	810ad70 <UART_SetConfig+0x264>
 810ad22:	a201      	add	r2, pc, #4	@ (adr r2, 810ad28 <UART_SetConfig+0x21c>)
 810ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad28:	0810ad41 	.word	0x0810ad41
 810ad2c:	0810ad49 	.word	0x0810ad49
 810ad30:	0810ad51 	.word	0x0810ad51
 810ad34:	0810ad59 	.word	0x0810ad59
 810ad38:	0810ad61 	.word	0x0810ad61
 810ad3c:	0810ad69 	.word	0x0810ad69
 810ad40:	2300      	movs	r3, #0
 810ad42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad46:	e1b4      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad48:	2304      	movs	r3, #4
 810ad4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad4e:	e1b0      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad50:	2308      	movs	r3, #8
 810ad52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad56:	e1ac      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad58:	2310      	movs	r3, #16
 810ad5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad5e:	e1a8      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad60:	2320      	movs	r3, #32
 810ad62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad66:	e1a4      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad68:	2340      	movs	r3, #64	@ 0x40
 810ad6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad6e:	e1a0      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad70:	2380      	movs	r3, #128	@ 0x80
 810ad72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ad76:	e19c      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ad78:	697b      	ldr	r3, [r7, #20]
 810ad7a:	681b      	ldr	r3, [r3, #0]
 810ad7c:	4a32      	ldr	r2, [pc, #200]	@ (810ae48 <UART_SetConfig+0x33c>)
 810ad7e:	4293      	cmp	r3, r2
 810ad80:	d130      	bne.n	810ade4 <UART_SetConfig+0x2d8>
 810ad82:	4b2e      	ldr	r3, [pc, #184]	@ (810ae3c <UART_SetConfig+0x330>)
 810ad84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ad86:	f003 0307 	and.w	r3, r3, #7
 810ad8a:	2b05      	cmp	r3, #5
 810ad8c:	d826      	bhi.n	810addc <UART_SetConfig+0x2d0>
 810ad8e:	a201      	add	r2, pc, #4	@ (adr r2, 810ad94 <UART_SetConfig+0x288>)
 810ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad94:	0810adad 	.word	0x0810adad
 810ad98:	0810adb5 	.word	0x0810adb5
 810ad9c:	0810adbd 	.word	0x0810adbd
 810ada0:	0810adc5 	.word	0x0810adc5
 810ada4:	0810adcd 	.word	0x0810adcd
 810ada8:	0810add5 	.word	0x0810add5
 810adac:	2300      	movs	r3, #0
 810adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810adb2:	e17e      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810adb4:	2304      	movs	r3, #4
 810adb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810adba:	e17a      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810adbc:	2308      	movs	r3, #8
 810adbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810adc2:	e176      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810adc4:	2310      	movs	r3, #16
 810adc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810adca:	e172      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810adcc:	2320      	movs	r3, #32
 810adce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810add2:	e16e      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810add4:	2340      	movs	r3, #64	@ 0x40
 810add6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810adda:	e16a      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810addc:	2380      	movs	r3, #128	@ 0x80
 810adde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ade2:	e166      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ade4:	697b      	ldr	r3, [r7, #20]
 810ade6:	681b      	ldr	r3, [r3, #0]
 810ade8:	4a18      	ldr	r2, [pc, #96]	@ (810ae4c <UART_SetConfig+0x340>)
 810adea:	4293      	cmp	r3, r2
 810adec:	d140      	bne.n	810ae70 <UART_SetConfig+0x364>
 810adee:	4b13      	ldr	r3, [pc, #76]	@ (810ae3c <UART_SetConfig+0x330>)
 810adf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810adf2:	f003 0307 	and.w	r3, r3, #7
 810adf6:	2b05      	cmp	r3, #5
 810adf8:	d836      	bhi.n	810ae68 <UART_SetConfig+0x35c>
 810adfa:	a201      	add	r2, pc, #4	@ (adr r2, 810ae00 <UART_SetConfig+0x2f4>)
 810adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ae00:	0810ae19 	.word	0x0810ae19
 810ae04:	0810ae21 	.word	0x0810ae21
 810ae08:	0810ae29 	.word	0x0810ae29
 810ae0c:	0810ae51 	.word	0x0810ae51
 810ae10:	0810ae59 	.word	0x0810ae59
 810ae14:	0810ae61 	.word	0x0810ae61
 810ae18:	2300      	movs	r3, #0
 810ae1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae1e:	e148      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ae20:	2304      	movs	r3, #4
 810ae22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae26:	e144      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ae28:	2308      	movs	r3, #8
 810ae2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae2e:	e140      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ae30:	cfff69f3 	.word	0xcfff69f3
 810ae34:	58000c00 	.word	0x58000c00
 810ae38:	40011000 	.word	0x40011000
 810ae3c:	58024400 	.word	0x58024400
 810ae40:	40004400 	.word	0x40004400
 810ae44:	40004800 	.word	0x40004800
 810ae48:	40004c00 	.word	0x40004c00
 810ae4c:	40005000 	.word	0x40005000
 810ae50:	2310      	movs	r3, #16
 810ae52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae56:	e12c      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ae58:	2320      	movs	r3, #32
 810ae5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae5e:	e128      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ae60:	2340      	movs	r3, #64	@ 0x40
 810ae62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae66:	e124      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ae68:	2380      	movs	r3, #128	@ 0x80
 810ae6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ae6e:	e120      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810ae70:	697b      	ldr	r3, [r7, #20]
 810ae72:	681b      	ldr	r3, [r3, #0]
 810ae74:	4acb      	ldr	r2, [pc, #812]	@ (810b1a4 <UART_SetConfig+0x698>)
 810ae76:	4293      	cmp	r3, r2
 810ae78:	d176      	bne.n	810af68 <UART_SetConfig+0x45c>
 810ae7a:	4bcb      	ldr	r3, [pc, #812]	@ (810b1a8 <UART_SetConfig+0x69c>)
 810ae7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ae7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810ae82:	2b28      	cmp	r3, #40	@ 0x28
 810ae84:	d86c      	bhi.n	810af60 <UART_SetConfig+0x454>
 810ae86:	a201      	add	r2, pc, #4	@ (adr r2, 810ae8c <UART_SetConfig+0x380>)
 810ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ae8c:	0810af31 	.word	0x0810af31
 810ae90:	0810af61 	.word	0x0810af61
 810ae94:	0810af61 	.word	0x0810af61
 810ae98:	0810af61 	.word	0x0810af61
 810ae9c:	0810af61 	.word	0x0810af61
 810aea0:	0810af61 	.word	0x0810af61
 810aea4:	0810af61 	.word	0x0810af61
 810aea8:	0810af61 	.word	0x0810af61
 810aeac:	0810af39 	.word	0x0810af39
 810aeb0:	0810af61 	.word	0x0810af61
 810aeb4:	0810af61 	.word	0x0810af61
 810aeb8:	0810af61 	.word	0x0810af61
 810aebc:	0810af61 	.word	0x0810af61
 810aec0:	0810af61 	.word	0x0810af61
 810aec4:	0810af61 	.word	0x0810af61
 810aec8:	0810af61 	.word	0x0810af61
 810aecc:	0810af41 	.word	0x0810af41
 810aed0:	0810af61 	.word	0x0810af61
 810aed4:	0810af61 	.word	0x0810af61
 810aed8:	0810af61 	.word	0x0810af61
 810aedc:	0810af61 	.word	0x0810af61
 810aee0:	0810af61 	.word	0x0810af61
 810aee4:	0810af61 	.word	0x0810af61
 810aee8:	0810af61 	.word	0x0810af61
 810aeec:	0810af49 	.word	0x0810af49
 810aef0:	0810af61 	.word	0x0810af61
 810aef4:	0810af61 	.word	0x0810af61
 810aef8:	0810af61 	.word	0x0810af61
 810aefc:	0810af61 	.word	0x0810af61
 810af00:	0810af61 	.word	0x0810af61
 810af04:	0810af61 	.word	0x0810af61
 810af08:	0810af61 	.word	0x0810af61
 810af0c:	0810af51 	.word	0x0810af51
 810af10:	0810af61 	.word	0x0810af61
 810af14:	0810af61 	.word	0x0810af61
 810af18:	0810af61 	.word	0x0810af61
 810af1c:	0810af61 	.word	0x0810af61
 810af20:	0810af61 	.word	0x0810af61
 810af24:	0810af61 	.word	0x0810af61
 810af28:	0810af61 	.word	0x0810af61
 810af2c:	0810af59 	.word	0x0810af59
 810af30:	2301      	movs	r3, #1
 810af32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af36:	e0bc      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810af38:	2304      	movs	r3, #4
 810af3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af3e:	e0b8      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810af40:	2308      	movs	r3, #8
 810af42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af46:	e0b4      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810af48:	2310      	movs	r3, #16
 810af4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af4e:	e0b0      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810af50:	2320      	movs	r3, #32
 810af52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af56:	e0ac      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810af58:	2340      	movs	r3, #64	@ 0x40
 810af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af5e:	e0a8      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810af60:	2380      	movs	r3, #128	@ 0x80
 810af62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810af66:	e0a4      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810af68:	697b      	ldr	r3, [r7, #20]
 810af6a:	681b      	ldr	r3, [r3, #0]
 810af6c:	4a8f      	ldr	r2, [pc, #572]	@ (810b1ac <UART_SetConfig+0x6a0>)
 810af6e:	4293      	cmp	r3, r2
 810af70:	d130      	bne.n	810afd4 <UART_SetConfig+0x4c8>
 810af72:	4b8d      	ldr	r3, [pc, #564]	@ (810b1a8 <UART_SetConfig+0x69c>)
 810af74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810af76:	f003 0307 	and.w	r3, r3, #7
 810af7a:	2b05      	cmp	r3, #5
 810af7c:	d826      	bhi.n	810afcc <UART_SetConfig+0x4c0>
 810af7e:	a201      	add	r2, pc, #4	@ (adr r2, 810af84 <UART_SetConfig+0x478>)
 810af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810af84:	0810af9d 	.word	0x0810af9d
 810af88:	0810afa5 	.word	0x0810afa5
 810af8c:	0810afad 	.word	0x0810afad
 810af90:	0810afb5 	.word	0x0810afb5
 810af94:	0810afbd 	.word	0x0810afbd
 810af98:	0810afc5 	.word	0x0810afc5
 810af9c:	2300      	movs	r3, #0
 810af9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afa2:	e086      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810afa4:	2304      	movs	r3, #4
 810afa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afaa:	e082      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810afac:	2308      	movs	r3, #8
 810afae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afb2:	e07e      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810afb4:	2310      	movs	r3, #16
 810afb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afba:	e07a      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810afbc:	2320      	movs	r3, #32
 810afbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afc2:	e076      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810afc4:	2340      	movs	r3, #64	@ 0x40
 810afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afca:	e072      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810afcc:	2380      	movs	r3, #128	@ 0x80
 810afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810afd2:	e06e      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810afd4:	697b      	ldr	r3, [r7, #20]
 810afd6:	681b      	ldr	r3, [r3, #0]
 810afd8:	4a75      	ldr	r2, [pc, #468]	@ (810b1b0 <UART_SetConfig+0x6a4>)
 810afda:	4293      	cmp	r3, r2
 810afdc:	d130      	bne.n	810b040 <UART_SetConfig+0x534>
 810afde:	4b72      	ldr	r3, [pc, #456]	@ (810b1a8 <UART_SetConfig+0x69c>)
 810afe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810afe2:	f003 0307 	and.w	r3, r3, #7
 810afe6:	2b05      	cmp	r3, #5
 810afe8:	d826      	bhi.n	810b038 <UART_SetConfig+0x52c>
 810afea:	a201      	add	r2, pc, #4	@ (adr r2, 810aff0 <UART_SetConfig+0x4e4>)
 810afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aff0:	0810b009 	.word	0x0810b009
 810aff4:	0810b011 	.word	0x0810b011
 810aff8:	0810b019 	.word	0x0810b019
 810affc:	0810b021 	.word	0x0810b021
 810b000:	0810b029 	.word	0x0810b029
 810b004:	0810b031 	.word	0x0810b031
 810b008:	2300      	movs	r3, #0
 810b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b00e:	e050      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b010:	2304      	movs	r3, #4
 810b012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b016:	e04c      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b018:	2308      	movs	r3, #8
 810b01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b01e:	e048      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b020:	2310      	movs	r3, #16
 810b022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b026:	e044      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b028:	2320      	movs	r3, #32
 810b02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b02e:	e040      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b030:	2340      	movs	r3, #64	@ 0x40
 810b032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b036:	e03c      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b038:	2380      	movs	r3, #128	@ 0x80
 810b03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b03e:	e038      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b040:	697b      	ldr	r3, [r7, #20]
 810b042:	681b      	ldr	r3, [r3, #0]
 810b044:	4a5b      	ldr	r2, [pc, #364]	@ (810b1b4 <UART_SetConfig+0x6a8>)
 810b046:	4293      	cmp	r3, r2
 810b048:	d130      	bne.n	810b0ac <UART_SetConfig+0x5a0>
 810b04a:	4b57      	ldr	r3, [pc, #348]	@ (810b1a8 <UART_SetConfig+0x69c>)
 810b04c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b04e:	f003 0307 	and.w	r3, r3, #7
 810b052:	2b05      	cmp	r3, #5
 810b054:	d826      	bhi.n	810b0a4 <UART_SetConfig+0x598>
 810b056:	a201      	add	r2, pc, #4	@ (adr r2, 810b05c <UART_SetConfig+0x550>)
 810b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b05c:	0810b075 	.word	0x0810b075
 810b060:	0810b07d 	.word	0x0810b07d
 810b064:	0810b085 	.word	0x0810b085
 810b068:	0810b08d 	.word	0x0810b08d
 810b06c:	0810b095 	.word	0x0810b095
 810b070:	0810b09d 	.word	0x0810b09d
 810b074:	2302      	movs	r3, #2
 810b076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b07a:	e01a      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b07c:	2304      	movs	r3, #4
 810b07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b082:	e016      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b084:	2308      	movs	r3, #8
 810b086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b08a:	e012      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b08c:	2310      	movs	r3, #16
 810b08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b092:	e00e      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b094:	2320      	movs	r3, #32
 810b096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b09a:	e00a      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b09c:	2340      	movs	r3, #64	@ 0x40
 810b09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0a2:	e006      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b0a4:	2380      	movs	r3, #128	@ 0x80
 810b0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b0aa:	e002      	b.n	810b0b2 <UART_SetConfig+0x5a6>
 810b0ac:	2380      	movs	r3, #128	@ 0x80
 810b0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b0b2:	697b      	ldr	r3, [r7, #20]
 810b0b4:	681b      	ldr	r3, [r3, #0]
 810b0b6:	4a3f      	ldr	r2, [pc, #252]	@ (810b1b4 <UART_SetConfig+0x6a8>)
 810b0b8:	4293      	cmp	r3, r2
 810b0ba:	f040 80f8 	bne.w	810b2ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b0be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b0c2:	2b20      	cmp	r3, #32
 810b0c4:	dc46      	bgt.n	810b154 <UART_SetConfig+0x648>
 810b0c6:	2b02      	cmp	r3, #2
 810b0c8:	f2c0 8082 	blt.w	810b1d0 <UART_SetConfig+0x6c4>
 810b0cc:	3b02      	subs	r3, #2
 810b0ce:	2b1e      	cmp	r3, #30
 810b0d0:	d87e      	bhi.n	810b1d0 <UART_SetConfig+0x6c4>
 810b0d2:	a201      	add	r2, pc, #4	@ (adr r2, 810b0d8 <UART_SetConfig+0x5cc>)
 810b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b0d8:	0810b15b 	.word	0x0810b15b
 810b0dc:	0810b1d1 	.word	0x0810b1d1
 810b0e0:	0810b163 	.word	0x0810b163
 810b0e4:	0810b1d1 	.word	0x0810b1d1
 810b0e8:	0810b1d1 	.word	0x0810b1d1
 810b0ec:	0810b1d1 	.word	0x0810b1d1
 810b0f0:	0810b173 	.word	0x0810b173
 810b0f4:	0810b1d1 	.word	0x0810b1d1
 810b0f8:	0810b1d1 	.word	0x0810b1d1
 810b0fc:	0810b1d1 	.word	0x0810b1d1
 810b100:	0810b1d1 	.word	0x0810b1d1
 810b104:	0810b1d1 	.word	0x0810b1d1
 810b108:	0810b1d1 	.word	0x0810b1d1
 810b10c:	0810b1d1 	.word	0x0810b1d1
 810b110:	0810b183 	.word	0x0810b183
 810b114:	0810b1d1 	.word	0x0810b1d1
 810b118:	0810b1d1 	.word	0x0810b1d1
 810b11c:	0810b1d1 	.word	0x0810b1d1
 810b120:	0810b1d1 	.word	0x0810b1d1
 810b124:	0810b1d1 	.word	0x0810b1d1
 810b128:	0810b1d1 	.word	0x0810b1d1
 810b12c:	0810b1d1 	.word	0x0810b1d1
 810b130:	0810b1d1 	.word	0x0810b1d1
 810b134:	0810b1d1 	.word	0x0810b1d1
 810b138:	0810b1d1 	.word	0x0810b1d1
 810b13c:	0810b1d1 	.word	0x0810b1d1
 810b140:	0810b1d1 	.word	0x0810b1d1
 810b144:	0810b1d1 	.word	0x0810b1d1
 810b148:	0810b1d1 	.word	0x0810b1d1
 810b14c:	0810b1d1 	.word	0x0810b1d1
 810b150:	0810b1c3 	.word	0x0810b1c3
 810b154:	2b40      	cmp	r3, #64	@ 0x40
 810b156:	d037      	beq.n	810b1c8 <UART_SetConfig+0x6bc>
 810b158:	e03a      	b.n	810b1d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b15a:	f7fd fa33 	bl	81085c4 <HAL_RCCEx_GetD3PCLK1Freq>
 810b15e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b160:	e03c      	b.n	810b1dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b166:	4618      	mov	r0, r3
 810b168:	f7fd fa42 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b170:	e034      	b.n	810b1dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b172:	f107 0318 	add.w	r3, r7, #24
 810b176:	4618      	mov	r0, r3
 810b178:	f7fd fb8e 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b17c:	69fb      	ldr	r3, [r7, #28]
 810b17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b180:	e02c      	b.n	810b1dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b182:	4b09      	ldr	r3, [pc, #36]	@ (810b1a8 <UART_SetConfig+0x69c>)
 810b184:	681b      	ldr	r3, [r3, #0]
 810b186:	f003 0320 	and.w	r3, r3, #32
 810b18a:	2b00      	cmp	r3, #0
 810b18c:	d016      	beq.n	810b1bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b18e:	4b06      	ldr	r3, [pc, #24]	@ (810b1a8 <UART_SetConfig+0x69c>)
 810b190:	681b      	ldr	r3, [r3, #0]
 810b192:	08db      	lsrs	r3, r3, #3
 810b194:	f003 0303 	and.w	r3, r3, #3
 810b198:	4a07      	ldr	r2, [pc, #28]	@ (810b1b8 <UART_SetConfig+0x6ac>)
 810b19a:	fa22 f303 	lsr.w	r3, r2, r3
 810b19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b1a0:	e01c      	b.n	810b1dc <UART_SetConfig+0x6d0>
 810b1a2:	bf00      	nop
 810b1a4:	40011400 	.word	0x40011400
 810b1a8:	58024400 	.word	0x58024400
 810b1ac:	40007800 	.word	0x40007800
 810b1b0:	40007c00 	.word	0x40007c00
 810b1b4:	58000c00 	.word	0x58000c00
 810b1b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810b1bc:	4b9d      	ldr	r3, [pc, #628]	@ (810b434 <UART_SetConfig+0x928>)
 810b1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b1c0:	e00c      	b.n	810b1dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b1c2:	4b9d      	ldr	r3, [pc, #628]	@ (810b438 <UART_SetConfig+0x92c>)
 810b1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b1c6:	e009      	b.n	810b1dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b1c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b1ce:	e005      	b.n	810b1dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810b1d0:	2300      	movs	r3, #0
 810b1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b1d4:	2301      	movs	r3, #1
 810b1d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b1da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b1de:	2b00      	cmp	r3, #0
 810b1e0:	f000 81de 	beq.w	810b5a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b1e4:	697b      	ldr	r3, [r7, #20]
 810b1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b1e8:	4a94      	ldr	r2, [pc, #592]	@ (810b43c <UART_SetConfig+0x930>)
 810b1ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b1ee:	461a      	mov	r2, r3
 810b1f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b1f2:	fbb3 f3f2 	udiv	r3, r3, r2
 810b1f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b1f8:	697b      	ldr	r3, [r7, #20]
 810b1fa:	685a      	ldr	r2, [r3, #4]
 810b1fc:	4613      	mov	r3, r2
 810b1fe:	005b      	lsls	r3, r3, #1
 810b200:	4413      	add	r3, r2
 810b202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b204:	429a      	cmp	r2, r3
 810b206:	d305      	bcc.n	810b214 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b208:	697b      	ldr	r3, [r7, #20]
 810b20a:	685b      	ldr	r3, [r3, #4]
 810b20c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b20e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b210:	429a      	cmp	r2, r3
 810b212:	d903      	bls.n	810b21c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810b214:	2301      	movs	r3, #1
 810b216:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b21a:	e1c1      	b.n	810b5a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b21e:	2200      	movs	r2, #0
 810b220:	60bb      	str	r3, [r7, #8]
 810b222:	60fa      	str	r2, [r7, #12]
 810b224:	697b      	ldr	r3, [r7, #20]
 810b226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b228:	4a84      	ldr	r2, [pc, #528]	@ (810b43c <UART_SetConfig+0x930>)
 810b22a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b22e:	b29b      	uxth	r3, r3
 810b230:	2200      	movs	r2, #0
 810b232:	603b      	str	r3, [r7, #0]
 810b234:	607a      	str	r2, [r7, #4]
 810b236:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b23a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810b23e:	f7f5 fdab 	bl	8100d98 <__aeabi_uldivmod>
 810b242:	4602      	mov	r2, r0
 810b244:	460b      	mov	r3, r1
 810b246:	4610      	mov	r0, r2
 810b248:	4619      	mov	r1, r3
 810b24a:	f04f 0200 	mov.w	r2, #0
 810b24e:	f04f 0300 	mov.w	r3, #0
 810b252:	020b      	lsls	r3, r1, #8
 810b254:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810b258:	0202      	lsls	r2, r0, #8
 810b25a:	6979      	ldr	r1, [r7, #20]
 810b25c:	6849      	ldr	r1, [r1, #4]
 810b25e:	0849      	lsrs	r1, r1, #1
 810b260:	2000      	movs	r0, #0
 810b262:	460c      	mov	r4, r1
 810b264:	4605      	mov	r5, r0
 810b266:	eb12 0804 	adds.w	r8, r2, r4
 810b26a:	eb43 0905 	adc.w	r9, r3, r5
 810b26e:	697b      	ldr	r3, [r7, #20]
 810b270:	685b      	ldr	r3, [r3, #4]
 810b272:	2200      	movs	r2, #0
 810b274:	469a      	mov	sl, r3
 810b276:	4693      	mov	fp, r2
 810b278:	4652      	mov	r2, sl
 810b27a:	465b      	mov	r3, fp
 810b27c:	4640      	mov	r0, r8
 810b27e:	4649      	mov	r1, r9
 810b280:	f7f5 fd8a 	bl	8100d98 <__aeabi_uldivmod>
 810b284:	4602      	mov	r2, r0
 810b286:	460b      	mov	r3, r1
 810b288:	4613      	mov	r3, r2
 810b28a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810b28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b28e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b292:	d308      	bcc.n	810b2a6 <UART_SetConfig+0x79a>
 810b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b29a:	d204      	bcs.n	810b2a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810b29c:	697b      	ldr	r3, [r7, #20]
 810b29e:	681b      	ldr	r3, [r3, #0]
 810b2a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810b2a2:	60da      	str	r2, [r3, #12]
 810b2a4:	e17c      	b.n	810b5a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810b2a6:	2301      	movs	r3, #1
 810b2a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b2ac:	e178      	b.n	810b5a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810b2ae:	697b      	ldr	r3, [r7, #20]
 810b2b0:	69db      	ldr	r3, [r3, #28]
 810b2b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b2b6:	f040 80c5 	bne.w	810b444 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810b2ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b2be:	2b20      	cmp	r3, #32
 810b2c0:	dc48      	bgt.n	810b354 <UART_SetConfig+0x848>
 810b2c2:	2b00      	cmp	r3, #0
 810b2c4:	db7b      	blt.n	810b3be <UART_SetConfig+0x8b2>
 810b2c6:	2b20      	cmp	r3, #32
 810b2c8:	d879      	bhi.n	810b3be <UART_SetConfig+0x8b2>
 810b2ca:	a201      	add	r2, pc, #4	@ (adr r2, 810b2d0 <UART_SetConfig+0x7c4>)
 810b2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b2d0:	0810b35b 	.word	0x0810b35b
 810b2d4:	0810b363 	.word	0x0810b363
 810b2d8:	0810b3bf 	.word	0x0810b3bf
 810b2dc:	0810b3bf 	.word	0x0810b3bf
 810b2e0:	0810b36b 	.word	0x0810b36b
 810b2e4:	0810b3bf 	.word	0x0810b3bf
 810b2e8:	0810b3bf 	.word	0x0810b3bf
 810b2ec:	0810b3bf 	.word	0x0810b3bf
 810b2f0:	0810b37b 	.word	0x0810b37b
 810b2f4:	0810b3bf 	.word	0x0810b3bf
 810b2f8:	0810b3bf 	.word	0x0810b3bf
 810b2fc:	0810b3bf 	.word	0x0810b3bf
 810b300:	0810b3bf 	.word	0x0810b3bf
 810b304:	0810b3bf 	.word	0x0810b3bf
 810b308:	0810b3bf 	.word	0x0810b3bf
 810b30c:	0810b3bf 	.word	0x0810b3bf
 810b310:	0810b38b 	.word	0x0810b38b
 810b314:	0810b3bf 	.word	0x0810b3bf
 810b318:	0810b3bf 	.word	0x0810b3bf
 810b31c:	0810b3bf 	.word	0x0810b3bf
 810b320:	0810b3bf 	.word	0x0810b3bf
 810b324:	0810b3bf 	.word	0x0810b3bf
 810b328:	0810b3bf 	.word	0x0810b3bf
 810b32c:	0810b3bf 	.word	0x0810b3bf
 810b330:	0810b3bf 	.word	0x0810b3bf
 810b334:	0810b3bf 	.word	0x0810b3bf
 810b338:	0810b3bf 	.word	0x0810b3bf
 810b33c:	0810b3bf 	.word	0x0810b3bf
 810b340:	0810b3bf 	.word	0x0810b3bf
 810b344:	0810b3bf 	.word	0x0810b3bf
 810b348:	0810b3bf 	.word	0x0810b3bf
 810b34c:	0810b3bf 	.word	0x0810b3bf
 810b350:	0810b3b1 	.word	0x0810b3b1
 810b354:	2b40      	cmp	r3, #64	@ 0x40
 810b356:	d02e      	beq.n	810b3b6 <UART_SetConfig+0x8aa>
 810b358:	e031      	b.n	810b3be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b35a:	f7fb f97d 	bl	8106658 <HAL_RCC_GetPCLK1Freq>
 810b35e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b360:	e033      	b.n	810b3ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b362:	f7fb f98f 	bl	8106684 <HAL_RCC_GetPCLK2Freq>
 810b366:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b368:	e02f      	b.n	810b3ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b36a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b36e:	4618      	mov	r0, r3
 810b370:	f7fd f93e 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b378:	e027      	b.n	810b3ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b37a:	f107 0318 	add.w	r3, r7, #24
 810b37e:	4618      	mov	r0, r3
 810b380:	f7fd fa8a 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b384:	69fb      	ldr	r3, [r7, #28]
 810b386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b388:	e01f      	b.n	810b3ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b38a:	4b2d      	ldr	r3, [pc, #180]	@ (810b440 <UART_SetConfig+0x934>)
 810b38c:	681b      	ldr	r3, [r3, #0]
 810b38e:	f003 0320 	and.w	r3, r3, #32
 810b392:	2b00      	cmp	r3, #0
 810b394:	d009      	beq.n	810b3aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b396:	4b2a      	ldr	r3, [pc, #168]	@ (810b440 <UART_SetConfig+0x934>)
 810b398:	681b      	ldr	r3, [r3, #0]
 810b39a:	08db      	lsrs	r3, r3, #3
 810b39c:	f003 0303 	and.w	r3, r3, #3
 810b3a0:	4a24      	ldr	r2, [pc, #144]	@ (810b434 <UART_SetConfig+0x928>)
 810b3a2:	fa22 f303 	lsr.w	r3, r2, r3
 810b3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b3a8:	e00f      	b.n	810b3ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810b3aa:	4b22      	ldr	r3, [pc, #136]	@ (810b434 <UART_SetConfig+0x928>)
 810b3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b3ae:	e00c      	b.n	810b3ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b3b0:	4b21      	ldr	r3, [pc, #132]	@ (810b438 <UART_SetConfig+0x92c>)
 810b3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b3b4:	e009      	b.n	810b3ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b3b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b3bc:	e005      	b.n	810b3ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810b3be:	2300      	movs	r3, #0
 810b3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b3c2:	2301      	movs	r3, #1
 810b3c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b3c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810b3ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b3cc:	2b00      	cmp	r3, #0
 810b3ce:	f000 80e7 	beq.w	810b5a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b3d2:	697b      	ldr	r3, [r7, #20]
 810b3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b3d6:	4a19      	ldr	r2, [pc, #100]	@ (810b43c <UART_SetConfig+0x930>)
 810b3d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b3dc:	461a      	mov	r2, r3
 810b3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b3e0:	fbb3 f3f2 	udiv	r3, r3, r2
 810b3e4:	005a      	lsls	r2, r3, #1
 810b3e6:	697b      	ldr	r3, [r7, #20]
 810b3e8:	685b      	ldr	r3, [r3, #4]
 810b3ea:	085b      	lsrs	r3, r3, #1
 810b3ec:	441a      	add	r2, r3
 810b3ee:	697b      	ldr	r3, [r7, #20]
 810b3f0:	685b      	ldr	r3, [r3, #4]
 810b3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 810b3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b3fa:	2b0f      	cmp	r3, #15
 810b3fc:	d916      	bls.n	810b42c <UART_SetConfig+0x920>
 810b3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b404:	d212      	bcs.n	810b42c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810b406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b408:	b29b      	uxth	r3, r3
 810b40a:	f023 030f 	bic.w	r3, r3, #15
 810b40e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b412:	085b      	lsrs	r3, r3, #1
 810b414:	b29b      	uxth	r3, r3
 810b416:	f003 0307 	and.w	r3, r3, #7
 810b41a:	b29a      	uxth	r2, r3
 810b41c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810b41e:	4313      	orrs	r3, r2
 810b420:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810b422:	697b      	ldr	r3, [r7, #20]
 810b424:	681b      	ldr	r3, [r3, #0]
 810b426:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810b428:	60da      	str	r2, [r3, #12]
 810b42a:	e0b9      	b.n	810b5a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b42c:	2301      	movs	r3, #1
 810b42e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b432:	e0b5      	b.n	810b5a0 <UART_SetConfig+0xa94>
 810b434:	03d09000 	.word	0x03d09000
 810b438:	003d0900 	.word	0x003d0900
 810b43c:	08111ff0 	.word	0x08111ff0
 810b440:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810b444:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b448:	2b20      	cmp	r3, #32
 810b44a:	dc49      	bgt.n	810b4e0 <UART_SetConfig+0x9d4>
 810b44c:	2b00      	cmp	r3, #0
 810b44e:	db7c      	blt.n	810b54a <UART_SetConfig+0xa3e>
 810b450:	2b20      	cmp	r3, #32
 810b452:	d87a      	bhi.n	810b54a <UART_SetConfig+0xa3e>
 810b454:	a201      	add	r2, pc, #4	@ (adr r2, 810b45c <UART_SetConfig+0x950>)
 810b456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b45a:	bf00      	nop
 810b45c:	0810b4e7 	.word	0x0810b4e7
 810b460:	0810b4ef 	.word	0x0810b4ef
 810b464:	0810b54b 	.word	0x0810b54b
 810b468:	0810b54b 	.word	0x0810b54b
 810b46c:	0810b4f7 	.word	0x0810b4f7
 810b470:	0810b54b 	.word	0x0810b54b
 810b474:	0810b54b 	.word	0x0810b54b
 810b478:	0810b54b 	.word	0x0810b54b
 810b47c:	0810b507 	.word	0x0810b507
 810b480:	0810b54b 	.word	0x0810b54b
 810b484:	0810b54b 	.word	0x0810b54b
 810b488:	0810b54b 	.word	0x0810b54b
 810b48c:	0810b54b 	.word	0x0810b54b
 810b490:	0810b54b 	.word	0x0810b54b
 810b494:	0810b54b 	.word	0x0810b54b
 810b498:	0810b54b 	.word	0x0810b54b
 810b49c:	0810b517 	.word	0x0810b517
 810b4a0:	0810b54b 	.word	0x0810b54b
 810b4a4:	0810b54b 	.word	0x0810b54b
 810b4a8:	0810b54b 	.word	0x0810b54b
 810b4ac:	0810b54b 	.word	0x0810b54b
 810b4b0:	0810b54b 	.word	0x0810b54b
 810b4b4:	0810b54b 	.word	0x0810b54b
 810b4b8:	0810b54b 	.word	0x0810b54b
 810b4bc:	0810b54b 	.word	0x0810b54b
 810b4c0:	0810b54b 	.word	0x0810b54b
 810b4c4:	0810b54b 	.word	0x0810b54b
 810b4c8:	0810b54b 	.word	0x0810b54b
 810b4cc:	0810b54b 	.word	0x0810b54b
 810b4d0:	0810b54b 	.word	0x0810b54b
 810b4d4:	0810b54b 	.word	0x0810b54b
 810b4d8:	0810b54b 	.word	0x0810b54b
 810b4dc:	0810b53d 	.word	0x0810b53d
 810b4e0:	2b40      	cmp	r3, #64	@ 0x40
 810b4e2:	d02e      	beq.n	810b542 <UART_SetConfig+0xa36>
 810b4e4:	e031      	b.n	810b54a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b4e6:	f7fb f8b7 	bl	8106658 <HAL_RCC_GetPCLK1Freq>
 810b4ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b4ec:	e033      	b.n	810b556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b4ee:	f7fb f8c9 	bl	8106684 <HAL_RCC_GetPCLK2Freq>
 810b4f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b4f4:	e02f      	b.n	810b556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b4f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b4fa:	4618      	mov	r0, r3
 810b4fc:	f7fd f878 	bl	81085f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b504:	e027      	b.n	810b556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b506:	f107 0318 	add.w	r3, r7, #24
 810b50a:	4618      	mov	r0, r3
 810b50c:	f7fd f9c4 	bl	8108898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b510:	69fb      	ldr	r3, [r7, #28]
 810b512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b514:	e01f      	b.n	810b556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b516:	4b2d      	ldr	r3, [pc, #180]	@ (810b5cc <UART_SetConfig+0xac0>)
 810b518:	681b      	ldr	r3, [r3, #0]
 810b51a:	f003 0320 	and.w	r3, r3, #32
 810b51e:	2b00      	cmp	r3, #0
 810b520:	d009      	beq.n	810b536 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b522:	4b2a      	ldr	r3, [pc, #168]	@ (810b5cc <UART_SetConfig+0xac0>)
 810b524:	681b      	ldr	r3, [r3, #0]
 810b526:	08db      	lsrs	r3, r3, #3
 810b528:	f003 0303 	and.w	r3, r3, #3
 810b52c:	4a28      	ldr	r2, [pc, #160]	@ (810b5d0 <UART_SetConfig+0xac4>)
 810b52e:	fa22 f303 	lsr.w	r3, r2, r3
 810b532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b534:	e00f      	b.n	810b556 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810b536:	4b26      	ldr	r3, [pc, #152]	@ (810b5d0 <UART_SetConfig+0xac4>)
 810b538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b53a:	e00c      	b.n	810b556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b53c:	4b25      	ldr	r3, [pc, #148]	@ (810b5d4 <UART_SetConfig+0xac8>)
 810b53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b540:	e009      	b.n	810b556 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b548:	e005      	b.n	810b556 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810b54a:	2300      	movs	r3, #0
 810b54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b54e:	2301      	movs	r3, #1
 810b550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b554:	bf00      	nop
    }

    if (pclk != 0U)
 810b556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b558:	2b00      	cmp	r3, #0
 810b55a:	d021      	beq.n	810b5a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b55c:	697b      	ldr	r3, [r7, #20]
 810b55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b560:	4a1d      	ldr	r2, [pc, #116]	@ (810b5d8 <UART_SetConfig+0xacc>)
 810b562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b566:	461a      	mov	r2, r3
 810b568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b56a:	fbb3 f2f2 	udiv	r2, r3, r2
 810b56e:	697b      	ldr	r3, [r7, #20]
 810b570:	685b      	ldr	r3, [r3, #4]
 810b572:	085b      	lsrs	r3, r3, #1
 810b574:	441a      	add	r2, r3
 810b576:	697b      	ldr	r3, [r7, #20]
 810b578:	685b      	ldr	r3, [r3, #4]
 810b57a:	fbb2 f3f3 	udiv	r3, r2, r3
 810b57e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b582:	2b0f      	cmp	r3, #15
 810b584:	d909      	bls.n	810b59a <UART_SetConfig+0xa8e>
 810b586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b58c:	d205      	bcs.n	810b59a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810b58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b590:	b29a      	uxth	r2, r3
 810b592:	697b      	ldr	r3, [r7, #20]
 810b594:	681b      	ldr	r3, [r3, #0]
 810b596:	60da      	str	r2, [r3, #12]
 810b598:	e002      	b.n	810b5a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b59a:	2301      	movs	r3, #1
 810b59c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810b5a0:	697b      	ldr	r3, [r7, #20]
 810b5a2:	2201      	movs	r2, #1
 810b5a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810b5a8:	697b      	ldr	r3, [r7, #20]
 810b5aa:	2201      	movs	r2, #1
 810b5ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810b5b0:	697b      	ldr	r3, [r7, #20]
 810b5b2:	2200      	movs	r2, #0
 810b5b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810b5b6:	697b      	ldr	r3, [r7, #20]
 810b5b8:	2200      	movs	r2, #0
 810b5ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810b5bc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810b5c0:	4618      	mov	r0, r3
 810b5c2:	3748      	adds	r7, #72	@ 0x48
 810b5c4:	46bd      	mov	sp, r7
 810b5c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b5ca:	bf00      	nop
 810b5cc:	58024400 	.word	0x58024400
 810b5d0:	03d09000 	.word	0x03d09000
 810b5d4:	003d0900 	.word	0x003d0900
 810b5d8:	08111ff0 	.word	0x08111ff0

0810b5dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810b5dc:	b480      	push	{r7}
 810b5de:	b083      	sub	sp, #12
 810b5e0:	af00      	add	r7, sp, #0
 810b5e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810b5e4:	687b      	ldr	r3, [r7, #4]
 810b5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b5e8:	f003 0308 	and.w	r3, r3, #8
 810b5ec:	2b00      	cmp	r3, #0
 810b5ee:	d00a      	beq.n	810b606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810b5f0:	687b      	ldr	r3, [r7, #4]
 810b5f2:	681b      	ldr	r3, [r3, #0]
 810b5f4:	685b      	ldr	r3, [r3, #4]
 810b5f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810b5fa:	687b      	ldr	r3, [r7, #4]
 810b5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810b5fe:	687b      	ldr	r3, [r7, #4]
 810b600:	681b      	ldr	r3, [r3, #0]
 810b602:	430a      	orrs	r2, r1
 810b604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810b606:	687b      	ldr	r3, [r7, #4]
 810b608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b60a:	f003 0301 	and.w	r3, r3, #1
 810b60e:	2b00      	cmp	r3, #0
 810b610:	d00a      	beq.n	810b628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	681b      	ldr	r3, [r3, #0]
 810b616:	685b      	ldr	r3, [r3, #4]
 810b618:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810b61c:	687b      	ldr	r3, [r7, #4]
 810b61e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b620:	687b      	ldr	r3, [r7, #4]
 810b622:	681b      	ldr	r3, [r3, #0]
 810b624:	430a      	orrs	r2, r1
 810b626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810b628:	687b      	ldr	r3, [r7, #4]
 810b62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b62c:	f003 0302 	and.w	r3, r3, #2
 810b630:	2b00      	cmp	r3, #0
 810b632:	d00a      	beq.n	810b64a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810b634:	687b      	ldr	r3, [r7, #4]
 810b636:	681b      	ldr	r3, [r3, #0]
 810b638:	685b      	ldr	r3, [r3, #4]
 810b63a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810b63e:	687b      	ldr	r3, [r7, #4]
 810b640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	681b      	ldr	r3, [r3, #0]
 810b646:	430a      	orrs	r2, r1
 810b648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810b64a:	687b      	ldr	r3, [r7, #4]
 810b64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b64e:	f003 0304 	and.w	r3, r3, #4
 810b652:	2b00      	cmp	r3, #0
 810b654:	d00a      	beq.n	810b66c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810b656:	687b      	ldr	r3, [r7, #4]
 810b658:	681b      	ldr	r3, [r3, #0]
 810b65a:	685b      	ldr	r3, [r3, #4]
 810b65c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810b660:	687b      	ldr	r3, [r7, #4]
 810b662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810b664:	687b      	ldr	r3, [r7, #4]
 810b666:	681b      	ldr	r3, [r3, #0]
 810b668:	430a      	orrs	r2, r1
 810b66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810b66c:	687b      	ldr	r3, [r7, #4]
 810b66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b670:	f003 0310 	and.w	r3, r3, #16
 810b674:	2b00      	cmp	r3, #0
 810b676:	d00a      	beq.n	810b68e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810b678:	687b      	ldr	r3, [r7, #4]
 810b67a:	681b      	ldr	r3, [r3, #0]
 810b67c:	689b      	ldr	r3, [r3, #8]
 810b67e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810b682:	687b      	ldr	r3, [r7, #4]
 810b684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810b686:	687b      	ldr	r3, [r7, #4]
 810b688:	681b      	ldr	r3, [r3, #0]
 810b68a:	430a      	orrs	r2, r1
 810b68c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810b68e:	687b      	ldr	r3, [r7, #4]
 810b690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b692:	f003 0320 	and.w	r3, r3, #32
 810b696:	2b00      	cmp	r3, #0
 810b698:	d00a      	beq.n	810b6b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810b69a:	687b      	ldr	r3, [r7, #4]
 810b69c:	681b      	ldr	r3, [r3, #0]
 810b69e:	689b      	ldr	r3, [r3, #8]
 810b6a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810b6a4:	687b      	ldr	r3, [r7, #4]
 810b6a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810b6a8:	687b      	ldr	r3, [r7, #4]
 810b6aa:	681b      	ldr	r3, [r3, #0]
 810b6ac:	430a      	orrs	r2, r1
 810b6ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810b6b0:	687b      	ldr	r3, [r7, #4]
 810b6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b6b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b6b8:	2b00      	cmp	r3, #0
 810b6ba:	d01a      	beq.n	810b6f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810b6bc:	687b      	ldr	r3, [r7, #4]
 810b6be:	681b      	ldr	r3, [r3, #0]
 810b6c0:	685b      	ldr	r3, [r3, #4]
 810b6c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810b6c6:	687b      	ldr	r3, [r7, #4]
 810b6c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810b6ca:	687b      	ldr	r3, [r7, #4]
 810b6cc:	681b      	ldr	r3, [r3, #0]
 810b6ce:	430a      	orrs	r2, r1
 810b6d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810b6d2:	687b      	ldr	r3, [r7, #4]
 810b6d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810b6d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b6da:	d10a      	bne.n	810b6f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810b6dc:	687b      	ldr	r3, [r7, #4]
 810b6de:	681b      	ldr	r3, [r3, #0]
 810b6e0:	685b      	ldr	r3, [r3, #4]
 810b6e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810b6e6:	687b      	ldr	r3, [r7, #4]
 810b6e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810b6ea:	687b      	ldr	r3, [r7, #4]
 810b6ec:	681b      	ldr	r3, [r3, #0]
 810b6ee:	430a      	orrs	r2, r1
 810b6f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810b6f2:	687b      	ldr	r3, [r7, #4]
 810b6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b6f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b6fa:	2b00      	cmp	r3, #0
 810b6fc:	d00a      	beq.n	810b714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810b6fe:	687b      	ldr	r3, [r7, #4]
 810b700:	681b      	ldr	r3, [r3, #0]
 810b702:	685b      	ldr	r3, [r3, #4]
 810b704:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810b708:	687b      	ldr	r3, [r7, #4]
 810b70a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810b70c:	687b      	ldr	r3, [r7, #4]
 810b70e:	681b      	ldr	r3, [r3, #0]
 810b710:	430a      	orrs	r2, r1
 810b712:	605a      	str	r2, [r3, #4]
  }
}
 810b714:	bf00      	nop
 810b716:	370c      	adds	r7, #12
 810b718:	46bd      	mov	sp, r7
 810b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b71e:	4770      	bx	lr

0810b720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810b720:	b580      	push	{r7, lr}
 810b722:	b098      	sub	sp, #96	@ 0x60
 810b724:	af02      	add	r7, sp, #8
 810b726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b728:	687b      	ldr	r3, [r7, #4]
 810b72a:	2200      	movs	r2, #0
 810b72c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810b730:	f7f7 ff1e 	bl	8103570 <HAL_GetTick>
 810b734:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810b736:	687b      	ldr	r3, [r7, #4]
 810b738:	681b      	ldr	r3, [r3, #0]
 810b73a:	681b      	ldr	r3, [r3, #0]
 810b73c:	f003 0308 	and.w	r3, r3, #8
 810b740:	2b08      	cmp	r3, #8
 810b742:	d12f      	bne.n	810b7a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810b748:	9300      	str	r3, [sp, #0]
 810b74a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810b74c:	2200      	movs	r2, #0
 810b74e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810b752:	6878      	ldr	r0, [r7, #4]
 810b754:	f000 f88e 	bl	810b874 <UART_WaitOnFlagUntilTimeout>
 810b758:	4603      	mov	r3, r0
 810b75a:	2b00      	cmp	r3, #0
 810b75c:	d022      	beq.n	810b7a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810b75e:	687b      	ldr	r3, [r7, #4]
 810b760:	681b      	ldr	r3, [r3, #0]
 810b762:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b766:	e853 3f00 	ldrex	r3, [r3]
 810b76a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810b76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b76e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b772:	653b      	str	r3, [r7, #80]	@ 0x50
 810b774:	687b      	ldr	r3, [r7, #4]
 810b776:	681b      	ldr	r3, [r3, #0]
 810b778:	461a      	mov	r2, r3
 810b77a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810b77c:	647b      	str	r3, [r7, #68]	@ 0x44
 810b77e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b780:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810b782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b784:	e841 2300 	strex	r3, r2, [r1]
 810b788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810b78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b78c:	2b00      	cmp	r3, #0
 810b78e:	d1e6      	bne.n	810b75e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810b790:	687b      	ldr	r3, [r7, #4]
 810b792:	2220      	movs	r2, #32
 810b794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810b798:	687b      	ldr	r3, [r7, #4]
 810b79a:	2200      	movs	r2, #0
 810b79c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b7a0:	2303      	movs	r3, #3
 810b7a2:	e063      	b.n	810b86c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810b7a4:	687b      	ldr	r3, [r7, #4]
 810b7a6:	681b      	ldr	r3, [r3, #0]
 810b7a8:	681b      	ldr	r3, [r3, #0]
 810b7aa:	f003 0304 	and.w	r3, r3, #4
 810b7ae:	2b04      	cmp	r3, #4
 810b7b0:	d149      	bne.n	810b846 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b7b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810b7b6:	9300      	str	r3, [sp, #0]
 810b7b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810b7ba:	2200      	movs	r2, #0
 810b7bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810b7c0:	6878      	ldr	r0, [r7, #4]
 810b7c2:	f000 f857 	bl	810b874 <UART_WaitOnFlagUntilTimeout>
 810b7c6:	4603      	mov	r3, r0
 810b7c8:	2b00      	cmp	r3, #0
 810b7ca:	d03c      	beq.n	810b846 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b7cc:	687b      	ldr	r3, [r7, #4]
 810b7ce:	681b      	ldr	r3, [r3, #0]
 810b7d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b7d4:	e853 3f00 	ldrex	r3, [r3]
 810b7d8:	623b      	str	r3, [r7, #32]
   return(result);
 810b7da:	6a3b      	ldr	r3, [r7, #32]
 810b7dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b7e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b7e2:	687b      	ldr	r3, [r7, #4]
 810b7e4:	681b      	ldr	r3, [r3, #0]
 810b7e6:	461a      	mov	r2, r3
 810b7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b7ea:	633b      	str	r3, [r7, #48]	@ 0x30
 810b7ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b7ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b7f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b7f2:	e841 2300 	strex	r3, r2, [r1]
 810b7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810b7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b7fa:	2b00      	cmp	r3, #0
 810b7fc:	d1e6      	bne.n	810b7cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b7fe:	687b      	ldr	r3, [r7, #4]
 810b800:	681b      	ldr	r3, [r3, #0]
 810b802:	3308      	adds	r3, #8
 810b804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b806:	693b      	ldr	r3, [r7, #16]
 810b808:	e853 3f00 	ldrex	r3, [r3]
 810b80c:	60fb      	str	r3, [r7, #12]
   return(result);
 810b80e:	68fb      	ldr	r3, [r7, #12]
 810b810:	f023 0301 	bic.w	r3, r3, #1
 810b814:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b816:	687b      	ldr	r3, [r7, #4]
 810b818:	681b      	ldr	r3, [r3, #0]
 810b81a:	3308      	adds	r3, #8
 810b81c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b81e:	61fa      	str	r2, [r7, #28]
 810b820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b822:	69b9      	ldr	r1, [r7, #24]
 810b824:	69fa      	ldr	r2, [r7, #28]
 810b826:	e841 2300 	strex	r3, r2, [r1]
 810b82a:	617b      	str	r3, [r7, #20]
   return(result);
 810b82c:	697b      	ldr	r3, [r7, #20]
 810b82e:	2b00      	cmp	r3, #0
 810b830:	d1e5      	bne.n	810b7fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810b832:	687b      	ldr	r3, [r7, #4]
 810b834:	2220      	movs	r2, #32
 810b836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810b83a:	687b      	ldr	r3, [r7, #4]
 810b83c:	2200      	movs	r2, #0
 810b83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b842:	2303      	movs	r3, #3
 810b844:	e012      	b.n	810b86c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810b846:	687b      	ldr	r3, [r7, #4]
 810b848:	2220      	movs	r2, #32
 810b84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810b84e:	687b      	ldr	r3, [r7, #4]
 810b850:	2220      	movs	r2, #32
 810b852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b856:	687b      	ldr	r3, [r7, #4]
 810b858:	2200      	movs	r2, #0
 810b85a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b85c:	687b      	ldr	r3, [r7, #4]
 810b85e:	2200      	movs	r2, #0
 810b860:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810b862:	687b      	ldr	r3, [r7, #4]
 810b864:	2200      	movs	r2, #0
 810b866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b86a:	2300      	movs	r3, #0
}
 810b86c:	4618      	mov	r0, r3
 810b86e:	3758      	adds	r7, #88	@ 0x58
 810b870:	46bd      	mov	sp, r7
 810b872:	bd80      	pop	{r7, pc}

0810b874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810b874:	b580      	push	{r7, lr}
 810b876:	b084      	sub	sp, #16
 810b878:	af00      	add	r7, sp, #0
 810b87a:	60f8      	str	r0, [r7, #12]
 810b87c:	60b9      	str	r1, [r7, #8]
 810b87e:	603b      	str	r3, [r7, #0]
 810b880:	4613      	mov	r3, r2
 810b882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b884:	e04f      	b.n	810b926 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810b886:	69bb      	ldr	r3, [r7, #24]
 810b888:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b88c:	d04b      	beq.n	810b926 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810b88e:	f7f7 fe6f 	bl	8103570 <HAL_GetTick>
 810b892:	4602      	mov	r2, r0
 810b894:	683b      	ldr	r3, [r7, #0]
 810b896:	1ad3      	subs	r3, r2, r3
 810b898:	69ba      	ldr	r2, [r7, #24]
 810b89a:	429a      	cmp	r2, r3
 810b89c:	d302      	bcc.n	810b8a4 <UART_WaitOnFlagUntilTimeout+0x30>
 810b89e:	69bb      	ldr	r3, [r7, #24]
 810b8a0:	2b00      	cmp	r3, #0
 810b8a2:	d101      	bne.n	810b8a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810b8a4:	2303      	movs	r3, #3
 810b8a6:	e04e      	b.n	810b946 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810b8a8:	68fb      	ldr	r3, [r7, #12]
 810b8aa:	681b      	ldr	r3, [r3, #0]
 810b8ac:	681b      	ldr	r3, [r3, #0]
 810b8ae:	f003 0304 	and.w	r3, r3, #4
 810b8b2:	2b00      	cmp	r3, #0
 810b8b4:	d037      	beq.n	810b926 <UART_WaitOnFlagUntilTimeout+0xb2>
 810b8b6:	68bb      	ldr	r3, [r7, #8]
 810b8b8:	2b80      	cmp	r3, #128	@ 0x80
 810b8ba:	d034      	beq.n	810b926 <UART_WaitOnFlagUntilTimeout+0xb2>
 810b8bc:	68bb      	ldr	r3, [r7, #8]
 810b8be:	2b40      	cmp	r3, #64	@ 0x40
 810b8c0:	d031      	beq.n	810b926 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810b8c2:	68fb      	ldr	r3, [r7, #12]
 810b8c4:	681b      	ldr	r3, [r3, #0]
 810b8c6:	69db      	ldr	r3, [r3, #28]
 810b8c8:	f003 0308 	and.w	r3, r3, #8
 810b8cc:	2b08      	cmp	r3, #8
 810b8ce:	d110      	bne.n	810b8f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810b8d0:	68fb      	ldr	r3, [r7, #12]
 810b8d2:	681b      	ldr	r3, [r3, #0]
 810b8d4:	2208      	movs	r2, #8
 810b8d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b8d8:	68f8      	ldr	r0, [r7, #12]
 810b8da:	f000 f838 	bl	810b94e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810b8de:	68fb      	ldr	r3, [r7, #12]
 810b8e0:	2208      	movs	r2, #8
 810b8e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b8e6:	68fb      	ldr	r3, [r7, #12]
 810b8e8:	2200      	movs	r2, #0
 810b8ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810b8ee:	2301      	movs	r3, #1
 810b8f0:	e029      	b.n	810b946 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b8f2:	68fb      	ldr	r3, [r7, #12]
 810b8f4:	681b      	ldr	r3, [r3, #0]
 810b8f6:	69db      	ldr	r3, [r3, #28]
 810b8f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810b8fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b900:	d111      	bne.n	810b926 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b902:	68fb      	ldr	r3, [r7, #12]
 810b904:	681b      	ldr	r3, [r3, #0]
 810b906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810b90a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b90c:	68f8      	ldr	r0, [r7, #12]
 810b90e:	f000 f81e 	bl	810b94e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b912:	68fb      	ldr	r3, [r7, #12]
 810b914:	2220      	movs	r2, #32
 810b916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b91a:	68fb      	ldr	r3, [r7, #12]
 810b91c:	2200      	movs	r2, #0
 810b91e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810b922:	2303      	movs	r3, #3
 810b924:	e00f      	b.n	810b946 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b926:	68fb      	ldr	r3, [r7, #12]
 810b928:	681b      	ldr	r3, [r3, #0]
 810b92a:	69da      	ldr	r2, [r3, #28]
 810b92c:	68bb      	ldr	r3, [r7, #8]
 810b92e:	4013      	ands	r3, r2
 810b930:	68ba      	ldr	r2, [r7, #8]
 810b932:	429a      	cmp	r2, r3
 810b934:	bf0c      	ite	eq
 810b936:	2301      	moveq	r3, #1
 810b938:	2300      	movne	r3, #0
 810b93a:	b2db      	uxtb	r3, r3
 810b93c:	461a      	mov	r2, r3
 810b93e:	79fb      	ldrb	r3, [r7, #7]
 810b940:	429a      	cmp	r2, r3
 810b942:	d0a0      	beq.n	810b886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b944:	2300      	movs	r3, #0
}
 810b946:	4618      	mov	r0, r3
 810b948:	3710      	adds	r7, #16
 810b94a:	46bd      	mov	sp, r7
 810b94c:	bd80      	pop	{r7, pc}

0810b94e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b94e:	b480      	push	{r7}
 810b950:	b095      	sub	sp, #84	@ 0x54
 810b952:	af00      	add	r7, sp, #0
 810b954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b956:	687b      	ldr	r3, [r7, #4]
 810b958:	681b      	ldr	r3, [r3, #0]
 810b95a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b95e:	e853 3f00 	ldrex	r3, [r3]
 810b962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b96c:	687b      	ldr	r3, [r7, #4]
 810b96e:	681b      	ldr	r3, [r3, #0]
 810b970:	461a      	mov	r2, r3
 810b972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b974:	643b      	str	r3, [r7, #64]	@ 0x40
 810b976:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b97a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b97c:	e841 2300 	strex	r3, r2, [r1]
 810b980:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b984:	2b00      	cmp	r3, #0
 810b986:	d1e6      	bne.n	810b956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b988:	687b      	ldr	r3, [r7, #4]
 810b98a:	681b      	ldr	r3, [r3, #0]
 810b98c:	3308      	adds	r3, #8
 810b98e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b990:	6a3b      	ldr	r3, [r7, #32]
 810b992:	e853 3f00 	ldrex	r3, [r3]
 810b996:	61fb      	str	r3, [r7, #28]
   return(result);
 810b998:	69fb      	ldr	r3, [r7, #28]
 810b99a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b99e:	f023 0301 	bic.w	r3, r3, #1
 810b9a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b9a4:	687b      	ldr	r3, [r7, #4]
 810b9a6:	681b      	ldr	r3, [r3, #0]
 810b9a8:	3308      	adds	r3, #8
 810b9aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b9ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b9ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b9b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b9b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b9b4:	e841 2300 	strex	r3, r2, [r1]
 810b9b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b9bc:	2b00      	cmp	r3, #0
 810b9be:	d1e3      	bne.n	810b988 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b9c0:	687b      	ldr	r3, [r7, #4]
 810b9c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b9c4:	2b01      	cmp	r3, #1
 810b9c6:	d118      	bne.n	810b9fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b9c8:	687b      	ldr	r3, [r7, #4]
 810b9ca:	681b      	ldr	r3, [r3, #0]
 810b9cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b9ce:	68fb      	ldr	r3, [r7, #12]
 810b9d0:	e853 3f00 	ldrex	r3, [r3]
 810b9d4:	60bb      	str	r3, [r7, #8]
   return(result);
 810b9d6:	68bb      	ldr	r3, [r7, #8]
 810b9d8:	f023 0310 	bic.w	r3, r3, #16
 810b9dc:	647b      	str	r3, [r7, #68]	@ 0x44
 810b9de:	687b      	ldr	r3, [r7, #4]
 810b9e0:	681b      	ldr	r3, [r3, #0]
 810b9e2:	461a      	mov	r2, r3
 810b9e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b9e6:	61bb      	str	r3, [r7, #24]
 810b9e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b9ea:	6979      	ldr	r1, [r7, #20]
 810b9ec:	69ba      	ldr	r2, [r7, #24]
 810b9ee:	e841 2300 	strex	r3, r2, [r1]
 810b9f2:	613b      	str	r3, [r7, #16]
   return(result);
 810b9f4:	693b      	ldr	r3, [r7, #16]
 810b9f6:	2b00      	cmp	r3, #0
 810b9f8:	d1e6      	bne.n	810b9c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b9fa:	687b      	ldr	r3, [r7, #4]
 810b9fc:	2220      	movs	r2, #32
 810b9fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ba02:	687b      	ldr	r3, [r7, #4]
 810ba04:	2200      	movs	r2, #0
 810ba06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810ba08:	687b      	ldr	r3, [r7, #4]
 810ba0a:	2200      	movs	r2, #0
 810ba0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810ba0e:	bf00      	nop
 810ba10:	3754      	adds	r7, #84	@ 0x54
 810ba12:	46bd      	mov	sp, r7
 810ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba18:	4770      	bx	lr

0810ba1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810ba1a:	b480      	push	{r7}
 810ba1c:	b085      	sub	sp, #20
 810ba1e:	af00      	add	r7, sp, #0
 810ba20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ba22:	687b      	ldr	r3, [r7, #4]
 810ba24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ba28:	2b01      	cmp	r3, #1
 810ba2a:	d101      	bne.n	810ba30 <HAL_UARTEx_DisableFifoMode+0x16>
 810ba2c:	2302      	movs	r3, #2
 810ba2e:	e027      	b.n	810ba80 <HAL_UARTEx_DisableFifoMode+0x66>
 810ba30:	687b      	ldr	r3, [r7, #4]
 810ba32:	2201      	movs	r2, #1
 810ba34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ba38:	687b      	ldr	r3, [r7, #4]
 810ba3a:	2224      	movs	r2, #36	@ 0x24
 810ba3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ba40:	687b      	ldr	r3, [r7, #4]
 810ba42:	681b      	ldr	r3, [r3, #0]
 810ba44:	681b      	ldr	r3, [r3, #0]
 810ba46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ba48:	687b      	ldr	r3, [r7, #4]
 810ba4a:	681b      	ldr	r3, [r3, #0]
 810ba4c:	681a      	ldr	r2, [r3, #0]
 810ba4e:	687b      	ldr	r3, [r7, #4]
 810ba50:	681b      	ldr	r3, [r3, #0]
 810ba52:	f022 0201 	bic.w	r2, r2, #1
 810ba56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810ba58:	68fb      	ldr	r3, [r7, #12]
 810ba5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810ba5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810ba60:	687b      	ldr	r3, [r7, #4]
 810ba62:	2200      	movs	r2, #0
 810ba64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ba66:	687b      	ldr	r3, [r7, #4]
 810ba68:	681b      	ldr	r3, [r3, #0]
 810ba6a:	68fa      	ldr	r2, [r7, #12]
 810ba6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ba6e:	687b      	ldr	r3, [r7, #4]
 810ba70:	2220      	movs	r2, #32
 810ba72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ba76:	687b      	ldr	r3, [r7, #4]
 810ba78:	2200      	movs	r2, #0
 810ba7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ba7e:	2300      	movs	r3, #0
}
 810ba80:	4618      	mov	r0, r3
 810ba82:	3714      	adds	r7, #20
 810ba84:	46bd      	mov	sp, r7
 810ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba8a:	4770      	bx	lr

0810ba8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ba8c:	b580      	push	{r7, lr}
 810ba8e:	b084      	sub	sp, #16
 810ba90:	af00      	add	r7, sp, #0
 810ba92:	6078      	str	r0, [r7, #4]
 810ba94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ba96:	687b      	ldr	r3, [r7, #4]
 810ba98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ba9c:	2b01      	cmp	r3, #1
 810ba9e:	d101      	bne.n	810baa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810baa0:	2302      	movs	r3, #2
 810baa2:	e02d      	b.n	810bb00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810baa4:	687b      	ldr	r3, [r7, #4]
 810baa6:	2201      	movs	r2, #1
 810baa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810baac:	687b      	ldr	r3, [r7, #4]
 810baae:	2224      	movs	r2, #36	@ 0x24
 810bab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810bab4:	687b      	ldr	r3, [r7, #4]
 810bab6:	681b      	ldr	r3, [r3, #0]
 810bab8:	681b      	ldr	r3, [r3, #0]
 810baba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810babc:	687b      	ldr	r3, [r7, #4]
 810babe:	681b      	ldr	r3, [r3, #0]
 810bac0:	681a      	ldr	r2, [r3, #0]
 810bac2:	687b      	ldr	r3, [r7, #4]
 810bac4:	681b      	ldr	r3, [r3, #0]
 810bac6:	f022 0201 	bic.w	r2, r2, #1
 810baca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810bacc:	687b      	ldr	r3, [r7, #4]
 810bace:	681b      	ldr	r3, [r3, #0]
 810bad0:	689b      	ldr	r3, [r3, #8]
 810bad2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810bad6:	687b      	ldr	r3, [r7, #4]
 810bad8:	681b      	ldr	r3, [r3, #0]
 810bada:	683a      	ldr	r2, [r7, #0]
 810badc:	430a      	orrs	r2, r1
 810bade:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810bae0:	6878      	ldr	r0, [r7, #4]
 810bae2:	f000 f84f 	bl	810bb84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810bae6:	687b      	ldr	r3, [r7, #4]
 810bae8:	681b      	ldr	r3, [r3, #0]
 810baea:	68fa      	ldr	r2, [r7, #12]
 810baec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810baee:	687b      	ldr	r3, [r7, #4]
 810baf0:	2220      	movs	r2, #32
 810baf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810baf6:	687b      	ldr	r3, [r7, #4]
 810baf8:	2200      	movs	r2, #0
 810bafa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810bafe:	2300      	movs	r3, #0
}
 810bb00:	4618      	mov	r0, r3
 810bb02:	3710      	adds	r7, #16
 810bb04:	46bd      	mov	sp, r7
 810bb06:	bd80      	pop	{r7, pc}

0810bb08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810bb08:	b580      	push	{r7, lr}
 810bb0a:	b084      	sub	sp, #16
 810bb0c:	af00      	add	r7, sp, #0
 810bb0e:	6078      	str	r0, [r7, #4]
 810bb10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810bb12:	687b      	ldr	r3, [r7, #4]
 810bb14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810bb18:	2b01      	cmp	r3, #1
 810bb1a:	d101      	bne.n	810bb20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810bb1c:	2302      	movs	r3, #2
 810bb1e:	e02d      	b.n	810bb7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810bb20:	687b      	ldr	r3, [r7, #4]
 810bb22:	2201      	movs	r2, #1
 810bb24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810bb28:	687b      	ldr	r3, [r7, #4]
 810bb2a:	2224      	movs	r2, #36	@ 0x24
 810bb2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810bb30:	687b      	ldr	r3, [r7, #4]
 810bb32:	681b      	ldr	r3, [r3, #0]
 810bb34:	681b      	ldr	r3, [r3, #0]
 810bb36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810bb38:	687b      	ldr	r3, [r7, #4]
 810bb3a:	681b      	ldr	r3, [r3, #0]
 810bb3c:	681a      	ldr	r2, [r3, #0]
 810bb3e:	687b      	ldr	r3, [r7, #4]
 810bb40:	681b      	ldr	r3, [r3, #0]
 810bb42:	f022 0201 	bic.w	r2, r2, #1
 810bb46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810bb48:	687b      	ldr	r3, [r7, #4]
 810bb4a:	681b      	ldr	r3, [r3, #0]
 810bb4c:	689b      	ldr	r3, [r3, #8]
 810bb4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810bb52:	687b      	ldr	r3, [r7, #4]
 810bb54:	681b      	ldr	r3, [r3, #0]
 810bb56:	683a      	ldr	r2, [r7, #0]
 810bb58:	430a      	orrs	r2, r1
 810bb5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810bb5c:	6878      	ldr	r0, [r7, #4]
 810bb5e:	f000 f811 	bl	810bb84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810bb62:	687b      	ldr	r3, [r7, #4]
 810bb64:	681b      	ldr	r3, [r3, #0]
 810bb66:	68fa      	ldr	r2, [r7, #12]
 810bb68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810bb6a:	687b      	ldr	r3, [r7, #4]
 810bb6c:	2220      	movs	r2, #32
 810bb6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810bb72:	687b      	ldr	r3, [r7, #4]
 810bb74:	2200      	movs	r2, #0
 810bb76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810bb7a:	2300      	movs	r3, #0
}
 810bb7c:	4618      	mov	r0, r3
 810bb7e:	3710      	adds	r7, #16
 810bb80:	46bd      	mov	sp, r7
 810bb82:	bd80      	pop	{r7, pc}

0810bb84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810bb84:	b480      	push	{r7}
 810bb86:	b085      	sub	sp, #20
 810bb88:	af00      	add	r7, sp, #0
 810bb8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810bb8c:	687b      	ldr	r3, [r7, #4]
 810bb8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810bb90:	2b00      	cmp	r3, #0
 810bb92:	d108      	bne.n	810bba6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810bb94:	687b      	ldr	r3, [r7, #4]
 810bb96:	2201      	movs	r2, #1
 810bb98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810bb9c:	687b      	ldr	r3, [r7, #4]
 810bb9e:	2201      	movs	r2, #1
 810bba0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810bba4:	e031      	b.n	810bc0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810bba6:	2310      	movs	r3, #16
 810bba8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810bbaa:	2310      	movs	r3, #16
 810bbac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810bbae:	687b      	ldr	r3, [r7, #4]
 810bbb0:	681b      	ldr	r3, [r3, #0]
 810bbb2:	689b      	ldr	r3, [r3, #8]
 810bbb4:	0e5b      	lsrs	r3, r3, #25
 810bbb6:	b2db      	uxtb	r3, r3
 810bbb8:	f003 0307 	and.w	r3, r3, #7
 810bbbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810bbbe:	687b      	ldr	r3, [r7, #4]
 810bbc0:	681b      	ldr	r3, [r3, #0]
 810bbc2:	689b      	ldr	r3, [r3, #8]
 810bbc4:	0f5b      	lsrs	r3, r3, #29
 810bbc6:	b2db      	uxtb	r3, r3
 810bbc8:	f003 0307 	and.w	r3, r3, #7
 810bbcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810bbce:	7bbb      	ldrb	r3, [r7, #14]
 810bbd0:	7b3a      	ldrb	r2, [r7, #12]
 810bbd2:	4911      	ldr	r1, [pc, #68]	@ (810bc18 <UARTEx_SetNbDataToProcess+0x94>)
 810bbd4:	5c8a      	ldrb	r2, [r1, r2]
 810bbd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810bbda:	7b3a      	ldrb	r2, [r7, #12]
 810bbdc:	490f      	ldr	r1, [pc, #60]	@ (810bc1c <UARTEx_SetNbDataToProcess+0x98>)
 810bbde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810bbe0:	fb93 f3f2 	sdiv	r3, r3, r2
 810bbe4:	b29a      	uxth	r2, r3
 810bbe6:	687b      	ldr	r3, [r7, #4]
 810bbe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810bbec:	7bfb      	ldrb	r3, [r7, #15]
 810bbee:	7b7a      	ldrb	r2, [r7, #13]
 810bbf0:	4909      	ldr	r1, [pc, #36]	@ (810bc18 <UARTEx_SetNbDataToProcess+0x94>)
 810bbf2:	5c8a      	ldrb	r2, [r1, r2]
 810bbf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810bbf8:	7b7a      	ldrb	r2, [r7, #13]
 810bbfa:	4908      	ldr	r1, [pc, #32]	@ (810bc1c <UARTEx_SetNbDataToProcess+0x98>)
 810bbfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810bbfe:	fb93 f3f2 	sdiv	r3, r3, r2
 810bc02:	b29a      	uxth	r2, r3
 810bc04:	687b      	ldr	r3, [r7, #4]
 810bc06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810bc0a:	bf00      	nop
 810bc0c:	3714      	adds	r7, #20
 810bc0e:	46bd      	mov	sp, r7
 810bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc14:	4770      	bx	lr
 810bc16:	bf00      	nop
 810bc18:	08112008 	.word	0x08112008
 810bc1c:	08112010 	.word	0x08112010

0810bc20 <arm_mat_trans_f32>:
 810bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bc24:	8802      	ldrh	r2, [r0, #0]
 810bc26:	884b      	ldrh	r3, [r1, #2]
 810bc28:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810bc2c:	684f      	ldr	r7, [r1, #4]
 810bc2e:	8840      	ldrh	r0, [r0, #2]
 810bc30:	4293      	cmp	r3, r2
 810bc32:	b083      	sub	sp, #12
 810bc34:	d14c      	bne.n	810bcd0 <arm_mat_trans_f32+0xb0>
 810bc36:	f8b1 e000 	ldrh.w	lr, [r1]
 810bc3a:	4586      	cmp	lr, r0
 810bc3c:	d148      	bne.n	810bcd0 <arm_mat_trans_f32+0xb0>
 810bc3e:	ea4f 089e 	mov.w	r8, lr, lsr #2
 810bc42:	009c      	lsls	r4, r3, #2
 810bc44:	f00e 0e03 	and.w	lr, lr, #3
 810bc48:	fb08 f904 	mul.w	r9, r8, r4
 810bc4c:	ea4f 028e 	mov.w	r2, lr, lsl #2
 810bc50:	011d      	lsls	r5, r3, #4
 810bc52:	00db      	lsls	r3, r3, #3
 810bc54:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810bc58:	eb07 0a04 	add.w	sl, r7, r4
 810bc5c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 810bc60:	9201      	str	r2, [sp, #4]
 810bc62:	9300      	str	r3, [sp, #0]
 810bc64:	463b      	mov	r3, r7
 810bc66:	f1b8 0f00 	cmp.w	r8, #0
 810bc6a:	d01d      	beq.n	810bca8 <arm_mat_trans_f32+0x88>
 810bc6c:	9900      	ldr	r1, [sp, #0]
 810bc6e:	f10c 0210 	add.w	r2, ip, #16
 810bc72:	4439      	add	r1, r7
 810bc74:	4640      	mov	r0, r8
 810bc76:	f852 6c10 	ldr.w	r6, [r2, #-16]
 810bc7a:	601e      	str	r6, [r3, #0]
 810bc7c:	ed52 7a03 	vldr	s15, [r2, #-12]
 810bc80:	191e      	adds	r6, r3, r4
 810bc82:	edc6 7a00 	vstr	s15, [r6]
 810bc86:	f852 6c08 	ldr.w	r6, [r2, #-8]
 810bc8a:	600e      	str	r6, [r1, #0]
 810bc8c:	ed52 7a01 	vldr	s15, [r2, #-4]
 810bc90:	190e      	adds	r6, r1, r4
 810bc92:	3801      	subs	r0, #1
 810bc94:	442b      	add	r3, r5
 810bc96:	f102 0210 	add.w	r2, r2, #16
 810bc9a:	edc6 7a00 	vstr	s15, [r6]
 810bc9e:	4429      	add	r1, r5
 810bca0:	d1e9      	bne.n	810bc76 <arm_mat_trans_f32+0x56>
 810bca2:	44dc      	add	ip, fp
 810bca4:	eb09 0307 	add.w	r3, r9, r7
 810bca8:	f1be 0f00 	cmp.w	lr, #0
 810bcac:	d009      	beq.n	810bcc2 <arm_mat_trans_f32+0xa2>
 810bcae:	4672      	mov	r2, lr
 810bcb0:	4661      	mov	r1, ip
 810bcb2:	f851 0b04 	ldr.w	r0, [r1], #4
 810bcb6:	6018      	str	r0, [r3, #0]
 810bcb8:	3a01      	subs	r2, #1
 810bcba:	4423      	add	r3, r4
 810bcbc:	d1f9      	bne.n	810bcb2 <arm_mat_trans_f32+0x92>
 810bcbe:	9b01      	ldr	r3, [sp, #4]
 810bcc0:	449c      	add	ip, r3
 810bcc2:	3704      	adds	r7, #4
 810bcc4:	4557      	cmp	r7, sl
 810bcc6:	d1cd      	bne.n	810bc64 <arm_mat_trans_f32+0x44>
 810bcc8:	2000      	movs	r0, #0
 810bcca:	b003      	add	sp, #12
 810bccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bcd0:	f06f 0002 	mvn.w	r0, #2
 810bcd4:	e7f9      	b.n	810bcca <arm_mat_trans_f32+0xaa>
 810bcd6:	bf00      	nop

0810bcd8 <arm_mat_sub_f32>:
 810bcd8:	b4f0      	push	{r4, r5, r6, r7}
 810bcda:	e9d1 4700 	ldrd	r4, r7, [r1]
 810bcde:	6803      	ldr	r3, [r0, #0]
 810bce0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810bce4:	6856      	ldr	r6, [r2, #4]
 810bce6:	42a3      	cmp	r3, r4
 810bce8:	d15d      	bne.n	810bda6 <arm_mat_sub_f32+0xce>
 810bcea:	6812      	ldr	r2, [r2, #0]
 810bcec:	4293      	cmp	r3, r2
 810bcee:	d15a      	bne.n	810bda6 <arm_mat_sub_f32+0xce>
 810bcf0:	8803      	ldrh	r3, [r0, #0]
 810bcf2:	8844      	ldrh	r4, [r0, #2]
 810bcf4:	fb04 f403 	mul.w	r4, r4, r3
 810bcf8:	08a5      	lsrs	r5, r4, #2
 810bcfa:	d032      	beq.n	810bd62 <arm_mat_sub_f32+0x8a>
 810bcfc:	f10c 0110 	add.w	r1, ip, #16
 810bd00:	f107 0210 	add.w	r2, r7, #16
 810bd04:	f106 0310 	add.w	r3, r6, #16
 810bd08:	4628      	mov	r0, r5
 810bd0a:	ed12 7a04 	vldr	s14, [r2, #-16]
 810bd0e:	ed51 7a04 	vldr	s15, [r1, #-16]
 810bd12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bd16:	3801      	subs	r0, #1
 810bd18:	ed43 7a04 	vstr	s15, [r3, #-16]
 810bd1c:	ed12 7a03 	vldr	s14, [r2, #-12]
 810bd20:	ed51 7a03 	vldr	s15, [r1, #-12]
 810bd24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bd28:	f101 0110 	add.w	r1, r1, #16
 810bd2c:	ed43 7a03 	vstr	s15, [r3, #-12]
 810bd30:	ed12 7a02 	vldr	s14, [r2, #-8]
 810bd34:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810bd38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bd3c:	f102 0210 	add.w	r2, r2, #16
 810bd40:	ed43 7a02 	vstr	s15, [r3, #-8]
 810bd44:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810bd48:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810bd4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bd50:	f103 0310 	add.w	r3, r3, #16
 810bd54:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810bd58:	d1d7      	bne.n	810bd0a <arm_mat_sub_f32+0x32>
 810bd5a:	012b      	lsls	r3, r5, #4
 810bd5c:	449c      	add	ip, r3
 810bd5e:	441f      	add	r7, r3
 810bd60:	441e      	add	r6, r3
 810bd62:	f014 0403 	ands.w	r4, r4, #3
 810bd66:	d01b      	beq.n	810bda0 <arm_mat_sub_f32+0xc8>
 810bd68:	eddc 7a00 	vldr	s15, [ip]
 810bd6c:	ed97 7a00 	vldr	s14, [r7]
 810bd70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bd74:	3c01      	subs	r4, #1
 810bd76:	edc6 7a00 	vstr	s15, [r6]
 810bd7a:	d011      	beq.n	810bda0 <arm_mat_sub_f32+0xc8>
 810bd7c:	eddc 7a01 	vldr	s15, [ip, #4]
 810bd80:	ed97 7a01 	vldr	s14, [r7, #4]
 810bd84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bd88:	2c01      	cmp	r4, #1
 810bd8a:	edc6 7a01 	vstr	s15, [r6, #4]
 810bd8e:	d007      	beq.n	810bda0 <arm_mat_sub_f32+0xc8>
 810bd90:	eddc 7a02 	vldr	s15, [ip, #8]
 810bd94:	ed97 7a02 	vldr	s14, [r7, #8]
 810bd98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810bd9c:	edc6 7a02 	vstr	s15, [r6, #8]
 810bda0:	2000      	movs	r0, #0
 810bda2:	bcf0      	pop	{r4, r5, r6, r7}
 810bda4:	4770      	bx	lr
 810bda6:	f06f 0002 	mvn.w	r0, #2
 810bdaa:	e7fa      	b.n	810bda2 <arm_mat_sub_f32+0xca>

0810bdac <arm_mat_mult_f32>:
 810bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bdb0:	8845      	ldrh	r5, [r0, #2]
 810bdb2:	880b      	ldrh	r3, [r1, #0]
 810bdb4:	8806      	ldrh	r6, [r0, #0]
 810bdb6:	6847      	ldr	r7, [r0, #4]
 810bdb8:	6854      	ldr	r4, [r2, #4]
 810bdba:	6848      	ldr	r0, [r1, #4]
 810bdbc:	b08b      	sub	sp, #44	@ 0x2c
 810bdbe:	42ab      	cmp	r3, r5
 810bdc0:	9109      	str	r1, [sp, #36]	@ 0x24
 810bdc2:	9604      	str	r6, [sp, #16]
 810bdc4:	8849      	ldrh	r1, [r1, #2]
 810bdc6:	f040 808a 	bne.w	810bede <arm_mat_mult_f32+0x132>
 810bdca:	8815      	ldrh	r5, [r2, #0]
 810bdcc:	42b5      	cmp	r5, r6
 810bdce:	f040 8086 	bne.w	810bede <arm_mat_mult_f32+0x132>
 810bdd2:	8852      	ldrh	r2, [r2, #2]
 810bdd4:	428a      	cmp	r2, r1
 810bdd6:	f040 8082 	bne.w	810bede <arm_mat_mult_f32+0x132>
 810bdda:	ea4f 0893 	mov.w	r8, r3, lsr #2
 810bdde:	1d01      	adds	r1, r0, #4
 810bde0:	0116      	lsls	r6, r2, #4
 810bde2:	9108      	str	r1, [sp, #32]
 810bde4:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 810bde8:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 810bdec:	9101      	str	r1, [sp, #4]
 810bdee:	fb06 f108 	mul.w	r1, r6, r8
 810bdf2:	0095      	lsls	r5, r2, #2
 810bdf4:	9103      	str	r1, [sp, #12]
 810bdf6:	00d2      	lsls	r2, r2, #3
 810bdf8:	ea4f 018c 	mov.w	r1, ip, lsl #2
 810bdfc:	f003 0903 	and.w	r9, r3, #3
 810be00:	009b      	lsls	r3, r3, #2
 810be02:	f107 0b10 	add.w	fp, r7, #16
 810be06:	eb04 0a05 	add.w	sl, r4, r5
 810be0a:	9107      	str	r1, [sp, #28]
 810be0c:	9202      	str	r2, [sp, #8]
 810be0e:	9306      	str	r3, [sp, #24]
 810be10:	f1ab 0310 	sub.w	r3, fp, #16
 810be14:	9305      	str	r3, [sp, #20]
 810be16:	9b07      	ldr	r3, [sp, #28]
 810be18:	f8dd e020 	ldr.w	lr, [sp, #32]
 810be1c:	eb03 0c0a 	add.w	ip, r3, sl
 810be20:	eddf 7a31 	vldr	s15, [pc, #196]	@ 810bee8 <arm_mat_mult_f32+0x13c>
 810be24:	f1b8 0f00 	cmp.w	r8, #0
 810be28:	d053      	beq.n	810bed2 <arm_mat_mult_f32+0x126>
 810be2a:	9b02      	ldr	r3, [sp, #8]
 810be2c:	4644      	mov	r4, r8
 810be2e:	18c1      	adds	r1, r0, r3
 810be30:	4602      	mov	r2, r0
 810be32:	465b      	mov	r3, fp
 810be34:	ed92 6a00 	vldr	s12, [r2]
 810be38:	ed13 7a04 	vldr	s14, [r3, #-16]
 810be3c:	ed53 4a03 	vldr	s9, [r3, #-12]
 810be40:	ed53 6a02 	vldr	s13, [r3, #-8]
 810be44:	ed91 5a00 	vldr	s10, [r1]
 810be48:	ed53 5a01 	vldr	s11, [r3, #-4]
 810be4c:	1957      	adds	r7, r2, r5
 810be4e:	ee27 7a06 	vmul.f32	s14, s14, s12
 810be52:	ed97 6a00 	vldr	s12, [r7]
 810be56:	ee77 7a27 	vadd.f32	s15, s14, s15
 810be5a:	ee26 6a24 	vmul.f32	s12, s12, s9
 810be5e:	194f      	adds	r7, r1, r5
 810be60:	ee36 6a27 	vadd.f32	s12, s12, s15
 810be64:	ee26 7a85 	vmul.f32	s14, s13, s10
 810be68:	edd7 7a00 	vldr	s15, [r7]
 810be6c:	ee37 7a06 	vadd.f32	s14, s14, s12
 810be70:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810be74:	3c01      	subs	r4, #1
 810be76:	4432      	add	r2, r6
 810be78:	4431      	add	r1, r6
 810be7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810be7e:	f103 0310 	add.w	r3, r3, #16
 810be82:	d1d7      	bne.n	810be34 <arm_mat_mult_f32+0x88>
 810be84:	9b03      	ldr	r3, [sp, #12]
 810be86:	9a01      	ldr	r2, [sp, #4]
 810be88:	4418      	add	r0, r3
 810be8a:	f1b9 0f00 	cmp.w	r9, #0
 810be8e:	d00b      	beq.n	810bea8 <arm_mat_mult_f32+0xfc>
 810be90:	464b      	mov	r3, r9
 810be92:	edd0 6a00 	vldr	s13, [r0]
 810be96:	ecb2 7a01 	vldmia	r2!, {s14}
 810be9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 810be9e:	3b01      	subs	r3, #1
 810bea0:	4428      	add	r0, r5
 810bea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 810bea6:	d1f4      	bne.n	810be92 <arm_mat_mult_f32+0xe6>
 810bea8:	ecec 7a01 	vstmia	ip!, {s15}
 810beac:	45d4      	cmp	ip, sl
 810beae:	4670      	mov	r0, lr
 810beb0:	f10e 0e04 	add.w	lr, lr, #4
 810beb4:	d1b4      	bne.n	810be20 <arm_mat_mult_f32+0x74>
 810beb6:	9a01      	ldr	r2, [sp, #4]
 810beb8:	9b06      	ldr	r3, [sp, #24]
 810beba:	4611      	mov	r1, r2
 810bebc:	4419      	add	r1, r3
 810bebe:	449b      	add	fp, r3
 810bec0:	9b04      	ldr	r3, [sp, #16]
 810bec2:	9101      	str	r1, [sp, #4]
 810bec4:	3b01      	subs	r3, #1
 810bec6:	44aa      	add	sl, r5
 810bec8:	9304      	str	r3, [sp, #16]
 810beca:	d004      	beq.n	810bed6 <arm_mat_mult_f32+0x12a>
 810becc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810bece:	6858      	ldr	r0, [r3, #4]
 810bed0:	e79e      	b.n	810be10 <arm_mat_mult_f32+0x64>
 810bed2:	9a05      	ldr	r2, [sp, #20]
 810bed4:	e7d9      	b.n	810be8a <arm_mat_mult_f32+0xde>
 810bed6:	4618      	mov	r0, r3
 810bed8:	b00b      	add	sp, #44	@ 0x2c
 810beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bede:	f06f 0002 	mvn.w	r0, #2
 810bee2:	b00b      	add	sp, #44	@ 0x2c
 810bee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bee8:	00000000 	.word	0x00000000

0810beec <arm_mat_inverse_f32>:
 810beec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bef0:	8843      	ldrh	r3, [r0, #2]
 810bef2:	8804      	ldrh	r4, [r0, #0]
 810bef4:	684e      	ldr	r6, [r1, #4]
 810bef6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 810befa:	b087      	sub	sp, #28
 810befc:	429c      	cmp	r4, r3
 810befe:	9301      	str	r3, [sp, #4]
 810bf00:	9603      	str	r6, [sp, #12]
 810bf02:	f040 80ea 	bne.w	810c0da <arm_mat_inverse_f32+0x1ee>
 810bf06:	880a      	ldrh	r2, [r1, #0]
 810bf08:	884b      	ldrh	r3, [r1, #2]
 810bf0a:	4293      	cmp	r3, r2
 810bf0c:	f040 80e5 	bne.w	810c0da <arm_mat_inverse_f32+0x1ee>
 810bf10:	429c      	cmp	r4, r3
 810bf12:	f040 80e2 	bne.w	810c0da <arm_mat_inverse_f32+0x1ee>
 810bf16:	9005      	str	r0, [sp, #20]
 810bf18:	b30c      	cbz	r4, 810bf5e <arm_mat_inverse_f32+0x72>
 810bf1a:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 810bf1e:	1e67      	subs	r7, r4, #1
 810bf20:	f846 bb04 	str.w	fp, [r6], #4
 810bf24:	d01b      	beq.n	810bf5e <arm_mat_inverse_f32+0x72>
 810bf26:	f04f 0801 	mov.w	r8, #1
 810bf2a:	00ba      	lsls	r2, r7, #2
 810bf2c:	eb06 0a02 	add.w	sl, r6, r2
 810bf30:	ea4f 0588 	mov.w	r5, r8, lsl #2
 810bf34:	4630      	mov	r0, r6
 810bf36:	2100      	movs	r1, #0
 810bf38:	f001 f9e2 	bl	810d300 <memset>
 810bf3c:	eb0a 0605 	add.w	r6, sl, r5
 810bf40:	462a      	mov	r2, r5
 810bf42:	2100      	movs	r1, #0
 810bf44:	4650      	mov	r0, sl
 810bf46:	f1b8 0f00 	cmp.w	r8, #0
 810bf4a:	f000 80cb 	beq.w	810c0e4 <arm_mat_inverse_f32+0x1f8>
 810bf4e:	f001 f9d7 	bl	810d300 <memset>
 810bf52:	3f01      	subs	r7, #1
 810bf54:	f108 0801 	add.w	r8, r8, #1
 810bf58:	f846 bb04 	str.w	fp, [r6], #4
 810bf5c:	d1e5      	bne.n	810bf2a <arm_mat_inverse_f32+0x3e>
 810bf5e:	9b01      	ldr	r3, [sp, #4]
 810bf60:	2b00      	cmp	r3, #0
 810bf62:	f000 80b5 	beq.w	810c0d0 <arm_mat_inverse_f32+0x1e4>
 810bf66:	009d      	lsls	r5, r3, #2
 810bf68:	eb09 0205 	add.w	r2, r9, r5
 810bf6c:	46cc      	mov	ip, r9
 810bf6e:	9202      	str	r2, [sp, #8]
 810bf70:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810bf74:	1d2a      	adds	r2, r5, #4
 810bf76:	9204      	str	r2, [sp, #16]
 810bf78:	462f      	mov	r7, r5
 810bf7a:	469e      	mov	lr, r3
 810bf7c:	2600      	movs	r6, #0
 810bf7e:	9b02      	ldr	r3, [sp, #8]
 810bf80:	eddc 6a00 	vldr	s13, [ip]
 810bf84:	42b4      	cmp	r4, r6
 810bf86:	eba3 0b07 	sub.w	fp, r3, r7
 810bf8a:	f000 80a1 	beq.w	810c0d0 <arm_mat_inverse_f32+0x1e4>
 810bf8e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810c0f4 <arm_mat_inverse_f32+0x208>
 810bf92:	4632      	mov	r2, r6
 810bf94:	4663      	mov	r3, ip
 810bf96:	e00b      	b.n	810bfb0 <arm_mat_inverse_f32+0xc4>
 810bf98:	eef4 7a47 	vcmp.f32	s15, s14
 810bf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bfa0:	f102 0201 	add.w	r2, r2, #1
 810bfa4:	bfc8      	it	gt
 810bfa6:	eeb0 7a67 	vmovgt.f32	s14, s15
 810bfaa:	42a2      	cmp	r2, r4
 810bfac:	442b      	add	r3, r5
 810bfae:	d014      	beq.n	810bfda <arm_mat_inverse_f32+0xee>
 810bfb0:	edd3 7a00 	vldr	s15, [r3]
 810bfb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810bfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bfbc:	eeb1 6a67 	vneg.f32	s12, s15
 810bfc0:	dcea      	bgt.n	810bf98 <arm_mat_inverse_f32+0xac>
 810bfc2:	eeb4 6a47 	vcmp.f32	s12, s14
 810bfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bfca:	f102 0201 	add.w	r2, r2, #1
 810bfce:	bfc8      	it	gt
 810bfd0:	eeb0 7a46 	vmovgt.f32	s14, s12
 810bfd4:	42a2      	cmp	r2, r4
 810bfd6:	442b      	add	r3, r5
 810bfd8:	d1ea      	bne.n	810bfb0 <arm_mat_inverse_f32+0xc4>
 810bfda:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810bfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bfe2:	d075      	beq.n	810c0d0 <arm_mat_inverse_f32+0x1e4>
 810bfe4:	eef5 6a40 	vcmp.f32	s13, #0.0
 810bfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810bfec:	d070      	beq.n	810c0d0 <arm_mat_inverse_f32+0x1e4>
 810bfee:	4672      	mov	r2, lr
 810bff0:	4663      	mov	r3, ip
 810bff2:	ed93 7a00 	vldr	s14, [r3]
 810bff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810bffa:	3a01      	subs	r2, #1
 810bffc:	ece3 7a01 	vstmia	r3!, {s15}
 810c000:	d1f7      	bne.n	810bff2 <arm_mat_inverse_f32+0x106>
 810c002:	9901      	ldr	r1, [sp, #4]
 810c004:	464b      	mov	r3, r9
 810c006:	ed93 7a00 	vldr	s14, [r3]
 810c00a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810c00e:	3901      	subs	r1, #1
 810c010:	ece3 7a01 	vstmia	r3!, {s15}
 810c014:	d1f7      	bne.n	810c006 <arm_mat_inverse_f32+0x11a>
 810c016:	9803      	ldr	r0, [sp, #12]
 810c018:	ea4f 0886 	mov.w	r8, r6, lsl #2
 810c01c:	42b1      	cmp	r1, r6
 810c01e:	d039      	beq.n	810c094 <arm_mat_inverse_f32+0x1a8>
 810c020:	eddb 6a00 	vldr	s13, [fp]
 810c024:	465a      	mov	r2, fp
 810c026:	4673      	mov	r3, lr
 810c028:	46e2      	mov	sl, ip
 810c02a:	ecba 7a01 	vldmia	sl!, {s14}
 810c02e:	edd2 7a00 	vldr	s15, [r2]
 810c032:	ee26 7a87 	vmul.f32	s14, s13, s14
 810c036:	3b01      	subs	r3, #1
 810c038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c03c:	ece2 7a01 	vstmia	r2!, {s15}
 810c040:	d1f3      	bne.n	810c02a <arm_mat_inverse_f32+0x13e>
 810c042:	9b01      	ldr	r3, [sp, #4]
 810c044:	44bb      	add	fp, r7
 810c046:	4602      	mov	r2, r0
 810c048:	46ca      	mov	sl, r9
 810c04a:	ecba 7a01 	vldmia	sl!, {s14}
 810c04e:	edd2 7a00 	vldr	s15, [r2]
 810c052:	ee26 7a87 	vmul.f32	s14, s13, s14
 810c056:	3b01      	subs	r3, #1
 810c058:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810c05c:	ece2 7a01 	vstmia	r2!, {s15}
 810c060:	d1f3      	bne.n	810c04a <arm_mat_inverse_f32+0x15e>
 810c062:	4428      	add	r0, r5
 810c064:	3101      	adds	r1, #1
 810c066:	428c      	cmp	r4, r1
 810c068:	44c3      	add	fp, r8
 810c06a:	d1d7      	bne.n	810c01c <arm_mat_inverse_f32+0x130>
 810c06c:	9b04      	ldr	r3, [sp, #16]
 810c06e:	f1be 0e01 	subs.w	lr, lr, #1
 810c072:	f106 0601 	add.w	r6, r6, #1
 810c076:	449c      	add	ip, r3
 810c078:	f1a7 0704 	sub.w	r7, r7, #4
 810c07c:	44a9      	add	r9, r5
 810c07e:	f47f af7e 	bne.w	810bf7e <arm_mat_inverse_f32+0x92>
 810c082:	eef5 6a40 	vcmp.f32	s13, #0.0
 810c086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c08a:	d006      	beq.n	810c09a <arm_mat_inverse_f32+0x1ae>
 810c08c:	2000      	movs	r0, #0
 810c08e:	b007      	add	sp, #28
 810c090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c094:	44bb      	add	fp, r7
 810c096:	4428      	add	r0, r5
 810c098:	e7e4      	b.n	810c064 <arm_mat_inverse_f32+0x178>
 810c09a:	9b05      	ldr	r3, [sp, #20]
 810c09c:	9a01      	ldr	r2, [sp, #4]
 810c09e:	685b      	ldr	r3, [r3, #4]
 810c0a0:	edd3 7a00 	vldr	s15, [r3]
 810c0a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 810c0a8:	fb02 f204 	mul.w	r2, r2, r4
 810c0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c0b0:	4614      	mov	r4, r2
 810c0b2:	bf08      	it	eq
 810c0b4:	3304      	addeq	r3, #4
 810c0b6:	d007      	beq.n	810c0c8 <arm_mat_inverse_f32+0x1dc>
 810c0b8:	e7e8      	b.n	810c08c <arm_mat_inverse_f32+0x1a0>
 810c0ba:	ecf3 7a01 	vldmia	r3!, {s15}
 810c0be:	eef5 7a40 	vcmp.f32	s15, #0.0
 810c0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810c0c6:	d1e1      	bne.n	810c08c <arm_mat_inverse_f32+0x1a0>
 810c0c8:	f10e 0e01 	add.w	lr, lr, #1
 810c0cc:	4574      	cmp	r4, lr
 810c0ce:	d1f4      	bne.n	810c0ba <arm_mat_inverse_f32+0x1ce>
 810c0d0:	f06f 0004 	mvn.w	r0, #4
 810c0d4:	b007      	add	sp, #28
 810c0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c0da:	f06f 0002 	mvn.w	r0, #2
 810c0de:	b007      	add	sp, #28
 810c0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c0e4:	4656      	mov	r6, sl
 810c0e6:	3f01      	subs	r7, #1
 810c0e8:	f846 bb04 	str.w	fp, [r6], #4
 810c0ec:	f47f af1b 	bne.w	810bf26 <arm_mat_inverse_f32+0x3a>
 810c0f0:	e735      	b.n	810bf5e <arm_mat_inverse_f32+0x72>
 810c0f2:	bf00      	nop
 810c0f4:	00000000 	.word	0x00000000

0810c0f8 <arm_mat_init_f32>:
 810c0f8:	8001      	strh	r1, [r0, #0]
 810c0fa:	8042      	strh	r2, [r0, #2]
 810c0fc:	6043      	str	r3, [r0, #4]
 810c0fe:	4770      	bx	lr

0810c100 <arm_mat_add_f32>:
 810c100:	b4f0      	push	{r4, r5, r6, r7}
 810c102:	e9d1 4700 	ldrd	r4, r7, [r1]
 810c106:	6803      	ldr	r3, [r0, #0]
 810c108:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810c10c:	6856      	ldr	r6, [r2, #4]
 810c10e:	42a3      	cmp	r3, r4
 810c110:	d15d      	bne.n	810c1ce <arm_mat_add_f32+0xce>
 810c112:	6812      	ldr	r2, [r2, #0]
 810c114:	4293      	cmp	r3, r2
 810c116:	d15a      	bne.n	810c1ce <arm_mat_add_f32+0xce>
 810c118:	8803      	ldrh	r3, [r0, #0]
 810c11a:	8844      	ldrh	r4, [r0, #2]
 810c11c:	fb04 f403 	mul.w	r4, r4, r3
 810c120:	08a5      	lsrs	r5, r4, #2
 810c122:	d032      	beq.n	810c18a <arm_mat_add_f32+0x8a>
 810c124:	f10c 0110 	add.w	r1, ip, #16
 810c128:	f107 0210 	add.w	r2, r7, #16
 810c12c:	f106 0310 	add.w	r3, r6, #16
 810c130:	4628      	mov	r0, r5
 810c132:	ed12 7a04 	vldr	s14, [r2, #-16]
 810c136:	ed51 7a04 	vldr	s15, [r1, #-16]
 810c13a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c13e:	3801      	subs	r0, #1
 810c140:	ed43 7a04 	vstr	s15, [r3, #-16]
 810c144:	ed12 7a03 	vldr	s14, [r2, #-12]
 810c148:	ed51 7a03 	vldr	s15, [r1, #-12]
 810c14c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c150:	f101 0110 	add.w	r1, r1, #16
 810c154:	ed43 7a03 	vstr	s15, [r3, #-12]
 810c158:	ed12 7a02 	vldr	s14, [r2, #-8]
 810c15c:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810c160:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c164:	f102 0210 	add.w	r2, r2, #16
 810c168:	ed43 7a02 	vstr	s15, [r3, #-8]
 810c16c:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810c170:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810c174:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c178:	f103 0310 	add.w	r3, r3, #16
 810c17c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810c180:	d1d7      	bne.n	810c132 <arm_mat_add_f32+0x32>
 810c182:	012b      	lsls	r3, r5, #4
 810c184:	449c      	add	ip, r3
 810c186:	441f      	add	r7, r3
 810c188:	441e      	add	r6, r3
 810c18a:	f014 0403 	ands.w	r4, r4, #3
 810c18e:	d01b      	beq.n	810c1c8 <arm_mat_add_f32+0xc8>
 810c190:	edd7 7a00 	vldr	s15, [r7]
 810c194:	ed9c 7a00 	vldr	s14, [ip]
 810c198:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c19c:	3c01      	subs	r4, #1
 810c19e:	edc6 7a00 	vstr	s15, [r6]
 810c1a2:	d011      	beq.n	810c1c8 <arm_mat_add_f32+0xc8>
 810c1a4:	eddc 7a01 	vldr	s15, [ip, #4]
 810c1a8:	ed97 7a01 	vldr	s14, [r7, #4]
 810c1ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c1b0:	2c01      	cmp	r4, #1
 810c1b2:	edc6 7a01 	vstr	s15, [r6, #4]
 810c1b6:	d007      	beq.n	810c1c8 <arm_mat_add_f32+0xc8>
 810c1b8:	eddc 7a02 	vldr	s15, [ip, #8]
 810c1bc:	ed97 7a02 	vldr	s14, [r7, #8]
 810c1c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 810c1c4:	edc6 7a02 	vstr	s15, [r6, #8]
 810c1c8:	2000      	movs	r0, #0
 810c1ca:	bcf0      	pop	{r4, r5, r6, r7}
 810c1cc:	4770      	bx	lr
 810c1ce:	f06f 0002 	mvn.w	r0, #2
 810c1d2:	e7fa      	b.n	810c1ca <arm_mat_add_f32+0xca>

0810c1d4 <__cvt>:
 810c1d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810c1d8:	ec57 6b10 	vmov	r6, r7, d0
 810c1dc:	2f00      	cmp	r7, #0
 810c1de:	460c      	mov	r4, r1
 810c1e0:	4619      	mov	r1, r3
 810c1e2:	463b      	mov	r3, r7
 810c1e4:	bfbb      	ittet	lt
 810c1e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810c1ea:	461f      	movlt	r7, r3
 810c1ec:	2300      	movge	r3, #0
 810c1ee:	232d      	movlt	r3, #45	@ 0x2d
 810c1f0:	700b      	strb	r3, [r1, #0]
 810c1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810c1f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810c1f8:	4691      	mov	r9, r2
 810c1fa:	f023 0820 	bic.w	r8, r3, #32
 810c1fe:	bfbc      	itt	lt
 810c200:	4632      	movlt	r2, r6
 810c202:	4616      	movlt	r6, r2
 810c204:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810c208:	d005      	beq.n	810c216 <__cvt+0x42>
 810c20a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810c20e:	d100      	bne.n	810c212 <__cvt+0x3e>
 810c210:	3401      	adds	r4, #1
 810c212:	2102      	movs	r1, #2
 810c214:	e000      	b.n	810c218 <__cvt+0x44>
 810c216:	2103      	movs	r1, #3
 810c218:	ab03      	add	r3, sp, #12
 810c21a:	9301      	str	r3, [sp, #4]
 810c21c:	ab02      	add	r3, sp, #8
 810c21e:	9300      	str	r3, [sp, #0]
 810c220:	ec47 6b10 	vmov	d0, r6, r7
 810c224:	4653      	mov	r3, sl
 810c226:	4622      	mov	r2, r4
 810c228:	f001 f986 	bl	810d538 <_dtoa_r>
 810c22c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810c230:	4605      	mov	r5, r0
 810c232:	d119      	bne.n	810c268 <__cvt+0x94>
 810c234:	f019 0f01 	tst.w	r9, #1
 810c238:	d00e      	beq.n	810c258 <__cvt+0x84>
 810c23a:	eb00 0904 	add.w	r9, r0, r4
 810c23e:	2200      	movs	r2, #0
 810c240:	2300      	movs	r3, #0
 810c242:	4630      	mov	r0, r6
 810c244:	4639      	mov	r1, r7
 810c246:	f7f4 fcc7 	bl	8100bd8 <__aeabi_dcmpeq>
 810c24a:	b108      	cbz	r0, 810c250 <__cvt+0x7c>
 810c24c:	f8cd 900c 	str.w	r9, [sp, #12]
 810c250:	2230      	movs	r2, #48	@ 0x30
 810c252:	9b03      	ldr	r3, [sp, #12]
 810c254:	454b      	cmp	r3, r9
 810c256:	d31e      	bcc.n	810c296 <__cvt+0xc2>
 810c258:	9b03      	ldr	r3, [sp, #12]
 810c25a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810c25c:	1b5b      	subs	r3, r3, r5
 810c25e:	4628      	mov	r0, r5
 810c260:	6013      	str	r3, [r2, #0]
 810c262:	b004      	add	sp, #16
 810c264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c268:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810c26c:	eb00 0904 	add.w	r9, r0, r4
 810c270:	d1e5      	bne.n	810c23e <__cvt+0x6a>
 810c272:	7803      	ldrb	r3, [r0, #0]
 810c274:	2b30      	cmp	r3, #48	@ 0x30
 810c276:	d10a      	bne.n	810c28e <__cvt+0xba>
 810c278:	2200      	movs	r2, #0
 810c27a:	2300      	movs	r3, #0
 810c27c:	4630      	mov	r0, r6
 810c27e:	4639      	mov	r1, r7
 810c280:	f7f4 fcaa 	bl	8100bd8 <__aeabi_dcmpeq>
 810c284:	b918      	cbnz	r0, 810c28e <__cvt+0xba>
 810c286:	f1c4 0401 	rsb	r4, r4, #1
 810c28a:	f8ca 4000 	str.w	r4, [sl]
 810c28e:	f8da 3000 	ldr.w	r3, [sl]
 810c292:	4499      	add	r9, r3
 810c294:	e7d3      	b.n	810c23e <__cvt+0x6a>
 810c296:	1c59      	adds	r1, r3, #1
 810c298:	9103      	str	r1, [sp, #12]
 810c29a:	701a      	strb	r2, [r3, #0]
 810c29c:	e7d9      	b.n	810c252 <__cvt+0x7e>

0810c29e <__exponent>:
 810c29e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810c2a0:	2900      	cmp	r1, #0
 810c2a2:	bfba      	itte	lt
 810c2a4:	4249      	neglt	r1, r1
 810c2a6:	232d      	movlt	r3, #45	@ 0x2d
 810c2a8:	232b      	movge	r3, #43	@ 0x2b
 810c2aa:	2909      	cmp	r1, #9
 810c2ac:	7002      	strb	r2, [r0, #0]
 810c2ae:	7043      	strb	r3, [r0, #1]
 810c2b0:	dd29      	ble.n	810c306 <__exponent+0x68>
 810c2b2:	f10d 0307 	add.w	r3, sp, #7
 810c2b6:	461d      	mov	r5, r3
 810c2b8:	270a      	movs	r7, #10
 810c2ba:	461a      	mov	r2, r3
 810c2bc:	fbb1 f6f7 	udiv	r6, r1, r7
 810c2c0:	fb07 1416 	mls	r4, r7, r6, r1
 810c2c4:	3430      	adds	r4, #48	@ 0x30
 810c2c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 810c2ca:	460c      	mov	r4, r1
 810c2cc:	2c63      	cmp	r4, #99	@ 0x63
 810c2ce:	f103 33ff 	add.w	r3, r3, #4294967295
 810c2d2:	4631      	mov	r1, r6
 810c2d4:	dcf1      	bgt.n	810c2ba <__exponent+0x1c>
 810c2d6:	3130      	adds	r1, #48	@ 0x30
 810c2d8:	1e94      	subs	r4, r2, #2
 810c2da:	f803 1c01 	strb.w	r1, [r3, #-1]
 810c2de:	1c41      	adds	r1, r0, #1
 810c2e0:	4623      	mov	r3, r4
 810c2e2:	42ab      	cmp	r3, r5
 810c2e4:	d30a      	bcc.n	810c2fc <__exponent+0x5e>
 810c2e6:	f10d 0309 	add.w	r3, sp, #9
 810c2ea:	1a9b      	subs	r3, r3, r2
 810c2ec:	42ac      	cmp	r4, r5
 810c2ee:	bf88      	it	hi
 810c2f0:	2300      	movhi	r3, #0
 810c2f2:	3302      	adds	r3, #2
 810c2f4:	4403      	add	r3, r0
 810c2f6:	1a18      	subs	r0, r3, r0
 810c2f8:	b003      	add	sp, #12
 810c2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810c2fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 810c300:	f801 6f01 	strb.w	r6, [r1, #1]!
 810c304:	e7ed      	b.n	810c2e2 <__exponent+0x44>
 810c306:	2330      	movs	r3, #48	@ 0x30
 810c308:	3130      	adds	r1, #48	@ 0x30
 810c30a:	7083      	strb	r3, [r0, #2]
 810c30c:	70c1      	strb	r1, [r0, #3]
 810c30e:	1d03      	adds	r3, r0, #4
 810c310:	e7f1      	b.n	810c2f6 <__exponent+0x58>
	...

0810c314 <_printf_float>:
 810c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c318:	b08d      	sub	sp, #52	@ 0x34
 810c31a:	460c      	mov	r4, r1
 810c31c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810c320:	4616      	mov	r6, r2
 810c322:	461f      	mov	r7, r3
 810c324:	4605      	mov	r5, r0
 810c326:	f000 fff3 	bl	810d310 <_localeconv_r>
 810c32a:	6803      	ldr	r3, [r0, #0]
 810c32c:	9304      	str	r3, [sp, #16]
 810c32e:	4618      	mov	r0, r3
 810c330:	f7f4 f826 	bl	8100380 <strlen>
 810c334:	2300      	movs	r3, #0
 810c336:	930a      	str	r3, [sp, #40]	@ 0x28
 810c338:	f8d8 3000 	ldr.w	r3, [r8]
 810c33c:	9005      	str	r0, [sp, #20]
 810c33e:	3307      	adds	r3, #7
 810c340:	f023 0307 	bic.w	r3, r3, #7
 810c344:	f103 0208 	add.w	r2, r3, #8
 810c348:	f894 a018 	ldrb.w	sl, [r4, #24]
 810c34c:	f8d4 b000 	ldr.w	fp, [r4]
 810c350:	f8c8 2000 	str.w	r2, [r8]
 810c354:	e9d3 8900 	ldrd	r8, r9, [r3]
 810c358:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810c35c:	9307      	str	r3, [sp, #28]
 810c35e:	f8cd 8018 	str.w	r8, [sp, #24]
 810c362:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810c366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c36a:	4b9c      	ldr	r3, [pc, #624]	@ (810c5dc <_printf_float+0x2c8>)
 810c36c:	f04f 32ff 	mov.w	r2, #4294967295
 810c370:	f7f4 fc64 	bl	8100c3c <__aeabi_dcmpun>
 810c374:	bb70      	cbnz	r0, 810c3d4 <_printf_float+0xc0>
 810c376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c37a:	4b98      	ldr	r3, [pc, #608]	@ (810c5dc <_printf_float+0x2c8>)
 810c37c:	f04f 32ff 	mov.w	r2, #4294967295
 810c380:	f7f4 fc3e 	bl	8100c00 <__aeabi_dcmple>
 810c384:	bb30      	cbnz	r0, 810c3d4 <_printf_float+0xc0>
 810c386:	2200      	movs	r2, #0
 810c388:	2300      	movs	r3, #0
 810c38a:	4640      	mov	r0, r8
 810c38c:	4649      	mov	r1, r9
 810c38e:	f7f4 fc2d 	bl	8100bec <__aeabi_dcmplt>
 810c392:	b110      	cbz	r0, 810c39a <_printf_float+0x86>
 810c394:	232d      	movs	r3, #45	@ 0x2d
 810c396:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810c39a:	4a91      	ldr	r2, [pc, #580]	@ (810c5e0 <_printf_float+0x2cc>)
 810c39c:	4b91      	ldr	r3, [pc, #580]	@ (810c5e4 <_printf_float+0x2d0>)
 810c39e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810c3a2:	bf94      	ite	ls
 810c3a4:	4690      	movls	r8, r2
 810c3a6:	4698      	movhi	r8, r3
 810c3a8:	2303      	movs	r3, #3
 810c3aa:	6123      	str	r3, [r4, #16]
 810c3ac:	f02b 0304 	bic.w	r3, fp, #4
 810c3b0:	6023      	str	r3, [r4, #0]
 810c3b2:	f04f 0900 	mov.w	r9, #0
 810c3b6:	9700      	str	r7, [sp, #0]
 810c3b8:	4633      	mov	r3, r6
 810c3ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 810c3bc:	4621      	mov	r1, r4
 810c3be:	4628      	mov	r0, r5
 810c3c0:	f000 f9d2 	bl	810c768 <_printf_common>
 810c3c4:	3001      	adds	r0, #1
 810c3c6:	f040 808d 	bne.w	810c4e4 <_printf_float+0x1d0>
 810c3ca:	f04f 30ff 	mov.w	r0, #4294967295
 810c3ce:	b00d      	add	sp, #52	@ 0x34
 810c3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c3d4:	4642      	mov	r2, r8
 810c3d6:	464b      	mov	r3, r9
 810c3d8:	4640      	mov	r0, r8
 810c3da:	4649      	mov	r1, r9
 810c3dc:	f7f4 fc2e 	bl	8100c3c <__aeabi_dcmpun>
 810c3e0:	b140      	cbz	r0, 810c3f4 <_printf_float+0xe0>
 810c3e2:	464b      	mov	r3, r9
 810c3e4:	2b00      	cmp	r3, #0
 810c3e6:	bfbc      	itt	lt
 810c3e8:	232d      	movlt	r3, #45	@ 0x2d
 810c3ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810c3ee:	4a7e      	ldr	r2, [pc, #504]	@ (810c5e8 <_printf_float+0x2d4>)
 810c3f0:	4b7e      	ldr	r3, [pc, #504]	@ (810c5ec <_printf_float+0x2d8>)
 810c3f2:	e7d4      	b.n	810c39e <_printf_float+0x8a>
 810c3f4:	6863      	ldr	r3, [r4, #4]
 810c3f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810c3fa:	9206      	str	r2, [sp, #24]
 810c3fc:	1c5a      	adds	r2, r3, #1
 810c3fe:	d13b      	bne.n	810c478 <_printf_float+0x164>
 810c400:	2306      	movs	r3, #6
 810c402:	6063      	str	r3, [r4, #4]
 810c404:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810c408:	2300      	movs	r3, #0
 810c40a:	6022      	str	r2, [r4, #0]
 810c40c:	9303      	str	r3, [sp, #12]
 810c40e:	ab0a      	add	r3, sp, #40	@ 0x28
 810c410:	e9cd a301 	strd	sl, r3, [sp, #4]
 810c414:	ab09      	add	r3, sp, #36	@ 0x24
 810c416:	9300      	str	r3, [sp, #0]
 810c418:	6861      	ldr	r1, [r4, #4]
 810c41a:	ec49 8b10 	vmov	d0, r8, r9
 810c41e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810c422:	4628      	mov	r0, r5
 810c424:	f7ff fed6 	bl	810c1d4 <__cvt>
 810c428:	9b06      	ldr	r3, [sp, #24]
 810c42a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810c42c:	2b47      	cmp	r3, #71	@ 0x47
 810c42e:	4680      	mov	r8, r0
 810c430:	d129      	bne.n	810c486 <_printf_float+0x172>
 810c432:	1cc8      	adds	r0, r1, #3
 810c434:	db02      	blt.n	810c43c <_printf_float+0x128>
 810c436:	6863      	ldr	r3, [r4, #4]
 810c438:	4299      	cmp	r1, r3
 810c43a:	dd41      	ble.n	810c4c0 <_printf_float+0x1ac>
 810c43c:	f1aa 0a02 	sub.w	sl, sl, #2
 810c440:	fa5f fa8a 	uxtb.w	sl, sl
 810c444:	3901      	subs	r1, #1
 810c446:	4652      	mov	r2, sl
 810c448:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810c44c:	9109      	str	r1, [sp, #36]	@ 0x24
 810c44e:	f7ff ff26 	bl	810c29e <__exponent>
 810c452:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810c454:	1813      	adds	r3, r2, r0
 810c456:	2a01      	cmp	r2, #1
 810c458:	4681      	mov	r9, r0
 810c45a:	6123      	str	r3, [r4, #16]
 810c45c:	dc02      	bgt.n	810c464 <_printf_float+0x150>
 810c45e:	6822      	ldr	r2, [r4, #0]
 810c460:	07d2      	lsls	r2, r2, #31
 810c462:	d501      	bpl.n	810c468 <_printf_float+0x154>
 810c464:	3301      	adds	r3, #1
 810c466:	6123      	str	r3, [r4, #16]
 810c468:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810c46c:	2b00      	cmp	r3, #0
 810c46e:	d0a2      	beq.n	810c3b6 <_printf_float+0xa2>
 810c470:	232d      	movs	r3, #45	@ 0x2d
 810c472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810c476:	e79e      	b.n	810c3b6 <_printf_float+0xa2>
 810c478:	9a06      	ldr	r2, [sp, #24]
 810c47a:	2a47      	cmp	r2, #71	@ 0x47
 810c47c:	d1c2      	bne.n	810c404 <_printf_float+0xf0>
 810c47e:	2b00      	cmp	r3, #0
 810c480:	d1c0      	bne.n	810c404 <_printf_float+0xf0>
 810c482:	2301      	movs	r3, #1
 810c484:	e7bd      	b.n	810c402 <_printf_float+0xee>
 810c486:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810c48a:	d9db      	bls.n	810c444 <_printf_float+0x130>
 810c48c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810c490:	d118      	bne.n	810c4c4 <_printf_float+0x1b0>
 810c492:	2900      	cmp	r1, #0
 810c494:	6863      	ldr	r3, [r4, #4]
 810c496:	dd0b      	ble.n	810c4b0 <_printf_float+0x19c>
 810c498:	6121      	str	r1, [r4, #16]
 810c49a:	b913      	cbnz	r3, 810c4a2 <_printf_float+0x18e>
 810c49c:	6822      	ldr	r2, [r4, #0]
 810c49e:	07d0      	lsls	r0, r2, #31
 810c4a0:	d502      	bpl.n	810c4a8 <_printf_float+0x194>
 810c4a2:	3301      	adds	r3, #1
 810c4a4:	440b      	add	r3, r1
 810c4a6:	6123      	str	r3, [r4, #16]
 810c4a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 810c4aa:	f04f 0900 	mov.w	r9, #0
 810c4ae:	e7db      	b.n	810c468 <_printf_float+0x154>
 810c4b0:	b913      	cbnz	r3, 810c4b8 <_printf_float+0x1a4>
 810c4b2:	6822      	ldr	r2, [r4, #0]
 810c4b4:	07d2      	lsls	r2, r2, #31
 810c4b6:	d501      	bpl.n	810c4bc <_printf_float+0x1a8>
 810c4b8:	3302      	adds	r3, #2
 810c4ba:	e7f4      	b.n	810c4a6 <_printf_float+0x192>
 810c4bc:	2301      	movs	r3, #1
 810c4be:	e7f2      	b.n	810c4a6 <_printf_float+0x192>
 810c4c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810c4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c4c6:	4299      	cmp	r1, r3
 810c4c8:	db05      	blt.n	810c4d6 <_printf_float+0x1c2>
 810c4ca:	6823      	ldr	r3, [r4, #0]
 810c4cc:	6121      	str	r1, [r4, #16]
 810c4ce:	07d8      	lsls	r0, r3, #31
 810c4d0:	d5ea      	bpl.n	810c4a8 <_printf_float+0x194>
 810c4d2:	1c4b      	adds	r3, r1, #1
 810c4d4:	e7e7      	b.n	810c4a6 <_printf_float+0x192>
 810c4d6:	2900      	cmp	r1, #0
 810c4d8:	bfd4      	ite	le
 810c4da:	f1c1 0202 	rsble	r2, r1, #2
 810c4de:	2201      	movgt	r2, #1
 810c4e0:	4413      	add	r3, r2
 810c4e2:	e7e0      	b.n	810c4a6 <_printf_float+0x192>
 810c4e4:	6823      	ldr	r3, [r4, #0]
 810c4e6:	055a      	lsls	r2, r3, #21
 810c4e8:	d407      	bmi.n	810c4fa <_printf_float+0x1e6>
 810c4ea:	6923      	ldr	r3, [r4, #16]
 810c4ec:	4642      	mov	r2, r8
 810c4ee:	4631      	mov	r1, r6
 810c4f0:	4628      	mov	r0, r5
 810c4f2:	47b8      	blx	r7
 810c4f4:	3001      	adds	r0, #1
 810c4f6:	d12b      	bne.n	810c550 <_printf_float+0x23c>
 810c4f8:	e767      	b.n	810c3ca <_printf_float+0xb6>
 810c4fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810c4fe:	f240 80dd 	bls.w	810c6bc <_printf_float+0x3a8>
 810c502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810c506:	2200      	movs	r2, #0
 810c508:	2300      	movs	r3, #0
 810c50a:	f7f4 fb65 	bl	8100bd8 <__aeabi_dcmpeq>
 810c50e:	2800      	cmp	r0, #0
 810c510:	d033      	beq.n	810c57a <_printf_float+0x266>
 810c512:	4a37      	ldr	r2, [pc, #220]	@ (810c5f0 <_printf_float+0x2dc>)
 810c514:	2301      	movs	r3, #1
 810c516:	4631      	mov	r1, r6
 810c518:	4628      	mov	r0, r5
 810c51a:	47b8      	blx	r7
 810c51c:	3001      	adds	r0, #1
 810c51e:	f43f af54 	beq.w	810c3ca <_printf_float+0xb6>
 810c522:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810c526:	4543      	cmp	r3, r8
 810c528:	db02      	blt.n	810c530 <_printf_float+0x21c>
 810c52a:	6823      	ldr	r3, [r4, #0]
 810c52c:	07d8      	lsls	r0, r3, #31
 810c52e:	d50f      	bpl.n	810c550 <_printf_float+0x23c>
 810c530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c534:	4631      	mov	r1, r6
 810c536:	4628      	mov	r0, r5
 810c538:	47b8      	blx	r7
 810c53a:	3001      	adds	r0, #1
 810c53c:	f43f af45 	beq.w	810c3ca <_printf_float+0xb6>
 810c540:	f04f 0900 	mov.w	r9, #0
 810c544:	f108 38ff 	add.w	r8, r8, #4294967295
 810c548:	f104 0a1a 	add.w	sl, r4, #26
 810c54c:	45c8      	cmp	r8, r9
 810c54e:	dc09      	bgt.n	810c564 <_printf_float+0x250>
 810c550:	6823      	ldr	r3, [r4, #0]
 810c552:	079b      	lsls	r3, r3, #30
 810c554:	f100 8103 	bmi.w	810c75e <_printf_float+0x44a>
 810c558:	68e0      	ldr	r0, [r4, #12]
 810c55a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c55c:	4298      	cmp	r0, r3
 810c55e:	bfb8      	it	lt
 810c560:	4618      	movlt	r0, r3
 810c562:	e734      	b.n	810c3ce <_printf_float+0xba>
 810c564:	2301      	movs	r3, #1
 810c566:	4652      	mov	r2, sl
 810c568:	4631      	mov	r1, r6
 810c56a:	4628      	mov	r0, r5
 810c56c:	47b8      	blx	r7
 810c56e:	3001      	adds	r0, #1
 810c570:	f43f af2b 	beq.w	810c3ca <_printf_float+0xb6>
 810c574:	f109 0901 	add.w	r9, r9, #1
 810c578:	e7e8      	b.n	810c54c <_printf_float+0x238>
 810c57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c57c:	2b00      	cmp	r3, #0
 810c57e:	dc39      	bgt.n	810c5f4 <_printf_float+0x2e0>
 810c580:	4a1b      	ldr	r2, [pc, #108]	@ (810c5f0 <_printf_float+0x2dc>)
 810c582:	2301      	movs	r3, #1
 810c584:	4631      	mov	r1, r6
 810c586:	4628      	mov	r0, r5
 810c588:	47b8      	blx	r7
 810c58a:	3001      	adds	r0, #1
 810c58c:	f43f af1d 	beq.w	810c3ca <_printf_float+0xb6>
 810c590:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810c594:	ea59 0303 	orrs.w	r3, r9, r3
 810c598:	d102      	bne.n	810c5a0 <_printf_float+0x28c>
 810c59a:	6823      	ldr	r3, [r4, #0]
 810c59c:	07d9      	lsls	r1, r3, #31
 810c59e:	d5d7      	bpl.n	810c550 <_printf_float+0x23c>
 810c5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c5a4:	4631      	mov	r1, r6
 810c5a6:	4628      	mov	r0, r5
 810c5a8:	47b8      	blx	r7
 810c5aa:	3001      	adds	r0, #1
 810c5ac:	f43f af0d 	beq.w	810c3ca <_printf_float+0xb6>
 810c5b0:	f04f 0a00 	mov.w	sl, #0
 810c5b4:	f104 0b1a 	add.w	fp, r4, #26
 810c5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c5ba:	425b      	negs	r3, r3
 810c5bc:	4553      	cmp	r3, sl
 810c5be:	dc01      	bgt.n	810c5c4 <_printf_float+0x2b0>
 810c5c0:	464b      	mov	r3, r9
 810c5c2:	e793      	b.n	810c4ec <_printf_float+0x1d8>
 810c5c4:	2301      	movs	r3, #1
 810c5c6:	465a      	mov	r2, fp
 810c5c8:	4631      	mov	r1, r6
 810c5ca:	4628      	mov	r0, r5
 810c5cc:	47b8      	blx	r7
 810c5ce:	3001      	adds	r0, #1
 810c5d0:	f43f aefb 	beq.w	810c3ca <_printf_float+0xb6>
 810c5d4:	f10a 0a01 	add.w	sl, sl, #1
 810c5d8:	e7ee      	b.n	810c5b8 <_printf_float+0x2a4>
 810c5da:	bf00      	nop
 810c5dc:	7fefffff 	.word	0x7fefffff
 810c5e0:	08112018 	.word	0x08112018
 810c5e4:	0811201c 	.word	0x0811201c
 810c5e8:	08112020 	.word	0x08112020
 810c5ec:	08112024 	.word	0x08112024
 810c5f0:	08112028 	.word	0x08112028
 810c5f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810c5f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810c5fa:	4553      	cmp	r3, sl
 810c5fc:	bfa8      	it	ge
 810c5fe:	4653      	movge	r3, sl
 810c600:	2b00      	cmp	r3, #0
 810c602:	4699      	mov	r9, r3
 810c604:	dc36      	bgt.n	810c674 <_printf_float+0x360>
 810c606:	f04f 0b00 	mov.w	fp, #0
 810c60a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810c60e:	f104 021a 	add.w	r2, r4, #26
 810c612:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810c614:	9306      	str	r3, [sp, #24]
 810c616:	eba3 0309 	sub.w	r3, r3, r9
 810c61a:	455b      	cmp	r3, fp
 810c61c:	dc31      	bgt.n	810c682 <_printf_float+0x36e>
 810c61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c620:	459a      	cmp	sl, r3
 810c622:	dc3a      	bgt.n	810c69a <_printf_float+0x386>
 810c624:	6823      	ldr	r3, [r4, #0]
 810c626:	07da      	lsls	r2, r3, #31
 810c628:	d437      	bmi.n	810c69a <_printf_float+0x386>
 810c62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c62c:	ebaa 0903 	sub.w	r9, sl, r3
 810c630:	9b06      	ldr	r3, [sp, #24]
 810c632:	ebaa 0303 	sub.w	r3, sl, r3
 810c636:	4599      	cmp	r9, r3
 810c638:	bfa8      	it	ge
 810c63a:	4699      	movge	r9, r3
 810c63c:	f1b9 0f00 	cmp.w	r9, #0
 810c640:	dc33      	bgt.n	810c6aa <_printf_float+0x396>
 810c642:	f04f 0800 	mov.w	r8, #0
 810c646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810c64a:	f104 0b1a 	add.w	fp, r4, #26
 810c64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c650:	ebaa 0303 	sub.w	r3, sl, r3
 810c654:	eba3 0309 	sub.w	r3, r3, r9
 810c658:	4543      	cmp	r3, r8
 810c65a:	f77f af79 	ble.w	810c550 <_printf_float+0x23c>
 810c65e:	2301      	movs	r3, #1
 810c660:	465a      	mov	r2, fp
 810c662:	4631      	mov	r1, r6
 810c664:	4628      	mov	r0, r5
 810c666:	47b8      	blx	r7
 810c668:	3001      	adds	r0, #1
 810c66a:	f43f aeae 	beq.w	810c3ca <_printf_float+0xb6>
 810c66e:	f108 0801 	add.w	r8, r8, #1
 810c672:	e7ec      	b.n	810c64e <_printf_float+0x33a>
 810c674:	4642      	mov	r2, r8
 810c676:	4631      	mov	r1, r6
 810c678:	4628      	mov	r0, r5
 810c67a:	47b8      	blx	r7
 810c67c:	3001      	adds	r0, #1
 810c67e:	d1c2      	bne.n	810c606 <_printf_float+0x2f2>
 810c680:	e6a3      	b.n	810c3ca <_printf_float+0xb6>
 810c682:	2301      	movs	r3, #1
 810c684:	4631      	mov	r1, r6
 810c686:	4628      	mov	r0, r5
 810c688:	9206      	str	r2, [sp, #24]
 810c68a:	47b8      	blx	r7
 810c68c:	3001      	adds	r0, #1
 810c68e:	f43f ae9c 	beq.w	810c3ca <_printf_float+0xb6>
 810c692:	9a06      	ldr	r2, [sp, #24]
 810c694:	f10b 0b01 	add.w	fp, fp, #1
 810c698:	e7bb      	b.n	810c612 <_printf_float+0x2fe>
 810c69a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c69e:	4631      	mov	r1, r6
 810c6a0:	4628      	mov	r0, r5
 810c6a2:	47b8      	blx	r7
 810c6a4:	3001      	adds	r0, #1
 810c6a6:	d1c0      	bne.n	810c62a <_printf_float+0x316>
 810c6a8:	e68f      	b.n	810c3ca <_printf_float+0xb6>
 810c6aa:	9a06      	ldr	r2, [sp, #24]
 810c6ac:	464b      	mov	r3, r9
 810c6ae:	4442      	add	r2, r8
 810c6b0:	4631      	mov	r1, r6
 810c6b2:	4628      	mov	r0, r5
 810c6b4:	47b8      	blx	r7
 810c6b6:	3001      	adds	r0, #1
 810c6b8:	d1c3      	bne.n	810c642 <_printf_float+0x32e>
 810c6ba:	e686      	b.n	810c3ca <_printf_float+0xb6>
 810c6bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810c6c0:	f1ba 0f01 	cmp.w	sl, #1
 810c6c4:	dc01      	bgt.n	810c6ca <_printf_float+0x3b6>
 810c6c6:	07db      	lsls	r3, r3, #31
 810c6c8:	d536      	bpl.n	810c738 <_printf_float+0x424>
 810c6ca:	2301      	movs	r3, #1
 810c6cc:	4642      	mov	r2, r8
 810c6ce:	4631      	mov	r1, r6
 810c6d0:	4628      	mov	r0, r5
 810c6d2:	47b8      	blx	r7
 810c6d4:	3001      	adds	r0, #1
 810c6d6:	f43f ae78 	beq.w	810c3ca <_printf_float+0xb6>
 810c6da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c6de:	4631      	mov	r1, r6
 810c6e0:	4628      	mov	r0, r5
 810c6e2:	47b8      	blx	r7
 810c6e4:	3001      	adds	r0, #1
 810c6e6:	f43f ae70 	beq.w	810c3ca <_printf_float+0xb6>
 810c6ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810c6ee:	2200      	movs	r2, #0
 810c6f0:	2300      	movs	r3, #0
 810c6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c6f6:	f7f4 fa6f 	bl	8100bd8 <__aeabi_dcmpeq>
 810c6fa:	b9c0      	cbnz	r0, 810c72e <_printf_float+0x41a>
 810c6fc:	4653      	mov	r3, sl
 810c6fe:	f108 0201 	add.w	r2, r8, #1
 810c702:	4631      	mov	r1, r6
 810c704:	4628      	mov	r0, r5
 810c706:	47b8      	blx	r7
 810c708:	3001      	adds	r0, #1
 810c70a:	d10c      	bne.n	810c726 <_printf_float+0x412>
 810c70c:	e65d      	b.n	810c3ca <_printf_float+0xb6>
 810c70e:	2301      	movs	r3, #1
 810c710:	465a      	mov	r2, fp
 810c712:	4631      	mov	r1, r6
 810c714:	4628      	mov	r0, r5
 810c716:	47b8      	blx	r7
 810c718:	3001      	adds	r0, #1
 810c71a:	f43f ae56 	beq.w	810c3ca <_printf_float+0xb6>
 810c71e:	f108 0801 	add.w	r8, r8, #1
 810c722:	45d0      	cmp	r8, sl
 810c724:	dbf3      	blt.n	810c70e <_printf_float+0x3fa>
 810c726:	464b      	mov	r3, r9
 810c728:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810c72c:	e6df      	b.n	810c4ee <_printf_float+0x1da>
 810c72e:	f04f 0800 	mov.w	r8, #0
 810c732:	f104 0b1a 	add.w	fp, r4, #26
 810c736:	e7f4      	b.n	810c722 <_printf_float+0x40e>
 810c738:	2301      	movs	r3, #1
 810c73a:	4642      	mov	r2, r8
 810c73c:	e7e1      	b.n	810c702 <_printf_float+0x3ee>
 810c73e:	2301      	movs	r3, #1
 810c740:	464a      	mov	r2, r9
 810c742:	4631      	mov	r1, r6
 810c744:	4628      	mov	r0, r5
 810c746:	47b8      	blx	r7
 810c748:	3001      	adds	r0, #1
 810c74a:	f43f ae3e 	beq.w	810c3ca <_printf_float+0xb6>
 810c74e:	f108 0801 	add.w	r8, r8, #1
 810c752:	68e3      	ldr	r3, [r4, #12]
 810c754:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810c756:	1a5b      	subs	r3, r3, r1
 810c758:	4543      	cmp	r3, r8
 810c75a:	dcf0      	bgt.n	810c73e <_printf_float+0x42a>
 810c75c:	e6fc      	b.n	810c558 <_printf_float+0x244>
 810c75e:	f04f 0800 	mov.w	r8, #0
 810c762:	f104 0919 	add.w	r9, r4, #25
 810c766:	e7f4      	b.n	810c752 <_printf_float+0x43e>

0810c768 <_printf_common>:
 810c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c76c:	4616      	mov	r6, r2
 810c76e:	4698      	mov	r8, r3
 810c770:	688a      	ldr	r2, [r1, #8]
 810c772:	690b      	ldr	r3, [r1, #16]
 810c774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810c778:	4293      	cmp	r3, r2
 810c77a:	bfb8      	it	lt
 810c77c:	4613      	movlt	r3, r2
 810c77e:	6033      	str	r3, [r6, #0]
 810c780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810c784:	4607      	mov	r7, r0
 810c786:	460c      	mov	r4, r1
 810c788:	b10a      	cbz	r2, 810c78e <_printf_common+0x26>
 810c78a:	3301      	adds	r3, #1
 810c78c:	6033      	str	r3, [r6, #0]
 810c78e:	6823      	ldr	r3, [r4, #0]
 810c790:	0699      	lsls	r1, r3, #26
 810c792:	bf42      	ittt	mi
 810c794:	6833      	ldrmi	r3, [r6, #0]
 810c796:	3302      	addmi	r3, #2
 810c798:	6033      	strmi	r3, [r6, #0]
 810c79a:	6825      	ldr	r5, [r4, #0]
 810c79c:	f015 0506 	ands.w	r5, r5, #6
 810c7a0:	d106      	bne.n	810c7b0 <_printf_common+0x48>
 810c7a2:	f104 0a19 	add.w	sl, r4, #25
 810c7a6:	68e3      	ldr	r3, [r4, #12]
 810c7a8:	6832      	ldr	r2, [r6, #0]
 810c7aa:	1a9b      	subs	r3, r3, r2
 810c7ac:	42ab      	cmp	r3, r5
 810c7ae:	dc26      	bgt.n	810c7fe <_printf_common+0x96>
 810c7b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810c7b4:	6822      	ldr	r2, [r4, #0]
 810c7b6:	3b00      	subs	r3, #0
 810c7b8:	bf18      	it	ne
 810c7ba:	2301      	movne	r3, #1
 810c7bc:	0692      	lsls	r2, r2, #26
 810c7be:	d42b      	bmi.n	810c818 <_printf_common+0xb0>
 810c7c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810c7c4:	4641      	mov	r1, r8
 810c7c6:	4638      	mov	r0, r7
 810c7c8:	47c8      	blx	r9
 810c7ca:	3001      	adds	r0, #1
 810c7cc:	d01e      	beq.n	810c80c <_printf_common+0xa4>
 810c7ce:	6823      	ldr	r3, [r4, #0]
 810c7d0:	6922      	ldr	r2, [r4, #16]
 810c7d2:	f003 0306 	and.w	r3, r3, #6
 810c7d6:	2b04      	cmp	r3, #4
 810c7d8:	bf02      	ittt	eq
 810c7da:	68e5      	ldreq	r5, [r4, #12]
 810c7dc:	6833      	ldreq	r3, [r6, #0]
 810c7de:	1aed      	subeq	r5, r5, r3
 810c7e0:	68a3      	ldr	r3, [r4, #8]
 810c7e2:	bf0c      	ite	eq
 810c7e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810c7e8:	2500      	movne	r5, #0
 810c7ea:	4293      	cmp	r3, r2
 810c7ec:	bfc4      	itt	gt
 810c7ee:	1a9b      	subgt	r3, r3, r2
 810c7f0:	18ed      	addgt	r5, r5, r3
 810c7f2:	2600      	movs	r6, #0
 810c7f4:	341a      	adds	r4, #26
 810c7f6:	42b5      	cmp	r5, r6
 810c7f8:	d11a      	bne.n	810c830 <_printf_common+0xc8>
 810c7fa:	2000      	movs	r0, #0
 810c7fc:	e008      	b.n	810c810 <_printf_common+0xa8>
 810c7fe:	2301      	movs	r3, #1
 810c800:	4652      	mov	r2, sl
 810c802:	4641      	mov	r1, r8
 810c804:	4638      	mov	r0, r7
 810c806:	47c8      	blx	r9
 810c808:	3001      	adds	r0, #1
 810c80a:	d103      	bne.n	810c814 <_printf_common+0xac>
 810c80c:	f04f 30ff 	mov.w	r0, #4294967295
 810c810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c814:	3501      	adds	r5, #1
 810c816:	e7c6      	b.n	810c7a6 <_printf_common+0x3e>
 810c818:	18e1      	adds	r1, r4, r3
 810c81a:	1c5a      	adds	r2, r3, #1
 810c81c:	2030      	movs	r0, #48	@ 0x30
 810c81e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810c822:	4422      	add	r2, r4
 810c824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810c828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810c82c:	3302      	adds	r3, #2
 810c82e:	e7c7      	b.n	810c7c0 <_printf_common+0x58>
 810c830:	2301      	movs	r3, #1
 810c832:	4622      	mov	r2, r4
 810c834:	4641      	mov	r1, r8
 810c836:	4638      	mov	r0, r7
 810c838:	47c8      	blx	r9
 810c83a:	3001      	adds	r0, #1
 810c83c:	d0e6      	beq.n	810c80c <_printf_common+0xa4>
 810c83e:	3601      	adds	r6, #1
 810c840:	e7d9      	b.n	810c7f6 <_printf_common+0x8e>
	...

0810c844 <_printf_i>:
 810c844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810c848:	7e0f      	ldrb	r7, [r1, #24]
 810c84a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810c84c:	2f78      	cmp	r7, #120	@ 0x78
 810c84e:	4691      	mov	r9, r2
 810c850:	4680      	mov	r8, r0
 810c852:	460c      	mov	r4, r1
 810c854:	469a      	mov	sl, r3
 810c856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810c85a:	d807      	bhi.n	810c86c <_printf_i+0x28>
 810c85c:	2f62      	cmp	r7, #98	@ 0x62
 810c85e:	d80a      	bhi.n	810c876 <_printf_i+0x32>
 810c860:	2f00      	cmp	r7, #0
 810c862:	f000 80d2 	beq.w	810ca0a <_printf_i+0x1c6>
 810c866:	2f58      	cmp	r7, #88	@ 0x58
 810c868:	f000 80b9 	beq.w	810c9de <_printf_i+0x19a>
 810c86c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810c870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810c874:	e03a      	b.n	810c8ec <_printf_i+0xa8>
 810c876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810c87a:	2b15      	cmp	r3, #21
 810c87c:	d8f6      	bhi.n	810c86c <_printf_i+0x28>
 810c87e:	a101      	add	r1, pc, #4	@ (adr r1, 810c884 <_printf_i+0x40>)
 810c880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810c884:	0810c8dd 	.word	0x0810c8dd
 810c888:	0810c8f1 	.word	0x0810c8f1
 810c88c:	0810c86d 	.word	0x0810c86d
 810c890:	0810c86d 	.word	0x0810c86d
 810c894:	0810c86d 	.word	0x0810c86d
 810c898:	0810c86d 	.word	0x0810c86d
 810c89c:	0810c8f1 	.word	0x0810c8f1
 810c8a0:	0810c86d 	.word	0x0810c86d
 810c8a4:	0810c86d 	.word	0x0810c86d
 810c8a8:	0810c86d 	.word	0x0810c86d
 810c8ac:	0810c86d 	.word	0x0810c86d
 810c8b0:	0810c9f1 	.word	0x0810c9f1
 810c8b4:	0810c91b 	.word	0x0810c91b
 810c8b8:	0810c9ab 	.word	0x0810c9ab
 810c8bc:	0810c86d 	.word	0x0810c86d
 810c8c0:	0810c86d 	.word	0x0810c86d
 810c8c4:	0810ca13 	.word	0x0810ca13
 810c8c8:	0810c86d 	.word	0x0810c86d
 810c8cc:	0810c91b 	.word	0x0810c91b
 810c8d0:	0810c86d 	.word	0x0810c86d
 810c8d4:	0810c86d 	.word	0x0810c86d
 810c8d8:	0810c9b3 	.word	0x0810c9b3
 810c8dc:	6833      	ldr	r3, [r6, #0]
 810c8de:	1d1a      	adds	r2, r3, #4
 810c8e0:	681b      	ldr	r3, [r3, #0]
 810c8e2:	6032      	str	r2, [r6, #0]
 810c8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810c8e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810c8ec:	2301      	movs	r3, #1
 810c8ee:	e09d      	b.n	810ca2c <_printf_i+0x1e8>
 810c8f0:	6833      	ldr	r3, [r6, #0]
 810c8f2:	6820      	ldr	r0, [r4, #0]
 810c8f4:	1d19      	adds	r1, r3, #4
 810c8f6:	6031      	str	r1, [r6, #0]
 810c8f8:	0606      	lsls	r6, r0, #24
 810c8fa:	d501      	bpl.n	810c900 <_printf_i+0xbc>
 810c8fc:	681d      	ldr	r5, [r3, #0]
 810c8fe:	e003      	b.n	810c908 <_printf_i+0xc4>
 810c900:	0645      	lsls	r5, r0, #25
 810c902:	d5fb      	bpl.n	810c8fc <_printf_i+0xb8>
 810c904:	f9b3 5000 	ldrsh.w	r5, [r3]
 810c908:	2d00      	cmp	r5, #0
 810c90a:	da03      	bge.n	810c914 <_printf_i+0xd0>
 810c90c:	232d      	movs	r3, #45	@ 0x2d
 810c90e:	426d      	negs	r5, r5
 810c910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810c914:	4859      	ldr	r0, [pc, #356]	@ (810ca7c <_printf_i+0x238>)
 810c916:	230a      	movs	r3, #10
 810c918:	e011      	b.n	810c93e <_printf_i+0xfa>
 810c91a:	6821      	ldr	r1, [r4, #0]
 810c91c:	6833      	ldr	r3, [r6, #0]
 810c91e:	0608      	lsls	r0, r1, #24
 810c920:	f853 5b04 	ldr.w	r5, [r3], #4
 810c924:	d402      	bmi.n	810c92c <_printf_i+0xe8>
 810c926:	0649      	lsls	r1, r1, #25
 810c928:	bf48      	it	mi
 810c92a:	b2ad      	uxthmi	r5, r5
 810c92c:	2f6f      	cmp	r7, #111	@ 0x6f
 810c92e:	4853      	ldr	r0, [pc, #332]	@ (810ca7c <_printf_i+0x238>)
 810c930:	6033      	str	r3, [r6, #0]
 810c932:	bf14      	ite	ne
 810c934:	230a      	movne	r3, #10
 810c936:	2308      	moveq	r3, #8
 810c938:	2100      	movs	r1, #0
 810c93a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810c93e:	6866      	ldr	r6, [r4, #4]
 810c940:	60a6      	str	r6, [r4, #8]
 810c942:	2e00      	cmp	r6, #0
 810c944:	bfa2      	ittt	ge
 810c946:	6821      	ldrge	r1, [r4, #0]
 810c948:	f021 0104 	bicge.w	r1, r1, #4
 810c94c:	6021      	strge	r1, [r4, #0]
 810c94e:	b90d      	cbnz	r5, 810c954 <_printf_i+0x110>
 810c950:	2e00      	cmp	r6, #0
 810c952:	d04b      	beq.n	810c9ec <_printf_i+0x1a8>
 810c954:	4616      	mov	r6, r2
 810c956:	fbb5 f1f3 	udiv	r1, r5, r3
 810c95a:	fb03 5711 	mls	r7, r3, r1, r5
 810c95e:	5dc7      	ldrb	r7, [r0, r7]
 810c960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810c964:	462f      	mov	r7, r5
 810c966:	42bb      	cmp	r3, r7
 810c968:	460d      	mov	r5, r1
 810c96a:	d9f4      	bls.n	810c956 <_printf_i+0x112>
 810c96c:	2b08      	cmp	r3, #8
 810c96e:	d10b      	bne.n	810c988 <_printf_i+0x144>
 810c970:	6823      	ldr	r3, [r4, #0]
 810c972:	07df      	lsls	r7, r3, #31
 810c974:	d508      	bpl.n	810c988 <_printf_i+0x144>
 810c976:	6923      	ldr	r3, [r4, #16]
 810c978:	6861      	ldr	r1, [r4, #4]
 810c97a:	4299      	cmp	r1, r3
 810c97c:	bfde      	ittt	le
 810c97e:	2330      	movle	r3, #48	@ 0x30
 810c980:	f806 3c01 	strble.w	r3, [r6, #-1]
 810c984:	f106 36ff 	addle.w	r6, r6, #4294967295
 810c988:	1b92      	subs	r2, r2, r6
 810c98a:	6122      	str	r2, [r4, #16]
 810c98c:	f8cd a000 	str.w	sl, [sp]
 810c990:	464b      	mov	r3, r9
 810c992:	aa03      	add	r2, sp, #12
 810c994:	4621      	mov	r1, r4
 810c996:	4640      	mov	r0, r8
 810c998:	f7ff fee6 	bl	810c768 <_printf_common>
 810c99c:	3001      	adds	r0, #1
 810c99e:	d14a      	bne.n	810ca36 <_printf_i+0x1f2>
 810c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 810c9a4:	b004      	add	sp, #16
 810c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c9aa:	6823      	ldr	r3, [r4, #0]
 810c9ac:	f043 0320 	orr.w	r3, r3, #32
 810c9b0:	6023      	str	r3, [r4, #0]
 810c9b2:	4833      	ldr	r0, [pc, #204]	@ (810ca80 <_printf_i+0x23c>)
 810c9b4:	2778      	movs	r7, #120	@ 0x78
 810c9b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810c9ba:	6823      	ldr	r3, [r4, #0]
 810c9bc:	6831      	ldr	r1, [r6, #0]
 810c9be:	061f      	lsls	r7, r3, #24
 810c9c0:	f851 5b04 	ldr.w	r5, [r1], #4
 810c9c4:	d402      	bmi.n	810c9cc <_printf_i+0x188>
 810c9c6:	065f      	lsls	r7, r3, #25
 810c9c8:	bf48      	it	mi
 810c9ca:	b2ad      	uxthmi	r5, r5
 810c9cc:	6031      	str	r1, [r6, #0]
 810c9ce:	07d9      	lsls	r1, r3, #31
 810c9d0:	bf44      	itt	mi
 810c9d2:	f043 0320 	orrmi.w	r3, r3, #32
 810c9d6:	6023      	strmi	r3, [r4, #0]
 810c9d8:	b11d      	cbz	r5, 810c9e2 <_printf_i+0x19e>
 810c9da:	2310      	movs	r3, #16
 810c9dc:	e7ac      	b.n	810c938 <_printf_i+0xf4>
 810c9de:	4827      	ldr	r0, [pc, #156]	@ (810ca7c <_printf_i+0x238>)
 810c9e0:	e7e9      	b.n	810c9b6 <_printf_i+0x172>
 810c9e2:	6823      	ldr	r3, [r4, #0]
 810c9e4:	f023 0320 	bic.w	r3, r3, #32
 810c9e8:	6023      	str	r3, [r4, #0]
 810c9ea:	e7f6      	b.n	810c9da <_printf_i+0x196>
 810c9ec:	4616      	mov	r6, r2
 810c9ee:	e7bd      	b.n	810c96c <_printf_i+0x128>
 810c9f0:	6833      	ldr	r3, [r6, #0]
 810c9f2:	6825      	ldr	r5, [r4, #0]
 810c9f4:	6961      	ldr	r1, [r4, #20]
 810c9f6:	1d18      	adds	r0, r3, #4
 810c9f8:	6030      	str	r0, [r6, #0]
 810c9fa:	062e      	lsls	r6, r5, #24
 810c9fc:	681b      	ldr	r3, [r3, #0]
 810c9fe:	d501      	bpl.n	810ca04 <_printf_i+0x1c0>
 810ca00:	6019      	str	r1, [r3, #0]
 810ca02:	e002      	b.n	810ca0a <_printf_i+0x1c6>
 810ca04:	0668      	lsls	r0, r5, #25
 810ca06:	d5fb      	bpl.n	810ca00 <_printf_i+0x1bc>
 810ca08:	8019      	strh	r1, [r3, #0]
 810ca0a:	2300      	movs	r3, #0
 810ca0c:	6123      	str	r3, [r4, #16]
 810ca0e:	4616      	mov	r6, r2
 810ca10:	e7bc      	b.n	810c98c <_printf_i+0x148>
 810ca12:	6833      	ldr	r3, [r6, #0]
 810ca14:	1d1a      	adds	r2, r3, #4
 810ca16:	6032      	str	r2, [r6, #0]
 810ca18:	681e      	ldr	r6, [r3, #0]
 810ca1a:	6862      	ldr	r2, [r4, #4]
 810ca1c:	2100      	movs	r1, #0
 810ca1e:	4630      	mov	r0, r6
 810ca20:	f7f3 fc5e 	bl	81002e0 <memchr>
 810ca24:	b108      	cbz	r0, 810ca2a <_printf_i+0x1e6>
 810ca26:	1b80      	subs	r0, r0, r6
 810ca28:	6060      	str	r0, [r4, #4]
 810ca2a:	6863      	ldr	r3, [r4, #4]
 810ca2c:	6123      	str	r3, [r4, #16]
 810ca2e:	2300      	movs	r3, #0
 810ca30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810ca34:	e7aa      	b.n	810c98c <_printf_i+0x148>
 810ca36:	6923      	ldr	r3, [r4, #16]
 810ca38:	4632      	mov	r2, r6
 810ca3a:	4649      	mov	r1, r9
 810ca3c:	4640      	mov	r0, r8
 810ca3e:	47d0      	blx	sl
 810ca40:	3001      	adds	r0, #1
 810ca42:	d0ad      	beq.n	810c9a0 <_printf_i+0x15c>
 810ca44:	6823      	ldr	r3, [r4, #0]
 810ca46:	079b      	lsls	r3, r3, #30
 810ca48:	d413      	bmi.n	810ca72 <_printf_i+0x22e>
 810ca4a:	68e0      	ldr	r0, [r4, #12]
 810ca4c:	9b03      	ldr	r3, [sp, #12]
 810ca4e:	4298      	cmp	r0, r3
 810ca50:	bfb8      	it	lt
 810ca52:	4618      	movlt	r0, r3
 810ca54:	e7a6      	b.n	810c9a4 <_printf_i+0x160>
 810ca56:	2301      	movs	r3, #1
 810ca58:	4632      	mov	r2, r6
 810ca5a:	4649      	mov	r1, r9
 810ca5c:	4640      	mov	r0, r8
 810ca5e:	47d0      	blx	sl
 810ca60:	3001      	adds	r0, #1
 810ca62:	d09d      	beq.n	810c9a0 <_printf_i+0x15c>
 810ca64:	3501      	adds	r5, #1
 810ca66:	68e3      	ldr	r3, [r4, #12]
 810ca68:	9903      	ldr	r1, [sp, #12]
 810ca6a:	1a5b      	subs	r3, r3, r1
 810ca6c:	42ab      	cmp	r3, r5
 810ca6e:	dcf2      	bgt.n	810ca56 <_printf_i+0x212>
 810ca70:	e7eb      	b.n	810ca4a <_printf_i+0x206>
 810ca72:	2500      	movs	r5, #0
 810ca74:	f104 0619 	add.w	r6, r4, #25
 810ca78:	e7f5      	b.n	810ca66 <_printf_i+0x222>
 810ca7a:	bf00      	nop
 810ca7c:	0811202a 	.word	0x0811202a
 810ca80:	0811203b 	.word	0x0811203b

0810ca84 <_scanf_float>:
 810ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ca88:	b087      	sub	sp, #28
 810ca8a:	4617      	mov	r7, r2
 810ca8c:	9303      	str	r3, [sp, #12]
 810ca8e:	688b      	ldr	r3, [r1, #8]
 810ca90:	1e5a      	subs	r2, r3, #1
 810ca92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810ca96:	bf81      	itttt	hi
 810ca98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810ca9c:	eb03 0b05 	addhi.w	fp, r3, r5
 810caa0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810caa4:	608b      	strhi	r3, [r1, #8]
 810caa6:	680b      	ldr	r3, [r1, #0]
 810caa8:	460a      	mov	r2, r1
 810caaa:	f04f 0500 	mov.w	r5, #0
 810caae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810cab2:	f842 3b1c 	str.w	r3, [r2], #28
 810cab6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810caba:	4680      	mov	r8, r0
 810cabc:	460c      	mov	r4, r1
 810cabe:	bf98      	it	ls
 810cac0:	f04f 0b00 	movls.w	fp, #0
 810cac4:	9201      	str	r2, [sp, #4]
 810cac6:	4616      	mov	r6, r2
 810cac8:	46aa      	mov	sl, r5
 810caca:	46a9      	mov	r9, r5
 810cacc:	9502      	str	r5, [sp, #8]
 810cace:	68a2      	ldr	r2, [r4, #8]
 810cad0:	b152      	cbz	r2, 810cae8 <_scanf_float+0x64>
 810cad2:	683b      	ldr	r3, [r7, #0]
 810cad4:	781b      	ldrb	r3, [r3, #0]
 810cad6:	2b4e      	cmp	r3, #78	@ 0x4e
 810cad8:	d864      	bhi.n	810cba4 <_scanf_float+0x120>
 810cada:	2b40      	cmp	r3, #64	@ 0x40
 810cadc:	d83c      	bhi.n	810cb58 <_scanf_float+0xd4>
 810cade:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810cae2:	b2c8      	uxtb	r0, r1
 810cae4:	280e      	cmp	r0, #14
 810cae6:	d93a      	bls.n	810cb5e <_scanf_float+0xda>
 810cae8:	f1b9 0f00 	cmp.w	r9, #0
 810caec:	d003      	beq.n	810caf6 <_scanf_float+0x72>
 810caee:	6823      	ldr	r3, [r4, #0]
 810caf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810caf4:	6023      	str	r3, [r4, #0]
 810caf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810cafa:	f1ba 0f01 	cmp.w	sl, #1
 810cafe:	f200 8117 	bhi.w	810cd30 <_scanf_float+0x2ac>
 810cb02:	9b01      	ldr	r3, [sp, #4]
 810cb04:	429e      	cmp	r6, r3
 810cb06:	f200 8108 	bhi.w	810cd1a <_scanf_float+0x296>
 810cb0a:	2001      	movs	r0, #1
 810cb0c:	b007      	add	sp, #28
 810cb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cb12:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810cb16:	2a0d      	cmp	r2, #13
 810cb18:	d8e6      	bhi.n	810cae8 <_scanf_float+0x64>
 810cb1a:	a101      	add	r1, pc, #4	@ (adr r1, 810cb20 <_scanf_float+0x9c>)
 810cb1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810cb20:	0810cc67 	.word	0x0810cc67
 810cb24:	0810cae9 	.word	0x0810cae9
 810cb28:	0810cae9 	.word	0x0810cae9
 810cb2c:	0810cae9 	.word	0x0810cae9
 810cb30:	0810ccc7 	.word	0x0810ccc7
 810cb34:	0810cc9f 	.word	0x0810cc9f
 810cb38:	0810cae9 	.word	0x0810cae9
 810cb3c:	0810cae9 	.word	0x0810cae9
 810cb40:	0810cc75 	.word	0x0810cc75
 810cb44:	0810cae9 	.word	0x0810cae9
 810cb48:	0810cae9 	.word	0x0810cae9
 810cb4c:	0810cae9 	.word	0x0810cae9
 810cb50:	0810cae9 	.word	0x0810cae9
 810cb54:	0810cc2d 	.word	0x0810cc2d
 810cb58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810cb5c:	e7db      	b.n	810cb16 <_scanf_float+0x92>
 810cb5e:	290e      	cmp	r1, #14
 810cb60:	d8c2      	bhi.n	810cae8 <_scanf_float+0x64>
 810cb62:	a001      	add	r0, pc, #4	@ (adr r0, 810cb68 <_scanf_float+0xe4>)
 810cb64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810cb68:	0810cc1d 	.word	0x0810cc1d
 810cb6c:	0810cae9 	.word	0x0810cae9
 810cb70:	0810cc1d 	.word	0x0810cc1d
 810cb74:	0810ccb3 	.word	0x0810ccb3
 810cb78:	0810cae9 	.word	0x0810cae9
 810cb7c:	0810cbc5 	.word	0x0810cbc5
 810cb80:	0810cc03 	.word	0x0810cc03
 810cb84:	0810cc03 	.word	0x0810cc03
 810cb88:	0810cc03 	.word	0x0810cc03
 810cb8c:	0810cc03 	.word	0x0810cc03
 810cb90:	0810cc03 	.word	0x0810cc03
 810cb94:	0810cc03 	.word	0x0810cc03
 810cb98:	0810cc03 	.word	0x0810cc03
 810cb9c:	0810cc03 	.word	0x0810cc03
 810cba0:	0810cc03 	.word	0x0810cc03
 810cba4:	2b6e      	cmp	r3, #110	@ 0x6e
 810cba6:	d809      	bhi.n	810cbbc <_scanf_float+0x138>
 810cba8:	2b60      	cmp	r3, #96	@ 0x60
 810cbaa:	d8b2      	bhi.n	810cb12 <_scanf_float+0x8e>
 810cbac:	2b54      	cmp	r3, #84	@ 0x54
 810cbae:	d07b      	beq.n	810cca8 <_scanf_float+0x224>
 810cbb0:	2b59      	cmp	r3, #89	@ 0x59
 810cbb2:	d199      	bne.n	810cae8 <_scanf_float+0x64>
 810cbb4:	2d07      	cmp	r5, #7
 810cbb6:	d197      	bne.n	810cae8 <_scanf_float+0x64>
 810cbb8:	2508      	movs	r5, #8
 810cbba:	e02c      	b.n	810cc16 <_scanf_float+0x192>
 810cbbc:	2b74      	cmp	r3, #116	@ 0x74
 810cbbe:	d073      	beq.n	810cca8 <_scanf_float+0x224>
 810cbc0:	2b79      	cmp	r3, #121	@ 0x79
 810cbc2:	e7f6      	b.n	810cbb2 <_scanf_float+0x12e>
 810cbc4:	6821      	ldr	r1, [r4, #0]
 810cbc6:	05c8      	lsls	r0, r1, #23
 810cbc8:	d51b      	bpl.n	810cc02 <_scanf_float+0x17e>
 810cbca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810cbce:	6021      	str	r1, [r4, #0]
 810cbd0:	f109 0901 	add.w	r9, r9, #1
 810cbd4:	f1bb 0f00 	cmp.w	fp, #0
 810cbd8:	d003      	beq.n	810cbe2 <_scanf_float+0x15e>
 810cbda:	3201      	adds	r2, #1
 810cbdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 810cbe0:	60a2      	str	r2, [r4, #8]
 810cbe2:	68a3      	ldr	r3, [r4, #8]
 810cbe4:	3b01      	subs	r3, #1
 810cbe6:	60a3      	str	r3, [r4, #8]
 810cbe8:	6923      	ldr	r3, [r4, #16]
 810cbea:	3301      	adds	r3, #1
 810cbec:	6123      	str	r3, [r4, #16]
 810cbee:	687b      	ldr	r3, [r7, #4]
 810cbf0:	3b01      	subs	r3, #1
 810cbf2:	2b00      	cmp	r3, #0
 810cbf4:	607b      	str	r3, [r7, #4]
 810cbf6:	f340 8087 	ble.w	810cd08 <_scanf_float+0x284>
 810cbfa:	683b      	ldr	r3, [r7, #0]
 810cbfc:	3301      	adds	r3, #1
 810cbfe:	603b      	str	r3, [r7, #0]
 810cc00:	e765      	b.n	810cace <_scanf_float+0x4a>
 810cc02:	eb1a 0105 	adds.w	r1, sl, r5
 810cc06:	f47f af6f 	bne.w	810cae8 <_scanf_float+0x64>
 810cc0a:	6822      	ldr	r2, [r4, #0]
 810cc0c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810cc10:	6022      	str	r2, [r4, #0]
 810cc12:	460d      	mov	r5, r1
 810cc14:	468a      	mov	sl, r1
 810cc16:	f806 3b01 	strb.w	r3, [r6], #1
 810cc1a:	e7e2      	b.n	810cbe2 <_scanf_float+0x15e>
 810cc1c:	6822      	ldr	r2, [r4, #0]
 810cc1e:	0610      	lsls	r0, r2, #24
 810cc20:	f57f af62 	bpl.w	810cae8 <_scanf_float+0x64>
 810cc24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810cc28:	6022      	str	r2, [r4, #0]
 810cc2a:	e7f4      	b.n	810cc16 <_scanf_float+0x192>
 810cc2c:	f1ba 0f00 	cmp.w	sl, #0
 810cc30:	d10e      	bne.n	810cc50 <_scanf_float+0x1cc>
 810cc32:	f1b9 0f00 	cmp.w	r9, #0
 810cc36:	d10e      	bne.n	810cc56 <_scanf_float+0x1d2>
 810cc38:	6822      	ldr	r2, [r4, #0]
 810cc3a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810cc3e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810cc42:	d108      	bne.n	810cc56 <_scanf_float+0x1d2>
 810cc44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810cc48:	6022      	str	r2, [r4, #0]
 810cc4a:	f04f 0a01 	mov.w	sl, #1
 810cc4e:	e7e2      	b.n	810cc16 <_scanf_float+0x192>
 810cc50:	f1ba 0f02 	cmp.w	sl, #2
 810cc54:	d055      	beq.n	810cd02 <_scanf_float+0x27e>
 810cc56:	2d01      	cmp	r5, #1
 810cc58:	d002      	beq.n	810cc60 <_scanf_float+0x1dc>
 810cc5a:	2d04      	cmp	r5, #4
 810cc5c:	f47f af44 	bne.w	810cae8 <_scanf_float+0x64>
 810cc60:	3501      	adds	r5, #1
 810cc62:	b2ed      	uxtb	r5, r5
 810cc64:	e7d7      	b.n	810cc16 <_scanf_float+0x192>
 810cc66:	f1ba 0f01 	cmp.w	sl, #1
 810cc6a:	f47f af3d 	bne.w	810cae8 <_scanf_float+0x64>
 810cc6e:	f04f 0a02 	mov.w	sl, #2
 810cc72:	e7d0      	b.n	810cc16 <_scanf_float+0x192>
 810cc74:	b97d      	cbnz	r5, 810cc96 <_scanf_float+0x212>
 810cc76:	f1b9 0f00 	cmp.w	r9, #0
 810cc7a:	f47f af38 	bne.w	810caee <_scanf_float+0x6a>
 810cc7e:	6822      	ldr	r2, [r4, #0]
 810cc80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810cc84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810cc88:	f040 8108 	bne.w	810ce9c <_scanf_float+0x418>
 810cc8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810cc90:	6022      	str	r2, [r4, #0]
 810cc92:	2501      	movs	r5, #1
 810cc94:	e7bf      	b.n	810cc16 <_scanf_float+0x192>
 810cc96:	2d03      	cmp	r5, #3
 810cc98:	d0e2      	beq.n	810cc60 <_scanf_float+0x1dc>
 810cc9a:	2d05      	cmp	r5, #5
 810cc9c:	e7de      	b.n	810cc5c <_scanf_float+0x1d8>
 810cc9e:	2d02      	cmp	r5, #2
 810cca0:	f47f af22 	bne.w	810cae8 <_scanf_float+0x64>
 810cca4:	2503      	movs	r5, #3
 810cca6:	e7b6      	b.n	810cc16 <_scanf_float+0x192>
 810cca8:	2d06      	cmp	r5, #6
 810ccaa:	f47f af1d 	bne.w	810cae8 <_scanf_float+0x64>
 810ccae:	2507      	movs	r5, #7
 810ccb0:	e7b1      	b.n	810cc16 <_scanf_float+0x192>
 810ccb2:	6822      	ldr	r2, [r4, #0]
 810ccb4:	0591      	lsls	r1, r2, #22
 810ccb6:	f57f af17 	bpl.w	810cae8 <_scanf_float+0x64>
 810ccba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810ccbe:	6022      	str	r2, [r4, #0]
 810ccc0:	f8cd 9008 	str.w	r9, [sp, #8]
 810ccc4:	e7a7      	b.n	810cc16 <_scanf_float+0x192>
 810ccc6:	6822      	ldr	r2, [r4, #0]
 810ccc8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810cccc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810ccd0:	d006      	beq.n	810cce0 <_scanf_float+0x25c>
 810ccd2:	0550      	lsls	r0, r2, #21
 810ccd4:	f57f af08 	bpl.w	810cae8 <_scanf_float+0x64>
 810ccd8:	f1b9 0f00 	cmp.w	r9, #0
 810ccdc:	f000 80de 	beq.w	810ce9c <_scanf_float+0x418>
 810cce0:	0591      	lsls	r1, r2, #22
 810cce2:	bf58      	it	pl
 810cce4:	9902      	ldrpl	r1, [sp, #8]
 810cce6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810ccea:	bf58      	it	pl
 810ccec:	eba9 0101 	subpl.w	r1, r9, r1
 810ccf0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810ccf4:	bf58      	it	pl
 810ccf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810ccfa:	6022      	str	r2, [r4, #0]
 810ccfc:	f04f 0900 	mov.w	r9, #0
 810cd00:	e789      	b.n	810cc16 <_scanf_float+0x192>
 810cd02:	f04f 0a03 	mov.w	sl, #3
 810cd06:	e786      	b.n	810cc16 <_scanf_float+0x192>
 810cd08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810cd0c:	4639      	mov	r1, r7
 810cd0e:	4640      	mov	r0, r8
 810cd10:	4798      	blx	r3
 810cd12:	2800      	cmp	r0, #0
 810cd14:	f43f aedb 	beq.w	810cace <_scanf_float+0x4a>
 810cd18:	e6e6      	b.n	810cae8 <_scanf_float+0x64>
 810cd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cd1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810cd22:	463a      	mov	r2, r7
 810cd24:	4640      	mov	r0, r8
 810cd26:	4798      	blx	r3
 810cd28:	6923      	ldr	r3, [r4, #16]
 810cd2a:	3b01      	subs	r3, #1
 810cd2c:	6123      	str	r3, [r4, #16]
 810cd2e:	e6e8      	b.n	810cb02 <_scanf_float+0x7e>
 810cd30:	1e6b      	subs	r3, r5, #1
 810cd32:	2b06      	cmp	r3, #6
 810cd34:	d824      	bhi.n	810cd80 <_scanf_float+0x2fc>
 810cd36:	2d02      	cmp	r5, #2
 810cd38:	d836      	bhi.n	810cda8 <_scanf_float+0x324>
 810cd3a:	9b01      	ldr	r3, [sp, #4]
 810cd3c:	429e      	cmp	r6, r3
 810cd3e:	f67f aee4 	bls.w	810cb0a <_scanf_float+0x86>
 810cd42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cd46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810cd4a:	463a      	mov	r2, r7
 810cd4c:	4640      	mov	r0, r8
 810cd4e:	4798      	blx	r3
 810cd50:	6923      	ldr	r3, [r4, #16]
 810cd52:	3b01      	subs	r3, #1
 810cd54:	6123      	str	r3, [r4, #16]
 810cd56:	e7f0      	b.n	810cd3a <_scanf_float+0x2b6>
 810cd58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cd5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810cd60:	463a      	mov	r2, r7
 810cd62:	4640      	mov	r0, r8
 810cd64:	4798      	blx	r3
 810cd66:	6923      	ldr	r3, [r4, #16]
 810cd68:	3b01      	subs	r3, #1
 810cd6a:	6123      	str	r3, [r4, #16]
 810cd6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 810cd70:	fa5f fa8a 	uxtb.w	sl, sl
 810cd74:	f1ba 0f02 	cmp.w	sl, #2
 810cd78:	d1ee      	bne.n	810cd58 <_scanf_float+0x2d4>
 810cd7a:	3d03      	subs	r5, #3
 810cd7c:	b2ed      	uxtb	r5, r5
 810cd7e:	1b76      	subs	r6, r6, r5
 810cd80:	6823      	ldr	r3, [r4, #0]
 810cd82:	05da      	lsls	r2, r3, #23
 810cd84:	d530      	bpl.n	810cde8 <_scanf_float+0x364>
 810cd86:	055b      	lsls	r3, r3, #21
 810cd88:	d511      	bpl.n	810cdae <_scanf_float+0x32a>
 810cd8a:	9b01      	ldr	r3, [sp, #4]
 810cd8c:	429e      	cmp	r6, r3
 810cd8e:	f67f aebc 	bls.w	810cb0a <_scanf_float+0x86>
 810cd92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cd96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810cd9a:	463a      	mov	r2, r7
 810cd9c:	4640      	mov	r0, r8
 810cd9e:	4798      	blx	r3
 810cda0:	6923      	ldr	r3, [r4, #16]
 810cda2:	3b01      	subs	r3, #1
 810cda4:	6123      	str	r3, [r4, #16]
 810cda6:	e7f0      	b.n	810cd8a <_scanf_float+0x306>
 810cda8:	46aa      	mov	sl, r5
 810cdaa:	46b3      	mov	fp, r6
 810cdac:	e7de      	b.n	810cd6c <_scanf_float+0x2e8>
 810cdae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810cdb2:	6923      	ldr	r3, [r4, #16]
 810cdb4:	2965      	cmp	r1, #101	@ 0x65
 810cdb6:	f103 33ff 	add.w	r3, r3, #4294967295
 810cdba:	f106 35ff 	add.w	r5, r6, #4294967295
 810cdbe:	6123      	str	r3, [r4, #16]
 810cdc0:	d00c      	beq.n	810cddc <_scanf_float+0x358>
 810cdc2:	2945      	cmp	r1, #69	@ 0x45
 810cdc4:	d00a      	beq.n	810cddc <_scanf_float+0x358>
 810cdc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cdca:	463a      	mov	r2, r7
 810cdcc:	4640      	mov	r0, r8
 810cdce:	4798      	blx	r3
 810cdd0:	6923      	ldr	r3, [r4, #16]
 810cdd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810cdd6:	3b01      	subs	r3, #1
 810cdd8:	1eb5      	subs	r5, r6, #2
 810cdda:	6123      	str	r3, [r4, #16]
 810cddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810cde0:	463a      	mov	r2, r7
 810cde2:	4640      	mov	r0, r8
 810cde4:	4798      	blx	r3
 810cde6:	462e      	mov	r6, r5
 810cde8:	6822      	ldr	r2, [r4, #0]
 810cdea:	f012 0210 	ands.w	r2, r2, #16
 810cdee:	d001      	beq.n	810cdf4 <_scanf_float+0x370>
 810cdf0:	2000      	movs	r0, #0
 810cdf2:	e68b      	b.n	810cb0c <_scanf_float+0x88>
 810cdf4:	7032      	strb	r2, [r6, #0]
 810cdf6:	6823      	ldr	r3, [r4, #0]
 810cdf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810cdfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810ce00:	d11c      	bne.n	810ce3c <_scanf_float+0x3b8>
 810ce02:	9b02      	ldr	r3, [sp, #8]
 810ce04:	454b      	cmp	r3, r9
 810ce06:	eba3 0209 	sub.w	r2, r3, r9
 810ce0a:	d123      	bne.n	810ce54 <_scanf_float+0x3d0>
 810ce0c:	9901      	ldr	r1, [sp, #4]
 810ce0e:	2200      	movs	r2, #0
 810ce10:	4640      	mov	r0, r8
 810ce12:	f002 fd09 	bl	810f828 <_strtod_r>
 810ce16:	9b03      	ldr	r3, [sp, #12]
 810ce18:	6821      	ldr	r1, [r4, #0]
 810ce1a:	681b      	ldr	r3, [r3, #0]
 810ce1c:	f011 0f02 	tst.w	r1, #2
 810ce20:	ec57 6b10 	vmov	r6, r7, d0
 810ce24:	f103 0204 	add.w	r2, r3, #4
 810ce28:	d01f      	beq.n	810ce6a <_scanf_float+0x3e6>
 810ce2a:	9903      	ldr	r1, [sp, #12]
 810ce2c:	600a      	str	r2, [r1, #0]
 810ce2e:	681b      	ldr	r3, [r3, #0]
 810ce30:	e9c3 6700 	strd	r6, r7, [r3]
 810ce34:	68e3      	ldr	r3, [r4, #12]
 810ce36:	3301      	adds	r3, #1
 810ce38:	60e3      	str	r3, [r4, #12]
 810ce3a:	e7d9      	b.n	810cdf0 <_scanf_float+0x36c>
 810ce3c:	9b04      	ldr	r3, [sp, #16]
 810ce3e:	2b00      	cmp	r3, #0
 810ce40:	d0e4      	beq.n	810ce0c <_scanf_float+0x388>
 810ce42:	9905      	ldr	r1, [sp, #20]
 810ce44:	230a      	movs	r3, #10
 810ce46:	3101      	adds	r1, #1
 810ce48:	4640      	mov	r0, r8
 810ce4a:	f002 fd6d 	bl	810f928 <_strtol_r>
 810ce4e:	9b04      	ldr	r3, [sp, #16]
 810ce50:	9e05      	ldr	r6, [sp, #20]
 810ce52:	1ac2      	subs	r2, r0, r3
 810ce54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810ce58:	429e      	cmp	r6, r3
 810ce5a:	bf28      	it	cs
 810ce5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810ce60:	4910      	ldr	r1, [pc, #64]	@ (810cea4 <_scanf_float+0x420>)
 810ce62:	4630      	mov	r0, r6
 810ce64:	f000 f954 	bl	810d110 <siprintf>
 810ce68:	e7d0      	b.n	810ce0c <_scanf_float+0x388>
 810ce6a:	f011 0f04 	tst.w	r1, #4
 810ce6e:	9903      	ldr	r1, [sp, #12]
 810ce70:	600a      	str	r2, [r1, #0]
 810ce72:	d1dc      	bne.n	810ce2e <_scanf_float+0x3aa>
 810ce74:	681d      	ldr	r5, [r3, #0]
 810ce76:	4632      	mov	r2, r6
 810ce78:	463b      	mov	r3, r7
 810ce7a:	4630      	mov	r0, r6
 810ce7c:	4639      	mov	r1, r7
 810ce7e:	f7f3 fedd 	bl	8100c3c <__aeabi_dcmpun>
 810ce82:	b128      	cbz	r0, 810ce90 <_scanf_float+0x40c>
 810ce84:	4808      	ldr	r0, [pc, #32]	@ (810cea8 <_scanf_float+0x424>)
 810ce86:	f000 fac9 	bl	810d41c <nanf>
 810ce8a:	ed85 0a00 	vstr	s0, [r5]
 810ce8e:	e7d1      	b.n	810ce34 <_scanf_float+0x3b0>
 810ce90:	4630      	mov	r0, r6
 810ce92:	4639      	mov	r1, r7
 810ce94:	f7f3 ff30 	bl	8100cf8 <__aeabi_d2f>
 810ce98:	6028      	str	r0, [r5, #0]
 810ce9a:	e7cb      	b.n	810ce34 <_scanf_float+0x3b0>
 810ce9c:	f04f 0900 	mov.w	r9, #0
 810cea0:	e629      	b.n	810caf6 <_scanf_float+0x72>
 810cea2:	bf00      	nop
 810cea4:	0811204c 	.word	0x0811204c
 810cea8:	081123e5 	.word	0x081123e5

0810ceac <std>:
 810ceac:	2300      	movs	r3, #0
 810ceae:	b510      	push	{r4, lr}
 810ceb0:	4604      	mov	r4, r0
 810ceb2:	e9c0 3300 	strd	r3, r3, [r0]
 810ceb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810ceba:	6083      	str	r3, [r0, #8]
 810cebc:	8181      	strh	r1, [r0, #12]
 810cebe:	6643      	str	r3, [r0, #100]	@ 0x64
 810cec0:	81c2      	strh	r2, [r0, #14]
 810cec2:	6183      	str	r3, [r0, #24]
 810cec4:	4619      	mov	r1, r3
 810cec6:	2208      	movs	r2, #8
 810cec8:	305c      	adds	r0, #92	@ 0x5c
 810ceca:	f000 fa19 	bl	810d300 <memset>
 810cece:	4b0d      	ldr	r3, [pc, #52]	@ (810cf04 <std+0x58>)
 810ced0:	6263      	str	r3, [r4, #36]	@ 0x24
 810ced2:	4b0d      	ldr	r3, [pc, #52]	@ (810cf08 <std+0x5c>)
 810ced4:	62a3      	str	r3, [r4, #40]	@ 0x28
 810ced6:	4b0d      	ldr	r3, [pc, #52]	@ (810cf0c <std+0x60>)
 810ced8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810ceda:	4b0d      	ldr	r3, [pc, #52]	@ (810cf10 <std+0x64>)
 810cedc:	6323      	str	r3, [r4, #48]	@ 0x30
 810cede:	4b0d      	ldr	r3, [pc, #52]	@ (810cf14 <std+0x68>)
 810cee0:	6224      	str	r4, [r4, #32]
 810cee2:	429c      	cmp	r4, r3
 810cee4:	d006      	beq.n	810cef4 <std+0x48>
 810cee6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810ceea:	4294      	cmp	r4, r2
 810ceec:	d002      	beq.n	810cef4 <std+0x48>
 810ceee:	33d0      	adds	r3, #208	@ 0xd0
 810cef0:	429c      	cmp	r4, r3
 810cef2:	d105      	bne.n	810cf00 <std+0x54>
 810cef4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810cef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810cefc:	f000 ba7c 	b.w	810d3f8 <__retarget_lock_init_recursive>
 810cf00:	bd10      	pop	{r4, pc}
 810cf02:	bf00      	nop
 810cf04:	0810d151 	.word	0x0810d151
 810cf08:	0810d173 	.word	0x0810d173
 810cf0c:	0810d1ab 	.word	0x0810d1ab
 810cf10:	0810d1cf 	.word	0x0810d1cf
 810cf14:	1000064c 	.word	0x1000064c

0810cf18 <stdio_exit_handler>:
 810cf18:	4a02      	ldr	r2, [pc, #8]	@ (810cf24 <stdio_exit_handler+0xc>)
 810cf1a:	4903      	ldr	r1, [pc, #12]	@ (810cf28 <stdio_exit_handler+0x10>)
 810cf1c:	4803      	ldr	r0, [pc, #12]	@ (810cf2c <stdio_exit_handler+0x14>)
 810cf1e:	f000 b869 	b.w	810cff4 <_fwalk_sglue>
 810cf22:	bf00      	nop
 810cf24:	10000088 	.word	0x10000088
 810cf28:	0810ff69 	.word	0x0810ff69
 810cf2c:	10000098 	.word	0x10000098

0810cf30 <cleanup_stdio>:
 810cf30:	6841      	ldr	r1, [r0, #4]
 810cf32:	4b0c      	ldr	r3, [pc, #48]	@ (810cf64 <cleanup_stdio+0x34>)
 810cf34:	4299      	cmp	r1, r3
 810cf36:	b510      	push	{r4, lr}
 810cf38:	4604      	mov	r4, r0
 810cf3a:	d001      	beq.n	810cf40 <cleanup_stdio+0x10>
 810cf3c:	f003 f814 	bl	810ff68 <_fflush_r>
 810cf40:	68a1      	ldr	r1, [r4, #8]
 810cf42:	4b09      	ldr	r3, [pc, #36]	@ (810cf68 <cleanup_stdio+0x38>)
 810cf44:	4299      	cmp	r1, r3
 810cf46:	d002      	beq.n	810cf4e <cleanup_stdio+0x1e>
 810cf48:	4620      	mov	r0, r4
 810cf4a:	f003 f80d 	bl	810ff68 <_fflush_r>
 810cf4e:	68e1      	ldr	r1, [r4, #12]
 810cf50:	4b06      	ldr	r3, [pc, #24]	@ (810cf6c <cleanup_stdio+0x3c>)
 810cf52:	4299      	cmp	r1, r3
 810cf54:	d004      	beq.n	810cf60 <cleanup_stdio+0x30>
 810cf56:	4620      	mov	r0, r4
 810cf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810cf5c:	f003 b804 	b.w	810ff68 <_fflush_r>
 810cf60:	bd10      	pop	{r4, pc}
 810cf62:	bf00      	nop
 810cf64:	1000064c 	.word	0x1000064c
 810cf68:	100006b4 	.word	0x100006b4
 810cf6c:	1000071c 	.word	0x1000071c

0810cf70 <global_stdio_init.part.0>:
 810cf70:	b510      	push	{r4, lr}
 810cf72:	4b0b      	ldr	r3, [pc, #44]	@ (810cfa0 <global_stdio_init.part.0+0x30>)
 810cf74:	4c0b      	ldr	r4, [pc, #44]	@ (810cfa4 <global_stdio_init.part.0+0x34>)
 810cf76:	4a0c      	ldr	r2, [pc, #48]	@ (810cfa8 <global_stdio_init.part.0+0x38>)
 810cf78:	601a      	str	r2, [r3, #0]
 810cf7a:	4620      	mov	r0, r4
 810cf7c:	2200      	movs	r2, #0
 810cf7e:	2104      	movs	r1, #4
 810cf80:	f7ff ff94 	bl	810ceac <std>
 810cf84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810cf88:	2201      	movs	r2, #1
 810cf8a:	2109      	movs	r1, #9
 810cf8c:	f7ff ff8e 	bl	810ceac <std>
 810cf90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810cf94:	2202      	movs	r2, #2
 810cf96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810cf9a:	2112      	movs	r1, #18
 810cf9c:	f7ff bf86 	b.w	810ceac <std>
 810cfa0:	10000784 	.word	0x10000784
 810cfa4:	1000064c 	.word	0x1000064c
 810cfa8:	0810cf19 	.word	0x0810cf19

0810cfac <__sfp_lock_acquire>:
 810cfac:	4801      	ldr	r0, [pc, #4]	@ (810cfb4 <__sfp_lock_acquire+0x8>)
 810cfae:	f000 ba24 	b.w	810d3fa <__retarget_lock_acquire_recursive>
 810cfb2:	bf00      	nop
 810cfb4:	1000078d 	.word	0x1000078d

0810cfb8 <__sfp_lock_release>:
 810cfb8:	4801      	ldr	r0, [pc, #4]	@ (810cfc0 <__sfp_lock_release+0x8>)
 810cfba:	f000 ba1f 	b.w	810d3fc <__retarget_lock_release_recursive>
 810cfbe:	bf00      	nop
 810cfc0:	1000078d 	.word	0x1000078d

0810cfc4 <__sinit>:
 810cfc4:	b510      	push	{r4, lr}
 810cfc6:	4604      	mov	r4, r0
 810cfc8:	f7ff fff0 	bl	810cfac <__sfp_lock_acquire>
 810cfcc:	6a23      	ldr	r3, [r4, #32]
 810cfce:	b11b      	cbz	r3, 810cfd8 <__sinit+0x14>
 810cfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810cfd4:	f7ff bff0 	b.w	810cfb8 <__sfp_lock_release>
 810cfd8:	4b04      	ldr	r3, [pc, #16]	@ (810cfec <__sinit+0x28>)
 810cfda:	6223      	str	r3, [r4, #32]
 810cfdc:	4b04      	ldr	r3, [pc, #16]	@ (810cff0 <__sinit+0x2c>)
 810cfde:	681b      	ldr	r3, [r3, #0]
 810cfe0:	2b00      	cmp	r3, #0
 810cfe2:	d1f5      	bne.n	810cfd0 <__sinit+0xc>
 810cfe4:	f7ff ffc4 	bl	810cf70 <global_stdio_init.part.0>
 810cfe8:	e7f2      	b.n	810cfd0 <__sinit+0xc>
 810cfea:	bf00      	nop
 810cfec:	0810cf31 	.word	0x0810cf31
 810cff0:	10000784 	.word	0x10000784

0810cff4 <_fwalk_sglue>:
 810cff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cff8:	4607      	mov	r7, r0
 810cffa:	4688      	mov	r8, r1
 810cffc:	4614      	mov	r4, r2
 810cffe:	2600      	movs	r6, #0
 810d000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810d004:	f1b9 0901 	subs.w	r9, r9, #1
 810d008:	d505      	bpl.n	810d016 <_fwalk_sglue+0x22>
 810d00a:	6824      	ldr	r4, [r4, #0]
 810d00c:	2c00      	cmp	r4, #0
 810d00e:	d1f7      	bne.n	810d000 <_fwalk_sglue+0xc>
 810d010:	4630      	mov	r0, r6
 810d012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d016:	89ab      	ldrh	r3, [r5, #12]
 810d018:	2b01      	cmp	r3, #1
 810d01a:	d907      	bls.n	810d02c <_fwalk_sglue+0x38>
 810d01c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810d020:	3301      	adds	r3, #1
 810d022:	d003      	beq.n	810d02c <_fwalk_sglue+0x38>
 810d024:	4629      	mov	r1, r5
 810d026:	4638      	mov	r0, r7
 810d028:	47c0      	blx	r8
 810d02a:	4306      	orrs	r6, r0
 810d02c:	3568      	adds	r5, #104	@ 0x68
 810d02e:	e7e9      	b.n	810d004 <_fwalk_sglue+0x10>

0810d030 <iprintf>:
 810d030:	b40f      	push	{r0, r1, r2, r3}
 810d032:	b507      	push	{r0, r1, r2, lr}
 810d034:	4906      	ldr	r1, [pc, #24]	@ (810d050 <iprintf+0x20>)
 810d036:	ab04      	add	r3, sp, #16
 810d038:	6808      	ldr	r0, [r1, #0]
 810d03a:	f853 2b04 	ldr.w	r2, [r3], #4
 810d03e:	6881      	ldr	r1, [r0, #8]
 810d040:	9301      	str	r3, [sp, #4]
 810d042:	f002 fdf5 	bl	810fc30 <_vfiprintf_r>
 810d046:	b003      	add	sp, #12
 810d048:	f85d eb04 	ldr.w	lr, [sp], #4
 810d04c:	b004      	add	sp, #16
 810d04e:	4770      	bx	lr
 810d050:	10000094 	.word	0x10000094

0810d054 <_puts_r>:
 810d054:	6a03      	ldr	r3, [r0, #32]
 810d056:	b570      	push	{r4, r5, r6, lr}
 810d058:	6884      	ldr	r4, [r0, #8]
 810d05a:	4605      	mov	r5, r0
 810d05c:	460e      	mov	r6, r1
 810d05e:	b90b      	cbnz	r3, 810d064 <_puts_r+0x10>
 810d060:	f7ff ffb0 	bl	810cfc4 <__sinit>
 810d064:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810d066:	07db      	lsls	r3, r3, #31
 810d068:	d405      	bmi.n	810d076 <_puts_r+0x22>
 810d06a:	89a3      	ldrh	r3, [r4, #12]
 810d06c:	0598      	lsls	r0, r3, #22
 810d06e:	d402      	bmi.n	810d076 <_puts_r+0x22>
 810d070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d072:	f000 f9c2 	bl	810d3fa <__retarget_lock_acquire_recursive>
 810d076:	89a3      	ldrh	r3, [r4, #12]
 810d078:	0719      	lsls	r1, r3, #28
 810d07a:	d502      	bpl.n	810d082 <_puts_r+0x2e>
 810d07c:	6923      	ldr	r3, [r4, #16]
 810d07e:	2b00      	cmp	r3, #0
 810d080:	d135      	bne.n	810d0ee <_puts_r+0x9a>
 810d082:	4621      	mov	r1, r4
 810d084:	4628      	mov	r0, r5
 810d086:	f000 f8e5 	bl	810d254 <__swsetup_r>
 810d08a:	b380      	cbz	r0, 810d0ee <_puts_r+0x9a>
 810d08c:	f04f 35ff 	mov.w	r5, #4294967295
 810d090:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810d092:	07da      	lsls	r2, r3, #31
 810d094:	d405      	bmi.n	810d0a2 <_puts_r+0x4e>
 810d096:	89a3      	ldrh	r3, [r4, #12]
 810d098:	059b      	lsls	r3, r3, #22
 810d09a:	d402      	bmi.n	810d0a2 <_puts_r+0x4e>
 810d09c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d09e:	f000 f9ad 	bl	810d3fc <__retarget_lock_release_recursive>
 810d0a2:	4628      	mov	r0, r5
 810d0a4:	bd70      	pop	{r4, r5, r6, pc}
 810d0a6:	2b00      	cmp	r3, #0
 810d0a8:	da04      	bge.n	810d0b4 <_puts_r+0x60>
 810d0aa:	69a2      	ldr	r2, [r4, #24]
 810d0ac:	429a      	cmp	r2, r3
 810d0ae:	dc17      	bgt.n	810d0e0 <_puts_r+0x8c>
 810d0b0:	290a      	cmp	r1, #10
 810d0b2:	d015      	beq.n	810d0e0 <_puts_r+0x8c>
 810d0b4:	6823      	ldr	r3, [r4, #0]
 810d0b6:	1c5a      	adds	r2, r3, #1
 810d0b8:	6022      	str	r2, [r4, #0]
 810d0ba:	7019      	strb	r1, [r3, #0]
 810d0bc:	68a3      	ldr	r3, [r4, #8]
 810d0be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810d0c2:	3b01      	subs	r3, #1
 810d0c4:	60a3      	str	r3, [r4, #8]
 810d0c6:	2900      	cmp	r1, #0
 810d0c8:	d1ed      	bne.n	810d0a6 <_puts_r+0x52>
 810d0ca:	2b00      	cmp	r3, #0
 810d0cc:	da11      	bge.n	810d0f2 <_puts_r+0x9e>
 810d0ce:	4622      	mov	r2, r4
 810d0d0:	210a      	movs	r1, #10
 810d0d2:	4628      	mov	r0, r5
 810d0d4:	f000 f87f 	bl	810d1d6 <__swbuf_r>
 810d0d8:	3001      	adds	r0, #1
 810d0da:	d0d7      	beq.n	810d08c <_puts_r+0x38>
 810d0dc:	250a      	movs	r5, #10
 810d0de:	e7d7      	b.n	810d090 <_puts_r+0x3c>
 810d0e0:	4622      	mov	r2, r4
 810d0e2:	4628      	mov	r0, r5
 810d0e4:	f000 f877 	bl	810d1d6 <__swbuf_r>
 810d0e8:	3001      	adds	r0, #1
 810d0ea:	d1e7      	bne.n	810d0bc <_puts_r+0x68>
 810d0ec:	e7ce      	b.n	810d08c <_puts_r+0x38>
 810d0ee:	3e01      	subs	r6, #1
 810d0f0:	e7e4      	b.n	810d0bc <_puts_r+0x68>
 810d0f2:	6823      	ldr	r3, [r4, #0]
 810d0f4:	1c5a      	adds	r2, r3, #1
 810d0f6:	6022      	str	r2, [r4, #0]
 810d0f8:	220a      	movs	r2, #10
 810d0fa:	701a      	strb	r2, [r3, #0]
 810d0fc:	e7ee      	b.n	810d0dc <_puts_r+0x88>
	...

0810d100 <puts>:
 810d100:	4b02      	ldr	r3, [pc, #8]	@ (810d10c <puts+0xc>)
 810d102:	4601      	mov	r1, r0
 810d104:	6818      	ldr	r0, [r3, #0]
 810d106:	f7ff bfa5 	b.w	810d054 <_puts_r>
 810d10a:	bf00      	nop
 810d10c:	10000094 	.word	0x10000094

0810d110 <siprintf>:
 810d110:	b40e      	push	{r1, r2, r3}
 810d112:	b500      	push	{lr}
 810d114:	b09c      	sub	sp, #112	@ 0x70
 810d116:	ab1d      	add	r3, sp, #116	@ 0x74
 810d118:	9002      	str	r0, [sp, #8]
 810d11a:	9006      	str	r0, [sp, #24]
 810d11c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810d120:	4809      	ldr	r0, [pc, #36]	@ (810d148 <siprintf+0x38>)
 810d122:	9107      	str	r1, [sp, #28]
 810d124:	9104      	str	r1, [sp, #16]
 810d126:	4909      	ldr	r1, [pc, #36]	@ (810d14c <siprintf+0x3c>)
 810d128:	f853 2b04 	ldr.w	r2, [r3], #4
 810d12c:	9105      	str	r1, [sp, #20]
 810d12e:	6800      	ldr	r0, [r0, #0]
 810d130:	9301      	str	r3, [sp, #4]
 810d132:	a902      	add	r1, sp, #8
 810d134:	f002 fc56 	bl	810f9e4 <_svfiprintf_r>
 810d138:	9b02      	ldr	r3, [sp, #8]
 810d13a:	2200      	movs	r2, #0
 810d13c:	701a      	strb	r2, [r3, #0]
 810d13e:	b01c      	add	sp, #112	@ 0x70
 810d140:	f85d eb04 	ldr.w	lr, [sp], #4
 810d144:	b003      	add	sp, #12
 810d146:	4770      	bx	lr
 810d148:	10000094 	.word	0x10000094
 810d14c:	ffff0208 	.word	0xffff0208

0810d150 <__sread>:
 810d150:	b510      	push	{r4, lr}
 810d152:	460c      	mov	r4, r1
 810d154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d158:	f000 f900 	bl	810d35c <_read_r>
 810d15c:	2800      	cmp	r0, #0
 810d15e:	bfab      	itete	ge
 810d160:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810d162:	89a3      	ldrhlt	r3, [r4, #12]
 810d164:	181b      	addge	r3, r3, r0
 810d166:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810d16a:	bfac      	ite	ge
 810d16c:	6563      	strge	r3, [r4, #84]	@ 0x54
 810d16e:	81a3      	strhlt	r3, [r4, #12]
 810d170:	bd10      	pop	{r4, pc}

0810d172 <__swrite>:
 810d172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d176:	461f      	mov	r7, r3
 810d178:	898b      	ldrh	r3, [r1, #12]
 810d17a:	05db      	lsls	r3, r3, #23
 810d17c:	4605      	mov	r5, r0
 810d17e:	460c      	mov	r4, r1
 810d180:	4616      	mov	r6, r2
 810d182:	d505      	bpl.n	810d190 <__swrite+0x1e>
 810d184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d188:	2302      	movs	r3, #2
 810d18a:	2200      	movs	r2, #0
 810d18c:	f000 f8d4 	bl	810d338 <_lseek_r>
 810d190:	89a3      	ldrh	r3, [r4, #12]
 810d192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810d19a:	81a3      	strh	r3, [r4, #12]
 810d19c:	4632      	mov	r2, r6
 810d19e:	463b      	mov	r3, r7
 810d1a0:	4628      	mov	r0, r5
 810d1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d1a6:	f000 b8eb 	b.w	810d380 <_write_r>

0810d1aa <__sseek>:
 810d1aa:	b510      	push	{r4, lr}
 810d1ac:	460c      	mov	r4, r1
 810d1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d1b2:	f000 f8c1 	bl	810d338 <_lseek_r>
 810d1b6:	1c43      	adds	r3, r0, #1
 810d1b8:	89a3      	ldrh	r3, [r4, #12]
 810d1ba:	bf15      	itete	ne
 810d1bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 810d1be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810d1c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810d1c6:	81a3      	strheq	r3, [r4, #12]
 810d1c8:	bf18      	it	ne
 810d1ca:	81a3      	strhne	r3, [r4, #12]
 810d1cc:	bd10      	pop	{r4, pc}

0810d1ce <__sclose>:
 810d1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d1d2:	f000 b8a1 	b.w	810d318 <_close_r>

0810d1d6 <__swbuf_r>:
 810d1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d1d8:	460e      	mov	r6, r1
 810d1da:	4614      	mov	r4, r2
 810d1dc:	4605      	mov	r5, r0
 810d1de:	b118      	cbz	r0, 810d1e8 <__swbuf_r+0x12>
 810d1e0:	6a03      	ldr	r3, [r0, #32]
 810d1e2:	b90b      	cbnz	r3, 810d1e8 <__swbuf_r+0x12>
 810d1e4:	f7ff feee 	bl	810cfc4 <__sinit>
 810d1e8:	69a3      	ldr	r3, [r4, #24]
 810d1ea:	60a3      	str	r3, [r4, #8]
 810d1ec:	89a3      	ldrh	r3, [r4, #12]
 810d1ee:	071a      	lsls	r2, r3, #28
 810d1f0:	d501      	bpl.n	810d1f6 <__swbuf_r+0x20>
 810d1f2:	6923      	ldr	r3, [r4, #16]
 810d1f4:	b943      	cbnz	r3, 810d208 <__swbuf_r+0x32>
 810d1f6:	4621      	mov	r1, r4
 810d1f8:	4628      	mov	r0, r5
 810d1fa:	f000 f82b 	bl	810d254 <__swsetup_r>
 810d1fe:	b118      	cbz	r0, 810d208 <__swbuf_r+0x32>
 810d200:	f04f 37ff 	mov.w	r7, #4294967295
 810d204:	4638      	mov	r0, r7
 810d206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d208:	6823      	ldr	r3, [r4, #0]
 810d20a:	6922      	ldr	r2, [r4, #16]
 810d20c:	1a98      	subs	r0, r3, r2
 810d20e:	6963      	ldr	r3, [r4, #20]
 810d210:	b2f6      	uxtb	r6, r6
 810d212:	4283      	cmp	r3, r0
 810d214:	4637      	mov	r7, r6
 810d216:	dc05      	bgt.n	810d224 <__swbuf_r+0x4e>
 810d218:	4621      	mov	r1, r4
 810d21a:	4628      	mov	r0, r5
 810d21c:	f002 fea4 	bl	810ff68 <_fflush_r>
 810d220:	2800      	cmp	r0, #0
 810d222:	d1ed      	bne.n	810d200 <__swbuf_r+0x2a>
 810d224:	68a3      	ldr	r3, [r4, #8]
 810d226:	3b01      	subs	r3, #1
 810d228:	60a3      	str	r3, [r4, #8]
 810d22a:	6823      	ldr	r3, [r4, #0]
 810d22c:	1c5a      	adds	r2, r3, #1
 810d22e:	6022      	str	r2, [r4, #0]
 810d230:	701e      	strb	r6, [r3, #0]
 810d232:	6962      	ldr	r2, [r4, #20]
 810d234:	1c43      	adds	r3, r0, #1
 810d236:	429a      	cmp	r2, r3
 810d238:	d004      	beq.n	810d244 <__swbuf_r+0x6e>
 810d23a:	89a3      	ldrh	r3, [r4, #12]
 810d23c:	07db      	lsls	r3, r3, #31
 810d23e:	d5e1      	bpl.n	810d204 <__swbuf_r+0x2e>
 810d240:	2e0a      	cmp	r6, #10
 810d242:	d1df      	bne.n	810d204 <__swbuf_r+0x2e>
 810d244:	4621      	mov	r1, r4
 810d246:	4628      	mov	r0, r5
 810d248:	f002 fe8e 	bl	810ff68 <_fflush_r>
 810d24c:	2800      	cmp	r0, #0
 810d24e:	d0d9      	beq.n	810d204 <__swbuf_r+0x2e>
 810d250:	e7d6      	b.n	810d200 <__swbuf_r+0x2a>
	...

0810d254 <__swsetup_r>:
 810d254:	b538      	push	{r3, r4, r5, lr}
 810d256:	4b29      	ldr	r3, [pc, #164]	@ (810d2fc <__swsetup_r+0xa8>)
 810d258:	4605      	mov	r5, r0
 810d25a:	6818      	ldr	r0, [r3, #0]
 810d25c:	460c      	mov	r4, r1
 810d25e:	b118      	cbz	r0, 810d268 <__swsetup_r+0x14>
 810d260:	6a03      	ldr	r3, [r0, #32]
 810d262:	b90b      	cbnz	r3, 810d268 <__swsetup_r+0x14>
 810d264:	f7ff feae 	bl	810cfc4 <__sinit>
 810d268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d26c:	0719      	lsls	r1, r3, #28
 810d26e:	d422      	bmi.n	810d2b6 <__swsetup_r+0x62>
 810d270:	06da      	lsls	r2, r3, #27
 810d272:	d407      	bmi.n	810d284 <__swsetup_r+0x30>
 810d274:	2209      	movs	r2, #9
 810d276:	602a      	str	r2, [r5, #0]
 810d278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d27c:	81a3      	strh	r3, [r4, #12]
 810d27e:	f04f 30ff 	mov.w	r0, #4294967295
 810d282:	e033      	b.n	810d2ec <__swsetup_r+0x98>
 810d284:	0758      	lsls	r0, r3, #29
 810d286:	d512      	bpl.n	810d2ae <__swsetup_r+0x5a>
 810d288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810d28a:	b141      	cbz	r1, 810d29e <__swsetup_r+0x4a>
 810d28c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810d290:	4299      	cmp	r1, r3
 810d292:	d002      	beq.n	810d29a <__swsetup_r+0x46>
 810d294:	4628      	mov	r0, r5
 810d296:	f000 ff13 	bl	810e0c0 <_free_r>
 810d29a:	2300      	movs	r3, #0
 810d29c:	6363      	str	r3, [r4, #52]	@ 0x34
 810d29e:	89a3      	ldrh	r3, [r4, #12]
 810d2a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810d2a4:	81a3      	strh	r3, [r4, #12]
 810d2a6:	2300      	movs	r3, #0
 810d2a8:	6063      	str	r3, [r4, #4]
 810d2aa:	6923      	ldr	r3, [r4, #16]
 810d2ac:	6023      	str	r3, [r4, #0]
 810d2ae:	89a3      	ldrh	r3, [r4, #12]
 810d2b0:	f043 0308 	orr.w	r3, r3, #8
 810d2b4:	81a3      	strh	r3, [r4, #12]
 810d2b6:	6923      	ldr	r3, [r4, #16]
 810d2b8:	b94b      	cbnz	r3, 810d2ce <__swsetup_r+0x7a>
 810d2ba:	89a3      	ldrh	r3, [r4, #12]
 810d2bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810d2c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810d2c4:	d003      	beq.n	810d2ce <__swsetup_r+0x7a>
 810d2c6:	4621      	mov	r1, r4
 810d2c8:	4628      	mov	r0, r5
 810d2ca:	f002 fe9b 	bl	8110004 <__smakebuf_r>
 810d2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d2d2:	f013 0201 	ands.w	r2, r3, #1
 810d2d6:	d00a      	beq.n	810d2ee <__swsetup_r+0x9a>
 810d2d8:	2200      	movs	r2, #0
 810d2da:	60a2      	str	r2, [r4, #8]
 810d2dc:	6962      	ldr	r2, [r4, #20]
 810d2de:	4252      	negs	r2, r2
 810d2e0:	61a2      	str	r2, [r4, #24]
 810d2e2:	6922      	ldr	r2, [r4, #16]
 810d2e4:	b942      	cbnz	r2, 810d2f8 <__swsetup_r+0xa4>
 810d2e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810d2ea:	d1c5      	bne.n	810d278 <__swsetup_r+0x24>
 810d2ec:	bd38      	pop	{r3, r4, r5, pc}
 810d2ee:	0799      	lsls	r1, r3, #30
 810d2f0:	bf58      	it	pl
 810d2f2:	6962      	ldrpl	r2, [r4, #20]
 810d2f4:	60a2      	str	r2, [r4, #8]
 810d2f6:	e7f4      	b.n	810d2e2 <__swsetup_r+0x8e>
 810d2f8:	2000      	movs	r0, #0
 810d2fa:	e7f7      	b.n	810d2ec <__swsetup_r+0x98>
 810d2fc:	10000094 	.word	0x10000094

0810d300 <memset>:
 810d300:	4402      	add	r2, r0
 810d302:	4603      	mov	r3, r0
 810d304:	4293      	cmp	r3, r2
 810d306:	d100      	bne.n	810d30a <memset+0xa>
 810d308:	4770      	bx	lr
 810d30a:	f803 1b01 	strb.w	r1, [r3], #1
 810d30e:	e7f9      	b.n	810d304 <memset+0x4>

0810d310 <_localeconv_r>:
 810d310:	4800      	ldr	r0, [pc, #0]	@ (810d314 <_localeconv_r+0x4>)
 810d312:	4770      	bx	lr
 810d314:	100001d4 	.word	0x100001d4

0810d318 <_close_r>:
 810d318:	b538      	push	{r3, r4, r5, lr}
 810d31a:	4d06      	ldr	r5, [pc, #24]	@ (810d334 <_close_r+0x1c>)
 810d31c:	2300      	movs	r3, #0
 810d31e:	4604      	mov	r4, r0
 810d320:	4608      	mov	r0, r1
 810d322:	602b      	str	r3, [r5, #0]
 810d324:	f7f5 ffe8 	bl	81032f8 <_close>
 810d328:	1c43      	adds	r3, r0, #1
 810d32a:	d102      	bne.n	810d332 <_close_r+0x1a>
 810d32c:	682b      	ldr	r3, [r5, #0]
 810d32e:	b103      	cbz	r3, 810d332 <_close_r+0x1a>
 810d330:	6023      	str	r3, [r4, #0]
 810d332:	bd38      	pop	{r3, r4, r5, pc}
 810d334:	10000788 	.word	0x10000788

0810d338 <_lseek_r>:
 810d338:	b538      	push	{r3, r4, r5, lr}
 810d33a:	4d07      	ldr	r5, [pc, #28]	@ (810d358 <_lseek_r+0x20>)
 810d33c:	4604      	mov	r4, r0
 810d33e:	4608      	mov	r0, r1
 810d340:	4611      	mov	r1, r2
 810d342:	2200      	movs	r2, #0
 810d344:	602a      	str	r2, [r5, #0]
 810d346:	461a      	mov	r2, r3
 810d348:	f7f5 fffd 	bl	8103346 <_lseek>
 810d34c:	1c43      	adds	r3, r0, #1
 810d34e:	d102      	bne.n	810d356 <_lseek_r+0x1e>
 810d350:	682b      	ldr	r3, [r5, #0]
 810d352:	b103      	cbz	r3, 810d356 <_lseek_r+0x1e>
 810d354:	6023      	str	r3, [r4, #0]
 810d356:	bd38      	pop	{r3, r4, r5, pc}
 810d358:	10000788 	.word	0x10000788

0810d35c <_read_r>:
 810d35c:	b538      	push	{r3, r4, r5, lr}
 810d35e:	4d07      	ldr	r5, [pc, #28]	@ (810d37c <_read_r+0x20>)
 810d360:	4604      	mov	r4, r0
 810d362:	4608      	mov	r0, r1
 810d364:	4611      	mov	r1, r2
 810d366:	2200      	movs	r2, #0
 810d368:	602a      	str	r2, [r5, #0]
 810d36a:	461a      	mov	r2, r3
 810d36c:	f7f5 ff89 	bl	8103282 <_read>
 810d370:	1c43      	adds	r3, r0, #1
 810d372:	d102      	bne.n	810d37a <_read_r+0x1e>
 810d374:	682b      	ldr	r3, [r5, #0]
 810d376:	b103      	cbz	r3, 810d37a <_read_r+0x1e>
 810d378:	6023      	str	r3, [r4, #0]
 810d37a:	bd38      	pop	{r3, r4, r5, pc}
 810d37c:	10000788 	.word	0x10000788

0810d380 <_write_r>:
 810d380:	b538      	push	{r3, r4, r5, lr}
 810d382:	4d07      	ldr	r5, [pc, #28]	@ (810d3a0 <_write_r+0x20>)
 810d384:	4604      	mov	r4, r0
 810d386:	4608      	mov	r0, r1
 810d388:	4611      	mov	r1, r2
 810d38a:	2200      	movs	r2, #0
 810d38c:	602a      	str	r2, [r5, #0]
 810d38e:	461a      	mov	r2, r3
 810d390:	f7f5 ff96 	bl	81032c0 <_write>
 810d394:	1c43      	adds	r3, r0, #1
 810d396:	d102      	bne.n	810d39e <_write_r+0x1e>
 810d398:	682b      	ldr	r3, [r5, #0]
 810d39a:	b103      	cbz	r3, 810d39e <_write_r+0x1e>
 810d39c:	6023      	str	r3, [r4, #0]
 810d39e:	bd38      	pop	{r3, r4, r5, pc}
 810d3a0:	10000788 	.word	0x10000788

0810d3a4 <__errno>:
 810d3a4:	4b01      	ldr	r3, [pc, #4]	@ (810d3ac <__errno+0x8>)
 810d3a6:	6818      	ldr	r0, [r3, #0]
 810d3a8:	4770      	bx	lr
 810d3aa:	bf00      	nop
 810d3ac:	10000094 	.word	0x10000094

0810d3b0 <__libc_init_array>:
 810d3b0:	b570      	push	{r4, r5, r6, lr}
 810d3b2:	4d0d      	ldr	r5, [pc, #52]	@ (810d3e8 <__libc_init_array+0x38>)
 810d3b4:	4c0d      	ldr	r4, [pc, #52]	@ (810d3ec <__libc_init_array+0x3c>)
 810d3b6:	1b64      	subs	r4, r4, r5
 810d3b8:	10a4      	asrs	r4, r4, #2
 810d3ba:	2600      	movs	r6, #0
 810d3bc:	42a6      	cmp	r6, r4
 810d3be:	d109      	bne.n	810d3d4 <__libc_init_array+0x24>
 810d3c0:	4d0b      	ldr	r5, [pc, #44]	@ (810d3f0 <__libc_init_array+0x40>)
 810d3c2:	4c0c      	ldr	r4, [pc, #48]	@ (810d3f4 <__libc_init_array+0x44>)
 810d3c4:	f004 fb10 	bl	81119e8 <_init>
 810d3c8:	1b64      	subs	r4, r4, r5
 810d3ca:	10a4      	asrs	r4, r4, #2
 810d3cc:	2600      	movs	r6, #0
 810d3ce:	42a6      	cmp	r6, r4
 810d3d0:	d105      	bne.n	810d3de <__libc_init_array+0x2e>
 810d3d2:	bd70      	pop	{r4, r5, r6, pc}
 810d3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 810d3d8:	4798      	blx	r3
 810d3da:	3601      	adds	r6, #1
 810d3dc:	e7ee      	b.n	810d3bc <__libc_init_array+0xc>
 810d3de:	f855 3b04 	ldr.w	r3, [r5], #4
 810d3e2:	4798      	blx	r3
 810d3e4:	3601      	adds	r6, #1
 810d3e6:	e7f2      	b.n	810d3ce <__libc_init_array+0x1e>
 810d3e8:	08112628 	.word	0x08112628
 810d3ec:	08112628 	.word	0x08112628
 810d3f0:	08112628 	.word	0x08112628
 810d3f4:	0811262c 	.word	0x0811262c

0810d3f8 <__retarget_lock_init_recursive>:
 810d3f8:	4770      	bx	lr

0810d3fa <__retarget_lock_acquire_recursive>:
 810d3fa:	4770      	bx	lr

0810d3fc <__retarget_lock_release_recursive>:
 810d3fc:	4770      	bx	lr

0810d3fe <memcpy>:
 810d3fe:	440a      	add	r2, r1
 810d400:	4291      	cmp	r1, r2
 810d402:	f100 33ff 	add.w	r3, r0, #4294967295
 810d406:	d100      	bne.n	810d40a <memcpy+0xc>
 810d408:	4770      	bx	lr
 810d40a:	b510      	push	{r4, lr}
 810d40c:	f811 4b01 	ldrb.w	r4, [r1], #1
 810d410:	f803 4f01 	strb.w	r4, [r3, #1]!
 810d414:	4291      	cmp	r1, r2
 810d416:	d1f9      	bne.n	810d40c <memcpy+0xe>
 810d418:	bd10      	pop	{r4, pc}
	...

0810d41c <nanf>:
 810d41c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810d424 <nanf+0x8>
 810d420:	4770      	bx	lr
 810d422:	bf00      	nop
 810d424:	7fc00000 	.word	0x7fc00000

0810d428 <quorem>:
 810d428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d42c:	6903      	ldr	r3, [r0, #16]
 810d42e:	690c      	ldr	r4, [r1, #16]
 810d430:	42a3      	cmp	r3, r4
 810d432:	4607      	mov	r7, r0
 810d434:	db7e      	blt.n	810d534 <quorem+0x10c>
 810d436:	3c01      	subs	r4, #1
 810d438:	f101 0814 	add.w	r8, r1, #20
 810d43c:	00a3      	lsls	r3, r4, #2
 810d43e:	f100 0514 	add.w	r5, r0, #20
 810d442:	9300      	str	r3, [sp, #0]
 810d444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810d448:	9301      	str	r3, [sp, #4]
 810d44a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810d44e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810d452:	3301      	adds	r3, #1
 810d454:	429a      	cmp	r2, r3
 810d456:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810d45a:	fbb2 f6f3 	udiv	r6, r2, r3
 810d45e:	d32e      	bcc.n	810d4be <quorem+0x96>
 810d460:	f04f 0a00 	mov.w	sl, #0
 810d464:	46c4      	mov	ip, r8
 810d466:	46ae      	mov	lr, r5
 810d468:	46d3      	mov	fp, sl
 810d46a:	f85c 3b04 	ldr.w	r3, [ip], #4
 810d46e:	b298      	uxth	r0, r3
 810d470:	fb06 a000 	mla	r0, r6, r0, sl
 810d474:	0c02      	lsrs	r2, r0, #16
 810d476:	0c1b      	lsrs	r3, r3, #16
 810d478:	fb06 2303 	mla	r3, r6, r3, r2
 810d47c:	f8de 2000 	ldr.w	r2, [lr]
 810d480:	b280      	uxth	r0, r0
 810d482:	b292      	uxth	r2, r2
 810d484:	1a12      	subs	r2, r2, r0
 810d486:	445a      	add	r2, fp
 810d488:	f8de 0000 	ldr.w	r0, [lr]
 810d48c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810d490:	b29b      	uxth	r3, r3
 810d492:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810d496:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810d49a:	b292      	uxth	r2, r2
 810d49c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810d4a0:	45e1      	cmp	r9, ip
 810d4a2:	f84e 2b04 	str.w	r2, [lr], #4
 810d4a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810d4aa:	d2de      	bcs.n	810d46a <quorem+0x42>
 810d4ac:	9b00      	ldr	r3, [sp, #0]
 810d4ae:	58eb      	ldr	r3, [r5, r3]
 810d4b0:	b92b      	cbnz	r3, 810d4be <quorem+0x96>
 810d4b2:	9b01      	ldr	r3, [sp, #4]
 810d4b4:	3b04      	subs	r3, #4
 810d4b6:	429d      	cmp	r5, r3
 810d4b8:	461a      	mov	r2, r3
 810d4ba:	d32f      	bcc.n	810d51c <quorem+0xf4>
 810d4bc:	613c      	str	r4, [r7, #16]
 810d4be:	4638      	mov	r0, r7
 810d4c0:	f001 f9c2 	bl	810e848 <__mcmp>
 810d4c4:	2800      	cmp	r0, #0
 810d4c6:	db25      	blt.n	810d514 <quorem+0xec>
 810d4c8:	4629      	mov	r1, r5
 810d4ca:	2000      	movs	r0, #0
 810d4cc:	f858 2b04 	ldr.w	r2, [r8], #4
 810d4d0:	f8d1 c000 	ldr.w	ip, [r1]
 810d4d4:	fa1f fe82 	uxth.w	lr, r2
 810d4d8:	fa1f f38c 	uxth.w	r3, ip
 810d4dc:	eba3 030e 	sub.w	r3, r3, lr
 810d4e0:	4403      	add	r3, r0
 810d4e2:	0c12      	lsrs	r2, r2, #16
 810d4e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810d4e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810d4ec:	b29b      	uxth	r3, r3
 810d4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810d4f2:	45c1      	cmp	r9, r8
 810d4f4:	f841 3b04 	str.w	r3, [r1], #4
 810d4f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 810d4fc:	d2e6      	bcs.n	810d4cc <quorem+0xa4>
 810d4fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810d502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810d506:	b922      	cbnz	r2, 810d512 <quorem+0xea>
 810d508:	3b04      	subs	r3, #4
 810d50a:	429d      	cmp	r5, r3
 810d50c:	461a      	mov	r2, r3
 810d50e:	d30b      	bcc.n	810d528 <quorem+0x100>
 810d510:	613c      	str	r4, [r7, #16]
 810d512:	3601      	adds	r6, #1
 810d514:	4630      	mov	r0, r6
 810d516:	b003      	add	sp, #12
 810d518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d51c:	6812      	ldr	r2, [r2, #0]
 810d51e:	3b04      	subs	r3, #4
 810d520:	2a00      	cmp	r2, #0
 810d522:	d1cb      	bne.n	810d4bc <quorem+0x94>
 810d524:	3c01      	subs	r4, #1
 810d526:	e7c6      	b.n	810d4b6 <quorem+0x8e>
 810d528:	6812      	ldr	r2, [r2, #0]
 810d52a:	3b04      	subs	r3, #4
 810d52c:	2a00      	cmp	r2, #0
 810d52e:	d1ef      	bne.n	810d510 <quorem+0xe8>
 810d530:	3c01      	subs	r4, #1
 810d532:	e7ea      	b.n	810d50a <quorem+0xe2>
 810d534:	2000      	movs	r0, #0
 810d536:	e7ee      	b.n	810d516 <quorem+0xee>

0810d538 <_dtoa_r>:
 810d538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d53c:	69c7      	ldr	r7, [r0, #28]
 810d53e:	b099      	sub	sp, #100	@ 0x64
 810d540:	ed8d 0b02 	vstr	d0, [sp, #8]
 810d544:	ec55 4b10 	vmov	r4, r5, d0
 810d548:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810d54a:	9109      	str	r1, [sp, #36]	@ 0x24
 810d54c:	4683      	mov	fp, r0
 810d54e:	920e      	str	r2, [sp, #56]	@ 0x38
 810d550:	9313      	str	r3, [sp, #76]	@ 0x4c
 810d552:	b97f      	cbnz	r7, 810d574 <_dtoa_r+0x3c>
 810d554:	2010      	movs	r0, #16
 810d556:	f000 fdfd 	bl	810e154 <malloc>
 810d55a:	4602      	mov	r2, r0
 810d55c:	f8cb 001c 	str.w	r0, [fp, #28]
 810d560:	b920      	cbnz	r0, 810d56c <_dtoa_r+0x34>
 810d562:	4ba7      	ldr	r3, [pc, #668]	@ (810d800 <_dtoa_r+0x2c8>)
 810d564:	21ef      	movs	r1, #239	@ 0xef
 810d566:	48a7      	ldr	r0, [pc, #668]	@ (810d804 <_dtoa_r+0x2cc>)
 810d568:	f002 fdee 	bl	8110148 <__assert_func>
 810d56c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810d570:	6007      	str	r7, [r0, #0]
 810d572:	60c7      	str	r7, [r0, #12]
 810d574:	f8db 301c 	ldr.w	r3, [fp, #28]
 810d578:	6819      	ldr	r1, [r3, #0]
 810d57a:	b159      	cbz	r1, 810d594 <_dtoa_r+0x5c>
 810d57c:	685a      	ldr	r2, [r3, #4]
 810d57e:	604a      	str	r2, [r1, #4]
 810d580:	2301      	movs	r3, #1
 810d582:	4093      	lsls	r3, r2
 810d584:	608b      	str	r3, [r1, #8]
 810d586:	4658      	mov	r0, fp
 810d588:	f000 feda 	bl	810e340 <_Bfree>
 810d58c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810d590:	2200      	movs	r2, #0
 810d592:	601a      	str	r2, [r3, #0]
 810d594:	1e2b      	subs	r3, r5, #0
 810d596:	bfb9      	ittee	lt
 810d598:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810d59c:	9303      	strlt	r3, [sp, #12]
 810d59e:	2300      	movge	r3, #0
 810d5a0:	6033      	strge	r3, [r6, #0]
 810d5a2:	9f03      	ldr	r7, [sp, #12]
 810d5a4:	4b98      	ldr	r3, [pc, #608]	@ (810d808 <_dtoa_r+0x2d0>)
 810d5a6:	bfbc      	itt	lt
 810d5a8:	2201      	movlt	r2, #1
 810d5aa:	6032      	strlt	r2, [r6, #0]
 810d5ac:	43bb      	bics	r3, r7
 810d5ae:	d112      	bne.n	810d5d6 <_dtoa_r+0x9e>
 810d5b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810d5b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 810d5b6:	6013      	str	r3, [r2, #0]
 810d5b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810d5bc:	4323      	orrs	r3, r4
 810d5be:	f000 854d 	beq.w	810e05c <_dtoa_r+0xb24>
 810d5c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810d5c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810d81c <_dtoa_r+0x2e4>
 810d5c8:	2b00      	cmp	r3, #0
 810d5ca:	f000 854f 	beq.w	810e06c <_dtoa_r+0xb34>
 810d5ce:	f10a 0303 	add.w	r3, sl, #3
 810d5d2:	f000 bd49 	b.w	810e068 <_dtoa_r+0xb30>
 810d5d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 810d5da:	2200      	movs	r2, #0
 810d5dc:	ec51 0b17 	vmov	r0, r1, d7
 810d5e0:	2300      	movs	r3, #0
 810d5e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810d5e6:	f7f3 faf7 	bl	8100bd8 <__aeabi_dcmpeq>
 810d5ea:	4680      	mov	r8, r0
 810d5ec:	b158      	cbz	r0, 810d606 <_dtoa_r+0xce>
 810d5ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810d5f0:	2301      	movs	r3, #1
 810d5f2:	6013      	str	r3, [r2, #0]
 810d5f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810d5f6:	b113      	cbz	r3, 810d5fe <_dtoa_r+0xc6>
 810d5f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810d5fa:	4b84      	ldr	r3, [pc, #528]	@ (810d80c <_dtoa_r+0x2d4>)
 810d5fc:	6013      	str	r3, [r2, #0]
 810d5fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810d820 <_dtoa_r+0x2e8>
 810d602:	f000 bd33 	b.w	810e06c <_dtoa_r+0xb34>
 810d606:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810d60a:	aa16      	add	r2, sp, #88	@ 0x58
 810d60c:	a917      	add	r1, sp, #92	@ 0x5c
 810d60e:	4658      	mov	r0, fp
 810d610:	f001 fa3a 	bl	810ea88 <__d2b>
 810d614:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810d618:	4681      	mov	r9, r0
 810d61a:	2e00      	cmp	r6, #0
 810d61c:	d077      	beq.n	810d70e <_dtoa_r+0x1d6>
 810d61e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810d620:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810d624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810d628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d62c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810d630:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810d634:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810d638:	4619      	mov	r1, r3
 810d63a:	2200      	movs	r2, #0
 810d63c:	4b74      	ldr	r3, [pc, #464]	@ (810d810 <_dtoa_r+0x2d8>)
 810d63e:	f7f2 feab 	bl	8100398 <__aeabi_dsub>
 810d642:	a369      	add	r3, pc, #420	@ (adr r3, 810d7e8 <_dtoa_r+0x2b0>)
 810d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d648:	f7f3 f85e 	bl	8100708 <__aeabi_dmul>
 810d64c:	a368      	add	r3, pc, #416	@ (adr r3, 810d7f0 <_dtoa_r+0x2b8>)
 810d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d652:	f7f2 fea3 	bl	810039c <__adddf3>
 810d656:	4604      	mov	r4, r0
 810d658:	4630      	mov	r0, r6
 810d65a:	460d      	mov	r5, r1
 810d65c:	f7f2 ffea 	bl	8100634 <__aeabi_i2d>
 810d660:	a365      	add	r3, pc, #404	@ (adr r3, 810d7f8 <_dtoa_r+0x2c0>)
 810d662:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d666:	f7f3 f84f 	bl	8100708 <__aeabi_dmul>
 810d66a:	4602      	mov	r2, r0
 810d66c:	460b      	mov	r3, r1
 810d66e:	4620      	mov	r0, r4
 810d670:	4629      	mov	r1, r5
 810d672:	f7f2 fe93 	bl	810039c <__adddf3>
 810d676:	4604      	mov	r4, r0
 810d678:	460d      	mov	r5, r1
 810d67a:	f7f3 faf5 	bl	8100c68 <__aeabi_d2iz>
 810d67e:	2200      	movs	r2, #0
 810d680:	4607      	mov	r7, r0
 810d682:	2300      	movs	r3, #0
 810d684:	4620      	mov	r0, r4
 810d686:	4629      	mov	r1, r5
 810d688:	f7f3 fab0 	bl	8100bec <__aeabi_dcmplt>
 810d68c:	b140      	cbz	r0, 810d6a0 <_dtoa_r+0x168>
 810d68e:	4638      	mov	r0, r7
 810d690:	f7f2 ffd0 	bl	8100634 <__aeabi_i2d>
 810d694:	4622      	mov	r2, r4
 810d696:	462b      	mov	r3, r5
 810d698:	f7f3 fa9e 	bl	8100bd8 <__aeabi_dcmpeq>
 810d69c:	b900      	cbnz	r0, 810d6a0 <_dtoa_r+0x168>
 810d69e:	3f01      	subs	r7, #1
 810d6a0:	2f16      	cmp	r7, #22
 810d6a2:	d851      	bhi.n	810d748 <_dtoa_r+0x210>
 810d6a4:	4b5b      	ldr	r3, [pc, #364]	@ (810d814 <_dtoa_r+0x2dc>)
 810d6a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d6b2:	f7f3 fa9b 	bl	8100bec <__aeabi_dcmplt>
 810d6b6:	2800      	cmp	r0, #0
 810d6b8:	d048      	beq.n	810d74c <_dtoa_r+0x214>
 810d6ba:	3f01      	subs	r7, #1
 810d6bc:	2300      	movs	r3, #0
 810d6be:	9312      	str	r3, [sp, #72]	@ 0x48
 810d6c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810d6c2:	1b9b      	subs	r3, r3, r6
 810d6c4:	1e5a      	subs	r2, r3, #1
 810d6c6:	bf44      	itt	mi
 810d6c8:	f1c3 0801 	rsbmi	r8, r3, #1
 810d6cc:	2300      	movmi	r3, #0
 810d6ce:	9208      	str	r2, [sp, #32]
 810d6d0:	bf54      	ite	pl
 810d6d2:	f04f 0800 	movpl.w	r8, #0
 810d6d6:	9308      	strmi	r3, [sp, #32]
 810d6d8:	2f00      	cmp	r7, #0
 810d6da:	db39      	blt.n	810d750 <_dtoa_r+0x218>
 810d6dc:	9b08      	ldr	r3, [sp, #32]
 810d6de:	970f      	str	r7, [sp, #60]	@ 0x3c
 810d6e0:	443b      	add	r3, r7
 810d6e2:	9308      	str	r3, [sp, #32]
 810d6e4:	2300      	movs	r3, #0
 810d6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 810d6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d6ea:	2b09      	cmp	r3, #9
 810d6ec:	d864      	bhi.n	810d7b8 <_dtoa_r+0x280>
 810d6ee:	2b05      	cmp	r3, #5
 810d6f0:	bfc4      	itt	gt
 810d6f2:	3b04      	subgt	r3, #4
 810d6f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810d6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d6f8:	f1a3 0302 	sub.w	r3, r3, #2
 810d6fc:	bfcc      	ite	gt
 810d6fe:	2400      	movgt	r4, #0
 810d700:	2401      	movle	r4, #1
 810d702:	2b03      	cmp	r3, #3
 810d704:	d863      	bhi.n	810d7ce <_dtoa_r+0x296>
 810d706:	e8df f003 	tbb	[pc, r3]
 810d70a:	372a      	.short	0x372a
 810d70c:	5535      	.short	0x5535
 810d70e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810d712:	441e      	add	r6, r3
 810d714:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810d718:	2b20      	cmp	r3, #32
 810d71a:	bfc1      	itttt	gt
 810d71c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810d720:	409f      	lslgt	r7, r3
 810d722:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810d726:	fa24 f303 	lsrgt.w	r3, r4, r3
 810d72a:	bfd6      	itet	le
 810d72c:	f1c3 0320 	rsble	r3, r3, #32
 810d730:	ea47 0003 	orrgt.w	r0, r7, r3
 810d734:	fa04 f003 	lslle.w	r0, r4, r3
 810d738:	f7f2 ff6c 	bl	8100614 <__aeabi_ui2d>
 810d73c:	2201      	movs	r2, #1
 810d73e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810d742:	3e01      	subs	r6, #1
 810d744:	9214      	str	r2, [sp, #80]	@ 0x50
 810d746:	e777      	b.n	810d638 <_dtoa_r+0x100>
 810d748:	2301      	movs	r3, #1
 810d74a:	e7b8      	b.n	810d6be <_dtoa_r+0x186>
 810d74c:	9012      	str	r0, [sp, #72]	@ 0x48
 810d74e:	e7b7      	b.n	810d6c0 <_dtoa_r+0x188>
 810d750:	427b      	negs	r3, r7
 810d752:	930a      	str	r3, [sp, #40]	@ 0x28
 810d754:	2300      	movs	r3, #0
 810d756:	eba8 0807 	sub.w	r8, r8, r7
 810d75a:	930f      	str	r3, [sp, #60]	@ 0x3c
 810d75c:	e7c4      	b.n	810d6e8 <_dtoa_r+0x1b0>
 810d75e:	2300      	movs	r3, #0
 810d760:	930b      	str	r3, [sp, #44]	@ 0x2c
 810d762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d764:	2b00      	cmp	r3, #0
 810d766:	dc35      	bgt.n	810d7d4 <_dtoa_r+0x29c>
 810d768:	2301      	movs	r3, #1
 810d76a:	9300      	str	r3, [sp, #0]
 810d76c:	9307      	str	r3, [sp, #28]
 810d76e:	461a      	mov	r2, r3
 810d770:	920e      	str	r2, [sp, #56]	@ 0x38
 810d772:	e00b      	b.n	810d78c <_dtoa_r+0x254>
 810d774:	2301      	movs	r3, #1
 810d776:	e7f3      	b.n	810d760 <_dtoa_r+0x228>
 810d778:	2300      	movs	r3, #0
 810d77a:	930b      	str	r3, [sp, #44]	@ 0x2c
 810d77c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d77e:	18fb      	adds	r3, r7, r3
 810d780:	9300      	str	r3, [sp, #0]
 810d782:	3301      	adds	r3, #1
 810d784:	2b01      	cmp	r3, #1
 810d786:	9307      	str	r3, [sp, #28]
 810d788:	bfb8      	it	lt
 810d78a:	2301      	movlt	r3, #1
 810d78c:	f8db 001c 	ldr.w	r0, [fp, #28]
 810d790:	2100      	movs	r1, #0
 810d792:	2204      	movs	r2, #4
 810d794:	f102 0514 	add.w	r5, r2, #20
 810d798:	429d      	cmp	r5, r3
 810d79a:	d91f      	bls.n	810d7dc <_dtoa_r+0x2a4>
 810d79c:	6041      	str	r1, [r0, #4]
 810d79e:	4658      	mov	r0, fp
 810d7a0:	f000 fd8e 	bl	810e2c0 <_Balloc>
 810d7a4:	4682      	mov	sl, r0
 810d7a6:	2800      	cmp	r0, #0
 810d7a8:	d13c      	bne.n	810d824 <_dtoa_r+0x2ec>
 810d7aa:	4b1b      	ldr	r3, [pc, #108]	@ (810d818 <_dtoa_r+0x2e0>)
 810d7ac:	4602      	mov	r2, r0
 810d7ae:	f240 11af 	movw	r1, #431	@ 0x1af
 810d7b2:	e6d8      	b.n	810d566 <_dtoa_r+0x2e>
 810d7b4:	2301      	movs	r3, #1
 810d7b6:	e7e0      	b.n	810d77a <_dtoa_r+0x242>
 810d7b8:	2401      	movs	r4, #1
 810d7ba:	2300      	movs	r3, #0
 810d7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 810d7be:	940b      	str	r4, [sp, #44]	@ 0x2c
 810d7c0:	f04f 33ff 	mov.w	r3, #4294967295
 810d7c4:	9300      	str	r3, [sp, #0]
 810d7c6:	9307      	str	r3, [sp, #28]
 810d7c8:	2200      	movs	r2, #0
 810d7ca:	2312      	movs	r3, #18
 810d7cc:	e7d0      	b.n	810d770 <_dtoa_r+0x238>
 810d7ce:	2301      	movs	r3, #1
 810d7d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810d7d2:	e7f5      	b.n	810d7c0 <_dtoa_r+0x288>
 810d7d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d7d6:	9300      	str	r3, [sp, #0]
 810d7d8:	9307      	str	r3, [sp, #28]
 810d7da:	e7d7      	b.n	810d78c <_dtoa_r+0x254>
 810d7dc:	3101      	adds	r1, #1
 810d7de:	0052      	lsls	r2, r2, #1
 810d7e0:	e7d8      	b.n	810d794 <_dtoa_r+0x25c>
 810d7e2:	bf00      	nop
 810d7e4:	f3af 8000 	nop.w
 810d7e8:	636f4361 	.word	0x636f4361
 810d7ec:	3fd287a7 	.word	0x3fd287a7
 810d7f0:	8b60c8b3 	.word	0x8b60c8b3
 810d7f4:	3fc68a28 	.word	0x3fc68a28
 810d7f8:	509f79fb 	.word	0x509f79fb
 810d7fc:	3fd34413 	.word	0x3fd34413
 810d800:	0811205e 	.word	0x0811205e
 810d804:	08112075 	.word	0x08112075
 810d808:	7ff00000 	.word	0x7ff00000
 810d80c:	08112029 	.word	0x08112029
 810d810:	3ff80000 	.word	0x3ff80000
 810d814:	08112170 	.word	0x08112170
 810d818:	081120cd 	.word	0x081120cd
 810d81c:	0811205a 	.word	0x0811205a
 810d820:	08112028 	.word	0x08112028
 810d824:	f8db 301c 	ldr.w	r3, [fp, #28]
 810d828:	6018      	str	r0, [r3, #0]
 810d82a:	9b07      	ldr	r3, [sp, #28]
 810d82c:	2b0e      	cmp	r3, #14
 810d82e:	f200 80a4 	bhi.w	810d97a <_dtoa_r+0x442>
 810d832:	2c00      	cmp	r4, #0
 810d834:	f000 80a1 	beq.w	810d97a <_dtoa_r+0x442>
 810d838:	2f00      	cmp	r7, #0
 810d83a:	dd33      	ble.n	810d8a4 <_dtoa_r+0x36c>
 810d83c:	4bad      	ldr	r3, [pc, #692]	@ (810daf4 <_dtoa_r+0x5bc>)
 810d83e:	f007 020f 	and.w	r2, r7, #15
 810d842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d846:	ed93 7b00 	vldr	d7, [r3]
 810d84a:	05f8      	lsls	r0, r7, #23
 810d84c:	ed8d 7b04 	vstr	d7, [sp, #16]
 810d850:	ea4f 1427 	mov.w	r4, r7, asr #4
 810d854:	d516      	bpl.n	810d884 <_dtoa_r+0x34c>
 810d856:	4ba8      	ldr	r3, [pc, #672]	@ (810daf8 <_dtoa_r+0x5c0>)
 810d858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d85c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810d860:	f7f3 f87c 	bl	810095c <__aeabi_ddiv>
 810d864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d868:	f004 040f 	and.w	r4, r4, #15
 810d86c:	2603      	movs	r6, #3
 810d86e:	4da2      	ldr	r5, [pc, #648]	@ (810daf8 <_dtoa_r+0x5c0>)
 810d870:	b954      	cbnz	r4, 810d888 <_dtoa_r+0x350>
 810d872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d87a:	f7f3 f86f 	bl	810095c <__aeabi_ddiv>
 810d87e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d882:	e028      	b.n	810d8d6 <_dtoa_r+0x39e>
 810d884:	2602      	movs	r6, #2
 810d886:	e7f2      	b.n	810d86e <_dtoa_r+0x336>
 810d888:	07e1      	lsls	r1, r4, #31
 810d88a:	d508      	bpl.n	810d89e <_dtoa_r+0x366>
 810d88c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810d890:	e9d5 2300 	ldrd	r2, r3, [r5]
 810d894:	f7f2 ff38 	bl	8100708 <__aeabi_dmul>
 810d898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810d89c:	3601      	adds	r6, #1
 810d89e:	1064      	asrs	r4, r4, #1
 810d8a0:	3508      	adds	r5, #8
 810d8a2:	e7e5      	b.n	810d870 <_dtoa_r+0x338>
 810d8a4:	f000 80d2 	beq.w	810da4c <_dtoa_r+0x514>
 810d8a8:	427c      	negs	r4, r7
 810d8aa:	4b92      	ldr	r3, [pc, #584]	@ (810daf4 <_dtoa_r+0x5bc>)
 810d8ac:	4d92      	ldr	r5, [pc, #584]	@ (810daf8 <_dtoa_r+0x5c0>)
 810d8ae:	f004 020f 	and.w	r2, r4, #15
 810d8b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d8ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d8be:	f7f2 ff23 	bl	8100708 <__aeabi_dmul>
 810d8c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d8c6:	1124      	asrs	r4, r4, #4
 810d8c8:	2300      	movs	r3, #0
 810d8ca:	2602      	movs	r6, #2
 810d8cc:	2c00      	cmp	r4, #0
 810d8ce:	f040 80b2 	bne.w	810da36 <_dtoa_r+0x4fe>
 810d8d2:	2b00      	cmp	r3, #0
 810d8d4:	d1d3      	bne.n	810d87e <_dtoa_r+0x346>
 810d8d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810d8d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810d8dc:	2b00      	cmp	r3, #0
 810d8de:	f000 80b7 	beq.w	810da50 <_dtoa_r+0x518>
 810d8e2:	4b86      	ldr	r3, [pc, #536]	@ (810dafc <_dtoa_r+0x5c4>)
 810d8e4:	2200      	movs	r2, #0
 810d8e6:	4620      	mov	r0, r4
 810d8e8:	4629      	mov	r1, r5
 810d8ea:	f7f3 f97f 	bl	8100bec <__aeabi_dcmplt>
 810d8ee:	2800      	cmp	r0, #0
 810d8f0:	f000 80ae 	beq.w	810da50 <_dtoa_r+0x518>
 810d8f4:	9b07      	ldr	r3, [sp, #28]
 810d8f6:	2b00      	cmp	r3, #0
 810d8f8:	f000 80aa 	beq.w	810da50 <_dtoa_r+0x518>
 810d8fc:	9b00      	ldr	r3, [sp, #0]
 810d8fe:	2b00      	cmp	r3, #0
 810d900:	dd37      	ble.n	810d972 <_dtoa_r+0x43a>
 810d902:	1e7b      	subs	r3, r7, #1
 810d904:	9304      	str	r3, [sp, #16]
 810d906:	4620      	mov	r0, r4
 810d908:	4b7d      	ldr	r3, [pc, #500]	@ (810db00 <_dtoa_r+0x5c8>)
 810d90a:	2200      	movs	r2, #0
 810d90c:	4629      	mov	r1, r5
 810d90e:	f7f2 fefb 	bl	8100708 <__aeabi_dmul>
 810d912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d916:	9c00      	ldr	r4, [sp, #0]
 810d918:	3601      	adds	r6, #1
 810d91a:	4630      	mov	r0, r6
 810d91c:	f7f2 fe8a 	bl	8100634 <__aeabi_i2d>
 810d920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810d924:	f7f2 fef0 	bl	8100708 <__aeabi_dmul>
 810d928:	4b76      	ldr	r3, [pc, #472]	@ (810db04 <_dtoa_r+0x5cc>)
 810d92a:	2200      	movs	r2, #0
 810d92c:	f7f2 fd36 	bl	810039c <__adddf3>
 810d930:	4605      	mov	r5, r0
 810d932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810d936:	2c00      	cmp	r4, #0
 810d938:	f040 808d 	bne.w	810da56 <_dtoa_r+0x51e>
 810d93c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d940:	4b71      	ldr	r3, [pc, #452]	@ (810db08 <_dtoa_r+0x5d0>)
 810d942:	2200      	movs	r2, #0
 810d944:	f7f2 fd28 	bl	8100398 <__aeabi_dsub>
 810d948:	4602      	mov	r2, r0
 810d94a:	460b      	mov	r3, r1
 810d94c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810d950:	462a      	mov	r2, r5
 810d952:	4633      	mov	r3, r6
 810d954:	f7f3 f968 	bl	8100c28 <__aeabi_dcmpgt>
 810d958:	2800      	cmp	r0, #0
 810d95a:	f040 828b 	bne.w	810de74 <_dtoa_r+0x93c>
 810d95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d962:	462a      	mov	r2, r5
 810d964:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810d968:	f7f3 f940 	bl	8100bec <__aeabi_dcmplt>
 810d96c:	2800      	cmp	r0, #0
 810d96e:	f040 8128 	bne.w	810dbc2 <_dtoa_r+0x68a>
 810d972:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810d976:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810d97a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810d97c:	2b00      	cmp	r3, #0
 810d97e:	f2c0 815a 	blt.w	810dc36 <_dtoa_r+0x6fe>
 810d982:	2f0e      	cmp	r7, #14
 810d984:	f300 8157 	bgt.w	810dc36 <_dtoa_r+0x6fe>
 810d988:	4b5a      	ldr	r3, [pc, #360]	@ (810daf4 <_dtoa_r+0x5bc>)
 810d98a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810d98e:	ed93 7b00 	vldr	d7, [r3]
 810d992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d994:	2b00      	cmp	r3, #0
 810d996:	ed8d 7b00 	vstr	d7, [sp]
 810d99a:	da03      	bge.n	810d9a4 <_dtoa_r+0x46c>
 810d99c:	9b07      	ldr	r3, [sp, #28]
 810d99e:	2b00      	cmp	r3, #0
 810d9a0:	f340 8101 	ble.w	810dba6 <_dtoa_r+0x66e>
 810d9a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810d9a8:	4656      	mov	r6, sl
 810d9aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d9ae:	4620      	mov	r0, r4
 810d9b0:	4629      	mov	r1, r5
 810d9b2:	f7f2 ffd3 	bl	810095c <__aeabi_ddiv>
 810d9b6:	f7f3 f957 	bl	8100c68 <__aeabi_d2iz>
 810d9ba:	4680      	mov	r8, r0
 810d9bc:	f7f2 fe3a 	bl	8100634 <__aeabi_i2d>
 810d9c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d9c4:	f7f2 fea0 	bl	8100708 <__aeabi_dmul>
 810d9c8:	4602      	mov	r2, r0
 810d9ca:	460b      	mov	r3, r1
 810d9cc:	4620      	mov	r0, r4
 810d9ce:	4629      	mov	r1, r5
 810d9d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810d9d4:	f7f2 fce0 	bl	8100398 <__aeabi_dsub>
 810d9d8:	f806 4b01 	strb.w	r4, [r6], #1
 810d9dc:	9d07      	ldr	r5, [sp, #28]
 810d9de:	eba6 040a 	sub.w	r4, r6, sl
 810d9e2:	42a5      	cmp	r5, r4
 810d9e4:	4602      	mov	r2, r0
 810d9e6:	460b      	mov	r3, r1
 810d9e8:	f040 8117 	bne.w	810dc1a <_dtoa_r+0x6e2>
 810d9ec:	f7f2 fcd6 	bl	810039c <__adddf3>
 810d9f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d9f4:	4604      	mov	r4, r0
 810d9f6:	460d      	mov	r5, r1
 810d9f8:	f7f3 f916 	bl	8100c28 <__aeabi_dcmpgt>
 810d9fc:	2800      	cmp	r0, #0
 810d9fe:	f040 80f9 	bne.w	810dbf4 <_dtoa_r+0x6bc>
 810da02:	e9dd 2300 	ldrd	r2, r3, [sp]
 810da06:	4620      	mov	r0, r4
 810da08:	4629      	mov	r1, r5
 810da0a:	f7f3 f8e5 	bl	8100bd8 <__aeabi_dcmpeq>
 810da0e:	b118      	cbz	r0, 810da18 <_dtoa_r+0x4e0>
 810da10:	f018 0f01 	tst.w	r8, #1
 810da14:	f040 80ee 	bne.w	810dbf4 <_dtoa_r+0x6bc>
 810da18:	4649      	mov	r1, r9
 810da1a:	4658      	mov	r0, fp
 810da1c:	f000 fc90 	bl	810e340 <_Bfree>
 810da20:	2300      	movs	r3, #0
 810da22:	7033      	strb	r3, [r6, #0]
 810da24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810da26:	3701      	adds	r7, #1
 810da28:	601f      	str	r7, [r3, #0]
 810da2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810da2c:	2b00      	cmp	r3, #0
 810da2e:	f000 831d 	beq.w	810e06c <_dtoa_r+0xb34>
 810da32:	601e      	str	r6, [r3, #0]
 810da34:	e31a      	b.n	810e06c <_dtoa_r+0xb34>
 810da36:	07e2      	lsls	r2, r4, #31
 810da38:	d505      	bpl.n	810da46 <_dtoa_r+0x50e>
 810da3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 810da3e:	f7f2 fe63 	bl	8100708 <__aeabi_dmul>
 810da42:	3601      	adds	r6, #1
 810da44:	2301      	movs	r3, #1
 810da46:	1064      	asrs	r4, r4, #1
 810da48:	3508      	adds	r5, #8
 810da4a:	e73f      	b.n	810d8cc <_dtoa_r+0x394>
 810da4c:	2602      	movs	r6, #2
 810da4e:	e742      	b.n	810d8d6 <_dtoa_r+0x39e>
 810da50:	9c07      	ldr	r4, [sp, #28]
 810da52:	9704      	str	r7, [sp, #16]
 810da54:	e761      	b.n	810d91a <_dtoa_r+0x3e2>
 810da56:	4b27      	ldr	r3, [pc, #156]	@ (810daf4 <_dtoa_r+0x5bc>)
 810da58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810da5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810da5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810da62:	4454      	add	r4, sl
 810da64:	2900      	cmp	r1, #0
 810da66:	d053      	beq.n	810db10 <_dtoa_r+0x5d8>
 810da68:	4928      	ldr	r1, [pc, #160]	@ (810db0c <_dtoa_r+0x5d4>)
 810da6a:	2000      	movs	r0, #0
 810da6c:	f7f2 ff76 	bl	810095c <__aeabi_ddiv>
 810da70:	4633      	mov	r3, r6
 810da72:	462a      	mov	r2, r5
 810da74:	f7f2 fc90 	bl	8100398 <__aeabi_dsub>
 810da78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810da7c:	4656      	mov	r6, sl
 810da7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810da82:	f7f3 f8f1 	bl	8100c68 <__aeabi_d2iz>
 810da86:	4605      	mov	r5, r0
 810da88:	f7f2 fdd4 	bl	8100634 <__aeabi_i2d>
 810da8c:	4602      	mov	r2, r0
 810da8e:	460b      	mov	r3, r1
 810da90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810da94:	f7f2 fc80 	bl	8100398 <__aeabi_dsub>
 810da98:	3530      	adds	r5, #48	@ 0x30
 810da9a:	4602      	mov	r2, r0
 810da9c:	460b      	mov	r3, r1
 810da9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810daa2:	f806 5b01 	strb.w	r5, [r6], #1
 810daa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810daaa:	f7f3 f89f 	bl	8100bec <__aeabi_dcmplt>
 810daae:	2800      	cmp	r0, #0
 810dab0:	d171      	bne.n	810db96 <_dtoa_r+0x65e>
 810dab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810dab6:	4911      	ldr	r1, [pc, #68]	@ (810dafc <_dtoa_r+0x5c4>)
 810dab8:	2000      	movs	r0, #0
 810daba:	f7f2 fc6d 	bl	8100398 <__aeabi_dsub>
 810dabe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810dac2:	f7f3 f893 	bl	8100bec <__aeabi_dcmplt>
 810dac6:	2800      	cmp	r0, #0
 810dac8:	f040 8095 	bne.w	810dbf6 <_dtoa_r+0x6be>
 810dacc:	42a6      	cmp	r6, r4
 810dace:	f43f af50 	beq.w	810d972 <_dtoa_r+0x43a>
 810dad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810dad6:	4b0a      	ldr	r3, [pc, #40]	@ (810db00 <_dtoa_r+0x5c8>)
 810dad8:	2200      	movs	r2, #0
 810dada:	f7f2 fe15 	bl	8100708 <__aeabi_dmul>
 810dade:	4b08      	ldr	r3, [pc, #32]	@ (810db00 <_dtoa_r+0x5c8>)
 810dae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810dae4:	2200      	movs	r2, #0
 810dae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810daea:	f7f2 fe0d 	bl	8100708 <__aeabi_dmul>
 810daee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810daf2:	e7c4      	b.n	810da7e <_dtoa_r+0x546>
 810daf4:	08112170 	.word	0x08112170
 810daf8:	08112148 	.word	0x08112148
 810dafc:	3ff00000 	.word	0x3ff00000
 810db00:	40240000 	.word	0x40240000
 810db04:	401c0000 	.word	0x401c0000
 810db08:	40140000 	.word	0x40140000
 810db0c:	3fe00000 	.word	0x3fe00000
 810db10:	4631      	mov	r1, r6
 810db12:	4628      	mov	r0, r5
 810db14:	f7f2 fdf8 	bl	8100708 <__aeabi_dmul>
 810db18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810db1c:	9415      	str	r4, [sp, #84]	@ 0x54
 810db1e:	4656      	mov	r6, sl
 810db20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810db24:	f7f3 f8a0 	bl	8100c68 <__aeabi_d2iz>
 810db28:	4605      	mov	r5, r0
 810db2a:	f7f2 fd83 	bl	8100634 <__aeabi_i2d>
 810db2e:	4602      	mov	r2, r0
 810db30:	460b      	mov	r3, r1
 810db32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810db36:	f7f2 fc2f 	bl	8100398 <__aeabi_dsub>
 810db3a:	3530      	adds	r5, #48	@ 0x30
 810db3c:	f806 5b01 	strb.w	r5, [r6], #1
 810db40:	4602      	mov	r2, r0
 810db42:	460b      	mov	r3, r1
 810db44:	42a6      	cmp	r6, r4
 810db46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810db4a:	f04f 0200 	mov.w	r2, #0
 810db4e:	d124      	bne.n	810db9a <_dtoa_r+0x662>
 810db50:	4bac      	ldr	r3, [pc, #688]	@ (810de04 <_dtoa_r+0x8cc>)
 810db52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810db56:	f7f2 fc21 	bl	810039c <__adddf3>
 810db5a:	4602      	mov	r2, r0
 810db5c:	460b      	mov	r3, r1
 810db5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810db62:	f7f3 f861 	bl	8100c28 <__aeabi_dcmpgt>
 810db66:	2800      	cmp	r0, #0
 810db68:	d145      	bne.n	810dbf6 <_dtoa_r+0x6be>
 810db6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810db6e:	49a5      	ldr	r1, [pc, #660]	@ (810de04 <_dtoa_r+0x8cc>)
 810db70:	2000      	movs	r0, #0
 810db72:	f7f2 fc11 	bl	8100398 <__aeabi_dsub>
 810db76:	4602      	mov	r2, r0
 810db78:	460b      	mov	r3, r1
 810db7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810db7e:	f7f3 f835 	bl	8100bec <__aeabi_dcmplt>
 810db82:	2800      	cmp	r0, #0
 810db84:	f43f aef5 	beq.w	810d972 <_dtoa_r+0x43a>
 810db88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810db8a:	1e73      	subs	r3, r6, #1
 810db8c:	9315      	str	r3, [sp, #84]	@ 0x54
 810db8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810db92:	2b30      	cmp	r3, #48	@ 0x30
 810db94:	d0f8      	beq.n	810db88 <_dtoa_r+0x650>
 810db96:	9f04      	ldr	r7, [sp, #16]
 810db98:	e73e      	b.n	810da18 <_dtoa_r+0x4e0>
 810db9a:	4b9b      	ldr	r3, [pc, #620]	@ (810de08 <_dtoa_r+0x8d0>)
 810db9c:	f7f2 fdb4 	bl	8100708 <__aeabi_dmul>
 810dba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810dba4:	e7bc      	b.n	810db20 <_dtoa_r+0x5e8>
 810dba6:	d10c      	bne.n	810dbc2 <_dtoa_r+0x68a>
 810dba8:	4b98      	ldr	r3, [pc, #608]	@ (810de0c <_dtoa_r+0x8d4>)
 810dbaa:	2200      	movs	r2, #0
 810dbac:	e9dd 0100 	ldrd	r0, r1, [sp]
 810dbb0:	f7f2 fdaa 	bl	8100708 <__aeabi_dmul>
 810dbb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810dbb8:	f7f3 f82c 	bl	8100c14 <__aeabi_dcmpge>
 810dbbc:	2800      	cmp	r0, #0
 810dbbe:	f000 8157 	beq.w	810de70 <_dtoa_r+0x938>
 810dbc2:	2400      	movs	r4, #0
 810dbc4:	4625      	mov	r5, r4
 810dbc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810dbc8:	43db      	mvns	r3, r3
 810dbca:	9304      	str	r3, [sp, #16]
 810dbcc:	4656      	mov	r6, sl
 810dbce:	2700      	movs	r7, #0
 810dbd0:	4621      	mov	r1, r4
 810dbd2:	4658      	mov	r0, fp
 810dbd4:	f000 fbb4 	bl	810e340 <_Bfree>
 810dbd8:	2d00      	cmp	r5, #0
 810dbda:	d0dc      	beq.n	810db96 <_dtoa_r+0x65e>
 810dbdc:	b12f      	cbz	r7, 810dbea <_dtoa_r+0x6b2>
 810dbde:	42af      	cmp	r7, r5
 810dbe0:	d003      	beq.n	810dbea <_dtoa_r+0x6b2>
 810dbe2:	4639      	mov	r1, r7
 810dbe4:	4658      	mov	r0, fp
 810dbe6:	f000 fbab 	bl	810e340 <_Bfree>
 810dbea:	4629      	mov	r1, r5
 810dbec:	4658      	mov	r0, fp
 810dbee:	f000 fba7 	bl	810e340 <_Bfree>
 810dbf2:	e7d0      	b.n	810db96 <_dtoa_r+0x65e>
 810dbf4:	9704      	str	r7, [sp, #16]
 810dbf6:	4633      	mov	r3, r6
 810dbf8:	461e      	mov	r6, r3
 810dbfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810dbfe:	2a39      	cmp	r2, #57	@ 0x39
 810dc00:	d107      	bne.n	810dc12 <_dtoa_r+0x6da>
 810dc02:	459a      	cmp	sl, r3
 810dc04:	d1f8      	bne.n	810dbf8 <_dtoa_r+0x6c0>
 810dc06:	9a04      	ldr	r2, [sp, #16]
 810dc08:	3201      	adds	r2, #1
 810dc0a:	9204      	str	r2, [sp, #16]
 810dc0c:	2230      	movs	r2, #48	@ 0x30
 810dc0e:	f88a 2000 	strb.w	r2, [sl]
 810dc12:	781a      	ldrb	r2, [r3, #0]
 810dc14:	3201      	adds	r2, #1
 810dc16:	701a      	strb	r2, [r3, #0]
 810dc18:	e7bd      	b.n	810db96 <_dtoa_r+0x65e>
 810dc1a:	4b7b      	ldr	r3, [pc, #492]	@ (810de08 <_dtoa_r+0x8d0>)
 810dc1c:	2200      	movs	r2, #0
 810dc1e:	f7f2 fd73 	bl	8100708 <__aeabi_dmul>
 810dc22:	2200      	movs	r2, #0
 810dc24:	2300      	movs	r3, #0
 810dc26:	4604      	mov	r4, r0
 810dc28:	460d      	mov	r5, r1
 810dc2a:	f7f2 ffd5 	bl	8100bd8 <__aeabi_dcmpeq>
 810dc2e:	2800      	cmp	r0, #0
 810dc30:	f43f aebb 	beq.w	810d9aa <_dtoa_r+0x472>
 810dc34:	e6f0      	b.n	810da18 <_dtoa_r+0x4e0>
 810dc36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810dc38:	2a00      	cmp	r2, #0
 810dc3a:	f000 80db 	beq.w	810ddf4 <_dtoa_r+0x8bc>
 810dc3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810dc40:	2a01      	cmp	r2, #1
 810dc42:	f300 80bf 	bgt.w	810ddc4 <_dtoa_r+0x88c>
 810dc46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810dc48:	2a00      	cmp	r2, #0
 810dc4a:	f000 80b7 	beq.w	810ddbc <_dtoa_r+0x884>
 810dc4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810dc52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810dc54:	4646      	mov	r6, r8
 810dc56:	9a08      	ldr	r2, [sp, #32]
 810dc58:	2101      	movs	r1, #1
 810dc5a:	441a      	add	r2, r3
 810dc5c:	4658      	mov	r0, fp
 810dc5e:	4498      	add	r8, r3
 810dc60:	9208      	str	r2, [sp, #32]
 810dc62:	f000 fc6b 	bl	810e53c <__i2b>
 810dc66:	4605      	mov	r5, r0
 810dc68:	b15e      	cbz	r6, 810dc82 <_dtoa_r+0x74a>
 810dc6a:	9b08      	ldr	r3, [sp, #32]
 810dc6c:	2b00      	cmp	r3, #0
 810dc6e:	dd08      	ble.n	810dc82 <_dtoa_r+0x74a>
 810dc70:	42b3      	cmp	r3, r6
 810dc72:	9a08      	ldr	r2, [sp, #32]
 810dc74:	bfa8      	it	ge
 810dc76:	4633      	movge	r3, r6
 810dc78:	eba8 0803 	sub.w	r8, r8, r3
 810dc7c:	1af6      	subs	r6, r6, r3
 810dc7e:	1ad3      	subs	r3, r2, r3
 810dc80:	9308      	str	r3, [sp, #32]
 810dc82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810dc84:	b1f3      	cbz	r3, 810dcc4 <_dtoa_r+0x78c>
 810dc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810dc88:	2b00      	cmp	r3, #0
 810dc8a:	f000 80b7 	beq.w	810ddfc <_dtoa_r+0x8c4>
 810dc8e:	b18c      	cbz	r4, 810dcb4 <_dtoa_r+0x77c>
 810dc90:	4629      	mov	r1, r5
 810dc92:	4622      	mov	r2, r4
 810dc94:	4658      	mov	r0, fp
 810dc96:	f000 fd11 	bl	810e6bc <__pow5mult>
 810dc9a:	464a      	mov	r2, r9
 810dc9c:	4601      	mov	r1, r0
 810dc9e:	4605      	mov	r5, r0
 810dca0:	4658      	mov	r0, fp
 810dca2:	f000 fc61 	bl	810e568 <__multiply>
 810dca6:	4649      	mov	r1, r9
 810dca8:	9004      	str	r0, [sp, #16]
 810dcaa:	4658      	mov	r0, fp
 810dcac:	f000 fb48 	bl	810e340 <_Bfree>
 810dcb0:	9b04      	ldr	r3, [sp, #16]
 810dcb2:	4699      	mov	r9, r3
 810dcb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810dcb6:	1b1a      	subs	r2, r3, r4
 810dcb8:	d004      	beq.n	810dcc4 <_dtoa_r+0x78c>
 810dcba:	4649      	mov	r1, r9
 810dcbc:	4658      	mov	r0, fp
 810dcbe:	f000 fcfd 	bl	810e6bc <__pow5mult>
 810dcc2:	4681      	mov	r9, r0
 810dcc4:	2101      	movs	r1, #1
 810dcc6:	4658      	mov	r0, fp
 810dcc8:	f000 fc38 	bl	810e53c <__i2b>
 810dccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dcce:	4604      	mov	r4, r0
 810dcd0:	2b00      	cmp	r3, #0
 810dcd2:	f000 81cf 	beq.w	810e074 <_dtoa_r+0xb3c>
 810dcd6:	461a      	mov	r2, r3
 810dcd8:	4601      	mov	r1, r0
 810dcda:	4658      	mov	r0, fp
 810dcdc:	f000 fcee 	bl	810e6bc <__pow5mult>
 810dce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810dce2:	2b01      	cmp	r3, #1
 810dce4:	4604      	mov	r4, r0
 810dce6:	f300 8095 	bgt.w	810de14 <_dtoa_r+0x8dc>
 810dcea:	9b02      	ldr	r3, [sp, #8]
 810dcec:	2b00      	cmp	r3, #0
 810dcee:	f040 8087 	bne.w	810de00 <_dtoa_r+0x8c8>
 810dcf2:	9b03      	ldr	r3, [sp, #12]
 810dcf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810dcf8:	2b00      	cmp	r3, #0
 810dcfa:	f040 8089 	bne.w	810de10 <_dtoa_r+0x8d8>
 810dcfe:	9b03      	ldr	r3, [sp, #12]
 810dd00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810dd04:	0d1b      	lsrs	r3, r3, #20
 810dd06:	051b      	lsls	r3, r3, #20
 810dd08:	b12b      	cbz	r3, 810dd16 <_dtoa_r+0x7de>
 810dd0a:	9b08      	ldr	r3, [sp, #32]
 810dd0c:	3301      	adds	r3, #1
 810dd0e:	9308      	str	r3, [sp, #32]
 810dd10:	f108 0801 	add.w	r8, r8, #1
 810dd14:	2301      	movs	r3, #1
 810dd16:	930a      	str	r3, [sp, #40]	@ 0x28
 810dd18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dd1a:	2b00      	cmp	r3, #0
 810dd1c:	f000 81b0 	beq.w	810e080 <_dtoa_r+0xb48>
 810dd20:	6923      	ldr	r3, [r4, #16]
 810dd22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810dd26:	6918      	ldr	r0, [r3, #16]
 810dd28:	f000 fbbc 	bl	810e4a4 <__hi0bits>
 810dd2c:	f1c0 0020 	rsb	r0, r0, #32
 810dd30:	9b08      	ldr	r3, [sp, #32]
 810dd32:	4418      	add	r0, r3
 810dd34:	f010 001f 	ands.w	r0, r0, #31
 810dd38:	d077      	beq.n	810de2a <_dtoa_r+0x8f2>
 810dd3a:	f1c0 0320 	rsb	r3, r0, #32
 810dd3e:	2b04      	cmp	r3, #4
 810dd40:	dd6b      	ble.n	810de1a <_dtoa_r+0x8e2>
 810dd42:	9b08      	ldr	r3, [sp, #32]
 810dd44:	f1c0 001c 	rsb	r0, r0, #28
 810dd48:	4403      	add	r3, r0
 810dd4a:	4480      	add	r8, r0
 810dd4c:	4406      	add	r6, r0
 810dd4e:	9308      	str	r3, [sp, #32]
 810dd50:	f1b8 0f00 	cmp.w	r8, #0
 810dd54:	dd05      	ble.n	810dd62 <_dtoa_r+0x82a>
 810dd56:	4649      	mov	r1, r9
 810dd58:	4642      	mov	r2, r8
 810dd5a:	4658      	mov	r0, fp
 810dd5c:	f000 fd08 	bl	810e770 <__lshift>
 810dd60:	4681      	mov	r9, r0
 810dd62:	9b08      	ldr	r3, [sp, #32]
 810dd64:	2b00      	cmp	r3, #0
 810dd66:	dd05      	ble.n	810dd74 <_dtoa_r+0x83c>
 810dd68:	4621      	mov	r1, r4
 810dd6a:	461a      	mov	r2, r3
 810dd6c:	4658      	mov	r0, fp
 810dd6e:	f000 fcff 	bl	810e770 <__lshift>
 810dd72:	4604      	mov	r4, r0
 810dd74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810dd76:	2b00      	cmp	r3, #0
 810dd78:	d059      	beq.n	810de2e <_dtoa_r+0x8f6>
 810dd7a:	4621      	mov	r1, r4
 810dd7c:	4648      	mov	r0, r9
 810dd7e:	f000 fd63 	bl	810e848 <__mcmp>
 810dd82:	2800      	cmp	r0, #0
 810dd84:	da53      	bge.n	810de2e <_dtoa_r+0x8f6>
 810dd86:	1e7b      	subs	r3, r7, #1
 810dd88:	9304      	str	r3, [sp, #16]
 810dd8a:	4649      	mov	r1, r9
 810dd8c:	2300      	movs	r3, #0
 810dd8e:	220a      	movs	r2, #10
 810dd90:	4658      	mov	r0, fp
 810dd92:	f000 faf7 	bl	810e384 <__multadd>
 810dd96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810dd98:	4681      	mov	r9, r0
 810dd9a:	2b00      	cmp	r3, #0
 810dd9c:	f000 8172 	beq.w	810e084 <_dtoa_r+0xb4c>
 810dda0:	2300      	movs	r3, #0
 810dda2:	4629      	mov	r1, r5
 810dda4:	220a      	movs	r2, #10
 810dda6:	4658      	mov	r0, fp
 810dda8:	f000 faec 	bl	810e384 <__multadd>
 810ddac:	9b00      	ldr	r3, [sp, #0]
 810ddae:	2b00      	cmp	r3, #0
 810ddb0:	4605      	mov	r5, r0
 810ddb2:	dc67      	bgt.n	810de84 <_dtoa_r+0x94c>
 810ddb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ddb6:	2b02      	cmp	r3, #2
 810ddb8:	dc41      	bgt.n	810de3e <_dtoa_r+0x906>
 810ddba:	e063      	b.n	810de84 <_dtoa_r+0x94c>
 810ddbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810ddbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810ddc2:	e746      	b.n	810dc52 <_dtoa_r+0x71a>
 810ddc4:	9b07      	ldr	r3, [sp, #28]
 810ddc6:	1e5c      	subs	r4, r3, #1
 810ddc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ddca:	42a3      	cmp	r3, r4
 810ddcc:	bfbf      	itttt	lt
 810ddce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810ddd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810ddd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810ddd4:	1ae3      	sublt	r3, r4, r3
 810ddd6:	bfb4      	ite	lt
 810ddd8:	18d2      	addlt	r2, r2, r3
 810ddda:	1b1c      	subge	r4, r3, r4
 810dddc:	9b07      	ldr	r3, [sp, #28]
 810ddde:	bfbc      	itt	lt
 810dde0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810dde2:	2400      	movlt	r4, #0
 810dde4:	2b00      	cmp	r3, #0
 810dde6:	bfb5      	itete	lt
 810dde8:	eba8 0603 	sublt.w	r6, r8, r3
 810ddec:	9b07      	ldrge	r3, [sp, #28]
 810ddee:	2300      	movlt	r3, #0
 810ddf0:	4646      	movge	r6, r8
 810ddf2:	e730      	b.n	810dc56 <_dtoa_r+0x71e>
 810ddf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810ddf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810ddf8:	4646      	mov	r6, r8
 810ddfa:	e735      	b.n	810dc68 <_dtoa_r+0x730>
 810ddfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810ddfe:	e75c      	b.n	810dcba <_dtoa_r+0x782>
 810de00:	2300      	movs	r3, #0
 810de02:	e788      	b.n	810dd16 <_dtoa_r+0x7de>
 810de04:	3fe00000 	.word	0x3fe00000
 810de08:	40240000 	.word	0x40240000
 810de0c:	40140000 	.word	0x40140000
 810de10:	9b02      	ldr	r3, [sp, #8]
 810de12:	e780      	b.n	810dd16 <_dtoa_r+0x7de>
 810de14:	2300      	movs	r3, #0
 810de16:	930a      	str	r3, [sp, #40]	@ 0x28
 810de18:	e782      	b.n	810dd20 <_dtoa_r+0x7e8>
 810de1a:	d099      	beq.n	810dd50 <_dtoa_r+0x818>
 810de1c:	9a08      	ldr	r2, [sp, #32]
 810de1e:	331c      	adds	r3, #28
 810de20:	441a      	add	r2, r3
 810de22:	4498      	add	r8, r3
 810de24:	441e      	add	r6, r3
 810de26:	9208      	str	r2, [sp, #32]
 810de28:	e792      	b.n	810dd50 <_dtoa_r+0x818>
 810de2a:	4603      	mov	r3, r0
 810de2c:	e7f6      	b.n	810de1c <_dtoa_r+0x8e4>
 810de2e:	9b07      	ldr	r3, [sp, #28]
 810de30:	9704      	str	r7, [sp, #16]
 810de32:	2b00      	cmp	r3, #0
 810de34:	dc20      	bgt.n	810de78 <_dtoa_r+0x940>
 810de36:	9300      	str	r3, [sp, #0]
 810de38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810de3a:	2b02      	cmp	r3, #2
 810de3c:	dd1e      	ble.n	810de7c <_dtoa_r+0x944>
 810de3e:	9b00      	ldr	r3, [sp, #0]
 810de40:	2b00      	cmp	r3, #0
 810de42:	f47f aec0 	bne.w	810dbc6 <_dtoa_r+0x68e>
 810de46:	4621      	mov	r1, r4
 810de48:	2205      	movs	r2, #5
 810de4a:	4658      	mov	r0, fp
 810de4c:	f000 fa9a 	bl	810e384 <__multadd>
 810de50:	4601      	mov	r1, r0
 810de52:	4604      	mov	r4, r0
 810de54:	4648      	mov	r0, r9
 810de56:	f000 fcf7 	bl	810e848 <__mcmp>
 810de5a:	2800      	cmp	r0, #0
 810de5c:	f77f aeb3 	ble.w	810dbc6 <_dtoa_r+0x68e>
 810de60:	4656      	mov	r6, sl
 810de62:	2331      	movs	r3, #49	@ 0x31
 810de64:	f806 3b01 	strb.w	r3, [r6], #1
 810de68:	9b04      	ldr	r3, [sp, #16]
 810de6a:	3301      	adds	r3, #1
 810de6c:	9304      	str	r3, [sp, #16]
 810de6e:	e6ae      	b.n	810dbce <_dtoa_r+0x696>
 810de70:	9c07      	ldr	r4, [sp, #28]
 810de72:	9704      	str	r7, [sp, #16]
 810de74:	4625      	mov	r5, r4
 810de76:	e7f3      	b.n	810de60 <_dtoa_r+0x928>
 810de78:	9b07      	ldr	r3, [sp, #28]
 810de7a:	9300      	str	r3, [sp, #0]
 810de7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810de7e:	2b00      	cmp	r3, #0
 810de80:	f000 8104 	beq.w	810e08c <_dtoa_r+0xb54>
 810de84:	2e00      	cmp	r6, #0
 810de86:	dd05      	ble.n	810de94 <_dtoa_r+0x95c>
 810de88:	4629      	mov	r1, r5
 810de8a:	4632      	mov	r2, r6
 810de8c:	4658      	mov	r0, fp
 810de8e:	f000 fc6f 	bl	810e770 <__lshift>
 810de92:	4605      	mov	r5, r0
 810de94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810de96:	2b00      	cmp	r3, #0
 810de98:	d05a      	beq.n	810df50 <_dtoa_r+0xa18>
 810de9a:	6869      	ldr	r1, [r5, #4]
 810de9c:	4658      	mov	r0, fp
 810de9e:	f000 fa0f 	bl	810e2c0 <_Balloc>
 810dea2:	4606      	mov	r6, r0
 810dea4:	b928      	cbnz	r0, 810deb2 <_dtoa_r+0x97a>
 810dea6:	4b84      	ldr	r3, [pc, #528]	@ (810e0b8 <_dtoa_r+0xb80>)
 810dea8:	4602      	mov	r2, r0
 810deaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810deae:	f7ff bb5a 	b.w	810d566 <_dtoa_r+0x2e>
 810deb2:	692a      	ldr	r2, [r5, #16]
 810deb4:	3202      	adds	r2, #2
 810deb6:	0092      	lsls	r2, r2, #2
 810deb8:	f105 010c 	add.w	r1, r5, #12
 810debc:	300c      	adds	r0, #12
 810debe:	f7ff fa9e 	bl	810d3fe <memcpy>
 810dec2:	2201      	movs	r2, #1
 810dec4:	4631      	mov	r1, r6
 810dec6:	4658      	mov	r0, fp
 810dec8:	f000 fc52 	bl	810e770 <__lshift>
 810decc:	f10a 0301 	add.w	r3, sl, #1
 810ded0:	9307      	str	r3, [sp, #28]
 810ded2:	9b00      	ldr	r3, [sp, #0]
 810ded4:	4453      	add	r3, sl
 810ded6:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ded8:	9b02      	ldr	r3, [sp, #8]
 810deda:	f003 0301 	and.w	r3, r3, #1
 810dede:	462f      	mov	r7, r5
 810dee0:	930a      	str	r3, [sp, #40]	@ 0x28
 810dee2:	4605      	mov	r5, r0
 810dee4:	9b07      	ldr	r3, [sp, #28]
 810dee6:	4621      	mov	r1, r4
 810dee8:	3b01      	subs	r3, #1
 810deea:	4648      	mov	r0, r9
 810deec:	9300      	str	r3, [sp, #0]
 810deee:	f7ff fa9b 	bl	810d428 <quorem>
 810def2:	4639      	mov	r1, r7
 810def4:	9002      	str	r0, [sp, #8]
 810def6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810defa:	4648      	mov	r0, r9
 810defc:	f000 fca4 	bl	810e848 <__mcmp>
 810df00:	462a      	mov	r2, r5
 810df02:	9008      	str	r0, [sp, #32]
 810df04:	4621      	mov	r1, r4
 810df06:	4658      	mov	r0, fp
 810df08:	f000 fcba 	bl	810e880 <__mdiff>
 810df0c:	68c2      	ldr	r2, [r0, #12]
 810df0e:	4606      	mov	r6, r0
 810df10:	bb02      	cbnz	r2, 810df54 <_dtoa_r+0xa1c>
 810df12:	4601      	mov	r1, r0
 810df14:	4648      	mov	r0, r9
 810df16:	f000 fc97 	bl	810e848 <__mcmp>
 810df1a:	4602      	mov	r2, r0
 810df1c:	4631      	mov	r1, r6
 810df1e:	4658      	mov	r0, fp
 810df20:	920e      	str	r2, [sp, #56]	@ 0x38
 810df22:	f000 fa0d 	bl	810e340 <_Bfree>
 810df26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810df28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810df2a:	9e07      	ldr	r6, [sp, #28]
 810df2c:	ea43 0102 	orr.w	r1, r3, r2
 810df30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810df32:	4319      	orrs	r1, r3
 810df34:	d110      	bne.n	810df58 <_dtoa_r+0xa20>
 810df36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810df3a:	d029      	beq.n	810df90 <_dtoa_r+0xa58>
 810df3c:	9b08      	ldr	r3, [sp, #32]
 810df3e:	2b00      	cmp	r3, #0
 810df40:	dd02      	ble.n	810df48 <_dtoa_r+0xa10>
 810df42:	9b02      	ldr	r3, [sp, #8]
 810df44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810df48:	9b00      	ldr	r3, [sp, #0]
 810df4a:	f883 8000 	strb.w	r8, [r3]
 810df4e:	e63f      	b.n	810dbd0 <_dtoa_r+0x698>
 810df50:	4628      	mov	r0, r5
 810df52:	e7bb      	b.n	810decc <_dtoa_r+0x994>
 810df54:	2201      	movs	r2, #1
 810df56:	e7e1      	b.n	810df1c <_dtoa_r+0x9e4>
 810df58:	9b08      	ldr	r3, [sp, #32]
 810df5a:	2b00      	cmp	r3, #0
 810df5c:	db04      	blt.n	810df68 <_dtoa_r+0xa30>
 810df5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810df60:	430b      	orrs	r3, r1
 810df62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810df64:	430b      	orrs	r3, r1
 810df66:	d120      	bne.n	810dfaa <_dtoa_r+0xa72>
 810df68:	2a00      	cmp	r2, #0
 810df6a:	dded      	ble.n	810df48 <_dtoa_r+0xa10>
 810df6c:	4649      	mov	r1, r9
 810df6e:	2201      	movs	r2, #1
 810df70:	4658      	mov	r0, fp
 810df72:	f000 fbfd 	bl	810e770 <__lshift>
 810df76:	4621      	mov	r1, r4
 810df78:	4681      	mov	r9, r0
 810df7a:	f000 fc65 	bl	810e848 <__mcmp>
 810df7e:	2800      	cmp	r0, #0
 810df80:	dc03      	bgt.n	810df8a <_dtoa_r+0xa52>
 810df82:	d1e1      	bne.n	810df48 <_dtoa_r+0xa10>
 810df84:	f018 0f01 	tst.w	r8, #1
 810df88:	d0de      	beq.n	810df48 <_dtoa_r+0xa10>
 810df8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810df8e:	d1d8      	bne.n	810df42 <_dtoa_r+0xa0a>
 810df90:	9a00      	ldr	r2, [sp, #0]
 810df92:	2339      	movs	r3, #57	@ 0x39
 810df94:	7013      	strb	r3, [r2, #0]
 810df96:	4633      	mov	r3, r6
 810df98:	461e      	mov	r6, r3
 810df9a:	3b01      	subs	r3, #1
 810df9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810dfa0:	2a39      	cmp	r2, #57	@ 0x39
 810dfa2:	d052      	beq.n	810e04a <_dtoa_r+0xb12>
 810dfa4:	3201      	adds	r2, #1
 810dfa6:	701a      	strb	r2, [r3, #0]
 810dfa8:	e612      	b.n	810dbd0 <_dtoa_r+0x698>
 810dfaa:	2a00      	cmp	r2, #0
 810dfac:	dd07      	ble.n	810dfbe <_dtoa_r+0xa86>
 810dfae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810dfb2:	d0ed      	beq.n	810df90 <_dtoa_r+0xa58>
 810dfb4:	9a00      	ldr	r2, [sp, #0]
 810dfb6:	f108 0301 	add.w	r3, r8, #1
 810dfba:	7013      	strb	r3, [r2, #0]
 810dfbc:	e608      	b.n	810dbd0 <_dtoa_r+0x698>
 810dfbe:	9b07      	ldr	r3, [sp, #28]
 810dfc0:	9a07      	ldr	r2, [sp, #28]
 810dfc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 810dfc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810dfc8:	4293      	cmp	r3, r2
 810dfca:	d028      	beq.n	810e01e <_dtoa_r+0xae6>
 810dfcc:	4649      	mov	r1, r9
 810dfce:	2300      	movs	r3, #0
 810dfd0:	220a      	movs	r2, #10
 810dfd2:	4658      	mov	r0, fp
 810dfd4:	f000 f9d6 	bl	810e384 <__multadd>
 810dfd8:	42af      	cmp	r7, r5
 810dfda:	4681      	mov	r9, r0
 810dfdc:	f04f 0300 	mov.w	r3, #0
 810dfe0:	f04f 020a 	mov.w	r2, #10
 810dfe4:	4639      	mov	r1, r7
 810dfe6:	4658      	mov	r0, fp
 810dfe8:	d107      	bne.n	810dffa <_dtoa_r+0xac2>
 810dfea:	f000 f9cb 	bl	810e384 <__multadd>
 810dfee:	4607      	mov	r7, r0
 810dff0:	4605      	mov	r5, r0
 810dff2:	9b07      	ldr	r3, [sp, #28]
 810dff4:	3301      	adds	r3, #1
 810dff6:	9307      	str	r3, [sp, #28]
 810dff8:	e774      	b.n	810dee4 <_dtoa_r+0x9ac>
 810dffa:	f000 f9c3 	bl	810e384 <__multadd>
 810dffe:	4629      	mov	r1, r5
 810e000:	4607      	mov	r7, r0
 810e002:	2300      	movs	r3, #0
 810e004:	220a      	movs	r2, #10
 810e006:	4658      	mov	r0, fp
 810e008:	f000 f9bc 	bl	810e384 <__multadd>
 810e00c:	4605      	mov	r5, r0
 810e00e:	e7f0      	b.n	810dff2 <_dtoa_r+0xaba>
 810e010:	9b00      	ldr	r3, [sp, #0]
 810e012:	2b00      	cmp	r3, #0
 810e014:	bfcc      	ite	gt
 810e016:	461e      	movgt	r6, r3
 810e018:	2601      	movle	r6, #1
 810e01a:	4456      	add	r6, sl
 810e01c:	2700      	movs	r7, #0
 810e01e:	4649      	mov	r1, r9
 810e020:	2201      	movs	r2, #1
 810e022:	4658      	mov	r0, fp
 810e024:	f000 fba4 	bl	810e770 <__lshift>
 810e028:	4621      	mov	r1, r4
 810e02a:	4681      	mov	r9, r0
 810e02c:	f000 fc0c 	bl	810e848 <__mcmp>
 810e030:	2800      	cmp	r0, #0
 810e032:	dcb0      	bgt.n	810df96 <_dtoa_r+0xa5e>
 810e034:	d102      	bne.n	810e03c <_dtoa_r+0xb04>
 810e036:	f018 0f01 	tst.w	r8, #1
 810e03a:	d1ac      	bne.n	810df96 <_dtoa_r+0xa5e>
 810e03c:	4633      	mov	r3, r6
 810e03e:	461e      	mov	r6, r3
 810e040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810e044:	2a30      	cmp	r2, #48	@ 0x30
 810e046:	d0fa      	beq.n	810e03e <_dtoa_r+0xb06>
 810e048:	e5c2      	b.n	810dbd0 <_dtoa_r+0x698>
 810e04a:	459a      	cmp	sl, r3
 810e04c:	d1a4      	bne.n	810df98 <_dtoa_r+0xa60>
 810e04e:	9b04      	ldr	r3, [sp, #16]
 810e050:	3301      	adds	r3, #1
 810e052:	9304      	str	r3, [sp, #16]
 810e054:	2331      	movs	r3, #49	@ 0x31
 810e056:	f88a 3000 	strb.w	r3, [sl]
 810e05a:	e5b9      	b.n	810dbd0 <_dtoa_r+0x698>
 810e05c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810e05e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810e0bc <_dtoa_r+0xb84>
 810e062:	b11b      	cbz	r3, 810e06c <_dtoa_r+0xb34>
 810e064:	f10a 0308 	add.w	r3, sl, #8
 810e068:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810e06a:	6013      	str	r3, [r2, #0]
 810e06c:	4650      	mov	r0, sl
 810e06e:	b019      	add	sp, #100	@ 0x64
 810e070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810e076:	2b01      	cmp	r3, #1
 810e078:	f77f ae37 	ble.w	810dcea <_dtoa_r+0x7b2>
 810e07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810e07e:	930a      	str	r3, [sp, #40]	@ 0x28
 810e080:	2001      	movs	r0, #1
 810e082:	e655      	b.n	810dd30 <_dtoa_r+0x7f8>
 810e084:	9b00      	ldr	r3, [sp, #0]
 810e086:	2b00      	cmp	r3, #0
 810e088:	f77f aed6 	ble.w	810de38 <_dtoa_r+0x900>
 810e08c:	4656      	mov	r6, sl
 810e08e:	4621      	mov	r1, r4
 810e090:	4648      	mov	r0, r9
 810e092:	f7ff f9c9 	bl	810d428 <quorem>
 810e096:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810e09a:	f806 8b01 	strb.w	r8, [r6], #1
 810e09e:	9b00      	ldr	r3, [sp, #0]
 810e0a0:	eba6 020a 	sub.w	r2, r6, sl
 810e0a4:	4293      	cmp	r3, r2
 810e0a6:	ddb3      	ble.n	810e010 <_dtoa_r+0xad8>
 810e0a8:	4649      	mov	r1, r9
 810e0aa:	2300      	movs	r3, #0
 810e0ac:	220a      	movs	r2, #10
 810e0ae:	4658      	mov	r0, fp
 810e0b0:	f000 f968 	bl	810e384 <__multadd>
 810e0b4:	4681      	mov	r9, r0
 810e0b6:	e7ea      	b.n	810e08e <_dtoa_r+0xb56>
 810e0b8:	081120cd 	.word	0x081120cd
 810e0bc:	08112051 	.word	0x08112051

0810e0c0 <_free_r>:
 810e0c0:	b538      	push	{r3, r4, r5, lr}
 810e0c2:	4605      	mov	r5, r0
 810e0c4:	2900      	cmp	r1, #0
 810e0c6:	d041      	beq.n	810e14c <_free_r+0x8c>
 810e0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e0cc:	1f0c      	subs	r4, r1, #4
 810e0ce:	2b00      	cmp	r3, #0
 810e0d0:	bfb8      	it	lt
 810e0d2:	18e4      	addlt	r4, r4, r3
 810e0d4:	f000 f8e8 	bl	810e2a8 <__malloc_lock>
 810e0d8:	4a1d      	ldr	r2, [pc, #116]	@ (810e150 <_free_r+0x90>)
 810e0da:	6813      	ldr	r3, [r2, #0]
 810e0dc:	b933      	cbnz	r3, 810e0ec <_free_r+0x2c>
 810e0de:	6063      	str	r3, [r4, #4]
 810e0e0:	6014      	str	r4, [r2, #0]
 810e0e2:	4628      	mov	r0, r5
 810e0e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e0e8:	f000 b8e4 	b.w	810e2b4 <__malloc_unlock>
 810e0ec:	42a3      	cmp	r3, r4
 810e0ee:	d908      	bls.n	810e102 <_free_r+0x42>
 810e0f0:	6820      	ldr	r0, [r4, #0]
 810e0f2:	1821      	adds	r1, r4, r0
 810e0f4:	428b      	cmp	r3, r1
 810e0f6:	bf01      	itttt	eq
 810e0f8:	6819      	ldreq	r1, [r3, #0]
 810e0fa:	685b      	ldreq	r3, [r3, #4]
 810e0fc:	1809      	addeq	r1, r1, r0
 810e0fe:	6021      	streq	r1, [r4, #0]
 810e100:	e7ed      	b.n	810e0de <_free_r+0x1e>
 810e102:	461a      	mov	r2, r3
 810e104:	685b      	ldr	r3, [r3, #4]
 810e106:	b10b      	cbz	r3, 810e10c <_free_r+0x4c>
 810e108:	42a3      	cmp	r3, r4
 810e10a:	d9fa      	bls.n	810e102 <_free_r+0x42>
 810e10c:	6811      	ldr	r1, [r2, #0]
 810e10e:	1850      	adds	r0, r2, r1
 810e110:	42a0      	cmp	r0, r4
 810e112:	d10b      	bne.n	810e12c <_free_r+0x6c>
 810e114:	6820      	ldr	r0, [r4, #0]
 810e116:	4401      	add	r1, r0
 810e118:	1850      	adds	r0, r2, r1
 810e11a:	4283      	cmp	r3, r0
 810e11c:	6011      	str	r1, [r2, #0]
 810e11e:	d1e0      	bne.n	810e0e2 <_free_r+0x22>
 810e120:	6818      	ldr	r0, [r3, #0]
 810e122:	685b      	ldr	r3, [r3, #4]
 810e124:	6053      	str	r3, [r2, #4]
 810e126:	4408      	add	r0, r1
 810e128:	6010      	str	r0, [r2, #0]
 810e12a:	e7da      	b.n	810e0e2 <_free_r+0x22>
 810e12c:	d902      	bls.n	810e134 <_free_r+0x74>
 810e12e:	230c      	movs	r3, #12
 810e130:	602b      	str	r3, [r5, #0]
 810e132:	e7d6      	b.n	810e0e2 <_free_r+0x22>
 810e134:	6820      	ldr	r0, [r4, #0]
 810e136:	1821      	adds	r1, r4, r0
 810e138:	428b      	cmp	r3, r1
 810e13a:	bf04      	itt	eq
 810e13c:	6819      	ldreq	r1, [r3, #0]
 810e13e:	685b      	ldreq	r3, [r3, #4]
 810e140:	6063      	str	r3, [r4, #4]
 810e142:	bf04      	itt	eq
 810e144:	1809      	addeq	r1, r1, r0
 810e146:	6021      	streq	r1, [r4, #0]
 810e148:	6054      	str	r4, [r2, #4]
 810e14a:	e7ca      	b.n	810e0e2 <_free_r+0x22>
 810e14c:	bd38      	pop	{r3, r4, r5, pc}
 810e14e:	bf00      	nop
 810e150:	10000794 	.word	0x10000794

0810e154 <malloc>:
 810e154:	4b02      	ldr	r3, [pc, #8]	@ (810e160 <malloc+0xc>)
 810e156:	4601      	mov	r1, r0
 810e158:	6818      	ldr	r0, [r3, #0]
 810e15a:	f000 b825 	b.w	810e1a8 <_malloc_r>
 810e15e:	bf00      	nop
 810e160:	10000094 	.word	0x10000094

0810e164 <sbrk_aligned>:
 810e164:	b570      	push	{r4, r5, r6, lr}
 810e166:	4e0f      	ldr	r6, [pc, #60]	@ (810e1a4 <sbrk_aligned+0x40>)
 810e168:	460c      	mov	r4, r1
 810e16a:	6831      	ldr	r1, [r6, #0]
 810e16c:	4605      	mov	r5, r0
 810e16e:	b911      	cbnz	r1, 810e176 <sbrk_aligned+0x12>
 810e170:	f001 ffd2 	bl	8110118 <_sbrk_r>
 810e174:	6030      	str	r0, [r6, #0]
 810e176:	4621      	mov	r1, r4
 810e178:	4628      	mov	r0, r5
 810e17a:	f001 ffcd 	bl	8110118 <_sbrk_r>
 810e17e:	1c43      	adds	r3, r0, #1
 810e180:	d103      	bne.n	810e18a <sbrk_aligned+0x26>
 810e182:	f04f 34ff 	mov.w	r4, #4294967295
 810e186:	4620      	mov	r0, r4
 810e188:	bd70      	pop	{r4, r5, r6, pc}
 810e18a:	1cc4      	adds	r4, r0, #3
 810e18c:	f024 0403 	bic.w	r4, r4, #3
 810e190:	42a0      	cmp	r0, r4
 810e192:	d0f8      	beq.n	810e186 <sbrk_aligned+0x22>
 810e194:	1a21      	subs	r1, r4, r0
 810e196:	4628      	mov	r0, r5
 810e198:	f001 ffbe 	bl	8110118 <_sbrk_r>
 810e19c:	3001      	adds	r0, #1
 810e19e:	d1f2      	bne.n	810e186 <sbrk_aligned+0x22>
 810e1a0:	e7ef      	b.n	810e182 <sbrk_aligned+0x1e>
 810e1a2:	bf00      	nop
 810e1a4:	10000790 	.word	0x10000790

0810e1a8 <_malloc_r>:
 810e1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e1ac:	1ccd      	adds	r5, r1, #3
 810e1ae:	f025 0503 	bic.w	r5, r5, #3
 810e1b2:	3508      	adds	r5, #8
 810e1b4:	2d0c      	cmp	r5, #12
 810e1b6:	bf38      	it	cc
 810e1b8:	250c      	movcc	r5, #12
 810e1ba:	2d00      	cmp	r5, #0
 810e1bc:	4606      	mov	r6, r0
 810e1be:	db01      	blt.n	810e1c4 <_malloc_r+0x1c>
 810e1c0:	42a9      	cmp	r1, r5
 810e1c2:	d904      	bls.n	810e1ce <_malloc_r+0x26>
 810e1c4:	230c      	movs	r3, #12
 810e1c6:	6033      	str	r3, [r6, #0]
 810e1c8:	2000      	movs	r0, #0
 810e1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e1ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810e2a4 <_malloc_r+0xfc>
 810e1d2:	f000 f869 	bl	810e2a8 <__malloc_lock>
 810e1d6:	f8d8 3000 	ldr.w	r3, [r8]
 810e1da:	461c      	mov	r4, r3
 810e1dc:	bb44      	cbnz	r4, 810e230 <_malloc_r+0x88>
 810e1de:	4629      	mov	r1, r5
 810e1e0:	4630      	mov	r0, r6
 810e1e2:	f7ff ffbf 	bl	810e164 <sbrk_aligned>
 810e1e6:	1c43      	adds	r3, r0, #1
 810e1e8:	4604      	mov	r4, r0
 810e1ea:	d158      	bne.n	810e29e <_malloc_r+0xf6>
 810e1ec:	f8d8 4000 	ldr.w	r4, [r8]
 810e1f0:	4627      	mov	r7, r4
 810e1f2:	2f00      	cmp	r7, #0
 810e1f4:	d143      	bne.n	810e27e <_malloc_r+0xd6>
 810e1f6:	2c00      	cmp	r4, #0
 810e1f8:	d04b      	beq.n	810e292 <_malloc_r+0xea>
 810e1fa:	6823      	ldr	r3, [r4, #0]
 810e1fc:	4639      	mov	r1, r7
 810e1fe:	4630      	mov	r0, r6
 810e200:	eb04 0903 	add.w	r9, r4, r3
 810e204:	f001 ff88 	bl	8110118 <_sbrk_r>
 810e208:	4581      	cmp	r9, r0
 810e20a:	d142      	bne.n	810e292 <_malloc_r+0xea>
 810e20c:	6821      	ldr	r1, [r4, #0]
 810e20e:	1a6d      	subs	r5, r5, r1
 810e210:	4629      	mov	r1, r5
 810e212:	4630      	mov	r0, r6
 810e214:	f7ff ffa6 	bl	810e164 <sbrk_aligned>
 810e218:	3001      	adds	r0, #1
 810e21a:	d03a      	beq.n	810e292 <_malloc_r+0xea>
 810e21c:	6823      	ldr	r3, [r4, #0]
 810e21e:	442b      	add	r3, r5
 810e220:	6023      	str	r3, [r4, #0]
 810e222:	f8d8 3000 	ldr.w	r3, [r8]
 810e226:	685a      	ldr	r2, [r3, #4]
 810e228:	bb62      	cbnz	r2, 810e284 <_malloc_r+0xdc>
 810e22a:	f8c8 7000 	str.w	r7, [r8]
 810e22e:	e00f      	b.n	810e250 <_malloc_r+0xa8>
 810e230:	6822      	ldr	r2, [r4, #0]
 810e232:	1b52      	subs	r2, r2, r5
 810e234:	d420      	bmi.n	810e278 <_malloc_r+0xd0>
 810e236:	2a0b      	cmp	r2, #11
 810e238:	d917      	bls.n	810e26a <_malloc_r+0xc2>
 810e23a:	1961      	adds	r1, r4, r5
 810e23c:	42a3      	cmp	r3, r4
 810e23e:	6025      	str	r5, [r4, #0]
 810e240:	bf18      	it	ne
 810e242:	6059      	strne	r1, [r3, #4]
 810e244:	6863      	ldr	r3, [r4, #4]
 810e246:	bf08      	it	eq
 810e248:	f8c8 1000 	streq.w	r1, [r8]
 810e24c:	5162      	str	r2, [r4, r5]
 810e24e:	604b      	str	r3, [r1, #4]
 810e250:	4630      	mov	r0, r6
 810e252:	f000 f82f 	bl	810e2b4 <__malloc_unlock>
 810e256:	f104 000b 	add.w	r0, r4, #11
 810e25a:	1d23      	adds	r3, r4, #4
 810e25c:	f020 0007 	bic.w	r0, r0, #7
 810e260:	1ac2      	subs	r2, r0, r3
 810e262:	bf1c      	itt	ne
 810e264:	1a1b      	subne	r3, r3, r0
 810e266:	50a3      	strne	r3, [r4, r2]
 810e268:	e7af      	b.n	810e1ca <_malloc_r+0x22>
 810e26a:	6862      	ldr	r2, [r4, #4]
 810e26c:	42a3      	cmp	r3, r4
 810e26e:	bf0c      	ite	eq
 810e270:	f8c8 2000 	streq.w	r2, [r8]
 810e274:	605a      	strne	r2, [r3, #4]
 810e276:	e7eb      	b.n	810e250 <_malloc_r+0xa8>
 810e278:	4623      	mov	r3, r4
 810e27a:	6864      	ldr	r4, [r4, #4]
 810e27c:	e7ae      	b.n	810e1dc <_malloc_r+0x34>
 810e27e:	463c      	mov	r4, r7
 810e280:	687f      	ldr	r7, [r7, #4]
 810e282:	e7b6      	b.n	810e1f2 <_malloc_r+0x4a>
 810e284:	461a      	mov	r2, r3
 810e286:	685b      	ldr	r3, [r3, #4]
 810e288:	42a3      	cmp	r3, r4
 810e28a:	d1fb      	bne.n	810e284 <_malloc_r+0xdc>
 810e28c:	2300      	movs	r3, #0
 810e28e:	6053      	str	r3, [r2, #4]
 810e290:	e7de      	b.n	810e250 <_malloc_r+0xa8>
 810e292:	230c      	movs	r3, #12
 810e294:	6033      	str	r3, [r6, #0]
 810e296:	4630      	mov	r0, r6
 810e298:	f000 f80c 	bl	810e2b4 <__malloc_unlock>
 810e29c:	e794      	b.n	810e1c8 <_malloc_r+0x20>
 810e29e:	6005      	str	r5, [r0, #0]
 810e2a0:	e7d6      	b.n	810e250 <_malloc_r+0xa8>
 810e2a2:	bf00      	nop
 810e2a4:	10000794 	.word	0x10000794

0810e2a8 <__malloc_lock>:
 810e2a8:	4801      	ldr	r0, [pc, #4]	@ (810e2b0 <__malloc_lock+0x8>)
 810e2aa:	f7ff b8a6 	b.w	810d3fa <__retarget_lock_acquire_recursive>
 810e2ae:	bf00      	nop
 810e2b0:	1000078c 	.word	0x1000078c

0810e2b4 <__malloc_unlock>:
 810e2b4:	4801      	ldr	r0, [pc, #4]	@ (810e2bc <__malloc_unlock+0x8>)
 810e2b6:	f7ff b8a1 	b.w	810d3fc <__retarget_lock_release_recursive>
 810e2ba:	bf00      	nop
 810e2bc:	1000078c 	.word	0x1000078c

0810e2c0 <_Balloc>:
 810e2c0:	b570      	push	{r4, r5, r6, lr}
 810e2c2:	69c6      	ldr	r6, [r0, #28]
 810e2c4:	4604      	mov	r4, r0
 810e2c6:	460d      	mov	r5, r1
 810e2c8:	b976      	cbnz	r6, 810e2e8 <_Balloc+0x28>
 810e2ca:	2010      	movs	r0, #16
 810e2cc:	f7ff ff42 	bl	810e154 <malloc>
 810e2d0:	4602      	mov	r2, r0
 810e2d2:	61e0      	str	r0, [r4, #28]
 810e2d4:	b920      	cbnz	r0, 810e2e0 <_Balloc+0x20>
 810e2d6:	4b18      	ldr	r3, [pc, #96]	@ (810e338 <_Balloc+0x78>)
 810e2d8:	4818      	ldr	r0, [pc, #96]	@ (810e33c <_Balloc+0x7c>)
 810e2da:	216b      	movs	r1, #107	@ 0x6b
 810e2dc:	f001 ff34 	bl	8110148 <__assert_func>
 810e2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e2e4:	6006      	str	r6, [r0, #0]
 810e2e6:	60c6      	str	r6, [r0, #12]
 810e2e8:	69e6      	ldr	r6, [r4, #28]
 810e2ea:	68f3      	ldr	r3, [r6, #12]
 810e2ec:	b183      	cbz	r3, 810e310 <_Balloc+0x50>
 810e2ee:	69e3      	ldr	r3, [r4, #28]
 810e2f0:	68db      	ldr	r3, [r3, #12]
 810e2f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810e2f6:	b9b8      	cbnz	r0, 810e328 <_Balloc+0x68>
 810e2f8:	2101      	movs	r1, #1
 810e2fa:	fa01 f605 	lsl.w	r6, r1, r5
 810e2fe:	1d72      	adds	r2, r6, #5
 810e300:	0092      	lsls	r2, r2, #2
 810e302:	4620      	mov	r0, r4
 810e304:	f001 ff3e 	bl	8110184 <_calloc_r>
 810e308:	b160      	cbz	r0, 810e324 <_Balloc+0x64>
 810e30a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810e30e:	e00e      	b.n	810e32e <_Balloc+0x6e>
 810e310:	2221      	movs	r2, #33	@ 0x21
 810e312:	2104      	movs	r1, #4
 810e314:	4620      	mov	r0, r4
 810e316:	f001 ff35 	bl	8110184 <_calloc_r>
 810e31a:	69e3      	ldr	r3, [r4, #28]
 810e31c:	60f0      	str	r0, [r6, #12]
 810e31e:	68db      	ldr	r3, [r3, #12]
 810e320:	2b00      	cmp	r3, #0
 810e322:	d1e4      	bne.n	810e2ee <_Balloc+0x2e>
 810e324:	2000      	movs	r0, #0
 810e326:	bd70      	pop	{r4, r5, r6, pc}
 810e328:	6802      	ldr	r2, [r0, #0]
 810e32a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810e32e:	2300      	movs	r3, #0
 810e330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810e334:	e7f7      	b.n	810e326 <_Balloc+0x66>
 810e336:	bf00      	nop
 810e338:	0811205e 	.word	0x0811205e
 810e33c:	081120de 	.word	0x081120de

0810e340 <_Bfree>:
 810e340:	b570      	push	{r4, r5, r6, lr}
 810e342:	69c6      	ldr	r6, [r0, #28]
 810e344:	4605      	mov	r5, r0
 810e346:	460c      	mov	r4, r1
 810e348:	b976      	cbnz	r6, 810e368 <_Bfree+0x28>
 810e34a:	2010      	movs	r0, #16
 810e34c:	f7ff ff02 	bl	810e154 <malloc>
 810e350:	4602      	mov	r2, r0
 810e352:	61e8      	str	r0, [r5, #28]
 810e354:	b920      	cbnz	r0, 810e360 <_Bfree+0x20>
 810e356:	4b09      	ldr	r3, [pc, #36]	@ (810e37c <_Bfree+0x3c>)
 810e358:	4809      	ldr	r0, [pc, #36]	@ (810e380 <_Bfree+0x40>)
 810e35a:	218f      	movs	r1, #143	@ 0x8f
 810e35c:	f001 fef4 	bl	8110148 <__assert_func>
 810e360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e364:	6006      	str	r6, [r0, #0]
 810e366:	60c6      	str	r6, [r0, #12]
 810e368:	b13c      	cbz	r4, 810e37a <_Bfree+0x3a>
 810e36a:	69eb      	ldr	r3, [r5, #28]
 810e36c:	6862      	ldr	r2, [r4, #4]
 810e36e:	68db      	ldr	r3, [r3, #12]
 810e370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810e374:	6021      	str	r1, [r4, #0]
 810e376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810e37a:	bd70      	pop	{r4, r5, r6, pc}
 810e37c:	0811205e 	.word	0x0811205e
 810e380:	081120de 	.word	0x081120de

0810e384 <__multadd>:
 810e384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e388:	690d      	ldr	r5, [r1, #16]
 810e38a:	4607      	mov	r7, r0
 810e38c:	460c      	mov	r4, r1
 810e38e:	461e      	mov	r6, r3
 810e390:	f101 0c14 	add.w	ip, r1, #20
 810e394:	2000      	movs	r0, #0
 810e396:	f8dc 3000 	ldr.w	r3, [ip]
 810e39a:	b299      	uxth	r1, r3
 810e39c:	fb02 6101 	mla	r1, r2, r1, r6
 810e3a0:	0c1e      	lsrs	r6, r3, #16
 810e3a2:	0c0b      	lsrs	r3, r1, #16
 810e3a4:	fb02 3306 	mla	r3, r2, r6, r3
 810e3a8:	b289      	uxth	r1, r1
 810e3aa:	3001      	adds	r0, #1
 810e3ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810e3b0:	4285      	cmp	r5, r0
 810e3b2:	f84c 1b04 	str.w	r1, [ip], #4
 810e3b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810e3ba:	dcec      	bgt.n	810e396 <__multadd+0x12>
 810e3bc:	b30e      	cbz	r6, 810e402 <__multadd+0x7e>
 810e3be:	68a3      	ldr	r3, [r4, #8]
 810e3c0:	42ab      	cmp	r3, r5
 810e3c2:	dc19      	bgt.n	810e3f8 <__multadd+0x74>
 810e3c4:	6861      	ldr	r1, [r4, #4]
 810e3c6:	4638      	mov	r0, r7
 810e3c8:	3101      	adds	r1, #1
 810e3ca:	f7ff ff79 	bl	810e2c0 <_Balloc>
 810e3ce:	4680      	mov	r8, r0
 810e3d0:	b928      	cbnz	r0, 810e3de <__multadd+0x5a>
 810e3d2:	4602      	mov	r2, r0
 810e3d4:	4b0c      	ldr	r3, [pc, #48]	@ (810e408 <__multadd+0x84>)
 810e3d6:	480d      	ldr	r0, [pc, #52]	@ (810e40c <__multadd+0x88>)
 810e3d8:	21ba      	movs	r1, #186	@ 0xba
 810e3da:	f001 feb5 	bl	8110148 <__assert_func>
 810e3de:	6922      	ldr	r2, [r4, #16]
 810e3e0:	3202      	adds	r2, #2
 810e3e2:	f104 010c 	add.w	r1, r4, #12
 810e3e6:	0092      	lsls	r2, r2, #2
 810e3e8:	300c      	adds	r0, #12
 810e3ea:	f7ff f808 	bl	810d3fe <memcpy>
 810e3ee:	4621      	mov	r1, r4
 810e3f0:	4638      	mov	r0, r7
 810e3f2:	f7ff ffa5 	bl	810e340 <_Bfree>
 810e3f6:	4644      	mov	r4, r8
 810e3f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810e3fc:	3501      	adds	r5, #1
 810e3fe:	615e      	str	r6, [r3, #20]
 810e400:	6125      	str	r5, [r4, #16]
 810e402:	4620      	mov	r0, r4
 810e404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e408:	081120cd 	.word	0x081120cd
 810e40c:	081120de 	.word	0x081120de

0810e410 <__s2b>:
 810e410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e414:	460c      	mov	r4, r1
 810e416:	4615      	mov	r5, r2
 810e418:	461f      	mov	r7, r3
 810e41a:	2209      	movs	r2, #9
 810e41c:	3308      	adds	r3, #8
 810e41e:	4606      	mov	r6, r0
 810e420:	fb93 f3f2 	sdiv	r3, r3, r2
 810e424:	2100      	movs	r1, #0
 810e426:	2201      	movs	r2, #1
 810e428:	429a      	cmp	r2, r3
 810e42a:	db09      	blt.n	810e440 <__s2b+0x30>
 810e42c:	4630      	mov	r0, r6
 810e42e:	f7ff ff47 	bl	810e2c0 <_Balloc>
 810e432:	b940      	cbnz	r0, 810e446 <__s2b+0x36>
 810e434:	4602      	mov	r2, r0
 810e436:	4b19      	ldr	r3, [pc, #100]	@ (810e49c <__s2b+0x8c>)
 810e438:	4819      	ldr	r0, [pc, #100]	@ (810e4a0 <__s2b+0x90>)
 810e43a:	21d3      	movs	r1, #211	@ 0xd3
 810e43c:	f001 fe84 	bl	8110148 <__assert_func>
 810e440:	0052      	lsls	r2, r2, #1
 810e442:	3101      	adds	r1, #1
 810e444:	e7f0      	b.n	810e428 <__s2b+0x18>
 810e446:	9b08      	ldr	r3, [sp, #32]
 810e448:	6143      	str	r3, [r0, #20]
 810e44a:	2d09      	cmp	r5, #9
 810e44c:	f04f 0301 	mov.w	r3, #1
 810e450:	6103      	str	r3, [r0, #16]
 810e452:	dd16      	ble.n	810e482 <__s2b+0x72>
 810e454:	f104 0909 	add.w	r9, r4, #9
 810e458:	46c8      	mov	r8, r9
 810e45a:	442c      	add	r4, r5
 810e45c:	f818 3b01 	ldrb.w	r3, [r8], #1
 810e460:	4601      	mov	r1, r0
 810e462:	3b30      	subs	r3, #48	@ 0x30
 810e464:	220a      	movs	r2, #10
 810e466:	4630      	mov	r0, r6
 810e468:	f7ff ff8c 	bl	810e384 <__multadd>
 810e46c:	45a0      	cmp	r8, r4
 810e46e:	d1f5      	bne.n	810e45c <__s2b+0x4c>
 810e470:	f1a5 0408 	sub.w	r4, r5, #8
 810e474:	444c      	add	r4, r9
 810e476:	1b2d      	subs	r5, r5, r4
 810e478:	1963      	adds	r3, r4, r5
 810e47a:	42bb      	cmp	r3, r7
 810e47c:	db04      	blt.n	810e488 <__s2b+0x78>
 810e47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e482:	340a      	adds	r4, #10
 810e484:	2509      	movs	r5, #9
 810e486:	e7f6      	b.n	810e476 <__s2b+0x66>
 810e488:	f814 3b01 	ldrb.w	r3, [r4], #1
 810e48c:	4601      	mov	r1, r0
 810e48e:	3b30      	subs	r3, #48	@ 0x30
 810e490:	220a      	movs	r2, #10
 810e492:	4630      	mov	r0, r6
 810e494:	f7ff ff76 	bl	810e384 <__multadd>
 810e498:	e7ee      	b.n	810e478 <__s2b+0x68>
 810e49a:	bf00      	nop
 810e49c:	081120cd 	.word	0x081120cd
 810e4a0:	081120de 	.word	0x081120de

0810e4a4 <__hi0bits>:
 810e4a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810e4a8:	4603      	mov	r3, r0
 810e4aa:	bf36      	itet	cc
 810e4ac:	0403      	lslcc	r3, r0, #16
 810e4ae:	2000      	movcs	r0, #0
 810e4b0:	2010      	movcc	r0, #16
 810e4b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810e4b6:	bf3c      	itt	cc
 810e4b8:	021b      	lslcc	r3, r3, #8
 810e4ba:	3008      	addcc	r0, #8
 810e4bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810e4c0:	bf3c      	itt	cc
 810e4c2:	011b      	lslcc	r3, r3, #4
 810e4c4:	3004      	addcc	r0, #4
 810e4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810e4ca:	bf3c      	itt	cc
 810e4cc:	009b      	lslcc	r3, r3, #2
 810e4ce:	3002      	addcc	r0, #2
 810e4d0:	2b00      	cmp	r3, #0
 810e4d2:	db05      	blt.n	810e4e0 <__hi0bits+0x3c>
 810e4d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810e4d8:	f100 0001 	add.w	r0, r0, #1
 810e4dc:	bf08      	it	eq
 810e4de:	2020      	moveq	r0, #32
 810e4e0:	4770      	bx	lr

0810e4e2 <__lo0bits>:
 810e4e2:	6803      	ldr	r3, [r0, #0]
 810e4e4:	4602      	mov	r2, r0
 810e4e6:	f013 0007 	ands.w	r0, r3, #7
 810e4ea:	d00b      	beq.n	810e504 <__lo0bits+0x22>
 810e4ec:	07d9      	lsls	r1, r3, #31
 810e4ee:	d421      	bmi.n	810e534 <__lo0bits+0x52>
 810e4f0:	0798      	lsls	r0, r3, #30
 810e4f2:	bf49      	itett	mi
 810e4f4:	085b      	lsrmi	r3, r3, #1
 810e4f6:	089b      	lsrpl	r3, r3, #2
 810e4f8:	2001      	movmi	r0, #1
 810e4fa:	6013      	strmi	r3, [r2, #0]
 810e4fc:	bf5c      	itt	pl
 810e4fe:	6013      	strpl	r3, [r2, #0]
 810e500:	2002      	movpl	r0, #2
 810e502:	4770      	bx	lr
 810e504:	b299      	uxth	r1, r3
 810e506:	b909      	cbnz	r1, 810e50c <__lo0bits+0x2a>
 810e508:	0c1b      	lsrs	r3, r3, #16
 810e50a:	2010      	movs	r0, #16
 810e50c:	b2d9      	uxtb	r1, r3
 810e50e:	b909      	cbnz	r1, 810e514 <__lo0bits+0x32>
 810e510:	3008      	adds	r0, #8
 810e512:	0a1b      	lsrs	r3, r3, #8
 810e514:	0719      	lsls	r1, r3, #28
 810e516:	bf04      	itt	eq
 810e518:	091b      	lsreq	r3, r3, #4
 810e51a:	3004      	addeq	r0, #4
 810e51c:	0799      	lsls	r1, r3, #30
 810e51e:	bf04      	itt	eq
 810e520:	089b      	lsreq	r3, r3, #2
 810e522:	3002      	addeq	r0, #2
 810e524:	07d9      	lsls	r1, r3, #31
 810e526:	d403      	bmi.n	810e530 <__lo0bits+0x4e>
 810e528:	085b      	lsrs	r3, r3, #1
 810e52a:	f100 0001 	add.w	r0, r0, #1
 810e52e:	d003      	beq.n	810e538 <__lo0bits+0x56>
 810e530:	6013      	str	r3, [r2, #0]
 810e532:	4770      	bx	lr
 810e534:	2000      	movs	r0, #0
 810e536:	4770      	bx	lr
 810e538:	2020      	movs	r0, #32
 810e53a:	4770      	bx	lr

0810e53c <__i2b>:
 810e53c:	b510      	push	{r4, lr}
 810e53e:	460c      	mov	r4, r1
 810e540:	2101      	movs	r1, #1
 810e542:	f7ff febd 	bl	810e2c0 <_Balloc>
 810e546:	4602      	mov	r2, r0
 810e548:	b928      	cbnz	r0, 810e556 <__i2b+0x1a>
 810e54a:	4b05      	ldr	r3, [pc, #20]	@ (810e560 <__i2b+0x24>)
 810e54c:	4805      	ldr	r0, [pc, #20]	@ (810e564 <__i2b+0x28>)
 810e54e:	f240 1145 	movw	r1, #325	@ 0x145
 810e552:	f001 fdf9 	bl	8110148 <__assert_func>
 810e556:	2301      	movs	r3, #1
 810e558:	6144      	str	r4, [r0, #20]
 810e55a:	6103      	str	r3, [r0, #16]
 810e55c:	bd10      	pop	{r4, pc}
 810e55e:	bf00      	nop
 810e560:	081120cd 	.word	0x081120cd
 810e564:	081120de 	.word	0x081120de

0810e568 <__multiply>:
 810e568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e56c:	4614      	mov	r4, r2
 810e56e:	690a      	ldr	r2, [r1, #16]
 810e570:	6923      	ldr	r3, [r4, #16]
 810e572:	429a      	cmp	r2, r3
 810e574:	bfa8      	it	ge
 810e576:	4623      	movge	r3, r4
 810e578:	460f      	mov	r7, r1
 810e57a:	bfa4      	itt	ge
 810e57c:	460c      	movge	r4, r1
 810e57e:	461f      	movge	r7, r3
 810e580:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810e584:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810e588:	68a3      	ldr	r3, [r4, #8]
 810e58a:	6861      	ldr	r1, [r4, #4]
 810e58c:	eb0a 0609 	add.w	r6, sl, r9
 810e590:	42b3      	cmp	r3, r6
 810e592:	b085      	sub	sp, #20
 810e594:	bfb8      	it	lt
 810e596:	3101      	addlt	r1, #1
 810e598:	f7ff fe92 	bl	810e2c0 <_Balloc>
 810e59c:	b930      	cbnz	r0, 810e5ac <__multiply+0x44>
 810e59e:	4602      	mov	r2, r0
 810e5a0:	4b44      	ldr	r3, [pc, #272]	@ (810e6b4 <__multiply+0x14c>)
 810e5a2:	4845      	ldr	r0, [pc, #276]	@ (810e6b8 <__multiply+0x150>)
 810e5a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810e5a8:	f001 fdce 	bl	8110148 <__assert_func>
 810e5ac:	f100 0514 	add.w	r5, r0, #20
 810e5b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810e5b4:	462b      	mov	r3, r5
 810e5b6:	2200      	movs	r2, #0
 810e5b8:	4543      	cmp	r3, r8
 810e5ba:	d321      	bcc.n	810e600 <__multiply+0x98>
 810e5bc:	f107 0114 	add.w	r1, r7, #20
 810e5c0:	f104 0214 	add.w	r2, r4, #20
 810e5c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810e5c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810e5cc:	9302      	str	r3, [sp, #8]
 810e5ce:	1b13      	subs	r3, r2, r4
 810e5d0:	3b15      	subs	r3, #21
 810e5d2:	f023 0303 	bic.w	r3, r3, #3
 810e5d6:	3304      	adds	r3, #4
 810e5d8:	f104 0715 	add.w	r7, r4, #21
 810e5dc:	42ba      	cmp	r2, r7
 810e5de:	bf38      	it	cc
 810e5e0:	2304      	movcc	r3, #4
 810e5e2:	9301      	str	r3, [sp, #4]
 810e5e4:	9b02      	ldr	r3, [sp, #8]
 810e5e6:	9103      	str	r1, [sp, #12]
 810e5e8:	428b      	cmp	r3, r1
 810e5ea:	d80c      	bhi.n	810e606 <__multiply+0x9e>
 810e5ec:	2e00      	cmp	r6, #0
 810e5ee:	dd03      	ble.n	810e5f8 <__multiply+0x90>
 810e5f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810e5f4:	2b00      	cmp	r3, #0
 810e5f6:	d05b      	beq.n	810e6b0 <__multiply+0x148>
 810e5f8:	6106      	str	r6, [r0, #16]
 810e5fa:	b005      	add	sp, #20
 810e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e600:	f843 2b04 	str.w	r2, [r3], #4
 810e604:	e7d8      	b.n	810e5b8 <__multiply+0x50>
 810e606:	f8b1 a000 	ldrh.w	sl, [r1]
 810e60a:	f1ba 0f00 	cmp.w	sl, #0
 810e60e:	d024      	beq.n	810e65a <__multiply+0xf2>
 810e610:	f104 0e14 	add.w	lr, r4, #20
 810e614:	46a9      	mov	r9, r5
 810e616:	f04f 0c00 	mov.w	ip, #0
 810e61a:	f85e 7b04 	ldr.w	r7, [lr], #4
 810e61e:	f8d9 3000 	ldr.w	r3, [r9]
 810e622:	fa1f fb87 	uxth.w	fp, r7
 810e626:	b29b      	uxth	r3, r3
 810e628:	fb0a 330b 	mla	r3, sl, fp, r3
 810e62c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810e630:	f8d9 7000 	ldr.w	r7, [r9]
 810e634:	4463      	add	r3, ip
 810e636:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810e63a:	fb0a c70b 	mla	r7, sl, fp, ip
 810e63e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810e642:	b29b      	uxth	r3, r3
 810e644:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810e648:	4572      	cmp	r2, lr
 810e64a:	f849 3b04 	str.w	r3, [r9], #4
 810e64e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810e652:	d8e2      	bhi.n	810e61a <__multiply+0xb2>
 810e654:	9b01      	ldr	r3, [sp, #4]
 810e656:	f845 c003 	str.w	ip, [r5, r3]
 810e65a:	9b03      	ldr	r3, [sp, #12]
 810e65c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810e660:	3104      	adds	r1, #4
 810e662:	f1b9 0f00 	cmp.w	r9, #0
 810e666:	d021      	beq.n	810e6ac <__multiply+0x144>
 810e668:	682b      	ldr	r3, [r5, #0]
 810e66a:	f104 0c14 	add.w	ip, r4, #20
 810e66e:	46ae      	mov	lr, r5
 810e670:	f04f 0a00 	mov.w	sl, #0
 810e674:	f8bc b000 	ldrh.w	fp, [ip]
 810e678:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810e67c:	fb09 770b 	mla	r7, r9, fp, r7
 810e680:	4457      	add	r7, sl
 810e682:	b29b      	uxth	r3, r3
 810e684:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810e688:	f84e 3b04 	str.w	r3, [lr], #4
 810e68c:	f85c 3b04 	ldr.w	r3, [ip], #4
 810e690:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810e694:	f8be 3000 	ldrh.w	r3, [lr]
 810e698:	fb09 330a 	mla	r3, r9, sl, r3
 810e69c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810e6a0:	4562      	cmp	r2, ip
 810e6a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810e6a6:	d8e5      	bhi.n	810e674 <__multiply+0x10c>
 810e6a8:	9f01      	ldr	r7, [sp, #4]
 810e6aa:	51eb      	str	r3, [r5, r7]
 810e6ac:	3504      	adds	r5, #4
 810e6ae:	e799      	b.n	810e5e4 <__multiply+0x7c>
 810e6b0:	3e01      	subs	r6, #1
 810e6b2:	e79b      	b.n	810e5ec <__multiply+0x84>
 810e6b4:	081120cd 	.word	0x081120cd
 810e6b8:	081120de 	.word	0x081120de

0810e6bc <__pow5mult>:
 810e6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e6c0:	4615      	mov	r5, r2
 810e6c2:	f012 0203 	ands.w	r2, r2, #3
 810e6c6:	4607      	mov	r7, r0
 810e6c8:	460e      	mov	r6, r1
 810e6ca:	d007      	beq.n	810e6dc <__pow5mult+0x20>
 810e6cc:	4c25      	ldr	r4, [pc, #148]	@ (810e764 <__pow5mult+0xa8>)
 810e6ce:	3a01      	subs	r2, #1
 810e6d0:	2300      	movs	r3, #0
 810e6d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810e6d6:	f7ff fe55 	bl	810e384 <__multadd>
 810e6da:	4606      	mov	r6, r0
 810e6dc:	10ad      	asrs	r5, r5, #2
 810e6de:	d03d      	beq.n	810e75c <__pow5mult+0xa0>
 810e6e0:	69fc      	ldr	r4, [r7, #28]
 810e6e2:	b97c      	cbnz	r4, 810e704 <__pow5mult+0x48>
 810e6e4:	2010      	movs	r0, #16
 810e6e6:	f7ff fd35 	bl	810e154 <malloc>
 810e6ea:	4602      	mov	r2, r0
 810e6ec:	61f8      	str	r0, [r7, #28]
 810e6ee:	b928      	cbnz	r0, 810e6fc <__pow5mult+0x40>
 810e6f0:	4b1d      	ldr	r3, [pc, #116]	@ (810e768 <__pow5mult+0xac>)
 810e6f2:	481e      	ldr	r0, [pc, #120]	@ (810e76c <__pow5mult+0xb0>)
 810e6f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810e6f8:	f001 fd26 	bl	8110148 <__assert_func>
 810e6fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810e700:	6004      	str	r4, [r0, #0]
 810e702:	60c4      	str	r4, [r0, #12]
 810e704:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810e708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810e70c:	b94c      	cbnz	r4, 810e722 <__pow5mult+0x66>
 810e70e:	f240 2171 	movw	r1, #625	@ 0x271
 810e712:	4638      	mov	r0, r7
 810e714:	f7ff ff12 	bl	810e53c <__i2b>
 810e718:	2300      	movs	r3, #0
 810e71a:	f8c8 0008 	str.w	r0, [r8, #8]
 810e71e:	4604      	mov	r4, r0
 810e720:	6003      	str	r3, [r0, #0]
 810e722:	f04f 0900 	mov.w	r9, #0
 810e726:	07eb      	lsls	r3, r5, #31
 810e728:	d50a      	bpl.n	810e740 <__pow5mult+0x84>
 810e72a:	4631      	mov	r1, r6
 810e72c:	4622      	mov	r2, r4
 810e72e:	4638      	mov	r0, r7
 810e730:	f7ff ff1a 	bl	810e568 <__multiply>
 810e734:	4631      	mov	r1, r6
 810e736:	4680      	mov	r8, r0
 810e738:	4638      	mov	r0, r7
 810e73a:	f7ff fe01 	bl	810e340 <_Bfree>
 810e73e:	4646      	mov	r6, r8
 810e740:	106d      	asrs	r5, r5, #1
 810e742:	d00b      	beq.n	810e75c <__pow5mult+0xa0>
 810e744:	6820      	ldr	r0, [r4, #0]
 810e746:	b938      	cbnz	r0, 810e758 <__pow5mult+0x9c>
 810e748:	4622      	mov	r2, r4
 810e74a:	4621      	mov	r1, r4
 810e74c:	4638      	mov	r0, r7
 810e74e:	f7ff ff0b 	bl	810e568 <__multiply>
 810e752:	6020      	str	r0, [r4, #0]
 810e754:	f8c0 9000 	str.w	r9, [r0]
 810e758:	4604      	mov	r4, r0
 810e75a:	e7e4      	b.n	810e726 <__pow5mult+0x6a>
 810e75c:	4630      	mov	r0, r6
 810e75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e762:	bf00      	nop
 810e764:	08112138 	.word	0x08112138
 810e768:	0811205e 	.word	0x0811205e
 810e76c:	081120de 	.word	0x081120de

0810e770 <__lshift>:
 810e770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810e774:	460c      	mov	r4, r1
 810e776:	6849      	ldr	r1, [r1, #4]
 810e778:	6923      	ldr	r3, [r4, #16]
 810e77a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810e77e:	68a3      	ldr	r3, [r4, #8]
 810e780:	4607      	mov	r7, r0
 810e782:	4691      	mov	r9, r2
 810e784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810e788:	f108 0601 	add.w	r6, r8, #1
 810e78c:	42b3      	cmp	r3, r6
 810e78e:	db0b      	blt.n	810e7a8 <__lshift+0x38>
 810e790:	4638      	mov	r0, r7
 810e792:	f7ff fd95 	bl	810e2c0 <_Balloc>
 810e796:	4605      	mov	r5, r0
 810e798:	b948      	cbnz	r0, 810e7ae <__lshift+0x3e>
 810e79a:	4602      	mov	r2, r0
 810e79c:	4b28      	ldr	r3, [pc, #160]	@ (810e840 <__lshift+0xd0>)
 810e79e:	4829      	ldr	r0, [pc, #164]	@ (810e844 <__lshift+0xd4>)
 810e7a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810e7a4:	f001 fcd0 	bl	8110148 <__assert_func>
 810e7a8:	3101      	adds	r1, #1
 810e7aa:	005b      	lsls	r3, r3, #1
 810e7ac:	e7ee      	b.n	810e78c <__lshift+0x1c>
 810e7ae:	2300      	movs	r3, #0
 810e7b0:	f100 0114 	add.w	r1, r0, #20
 810e7b4:	f100 0210 	add.w	r2, r0, #16
 810e7b8:	4618      	mov	r0, r3
 810e7ba:	4553      	cmp	r3, sl
 810e7bc:	db33      	blt.n	810e826 <__lshift+0xb6>
 810e7be:	6920      	ldr	r0, [r4, #16]
 810e7c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810e7c4:	f104 0314 	add.w	r3, r4, #20
 810e7c8:	f019 091f 	ands.w	r9, r9, #31
 810e7cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810e7d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810e7d4:	d02b      	beq.n	810e82e <__lshift+0xbe>
 810e7d6:	f1c9 0e20 	rsb	lr, r9, #32
 810e7da:	468a      	mov	sl, r1
 810e7dc:	2200      	movs	r2, #0
 810e7de:	6818      	ldr	r0, [r3, #0]
 810e7e0:	fa00 f009 	lsl.w	r0, r0, r9
 810e7e4:	4310      	orrs	r0, r2
 810e7e6:	f84a 0b04 	str.w	r0, [sl], #4
 810e7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 810e7ee:	459c      	cmp	ip, r3
 810e7f0:	fa22 f20e 	lsr.w	r2, r2, lr
 810e7f4:	d8f3      	bhi.n	810e7de <__lshift+0x6e>
 810e7f6:	ebac 0304 	sub.w	r3, ip, r4
 810e7fa:	3b15      	subs	r3, #21
 810e7fc:	f023 0303 	bic.w	r3, r3, #3
 810e800:	3304      	adds	r3, #4
 810e802:	f104 0015 	add.w	r0, r4, #21
 810e806:	4584      	cmp	ip, r0
 810e808:	bf38      	it	cc
 810e80a:	2304      	movcc	r3, #4
 810e80c:	50ca      	str	r2, [r1, r3]
 810e80e:	b10a      	cbz	r2, 810e814 <__lshift+0xa4>
 810e810:	f108 0602 	add.w	r6, r8, #2
 810e814:	3e01      	subs	r6, #1
 810e816:	4638      	mov	r0, r7
 810e818:	612e      	str	r6, [r5, #16]
 810e81a:	4621      	mov	r1, r4
 810e81c:	f7ff fd90 	bl	810e340 <_Bfree>
 810e820:	4628      	mov	r0, r5
 810e822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810e826:	f842 0f04 	str.w	r0, [r2, #4]!
 810e82a:	3301      	adds	r3, #1
 810e82c:	e7c5      	b.n	810e7ba <__lshift+0x4a>
 810e82e:	3904      	subs	r1, #4
 810e830:	f853 2b04 	ldr.w	r2, [r3], #4
 810e834:	f841 2f04 	str.w	r2, [r1, #4]!
 810e838:	459c      	cmp	ip, r3
 810e83a:	d8f9      	bhi.n	810e830 <__lshift+0xc0>
 810e83c:	e7ea      	b.n	810e814 <__lshift+0xa4>
 810e83e:	bf00      	nop
 810e840:	081120cd 	.word	0x081120cd
 810e844:	081120de 	.word	0x081120de

0810e848 <__mcmp>:
 810e848:	690a      	ldr	r2, [r1, #16]
 810e84a:	4603      	mov	r3, r0
 810e84c:	6900      	ldr	r0, [r0, #16]
 810e84e:	1a80      	subs	r0, r0, r2
 810e850:	b530      	push	{r4, r5, lr}
 810e852:	d10e      	bne.n	810e872 <__mcmp+0x2a>
 810e854:	3314      	adds	r3, #20
 810e856:	3114      	adds	r1, #20
 810e858:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810e85c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810e860:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810e864:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810e868:	4295      	cmp	r5, r2
 810e86a:	d003      	beq.n	810e874 <__mcmp+0x2c>
 810e86c:	d205      	bcs.n	810e87a <__mcmp+0x32>
 810e86e:	f04f 30ff 	mov.w	r0, #4294967295
 810e872:	bd30      	pop	{r4, r5, pc}
 810e874:	42a3      	cmp	r3, r4
 810e876:	d3f3      	bcc.n	810e860 <__mcmp+0x18>
 810e878:	e7fb      	b.n	810e872 <__mcmp+0x2a>
 810e87a:	2001      	movs	r0, #1
 810e87c:	e7f9      	b.n	810e872 <__mcmp+0x2a>
	...

0810e880 <__mdiff>:
 810e880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e884:	4689      	mov	r9, r1
 810e886:	4606      	mov	r6, r0
 810e888:	4611      	mov	r1, r2
 810e88a:	4648      	mov	r0, r9
 810e88c:	4614      	mov	r4, r2
 810e88e:	f7ff ffdb 	bl	810e848 <__mcmp>
 810e892:	1e05      	subs	r5, r0, #0
 810e894:	d112      	bne.n	810e8bc <__mdiff+0x3c>
 810e896:	4629      	mov	r1, r5
 810e898:	4630      	mov	r0, r6
 810e89a:	f7ff fd11 	bl	810e2c0 <_Balloc>
 810e89e:	4602      	mov	r2, r0
 810e8a0:	b928      	cbnz	r0, 810e8ae <__mdiff+0x2e>
 810e8a2:	4b3f      	ldr	r3, [pc, #252]	@ (810e9a0 <__mdiff+0x120>)
 810e8a4:	f240 2137 	movw	r1, #567	@ 0x237
 810e8a8:	483e      	ldr	r0, [pc, #248]	@ (810e9a4 <__mdiff+0x124>)
 810e8aa:	f001 fc4d 	bl	8110148 <__assert_func>
 810e8ae:	2301      	movs	r3, #1
 810e8b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810e8b4:	4610      	mov	r0, r2
 810e8b6:	b003      	add	sp, #12
 810e8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e8bc:	bfbc      	itt	lt
 810e8be:	464b      	movlt	r3, r9
 810e8c0:	46a1      	movlt	r9, r4
 810e8c2:	4630      	mov	r0, r6
 810e8c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810e8c8:	bfba      	itte	lt
 810e8ca:	461c      	movlt	r4, r3
 810e8cc:	2501      	movlt	r5, #1
 810e8ce:	2500      	movge	r5, #0
 810e8d0:	f7ff fcf6 	bl	810e2c0 <_Balloc>
 810e8d4:	4602      	mov	r2, r0
 810e8d6:	b918      	cbnz	r0, 810e8e0 <__mdiff+0x60>
 810e8d8:	4b31      	ldr	r3, [pc, #196]	@ (810e9a0 <__mdiff+0x120>)
 810e8da:	f240 2145 	movw	r1, #581	@ 0x245
 810e8de:	e7e3      	b.n	810e8a8 <__mdiff+0x28>
 810e8e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810e8e4:	6926      	ldr	r6, [r4, #16]
 810e8e6:	60c5      	str	r5, [r0, #12]
 810e8e8:	f109 0310 	add.w	r3, r9, #16
 810e8ec:	f109 0514 	add.w	r5, r9, #20
 810e8f0:	f104 0e14 	add.w	lr, r4, #20
 810e8f4:	f100 0b14 	add.w	fp, r0, #20
 810e8f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810e8fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810e900:	9301      	str	r3, [sp, #4]
 810e902:	46d9      	mov	r9, fp
 810e904:	f04f 0c00 	mov.w	ip, #0
 810e908:	9b01      	ldr	r3, [sp, #4]
 810e90a:	f85e 0b04 	ldr.w	r0, [lr], #4
 810e90e:	f853 af04 	ldr.w	sl, [r3, #4]!
 810e912:	9301      	str	r3, [sp, #4]
 810e914:	fa1f f38a 	uxth.w	r3, sl
 810e918:	4619      	mov	r1, r3
 810e91a:	b283      	uxth	r3, r0
 810e91c:	1acb      	subs	r3, r1, r3
 810e91e:	0c00      	lsrs	r0, r0, #16
 810e920:	4463      	add	r3, ip
 810e922:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810e926:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810e92a:	b29b      	uxth	r3, r3
 810e92c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810e930:	4576      	cmp	r6, lr
 810e932:	f849 3b04 	str.w	r3, [r9], #4
 810e936:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810e93a:	d8e5      	bhi.n	810e908 <__mdiff+0x88>
 810e93c:	1b33      	subs	r3, r6, r4
 810e93e:	3b15      	subs	r3, #21
 810e940:	f023 0303 	bic.w	r3, r3, #3
 810e944:	3415      	adds	r4, #21
 810e946:	3304      	adds	r3, #4
 810e948:	42a6      	cmp	r6, r4
 810e94a:	bf38      	it	cc
 810e94c:	2304      	movcc	r3, #4
 810e94e:	441d      	add	r5, r3
 810e950:	445b      	add	r3, fp
 810e952:	461e      	mov	r6, r3
 810e954:	462c      	mov	r4, r5
 810e956:	4544      	cmp	r4, r8
 810e958:	d30e      	bcc.n	810e978 <__mdiff+0xf8>
 810e95a:	f108 0103 	add.w	r1, r8, #3
 810e95e:	1b49      	subs	r1, r1, r5
 810e960:	f021 0103 	bic.w	r1, r1, #3
 810e964:	3d03      	subs	r5, #3
 810e966:	45a8      	cmp	r8, r5
 810e968:	bf38      	it	cc
 810e96a:	2100      	movcc	r1, #0
 810e96c:	440b      	add	r3, r1
 810e96e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810e972:	b191      	cbz	r1, 810e99a <__mdiff+0x11a>
 810e974:	6117      	str	r7, [r2, #16]
 810e976:	e79d      	b.n	810e8b4 <__mdiff+0x34>
 810e978:	f854 1b04 	ldr.w	r1, [r4], #4
 810e97c:	46e6      	mov	lr, ip
 810e97e:	0c08      	lsrs	r0, r1, #16
 810e980:	fa1c fc81 	uxtah	ip, ip, r1
 810e984:	4471      	add	r1, lr
 810e986:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810e98a:	b289      	uxth	r1, r1
 810e98c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810e990:	f846 1b04 	str.w	r1, [r6], #4
 810e994:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810e998:	e7dd      	b.n	810e956 <__mdiff+0xd6>
 810e99a:	3f01      	subs	r7, #1
 810e99c:	e7e7      	b.n	810e96e <__mdiff+0xee>
 810e99e:	bf00      	nop
 810e9a0:	081120cd 	.word	0x081120cd
 810e9a4:	081120de 	.word	0x081120de

0810e9a8 <__ulp>:
 810e9a8:	b082      	sub	sp, #8
 810e9aa:	ed8d 0b00 	vstr	d0, [sp]
 810e9ae:	9a01      	ldr	r2, [sp, #4]
 810e9b0:	4b0f      	ldr	r3, [pc, #60]	@ (810e9f0 <__ulp+0x48>)
 810e9b2:	4013      	ands	r3, r2
 810e9b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810e9b8:	2b00      	cmp	r3, #0
 810e9ba:	dc08      	bgt.n	810e9ce <__ulp+0x26>
 810e9bc:	425b      	negs	r3, r3
 810e9be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810e9c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 810e9c6:	da04      	bge.n	810e9d2 <__ulp+0x2a>
 810e9c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810e9cc:	4113      	asrs	r3, r2
 810e9ce:	2200      	movs	r2, #0
 810e9d0:	e008      	b.n	810e9e4 <__ulp+0x3c>
 810e9d2:	f1a2 0314 	sub.w	r3, r2, #20
 810e9d6:	2b1e      	cmp	r3, #30
 810e9d8:	bfda      	itte	le
 810e9da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810e9de:	40da      	lsrle	r2, r3
 810e9e0:	2201      	movgt	r2, #1
 810e9e2:	2300      	movs	r3, #0
 810e9e4:	4619      	mov	r1, r3
 810e9e6:	4610      	mov	r0, r2
 810e9e8:	ec41 0b10 	vmov	d0, r0, r1
 810e9ec:	b002      	add	sp, #8
 810e9ee:	4770      	bx	lr
 810e9f0:	7ff00000 	.word	0x7ff00000

0810e9f4 <__b2d>:
 810e9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e9f8:	6906      	ldr	r6, [r0, #16]
 810e9fa:	f100 0814 	add.w	r8, r0, #20
 810e9fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810ea02:	1f37      	subs	r7, r6, #4
 810ea04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810ea08:	4610      	mov	r0, r2
 810ea0a:	f7ff fd4b 	bl	810e4a4 <__hi0bits>
 810ea0e:	f1c0 0320 	rsb	r3, r0, #32
 810ea12:	280a      	cmp	r0, #10
 810ea14:	600b      	str	r3, [r1, #0]
 810ea16:	491b      	ldr	r1, [pc, #108]	@ (810ea84 <__b2d+0x90>)
 810ea18:	dc15      	bgt.n	810ea46 <__b2d+0x52>
 810ea1a:	f1c0 0c0b 	rsb	ip, r0, #11
 810ea1e:	fa22 f30c 	lsr.w	r3, r2, ip
 810ea22:	45b8      	cmp	r8, r7
 810ea24:	ea43 0501 	orr.w	r5, r3, r1
 810ea28:	bf34      	ite	cc
 810ea2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810ea2e:	2300      	movcs	r3, #0
 810ea30:	3015      	adds	r0, #21
 810ea32:	fa02 f000 	lsl.w	r0, r2, r0
 810ea36:	fa23 f30c 	lsr.w	r3, r3, ip
 810ea3a:	4303      	orrs	r3, r0
 810ea3c:	461c      	mov	r4, r3
 810ea3e:	ec45 4b10 	vmov	d0, r4, r5
 810ea42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ea46:	45b8      	cmp	r8, r7
 810ea48:	bf3a      	itte	cc
 810ea4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810ea4e:	f1a6 0708 	subcc.w	r7, r6, #8
 810ea52:	2300      	movcs	r3, #0
 810ea54:	380b      	subs	r0, #11
 810ea56:	d012      	beq.n	810ea7e <__b2d+0x8a>
 810ea58:	f1c0 0120 	rsb	r1, r0, #32
 810ea5c:	fa23 f401 	lsr.w	r4, r3, r1
 810ea60:	4082      	lsls	r2, r0
 810ea62:	4322      	orrs	r2, r4
 810ea64:	4547      	cmp	r7, r8
 810ea66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810ea6a:	bf8c      	ite	hi
 810ea6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810ea70:	2200      	movls	r2, #0
 810ea72:	4083      	lsls	r3, r0
 810ea74:	40ca      	lsrs	r2, r1
 810ea76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810ea7a:	4313      	orrs	r3, r2
 810ea7c:	e7de      	b.n	810ea3c <__b2d+0x48>
 810ea7e:	ea42 0501 	orr.w	r5, r2, r1
 810ea82:	e7db      	b.n	810ea3c <__b2d+0x48>
 810ea84:	3ff00000 	.word	0x3ff00000

0810ea88 <__d2b>:
 810ea88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ea8c:	460f      	mov	r7, r1
 810ea8e:	2101      	movs	r1, #1
 810ea90:	ec59 8b10 	vmov	r8, r9, d0
 810ea94:	4616      	mov	r6, r2
 810ea96:	f7ff fc13 	bl	810e2c0 <_Balloc>
 810ea9a:	4604      	mov	r4, r0
 810ea9c:	b930      	cbnz	r0, 810eaac <__d2b+0x24>
 810ea9e:	4602      	mov	r2, r0
 810eaa0:	4b23      	ldr	r3, [pc, #140]	@ (810eb30 <__d2b+0xa8>)
 810eaa2:	4824      	ldr	r0, [pc, #144]	@ (810eb34 <__d2b+0xac>)
 810eaa4:	f240 310f 	movw	r1, #783	@ 0x30f
 810eaa8:	f001 fb4e 	bl	8110148 <__assert_func>
 810eaac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810eab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810eab4:	b10d      	cbz	r5, 810eaba <__d2b+0x32>
 810eab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810eaba:	9301      	str	r3, [sp, #4]
 810eabc:	f1b8 0300 	subs.w	r3, r8, #0
 810eac0:	d023      	beq.n	810eb0a <__d2b+0x82>
 810eac2:	4668      	mov	r0, sp
 810eac4:	9300      	str	r3, [sp, #0]
 810eac6:	f7ff fd0c 	bl	810e4e2 <__lo0bits>
 810eaca:	e9dd 1200 	ldrd	r1, r2, [sp]
 810eace:	b1d0      	cbz	r0, 810eb06 <__d2b+0x7e>
 810ead0:	f1c0 0320 	rsb	r3, r0, #32
 810ead4:	fa02 f303 	lsl.w	r3, r2, r3
 810ead8:	430b      	orrs	r3, r1
 810eada:	40c2      	lsrs	r2, r0
 810eadc:	6163      	str	r3, [r4, #20]
 810eade:	9201      	str	r2, [sp, #4]
 810eae0:	9b01      	ldr	r3, [sp, #4]
 810eae2:	61a3      	str	r3, [r4, #24]
 810eae4:	2b00      	cmp	r3, #0
 810eae6:	bf0c      	ite	eq
 810eae8:	2201      	moveq	r2, #1
 810eaea:	2202      	movne	r2, #2
 810eaec:	6122      	str	r2, [r4, #16]
 810eaee:	b1a5      	cbz	r5, 810eb1a <__d2b+0x92>
 810eaf0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810eaf4:	4405      	add	r5, r0
 810eaf6:	603d      	str	r5, [r7, #0]
 810eaf8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810eafc:	6030      	str	r0, [r6, #0]
 810eafe:	4620      	mov	r0, r4
 810eb00:	b003      	add	sp, #12
 810eb02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810eb06:	6161      	str	r1, [r4, #20]
 810eb08:	e7ea      	b.n	810eae0 <__d2b+0x58>
 810eb0a:	a801      	add	r0, sp, #4
 810eb0c:	f7ff fce9 	bl	810e4e2 <__lo0bits>
 810eb10:	9b01      	ldr	r3, [sp, #4]
 810eb12:	6163      	str	r3, [r4, #20]
 810eb14:	3020      	adds	r0, #32
 810eb16:	2201      	movs	r2, #1
 810eb18:	e7e8      	b.n	810eaec <__d2b+0x64>
 810eb1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810eb1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810eb22:	6038      	str	r0, [r7, #0]
 810eb24:	6918      	ldr	r0, [r3, #16]
 810eb26:	f7ff fcbd 	bl	810e4a4 <__hi0bits>
 810eb2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810eb2e:	e7e5      	b.n	810eafc <__d2b+0x74>
 810eb30:	081120cd 	.word	0x081120cd
 810eb34:	081120de 	.word	0x081120de

0810eb38 <__ratio>:
 810eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810eb3c:	b085      	sub	sp, #20
 810eb3e:	e9cd 1000 	strd	r1, r0, [sp]
 810eb42:	a902      	add	r1, sp, #8
 810eb44:	f7ff ff56 	bl	810e9f4 <__b2d>
 810eb48:	9800      	ldr	r0, [sp, #0]
 810eb4a:	a903      	add	r1, sp, #12
 810eb4c:	ec55 4b10 	vmov	r4, r5, d0
 810eb50:	f7ff ff50 	bl	810e9f4 <__b2d>
 810eb54:	9b01      	ldr	r3, [sp, #4]
 810eb56:	6919      	ldr	r1, [r3, #16]
 810eb58:	9b00      	ldr	r3, [sp, #0]
 810eb5a:	691b      	ldr	r3, [r3, #16]
 810eb5c:	1ac9      	subs	r1, r1, r3
 810eb5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810eb62:	1a9b      	subs	r3, r3, r2
 810eb64:	ec5b ab10 	vmov	sl, fp, d0
 810eb68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810eb6c:	2b00      	cmp	r3, #0
 810eb6e:	bfce      	itee	gt
 810eb70:	462a      	movgt	r2, r5
 810eb72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810eb76:	465a      	movle	r2, fp
 810eb78:	462f      	mov	r7, r5
 810eb7a:	46d9      	mov	r9, fp
 810eb7c:	bfcc      	ite	gt
 810eb7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810eb82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810eb86:	464b      	mov	r3, r9
 810eb88:	4652      	mov	r2, sl
 810eb8a:	4620      	mov	r0, r4
 810eb8c:	4639      	mov	r1, r7
 810eb8e:	f7f1 fee5 	bl	810095c <__aeabi_ddiv>
 810eb92:	ec41 0b10 	vmov	d0, r0, r1
 810eb96:	b005      	add	sp, #20
 810eb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810eb9c <__copybits>:
 810eb9c:	3901      	subs	r1, #1
 810eb9e:	b570      	push	{r4, r5, r6, lr}
 810eba0:	1149      	asrs	r1, r1, #5
 810eba2:	6914      	ldr	r4, [r2, #16]
 810eba4:	3101      	adds	r1, #1
 810eba6:	f102 0314 	add.w	r3, r2, #20
 810ebaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ebae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ebb2:	1f05      	subs	r5, r0, #4
 810ebb4:	42a3      	cmp	r3, r4
 810ebb6:	d30c      	bcc.n	810ebd2 <__copybits+0x36>
 810ebb8:	1aa3      	subs	r3, r4, r2
 810ebba:	3b11      	subs	r3, #17
 810ebbc:	f023 0303 	bic.w	r3, r3, #3
 810ebc0:	3211      	adds	r2, #17
 810ebc2:	42a2      	cmp	r2, r4
 810ebc4:	bf88      	it	hi
 810ebc6:	2300      	movhi	r3, #0
 810ebc8:	4418      	add	r0, r3
 810ebca:	2300      	movs	r3, #0
 810ebcc:	4288      	cmp	r0, r1
 810ebce:	d305      	bcc.n	810ebdc <__copybits+0x40>
 810ebd0:	bd70      	pop	{r4, r5, r6, pc}
 810ebd2:	f853 6b04 	ldr.w	r6, [r3], #4
 810ebd6:	f845 6f04 	str.w	r6, [r5, #4]!
 810ebda:	e7eb      	b.n	810ebb4 <__copybits+0x18>
 810ebdc:	f840 3b04 	str.w	r3, [r0], #4
 810ebe0:	e7f4      	b.n	810ebcc <__copybits+0x30>

0810ebe2 <__any_on>:
 810ebe2:	f100 0214 	add.w	r2, r0, #20
 810ebe6:	6900      	ldr	r0, [r0, #16]
 810ebe8:	114b      	asrs	r3, r1, #5
 810ebea:	4298      	cmp	r0, r3
 810ebec:	b510      	push	{r4, lr}
 810ebee:	db11      	blt.n	810ec14 <__any_on+0x32>
 810ebf0:	dd0a      	ble.n	810ec08 <__any_on+0x26>
 810ebf2:	f011 011f 	ands.w	r1, r1, #31
 810ebf6:	d007      	beq.n	810ec08 <__any_on+0x26>
 810ebf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810ebfc:	fa24 f001 	lsr.w	r0, r4, r1
 810ec00:	fa00 f101 	lsl.w	r1, r0, r1
 810ec04:	428c      	cmp	r4, r1
 810ec06:	d10b      	bne.n	810ec20 <__any_on+0x3e>
 810ec08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810ec0c:	4293      	cmp	r3, r2
 810ec0e:	d803      	bhi.n	810ec18 <__any_on+0x36>
 810ec10:	2000      	movs	r0, #0
 810ec12:	bd10      	pop	{r4, pc}
 810ec14:	4603      	mov	r3, r0
 810ec16:	e7f7      	b.n	810ec08 <__any_on+0x26>
 810ec18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810ec1c:	2900      	cmp	r1, #0
 810ec1e:	d0f5      	beq.n	810ec0c <__any_on+0x2a>
 810ec20:	2001      	movs	r0, #1
 810ec22:	e7f6      	b.n	810ec12 <__any_on+0x30>

0810ec24 <sulp>:
 810ec24:	b570      	push	{r4, r5, r6, lr}
 810ec26:	4604      	mov	r4, r0
 810ec28:	460d      	mov	r5, r1
 810ec2a:	ec45 4b10 	vmov	d0, r4, r5
 810ec2e:	4616      	mov	r6, r2
 810ec30:	f7ff feba 	bl	810e9a8 <__ulp>
 810ec34:	ec51 0b10 	vmov	r0, r1, d0
 810ec38:	b17e      	cbz	r6, 810ec5a <sulp+0x36>
 810ec3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810ec3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810ec42:	2b00      	cmp	r3, #0
 810ec44:	dd09      	ble.n	810ec5a <sulp+0x36>
 810ec46:	051b      	lsls	r3, r3, #20
 810ec48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810ec4c:	2400      	movs	r4, #0
 810ec4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810ec52:	4622      	mov	r2, r4
 810ec54:	462b      	mov	r3, r5
 810ec56:	f7f1 fd57 	bl	8100708 <__aeabi_dmul>
 810ec5a:	ec41 0b10 	vmov	d0, r0, r1
 810ec5e:	bd70      	pop	{r4, r5, r6, pc}

0810ec60 <_strtod_l>:
 810ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ec64:	b09f      	sub	sp, #124	@ 0x7c
 810ec66:	460c      	mov	r4, r1
 810ec68:	9217      	str	r2, [sp, #92]	@ 0x5c
 810ec6a:	2200      	movs	r2, #0
 810ec6c:	921a      	str	r2, [sp, #104]	@ 0x68
 810ec6e:	9005      	str	r0, [sp, #20]
 810ec70:	f04f 0a00 	mov.w	sl, #0
 810ec74:	f04f 0b00 	mov.w	fp, #0
 810ec78:	460a      	mov	r2, r1
 810ec7a:	9219      	str	r2, [sp, #100]	@ 0x64
 810ec7c:	7811      	ldrb	r1, [r2, #0]
 810ec7e:	292b      	cmp	r1, #43	@ 0x2b
 810ec80:	d04a      	beq.n	810ed18 <_strtod_l+0xb8>
 810ec82:	d838      	bhi.n	810ecf6 <_strtod_l+0x96>
 810ec84:	290d      	cmp	r1, #13
 810ec86:	d832      	bhi.n	810ecee <_strtod_l+0x8e>
 810ec88:	2908      	cmp	r1, #8
 810ec8a:	d832      	bhi.n	810ecf2 <_strtod_l+0x92>
 810ec8c:	2900      	cmp	r1, #0
 810ec8e:	d03b      	beq.n	810ed08 <_strtod_l+0xa8>
 810ec90:	2200      	movs	r2, #0
 810ec92:	920b      	str	r2, [sp, #44]	@ 0x2c
 810ec94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810ec96:	782a      	ldrb	r2, [r5, #0]
 810ec98:	2a30      	cmp	r2, #48	@ 0x30
 810ec9a:	f040 80b3 	bne.w	810ee04 <_strtod_l+0x1a4>
 810ec9e:	786a      	ldrb	r2, [r5, #1]
 810eca0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810eca4:	2a58      	cmp	r2, #88	@ 0x58
 810eca6:	d16e      	bne.n	810ed86 <_strtod_l+0x126>
 810eca8:	9302      	str	r3, [sp, #8]
 810ecaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ecac:	9301      	str	r3, [sp, #4]
 810ecae:	ab1a      	add	r3, sp, #104	@ 0x68
 810ecb0:	9300      	str	r3, [sp, #0]
 810ecb2:	4a8e      	ldr	r2, [pc, #568]	@ (810eeec <_strtod_l+0x28c>)
 810ecb4:	9805      	ldr	r0, [sp, #20]
 810ecb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 810ecb8:	a919      	add	r1, sp, #100	@ 0x64
 810ecba:	f001 fadf 	bl	811027c <__gethex>
 810ecbe:	f010 060f 	ands.w	r6, r0, #15
 810ecc2:	4604      	mov	r4, r0
 810ecc4:	d005      	beq.n	810ecd2 <_strtod_l+0x72>
 810ecc6:	2e06      	cmp	r6, #6
 810ecc8:	d128      	bne.n	810ed1c <_strtod_l+0xbc>
 810ecca:	3501      	adds	r5, #1
 810eccc:	2300      	movs	r3, #0
 810ecce:	9519      	str	r5, [sp, #100]	@ 0x64
 810ecd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ecd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810ecd4:	2b00      	cmp	r3, #0
 810ecd6:	f040 858e 	bne.w	810f7f6 <_strtod_l+0xb96>
 810ecda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ecdc:	b1cb      	cbz	r3, 810ed12 <_strtod_l+0xb2>
 810ecde:	4652      	mov	r2, sl
 810ece0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810ece4:	ec43 2b10 	vmov	d0, r2, r3
 810ece8:	b01f      	add	sp, #124	@ 0x7c
 810ecea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ecee:	2920      	cmp	r1, #32
 810ecf0:	d1ce      	bne.n	810ec90 <_strtod_l+0x30>
 810ecf2:	3201      	adds	r2, #1
 810ecf4:	e7c1      	b.n	810ec7a <_strtod_l+0x1a>
 810ecf6:	292d      	cmp	r1, #45	@ 0x2d
 810ecf8:	d1ca      	bne.n	810ec90 <_strtod_l+0x30>
 810ecfa:	2101      	movs	r1, #1
 810ecfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 810ecfe:	1c51      	adds	r1, r2, #1
 810ed00:	9119      	str	r1, [sp, #100]	@ 0x64
 810ed02:	7852      	ldrb	r2, [r2, #1]
 810ed04:	2a00      	cmp	r2, #0
 810ed06:	d1c5      	bne.n	810ec94 <_strtod_l+0x34>
 810ed08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810ed0a:	9419      	str	r4, [sp, #100]	@ 0x64
 810ed0c:	2b00      	cmp	r3, #0
 810ed0e:	f040 8570 	bne.w	810f7f2 <_strtod_l+0xb92>
 810ed12:	4652      	mov	r2, sl
 810ed14:	465b      	mov	r3, fp
 810ed16:	e7e5      	b.n	810ece4 <_strtod_l+0x84>
 810ed18:	2100      	movs	r1, #0
 810ed1a:	e7ef      	b.n	810ecfc <_strtod_l+0x9c>
 810ed1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810ed1e:	b13a      	cbz	r2, 810ed30 <_strtod_l+0xd0>
 810ed20:	2135      	movs	r1, #53	@ 0x35
 810ed22:	a81c      	add	r0, sp, #112	@ 0x70
 810ed24:	f7ff ff3a 	bl	810eb9c <__copybits>
 810ed28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ed2a:	9805      	ldr	r0, [sp, #20]
 810ed2c:	f7ff fb08 	bl	810e340 <_Bfree>
 810ed30:	3e01      	subs	r6, #1
 810ed32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810ed34:	2e04      	cmp	r6, #4
 810ed36:	d806      	bhi.n	810ed46 <_strtod_l+0xe6>
 810ed38:	e8df f006 	tbb	[pc, r6]
 810ed3c:	201d0314 	.word	0x201d0314
 810ed40:	14          	.byte	0x14
 810ed41:	00          	.byte	0x00
 810ed42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810ed46:	05e1      	lsls	r1, r4, #23
 810ed48:	bf48      	it	mi
 810ed4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810ed4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ed52:	0d1b      	lsrs	r3, r3, #20
 810ed54:	051b      	lsls	r3, r3, #20
 810ed56:	2b00      	cmp	r3, #0
 810ed58:	d1bb      	bne.n	810ecd2 <_strtod_l+0x72>
 810ed5a:	f7fe fb23 	bl	810d3a4 <__errno>
 810ed5e:	2322      	movs	r3, #34	@ 0x22
 810ed60:	6003      	str	r3, [r0, #0]
 810ed62:	e7b6      	b.n	810ecd2 <_strtod_l+0x72>
 810ed64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810ed68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810ed6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810ed70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810ed74:	e7e7      	b.n	810ed46 <_strtod_l+0xe6>
 810ed76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810eef4 <_strtod_l+0x294>
 810ed7a:	e7e4      	b.n	810ed46 <_strtod_l+0xe6>
 810ed7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810ed80:	f04f 3aff 	mov.w	sl, #4294967295
 810ed84:	e7df      	b.n	810ed46 <_strtod_l+0xe6>
 810ed86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ed88:	1c5a      	adds	r2, r3, #1
 810ed8a:	9219      	str	r2, [sp, #100]	@ 0x64
 810ed8c:	785b      	ldrb	r3, [r3, #1]
 810ed8e:	2b30      	cmp	r3, #48	@ 0x30
 810ed90:	d0f9      	beq.n	810ed86 <_strtod_l+0x126>
 810ed92:	2b00      	cmp	r3, #0
 810ed94:	d09d      	beq.n	810ecd2 <_strtod_l+0x72>
 810ed96:	2301      	movs	r3, #1
 810ed98:	9309      	str	r3, [sp, #36]	@ 0x24
 810ed9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ed9c:	930c      	str	r3, [sp, #48]	@ 0x30
 810ed9e:	2300      	movs	r3, #0
 810eda0:	9308      	str	r3, [sp, #32]
 810eda2:	930a      	str	r3, [sp, #40]	@ 0x28
 810eda4:	461f      	mov	r7, r3
 810eda6:	220a      	movs	r2, #10
 810eda8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810edaa:	7805      	ldrb	r5, [r0, #0]
 810edac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810edb0:	b2d9      	uxtb	r1, r3
 810edb2:	2909      	cmp	r1, #9
 810edb4:	d928      	bls.n	810ee08 <_strtod_l+0x1a8>
 810edb6:	494e      	ldr	r1, [pc, #312]	@ (810eef0 <_strtod_l+0x290>)
 810edb8:	2201      	movs	r2, #1
 810edba:	f001 f979 	bl	81100b0 <strncmp>
 810edbe:	2800      	cmp	r0, #0
 810edc0:	d032      	beq.n	810ee28 <_strtod_l+0x1c8>
 810edc2:	2000      	movs	r0, #0
 810edc4:	462a      	mov	r2, r5
 810edc6:	4681      	mov	r9, r0
 810edc8:	463d      	mov	r5, r7
 810edca:	4603      	mov	r3, r0
 810edcc:	2a65      	cmp	r2, #101	@ 0x65
 810edce:	d001      	beq.n	810edd4 <_strtod_l+0x174>
 810edd0:	2a45      	cmp	r2, #69	@ 0x45
 810edd2:	d114      	bne.n	810edfe <_strtod_l+0x19e>
 810edd4:	b91d      	cbnz	r5, 810edde <_strtod_l+0x17e>
 810edd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810edd8:	4302      	orrs	r2, r0
 810edda:	d095      	beq.n	810ed08 <_strtod_l+0xa8>
 810eddc:	2500      	movs	r5, #0
 810edde:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810ede0:	1c62      	adds	r2, r4, #1
 810ede2:	9219      	str	r2, [sp, #100]	@ 0x64
 810ede4:	7862      	ldrb	r2, [r4, #1]
 810ede6:	2a2b      	cmp	r2, #43	@ 0x2b
 810ede8:	d077      	beq.n	810eeda <_strtod_l+0x27a>
 810edea:	2a2d      	cmp	r2, #45	@ 0x2d
 810edec:	d07b      	beq.n	810eee6 <_strtod_l+0x286>
 810edee:	f04f 0c00 	mov.w	ip, #0
 810edf2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810edf6:	2909      	cmp	r1, #9
 810edf8:	f240 8082 	bls.w	810ef00 <_strtod_l+0x2a0>
 810edfc:	9419      	str	r4, [sp, #100]	@ 0x64
 810edfe:	f04f 0800 	mov.w	r8, #0
 810ee02:	e0a2      	b.n	810ef4a <_strtod_l+0x2ea>
 810ee04:	2300      	movs	r3, #0
 810ee06:	e7c7      	b.n	810ed98 <_strtod_l+0x138>
 810ee08:	2f08      	cmp	r7, #8
 810ee0a:	bfd5      	itete	le
 810ee0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810ee0e:	9908      	ldrgt	r1, [sp, #32]
 810ee10:	fb02 3301 	mlale	r3, r2, r1, r3
 810ee14:	fb02 3301 	mlagt	r3, r2, r1, r3
 810ee18:	f100 0001 	add.w	r0, r0, #1
 810ee1c:	bfd4      	ite	le
 810ee1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 810ee20:	9308      	strgt	r3, [sp, #32]
 810ee22:	3701      	adds	r7, #1
 810ee24:	9019      	str	r0, [sp, #100]	@ 0x64
 810ee26:	e7bf      	b.n	810eda8 <_strtod_l+0x148>
 810ee28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ee2a:	1c5a      	adds	r2, r3, #1
 810ee2c:	9219      	str	r2, [sp, #100]	@ 0x64
 810ee2e:	785a      	ldrb	r2, [r3, #1]
 810ee30:	b37f      	cbz	r7, 810ee92 <_strtod_l+0x232>
 810ee32:	4681      	mov	r9, r0
 810ee34:	463d      	mov	r5, r7
 810ee36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810ee3a:	2b09      	cmp	r3, #9
 810ee3c:	d912      	bls.n	810ee64 <_strtod_l+0x204>
 810ee3e:	2301      	movs	r3, #1
 810ee40:	e7c4      	b.n	810edcc <_strtod_l+0x16c>
 810ee42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ee44:	1c5a      	adds	r2, r3, #1
 810ee46:	9219      	str	r2, [sp, #100]	@ 0x64
 810ee48:	785a      	ldrb	r2, [r3, #1]
 810ee4a:	3001      	adds	r0, #1
 810ee4c:	2a30      	cmp	r2, #48	@ 0x30
 810ee4e:	d0f8      	beq.n	810ee42 <_strtod_l+0x1e2>
 810ee50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810ee54:	2b08      	cmp	r3, #8
 810ee56:	f200 84d3 	bhi.w	810f800 <_strtod_l+0xba0>
 810ee5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ee5c:	930c      	str	r3, [sp, #48]	@ 0x30
 810ee5e:	4681      	mov	r9, r0
 810ee60:	2000      	movs	r0, #0
 810ee62:	4605      	mov	r5, r0
 810ee64:	3a30      	subs	r2, #48	@ 0x30
 810ee66:	f100 0301 	add.w	r3, r0, #1
 810ee6a:	d02a      	beq.n	810eec2 <_strtod_l+0x262>
 810ee6c:	4499      	add	r9, r3
 810ee6e:	eb00 0c05 	add.w	ip, r0, r5
 810ee72:	462b      	mov	r3, r5
 810ee74:	210a      	movs	r1, #10
 810ee76:	4563      	cmp	r3, ip
 810ee78:	d10d      	bne.n	810ee96 <_strtod_l+0x236>
 810ee7a:	1c69      	adds	r1, r5, #1
 810ee7c:	4401      	add	r1, r0
 810ee7e:	4428      	add	r0, r5
 810ee80:	2808      	cmp	r0, #8
 810ee82:	dc16      	bgt.n	810eeb2 <_strtod_l+0x252>
 810ee84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810ee86:	230a      	movs	r3, #10
 810ee88:	fb03 2300 	mla	r3, r3, r0, r2
 810ee8c:	930a      	str	r3, [sp, #40]	@ 0x28
 810ee8e:	2300      	movs	r3, #0
 810ee90:	e018      	b.n	810eec4 <_strtod_l+0x264>
 810ee92:	4638      	mov	r0, r7
 810ee94:	e7da      	b.n	810ee4c <_strtod_l+0x1ec>
 810ee96:	2b08      	cmp	r3, #8
 810ee98:	f103 0301 	add.w	r3, r3, #1
 810ee9c:	dc03      	bgt.n	810eea6 <_strtod_l+0x246>
 810ee9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810eea0:	434e      	muls	r6, r1
 810eea2:	960a      	str	r6, [sp, #40]	@ 0x28
 810eea4:	e7e7      	b.n	810ee76 <_strtod_l+0x216>
 810eea6:	2b10      	cmp	r3, #16
 810eea8:	bfde      	ittt	le
 810eeaa:	9e08      	ldrle	r6, [sp, #32]
 810eeac:	434e      	mulle	r6, r1
 810eeae:	9608      	strle	r6, [sp, #32]
 810eeb0:	e7e1      	b.n	810ee76 <_strtod_l+0x216>
 810eeb2:	280f      	cmp	r0, #15
 810eeb4:	dceb      	bgt.n	810ee8e <_strtod_l+0x22e>
 810eeb6:	9808      	ldr	r0, [sp, #32]
 810eeb8:	230a      	movs	r3, #10
 810eeba:	fb03 2300 	mla	r3, r3, r0, r2
 810eebe:	9308      	str	r3, [sp, #32]
 810eec0:	e7e5      	b.n	810ee8e <_strtod_l+0x22e>
 810eec2:	4629      	mov	r1, r5
 810eec4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810eec6:	1c50      	adds	r0, r2, #1
 810eec8:	9019      	str	r0, [sp, #100]	@ 0x64
 810eeca:	7852      	ldrb	r2, [r2, #1]
 810eecc:	4618      	mov	r0, r3
 810eece:	460d      	mov	r5, r1
 810eed0:	e7b1      	b.n	810ee36 <_strtod_l+0x1d6>
 810eed2:	f04f 0900 	mov.w	r9, #0
 810eed6:	2301      	movs	r3, #1
 810eed8:	e77d      	b.n	810edd6 <_strtod_l+0x176>
 810eeda:	f04f 0c00 	mov.w	ip, #0
 810eede:	1ca2      	adds	r2, r4, #2
 810eee0:	9219      	str	r2, [sp, #100]	@ 0x64
 810eee2:	78a2      	ldrb	r2, [r4, #2]
 810eee4:	e785      	b.n	810edf2 <_strtod_l+0x192>
 810eee6:	f04f 0c01 	mov.w	ip, #1
 810eeea:	e7f8      	b.n	810eede <_strtod_l+0x27e>
 810eeec:	08112250 	.word	0x08112250
 810eef0:	08112238 	.word	0x08112238
 810eef4:	7ff00000 	.word	0x7ff00000
 810eef8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810eefa:	1c51      	adds	r1, r2, #1
 810eefc:	9119      	str	r1, [sp, #100]	@ 0x64
 810eefe:	7852      	ldrb	r2, [r2, #1]
 810ef00:	2a30      	cmp	r2, #48	@ 0x30
 810ef02:	d0f9      	beq.n	810eef8 <_strtod_l+0x298>
 810ef04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810ef08:	2908      	cmp	r1, #8
 810ef0a:	f63f af78 	bhi.w	810edfe <_strtod_l+0x19e>
 810ef0e:	3a30      	subs	r2, #48	@ 0x30
 810ef10:	920e      	str	r2, [sp, #56]	@ 0x38
 810ef12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810ef14:	920f      	str	r2, [sp, #60]	@ 0x3c
 810ef16:	f04f 080a 	mov.w	r8, #10
 810ef1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810ef1c:	1c56      	adds	r6, r2, #1
 810ef1e:	9619      	str	r6, [sp, #100]	@ 0x64
 810ef20:	7852      	ldrb	r2, [r2, #1]
 810ef22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810ef26:	f1be 0f09 	cmp.w	lr, #9
 810ef2a:	d939      	bls.n	810efa0 <_strtod_l+0x340>
 810ef2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810ef2e:	1a76      	subs	r6, r6, r1
 810ef30:	2e08      	cmp	r6, #8
 810ef32:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810ef36:	dc03      	bgt.n	810ef40 <_strtod_l+0x2e0>
 810ef38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810ef3a:	4588      	cmp	r8, r1
 810ef3c:	bfa8      	it	ge
 810ef3e:	4688      	movge	r8, r1
 810ef40:	f1bc 0f00 	cmp.w	ip, #0
 810ef44:	d001      	beq.n	810ef4a <_strtod_l+0x2ea>
 810ef46:	f1c8 0800 	rsb	r8, r8, #0
 810ef4a:	2d00      	cmp	r5, #0
 810ef4c:	d14e      	bne.n	810efec <_strtod_l+0x38c>
 810ef4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810ef50:	4308      	orrs	r0, r1
 810ef52:	f47f aebe 	bne.w	810ecd2 <_strtod_l+0x72>
 810ef56:	2b00      	cmp	r3, #0
 810ef58:	f47f aed6 	bne.w	810ed08 <_strtod_l+0xa8>
 810ef5c:	2a69      	cmp	r2, #105	@ 0x69
 810ef5e:	d028      	beq.n	810efb2 <_strtod_l+0x352>
 810ef60:	dc25      	bgt.n	810efae <_strtod_l+0x34e>
 810ef62:	2a49      	cmp	r2, #73	@ 0x49
 810ef64:	d025      	beq.n	810efb2 <_strtod_l+0x352>
 810ef66:	2a4e      	cmp	r2, #78	@ 0x4e
 810ef68:	f47f aece 	bne.w	810ed08 <_strtod_l+0xa8>
 810ef6c:	499b      	ldr	r1, [pc, #620]	@ (810f1dc <_strtod_l+0x57c>)
 810ef6e:	a819      	add	r0, sp, #100	@ 0x64
 810ef70:	f001 fba6 	bl	81106c0 <__match>
 810ef74:	2800      	cmp	r0, #0
 810ef76:	f43f aec7 	beq.w	810ed08 <_strtod_l+0xa8>
 810ef7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ef7c:	781b      	ldrb	r3, [r3, #0]
 810ef7e:	2b28      	cmp	r3, #40	@ 0x28
 810ef80:	d12e      	bne.n	810efe0 <_strtod_l+0x380>
 810ef82:	4997      	ldr	r1, [pc, #604]	@ (810f1e0 <_strtod_l+0x580>)
 810ef84:	aa1c      	add	r2, sp, #112	@ 0x70
 810ef86:	a819      	add	r0, sp, #100	@ 0x64
 810ef88:	f001 fbae 	bl	81106e8 <__hexnan>
 810ef8c:	2805      	cmp	r0, #5
 810ef8e:	d127      	bne.n	810efe0 <_strtod_l+0x380>
 810ef90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810ef92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810ef96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810ef9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810ef9e:	e698      	b.n	810ecd2 <_strtod_l+0x72>
 810efa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810efa2:	fb08 2101 	mla	r1, r8, r1, r2
 810efa6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810efaa:	920e      	str	r2, [sp, #56]	@ 0x38
 810efac:	e7b5      	b.n	810ef1a <_strtod_l+0x2ba>
 810efae:	2a6e      	cmp	r2, #110	@ 0x6e
 810efb0:	e7da      	b.n	810ef68 <_strtod_l+0x308>
 810efb2:	498c      	ldr	r1, [pc, #560]	@ (810f1e4 <_strtod_l+0x584>)
 810efb4:	a819      	add	r0, sp, #100	@ 0x64
 810efb6:	f001 fb83 	bl	81106c0 <__match>
 810efba:	2800      	cmp	r0, #0
 810efbc:	f43f aea4 	beq.w	810ed08 <_strtod_l+0xa8>
 810efc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810efc2:	4989      	ldr	r1, [pc, #548]	@ (810f1e8 <_strtod_l+0x588>)
 810efc4:	3b01      	subs	r3, #1
 810efc6:	a819      	add	r0, sp, #100	@ 0x64
 810efc8:	9319      	str	r3, [sp, #100]	@ 0x64
 810efca:	f001 fb79 	bl	81106c0 <__match>
 810efce:	b910      	cbnz	r0, 810efd6 <_strtod_l+0x376>
 810efd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810efd2:	3301      	adds	r3, #1
 810efd4:	9319      	str	r3, [sp, #100]	@ 0x64
 810efd6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 810f1f8 <_strtod_l+0x598>
 810efda:	f04f 0a00 	mov.w	sl, #0
 810efde:	e678      	b.n	810ecd2 <_strtod_l+0x72>
 810efe0:	4882      	ldr	r0, [pc, #520]	@ (810f1ec <_strtod_l+0x58c>)
 810efe2:	f001 f8a9 	bl	8110138 <nan>
 810efe6:	ec5b ab10 	vmov	sl, fp, d0
 810efea:	e672      	b.n	810ecd2 <_strtod_l+0x72>
 810efec:	eba8 0309 	sub.w	r3, r8, r9
 810eff0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810eff2:	9309      	str	r3, [sp, #36]	@ 0x24
 810eff4:	2f00      	cmp	r7, #0
 810eff6:	bf08      	it	eq
 810eff8:	462f      	moveq	r7, r5
 810effa:	2d10      	cmp	r5, #16
 810effc:	462c      	mov	r4, r5
 810effe:	bfa8      	it	ge
 810f000:	2410      	movge	r4, #16
 810f002:	f7f1 fb07 	bl	8100614 <__aeabi_ui2d>
 810f006:	2d09      	cmp	r5, #9
 810f008:	4682      	mov	sl, r0
 810f00a:	468b      	mov	fp, r1
 810f00c:	dc13      	bgt.n	810f036 <_strtod_l+0x3d6>
 810f00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f010:	2b00      	cmp	r3, #0
 810f012:	f43f ae5e 	beq.w	810ecd2 <_strtod_l+0x72>
 810f016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f018:	dd78      	ble.n	810f10c <_strtod_l+0x4ac>
 810f01a:	2b16      	cmp	r3, #22
 810f01c:	dc5f      	bgt.n	810f0de <_strtod_l+0x47e>
 810f01e:	4974      	ldr	r1, [pc, #464]	@ (810f1f0 <_strtod_l+0x590>)
 810f020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810f024:	e9d1 0100 	ldrd	r0, r1, [r1]
 810f028:	4652      	mov	r2, sl
 810f02a:	465b      	mov	r3, fp
 810f02c:	f7f1 fb6c 	bl	8100708 <__aeabi_dmul>
 810f030:	4682      	mov	sl, r0
 810f032:	468b      	mov	fp, r1
 810f034:	e64d      	b.n	810ecd2 <_strtod_l+0x72>
 810f036:	4b6e      	ldr	r3, [pc, #440]	@ (810f1f0 <_strtod_l+0x590>)
 810f038:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810f03c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810f040:	f7f1 fb62 	bl	8100708 <__aeabi_dmul>
 810f044:	4682      	mov	sl, r0
 810f046:	9808      	ldr	r0, [sp, #32]
 810f048:	468b      	mov	fp, r1
 810f04a:	f7f1 fae3 	bl	8100614 <__aeabi_ui2d>
 810f04e:	4602      	mov	r2, r0
 810f050:	460b      	mov	r3, r1
 810f052:	4650      	mov	r0, sl
 810f054:	4659      	mov	r1, fp
 810f056:	f7f1 f9a1 	bl	810039c <__adddf3>
 810f05a:	2d0f      	cmp	r5, #15
 810f05c:	4682      	mov	sl, r0
 810f05e:	468b      	mov	fp, r1
 810f060:	ddd5      	ble.n	810f00e <_strtod_l+0x3ae>
 810f062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f064:	1b2c      	subs	r4, r5, r4
 810f066:	441c      	add	r4, r3
 810f068:	2c00      	cmp	r4, #0
 810f06a:	f340 8096 	ble.w	810f19a <_strtod_l+0x53a>
 810f06e:	f014 030f 	ands.w	r3, r4, #15
 810f072:	d00a      	beq.n	810f08a <_strtod_l+0x42a>
 810f074:	495e      	ldr	r1, [pc, #376]	@ (810f1f0 <_strtod_l+0x590>)
 810f076:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810f07a:	4652      	mov	r2, sl
 810f07c:	465b      	mov	r3, fp
 810f07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810f082:	f7f1 fb41 	bl	8100708 <__aeabi_dmul>
 810f086:	4682      	mov	sl, r0
 810f088:	468b      	mov	fp, r1
 810f08a:	f034 040f 	bics.w	r4, r4, #15
 810f08e:	d073      	beq.n	810f178 <_strtod_l+0x518>
 810f090:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810f094:	dd48      	ble.n	810f128 <_strtod_l+0x4c8>
 810f096:	2400      	movs	r4, #0
 810f098:	46a0      	mov	r8, r4
 810f09a:	940a      	str	r4, [sp, #40]	@ 0x28
 810f09c:	46a1      	mov	r9, r4
 810f09e:	9a05      	ldr	r2, [sp, #20]
 810f0a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 810f1f8 <_strtod_l+0x598>
 810f0a4:	2322      	movs	r3, #34	@ 0x22
 810f0a6:	6013      	str	r3, [r2, #0]
 810f0a8:	f04f 0a00 	mov.w	sl, #0
 810f0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f0ae:	2b00      	cmp	r3, #0
 810f0b0:	f43f ae0f 	beq.w	810ecd2 <_strtod_l+0x72>
 810f0b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f0b6:	9805      	ldr	r0, [sp, #20]
 810f0b8:	f7ff f942 	bl	810e340 <_Bfree>
 810f0bc:	9805      	ldr	r0, [sp, #20]
 810f0be:	4649      	mov	r1, r9
 810f0c0:	f7ff f93e 	bl	810e340 <_Bfree>
 810f0c4:	9805      	ldr	r0, [sp, #20]
 810f0c6:	4641      	mov	r1, r8
 810f0c8:	f7ff f93a 	bl	810e340 <_Bfree>
 810f0cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810f0ce:	9805      	ldr	r0, [sp, #20]
 810f0d0:	f7ff f936 	bl	810e340 <_Bfree>
 810f0d4:	9805      	ldr	r0, [sp, #20]
 810f0d6:	4621      	mov	r1, r4
 810f0d8:	f7ff f932 	bl	810e340 <_Bfree>
 810f0dc:	e5f9      	b.n	810ecd2 <_strtod_l+0x72>
 810f0de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810f0e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810f0e4:	4293      	cmp	r3, r2
 810f0e6:	dbbc      	blt.n	810f062 <_strtod_l+0x402>
 810f0e8:	4c41      	ldr	r4, [pc, #260]	@ (810f1f0 <_strtod_l+0x590>)
 810f0ea:	f1c5 050f 	rsb	r5, r5, #15
 810f0ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810f0f2:	4652      	mov	r2, sl
 810f0f4:	465b      	mov	r3, fp
 810f0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810f0fa:	f7f1 fb05 	bl	8100708 <__aeabi_dmul>
 810f0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f100:	1b5d      	subs	r5, r3, r5
 810f102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810f106:	e9d4 2300 	ldrd	r2, r3, [r4]
 810f10a:	e78f      	b.n	810f02c <_strtod_l+0x3cc>
 810f10c:	3316      	adds	r3, #22
 810f10e:	dba8      	blt.n	810f062 <_strtod_l+0x402>
 810f110:	4b37      	ldr	r3, [pc, #220]	@ (810f1f0 <_strtod_l+0x590>)
 810f112:	eba9 0808 	sub.w	r8, r9, r8
 810f116:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810f11a:	e9d8 2300 	ldrd	r2, r3, [r8]
 810f11e:	4650      	mov	r0, sl
 810f120:	4659      	mov	r1, fp
 810f122:	f7f1 fc1b 	bl	810095c <__aeabi_ddiv>
 810f126:	e783      	b.n	810f030 <_strtod_l+0x3d0>
 810f128:	4b32      	ldr	r3, [pc, #200]	@ (810f1f4 <_strtod_l+0x594>)
 810f12a:	9308      	str	r3, [sp, #32]
 810f12c:	2300      	movs	r3, #0
 810f12e:	1124      	asrs	r4, r4, #4
 810f130:	4650      	mov	r0, sl
 810f132:	4659      	mov	r1, fp
 810f134:	461e      	mov	r6, r3
 810f136:	2c01      	cmp	r4, #1
 810f138:	dc21      	bgt.n	810f17e <_strtod_l+0x51e>
 810f13a:	b10b      	cbz	r3, 810f140 <_strtod_l+0x4e0>
 810f13c:	4682      	mov	sl, r0
 810f13e:	468b      	mov	fp, r1
 810f140:	492c      	ldr	r1, [pc, #176]	@ (810f1f4 <_strtod_l+0x594>)
 810f142:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810f146:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810f14a:	4652      	mov	r2, sl
 810f14c:	465b      	mov	r3, fp
 810f14e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810f152:	f7f1 fad9 	bl	8100708 <__aeabi_dmul>
 810f156:	4b28      	ldr	r3, [pc, #160]	@ (810f1f8 <_strtod_l+0x598>)
 810f158:	460a      	mov	r2, r1
 810f15a:	400b      	ands	r3, r1
 810f15c:	4927      	ldr	r1, [pc, #156]	@ (810f1fc <_strtod_l+0x59c>)
 810f15e:	428b      	cmp	r3, r1
 810f160:	4682      	mov	sl, r0
 810f162:	d898      	bhi.n	810f096 <_strtod_l+0x436>
 810f164:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810f168:	428b      	cmp	r3, r1
 810f16a:	bf86      	itte	hi
 810f16c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 810f200 <_strtod_l+0x5a0>
 810f170:	f04f 3aff 	movhi.w	sl, #4294967295
 810f174:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810f178:	2300      	movs	r3, #0
 810f17a:	9308      	str	r3, [sp, #32]
 810f17c:	e07a      	b.n	810f274 <_strtod_l+0x614>
 810f17e:	07e2      	lsls	r2, r4, #31
 810f180:	d505      	bpl.n	810f18e <_strtod_l+0x52e>
 810f182:	9b08      	ldr	r3, [sp, #32]
 810f184:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f188:	f7f1 fabe 	bl	8100708 <__aeabi_dmul>
 810f18c:	2301      	movs	r3, #1
 810f18e:	9a08      	ldr	r2, [sp, #32]
 810f190:	3208      	adds	r2, #8
 810f192:	3601      	adds	r6, #1
 810f194:	1064      	asrs	r4, r4, #1
 810f196:	9208      	str	r2, [sp, #32]
 810f198:	e7cd      	b.n	810f136 <_strtod_l+0x4d6>
 810f19a:	d0ed      	beq.n	810f178 <_strtod_l+0x518>
 810f19c:	4264      	negs	r4, r4
 810f19e:	f014 020f 	ands.w	r2, r4, #15
 810f1a2:	d00a      	beq.n	810f1ba <_strtod_l+0x55a>
 810f1a4:	4b12      	ldr	r3, [pc, #72]	@ (810f1f0 <_strtod_l+0x590>)
 810f1a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810f1aa:	4650      	mov	r0, sl
 810f1ac:	4659      	mov	r1, fp
 810f1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f1b2:	f7f1 fbd3 	bl	810095c <__aeabi_ddiv>
 810f1b6:	4682      	mov	sl, r0
 810f1b8:	468b      	mov	fp, r1
 810f1ba:	1124      	asrs	r4, r4, #4
 810f1bc:	d0dc      	beq.n	810f178 <_strtod_l+0x518>
 810f1be:	2c1f      	cmp	r4, #31
 810f1c0:	dd20      	ble.n	810f204 <_strtod_l+0x5a4>
 810f1c2:	2400      	movs	r4, #0
 810f1c4:	46a0      	mov	r8, r4
 810f1c6:	940a      	str	r4, [sp, #40]	@ 0x28
 810f1c8:	46a1      	mov	r9, r4
 810f1ca:	9a05      	ldr	r2, [sp, #20]
 810f1cc:	2322      	movs	r3, #34	@ 0x22
 810f1ce:	f04f 0a00 	mov.w	sl, #0
 810f1d2:	f04f 0b00 	mov.w	fp, #0
 810f1d6:	6013      	str	r3, [r2, #0]
 810f1d8:	e768      	b.n	810f0ac <_strtod_l+0x44c>
 810f1da:	bf00      	nop
 810f1dc:	08112025 	.word	0x08112025
 810f1e0:	0811223c 	.word	0x0811223c
 810f1e4:	0811201d 	.word	0x0811201d
 810f1e8:	08112054 	.word	0x08112054
 810f1ec:	081123e5 	.word	0x081123e5
 810f1f0:	08112170 	.word	0x08112170
 810f1f4:	08112148 	.word	0x08112148
 810f1f8:	7ff00000 	.word	0x7ff00000
 810f1fc:	7ca00000 	.word	0x7ca00000
 810f200:	7fefffff 	.word	0x7fefffff
 810f204:	f014 0310 	ands.w	r3, r4, #16
 810f208:	bf18      	it	ne
 810f20a:	236a      	movne	r3, #106	@ 0x6a
 810f20c:	4ea9      	ldr	r6, [pc, #676]	@ (810f4b4 <_strtod_l+0x854>)
 810f20e:	9308      	str	r3, [sp, #32]
 810f210:	4650      	mov	r0, sl
 810f212:	4659      	mov	r1, fp
 810f214:	2300      	movs	r3, #0
 810f216:	07e2      	lsls	r2, r4, #31
 810f218:	d504      	bpl.n	810f224 <_strtod_l+0x5c4>
 810f21a:	e9d6 2300 	ldrd	r2, r3, [r6]
 810f21e:	f7f1 fa73 	bl	8100708 <__aeabi_dmul>
 810f222:	2301      	movs	r3, #1
 810f224:	1064      	asrs	r4, r4, #1
 810f226:	f106 0608 	add.w	r6, r6, #8
 810f22a:	d1f4      	bne.n	810f216 <_strtod_l+0x5b6>
 810f22c:	b10b      	cbz	r3, 810f232 <_strtod_l+0x5d2>
 810f22e:	4682      	mov	sl, r0
 810f230:	468b      	mov	fp, r1
 810f232:	9b08      	ldr	r3, [sp, #32]
 810f234:	b1b3      	cbz	r3, 810f264 <_strtod_l+0x604>
 810f236:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810f23a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810f23e:	2b00      	cmp	r3, #0
 810f240:	4659      	mov	r1, fp
 810f242:	dd0f      	ble.n	810f264 <_strtod_l+0x604>
 810f244:	2b1f      	cmp	r3, #31
 810f246:	dd55      	ble.n	810f2f4 <_strtod_l+0x694>
 810f248:	2b34      	cmp	r3, #52	@ 0x34
 810f24a:	bfde      	ittt	le
 810f24c:	f04f 33ff 	movle.w	r3, #4294967295
 810f250:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810f254:	4093      	lslle	r3, r2
 810f256:	f04f 0a00 	mov.w	sl, #0
 810f25a:	bfcc      	ite	gt
 810f25c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810f260:	ea03 0b01 	andle.w	fp, r3, r1
 810f264:	2200      	movs	r2, #0
 810f266:	2300      	movs	r3, #0
 810f268:	4650      	mov	r0, sl
 810f26a:	4659      	mov	r1, fp
 810f26c:	f7f1 fcb4 	bl	8100bd8 <__aeabi_dcmpeq>
 810f270:	2800      	cmp	r0, #0
 810f272:	d1a6      	bne.n	810f1c2 <_strtod_l+0x562>
 810f274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f276:	9300      	str	r3, [sp, #0]
 810f278:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810f27a:	9805      	ldr	r0, [sp, #20]
 810f27c:	462b      	mov	r3, r5
 810f27e:	463a      	mov	r2, r7
 810f280:	f7ff f8c6 	bl	810e410 <__s2b>
 810f284:	900a      	str	r0, [sp, #40]	@ 0x28
 810f286:	2800      	cmp	r0, #0
 810f288:	f43f af05 	beq.w	810f096 <_strtod_l+0x436>
 810f28c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810f28e:	2a00      	cmp	r2, #0
 810f290:	eba9 0308 	sub.w	r3, r9, r8
 810f294:	bfa8      	it	ge
 810f296:	2300      	movge	r3, #0
 810f298:	9312      	str	r3, [sp, #72]	@ 0x48
 810f29a:	2400      	movs	r4, #0
 810f29c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810f2a0:	9316      	str	r3, [sp, #88]	@ 0x58
 810f2a2:	46a0      	mov	r8, r4
 810f2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f2a6:	9805      	ldr	r0, [sp, #20]
 810f2a8:	6859      	ldr	r1, [r3, #4]
 810f2aa:	f7ff f809 	bl	810e2c0 <_Balloc>
 810f2ae:	4681      	mov	r9, r0
 810f2b0:	2800      	cmp	r0, #0
 810f2b2:	f43f aef4 	beq.w	810f09e <_strtod_l+0x43e>
 810f2b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f2b8:	691a      	ldr	r2, [r3, #16]
 810f2ba:	3202      	adds	r2, #2
 810f2bc:	f103 010c 	add.w	r1, r3, #12
 810f2c0:	0092      	lsls	r2, r2, #2
 810f2c2:	300c      	adds	r0, #12
 810f2c4:	f7fe f89b 	bl	810d3fe <memcpy>
 810f2c8:	ec4b ab10 	vmov	d0, sl, fp
 810f2cc:	9805      	ldr	r0, [sp, #20]
 810f2ce:	aa1c      	add	r2, sp, #112	@ 0x70
 810f2d0:	a91b      	add	r1, sp, #108	@ 0x6c
 810f2d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810f2d6:	f7ff fbd7 	bl	810ea88 <__d2b>
 810f2da:	901a      	str	r0, [sp, #104]	@ 0x68
 810f2dc:	2800      	cmp	r0, #0
 810f2de:	f43f aede 	beq.w	810f09e <_strtod_l+0x43e>
 810f2e2:	9805      	ldr	r0, [sp, #20]
 810f2e4:	2101      	movs	r1, #1
 810f2e6:	f7ff f929 	bl	810e53c <__i2b>
 810f2ea:	4680      	mov	r8, r0
 810f2ec:	b948      	cbnz	r0, 810f302 <_strtod_l+0x6a2>
 810f2ee:	f04f 0800 	mov.w	r8, #0
 810f2f2:	e6d4      	b.n	810f09e <_strtod_l+0x43e>
 810f2f4:	f04f 32ff 	mov.w	r2, #4294967295
 810f2f8:	fa02 f303 	lsl.w	r3, r2, r3
 810f2fc:	ea03 0a0a 	and.w	sl, r3, sl
 810f300:	e7b0      	b.n	810f264 <_strtod_l+0x604>
 810f302:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810f304:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810f306:	2d00      	cmp	r5, #0
 810f308:	bfab      	itete	ge
 810f30a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810f30c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810f30e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810f310:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810f312:	bfac      	ite	ge
 810f314:	18ef      	addge	r7, r5, r3
 810f316:	1b5e      	sublt	r6, r3, r5
 810f318:	9b08      	ldr	r3, [sp, #32]
 810f31a:	1aed      	subs	r5, r5, r3
 810f31c:	4415      	add	r5, r2
 810f31e:	4b66      	ldr	r3, [pc, #408]	@ (810f4b8 <_strtod_l+0x858>)
 810f320:	3d01      	subs	r5, #1
 810f322:	429d      	cmp	r5, r3
 810f324:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810f328:	da50      	bge.n	810f3cc <_strtod_l+0x76c>
 810f32a:	1b5b      	subs	r3, r3, r5
 810f32c:	2b1f      	cmp	r3, #31
 810f32e:	eba2 0203 	sub.w	r2, r2, r3
 810f332:	f04f 0101 	mov.w	r1, #1
 810f336:	dc3d      	bgt.n	810f3b4 <_strtod_l+0x754>
 810f338:	fa01 f303 	lsl.w	r3, r1, r3
 810f33c:	9313      	str	r3, [sp, #76]	@ 0x4c
 810f33e:	2300      	movs	r3, #0
 810f340:	9310      	str	r3, [sp, #64]	@ 0x40
 810f342:	18bd      	adds	r5, r7, r2
 810f344:	9b08      	ldr	r3, [sp, #32]
 810f346:	42af      	cmp	r7, r5
 810f348:	4416      	add	r6, r2
 810f34a:	441e      	add	r6, r3
 810f34c:	463b      	mov	r3, r7
 810f34e:	bfa8      	it	ge
 810f350:	462b      	movge	r3, r5
 810f352:	42b3      	cmp	r3, r6
 810f354:	bfa8      	it	ge
 810f356:	4633      	movge	r3, r6
 810f358:	2b00      	cmp	r3, #0
 810f35a:	bfc2      	ittt	gt
 810f35c:	1aed      	subgt	r5, r5, r3
 810f35e:	1af6      	subgt	r6, r6, r3
 810f360:	1aff      	subgt	r7, r7, r3
 810f362:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810f364:	2b00      	cmp	r3, #0
 810f366:	dd16      	ble.n	810f396 <_strtod_l+0x736>
 810f368:	4641      	mov	r1, r8
 810f36a:	9805      	ldr	r0, [sp, #20]
 810f36c:	461a      	mov	r2, r3
 810f36e:	f7ff f9a5 	bl	810e6bc <__pow5mult>
 810f372:	4680      	mov	r8, r0
 810f374:	2800      	cmp	r0, #0
 810f376:	d0ba      	beq.n	810f2ee <_strtod_l+0x68e>
 810f378:	4601      	mov	r1, r0
 810f37a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810f37c:	9805      	ldr	r0, [sp, #20]
 810f37e:	f7ff f8f3 	bl	810e568 <__multiply>
 810f382:	900e      	str	r0, [sp, #56]	@ 0x38
 810f384:	2800      	cmp	r0, #0
 810f386:	f43f ae8a 	beq.w	810f09e <_strtod_l+0x43e>
 810f38a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f38c:	9805      	ldr	r0, [sp, #20]
 810f38e:	f7fe ffd7 	bl	810e340 <_Bfree>
 810f392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f394:	931a      	str	r3, [sp, #104]	@ 0x68
 810f396:	2d00      	cmp	r5, #0
 810f398:	dc1d      	bgt.n	810f3d6 <_strtod_l+0x776>
 810f39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f39c:	2b00      	cmp	r3, #0
 810f39e:	dd23      	ble.n	810f3e8 <_strtod_l+0x788>
 810f3a0:	4649      	mov	r1, r9
 810f3a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810f3a4:	9805      	ldr	r0, [sp, #20]
 810f3a6:	f7ff f989 	bl	810e6bc <__pow5mult>
 810f3aa:	4681      	mov	r9, r0
 810f3ac:	b9e0      	cbnz	r0, 810f3e8 <_strtod_l+0x788>
 810f3ae:	f04f 0900 	mov.w	r9, #0
 810f3b2:	e674      	b.n	810f09e <_strtod_l+0x43e>
 810f3b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810f3b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810f3bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810f3c0:	35e2      	adds	r5, #226	@ 0xe2
 810f3c2:	fa01 f305 	lsl.w	r3, r1, r5
 810f3c6:	9310      	str	r3, [sp, #64]	@ 0x40
 810f3c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 810f3ca:	e7ba      	b.n	810f342 <_strtod_l+0x6e2>
 810f3cc:	2300      	movs	r3, #0
 810f3ce:	9310      	str	r3, [sp, #64]	@ 0x40
 810f3d0:	2301      	movs	r3, #1
 810f3d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 810f3d4:	e7b5      	b.n	810f342 <_strtod_l+0x6e2>
 810f3d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f3d8:	9805      	ldr	r0, [sp, #20]
 810f3da:	462a      	mov	r2, r5
 810f3dc:	f7ff f9c8 	bl	810e770 <__lshift>
 810f3e0:	901a      	str	r0, [sp, #104]	@ 0x68
 810f3e2:	2800      	cmp	r0, #0
 810f3e4:	d1d9      	bne.n	810f39a <_strtod_l+0x73a>
 810f3e6:	e65a      	b.n	810f09e <_strtod_l+0x43e>
 810f3e8:	2e00      	cmp	r6, #0
 810f3ea:	dd07      	ble.n	810f3fc <_strtod_l+0x79c>
 810f3ec:	4649      	mov	r1, r9
 810f3ee:	9805      	ldr	r0, [sp, #20]
 810f3f0:	4632      	mov	r2, r6
 810f3f2:	f7ff f9bd 	bl	810e770 <__lshift>
 810f3f6:	4681      	mov	r9, r0
 810f3f8:	2800      	cmp	r0, #0
 810f3fa:	d0d8      	beq.n	810f3ae <_strtod_l+0x74e>
 810f3fc:	2f00      	cmp	r7, #0
 810f3fe:	dd08      	ble.n	810f412 <_strtod_l+0x7b2>
 810f400:	4641      	mov	r1, r8
 810f402:	9805      	ldr	r0, [sp, #20]
 810f404:	463a      	mov	r2, r7
 810f406:	f7ff f9b3 	bl	810e770 <__lshift>
 810f40a:	4680      	mov	r8, r0
 810f40c:	2800      	cmp	r0, #0
 810f40e:	f43f ae46 	beq.w	810f09e <_strtod_l+0x43e>
 810f412:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f414:	9805      	ldr	r0, [sp, #20]
 810f416:	464a      	mov	r2, r9
 810f418:	f7ff fa32 	bl	810e880 <__mdiff>
 810f41c:	4604      	mov	r4, r0
 810f41e:	2800      	cmp	r0, #0
 810f420:	f43f ae3d 	beq.w	810f09e <_strtod_l+0x43e>
 810f424:	68c3      	ldr	r3, [r0, #12]
 810f426:	930f      	str	r3, [sp, #60]	@ 0x3c
 810f428:	2300      	movs	r3, #0
 810f42a:	60c3      	str	r3, [r0, #12]
 810f42c:	4641      	mov	r1, r8
 810f42e:	f7ff fa0b 	bl	810e848 <__mcmp>
 810f432:	2800      	cmp	r0, #0
 810f434:	da46      	bge.n	810f4c4 <_strtod_l+0x864>
 810f436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f438:	ea53 030a 	orrs.w	r3, r3, sl
 810f43c:	d16c      	bne.n	810f518 <_strtod_l+0x8b8>
 810f43e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810f442:	2b00      	cmp	r3, #0
 810f444:	d168      	bne.n	810f518 <_strtod_l+0x8b8>
 810f446:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810f44a:	0d1b      	lsrs	r3, r3, #20
 810f44c:	051b      	lsls	r3, r3, #20
 810f44e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810f452:	d961      	bls.n	810f518 <_strtod_l+0x8b8>
 810f454:	6963      	ldr	r3, [r4, #20]
 810f456:	b913      	cbnz	r3, 810f45e <_strtod_l+0x7fe>
 810f458:	6923      	ldr	r3, [r4, #16]
 810f45a:	2b01      	cmp	r3, #1
 810f45c:	dd5c      	ble.n	810f518 <_strtod_l+0x8b8>
 810f45e:	4621      	mov	r1, r4
 810f460:	2201      	movs	r2, #1
 810f462:	9805      	ldr	r0, [sp, #20]
 810f464:	f7ff f984 	bl	810e770 <__lshift>
 810f468:	4641      	mov	r1, r8
 810f46a:	4604      	mov	r4, r0
 810f46c:	f7ff f9ec 	bl	810e848 <__mcmp>
 810f470:	2800      	cmp	r0, #0
 810f472:	dd51      	ble.n	810f518 <_strtod_l+0x8b8>
 810f474:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810f478:	9a08      	ldr	r2, [sp, #32]
 810f47a:	0d1b      	lsrs	r3, r3, #20
 810f47c:	051b      	lsls	r3, r3, #20
 810f47e:	2a00      	cmp	r2, #0
 810f480:	d06b      	beq.n	810f55a <_strtod_l+0x8fa>
 810f482:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810f486:	d868      	bhi.n	810f55a <_strtod_l+0x8fa>
 810f488:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810f48c:	f67f ae9d 	bls.w	810f1ca <_strtod_l+0x56a>
 810f490:	4b0a      	ldr	r3, [pc, #40]	@ (810f4bc <_strtod_l+0x85c>)
 810f492:	4650      	mov	r0, sl
 810f494:	4659      	mov	r1, fp
 810f496:	2200      	movs	r2, #0
 810f498:	f7f1 f936 	bl	8100708 <__aeabi_dmul>
 810f49c:	4b08      	ldr	r3, [pc, #32]	@ (810f4c0 <_strtod_l+0x860>)
 810f49e:	400b      	ands	r3, r1
 810f4a0:	4682      	mov	sl, r0
 810f4a2:	468b      	mov	fp, r1
 810f4a4:	2b00      	cmp	r3, #0
 810f4a6:	f47f ae05 	bne.w	810f0b4 <_strtod_l+0x454>
 810f4aa:	9a05      	ldr	r2, [sp, #20]
 810f4ac:	2322      	movs	r3, #34	@ 0x22
 810f4ae:	6013      	str	r3, [r2, #0]
 810f4b0:	e600      	b.n	810f0b4 <_strtod_l+0x454>
 810f4b2:	bf00      	nop
 810f4b4:	08112268 	.word	0x08112268
 810f4b8:	fffffc02 	.word	0xfffffc02
 810f4bc:	39500000 	.word	0x39500000
 810f4c0:	7ff00000 	.word	0x7ff00000
 810f4c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810f4c8:	d165      	bne.n	810f596 <_strtod_l+0x936>
 810f4ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810f4cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810f4d0:	b35a      	cbz	r2, 810f52a <_strtod_l+0x8ca>
 810f4d2:	4a9f      	ldr	r2, [pc, #636]	@ (810f750 <_strtod_l+0xaf0>)
 810f4d4:	4293      	cmp	r3, r2
 810f4d6:	d12b      	bne.n	810f530 <_strtod_l+0x8d0>
 810f4d8:	9b08      	ldr	r3, [sp, #32]
 810f4da:	4651      	mov	r1, sl
 810f4dc:	b303      	cbz	r3, 810f520 <_strtod_l+0x8c0>
 810f4de:	4b9d      	ldr	r3, [pc, #628]	@ (810f754 <_strtod_l+0xaf4>)
 810f4e0:	465a      	mov	r2, fp
 810f4e2:	4013      	ands	r3, r2
 810f4e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810f4e8:	f04f 32ff 	mov.w	r2, #4294967295
 810f4ec:	d81b      	bhi.n	810f526 <_strtod_l+0x8c6>
 810f4ee:	0d1b      	lsrs	r3, r3, #20
 810f4f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810f4f4:	fa02 f303 	lsl.w	r3, r2, r3
 810f4f8:	4299      	cmp	r1, r3
 810f4fa:	d119      	bne.n	810f530 <_strtod_l+0x8d0>
 810f4fc:	4b96      	ldr	r3, [pc, #600]	@ (810f758 <_strtod_l+0xaf8>)
 810f4fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f500:	429a      	cmp	r2, r3
 810f502:	d102      	bne.n	810f50a <_strtod_l+0x8aa>
 810f504:	3101      	adds	r1, #1
 810f506:	f43f adca 	beq.w	810f09e <_strtod_l+0x43e>
 810f50a:	4b92      	ldr	r3, [pc, #584]	@ (810f754 <_strtod_l+0xaf4>)
 810f50c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f50e:	401a      	ands	r2, r3
 810f510:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810f514:	f04f 0a00 	mov.w	sl, #0
 810f518:	9b08      	ldr	r3, [sp, #32]
 810f51a:	2b00      	cmp	r3, #0
 810f51c:	d1b8      	bne.n	810f490 <_strtod_l+0x830>
 810f51e:	e5c9      	b.n	810f0b4 <_strtod_l+0x454>
 810f520:	f04f 33ff 	mov.w	r3, #4294967295
 810f524:	e7e8      	b.n	810f4f8 <_strtod_l+0x898>
 810f526:	4613      	mov	r3, r2
 810f528:	e7e6      	b.n	810f4f8 <_strtod_l+0x898>
 810f52a:	ea53 030a 	orrs.w	r3, r3, sl
 810f52e:	d0a1      	beq.n	810f474 <_strtod_l+0x814>
 810f530:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810f532:	b1db      	cbz	r3, 810f56c <_strtod_l+0x90c>
 810f534:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f536:	4213      	tst	r3, r2
 810f538:	d0ee      	beq.n	810f518 <_strtod_l+0x8b8>
 810f53a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f53c:	9a08      	ldr	r2, [sp, #32]
 810f53e:	4650      	mov	r0, sl
 810f540:	4659      	mov	r1, fp
 810f542:	b1bb      	cbz	r3, 810f574 <_strtod_l+0x914>
 810f544:	f7ff fb6e 	bl	810ec24 <sulp>
 810f548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810f54c:	ec53 2b10 	vmov	r2, r3, d0
 810f550:	f7f0 ff24 	bl	810039c <__adddf3>
 810f554:	4682      	mov	sl, r0
 810f556:	468b      	mov	fp, r1
 810f558:	e7de      	b.n	810f518 <_strtod_l+0x8b8>
 810f55a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810f55e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810f562:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810f566:	f04f 3aff 	mov.w	sl, #4294967295
 810f56a:	e7d5      	b.n	810f518 <_strtod_l+0x8b8>
 810f56c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810f56e:	ea13 0f0a 	tst.w	r3, sl
 810f572:	e7e1      	b.n	810f538 <_strtod_l+0x8d8>
 810f574:	f7ff fb56 	bl	810ec24 <sulp>
 810f578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810f57c:	ec53 2b10 	vmov	r2, r3, d0
 810f580:	f7f0 ff0a 	bl	8100398 <__aeabi_dsub>
 810f584:	2200      	movs	r2, #0
 810f586:	2300      	movs	r3, #0
 810f588:	4682      	mov	sl, r0
 810f58a:	468b      	mov	fp, r1
 810f58c:	f7f1 fb24 	bl	8100bd8 <__aeabi_dcmpeq>
 810f590:	2800      	cmp	r0, #0
 810f592:	d0c1      	beq.n	810f518 <_strtod_l+0x8b8>
 810f594:	e619      	b.n	810f1ca <_strtod_l+0x56a>
 810f596:	4641      	mov	r1, r8
 810f598:	4620      	mov	r0, r4
 810f59a:	f7ff facd 	bl	810eb38 <__ratio>
 810f59e:	ec57 6b10 	vmov	r6, r7, d0
 810f5a2:	2200      	movs	r2, #0
 810f5a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810f5a8:	4630      	mov	r0, r6
 810f5aa:	4639      	mov	r1, r7
 810f5ac:	f7f1 fb28 	bl	8100c00 <__aeabi_dcmple>
 810f5b0:	2800      	cmp	r0, #0
 810f5b2:	d06f      	beq.n	810f694 <_strtod_l+0xa34>
 810f5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f5b6:	2b00      	cmp	r3, #0
 810f5b8:	d17a      	bne.n	810f6b0 <_strtod_l+0xa50>
 810f5ba:	f1ba 0f00 	cmp.w	sl, #0
 810f5be:	d158      	bne.n	810f672 <_strtod_l+0xa12>
 810f5c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f5c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810f5c6:	2b00      	cmp	r3, #0
 810f5c8:	d15a      	bne.n	810f680 <_strtod_l+0xa20>
 810f5ca:	4b64      	ldr	r3, [pc, #400]	@ (810f75c <_strtod_l+0xafc>)
 810f5cc:	2200      	movs	r2, #0
 810f5ce:	4630      	mov	r0, r6
 810f5d0:	4639      	mov	r1, r7
 810f5d2:	f7f1 fb0b 	bl	8100bec <__aeabi_dcmplt>
 810f5d6:	2800      	cmp	r0, #0
 810f5d8:	d159      	bne.n	810f68e <_strtod_l+0xa2e>
 810f5da:	4630      	mov	r0, r6
 810f5dc:	4639      	mov	r1, r7
 810f5de:	4b60      	ldr	r3, [pc, #384]	@ (810f760 <_strtod_l+0xb00>)
 810f5e0:	2200      	movs	r2, #0
 810f5e2:	f7f1 f891 	bl	8100708 <__aeabi_dmul>
 810f5e6:	4606      	mov	r6, r0
 810f5e8:	460f      	mov	r7, r1
 810f5ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810f5ee:	9606      	str	r6, [sp, #24]
 810f5f0:	9307      	str	r3, [sp, #28]
 810f5f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810f5f6:	4d57      	ldr	r5, [pc, #348]	@ (810f754 <_strtod_l+0xaf4>)
 810f5f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810f5fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f5fe:	401d      	ands	r5, r3
 810f600:	4b58      	ldr	r3, [pc, #352]	@ (810f764 <_strtod_l+0xb04>)
 810f602:	429d      	cmp	r5, r3
 810f604:	f040 80b2 	bne.w	810f76c <_strtod_l+0xb0c>
 810f608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f60a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810f60e:	ec4b ab10 	vmov	d0, sl, fp
 810f612:	f7ff f9c9 	bl	810e9a8 <__ulp>
 810f616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810f61a:	ec51 0b10 	vmov	r0, r1, d0
 810f61e:	f7f1 f873 	bl	8100708 <__aeabi_dmul>
 810f622:	4652      	mov	r2, sl
 810f624:	465b      	mov	r3, fp
 810f626:	f7f0 feb9 	bl	810039c <__adddf3>
 810f62a:	460b      	mov	r3, r1
 810f62c:	4949      	ldr	r1, [pc, #292]	@ (810f754 <_strtod_l+0xaf4>)
 810f62e:	4a4e      	ldr	r2, [pc, #312]	@ (810f768 <_strtod_l+0xb08>)
 810f630:	4019      	ands	r1, r3
 810f632:	4291      	cmp	r1, r2
 810f634:	4682      	mov	sl, r0
 810f636:	d942      	bls.n	810f6be <_strtod_l+0xa5e>
 810f638:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810f63a:	4b47      	ldr	r3, [pc, #284]	@ (810f758 <_strtod_l+0xaf8>)
 810f63c:	429a      	cmp	r2, r3
 810f63e:	d103      	bne.n	810f648 <_strtod_l+0x9e8>
 810f640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810f642:	3301      	adds	r3, #1
 810f644:	f43f ad2b 	beq.w	810f09e <_strtod_l+0x43e>
 810f648:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810f758 <_strtod_l+0xaf8>
 810f64c:	f04f 3aff 	mov.w	sl, #4294967295
 810f650:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810f652:	9805      	ldr	r0, [sp, #20]
 810f654:	f7fe fe74 	bl	810e340 <_Bfree>
 810f658:	9805      	ldr	r0, [sp, #20]
 810f65a:	4649      	mov	r1, r9
 810f65c:	f7fe fe70 	bl	810e340 <_Bfree>
 810f660:	9805      	ldr	r0, [sp, #20]
 810f662:	4641      	mov	r1, r8
 810f664:	f7fe fe6c 	bl	810e340 <_Bfree>
 810f668:	9805      	ldr	r0, [sp, #20]
 810f66a:	4621      	mov	r1, r4
 810f66c:	f7fe fe68 	bl	810e340 <_Bfree>
 810f670:	e618      	b.n	810f2a4 <_strtod_l+0x644>
 810f672:	f1ba 0f01 	cmp.w	sl, #1
 810f676:	d103      	bne.n	810f680 <_strtod_l+0xa20>
 810f678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810f67a:	2b00      	cmp	r3, #0
 810f67c:	f43f ada5 	beq.w	810f1ca <_strtod_l+0x56a>
 810f680:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810f730 <_strtod_l+0xad0>
 810f684:	4f35      	ldr	r7, [pc, #212]	@ (810f75c <_strtod_l+0xafc>)
 810f686:	ed8d 7b06 	vstr	d7, [sp, #24]
 810f68a:	2600      	movs	r6, #0
 810f68c:	e7b1      	b.n	810f5f2 <_strtod_l+0x992>
 810f68e:	4f34      	ldr	r7, [pc, #208]	@ (810f760 <_strtod_l+0xb00>)
 810f690:	2600      	movs	r6, #0
 810f692:	e7aa      	b.n	810f5ea <_strtod_l+0x98a>
 810f694:	4b32      	ldr	r3, [pc, #200]	@ (810f760 <_strtod_l+0xb00>)
 810f696:	4630      	mov	r0, r6
 810f698:	4639      	mov	r1, r7
 810f69a:	2200      	movs	r2, #0
 810f69c:	f7f1 f834 	bl	8100708 <__aeabi_dmul>
 810f6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f6a2:	4606      	mov	r6, r0
 810f6a4:	460f      	mov	r7, r1
 810f6a6:	2b00      	cmp	r3, #0
 810f6a8:	d09f      	beq.n	810f5ea <_strtod_l+0x98a>
 810f6aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810f6ae:	e7a0      	b.n	810f5f2 <_strtod_l+0x992>
 810f6b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810f738 <_strtod_l+0xad8>
 810f6b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 810f6b8:	ec57 6b17 	vmov	r6, r7, d7
 810f6bc:	e799      	b.n	810f5f2 <_strtod_l+0x992>
 810f6be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810f6c2:	9b08      	ldr	r3, [sp, #32]
 810f6c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810f6c8:	2b00      	cmp	r3, #0
 810f6ca:	d1c1      	bne.n	810f650 <_strtod_l+0x9f0>
 810f6cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810f6d0:	0d1b      	lsrs	r3, r3, #20
 810f6d2:	051b      	lsls	r3, r3, #20
 810f6d4:	429d      	cmp	r5, r3
 810f6d6:	d1bb      	bne.n	810f650 <_strtod_l+0x9f0>
 810f6d8:	4630      	mov	r0, r6
 810f6da:	4639      	mov	r1, r7
 810f6dc:	f7f1 fb74 	bl	8100dc8 <__aeabi_d2lz>
 810f6e0:	f7f0 ffe4 	bl	81006ac <__aeabi_l2d>
 810f6e4:	4602      	mov	r2, r0
 810f6e6:	460b      	mov	r3, r1
 810f6e8:	4630      	mov	r0, r6
 810f6ea:	4639      	mov	r1, r7
 810f6ec:	f7f0 fe54 	bl	8100398 <__aeabi_dsub>
 810f6f0:	460b      	mov	r3, r1
 810f6f2:	4602      	mov	r2, r0
 810f6f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810f6f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810f6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f6fe:	ea46 060a 	orr.w	r6, r6, sl
 810f702:	431e      	orrs	r6, r3
 810f704:	d06f      	beq.n	810f7e6 <_strtod_l+0xb86>
 810f706:	a30e      	add	r3, pc, #56	@ (adr r3, 810f740 <_strtod_l+0xae0>)
 810f708:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f70c:	f7f1 fa6e 	bl	8100bec <__aeabi_dcmplt>
 810f710:	2800      	cmp	r0, #0
 810f712:	f47f accf 	bne.w	810f0b4 <_strtod_l+0x454>
 810f716:	a30c      	add	r3, pc, #48	@ (adr r3, 810f748 <_strtod_l+0xae8>)
 810f718:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f71c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810f720:	f7f1 fa82 	bl	8100c28 <__aeabi_dcmpgt>
 810f724:	2800      	cmp	r0, #0
 810f726:	d093      	beq.n	810f650 <_strtod_l+0x9f0>
 810f728:	e4c4      	b.n	810f0b4 <_strtod_l+0x454>
 810f72a:	bf00      	nop
 810f72c:	f3af 8000 	nop.w
 810f730:	00000000 	.word	0x00000000
 810f734:	bff00000 	.word	0xbff00000
 810f738:	00000000 	.word	0x00000000
 810f73c:	3ff00000 	.word	0x3ff00000
 810f740:	94a03595 	.word	0x94a03595
 810f744:	3fdfffff 	.word	0x3fdfffff
 810f748:	35afe535 	.word	0x35afe535
 810f74c:	3fe00000 	.word	0x3fe00000
 810f750:	000fffff 	.word	0x000fffff
 810f754:	7ff00000 	.word	0x7ff00000
 810f758:	7fefffff 	.word	0x7fefffff
 810f75c:	3ff00000 	.word	0x3ff00000
 810f760:	3fe00000 	.word	0x3fe00000
 810f764:	7fe00000 	.word	0x7fe00000
 810f768:	7c9fffff 	.word	0x7c9fffff
 810f76c:	9b08      	ldr	r3, [sp, #32]
 810f76e:	b323      	cbz	r3, 810f7ba <_strtod_l+0xb5a>
 810f770:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810f774:	d821      	bhi.n	810f7ba <_strtod_l+0xb5a>
 810f776:	a328      	add	r3, pc, #160	@ (adr r3, 810f818 <_strtod_l+0xbb8>)
 810f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f77c:	4630      	mov	r0, r6
 810f77e:	4639      	mov	r1, r7
 810f780:	f7f1 fa3e 	bl	8100c00 <__aeabi_dcmple>
 810f784:	b1a0      	cbz	r0, 810f7b0 <_strtod_l+0xb50>
 810f786:	4639      	mov	r1, r7
 810f788:	4630      	mov	r0, r6
 810f78a:	f7f1 fa95 	bl	8100cb8 <__aeabi_d2uiz>
 810f78e:	2801      	cmp	r0, #1
 810f790:	bf38      	it	cc
 810f792:	2001      	movcc	r0, #1
 810f794:	f7f0 ff3e 	bl	8100614 <__aeabi_ui2d>
 810f798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f79a:	4606      	mov	r6, r0
 810f79c:	460f      	mov	r7, r1
 810f79e:	b9fb      	cbnz	r3, 810f7e0 <_strtod_l+0xb80>
 810f7a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810f7a4:	9014      	str	r0, [sp, #80]	@ 0x50
 810f7a6:	9315      	str	r3, [sp, #84]	@ 0x54
 810f7a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810f7ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810f7b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810f7b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810f7b6:	1b5b      	subs	r3, r3, r5
 810f7b8:	9311      	str	r3, [sp, #68]	@ 0x44
 810f7ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810f7be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810f7c2:	f7ff f8f1 	bl	810e9a8 <__ulp>
 810f7c6:	4650      	mov	r0, sl
 810f7c8:	ec53 2b10 	vmov	r2, r3, d0
 810f7cc:	4659      	mov	r1, fp
 810f7ce:	f7f0 ff9b 	bl	8100708 <__aeabi_dmul>
 810f7d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810f7d6:	f7f0 fde1 	bl	810039c <__adddf3>
 810f7da:	4682      	mov	sl, r0
 810f7dc:	468b      	mov	fp, r1
 810f7de:	e770      	b.n	810f6c2 <_strtod_l+0xa62>
 810f7e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810f7e4:	e7e0      	b.n	810f7a8 <_strtod_l+0xb48>
 810f7e6:	a30e      	add	r3, pc, #56	@ (adr r3, 810f820 <_strtod_l+0xbc0>)
 810f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f7ec:	f7f1 f9fe 	bl	8100bec <__aeabi_dcmplt>
 810f7f0:	e798      	b.n	810f724 <_strtod_l+0xac4>
 810f7f2:	2300      	movs	r3, #0
 810f7f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 810f7f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810f7f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810f7fa:	6013      	str	r3, [r2, #0]
 810f7fc:	f7ff ba6d 	b.w	810ecda <_strtod_l+0x7a>
 810f800:	2a65      	cmp	r2, #101	@ 0x65
 810f802:	f43f ab66 	beq.w	810eed2 <_strtod_l+0x272>
 810f806:	2a45      	cmp	r2, #69	@ 0x45
 810f808:	f43f ab63 	beq.w	810eed2 <_strtod_l+0x272>
 810f80c:	2301      	movs	r3, #1
 810f80e:	f7ff bb9e 	b.w	810ef4e <_strtod_l+0x2ee>
 810f812:	bf00      	nop
 810f814:	f3af 8000 	nop.w
 810f818:	ffc00000 	.word	0xffc00000
 810f81c:	41dfffff 	.word	0x41dfffff
 810f820:	94a03595 	.word	0x94a03595
 810f824:	3fcfffff 	.word	0x3fcfffff

0810f828 <_strtod_r>:
 810f828:	4b01      	ldr	r3, [pc, #4]	@ (810f830 <_strtod_r+0x8>)
 810f82a:	f7ff ba19 	b.w	810ec60 <_strtod_l>
 810f82e:	bf00      	nop
 810f830:	100000e4 	.word	0x100000e4

0810f834 <_strtol_l.constprop.0>:
 810f834:	2b24      	cmp	r3, #36	@ 0x24
 810f836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f83a:	4686      	mov	lr, r0
 810f83c:	4690      	mov	r8, r2
 810f83e:	d801      	bhi.n	810f844 <_strtol_l.constprop.0+0x10>
 810f840:	2b01      	cmp	r3, #1
 810f842:	d106      	bne.n	810f852 <_strtol_l.constprop.0+0x1e>
 810f844:	f7fd fdae 	bl	810d3a4 <__errno>
 810f848:	2316      	movs	r3, #22
 810f84a:	6003      	str	r3, [r0, #0]
 810f84c:	2000      	movs	r0, #0
 810f84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f852:	4834      	ldr	r0, [pc, #208]	@ (810f924 <_strtol_l.constprop.0+0xf0>)
 810f854:	460d      	mov	r5, r1
 810f856:	462a      	mov	r2, r5
 810f858:	f815 4b01 	ldrb.w	r4, [r5], #1
 810f85c:	5d06      	ldrb	r6, [r0, r4]
 810f85e:	f016 0608 	ands.w	r6, r6, #8
 810f862:	d1f8      	bne.n	810f856 <_strtol_l.constprop.0+0x22>
 810f864:	2c2d      	cmp	r4, #45	@ 0x2d
 810f866:	d12d      	bne.n	810f8c4 <_strtol_l.constprop.0+0x90>
 810f868:	782c      	ldrb	r4, [r5, #0]
 810f86a:	2601      	movs	r6, #1
 810f86c:	1c95      	adds	r5, r2, #2
 810f86e:	f033 0210 	bics.w	r2, r3, #16
 810f872:	d109      	bne.n	810f888 <_strtol_l.constprop.0+0x54>
 810f874:	2c30      	cmp	r4, #48	@ 0x30
 810f876:	d12a      	bne.n	810f8ce <_strtol_l.constprop.0+0x9a>
 810f878:	782a      	ldrb	r2, [r5, #0]
 810f87a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810f87e:	2a58      	cmp	r2, #88	@ 0x58
 810f880:	d125      	bne.n	810f8ce <_strtol_l.constprop.0+0x9a>
 810f882:	786c      	ldrb	r4, [r5, #1]
 810f884:	2310      	movs	r3, #16
 810f886:	3502      	adds	r5, #2
 810f888:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 810f88c:	f10c 3cff 	add.w	ip, ip, #4294967295
 810f890:	2200      	movs	r2, #0
 810f892:	fbbc f9f3 	udiv	r9, ip, r3
 810f896:	4610      	mov	r0, r2
 810f898:	fb03 ca19 	mls	sl, r3, r9, ip
 810f89c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 810f8a0:	2f09      	cmp	r7, #9
 810f8a2:	d81b      	bhi.n	810f8dc <_strtol_l.constprop.0+0xa8>
 810f8a4:	463c      	mov	r4, r7
 810f8a6:	42a3      	cmp	r3, r4
 810f8a8:	dd27      	ble.n	810f8fa <_strtol_l.constprop.0+0xc6>
 810f8aa:	1c57      	adds	r7, r2, #1
 810f8ac:	d007      	beq.n	810f8be <_strtol_l.constprop.0+0x8a>
 810f8ae:	4581      	cmp	r9, r0
 810f8b0:	d320      	bcc.n	810f8f4 <_strtol_l.constprop.0+0xc0>
 810f8b2:	d101      	bne.n	810f8b8 <_strtol_l.constprop.0+0x84>
 810f8b4:	45a2      	cmp	sl, r4
 810f8b6:	db1d      	blt.n	810f8f4 <_strtol_l.constprop.0+0xc0>
 810f8b8:	fb00 4003 	mla	r0, r0, r3, r4
 810f8bc:	2201      	movs	r2, #1
 810f8be:	f815 4b01 	ldrb.w	r4, [r5], #1
 810f8c2:	e7eb      	b.n	810f89c <_strtol_l.constprop.0+0x68>
 810f8c4:	2c2b      	cmp	r4, #43	@ 0x2b
 810f8c6:	bf04      	itt	eq
 810f8c8:	782c      	ldrbeq	r4, [r5, #0]
 810f8ca:	1c95      	addeq	r5, r2, #2
 810f8cc:	e7cf      	b.n	810f86e <_strtol_l.constprop.0+0x3a>
 810f8ce:	2b00      	cmp	r3, #0
 810f8d0:	d1da      	bne.n	810f888 <_strtol_l.constprop.0+0x54>
 810f8d2:	2c30      	cmp	r4, #48	@ 0x30
 810f8d4:	bf0c      	ite	eq
 810f8d6:	2308      	moveq	r3, #8
 810f8d8:	230a      	movne	r3, #10
 810f8da:	e7d5      	b.n	810f888 <_strtol_l.constprop.0+0x54>
 810f8dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 810f8e0:	2f19      	cmp	r7, #25
 810f8e2:	d801      	bhi.n	810f8e8 <_strtol_l.constprop.0+0xb4>
 810f8e4:	3c37      	subs	r4, #55	@ 0x37
 810f8e6:	e7de      	b.n	810f8a6 <_strtol_l.constprop.0+0x72>
 810f8e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 810f8ec:	2f19      	cmp	r7, #25
 810f8ee:	d804      	bhi.n	810f8fa <_strtol_l.constprop.0+0xc6>
 810f8f0:	3c57      	subs	r4, #87	@ 0x57
 810f8f2:	e7d8      	b.n	810f8a6 <_strtol_l.constprop.0+0x72>
 810f8f4:	f04f 32ff 	mov.w	r2, #4294967295
 810f8f8:	e7e1      	b.n	810f8be <_strtol_l.constprop.0+0x8a>
 810f8fa:	1c53      	adds	r3, r2, #1
 810f8fc:	d108      	bne.n	810f910 <_strtol_l.constprop.0+0xdc>
 810f8fe:	2322      	movs	r3, #34	@ 0x22
 810f900:	f8ce 3000 	str.w	r3, [lr]
 810f904:	4660      	mov	r0, ip
 810f906:	f1b8 0f00 	cmp.w	r8, #0
 810f90a:	d0a0      	beq.n	810f84e <_strtol_l.constprop.0+0x1a>
 810f90c:	1e69      	subs	r1, r5, #1
 810f90e:	e006      	b.n	810f91e <_strtol_l.constprop.0+0xea>
 810f910:	b106      	cbz	r6, 810f914 <_strtol_l.constprop.0+0xe0>
 810f912:	4240      	negs	r0, r0
 810f914:	f1b8 0f00 	cmp.w	r8, #0
 810f918:	d099      	beq.n	810f84e <_strtol_l.constprop.0+0x1a>
 810f91a:	2a00      	cmp	r2, #0
 810f91c:	d1f6      	bne.n	810f90c <_strtol_l.constprop.0+0xd8>
 810f91e:	f8c8 1000 	str.w	r1, [r8]
 810f922:	e794      	b.n	810f84e <_strtol_l.constprop.0+0x1a>
 810f924:	08112291 	.word	0x08112291

0810f928 <_strtol_r>:
 810f928:	f7ff bf84 	b.w	810f834 <_strtol_l.constprop.0>

0810f92c <__ssputs_r>:
 810f92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f930:	688e      	ldr	r6, [r1, #8]
 810f932:	461f      	mov	r7, r3
 810f934:	42be      	cmp	r6, r7
 810f936:	680b      	ldr	r3, [r1, #0]
 810f938:	4682      	mov	sl, r0
 810f93a:	460c      	mov	r4, r1
 810f93c:	4690      	mov	r8, r2
 810f93e:	d82d      	bhi.n	810f99c <__ssputs_r+0x70>
 810f940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810f944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810f948:	d026      	beq.n	810f998 <__ssputs_r+0x6c>
 810f94a:	6965      	ldr	r5, [r4, #20]
 810f94c:	6909      	ldr	r1, [r1, #16]
 810f94e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810f952:	eba3 0901 	sub.w	r9, r3, r1
 810f956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810f95a:	1c7b      	adds	r3, r7, #1
 810f95c:	444b      	add	r3, r9
 810f95e:	106d      	asrs	r5, r5, #1
 810f960:	429d      	cmp	r5, r3
 810f962:	bf38      	it	cc
 810f964:	461d      	movcc	r5, r3
 810f966:	0553      	lsls	r3, r2, #21
 810f968:	d527      	bpl.n	810f9ba <__ssputs_r+0x8e>
 810f96a:	4629      	mov	r1, r5
 810f96c:	f7fe fc1c 	bl	810e1a8 <_malloc_r>
 810f970:	4606      	mov	r6, r0
 810f972:	b360      	cbz	r0, 810f9ce <__ssputs_r+0xa2>
 810f974:	6921      	ldr	r1, [r4, #16]
 810f976:	464a      	mov	r2, r9
 810f978:	f7fd fd41 	bl	810d3fe <memcpy>
 810f97c:	89a3      	ldrh	r3, [r4, #12]
 810f97e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810f982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810f986:	81a3      	strh	r3, [r4, #12]
 810f988:	6126      	str	r6, [r4, #16]
 810f98a:	6165      	str	r5, [r4, #20]
 810f98c:	444e      	add	r6, r9
 810f98e:	eba5 0509 	sub.w	r5, r5, r9
 810f992:	6026      	str	r6, [r4, #0]
 810f994:	60a5      	str	r5, [r4, #8]
 810f996:	463e      	mov	r6, r7
 810f998:	42be      	cmp	r6, r7
 810f99a:	d900      	bls.n	810f99e <__ssputs_r+0x72>
 810f99c:	463e      	mov	r6, r7
 810f99e:	6820      	ldr	r0, [r4, #0]
 810f9a0:	4632      	mov	r2, r6
 810f9a2:	4641      	mov	r1, r8
 810f9a4:	f000 fb6a 	bl	811007c <memmove>
 810f9a8:	68a3      	ldr	r3, [r4, #8]
 810f9aa:	1b9b      	subs	r3, r3, r6
 810f9ac:	60a3      	str	r3, [r4, #8]
 810f9ae:	6823      	ldr	r3, [r4, #0]
 810f9b0:	4433      	add	r3, r6
 810f9b2:	6023      	str	r3, [r4, #0]
 810f9b4:	2000      	movs	r0, #0
 810f9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f9ba:	462a      	mov	r2, r5
 810f9bc:	f000 ff41 	bl	8110842 <_realloc_r>
 810f9c0:	4606      	mov	r6, r0
 810f9c2:	2800      	cmp	r0, #0
 810f9c4:	d1e0      	bne.n	810f988 <__ssputs_r+0x5c>
 810f9c6:	6921      	ldr	r1, [r4, #16]
 810f9c8:	4650      	mov	r0, sl
 810f9ca:	f7fe fb79 	bl	810e0c0 <_free_r>
 810f9ce:	230c      	movs	r3, #12
 810f9d0:	f8ca 3000 	str.w	r3, [sl]
 810f9d4:	89a3      	ldrh	r3, [r4, #12]
 810f9d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810f9da:	81a3      	strh	r3, [r4, #12]
 810f9dc:	f04f 30ff 	mov.w	r0, #4294967295
 810f9e0:	e7e9      	b.n	810f9b6 <__ssputs_r+0x8a>
	...

0810f9e4 <_svfiprintf_r>:
 810f9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f9e8:	4698      	mov	r8, r3
 810f9ea:	898b      	ldrh	r3, [r1, #12]
 810f9ec:	061b      	lsls	r3, r3, #24
 810f9ee:	b09d      	sub	sp, #116	@ 0x74
 810f9f0:	4607      	mov	r7, r0
 810f9f2:	460d      	mov	r5, r1
 810f9f4:	4614      	mov	r4, r2
 810f9f6:	d510      	bpl.n	810fa1a <_svfiprintf_r+0x36>
 810f9f8:	690b      	ldr	r3, [r1, #16]
 810f9fa:	b973      	cbnz	r3, 810fa1a <_svfiprintf_r+0x36>
 810f9fc:	2140      	movs	r1, #64	@ 0x40
 810f9fe:	f7fe fbd3 	bl	810e1a8 <_malloc_r>
 810fa02:	6028      	str	r0, [r5, #0]
 810fa04:	6128      	str	r0, [r5, #16]
 810fa06:	b930      	cbnz	r0, 810fa16 <_svfiprintf_r+0x32>
 810fa08:	230c      	movs	r3, #12
 810fa0a:	603b      	str	r3, [r7, #0]
 810fa0c:	f04f 30ff 	mov.w	r0, #4294967295
 810fa10:	b01d      	add	sp, #116	@ 0x74
 810fa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fa16:	2340      	movs	r3, #64	@ 0x40
 810fa18:	616b      	str	r3, [r5, #20]
 810fa1a:	2300      	movs	r3, #0
 810fa1c:	9309      	str	r3, [sp, #36]	@ 0x24
 810fa1e:	2320      	movs	r3, #32
 810fa20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810fa24:	f8cd 800c 	str.w	r8, [sp, #12]
 810fa28:	2330      	movs	r3, #48	@ 0x30
 810fa2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810fbc8 <_svfiprintf_r+0x1e4>
 810fa2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810fa32:	f04f 0901 	mov.w	r9, #1
 810fa36:	4623      	mov	r3, r4
 810fa38:	469a      	mov	sl, r3
 810fa3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810fa3e:	b10a      	cbz	r2, 810fa44 <_svfiprintf_r+0x60>
 810fa40:	2a25      	cmp	r2, #37	@ 0x25
 810fa42:	d1f9      	bne.n	810fa38 <_svfiprintf_r+0x54>
 810fa44:	ebba 0b04 	subs.w	fp, sl, r4
 810fa48:	d00b      	beq.n	810fa62 <_svfiprintf_r+0x7e>
 810fa4a:	465b      	mov	r3, fp
 810fa4c:	4622      	mov	r2, r4
 810fa4e:	4629      	mov	r1, r5
 810fa50:	4638      	mov	r0, r7
 810fa52:	f7ff ff6b 	bl	810f92c <__ssputs_r>
 810fa56:	3001      	adds	r0, #1
 810fa58:	f000 80a7 	beq.w	810fbaa <_svfiprintf_r+0x1c6>
 810fa5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810fa5e:	445a      	add	r2, fp
 810fa60:	9209      	str	r2, [sp, #36]	@ 0x24
 810fa62:	f89a 3000 	ldrb.w	r3, [sl]
 810fa66:	2b00      	cmp	r3, #0
 810fa68:	f000 809f 	beq.w	810fbaa <_svfiprintf_r+0x1c6>
 810fa6c:	2300      	movs	r3, #0
 810fa6e:	f04f 32ff 	mov.w	r2, #4294967295
 810fa72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810fa76:	f10a 0a01 	add.w	sl, sl, #1
 810fa7a:	9304      	str	r3, [sp, #16]
 810fa7c:	9307      	str	r3, [sp, #28]
 810fa7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810fa82:	931a      	str	r3, [sp, #104]	@ 0x68
 810fa84:	4654      	mov	r4, sl
 810fa86:	2205      	movs	r2, #5
 810fa88:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fa8c:	484e      	ldr	r0, [pc, #312]	@ (810fbc8 <_svfiprintf_r+0x1e4>)
 810fa8e:	f7f0 fc27 	bl	81002e0 <memchr>
 810fa92:	9a04      	ldr	r2, [sp, #16]
 810fa94:	b9d8      	cbnz	r0, 810face <_svfiprintf_r+0xea>
 810fa96:	06d0      	lsls	r0, r2, #27
 810fa98:	bf44      	itt	mi
 810fa9a:	2320      	movmi	r3, #32
 810fa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810faa0:	0711      	lsls	r1, r2, #28
 810faa2:	bf44      	itt	mi
 810faa4:	232b      	movmi	r3, #43	@ 0x2b
 810faa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810faaa:	f89a 3000 	ldrb.w	r3, [sl]
 810faae:	2b2a      	cmp	r3, #42	@ 0x2a
 810fab0:	d015      	beq.n	810fade <_svfiprintf_r+0xfa>
 810fab2:	9a07      	ldr	r2, [sp, #28]
 810fab4:	4654      	mov	r4, sl
 810fab6:	2000      	movs	r0, #0
 810fab8:	f04f 0c0a 	mov.w	ip, #10
 810fabc:	4621      	mov	r1, r4
 810fabe:	f811 3b01 	ldrb.w	r3, [r1], #1
 810fac2:	3b30      	subs	r3, #48	@ 0x30
 810fac4:	2b09      	cmp	r3, #9
 810fac6:	d94b      	bls.n	810fb60 <_svfiprintf_r+0x17c>
 810fac8:	b1b0      	cbz	r0, 810faf8 <_svfiprintf_r+0x114>
 810faca:	9207      	str	r2, [sp, #28]
 810facc:	e014      	b.n	810faf8 <_svfiprintf_r+0x114>
 810face:	eba0 0308 	sub.w	r3, r0, r8
 810fad2:	fa09 f303 	lsl.w	r3, r9, r3
 810fad6:	4313      	orrs	r3, r2
 810fad8:	9304      	str	r3, [sp, #16]
 810fada:	46a2      	mov	sl, r4
 810fadc:	e7d2      	b.n	810fa84 <_svfiprintf_r+0xa0>
 810fade:	9b03      	ldr	r3, [sp, #12]
 810fae0:	1d19      	adds	r1, r3, #4
 810fae2:	681b      	ldr	r3, [r3, #0]
 810fae4:	9103      	str	r1, [sp, #12]
 810fae6:	2b00      	cmp	r3, #0
 810fae8:	bfbb      	ittet	lt
 810faea:	425b      	neglt	r3, r3
 810faec:	f042 0202 	orrlt.w	r2, r2, #2
 810faf0:	9307      	strge	r3, [sp, #28]
 810faf2:	9307      	strlt	r3, [sp, #28]
 810faf4:	bfb8      	it	lt
 810faf6:	9204      	strlt	r2, [sp, #16]
 810faf8:	7823      	ldrb	r3, [r4, #0]
 810fafa:	2b2e      	cmp	r3, #46	@ 0x2e
 810fafc:	d10a      	bne.n	810fb14 <_svfiprintf_r+0x130>
 810fafe:	7863      	ldrb	r3, [r4, #1]
 810fb00:	2b2a      	cmp	r3, #42	@ 0x2a
 810fb02:	d132      	bne.n	810fb6a <_svfiprintf_r+0x186>
 810fb04:	9b03      	ldr	r3, [sp, #12]
 810fb06:	1d1a      	adds	r2, r3, #4
 810fb08:	681b      	ldr	r3, [r3, #0]
 810fb0a:	9203      	str	r2, [sp, #12]
 810fb0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810fb10:	3402      	adds	r4, #2
 810fb12:	9305      	str	r3, [sp, #20]
 810fb14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810fbd8 <_svfiprintf_r+0x1f4>
 810fb18:	7821      	ldrb	r1, [r4, #0]
 810fb1a:	2203      	movs	r2, #3
 810fb1c:	4650      	mov	r0, sl
 810fb1e:	f7f0 fbdf 	bl	81002e0 <memchr>
 810fb22:	b138      	cbz	r0, 810fb34 <_svfiprintf_r+0x150>
 810fb24:	9b04      	ldr	r3, [sp, #16]
 810fb26:	eba0 000a 	sub.w	r0, r0, sl
 810fb2a:	2240      	movs	r2, #64	@ 0x40
 810fb2c:	4082      	lsls	r2, r0
 810fb2e:	4313      	orrs	r3, r2
 810fb30:	3401      	adds	r4, #1
 810fb32:	9304      	str	r3, [sp, #16]
 810fb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fb38:	4824      	ldr	r0, [pc, #144]	@ (810fbcc <_svfiprintf_r+0x1e8>)
 810fb3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810fb3e:	2206      	movs	r2, #6
 810fb40:	f7f0 fbce 	bl	81002e0 <memchr>
 810fb44:	2800      	cmp	r0, #0
 810fb46:	d036      	beq.n	810fbb6 <_svfiprintf_r+0x1d2>
 810fb48:	4b21      	ldr	r3, [pc, #132]	@ (810fbd0 <_svfiprintf_r+0x1ec>)
 810fb4a:	bb1b      	cbnz	r3, 810fb94 <_svfiprintf_r+0x1b0>
 810fb4c:	9b03      	ldr	r3, [sp, #12]
 810fb4e:	3307      	adds	r3, #7
 810fb50:	f023 0307 	bic.w	r3, r3, #7
 810fb54:	3308      	adds	r3, #8
 810fb56:	9303      	str	r3, [sp, #12]
 810fb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fb5a:	4433      	add	r3, r6
 810fb5c:	9309      	str	r3, [sp, #36]	@ 0x24
 810fb5e:	e76a      	b.n	810fa36 <_svfiprintf_r+0x52>
 810fb60:	fb0c 3202 	mla	r2, ip, r2, r3
 810fb64:	460c      	mov	r4, r1
 810fb66:	2001      	movs	r0, #1
 810fb68:	e7a8      	b.n	810fabc <_svfiprintf_r+0xd8>
 810fb6a:	2300      	movs	r3, #0
 810fb6c:	3401      	adds	r4, #1
 810fb6e:	9305      	str	r3, [sp, #20]
 810fb70:	4619      	mov	r1, r3
 810fb72:	f04f 0c0a 	mov.w	ip, #10
 810fb76:	4620      	mov	r0, r4
 810fb78:	f810 2b01 	ldrb.w	r2, [r0], #1
 810fb7c:	3a30      	subs	r2, #48	@ 0x30
 810fb7e:	2a09      	cmp	r2, #9
 810fb80:	d903      	bls.n	810fb8a <_svfiprintf_r+0x1a6>
 810fb82:	2b00      	cmp	r3, #0
 810fb84:	d0c6      	beq.n	810fb14 <_svfiprintf_r+0x130>
 810fb86:	9105      	str	r1, [sp, #20]
 810fb88:	e7c4      	b.n	810fb14 <_svfiprintf_r+0x130>
 810fb8a:	fb0c 2101 	mla	r1, ip, r1, r2
 810fb8e:	4604      	mov	r4, r0
 810fb90:	2301      	movs	r3, #1
 810fb92:	e7f0      	b.n	810fb76 <_svfiprintf_r+0x192>
 810fb94:	ab03      	add	r3, sp, #12
 810fb96:	9300      	str	r3, [sp, #0]
 810fb98:	462a      	mov	r2, r5
 810fb9a:	4b0e      	ldr	r3, [pc, #56]	@ (810fbd4 <_svfiprintf_r+0x1f0>)
 810fb9c:	a904      	add	r1, sp, #16
 810fb9e:	4638      	mov	r0, r7
 810fba0:	f7fc fbb8 	bl	810c314 <_printf_float>
 810fba4:	1c42      	adds	r2, r0, #1
 810fba6:	4606      	mov	r6, r0
 810fba8:	d1d6      	bne.n	810fb58 <_svfiprintf_r+0x174>
 810fbaa:	89ab      	ldrh	r3, [r5, #12]
 810fbac:	065b      	lsls	r3, r3, #25
 810fbae:	f53f af2d 	bmi.w	810fa0c <_svfiprintf_r+0x28>
 810fbb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810fbb4:	e72c      	b.n	810fa10 <_svfiprintf_r+0x2c>
 810fbb6:	ab03      	add	r3, sp, #12
 810fbb8:	9300      	str	r3, [sp, #0]
 810fbba:	462a      	mov	r2, r5
 810fbbc:	4b05      	ldr	r3, [pc, #20]	@ (810fbd4 <_svfiprintf_r+0x1f0>)
 810fbbe:	a904      	add	r1, sp, #16
 810fbc0:	4638      	mov	r0, r7
 810fbc2:	f7fc fe3f 	bl	810c844 <_printf_i>
 810fbc6:	e7ed      	b.n	810fba4 <_svfiprintf_r+0x1c0>
 810fbc8:	08112391 	.word	0x08112391
 810fbcc:	0811239b 	.word	0x0811239b
 810fbd0:	0810c315 	.word	0x0810c315
 810fbd4:	0810f92d 	.word	0x0810f92d
 810fbd8:	08112397 	.word	0x08112397

0810fbdc <__sfputc_r>:
 810fbdc:	6893      	ldr	r3, [r2, #8]
 810fbde:	3b01      	subs	r3, #1
 810fbe0:	2b00      	cmp	r3, #0
 810fbe2:	b410      	push	{r4}
 810fbe4:	6093      	str	r3, [r2, #8]
 810fbe6:	da08      	bge.n	810fbfa <__sfputc_r+0x1e>
 810fbe8:	6994      	ldr	r4, [r2, #24]
 810fbea:	42a3      	cmp	r3, r4
 810fbec:	db01      	blt.n	810fbf2 <__sfputc_r+0x16>
 810fbee:	290a      	cmp	r1, #10
 810fbf0:	d103      	bne.n	810fbfa <__sfputc_r+0x1e>
 810fbf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 810fbf6:	f7fd baee 	b.w	810d1d6 <__swbuf_r>
 810fbfa:	6813      	ldr	r3, [r2, #0]
 810fbfc:	1c58      	adds	r0, r3, #1
 810fbfe:	6010      	str	r0, [r2, #0]
 810fc00:	7019      	strb	r1, [r3, #0]
 810fc02:	4608      	mov	r0, r1
 810fc04:	f85d 4b04 	ldr.w	r4, [sp], #4
 810fc08:	4770      	bx	lr

0810fc0a <__sfputs_r>:
 810fc0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fc0c:	4606      	mov	r6, r0
 810fc0e:	460f      	mov	r7, r1
 810fc10:	4614      	mov	r4, r2
 810fc12:	18d5      	adds	r5, r2, r3
 810fc14:	42ac      	cmp	r4, r5
 810fc16:	d101      	bne.n	810fc1c <__sfputs_r+0x12>
 810fc18:	2000      	movs	r0, #0
 810fc1a:	e007      	b.n	810fc2c <__sfputs_r+0x22>
 810fc1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fc20:	463a      	mov	r2, r7
 810fc22:	4630      	mov	r0, r6
 810fc24:	f7ff ffda 	bl	810fbdc <__sfputc_r>
 810fc28:	1c43      	adds	r3, r0, #1
 810fc2a:	d1f3      	bne.n	810fc14 <__sfputs_r+0xa>
 810fc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810fc30 <_vfiprintf_r>:
 810fc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810fc34:	460d      	mov	r5, r1
 810fc36:	b09d      	sub	sp, #116	@ 0x74
 810fc38:	4614      	mov	r4, r2
 810fc3a:	4698      	mov	r8, r3
 810fc3c:	4606      	mov	r6, r0
 810fc3e:	b118      	cbz	r0, 810fc48 <_vfiprintf_r+0x18>
 810fc40:	6a03      	ldr	r3, [r0, #32]
 810fc42:	b90b      	cbnz	r3, 810fc48 <_vfiprintf_r+0x18>
 810fc44:	f7fd f9be 	bl	810cfc4 <__sinit>
 810fc48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810fc4a:	07d9      	lsls	r1, r3, #31
 810fc4c:	d405      	bmi.n	810fc5a <_vfiprintf_r+0x2a>
 810fc4e:	89ab      	ldrh	r3, [r5, #12]
 810fc50:	059a      	lsls	r2, r3, #22
 810fc52:	d402      	bmi.n	810fc5a <_vfiprintf_r+0x2a>
 810fc54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810fc56:	f7fd fbd0 	bl	810d3fa <__retarget_lock_acquire_recursive>
 810fc5a:	89ab      	ldrh	r3, [r5, #12]
 810fc5c:	071b      	lsls	r3, r3, #28
 810fc5e:	d501      	bpl.n	810fc64 <_vfiprintf_r+0x34>
 810fc60:	692b      	ldr	r3, [r5, #16]
 810fc62:	b99b      	cbnz	r3, 810fc8c <_vfiprintf_r+0x5c>
 810fc64:	4629      	mov	r1, r5
 810fc66:	4630      	mov	r0, r6
 810fc68:	f7fd faf4 	bl	810d254 <__swsetup_r>
 810fc6c:	b170      	cbz	r0, 810fc8c <_vfiprintf_r+0x5c>
 810fc6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810fc70:	07dc      	lsls	r4, r3, #31
 810fc72:	d504      	bpl.n	810fc7e <_vfiprintf_r+0x4e>
 810fc74:	f04f 30ff 	mov.w	r0, #4294967295
 810fc78:	b01d      	add	sp, #116	@ 0x74
 810fc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fc7e:	89ab      	ldrh	r3, [r5, #12]
 810fc80:	0598      	lsls	r0, r3, #22
 810fc82:	d4f7      	bmi.n	810fc74 <_vfiprintf_r+0x44>
 810fc84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810fc86:	f7fd fbb9 	bl	810d3fc <__retarget_lock_release_recursive>
 810fc8a:	e7f3      	b.n	810fc74 <_vfiprintf_r+0x44>
 810fc8c:	2300      	movs	r3, #0
 810fc8e:	9309      	str	r3, [sp, #36]	@ 0x24
 810fc90:	2320      	movs	r3, #32
 810fc92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810fc96:	f8cd 800c 	str.w	r8, [sp, #12]
 810fc9a:	2330      	movs	r3, #48	@ 0x30
 810fc9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810fe4c <_vfiprintf_r+0x21c>
 810fca0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810fca4:	f04f 0901 	mov.w	r9, #1
 810fca8:	4623      	mov	r3, r4
 810fcaa:	469a      	mov	sl, r3
 810fcac:	f813 2b01 	ldrb.w	r2, [r3], #1
 810fcb0:	b10a      	cbz	r2, 810fcb6 <_vfiprintf_r+0x86>
 810fcb2:	2a25      	cmp	r2, #37	@ 0x25
 810fcb4:	d1f9      	bne.n	810fcaa <_vfiprintf_r+0x7a>
 810fcb6:	ebba 0b04 	subs.w	fp, sl, r4
 810fcba:	d00b      	beq.n	810fcd4 <_vfiprintf_r+0xa4>
 810fcbc:	465b      	mov	r3, fp
 810fcbe:	4622      	mov	r2, r4
 810fcc0:	4629      	mov	r1, r5
 810fcc2:	4630      	mov	r0, r6
 810fcc4:	f7ff ffa1 	bl	810fc0a <__sfputs_r>
 810fcc8:	3001      	adds	r0, #1
 810fcca:	f000 80a7 	beq.w	810fe1c <_vfiprintf_r+0x1ec>
 810fcce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810fcd0:	445a      	add	r2, fp
 810fcd2:	9209      	str	r2, [sp, #36]	@ 0x24
 810fcd4:	f89a 3000 	ldrb.w	r3, [sl]
 810fcd8:	2b00      	cmp	r3, #0
 810fcda:	f000 809f 	beq.w	810fe1c <_vfiprintf_r+0x1ec>
 810fcde:	2300      	movs	r3, #0
 810fce0:	f04f 32ff 	mov.w	r2, #4294967295
 810fce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810fce8:	f10a 0a01 	add.w	sl, sl, #1
 810fcec:	9304      	str	r3, [sp, #16]
 810fcee:	9307      	str	r3, [sp, #28]
 810fcf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810fcf4:	931a      	str	r3, [sp, #104]	@ 0x68
 810fcf6:	4654      	mov	r4, sl
 810fcf8:	2205      	movs	r2, #5
 810fcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fcfe:	4853      	ldr	r0, [pc, #332]	@ (810fe4c <_vfiprintf_r+0x21c>)
 810fd00:	f7f0 faee 	bl	81002e0 <memchr>
 810fd04:	9a04      	ldr	r2, [sp, #16]
 810fd06:	b9d8      	cbnz	r0, 810fd40 <_vfiprintf_r+0x110>
 810fd08:	06d1      	lsls	r1, r2, #27
 810fd0a:	bf44      	itt	mi
 810fd0c:	2320      	movmi	r3, #32
 810fd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810fd12:	0713      	lsls	r3, r2, #28
 810fd14:	bf44      	itt	mi
 810fd16:	232b      	movmi	r3, #43	@ 0x2b
 810fd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810fd1c:	f89a 3000 	ldrb.w	r3, [sl]
 810fd20:	2b2a      	cmp	r3, #42	@ 0x2a
 810fd22:	d015      	beq.n	810fd50 <_vfiprintf_r+0x120>
 810fd24:	9a07      	ldr	r2, [sp, #28]
 810fd26:	4654      	mov	r4, sl
 810fd28:	2000      	movs	r0, #0
 810fd2a:	f04f 0c0a 	mov.w	ip, #10
 810fd2e:	4621      	mov	r1, r4
 810fd30:	f811 3b01 	ldrb.w	r3, [r1], #1
 810fd34:	3b30      	subs	r3, #48	@ 0x30
 810fd36:	2b09      	cmp	r3, #9
 810fd38:	d94b      	bls.n	810fdd2 <_vfiprintf_r+0x1a2>
 810fd3a:	b1b0      	cbz	r0, 810fd6a <_vfiprintf_r+0x13a>
 810fd3c:	9207      	str	r2, [sp, #28]
 810fd3e:	e014      	b.n	810fd6a <_vfiprintf_r+0x13a>
 810fd40:	eba0 0308 	sub.w	r3, r0, r8
 810fd44:	fa09 f303 	lsl.w	r3, r9, r3
 810fd48:	4313      	orrs	r3, r2
 810fd4a:	9304      	str	r3, [sp, #16]
 810fd4c:	46a2      	mov	sl, r4
 810fd4e:	e7d2      	b.n	810fcf6 <_vfiprintf_r+0xc6>
 810fd50:	9b03      	ldr	r3, [sp, #12]
 810fd52:	1d19      	adds	r1, r3, #4
 810fd54:	681b      	ldr	r3, [r3, #0]
 810fd56:	9103      	str	r1, [sp, #12]
 810fd58:	2b00      	cmp	r3, #0
 810fd5a:	bfbb      	ittet	lt
 810fd5c:	425b      	neglt	r3, r3
 810fd5e:	f042 0202 	orrlt.w	r2, r2, #2
 810fd62:	9307      	strge	r3, [sp, #28]
 810fd64:	9307      	strlt	r3, [sp, #28]
 810fd66:	bfb8      	it	lt
 810fd68:	9204      	strlt	r2, [sp, #16]
 810fd6a:	7823      	ldrb	r3, [r4, #0]
 810fd6c:	2b2e      	cmp	r3, #46	@ 0x2e
 810fd6e:	d10a      	bne.n	810fd86 <_vfiprintf_r+0x156>
 810fd70:	7863      	ldrb	r3, [r4, #1]
 810fd72:	2b2a      	cmp	r3, #42	@ 0x2a
 810fd74:	d132      	bne.n	810fddc <_vfiprintf_r+0x1ac>
 810fd76:	9b03      	ldr	r3, [sp, #12]
 810fd78:	1d1a      	adds	r2, r3, #4
 810fd7a:	681b      	ldr	r3, [r3, #0]
 810fd7c:	9203      	str	r2, [sp, #12]
 810fd7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810fd82:	3402      	adds	r4, #2
 810fd84:	9305      	str	r3, [sp, #20]
 810fd86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810fe5c <_vfiprintf_r+0x22c>
 810fd8a:	7821      	ldrb	r1, [r4, #0]
 810fd8c:	2203      	movs	r2, #3
 810fd8e:	4650      	mov	r0, sl
 810fd90:	f7f0 faa6 	bl	81002e0 <memchr>
 810fd94:	b138      	cbz	r0, 810fda6 <_vfiprintf_r+0x176>
 810fd96:	9b04      	ldr	r3, [sp, #16]
 810fd98:	eba0 000a 	sub.w	r0, r0, sl
 810fd9c:	2240      	movs	r2, #64	@ 0x40
 810fd9e:	4082      	lsls	r2, r0
 810fda0:	4313      	orrs	r3, r2
 810fda2:	3401      	adds	r4, #1
 810fda4:	9304      	str	r3, [sp, #16]
 810fda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 810fdaa:	4829      	ldr	r0, [pc, #164]	@ (810fe50 <_vfiprintf_r+0x220>)
 810fdac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810fdb0:	2206      	movs	r2, #6
 810fdb2:	f7f0 fa95 	bl	81002e0 <memchr>
 810fdb6:	2800      	cmp	r0, #0
 810fdb8:	d03f      	beq.n	810fe3a <_vfiprintf_r+0x20a>
 810fdba:	4b26      	ldr	r3, [pc, #152]	@ (810fe54 <_vfiprintf_r+0x224>)
 810fdbc:	bb1b      	cbnz	r3, 810fe06 <_vfiprintf_r+0x1d6>
 810fdbe:	9b03      	ldr	r3, [sp, #12]
 810fdc0:	3307      	adds	r3, #7
 810fdc2:	f023 0307 	bic.w	r3, r3, #7
 810fdc6:	3308      	adds	r3, #8
 810fdc8:	9303      	str	r3, [sp, #12]
 810fdca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810fdcc:	443b      	add	r3, r7
 810fdce:	9309      	str	r3, [sp, #36]	@ 0x24
 810fdd0:	e76a      	b.n	810fca8 <_vfiprintf_r+0x78>
 810fdd2:	fb0c 3202 	mla	r2, ip, r2, r3
 810fdd6:	460c      	mov	r4, r1
 810fdd8:	2001      	movs	r0, #1
 810fdda:	e7a8      	b.n	810fd2e <_vfiprintf_r+0xfe>
 810fddc:	2300      	movs	r3, #0
 810fdde:	3401      	adds	r4, #1
 810fde0:	9305      	str	r3, [sp, #20]
 810fde2:	4619      	mov	r1, r3
 810fde4:	f04f 0c0a 	mov.w	ip, #10
 810fde8:	4620      	mov	r0, r4
 810fdea:	f810 2b01 	ldrb.w	r2, [r0], #1
 810fdee:	3a30      	subs	r2, #48	@ 0x30
 810fdf0:	2a09      	cmp	r2, #9
 810fdf2:	d903      	bls.n	810fdfc <_vfiprintf_r+0x1cc>
 810fdf4:	2b00      	cmp	r3, #0
 810fdf6:	d0c6      	beq.n	810fd86 <_vfiprintf_r+0x156>
 810fdf8:	9105      	str	r1, [sp, #20]
 810fdfa:	e7c4      	b.n	810fd86 <_vfiprintf_r+0x156>
 810fdfc:	fb0c 2101 	mla	r1, ip, r1, r2
 810fe00:	4604      	mov	r4, r0
 810fe02:	2301      	movs	r3, #1
 810fe04:	e7f0      	b.n	810fde8 <_vfiprintf_r+0x1b8>
 810fe06:	ab03      	add	r3, sp, #12
 810fe08:	9300      	str	r3, [sp, #0]
 810fe0a:	462a      	mov	r2, r5
 810fe0c:	4b12      	ldr	r3, [pc, #72]	@ (810fe58 <_vfiprintf_r+0x228>)
 810fe0e:	a904      	add	r1, sp, #16
 810fe10:	4630      	mov	r0, r6
 810fe12:	f7fc fa7f 	bl	810c314 <_printf_float>
 810fe16:	4607      	mov	r7, r0
 810fe18:	1c78      	adds	r0, r7, #1
 810fe1a:	d1d6      	bne.n	810fdca <_vfiprintf_r+0x19a>
 810fe1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810fe1e:	07d9      	lsls	r1, r3, #31
 810fe20:	d405      	bmi.n	810fe2e <_vfiprintf_r+0x1fe>
 810fe22:	89ab      	ldrh	r3, [r5, #12]
 810fe24:	059a      	lsls	r2, r3, #22
 810fe26:	d402      	bmi.n	810fe2e <_vfiprintf_r+0x1fe>
 810fe28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810fe2a:	f7fd fae7 	bl	810d3fc <__retarget_lock_release_recursive>
 810fe2e:	89ab      	ldrh	r3, [r5, #12]
 810fe30:	065b      	lsls	r3, r3, #25
 810fe32:	f53f af1f 	bmi.w	810fc74 <_vfiprintf_r+0x44>
 810fe36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810fe38:	e71e      	b.n	810fc78 <_vfiprintf_r+0x48>
 810fe3a:	ab03      	add	r3, sp, #12
 810fe3c:	9300      	str	r3, [sp, #0]
 810fe3e:	462a      	mov	r2, r5
 810fe40:	4b05      	ldr	r3, [pc, #20]	@ (810fe58 <_vfiprintf_r+0x228>)
 810fe42:	a904      	add	r1, sp, #16
 810fe44:	4630      	mov	r0, r6
 810fe46:	f7fc fcfd 	bl	810c844 <_printf_i>
 810fe4a:	e7e4      	b.n	810fe16 <_vfiprintf_r+0x1e6>
 810fe4c:	08112391 	.word	0x08112391
 810fe50:	0811239b 	.word	0x0811239b
 810fe54:	0810c315 	.word	0x0810c315
 810fe58:	0810fc0b 	.word	0x0810fc0b
 810fe5c:	08112397 	.word	0x08112397

0810fe60 <__sflush_r>:
 810fe60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810fe64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810fe68:	0716      	lsls	r6, r2, #28
 810fe6a:	4605      	mov	r5, r0
 810fe6c:	460c      	mov	r4, r1
 810fe6e:	d454      	bmi.n	810ff1a <__sflush_r+0xba>
 810fe70:	684b      	ldr	r3, [r1, #4]
 810fe72:	2b00      	cmp	r3, #0
 810fe74:	dc02      	bgt.n	810fe7c <__sflush_r+0x1c>
 810fe76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810fe78:	2b00      	cmp	r3, #0
 810fe7a:	dd48      	ble.n	810ff0e <__sflush_r+0xae>
 810fe7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810fe7e:	2e00      	cmp	r6, #0
 810fe80:	d045      	beq.n	810ff0e <__sflush_r+0xae>
 810fe82:	2300      	movs	r3, #0
 810fe84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810fe88:	682f      	ldr	r7, [r5, #0]
 810fe8a:	6a21      	ldr	r1, [r4, #32]
 810fe8c:	602b      	str	r3, [r5, #0]
 810fe8e:	d030      	beq.n	810fef2 <__sflush_r+0x92>
 810fe90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810fe92:	89a3      	ldrh	r3, [r4, #12]
 810fe94:	0759      	lsls	r1, r3, #29
 810fe96:	d505      	bpl.n	810fea4 <__sflush_r+0x44>
 810fe98:	6863      	ldr	r3, [r4, #4]
 810fe9a:	1ad2      	subs	r2, r2, r3
 810fe9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810fe9e:	b10b      	cbz	r3, 810fea4 <__sflush_r+0x44>
 810fea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810fea2:	1ad2      	subs	r2, r2, r3
 810fea4:	2300      	movs	r3, #0
 810fea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810fea8:	6a21      	ldr	r1, [r4, #32]
 810feaa:	4628      	mov	r0, r5
 810feac:	47b0      	blx	r6
 810feae:	1c43      	adds	r3, r0, #1
 810feb0:	89a3      	ldrh	r3, [r4, #12]
 810feb2:	d106      	bne.n	810fec2 <__sflush_r+0x62>
 810feb4:	6829      	ldr	r1, [r5, #0]
 810feb6:	291d      	cmp	r1, #29
 810feb8:	d82b      	bhi.n	810ff12 <__sflush_r+0xb2>
 810feba:	4a2a      	ldr	r2, [pc, #168]	@ (810ff64 <__sflush_r+0x104>)
 810febc:	410a      	asrs	r2, r1
 810febe:	07d6      	lsls	r6, r2, #31
 810fec0:	d427      	bmi.n	810ff12 <__sflush_r+0xb2>
 810fec2:	2200      	movs	r2, #0
 810fec4:	6062      	str	r2, [r4, #4]
 810fec6:	04d9      	lsls	r1, r3, #19
 810fec8:	6922      	ldr	r2, [r4, #16]
 810feca:	6022      	str	r2, [r4, #0]
 810fecc:	d504      	bpl.n	810fed8 <__sflush_r+0x78>
 810fece:	1c42      	adds	r2, r0, #1
 810fed0:	d101      	bne.n	810fed6 <__sflush_r+0x76>
 810fed2:	682b      	ldr	r3, [r5, #0]
 810fed4:	b903      	cbnz	r3, 810fed8 <__sflush_r+0x78>
 810fed6:	6560      	str	r0, [r4, #84]	@ 0x54
 810fed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810feda:	602f      	str	r7, [r5, #0]
 810fedc:	b1b9      	cbz	r1, 810ff0e <__sflush_r+0xae>
 810fede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810fee2:	4299      	cmp	r1, r3
 810fee4:	d002      	beq.n	810feec <__sflush_r+0x8c>
 810fee6:	4628      	mov	r0, r5
 810fee8:	f7fe f8ea 	bl	810e0c0 <_free_r>
 810feec:	2300      	movs	r3, #0
 810feee:	6363      	str	r3, [r4, #52]	@ 0x34
 810fef0:	e00d      	b.n	810ff0e <__sflush_r+0xae>
 810fef2:	2301      	movs	r3, #1
 810fef4:	4628      	mov	r0, r5
 810fef6:	47b0      	blx	r6
 810fef8:	4602      	mov	r2, r0
 810fefa:	1c50      	adds	r0, r2, #1
 810fefc:	d1c9      	bne.n	810fe92 <__sflush_r+0x32>
 810fefe:	682b      	ldr	r3, [r5, #0]
 810ff00:	2b00      	cmp	r3, #0
 810ff02:	d0c6      	beq.n	810fe92 <__sflush_r+0x32>
 810ff04:	2b1d      	cmp	r3, #29
 810ff06:	d001      	beq.n	810ff0c <__sflush_r+0xac>
 810ff08:	2b16      	cmp	r3, #22
 810ff0a:	d11e      	bne.n	810ff4a <__sflush_r+0xea>
 810ff0c:	602f      	str	r7, [r5, #0]
 810ff0e:	2000      	movs	r0, #0
 810ff10:	e022      	b.n	810ff58 <__sflush_r+0xf8>
 810ff12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ff16:	b21b      	sxth	r3, r3
 810ff18:	e01b      	b.n	810ff52 <__sflush_r+0xf2>
 810ff1a:	690f      	ldr	r7, [r1, #16]
 810ff1c:	2f00      	cmp	r7, #0
 810ff1e:	d0f6      	beq.n	810ff0e <__sflush_r+0xae>
 810ff20:	0793      	lsls	r3, r2, #30
 810ff22:	680e      	ldr	r6, [r1, #0]
 810ff24:	bf08      	it	eq
 810ff26:	694b      	ldreq	r3, [r1, #20]
 810ff28:	600f      	str	r7, [r1, #0]
 810ff2a:	bf18      	it	ne
 810ff2c:	2300      	movne	r3, #0
 810ff2e:	eba6 0807 	sub.w	r8, r6, r7
 810ff32:	608b      	str	r3, [r1, #8]
 810ff34:	f1b8 0f00 	cmp.w	r8, #0
 810ff38:	dde9      	ble.n	810ff0e <__sflush_r+0xae>
 810ff3a:	6a21      	ldr	r1, [r4, #32]
 810ff3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810ff3e:	4643      	mov	r3, r8
 810ff40:	463a      	mov	r2, r7
 810ff42:	4628      	mov	r0, r5
 810ff44:	47b0      	blx	r6
 810ff46:	2800      	cmp	r0, #0
 810ff48:	dc08      	bgt.n	810ff5c <__sflush_r+0xfc>
 810ff4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ff4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ff52:	81a3      	strh	r3, [r4, #12]
 810ff54:	f04f 30ff 	mov.w	r0, #4294967295
 810ff58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ff5c:	4407      	add	r7, r0
 810ff5e:	eba8 0800 	sub.w	r8, r8, r0
 810ff62:	e7e7      	b.n	810ff34 <__sflush_r+0xd4>
 810ff64:	dfbffffe 	.word	0xdfbffffe

0810ff68 <_fflush_r>:
 810ff68:	b538      	push	{r3, r4, r5, lr}
 810ff6a:	690b      	ldr	r3, [r1, #16]
 810ff6c:	4605      	mov	r5, r0
 810ff6e:	460c      	mov	r4, r1
 810ff70:	b913      	cbnz	r3, 810ff78 <_fflush_r+0x10>
 810ff72:	2500      	movs	r5, #0
 810ff74:	4628      	mov	r0, r5
 810ff76:	bd38      	pop	{r3, r4, r5, pc}
 810ff78:	b118      	cbz	r0, 810ff82 <_fflush_r+0x1a>
 810ff7a:	6a03      	ldr	r3, [r0, #32]
 810ff7c:	b90b      	cbnz	r3, 810ff82 <_fflush_r+0x1a>
 810ff7e:	f7fd f821 	bl	810cfc4 <__sinit>
 810ff82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ff86:	2b00      	cmp	r3, #0
 810ff88:	d0f3      	beq.n	810ff72 <_fflush_r+0xa>
 810ff8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810ff8c:	07d0      	lsls	r0, r2, #31
 810ff8e:	d404      	bmi.n	810ff9a <_fflush_r+0x32>
 810ff90:	0599      	lsls	r1, r3, #22
 810ff92:	d402      	bmi.n	810ff9a <_fflush_r+0x32>
 810ff94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ff96:	f7fd fa30 	bl	810d3fa <__retarget_lock_acquire_recursive>
 810ff9a:	4628      	mov	r0, r5
 810ff9c:	4621      	mov	r1, r4
 810ff9e:	f7ff ff5f 	bl	810fe60 <__sflush_r>
 810ffa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810ffa4:	07da      	lsls	r2, r3, #31
 810ffa6:	4605      	mov	r5, r0
 810ffa8:	d4e4      	bmi.n	810ff74 <_fflush_r+0xc>
 810ffaa:	89a3      	ldrh	r3, [r4, #12]
 810ffac:	059b      	lsls	r3, r3, #22
 810ffae:	d4e1      	bmi.n	810ff74 <_fflush_r+0xc>
 810ffb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ffb2:	f7fd fa23 	bl	810d3fc <__retarget_lock_release_recursive>
 810ffb6:	e7dd      	b.n	810ff74 <_fflush_r+0xc>

0810ffb8 <__swhatbuf_r>:
 810ffb8:	b570      	push	{r4, r5, r6, lr}
 810ffba:	460c      	mov	r4, r1
 810ffbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ffc0:	2900      	cmp	r1, #0
 810ffc2:	b096      	sub	sp, #88	@ 0x58
 810ffc4:	4615      	mov	r5, r2
 810ffc6:	461e      	mov	r6, r3
 810ffc8:	da0d      	bge.n	810ffe6 <__swhatbuf_r+0x2e>
 810ffca:	89a3      	ldrh	r3, [r4, #12]
 810ffcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810ffd0:	f04f 0100 	mov.w	r1, #0
 810ffd4:	bf14      	ite	ne
 810ffd6:	2340      	movne	r3, #64	@ 0x40
 810ffd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810ffdc:	2000      	movs	r0, #0
 810ffde:	6031      	str	r1, [r6, #0]
 810ffe0:	602b      	str	r3, [r5, #0]
 810ffe2:	b016      	add	sp, #88	@ 0x58
 810ffe4:	bd70      	pop	{r4, r5, r6, pc}
 810ffe6:	466a      	mov	r2, sp
 810ffe8:	f000 f874 	bl	81100d4 <_fstat_r>
 810ffec:	2800      	cmp	r0, #0
 810ffee:	dbec      	blt.n	810ffca <__swhatbuf_r+0x12>
 810fff0:	9901      	ldr	r1, [sp, #4]
 810fff2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810fff6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810fffa:	4259      	negs	r1, r3
 810fffc:	4159      	adcs	r1, r3
 810fffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8110002:	e7eb      	b.n	810ffdc <__swhatbuf_r+0x24>

08110004 <__smakebuf_r>:
 8110004:	898b      	ldrh	r3, [r1, #12]
 8110006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8110008:	079d      	lsls	r5, r3, #30
 811000a:	4606      	mov	r6, r0
 811000c:	460c      	mov	r4, r1
 811000e:	d507      	bpl.n	8110020 <__smakebuf_r+0x1c>
 8110010:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8110014:	6023      	str	r3, [r4, #0]
 8110016:	6123      	str	r3, [r4, #16]
 8110018:	2301      	movs	r3, #1
 811001a:	6163      	str	r3, [r4, #20]
 811001c:	b003      	add	sp, #12
 811001e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8110020:	ab01      	add	r3, sp, #4
 8110022:	466a      	mov	r2, sp
 8110024:	f7ff ffc8 	bl	810ffb8 <__swhatbuf_r>
 8110028:	9f00      	ldr	r7, [sp, #0]
 811002a:	4605      	mov	r5, r0
 811002c:	4639      	mov	r1, r7
 811002e:	4630      	mov	r0, r6
 8110030:	f7fe f8ba 	bl	810e1a8 <_malloc_r>
 8110034:	b948      	cbnz	r0, 811004a <__smakebuf_r+0x46>
 8110036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811003a:	059a      	lsls	r2, r3, #22
 811003c:	d4ee      	bmi.n	811001c <__smakebuf_r+0x18>
 811003e:	f023 0303 	bic.w	r3, r3, #3
 8110042:	f043 0302 	orr.w	r3, r3, #2
 8110046:	81a3      	strh	r3, [r4, #12]
 8110048:	e7e2      	b.n	8110010 <__smakebuf_r+0xc>
 811004a:	89a3      	ldrh	r3, [r4, #12]
 811004c:	6020      	str	r0, [r4, #0]
 811004e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8110052:	81a3      	strh	r3, [r4, #12]
 8110054:	9b01      	ldr	r3, [sp, #4]
 8110056:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811005a:	b15b      	cbz	r3, 8110074 <__smakebuf_r+0x70>
 811005c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8110060:	4630      	mov	r0, r6
 8110062:	f000 f849 	bl	81100f8 <_isatty_r>
 8110066:	b128      	cbz	r0, 8110074 <__smakebuf_r+0x70>
 8110068:	89a3      	ldrh	r3, [r4, #12]
 811006a:	f023 0303 	bic.w	r3, r3, #3
 811006e:	f043 0301 	orr.w	r3, r3, #1
 8110072:	81a3      	strh	r3, [r4, #12]
 8110074:	89a3      	ldrh	r3, [r4, #12]
 8110076:	431d      	orrs	r5, r3
 8110078:	81a5      	strh	r5, [r4, #12]
 811007a:	e7cf      	b.n	811001c <__smakebuf_r+0x18>

0811007c <memmove>:
 811007c:	4288      	cmp	r0, r1
 811007e:	b510      	push	{r4, lr}
 8110080:	eb01 0402 	add.w	r4, r1, r2
 8110084:	d902      	bls.n	811008c <memmove+0x10>
 8110086:	4284      	cmp	r4, r0
 8110088:	4623      	mov	r3, r4
 811008a:	d807      	bhi.n	811009c <memmove+0x20>
 811008c:	1e43      	subs	r3, r0, #1
 811008e:	42a1      	cmp	r1, r4
 8110090:	d008      	beq.n	81100a4 <memmove+0x28>
 8110092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8110096:	f803 2f01 	strb.w	r2, [r3, #1]!
 811009a:	e7f8      	b.n	811008e <memmove+0x12>
 811009c:	4402      	add	r2, r0
 811009e:	4601      	mov	r1, r0
 81100a0:	428a      	cmp	r2, r1
 81100a2:	d100      	bne.n	81100a6 <memmove+0x2a>
 81100a4:	bd10      	pop	{r4, pc}
 81100a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81100aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81100ae:	e7f7      	b.n	81100a0 <memmove+0x24>

081100b0 <strncmp>:
 81100b0:	b510      	push	{r4, lr}
 81100b2:	b16a      	cbz	r2, 81100d0 <strncmp+0x20>
 81100b4:	3901      	subs	r1, #1
 81100b6:	1884      	adds	r4, r0, r2
 81100b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 81100bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 81100c0:	429a      	cmp	r2, r3
 81100c2:	d103      	bne.n	81100cc <strncmp+0x1c>
 81100c4:	42a0      	cmp	r0, r4
 81100c6:	d001      	beq.n	81100cc <strncmp+0x1c>
 81100c8:	2a00      	cmp	r2, #0
 81100ca:	d1f5      	bne.n	81100b8 <strncmp+0x8>
 81100cc:	1ad0      	subs	r0, r2, r3
 81100ce:	bd10      	pop	{r4, pc}
 81100d0:	4610      	mov	r0, r2
 81100d2:	e7fc      	b.n	81100ce <strncmp+0x1e>

081100d4 <_fstat_r>:
 81100d4:	b538      	push	{r3, r4, r5, lr}
 81100d6:	4d07      	ldr	r5, [pc, #28]	@ (81100f4 <_fstat_r+0x20>)
 81100d8:	2300      	movs	r3, #0
 81100da:	4604      	mov	r4, r0
 81100dc:	4608      	mov	r0, r1
 81100de:	4611      	mov	r1, r2
 81100e0:	602b      	str	r3, [r5, #0]
 81100e2:	f7f3 f915 	bl	8103310 <_fstat>
 81100e6:	1c43      	adds	r3, r0, #1
 81100e8:	d102      	bne.n	81100f0 <_fstat_r+0x1c>
 81100ea:	682b      	ldr	r3, [r5, #0]
 81100ec:	b103      	cbz	r3, 81100f0 <_fstat_r+0x1c>
 81100ee:	6023      	str	r3, [r4, #0]
 81100f0:	bd38      	pop	{r3, r4, r5, pc}
 81100f2:	bf00      	nop
 81100f4:	10000788 	.word	0x10000788

081100f8 <_isatty_r>:
 81100f8:	b538      	push	{r3, r4, r5, lr}
 81100fa:	4d06      	ldr	r5, [pc, #24]	@ (8110114 <_isatty_r+0x1c>)
 81100fc:	2300      	movs	r3, #0
 81100fe:	4604      	mov	r4, r0
 8110100:	4608      	mov	r0, r1
 8110102:	602b      	str	r3, [r5, #0]
 8110104:	f7f3 f914 	bl	8103330 <_isatty>
 8110108:	1c43      	adds	r3, r0, #1
 811010a:	d102      	bne.n	8110112 <_isatty_r+0x1a>
 811010c:	682b      	ldr	r3, [r5, #0]
 811010e:	b103      	cbz	r3, 8110112 <_isatty_r+0x1a>
 8110110:	6023      	str	r3, [r4, #0]
 8110112:	bd38      	pop	{r3, r4, r5, pc}
 8110114:	10000788 	.word	0x10000788

08110118 <_sbrk_r>:
 8110118:	b538      	push	{r3, r4, r5, lr}
 811011a:	4d06      	ldr	r5, [pc, #24]	@ (8110134 <_sbrk_r+0x1c>)
 811011c:	2300      	movs	r3, #0
 811011e:	4604      	mov	r4, r0
 8110120:	4608      	mov	r0, r1
 8110122:	602b      	str	r3, [r5, #0]
 8110124:	f7f3 f91c 	bl	8103360 <_sbrk>
 8110128:	1c43      	adds	r3, r0, #1
 811012a:	d102      	bne.n	8110132 <_sbrk_r+0x1a>
 811012c:	682b      	ldr	r3, [r5, #0]
 811012e:	b103      	cbz	r3, 8110132 <_sbrk_r+0x1a>
 8110130:	6023      	str	r3, [r4, #0]
 8110132:	bd38      	pop	{r3, r4, r5, pc}
 8110134:	10000788 	.word	0x10000788

08110138 <nan>:
 8110138:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8110140 <nan+0x8>
 811013c:	4770      	bx	lr
 811013e:	bf00      	nop
 8110140:	00000000 	.word	0x00000000
 8110144:	7ff80000 	.word	0x7ff80000

08110148 <__assert_func>:
 8110148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811014a:	4614      	mov	r4, r2
 811014c:	461a      	mov	r2, r3
 811014e:	4b09      	ldr	r3, [pc, #36]	@ (8110174 <__assert_func+0x2c>)
 8110150:	681b      	ldr	r3, [r3, #0]
 8110152:	4605      	mov	r5, r0
 8110154:	68d8      	ldr	r0, [r3, #12]
 8110156:	b954      	cbnz	r4, 811016e <__assert_func+0x26>
 8110158:	4b07      	ldr	r3, [pc, #28]	@ (8110178 <__assert_func+0x30>)
 811015a:	461c      	mov	r4, r3
 811015c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8110160:	9100      	str	r1, [sp, #0]
 8110162:	462b      	mov	r3, r5
 8110164:	4905      	ldr	r1, [pc, #20]	@ (811017c <__assert_func+0x34>)
 8110166:	f000 fba7 	bl	81108b8 <fiprintf>
 811016a:	f000 fbb7 	bl	81108dc <abort>
 811016e:	4b04      	ldr	r3, [pc, #16]	@ (8110180 <__assert_func+0x38>)
 8110170:	e7f4      	b.n	811015c <__assert_func+0x14>
 8110172:	bf00      	nop
 8110174:	10000094 	.word	0x10000094
 8110178:	081123e5 	.word	0x081123e5
 811017c:	081123b7 	.word	0x081123b7
 8110180:	081123aa 	.word	0x081123aa

08110184 <_calloc_r>:
 8110184:	b570      	push	{r4, r5, r6, lr}
 8110186:	fba1 5402 	umull	r5, r4, r1, r2
 811018a:	b93c      	cbnz	r4, 811019c <_calloc_r+0x18>
 811018c:	4629      	mov	r1, r5
 811018e:	f7fe f80b 	bl	810e1a8 <_malloc_r>
 8110192:	4606      	mov	r6, r0
 8110194:	b928      	cbnz	r0, 81101a2 <_calloc_r+0x1e>
 8110196:	2600      	movs	r6, #0
 8110198:	4630      	mov	r0, r6
 811019a:	bd70      	pop	{r4, r5, r6, pc}
 811019c:	220c      	movs	r2, #12
 811019e:	6002      	str	r2, [r0, #0]
 81101a0:	e7f9      	b.n	8110196 <_calloc_r+0x12>
 81101a2:	462a      	mov	r2, r5
 81101a4:	4621      	mov	r1, r4
 81101a6:	f7fd f8ab 	bl	810d300 <memset>
 81101aa:	e7f5      	b.n	8110198 <_calloc_r+0x14>

081101ac <rshift>:
 81101ac:	6903      	ldr	r3, [r0, #16]
 81101ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 81101b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81101b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 81101ba:	f100 0414 	add.w	r4, r0, #20
 81101be:	dd45      	ble.n	811024c <rshift+0xa0>
 81101c0:	f011 011f 	ands.w	r1, r1, #31
 81101c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 81101c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 81101cc:	d10c      	bne.n	81101e8 <rshift+0x3c>
 81101ce:	f100 0710 	add.w	r7, r0, #16
 81101d2:	4629      	mov	r1, r5
 81101d4:	42b1      	cmp	r1, r6
 81101d6:	d334      	bcc.n	8110242 <rshift+0x96>
 81101d8:	1a9b      	subs	r3, r3, r2
 81101da:	009b      	lsls	r3, r3, #2
 81101dc:	1eea      	subs	r2, r5, #3
 81101de:	4296      	cmp	r6, r2
 81101e0:	bf38      	it	cc
 81101e2:	2300      	movcc	r3, #0
 81101e4:	4423      	add	r3, r4
 81101e6:	e015      	b.n	8110214 <rshift+0x68>
 81101e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 81101ec:	f1c1 0820 	rsb	r8, r1, #32
 81101f0:	40cf      	lsrs	r7, r1
 81101f2:	f105 0e04 	add.w	lr, r5, #4
 81101f6:	46a1      	mov	r9, r4
 81101f8:	4576      	cmp	r6, lr
 81101fa:	46f4      	mov	ip, lr
 81101fc:	d815      	bhi.n	811022a <rshift+0x7e>
 81101fe:	1a9a      	subs	r2, r3, r2
 8110200:	0092      	lsls	r2, r2, #2
 8110202:	3a04      	subs	r2, #4
 8110204:	3501      	adds	r5, #1
 8110206:	42ae      	cmp	r6, r5
 8110208:	bf38      	it	cc
 811020a:	2200      	movcc	r2, #0
 811020c:	18a3      	adds	r3, r4, r2
 811020e:	50a7      	str	r7, [r4, r2]
 8110210:	b107      	cbz	r7, 8110214 <rshift+0x68>
 8110212:	3304      	adds	r3, #4
 8110214:	1b1a      	subs	r2, r3, r4
 8110216:	42a3      	cmp	r3, r4
 8110218:	ea4f 02a2 	mov.w	r2, r2, asr #2
 811021c:	bf08      	it	eq
 811021e:	2300      	moveq	r3, #0
 8110220:	6102      	str	r2, [r0, #16]
 8110222:	bf08      	it	eq
 8110224:	6143      	streq	r3, [r0, #20]
 8110226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 811022a:	f8dc c000 	ldr.w	ip, [ip]
 811022e:	fa0c fc08 	lsl.w	ip, ip, r8
 8110232:	ea4c 0707 	orr.w	r7, ip, r7
 8110236:	f849 7b04 	str.w	r7, [r9], #4
 811023a:	f85e 7b04 	ldr.w	r7, [lr], #4
 811023e:	40cf      	lsrs	r7, r1
 8110240:	e7da      	b.n	81101f8 <rshift+0x4c>
 8110242:	f851 cb04 	ldr.w	ip, [r1], #4
 8110246:	f847 cf04 	str.w	ip, [r7, #4]!
 811024a:	e7c3      	b.n	81101d4 <rshift+0x28>
 811024c:	4623      	mov	r3, r4
 811024e:	e7e1      	b.n	8110214 <rshift+0x68>

08110250 <__hexdig_fun>:
 8110250:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8110254:	2b09      	cmp	r3, #9
 8110256:	d802      	bhi.n	811025e <__hexdig_fun+0xe>
 8110258:	3820      	subs	r0, #32
 811025a:	b2c0      	uxtb	r0, r0
 811025c:	4770      	bx	lr
 811025e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8110262:	2b05      	cmp	r3, #5
 8110264:	d801      	bhi.n	811026a <__hexdig_fun+0x1a>
 8110266:	3847      	subs	r0, #71	@ 0x47
 8110268:	e7f7      	b.n	811025a <__hexdig_fun+0xa>
 811026a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 811026e:	2b05      	cmp	r3, #5
 8110270:	d801      	bhi.n	8110276 <__hexdig_fun+0x26>
 8110272:	3827      	subs	r0, #39	@ 0x27
 8110274:	e7f1      	b.n	811025a <__hexdig_fun+0xa>
 8110276:	2000      	movs	r0, #0
 8110278:	4770      	bx	lr
	...

0811027c <__gethex>:
 811027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110280:	b085      	sub	sp, #20
 8110282:	468a      	mov	sl, r1
 8110284:	9302      	str	r3, [sp, #8]
 8110286:	680b      	ldr	r3, [r1, #0]
 8110288:	9001      	str	r0, [sp, #4]
 811028a:	4690      	mov	r8, r2
 811028c:	1c9c      	adds	r4, r3, #2
 811028e:	46a1      	mov	r9, r4
 8110290:	f814 0b01 	ldrb.w	r0, [r4], #1
 8110294:	2830      	cmp	r0, #48	@ 0x30
 8110296:	d0fa      	beq.n	811028e <__gethex+0x12>
 8110298:	eba9 0303 	sub.w	r3, r9, r3
 811029c:	f1a3 0b02 	sub.w	fp, r3, #2
 81102a0:	f7ff ffd6 	bl	8110250 <__hexdig_fun>
 81102a4:	4605      	mov	r5, r0
 81102a6:	2800      	cmp	r0, #0
 81102a8:	d168      	bne.n	811037c <__gethex+0x100>
 81102aa:	49a0      	ldr	r1, [pc, #640]	@ (811052c <__gethex+0x2b0>)
 81102ac:	2201      	movs	r2, #1
 81102ae:	4648      	mov	r0, r9
 81102b0:	f7ff fefe 	bl	81100b0 <strncmp>
 81102b4:	4607      	mov	r7, r0
 81102b6:	2800      	cmp	r0, #0
 81102b8:	d167      	bne.n	811038a <__gethex+0x10e>
 81102ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 81102be:	4626      	mov	r6, r4
 81102c0:	f7ff ffc6 	bl	8110250 <__hexdig_fun>
 81102c4:	2800      	cmp	r0, #0
 81102c6:	d062      	beq.n	811038e <__gethex+0x112>
 81102c8:	4623      	mov	r3, r4
 81102ca:	7818      	ldrb	r0, [r3, #0]
 81102cc:	2830      	cmp	r0, #48	@ 0x30
 81102ce:	4699      	mov	r9, r3
 81102d0:	f103 0301 	add.w	r3, r3, #1
 81102d4:	d0f9      	beq.n	81102ca <__gethex+0x4e>
 81102d6:	f7ff ffbb 	bl	8110250 <__hexdig_fun>
 81102da:	fab0 f580 	clz	r5, r0
 81102de:	096d      	lsrs	r5, r5, #5
 81102e0:	f04f 0b01 	mov.w	fp, #1
 81102e4:	464a      	mov	r2, r9
 81102e6:	4616      	mov	r6, r2
 81102e8:	3201      	adds	r2, #1
 81102ea:	7830      	ldrb	r0, [r6, #0]
 81102ec:	f7ff ffb0 	bl	8110250 <__hexdig_fun>
 81102f0:	2800      	cmp	r0, #0
 81102f2:	d1f8      	bne.n	81102e6 <__gethex+0x6a>
 81102f4:	498d      	ldr	r1, [pc, #564]	@ (811052c <__gethex+0x2b0>)
 81102f6:	2201      	movs	r2, #1
 81102f8:	4630      	mov	r0, r6
 81102fa:	f7ff fed9 	bl	81100b0 <strncmp>
 81102fe:	2800      	cmp	r0, #0
 8110300:	d13f      	bne.n	8110382 <__gethex+0x106>
 8110302:	b944      	cbnz	r4, 8110316 <__gethex+0x9a>
 8110304:	1c74      	adds	r4, r6, #1
 8110306:	4622      	mov	r2, r4
 8110308:	4616      	mov	r6, r2
 811030a:	3201      	adds	r2, #1
 811030c:	7830      	ldrb	r0, [r6, #0]
 811030e:	f7ff ff9f 	bl	8110250 <__hexdig_fun>
 8110312:	2800      	cmp	r0, #0
 8110314:	d1f8      	bne.n	8110308 <__gethex+0x8c>
 8110316:	1ba4      	subs	r4, r4, r6
 8110318:	00a7      	lsls	r7, r4, #2
 811031a:	7833      	ldrb	r3, [r6, #0]
 811031c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8110320:	2b50      	cmp	r3, #80	@ 0x50
 8110322:	d13e      	bne.n	81103a2 <__gethex+0x126>
 8110324:	7873      	ldrb	r3, [r6, #1]
 8110326:	2b2b      	cmp	r3, #43	@ 0x2b
 8110328:	d033      	beq.n	8110392 <__gethex+0x116>
 811032a:	2b2d      	cmp	r3, #45	@ 0x2d
 811032c:	d034      	beq.n	8110398 <__gethex+0x11c>
 811032e:	1c71      	adds	r1, r6, #1
 8110330:	2400      	movs	r4, #0
 8110332:	7808      	ldrb	r0, [r1, #0]
 8110334:	f7ff ff8c 	bl	8110250 <__hexdig_fun>
 8110338:	1e43      	subs	r3, r0, #1
 811033a:	b2db      	uxtb	r3, r3
 811033c:	2b18      	cmp	r3, #24
 811033e:	d830      	bhi.n	81103a2 <__gethex+0x126>
 8110340:	f1a0 0210 	sub.w	r2, r0, #16
 8110344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8110348:	f7ff ff82 	bl	8110250 <__hexdig_fun>
 811034c:	f100 3cff 	add.w	ip, r0, #4294967295
 8110350:	fa5f fc8c 	uxtb.w	ip, ip
 8110354:	f1bc 0f18 	cmp.w	ip, #24
 8110358:	f04f 030a 	mov.w	r3, #10
 811035c:	d91e      	bls.n	811039c <__gethex+0x120>
 811035e:	b104      	cbz	r4, 8110362 <__gethex+0xe6>
 8110360:	4252      	negs	r2, r2
 8110362:	4417      	add	r7, r2
 8110364:	f8ca 1000 	str.w	r1, [sl]
 8110368:	b1ed      	cbz	r5, 81103a6 <__gethex+0x12a>
 811036a:	f1bb 0f00 	cmp.w	fp, #0
 811036e:	bf0c      	ite	eq
 8110370:	2506      	moveq	r5, #6
 8110372:	2500      	movne	r5, #0
 8110374:	4628      	mov	r0, r5
 8110376:	b005      	add	sp, #20
 8110378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811037c:	2500      	movs	r5, #0
 811037e:	462c      	mov	r4, r5
 8110380:	e7b0      	b.n	81102e4 <__gethex+0x68>
 8110382:	2c00      	cmp	r4, #0
 8110384:	d1c7      	bne.n	8110316 <__gethex+0x9a>
 8110386:	4627      	mov	r7, r4
 8110388:	e7c7      	b.n	811031a <__gethex+0x9e>
 811038a:	464e      	mov	r6, r9
 811038c:	462f      	mov	r7, r5
 811038e:	2501      	movs	r5, #1
 8110390:	e7c3      	b.n	811031a <__gethex+0x9e>
 8110392:	2400      	movs	r4, #0
 8110394:	1cb1      	adds	r1, r6, #2
 8110396:	e7cc      	b.n	8110332 <__gethex+0xb6>
 8110398:	2401      	movs	r4, #1
 811039a:	e7fb      	b.n	8110394 <__gethex+0x118>
 811039c:	fb03 0002 	mla	r0, r3, r2, r0
 81103a0:	e7ce      	b.n	8110340 <__gethex+0xc4>
 81103a2:	4631      	mov	r1, r6
 81103a4:	e7de      	b.n	8110364 <__gethex+0xe8>
 81103a6:	eba6 0309 	sub.w	r3, r6, r9
 81103aa:	3b01      	subs	r3, #1
 81103ac:	4629      	mov	r1, r5
 81103ae:	2b07      	cmp	r3, #7
 81103b0:	dc0a      	bgt.n	81103c8 <__gethex+0x14c>
 81103b2:	9801      	ldr	r0, [sp, #4]
 81103b4:	f7fd ff84 	bl	810e2c0 <_Balloc>
 81103b8:	4604      	mov	r4, r0
 81103ba:	b940      	cbnz	r0, 81103ce <__gethex+0x152>
 81103bc:	4b5c      	ldr	r3, [pc, #368]	@ (8110530 <__gethex+0x2b4>)
 81103be:	4602      	mov	r2, r0
 81103c0:	21e4      	movs	r1, #228	@ 0xe4
 81103c2:	485c      	ldr	r0, [pc, #368]	@ (8110534 <__gethex+0x2b8>)
 81103c4:	f7ff fec0 	bl	8110148 <__assert_func>
 81103c8:	3101      	adds	r1, #1
 81103ca:	105b      	asrs	r3, r3, #1
 81103cc:	e7ef      	b.n	81103ae <__gethex+0x132>
 81103ce:	f100 0a14 	add.w	sl, r0, #20
 81103d2:	2300      	movs	r3, #0
 81103d4:	4655      	mov	r5, sl
 81103d6:	469b      	mov	fp, r3
 81103d8:	45b1      	cmp	r9, r6
 81103da:	d337      	bcc.n	811044c <__gethex+0x1d0>
 81103dc:	f845 bb04 	str.w	fp, [r5], #4
 81103e0:	eba5 050a 	sub.w	r5, r5, sl
 81103e4:	10ad      	asrs	r5, r5, #2
 81103e6:	6125      	str	r5, [r4, #16]
 81103e8:	4658      	mov	r0, fp
 81103ea:	f7fe f85b 	bl	810e4a4 <__hi0bits>
 81103ee:	016d      	lsls	r5, r5, #5
 81103f0:	f8d8 6000 	ldr.w	r6, [r8]
 81103f4:	1a2d      	subs	r5, r5, r0
 81103f6:	42b5      	cmp	r5, r6
 81103f8:	dd54      	ble.n	81104a4 <__gethex+0x228>
 81103fa:	1bad      	subs	r5, r5, r6
 81103fc:	4629      	mov	r1, r5
 81103fe:	4620      	mov	r0, r4
 8110400:	f7fe fbef 	bl	810ebe2 <__any_on>
 8110404:	4681      	mov	r9, r0
 8110406:	b178      	cbz	r0, 8110428 <__gethex+0x1ac>
 8110408:	1e6b      	subs	r3, r5, #1
 811040a:	1159      	asrs	r1, r3, #5
 811040c:	f003 021f 	and.w	r2, r3, #31
 8110410:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8110414:	f04f 0901 	mov.w	r9, #1
 8110418:	fa09 f202 	lsl.w	r2, r9, r2
 811041c:	420a      	tst	r2, r1
 811041e:	d003      	beq.n	8110428 <__gethex+0x1ac>
 8110420:	454b      	cmp	r3, r9
 8110422:	dc36      	bgt.n	8110492 <__gethex+0x216>
 8110424:	f04f 0902 	mov.w	r9, #2
 8110428:	4629      	mov	r1, r5
 811042a:	4620      	mov	r0, r4
 811042c:	f7ff febe 	bl	81101ac <rshift>
 8110430:	442f      	add	r7, r5
 8110432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8110436:	42bb      	cmp	r3, r7
 8110438:	da42      	bge.n	81104c0 <__gethex+0x244>
 811043a:	9801      	ldr	r0, [sp, #4]
 811043c:	4621      	mov	r1, r4
 811043e:	f7fd ff7f 	bl	810e340 <_Bfree>
 8110442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110444:	2300      	movs	r3, #0
 8110446:	6013      	str	r3, [r2, #0]
 8110448:	25a3      	movs	r5, #163	@ 0xa3
 811044a:	e793      	b.n	8110374 <__gethex+0xf8>
 811044c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8110450:	2a2e      	cmp	r2, #46	@ 0x2e
 8110452:	d012      	beq.n	811047a <__gethex+0x1fe>
 8110454:	2b20      	cmp	r3, #32
 8110456:	d104      	bne.n	8110462 <__gethex+0x1e6>
 8110458:	f845 bb04 	str.w	fp, [r5], #4
 811045c:	f04f 0b00 	mov.w	fp, #0
 8110460:	465b      	mov	r3, fp
 8110462:	7830      	ldrb	r0, [r6, #0]
 8110464:	9303      	str	r3, [sp, #12]
 8110466:	f7ff fef3 	bl	8110250 <__hexdig_fun>
 811046a:	9b03      	ldr	r3, [sp, #12]
 811046c:	f000 000f 	and.w	r0, r0, #15
 8110470:	4098      	lsls	r0, r3
 8110472:	ea4b 0b00 	orr.w	fp, fp, r0
 8110476:	3304      	adds	r3, #4
 8110478:	e7ae      	b.n	81103d8 <__gethex+0x15c>
 811047a:	45b1      	cmp	r9, r6
 811047c:	d8ea      	bhi.n	8110454 <__gethex+0x1d8>
 811047e:	492b      	ldr	r1, [pc, #172]	@ (811052c <__gethex+0x2b0>)
 8110480:	9303      	str	r3, [sp, #12]
 8110482:	2201      	movs	r2, #1
 8110484:	4630      	mov	r0, r6
 8110486:	f7ff fe13 	bl	81100b0 <strncmp>
 811048a:	9b03      	ldr	r3, [sp, #12]
 811048c:	2800      	cmp	r0, #0
 811048e:	d1e1      	bne.n	8110454 <__gethex+0x1d8>
 8110490:	e7a2      	b.n	81103d8 <__gethex+0x15c>
 8110492:	1ea9      	subs	r1, r5, #2
 8110494:	4620      	mov	r0, r4
 8110496:	f7fe fba4 	bl	810ebe2 <__any_on>
 811049a:	2800      	cmp	r0, #0
 811049c:	d0c2      	beq.n	8110424 <__gethex+0x1a8>
 811049e:	f04f 0903 	mov.w	r9, #3
 81104a2:	e7c1      	b.n	8110428 <__gethex+0x1ac>
 81104a4:	da09      	bge.n	81104ba <__gethex+0x23e>
 81104a6:	1b75      	subs	r5, r6, r5
 81104a8:	4621      	mov	r1, r4
 81104aa:	9801      	ldr	r0, [sp, #4]
 81104ac:	462a      	mov	r2, r5
 81104ae:	f7fe f95f 	bl	810e770 <__lshift>
 81104b2:	1b7f      	subs	r7, r7, r5
 81104b4:	4604      	mov	r4, r0
 81104b6:	f100 0a14 	add.w	sl, r0, #20
 81104ba:	f04f 0900 	mov.w	r9, #0
 81104be:	e7b8      	b.n	8110432 <__gethex+0x1b6>
 81104c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 81104c4:	42bd      	cmp	r5, r7
 81104c6:	dd6f      	ble.n	81105a8 <__gethex+0x32c>
 81104c8:	1bed      	subs	r5, r5, r7
 81104ca:	42ae      	cmp	r6, r5
 81104cc:	dc34      	bgt.n	8110538 <__gethex+0x2bc>
 81104ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81104d2:	2b02      	cmp	r3, #2
 81104d4:	d022      	beq.n	811051c <__gethex+0x2a0>
 81104d6:	2b03      	cmp	r3, #3
 81104d8:	d024      	beq.n	8110524 <__gethex+0x2a8>
 81104da:	2b01      	cmp	r3, #1
 81104dc:	d115      	bne.n	811050a <__gethex+0x28e>
 81104de:	42ae      	cmp	r6, r5
 81104e0:	d113      	bne.n	811050a <__gethex+0x28e>
 81104e2:	2e01      	cmp	r6, #1
 81104e4:	d10b      	bne.n	81104fe <__gethex+0x282>
 81104e6:	9a02      	ldr	r2, [sp, #8]
 81104e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 81104ec:	6013      	str	r3, [r2, #0]
 81104ee:	2301      	movs	r3, #1
 81104f0:	6123      	str	r3, [r4, #16]
 81104f2:	f8ca 3000 	str.w	r3, [sl]
 81104f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81104f8:	2562      	movs	r5, #98	@ 0x62
 81104fa:	601c      	str	r4, [r3, #0]
 81104fc:	e73a      	b.n	8110374 <__gethex+0xf8>
 81104fe:	1e71      	subs	r1, r6, #1
 8110500:	4620      	mov	r0, r4
 8110502:	f7fe fb6e 	bl	810ebe2 <__any_on>
 8110506:	2800      	cmp	r0, #0
 8110508:	d1ed      	bne.n	81104e6 <__gethex+0x26a>
 811050a:	9801      	ldr	r0, [sp, #4]
 811050c:	4621      	mov	r1, r4
 811050e:	f7fd ff17 	bl	810e340 <_Bfree>
 8110512:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110514:	2300      	movs	r3, #0
 8110516:	6013      	str	r3, [r2, #0]
 8110518:	2550      	movs	r5, #80	@ 0x50
 811051a:	e72b      	b.n	8110374 <__gethex+0xf8>
 811051c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811051e:	2b00      	cmp	r3, #0
 8110520:	d1f3      	bne.n	811050a <__gethex+0x28e>
 8110522:	e7e0      	b.n	81104e6 <__gethex+0x26a>
 8110524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110526:	2b00      	cmp	r3, #0
 8110528:	d1dd      	bne.n	81104e6 <__gethex+0x26a>
 811052a:	e7ee      	b.n	811050a <__gethex+0x28e>
 811052c:	08112238 	.word	0x08112238
 8110530:	081120cd 	.word	0x081120cd
 8110534:	081123e6 	.word	0x081123e6
 8110538:	1e6f      	subs	r7, r5, #1
 811053a:	f1b9 0f00 	cmp.w	r9, #0
 811053e:	d130      	bne.n	81105a2 <__gethex+0x326>
 8110540:	b127      	cbz	r7, 811054c <__gethex+0x2d0>
 8110542:	4639      	mov	r1, r7
 8110544:	4620      	mov	r0, r4
 8110546:	f7fe fb4c 	bl	810ebe2 <__any_on>
 811054a:	4681      	mov	r9, r0
 811054c:	117a      	asrs	r2, r7, #5
 811054e:	2301      	movs	r3, #1
 8110550:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8110554:	f007 071f 	and.w	r7, r7, #31
 8110558:	40bb      	lsls	r3, r7
 811055a:	4213      	tst	r3, r2
 811055c:	4629      	mov	r1, r5
 811055e:	4620      	mov	r0, r4
 8110560:	bf18      	it	ne
 8110562:	f049 0902 	orrne.w	r9, r9, #2
 8110566:	f7ff fe21 	bl	81101ac <rshift>
 811056a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 811056e:	1b76      	subs	r6, r6, r5
 8110570:	2502      	movs	r5, #2
 8110572:	f1b9 0f00 	cmp.w	r9, #0
 8110576:	d047      	beq.n	8110608 <__gethex+0x38c>
 8110578:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811057c:	2b02      	cmp	r3, #2
 811057e:	d015      	beq.n	81105ac <__gethex+0x330>
 8110580:	2b03      	cmp	r3, #3
 8110582:	d017      	beq.n	81105b4 <__gethex+0x338>
 8110584:	2b01      	cmp	r3, #1
 8110586:	d109      	bne.n	811059c <__gethex+0x320>
 8110588:	f019 0f02 	tst.w	r9, #2
 811058c:	d006      	beq.n	811059c <__gethex+0x320>
 811058e:	f8da 3000 	ldr.w	r3, [sl]
 8110592:	ea49 0903 	orr.w	r9, r9, r3
 8110596:	f019 0f01 	tst.w	r9, #1
 811059a:	d10e      	bne.n	81105ba <__gethex+0x33e>
 811059c:	f045 0510 	orr.w	r5, r5, #16
 81105a0:	e032      	b.n	8110608 <__gethex+0x38c>
 81105a2:	f04f 0901 	mov.w	r9, #1
 81105a6:	e7d1      	b.n	811054c <__gethex+0x2d0>
 81105a8:	2501      	movs	r5, #1
 81105aa:	e7e2      	b.n	8110572 <__gethex+0x2f6>
 81105ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81105ae:	f1c3 0301 	rsb	r3, r3, #1
 81105b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 81105b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81105b6:	2b00      	cmp	r3, #0
 81105b8:	d0f0      	beq.n	811059c <__gethex+0x320>
 81105ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 81105be:	f104 0314 	add.w	r3, r4, #20
 81105c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 81105c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 81105ca:	f04f 0c00 	mov.w	ip, #0
 81105ce:	4618      	mov	r0, r3
 81105d0:	f853 2b04 	ldr.w	r2, [r3], #4
 81105d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 81105d8:	d01b      	beq.n	8110612 <__gethex+0x396>
 81105da:	3201      	adds	r2, #1
 81105dc:	6002      	str	r2, [r0, #0]
 81105de:	2d02      	cmp	r5, #2
 81105e0:	f104 0314 	add.w	r3, r4, #20
 81105e4:	d13c      	bne.n	8110660 <__gethex+0x3e4>
 81105e6:	f8d8 2000 	ldr.w	r2, [r8]
 81105ea:	3a01      	subs	r2, #1
 81105ec:	42b2      	cmp	r2, r6
 81105ee:	d109      	bne.n	8110604 <__gethex+0x388>
 81105f0:	1171      	asrs	r1, r6, #5
 81105f2:	2201      	movs	r2, #1
 81105f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 81105f8:	f006 061f 	and.w	r6, r6, #31
 81105fc:	fa02 f606 	lsl.w	r6, r2, r6
 8110600:	421e      	tst	r6, r3
 8110602:	d13a      	bne.n	811067a <__gethex+0x3fe>
 8110604:	f045 0520 	orr.w	r5, r5, #32
 8110608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811060a:	601c      	str	r4, [r3, #0]
 811060c:	9b02      	ldr	r3, [sp, #8]
 811060e:	601f      	str	r7, [r3, #0]
 8110610:	e6b0      	b.n	8110374 <__gethex+0xf8>
 8110612:	4299      	cmp	r1, r3
 8110614:	f843 cc04 	str.w	ip, [r3, #-4]
 8110618:	d8d9      	bhi.n	81105ce <__gethex+0x352>
 811061a:	68a3      	ldr	r3, [r4, #8]
 811061c:	459b      	cmp	fp, r3
 811061e:	db17      	blt.n	8110650 <__gethex+0x3d4>
 8110620:	6861      	ldr	r1, [r4, #4]
 8110622:	9801      	ldr	r0, [sp, #4]
 8110624:	3101      	adds	r1, #1
 8110626:	f7fd fe4b 	bl	810e2c0 <_Balloc>
 811062a:	4681      	mov	r9, r0
 811062c:	b918      	cbnz	r0, 8110636 <__gethex+0x3ba>
 811062e:	4b1a      	ldr	r3, [pc, #104]	@ (8110698 <__gethex+0x41c>)
 8110630:	4602      	mov	r2, r0
 8110632:	2184      	movs	r1, #132	@ 0x84
 8110634:	e6c5      	b.n	81103c2 <__gethex+0x146>
 8110636:	6922      	ldr	r2, [r4, #16]
 8110638:	3202      	adds	r2, #2
 811063a:	f104 010c 	add.w	r1, r4, #12
 811063e:	0092      	lsls	r2, r2, #2
 8110640:	300c      	adds	r0, #12
 8110642:	f7fc fedc 	bl	810d3fe <memcpy>
 8110646:	4621      	mov	r1, r4
 8110648:	9801      	ldr	r0, [sp, #4]
 811064a:	f7fd fe79 	bl	810e340 <_Bfree>
 811064e:	464c      	mov	r4, r9
 8110650:	6923      	ldr	r3, [r4, #16]
 8110652:	1c5a      	adds	r2, r3, #1
 8110654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8110658:	6122      	str	r2, [r4, #16]
 811065a:	2201      	movs	r2, #1
 811065c:	615a      	str	r2, [r3, #20]
 811065e:	e7be      	b.n	81105de <__gethex+0x362>
 8110660:	6922      	ldr	r2, [r4, #16]
 8110662:	455a      	cmp	r2, fp
 8110664:	dd0b      	ble.n	811067e <__gethex+0x402>
 8110666:	2101      	movs	r1, #1
 8110668:	4620      	mov	r0, r4
 811066a:	f7ff fd9f 	bl	81101ac <rshift>
 811066e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8110672:	3701      	adds	r7, #1
 8110674:	42bb      	cmp	r3, r7
 8110676:	f6ff aee0 	blt.w	811043a <__gethex+0x1be>
 811067a:	2501      	movs	r5, #1
 811067c:	e7c2      	b.n	8110604 <__gethex+0x388>
 811067e:	f016 061f 	ands.w	r6, r6, #31
 8110682:	d0fa      	beq.n	811067a <__gethex+0x3fe>
 8110684:	4453      	add	r3, sl
 8110686:	f1c6 0620 	rsb	r6, r6, #32
 811068a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 811068e:	f7fd ff09 	bl	810e4a4 <__hi0bits>
 8110692:	42b0      	cmp	r0, r6
 8110694:	dbe7      	blt.n	8110666 <__gethex+0x3ea>
 8110696:	e7f0      	b.n	811067a <__gethex+0x3fe>
 8110698:	081120cd 	.word	0x081120cd

0811069c <L_shift>:
 811069c:	f1c2 0208 	rsb	r2, r2, #8
 81106a0:	0092      	lsls	r2, r2, #2
 81106a2:	b570      	push	{r4, r5, r6, lr}
 81106a4:	f1c2 0620 	rsb	r6, r2, #32
 81106a8:	6843      	ldr	r3, [r0, #4]
 81106aa:	6804      	ldr	r4, [r0, #0]
 81106ac:	fa03 f506 	lsl.w	r5, r3, r6
 81106b0:	432c      	orrs	r4, r5
 81106b2:	40d3      	lsrs	r3, r2
 81106b4:	6004      	str	r4, [r0, #0]
 81106b6:	f840 3f04 	str.w	r3, [r0, #4]!
 81106ba:	4288      	cmp	r0, r1
 81106bc:	d3f4      	bcc.n	81106a8 <L_shift+0xc>
 81106be:	bd70      	pop	{r4, r5, r6, pc}

081106c0 <__match>:
 81106c0:	b530      	push	{r4, r5, lr}
 81106c2:	6803      	ldr	r3, [r0, #0]
 81106c4:	3301      	adds	r3, #1
 81106c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 81106ca:	b914      	cbnz	r4, 81106d2 <__match+0x12>
 81106cc:	6003      	str	r3, [r0, #0]
 81106ce:	2001      	movs	r0, #1
 81106d0:	bd30      	pop	{r4, r5, pc}
 81106d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81106d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 81106da:	2d19      	cmp	r5, #25
 81106dc:	bf98      	it	ls
 81106de:	3220      	addls	r2, #32
 81106e0:	42a2      	cmp	r2, r4
 81106e2:	d0f0      	beq.n	81106c6 <__match+0x6>
 81106e4:	2000      	movs	r0, #0
 81106e6:	e7f3      	b.n	81106d0 <__match+0x10>

081106e8 <__hexnan>:
 81106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81106ec:	680b      	ldr	r3, [r1, #0]
 81106ee:	6801      	ldr	r1, [r0, #0]
 81106f0:	115e      	asrs	r6, r3, #5
 81106f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 81106f6:	f013 031f 	ands.w	r3, r3, #31
 81106fa:	b087      	sub	sp, #28
 81106fc:	bf18      	it	ne
 81106fe:	3604      	addne	r6, #4
 8110700:	2500      	movs	r5, #0
 8110702:	1f37      	subs	r7, r6, #4
 8110704:	4682      	mov	sl, r0
 8110706:	4690      	mov	r8, r2
 8110708:	9301      	str	r3, [sp, #4]
 811070a:	f846 5c04 	str.w	r5, [r6, #-4]
 811070e:	46b9      	mov	r9, r7
 8110710:	463c      	mov	r4, r7
 8110712:	9502      	str	r5, [sp, #8]
 8110714:	46ab      	mov	fp, r5
 8110716:	784a      	ldrb	r2, [r1, #1]
 8110718:	1c4b      	adds	r3, r1, #1
 811071a:	9303      	str	r3, [sp, #12]
 811071c:	b342      	cbz	r2, 8110770 <__hexnan+0x88>
 811071e:	4610      	mov	r0, r2
 8110720:	9105      	str	r1, [sp, #20]
 8110722:	9204      	str	r2, [sp, #16]
 8110724:	f7ff fd94 	bl	8110250 <__hexdig_fun>
 8110728:	2800      	cmp	r0, #0
 811072a:	d151      	bne.n	81107d0 <__hexnan+0xe8>
 811072c:	9a04      	ldr	r2, [sp, #16]
 811072e:	9905      	ldr	r1, [sp, #20]
 8110730:	2a20      	cmp	r2, #32
 8110732:	d818      	bhi.n	8110766 <__hexnan+0x7e>
 8110734:	9b02      	ldr	r3, [sp, #8]
 8110736:	459b      	cmp	fp, r3
 8110738:	dd13      	ble.n	8110762 <__hexnan+0x7a>
 811073a:	454c      	cmp	r4, r9
 811073c:	d206      	bcs.n	811074c <__hexnan+0x64>
 811073e:	2d07      	cmp	r5, #7
 8110740:	dc04      	bgt.n	811074c <__hexnan+0x64>
 8110742:	462a      	mov	r2, r5
 8110744:	4649      	mov	r1, r9
 8110746:	4620      	mov	r0, r4
 8110748:	f7ff ffa8 	bl	811069c <L_shift>
 811074c:	4544      	cmp	r4, r8
 811074e:	d952      	bls.n	81107f6 <__hexnan+0x10e>
 8110750:	2300      	movs	r3, #0
 8110752:	f1a4 0904 	sub.w	r9, r4, #4
 8110756:	f844 3c04 	str.w	r3, [r4, #-4]
 811075a:	f8cd b008 	str.w	fp, [sp, #8]
 811075e:	464c      	mov	r4, r9
 8110760:	461d      	mov	r5, r3
 8110762:	9903      	ldr	r1, [sp, #12]
 8110764:	e7d7      	b.n	8110716 <__hexnan+0x2e>
 8110766:	2a29      	cmp	r2, #41	@ 0x29
 8110768:	d157      	bne.n	811081a <__hexnan+0x132>
 811076a:	3102      	adds	r1, #2
 811076c:	f8ca 1000 	str.w	r1, [sl]
 8110770:	f1bb 0f00 	cmp.w	fp, #0
 8110774:	d051      	beq.n	811081a <__hexnan+0x132>
 8110776:	454c      	cmp	r4, r9
 8110778:	d206      	bcs.n	8110788 <__hexnan+0xa0>
 811077a:	2d07      	cmp	r5, #7
 811077c:	dc04      	bgt.n	8110788 <__hexnan+0xa0>
 811077e:	462a      	mov	r2, r5
 8110780:	4649      	mov	r1, r9
 8110782:	4620      	mov	r0, r4
 8110784:	f7ff ff8a 	bl	811069c <L_shift>
 8110788:	4544      	cmp	r4, r8
 811078a:	d936      	bls.n	81107fa <__hexnan+0x112>
 811078c:	f1a8 0204 	sub.w	r2, r8, #4
 8110790:	4623      	mov	r3, r4
 8110792:	f853 1b04 	ldr.w	r1, [r3], #4
 8110796:	f842 1f04 	str.w	r1, [r2, #4]!
 811079a:	429f      	cmp	r7, r3
 811079c:	d2f9      	bcs.n	8110792 <__hexnan+0xaa>
 811079e:	1b3b      	subs	r3, r7, r4
 81107a0:	f023 0303 	bic.w	r3, r3, #3
 81107a4:	3304      	adds	r3, #4
 81107a6:	3401      	adds	r4, #1
 81107a8:	3e03      	subs	r6, #3
 81107aa:	42b4      	cmp	r4, r6
 81107ac:	bf88      	it	hi
 81107ae:	2304      	movhi	r3, #4
 81107b0:	4443      	add	r3, r8
 81107b2:	2200      	movs	r2, #0
 81107b4:	f843 2b04 	str.w	r2, [r3], #4
 81107b8:	429f      	cmp	r7, r3
 81107ba:	d2fb      	bcs.n	81107b4 <__hexnan+0xcc>
 81107bc:	683b      	ldr	r3, [r7, #0]
 81107be:	b91b      	cbnz	r3, 81107c8 <__hexnan+0xe0>
 81107c0:	4547      	cmp	r7, r8
 81107c2:	d128      	bne.n	8110816 <__hexnan+0x12e>
 81107c4:	2301      	movs	r3, #1
 81107c6:	603b      	str	r3, [r7, #0]
 81107c8:	2005      	movs	r0, #5
 81107ca:	b007      	add	sp, #28
 81107cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81107d0:	3501      	adds	r5, #1
 81107d2:	2d08      	cmp	r5, #8
 81107d4:	f10b 0b01 	add.w	fp, fp, #1
 81107d8:	dd06      	ble.n	81107e8 <__hexnan+0x100>
 81107da:	4544      	cmp	r4, r8
 81107dc:	d9c1      	bls.n	8110762 <__hexnan+0x7a>
 81107de:	2300      	movs	r3, #0
 81107e0:	f844 3c04 	str.w	r3, [r4, #-4]
 81107e4:	2501      	movs	r5, #1
 81107e6:	3c04      	subs	r4, #4
 81107e8:	6822      	ldr	r2, [r4, #0]
 81107ea:	f000 000f 	and.w	r0, r0, #15
 81107ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 81107f2:	6020      	str	r0, [r4, #0]
 81107f4:	e7b5      	b.n	8110762 <__hexnan+0x7a>
 81107f6:	2508      	movs	r5, #8
 81107f8:	e7b3      	b.n	8110762 <__hexnan+0x7a>
 81107fa:	9b01      	ldr	r3, [sp, #4]
 81107fc:	2b00      	cmp	r3, #0
 81107fe:	d0dd      	beq.n	81107bc <__hexnan+0xd4>
 8110800:	f1c3 0320 	rsb	r3, r3, #32
 8110804:	f04f 32ff 	mov.w	r2, #4294967295
 8110808:	40da      	lsrs	r2, r3
 811080a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 811080e:	4013      	ands	r3, r2
 8110810:	f846 3c04 	str.w	r3, [r6, #-4]
 8110814:	e7d2      	b.n	81107bc <__hexnan+0xd4>
 8110816:	3f04      	subs	r7, #4
 8110818:	e7d0      	b.n	81107bc <__hexnan+0xd4>
 811081a:	2004      	movs	r0, #4
 811081c:	e7d5      	b.n	81107ca <__hexnan+0xe2>

0811081e <__ascii_mbtowc>:
 811081e:	b082      	sub	sp, #8
 8110820:	b901      	cbnz	r1, 8110824 <__ascii_mbtowc+0x6>
 8110822:	a901      	add	r1, sp, #4
 8110824:	b142      	cbz	r2, 8110838 <__ascii_mbtowc+0x1a>
 8110826:	b14b      	cbz	r3, 811083c <__ascii_mbtowc+0x1e>
 8110828:	7813      	ldrb	r3, [r2, #0]
 811082a:	600b      	str	r3, [r1, #0]
 811082c:	7812      	ldrb	r2, [r2, #0]
 811082e:	1e10      	subs	r0, r2, #0
 8110830:	bf18      	it	ne
 8110832:	2001      	movne	r0, #1
 8110834:	b002      	add	sp, #8
 8110836:	4770      	bx	lr
 8110838:	4610      	mov	r0, r2
 811083a:	e7fb      	b.n	8110834 <__ascii_mbtowc+0x16>
 811083c:	f06f 0001 	mvn.w	r0, #1
 8110840:	e7f8      	b.n	8110834 <__ascii_mbtowc+0x16>

08110842 <_realloc_r>:
 8110842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8110846:	4680      	mov	r8, r0
 8110848:	4615      	mov	r5, r2
 811084a:	460c      	mov	r4, r1
 811084c:	b921      	cbnz	r1, 8110858 <_realloc_r+0x16>
 811084e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8110852:	4611      	mov	r1, r2
 8110854:	f7fd bca8 	b.w	810e1a8 <_malloc_r>
 8110858:	b92a      	cbnz	r2, 8110866 <_realloc_r+0x24>
 811085a:	f7fd fc31 	bl	810e0c0 <_free_r>
 811085e:	2400      	movs	r4, #0
 8110860:	4620      	mov	r0, r4
 8110862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8110866:	f000 f840 	bl	81108ea <_malloc_usable_size_r>
 811086a:	4285      	cmp	r5, r0
 811086c:	4606      	mov	r6, r0
 811086e:	d802      	bhi.n	8110876 <_realloc_r+0x34>
 8110870:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8110874:	d8f4      	bhi.n	8110860 <_realloc_r+0x1e>
 8110876:	4629      	mov	r1, r5
 8110878:	4640      	mov	r0, r8
 811087a:	f7fd fc95 	bl	810e1a8 <_malloc_r>
 811087e:	4607      	mov	r7, r0
 8110880:	2800      	cmp	r0, #0
 8110882:	d0ec      	beq.n	811085e <_realloc_r+0x1c>
 8110884:	42b5      	cmp	r5, r6
 8110886:	462a      	mov	r2, r5
 8110888:	4621      	mov	r1, r4
 811088a:	bf28      	it	cs
 811088c:	4632      	movcs	r2, r6
 811088e:	f7fc fdb6 	bl	810d3fe <memcpy>
 8110892:	4621      	mov	r1, r4
 8110894:	4640      	mov	r0, r8
 8110896:	f7fd fc13 	bl	810e0c0 <_free_r>
 811089a:	463c      	mov	r4, r7
 811089c:	e7e0      	b.n	8110860 <_realloc_r+0x1e>

0811089e <__ascii_wctomb>:
 811089e:	4603      	mov	r3, r0
 81108a0:	4608      	mov	r0, r1
 81108a2:	b141      	cbz	r1, 81108b6 <__ascii_wctomb+0x18>
 81108a4:	2aff      	cmp	r2, #255	@ 0xff
 81108a6:	d904      	bls.n	81108b2 <__ascii_wctomb+0x14>
 81108a8:	228a      	movs	r2, #138	@ 0x8a
 81108aa:	601a      	str	r2, [r3, #0]
 81108ac:	f04f 30ff 	mov.w	r0, #4294967295
 81108b0:	4770      	bx	lr
 81108b2:	700a      	strb	r2, [r1, #0]
 81108b4:	2001      	movs	r0, #1
 81108b6:	4770      	bx	lr

081108b8 <fiprintf>:
 81108b8:	b40e      	push	{r1, r2, r3}
 81108ba:	b503      	push	{r0, r1, lr}
 81108bc:	4601      	mov	r1, r0
 81108be:	ab03      	add	r3, sp, #12
 81108c0:	4805      	ldr	r0, [pc, #20]	@ (81108d8 <fiprintf+0x20>)
 81108c2:	f853 2b04 	ldr.w	r2, [r3], #4
 81108c6:	6800      	ldr	r0, [r0, #0]
 81108c8:	9301      	str	r3, [sp, #4]
 81108ca:	f7ff f9b1 	bl	810fc30 <_vfiprintf_r>
 81108ce:	b002      	add	sp, #8
 81108d0:	f85d eb04 	ldr.w	lr, [sp], #4
 81108d4:	b003      	add	sp, #12
 81108d6:	4770      	bx	lr
 81108d8:	10000094 	.word	0x10000094

081108dc <abort>:
 81108dc:	b508      	push	{r3, lr}
 81108de:	2006      	movs	r0, #6
 81108e0:	f000 f834 	bl	811094c <raise>
 81108e4:	2001      	movs	r0, #1
 81108e6:	f7f2 fcc1 	bl	810326c <_exit>

081108ea <_malloc_usable_size_r>:
 81108ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81108ee:	1f18      	subs	r0, r3, #4
 81108f0:	2b00      	cmp	r3, #0
 81108f2:	bfbc      	itt	lt
 81108f4:	580b      	ldrlt	r3, [r1, r0]
 81108f6:	18c0      	addlt	r0, r0, r3
 81108f8:	4770      	bx	lr

081108fa <_raise_r>:
 81108fa:	291f      	cmp	r1, #31
 81108fc:	b538      	push	{r3, r4, r5, lr}
 81108fe:	4605      	mov	r5, r0
 8110900:	460c      	mov	r4, r1
 8110902:	d904      	bls.n	811090e <_raise_r+0x14>
 8110904:	2316      	movs	r3, #22
 8110906:	6003      	str	r3, [r0, #0]
 8110908:	f04f 30ff 	mov.w	r0, #4294967295
 811090c:	bd38      	pop	{r3, r4, r5, pc}
 811090e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8110910:	b112      	cbz	r2, 8110918 <_raise_r+0x1e>
 8110912:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8110916:	b94b      	cbnz	r3, 811092c <_raise_r+0x32>
 8110918:	4628      	mov	r0, r5
 811091a:	f000 f831 	bl	8110980 <_getpid_r>
 811091e:	4622      	mov	r2, r4
 8110920:	4601      	mov	r1, r0
 8110922:	4628      	mov	r0, r5
 8110924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8110928:	f000 b818 	b.w	811095c <_kill_r>
 811092c:	2b01      	cmp	r3, #1
 811092e:	d00a      	beq.n	8110946 <_raise_r+0x4c>
 8110930:	1c59      	adds	r1, r3, #1
 8110932:	d103      	bne.n	811093c <_raise_r+0x42>
 8110934:	2316      	movs	r3, #22
 8110936:	6003      	str	r3, [r0, #0]
 8110938:	2001      	movs	r0, #1
 811093a:	e7e7      	b.n	811090c <_raise_r+0x12>
 811093c:	2100      	movs	r1, #0
 811093e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8110942:	4620      	mov	r0, r4
 8110944:	4798      	blx	r3
 8110946:	2000      	movs	r0, #0
 8110948:	e7e0      	b.n	811090c <_raise_r+0x12>
	...

0811094c <raise>:
 811094c:	4b02      	ldr	r3, [pc, #8]	@ (8110958 <raise+0xc>)
 811094e:	4601      	mov	r1, r0
 8110950:	6818      	ldr	r0, [r3, #0]
 8110952:	f7ff bfd2 	b.w	81108fa <_raise_r>
 8110956:	bf00      	nop
 8110958:	10000094 	.word	0x10000094

0811095c <_kill_r>:
 811095c:	b538      	push	{r3, r4, r5, lr}
 811095e:	4d07      	ldr	r5, [pc, #28]	@ (811097c <_kill_r+0x20>)
 8110960:	2300      	movs	r3, #0
 8110962:	4604      	mov	r4, r0
 8110964:	4608      	mov	r0, r1
 8110966:	4611      	mov	r1, r2
 8110968:	602b      	str	r3, [r5, #0]
 811096a:	f7f2 fc6f 	bl	810324c <_kill>
 811096e:	1c43      	adds	r3, r0, #1
 8110970:	d102      	bne.n	8110978 <_kill_r+0x1c>
 8110972:	682b      	ldr	r3, [r5, #0]
 8110974:	b103      	cbz	r3, 8110978 <_kill_r+0x1c>
 8110976:	6023      	str	r3, [r4, #0]
 8110978:	bd38      	pop	{r3, r4, r5, pc}
 811097a:	bf00      	nop
 811097c:	10000788 	.word	0x10000788

08110980 <_getpid_r>:
 8110980:	f7f2 bc5c 	b.w	810323c <_getpid>
 8110984:	0000      	movs	r0, r0
	...

08110988 <sin>:
 8110988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811098a:	ec53 2b10 	vmov	r2, r3, d0
 811098e:	4826      	ldr	r0, [pc, #152]	@ (8110a28 <sin+0xa0>)
 8110990:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8110994:	4281      	cmp	r1, r0
 8110996:	d807      	bhi.n	81109a8 <sin+0x20>
 8110998:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8110a20 <sin+0x98>
 811099c:	2000      	movs	r0, #0
 811099e:	b005      	add	sp, #20
 81109a0:	f85d eb04 	ldr.w	lr, [sp], #4
 81109a4:	f000 b90c 	b.w	8110bc0 <__kernel_sin>
 81109a8:	4820      	ldr	r0, [pc, #128]	@ (8110a2c <sin+0xa4>)
 81109aa:	4281      	cmp	r1, r0
 81109ac:	d908      	bls.n	81109c0 <sin+0x38>
 81109ae:	4610      	mov	r0, r2
 81109b0:	4619      	mov	r1, r3
 81109b2:	f7ef fcf1 	bl	8100398 <__aeabi_dsub>
 81109b6:	ec41 0b10 	vmov	d0, r0, r1
 81109ba:	b005      	add	sp, #20
 81109bc:	f85d fb04 	ldr.w	pc, [sp], #4
 81109c0:	4668      	mov	r0, sp
 81109c2:	f000 f9b9 	bl	8110d38 <__ieee754_rem_pio2>
 81109c6:	f000 0003 	and.w	r0, r0, #3
 81109ca:	2801      	cmp	r0, #1
 81109cc:	d00c      	beq.n	81109e8 <sin+0x60>
 81109ce:	2802      	cmp	r0, #2
 81109d0:	d011      	beq.n	81109f6 <sin+0x6e>
 81109d2:	b9e8      	cbnz	r0, 8110a10 <sin+0x88>
 81109d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 81109d8:	ed9d 0b00 	vldr	d0, [sp]
 81109dc:	2001      	movs	r0, #1
 81109de:	f000 f8ef 	bl	8110bc0 <__kernel_sin>
 81109e2:	ec51 0b10 	vmov	r0, r1, d0
 81109e6:	e7e6      	b.n	81109b6 <sin+0x2e>
 81109e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 81109ec:	ed9d 0b00 	vldr	d0, [sp]
 81109f0:	f000 f81e 	bl	8110a30 <__kernel_cos>
 81109f4:	e7f5      	b.n	81109e2 <sin+0x5a>
 81109f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 81109fa:	ed9d 0b00 	vldr	d0, [sp]
 81109fe:	2001      	movs	r0, #1
 8110a00:	f000 f8de 	bl	8110bc0 <__kernel_sin>
 8110a04:	ec53 2b10 	vmov	r2, r3, d0
 8110a08:	4610      	mov	r0, r2
 8110a0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8110a0e:	e7d2      	b.n	81109b6 <sin+0x2e>
 8110a10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8110a14:	ed9d 0b00 	vldr	d0, [sp]
 8110a18:	f000 f80a 	bl	8110a30 <__kernel_cos>
 8110a1c:	e7f2      	b.n	8110a04 <sin+0x7c>
 8110a1e:	bf00      	nop
	...
 8110a28:	3fe921fb 	.word	0x3fe921fb
 8110a2c:	7fefffff 	.word	0x7fefffff

08110a30 <__kernel_cos>:
 8110a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110a34:	ec57 6b10 	vmov	r6, r7, d0
 8110a38:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8110a3c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8110a40:	ed8d 1b00 	vstr	d1, [sp]
 8110a44:	d206      	bcs.n	8110a54 <__kernel_cos+0x24>
 8110a46:	4630      	mov	r0, r6
 8110a48:	4639      	mov	r1, r7
 8110a4a:	f7f0 f90d 	bl	8100c68 <__aeabi_d2iz>
 8110a4e:	2800      	cmp	r0, #0
 8110a50:	f000 8088 	beq.w	8110b64 <__kernel_cos+0x134>
 8110a54:	4632      	mov	r2, r6
 8110a56:	463b      	mov	r3, r7
 8110a58:	4630      	mov	r0, r6
 8110a5a:	4639      	mov	r1, r7
 8110a5c:	f7ef fe54 	bl	8100708 <__aeabi_dmul>
 8110a60:	4b51      	ldr	r3, [pc, #324]	@ (8110ba8 <__kernel_cos+0x178>)
 8110a62:	2200      	movs	r2, #0
 8110a64:	4604      	mov	r4, r0
 8110a66:	460d      	mov	r5, r1
 8110a68:	f7ef fe4e 	bl	8100708 <__aeabi_dmul>
 8110a6c:	a340      	add	r3, pc, #256	@ (adr r3, 8110b70 <__kernel_cos+0x140>)
 8110a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110a72:	4682      	mov	sl, r0
 8110a74:	468b      	mov	fp, r1
 8110a76:	4620      	mov	r0, r4
 8110a78:	4629      	mov	r1, r5
 8110a7a:	f7ef fe45 	bl	8100708 <__aeabi_dmul>
 8110a7e:	a33e      	add	r3, pc, #248	@ (adr r3, 8110b78 <__kernel_cos+0x148>)
 8110a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110a84:	f7ef fc8a 	bl	810039c <__adddf3>
 8110a88:	4622      	mov	r2, r4
 8110a8a:	462b      	mov	r3, r5
 8110a8c:	f7ef fe3c 	bl	8100708 <__aeabi_dmul>
 8110a90:	a33b      	add	r3, pc, #236	@ (adr r3, 8110b80 <__kernel_cos+0x150>)
 8110a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110a96:	f7ef fc7f 	bl	8100398 <__aeabi_dsub>
 8110a9a:	4622      	mov	r2, r4
 8110a9c:	462b      	mov	r3, r5
 8110a9e:	f7ef fe33 	bl	8100708 <__aeabi_dmul>
 8110aa2:	a339      	add	r3, pc, #228	@ (adr r3, 8110b88 <__kernel_cos+0x158>)
 8110aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110aa8:	f7ef fc78 	bl	810039c <__adddf3>
 8110aac:	4622      	mov	r2, r4
 8110aae:	462b      	mov	r3, r5
 8110ab0:	f7ef fe2a 	bl	8100708 <__aeabi_dmul>
 8110ab4:	a336      	add	r3, pc, #216	@ (adr r3, 8110b90 <__kernel_cos+0x160>)
 8110ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110aba:	f7ef fc6d 	bl	8100398 <__aeabi_dsub>
 8110abe:	4622      	mov	r2, r4
 8110ac0:	462b      	mov	r3, r5
 8110ac2:	f7ef fe21 	bl	8100708 <__aeabi_dmul>
 8110ac6:	a334      	add	r3, pc, #208	@ (adr r3, 8110b98 <__kernel_cos+0x168>)
 8110ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110acc:	f7ef fc66 	bl	810039c <__adddf3>
 8110ad0:	4622      	mov	r2, r4
 8110ad2:	462b      	mov	r3, r5
 8110ad4:	f7ef fe18 	bl	8100708 <__aeabi_dmul>
 8110ad8:	4622      	mov	r2, r4
 8110ada:	462b      	mov	r3, r5
 8110adc:	f7ef fe14 	bl	8100708 <__aeabi_dmul>
 8110ae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110ae4:	4604      	mov	r4, r0
 8110ae6:	460d      	mov	r5, r1
 8110ae8:	4630      	mov	r0, r6
 8110aea:	4639      	mov	r1, r7
 8110aec:	f7ef fe0c 	bl	8100708 <__aeabi_dmul>
 8110af0:	460b      	mov	r3, r1
 8110af2:	4602      	mov	r2, r0
 8110af4:	4629      	mov	r1, r5
 8110af6:	4620      	mov	r0, r4
 8110af8:	f7ef fc4e 	bl	8100398 <__aeabi_dsub>
 8110afc:	4b2b      	ldr	r3, [pc, #172]	@ (8110bac <__kernel_cos+0x17c>)
 8110afe:	4598      	cmp	r8, r3
 8110b00:	4606      	mov	r6, r0
 8110b02:	460f      	mov	r7, r1
 8110b04:	d810      	bhi.n	8110b28 <__kernel_cos+0xf8>
 8110b06:	4602      	mov	r2, r0
 8110b08:	460b      	mov	r3, r1
 8110b0a:	4650      	mov	r0, sl
 8110b0c:	4659      	mov	r1, fp
 8110b0e:	f7ef fc43 	bl	8100398 <__aeabi_dsub>
 8110b12:	460b      	mov	r3, r1
 8110b14:	4926      	ldr	r1, [pc, #152]	@ (8110bb0 <__kernel_cos+0x180>)
 8110b16:	4602      	mov	r2, r0
 8110b18:	2000      	movs	r0, #0
 8110b1a:	f7ef fc3d 	bl	8100398 <__aeabi_dsub>
 8110b1e:	ec41 0b10 	vmov	d0, r0, r1
 8110b22:	b003      	add	sp, #12
 8110b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110b28:	4b22      	ldr	r3, [pc, #136]	@ (8110bb4 <__kernel_cos+0x184>)
 8110b2a:	4921      	ldr	r1, [pc, #132]	@ (8110bb0 <__kernel_cos+0x180>)
 8110b2c:	4598      	cmp	r8, r3
 8110b2e:	bf8c      	ite	hi
 8110b30:	4d21      	ldrhi	r5, [pc, #132]	@ (8110bb8 <__kernel_cos+0x188>)
 8110b32:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8110b36:	2400      	movs	r4, #0
 8110b38:	4622      	mov	r2, r4
 8110b3a:	462b      	mov	r3, r5
 8110b3c:	2000      	movs	r0, #0
 8110b3e:	f7ef fc2b 	bl	8100398 <__aeabi_dsub>
 8110b42:	4622      	mov	r2, r4
 8110b44:	4680      	mov	r8, r0
 8110b46:	4689      	mov	r9, r1
 8110b48:	462b      	mov	r3, r5
 8110b4a:	4650      	mov	r0, sl
 8110b4c:	4659      	mov	r1, fp
 8110b4e:	f7ef fc23 	bl	8100398 <__aeabi_dsub>
 8110b52:	4632      	mov	r2, r6
 8110b54:	463b      	mov	r3, r7
 8110b56:	f7ef fc1f 	bl	8100398 <__aeabi_dsub>
 8110b5a:	4602      	mov	r2, r0
 8110b5c:	460b      	mov	r3, r1
 8110b5e:	4640      	mov	r0, r8
 8110b60:	4649      	mov	r1, r9
 8110b62:	e7da      	b.n	8110b1a <__kernel_cos+0xea>
 8110b64:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8110ba0 <__kernel_cos+0x170>
 8110b68:	e7db      	b.n	8110b22 <__kernel_cos+0xf2>
 8110b6a:	bf00      	nop
 8110b6c:	f3af 8000 	nop.w
 8110b70:	be8838d4 	.word	0xbe8838d4
 8110b74:	bda8fae9 	.word	0xbda8fae9
 8110b78:	bdb4b1c4 	.word	0xbdb4b1c4
 8110b7c:	3e21ee9e 	.word	0x3e21ee9e
 8110b80:	809c52ad 	.word	0x809c52ad
 8110b84:	3e927e4f 	.word	0x3e927e4f
 8110b88:	19cb1590 	.word	0x19cb1590
 8110b8c:	3efa01a0 	.word	0x3efa01a0
 8110b90:	16c15177 	.word	0x16c15177
 8110b94:	3f56c16c 	.word	0x3f56c16c
 8110b98:	5555554c 	.word	0x5555554c
 8110b9c:	3fa55555 	.word	0x3fa55555
 8110ba0:	00000000 	.word	0x00000000
 8110ba4:	3ff00000 	.word	0x3ff00000
 8110ba8:	3fe00000 	.word	0x3fe00000
 8110bac:	3fd33332 	.word	0x3fd33332
 8110bb0:	3ff00000 	.word	0x3ff00000
 8110bb4:	3fe90000 	.word	0x3fe90000
 8110bb8:	3fd20000 	.word	0x3fd20000
 8110bbc:	00000000 	.word	0x00000000

08110bc0 <__kernel_sin>:
 8110bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110bc4:	ec55 4b10 	vmov	r4, r5, d0
 8110bc8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8110bcc:	b085      	sub	sp, #20
 8110bce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8110bd2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8110bd6:	4680      	mov	r8, r0
 8110bd8:	d205      	bcs.n	8110be6 <__kernel_sin+0x26>
 8110bda:	4620      	mov	r0, r4
 8110bdc:	4629      	mov	r1, r5
 8110bde:	f7f0 f843 	bl	8100c68 <__aeabi_d2iz>
 8110be2:	2800      	cmp	r0, #0
 8110be4:	d052      	beq.n	8110c8c <__kernel_sin+0xcc>
 8110be6:	4622      	mov	r2, r4
 8110be8:	462b      	mov	r3, r5
 8110bea:	4620      	mov	r0, r4
 8110bec:	4629      	mov	r1, r5
 8110bee:	f7ef fd8b 	bl	8100708 <__aeabi_dmul>
 8110bf2:	4682      	mov	sl, r0
 8110bf4:	468b      	mov	fp, r1
 8110bf6:	4602      	mov	r2, r0
 8110bf8:	460b      	mov	r3, r1
 8110bfa:	4620      	mov	r0, r4
 8110bfc:	4629      	mov	r1, r5
 8110bfe:	f7ef fd83 	bl	8100708 <__aeabi_dmul>
 8110c02:	a342      	add	r3, pc, #264	@ (adr r3, 8110d0c <__kernel_sin+0x14c>)
 8110c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c08:	e9cd 0100 	strd	r0, r1, [sp]
 8110c0c:	4650      	mov	r0, sl
 8110c0e:	4659      	mov	r1, fp
 8110c10:	f7ef fd7a 	bl	8100708 <__aeabi_dmul>
 8110c14:	a33f      	add	r3, pc, #252	@ (adr r3, 8110d14 <__kernel_sin+0x154>)
 8110c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c1a:	f7ef fbbd 	bl	8100398 <__aeabi_dsub>
 8110c1e:	4652      	mov	r2, sl
 8110c20:	465b      	mov	r3, fp
 8110c22:	f7ef fd71 	bl	8100708 <__aeabi_dmul>
 8110c26:	a33d      	add	r3, pc, #244	@ (adr r3, 8110d1c <__kernel_sin+0x15c>)
 8110c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c2c:	f7ef fbb6 	bl	810039c <__adddf3>
 8110c30:	4652      	mov	r2, sl
 8110c32:	465b      	mov	r3, fp
 8110c34:	f7ef fd68 	bl	8100708 <__aeabi_dmul>
 8110c38:	a33a      	add	r3, pc, #232	@ (adr r3, 8110d24 <__kernel_sin+0x164>)
 8110c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c3e:	f7ef fbab 	bl	8100398 <__aeabi_dsub>
 8110c42:	4652      	mov	r2, sl
 8110c44:	465b      	mov	r3, fp
 8110c46:	f7ef fd5f 	bl	8100708 <__aeabi_dmul>
 8110c4a:	a338      	add	r3, pc, #224	@ (adr r3, 8110d2c <__kernel_sin+0x16c>)
 8110c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c50:	f7ef fba4 	bl	810039c <__adddf3>
 8110c54:	4606      	mov	r6, r0
 8110c56:	460f      	mov	r7, r1
 8110c58:	f1b8 0f00 	cmp.w	r8, #0
 8110c5c:	d11b      	bne.n	8110c96 <__kernel_sin+0xd6>
 8110c5e:	4602      	mov	r2, r0
 8110c60:	460b      	mov	r3, r1
 8110c62:	4650      	mov	r0, sl
 8110c64:	4659      	mov	r1, fp
 8110c66:	f7ef fd4f 	bl	8100708 <__aeabi_dmul>
 8110c6a:	a325      	add	r3, pc, #148	@ (adr r3, 8110d00 <__kernel_sin+0x140>)
 8110c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110c70:	f7ef fb92 	bl	8100398 <__aeabi_dsub>
 8110c74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110c78:	f7ef fd46 	bl	8100708 <__aeabi_dmul>
 8110c7c:	4602      	mov	r2, r0
 8110c7e:	460b      	mov	r3, r1
 8110c80:	4620      	mov	r0, r4
 8110c82:	4629      	mov	r1, r5
 8110c84:	f7ef fb8a 	bl	810039c <__adddf3>
 8110c88:	4604      	mov	r4, r0
 8110c8a:	460d      	mov	r5, r1
 8110c8c:	ec45 4b10 	vmov	d0, r4, r5
 8110c90:	b005      	add	sp, #20
 8110c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8110d08 <__kernel_sin+0x148>)
 8110c9c:	2200      	movs	r2, #0
 8110c9e:	f7ef fd33 	bl	8100708 <__aeabi_dmul>
 8110ca2:	4632      	mov	r2, r6
 8110ca4:	4680      	mov	r8, r0
 8110ca6:	4689      	mov	r9, r1
 8110ca8:	463b      	mov	r3, r7
 8110caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110cae:	f7ef fd2b 	bl	8100708 <__aeabi_dmul>
 8110cb2:	4602      	mov	r2, r0
 8110cb4:	460b      	mov	r3, r1
 8110cb6:	4640      	mov	r0, r8
 8110cb8:	4649      	mov	r1, r9
 8110cba:	f7ef fb6d 	bl	8100398 <__aeabi_dsub>
 8110cbe:	4652      	mov	r2, sl
 8110cc0:	465b      	mov	r3, fp
 8110cc2:	f7ef fd21 	bl	8100708 <__aeabi_dmul>
 8110cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110cca:	f7ef fb65 	bl	8100398 <__aeabi_dsub>
 8110cce:	a30c      	add	r3, pc, #48	@ (adr r3, 8110d00 <__kernel_sin+0x140>)
 8110cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110cd4:	4606      	mov	r6, r0
 8110cd6:	460f      	mov	r7, r1
 8110cd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110cdc:	f7ef fd14 	bl	8100708 <__aeabi_dmul>
 8110ce0:	4602      	mov	r2, r0
 8110ce2:	460b      	mov	r3, r1
 8110ce4:	4630      	mov	r0, r6
 8110ce6:	4639      	mov	r1, r7
 8110ce8:	f7ef fb58 	bl	810039c <__adddf3>
 8110cec:	4602      	mov	r2, r0
 8110cee:	460b      	mov	r3, r1
 8110cf0:	4620      	mov	r0, r4
 8110cf2:	4629      	mov	r1, r5
 8110cf4:	f7ef fb50 	bl	8100398 <__aeabi_dsub>
 8110cf8:	e7c6      	b.n	8110c88 <__kernel_sin+0xc8>
 8110cfa:	bf00      	nop
 8110cfc:	f3af 8000 	nop.w
 8110d00:	55555549 	.word	0x55555549
 8110d04:	3fc55555 	.word	0x3fc55555
 8110d08:	3fe00000 	.word	0x3fe00000
 8110d0c:	5acfd57c 	.word	0x5acfd57c
 8110d10:	3de5d93a 	.word	0x3de5d93a
 8110d14:	8a2b9ceb 	.word	0x8a2b9ceb
 8110d18:	3e5ae5e6 	.word	0x3e5ae5e6
 8110d1c:	57b1fe7d 	.word	0x57b1fe7d
 8110d20:	3ec71de3 	.word	0x3ec71de3
 8110d24:	19c161d5 	.word	0x19c161d5
 8110d28:	3f2a01a0 	.word	0x3f2a01a0
 8110d2c:	1110f8a6 	.word	0x1110f8a6
 8110d30:	3f811111 	.word	0x3f811111
 8110d34:	00000000 	.word	0x00000000

08110d38 <__ieee754_rem_pio2>:
 8110d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110d3c:	ec57 6b10 	vmov	r6, r7, d0
 8110d40:	4bc5      	ldr	r3, [pc, #788]	@ (8111058 <__ieee754_rem_pio2+0x320>)
 8110d42:	b08d      	sub	sp, #52	@ 0x34
 8110d44:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8110d48:	4598      	cmp	r8, r3
 8110d4a:	4604      	mov	r4, r0
 8110d4c:	9704      	str	r7, [sp, #16]
 8110d4e:	d807      	bhi.n	8110d60 <__ieee754_rem_pio2+0x28>
 8110d50:	2200      	movs	r2, #0
 8110d52:	2300      	movs	r3, #0
 8110d54:	ed80 0b00 	vstr	d0, [r0]
 8110d58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8110d5c:	2500      	movs	r5, #0
 8110d5e:	e028      	b.n	8110db2 <__ieee754_rem_pio2+0x7a>
 8110d60:	4bbe      	ldr	r3, [pc, #760]	@ (811105c <__ieee754_rem_pio2+0x324>)
 8110d62:	4598      	cmp	r8, r3
 8110d64:	d878      	bhi.n	8110e58 <__ieee754_rem_pio2+0x120>
 8110d66:	9b04      	ldr	r3, [sp, #16]
 8110d68:	4dbd      	ldr	r5, [pc, #756]	@ (8111060 <__ieee754_rem_pio2+0x328>)
 8110d6a:	2b00      	cmp	r3, #0
 8110d6c:	4630      	mov	r0, r6
 8110d6e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8111020 <__ieee754_rem_pio2+0x2e8>)
 8110d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110d74:	4639      	mov	r1, r7
 8110d76:	dd38      	ble.n	8110dea <__ieee754_rem_pio2+0xb2>
 8110d78:	f7ef fb0e 	bl	8100398 <__aeabi_dsub>
 8110d7c:	45a8      	cmp	r8, r5
 8110d7e:	4606      	mov	r6, r0
 8110d80:	460f      	mov	r7, r1
 8110d82:	d01a      	beq.n	8110dba <__ieee754_rem_pio2+0x82>
 8110d84:	a3a8      	add	r3, pc, #672	@ (adr r3, 8111028 <__ieee754_rem_pio2+0x2f0>)
 8110d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110d8a:	f7ef fb05 	bl	8100398 <__aeabi_dsub>
 8110d8e:	4602      	mov	r2, r0
 8110d90:	460b      	mov	r3, r1
 8110d92:	4680      	mov	r8, r0
 8110d94:	4689      	mov	r9, r1
 8110d96:	4630      	mov	r0, r6
 8110d98:	4639      	mov	r1, r7
 8110d9a:	f7ef fafd 	bl	8100398 <__aeabi_dsub>
 8110d9e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8111028 <__ieee754_rem_pio2+0x2f0>)
 8110da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110da4:	f7ef faf8 	bl	8100398 <__aeabi_dsub>
 8110da8:	e9c4 8900 	strd	r8, r9, [r4]
 8110dac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8110db0:	2501      	movs	r5, #1
 8110db2:	4628      	mov	r0, r5
 8110db4:	b00d      	add	sp, #52	@ 0x34
 8110db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110dba:	a39d      	add	r3, pc, #628	@ (adr r3, 8111030 <__ieee754_rem_pio2+0x2f8>)
 8110dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110dc0:	f7ef faea 	bl	8100398 <__aeabi_dsub>
 8110dc4:	a39c      	add	r3, pc, #624	@ (adr r3, 8111038 <__ieee754_rem_pio2+0x300>)
 8110dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110dca:	4606      	mov	r6, r0
 8110dcc:	460f      	mov	r7, r1
 8110dce:	f7ef fae3 	bl	8100398 <__aeabi_dsub>
 8110dd2:	4602      	mov	r2, r0
 8110dd4:	460b      	mov	r3, r1
 8110dd6:	4680      	mov	r8, r0
 8110dd8:	4689      	mov	r9, r1
 8110dda:	4630      	mov	r0, r6
 8110ddc:	4639      	mov	r1, r7
 8110dde:	f7ef fadb 	bl	8100398 <__aeabi_dsub>
 8110de2:	a395      	add	r3, pc, #596	@ (adr r3, 8111038 <__ieee754_rem_pio2+0x300>)
 8110de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110de8:	e7dc      	b.n	8110da4 <__ieee754_rem_pio2+0x6c>
 8110dea:	f7ef fad7 	bl	810039c <__adddf3>
 8110dee:	45a8      	cmp	r8, r5
 8110df0:	4606      	mov	r6, r0
 8110df2:	460f      	mov	r7, r1
 8110df4:	d018      	beq.n	8110e28 <__ieee754_rem_pio2+0xf0>
 8110df6:	a38c      	add	r3, pc, #560	@ (adr r3, 8111028 <__ieee754_rem_pio2+0x2f0>)
 8110df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110dfc:	f7ef face 	bl	810039c <__adddf3>
 8110e00:	4602      	mov	r2, r0
 8110e02:	460b      	mov	r3, r1
 8110e04:	4680      	mov	r8, r0
 8110e06:	4689      	mov	r9, r1
 8110e08:	4630      	mov	r0, r6
 8110e0a:	4639      	mov	r1, r7
 8110e0c:	f7ef fac4 	bl	8100398 <__aeabi_dsub>
 8110e10:	a385      	add	r3, pc, #532	@ (adr r3, 8111028 <__ieee754_rem_pio2+0x2f0>)
 8110e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e16:	f7ef fac1 	bl	810039c <__adddf3>
 8110e1a:	f04f 35ff 	mov.w	r5, #4294967295
 8110e1e:	e9c4 8900 	strd	r8, r9, [r4]
 8110e22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8110e26:	e7c4      	b.n	8110db2 <__ieee754_rem_pio2+0x7a>
 8110e28:	a381      	add	r3, pc, #516	@ (adr r3, 8111030 <__ieee754_rem_pio2+0x2f8>)
 8110e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e2e:	f7ef fab5 	bl	810039c <__adddf3>
 8110e32:	a381      	add	r3, pc, #516	@ (adr r3, 8111038 <__ieee754_rem_pio2+0x300>)
 8110e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e38:	4606      	mov	r6, r0
 8110e3a:	460f      	mov	r7, r1
 8110e3c:	f7ef faae 	bl	810039c <__adddf3>
 8110e40:	4602      	mov	r2, r0
 8110e42:	460b      	mov	r3, r1
 8110e44:	4680      	mov	r8, r0
 8110e46:	4689      	mov	r9, r1
 8110e48:	4630      	mov	r0, r6
 8110e4a:	4639      	mov	r1, r7
 8110e4c:	f7ef faa4 	bl	8100398 <__aeabi_dsub>
 8110e50:	a379      	add	r3, pc, #484	@ (adr r3, 8111038 <__ieee754_rem_pio2+0x300>)
 8110e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e56:	e7de      	b.n	8110e16 <__ieee754_rem_pio2+0xde>
 8110e58:	4b82      	ldr	r3, [pc, #520]	@ (8111064 <__ieee754_rem_pio2+0x32c>)
 8110e5a:	4598      	cmp	r8, r3
 8110e5c:	f200 80d1 	bhi.w	8111002 <__ieee754_rem_pio2+0x2ca>
 8110e60:	f000 f966 	bl	8111130 <fabs>
 8110e64:	ec57 6b10 	vmov	r6, r7, d0
 8110e68:	a375      	add	r3, pc, #468	@ (adr r3, 8111040 <__ieee754_rem_pio2+0x308>)
 8110e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e6e:	4630      	mov	r0, r6
 8110e70:	4639      	mov	r1, r7
 8110e72:	f7ef fc49 	bl	8100708 <__aeabi_dmul>
 8110e76:	4b7c      	ldr	r3, [pc, #496]	@ (8111068 <__ieee754_rem_pio2+0x330>)
 8110e78:	2200      	movs	r2, #0
 8110e7a:	f7ef fa8f 	bl	810039c <__adddf3>
 8110e7e:	f7ef fef3 	bl	8100c68 <__aeabi_d2iz>
 8110e82:	4605      	mov	r5, r0
 8110e84:	f7ef fbd6 	bl	8100634 <__aeabi_i2d>
 8110e88:	4602      	mov	r2, r0
 8110e8a:	460b      	mov	r3, r1
 8110e8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110e90:	a363      	add	r3, pc, #396	@ (adr r3, 8111020 <__ieee754_rem_pio2+0x2e8>)
 8110e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110e96:	f7ef fc37 	bl	8100708 <__aeabi_dmul>
 8110e9a:	4602      	mov	r2, r0
 8110e9c:	460b      	mov	r3, r1
 8110e9e:	4630      	mov	r0, r6
 8110ea0:	4639      	mov	r1, r7
 8110ea2:	f7ef fa79 	bl	8100398 <__aeabi_dsub>
 8110ea6:	a360      	add	r3, pc, #384	@ (adr r3, 8111028 <__ieee754_rem_pio2+0x2f0>)
 8110ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110eac:	4682      	mov	sl, r0
 8110eae:	468b      	mov	fp, r1
 8110eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110eb4:	f7ef fc28 	bl	8100708 <__aeabi_dmul>
 8110eb8:	2d1f      	cmp	r5, #31
 8110eba:	4606      	mov	r6, r0
 8110ebc:	460f      	mov	r7, r1
 8110ebe:	dc0c      	bgt.n	8110eda <__ieee754_rem_pio2+0x1a2>
 8110ec0:	4b6a      	ldr	r3, [pc, #424]	@ (811106c <__ieee754_rem_pio2+0x334>)
 8110ec2:	1e6a      	subs	r2, r5, #1
 8110ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8110ec8:	4543      	cmp	r3, r8
 8110eca:	d006      	beq.n	8110eda <__ieee754_rem_pio2+0x1a2>
 8110ecc:	4632      	mov	r2, r6
 8110ece:	463b      	mov	r3, r7
 8110ed0:	4650      	mov	r0, sl
 8110ed2:	4659      	mov	r1, fp
 8110ed4:	f7ef fa60 	bl	8100398 <__aeabi_dsub>
 8110ed8:	e00e      	b.n	8110ef8 <__ieee754_rem_pio2+0x1c0>
 8110eda:	463b      	mov	r3, r7
 8110edc:	4632      	mov	r2, r6
 8110ede:	4650      	mov	r0, sl
 8110ee0:	4659      	mov	r1, fp
 8110ee2:	f7ef fa59 	bl	8100398 <__aeabi_dsub>
 8110ee6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8110eea:	9305      	str	r3, [sp, #20]
 8110eec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8110ef0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8110ef4:	2b10      	cmp	r3, #16
 8110ef6:	dc02      	bgt.n	8110efe <__ieee754_rem_pio2+0x1c6>
 8110ef8:	e9c4 0100 	strd	r0, r1, [r4]
 8110efc:	e039      	b.n	8110f72 <__ieee754_rem_pio2+0x23a>
 8110efe:	a34c      	add	r3, pc, #304	@ (adr r3, 8111030 <__ieee754_rem_pio2+0x2f8>)
 8110f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110f08:	f7ef fbfe 	bl	8100708 <__aeabi_dmul>
 8110f0c:	4606      	mov	r6, r0
 8110f0e:	460f      	mov	r7, r1
 8110f10:	4602      	mov	r2, r0
 8110f12:	460b      	mov	r3, r1
 8110f14:	4650      	mov	r0, sl
 8110f16:	4659      	mov	r1, fp
 8110f18:	f7ef fa3e 	bl	8100398 <__aeabi_dsub>
 8110f1c:	4602      	mov	r2, r0
 8110f1e:	460b      	mov	r3, r1
 8110f20:	4680      	mov	r8, r0
 8110f22:	4689      	mov	r9, r1
 8110f24:	4650      	mov	r0, sl
 8110f26:	4659      	mov	r1, fp
 8110f28:	f7ef fa36 	bl	8100398 <__aeabi_dsub>
 8110f2c:	4632      	mov	r2, r6
 8110f2e:	463b      	mov	r3, r7
 8110f30:	f7ef fa32 	bl	8100398 <__aeabi_dsub>
 8110f34:	a340      	add	r3, pc, #256	@ (adr r3, 8111038 <__ieee754_rem_pio2+0x300>)
 8110f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110f3a:	4606      	mov	r6, r0
 8110f3c:	460f      	mov	r7, r1
 8110f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110f42:	f7ef fbe1 	bl	8100708 <__aeabi_dmul>
 8110f46:	4632      	mov	r2, r6
 8110f48:	463b      	mov	r3, r7
 8110f4a:	f7ef fa25 	bl	8100398 <__aeabi_dsub>
 8110f4e:	4602      	mov	r2, r0
 8110f50:	460b      	mov	r3, r1
 8110f52:	4606      	mov	r6, r0
 8110f54:	460f      	mov	r7, r1
 8110f56:	4640      	mov	r0, r8
 8110f58:	4649      	mov	r1, r9
 8110f5a:	f7ef fa1d 	bl	8100398 <__aeabi_dsub>
 8110f5e:	9a05      	ldr	r2, [sp, #20]
 8110f60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8110f64:	1ad3      	subs	r3, r2, r3
 8110f66:	2b31      	cmp	r3, #49	@ 0x31
 8110f68:	dc20      	bgt.n	8110fac <__ieee754_rem_pio2+0x274>
 8110f6a:	e9c4 0100 	strd	r0, r1, [r4]
 8110f6e:	46c2      	mov	sl, r8
 8110f70:	46cb      	mov	fp, r9
 8110f72:	e9d4 8900 	ldrd	r8, r9, [r4]
 8110f76:	4650      	mov	r0, sl
 8110f78:	4642      	mov	r2, r8
 8110f7a:	464b      	mov	r3, r9
 8110f7c:	4659      	mov	r1, fp
 8110f7e:	f7ef fa0b 	bl	8100398 <__aeabi_dsub>
 8110f82:	463b      	mov	r3, r7
 8110f84:	4632      	mov	r2, r6
 8110f86:	f7ef fa07 	bl	8100398 <__aeabi_dsub>
 8110f8a:	9b04      	ldr	r3, [sp, #16]
 8110f8c:	2b00      	cmp	r3, #0
 8110f8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8110f92:	f6bf af0e 	bge.w	8110db2 <__ieee754_rem_pio2+0x7a>
 8110f96:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8110f9a:	6063      	str	r3, [r4, #4]
 8110f9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8110fa0:	f8c4 8000 	str.w	r8, [r4]
 8110fa4:	60a0      	str	r0, [r4, #8]
 8110fa6:	60e3      	str	r3, [r4, #12]
 8110fa8:	426d      	negs	r5, r5
 8110faa:	e702      	b.n	8110db2 <__ieee754_rem_pio2+0x7a>
 8110fac:	a326      	add	r3, pc, #152	@ (adr r3, 8111048 <__ieee754_rem_pio2+0x310>)
 8110fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110fb6:	f7ef fba7 	bl	8100708 <__aeabi_dmul>
 8110fba:	4606      	mov	r6, r0
 8110fbc:	460f      	mov	r7, r1
 8110fbe:	4602      	mov	r2, r0
 8110fc0:	460b      	mov	r3, r1
 8110fc2:	4640      	mov	r0, r8
 8110fc4:	4649      	mov	r1, r9
 8110fc6:	f7ef f9e7 	bl	8100398 <__aeabi_dsub>
 8110fca:	4602      	mov	r2, r0
 8110fcc:	460b      	mov	r3, r1
 8110fce:	4682      	mov	sl, r0
 8110fd0:	468b      	mov	fp, r1
 8110fd2:	4640      	mov	r0, r8
 8110fd4:	4649      	mov	r1, r9
 8110fd6:	f7ef f9df 	bl	8100398 <__aeabi_dsub>
 8110fda:	4632      	mov	r2, r6
 8110fdc:	463b      	mov	r3, r7
 8110fde:	f7ef f9db 	bl	8100398 <__aeabi_dsub>
 8110fe2:	a31b      	add	r3, pc, #108	@ (adr r3, 8111050 <__ieee754_rem_pio2+0x318>)
 8110fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110fe8:	4606      	mov	r6, r0
 8110fea:	460f      	mov	r7, r1
 8110fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110ff0:	f7ef fb8a 	bl	8100708 <__aeabi_dmul>
 8110ff4:	4632      	mov	r2, r6
 8110ff6:	463b      	mov	r3, r7
 8110ff8:	f7ef f9ce 	bl	8100398 <__aeabi_dsub>
 8110ffc:	4606      	mov	r6, r0
 8110ffe:	460f      	mov	r7, r1
 8111000:	e764      	b.n	8110ecc <__ieee754_rem_pio2+0x194>
 8111002:	4b1b      	ldr	r3, [pc, #108]	@ (8111070 <__ieee754_rem_pio2+0x338>)
 8111004:	4598      	cmp	r8, r3
 8111006:	d935      	bls.n	8111074 <__ieee754_rem_pio2+0x33c>
 8111008:	4632      	mov	r2, r6
 811100a:	463b      	mov	r3, r7
 811100c:	4630      	mov	r0, r6
 811100e:	4639      	mov	r1, r7
 8111010:	f7ef f9c2 	bl	8100398 <__aeabi_dsub>
 8111014:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8111018:	e9c4 0100 	strd	r0, r1, [r4]
 811101c:	e69e      	b.n	8110d5c <__ieee754_rem_pio2+0x24>
 811101e:	bf00      	nop
 8111020:	54400000 	.word	0x54400000
 8111024:	3ff921fb 	.word	0x3ff921fb
 8111028:	1a626331 	.word	0x1a626331
 811102c:	3dd0b461 	.word	0x3dd0b461
 8111030:	1a600000 	.word	0x1a600000
 8111034:	3dd0b461 	.word	0x3dd0b461
 8111038:	2e037073 	.word	0x2e037073
 811103c:	3ba3198a 	.word	0x3ba3198a
 8111040:	6dc9c883 	.word	0x6dc9c883
 8111044:	3fe45f30 	.word	0x3fe45f30
 8111048:	2e000000 	.word	0x2e000000
 811104c:	3ba3198a 	.word	0x3ba3198a
 8111050:	252049c1 	.word	0x252049c1
 8111054:	397b839a 	.word	0x397b839a
 8111058:	3fe921fb 	.word	0x3fe921fb
 811105c:	4002d97b 	.word	0x4002d97b
 8111060:	3ff921fb 	.word	0x3ff921fb
 8111064:	413921fb 	.word	0x413921fb
 8111068:	3fe00000 	.word	0x3fe00000
 811106c:	08112448 	.word	0x08112448
 8111070:	7fefffff 	.word	0x7fefffff
 8111074:	ea4f 5528 	mov.w	r5, r8, asr #20
 8111078:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 811107c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8111080:	4630      	mov	r0, r6
 8111082:	460f      	mov	r7, r1
 8111084:	f7ef fdf0 	bl	8100c68 <__aeabi_d2iz>
 8111088:	f7ef fad4 	bl	8100634 <__aeabi_i2d>
 811108c:	4602      	mov	r2, r0
 811108e:	460b      	mov	r3, r1
 8111090:	4630      	mov	r0, r6
 8111092:	4639      	mov	r1, r7
 8111094:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8111098:	f7ef f97e 	bl	8100398 <__aeabi_dsub>
 811109c:	4b22      	ldr	r3, [pc, #136]	@ (8111128 <__ieee754_rem_pio2+0x3f0>)
 811109e:	2200      	movs	r2, #0
 81110a0:	f7ef fb32 	bl	8100708 <__aeabi_dmul>
 81110a4:	460f      	mov	r7, r1
 81110a6:	4606      	mov	r6, r0
 81110a8:	f7ef fdde 	bl	8100c68 <__aeabi_d2iz>
 81110ac:	f7ef fac2 	bl	8100634 <__aeabi_i2d>
 81110b0:	4602      	mov	r2, r0
 81110b2:	460b      	mov	r3, r1
 81110b4:	4630      	mov	r0, r6
 81110b6:	4639      	mov	r1, r7
 81110b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81110bc:	f7ef f96c 	bl	8100398 <__aeabi_dsub>
 81110c0:	4b19      	ldr	r3, [pc, #100]	@ (8111128 <__ieee754_rem_pio2+0x3f0>)
 81110c2:	2200      	movs	r2, #0
 81110c4:	f7ef fb20 	bl	8100708 <__aeabi_dmul>
 81110c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 81110cc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 81110d0:	f04f 0803 	mov.w	r8, #3
 81110d4:	2600      	movs	r6, #0
 81110d6:	2700      	movs	r7, #0
 81110d8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 81110dc:	4632      	mov	r2, r6
 81110de:	463b      	mov	r3, r7
 81110e0:	46c2      	mov	sl, r8
 81110e2:	f108 38ff 	add.w	r8, r8, #4294967295
 81110e6:	f7ef fd77 	bl	8100bd8 <__aeabi_dcmpeq>
 81110ea:	2800      	cmp	r0, #0
 81110ec:	d1f4      	bne.n	81110d8 <__ieee754_rem_pio2+0x3a0>
 81110ee:	4b0f      	ldr	r3, [pc, #60]	@ (811112c <__ieee754_rem_pio2+0x3f4>)
 81110f0:	9301      	str	r3, [sp, #4]
 81110f2:	2302      	movs	r3, #2
 81110f4:	9300      	str	r3, [sp, #0]
 81110f6:	462a      	mov	r2, r5
 81110f8:	4653      	mov	r3, sl
 81110fa:	4621      	mov	r1, r4
 81110fc:	a806      	add	r0, sp, #24
 81110fe:	f000 f81f 	bl	8111140 <__kernel_rem_pio2>
 8111102:	9b04      	ldr	r3, [sp, #16]
 8111104:	2b00      	cmp	r3, #0
 8111106:	4605      	mov	r5, r0
 8111108:	f6bf ae53 	bge.w	8110db2 <__ieee754_rem_pio2+0x7a>
 811110c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8111110:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8111114:	e9c4 2300 	strd	r2, r3, [r4]
 8111118:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 811111c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8111120:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8111124:	e740      	b.n	8110fa8 <__ieee754_rem_pio2+0x270>
 8111126:	bf00      	nop
 8111128:	41700000 	.word	0x41700000
 811112c:	081124c8 	.word	0x081124c8

08111130 <fabs>:
 8111130:	ec51 0b10 	vmov	r0, r1, d0
 8111134:	4602      	mov	r2, r0
 8111136:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 811113a:	ec43 2b10 	vmov	d0, r2, r3
 811113e:	4770      	bx	lr

08111140 <__kernel_rem_pio2>:
 8111140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111144:	ed2d 8b02 	vpush	{d8}
 8111148:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 811114c:	f112 0f14 	cmn.w	r2, #20
 8111150:	9306      	str	r3, [sp, #24]
 8111152:	9104      	str	r1, [sp, #16]
 8111154:	4bbe      	ldr	r3, [pc, #760]	@ (8111450 <__kernel_rem_pio2+0x310>)
 8111156:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8111158:	9008      	str	r0, [sp, #32]
 811115a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 811115e:	9300      	str	r3, [sp, #0]
 8111160:	9b06      	ldr	r3, [sp, #24]
 8111162:	f103 33ff 	add.w	r3, r3, #4294967295
 8111166:	bfa8      	it	ge
 8111168:	1ed4      	subge	r4, r2, #3
 811116a:	9305      	str	r3, [sp, #20]
 811116c:	bfb2      	itee	lt
 811116e:	2400      	movlt	r4, #0
 8111170:	2318      	movge	r3, #24
 8111172:	fb94 f4f3 	sdivge	r4, r4, r3
 8111176:	f06f 0317 	mvn.w	r3, #23
 811117a:	fb04 3303 	mla	r3, r4, r3, r3
 811117e:	eb03 0b02 	add.w	fp, r3, r2
 8111182:	9b00      	ldr	r3, [sp, #0]
 8111184:	9a05      	ldr	r2, [sp, #20]
 8111186:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8111440 <__kernel_rem_pio2+0x300>
 811118a:	eb03 0802 	add.w	r8, r3, r2
 811118e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8111190:	1aa7      	subs	r7, r4, r2
 8111192:	ae20      	add	r6, sp, #128	@ 0x80
 8111194:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8111198:	2500      	movs	r5, #0
 811119a:	4545      	cmp	r5, r8
 811119c:	dd13      	ble.n	81111c6 <__kernel_rem_pio2+0x86>
 811119e:	9b06      	ldr	r3, [sp, #24]
 81111a0:	aa20      	add	r2, sp, #128	@ 0x80
 81111a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 81111a6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 81111aa:	f04f 0800 	mov.w	r8, #0
 81111ae:	9b00      	ldr	r3, [sp, #0]
 81111b0:	4598      	cmp	r8, r3
 81111b2:	dc31      	bgt.n	8111218 <__kernel_rem_pio2+0xd8>
 81111b4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8111440 <__kernel_rem_pio2+0x300>
 81111b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 81111bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 81111c0:	462f      	mov	r7, r5
 81111c2:	2600      	movs	r6, #0
 81111c4:	e01b      	b.n	81111fe <__kernel_rem_pio2+0xbe>
 81111c6:	42ef      	cmn	r7, r5
 81111c8:	d407      	bmi.n	81111da <__kernel_rem_pio2+0x9a>
 81111ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 81111ce:	f7ef fa31 	bl	8100634 <__aeabi_i2d>
 81111d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 81111d6:	3501      	adds	r5, #1
 81111d8:	e7df      	b.n	811119a <__kernel_rem_pio2+0x5a>
 81111da:	ec51 0b18 	vmov	r0, r1, d8
 81111de:	e7f8      	b.n	81111d2 <__kernel_rem_pio2+0x92>
 81111e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81111e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 81111e8:	f7ef fa8e 	bl	8100708 <__aeabi_dmul>
 81111ec:	4602      	mov	r2, r0
 81111ee:	460b      	mov	r3, r1
 81111f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81111f4:	f7ef f8d2 	bl	810039c <__adddf3>
 81111f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81111fc:	3601      	adds	r6, #1
 81111fe:	9b05      	ldr	r3, [sp, #20]
 8111200:	429e      	cmp	r6, r3
 8111202:	f1a7 0708 	sub.w	r7, r7, #8
 8111206:	ddeb      	ble.n	81111e0 <__kernel_rem_pio2+0xa0>
 8111208:	ed9d 7b02 	vldr	d7, [sp, #8]
 811120c:	f108 0801 	add.w	r8, r8, #1
 8111210:	ecaa 7b02 	vstmia	sl!, {d7}
 8111214:	3508      	adds	r5, #8
 8111216:	e7ca      	b.n	81111ae <__kernel_rem_pio2+0x6e>
 8111218:	9b00      	ldr	r3, [sp, #0]
 811121a:	f8dd 8000 	ldr.w	r8, [sp]
 811121e:	aa0c      	add	r2, sp, #48	@ 0x30
 8111220:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8111224:	930a      	str	r3, [sp, #40]	@ 0x28
 8111226:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8111228:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 811122c:	9309      	str	r3, [sp, #36]	@ 0x24
 811122e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8111232:	930b      	str	r3, [sp, #44]	@ 0x2c
 8111234:	ab98      	add	r3, sp, #608	@ 0x260
 8111236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 811123a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 811123e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8111242:	ac0c      	add	r4, sp, #48	@ 0x30
 8111244:	ab70      	add	r3, sp, #448	@ 0x1c0
 8111246:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 811124a:	46a1      	mov	r9, r4
 811124c:	46c2      	mov	sl, r8
 811124e:	f1ba 0f00 	cmp.w	sl, #0
 8111252:	f1a5 0508 	sub.w	r5, r5, #8
 8111256:	dc77      	bgt.n	8111348 <__kernel_rem_pio2+0x208>
 8111258:	4658      	mov	r0, fp
 811125a:	ed9d 0b02 	vldr	d0, [sp, #8]
 811125e:	f000 fac7 	bl	81117f0 <scalbn>
 8111262:	ec57 6b10 	vmov	r6, r7, d0
 8111266:	2200      	movs	r2, #0
 8111268:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 811126c:	4630      	mov	r0, r6
 811126e:	4639      	mov	r1, r7
 8111270:	f7ef fa4a 	bl	8100708 <__aeabi_dmul>
 8111274:	ec41 0b10 	vmov	d0, r0, r1
 8111278:	f000 fb3a 	bl	81118f0 <floor>
 811127c:	4b75      	ldr	r3, [pc, #468]	@ (8111454 <__kernel_rem_pio2+0x314>)
 811127e:	ec51 0b10 	vmov	r0, r1, d0
 8111282:	2200      	movs	r2, #0
 8111284:	f7ef fa40 	bl	8100708 <__aeabi_dmul>
 8111288:	4602      	mov	r2, r0
 811128a:	460b      	mov	r3, r1
 811128c:	4630      	mov	r0, r6
 811128e:	4639      	mov	r1, r7
 8111290:	f7ef f882 	bl	8100398 <__aeabi_dsub>
 8111294:	460f      	mov	r7, r1
 8111296:	4606      	mov	r6, r0
 8111298:	f7ef fce6 	bl	8100c68 <__aeabi_d2iz>
 811129c:	9002      	str	r0, [sp, #8]
 811129e:	f7ef f9c9 	bl	8100634 <__aeabi_i2d>
 81112a2:	4602      	mov	r2, r0
 81112a4:	460b      	mov	r3, r1
 81112a6:	4630      	mov	r0, r6
 81112a8:	4639      	mov	r1, r7
 81112aa:	f7ef f875 	bl	8100398 <__aeabi_dsub>
 81112ae:	f1bb 0f00 	cmp.w	fp, #0
 81112b2:	4606      	mov	r6, r0
 81112b4:	460f      	mov	r7, r1
 81112b6:	dd6c      	ble.n	8111392 <__kernel_rem_pio2+0x252>
 81112b8:	f108 31ff 	add.w	r1, r8, #4294967295
 81112bc:	ab0c      	add	r3, sp, #48	@ 0x30
 81112be:	9d02      	ldr	r5, [sp, #8]
 81112c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 81112c4:	f1cb 0018 	rsb	r0, fp, #24
 81112c8:	fa43 f200 	asr.w	r2, r3, r0
 81112cc:	4415      	add	r5, r2
 81112ce:	4082      	lsls	r2, r0
 81112d0:	1a9b      	subs	r3, r3, r2
 81112d2:	aa0c      	add	r2, sp, #48	@ 0x30
 81112d4:	9502      	str	r5, [sp, #8]
 81112d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 81112da:	f1cb 0217 	rsb	r2, fp, #23
 81112de:	fa43 f902 	asr.w	r9, r3, r2
 81112e2:	f1b9 0f00 	cmp.w	r9, #0
 81112e6:	dd64      	ble.n	81113b2 <__kernel_rem_pio2+0x272>
 81112e8:	9b02      	ldr	r3, [sp, #8]
 81112ea:	2200      	movs	r2, #0
 81112ec:	3301      	adds	r3, #1
 81112ee:	9302      	str	r3, [sp, #8]
 81112f0:	4615      	mov	r5, r2
 81112f2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 81112f6:	4590      	cmp	r8, r2
 81112f8:	f300 80b8 	bgt.w	811146c <__kernel_rem_pio2+0x32c>
 81112fc:	f1bb 0f00 	cmp.w	fp, #0
 8111300:	dd07      	ble.n	8111312 <__kernel_rem_pio2+0x1d2>
 8111302:	f1bb 0f01 	cmp.w	fp, #1
 8111306:	f000 80bf 	beq.w	8111488 <__kernel_rem_pio2+0x348>
 811130a:	f1bb 0f02 	cmp.w	fp, #2
 811130e:	f000 80c6 	beq.w	811149e <__kernel_rem_pio2+0x35e>
 8111312:	f1b9 0f02 	cmp.w	r9, #2
 8111316:	d14c      	bne.n	81113b2 <__kernel_rem_pio2+0x272>
 8111318:	4632      	mov	r2, r6
 811131a:	463b      	mov	r3, r7
 811131c:	494e      	ldr	r1, [pc, #312]	@ (8111458 <__kernel_rem_pio2+0x318>)
 811131e:	2000      	movs	r0, #0
 8111320:	f7ef f83a 	bl	8100398 <__aeabi_dsub>
 8111324:	4606      	mov	r6, r0
 8111326:	460f      	mov	r7, r1
 8111328:	2d00      	cmp	r5, #0
 811132a:	d042      	beq.n	81113b2 <__kernel_rem_pio2+0x272>
 811132c:	4658      	mov	r0, fp
 811132e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8111448 <__kernel_rem_pio2+0x308>
 8111332:	f000 fa5d 	bl	81117f0 <scalbn>
 8111336:	4630      	mov	r0, r6
 8111338:	4639      	mov	r1, r7
 811133a:	ec53 2b10 	vmov	r2, r3, d0
 811133e:	f7ef f82b 	bl	8100398 <__aeabi_dsub>
 8111342:	4606      	mov	r6, r0
 8111344:	460f      	mov	r7, r1
 8111346:	e034      	b.n	81113b2 <__kernel_rem_pio2+0x272>
 8111348:	4b44      	ldr	r3, [pc, #272]	@ (811145c <__kernel_rem_pio2+0x31c>)
 811134a:	2200      	movs	r2, #0
 811134c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8111350:	f7ef f9da 	bl	8100708 <__aeabi_dmul>
 8111354:	f7ef fc88 	bl	8100c68 <__aeabi_d2iz>
 8111358:	f7ef f96c 	bl	8100634 <__aeabi_i2d>
 811135c:	4b40      	ldr	r3, [pc, #256]	@ (8111460 <__kernel_rem_pio2+0x320>)
 811135e:	2200      	movs	r2, #0
 8111360:	4606      	mov	r6, r0
 8111362:	460f      	mov	r7, r1
 8111364:	f7ef f9d0 	bl	8100708 <__aeabi_dmul>
 8111368:	4602      	mov	r2, r0
 811136a:	460b      	mov	r3, r1
 811136c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8111370:	f7ef f812 	bl	8100398 <__aeabi_dsub>
 8111374:	f7ef fc78 	bl	8100c68 <__aeabi_d2iz>
 8111378:	e9d5 2300 	ldrd	r2, r3, [r5]
 811137c:	f849 0b04 	str.w	r0, [r9], #4
 8111380:	4639      	mov	r1, r7
 8111382:	4630      	mov	r0, r6
 8111384:	f7ef f80a 	bl	810039c <__adddf3>
 8111388:	f10a 3aff 	add.w	sl, sl, #4294967295
 811138c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111390:	e75d      	b.n	811124e <__kernel_rem_pio2+0x10e>
 8111392:	d107      	bne.n	81113a4 <__kernel_rem_pio2+0x264>
 8111394:	f108 33ff 	add.w	r3, r8, #4294967295
 8111398:	aa0c      	add	r2, sp, #48	@ 0x30
 811139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811139e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 81113a2:	e79e      	b.n	81112e2 <__kernel_rem_pio2+0x1a2>
 81113a4:	4b2f      	ldr	r3, [pc, #188]	@ (8111464 <__kernel_rem_pio2+0x324>)
 81113a6:	2200      	movs	r2, #0
 81113a8:	f7ef fc34 	bl	8100c14 <__aeabi_dcmpge>
 81113ac:	2800      	cmp	r0, #0
 81113ae:	d143      	bne.n	8111438 <__kernel_rem_pio2+0x2f8>
 81113b0:	4681      	mov	r9, r0
 81113b2:	2200      	movs	r2, #0
 81113b4:	2300      	movs	r3, #0
 81113b6:	4630      	mov	r0, r6
 81113b8:	4639      	mov	r1, r7
 81113ba:	f7ef fc0d 	bl	8100bd8 <__aeabi_dcmpeq>
 81113be:	2800      	cmp	r0, #0
 81113c0:	f000 80bf 	beq.w	8111542 <__kernel_rem_pio2+0x402>
 81113c4:	f108 33ff 	add.w	r3, r8, #4294967295
 81113c8:	2200      	movs	r2, #0
 81113ca:	9900      	ldr	r1, [sp, #0]
 81113cc:	428b      	cmp	r3, r1
 81113ce:	da6e      	bge.n	81114ae <__kernel_rem_pio2+0x36e>
 81113d0:	2a00      	cmp	r2, #0
 81113d2:	f000 8089 	beq.w	81114e8 <__kernel_rem_pio2+0x3a8>
 81113d6:	f108 38ff 	add.w	r8, r8, #4294967295
 81113da:	ab0c      	add	r3, sp, #48	@ 0x30
 81113dc:	f1ab 0b18 	sub.w	fp, fp, #24
 81113e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 81113e4:	2b00      	cmp	r3, #0
 81113e6:	d0f6      	beq.n	81113d6 <__kernel_rem_pio2+0x296>
 81113e8:	4658      	mov	r0, fp
 81113ea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8111448 <__kernel_rem_pio2+0x308>
 81113ee:	f000 f9ff 	bl	81117f0 <scalbn>
 81113f2:	f108 0301 	add.w	r3, r8, #1
 81113f6:	00da      	lsls	r2, r3, #3
 81113f8:	9205      	str	r2, [sp, #20]
 81113fa:	ec55 4b10 	vmov	r4, r5, d0
 81113fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8111400:	f8df b058 	ldr.w	fp, [pc, #88]	@ 811145c <__kernel_rem_pio2+0x31c>
 8111404:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8111408:	4646      	mov	r6, r8
 811140a:	f04f 0a00 	mov.w	sl, #0
 811140e:	2e00      	cmp	r6, #0
 8111410:	f280 80cf 	bge.w	81115b2 <__kernel_rem_pio2+0x472>
 8111414:	4644      	mov	r4, r8
 8111416:	2c00      	cmp	r4, #0
 8111418:	f2c0 80fd 	blt.w	8111616 <__kernel_rem_pio2+0x4d6>
 811141c:	4b12      	ldr	r3, [pc, #72]	@ (8111468 <__kernel_rem_pio2+0x328>)
 811141e:	461f      	mov	r7, r3
 8111420:	ab70      	add	r3, sp, #448	@ 0x1c0
 8111422:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8111426:	9306      	str	r3, [sp, #24]
 8111428:	f04f 0a00 	mov.w	sl, #0
 811142c:	f04f 0b00 	mov.w	fp, #0
 8111430:	2600      	movs	r6, #0
 8111432:	eba8 0504 	sub.w	r5, r8, r4
 8111436:	e0e2      	b.n	81115fe <__kernel_rem_pio2+0x4be>
 8111438:	f04f 0902 	mov.w	r9, #2
 811143c:	e754      	b.n	81112e8 <__kernel_rem_pio2+0x1a8>
 811143e:	bf00      	nop
	...
 811144c:	3ff00000 	.word	0x3ff00000
 8111450:	08112610 	.word	0x08112610
 8111454:	40200000 	.word	0x40200000
 8111458:	3ff00000 	.word	0x3ff00000
 811145c:	3e700000 	.word	0x3e700000
 8111460:	41700000 	.word	0x41700000
 8111464:	3fe00000 	.word	0x3fe00000
 8111468:	081125d0 	.word	0x081125d0
 811146c:	f854 3b04 	ldr.w	r3, [r4], #4
 8111470:	b945      	cbnz	r5, 8111484 <__kernel_rem_pio2+0x344>
 8111472:	b123      	cbz	r3, 811147e <__kernel_rem_pio2+0x33e>
 8111474:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8111478:	f844 3c04 	str.w	r3, [r4, #-4]
 811147c:	2301      	movs	r3, #1
 811147e:	3201      	adds	r2, #1
 8111480:	461d      	mov	r5, r3
 8111482:	e738      	b.n	81112f6 <__kernel_rem_pio2+0x1b6>
 8111484:	1acb      	subs	r3, r1, r3
 8111486:	e7f7      	b.n	8111478 <__kernel_rem_pio2+0x338>
 8111488:	f108 32ff 	add.w	r2, r8, #4294967295
 811148c:	ab0c      	add	r3, sp, #48	@ 0x30
 811148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8111492:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8111496:	a90c      	add	r1, sp, #48	@ 0x30
 8111498:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 811149c:	e739      	b.n	8111312 <__kernel_rem_pio2+0x1d2>
 811149e:	f108 32ff 	add.w	r2, r8, #4294967295
 81114a2:	ab0c      	add	r3, sp, #48	@ 0x30
 81114a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81114a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 81114ac:	e7f3      	b.n	8111496 <__kernel_rem_pio2+0x356>
 81114ae:	a90c      	add	r1, sp, #48	@ 0x30
 81114b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 81114b4:	3b01      	subs	r3, #1
 81114b6:	430a      	orrs	r2, r1
 81114b8:	e787      	b.n	81113ca <__kernel_rem_pio2+0x28a>
 81114ba:	3401      	adds	r4, #1
 81114bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 81114c0:	2a00      	cmp	r2, #0
 81114c2:	d0fa      	beq.n	81114ba <__kernel_rem_pio2+0x37a>
 81114c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81114c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 81114ca:	eb0d 0503 	add.w	r5, sp, r3
 81114ce:	9b06      	ldr	r3, [sp, #24]
 81114d0:	aa20      	add	r2, sp, #128	@ 0x80
 81114d2:	4443      	add	r3, r8
 81114d4:	f108 0701 	add.w	r7, r8, #1
 81114d8:	3d98      	subs	r5, #152	@ 0x98
 81114da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 81114de:	4444      	add	r4, r8
 81114e0:	42bc      	cmp	r4, r7
 81114e2:	da04      	bge.n	81114ee <__kernel_rem_pio2+0x3ae>
 81114e4:	46a0      	mov	r8, r4
 81114e6:	e6a2      	b.n	811122e <__kernel_rem_pio2+0xee>
 81114e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81114ea:	2401      	movs	r4, #1
 81114ec:	e7e6      	b.n	81114bc <__kernel_rem_pio2+0x37c>
 81114ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81114f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 81114f4:	f7ef f89e 	bl	8100634 <__aeabi_i2d>
 81114f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 81117c0 <__kernel_rem_pio2+0x680>
 81114fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8111500:	ed8d 7b02 	vstr	d7, [sp, #8]
 8111504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8111508:	46b2      	mov	sl, r6
 811150a:	f04f 0800 	mov.w	r8, #0
 811150e:	9b05      	ldr	r3, [sp, #20]
 8111510:	4598      	cmp	r8, r3
 8111512:	dd05      	ble.n	8111520 <__kernel_rem_pio2+0x3e0>
 8111514:	ed9d 7b02 	vldr	d7, [sp, #8]
 8111518:	3701      	adds	r7, #1
 811151a:	eca5 7b02 	vstmia	r5!, {d7}
 811151e:	e7df      	b.n	81114e0 <__kernel_rem_pio2+0x3a0>
 8111520:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8111524:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8111528:	f7ef f8ee 	bl	8100708 <__aeabi_dmul>
 811152c:	4602      	mov	r2, r0
 811152e:	460b      	mov	r3, r1
 8111530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8111534:	f7ee ff32 	bl	810039c <__adddf3>
 8111538:	f108 0801 	add.w	r8, r8, #1
 811153c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111540:	e7e5      	b.n	811150e <__kernel_rem_pio2+0x3ce>
 8111542:	f1cb 0000 	rsb	r0, fp, #0
 8111546:	ec47 6b10 	vmov	d0, r6, r7
 811154a:	f000 f951 	bl	81117f0 <scalbn>
 811154e:	ec55 4b10 	vmov	r4, r5, d0
 8111552:	4b9d      	ldr	r3, [pc, #628]	@ (81117c8 <__kernel_rem_pio2+0x688>)
 8111554:	2200      	movs	r2, #0
 8111556:	4620      	mov	r0, r4
 8111558:	4629      	mov	r1, r5
 811155a:	f7ef fb5b 	bl	8100c14 <__aeabi_dcmpge>
 811155e:	b300      	cbz	r0, 81115a2 <__kernel_rem_pio2+0x462>
 8111560:	4b9a      	ldr	r3, [pc, #616]	@ (81117cc <__kernel_rem_pio2+0x68c>)
 8111562:	2200      	movs	r2, #0
 8111564:	4620      	mov	r0, r4
 8111566:	4629      	mov	r1, r5
 8111568:	f7ef f8ce 	bl	8100708 <__aeabi_dmul>
 811156c:	f7ef fb7c 	bl	8100c68 <__aeabi_d2iz>
 8111570:	4606      	mov	r6, r0
 8111572:	f7ef f85f 	bl	8100634 <__aeabi_i2d>
 8111576:	4b94      	ldr	r3, [pc, #592]	@ (81117c8 <__kernel_rem_pio2+0x688>)
 8111578:	2200      	movs	r2, #0
 811157a:	f7ef f8c5 	bl	8100708 <__aeabi_dmul>
 811157e:	460b      	mov	r3, r1
 8111580:	4602      	mov	r2, r0
 8111582:	4629      	mov	r1, r5
 8111584:	4620      	mov	r0, r4
 8111586:	f7ee ff07 	bl	8100398 <__aeabi_dsub>
 811158a:	f7ef fb6d 	bl	8100c68 <__aeabi_d2iz>
 811158e:	ab0c      	add	r3, sp, #48	@ 0x30
 8111590:	f10b 0b18 	add.w	fp, fp, #24
 8111594:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8111598:	f108 0801 	add.w	r8, r8, #1
 811159c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 81115a0:	e722      	b.n	81113e8 <__kernel_rem_pio2+0x2a8>
 81115a2:	4620      	mov	r0, r4
 81115a4:	4629      	mov	r1, r5
 81115a6:	f7ef fb5f 	bl	8100c68 <__aeabi_d2iz>
 81115aa:	ab0c      	add	r3, sp, #48	@ 0x30
 81115ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 81115b0:	e71a      	b.n	81113e8 <__kernel_rem_pio2+0x2a8>
 81115b2:	ab0c      	add	r3, sp, #48	@ 0x30
 81115b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 81115b8:	f7ef f83c 	bl	8100634 <__aeabi_i2d>
 81115bc:	4622      	mov	r2, r4
 81115be:	462b      	mov	r3, r5
 81115c0:	f7ef f8a2 	bl	8100708 <__aeabi_dmul>
 81115c4:	4652      	mov	r2, sl
 81115c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 81115ca:	465b      	mov	r3, fp
 81115cc:	4620      	mov	r0, r4
 81115ce:	4629      	mov	r1, r5
 81115d0:	f7ef f89a 	bl	8100708 <__aeabi_dmul>
 81115d4:	3e01      	subs	r6, #1
 81115d6:	4604      	mov	r4, r0
 81115d8:	460d      	mov	r5, r1
 81115da:	e718      	b.n	811140e <__kernel_rem_pio2+0x2ce>
 81115dc:	9906      	ldr	r1, [sp, #24]
 81115de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 81115e2:	9106      	str	r1, [sp, #24]
 81115e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 81115e8:	f7ef f88e 	bl	8100708 <__aeabi_dmul>
 81115ec:	4602      	mov	r2, r0
 81115ee:	460b      	mov	r3, r1
 81115f0:	4650      	mov	r0, sl
 81115f2:	4659      	mov	r1, fp
 81115f4:	f7ee fed2 	bl	810039c <__adddf3>
 81115f8:	3601      	adds	r6, #1
 81115fa:	4682      	mov	sl, r0
 81115fc:	468b      	mov	fp, r1
 81115fe:	9b00      	ldr	r3, [sp, #0]
 8111600:	429e      	cmp	r6, r3
 8111602:	dc01      	bgt.n	8111608 <__kernel_rem_pio2+0x4c8>
 8111604:	42b5      	cmp	r5, r6
 8111606:	dae9      	bge.n	81115dc <__kernel_rem_pio2+0x49c>
 8111608:	ab48      	add	r3, sp, #288	@ 0x120
 811160a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 811160e:	e9c5 ab00 	strd	sl, fp, [r5]
 8111612:	3c01      	subs	r4, #1
 8111614:	e6ff      	b.n	8111416 <__kernel_rem_pio2+0x2d6>
 8111616:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8111618:	2b02      	cmp	r3, #2
 811161a:	dc0b      	bgt.n	8111634 <__kernel_rem_pio2+0x4f4>
 811161c:	2b00      	cmp	r3, #0
 811161e:	dc39      	bgt.n	8111694 <__kernel_rem_pio2+0x554>
 8111620:	d05d      	beq.n	81116de <__kernel_rem_pio2+0x59e>
 8111622:	9b02      	ldr	r3, [sp, #8]
 8111624:	f003 0007 	and.w	r0, r3, #7
 8111628:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 811162c:	ecbd 8b02 	vpop	{d8}
 8111630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111634:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8111636:	2b03      	cmp	r3, #3
 8111638:	d1f3      	bne.n	8111622 <__kernel_rem_pio2+0x4e2>
 811163a:	9b05      	ldr	r3, [sp, #20]
 811163c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8111640:	eb0d 0403 	add.w	r4, sp, r3
 8111644:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8111648:	4625      	mov	r5, r4
 811164a:	46c2      	mov	sl, r8
 811164c:	f1ba 0f00 	cmp.w	sl, #0
 8111650:	f1a5 0508 	sub.w	r5, r5, #8
 8111654:	dc6b      	bgt.n	811172e <__kernel_rem_pio2+0x5ee>
 8111656:	4645      	mov	r5, r8
 8111658:	2d01      	cmp	r5, #1
 811165a:	f1a4 0408 	sub.w	r4, r4, #8
 811165e:	f300 8087 	bgt.w	8111770 <__kernel_rem_pio2+0x630>
 8111662:	9c05      	ldr	r4, [sp, #20]
 8111664:	ab48      	add	r3, sp, #288	@ 0x120
 8111666:	441c      	add	r4, r3
 8111668:	2000      	movs	r0, #0
 811166a:	2100      	movs	r1, #0
 811166c:	f1b8 0f01 	cmp.w	r8, #1
 8111670:	f300 809c 	bgt.w	81117ac <__kernel_rem_pio2+0x66c>
 8111674:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8111678:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 811167c:	f1b9 0f00 	cmp.w	r9, #0
 8111680:	f040 80a6 	bne.w	81117d0 <__kernel_rem_pio2+0x690>
 8111684:	9b04      	ldr	r3, [sp, #16]
 8111686:	e9c3 7800 	strd	r7, r8, [r3]
 811168a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 811168e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8111692:	e7c6      	b.n	8111622 <__kernel_rem_pio2+0x4e2>
 8111694:	9d05      	ldr	r5, [sp, #20]
 8111696:	ab48      	add	r3, sp, #288	@ 0x120
 8111698:	441d      	add	r5, r3
 811169a:	4644      	mov	r4, r8
 811169c:	2000      	movs	r0, #0
 811169e:	2100      	movs	r1, #0
 81116a0:	2c00      	cmp	r4, #0
 81116a2:	da35      	bge.n	8111710 <__kernel_rem_pio2+0x5d0>
 81116a4:	f1b9 0f00 	cmp.w	r9, #0
 81116a8:	d038      	beq.n	811171c <__kernel_rem_pio2+0x5dc>
 81116aa:	4602      	mov	r2, r0
 81116ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81116b0:	9c04      	ldr	r4, [sp, #16]
 81116b2:	e9c4 2300 	strd	r2, r3, [r4]
 81116b6:	4602      	mov	r2, r0
 81116b8:	460b      	mov	r3, r1
 81116ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 81116be:	f7ee fe6b 	bl	8100398 <__aeabi_dsub>
 81116c2:	ad4a      	add	r5, sp, #296	@ 0x128
 81116c4:	2401      	movs	r4, #1
 81116c6:	45a0      	cmp	r8, r4
 81116c8:	da2b      	bge.n	8111722 <__kernel_rem_pio2+0x5e2>
 81116ca:	f1b9 0f00 	cmp.w	r9, #0
 81116ce:	d002      	beq.n	81116d6 <__kernel_rem_pio2+0x596>
 81116d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81116d4:	4619      	mov	r1, r3
 81116d6:	9b04      	ldr	r3, [sp, #16]
 81116d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 81116dc:	e7a1      	b.n	8111622 <__kernel_rem_pio2+0x4e2>
 81116de:	9c05      	ldr	r4, [sp, #20]
 81116e0:	ab48      	add	r3, sp, #288	@ 0x120
 81116e2:	441c      	add	r4, r3
 81116e4:	2000      	movs	r0, #0
 81116e6:	2100      	movs	r1, #0
 81116e8:	f1b8 0f00 	cmp.w	r8, #0
 81116ec:	da09      	bge.n	8111702 <__kernel_rem_pio2+0x5c2>
 81116ee:	f1b9 0f00 	cmp.w	r9, #0
 81116f2:	d002      	beq.n	81116fa <__kernel_rem_pio2+0x5ba>
 81116f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81116f8:	4619      	mov	r1, r3
 81116fa:	9b04      	ldr	r3, [sp, #16]
 81116fc:	e9c3 0100 	strd	r0, r1, [r3]
 8111700:	e78f      	b.n	8111622 <__kernel_rem_pio2+0x4e2>
 8111702:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8111706:	f7ee fe49 	bl	810039c <__adddf3>
 811170a:	f108 38ff 	add.w	r8, r8, #4294967295
 811170e:	e7eb      	b.n	81116e8 <__kernel_rem_pio2+0x5a8>
 8111710:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8111714:	f7ee fe42 	bl	810039c <__adddf3>
 8111718:	3c01      	subs	r4, #1
 811171a:	e7c1      	b.n	81116a0 <__kernel_rem_pio2+0x560>
 811171c:	4602      	mov	r2, r0
 811171e:	460b      	mov	r3, r1
 8111720:	e7c6      	b.n	81116b0 <__kernel_rem_pio2+0x570>
 8111722:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8111726:	f7ee fe39 	bl	810039c <__adddf3>
 811172a:	3401      	adds	r4, #1
 811172c:	e7cb      	b.n	81116c6 <__kernel_rem_pio2+0x586>
 811172e:	ed95 7b00 	vldr	d7, [r5]
 8111732:	ed8d 7b00 	vstr	d7, [sp]
 8111736:	ed95 7b02 	vldr	d7, [r5, #8]
 811173a:	e9dd 0100 	ldrd	r0, r1, [sp]
 811173e:	ec53 2b17 	vmov	r2, r3, d7
 8111742:	ed8d 7b06 	vstr	d7, [sp, #24]
 8111746:	f7ee fe29 	bl	810039c <__adddf3>
 811174a:	4602      	mov	r2, r0
 811174c:	460b      	mov	r3, r1
 811174e:	4606      	mov	r6, r0
 8111750:	460f      	mov	r7, r1
 8111752:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111756:	f7ee fe1f 	bl	8100398 <__aeabi_dsub>
 811175a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 811175e:	f7ee fe1d 	bl	810039c <__adddf3>
 8111762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8111766:	e9c5 0102 	strd	r0, r1, [r5, #8]
 811176a:	e9c5 6700 	strd	r6, r7, [r5]
 811176e:	e76d      	b.n	811164c <__kernel_rem_pio2+0x50c>
 8111770:	ed94 7b00 	vldr	d7, [r4]
 8111774:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8111778:	ec51 0b17 	vmov	r0, r1, d7
 811177c:	4652      	mov	r2, sl
 811177e:	465b      	mov	r3, fp
 8111780:	ed8d 7b00 	vstr	d7, [sp]
 8111784:	f7ee fe0a 	bl	810039c <__adddf3>
 8111788:	4602      	mov	r2, r0
 811178a:	460b      	mov	r3, r1
 811178c:	4606      	mov	r6, r0
 811178e:	460f      	mov	r7, r1
 8111790:	e9dd 0100 	ldrd	r0, r1, [sp]
 8111794:	f7ee fe00 	bl	8100398 <__aeabi_dsub>
 8111798:	4652      	mov	r2, sl
 811179a:	465b      	mov	r3, fp
 811179c:	f7ee fdfe 	bl	810039c <__adddf3>
 81117a0:	3d01      	subs	r5, #1
 81117a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 81117a6:	e9c4 6700 	strd	r6, r7, [r4]
 81117aa:	e755      	b.n	8111658 <__kernel_rem_pio2+0x518>
 81117ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 81117b0:	f7ee fdf4 	bl	810039c <__adddf3>
 81117b4:	f108 38ff 	add.w	r8, r8, #4294967295
 81117b8:	e758      	b.n	811166c <__kernel_rem_pio2+0x52c>
 81117ba:	bf00      	nop
 81117bc:	f3af 8000 	nop.w
	...
 81117c8:	41700000 	.word	0x41700000
 81117cc:	3e700000 	.word	0x3e700000
 81117d0:	9b04      	ldr	r3, [sp, #16]
 81117d2:	9a04      	ldr	r2, [sp, #16]
 81117d4:	601f      	str	r7, [r3, #0]
 81117d6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 81117da:	605c      	str	r4, [r3, #4]
 81117dc:	609d      	str	r5, [r3, #8]
 81117de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 81117e2:	60d3      	str	r3, [r2, #12]
 81117e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81117e8:	6110      	str	r0, [r2, #16]
 81117ea:	6153      	str	r3, [r2, #20]
 81117ec:	e719      	b.n	8111622 <__kernel_rem_pio2+0x4e2>
 81117ee:	bf00      	nop

081117f0 <scalbn>:
 81117f0:	b570      	push	{r4, r5, r6, lr}
 81117f2:	ec55 4b10 	vmov	r4, r5, d0
 81117f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 81117fa:	4606      	mov	r6, r0
 81117fc:	462b      	mov	r3, r5
 81117fe:	b991      	cbnz	r1, 8111826 <scalbn+0x36>
 8111800:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8111804:	4323      	orrs	r3, r4
 8111806:	d03d      	beq.n	8111884 <scalbn+0x94>
 8111808:	4b35      	ldr	r3, [pc, #212]	@ (81118e0 <scalbn+0xf0>)
 811180a:	4620      	mov	r0, r4
 811180c:	4629      	mov	r1, r5
 811180e:	2200      	movs	r2, #0
 8111810:	f7ee ff7a 	bl	8100708 <__aeabi_dmul>
 8111814:	4b33      	ldr	r3, [pc, #204]	@ (81118e4 <scalbn+0xf4>)
 8111816:	429e      	cmp	r6, r3
 8111818:	4604      	mov	r4, r0
 811181a:	460d      	mov	r5, r1
 811181c:	da0f      	bge.n	811183e <scalbn+0x4e>
 811181e:	a328      	add	r3, pc, #160	@ (adr r3, 81118c0 <scalbn+0xd0>)
 8111820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111824:	e01e      	b.n	8111864 <scalbn+0x74>
 8111826:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 811182a:	4291      	cmp	r1, r2
 811182c:	d10b      	bne.n	8111846 <scalbn+0x56>
 811182e:	4622      	mov	r2, r4
 8111830:	4620      	mov	r0, r4
 8111832:	4629      	mov	r1, r5
 8111834:	f7ee fdb2 	bl	810039c <__adddf3>
 8111838:	4604      	mov	r4, r0
 811183a:	460d      	mov	r5, r1
 811183c:	e022      	b.n	8111884 <scalbn+0x94>
 811183e:	460b      	mov	r3, r1
 8111840:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8111844:	3936      	subs	r1, #54	@ 0x36
 8111846:	f24c 3250 	movw	r2, #50000	@ 0xc350
 811184a:	4296      	cmp	r6, r2
 811184c:	dd0d      	ble.n	811186a <scalbn+0x7a>
 811184e:	2d00      	cmp	r5, #0
 8111850:	a11d      	add	r1, pc, #116	@ (adr r1, 81118c8 <scalbn+0xd8>)
 8111852:	e9d1 0100 	ldrd	r0, r1, [r1]
 8111856:	da02      	bge.n	811185e <scalbn+0x6e>
 8111858:	a11d      	add	r1, pc, #116	@ (adr r1, 81118d0 <scalbn+0xe0>)
 811185a:	e9d1 0100 	ldrd	r0, r1, [r1]
 811185e:	a31a      	add	r3, pc, #104	@ (adr r3, 81118c8 <scalbn+0xd8>)
 8111860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111864:	f7ee ff50 	bl	8100708 <__aeabi_dmul>
 8111868:	e7e6      	b.n	8111838 <scalbn+0x48>
 811186a:	1872      	adds	r2, r6, r1
 811186c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8111870:	428a      	cmp	r2, r1
 8111872:	dcec      	bgt.n	811184e <scalbn+0x5e>
 8111874:	2a00      	cmp	r2, #0
 8111876:	dd08      	ble.n	811188a <scalbn+0x9a>
 8111878:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 811187c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8111880:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8111884:	ec45 4b10 	vmov	d0, r4, r5
 8111888:	bd70      	pop	{r4, r5, r6, pc}
 811188a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 811188e:	da08      	bge.n	81118a2 <scalbn+0xb2>
 8111890:	2d00      	cmp	r5, #0
 8111892:	a10b      	add	r1, pc, #44	@ (adr r1, 81118c0 <scalbn+0xd0>)
 8111894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8111898:	dac1      	bge.n	811181e <scalbn+0x2e>
 811189a:	a10f      	add	r1, pc, #60	@ (adr r1, 81118d8 <scalbn+0xe8>)
 811189c:	e9d1 0100 	ldrd	r0, r1, [r1]
 81118a0:	e7bd      	b.n	811181e <scalbn+0x2e>
 81118a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 81118a6:	3236      	adds	r2, #54	@ 0x36
 81118a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 81118ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 81118b0:	4620      	mov	r0, r4
 81118b2:	4b0d      	ldr	r3, [pc, #52]	@ (81118e8 <scalbn+0xf8>)
 81118b4:	4629      	mov	r1, r5
 81118b6:	2200      	movs	r2, #0
 81118b8:	e7d4      	b.n	8111864 <scalbn+0x74>
 81118ba:	bf00      	nop
 81118bc:	f3af 8000 	nop.w
 81118c0:	c2f8f359 	.word	0xc2f8f359
 81118c4:	01a56e1f 	.word	0x01a56e1f
 81118c8:	8800759c 	.word	0x8800759c
 81118cc:	7e37e43c 	.word	0x7e37e43c
 81118d0:	8800759c 	.word	0x8800759c
 81118d4:	fe37e43c 	.word	0xfe37e43c
 81118d8:	c2f8f359 	.word	0xc2f8f359
 81118dc:	81a56e1f 	.word	0x81a56e1f
 81118e0:	43500000 	.word	0x43500000
 81118e4:	ffff3cb0 	.word	0xffff3cb0
 81118e8:	3c900000 	.word	0x3c900000
 81118ec:	00000000 	.word	0x00000000

081118f0 <floor>:
 81118f0:	ec51 0b10 	vmov	r0, r1, d0
 81118f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 81118f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81118fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8111900:	2e13      	cmp	r6, #19
 8111902:	460c      	mov	r4, r1
 8111904:	4605      	mov	r5, r0
 8111906:	4680      	mov	r8, r0
 8111908:	dc34      	bgt.n	8111974 <floor+0x84>
 811190a:	2e00      	cmp	r6, #0
 811190c:	da17      	bge.n	811193e <floor+0x4e>
 811190e:	a332      	add	r3, pc, #200	@ (adr r3, 81119d8 <floor+0xe8>)
 8111910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111914:	f7ee fd42 	bl	810039c <__adddf3>
 8111918:	2200      	movs	r2, #0
 811191a:	2300      	movs	r3, #0
 811191c:	f7ef f984 	bl	8100c28 <__aeabi_dcmpgt>
 8111920:	b150      	cbz	r0, 8111938 <floor+0x48>
 8111922:	2c00      	cmp	r4, #0
 8111924:	da55      	bge.n	81119d2 <floor+0xe2>
 8111926:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 811192a:	432c      	orrs	r4, r5
 811192c:	2500      	movs	r5, #0
 811192e:	42ac      	cmp	r4, r5
 8111930:	4c2b      	ldr	r4, [pc, #172]	@ (81119e0 <floor+0xf0>)
 8111932:	bf08      	it	eq
 8111934:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8111938:	4621      	mov	r1, r4
 811193a:	4628      	mov	r0, r5
 811193c:	e023      	b.n	8111986 <floor+0x96>
 811193e:	4f29      	ldr	r7, [pc, #164]	@ (81119e4 <floor+0xf4>)
 8111940:	4137      	asrs	r7, r6
 8111942:	ea01 0307 	and.w	r3, r1, r7
 8111946:	4303      	orrs	r3, r0
 8111948:	d01d      	beq.n	8111986 <floor+0x96>
 811194a:	a323      	add	r3, pc, #140	@ (adr r3, 81119d8 <floor+0xe8>)
 811194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111950:	f7ee fd24 	bl	810039c <__adddf3>
 8111954:	2200      	movs	r2, #0
 8111956:	2300      	movs	r3, #0
 8111958:	f7ef f966 	bl	8100c28 <__aeabi_dcmpgt>
 811195c:	2800      	cmp	r0, #0
 811195e:	d0eb      	beq.n	8111938 <floor+0x48>
 8111960:	2c00      	cmp	r4, #0
 8111962:	bfbe      	ittt	lt
 8111964:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8111968:	4133      	asrlt	r3, r6
 811196a:	18e4      	addlt	r4, r4, r3
 811196c:	ea24 0407 	bic.w	r4, r4, r7
 8111970:	2500      	movs	r5, #0
 8111972:	e7e1      	b.n	8111938 <floor+0x48>
 8111974:	2e33      	cmp	r6, #51	@ 0x33
 8111976:	dd0a      	ble.n	811198e <floor+0x9e>
 8111978:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 811197c:	d103      	bne.n	8111986 <floor+0x96>
 811197e:	4602      	mov	r2, r0
 8111980:	460b      	mov	r3, r1
 8111982:	f7ee fd0b 	bl	810039c <__adddf3>
 8111986:	ec41 0b10 	vmov	d0, r0, r1
 811198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811198e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8111992:	f04f 37ff 	mov.w	r7, #4294967295
 8111996:	40df      	lsrs	r7, r3
 8111998:	4207      	tst	r7, r0
 811199a:	d0f4      	beq.n	8111986 <floor+0x96>
 811199c:	a30e      	add	r3, pc, #56	@ (adr r3, 81119d8 <floor+0xe8>)
 811199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81119a2:	f7ee fcfb 	bl	810039c <__adddf3>
 81119a6:	2200      	movs	r2, #0
 81119a8:	2300      	movs	r3, #0
 81119aa:	f7ef f93d 	bl	8100c28 <__aeabi_dcmpgt>
 81119ae:	2800      	cmp	r0, #0
 81119b0:	d0c2      	beq.n	8111938 <floor+0x48>
 81119b2:	2c00      	cmp	r4, #0
 81119b4:	da0a      	bge.n	81119cc <floor+0xdc>
 81119b6:	2e14      	cmp	r6, #20
 81119b8:	d101      	bne.n	81119be <floor+0xce>
 81119ba:	3401      	adds	r4, #1
 81119bc:	e006      	b.n	81119cc <floor+0xdc>
 81119be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 81119c2:	2301      	movs	r3, #1
 81119c4:	40b3      	lsls	r3, r6
 81119c6:	441d      	add	r5, r3
 81119c8:	4545      	cmp	r5, r8
 81119ca:	d3f6      	bcc.n	81119ba <floor+0xca>
 81119cc:	ea25 0507 	bic.w	r5, r5, r7
 81119d0:	e7b2      	b.n	8111938 <floor+0x48>
 81119d2:	2500      	movs	r5, #0
 81119d4:	462c      	mov	r4, r5
 81119d6:	e7af      	b.n	8111938 <floor+0x48>
 81119d8:	8800759c 	.word	0x8800759c
 81119dc:	7e37e43c 	.word	0x7e37e43c
 81119e0:	bff00000 	.word	0xbff00000
 81119e4:	000fffff 	.word	0x000fffff

081119e8 <_init>:
 81119e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81119ea:	bf00      	nop
 81119ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81119ee:	bc08      	pop	{r3}
 81119f0:	469e      	mov	lr, r3
 81119f2:	4770      	bx	lr

081119f4 <_fini>:
 81119f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81119f6:	bf00      	nop
 81119f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81119fa:	bc08      	pop	{r3}
 81119fc:	469e      	mov	lr, r3
 81119fe:	4770      	bx	lr
