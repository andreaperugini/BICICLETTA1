
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013660  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08113900  08113900  00014900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08113e34  08113e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08113e3c  08113e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08113e40  08113e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000026c  10000000  08113e44  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000089f4  10000270  081140b0  00015270  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  10008c64  081140b0  00015c64  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001526c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002923e  00000000  00000000  0001529c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b22  00000000  00000000  0003e4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d60  00000000  00000000  00043000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000164c  00000000  00000000  00044d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f8b0  00000000  00000000  000463ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000273fa  00000000  00000000  00085c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a3746  00000000  00000000  000ad056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  0025079c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092b8  00000000  00000000  00250854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00259b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000017d8  00000000  00000000  00259b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  0025b34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000270 	.word	0x10000270
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081138e8 	.word	0x081138e8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000274 	.word	0x10000274
 81002dc:	081138e8 	.word	0x081138e8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <DegreeSec2RPM>:
 */
#include "DC_motor.h"
#include "main.h"
#include "stdint.h"

float DegreeSec2RPM(float speed_degsec){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = (speed_degsec * 60)/360;
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 810115c <DegreeSec2RPM+0x38>
 8101136:	ee27 7a87 	vmul.f32	s14, s15, s14
 810113a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8101160 <DegreeSec2RPM+0x3c>
 810113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101142:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	ee07 3a90 	vmov	s15, r3
}
 810114c:	eeb0 0a67 	vmov.f32	s0, s15
 8101150:	3714      	adds	r7, #20
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	42700000 	.word	0x42700000
 8101160:	43b40000 	.word	0x43b40000

08101164 <Voltage2Duty>:

float Voltage2Duty(float u){
 8101164:	b480      	push	{r7}
 8101166:	b085      	sub	sp, #20
 8101168:	af00      	add	r7, sp, #0
 810116a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810116e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810117a:	d805      	bhi.n	8101188 <Voltage2Duty+0x24>
		u = -u;
 810117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101180:	eef1 7a67 	vneg.f32	s15, s15
 8101184:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101188:	edd7 7a01 	vldr	s15, [r7, #4]
 810118c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011e0 <Voltage2Duty+0x7c>
 8101190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101194:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8101198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810119c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 81011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 81011a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011e0 <Voltage2Duty+0x7c>
 81011a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 81011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011b0:	dd02      	ble.n	81011b8 <Voltage2Duty+0x54>
		duty = 100;
 81011b2:	4b0c      	ldr	r3, [pc, #48]	@ (81011e4 <Voltage2Duty+0x80>)
 81011b4:	60fb      	str	r3, [r7, #12]
 81011b6:	e009      	b.n	81011cc <Voltage2Duty+0x68>
	}else if(duty < 0){
 81011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 81011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011c4:	d502      	bpl.n	81011cc <Voltage2Duty+0x68>
		duty = 0;
 81011c6:	f04f 0300 	mov.w	r3, #0
 81011ca:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	ee07 3a90 	vmov	s15, r3
}
 81011d2:	eeb0 0a67 	vmov.f32	s0, s15
 81011d6:	3714      	adds	r7, #20
 81011d8:	46bd      	mov	sp, r7
 81011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011de:	4770      	bx	lr
 81011e0:	42c80000 	.word	0x42c80000
 81011e4:	42c80000 	.word	0x42c80000

081011e8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011e8:	b480      	push	{r7}
 81011ea:	b085      	sub	sp, #20
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011f2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011fe:	db02      	blt.n	8101206 <Ref2Direction+0x1e>
		direction = 0;
 8101200:	2300      	movs	r3, #0
 8101202:	73fb      	strb	r3, [r7, #15]
 8101204:	e001      	b.n	810120a <Ref2Direction+0x22>
	} else {
		direction = 1;
 8101206:	2301      	movs	r3, #1
 8101208:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 810120a:	7bfb      	ldrb	r3, [r7, #15]
}
 810120c:	4618      	mov	r0, r3
 810120e:	3714      	adds	r7, #20
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr

08101218 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 8101218:	b5b0      	push	{r4, r5, r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	ed87 0a01 	vstr	s0, [r7, #4]
 8101222:	4603      	mov	r3, r0
 8101224:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 8101226:	6878      	ldr	r0, [r7, #4]
 8101228:	f7ff fa16 	bl	8100658 <__aeabi_f2d>
 810122c:	f04f 0200 	mov.w	r2, #0
 8101230:	4b17      	ldr	r3, [pc, #92]	@ (8101290 <set_PWM_and_dir_back_wheel+0x78>)
 8101232:	f7ff fb93 	bl	810095c <__aeabi_ddiv>
 8101236:	4602      	mov	r2, r0
 8101238:	460b      	mov	r3, r1
 810123a:	4614      	mov	r4, r2
 810123c:	461d      	mov	r5, r3
 810123e:	4b15      	ldr	r3, [pc, #84]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 8101240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101242:	4618      	mov	r0, r3
 8101244:	f7ff f9e6 	bl	8100614 <__aeabi_ui2d>
 8101248:	4602      	mov	r2, r0
 810124a:	460b      	mov	r3, r1
 810124c:	4620      	mov	r0, r4
 810124e:	4629      	mov	r1, r5
 8101250:	f7ff fa5a 	bl	8100708 <__aeabi_dmul>
 8101254:	4602      	mov	r2, r0
 8101256:	460b      	mov	r3, r1
 8101258:	4c0e      	ldr	r4, [pc, #56]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 810125a:	4610      	mov	r0, r2
 810125c:	4619      	mov	r1, r3
 810125e:	f7ff fd2b 	bl	8100cb8 <__aeabi_d2uiz>
 8101262:	4603      	mov	r3, r0
 8101264:	6363      	str	r3, [r4, #52]	@ 0x34

	//ARR:valore massimo che il contatore può raggiungere


	//Qui non ho capito a che serve
	if(direction == 0){
 8101266:	78fb      	ldrb	r3, [r7, #3]
 8101268:	2b00      	cmp	r3, #0
 810126a:	d105      	bne.n	8101278 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810126c:	2200      	movs	r2, #0
 810126e:	2110      	movs	r1, #16
 8101270:	4809      	ldr	r0, [pc, #36]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101272:	f005 fdb1 	bl	8106dd8 <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101276:	e007      	b.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101278:	78fb      	ldrb	r3, [r7, #3]
 810127a:	2b01      	cmp	r3, #1
 810127c:	d104      	bne.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810127e:	2201      	movs	r2, #1
 8101280:	2110      	movs	r1, #16
 8101282:	4805      	ldr	r0, [pc, #20]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101284:	f005 fda8 	bl	8106dd8 <HAL_GPIO_WritePin>
}
 8101288:	bf00      	nop
 810128a:	3708      	adds	r7, #8
 810128c:	46bd      	mov	sp, r7
 810128e:	bdb0      	pop	{r4, r5, r7, pc}
 8101290:	40590000 	.word	0x40590000
 8101294:	40010000 	.word	0x40010000
 8101298:	58020000 	.word	0x58020000

0810129c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 81012a6:	4603      	mov	r3, r0
 81012a8:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 81012aa:	edd7 7a01 	vldr	s15, [r7, #4]
 81012ae:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012fc <set_PWM_and_dir_front_wheel+0x60>
 81012b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81012b6:	4b12      	ldr	r3, [pc, #72]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ba:	ee07 3a90 	vmov	s15, r3
 81012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012cc:	ee17 2a90 	vmov	r2, s15
 81012d0:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 81012d2:	78fb      	ldrb	r3, [r7, #3]
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d105      	bne.n	81012e4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 81012d8:	2200      	movs	r2, #0
 81012da:	2120      	movs	r1, #32
 81012dc:	4809      	ldr	r0, [pc, #36]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012de:	f005 fd7b 	bl	8106dd8 <HAL_GPIO_WritePin>
	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 81012e2:	e007      	b.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012e4:	78fb      	ldrb	r3, [r7, #3]
 81012e6:	2b01      	cmp	r3, #1
 81012e8:	d104      	bne.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 81012ea:	2201      	movs	r2, #1
 81012ec:	2120      	movs	r1, #32
 81012ee:	4805      	ldr	r0, [pc, #20]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012f0:	f005 fd72 	bl	8106dd8 <HAL_GPIO_WritePin>
}
 81012f4:	bf00      	nop
 81012f6:	3708      	adds	r7, #8
 81012f8:	46bd      	mov	sp, r7
 81012fa:	bd80      	pop	{r7, pc}
 81012fc:	42c80000 	.word	0x42c80000
 8101300:	40000400 	.word	0x40000400
 8101304:	58020000 	.word	0x58020000

08101308 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 8101308:	b480      	push	{r7}
 810130a:	b085      	sub	sp, #20
 810130c:	af00      	add	r7, sp, #0
 810130e:	60f8      	str	r0, [r7, #12]
 8101310:	ed87 0a02 	vstr	s0, [r7, #8]
 8101314:	edc7 0a01 	vstr	s1, [r7, #4]
 8101318:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 810131c:	68fb      	ldr	r3, [r7, #12]
 810131e:	68ba      	ldr	r2, [r7, #8]
 8101320:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8101322:	68fb      	ldr	r3, [r7, #12]
 8101324:	687a      	ldr	r2, [r7, #4]
 8101326:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	683a      	ldr	r2, [r7, #0]
 810132c:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	f04f 0200 	mov.w	r2, #0
 8101334:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 8101336:	68fb      	ldr	r3, [r7, #12]
 8101338:	f04f 0200 	mov.w	r2, #0
 810133c:	61da      	str	r2, [r3, #28]

}
 810133e:	bf00      	nop
 8101340:	3714      	adds	r7, #20
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr

0810134a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810134a:	b480      	push	{r7}
 810134c:	b085      	sub	sp, #20
 810134e:	af00      	add	r7, sp, #0
 8101350:	60f8      	str	r0, [r7, #12]
 8101352:	ed87 0a02 	vstr	s0, [r7, #8]
 8101356:	edc7 0a01 	vstr	s1, [r7, #4]
 810135a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	68ba      	ldr	r2, [r7, #8]
 8101362:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	683a      	ldr	r2, [r7, #0]
 8101368:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810136a:	68fb      	ldr	r3, [r7, #12]
 810136c:	687a      	ldr	r2, [r7, #4]
 810136e:	605a      	str	r2, [r3, #4]
}
 8101370:	bf00      	nop
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr

0810137c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810137c:	b480      	push	{r7}
 810137e:	b089      	sub	sp, #36	@ 0x24
 8101380:	af00      	add	r7, sp, #0
 8101382:	60f8      	str	r0, [r7, #12]
 8101384:	ed87 0a02 	vstr	s0, [r7, #8]
 8101388:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810138c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101390:	edd7 7a02 	vldr	s15, [r7, #8]
 8101394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101398:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	edd3 7a00 	vldr	s15, [r3]
 81013a2:	ed97 7a06 	vldr	s14, [r7, #24]
 81013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013aa:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	ed93 7a07 	vldr	s14, [r3, #28]
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	edd3 6a01 	vldr	s13, [r3, #4]
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	edd3 7a03 	vldr	s15, [r3, #12]
 81013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	edd3 7a06 	vldr	s15, [r3, #24]
 81013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	69ba      	ldr	r2, [r7, #24]
 81013da:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 81013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 81013e0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013e8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ec:	68fb      	ldr	r3, [r7, #12]
 81013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 81013f2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013fe:	dd03      	ble.n	8101408 <PID_controller+0x8c>
		u = p->u_max;
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	691b      	ldr	r3, [r3, #16]
 8101404:	61fb      	str	r3, [r7, #28]
 8101406:	e010      	b.n	810142a <PID_controller+0xae>
	}else if(u<p->u_min){
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	edd3 7a05 	vldr	s15, [r3, #20]
 810140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810141a:	d503      	bpl.n	8101424 <PID_controller+0xa8>
		u = p->u_min;
 810141c:	68fb      	ldr	r3, [r7, #12]
 810141e:	695b      	ldr	r3, [r3, #20]
 8101420:	61fb      	str	r3, [r7, #28]
 8101422:	e002      	b.n	810142a <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	693a      	ldr	r2, [r7, #16]
 8101428:	61da      	str	r2, [r3, #28]
	}

	return u;
 810142a:	69fb      	ldr	r3, [r7, #28]
 810142c:	ee07 3a90 	vmov	s15, r3

}
 8101430:	eeb0 0a67 	vmov.f32	s0, s15
 8101434:	3724      	adds	r7, #36	@ 0x24
 8101436:	46bd      	mov	sp, r7
 8101438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143c:	4770      	bx	lr

0810143e <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810143e:	b580      	push	{r7, lr}
 8101440:	b082      	sub	sp, #8
 8101442:	af00      	add	r7, sp, #0
 8101444:	4603      	mov	r3, r0
 8101446:	71fb      	strb	r3, [r7, #7]
 8101448:	79fb      	ldrb	r3, [r7, #7]
 810144a:	4619      	mov	r1, r3
 810144c:	2007      	movs	r0, #7
 810144e:	f000 fa31 	bl	81018b4 <bno055_writeData>
 8101452:	bf00      	nop
 8101454:	3708      	adds	r7, #8
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}

0810145a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810145a:	b580      	push	{r7, lr}
 810145c:	b082      	sub	sp, #8
 810145e:	af00      	add	r7, sp, #0
 8101460:	4603      	mov	r3, r0
 8101462:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101464:	79fb      	ldrb	r3, [r7, #7]
 8101466:	4619      	mov	r1, r3
 8101468:	203d      	movs	r0, #61	@ 0x3d
 810146a:	f000 fa23 	bl	81018b4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810146e:	79fb      	ldrb	r3, [r7, #7]
 8101470:	2b00      	cmp	r3, #0
 8101472:	d103      	bne.n	810147c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101474:	2064      	movs	r0, #100	@ 0x64
 8101476:	f000 fa11 	bl	810189c <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810147a:	e002      	b.n	8101482 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810147c:	2050      	movs	r0, #80	@ 0x50
 810147e:	f000 fa0d 	bl	810189c <bno055_delay>
}
 8101482:	bf00      	nop
 8101484:	3708      	adds	r7, #8
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}

0810148a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810148a:	b580      	push	{r7, lr}
 810148c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810148e:	2000      	movs	r0, #0
 8101490:	f7ff ffe3 	bl	810145a <bno055_setOperationMode>
}
 8101494:	bf00      	nop
 8101496:	bd80      	pop	{r7, pc}

08101498 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101498:	b580      	push	{r7, lr}
 810149a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810149c:	200c      	movs	r0, #12
 810149e:	f7ff ffdc 	bl	810145a <bno055_setOperationMode>
}
 81014a2:	bf00      	nop
 81014a4:	bd80      	pop	{r7, pc}

081014a6 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81014a6:	b580      	push	{r7, lr}
 81014a8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81014aa:	2120      	movs	r1, #32
 81014ac:	203f      	movs	r0, #63	@ 0x3f
 81014ae:	f000 fa01 	bl	81018b4 <bno055_writeData>
  bno055_delay(700);
 81014b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 81014b6:	f000 f9f1 	bl	810189c <bno055_delay>
}
 81014ba:	bf00      	nop
 81014bc:	bd80      	pop	{r7, pc}

081014be <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81014be:	b580      	push	{r7, lr}
 81014c0:	b082      	sub	sp, #8
 81014c2:	af00      	add	r7, sp, #0
  bno055_reset();
 81014c4:	f7ff ffef 	bl	81014a6 <bno055_reset>

  uint8_t id = 0;
 81014c8:	2300      	movs	r3, #0
 81014ca:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81014cc:	1dfb      	adds	r3, r7, #7
 81014ce:	2201      	movs	r2, #1
 81014d0:	4619      	mov	r1, r3
 81014d2:	2000      	movs	r0, #0
 81014d4:	f000 fa22 	bl	810191c <bno055_readData>
  if (id != BNO055_ID) {
    //printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
  }
  bno055_setPage(0);
 81014d8:	2000      	movs	r0, #0
 81014da:	f7ff ffb0 	bl	810143e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81014de:	2100      	movs	r1, #0
 81014e0:	203f      	movs	r0, #63	@ 0x3f
 81014e2:	f000 f9e7 	bl	81018b4 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014e6:	f7ff ffd0 	bl	810148a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014ea:	200a      	movs	r0, #10
 81014ec:	f000 f9d6 	bl	810189c <bno055_delay>
}
 81014f0:	bf00      	nop
 81014f2:	3708      	adds	r7, #8
 81014f4:	46bd      	mov	sp, r7
 81014f6:	bd80      	pop	{r7, pc}

081014f8 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 81014f8:	b580      	push	{r7, lr}
 81014fa:	b084      	sub	sp, #16
 81014fc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 81014fe:	2000      	movs	r0, #0
 8101500:	f7ff ff9d 	bl	810143e <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 8101504:	2300      	movs	r3, #0
 8101506:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8101508:	2300      	movs	r3, #0
 810150a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 810150c:	1dfb      	adds	r3, r7, #7
 810150e:	2201      	movs	r2, #1
 8101510:	4619      	mov	r1, r3
 8101512:	2035      	movs	r0, #53	@ 0x35
 8101514:	f000 fa02 	bl	810191c <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8101518:	79fb      	ldrb	r3, [r7, #7]
 810151a:	099b      	lsrs	r3, r3, #6
 810151c:	b2db      	uxtb	r3, r3
 810151e:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8101520:	79fb      	ldrb	r3, [r7, #7]
 8101522:	091b      	lsrs	r3, r3, #4
 8101524:	b2db      	uxtb	r3, r3
 8101526:	f003 0303 	and.w	r3, r3, #3
 810152a:	b2db      	uxtb	r3, r3
 810152c:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 810152e:	79fb      	ldrb	r3, [r7, #7]
 8101530:	089b      	lsrs	r3, r3, #2
 8101532:	b2db      	uxtb	r3, r3
 8101534:	f003 0303 	and.w	r3, r3, #3
 8101538:	b2db      	uxtb	r3, r3
 810153a:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 810153c:	79fb      	ldrb	r3, [r7, #7]
 810153e:	f003 0303 	and.w	r3, r3, #3
 8101542:	b2db      	uxtb	r3, r3
 8101544:	72bb      	strb	r3, [r7, #10]
  return cal;
 8101546:	68bb      	ldr	r3, [r7, #8]
 8101548:	60fb      	str	r3, [r7, #12]
 810154a:	2300      	movs	r3, #0
 810154c:	7b3a      	ldrb	r2, [r7, #12]
 810154e:	f362 0307 	bfi	r3, r2, #0, #8
 8101552:	7b7a      	ldrb	r2, [r7, #13]
 8101554:	f362 230f 	bfi	r3, r2, #8, #8
 8101558:	7bba      	ldrb	r2, [r7, #14]
 810155a:	f362 4317 	bfi	r3, r2, #16, #8
 810155e:	7bfa      	ldrb	r2, [r7, #15]
 8101560:	f362 631f 	bfi	r3, r2, #24, #8
}
 8101564:	4618      	mov	r0, r3
 8101566:	3710      	adds	r7, #16
 8101568:	46bd      	mov	sp, r7
 810156a:	bd80      	pop	{r7, pc}

0810156c <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 810156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101570:	b09e      	sub	sp, #120	@ 0x78
 8101572:	af00      	add	r7, sp, #0
 8101574:	4603      	mov	r3, r0
 8101576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 810157a:	2000      	movs	r0, #0
 810157c:	f7ff ff5f 	bl	810143e <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101584:	2b20      	cmp	r3, #32
 8101586:	d108      	bne.n	810159a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101588:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810158c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101590:	2208      	movs	r2, #8
 8101592:	4618      	mov	r0, r3
 8101594:	f000 f9c2 	bl	810191c <bno055_readData>
 8101598:	e007      	b.n	81015aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810159a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810159e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015a2:	2206      	movs	r2, #6
 81015a4:	4618      	mov	r0, r3
 81015a6:	f000 f9b9 	bl	810191c <bno055_readData>

  double scale = 1;
 81015aa:	f04f 0200 	mov.w	r2, #0
 81015ae:	4b8b      	ldr	r3, [pc, #556]	@ (81017dc <bno055_getVector+0x270>)
 81015b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81015b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015b8:	2b0e      	cmp	r3, #14
 81015ba:	d109      	bne.n	81015d0 <bno055_getVector+0x64>
    scale = magScale;
 81015bc:	4b88      	ldr	r3, [pc, #544]	@ (81017e0 <bno055_getVector+0x274>)
 81015be:	881b      	ldrh	r3, [r3, #0]
 81015c0:	4618      	mov	r0, r3
 81015c2:	f7ff f827 	bl	8100614 <__aeabi_ui2d>
 81015c6:	4602      	mov	r2, r0
 81015c8:	460b      	mov	r3, r1
 81015ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015ce:	e03e      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 81015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015d4:	2b08      	cmp	r3, #8
 81015d6:	d007      	beq.n	81015e8 <bno055_getVector+0x7c>
 81015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015dc:	2b28      	cmp	r3, #40	@ 0x28
 81015de:	d003      	beq.n	81015e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015e4:	2b2e      	cmp	r3, #46	@ 0x2e
 81015e6:	d109      	bne.n	81015fc <bno055_getVector+0x90>
    scale = accelScale;
 81015e8:	4b7e      	ldr	r3, [pc, #504]	@ (81017e4 <bno055_getVector+0x278>)
 81015ea:	881b      	ldrh	r3, [r3, #0]
 81015ec:	4618      	mov	r0, r3
 81015ee:	f7ff f811 	bl	8100614 <__aeabi_ui2d>
 81015f2:	4602      	mov	r2, r0
 81015f4:	460b      	mov	r3, r1
 81015f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015fa:	e028      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101600:	2b14      	cmp	r3, #20
 8101602:	d109      	bne.n	8101618 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101604:	4b78      	ldr	r3, [pc, #480]	@ (81017e8 <bno055_getVector+0x27c>)
 8101606:	881b      	ldrh	r3, [r3, #0]
 8101608:	4618      	mov	r0, r3
 810160a:	f7ff f803 	bl	8100614 <__aeabi_ui2d>
 810160e:	4602      	mov	r2, r0
 8101610:	460b      	mov	r3, r1
 8101612:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101616:	e01a      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810161c:	2b1a      	cmp	r3, #26
 810161e:	d109      	bne.n	8101634 <bno055_getVector+0xc8>
    scale = eulerScale;
 8101620:	4b72      	ldr	r3, [pc, #456]	@ (81017ec <bno055_getVector+0x280>)
 8101622:	881b      	ldrh	r3, [r3, #0]
 8101624:	4618      	mov	r0, r3
 8101626:	f7fe fff5 	bl	8100614 <__aeabi_ui2d>
 810162a:	4602      	mov	r2, r0
 810162c:	460b      	mov	r3, r1
 810162e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101632:	e00c      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101638:	2b20      	cmp	r3, #32
 810163a:	d108      	bne.n	810164e <bno055_getVector+0xe2>
    scale = quaScale;
 810163c:	4b6c      	ldr	r3, [pc, #432]	@ (81017f0 <bno055_getVector+0x284>)
 810163e:	881b      	ldrh	r3, [r3, #0]
 8101640:	4618      	mov	r0, r3
 8101642:	f7fe ffe7 	bl	8100614 <__aeabi_ui2d>
 8101646:	4602      	mov	r2, r0
 8101648:	460b      	mov	r3, r1
 810164a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101652:	2220      	movs	r2, #32
 8101654:	2100      	movs	r1, #0
 8101656:	4618      	mov	r0, r3
 8101658:	f00e fe02 	bl	8110260 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810165c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101660:	2b20      	cmp	r3, #32
 8101662:	d150      	bne.n	8101706 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101664:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101668:	021b      	lsls	r3, r3, #8
 810166a:	b21a      	sxth	r2, r3
 810166c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101670:	b21b      	sxth	r3, r3
 8101672:	4313      	orrs	r3, r2
 8101674:	b21b      	sxth	r3, r3
 8101676:	4618      	mov	r0, r3
 8101678:	f7fe ffdc 	bl	8100634 <__aeabi_i2d>
 810167c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101680:	f7ff f96c 	bl	810095c <__aeabi_ddiv>
 8101684:	4602      	mov	r2, r0
 8101686:	460b      	mov	r3, r1
 8101688:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810168c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101690:	021b      	lsls	r3, r3, #8
 8101692:	b21a      	sxth	r2, r3
 8101694:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101698:	b21b      	sxth	r3, r3
 810169a:	4313      	orrs	r3, r2
 810169c:	b21b      	sxth	r3, r3
 810169e:	4618      	mov	r0, r3
 81016a0:	f7fe ffc8 	bl	8100634 <__aeabi_i2d>
 81016a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016a8:	f7ff f958 	bl	810095c <__aeabi_ddiv>
 81016ac:	4602      	mov	r2, r0
 81016ae:	460b      	mov	r3, r1
 81016b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81016b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 81016b8:	021b      	lsls	r3, r3, #8
 81016ba:	b21a      	sxth	r2, r3
 81016bc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81016c0:	b21b      	sxth	r3, r3
 81016c2:	4313      	orrs	r3, r2
 81016c4:	b21b      	sxth	r3, r3
 81016c6:	4618      	mov	r0, r3
 81016c8:	f7fe ffb4 	bl	8100634 <__aeabi_i2d>
 81016cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016d0:	f7ff f944 	bl	810095c <__aeabi_ddiv>
 81016d4:	4602      	mov	r2, r0
 81016d6:	460b      	mov	r3, r1
 81016d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 81016dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81016e0:	021b      	lsls	r3, r3, #8
 81016e2:	b21a      	sxth	r2, r3
 81016e4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 81016e8:	b21b      	sxth	r3, r3
 81016ea:	4313      	orrs	r3, r2
 81016ec:	b21b      	sxth	r3, r3
 81016ee:	4618      	mov	r0, r3
 81016f0:	f7fe ffa0 	bl	8100634 <__aeabi_i2d>
 81016f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016f8:	f7ff f930 	bl	810095c <__aeabi_ddiv>
 81016fc:	4602      	mov	r2, r0
 81016fe:	460b      	mov	r3, r1
 8101700:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8101704:	e03b      	b.n	810177e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101706:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 810170a:	021b      	lsls	r3, r3, #8
 810170c:	b21a      	sxth	r2, r3
 810170e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101712:	b21b      	sxth	r3, r3
 8101714:	4313      	orrs	r3, r2
 8101716:	b21b      	sxth	r3, r3
 8101718:	4618      	mov	r0, r3
 810171a:	f7fe ff8b 	bl	8100634 <__aeabi_i2d>
 810171e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101722:	f7ff f91b 	bl	810095c <__aeabi_ddiv>
 8101726:	4602      	mov	r2, r0
 8101728:	460b      	mov	r3, r1
 810172a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810172e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101732:	021b      	lsls	r3, r3, #8
 8101734:	b21a      	sxth	r2, r3
 8101736:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 810173a:	b21b      	sxth	r3, r3
 810173c:	4313      	orrs	r3, r2
 810173e:	b21b      	sxth	r3, r3
 8101740:	4618      	mov	r0, r3
 8101742:	f7fe ff77 	bl	8100634 <__aeabi_i2d>
 8101746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810174a:	f7ff f907 	bl	810095c <__aeabi_ddiv>
 810174e:	4602      	mov	r2, r0
 8101750:	460b      	mov	r3, r1
 8101752:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101756:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 810175a:	021b      	lsls	r3, r3, #8
 810175c:	b21a      	sxth	r2, r3
 810175e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101762:	b21b      	sxth	r3, r3
 8101764:	4313      	orrs	r3, r2
 8101766:	b21b      	sxth	r3, r3
 8101768:	4618      	mov	r0, r3
 810176a:	f7fe ff63 	bl	8100634 <__aeabi_i2d>
 810176e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101772:	f7ff f8f3 	bl	810095c <__aeabi_ddiv>
 8101776:	4602      	mov	r2, r0
 8101778:	460b      	mov	r3, r1
 810177a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 810177e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101782:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810178a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810178e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101792:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101796:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 810179a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 810179e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 81017a2:	ec49 8b14 	vmov	d4, r8, r9
 81017a6:	ec45 4b15 	vmov	d5, r4, r5
 81017aa:	ec41 0b16 	vmov	d6, r0, r1
 81017ae:	ec43 2b17 	vmov	d7, r2, r3
}
 81017b2:	eeb0 0a44 	vmov.f32	s0, s8
 81017b6:	eef0 0a64 	vmov.f32	s1, s9
 81017ba:	eeb0 1a45 	vmov.f32	s2, s10
 81017be:	eef0 1a65 	vmov.f32	s3, s11
 81017c2:	eeb0 2a46 	vmov.f32	s4, s12
 81017c6:	eef0 2a66 	vmov.f32	s5, s13
 81017ca:	eeb0 3a47 	vmov.f32	s6, s14
 81017ce:	eef0 3a67 	vmov.f32	s7, s15
 81017d2:	3778      	adds	r7, #120	@ 0x78
 81017d4:	46bd      	mov	sp, r7
 81017d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81017da:	bf00      	nop
 81017dc:	3ff00000 	.word	0x3ff00000
 81017e0:	1000000e 	.word	0x1000000e
 81017e4:	10000008 	.word	0x10000008
 81017e8:	1000000a 	.word	0x1000000a
 81017ec:	1000000c 	.word	0x1000000c
 81017f0:	10000010 	.word	0x10000010

081017f4 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 81017f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81017f8:	b090      	sub	sp, #64	@ 0x40
 81017fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81017fc:	201a      	movs	r0, #26
 81017fe:	f7ff feb5 	bl	810156c <bno055_getVector>
 8101802:	eeb0 4a40 	vmov.f32	s8, s0
 8101806:	eef0 4a60 	vmov.f32	s9, s1
 810180a:	eeb0 5a41 	vmov.f32	s10, s2
 810180e:	eef0 5a61 	vmov.f32	s11, s3
 8101812:	eeb0 6a42 	vmov.f32	s12, s4
 8101816:	eef0 6a62 	vmov.f32	s13, s5
 810181a:	eeb0 7a43 	vmov.f32	s14, s6
 810181e:	eef0 7a63 	vmov.f32	s15, s7
 8101822:	ed87 4b08 	vstr	d4, [r7, #32]
 8101826:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 810182a:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 810182e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8101832:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101836:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 810183a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 810183e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101842:	ec49 8b14 	vmov	d4, r8, r9
 8101846:	ec45 4b15 	vmov	d5, r4, r5
 810184a:	ec41 0b16 	vmov	d6, r0, r1
 810184e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101852:	eeb0 0a44 	vmov.f32	s0, s8
 8101856:	eef0 0a64 	vmov.f32	s1, s9
 810185a:	eeb0 1a45 	vmov.f32	s2, s10
 810185e:	eef0 1a65 	vmov.f32	s3, s11
 8101862:	eeb0 2a46 	vmov.f32	s4, s12
 8101866:	eef0 2a66 	vmov.f32	s5, s13
 810186a:	eeb0 3a47 	vmov.f32	s6, s14
 810186e:	eef0 3a67 	vmov.f32	s7, s15
 8101872:	3740      	adds	r7, #64	@ 0x40
 8101874:	46bd      	mov	sp, r7
 8101876:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810187c <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810187c:	b480      	push	{r7}
 810187e:	b083      	sub	sp, #12
 8101880:	af00      	add	r7, sp, #0
 8101882:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101884:	4a04      	ldr	r2, [pc, #16]	@ (8101898 <bno055_assignI2C+0x1c>)
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	6013      	str	r3, [r2, #0]
}
 810188a:	bf00      	nop
 810188c:	370c      	adds	r7, #12
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr
 8101896:	bf00      	nop
 8101898:	1000028c 	.word	0x1000028c

0810189c <bno055_delay>:

void bno055_delay(int time) {
 810189c:	b580      	push	{r7, lr}
 810189e:	b082      	sub	sp, #8
 81018a0:	af00      	add	r7, sp, #0
 81018a2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	4618      	mov	r0, r3
 81018a8:	f002 fd46 	bl	8104338 <HAL_Delay>
#endif
}
 81018ac:	bf00      	nop
 81018ae:	3708      	adds	r7, #8
 81018b0:	46bd      	mov	sp, r7
 81018b2:	bd80      	pop	{r7, pc}

081018b4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81018b4:	b580      	push	{r7, lr}
 81018b6:	b088      	sub	sp, #32
 81018b8:	af02      	add	r7, sp, #8
 81018ba:	4603      	mov	r3, r0
 81018bc:	460a      	mov	r2, r1
 81018be:	71fb      	strb	r3, [r7, #7]
 81018c0:	4613      	mov	r3, r2
 81018c2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81018c4:	79fb      	ldrb	r3, [r7, #7]
 81018c6:	733b      	strb	r3, [r7, #12]
 81018c8:	79bb      	ldrb	r3, [r7, #6]
 81018ca:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81018cc:	4b12      	ldr	r3, [pc, #72]	@ (8101918 <bno055_writeData+0x64>)
 81018ce:	6818      	ldr	r0, [r3, #0]
 81018d0:	f107 020c 	add.w	r2, r7, #12
 81018d4:	230a      	movs	r3, #10
 81018d6:	9300      	str	r3, [sp, #0]
 81018d8:	2302      	movs	r3, #2
 81018da:	2150      	movs	r1, #80	@ 0x50
 81018dc:	f005 fb5e 	bl	8106f9c <HAL_I2C_Master_Transmit>
 81018e0:	4603      	mov	r3, r0
 81018e2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81018e4:	7dfb      	ldrb	r3, [r7, #23]
 81018e6:	2b00      	cmp	r3, #0
 81018e8:	d010      	beq.n	810190c <bno055_writeData+0x58>
    //printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
  } else {
    //printf("Unknown status data %d", status);
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 81018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8101918 <bno055_writeData+0x64>)
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4618      	mov	r0, r3
 81018f0:	f005 fd70 	bl	81073d4 <HAL_I2C_GetError>
 81018f4:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 81018f6:	693b      	ldr	r3, [r7, #16]
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d009      	beq.n	8101910 <bno055_writeData+0x5c>
    //printf("HAL_I2C_ERROR_DMA\r\n");
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
    //printf("HAL_I2C_ERROR_TIMEOUT\r\n");
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 81018fc:	4b06      	ldr	r3, [pc, #24]	@ (8101918 <bno055_writeData+0x64>)
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	4618      	mov	r0, r3
 8101902:	f005 fd59 	bl	81073b8 <HAL_I2C_GetState>
 8101906:	4603      	mov	r3, r0
 8101908:	73fb      	strb	r3, [r7, #15]
 810190a:	e002      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 810190c:	bf00      	nop
 810190e:	e000      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 8101910:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101912:	3718      	adds	r7, #24
 8101914:	46bd      	mov	sp, r7
 8101916:	bd80      	pop	{r7, pc}
 8101918:	1000028c 	.word	0x1000028c

0810191c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810191c:	b580      	push	{r7, lr}
 810191e:	b086      	sub	sp, #24
 8101920:	af02      	add	r7, sp, #8
 8101922:	4603      	mov	r3, r0
 8101924:	6039      	str	r1, [r7, #0]
 8101926:	71fb      	strb	r3, [r7, #7]
 8101928:	4613      	mov	r3, r2
 810192a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810192c:	4b0d      	ldr	r3, [pc, #52]	@ (8101964 <bno055_readData+0x48>)
 810192e:	6818      	ldr	r0, [r3, #0]
 8101930:	1dfa      	adds	r2, r7, #7
 8101932:	2364      	movs	r3, #100	@ 0x64
 8101934:	9300      	str	r3, [sp, #0]
 8101936:	2301      	movs	r3, #1
 8101938:	2150      	movs	r1, #80	@ 0x50
 810193a:	f005 fb2f 	bl	8106f9c <HAL_I2C_Master_Transmit>
 810193e:	4603      	mov	r3, r0
 8101940:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101942:	4b08      	ldr	r3, [pc, #32]	@ (8101964 <bno055_readData+0x48>)
 8101944:	6818      	ldr	r0, [r3, #0]
 8101946:	79bb      	ldrb	r3, [r7, #6]
 8101948:	b29b      	uxth	r3, r3
 810194a:	2264      	movs	r2, #100	@ 0x64
 810194c:	9200      	str	r2, [sp, #0]
 810194e:	683a      	ldr	r2, [r7, #0]
 8101950:	2150      	movs	r1, #80	@ 0x50
 8101952:	f005 fc3b 	bl	81071cc <HAL_I2C_Master_Receive>
 8101956:	4603      	mov	r3, r0
 8101958:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 810195a:	7bfb      	ldrb	r3, [r7, #15]
 810195c:	2b00      	cmp	r3, #0
	  } else {
	    //printf("Unknown status data %d", ret);
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810195e:	3710      	adds	r7, #16
 8101960:	46bd      	mov	sp, r7
 8101962:	bd80      	pop	{r7, pc}
 8101964:	1000028c 	.word	0x1000028c

08101968 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101968:	b580      	push	{r7, lr}
 810196a:	b084      	sub	sp, #16
 810196c:	af00      	add	r7, sp, #0
 810196e:	4603      	mov	r3, r0
 8101970:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101972:	f107 030f 	add.w	r3, r7, #15
 8101976:	2201      	movs	r2, #1
 8101978:	4619      	mov	r1, r3
 810197a:	203e      	movs	r0, #62	@ 0x3e
 810197c:	f7ff ffce 	bl	810191c <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101980:	7bfb      	ldrb	r3, [r7, #15]
 8101982:	f023 0303 	bic.w	r3, r3, #3
 8101986:	b2db      	uxtb	r3, r3
 8101988:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810198a:	7bfa      	ldrb	r2, [r7, #15]
 810198c:	79fb      	ldrb	r3, [r7, #7]
 810198e:	4313      	orrs	r3, r2
 8101990:	b2db      	uxtb	r3, r3
 8101992:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101994:	7bfb      	ldrb	r3, [r7, #15]
 8101996:	4619      	mov	r1, r3
 8101998:	203e      	movs	r0, #62	@ 0x3e
 810199a:	f7ff ff8b 	bl	81018b4 <bno055_writeData>
}
 810199e:	bf00      	nop
 81019a0:	3710      	adds	r7, #16
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 81019a6:	b580      	push	{r7, lr}
 81019a8:	b082      	sub	sp, #8
 81019aa:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 81019ac:	1dfb      	adds	r3, r7, #7
 81019ae:	2201      	movs	r2, #1
 81019b0:	4619      	mov	r1, r3
 81019b2:	203e      	movs	r0, #62	@ 0x3e
 81019b4:	f7ff ffb2 	bl	810191c <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 81019b8:	79fb      	ldrb	r3, [r7, #7]
 81019ba:	f003 0303 	and.w	r3, r3, #3
 81019be:	b2db      	uxtb	r3, r3
 81019c0:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 81019c2:	79fb      	ldrb	r3, [r7, #7]
}
 81019c4:	4618      	mov	r0, r3
 81019c6:	3708      	adds	r7, #8
 81019c8:	46bd      	mov	sp, r7
 81019ca:	bd80      	pop	{r7, pc}

081019cc <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 81019cc:	b580      	push	{r7, lr}
 81019ce:	b084      	sub	sp, #16
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	60f8      	str	r0, [r7, #12]
 81019d4:	60b9      	str	r1, [r7, #8]
 81019d6:	607a      	str	r2, [r7, #4]
 81019d8:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 81019da:	68f8      	ldr	r0, [r7, #12]
 81019dc:	68bb      	ldr	r3, [r7, #8]
 81019de:	2202      	movs	r2, #2
 81019e0:	2102      	movs	r1, #2
 81019e2:	f00d fafb 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 81019e6:	68fb      	ldr	r3, [r7, #12]
 81019e8:	f103 0008 	add.w	r0, r3, #8
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	2201      	movs	r2, #1
 81019f0:	2102      	movs	r1, #2
 81019f2:	f00d faf3 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 81019f6:	68fb      	ldr	r3, [r7, #12]
 81019f8:	f103 0010 	add.w	r0, r3, #16
 81019fc:	683b      	ldr	r3, [r7, #0]
 81019fe:	2202      	movs	r2, #2
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00d faeb 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	f103 0018 	add.w	r0, r3, #24
 8101a0c:	69bb      	ldr	r3, [r7, #24]
 8101a0e:	2202      	movs	r2, #2
 8101a10:	2102      	movs	r1, #2
 8101a12:	f00d fae3 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 8101a16:	68fb      	ldr	r3, [r7, #12]
 8101a18:	f103 0020 	add.w	r0, r3, #32
 8101a1c:	69fb      	ldr	r3, [r7, #28]
 8101a1e:	2202      	movs	r2, #2
 8101a20:	2102      	movs	r1, #2
 8101a22:	f00d fadb 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 8101a26:	68fb      	ldr	r3, [r7, #12]
 8101a28:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8101a2c:	6a3b      	ldr	r3, [r7, #32]
 8101a2e:	2202      	movs	r2, #2
 8101a30:	2102      	movs	r1, #2
 8101a32:	f00d fad3 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 8101a36:	68fb      	ldr	r3, [r7, #12]
 8101a38:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101a3e:	2201      	movs	r2, #1
 8101a40:	2102      	movs	r1, #2
 8101a42:	f00d facb 	bl	810efdc <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 8101a46:	68fb      	ldr	r3, [r7, #12]
 8101a48:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8101a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a50:	2202      	movs	r2, #2
 8101a52:	2102      	movs	r1, #2
 8101a54:	f00d fac2 	bl	810efdc <arm_mat_init_f32>

}
 8101a58:	bf00      	nop
 8101a5a:	3710      	adds	r7, #16
 8101a5c:	46bd      	mov	sp, r7
 8101a5e:	bd80      	pop	{r7, pc}

08101a60 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101a60:	b580      	push	{r7, lr}
 8101a62:	b09c      	sub	sp, #112	@ 0x70
 8101a64:	af00      	add	r7, sp, #0
 8101a66:	6078      	str	r0, [r7, #4]
 8101a68:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 8101a6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a6e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101a72:	2201      	movs	r2, #1
 8101a74:	2102      	movs	r1, #2
 8101a76:	f00d fab1 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 8101a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101a7e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101a82:	2201      	movs	r2, #1
 8101a84:	2102      	movs	r1, #2
 8101a86:	f00d faa9 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 8101a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a8e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101a92:	2202      	movs	r2, #2
 8101a94:	2102      	movs	r1, #2
 8101a96:	f00d faa1 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 8101a9a:	f107 0318 	add.w	r3, r7, #24
 8101a9e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101aa2:	2202      	movs	r2, #2
 8101aa4:	2102      	movs	r1, #2
 8101aa6:	f00d fa99 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 8101aaa:	f107 0308 	add.w	r3, r7, #8
 8101aae:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101ab2:	2202      	movs	r2, #2
 8101ab4:	2102      	movs	r1, #2
 8101ab6:	f00d fa91 	bl	810efdc <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 8101aba:	6878      	ldr	r0, [r7, #4]
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	3338      	adds	r3, #56	@ 0x38
 8101ac0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101ac4:	4619      	mov	r1, r3
 8101ac6:	f00d f8e3 	bl	810ec90 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	3308      	adds	r3, #8
 8101ace:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101ad2:	6839      	ldr	r1, [r7, #0]
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f00d f8db 	bl	810ec90 <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101ae0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101ae4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101ae8:	4618      	mov	r0, r3
 8101aea:	f00d fa7b 	bl	810efe4 <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 8101aee:	6878      	ldr	r0, [r7, #4]
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	3328      	adds	r3, #40	@ 0x28
 8101af4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101af8:	4619      	mov	r1, r3
 8101afa:	f00d f8c9 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8101b04:	4611      	mov	r1, r2
 8101b06:	4618      	mov	r0, r3
 8101b08:	f00c fffc 	bl	810eb04 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 8101b0c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8101b10:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101b14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101b18:	4618      	mov	r0, r3
 8101b1a:	f00d f8b9 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	f103 0118 	add.w	r1, r3, #24
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101b2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101b2e:	4618      	mov	r0, r3
 8101b30:	f00d fa58 	bl	810efe4 <arm_mat_add_f32>


}
 8101b34:	bf00      	nop
 8101b36:	3770      	adds	r7, #112	@ 0x70
 8101b38:	46bd      	mov	sp, r7
 8101b3a:	bd80      	pop	{r7, pc}

08101b3c <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 8101b3c:	b580      	push	{r7, lr}
 8101b3e:	b0dc      	sub	sp, #368	@ 0x170
 8101b40:	af00      	add	r7, sp, #0
 8101b42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b4a:	6018      	str	r0, [r3, #0]
 8101b4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b50:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101b54:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 8101b56:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8101b5a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8101b5e:	2202      	movs	r2, #2
 8101b60:	2102      	movs	r1, #2
 8101b62:	f00d fa3b 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101b66:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101b6a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101b6e:	2202      	movs	r2, #2
 8101b70:	2102      	movs	r1, #2
 8101b72:	f00d fa33 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101b76:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101b7a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101b7e:	2202      	movs	r2, #2
 8101b80:	2102      	movs	r1, #2
 8101b82:	f00d fa2b 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101b86:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101b8a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101b8e:	2202      	movs	r2, #2
 8101b90:	2102      	movs	r1, #2
 8101b92:	f00d fa23 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101b96:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101b9a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101b9e:	2202      	movs	r2, #2
 8101ba0:	2102      	movs	r1, #2
 8101ba2:	f00d fa1b 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101ba6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101baa:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101bae:	2202      	movs	r2, #2
 8101bb0:	2102      	movs	r1, #2
 8101bb2:	f00d fa13 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101bb6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101bba:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101bbe:	2202      	movs	r2, #2
 8101bc0:	2102      	movs	r1, #2
 8101bc2:	f00d fa0b 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101bc6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101bca:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101bce:	2202      	movs	r2, #2
 8101bd0:	2102      	movs	r1, #2
 8101bd2:	f00d fa03 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101bd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101bda:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101bde:	2202      	movs	r2, #2
 8101be0:	2102      	movs	r1, #2
 8101be2:	f00d f9fb 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101be6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101bea:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101bee:	2202      	movs	r2, #2
 8101bf0:	2102      	movs	r1, #2
 8101bf2:	f00d f9f3 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101bf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101bfa:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101bfe:	2202      	movs	r2, #2
 8101c00:	2102      	movs	r1, #2
 8101c02:	f00d f9eb 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101c06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101c0a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101c0e:	2202      	movs	r2, #2
 8101c10:	2102      	movs	r1, #2
 8101c12:	f00d f9e3 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101c16:	f107 0320 	add.w	r3, r7, #32
 8101c1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101c1e:	2202      	movs	r2, #2
 8101c20:	2102      	movs	r1, #2
 8101c22:	f00d f9db 	bl	810efdc <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101c26:	f107 0318 	add.w	r3, r7, #24
 8101c2a:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101c2e:	2201      	movs	r2, #1
 8101c30:	2102      	movs	r1, #2
 8101c32:	f00d f9d3 	bl	810efdc <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101c36:	f107 0310 	add.w	r3, r7, #16
 8101c3a:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101c3e:	2201      	movs	r2, #1
 8101c40:	2102      	movs	r1, #2
 8101c42:	f00d f9cb 	bl	810efdc <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101c46:	f107 0308 	add.w	r3, r7, #8
 8101c4a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101c4e:	2201      	movs	r2, #1
 8101c50:	2102      	movs	r1, #2
 8101c52:	f00d f9c3 	bl	810efdc <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101c56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	3310      	adds	r3, #16
 8101c62:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101c66:	4611      	mov	r1, r2
 8101c68:	4618      	mov	r0, r3
 8101c6a:	f00c ff4b 	bl	810eb04 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101c6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	3328      	adds	r3, #40	@ 0x28
 8101c7a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101c7e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101c82:	4618      	mov	r0, r3
 8101c84:	f00d f804 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101c88:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c8c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	3310      	adds	r3, #16
 8101c94:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101c98:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101c9c:	4618      	mov	r0, r3
 8101c9e:	f00c fff7 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101ca2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ca6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	f103 0120 	add.w	r1, r3, #32
 8101cb0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101cb4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101cb8:	4618      	mov	r0, r3
 8101cba:	f00d f993 	bl	810efe4 <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101cbe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101cc2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101cc6:	4611      	mov	r1, r2
 8101cc8:	4618      	mov	r0, r3
 8101cca:	f00d f881 	bl	810edd0 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101cce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101cdc:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101ce0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101ce4:	4618      	mov	r0, r3
 8101ce6:	f00c ffd3 	bl	810ec90 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101cea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	f103 0010 	add.w	r0, r3, #16
 8101cf8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	3338      	adds	r3, #56	@ 0x38
 8101d04:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101d08:	4619      	mov	r1, r3
 8101d0a:	f00c ffc1 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101d0e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101d12:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101d16:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101d1e:	6818      	ldr	r0, [r3, #0]
 8101d20:	f00c ff4c 	bl	810ebbc <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101d24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	3330      	adds	r3, #48	@ 0x30
 8101d30:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101d34:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101d38:	4618      	mov	r0, r3
 8101d3a:	f00c ffa9 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101d3e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d42:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101d4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101d5a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101d5e:	4619      	mov	r1, r3
 8101d60:	f00d f940 	bl	810efe4 <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101d64:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	3310      	adds	r3, #16
 8101d70:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101d74:	4611      	mov	r1, r2
 8101d76:	4618      	mov	r0, r3
 8101d78:	f00c fec4 	bl	810eb04 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101d7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	3328      	adds	r3, #40	@ 0x28
 8101d88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101d8c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101d90:	4618      	mov	r0, r3
 8101d92:	f00c ff7d 	bl	810ec90 <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101d96:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	3330      	adds	r3, #48	@ 0x30
 8101da2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101da6:	4611      	mov	r1, r2
 8101da8:	4618      	mov	r0, r3
 8101daa:	f00c feab 	bl	810eb04 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101dae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101db2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101db6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101dba:	4618      	mov	r0, r3
 8101dbc:	f00c ff68 	bl	810ec90 <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101dc0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	f103 0010 	add.w	r0, r3, #16
 8101dce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	3328      	adds	r3, #40	@ 0x28
 8101dda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101dde:	4619      	mov	r1, r3
 8101de0:	f00c ff56 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101de4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101de8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	3330      	adds	r3, #48	@ 0x30
 8101df0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101df4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101df8:	4618      	mov	r0, r3
 8101dfa:	f00c ff49 	bl	810ec90 <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101dfe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	f103 0010 	add.w	r0, r3, #16
 8101e0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e14:	681b      	ldr	r3, [r3, #0]
 8101e16:	3328      	adds	r3, #40	@ 0x28
 8101e18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e1c:	4619      	mov	r1, r3
 8101e1e:	f00c ff37 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101e22:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101e26:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101e2e:	4618      	mov	r0, r3
 8101e30:	f00c ff2e 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101e34:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e38:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e3c:	681b      	ldr	r3, [r3, #0]
 8101e3e:	f103 0120 	add.w	r1, r3, #32
 8101e42:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101e46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	f00d f8ca 	bl	810efe4 <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101e50:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e54:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e58:	681b      	ldr	r3, [r3, #0]
 8101e5a:	3330      	adds	r3, #48	@ 0x30
 8101e5c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101e60:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101e64:	4618      	mov	r0, r3
 8101e66:	f00c ff13 	bl	810ec90 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101e6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e6e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101e76:	4618      	mov	r0, r3
 8101e78:	f00c ff0a 	bl	810ec90 <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101e7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	3328      	adds	r3, #40	@ 0x28
 8101e88:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101e8c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101e90:	4618      	mov	r0, r3
 8101e92:	f00c fe93 	bl	810ebbc <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101e96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101e9a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101ea2:	4618      	mov	r0, r3
 8101ea4:	f00c fe8a 	bl	810ebbc <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101ea8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101eac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101eb6:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	f00d f890 	bl	810efe4 <arm_mat_add_f32>


}
 8101ec4:	bf00      	nop
 8101ec6:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101eca:	46bd      	mov	sp, r7
 8101ecc:	bd80      	pop	{r7, pc}

08101ece <voltToAmpere>:

	// Restituisci la media mobile
	return somma / count;
}

float voltToAmpere(float Volt, float a, float b) {
 8101ece:	b480      	push	{r7}
 8101ed0:	b087      	sub	sp, #28
 8101ed2:	af00      	add	r7, sp, #0
 8101ed4:	ed87 0a03 	vstr	s0, [r7, #12]
 8101ed8:	edc7 0a02 	vstr	s1, [r7, #8]
 8101edc:	ed87 1a01 	vstr	s2, [r7, #4]
	//float ampere = (Volt-2.47)/0.22;  //a3b RESISTENZA
	//float ampere = Volt*1.25994074 - 3.1119; //a3b MOTORE
	//float ampere = (Volt -2.53)/0.8 + 0.095 + 0.065 + 0.07 ;
	float ampere = (Volt - a) / b;
 8101ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8101ee4:	edd7 7a02 	vldr	s15, [r7, #8]
 8101ee8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8101eec:	ed97 7a01 	vldr	s14, [r7, #4]
 8101ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101ef4:	edc7 7a05 	vstr	s15, [r7, #20]

	//float ampere = 2.3*Volt - 5.75;   //a4b DA RIVEDERE
	//float ampere = (Volt-2.48)/0.185; //sensore ACS712 05b
	return ampere;
 8101ef8:	697b      	ldr	r3, [r7, #20]
 8101efa:	ee07 3a90 	vmov	s15, r3
}
 8101efe:	eeb0 0a67 	vmov.f32	s0, s15
 8101f02:	371c      	adds	r7, #28
 8101f04:	46bd      	mov	sp, r7
 8101f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f0a:	4770      	bx	lr

08101f0c <getSpeed>:
	return ((float) rand() / RAND_MAX) * (max - min) + min;
}

//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101f0c:	b480      	push	{r7}
 8101f0e:	b085      	sub	sp, #20
 8101f10:	af00      	add	r7, sp, #0
 8101f12:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 6; //secondi di rampa
 8101f16:	4b13      	ldr	r3, [pc, #76]	@ (8101f64 <getSpeed+0x58>)
 8101f18:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101f1a:	4b13      	ldr	r3, [pc, #76]	@ (8101f68 <getSpeed+0x5c>)
 8101f1c:	edd3 7a00 	vldr	s15, [r3]
 8101f20:	ed97 7a01 	vldr	s14, [r7, #4]
 8101f24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f2c:	d50f      	bpl.n	8101f4e <getSpeed+0x42>
		return actual_speed + speed * dt / ramp_time;
 8101f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8101f68 <getSpeed+0x5c>)
 8101f30:	edd3 7a00 	vldr	s15, [r3]
 8101f34:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8101f6c <getSpeed+0x60>
 8101f38:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101f3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8101f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8101f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f4c:	e002      	b.n	8101f54 <getSpeed+0x48>
	} else
		return speed;
 8101f4e:	4b06      	ldr	r3, [pc, #24]	@ (8101f68 <getSpeed+0x5c>)
 8101f50:	edd3 7a00 	vldr	s15, [r3]
}
 8101f54:	eeb0 0a67 	vmov.f32	s0, s15
 8101f58:	3714      	adds	r7, #20
 8101f5a:	46bd      	mov	sp, r7
 8101f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f60:	4770      	bx	lr
 8101f62:	bf00      	nop
 8101f64:	40c00000 	.word	0x40c00000
 8101f68:	10000014 	.word	0x10000014
 8101f6c:	3c23d70a 	.word	0x3c23d70a

08101f70 <filtro_media_mobile>:
//******************

float filtro_media_mobile(float *vettorenuovo, float *vettorevecchio,
		float nuovamisurazione, int dimensione) {
 8101f70:	b480      	push	{r7}
 8101f72:	b089      	sub	sp, #36	@ 0x24
 8101f74:	af00      	add	r7, sp, #0
 8101f76:	60f8      	str	r0, [r7, #12]
 8101f78:	60b9      	str	r1, [r7, #8]
 8101f7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8101f7e:	603a      	str	r2, [r7, #0]
	vettorenuovo[0] = nuovamisurazione;
 8101f80:	68fb      	ldr	r3, [r7, #12]
 8101f82:	687a      	ldr	r2, [r7, #4]
 8101f84:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101f86:	2300      	movs	r3, #0
 8101f88:	61fb      	str	r3, [r7, #28]
 8101f8a:	e00d      	b.n	8101fa8 <filtro_media_mobile+0x38>

		vettorenuovo[i + 1] = vettorevecchio[i]; // dal 2 al n-1 esimo valore si ricopiano i valori vecchi
 8101f8c:	69fb      	ldr	r3, [r7, #28]
 8101f8e:	009b      	lsls	r3, r3, #2
 8101f90:	68ba      	ldr	r2, [r7, #8]
 8101f92:	441a      	add	r2, r3
 8101f94:	69fb      	ldr	r3, [r7, #28]
 8101f96:	3301      	adds	r3, #1
 8101f98:	009b      	lsls	r3, r3, #2
 8101f9a:	68f9      	ldr	r1, [r7, #12]
 8101f9c:	440b      	add	r3, r1
 8101f9e:	6812      	ldr	r2, [r2, #0]
 8101fa0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101fa2:	69fb      	ldr	r3, [r7, #28]
 8101fa4:	3301      	adds	r3, #1
 8101fa6:	61fb      	str	r3, [r7, #28]
 8101fa8:	683b      	ldr	r3, [r7, #0]
 8101faa:	3b01      	subs	r3, #1
 8101fac:	69fa      	ldr	r2, [r7, #28]
 8101fae:	429a      	cmp	r2, r3
 8101fb0:	dbec      	blt.n	8101f8c <filtro_media_mobile+0x1c>
	}

	float somma = 0;
 8101fb2:	f04f 0300 	mov.w	r3, #0
 8101fb6:	61bb      	str	r3, [r7, #24]
	float media;
	for (int i = 0; i < dimensione; i++) {
 8101fb8:	2300      	movs	r3, #0
 8101fba:	617b      	str	r3, [r7, #20]
 8101fbc:	e018      	b.n	8101ff0 <filtro_media_mobile+0x80>
		vettorevecchio[i] = vettorenuovo[i]; //copia il vettore nuovo nel vecchio
 8101fbe:	697b      	ldr	r3, [r7, #20]
 8101fc0:	009b      	lsls	r3, r3, #2
 8101fc2:	68fa      	ldr	r2, [r7, #12]
 8101fc4:	441a      	add	r2, r3
 8101fc6:	697b      	ldr	r3, [r7, #20]
 8101fc8:	009b      	lsls	r3, r3, #2
 8101fca:	68b9      	ldr	r1, [r7, #8]
 8101fcc:	440b      	add	r3, r1
 8101fce:	6812      	ldr	r2, [r2, #0]
 8101fd0:	601a      	str	r2, [r3, #0]
		somma += vettorenuovo[i];           //calcola la somma di tutti i valori
 8101fd2:	697b      	ldr	r3, [r7, #20]
 8101fd4:	009b      	lsls	r3, r3, #2
 8101fd6:	68fa      	ldr	r2, [r7, #12]
 8101fd8:	4413      	add	r3, r2
 8101fda:	edd3 7a00 	vldr	s15, [r3]
 8101fde:	ed97 7a06 	vldr	s14, [r7, #24]
 8101fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101fe6:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < dimensione; i++) {
 8101fea:	697b      	ldr	r3, [r7, #20]
 8101fec:	3301      	adds	r3, #1
 8101fee:	617b      	str	r3, [r7, #20]
 8101ff0:	697a      	ldr	r2, [r7, #20]
 8101ff2:	683b      	ldr	r3, [r7, #0]
 8101ff4:	429a      	cmp	r2, r3
 8101ff6:	dbe2      	blt.n	8101fbe <filtro_media_mobile+0x4e>
		// printf("%f.3 vet ", vettorenuovo[i]);
	}

	media = somma / dimensione;
 8101ff8:	683b      	ldr	r3, [r7, #0]
 8101ffa:	ee07 3a90 	vmov	s15, r3
 8101ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102002:	edd7 6a06 	vldr	s13, [r7, #24]
 8102006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810200a:	edc7 7a04 	vstr	s15, [r7, #16]
	return media;
 810200e:	693b      	ldr	r3, [r7, #16]
 8102010:	ee07 3a90 	vmov	s15, r3
}
 8102014:	eeb0 0a67 	vmov.f32	s0, s15
 8102018:	3724      	adds	r7, #36	@ 0x24
 810201a:	46bd      	mov	sp, r7
 810201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102020:	4770      	bx	lr
 8102022:	0000      	movs	r0, r0
 8102024:	0000      	movs	r0, r0
	...

08102028 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8102028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810202c:	b0ad      	sub	sp, #180	@ 0xb4
 810202e:	af12      	add	r7, sp, #72	@ 0x48

	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8102030:	4b14      	ldr	r3, [pc, #80]	@ (8102084 <main+0x5c>)
 8102032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102036:	4a13      	ldr	r2, [pc, #76]	@ (8102084 <main+0x5c>)
 8102038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810203c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102040:	4b10      	ldr	r3, [pc, #64]	@ (8102084 <main+0x5c>)
 8102042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810204a:	63bb      	str	r3, [r7, #56]	@ 0x38
 810204c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810204e:	2001      	movs	r0, #1
 8102050:	f004 fef6 	bl	8106e40 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8102054:	f005 fd82 	bl	8107b5c <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8102058:	2201      	movs	r2, #1
 810205a:	2102      	movs	r1, #2
 810205c:	2000      	movs	r0, #0
 810205e:	f005 fd03 	bl	8107a68 <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102062:	4b09      	ldr	r3, [pc, #36]	@ (8102088 <main+0x60>)
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	091b      	lsrs	r3, r3, #4
 8102068:	f003 030f 	and.w	r3, r3, #15
 810206c:	2b07      	cmp	r3, #7
 810206e:	d10f      	bne.n	8102090 <main+0x68>
 8102070:	4b06      	ldr	r3, [pc, #24]	@ (810208c <main+0x64>)
 8102072:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8102076:	4a05      	ldr	r2, [pc, #20]	@ (810208c <main+0x64>)
 8102078:	f043 0301 	orr.w	r3, r3, #1
 810207c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8102080:	e00e      	b.n	81020a0 <main+0x78>
 8102082:	bf00      	nop
 8102084:	58024400 	.word	0x58024400
 8102088:	e000ed00 	.word	0xe000ed00
 810208c:	58026400 	.word	0x58026400
 8102090:	4bbc      	ldr	r3, [pc, #752]	@ (8102384 <main+0x35c>)
 8102092:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8102096:	4abb      	ldr	r2, [pc, #748]	@ (8102384 <main+0x35c>)
 8102098:	f043 0301 	orr.w	r3, r3, #1
 810209c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 81020a0:	f002 f896 	bl	81041d0 <HAL_Init>

	/* USER CODE BEGIN Init */
	MX_GPIO_Init();
 81020a4:	f001 fa74 	bl	8103590 <MX_GPIO_Init>
	/* USER CODE END Init */

	/* USER CODE BEGIN SysInit */

	arm_fir_init_f32(&fir_instance, FIR_LENGHT, fir_coefficients, fir_state, 1);
 81020a8:	2301      	movs	r3, #1
 81020aa:	9300      	str	r3, [sp, #0]
 81020ac:	4bb6      	ldr	r3, [pc, #728]	@ (8102388 <main+0x360>)
 81020ae:	4ab7      	ldr	r2, [pc, #732]	@ (810238c <main+0x364>)
 81020b0:	2103      	movs	r1, #3
 81020b2:	48b7      	ldr	r0, [pc, #732]	@ (8102390 <main+0x368>)
 81020b4:	f00d f800 	bl	810f0b8 <arm_fir_init_f32>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_USART3_UART_Init();
 81020b8:	f001 fa1e 	bl	81034f8 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 81020bc:	f000 ff38 	bl	8102f30 <MX_I2C1_Init>
	MX_TIM1_Init();
 81020c0:	f000 ff76 	bl	8102fb0 <MX_TIM1_Init>
	MX_TIM2_Init();
 81020c4:	f001 f820 	bl	8103108 <MX_TIM2_Init>
	MX_TIM4_Init();
 81020c8:	f001 f8e2 	bl	8103290 <MX_TIM4_Init>
	MX_ADC1_Init();
 81020cc:	f000 feb8 	bl	8102e40 <MX_ADC1_Init>
	MX_TIM3_Init();
 81020d0:	f001 f868 	bl	81031a4 <MX_TIM3_Init>
	MX_TIM8_Init();
 81020d4:	f001 f96a 	bl	81033ac <MX_TIM8_Init>
	MX_TIM6_Init();
 81020d8:	f001 f930 	bl	810333c <MX_TIM6_Init>
	MX_USART2_UART_Init();
 81020dc:	f001 f9c0 	bl	8103460 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 81020e0:	48ac      	ldr	r0, [pc, #688]	@ (8102394 <main+0x36c>)
 81020e2:	f008 fce7 	bl	810aab4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81020e6:	2100      	movs	r1, #0
 81020e8:	48ab      	ldr	r0, [pc, #684]	@ (8102398 <main+0x370>)
 81020ea:	f008 fdbd 	bl	810ac68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 81020ee:	2100      	movs	r1, #0
 81020f0:	48aa      	ldr	r0, [pc, #680]	@ (810239c <main+0x374>)
 81020f2:	f008 fdb9 	bl	810ac68 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 81020f6:	48aa      	ldr	r0, [pc, #680]	@ (81023a0 <main+0x378>)
 81020f8:	f008 fc6c 	bl	810a9d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 81020fc:	48a9      	ldr	r0, [pc, #676]	@ (81023a4 <main+0x37c>)
 81020fe:	f008 fc69 	bl	810a9d4 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8102102:	48a9      	ldr	r0, [pc, #676]	@ (81023a8 <main+0x380>)
 8102104:	f008 fcd6 	bl	810aab4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1);
 8102108:	2201      	movs	r2, #1
 810210a:	49a8      	ldr	r1, [pc, #672]	@ (81023ac <main+0x384>)
 810210c:	48a8      	ldr	r0, [pc, #672]	@ (81023b0 <main+0x388>)
 810210e:	f00a f9a9 	bl	810c464 <HAL_UART_Receive_IT>

	srand(1233);
 8102112:	f240 40d1 	movw	r0, #1233	@ 0x4d1
 8102116:	f00c ffdf 	bl	810f0d8 <srand>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 810211a:	48a6      	ldr	r0, [pc, #664]	@ (81023b4 <main+0x38c>)
 810211c:	f7ff fbae 	bl	810187c <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 8102120:	f7ff f9cd 	bl	81014be <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 8102124:	2000      	movs	r0, #0
 8102126:	f7ff fc1f 	bl	8101968 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 810212a:	f7ff fc3c 	bl	81019a6 <bno055_getPowerMode>
 810212e:	4603      	mov	r3, r0
 8102130:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 8102134:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8102138:	4619      	mov	r1, r3
 810213a:	489f      	ldr	r0, [pc, #636]	@ (81023b8 <main+0x390>)
 810213c:	f00d ff28 	bl	810ff90 <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 8102140:	f7ff f9aa 	bl	8101498 <bno055_setOperationModeNDOF>

	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 8102144:	f7ff f9d8 	bl	81014f8 <bno055_getCalibrationState>
 8102148:	4603      	mov	r3, r0
 810214a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	//		cal.gyro, cal.accel, cal.mag, cal.sys);
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 810214c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 81023bc <main+0x394>
 8102150:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 8102154:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8102158:	eeb0 0a67 	vmov.f32	s0, s15
 810215c:	4898      	ldr	r0, [pc, #608]	@ (81023c0 <main+0x398>)
 810215e:	f7ff f8d3 	bl	8101308 <init_PID>
	tune_PID(&pid_speed, 7, 6, 0);
 8102162:	ed9f 1a98 	vldr	s2, [pc, #608]	@ 81023c4 <main+0x39c>
 8102166:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 810216a:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 810216e:	4894      	ldr	r0, [pc, #592]	@ (81023c0 <main+0x398>)
 8102170:	f7ff f8eb 	bl	810134a <tune_PID>
	//*************************

	init_PID(&pid_yaw_rate, dt, 45, -45);
 8102174:	eddf 7a91 	vldr	s15, [pc, #580]	@ 81023bc <main+0x394>
 8102178:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 81023c8 <main+0x3a0>
 810217c:	eddf 0a93 	vldr	s1, [pc, #588]	@ 81023cc <main+0x3a4>
 8102180:	eeb0 0a67 	vmov.f32	s0, s15
 8102184:	4892      	ldr	r0, [pc, #584]	@ (81023d0 <main+0x3a8>)
 8102186:	f7ff f8bf 	bl	8101308 <init_PID>
	//	tune_PID(&pid_roll, 0.00012*3,00012/10/3,00012/10); //prova ad alzare
	tune_PID(&pid_yaw_rate, 1.1, 19, 0.12);
 810218a:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 81023d4 <main+0x3ac>
 810218e:	eef3 0a03 	vmov.f32	s1, #51	@ 0x41980000  19.0
 8102192:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 81023d8 <main+0x3b0>
 8102196:	488e      	ldr	r0, [pc, #568]	@ (81023d0 <main+0x3a8>)
 8102198:	f7ff f8d7 	bl	810134a <tune_PID>
	//*************************
	//PID angolo roll
	init_PID(&pid_roll, dt, 10 * K, -10 * K);
 810219c:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 81023bc <main+0x394>
 81021a0:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 81023dc <main+0x3b4>
 81021a4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 81021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81021ac:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 81023dc <main+0x3b4>
 81021b0:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 81021b4:	ee26 7a87 	vmul.f32	s14, s13, s14
 81021b8:	eeb0 1a47 	vmov.f32	s2, s14
 81021bc:	eef0 0a67 	vmov.f32	s1, s15
 81021c0:	eeb0 0a46 	vmov.f32	s0, s12
 81021c4:	4886      	ldr	r0, [pc, #536]	@ (81023e0 <main+0x3b8>)
 81021c6:	f7ff f89f 	bl	8101308 <init_PID>
	tune_PID(&pid_roll, 0.00011, 0, 0); //prova ad alzare
 81021ca:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 81023c4 <main+0x39c>
 81021ce:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 81023c4 <main+0x39c>
 81021d2:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 81023e4 <main+0x3bc>
 81021d6:	4882      	ldr	r0, [pc, #520]	@ (81023e0 <main+0x3b8>)
 81021d8:	f7ff f8b7 	bl	810134a <tune_PID>
	//tune_PID(&pid_roll, 0.00015,0.00012/400,0.00012*225*10*3*5);
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 81021dc:	eddf 7a77 	vldr	s15, [pc, #476]	@ 81023bc <main+0x394>
 81021e0:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 81021e4:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 81021e8:	eeb0 0a67 	vmov.f32	s0, s15
 81021ec:	487e      	ldr	r0, [pc, #504]	@ (81023e8 <main+0x3c0>)
 81021ee:	f7ff f88b 	bl	8101308 <init_PID>
	tune_PID(&pid_steering_torque, 30000, 20000 * 5, 0);
 81021f2:	ed9f 1a74 	vldr	s2, [pc, #464]	@ 81023c4 <main+0x39c>
 81021f6:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 81023ec <main+0x3c4>
 81021fa:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 81023f0 <main+0x3c8>
 81021fe:	487a      	ldr	r0, [pc, #488]	@ (81023e8 <main+0x3c0>)
 8102200:	f7ff f8a3 	bl	810134a <tune_PID>

	//*************************

	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 8102204:	4b7b      	ldr	r3, [pc, #492]	@ (81023f4 <main+0x3cc>)
 8102206:	2201      	movs	r2, #1
 8102208:	2101      	movs	r1, #1
 810220a:	487b      	ldr	r0, [pc, #492]	@ (81023f8 <main+0x3d0>)
 810220c:	f00c fee6 	bl	810efdc <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 8102210:	4b7a      	ldr	r3, [pc, #488]	@ (81023fc <main+0x3d4>)
 8102212:	2201      	movs	r2, #1
 8102214:	2102      	movs	r1, #2
 8102216:	487a      	ldr	r0, [pc, #488]	@ (8102400 <main+0x3d8>)
 8102218:	f00c fee0 	bl	810efdc <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 810221c:	4b79      	ldr	r3, [pc, #484]	@ (8102404 <main+0x3dc>)
 810221e:	9304      	str	r3, [sp, #16]
 8102220:	4b79      	ldr	r3, [pc, #484]	@ (8102408 <main+0x3e0>)
 8102222:	9303      	str	r3, [sp, #12]
 8102224:	4b79      	ldr	r3, [pc, #484]	@ (810240c <main+0x3e4>)
 8102226:	9302      	str	r3, [sp, #8]
 8102228:	4b79      	ldr	r3, [pc, #484]	@ (8102410 <main+0x3e8>)
 810222a:	9301      	str	r3, [sp, #4]
 810222c:	4b79      	ldr	r3, [pc, #484]	@ (8102414 <main+0x3ec>)
 810222e:	9300      	str	r3, [sp, #0]
 8102230:	4b79      	ldr	r3, [pc, #484]	@ (8102418 <main+0x3f0>)
 8102232:	4a7a      	ldr	r2, [pc, #488]	@ (810241c <main+0x3f4>)
 8102234:	497a      	ldr	r1, [pc, #488]	@ (8102420 <main+0x3f8>)
 8102236:	487b      	ldr	r0, [pc, #492]	@ (8102424 <main+0x3fc>)
 8102238:	f7ff fbc8 	bl	81019cc <kalman_filter_init>
			&P_data, &K_data, &x_data);
	u_data[0] = -dt * lambda * b / (1 - dt * lambda);
 810223c:	eddf 7a5f 	vldr	s15, [pc, #380]	@ 81023bc <main+0x394>
 8102240:	eef1 7a67 	vneg.f32	s15, s15
 8102244:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8102428 <main+0x400>
 8102248:	ee27 7a87 	vmul.f32	s14, s15, s14
 810224c:	4b77      	ldr	r3, [pc, #476]	@ (810242c <main+0x404>)
 810224e:	edd3 7a00 	vldr	s15, [r3]
 8102252:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102256:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 81023bc <main+0x394>
 810225a:	eddf 7a73 	vldr	s15, [pc, #460]	@ 8102428 <main+0x400>
 810225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102266:	ee37 7a67 	vsub.f32	s14, s14, s15
 810226a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810226e:	4b61      	ldr	r3, [pc, #388]	@ (81023f4 <main+0x3cc>)
 8102270:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (flag_Tc == 1) {
 8102274:	4b6e      	ldr	r3, [pc, #440]	@ (8102430 <main+0x408>)
 8102276:	edd3 7a00 	vldr	s15, [r3]
 810227a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810227e:	eef4 7a47 	vcmp.f32	s15, s14
 8102282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102286:	d1f5      	bne.n	8102274 <main+0x24c>
			flag_Tc = 0;
 8102288:	4b69      	ldr	r3, [pc, #420]	@ (8102430 <main+0x408>)
 810228a:	f04f 0200 	mov.w	r2, #0
 810228e:	601a      	str	r2, [r3, #0]

			if ((tasto_premuto == 1) && (tasto_appena_premuto == 1)) {
 8102290:	4b68      	ldr	r3, [pc, #416]	@ (8102434 <main+0x40c>)
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	2b01      	cmp	r3, #1
 8102296:	d113      	bne.n	81022c0 <main+0x298>
 8102298:	4b67      	ldr	r3, [pc, #412]	@ (8102438 <main+0x410>)
 810229a:	681b      	ldr	r3, [r3, #0]
 810229c:	2b01      	cmp	r3, #1
 810229e:	d10f      	bne.n	81022c0 <main+0x298>
				tempo_iniziale = n_ref * dt;
 81022a0:	4b66      	ldr	r3, [pc, #408]	@ (810243c <main+0x414>)
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	ee07 3a90 	vmov	s15, r3
 81022a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81022ac:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 81023bc <main+0x394>
 81022b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 81022b4:	4b62      	ldr	r3, [pc, #392]	@ (8102440 <main+0x418>)
 81022b6:	edc3 7a00 	vstr	s15, [r3]
				tasto_appena_premuto = 2;
 81022ba:	4b5f      	ldr	r3, [pc, #380]	@ (8102438 <main+0x410>)
 81022bc:	2202      	movs	r2, #2
 81022be:	601a      	str	r2, [r3, #0]
			}

			if ((tasto_premuto == 1) && (tasto_appena_premuto == 2)) {
 81022c0:	4b5c      	ldr	r3, [pc, #368]	@ (8102434 <main+0x40c>)
 81022c2:	681b      	ldr	r3, [r3, #0]
 81022c4:	2b01      	cmp	r3, #1
 81022c6:	d142      	bne.n	810234e <main+0x326>
 81022c8:	4b5b      	ldr	r3, [pc, #364]	@ (8102438 <main+0x410>)
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	2b02      	cmp	r3, #2
 81022ce:	d13e      	bne.n	810234e <main+0x326>
				tempo_attuale = n_ref * dt;
 81022d0:	4b5a      	ldr	r3, [pc, #360]	@ (810243c <main+0x414>)
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	ee07 3a90 	vmov	s15, r3
 81022d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81022dc:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 81023bc <main+0x394>
 81022e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 81022e4:	4b57      	ldr	r3, [pc, #348]	@ (8102444 <main+0x41c>)
 81022e6:	edc3 7a00 	vstr	s15, [r3]
				if (tempo_attuale - tempo_iniziale >= 3) {
 81022ea:	4b56      	ldr	r3, [pc, #344]	@ (8102444 <main+0x41c>)
 81022ec:	ed93 7a00 	vldr	s14, [r3]
 81022f0:	4b53      	ldr	r3, [pc, #332]	@ (8102440 <main+0x418>)
 81022f2:	edd3 7a00 	vldr	s15, [r3]
 81022f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81022fa:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 81022fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102306:	db22      	blt.n	810234e <main+0x326>
					sys_started++;
 8102308:	4b4f      	ldr	r3, [pc, #316]	@ (8102448 <main+0x420>)
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	3301      	adds	r3, #1
 810230e:	4a4e      	ldr	r2, [pc, #312]	@ (8102448 <main+0x420>)
 8102310:	6013      	str	r3, [r2, #0]

					if (sys_started == 1) {
 8102312:	4b4d      	ldr	r3, [pc, #308]	@ (8102448 <main+0x420>)
 8102314:	681b      	ldr	r3, [r3, #0]
 8102316:	2b01      	cmp	r3, #1
 8102318:	d105      	bne.n	8102326 <main+0x2fe>
						stadio = 0;
 810231a:	4b4c      	ldr	r3, [pc, #304]	@ (810244c <main+0x424>)
 810231c:	2200      	movs	r2, #0
 810231e:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 8102320:	4b46      	ldr	r3, [pc, #280]	@ (810243c <main+0x414>)
 8102322:	2200      	movs	r2, #0
 8102324:	601a      	str	r2, [r3, #0]
					}
					if (sys_started == 2) {
 8102326:	4b48      	ldr	r3, [pc, #288]	@ (8102448 <main+0x420>)
 8102328:	681b      	ldr	r3, [r3, #0]
 810232a:	2b02      	cmp	r3, #2
 810232c:	d105      	bne.n	810233a <main+0x312>
						stadio = 0;
 810232e:	4b47      	ldr	r3, [pc, #284]	@ (810244c <main+0x424>)
 8102330:	2200      	movs	r2, #0
 8102332:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 8102334:	4b41      	ldr	r3, [pc, #260]	@ (810243c <main+0x414>)
 8102336:	2200      	movs	r2, #0
 8102338:	601a      	str	r2, [r3, #0]
					}
					if (sys_started == 3)
 810233a:	4b43      	ldr	r3, [pc, #268]	@ (8102448 <main+0x420>)
 810233c:	681b      	ldr	r3, [r3, #0]
 810233e:	2b03      	cmp	r3, #3
 8102340:	d102      	bne.n	8102348 <main+0x320>
						sys_started = 0;
 8102342:	4b41      	ldr	r3, [pc, #260]	@ (8102448 <main+0x420>)
 8102344:	2200      	movs	r2, #0
 8102346:	601a      	str	r2, [r3, #0]
					tasto_premuto = 0;
 8102348:	4b3a      	ldr	r3, [pc, #232]	@ (8102434 <main+0x40c>)
 810234a:	2200      	movs	r2, #0
 810234c:	601a      	str	r2, [r3, #0]
			//#####################################
			//##             BNO055			   ##
			//#####################################
			//*******************************

			flag_BNO055_Data_Ready = 1; //perche non va mai a 1 non ho capito perche
 810234e:	4b40      	ldr	r3, [pc, #256]	@ (8102450 <main+0x428>)
 8102350:	2201      	movs	r2, #1
 8102352:	601a      	str	r2, [r3, #0]
			if (flag_BNO055_Data_Ready == 1) {
 8102354:	4b3e      	ldr	r3, [pc, #248]	@ (8102450 <main+0x428>)
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	2b01      	cmp	r3, #1
 810235a:	d18b      	bne.n	8102274 <main+0x24c>
				flag_BNO055_Data_Ready = 0;
 810235c:	4b3c      	ldr	r3, [pc, #240]	@ (8102450 <main+0x428>)
 810235e:	2200      	movs	r2, #0
 8102360:	601a      	str	r2, [r3, #0]

				bno055_writeData(BNO055_SYS_TRIGGER, 0x40); //reset int
 8102362:	2140      	movs	r1, #64	@ 0x40
 8102364:	203f      	movs	r0, #63	@ 0x3f
 8102366:	f7ff faa5 	bl	81018b4 <bno055_writeData>
				bno055_calibration_state_t cal = bno055_getCalibrationState();
 810236a:	f7ff f8c5 	bl	81014f8 <bno055_getCalibrationState>
 810236e:	4603      	mov	r3, r0
 8102370:	637b      	str	r3, [r7, #52]	@ 0x34

				if (cal.sys != 3) {
 8102372:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8102376:	2b03      	cmp	r3, #3
 8102378:	d06e      	beq.n	8102458 <main+0x430>
					// printf("GYR : %+2.2d | ACC : %+2.2d | MAG : %+2.2d | %+2.2d\r\n",
					// cal.gyro, cal.accel, cal.mag, cal.sys);
					bno055_calibrated = 1;
 810237a:	4b36      	ldr	r3, [pc, #216]	@ (8102454 <main+0x42c>)
 810237c:	2201      	movs	r2, #1
 810237e:	601a      	str	r2, [r3, #0]
 8102380:	e06d      	b.n	810245e <main+0x436>
 8102382:	bf00      	nop
 8102384:	58026400 	.word	0x58026400
 8102388:	10008b04 	.word	0x10008b04
 810238c:	10000090 	.word	0x10000090
 8102390:	10008af8 	.word	0x10008af8
 8102394:	10000394 	.word	0x10000394
 8102398:	10000348 	.word	0x10000348
 810239c:	100003e0 	.word	0x100003e0
 81023a0:	1000042c 	.word	0x1000042c
 81023a4:	100004c4 	.word	0x100004c4
 81023a8:	10000478 	.word	0x10000478
 81023ac:	10008a48 	.word	0x10008a48
 81023b0:	10000510 	.word	0x10000510
 81023b4:	100002f4 	.word	0x100002f4
 81023b8:	08113900 	.word	0x08113900
 81023bc:	3c23d70a 	.word	0x3c23d70a
 81023c0:	10008728 	.word	0x10008728
 81023c4:	00000000 	.word	0x00000000
 81023c8:	c2340000 	.word	0xc2340000
 81023cc:	42340000 	.word	0x42340000
 81023d0:	10008748 	.word	0x10008748
 81023d4:	3df5c28f 	.word	0x3df5c28f
 81023d8:	3f8ccccd 	.word	0x3f8ccccd
 81023dc:	3cbfb15b 	.word	0x3cbfb15b
 81023e0:	10008768 	.word	0x10008768
 81023e4:	38e6afcd 	.word	0x38e6afcd
 81023e8:	10008788 	.word	0x10008788
 81023ec:	47c35000 	.word	0x47c35000
 81023f0:	46ea6000 	.word	0x46ea6000
 81023f4:	10008ae8 	.word	0x10008ae8
 81023f8:	10008ad8 	.word	0x10008ad8
 81023fc:	10008aec 	.word	0x10008aec
 8102400:	10008ae0 	.word	0x10008ae0
 8102404:	10008ad0 	.word	0x10008ad0
 8102408:	10000080 	.word	0x10000080
 810240c:	10000070 	.word	0x10000070
 8102410:	10000060 	.word	0x10000060
 8102414:	10000050 	.word	0x10000050
 8102418:	10000040 	.word	0x10000040
 810241c:	10000038 	.word	0x10000038
 8102420:	10000028 	.word	0x10000028
 8102424:	10008a90 	.word	0x10008a90
 8102428:	c93b6280 	.word	0xc93b6280
 810242c:	10000024 	.word	0x10000024
 8102430:	100087ac 	.word	0x100087ac
 8102434:	10008800 	.word	0x10008800
 8102438:	10008804 	.word	0x10008804
 810243c:	10008a40 	.word	0x10008a40
 8102440:	100087fc 	.word	0x100087fc
 8102444:	100087f8 	.word	0x100087f8
 8102448:	100087ec 	.word	0x100087ec
 810244c:	10008af4 	.word	0x10008af4
 8102450:	100087a8 	.word	0x100087a8
 8102454:	100087e4 	.word	0x100087e4
				} else
					bno055_calibrated = 1;
 8102458:	4bc5      	ldr	r3, [pc, #788]	@ (8102770 <main+0x748>)
 810245a:	2201      	movs	r2, #1
 810245c:	601a      	str	r2, [r3, #0]

				//bno055_calibrated = 1; //da togliere
				if (bno055_calibrated) {
 810245e:	4bc4      	ldr	r3, [pc, #784]	@ (8102770 <main+0x748>)
 8102460:	681b      	ldr	r3, [r3, #0]
 8102462:	2b00      	cmp	r3, #0
 8102464:	f000 84b2 	beq.w	8102dcc <main+0xda4>
					eul = bno055_getVectorEuler();
 8102468:	f7ff f9c4 	bl	81017f4 <bno055_getVectorEuler>
 810246c:	eeb0 4a40 	vmov.f32	s8, s0
 8102470:	eef0 4a60 	vmov.f32	s9, s1
 8102474:	eeb0 5a41 	vmov.f32	s10, s2
 8102478:	eef0 5a61 	vmov.f32	s11, s3
 810247c:	eeb0 6a42 	vmov.f32	s12, s4
 8102480:	eef0 6a62 	vmov.f32	s13, s5
 8102484:	eeb0 7a43 	vmov.f32	s14, s6
 8102488:	eef0 7a63 	vmov.f32	s15, s7
 810248c:	ed87 4b10 	vstr	d4, [r7, #64]	@ 0x40
 8102490:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8102494:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 8102498:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
					//stampa angoli eulero

					//printf("Yaw: %+2.2f Roll: %+2.2f Pitch: %+2.2f \r\n", eul.x, eul.y, eul.z);
					roll = -eul.y - 2; //ottengo angolo di eulero
 810249c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 81024a0:	62ba      	str	r2, [r7, #40]	@ 0x28
 81024a2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 81024a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81024a8:	f04f 0200 	mov.w	r2, #0
 81024ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81024b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 81024b4:	f7fd ff70 	bl	8100398 <__aeabi_dsub>
 81024b8:	4602      	mov	r2, r0
 81024ba:	460b      	mov	r3, r1
 81024bc:	4610      	mov	r0, r2
 81024be:	4619      	mov	r1, r3
 81024c0:	f7fe fc1a 	bl	8100cf8 <__aeabi_d2f>
 81024c4:	4603      	mov	r3, r0
 81024c6:	4aab      	ldr	r2, [pc, #684]	@ (8102774 <main+0x74c>)
 81024c8:	6013      	str	r3, [r2, #0]
					yaw = eul.x;
 81024ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 81024ce:	4610      	mov	r0, r2
 81024d0:	4619      	mov	r1, r3
 81024d2:	f7fe fc11 	bl	8100cf8 <__aeabi_d2f>
 81024d6:	4603      	mov	r3, r0
 81024d8:	4aa7      	ldr	r2, [pc, #668]	@ (8102778 <main+0x750>)
 81024da:	6013      	str	r3, [r2, #0]

					yaw_rate = (yaw - old_yaw) / dt;
 81024dc:	4ba6      	ldr	r3, [pc, #664]	@ (8102778 <main+0x750>)
 81024de:	ed93 7a00 	vldr	s14, [r3]
 81024e2:	4ba6      	ldr	r3, [pc, #664]	@ (810277c <main+0x754>)
 81024e4:	edd3 7a00 	vldr	s15, [r3]
 81024e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 81024ec:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8102780 <main+0x758>
 81024f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81024f4:	4ba3      	ldr	r3, [pc, #652]	@ (8102784 <main+0x75c>)
 81024f6:	edc3 7a00 	vstr	s15, [r3]
					old_yaw = yaw;
 81024fa:	4b9f      	ldr	r3, [pc, #636]	@ (8102778 <main+0x750>)
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	4a9f      	ldr	r2, [pc, #636]	@ (810277c <main+0x754>)
 8102500:	6013      	str	r3, [r2, #0]
					//controllo angolo di roll, se è troppo grande ferma tutto
					if (roll >= 30 || roll <= -30) {
 8102502:	4b9c      	ldr	r3, [pc, #624]	@ (8102774 <main+0x74c>)
 8102504:	edd3 7a00 	vldr	s15, [r3]
 8102508:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 810250c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102514:	da09      	bge.n	810252a <main+0x502>
 8102516:	4b97      	ldr	r3, [pc, #604]	@ (8102774 <main+0x74c>)
 8102518:	edd3 7a00 	vldr	s15, [r3]
 810251c:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8102520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102528:	d802      	bhi.n	8102530 <main+0x508>
						sys_started = 0;
 810252a:	4b97      	ldr	r3, [pc, #604]	@ (8102788 <main+0x760>)
 810252c:	2200      	movs	r2, #0
 810252e:	601a      	str	r2, [r3, #0]
					//#####################################
					//##          RUOTA DIETRO		   ##
					//#####################################
					//*******************************
					//Ottengo velocita ruota dietro
					counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 8102530:	4b96      	ldr	r3, [pc, #600]	@ (810278c <main+0x764>)
 8102532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102534:	4618      	mov	r0, r3
 8102536:	f7fe f86d 	bl	8100614 <__aeabi_ui2d>
 810253a:	4604      	mov	r4, r0
 810253c:	460d      	mov	r5, r1
 810253e:	4b93      	ldr	r3, [pc, #588]	@ (810278c <main+0x764>)
 8102540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102542:	085b      	lsrs	r3, r3, #1
 8102544:	4618      	mov	r0, r3
 8102546:	f7fe f865 	bl	8100614 <__aeabi_ui2d>
 810254a:	4602      	mov	r2, r0
 810254c:	460b      	mov	r3, r1
 810254e:	4620      	mov	r0, r4
 8102550:	4629      	mov	r1, r5
 8102552:	f7fd ff21 	bl	8100398 <__aeabi_dsub>
 8102556:	4602      	mov	r2, r0
 8102558:	460b      	mov	r3, r1
 810255a:	4610      	mov	r0, r2
 810255c:	4619      	mov	r1, r3
 810255e:	f7fe fbcb 	bl	8100cf8 <__aeabi_d2f>
 8102562:	4603      	mov	r3, r0
 8102564:	4a8a      	ldr	r2, [pc, #552]	@ (8102790 <main+0x768>)
 8102566:	6013      	str	r3, [r2, #0]
					TIM4->CNT = (TIM4->ARR) / 2;
 8102568:	4b88      	ldr	r3, [pc, #544]	@ (810278c <main+0x764>)
 810256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810256c:	4a87      	ldr	r2, [pc, #540]	@ (810278c <main+0x764>)
 810256e:	085b      	lsrs	r3, r3, #1
 8102570:	6253      	str	r3, [r2, #36]	@ 0x24
					//velocita angolare
					//encoder ha risoluzione cpr 500, non 66
					delta_angle_degree = (counts * 360) / (2 * 4 * 500)
 8102572:	4b87      	ldr	r3, [pc, #540]	@ (8102790 <main+0x768>)
 8102574:	edd3 7a00 	vldr	s15, [r3]
 8102578:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8102794 <main+0x76c>
 810257c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102580:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8102798 <main+0x770>
 8102584:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8102588:	ee16 0a90 	vmov	r0, s13
 810258c:	f7fe f864 	bl	8100658 <__aeabi_f2d>
							* 0.03099707249870; //del motore(davanti) //18denti dietro 3.8cm  //28 davanti 5.7cm
 8102590:	a36d      	add	r3, pc, #436	@ (adr r3, 8102748 <main+0x720>)
 8102592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102596:	f7fe f8b7 	bl	8100708 <__aeabi_dmul>
 810259a:	4602      	mov	r2, r0
 810259c:	460b      	mov	r3, r1
 810259e:	4610      	mov	r0, r2
 81025a0:	4619      	mov	r1, r3
 81025a2:	f7fe fba9 	bl	8100cf8 <__aeabi_d2f>
 81025a6:	4603      	mov	r3, r0
					delta_angle_degree = (counts * 360) / (2 * 4 * 500)
 81025a8:	4a7c      	ldr	r2, [pc, #496]	@ (810279c <main+0x774>)
 81025aa:	6013      	str	r3, [r2, #0]
					speed_degsec = -1 * delta_angle_degree / dt;
 81025ac:	4b7b      	ldr	r3, [pc, #492]	@ (810279c <main+0x774>)
 81025ae:	edd3 7a00 	vldr	s15, [r3]
 81025b2:	eeb1 7a67 	vneg.f32	s14, s15
 81025b6:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8102780 <main+0x758>
 81025ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81025be:	4b78      	ldr	r3, [pc, #480]	@ (81027a0 <main+0x778>)
 81025c0:	edc3 7a00 	vstr	s15, [r3]

					angle_degree += delta_angle_degree;
 81025c4:	4b77      	ldr	r3, [pc, #476]	@ (81027a4 <main+0x77c>)
 81025c6:	ed93 7a00 	vldr	s14, [r3]
 81025ca:	4b74      	ldr	r3, [pc, #464]	@ (810279c <main+0x774>)
 81025cc:	edd3 7a00 	vldr	s15, [r3]
 81025d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 81025d4:	4b73      	ldr	r3, [pc, #460]	@ (81027a4 <main+0x77c>)
 81025d6:	edc3 7a00 	vstr	s15, [r3]
					//filtro media mobile
					speed_degsec_filtrata = filtro_media_mobile(velocitavecchia,
 81025da:	4b71      	ldr	r3, [pc, #452]	@ (81027a0 <main+0x778>)
 81025dc:	edd3 7a00 	vldr	s15, [r3]
 81025e0:	221e      	movs	r2, #30
 81025e2:	eeb0 0a67 	vmov.f32	s0, s15
 81025e6:	4970      	ldr	r1, [pc, #448]	@ (81027a8 <main+0x780>)
 81025e8:	4870      	ldr	r0, [pc, #448]	@ (81027ac <main+0x784>)
 81025ea:	f7ff fcc1 	bl	8101f70 <filtro_media_mobile>
 81025ee:	eef0 7a40 	vmov.f32	s15, s0
 81025f2:	4b6f      	ldr	r3, [pc, #444]	@ (81027b0 <main+0x788>)
 81025f4:	edc3 7a00 	vstr	s15, [r3]
							velocitanuova, speed_degsec, 30);
					//rapporto ruota posteriore
					speed_degsec_back = speed_degsec_filtrata * 0.057 / 0.038; //rapporto velcoita angolare tra ruota dietro e avanti???
 81025f8:	4b6d      	ldr	r3, [pc, #436]	@ (81027b0 <main+0x788>)
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	4618      	mov	r0, r3
 81025fe:	f7fe f82b 	bl	8100658 <__aeabi_f2d>
 8102602:	a353      	add	r3, pc, #332	@ (adr r3, 8102750 <main+0x728>)
 8102604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102608:	f7fe f87e 	bl	8100708 <__aeabi_dmul>
 810260c:	4602      	mov	r2, r0
 810260e:	460b      	mov	r3, r1
 8102610:	4610      	mov	r0, r2
 8102612:	4619      	mov	r1, r3
 8102614:	a350      	add	r3, pc, #320	@ (adr r3, 8102758 <main+0x730>)
 8102616:	e9d3 2300 	ldrd	r2, r3, [r3]
 810261a:	f7fe f99f 	bl	810095c <__aeabi_ddiv>
 810261e:	4602      	mov	r2, r0
 8102620:	460b      	mov	r3, r1
 8102622:	4610      	mov	r0, r2
 8102624:	4619      	mov	r1, r3
 8102626:	f7fe fb67 	bl	8100cf8 <__aeabi_d2f>
 810262a:	4603      	mov	r3, r0
 810262c:	4a61      	ldr	r2, [pc, #388]	@ (81027b4 <main+0x78c>)
 810262e:	6013      	str	r3, [r2, #0]

					//velocita ruota dietro
					speed_metsec = speed_degsec_back / 180 * 3.14 * radius;
 8102630:	4b60      	ldr	r3, [pc, #384]	@ (81027b4 <main+0x78c>)
 8102632:	edd3 7a00 	vldr	s15, [r3]
 8102636:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 81027b8 <main+0x790>
 810263a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810263e:	ee16 0a90 	vmov	r0, s13
 8102642:	f7fe f809 	bl	8100658 <__aeabi_f2d>
 8102646:	a346      	add	r3, pc, #280	@ (adr r3, 8102760 <main+0x738>)
 8102648:	e9d3 2300 	ldrd	r2, r3, [r3]
 810264c:	f7fe f85c 	bl	8100708 <__aeabi_dmul>
 8102650:	4602      	mov	r2, r0
 8102652:	460b      	mov	r3, r1
 8102654:	4610      	mov	r0, r2
 8102656:	4619      	mov	r1, r3
 8102658:	a343      	add	r3, pc, #268	@ (adr r3, 8102768 <main+0x740>)
 810265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810265e:	f7fe f853 	bl	8100708 <__aeabi_dmul>
 8102662:	4602      	mov	r2, r0
 8102664:	460b      	mov	r3, r1
 8102666:	4610      	mov	r0, r2
 8102668:	4619      	mov	r1, r3
 810266a:	f7fe fb45 	bl	8100cf8 <__aeabi_d2f>
 810266e:	4603      	mov	r3, r0
 8102670:	4a52      	ldr	r2, [pc, #328]	@ (81027bc <main+0x794>)
 8102672:	6013      	str	r3, [r2, #0]

					//angolo dietro
					angle_back_wheel += speed_degsec_back * dt;
 8102674:	4b4f      	ldr	r3, [pc, #316]	@ (81027b4 <main+0x78c>)
 8102676:	edd3 7a00 	vldr	s15, [r3]
 810267a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8102780 <main+0x758>
 810267e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102682:	4b4f      	ldr	r3, [pc, #316]	@ (81027c0 <main+0x798>)
 8102684:	edd3 7a00 	vldr	s15, [r3]
 8102688:	ee77 7a27 	vadd.f32	s15, s14, s15
 810268c:	4b4c      	ldr	r3, [pc, #304]	@ (81027c0 <main+0x798>)
 810268e:	edc3 7a00 	vstr	s15, [r3]
					//*******************************

					//******************************+
					//PID ruota dietro
					desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 8102692:	4b4c      	ldr	r3, [pc, #304]	@ (81027c4 <main+0x79c>)
 8102694:	edd3 7a00 	vldr	s15, [r3]
 8102698:	eeb0 0a67 	vmov.f32	s0, s15
 810269c:	f7ff fc36 	bl	8101f0c <getSpeed>
 81026a0:	eef0 7a40 	vmov.f32	s15, s0
 81026a4:	4b47      	ldr	r3, [pc, #284]	@ (81027c4 <main+0x79c>)
 81026a6:	edc3 7a00 	vstr	s15, [r3]
					desired_speed_rpm = DegreeSec2RPM(
							desired_speed_metsec / radius); //inutile per ora
 81026aa:	4b46      	ldr	r3, [pc, #280]	@ (81027c4 <main+0x79c>)
 81026ac:	681b      	ldr	r3, [r3, #0]
 81026ae:	4618      	mov	r0, r3
 81026b0:	f7fd ffd2 	bl	8100658 <__aeabi_f2d>
 81026b4:	a32c      	add	r3, pc, #176	@ (adr r3, 8102768 <main+0x740>)
 81026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026ba:	f7fe f94f 	bl	810095c <__aeabi_ddiv>
 81026be:	4602      	mov	r2, r0
 81026c0:	460b      	mov	r3, r1
					desired_speed_rpm = DegreeSec2RPM(
 81026c2:	4610      	mov	r0, r2
 81026c4:	4619      	mov	r1, r3
 81026c6:	f7fe fb17 	bl	8100cf8 <__aeabi_d2f>
 81026ca:	4603      	mov	r3, r0
 81026cc:	ee00 3a10 	vmov	s0, r3
 81026d0:	f7fe fd28 	bl	8101124 <DegreeSec2RPM>
 81026d4:	eef0 7a40 	vmov.f32	s15, s0
 81026d8:	4b3b      	ldr	r3, [pc, #236]	@ (81027c8 <main+0x7a0>)
 81026da:	edc3 7a00 	vstr	s15, [r3]
					u_back_wheel = PID_controller(&pid_speed, speed_metsec,
 81026de:	4b37      	ldr	r3, [pc, #220]	@ (81027bc <main+0x794>)
 81026e0:	edd3 7a00 	vldr	s15, [r3]
 81026e4:	4b37      	ldr	r3, [pc, #220]	@ (81027c4 <main+0x79c>)
 81026e6:	ed93 7a00 	vldr	s14, [r3]
 81026ea:	eef0 0a47 	vmov.f32	s1, s14
 81026ee:	eeb0 0a67 	vmov.f32	s0, s15
 81026f2:	4836      	ldr	r0, [pc, #216]	@ (81027cc <main+0x7a4>)
 81026f4:	f7fe fe42 	bl	810137c <PID_controller>
 81026f8:	eef0 7a40 	vmov.f32	s15, s0
 81026fc:	4b34      	ldr	r3, [pc, #208]	@ (81027d0 <main+0x7a8>)
 81026fe:	edc3 7a00 	vstr	s15, [r3]
							desired_speed_metsec);
					//******************************

					if (sys_started == 0) {
 8102702:	4b21      	ldr	r3, [pc, #132]	@ (8102788 <main+0x760>)
 8102704:	681b      	ldr	r3, [r3, #0]
 8102706:	2b00      	cmp	r3, #0
 8102708:	d107      	bne.n	810271a <main+0x6f2>
						u_front_wheel = 0;
 810270a:	4b32      	ldr	r3, [pc, #200]	@ (81027d4 <main+0x7ac>)
 810270c:	f04f 0200 	mov.w	r2, #0
 8102710:	601a      	str	r2, [r3, #0]
						u_back_wheel = 0;
 8102712:	4b2f      	ldr	r3, [pc, #188]	@ (81027d0 <main+0x7a8>)
 8102714:	f04f 0200 	mov.w	r2, #0
 8102718:	601a      	str	r2, [r3, #0]

					}
					if (sys_started == 1) {
 810271a:	4b1b      	ldr	r3, [pc, #108]	@ (8102788 <main+0x760>)
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	2b01      	cmp	r3, #1
 8102720:	d10c      	bne.n	810273c <main+0x714>
						//ciclo per trovare la costante b della eq della corrente
						//nuovo_valore_b
						//per una corrente nulla, V=aI+b=b  quindi b è data dal voltaggio a riposo, che sta nella variabile x_data[0]
						b = x_data[0];
 8102722:	4b2d      	ldr	r3, [pc, #180]	@ (81027d8 <main+0x7b0>)
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	4a2d      	ldr	r2, [pc, #180]	@ (81027dc <main+0x7b4>)
 8102728:	6013      	str	r3, [r2, #0]
						//setto l'angolo del manubrio a 0
						angle_steer = 0;
 810272a:	4b2d      	ldr	r3, [pc, #180]	@ (81027e0 <main+0x7b8>)
 810272c:	f04f 0200 	mov.w	r2, #0
 8102730:	601a      	str	r2, [r3, #0]
						sys_started++;
 8102732:	4b15      	ldr	r3, [pc, #84]	@ (8102788 <main+0x760>)
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	3301      	adds	r3, #1
 8102738:	4a13      	ldr	r2, [pc, #76]	@ (8102788 <main+0x760>)
 810273a:	6013      	str	r3, [r2, #0]
					}
					//u_back_wheel = 0; //per tenerla ferma per i test
					//settare duty e pwm driver
					duty_back_wheel = Voltage2Duty(u_back_wheel);
 810273c:	4b24      	ldr	r3, [pc, #144]	@ (81027d0 <main+0x7a8>)
 810273e:	edd3 7a00 	vldr	s15, [r3]
 8102742:	eeb0 0a67 	vmov.f32	s0, s15
 8102746:	e04d      	b.n	81027e4 <main+0x7bc>
 8102748:	529d5864 	.word	0x529d5864
 810274c:	3f9fbdb2 	.word	0x3f9fbdb2
 8102750:	9fbe76c9 	.word	0x9fbe76c9
 8102754:	3fad2f1a 	.word	0x3fad2f1a
 8102758:	6a7ef9db 	.word	0x6a7ef9db
 810275c:	3fa374bc 	.word	0x3fa374bc
 8102760:	51eb851f 	.word	0x51eb851f
 8102764:	40091eb8 	.word	0x40091eb8
 8102768:	70a3d70a 	.word	0x70a3d70a
 810276c:	3fc70a3d 	.word	0x3fc70a3d
 8102770:	100087e4 	.word	0x100087e4
 8102774:	10008a20 	.word	0x10008a20
 8102778:	10008a24 	.word	0x10008a24
 810277c:	10008a28 	.word	0x10008a28
 8102780:	3c23d70a 	.word	0x3c23d70a
 8102784:	10008a1c 	.word	0x10008a1c
 8102788:	100087ec 	.word	0x100087ec
 810278c:	40000800 	.word	0x40000800
 8102790:	100087b0 	.word	0x100087b0
 8102794:	43b40000 	.word	0x43b40000
 8102798:	457a0000 	.word	0x457a0000
 810279c:	100087c0 	.word	0x100087c0
 81027a0:	100087c8 	.word	0x100087c8
 81027a4:	100087c4 	.word	0x100087c4
 81027a8:	1000897c 	.word	0x1000897c
 81027ac:	10008904 	.word	0x10008904
 81027b0:	100089f4 	.word	0x100089f4
 81027b4:	100087f0 	.word	0x100087f0
 81027b8:	43340000 	.word	0x43340000
 81027bc:	100087d0 	.word	0x100087d0
 81027c0:	100087f4 	.word	0x100087f4
 81027c4:	100087cc 	.word	0x100087cc
 81027c8:	100087d4 	.word	0x100087d4
 81027cc:	10008728 	.word	0x10008728
 81027d0:	100087d8 	.word	0x100087d8
 81027d4:	10008a2c 	.word	0x10008a2c
 81027d8:	10008ad0 	.word	0x10008ad0
 81027dc:	10000024 	.word	0x10000024
 81027e0:	100087bc 	.word	0x100087bc
 81027e4:	f7fe fcbe 	bl	8101164 <Voltage2Duty>
 81027e8:	eef0 7a40 	vmov.f32	s15, s0
 81027ec:	4bc4      	ldr	r3, [pc, #784]	@ (8102b00 <main+0xad8>)
 81027ee:	edc3 7a00 	vstr	s15, [r3]
					direction_back_wheel = Ref2Direction(u_back_wheel);
 81027f2:	4bc4      	ldr	r3, [pc, #784]	@ (8102b04 <main+0xadc>)
 81027f4:	edd3 7a00 	vldr	s15, [r3]
 81027f8:	eeb0 0a67 	vmov.f32	s0, s15
 81027fc:	f7fe fcf4 	bl	81011e8 <Ref2Direction>
 8102800:	4603      	mov	r3, r0
 8102802:	461a      	mov	r2, r3
 8102804:	4bc0      	ldr	r3, [pc, #768]	@ (8102b08 <main+0xae0>)
 8102806:	601a      	str	r2, [r3, #0]
					set_PWM_and_dir_back_wheel(duty_back_wheel,
 8102808:	4bbd      	ldr	r3, [pc, #756]	@ (8102b00 <main+0xad8>)
 810280a:	edd3 7a00 	vldr	s15, [r3]
 810280e:	4bbe      	ldr	r3, [pc, #760]	@ (8102b08 <main+0xae0>)
 8102810:	681b      	ldr	r3, [r3, #0]
 8102812:	b2db      	uxtb	r3, r3
 8102814:	4618      	mov	r0, r3
 8102816:	eeb0 0a67 	vmov.f32	s0, s15
 810281a:	f7fe fcfd 	bl	8101218 <set_PWM_and_dir_back_wheel>

					//#####################################
					//##          PID YAW RATE		     ##
					//#####################################
					//******************************
					desired_yaw_rate = 0;
 810281e:	4bbb      	ldr	r3, [pc, #748]	@ (8102b0c <main+0xae4>)
 8102820:	f04f 0200 	mov.w	r2, #0
 8102824:	601a      	str	r2, [r3, #0]
					desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 8102826:	4bba      	ldr	r3, [pc, #744]	@ (8102b10 <main+0xae8>)
 8102828:	edd3 7a00 	vldr	s15, [r3]
 810282c:	4bb7      	ldr	r3, [pc, #732]	@ (8102b0c <main+0xae4>)
 810282e:	ed93 7a00 	vldr	s14, [r3]
 8102832:	eef0 0a47 	vmov.f32	s1, s14
 8102836:	eeb0 0a67 	vmov.f32	s0, s15
 810283a:	48b6      	ldr	r0, [pc, #728]	@ (8102b14 <main+0xaec>)
 810283c:	f7fe fd9e 	bl	810137c <PID_controller>
 8102840:	eef0 7a40 	vmov.f32	s15, s0
 8102844:	4bb4      	ldr	r3, [pc, #720]	@ (8102b18 <main+0xaf0>)
 8102846:	edc3 7a00 	vstr	s15, [r3]
					//#####################################

					//******************************
					//prima di usare l'encoder

					desired_roll = 0; //l'angolo di equilibrio sono 2 gradi
 810284a:	4bb3      	ldr	r3, [pc, #716]	@ (8102b18 <main+0xaf0>)
 810284c:	f04f 0200 	mov.w	r2, #0
 8102850:	601a      	str	r2, [r3, #0]
					desired_torque = PID_controller(&pid_roll, roll,
 8102852:	4bb2      	ldr	r3, [pc, #712]	@ (8102b1c <main+0xaf4>)
 8102854:	edd3 7a00 	vldr	s15, [r3]
 8102858:	4baf      	ldr	r3, [pc, #700]	@ (8102b18 <main+0xaf0>)
 810285a:	ed93 7a00 	vldr	s14, [r3]
 810285e:	eef0 0a47 	vmov.f32	s1, s14
 8102862:	eeb0 0a67 	vmov.f32	s0, s15
 8102866:	48ae      	ldr	r0, [pc, #696]	@ (8102b20 <main+0xaf8>)
 8102868:	f7fe fd88 	bl	810137c <PID_controller>
 810286c:	eef0 7a40 	vmov.f32	s15, s0
 8102870:	4bac      	ldr	r3, [pc, #688]	@ (8102b24 <main+0xafc>)
 8102872:	edc3 7a00 	vstr	s15, [r3]
							desired_roll);
					//******************************

					//encoder per ruota anteriore
					//ottengo i counts dell'encoder
					counts_steer = (double) TIM8->CNT - (TIM8->ARR) / 2; //credo cosi hai sia i conteggi negativi che positivi
 8102876:	4bac      	ldr	r3, [pc, #688]	@ (8102b28 <main+0xb00>)
 8102878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810287a:	4618      	mov	r0, r3
 810287c:	f7fd feca 	bl	8100614 <__aeabi_ui2d>
 8102880:	4604      	mov	r4, r0
 8102882:	460d      	mov	r5, r1
 8102884:	4ba8      	ldr	r3, [pc, #672]	@ (8102b28 <main+0xb00>)
 8102886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102888:	085b      	lsrs	r3, r3, #1
 810288a:	4618      	mov	r0, r3
 810288c:	f7fd fec2 	bl	8100614 <__aeabi_ui2d>
 8102890:	4602      	mov	r2, r0
 8102892:	460b      	mov	r3, r1
 8102894:	4620      	mov	r0, r4
 8102896:	4629      	mov	r1, r5
 8102898:	f7fd fd7e 	bl	8100398 <__aeabi_dsub>
 810289c:	4602      	mov	r2, r0
 810289e:	460b      	mov	r3, r1
 81028a0:	4610      	mov	r0, r2
 81028a2:	4619      	mov	r1, r3
 81028a4:	f7fe fa28 	bl	8100cf8 <__aeabi_d2f>
 81028a8:	4603      	mov	r3, r0
 81028aa:	4aa0      	ldr	r2, [pc, #640]	@ (8102b2c <main+0xb04>)
 81028ac:	6013      	str	r3, [r2, #0]
					TIM8->CNT = (TIM8->ARR) / 2;
 81028ae:	4b9e      	ldr	r3, [pc, #632]	@ (8102b28 <main+0xb00>)
 81028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028b2:	4a9d      	ldr	r2, [pc, #628]	@ (8102b28 <main+0xb00>)
 81028b4:	085b      	lsrs	r3, r3, #1
 81028b6:	6253      	str	r3, [r2, #36]	@ 0x24
					//calcolo l'angolo dello sterzo
					delta_angle_degree_steer = (counts_steer * 360)
 81028b8:	4b9c      	ldr	r3, [pc, #624]	@ (8102b2c <main+0xb04>)
 81028ba:	edd3 7a00 	vldr	s15, [r3]
 81028be:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8102b30 <main+0xb08>
 81028c2:	ee67 7a87 	vmul.f32	s15, s15, s14
							/ (2 * 4 * 500) * 0.03099707249870;
 81028c6:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8102b34 <main+0xb0c>
 81028ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81028ce:	ee16 0a90 	vmov	r0, s13
 81028d2:	f7fd fec1 	bl	8100658 <__aeabi_f2d>
 81028d6:	a380      	add	r3, pc, #512	@ (adr r3, 8102ad8 <main+0xab0>)
 81028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028dc:	f7fd ff14 	bl	8100708 <__aeabi_dmul>
 81028e0:	4602      	mov	r2, r0
 81028e2:	460b      	mov	r3, r1
 81028e4:	4610      	mov	r0, r2
 81028e6:	4619      	mov	r1, r3
 81028e8:	f7fe fa06 	bl	8100cf8 <__aeabi_d2f>
 81028ec:	4603      	mov	r3, r0
					delta_angle_degree_steer = (counts_steer * 360)
 81028ee:	4a92      	ldr	r2, [pc, #584]	@ (8102b38 <main+0xb10>)
 81028f0:	6013      	str	r3, [r2, #0]
					angle_steer = angle_steer + delta_angle_degree_steer; //angolo sterzo
 81028f2:	4b92      	ldr	r3, [pc, #584]	@ (8102b3c <main+0xb14>)
 81028f4:	ed93 7a00 	vldr	s14, [r3]
 81028f8:	4b8f      	ldr	r3, [pc, #572]	@ (8102b38 <main+0xb10>)
 81028fa:	edd3 7a00 	vldr	s15, [r3]
 81028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102902:	4b8e      	ldr	r3, [pc, #568]	@ (8102b3c <main+0xb14>)
 8102904:	edc3 7a00 	vstr	s15, [r3]
					speed_degsec_steer = delta_angle_degree_steer / dt; //velocita sterzo
 8102908:	4b8b      	ldr	r3, [pc, #556]	@ (8102b38 <main+0xb10>)
 810290a:	ed93 7a00 	vldr	s14, [r3]
 810290e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8102b40 <main+0xb18>
 8102912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102916:	4b8b      	ldr	r3, [pc, #556]	@ (8102b44 <main+0xb1c>)
 8102918:	edc3 7a00 	vstr	s15, [r3]

					speed_degsec_steer_filtrata = filtro_media_mobile(
 810291c:	4b89      	ldr	r3, [pc, #548]	@ (8102b44 <main+0xb1c>)
 810291e:	edd3 7a00 	vldr	s15, [r3]
 8102922:	221e      	movs	r2, #30
 8102924:	eeb0 0a67 	vmov.f32	s0, s15
 8102928:	4987      	ldr	r1, [pc, #540]	@ (8102b48 <main+0xb20>)
 810292a:	4888      	ldr	r0, [pc, #544]	@ (8102b4c <main+0xb24>)
 810292c:	f7ff fb20 	bl	8101f70 <filtro_media_mobile>
 8102930:	eef0 7a40 	vmov.f32	s15, s0
 8102934:	4b86      	ldr	r3, [pc, #536]	@ (8102b50 <main+0xb28>)
 8102936:	edc3 7a00 	vstr	s15, [r3]
							speedsteernuovo, speedsteervecchio,
							speed_degsec_steer, 30);
					angolo_sterzo += speed_degsec_steer_filtrata * dt;
 810293a:	4b85      	ldr	r3, [pc, #532]	@ (8102b50 <main+0xb28>)
 810293c:	edd3 7a00 	vldr	s15, [r3]
 8102940:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8102b40 <main+0xb18>
 8102944:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102948:	4b82      	ldr	r3, [pc, #520]	@ (8102b54 <main+0xb2c>)
 810294a:	edd3 7a00 	vldr	s15, [r3]
 810294e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102952:	4b80      	ldr	r3, [pc, #512]	@ (8102b54 <main+0xb2c>)
 8102954:	edc3 7a00 	vstr	s15, [r3]
					//##         LOW-PASS FILTER	   	   ##
					//#####################################
					//******************************
					//filtro passa basso 1/s+1 discretizzato con Matlab

					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 8102958:	4b7f      	ldr	r3, [pc, #508]	@ (8102b58 <main+0xb30>)
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	4618      	mov	r0, r3
 810295e:	f7fd fe7b 	bl	8100658 <__aeabi_f2d>
 8102962:	a35f      	add	r3, pc, #380	@ (adr r3, 8102ae0 <main+0xab8>)
 8102964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102968:	f7fd fece 	bl	8100708 <__aeabi_dmul>
 810296c:	4602      	mov	r2, r0
 810296e:	460b      	mov	r3, r1
 8102970:	4614      	mov	r4, r2
 8102972:	461d      	mov	r5, r3
							+ 0.00995 * old_desired_torque; //questo è quello del prof
 8102974:	4b79      	ldr	r3, [pc, #484]	@ (8102b5c <main+0xb34>)
 8102976:	681b      	ldr	r3, [r3, #0]
 8102978:	4618      	mov	r0, r3
 810297a:	f7fd fe6d 	bl	8100658 <__aeabi_f2d>
 810297e:	a35a      	add	r3, pc, #360	@ (adr r3, 8102ae8 <main+0xac0>)
 8102980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102984:	f7fd fec0 	bl	8100708 <__aeabi_dmul>
 8102988:	4602      	mov	r2, r0
 810298a:	460b      	mov	r3, r1
 810298c:	4620      	mov	r0, r4
 810298e:	4629      	mov	r1, r5
 8102990:	f7fd fd04 	bl	810039c <__adddf3>
 8102994:	4602      	mov	r2, r0
 8102996:	460b      	mov	r3, r1
 8102998:	4610      	mov	r0, r2
 810299a:	4619      	mov	r1, r3
 810299c:	f7fe f9ac 	bl	8100cf8 <__aeabi_d2f>
 81029a0:	4603      	mov	r3, r0
					desired_filtered_torque = 0.99 * old_desired_filtered_torque
 81029a2:	4a6f      	ldr	r2, [pc, #444]	@ (8102b60 <main+0xb38>)
 81029a4:	6013      	str	r3, [r2, #0]
					old_desired_torque = desired_torque;
 81029a6:	4b5f      	ldr	r3, [pc, #380]	@ (8102b24 <main+0xafc>)
 81029a8:	681b      	ldr	r3, [r3, #0]
 81029aa:	4a6c      	ldr	r2, [pc, #432]	@ (8102b5c <main+0xb34>)
 81029ac:	6013      	str	r3, [r2, #0]
					old_desired_filtered_torque = desired_filtered_torque;
 81029ae:	4b6c      	ldr	r3, [pc, #432]	@ (8102b60 <main+0xb38>)
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	4a69      	ldr	r2, [pc, #420]	@ (8102b58 <main+0xb30>)
 81029b4:	6013      	str	r3, [r2, #0]
					//#####################################
					//##            STERZO			   ##
					//#####################################
					//******************************
					//Calcolo valore corrente
					HAL_ADC_Start(&hadc1);
 81029b6:	486b      	ldr	r0, [pc, #428]	@ (8102b64 <main+0xb3c>)
 81029b8:	f002 f8c0 	bl	8104b3c <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, timeout);
 81029bc:	4b6a      	ldr	r3, [pc, #424]	@ (8102b68 <main+0xb40>)
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	4619      	mov	r1, r3
 81029c2:	4868      	ldr	r0, [pc, #416]	@ (8102b64 <main+0xb3c>)
 81029c4:	f002 f9b8 	bl	8104d38 <HAL_ADC_PollForConversion>
					CountValue = HAL_ADC_GetValue(&hadc1);
 81029c8:	4866      	ldr	r0, [pc, #408]	@ (8102b64 <main+0xb3c>)
 81029ca:	f002 faa9 	bl	8104f20 <HAL_ADC_GetValue>
 81029ce:	ee07 0a90 	vmov	s15, r0
 81029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029d6:	4b65      	ldr	r3, [pc, #404]	@ (8102b6c <main+0xb44>)
 81029d8:	edc3 7a00 	vstr	s15, [r3]
					volt = ((float) CountValue) * Vref / (resolution);
 81029dc:	4b63      	ldr	r3, [pc, #396]	@ (8102b6c <main+0xb44>)
 81029de:	ed93 7a00 	vldr	s14, [r3]
 81029e2:	4b63      	ldr	r3, [pc, #396]	@ (8102b70 <main+0xb48>)
 81029e4:	edd3 7a00 	vldr	s15, [r3]
 81029e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 81029ec:	4b61      	ldr	r3, [pc, #388]	@ (8102b74 <main+0xb4c>)
 81029ee:	ed93 7a00 	vldr	s14, [r3]
 81029f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029f6:	4b60      	ldr	r3, [pc, #384]	@ (8102b78 <main+0xb50>)
 81029f8:	edc3 7a00 	vstr	s15, [r3]
					HAL_ADC_Stop(&hadc1);
 81029fc:	4859      	ldr	r0, [pc, #356]	@ (8102b64 <main+0xb3c>)
 81029fe:	f002 f967 	bl	8104cd0 <HAL_ADC_Stop>
					VoltSens = volt * 1.524 - 0.1018;
 8102a02:	4b5d      	ldr	r3, [pc, #372]	@ (8102b78 <main+0xb50>)
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	4618      	mov	r0, r3
 8102a08:	f7fd fe26 	bl	8100658 <__aeabi_f2d>
 8102a0c:	a338      	add	r3, pc, #224	@ (adr r3, 8102af0 <main+0xac8>)
 8102a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a12:	f7fd fe79 	bl	8100708 <__aeabi_dmul>
 8102a16:	4602      	mov	r2, r0
 8102a18:	460b      	mov	r3, r1
 8102a1a:	4610      	mov	r0, r2
 8102a1c:	4619      	mov	r1, r3
 8102a1e:	a336      	add	r3, pc, #216	@ (adr r3, 8102af8 <main+0xad0>)
 8102a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a24:	f7fd fcb8 	bl	8100398 <__aeabi_dsub>
 8102a28:	4602      	mov	r2, r0
 8102a2a:	460b      	mov	r3, r1
 8102a2c:	4610      	mov	r0, r2
 8102a2e:	4619      	mov	r1, r3
 8102a30:	f7fe f962 	bl	8100cf8 <__aeabi_d2f>
 8102a34:	4603      	mov	r3, r0
 8102a36:	4a51      	ldr	r2, [pc, #324]	@ (8102b7c <main+0xb54>)
 8102a38:	6013      	str	r3, [r2, #0]
					corrente_non_filtrata = voltToAmpere(VoltSens, a, b);
 8102a3a:	4b50      	ldr	r3, [pc, #320]	@ (8102b7c <main+0xb54>)
 8102a3c:	edd3 7a00 	vldr	s15, [r3]
 8102a40:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8102b80 <main+0xb58>
 8102a44:	4b4f      	ldr	r3, [pc, #316]	@ (8102b84 <main+0xb5c>)
 8102a46:	ed93 7a00 	vldr	s14, [r3]
 8102a4a:	eeb0 1a47 	vmov.f32	s2, s14
 8102a4e:	eef0 0a66 	vmov.f32	s1, s13
 8102a52:	eeb0 0a67 	vmov.f32	s0, s15
 8102a56:	f7ff fa3a 	bl	8101ece <voltToAmpere>
 8102a5a:	eef0 7a40 	vmov.f32	s15, s0
 8102a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8102b88 <main+0xb60>)
 8102a60:	edc3 7a00 	vstr	s15, [r3]
					 filtered_current = fir_out_arm;
					 */

					//Filtro di Kalman per corrente
					//setta i valori di input e di misura per il filtro di kalman
					z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 8102a64:	4b45      	ldr	r3, [pc, #276]	@ (8102b7c <main+0xb54>)
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	4a48      	ldr	r2, [pc, #288]	@ (8102b8c <main+0xb64>)
 8102a6a:	6013      	str	r3, [r2, #0]
					z_data[1] = corrente_non_filtrata; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 8102a6c:	4b46      	ldr	r3, [pc, #280]	@ (8102b88 <main+0xb60>)
 8102a6e:	681b      	ldr	r3, [r3, #0]
 8102a70:	4a46      	ldr	r2, [pc, #280]	@ (8102b8c <main+0xb64>)
 8102a72:	6053      	str	r3, [r2, #4]
					kalman_predict(&kf, &u);
 8102a74:	4946      	ldr	r1, [pc, #280]	@ (8102b90 <main+0xb68>)
 8102a76:	4847      	ldr	r0, [pc, #284]	@ (8102b94 <main+0xb6c>)
 8102a78:	f7fe fff2 	bl	8101a60 <kalman_predict>
					kalman_update(&kf, &z);
 8102a7c:	4946      	ldr	r1, [pc, #280]	@ (8102b98 <main+0xb70>)
 8102a7e:	4845      	ldr	r0, [pc, #276]	@ (8102b94 <main+0xb6c>)
 8102a80:	f7ff f85c 	bl	8101b3c <kalman_update>
					filtered_current_kalman = x_data[1];
 8102a84:	4b45      	ldr	r3, [pc, #276]	@ (8102b9c <main+0xb74>)
 8102a86:	685b      	ldr	r3, [r3, #4]
 8102a88:	4a45      	ldr	r2, [pc, #276]	@ (8102ba0 <main+0xb78>)
 8102a8a:	6013      	str	r3, [r2, #0]

					//calcolo coppia
					torque = filtered_current_kalman * K;
 8102a8c:	4b44      	ldr	r3, [pc, #272]	@ (8102ba0 <main+0xb78>)
 8102a8e:	edd3 7a00 	vldr	s15, [r3]
 8102a92:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8102ba4 <main+0xb7c>
 8102a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102a9a:	4b43      	ldr	r3, [pc, #268]	@ (8102ba8 <main+0xb80>)
 8102a9c:	edc3 7a00 	vstr	s15, [r3]
					 }


					 */

					u_front_wheel = PID_controller(&pid_steering_torque, torque,
 8102aa0:	4b41      	ldr	r3, [pc, #260]	@ (8102ba8 <main+0xb80>)
 8102aa2:	edd3 7a00 	vldr	s15, [r3]
 8102aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8102b60 <main+0xb38>)
 8102aa8:	ed93 7a00 	vldr	s14, [r3]
 8102aac:	eef0 0a47 	vmov.f32	s1, s14
 8102ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8102ab4:	483d      	ldr	r0, [pc, #244]	@ (8102bac <main+0xb84>)
 8102ab6:	f7fe fc61 	bl	810137c <PID_controller>
 8102aba:	eef0 7a40 	vmov.f32	s15, s0
 8102abe:	4b3c      	ldr	r3, [pc, #240]	@ (8102bb0 <main+0xb88>)
 8102ac0:	edc3 7a00 	vstr	s15, [r3]
							desired_filtered_torque);

					//controllo angolo limite manubrio
					//quando la u è negativa, l'angolo diminuisce

					if (angle_steer <= -90) {
 8102ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8102b3c <main+0xb14>)
 8102ac6:	edd3 7a00 	vldr	s15, [r3]
 8102aca:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8102bb4 <main+0xb8c>
 8102ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102ad6:	e06f      	b.n	8102bb8 <main+0xb90>
 8102ad8:	529d5864 	.word	0x529d5864
 8102adc:	3f9fbdb2 	.word	0x3f9fbdb2
 8102ae0:	7ae147ae 	.word	0x7ae147ae
 8102ae4:	3fefae14 	.word	0x3fefae14
 8102ae8:	64c2f838 	.word	0x64c2f838
 8102aec:	3f8460aa 	.word	0x3f8460aa
 8102af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8102af4:	3ff8624d 	.word	0x3ff8624d
 8102af8:	96bb98c8 	.word	0x96bb98c8
 8102afc:	3fba0f90 	.word	0x3fba0f90
 8102b00:	100087dc 	.word	0x100087dc
 8102b04:	100087d8 	.word	0x100087d8
 8102b08:	100087e0 	.word	0x100087e0
 8102b0c:	100089fc 	.word	0x100089fc
 8102b10:	10008a1c 	.word	0x10008a1c
 8102b14:	10008748 	.word	0x10008748
 8102b18:	10008a00 	.word	0x10008a00
 8102b1c:	10008a20 	.word	0x10008a20
 8102b20:	10008768 	.word	0x10008768
 8102b24:	10008a04 	.word	0x10008a04
 8102b28:	40010400 	.word	0x40010400
 8102b2c:	100087b4 	.word	0x100087b4
 8102b30:	43b40000 	.word	0x43b40000
 8102b34:	457a0000 	.word	0x457a0000
 8102b38:	100087b8 	.word	0x100087b8
 8102b3c:	100087bc 	.word	0x100087bc
 8102b40:	3c23d70a 	.word	0x3c23d70a
 8102b44:	100087e8 	.word	0x100087e8
 8102b48:	10008888 	.word	0x10008888
 8102b4c:	10008810 	.word	0x10008810
 8102b50:	1000880c 	.word	0x1000880c
 8102b54:	10008900 	.word	0x10008900
 8102b58:	10008a0c 	.word	0x10008a0c
 8102b5c:	10008a10 	.word	0x10008a10
 8102b60:	10008a08 	.word	0x10008a08
 8102b64:	10000290 	.word	0x10000290
 8102b68:	10000018 	.word	0x10000018
 8102b6c:	10008a14 	.word	0x10008a14
 8102b70:	10000020 	.word	0x10000020
 8102b74:	1000001c 	.word	0x1000001c
 8102b78:	10008a18 	.word	0x10008a18
 8102b7c:	10008a44 	.word	0x10008a44
 8102b80:	3f4b2fec 	.word	0x3f4b2fec
 8102b84:	10000024 	.word	0x10000024
 8102b88:	100089f8 	.word	0x100089f8
 8102b8c:	10008aec 	.word	0x10008aec
 8102b90:	10008ad8 	.word	0x10008ad8
 8102b94:	10008a90 	.word	0x10008a90
 8102b98:	10008ae0 	.word	0x10008ae0
 8102b9c:	10008ad0 	.word	0x10008ad0
 8102ba0:	10008a38 	.word	0x10008a38
 8102ba4:	3cbfb15b 	.word	0x3cbfb15b
 8102ba8:	10008a3c 	.word	0x10008a3c
 8102bac:	10008788 	.word	0x10008788
 8102bb0:	10008a2c 	.word	0x10008a2c
 8102bb4:	c2b40000 	.word	0xc2b40000
 8102bb8:	d80b      	bhi.n	8102bd2 <main+0xbaa>
						if (u_front_wheel < 0)
 8102bba:	4b8b      	ldr	r3, [pc, #556]	@ (8102de8 <main+0xdc0>)
 8102bbc:	edd3 7a00 	vldr	s15, [r3]
 8102bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8102bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102bc8:	d503      	bpl.n	8102bd2 <main+0xbaa>
							u_front_wheel = 0;
 8102bca:	4b87      	ldr	r3, [pc, #540]	@ (8102de8 <main+0xdc0>)
 8102bcc:	f04f 0200 	mov.w	r2, #0
 8102bd0:	601a      	str	r2, [r3, #0]
					}
					if (angle_steer >= 90) //se
 8102bd2:	4b86      	ldr	r3, [pc, #536]	@ (8102dec <main+0xdc4>)
 8102bd4:	edd3 7a00 	vldr	s15, [r3]
 8102bd8:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8102df0 <main+0xdc8>
 8102bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102be4:	db0b      	blt.n	8102bfe <main+0xbd6>
							{
						if (u_front_wheel > 0)
 8102be6:	4b80      	ldr	r3, [pc, #512]	@ (8102de8 <main+0xdc0>)
 8102be8:	edd3 7a00 	vldr	s15, [r3]
 8102bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8102bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102bf4:	dd03      	ble.n	8102bfe <main+0xbd6>
							u_front_wheel = 0;
 8102bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8102de8 <main+0xdc0>)
 8102bf8:	f04f 0200 	mov.w	r2, #0
 8102bfc:	601a      	str	r2, [r3, #0]

					}

					if (sys_started <= 1) {
 8102bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8102df4 <main+0xdcc>)
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	2b01      	cmp	r3, #1
 8102c04:	dc0b      	bgt.n	8102c1e <main+0xbf6>
						//stadio = 1000; utile se hai l'algoritmo per il segnale trapezoidale
						desired_speed_metsec = 0;
 8102c06:	4b7c      	ldr	r3, [pc, #496]	@ (8102df8 <main+0xdd0>)
 8102c08:	f04f 0200 	mov.w	r2, #0
 8102c0c:	601a      	str	r2, [r3, #0]
						u_back_wheel = 0;
 8102c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8102dfc <main+0xdd4>)
 8102c10:	f04f 0200 	mov.w	r2, #0
 8102c14:	601a      	str	r2, [r3, #0]
						u_front_wheel = 0;
 8102c16:	4b74      	ldr	r3, [pc, #464]	@ (8102de8 <main+0xdc0>)
 8102c18:	f04f 0200 	mov.w	r2, #0
 8102c1c:	601a      	str	r2, [r3, #0]

					}

					duty_front_wheel = Voltage2Duty(u_front_wheel);
 8102c1e:	4b72      	ldr	r3, [pc, #456]	@ (8102de8 <main+0xdc0>)
 8102c20:	edd3 7a00 	vldr	s15, [r3]
 8102c24:	eeb0 0a67 	vmov.f32	s0, s15
 8102c28:	f7fe fa9c 	bl	8101164 <Voltage2Duty>
 8102c2c:	eef0 7a40 	vmov.f32	s15, s0
 8102c30:	4b73      	ldr	r3, [pc, #460]	@ (8102e00 <main+0xdd8>)
 8102c32:	edc3 7a00 	vstr	s15, [r3]
					dir_front_wheel = Ref2Direction(u_front_wheel);
 8102c36:	4b6c      	ldr	r3, [pc, #432]	@ (8102de8 <main+0xdc0>)
 8102c38:	edd3 7a00 	vldr	s15, [r3]
 8102c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8102c40:	f7fe fad2 	bl	81011e8 <Ref2Direction>
 8102c44:	4603      	mov	r3, r0
 8102c46:	ee07 3a90 	vmov	s15, r3
 8102c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8102e04 <main+0xddc>)
 8102c50:	edc3 7a00 	vstr	s15, [r3]
					set_PWM_and_dir_front_wheel(duty_front_wheel,
 8102c54:	4b6a      	ldr	r3, [pc, #424]	@ (8102e00 <main+0xdd8>)
 8102c56:	ed93 7a00 	vldr	s14, [r3]
 8102c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8102e04 <main+0xddc>)
 8102c5c:	edd3 7a00 	vldr	s15, [r3]
 8102c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102c64:	edc7 7a08 	vstr	s15, [r7, #32]
 8102c68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8102c6c:	b2db      	uxtb	r3, r3
 8102c6e:	4618      	mov	r0, r3
 8102c70:	eeb0 0a47 	vmov.f32	s0, s14
 8102c74:	f7fe fb12 	bl	810129c <set_PWM_and_dir_front_wheel>
					 printf("%.5f ",desired_speed_metsec);
					 printf("%.5f ",speed_metsec);
					 printf("%.5f ",u_back_wheel/18.0*12);

					 */
					printf("\r\n");
 8102c78:	4863      	ldr	r0, [pc, #396]	@ (8102e08 <main+0xde0>)
 8102c7a:	f00d f9f1 	bl	8110060 <puts>

					//per dati via bluetooth

					//raccolgo dati da mandare per 3 secondi

					dati.velocita = 100;
 8102c7e:	4b63      	ldr	r3, [pc, #396]	@ (8102e0c <main+0xde4>)
 8102c80:	2264      	movs	r2, #100	@ 0x64
 8102c82:	601a      	str	r2, [r3, #0]
					dati.accelerazione = 9.82;
 8102c84:	4961      	ldr	r1, [pc, #388]	@ (8102e0c <main+0xde4>)
 8102c86:	a354      	add	r3, pc, #336	@ (adr r3, 8102dd8 <main+0xdb0>)
 8102c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
					dati.tempo = 23.02;
 8102c90:	495e      	ldr	r1, [pc, #376]	@ (8102e0c <main+0xde4>)
 8102c92:	a353      	add	r3, pc, #332	@ (adr r3, 8102de0 <main+0xdb8>)
 8102c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c98:	e9c1 2304 	strd	r2, r3, [r1, #16]

					if (trasmissione_attiva == 1) {
 8102c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8102e10 <main+0xde8>)
 8102c9e:	781b      	ldrb	r3, [r3, #0]
 8102ca0:	2b01      	cmp	r3, #1
 8102ca2:	f47f aae7 	bne.w	8102274 <main+0x24c>
						//dati bicicletta
						datibici.angle_steer = angle_steer;
 8102ca6:	4b51      	ldr	r3, [pc, #324]	@ (8102dec <main+0xdc4>)
 8102ca8:	681b      	ldr	r3, [r3, #0]
 8102caa:	4a5a      	ldr	r2, [pc, #360]	@ (8102e14 <main+0xdec>)
 8102cac:	6013      	str	r3, [r2, #0]
						datibici.desired_filtered_torque =
 8102cae:	4b5a      	ldr	r3, [pc, #360]	@ (8102e18 <main+0xdf0>)
 8102cb0:	681b      	ldr	r3, [r3, #0]
 8102cb2:	4a58      	ldr	r2, [pc, #352]	@ (8102e14 <main+0xdec>)
 8102cb4:	6053      	str	r3, [r2, #4]
								desired_filtered_torque;
						datibici.desired_speed_metsec = desired_speed_metsec;
 8102cb6:	4b50      	ldr	r3, [pc, #320]	@ (8102df8 <main+0xdd0>)
 8102cb8:	681b      	ldr	r3, [r3, #0]
 8102cba:	4a56      	ldr	r2, [pc, #344]	@ (8102e14 <main+0xdec>)
 8102cbc:	6153      	str	r3, [r2, #20]
						datibici.roll = roll;
 8102cbe:	4b57      	ldr	r3, [pc, #348]	@ (8102e1c <main+0xdf4>)
 8102cc0:	681b      	ldr	r3, [r3, #0]
 8102cc2:	4a54      	ldr	r2, [pc, #336]	@ (8102e14 <main+0xdec>)
 8102cc4:	6113      	str	r3, [r2, #16]
						datibici.speed_metsec = speed_metsec;
 8102cc6:	4b56      	ldr	r3, [pc, #344]	@ (8102e20 <main+0xdf8>)
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	4a52      	ldr	r2, [pc, #328]	@ (8102e14 <main+0xdec>)
 8102ccc:	6193      	str	r3, [r2, #24]
						datibici.torque = torque;
 8102cce:	4b55      	ldr	r3, [pc, #340]	@ (8102e24 <main+0xdfc>)
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	4a50      	ldr	r2, [pc, #320]	@ (8102e14 <main+0xdec>)
 8102cd4:	6093      	str	r3, [r2, #8]
						datibici.u_back_wheel = u_back_wheel;
 8102cd6:	4b49      	ldr	r3, [pc, #292]	@ (8102dfc <main+0xdd4>)
 8102cd8:	681b      	ldr	r3, [r3, #0]
 8102cda:	4a4e      	ldr	r2, [pc, #312]	@ (8102e14 <main+0xdec>)
 8102cdc:	61d3      	str	r3, [r2, #28]
						datibici.u_front_wheel = u_front_wheel;
 8102cde:	4b42      	ldr	r3, [pc, #264]	@ (8102de8 <main+0xdc0>)
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	4a4c      	ldr	r2, [pc, #304]	@ (8102e14 <main+0xdec>)
 8102ce4:	60d3      	str	r3, [r2, #12]
						datibici.tempo = tempo;
 8102ce6:	4b50      	ldr	r3, [pc, #320]	@ (8102e28 <main+0xe00>)
 8102ce8:	681b      	ldr	r3, [r3, #0]
 8102cea:	4a4a      	ldr	r2, [pc, #296]	@ (8102e14 <main+0xdec>)
 8102cec:	6213      	str	r3, [r2, #32]
						datibici.contatore = contatore_esp320;
 8102cee:	4b4f      	ldr	r3, [pc, #316]	@ (8102e2c <main+0xe04>)
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	4a48      	ldr	r2, [pc, #288]	@ (8102e14 <main+0xdec>)
 8102cf4:	6253      	str	r3, [r2, #36]	@ 0x24

						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8102e30 <main+0xe08>)
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8102e34 <main+0xe0c>)
 8102cfc:	189e      	adds	r6, r3, r2
								"%f,%f,%f,%f,%f,%f,%f,%f,%f,%d\n",
								datibici.angle_steer,
 8102cfe:	4b45      	ldr	r3, [pc, #276]	@ (8102e14 <main+0xdec>)
 8102d00:	681b      	ldr	r3, [r3, #0]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d02:	4618      	mov	r0, r3
 8102d04:	f7fd fca8 	bl	8100658 <__aeabi_f2d>
 8102d08:	e9c7 0108 	strd	r0, r1, [r7, #32]
								datibici.desired_filtered_torque,
 8102d0c:	4b41      	ldr	r3, [pc, #260]	@ (8102e14 <main+0xdec>)
 8102d0e:	685b      	ldr	r3, [r3, #4]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d10:	4618      	mov	r0, r3
 8102d12:	f7fd fca1 	bl	8100658 <__aeabi_f2d>
 8102d16:	e9c7 0106 	strd	r0, r1, [r7, #24]
								datibici.desired_speed_metsec, datibici.roll,
 8102d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8102e14 <main+0xdec>)
 8102d1c:	695b      	ldr	r3, [r3, #20]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d1e:	4618      	mov	r0, r3
 8102d20:	f7fd fc9a 	bl	8100658 <__aeabi_f2d>
 8102d24:	e9c7 0104 	strd	r0, r1, [r7, #16]
								datibici.desired_speed_metsec, datibici.roll,
 8102d28:	4b3a      	ldr	r3, [pc, #232]	@ (8102e14 <main+0xdec>)
 8102d2a:	691b      	ldr	r3, [r3, #16]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d2c:	4618      	mov	r0, r3
 8102d2e:	f7fd fc93 	bl	8100658 <__aeabi_f2d>
 8102d32:	e9c7 0102 	strd	r0, r1, [r7, #8]
								datibici.speed_metsec, datibici.torque,
 8102d36:	4b37      	ldr	r3, [pc, #220]	@ (8102e14 <main+0xdec>)
 8102d38:	699b      	ldr	r3, [r3, #24]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d3a:	4618      	mov	r0, r3
 8102d3c:	f7fd fc8c 	bl	8100658 <__aeabi_f2d>
 8102d40:	e9c7 0100 	strd	r0, r1, [r7]
								datibici.speed_metsec, datibici.torque,
 8102d44:	4b33      	ldr	r3, [pc, #204]	@ (8102e14 <main+0xdec>)
 8102d46:	689b      	ldr	r3, [r3, #8]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d48:	4618      	mov	r0, r3
 8102d4a:	f7fd fc85 	bl	8100658 <__aeabi_f2d>
 8102d4e:	4682      	mov	sl, r0
 8102d50:	468b      	mov	fp, r1
								datibici.u_back_wheel, datibici.u_front_wheel,
 8102d52:	4b30      	ldr	r3, [pc, #192]	@ (8102e14 <main+0xdec>)
 8102d54:	69db      	ldr	r3, [r3, #28]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d56:	4618      	mov	r0, r3
 8102d58:	f7fd fc7e 	bl	8100658 <__aeabi_f2d>
 8102d5c:	4680      	mov	r8, r0
 8102d5e:	4689      	mov	r9, r1
								datibici.u_back_wheel, datibici.u_front_wheel,
 8102d60:	4b2c      	ldr	r3, [pc, #176]	@ (8102e14 <main+0xdec>)
 8102d62:	68db      	ldr	r3, [r3, #12]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d64:	4618      	mov	r0, r3
 8102d66:	f7fd fc77 	bl	8100658 <__aeabi_f2d>
 8102d6a:	4604      	mov	r4, r0
 8102d6c:	460d      	mov	r5, r1
								datibici.tempo, datibici.contatore);
 8102d6e:	4b29      	ldr	r3, [pc, #164]	@ (8102e14 <main+0xdec>)
 8102d70:	6a1b      	ldr	r3, [r3, #32]
						int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102d72:	4618      	mov	r0, r3
 8102d74:	f7fd fc70 	bl	8100658 <__aeabi_f2d>
 8102d78:	4b26      	ldr	r3, [pc, #152]	@ (8102e14 <main+0xdec>)
 8102d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102d7c:	9310      	str	r3, [sp, #64]	@ 0x40
 8102d7e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8102d82:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8102d86:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8102d8a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8102d8e:	ed97 7b00 	vldr	d7, [r7]
 8102d92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8102d96:	ed97 7b02 	vldr	d7, [r7, #8]
 8102d9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8102d9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8102da2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8102da6:	ed97 7b06 	vldr	d7, [r7, #24]
 8102daa:	ed8d 7b00 	vstr	d7, [sp]
 8102dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8102db2:	4921      	ldr	r1, [pc, #132]	@ (8102e38 <main+0xe10>)
 8102db4:	4630      	mov	r0, r6
 8102db6:	f00d f95b 	bl	8110070 <siprintf>
 8102dba:	6638      	str	r0, [r7, #96]	@ 0x60
						indiceBuffer += bytesWritten;
 8102dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8102e30 <main+0xe08>)
 8102dbe:	681a      	ldr	r2, [r3, #0]
 8102dc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8102dc2:	4413      	add	r3, r2
 8102dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8102e30 <main+0xe08>)
 8102dc6:	6013      	str	r3, [r2, #0]
 8102dc8:	f7ff ba54 	b.w	8102274 <main+0x24c>
						//	if(indiceBuffer >200000) indiceBuffer = 0;  //dovrebbe andarci solo quando la comunicazione non  avviene. altrimenti crasha
					}
				}

				else printf("ciao");
 8102dcc:	481b      	ldr	r0, [pc, #108]	@ (8102e3c <main+0xe14>)
 8102dce:	f00d f8df 	bl	810ff90 <iprintf>
		if (flag_Tc == 1) {
 8102dd2:	f7ff ba4f 	b.w	8102274 <main+0x24c>
 8102dd6:	bf00      	nop
 8102dd8:	0a3d70a4 	.word	0x0a3d70a4
 8102ddc:	4023a3d7 	.word	0x4023a3d7
 8102de0:	b851eb85 	.word	0xb851eb85
 8102de4:	4037051e 	.word	0x4037051e
 8102de8:	10008a2c 	.word	0x10008a2c
 8102dec:	100087bc 	.word	0x100087bc
 8102df0:	42b40000 	.word	0x42b40000
 8102df4:	100087ec 	.word	0x100087ec
 8102df8:	100087cc 	.word	0x100087cc
 8102dfc:	100087d8 	.word	0x100087d8
 8102e00:	10008a34 	.word	0x10008a34
 8102e04:	10008a30 	.word	0x10008a30
 8102e08:	08113924 	.word	0x08113924
 8102e0c:	10008a50 	.word	0x10008a50
 8102e10:	10008a49 	.word	0x10008a49
 8102e14:	10008a68 	.word	0x10008a68
 8102e18:	10008a08 	.word	0x10008a08
 8102e1c:	10008a20 	.word	0x10008a20
 8102e20:	100087d0 	.word	0x100087d0
 8102e24:	10008a3c 	.word	0x10008a3c
 8102e28:	10008724 	.word	0x10008724
 8102e2c:	10008808 	.word	0x10008808
 8102e30:	10008720 	.word	0x10008720
 8102e34:	10000638 	.word	0x10000638
 8102e38:	08113928 	.word	0x08113928
 8102e3c:	08113948 	.word	0x08113948

08102e40 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8102e40:	b580      	push	{r7, lr}
 8102e42:	b08a      	sub	sp, #40	@ 0x28
 8102e44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8102e46:	f107 031c 	add.w	r3, r7, #28
 8102e4a:	2200      	movs	r2, #0
 8102e4c:	601a      	str	r2, [r3, #0]
 8102e4e:	605a      	str	r2, [r3, #4]
 8102e50:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8102e52:	463b      	mov	r3, r7
 8102e54:	2200      	movs	r2, #0
 8102e56:	601a      	str	r2, [r3, #0]
 8102e58:	605a      	str	r2, [r3, #4]
 8102e5a:	609a      	str	r2, [r3, #8]
 8102e5c:	60da      	str	r2, [r3, #12]
 8102e5e:	611a      	str	r2, [r3, #16]
 8102e60:	615a      	str	r2, [r3, #20]
 8102e62:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8102e64:	4b2f      	ldr	r3, [pc, #188]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e66:	4a30      	ldr	r2, [pc, #192]	@ (8102f28 <MX_ADC1_Init+0xe8>)
 8102e68:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8102e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e6c:	2200      	movs	r2, #0
 8102e6e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8102e70:	4b2c      	ldr	r3, [pc, #176]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e72:	2200      	movs	r2, #0
 8102e74:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8102e76:	4b2b      	ldr	r3, [pc, #172]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e78:	2200      	movs	r2, #0
 8102e7a:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8102e7c:	4b29      	ldr	r3, [pc, #164]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e7e:	2204      	movs	r2, #4
 8102e80:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8102e82:	4b28      	ldr	r3, [pc, #160]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e84:	2200      	movs	r2, #0
 8102e86:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8102e88:	4b26      	ldr	r3, [pc, #152]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e8a:	2200      	movs	r2, #0
 8102e8c:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 1;
 8102e8e:	4b25      	ldr	r3, [pc, #148]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e90:	2201      	movs	r2, #1
 8102e92:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8102e94:	4b23      	ldr	r3, [pc, #140]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e96:	2200      	movs	r2, #0
 8102e98:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8102e9a:	4b22      	ldr	r3, [pc, #136]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102e9c:	2200      	movs	r2, #0
 8102e9e:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8102ea0:	4b20      	ldr	r3, [pc, #128]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102ea2:	2200      	movs	r2, #0
 8102ea4:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8102ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102ea8:	2200      	movs	r2, #0
 8102eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8102eac:	4b1d      	ldr	r3, [pc, #116]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102eae:	2200      	movs	r2, #0
 8102eb0:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8102eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102eb4:	2200      	movs	r2, #0
 8102eb6:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8102eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102eba:	2200      	movs	r2, #0
 8102ebc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8102ec0:	4818      	ldr	r0, [pc, #96]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102ec2:	f001 fc99 	bl	81047f8 <HAL_ADC_Init>
 8102ec6:	4603      	mov	r3, r0
 8102ec8:	2b00      	cmp	r3, #0
 8102eca:	d001      	beq.n	8102ed0 <MX_ADC1_Init+0x90>
		Error_Handler();
 8102ecc:	f000 fd18 	bl	8103900 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8102ed0:	2300      	movs	r3, #0
 8102ed2:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8102ed4:	f107 031c 	add.w	r3, r7, #28
 8102ed8:	4619      	mov	r1, r3
 8102eda:	4812      	ldr	r0, [pc, #72]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102edc:	f002 fe62 	bl	8105ba4 <HAL_ADCEx_MultiModeConfigChannel>
 8102ee0:	4603      	mov	r3, r0
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	d001      	beq.n	8102eea <MX_ADC1_Init+0xaa>
		Error_Handler();
 8102ee6:	f000 fd0b 	bl	8103900 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8102eea:	4b10      	ldr	r3, [pc, #64]	@ (8102f2c <MX_ADC1_Init+0xec>)
 8102eec:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8102eee:	2306      	movs	r3, #6
 8102ef0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8102ef2:	2300      	movs	r3, #0
 8102ef4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8102ef6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8102efa:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8102efc:	2304      	movs	r3, #4
 8102efe:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8102f00:	2300      	movs	r3, #0
 8102f02:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8102f04:	2300      	movs	r3, #0
 8102f06:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8102f08:	463b      	mov	r3, r7
 8102f0a:	4619      	mov	r1, r3
 8102f0c:	4805      	ldr	r0, [pc, #20]	@ (8102f24 <MX_ADC1_Init+0xe4>)
 8102f0e:	f002 f815 	bl	8104f3c <HAL_ADC_ConfigChannel>
 8102f12:	4603      	mov	r3, r0
 8102f14:	2b00      	cmp	r3, #0
 8102f16:	d001      	beq.n	8102f1c <MX_ADC1_Init+0xdc>
		Error_Handler();
 8102f18:	f000 fcf2 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8102f1c:	bf00      	nop
 8102f1e:	3728      	adds	r7, #40	@ 0x28
 8102f20:	46bd      	mov	sp, r7
 8102f22:	bd80      	pop	{r7, pc}
 8102f24:	10000290 	.word	0x10000290
 8102f28:	40022000 	.word	0x40022000
 8102f2c:	08600004 	.word	0x08600004

08102f30 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8102f30:	b580      	push	{r7, lr}
 8102f32:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8102f34:	4b1b      	ldr	r3, [pc, #108]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f36:	4a1c      	ldr	r2, [pc, #112]	@ (8102fa8 <MX_I2C1_Init+0x78>)
 8102f38:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10C0ECFF;
 8102f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8102fac <MX_I2C1_Init+0x7c>)
 8102f3e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8102f40:	4b18      	ldr	r3, [pc, #96]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f42:	2200      	movs	r2, #0
 8102f44:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102f46:	4b17      	ldr	r3, [pc, #92]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f48:	2201      	movs	r2, #1
 8102f4a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102f4c:	4b15      	ldr	r3, [pc, #84]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f4e:	2200      	movs	r2, #0
 8102f50:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8102f52:	4b14      	ldr	r3, [pc, #80]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f54:	2200      	movs	r2, #0
 8102f56:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102f58:	4b12      	ldr	r3, [pc, #72]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f5a:	2200      	movs	r2, #0
 8102f5c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102f5e:	4b11      	ldr	r3, [pc, #68]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f60:	2200      	movs	r2, #0
 8102f62:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102f64:	4b0f      	ldr	r3, [pc, #60]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f66:	2200      	movs	r2, #0
 8102f68:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8102f6a:	480e      	ldr	r0, [pc, #56]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f6c:	f003 ff7a 	bl	8106e64 <HAL_I2C_Init>
 8102f70:	4603      	mov	r3, r0
 8102f72:	2b00      	cmp	r3, #0
 8102f74:	d001      	beq.n	8102f7a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8102f76:	f000 fcc3 	bl	8103900 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8102f7a:	2100      	movs	r1, #0
 8102f7c:	4809      	ldr	r0, [pc, #36]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f7e:	f004 fcdb 	bl	8107938 <HAL_I2CEx_ConfigAnalogFilter>
 8102f82:	4603      	mov	r3, r0
 8102f84:	2b00      	cmp	r3, #0
 8102f86:	d001      	beq.n	8102f8c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8102f88:	f000 fcba 	bl	8103900 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8102f8c:	2100      	movs	r1, #0
 8102f8e:	4805      	ldr	r0, [pc, #20]	@ (8102fa4 <MX_I2C1_Init+0x74>)
 8102f90:	f004 fd1d 	bl	81079ce <HAL_I2CEx_ConfigDigitalFilter>
 8102f94:	4603      	mov	r3, r0
 8102f96:	2b00      	cmp	r3, #0
 8102f98:	d001      	beq.n	8102f9e <MX_I2C1_Init+0x6e>
		Error_Handler();
 8102f9a:	f000 fcb1 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8102f9e:	bf00      	nop
 8102fa0:	bd80      	pop	{r7, pc}
 8102fa2:	bf00      	nop
 8102fa4:	100002f4 	.word	0x100002f4
 8102fa8:	40005400 	.word	0x40005400
 8102fac:	10c0ecff 	.word	0x10c0ecff

08102fb0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8102fb0:	b580      	push	{r7, lr}
 8102fb2:	b09a      	sub	sp, #104	@ 0x68
 8102fb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8102fb6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8102fba:	2200      	movs	r2, #0
 8102fbc:	601a      	str	r2, [r3, #0]
 8102fbe:	605a      	str	r2, [r3, #4]
 8102fc0:	609a      	str	r2, [r3, #8]
 8102fc2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8102fc4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8102fc8:	2200      	movs	r2, #0
 8102fca:	601a      	str	r2, [r3, #0]
 8102fcc:	605a      	str	r2, [r3, #4]
 8102fce:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8102fd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102fd4:	2200      	movs	r2, #0
 8102fd6:	601a      	str	r2, [r3, #0]
 8102fd8:	605a      	str	r2, [r3, #4]
 8102fda:	609a      	str	r2, [r3, #8]
 8102fdc:	60da      	str	r2, [r3, #12]
 8102fde:	611a      	str	r2, [r3, #16]
 8102fe0:	615a      	str	r2, [r3, #20]
 8102fe2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8102fe4:	1d3b      	adds	r3, r7, #4
 8102fe6:	222c      	movs	r2, #44	@ 0x2c
 8102fe8:	2100      	movs	r1, #0
 8102fea:	4618      	mov	r0, r3
 8102fec:	f00d f938 	bl	8110260 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8102ff0:	4b43      	ldr	r3, [pc, #268]	@ (8103100 <MX_TIM1_Init+0x150>)
 8102ff2:	4a44      	ldr	r2, [pc, #272]	@ (8103104 <MX_TIM1_Init+0x154>)
 8102ff4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 200 - 1;
 8102ff6:	4b42      	ldr	r3, [pc, #264]	@ (8103100 <MX_TIM1_Init+0x150>)
 8102ff8:	22c7      	movs	r2, #199	@ 0xc7
 8102ffa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102ffc:	4b40      	ldr	r3, [pc, #256]	@ (8103100 <MX_TIM1_Init+0x150>)
 8102ffe:	2200      	movs	r2, #0
 8103000:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 50 - 1;
 8103002:	4b3f      	ldr	r3, [pc, #252]	@ (8103100 <MX_TIM1_Init+0x150>)
 8103004:	2231      	movs	r2, #49	@ 0x31
 8103006:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103008:	4b3d      	ldr	r3, [pc, #244]	@ (8103100 <MX_TIM1_Init+0x150>)
 810300a:	2200      	movs	r2, #0
 810300c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 810300e:	4b3c      	ldr	r3, [pc, #240]	@ (8103100 <MX_TIM1_Init+0x150>)
 8103010:	2200      	movs	r2, #0
 8103012:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103014:	4b3a      	ldr	r3, [pc, #232]	@ (8103100 <MX_TIM1_Init+0x150>)
 8103016:	2200      	movs	r2, #0
 8103018:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 810301a:	4839      	ldr	r0, [pc, #228]	@ (8103100 <MX_TIM1_Init+0x150>)
 810301c:	f007 fc82 	bl	810a924 <HAL_TIM_Base_Init>
 8103020:	4603      	mov	r3, r0
 8103022:	2b00      	cmp	r3, #0
 8103024:	d001      	beq.n	810302a <MX_TIM1_Init+0x7a>
		Error_Handler();
 8103026:	f000 fc6b 	bl	8103900 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810302a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810302e:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8103030:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8103034:	4619      	mov	r1, r3
 8103036:	4832      	ldr	r0, [pc, #200]	@ (8103100 <MX_TIM1_Init+0x150>)
 8103038:	f008 f9e6 	bl	810b408 <HAL_TIM_ConfigClockSource>
 810303c:	4603      	mov	r3, r0
 810303e:	2b00      	cmp	r3, #0
 8103040:	d001      	beq.n	8103046 <MX_TIM1_Init+0x96>
		Error_Handler();
 8103042:	f000 fc5d 	bl	8103900 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8103046:	482e      	ldr	r0, [pc, #184]	@ (8103100 <MX_TIM1_Init+0x150>)
 8103048:	f007 fdac 	bl	810aba4 <HAL_TIM_PWM_Init>
 810304c:	4603      	mov	r3, r0
 810304e:	2b00      	cmp	r3, #0
 8103050:	d001      	beq.n	8103056 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8103052:	f000 fc55 	bl	8103900 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103056:	2300      	movs	r3, #0
 8103058:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810305a:	2300      	movs	r3, #0
 810305c:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810305e:	2300      	movs	r3, #0
 8103060:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8103062:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8103066:	4619      	mov	r1, r3
 8103068:	4825      	ldr	r0, [pc, #148]	@ (8103100 <MX_TIM1_Init+0x150>)
 810306a:	f008 ff2b 	bl	810bec4 <HAL_TIMEx_MasterConfigSynchronization>
 810306e:	4603      	mov	r3, r0
 8103070:	2b00      	cmp	r3, #0
 8103072:	d001      	beq.n	8103078 <MX_TIM1_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8103074:	f000 fc44 	bl	8103900 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8103078:	2360      	movs	r3, #96	@ 0x60
 810307a:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 810307c:	2300      	movs	r3, #0
 810307e:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8103080:	2300      	movs	r3, #0
 8103082:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8103084:	2300      	movs	r3, #0
 8103086:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8103088:	2300      	movs	r3, #0
 810308a:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810308c:	2300      	movs	r3, #0
 810308e:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8103090:	2300      	movs	r3, #0
 8103092:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8103094:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8103098:	2200      	movs	r2, #0
 810309a:	4619      	mov	r1, r3
 810309c:	4818      	ldr	r0, [pc, #96]	@ (8103100 <MX_TIM1_Init+0x150>)
 810309e:	f008 f89f 	bl	810b1e0 <HAL_TIM_PWM_ConfigChannel>
 81030a2:	4603      	mov	r3, r0
 81030a4:	2b00      	cmp	r3, #0
 81030a6:	d001      	beq.n	81030ac <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 81030a8:	f000 fc2a 	bl	8103900 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81030ac:	2300      	movs	r3, #0
 81030ae:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81030b0:	2300      	movs	r3, #0
 81030b2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81030b4:	2300      	movs	r3, #0
 81030b6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 81030b8:	2300      	movs	r3, #0
 81030ba:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81030bc:	2300      	movs	r3, #0
 81030be:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81030c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81030c4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 81030c6:	2300      	movs	r3, #0
 81030c8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81030ca:	2300      	movs	r3, #0
 81030cc:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81030ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81030d2:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 81030d4:	2300      	movs	r3, #0
 81030d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81030d8:	2300      	movs	r3, #0
 81030da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 81030dc:	1d3b      	adds	r3, r7, #4
 81030de:	4619      	mov	r1, r3
 81030e0:	4807      	ldr	r0, [pc, #28]	@ (8103100 <MX_TIM1_Init+0x150>)
 81030e2:	f008 ff7d 	bl	810bfe0 <HAL_TIMEx_ConfigBreakDeadTime>
 81030e6:	4603      	mov	r3, r0
 81030e8:	2b00      	cmp	r3, #0
 81030ea:	d001      	beq.n	81030f0 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 81030ec:	f000 fc08 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 81030f0:	4803      	ldr	r0, [pc, #12]	@ (8103100 <MX_TIM1_Init+0x150>)
 81030f2:	f000 fdf7 	bl	8103ce4 <HAL_TIM_MspPostInit>

}
 81030f6:	bf00      	nop
 81030f8:	3768      	adds	r7, #104	@ 0x68
 81030fa:	46bd      	mov	sp, r7
 81030fc:	bd80      	pop	{r7, pc}
 81030fe:	bf00      	nop
 8103100:	10000348 	.word	0x10000348
 8103104:	40010000 	.word	0x40010000

08103108 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8103108:	b580      	push	{r7, lr}
 810310a:	b088      	sub	sp, #32
 810310c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 810310e:	f107 0310 	add.w	r3, r7, #16
 8103112:	2200      	movs	r2, #0
 8103114:	601a      	str	r2, [r3, #0]
 8103116:	605a      	str	r2, [r3, #4]
 8103118:	609a      	str	r2, [r3, #8]
 810311a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 810311c:	1d3b      	adds	r3, r7, #4
 810311e:	2200      	movs	r2, #0
 8103120:	601a      	str	r2, [r3, #0]
 8103122:	605a      	str	r2, [r3, #4]
 8103124:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8103126:	4b1e      	ldr	r3, [pc, #120]	@ (81031a0 <MX_TIM2_Init+0x98>)
 8103128:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810312c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 200 - 1;
 810312e:	4b1c      	ldr	r3, [pc, #112]	@ (81031a0 <MX_TIM2_Init+0x98>)
 8103130:	22c7      	movs	r2, #199	@ 0xc7
 8103132:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103134:	4b1a      	ldr	r3, [pc, #104]	@ (81031a0 <MX_TIM2_Init+0x98>)
 8103136:	2200      	movs	r2, #0
 8103138:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 810313a:	4b19      	ldr	r3, [pc, #100]	@ (81031a0 <MX_TIM2_Init+0x98>)
 810313c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8103140:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103142:	4b17      	ldr	r3, [pc, #92]	@ (81031a0 <MX_TIM2_Init+0x98>)
 8103144:	2200      	movs	r2, #0
 8103146:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103148:	4b15      	ldr	r3, [pc, #84]	@ (81031a0 <MX_TIM2_Init+0x98>)
 810314a:	2200      	movs	r2, #0
 810314c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 810314e:	4814      	ldr	r0, [pc, #80]	@ (81031a0 <MX_TIM2_Init+0x98>)
 8103150:	f007 fbe8 	bl	810a924 <HAL_TIM_Base_Init>
 8103154:	4603      	mov	r3, r0
 8103156:	2b00      	cmp	r3, #0
 8103158:	d001      	beq.n	810315e <MX_TIM2_Init+0x56>
		Error_Handler();
 810315a:	f000 fbd1 	bl	8103900 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810315e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8103162:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8103164:	f107 0310 	add.w	r3, r7, #16
 8103168:	4619      	mov	r1, r3
 810316a:	480d      	ldr	r0, [pc, #52]	@ (81031a0 <MX_TIM2_Init+0x98>)
 810316c:	f008 f94c 	bl	810b408 <HAL_TIM_ConfigClockSource>
 8103170:	4603      	mov	r3, r0
 8103172:	2b00      	cmp	r3, #0
 8103174:	d001      	beq.n	810317a <MX_TIM2_Init+0x72>
		Error_Handler();
 8103176:	f000 fbc3 	bl	8103900 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810317a:	2300      	movs	r3, #0
 810317c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810317e:	2300      	movs	r3, #0
 8103180:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8103182:	1d3b      	adds	r3, r7, #4
 8103184:	4619      	mov	r1, r3
 8103186:	4806      	ldr	r0, [pc, #24]	@ (81031a0 <MX_TIM2_Init+0x98>)
 8103188:	f008 fe9c 	bl	810bec4 <HAL_TIMEx_MasterConfigSynchronization>
 810318c:	4603      	mov	r3, r0
 810318e:	2b00      	cmp	r3, #0
 8103190:	d001      	beq.n	8103196 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8103192:	f000 fbb5 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8103196:	bf00      	nop
 8103198:	3720      	adds	r7, #32
 810319a:	46bd      	mov	sp, r7
 810319c:	bd80      	pop	{r7, pc}
 810319e:	bf00      	nop
 81031a0:	10000394 	.word	0x10000394

081031a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 81031a4:	b580      	push	{r7, lr}
 81031a6:	b08e      	sub	sp, #56	@ 0x38
 81031a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 81031aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81031ae:	2200      	movs	r2, #0
 81031b0:	601a      	str	r2, [r3, #0]
 81031b2:	605a      	str	r2, [r3, #4]
 81031b4:	609a      	str	r2, [r3, #8]
 81031b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 81031b8:	f107 031c 	add.w	r3, r7, #28
 81031bc:	2200      	movs	r2, #0
 81031be:	601a      	str	r2, [r3, #0]
 81031c0:	605a      	str	r2, [r3, #4]
 81031c2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 81031c4:	463b      	mov	r3, r7
 81031c6:	2200      	movs	r2, #0
 81031c8:	601a      	str	r2, [r3, #0]
 81031ca:	605a      	str	r2, [r3, #4]
 81031cc:	609a      	str	r2, [r3, #8]
 81031ce:	60da      	str	r2, [r3, #12]
 81031d0:	611a      	str	r2, [r3, #16]
 81031d2:	615a      	str	r2, [r3, #20]
 81031d4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 81031d6:	4b2c      	ldr	r3, [pc, #176]	@ (8103288 <MX_TIM3_Init+0xe4>)
 81031d8:	4a2c      	ldr	r2, [pc, #176]	@ (810328c <MX_TIM3_Init+0xe8>)
 81031da:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 200 - 1;
 81031dc:	4b2a      	ldr	r3, [pc, #168]	@ (8103288 <MX_TIM3_Init+0xe4>)
 81031de:	22c7      	movs	r2, #199	@ 0xc7
 81031e0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81031e2:	4b29      	ldr	r3, [pc, #164]	@ (8103288 <MX_TIM3_Init+0xe4>)
 81031e4:	2200      	movs	r2, #0
 81031e6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50 - 1;
 81031e8:	4b27      	ldr	r3, [pc, #156]	@ (8103288 <MX_TIM3_Init+0xe4>)
 81031ea:	2231      	movs	r2, #49	@ 0x31
 81031ec:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81031ee:	4b26      	ldr	r3, [pc, #152]	@ (8103288 <MX_TIM3_Init+0xe4>)
 81031f0:	2200      	movs	r2, #0
 81031f2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81031f4:	4b24      	ldr	r3, [pc, #144]	@ (8103288 <MX_TIM3_Init+0xe4>)
 81031f6:	2200      	movs	r2, #0
 81031f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 81031fa:	4823      	ldr	r0, [pc, #140]	@ (8103288 <MX_TIM3_Init+0xe4>)
 81031fc:	f007 fb92 	bl	810a924 <HAL_TIM_Base_Init>
 8103200:	4603      	mov	r3, r0
 8103202:	2b00      	cmp	r3, #0
 8103204:	d001      	beq.n	810320a <MX_TIM3_Init+0x66>
		Error_Handler();
 8103206:	f000 fb7b 	bl	8103900 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810320a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810320e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8103210:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8103214:	4619      	mov	r1, r3
 8103216:	481c      	ldr	r0, [pc, #112]	@ (8103288 <MX_TIM3_Init+0xe4>)
 8103218:	f008 f8f6 	bl	810b408 <HAL_TIM_ConfigClockSource>
 810321c:	4603      	mov	r3, r0
 810321e:	2b00      	cmp	r3, #0
 8103220:	d001      	beq.n	8103226 <MX_TIM3_Init+0x82>
		Error_Handler();
 8103222:	f000 fb6d 	bl	8103900 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8103226:	4818      	ldr	r0, [pc, #96]	@ (8103288 <MX_TIM3_Init+0xe4>)
 8103228:	f007 fcbc 	bl	810aba4 <HAL_TIM_PWM_Init>
 810322c:	4603      	mov	r3, r0
 810322e:	2b00      	cmp	r3, #0
 8103230:	d001      	beq.n	8103236 <MX_TIM3_Init+0x92>
		Error_Handler();
 8103232:	f000 fb65 	bl	8103900 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103236:	2300      	movs	r3, #0
 8103238:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810323a:	2300      	movs	r3, #0
 810323c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 810323e:	f107 031c 	add.w	r3, r7, #28
 8103242:	4619      	mov	r1, r3
 8103244:	4810      	ldr	r0, [pc, #64]	@ (8103288 <MX_TIM3_Init+0xe4>)
 8103246:	f008 fe3d 	bl	810bec4 <HAL_TIMEx_MasterConfigSynchronization>
 810324a:	4603      	mov	r3, r0
 810324c:	2b00      	cmp	r3, #0
 810324e:	d001      	beq.n	8103254 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8103250:	f000 fb56 	bl	8103900 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8103254:	2360      	movs	r3, #96	@ 0x60
 8103256:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8103258:	2300      	movs	r3, #0
 810325a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810325c:	2300      	movs	r3, #0
 810325e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8103260:	2300      	movs	r3, #0
 8103262:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8103264:	463b      	mov	r3, r7
 8103266:	2200      	movs	r2, #0
 8103268:	4619      	mov	r1, r3
 810326a:	4807      	ldr	r0, [pc, #28]	@ (8103288 <MX_TIM3_Init+0xe4>)
 810326c:	f007 ffb8 	bl	810b1e0 <HAL_TIM_PWM_ConfigChannel>
 8103270:	4603      	mov	r3, r0
 8103272:	2b00      	cmp	r3, #0
 8103274:	d001      	beq.n	810327a <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8103276:	f000 fb43 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 810327a:	4803      	ldr	r0, [pc, #12]	@ (8103288 <MX_TIM3_Init+0xe4>)
 810327c:	f000 fd32 	bl	8103ce4 <HAL_TIM_MspPostInit>

}
 8103280:	bf00      	nop
 8103282:	3738      	adds	r7, #56	@ 0x38
 8103284:	46bd      	mov	sp, r7
 8103286:	bd80      	pop	{r7, pc}
 8103288:	100003e0 	.word	0x100003e0
 810328c:	40000400 	.word	0x40000400

08103290 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8103290:	b580      	push	{r7, lr}
 8103292:	b08c      	sub	sp, #48	@ 0x30
 8103294:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8103296:	f107 030c 	add.w	r3, r7, #12
 810329a:	2224      	movs	r2, #36	@ 0x24
 810329c:	2100      	movs	r1, #0
 810329e:	4618      	mov	r0, r3
 81032a0:	f00c ffde 	bl	8110260 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 81032a4:	463b      	mov	r3, r7
 81032a6:	2200      	movs	r2, #0
 81032a8:	601a      	str	r2, [r3, #0]
 81032aa:	605a      	str	r2, [r3, #4]
 81032ac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 81032ae:	4b21      	ldr	r3, [pc, #132]	@ (8103334 <MX_TIM4_Init+0xa4>)
 81032b0:	4a21      	ldr	r2, [pc, #132]	@ (8103338 <MX_TIM4_Init+0xa8>)
 81032b2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 81032b4:	4b1f      	ldr	r3, [pc, #124]	@ (8103334 <MX_TIM4_Init+0xa4>)
 81032b6:	2200      	movs	r2, #0
 81032b8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81032ba:	4b1e      	ldr	r3, [pc, #120]	@ (8103334 <MX_TIM4_Init+0xa4>)
 81032bc:	2200      	movs	r2, #0
 81032be:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 3423 - 1;
 81032c0:	4b1c      	ldr	r3, [pc, #112]	@ (8103334 <MX_TIM4_Init+0xa4>)
 81032c2:	f640 525e 	movw	r2, #3422	@ 0xd5e
 81032c6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81032c8:	4b1a      	ldr	r3, [pc, #104]	@ (8103334 <MX_TIM4_Init+0xa4>)
 81032ca:	2200      	movs	r2, #0
 81032cc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81032ce:	4b19      	ldr	r3, [pc, #100]	@ (8103334 <MX_TIM4_Init+0xa4>)
 81032d0:	2200      	movs	r2, #0
 81032d2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81032d4:	2303      	movs	r3, #3
 81032d6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81032d8:	2300      	movs	r3, #0
 81032da:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81032dc:	2301      	movs	r3, #1
 81032de:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81032e0:	2300      	movs	r3, #0
 81032e2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 81032e4:	2300      	movs	r3, #0
 81032e6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81032e8:	2300      	movs	r3, #0
 81032ea:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81032ec:	2301      	movs	r3, #1
 81032ee:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81032f0:	2300      	movs	r3, #0
 81032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 81032f4:	2300      	movs	r3, #0
 81032f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 81032f8:	f107 030c 	add.w	r3, r7, #12
 81032fc:	4619      	mov	r1, r3
 81032fe:	480d      	ldr	r0, [pc, #52]	@ (8103334 <MX_TIM4_Init+0xa4>)
 8103300:	f007 fdc0 	bl	810ae84 <HAL_TIM_Encoder_Init>
 8103304:	4603      	mov	r3, r0
 8103306:	2b00      	cmp	r3, #0
 8103308:	d001      	beq.n	810330e <MX_TIM4_Init+0x7e>
		Error_Handler();
 810330a:	f000 faf9 	bl	8103900 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810330e:	2300      	movs	r3, #0
 8103310:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103312:	2300      	movs	r3, #0
 8103314:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8103316:	463b      	mov	r3, r7
 8103318:	4619      	mov	r1, r3
 810331a:	4806      	ldr	r0, [pc, #24]	@ (8103334 <MX_TIM4_Init+0xa4>)
 810331c:	f008 fdd2 	bl	810bec4 <HAL_TIMEx_MasterConfigSynchronization>
 8103320:	4603      	mov	r3, r0
 8103322:	2b00      	cmp	r3, #0
 8103324:	d001      	beq.n	810332a <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8103326:	f000 faeb 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 810332a:	bf00      	nop
 810332c:	3730      	adds	r7, #48	@ 0x30
 810332e:	46bd      	mov	sp, r7
 8103330:	bd80      	pop	{r7, pc}
 8103332:	bf00      	nop
 8103334:	1000042c 	.word	0x1000042c
 8103338:	40000800 	.word	0x40000800

0810333c <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 810333c:	b580      	push	{r7, lr}
 810333e:	b084      	sub	sp, #16
 8103340:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8103342:	1d3b      	adds	r3, r7, #4
 8103344:	2200      	movs	r2, #0
 8103346:	601a      	str	r2, [r3, #0]
 8103348:	605a      	str	r2, [r3, #4]
 810334a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 810334c:	4b15      	ldr	r3, [pc, #84]	@ (81033a4 <MX_TIM6_Init+0x68>)
 810334e:	4a16      	ldr	r2, [pc, #88]	@ (81033a8 <MX_TIM6_Init+0x6c>)
 8103350:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 20000 - 1;
 8103352:	4b14      	ldr	r3, [pc, #80]	@ (81033a4 <MX_TIM6_Init+0x68>)
 8103354:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8103358:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 810335a:	4b12      	ldr	r3, [pc, #72]	@ (81033a4 <MX_TIM6_Init+0x68>)
 810335c:	2200      	movs	r2, #0
 810335e:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 30000;
 8103360:	4b10      	ldr	r3, [pc, #64]	@ (81033a4 <MX_TIM6_Init+0x68>)
 8103362:	f247 5230 	movw	r2, #30000	@ 0x7530
 8103366:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103368:	4b0e      	ldr	r3, [pc, #56]	@ (81033a4 <MX_TIM6_Init+0x68>)
 810336a:	2200      	movs	r2, #0
 810336c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 810336e:	480d      	ldr	r0, [pc, #52]	@ (81033a4 <MX_TIM6_Init+0x68>)
 8103370:	f007 fad8 	bl	810a924 <HAL_TIM_Base_Init>
 8103374:	4603      	mov	r3, r0
 8103376:	2b00      	cmp	r3, #0
 8103378:	d001      	beq.n	810337e <MX_TIM6_Init+0x42>
		Error_Handler();
 810337a:	f000 fac1 	bl	8103900 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810337e:	2300      	movs	r3, #0
 8103380:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103382:	2300      	movs	r3, #0
 8103384:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8103386:	1d3b      	adds	r3, r7, #4
 8103388:	4619      	mov	r1, r3
 810338a:	4806      	ldr	r0, [pc, #24]	@ (81033a4 <MX_TIM6_Init+0x68>)
 810338c:	f008 fd9a 	bl	810bec4 <HAL_TIMEx_MasterConfigSynchronization>
 8103390:	4603      	mov	r3, r0
 8103392:	2b00      	cmp	r3, #0
 8103394:	d001      	beq.n	810339a <MX_TIM6_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8103396:	f000 fab3 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 810339a:	bf00      	nop
 810339c:	3710      	adds	r7, #16
 810339e:	46bd      	mov	sp, r7
 81033a0:	bd80      	pop	{r7, pc}
 81033a2:	bf00      	nop
 81033a4:	10000478 	.word	0x10000478
 81033a8:	40001000 	.word	0x40001000

081033ac <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 81033ac:	b580      	push	{r7, lr}
 81033ae:	b08c      	sub	sp, #48	@ 0x30
 81033b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 81033b2:	f107 030c 	add.w	r3, r7, #12
 81033b6:	2224      	movs	r2, #36	@ 0x24
 81033b8:	2100      	movs	r1, #0
 81033ba:	4618      	mov	r0, r3
 81033bc:	f00c ff50 	bl	8110260 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 81033c0:	463b      	mov	r3, r7
 81033c2:	2200      	movs	r2, #0
 81033c4:	601a      	str	r2, [r3, #0]
 81033c6:	605a      	str	r2, [r3, #4]
 81033c8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 81033ca:	4b23      	ldr	r3, [pc, #140]	@ (8103458 <MX_TIM8_Init+0xac>)
 81033cc:	4a23      	ldr	r2, [pc, #140]	@ (810345c <MX_TIM8_Init+0xb0>)
 81033ce:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 81033d0:	4b21      	ldr	r3, [pc, #132]	@ (8103458 <MX_TIM8_Init+0xac>)
 81033d2:	2200      	movs	r2, #0
 81033d4:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 81033d6:	4b20      	ldr	r3, [pc, #128]	@ (8103458 <MX_TIM8_Init+0xac>)
 81033d8:	2200      	movs	r2, #0
 81033da:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 4000 - 1;
 81033dc:	4b1e      	ldr	r3, [pc, #120]	@ (8103458 <MX_TIM8_Init+0xac>)
 81033de:	f640 729f 	movw	r2, #3999	@ 0xf9f
 81033e2:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81033e4:	4b1c      	ldr	r3, [pc, #112]	@ (8103458 <MX_TIM8_Init+0xac>)
 81033e6:	2200      	movs	r2, #0
 81033e8:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 81033ea:	4b1b      	ldr	r3, [pc, #108]	@ (8103458 <MX_TIM8_Init+0xac>)
 81033ec:	2200      	movs	r2, #0
 81033ee:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81033f0:	4b19      	ldr	r3, [pc, #100]	@ (8103458 <MX_TIM8_Init+0xac>)
 81033f2:	2200      	movs	r2, #0
 81033f4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81033f6:	2303      	movs	r3, #3
 81033f8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81033fa:	2300      	movs	r3, #0
 81033fc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81033fe:	2301      	movs	r3, #1
 8103400:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8103402:	2300      	movs	r3, #0
 8103404:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8103406:	230a      	movs	r3, #10
 8103408:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 810340a:	2300      	movs	r3, #0
 810340c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810340e:	2301      	movs	r3, #1
 8103410:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8103412:	2300      	movs	r3, #0
 8103414:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8103416:	230a      	movs	r3, #10
 8103418:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 810341a:	f107 030c 	add.w	r3, r7, #12
 810341e:	4619      	mov	r1, r3
 8103420:	480d      	ldr	r0, [pc, #52]	@ (8103458 <MX_TIM8_Init+0xac>)
 8103422:	f007 fd2f 	bl	810ae84 <HAL_TIM_Encoder_Init>
 8103426:	4603      	mov	r3, r0
 8103428:	2b00      	cmp	r3, #0
 810342a:	d001      	beq.n	8103430 <MX_TIM8_Init+0x84>
		Error_Handler();
 810342c:	f000 fa68 	bl	8103900 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103430:	2300      	movs	r3, #0
 8103432:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8103434:	2300      	movs	r3, #0
 8103436:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103438:	2300      	movs	r3, #0
 810343a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 810343c:	463b      	mov	r3, r7
 810343e:	4619      	mov	r1, r3
 8103440:	4805      	ldr	r0, [pc, #20]	@ (8103458 <MX_TIM8_Init+0xac>)
 8103442:	f008 fd3f 	bl	810bec4 <HAL_TIMEx_MasterConfigSynchronization>
 8103446:	4603      	mov	r3, r0
 8103448:	2b00      	cmp	r3, #0
 810344a:	d001      	beq.n	8103450 <MX_TIM8_Init+0xa4>
			!= HAL_OK) {
		Error_Handler();
 810344c:	f000 fa58 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8103450:	bf00      	nop
 8103452:	3730      	adds	r7, #48	@ 0x30
 8103454:	46bd      	mov	sp, r7
 8103456:	bd80      	pop	{r7, pc}
 8103458:	100004c4 	.word	0x100004c4
 810345c:	40010400 	.word	0x40010400

08103460 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8103460:	b580      	push	{r7, lr}
 8103462:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8103464:	4b22      	ldr	r3, [pc, #136]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 8103466:	4a23      	ldr	r2, [pc, #140]	@ (81034f4 <MX_USART2_UART_Init+0x94>)
 8103468:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 810346a:	4b21      	ldr	r3, [pc, #132]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 810346c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103470:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8103472:	4b1f      	ldr	r3, [pc, #124]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 8103474:	2200      	movs	r2, #0
 8103476:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8103478:	4b1d      	ldr	r3, [pc, #116]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 810347a:	2200      	movs	r2, #0
 810347c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 810347e:	4b1c      	ldr	r3, [pc, #112]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 8103480:	2200      	movs	r2, #0
 8103482:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8103484:	4b1a      	ldr	r3, [pc, #104]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 8103486:	220c      	movs	r2, #12
 8103488:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810348a:	4b19      	ldr	r3, [pc, #100]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 810348c:	2200      	movs	r2, #0
 810348e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8103490:	4b17      	ldr	r3, [pc, #92]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 8103492:	2200      	movs	r2, #0
 8103494:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103496:	4b16      	ldr	r3, [pc, #88]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 8103498:	2200      	movs	r2, #0
 810349a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810349c:	4b14      	ldr	r3, [pc, #80]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 810349e:	2200      	movs	r2, #0
 81034a0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81034a2:	4b13      	ldr	r3, [pc, #76]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 81034a4:	2200      	movs	r2, #0
 81034a6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 81034a8:	4811      	ldr	r0, [pc, #68]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 81034aa:	f008 fe35 	bl	810c118 <HAL_UART_Init>
 81034ae:	4603      	mov	r3, r0
 81034b0:	2b00      	cmp	r3, #0
 81034b2:	d001      	beq.n	81034b8 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 81034b4:	f000 fa24 	bl	8103900 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 81034b8:	2100      	movs	r1, #0
 81034ba:	480d      	ldr	r0, [pc, #52]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 81034bc:	f00b fa57 	bl	810e96e <HAL_UARTEx_SetTxFifoThreshold>
 81034c0:	4603      	mov	r3, r0
 81034c2:	2b00      	cmp	r3, #0
 81034c4:	d001      	beq.n	81034ca <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 81034c6:	f000 fa1b 	bl	8103900 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 81034ca:	2100      	movs	r1, #0
 81034cc:	4808      	ldr	r0, [pc, #32]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 81034ce:	f00b fa8c 	bl	810e9ea <HAL_UARTEx_SetRxFifoThreshold>
 81034d2:	4603      	mov	r3, r0
 81034d4:	2b00      	cmp	r3, #0
 81034d6:	d001      	beq.n	81034dc <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 81034d8:	f000 fa12 	bl	8103900 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 81034dc:	4804      	ldr	r0, [pc, #16]	@ (81034f0 <MX_USART2_UART_Init+0x90>)
 81034de:	f00b fa0d 	bl	810e8fc <HAL_UARTEx_DisableFifoMode>
 81034e2:	4603      	mov	r3, r0
 81034e4:	2b00      	cmp	r3, #0
 81034e6:	d001      	beq.n	81034ec <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 81034e8:	f000 fa0a 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 81034ec:	bf00      	nop
 81034ee:	bd80      	pop	{r7, pc}
 81034f0:	10000510 	.word	0x10000510
 81034f4:	40004400 	.word	0x40004400

081034f8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 81034f8:	b580      	push	{r7, lr}
 81034fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 81034fc:	4b22      	ldr	r3, [pc, #136]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 81034fe:	4a23      	ldr	r2, [pc, #140]	@ (810358c <MX_USART3_UART_Init+0x94>)
 8103500:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8103502:	4b21      	ldr	r3, [pc, #132]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8103508:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810350a:	4b1f      	ldr	r3, [pc, #124]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 810350c:	2200      	movs	r2, #0
 810350e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8103510:	4b1d      	ldr	r3, [pc, #116]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103512:	2200      	movs	r2, #0
 8103514:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8103516:	4b1c      	ldr	r3, [pc, #112]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103518:	2200      	movs	r2, #0
 810351a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 810351c:	4b1a      	ldr	r3, [pc, #104]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 810351e:	220c      	movs	r2, #12
 8103520:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103522:	4b19      	ldr	r3, [pc, #100]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103524:	2200      	movs	r2, #0
 8103526:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103528:	4b17      	ldr	r3, [pc, #92]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 810352a:	2200      	movs	r2, #0
 810352c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810352e:	4b16      	ldr	r3, [pc, #88]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103530:	2200      	movs	r2, #0
 8103532:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103534:	4b14      	ldr	r3, [pc, #80]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103536:	2200      	movs	r2, #0
 8103538:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810353a:	4b13      	ldr	r3, [pc, #76]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 810353c:	2200      	movs	r2, #0
 810353e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8103540:	4811      	ldr	r0, [pc, #68]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103542:	f008 fde9 	bl	810c118 <HAL_UART_Init>
 8103546:	4603      	mov	r3, r0
 8103548:	2b00      	cmp	r3, #0
 810354a:	d001      	beq.n	8103550 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 810354c:	f000 f9d8 	bl	8103900 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8103550:	2100      	movs	r1, #0
 8103552:	480d      	ldr	r0, [pc, #52]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103554:	f00b fa0b 	bl	810e96e <HAL_UARTEx_SetTxFifoThreshold>
 8103558:	4603      	mov	r3, r0
 810355a:	2b00      	cmp	r3, #0
 810355c:	d001      	beq.n	8103562 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 810355e:	f000 f9cf 	bl	8103900 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8103562:	2100      	movs	r1, #0
 8103564:	4808      	ldr	r0, [pc, #32]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103566:	f00b fa40 	bl	810e9ea <HAL_UARTEx_SetRxFifoThreshold>
 810356a:	4603      	mov	r3, r0
 810356c:	2b00      	cmp	r3, #0
 810356e:	d001      	beq.n	8103574 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8103570:	f000 f9c6 	bl	8103900 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8103574:	4804      	ldr	r0, [pc, #16]	@ (8103588 <MX_USART3_UART_Init+0x90>)
 8103576:	f00b f9c1 	bl	810e8fc <HAL_UARTEx_DisableFifoMode>
 810357a:	4603      	mov	r3, r0
 810357c:	2b00      	cmp	r3, #0
 810357e:	d001      	beq.n	8103584 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8103580:	f000 f9be 	bl	8103900 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8103584:	bf00      	nop
 8103586:	bd80      	pop	{r7, pc}
 8103588:	100005a4 	.word	0x100005a4
 810358c:	40004800 	.word	0x40004800

08103590 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8103590:	b580      	push	{r7, lr}
 8103592:	b08c      	sub	sp, #48	@ 0x30
 8103594:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8103596:	f107 031c 	add.w	r3, r7, #28
 810359a:	2200      	movs	r2, #0
 810359c:	601a      	str	r2, [r3, #0]
 810359e:	605a      	str	r2, [r3, #4]
 81035a0:	609a      	str	r2, [r3, #8]
 81035a2:	60da      	str	r2, [r3, #12]
 81035a4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 81035a6:	4b4e      	ldr	r3, [pc, #312]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035ac:	4a4c      	ldr	r2, [pc, #304]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035ae:	f043 0304 	orr.w	r3, r3, #4
 81035b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81035b6:	4b4a      	ldr	r3, [pc, #296]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035bc:	f003 0304 	and.w	r3, r3, #4
 81035c0:	61bb      	str	r3, [r7, #24]
 81035c2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 81035c4:	4b46      	ldr	r3, [pc, #280]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035ca:	4a45      	ldr	r2, [pc, #276]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035cc:	f043 0301 	orr.w	r3, r3, #1
 81035d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81035d4:	4b42      	ldr	r3, [pc, #264]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035da:	f003 0301 	and.w	r3, r3, #1
 81035de:	617b      	str	r3, [r7, #20]
 81035e0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 81035e2:	4b3f      	ldr	r3, [pc, #252]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035e8:	4a3d      	ldr	r2, [pc, #244]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035ea:	f043 0320 	orr.w	r3, r3, #32
 81035ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81035f2:	4b3b      	ldr	r3, [pc, #236]	@ (81036e0 <MX_GPIO_Init+0x150>)
 81035f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81035f8:	f003 0320 	and.w	r3, r3, #32
 81035fc:	613b      	str	r3, [r7, #16]
 81035fe:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8103600:	4b37      	ldr	r3, [pc, #220]	@ (81036e0 <MX_GPIO_Init+0x150>)
 8103602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103606:	4a36      	ldr	r2, [pc, #216]	@ (81036e0 <MX_GPIO_Init+0x150>)
 8103608:	f043 0310 	orr.w	r3, r3, #16
 810360c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103610:	4b33      	ldr	r3, [pc, #204]	@ (81036e0 <MX_GPIO_Init+0x150>)
 8103612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103616:	f003 0310 	and.w	r3, r3, #16
 810361a:	60fb      	str	r3, [r7, #12]
 810361c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 810361e:	4b30      	ldr	r3, [pc, #192]	@ (81036e0 <MX_GPIO_Init+0x150>)
 8103620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103624:	4a2e      	ldr	r2, [pc, #184]	@ (81036e0 <MX_GPIO_Init+0x150>)
 8103626:	f043 0302 	orr.w	r3, r3, #2
 810362a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810362e:	4b2c      	ldr	r3, [pc, #176]	@ (81036e0 <MX_GPIO_Init+0x150>)
 8103630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103634:	f003 0302 	and.w	r3, r3, #2
 8103638:	60bb      	str	r3, [r7, #8]
 810363a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 810363c:	4b28      	ldr	r3, [pc, #160]	@ (81036e0 <MX_GPIO_Init+0x150>)
 810363e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103642:	4a27      	ldr	r2, [pc, #156]	@ (81036e0 <MX_GPIO_Init+0x150>)
 8103644:	f043 0308 	orr.w	r3, r3, #8
 8103648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810364c:	4b24      	ldr	r3, [pc, #144]	@ (81036e0 <MX_GPIO_Init+0x150>)
 810364e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103652:	f003 0308 	and.w	r3, r3, #8
 8103656:	607b      	str	r3, [r7, #4]
 8103658:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 810365a:	2200      	movs	r2, #0
 810365c:	2130      	movs	r1, #48	@ 0x30
 810365e:	4821      	ldr	r0, [pc, #132]	@ (81036e4 <MX_GPIO_Init+0x154>)
 8103660:	f003 fbba 	bl	8106dd8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8103664:	2200      	movs	r2, #0
 8103666:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 810366a:	481f      	ldr	r0, [pc, #124]	@ (81036e8 <MX_GPIO_Init+0x158>)
 810366c:	f003 fbb4 	bl	8106dd8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8103670:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103674:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8103676:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 810367a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810367c:	2300      	movs	r3, #0
 810367e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103680:	f107 031c 	add.w	r3, r7, #28
 8103684:	4619      	mov	r1, r3
 8103686:	4819      	ldr	r0, [pc, #100]	@ (81036ec <MX_GPIO_Init+0x15c>)
 8103688:	f003 f9f6 	bl	8106a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 810368c:	2330      	movs	r3, #48	@ 0x30
 810368e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103690:	2301      	movs	r3, #1
 8103692:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103694:	2300      	movs	r3, #0
 8103696:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103698:	2300      	movs	r3, #0
 810369a:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810369c:	f107 031c 	add.w	r3, r7, #28
 81036a0:	4619      	mov	r1, r3
 81036a2:	4810      	ldr	r0, [pc, #64]	@ (81036e4 <MX_GPIO_Init+0x154>)
 81036a4:	f003 f9e8 	bl	8106a78 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 81036a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81036ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81036ae:	2301      	movs	r3, #1
 81036b0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81036b2:	2300      	movs	r3, #0
 81036b4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81036b6:	2300      	movs	r3, #0
 81036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81036ba:	f107 031c 	add.w	r3, r7, #28
 81036be:	4619      	mov	r1, r3
 81036c0:	4809      	ldr	r0, [pc, #36]	@ (81036e8 <MX_GPIO_Init+0x158>)
 81036c2:	f003 f9d9 	bl	8106a78 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 81036c6:	2200      	movs	r2, #0
 81036c8:	2100      	movs	r1, #0
 81036ca:	2028      	movs	r0, #40	@ 0x28
 81036cc:	f002 fc27 	bl	8105f1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 81036d0:	2028      	movs	r0, #40	@ 0x28
 81036d2:	f002 fc3e 	bl	8105f52 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 81036d6:	bf00      	nop
 81036d8:	3730      	adds	r7, #48	@ 0x30
 81036da:	46bd      	mov	sp, r7
 81036dc:	bd80      	pop	{r7, pc}
 81036de:	bf00      	nop
 81036e0:	58024400 	.word	0x58024400
 81036e4:	58020000 	.word	0x58020000
 81036e8:	58020400 	.word	0x58020400
 81036ec:	58020800 	.word	0x58020800

081036f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 81036f0:	b480      	push	{r7}
 81036f2:	b083      	sub	sp, #12
 81036f4:	af00      	add	r7, sp, #0
 81036f6:	4603      	mov	r3, r0
 81036f8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_3) {
 81036fa:	88fb      	ldrh	r3, [r7, #6]
 81036fc:	2b08      	cmp	r3, #8
 81036fe:	d102      	bne.n	8103706 <HAL_GPIO_EXTI_Callback+0x16>
		flag_BNO055_Data_Ready = 1;
 8103700:	4b09      	ldr	r3, [pc, #36]	@ (8103728 <HAL_GPIO_EXTI_Callback+0x38>)
 8103702:	2201      	movs	r2, #1
 8103704:	601a      	str	r2, [r3, #0]
	}

	//FUNZIONE DI CALLBACK PULSANTE BLU
	if (GPIO_Pin == GPIO_PIN_13) {
 8103706:	88fb      	ldrh	r3, [r7, #6]
 8103708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810370c:	d105      	bne.n	810371a <HAL_GPIO_EXTI_Callback+0x2a>

		tasto_premuto = 1;
 810370e:	4b07      	ldr	r3, [pc, #28]	@ (810372c <HAL_GPIO_EXTI_Callback+0x3c>)
 8103710:	2201      	movs	r2, #1
 8103712:	601a      	str	r2, [r3, #0]
		tasto_appena_premuto = 1;
 8103714:	4b06      	ldr	r3, [pc, #24]	@ (8103730 <HAL_GPIO_EXTI_Callback+0x40>)
 8103716:	2201      	movs	r2, #1
 8103718:	601a      	str	r2, [r3, #0]

	}
}
 810371a:	bf00      	nop
 810371c:	370c      	adds	r7, #12
 810371e:	46bd      	mov	sp, r7
 8103720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103724:	4770      	bx	lr
 8103726:	bf00      	nop
 8103728:	100087a8 	.word	0x100087a8
 810372c:	10008800 	.word	0x10008800
 8103730:	10008804 	.word	0x10008804
 8103734:	00000000 	.word	0x00000000

08103738 <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8103738:	b580      	push	{r7, lr}
 810373a:	b082      	sub	sp, #8
 810373c:	af00      	add	r7, sp, #0
 810373e:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	4a31      	ldr	r2, [pc, #196]	@ (8103808 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8103744:	4293      	cmp	r3, r2
 8103746:	d140      	bne.n	81037ca <HAL_TIM_PeriodElapsedCallback+0x92>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 8103748:	4b30      	ldr	r3, [pc, #192]	@ (810380c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 810374a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 810374e:	601a      	str	r2, [r3, #0]
		n_ref++;
 8103750:	4b2f      	ldr	r3, [pc, #188]	@ (8103810 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8103752:	681b      	ldr	r3, [r3, #0]
 8103754:	3301      	adds	r3, #1
 8103756:	4a2e      	ldr	r2, [pc, #184]	@ (8103810 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8103758:	6013      	str	r3, [r2, #0]
		tempo += 0.01;
 810375a:	4b2e      	ldr	r3, [pc, #184]	@ (8103814 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 810375c:	681b      	ldr	r3, [r3, #0]
 810375e:	4618      	mov	r0, r3
 8103760:	f7fc ff7a 	bl	8100658 <__aeabi_f2d>
 8103764:	a326      	add	r3, pc, #152	@ (adr r3, 8103800 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8103766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810376a:	f7fc fe17 	bl	810039c <__adddf3>
 810376e:	4602      	mov	r2, r0
 8103770:	460b      	mov	r3, r1
 8103772:	4610      	mov	r0, r2
 8103774:	4619      	mov	r1, r3
 8103776:	f7fd fabf 	bl	8100cf8 <__aeabi_d2f>
 810377a:	4603      	mov	r3, r0
 810377c:	4a25      	ldr	r2, [pc, #148]	@ (8103814 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 810377e:	6013      	str	r3, [r2, #0]
		if (n_ref > 100 * 500)
 8103780:	4b23      	ldr	r3, [pc, #140]	@ (8103810 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8103788:	4293      	cmp	r3, r2
 810378a:	dd02      	ble.n	8103792 <HAL_TIM_PeriodElapsedCallback+0x5a>
			n_ref = 0;
 810378c:	4b20      	ldr	r3, [pc, #128]	@ (8103810 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 810378e:	2200      	movs	r2, #0
 8103790:	601a      	str	r2, [r3, #0]

		if (tempo > 3600)
 8103792:	4b20      	ldr	r3, [pc, #128]	@ (8103814 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8103794:	edd3 7a00 	vldr	s15, [r3]
 8103798:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8103818 <HAL_TIM_PeriodElapsedCallback+0xe0>
 810379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 81037a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81037a4:	dd03      	ble.n	81037ae <HAL_TIM_PeriodElapsedCallback+0x76>
			tempo = 0;
 81037a6:	4b1b      	ldr	r3, [pc, #108]	@ (8103814 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 81037a8:	f04f 0200 	mov.w	r2, #0
 81037ac:	601a      	str	r2, [r3, #0]

		contatore_esp320++;
 81037ae:	4b1b      	ldr	r3, [pc, #108]	@ (810381c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	3301      	adds	r3, #1
 81037b4:	4a19      	ldr	r2, [pc, #100]	@ (810381c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 81037b6:	6013      	str	r3, [r2, #0]
		if (contatore_esp320 > 3000)
 81037b8:	4b18      	ldr	r3, [pc, #96]	@ (810381c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 81037c0:	4293      	cmp	r3, r2
 81037c2:	dd02      	ble.n	81037ca <HAL_TIM_PeriodElapsedCallback+0x92>
			contatore_esp320 = 0;
 81037c4:	4b15      	ldr	r3, [pc, #84]	@ (810381c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 81037c6:	2200      	movs	r2, #0
 81037c8:	601a      	str	r2, [r3, #0]

	}

	if (htim == &htim6) {
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	4a14      	ldr	r2, [pc, #80]	@ (8103820 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 81037ce:	4293      	cmp	r3, r2
 81037d0:	d110      	bne.n	81037f4 <HAL_TIM_PeriodElapsedCallback+0xbc>

		// Gestione dell’invio periodico dei dati
		if (trasmissione_attiva == 1) {
 81037d2:	4b14      	ldr	r3, [pc, #80]	@ (8103824 <HAL_TIM_PeriodElapsedCallback+0xec>)
 81037d4:	781b      	ldrb	r3, [r3, #0]
 81037d6:	2b01      	cmp	r3, #1
 81037d8:	d10c      	bne.n	81037f4 <HAL_TIM_PeriodElapsedCallback+0xbc>
			 bytesWritten = sprintf(buffer, "%d,%lf,%lf\n", dati.velocita,
			 dati.accelerazione, dati.tempo);
			 printf("Dati trasmessi: %s\r\n", buffer);
			 //Trasmissione_dati(buffer, bytesWritten);
			 * */
			printf("Dati trasmessi: %s\r\n", bufferDati);
 81037da:	4913      	ldr	r1, [pc, #76]	@ (8103828 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 81037dc:	4813      	ldr	r0, [pc, #76]	@ (810382c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 81037de:	f00c fbd7 	bl	810ff90 <iprintf>
			// Trasmissione_dati(bufferDati, indiceBuffer);
			indiceBuffer = 0;
 81037e2:	4b13      	ldr	r3, [pc, #76]	@ (8103830 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 81037e4:	2200      	movs	r2, #0
 81037e6:	601a      	str	r2, [r3, #0]
			memset(bufferDati, 0, sizeof(bufferDati));  // Pulizia buffer
 81037e8:	f248 02e8 	movw	r2, #33000	@ 0x80e8
 81037ec:	2100      	movs	r1, #0
 81037ee:	480e      	ldr	r0, [pc, #56]	@ (8103828 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 81037f0:	f00c fd36 	bl	8110260 <memset>

		}

	}
}
 81037f4:	bf00      	nop
 81037f6:	3708      	adds	r7, #8
 81037f8:	46bd      	mov	sp, r7
 81037fa:	bd80      	pop	{r7, pc}
 81037fc:	f3af 8000 	nop.w
 8103800:	47ae147b 	.word	0x47ae147b
 8103804:	3f847ae1 	.word	0x3f847ae1
 8103808:	10000394 	.word	0x10000394
 810380c:	100087ac 	.word	0x100087ac
 8103810:	10008a40 	.word	0x10008a40
 8103814:	10008724 	.word	0x10008724
 8103818:	45610000 	.word	0x45610000
 810381c:	10008808 	.word	0x10008808
 8103820:	10000478 	.word	0x10000478
 8103824:	10008a49 	.word	0x10008a49
 8103828:	10000638 	.word	0x10000638
 810382c:	08113950 	.word	0x08113950
 8103830:	10008720 	.word	0x10008720

08103834 <__io_getchar>:
//INPUT E OUTPUT USART
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}
int __io_getchar(void) {
 8103834:	b580      	push	{r7, lr}
 8103836:	b082      	sub	sp, #8
 8103838:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 810383a:	4b0b      	ldr	r3, [pc, #44]	@ (8103868 <__io_getchar+0x34>)
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	2208      	movs	r2, #8
 8103840:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103842:	1df9      	adds	r1, r7, #7
 8103844:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103848:	2201      	movs	r2, #1
 810384a:	4807      	ldr	r0, [pc, #28]	@ (8103868 <__io_getchar+0x34>)
 810384c:	f008 fd42 	bl	810c2d4 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103850:	1df9      	adds	r1, r7, #7
 8103852:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103856:	2201      	movs	r2, #1
 8103858:	4803      	ldr	r0, [pc, #12]	@ (8103868 <__io_getchar+0x34>)
 810385a:	f008 fcad 	bl	810c1b8 <HAL_UART_Transmit>
	return ch;
 810385e:	79fb      	ldrb	r3, [r7, #7]
}
 8103860:	4618      	mov	r0, r3
 8103862:	3708      	adds	r7, #8
 8103864:	46bd      	mov	sp, r7
 8103866:	bd80      	pop	{r7, pc}
 8103868:	100005a4 	.word	0x100005a4

0810386c <HAL_UART_RxCpltCallback>:
void Trasmissione_dati(void *data, size_t size) {
	HAL_UART_Transmit(&huart2, (uint8_t*) data, size, HAL_MAX_DELAY);
}

// Callback chiamata quando un byte viene ricevuto sulla UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 810386c:	b580      	push	{r7, lr}
 810386e:	b082      	sub	sp, #8
 8103870:	af00      	add	r7, sp, #0
 8103872:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	4a13      	ldr	r2, [pc, #76]	@ (81038c4 <HAL_UART_RxCpltCallback+0x58>)
 8103878:	4293      	cmp	r3, r2
 810387a:	d11f      	bne.n	81038bc <HAL_UART_RxCpltCallback+0x50>
		if (rx_buffer[0] == 'S') {
 810387c:	4b12      	ldr	r3, [pc, #72]	@ (81038c8 <HAL_UART_RxCpltCallback+0x5c>)
 810387e:	781b      	ldrb	r3, [r3, #0]
 8103880:	2b53      	cmp	r3, #83	@ 0x53
 8103882:	d109      	bne.n	8103898 <HAL_UART_RxCpltCallback+0x2c>
			// Interrompi la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 8103884:	4b10      	ldr	r3, [pc, #64]	@ (81038c8 <HAL_UART_RxCpltCallback+0x5c>)
 8103886:	781b      	ldrb	r3, [r3, #0]
 8103888:	4619      	mov	r1, r3
 810388a:	4810      	ldr	r0, [pc, #64]	@ (81038cc <HAL_UART_RxCpltCallback+0x60>)
 810388c:	f00c fb80 	bl	810ff90 <iprintf>
			trasmissione_attiva = 0;
 8103890:	4b0f      	ldr	r3, [pc, #60]	@ (81038d0 <HAL_UART_RxCpltCallback+0x64>)
 8103892:	2200      	movs	r2, #0
 8103894:	701a      	strb	r2, [r3, #0]
 8103896:	e00c      	b.n	81038b2 <HAL_UART_RxCpltCallback+0x46>

		} else if (rx_buffer[0] == 'V') {
 8103898:	4b0b      	ldr	r3, [pc, #44]	@ (81038c8 <HAL_UART_RxCpltCallback+0x5c>)
 810389a:	781b      	ldrb	r3, [r3, #0]
 810389c:	2b56      	cmp	r3, #86	@ 0x56
 810389e:	d108      	bne.n	81038b2 <HAL_UART_RxCpltCallback+0x46>
			// Avvia la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 81038a0:	4b09      	ldr	r3, [pc, #36]	@ (81038c8 <HAL_UART_RxCpltCallback+0x5c>)
 81038a2:	781b      	ldrb	r3, [r3, #0]
 81038a4:	4619      	mov	r1, r3
 81038a6:	4809      	ldr	r0, [pc, #36]	@ (81038cc <HAL_UART_RxCpltCallback+0x60>)
 81038a8:	f00c fb72 	bl	810ff90 <iprintf>
			trasmissione_attiva = 1;
 81038ac:	4b08      	ldr	r3, [pc, #32]	@ (81038d0 <HAL_UART_RxCpltCallback+0x64>)
 81038ae:	2201      	movs	r2, #1
 81038b0:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
 81038b2:	2201      	movs	r2, #1
 81038b4:	4904      	ldr	r1, [pc, #16]	@ (81038c8 <HAL_UART_RxCpltCallback+0x5c>)
 81038b6:	4803      	ldr	r0, [pc, #12]	@ (81038c4 <HAL_UART_RxCpltCallback+0x58>)
 81038b8:	f008 fdd4 	bl	810c464 <HAL_UART_Receive_IT>
	}
}
 81038bc:	bf00      	nop
 81038be:	3708      	adds	r7, #8
 81038c0:	46bd      	mov	sp, r7
 81038c2:	bd80      	pop	{r7, pc}
 81038c4:	10000510 	.word	0x10000510
 81038c8:	10008a48 	.word	0x10008a48
 81038cc:	08113968 	.word	0x08113968
 81038d0:	10008a49 	.word	0x10008a49

081038d4 <_write>:
// Funzione di scrittura per printf
int _write(int file, char *ptr, int len) {
 81038d4:	b580      	push	{r7, lr}
 81038d6:	b084      	sub	sp, #16
 81038d8:	af00      	add	r7, sp, #0
 81038da:	60f8      	str	r0, [r7, #12]
 81038dc:	60b9      	str	r1, [r7, #8]
 81038de:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 81038e0:	687b      	ldr	r3, [r7, #4]
 81038e2:	b29a      	uxth	r2, r3
 81038e4:	f04f 33ff 	mov.w	r3, #4294967295
 81038e8:	68b9      	ldr	r1, [r7, #8]
 81038ea:	4804      	ldr	r0, [pc, #16]	@ (81038fc <_write+0x28>)
 81038ec:	f008 fc64 	bl	810c1b8 <HAL_UART_Transmit>
	return len;
 81038f0:	687b      	ldr	r3, [r7, #4]
}
 81038f2:	4618      	mov	r0, r3
 81038f4:	3710      	adds	r7, #16
 81038f6:	46bd      	mov	sp, r7
 81038f8:	bd80      	pop	{r7, pc}
 81038fa:	bf00      	nop
 81038fc:	100005a4 	.word	0x100005a4

08103900 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8103900:	b480      	push	{r7}
 8103902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8103904:	b672      	cpsid	i
}
 8103906:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8103908:	bf00      	nop
 810390a:	e7fd      	b.n	8103908 <Error_Handler+0x8>

0810390c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810390c:	b480      	push	{r7}
 810390e:	b083      	sub	sp, #12
 8103910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103912:	4b0a      	ldr	r3, [pc, #40]	@ (810393c <HAL_MspInit+0x30>)
 8103914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103918:	4a08      	ldr	r2, [pc, #32]	@ (810393c <HAL_MspInit+0x30>)
 810391a:	f043 0302 	orr.w	r3, r3, #2
 810391e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103922:	4b06      	ldr	r3, [pc, #24]	@ (810393c <HAL_MspInit+0x30>)
 8103924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103928:	f003 0302 	and.w	r3, r3, #2
 810392c:	607b      	str	r3, [r7, #4]
 810392e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103930:	bf00      	nop
 8103932:	370c      	adds	r7, #12
 8103934:	46bd      	mov	sp, r7
 8103936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810393a:	4770      	bx	lr
 810393c:	58024400 	.word	0x58024400

08103940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8103940:	b580      	push	{r7, lr}
 8103942:	b0ba      	sub	sp, #232	@ 0xe8
 8103944:	af00      	add	r7, sp, #0
 8103946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103948:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810394c:	2200      	movs	r2, #0
 810394e:	601a      	str	r2, [r3, #0]
 8103950:	605a      	str	r2, [r3, #4]
 8103952:	609a      	str	r2, [r3, #8]
 8103954:	60da      	str	r2, [r3, #12]
 8103956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103958:	f107 0310 	add.w	r3, r7, #16
 810395c:	22c0      	movs	r2, #192	@ 0xc0
 810395e:	2100      	movs	r1, #0
 8103960:	4618      	mov	r0, r3
 8103962:	f00c fc7d 	bl	8110260 <memset>
  if(hadc->Instance==ADC1)
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	4a2c      	ldr	r2, [pc, #176]	@ (8103a1c <HAL_ADC_MspInit+0xdc>)
 810396c:	4293      	cmp	r3, r2
 810396e:	d151      	bne.n	8103a14 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8103970:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8103974:	f04f 0300 	mov.w	r3, #0
 8103978:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 810397c:	2301      	movs	r3, #1
 810397e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8103980:	2312      	movs	r3, #18
 8103982:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8103984:	2302      	movs	r3, #2
 8103986:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8103988:	2302      	movs	r3, #2
 810398a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 810398c:	2302      	movs	r3, #2
 810398e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8103990:	23c0      	movs	r3, #192	@ 0xc0
 8103992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8103994:	2320      	movs	r3, #32
 8103996:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8103998:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 810399c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 810399e:	2300      	movs	r3, #0
 81039a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81039a4:	f107 0310 	add.w	r3, r7, #16
 81039a8:	4618      	mov	r0, r3
 81039aa:	f004 fabd 	bl	8107f28 <HAL_RCCEx_PeriphCLKConfig>
 81039ae:	4603      	mov	r3, r0
 81039b0:	2b00      	cmp	r3, #0
 81039b2:	d001      	beq.n	81039b8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 81039b4:	f7ff ffa4 	bl	8103900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81039b8:	4b19      	ldr	r3, [pc, #100]	@ (8103a20 <HAL_ADC_MspInit+0xe0>)
 81039ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81039be:	4a18      	ldr	r2, [pc, #96]	@ (8103a20 <HAL_ADC_MspInit+0xe0>)
 81039c0:	f043 0320 	orr.w	r3, r3, #32
 81039c4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81039c8:	4b15      	ldr	r3, [pc, #84]	@ (8103a20 <HAL_ADC_MspInit+0xe0>)
 81039ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81039ce:	f003 0320 	and.w	r3, r3, #32
 81039d2:	60fb      	str	r3, [r7, #12]
 81039d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81039d6:	4b12      	ldr	r3, [pc, #72]	@ (8103a20 <HAL_ADC_MspInit+0xe0>)
 81039d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81039dc:	4a10      	ldr	r2, [pc, #64]	@ (8103a20 <HAL_ADC_MspInit+0xe0>)
 81039de:	f043 0320 	orr.w	r3, r3, #32
 81039e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81039e6:	4b0e      	ldr	r3, [pc, #56]	@ (8103a20 <HAL_ADC_MspInit+0xe0>)
 81039e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81039ec:	f003 0320 	and.w	r3, r3, #32
 81039f0:	60bb      	str	r3, [r7, #8]
 81039f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 81039f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81039f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81039fc:	2303      	movs	r3, #3
 81039fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103a02:	2300      	movs	r3, #0
 8103a04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8103a08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103a0c:	4619      	mov	r1, r3
 8103a0e:	4805      	ldr	r0, [pc, #20]	@ (8103a24 <HAL_ADC_MspInit+0xe4>)
 8103a10:	f003 f832 	bl	8106a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8103a14:	bf00      	nop
 8103a16:	37e8      	adds	r7, #232	@ 0xe8
 8103a18:	46bd      	mov	sp, r7
 8103a1a:	bd80      	pop	{r7, pc}
 8103a1c:	40022000 	.word	0x40022000
 8103a20:	58024400 	.word	0x58024400
 8103a24:	58021400 	.word	0x58021400

08103a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8103a28:	b580      	push	{r7, lr}
 8103a2a:	b0ba      	sub	sp, #232	@ 0xe8
 8103a2c:	af00      	add	r7, sp, #0
 8103a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103a30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103a34:	2200      	movs	r2, #0
 8103a36:	601a      	str	r2, [r3, #0]
 8103a38:	605a      	str	r2, [r3, #4]
 8103a3a:	609a      	str	r2, [r3, #8]
 8103a3c:	60da      	str	r2, [r3, #12]
 8103a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103a40:	f107 0310 	add.w	r3, r7, #16
 8103a44:	22c0      	movs	r2, #192	@ 0xc0
 8103a46:	2100      	movs	r1, #0
 8103a48:	4618      	mov	r0, r3
 8103a4a:	f00c fc09 	bl	8110260 <memset>
  if(hi2c->Instance==I2C1)
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	4a26      	ldr	r2, [pc, #152]	@ (8103aec <HAL_I2C_MspInit+0xc4>)
 8103a54:	4293      	cmp	r3, r2
 8103a56:	d145      	bne.n	8103ae4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8103a58:	f04f 0208 	mov.w	r2, #8
 8103a5c:	f04f 0300 	mov.w	r3, #0
 8103a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8103a64:	2300      	movs	r3, #0
 8103a66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103a6a:	f107 0310 	add.w	r3, r7, #16
 8103a6e:	4618      	mov	r0, r3
 8103a70:	f004 fa5a 	bl	8107f28 <HAL_RCCEx_PeriphCLKConfig>
 8103a74:	4603      	mov	r3, r0
 8103a76:	2b00      	cmp	r3, #0
 8103a78:	d001      	beq.n	8103a7e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8103a7a:	f7ff ff41 	bl	8103900 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8103a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8103af0 <HAL_I2C_MspInit+0xc8>)
 8103a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103a84:	4a1a      	ldr	r2, [pc, #104]	@ (8103af0 <HAL_I2C_MspInit+0xc8>)
 8103a86:	f043 0302 	orr.w	r3, r3, #2
 8103a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103a8e:	4b18      	ldr	r3, [pc, #96]	@ (8103af0 <HAL_I2C_MspInit+0xc8>)
 8103a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103a94:	f003 0302 	and.w	r3, r3, #2
 8103a98:	60fb      	str	r3, [r7, #12]
 8103a9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8103a9c:	23c0      	movs	r3, #192	@ 0xc0
 8103a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8103aa2:	2312      	movs	r3, #18
 8103aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103aa8:	2300      	movs	r3, #0
 8103aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103aae:	2300      	movs	r3, #0
 8103ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8103ab4:	2304      	movs	r3, #4
 8103ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103aba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103abe:	4619      	mov	r1, r3
 8103ac0:	480c      	ldr	r0, [pc, #48]	@ (8103af4 <HAL_I2C_MspInit+0xcc>)
 8103ac2:	f002 ffd9 	bl	8106a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8103ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8103af0 <HAL_I2C_MspInit+0xc8>)
 8103ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103acc:	4a08      	ldr	r2, [pc, #32]	@ (8103af0 <HAL_I2C_MspInit+0xc8>)
 8103ace:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103ad6:	4b06      	ldr	r3, [pc, #24]	@ (8103af0 <HAL_I2C_MspInit+0xc8>)
 8103ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8103ae0:	60bb      	str	r3, [r7, #8]
 8103ae2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8103ae4:	bf00      	nop
 8103ae6:	37e8      	adds	r7, #232	@ 0xe8
 8103ae8:	46bd      	mov	sp, r7
 8103aea:	bd80      	pop	{r7, pc}
 8103aec:	40005400 	.word	0x40005400
 8103af0:	58024400 	.word	0x58024400
 8103af4:	58020400 	.word	0x58020400

08103af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8103af8:	b580      	push	{r7, lr}
 8103afa:	b086      	sub	sp, #24
 8103afc:	af00      	add	r7, sp, #0
 8103afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	4a32      	ldr	r2, [pc, #200]	@ (8103bd0 <HAL_TIM_Base_MspInit+0xd8>)
 8103b06:	4293      	cmp	r3, r2
 8103b08:	d10f      	bne.n	8103b2a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8103b0a:	4b32      	ldr	r3, [pc, #200]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103b10:	4a30      	ldr	r2, [pc, #192]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b12:	f043 0301 	orr.w	r3, r3, #1
 8103b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103b20:	f003 0301 	and.w	r3, r3, #1
 8103b24:	617b      	str	r3, [r7, #20]
 8103b26:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8103b28:	e04d      	b.n	8103bc6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103b32:	d117      	bne.n	8103b64 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8103b34:	4b27      	ldr	r3, [pc, #156]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103b3a:	4a26      	ldr	r2, [pc, #152]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b3c:	f043 0301 	orr.w	r3, r3, #1
 8103b40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103b44:	4b23      	ldr	r3, [pc, #140]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103b4a:	f003 0301 	and.w	r3, r3, #1
 8103b4e:	613b      	str	r3, [r7, #16]
 8103b50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8103b52:	2200      	movs	r2, #0
 8103b54:	2100      	movs	r1, #0
 8103b56:	201c      	movs	r0, #28
 8103b58:	f002 f9e1 	bl	8105f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8103b5c:	201c      	movs	r0, #28
 8103b5e:	f002 f9f8 	bl	8105f52 <HAL_NVIC_EnableIRQ>
}
 8103b62:	e030      	b.n	8103bc6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	681b      	ldr	r3, [r3, #0]
 8103b68:	4a1b      	ldr	r2, [pc, #108]	@ (8103bd8 <HAL_TIM_Base_MspInit+0xe0>)
 8103b6a:	4293      	cmp	r3, r2
 8103b6c:	d10f      	bne.n	8103b8e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8103b6e:	4b19      	ldr	r3, [pc, #100]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103b74:	4a17      	ldr	r2, [pc, #92]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b76:	f043 0302 	orr.w	r3, r3, #2
 8103b7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103b7e:	4b15      	ldr	r3, [pc, #84]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103b84:	f003 0302 	and.w	r3, r3, #2
 8103b88:	60fb      	str	r3, [r7, #12]
 8103b8a:	68fb      	ldr	r3, [r7, #12]
}
 8103b8c:	e01b      	b.n	8103bc6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM6)
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	4a12      	ldr	r2, [pc, #72]	@ (8103bdc <HAL_TIM_Base_MspInit+0xe4>)
 8103b94:	4293      	cmp	r3, r2
 8103b96:	d116      	bne.n	8103bc6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8103b98:	4b0e      	ldr	r3, [pc, #56]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103ba0:	f043 0310 	orr.w	r3, r3, #16
 8103ba4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8103bd4 <HAL_TIM_Base_MspInit+0xdc>)
 8103baa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103bae:	f003 0310 	and.w	r3, r3, #16
 8103bb2:	60bb      	str	r3, [r7, #8]
 8103bb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8103bb6:	2200      	movs	r2, #0
 8103bb8:	2100      	movs	r1, #0
 8103bba:	2036      	movs	r0, #54	@ 0x36
 8103bbc:	f002 f9af 	bl	8105f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8103bc0:	2036      	movs	r0, #54	@ 0x36
 8103bc2:	f002 f9c6 	bl	8105f52 <HAL_NVIC_EnableIRQ>
}
 8103bc6:	bf00      	nop
 8103bc8:	3718      	adds	r7, #24
 8103bca:	46bd      	mov	sp, r7
 8103bcc:	bd80      	pop	{r7, pc}
 8103bce:	bf00      	nop
 8103bd0:	40010000 	.word	0x40010000
 8103bd4:	58024400 	.word	0x58024400
 8103bd8:	40000400 	.word	0x40000400
 8103bdc:	40001000 	.word	0x40001000

08103be0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8103be0:	b580      	push	{r7, lr}
 8103be2:	b08c      	sub	sp, #48	@ 0x30
 8103be4:	af00      	add	r7, sp, #0
 8103be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103be8:	f107 031c 	add.w	r3, r7, #28
 8103bec:	2200      	movs	r2, #0
 8103bee:	601a      	str	r2, [r3, #0]
 8103bf0:	605a      	str	r2, [r3, #4]
 8103bf2:	609a      	str	r2, [r3, #8]
 8103bf4:	60da      	str	r2, [r3, #12]
 8103bf6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	4a34      	ldr	r2, [pc, #208]	@ (8103cd0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8103bfe:	4293      	cmp	r3, r2
 8103c00:	d12f      	bne.n	8103c62 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8103c02:	4b34      	ldr	r3, [pc, #208]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103c08:	4a32      	ldr	r2, [pc, #200]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c0a:	f043 0304 	orr.w	r3, r3, #4
 8103c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103c12:	4b30      	ldr	r3, [pc, #192]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103c18:	f003 0304 	and.w	r3, r3, #4
 8103c1c:	61bb      	str	r3, [r7, #24]
 8103c1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103c20:	4b2c      	ldr	r3, [pc, #176]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c26:	4a2b      	ldr	r2, [pc, #172]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c28:	f043 0308 	orr.w	r3, r3, #8
 8103c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c30:	4b28      	ldr	r3, [pc, #160]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c36:	f003 0308 	and.w	r3, r3, #8
 8103c3a:	617b      	str	r3, [r7, #20]
 8103c3c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8103c3e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8103c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103c44:	2302      	movs	r3, #2
 8103c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103c48:	2300      	movs	r3, #0
 8103c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103c4c:	2300      	movs	r3, #0
 8103c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8103c50:	2302      	movs	r3, #2
 8103c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103c54:	f107 031c 	add.w	r3, r7, #28
 8103c58:	4619      	mov	r1, r3
 8103c5a:	481f      	ldr	r0, [pc, #124]	@ (8103cd8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8103c5c:	f002 ff0c 	bl	8106a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8103c60:	e032      	b.n	8103cc8 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	4a1d      	ldr	r2, [pc, #116]	@ (8103cdc <HAL_TIM_Encoder_MspInit+0xfc>)
 8103c68:	4293      	cmp	r3, r2
 8103c6a:	d12d      	bne.n	8103cc8 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8103c6c:	4b19      	ldr	r3, [pc, #100]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103c72:	4a18      	ldr	r2, [pc, #96]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c74:	f043 0302 	orr.w	r3, r3, #2
 8103c78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103c7c:	4b15      	ldr	r3, [pc, #84]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103c82:	f003 0302 	and.w	r3, r3, #2
 8103c86:	613b      	str	r3, [r7, #16]
 8103c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8103c8a:	4b12      	ldr	r3, [pc, #72]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103c90:	4a10      	ldr	r2, [pc, #64]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c92:	f043 0304 	orr.w	r3, r3, #4
 8103c96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8103cd4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103ca0:	f003 0304 	and.w	r3, r3, #4
 8103ca4:	60fb      	str	r3, [r7, #12]
 8103ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8103ca8:	23c0      	movs	r3, #192	@ 0xc0
 8103caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103cac:	2302      	movs	r3, #2
 8103cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103cb0:	2300      	movs	r3, #0
 8103cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103cb4:	2300      	movs	r3, #0
 8103cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8103cb8:	2303      	movs	r3, #3
 8103cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103cbc:	f107 031c 	add.w	r3, r7, #28
 8103cc0:	4619      	mov	r1, r3
 8103cc2:	4807      	ldr	r0, [pc, #28]	@ (8103ce0 <HAL_TIM_Encoder_MspInit+0x100>)
 8103cc4:	f002 fed8 	bl	8106a78 <HAL_GPIO_Init>
}
 8103cc8:	bf00      	nop
 8103cca:	3730      	adds	r7, #48	@ 0x30
 8103ccc:	46bd      	mov	sp, r7
 8103cce:	bd80      	pop	{r7, pc}
 8103cd0:	40000800 	.word	0x40000800
 8103cd4:	58024400 	.word	0x58024400
 8103cd8:	58020c00 	.word	0x58020c00
 8103cdc:	40010400 	.word	0x40010400
 8103ce0:	58020800 	.word	0x58020800

08103ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8103ce4:	b580      	push	{r7, lr}
 8103ce6:	b08a      	sub	sp, #40	@ 0x28
 8103ce8:	af00      	add	r7, sp, #0
 8103cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103cec:	f107 0314 	add.w	r3, r7, #20
 8103cf0:	2200      	movs	r2, #0
 8103cf2:	601a      	str	r2, [r3, #0]
 8103cf4:	605a      	str	r2, [r3, #4]
 8103cf6:	609a      	str	r2, [r3, #8]
 8103cf8:	60da      	str	r2, [r3, #12]
 8103cfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	4a25      	ldr	r2, [pc, #148]	@ (8103d98 <HAL_TIM_MspPostInit+0xb4>)
 8103d02:	4293      	cmp	r3, r2
 8103d04:	d120      	bne.n	8103d48 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8103d06:	4b25      	ldr	r3, [pc, #148]	@ (8103d9c <HAL_TIM_MspPostInit+0xb8>)
 8103d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d0c:	4a23      	ldr	r2, [pc, #140]	@ (8103d9c <HAL_TIM_MspPostInit+0xb8>)
 8103d0e:	f043 0310 	orr.w	r3, r3, #16
 8103d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103d16:	4b21      	ldr	r3, [pc, #132]	@ (8103d9c <HAL_TIM_MspPostInit+0xb8>)
 8103d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d1c:	f003 0310 	and.w	r3, r3, #16
 8103d20:	613b      	str	r3, [r7, #16]
 8103d22:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8103d24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103d2a:	2302      	movs	r3, #2
 8103d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103d2e:	2300      	movs	r3, #0
 8103d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103d32:	2300      	movs	r3, #0
 8103d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8103d36:	2301      	movs	r3, #1
 8103d38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8103d3a:	f107 0314 	add.w	r3, r7, #20
 8103d3e:	4619      	mov	r1, r3
 8103d40:	4817      	ldr	r0, [pc, #92]	@ (8103da0 <HAL_TIM_MspPostInit+0xbc>)
 8103d42:	f002 fe99 	bl	8106a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8103d46:	e023      	b.n	8103d90 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	4a15      	ldr	r2, [pc, #84]	@ (8103da4 <HAL_TIM_MspPostInit+0xc0>)
 8103d4e:	4293      	cmp	r3, r2
 8103d50:	d11e      	bne.n	8103d90 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103d52:	4b12      	ldr	r3, [pc, #72]	@ (8103d9c <HAL_TIM_MspPostInit+0xb8>)
 8103d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d58:	4a10      	ldr	r2, [pc, #64]	@ (8103d9c <HAL_TIM_MspPostInit+0xb8>)
 8103d5a:	f043 0301 	orr.w	r3, r3, #1
 8103d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103d62:	4b0e      	ldr	r3, [pc, #56]	@ (8103d9c <HAL_TIM_MspPostInit+0xb8>)
 8103d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d68:	f003 0301 	and.w	r3, r3, #1
 8103d6c:	60fb      	str	r3, [r7, #12]
 8103d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8103d70:	2340      	movs	r3, #64	@ 0x40
 8103d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103d74:	2302      	movs	r3, #2
 8103d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103d78:	2300      	movs	r3, #0
 8103d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103d7c:	2300      	movs	r3, #0
 8103d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8103d80:	2302      	movs	r3, #2
 8103d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103d84:	f107 0314 	add.w	r3, r7, #20
 8103d88:	4619      	mov	r1, r3
 8103d8a:	4807      	ldr	r0, [pc, #28]	@ (8103da8 <HAL_TIM_MspPostInit+0xc4>)
 8103d8c:	f002 fe74 	bl	8106a78 <HAL_GPIO_Init>
}
 8103d90:	bf00      	nop
 8103d92:	3728      	adds	r7, #40	@ 0x28
 8103d94:	46bd      	mov	sp, r7
 8103d96:	bd80      	pop	{r7, pc}
 8103d98:	40010000 	.word	0x40010000
 8103d9c:	58024400 	.word	0x58024400
 8103da0:	58021000 	.word	0x58021000
 8103da4:	40000400 	.word	0x40000400
 8103da8:	58020000 	.word	0x58020000

08103dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8103dac:	b580      	push	{r7, lr}
 8103dae:	b0be      	sub	sp, #248	@ 0xf8
 8103db0:	af00      	add	r7, sp, #0
 8103db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103db4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103db8:	2200      	movs	r2, #0
 8103dba:	601a      	str	r2, [r3, #0]
 8103dbc:	605a      	str	r2, [r3, #4]
 8103dbe:	609a      	str	r2, [r3, #8]
 8103dc0:	60da      	str	r2, [r3, #12]
 8103dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103dc4:	f107 0320 	add.w	r3, r7, #32
 8103dc8:	22c0      	movs	r2, #192	@ 0xc0
 8103dca:	2100      	movs	r1, #0
 8103dcc:	4618      	mov	r0, r3
 8103dce:	f00c fa47 	bl	8110260 <memset>
  if(huart->Instance==USART2)
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	4a63      	ldr	r2, [pc, #396]	@ (8103f64 <HAL_UART_MspInit+0x1b8>)
 8103dd8:	4293      	cmp	r3, r2
 8103dda:	d172      	bne.n	8103ec2 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8103ddc:	f04f 0202 	mov.w	r2, #2
 8103de0:	f04f 0300 	mov.w	r3, #0
 8103de4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103de8:	2300      	movs	r3, #0
 8103dea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103dee:	f107 0320 	add.w	r3, r7, #32
 8103df2:	4618      	mov	r0, r3
 8103df4:	f004 f898 	bl	8107f28 <HAL_RCCEx_PeriphCLKConfig>
 8103df8:	4603      	mov	r3, r0
 8103dfa:	2b00      	cmp	r3, #0
 8103dfc:	d001      	beq.n	8103e02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8103dfe:	f7ff fd7f 	bl	8103900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8103e02:	4b59      	ldr	r3, [pc, #356]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103e08:	4a57      	ldr	r2, [pc, #348]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103e12:	4b55      	ldr	r3, [pc, #340]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103e1c:	61fb      	str	r3, [r7, #28]
 8103e1e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103e20:	4b51      	ldr	r3, [pc, #324]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e26:	4a50      	ldr	r2, [pc, #320]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e28:	f043 0301 	orr.w	r3, r3, #1
 8103e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e30:	4b4d      	ldr	r3, [pc, #308]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e36:	f003 0301 	and.w	r3, r3, #1
 8103e3a:	61bb      	str	r3, [r7, #24]
 8103e3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e44:	4a48      	ldr	r2, [pc, #288]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e46:	f043 0308 	orr.w	r3, r3, #8
 8103e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e4e:	4b46      	ldr	r3, [pc, #280]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e54:	f003 0308 	and.w	r3, r3, #8
 8103e58:	617b      	str	r3, [r7, #20]
 8103e5a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8103e5c:	2308      	movs	r3, #8
 8103e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103e62:	2302      	movs	r3, #2
 8103e64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103e68:	2300      	movs	r3, #0
 8103e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103e6e:	2300      	movs	r3, #0
 8103e70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8103e74:	2307      	movs	r3, #7
 8103e76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103e7a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103e7e:	4619      	mov	r1, r3
 8103e80:	483a      	ldr	r0, [pc, #232]	@ (8103f6c <HAL_UART_MspInit+0x1c0>)
 8103e82:	f002 fdf9 	bl	8106a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8103e86:	2320      	movs	r3, #32
 8103e88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103e8c:	2302      	movs	r3, #2
 8103e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103e92:	2300      	movs	r3, #0
 8103e94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103e98:	2300      	movs	r3, #0
 8103e9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8103e9e:	2307      	movs	r3, #7
 8103ea0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103ea4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103ea8:	4619      	mov	r1, r3
 8103eaa:	4831      	ldr	r0, [pc, #196]	@ (8103f70 <HAL_UART_MspInit+0x1c4>)
 8103eac:	f002 fde4 	bl	8106a78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8103eb0:	2200      	movs	r2, #0
 8103eb2:	2100      	movs	r1, #0
 8103eb4:	2026      	movs	r0, #38	@ 0x26
 8103eb6:	f002 f832 	bl	8105f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8103eba:	2026      	movs	r0, #38	@ 0x26
 8103ebc:	f002 f849 	bl	8105f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8103ec0:	e04b      	b.n	8103f5a <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8103f74 <HAL_UART_MspInit+0x1c8>)
 8103ec8:	4293      	cmp	r3, r2
 8103eca:	d146      	bne.n	8103f5a <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8103ecc:	f04f 0202 	mov.w	r2, #2
 8103ed0:	f04f 0300 	mov.w	r3, #0
 8103ed4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103ed8:	2300      	movs	r3, #0
 8103eda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103ede:	f107 0320 	add.w	r3, r7, #32
 8103ee2:	4618      	mov	r0, r3
 8103ee4:	f004 f820 	bl	8107f28 <HAL_RCCEx_PeriphCLKConfig>
 8103ee8:	4603      	mov	r3, r0
 8103eea:	2b00      	cmp	r3, #0
 8103eec:	d001      	beq.n	8103ef2 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8103eee:	f7ff fd07 	bl	8103900 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8103ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103efa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8103efe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103f02:	4b19      	ldr	r3, [pc, #100]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103f0c:	613b      	str	r3, [r7, #16]
 8103f0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103f10:	4b15      	ldr	r3, [pc, #84]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103f16:	4a14      	ldr	r2, [pc, #80]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103f18:	f043 0308 	orr.w	r3, r3, #8
 8103f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103f20:	4b11      	ldr	r3, [pc, #68]	@ (8103f68 <HAL_UART_MspInit+0x1bc>)
 8103f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103f26:	f003 0308 	and.w	r3, r3, #8
 8103f2a:	60fb      	str	r3, [r7, #12]
 8103f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8103f2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8103f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103f36:	2302      	movs	r3, #2
 8103f38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103f3c:	2300      	movs	r3, #0
 8103f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103f42:	2300      	movs	r3, #0
 8103f44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103f48:	2307      	movs	r3, #7
 8103f4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103f4e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8103f52:	4619      	mov	r1, r3
 8103f54:	4806      	ldr	r0, [pc, #24]	@ (8103f70 <HAL_UART_MspInit+0x1c4>)
 8103f56:	f002 fd8f 	bl	8106a78 <HAL_GPIO_Init>
}
 8103f5a:	bf00      	nop
 8103f5c:	37f8      	adds	r7, #248	@ 0xf8
 8103f5e:	46bd      	mov	sp, r7
 8103f60:	bd80      	pop	{r7, pc}
 8103f62:	bf00      	nop
 8103f64:	40004400 	.word	0x40004400
 8103f68:	58024400 	.word	0x58024400
 8103f6c:	58020000 	.word	0x58020000
 8103f70:	58020c00 	.word	0x58020c00
 8103f74:	40004800 	.word	0x40004800

08103f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8103f78:	b480      	push	{r7}
 8103f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8103f7c:	bf00      	nop
 8103f7e:	e7fd      	b.n	8103f7c <NMI_Handler+0x4>

08103f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8103f80:	b480      	push	{r7}
 8103f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8103f84:	bf00      	nop
 8103f86:	e7fd      	b.n	8103f84 <HardFault_Handler+0x4>

08103f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8103f88:	b480      	push	{r7}
 8103f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103f8c:	bf00      	nop
 8103f8e:	e7fd      	b.n	8103f8c <MemManage_Handler+0x4>

08103f90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8103f90:	b480      	push	{r7}
 8103f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8103f94:	bf00      	nop
 8103f96:	e7fd      	b.n	8103f94 <BusFault_Handler+0x4>

08103f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8103f98:	b480      	push	{r7}
 8103f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103f9c:	bf00      	nop
 8103f9e:	e7fd      	b.n	8103f9c <UsageFault_Handler+0x4>

08103fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8103fa0:	b480      	push	{r7}
 8103fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8103fa4:	bf00      	nop
 8103fa6:	46bd      	mov	sp, r7
 8103fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fac:	4770      	bx	lr

08103fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8103fae:	b480      	push	{r7}
 8103fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8103fb2:	bf00      	nop
 8103fb4:	46bd      	mov	sp, r7
 8103fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fba:	4770      	bx	lr

08103fbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8103fbc:	b480      	push	{r7}
 8103fbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8103fc0:	bf00      	nop
 8103fc2:	46bd      	mov	sp, r7
 8103fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc8:	4770      	bx	lr

08103fca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8103fca:	b580      	push	{r7, lr}
 8103fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8103fce:	f000 f993 	bl	81042f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8103fd2:	bf00      	nop
 8103fd4:	bd80      	pop	{r7, pc}
	...

08103fd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8103fd8:	b580      	push	{r7, lr}
 8103fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8103fdc:	4802      	ldr	r0, [pc, #8]	@ (8103fe8 <TIM2_IRQHandler+0x10>)
 8103fde:	f006 fff7 	bl	810afd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8103fe2:	bf00      	nop
 8103fe4:	bd80      	pop	{r7, pc}
 8103fe6:	bf00      	nop
 8103fe8:	10000394 	.word	0x10000394

08103fec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8103fec:	b580      	push	{r7, lr}
 8103fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8103ff0:	4802      	ldr	r0, [pc, #8]	@ (8103ffc <USART2_IRQHandler+0x10>)
 8103ff2:	f008 fa83 	bl	810c4fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8103ff6:	bf00      	nop
 8103ff8:	bd80      	pop	{r7, pc}
 8103ffa:	bf00      	nop
 8103ffc:	10000510 	.word	0x10000510

08104000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8104000:	b580      	push	{r7, lr}
 8104002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8104004:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8104008:	f002 feff 	bl	8106e0a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 810400c:	bf00      	nop
 810400e:	bd80      	pop	{r7, pc}

08104010 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8104010:	b580      	push	{r7, lr}
 8104012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8104014:	4802      	ldr	r0, [pc, #8]	@ (8104020 <TIM6_DAC_IRQHandler+0x10>)
 8104016:	f006 ffdb 	bl	810afd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 810401a:	bf00      	nop
 810401c:	bd80      	pop	{r7, pc}
 810401e:	bf00      	nop
 8104020:	10000478 	.word	0x10000478

08104024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8104024:	b480      	push	{r7}
 8104026:	af00      	add	r7, sp, #0
  return 1;
 8104028:	2301      	movs	r3, #1
}
 810402a:	4618      	mov	r0, r3
 810402c:	46bd      	mov	sp, r7
 810402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104032:	4770      	bx	lr

08104034 <_kill>:

int _kill(int pid, int sig)
{
 8104034:	b580      	push	{r7, lr}
 8104036:	b082      	sub	sp, #8
 8104038:	af00      	add	r7, sp, #0
 810403a:	6078      	str	r0, [r7, #4]
 810403c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810403e:	f00c f961 	bl	8110304 <__errno>
 8104042:	4603      	mov	r3, r0
 8104044:	2216      	movs	r2, #22
 8104046:	601a      	str	r2, [r3, #0]
  return -1;
 8104048:	f04f 33ff 	mov.w	r3, #4294967295
}
 810404c:	4618      	mov	r0, r3
 810404e:	3708      	adds	r7, #8
 8104050:	46bd      	mov	sp, r7
 8104052:	bd80      	pop	{r7, pc}

08104054 <_exit>:

void _exit (int status)
{
 8104054:	b580      	push	{r7, lr}
 8104056:	b082      	sub	sp, #8
 8104058:	af00      	add	r7, sp, #0
 810405a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 810405c:	f04f 31ff 	mov.w	r1, #4294967295
 8104060:	6878      	ldr	r0, [r7, #4]
 8104062:	f7ff ffe7 	bl	8104034 <_kill>
  while (1) {}    /* Make sure we hang here */
 8104066:	bf00      	nop
 8104068:	e7fd      	b.n	8104066 <_exit+0x12>

0810406a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810406a:	b580      	push	{r7, lr}
 810406c:	b086      	sub	sp, #24
 810406e:	af00      	add	r7, sp, #0
 8104070:	60f8      	str	r0, [r7, #12]
 8104072:	60b9      	str	r1, [r7, #8]
 8104074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 8104076:	2301      	movs	r3, #1
 8104078:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810407a:	2300      	movs	r3, #0
 810407c:	617b      	str	r3, [r7, #20]
 810407e:	e00a      	b.n	8104096 <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8104080:	f7ff fbd8 	bl	8103834 <__io_getchar>
 8104084:	4601      	mov	r1, r0
 8104086:	68bb      	ldr	r3, [r7, #8]
 8104088:	1c5a      	adds	r2, r3, #1
 810408a:	60ba      	str	r2, [r7, #8]
 810408c:	b2ca      	uxtb	r2, r1
 810408e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104090:	697b      	ldr	r3, [r7, #20]
 8104092:	3301      	adds	r3, #1
 8104094:	617b      	str	r3, [r7, #20]
 8104096:	697a      	ldr	r2, [r7, #20]
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	429a      	cmp	r2, r3
 810409c:	dbf0      	blt.n	8104080 <_read+0x16>
  }

  return len;
 810409e:	687b      	ldr	r3, [r7, #4]
}
 81040a0:	4618      	mov	r0, r3
 81040a2:	3718      	adds	r7, #24
 81040a4:	46bd      	mov	sp, r7
 81040a6:	bd80      	pop	{r7, pc}

081040a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 81040a8:	b480      	push	{r7}
 81040aa:	b083      	sub	sp, #12
 81040ac:	af00      	add	r7, sp, #0
 81040ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81040b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81040b4:	4618      	mov	r0, r3
 81040b6:	370c      	adds	r7, #12
 81040b8:	46bd      	mov	sp, r7
 81040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040be:	4770      	bx	lr

081040c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81040c0:	b480      	push	{r7}
 81040c2:	b083      	sub	sp, #12
 81040c4:	af00      	add	r7, sp, #0
 81040c6:	6078      	str	r0, [r7, #4]
 81040c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81040ca:	683b      	ldr	r3, [r7, #0]
 81040cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81040d0:	605a      	str	r2, [r3, #4]
  return 0;
 81040d2:	2300      	movs	r3, #0
}
 81040d4:	4618      	mov	r0, r3
 81040d6:	370c      	adds	r7, #12
 81040d8:	46bd      	mov	sp, r7
 81040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040de:	4770      	bx	lr

081040e0 <_isatty>:

int _isatty(int file)
{
 81040e0:	b480      	push	{r7}
 81040e2:	b083      	sub	sp, #12
 81040e4:	af00      	add	r7, sp, #0
 81040e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81040e8:	2301      	movs	r3, #1
}
 81040ea:	4618      	mov	r0, r3
 81040ec:	370c      	adds	r7, #12
 81040ee:	46bd      	mov	sp, r7
 81040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040f4:	4770      	bx	lr

081040f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81040f6:	b480      	push	{r7}
 81040f8:	b085      	sub	sp, #20
 81040fa:	af00      	add	r7, sp, #0
 81040fc:	60f8      	str	r0, [r7, #12]
 81040fe:	60b9      	str	r1, [r7, #8]
 8104100:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8104102:	2300      	movs	r3, #0
}
 8104104:	4618      	mov	r0, r3
 8104106:	3714      	adds	r7, #20
 8104108:	46bd      	mov	sp, r7
 810410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810410e:	4770      	bx	lr

08104110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8104110:	b580      	push	{r7, lr}
 8104112:	b086      	sub	sp, #24
 8104114:	af00      	add	r7, sp, #0
 8104116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8104118:	4a14      	ldr	r2, [pc, #80]	@ (810416c <_sbrk+0x5c>)
 810411a:	4b15      	ldr	r3, [pc, #84]	@ (8104170 <_sbrk+0x60>)
 810411c:	1ad3      	subs	r3, r2, r3
 810411e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8104120:	697b      	ldr	r3, [r7, #20]
 8104122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8104124:	4b13      	ldr	r3, [pc, #76]	@ (8104174 <_sbrk+0x64>)
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	2b00      	cmp	r3, #0
 810412a:	d102      	bne.n	8104132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810412c:	4b11      	ldr	r3, [pc, #68]	@ (8104174 <_sbrk+0x64>)
 810412e:	4a12      	ldr	r2, [pc, #72]	@ (8104178 <_sbrk+0x68>)
 8104130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8104132:	4b10      	ldr	r3, [pc, #64]	@ (8104174 <_sbrk+0x64>)
 8104134:	681a      	ldr	r2, [r3, #0]
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	4413      	add	r3, r2
 810413a:	693a      	ldr	r2, [r7, #16]
 810413c:	429a      	cmp	r2, r3
 810413e:	d207      	bcs.n	8104150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8104140:	f00c f8e0 	bl	8110304 <__errno>
 8104144:	4603      	mov	r3, r0
 8104146:	220c      	movs	r2, #12
 8104148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810414a:	f04f 33ff 	mov.w	r3, #4294967295
 810414e:	e009      	b.n	8104164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8104150:	4b08      	ldr	r3, [pc, #32]	@ (8104174 <_sbrk+0x64>)
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8104156:	4b07      	ldr	r3, [pc, #28]	@ (8104174 <_sbrk+0x64>)
 8104158:	681a      	ldr	r2, [r3, #0]
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	4413      	add	r3, r2
 810415e:	4a05      	ldr	r2, [pc, #20]	@ (8104174 <_sbrk+0x64>)
 8104160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8104162:	68fb      	ldr	r3, [r7, #12]
}
 8104164:	4618      	mov	r0, r3
 8104166:	3718      	adds	r7, #24
 8104168:	46bd      	mov	sp, r7
 810416a:	bd80      	pop	{r7, pc}
 810416c:	10048000 	.word	0x10048000
 8104170:	00000400 	.word	0x00000400
 8104174:	10008b10 	.word	0x10008b10
 8104178:	10008c68 	.word	0x10008c68

0810417c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 810417c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81041b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104180:	f7fc ffb8 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104184:	480c      	ldr	r0, [pc, #48]	@ (81041b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104186:	490d      	ldr	r1, [pc, #52]	@ (81041bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104188:	4a0d      	ldr	r2, [pc, #52]	@ (81041c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810418a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810418c:	e002      	b.n	8104194 <LoopCopyDataInit>

0810418e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810418e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104192:	3304      	adds	r3, #4

08104194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8104196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104198:	d3f9      	bcc.n	810418e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810419a:	4a0a      	ldr	r2, [pc, #40]	@ (81041c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810419c:	4c0a      	ldr	r4, [pc, #40]	@ (81041c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 810419e:	2300      	movs	r3, #0
  b LoopFillZerobss
 81041a0:	e001      	b.n	81041a6 <LoopFillZerobss>

081041a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81041a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81041a4:	3204      	adds	r2, #4

081041a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81041a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81041a8:	d3fb      	bcc.n	81041a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81041aa:	f00c f8b1 	bl	8110310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81041ae:	f7fd ff3b 	bl	8102028 <main>
  bx  lr
 81041b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81041b4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81041b8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81041bc:	1000026c 	.word	0x1000026c
  ldr r2, =_sidata
 81041c0:	08113e44 	.word	0x08113e44
  ldr r2, =_sbss
 81041c4:	10000270 	.word	0x10000270
  ldr r4, =_ebss
 81041c8:	10008c64 	.word	0x10008c64

081041cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81041cc:	e7fe      	b.n	81041cc <ADC3_IRQHandler>
	...

081041d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81041d0:	b580      	push	{r7, lr}
 81041d2:	b082      	sub	sp, #8
 81041d4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81041d6:	4b28      	ldr	r3, [pc, #160]	@ (8104278 <HAL_Init+0xa8>)
 81041d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81041dc:	4a26      	ldr	r2, [pc, #152]	@ (8104278 <HAL_Init+0xa8>)
 81041de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81041e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81041e6:	4b24      	ldr	r3, [pc, #144]	@ (8104278 <HAL_Init+0xa8>)
 81041e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81041ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81041f0:	603b      	str	r3, [r7, #0]
 81041f2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81041f4:	4b21      	ldr	r3, [pc, #132]	@ (810427c <HAL_Init+0xac>)
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81041fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104200:	4a1e      	ldr	r2, [pc, #120]	@ (810427c <HAL_Init+0xac>)
 8104202:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8104206:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8104208:	4b1c      	ldr	r3, [pc, #112]	@ (810427c <HAL_Init+0xac>)
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	4a1b      	ldr	r2, [pc, #108]	@ (810427c <HAL_Init+0xac>)
 810420e:	f043 0301 	orr.w	r3, r3, #1
 8104212:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8104214:	2003      	movs	r0, #3
 8104216:	f001 fe77 	bl	8105f08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810421a:	f003 fcad 	bl	8107b78 <HAL_RCC_GetSysClockFreq>
 810421e:	4602      	mov	r2, r0
 8104220:	4b15      	ldr	r3, [pc, #84]	@ (8104278 <HAL_Init+0xa8>)
 8104222:	699b      	ldr	r3, [r3, #24]
 8104224:	0a1b      	lsrs	r3, r3, #8
 8104226:	f003 030f 	and.w	r3, r3, #15
 810422a:	4915      	ldr	r1, [pc, #84]	@ (8104280 <HAL_Init+0xb0>)
 810422c:	5ccb      	ldrb	r3, [r1, r3]
 810422e:	f003 031f 	and.w	r3, r3, #31
 8104232:	fa22 f303 	lsr.w	r3, r2, r3
 8104236:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104238:	4b0f      	ldr	r3, [pc, #60]	@ (8104278 <HAL_Init+0xa8>)
 810423a:	699b      	ldr	r3, [r3, #24]
 810423c:	f003 030f 	and.w	r3, r3, #15
 8104240:	4a0f      	ldr	r2, [pc, #60]	@ (8104280 <HAL_Init+0xb0>)
 8104242:	5cd3      	ldrb	r3, [r2, r3]
 8104244:	f003 031f 	and.w	r3, r3, #31
 8104248:	687a      	ldr	r2, [r7, #4]
 810424a:	fa22 f303 	lsr.w	r3, r2, r3
 810424e:	4a0d      	ldr	r2, [pc, #52]	@ (8104284 <HAL_Init+0xb4>)
 8104250:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104252:	4b0c      	ldr	r3, [pc, #48]	@ (8104284 <HAL_Init+0xb4>)
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	4a0c      	ldr	r2, [pc, #48]	@ (8104288 <HAL_Init+0xb8>)
 8104258:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810425a:	2000      	movs	r0, #0
 810425c:	f000 f816 	bl	810428c <HAL_InitTick>
 8104260:	4603      	mov	r3, r0
 8104262:	2b00      	cmp	r3, #0
 8104264:	d001      	beq.n	810426a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8104266:	2301      	movs	r3, #1
 8104268:	e002      	b.n	8104270 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810426a:	f7ff fb4f 	bl	810390c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810426e:	2300      	movs	r3, #0
}
 8104270:	4618      	mov	r0, r3
 8104272:	3708      	adds	r7, #8
 8104274:	46bd      	mov	sp, r7
 8104276:	bd80      	pop	{r7, pc}
 8104278:	58024400 	.word	0x58024400
 810427c:	40024400 	.word	0x40024400
 8104280:	08113978 	.word	0x08113978
 8104284:	10000004 	.word	0x10000004
 8104288:	10000000 	.word	0x10000000

0810428c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810428c:	b580      	push	{r7, lr}
 810428e:	b082      	sub	sp, #8
 8104290:	af00      	add	r7, sp, #0
 8104292:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104294:	4b15      	ldr	r3, [pc, #84]	@ (81042ec <HAL_InitTick+0x60>)
 8104296:	781b      	ldrb	r3, [r3, #0]
 8104298:	2b00      	cmp	r3, #0
 810429a:	d101      	bne.n	81042a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810429c:	2301      	movs	r3, #1
 810429e:	e021      	b.n	81042e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81042a0:	4b13      	ldr	r3, [pc, #76]	@ (81042f0 <HAL_InitTick+0x64>)
 81042a2:	681a      	ldr	r2, [r3, #0]
 81042a4:	4b11      	ldr	r3, [pc, #68]	@ (81042ec <HAL_InitTick+0x60>)
 81042a6:	781b      	ldrb	r3, [r3, #0]
 81042a8:	4619      	mov	r1, r3
 81042aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81042ae:	fbb3 f3f1 	udiv	r3, r3, r1
 81042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 81042b6:	4618      	mov	r0, r3
 81042b8:	f001 fe59 	bl	8105f6e <HAL_SYSTICK_Config>
 81042bc:	4603      	mov	r3, r0
 81042be:	2b00      	cmp	r3, #0
 81042c0:	d001      	beq.n	81042c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81042c2:	2301      	movs	r3, #1
 81042c4:	e00e      	b.n	81042e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	2b0f      	cmp	r3, #15
 81042ca:	d80a      	bhi.n	81042e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81042cc:	2200      	movs	r2, #0
 81042ce:	6879      	ldr	r1, [r7, #4]
 81042d0:	f04f 30ff 	mov.w	r0, #4294967295
 81042d4:	f001 fe23 	bl	8105f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81042d8:	4a06      	ldr	r2, [pc, #24]	@ (81042f4 <HAL_InitTick+0x68>)
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81042de:	2300      	movs	r3, #0
 81042e0:	e000      	b.n	81042e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81042e2:	2301      	movs	r3, #1
}
 81042e4:	4618      	mov	r0, r3
 81042e6:	3708      	adds	r7, #8
 81042e8:	46bd      	mov	sp, r7
 81042ea:	bd80      	pop	{r7, pc}
 81042ec:	100000a0 	.word	0x100000a0
 81042f0:	10000000 	.word	0x10000000
 81042f4:	1000009c 	.word	0x1000009c

081042f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81042f8:	b480      	push	{r7}
 81042fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81042fc:	4b06      	ldr	r3, [pc, #24]	@ (8104318 <HAL_IncTick+0x20>)
 81042fe:	781b      	ldrb	r3, [r3, #0]
 8104300:	461a      	mov	r2, r3
 8104302:	4b06      	ldr	r3, [pc, #24]	@ (810431c <HAL_IncTick+0x24>)
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	4413      	add	r3, r2
 8104308:	4a04      	ldr	r2, [pc, #16]	@ (810431c <HAL_IncTick+0x24>)
 810430a:	6013      	str	r3, [r2, #0]
}
 810430c:	bf00      	nop
 810430e:	46bd      	mov	sp, r7
 8104310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104314:	4770      	bx	lr
 8104316:	bf00      	nop
 8104318:	100000a0 	.word	0x100000a0
 810431c:	10008b14 	.word	0x10008b14

08104320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8104320:	b480      	push	{r7}
 8104322:	af00      	add	r7, sp, #0
  return uwTick;
 8104324:	4b03      	ldr	r3, [pc, #12]	@ (8104334 <HAL_GetTick+0x14>)
 8104326:	681b      	ldr	r3, [r3, #0]
}
 8104328:	4618      	mov	r0, r3
 810432a:	46bd      	mov	sp, r7
 810432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104330:	4770      	bx	lr
 8104332:	bf00      	nop
 8104334:	10008b14 	.word	0x10008b14

08104338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8104338:	b580      	push	{r7, lr}
 810433a:	b084      	sub	sp, #16
 810433c:	af00      	add	r7, sp, #0
 810433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8104340:	f7ff ffee 	bl	8104320 <HAL_GetTick>
 8104344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104350:	d005      	beq.n	810435e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8104352:	4b0a      	ldr	r3, [pc, #40]	@ (810437c <HAL_Delay+0x44>)
 8104354:	781b      	ldrb	r3, [r3, #0]
 8104356:	461a      	mov	r2, r3
 8104358:	68fb      	ldr	r3, [r7, #12]
 810435a:	4413      	add	r3, r2
 810435c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810435e:	bf00      	nop
 8104360:	f7ff ffde 	bl	8104320 <HAL_GetTick>
 8104364:	4602      	mov	r2, r0
 8104366:	68bb      	ldr	r3, [r7, #8]
 8104368:	1ad3      	subs	r3, r2, r3
 810436a:	68fa      	ldr	r2, [r7, #12]
 810436c:	429a      	cmp	r2, r3
 810436e:	d8f7      	bhi.n	8104360 <HAL_Delay+0x28>
  {
  }
}
 8104370:	bf00      	nop
 8104372:	bf00      	nop
 8104374:	3710      	adds	r7, #16
 8104376:	46bd      	mov	sp, r7
 8104378:	bd80      	pop	{r7, pc}
 810437a:	bf00      	nop
 810437c:	100000a0 	.word	0x100000a0

08104380 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8104380:	b480      	push	{r7}
 8104382:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8104384:	4b03      	ldr	r3, [pc, #12]	@ (8104394 <HAL_GetREVID+0x14>)
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	0c1b      	lsrs	r3, r3, #16
}
 810438a:	4618      	mov	r0, r3
 810438c:	46bd      	mov	sp, r7
 810438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104392:	4770      	bx	lr
 8104394:	5c001000 	.word	0x5c001000

08104398 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8104398:	b480      	push	{r7}
 810439a:	b083      	sub	sp, #12
 810439c:	af00      	add	r7, sp, #0
 810439e:	6078      	str	r0, [r7, #4]
 81043a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	689b      	ldr	r3, [r3, #8]
 81043a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 81043aa:	683b      	ldr	r3, [r7, #0]
 81043ac:	431a      	orrs	r2, r3
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	609a      	str	r2, [r3, #8]
}
 81043b2:	bf00      	nop
 81043b4:	370c      	adds	r7, #12
 81043b6:	46bd      	mov	sp, r7
 81043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043bc:	4770      	bx	lr

081043be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81043be:	b480      	push	{r7}
 81043c0:	b083      	sub	sp, #12
 81043c2:	af00      	add	r7, sp, #0
 81043c4:	6078      	str	r0, [r7, #4]
 81043c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	689b      	ldr	r3, [r3, #8]
 81043cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 81043d0:	683b      	ldr	r3, [r7, #0]
 81043d2:	431a      	orrs	r2, r3
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	609a      	str	r2, [r3, #8]
}
 81043d8:	bf00      	nop
 81043da:	370c      	adds	r7, #12
 81043dc:	46bd      	mov	sp, r7
 81043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043e2:	4770      	bx	lr

081043e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81043e4:	b480      	push	{r7}
 81043e6:	b083      	sub	sp, #12
 81043e8:	af00      	add	r7, sp, #0
 81043ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	689b      	ldr	r3, [r3, #8]
 81043f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 81043f4:	4618      	mov	r0, r3
 81043f6:	370c      	adds	r7, #12
 81043f8:	46bd      	mov	sp, r7
 81043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043fe:	4770      	bx	lr

08104400 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8104400:	b480      	push	{r7}
 8104402:	b087      	sub	sp, #28
 8104404:	af00      	add	r7, sp, #0
 8104406:	60f8      	str	r0, [r7, #12]
 8104408:	60b9      	str	r1, [r7, #8]
 810440a:	607a      	str	r2, [r7, #4]
 810440c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810440e:	68fb      	ldr	r3, [r7, #12]
 8104410:	3360      	adds	r3, #96	@ 0x60
 8104412:	461a      	mov	r2, r3
 8104414:	68bb      	ldr	r3, [r7, #8]
 8104416:	009b      	lsls	r3, r3, #2
 8104418:	4413      	add	r3, r2
 810441a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 810441c:	697b      	ldr	r3, [r7, #20]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 810442a:	683b      	ldr	r3, [r7, #0]
 810442c:	430b      	orrs	r3, r1
 810442e:	431a      	orrs	r2, r3
 8104430:	697b      	ldr	r3, [r7, #20]
 8104432:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8104434:	bf00      	nop
 8104436:	371c      	adds	r7, #28
 8104438:	46bd      	mov	sp, r7
 810443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810443e:	4770      	bx	lr

08104440 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8104440:	b480      	push	{r7}
 8104442:	b085      	sub	sp, #20
 8104444:	af00      	add	r7, sp, #0
 8104446:	60f8      	str	r0, [r7, #12]
 8104448:	60b9      	str	r1, [r7, #8]
 810444a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 810444c:	68fb      	ldr	r3, [r7, #12]
 810444e:	691b      	ldr	r3, [r3, #16]
 8104450:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8104454:	68bb      	ldr	r3, [r7, #8]
 8104456:	f003 031f 	and.w	r3, r3, #31
 810445a:	6879      	ldr	r1, [r7, #4]
 810445c:	fa01 f303 	lsl.w	r3, r1, r3
 8104460:	431a      	orrs	r2, r3
 8104462:	68fb      	ldr	r3, [r7, #12]
 8104464:	611a      	str	r2, [r3, #16]
}
 8104466:	bf00      	nop
 8104468:	3714      	adds	r7, #20
 810446a:	46bd      	mov	sp, r7
 810446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104470:	4770      	bx	lr

08104472 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8104472:	b480      	push	{r7}
 8104474:	b087      	sub	sp, #28
 8104476:	af00      	add	r7, sp, #0
 8104478:	60f8      	str	r0, [r7, #12]
 810447a:	60b9      	str	r1, [r7, #8]
 810447c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810447e:	68fb      	ldr	r3, [r7, #12]
 8104480:	3360      	adds	r3, #96	@ 0x60
 8104482:	461a      	mov	r2, r3
 8104484:	68bb      	ldr	r3, [r7, #8]
 8104486:	009b      	lsls	r3, r3, #2
 8104488:	4413      	add	r3, r2
 810448a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 810448c:	697b      	ldr	r3, [r7, #20]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	431a      	orrs	r2, r3
 8104498:	697b      	ldr	r3, [r7, #20]
 810449a:	601a      	str	r2, [r3, #0]
  }
}
 810449c:	bf00      	nop
 810449e:	371c      	adds	r7, #28
 81044a0:	46bd      	mov	sp, r7
 81044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044a6:	4770      	bx	lr

081044a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81044a8:	b480      	push	{r7}
 81044aa:	b083      	sub	sp, #12
 81044ac:	af00      	add	r7, sp, #0
 81044ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	68db      	ldr	r3, [r3, #12]
 81044b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 81044b8:	2b00      	cmp	r3, #0
 81044ba:	d101      	bne.n	81044c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81044bc:	2301      	movs	r3, #1
 81044be:	e000      	b.n	81044c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81044c0:	2300      	movs	r3, #0
}
 81044c2:	4618      	mov	r0, r3
 81044c4:	370c      	adds	r7, #12
 81044c6:	46bd      	mov	sp, r7
 81044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044cc:	4770      	bx	lr

081044ce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81044ce:	b480      	push	{r7}
 81044d0:	b087      	sub	sp, #28
 81044d2:	af00      	add	r7, sp, #0
 81044d4:	60f8      	str	r0, [r7, #12]
 81044d6:	60b9      	str	r1, [r7, #8]
 81044d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81044da:	68fb      	ldr	r3, [r7, #12]
 81044dc:	3330      	adds	r3, #48	@ 0x30
 81044de:	461a      	mov	r2, r3
 81044e0:	68bb      	ldr	r3, [r7, #8]
 81044e2:	0a1b      	lsrs	r3, r3, #8
 81044e4:	009b      	lsls	r3, r3, #2
 81044e6:	f003 030c 	and.w	r3, r3, #12
 81044ea:	4413      	add	r3, r2
 81044ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81044ee:	697b      	ldr	r3, [r7, #20]
 81044f0:	681a      	ldr	r2, [r3, #0]
 81044f2:	68bb      	ldr	r3, [r7, #8]
 81044f4:	f003 031f 	and.w	r3, r3, #31
 81044f8:	211f      	movs	r1, #31
 81044fa:	fa01 f303 	lsl.w	r3, r1, r3
 81044fe:	43db      	mvns	r3, r3
 8104500:	401a      	ands	r2, r3
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	0e9b      	lsrs	r3, r3, #26
 8104506:	f003 011f 	and.w	r1, r3, #31
 810450a:	68bb      	ldr	r3, [r7, #8]
 810450c:	f003 031f 	and.w	r3, r3, #31
 8104510:	fa01 f303 	lsl.w	r3, r1, r3
 8104514:	431a      	orrs	r2, r3
 8104516:	697b      	ldr	r3, [r7, #20]
 8104518:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810451a:	bf00      	nop
 810451c:	371c      	adds	r7, #28
 810451e:	46bd      	mov	sp, r7
 8104520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104524:	4770      	bx	lr

08104526 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8104526:	b480      	push	{r7}
 8104528:	b087      	sub	sp, #28
 810452a:	af00      	add	r7, sp, #0
 810452c:	60f8      	str	r0, [r7, #12]
 810452e:	60b9      	str	r1, [r7, #8]
 8104530:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8104532:	68fb      	ldr	r3, [r7, #12]
 8104534:	3314      	adds	r3, #20
 8104536:	461a      	mov	r2, r3
 8104538:	68bb      	ldr	r3, [r7, #8]
 810453a:	0e5b      	lsrs	r3, r3, #25
 810453c:	009b      	lsls	r3, r3, #2
 810453e:	f003 0304 	and.w	r3, r3, #4
 8104542:	4413      	add	r3, r2
 8104544:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8104546:	697b      	ldr	r3, [r7, #20]
 8104548:	681a      	ldr	r2, [r3, #0]
 810454a:	68bb      	ldr	r3, [r7, #8]
 810454c:	0d1b      	lsrs	r3, r3, #20
 810454e:	f003 031f 	and.w	r3, r3, #31
 8104552:	2107      	movs	r1, #7
 8104554:	fa01 f303 	lsl.w	r3, r1, r3
 8104558:	43db      	mvns	r3, r3
 810455a:	401a      	ands	r2, r3
 810455c:	68bb      	ldr	r3, [r7, #8]
 810455e:	0d1b      	lsrs	r3, r3, #20
 8104560:	f003 031f 	and.w	r3, r3, #31
 8104564:	6879      	ldr	r1, [r7, #4]
 8104566:	fa01 f303 	lsl.w	r3, r1, r3
 810456a:	431a      	orrs	r2, r3
 810456c:	697b      	ldr	r3, [r7, #20]
 810456e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8104570:	bf00      	nop
 8104572:	371c      	adds	r7, #28
 8104574:	46bd      	mov	sp, r7
 8104576:	f85d 7b04 	ldr.w	r7, [sp], #4
 810457a:	4770      	bx	lr

0810457c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 810457c:	b480      	push	{r7}
 810457e:	b085      	sub	sp, #20
 8104580:	af00      	add	r7, sp, #0
 8104582:	60f8      	str	r0, [r7, #12]
 8104584:	60b9      	str	r1, [r7, #8]
 8104586:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8104588:	68fb      	ldr	r3, [r7, #12]
 810458a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 810458e:	68bb      	ldr	r3, [r7, #8]
 8104590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104594:	43db      	mvns	r3, r3
 8104596:	401a      	ands	r2, r3
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	f003 0318 	and.w	r3, r3, #24
 810459e:	4908      	ldr	r1, [pc, #32]	@ (81045c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 81045a0:	40d9      	lsrs	r1, r3
 81045a2:	68bb      	ldr	r3, [r7, #8]
 81045a4:	400b      	ands	r3, r1
 81045a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81045aa:	431a      	orrs	r2, r3
 81045ac:	68fb      	ldr	r3, [r7, #12]
 81045ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81045b2:	bf00      	nop
 81045b4:	3714      	adds	r7, #20
 81045b6:	46bd      	mov	sp, r7
 81045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045bc:	4770      	bx	lr
 81045be:	bf00      	nop
 81045c0:	000fffff 	.word	0x000fffff

081045c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81045c4:	b480      	push	{r7}
 81045c6:	b083      	sub	sp, #12
 81045c8:	af00      	add	r7, sp, #0
 81045ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	689b      	ldr	r3, [r3, #8]
 81045d0:	f003 031f 	and.w	r3, r3, #31
}
 81045d4:	4618      	mov	r0, r3
 81045d6:	370c      	adds	r7, #12
 81045d8:	46bd      	mov	sp, r7
 81045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045de:	4770      	bx	lr

081045e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81045e0:	b480      	push	{r7}
 81045e2:	b083      	sub	sp, #12
 81045e4:	af00      	add	r7, sp, #0
 81045e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	689b      	ldr	r3, [r3, #8]
 81045ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 81045f0:	4618      	mov	r0, r3
 81045f2:	370c      	adds	r7, #12
 81045f4:	46bd      	mov	sp, r7
 81045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045fa:	4770      	bx	lr

081045fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81045fc:	b480      	push	{r7}
 81045fe:	b083      	sub	sp, #12
 8104600:	af00      	add	r7, sp, #0
 8104602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	689b      	ldr	r3, [r3, #8]
 8104608:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 810460c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104610:	687a      	ldr	r2, [r7, #4]
 8104612:	6093      	str	r3, [r2, #8]
}
 8104614:	bf00      	nop
 8104616:	370c      	adds	r7, #12
 8104618:	46bd      	mov	sp, r7
 810461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810461e:	4770      	bx	lr

08104620 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8104620:	b480      	push	{r7}
 8104622:	b083      	sub	sp, #12
 8104624:	af00      	add	r7, sp, #0
 8104626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8104628:	687b      	ldr	r3, [r7, #4]
 810462a:	689b      	ldr	r3, [r3, #8]
 810462c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104634:	d101      	bne.n	810463a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8104636:	2301      	movs	r3, #1
 8104638:	e000      	b.n	810463c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810463a:	2300      	movs	r3, #0
}
 810463c:	4618      	mov	r0, r3
 810463e:	370c      	adds	r7, #12
 8104640:	46bd      	mov	sp, r7
 8104642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104646:	4770      	bx	lr

08104648 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8104648:	b480      	push	{r7}
 810464a:	b083      	sub	sp, #12
 810464c:	af00      	add	r7, sp, #0
 810464e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	689b      	ldr	r3, [r3, #8]
 8104654:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8104658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810465c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8104664:	bf00      	nop
 8104666:	370c      	adds	r7, #12
 8104668:	46bd      	mov	sp, r7
 810466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810466e:	4770      	bx	lr

08104670 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8104670:	b480      	push	{r7}
 8104672:	b083      	sub	sp, #12
 8104674:	af00      	add	r7, sp, #0
 8104676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	689b      	ldr	r3, [r3, #8]
 810467c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8104680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104684:	d101      	bne.n	810468a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8104686:	2301      	movs	r3, #1
 8104688:	e000      	b.n	810468c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810468a:	2300      	movs	r3, #0
}
 810468c:	4618      	mov	r0, r3
 810468e:	370c      	adds	r7, #12
 8104690:	46bd      	mov	sp, r7
 8104692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104696:	4770      	bx	lr

08104698 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8104698:	b480      	push	{r7}
 810469a:	b083      	sub	sp, #12
 810469c:	af00      	add	r7, sp, #0
 810469e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	689b      	ldr	r3, [r3, #8]
 81046a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81046a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81046ac:	f043 0201 	orr.w	r2, r3, #1
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 81046b4:	bf00      	nop
 81046b6:	370c      	adds	r7, #12
 81046b8:	46bd      	mov	sp, r7
 81046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046be:	4770      	bx	lr

081046c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 81046c0:	b480      	push	{r7}
 81046c2:	b083      	sub	sp, #12
 81046c4:	af00      	add	r7, sp, #0
 81046c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81046c8:	687b      	ldr	r3, [r7, #4]
 81046ca:	689b      	ldr	r3, [r3, #8]
 81046cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81046d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81046d4:	f043 0202 	orr.w	r2, r3, #2
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 81046dc:	bf00      	nop
 81046de:	370c      	adds	r7, #12
 81046e0:	46bd      	mov	sp, r7
 81046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046e6:	4770      	bx	lr

081046e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81046e8:	b480      	push	{r7}
 81046ea:	b083      	sub	sp, #12
 81046ec:	af00      	add	r7, sp, #0
 81046ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	689b      	ldr	r3, [r3, #8]
 81046f4:	f003 0301 	and.w	r3, r3, #1
 81046f8:	2b01      	cmp	r3, #1
 81046fa:	d101      	bne.n	8104700 <LL_ADC_IsEnabled+0x18>
 81046fc:	2301      	movs	r3, #1
 81046fe:	e000      	b.n	8104702 <LL_ADC_IsEnabled+0x1a>
 8104700:	2300      	movs	r3, #0
}
 8104702:	4618      	mov	r0, r3
 8104704:	370c      	adds	r7, #12
 8104706:	46bd      	mov	sp, r7
 8104708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810470c:	4770      	bx	lr

0810470e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 810470e:	b480      	push	{r7}
 8104710:	b083      	sub	sp, #12
 8104712:	af00      	add	r7, sp, #0
 8104714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	689b      	ldr	r3, [r3, #8]
 810471a:	f003 0302 	and.w	r3, r3, #2
 810471e:	2b02      	cmp	r3, #2
 8104720:	d101      	bne.n	8104726 <LL_ADC_IsDisableOngoing+0x18>
 8104722:	2301      	movs	r3, #1
 8104724:	e000      	b.n	8104728 <LL_ADC_IsDisableOngoing+0x1a>
 8104726:	2300      	movs	r3, #0
}
 8104728:	4618      	mov	r0, r3
 810472a:	370c      	adds	r7, #12
 810472c:	46bd      	mov	sp, r7
 810472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104732:	4770      	bx	lr

08104734 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8104734:	b480      	push	{r7}
 8104736:	b083      	sub	sp, #12
 8104738:	af00      	add	r7, sp, #0
 810473a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	689b      	ldr	r3, [r3, #8]
 8104740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104748:	f043 0204 	orr.w	r2, r3, #4
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8104750:	bf00      	nop
 8104752:	370c      	adds	r7, #12
 8104754:	46bd      	mov	sp, r7
 8104756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810475a:	4770      	bx	lr

0810475c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 810475c:	b480      	push	{r7}
 810475e:	b083      	sub	sp, #12
 8104760:	af00      	add	r7, sp, #0
 8104762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	689b      	ldr	r3, [r3, #8]
 8104768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810476c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104770:	f043 0210 	orr.w	r2, r3, #16
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8104778:	bf00      	nop
 810477a:	370c      	adds	r7, #12
 810477c:	46bd      	mov	sp, r7
 810477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104782:	4770      	bx	lr

08104784 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8104784:	b480      	push	{r7}
 8104786:	b083      	sub	sp, #12
 8104788:	af00      	add	r7, sp, #0
 810478a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	689b      	ldr	r3, [r3, #8]
 8104790:	f003 0304 	and.w	r3, r3, #4
 8104794:	2b04      	cmp	r3, #4
 8104796:	d101      	bne.n	810479c <LL_ADC_REG_IsConversionOngoing+0x18>
 8104798:	2301      	movs	r3, #1
 810479a:	e000      	b.n	810479e <LL_ADC_REG_IsConversionOngoing+0x1a>
 810479c:	2300      	movs	r3, #0
}
 810479e:	4618      	mov	r0, r3
 81047a0:	370c      	adds	r7, #12
 81047a2:	46bd      	mov	sp, r7
 81047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a8:	4770      	bx	lr

081047aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 81047aa:	b480      	push	{r7}
 81047ac:	b083      	sub	sp, #12
 81047ae:	af00      	add	r7, sp, #0
 81047b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	689b      	ldr	r3, [r3, #8]
 81047b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81047ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81047be:	f043 0220 	orr.w	r2, r3, #32
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 81047c6:	bf00      	nop
 81047c8:	370c      	adds	r7, #12
 81047ca:	46bd      	mov	sp, r7
 81047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047d0:	4770      	bx	lr

081047d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81047d2:	b480      	push	{r7}
 81047d4:	b083      	sub	sp, #12
 81047d6:	af00      	add	r7, sp, #0
 81047d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	689b      	ldr	r3, [r3, #8]
 81047de:	f003 0308 	and.w	r3, r3, #8
 81047e2:	2b08      	cmp	r3, #8
 81047e4:	d101      	bne.n	81047ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 81047e6:	2301      	movs	r3, #1
 81047e8:	e000      	b.n	81047ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81047ea:	2300      	movs	r3, #0
}
 81047ec:	4618      	mov	r0, r3
 81047ee:	370c      	adds	r7, #12
 81047f0:	46bd      	mov	sp, r7
 81047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047f6:	4770      	bx	lr

081047f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81047f8:	b590      	push	{r4, r7, lr}
 81047fa:	b089      	sub	sp, #36	@ 0x24
 81047fc:	af00      	add	r7, sp, #0
 81047fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104800:	2300      	movs	r3, #0
 8104802:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8104804:	2300      	movs	r3, #0
 8104806:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	2b00      	cmp	r3, #0
 810480c:	d101      	bne.n	8104812 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810480e:	2301      	movs	r3, #1
 8104810:	e18f      	b.n	8104b32 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	68db      	ldr	r3, [r3, #12]
 8104816:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810481c:	2b00      	cmp	r3, #0
 810481e:	d109      	bne.n	8104834 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8104820:	6878      	ldr	r0, [r7, #4]
 8104822:	f7ff f88d 	bl	8103940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	2200      	movs	r2, #0
 810482a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	2200      	movs	r2, #0
 8104830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	681b      	ldr	r3, [r3, #0]
 8104838:	4618      	mov	r0, r3
 810483a:	f7ff fef1 	bl	8104620 <LL_ADC_IsDeepPowerDownEnabled>
 810483e:	4603      	mov	r3, r0
 8104840:	2b00      	cmp	r3, #0
 8104842:	d004      	beq.n	810484e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	4618      	mov	r0, r3
 810484a:	f7ff fed7 	bl	81045fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	4618      	mov	r0, r3
 8104854:	f7ff ff0c 	bl	8104670 <LL_ADC_IsInternalRegulatorEnabled>
 8104858:	4603      	mov	r3, r0
 810485a:	2b00      	cmp	r3, #0
 810485c:	d114      	bne.n	8104888 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	4618      	mov	r0, r3
 8104864:	f7ff fef0 	bl	8104648 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8104868:	4b88      	ldr	r3, [pc, #544]	@ (8104a8c <HAL_ADC_Init+0x294>)
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	099b      	lsrs	r3, r3, #6
 810486e:	4a88      	ldr	r2, [pc, #544]	@ (8104a90 <HAL_ADC_Init+0x298>)
 8104870:	fba2 2303 	umull	r2, r3, r2, r3
 8104874:	099b      	lsrs	r3, r3, #6
 8104876:	3301      	adds	r3, #1
 8104878:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810487a:	e002      	b.n	8104882 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810487c:	68bb      	ldr	r3, [r7, #8]
 810487e:	3b01      	subs	r3, #1
 8104880:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8104882:	68bb      	ldr	r3, [r7, #8]
 8104884:	2b00      	cmp	r3, #0
 8104886:	d1f9      	bne.n	810487c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	4618      	mov	r0, r3
 810488e:	f7ff feef 	bl	8104670 <LL_ADC_IsInternalRegulatorEnabled>
 8104892:	4603      	mov	r3, r0
 8104894:	2b00      	cmp	r3, #0
 8104896:	d10d      	bne.n	81048b4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104898:	687b      	ldr	r3, [r7, #4]
 810489a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810489c:	f043 0210 	orr.w	r2, r3, #16
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81048a8:	f043 0201 	orr.w	r2, r3, #1
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81048b0:	2301      	movs	r3, #1
 81048b2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	4618      	mov	r0, r3
 81048ba:	f7ff ff63 	bl	8104784 <LL_ADC_REG_IsConversionOngoing>
 81048be:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81048c0:	687b      	ldr	r3, [r7, #4]
 81048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81048c4:	f003 0310 	and.w	r3, r3, #16
 81048c8:	2b00      	cmp	r3, #0
 81048ca:	f040 8129 	bne.w	8104b20 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81048ce:	697b      	ldr	r3, [r7, #20]
 81048d0:	2b00      	cmp	r3, #0
 81048d2:	f040 8125 	bne.w	8104b20 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81048d6:	687b      	ldr	r3, [r7, #4]
 81048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81048da:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81048de:	f043 0202 	orr.w	r2, r3, #2
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	4618      	mov	r0, r3
 81048ec:	f7ff fefc 	bl	81046e8 <LL_ADC_IsEnabled>
 81048f0:	4603      	mov	r3, r0
 81048f2:	2b00      	cmp	r3, #0
 81048f4:	d136      	bne.n	8104964 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	4a66      	ldr	r2, [pc, #408]	@ (8104a94 <HAL_ADC_Init+0x29c>)
 81048fc:	4293      	cmp	r3, r2
 81048fe:	d004      	beq.n	810490a <HAL_ADC_Init+0x112>
 8104900:	687b      	ldr	r3, [r7, #4]
 8104902:	681b      	ldr	r3, [r3, #0]
 8104904:	4a64      	ldr	r2, [pc, #400]	@ (8104a98 <HAL_ADC_Init+0x2a0>)
 8104906:	4293      	cmp	r3, r2
 8104908:	d10e      	bne.n	8104928 <HAL_ADC_Init+0x130>
 810490a:	4862      	ldr	r0, [pc, #392]	@ (8104a94 <HAL_ADC_Init+0x29c>)
 810490c:	f7ff feec 	bl	81046e8 <LL_ADC_IsEnabled>
 8104910:	4604      	mov	r4, r0
 8104912:	4861      	ldr	r0, [pc, #388]	@ (8104a98 <HAL_ADC_Init+0x2a0>)
 8104914:	f7ff fee8 	bl	81046e8 <LL_ADC_IsEnabled>
 8104918:	4603      	mov	r3, r0
 810491a:	4323      	orrs	r3, r4
 810491c:	2b00      	cmp	r3, #0
 810491e:	bf0c      	ite	eq
 8104920:	2301      	moveq	r3, #1
 8104922:	2300      	movne	r3, #0
 8104924:	b2db      	uxtb	r3, r3
 8104926:	e008      	b.n	810493a <HAL_ADC_Init+0x142>
 8104928:	485c      	ldr	r0, [pc, #368]	@ (8104a9c <HAL_ADC_Init+0x2a4>)
 810492a:	f7ff fedd 	bl	81046e8 <LL_ADC_IsEnabled>
 810492e:	4603      	mov	r3, r0
 8104930:	2b00      	cmp	r3, #0
 8104932:	bf0c      	ite	eq
 8104934:	2301      	moveq	r3, #1
 8104936:	2300      	movne	r3, #0
 8104938:	b2db      	uxtb	r3, r3
 810493a:	2b00      	cmp	r3, #0
 810493c:	d012      	beq.n	8104964 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	4a54      	ldr	r2, [pc, #336]	@ (8104a94 <HAL_ADC_Init+0x29c>)
 8104944:	4293      	cmp	r3, r2
 8104946:	d004      	beq.n	8104952 <HAL_ADC_Init+0x15a>
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	4a52      	ldr	r2, [pc, #328]	@ (8104a98 <HAL_ADC_Init+0x2a0>)
 810494e:	4293      	cmp	r3, r2
 8104950:	d101      	bne.n	8104956 <HAL_ADC_Init+0x15e>
 8104952:	4a53      	ldr	r2, [pc, #332]	@ (8104aa0 <HAL_ADC_Init+0x2a8>)
 8104954:	e000      	b.n	8104958 <HAL_ADC_Init+0x160>
 8104956:	4a53      	ldr	r2, [pc, #332]	@ (8104aa4 <HAL_ADC_Init+0x2ac>)
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	685b      	ldr	r3, [r3, #4]
 810495c:	4619      	mov	r1, r3
 810495e:	4610      	mov	r0, r2
 8104960:	f7ff fd1a 	bl	8104398 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8104964:	f7ff fd0c 	bl	8104380 <HAL_GetREVID>
 8104968:	4603      	mov	r3, r0
 810496a:	f241 0203 	movw	r2, #4099	@ 0x1003
 810496e:	4293      	cmp	r3, r2
 8104970:	d914      	bls.n	810499c <HAL_ADC_Init+0x1a4>
 8104972:	687b      	ldr	r3, [r7, #4]
 8104974:	689b      	ldr	r3, [r3, #8]
 8104976:	2b10      	cmp	r3, #16
 8104978:	d110      	bne.n	810499c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	7d5b      	ldrb	r3, [r3, #21]
 810497e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104984:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810498a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810498c:	687b      	ldr	r3, [r7, #4]
 810498e:	7f1b      	ldrb	r3, [r3, #28]
 8104990:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8104992:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104994:	f043 030c 	orr.w	r3, r3, #12
 8104998:	61bb      	str	r3, [r7, #24]
 810499a:	e00d      	b.n	81049b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810499c:	687b      	ldr	r3, [r7, #4]
 810499e:	7d5b      	ldrb	r3, [r3, #21]
 81049a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81049a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81049ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81049ae:	687b      	ldr	r3, [r7, #4]
 81049b0:	7f1b      	ldrb	r3, [r3, #28]
 81049b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81049b4:	4313      	orrs	r3, r2
 81049b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81049b8:	687b      	ldr	r3, [r7, #4]
 81049ba:	7f1b      	ldrb	r3, [r3, #28]
 81049bc:	2b01      	cmp	r3, #1
 81049be:	d106      	bne.n	81049ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	6a1b      	ldr	r3, [r3, #32]
 81049c4:	3b01      	subs	r3, #1
 81049c6:	045b      	lsls	r3, r3, #17
 81049c8:	69ba      	ldr	r2, [r7, #24]
 81049ca:	4313      	orrs	r3, r2
 81049cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81049ce:	687b      	ldr	r3, [r7, #4]
 81049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81049d2:	2b00      	cmp	r3, #0
 81049d4:	d009      	beq.n	81049ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81049da:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81049e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81049e4:	69ba      	ldr	r2, [r7, #24]
 81049e6:	4313      	orrs	r3, r2
 81049e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	681b      	ldr	r3, [r3, #0]
 81049ee:	68da      	ldr	r2, [r3, #12]
 81049f0:	4b2d      	ldr	r3, [pc, #180]	@ (8104aa8 <HAL_ADC_Init+0x2b0>)
 81049f2:	4013      	ands	r3, r2
 81049f4:	687a      	ldr	r2, [r7, #4]
 81049f6:	6812      	ldr	r2, [r2, #0]
 81049f8:	69b9      	ldr	r1, [r7, #24]
 81049fa:	430b      	orrs	r3, r1
 81049fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	681b      	ldr	r3, [r3, #0]
 8104a02:	4618      	mov	r0, r3
 8104a04:	f7ff febe 	bl	8104784 <LL_ADC_REG_IsConversionOngoing>
 8104a08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104a0a:	687b      	ldr	r3, [r7, #4]
 8104a0c:	681b      	ldr	r3, [r3, #0]
 8104a0e:	4618      	mov	r0, r3
 8104a10:	f7ff fedf 	bl	81047d2 <LL_ADC_INJ_IsConversionOngoing>
 8104a14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8104a16:	693b      	ldr	r3, [r7, #16]
 8104a18:	2b00      	cmp	r3, #0
 8104a1a:	d15f      	bne.n	8104adc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8104a1c:	68fb      	ldr	r3, [r7, #12]
 8104a1e:	2b00      	cmp	r3, #0
 8104a20:	d15c      	bne.n	8104adc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8104a22:	687b      	ldr	r3, [r7, #4]
 8104a24:	7d1b      	ldrb	r3, [r3, #20]
 8104a26:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8104a28:	687b      	ldr	r3, [r7, #4]
 8104a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8104a2c:	4313      	orrs	r3, r2
 8104a2e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8104a30:	687b      	ldr	r3, [r7, #4]
 8104a32:	681b      	ldr	r3, [r3, #0]
 8104a34:	68db      	ldr	r3, [r3, #12]
 8104a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8104a3a:	f023 0303 	bic.w	r3, r3, #3
 8104a3e:	687a      	ldr	r2, [r7, #4]
 8104a40:	6812      	ldr	r2, [r2, #0]
 8104a42:	69b9      	ldr	r1, [r7, #24]
 8104a44:	430b      	orrs	r3, r1
 8104a46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8104a4e:	2b01      	cmp	r3, #1
 8104a50:	d12e      	bne.n	8104ab0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104a56:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	681b      	ldr	r3, [r3, #0]
 8104a5c:	691a      	ldr	r2, [r3, #16]
 8104a5e:	4b13      	ldr	r3, [pc, #76]	@ (8104aac <HAL_ADC_Init+0x2b4>)
 8104a60:	4013      	ands	r3, r2
 8104a62:	687a      	ldr	r2, [r7, #4]
 8104a64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8104a66:	3a01      	subs	r2, #1
 8104a68:	0411      	lsls	r1, r2, #16
 8104a6a:	687a      	ldr	r2, [r7, #4]
 8104a6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8104a6e:	4311      	orrs	r1, r2
 8104a70:	687a      	ldr	r2, [r7, #4]
 8104a72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8104a74:	4311      	orrs	r1, r2
 8104a76:	687a      	ldr	r2, [r7, #4]
 8104a78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8104a7a:	430a      	orrs	r2, r1
 8104a7c:	431a      	orrs	r2, r3
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	f042 0201 	orr.w	r2, r2, #1
 8104a86:	611a      	str	r2, [r3, #16]
 8104a88:	e01a      	b.n	8104ac0 <HAL_ADC_Init+0x2c8>
 8104a8a:	bf00      	nop
 8104a8c:	10000000 	.word	0x10000000
 8104a90:	053e2d63 	.word	0x053e2d63
 8104a94:	40022000 	.word	0x40022000
 8104a98:	40022100 	.word	0x40022100
 8104a9c:	58026000 	.word	0x58026000
 8104aa0:	40022300 	.word	0x40022300
 8104aa4:	58026300 	.word	0x58026300
 8104aa8:	fff0c003 	.word	0xfff0c003
 8104aac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	691a      	ldr	r2, [r3, #16]
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	681b      	ldr	r3, [r3, #0]
 8104aba:	f022 0201 	bic.w	r2, r2, #1
 8104abe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	691b      	ldr	r3, [r3, #16]
 8104ac6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8104aca:	687b      	ldr	r3, [r7, #4]
 8104acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	681b      	ldr	r3, [r3, #0]
 8104ad2:	430a      	orrs	r2, r1
 8104ad4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8104ad6:	6878      	ldr	r0, [r7, #4]
 8104ad8:	f000 ff32 	bl	8105940 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	68db      	ldr	r3, [r3, #12]
 8104ae0:	2b01      	cmp	r3, #1
 8104ae2:	d10c      	bne.n	8104afe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104aea:	f023 010f 	bic.w	r1, r3, #15
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	699b      	ldr	r3, [r3, #24]
 8104af2:	1e5a      	subs	r2, r3, #1
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	681b      	ldr	r3, [r3, #0]
 8104af8:	430a      	orrs	r2, r1
 8104afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8104afc:	e007      	b.n	8104b0e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	681b      	ldr	r3, [r3, #0]
 8104b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	f022 020f 	bic.w	r2, r2, #15
 8104b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104b12:	f023 0303 	bic.w	r3, r3, #3
 8104b16:	f043 0201 	orr.w	r2, r3, #1
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8104b1e:	e007      	b.n	8104b30 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104b20:	687b      	ldr	r3, [r7, #4]
 8104b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104b24:	f043 0210 	orr.w	r2, r3, #16
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104b2c:	2301      	movs	r3, #1
 8104b2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8104b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8104b32:	4618      	mov	r0, r3
 8104b34:	3724      	adds	r7, #36	@ 0x24
 8104b36:	46bd      	mov	sp, r7
 8104b38:	bd90      	pop	{r4, r7, pc}
 8104b3a:	bf00      	nop

08104b3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8104b3c:	b580      	push	{r7, lr}
 8104b3e:	b086      	sub	sp, #24
 8104b40:	af00      	add	r7, sp, #0
 8104b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	681b      	ldr	r3, [r3, #0]
 8104b48:	4a5d      	ldr	r2, [pc, #372]	@ (8104cc0 <HAL_ADC_Start+0x184>)
 8104b4a:	4293      	cmp	r3, r2
 8104b4c:	d004      	beq.n	8104b58 <HAL_ADC_Start+0x1c>
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	4a5c      	ldr	r2, [pc, #368]	@ (8104cc4 <HAL_ADC_Start+0x188>)
 8104b54:	4293      	cmp	r3, r2
 8104b56:	d101      	bne.n	8104b5c <HAL_ADC_Start+0x20>
 8104b58:	4b5b      	ldr	r3, [pc, #364]	@ (8104cc8 <HAL_ADC_Start+0x18c>)
 8104b5a:	e000      	b.n	8104b5e <HAL_ADC_Start+0x22>
 8104b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8104ccc <HAL_ADC_Start+0x190>)
 8104b5e:	4618      	mov	r0, r3
 8104b60:	f7ff fd30 	bl	81045c4 <LL_ADC_GetMultimode>
 8104b64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	681b      	ldr	r3, [r3, #0]
 8104b6a:	4618      	mov	r0, r3
 8104b6c:	f7ff fe0a 	bl	8104784 <LL_ADC_REG_IsConversionOngoing>
 8104b70:	4603      	mov	r3, r0
 8104b72:	2b00      	cmp	r3, #0
 8104b74:	f040 809c 	bne.w	8104cb0 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104b7e:	2b01      	cmp	r3, #1
 8104b80:	d101      	bne.n	8104b86 <HAL_ADC_Start+0x4a>
 8104b82:	2302      	movs	r3, #2
 8104b84:	e097      	b.n	8104cb6 <HAL_ADC_Start+0x17a>
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	2201      	movs	r2, #1
 8104b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8104b8e:	6878      	ldr	r0, [r7, #4]
 8104b90:	f000 fdec 	bl	810576c <ADC_Enable>
 8104b94:	4603      	mov	r3, r0
 8104b96:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8104b98:	7dfb      	ldrb	r3, [r7, #23]
 8104b9a:	2b00      	cmp	r3, #0
 8104b9c:	f040 8083 	bne.w	8104ca6 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8104ba0:	687b      	ldr	r3, [r7, #4]
 8104ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104ba4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104ba8:	f023 0301 	bic.w	r3, r3, #1
 8104bac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	681b      	ldr	r3, [r3, #0]
 8104bb8:	4a42      	ldr	r2, [pc, #264]	@ (8104cc4 <HAL_ADC_Start+0x188>)
 8104bba:	4293      	cmp	r3, r2
 8104bbc:	d002      	beq.n	8104bc4 <HAL_ADC_Start+0x88>
 8104bbe:	687b      	ldr	r3, [r7, #4]
 8104bc0:	681b      	ldr	r3, [r3, #0]
 8104bc2:	e000      	b.n	8104bc6 <HAL_ADC_Start+0x8a>
 8104bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8104cc0 <HAL_ADC_Start+0x184>)
 8104bc6:	687a      	ldr	r2, [r7, #4]
 8104bc8:	6812      	ldr	r2, [r2, #0]
 8104bca:	4293      	cmp	r3, r2
 8104bcc:	d002      	beq.n	8104bd4 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104bce:	693b      	ldr	r3, [r7, #16]
 8104bd0:	2b00      	cmp	r3, #0
 8104bd2:	d105      	bne.n	8104be0 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104bd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8104bdc:	687b      	ldr	r3, [r7, #4]
 8104bde:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104bec:	d106      	bne.n	8104bfc <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104bf2:	f023 0206 	bic.w	r2, r3, #6
 8104bf6:	687b      	ldr	r3, [r7, #4]
 8104bf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8104bfa:	e002      	b.n	8104c02 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	2200      	movs	r2, #0
 8104c00:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	221c      	movs	r2, #28
 8104c08:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8104c0a:	687b      	ldr	r3, [r7, #4]
 8104c0c:	2200      	movs	r2, #0
 8104c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	4a2b      	ldr	r2, [pc, #172]	@ (8104cc4 <HAL_ADC_Start+0x188>)
 8104c18:	4293      	cmp	r3, r2
 8104c1a:	d002      	beq.n	8104c22 <HAL_ADC_Start+0xe6>
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	e000      	b.n	8104c24 <HAL_ADC_Start+0xe8>
 8104c22:	4b27      	ldr	r3, [pc, #156]	@ (8104cc0 <HAL_ADC_Start+0x184>)
 8104c24:	687a      	ldr	r2, [r7, #4]
 8104c26:	6812      	ldr	r2, [r2, #0]
 8104c28:	4293      	cmp	r3, r2
 8104c2a:	d008      	beq.n	8104c3e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104c2c:	693b      	ldr	r3, [r7, #16]
 8104c2e:	2b00      	cmp	r3, #0
 8104c30:	d005      	beq.n	8104c3e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104c32:	693b      	ldr	r3, [r7, #16]
 8104c34:	2b05      	cmp	r3, #5
 8104c36:	d002      	beq.n	8104c3e <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104c38:	693b      	ldr	r3, [r7, #16]
 8104c3a:	2b09      	cmp	r3, #9
 8104c3c:	d114      	bne.n	8104c68 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	68db      	ldr	r3, [r3, #12]
 8104c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104c48:	2b00      	cmp	r3, #0
 8104c4a:	d007      	beq.n	8104c5c <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8104c54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	4618      	mov	r0, r3
 8104c62:	f7ff fd67 	bl	8104734 <LL_ADC_REG_StartConversion>
 8104c66:	e025      	b.n	8104cb4 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c6c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	4a12      	ldr	r2, [pc, #72]	@ (8104cc4 <HAL_ADC_Start+0x188>)
 8104c7a:	4293      	cmp	r3, r2
 8104c7c:	d002      	beq.n	8104c84 <HAL_ADC_Start+0x148>
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	681b      	ldr	r3, [r3, #0]
 8104c82:	e000      	b.n	8104c86 <HAL_ADC_Start+0x14a>
 8104c84:	4b0e      	ldr	r3, [pc, #56]	@ (8104cc0 <HAL_ADC_Start+0x184>)
 8104c86:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8104c88:	68fb      	ldr	r3, [r7, #12]
 8104c8a:	68db      	ldr	r3, [r3, #12]
 8104c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104c90:	2b00      	cmp	r3, #0
 8104c92:	d00f      	beq.n	8104cb4 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c98:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8104c9c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	655a      	str	r2, [r3, #84]	@ 0x54
 8104ca4:	e006      	b.n	8104cb4 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	2200      	movs	r2, #0
 8104caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8104cae:	e001      	b.n	8104cb4 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8104cb0:	2302      	movs	r3, #2
 8104cb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8104cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8104cb6:	4618      	mov	r0, r3
 8104cb8:	3718      	adds	r7, #24
 8104cba:	46bd      	mov	sp, r7
 8104cbc:	bd80      	pop	{r7, pc}
 8104cbe:	bf00      	nop
 8104cc0:	40022000 	.word	0x40022000
 8104cc4:	40022100 	.word	0x40022100
 8104cc8:	40022300 	.word	0x40022300
 8104ccc:	58026300 	.word	0x58026300

08104cd0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8104cd0:	b580      	push	{r7, lr}
 8104cd2:	b084      	sub	sp, #16
 8104cd4:	af00      	add	r7, sp, #0
 8104cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104cde:	2b01      	cmp	r3, #1
 8104ce0:	d101      	bne.n	8104ce6 <HAL_ADC_Stop+0x16>
 8104ce2:	2302      	movs	r3, #2
 8104ce4:	e023      	b.n	8104d2e <HAL_ADC_Stop+0x5e>
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	2201      	movs	r2, #1
 8104cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8104cee:	2103      	movs	r1, #3
 8104cf0:	6878      	ldr	r0, [r7, #4]
 8104cf2:	f000 fc7f 	bl	81055f4 <ADC_ConversionStop>
 8104cf6:	4603      	mov	r3, r0
 8104cf8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8104cfa:	7bfb      	ldrb	r3, [r7, #15]
 8104cfc:	2b00      	cmp	r3, #0
 8104cfe:	d111      	bne.n	8104d24 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8104d00:	6878      	ldr	r0, [r7, #4]
 8104d02:	f000 fdbd 	bl	8105880 <ADC_Disable>
 8104d06:	4603      	mov	r3, r0
 8104d08:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8104d0a:	7bfb      	ldrb	r3, [r7, #15]
 8104d0c:	2b00      	cmp	r3, #0
 8104d0e:	d109      	bne.n	8104d24 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8104d18:	f023 0301 	bic.w	r3, r3, #1
 8104d1c:	f043 0201 	orr.w	r2, r3, #1
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104d24:	687b      	ldr	r3, [r7, #4]
 8104d26:	2200      	movs	r2, #0
 8104d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8104d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8104d2e:	4618      	mov	r0, r3
 8104d30:	3710      	adds	r7, #16
 8104d32:	46bd      	mov	sp, r7
 8104d34:	bd80      	pop	{r7, pc}
	...

08104d38 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8104d38:	b580      	push	{r7, lr}
 8104d3a:	b088      	sub	sp, #32
 8104d3c:	af00      	add	r7, sp, #0
 8104d3e:	6078      	str	r0, [r7, #4]
 8104d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104d42:	687b      	ldr	r3, [r7, #4]
 8104d44:	681b      	ldr	r3, [r3, #0]
 8104d46:	4a72      	ldr	r2, [pc, #456]	@ (8104f10 <HAL_ADC_PollForConversion+0x1d8>)
 8104d48:	4293      	cmp	r3, r2
 8104d4a:	d004      	beq.n	8104d56 <HAL_ADC_PollForConversion+0x1e>
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	681b      	ldr	r3, [r3, #0]
 8104d50:	4a70      	ldr	r2, [pc, #448]	@ (8104f14 <HAL_ADC_PollForConversion+0x1dc>)
 8104d52:	4293      	cmp	r3, r2
 8104d54:	d101      	bne.n	8104d5a <HAL_ADC_PollForConversion+0x22>
 8104d56:	4b70      	ldr	r3, [pc, #448]	@ (8104f18 <HAL_ADC_PollForConversion+0x1e0>)
 8104d58:	e000      	b.n	8104d5c <HAL_ADC_PollForConversion+0x24>
 8104d5a:	4b70      	ldr	r3, [pc, #448]	@ (8104f1c <HAL_ADC_PollForConversion+0x1e4>)
 8104d5c:	4618      	mov	r0, r3
 8104d5e:	f7ff fc31 	bl	81045c4 <LL_ADC_GetMultimode>
 8104d62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	691b      	ldr	r3, [r3, #16]
 8104d68:	2b08      	cmp	r3, #8
 8104d6a:	d102      	bne.n	8104d72 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8104d6c:	2308      	movs	r3, #8
 8104d6e:	61fb      	str	r3, [r7, #28]
 8104d70:	e037      	b.n	8104de2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104d72:	697b      	ldr	r3, [r7, #20]
 8104d74:	2b00      	cmp	r3, #0
 8104d76:	d005      	beq.n	8104d84 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104d78:	697b      	ldr	r3, [r7, #20]
 8104d7a:	2b05      	cmp	r3, #5
 8104d7c:	d002      	beq.n	8104d84 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104d7e:	697b      	ldr	r3, [r7, #20]
 8104d80:	2b09      	cmp	r3, #9
 8104d82:	d111      	bne.n	8104da8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	68db      	ldr	r3, [r3, #12]
 8104d8a:	f003 0301 	and.w	r3, r3, #1
 8104d8e:	2b00      	cmp	r3, #0
 8104d90:	d007      	beq.n	8104da2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d96:	f043 0220 	orr.w	r2, r3, #32
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8104d9e:	2301      	movs	r3, #1
 8104da0:	e0b1      	b.n	8104f06 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8104da2:	2304      	movs	r3, #4
 8104da4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8104da6:	e01c      	b.n	8104de2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	4a58      	ldr	r2, [pc, #352]	@ (8104f10 <HAL_ADC_PollForConversion+0x1d8>)
 8104dae:	4293      	cmp	r3, r2
 8104db0:	d004      	beq.n	8104dbc <HAL_ADC_PollForConversion+0x84>
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	681b      	ldr	r3, [r3, #0]
 8104db6:	4a57      	ldr	r2, [pc, #348]	@ (8104f14 <HAL_ADC_PollForConversion+0x1dc>)
 8104db8:	4293      	cmp	r3, r2
 8104dba:	d101      	bne.n	8104dc0 <HAL_ADC_PollForConversion+0x88>
 8104dbc:	4b56      	ldr	r3, [pc, #344]	@ (8104f18 <HAL_ADC_PollForConversion+0x1e0>)
 8104dbe:	e000      	b.n	8104dc2 <HAL_ADC_PollForConversion+0x8a>
 8104dc0:	4b56      	ldr	r3, [pc, #344]	@ (8104f1c <HAL_ADC_PollForConversion+0x1e4>)
 8104dc2:	4618      	mov	r0, r3
 8104dc4:	f7ff fc0c 	bl	81045e0 <LL_ADC_GetMultiDMATransfer>
 8104dc8:	4603      	mov	r3, r0
 8104dca:	2b00      	cmp	r3, #0
 8104dcc:	d007      	beq.n	8104dde <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104dd2:	f043 0220 	orr.w	r2, r3, #32
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8104dda:	2301      	movs	r3, #1
 8104ddc:	e093      	b.n	8104f06 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8104dde:	2304      	movs	r3, #4
 8104de0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8104de2:	f7ff fa9d 	bl	8104320 <HAL_GetTick>
 8104de6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104de8:	e021      	b.n	8104e2e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8104dea:	683b      	ldr	r3, [r7, #0]
 8104dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104df0:	d01d      	beq.n	8104e2e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8104df2:	f7ff fa95 	bl	8104320 <HAL_GetTick>
 8104df6:	4602      	mov	r2, r0
 8104df8:	693b      	ldr	r3, [r7, #16]
 8104dfa:	1ad3      	subs	r3, r2, r3
 8104dfc:	683a      	ldr	r2, [r7, #0]
 8104dfe:	429a      	cmp	r2, r3
 8104e00:	d302      	bcc.n	8104e08 <HAL_ADC_PollForConversion+0xd0>
 8104e02:	683b      	ldr	r3, [r7, #0]
 8104e04:	2b00      	cmp	r3, #0
 8104e06:	d112      	bne.n	8104e2e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104e08:	687b      	ldr	r3, [r7, #4]
 8104e0a:	681b      	ldr	r3, [r3, #0]
 8104e0c:	681a      	ldr	r2, [r3, #0]
 8104e0e:	69fb      	ldr	r3, [r7, #28]
 8104e10:	4013      	ands	r3, r2
 8104e12:	2b00      	cmp	r3, #0
 8104e14:	d10b      	bne.n	8104e2e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e1a:	f043 0204 	orr.w	r2, r3, #4
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	2200      	movs	r2, #0
 8104e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8104e2a:	2303      	movs	r3, #3
 8104e2c:	e06b      	b.n	8104f06 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	681a      	ldr	r2, [r3, #0]
 8104e34:	69fb      	ldr	r3, [r7, #28]
 8104e36:	4013      	ands	r3, r2
 8104e38:	2b00      	cmp	r3, #0
 8104e3a:	d0d6      	beq.n	8104dea <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8104e48:	687b      	ldr	r3, [r7, #4]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	4618      	mov	r0, r3
 8104e4e:	f7ff fb2b 	bl	81044a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8104e52:	4603      	mov	r3, r0
 8104e54:	2b00      	cmp	r3, #0
 8104e56:	d01c      	beq.n	8104e92 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8104e58:	687b      	ldr	r3, [r7, #4]
 8104e5a:	7d5b      	ldrb	r3, [r3, #21]
 8104e5c:	2b00      	cmp	r3, #0
 8104e5e:	d118      	bne.n	8104e92 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	681b      	ldr	r3, [r3, #0]
 8104e66:	f003 0308 	and.w	r3, r3, #8
 8104e6a:	2b08      	cmp	r3, #8
 8104e6c:	d111      	bne.n	8104e92 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8104e76:	687b      	ldr	r3, [r7, #4]
 8104e78:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104e82:	2b00      	cmp	r3, #0
 8104e84:	d105      	bne.n	8104e92 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e8a:	f043 0201 	orr.w	r2, r3, #1
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	681b      	ldr	r3, [r3, #0]
 8104e96:	4a1f      	ldr	r2, [pc, #124]	@ (8104f14 <HAL_ADC_PollForConversion+0x1dc>)
 8104e98:	4293      	cmp	r3, r2
 8104e9a:	d002      	beq.n	8104ea2 <HAL_ADC_PollForConversion+0x16a>
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	e000      	b.n	8104ea4 <HAL_ADC_PollForConversion+0x16c>
 8104ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8104f10 <HAL_ADC_PollForConversion+0x1d8>)
 8104ea4:	687a      	ldr	r2, [r7, #4]
 8104ea6:	6812      	ldr	r2, [r2, #0]
 8104ea8:	4293      	cmp	r3, r2
 8104eaa:	d008      	beq.n	8104ebe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104eac:	697b      	ldr	r3, [r7, #20]
 8104eae:	2b00      	cmp	r3, #0
 8104eb0:	d005      	beq.n	8104ebe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8104eb2:	697b      	ldr	r3, [r7, #20]
 8104eb4:	2b05      	cmp	r3, #5
 8104eb6:	d002      	beq.n	8104ebe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8104eb8:	697b      	ldr	r3, [r7, #20]
 8104eba:	2b09      	cmp	r3, #9
 8104ebc:	d104      	bne.n	8104ec8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	681b      	ldr	r3, [r3, #0]
 8104ec2:	68db      	ldr	r3, [r3, #12]
 8104ec4:	61bb      	str	r3, [r7, #24]
 8104ec6:	e00c      	b.n	8104ee2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	4a11      	ldr	r2, [pc, #68]	@ (8104f14 <HAL_ADC_PollForConversion+0x1dc>)
 8104ece:	4293      	cmp	r3, r2
 8104ed0:	d002      	beq.n	8104ed8 <HAL_ADC_PollForConversion+0x1a0>
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	681b      	ldr	r3, [r3, #0]
 8104ed6:	e000      	b.n	8104eda <HAL_ADC_PollForConversion+0x1a2>
 8104ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8104f10 <HAL_ADC_PollForConversion+0x1d8>)
 8104eda:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8104edc:	68fb      	ldr	r3, [r7, #12]
 8104ede:	68db      	ldr	r3, [r3, #12]
 8104ee0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8104ee2:	69fb      	ldr	r3, [r7, #28]
 8104ee4:	2b08      	cmp	r3, #8
 8104ee6:	d104      	bne.n	8104ef2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	681b      	ldr	r3, [r3, #0]
 8104eec:	2208      	movs	r2, #8
 8104eee:	601a      	str	r2, [r3, #0]
 8104ef0:	e008      	b.n	8104f04 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8104ef2:	69bb      	ldr	r3, [r7, #24]
 8104ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104ef8:	2b00      	cmp	r3, #0
 8104efa:	d103      	bne.n	8104f04 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	681b      	ldr	r3, [r3, #0]
 8104f00:	220c      	movs	r2, #12
 8104f02:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8104f04:	2300      	movs	r3, #0
}
 8104f06:	4618      	mov	r0, r3
 8104f08:	3720      	adds	r7, #32
 8104f0a:	46bd      	mov	sp, r7
 8104f0c:	bd80      	pop	{r7, pc}
 8104f0e:	bf00      	nop
 8104f10:	40022000 	.word	0x40022000
 8104f14:	40022100 	.word	0x40022100
 8104f18:	40022300 	.word	0x40022300
 8104f1c:	58026300 	.word	0x58026300

08104f20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8104f20:	b480      	push	{r7}
 8104f22:	b083      	sub	sp, #12
 8104f24:	af00      	add	r7, sp, #0
 8104f26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8104f2e:	4618      	mov	r0, r3
 8104f30:	370c      	adds	r7, #12
 8104f32:	46bd      	mov	sp, r7
 8104f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f38:	4770      	bx	lr
	...

08104f3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8104f3c:	b590      	push	{r4, r7, lr}
 8104f3e:	b0a1      	sub	sp, #132	@ 0x84
 8104f40:	af00      	add	r7, sp, #0
 8104f42:	6078      	str	r0, [r7, #4]
 8104f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104f46:	2300      	movs	r3, #0
 8104f48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8104f4c:	2300      	movs	r3, #0
 8104f4e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8104f50:	683b      	ldr	r3, [r7, #0]
 8104f52:	68db      	ldr	r3, [r3, #12]
 8104f54:	4a65      	ldr	r2, [pc, #404]	@ (81050ec <HAL_ADC_ConfigChannel+0x1b0>)
 8104f56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104f5e:	2b01      	cmp	r3, #1
 8104f60:	d101      	bne.n	8104f66 <HAL_ADC_ConfigChannel+0x2a>
 8104f62:	2302      	movs	r3, #2
 8104f64:	e32e      	b.n	81055c4 <HAL_ADC_ConfigChannel+0x688>
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	2201      	movs	r2, #1
 8104f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	4618      	mov	r0, r3
 8104f74:	f7ff fc06 	bl	8104784 <LL_ADC_REG_IsConversionOngoing>
 8104f78:	4603      	mov	r3, r0
 8104f7a:	2b00      	cmp	r3, #0
 8104f7c:	f040 8313 	bne.w	81055a6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8104f80:	683b      	ldr	r3, [r7, #0]
 8104f82:	681b      	ldr	r3, [r3, #0]
 8104f84:	2b00      	cmp	r3, #0
 8104f86:	db2c      	blt.n	8104fe2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8104f88:	683b      	ldr	r3, [r7, #0]
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104f90:	2b00      	cmp	r3, #0
 8104f92:	d108      	bne.n	8104fa6 <HAL_ADC_ConfigChannel+0x6a>
 8104f94:	683b      	ldr	r3, [r7, #0]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	0e9b      	lsrs	r3, r3, #26
 8104f9a:	f003 031f 	and.w	r3, r3, #31
 8104f9e:	2201      	movs	r2, #1
 8104fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8104fa4:	e016      	b.n	8104fd4 <HAL_ADC_ConfigChannel+0x98>
 8104fa6:	683b      	ldr	r3, [r7, #0]
 8104fa8:	681b      	ldr	r3, [r3, #0]
 8104faa:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8104fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8104fae:	fa93 f3a3 	rbit	r3, r3
 8104fb2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8104fb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8104fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8104fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8104fba:	2b00      	cmp	r3, #0
 8104fbc:	d101      	bne.n	8104fc2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8104fbe:	2320      	movs	r3, #32
 8104fc0:	e003      	b.n	8104fca <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8104fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8104fc4:	fab3 f383 	clz	r3, r3
 8104fc8:	b2db      	uxtb	r3, r3
 8104fca:	f003 031f 	and.w	r3, r3, #31
 8104fce:	2201      	movs	r2, #1
 8104fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8104fd4:	687a      	ldr	r2, [r7, #4]
 8104fd6:	6812      	ldr	r2, [r2, #0]
 8104fd8:	69d1      	ldr	r1, [r2, #28]
 8104fda:	687a      	ldr	r2, [r7, #4]
 8104fdc:	6812      	ldr	r2, [r2, #0]
 8104fde:	430b      	orrs	r3, r1
 8104fe0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8104fe2:	687b      	ldr	r3, [r7, #4]
 8104fe4:	6818      	ldr	r0, [r3, #0]
 8104fe6:	683b      	ldr	r3, [r7, #0]
 8104fe8:	6859      	ldr	r1, [r3, #4]
 8104fea:	683b      	ldr	r3, [r7, #0]
 8104fec:	681b      	ldr	r3, [r3, #0]
 8104fee:	461a      	mov	r2, r3
 8104ff0:	f7ff fa6d 	bl	81044ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	681b      	ldr	r3, [r3, #0]
 8104ff8:	4618      	mov	r0, r3
 8104ffa:	f7ff fbc3 	bl	8104784 <LL_ADC_REG_IsConversionOngoing>
 8104ffe:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	681b      	ldr	r3, [r3, #0]
 8105004:	4618      	mov	r0, r3
 8105006:	f7ff fbe4 	bl	81047d2 <LL_ADC_INJ_IsConversionOngoing>
 810500a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810500c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810500e:	2b00      	cmp	r3, #0
 8105010:	f040 80b8 	bne.w	8105184 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8105014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8105016:	2b00      	cmp	r3, #0
 8105018:	f040 80b4 	bne.w	8105184 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	6818      	ldr	r0, [r3, #0]
 8105020:	683b      	ldr	r3, [r7, #0]
 8105022:	6819      	ldr	r1, [r3, #0]
 8105024:	683b      	ldr	r3, [r7, #0]
 8105026:	689b      	ldr	r3, [r3, #8]
 8105028:	461a      	mov	r2, r3
 810502a:	f7ff fa7c 	bl	8104526 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810502e:	4b30      	ldr	r3, [pc, #192]	@ (81050f0 <HAL_ADC_ConfigChannel+0x1b4>)
 8105030:	681b      	ldr	r3, [r3, #0]
 8105032:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8105036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810503a:	d10b      	bne.n	8105054 <HAL_ADC_ConfigChannel+0x118>
 810503c:	683b      	ldr	r3, [r7, #0]
 810503e:	695a      	ldr	r2, [r3, #20]
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	68db      	ldr	r3, [r3, #12]
 8105046:	089b      	lsrs	r3, r3, #2
 8105048:	f003 0307 	and.w	r3, r3, #7
 810504c:	005b      	lsls	r3, r3, #1
 810504e:	fa02 f303 	lsl.w	r3, r2, r3
 8105052:	e01d      	b.n	8105090 <HAL_ADC_ConfigChannel+0x154>
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	68db      	ldr	r3, [r3, #12]
 810505a:	f003 0310 	and.w	r3, r3, #16
 810505e:	2b00      	cmp	r3, #0
 8105060:	d10b      	bne.n	810507a <HAL_ADC_ConfigChannel+0x13e>
 8105062:	683b      	ldr	r3, [r7, #0]
 8105064:	695a      	ldr	r2, [r3, #20]
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	68db      	ldr	r3, [r3, #12]
 810506c:	089b      	lsrs	r3, r3, #2
 810506e:	f003 0307 	and.w	r3, r3, #7
 8105072:	005b      	lsls	r3, r3, #1
 8105074:	fa02 f303 	lsl.w	r3, r2, r3
 8105078:	e00a      	b.n	8105090 <HAL_ADC_ConfigChannel+0x154>
 810507a:	683b      	ldr	r3, [r7, #0]
 810507c:	695a      	ldr	r2, [r3, #20]
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	68db      	ldr	r3, [r3, #12]
 8105084:	089b      	lsrs	r3, r3, #2
 8105086:	f003 0304 	and.w	r3, r3, #4
 810508a:	005b      	lsls	r3, r3, #1
 810508c:	fa02 f303 	lsl.w	r3, r2, r3
 8105090:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8105092:	683b      	ldr	r3, [r7, #0]
 8105094:	691b      	ldr	r3, [r3, #16]
 8105096:	2b04      	cmp	r3, #4
 8105098:	d02c      	beq.n	81050f4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	6818      	ldr	r0, [r3, #0]
 810509e:	683b      	ldr	r3, [r7, #0]
 81050a0:	6919      	ldr	r1, [r3, #16]
 81050a2:	683b      	ldr	r3, [r7, #0]
 81050a4:	681a      	ldr	r2, [r3, #0]
 81050a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81050a8:	f7ff f9aa 	bl	8104400 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	6818      	ldr	r0, [r3, #0]
 81050b0:	683b      	ldr	r3, [r7, #0]
 81050b2:	6919      	ldr	r1, [r3, #16]
 81050b4:	683b      	ldr	r3, [r7, #0]
 81050b6:	7e5b      	ldrb	r3, [r3, #25]
 81050b8:	2b01      	cmp	r3, #1
 81050ba:	d102      	bne.n	81050c2 <HAL_ADC_ConfigChannel+0x186>
 81050bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81050c0:	e000      	b.n	81050c4 <HAL_ADC_ConfigChannel+0x188>
 81050c2:	2300      	movs	r3, #0
 81050c4:	461a      	mov	r2, r3
 81050c6:	f7ff f9d4 	bl	8104472 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	6818      	ldr	r0, [r3, #0]
 81050ce:	683b      	ldr	r3, [r7, #0]
 81050d0:	6919      	ldr	r1, [r3, #16]
 81050d2:	683b      	ldr	r3, [r7, #0]
 81050d4:	7e1b      	ldrb	r3, [r3, #24]
 81050d6:	2b01      	cmp	r3, #1
 81050d8:	d102      	bne.n	81050e0 <HAL_ADC_ConfigChannel+0x1a4>
 81050da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81050de:	e000      	b.n	81050e2 <HAL_ADC_ConfigChannel+0x1a6>
 81050e0:	2300      	movs	r3, #0
 81050e2:	461a      	mov	r2, r3
 81050e4:	f7ff f9ac 	bl	8104440 <LL_ADC_SetDataRightShift>
 81050e8:	e04c      	b.n	8105184 <HAL_ADC_ConfigChannel+0x248>
 81050ea:	bf00      	nop
 81050ec:	47ff0000 	.word	0x47ff0000
 81050f0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81050f4:	687b      	ldr	r3, [r7, #4]
 81050f6:	681b      	ldr	r3, [r3, #0]
 81050f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81050fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81050fe:	683b      	ldr	r3, [r7, #0]
 8105100:	681b      	ldr	r3, [r3, #0]
 8105102:	069b      	lsls	r3, r3, #26
 8105104:	429a      	cmp	r2, r3
 8105106:	d107      	bne.n	8105118 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8105108:	687b      	ldr	r3, [r7, #4]
 810510a:	681b      	ldr	r3, [r3, #0]
 810510c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	681b      	ldr	r3, [r3, #0]
 8105112:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105116:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	681b      	ldr	r3, [r3, #0]
 810511c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810511e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105122:	683b      	ldr	r3, [r7, #0]
 8105124:	681b      	ldr	r3, [r3, #0]
 8105126:	069b      	lsls	r3, r3, #26
 8105128:	429a      	cmp	r2, r3
 810512a:	d107      	bne.n	810513c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	681b      	ldr	r3, [r3, #0]
 8105130:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	681b      	ldr	r3, [r3, #0]
 8105136:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810513a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	681b      	ldr	r3, [r3, #0]
 8105140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105142:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105146:	683b      	ldr	r3, [r7, #0]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	069b      	lsls	r3, r3, #26
 810514c:	429a      	cmp	r2, r3
 810514e:	d107      	bne.n	8105160 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	681b      	ldr	r3, [r3, #0]
 8105154:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810515e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	681b      	ldr	r3, [r3, #0]
 8105164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105166:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810516a:	683b      	ldr	r3, [r7, #0]
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	069b      	lsls	r3, r3, #26
 8105170:	429a      	cmp	r2, r3
 8105172:	d107      	bne.n	8105184 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	681b      	ldr	r3, [r3, #0]
 8105178:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105182:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	681b      	ldr	r3, [r3, #0]
 8105188:	4618      	mov	r0, r3
 810518a:	f7ff faad 	bl	81046e8 <LL_ADC_IsEnabled>
 810518e:	4603      	mov	r3, r0
 8105190:	2b00      	cmp	r3, #0
 8105192:	f040 8211 	bne.w	81055b8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	6818      	ldr	r0, [r3, #0]
 810519a:	683b      	ldr	r3, [r7, #0]
 810519c:	6819      	ldr	r1, [r3, #0]
 810519e:	683b      	ldr	r3, [r7, #0]
 81051a0:	68db      	ldr	r3, [r3, #12]
 81051a2:	461a      	mov	r2, r3
 81051a4:	f7ff f9ea 	bl	810457c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81051a8:	683b      	ldr	r3, [r7, #0]
 81051aa:	68db      	ldr	r3, [r3, #12]
 81051ac:	4aa1      	ldr	r2, [pc, #644]	@ (8105434 <HAL_ADC_ConfigChannel+0x4f8>)
 81051ae:	4293      	cmp	r3, r2
 81051b0:	f040 812e 	bne.w	8105410 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81051b8:	683b      	ldr	r3, [r7, #0]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81051c0:	2b00      	cmp	r3, #0
 81051c2:	d10b      	bne.n	81051dc <HAL_ADC_ConfigChannel+0x2a0>
 81051c4:	683b      	ldr	r3, [r7, #0]
 81051c6:	681b      	ldr	r3, [r3, #0]
 81051c8:	0e9b      	lsrs	r3, r3, #26
 81051ca:	3301      	adds	r3, #1
 81051cc:	f003 031f 	and.w	r3, r3, #31
 81051d0:	2b09      	cmp	r3, #9
 81051d2:	bf94      	ite	ls
 81051d4:	2301      	movls	r3, #1
 81051d6:	2300      	movhi	r3, #0
 81051d8:	b2db      	uxtb	r3, r3
 81051da:	e019      	b.n	8105210 <HAL_ADC_ConfigChannel+0x2d4>
 81051dc:	683b      	ldr	r3, [r7, #0]
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81051e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 81051e4:	fa93 f3a3 	rbit	r3, r3
 81051e8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 81051ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81051ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 81051ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81051f0:	2b00      	cmp	r3, #0
 81051f2:	d101      	bne.n	81051f8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 81051f4:	2320      	movs	r3, #32
 81051f6:	e003      	b.n	8105200 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 81051f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81051fa:	fab3 f383 	clz	r3, r3
 81051fe:	b2db      	uxtb	r3, r3
 8105200:	3301      	adds	r3, #1
 8105202:	f003 031f 	and.w	r3, r3, #31
 8105206:	2b09      	cmp	r3, #9
 8105208:	bf94      	ite	ls
 810520a:	2301      	movls	r3, #1
 810520c:	2300      	movhi	r3, #0
 810520e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105210:	2b00      	cmp	r3, #0
 8105212:	d079      	beq.n	8105308 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105214:	683b      	ldr	r3, [r7, #0]
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810521c:	2b00      	cmp	r3, #0
 810521e:	d107      	bne.n	8105230 <HAL_ADC_ConfigChannel+0x2f4>
 8105220:	683b      	ldr	r3, [r7, #0]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	0e9b      	lsrs	r3, r3, #26
 8105226:	3301      	adds	r3, #1
 8105228:	069b      	lsls	r3, r3, #26
 810522a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810522e:	e015      	b.n	810525c <HAL_ADC_ConfigChannel+0x320>
 8105230:	683b      	ldr	r3, [r7, #0]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105238:	fa93 f3a3 	rbit	r3, r3
 810523c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 810523e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8105240:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8105242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105244:	2b00      	cmp	r3, #0
 8105246:	d101      	bne.n	810524c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8105248:	2320      	movs	r3, #32
 810524a:	e003      	b.n	8105254 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 810524c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810524e:	fab3 f383 	clz	r3, r3
 8105252:	b2db      	uxtb	r3, r3
 8105254:	3301      	adds	r3, #1
 8105256:	069b      	lsls	r3, r3, #26
 8105258:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810525c:	683b      	ldr	r3, [r7, #0]
 810525e:	681b      	ldr	r3, [r3, #0]
 8105260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105264:	2b00      	cmp	r3, #0
 8105266:	d109      	bne.n	810527c <HAL_ADC_ConfigChannel+0x340>
 8105268:	683b      	ldr	r3, [r7, #0]
 810526a:	681b      	ldr	r3, [r3, #0]
 810526c:	0e9b      	lsrs	r3, r3, #26
 810526e:	3301      	adds	r3, #1
 8105270:	f003 031f 	and.w	r3, r3, #31
 8105274:	2101      	movs	r1, #1
 8105276:	fa01 f303 	lsl.w	r3, r1, r3
 810527a:	e017      	b.n	81052ac <HAL_ADC_ConfigChannel+0x370>
 810527c:	683b      	ldr	r3, [r7, #0]
 810527e:	681b      	ldr	r3, [r3, #0]
 8105280:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105284:	fa93 f3a3 	rbit	r3, r3
 8105288:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 810528a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810528c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 810528e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105290:	2b00      	cmp	r3, #0
 8105292:	d101      	bne.n	8105298 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8105294:	2320      	movs	r3, #32
 8105296:	e003      	b.n	81052a0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8105298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810529a:	fab3 f383 	clz	r3, r3
 810529e:	b2db      	uxtb	r3, r3
 81052a0:	3301      	adds	r3, #1
 81052a2:	f003 031f 	and.w	r3, r3, #31
 81052a6:	2101      	movs	r1, #1
 81052a8:	fa01 f303 	lsl.w	r3, r1, r3
 81052ac:	ea42 0103 	orr.w	r1, r2, r3
 81052b0:	683b      	ldr	r3, [r7, #0]
 81052b2:	681b      	ldr	r3, [r3, #0]
 81052b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81052b8:	2b00      	cmp	r3, #0
 81052ba:	d10a      	bne.n	81052d2 <HAL_ADC_ConfigChannel+0x396>
 81052bc:	683b      	ldr	r3, [r7, #0]
 81052be:	681b      	ldr	r3, [r3, #0]
 81052c0:	0e9b      	lsrs	r3, r3, #26
 81052c2:	3301      	adds	r3, #1
 81052c4:	f003 021f 	and.w	r2, r3, #31
 81052c8:	4613      	mov	r3, r2
 81052ca:	005b      	lsls	r3, r3, #1
 81052cc:	4413      	add	r3, r2
 81052ce:	051b      	lsls	r3, r3, #20
 81052d0:	e018      	b.n	8105304 <HAL_ADC_ConfigChannel+0x3c8>
 81052d2:	683b      	ldr	r3, [r7, #0]
 81052d4:	681b      	ldr	r3, [r3, #0]
 81052d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81052d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81052da:	fa93 f3a3 	rbit	r3, r3
 81052de:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 81052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81052e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 81052e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052e6:	2b00      	cmp	r3, #0
 81052e8:	d101      	bne.n	81052ee <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 81052ea:	2320      	movs	r3, #32
 81052ec:	e003      	b.n	81052f6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 81052ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052f0:	fab3 f383 	clz	r3, r3
 81052f4:	b2db      	uxtb	r3, r3
 81052f6:	3301      	adds	r3, #1
 81052f8:	f003 021f 	and.w	r2, r3, #31
 81052fc:	4613      	mov	r3, r2
 81052fe:	005b      	lsls	r3, r3, #1
 8105300:	4413      	add	r3, r2
 8105302:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105304:	430b      	orrs	r3, r1
 8105306:	e07e      	b.n	8105406 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105308:	683b      	ldr	r3, [r7, #0]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105310:	2b00      	cmp	r3, #0
 8105312:	d107      	bne.n	8105324 <HAL_ADC_ConfigChannel+0x3e8>
 8105314:	683b      	ldr	r3, [r7, #0]
 8105316:	681b      	ldr	r3, [r3, #0]
 8105318:	0e9b      	lsrs	r3, r3, #26
 810531a:	3301      	adds	r3, #1
 810531c:	069b      	lsls	r3, r3, #26
 810531e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105322:	e015      	b.n	8105350 <HAL_ADC_ConfigChannel+0x414>
 8105324:	683b      	ldr	r3, [r7, #0]
 8105326:	681b      	ldr	r3, [r3, #0]
 8105328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810532c:	fa93 f3a3 	rbit	r3, r3
 8105330:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8105332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8105336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105338:	2b00      	cmp	r3, #0
 810533a:	d101      	bne.n	8105340 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 810533c:	2320      	movs	r3, #32
 810533e:	e003      	b.n	8105348 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8105340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105342:	fab3 f383 	clz	r3, r3
 8105346:	b2db      	uxtb	r3, r3
 8105348:	3301      	adds	r3, #1
 810534a:	069b      	lsls	r3, r3, #26
 810534c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105350:	683b      	ldr	r3, [r7, #0]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105358:	2b00      	cmp	r3, #0
 810535a:	d109      	bne.n	8105370 <HAL_ADC_ConfigChannel+0x434>
 810535c:	683b      	ldr	r3, [r7, #0]
 810535e:	681b      	ldr	r3, [r3, #0]
 8105360:	0e9b      	lsrs	r3, r3, #26
 8105362:	3301      	adds	r3, #1
 8105364:	f003 031f 	and.w	r3, r3, #31
 8105368:	2101      	movs	r1, #1
 810536a:	fa01 f303 	lsl.w	r3, r1, r3
 810536e:	e017      	b.n	81053a0 <HAL_ADC_ConfigChannel+0x464>
 8105370:	683b      	ldr	r3, [r7, #0]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105376:	69fb      	ldr	r3, [r7, #28]
 8105378:	fa93 f3a3 	rbit	r3, r3
 810537c:	61bb      	str	r3, [r7, #24]
  return result;
 810537e:	69bb      	ldr	r3, [r7, #24]
 8105380:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8105382:	6a3b      	ldr	r3, [r7, #32]
 8105384:	2b00      	cmp	r3, #0
 8105386:	d101      	bne.n	810538c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8105388:	2320      	movs	r3, #32
 810538a:	e003      	b.n	8105394 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 810538c:	6a3b      	ldr	r3, [r7, #32]
 810538e:	fab3 f383 	clz	r3, r3
 8105392:	b2db      	uxtb	r3, r3
 8105394:	3301      	adds	r3, #1
 8105396:	f003 031f 	and.w	r3, r3, #31
 810539a:	2101      	movs	r1, #1
 810539c:	fa01 f303 	lsl.w	r3, r1, r3
 81053a0:	ea42 0103 	orr.w	r1, r2, r3
 81053a4:	683b      	ldr	r3, [r7, #0]
 81053a6:	681b      	ldr	r3, [r3, #0]
 81053a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81053ac:	2b00      	cmp	r3, #0
 81053ae:	d10d      	bne.n	81053cc <HAL_ADC_ConfigChannel+0x490>
 81053b0:	683b      	ldr	r3, [r7, #0]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	0e9b      	lsrs	r3, r3, #26
 81053b6:	3301      	adds	r3, #1
 81053b8:	f003 021f 	and.w	r2, r3, #31
 81053bc:	4613      	mov	r3, r2
 81053be:	005b      	lsls	r3, r3, #1
 81053c0:	4413      	add	r3, r2
 81053c2:	3b1e      	subs	r3, #30
 81053c4:	051b      	lsls	r3, r3, #20
 81053c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81053ca:	e01b      	b.n	8105404 <HAL_ADC_ConfigChannel+0x4c8>
 81053cc:	683b      	ldr	r3, [r7, #0]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81053d2:	693b      	ldr	r3, [r7, #16]
 81053d4:	fa93 f3a3 	rbit	r3, r3
 81053d8:	60fb      	str	r3, [r7, #12]
  return result;
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 81053de:	697b      	ldr	r3, [r7, #20]
 81053e0:	2b00      	cmp	r3, #0
 81053e2:	d101      	bne.n	81053e8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 81053e4:	2320      	movs	r3, #32
 81053e6:	e003      	b.n	81053f0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 81053e8:	697b      	ldr	r3, [r7, #20]
 81053ea:	fab3 f383 	clz	r3, r3
 81053ee:	b2db      	uxtb	r3, r3
 81053f0:	3301      	adds	r3, #1
 81053f2:	f003 021f 	and.w	r2, r3, #31
 81053f6:	4613      	mov	r3, r2
 81053f8:	005b      	lsls	r3, r3, #1
 81053fa:	4413      	add	r3, r2
 81053fc:	3b1e      	subs	r3, #30
 81053fe:	051b      	lsls	r3, r3, #20
 8105400:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105404:	430b      	orrs	r3, r1
 8105406:	683a      	ldr	r2, [r7, #0]
 8105408:	6892      	ldr	r2, [r2, #8]
 810540a:	4619      	mov	r1, r3
 810540c:	f7ff f88b 	bl	8104526 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8105410:	683b      	ldr	r3, [r7, #0]
 8105412:	681b      	ldr	r3, [r3, #0]
 8105414:	2b00      	cmp	r3, #0
 8105416:	f280 80cf 	bge.w	81055b8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	681b      	ldr	r3, [r3, #0]
 810541e:	4a06      	ldr	r2, [pc, #24]	@ (8105438 <HAL_ADC_ConfigChannel+0x4fc>)
 8105420:	4293      	cmp	r3, r2
 8105422:	d004      	beq.n	810542e <HAL_ADC_ConfigChannel+0x4f2>
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	4a04      	ldr	r2, [pc, #16]	@ (810543c <HAL_ADC_ConfigChannel+0x500>)
 810542a:	4293      	cmp	r3, r2
 810542c:	d10a      	bne.n	8105444 <HAL_ADC_ConfigChannel+0x508>
 810542e:	4b04      	ldr	r3, [pc, #16]	@ (8105440 <HAL_ADC_ConfigChannel+0x504>)
 8105430:	e009      	b.n	8105446 <HAL_ADC_ConfigChannel+0x50a>
 8105432:	bf00      	nop
 8105434:	47ff0000 	.word	0x47ff0000
 8105438:	40022000 	.word	0x40022000
 810543c:	40022100 	.word	0x40022100
 8105440:	40022300 	.word	0x40022300
 8105444:	4b61      	ldr	r3, [pc, #388]	@ (81055cc <HAL_ADC_ConfigChannel+0x690>)
 8105446:	4618      	mov	r0, r3
 8105448:	f7fe ffcc 	bl	81043e4 <LL_ADC_GetCommonPathInternalCh>
 810544c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	4a5f      	ldr	r2, [pc, #380]	@ (81055d0 <HAL_ADC_ConfigChannel+0x694>)
 8105454:	4293      	cmp	r3, r2
 8105456:	d004      	beq.n	8105462 <HAL_ADC_ConfigChannel+0x526>
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	4a5d      	ldr	r2, [pc, #372]	@ (81055d4 <HAL_ADC_ConfigChannel+0x698>)
 810545e:	4293      	cmp	r3, r2
 8105460:	d10e      	bne.n	8105480 <HAL_ADC_ConfigChannel+0x544>
 8105462:	485b      	ldr	r0, [pc, #364]	@ (81055d0 <HAL_ADC_ConfigChannel+0x694>)
 8105464:	f7ff f940 	bl	81046e8 <LL_ADC_IsEnabled>
 8105468:	4604      	mov	r4, r0
 810546a:	485a      	ldr	r0, [pc, #360]	@ (81055d4 <HAL_ADC_ConfigChannel+0x698>)
 810546c:	f7ff f93c 	bl	81046e8 <LL_ADC_IsEnabled>
 8105470:	4603      	mov	r3, r0
 8105472:	4323      	orrs	r3, r4
 8105474:	2b00      	cmp	r3, #0
 8105476:	bf0c      	ite	eq
 8105478:	2301      	moveq	r3, #1
 810547a:	2300      	movne	r3, #0
 810547c:	b2db      	uxtb	r3, r3
 810547e:	e008      	b.n	8105492 <HAL_ADC_ConfigChannel+0x556>
 8105480:	4855      	ldr	r0, [pc, #340]	@ (81055d8 <HAL_ADC_ConfigChannel+0x69c>)
 8105482:	f7ff f931 	bl	81046e8 <LL_ADC_IsEnabled>
 8105486:	4603      	mov	r3, r0
 8105488:	2b00      	cmp	r3, #0
 810548a:	bf0c      	ite	eq
 810548c:	2301      	moveq	r3, #1
 810548e:	2300      	movne	r3, #0
 8105490:	b2db      	uxtb	r3, r3
 8105492:	2b00      	cmp	r3, #0
 8105494:	d07d      	beq.n	8105592 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8105496:	683b      	ldr	r3, [r7, #0]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	4a50      	ldr	r2, [pc, #320]	@ (81055dc <HAL_ADC_ConfigChannel+0x6a0>)
 810549c:	4293      	cmp	r3, r2
 810549e:	d130      	bne.n	8105502 <HAL_ADC_ConfigChannel+0x5c6>
 81054a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81054a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81054a6:	2b00      	cmp	r3, #0
 81054a8:	d12b      	bne.n	8105502 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	4a4a      	ldr	r2, [pc, #296]	@ (81055d8 <HAL_ADC_ConfigChannel+0x69c>)
 81054b0:	4293      	cmp	r3, r2
 81054b2:	f040 8081 	bne.w	81055b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81054b6:	687b      	ldr	r3, [r7, #4]
 81054b8:	681b      	ldr	r3, [r3, #0]
 81054ba:	4a45      	ldr	r2, [pc, #276]	@ (81055d0 <HAL_ADC_ConfigChannel+0x694>)
 81054bc:	4293      	cmp	r3, r2
 81054be:	d004      	beq.n	81054ca <HAL_ADC_ConfigChannel+0x58e>
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	681b      	ldr	r3, [r3, #0]
 81054c4:	4a43      	ldr	r2, [pc, #268]	@ (81055d4 <HAL_ADC_ConfigChannel+0x698>)
 81054c6:	4293      	cmp	r3, r2
 81054c8:	d101      	bne.n	81054ce <HAL_ADC_ConfigChannel+0x592>
 81054ca:	4a45      	ldr	r2, [pc, #276]	@ (81055e0 <HAL_ADC_ConfigChannel+0x6a4>)
 81054cc:	e000      	b.n	81054d0 <HAL_ADC_ConfigChannel+0x594>
 81054ce:	4a3f      	ldr	r2, [pc, #252]	@ (81055cc <HAL_ADC_ConfigChannel+0x690>)
 81054d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81054d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81054d6:	4619      	mov	r1, r3
 81054d8:	4610      	mov	r0, r2
 81054da:	f7fe ff70 	bl	81043be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81054de:	4b41      	ldr	r3, [pc, #260]	@ (81055e4 <HAL_ADC_ConfigChannel+0x6a8>)
 81054e0:	681b      	ldr	r3, [r3, #0]
 81054e2:	099b      	lsrs	r3, r3, #6
 81054e4:	4a40      	ldr	r2, [pc, #256]	@ (81055e8 <HAL_ADC_ConfigChannel+0x6ac>)
 81054e6:	fba2 2303 	umull	r2, r3, r2, r3
 81054ea:	099b      	lsrs	r3, r3, #6
 81054ec:	3301      	adds	r3, #1
 81054ee:	005b      	lsls	r3, r3, #1
 81054f0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81054f2:	e002      	b.n	81054fa <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 81054f4:	68bb      	ldr	r3, [r7, #8]
 81054f6:	3b01      	subs	r3, #1
 81054f8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81054fa:	68bb      	ldr	r3, [r7, #8]
 81054fc:	2b00      	cmp	r3, #0
 81054fe:	d1f9      	bne.n	81054f4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8105500:	e05a      	b.n	81055b8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8105502:	683b      	ldr	r3, [r7, #0]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	4a39      	ldr	r2, [pc, #228]	@ (81055ec <HAL_ADC_ConfigChannel+0x6b0>)
 8105508:	4293      	cmp	r3, r2
 810550a:	d11e      	bne.n	810554a <HAL_ADC_ConfigChannel+0x60e>
 810550c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810550e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105512:	2b00      	cmp	r3, #0
 8105514:	d119      	bne.n	810554a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	4a2f      	ldr	r2, [pc, #188]	@ (81055d8 <HAL_ADC_ConfigChannel+0x69c>)
 810551c:	4293      	cmp	r3, r2
 810551e:	d14b      	bne.n	81055b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	681b      	ldr	r3, [r3, #0]
 8105524:	4a2a      	ldr	r2, [pc, #168]	@ (81055d0 <HAL_ADC_ConfigChannel+0x694>)
 8105526:	4293      	cmp	r3, r2
 8105528:	d004      	beq.n	8105534 <HAL_ADC_ConfigChannel+0x5f8>
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	4a29      	ldr	r2, [pc, #164]	@ (81055d4 <HAL_ADC_ConfigChannel+0x698>)
 8105530:	4293      	cmp	r3, r2
 8105532:	d101      	bne.n	8105538 <HAL_ADC_ConfigChannel+0x5fc>
 8105534:	4a2a      	ldr	r2, [pc, #168]	@ (81055e0 <HAL_ADC_ConfigChannel+0x6a4>)
 8105536:	e000      	b.n	810553a <HAL_ADC_ConfigChannel+0x5fe>
 8105538:	4a24      	ldr	r2, [pc, #144]	@ (81055cc <HAL_ADC_ConfigChannel+0x690>)
 810553a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810553c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105540:	4619      	mov	r1, r3
 8105542:	4610      	mov	r0, r2
 8105544:	f7fe ff3b 	bl	81043be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8105548:	e036      	b.n	81055b8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810554a:	683b      	ldr	r3, [r7, #0]
 810554c:	681b      	ldr	r3, [r3, #0]
 810554e:	4a28      	ldr	r2, [pc, #160]	@ (81055f0 <HAL_ADC_ConfigChannel+0x6b4>)
 8105550:	4293      	cmp	r3, r2
 8105552:	d131      	bne.n	81055b8 <HAL_ADC_ConfigChannel+0x67c>
 8105554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810555a:	2b00      	cmp	r3, #0
 810555c:	d12c      	bne.n	81055b8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	4a1d      	ldr	r2, [pc, #116]	@ (81055d8 <HAL_ADC_ConfigChannel+0x69c>)
 8105564:	4293      	cmp	r3, r2
 8105566:	d127      	bne.n	81055b8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	4a18      	ldr	r2, [pc, #96]	@ (81055d0 <HAL_ADC_ConfigChannel+0x694>)
 810556e:	4293      	cmp	r3, r2
 8105570:	d004      	beq.n	810557c <HAL_ADC_ConfigChannel+0x640>
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	681b      	ldr	r3, [r3, #0]
 8105576:	4a17      	ldr	r2, [pc, #92]	@ (81055d4 <HAL_ADC_ConfigChannel+0x698>)
 8105578:	4293      	cmp	r3, r2
 810557a:	d101      	bne.n	8105580 <HAL_ADC_ConfigChannel+0x644>
 810557c:	4a18      	ldr	r2, [pc, #96]	@ (81055e0 <HAL_ADC_ConfigChannel+0x6a4>)
 810557e:	e000      	b.n	8105582 <HAL_ADC_ConfigChannel+0x646>
 8105580:	4a12      	ldr	r2, [pc, #72]	@ (81055cc <HAL_ADC_ConfigChannel+0x690>)
 8105582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105584:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8105588:	4619      	mov	r1, r3
 810558a:	4610      	mov	r0, r2
 810558c:	f7fe ff17 	bl	81043be <LL_ADC_SetCommonPathInternalCh>
 8105590:	e012      	b.n	81055b8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105596:	f043 0220 	orr.w	r2, r3, #32
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 810559e:	2301      	movs	r3, #1
 81055a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 81055a4:	e008      	b.n	81055b8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81055aa:	f043 0220 	orr.w	r2, r3, #32
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81055b2:	2301      	movs	r3, #1
 81055b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	2200      	movs	r2, #0
 81055bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81055c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 81055c4:	4618      	mov	r0, r3
 81055c6:	3784      	adds	r7, #132	@ 0x84
 81055c8:	46bd      	mov	sp, r7
 81055ca:	bd90      	pop	{r4, r7, pc}
 81055cc:	58026300 	.word	0x58026300
 81055d0:	40022000 	.word	0x40022000
 81055d4:	40022100 	.word	0x40022100
 81055d8:	58026000 	.word	0x58026000
 81055dc:	cb840000 	.word	0xcb840000
 81055e0:	40022300 	.word	0x40022300
 81055e4:	10000000 	.word	0x10000000
 81055e8:	053e2d63 	.word	0x053e2d63
 81055ec:	c7520000 	.word	0xc7520000
 81055f0:	cfb80000 	.word	0xcfb80000

081055f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 81055f4:	b580      	push	{r7, lr}
 81055f6:	b088      	sub	sp, #32
 81055f8:	af00      	add	r7, sp, #0
 81055fa:	6078      	str	r0, [r7, #4]
 81055fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 81055fe:	2300      	movs	r3, #0
 8105600:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8105602:	683b      	ldr	r3, [r7, #0]
 8105604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	4618      	mov	r0, r3
 810560c:	f7ff f8ba 	bl	8104784 <LL_ADC_REG_IsConversionOngoing>
 8105610:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8105612:	687b      	ldr	r3, [r7, #4]
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	4618      	mov	r0, r3
 8105618:	f7ff f8db 	bl	81047d2 <LL_ADC_INJ_IsConversionOngoing>
 810561c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 810561e:	693b      	ldr	r3, [r7, #16]
 8105620:	2b00      	cmp	r3, #0
 8105622:	d103      	bne.n	810562c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8105624:	68fb      	ldr	r3, [r7, #12]
 8105626:	2b00      	cmp	r3, #0
 8105628:	f000 8098 	beq.w	810575c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	681b      	ldr	r3, [r3, #0]
 8105630:	68db      	ldr	r3, [r3, #12]
 8105632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105636:	2b00      	cmp	r3, #0
 8105638:	d02a      	beq.n	8105690 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	7d5b      	ldrb	r3, [r3, #21]
 810563e:	2b01      	cmp	r3, #1
 8105640:	d126      	bne.n	8105690 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	7d1b      	ldrb	r3, [r3, #20]
 8105646:	2b01      	cmp	r3, #1
 8105648:	d122      	bne.n	8105690 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 810564a:	2301      	movs	r3, #1
 810564c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 810564e:	e014      	b.n	810567a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8105650:	69fb      	ldr	r3, [r7, #28]
 8105652:	4a45      	ldr	r2, [pc, #276]	@ (8105768 <ADC_ConversionStop+0x174>)
 8105654:	4293      	cmp	r3, r2
 8105656:	d90d      	bls.n	8105674 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810565c:	f043 0210 	orr.w	r2, r3, #16
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105668:	f043 0201 	orr.w	r2, r3, #1
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8105670:	2301      	movs	r3, #1
 8105672:	e074      	b.n	810575e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8105674:	69fb      	ldr	r3, [r7, #28]
 8105676:	3301      	adds	r3, #1
 8105678:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	681b      	ldr	r3, [r3, #0]
 8105680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105684:	2b40      	cmp	r3, #64	@ 0x40
 8105686:	d1e3      	bne.n	8105650 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8105688:	687b      	ldr	r3, [r7, #4]
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	2240      	movs	r2, #64	@ 0x40
 810568e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8105690:	69bb      	ldr	r3, [r7, #24]
 8105692:	2b02      	cmp	r3, #2
 8105694:	d014      	beq.n	81056c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	4618      	mov	r0, r3
 810569c:	f7ff f872 	bl	8104784 <LL_ADC_REG_IsConversionOngoing>
 81056a0:	4603      	mov	r3, r0
 81056a2:	2b00      	cmp	r3, #0
 81056a4:	d00c      	beq.n	81056c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	4618      	mov	r0, r3
 81056ac:	f7ff f82f 	bl	810470e <LL_ADC_IsDisableOngoing>
 81056b0:	4603      	mov	r3, r0
 81056b2:	2b00      	cmp	r3, #0
 81056b4:	d104      	bne.n	81056c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 81056b6:	687b      	ldr	r3, [r7, #4]
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	4618      	mov	r0, r3
 81056bc:	f7ff f84e 	bl	810475c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 81056c0:	69bb      	ldr	r3, [r7, #24]
 81056c2:	2b01      	cmp	r3, #1
 81056c4:	d014      	beq.n	81056f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	4618      	mov	r0, r3
 81056cc:	f7ff f881 	bl	81047d2 <LL_ADC_INJ_IsConversionOngoing>
 81056d0:	4603      	mov	r3, r0
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	d00c      	beq.n	81056f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	681b      	ldr	r3, [r3, #0]
 81056da:	4618      	mov	r0, r3
 81056dc:	f7ff f817 	bl	810470e <LL_ADC_IsDisableOngoing>
 81056e0:	4603      	mov	r3, r0
 81056e2:	2b00      	cmp	r3, #0
 81056e4:	d104      	bne.n	81056f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	4618      	mov	r0, r3
 81056ec:	f7ff f85d 	bl	81047aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 81056f0:	69bb      	ldr	r3, [r7, #24]
 81056f2:	2b02      	cmp	r3, #2
 81056f4:	d005      	beq.n	8105702 <ADC_ConversionStop+0x10e>
 81056f6:	69bb      	ldr	r3, [r7, #24]
 81056f8:	2b03      	cmp	r3, #3
 81056fa:	d105      	bne.n	8105708 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 81056fc:	230c      	movs	r3, #12
 81056fe:	617b      	str	r3, [r7, #20]
        break;
 8105700:	e005      	b.n	810570e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8105702:	2308      	movs	r3, #8
 8105704:	617b      	str	r3, [r7, #20]
        break;
 8105706:	e002      	b.n	810570e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8105708:	2304      	movs	r3, #4
 810570a:	617b      	str	r3, [r7, #20]
        break;
 810570c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 810570e:	f7fe fe07 	bl	8104320 <HAL_GetTick>
 8105712:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8105714:	e01b      	b.n	810574e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8105716:	f7fe fe03 	bl	8104320 <HAL_GetTick>
 810571a:	4602      	mov	r2, r0
 810571c:	68bb      	ldr	r3, [r7, #8]
 810571e:	1ad3      	subs	r3, r2, r3
 8105720:	2b05      	cmp	r3, #5
 8105722:	d914      	bls.n	810574e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	689a      	ldr	r2, [r3, #8]
 810572a:	697b      	ldr	r3, [r7, #20]
 810572c:	4013      	ands	r3, r2
 810572e:	2b00      	cmp	r3, #0
 8105730:	d00d      	beq.n	810574e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105736:	f043 0210 	orr.w	r2, r3, #16
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105742:	f043 0201 	orr.w	r2, r3, #1
 8105746:	687b      	ldr	r3, [r7, #4]
 8105748:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 810574a:	2301      	movs	r3, #1
 810574c:	e007      	b.n	810575e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	681b      	ldr	r3, [r3, #0]
 8105752:	689a      	ldr	r2, [r3, #8]
 8105754:	697b      	ldr	r3, [r7, #20]
 8105756:	4013      	ands	r3, r2
 8105758:	2b00      	cmp	r3, #0
 810575a:	d1dc      	bne.n	8105716 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 810575c:	2300      	movs	r3, #0
}
 810575e:	4618      	mov	r0, r3
 8105760:	3720      	adds	r7, #32
 8105762:	46bd      	mov	sp, r7
 8105764:	bd80      	pop	{r7, pc}
 8105766:	bf00      	nop
 8105768:	000cdbff 	.word	0x000cdbff

0810576c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 810576c:	b580      	push	{r7, lr}
 810576e:	b084      	sub	sp, #16
 8105770:	af00      	add	r7, sp, #0
 8105772:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	681b      	ldr	r3, [r3, #0]
 8105778:	4618      	mov	r0, r3
 810577a:	f7fe ffb5 	bl	81046e8 <LL_ADC_IsEnabled>
 810577e:	4603      	mov	r3, r0
 8105780:	2b00      	cmp	r3, #0
 8105782:	d16e      	bne.n	8105862 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	681b      	ldr	r3, [r3, #0]
 8105788:	689a      	ldr	r2, [r3, #8]
 810578a:	4b38      	ldr	r3, [pc, #224]	@ (810586c <ADC_Enable+0x100>)
 810578c:	4013      	ands	r3, r2
 810578e:	2b00      	cmp	r3, #0
 8105790:	d00d      	beq.n	81057ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105796:	f043 0210 	orr.w	r2, r3, #16
 810579a:	687b      	ldr	r3, [r7, #4]
 810579c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810579e:	687b      	ldr	r3, [r7, #4]
 81057a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81057a2:	f043 0201 	orr.w	r2, r3, #1
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 81057aa:	2301      	movs	r3, #1
 81057ac:	e05a      	b.n	8105864 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 81057ae:	687b      	ldr	r3, [r7, #4]
 81057b0:	681b      	ldr	r3, [r3, #0]
 81057b2:	4618      	mov	r0, r3
 81057b4:	f7fe ff70 	bl	8104698 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 81057b8:	f7fe fdb2 	bl	8104320 <HAL_GetTick>
 81057bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81057be:	687b      	ldr	r3, [r7, #4]
 81057c0:	681b      	ldr	r3, [r3, #0]
 81057c2:	4a2b      	ldr	r2, [pc, #172]	@ (8105870 <ADC_Enable+0x104>)
 81057c4:	4293      	cmp	r3, r2
 81057c6:	d004      	beq.n	81057d2 <ADC_Enable+0x66>
 81057c8:	687b      	ldr	r3, [r7, #4]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	4a29      	ldr	r2, [pc, #164]	@ (8105874 <ADC_Enable+0x108>)
 81057ce:	4293      	cmp	r3, r2
 81057d0:	d101      	bne.n	81057d6 <ADC_Enable+0x6a>
 81057d2:	4b29      	ldr	r3, [pc, #164]	@ (8105878 <ADC_Enable+0x10c>)
 81057d4:	e000      	b.n	81057d8 <ADC_Enable+0x6c>
 81057d6:	4b29      	ldr	r3, [pc, #164]	@ (810587c <ADC_Enable+0x110>)
 81057d8:	4618      	mov	r0, r3
 81057da:	f7fe fef3 	bl	81045c4 <LL_ADC_GetMultimode>
 81057de:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81057e0:	687b      	ldr	r3, [r7, #4]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	4a23      	ldr	r2, [pc, #140]	@ (8105874 <ADC_Enable+0x108>)
 81057e6:	4293      	cmp	r3, r2
 81057e8:	d002      	beq.n	81057f0 <ADC_Enable+0x84>
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	e000      	b.n	81057f2 <ADC_Enable+0x86>
 81057f0:	4b1f      	ldr	r3, [pc, #124]	@ (8105870 <ADC_Enable+0x104>)
 81057f2:	687a      	ldr	r2, [r7, #4]
 81057f4:	6812      	ldr	r2, [r2, #0]
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d02c      	beq.n	8105854 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81057fa:	68bb      	ldr	r3, [r7, #8]
 81057fc:	2b00      	cmp	r3, #0
 81057fe:	d130      	bne.n	8105862 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105800:	e028      	b.n	8105854 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105802:	687b      	ldr	r3, [r7, #4]
 8105804:	681b      	ldr	r3, [r3, #0]
 8105806:	4618      	mov	r0, r3
 8105808:	f7fe ff6e 	bl	81046e8 <LL_ADC_IsEnabled>
 810580c:	4603      	mov	r3, r0
 810580e:	2b00      	cmp	r3, #0
 8105810:	d104      	bne.n	810581c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	681b      	ldr	r3, [r3, #0]
 8105816:	4618      	mov	r0, r3
 8105818:	f7fe ff3e 	bl	8104698 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 810581c:	f7fe fd80 	bl	8104320 <HAL_GetTick>
 8105820:	4602      	mov	r2, r0
 8105822:	68fb      	ldr	r3, [r7, #12]
 8105824:	1ad3      	subs	r3, r2, r3
 8105826:	2b02      	cmp	r3, #2
 8105828:	d914      	bls.n	8105854 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	681b      	ldr	r3, [r3, #0]
 810582e:	681b      	ldr	r3, [r3, #0]
 8105830:	f003 0301 	and.w	r3, r3, #1
 8105834:	2b01      	cmp	r3, #1
 8105836:	d00d      	beq.n	8105854 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810583c:	f043 0210 	orr.w	r2, r3, #16
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105848:	f043 0201 	orr.w	r2, r3, #1
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8105850:	2301      	movs	r3, #1
 8105852:	e007      	b.n	8105864 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	681b      	ldr	r3, [r3, #0]
 810585a:	f003 0301 	and.w	r3, r3, #1
 810585e:	2b01      	cmp	r3, #1
 8105860:	d1cf      	bne.n	8105802 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8105862:	2300      	movs	r3, #0
}
 8105864:	4618      	mov	r0, r3
 8105866:	3710      	adds	r7, #16
 8105868:	46bd      	mov	sp, r7
 810586a:	bd80      	pop	{r7, pc}
 810586c:	8000003f 	.word	0x8000003f
 8105870:	40022000 	.word	0x40022000
 8105874:	40022100 	.word	0x40022100
 8105878:	40022300 	.word	0x40022300
 810587c:	58026300 	.word	0x58026300

08105880 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8105880:	b580      	push	{r7, lr}
 8105882:	b084      	sub	sp, #16
 8105884:	af00      	add	r7, sp, #0
 8105886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8105888:	687b      	ldr	r3, [r7, #4]
 810588a:	681b      	ldr	r3, [r3, #0]
 810588c:	4618      	mov	r0, r3
 810588e:	f7fe ff3e 	bl	810470e <LL_ADC_IsDisableOngoing>
 8105892:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	4618      	mov	r0, r3
 810589a:	f7fe ff25 	bl	81046e8 <LL_ADC_IsEnabled>
 810589e:	4603      	mov	r3, r0
 81058a0:	2b00      	cmp	r3, #0
 81058a2:	d047      	beq.n	8105934 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 81058a4:	68fb      	ldr	r3, [r7, #12]
 81058a6:	2b00      	cmp	r3, #0
 81058a8:	d144      	bne.n	8105934 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	689b      	ldr	r3, [r3, #8]
 81058b0:	f003 030d 	and.w	r3, r3, #13
 81058b4:	2b01      	cmp	r3, #1
 81058b6:	d10c      	bne.n	81058d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	4618      	mov	r0, r3
 81058be:	f7fe feff 	bl	81046c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	681b      	ldr	r3, [r3, #0]
 81058c6:	2203      	movs	r2, #3
 81058c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 81058ca:	f7fe fd29 	bl	8104320 <HAL_GetTick>
 81058ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81058d0:	e029      	b.n	8105926 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81058d2:	687b      	ldr	r3, [r7, #4]
 81058d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81058d6:	f043 0210 	orr.w	r2, r3, #16
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81058de:	687b      	ldr	r3, [r7, #4]
 81058e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81058e2:	f043 0201 	orr.w	r2, r3, #1
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 81058ea:	2301      	movs	r3, #1
 81058ec:	e023      	b.n	8105936 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 81058ee:	f7fe fd17 	bl	8104320 <HAL_GetTick>
 81058f2:	4602      	mov	r2, r0
 81058f4:	68bb      	ldr	r3, [r7, #8]
 81058f6:	1ad3      	subs	r3, r2, r3
 81058f8:	2b02      	cmp	r3, #2
 81058fa:	d914      	bls.n	8105926 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	689b      	ldr	r3, [r3, #8]
 8105902:	f003 0301 	and.w	r3, r3, #1
 8105906:	2b00      	cmp	r3, #0
 8105908:	d00d      	beq.n	8105926 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810590a:	687b      	ldr	r3, [r7, #4]
 810590c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810590e:	f043 0210 	orr.w	r2, r3, #16
 8105912:	687b      	ldr	r3, [r7, #4]
 8105914:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810591a:	f043 0201 	orr.w	r2, r3, #1
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8105922:	2301      	movs	r3, #1
 8105924:	e007      	b.n	8105936 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	689b      	ldr	r3, [r3, #8]
 810592c:	f003 0301 	and.w	r3, r3, #1
 8105930:	2b00      	cmp	r3, #0
 8105932:	d1dc      	bne.n	81058ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8105934:	2300      	movs	r3, #0
}
 8105936:	4618      	mov	r0, r3
 8105938:	3710      	adds	r7, #16
 810593a:	46bd      	mov	sp, r7
 810593c:	bd80      	pop	{r7, pc}
	...

08105940 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8105940:	b580      	push	{r7, lr}
 8105942:	b084      	sub	sp, #16
 8105944:	af00      	add	r7, sp, #0
 8105946:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	681b      	ldr	r3, [r3, #0]
 810594c:	4a7a      	ldr	r2, [pc, #488]	@ (8105b38 <ADC_ConfigureBoostMode+0x1f8>)
 810594e:	4293      	cmp	r3, r2
 8105950:	d004      	beq.n	810595c <ADC_ConfigureBoostMode+0x1c>
 8105952:	687b      	ldr	r3, [r7, #4]
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	4a79      	ldr	r2, [pc, #484]	@ (8105b3c <ADC_ConfigureBoostMode+0x1fc>)
 8105958:	4293      	cmp	r3, r2
 810595a:	d109      	bne.n	8105970 <ADC_ConfigureBoostMode+0x30>
 810595c:	4b78      	ldr	r3, [pc, #480]	@ (8105b40 <ADC_ConfigureBoostMode+0x200>)
 810595e:	689b      	ldr	r3, [r3, #8]
 8105960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105964:	2b00      	cmp	r3, #0
 8105966:	bf14      	ite	ne
 8105968:	2301      	movne	r3, #1
 810596a:	2300      	moveq	r3, #0
 810596c:	b2db      	uxtb	r3, r3
 810596e:	e008      	b.n	8105982 <ADC_ConfigureBoostMode+0x42>
 8105970:	4b74      	ldr	r3, [pc, #464]	@ (8105b44 <ADC_ConfigureBoostMode+0x204>)
 8105972:	689b      	ldr	r3, [r3, #8]
 8105974:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105978:	2b00      	cmp	r3, #0
 810597a:	bf14      	ite	ne
 810597c:	2301      	movne	r3, #1
 810597e:	2300      	moveq	r3, #0
 8105980:	b2db      	uxtb	r3, r3
 8105982:	2b00      	cmp	r3, #0
 8105984:	d01c      	beq.n	81059c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8105986:	f002 fa71 	bl	8107e6c <HAL_RCC_GetHCLKFreq>
 810598a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	685b      	ldr	r3, [r3, #4]
 8105990:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105994:	d010      	beq.n	81059b8 <ADC_ConfigureBoostMode+0x78>
 8105996:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810599a:	d873      	bhi.n	8105a84 <ADC_ConfigureBoostMode+0x144>
 810599c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81059a0:	d002      	beq.n	81059a8 <ADC_ConfigureBoostMode+0x68>
 81059a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81059a6:	d16d      	bne.n	8105a84 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	685b      	ldr	r3, [r3, #4]
 81059ac:	0c1b      	lsrs	r3, r3, #16
 81059ae:	68fa      	ldr	r2, [r7, #12]
 81059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 81059b4:	60fb      	str	r3, [r7, #12]
        break;
 81059b6:	e068      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81059b8:	68fb      	ldr	r3, [r7, #12]
 81059ba:	089b      	lsrs	r3, r3, #2
 81059bc:	60fb      	str	r3, [r7, #12]
        break;
 81059be:	e064      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81059c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 81059c4:	f04f 0100 	mov.w	r1, #0
 81059c8:	f003 fcb8 	bl	810933c <HAL_RCCEx_GetPeriphCLKFreq>
 81059cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81059ce:	687b      	ldr	r3, [r7, #4]
 81059d0:	685b      	ldr	r3, [r3, #4]
 81059d2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81059d6:	d051      	beq.n	8105a7c <ADC_ConfigureBoostMode+0x13c>
 81059d8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 81059dc:	d854      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 81059de:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81059e2:	d047      	beq.n	8105a74 <ADC_ConfigureBoostMode+0x134>
 81059e4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 81059e8:	d84e      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 81059ea:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81059ee:	d03d      	beq.n	8105a6c <ADC_ConfigureBoostMode+0x12c>
 81059f0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81059f4:	d848      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 81059f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81059fa:	d033      	beq.n	8105a64 <ADC_ConfigureBoostMode+0x124>
 81059fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105a00:	d842      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 8105a02:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8105a06:	d029      	beq.n	8105a5c <ADC_ConfigureBoostMode+0x11c>
 8105a08:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8105a0c:	d83c      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 8105a0e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8105a12:	d01a      	beq.n	8105a4a <ADC_ConfigureBoostMode+0x10a>
 8105a14:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8105a18:	d836      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 8105a1a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8105a1e:	d014      	beq.n	8105a4a <ADC_ConfigureBoostMode+0x10a>
 8105a20:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8105a24:	d830      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 8105a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105a2a:	d00e      	beq.n	8105a4a <ADC_ConfigureBoostMode+0x10a>
 8105a2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105a30:	d82a      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 8105a32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8105a36:	d008      	beq.n	8105a4a <ADC_ConfigureBoostMode+0x10a>
 8105a38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8105a3c:	d824      	bhi.n	8105a88 <ADC_ConfigureBoostMode+0x148>
 8105a3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105a42:	d002      	beq.n	8105a4a <ADC_ConfigureBoostMode+0x10a>
 8105a44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8105a48:	d11e      	bne.n	8105a88 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	685b      	ldr	r3, [r3, #4]
 8105a4e:	0c9b      	lsrs	r3, r3, #18
 8105a50:	005b      	lsls	r3, r3, #1
 8105a52:	68fa      	ldr	r2, [r7, #12]
 8105a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8105a58:	60fb      	str	r3, [r7, #12]
        break;
 8105a5a:	e016      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8105a5c:	68fb      	ldr	r3, [r7, #12]
 8105a5e:	091b      	lsrs	r3, r3, #4
 8105a60:	60fb      	str	r3, [r7, #12]
        break;
 8105a62:	e012      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8105a64:	68fb      	ldr	r3, [r7, #12]
 8105a66:	095b      	lsrs	r3, r3, #5
 8105a68:	60fb      	str	r3, [r7, #12]
        break;
 8105a6a:	e00e      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8105a6c:	68fb      	ldr	r3, [r7, #12]
 8105a6e:	099b      	lsrs	r3, r3, #6
 8105a70:	60fb      	str	r3, [r7, #12]
        break;
 8105a72:	e00a      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8105a74:	68fb      	ldr	r3, [r7, #12]
 8105a76:	09db      	lsrs	r3, r3, #7
 8105a78:	60fb      	str	r3, [r7, #12]
        break;
 8105a7a:	e006      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8105a7c:	68fb      	ldr	r3, [r7, #12]
 8105a7e:	0a1b      	lsrs	r3, r3, #8
 8105a80:	60fb      	str	r3, [r7, #12]
        break;
 8105a82:	e002      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
        break;
 8105a84:	bf00      	nop
 8105a86:	e000      	b.n	8105a8a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8105a88:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8105a8a:	f7fe fc79 	bl	8104380 <HAL_GetREVID>
 8105a8e:	4603      	mov	r3, r0
 8105a90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8105a94:	4293      	cmp	r3, r2
 8105a96:	d815      	bhi.n	8105ac4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8105a98:	68fb      	ldr	r3, [r7, #12]
 8105a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8105b48 <ADC_ConfigureBoostMode+0x208>)
 8105a9c:	4293      	cmp	r3, r2
 8105a9e:	d908      	bls.n	8105ab2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	681b      	ldr	r3, [r3, #0]
 8105aa4:	689a      	ldr	r2, [r3, #8]
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105aae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8105ab0:	e03e      	b.n	8105b30 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	689a      	ldr	r2, [r3, #8]
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105ac0:	609a      	str	r2, [r3, #8]
}
 8105ac2:	e035      	b.n	8105b30 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8105ac4:	68fb      	ldr	r3, [r7, #12]
 8105ac6:	085b      	lsrs	r3, r3, #1
 8105ac8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8105aca:	68fb      	ldr	r3, [r7, #12]
 8105acc:	4a1f      	ldr	r2, [pc, #124]	@ (8105b4c <ADC_ConfigureBoostMode+0x20c>)
 8105ace:	4293      	cmp	r3, r2
 8105ad0:	d808      	bhi.n	8105ae4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	689a      	ldr	r2, [r3, #8]
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	681b      	ldr	r3, [r3, #0]
 8105adc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8105ae0:	609a      	str	r2, [r3, #8]
}
 8105ae2:	e025      	b.n	8105b30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8105ae4:	68fb      	ldr	r3, [r7, #12]
 8105ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8105b50 <ADC_ConfigureBoostMode+0x210>)
 8105ae8:	4293      	cmp	r3, r2
 8105aea:	d80a      	bhi.n	8105b02 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	689b      	ldr	r3, [r3, #8]
 8105af2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105afe:	609a      	str	r2, [r3, #8]
}
 8105b00:	e016      	b.n	8105b30 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8105b02:	68fb      	ldr	r3, [r7, #12]
 8105b04:	4a13      	ldr	r2, [pc, #76]	@ (8105b54 <ADC_ConfigureBoostMode+0x214>)
 8105b06:	4293      	cmp	r3, r2
 8105b08:	d80a      	bhi.n	8105b20 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	689b      	ldr	r3, [r3, #8]
 8105b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	681b      	ldr	r3, [r3, #0]
 8105b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8105b1c:	609a      	str	r2, [r3, #8]
}
 8105b1e:	e007      	b.n	8105b30 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	689a      	ldr	r2, [r3, #8]
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	681b      	ldr	r3, [r3, #0]
 8105b2a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8105b2e:	609a      	str	r2, [r3, #8]
}
 8105b30:	bf00      	nop
 8105b32:	3710      	adds	r7, #16
 8105b34:	46bd      	mov	sp, r7
 8105b36:	bd80      	pop	{r7, pc}
 8105b38:	40022000 	.word	0x40022000
 8105b3c:	40022100 	.word	0x40022100
 8105b40:	40022300 	.word	0x40022300
 8105b44:	58026300 	.word	0x58026300
 8105b48:	01312d00 	.word	0x01312d00
 8105b4c:	005f5e10 	.word	0x005f5e10
 8105b50:	00bebc20 	.word	0x00bebc20
 8105b54:	017d7840 	.word	0x017d7840

08105b58 <LL_ADC_IsEnabled>:
{
 8105b58:	b480      	push	{r7}
 8105b5a:	b083      	sub	sp, #12
 8105b5c:	af00      	add	r7, sp, #0
 8105b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	689b      	ldr	r3, [r3, #8]
 8105b64:	f003 0301 	and.w	r3, r3, #1
 8105b68:	2b01      	cmp	r3, #1
 8105b6a:	d101      	bne.n	8105b70 <LL_ADC_IsEnabled+0x18>
 8105b6c:	2301      	movs	r3, #1
 8105b6e:	e000      	b.n	8105b72 <LL_ADC_IsEnabled+0x1a>
 8105b70:	2300      	movs	r3, #0
}
 8105b72:	4618      	mov	r0, r3
 8105b74:	370c      	adds	r7, #12
 8105b76:	46bd      	mov	sp, r7
 8105b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b7c:	4770      	bx	lr

08105b7e <LL_ADC_REG_IsConversionOngoing>:
{
 8105b7e:	b480      	push	{r7}
 8105b80:	b083      	sub	sp, #12
 8105b82:	af00      	add	r7, sp, #0
 8105b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	689b      	ldr	r3, [r3, #8]
 8105b8a:	f003 0304 	and.w	r3, r3, #4
 8105b8e:	2b04      	cmp	r3, #4
 8105b90:	d101      	bne.n	8105b96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8105b92:	2301      	movs	r3, #1
 8105b94:	e000      	b.n	8105b98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8105b96:	2300      	movs	r3, #0
}
 8105b98:	4618      	mov	r0, r3
 8105b9a:	370c      	adds	r7, #12
 8105b9c:	46bd      	mov	sp, r7
 8105b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ba2:	4770      	bx	lr

08105ba4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8105ba4:	b590      	push	{r4, r7, lr}
 8105ba6:	b09f      	sub	sp, #124	@ 0x7c
 8105ba8:	af00      	add	r7, sp, #0
 8105baa:	6078      	str	r0, [r7, #4]
 8105bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8105bae:	2300      	movs	r3, #0
 8105bb0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8105bba:	2b01      	cmp	r3, #1
 8105bbc:	d101      	bne.n	8105bc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8105bbe:	2302      	movs	r3, #2
 8105bc0:	e0c4      	b.n	8105d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	2201      	movs	r2, #1
 8105bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8105bca:	2300      	movs	r3, #0
 8105bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8105bce:	2300      	movs	r3, #0
 8105bd0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	681b      	ldr	r3, [r3, #0]
 8105bd6:	4a5f      	ldr	r2, [pc, #380]	@ (8105d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105bd8:	4293      	cmp	r3, r2
 8105bda:	d102      	bne.n	8105be2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8105bdc:	4b5e      	ldr	r3, [pc, #376]	@ (8105d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105bde:	60bb      	str	r3, [r7, #8]
 8105be0:	e001      	b.n	8105be6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8105be2:	2300      	movs	r3, #0
 8105be4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8105be6:	68bb      	ldr	r3, [r7, #8]
 8105be8:	2b00      	cmp	r3, #0
 8105bea:	d10b      	bne.n	8105c04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105bf0:	f043 0220 	orr.w	r2, r3, #32
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8105bf8:	687b      	ldr	r3, [r7, #4]
 8105bfa:	2200      	movs	r2, #0
 8105bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8105c00:	2301      	movs	r3, #1
 8105c02:	e0a3      	b.n	8105d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8105c04:	68bb      	ldr	r3, [r7, #8]
 8105c06:	4618      	mov	r0, r3
 8105c08:	f7ff ffb9 	bl	8105b7e <LL_ADC_REG_IsConversionOngoing>
 8105c0c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	681b      	ldr	r3, [r3, #0]
 8105c12:	4618      	mov	r0, r3
 8105c14:	f7ff ffb3 	bl	8105b7e <LL_ADC_REG_IsConversionOngoing>
 8105c18:	4603      	mov	r3, r0
 8105c1a:	2b00      	cmp	r3, #0
 8105c1c:	f040 8085 	bne.w	8105d2a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8105c20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	f040 8081 	bne.w	8105d2a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8105c28:	687b      	ldr	r3, [r7, #4]
 8105c2a:	681b      	ldr	r3, [r3, #0]
 8105c2c:	4a49      	ldr	r2, [pc, #292]	@ (8105d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105c2e:	4293      	cmp	r3, r2
 8105c30:	d004      	beq.n	8105c3c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	681b      	ldr	r3, [r3, #0]
 8105c36:	4a48      	ldr	r2, [pc, #288]	@ (8105d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105c38:	4293      	cmp	r3, r2
 8105c3a:	d101      	bne.n	8105c40 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8105c3c:	4b47      	ldr	r3, [pc, #284]	@ (8105d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8105c3e:	e000      	b.n	8105c42 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8105c40:	4b47      	ldr	r3, [pc, #284]	@ (8105d60 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8105c42:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105c44:	683b      	ldr	r3, [r7, #0]
 8105c46:	681b      	ldr	r3, [r3, #0]
 8105c48:	2b00      	cmp	r3, #0
 8105c4a:	d03b      	beq.n	8105cc4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8105c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105c4e:	689b      	ldr	r3, [r3, #8]
 8105c50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8105c54:	683b      	ldr	r3, [r7, #0]
 8105c56:	685b      	ldr	r3, [r3, #4]
 8105c58:	431a      	orrs	r2, r3
 8105c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105c5c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	4a3c      	ldr	r2, [pc, #240]	@ (8105d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105c64:	4293      	cmp	r3, r2
 8105c66:	d004      	beq.n	8105c72 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8105c68:	687b      	ldr	r3, [r7, #4]
 8105c6a:	681b      	ldr	r3, [r3, #0]
 8105c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8105d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105c6e:	4293      	cmp	r3, r2
 8105c70:	d10e      	bne.n	8105c90 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8105c72:	4838      	ldr	r0, [pc, #224]	@ (8105d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105c74:	f7ff ff70 	bl	8105b58 <LL_ADC_IsEnabled>
 8105c78:	4604      	mov	r4, r0
 8105c7a:	4837      	ldr	r0, [pc, #220]	@ (8105d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105c7c:	f7ff ff6c 	bl	8105b58 <LL_ADC_IsEnabled>
 8105c80:	4603      	mov	r3, r0
 8105c82:	4323      	orrs	r3, r4
 8105c84:	2b00      	cmp	r3, #0
 8105c86:	bf0c      	ite	eq
 8105c88:	2301      	moveq	r3, #1
 8105c8a:	2300      	movne	r3, #0
 8105c8c:	b2db      	uxtb	r3, r3
 8105c8e:	e008      	b.n	8105ca2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8105c90:	4834      	ldr	r0, [pc, #208]	@ (8105d64 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8105c92:	f7ff ff61 	bl	8105b58 <LL_ADC_IsEnabled>
 8105c96:	4603      	mov	r3, r0
 8105c98:	2b00      	cmp	r3, #0
 8105c9a:	bf0c      	ite	eq
 8105c9c:	2301      	moveq	r3, #1
 8105c9e:	2300      	movne	r3, #0
 8105ca0:	b2db      	uxtb	r3, r3
 8105ca2:	2b00      	cmp	r3, #0
 8105ca4:	d04b      	beq.n	8105d3e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8105ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105ca8:	689b      	ldr	r3, [r3, #8]
 8105caa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8105cae:	f023 030f 	bic.w	r3, r3, #15
 8105cb2:	683a      	ldr	r2, [r7, #0]
 8105cb4:	6811      	ldr	r1, [r2, #0]
 8105cb6:	683a      	ldr	r2, [r7, #0]
 8105cb8:	6892      	ldr	r2, [r2, #8]
 8105cba:	430a      	orrs	r2, r1
 8105cbc:	431a      	orrs	r2, r3
 8105cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105cc0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105cc2:	e03c      	b.n	8105d3e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8105cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105cc6:	689b      	ldr	r3, [r3, #8]
 8105cc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8105ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105cce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8105d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105cd6:	4293      	cmp	r3, r2
 8105cd8:	d004      	beq.n	8105ce4 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8105cda:	687b      	ldr	r3, [r7, #4]
 8105cdc:	681b      	ldr	r3, [r3, #0]
 8105cde:	4a1e      	ldr	r2, [pc, #120]	@ (8105d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105ce0:	4293      	cmp	r3, r2
 8105ce2:	d10e      	bne.n	8105d02 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8105ce4:	481b      	ldr	r0, [pc, #108]	@ (8105d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105ce6:	f7ff ff37 	bl	8105b58 <LL_ADC_IsEnabled>
 8105cea:	4604      	mov	r4, r0
 8105cec:	481a      	ldr	r0, [pc, #104]	@ (8105d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105cee:	f7ff ff33 	bl	8105b58 <LL_ADC_IsEnabled>
 8105cf2:	4603      	mov	r3, r0
 8105cf4:	4323      	orrs	r3, r4
 8105cf6:	2b00      	cmp	r3, #0
 8105cf8:	bf0c      	ite	eq
 8105cfa:	2301      	moveq	r3, #1
 8105cfc:	2300      	movne	r3, #0
 8105cfe:	b2db      	uxtb	r3, r3
 8105d00:	e008      	b.n	8105d14 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8105d02:	4818      	ldr	r0, [pc, #96]	@ (8105d64 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8105d04:	f7ff ff28 	bl	8105b58 <LL_ADC_IsEnabled>
 8105d08:	4603      	mov	r3, r0
 8105d0a:	2b00      	cmp	r3, #0
 8105d0c:	bf0c      	ite	eq
 8105d0e:	2301      	moveq	r3, #1
 8105d10:	2300      	movne	r3, #0
 8105d12:	b2db      	uxtb	r3, r3
 8105d14:	2b00      	cmp	r3, #0
 8105d16:	d012      	beq.n	8105d3e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8105d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105d1a:	689b      	ldr	r3, [r3, #8]
 8105d1c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8105d20:	f023 030f 	bic.w	r3, r3, #15
 8105d24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8105d26:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105d28:	e009      	b.n	8105d3e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105d2e:	f043 0220 	orr.w	r2, r3, #32
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8105d36:	2301      	movs	r3, #1
 8105d38:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8105d3c:	e000      	b.n	8105d40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8105d3e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105d40:	687b      	ldr	r3, [r7, #4]
 8105d42:	2200      	movs	r2, #0
 8105d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8105d48:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8105d4c:	4618      	mov	r0, r3
 8105d4e:	377c      	adds	r7, #124	@ 0x7c
 8105d50:	46bd      	mov	sp, r7
 8105d52:	bd90      	pop	{r4, r7, pc}
 8105d54:	40022000 	.word	0x40022000
 8105d58:	40022100 	.word	0x40022100
 8105d5c:	40022300 	.word	0x40022300
 8105d60:	58026300 	.word	0x58026300
 8105d64:	58026000 	.word	0x58026000

08105d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105d68:	b480      	push	{r7}
 8105d6a:	b085      	sub	sp, #20
 8105d6c:	af00      	add	r7, sp, #0
 8105d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	f003 0307 	and.w	r3, r3, #7
 8105d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8105d78:	4b0c      	ldr	r3, [pc, #48]	@ (8105dac <__NVIC_SetPriorityGrouping+0x44>)
 8105d7a:	68db      	ldr	r3, [r3, #12]
 8105d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8105d7e:	68ba      	ldr	r2, [r7, #8]
 8105d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8105d84:	4013      	ands	r3, r2
 8105d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8105d88:	68fb      	ldr	r3, [r7, #12]
 8105d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105d8c:	68bb      	ldr	r3, [r7, #8]
 8105d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8105d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8105d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8105d9a:	4a04      	ldr	r2, [pc, #16]	@ (8105dac <__NVIC_SetPriorityGrouping+0x44>)
 8105d9c:	68bb      	ldr	r3, [r7, #8]
 8105d9e:	60d3      	str	r3, [r2, #12]
}
 8105da0:	bf00      	nop
 8105da2:	3714      	adds	r7, #20
 8105da4:	46bd      	mov	sp, r7
 8105da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105daa:	4770      	bx	lr
 8105dac:	e000ed00 	.word	0xe000ed00

08105db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8105db0:	b480      	push	{r7}
 8105db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8105db4:	4b04      	ldr	r3, [pc, #16]	@ (8105dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8105db6:	68db      	ldr	r3, [r3, #12]
 8105db8:	0a1b      	lsrs	r3, r3, #8
 8105dba:	f003 0307 	and.w	r3, r3, #7
}
 8105dbe:	4618      	mov	r0, r3
 8105dc0:	46bd      	mov	sp, r7
 8105dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dc6:	4770      	bx	lr
 8105dc8:	e000ed00 	.word	0xe000ed00

08105dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105dcc:	b480      	push	{r7}
 8105dce:	b083      	sub	sp, #12
 8105dd0:	af00      	add	r7, sp, #0
 8105dd2:	4603      	mov	r3, r0
 8105dd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105dda:	2b00      	cmp	r3, #0
 8105ddc:	db0b      	blt.n	8105df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8105dde:	88fb      	ldrh	r3, [r7, #6]
 8105de0:	f003 021f 	and.w	r2, r3, #31
 8105de4:	4907      	ldr	r1, [pc, #28]	@ (8105e04 <__NVIC_EnableIRQ+0x38>)
 8105de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105dea:	095b      	lsrs	r3, r3, #5
 8105dec:	2001      	movs	r0, #1
 8105dee:	fa00 f202 	lsl.w	r2, r0, r2
 8105df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105df6:	bf00      	nop
 8105df8:	370c      	adds	r7, #12
 8105dfa:	46bd      	mov	sp, r7
 8105dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e00:	4770      	bx	lr
 8105e02:	bf00      	nop
 8105e04:	e000e100 	.word	0xe000e100

08105e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105e08:	b480      	push	{r7}
 8105e0a:	b083      	sub	sp, #12
 8105e0c:	af00      	add	r7, sp, #0
 8105e0e:	4603      	mov	r3, r0
 8105e10:	6039      	str	r1, [r7, #0]
 8105e12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105e18:	2b00      	cmp	r3, #0
 8105e1a:	db0a      	blt.n	8105e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105e1c:	683b      	ldr	r3, [r7, #0]
 8105e1e:	b2da      	uxtb	r2, r3
 8105e20:	490c      	ldr	r1, [pc, #48]	@ (8105e54 <__NVIC_SetPriority+0x4c>)
 8105e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105e26:	0112      	lsls	r2, r2, #4
 8105e28:	b2d2      	uxtb	r2, r2
 8105e2a:	440b      	add	r3, r1
 8105e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8105e30:	e00a      	b.n	8105e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105e32:	683b      	ldr	r3, [r7, #0]
 8105e34:	b2da      	uxtb	r2, r3
 8105e36:	4908      	ldr	r1, [pc, #32]	@ (8105e58 <__NVIC_SetPriority+0x50>)
 8105e38:	88fb      	ldrh	r3, [r7, #6]
 8105e3a:	f003 030f 	and.w	r3, r3, #15
 8105e3e:	3b04      	subs	r3, #4
 8105e40:	0112      	lsls	r2, r2, #4
 8105e42:	b2d2      	uxtb	r2, r2
 8105e44:	440b      	add	r3, r1
 8105e46:	761a      	strb	r2, [r3, #24]
}
 8105e48:	bf00      	nop
 8105e4a:	370c      	adds	r7, #12
 8105e4c:	46bd      	mov	sp, r7
 8105e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e52:	4770      	bx	lr
 8105e54:	e000e100 	.word	0xe000e100
 8105e58:	e000ed00 	.word	0xe000ed00

08105e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105e5c:	b480      	push	{r7}
 8105e5e:	b089      	sub	sp, #36	@ 0x24
 8105e60:	af00      	add	r7, sp, #0
 8105e62:	60f8      	str	r0, [r7, #12]
 8105e64:	60b9      	str	r1, [r7, #8]
 8105e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8105e68:	68fb      	ldr	r3, [r7, #12]
 8105e6a:	f003 0307 	and.w	r3, r3, #7
 8105e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8105e70:	69fb      	ldr	r3, [r7, #28]
 8105e72:	f1c3 0307 	rsb	r3, r3, #7
 8105e76:	2b04      	cmp	r3, #4
 8105e78:	bf28      	it	cs
 8105e7a:	2304      	movcs	r3, #4
 8105e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8105e7e:	69fb      	ldr	r3, [r7, #28]
 8105e80:	3304      	adds	r3, #4
 8105e82:	2b06      	cmp	r3, #6
 8105e84:	d902      	bls.n	8105e8c <NVIC_EncodePriority+0x30>
 8105e86:	69fb      	ldr	r3, [r7, #28]
 8105e88:	3b03      	subs	r3, #3
 8105e8a:	e000      	b.n	8105e8e <NVIC_EncodePriority+0x32>
 8105e8c:	2300      	movs	r3, #0
 8105e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105e90:	f04f 32ff 	mov.w	r2, #4294967295
 8105e94:	69bb      	ldr	r3, [r7, #24]
 8105e96:	fa02 f303 	lsl.w	r3, r2, r3
 8105e9a:	43da      	mvns	r2, r3
 8105e9c:	68bb      	ldr	r3, [r7, #8]
 8105e9e:	401a      	ands	r2, r3
 8105ea0:	697b      	ldr	r3, [r7, #20]
 8105ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8105ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8105ea8:	697b      	ldr	r3, [r7, #20]
 8105eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8105eae:	43d9      	mvns	r1, r3
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105eb4:	4313      	orrs	r3, r2
         );
}
 8105eb6:	4618      	mov	r0, r3
 8105eb8:	3724      	adds	r7, #36	@ 0x24
 8105eba:	46bd      	mov	sp, r7
 8105ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ec0:	4770      	bx	lr
	...

08105ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105ec4:	b580      	push	{r7, lr}
 8105ec6:	b082      	sub	sp, #8
 8105ec8:	af00      	add	r7, sp, #0
 8105eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	3b01      	subs	r3, #1
 8105ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105ed4:	d301      	bcc.n	8105eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8105ed6:	2301      	movs	r3, #1
 8105ed8:	e00f      	b.n	8105efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8105eda:	4a0a      	ldr	r2, [pc, #40]	@ (8105f04 <SysTick_Config+0x40>)
 8105edc:	687b      	ldr	r3, [r7, #4]
 8105ede:	3b01      	subs	r3, #1
 8105ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8105ee2:	210f      	movs	r1, #15
 8105ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8105ee8:	f7ff ff8e 	bl	8105e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8105eec:	4b05      	ldr	r3, [pc, #20]	@ (8105f04 <SysTick_Config+0x40>)
 8105eee:	2200      	movs	r2, #0
 8105ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8105ef2:	4b04      	ldr	r3, [pc, #16]	@ (8105f04 <SysTick_Config+0x40>)
 8105ef4:	2207      	movs	r2, #7
 8105ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8105ef8:	2300      	movs	r3, #0
}
 8105efa:	4618      	mov	r0, r3
 8105efc:	3708      	adds	r7, #8
 8105efe:	46bd      	mov	sp, r7
 8105f00:	bd80      	pop	{r7, pc}
 8105f02:	bf00      	nop
 8105f04:	e000e010 	.word	0xe000e010

08105f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105f08:	b580      	push	{r7, lr}
 8105f0a:	b082      	sub	sp, #8
 8105f0c:	af00      	add	r7, sp, #0
 8105f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8105f10:	6878      	ldr	r0, [r7, #4]
 8105f12:	f7ff ff29 	bl	8105d68 <__NVIC_SetPriorityGrouping>
}
 8105f16:	bf00      	nop
 8105f18:	3708      	adds	r7, #8
 8105f1a:	46bd      	mov	sp, r7
 8105f1c:	bd80      	pop	{r7, pc}

08105f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105f1e:	b580      	push	{r7, lr}
 8105f20:	b086      	sub	sp, #24
 8105f22:	af00      	add	r7, sp, #0
 8105f24:	4603      	mov	r3, r0
 8105f26:	60b9      	str	r1, [r7, #8]
 8105f28:	607a      	str	r2, [r7, #4]
 8105f2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8105f2c:	f7ff ff40 	bl	8105db0 <__NVIC_GetPriorityGrouping>
 8105f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8105f32:	687a      	ldr	r2, [r7, #4]
 8105f34:	68b9      	ldr	r1, [r7, #8]
 8105f36:	6978      	ldr	r0, [r7, #20]
 8105f38:	f7ff ff90 	bl	8105e5c <NVIC_EncodePriority>
 8105f3c:	4602      	mov	r2, r0
 8105f3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8105f42:	4611      	mov	r1, r2
 8105f44:	4618      	mov	r0, r3
 8105f46:	f7ff ff5f 	bl	8105e08 <__NVIC_SetPriority>
}
 8105f4a:	bf00      	nop
 8105f4c:	3718      	adds	r7, #24
 8105f4e:	46bd      	mov	sp, r7
 8105f50:	bd80      	pop	{r7, pc}

08105f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105f52:	b580      	push	{r7, lr}
 8105f54:	b082      	sub	sp, #8
 8105f56:	af00      	add	r7, sp, #0
 8105f58:	4603      	mov	r3, r0
 8105f5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8105f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105f60:	4618      	mov	r0, r3
 8105f62:	f7ff ff33 	bl	8105dcc <__NVIC_EnableIRQ>
}
 8105f66:	bf00      	nop
 8105f68:	3708      	adds	r7, #8
 8105f6a:	46bd      	mov	sp, r7
 8105f6c:	bd80      	pop	{r7, pc}

08105f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8105f6e:	b580      	push	{r7, lr}
 8105f70:	b082      	sub	sp, #8
 8105f72:	af00      	add	r7, sp, #0
 8105f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8105f76:	6878      	ldr	r0, [r7, #4]
 8105f78:	f7ff ffa4 	bl	8105ec4 <SysTick_Config>
 8105f7c:	4603      	mov	r3, r0
}
 8105f7e:	4618      	mov	r0, r3
 8105f80:	3708      	adds	r7, #8
 8105f82:	46bd      	mov	sp, r7
 8105f84:	bd80      	pop	{r7, pc}
	...

08105f88 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8105f88:	b480      	push	{r7}
 8105f8a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8105f8c:	4b07      	ldr	r3, [pc, #28]	@ (8105fac <HAL_GetCurrentCPUID+0x24>)
 8105f8e:	681b      	ldr	r3, [r3, #0]
 8105f90:	091b      	lsrs	r3, r3, #4
 8105f92:	f003 030f 	and.w	r3, r3, #15
 8105f96:	2b07      	cmp	r3, #7
 8105f98:	d101      	bne.n	8105f9e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8105f9a:	2303      	movs	r3, #3
 8105f9c:	e000      	b.n	8105fa0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8105f9e:	2301      	movs	r3, #1
  }
}
 8105fa0:	4618      	mov	r0, r3
 8105fa2:	46bd      	mov	sp, r7
 8105fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fa8:	4770      	bx	lr
 8105faa:	bf00      	nop
 8105fac:	e000ed00 	.word	0xe000ed00

08105fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8105fb0:	b580      	push	{r7, lr}
 8105fb2:	b086      	sub	sp, #24
 8105fb4:	af00      	add	r7, sp, #0
 8105fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8105fb8:	f7fe f9b2 	bl	8104320 <HAL_GetTick>
 8105fbc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	2b00      	cmp	r3, #0
 8105fc2:	d101      	bne.n	8105fc8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8105fc4:	2301      	movs	r3, #1
 8105fc6:	e2dc      	b.n	8106582 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8105fce:	b2db      	uxtb	r3, r3
 8105fd0:	2b02      	cmp	r3, #2
 8105fd2:	d008      	beq.n	8105fe6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	2280      	movs	r2, #128	@ 0x80
 8105fd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	2200      	movs	r2, #0
 8105fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8105fe2:	2301      	movs	r3, #1
 8105fe4:	e2cd      	b.n	8106582 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	4a76      	ldr	r2, [pc, #472]	@ (81061c4 <HAL_DMA_Abort+0x214>)
 8105fec:	4293      	cmp	r3, r2
 8105fee:	d04a      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	4a74      	ldr	r2, [pc, #464]	@ (81061c8 <HAL_DMA_Abort+0x218>)
 8105ff6:	4293      	cmp	r3, r2
 8105ff8:	d045      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	4a73      	ldr	r2, [pc, #460]	@ (81061cc <HAL_DMA_Abort+0x21c>)
 8106000:	4293      	cmp	r3, r2
 8106002:	d040      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	681b      	ldr	r3, [r3, #0]
 8106008:	4a71      	ldr	r2, [pc, #452]	@ (81061d0 <HAL_DMA_Abort+0x220>)
 810600a:	4293      	cmp	r3, r2
 810600c:	d03b      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	681b      	ldr	r3, [r3, #0]
 8106012:	4a70      	ldr	r2, [pc, #448]	@ (81061d4 <HAL_DMA_Abort+0x224>)
 8106014:	4293      	cmp	r3, r2
 8106016:	d036      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	4a6e      	ldr	r2, [pc, #440]	@ (81061d8 <HAL_DMA_Abort+0x228>)
 810601e:	4293      	cmp	r3, r2
 8106020:	d031      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8106022:	687b      	ldr	r3, [r7, #4]
 8106024:	681b      	ldr	r3, [r3, #0]
 8106026:	4a6d      	ldr	r2, [pc, #436]	@ (81061dc <HAL_DMA_Abort+0x22c>)
 8106028:	4293      	cmp	r3, r2
 810602a:	d02c      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	4a6b      	ldr	r2, [pc, #428]	@ (81061e0 <HAL_DMA_Abort+0x230>)
 8106032:	4293      	cmp	r3, r2
 8106034:	d027      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	4a6a      	ldr	r2, [pc, #424]	@ (81061e4 <HAL_DMA_Abort+0x234>)
 810603c:	4293      	cmp	r3, r2
 810603e:	d022      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	681b      	ldr	r3, [r3, #0]
 8106044:	4a68      	ldr	r2, [pc, #416]	@ (81061e8 <HAL_DMA_Abort+0x238>)
 8106046:	4293      	cmp	r3, r2
 8106048:	d01d      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 810604a:	687b      	ldr	r3, [r7, #4]
 810604c:	681b      	ldr	r3, [r3, #0]
 810604e:	4a67      	ldr	r2, [pc, #412]	@ (81061ec <HAL_DMA_Abort+0x23c>)
 8106050:	4293      	cmp	r3, r2
 8106052:	d018      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	4a65      	ldr	r2, [pc, #404]	@ (81061f0 <HAL_DMA_Abort+0x240>)
 810605a:	4293      	cmp	r3, r2
 810605c:	d013      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	681b      	ldr	r3, [r3, #0]
 8106062:	4a64      	ldr	r2, [pc, #400]	@ (81061f4 <HAL_DMA_Abort+0x244>)
 8106064:	4293      	cmp	r3, r2
 8106066:	d00e      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	4a62      	ldr	r2, [pc, #392]	@ (81061f8 <HAL_DMA_Abort+0x248>)
 810606e:	4293      	cmp	r3, r2
 8106070:	d009      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	4a61      	ldr	r2, [pc, #388]	@ (81061fc <HAL_DMA_Abort+0x24c>)
 8106078:	4293      	cmp	r3, r2
 810607a:	d004      	beq.n	8106086 <HAL_DMA_Abort+0xd6>
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	681b      	ldr	r3, [r3, #0]
 8106080:	4a5f      	ldr	r2, [pc, #380]	@ (8106200 <HAL_DMA_Abort+0x250>)
 8106082:	4293      	cmp	r3, r2
 8106084:	d101      	bne.n	810608a <HAL_DMA_Abort+0xda>
 8106086:	2301      	movs	r3, #1
 8106088:	e000      	b.n	810608c <HAL_DMA_Abort+0xdc>
 810608a:	2300      	movs	r3, #0
 810608c:	2b00      	cmp	r3, #0
 810608e:	d013      	beq.n	81060b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	681a      	ldr	r2, [r3, #0]
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	681b      	ldr	r3, [r3, #0]
 810609a:	f022 021e 	bic.w	r2, r2, #30
 810609e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	695a      	ldr	r2, [r3, #20]
 81060a6:	687b      	ldr	r3, [r7, #4]
 81060a8:	681b      	ldr	r3, [r3, #0]
 81060aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81060ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81060b0:	687b      	ldr	r3, [r7, #4]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	617b      	str	r3, [r7, #20]
 81060b6:	e00a      	b.n	81060ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	681b      	ldr	r3, [r3, #0]
 81060bc:	681a      	ldr	r2, [r3, #0]
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	681b      	ldr	r3, [r3, #0]
 81060c2:	f022 020e 	bic.w	r2, r2, #14
 81060c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	681b      	ldr	r3, [r3, #0]
 81060cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	681b      	ldr	r3, [r3, #0]
 81060d2:	4a3c      	ldr	r2, [pc, #240]	@ (81061c4 <HAL_DMA_Abort+0x214>)
 81060d4:	4293      	cmp	r3, r2
 81060d6:	d072      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	681b      	ldr	r3, [r3, #0]
 81060dc:	4a3a      	ldr	r2, [pc, #232]	@ (81061c8 <HAL_DMA_Abort+0x218>)
 81060de:	4293      	cmp	r3, r2
 81060e0:	d06d      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 81060e2:	687b      	ldr	r3, [r7, #4]
 81060e4:	681b      	ldr	r3, [r3, #0]
 81060e6:	4a39      	ldr	r2, [pc, #228]	@ (81061cc <HAL_DMA_Abort+0x21c>)
 81060e8:	4293      	cmp	r3, r2
 81060ea:	d068      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	681b      	ldr	r3, [r3, #0]
 81060f0:	4a37      	ldr	r2, [pc, #220]	@ (81061d0 <HAL_DMA_Abort+0x220>)
 81060f2:	4293      	cmp	r3, r2
 81060f4:	d063      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	4a36      	ldr	r2, [pc, #216]	@ (81061d4 <HAL_DMA_Abort+0x224>)
 81060fc:	4293      	cmp	r3, r2
 81060fe:	d05e      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	681b      	ldr	r3, [r3, #0]
 8106104:	4a34      	ldr	r2, [pc, #208]	@ (81061d8 <HAL_DMA_Abort+0x228>)
 8106106:	4293      	cmp	r3, r2
 8106108:	d059      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 810610a:	687b      	ldr	r3, [r7, #4]
 810610c:	681b      	ldr	r3, [r3, #0]
 810610e:	4a33      	ldr	r2, [pc, #204]	@ (81061dc <HAL_DMA_Abort+0x22c>)
 8106110:	4293      	cmp	r3, r2
 8106112:	d054      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	681b      	ldr	r3, [r3, #0]
 8106118:	4a31      	ldr	r2, [pc, #196]	@ (81061e0 <HAL_DMA_Abort+0x230>)
 810611a:	4293      	cmp	r3, r2
 810611c:	d04f      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	681b      	ldr	r3, [r3, #0]
 8106122:	4a30      	ldr	r2, [pc, #192]	@ (81061e4 <HAL_DMA_Abort+0x234>)
 8106124:	4293      	cmp	r3, r2
 8106126:	d04a      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106128:	687b      	ldr	r3, [r7, #4]
 810612a:	681b      	ldr	r3, [r3, #0]
 810612c:	4a2e      	ldr	r2, [pc, #184]	@ (81061e8 <HAL_DMA_Abort+0x238>)
 810612e:	4293      	cmp	r3, r2
 8106130:	d045      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	681b      	ldr	r3, [r3, #0]
 8106136:	4a2d      	ldr	r2, [pc, #180]	@ (81061ec <HAL_DMA_Abort+0x23c>)
 8106138:	4293      	cmp	r3, r2
 810613a:	d040      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	4a2b      	ldr	r2, [pc, #172]	@ (81061f0 <HAL_DMA_Abort+0x240>)
 8106142:	4293      	cmp	r3, r2
 8106144:	d03b      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	4a2a      	ldr	r2, [pc, #168]	@ (81061f4 <HAL_DMA_Abort+0x244>)
 810614c:	4293      	cmp	r3, r2
 810614e:	d036      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	681b      	ldr	r3, [r3, #0]
 8106154:	4a28      	ldr	r2, [pc, #160]	@ (81061f8 <HAL_DMA_Abort+0x248>)
 8106156:	4293      	cmp	r3, r2
 8106158:	d031      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	4a27      	ldr	r2, [pc, #156]	@ (81061fc <HAL_DMA_Abort+0x24c>)
 8106160:	4293      	cmp	r3, r2
 8106162:	d02c      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	4a25      	ldr	r2, [pc, #148]	@ (8106200 <HAL_DMA_Abort+0x250>)
 810616a:	4293      	cmp	r3, r2
 810616c:	d027      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	681b      	ldr	r3, [r3, #0]
 8106172:	4a24      	ldr	r2, [pc, #144]	@ (8106204 <HAL_DMA_Abort+0x254>)
 8106174:	4293      	cmp	r3, r2
 8106176:	d022      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106178:	687b      	ldr	r3, [r7, #4]
 810617a:	681b      	ldr	r3, [r3, #0]
 810617c:	4a22      	ldr	r2, [pc, #136]	@ (8106208 <HAL_DMA_Abort+0x258>)
 810617e:	4293      	cmp	r3, r2
 8106180:	d01d      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	681b      	ldr	r3, [r3, #0]
 8106186:	4a21      	ldr	r2, [pc, #132]	@ (810620c <HAL_DMA_Abort+0x25c>)
 8106188:	4293      	cmp	r3, r2
 810618a:	d018      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	681b      	ldr	r3, [r3, #0]
 8106190:	4a1f      	ldr	r2, [pc, #124]	@ (8106210 <HAL_DMA_Abort+0x260>)
 8106192:	4293      	cmp	r3, r2
 8106194:	d013      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	681b      	ldr	r3, [r3, #0]
 810619a:	4a1e      	ldr	r2, [pc, #120]	@ (8106214 <HAL_DMA_Abort+0x264>)
 810619c:	4293      	cmp	r3, r2
 810619e:	d00e      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 81061a0:	687b      	ldr	r3, [r7, #4]
 81061a2:	681b      	ldr	r3, [r3, #0]
 81061a4:	4a1c      	ldr	r2, [pc, #112]	@ (8106218 <HAL_DMA_Abort+0x268>)
 81061a6:	4293      	cmp	r3, r2
 81061a8:	d009      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	4a1b      	ldr	r2, [pc, #108]	@ (810621c <HAL_DMA_Abort+0x26c>)
 81061b0:	4293      	cmp	r3, r2
 81061b2:	d004      	beq.n	81061be <HAL_DMA_Abort+0x20e>
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	681b      	ldr	r3, [r3, #0]
 81061b8:	4a19      	ldr	r2, [pc, #100]	@ (8106220 <HAL_DMA_Abort+0x270>)
 81061ba:	4293      	cmp	r3, r2
 81061bc:	d132      	bne.n	8106224 <HAL_DMA_Abort+0x274>
 81061be:	2301      	movs	r3, #1
 81061c0:	e031      	b.n	8106226 <HAL_DMA_Abort+0x276>
 81061c2:	bf00      	nop
 81061c4:	40020010 	.word	0x40020010
 81061c8:	40020028 	.word	0x40020028
 81061cc:	40020040 	.word	0x40020040
 81061d0:	40020058 	.word	0x40020058
 81061d4:	40020070 	.word	0x40020070
 81061d8:	40020088 	.word	0x40020088
 81061dc:	400200a0 	.word	0x400200a0
 81061e0:	400200b8 	.word	0x400200b8
 81061e4:	40020410 	.word	0x40020410
 81061e8:	40020428 	.word	0x40020428
 81061ec:	40020440 	.word	0x40020440
 81061f0:	40020458 	.word	0x40020458
 81061f4:	40020470 	.word	0x40020470
 81061f8:	40020488 	.word	0x40020488
 81061fc:	400204a0 	.word	0x400204a0
 8106200:	400204b8 	.word	0x400204b8
 8106204:	58025408 	.word	0x58025408
 8106208:	5802541c 	.word	0x5802541c
 810620c:	58025430 	.word	0x58025430
 8106210:	58025444 	.word	0x58025444
 8106214:	58025458 	.word	0x58025458
 8106218:	5802546c 	.word	0x5802546c
 810621c:	58025480 	.word	0x58025480
 8106220:	58025494 	.word	0x58025494
 8106224:	2300      	movs	r3, #0
 8106226:	2b00      	cmp	r3, #0
 8106228:	d007      	beq.n	810623a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810622e:	681a      	ldr	r2, [r3, #0]
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106234:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106238:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810623a:	687b      	ldr	r3, [r7, #4]
 810623c:	681b      	ldr	r3, [r3, #0]
 810623e:	4a6d      	ldr	r2, [pc, #436]	@ (81063f4 <HAL_DMA_Abort+0x444>)
 8106240:	4293      	cmp	r3, r2
 8106242:	d04a      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	681b      	ldr	r3, [r3, #0]
 8106248:	4a6b      	ldr	r2, [pc, #428]	@ (81063f8 <HAL_DMA_Abort+0x448>)
 810624a:	4293      	cmp	r3, r2
 810624c:	d045      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 810624e:	687b      	ldr	r3, [r7, #4]
 8106250:	681b      	ldr	r3, [r3, #0]
 8106252:	4a6a      	ldr	r2, [pc, #424]	@ (81063fc <HAL_DMA_Abort+0x44c>)
 8106254:	4293      	cmp	r3, r2
 8106256:	d040      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	681b      	ldr	r3, [r3, #0]
 810625c:	4a68      	ldr	r2, [pc, #416]	@ (8106400 <HAL_DMA_Abort+0x450>)
 810625e:	4293      	cmp	r3, r2
 8106260:	d03b      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	681b      	ldr	r3, [r3, #0]
 8106266:	4a67      	ldr	r2, [pc, #412]	@ (8106404 <HAL_DMA_Abort+0x454>)
 8106268:	4293      	cmp	r3, r2
 810626a:	d036      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 810626c:	687b      	ldr	r3, [r7, #4]
 810626e:	681b      	ldr	r3, [r3, #0]
 8106270:	4a65      	ldr	r2, [pc, #404]	@ (8106408 <HAL_DMA_Abort+0x458>)
 8106272:	4293      	cmp	r3, r2
 8106274:	d031      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	681b      	ldr	r3, [r3, #0]
 810627a:	4a64      	ldr	r2, [pc, #400]	@ (810640c <HAL_DMA_Abort+0x45c>)
 810627c:	4293      	cmp	r3, r2
 810627e:	d02c      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 8106280:	687b      	ldr	r3, [r7, #4]
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	4a62      	ldr	r2, [pc, #392]	@ (8106410 <HAL_DMA_Abort+0x460>)
 8106286:	4293      	cmp	r3, r2
 8106288:	d027      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	681b      	ldr	r3, [r3, #0]
 810628e:	4a61      	ldr	r2, [pc, #388]	@ (8106414 <HAL_DMA_Abort+0x464>)
 8106290:	4293      	cmp	r3, r2
 8106292:	d022      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	681b      	ldr	r3, [r3, #0]
 8106298:	4a5f      	ldr	r2, [pc, #380]	@ (8106418 <HAL_DMA_Abort+0x468>)
 810629a:	4293      	cmp	r3, r2
 810629c:	d01d      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 810629e:	687b      	ldr	r3, [r7, #4]
 81062a0:	681b      	ldr	r3, [r3, #0]
 81062a2:	4a5e      	ldr	r2, [pc, #376]	@ (810641c <HAL_DMA_Abort+0x46c>)
 81062a4:	4293      	cmp	r3, r2
 81062a6:	d018      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 81062a8:	687b      	ldr	r3, [r7, #4]
 81062aa:	681b      	ldr	r3, [r3, #0]
 81062ac:	4a5c      	ldr	r2, [pc, #368]	@ (8106420 <HAL_DMA_Abort+0x470>)
 81062ae:	4293      	cmp	r3, r2
 81062b0:	d013      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 81062b2:	687b      	ldr	r3, [r7, #4]
 81062b4:	681b      	ldr	r3, [r3, #0]
 81062b6:	4a5b      	ldr	r2, [pc, #364]	@ (8106424 <HAL_DMA_Abort+0x474>)
 81062b8:	4293      	cmp	r3, r2
 81062ba:	d00e      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	681b      	ldr	r3, [r3, #0]
 81062c0:	4a59      	ldr	r2, [pc, #356]	@ (8106428 <HAL_DMA_Abort+0x478>)
 81062c2:	4293      	cmp	r3, r2
 81062c4:	d009      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	681b      	ldr	r3, [r3, #0]
 81062ca:	4a58      	ldr	r2, [pc, #352]	@ (810642c <HAL_DMA_Abort+0x47c>)
 81062cc:	4293      	cmp	r3, r2
 81062ce:	d004      	beq.n	81062da <HAL_DMA_Abort+0x32a>
 81062d0:	687b      	ldr	r3, [r7, #4]
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	4a56      	ldr	r2, [pc, #344]	@ (8106430 <HAL_DMA_Abort+0x480>)
 81062d6:	4293      	cmp	r3, r2
 81062d8:	d108      	bne.n	81062ec <HAL_DMA_Abort+0x33c>
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	681b      	ldr	r3, [r3, #0]
 81062de:	681a      	ldr	r2, [r3, #0]
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	681b      	ldr	r3, [r3, #0]
 81062e4:	f022 0201 	bic.w	r2, r2, #1
 81062e8:	601a      	str	r2, [r3, #0]
 81062ea:	e007      	b.n	81062fc <HAL_DMA_Abort+0x34c>
 81062ec:	687b      	ldr	r3, [r7, #4]
 81062ee:	681b      	ldr	r3, [r3, #0]
 81062f0:	681a      	ldr	r2, [r3, #0]
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	681b      	ldr	r3, [r3, #0]
 81062f6:	f022 0201 	bic.w	r2, r2, #1
 81062fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81062fc:	e013      	b.n	8106326 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81062fe:	f7fe f80f 	bl	8104320 <HAL_GetTick>
 8106302:	4602      	mov	r2, r0
 8106304:	693b      	ldr	r3, [r7, #16]
 8106306:	1ad3      	subs	r3, r2, r3
 8106308:	2b05      	cmp	r3, #5
 810630a:	d90c      	bls.n	8106326 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	2220      	movs	r2, #32
 8106310:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	2203      	movs	r2, #3
 8106316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	2200      	movs	r2, #0
 810631e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8106322:	2301      	movs	r3, #1
 8106324:	e12d      	b.n	8106582 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8106326:	697b      	ldr	r3, [r7, #20]
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	f003 0301 	and.w	r3, r3, #1
 810632e:	2b00      	cmp	r3, #0
 8106330:	d1e5      	bne.n	81062fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	681b      	ldr	r3, [r3, #0]
 8106336:	4a2f      	ldr	r2, [pc, #188]	@ (81063f4 <HAL_DMA_Abort+0x444>)
 8106338:	4293      	cmp	r3, r2
 810633a:	d04a      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	681b      	ldr	r3, [r3, #0]
 8106340:	4a2d      	ldr	r2, [pc, #180]	@ (81063f8 <HAL_DMA_Abort+0x448>)
 8106342:	4293      	cmp	r3, r2
 8106344:	d045      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 8106346:	687b      	ldr	r3, [r7, #4]
 8106348:	681b      	ldr	r3, [r3, #0]
 810634a:	4a2c      	ldr	r2, [pc, #176]	@ (81063fc <HAL_DMA_Abort+0x44c>)
 810634c:	4293      	cmp	r3, r2
 810634e:	d040      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	681b      	ldr	r3, [r3, #0]
 8106354:	4a2a      	ldr	r2, [pc, #168]	@ (8106400 <HAL_DMA_Abort+0x450>)
 8106356:	4293      	cmp	r3, r2
 8106358:	d03b      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	681b      	ldr	r3, [r3, #0]
 810635e:	4a29      	ldr	r2, [pc, #164]	@ (8106404 <HAL_DMA_Abort+0x454>)
 8106360:	4293      	cmp	r3, r2
 8106362:	d036      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	681b      	ldr	r3, [r3, #0]
 8106368:	4a27      	ldr	r2, [pc, #156]	@ (8106408 <HAL_DMA_Abort+0x458>)
 810636a:	4293      	cmp	r3, r2
 810636c:	d031      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	4a26      	ldr	r2, [pc, #152]	@ (810640c <HAL_DMA_Abort+0x45c>)
 8106374:	4293      	cmp	r3, r2
 8106376:	d02c      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	4a24      	ldr	r2, [pc, #144]	@ (8106410 <HAL_DMA_Abort+0x460>)
 810637e:	4293      	cmp	r3, r2
 8106380:	d027      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	681b      	ldr	r3, [r3, #0]
 8106386:	4a23      	ldr	r2, [pc, #140]	@ (8106414 <HAL_DMA_Abort+0x464>)
 8106388:	4293      	cmp	r3, r2
 810638a:	d022      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	4a21      	ldr	r2, [pc, #132]	@ (8106418 <HAL_DMA_Abort+0x468>)
 8106392:	4293      	cmp	r3, r2
 8106394:	d01d      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 8106396:	687b      	ldr	r3, [r7, #4]
 8106398:	681b      	ldr	r3, [r3, #0]
 810639a:	4a20      	ldr	r2, [pc, #128]	@ (810641c <HAL_DMA_Abort+0x46c>)
 810639c:	4293      	cmp	r3, r2
 810639e:	d018      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	681b      	ldr	r3, [r3, #0]
 81063a4:	4a1e      	ldr	r2, [pc, #120]	@ (8106420 <HAL_DMA_Abort+0x470>)
 81063a6:	4293      	cmp	r3, r2
 81063a8:	d013      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	681b      	ldr	r3, [r3, #0]
 81063ae:	4a1d      	ldr	r2, [pc, #116]	@ (8106424 <HAL_DMA_Abort+0x474>)
 81063b0:	4293      	cmp	r3, r2
 81063b2:	d00e      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	4a1b      	ldr	r2, [pc, #108]	@ (8106428 <HAL_DMA_Abort+0x478>)
 81063ba:	4293      	cmp	r3, r2
 81063bc:	d009      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	681b      	ldr	r3, [r3, #0]
 81063c2:	4a1a      	ldr	r2, [pc, #104]	@ (810642c <HAL_DMA_Abort+0x47c>)
 81063c4:	4293      	cmp	r3, r2
 81063c6:	d004      	beq.n	81063d2 <HAL_DMA_Abort+0x422>
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	681b      	ldr	r3, [r3, #0]
 81063cc:	4a18      	ldr	r2, [pc, #96]	@ (8106430 <HAL_DMA_Abort+0x480>)
 81063ce:	4293      	cmp	r3, r2
 81063d0:	d101      	bne.n	81063d6 <HAL_DMA_Abort+0x426>
 81063d2:	2301      	movs	r3, #1
 81063d4:	e000      	b.n	81063d8 <HAL_DMA_Abort+0x428>
 81063d6:	2300      	movs	r3, #0
 81063d8:	2b00      	cmp	r3, #0
 81063da:	d02b      	beq.n	8106434 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81063e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81063e6:	f003 031f 	and.w	r3, r3, #31
 81063ea:	223f      	movs	r2, #63	@ 0x3f
 81063ec:	409a      	lsls	r2, r3
 81063ee:	68bb      	ldr	r3, [r7, #8]
 81063f0:	609a      	str	r2, [r3, #8]
 81063f2:	e02a      	b.n	810644a <HAL_DMA_Abort+0x49a>
 81063f4:	40020010 	.word	0x40020010
 81063f8:	40020028 	.word	0x40020028
 81063fc:	40020040 	.word	0x40020040
 8106400:	40020058 	.word	0x40020058
 8106404:	40020070 	.word	0x40020070
 8106408:	40020088 	.word	0x40020088
 810640c:	400200a0 	.word	0x400200a0
 8106410:	400200b8 	.word	0x400200b8
 8106414:	40020410 	.word	0x40020410
 8106418:	40020428 	.word	0x40020428
 810641c:	40020440 	.word	0x40020440
 8106420:	40020458 	.word	0x40020458
 8106424:	40020470 	.word	0x40020470
 8106428:	40020488 	.word	0x40020488
 810642c:	400204a0 	.word	0x400204a0
 8106430:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106438:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810643e:	f003 031f 	and.w	r3, r3, #31
 8106442:	2201      	movs	r2, #1
 8106444:	409a      	lsls	r2, r3
 8106446:	68fb      	ldr	r3, [r7, #12]
 8106448:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	681b      	ldr	r3, [r3, #0]
 810644e:	4a4f      	ldr	r2, [pc, #316]	@ (810658c <HAL_DMA_Abort+0x5dc>)
 8106450:	4293      	cmp	r3, r2
 8106452:	d072      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106454:	687b      	ldr	r3, [r7, #4]
 8106456:	681b      	ldr	r3, [r3, #0]
 8106458:	4a4d      	ldr	r2, [pc, #308]	@ (8106590 <HAL_DMA_Abort+0x5e0>)
 810645a:	4293      	cmp	r3, r2
 810645c:	d06d      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	681b      	ldr	r3, [r3, #0]
 8106462:	4a4c      	ldr	r2, [pc, #304]	@ (8106594 <HAL_DMA_Abort+0x5e4>)
 8106464:	4293      	cmp	r3, r2
 8106466:	d068      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	681b      	ldr	r3, [r3, #0]
 810646c:	4a4a      	ldr	r2, [pc, #296]	@ (8106598 <HAL_DMA_Abort+0x5e8>)
 810646e:	4293      	cmp	r3, r2
 8106470:	d063      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	681b      	ldr	r3, [r3, #0]
 8106476:	4a49      	ldr	r2, [pc, #292]	@ (810659c <HAL_DMA_Abort+0x5ec>)
 8106478:	4293      	cmp	r3, r2
 810647a:	d05e      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	681b      	ldr	r3, [r3, #0]
 8106480:	4a47      	ldr	r2, [pc, #284]	@ (81065a0 <HAL_DMA_Abort+0x5f0>)
 8106482:	4293      	cmp	r3, r2
 8106484:	d059      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	681b      	ldr	r3, [r3, #0]
 810648a:	4a46      	ldr	r2, [pc, #280]	@ (81065a4 <HAL_DMA_Abort+0x5f4>)
 810648c:	4293      	cmp	r3, r2
 810648e:	d054      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	681b      	ldr	r3, [r3, #0]
 8106494:	4a44      	ldr	r2, [pc, #272]	@ (81065a8 <HAL_DMA_Abort+0x5f8>)
 8106496:	4293      	cmp	r3, r2
 8106498:	d04f      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	4a43      	ldr	r2, [pc, #268]	@ (81065ac <HAL_DMA_Abort+0x5fc>)
 81064a0:	4293      	cmp	r3, r2
 81064a2:	d04a      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	4a41      	ldr	r2, [pc, #260]	@ (81065b0 <HAL_DMA_Abort+0x600>)
 81064aa:	4293      	cmp	r3, r2
 81064ac:	d045      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	681b      	ldr	r3, [r3, #0]
 81064b2:	4a40      	ldr	r2, [pc, #256]	@ (81065b4 <HAL_DMA_Abort+0x604>)
 81064b4:	4293      	cmp	r3, r2
 81064b6:	d040      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	681b      	ldr	r3, [r3, #0]
 81064bc:	4a3e      	ldr	r2, [pc, #248]	@ (81065b8 <HAL_DMA_Abort+0x608>)
 81064be:	4293      	cmp	r3, r2
 81064c0:	d03b      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	681b      	ldr	r3, [r3, #0]
 81064c6:	4a3d      	ldr	r2, [pc, #244]	@ (81065bc <HAL_DMA_Abort+0x60c>)
 81064c8:	4293      	cmp	r3, r2
 81064ca:	d036      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	681b      	ldr	r3, [r3, #0]
 81064d0:	4a3b      	ldr	r2, [pc, #236]	@ (81065c0 <HAL_DMA_Abort+0x610>)
 81064d2:	4293      	cmp	r3, r2
 81064d4:	d031      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064d6:	687b      	ldr	r3, [r7, #4]
 81064d8:	681b      	ldr	r3, [r3, #0]
 81064da:	4a3a      	ldr	r2, [pc, #232]	@ (81065c4 <HAL_DMA_Abort+0x614>)
 81064dc:	4293      	cmp	r3, r2
 81064de:	d02c      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064e0:	687b      	ldr	r3, [r7, #4]
 81064e2:	681b      	ldr	r3, [r3, #0]
 81064e4:	4a38      	ldr	r2, [pc, #224]	@ (81065c8 <HAL_DMA_Abort+0x618>)
 81064e6:	4293      	cmp	r3, r2
 81064e8:	d027      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	681b      	ldr	r3, [r3, #0]
 81064ee:	4a37      	ldr	r2, [pc, #220]	@ (81065cc <HAL_DMA_Abort+0x61c>)
 81064f0:	4293      	cmp	r3, r2
 81064f2:	d022      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	681b      	ldr	r3, [r3, #0]
 81064f8:	4a35      	ldr	r2, [pc, #212]	@ (81065d0 <HAL_DMA_Abort+0x620>)
 81064fa:	4293      	cmp	r3, r2
 81064fc:	d01d      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 81064fe:	687b      	ldr	r3, [r7, #4]
 8106500:	681b      	ldr	r3, [r3, #0]
 8106502:	4a34      	ldr	r2, [pc, #208]	@ (81065d4 <HAL_DMA_Abort+0x624>)
 8106504:	4293      	cmp	r3, r2
 8106506:	d018      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	681b      	ldr	r3, [r3, #0]
 810650c:	4a32      	ldr	r2, [pc, #200]	@ (81065d8 <HAL_DMA_Abort+0x628>)
 810650e:	4293      	cmp	r3, r2
 8106510:	d013      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	681b      	ldr	r3, [r3, #0]
 8106516:	4a31      	ldr	r2, [pc, #196]	@ (81065dc <HAL_DMA_Abort+0x62c>)
 8106518:	4293      	cmp	r3, r2
 810651a:	d00e      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	681b      	ldr	r3, [r3, #0]
 8106520:	4a2f      	ldr	r2, [pc, #188]	@ (81065e0 <HAL_DMA_Abort+0x630>)
 8106522:	4293      	cmp	r3, r2
 8106524:	d009      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	681b      	ldr	r3, [r3, #0]
 810652a:	4a2e      	ldr	r2, [pc, #184]	@ (81065e4 <HAL_DMA_Abort+0x634>)
 810652c:	4293      	cmp	r3, r2
 810652e:	d004      	beq.n	810653a <HAL_DMA_Abort+0x58a>
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	4a2c      	ldr	r2, [pc, #176]	@ (81065e8 <HAL_DMA_Abort+0x638>)
 8106536:	4293      	cmp	r3, r2
 8106538:	d101      	bne.n	810653e <HAL_DMA_Abort+0x58e>
 810653a:	2301      	movs	r3, #1
 810653c:	e000      	b.n	8106540 <HAL_DMA_Abort+0x590>
 810653e:	2300      	movs	r3, #0
 8106540:	2b00      	cmp	r3, #0
 8106542:	d015      	beq.n	8106570 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106548:	687a      	ldr	r2, [r7, #4]
 810654a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 810654c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 810654e:	687b      	ldr	r3, [r7, #4]
 8106550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106552:	2b00      	cmp	r3, #0
 8106554:	d00c      	beq.n	8106570 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810655a:	681a      	ldr	r2, [r3, #0]
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106564:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106566:	687b      	ldr	r3, [r7, #4]
 8106568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810656a:	687a      	ldr	r2, [r7, #4]
 810656c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810656e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	2201      	movs	r2, #1
 8106574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	2200      	movs	r2, #0
 810657c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8106580:	2300      	movs	r3, #0
}
 8106582:	4618      	mov	r0, r3
 8106584:	3718      	adds	r7, #24
 8106586:	46bd      	mov	sp, r7
 8106588:	bd80      	pop	{r7, pc}
 810658a:	bf00      	nop
 810658c:	40020010 	.word	0x40020010
 8106590:	40020028 	.word	0x40020028
 8106594:	40020040 	.word	0x40020040
 8106598:	40020058 	.word	0x40020058
 810659c:	40020070 	.word	0x40020070
 81065a0:	40020088 	.word	0x40020088
 81065a4:	400200a0 	.word	0x400200a0
 81065a8:	400200b8 	.word	0x400200b8
 81065ac:	40020410 	.word	0x40020410
 81065b0:	40020428 	.word	0x40020428
 81065b4:	40020440 	.word	0x40020440
 81065b8:	40020458 	.word	0x40020458
 81065bc:	40020470 	.word	0x40020470
 81065c0:	40020488 	.word	0x40020488
 81065c4:	400204a0 	.word	0x400204a0
 81065c8:	400204b8 	.word	0x400204b8
 81065cc:	58025408 	.word	0x58025408
 81065d0:	5802541c 	.word	0x5802541c
 81065d4:	58025430 	.word	0x58025430
 81065d8:	58025444 	.word	0x58025444
 81065dc:	58025458 	.word	0x58025458
 81065e0:	5802546c 	.word	0x5802546c
 81065e4:	58025480 	.word	0x58025480
 81065e8:	58025494 	.word	0x58025494

081065ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81065ec:	b580      	push	{r7, lr}
 81065ee:	b084      	sub	sp, #16
 81065f0:	af00      	add	r7, sp, #0
 81065f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	d101      	bne.n	81065fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81065fa:	2301      	movs	r3, #1
 81065fc:	e237      	b.n	8106a6e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8106604:	b2db      	uxtb	r3, r3
 8106606:	2b02      	cmp	r3, #2
 8106608:	d004      	beq.n	8106614 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	2280      	movs	r2, #128	@ 0x80
 810660e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8106610:	2301      	movs	r3, #1
 8106612:	e22c      	b.n	8106a6e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	4a5c      	ldr	r2, [pc, #368]	@ (810678c <HAL_DMA_Abort_IT+0x1a0>)
 810661a:	4293      	cmp	r3, r2
 810661c:	d04a      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	4a5b      	ldr	r2, [pc, #364]	@ (8106790 <HAL_DMA_Abort_IT+0x1a4>)
 8106624:	4293      	cmp	r3, r2
 8106626:	d045      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	4a59      	ldr	r2, [pc, #356]	@ (8106794 <HAL_DMA_Abort_IT+0x1a8>)
 810662e:	4293      	cmp	r3, r2
 8106630:	d040      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	4a58      	ldr	r2, [pc, #352]	@ (8106798 <HAL_DMA_Abort_IT+0x1ac>)
 8106638:	4293      	cmp	r3, r2
 810663a:	d03b      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	4a56      	ldr	r2, [pc, #344]	@ (810679c <HAL_DMA_Abort_IT+0x1b0>)
 8106642:	4293      	cmp	r3, r2
 8106644:	d036      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	681b      	ldr	r3, [r3, #0]
 810664a:	4a55      	ldr	r2, [pc, #340]	@ (81067a0 <HAL_DMA_Abort_IT+0x1b4>)
 810664c:	4293      	cmp	r3, r2
 810664e:	d031      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	4a53      	ldr	r2, [pc, #332]	@ (81067a4 <HAL_DMA_Abort_IT+0x1b8>)
 8106656:	4293      	cmp	r3, r2
 8106658:	d02c      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	681b      	ldr	r3, [r3, #0]
 810665e:	4a52      	ldr	r2, [pc, #328]	@ (81067a8 <HAL_DMA_Abort_IT+0x1bc>)
 8106660:	4293      	cmp	r3, r2
 8106662:	d027      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	681b      	ldr	r3, [r3, #0]
 8106668:	4a50      	ldr	r2, [pc, #320]	@ (81067ac <HAL_DMA_Abort_IT+0x1c0>)
 810666a:	4293      	cmp	r3, r2
 810666c:	d022      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 810666e:	687b      	ldr	r3, [r7, #4]
 8106670:	681b      	ldr	r3, [r3, #0]
 8106672:	4a4f      	ldr	r2, [pc, #316]	@ (81067b0 <HAL_DMA_Abort_IT+0x1c4>)
 8106674:	4293      	cmp	r3, r2
 8106676:	d01d      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	681b      	ldr	r3, [r3, #0]
 810667c:	4a4d      	ldr	r2, [pc, #308]	@ (81067b4 <HAL_DMA_Abort_IT+0x1c8>)
 810667e:	4293      	cmp	r3, r2
 8106680:	d018      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	681b      	ldr	r3, [r3, #0]
 8106686:	4a4c      	ldr	r2, [pc, #304]	@ (81067b8 <HAL_DMA_Abort_IT+0x1cc>)
 8106688:	4293      	cmp	r3, r2
 810668a:	d013      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	681b      	ldr	r3, [r3, #0]
 8106690:	4a4a      	ldr	r2, [pc, #296]	@ (81067bc <HAL_DMA_Abort_IT+0x1d0>)
 8106692:	4293      	cmp	r3, r2
 8106694:	d00e      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 8106696:	687b      	ldr	r3, [r7, #4]
 8106698:	681b      	ldr	r3, [r3, #0]
 810669a:	4a49      	ldr	r2, [pc, #292]	@ (81067c0 <HAL_DMA_Abort_IT+0x1d4>)
 810669c:	4293      	cmp	r3, r2
 810669e:	d009      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	681b      	ldr	r3, [r3, #0]
 81066a4:	4a47      	ldr	r2, [pc, #284]	@ (81067c4 <HAL_DMA_Abort_IT+0x1d8>)
 81066a6:	4293      	cmp	r3, r2
 81066a8:	d004      	beq.n	81066b4 <HAL_DMA_Abort_IT+0xc8>
 81066aa:	687b      	ldr	r3, [r7, #4]
 81066ac:	681b      	ldr	r3, [r3, #0]
 81066ae:	4a46      	ldr	r2, [pc, #280]	@ (81067c8 <HAL_DMA_Abort_IT+0x1dc>)
 81066b0:	4293      	cmp	r3, r2
 81066b2:	d101      	bne.n	81066b8 <HAL_DMA_Abort_IT+0xcc>
 81066b4:	2301      	movs	r3, #1
 81066b6:	e000      	b.n	81066ba <HAL_DMA_Abort_IT+0xce>
 81066b8:	2300      	movs	r3, #0
 81066ba:	2b00      	cmp	r3, #0
 81066bc:	f000 8086 	beq.w	81067cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	2204      	movs	r2, #4
 81066c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	681b      	ldr	r3, [r3, #0]
 81066cc:	4a2f      	ldr	r2, [pc, #188]	@ (810678c <HAL_DMA_Abort_IT+0x1a0>)
 81066ce:	4293      	cmp	r3, r2
 81066d0:	d04a      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	4a2e      	ldr	r2, [pc, #184]	@ (8106790 <HAL_DMA_Abort_IT+0x1a4>)
 81066d8:	4293      	cmp	r3, r2
 81066da:	d045      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	681b      	ldr	r3, [r3, #0]
 81066e0:	4a2c      	ldr	r2, [pc, #176]	@ (8106794 <HAL_DMA_Abort_IT+0x1a8>)
 81066e2:	4293      	cmp	r3, r2
 81066e4:	d040      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	681b      	ldr	r3, [r3, #0]
 81066ea:	4a2b      	ldr	r2, [pc, #172]	@ (8106798 <HAL_DMA_Abort_IT+0x1ac>)
 81066ec:	4293      	cmp	r3, r2
 81066ee:	d03b      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	681b      	ldr	r3, [r3, #0]
 81066f4:	4a29      	ldr	r2, [pc, #164]	@ (810679c <HAL_DMA_Abort_IT+0x1b0>)
 81066f6:	4293      	cmp	r3, r2
 81066f8:	d036      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 81066fa:	687b      	ldr	r3, [r7, #4]
 81066fc:	681b      	ldr	r3, [r3, #0]
 81066fe:	4a28      	ldr	r2, [pc, #160]	@ (81067a0 <HAL_DMA_Abort_IT+0x1b4>)
 8106700:	4293      	cmp	r3, r2
 8106702:	d031      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	681b      	ldr	r3, [r3, #0]
 8106708:	4a26      	ldr	r2, [pc, #152]	@ (81067a4 <HAL_DMA_Abort_IT+0x1b8>)
 810670a:	4293      	cmp	r3, r2
 810670c:	d02c      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 810670e:	687b      	ldr	r3, [r7, #4]
 8106710:	681b      	ldr	r3, [r3, #0]
 8106712:	4a25      	ldr	r2, [pc, #148]	@ (81067a8 <HAL_DMA_Abort_IT+0x1bc>)
 8106714:	4293      	cmp	r3, r2
 8106716:	d027      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	681b      	ldr	r3, [r3, #0]
 810671c:	4a23      	ldr	r2, [pc, #140]	@ (81067ac <HAL_DMA_Abort_IT+0x1c0>)
 810671e:	4293      	cmp	r3, r2
 8106720:	d022      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 8106722:	687b      	ldr	r3, [r7, #4]
 8106724:	681b      	ldr	r3, [r3, #0]
 8106726:	4a22      	ldr	r2, [pc, #136]	@ (81067b0 <HAL_DMA_Abort_IT+0x1c4>)
 8106728:	4293      	cmp	r3, r2
 810672a:	d01d      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 810672c:	687b      	ldr	r3, [r7, #4]
 810672e:	681b      	ldr	r3, [r3, #0]
 8106730:	4a20      	ldr	r2, [pc, #128]	@ (81067b4 <HAL_DMA_Abort_IT+0x1c8>)
 8106732:	4293      	cmp	r3, r2
 8106734:	d018      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	681b      	ldr	r3, [r3, #0]
 810673a:	4a1f      	ldr	r2, [pc, #124]	@ (81067b8 <HAL_DMA_Abort_IT+0x1cc>)
 810673c:	4293      	cmp	r3, r2
 810673e:	d013      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	681b      	ldr	r3, [r3, #0]
 8106744:	4a1d      	ldr	r2, [pc, #116]	@ (81067bc <HAL_DMA_Abort_IT+0x1d0>)
 8106746:	4293      	cmp	r3, r2
 8106748:	d00e      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	681b      	ldr	r3, [r3, #0]
 810674e:	4a1c      	ldr	r2, [pc, #112]	@ (81067c0 <HAL_DMA_Abort_IT+0x1d4>)
 8106750:	4293      	cmp	r3, r2
 8106752:	d009      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	681b      	ldr	r3, [r3, #0]
 8106758:	4a1a      	ldr	r2, [pc, #104]	@ (81067c4 <HAL_DMA_Abort_IT+0x1d8>)
 810675a:	4293      	cmp	r3, r2
 810675c:	d004      	beq.n	8106768 <HAL_DMA_Abort_IT+0x17c>
 810675e:	687b      	ldr	r3, [r7, #4]
 8106760:	681b      	ldr	r3, [r3, #0]
 8106762:	4a19      	ldr	r2, [pc, #100]	@ (81067c8 <HAL_DMA_Abort_IT+0x1dc>)
 8106764:	4293      	cmp	r3, r2
 8106766:	d108      	bne.n	810677a <HAL_DMA_Abort_IT+0x18e>
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	681b      	ldr	r3, [r3, #0]
 810676c:	681a      	ldr	r2, [r3, #0]
 810676e:	687b      	ldr	r3, [r7, #4]
 8106770:	681b      	ldr	r3, [r3, #0]
 8106772:	f022 0201 	bic.w	r2, r2, #1
 8106776:	601a      	str	r2, [r3, #0]
 8106778:	e178      	b.n	8106a6c <HAL_DMA_Abort_IT+0x480>
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	681b      	ldr	r3, [r3, #0]
 810677e:	681a      	ldr	r2, [r3, #0]
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	f022 0201 	bic.w	r2, r2, #1
 8106788:	601a      	str	r2, [r3, #0]
 810678a:	e16f      	b.n	8106a6c <HAL_DMA_Abort_IT+0x480>
 810678c:	40020010 	.word	0x40020010
 8106790:	40020028 	.word	0x40020028
 8106794:	40020040 	.word	0x40020040
 8106798:	40020058 	.word	0x40020058
 810679c:	40020070 	.word	0x40020070
 81067a0:	40020088 	.word	0x40020088
 81067a4:	400200a0 	.word	0x400200a0
 81067a8:	400200b8 	.word	0x400200b8
 81067ac:	40020410 	.word	0x40020410
 81067b0:	40020428 	.word	0x40020428
 81067b4:	40020440 	.word	0x40020440
 81067b8:	40020458 	.word	0x40020458
 81067bc:	40020470 	.word	0x40020470
 81067c0:	40020488 	.word	0x40020488
 81067c4:	400204a0 	.word	0x400204a0
 81067c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	681b      	ldr	r3, [r3, #0]
 81067d0:	681a      	ldr	r2, [r3, #0]
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	f022 020e 	bic.w	r2, r2, #14
 81067da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81067dc:	687b      	ldr	r3, [r7, #4]
 81067de:	681b      	ldr	r3, [r3, #0]
 81067e0:	4a6c      	ldr	r2, [pc, #432]	@ (8106994 <HAL_DMA_Abort_IT+0x3a8>)
 81067e2:	4293      	cmp	r3, r2
 81067e4:	d04a      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	4a6b      	ldr	r2, [pc, #428]	@ (8106998 <HAL_DMA_Abort_IT+0x3ac>)
 81067ec:	4293      	cmp	r3, r2
 81067ee:	d045      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 81067f0:	687b      	ldr	r3, [r7, #4]
 81067f2:	681b      	ldr	r3, [r3, #0]
 81067f4:	4a69      	ldr	r2, [pc, #420]	@ (810699c <HAL_DMA_Abort_IT+0x3b0>)
 81067f6:	4293      	cmp	r3, r2
 81067f8:	d040      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	681b      	ldr	r3, [r3, #0]
 81067fe:	4a68      	ldr	r2, [pc, #416]	@ (81069a0 <HAL_DMA_Abort_IT+0x3b4>)
 8106800:	4293      	cmp	r3, r2
 8106802:	d03b      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	681b      	ldr	r3, [r3, #0]
 8106808:	4a66      	ldr	r2, [pc, #408]	@ (81069a4 <HAL_DMA_Abort_IT+0x3b8>)
 810680a:	4293      	cmp	r3, r2
 810680c:	d036      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	681b      	ldr	r3, [r3, #0]
 8106812:	4a65      	ldr	r2, [pc, #404]	@ (81069a8 <HAL_DMA_Abort_IT+0x3bc>)
 8106814:	4293      	cmp	r3, r2
 8106816:	d031      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	4a63      	ldr	r2, [pc, #396]	@ (81069ac <HAL_DMA_Abort_IT+0x3c0>)
 810681e:	4293      	cmp	r3, r2
 8106820:	d02c      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	681b      	ldr	r3, [r3, #0]
 8106826:	4a62      	ldr	r2, [pc, #392]	@ (81069b0 <HAL_DMA_Abort_IT+0x3c4>)
 8106828:	4293      	cmp	r3, r2
 810682a:	d027      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	681b      	ldr	r3, [r3, #0]
 8106830:	4a60      	ldr	r2, [pc, #384]	@ (81069b4 <HAL_DMA_Abort_IT+0x3c8>)
 8106832:	4293      	cmp	r3, r2
 8106834:	d022      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	681b      	ldr	r3, [r3, #0]
 810683a:	4a5f      	ldr	r2, [pc, #380]	@ (81069b8 <HAL_DMA_Abort_IT+0x3cc>)
 810683c:	4293      	cmp	r3, r2
 810683e:	d01d      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	681b      	ldr	r3, [r3, #0]
 8106844:	4a5d      	ldr	r2, [pc, #372]	@ (81069bc <HAL_DMA_Abort_IT+0x3d0>)
 8106846:	4293      	cmp	r3, r2
 8106848:	d018      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	4a5c      	ldr	r2, [pc, #368]	@ (81069c0 <HAL_DMA_Abort_IT+0x3d4>)
 8106850:	4293      	cmp	r3, r2
 8106852:	d013      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 8106854:	687b      	ldr	r3, [r7, #4]
 8106856:	681b      	ldr	r3, [r3, #0]
 8106858:	4a5a      	ldr	r2, [pc, #360]	@ (81069c4 <HAL_DMA_Abort_IT+0x3d8>)
 810685a:	4293      	cmp	r3, r2
 810685c:	d00e      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	681b      	ldr	r3, [r3, #0]
 8106862:	4a59      	ldr	r2, [pc, #356]	@ (81069c8 <HAL_DMA_Abort_IT+0x3dc>)
 8106864:	4293      	cmp	r3, r2
 8106866:	d009      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	681b      	ldr	r3, [r3, #0]
 810686c:	4a57      	ldr	r2, [pc, #348]	@ (81069cc <HAL_DMA_Abort_IT+0x3e0>)
 810686e:	4293      	cmp	r3, r2
 8106870:	d004      	beq.n	810687c <HAL_DMA_Abort_IT+0x290>
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	4a56      	ldr	r2, [pc, #344]	@ (81069d0 <HAL_DMA_Abort_IT+0x3e4>)
 8106878:	4293      	cmp	r3, r2
 810687a:	d108      	bne.n	810688e <HAL_DMA_Abort_IT+0x2a2>
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	681b      	ldr	r3, [r3, #0]
 8106880:	681a      	ldr	r2, [r3, #0]
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	681b      	ldr	r3, [r3, #0]
 8106886:	f022 0201 	bic.w	r2, r2, #1
 810688a:	601a      	str	r2, [r3, #0]
 810688c:	e007      	b.n	810689e <HAL_DMA_Abort_IT+0x2b2>
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	681b      	ldr	r3, [r3, #0]
 8106892:	681a      	ldr	r2, [r3, #0]
 8106894:	687b      	ldr	r3, [r7, #4]
 8106896:	681b      	ldr	r3, [r3, #0]
 8106898:	f022 0201 	bic.w	r2, r2, #1
 810689c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	681b      	ldr	r3, [r3, #0]
 81068a2:	4a3c      	ldr	r2, [pc, #240]	@ (8106994 <HAL_DMA_Abort_IT+0x3a8>)
 81068a4:	4293      	cmp	r3, r2
 81068a6:	d072      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	681b      	ldr	r3, [r3, #0]
 81068ac:	4a3a      	ldr	r2, [pc, #232]	@ (8106998 <HAL_DMA_Abort_IT+0x3ac>)
 81068ae:	4293      	cmp	r3, r2
 81068b0:	d06d      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	4a39      	ldr	r2, [pc, #228]	@ (810699c <HAL_DMA_Abort_IT+0x3b0>)
 81068b8:	4293      	cmp	r3, r2
 81068ba:	d068      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	681b      	ldr	r3, [r3, #0]
 81068c0:	4a37      	ldr	r2, [pc, #220]	@ (81069a0 <HAL_DMA_Abort_IT+0x3b4>)
 81068c2:	4293      	cmp	r3, r2
 81068c4:	d063      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	681b      	ldr	r3, [r3, #0]
 81068ca:	4a36      	ldr	r2, [pc, #216]	@ (81069a4 <HAL_DMA_Abort_IT+0x3b8>)
 81068cc:	4293      	cmp	r3, r2
 81068ce:	d05e      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	681b      	ldr	r3, [r3, #0]
 81068d4:	4a34      	ldr	r2, [pc, #208]	@ (81069a8 <HAL_DMA_Abort_IT+0x3bc>)
 81068d6:	4293      	cmp	r3, r2
 81068d8:	d059      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	681b      	ldr	r3, [r3, #0]
 81068de:	4a33      	ldr	r2, [pc, #204]	@ (81069ac <HAL_DMA_Abort_IT+0x3c0>)
 81068e0:	4293      	cmp	r3, r2
 81068e2:	d054      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	681b      	ldr	r3, [r3, #0]
 81068e8:	4a31      	ldr	r2, [pc, #196]	@ (81069b0 <HAL_DMA_Abort_IT+0x3c4>)
 81068ea:	4293      	cmp	r3, r2
 81068ec:	d04f      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	4a30      	ldr	r2, [pc, #192]	@ (81069b4 <HAL_DMA_Abort_IT+0x3c8>)
 81068f4:	4293      	cmp	r3, r2
 81068f6:	d04a      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 81068f8:	687b      	ldr	r3, [r7, #4]
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	4a2e      	ldr	r2, [pc, #184]	@ (81069b8 <HAL_DMA_Abort_IT+0x3cc>)
 81068fe:	4293      	cmp	r3, r2
 8106900:	d045      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	681b      	ldr	r3, [r3, #0]
 8106906:	4a2d      	ldr	r2, [pc, #180]	@ (81069bc <HAL_DMA_Abort_IT+0x3d0>)
 8106908:	4293      	cmp	r3, r2
 810690a:	d040      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	681b      	ldr	r3, [r3, #0]
 8106910:	4a2b      	ldr	r2, [pc, #172]	@ (81069c0 <HAL_DMA_Abort_IT+0x3d4>)
 8106912:	4293      	cmp	r3, r2
 8106914:	d03b      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	4a2a      	ldr	r2, [pc, #168]	@ (81069c4 <HAL_DMA_Abort_IT+0x3d8>)
 810691c:	4293      	cmp	r3, r2
 810691e:	d036      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106920:	687b      	ldr	r3, [r7, #4]
 8106922:	681b      	ldr	r3, [r3, #0]
 8106924:	4a28      	ldr	r2, [pc, #160]	@ (81069c8 <HAL_DMA_Abort_IT+0x3dc>)
 8106926:	4293      	cmp	r3, r2
 8106928:	d031      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	4a27      	ldr	r2, [pc, #156]	@ (81069cc <HAL_DMA_Abort_IT+0x3e0>)
 8106930:	4293      	cmp	r3, r2
 8106932:	d02c      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106934:	687b      	ldr	r3, [r7, #4]
 8106936:	681b      	ldr	r3, [r3, #0]
 8106938:	4a25      	ldr	r2, [pc, #148]	@ (81069d0 <HAL_DMA_Abort_IT+0x3e4>)
 810693a:	4293      	cmp	r3, r2
 810693c:	d027      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	681b      	ldr	r3, [r3, #0]
 8106942:	4a24      	ldr	r2, [pc, #144]	@ (81069d4 <HAL_DMA_Abort_IT+0x3e8>)
 8106944:	4293      	cmp	r3, r2
 8106946:	d022      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	681b      	ldr	r3, [r3, #0]
 810694c:	4a22      	ldr	r2, [pc, #136]	@ (81069d8 <HAL_DMA_Abort_IT+0x3ec>)
 810694e:	4293      	cmp	r3, r2
 8106950:	d01d      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	681b      	ldr	r3, [r3, #0]
 8106956:	4a21      	ldr	r2, [pc, #132]	@ (81069dc <HAL_DMA_Abort_IT+0x3f0>)
 8106958:	4293      	cmp	r3, r2
 810695a:	d018      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	681b      	ldr	r3, [r3, #0]
 8106960:	4a1f      	ldr	r2, [pc, #124]	@ (81069e0 <HAL_DMA_Abort_IT+0x3f4>)
 8106962:	4293      	cmp	r3, r2
 8106964:	d013      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106966:	687b      	ldr	r3, [r7, #4]
 8106968:	681b      	ldr	r3, [r3, #0]
 810696a:	4a1e      	ldr	r2, [pc, #120]	@ (81069e4 <HAL_DMA_Abort_IT+0x3f8>)
 810696c:	4293      	cmp	r3, r2
 810696e:	d00e      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	4a1c      	ldr	r2, [pc, #112]	@ (81069e8 <HAL_DMA_Abort_IT+0x3fc>)
 8106976:	4293      	cmp	r3, r2
 8106978:	d009      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 810697a:	687b      	ldr	r3, [r7, #4]
 810697c:	681b      	ldr	r3, [r3, #0]
 810697e:	4a1b      	ldr	r2, [pc, #108]	@ (81069ec <HAL_DMA_Abort_IT+0x400>)
 8106980:	4293      	cmp	r3, r2
 8106982:	d004      	beq.n	810698e <HAL_DMA_Abort_IT+0x3a2>
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	4a19      	ldr	r2, [pc, #100]	@ (81069f0 <HAL_DMA_Abort_IT+0x404>)
 810698a:	4293      	cmp	r3, r2
 810698c:	d132      	bne.n	81069f4 <HAL_DMA_Abort_IT+0x408>
 810698e:	2301      	movs	r3, #1
 8106990:	e031      	b.n	81069f6 <HAL_DMA_Abort_IT+0x40a>
 8106992:	bf00      	nop
 8106994:	40020010 	.word	0x40020010
 8106998:	40020028 	.word	0x40020028
 810699c:	40020040 	.word	0x40020040
 81069a0:	40020058 	.word	0x40020058
 81069a4:	40020070 	.word	0x40020070
 81069a8:	40020088 	.word	0x40020088
 81069ac:	400200a0 	.word	0x400200a0
 81069b0:	400200b8 	.word	0x400200b8
 81069b4:	40020410 	.word	0x40020410
 81069b8:	40020428 	.word	0x40020428
 81069bc:	40020440 	.word	0x40020440
 81069c0:	40020458 	.word	0x40020458
 81069c4:	40020470 	.word	0x40020470
 81069c8:	40020488 	.word	0x40020488
 81069cc:	400204a0 	.word	0x400204a0
 81069d0:	400204b8 	.word	0x400204b8
 81069d4:	58025408 	.word	0x58025408
 81069d8:	5802541c 	.word	0x5802541c
 81069dc:	58025430 	.word	0x58025430
 81069e0:	58025444 	.word	0x58025444
 81069e4:	58025458 	.word	0x58025458
 81069e8:	5802546c 	.word	0x5802546c
 81069ec:	58025480 	.word	0x58025480
 81069f0:	58025494 	.word	0x58025494
 81069f4:	2300      	movs	r3, #0
 81069f6:	2b00      	cmp	r3, #0
 81069f8:	d028      	beq.n	8106a4c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81069fa:	687b      	ldr	r3, [r7, #4]
 81069fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81069fe:	681a      	ldr	r2, [r3, #0]
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106a04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106a08:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106a0a:	687b      	ldr	r3, [r7, #4]
 8106a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106a0e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106a14:	f003 031f 	and.w	r3, r3, #31
 8106a18:	2201      	movs	r2, #1
 8106a1a:	409a      	lsls	r2, r3
 8106a1c:	68fb      	ldr	r3, [r7, #12]
 8106a1e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106a24:	687a      	ldr	r2, [r7, #4]
 8106a26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106a28:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8106a2a:	687b      	ldr	r3, [r7, #4]
 8106a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106a2e:	2b00      	cmp	r3, #0
 8106a30:	d00c      	beq.n	8106a4c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106a32:	687b      	ldr	r3, [r7, #4]
 8106a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106a36:	681a      	ldr	r2, [r3, #0]
 8106a38:	687b      	ldr	r3, [r7, #4]
 8106a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106a40:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106a42:	687b      	ldr	r3, [r7, #4]
 8106a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106a46:	687a      	ldr	r2, [r7, #4]
 8106a48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8106a4a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106a4c:	687b      	ldr	r3, [r7, #4]
 8106a4e:	2201      	movs	r2, #1
 8106a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106a54:	687b      	ldr	r3, [r7, #4]
 8106a56:	2200      	movs	r2, #0
 8106a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a60:	2b00      	cmp	r3, #0
 8106a62:	d003      	beq.n	8106a6c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106a68:	6878      	ldr	r0, [r7, #4]
 8106a6a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8106a6c:	2300      	movs	r3, #0
}
 8106a6e:	4618      	mov	r0, r3
 8106a70:	3710      	adds	r7, #16
 8106a72:	46bd      	mov	sp, r7
 8106a74:	bd80      	pop	{r7, pc}
 8106a76:	bf00      	nop

08106a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106a78:	b480      	push	{r7}
 8106a7a:	b089      	sub	sp, #36	@ 0x24
 8106a7c:	af00      	add	r7, sp, #0
 8106a7e:	6078      	str	r0, [r7, #4]
 8106a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106a82:	2300      	movs	r3, #0
 8106a84:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106a86:	4b89      	ldr	r3, [pc, #548]	@ (8106cac <HAL_GPIO_Init+0x234>)
 8106a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106a8a:	e194      	b.n	8106db6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106a8c:	683b      	ldr	r3, [r7, #0]
 8106a8e:	681a      	ldr	r2, [r3, #0]
 8106a90:	2101      	movs	r1, #1
 8106a92:	69fb      	ldr	r3, [r7, #28]
 8106a94:	fa01 f303 	lsl.w	r3, r1, r3
 8106a98:	4013      	ands	r3, r2
 8106a9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106a9c:	693b      	ldr	r3, [r7, #16]
 8106a9e:	2b00      	cmp	r3, #0
 8106aa0:	f000 8186 	beq.w	8106db0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8106aa4:	683b      	ldr	r3, [r7, #0]
 8106aa6:	685b      	ldr	r3, [r3, #4]
 8106aa8:	f003 0303 	and.w	r3, r3, #3
 8106aac:	2b01      	cmp	r3, #1
 8106aae:	d005      	beq.n	8106abc <HAL_GPIO_Init+0x44>
 8106ab0:	683b      	ldr	r3, [r7, #0]
 8106ab2:	685b      	ldr	r3, [r3, #4]
 8106ab4:	f003 0303 	and.w	r3, r3, #3
 8106ab8:	2b02      	cmp	r3, #2
 8106aba:	d130      	bne.n	8106b1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	689b      	ldr	r3, [r3, #8]
 8106ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106ac2:	69fb      	ldr	r3, [r7, #28]
 8106ac4:	005b      	lsls	r3, r3, #1
 8106ac6:	2203      	movs	r2, #3
 8106ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8106acc:	43db      	mvns	r3, r3
 8106ace:	69ba      	ldr	r2, [r7, #24]
 8106ad0:	4013      	ands	r3, r2
 8106ad2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106ad4:	683b      	ldr	r3, [r7, #0]
 8106ad6:	68da      	ldr	r2, [r3, #12]
 8106ad8:	69fb      	ldr	r3, [r7, #28]
 8106ada:	005b      	lsls	r3, r3, #1
 8106adc:	fa02 f303 	lsl.w	r3, r2, r3
 8106ae0:	69ba      	ldr	r2, [r7, #24]
 8106ae2:	4313      	orrs	r3, r2
 8106ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	69ba      	ldr	r2, [r7, #24]
 8106aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	685b      	ldr	r3, [r3, #4]
 8106af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106af2:	2201      	movs	r2, #1
 8106af4:	69fb      	ldr	r3, [r7, #28]
 8106af6:	fa02 f303 	lsl.w	r3, r2, r3
 8106afa:	43db      	mvns	r3, r3
 8106afc:	69ba      	ldr	r2, [r7, #24]
 8106afe:	4013      	ands	r3, r2
 8106b00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8106b02:	683b      	ldr	r3, [r7, #0]
 8106b04:	685b      	ldr	r3, [r3, #4]
 8106b06:	091b      	lsrs	r3, r3, #4
 8106b08:	f003 0201 	and.w	r2, r3, #1
 8106b0c:	69fb      	ldr	r3, [r7, #28]
 8106b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8106b12:	69ba      	ldr	r2, [r7, #24]
 8106b14:	4313      	orrs	r3, r2
 8106b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106b18:	687b      	ldr	r3, [r7, #4]
 8106b1a:	69ba      	ldr	r2, [r7, #24]
 8106b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8106b1e:	683b      	ldr	r3, [r7, #0]
 8106b20:	685b      	ldr	r3, [r3, #4]
 8106b22:	f003 0303 	and.w	r3, r3, #3
 8106b26:	2b03      	cmp	r3, #3
 8106b28:	d017      	beq.n	8106b5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	68db      	ldr	r3, [r3, #12]
 8106b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106b30:	69fb      	ldr	r3, [r7, #28]
 8106b32:	005b      	lsls	r3, r3, #1
 8106b34:	2203      	movs	r2, #3
 8106b36:	fa02 f303 	lsl.w	r3, r2, r3
 8106b3a:	43db      	mvns	r3, r3
 8106b3c:	69ba      	ldr	r2, [r7, #24]
 8106b3e:	4013      	ands	r3, r2
 8106b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106b42:	683b      	ldr	r3, [r7, #0]
 8106b44:	689a      	ldr	r2, [r3, #8]
 8106b46:	69fb      	ldr	r3, [r7, #28]
 8106b48:	005b      	lsls	r3, r3, #1
 8106b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8106b4e:	69ba      	ldr	r2, [r7, #24]
 8106b50:	4313      	orrs	r3, r2
 8106b52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	69ba      	ldr	r2, [r7, #24]
 8106b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8106b5a:	683b      	ldr	r3, [r7, #0]
 8106b5c:	685b      	ldr	r3, [r3, #4]
 8106b5e:	f003 0303 	and.w	r3, r3, #3
 8106b62:	2b02      	cmp	r3, #2
 8106b64:	d123      	bne.n	8106bae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106b66:	69fb      	ldr	r3, [r7, #28]
 8106b68:	08da      	lsrs	r2, r3, #3
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	3208      	adds	r2, #8
 8106b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106b74:	69fb      	ldr	r3, [r7, #28]
 8106b76:	f003 0307 	and.w	r3, r3, #7
 8106b7a:	009b      	lsls	r3, r3, #2
 8106b7c:	220f      	movs	r2, #15
 8106b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8106b82:	43db      	mvns	r3, r3
 8106b84:	69ba      	ldr	r2, [r7, #24]
 8106b86:	4013      	ands	r3, r2
 8106b88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106b8a:	683b      	ldr	r3, [r7, #0]
 8106b8c:	691a      	ldr	r2, [r3, #16]
 8106b8e:	69fb      	ldr	r3, [r7, #28]
 8106b90:	f003 0307 	and.w	r3, r3, #7
 8106b94:	009b      	lsls	r3, r3, #2
 8106b96:	fa02 f303 	lsl.w	r3, r2, r3
 8106b9a:	69ba      	ldr	r2, [r7, #24]
 8106b9c:	4313      	orrs	r3, r2
 8106b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106ba0:	69fb      	ldr	r3, [r7, #28]
 8106ba2:	08da      	lsrs	r2, r3, #3
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	3208      	adds	r2, #8
 8106ba8:	69b9      	ldr	r1, [r7, #24]
 8106baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	681b      	ldr	r3, [r3, #0]
 8106bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106bb4:	69fb      	ldr	r3, [r7, #28]
 8106bb6:	005b      	lsls	r3, r3, #1
 8106bb8:	2203      	movs	r2, #3
 8106bba:	fa02 f303 	lsl.w	r3, r2, r3
 8106bbe:	43db      	mvns	r3, r3
 8106bc0:	69ba      	ldr	r2, [r7, #24]
 8106bc2:	4013      	ands	r3, r2
 8106bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106bc6:	683b      	ldr	r3, [r7, #0]
 8106bc8:	685b      	ldr	r3, [r3, #4]
 8106bca:	f003 0203 	and.w	r2, r3, #3
 8106bce:	69fb      	ldr	r3, [r7, #28]
 8106bd0:	005b      	lsls	r3, r3, #1
 8106bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8106bd6:	69ba      	ldr	r2, [r7, #24]
 8106bd8:	4313      	orrs	r3, r2
 8106bda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106bdc:	687b      	ldr	r3, [r7, #4]
 8106bde:	69ba      	ldr	r2, [r7, #24]
 8106be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8106be2:	683b      	ldr	r3, [r7, #0]
 8106be4:	685b      	ldr	r3, [r3, #4]
 8106be6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106bea:	2b00      	cmp	r3, #0
 8106bec:	f000 80e0 	beq.w	8106db0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8106cb0 <HAL_GPIO_Init+0x238>)
 8106bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8106cb0 <HAL_GPIO_Init+0x238>)
 8106bf8:	f043 0302 	orr.w	r3, r3, #2
 8106bfc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8106c00:	4b2b      	ldr	r3, [pc, #172]	@ (8106cb0 <HAL_GPIO_Init+0x238>)
 8106c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106c06:	f003 0302 	and.w	r3, r3, #2
 8106c0a:	60fb      	str	r3, [r7, #12]
 8106c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106c0e:	4a29      	ldr	r2, [pc, #164]	@ (8106cb4 <HAL_GPIO_Init+0x23c>)
 8106c10:	69fb      	ldr	r3, [r7, #28]
 8106c12:	089b      	lsrs	r3, r3, #2
 8106c14:	3302      	adds	r3, #2
 8106c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106c1c:	69fb      	ldr	r3, [r7, #28]
 8106c1e:	f003 0303 	and.w	r3, r3, #3
 8106c22:	009b      	lsls	r3, r3, #2
 8106c24:	220f      	movs	r2, #15
 8106c26:	fa02 f303 	lsl.w	r3, r2, r3
 8106c2a:	43db      	mvns	r3, r3
 8106c2c:	69ba      	ldr	r2, [r7, #24]
 8106c2e:	4013      	ands	r3, r2
 8106c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	4a20      	ldr	r2, [pc, #128]	@ (8106cb8 <HAL_GPIO_Init+0x240>)
 8106c36:	4293      	cmp	r3, r2
 8106c38:	d052      	beq.n	8106ce0 <HAL_GPIO_Init+0x268>
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8106cbc <HAL_GPIO_Init+0x244>)
 8106c3e:	4293      	cmp	r3, r2
 8106c40:	d031      	beq.n	8106ca6 <HAL_GPIO_Init+0x22e>
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	4a1e      	ldr	r2, [pc, #120]	@ (8106cc0 <HAL_GPIO_Init+0x248>)
 8106c46:	4293      	cmp	r3, r2
 8106c48:	d02b      	beq.n	8106ca2 <HAL_GPIO_Init+0x22a>
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8106cc4 <HAL_GPIO_Init+0x24c>)
 8106c4e:	4293      	cmp	r3, r2
 8106c50:	d025      	beq.n	8106c9e <HAL_GPIO_Init+0x226>
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	4a1c      	ldr	r2, [pc, #112]	@ (8106cc8 <HAL_GPIO_Init+0x250>)
 8106c56:	4293      	cmp	r3, r2
 8106c58:	d01f      	beq.n	8106c9a <HAL_GPIO_Init+0x222>
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8106ccc <HAL_GPIO_Init+0x254>)
 8106c5e:	4293      	cmp	r3, r2
 8106c60:	d019      	beq.n	8106c96 <HAL_GPIO_Init+0x21e>
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	4a1a      	ldr	r2, [pc, #104]	@ (8106cd0 <HAL_GPIO_Init+0x258>)
 8106c66:	4293      	cmp	r3, r2
 8106c68:	d013      	beq.n	8106c92 <HAL_GPIO_Init+0x21a>
 8106c6a:	687b      	ldr	r3, [r7, #4]
 8106c6c:	4a19      	ldr	r2, [pc, #100]	@ (8106cd4 <HAL_GPIO_Init+0x25c>)
 8106c6e:	4293      	cmp	r3, r2
 8106c70:	d00d      	beq.n	8106c8e <HAL_GPIO_Init+0x216>
 8106c72:	687b      	ldr	r3, [r7, #4]
 8106c74:	4a18      	ldr	r2, [pc, #96]	@ (8106cd8 <HAL_GPIO_Init+0x260>)
 8106c76:	4293      	cmp	r3, r2
 8106c78:	d007      	beq.n	8106c8a <HAL_GPIO_Init+0x212>
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	4a17      	ldr	r2, [pc, #92]	@ (8106cdc <HAL_GPIO_Init+0x264>)
 8106c7e:	4293      	cmp	r3, r2
 8106c80:	d101      	bne.n	8106c86 <HAL_GPIO_Init+0x20e>
 8106c82:	2309      	movs	r3, #9
 8106c84:	e02d      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106c86:	230a      	movs	r3, #10
 8106c88:	e02b      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106c8a:	2308      	movs	r3, #8
 8106c8c:	e029      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106c8e:	2307      	movs	r3, #7
 8106c90:	e027      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106c92:	2306      	movs	r3, #6
 8106c94:	e025      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106c96:	2305      	movs	r3, #5
 8106c98:	e023      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106c9a:	2304      	movs	r3, #4
 8106c9c:	e021      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106c9e:	2303      	movs	r3, #3
 8106ca0:	e01f      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106ca2:	2302      	movs	r3, #2
 8106ca4:	e01d      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106ca6:	2301      	movs	r3, #1
 8106ca8:	e01b      	b.n	8106ce2 <HAL_GPIO_Init+0x26a>
 8106caa:	bf00      	nop
 8106cac:	580000c0 	.word	0x580000c0
 8106cb0:	58024400 	.word	0x58024400
 8106cb4:	58000400 	.word	0x58000400
 8106cb8:	58020000 	.word	0x58020000
 8106cbc:	58020400 	.word	0x58020400
 8106cc0:	58020800 	.word	0x58020800
 8106cc4:	58020c00 	.word	0x58020c00
 8106cc8:	58021000 	.word	0x58021000
 8106ccc:	58021400 	.word	0x58021400
 8106cd0:	58021800 	.word	0x58021800
 8106cd4:	58021c00 	.word	0x58021c00
 8106cd8:	58022000 	.word	0x58022000
 8106cdc:	58022400 	.word	0x58022400
 8106ce0:	2300      	movs	r3, #0
 8106ce2:	69fa      	ldr	r2, [r7, #28]
 8106ce4:	f002 0203 	and.w	r2, r2, #3
 8106ce8:	0092      	lsls	r2, r2, #2
 8106cea:	4093      	lsls	r3, r2
 8106cec:	69ba      	ldr	r2, [r7, #24]
 8106cee:	4313      	orrs	r3, r2
 8106cf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106cf2:	4938      	ldr	r1, [pc, #224]	@ (8106dd4 <HAL_GPIO_Init+0x35c>)
 8106cf4:	69fb      	ldr	r3, [r7, #28]
 8106cf6:	089b      	lsrs	r3, r3, #2
 8106cf8:	3302      	adds	r3, #2
 8106cfa:	69ba      	ldr	r2, [r7, #24]
 8106cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106d08:	693b      	ldr	r3, [r7, #16]
 8106d0a:	43db      	mvns	r3, r3
 8106d0c:	69ba      	ldr	r2, [r7, #24]
 8106d0e:	4013      	ands	r3, r2
 8106d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8106d12:	683b      	ldr	r3, [r7, #0]
 8106d14:	685b      	ldr	r3, [r3, #4]
 8106d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8106d1a:	2b00      	cmp	r3, #0
 8106d1c:	d003      	beq.n	8106d26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8106d1e:	69ba      	ldr	r2, [r7, #24]
 8106d20:	693b      	ldr	r3, [r7, #16]
 8106d22:	4313      	orrs	r3, r2
 8106d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106d2a:	69bb      	ldr	r3, [r7, #24]
 8106d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106d32:	685b      	ldr	r3, [r3, #4]
 8106d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106d36:	693b      	ldr	r3, [r7, #16]
 8106d38:	43db      	mvns	r3, r3
 8106d3a:	69ba      	ldr	r2, [r7, #24]
 8106d3c:	4013      	ands	r3, r2
 8106d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8106d40:	683b      	ldr	r3, [r7, #0]
 8106d42:	685b      	ldr	r3, [r3, #4]
 8106d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8106d48:	2b00      	cmp	r3, #0
 8106d4a:	d003      	beq.n	8106d54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8106d4c:	69ba      	ldr	r2, [r7, #24]
 8106d4e:	693b      	ldr	r3, [r7, #16]
 8106d50:	4313      	orrs	r3, r2
 8106d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106d54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106d58:	69bb      	ldr	r3, [r7, #24]
 8106d5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8106d5c:	697b      	ldr	r3, [r7, #20]
 8106d5e:	685b      	ldr	r3, [r3, #4]
 8106d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106d62:	693b      	ldr	r3, [r7, #16]
 8106d64:	43db      	mvns	r3, r3
 8106d66:	69ba      	ldr	r2, [r7, #24]
 8106d68:	4013      	ands	r3, r2
 8106d6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8106d6c:	683b      	ldr	r3, [r7, #0]
 8106d6e:	685b      	ldr	r3, [r3, #4]
 8106d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106d74:	2b00      	cmp	r3, #0
 8106d76:	d003      	beq.n	8106d80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8106d78:	69ba      	ldr	r2, [r7, #24]
 8106d7a:	693b      	ldr	r3, [r7, #16]
 8106d7c:	4313      	orrs	r3, r2
 8106d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106d80:	697b      	ldr	r3, [r7, #20]
 8106d82:	69ba      	ldr	r2, [r7, #24]
 8106d84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106d86:	697b      	ldr	r3, [r7, #20]
 8106d88:	681b      	ldr	r3, [r3, #0]
 8106d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106d8c:	693b      	ldr	r3, [r7, #16]
 8106d8e:	43db      	mvns	r3, r3
 8106d90:	69ba      	ldr	r2, [r7, #24]
 8106d92:	4013      	ands	r3, r2
 8106d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8106d96:	683b      	ldr	r3, [r7, #0]
 8106d98:	685b      	ldr	r3, [r3, #4]
 8106d9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106d9e:	2b00      	cmp	r3, #0
 8106da0:	d003      	beq.n	8106daa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8106da2:	69ba      	ldr	r2, [r7, #24]
 8106da4:	693b      	ldr	r3, [r7, #16]
 8106da6:	4313      	orrs	r3, r2
 8106da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106daa:	697b      	ldr	r3, [r7, #20]
 8106dac:	69ba      	ldr	r2, [r7, #24]
 8106dae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8106db0:	69fb      	ldr	r3, [r7, #28]
 8106db2:	3301      	adds	r3, #1
 8106db4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106db6:	683b      	ldr	r3, [r7, #0]
 8106db8:	681a      	ldr	r2, [r3, #0]
 8106dba:	69fb      	ldr	r3, [r7, #28]
 8106dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8106dc0:	2b00      	cmp	r3, #0
 8106dc2:	f47f ae63 	bne.w	8106a8c <HAL_GPIO_Init+0x14>
  }
}
 8106dc6:	bf00      	nop
 8106dc8:	bf00      	nop
 8106dca:	3724      	adds	r7, #36	@ 0x24
 8106dcc:	46bd      	mov	sp, r7
 8106dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dd2:	4770      	bx	lr
 8106dd4:	58000400 	.word	0x58000400

08106dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106dd8:	b480      	push	{r7}
 8106dda:	b083      	sub	sp, #12
 8106ddc:	af00      	add	r7, sp, #0
 8106dde:	6078      	str	r0, [r7, #4]
 8106de0:	460b      	mov	r3, r1
 8106de2:	807b      	strh	r3, [r7, #2]
 8106de4:	4613      	mov	r3, r2
 8106de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106de8:	787b      	ldrb	r3, [r7, #1]
 8106dea:	2b00      	cmp	r3, #0
 8106dec:	d003      	beq.n	8106df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8106dee:	887a      	ldrh	r2, [r7, #2]
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106df4:	e003      	b.n	8106dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106df6:	887b      	ldrh	r3, [r7, #2]
 8106df8:	041a      	lsls	r2, r3, #16
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	619a      	str	r2, [r3, #24]
}
 8106dfe:	bf00      	nop
 8106e00:	370c      	adds	r7, #12
 8106e02:	46bd      	mov	sp, r7
 8106e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e08:	4770      	bx	lr

08106e0a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8106e0a:	b580      	push	{r7, lr}
 8106e0c:	b082      	sub	sp, #8
 8106e0e:	af00      	add	r7, sp, #0
 8106e10:	4603      	mov	r3, r0
 8106e12:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8106e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106e18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8106e1c:	88fb      	ldrh	r3, [r7, #6]
 8106e1e:	4013      	ands	r3, r2
 8106e20:	2b00      	cmp	r3, #0
 8106e22:	d008      	beq.n	8106e36 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8106e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106e28:	88fb      	ldrh	r3, [r7, #6]
 8106e2a:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8106e2e:	88fb      	ldrh	r3, [r7, #6]
 8106e30:	4618      	mov	r0, r3
 8106e32:	f7fc fc5d 	bl	81036f0 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8106e36:	bf00      	nop
 8106e38:	3708      	adds	r7, #8
 8106e3a:	46bd      	mov	sp, r7
 8106e3c:	bd80      	pop	{r7, pc}
	...

08106e40 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106e40:	b480      	push	{r7}
 8106e42:	b083      	sub	sp, #12
 8106e44:	af00      	add	r7, sp, #0
 8106e46:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106e48:	4b05      	ldr	r3, [pc, #20]	@ (8106e60 <HAL_HSEM_ActivateNotification+0x20>)
 8106e4a:	681a      	ldr	r2, [r3, #0]
 8106e4c:	4904      	ldr	r1, [pc, #16]	@ (8106e60 <HAL_HSEM_ActivateNotification+0x20>)
 8106e4e:	687b      	ldr	r3, [r7, #4]
 8106e50:	4313      	orrs	r3, r2
 8106e52:	600b      	str	r3, [r1, #0]
#endif
}
 8106e54:	bf00      	nop
 8106e56:	370c      	adds	r7, #12
 8106e58:	46bd      	mov	sp, r7
 8106e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e5e:	4770      	bx	lr
 8106e60:	58026510 	.word	0x58026510

08106e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8106e64:	b580      	push	{r7, lr}
 8106e66:	b082      	sub	sp, #8
 8106e68:	af00      	add	r7, sp, #0
 8106e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8106e6c:	687b      	ldr	r3, [r7, #4]
 8106e6e:	2b00      	cmp	r3, #0
 8106e70:	d101      	bne.n	8106e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8106e72:	2301      	movs	r3, #1
 8106e74:	e08d      	b.n	8106f92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8106e76:	687b      	ldr	r3, [r7, #4]
 8106e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106e7c:	b2db      	uxtb	r3, r3
 8106e7e:	2b00      	cmp	r3, #0
 8106e80:	d106      	bne.n	8106e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8106e82:	687b      	ldr	r3, [r7, #4]
 8106e84:	2200      	movs	r2, #0
 8106e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8106e8a:	6878      	ldr	r0, [r7, #4]
 8106e8c:	f7fc fdcc 	bl	8103a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	2224      	movs	r2, #36	@ 0x24
 8106e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	681b      	ldr	r3, [r3, #0]
 8106e9c:	681a      	ldr	r2, [r3, #0]
 8106e9e:	687b      	ldr	r3, [r7, #4]
 8106ea0:	681b      	ldr	r3, [r3, #0]
 8106ea2:	f022 0201 	bic.w	r2, r2, #1
 8106ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	685a      	ldr	r2, [r3, #4]
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	681b      	ldr	r3, [r3, #0]
 8106eb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8106eb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	681b      	ldr	r3, [r3, #0]
 8106eba:	689a      	ldr	r2, [r3, #8]
 8106ebc:	687b      	ldr	r3, [r7, #4]
 8106ebe:	681b      	ldr	r3, [r3, #0]
 8106ec0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106ec4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8106ec6:	687b      	ldr	r3, [r7, #4]
 8106ec8:	68db      	ldr	r3, [r3, #12]
 8106eca:	2b01      	cmp	r3, #1
 8106ecc:	d107      	bne.n	8106ede <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8106ece:	687b      	ldr	r3, [r7, #4]
 8106ed0:	689a      	ldr	r2, [r3, #8]
 8106ed2:	687b      	ldr	r3, [r7, #4]
 8106ed4:	681b      	ldr	r3, [r3, #0]
 8106ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8106eda:	609a      	str	r2, [r3, #8]
 8106edc:	e006      	b.n	8106eec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	689a      	ldr	r2, [r3, #8]
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	681b      	ldr	r3, [r3, #0]
 8106ee6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8106eea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	68db      	ldr	r3, [r3, #12]
 8106ef0:	2b02      	cmp	r3, #2
 8106ef2:	d108      	bne.n	8106f06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	685a      	ldr	r2, [r3, #4]
 8106efa:	687b      	ldr	r3, [r7, #4]
 8106efc:	681b      	ldr	r3, [r3, #0]
 8106efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8106f02:	605a      	str	r2, [r3, #4]
 8106f04:	e007      	b.n	8106f16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	681b      	ldr	r3, [r3, #0]
 8106f0a:	685a      	ldr	r2, [r3, #4]
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	681b      	ldr	r3, [r3, #0]
 8106f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8106f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8106f16:	687b      	ldr	r3, [r7, #4]
 8106f18:	681b      	ldr	r3, [r3, #0]
 8106f1a:	685b      	ldr	r3, [r3, #4]
 8106f1c:	687a      	ldr	r2, [r7, #4]
 8106f1e:	6812      	ldr	r2, [r2, #0]
 8106f20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8106f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8106f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8106f2a:	687b      	ldr	r3, [r7, #4]
 8106f2c:	681b      	ldr	r3, [r3, #0]
 8106f2e:	68da      	ldr	r2, [r3, #12]
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	691a      	ldr	r2, [r3, #16]
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	695b      	ldr	r3, [r3, #20]
 8106f42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8106f46:	687b      	ldr	r3, [r7, #4]
 8106f48:	699b      	ldr	r3, [r3, #24]
 8106f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	681b      	ldr	r3, [r3, #0]
 8106f50:	430a      	orrs	r2, r1
 8106f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8106f54:	687b      	ldr	r3, [r7, #4]
 8106f56:	69d9      	ldr	r1, [r3, #28]
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	6a1a      	ldr	r2, [r3, #32]
 8106f5c:	687b      	ldr	r3, [r7, #4]
 8106f5e:	681b      	ldr	r3, [r3, #0]
 8106f60:	430a      	orrs	r2, r1
 8106f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	681b      	ldr	r3, [r3, #0]
 8106f68:	681a      	ldr	r2, [r3, #0]
 8106f6a:	687b      	ldr	r3, [r7, #4]
 8106f6c:	681b      	ldr	r3, [r3, #0]
 8106f6e:	f042 0201 	orr.w	r2, r2, #1
 8106f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	2200      	movs	r2, #0
 8106f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	2220      	movs	r2, #32
 8106f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8106f82:	687b      	ldr	r3, [r7, #4]
 8106f84:	2200      	movs	r2, #0
 8106f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8106f88:	687b      	ldr	r3, [r7, #4]
 8106f8a:	2200      	movs	r2, #0
 8106f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8106f90:	2300      	movs	r3, #0
}
 8106f92:	4618      	mov	r0, r3
 8106f94:	3708      	adds	r7, #8
 8106f96:	46bd      	mov	sp, r7
 8106f98:	bd80      	pop	{r7, pc}
	...

08106f9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8106f9c:	b580      	push	{r7, lr}
 8106f9e:	b088      	sub	sp, #32
 8106fa0:	af02      	add	r7, sp, #8
 8106fa2:	60f8      	str	r0, [r7, #12]
 8106fa4:	607a      	str	r2, [r7, #4]
 8106fa6:	461a      	mov	r2, r3
 8106fa8:	460b      	mov	r3, r1
 8106faa:	817b      	strh	r3, [r7, #10]
 8106fac:	4613      	mov	r3, r2
 8106fae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106fb0:	68fb      	ldr	r3, [r7, #12]
 8106fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106fb6:	b2db      	uxtb	r3, r3
 8106fb8:	2b20      	cmp	r3, #32
 8106fba:	f040 80fd 	bne.w	81071b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106fbe:	68fb      	ldr	r3, [r7, #12]
 8106fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106fc4:	2b01      	cmp	r3, #1
 8106fc6:	d101      	bne.n	8106fcc <HAL_I2C_Master_Transmit+0x30>
 8106fc8:	2302      	movs	r3, #2
 8106fca:	e0f6      	b.n	81071ba <HAL_I2C_Master_Transmit+0x21e>
 8106fcc:	68fb      	ldr	r3, [r7, #12]
 8106fce:	2201      	movs	r2, #1
 8106fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106fd4:	f7fd f9a4 	bl	8104320 <HAL_GetTick>
 8106fd8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106fda:	693b      	ldr	r3, [r7, #16]
 8106fdc:	9300      	str	r3, [sp, #0]
 8106fde:	2319      	movs	r3, #25
 8106fe0:	2201      	movs	r2, #1
 8106fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8106fe6:	68f8      	ldr	r0, [r7, #12]
 8106fe8:	f000 fa24 	bl	8107434 <I2C_WaitOnFlagUntilTimeout>
 8106fec:	4603      	mov	r3, r0
 8106fee:	2b00      	cmp	r3, #0
 8106ff0:	d001      	beq.n	8106ff6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8106ff2:	2301      	movs	r3, #1
 8106ff4:	e0e1      	b.n	81071ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8106ff6:	68fb      	ldr	r3, [r7, #12]
 8106ff8:	2221      	movs	r2, #33	@ 0x21
 8106ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8106ffe:	68fb      	ldr	r3, [r7, #12]
 8107000:	2210      	movs	r2, #16
 8107002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107006:	68fb      	ldr	r3, [r7, #12]
 8107008:	2200      	movs	r2, #0
 810700a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810700c:	68fb      	ldr	r3, [r7, #12]
 810700e:	687a      	ldr	r2, [r7, #4]
 8107010:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8107012:	68fb      	ldr	r3, [r7, #12]
 8107014:	893a      	ldrh	r2, [r7, #8]
 8107016:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8107018:	68fb      	ldr	r3, [r7, #12]
 810701a:	2200      	movs	r2, #0
 810701c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810701e:	68fb      	ldr	r3, [r7, #12]
 8107020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107022:	b29b      	uxth	r3, r3
 8107024:	2bff      	cmp	r3, #255	@ 0xff
 8107026:	d906      	bls.n	8107036 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8107028:	68fb      	ldr	r3, [r7, #12]
 810702a:	22ff      	movs	r2, #255	@ 0xff
 810702c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 810702e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8107032:	617b      	str	r3, [r7, #20]
 8107034:	e007      	b.n	8107046 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8107036:	68fb      	ldr	r3, [r7, #12]
 8107038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810703a:	b29a      	uxth	r2, r3
 810703c:	68fb      	ldr	r3, [r7, #12]
 810703e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8107040:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107044:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8107046:	68fb      	ldr	r3, [r7, #12]
 8107048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810704a:	2b00      	cmp	r3, #0
 810704c:	d024      	beq.n	8107098 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810704e:	68fb      	ldr	r3, [r7, #12]
 8107050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107052:	781a      	ldrb	r2, [r3, #0]
 8107054:	68fb      	ldr	r3, [r7, #12]
 8107056:	681b      	ldr	r3, [r3, #0]
 8107058:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810705a:	68fb      	ldr	r3, [r7, #12]
 810705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810705e:	1c5a      	adds	r2, r3, #1
 8107060:	68fb      	ldr	r3, [r7, #12]
 8107062:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8107064:	68fb      	ldr	r3, [r7, #12]
 8107066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107068:	b29b      	uxth	r3, r3
 810706a:	3b01      	subs	r3, #1
 810706c:	b29a      	uxth	r2, r3
 810706e:	68fb      	ldr	r3, [r7, #12]
 8107070:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8107072:	68fb      	ldr	r3, [r7, #12]
 8107074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107076:	3b01      	subs	r3, #1
 8107078:	b29a      	uxth	r2, r3
 810707a:	68fb      	ldr	r3, [r7, #12]
 810707c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 810707e:	68fb      	ldr	r3, [r7, #12]
 8107080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107082:	b2db      	uxtb	r3, r3
 8107084:	3301      	adds	r3, #1
 8107086:	b2da      	uxtb	r2, r3
 8107088:	8979      	ldrh	r1, [r7, #10]
 810708a:	4b4e      	ldr	r3, [pc, #312]	@ (81071c4 <HAL_I2C_Master_Transmit+0x228>)
 810708c:	9300      	str	r3, [sp, #0]
 810708e:	697b      	ldr	r3, [r7, #20]
 8107090:	68f8      	ldr	r0, [r7, #12]
 8107092:	f000 fc1f 	bl	81078d4 <I2C_TransferConfig>
 8107096:	e066      	b.n	8107166 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8107098:	68fb      	ldr	r3, [r7, #12]
 810709a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810709c:	b2da      	uxtb	r2, r3
 810709e:	8979      	ldrh	r1, [r7, #10]
 81070a0:	4b48      	ldr	r3, [pc, #288]	@ (81071c4 <HAL_I2C_Master_Transmit+0x228>)
 81070a2:	9300      	str	r3, [sp, #0]
 81070a4:	697b      	ldr	r3, [r7, #20]
 81070a6:	68f8      	ldr	r0, [r7, #12]
 81070a8:	f000 fc14 	bl	81078d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 81070ac:	e05b      	b.n	8107166 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81070ae:	693a      	ldr	r2, [r7, #16]
 81070b0:	6a39      	ldr	r1, [r7, #32]
 81070b2:	68f8      	ldr	r0, [r7, #12]
 81070b4:	f000 fa17 	bl	81074e6 <I2C_WaitOnTXISFlagUntilTimeout>
 81070b8:	4603      	mov	r3, r0
 81070ba:	2b00      	cmp	r3, #0
 81070bc:	d001      	beq.n	81070c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 81070be:	2301      	movs	r3, #1
 81070c0:	e07b      	b.n	81071ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81070c2:	68fb      	ldr	r3, [r7, #12]
 81070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81070c6:	781a      	ldrb	r2, [r3, #0]
 81070c8:	68fb      	ldr	r3, [r7, #12]
 81070ca:	681b      	ldr	r3, [r3, #0]
 81070cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81070ce:	68fb      	ldr	r3, [r7, #12]
 81070d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81070d2:	1c5a      	adds	r2, r3, #1
 81070d4:	68fb      	ldr	r3, [r7, #12]
 81070d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81070d8:	68fb      	ldr	r3, [r7, #12]
 81070da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81070dc:	b29b      	uxth	r3, r3
 81070de:	3b01      	subs	r3, #1
 81070e0:	b29a      	uxth	r2, r3
 81070e2:	68fb      	ldr	r3, [r7, #12]
 81070e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81070e6:	68fb      	ldr	r3, [r7, #12]
 81070e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81070ea:	3b01      	subs	r3, #1
 81070ec:	b29a      	uxth	r2, r3
 81070ee:	68fb      	ldr	r3, [r7, #12]
 81070f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81070f2:	68fb      	ldr	r3, [r7, #12]
 81070f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81070f6:	b29b      	uxth	r3, r3
 81070f8:	2b00      	cmp	r3, #0
 81070fa:	d034      	beq.n	8107166 <HAL_I2C_Master_Transmit+0x1ca>
 81070fc:	68fb      	ldr	r3, [r7, #12]
 81070fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107100:	2b00      	cmp	r3, #0
 8107102:	d130      	bne.n	8107166 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8107104:	693b      	ldr	r3, [r7, #16]
 8107106:	9300      	str	r3, [sp, #0]
 8107108:	6a3b      	ldr	r3, [r7, #32]
 810710a:	2200      	movs	r2, #0
 810710c:	2180      	movs	r1, #128	@ 0x80
 810710e:	68f8      	ldr	r0, [r7, #12]
 8107110:	f000 f990 	bl	8107434 <I2C_WaitOnFlagUntilTimeout>
 8107114:	4603      	mov	r3, r0
 8107116:	2b00      	cmp	r3, #0
 8107118:	d001      	beq.n	810711e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 810711a:	2301      	movs	r3, #1
 810711c:	e04d      	b.n	81071ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810711e:	68fb      	ldr	r3, [r7, #12]
 8107120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107122:	b29b      	uxth	r3, r3
 8107124:	2bff      	cmp	r3, #255	@ 0xff
 8107126:	d90e      	bls.n	8107146 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8107128:	68fb      	ldr	r3, [r7, #12]
 810712a:	22ff      	movs	r2, #255	@ 0xff
 810712c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810712e:	68fb      	ldr	r3, [r7, #12]
 8107130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107132:	b2da      	uxtb	r2, r3
 8107134:	8979      	ldrh	r1, [r7, #10]
 8107136:	2300      	movs	r3, #0
 8107138:	9300      	str	r3, [sp, #0]
 810713a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810713e:	68f8      	ldr	r0, [r7, #12]
 8107140:	f000 fbc8 	bl	81078d4 <I2C_TransferConfig>
 8107144:	e00f      	b.n	8107166 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107146:	68fb      	ldr	r3, [r7, #12]
 8107148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810714a:	b29a      	uxth	r2, r3
 810714c:	68fb      	ldr	r3, [r7, #12]
 810714e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8107150:	68fb      	ldr	r3, [r7, #12]
 8107152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107154:	b2da      	uxtb	r2, r3
 8107156:	8979      	ldrh	r1, [r7, #10]
 8107158:	2300      	movs	r3, #0
 810715a:	9300      	str	r3, [sp, #0]
 810715c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107160:	68f8      	ldr	r0, [r7, #12]
 8107162:	f000 fbb7 	bl	81078d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8107166:	68fb      	ldr	r3, [r7, #12]
 8107168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810716a:	b29b      	uxth	r3, r3
 810716c:	2b00      	cmp	r3, #0
 810716e:	d19e      	bne.n	81070ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8107170:	693a      	ldr	r2, [r7, #16]
 8107172:	6a39      	ldr	r1, [r7, #32]
 8107174:	68f8      	ldr	r0, [r7, #12]
 8107176:	f000 f9fd 	bl	8107574 <I2C_WaitOnSTOPFlagUntilTimeout>
 810717a:	4603      	mov	r3, r0
 810717c:	2b00      	cmp	r3, #0
 810717e:	d001      	beq.n	8107184 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8107180:	2301      	movs	r3, #1
 8107182:	e01a      	b.n	81071ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107184:	68fb      	ldr	r3, [r7, #12]
 8107186:	681b      	ldr	r3, [r3, #0]
 8107188:	2220      	movs	r2, #32
 810718a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810718c:	68fb      	ldr	r3, [r7, #12]
 810718e:	681b      	ldr	r3, [r3, #0]
 8107190:	6859      	ldr	r1, [r3, #4]
 8107192:	68fb      	ldr	r3, [r7, #12]
 8107194:	681a      	ldr	r2, [r3, #0]
 8107196:	4b0c      	ldr	r3, [pc, #48]	@ (81071c8 <HAL_I2C_Master_Transmit+0x22c>)
 8107198:	400b      	ands	r3, r1
 810719a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810719c:	68fb      	ldr	r3, [r7, #12]
 810719e:	2220      	movs	r2, #32
 81071a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81071a4:	68fb      	ldr	r3, [r7, #12]
 81071a6:	2200      	movs	r2, #0
 81071a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81071ac:	68fb      	ldr	r3, [r7, #12]
 81071ae:	2200      	movs	r2, #0
 81071b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81071b4:	2300      	movs	r3, #0
 81071b6:	e000      	b.n	81071ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 81071b8:	2302      	movs	r3, #2
  }
}
 81071ba:	4618      	mov	r0, r3
 81071bc:	3718      	adds	r7, #24
 81071be:	46bd      	mov	sp, r7
 81071c0:	bd80      	pop	{r7, pc}
 81071c2:	bf00      	nop
 81071c4:	80002000 	.word	0x80002000
 81071c8:	fe00e800 	.word	0xfe00e800

081071cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 81071cc:	b580      	push	{r7, lr}
 81071ce:	b088      	sub	sp, #32
 81071d0:	af02      	add	r7, sp, #8
 81071d2:	60f8      	str	r0, [r7, #12]
 81071d4:	607a      	str	r2, [r7, #4]
 81071d6:	461a      	mov	r2, r3
 81071d8:	460b      	mov	r3, r1
 81071da:	817b      	strh	r3, [r7, #10]
 81071dc:	4613      	mov	r3, r2
 81071de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81071e0:	68fb      	ldr	r3, [r7, #12]
 81071e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81071e6:	b2db      	uxtb	r3, r3
 81071e8:	2b20      	cmp	r3, #32
 81071ea:	f040 80db 	bne.w	81073a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81071f4:	2b01      	cmp	r3, #1
 81071f6:	d101      	bne.n	81071fc <HAL_I2C_Master_Receive+0x30>
 81071f8:	2302      	movs	r3, #2
 81071fa:	e0d4      	b.n	81073a6 <HAL_I2C_Master_Receive+0x1da>
 81071fc:	68fb      	ldr	r3, [r7, #12]
 81071fe:	2201      	movs	r2, #1
 8107200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8107204:	f7fd f88c 	bl	8104320 <HAL_GetTick>
 8107208:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810720a:	697b      	ldr	r3, [r7, #20]
 810720c:	9300      	str	r3, [sp, #0]
 810720e:	2319      	movs	r3, #25
 8107210:	2201      	movs	r2, #1
 8107212:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8107216:	68f8      	ldr	r0, [r7, #12]
 8107218:	f000 f90c 	bl	8107434 <I2C_WaitOnFlagUntilTimeout>
 810721c:	4603      	mov	r3, r0
 810721e:	2b00      	cmp	r3, #0
 8107220:	d001      	beq.n	8107226 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8107222:	2301      	movs	r3, #1
 8107224:	e0bf      	b.n	81073a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8107226:	68fb      	ldr	r3, [r7, #12]
 8107228:	2222      	movs	r2, #34	@ 0x22
 810722a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	2210      	movs	r2, #16
 8107232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107236:	68fb      	ldr	r3, [r7, #12]
 8107238:	2200      	movs	r2, #0
 810723a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810723c:	68fb      	ldr	r3, [r7, #12]
 810723e:	687a      	ldr	r2, [r7, #4]
 8107240:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8107242:	68fb      	ldr	r3, [r7, #12]
 8107244:	893a      	ldrh	r2, [r7, #8]
 8107246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8107248:	68fb      	ldr	r3, [r7, #12]
 810724a:	2200      	movs	r2, #0
 810724c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810724e:	68fb      	ldr	r3, [r7, #12]
 8107250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107252:	b29b      	uxth	r3, r3
 8107254:	2bff      	cmp	r3, #255	@ 0xff
 8107256:	d90e      	bls.n	8107276 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8107258:	68fb      	ldr	r3, [r7, #12]
 810725a:	22ff      	movs	r2, #255	@ 0xff
 810725c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810725e:	68fb      	ldr	r3, [r7, #12]
 8107260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107262:	b2da      	uxtb	r2, r3
 8107264:	8979      	ldrh	r1, [r7, #10]
 8107266:	4b52      	ldr	r3, [pc, #328]	@ (81073b0 <HAL_I2C_Master_Receive+0x1e4>)
 8107268:	9300      	str	r3, [sp, #0]
 810726a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810726e:	68f8      	ldr	r0, [r7, #12]
 8107270:	f000 fb30 	bl	81078d4 <I2C_TransferConfig>
 8107274:	e06d      	b.n	8107352 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8107276:	68fb      	ldr	r3, [r7, #12]
 8107278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810727a:	b29a      	uxth	r2, r3
 810727c:	68fb      	ldr	r3, [r7, #12]
 810727e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8107280:	68fb      	ldr	r3, [r7, #12]
 8107282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107284:	b2da      	uxtb	r2, r3
 8107286:	8979      	ldrh	r1, [r7, #10]
 8107288:	4b49      	ldr	r3, [pc, #292]	@ (81073b0 <HAL_I2C_Master_Receive+0x1e4>)
 810728a:	9300      	str	r3, [sp, #0]
 810728c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107290:	68f8      	ldr	r0, [r7, #12]
 8107292:	f000 fb1f 	bl	81078d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8107296:	e05c      	b.n	8107352 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8107298:	697a      	ldr	r2, [r7, #20]
 810729a:	6a39      	ldr	r1, [r7, #32]
 810729c:	68f8      	ldr	r0, [r7, #12]
 810729e:	f000 f9ad 	bl	81075fc <I2C_WaitOnRXNEFlagUntilTimeout>
 81072a2:	4603      	mov	r3, r0
 81072a4:	2b00      	cmp	r3, #0
 81072a6:	d001      	beq.n	81072ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 81072a8:	2301      	movs	r3, #1
 81072aa:	e07c      	b.n	81073a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81072b2:	68fb      	ldr	r3, [r7, #12]
 81072b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81072b6:	b2d2      	uxtb	r2, r2
 81072b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81072ba:	68fb      	ldr	r3, [r7, #12]
 81072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81072be:	1c5a      	adds	r2, r3, #1
 81072c0:	68fb      	ldr	r3, [r7, #12]
 81072c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 81072c4:	68fb      	ldr	r3, [r7, #12]
 81072c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81072c8:	3b01      	subs	r3, #1
 81072ca:	b29a      	uxth	r2, r3
 81072cc:	68fb      	ldr	r3, [r7, #12]
 81072ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 81072d0:	68fb      	ldr	r3, [r7, #12]
 81072d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81072d4:	b29b      	uxth	r3, r3
 81072d6:	3b01      	subs	r3, #1
 81072d8:	b29a      	uxth	r2, r3
 81072da:	68fb      	ldr	r3, [r7, #12]
 81072dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81072de:	68fb      	ldr	r3, [r7, #12]
 81072e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81072e2:	b29b      	uxth	r3, r3
 81072e4:	2b00      	cmp	r3, #0
 81072e6:	d034      	beq.n	8107352 <HAL_I2C_Master_Receive+0x186>
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81072ec:	2b00      	cmp	r3, #0
 81072ee:	d130      	bne.n	8107352 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81072f0:	697b      	ldr	r3, [r7, #20]
 81072f2:	9300      	str	r3, [sp, #0]
 81072f4:	6a3b      	ldr	r3, [r7, #32]
 81072f6:	2200      	movs	r2, #0
 81072f8:	2180      	movs	r1, #128	@ 0x80
 81072fa:	68f8      	ldr	r0, [r7, #12]
 81072fc:	f000 f89a 	bl	8107434 <I2C_WaitOnFlagUntilTimeout>
 8107300:	4603      	mov	r3, r0
 8107302:	2b00      	cmp	r3, #0
 8107304:	d001      	beq.n	810730a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8107306:	2301      	movs	r3, #1
 8107308:	e04d      	b.n	81073a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810730a:	68fb      	ldr	r3, [r7, #12]
 810730c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810730e:	b29b      	uxth	r3, r3
 8107310:	2bff      	cmp	r3, #255	@ 0xff
 8107312:	d90e      	bls.n	8107332 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8107314:	68fb      	ldr	r3, [r7, #12]
 8107316:	22ff      	movs	r2, #255	@ 0xff
 8107318:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810731a:	68fb      	ldr	r3, [r7, #12]
 810731c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810731e:	b2da      	uxtb	r2, r3
 8107320:	8979      	ldrh	r1, [r7, #10]
 8107322:	2300      	movs	r3, #0
 8107324:	9300      	str	r3, [sp, #0]
 8107326:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810732a:	68f8      	ldr	r0, [r7, #12]
 810732c:	f000 fad2 	bl	81078d4 <I2C_TransferConfig>
 8107330:	e00f      	b.n	8107352 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107332:	68fb      	ldr	r3, [r7, #12]
 8107334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107336:	b29a      	uxth	r2, r3
 8107338:	68fb      	ldr	r3, [r7, #12]
 810733a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810733c:	68fb      	ldr	r3, [r7, #12]
 810733e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107340:	b2da      	uxtb	r2, r3
 8107342:	8979      	ldrh	r1, [r7, #10]
 8107344:	2300      	movs	r3, #0
 8107346:	9300      	str	r3, [sp, #0]
 8107348:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810734c:	68f8      	ldr	r0, [r7, #12]
 810734e:	f000 fac1 	bl	81078d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8107352:	68fb      	ldr	r3, [r7, #12]
 8107354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107356:	b29b      	uxth	r3, r3
 8107358:	2b00      	cmp	r3, #0
 810735a:	d19d      	bne.n	8107298 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810735c:	697a      	ldr	r2, [r7, #20]
 810735e:	6a39      	ldr	r1, [r7, #32]
 8107360:	68f8      	ldr	r0, [r7, #12]
 8107362:	f000 f907 	bl	8107574 <I2C_WaitOnSTOPFlagUntilTimeout>
 8107366:	4603      	mov	r3, r0
 8107368:	2b00      	cmp	r3, #0
 810736a:	d001      	beq.n	8107370 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 810736c:	2301      	movs	r3, #1
 810736e:	e01a      	b.n	81073a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107370:	68fb      	ldr	r3, [r7, #12]
 8107372:	681b      	ldr	r3, [r3, #0]
 8107374:	2220      	movs	r2, #32
 8107376:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107378:	68fb      	ldr	r3, [r7, #12]
 810737a:	681b      	ldr	r3, [r3, #0]
 810737c:	6859      	ldr	r1, [r3, #4]
 810737e:	68fb      	ldr	r3, [r7, #12]
 8107380:	681a      	ldr	r2, [r3, #0]
 8107382:	4b0c      	ldr	r3, [pc, #48]	@ (81073b4 <HAL_I2C_Master_Receive+0x1e8>)
 8107384:	400b      	ands	r3, r1
 8107386:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8107388:	68fb      	ldr	r3, [r7, #12]
 810738a:	2220      	movs	r2, #32
 810738c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8107390:	68fb      	ldr	r3, [r7, #12]
 8107392:	2200      	movs	r2, #0
 8107394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107398:	68fb      	ldr	r3, [r7, #12]
 810739a:	2200      	movs	r2, #0
 810739c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81073a0:	2300      	movs	r3, #0
 81073a2:	e000      	b.n	81073a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 81073a4:	2302      	movs	r3, #2
  }
}
 81073a6:	4618      	mov	r0, r3
 81073a8:	3718      	adds	r7, #24
 81073aa:	46bd      	mov	sp, r7
 81073ac:	bd80      	pop	{r7, pc}
 81073ae:	bf00      	nop
 81073b0:	80002400 	.word	0x80002400
 81073b4:	fe00e800 	.word	0xfe00e800

081073b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 81073b8:	b480      	push	{r7}
 81073ba:	b083      	sub	sp, #12
 81073bc:	af00      	add	r7, sp, #0
 81073be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 81073c0:	687b      	ldr	r3, [r7, #4]
 81073c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81073c6:	b2db      	uxtb	r3, r3
}
 81073c8:	4618      	mov	r0, r3
 81073ca:	370c      	adds	r7, #12
 81073cc:	46bd      	mov	sp, r7
 81073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073d2:	4770      	bx	lr

081073d4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 81073d4:	b480      	push	{r7}
 81073d6:	b083      	sub	sp, #12
 81073d8:	af00      	add	r7, sp, #0
 81073da:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 81073dc:	687b      	ldr	r3, [r7, #4]
 81073de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 81073e0:	4618      	mov	r0, r3
 81073e2:	370c      	adds	r7, #12
 81073e4:	46bd      	mov	sp, r7
 81073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073ea:	4770      	bx	lr

081073ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81073ec:	b480      	push	{r7}
 81073ee:	b083      	sub	sp, #12
 81073f0:	af00      	add	r7, sp, #0
 81073f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81073f4:	687b      	ldr	r3, [r7, #4]
 81073f6:	681b      	ldr	r3, [r3, #0]
 81073f8:	699b      	ldr	r3, [r3, #24]
 81073fa:	f003 0302 	and.w	r3, r3, #2
 81073fe:	2b02      	cmp	r3, #2
 8107400:	d103      	bne.n	810740a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8107402:	687b      	ldr	r3, [r7, #4]
 8107404:	681b      	ldr	r3, [r3, #0]
 8107406:	2200      	movs	r2, #0
 8107408:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810740a:	687b      	ldr	r3, [r7, #4]
 810740c:	681b      	ldr	r3, [r3, #0]
 810740e:	699b      	ldr	r3, [r3, #24]
 8107410:	f003 0301 	and.w	r3, r3, #1
 8107414:	2b01      	cmp	r3, #1
 8107416:	d007      	beq.n	8107428 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	681b      	ldr	r3, [r3, #0]
 810741c:	699a      	ldr	r2, [r3, #24]
 810741e:	687b      	ldr	r3, [r7, #4]
 8107420:	681b      	ldr	r3, [r3, #0]
 8107422:	f042 0201 	orr.w	r2, r2, #1
 8107426:	619a      	str	r2, [r3, #24]
  }
}
 8107428:	bf00      	nop
 810742a:	370c      	adds	r7, #12
 810742c:	46bd      	mov	sp, r7
 810742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107432:	4770      	bx	lr

08107434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8107434:	b580      	push	{r7, lr}
 8107436:	b084      	sub	sp, #16
 8107438:	af00      	add	r7, sp, #0
 810743a:	60f8      	str	r0, [r7, #12]
 810743c:	60b9      	str	r1, [r7, #8]
 810743e:	603b      	str	r3, [r7, #0]
 8107440:	4613      	mov	r3, r2
 8107442:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8107444:	e03b      	b.n	81074be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8107446:	69ba      	ldr	r2, [r7, #24]
 8107448:	6839      	ldr	r1, [r7, #0]
 810744a:	68f8      	ldr	r0, [r7, #12]
 810744c:	f000 f962 	bl	8107714 <I2C_IsErrorOccurred>
 8107450:	4603      	mov	r3, r0
 8107452:	2b00      	cmp	r3, #0
 8107454:	d001      	beq.n	810745a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8107456:	2301      	movs	r3, #1
 8107458:	e041      	b.n	81074de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810745a:	683b      	ldr	r3, [r7, #0]
 810745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107460:	d02d      	beq.n	81074be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107462:	f7fc ff5d 	bl	8104320 <HAL_GetTick>
 8107466:	4602      	mov	r2, r0
 8107468:	69bb      	ldr	r3, [r7, #24]
 810746a:	1ad3      	subs	r3, r2, r3
 810746c:	683a      	ldr	r2, [r7, #0]
 810746e:	429a      	cmp	r2, r3
 8107470:	d302      	bcc.n	8107478 <I2C_WaitOnFlagUntilTimeout+0x44>
 8107472:	683b      	ldr	r3, [r7, #0]
 8107474:	2b00      	cmp	r3, #0
 8107476:	d122      	bne.n	81074be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8107478:	68fb      	ldr	r3, [r7, #12]
 810747a:	681b      	ldr	r3, [r3, #0]
 810747c:	699a      	ldr	r2, [r3, #24]
 810747e:	68bb      	ldr	r3, [r7, #8]
 8107480:	4013      	ands	r3, r2
 8107482:	68ba      	ldr	r2, [r7, #8]
 8107484:	429a      	cmp	r2, r3
 8107486:	bf0c      	ite	eq
 8107488:	2301      	moveq	r3, #1
 810748a:	2300      	movne	r3, #0
 810748c:	b2db      	uxtb	r3, r3
 810748e:	461a      	mov	r2, r3
 8107490:	79fb      	ldrb	r3, [r7, #7]
 8107492:	429a      	cmp	r2, r3
 8107494:	d113      	bne.n	81074be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107496:	68fb      	ldr	r3, [r7, #12]
 8107498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810749a:	f043 0220 	orr.w	r2, r3, #32
 810749e:	68fb      	ldr	r3, [r7, #12]
 81074a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81074a2:	68fb      	ldr	r3, [r7, #12]
 81074a4:	2220      	movs	r2, #32
 81074a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81074aa:	68fb      	ldr	r3, [r7, #12]
 81074ac:	2200      	movs	r2, #0
 81074ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	2200      	movs	r2, #0
 81074b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 81074ba:	2301      	movs	r3, #1
 81074bc:	e00f      	b.n	81074de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81074be:	68fb      	ldr	r3, [r7, #12]
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	699a      	ldr	r2, [r3, #24]
 81074c4:	68bb      	ldr	r3, [r7, #8]
 81074c6:	4013      	ands	r3, r2
 81074c8:	68ba      	ldr	r2, [r7, #8]
 81074ca:	429a      	cmp	r2, r3
 81074cc:	bf0c      	ite	eq
 81074ce:	2301      	moveq	r3, #1
 81074d0:	2300      	movne	r3, #0
 81074d2:	b2db      	uxtb	r3, r3
 81074d4:	461a      	mov	r2, r3
 81074d6:	79fb      	ldrb	r3, [r7, #7]
 81074d8:	429a      	cmp	r2, r3
 81074da:	d0b4      	beq.n	8107446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81074dc:	2300      	movs	r3, #0
}
 81074de:	4618      	mov	r0, r3
 81074e0:	3710      	adds	r7, #16
 81074e2:	46bd      	mov	sp, r7
 81074e4:	bd80      	pop	{r7, pc}

081074e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81074e6:	b580      	push	{r7, lr}
 81074e8:	b084      	sub	sp, #16
 81074ea:	af00      	add	r7, sp, #0
 81074ec:	60f8      	str	r0, [r7, #12]
 81074ee:	60b9      	str	r1, [r7, #8]
 81074f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81074f2:	e033      	b.n	810755c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81074f4:	687a      	ldr	r2, [r7, #4]
 81074f6:	68b9      	ldr	r1, [r7, #8]
 81074f8:	68f8      	ldr	r0, [r7, #12]
 81074fa:	f000 f90b 	bl	8107714 <I2C_IsErrorOccurred>
 81074fe:	4603      	mov	r3, r0
 8107500:	2b00      	cmp	r3, #0
 8107502:	d001      	beq.n	8107508 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107504:	2301      	movs	r3, #1
 8107506:	e031      	b.n	810756c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107508:	68bb      	ldr	r3, [r7, #8]
 810750a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810750e:	d025      	beq.n	810755c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107510:	f7fc ff06 	bl	8104320 <HAL_GetTick>
 8107514:	4602      	mov	r2, r0
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	1ad3      	subs	r3, r2, r3
 810751a:	68ba      	ldr	r2, [r7, #8]
 810751c:	429a      	cmp	r2, r3
 810751e:	d302      	bcc.n	8107526 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8107520:	68bb      	ldr	r3, [r7, #8]
 8107522:	2b00      	cmp	r3, #0
 8107524:	d11a      	bne.n	810755c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8107526:	68fb      	ldr	r3, [r7, #12]
 8107528:	681b      	ldr	r3, [r3, #0]
 810752a:	699b      	ldr	r3, [r3, #24]
 810752c:	f003 0302 	and.w	r3, r3, #2
 8107530:	2b02      	cmp	r3, #2
 8107532:	d013      	beq.n	810755c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107534:	68fb      	ldr	r3, [r7, #12]
 8107536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107538:	f043 0220 	orr.w	r2, r3, #32
 810753c:	68fb      	ldr	r3, [r7, #12]
 810753e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8107540:	68fb      	ldr	r3, [r7, #12]
 8107542:	2220      	movs	r2, #32
 8107544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8107548:	68fb      	ldr	r3, [r7, #12]
 810754a:	2200      	movs	r2, #0
 810754c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107550:	68fb      	ldr	r3, [r7, #12]
 8107552:	2200      	movs	r2, #0
 8107554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8107558:	2301      	movs	r3, #1
 810755a:	e007      	b.n	810756c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810755c:	68fb      	ldr	r3, [r7, #12]
 810755e:	681b      	ldr	r3, [r3, #0]
 8107560:	699b      	ldr	r3, [r3, #24]
 8107562:	f003 0302 	and.w	r3, r3, #2
 8107566:	2b02      	cmp	r3, #2
 8107568:	d1c4      	bne.n	81074f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810756a:	2300      	movs	r3, #0
}
 810756c:	4618      	mov	r0, r3
 810756e:	3710      	adds	r7, #16
 8107570:	46bd      	mov	sp, r7
 8107572:	bd80      	pop	{r7, pc}

08107574 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8107574:	b580      	push	{r7, lr}
 8107576:	b084      	sub	sp, #16
 8107578:	af00      	add	r7, sp, #0
 810757a:	60f8      	str	r0, [r7, #12]
 810757c:	60b9      	str	r1, [r7, #8]
 810757e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107580:	e02f      	b.n	81075e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8107582:	687a      	ldr	r2, [r7, #4]
 8107584:	68b9      	ldr	r1, [r7, #8]
 8107586:	68f8      	ldr	r0, [r7, #12]
 8107588:	f000 f8c4 	bl	8107714 <I2C_IsErrorOccurred>
 810758c:	4603      	mov	r3, r0
 810758e:	2b00      	cmp	r3, #0
 8107590:	d001      	beq.n	8107596 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107592:	2301      	movs	r3, #1
 8107594:	e02d      	b.n	81075f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107596:	f7fc fec3 	bl	8104320 <HAL_GetTick>
 810759a:	4602      	mov	r2, r0
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	1ad3      	subs	r3, r2, r3
 81075a0:	68ba      	ldr	r2, [r7, #8]
 81075a2:	429a      	cmp	r2, r3
 81075a4:	d302      	bcc.n	81075ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81075a6:	68bb      	ldr	r3, [r7, #8]
 81075a8:	2b00      	cmp	r3, #0
 81075aa:	d11a      	bne.n	81075e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 81075ac:	68fb      	ldr	r3, [r7, #12]
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	699b      	ldr	r3, [r3, #24]
 81075b2:	f003 0320 	and.w	r3, r3, #32
 81075b6:	2b20      	cmp	r3, #32
 81075b8:	d013      	beq.n	81075e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81075ba:	68fb      	ldr	r3, [r7, #12]
 81075bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81075be:	f043 0220 	orr.w	r2, r3, #32
 81075c2:	68fb      	ldr	r3, [r7, #12]
 81075c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81075c6:	68fb      	ldr	r3, [r7, #12]
 81075c8:	2220      	movs	r2, #32
 81075ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81075ce:	68fb      	ldr	r3, [r7, #12]
 81075d0:	2200      	movs	r2, #0
 81075d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	2200      	movs	r2, #0
 81075da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 81075de:	2301      	movs	r3, #1
 81075e0:	e007      	b.n	81075f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81075e2:	68fb      	ldr	r3, [r7, #12]
 81075e4:	681b      	ldr	r3, [r3, #0]
 81075e6:	699b      	ldr	r3, [r3, #24]
 81075e8:	f003 0320 	and.w	r3, r3, #32
 81075ec:	2b20      	cmp	r3, #32
 81075ee:	d1c8      	bne.n	8107582 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81075f0:	2300      	movs	r3, #0
}
 81075f2:	4618      	mov	r0, r3
 81075f4:	3710      	adds	r7, #16
 81075f6:	46bd      	mov	sp, r7
 81075f8:	bd80      	pop	{r7, pc}
	...

081075fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81075fc:	b580      	push	{r7, lr}
 81075fe:	b086      	sub	sp, #24
 8107600:	af00      	add	r7, sp, #0
 8107602:	60f8      	str	r0, [r7, #12]
 8107604:	60b9      	str	r1, [r7, #8]
 8107606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107608:	2300      	movs	r3, #0
 810760a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 810760c:	e071      	b.n	81076f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810760e:	687a      	ldr	r2, [r7, #4]
 8107610:	68b9      	ldr	r1, [r7, #8]
 8107612:	68f8      	ldr	r0, [r7, #12]
 8107614:	f000 f87e 	bl	8107714 <I2C_IsErrorOccurred>
 8107618:	4603      	mov	r3, r0
 810761a:	2b00      	cmp	r3, #0
 810761c:	d001      	beq.n	8107622 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 810761e:	2301      	movs	r3, #1
 8107620:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	681b      	ldr	r3, [r3, #0]
 8107626:	699b      	ldr	r3, [r3, #24]
 8107628:	f003 0320 	and.w	r3, r3, #32
 810762c:	2b20      	cmp	r3, #32
 810762e:	d13b      	bne.n	81076a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8107630:	7dfb      	ldrb	r3, [r7, #23]
 8107632:	2b00      	cmp	r3, #0
 8107634:	d138      	bne.n	81076a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8107636:	68fb      	ldr	r3, [r7, #12]
 8107638:	681b      	ldr	r3, [r3, #0]
 810763a:	699b      	ldr	r3, [r3, #24]
 810763c:	f003 0304 	and.w	r3, r3, #4
 8107640:	2b04      	cmp	r3, #4
 8107642:	d105      	bne.n	8107650 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8107644:	68fb      	ldr	r3, [r7, #12]
 8107646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107648:	2b00      	cmp	r3, #0
 810764a:	d001      	beq.n	8107650 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 810764c:	2300      	movs	r3, #0
 810764e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8107650:	68fb      	ldr	r3, [r7, #12]
 8107652:	681b      	ldr	r3, [r3, #0]
 8107654:	699b      	ldr	r3, [r3, #24]
 8107656:	f003 0310 	and.w	r3, r3, #16
 810765a:	2b10      	cmp	r3, #16
 810765c:	d121      	bne.n	81076a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810765e:	68fb      	ldr	r3, [r7, #12]
 8107660:	681b      	ldr	r3, [r3, #0]
 8107662:	2210      	movs	r2, #16
 8107664:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8107666:	68fb      	ldr	r3, [r7, #12]
 8107668:	2204      	movs	r2, #4
 810766a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810766c:	68fb      	ldr	r3, [r7, #12]
 810766e:	681b      	ldr	r3, [r3, #0]
 8107670:	2220      	movs	r2, #32
 8107672:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8107674:	68fb      	ldr	r3, [r7, #12]
 8107676:	681b      	ldr	r3, [r3, #0]
 8107678:	6859      	ldr	r1, [r3, #4]
 810767a:	68fb      	ldr	r3, [r7, #12]
 810767c:	681a      	ldr	r2, [r3, #0]
 810767e:	4b24      	ldr	r3, [pc, #144]	@ (8107710 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8107680:	400b      	ands	r3, r1
 8107682:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8107684:	68fb      	ldr	r3, [r7, #12]
 8107686:	2220      	movs	r2, #32
 8107688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810768c:	68fb      	ldr	r3, [r7, #12]
 810768e:	2200      	movs	r2, #0
 8107690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107694:	68fb      	ldr	r3, [r7, #12]
 8107696:	2200      	movs	r2, #0
 8107698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 810769c:	2301      	movs	r3, #1
 810769e:	75fb      	strb	r3, [r7, #23]
 81076a0:	e002      	b.n	81076a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81076a2:	68fb      	ldr	r3, [r7, #12]
 81076a4:	2200      	movs	r2, #0
 81076a6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 81076a8:	f7fc fe3a 	bl	8104320 <HAL_GetTick>
 81076ac:	4602      	mov	r2, r0
 81076ae:	687b      	ldr	r3, [r7, #4]
 81076b0:	1ad3      	subs	r3, r2, r3
 81076b2:	68ba      	ldr	r2, [r7, #8]
 81076b4:	429a      	cmp	r2, r3
 81076b6:	d302      	bcc.n	81076be <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 81076b8:	68bb      	ldr	r3, [r7, #8]
 81076ba:	2b00      	cmp	r3, #0
 81076bc:	d119      	bne.n	81076f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 81076be:	7dfb      	ldrb	r3, [r7, #23]
 81076c0:	2b00      	cmp	r3, #0
 81076c2:	d116      	bne.n	81076f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 81076c4:	68fb      	ldr	r3, [r7, #12]
 81076c6:	681b      	ldr	r3, [r3, #0]
 81076c8:	699b      	ldr	r3, [r3, #24]
 81076ca:	f003 0304 	and.w	r3, r3, #4
 81076ce:	2b04      	cmp	r3, #4
 81076d0:	d00f      	beq.n	81076f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81076d2:	68fb      	ldr	r3, [r7, #12]
 81076d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81076d6:	f043 0220 	orr.w	r2, r3, #32
 81076da:	68fb      	ldr	r3, [r7, #12]
 81076dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81076de:	68fb      	ldr	r3, [r7, #12]
 81076e0:	2220      	movs	r2, #32
 81076e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81076e6:	68fb      	ldr	r3, [r7, #12]
 81076e8:	2200      	movs	r2, #0
 81076ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 81076ee:	2301      	movs	r3, #1
 81076f0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 81076f2:	68fb      	ldr	r3, [r7, #12]
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	699b      	ldr	r3, [r3, #24]
 81076f8:	f003 0304 	and.w	r3, r3, #4
 81076fc:	2b04      	cmp	r3, #4
 81076fe:	d002      	beq.n	8107706 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8107700:	7dfb      	ldrb	r3, [r7, #23]
 8107702:	2b00      	cmp	r3, #0
 8107704:	d083      	beq.n	810760e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8107706:	7dfb      	ldrb	r3, [r7, #23]
}
 8107708:	4618      	mov	r0, r3
 810770a:	3718      	adds	r7, #24
 810770c:	46bd      	mov	sp, r7
 810770e:	bd80      	pop	{r7, pc}
 8107710:	fe00e800 	.word	0xfe00e800

08107714 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107714:	b580      	push	{r7, lr}
 8107716:	b08a      	sub	sp, #40	@ 0x28
 8107718:	af00      	add	r7, sp, #0
 810771a:	60f8      	str	r0, [r7, #12]
 810771c:	60b9      	str	r1, [r7, #8]
 810771e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107720:	2300      	movs	r3, #0
 8107722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8107726:	68fb      	ldr	r3, [r7, #12]
 8107728:	681b      	ldr	r3, [r3, #0]
 810772a:	699b      	ldr	r3, [r3, #24]
 810772c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810772e:	2300      	movs	r3, #0
 8107730:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8107736:	69bb      	ldr	r3, [r7, #24]
 8107738:	f003 0310 	and.w	r3, r3, #16
 810773c:	2b00      	cmp	r3, #0
 810773e:	d068      	beq.n	8107812 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107740:	68fb      	ldr	r3, [r7, #12]
 8107742:	681b      	ldr	r3, [r3, #0]
 8107744:	2210      	movs	r2, #16
 8107746:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8107748:	e049      	b.n	81077de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810774a:	68bb      	ldr	r3, [r7, #8]
 810774c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107750:	d045      	beq.n	81077de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8107752:	f7fc fde5 	bl	8104320 <HAL_GetTick>
 8107756:	4602      	mov	r2, r0
 8107758:	69fb      	ldr	r3, [r7, #28]
 810775a:	1ad3      	subs	r3, r2, r3
 810775c:	68ba      	ldr	r2, [r7, #8]
 810775e:	429a      	cmp	r2, r3
 8107760:	d302      	bcc.n	8107768 <I2C_IsErrorOccurred+0x54>
 8107762:	68bb      	ldr	r3, [r7, #8]
 8107764:	2b00      	cmp	r3, #0
 8107766:	d13a      	bne.n	81077de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8107768:	68fb      	ldr	r3, [r7, #12]
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	685b      	ldr	r3, [r3, #4]
 810776e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107772:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8107774:	68fb      	ldr	r3, [r7, #12]
 8107776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810777a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 810777c:	68fb      	ldr	r3, [r7, #12]
 810777e:	681b      	ldr	r3, [r3, #0]
 8107780:	699b      	ldr	r3, [r3, #24]
 8107782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8107786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810778a:	d121      	bne.n	81077d0 <I2C_IsErrorOccurred+0xbc>
 810778c:	697b      	ldr	r3, [r7, #20]
 810778e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107792:	d01d      	beq.n	81077d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8107794:	7cfb      	ldrb	r3, [r7, #19]
 8107796:	2b20      	cmp	r3, #32
 8107798:	d01a      	beq.n	81077d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810779a:	68fb      	ldr	r3, [r7, #12]
 810779c:	681b      	ldr	r3, [r3, #0]
 810779e:	685a      	ldr	r2, [r3, #4]
 81077a0:	68fb      	ldr	r3, [r7, #12]
 81077a2:	681b      	ldr	r3, [r3, #0]
 81077a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81077a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81077aa:	f7fc fdb9 	bl	8104320 <HAL_GetTick>
 81077ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81077b0:	e00e      	b.n	81077d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81077b2:	f7fc fdb5 	bl	8104320 <HAL_GetTick>
 81077b6:	4602      	mov	r2, r0
 81077b8:	69fb      	ldr	r3, [r7, #28]
 81077ba:	1ad3      	subs	r3, r2, r3
 81077bc:	2b19      	cmp	r3, #25
 81077be:	d907      	bls.n	81077d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 81077c0:	6a3b      	ldr	r3, [r7, #32]
 81077c2:	f043 0320 	orr.w	r3, r3, #32
 81077c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 81077c8:	2301      	movs	r3, #1
 81077ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 81077ce:	e006      	b.n	81077de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81077d0:	68fb      	ldr	r3, [r7, #12]
 81077d2:	681b      	ldr	r3, [r3, #0]
 81077d4:	699b      	ldr	r3, [r3, #24]
 81077d6:	f003 0320 	and.w	r3, r3, #32
 81077da:	2b20      	cmp	r3, #32
 81077dc:	d1e9      	bne.n	81077b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81077de:	68fb      	ldr	r3, [r7, #12]
 81077e0:	681b      	ldr	r3, [r3, #0]
 81077e2:	699b      	ldr	r3, [r3, #24]
 81077e4:	f003 0320 	and.w	r3, r3, #32
 81077e8:	2b20      	cmp	r3, #32
 81077ea:	d003      	beq.n	81077f4 <I2C_IsErrorOccurred+0xe0>
 81077ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81077f0:	2b00      	cmp	r3, #0
 81077f2:	d0aa      	beq.n	810774a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81077f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81077f8:	2b00      	cmp	r3, #0
 81077fa:	d103      	bne.n	8107804 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81077fc:	68fb      	ldr	r3, [r7, #12]
 81077fe:	681b      	ldr	r3, [r3, #0]
 8107800:	2220      	movs	r2, #32
 8107802:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8107804:	6a3b      	ldr	r3, [r7, #32]
 8107806:	f043 0304 	orr.w	r3, r3, #4
 810780a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810780c:	2301      	movs	r3, #1
 810780e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8107812:	68fb      	ldr	r3, [r7, #12]
 8107814:	681b      	ldr	r3, [r3, #0]
 8107816:	699b      	ldr	r3, [r3, #24]
 8107818:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810781a:	69bb      	ldr	r3, [r7, #24]
 810781c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107820:	2b00      	cmp	r3, #0
 8107822:	d00b      	beq.n	810783c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8107824:	6a3b      	ldr	r3, [r7, #32]
 8107826:	f043 0301 	orr.w	r3, r3, #1
 810782a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810782c:	68fb      	ldr	r3, [r7, #12]
 810782e:	681b      	ldr	r3, [r3, #0]
 8107830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8107834:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8107836:	2301      	movs	r3, #1
 8107838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810783c:	69bb      	ldr	r3, [r7, #24]
 810783e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8107842:	2b00      	cmp	r3, #0
 8107844:	d00b      	beq.n	810785e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8107846:	6a3b      	ldr	r3, [r7, #32]
 8107848:	f043 0308 	orr.w	r3, r3, #8
 810784c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810784e:	68fb      	ldr	r3, [r7, #12]
 8107850:	681b      	ldr	r3, [r3, #0]
 8107852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8107856:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8107858:	2301      	movs	r3, #1
 810785a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810785e:	69bb      	ldr	r3, [r7, #24]
 8107860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107864:	2b00      	cmp	r3, #0
 8107866:	d00b      	beq.n	8107880 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8107868:	6a3b      	ldr	r3, [r7, #32]
 810786a:	f043 0302 	orr.w	r3, r3, #2
 810786e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107870:	68fb      	ldr	r3, [r7, #12]
 8107872:	681b      	ldr	r3, [r3, #0]
 8107874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8107878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810787a:	2301      	movs	r3, #1
 810787c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8107880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107884:	2b00      	cmp	r3, #0
 8107886:	d01c      	beq.n	81078c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8107888:	68f8      	ldr	r0, [r7, #12]
 810788a:	f7ff fdaf 	bl	81073ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810788e:	68fb      	ldr	r3, [r7, #12]
 8107890:	681b      	ldr	r3, [r3, #0]
 8107892:	6859      	ldr	r1, [r3, #4]
 8107894:	68fb      	ldr	r3, [r7, #12]
 8107896:	681a      	ldr	r2, [r3, #0]
 8107898:	4b0d      	ldr	r3, [pc, #52]	@ (81078d0 <I2C_IsErrorOccurred+0x1bc>)
 810789a:	400b      	ands	r3, r1
 810789c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810789e:	68fb      	ldr	r3, [r7, #12]
 81078a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81078a2:	6a3b      	ldr	r3, [r7, #32]
 81078a4:	431a      	orrs	r2, r3
 81078a6:	68fb      	ldr	r3, [r7, #12]
 81078a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81078aa:	68fb      	ldr	r3, [r7, #12]
 81078ac:	2220      	movs	r2, #32
 81078ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81078b2:	68fb      	ldr	r3, [r7, #12]
 81078b4:	2200      	movs	r2, #0
 81078b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81078ba:	68fb      	ldr	r3, [r7, #12]
 81078bc:	2200      	movs	r2, #0
 81078be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 81078c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 81078c6:	4618      	mov	r0, r3
 81078c8:	3728      	adds	r7, #40	@ 0x28
 81078ca:	46bd      	mov	sp, r7
 81078cc:	bd80      	pop	{r7, pc}
 81078ce:	bf00      	nop
 81078d0:	fe00e800 	.word	0xfe00e800

081078d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81078d4:	b480      	push	{r7}
 81078d6:	b087      	sub	sp, #28
 81078d8:	af00      	add	r7, sp, #0
 81078da:	60f8      	str	r0, [r7, #12]
 81078dc:	607b      	str	r3, [r7, #4]
 81078de:	460b      	mov	r3, r1
 81078e0:	817b      	strh	r3, [r7, #10]
 81078e2:	4613      	mov	r3, r2
 81078e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81078e6:	897b      	ldrh	r3, [r7, #10]
 81078e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81078ec:	7a7b      	ldrb	r3, [r7, #9]
 81078ee:	041b      	lsls	r3, r3, #16
 81078f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81078f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81078fa:	6a3b      	ldr	r3, [r7, #32]
 81078fc:	4313      	orrs	r3, r2
 81078fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8107902:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8107904:	68fb      	ldr	r3, [r7, #12]
 8107906:	681b      	ldr	r3, [r3, #0]
 8107908:	685a      	ldr	r2, [r3, #4]
 810790a:	6a3b      	ldr	r3, [r7, #32]
 810790c:	0d5b      	lsrs	r3, r3, #21
 810790e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8107912:	4b08      	ldr	r3, [pc, #32]	@ (8107934 <I2C_TransferConfig+0x60>)
 8107914:	430b      	orrs	r3, r1
 8107916:	43db      	mvns	r3, r3
 8107918:	ea02 0103 	and.w	r1, r2, r3
 810791c:	68fb      	ldr	r3, [r7, #12]
 810791e:	681b      	ldr	r3, [r3, #0]
 8107920:	697a      	ldr	r2, [r7, #20]
 8107922:	430a      	orrs	r2, r1
 8107924:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8107926:	bf00      	nop
 8107928:	371c      	adds	r7, #28
 810792a:	46bd      	mov	sp, r7
 810792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107930:	4770      	bx	lr
 8107932:	bf00      	nop
 8107934:	03ff63ff 	.word	0x03ff63ff

08107938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8107938:	b480      	push	{r7}
 810793a:	b083      	sub	sp, #12
 810793c:	af00      	add	r7, sp, #0
 810793e:	6078      	str	r0, [r7, #4]
 8107940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107942:	687b      	ldr	r3, [r7, #4]
 8107944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107948:	b2db      	uxtb	r3, r3
 810794a:	2b20      	cmp	r3, #32
 810794c:	d138      	bne.n	81079c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810794e:	687b      	ldr	r3, [r7, #4]
 8107950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107954:	2b01      	cmp	r3, #1
 8107956:	d101      	bne.n	810795c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8107958:	2302      	movs	r3, #2
 810795a:	e032      	b.n	81079c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	2201      	movs	r2, #1
 8107960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	2224      	movs	r2, #36	@ 0x24
 8107968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	681b      	ldr	r3, [r3, #0]
 8107970:	681a      	ldr	r2, [r3, #0]
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	681b      	ldr	r3, [r3, #0]
 8107976:	f022 0201 	bic.w	r2, r2, #1
 810797a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810797c:	687b      	ldr	r3, [r7, #4]
 810797e:	681b      	ldr	r3, [r3, #0]
 8107980:	681a      	ldr	r2, [r3, #0]
 8107982:	687b      	ldr	r3, [r7, #4]
 8107984:	681b      	ldr	r3, [r3, #0]
 8107986:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 810798a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	6819      	ldr	r1, [r3, #0]
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	681b      	ldr	r3, [r3, #0]
 8107996:	683a      	ldr	r2, [r7, #0]
 8107998:	430a      	orrs	r2, r1
 810799a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810799c:	687b      	ldr	r3, [r7, #4]
 810799e:	681b      	ldr	r3, [r3, #0]
 81079a0:	681a      	ldr	r2, [r3, #0]
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	f042 0201 	orr.w	r2, r2, #1
 81079aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81079ac:	687b      	ldr	r3, [r7, #4]
 81079ae:	2220      	movs	r2, #32
 81079b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81079b4:	687b      	ldr	r3, [r7, #4]
 81079b6:	2200      	movs	r2, #0
 81079b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81079bc:	2300      	movs	r3, #0
 81079be:	e000      	b.n	81079c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81079c0:	2302      	movs	r3, #2
  }
}
 81079c2:	4618      	mov	r0, r3
 81079c4:	370c      	adds	r7, #12
 81079c6:	46bd      	mov	sp, r7
 81079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079cc:	4770      	bx	lr

081079ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81079ce:	b480      	push	{r7}
 81079d0:	b085      	sub	sp, #20
 81079d2:	af00      	add	r7, sp, #0
 81079d4:	6078      	str	r0, [r7, #4]
 81079d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81079de:	b2db      	uxtb	r3, r3
 81079e0:	2b20      	cmp	r3, #32
 81079e2:	d139      	bne.n	8107a58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81079e4:	687b      	ldr	r3, [r7, #4]
 81079e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81079ea:	2b01      	cmp	r3, #1
 81079ec:	d101      	bne.n	81079f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81079ee:	2302      	movs	r3, #2
 81079f0:	e033      	b.n	8107a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	2201      	movs	r2, #1
 81079f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81079fa:	687b      	ldr	r3, [r7, #4]
 81079fc:	2224      	movs	r2, #36	@ 0x24
 81079fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	681b      	ldr	r3, [r3, #0]
 8107a06:	681a      	ldr	r2, [r3, #0]
 8107a08:	687b      	ldr	r3, [r7, #4]
 8107a0a:	681b      	ldr	r3, [r3, #0]
 8107a0c:	f022 0201 	bic.w	r2, r2, #1
 8107a10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	681b      	ldr	r3, [r3, #0]
 8107a18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8107a1a:	68fb      	ldr	r3, [r7, #12]
 8107a1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8107a20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8107a22:	683b      	ldr	r3, [r7, #0]
 8107a24:	021b      	lsls	r3, r3, #8
 8107a26:	68fa      	ldr	r2, [r7, #12]
 8107a28:	4313      	orrs	r3, r2
 8107a2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	68fa      	ldr	r2, [r7, #12]
 8107a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8107a34:	687b      	ldr	r3, [r7, #4]
 8107a36:	681b      	ldr	r3, [r3, #0]
 8107a38:	681a      	ldr	r2, [r3, #0]
 8107a3a:	687b      	ldr	r3, [r7, #4]
 8107a3c:	681b      	ldr	r3, [r3, #0]
 8107a3e:	f042 0201 	orr.w	r2, r2, #1
 8107a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8107a44:	687b      	ldr	r3, [r7, #4]
 8107a46:	2220      	movs	r2, #32
 8107a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	2200      	movs	r2, #0
 8107a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107a54:	2300      	movs	r3, #0
 8107a56:	e000      	b.n	8107a5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8107a58:	2302      	movs	r3, #2
  }
}
 8107a5a:	4618      	mov	r0, r3
 8107a5c:	3714      	adds	r7, #20
 8107a5e:	46bd      	mov	sp, r7
 8107a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a64:	4770      	bx	lr
	...

08107a68 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8107a68:	b580      	push	{r7, lr}
 8107a6a:	b084      	sub	sp, #16
 8107a6c:	af00      	add	r7, sp, #0
 8107a6e:	60f8      	str	r0, [r7, #12]
 8107a70:	460b      	mov	r3, r1
 8107a72:	607a      	str	r2, [r7, #4]
 8107a74:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8107a76:	4b37      	ldr	r3, [pc, #220]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107a78:	681b      	ldr	r3, [r3, #0]
 8107a7a:	f023 0201 	bic.w	r2, r3, #1
 8107a7e:	4935      	ldr	r1, [pc, #212]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107a80:	68fb      	ldr	r3, [r7, #12]
 8107a82:	4313      	orrs	r3, r2
 8107a84:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	2b00      	cmp	r3, #0
 8107a8a:	d123      	bne.n	8107ad4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8107a8c:	f7fe fa7c 	bl	8105f88 <HAL_GetCurrentCPUID>
 8107a90:	4603      	mov	r3, r0
 8107a92:	2b03      	cmp	r3, #3
 8107a94:	d158      	bne.n	8107b48 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8107a96:	4b2f      	ldr	r3, [pc, #188]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107a98:	691b      	ldr	r3, [r3, #16]
 8107a9a:	4a2e      	ldr	r2, [pc, #184]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107a9c:	f023 0301 	bic.w	r3, r3, #1
 8107aa0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8107b58 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107aa4:	691b      	ldr	r3, [r3, #16]
 8107aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8107b58 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107aa8:	f043 0304 	orr.w	r3, r3, #4
 8107aac:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107aae:	f3bf 8f4f 	dsb	sy
}
 8107ab2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107ab4:	f3bf 8f6f 	isb	sy
}
 8107ab8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107aba:	7afb      	ldrb	r3, [r7, #11]
 8107abc:	2b01      	cmp	r3, #1
 8107abe:	d101      	bne.n	8107ac4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107ac0:	bf30      	wfi
 8107ac2:	e000      	b.n	8107ac6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107ac4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107ac6:	4b24      	ldr	r3, [pc, #144]	@ (8107b58 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107ac8:	691b      	ldr	r3, [r3, #16]
 8107aca:	4a23      	ldr	r2, [pc, #140]	@ (8107b58 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107acc:	f023 0304 	bic.w	r3, r3, #4
 8107ad0:	6113      	str	r3, [r2, #16]
 8107ad2:	e03c      	b.n	8107b4e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8107ad4:	687b      	ldr	r3, [r7, #4]
 8107ad6:	2b01      	cmp	r3, #1
 8107ad8:	d123      	bne.n	8107b22 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8107ada:	f7fe fa55 	bl	8105f88 <HAL_GetCurrentCPUID>
 8107ade:	4603      	mov	r3, r0
 8107ae0:	2b01      	cmp	r3, #1
 8107ae2:	d133      	bne.n	8107b4c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8107ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107ae6:	695b      	ldr	r3, [r3, #20]
 8107ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107aea:	f023 0302 	bic.w	r3, r3, #2
 8107aee:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107af0:	4b19      	ldr	r3, [pc, #100]	@ (8107b58 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107af2:	691b      	ldr	r3, [r3, #16]
 8107af4:	4a18      	ldr	r2, [pc, #96]	@ (8107b58 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107af6:	f043 0304 	orr.w	r3, r3, #4
 8107afa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107afc:	f3bf 8f4f 	dsb	sy
}
 8107b00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107b02:	f3bf 8f6f 	isb	sy
}
 8107b06:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107b08:	7afb      	ldrb	r3, [r7, #11]
 8107b0a:	2b01      	cmp	r3, #1
 8107b0c:	d101      	bne.n	8107b12 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107b0e:	bf30      	wfi
 8107b10:	e000      	b.n	8107b14 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107b12:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107b14:	4b10      	ldr	r3, [pc, #64]	@ (8107b58 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107b16:	691b      	ldr	r3, [r3, #16]
 8107b18:	4a0f      	ldr	r2, [pc, #60]	@ (8107b58 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107b1a:	f023 0304 	bic.w	r3, r3, #4
 8107b1e:	6113      	str	r3, [r2, #16]
 8107b20:	e015      	b.n	8107b4e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107b22:	f7fe fa31 	bl	8105f88 <HAL_GetCurrentCPUID>
 8107b26:	4603      	mov	r3, r0
 8107b28:	2b03      	cmp	r3, #3
 8107b2a:	d106      	bne.n	8107b3a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8107b2c:	4b09      	ldr	r3, [pc, #36]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b2e:	691b      	ldr	r3, [r3, #16]
 8107b30:	4a08      	ldr	r2, [pc, #32]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b32:	f023 0304 	bic.w	r3, r3, #4
 8107b36:	6113      	str	r3, [r2, #16]
 8107b38:	e009      	b.n	8107b4e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8107b3a:	4b06      	ldr	r3, [pc, #24]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b3c:	695b      	ldr	r3, [r3, #20]
 8107b3e:	4a05      	ldr	r2, [pc, #20]	@ (8107b54 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107b40:	f023 0304 	bic.w	r3, r3, #4
 8107b44:	6153      	str	r3, [r2, #20]
 8107b46:	e002      	b.n	8107b4e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107b48:	bf00      	nop
 8107b4a:	e000      	b.n	8107b4e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107b4c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107b4e:	3710      	adds	r7, #16
 8107b50:	46bd      	mov	sp, r7
 8107b52:	bd80      	pop	{r7, pc}
 8107b54:	58024800 	.word	0x58024800
 8107b58:	e000ed00 	.word	0xe000ed00

08107b5c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107b5c:	b580      	push	{r7, lr}
 8107b5e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107b60:	f7fe fa12 	bl	8105f88 <HAL_GetCurrentCPUID>
 8107b64:	4603      	mov	r3, r0
 8107b66:	2b03      	cmp	r3, #3
 8107b68:	d101      	bne.n	8107b6e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8107b6a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107b6c:	e001      	b.n	8107b72 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107b6e:	bf40      	sev
    __WFE ();
 8107b70:	bf20      	wfe
}
 8107b72:	bf00      	nop
 8107b74:	bd80      	pop	{r7, pc}
	...

08107b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8107b78:	b480      	push	{r7}
 8107b7a:	b089      	sub	sp, #36	@ 0x24
 8107b7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8107b7e:	4bb3      	ldr	r3, [pc, #716]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107b80:	691b      	ldr	r3, [r3, #16]
 8107b82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8107b86:	2b18      	cmp	r3, #24
 8107b88:	f200 8155 	bhi.w	8107e36 <HAL_RCC_GetSysClockFreq+0x2be>
 8107b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8107b94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8107b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b92:	bf00      	nop
 8107b94:	08107bf9 	.word	0x08107bf9
 8107b98:	08107e37 	.word	0x08107e37
 8107b9c:	08107e37 	.word	0x08107e37
 8107ba0:	08107e37 	.word	0x08107e37
 8107ba4:	08107e37 	.word	0x08107e37
 8107ba8:	08107e37 	.word	0x08107e37
 8107bac:	08107e37 	.word	0x08107e37
 8107bb0:	08107e37 	.word	0x08107e37
 8107bb4:	08107c1f 	.word	0x08107c1f
 8107bb8:	08107e37 	.word	0x08107e37
 8107bbc:	08107e37 	.word	0x08107e37
 8107bc0:	08107e37 	.word	0x08107e37
 8107bc4:	08107e37 	.word	0x08107e37
 8107bc8:	08107e37 	.word	0x08107e37
 8107bcc:	08107e37 	.word	0x08107e37
 8107bd0:	08107e37 	.word	0x08107e37
 8107bd4:	08107c25 	.word	0x08107c25
 8107bd8:	08107e37 	.word	0x08107e37
 8107bdc:	08107e37 	.word	0x08107e37
 8107be0:	08107e37 	.word	0x08107e37
 8107be4:	08107e37 	.word	0x08107e37
 8107be8:	08107e37 	.word	0x08107e37
 8107bec:	08107e37 	.word	0x08107e37
 8107bf0:	08107e37 	.word	0x08107e37
 8107bf4:	08107c2b 	.word	0x08107c2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107bf8:	4b94      	ldr	r3, [pc, #592]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107bfa:	681b      	ldr	r3, [r3, #0]
 8107bfc:	f003 0320 	and.w	r3, r3, #32
 8107c00:	2b00      	cmp	r3, #0
 8107c02:	d009      	beq.n	8107c18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107c04:	4b91      	ldr	r3, [pc, #580]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107c06:	681b      	ldr	r3, [r3, #0]
 8107c08:	08db      	lsrs	r3, r3, #3
 8107c0a:	f003 0303 	and.w	r3, r3, #3
 8107c0e:	4a90      	ldr	r2, [pc, #576]	@ (8107e50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107c10:	fa22 f303 	lsr.w	r3, r2, r3
 8107c14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8107c16:	e111      	b.n	8107e3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8107c18:	4b8d      	ldr	r3, [pc, #564]	@ (8107e50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107c1a:	61bb      	str	r3, [r7, #24]
      break;
 8107c1c:	e10e      	b.n	8107e3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8107c1e:	4b8d      	ldr	r3, [pc, #564]	@ (8107e54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8107c20:	61bb      	str	r3, [r7, #24]
      break;
 8107c22:	e10b      	b.n	8107e3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8107c24:	4b8c      	ldr	r3, [pc, #560]	@ (8107e58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8107c26:	61bb      	str	r3, [r7, #24]
      break;
 8107c28:	e108      	b.n	8107e3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107c2a:	4b88      	ldr	r3, [pc, #544]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c2e:	f003 0303 	and.w	r3, r3, #3
 8107c32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8107c34:	4b85      	ldr	r3, [pc, #532]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c38:	091b      	lsrs	r3, r3, #4
 8107c3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107c3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8107c40:	4b82      	ldr	r3, [pc, #520]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107c44:	f003 0301 	and.w	r3, r3, #1
 8107c48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8107c4a:	4b80      	ldr	r3, [pc, #512]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107c4e:	08db      	lsrs	r3, r3, #3
 8107c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107c54:	68fa      	ldr	r2, [r7, #12]
 8107c56:	fb02 f303 	mul.w	r3, r2, r3
 8107c5a:	ee07 3a90 	vmov	s15, r3
 8107c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8107c66:	693b      	ldr	r3, [r7, #16]
 8107c68:	2b00      	cmp	r3, #0
 8107c6a:	f000 80e1 	beq.w	8107e30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8107c6e:	697b      	ldr	r3, [r7, #20]
 8107c70:	2b02      	cmp	r3, #2
 8107c72:	f000 8083 	beq.w	8107d7c <HAL_RCC_GetSysClockFreq+0x204>
 8107c76:	697b      	ldr	r3, [r7, #20]
 8107c78:	2b02      	cmp	r3, #2
 8107c7a:	f200 80a1 	bhi.w	8107dc0 <HAL_RCC_GetSysClockFreq+0x248>
 8107c7e:	697b      	ldr	r3, [r7, #20]
 8107c80:	2b00      	cmp	r3, #0
 8107c82:	d003      	beq.n	8107c8c <HAL_RCC_GetSysClockFreq+0x114>
 8107c84:	697b      	ldr	r3, [r7, #20]
 8107c86:	2b01      	cmp	r3, #1
 8107c88:	d056      	beq.n	8107d38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8107c8a:	e099      	b.n	8107dc0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107c8e:	681b      	ldr	r3, [r3, #0]
 8107c90:	f003 0320 	and.w	r3, r3, #32
 8107c94:	2b00      	cmp	r3, #0
 8107c96:	d02d      	beq.n	8107cf4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107c98:	4b6c      	ldr	r3, [pc, #432]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107c9a:	681b      	ldr	r3, [r3, #0]
 8107c9c:	08db      	lsrs	r3, r3, #3
 8107c9e:	f003 0303 	and.w	r3, r3, #3
 8107ca2:	4a6b      	ldr	r2, [pc, #428]	@ (8107e50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8107ca8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107caa:	687b      	ldr	r3, [r7, #4]
 8107cac:	ee07 3a90 	vmov	s15, r3
 8107cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cb4:	693b      	ldr	r3, [r7, #16]
 8107cb6:	ee07 3a90 	vmov	s15, r3
 8107cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107cc2:	4b62      	ldr	r3, [pc, #392]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107cca:	ee07 3a90 	vmov	s15, r3
 8107cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8107cd6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8107e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8107cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107cee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8107cf2:	e087      	b.n	8107e04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107cf4:	693b      	ldr	r3, [r7, #16]
 8107cf6:	ee07 3a90 	vmov	s15, r3
 8107cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cfe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8107e60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8107d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d06:	4b51      	ldr	r3, [pc, #324]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d0e:	ee07 3a90 	vmov	s15, r3
 8107d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8107d1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8107e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8107d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107d36:	e065      	b.n	8107e04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107d38:	693b      	ldr	r3, [r7, #16]
 8107d3a:	ee07 3a90 	vmov	s15, r3
 8107d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8107e64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8107d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d4a:	4b40      	ldr	r3, [pc, #256]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d52:	ee07 3a90 	vmov	s15, r3
 8107d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8107d5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8107e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8107d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107d7a:	e043      	b.n	8107e04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107d7c:	693b      	ldr	r3, [r7, #16]
 8107d7e:	ee07 3a90 	vmov	s15, r3
 8107d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8107e68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8107d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d96:	ee07 3a90 	vmov	s15, r3
 8107d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8107da2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8107e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8107da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107dba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107dbe:	e021      	b.n	8107e04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107dc0:	693b      	ldr	r3, [r7, #16]
 8107dc2:	ee07 3a90 	vmov	s15, r3
 8107dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8107e64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8107dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dda:	ee07 3a90 	vmov	s15, r3
 8107dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8107de6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8107e5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8107dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107dfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107e02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8107e04:	4b11      	ldr	r3, [pc, #68]	@ (8107e4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107e08:	0a5b      	lsrs	r3, r3, #9
 8107e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e0e:	3301      	adds	r3, #1
 8107e10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8107e12:	683b      	ldr	r3, [r7, #0]
 8107e14:	ee07 3a90 	vmov	s15, r3
 8107e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8107e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e28:	ee17 3a90 	vmov	r3, s15
 8107e2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8107e2e:	e005      	b.n	8107e3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8107e30:	2300      	movs	r3, #0
 8107e32:	61bb      	str	r3, [r7, #24]
      break;
 8107e34:	e002      	b.n	8107e3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8107e36:	4b07      	ldr	r3, [pc, #28]	@ (8107e54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8107e38:	61bb      	str	r3, [r7, #24]
      break;
 8107e3a:	bf00      	nop
  }

  return sysclockfreq;
 8107e3c:	69bb      	ldr	r3, [r7, #24]
}
 8107e3e:	4618      	mov	r0, r3
 8107e40:	3724      	adds	r7, #36	@ 0x24
 8107e42:	46bd      	mov	sp, r7
 8107e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e48:	4770      	bx	lr
 8107e4a:	bf00      	nop
 8107e4c:	58024400 	.word	0x58024400
 8107e50:	03d09000 	.word	0x03d09000
 8107e54:	003d0900 	.word	0x003d0900
 8107e58:	007a1200 	.word	0x007a1200
 8107e5c:	46000000 	.word	0x46000000
 8107e60:	4c742400 	.word	0x4c742400
 8107e64:	4a742400 	.word	0x4a742400
 8107e68:	4af42400 	.word	0x4af42400

08107e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8107e6c:	b580      	push	{r7, lr}
 8107e6e:	b082      	sub	sp, #8
 8107e70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8107e72:	f7ff fe81 	bl	8107b78 <HAL_RCC_GetSysClockFreq>
 8107e76:	4602      	mov	r2, r0
 8107e78:	4b11      	ldr	r3, [pc, #68]	@ (8107ec0 <HAL_RCC_GetHCLKFreq+0x54>)
 8107e7a:	699b      	ldr	r3, [r3, #24]
 8107e7c:	0a1b      	lsrs	r3, r3, #8
 8107e7e:	f003 030f 	and.w	r3, r3, #15
 8107e82:	4910      	ldr	r1, [pc, #64]	@ (8107ec4 <HAL_RCC_GetHCLKFreq+0x58>)
 8107e84:	5ccb      	ldrb	r3, [r1, r3]
 8107e86:	f003 031f 	and.w	r3, r3, #31
 8107e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8107e8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8107e90:	4b0b      	ldr	r3, [pc, #44]	@ (8107ec0 <HAL_RCC_GetHCLKFreq+0x54>)
 8107e92:	699b      	ldr	r3, [r3, #24]
 8107e94:	f003 030f 	and.w	r3, r3, #15
 8107e98:	4a0a      	ldr	r2, [pc, #40]	@ (8107ec4 <HAL_RCC_GetHCLKFreq+0x58>)
 8107e9a:	5cd3      	ldrb	r3, [r2, r3]
 8107e9c:	f003 031f 	and.w	r3, r3, #31
 8107ea0:	687a      	ldr	r2, [r7, #4]
 8107ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8107ea6:	4a08      	ldr	r2, [pc, #32]	@ (8107ec8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107ea8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8107eaa:	4b07      	ldr	r3, [pc, #28]	@ (8107ec8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107eac:	681b      	ldr	r3, [r3, #0]
 8107eae:	4a07      	ldr	r2, [pc, #28]	@ (8107ecc <HAL_RCC_GetHCLKFreq+0x60>)
 8107eb0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8107eb2:	4b05      	ldr	r3, [pc, #20]	@ (8107ec8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107eb4:	681b      	ldr	r3, [r3, #0]
}
 8107eb6:	4618      	mov	r0, r3
 8107eb8:	3708      	adds	r7, #8
 8107eba:	46bd      	mov	sp, r7
 8107ebc:	bd80      	pop	{r7, pc}
 8107ebe:	bf00      	nop
 8107ec0:	58024400 	.word	0x58024400
 8107ec4:	08113978 	.word	0x08113978
 8107ec8:	10000004 	.word	0x10000004
 8107ecc:	10000000 	.word	0x10000000

08107ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8107ed0:	b580      	push	{r7, lr}
 8107ed2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8107ed4:	f7ff ffca 	bl	8107e6c <HAL_RCC_GetHCLKFreq>
 8107ed8:	4602      	mov	r2, r0
 8107eda:	4b06      	ldr	r3, [pc, #24]	@ (8107ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8107edc:	69db      	ldr	r3, [r3, #28]
 8107ede:	091b      	lsrs	r3, r3, #4
 8107ee0:	f003 0307 	and.w	r3, r3, #7
 8107ee4:	4904      	ldr	r1, [pc, #16]	@ (8107ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8107ee6:	5ccb      	ldrb	r3, [r1, r3]
 8107ee8:	f003 031f 	and.w	r3, r3, #31
 8107eec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8107ef0:	4618      	mov	r0, r3
 8107ef2:	bd80      	pop	{r7, pc}
 8107ef4:	58024400 	.word	0x58024400
 8107ef8:	08113978 	.word	0x08113978

08107efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8107efc:	b580      	push	{r7, lr}
 8107efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8107f00:	f7ff ffb4 	bl	8107e6c <HAL_RCC_GetHCLKFreq>
 8107f04:	4602      	mov	r2, r0
 8107f06:	4b06      	ldr	r3, [pc, #24]	@ (8107f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8107f08:	69db      	ldr	r3, [r3, #28]
 8107f0a:	0a1b      	lsrs	r3, r3, #8
 8107f0c:	f003 0307 	and.w	r3, r3, #7
 8107f10:	4904      	ldr	r1, [pc, #16]	@ (8107f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8107f12:	5ccb      	ldrb	r3, [r1, r3]
 8107f14:	f003 031f 	and.w	r3, r3, #31
 8107f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8107f1c:	4618      	mov	r0, r3
 8107f1e:	bd80      	pop	{r7, pc}
 8107f20:	58024400 	.word	0x58024400
 8107f24:	08113978 	.word	0x08113978

08107f28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8107f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107f2c:	b0ca      	sub	sp, #296	@ 0x128
 8107f2e:	af00      	add	r7, sp, #0
 8107f30:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8107f34:	2300      	movs	r3, #0
 8107f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8107f3a:	2300      	movs	r3, #0
 8107f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8107f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8107f4c:	2500      	movs	r5, #0
 8107f4e:	ea54 0305 	orrs.w	r3, r4, r5
 8107f52:	d049      	beq.n	8107fe8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8107f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8107f5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107f5e:	d02f      	beq.n	8107fc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8107f60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107f64:	d828      	bhi.n	8107fb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8107f66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107f6a:	d01a      	beq.n	8107fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8107f6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107f70:	d822      	bhi.n	8107fb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8107f72:	2b00      	cmp	r3, #0
 8107f74:	d003      	beq.n	8107f7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8107f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107f7a:	d007      	beq.n	8107f8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8107f7c:	e01c      	b.n	8107fb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107f7e:	4bb8      	ldr	r3, [pc, #736]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107f82:	4ab7      	ldr	r2, [pc, #732]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107f8a:	e01a      	b.n	8107fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f90:	3308      	adds	r3, #8
 8107f92:	2102      	movs	r1, #2
 8107f94:	4618      	mov	r0, r3
 8107f96:	f002 fb61 	bl	810a65c <RCCEx_PLL2_Config>
 8107f9a:	4603      	mov	r3, r0
 8107f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107fa0:	e00f      	b.n	8107fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fa6:	3328      	adds	r3, #40	@ 0x28
 8107fa8:	2102      	movs	r1, #2
 8107faa:	4618      	mov	r0, r3
 8107fac:	f002 fc08 	bl	810a7c0 <RCCEx_PLL3_Config>
 8107fb0:	4603      	mov	r3, r0
 8107fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107fb6:	e004      	b.n	8107fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107fb8:	2301      	movs	r3, #1
 8107fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107fbe:	e000      	b.n	8107fc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8107fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107fc6:	2b00      	cmp	r3, #0
 8107fc8:	d10a      	bne.n	8107fe0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8107fca:	4ba5      	ldr	r3, [pc, #660]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107fce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8107fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8107fd8:	4aa1      	ldr	r2, [pc, #644]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107fda:	430b      	orrs	r3, r1
 8107fdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8107fde:	e003      	b.n	8107fe8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107fe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8107fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ff0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8107ff4:	f04f 0900 	mov.w	r9, #0
 8107ff8:	ea58 0309 	orrs.w	r3, r8, r9
 8107ffc:	d047      	beq.n	810808e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8107ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108004:	2b04      	cmp	r3, #4
 8108006:	d82a      	bhi.n	810805e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8108008:	a201      	add	r2, pc, #4	@ (adr r2, 8108010 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810800e:	bf00      	nop
 8108010:	08108025 	.word	0x08108025
 8108014:	08108033 	.word	0x08108033
 8108018:	08108049 	.word	0x08108049
 810801c:	08108067 	.word	0x08108067
 8108020:	08108067 	.word	0x08108067
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108024:	4b8e      	ldr	r3, [pc, #568]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108028:	4a8d      	ldr	r2, [pc, #564]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810802a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810802e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108030:	e01a      	b.n	8108068 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108036:	3308      	adds	r3, #8
 8108038:	2100      	movs	r1, #0
 810803a:	4618      	mov	r0, r3
 810803c:	f002 fb0e 	bl	810a65c <RCCEx_PLL2_Config>
 8108040:	4603      	mov	r3, r0
 8108042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108046:	e00f      	b.n	8108068 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810804c:	3328      	adds	r3, #40	@ 0x28
 810804e:	2100      	movs	r1, #0
 8108050:	4618      	mov	r0, r3
 8108052:	f002 fbb5 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108056:	4603      	mov	r3, r0
 8108058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810805c:	e004      	b.n	8108068 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810805e:	2301      	movs	r3, #1
 8108060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108064:	e000      	b.n	8108068 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8108066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810806c:	2b00      	cmp	r3, #0
 810806e:	d10a      	bne.n	8108086 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8108070:	4b7b      	ldr	r3, [pc, #492]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108074:	f023 0107 	bic.w	r1, r3, #7
 8108078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810807c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810807e:	4a78      	ldr	r2, [pc, #480]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108080:	430b      	orrs	r3, r1
 8108082:	6513      	str	r3, [r2, #80]	@ 0x50
 8108084:	e003      	b.n	810808e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810808a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810808e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108096:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810809a:	f04f 0b00 	mov.w	fp, #0
 810809e:	ea5a 030b 	orrs.w	r3, sl, fp
 81080a2:	d04c      	beq.n	810813e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81080aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81080ae:	d030      	beq.n	8108112 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81080b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81080b4:	d829      	bhi.n	810810a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81080b6:	2bc0      	cmp	r3, #192	@ 0xc0
 81080b8:	d02d      	beq.n	8108116 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81080ba:	2bc0      	cmp	r3, #192	@ 0xc0
 81080bc:	d825      	bhi.n	810810a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81080be:	2b80      	cmp	r3, #128	@ 0x80
 81080c0:	d018      	beq.n	81080f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81080c2:	2b80      	cmp	r3, #128	@ 0x80
 81080c4:	d821      	bhi.n	810810a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d002      	beq.n	81080d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81080ca:	2b40      	cmp	r3, #64	@ 0x40
 81080cc:	d007      	beq.n	81080de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81080ce:	e01c      	b.n	810810a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81080d0:	4b63      	ldr	r3, [pc, #396]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81080d4:	4a62      	ldr	r2, [pc, #392]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81080d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81080da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81080dc:	e01c      	b.n	8108118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080e2:	3308      	adds	r3, #8
 81080e4:	2100      	movs	r1, #0
 81080e6:	4618      	mov	r0, r3
 81080e8:	f002 fab8 	bl	810a65c <RCCEx_PLL2_Config>
 81080ec:	4603      	mov	r3, r0
 81080ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81080f2:	e011      	b.n	8108118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080f8:	3328      	adds	r3, #40	@ 0x28
 81080fa:	2100      	movs	r1, #0
 81080fc:	4618      	mov	r0, r3
 81080fe:	f002 fb5f 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108102:	4603      	mov	r3, r0
 8108104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8108108:	e006      	b.n	8108118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810810a:	2301      	movs	r3, #1
 810810c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108110:	e002      	b.n	8108118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8108112:	bf00      	nop
 8108114:	e000      	b.n	8108118 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8108116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810811c:	2b00      	cmp	r3, #0
 810811e:	d10a      	bne.n	8108136 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8108120:	4b4f      	ldr	r3, [pc, #316]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108124:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8108128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810812c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810812e:	4a4c      	ldr	r2, [pc, #304]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108130:	430b      	orrs	r3, r1
 8108132:	6513      	str	r3, [r2, #80]	@ 0x50
 8108134:	e003      	b.n	810813e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810813a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108146:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810814a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810814e:	2300      	movs	r3, #0
 8108150:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8108154:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8108158:	460b      	mov	r3, r1
 810815a:	4313      	orrs	r3, r2
 810815c:	d053      	beq.n	8108206 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108162:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8108166:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810816a:	d035      	beq.n	81081d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810816c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8108170:	d82e      	bhi.n	81081d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8108172:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8108176:	d031      	beq.n	81081dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8108178:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810817c:	d828      	bhi.n	81081d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810817e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108182:	d01a      	beq.n	81081ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8108184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108188:	d822      	bhi.n	81081d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810818a:	2b00      	cmp	r3, #0
 810818c:	d003      	beq.n	8108196 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810818e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8108192:	d007      	beq.n	81081a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8108194:	e01c      	b.n	81081d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108196:	4b32      	ldr	r3, [pc, #200]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810819a:	4a31      	ldr	r2, [pc, #196]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810819c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81081a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81081a2:	e01c      	b.n	81081de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081a8:	3308      	adds	r3, #8
 81081aa:	2100      	movs	r1, #0
 81081ac:	4618      	mov	r0, r3
 81081ae:	f002 fa55 	bl	810a65c <RCCEx_PLL2_Config>
 81081b2:	4603      	mov	r3, r0
 81081b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81081b8:	e011      	b.n	81081de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081be:	3328      	adds	r3, #40	@ 0x28
 81081c0:	2100      	movs	r1, #0
 81081c2:	4618      	mov	r0, r3
 81081c4:	f002 fafc 	bl	810a7c0 <RCCEx_PLL3_Config>
 81081c8:	4603      	mov	r3, r0
 81081ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81081ce:	e006      	b.n	81081de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81081d0:	2301      	movs	r3, #1
 81081d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81081d6:	e002      	b.n	81081de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81081d8:	bf00      	nop
 81081da:	e000      	b.n	81081de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81081dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81081de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081e2:	2b00      	cmp	r3, #0
 81081e4:	d10b      	bne.n	81081fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81081e6:	4b1e      	ldr	r3, [pc, #120]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81081e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81081ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81081f6:	4a1a      	ldr	r2, [pc, #104]	@ (8108260 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81081f8:	430b      	orrs	r3, r1
 81081fa:	6593      	str	r3, [r2, #88]	@ 0x58
 81081fc:	e003      	b.n	8108206 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81081fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8108206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810820e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8108212:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8108216:	2300      	movs	r3, #0
 8108218:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810821c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8108220:	460b      	mov	r3, r1
 8108222:	4313      	orrs	r3, r2
 8108224:	d056      	beq.n	81082d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8108226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810822a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810822e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108232:	d038      	beq.n	81082a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8108234:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108238:	d831      	bhi.n	810829e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810823a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810823e:	d034      	beq.n	81082aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8108240:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8108244:	d82b      	bhi.n	810829e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8108246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810824a:	d01d      	beq.n	8108288 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810824c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108250:	d825      	bhi.n	810829e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8108252:	2b00      	cmp	r3, #0
 8108254:	d006      	beq.n	8108264 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8108256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810825a:	d00a      	beq.n	8108272 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810825c:	e01f      	b.n	810829e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810825e:	bf00      	nop
 8108260:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108264:	4ba2      	ldr	r3, [pc, #648]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108268:	4aa1      	ldr	r2, [pc, #644]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810826a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810826e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108270:	e01c      	b.n	81082ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108276:	3308      	adds	r3, #8
 8108278:	2100      	movs	r1, #0
 810827a:	4618      	mov	r0, r3
 810827c:	f002 f9ee 	bl	810a65c <RCCEx_PLL2_Config>
 8108280:	4603      	mov	r3, r0
 8108282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8108286:	e011      	b.n	81082ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810828c:	3328      	adds	r3, #40	@ 0x28
 810828e:	2100      	movs	r1, #0
 8108290:	4618      	mov	r0, r3
 8108292:	f002 fa95 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108296:	4603      	mov	r3, r0
 8108298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810829c:	e006      	b.n	81082ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810829e:	2301      	movs	r3, #1
 81082a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81082a4:	e002      	b.n	81082ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81082a6:	bf00      	nop
 81082a8:	e000      	b.n	81082ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81082aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81082ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81082b0:	2b00      	cmp	r3, #0
 81082b2:	d10b      	bne.n	81082cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81082b4:	4b8e      	ldr	r3, [pc, #568]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81082b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81082b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81082bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81082c4:	4a8a      	ldr	r2, [pc, #552]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81082c6:	430b      	orrs	r3, r1
 81082c8:	6593      	str	r3, [r2, #88]	@ 0x58
 81082ca:	e003      	b.n	81082d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81082cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81082d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81082d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81082dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81082e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81082e4:	2300      	movs	r3, #0
 81082e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81082ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81082ee:	460b      	mov	r3, r1
 81082f0:	4313      	orrs	r3, r2
 81082f2:	d03a      	beq.n	810836a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81082f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81082fa:	2b30      	cmp	r3, #48	@ 0x30
 81082fc:	d01f      	beq.n	810833e <HAL_RCCEx_PeriphCLKConfig+0x416>
 81082fe:	2b30      	cmp	r3, #48	@ 0x30
 8108300:	d819      	bhi.n	8108336 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8108302:	2b20      	cmp	r3, #32
 8108304:	d00c      	beq.n	8108320 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8108306:	2b20      	cmp	r3, #32
 8108308:	d815      	bhi.n	8108336 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810830a:	2b00      	cmp	r3, #0
 810830c:	d019      	beq.n	8108342 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810830e:	2b10      	cmp	r3, #16
 8108310:	d111      	bne.n	8108336 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108312:	4b77      	ldr	r3, [pc, #476]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108316:	4a76      	ldr	r2, [pc, #472]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810831c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810831e:	e011      	b.n	8108344 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108324:	3308      	adds	r3, #8
 8108326:	2102      	movs	r1, #2
 8108328:	4618      	mov	r0, r3
 810832a:	f002 f997 	bl	810a65c <RCCEx_PLL2_Config>
 810832e:	4603      	mov	r3, r0
 8108330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8108334:	e006      	b.n	8108344 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8108336:	2301      	movs	r3, #1
 8108338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810833c:	e002      	b.n	8108344 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810833e:	bf00      	nop
 8108340:	e000      	b.n	8108344 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8108342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108348:	2b00      	cmp	r3, #0
 810834a:	d10a      	bne.n	8108362 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810834c:	4b68      	ldr	r3, [pc, #416]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810834e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108350:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8108354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810835a:	4a65      	ldr	r2, [pc, #404]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810835c:	430b      	orrs	r3, r1
 810835e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8108360:	e003      	b.n	810836a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108372:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8108376:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810837a:	2300      	movs	r3, #0
 810837c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8108380:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8108384:	460b      	mov	r3, r1
 8108386:	4313      	orrs	r3, r2
 8108388:	d051      	beq.n	810842e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810838e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108394:	d035      	beq.n	8108402 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8108396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810839a:	d82e      	bhi.n	81083fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810839c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81083a0:	d031      	beq.n	8108406 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81083a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81083a6:	d828      	bhi.n	81083fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81083a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81083ac:	d01a      	beq.n	81083e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81083ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81083b2:	d822      	bhi.n	81083fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81083b4:	2b00      	cmp	r3, #0
 81083b6:	d003      	beq.n	81083c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81083b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81083bc:	d007      	beq.n	81083ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81083be:	e01c      	b.n	81083fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81083c0:	4b4b      	ldr	r3, [pc, #300]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81083c4:	4a4a      	ldr	r2, [pc, #296]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81083c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81083ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81083cc:	e01c      	b.n	8108408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81083ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083d2:	3308      	adds	r3, #8
 81083d4:	2100      	movs	r1, #0
 81083d6:	4618      	mov	r0, r3
 81083d8:	f002 f940 	bl	810a65c <RCCEx_PLL2_Config>
 81083dc:	4603      	mov	r3, r0
 81083de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81083e2:	e011      	b.n	8108408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81083e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083e8:	3328      	adds	r3, #40	@ 0x28
 81083ea:	2100      	movs	r1, #0
 81083ec:	4618      	mov	r0, r3
 81083ee:	f002 f9e7 	bl	810a7c0 <RCCEx_PLL3_Config>
 81083f2:	4603      	mov	r3, r0
 81083f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81083f8:	e006      	b.n	8108408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81083fa:	2301      	movs	r3, #1
 81083fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108400:	e002      	b.n	8108408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8108402:	bf00      	nop
 8108404:	e000      	b.n	8108408 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8108406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810840c:	2b00      	cmp	r3, #0
 810840e:	d10a      	bne.n	8108426 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8108410:	4b37      	ldr	r3, [pc, #220]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108414:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8108418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810841c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810841e:	4a34      	ldr	r2, [pc, #208]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108420:	430b      	orrs	r3, r1
 8108422:	6513      	str	r3, [r2, #80]	@ 0x50
 8108424:	e003      	b.n	810842e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108426:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810842a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810842e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108436:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810843a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810843e:	2300      	movs	r3, #0
 8108440:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8108444:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8108448:	460b      	mov	r3, r1
 810844a:	4313      	orrs	r3, r2
 810844c:	d056      	beq.n	81084fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810844e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108458:	d033      	beq.n	81084c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810845a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810845e:	d82c      	bhi.n	81084ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108460:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108464:	d02f      	beq.n	81084c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8108466:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810846a:	d826      	bhi.n	81084ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 810846c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108470:	d02b      	beq.n	81084ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8108472:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108476:	d820      	bhi.n	81084ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810847c:	d012      	beq.n	81084a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810847e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108482:	d81a      	bhi.n	81084ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108484:	2b00      	cmp	r3, #0
 8108486:	d022      	beq.n	81084ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8108488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810848c:	d115      	bne.n	81084ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108492:	3308      	adds	r3, #8
 8108494:	2101      	movs	r1, #1
 8108496:	4618      	mov	r0, r3
 8108498:	f002 f8e0 	bl	810a65c <RCCEx_PLL2_Config>
 810849c:	4603      	mov	r3, r0
 810849e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81084a2:	e015      	b.n	81084d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084a8:	3328      	adds	r3, #40	@ 0x28
 81084aa:	2101      	movs	r1, #1
 81084ac:	4618      	mov	r0, r3
 81084ae:	f002 f987 	bl	810a7c0 <RCCEx_PLL3_Config>
 81084b2:	4603      	mov	r3, r0
 81084b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81084b8:	e00a      	b.n	81084d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81084ba:	2301      	movs	r3, #1
 81084bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81084c0:	e006      	b.n	81084d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81084c2:	bf00      	nop
 81084c4:	e004      	b.n	81084d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81084c6:	bf00      	nop
 81084c8:	e002      	b.n	81084d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81084ca:	bf00      	nop
 81084cc:	e000      	b.n	81084d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81084ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81084d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81084d4:	2b00      	cmp	r3, #0
 81084d6:	d10d      	bne.n	81084f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81084d8:	4b05      	ldr	r3, [pc, #20]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81084da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81084dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81084e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81084e6:	4a02      	ldr	r2, [pc, #8]	@ (81084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81084e8:	430b      	orrs	r3, r1
 81084ea:	6513      	str	r3, [r2, #80]	@ 0x50
 81084ec:	e006      	b.n	81084fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81084ee:	bf00      	nop
 81084f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81084f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81084f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81084fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108504:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8108508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810850c:	2300      	movs	r3, #0
 810850e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8108512:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8108516:	460b      	mov	r3, r1
 8108518:	4313      	orrs	r3, r2
 810851a:	d055      	beq.n	81085c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8108524:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108528:	d033      	beq.n	8108592 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810852a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810852e:	d82c      	bhi.n	810858a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108534:	d02f      	beq.n	8108596 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8108536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810853a:	d826      	bhi.n	810858a <HAL_RCCEx_PeriphCLKConfig+0x662>
 810853c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108540:	d02b      	beq.n	810859a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8108542:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108546:	d820      	bhi.n	810858a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810854c:	d012      	beq.n	8108574 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810854e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108552:	d81a      	bhi.n	810858a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108554:	2b00      	cmp	r3, #0
 8108556:	d022      	beq.n	810859e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8108558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810855c:	d115      	bne.n	810858a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810855e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108562:	3308      	adds	r3, #8
 8108564:	2101      	movs	r1, #1
 8108566:	4618      	mov	r0, r3
 8108568:	f002 f878 	bl	810a65c <RCCEx_PLL2_Config>
 810856c:	4603      	mov	r3, r0
 810856e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8108572:	e015      	b.n	81085a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108578:	3328      	adds	r3, #40	@ 0x28
 810857a:	2101      	movs	r1, #1
 810857c:	4618      	mov	r0, r3
 810857e:	f002 f91f 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108582:	4603      	mov	r3, r0
 8108584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8108588:	e00a      	b.n	81085a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810858a:	2301      	movs	r3, #1
 810858c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108590:	e006      	b.n	81085a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108592:	bf00      	nop
 8108594:	e004      	b.n	81085a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108596:	bf00      	nop
 8108598:	e002      	b.n	81085a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810859a:	bf00      	nop
 810859c:	e000      	b.n	81085a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810859e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81085a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81085a4:	2b00      	cmp	r3, #0
 81085a6:	d10b      	bne.n	81085c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81085a8:	4ba4      	ldr	r3, [pc, #656]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81085aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81085ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81085b8:	4aa0      	ldr	r2, [pc, #640]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81085ba:	430b      	orrs	r3, r1
 81085bc:	6593      	str	r3, [r2, #88]	@ 0x58
 81085be:	e003      	b.n	81085c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81085c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81085c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81085d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81085d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81085d8:	2300      	movs	r3, #0
 81085da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81085de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81085e2:	460b      	mov	r3, r1
 81085e4:	4313      	orrs	r3, r2
 81085e6:	d037      	beq.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81085e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81085ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81085f2:	d00e      	beq.n	8108612 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81085f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81085f8:	d816      	bhi.n	8108628 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81085fa:	2b00      	cmp	r3, #0
 81085fc:	d018      	beq.n	8108630 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81085fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108602:	d111      	bne.n	8108628 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108604:	4b8d      	ldr	r3, [pc, #564]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108608:	4a8c      	ldr	r2, [pc, #560]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810860a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810860e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8108610:	e00f      	b.n	8108632 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108616:	3308      	adds	r3, #8
 8108618:	2101      	movs	r1, #1
 810861a:	4618      	mov	r0, r3
 810861c:	f002 f81e 	bl	810a65c <RCCEx_PLL2_Config>
 8108620:	4603      	mov	r3, r0
 8108622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8108626:	e004      	b.n	8108632 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108628:	2301      	movs	r3, #1
 810862a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810862e:	e000      	b.n	8108632 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8108630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108636:	2b00      	cmp	r3, #0
 8108638:	d10a      	bne.n	8108650 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810863a:	4b80      	ldr	r3, [pc, #512]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810863c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810863e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8108642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108648:	4a7c      	ldr	r2, [pc, #496]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810864a:	430b      	orrs	r3, r1
 810864c:	6513      	str	r3, [r2, #80]	@ 0x50
 810864e:	e003      	b.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108660:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8108664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8108668:	2300      	movs	r3, #0
 810866a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810866e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8108672:	460b      	mov	r3, r1
 8108674:	4313      	orrs	r3, r2
 8108676:	d039      	beq.n	81086ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8108678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810867c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810867e:	2b03      	cmp	r3, #3
 8108680:	d81c      	bhi.n	81086bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8108682:	a201      	add	r2, pc, #4	@ (adr r2, 8108688 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8108684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108688:	081086c5 	.word	0x081086c5
 810868c:	08108699 	.word	0x08108699
 8108690:	081086a7 	.word	0x081086a7
 8108694:	081086c5 	.word	0x081086c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108698:	4b68      	ldr	r3, [pc, #416]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810869a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810869c:	4a67      	ldr	r2, [pc, #412]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810869e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81086a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81086a4:	e00f      	b.n	81086c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81086a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086aa:	3308      	adds	r3, #8
 81086ac:	2102      	movs	r1, #2
 81086ae:	4618      	mov	r0, r3
 81086b0:	f001 ffd4 	bl	810a65c <RCCEx_PLL2_Config>
 81086b4:	4603      	mov	r3, r0
 81086b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81086ba:	e004      	b.n	81086c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81086bc:	2301      	movs	r3, #1
 81086be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81086c2:	e000      	b.n	81086c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81086c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81086c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086ca:	2b00      	cmp	r3, #0
 81086cc:	d10a      	bne.n	81086e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81086ce:	4b5b      	ldr	r3, [pc, #364]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81086d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81086d2:	f023 0103 	bic.w	r1, r3, #3
 81086d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81086dc:	4a57      	ldr	r2, [pc, #348]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81086de:	430b      	orrs	r3, r1
 81086e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81086e2:	e003      	b.n	81086ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81086e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81086ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81086f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81086f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81086fc:	2300      	movs	r3, #0
 81086fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8108702:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8108706:	460b      	mov	r3, r1
 8108708:	4313      	orrs	r3, r2
 810870a:	f000 809f 	beq.w	810884c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810870e:	4b4c      	ldr	r3, [pc, #304]	@ (8108840 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8108710:	681b      	ldr	r3, [r3, #0]
 8108712:	4a4b      	ldr	r2, [pc, #300]	@ (8108840 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8108714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108718:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810871a:	f7fb fe01 	bl	8104320 <HAL_GetTick>
 810871e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108722:	e00b      	b.n	810873c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8108724:	f7fb fdfc 	bl	8104320 <HAL_GetTick>
 8108728:	4602      	mov	r2, r0
 810872a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810872e:	1ad3      	subs	r3, r2, r3
 8108730:	2b64      	cmp	r3, #100	@ 0x64
 8108732:	d903      	bls.n	810873c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8108734:	2303      	movs	r3, #3
 8108736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810873a:	e005      	b.n	8108748 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810873c:	4b40      	ldr	r3, [pc, #256]	@ (8108840 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108744:	2b00      	cmp	r3, #0
 8108746:	d0ed      	beq.n	8108724 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8108748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810874c:	2b00      	cmp	r3, #0
 810874e:	d179      	bne.n	8108844 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8108750:	4b3a      	ldr	r3, [pc, #232]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108752:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8108754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810875c:	4053      	eors	r3, r2
 810875e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108762:	2b00      	cmp	r3, #0
 8108764:	d015      	beq.n	8108792 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8108766:	4b35      	ldr	r3, [pc, #212]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810876a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810876e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8108772:	4b32      	ldr	r3, [pc, #200]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108776:	4a31      	ldr	r2, [pc, #196]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810877c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810877e:	4b2f      	ldr	r3, [pc, #188]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108782:	4a2e      	ldr	r2, [pc, #184]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108788:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810878a:	4a2c      	ldr	r2, [pc, #176]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810878c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108790:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8108792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108796:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810879a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810879e:	d118      	bne.n	81087d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81087a0:	f7fb fdbe 	bl	8104320 <HAL_GetTick>
 81087a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81087a8:	e00d      	b.n	81087c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81087aa:	f7fb fdb9 	bl	8104320 <HAL_GetTick>
 81087ae:	4602      	mov	r2, r0
 81087b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81087b4:	1ad2      	subs	r2, r2, r3
 81087b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 81087ba:	429a      	cmp	r2, r3
 81087bc:	d903      	bls.n	81087c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81087be:	2303      	movs	r3, #3
 81087c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81087c4:	e005      	b.n	81087d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81087c6:	4b1d      	ldr	r3, [pc, #116]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81087c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81087ca:	f003 0302 	and.w	r3, r3, #2
 81087ce:	2b00      	cmp	r3, #0
 81087d0:	d0eb      	beq.n	81087aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81087d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81087d6:	2b00      	cmp	r3, #0
 81087d8:	d12b      	bne.n	8108832 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81087da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81087de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81087e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81087e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81087ea:	d110      	bne.n	810880e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81087ec:	4b13      	ldr	r3, [pc, #76]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81087ee:	691b      	ldr	r3, [r3, #16]
 81087f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81087f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81087f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81087fc:	091b      	lsrs	r3, r3, #4
 81087fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8108802:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8108806:	4a0d      	ldr	r2, [pc, #52]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108808:	430b      	orrs	r3, r1
 810880a:	6113      	str	r3, [r2, #16]
 810880c:	e005      	b.n	810881a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810880e:	4b0b      	ldr	r3, [pc, #44]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108810:	691b      	ldr	r3, [r3, #16]
 8108812:	4a0a      	ldr	r2, [pc, #40]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108814:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8108818:	6113      	str	r3, [r2, #16]
 810881a:	4b08      	ldr	r3, [pc, #32]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810881c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810882a:	4a04      	ldr	r2, [pc, #16]	@ (810883c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810882c:	430b      	orrs	r3, r1
 810882e:	6713      	str	r3, [r2, #112]	@ 0x70
 8108830:	e00c      	b.n	810884c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8108832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810883a:	e007      	b.n	810884c <HAL_RCCEx_PeriphCLKConfig+0x924>
 810883c:	58024400 	.word	0x58024400
 8108840:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108854:	f002 0301 	and.w	r3, r2, #1
 8108858:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810885c:	2300      	movs	r3, #0
 810885e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8108862:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8108866:	460b      	mov	r3, r1
 8108868:	4313      	orrs	r3, r2
 810886a:	f000 8089 	beq.w	8108980 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8108874:	2b28      	cmp	r3, #40	@ 0x28
 8108876:	d86b      	bhi.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8108878:	a201      	add	r2, pc, #4	@ (adr r2, 8108880 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810887a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810887e:	bf00      	nop
 8108880:	08108959 	.word	0x08108959
 8108884:	08108951 	.word	0x08108951
 8108888:	08108951 	.word	0x08108951
 810888c:	08108951 	.word	0x08108951
 8108890:	08108951 	.word	0x08108951
 8108894:	08108951 	.word	0x08108951
 8108898:	08108951 	.word	0x08108951
 810889c:	08108951 	.word	0x08108951
 81088a0:	08108925 	.word	0x08108925
 81088a4:	08108951 	.word	0x08108951
 81088a8:	08108951 	.word	0x08108951
 81088ac:	08108951 	.word	0x08108951
 81088b0:	08108951 	.word	0x08108951
 81088b4:	08108951 	.word	0x08108951
 81088b8:	08108951 	.word	0x08108951
 81088bc:	08108951 	.word	0x08108951
 81088c0:	0810893b 	.word	0x0810893b
 81088c4:	08108951 	.word	0x08108951
 81088c8:	08108951 	.word	0x08108951
 81088cc:	08108951 	.word	0x08108951
 81088d0:	08108951 	.word	0x08108951
 81088d4:	08108951 	.word	0x08108951
 81088d8:	08108951 	.word	0x08108951
 81088dc:	08108951 	.word	0x08108951
 81088e0:	08108959 	.word	0x08108959
 81088e4:	08108951 	.word	0x08108951
 81088e8:	08108951 	.word	0x08108951
 81088ec:	08108951 	.word	0x08108951
 81088f0:	08108951 	.word	0x08108951
 81088f4:	08108951 	.word	0x08108951
 81088f8:	08108951 	.word	0x08108951
 81088fc:	08108951 	.word	0x08108951
 8108900:	08108959 	.word	0x08108959
 8108904:	08108951 	.word	0x08108951
 8108908:	08108951 	.word	0x08108951
 810890c:	08108951 	.word	0x08108951
 8108910:	08108951 	.word	0x08108951
 8108914:	08108951 	.word	0x08108951
 8108918:	08108951 	.word	0x08108951
 810891c:	08108951 	.word	0x08108951
 8108920:	08108959 	.word	0x08108959
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108928:	3308      	adds	r3, #8
 810892a:	2101      	movs	r1, #1
 810892c:	4618      	mov	r0, r3
 810892e:	f001 fe95 	bl	810a65c <RCCEx_PLL2_Config>
 8108932:	4603      	mov	r3, r0
 8108934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8108938:	e00f      	b.n	810895a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810893e:	3328      	adds	r3, #40	@ 0x28
 8108940:	2101      	movs	r1, #1
 8108942:	4618      	mov	r0, r3
 8108944:	f001 ff3c 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108948:	4603      	mov	r3, r0
 810894a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810894e:	e004      	b.n	810895a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108950:	2301      	movs	r3, #1
 8108952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108956:	e000      	b.n	810895a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8108958:	bf00      	nop
    }

    if (ret == HAL_OK)
 810895a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810895e:	2b00      	cmp	r3, #0
 8108960:	d10a      	bne.n	8108978 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8108962:	4bbf      	ldr	r3, [pc, #764]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108966:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810896e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8108970:	4abb      	ldr	r2, [pc, #748]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108972:	430b      	orrs	r3, r1
 8108974:	6553      	str	r3, [r2, #84]	@ 0x54
 8108976:	e003      	b.n	8108980 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810897c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8108980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108988:	f002 0302 	and.w	r3, r2, #2
 810898c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8108990:	2300      	movs	r3, #0
 8108992:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8108996:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810899a:	460b      	mov	r3, r1
 810899c:	4313      	orrs	r3, r2
 810899e:	d041      	beq.n	8108a24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81089a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81089a6:	2b05      	cmp	r3, #5
 81089a8:	d824      	bhi.n	81089f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81089aa:	a201      	add	r2, pc, #4	@ (adr r2, 81089b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81089b0:	081089fd 	.word	0x081089fd
 81089b4:	081089c9 	.word	0x081089c9
 81089b8:	081089df 	.word	0x081089df
 81089bc:	081089fd 	.word	0x081089fd
 81089c0:	081089fd 	.word	0x081089fd
 81089c4:	081089fd 	.word	0x081089fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81089c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089cc:	3308      	adds	r3, #8
 81089ce:	2101      	movs	r1, #1
 81089d0:	4618      	mov	r0, r3
 81089d2:	f001 fe43 	bl	810a65c <RCCEx_PLL2_Config>
 81089d6:	4603      	mov	r3, r0
 81089d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81089dc:	e00f      	b.n	81089fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81089de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089e2:	3328      	adds	r3, #40	@ 0x28
 81089e4:	2101      	movs	r1, #1
 81089e6:	4618      	mov	r0, r3
 81089e8:	f001 feea 	bl	810a7c0 <RCCEx_PLL3_Config>
 81089ec:	4603      	mov	r3, r0
 81089ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81089f2:	e004      	b.n	81089fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81089f4:	2301      	movs	r3, #1
 81089f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81089fa:	e000      	b.n	81089fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81089fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81089fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108a02:	2b00      	cmp	r3, #0
 8108a04:	d10a      	bne.n	8108a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8108a06:	4b96      	ldr	r3, [pc, #600]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a0a:	f023 0107 	bic.w	r1, r3, #7
 8108a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108a14:	4a92      	ldr	r2, [pc, #584]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108a16:	430b      	orrs	r3, r1
 8108a18:	6553      	str	r3, [r2, #84]	@ 0x54
 8108a1a:	e003      	b.n	8108a24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108a20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8108a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a2c:	f002 0304 	and.w	r3, r2, #4
 8108a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8108a34:	2300      	movs	r3, #0
 8108a36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8108a3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8108a3e:	460b      	mov	r3, r1
 8108a40:	4313      	orrs	r3, r2
 8108a42:	d044      	beq.n	8108ace <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8108a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108a4c:	2b05      	cmp	r3, #5
 8108a4e:	d825      	bhi.n	8108a9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8108a50:	a201      	add	r2, pc, #4	@ (adr r2, 8108a58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8108a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a56:	bf00      	nop
 8108a58:	08108aa5 	.word	0x08108aa5
 8108a5c:	08108a71 	.word	0x08108a71
 8108a60:	08108a87 	.word	0x08108a87
 8108a64:	08108aa5 	.word	0x08108aa5
 8108a68:	08108aa5 	.word	0x08108aa5
 8108a6c:	08108aa5 	.word	0x08108aa5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a74:	3308      	adds	r3, #8
 8108a76:	2101      	movs	r1, #1
 8108a78:	4618      	mov	r0, r3
 8108a7a:	f001 fdef 	bl	810a65c <RCCEx_PLL2_Config>
 8108a7e:	4603      	mov	r3, r0
 8108a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108a84:	e00f      	b.n	8108aa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a8a:	3328      	adds	r3, #40	@ 0x28
 8108a8c:	2101      	movs	r1, #1
 8108a8e:	4618      	mov	r0, r3
 8108a90:	f001 fe96 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108a94:	4603      	mov	r3, r0
 8108a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108a9a:	e004      	b.n	8108aa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108a9c:	2301      	movs	r3, #1
 8108a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108aa2:	e000      	b.n	8108aa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8108aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108aaa:	2b00      	cmp	r3, #0
 8108aac:	d10b      	bne.n	8108ac6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8108aae:	4b6c      	ldr	r3, [pc, #432]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108ab2:	f023 0107 	bic.w	r1, r3, #7
 8108ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108abe:	4a68      	ldr	r2, [pc, #416]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108ac0:	430b      	orrs	r3, r1
 8108ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8108ac4:	e003      	b.n	8108ace <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8108ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ad6:	f002 0320 	and.w	r3, r2, #32
 8108ada:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8108ade:	2300      	movs	r3, #0
 8108ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8108ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8108ae8:	460b      	mov	r3, r1
 8108aea:	4313      	orrs	r3, r2
 8108aec:	d055      	beq.n	8108b9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8108aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108afa:	d033      	beq.n	8108b64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8108afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108b00:	d82c      	bhi.n	8108b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108b06:	d02f      	beq.n	8108b68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8108b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108b0c:	d826      	bhi.n	8108b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108b0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108b12:	d02b      	beq.n	8108b6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8108b14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108b18:	d820      	bhi.n	8108b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108b1e:	d012      	beq.n	8108b46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8108b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108b24:	d81a      	bhi.n	8108b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108b26:	2b00      	cmp	r3, #0
 8108b28:	d022      	beq.n	8108b70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8108b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108b2e:	d115      	bne.n	8108b5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b34:	3308      	adds	r3, #8
 8108b36:	2100      	movs	r1, #0
 8108b38:	4618      	mov	r0, r3
 8108b3a:	f001 fd8f 	bl	810a65c <RCCEx_PLL2_Config>
 8108b3e:	4603      	mov	r3, r0
 8108b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108b44:	e015      	b.n	8108b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b4a:	3328      	adds	r3, #40	@ 0x28
 8108b4c:	2102      	movs	r1, #2
 8108b4e:	4618      	mov	r0, r3
 8108b50:	f001 fe36 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108b54:	4603      	mov	r3, r0
 8108b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108b5a:	e00a      	b.n	8108b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108b5c:	2301      	movs	r3, #1
 8108b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108b62:	e006      	b.n	8108b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108b64:	bf00      	nop
 8108b66:	e004      	b.n	8108b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108b68:	bf00      	nop
 8108b6a:	e002      	b.n	8108b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108b6c:	bf00      	nop
 8108b6e:	e000      	b.n	8108b72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108b76:	2b00      	cmp	r3, #0
 8108b78:	d10b      	bne.n	8108b92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8108b7a:	4b39      	ldr	r3, [pc, #228]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108b7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8108b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108b8a:	4a35      	ldr	r2, [pc, #212]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108b8c:	430b      	orrs	r3, r1
 8108b8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8108b90:	e003      	b.n	8108b9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8108b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ba2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8108ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8108baa:	2300      	movs	r3, #0
 8108bac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8108bb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8108bb4:	460b      	mov	r3, r1
 8108bb6:	4313      	orrs	r3, r2
 8108bb8:	d058      	beq.n	8108c6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8108bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8108bc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8108bc6:	d033      	beq.n	8108c30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8108bc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8108bcc:	d82c      	bhi.n	8108c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108bd2:	d02f      	beq.n	8108c34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8108bd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108bd8:	d826      	bhi.n	8108c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108bda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8108bde:	d02b      	beq.n	8108c38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8108be0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8108be4:	d820      	bhi.n	8108c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108be6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108bea:	d012      	beq.n	8108c12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8108bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108bf0:	d81a      	bhi.n	8108c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108bf2:	2b00      	cmp	r3, #0
 8108bf4:	d022      	beq.n	8108c3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8108bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108bfa:	d115      	bne.n	8108c28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c00:	3308      	adds	r3, #8
 8108c02:	2100      	movs	r1, #0
 8108c04:	4618      	mov	r0, r3
 8108c06:	f001 fd29 	bl	810a65c <RCCEx_PLL2_Config>
 8108c0a:	4603      	mov	r3, r0
 8108c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8108c10:	e015      	b.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c16:	3328      	adds	r3, #40	@ 0x28
 8108c18:	2102      	movs	r1, #2
 8108c1a:	4618      	mov	r0, r3
 8108c1c:	f001 fdd0 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108c20:	4603      	mov	r3, r0
 8108c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8108c26:	e00a      	b.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108c28:	2301      	movs	r3, #1
 8108c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108c2e:	e006      	b.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108c30:	bf00      	nop
 8108c32:	e004      	b.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108c34:	bf00      	nop
 8108c36:	e002      	b.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108c38:	bf00      	nop
 8108c3a:	e000      	b.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108c42:	2b00      	cmp	r3, #0
 8108c44:	d10e      	bne.n	8108c64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8108c46:	4b06      	ldr	r3, [pc, #24]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108c4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8108c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8108c56:	4a02      	ldr	r2, [pc, #8]	@ (8108c60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108c58:	430b      	orrs	r3, r1
 8108c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8108c5c:	e006      	b.n	8108c6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8108c5e:	bf00      	nop
 8108c60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108c68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8108c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8108c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8108c7c:	2300      	movs	r3, #0
 8108c7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8108c82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8108c86:	460b      	mov	r3, r1
 8108c88:	4313      	orrs	r3, r2
 8108c8a:	d055      	beq.n	8108d38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8108c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8108c94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8108c98:	d033      	beq.n	8108d02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8108c9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8108c9e:	d82c      	bhi.n	8108cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108ca4:	d02f      	beq.n	8108d06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8108ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108caa:	d826      	bhi.n	8108cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108cac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8108cb0:	d02b      	beq.n	8108d0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8108cb2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8108cb6:	d820      	bhi.n	8108cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108cb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108cbc:	d012      	beq.n	8108ce4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8108cbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108cc2:	d81a      	bhi.n	8108cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108cc4:	2b00      	cmp	r3, #0
 8108cc6:	d022      	beq.n	8108d0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8108cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108ccc:	d115      	bne.n	8108cfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108cd2:	3308      	adds	r3, #8
 8108cd4:	2100      	movs	r1, #0
 8108cd6:	4618      	mov	r0, r3
 8108cd8:	f001 fcc0 	bl	810a65c <RCCEx_PLL2_Config>
 8108cdc:	4603      	mov	r3, r0
 8108cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8108ce2:	e015      	b.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ce8:	3328      	adds	r3, #40	@ 0x28
 8108cea:	2102      	movs	r1, #2
 8108cec:	4618      	mov	r0, r3
 8108cee:	f001 fd67 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108cf2:	4603      	mov	r3, r0
 8108cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8108cf8:	e00a      	b.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108cfa:	2301      	movs	r3, #1
 8108cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108d00:	e006      	b.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108d02:	bf00      	nop
 8108d04:	e004      	b.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108d06:	bf00      	nop
 8108d08:	e002      	b.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108d0a:	bf00      	nop
 8108d0c:	e000      	b.n	8108d10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8108d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d14:	2b00      	cmp	r3, #0
 8108d16:	d10b      	bne.n	8108d30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8108d18:	4ba1      	ldr	r3, [pc, #644]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108d1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8108d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8108d28:	4a9d      	ldr	r2, [pc, #628]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108d2a:	430b      	orrs	r3, r1
 8108d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8108d2e:	e003      	b.n	8108d38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8108d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d40:	f002 0308 	and.w	r3, r2, #8
 8108d44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8108d48:	2300      	movs	r3, #0
 8108d4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8108d4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8108d52:	460b      	mov	r3, r1
 8108d54:	4313      	orrs	r3, r2
 8108d56:	d01e      	beq.n	8108d96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8108d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108d64:	d10c      	bne.n	8108d80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d6a:	3328      	adds	r3, #40	@ 0x28
 8108d6c:	2102      	movs	r1, #2
 8108d6e:	4618      	mov	r0, r3
 8108d70:	f001 fd26 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108d74:	4603      	mov	r3, r0
 8108d76:	2b00      	cmp	r3, #0
 8108d78:	d002      	beq.n	8108d80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8108d7a:	2301      	movs	r3, #1
 8108d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8108d80:	4b87      	ldr	r3, [pc, #540]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108d84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8108d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108d90:	4a83      	ldr	r2, [pc, #524]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108d92:	430b      	orrs	r3, r1
 8108d94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8108d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d9e:	f002 0310 	and.w	r3, r2, #16
 8108da2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8108da6:	2300      	movs	r3, #0
 8108da8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8108dac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8108db0:	460b      	mov	r3, r1
 8108db2:	4313      	orrs	r3, r2
 8108db4:	d01e      	beq.n	8108df4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8108db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8108dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108dc2:	d10c      	bne.n	8108dde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dc8:	3328      	adds	r3, #40	@ 0x28
 8108dca:	2102      	movs	r1, #2
 8108dcc:	4618      	mov	r0, r3
 8108dce:	f001 fcf7 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108dd2:	4603      	mov	r3, r0
 8108dd4:	2b00      	cmp	r3, #0
 8108dd6:	d002      	beq.n	8108dde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8108dd8:	2301      	movs	r3, #1
 8108dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8108dde:	4b70      	ldr	r3, [pc, #448]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108de2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8108de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8108dee:	4a6c      	ldr	r2, [pc, #432]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108df0:	430b      	orrs	r3, r1
 8108df2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8108df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108dfc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8108e00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8108e04:	2300      	movs	r3, #0
 8108e06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8108e0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8108e0e:	460b      	mov	r3, r1
 8108e10:	4313      	orrs	r3, r2
 8108e12:	d03e      	beq.n	8108e92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8108e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8108e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108e20:	d022      	beq.n	8108e68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8108e22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108e26:	d81b      	bhi.n	8108e60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8108e28:	2b00      	cmp	r3, #0
 8108e2a:	d003      	beq.n	8108e34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8108e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108e30:	d00b      	beq.n	8108e4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8108e32:	e015      	b.n	8108e60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e38:	3308      	adds	r3, #8
 8108e3a:	2100      	movs	r1, #0
 8108e3c:	4618      	mov	r0, r3
 8108e3e:	f001 fc0d 	bl	810a65c <RCCEx_PLL2_Config>
 8108e42:	4603      	mov	r3, r0
 8108e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8108e48:	e00f      	b.n	8108e6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e4e:	3328      	adds	r3, #40	@ 0x28
 8108e50:	2102      	movs	r1, #2
 8108e52:	4618      	mov	r0, r3
 8108e54:	f001 fcb4 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108e58:	4603      	mov	r3, r0
 8108e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8108e5e:	e004      	b.n	8108e6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108e60:	2301      	movs	r3, #1
 8108e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108e66:	e000      	b.n	8108e6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8108e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108e6e:	2b00      	cmp	r3, #0
 8108e70:	d10b      	bne.n	8108e8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8108e72:	4b4b      	ldr	r3, [pc, #300]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108e76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8108e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8108e82:	4a47      	ldr	r2, [pc, #284]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108e84:	430b      	orrs	r3, r1
 8108e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8108e88:	e003      	b.n	8108e92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8108e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108e9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8108e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8108ea0:	2300      	movs	r3, #0
 8108ea2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8108ea4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8108ea8:	460b      	mov	r3, r1
 8108eaa:	4313      	orrs	r3, r2
 8108eac:	d03b      	beq.n	8108f26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8108eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108eb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8108eba:	d01f      	beq.n	8108efc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8108ebc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8108ec0:	d818      	bhi.n	8108ef4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8108ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108ec6:	d003      	beq.n	8108ed0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8108ec8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8108ecc:	d007      	beq.n	8108ede <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8108ece:	e011      	b.n	8108ef4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108ed0:	4b33      	ldr	r3, [pc, #204]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ed4:	4a32      	ldr	r2, [pc, #200]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8108edc:	e00f      	b.n	8108efe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ee2:	3328      	adds	r3, #40	@ 0x28
 8108ee4:	2101      	movs	r1, #1
 8108ee6:	4618      	mov	r0, r3
 8108ee8:	f001 fc6a 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108eec:	4603      	mov	r3, r0
 8108eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8108ef2:	e004      	b.n	8108efe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108ef4:	2301      	movs	r3, #1
 8108ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108efa:	e000      	b.n	8108efe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8108efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108f02:	2b00      	cmp	r3, #0
 8108f04:	d10b      	bne.n	8108f1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8108f06:	4b26      	ldr	r3, [pc, #152]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108f0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8108f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108f16:	4a22      	ldr	r2, [pc, #136]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f18:	430b      	orrs	r3, r1
 8108f1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8108f1c:	e003      	b.n	8108f26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8108f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8108f32:	673b      	str	r3, [r7, #112]	@ 0x70
 8108f34:	2300      	movs	r3, #0
 8108f36:	677b      	str	r3, [r7, #116]	@ 0x74
 8108f38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8108f3c:	460b      	mov	r3, r1
 8108f3e:	4313      	orrs	r3, r2
 8108f40:	d034      	beq.n	8108fac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8108f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108f48:	2b00      	cmp	r3, #0
 8108f4a:	d003      	beq.n	8108f54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8108f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108f50:	d007      	beq.n	8108f62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8108f52:	e011      	b.n	8108f78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108f54:	4b12      	ldr	r3, [pc, #72]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f58:	4a11      	ldr	r2, [pc, #68]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8108f60:	e00e      	b.n	8108f80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f66:	3308      	adds	r3, #8
 8108f68:	2102      	movs	r1, #2
 8108f6a:	4618      	mov	r0, r3
 8108f6c:	f001 fb76 	bl	810a65c <RCCEx_PLL2_Config>
 8108f70:	4603      	mov	r3, r0
 8108f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8108f76:	e003      	b.n	8108f80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8108f78:	2301      	movs	r3, #1
 8108f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108f84:	2b00      	cmp	r3, #0
 8108f86:	d10d      	bne.n	8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8108f88:	4b05      	ldr	r3, [pc, #20]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108f8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8108f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108f96:	4a02      	ldr	r2, [pc, #8]	@ (8108fa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108f98:	430b      	orrs	r3, r1
 8108f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8108f9c:	e006      	b.n	8108fac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8108f9e:	bf00      	nop
 8108fa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8108fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fb4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8108fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8108fba:	2300      	movs	r3, #0
 8108fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8108fbe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8108fc2:	460b      	mov	r3, r1
 8108fc4:	4313      	orrs	r3, r2
 8108fc6:	d00c      	beq.n	8108fe2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108fcc:	3328      	adds	r3, #40	@ 0x28
 8108fce:	2102      	movs	r1, #2
 8108fd0:	4618      	mov	r0, r3
 8108fd2:	f001 fbf5 	bl	810a7c0 <RCCEx_PLL3_Config>
 8108fd6:	4603      	mov	r3, r0
 8108fd8:	2b00      	cmp	r3, #0
 8108fda:	d002      	beq.n	8108fe2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8108fdc:	2301      	movs	r3, #1
 8108fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8108fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8108fee:	663b      	str	r3, [r7, #96]	@ 0x60
 8108ff0:	2300      	movs	r3, #0
 8108ff2:	667b      	str	r3, [r7, #100]	@ 0x64
 8108ff4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8108ff8:	460b      	mov	r3, r1
 8108ffa:	4313      	orrs	r3, r2
 8108ffc:	d038      	beq.n	8109070 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8108ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810900a:	d018      	beq.n	810903e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 810900c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8109010:	d811      	bhi.n	8109036 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8109012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8109016:	d014      	beq.n	8109042 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8109018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810901c:	d80b      	bhi.n	8109036 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810901e:	2b00      	cmp	r3, #0
 8109020:	d011      	beq.n	8109046 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8109022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109026:	d106      	bne.n	8109036 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109028:	4bc3      	ldr	r3, [pc, #780]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810902a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810902c:	4ac2      	ldr	r2, [pc, #776]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810902e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8109034:	e008      	b.n	8109048 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109036:	2301      	movs	r3, #1
 8109038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810903c:	e004      	b.n	8109048 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810903e:	bf00      	nop
 8109040:	e002      	b.n	8109048 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8109042:	bf00      	nop
 8109044:	e000      	b.n	8109048 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8109046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810904c:	2b00      	cmp	r3, #0
 810904e:	d10b      	bne.n	8109068 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8109050:	4bb9      	ldr	r3, [pc, #740]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109054:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8109058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810905c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109060:	4ab5      	ldr	r2, [pc, #724]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109062:	430b      	orrs	r3, r1
 8109064:	6553      	str	r3, [r2, #84]	@ 0x54
 8109066:	e003      	b.n	8109070 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810906c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8109070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109078:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810907c:	65bb      	str	r3, [r7, #88]	@ 0x58
 810907e:	2300      	movs	r3, #0
 8109080:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8109082:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8109086:	460b      	mov	r3, r1
 8109088:	4313      	orrs	r3, r2
 810908a:	d009      	beq.n	81090a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810908c:	4baa      	ldr	r3, [pc, #680]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810908e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109090:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8109094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810909a:	4aa7      	ldr	r2, [pc, #668]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810909c:	430b      	orrs	r3, r1
 810909e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81090a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81090a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81090a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81090ac:	653b      	str	r3, [r7, #80]	@ 0x50
 81090ae:	2300      	movs	r3, #0
 81090b0:	657b      	str	r3, [r7, #84]	@ 0x54
 81090b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81090b6:	460b      	mov	r3, r1
 81090b8:	4313      	orrs	r3, r2
 81090ba:	d00a      	beq.n	81090d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81090bc:	4b9e      	ldr	r3, [pc, #632]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81090be:	691b      	ldr	r3, [r3, #16]
 81090c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81090c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81090c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81090cc:	4a9a      	ldr	r2, [pc, #616]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81090ce:	430b      	orrs	r3, r1
 81090d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81090da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81090de:	64bb      	str	r3, [r7, #72]	@ 0x48
 81090e0:	2300      	movs	r3, #0
 81090e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81090e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81090e8:	460b      	mov	r3, r1
 81090ea:	4313      	orrs	r3, r2
 81090ec:	d009      	beq.n	8109102 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81090ee:	4b92      	ldr	r3, [pc, #584]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81090f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81090f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81090f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81090fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81090fc:	4a8e      	ldr	r2, [pc, #568]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81090fe:	430b      	orrs	r3, r1
 8109100:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8109102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109106:	e9d3 2300 	ldrd	r2, r3, [r3]
 810910a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810910e:	643b      	str	r3, [r7, #64]	@ 0x40
 8109110:	2300      	movs	r3, #0
 8109112:	647b      	str	r3, [r7, #68]	@ 0x44
 8109114:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8109118:	460b      	mov	r3, r1
 810911a:	4313      	orrs	r3, r2
 810911c:	d00e      	beq.n	810913c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810911e:	4b86      	ldr	r3, [pc, #536]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109120:	691b      	ldr	r3, [r3, #16]
 8109122:	4a85      	ldr	r2, [pc, #532]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109124:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8109128:	6113      	str	r3, [r2, #16]
 810912a:	4b83      	ldr	r3, [pc, #524]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810912c:	6919      	ldr	r1, [r3, #16]
 810912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109132:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8109136:	4a80      	ldr	r2, [pc, #512]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109138:	430b      	orrs	r3, r1
 810913a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810913c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109144:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8109148:	63bb      	str	r3, [r7, #56]	@ 0x38
 810914a:	2300      	movs	r3, #0
 810914c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810914e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8109152:	460b      	mov	r3, r1
 8109154:	4313      	orrs	r3, r2
 8109156:	d009      	beq.n	810916c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8109158:	4b77      	ldr	r3, [pc, #476]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810915a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810915c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8109160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109166:	4a74      	ldr	r2, [pc, #464]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109168:	430b      	orrs	r3, r1
 810916a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810916c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109174:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8109178:	633b      	str	r3, [r7, #48]	@ 0x30
 810917a:	2300      	movs	r3, #0
 810917c:	637b      	str	r3, [r7, #52]	@ 0x34
 810917e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8109182:	460b      	mov	r3, r1
 8109184:	4313      	orrs	r3, r2
 8109186:	d00a      	beq.n	810919e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8109188:	4b6b      	ldr	r3, [pc, #428]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810918a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810918c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8109190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8109198:	4a67      	ldr	r2, [pc, #412]	@ (8109338 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810919a:	430b      	orrs	r3, r1
 810919c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091a6:	2100      	movs	r1, #0
 81091a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 81091aa:	f003 0301 	and.w	r3, r3, #1
 81091ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81091b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81091b4:	460b      	mov	r3, r1
 81091b6:	4313      	orrs	r3, r2
 81091b8:	d011      	beq.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81091ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091be:	3308      	adds	r3, #8
 81091c0:	2100      	movs	r1, #0
 81091c2:	4618      	mov	r0, r3
 81091c4:	f001 fa4a 	bl	810a65c <RCCEx_PLL2_Config>
 81091c8:	4603      	mov	r3, r0
 81091ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81091ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81091d2:	2b00      	cmp	r3, #0
 81091d4:	d003      	beq.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81091d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81091da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81091de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091e6:	2100      	movs	r1, #0
 81091e8:	6239      	str	r1, [r7, #32]
 81091ea:	f003 0302 	and.w	r3, r3, #2
 81091ee:	627b      	str	r3, [r7, #36]	@ 0x24
 81091f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81091f4:	460b      	mov	r3, r1
 81091f6:	4313      	orrs	r3, r2
 81091f8:	d011      	beq.n	810921e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81091fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091fe:	3308      	adds	r3, #8
 8109200:	2101      	movs	r1, #1
 8109202:	4618      	mov	r0, r3
 8109204:	f001 fa2a 	bl	810a65c <RCCEx_PLL2_Config>
 8109208:	4603      	mov	r3, r0
 810920a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810920e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109212:	2b00      	cmp	r3, #0
 8109214:	d003      	beq.n	810921e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810921a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109226:	2100      	movs	r1, #0
 8109228:	61b9      	str	r1, [r7, #24]
 810922a:	f003 0304 	and.w	r3, r3, #4
 810922e:	61fb      	str	r3, [r7, #28]
 8109230:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8109234:	460b      	mov	r3, r1
 8109236:	4313      	orrs	r3, r2
 8109238:	d011      	beq.n	810925e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810923e:	3308      	adds	r3, #8
 8109240:	2102      	movs	r1, #2
 8109242:	4618      	mov	r0, r3
 8109244:	f001 fa0a 	bl	810a65c <RCCEx_PLL2_Config>
 8109248:	4603      	mov	r3, r0
 810924a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810924e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109252:	2b00      	cmp	r3, #0
 8109254:	d003      	beq.n	810925e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810925a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109266:	2100      	movs	r1, #0
 8109268:	6139      	str	r1, [r7, #16]
 810926a:	f003 0308 	and.w	r3, r3, #8
 810926e:	617b      	str	r3, [r7, #20]
 8109270:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8109274:	460b      	mov	r3, r1
 8109276:	4313      	orrs	r3, r2
 8109278:	d011      	beq.n	810929e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810927e:	3328      	adds	r3, #40	@ 0x28
 8109280:	2100      	movs	r1, #0
 8109282:	4618      	mov	r0, r3
 8109284:	f001 fa9c 	bl	810a7c0 <RCCEx_PLL3_Config>
 8109288:	4603      	mov	r3, r0
 810928a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810928e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109292:	2b00      	cmp	r3, #0
 8109294:	d003      	beq.n	810929e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810929a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81092a6:	2100      	movs	r1, #0
 81092a8:	60b9      	str	r1, [r7, #8]
 81092aa:	f003 0310 	and.w	r3, r3, #16
 81092ae:	60fb      	str	r3, [r7, #12]
 81092b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81092b4:	460b      	mov	r3, r1
 81092b6:	4313      	orrs	r3, r2
 81092b8:	d011      	beq.n	81092de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092be:	3328      	adds	r3, #40	@ 0x28
 81092c0:	2101      	movs	r1, #1
 81092c2:	4618      	mov	r0, r3
 81092c4:	f001 fa7c 	bl	810a7c0 <RCCEx_PLL3_Config>
 81092c8:	4603      	mov	r3, r0
 81092ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81092ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81092d2:	2b00      	cmp	r3, #0
 81092d4:	d003      	beq.n	81092de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81092d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81092da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81092de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81092e6:	2100      	movs	r1, #0
 81092e8:	6039      	str	r1, [r7, #0]
 81092ea:	f003 0320 	and.w	r3, r3, #32
 81092ee:	607b      	str	r3, [r7, #4]
 81092f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 81092f4:	460b      	mov	r3, r1
 81092f6:	4313      	orrs	r3, r2
 81092f8:	d011      	beq.n	810931e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092fe:	3328      	adds	r3, #40	@ 0x28
 8109300:	2102      	movs	r1, #2
 8109302:	4618      	mov	r0, r3
 8109304:	f001 fa5c 	bl	810a7c0 <RCCEx_PLL3_Config>
 8109308:	4603      	mov	r3, r0
 810930a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810930e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109312:	2b00      	cmp	r3, #0
 8109314:	d003      	beq.n	810931e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810931a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810931e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8109322:	2b00      	cmp	r3, #0
 8109324:	d101      	bne.n	810932a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8109326:	2300      	movs	r3, #0
 8109328:	e000      	b.n	810932c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810932a:	2301      	movs	r3, #1
}
 810932c:	4618      	mov	r0, r3
 810932e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8109332:	46bd      	mov	sp, r7
 8109334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109338:	58024400 	.word	0x58024400

0810933c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 810933c:	b580      	push	{r7, lr}
 810933e:	b090      	sub	sp, #64	@ 0x40
 8109340:	af00      	add	r7, sp, #0
 8109342:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8109346:	e9d7 2300 	ldrd	r2, r3, [r7]
 810934a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810934e:	430b      	orrs	r3, r1
 8109350:	f040 8094 	bne.w	810947c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8109354:	4b9e      	ldr	r3, [pc, #632]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109358:	f003 0307 	and.w	r3, r3, #7
 810935c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109360:	2b04      	cmp	r3, #4
 8109362:	f200 8087 	bhi.w	8109474 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8109366:	a201      	add	r2, pc, #4	@ (adr r2, 810936c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8109368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810936c:	08109381 	.word	0x08109381
 8109370:	081093a9 	.word	0x081093a9
 8109374:	081093d1 	.word	0x081093d1
 8109378:	0810946d 	.word	0x0810946d
 810937c:	081093f9 	.word	0x081093f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109380:	4b93      	ldr	r3, [pc, #588]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109382:	681b      	ldr	r3, [r3, #0]
 8109384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109388:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810938c:	d108      	bne.n	81093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810938e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109392:	4618      	mov	r0, r3
 8109394:	f001 f810 	bl	810a3b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810939a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810939c:	f000 bd45 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81093a0:	2300      	movs	r3, #0
 81093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81093a4:	f000 bd41 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81093a8:	4b89      	ldr	r3, [pc, #548]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81093aa:	681b      	ldr	r3, [r3, #0]
 81093ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81093b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81093b4:	d108      	bne.n	81093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81093b6:	f107 0318 	add.w	r3, r7, #24
 81093ba:	4618      	mov	r0, r3
 81093bc:	f000 fd54 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81093c0:	69bb      	ldr	r3, [r7, #24]
 81093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81093c4:	f000 bd31 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81093c8:	2300      	movs	r3, #0
 81093ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81093cc:	f000 bd2d 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81093d0:	4b7f      	ldr	r3, [pc, #508]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81093d2:	681b      	ldr	r3, [r3, #0]
 81093d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81093d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81093dc:	d108      	bne.n	81093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81093de:	f107 030c 	add.w	r3, r7, #12
 81093e2:	4618      	mov	r0, r3
 81093e4:	f000 fe94 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81093e8:	68fb      	ldr	r3, [r7, #12]
 81093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81093ec:	f000 bd1d 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81093f0:	2300      	movs	r3, #0
 81093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81093f4:	f000 bd19 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81093f8:	4b75      	ldr	r3, [pc, #468]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81093fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81093fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109400:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109402:	4b73      	ldr	r3, [pc, #460]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109404:	681b      	ldr	r3, [r3, #0]
 8109406:	f003 0304 	and.w	r3, r3, #4
 810940a:	2b04      	cmp	r3, #4
 810940c:	d10c      	bne.n	8109428 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810940e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109410:	2b00      	cmp	r3, #0
 8109412:	d109      	bne.n	8109428 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109414:	4b6e      	ldr	r3, [pc, #440]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109416:	681b      	ldr	r3, [r3, #0]
 8109418:	08db      	lsrs	r3, r3, #3
 810941a:	f003 0303 	and.w	r3, r3, #3
 810941e:	4a6d      	ldr	r2, [pc, #436]	@ (81095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8109420:	fa22 f303 	lsr.w	r3, r2, r3
 8109424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109426:	e01f      	b.n	8109468 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109428:	4b69      	ldr	r3, [pc, #420]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810942a:	681b      	ldr	r3, [r3, #0]
 810942c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109434:	d106      	bne.n	8109444 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8109436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810943c:	d102      	bne.n	8109444 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810943e:	4b66      	ldr	r3, [pc, #408]	@ (81095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8109440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109442:	e011      	b.n	8109468 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109444:	4b62      	ldr	r3, [pc, #392]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109446:	681b      	ldr	r3, [r3, #0]
 8109448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810944c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109450:	d106      	bne.n	8109460 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8109452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109458:	d102      	bne.n	8109460 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810945a:	4b60      	ldr	r3, [pc, #384]	@ (81095dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810945c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810945e:	e003      	b.n	8109468 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109460:	2300      	movs	r3, #0
 8109462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109464:	f000 bce1 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109468:	f000 bcdf 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810946c:	4b5c      	ldr	r3, [pc, #368]	@ (81095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109470:	f000 bcdb 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109474:	2300      	movs	r3, #0
 8109476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109478:	f000 bcd7 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810947c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109480:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8109484:	430b      	orrs	r3, r1
 8109486:	f040 80ad 	bne.w	81095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810948a:	4b51      	ldr	r3, [pc, #324]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810948c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810948e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8109492:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8109494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810949a:	d056      	beq.n	810954a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810949e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81094a2:	f200 8090 	bhi.w	81095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81094a8:	2bc0      	cmp	r3, #192	@ 0xc0
 81094aa:	f000 8088 	beq.w	81095be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81094ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81094b0:	2bc0      	cmp	r3, #192	@ 0xc0
 81094b2:	f200 8088 	bhi.w	81095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81094b8:	2b80      	cmp	r3, #128	@ 0x80
 81094ba:	d032      	beq.n	8109522 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81094bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81094be:	2b80      	cmp	r3, #128	@ 0x80
 81094c0:	f200 8081 	bhi.w	81095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81094c6:	2b00      	cmp	r3, #0
 81094c8:	d003      	beq.n	81094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81094cc:	2b40      	cmp	r3, #64	@ 0x40
 81094ce:	d014      	beq.n	81094fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81094d0:	e079      	b.n	81095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81094d2:	4b3f      	ldr	r3, [pc, #252]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81094d4:	681b      	ldr	r3, [r3, #0]
 81094d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81094da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81094de:	d108      	bne.n	81094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81094e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81094e4:	4618      	mov	r0, r3
 81094e6:	f000 ff67 	bl	810a3b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81094ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81094ee:	f000 bc9c 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81094f2:	2300      	movs	r3, #0
 81094f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81094f6:	f000 bc98 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81094fa:	4b35      	ldr	r3, [pc, #212]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81094fc:	681b      	ldr	r3, [r3, #0]
 81094fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109506:	d108      	bne.n	810951a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109508:	f107 0318 	add.w	r3, r7, #24
 810950c:	4618      	mov	r0, r3
 810950e:	f000 fcab 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109512:	69bb      	ldr	r3, [r7, #24]
 8109514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109516:	f000 bc88 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810951a:	2300      	movs	r3, #0
 810951c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810951e:	f000 bc84 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109522:	4b2b      	ldr	r3, [pc, #172]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109524:	681b      	ldr	r3, [r3, #0]
 8109526:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810952a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810952e:	d108      	bne.n	8109542 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109530:	f107 030c 	add.w	r3, r7, #12
 8109534:	4618      	mov	r0, r3
 8109536:	f000 fdeb 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810953a:	68fb      	ldr	r3, [r7, #12]
 810953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810953e:	f000 bc74 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109542:	2300      	movs	r3, #0
 8109544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109546:	f000 bc70 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810954a:	4b21      	ldr	r3, [pc, #132]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810954c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810954e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109552:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109554:	4b1e      	ldr	r3, [pc, #120]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109556:	681b      	ldr	r3, [r3, #0]
 8109558:	f003 0304 	and.w	r3, r3, #4
 810955c:	2b04      	cmp	r3, #4
 810955e:	d10c      	bne.n	810957a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8109560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109562:	2b00      	cmp	r3, #0
 8109564:	d109      	bne.n	810957a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109566:	4b1a      	ldr	r3, [pc, #104]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109568:	681b      	ldr	r3, [r3, #0]
 810956a:	08db      	lsrs	r3, r3, #3
 810956c:	f003 0303 	and.w	r3, r3, #3
 8109570:	4a18      	ldr	r2, [pc, #96]	@ (81095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8109572:	fa22 f303 	lsr.w	r3, r2, r3
 8109576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109578:	e01f      	b.n	81095ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810957a:	4b15      	ldr	r3, [pc, #84]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810957c:	681b      	ldr	r3, [r3, #0]
 810957e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109586:	d106      	bne.n	8109596 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8109588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810958a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810958e:	d102      	bne.n	8109596 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109590:	4b11      	ldr	r3, [pc, #68]	@ (81095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8109592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109594:	e011      	b.n	81095ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109596:	4b0e      	ldr	r3, [pc, #56]	@ (81095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109598:	681b      	ldr	r3, [r3, #0]
 810959a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810959e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81095a2:	d106      	bne.n	81095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81095a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81095a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81095aa:	d102      	bne.n	81095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81095ac:	4b0b      	ldr	r3, [pc, #44]	@ (81095dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81095ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81095b0:	e003      	b.n	81095ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81095b2:	2300      	movs	r3, #0
 81095b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81095b6:	f000 bc38 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81095ba:	f000 bc36 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81095be:	4b08      	ldr	r3, [pc, #32]	@ (81095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81095c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81095c2:	f000 bc32 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81095c6:	2300      	movs	r3, #0
 81095c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81095ca:	f000 bc2e 	b.w	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81095ce:	bf00      	nop
 81095d0:	58024400 	.word	0x58024400
 81095d4:	03d09000 	.word	0x03d09000
 81095d8:	003d0900 	.word	0x003d0900
 81095dc:	007a1200 	.word	0x007a1200
 81095e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81095e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81095e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81095ec:	430b      	orrs	r3, r1
 81095ee:	f040 809c 	bne.w	810972a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81095f2:	4b9e      	ldr	r3, [pc, #632]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81095f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81095f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81095fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81095fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8109602:	d054      	beq.n	81096ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8109604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109606:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810960a:	f200 808b 	bhi.w	8109724 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109610:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8109614:	f000 8083 	beq.w	810971e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8109618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810961a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810961e:	f200 8081 	bhi.w	8109724 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8109622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8109628:	d02f      	beq.n	810968a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810962c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8109630:	d878      	bhi.n	8109724 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8109632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109634:	2b00      	cmp	r3, #0
 8109636:	d004      	beq.n	8109642 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8109638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810963a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810963e:	d012      	beq.n	8109666 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8109640:	e070      	b.n	8109724 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109642:	4b8a      	ldr	r3, [pc, #552]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109644:	681b      	ldr	r3, [r3, #0]
 8109646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810964a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810964e:	d107      	bne.n	8109660 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109654:	4618      	mov	r0, r3
 8109656:	f000 feaf 	bl	810a3b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810965a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810965e:	e3e4      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109660:	2300      	movs	r3, #0
 8109662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109664:	e3e1      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109666:	4b81      	ldr	r3, [pc, #516]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109668:	681b      	ldr	r3, [r3, #0]
 810966a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810966e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109672:	d107      	bne.n	8109684 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109674:	f107 0318 	add.w	r3, r7, #24
 8109678:	4618      	mov	r0, r3
 810967a:	f000 fbf5 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810967e:	69bb      	ldr	r3, [r7, #24]
 8109680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109682:	e3d2      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109684:	2300      	movs	r3, #0
 8109686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109688:	e3cf      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810968a:	4b78      	ldr	r3, [pc, #480]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810968c:	681b      	ldr	r3, [r3, #0]
 810968e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109696:	d107      	bne.n	81096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109698:	f107 030c 	add.w	r3, r7, #12
 810969c:	4618      	mov	r0, r3
 810969e:	f000 fd37 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81096a2:	68fb      	ldr	r3, [r7, #12]
 81096a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81096a6:	e3c0      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81096a8:	2300      	movs	r3, #0
 81096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81096ac:	e3bd      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81096ae:	4b6f      	ldr	r3, [pc, #444]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81096b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81096b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81096b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81096b8:	4b6c      	ldr	r3, [pc, #432]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81096ba:	681b      	ldr	r3, [r3, #0]
 81096bc:	f003 0304 	and.w	r3, r3, #4
 81096c0:	2b04      	cmp	r3, #4
 81096c2:	d10c      	bne.n	81096de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81096c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81096c6:	2b00      	cmp	r3, #0
 81096c8:	d109      	bne.n	81096de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81096ca:	4b68      	ldr	r3, [pc, #416]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81096cc:	681b      	ldr	r3, [r3, #0]
 81096ce:	08db      	lsrs	r3, r3, #3
 81096d0:	f003 0303 	and.w	r3, r3, #3
 81096d4:	4a66      	ldr	r2, [pc, #408]	@ (8109870 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81096d6:	fa22 f303 	lsr.w	r3, r2, r3
 81096da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81096dc:	e01e      	b.n	810971c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81096de:	4b63      	ldr	r3, [pc, #396]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81096e0:	681b      	ldr	r3, [r3, #0]
 81096e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81096e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81096ea:	d106      	bne.n	81096fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81096ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81096ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81096f2:	d102      	bne.n	81096fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81096f4:	4b5f      	ldr	r3, [pc, #380]	@ (8109874 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81096f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81096f8:	e010      	b.n	810971c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81096fa:	4b5c      	ldr	r3, [pc, #368]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81096fc:	681b      	ldr	r3, [r3, #0]
 81096fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109706:	d106      	bne.n	8109716 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8109708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810970a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810970e:	d102      	bne.n	8109716 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109710:	4b59      	ldr	r3, [pc, #356]	@ (8109878 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8109712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109714:	e002      	b.n	810971c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109716:	2300      	movs	r3, #0
 8109718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810971a:	e386      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810971c:	e385      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810971e:	4b57      	ldr	r3, [pc, #348]	@ (810987c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8109720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109722:	e382      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8109724:	2300      	movs	r3, #0
 8109726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109728:	e37f      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810972a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810972e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8109732:	430b      	orrs	r3, r1
 8109734:	f040 80a7 	bne.w	8109886 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8109738:	4b4c      	ldr	r3, [pc, #304]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810973a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810973c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8109740:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8109742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109748:	d055      	beq.n	81097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810974c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109750:	f200 8096 	bhi.w	8109880 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8109754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109756:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810975a:	f000 8084 	beq.w	8109866 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810975e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109760:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8109764:	f200 808c 	bhi.w	8109880 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8109768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810976a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810976e:	d030      	beq.n	81097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8109770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109772:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109776:	f200 8083 	bhi.w	8109880 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810977c:	2b00      	cmp	r3, #0
 810977e:	d004      	beq.n	810978a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8109780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8109786:	d012      	beq.n	81097ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8109788:	e07a      	b.n	8109880 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810978a:	4b38      	ldr	r3, [pc, #224]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810978c:	681b      	ldr	r3, [r3, #0]
 810978e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109796:	d107      	bne.n	81097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810979c:	4618      	mov	r0, r3
 810979e:	f000 fe0b 	bl	810a3b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81097a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81097a6:	e340      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81097a8:	2300      	movs	r3, #0
 81097aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81097ac:	e33d      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81097ae:	4b2f      	ldr	r3, [pc, #188]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81097b0:	681b      	ldr	r3, [r3, #0]
 81097b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81097b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81097ba:	d107      	bne.n	81097cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81097bc:	f107 0318 	add.w	r3, r7, #24
 81097c0:	4618      	mov	r0, r3
 81097c2:	f000 fb51 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81097c6:	69bb      	ldr	r3, [r7, #24]
 81097c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81097ca:	e32e      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81097cc:	2300      	movs	r3, #0
 81097ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81097d0:	e32b      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81097d2:	4b26      	ldr	r3, [pc, #152]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81097d4:	681b      	ldr	r3, [r3, #0]
 81097d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81097da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81097de:	d107      	bne.n	81097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81097e0:	f107 030c 	add.w	r3, r7, #12
 81097e4:	4618      	mov	r0, r3
 81097e6:	f000 fc93 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81097ea:	68fb      	ldr	r3, [r7, #12]
 81097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81097ee:	e31c      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81097f0:	2300      	movs	r3, #0
 81097f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81097f4:	e319      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81097f6:	4b1d      	ldr	r3, [pc, #116]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81097f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81097fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81097fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109800:	4b1a      	ldr	r3, [pc, #104]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109802:	681b      	ldr	r3, [r3, #0]
 8109804:	f003 0304 	and.w	r3, r3, #4
 8109808:	2b04      	cmp	r3, #4
 810980a:	d10c      	bne.n	8109826 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810980c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810980e:	2b00      	cmp	r3, #0
 8109810:	d109      	bne.n	8109826 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109812:	4b16      	ldr	r3, [pc, #88]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109814:	681b      	ldr	r3, [r3, #0]
 8109816:	08db      	lsrs	r3, r3, #3
 8109818:	f003 0303 	and.w	r3, r3, #3
 810981c:	4a14      	ldr	r2, [pc, #80]	@ (8109870 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810981e:	fa22 f303 	lsr.w	r3, r2, r3
 8109822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109824:	e01e      	b.n	8109864 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109826:	4b11      	ldr	r3, [pc, #68]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109828:	681b      	ldr	r3, [r3, #0]
 810982a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810982e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109832:	d106      	bne.n	8109842 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8109834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810983a:	d102      	bne.n	8109842 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810983c:	4b0d      	ldr	r3, [pc, #52]	@ (8109874 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810983e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109840:	e010      	b.n	8109864 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109842:	4b0a      	ldr	r3, [pc, #40]	@ (810986c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109844:	681b      	ldr	r3, [r3, #0]
 8109846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810984a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810984e:	d106      	bne.n	810985e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8109850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109856:	d102      	bne.n	810985e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109858:	4b07      	ldr	r3, [pc, #28]	@ (8109878 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810985a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810985c:	e002      	b.n	8109864 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810985e:	2300      	movs	r3, #0
 8109860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109862:	e2e2      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109864:	e2e1      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8109866:	4b05      	ldr	r3, [pc, #20]	@ (810987c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8109868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810986a:	e2de      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810986c:	58024400 	.word	0x58024400
 8109870:	03d09000 	.word	0x03d09000
 8109874:	003d0900 	.word	0x003d0900
 8109878:	007a1200 	.word	0x007a1200
 810987c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8109880:	2300      	movs	r3, #0
 8109882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109884:	e2d1      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8109886:	e9d7 2300 	ldrd	r2, r3, [r7]
 810988a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810988e:	430b      	orrs	r3, r1
 8109890:	f040 809c 	bne.w	81099cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8109894:	4b93      	ldr	r3, [pc, #588]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109898:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 810989c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81098a4:	d054      	beq.n	8109950 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81098ac:	f200 808b 	bhi.w	81099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81098b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81098b6:	f000 8083 	beq.w	81099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81098c0:	f200 8081 	bhi.w	81099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81098c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81098ca:	d02f      	beq.n	810992c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81098d2:	d878      	bhi.n	81099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81098d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098d6:	2b00      	cmp	r3, #0
 81098d8:	d004      	beq.n	81098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81098da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81098e0:	d012      	beq.n	8109908 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81098e2:	e070      	b.n	81099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81098e4:	4b7f      	ldr	r3, [pc, #508]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81098e6:	681b      	ldr	r3, [r3, #0]
 81098e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81098ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81098f0:	d107      	bne.n	8109902 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81098f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81098f6:	4618      	mov	r0, r3
 81098f8:	f000 fd5e 	bl	810a3b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109900:	e293      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109902:	2300      	movs	r3, #0
 8109904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109906:	e290      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109908:	4b76      	ldr	r3, [pc, #472]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810990a:	681b      	ldr	r3, [r3, #0]
 810990c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109914:	d107      	bne.n	8109926 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109916:	f107 0318 	add.w	r3, r7, #24
 810991a:	4618      	mov	r0, r3
 810991c:	f000 faa4 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109920:	69bb      	ldr	r3, [r7, #24]
 8109922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109924:	e281      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109926:	2300      	movs	r3, #0
 8109928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810992a:	e27e      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810992c:	4b6d      	ldr	r3, [pc, #436]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810992e:	681b      	ldr	r3, [r3, #0]
 8109930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109938:	d107      	bne.n	810994a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810993a:	f107 030c 	add.w	r3, r7, #12
 810993e:	4618      	mov	r0, r3
 8109940:	f000 fbe6 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8109944:	68fb      	ldr	r3, [r7, #12]
 8109946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109948:	e26f      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810994a:	2300      	movs	r3, #0
 810994c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810994e:	e26c      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8109950:	4b64      	ldr	r3, [pc, #400]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109958:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810995a:	4b62      	ldr	r3, [pc, #392]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810995c:	681b      	ldr	r3, [r3, #0]
 810995e:	f003 0304 	and.w	r3, r3, #4
 8109962:	2b04      	cmp	r3, #4
 8109964:	d10c      	bne.n	8109980 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8109966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109968:	2b00      	cmp	r3, #0
 810996a:	d109      	bne.n	8109980 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810996c:	4b5d      	ldr	r3, [pc, #372]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810996e:	681b      	ldr	r3, [r3, #0]
 8109970:	08db      	lsrs	r3, r3, #3
 8109972:	f003 0303 	and.w	r3, r3, #3
 8109976:	4a5c      	ldr	r2, [pc, #368]	@ (8109ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8109978:	fa22 f303 	lsr.w	r3, r2, r3
 810997c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810997e:	e01e      	b.n	81099be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109980:	4b58      	ldr	r3, [pc, #352]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109982:	681b      	ldr	r3, [r3, #0]
 8109984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810998c:	d106      	bne.n	810999c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810998e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109994:	d102      	bne.n	810999c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109996:	4b55      	ldr	r3, [pc, #340]	@ (8109aec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8109998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810999a:	e010      	b.n	81099be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810999c:	4b51      	ldr	r3, [pc, #324]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810999e:	681b      	ldr	r3, [r3, #0]
 81099a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81099a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81099a8:	d106      	bne.n	81099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81099aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81099ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81099b0:	d102      	bne.n	81099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81099b2:	4b4f      	ldr	r3, [pc, #316]	@ (8109af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81099b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81099b6:	e002      	b.n	81099be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81099b8:	2300      	movs	r3, #0
 81099ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81099bc:	e235      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81099be:	e234      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81099c0:	4b4c      	ldr	r3, [pc, #304]	@ (8109af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81099c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81099c4:	e231      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81099c6:	2300      	movs	r3, #0
 81099c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81099ca:	e22e      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81099cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81099d0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81099d4:	430b      	orrs	r3, r1
 81099d6:	f040 808f 	bne.w	8109af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81099da:	4b42      	ldr	r3, [pc, #264]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81099dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81099de:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81099e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 81099e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81099e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81099ea:	d06b      	beq.n	8109ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81099ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81099ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81099f2:	d874      	bhi.n	8109ade <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81099f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81099f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81099fa:	d056      	beq.n	8109aaa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81099fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81099fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109a02:	d86c      	bhi.n	8109ade <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8109a0a:	d03b      	beq.n	8109a84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8109a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8109a12:	d864      	bhi.n	8109ade <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109a1a:	d021      	beq.n	8109a60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8109a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109a22:	d85c      	bhi.n	8109ade <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a26:	2b00      	cmp	r3, #0
 8109a28:	d004      	beq.n	8109a34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8109a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109a30:	d004      	beq.n	8109a3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8109a32:	e054      	b.n	8109ade <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8109a34:	f7fe fa4c 	bl	8107ed0 <HAL_RCC_GetPCLK1Freq>
 8109a38:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109a3a:	e1f6      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109a3c:	4b29      	ldr	r3, [pc, #164]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a3e:	681b      	ldr	r3, [r3, #0]
 8109a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109a48:	d107      	bne.n	8109a5a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109a4a:	f107 0318 	add.w	r3, r7, #24
 8109a4e:	4618      	mov	r0, r3
 8109a50:	f000 fa0a 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8109a54:	69fb      	ldr	r3, [r7, #28]
 8109a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109a58:	e1e7      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109a5a:	2300      	movs	r3, #0
 8109a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109a5e:	e1e4      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109a60:	4b20      	ldr	r3, [pc, #128]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a62:	681b      	ldr	r3, [r3, #0]
 8109a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109a6c:	d107      	bne.n	8109a7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109a6e:	f107 030c 	add.w	r3, r7, #12
 8109a72:	4618      	mov	r0, r3
 8109a74:	f000 fb4c 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8109a78:	693b      	ldr	r3, [r7, #16]
 8109a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109a7c:	e1d5      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109a7e:	2300      	movs	r3, #0
 8109a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109a82:	e1d2      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8109a84:	4b17      	ldr	r3, [pc, #92]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a86:	681b      	ldr	r3, [r3, #0]
 8109a88:	f003 0304 	and.w	r3, r3, #4
 8109a8c:	2b04      	cmp	r3, #4
 8109a8e:	d109      	bne.n	8109aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109a90:	4b14      	ldr	r3, [pc, #80]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109a92:	681b      	ldr	r3, [r3, #0]
 8109a94:	08db      	lsrs	r3, r3, #3
 8109a96:	f003 0303 	and.w	r3, r3, #3
 8109a9a:	4a13      	ldr	r2, [pc, #76]	@ (8109ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8109a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8109aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109aa2:	e1c2      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109aa4:	2300      	movs	r3, #0
 8109aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109aa8:	e1bf      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8109aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109aac:	681b      	ldr	r3, [r3, #0]
 8109aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109ab6:	d102      	bne.n	8109abe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8109ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8109aec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8109aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109abc:	e1b5      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109abe:	2300      	movs	r3, #0
 8109ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ac2:	e1b2      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8109ac4:	4b07      	ldr	r3, [pc, #28]	@ (8109ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109ac6:	681b      	ldr	r3, [r3, #0]
 8109ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109ad0:	d102      	bne.n	8109ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8109ad2:	4b07      	ldr	r3, [pc, #28]	@ (8109af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8109ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109ad6:	e1a8      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109ad8:	2300      	movs	r3, #0
 8109ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109adc:	e1a5      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109ade:	2300      	movs	r3, #0
 8109ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ae2:	e1a2      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109ae4:	58024400 	.word	0x58024400
 8109ae8:	03d09000 	.word	0x03d09000
 8109aec:	003d0900 	.word	0x003d0900
 8109af0:	007a1200 	.word	0x007a1200
 8109af4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8109af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109afc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8109b00:	430b      	orrs	r3, r1
 8109b02:	d173      	bne.n	8109bec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8109b04:	4b9c      	ldr	r3, [pc, #624]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109b08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8109b0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109b14:	d02f      	beq.n	8109b76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8109b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109b1c:	d863      	bhi.n	8109be6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8109b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109b20:	2b00      	cmp	r3, #0
 8109b22:	d004      	beq.n	8109b2e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8109b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109b2a:	d012      	beq.n	8109b52 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8109b2c:	e05b      	b.n	8109be6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109b2e:	4b92      	ldr	r3, [pc, #584]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109b30:	681b      	ldr	r3, [r3, #0]
 8109b32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109b3a:	d107      	bne.n	8109b4c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109b3c:	f107 0318 	add.w	r3, r7, #24
 8109b40:	4618      	mov	r0, r3
 8109b42:	f000 f991 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109b46:	69bb      	ldr	r3, [r7, #24]
 8109b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109b4a:	e16e      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109b4c:	2300      	movs	r3, #0
 8109b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b50:	e16b      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109b52:	4b89      	ldr	r3, [pc, #548]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109b54:	681b      	ldr	r3, [r3, #0]
 8109b56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109b5e:	d107      	bne.n	8109b70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109b60:	f107 030c 	add.w	r3, r7, #12
 8109b64:	4618      	mov	r0, r3
 8109b66:	f000 fad3 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8109b6a:	697b      	ldr	r3, [r7, #20]
 8109b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109b6e:	e15c      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109b70:	2300      	movs	r3, #0
 8109b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b74:	e159      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8109b76:	4b80      	ldr	r3, [pc, #512]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109b7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109b7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109b80:	4b7d      	ldr	r3, [pc, #500]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109b82:	681b      	ldr	r3, [r3, #0]
 8109b84:	f003 0304 	and.w	r3, r3, #4
 8109b88:	2b04      	cmp	r3, #4
 8109b8a:	d10c      	bne.n	8109ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8109b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109b8e:	2b00      	cmp	r3, #0
 8109b90:	d109      	bne.n	8109ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109b92:	4b79      	ldr	r3, [pc, #484]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109b94:	681b      	ldr	r3, [r3, #0]
 8109b96:	08db      	lsrs	r3, r3, #3
 8109b98:	f003 0303 	and.w	r3, r3, #3
 8109b9c:	4a77      	ldr	r2, [pc, #476]	@ (8109d7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8109b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8109ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109ba4:	e01e      	b.n	8109be4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109ba6:	4b74      	ldr	r3, [pc, #464]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109ba8:	681b      	ldr	r3, [r3, #0]
 8109baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109bb2:	d106      	bne.n	8109bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8109bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109bba:	d102      	bne.n	8109bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109bbc:	4b70      	ldr	r3, [pc, #448]	@ (8109d80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8109bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109bc0:	e010      	b.n	8109be4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109bc4:	681b      	ldr	r3, [r3, #0]
 8109bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109bce:	d106      	bne.n	8109bde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8109bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109bd6:	d102      	bne.n	8109bde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8109d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8109bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109bdc:	e002      	b.n	8109be4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109bde:	2300      	movs	r3, #0
 8109be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109be2:	e122      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109be4:	e121      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8109be6:	2300      	movs	r3, #0
 8109be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109bea:	e11e      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8109bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109bf0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8109bf4:	430b      	orrs	r3, r1
 8109bf6:	d133      	bne.n	8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8109bf8:	4b5f      	ldr	r3, [pc, #380]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109c00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c04:	2b00      	cmp	r3, #0
 8109c06:	d004      	beq.n	8109c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8109c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109c0e:	d012      	beq.n	8109c36 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8109c10:	e023      	b.n	8109c5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109c12:	4b59      	ldr	r3, [pc, #356]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c14:	681b      	ldr	r3, [r3, #0]
 8109c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109c1e:	d107      	bne.n	8109c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109c24:	4618      	mov	r0, r3
 8109c26:	f000 fbc7 	bl	810a3b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109c2e:	e0fc      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109c30:	2300      	movs	r3, #0
 8109c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109c34:	e0f9      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109c36:	4b50      	ldr	r3, [pc, #320]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c38:	681b      	ldr	r3, [r3, #0]
 8109c3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109c42:	d107      	bne.n	8109c54 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109c44:	f107 0318 	add.w	r3, r7, #24
 8109c48:	4618      	mov	r0, r3
 8109c4a:	f000 f90d 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8109c4e:	6a3b      	ldr	r3, [r7, #32]
 8109c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109c52:	e0ea      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109c54:	2300      	movs	r3, #0
 8109c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109c58:	e0e7      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8109c5a:	2300      	movs	r3, #0
 8109c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109c5e:	e0e4      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8109c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109c64:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8109c68:	430b      	orrs	r3, r1
 8109c6a:	f040 808d 	bne.w	8109d88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8109c6e:	4b42      	ldr	r3, [pc, #264]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109c72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8109c76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109c7e:	d06b      	beq.n	8109d58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8109c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8109c86:	d874      	bhi.n	8109d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8109c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109c8e:	d056      	beq.n	8109d3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8109c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109c96:	d86c      	bhi.n	8109d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8109c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109c9e:	d03b      	beq.n	8109d18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8109ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ca2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8109ca6:	d864      	bhi.n	8109d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8109ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109cae:	d021      	beq.n	8109cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8109cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109cb6:	d85c      	bhi.n	8109d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8109cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cba:	2b00      	cmp	r3, #0
 8109cbc:	d004      	beq.n	8109cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8109cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109cc4:	d004      	beq.n	8109cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8109cc6:	e054      	b.n	8109d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8109cc8:	f000 f8b8 	bl	8109e3c <HAL_RCCEx_GetD3PCLK1Freq>
 8109ccc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109cce:	e0ac      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109cd0:	4b29      	ldr	r3, [pc, #164]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109cd2:	681b      	ldr	r3, [r3, #0]
 8109cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109cdc:	d107      	bne.n	8109cee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109cde:	f107 0318 	add.w	r3, r7, #24
 8109ce2:	4618      	mov	r0, r3
 8109ce4:	f000 f8c0 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8109ce8:	69fb      	ldr	r3, [r7, #28]
 8109cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109cec:	e09d      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109cee:	2300      	movs	r3, #0
 8109cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109cf2:	e09a      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109cf4:	4b20      	ldr	r3, [pc, #128]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109cf6:	681b      	ldr	r3, [r3, #0]
 8109cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109d00:	d107      	bne.n	8109d12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109d02:	f107 030c 	add.w	r3, r7, #12
 8109d06:	4618      	mov	r0, r3
 8109d08:	f000 fa02 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8109d0c:	693b      	ldr	r3, [r7, #16]
 8109d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109d10:	e08b      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109d12:	2300      	movs	r3, #0
 8109d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d16:	e088      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8109d18:	4b17      	ldr	r3, [pc, #92]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109d1a:	681b      	ldr	r3, [r3, #0]
 8109d1c:	f003 0304 	and.w	r3, r3, #4
 8109d20:	2b04      	cmp	r3, #4
 8109d22:	d109      	bne.n	8109d38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109d24:	4b14      	ldr	r3, [pc, #80]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109d26:	681b      	ldr	r3, [r3, #0]
 8109d28:	08db      	lsrs	r3, r3, #3
 8109d2a:	f003 0303 	and.w	r3, r3, #3
 8109d2e:	4a13      	ldr	r2, [pc, #76]	@ (8109d7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8109d30:	fa22 f303 	lsr.w	r3, r2, r3
 8109d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109d36:	e078      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109d38:	2300      	movs	r3, #0
 8109d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d3c:	e075      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8109d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109d40:	681b      	ldr	r3, [r3, #0]
 8109d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109d4a:	d102      	bne.n	8109d52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8109d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8109d80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8109d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109d50:	e06b      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109d52:	2300      	movs	r3, #0
 8109d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d56:	e068      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8109d58:	4b07      	ldr	r3, [pc, #28]	@ (8109d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109d5a:	681b      	ldr	r3, [r3, #0]
 8109d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109d64:	d102      	bne.n	8109d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8109d66:	4b07      	ldr	r3, [pc, #28]	@ (8109d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8109d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109d6a:	e05e      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109d6c:	2300      	movs	r3, #0
 8109d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d70:	e05b      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8109d72:	2300      	movs	r3, #0
 8109d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d76:	e058      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109d78:	58024400 	.word	0x58024400
 8109d7c:	03d09000 	.word	0x03d09000
 8109d80:	003d0900 	.word	0x003d0900
 8109d84:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8109d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109d8c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8109d90:	430b      	orrs	r3, r1
 8109d92:	d148      	bne.n	8109e26 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8109d94:	4b27      	ldr	r3, [pc, #156]	@ (8109e34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8109d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109d98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109d9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109da4:	d02a      	beq.n	8109dfc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8109da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109dac:	d838      	bhi.n	8109e20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8109dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109db0:	2b00      	cmp	r3, #0
 8109db2:	d004      	beq.n	8109dbe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8109db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109db6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109dba:	d00d      	beq.n	8109dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8109dbc:	e030      	b.n	8109e20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8109dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8109e34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8109dc0:	681b      	ldr	r3, [r3, #0]
 8109dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109dca:	d102      	bne.n	8109dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8109dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8109e38 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8109dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109dd0:	e02b      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109dd2:	2300      	movs	r3, #0
 8109dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109dd6:	e028      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109dd8:	4b16      	ldr	r3, [pc, #88]	@ (8109e34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8109dda:	681b      	ldr	r3, [r3, #0]
 8109ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109de4:	d107      	bne.n	8109df6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109dea:	4618      	mov	r0, r3
 8109dec:	f000 fae4 	bl	810a3b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109df4:	e019      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109df6:	2300      	movs	r3, #0
 8109df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109dfa:	e016      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8109e34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8109dfe:	681b      	ldr	r3, [r3, #0]
 8109e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109e04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109e08:	d107      	bne.n	8109e1a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109e0a:	f107 0318 	add.w	r3, r7, #24
 8109e0e:	4618      	mov	r0, r3
 8109e10:	f000 f82a 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8109e14:	69fb      	ldr	r3, [r7, #28]
 8109e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109e18:	e007      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109e1a:	2300      	movs	r3, #0
 8109e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e1e:	e004      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109e20:	2300      	movs	r3, #0
 8109e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e24:	e001      	b.n	8109e2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8109e26:	2300      	movs	r3, #0
 8109e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8109e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8109e2c:	4618      	mov	r0, r3
 8109e2e:	3740      	adds	r7, #64	@ 0x40
 8109e30:	46bd      	mov	sp, r7
 8109e32:	bd80      	pop	{r7, pc}
 8109e34:	58024400 	.word	0x58024400
 8109e38:	007a1200 	.word	0x007a1200

08109e3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8109e3c:	b580      	push	{r7, lr}
 8109e3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8109e40:	f7fe f814 	bl	8107e6c <HAL_RCC_GetHCLKFreq>
 8109e44:	4602      	mov	r2, r0
 8109e46:	4b06      	ldr	r3, [pc, #24]	@ (8109e60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8109e48:	6a1b      	ldr	r3, [r3, #32]
 8109e4a:	091b      	lsrs	r3, r3, #4
 8109e4c:	f003 0307 	and.w	r3, r3, #7
 8109e50:	4904      	ldr	r1, [pc, #16]	@ (8109e64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8109e52:	5ccb      	ldrb	r3, [r1, r3]
 8109e54:	f003 031f 	and.w	r3, r3, #31
 8109e58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8109e5c:	4618      	mov	r0, r3
 8109e5e:	bd80      	pop	{r7, pc}
 8109e60:	58024400 	.word	0x58024400
 8109e64:	08113978 	.word	0x08113978

08109e68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8109e68:	b480      	push	{r7}
 8109e6a:	b089      	sub	sp, #36	@ 0x24
 8109e6c:	af00      	add	r7, sp, #0
 8109e6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109e70:	4ba1      	ldr	r3, [pc, #644]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109e74:	f003 0303 	and.w	r3, r3, #3
 8109e78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8109e7a:	4b9f      	ldr	r3, [pc, #636]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109e7e:	0b1b      	lsrs	r3, r3, #12
 8109e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109e84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8109e86:	4b9c      	ldr	r3, [pc, #624]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109e8a:	091b      	lsrs	r3, r3, #4
 8109e8c:	f003 0301 	and.w	r3, r3, #1
 8109e90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8109e92:	4b99      	ldr	r3, [pc, #612]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109e96:	08db      	lsrs	r3, r3, #3
 8109e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109e9c:	693a      	ldr	r2, [r7, #16]
 8109e9e:	fb02 f303 	mul.w	r3, r2, r3
 8109ea2:	ee07 3a90 	vmov	s15, r3
 8109ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109eaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8109eae:	697b      	ldr	r3, [r7, #20]
 8109eb0:	2b00      	cmp	r3, #0
 8109eb2:	f000 8111 	beq.w	810a0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8109eb6:	69bb      	ldr	r3, [r7, #24]
 8109eb8:	2b02      	cmp	r3, #2
 8109eba:	f000 8083 	beq.w	8109fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8109ebe:	69bb      	ldr	r3, [r7, #24]
 8109ec0:	2b02      	cmp	r3, #2
 8109ec2:	f200 80a1 	bhi.w	810a008 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8109ec6:	69bb      	ldr	r3, [r7, #24]
 8109ec8:	2b00      	cmp	r3, #0
 8109eca:	d003      	beq.n	8109ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8109ecc:	69bb      	ldr	r3, [r7, #24]
 8109ece:	2b01      	cmp	r3, #1
 8109ed0:	d056      	beq.n	8109f80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8109ed2:	e099      	b.n	810a008 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109ed4:	4b88      	ldr	r3, [pc, #544]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109ed6:	681b      	ldr	r3, [r3, #0]
 8109ed8:	f003 0320 	and.w	r3, r3, #32
 8109edc:	2b00      	cmp	r3, #0
 8109ede:	d02d      	beq.n	8109f3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109ee0:	4b85      	ldr	r3, [pc, #532]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109ee2:	681b      	ldr	r3, [r3, #0]
 8109ee4:	08db      	lsrs	r3, r3, #3
 8109ee6:	f003 0303 	and.w	r3, r3, #3
 8109eea:	4a84      	ldr	r2, [pc, #528]	@ (810a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8109eec:	fa22 f303 	lsr.w	r3, r2, r3
 8109ef0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8109ef2:	68bb      	ldr	r3, [r7, #8]
 8109ef4:	ee07 3a90 	vmov	s15, r3
 8109ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109efc:	697b      	ldr	r3, [r7, #20]
 8109efe:	ee07 3a90 	vmov	s15, r3
 8109f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109f0a:	4b7b      	ldr	r3, [pc, #492]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109f12:	ee07 3a90 	vmov	s15, r3
 8109f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8109f1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810a100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109f36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8109f3a:	e087      	b.n	810a04c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8109f3c:	697b      	ldr	r3, [r7, #20]
 8109f3e:	ee07 3a90 	vmov	s15, r3
 8109f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810a104 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8109f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109f4e:	4b6a      	ldr	r3, [pc, #424]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109f56:	ee07 3a90 	vmov	s15, r3
 8109f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109f62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810a100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109f7e:	e065      	b.n	810a04c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8109f80:	697b      	ldr	r3, [r7, #20]
 8109f82:	ee07 3a90 	vmov	s15, r3
 8109f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810a108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109f92:	4b59      	ldr	r3, [pc, #356]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109f9a:	ee07 3a90 	vmov	s15, r3
 8109f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8109fa6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810a100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109fc2:	e043      	b.n	810a04c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8109fc4:	697b      	ldr	r3, [r7, #20]
 8109fc6:	ee07 3a90 	vmov	s15, r3
 8109fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810a10c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8109fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109fd6:	4b48      	ldr	r3, [pc, #288]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109fde:	ee07 3a90 	vmov	s15, r3
 8109fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8109fea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810a100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8109ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a006:	e021      	b.n	810a04c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a008:	697b      	ldr	r3, [r7, #20]
 810a00a:	ee07 3a90 	vmov	s15, r3
 810a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a012:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810a108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a01a:	4b37      	ldr	r3, [pc, #220]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a01c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a022:	ee07 3a90 	vmov	s15, r3
 810a026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a02a:	ed97 6a03 	vldr	s12, [r7, #12]
 810a02e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810a100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a03a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a042:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a04a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810a04c:	4b2a      	ldr	r3, [pc, #168]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a04e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a050:	0a5b      	lsrs	r3, r3, #9
 810a052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a056:	ee07 3a90 	vmov	s15, r3
 810a05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a05e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a062:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a066:	edd7 6a07 	vldr	s13, [r7, #28]
 810a06a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a06e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a072:	ee17 2a90 	vmov	r2, s15
 810a076:	687b      	ldr	r3, [r7, #4]
 810a078:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810a07a:	4b1f      	ldr	r3, [pc, #124]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a07e:	0c1b      	lsrs	r3, r3, #16
 810a080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a084:	ee07 3a90 	vmov	s15, r3
 810a088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a08c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a090:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a094:	edd7 6a07 	vldr	s13, [r7, #28]
 810a098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a09c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a0a0:	ee17 2a90 	vmov	r2, s15
 810a0a4:	687b      	ldr	r3, [r7, #4]
 810a0a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810a0a8:	4b13      	ldr	r3, [pc, #76]	@ (810a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a0aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a0ac:	0e1b      	lsrs	r3, r3, #24
 810a0ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a0b2:	ee07 3a90 	vmov	s15, r3
 810a0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a0be:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a0c2:	edd7 6a07 	vldr	s13, [r7, #28]
 810a0c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a0ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a0ce:	ee17 2a90 	vmov	r2, s15
 810a0d2:	687b      	ldr	r3, [r7, #4]
 810a0d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810a0d6:	e008      	b.n	810a0ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810a0d8:	687b      	ldr	r3, [r7, #4]
 810a0da:	2200      	movs	r2, #0
 810a0dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810a0de:	687b      	ldr	r3, [r7, #4]
 810a0e0:	2200      	movs	r2, #0
 810a0e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810a0e4:	687b      	ldr	r3, [r7, #4]
 810a0e6:	2200      	movs	r2, #0
 810a0e8:	609a      	str	r2, [r3, #8]
}
 810a0ea:	bf00      	nop
 810a0ec:	3724      	adds	r7, #36	@ 0x24
 810a0ee:	46bd      	mov	sp, r7
 810a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0f4:	4770      	bx	lr
 810a0f6:	bf00      	nop
 810a0f8:	58024400 	.word	0x58024400
 810a0fc:	03d09000 	.word	0x03d09000
 810a100:	46000000 	.word	0x46000000
 810a104:	4c742400 	.word	0x4c742400
 810a108:	4a742400 	.word	0x4a742400
 810a10c:	4af42400 	.word	0x4af42400

0810a110 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810a110:	b480      	push	{r7}
 810a112:	b089      	sub	sp, #36	@ 0x24
 810a114:	af00      	add	r7, sp, #0
 810a116:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a118:	4ba1      	ldr	r3, [pc, #644]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a11c:	f003 0303 	and.w	r3, r3, #3
 810a120:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810a122:	4b9f      	ldr	r3, [pc, #636]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a126:	0d1b      	lsrs	r3, r3, #20
 810a128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a12c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810a12e:	4b9c      	ldr	r3, [pc, #624]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a132:	0a1b      	lsrs	r3, r3, #8
 810a134:	f003 0301 	and.w	r3, r3, #1
 810a138:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810a13a:	4b99      	ldr	r3, [pc, #612]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a13e:	08db      	lsrs	r3, r3, #3
 810a140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a144:	693a      	ldr	r2, [r7, #16]
 810a146:	fb02 f303 	mul.w	r3, r2, r3
 810a14a:	ee07 3a90 	vmov	s15, r3
 810a14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a152:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810a156:	697b      	ldr	r3, [r7, #20]
 810a158:	2b00      	cmp	r3, #0
 810a15a:	f000 8111 	beq.w	810a380 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810a15e:	69bb      	ldr	r3, [r7, #24]
 810a160:	2b02      	cmp	r3, #2
 810a162:	f000 8083 	beq.w	810a26c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810a166:	69bb      	ldr	r3, [r7, #24]
 810a168:	2b02      	cmp	r3, #2
 810a16a:	f200 80a1 	bhi.w	810a2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810a16e:	69bb      	ldr	r3, [r7, #24]
 810a170:	2b00      	cmp	r3, #0
 810a172:	d003      	beq.n	810a17c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810a174:	69bb      	ldr	r3, [r7, #24]
 810a176:	2b01      	cmp	r3, #1
 810a178:	d056      	beq.n	810a228 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810a17a:	e099      	b.n	810a2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a17c:	4b88      	ldr	r3, [pc, #544]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a17e:	681b      	ldr	r3, [r3, #0]
 810a180:	f003 0320 	and.w	r3, r3, #32
 810a184:	2b00      	cmp	r3, #0
 810a186:	d02d      	beq.n	810a1e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a188:	4b85      	ldr	r3, [pc, #532]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a18a:	681b      	ldr	r3, [r3, #0]
 810a18c:	08db      	lsrs	r3, r3, #3
 810a18e:	f003 0303 	and.w	r3, r3, #3
 810a192:	4a84      	ldr	r2, [pc, #528]	@ (810a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810a194:	fa22 f303 	lsr.w	r3, r2, r3
 810a198:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a19a:	68bb      	ldr	r3, [r7, #8]
 810a19c:	ee07 3a90 	vmov	s15, r3
 810a1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1a4:	697b      	ldr	r3, [r7, #20]
 810a1a6:	ee07 3a90 	vmov	s15, r3
 810a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a1ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a1b2:	4b7b      	ldr	r3, [pc, #492]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a1ba:	ee07 3a90 	vmov	s15, r3
 810a1be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1c2:	ed97 6a03 	vldr	s12, [r7, #12]
 810a1c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a1ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a1ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a1d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a1de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810a1e2:	e087      	b.n	810a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a1e4:	697b      	ldr	r3, [r7, #20]
 810a1e6:	ee07 3a90 	vmov	s15, r3
 810a1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a1ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810a3ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810a1f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a1f6:	4b6a      	ldr	r3, [pc, #424]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a1fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a1fe:	ee07 3a90 	vmov	s15, r3
 810a202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a206:	ed97 6a03 	vldr	s12, [r7, #12]
 810a20a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a20e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a21a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a226:	e065      	b.n	810a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a228:	697b      	ldr	r3, [r7, #20]
 810a22a:	ee07 3a90 	vmov	s15, r3
 810a22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a232:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a23a:	4b59      	ldr	r3, [pc, #356]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a23c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a242:	ee07 3a90 	vmov	s15, r3
 810a246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a24a:	ed97 6a03 	vldr	s12, [r7, #12]
 810a24e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a25a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a262:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a26a:	e043      	b.n	810a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a26c:	697b      	ldr	r3, [r7, #20]
 810a26e:	ee07 3a90 	vmov	s15, r3
 810a272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a276:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810a3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810a27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a27e:	4b48      	ldr	r3, [pc, #288]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a286:	ee07 3a90 	vmov	s15, r3
 810a28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a28e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a292:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a29e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a2aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a2ae:	e021      	b.n	810a2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a2b0:	697b      	ldr	r3, [r7, #20]
 810a2b2:	ee07 3a90 	vmov	s15, r3
 810a2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a2ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a2c2:	4b37      	ldr	r3, [pc, #220]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a2ca:	ee07 3a90 	vmov	s15, r3
 810a2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2d2:	ed97 6a03 	vldr	s12, [r7, #12]
 810a2d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a2e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a2ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a2f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810a2f4:	4b2a      	ldr	r3, [pc, #168]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a2f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a2f8:	0a5b      	lsrs	r3, r3, #9
 810a2fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a2fe:	ee07 3a90 	vmov	s15, r3
 810a302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a30a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a30e:	edd7 6a07 	vldr	s13, [r7, #28]
 810a312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a31a:	ee17 2a90 	vmov	r2, s15
 810a31e:	687b      	ldr	r3, [r7, #4]
 810a320:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810a322:	4b1f      	ldr	r3, [pc, #124]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a326:	0c1b      	lsrs	r3, r3, #16
 810a328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a32c:	ee07 3a90 	vmov	s15, r3
 810a330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a334:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a338:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a33c:	edd7 6a07 	vldr	s13, [r7, #28]
 810a340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a348:	ee17 2a90 	vmov	r2, s15
 810a34c:	687b      	ldr	r3, [r7, #4]
 810a34e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810a350:	4b13      	ldr	r3, [pc, #76]	@ (810a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a354:	0e1b      	lsrs	r3, r3, #24
 810a356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a35a:	ee07 3a90 	vmov	s15, r3
 810a35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a366:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a36a:	edd7 6a07 	vldr	s13, [r7, #28]
 810a36e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a376:	ee17 2a90 	vmov	r2, s15
 810a37a:	687b      	ldr	r3, [r7, #4]
 810a37c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810a37e:	e008      	b.n	810a392 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810a380:	687b      	ldr	r3, [r7, #4]
 810a382:	2200      	movs	r2, #0
 810a384:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810a386:	687b      	ldr	r3, [r7, #4]
 810a388:	2200      	movs	r2, #0
 810a38a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810a38c:	687b      	ldr	r3, [r7, #4]
 810a38e:	2200      	movs	r2, #0
 810a390:	609a      	str	r2, [r3, #8]
}
 810a392:	bf00      	nop
 810a394:	3724      	adds	r7, #36	@ 0x24
 810a396:	46bd      	mov	sp, r7
 810a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a39c:	4770      	bx	lr
 810a39e:	bf00      	nop
 810a3a0:	58024400 	.word	0x58024400
 810a3a4:	03d09000 	.word	0x03d09000
 810a3a8:	46000000 	.word	0x46000000
 810a3ac:	4c742400 	.word	0x4c742400
 810a3b0:	4a742400 	.word	0x4a742400
 810a3b4:	4af42400 	.word	0x4af42400

0810a3b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810a3b8:	b480      	push	{r7}
 810a3ba:	b089      	sub	sp, #36	@ 0x24
 810a3bc:	af00      	add	r7, sp, #0
 810a3be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a3c0:	4ba0      	ldr	r3, [pc, #640]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a3c4:	f003 0303 	and.w	r3, r3, #3
 810a3c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810a3ca:	4b9e      	ldr	r3, [pc, #632]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a3ce:	091b      	lsrs	r3, r3, #4
 810a3d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a3d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810a3d6:	4b9b      	ldr	r3, [pc, #620]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a3da:	f003 0301 	and.w	r3, r3, #1
 810a3de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810a3e0:	4b98      	ldr	r3, [pc, #608]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a3e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3e4:	08db      	lsrs	r3, r3, #3
 810a3e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a3ea:	693a      	ldr	r2, [r7, #16]
 810a3ec:	fb02 f303 	mul.w	r3, r2, r3
 810a3f0:	ee07 3a90 	vmov	s15, r3
 810a3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a3f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810a3fc:	697b      	ldr	r3, [r7, #20]
 810a3fe:	2b00      	cmp	r3, #0
 810a400:	f000 8111 	beq.w	810a626 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810a404:	69bb      	ldr	r3, [r7, #24]
 810a406:	2b02      	cmp	r3, #2
 810a408:	f000 8083 	beq.w	810a512 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810a40c:	69bb      	ldr	r3, [r7, #24]
 810a40e:	2b02      	cmp	r3, #2
 810a410:	f200 80a1 	bhi.w	810a556 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810a414:	69bb      	ldr	r3, [r7, #24]
 810a416:	2b00      	cmp	r3, #0
 810a418:	d003      	beq.n	810a422 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810a41a:	69bb      	ldr	r3, [r7, #24]
 810a41c:	2b01      	cmp	r3, #1
 810a41e:	d056      	beq.n	810a4ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810a420:	e099      	b.n	810a556 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a422:	4b88      	ldr	r3, [pc, #544]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a424:	681b      	ldr	r3, [r3, #0]
 810a426:	f003 0320 	and.w	r3, r3, #32
 810a42a:	2b00      	cmp	r3, #0
 810a42c:	d02d      	beq.n	810a48a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a42e:	4b85      	ldr	r3, [pc, #532]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a430:	681b      	ldr	r3, [r3, #0]
 810a432:	08db      	lsrs	r3, r3, #3
 810a434:	f003 0303 	and.w	r3, r3, #3
 810a438:	4a83      	ldr	r2, [pc, #524]	@ (810a648 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810a43a:	fa22 f303 	lsr.w	r3, r2, r3
 810a43e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a440:	68bb      	ldr	r3, [r7, #8]
 810a442:	ee07 3a90 	vmov	s15, r3
 810a446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a44a:	697b      	ldr	r3, [r7, #20]
 810a44c:	ee07 3a90 	vmov	s15, r3
 810a450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a458:	4b7a      	ldr	r3, [pc, #488]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a460:	ee07 3a90 	vmov	s15, r3
 810a464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a468:	ed97 6a03 	vldr	s12, [r7, #12]
 810a46c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810a64c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a478:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a47c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a480:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a484:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810a488:	e087      	b.n	810a59a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a48a:	697b      	ldr	r3, [r7, #20]
 810a48c:	ee07 3a90 	vmov	s15, r3
 810a490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a494:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810a650 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810a498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a49c:	4b69      	ldr	r3, [pc, #420]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a4a4:	ee07 3a90 	vmov	s15, r3
 810a4a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a4ac:	ed97 6a03 	vldr	s12, [r7, #12]
 810a4b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810a64c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a4b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a4b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a4bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a4c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a4c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a4cc:	e065      	b.n	810a59a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a4ce:	697b      	ldr	r3, [r7, #20]
 810a4d0:	ee07 3a90 	vmov	s15, r3
 810a4d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a4d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810a654 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810a4dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a4e0:	4b58      	ldr	r3, [pc, #352]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a4e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a4e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a4e8:	ee07 3a90 	vmov	s15, r3
 810a4ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a4f0:	ed97 6a03 	vldr	s12, [r7, #12]
 810a4f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810a64c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a4f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a4fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a500:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a508:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a50c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a510:	e043      	b.n	810a59a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a512:	697b      	ldr	r3, [r7, #20]
 810a514:	ee07 3a90 	vmov	s15, r3
 810a518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a51c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810a658 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810a520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a524:	4b47      	ldr	r3, [pc, #284]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a52c:	ee07 3a90 	vmov	s15, r3
 810a530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a534:	ed97 6a03 	vldr	s12, [r7, #12]
 810a538:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810a64c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a53c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a550:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a554:	e021      	b.n	810a59a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a556:	697b      	ldr	r3, [r7, #20]
 810a558:	ee07 3a90 	vmov	s15, r3
 810a55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a560:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810a650 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810a564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a568:	4b36      	ldr	r3, [pc, #216]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a56a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a570:	ee07 3a90 	vmov	s15, r3
 810a574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a578:	ed97 6a03 	vldr	s12, [r7, #12]
 810a57c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810a64c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a58c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a590:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a594:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a598:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810a59a:	4b2a      	ldr	r3, [pc, #168]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a59c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a59e:	0a5b      	lsrs	r3, r3, #9
 810a5a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a5a4:	ee07 3a90 	vmov	s15, r3
 810a5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a5ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a5b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a5b4:	edd7 6a07 	vldr	s13, [r7, #28]
 810a5b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a5bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a5c0:	ee17 2a90 	vmov	r2, s15
 810a5c4:	687b      	ldr	r3, [r7, #4]
 810a5c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810a5c8:	4b1e      	ldr	r3, [pc, #120]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a5cc:	0c1b      	lsrs	r3, r3, #16
 810a5ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a5d2:	ee07 3a90 	vmov	s15, r3
 810a5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a5da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a5de:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a5e2:	edd7 6a07 	vldr	s13, [r7, #28]
 810a5e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a5ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a5ee:	ee17 2a90 	vmov	r2, s15
 810a5f2:	687b      	ldr	r3, [r7, #4]
 810a5f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810a5f6:	4b13      	ldr	r3, [pc, #76]	@ (810a644 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a5fa:	0e1b      	lsrs	r3, r3, #24
 810a5fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a600:	ee07 3a90 	vmov	s15, r3
 810a604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a60c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a610:	edd7 6a07 	vldr	s13, [r7, #28]
 810a614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a61c:	ee17 2a90 	vmov	r2, s15
 810a620:	687b      	ldr	r3, [r7, #4]
 810a622:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810a624:	e008      	b.n	810a638 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	2200      	movs	r2, #0
 810a62a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	2200      	movs	r2, #0
 810a630:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810a632:	687b      	ldr	r3, [r7, #4]
 810a634:	2200      	movs	r2, #0
 810a636:	609a      	str	r2, [r3, #8]
}
 810a638:	bf00      	nop
 810a63a:	3724      	adds	r7, #36	@ 0x24
 810a63c:	46bd      	mov	sp, r7
 810a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a642:	4770      	bx	lr
 810a644:	58024400 	.word	0x58024400
 810a648:	03d09000 	.word	0x03d09000
 810a64c:	46000000 	.word	0x46000000
 810a650:	4c742400 	.word	0x4c742400
 810a654:	4a742400 	.word	0x4a742400
 810a658:	4af42400 	.word	0x4af42400

0810a65c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810a65c:	b580      	push	{r7, lr}
 810a65e:	b084      	sub	sp, #16
 810a660:	af00      	add	r7, sp, #0
 810a662:	6078      	str	r0, [r7, #4]
 810a664:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a666:	2300      	movs	r3, #0
 810a668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a66a:	4b54      	ldr	r3, [pc, #336]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a66c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a66e:	f003 0303 	and.w	r3, r3, #3
 810a672:	2b03      	cmp	r3, #3
 810a674:	d101      	bne.n	810a67a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810a676:	2301      	movs	r3, #1
 810a678:	e09b      	b.n	810a7b2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810a67a:	4b50      	ldr	r3, [pc, #320]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a67c:	681b      	ldr	r3, [r3, #0]
 810a67e:	4a4f      	ldr	r2, [pc, #316]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a680:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810a684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a686:	f7f9 fe4b 	bl	8104320 <HAL_GetTick>
 810a68a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a68c:	e008      	b.n	810a6a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810a68e:	f7f9 fe47 	bl	8104320 <HAL_GetTick>
 810a692:	4602      	mov	r2, r0
 810a694:	68bb      	ldr	r3, [r7, #8]
 810a696:	1ad3      	subs	r3, r2, r3
 810a698:	2b02      	cmp	r3, #2
 810a69a:	d901      	bls.n	810a6a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a69c:	2303      	movs	r3, #3
 810a69e:	e088      	b.n	810a7b2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a6a0:	4b46      	ldr	r3, [pc, #280]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a6a2:	681b      	ldr	r3, [r3, #0]
 810a6a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a6a8:	2b00      	cmp	r3, #0
 810a6aa:	d1f0      	bne.n	810a68e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810a6ac:	4b43      	ldr	r3, [pc, #268]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a6b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810a6b4:	687b      	ldr	r3, [r7, #4]
 810a6b6:	681b      	ldr	r3, [r3, #0]
 810a6b8:	031b      	lsls	r3, r3, #12
 810a6ba:	4940      	ldr	r1, [pc, #256]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a6bc:	4313      	orrs	r3, r2
 810a6be:	628b      	str	r3, [r1, #40]	@ 0x28
 810a6c0:	687b      	ldr	r3, [r7, #4]
 810a6c2:	685b      	ldr	r3, [r3, #4]
 810a6c4:	3b01      	subs	r3, #1
 810a6c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a6ca:	687b      	ldr	r3, [r7, #4]
 810a6cc:	689b      	ldr	r3, [r3, #8]
 810a6ce:	3b01      	subs	r3, #1
 810a6d0:	025b      	lsls	r3, r3, #9
 810a6d2:	b29b      	uxth	r3, r3
 810a6d4:	431a      	orrs	r2, r3
 810a6d6:	687b      	ldr	r3, [r7, #4]
 810a6d8:	68db      	ldr	r3, [r3, #12]
 810a6da:	3b01      	subs	r3, #1
 810a6dc:	041b      	lsls	r3, r3, #16
 810a6de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810a6e2:	431a      	orrs	r2, r3
 810a6e4:	687b      	ldr	r3, [r7, #4]
 810a6e6:	691b      	ldr	r3, [r3, #16]
 810a6e8:	3b01      	subs	r3, #1
 810a6ea:	061b      	lsls	r3, r3, #24
 810a6ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810a6f0:	4932      	ldr	r1, [pc, #200]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a6f2:	4313      	orrs	r3, r2
 810a6f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810a6f6:	4b31      	ldr	r3, [pc, #196]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a6fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810a6fe:	687b      	ldr	r3, [r7, #4]
 810a700:	695b      	ldr	r3, [r3, #20]
 810a702:	492e      	ldr	r1, [pc, #184]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a704:	4313      	orrs	r3, r2
 810a706:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810a708:	4b2c      	ldr	r3, [pc, #176]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a70c:	f023 0220 	bic.w	r2, r3, #32
 810a710:	687b      	ldr	r3, [r7, #4]
 810a712:	699b      	ldr	r3, [r3, #24]
 810a714:	4929      	ldr	r1, [pc, #164]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a716:	4313      	orrs	r3, r2
 810a718:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810a71a:	4b28      	ldr	r3, [pc, #160]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a71e:	4a27      	ldr	r2, [pc, #156]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a720:	f023 0310 	bic.w	r3, r3, #16
 810a724:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810a726:	4b25      	ldr	r3, [pc, #148]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a72a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a72e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810a732:	687a      	ldr	r2, [r7, #4]
 810a734:	69d2      	ldr	r2, [r2, #28]
 810a736:	00d2      	lsls	r2, r2, #3
 810a738:	4920      	ldr	r1, [pc, #128]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a73a:	4313      	orrs	r3, r2
 810a73c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810a73e:	4b1f      	ldr	r3, [pc, #124]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a742:	4a1e      	ldr	r2, [pc, #120]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a744:	f043 0310 	orr.w	r3, r3, #16
 810a748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810a74a:	683b      	ldr	r3, [r7, #0]
 810a74c:	2b00      	cmp	r3, #0
 810a74e:	d106      	bne.n	810a75e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810a750:	4b1a      	ldr	r3, [pc, #104]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a754:	4a19      	ldr	r2, [pc, #100]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a756:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810a75a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a75c:	e00f      	b.n	810a77e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810a75e:	683b      	ldr	r3, [r7, #0]
 810a760:	2b01      	cmp	r3, #1
 810a762:	d106      	bne.n	810a772 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810a764:	4b15      	ldr	r3, [pc, #84]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a768:	4a14      	ldr	r2, [pc, #80]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a76a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810a76e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a770:	e005      	b.n	810a77e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810a772:	4b12      	ldr	r3, [pc, #72]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a776:	4a11      	ldr	r2, [pc, #68]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a778:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810a77c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810a77e:	4b0f      	ldr	r3, [pc, #60]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a780:	681b      	ldr	r3, [r3, #0]
 810a782:	4a0e      	ldr	r2, [pc, #56]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a784:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810a788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a78a:	f7f9 fdc9 	bl	8104320 <HAL_GetTick>
 810a78e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a790:	e008      	b.n	810a7a4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810a792:	f7f9 fdc5 	bl	8104320 <HAL_GetTick>
 810a796:	4602      	mov	r2, r0
 810a798:	68bb      	ldr	r3, [r7, #8]
 810a79a:	1ad3      	subs	r3, r2, r3
 810a79c:	2b02      	cmp	r3, #2
 810a79e:	d901      	bls.n	810a7a4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a7a0:	2303      	movs	r3, #3
 810a7a2:	e006      	b.n	810a7b2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a7a4:	4b05      	ldr	r3, [pc, #20]	@ (810a7bc <RCCEx_PLL2_Config+0x160>)
 810a7a6:	681b      	ldr	r3, [r3, #0]
 810a7a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a7ac:	2b00      	cmp	r3, #0
 810a7ae:	d0f0      	beq.n	810a792 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810a7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 810a7b2:	4618      	mov	r0, r3
 810a7b4:	3710      	adds	r7, #16
 810a7b6:	46bd      	mov	sp, r7
 810a7b8:	bd80      	pop	{r7, pc}
 810a7ba:	bf00      	nop
 810a7bc:	58024400 	.word	0x58024400

0810a7c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810a7c0:	b580      	push	{r7, lr}
 810a7c2:	b084      	sub	sp, #16
 810a7c4:	af00      	add	r7, sp, #0
 810a7c6:	6078      	str	r0, [r7, #4]
 810a7c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a7ca:	2300      	movs	r3, #0
 810a7cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a7ce:	4b54      	ldr	r3, [pc, #336]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a7d2:	f003 0303 	and.w	r3, r3, #3
 810a7d6:	2b03      	cmp	r3, #3
 810a7d8:	d101      	bne.n	810a7de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810a7da:	2301      	movs	r3, #1
 810a7dc:	e09b      	b.n	810a916 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810a7de:	4b50      	ldr	r3, [pc, #320]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a7e0:	681b      	ldr	r3, [r3, #0]
 810a7e2:	4a4f      	ldr	r2, [pc, #316]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a7e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a7e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a7ea:	f7f9 fd99 	bl	8104320 <HAL_GetTick>
 810a7ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a7f0:	e008      	b.n	810a804 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810a7f2:	f7f9 fd95 	bl	8104320 <HAL_GetTick>
 810a7f6:	4602      	mov	r2, r0
 810a7f8:	68bb      	ldr	r3, [r7, #8]
 810a7fa:	1ad3      	subs	r3, r2, r3
 810a7fc:	2b02      	cmp	r3, #2
 810a7fe:	d901      	bls.n	810a804 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a800:	2303      	movs	r3, #3
 810a802:	e088      	b.n	810a916 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a804:	4b46      	ldr	r3, [pc, #280]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a806:	681b      	ldr	r3, [r3, #0]
 810a808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a80c:	2b00      	cmp	r3, #0
 810a80e:	d1f0      	bne.n	810a7f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810a810:	4b43      	ldr	r3, [pc, #268]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a814:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810a818:	687b      	ldr	r3, [r7, #4]
 810a81a:	681b      	ldr	r3, [r3, #0]
 810a81c:	051b      	lsls	r3, r3, #20
 810a81e:	4940      	ldr	r1, [pc, #256]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a820:	4313      	orrs	r3, r2
 810a822:	628b      	str	r3, [r1, #40]	@ 0x28
 810a824:	687b      	ldr	r3, [r7, #4]
 810a826:	685b      	ldr	r3, [r3, #4]
 810a828:	3b01      	subs	r3, #1
 810a82a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a82e:	687b      	ldr	r3, [r7, #4]
 810a830:	689b      	ldr	r3, [r3, #8]
 810a832:	3b01      	subs	r3, #1
 810a834:	025b      	lsls	r3, r3, #9
 810a836:	b29b      	uxth	r3, r3
 810a838:	431a      	orrs	r2, r3
 810a83a:	687b      	ldr	r3, [r7, #4]
 810a83c:	68db      	ldr	r3, [r3, #12]
 810a83e:	3b01      	subs	r3, #1
 810a840:	041b      	lsls	r3, r3, #16
 810a842:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810a846:	431a      	orrs	r2, r3
 810a848:	687b      	ldr	r3, [r7, #4]
 810a84a:	691b      	ldr	r3, [r3, #16]
 810a84c:	3b01      	subs	r3, #1
 810a84e:	061b      	lsls	r3, r3, #24
 810a850:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810a854:	4932      	ldr	r1, [pc, #200]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a856:	4313      	orrs	r3, r2
 810a858:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810a85a:	4b31      	ldr	r3, [pc, #196]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a85e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810a862:	687b      	ldr	r3, [r7, #4]
 810a864:	695b      	ldr	r3, [r3, #20]
 810a866:	492e      	ldr	r1, [pc, #184]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a868:	4313      	orrs	r3, r2
 810a86a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810a86c:	4b2c      	ldr	r3, [pc, #176]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a870:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810a874:	687b      	ldr	r3, [r7, #4]
 810a876:	699b      	ldr	r3, [r3, #24]
 810a878:	4929      	ldr	r1, [pc, #164]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a87a:	4313      	orrs	r3, r2
 810a87c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810a87e:	4b28      	ldr	r3, [pc, #160]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a882:	4a27      	ldr	r2, [pc, #156]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a888:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810a88a:	4b25      	ldr	r3, [pc, #148]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a88e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810a892:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810a896:	687a      	ldr	r2, [r7, #4]
 810a898:	69d2      	ldr	r2, [r2, #28]
 810a89a:	00d2      	lsls	r2, r2, #3
 810a89c:	4920      	ldr	r1, [pc, #128]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a89e:	4313      	orrs	r3, r2
 810a8a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810a8a2:	4b1f      	ldr	r3, [pc, #124]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8a6:	4a1e      	ldr	r2, [pc, #120]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810a8ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810a8ae:	683b      	ldr	r3, [r7, #0]
 810a8b0:	2b00      	cmp	r3, #0
 810a8b2:	d106      	bne.n	810a8c2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810a8b4:	4b1a      	ldr	r3, [pc, #104]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8b8:	4a19      	ldr	r2, [pc, #100]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810a8be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a8c0:	e00f      	b.n	810a8e2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810a8c2:	683b      	ldr	r3, [r7, #0]
 810a8c4:	2b01      	cmp	r3, #1
 810a8c6:	d106      	bne.n	810a8d6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810a8c8:	4b15      	ldr	r3, [pc, #84]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8cc:	4a14      	ldr	r2, [pc, #80]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810a8d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810a8d4:	e005      	b.n	810a8e2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810a8d6:	4b12      	ldr	r3, [pc, #72]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8da:	4a11      	ldr	r2, [pc, #68]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810a8e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810a8e2:	4b0f      	ldr	r3, [pc, #60]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8e4:	681b      	ldr	r3, [r3, #0]
 810a8e6:	4a0e      	ldr	r2, [pc, #56]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a8e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810a8ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a8ee:	f7f9 fd17 	bl	8104320 <HAL_GetTick>
 810a8f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a8f4:	e008      	b.n	810a908 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810a8f6:	f7f9 fd13 	bl	8104320 <HAL_GetTick>
 810a8fa:	4602      	mov	r2, r0
 810a8fc:	68bb      	ldr	r3, [r7, #8]
 810a8fe:	1ad3      	subs	r3, r2, r3
 810a900:	2b02      	cmp	r3, #2
 810a902:	d901      	bls.n	810a908 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a904:	2303      	movs	r3, #3
 810a906:	e006      	b.n	810a916 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a908:	4b05      	ldr	r3, [pc, #20]	@ (810a920 <RCCEx_PLL3_Config+0x160>)
 810a90a:	681b      	ldr	r3, [r3, #0]
 810a90c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a910:	2b00      	cmp	r3, #0
 810a912:	d0f0      	beq.n	810a8f6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810a914:	7bfb      	ldrb	r3, [r7, #15]
}
 810a916:	4618      	mov	r0, r3
 810a918:	3710      	adds	r7, #16
 810a91a:	46bd      	mov	sp, r7
 810a91c:	bd80      	pop	{r7, pc}
 810a91e:	bf00      	nop
 810a920:	58024400 	.word	0x58024400

0810a924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810a924:	b580      	push	{r7, lr}
 810a926:	b082      	sub	sp, #8
 810a928:	af00      	add	r7, sp, #0
 810a92a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810a92c:	687b      	ldr	r3, [r7, #4]
 810a92e:	2b00      	cmp	r3, #0
 810a930:	d101      	bne.n	810a936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810a932:	2301      	movs	r3, #1
 810a934:	e049      	b.n	810a9ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810a936:	687b      	ldr	r3, [r7, #4]
 810a938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810a93c:	b2db      	uxtb	r3, r3
 810a93e:	2b00      	cmp	r3, #0
 810a940:	d106      	bne.n	810a950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810a942:	687b      	ldr	r3, [r7, #4]
 810a944:	2200      	movs	r2, #0
 810a946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810a94a:	6878      	ldr	r0, [r7, #4]
 810a94c:	f7f9 f8d4 	bl	8103af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a950:	687b      	ldr	r3, [r7, #4]
 810a952:	2202      	movs	r2, #2
 810a954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810a958:	687b      	ldr	r3, [r7, #4]
 810a95a:	681a      	ldr	r2, [r3, #0]
 810a95c:	687b      	ldr	r3, [r7, #4]
 810a95e:	3304      	adds	r3, #4
 810a960:	4619      	mov	r1, r3
 810a962:	4610      	mov	r0, r2
 810a964:	f000 fe70 	bl	810b648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810a968:	687b      	ldr	r3, [r7, #4]
 810a96a:	2201      	movs	r2, #1
 810a96c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a970:	687b      	ldr	r3, [r7, #4]
 810a972:	2201      	movs	r2, #1
 810a974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810a978:	687b      	ldr	r3, [r7, #4]
 810a97a:	2201      	movs	r2, #1
 810a97c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810a980:	687b      	ldr	r3, [r7, #4]
 810a982:	2201      	movs	r2, #1
 810a984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810a988:	687b      	ldr	r3, [r7, #4]
 810a98a:	2201      	movs	r2, #1
 810a98c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810a990:	687b      	ldr	r3, [r7, #4]
 810a992:	2201      	movs	r2, #1
 810a994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810a998:	687b      	ldr	r3, [r7, #4]
 810a99a:	2201      	movs	r2, #1
 810a99c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	2201      	movs	r2, #1
 810a9a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810a9a8:	687b      	ldr	r3, [r7, #4]
 810a9aa:	2201      	movs	r2, #1
 810a9ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810a9b0:	687b      	ldr	r3, [r7, #4]
 810a9b2:	2201      	movs	r2, #1
 810a9b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810a9b8:	687b      	ldr	r3, [r7, #4]
 810a9ba:	2201      	movs	r2, #1
 810a9bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810a9c0:	687b      	ldr	r3, [r7, #4]
 810a9c2:	2201      	movs	r2, #1
 810a9c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810a9c8:	2300      	movs	r3, #0
}
 810a9ca:	4618      	mov	r0, r3
 810a9cc:	3708      	adds	r7, #8
 810a9ce:	46bd      	mov	sp, r7
 810a9d0:	bd80      	pop	{r7, pc}
	...

0810a9d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 810a9d4:	b480      	push	{r7}
 810a9d6:	b085      	sub	sp, #20
 810a9d8:	af00      	add	r7, sp, #0
 810a9da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810a9dc:	687b      	ldr	r3, [r7, #4]
 810a9de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810a9e2:	b2db      	uxtb	r3, r3
 810a9e4:	2b01      	cmp	r3, #1
 810a9e6:	d001      	beq.n	810a9ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 810a9e8:	2301      	movs	r3, #1
 810a9ea:	e04c      	b.n	810aa86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a9ec:	687b      	ldr	r3, [r7, #4]
 810a9ee:	2202      	movs	r2, #2
 810a9f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	681b      	ldr	r3, [r3, #0]
 810a9f8:	4a26      	ldr	r2, [pc, #152]	@ (810aa94 <HAL_TIM_Base_Start+0xc0>)
 810a9fa:	4293      	cmp	r3, r2
 810a9fc:	d022      	beq.n	810aa44 <HAL_TIM_Base_Start+0x70>
 810a9fe:	687b      	ldr	r3, [r7, #4]
 810aa00:	681b      	ldr	r3, [r3, #0]
 810aa02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aa06:	d01d      	beq.n	810aa44 <HAL_TIM_Base_Start+0x70>
 810aa08:	687b      	ldr	r3, [r7, #4]
 810aa0a:	681b      	ldr	r3, [r3, #0]
 810aa0c:	4a22      	ldr	r2, [pc, #136]	@ (810aa98 <HAL_TIM_Base_Start+0xc4>)
 810aa0e:	4293      	cmp	r3, r2
 810aa10:	d018      	beq.n	810aa44 <HAL_TIM_Base_Start+0x70>
 810aa12:	687b      	ldr	r3, [r7, #4]
 810aa14:	681b      	ldr	r3, [r3, #0]
 810aa16:	4a21      	ldr	r2, [pc, #132]	@ (810aa9c <HAL_TIM_Base_Start+0xc8>)
 810aa18:	4293      	cmp	r3, r2
 810aa1a:	d013      	beq.n	810aa44 <HAL_TIM_Base_Start+0x70>
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	681b      	ldr	r3, [r3, #0]
 810aa20:	4a1f      	ldr	r2, [pc, #124]	@ (810aaa0 <HAL_TIM_Base_Start+0xcc>)
 810aa22:	4293      	cmp	r3, r2
 810aa24:	d00e      	beq.n	810aa44 <HAL_TIM_Base_Start+0x70>
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	681b      	ldr	r3, [r3, #0]
 810aa2a:	4a1e      	ldr	r2, [pc, #120]	@ (810aaa4 <HAL_TIM_Base_Start+0xd0>)
 810aa2c:	4293      	cmp	r3, r2
 810aa2e:	d009      	beq.n	810aa44 <HAL_TIM_Base_Start+0x70>
 810aa30:	687b      	ldr	r3, [r7, #4]
 810aa32:	681b      	ldr	r3, [r3, #0]
 810aa34:	4a1c      	ldr	r2, [pc, #112]	@ (810aaa8 <HAL_TIM_Base_Start+0xd4>)
 810aa36:	4293      	cmp	r3, r2
 810aa38:	d004      	beq.n	810aa44 <HAL_TIM_Base_Start+0x70>
 810aa3a:	687b      	ldr	r3, [r7, #4]
 810aa3c:	681b      	ldr	r3, [r3, #0]
 810aa3e:	4a1b      	ldr	r2, [pc, #108]	@ (810aaac <HAL_TIM_Base_Start+0xd8>)
 810aa40:	4293      	cmp	r3, r2
 810aa42:	d115      	bne.n	810aa70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810aa44:	687b      	ldr	r3, [r7, #4]
 810aa46:	681b      	ldr	r3, [r3, #0]
 810aa48:	689a      	ldr	r2, [r3, #8]
 810aa4a:	4b19      	ldr	r3, [pc, #100]	@ (810aab0 <HAL_TIM_Base_Start+0xdc>)
 810aa4c:	4013      	ands	r3, r2
 810aa4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810aa50:	68fb      	ldr	r3, [r7, #12]
 810aa52:	2b06      	cmp	r3, #6
 810aa54:	d015      	beq.n	810aa82 <HAL_TIM_Base_Start+0xae>
 810aa56:	68fb      	ldr	r3, [r7, #12]
 810aa58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810aa5c:	d011      	beq.n	810aa82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	681b      	ldr	r3, [r3, #0]
 810aa62:	681a      	ldr	r2, [r3, #0]
 810aa64:	687b      	ldr	r3, [r7, #4]
 810aa66:	681b      	ldr	r3, [r3, #0]
 810aa68:	f042 0201 	orr.w	r2, r2, #1
 810aa6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810aa6e:	e008      	b.n	810aa82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810aa70:	687b      	ldr	r3, [r7, #4]
 810aa72:	681b      	ldr	r3, [r3, #0]
 810aa74:	681a      	ldr	r2, [r3, #0]
 810aa76:	687b      	ldr	r3, [r7, #4]
 810aa78:	681b      	ldr	r3, [r3, #0]
 810aa7a:	f042 0201 	orr.w	r2, r2, #1
 810aa7e:	601a      	str	r2, [r3, #0]
 810aa80:	e000      	b.n	810aa84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810aa82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810aa84:	2300      	movs	r3, #0
}
 810aa86:	4618      	mov	r0, r3
 810aa88:	3714      	adds	r7, #20
 810aa8a:	46bd      	mov	sp, r7
 810aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa90:	4770      	bx	lr
 810aa92:	bf00      	nop
 810aa94:	40010000 	.word	0x40010000
 810aa98:	40000400 	.word	0x40000400
 810aa9c:	40000800 	.word	0x40000800
 810aaa0:	40000c00 	.word	0x40000c00
 810aaa4:	40010400 	.word	0x40010400
 810aaa8:	40001800 	.word	0x40001800
 810aaac:	40014000 	.word	0x40014000
 810aab0:	00010007 	.word	0x00010007

0810aab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810aab4:	b480      	push	{r7}
 810aab6:	b085      	sub	sp, #20
 810aab8:	af00      	add	r7, sp, #0
 810aaba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810aabc:	687b      	ldr	r3, [r7, #4]
 810aabe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810aac2:	b2db      	uxtb	r3, r3
 810aac4:	2b01      	cmp	r3, #1
 810aac6:	d001      	beq.n	810aacc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810aac8:	2301      	movs	r3, #1
 810aaca:	e054      	b.n	810ab76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810aacc:	687b      	ldr	r3, [r7, #4]
 810aace:	2202      	movs	r2, #2
 810aad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810aad4:	687b      	ldr	r3, [r7, #4]
 810aad6:	681b      	ldr	r3, [r3, #0]
 810aad8:	68da      	ldr	r2, [r3, #12]
 810aada:	687b      	ldr	r3, [r7, #4]
 810aadc:	681b      	ldr	r3, [r3, #0]
 810aade:	f042 0201 	orr.w	r2, r2, #1
 810aae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810aae4:	687b      	ldr	r3, [r7, #4]
 810aae6:	681b      	ldr	r3, [r3, #0]
 810aae8:	4a26      	ldr	r2, [pc, #152]	@ (810ab84 <HAL_TIM_Base_Start_IT+0xd0>)
 810aaea:	4293      	cmp	r3, r2
 810aaec:	d022      	beq.n	810ab34 <HAL_TIM_Base_Start_IT+0x80>
 810aaee:	687b      	ldr	r3, [r7, #4]
 810aaf0:	681b      	ldr	r3, [r3, #0]
 810aaf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aaf6:	d01d      	beq.n	810ab34 <HAL_TIM_Base_Start_IT+0x80>
 810aaf8:	687b      	ldr	r3, [r7, #4]
 810aafa:	681b      	ldr	r3, [r3, #0]
 810aafc:	4a22      	ldr	r2, [pc, #136]	@ (810ab88 <HAL_TIM_Base_Start_IT+0xd4>)
 810aafe:	4293      	cmp	r3, r2
 810ab00:	d018      	beq.n	810ab34 <HAL_TIM_Base_Start_IT+0x80>
 810ab02:	687b      	ldr	r3, [r7, #4]
 810ab04:	681b      	ldr	r3, [r3, #0]
 810ab06:	4a21      	ldr	r2, [pc, #132]	@ (810ab8c <HAL_TIM_Base_Start_IT+0xd8>)
 810ab08:	4293      	cmp	r3, r2
 810ab0a:	d013      	beq.n	810ab34 <HAL_TIM_Base_Start_IT+0x80>
 810ab0c:	687b      	ldr	r3, [r7, #4]
 810ab0e:	681b      	ldr	r3, [r3, #0]
 810ab10:	4a1f      	ldr	r2, [pc, #124]	@ (810ab90 <HAL_TIM_Base_Start_IT+0xdc>)
 810ab12:	4293      	cmp	r3, r2
 810ab14:	d00e      	beq.n	810ab34 <HAL_TIM_Base_Start_IT+0x80>
 810ab16:	687b      	ldr	r3, [r7, #4]
 810ab18:	681b      	ldr	r3, [r3, #0]
 810ab1a:	4a1e      	ldr	r2, [pc, #120]	@ (810ab94 <HAL_TIM_Base_Start_IT+0xe0>)
 810ab1c:	4293      	cmp	r3, r2
 810ab1e:	d009      	beq.n	810ab34 <HAL_TIM_Base_Start_IT+0x80>
 810ab20:	687b      	ldr	r3, [r7, #4]
 810ab22:	681b      	ldr	r3, [r3, #0]
 810ab24:	4a1c      	ldr	r2, [pc, #112]	@ (810ab98 <HAL_TIM_Base_Start_IT+0xe4>)
 810ab26:	4293      	cmp	r3, r2
 810ab28:	d004      	beq.n	810ab34 <HAL_TIM_Base_Start_IT+0x80>
 810ab2a:	687b      	ldr	r3, [r7, #4]
 810ab2c:	681b      	ldr	r3, [r3, #0]
 810ab2e:	4a1b      	ldr	r2, [pc, #108]	@ (810ab9c <HAL_TIM_Base_Start_IT+0xe8>)
 810ab30:	4293      	cmp	r3, r2
 810ab32:	d115      	bne.n	810ab60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810ab34:	687b      	ldr	r3, [r7, #4]
 810ab36:	681b      	ldr	r3, [r3, #0]
 810ab38:	689a      	ldr	r2, [r3, #8]
 810ab3a:	4b19      	ldr	r3, [pc, #100]	@ (810aba0 <HAL_TIM_Base_Start_IT+0xec>)
 810ab3c:	4013      	ands	r3, r2
 810ab3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ab40:	68fb      	ldr	r3, [r7, #12]
 810ab42:	2b06      	cmp	r3, #6
 810ab44:	d015      	beq.n	810ab72 <HAL_TIM_Base_Start_IT+0xbe>
 810ab46:	68fb      	ldr	r3, [r7, #12]
 810ab48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ab4c:	d011      	beq.n	810ab72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810ab4e:	687b      	ldr	r3, [r7, #4]
 810ab50:	681b      	ldr	r3, [r3, #0]
 810ab52:	681a      	ldr	r2, [r3, #0]
 810ab54:	687b      	ldr	r3, [r7, #4]
 810ab56:	681b      	ldr	r3, [r3, #0]
 810ab58:	f042 0201 	orr.w	r2, r2, #1
 810ab5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ab5e:	e008      	b.n	810ab72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810ab60:	687b      	ldr	r3, [r7, #4]
 810ab62:	681b      	ldr	r3, [r3, #0]
 810ab64:	681a      	ldr	r2, [r3, #0]
 810ab66:	687b      	ldr	r3, [r7, #4]
 810ab68:	681b      	ldr	r3, [r3, #0]
 810ab6a:	f042 0201 	orr.w	r2, r2, #1
 810ab6e:	601a      	str	r2, [r3, #0]
 810ab70:	e000      	b.n	810ab74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ab72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810ab74:	2300      	movs	r3, #0
}
 810ab76:	4618      	mov	r0, r3
 810ab78:	3714      	adds	r7, #20
 810ab7a:	46bd      	mov	sp, r7
 810ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab80:	4770      	bx	lr
 810ab82:	bf00      	nop
 810ab84:	40010000 	.word	0x40010000
 810ab88:	40000400 	.word	0x40000400
 810ab8c:	40000800 	.word	0x40000800
 810ab90:	40000c00 	.word	0x40000c00
 810ab94:	40010400 	.word	0x40010400
 810ab98:	40001800 	.word	0x40001800
 810ab9c:	40014000 	.word	0x40014000
 810aba0:	00010007 	.word	0x00010007

0810aba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810aba4:	b580      	push	{r7, lr}
 810aba6:	b082      	sub	sp, #8
 810aba8:	af00      	add	r7, sp, #0
 810abaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	2b00      	cmp	r3, #0
 810abb0:	d101      	bne.n	810abb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810abb2:	2301      	movs	r3, #1
 810abb4:	e049      	b.n	810ac4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810abb6:	687b      	ldr	r3, [r7, #4]
 810abb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810abbc:	b2db      	uxtb	r3, r3
 810abbe:	2b00      	cmp	r3, #0
 810abc0:	d106      	bne.n	810abd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810abc2:	687b      	ldr	r3, [r7, #4]
 810abc4:	2200      	movs	r2, #0
 810abc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810abca:	6878      	ldr	r0, [r7, #4]
 810abcc:	f000 f841 	bl	810ac52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810abd0:	687b      	ldr	r3, [r7, #4]
 810abd2:	2202      	movs	r2, #2
 810abd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810abd8:	687b      	ldr	r3, [r7, #4]
 810abda:	681a      	ldr	r2, [r3, #0]
 810abdc:	687b      	ldr	r3, [r7, #4]
 810abde:	3304      	adds	r3, #4
 810abe0:	4619      	mov	r1, r3
 810abe2:	4610      	mov	r0, r2
 810abe4:	f000 fd30 	bl	810b648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810abe8:	687b      	ldr	r3, [r7, #4]
 810abea:	2201      	movs	r2, #1
 810abec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810abf0:	687b      	ldr	r3, [r7, #4]
 810abf2:	2201      	movs	r2, #1
 810abf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810abf8:	687b      	ldr	r3, [r7, #4]
 810abfa:	2201      	movs	r2, #1
 810abfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ac00:	687b      	ldr	r3, [r7, #4]
 810ac02:	2201      	movs	r2, #1
 810ac04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	2201      	movs	r2, #1
 810ac0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ac10:	687b      	ldr	r3, [r7, #4]
 810ac12:	2201      	movs	r2, #1
 810ac14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ac18:	687b      	ldr	r3, [r7, #4]
 810ac1a:	2201      	movs	r2, #1
 810ac1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ac20:	687b      	ldr	r3, [r7, #4]
 810ac22:	2201      	movs	r2, #1
 810ac24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810ac28:	687b      	ldr	r3, [r7, #4]
 810ac2a:	2201      	movs	r2, #1
 810ac2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810ac30:	687b      	ldr	r3, [r7, #4]
 810ac32:	2201      	movs	r2, #1
 810ac34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810ac38:	687b      	ldr	r3, [r7, #4]
 810ac3a:	2201      	movs	r2, #1
 810ac3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ac40:	687b      	ldr	r3, [r7, #4]
 810ac42:	2201      	movs	r2, #1
 810ac44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810ac48:	2300      	movs	r3, #0
}
 810ac4a:	4618      	mov	r0, r3
 810ac4c:	3708      	adds	r7, #8
 810ac4e:	46bd      	mov	sp, r7
 810ac50:	bd80      	pop	{r7, pc}

0810ac52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810ac52:	b480      	push	{r7}
 810ac54:	b083      	sub	sp, #12
 810ac56:	af00      	add	r7, sp, #0
 810ac58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810ac5a:	bf00      	nop
 810ac5c:	370c      	adds	r7, #12
 810ac5e:	46bd      	mov	sp, r7
 810ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac64:	4770      	bx	lr
	...

0810ac68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810ac68:	b580      	push	{r7, lr}
 810ac6a:	b084      	sub	sp, #16
 810ac6c:	af00      	add	r7, sp, #0
 810ac6e:	6078      	str	r0, [r7, #4]
 810ac70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810ac72:	683b      	ldr	r3, [r7, #0]
 810ac74:	2b00      	cmp	r3, #0
 810ac76:	d109      	bne.n	810ac8c <HAL_TIM_PWM_Start+0x24>
 810ac78:	687b      	ldr	r3, [r7, #4]
 810ac7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 810ac7e:	b2db      	uxtb	r3, r3
 810ac80:	2b01      	cmp	r3, #1
 810ac82:	bf14      	ite	ne
 810ac84:	2301      	movne	r3, #1
 810ac86:	2300      	moveq	r3, #0
 810ac88:	b2db      	uxtb	r3, r3
 810ac8a:	e03c      	b.n	810ad06 <HAL_TIM_PWM_Start+0x9e>
 810ac8c:	683b      	ldr	r3, [r7, #0]
 810ac8e:	2b04      	cmp	r3, #4
 810ac90:	d109      	bne.n	810aca6 <HAL_TIM_PWM_Start+0x3e>
 810ac92:	687b      	ldr	r3, [r7, #4]
 810ac94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 810ac98:	b2db      	uxtb	r3, r3
 810ac9a:	2b01      	cmp	r3, #1
 810ac9c:	bf14      	ite	ne
 810ac9e:	2301      	movne	r3, #1
 810aca0:	2300      	moveq	r3, #0
 810aca2:	b2db      	uxtb	r3, r3
 810aca4:	e02f      	b.n	810ad06 <HAL_TIM_PWM_Start+0x9e>
 810aca6:	683b      	ldr	r3, [r7, #0]
 810aca8:	2b08      	cmp	r3, #8
 810acaa:	d109      	bne.n	810acc0 <HAL_TIM_PWM_Start+0x58>
 810acac:	687b      	ldr	r3, [r7, #4]
 810acae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810acb2:	b2db      	uxtb	r3, r3
 810acb4:	2b01      	cmp	r3, #1
 810acb6:	bf14      	ite	ne
 810acb8:	2301      	movne	r3, #1
 810acba:	2300      	moveq	r3, #0
 810acbc:	b2db      	uxtb	r3, r3
 810acbe:	e022      	b.n	810ad06 <HAL_TIM_PWM_Start+0x9e>
 810acc0:	683b      	ldr	r3, [r7, #0]
 810acc2:	2b0c      	cmp	r3, #12
 810acc4:	d109      	bne.n	810acda <HAL_TIM_PWM_Start+0x72>
 810acc6:	687b      	ldr	r3, [r7, #4]
 810acc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810accc:	b2db      	uxtb	r3, r3
 810acce:	2b01      	cmp	r3, #1
 810acd0:	bf14      	ite	ne
 810acd2:	2301      	movne	r3, #1
 810acd4:	2300      	moveq	r3, #0
 810acd6:	b2db      	uxtb	r3, r3
 810acd8:	e015      	b.n	810ad06 <HAL_TIM_PWM_Start+0x9e>
 810acda:	683b      	ldr	r3, [r7, #0]
 810acdc:	2b10      	cmp	r3, #16
 810acde:	d109      	bne.n	810acf4 <HAL_TIM_PWM_Start+0x8c>
 810ace0:	687b      	ldr	r3, [r7, #4]
 810ace2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810ace6:	b2db      	uxtb	r3, r3
 810ace8:	2b01      	cmp	r3, #1
 810acea:	bf14      	ite	ne
 810acec:	2301      	movne	r3, #1
 810acee:	2300      	moveq	r3, #0
 810acf0:	b2db      	uxtb	r3, r3
 810acf2:	e008      	b.n	810ad06 <HAL_TIM_PWM_Start+0x9e>
 810acf4:	687b      	ldr	r3, [r7, #4]
 810acf6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 810acfa:	b2db      	uxtb	r3, r3
 810acfc:	2b01      	cmp	r3, #1
 810acfe:	bf14      	ite	ne
 810ad00:	2301      	movne	r3, #1
 810ad02:	2300      	moveq	r3, #0
 810ad04:	b2db      	uxtb	r3, r3
 810ad06:	2b00      	cmp	r3, #0
 810ad08:	d001      	beq.n	810ad0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810ad0a:	2301      	movs	r3, #1
 810ad0c:	e0a1      	b.n	810ae52 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810ad0e:	683b      	ldr	r3, [r7, #0]
 810ad10:	2b00      	cmp	r3, #0
 810ad12:	d104      	bne.n	810ad1e <HAL_TIM_PWM_Start+0xb6>
 810ad14:	687b      	ldr	r3, [r7, #4]
 810ad16:	2202      	movs	r2, #2
 810ad18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810ad1c:	e023      	b.n	810ad66 <HAL_TIM_PWM_Start+0xfe>
 810ad1e:	683b      	ldr	r3, [r7, #0]
 810ad20:	2b04      	cmp	r3, #4
 810ad22:	d104      	bne.n	810ad2e <HAL_TIM_PWM_Start+0xc6>
 810ad24:	687b      	ldr	r3, [r7, #4]
 810ad26:	2202      	movs	r2, #2
 810ad28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ad2c:	e01b      	b.n	810ad66 <HAL_TIM_PWM_Start+0xfe>
 810ad2e:	683b      	ldr	r3, [r7, #0]
 810ad30:	2b08      	cmp	r3, #8
 810ad32:	d104      	bne.n	810ad3e <HAL_TIM_PWM_Start+0xd6>
 810ad34:	687b      	ldr	r3, [r7, #4]
 810ad36:	2202      	movs	r2, #2
 810ad38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ad3c:	e013      	b.n	810ad66 <HAL_TIM_PWM_Start+0xfe>
 810ad3e:	683b      	ldr	r3, [r7, #0]
 810ad40:	2b0c      	cmp	r3, #12
 810ad42:	d104      	bne.n	810ad4e <HAL_TIM_PWM_Start+0xe6>
 810ad44:	687b      	ldr	r3, [r7, #4]
 810ad46:	2202      	movs	r2, #2
 810ad48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ad4c:	e00b      	b.n	810ad66 <HAL_TIM_PWM_Start+0xfe>
 810ad4e:	683b      	ldr	r3, [r7, #0]
 810ad50:	2b10      	cmp	r3, #16
 810ad52:	d104      	bne.n	810ad5e <HAL_TIM_PWM_Start+0xf6>
 810ad54:	687b      	ldr	r3, [r7, #4]
 810ad56:	2202      	movs	r2, #2
 810ad58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ad5c:	e003      	b.n	810ad66 <HAL_TIM_PWM_Start+0xfe>
 810ad5e:	687b      	ldr	r3, [r7, #4]
 810ad60:	2202      	movs	r2, #2
 810ad62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810ad66:	687b      	ldr	r3, [r7, #4]
 810ad68:	681b      	ldr	r3, [r3, #0]
 810ad6a:	2201      	movs	r2, #1
 810ad6c:	6839      	ldr	r1, [r7, #0]
 810ad6e:	4618      	mov	r0, r3
 810ad70:	f001 f882 	bl	810be78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810ad74:	687b      	ldr	r3, [r7, #4]
 810ad76:	681b      	ldr	r3, [r3, #0]
 810ad78:	4a38      	ldr	r2, [pc, #224]	@ (810ae5c <HAL_TIM_PWM_Start+0x1f4>)
 810ad7a:	4293      	cmp	r3, r2
 810ad7c:	d013      	beq.n	810ada6 <HAL_TIM_PWM_Start+0x13e>
 810ad7e:	687b      	ldr	r3, [r7, #4]
 810ad80:	681b      	ldr	r3, [r3, #0]
 810ad82:	4a37      	ldr	r2, [pc, #220]	@ (810ae60 <HAL_TIM_PWM_Start+0x1f8>)
 810ad84:	4293      	cmp	r3, r2
 810ad86:	d00e      	beq.n	810ada6 <HAL_TIM_PWM_Start+0x13e>
 810ad88:	687b      	ldr	r3, [r7, #4]
 810ad8a:	681b      	ldr	r3, [r3, #0]
 810ad8c:	4a35      	ldr	r2, [pc, #212]	@ (810ae64 <HAL_TIM_PWM_Start+0x1fc>)
 810ad8e:	4293      	cmp	r3, r2
 810ad90:	d009      	beq.n	810ada6 <HAL_TIM_PWM_Start+0x13e>
 810ad92:	687b      	ldr	r3, [r7, #4]
 810ad94:	681b      	ldr	r3, [r3, #0]
 810ad96:	4a34      	ldr	r2, [pc, #208]	@ (810ae68 <HAL_TIM_PWM_Start+0x200>)
 810ad98:	4293      	cmp	r3, r2
 810ad9a:	d004      	beq.n	810ada6 <HAL_TIM_PWM_Start+0x13e>
 810ad9c:	687b      	ldr	r3, [r7, #4]
 810ad9e:	681b      	ldr	r3, [r3, #0]
 810ada0:	4a32      	ldr	r2, [pc, #200]	@ (810ae6c <HAL_TIM_PWM_Start+0x204>)
 810ada2:	4293      	cmp	r3, r2
 810ada4:	d101      	bne.n	810adaa <HAL_TIM_PWM_Start+0x142>
 810ada6:	2301      	movs	r3, #1
 810ada8:	e000      	b.n	810adac <HAL_TIM_PWM_Start+0x144>
 810adaa:	2300      	movs	r3, #0
 810adac:	2b00      	cmp	r3, #0
 810adae:	d007      	beq.n	810adc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810adb0:	687b      	ldr	r3, [r7, #4]
 810adb2:	681b      	ldr	r3, [r3, #0]
 810adb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810adb6:	687b      	ldr	r3, [r7, #4]
 810adb8:	681b      	ldr	r3, [r3, #0]
 810adba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810adbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810adc0:	687b      	ldr	r3, [r7, #4]
 810adc2:	681b      	ldr	r3, [r3, #0]
 810adc4:	4a25      	ldr	r2, [pc, #148]	@ (810ae5c <HAL_TIM_PWM_Start+0x1f4>)
 810adc6:	4293      	cmp	r3, r2
 810adc8:	d022      	beq.n	810ae10 <HAL_TIM_PWM_Start+0x1a8>
 810adca:	687b      	ldr	r3, [r7, #4]
 810adcc:	681b      	ldr	r3, [r3, #0]
 810adce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810add2:	d01d      	beq.n	810ae10 <HAL_TIM_PWM_Start+0x1a8>
 810add4:	687b      	ldr	r3, [r7, #4]
 810add6:	681b      	ldr	r3, [r3, #0]
 810add8:	4a25      	ldr	r2, [pc, #148]	@ (810ae70 <HAL_TIM_PWM_Start+0x208>)
 810adda:	4293      	cmp	r3, r2
 810addc:	d018      	beq.n	810ae10 <HAL_TIM_PWM_Start+0x1a8>
 810adde:	687b      	ldr	r3, [r7, #4]
 810ade0:	681b      	ldr	r3, [r3, #0]
 810ade2:	4a24      	ldr	r2, [pc, #144]	@ (810ae74 <HAL_TIM_PWM_Start+0x20c>)
 810ade4:	4293      	cmp	r3, r2
 810ade6:	d013      	beq.n	810ae10 <HAL_TIM_PWM_Start+0x1a8>
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	681b      	ldr	r3, [r3, #0]
 810adec:	4a22      	ldr	r2, [pc, #136]	@ (810ae78 <HAL_TIM_PWM_Start+0x210>)
 810adee:	4293      	cmp	r3, r2
 810adf0:	d00e      	beq.n	810ae10 <HAL_TIM_PWM_Start+0x1a8>
 810adf2:	687b      	ldr	r3, [r7, #4]
 810adf4:	681b      	ldr	r3, [r3, #0]
 810adf6:	4a1a      	ldr	r2, [pc, #104]	@ (810ae60 <HAL_TIM_PWM_Start+0x1f8>)
 810adf8:	4293      	cmp	r3, r2
 810adfa:	d009      	beq.n	810ae10 <HAL_TIM_PWM_Start+0x1a8>
 810adfc:	687b      	ldr	r3, [r7, #4]
 810adfe:	681b      	ldr	r3, [r3, #0]
 810ae00:	4a1e      	ldr	r2, [pc, #120]	@ (810ae7c <HAL_TIM_PWM_Start+0x214>)
 810ae02:	4293      	cmp	r3, r2
 810ae04:	d004      	beq.n	810ae10 <HAL_TIM_PWM_Start+0x1a8>
 810ae06:	687b      	ldr	r3, [r7, #4]
 810ae08:	681b      	ldr	r3, [r3, #0]
 810ae0a:	4a16      	ldr	r2, [pc, #88]	@ (810ae64 <HAL_TIM_PWM_Start+0x1fc>)
 810ae0c:	4293      	cmp	r3, r2
 810ae0e:	d115      	bne.n	810ae3c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810ae10:	687b      	ldr	r3, [r7, #4]
 810ae12:	681b      	ldr	r3, [r3, #0]
 810ae14:	689a      	ldr	r2, [r3, #8]
 810ae16:	4b1a      	ldr	r3, [pc, #104]	@ (810ae80 <HAL_TIM_PWM_Start+0x218>)
 810ae18:	4013      	ands	r3, r2
 810ae1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ae1c:	68fb      	ldr	r3, [r7, #12]
 810ae1e:	2b06      	cmp	r3, #6
 810ae20:	d015      	beq.n	810ae4e <HAL_TIM_PWM_Start+0x1e6>
 810ae22:	68fb      	ldr	r3, [r7, #12]
 810ae24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ae28:	d011      	beq.n	810ae4e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810ae2a:	687b      	ldr	r3, [r7, #4]
 810ae2c:	681b      	ldr	r3, [r3, #0]
 810ae2e:	681a      	ldr	r2, [r3, #0]
 810ae30:	687b      	ldr	r3, [r7, #4]
 810ae32:	681b      	ldr	r3, [r3, #0]
 810ae34:	f042 0201 	orr.w	r2, r2, #1
 810ae38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ae3a:	e008      	b.n	810ae4e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810ae3c:	687b      	ldr	r3, [r7, #4]
 810ae3e:	681b      	ldr	r3, [r3, #0]
 810ae40:	681a      	ldr	r2, [r3, #0]
 810ae42:	687b      	ldr	r3, [r7, #4]
 810ae44:	681b      	ldr	r3, [r3, #0]
 810ae46:	f042 0201 	orr.w	r2, r2, #1
 810ae4a:	601a      	str	r2, [r3, #0]
 810ae4c:	e000      	b.n	810ae50 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ae4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810ae50:	2300      	movs	r3, #0
}
 810ae52:	4618      	mov	r0, r3
 810ae54:	3710      	adds	r7, #16
 810ae56:	46bd      	mov	sp, r7
 810ae58:	bd80      	pop	{r7, pc}
 810ae5a:	bf00      	nop
 810ae5c:	40010000 	.word	0x40010000
 810ae60:	40010400 	.word	0x40010400
 810ae64:	40014000 	.word	0x40014000
 810ae68:	40014400 	.word	0x40014400
 810ae6c:	40014800 	.word	0x40014800
 810ae70:	40000400 	.word	0x40000400
 810ae74:	40000800 	.word	0x40000800
 810ae78:	40000c00 	.word	0x40000c00
 810ae7c:	40001800 	.word	0x40001800
 810ae80:	00010007 	.word	0x00010007

0810ae84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 810ae84:	b580      	push	{r7, lr}
 810ae86:	b086      	sub	sp, #24
 810ae88:	af00      	add	r7, sp, #0
 810ae8a:	6078      	str	r0, [r7, #4]
 810ae8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ae8e:	687b      	ldr	r3, [r7, #4]
 810ae90:	2b00      	cmp	r3, #0
 810ae92:	d101      	bne.n	810ae98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 810ae94:	2301      	movs	r3, #1
 810ae96:	e097      	b.n	810afc8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ae98:	687b      	ldr	r3, [r7, #4]
 810ae9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ae9e:	b2db      	uxtb	r3, r3
 810aea0:	2b00      	cmp	r3, #0
 810aea2:	d106      	bne.n	810aeb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810aea4:	687b      	ldr	r3, [r7, #4]
 810aea6:	2200      	movs	r2, #0
 810aea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 810aeac:	6878      	ldr	r0, [r7, #4]
 810aeae:	f7f8 fe97 	bl	8103be0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810aeb2:	687b      	ldr	r3, [r7, #4]
 810aeb4:	2202      	movs	r2, #2
 810aeb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810aeba:	687b      	ldr	r3, [r7, #4]
 810aebc:	681b      	ldr	r3, [r3, #0]
 810aebe:	689b      	ldr	r3, [r3, #8]
 810aec0:	687a      	ldr	r2, [r7, #4]
 810aec2:	6812      	ldr	r2, [r2, #0]
 810aec4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 810aec8:	f023 0307 	bic.w	r3, r3, #7
 810aecc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810aece:	687b      	ldr	r3, [r7, #4]
 810aed0:	681a      	ldr	r2, [r3, #0]
 810aed2:	687b      	ldr	r3, [r7, #4]
 810aed4:	3304      	adds	r3, #4
 810aed6:	4619      	mov	r1, r3
 810aed8:	4610      	mov	r0, r2
 810aeda:	f000 fbb5 	bl	810b648 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810aede:	687b      	ldr	r3, [r7, #4]
 810aee0:	681b      	ldr	r3, [r3, #0]
 810aee2:	689b      	ldr	r3, [r3, #8]
 810aee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810aee6:	687b      	ldr	r3, [r7, #4]
 810aee8:	681b      	ldr	r3, [r3, #0]
 810aeea:	699b      	ldr	r3, [r3, #24]
 810aeec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810aeee:	687b      	ldr	r3, [r7, #4]
 810aef0:	681b      	ldr	r3, [r3, #0]
 810aef2:	6a1b      	ldr	r3, [r3, #32]
 810aef4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810aef6:	683b      	ldr	r3, [r7, #0]
 810aef8:	681b      	ldr	r3, [r3, #0]
 810aefa:	697a      	ldr	r2, [r7, #20]
 810aefc:	4313      	orrs	r3, r2
 810aefe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 810af00:	693b      	ldr	r3, [r7, #16]
 810af02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810af06:	f023 0303 	bic.w	r3, r3, #3
 810af0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 810af0c:	683b      	ldr	r3, [r7, #0]
 810af0e:	689a      	ldr	r2, [r3, #8]
 810af10:	683b      	ldr	r3, [r7, #0]
 810af12:	699b      	ldr	r3, [r3, #24]
 810af14:	021b      	lsls	r3, r3, #8
 810af16:	4313      	orrs	r3, r2
 810af18:	693a      	ldr	r2, [r7, #16]
 810af1a:	4313      	orrs	r3, r2
 810af1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810af1e:	693b      	ldr	r3, [r7, #16]
 810af20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 810af24:	f023 030c 	bic.w	r3, r3, #12
 810af28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810af2a:	693b      	ldr	r3, [r7, #16]
 810af2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810af30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810af34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810af36:	683b      	ldr	r3, [r7, #0]
 810af38:	68da      	ldr	r2, [r3, #12]
 810af3a:	683b      	ldr	r3, [r7, #0]
 810af3c:	69db      	ldr	r3, [r3, #28]
 810af3e:	021b      	lsls	r3, r3, #8
 810af40:	4313      	orrs	r3, r2
 810af42:	693a      	ldr	r2, [r7, #16]
 810af44:	4313      	orrs	r3, r2
 810af46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 810af48:	683b      	ldr	r3, [r7, #0]
 810af4a:	691b      	ldr	r3, [r3, #16]
 810af4c:	011a      	lsls	r2, r3, #4
 810af4e:	683b      	ldr	r3, [r7, #0]
 810af50:	6a1b      	ldr	r3, [r3, #32]
 810af52:	031b      	lsls	r3, r3, #12
 810af54:	4313      	orrs	r3, r2
 810af56:	693a      	ldr	r2, [r7, #16]
 810af58:	4313      	orrs	r3, r2
 810af5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 810af5c:	68fb      	ldr	r3, [r7, #12]
 810af5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 810af62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 810af64:	68fb      	ldr	r3, [r7, #12]
 810af66:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 810af6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 810af6c:	683b      	ldr	r3, [r7, #0]
 810af6e:	685a      	ldr	r2, [r3, #4]
 810af70:	683b      	ldr	r3, [r7, #0]
 810af72:	695b      	ldr	r3, [r3, #20]
 810af74:	011b      	lsls	r3, r3, #4
 810af76:	4313      	orrs	r3, r2
 810af78:	68fa      	ldr	r2, [r7, #12]
 810af7a:	4313      	orrs	r3, r2
 810af7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810af7e:	687b      	ldr	r3, [r7, #4]
 810af80:	681b      	ldr	r3, [r3, #0]
 810af82:	697a      	ldr	r2, [r7, #20]
 810af84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810af86:	687b      	ldr	r3, [r7, #4]
 810af88:	681b      	ldr	r3, [r3, #0]
 810af8a:	693a      	ldr	r2, [r7, #16]
 810af8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 810af8e:	687b      	ldr	r3, [r7, #4]
 810af90:	681b      	ldr	r3, [r3, #0]
 810af92:	68fa      	ldr	r2, [r7, #12]
 810af94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810af96:	687b      	ldr	r3, [r7, #4]
 810af98:	2201      	movs	r2, #1
 810af9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810af9e:	687b      	ldr	r3, [r7, #4]
 810afa0:	2201      	movs	r2, #1
 810afa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810afa6:	687b      	ldr	r3, [r7, #4]
 810afa8:	2201      	movs	r2, #1
 810afaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810afae:	687b      	ldr	r3, [r7, #4]
 810afb0:	2201      	movs	r2, #1
 810afb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810afb6:	687b      	ldr	r3, [r7, #4]
 810afb8:	2201      	movs	r2, #1
 810afba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810afbe:	687b      	ldr	r3, [r7, #4]
 810afc0:	2201      	movs	r2, #1
 810afc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810afc6:	2300      	movs	r3, #0
}
 810afc8:	4618      	mov	r0, r3
 810afca:	3718      	adds	r7, #24
 810afcc:	46bd      	mov	sp, r7
 810afce:	bd80      	pop	{r7, pc}

0810afd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810afd0:	b580      	push	{r7, lr}
 810afd2:	b084      	sub	sp, #16
 810afd4:	af00      	add	r7, sp, #0
 810afd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810afd8:	687b      	ldr	r3, [r7, #4]
 810afda:	681b      	ldr	r3, [r3, #0]
 810afdc:	68db      	ldr	r3, [r3, #12]
 810afde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810afe0:	687b      	ldr	r3, [r7, #4]
 810afe2:	681b      	ldr	r3, [r3, #0]
 810afe4:	691b      	ldr	r3, [r3, #16]
 810afe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810afe8:	68bb      	ldr	r3, [r7, #8]
 810afea:	f003 0302 	and.w	r3, r3, #2
 810afee:	2b00      	cmp	r3, #0
 810aff0:	d020      	beq.n	810b034 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810aff2:	68fb      	ldr	r3, [r7, #12]
 810aff4:	f003 0302 	and.w	r3, r3, #2
 810aff8:	2b00      	cmp	r3, #0
 810affa:	d01b      	beq.n	810b034 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810affc:	687b      	ldr	r3, [r7, #4]
 810affe:	681b      	ldr	r3, [r3, #0]
 810b000:	f06f 0202 	mvn.w	r2, #2
 810b004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810b006:	687b      	ldr	r3, [r7, #4]
 810b008:	2201      	movs	r2, #1
 810b00a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810b00c:	687b      	ldr	r3, [r7, #4]
 810b00e:	681b      	ldr	r3, [r3, #0]
 810b010:	699b      	ldr	r3, [r3, #24]
 810b012:	f003 0303 	and.w	r3, r3, #3
 810b016:	2b00      	cmp	r3, #0
 810b018:	d003      	beq.n	810b022 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810b01a:	6878      	ldr	r0, [r7, #4]
 810b01c:	f000 faf6 	bl	810b60c <HAL_TIM_IC_CaptureCallback>
 810b020:	e005      	b.n	810b02e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810b022:	6878      	ldr	r0, [r7, #4]
 810b024:	f000 fae8 	bl	810b5f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b028:	6878      	ldr	r0, [r7, #4]
 810b02a:	f000 faf9 	bl	810b620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b02e:	687b      	ldr	r3, [r7, #4]
 810b030:	2200      	movs	r2, #0
 810b032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810b034:	68bb      	ldr	r3, [r7, #8]
 810b036:	f003 0304 	and.w	r3, r3, #4
 810b03a:	2b00      	cmp	r3, #0
 810b03c:	d020      	beq.n	810b080 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810b03e:	68fb      	ldr	r3, [r7, #12]
 810b040:	f003 0304 	and.w	r3, r3, #4
 810b044:	2b00      	cmp	r3, #0
 810b046:	d01b      	beq.n	810b080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810b048:	687b      	ldr	r3, [r7, #4]
 810b04a:	681b      	ldr	r3, [r3, #0]
 810b04c:	f06f 0204 	mvn.w	r2, #4
 810b050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810b052:	687b      	ldr	r3, [r7, #4]
 810b054:	2202      	movs	r2, #2
 810b056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810b058:	687b      	ldr	r3, [r7, #4]
 810b05a:	681b      	ldr	r3, [r3, #0]
 810b05c:	699b      	ldr	r3, [r3, #24]
 810b05e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810b062:	2b00      	cmp	r3, #0
 810b064:	d003      	beq.n	810b06e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b066:	6878      	ldr	r0, [r7, #4]
 810b068:	f000 fad0 	bl	810b60c <HAL_TIM_IC_CaptureCallback>
 810b06c:	e005      	b.n	810b07a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b06e:	6878      	ldr	r0, [r7, #4]
 810b070:	f000 fac2 	bl	810b5f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b074:	6878      	ldr	r0, [r7, #4]
 810b076:	f000 fad3 	bl	810b620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b07a:	687b      	ldr	r3, [r7, #4]
 810b07c:	2200      	movs	r2, #0
 810b07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810b080:	68bb      	ldr	r3, [r7, #8]
 810b082:	f003 0308 	and.w	r3, r3, #8
 810b086:	2b00      	cmp	r3, #0
 810b088:	d020      	beq.n	810b0cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810b08a:	68fb      	ldr	r3, [r7, #12]
 810b08c:	f003 0308 	and.w	r3, r3, #8
 810b090:	2b00      	cmp	r3, #0
 810b092:	d01b      	beq.n	810b0cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810b094:	687b      	ldr	r3, [r7, #4]
 810b096:	681b      	ldr	r3, [r3, #0]
 810b098:	f06f 0208 	mvn.w	r2, #8
 810b09c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810b09e:	687b      	ldr	r3, [r7, #4]
 810b0a0:	2204      	movs	r2, #4
 810b0a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810b0a4:	687b      	ldr	r3, [r7, #4]
 810b0a6:	681b      	ldr	r3, [r3, #0]
 810b0a8:	69db      	ldr	r3, [r3, #28]
 810b0aa:	f003 0303 	and.w	r3, r3, #3
 810b0ae:	2b00      	cmp	r3, #0
 810b0b0:	d003      	beq.n	810b0ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b0b2:	6878      	ldr	r0, [r7, #4]
 810b0b4:	f000 faaa 	bl	810b60c <HAL_TIM_IC_CaptureCallback>
 810b0b8:	e005      	b.n	810b0c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b0ba:	6878      	ldr	r0, [r7, #4]
 810b0bc:	f000 fa9c 	bl	810b5f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b0c0:	6878      	ldr	r0, [r7, #4]
 810b0c2:	f000 faad 	bl	810b620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b0c6:	687b      	ldr	r3, [r7, #4]
 810b0c8:	2200      	movs	r2, #0
 810b0ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810b0cc:	68bb      	ldr	r3, [r7, #8]
 810b0ce:	f003 0310 	and.w	r3, r3, #16
 810b0d2:	2b00      	cmp	r3, #0
 810b0d4:	d020      	beq.n	810b118 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810b0d6:	68fb      	ldr	r3, [r7, #12]
 810b0d8:	f003 0310 	and.w	r3, r3, #16
 810b0dc:	2b00      	cmp	r3, #0
 810b0de:	d01b      	beq.n	810b118 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810b0e0:	687b      	ldr	r3, [r7, #4]
 810b0e2:	681b      	ldr	r3, [r3, #0]
 810b0e4:	f06f 0210 	mvn.w	r2, #16
 810b0e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810b0ea:	687b      	ldr	r3, [r7, #4]
 810b0ec:	2208      	movs	r2, #8
 810b0ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810b0f0:	687b      	ldr	r3, [r7, #4]
 810b0f2:	681b      	ldr	r3, [r3, #0]
 810b0f4:	69db      	ldr	r3, [r3, #28]
 810b0f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810b0fa:	2b00      	cmp	r3, #0
 810b0fc:	d003      	beq.n	810b106 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b0fe:	6878      	ldr	r0, [r7, #4]
 810b100:	f000 fa84 	bl	810b60c <HAL_TIM_IC_CaptureCallback>
 810b104:	e005      	b.n	810b112 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b106:	6878      	ldr	r0, [r7, #4]
 810b108:	f000 fa76 	bl	810b5f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b10c:	6878      	ldr	r0, [r7, #4]
 810b10e:	f000 fa87 	bl	810b620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b112:	687b      	ldr	r3, [r7, #4]
 810b114:	2200      	movs	r2, #0
 810b116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810b118:	68bb      	ldr	r3, [r7, #8]
 810b11a:	f003 0301 	and.w	r3, r3, #1
 810b11e:	2b00      	cmp	r3, #0
 810b120:	d00c      	beq.n	810b13c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810b122:	68fb      	ldr	r3, [r7, #12]
 810b124:	f003 0301 	and.w	r3, r3, #1
 810b128:	2b00      	cmp	r3, #0
 810b12a:	d007      	beq.n	810b13c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810b12c:	687b      	ldr	r3, [r7, #4]
 810b12e:	681b      	ldr	r3, [r3, #0]
 810b130:	f06f 0201 	mvn.w	r2, #1
 810b134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810b136:	6878      	ldr	r0, [r7, #4]
 810b138:	f7f8 fafe 	bl	8103738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810b13c:	68bb      	ldr	r3, [r7, #8]
 810b13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b142:	2b00      	cmp	r3, #0
 810b144:	d104      	bne.n	810b150 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810b146:	68bb      	ldr	r3, [r7, #8]
 810b148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810b14c:	2b00      	cmp	r3, #0
 810b14e:	d00c      	beq.n	810b16a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810b150:	68fb      	ldr	r3, [r7, #12]
 810b152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b156:	2b00      	cmp	r3, #0
 810b158:	d007      	beq.n	810b16a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810b15a:	687b      	ldr	r3, [r7, #4]
 810b15c:	681b      	ldr	r3, [r3, #0]
 810b15e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810b162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810b164:	6878      	ldr	r0, [r7, #4]
 810b166:	f000 ffc3 	bl	810c0f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810b16a:	68bb      	ldr	r3, [r7, #8]
 810b16c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b170:	2b00      	cmp	r3, #0
 810b172:	d00c      	beq.n	810b18e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810b174:	68fb      	ldr	r3, [r7, #12]
 810b176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b17a:	2b00      	cmp	r3, #0
 810b17c:	d007      	beq.n	810b18e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810b17e:	687b      	ldr	r3, [r7, #4]
 810b180:	681b      	ldr	r3, [r3, #0]
 810b182:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810b186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810b188:	6878      	ldr	r0, [r7, #4]
 810b18a:	f000 ffbb 	bl	810c104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810b18e:	68bb      	ldr	r3, [r7, #8]
 810b190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b194:	2b00      	cmp	r3, #0
 810b196:	d00c      	beq.n	810b1b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810b198:	68fb      	ldr	r3, [r7, #12]
 810b19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b19e:	2b00      	cmp	r3, #0
 810b1a0:	d007      	beq.n	810b1b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810b1a2:	687b      	ldr	r3, [r7, #4]
 810b1a4:	681b      	ldr	r3, [r3, #0]
 810b1a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810b1aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810b1ac:	6878      	ldr	r0, [r7, #4]
 810b1ae:	f000 fa41 	bl	810b634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810b1b2:	68bb      	ldr	r3, [r7, #8]
 810b1b4:	f003 0320 	and.w	r3, r3, #32
 810b1b8:	2b00      	cmp	r3, #0
 810b1ba:	d00c      	beq.n	810b1d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810b1bc:	68fb      	ldr	r3, [r7, #12]
 810b1be:	f003 0320 	and.w	r3, r3, #32
 810b1c2:	2b00      	cmp	r3, #0
 810b1c4:	d007      	beq.n	810b1d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810b1c6:	687b      	ldr	r3, [r7, #4]
 810b1c8:	681b      	ldr	r3, [r3, #0]
 810b1ca:	f06f 0220 	mvn.w	r2, #32
 810b1ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810b1d0:	6878      	ldr	r0, [r7, #4]
 810b1d2:	f000 ff83 	bl	810c0dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810b1d6:	bf00      	nop
 810b1d8:	3710      	adds	r7, #16
 810b1da:	46bd      	mov	sp, r7
 810b1dc:	bd80      	pop	{r7, pc}
	...

0810b1e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810b1e0:	b580      	push	{r7, lr}
 810b1e2:	b086      	sub	sp, #24
 810b1e4:	af00      	add	r7, sp, #0
 810b1e6:	60f8      	str	r0, [r7, #12]
 810b1e8:	60b9      	str	r1, [r7, #8]
 810b1ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810b1ec:	2300      	movs	r3, #0
 810b1ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810b1f0:	68fb      	ldr	r3, [r7, #12]
 810b1f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b1f6:	2b01      	cmp	r3, #1
 810b1f8:	d101      	bne.n	810b1fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 810b1fa:	2302      	movs	r3, #2
 810b1fc:	e0ff      	b.n	810b3fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 810b1fe:	68fb      	ldr	r3, [r7, #12]
 810b200:	2201      	movs	r2, #1
 810b202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	2b14      	cmp	r3, #20
 810b20a:	f200 80f0 	bhi.w	810b3ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 810b20e:	a201      	add	r2, pc, #4	@ (adr r2, 810b214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810b210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b214:	0810b269 	.word	0x0810b269
 810b218:	0810b3ef 	.word	0x0810b3ef
 810b21c:	0810b3ef 	.word	0x0810b3ef
 810b220:	0810b3ef 	.word	0x0810b3ef
 810b224:	0810b2a9 	.word	0x0810b2a9
 810b228:	0810b3ef 	.word	0x0810b3ef
 810b22c:	0810b3ef 	.word	0x0810b3ef
 810b230:	0810b3ef 	.word	0x0810b3ef
 810b234:	0810b2eb 	.word	0x0810b2eb
 810b238:	0810b3ef 	.word	0x0810b3ef
 810b23c:	0810b3ef 	.word	0x0810b3ef
 810b240:	0810b3ef 	.word	0x0810b3ef
 810b244:	0810b32b 	.word	0x0810b32b
 810b248:	0810b3ef 	.word	0x0810b3ef
 810b24c:	0810b3ef 	.word	0x0810b3ef
 810b250:	0810b3ef 	.word	0x0810b3ef
 810b254:	0810b36d 	.word	0x0810b36d
 810b258:	0810b3ef 	.word	0x0810b3ef
 810b25c:	0810b3ef 	.word	0x0810b3ef
 810b260:	0810b3ef 	.word	0x0810b3ef
 810b264:	0810b3ad 	.word	0x0810b3ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810b268:	68fb      	ldr	r3, [r7, #12]
 810b26a:	681b      	ldr	r3, [r3, #0]
 810b26c:	68b9      	ldr	r1, [r7, #8]
 810b26e:	4618      	mov	r0, r3
 810b270:	f000 fa90 	bl	810b794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810b274:	68fb      	ldr	r3, [r7, #12]
 810b276:	681b      	ldr	r3, [r3, #0]
 810b278:	699a      	ldr	r2, [r3, #24]
 810b27a:	68fb      	ldr	r3, [r7, #12]
 810b27c:	681b      	ldr	r3, [r3, #0]
 810b27e:	f042 0208 	orr.w	r2, r2, #8
 810b282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810b284:	68fb      	ldr	r3, [r7, #12]
 810b286:	681b      	ldr	r3, [r3, #0]
 810b288:	699a      	ldr	r2, [r3, #24]
 810b28a:	68fb      	ldr	r3, [r7, #12]
 810b28c:	681b      	ldr	r3, [r3, #0]
 810b28e:	f022 0204 	bic.w	r2, r2, #4
 810b292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810b294:	68fb      	ldr	r3, [r7, #12]
 810b296:	681b      	ldr	r3, [r3, #0]
 810b298:	6999      	ldr	r1, [r3, #24]
 810b29a:	68bb      	ldr	r3, [r7, #8]
 810b29c:	691a      	ldr	r2, [r3, #16]
 810b29e:	68fb      	ldr	r3, [r7, #12]
 810b2a0:	681b      	ldr	r3, [r3, #0]
 810b2a2:	430a      	orrs	r2, r1
 810b2a4:	619a      	str	r2, [r3, #24]
      break;
 810b2a6:	e0a5      	b.n	810b3f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810b2a8:	68fb      	ldr	r3, [r7, #12]
 810b2aa:	681b      	ldr	r3, [r3, #0]
 810b2ac:	68b9      	ldr	r1, [r7, #8]
 810b2ae:	4618      	mov	r0, r3
 810b2b0:	f000 fb00 	bl	810b8b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810b2b4:	68fb      	ldr	r3, [r7, #12]
 810b2b6:	681b      	ldr	r3, [r3, #0]
 810b2b8:	699a      	ldr	r2, [r3, #24]
 810b2ba:	68fb      	ldr	r3, [r7, #12]
 810b2bc:	681b      	ldr	r3, [r3, #0]
 810b2be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b2c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810b2c4:	68fb      	ldr	r3, [r7, #12]
 810b2c6:	681b      	ldr	r3, [r3, #0]
 810b2c8:	699a      	ldr	r2, [r3, #24]
 810b2ca:	68fb      	ldr	r3, [r7, #12]
 810b2cc:	681b      	ldr	r3, [r3, #0]
 810b2ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b2d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810b2d4:	68fb      	ldr	r3, [r7, #12]
 810b2d6:	681b      	ldr	r3, [r3, #0]
 810b2d8:	6999      	ldr	r1, [r3, #24]
 810b2da:	68bb      	ldr	r3, [r7, #8]
 810b2dc:	691b      	ldr	r3, [r3, #16]
 810b2de:	021a      	lsls	r2, r3, #8
 810b2e0:	68fb      	ldr	r3, [r7, #12]
 810b2e2:	681b      	ldr	r3, [r3, #0]
 810b2e4:	430a      	orrs	r2, r1
 810b2e6:	619a      	str	r2, [r3, #24]
      break;
 810b2e8:	e084      	b.n	810b3f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810b2ea:	68fb      	ldr	r3, [r7, #12]
 810b2ec:	681b      	ldr	r3, [r3, #0]
 810b2ee:	68b9      	ldr	r1, [r7, #8]
 810b2f0:	4618      	mov	r0, r3
 810b2f2:	f000 fb69 	bl	810b9c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810b2f6:	68fb      	ldr	r3, [r7, #12]
 810b2f8:	681b      	ldr	r3, [r3, #0]
 810b2fa:	69da      	ldr	r2, [r3, #28]
 810b2fc:	68fb      	ldr	r3, [r7, #12]
 810b2fe:	681b      	ldr	r3, [r3, #0]
 810b300:	f042 0208 	orr.w	r2, r2, #8
 810b304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810b306:	68fb      	ldr	r3, [r7, #12]
 810b308:	681b      	ldr	r3, [r3, #0]
 810b30a:	69da      	ldr	r2, [r3, #28]
 810b30c:	68fb      	ldr	r3, [r7, #12]
 810b30e:	681b      	ldr	r3, [r3, #0]
 810b310:	f022 0204 	bic.w	r2, r2, #4
 810b314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810b316:	68fb      	ldr	r3, [r7, #12]
 810b318:	681b      	ldr	r3, [r3, #0]
 810b31a:	69d9      	ldr	r1, [r3, #28]
 810b31c:	68bb      	ldr	r3, [r7, #8]
 810b31e:	691a      	ldr	r2, [r3, #16]
 810b320:	68fb      	ldr	r3, [r7, #12]
 810b322:	681b      	ldr	r3, [r3, #0]
 810b324:	430a      	orrs	r2, r1
 810b326:	61da      	str	r2, [r3, #28]
      break;
 810b328:	e064      	b.n	810b3f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810b32a:	68fb      	ldr	r3, [r7, #12]
 810b32c:	681b      	ldr	r3, [r3, #0]
 810b32e:	68b9      	ldr	r1, [r7, #8]
 810b330:	4618      	mov	r0, r3
 810b332:	f000 fbd1 	bl	810bad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810b336:	68fb      	ldr	r3, [r7, #12]
 810b338:	681b      	ldr	r3, [r3, #0]
 810b33a:	69da      	ldr	r2, [r3, #28]
 810b33c:	68fb      	ldr	r3, [r7, #12]
 810b33e:	681b      	ldr	r3, [r3, #0]
 810b340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810b346:	68fb      	ldr	r3, [r7, #12]
 810b348:	681b      	ldr	r3, [r3, #0]
 810b34a:	69da      	ldr	r2, [r3, #28]
 810b34c:	68fb      	ldr	r3, [r7, #12]
 810b34e:	681b      	ldr	r3, [r3, #0]
 810b350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810b356:	68fb      	ldr	r3, [r7, #12]
 810b358:	681b      	ldr	r3, [r3, #0]
 810b35a:	69d9      	ldr	r1, [r3, #28]
 810b35c:	68bb      	ldr	r3, [r7, #8]
 810b35e:	691b      	ldr	r3, [r3, #16]
 810b360:	021a      	lsls	r2, r3, #8
 810b362:	68fb      	ldr	r3, [r7, #12]
 810b364:	681b      	ldr	r3, [r3, #0]
 810b366:	430a      	orrs	r2, r1
 810b368:	61da      	str	r2, [r3, #28]
      break;
 810b36a:	e043      	b.n	810b3f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810b36c:	68fb      	ldr	r3, [r7, #12]
 810b36e:	681b      	ldr	r3, [r3, #0]
 810b370:	68b9      	ldr	r1, [r7, #8]
 810b372:	4618      	mov	r0, r3
 810b374:	f000 fc1a 	bl	810bbac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810b378:	68fb      	ldr	r3, [r7, #12]
 810b37a:	681b      	ldr	r3, [r3, #0]
 810b37c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b37e:	68fb      	ldr	r3, [r7, #12]
 810b380:	681b      	ldr	r3, [r3, #0]
 810b382:	f042 0208 	orr.w	r2, r2, #8
 810b386:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810b388:	68fb      	ldr	r3, [r7, #12]
 810b38a:	681b      	ldr	r3, [r3, #0]
 810b38c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b38e:	68fb      	ldr	r3, [r7, #12]
 810b390:	681b      	ldr	r3, [r3, #0]
 810b392:	f022 0204 	bic.w	r2, r2, #4
 810b396:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810b398:	68fb      	ldr	r3, [r7, #12]
 810b39a:	681b      	ldr	r3, [r3, #0]
 810b39c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810b39e:	68bb      	ldr	r3, [r7, #8]
 810b3a0:	691a      	ldr	r2, [r3, #16]
 810b3a2:	68fb      	ldr	r3, [r7, #12]
 810b3a4:	681b      	ldr	r3, [r3, #0]
 810b3a6:	430a      	orrs	r2, r1
 810b3a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810b3aa:	e023      	b.n	810b3f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810b3ac:	68fb      	ldr	r3, [r7, #12]
 810b3ae:	681b      	ldr	r3, [r3, #0]
 810b3b0:	68b9      	ldr	r1, [r7, #8]
 810b3b2:	4618      	mov	r0, r3
 810b3b4:	f000 fc5e 	bl	810bc74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810b3b8:	68fb      	ldr	r3, [r7, #12]
 810b3ba:	681b      	ldr	r3, [r3, #0]
 810b3bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b3be:	68fb      	ldr	r3, [r7, #12]
 810b3c0:	681b      	ldr	r3, [r3, #0]
 810b3c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b3c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810b3c8:	68fb      	ldr	r3, [r7, #12]
 810b3ca:	681b      	ldr	r3, [r3, #0]
 810b3cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b3ce:	68fb      	ldr	r3, [r7, #12]
 810b3d0:	681b      	ldr	r3, [r3, #0]
 810b3d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b3d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810b3d8:	68fb      	ldr	r3, [r7, #12]
 810b3da:	681b      	ldr	r3, [r3, #0]
 810b3dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810b3de:	68bb      	ldr	r3, [r7, #8]
 810b3e0:	691b      	ldr	r3, [r3, #16]
 810b3e2:	021a      	lsls	r2, r3, #8
 810b3e4:	68fb      	ldr	r3, [r7, #12]
 810b3e6:	681b      	ldr	r3, [r3, #0]
 810b3e8:	430a      	orrs	r2, r1
 810b3ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810b3ec:	e002      	b.n	810b3f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810b3ee:	2301      	movs	r3, #1
 810b3f0:	75fb      	strb	r3, [r7, #23]
      break;
 810b3f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810b3f4:	68fb      	ldr	r3, [r7, #12]
 810b3f6:	2200      	movs	r2, #0
 810b3f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810b3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 810b3fe:	4618      	mov	r0, r3
 810b400:	3718      	adds	r7, #24
 810b402:	46bd      	mov	sp, r7
 810b404:	bd80      	pop	{r7, pc}
 810b406:	bf00      	nop

0810b408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810b408:	b580      	push	{r7, lr}
 810b40a:	b084      	sub	sp, #16
 810b40c:	af00      	add	r7, sp, #0
 810b40e:	6078      	str	r0, [r7, #4]
 810b410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810b412:	2300      	movs	r3, #0
 810b414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810b416:	687b      	ldr	r3, [r7, #4]
 810b418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b41c:	2b01      	cmp	r3, #1
 810b41e:	d101      	bne.n	810b424 <HAL_TIM_ConfigClockSource+0x1c>
 810b420:	2302      	movs	r3, #2
 810b422:	e0de      	b.n	810b5e2 <HAL_TIM_ConfigClockSource+0x1da>
 810b424:	687b      	ldr	r3, [r7, #4]
 810b426:	2201      	movs	r2, #1
 810b428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810b42c:	687b      	ldr	r3, [r7, #4]
 810b42e:	2202      	movs	r2, #2
 810b430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810b434:	687b      	ldr	r3, [r7, #4]
 810b436:	681b      	ldr	r3, [r3, #0]
 810b438:	689b      	ldr	r3, [r3, #8]
 810b43a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810b43c:	68bb      	ldr	r3, [r7, #8]
 810b43e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810b442:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810b446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810b448:	68bb      	ldr	r3, [r7, #8]
 810b44a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810b44e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810b450:	687b      	ldr	r3, [r7, #4]
 810b452:	681b      	ldr	r3, [r3, #0]
 810b454:	68ba      	ldr	r2, [r7, #8]
 810b456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810b458:	683b      	ldr	r3, [r7, #0]
 810b45a:	681b      	ldr	r3, [r3, #0]
 810b45c:	4a63      	ldr	r2, [pc, #396]	@ (810b5ec <HAL_TIM_ConfigClockSource+0x1e4>)
 810b45e:	4293      	cmp	r3, r2
 810b460:	f000 80a9 	beq.w	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b464:	4a61      	ldr	r2, [pc, #388]	@ (810b5ec <HAL_TIM_ConfigClockSource+0x1e4>)
 810b466:	4293      	cmp	r3, r2
 810b468:	f200 80ae 	bhi.w	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b46c:	4a60      	ldr	r2, [pc, #384]	@ (810b5f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 810b46e:	4293      	cmp	r3, r2
 810b470:	f000 80a1 	beq.w	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b474:	4a5e      	ldr	r2, [pc, #376]	@ (810b5f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 810b476:	4293      	cmp	r3, r2
 810b478:	f200 80a6 	bhi.w	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b47c:	4a5d      	ldr	r2, [pc, #372]	@ (810b5f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 810b47e:	4293      	cmp	r3, r2
 810b480:	f000 8099 	beq.w	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b484:	4a5b      	ldr	r2, [pc, #364]	@ (810b5f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 810b486:	4293      	cmp	r3, r2
 810b488:	f200 809e 	bhi.w	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b48c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810b490:	f000 8091 	beq.w	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b494:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810b498:	f200 8096 	bhi.w	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b49c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b4a0:	f000 8089 	beq.w	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b4a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b4a8:	f200 808e 	bhi.w	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b4b0:	d03e      	beq.n	810b530 <HAL_TIM_ConfigClockSource+0x128>
 810b4b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b4b6:	f200 8087 	bhi.w	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b4be:	f000 8086 	beq.w	810b5ce <HAL_TIM_ConfigClockSource+0x1c6>
 810b4c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b4c6:	d87f      	bhi.n	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4c8:	2b70      	cmp	r3, #112	@ 0x70
 810b4ca:	d01a      	beq.n	810b502 <HAL_TIM_ConfigClockSource+0xfa>
 810b4cc:	2b70      	cmp	r3, #112	@ 0x70
 810b4ce:	d87b      	bhi.n	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4d0:	2b60      	cmp	r3, #96	@ 0x60
 810b4d2:	d050      	beq.n	810b576 <HAL_TIM_ConfigClockSource+0x16e>
 810b4d4:	2b60      	cmp	r3, #96	@ 0x60
 810b4d6:	d877      	bhi.n	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4d8:	2b50      	cmp	r3, #80	@ 0x50
 810b4da:	d03c      	beq.n	810b556 <HAL_TIM_ConfigClockSource+0x14e>
 810b4dc:	2b50      	cmp	r3, #80	@ 0x50
 810b4de:	d873      	bhi.n	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4e0:	2b40      	cmp	r3, #64	@ 0x40
 810b4e2:	d058      	beq.n	810b596 <HAL_TIM_ConfigClockSource+0x18e>
 810b4e4:	2b40      	cmp	r3, #64	@ 0x40
 810b4e6:	d86f      	bhi.n	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4e8:	2b30      	cmp	r3, #48	@ 0x30
 810b4ea:	d064      	beq.n	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b4ec:	2b30      	cmp	r3, #48	@ 0x30
 810b4ee:	d86b      	bhi.n	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4f0:	2b20      	cmp	r3, #32
 810b4f2:	d060      	beq.n	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b4f4:	2b20      	cmp	r3, #32
 810b4f6:	d867      	bhi.n	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 810b4f8:	2b00      	cmp	r3, #0
 810b4fa:	d05c      	beq.n	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b4fc:	2b10      	cmp	r3, #16
 810b4fe:	d05a      	beq.n	810b5b6 <HAL_TIM_ConfigClockSource+0x1ae>
 810b500:	e062      	b.n	810b5c8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810b502:	687b      	ldr	r3, [r7, #4]
 810b504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810b506:	683b      	ldr	r3, [r7, #0]
 810b508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810b50a:	683b      	ldr	r3, [r7, #0]
 810b50c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810b50e:	683b      	ldr	r3, [r7, #0]
 810b510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810b512:	f000 fc91 	bl	810be38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810b516:	687b      	ldr	r3, [r7, #4]
 810b518:	681b      	ldr	r3, [r3, #0]
 810b51a:	689b      	ldr	r3, [r3, #8]
 810b51c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810b51e:	68bb      	ldr	r3, [r7, #8]
 810b520:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810b524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810b526:	687b      	ldr	r3, [r7, #4]
 810b528:	681b      	ldr	r3, [r3, #0]
 810b52a:	68ba      	ldr	r2, [r7, #8]
 810b52c:	609a      	str	r2, [r3, #8]
      break;
 810b52e:	e04f      	b.n	810b5d0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810b530:	687b      	ldr	r3, [r7, #4]
 810b532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810b534:	683b      	ldr	r3, [r7, #0]
 810b536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810b538:	683b      	ldr	r3, [r7, #0]
 810b53a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810b53c:	683b      	ldr	r3, [r7, #0]
 810b53e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810b540:	f000 fc7a 	bl	810be38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810b544:	687b      	ldr	r3, [r7, #4]
 810b546:	681b      	ldr	r3, [r3, #0]
 810b548:	689a      	ldr	r2, [r3, #8]
 810b54a:	687b      	ldr	r3, [r7, #4]
 810b54c:	681b      	ldr	r3, [r3, #0]
 810b54e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810b552:	609a      	str	r2, [r3, #8]
      break;
 810b554:	e03c      	b.n	810b5d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810b556:	687b      	ldr	r3, [r7, #4]
 810b558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b55a:	683b      	ldr	r3, [r7, #0]
 810b55c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b55e:	683b      	ldr	r3, [r7, #0]
 810b560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b562:	461a      	mov	r2, r3
 810b564:	f000 fbec 	bl	810bd40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810b568:	687b      	ldr	r3, [r7, #4]
 810b56a:	681b      	ldr	r3, [r3, #0]
 810b56c:	2150      	movs	r1, #80	@ 0x50
 810b56e:	4618      	mov	r0, r3
 810b570:	f000 fc45 	bl	810bdfe <TIM_ITRx_SetConfig>
      break;
 810b574:	e02c      	b.n	810b5d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810b576:	687b      	ldr	r3, [r7, #4]
 810b578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b57a:	683b      	ldr	r3, [r7, #0]
 810b57c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b57e:	683b      	ldr	r3, [r7, #0]
 810b580:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810b582:	461a      	mov	r2, r3
 810b584:	f000 fc0b 	bl	810bd9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810b588:	687b      	ldr	r3, [r7, #4]
 810b58a:	681b      	ldr	r3, [r3, #0]
 810b58c:	2160      	movs	r1, #96	@ 0x60
 810b58e:	4618      	mov	r0, r3
 810b590:	f000 fc35 	bl	810bdfe <TIM_ITRx_SetConfig>
      break;
 810b594:	e01c      	b.n	810b5d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810b596:	687b      	ldr	r3, [r7, #4]
 810b598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b59a:	683b      	ldr	r3, [r7, #0]
 810b59c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b59e:	683b      	ldr	r3, [r7, #0]
 810b5a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b5a2:	461a      	mov	r2, r3
 810b5a4:	f000 fbcc 	bl	810bd40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810b5a8:	687b      	ldr	r3, [r7, #4]
 810b5aa:	681b      	ldr	r3, [r3, #0]
 810b5ac:	2140      	movs	r1, #64	@ 0x40
 810b5ae:	4618      	mov	r0, r3
 810b5b0:	f000 fc25 	bl	810bdfe <TIM_ITRx_SetConfig>
      break;
 810b5b4:	e00c      	b.n	810b5d0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810b5b6:	687b      	ldr	r3, [r7, #4]
 810b5b8:	681a      	ldr	r2, [r3, #0]
 810b5ba:	683b      	ldr	r3, [r7, #0]
 810b5bc:	681b      	ldr	r3, [r3, #0]
 810b5be:	4619      	mov	r1, r3
 810b5c0:	4610      	mov	r0, r2
 810b5c2:	f000 fc1c 	bl	810bdfe <TIM_ITRx_SetConfig>
      break;
 810b5c6:	e003      	b.n	810b5d0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810b5c8:	2301      	movs	r3, #1
 810b5ca:	73fb      	strb	r3, [r7, #15]
      break;
 810b5cc:	e000      	b.n	810b5d0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810b5ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810b5d0:	687b      	ldr	r3, [r7, #4]
 810b5d2:	2201      	movs	r2, #1
 810b5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810b5d8:	687b      	ldr	r3, [r7, #4]
 810b5da:	2200      	movs	r2, #0
 810b5dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 810b5e2:	4618      	mov	r0, r3
 810b5e4:	3710      	adds	r7, #16
 810b5e6:	46bd      	mov	sp, r7
 810b5e8:	bd80      	pop	{r7, pc}
 810b5ea:	bf00      	nop
 810b5ec:	00100040 	.word	0x00100040
 810b5f0:	00100030 	.word	0x00100030
 810b5f4:	00100020 	.word	0x00100020

0810b5f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810b5f8:	b480      	push	{r7}
 810b5fa:	b083      	sub	sp, #12
 810b5fc:	af00      	add	r7, sp, #0
 810b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810b600:	bf00      	nop
 810b602:	370c      	adds	r7, #12
 810b604:	46bd      	mov	sp, r7
 810b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b60a:	4770      	bx	lr

0810b60c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810b60c:	b480      	push	{r7}
 810b60e:	b083      	sub	sp, #12
 810b610:	af00      	add	r7, sp, #0
 810b612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810b614:	bf00      	nop
 810b616:	370c      	adds	r7, #12
 810b618:	46bd      	mov	sp, r7
 810b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b61e:	4770      	bx	lr

0810b620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810b620:	b480      	push	{r7}
 810b622:	b083      	sub	sp, #12
 810b624:	af00      	add	r7, sp, #0
 810b626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810b628:	bf00      	nop
 810b62a:	370c      	adds	r7, #12
 810b62c:	46bd      	mov	sp, r7
 810b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b632:	4770      	bx	lr

0810b634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810b634:	b480      	push	{r7}
 810b636:	b083      	sub	sp, #12
 810b638:	af00      	add	r7, sp, #0
 810b63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810b63c:	bf00      	nop
 810b63e:	370c      	adds	r7, #12
 810b640:	46bd      	mov	sp, r7
 810b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b646:	4770      	bx	lr

0810b648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810b648:	b480      	push	{r7}
 810b64a:	b085      	sub	sp, #20
 810b64c:	af00      	add	r7, sp, #0
 810b64e:	6078      	str	r0, [r7, #4]
 810b650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810b652:	687b      	ldr	r3, [r7, #4]
 810b654:	681b      	ldr	r3, [r3, #0]
 810b656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810b658:	687b      	ldr	r3, [r7, #4]
 810b65a:	4a46      	ldr	r2, [pc, #280]	@ (810b774 <TIM_Base_SetConfig+0x12c>)
 810b65c:	4293      	cmp	r3, r2
 810b65e:	d013      	beq.n	810b688 <TIM_Base_SetConfig+0x40>
 810b660:	687b      	ldr	r3, [r7, #4]
 810b662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b666:	d00f      	beq.n	810b688 <TIM_Base_SetConfig+0x40>
 810b668:	687b      	ldr	r3, [r7, #4]
 810b66a:	4a43      	ldr	r2, [pc, #268]	@ (810b778 <TIM_Base_SetConfig+0x130>)
 810b66c:	4293      	cmp	r3, r2
 810b66e:	d00b      	beq.n	810b688 <TIM_Base_SetConfig+0x40>
 810b670:	687b      	ldr	r3, [r7, #4]
 810b672:	4a42      	ldr	r2, [pc, #264]	@ (810b77c <TIM_Base_SetConfig+0x134>)
 810b674:	4293      	cmp	r3, r2
 810b676:	d007      	beq.n	810b688 <TIM_Base_SetConfig+0x40>
 810b678:	687b      	ldr	r3, [r7, #4]
 810b67a:	4a41      	ldr	r2, [pc, #260]	@ (810b780 <TIM_Base_SetConfig+0x138>)
 810b67c:	4293      	cmp	r3, r2
 810b67e:	d003      	beq.n	810b688 <TIM_Base_SetConfig+0x40>
 810b680:	687b      	ldr	r3, [r7, #4]
 810b682:	4a40      	ldr	r2, [pc, #256]	@ (810b784 <TIM_Base_SetConfig+0x13c>)
 810b684:	4293      	cmp	r3, r2
 810b686:	d108      	bne.n	810b69a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810b688:	68fb      	ldr	r3, [r7, #12]
 810b68a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b68e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810b690:	683b      	ldr	r3, [r7, #0]
 810b692:	685b      	ldr	r3, [r3, #4]
 810b694:	68fa      	ldr	r2, [r7, #12]
 810b696:	4313      	orrs	r3, r2
 810b698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810b69a:	687b      	ldr	r3, [r7, #4]
 810b69c:	4a35      	ldr	r2, [pc, #212]	@ (810b774 <TIM_Base_SetConfig+0x12c>)
 810b69e:	4293      	cmp	r3, r2
 810b6a0:	d01f      	beq.n	810b6e2 <TIM_Base_SetConfig+0x9a>
 810b6a2:	687b      	ldr	r3, [r7, #4]
 810b6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b6a8:	d01b      	beq.n	810b6e2 <TIM_Base_SetConfig+0x9a>
 810b6aa:	687b      	ldr	r3, [r7, #4]
 810b6ac:	4a32      	ldr	r2, [pc, #200]	@ (810b778 <TIM_Base_SetConfig+0x130>)
 810b6ae:	4293      	cmp	r3, r2
 810b6b0:	d017      	beq.n	810b6e2 <TIM_Base_SetConfig+0x9a>
 810b6b2:	687b      	ldr	r3, [r7, #4]
 810b6b4:	4a31      	ldr	r2, [pc, #196]	@ (810b77c <TIM_Base_SetConfig+0x134>)
 810b6b6:	4293      	cmp	r3, r2
 810b6b8:	d013      	beq.n	810b6e2 <TIM_Base_SetConfig+0x9a>
 810b6ba:	687b      	ldr	r3, [r7, #4]
 810b6bc:	4a30      	ldr	r2, [pc, #192]	@ (810b780 <TIM_Base_SetConfig+0x138>)
 810b6be:	4293      	cmp	r3, r2
 810b6c0:	d00f      	beq.n	810b6e2 <TIM_Base_SetConfig+0x9a>
 810b6c2:	687b      	ldr	r3, [r7, #4]
 810b6c4:	4a2f      	ldr	r2, [pc, #188]	@ (810b784 <TIM_Base_SetConfig+0x13c>)
 810b6c6:	4293      	cmp	r3, r2
 810b6c8:	d00b      	beq.n	810b6e2 <TIM_Base_SetConfig+0x9a>
 810b6ca:	687b      	ldr	r3, [r7, #4]
 810b6cc:	4a2e      	ldr	r2, [pc, #184]	@ (810b788 <TIM_Base_SetConfig+0x140>)
 810b6ce:	4293      	cmp	r3, r2
 810b6d0:	d007      	beq.n	810b6e2 <TIM_Base_SetConfig+0x9a>
 810b6d2:	687b      	ldr	r3, [r7, #4]
 810b6d4:	4a2d      	ldr	r2, [pc, #180]	@ (810b78c <TIM_Base_SetConfig+0x144>)
 810b6d6:	4293      	cmp	r3, r2
 810b6d8:	d003      	beq.n	810b6e2 <TIM_Base_SetConfig+0x9a>
 810b6da:	687b      	ldr	r3, [r7, #4]
 810b6dc:	4a2c      	ldr	r2, [pc, #176]	@ (810b790 <TIM_Base_SetConfig+0x148>)
 810b6de:	4293      	cmp	r3, r2
 810b6e0:	d108      	bne.n	810b6f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810b6e2:	68fb      	ldr	r3, [r7, #12]
 810b6e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b6e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810b6ea:	683b      	ldr	r3, [r7, #0]
 810b6ec:	68db      	ldr	r3, [r3, #12]
 810b6ee:	68fa      	ldr	r2, [r7, #12]
 810b6f0:	4313      	orrs	r3, r2
 810b6f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810b6f4:	68fb      	ldr	r3, [r7, #12]
 810b6f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810b6fa:	683b      	ldr	r3, [r7, #0]
 810b6fc:	695b      	ldr	r3, [r3, #20]
 810b6fe:	4313      	orrs	r3, r2
 810b700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810b702:	687b      	ldr	r3, [r7, #4]
 810b704:	68fa      	ldr	r2, [r7, #12]
 810b706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810b708:	683b      	ldr	r3, [r7, #0]
 810b70a:	689a      	ldr	r2, [r3, #8]
 810b70c:	687b      	ldr	r3, [r7, #4]
 810b70e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810b710:	683b      	ldr	r3, [r7, #0]
 810b712:	681a      	ldr	r2, [r3, #0]
 810b714:	687b      	ldr	r3, [r7, #4]
 810b716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810b718:	687b      	ldr	r3, [r7, #4]
 810b71a:	4a16      	ldr	r2, [pc, #88]	@ (810b774 <TIM_Base_SetConfig+0x12c>)
 810b71c:	4293      	cmp	r3, r2
 810b71e:	d00f      	beq.n	810b740 <TIM_Base_SetConfig+0xf8>
 810b720:	687b      	ldr	r3, [r7, #4]
 810b722:	4a18      	ldr	r2, [pc, #96]	@ (810b784 <TIM_Base_SetConfig+0x13c>)
 810b724:	4293      	cmp	r3, r2
 810b726:	d00b      	beq.n	810b740 <TIM_Base_SetConfig+0xf8>
 810b728:	687b      	ldr	r3, [r7, #4]
 810b72a:	4a17      	ldr	r2, [pc, #92]	@ (810b788 <TIM_Base_SetConfig+0x140>)
 810b72c:	4293      	cmp	r3, r2
 810b72e:	d007      	beq.n	810b740 <TIM_Base_SetConfig+0xf8>
 810b730:	687b      	ldr	r3, [r7, #4]
 810b732:	4a16      	ldr	r2, [pc, #88]	@ (810b78c <TIM_Base_SetConfig+0x144>)
 810b734:	4293      	cmp	r3, r2
 810b736:	d003      	beq.n	810b740 <TIM_Base_SetConfig+0xf8>
 810b738:	687b      	ldr	r3, [r7, #4]
 810b73a:	4a15      	ldr	r2, [pc, #84]	@ (810b790 <TIM_Base_SetConfig+0x148>)
 810b73c:	4293      	cmp	r3, r2
 810b73e:	d103      	bne.n	810b748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810b740:	683b      	ldr	r3, [r7, #0]
 810b742:	691a      	ldr	r2, [r3, #16]
 810b744:	687b      	ldr	r3, [r7, #4]
 810b746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810b748:	687b      	ldr	r3, [r7, #4]
 810b74a:	2201      	movs	r2, #1
 810b74c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810b74e:	687b      	ldr	r3, [r7, #4]
 810b750:	691b      	ldr	r3, [r3, #16]
 810b752:	f003 0301 	and.w	r3, r3, #1
 810b756:	2b01      	cmp	r3, #1
 810b758:	d105      	bne.n	810b766 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810b75a:	687b      	ldr	r3, [r7, #4]
 810b75c:	691b      	ldr	r3, [r3, #16]
 810b75e:	f023 0201 	bic.w	r2, r3, #1
 810b762:	687b      	ldr	r3, [r7, #4]
 810b764:	611a      	str	r2, [r3, #16]
  }
}
 810b766:	bf00      	nop
 810b768:	3714      	adds	r7, #20
 810b76a:	46bd      	mov	sp, r7
 810b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b770:	4770      	bx	lr
 810b772:	bf00      	nop
 810b774:	40010000 	.word	0x40010000
 810b778:	40000400 	.word	0x40000400
 810b77c:	40000800 	.word	0x40000800
 810b780:	40000c00 	.word	0x40000c00
 810b784:	40010400 	.word	0x40010400
 810b788:	40014000 	.word	0x40014000
 810b78c:	40014400 	.word	0x40014400
 810b790:	40014800 	.word	0x40014800

0810b794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b794:	b480      	push	{r7}
 810b796:	b087      	sub	sp, #28
 810b798:	af00      	add	r7, sp, #0
 810b79a:	6078      	str	r0, [r7, #4]
 810b79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b79e:	687b      	ldr	r3, [r7, #4]
 810b7a0:	6a1b      	ldr	r3, [r3, #32]
 810b7a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810b7a4:	687b      	ldr	r3, [r7, #4]
 810b7a6:	6a1b      	ldr	r3, [r3, #32]
 810b7a8:	f023 0201 	bic.w	r2, r3, #1
 810b7ac:	687b      	ldr	r3, [r7, #4]
 810b7ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b7b0:	687b      	ldr	r3, [r7, #4]
 810b7b2:	685b      	ldr	r3, [r3, #4]
 810b7b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b7b6:	687b      	ldr	r3, [r7, #4]
 810b7b8:	699b      	ldr	r3, [r3, #24]
 810b7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810b7bc:	68fb      	ldr	r3, [r7, #12]
 810b7be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b7c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810b7c8:	68fb      	ldr	r3, [r7, #12]
 810b7ca:	f023 0303 	bic.w	r3, r3, #3
 810b7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b7d0:	683b      	ldr	r3, [r7, #0]
 810b7d2:	681b      	ldr	r3, [r3, #0]
 810b7d4:	68fa      	ldr	r2, [r7, #12]
 810b7d6:	4313      	orrs	r3, r2
 810b7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810b7da:	697b      	ldr	r3, [r7, #20]
 810b7dc:	f023 0302 	bic.w	r3, r3, #2
 810b7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810b7e2:	683b      	ldr	r3, [r7, #0]
 810b7e4:	689b      	ldr	r3, [r3, #8]
 810b7e6:	697a      	ldr	r2, [r7, #20]
 810b7e8:	4313      	orrs	r3, r2
 810b7ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810b7ec:	687b      	ldr	r3, [r7, #4]
 810b7ee:	4a2c      	ldr	r2, [pc, #176]	@ (810b8a0 <TIM_OC1_SetConfig+0x10c>)
 810b7f0:	4293      	cmp	r3, r2
 810b7f2:	d00f      	beq.n	810b814 <TIM_OC1_SetConfig+0x80>
 810b7f4:	687b      	ldr	r3, [r7, #4]
 810b7f6:	4a2b      	ldr	r2, [pc, #172]	@ (810b8a4 <TIM_OC1_SetConfig+0x110>)
 810b7f8:	4293      	cmp	r3, r2
 810b7fa:	d00b      	beq.n	810b814 <TIM_OC1_SetConfig+0x80>
 810b7fc:	687b      	ldr	r3, [r7, #4]
 810b7fe:	4a2a      	ldr	r2, [pc, #168]	@ (810b8a8 <TIM_OC1_SetConfig+0x114>)
 810b800:	4293      	cmp	r3, r2
 810b802:	d007      	beq.n	810b814 <TIM_OC1_SetConfig+0x80>
 810b804:	687b      	ldr	r3, [r7, #4]
 810b806:	4a29      	ldr	r2, [pc, #164]	@ (810b8ac <TIM_OC1_SetConfig+0x118>)
 810b808:	4293      	cmp	r3, r2
 810b80a:	d003      	beq.n	810b814 <TIM_OC1_SetConfig+0x80>
 810b80c:	687b      	ldr	r3, [r7, #4]
 810b80e:	4a28      	ldr	r2, [pc, #160]	@ (810b8b0 <TIM_OC1_SetConfig+0x11c>)
 810b810:	4293      	cmp	r3, r2
 810b812:	d10c      	bne.n	810b82e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810b814:	697b      	ldr	r3, [r7, #20]
 810b816:	f023 0308 	bic.w	r3, r3, #8
 810b81a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810b81c:	683b      	ldr	r3, [r7, #0]
 810b81e:	68db      	ldr	r3, [r3, #12]
 810b820:	697a      	ldr	r2, [r7, #20]
 810b822:	4313      	orrs	r3, r2
 810b824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810b826:	697b      	ldr	r3, [r7, #20]
 810b828:	f023 0304 	bic.w	r3, r3, #4
 810b82c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b82e:	687b      	ldr	r3, [r7, #4]
 810b830:	4a1b      	ldr	r2, [pc, #108]	@ (810b8a0 <TIM_OC1_SetConfig+0x10c>)
 810b832:	4293      	cmp	r3, r2
 810b834:	d00f      	beq.n	810b856 <TIM_OC1_SetConfig+0xc2>
 810b836:	687b      	ldr	r3, [r7, #4]
 810b838:	4a1a      	ldr	r2, [pc, #104]	@ (810b8a4 <TIM_OC1_SetConfig+0x110>)
 810b83a:	4293      	cmp	r3, r2
 810b83c:	d00b      	beq.n	810b856 <TIM_OC1_SetConfig+0xc2>
 810b83e:	687b      	ldr	r3, [r7, #4]
 810b840:	4a19      	ldr	r2, [pc, #100]	@ (810b8a8 <TIM_OC1_SetConfig+0x114>)
 810b842:	4293      	cmp	r3, r2
 810b844:	d007      	beq.n	810b856 <TIM_OC1_SetConfig+0xc2>
 810b846:	687b      	ldr	r3, [r7, #4]
 810b848:	4a18      	ldr	r2, [pc, #96]	@ (810b8ac <TIM_OC1_SetConfig+0x118>)
 810b84a:	4293      	cmp	r3, r2
 810b84c:	d003      	beq.n	810b856 <TIM_OC1_SetConfig+0xc2>
 810b84e:	687b      	ldr	r3, [r7, #4]
 810b850:	4a17      	ldr	r2, [pc, #92]	@ (810b8b0 <TIM_OC1_SetConfig+0x11c>)
 810b852:	4293      	cmp	r3, r2
 810b854:	d111      	bne.n	810b87a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810b856:	693b      	ldr	r3, [r7, #16]
 810b858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b85c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810b85e:	693b      	ldr	r3, [r7, #16]
 810b860:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810b864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810b866:	683b      	ldr	r3, [r7, #0]
 810b868:	695b      	ldr	r3, [r3, #20]
 810b86a:	693a      	ldr	r2, [r7, #16]
 810b86c:	4313      	orrs	r3, r2
 810b86e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810b870:	683b      	ldr	r3, [r7, #0]
 810b872:	699b      	ldr	r3, [r3, #24]
 810b874:	693a      	ldr	r2, [r7, #16]
 810b876:	4313      	orrs	r3, r2
 810b878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b87a:	687b      	ldr	r3, [r7, #4]
 810b87c:	693a      	ldr	r2, [r7, #16]
 810b87e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b880:	687b      	ldr	r3, [r7, #4]
 810b882:	68fa      	ldr	r2, [r7, #12]
 810b884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810b886:	683b      	ldr	r3, [r7, #0]
 810b888:	685a      	ldr	r2, [r3, #4]
 810b88a:	687b      	ldr	r3, [r7, #4]
 810b88c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b88e:	687b      	ldr	r3, [r7, #4]
 810b890:	697a      	ldr	r2, [r7, #20]
 810b892:	621a      	str	r2, [r3, #32]
}
 810b894:	bf00      	nop
 810b896:	371c      	adds	r7, #28
 810b898:	46bd      	mov	sp, r7
 810b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b89e:	4770      	bx	lr
 810b8a0:	40010000 	.word	0x40010000
 810b8a4:	40010400 	.word	0x40010400
 810b8a8:	40014000 	.word	0x40014000
 810b8ac:	40014400 	.word	0x40014400
 810b8b0:	40014800 	.word	0x40014800

0810b8b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b8b4:	b480      	push	{r7}
 810b8b6:	b087      	sub	sp, #28
 810b8b8:	af00      	add	r7, sp, #0
 810b8ba:	6078      	str	r0, [r7, #4]
 810b8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b8be:	687b      	ldr	r3, [r7, #4]
 810b8c0:	6a1b      	ldr	r3, [r3, #32]
 810b8c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810b8c4:	687b      	ldr	r3, [r7, #4]
 810b8c6:	6a1b      	ldr	r3, [r3, #32]
 810b8c8:	f023 0210 	bic.w	r2, r3, #16
 810b8cc:	687b      	ldr	r3, [r7, #4]
 810b8ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b8d0:	687b      	ldr	r3, [r7, #4]
 810b8d2:	685b      	ldr	r3, [r3, #4]
 810b8d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b8d6:	687b      	ldr	r3, [r7, #4]
 810b8d8:	699b      	ldr	r3, [r3, #24]
 810b8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810b8dc:	68fb      	ldr	r3, [r7, #12]
 810b8de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810b8e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810b8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810b8e8:	68fb      	ldr	r3, [r7, #12]
 810b8ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b8ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b8f0:	683b      	ldr	r3, [r7, #0]
 810b8f2:	681b      	ldr	r3, [r3, #0]
 810b8f4:	021b      	lsls	r3, r3, #8
 810b8f6:	68fa      	ldr	r2, [r7, #12]
 810b8f8:	4313      	orrs	r3, r2
 810b8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810b8fc:	697b      	ldr	r3, [r7, #20]
 810b8fe:	f023 0320 	bic.w	r3, r3, #32
 810b902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810b904:	683b      	ldr	r3, [r7, #0]
 810b906:	689b      	ldr	r3, [r3, #8]
 810b908:	011b      	lsls	r3, r3, #4
 810b90a:	697a      	ldr	r2, [r7, #20]
 810b90c:	4313      	orrs	r3, r2
 810b90e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810b910:	687b      	ldr	r3, [r7, #4]
 810b912:	4a28      	ldr	r2, [pc, #160]	@ (810b9b4 <TIM_OC2_SetConfig+0x100>)
 810b914:	4293      	cmp	r3, r2
 810b916:	d003      	beq.n	810b920 <TIM_OC2_SetConfig+0x6c>
 810b918:	687b      	ldr	r3, [r7, #4]
 810b91a:	4a27      	ldr	r2, [pc, #156]	@ (810b9b8 <TIM_OC2_SetConfig+0x104>)
 810b91c:	4293      	cmp	r3, r2
 810b91e:	d10d      	bne.n	810b93c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810b920:	697b      	ldr	r3, [r7, #20]
 810b922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810b928:	683b      	ldr	r3, [r7, #0]
 810b92a:	68db      	ldr	r3, [r3, #12]
 810b92c:	011b      	lsls	r3, r3, #4
 810b92e:	697a      	ldr	r2, [r7, #20]
 810b930:	4313      	orrs	r3, r2
 810b932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810b934:	697b      	ldr	r3, [r7, #20]
 810b936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810b93a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b93c:	687b      	ldr	r3, [r7, #4]
 810b93e:	4a1d      	ldr	r2, [pc, #116]	@ (810b9b4 <TIM_OC2_SetConfig+0x100>)
 810b940:	4293      	cmp	r3, r2
 810b942:	d00f      	beq.n	810b964 <TIM_OC2_SetConfig+0xb0>
 810b944:	687b      	ldr	r3, [r7, #4]
 810b946:	4a1c      	ldr	r2, [pc, #112]	@ (810b9b8 <TIM_OC2_SetConfig+0x104>)
 810b948:	4293      	cmp	r3, r2
 810b94a:	d00b      	beq.n	810b964 <TIM_OC2_SetConfig+0xb0>
 810b94c:	687b      	ldr	r3, [r7, #4]
 810b94e:	4a1b      	ldr	r2, [pc, #108]	@ (810b9bc <TIM_OC2_SetConfig+0x108>)
 810b950:	4293      	cmp	r3, r2
 810b952:	d007      	beq.n	810b964 <TIM_OC2_SetConfig+0xb0>
 810b954:	687b      	ldr	r3, [r7, #4]
 810b956:	4a1a      	ldr	r2, [pc, #104]	@ (810b9c0 <TIM_OC2_SetConfig+0x10c>)
 810b958:	4293      	cmp	r3, r2
 810b95a:	d003      	beq.n	810b964 <TIM_OC2_SetConfig+0xb0>
 810b95c:	687b      	ldr	r3, [r7, #4]
 810b95e:	4a19      	ldr	r2, [pc, #100]	@ (810b9c4 <TIM_OC2_SetConfig+0x110>)
 810b960:	4293      	cmp	r3, r2
 810b962:	d113      	bne.n	810b98c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810b964:	693b      	ldr	r3, [r7, #16]
 810b966:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810b96a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810b96c:	693b      	ldr	r3, [r7, #16]
 810b96e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810b972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810b974:	683b      	ldr	r3, [r7, #0]
 810b976:	695b      	ldr	r3, [r3, #20]
 810b978:	009b      	lsls	r3, r3, #2
 810b97a:	693a      	ldr	r2, [r7, #16]
 810b97c:	4313      	orrs	r3, r2
 810b97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810b980:	683b      	ldr	r3, [r7, #0]
 810b982:	699b      	ldr	r3, [r3, #24]
 810b984:	009b      	lsls	r3, r3, #2
 810b986:	693a      	ldr	r2, [r7, #16]
 810b988:	4313      	orrs	r3, r2
 810b98a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b98c:	687b      	ldr	r3, [r7, #4]
 810b98e:	693a      	ldr	r2, [r7, #16]
 810b990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b992:	687b      	ldr	r3, [r7, #4]
 810b994:	68fa      	ldr	r2, [r7, #12]
 810b996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810b998:	683b      	ldr	r3, [r7, #0]
 810b99a:	685a      	ldr	r2, [r3, #4]
 810b99c:	687b      	ldr	r3, [r7, #4]
 810b99e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b9a0:	687b      	ldr	r3, [r7, #4]
 810b9a2:	697a      	ldr	r2, [r7, #20]
 810b9a4:	621a      	str	r2, [r3, #32]
}
 810b9a6:	bf00      	nop
 810b9a8:	371c      	adds	r7, #28
 810b9aa:	46bd      	mov	sp, r7
 810b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9b0:	4770      	bx	lr
 810b9b2:	bf00      	nop
 810b9b4:	40010000 	.word	0x40010000
 810b9b8:	40010400 	.word	0x40010400
 810b9bc:	40014000 	.word	0x40014000
 810b9c0:	40014400 	.word	0x40014400
 810b9c4:	40014800 	.word	0x40014800

0810b9c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810b9c8:	b480      	push	{r7}
 810b9ca:	b087      	sub	sp, #28
 810b9cc:	af00      	add	r7, sp, #0
 810b9ce:	6078      	str	r0, [r7, #4]
 810b9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b9d2:	687b      	ldr	r3, [r7, #4]
 810b9d4:	6a1b      	ldr	r3, [r3, #32]
 810b9d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810b9d8:	687b      	ldr	r3, [r7, #4]
 810b9da:	6a1b      	ldr	r3, [r3, #32]
 810b9dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810b9e0:	687b      	ldr	r3, [r7, #4]
 810b9e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b9e4:	687b      	ldr	r3, [r7, #4]
 810b9e6:	685b      	ldr	r3, [r3, #4]
 810b9e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810b9ea:	687b      	ldr	r3, [r7, #4]
 810b9ec:	69db      	ldr	r3, [r3, #28]
 810b9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810b9f0:	68fb      	ldr	r3, [r7, #12]
 810b9f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810b9f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810b9fc:	68fb      	ldr	r3, [r7, #12]
 810b9fe:	f023 0303 	bic.w	r3, r3, #3
 810ba02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810ba04:	683b      	ldr	r3, [r7, #0]
 810ba06:	681b      	ldr	r3, [r3, #0]
 810ba08:	68fa      	ldr	r2, [r7, #12]
 810ba0a:	4313      	orrs	r3, r2
 810ba0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810ba0e:	697b      	ldr	r3, [r7, #20]
 810ba10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810ba14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810ba16:	683b      	ldr	r3, [r7, #0]
 810ba18:	689b      	ldr	r3, [r3, #8]
 810ba1a:	021b      	lsls	r3, r3, #8
 810ba1c:	697a      	ldr	r2, [r7, #20]
 810ba1e:	4313      	orrs	r3, r2
 810ba20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810ba22:	687b      	ldr	r3, [r7, #4]
 810ba24:	4a27      	ldr	r2, [pc, #156]	@ (810bac4 <TIM_OC3_SetConfig+0xfc>)
 810ba26:	4293      	cmp	r3, r2
 810ba28:	d003      	beq.n	810ba32 <TIM_OC3_SetConfig+0x6a>
 810ba2a:	687b      	ldr	r3, [r7, #4]
 810ba2c:	4a26      	ldr	r2, [pc, #152]	@ (810bac8 <TIM_OC3_SetConfig+0x100>)
 810ba2e:	4293      	cmp	r3, r2
 810ba30:	d10d      	bne.n	810ba4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810ba32:	697b      	ldr	r3, [r7, #20]
 810ba34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810ba38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810ba3a:	683b      	ldr	r3, [r7, #0]
 810ba3c:	68db      	ldr	r3, [r3, #12]
 810ba3e:	021b      	lsls	r3, r3, #8
 810ba40:	697a      	ldr	r2, [r7, #20]
 810ba42:	4313      	orrs	r3, r2
 810ba44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810ba46:	697b      	ldr	r3, [r7, #20]
 810ba48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810ba4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ba4e:	687b      	ldr	r3, [r7, #4]
 810ba50:	4a1c      	ldr	r2, [pc, #112]	@ (810bac4 <TIM_OC3_SetConfig+0xfc>)
 810ba52:	4293      	cmp	r3, r2
 810ba54:	d00f      	beq.n	810ba76 <TIM_OC3_SetConfig+0xae>
 810ba56:	687b      	ldr	r3, [r7, #4]
 810ba58:	4a1b      	ldr	r2, [pc, #108]	@ (810bac8 <TIM_OC3_SetConfig+0x100>)
 810ba5a:	4293      	cmp	r3, r2
 810ba5c:	d00b      	beq.n	810ba76 <TIM_OC3_SetConfig+0xae>
 810ba5e:	687b      	ldr	r3, [r7, #4]
 810ba60:	4a1a      	ldr	r2, [pc, #104]	@ (810bacc <TIM_OC3_SetConfig+0x104>)
 810ba62:	4293      	cmp	r3, r2
 810ba64:	d007      	beq.n	810ba76 <TIM_OC3_SetConfig+0xae>
 810ba66:	687b      	ldr	r3, [r7, #4]
 810ba68:	4a19      	ldr	r2, [pc, #100]	@ (810bad0 <TIM_OC3_SetConfig+0x108>)
 810ba6a:	4293      	cmp	r3, r2
 810ba6c:	d003      	beq.n	810ba76 <TIM_OC3_SetConfig+0xae>
 810ba6e:	687b      	ldr	r3, [r7, #4]
 810ba70:	4a18      	ldr	r2, [pc, #96]	@ (810bad4 <TIM_OC3_SetConfig+0x10c>)
 810ba72:	4293      	cmp	r3, r2
 810ba74:	d113      	bne.n	810ba9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810ba76:	693b      	ldr	r3, [r7, #16]
 810ba78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810ba7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810ba7e:	693b      	ldr	r3, [r7, #16]
 810ba80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810ba84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810ba86:	683b      	ldr	r3, [r7, #0]
 810ba88:	695b      	ldr	r3, [r3, #20]
 810ba8a:	011b      	lsls	r3, r3, #4
 810ba8c:	693a      	ldr	r2, [r7, #16]
 810ba8e:	4313      	orrs	r3, r2
 810ba90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810ba92:	683b      	ldr	r3, [r7, #0]
 810ba94:	699b      	ldr	r3, [r3, #24]
 810ba96:	011b      	lsls	r3, r3, #4
 810ba98:	693a      	ldr	r2, [r7, #16]
 810ba9a:	4313      	orrs	r3, r2
 810ba9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ba9e:	687b      	ldr	r3, [r7, #4]
 810baa0:	693a      	ldr	r2, [r7, #16]
 810baa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810baa4:	687b      	ldr	r3, [r7, #4]
 810baa6:	68fa      	ldr	r2, [r7, #12]
 810baa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810baaa:	683b      	ldr	r3, [r7, #0]
 810baac:	685a      	ldr	r2, [r3, #4]
 810baae:	687b      	ldr	r3, [r7, #4]
 810bab0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bab2:	687b      	ldr	r3, [r7, #4]
 810bab4:	697a      	ldr	r2, [r7, #20]
 810bab6:	621a      	str	r2, [r3, #32]
}
 810bab8:	bf00      	nop
 810baba:	371c      	adds	r7, #28
 810babc:	46bd      	mov	sp, r7
 810babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bac2:	4770      	bx	lr
 810bac4:	40010000 	.word	0x40010000
 810bac8:	40010400 	.word	0x40010400
 810bacc:	40014000 	.word	0x40014000
 810bad0:	40014400 	.word	0x40014400
 810bad4:	40014800 	.word	0x40014800

0810bad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810bad8:	b480      	push	{r7}
 810bada:	b087      	sub	sp, #28
 810badc:	af00      	add	r7, sp, #0
 810bade:	6078      	str	r0, [r7, #4]
 810bae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bae2:	687b      	ldr	r3, [r7, #4]
 810bae4:	6a1b      	ldr	r3, [r3, #32]
 810bae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810bae8:	687b      	ldr	r3, [r7, #4]
 810baea:	6a1b      	ldr	r3, [r3, #32]
 810baec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810baf0:	687b      	ldr	r3, [r7, #4]
 810baf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810baf4:	687b      	ldr	r3, [r7, #4]
 810baf6:	685b      	ldr	r3, [r3, #4]
 810baf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810bafa:	687b      	ldr	r3, [r7, #4]
 810bafc:	69db      	ldr	r3, [r3, #28]
 810bafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810bb00:	68fb      	ldr	r3, [r7, #12]
 810bb02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810bb06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810bb0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810bb0c:	68fb      	ldr	r3, [r7, #12]
 810bb0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810bb12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810bb14:	683b      	ldr	r3, [r7, #0]
 810bb16:	681b      	ldr	r3, [r3, #0]
 810bb18:	021b      	lsls	r3, r3, #8
 810bb1a:	68fa      	ldr	r2, [r7, #12]
 810bb1c:	4313      	orrs	r3, r2
 810bb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810bb20:	693b      	ldr	r3, [r7, #16]
 810bb22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810bb26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810bb28:	683b      	ldr	r3, [r7, #0]
 810bb2a:	689b      	ldr	r3, [r3, #8]
 810bb2c:	031b      	lsls	r3, r3, #12
 810bb2e:	693a      	ldr	r2, [r7, #16]
 810bb30:	4313      	orrs	r3, r2
 810bb32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bb34:	687b      	ldr	r3, [r7, #4]
 810bb36:	4a18      	ldr	r2, [pc, #96]	@ (810bb98 <TIM_OC4_SetConfig+0xc0>)
 810bb38:	4293      	cmp	r3, r2
 810bb3a:	d00f      	beq.n	810bb5c <TIM_OC4_SetConfig+0x84>
 810bb3c:	687b      	ldr	r3, [r7, #4]
 810bb3e:	4a17      	ldr	r2, [pc, #92]	@ (810bb9c <TIM_OC4_SetConfig+0xc4>)
 810bb40:	4293      	cmp	r3, r2
 810bb42:	d00b      	beq.n	810bb5c <TIM_OC4_SetConfig+0x84>
 810bb44:	687b      	ldr	r3, [r7, #4]
 810bb46:	4a16      	ldr	r2, [pc, #88]	@ (810bba0 <TIM_OC4_SetConfig+0xc8>)
 810bb48:	4293      	cmp	r3, r2
 810bb4a:	d007      	beq.n	810bb5c <TIM_OC4_SetConfig+0x84>
 810bb4c:	687b      	ldr	r3, [r7, #4]
 810bb4e:	4a15      	ldr	r2, [pc, #84]	@ (810bba4 <TIM_OC4_SetConfig+0xcc>)
 810bb50:	4293      	cmp	r3, r2
 810bb52:	d003      	beq.n	810bb5c <TIM_OC4_SetConfig+0x84>
 810bb54:	687b      	ldr	r3, [r7, #4]
 810bb56:	4a14      	ldr	r2, [pc, #80]	@ (810bba8 <TIM_OC4_SetConfig+0xd0>)
 810bb58:	4293      	cmp	r3, r2
 810bb5a:	d109      	bne.n	810bb70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810bb5c:	697b      	ldr	r3, [r7, #20]
 810bb5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810bb62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810bb64:	683b      	ldr	r3, [r7, #0]
 810bb66:	695b      	ldr	r3, [r3, #20]
 810bb68:	019b      	lsls	r3, r3, #6
 810bb6a:	697a      	ldr	r2, [r7, #20]
 810bb6c:	4313      	orrs	r3, r2
 810bb6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bb70:	687b      	ldr	r3, [r7, #4]
 810bb72:	697a      	ldr	r2, [r7, #20]
 810bb74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810bb76:	687b      	ldr	r3, [r7, #4]
 810bb78:	68fa      	ldr	r2, [r7, #12]
 810bb7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810bb7c:	683b      	ldr	r3, [r7, #0]
 810bb7e:	685a      	ldr	r2, [r3, #4]
 810bb80:	687b      	ldr	r3, [r7, #4]
 810bb82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bb84:	687b      	ldr	r3, [r7, #4]
 810bb86:	693a      	ldr	r2, [r7, #16]
 810bb88:	621a      	str	r2, [r3, #32]
}
 810bb8a:	bf00      	nop
 810bb8c:	371c      	adds	r7, #28
 810bb8e:	46bd      	mov	sp, r7
 810bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb94:	4770      	bx	lr
 810bb96:	bf00      	nop
 810bb98:	40010000 	.word	0x40010000
 810bb9c:	40010400 	.word	0x40010400
 810bba0:	40014000 	.word	0x40014000
 810bba4:	40014400 	.word	0x40014400
 810bba8:	40014800 	.word	0x40014800

0810bbac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810bbac:	b480      	push	{r7}
 810bbae:	b087      	sub	sp, #28
 810bbb0:	af00      	add	r7, sp, #0
 810bbb2:	6078      	str	r0, [r7, #4]
 810bbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bbb6:	687b      	ldr	r3, [r7, #4]
 810bbb8:	6a1b      	ldr	r3, [r3, #32]
 810bbba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810bbbc:	687b      	ldr	r3, [r7, #4]
 810bbbe:	6a1b      	ldr	r3, [r3, #32]
 810bbc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810bbc4:	687b      	ldr	r3, [r7, #4]
 810bbc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bbc8:	687b      	ldr	r3, [r7, #4]
 810bbca:	685b      	ldr	r3, [r3, #4]
 810bbcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810bbce:	687b      	ldr	r3, [r7, #4]
 810bbd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810bbd4:	68fb      	ldr	r3, [r7, #12]
 810bbd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810bbda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810bbe0:	683b      	ldr	r3, [r7, #0]
 810bbe2:	681b      	ldr	r3, [r3, #0]
 810bbe4:	68fa      	ldr	r2, [r7, #12]
 810bbe6:	4313      	orrs	r3, r2
 810bbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810bbea:	693b      	ldr	r3, [r7, #16]
 810bbec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810bbf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810bbf2:	683b      	ldr	r3, [r7, #0]
 810bbf4:	689b      	ldr	r3, [r3, #8]
 810bbf6:	041b      	lsls	r3, r3, #16
 810bbf8:	693a      	ldr	r2, [r7, #16]
 810bbfa:	4313      	orrs	r3, r2
 810bbfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bbfe:	687b      	ldr	r3, [r7, #4]
 810bc00:	4a17      	ldr	r2, [pc, #92]	@ (810bc60 <TIM_OC5_SetConfig+0xb4>)
 810bc02:	4293      	cmp	r3, r2
 810bc04:	d00f      	beq.n	810bc26 <TIM_OC5_SetConfig+0x7a>
 810bc06:	687b      	ldr	r3, [r7, #4]
 810bc08:	4a16      	ldr	r2, [pc, #88]	@ (810bc64 <TIM_OC5_SetConfig+0xb8>)
 810bc0a:	4293      	cmp	r3, r2
 810bc0c:	d00b      	beq.n	810bc26 <TIM_OC5_SetConfig+0x7a>
 810bc0e:	687b      	ldr	r3, [r7, #4]
 810bc10:	4a15      	ldr	r2, [pc, #84]	@ (810bc68 <TIM_OC5_SetConfig+0xbc>)
 810bc12:	4293      	cmp	r3, r2
 810bc14:	d007      	beq.n	810bc26 <TIM_OC5_SetConfig+0x7a>
 810bc16:	687b      	ldr	r3, [r7, #4]
 810bc18:	4a14      	ldr	r2, [pc, #80]	@ (810bc6c <TIM_OC5_SetConfig+0xc0>)
 810bc1a:	4293      	cmp	r3, r2
 810bc1c:	d003      	beq.n	810bc26 <TIM_OC5_SetConfig+0x7a>
 810bc1e:	687b      	ldr	r3, [r7, #4]
 810bc20:	4a13      	ldr	r2, [pc, #76]	@ (810bc70 <TIM_OC5_SetConfig+0xc4>)
 810bc22:	4293      	cmp	r3, r2
 810bc24:	d109      	bne.n	810bc3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810bc26:	697b      	ldr	r3, [r7, #20]
 810bc28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810bc2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810bc2e:	683b      	ldr	r3, [r7, #0]
 810bc30:	695b      	ldr	r3, [r3, #20]
 810bc32:	021b      	lsls	r3, r3, #8
 810bc34:	697a      	ldr	r2, [r7, #20]
 810bc36:	4313      	orrs	r3, r2
 810bc38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bc3a:	687b      	ldr	r3, [r7, #4]
 810bc3c:	697a      	ldr	r2, [r7, #20]
 810bc3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810bc40:	687b      	ldr	r3, [r7, #4]
 810bc42:	68fa      	ldr	r2, [r7, #12]
 810bc44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810bc46:	683b      	ldr	r3, [r7, #0]
 810bc48:	685a      	ldr	r2, [r3, #4]
 810bc4a:	687b      	ldr	r3, [r7, #4]
 810bc4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bc4e:	687b      	ldr	r3, [r7, #4]
 810bc50:	693a      	ldr	r2, [r7, #16]
 810bc52:	621a      	str	r2, [r3, #32]
}
 810bc54:	bf00      	nop
 810bc56:	371c      	adds	r7, #28
 810bc58:	46bd      	mov	sp, r7
 810bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc5e:	4770      	bx	lr
 810bc60:	40010000 	.word	0x40010000
 810bc64:	40010400 	.word	0x40010400
 810bc68:	40014000 	.word	0x40014000
 810bc6c:	40014400 	.word	0x40014400
 810bc70:	40014800 	.word	0x40014800

0810bc74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810bc74:	b480      	push	{r7}
 810bc76:	b087      	sub	sp, #28
 810bc78:	af00      	add	r7, sp, #0
 810bc7a:	6078      	str	r0, [r7, #4]
 810bc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bc7e:	687b      	ldr	r3, [r7, #4]
 810bc80:	6a1b      	ldr	r3, [r3, #32]
 810bc82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810bc84:	687b      	ldr	r3, [r7, #4]
 810bc86:	6a1b      	ldr	r3, [r3, #32]
 810bc88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810bc8c:	687b      	ldr	r3, [r7, #4]
 810bc8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bc90:	687b      	ldr	r3, [r7, #4]
 810bc92:	685b      	ldr	r3, [r3, #4]
 810bc94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810bc96:	687b      	ldr	r3, [r7, #4]
 810bc98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810bc9c:	68fb      	ldr	r3, [r7, #12]
 810bc9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810bca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810bca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810bca8:	683b      	ldr	r3, [r7, #0]
 810bcaa:	681b      	ldr	r3, [r3, #0]
 810bcac:	021b      	lsls	r3, r3, #8
 810bcae:	68fa      	ldr	r2, [r7, #12]
 810bcb0:	4313      	orrs	r3, r2
 810bcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810bcb4:	693b      	ldr	r3, [r7, #16]
 810bcb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810bcba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810bcbc:	683b      	ldr	r3, [r7, #0]
 810bcbe:	689b      	ldr	r3, [r3, #8]
 810bcc0:	051b      	lsls	r3, r3, #20
 810bcc2:	693a      	ldr	r2, [r7, #16]
 810bcc4:	4313      	orrs	r3, r2
 810bcc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bcc8:	687b      	ldr	r3, [r7, #4]
 810bcca:	4a18      	ldr	r2, [pc, #96]	@ (810bd2c <TIM_OC6_SetConfig+0xb8>)
 810bccc:	4293      	cmp	r3, r2
 810bcce:	d00f      	beq.n	810bcf0 <TIM_OC6_SetConfig+0x7c>
 810bcd0:	687b      	ldr	r3, [r7, #4]
 810bcd2:	4a17      	ldr	r2, [pc, #92]	@ (810bd30 <TIM_OC6_SetConfig+0xbc>)
 810bcd4:	4293      	cmp	r3, r2
 810bcd6:	d00b      	beq.n	810bcf0 <TIM_OC6_SetConfig+0x7c>
 810bcd8:	687b      	ldr	r3, [r7, #4]
 810bcda:	4a16      	ldr	r2, [pc, #88]	@ (810bd34 <TIM_OC6_SetConfig+0xc0>)
 810bcdc:	4293      	cmp	r3, r2
 810bcde:	d007      	beq.n	810bcf0 <TIM_OC6_SetConfig+0x7c>
 810bce0:	687b      	ldr	r3, [r7, #4]
 810bce2:	4a15      	ldr	r2, [pc, #84]	@ (810bd38 <TIM_OC6_SetConfig+0xc4>)
 810bce4:	4293      	cmp	r3, r2
 810bce6:	d003      	beq.n	810bcf0 <TIM_OC6_SetConfig+0x7c>
 810bce8:	687b      	ldr	r3, [r7, #4]
 810bcea:	4a14      	ldr	r2, [pc, #80]	@ (810bd3c <TIM_OC6_SetConfig+0xc8>)
 810bcec:	4293      	cmp	r3, r2
 810bcee:	d109      	bne.n	810bd04 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810bcf0:	697b      	ldr	r3, [r7, #20]
 810bcf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810bcf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810bcf8:	683b      	ldr	r3, [r7, #0]
 810bcfa:	695b      	ldr	r3, [r3, #20]
 810bcfc:	029b      	lsls	r3, r3, #10
 810bcfe:	697a      	ldr	r2, [r7, #20]
 810bd00:	4313      	orrs	r3, r2
 810bd02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bd04:	687b      	ldr	r3, [r7, #4]
 810bd06:	697a      	ldr	r2, [r7, #20]
 810bd08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810bd0a:	687b      	ldr	r3, [r7, #4]
 810bd0c:	68fa      	ldr	r2, [r7, #12]
 810bd0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810bd10:	683b      	ldr	r3, [r7, #0]
 810bd12:	685a      	ldr	r2, [r3, #4]
 810bd14:	687b      	ldr	r3, [r7, #4]
 810bd16:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bd18:	687b      	ldr	r3, [r7, #4]
 810bd1a:	693a      	ldr	r2, [r7, #16]
 810bd1c:	621a      	str	r2, [r3, #32]
}
 810bd1e:	bf00      	nop
 810bd20:	371c      	adds	r7, #28
 810bd22:	46bd      	mov	sp, r7
 810bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd28:	4770      	bx	lr
 810bd2a:	bf00      	nop
 810bd2c:	40010000 	.word	0x40010000
 810bd30:	40010400 	.word	0x40010400
 810bd34:	40014000 	.word	0x40014000
 810bd38:	40014400 	.word	0x40014400
 810bd3c:	40014800 	.word	0x40014800

0810bd40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810bd40:	b480      	push	{r7}
 810bd42:	b087      	sub	sp, #28
 810bd44:	af00      	add	r7, sp, #0
 810bd46:	60f8      	str	r0, [r7, #12]
 810bd48:	60b9      	str	r1, [r7, #8]
 810bd4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810bd4c:	68fb      	ldr	r3, [r7, #12]
 810bd4e:	6a1b      	ldr	r3, [r3, #32]
 810bd50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810bd52:	68fb      	ldr	r3, [r7, #12]
 810bd54:	6a1b      	ldr	r3, [r3, #32]
 810bd56:	f023 0201 	bic.w	r2, r3, #1
 810bd5a:	68fb      	ldr	r3, [r7, #12]
 810bd5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810bd5e:	68fb      	ldr	r3, [r7, #12]
 810bd60:	699b      	ldr	r3, [r3, #24]
 810bd62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810bd64:	693b      	ldr	r3, [r7, #16]
 810bd66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810bd6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810bd6c:	687b      	ldr	r3, [r7, #4]
 810bd6e:	011b      	lsls	r3, r3, #4
 810bd70:	693a      	ldr	r2, [r7, #16]
 810bd72:	4313      	orrs	r3, r2
 810bd74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810bd76:	697b      	ldr	r3, [r7, #20]
 810bd78:	f023 030a 	bic.w	r3, r3, #10
 810bd7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810bd7e:	697a      	ldr	r2, [r7, #20]
 810bd80:	68bb      	ldr	r3, [r7, #8]
 810bd82:	4313      	orrs	r3, r2
 810bd84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810bd86:	68fb      	ldr	r3, [r7, #12]
 810bd88:	693a      	ldr	r2, [r7, #16]
 810bd8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810bd8c:	68fb      	ldr	r3, [r7, #12]
 810bd8e:	697a      	ldr	r2, [r7, #20]
 810bd90:	621a      	str	r2, [r3, #32]
}
 810bd92:	bf00      	nop
 810bd94:	371c      	adds	r7, #28
 810bd96:	46bd      	mov	sp, r7
 810bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd9c:	4770      	bx	lr

0810bd9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810bd9e:	b480      	push	{r7}
 810bda0:	b087      	sub	sp, #28
 810bda2:	af00      	add	r7, sp, #0
 810bda4:	60f8      	str	r0, [r7, #12]
 810bda6:	60b9      	str	r1, [r7, #8]
 810bda8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810bdaa:	68fb      	ldr	r3, [r7, #12]
 810bdac:	6a1b      	ldr	r3, [r3, #32]
 810bdae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810bdb0:	68fb      	ldr	r3, [r7, #12]
 810bdb2:	6a1b      	ldr	r3, [r3, #32]
 810bdb4:	f023 0210 	bic.w	r2, r3, #16
 810bdb8:	68fb      	ldr	r3, [r7, #12]
 810bdba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810bdbc:	68fb      	ldr	r3, [r7, #12]
 810bdbe:	699b      	ldr	r3, [r3, #24]
 810bdc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810bdc2:	693b      	ldr	r3, [r7, #16]
 810bdc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810bdc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810bdca:	687b      	ldr	r3, [r7, #4]
 810bdcc:	031b      	lsls	r3, r3, #12
 810bdce:	693a      	ldr	r2, [r7, #16]
 810bdd0:	4313      	orrs	r3, r2
 810bdd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810bdd4:	697b      	ldr	r3, [r7, #20]
 810bdd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810bdda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810bddc:	68bb      	ldr	r3, [r7, #8]
 810bdde:	011b      	lsls	r3, r3, #4
 810bde0:	697a      	ldr	r2, [r7, #20]
 810bde2:	4313      	orrs	r3, r2
 810bde4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810bde6:	68fb      	ldr	r3, [r7, #12]
 810bde8:	693a      	ldr	r2, [r7, #16]
 810bdea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810bdec:	68fb      	ldr	r3, [r7, #12]
 810bdee:	697a      	ldr	r2, [r7, #20]
 810bdf0:	621a      	str	r2, [r3, #32]
}
 810bdf2:	bf00      	nop
 810bdf4:	371c      	adds	r7, #28
 810bdf6:	46bd      	mov	sp, r7
 810bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bdfc:	4770      	bx	lr

0810bdfe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810bdfe:	b480      	push	{r7}
 810be00:	b085      	sub	sp, #20
 810be02:	af00      	add	r7, sp, #0
 810be04:	6078      	str	r0, [r7, #4]
 810be06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810be08:	687b      	ldr	r3, [r7, #4]
 810be0a:	689b      	ldr	r3, [r3, #8]
 810be0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810be0e:	68fb      	ldr	r3, [r7, #12]
 810be10:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810be14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810be18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810be1a:	683a      	ldr	r2, [r7, #0]
 810be1c:	68fb      	ldr	r3, [r7, #12]
 810be1e:	4313      	orrs	r3, r2
 810be20:	f043 0307 	orr.w	r3, r3, #7
 810be24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810be26:	687b      	ldr	r3, [r7, #4]
 810be28:	68fa      	ldr	r2, [r7, #12]
 810be2a:	609a      	str	r2, [r3, #8]
}
 810be2c:	bf00      	nop
 810be2e:	3714      	adds	r7, #20
 810be30:	46bd      	mov	sp, r7
 810be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be36:	4770      	bx	lr

0810be38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810be38:	b480      	push	{r7}
 810be3a:	b087      	sub	sp, #28
 810be3c:	af00      	add	r7, sp, #0
 810be3e:	60f8      	str	r0, [r7, #12]
 810be40:	60b9      	str	r1, [r7, #8]
 810be42:	607a      	str	r2, [r7, #4]
 810be44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810be46:	68fb      	ldr	r3, [r7, #12]
 810be48:	689b      	ldr	r3, [r3, #8]
 810be4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810be4c:	697b      	ldr	r3, [r7, #20]
 810be4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810be52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810be54:	683b      	ldr	r3, [r7, #0]
 810be56:	021a      	lsls	r2, r3, #8
 810be58:	687b      	ldr	r3, [r7, #4]
 810be5a:	431a      	orrs	r2, r3
 810be5c:	68bb      	ldr	r3, [r7, #8]
 810be5e:	4313      	orrs	r3, r2
 810be60:	697a      	ldr	r2, [r7, #20]
 810be62:	4313      	orrs	r3, r2
 810be64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810be66:	68fb      	ldr	r3, [r7, #12]
 810be68:	697a      	ldr	r2, [r7, #20]
 810be6a:	609a      	str	r2, [r3, #8]
}
 810be6c:	bf00      	nop
 810be6e:	371c      	adds	r7, #28
 810be70:	46bd      	mov	sp, r7
 810be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be76:	4770      	bx	lr

0810be78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810be78:	b480      	push	{r7}
 810be7a:	b087      	sub	sp, #28
 810be7c:	af00      	add	r7, sp, #0
 810be7e:	60f8      	str	r0, [r7, #12]
 810be80:	60b9      	str	r1, [r7, #8]
 810be82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810be84:	68bb      	ldr	r3, [r7, #8]
 810be86:	f003 031f 	and.w	r3, r3, #31
 810be8a:	2201      	movs	r2, #1
 810be8c:	fa02 f303 	lsl.w	r3, r2, r3
 810be90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810be92:	68fb      	ldr	r3, [r7, #12]
 810be94:	6a1a      	ldr	r2, [r3, #32]
 810be96:	697b      	ldr	r3, [r7, #20]
 810be98:	43db      	mvns	r3, r3
 810be9a:	401a      	ands	r2, r3
 810be9c:	68fb      	ldr	r3, [r7, #12]
 810be9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810bea0:	68fb      	ldr	r3, [r7, #12]
 810bea2:	6a1a      	ldr	r2, [r3, #32]
 810bea4:	68bb      	ldr	r3, [r7, #8]
 810bea6:	f003 031f 	and.w	r3, r3, #31
 810beaa:	6879      	ldr	r1, [r7, #4]
 810beac:	fa01 f303 	lsl.w	r3, r1, r3
 810beb0:	431a      	orrs	r2, r3
 810beb2:	68fb      	ldr	r3, [r7, #12]
 810beb4:	621a      	str	r2, [r3, #32]
}
 810beb6:	bf00      	nop
 810beb8:	371c      	adds	r7, #28
 810beba:	46bd      	mov	sp, r7
 810bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bec0:	4770      	bx	lr
	...

0810bec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810bec4:	b480      	push	{r7}
 810bec6:	b085      	sub	sp, #20
 810bec8:	af00      	add	r7, sp, #0
 810beca:	6078      	str	r0, [r7, #4]
 810becc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810bece:	687b      	ldr	r3, [r7, #4]
 810bed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810bed4:	2b01      	cmp	r3, #1
 810bed6:	d101      	bne.n	810bedc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810bed8:	2302      	movs	r3, #2
 810beda:	e06d      	b.n	810bfb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810bedc:	687b      	ldr	r3, [r7, #4]
 810bede:	2201      	movs	r2, #1
 810bee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bee4:	687b      	ldr	r3, [r7, #4]
 810bee6:	2202      	movs	r2, #2
 810bee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810beec:	687b      	ldr	r3, [r7, #4]
 810beee:	681b      	ldr	r3, [r3, #0]
 810bef0:	685b      	ldr	r3, [r3, #4]
 810bef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810bef4:	687b      	ldr	r3, [r7, #4]
 810bef6:	681b      	ldr	r3, [r3, #0]
 810bef8:	689b      	ldr	r3, [r3, #8]
 810befa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810befc:	687b      	ldr	r3, [r7, #4]
 810befe:	681b      	ldr	r3, [r3, #0]
 810bf00:	4a30      	ldr	r2, [pc, #192]	@ (810bfc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810bf02:	4293      	cmp	r3, r2
 810bf04:	d004      	beq.n	810bf10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810bf06:	687b      	ldr	r3, [r7, #4]
 810bf08:	681b      	ldr	r3, [r3, #0]
 810bf0a:	4a2f      	ldr	r2, [pc, #188]	@ (810bfc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810bf0c:	4293      	cmp	r3, r2
 810bf0e:	d108      	bne.n	810bf22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810bf10:	68fb      	ldr	r3, [r7, #12]
 810bf12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810bf16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810bf18:	683b      	ldr	r3, [r7, #0]
 810bf1a:	685b      	ldr	r3, [r3, #4]
 810bf1c:	68fa      	ldr	r2, [r7, #12]
 810bf1e:	4313      	orrs	r3, r2
 810bf20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810bf22:	68fb      	ldr	r3, [r7, #12]
 810bf24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bf28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810bf2a:	683b      	ldr	r3, [r7, #0]
 810bf2c:	681b      	ldr	r3, [r3, #0]
 810bf2e:	68fa      	ldr	r2, [r7, #12]
 810bf30:	4313      	orrs	r3, r2
 810bf32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810bf34:	687b      	ldr	r3, [r7, #4]
 810bf36:	681b      	ldr	r3, [r3, #0]
 810bf38:	68fa      	ldr	r2, [r7, #12]
 810bf3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810bf3c:	687b      	ldr	r3, [r7, #4]
 810bf3e:	681b      	ldr	r3, [r3, #0]
 810bf40:	4a20      	ldr	r2, [pc, #128]	@ (810bfc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810bf42:	4293      	cmp	r3, r2
 810bf44:	d022      	beq.n	810bf8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bf46:	687b      	ldr	r3, [r7, #4]
 810bf48:	681b      	ldr	r3, [r3, #0]
 810bf4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bf4e:	d01d      	beq.n	810bf8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bf50:	687b      	ldr	r3, [r7, #4]
 810bf52:	681b      	ldr	r3, [r3, #0]
 810bf54:	4a1d      	ldr	r2, [pc, #116]	@ (810bfcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810bf56:	4293      	cmp	r3, r2
 810bf58:	d018      	beq.n	810bf8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bf5a:	687b      	ldr	r3, [r7, #4]
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	4a1c      	ldr	r2, [pc, #112]	@ (810bfd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810bf60:	4293      	cmp	r3, r2
 810bf62:	d013      	beq.n	810bf8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bf64:	687b      	ldr	r3, [r7, #4]
 810bf66:	681b      	ldr	r3, [r3, #0]
 810bf68:	4a1a      	ldr	r2, [pc, #104]	@ (810bfd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810bf6a:	4293      	cmp	r3, r2
 810bf6c:	d00e      	beq.n	810bf8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bf6e:	687b      	ldr	r3, [r7, #4]
 810bf70:	681b      	ldr	r3, [r3, #0]
 810bf72:	4a15      	ldr	r2, [pc, #84]	@ (810bfc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810bf74:	4293      	cmp	r3, r2
 810bf76:	d009      	beq.n	810bf8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bf78:	687b      	ldr	r3, [r7, #4]
 810bf7a:	681b      	ldr	r3, [r3, #0]
 810bf7c:	4a16      	ldr	r2, [pc, #88]	@ (810bfd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810bf7e:	4293      	cmp	r3, r2
 810bf80:	d004      	beq.n	810bf8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810bf82:	687b      	ldr	r3, [r7, #4]
 810bf84:	681b      	ldr	r3, [r3, #0]
 810bf86:	4a15      	ldr	r2, [pc, #84]	@ (810bfdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810bf88:	4293      	cmp	r3, r2
 810bf8a:	d10c      	bne.n	810bfa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810bf8c:	68bb      	ldr	r3, [r7, #8]
 810bf8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810bf92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810bf94:	683b      	ldr	r3, [r7, #0]
 810bf96:	689b      	ldr	r3, [r3, #8]
 810bf98:	68ba      	ldr	r2, [r7, #8]
 810bf9a:	4313      	orrs	r3, r2
 810bf9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810bf9e:	687b      	ldr	r3, [r7, #4]
 810bfa0:	681b      	ldr	r3, [r3, #0]
 810bfa2:	68ba      	ldr	r2, [r7, #8]
 810bfa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810bfa6:	687b      	ldr	r3, [r7, #4]
 810bfa8:	2201      	movs	r2, #1
 810bfaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810bfae:	687b      	ldr	r3, [r7, #4]
 810bfb0:	2200      	movs	r2, #0
 810bfb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810bfb6:	2300      	movs	r3, #0
}
 810bfb8:	4618      	mov	r0, r3
 810bfba:	3714      	adds	r7, #20
 810bfbc:	46bd      	mov	sp, r7
 810bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfc2:	4770      	bx	lr
 810bfc4:	40010000 	.word	0x40010000
 810bfc8:	40010400 	.word	0x40010400
 810bfcc:	40000400 	.word	0x40000400
 810bfd0:	40000800 	.word	0x40000800
 810bfd4:	40000c00 	.word	0x40000c00
 810bfd8:	40001800 	.word	0x40001800
 810bfdc:	40014000 	.word	0x40014000

0810bfe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810bfe0:	b480      	push	{r7}
 810bfe2:	b085      	sub	sp, #20
 810bfe4:	af00      	add	r7, sp, #0
 810bfe6:	6078      	str	r0, [r7, #4]
 810bfe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810bfea:	2300      	movs	r3, #0
 810bfec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810bfee:	687b      	ldr	r3, [r7, #4]
 810bff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810bff4:	2b01      	cmp	r3, #1
 810bff6:	d101      	bne.n	810bffc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810bff8:	2302      	movs	r3, #2
 810bffa:	e065      	b.n	810c0c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810bffc:	687b      	ldr	r3, [r7, #4]
 810bffe:	2201      	movs	r2, #1
 810c000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810c004:	68fb      	ldr	r3, [r7, #12]
 810c006:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810c00a:	683b      	ldr	r3, [r7, #0]
 810c00c:	68db      	ldr	r3, [r3, #12]
 810c00e:	4313      	orrs	r3, r2
 810c010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810c012:	68fb      	ldr	r3, [r7, #12]
 810c014:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810c018:	683b      	ldr	r3, [r7, #0]
 810c01a:	689b      	ldr	r3, [r3, #8]
 810c01c:	4313      	orrs	r3, r2
 810c01e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810c020:	68fb      	ldr	r3, [r7, #12]
 810c022:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810c026:	683b      	ldr	r3, [r7, #0]
 810c028:	685b      	ldr	r3, [r3, #4]
 810c02a:	4313      	orrs	r3, r2
 810c02c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810c02e:	68fb      	ldr	r3, [r7, #12]
 810c030:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810c034:	683b      	ldr	r3, [r7, #0]
 810c036:	681b      	ldr	r3, [r3, #0]
 810c038:	4313      	orrs	r3, r2
 810c03a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810c03c:	68fb      	ldr	r3, [r7, #12]
 810c03e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810c042:	683b      	ldr	r3, [r7, #0]
 810c044:	691b      	ldr	r3, [r3, #16]
 810c046:	4313      	orrs	r3, r2
 810c048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810c04a:	68fb      	ldr	r3, [r7, #12]
 810c04c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810c050:	683b      	ldr	r3, [r7, #0]
 810c052:	695b      	ldr	r3, [r3, #20]
 810c054:	4313      	orrs	r3, r2
 810c056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810c058:	68fb      	ldr	r3, [r7, #12]
 810c05a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810c05e:	683b      	ldr	r3, [r7, #0]
 810c060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c062:	4313      	orrs	r3, r2
 810c064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810c066:	68fb      	ldr	r3, [r7, #12]
 810c068:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810c06c:	683b      	ldr	r3, [r7, #0]
 810c06e:	699b      	ldr	r3, [r3, #24]
 810c070:	041b      	lsls	r3, r3, #16
 810c072:	4313      	orrs	r3, r2
 810c074:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810c076:	687b      	ldr	r3, [r7, #4]
 810c078:	681b      	ldr	r3, [r3, #0]
 810c07a:	4a16      	ldr	r2, [pc, #88]	@ (810c0d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810c07c:	4293      	cmp	r3, r2
 810c07e:	d004      	beq.n	810c08a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810c080:	687b      	ldr	r3, [r7, #4]
 810c082:	681b      	ldr	r3, [r3, #0]
 810c084:	4a14      	ldr	r2, [pc, #80]	@ (810c0d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810c086:	4293      	cmp	r3, r2
 810c088:	d115      	bne.n	810c0b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810c08a:	68fb      	ldr	r3, [r7, #12]
 810c08c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810c090:	683b      	ldr	r3, [r7, #0]
 810c092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c094:	051b      	lsls	r3, r3, #20
 810c096:	4313      	orrs	r3, r2
 810c098:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810c09a:	68fb      	ldr	r3, [r7, #12]
 810c09c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810c0a0:	683b      	ldr	r3, [r7, #0]
 810c0a2:	69db      	ldr	r3, [r3, #28]
 810c0a4:	4313      	orrs	r3, r2
 810c0a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810c0a8:	68fb      	ldr	r3, [r7, #12]
 810c0aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810c0ae:	683b      	ldr	r3, [r7, #0]
 810c0b0:	6a1b      	ldr	r3, [r3, #32]
 810c0b2:	4313      	orrs	r3, r2
 810c0b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810c0b6:	687b      	ldr	r3, [r7, #4]
 810c0b8:	681b      	ldr	r3, [r3, #0]
 810c0ba:	68fa      	ldr	r2, [r7, #12]
 810c0bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810c0be:	687b      	ldr	r3, [r7, #4]
 810c0c0:	2200      	movs	r2, #0
 810c0c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810c0c6:	2300      	movs	r3, #0
}
 810c0c8:	4618      	mov	r0, r3
 810c0ca:	3714      	adds	r7, #20
 810c0cc:	46bd      	mov	sp, r7
 810c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0d2:	4770      	bx	lr
 810c0d4:	40010000 	.word	0x40010000
 810c0d8:	40010400 	.word	0x40010400

0810c0dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810c0dc:	b480      	push	{r7}
 810c0de:	b083      	sub	sp, #12
 810c0e0:	af00      	add	r7, sp, #0
 810c0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810c0e4:	bf00      	nop
 810c0e6:	370c      	adds	r7, #12
 810c0e8:	46bd      	mov	sp, r7
 810c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0ee:	4770      	bx	lr

0810c0f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810c0f0:	b480      	push	{r7}
 810c0f2:	b083      	sub	sp, #12
 810c0f4:	af00      	add	r7, sp, #0
 810c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810c0f8:	bf00      	nop
 810c0fa:	370c      	adds	r7, #12
 810c0fc:	46bd      	mov	sp, r7
 810c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c102:	4770      	bx	lr

0810c104 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810c104:	b480      	push	{r7}
 810c106:	b083      	sub	sp, #12
 810c108:	af00      	add	r7, sp, #0
 810c10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810c10c:	bf00      	nop
 810c10e:	370c      	adds	r7, #12
 810c110:	46bd      	mov	sp, r7
 810c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c116:	4770      	bx	lr

0810c118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810c118:	b580      	push	{r7, lr}
 810c11a:	b082      	sub	sp, #8
 810c11c:	af00      	add	r7, sp, #0
 810c11e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810c120:	687b      	ldr	r3, [r7, #4]
 810c122:	2b00      	cmp	r3, #0
 810c124:	d101      	bne.n	810c12a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810c126:	2301      	movs	r3, #1
 810c128:	e042      	b.n	810c1b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810c12a:	687b      	ldr	r3, [r7, #4]
 810c12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c130:	2b00      	cmp	r3, #0
 810c132:	d106      	bne.n	810c142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810c134:	687b      	ldr	r3, [r7, #4]
 810c136:	2200      	movs	r2, #0
 810c138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810c13c:	6878      	ldr	r0, [r7, #4]
 810c13e:	f7f7 fe35 	bl	8103dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810c142:	687b      	ldr	r3, [r7, #4]
 810c144:	2224      	movs	r2, #36	@ 0x24
 810c146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810c14a:	687b      	ldr	r3, [r7, #4]
 810c14c:	681b      	ldr	r3, [r3, #0]
 810c14e:	681a      	ldr	r2, [r3, #0]
 810c150:	687b      	ldr	r3, [r7, #4]
 810c152:	681b      	ldr	r3, [r3, #0]
 810c154:	f022 0201 	bic.w	r2, r2, #1
 810c158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810c15a:	687b      	ldr	r3, [r7, #4]
 810c15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c15e:	2b00      	cmp	r3, #0
 810c160:	d002      	beq.n	810c168 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810c162:	6878      	ldr	r0, [r7, #4]
 810c164:	f001 fb0c 	bl	810d780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810c168:	6878      	ldr	r0, [r7, #4]
 810c16a:	f000 fda1 	bl	810ccb0 <UART_SetConfig>
 810c16e:	4603      	mov	r3, r0
 810c170:	2b01      	cmp	r3, #1
 810c172:	d101      	bne.n	810c178 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810c174:	2301      	movs	r3, #1
 810c176:	e01b      	b.n	810c1b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810c178:	687b      	ldr	r3, [r7, #4]
 810c17a:	681b      	ldr	r3, [r3, #0]
 810c17c:	685a      	ldr	r2, [r3, #4]
 810c17e:	687b      	ldr	r3, [r7, #4]
 810c180:	681b      	ldr	r3, [r3, #0]
 810c182:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810c186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810c188:	687b      	ldr	r3, [r7, #4]
 810c18a:	681b      	ldr	r3, [r3, #0]
 810c18c:	689a      	ldr	r2, [r3, #8]
 810c18e:	687b      	ldr	r3, [r7, #4]
 810c190:	681b      	ldr	r3, [r3, #0]
 810c192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810c196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810c198:	687b      	ldr	r3, [r7, #4]
 810c19a:	681b      	ldr	r3, [r3, #0]
 810c19c:	681a      	ldr	r2, [r3, #0]
 810c19e:	687b      	ldr	r3, [r7, #4]
 810c1a0:	681b      	ldr	r3, [r3, #0]
 810c1a2:	f042 0201 	orr.w	r2, r2, #1
 810c1a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810c1a8:	6878      	ldr	r0, [r7, #4]
 810c1aa:	f001 fb8b 	bl	810d8c4 <UART_CheckIdleState>
 810c1ae:	4603      	mov	r3, r0
}
 810c1b0:	4618      	mov	r0, r3
 810c1b2:	3708      	adds	r7, #8
 810c1b4:	46bd      	mov	sp, r7
 810c1b6:	bd80      	pop	{r7, pc}

0810c1b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810c1b8:	b580      	push	{r7, lr}
 810c1ba:	b08a      	sub	sp, #40	@ 0x28
 810c1bc:	af02      	add	r7, sp, #8
 810c1be:	60f8      	str	r0, [r7, #12]
 810c1c0:	60b9      	str	r1, [r7, #8]
 810c1c2:	603b      	str	r3, [r7, #0]
 810c1c4:	4613      	mov	r3, r2
 810c1c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810c1c8:	68fb      	ldr	r3, [r7, #12]
 810c1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c1ce:	2b20      	cmp	r3, #32
 810c1d0:	d17b      	bne.n	810c2ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810c1d2:	68bb      	ldr	r3, [r7, #8]
 810c1d4:	2b00      	cmp	r3, #0
 810c1d6:	d002      	beq.n	810c1de <HAL_UART_Transmit+0x26>
 810c1d8:	88fb      	ldrh	r3, [r7, #6]
 810c1da:	2b00      	cmp	r3, #0
 810c1dc:	d101      	bne.n	810c1e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810c1de:	2301      	movs	r3, #1
 810c1e0:	e074      	b.n	810c2cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c1e2:	68fb      	ldr	r3, [r7, #12]
 810c1e4:	2200      	movs	r2, #0
 810c1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810c1ea:	68fb      	ldr	r3, [r7, #12]
 810c1ec:	2221      	movs	r2, #33	@ 0x21
 810c1ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810c1f2:	f7f8 f895 	bl	8104320 <HAL_GetTick>
 810c1f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810c1f8:	68fb      	ldr	r3, [r7, #12]
 810c1fa:	88fa      	ldrh	r2, [r7, #6]
 810c1fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810c200:	68fb      	ldr	r3, [r7, #12]
 810c202:	88fa      	ldrh	r2, [r7, #6]
 810c204:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810c208:	68fb      	ldr	r3, [r7, #12]
 810c20a:	689b      	ldr	r3, [r3, #8]
 810c20c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c210:	d108      	bne.n	810c224 <HAL_UART_Transmit+0x6c>
 810c212:	68fb      	ldr	r3, [r7, #12]
 810c214:	691b      	ldr	r3, [r3, #16]
 810c216:	2b00      	cmp	r3, #0
 810c218:	d104      	bne.n	810c224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810c21a:	2300      	movs	r3, #0
 810c21c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810c21e:	68bb      	ldr	r3, [r7, #8]
 810c220:	61bb      	str	r3, [r7, #24]
 810c222:	e003      	b.n	810c22c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810c224:	68bb      	ldr	r3, [r7, #8]
 810c226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810c228:	2300      	movs	r3, #0
 810c22a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810c22c:	e030      	b.n	810c290 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810c22e:	683b      	ldr	r3, [r7, #0]
 810c230:	9300      	str	r3, [sp, #0]
 810c232:	697b      	ldr	r3, [r7, #20]
 810c234:	2200      	movs	r2, #0
 810c236:	2180      	movs	r1, #128	@ 0x80
 810c238:	68f8      	ldr	r0, [r7, #12]
 810c23a:	f001 fbed 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810c23e:	4603      	mov	r3, r0
 810c240:	2b00      	cmp	r3, #0
 810c242:	d005      	beq.n	810c250 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810c244:	68fb      	ldr	r3, [r7, #12]
 810c246:	2220      	movs	r2, #32
 810c248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810c24c:	2303      	movs	r3, #3
 810c24e:	e03d      	b.n	810c2cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810c250:	69fb      	ldr	r3, [r7, #28]
 810c252:	2b00      	cmp	r3, #0
 810c254:	d10b      	bne.n	810c26e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810c256:	69bb      	ldr	r3, [r7, #24]
 810c258:	881b      	ldrh	r3, [r3, #0]
 810c25a:	461a      	mov	r2, r3
 810c25c:	68fb      	ldr	r3, [r7, #12]
 810c25e:	681b      	ldr	r3, [r3, #0]
 810c260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810c264:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810c266:	69bb      	ldr	r3, [r7, #24]
 810c268:	3302      	adds	r3, #2
 810c26a:	61bb      	str	r3, [r7, #24]
 810c26c:	e007      	b.n	810c27e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810c26e:	69fb      	ldr	r3, [r7, #28]
 810c270:	781a      	ldrb	r2, [r3, #0]
 810c272:	68fb      	ldr	r3, [r7, #12]
 810c274:	681b      	ldr	r3, [r3, #0]
 810c276:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810c278:	69fb      	ldr	r3, [r7, #28]
 810c27a:	3301      	adds	r3, #1
 810c27c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810c27e:	68fb      	ldr	r3, [r7, #12]
 810c280:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810c284:	b29b      	uxth	r3, r3
 810c286:	3b01      	subs	r3, #1
 810c288:	b29a      	uxth	r2, r3
 810c28a:	68fb      	ldr	r3, [r7, #12]
 810c28c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810c290:	68fb      	ldr	r3, [r7, #12]
 810c292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810c296:	b29b      	uxth	r3, r3
 810c298:	2b00      	cmp	r3, #0
 810c29a:	d1c8      	bne.n	810c22e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810c29c:	683b      	ldr	r3, [r7, #0]
 810c29e:	9300      	str	r3, [sp, #0]
 810c2a0:	697b      	ldr	r3, [r7, #20]
 810c2a2:	2200      	movs	r2, #0
 810c2a4:	2140      	movs	r1, #64	@ 0x40
 810c2a6:	68f8      	ldr	r0, [r7, #12]
 810c2a8:	f001 fbb6 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810c2ac:	4603      	mov	r3, r0
 810c2ae:	2b00      	cmp	r3, #0
 810c2b0:	d005      	beq.n	810c2be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810c2b2:	68fb      	ldr	r3, [r7, #12]
 810c2b4:	2220      	movs	r2, #32
 810c2b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810c2ba:	2303      	movs	r3, #3
 810c2bc:	e006      	b.n	810c2cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810c2be:	68fb      	ldr	r3, [r7, #12]
 810c2c0:	2220      	movs	r2, #32
 810c2c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810c2c6:	2300      	movs	r3, #0
 810c2c8:	e000      	b.n	810c2cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810c2ca:	2302      	movs	r3, #2
  }
}
 810c2cc:	4618      	mov	r0, r3
 810c2ce:	3720      	adds	r7, #32
 810c2d0:	46bd      	mov	sp, r7
 810c2d2:	bd80      	pop	{r7, pc}

0810c2d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810c2d4:	b580      	push	{r7, lr}
 810c2d6:	b08a      	sub	sp, #40	@ 0x28
 810c2d8:	af02      	add	r7, sp, #8
 810c2da:	60f8      	str	r0, [r7, #12]
 810c2dc:	60b9      	str	r1, [r7, #8]
 810c2de:	603b      	str	r3, [r7, #0]
 810c2e0:	4613      	mov	r3, r2
 810c2e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810c2e4:	68fb      	ldr	r3, [r7, #12]
 810c2e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810c2ea:	2b20      	cmp	r3, #32
 810c2ec:	f040 80b5 	bne.w	810c45a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810c2f0:	68bb      	ldr	r3, [r7, #8]
 810c2f2:	2b00      	cmp	r3, #0
 810c2f4:	d002      	beq.n	810c2fc <HAL_UART_Receive+0x28>
 810c2f6:	88fb      	ldrh	r3, [r7, #6]
 810c2f8:	2b00      	cmp	r3, #0
 810c2fa:	d101      	bne.n	810c300 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810c2fc:	2301      	movs	r3, #1
 810c2fe:	e0ad      	b.n	810c45c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c300:	68fb      	ldr	r3, [r7, #12]
 810c302:	2200      	movs	r2, #0
 810c304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810c308:	68fb      	ldr	r3, [r7, #12]
 810c30a:	2222      	movs	r2, #34	@ 0x22
 810c30c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c310:	68fb      	ldr	r3, [r7, #12]
 810c312:	2200      	movs	r2, #0
 810c314:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810c316:	f7f8 f803 	bl	8104320 <HAL_GetTick>
 810c31a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810c31c:	68fb      	ldr	r3, [r7, #12]
 810c31e:	88fa      	ldrh	r2, [r7, #6]
 810c320:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810c324:	68fb      	ldr	r3, [r7, #12]
 810c326:	88fa      	ldrh	r2, [r7, #6]
 810c328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810c32c:	68fb      	ldr	r3, [r7, #12]
 810c32e:	689b      	ldr	r3, [r3, #8]
 810c330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c334:	d10e      	bne.n	810c354 <HAL_UART_Receive+0x80>
 810c336:	68fb      	ldr	r3, [r7, #12]
 810c338:	691b      	ldr	r3, [r3, #16]
 810c33a:	2b00      	cmp	r3, #0
 810c33c:	d105      	bne.n	810c34a <HAL_UART_Receive+0x76>
 810c33e:	68fb      	ldr	r3, [r7, #12]
 810c340:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810c344:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c348:	e02d      	b.n	810c3a6 <HAL_UART_Receive+0xd2>
 810c34a:	68fb      	ldr	r3, [r7, #12]
 810c34c:	22ff      	movs	r2, #255	@ 0xff
 810c34e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c352:	e028      	b.n	810c3a6 <HAL_UART_Receive+0xd2>
 810c354:	68fb      	ldr	r3, [r7, #12]
 810c356:	689b      	ldr	r3, [r3, #8]
 810c358:	2b00      	cmp	r3, #0
 810c35a:	d10d      	bne.n	810c378 <HAL_UART_Receive+0xa4>
 810c35c:	68fb      	ldr	r3, [r7, #12]
 810c35e:	691b      	ldr	r3, [r3, #16]
 810c360:	2b00      	cmp	r3, #0
 810c362:	d104      	bne.n	810c36e <HAL_UART_Receive+0x9a>
 810c364:	68fb      	ldr	r3, [r7, #12]
 810c366:	22ff      	movs	r2, #255	@ 0xff
 810c368:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c36c:	e01b      	b.n	810c3a6 <HAL_UART_Receive+0xd2>
 810c36e:	68fb      	ldr	r3, [r7, #12]
 810c370:	227f      	movs	r2, #127	@ 0x7f
 810c372:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c376:	e016      	b.n	810c3a6 <HAL_UART_Receive+0xd2>
 810c378:	68fb      	ldr	r3, [r7, #12]
 810c37a:	689b      	ldr	r3, [r3, #8]
 810c37c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c380:	d10d      	bne.n	810c39e <HAL_UART_Receive+0xca>
 810c382:	68fb      	ldr	r3, [r7, #12]
 810c384:	691b      	ldr	r3, [r3, #16]
 810c386:	2b00      	cmp	r3, #0
 810c388:	d104      	bne.n	810c394 <HAL_UART_Receive+0xc0>
 810c38a:	68fb      	ldr	r3, [r7, #12]
 810c38c:	227f      	movs	r2, #127	@ 0x7f
 810c38e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c392:	e008      	b.n	810c3a6 <HAL_UART_Receive+0xd2>
 810c394:	68fb      	ldr	r3, [r7, #12]
 810c396:	223f      	movs	r2, #63	@ 0x3f
 810c398:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c39c:	e003      	b.n	810c3a6 <HAL_UART_Receive+0xd2>
 810c39e:	68fb      	ldr	r3, [r7, #12]
 810c3a0:	2200      	movs	r2, #0
 810c3a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810c3a6:	68fb      	ldr	r3, [r7, #12]
 810c3a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810c3ac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810c3ae:	68fb      	ldr	r3, [r7, #12]
 810c3b0:	689b      	ldr	r3, [r3, #8]
 810c3b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c3b6:	d108      	bne.n	810c3ca <HAL_UART_Receive+0xf6>
 810c3b8:	68fb      	ldr	r3, [r7, #12]
 810c3ba:	691b      	ldr	r3, [r3, #16]
 810c3bc:	2b00      	cmp	r3, #0
 810c3be:	d104      	bne.n	810c3ca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810c3c0:	2300      	movs	r3, #0
 810c3c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810c3c4:	68bb      	ldr	r3, [r7, #8]
 810c3c6:	61bb      	str	r3, [r7, #24]
 810c3c8:	e003      	b.n	810c3d2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810c3ca:	68bb      	ldr	r3, [r7, #8]
 810c3cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810c3ce:	2300      	movs	r3, #0
 810c3d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810c3d2:	e036      	b.n	810c442 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810c3d4:	683b      	ldr	r3, [r7, #0]
 810c3d6:	9300      	str	r3, [sp, #0]
 810c3d8:	697b      	ldr	r3, [r7, #20]
 810c3da:	2200      	movs	r2, #0
 810c3dc:	2120      	movs	r1, #32
 810c3de:	68f8      	ldr	r0, [r7, #12]
 810c3e0:	f001 fb1a 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810c3e4:	4603      	mov	r3, r0
 810c3e6:	2b00      	cmp	r3, #0
 810c3e8:	d005      	beq.n	810c3f6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810c3ea:	68fb      	ldr	r3, [r7, #12]
 810c3ec:	2220      	movs	r2, #32
 810c3ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810c3f2:	2303      	movs	r3, #3
 810c3f4:	e032      	b.n	810c45c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810c3f6:	69fb      	ldr	r3, [r7, #28]
 810c3f8:	2b00      	cmp	r3, #0
 810c3fa:	d10c      	bne.n	810c416 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810c3fc:	68fb      	ldr	r3, [r7, #12]
 810c3fe:	681b      	ldr	r3, [r3, #0]
 810c400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c402:	b29a      	uxth	r2, r3
 810c404:	8a7b      	ldrh	r3, [r7, #18]
 810c406:	4013      	ands	r3, r2
 810c408:	b29a      	uxth	r2, r3
 810c40a:	69bb      	ldr	r3, [r7, #24]
 810c40c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810c40e:	69bb      	ldr	r3, [r7, #24]
 810c410:	3302      	adds	r3, #2
 810c412:	61bb      	str	r3, [r7, #24]
 810c414:	e00c      	b.n	810c430 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810c416:	68fb      	ldr	r3, [r7, #12]
 810c418:	681b      	ldr	r3, [r3, #0]
 810c41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c41c:	b2da      	uxtb	r2, r3
 810c41e:	8a7b      	ldrh	r3, [r7, #18]
 810c420:	b2db      	uxtb	r3, r3
 810c422:	4013      	ands	r3, r2
 810c424:	b2da      	uxtb	r2, r3
 810c426:	69fb      	ldr	r3, [r7, #28]
 810c428:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810c42a:	69fb      	ldr	r3, [r7, #28]
 810c42c:	3301      	adds	r3, #1
 810c42e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810c430:	68fb      	ldr	r3, [r7, #12]
 810c432:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810c436:	b29b      	uxth	r3, r3
 810c438:	3b01      	subs	r3, #1
 810c43a:	b29a      	uxth	r2, r3
 810c43c:	68fb      	ldr	r3, [r7, #12]
 810c43e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810c442:	68fb      	ldr	r3, [r7, #12]
 810c444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810c448:	b29b      	uxth	r3, r3
 810c44a:	2b00      	cmp	r3, #0
 810c44c:	d1c2      	bne.n	810c3d4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810c44e:	68fb      	ldr	r3, [r7, #12]
 810c450:	2220      	movs	r2, #32
 810c452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810c456:	2300      	movs	r3, #0
 810c458:	e000      	b.n	810c45c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810c45a:	2302      	movs	r3, #2
  }
}
 810c45c:	4618      	mov	r0, r3
 810c45e:	3720      	adds	r7, #32
 810c460:	46bd      	mov	sp, r7
 810c462:	bd80      	pop	{r7, pc}

0810c464 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810c464:	b580      	push	{r7, lr}
 810c466:	b08a      	sub	sp, #40	@ 0x28
 810c468:	af00      	add	r7, sp, #0
 810c46a:	60f8      	str	r0, [r7, #12]
 810c46c:	60b9      	str	r1, [r7, #8]
 810c46e:	4613      	mov	r3, r2
 810c470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810c472:	68fb      	ldr	r3, [r7, #12]
 810c474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810c478:	2b20      	cmp	r3, #32
 810c47a:	d137      	bne.n	810c4ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 810c47c:	68bb      	ldr	r3, [r7, #8]
 810c47e:	2b00      	cmp	r3, #0
 810c480:	d002      	beq.n	810c488 <HAL_UART_Receive_IT+0x24>
 810c482:	88fb      	ldrh	r3, [r7, #6]
 810c484:	2b00      	cmp	r3, #0
 810c486:	d101      	bne.n	810c48c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 810c488:	2301      	movs	r3, #1
 810c48a:	e030      	b.n	810c4ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c48c:	68fb      	ldr	r3, [r7, #12]
 810c48e:	2200      	movs	r2, #0
 810c490:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810c492:	68fb      	ldr	r3, [r7, #12]
 810c494:	681b      	ldr	r3, [r3, #0]
 810c496:	4a18      	ldr	r2, [pc, #96]	@ (810c4f8 <HAL_UART_Receive_IT+0x94>)
 810c498:	4293      	cmp	r3, r2
 810c49a:	d01f      	beq.n	810c4dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810c49c:	68fb      	ldr	r3, [r7, #12]
 810c49e:	681b      	ldr	r3, [r3, #0]
 810c4a0:	685b      	ldr	r3, [r3, #4]
 810c4a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810c4a6:	2b00      	cmp	r3, #0
 810c4a8:	d018      	beq.n	810c4dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810c4aa:	68fb      	ldr	r3, [r7, #12]
 810c4ac:	681b      	ldr	r3, [r3, #0]
 810c4ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c4b0:	697b      	ldr	r3, [r7, #20]
 810c4b2:	e853 3f00 	ldrex	r3, [r3]
 810c4b6:	613b      	str	r3, [r7, #16]
   return(result);
 810c4b8:	693b      	ldr	r3, [r7, #16]
 810c4ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810c4be:	627b      	str	r3, [r7, #36]	@ 0x24
 810c4c0:	68fb      	ldr	r3, [r7, #12]
 810c4c2:	681b      	ldr	r3, [r3, #0]
 810c4c4:	461a      	mov	r2, r3
 810c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c4c8:	623b      	str	r3, [r7, #32]
 810c4ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c4cc:	69f9      	ldr	r1, [r7, #28]
 810c4ce:	6a3a      	ldr	r2, [r7, #32]
 810c4d0:	e841 2300 	strex	r3, r2, [r1]
 810c4d4:	61bb      	str	r3, [r7, #24]
   return(result);
 810c4d6:	69bb      	ldr	r3, [r7, #24]
 810c4d8:	2b00      	cmp	r3, #0
 810c4da:	d1e6      	bne.n	810c4aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 810c4dc:	88fb      	ldrh	r3, [r7, #6]
 810c4de:	461a      	mov	r2, r3
 810c4e0:	68b9      	ldr	r1, [r7, #8]
 810c4e2:	68f8      	ldr	r0, [r7, #12]
 810c4e4:	f001 fb06 	bl	810daf4 <UART_Start_Receive_IT>
 810c4e8:	4603      	mov	r3, r0
 810c4ea:	e000      	b.n	810c4ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810c4ec:	2302      	movs	r3, #2
  }
}
 810c4ee:	4618      	mov	r0, r3
 810c4f0:	3728      	adds	r7, #40	@ 0x28
 810c4f2:	46bd      	mov	sp, r7
 810c4f4:	bd80      	pop	{r7, pc}
 810c4f6:	bf00      	nop
 810c4f8:	58000c00 	.word	0x58000c00

0810c4fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810c4fc:	b580      	push	{r7, lr}
 810c4fe:	b0ba      	sub	sp, #232	@ 0xe8
 810c500:	af00      	add	r7, sp, #0
 810c502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810c504:	687b      	ldr	r3, [r7, #4]
 810c506:	681b      	ldr	r3, [r3, #0]
 810c508:	69db      	ldr	r3, [r3, #28]
 810c50a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810c50e:	687b      	ldr	r3, [r7, #4]
 810c510:	681b      	ldr	r3, [r3, #0]
 810c512:	681b      	ldr	r3, [r3, #0]
 810c514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810c518:	687b      	ldr	r3, [r7, #4]
 810c51a:	681b      	ldr	r3, [r3, #0]
 810c51c:	689b      	ldr	r3, [r3, #8]
 810c51e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810c522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 810c526:	f640 030f 	movw	r3, #2063	@ 0x80f
 810c52a:	4013      	ands	r3, r2
 810c52c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810c530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810c534:	2b00      	cmp	r3, #0
 810c536:	d11b      	bne.n	810c570 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c53c:	f003 0320 	and.w	r3, r3, #32
 810c540:	2b00      	cmp	r3, #0
 810c542:	d015      	beq.n	810c570 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c548:	f003 0320 	and.w	r3, r3, #32
 810c54c:	2b00      	cmp	r3, #0
 810c54e:	d105      	bne.n	810c55c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c558:	2b00      	cmp	r3, #0
 810c55a:	d009      	beq.n	810c570 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 810c55c:	687b      	ldr	r3, [r7, #4]
 810c55e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c560:	2b00      	cmp	r3, #0
 810c562:	f000 8379 	beq.w	810cc58 <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 810c566:	687b      	ldr	r3, [r7, #4]
 810c568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c56a:	6878      	ldr	r0, [r7, #4]
 810c56c:	4798      	blx	r3
      }
      return;
 810c56e:	e373      	b.n	810cc58 <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810c570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810c574:	2b00      	cmp	r3, #0
 810c576:	f000 8123 	beq.w	810c7c0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810c57a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810c57e:	4b8d      	ldr	r3, [pc, #564]	@ (810c7b4 <HAL_UART_IRQHandler+0x2b8>)
 810c580:	4013      	ands	r3, r2
 810c582:	2b00      	cmp	r3, #0
 810c584:	d106      	bne.n	810c594 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810c586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 810c58a:	4b8b      	ldr	r3, [pc, #556]	@ (810c7b8 <HAL_UART_IRQHandler+0x2bc>)
 810c58c:	4013      	ands	r3, r2
 810c58e:	2b00      	cmp	r3, #0
 810c590:	f000 8116 	beq.w	810c7c0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810c594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c598:	f003 0301 	and.w	r3, r3, #1
 810c59c:	2b00      	cmp	r3, #0
 810c59e:	d011      	beq.n	810c5c4 <HAL_UART_IRQHandler+0xc8>
 810c5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c5a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810c5a8:	2b00      	cmp	r3, #0
 810c5aa:	d00b      	beq.n	810c5c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810c5ac:	687b      	ldr	r3, [r7, #4]
 810c5ae:	681b      	ldr	r3, [r3, #0]
 810c5b0:	2201      	movs	r2, #1
 810c5b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810c5b4:	687b      	ldr	r3, [r7, #4]
 810c5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c5ba:	f043 0201 	orr.w	r2, r3, #1
 810c5be:	687b      	ldr	r3, [r7, #4]
 810c5c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c5c8:	f003 0302 	and.w	r3, r3, #2
 810c5cc:	2b00      	cmp	r3, #0
 810c5ce:	d011      	beq.n	810c5f4 <HAL_UART_IRQHandler+0xf8>
 810c5d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c5d4:	f003 0301 	and.w	r3, r3, #1
 810c5d8:	2b00      	cmp	r3, #0
 810c5da:	d00b      	beq.n	810c5f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810c5dc:	687b      	ldr	r3, [r7, #4]
 810c5de:	681b      	ldr	r3, [r3, #0]
 810c5e0:	2202      	movs	r2, #2
 810c5e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810c5e4:	687b      	ldr	r3, [r7, #4]
 810c5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c5ea:	f043 0204 	orr.w	r2, r3, #4
 810c5ee:	687b      	ldr	r3, [r7, #4]
 810c5f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c5f8:	f003 0304 	and.w	r3, r3, #4
 810c5fc:	2b00      	cmp	r3, #0
 810c5fe:	d011      	beq.n	810c624 <HAL_UART_IRQHandler+0x128>
 810c600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c604:	f003 0301 	and.w	r3, r3, #1
 810c608:	2b00      	cmp	r3, #0
 810c60a:	d00b      	beq.n	810c624 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810c60c:	687b      	ldr	r3, [r7, #4]
 810c60e:	681b      	ldr	r3, [r3, #0]
 810c610:	2204      	movs	r2, #4
 810c612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810c614:	687b      	ldr	r3, [r7, #4]
 810c616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c61a:	f043 0202 	orr.w	r2, r3, #2
 810c61e:	687b      	ldr	r3, [r7, #4]
 810c620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810c624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c628:	f003 0308 	and.w	r3, r3, #8
 810c62c:	2b00      	cmp	r3, #0
 810c62e:	d017      	beq.n	810c660 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c634:	f003 0320 	and.w	r3, r3, #32
 810c638:	2b00      	cmp	r3, #0
 810c63a:	d105      	bne.n	810c648 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810c63c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810c640:	4b5c      	ldr	r3, [pc, #368]	@ (810c7b4 <HAL_UART_IRQHandler+0x2b8>)
 810c642:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c644:	2b00      	cmp	r3, #0
 810c646:	d00b      	beq.n	810c660 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810c648:	687b      	ldr	r3, [r7, #4]
 810c64a:	681b      	ldr	r3, [r3, #0]
 810c64c:	2208      	movs	r2, #8
 810c64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810c650:	687b      	ldr	r3, [r7, #4]
 810c652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c656:	f043 0208 	orr.w	r2, r3, #8
 810c65a:	687b      	ldr	r3, [r7, #4]
 810c65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810c660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810c668:	2b00      	cmp	r3, #0
 810c66a:	d012      	beq.n	810c692 <HAL_UART_IRQHandler+0x196>
 810c66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c670:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810c674:	2b00      	cmp	r3, #0
 810c676:	d00c      	beq.n	810c692 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c678:	687b      	ldr	r3, [r7, #4]
 810c67a:	681b      	ldr	r3, [r3, #0]
 810c67c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810c682:	687b      	ldr	r3, [r7, #4]
 810c684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c688:	f043 0220 	orr.w	r2, r3, #32
 810c68c:	687b      	ldr	r3, [r7, #4]
 810c68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810c692:	687b      	ldr	r3, [r7, #4]
 810c694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c698:	2b00      	cmp	r3, #0
 810c69a:	f000 82df 	beq.w	810cc5c <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c6a2:	f003 0320 	and.w	r3, r3, #32
 810c6a6:	2b00      	cmp	r3, #0
 810c6a8:	d013      	beq.n	810c6d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c6ae:	f003 0320 	and.w	r3, r3, #32
 810c6b2:	2b00      	cmp	r3, #0
 810c6b4:	d105      	bne.n	810c6c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c6b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c6ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c6be:	2b00      	cmp	r3, #0
 810c6c0:	d007      	beq.n	810c6d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810c6c2:	687b      	ldr	r3, [r7, #4]
 810c6c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c6c6:	2b00      	cmp	r3, #0
 810c6c8:	d003      	beq.n	810c6d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810c6ca:	687b      	ldr	r3, [r7, #4]
 810c6cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c6ce:	6878      	ldr	r0, [r7, #4]
 810c6d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810c6d2:	687b      	ldr	r3, [r7, #4]
 810c6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c6d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c6dc:	687b      	ldr	r3, [r7, #4]
 810c6de:	681b      	ldr	r3, [r3, #0]
 810c6e0:	689b      	ldr	r3, [r3, #8]
 810c6e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c6e6:	2b40      	cmp	r3, #64	@ 0x40
 810c6e8:	d005      	beq.n	810c6f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810c6ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810c6ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c6f2:	2b00      	cmp	r3, #0
 810c6f4:	d054      	beq.n	810c7a0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810c6f6:	6878      	ldr	r0, [r7, #4]
 810c6f8:	f001 fb1e 	bl	810dd38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c6fc:	687b      	ldr	r3, [r7, #4]
 810c6fe:	681b      	ldr	r3, [r3, #0]
 810c700:	689b      	ldr	r3, [r3, #8]
 810c702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c706:	2b40      	cmp	r3, #64	@ 0x40
 810c708:	d146      	bne.n	810c798 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c70a:	687b      	ldr	r3, [r7, #4]
 810c70c:	681b      	ldr	r3, [r3, #0]
 810c70e:	3308      	adds	r3, #8
 810c710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c714:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810c718:	e853 3f00 	ldrex	r3, [r3]
 810c71c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 810c720:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810c724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810c728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810c72c:	687b      	ldr	r3, [r7, #4]
 810c72e:	681b      	ldr	r3, [r3, #0]
 810c730:	3308      	adds	r3, #8
 810c732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 810c736:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 810c73a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c73e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 810c742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 810c746:	e841 2300 	strex	r3, r2, [r1]
 810c74a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 810c74e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810c752:	2b00      	cmp	r3, #0
 810c754:	d1d9      	bne.n	810c70a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810c756:	687b      	ldr	r3, [r7, #4]
 810c758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c75c:	2b00      	cmp	r3, #0
 810c75e:	d017      	beq.n	810c790 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810c760:	687b      	ldr	r3, [r7, #4]
 810c762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c766:	4a15      	ldr	r2, [pc, #84]	@ (810c7bc <HAL_UART_IRQHandler+0x2c0>)
 810c768:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810c76a:	687b      	ldr	r3, [r7, #4]
 810c76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c770:	4618      	mov	r0, r3
 810c772:	f7f9 ff3b 	bl	81065ec <HAL_DMA_Abort_IT>
 810c776:	4603      	mov	r3, r0
 810c778:	2b00      	cmp	r3, #0
 810c77a:	d019      	beq.n	810c7b0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810c77c:	687b      	ldr	r3, [r7, #4]
 810c77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c784:	687a      	ldr	r2, [r7, #4]
 810c786:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 810c78a:	4610      	mov	r0, r2
 810c78c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c78e:	e00f      	b.n	810c7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810c790:	6878      	ldr	r0, [r7, #4]
 810c792:	f000 fa77 	bl	810cc84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c796:	e00b      	b.n	810c7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810c798:	6878      	ldr	r0, [r7, #4]
 810c79a:	f000 fa73 	bl	810cc84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c79e:	e007      	b.n	810c7b0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810c7a0:	6878      	ldr	r0, [r7, #4]
 810c7a2:	f000 fa6f 	bl	810cc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c7a6:	687b      	ldr	r3, [r7, #4]
 810c7a8:	2200      	movs	r2, #0
 810c7aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810c7ae:	e255      	b.n	810cc5c <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c7b0:	bf00      	nop
    return;
 810c7b2:	e253      	b.n	810cc5c <HAL_UART_IRQHandler+0x760>
 810c7b4:	10000001 	.word	0x10000001
 810c7b8:	04000120 	.word	0x04000120
 810c7bc:	0810de05 	.word	0x0810de05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c7c0:	687b      	ldr	r3, [r7, #4]
 810c7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c7c4:	2b01      	cmp	r3, #1
 810c7c6:	f040 81e9 	bne.w	810cb9c <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810c7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c7ce:	f003 0310 	and.w	r3, r3, #16
 810c7d2:	2b00      	cmp	r3, #0
 810c7d4:	f000 81e2 	beq.w	810cb9c <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810c7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c7dc:	f003 0310 	and.w	r3, r3, #16
 810c7e0:	2b00      	cmp	r3, #0
 810c7e2:	f000 81db 	beq.w	810cb9c <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810c7e6:	687b      	ldr	r3, [r7, #4]
 810c7e8:	681b      	ldr	r3, [r3, #0]
 810c7ea:	2210      	movs	r2, #16
 810c7ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c7ee:	687b      	ldr	r3, [r7, #4]
 810c7f0:	681b      	ldr	r3, [r3, #0]
 810c7f2:	689b      	ldr	r3, [r3, #8]
 810c7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c7f8:	2b40      	cmp	r3, #64	@ 0x40
 810c7fa:	f040 8151 	bne.w	810caa0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810c7fe:	687b      	ldr	r3, [r7, #4]
 810c800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c804:	681b      	ldr	r3, [r3, #0]
 810c806:	4a96      	ldr	r2, [pc, #600]	@ (810ca60 <HAL_UART_IRQHandler+0x564>)
 810c808:	4293      	cmp	r3, r2
 810c80a:	d068      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c80c:	687b      	ldr	r3, [r7, #4]
 810c80e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c812:	681b      	ldr	r3, [r3, #0]
 810c814:	4a93      	ldr	r2, [pc, #588]	@ (810ca64 <HAL_UART_IRQHandler+0x568>)
 810c816:	4293      	cmp	r3, r2
 810c818:	d061      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c81a:	687b      	ldr	r3, [r7, #4]
 810c81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c820:	681b      	ldr	r3, [r3, #0]
 810c822:	4a91      	ldr	r2, [pc, #580]	@ (810ca68 <HAL_UART_IRQHandler+0x56c>)
 810c824:	4293      	cmp	r3, r2
 810c826:	d05a      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c828:	687b      	ldr	r3, [r7, #4]
 810c82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c82e:	681b      	ldr	r3, [r3, #0]
 810c830:	4a8e      	ldr	r2, [pc, #568]	@ (810ca6c <HAL_UART_IRQHandler+0x570>)
 810c832:	4293      	cmp	r3, r2
 810c834:	d053      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c836:	687b      	ldr	r3, [r7, #4]
 810c838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c83c:	681b      	ldr	r3, [r3, #0]
 810c83e:	4a8c      	ldr	r2, [pc, #560]	@ (810ca70 <HAL_UART_IRQHandler+0x574>)
 810c840:	4293      	cmp	r3, r2
 810c842:	d04c      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c844:	687b      	ldr	r3, [r7, #4]
 810c846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c84a:	681b      	ldr	r3, [r3, #0]
 810c84c:	4a89      	ldr	r2, [pc, #548]	@ (810ca74 <HAL_UART_IRQHandler+0x578>)
 810c84e:	4293      	cmp	r3, r2
 810c850:	d045      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c852:	687b      	ldr	r3, [r7, #4]
 810c854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c858:	681b      	ldr	r3, [r3, #0]
 810c85a:	4a87      	ldr	r2, [pc, #540]	@ (810ca78 <HAL_UART_IRQHandler+0x57c>)
 810c85c:	4293      	cmp	r3, r2
 810c85e:	d03e      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c860:	687b      	ldr	r3, [r7, #4]
 810c862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c866:	681b      	ldr	r3, [r3, #0]
 810c868:	4a84      	ldr	r2, [pc, #528]	@ (810ca7c <HAL_UART_IRQHandler+0x580>)
 810c86a:	4293      	cmp	r3, r2
 810c86c:	d037      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c86e:	687b      	ldr	r3, [r7, #4]
 810c870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c874:	681b      	ldr	r3, [r3, #0]
 810c876:	4a82      	ldr	r2, [pc, #520]	@ (810ca80 <HAL_UART_IRQHandler+0x584>)
 810c878:	4293      	cmp	r3, r2
 810c87a:	d030      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c87c:	687b      	ldr	r3, [r7, #4]
 810c87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c882:	681b      	ldr	r3, [r3, #0]
 810c884:	4a7f      	ldr	r2, [pc, #508]	@ (810ca84 <HAL_UART_IRQHandler+0x588>)
 810c886:	4293      	cmp	r3, r2
 810c888:	d029      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c88a:	687b      	ldr	r3, [r7, #4]
 810c88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c890:	681b      	ldr	r3, [r3, #0]
 810c892:	4a7d      	ldr	r2, [pc, #500]	@ (810ca88 <HAL_UART_IRQHandler+0x58c>)
 810c894:	4293      	cmp	r3, r2
 810c896:	d022      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c898:	687b      	ldr	r3, [r7, #4]
 810c89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c89e:	681b      	ldr	r3, [r3, #0]
 810c8a0:	4a7a      	ldr	r2, [pc, #488]	@ (810ca8c <HAL_UART_IRQHandler+0x590>)
 810c8a2:	4293      	cmp	r3, r2
 810c8a4:	d01b      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c8a6:	687b      	ldr	r3, [r7, #4]
 810c8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8ac:	681b      	ldr	r3, [r3, #0]
 810c8ae:	4a78      	ldr	r2, [pc, #480]	@ (810ca90 <HAL_UART_IRQHandler+0x594>)
 810c8b0:	4293      	cmp	r3, r2
 810c8b2:	d014      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c8b4:	687b      	ldr	r3, [r7, #4]
 810c8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8ba:	681b      	ldr	r3, [r3, #0]
 810c8bc:	4a75      	ldr	r2, [pc, #468]	@ (810ca94 <HAL_UART_IRQHandler+0x598>)
 810c8be:	4293      	cmp	r3, r2
 810c8c0:	d00d      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c8c2:	687b      	ldr	r3, [r7, #4]
 810c8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8c8:	681b      	ldr	r3, [r3, #0]
 810c8ca:	4a73      	ldr	r2, [pc, #460]	@ (810ca98 <HAL_UART_IRQHandler+0x59c>)
 810c8cc:	4293      	cmp	r3, r2
 810c8ce:	d006      	beq.n	810c8de <HAL_UART_IRQHandler+0x3e2>
 810c8d0:	687b      	ldr	r3, [r7, #4]
 810c8d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8d6:	681b      	ldr	r3, [r3, #0]
 810c8d8:	4a70      	ldr	r2, [pc, #448]	@ (810ca9c <HAL_UART_IRQHandler+0x5a0>)
 810c8da:	4293      	cmp	r3, r2
 810c8dc:	d106      	bne.n	810c8ec <HAL_UART_IRQHandler+0x3f0>
 810c8de:	687b      	ldr	r3, [r7, #4]
 810c8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8e4:	681b      	ldr	r3, [r3, #0]
 810c8e6:	685b      	ldr	r3, [r3, #4]
 810c8e8:	b29b      	uxth	r3, r3
 810c8ea:	e005      	b.n	810c8f8 <HAL_UART_IRQHandler+0x3fc>
 810c8ec:	687b      	ldr	r3, [r7, #4]
 810c8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c8f2:	681b      	ldr	r3, [r3, #0]
 810c8f4:	685b      	ldr	r3, [r3, #4]
 810c8f6:	b29b      	uxth	r3, r3
 810c8f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 810c8fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 810c900:	2b00      	cmp	r3, #0
 810c902:	f000 81ad 	beq.w	810cc60 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810c906:	687b      	ldr	r3, [r7, #4]
 810c908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810c90c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810c910:	429a      	cmp	r2, r3
 810c912:	f080 81a5 	bcs.w	810cc60 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810c916:	687b      	ldr	r3, [r7, #4]
 810c918:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810c91c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810c920:	687b      	ldr	r3, [r7, #4]
 810c922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c926:	69db      	ldr	r3, [r3, #28]
 810c928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c92c:	f000 8087 	beq.w	810ca3e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c930:	687b      	ldr	r3, [r7, #4]
 810c932:	681b      	ldr	r3, [r3, #0]
 810c934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c938:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 810c93c:	e853 3f00 	ldrex	r3, [r3]
 810c940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 810c944:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810c948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810c94c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810c950:	687b      	ldr	r3, [r7, #4]
 810c952:	681b      	ldr	r3, [r3, #0]
 810c954:	461a      	mov	r2, r3
 810c956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 810c95a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810c95e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c962:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 810c966:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810c96a:	e841 2300 	strex	r3, r2, [r1]
 810c96e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810c972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810c976:	2b00      	cmp	r3, #0
 810c978:	d1da      	bne.n	810c930 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c97a:	687b      	ldr	r3, [r7, #4]
 810c97c:	681b      	ldr	r3, [r3, #0]
 810c97e:	3308      	adds	r3, #8
 810c980:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810c984:	e853 3f00 	ldrex	r3, [r3]
 810c988:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810c98a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810c98c:	f023 0301 	bic.w	r3, r3, #1
 810c990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810c994:	687b      	ldr	r3, [r7, #4]
 810c996:	681b      	ldr	r3, [r3, #0]
 810c998:	3308      	adds	r3, #8
 810c99a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 810c99e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810c9a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c9a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810c9a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810c9aa:	e841 2300 	strex	r3, r2, [r1]
 810c9ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810c9b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810c9b2:	2b00      	cmp	r3, #0
 810c9b4:	d1e1      	bne.n	810c97a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c9b6:	687b      	ldr	r3, [r7, #4]
 810c9b8:	681b      	ldr	r3, [r3, #0]
 810c9ba:	3308      	adds	r3, #8
 810c9bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c9be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810c9c0:	e853 3f00 	ldrex	r3, [r3]
 810c9c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810c9c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810c9c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810c9cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810c9d0:	687b      	ldr	r3, [r7, #4]
 810c9d2:	681b      	ldr	r3, [r3, #0]
 810c9d4:	3308      	adds	r3, #8
 810c9d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 810c9da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810c9dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c9de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810c9e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810c9e2:	e841 2300 	strex	r3, r2, [r1]
 810c9e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810c9e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810c9ea:	2b00      	cmp	r3, #0
 810c9ec:	d1e3      	bne.n	810c9b6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810c9ee:	687b      	ldr	r3, [r7, #4]
 810c9f0:	2220      	movs	r2, #32
 810c9f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c9f6:	687b      	ldr	r3, [r7, #4]
 810c9f8:	2200      	movs	r2, #0
 810c9fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c9fc:	687b      	ldr	r3, [r7, #4]
 810c9fe:	681b      	ldr	r3, [r3, #0]
 810ca00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ca02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ca04:	e853 3f00 	ldrex	r3, [r3]
 810ca08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810ca0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ca0c:	f023 0310 	bic.w	r3, r3, #16
 810ca10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810ca14:	687b      	ldr	r3, [r7, #4]
 810ca16:	681b      	ldr	r3, [r3, #0]
 810ca18:	461a      	mov	r2, r3
 810ca1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810ca1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 810ca20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ca22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810ca24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810ca26:	e841 2300 	strex	r3, r2, [r1]
 810ca2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810ca2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ca2e:	2b00      	cmp	r3, #0
 810ca30:	d1e4      	bne.n	810c9fc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810ca32:	687b      	ldr	r3, [r7, #4]
 810ca34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ca38:	4618      	mov	r0, r3
 810ca3a:	f7f9 fab9 	bl	8105fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810ca3e:	687b      	ldr	r3, [r7, #4]
 810ca40:	2202      	movs	r2, #2
 810ca42:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810ca44:	687b      	ldr	r3, [r7, #4]
 810ca46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810ca4a:	687b      	ldr	r3, [r7, #4]
 810ca4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ca50:	b29b      	uxth	r3, r3
 810ca52:	1ad3      	subs	r3, r2, r3
 810ca54:	b29b      	uxth	r3, r3
 810ca56:	4619      	mov	r1, r3
 810ca58:	6878      	ldr	r0, [r7, #4]
 810ca5a:	f000 f91d 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810ca5e:	e0ff      	b.n	810cc60 <HAL_UART_IRQHandler+0x764>
 810ca60:	40020010 	.word	0x40020010
 810ca64:	40020028 	.word	0x40020028
 810ca68:	40020040 	.word	0x40020040
 810ca6c:	40020058 	.word	0x40020058
 810ca70:	40020070 	.word	0x40020070
 810ca74:	40020088 	.word	0x40020088
 810ca78:	400200a0 	.word	0x400200a0
 810ca7c:	400200b8 	.word	0x400200b8
 810ca80:	40020410 	.word	0x40020410
 810ca84:	40020428 	.word	0x40020428
 810ca88:	40020440 	.word	0x40020440
 810ca8c:	40020458 	.word	0x40020458
 810ca90:	40020470 	.word	0x40020470
 810ca94:	40020488 	.word	0x40020488
 810ca98:	400204a0 	.word	0x400204a0
 810ca9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810caa0:	687b      	ldr	r3, [r7, #4]
 810caa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810caa6:	687b      	ldr	r3, [r7, #4]
 810caa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810caac:	b29b      	uxth	r3, r3
 810caae:	1ad3      	subs	r3, r2, r3
 810cab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 810cab4:	687b      	ldr	r3, [r7, #4]
 810cab6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810caba:	b29b      	uxth	r3, r3
 810cabc:	2b00      	cmp	r3, #0
 810cabe:	f000 80d1 	beq.w	810cc64 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 810cac2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810cac6:	2b00      	cmp	r3, #0
 810cac8:	f000 80cc 	beq.w	810cc64 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810cacc:	687b      	ldr	r3, [r7, #4]
 810cace:	681b      	ldr	r3, [r3, #0]
 810cad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cad4:	e853 3f00 	ldrex	r3, [r3]
 810cad8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810cada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cadc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810cae0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810cae4:	687b      	ldr	r3, [r7, #4]
 810cae6:	681b      	ldr	r3, [r3, #0]
 810cae8:	461a      	mov	r2, r3
 810caea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 810caee:	647b      	str	r3, [r7, #68]	@ 0x44
 810caf0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810caf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810caf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810caf6:	e841 2300 	strex	r3, r2, [r1]
 810cafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810cafc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810cafe:	2b00      	cmp	r3, #0
 810cb00:	d1e4      	bne.n	810cacc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810cb02:	687b      	ldr	r3, [r7, #4]
 810cb04:	681b      	ldr	r3, [r3, #0]
 810cb06:	3308      	adds	r3, #8
 810cb08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb0c:	e853 3f00 	ldrex	r3, [r3]
 810cb10:	623b      	str	r3, [r7, #32]
   return(result);
 810cb12:	6a3b      	ldr	r3, [r7, #32]
 810cb14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810cb18:	f023 0301 	bic.w	r3, r3, #1
 810cb1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810cb20:	687b      	ldr	r3, [r7, #4]
 810cb22:	681b      	ldr	r3, [r3, #0]
 810cb24:	3308      	adds	r3, #8
 810cb26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810cb2a:	633a      	str	r2, [r7, #48]	@ 0x30
 810cb2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cb2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810cb30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810cb32:	e841 2300 	strex	r3, r2, [r1]
 810cb36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810cb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cb3a:	2b00      	cmp	r3, #0
 810cb3c:	d1e1      	bne.n	810cb02 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810cb3e:	687b      	ldr	r3, [r7, #4]
 810cb40:	2220      	movs	r2, #32
 810cb42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cb46:	687b      	ldr	r3, [r7, #4]
 810cb48:	2200      	movs	r2, #0
 810cb4a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810cb4c:	687b      	ldr	r3, [r7, #4]
 810cb4e:	2200      	movs	r2, #0
 810cb50:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	681b      	ldr	r3, [r3, #0]
 810cb56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cb58:	693b      	ldr	r3, [r7, #16]
 810cb5a:	e853 3f00 	ldrex	r3, [r3]
 810cb5e:	60fb      	str	r3, [r7, #12]
   return(result);
 810cb60:	68fb      	ldr	r3, [r7, #12]
 810cb62:	f023 0310 	bic.w	r3, r3, #16
 810cb66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810cb6a:	687b      	ldr	r3, [r7, #4]
 810cb6c:	681b      	ldr	r3, [r3, #0]
 810cb6e:	461a      	mov	r2, r3
 810cb70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 810cb74:	61fb      	str	r3, [r7, #28]
 810cb76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cb78:	69b9      	ldr	r1, [r7, #24]
 810cb7a:	69fa      	ldr	r2, [r7, #28]
 810cb7c:	e841 2300 	strex	r3, r2, [r1]
 810cb80:	617b      	str	r3, [r7, #20]
   return(result);
 810cb82:	697b      	ldr	r3, [r7, #20]
 810cb84:	2b00      	cmp	r3, #0
 810cb86:	d1e4      	bne.n	810cb52 <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810cb88:	687b      	ldr	r3, [r7, #4]
 810cb8a:	2202      	movs	r2, #2
 810cb8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810cb8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810cb92:	4619      	mov	r1, r3
 810cb94:	6878      	ldr	r0, [r7, #4]
 810cb96:	f000 f87f 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810cb9a:	e063      	b.n	810cc64 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810cb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810cba4:	2b00      	cmp	r3, #0
 810cba6:	d00e      	beq.n	810cbc6 <HAL_UART_IRQHandler+0x6ca>
 810cba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810cbac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810cbb0:	2b00      	cmp	r3, #0
 810cbb2:	d008      	beq.n	810cbc6 <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810cbb4:	687b      	ldr	r3, [r7, #4]
 810cbb6:	681b      	ldr	r3, [r3, #0]
 810cbb8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 810cbbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810cbbe:	6878      	ldr	r0, [r7, #4]
 810cbc0:	f001 fe7e 	bl	810e8c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cbc4:	e051      	b.n	810cc6a <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810cbc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cbca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cbce:	2b00      	cmp	r3, #0
 810cbd0:	d014      	beq.n	810cbfc <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810cbd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cbd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cbda:	2b00      	cmp	r3, #0
 810cbdc:	d105      	bne.n	810cbea <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810cbde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810cbe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810cbe6:	2b00      	cmp	r3, #0
 810cbe8:	d008      	beq.n	810cbfc <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 810cbea:	687b      	ldr	r3, [r7, #4]
 810cbec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810cbee:	2b00      	cmp	r3, #0
 810cbf0:	d03a      	beq.n	810cc68 <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 810cbf2:	687b      	ldr	r3, [r7, #4]
 810cbf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810cbf6:	6878      	ldr	r0, [r7, #4]
 810cbf8:	4798      	blx	r3
    }
    return;
 810cbfa:	e035      	b.n	810cc68 <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810cbfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cc04:	2b00      	cmp	r3, #0
 810cc06:	d009      	beq.n	810cc1c <HAL_UART_IRQHandler+0x720>
 810cc08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cc10:	2b00      	cmp	r3, #0
 810cc12:	d003      	beq.n	810cc1c <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 810cc14:	6878      	ldr	r0, [r7, #4]
 810cc16:	f001 f90b 	bl	810de30 <UART_EndTransmit_IT>
    return;
 810cc1a:	e026      	b.n	810cc6a <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810cc1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cc20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810cc24:	2b00      	cmp	r3, #0
 810cc26:	d009      	beq.n	810cc3c <HAL_UART_IRQHandler+0x740>
 810cc28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cc2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810cc30:	2b00      	cmp	r3, #0
 810cc32:	d003      	beq.n	810cc3c <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810cc34:	6878      	ldr	r0, [r7, #4]
 810cc36:	f001 fe57 	bl	810e8e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cc3a:	e016      	b.n	810cc6a <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810cc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cc40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810cc44:	2b00      	cmp	r3, #0
 810cc46:	d010      	beq.n	810cc6a <HAL_UART_IRQHandler+0x76e>
 810cc48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cc4c:	2b00      	cmp	r3, #0
 810cc4e:	da0c      	bge.n	810cc6a <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810cc50:	6878      	ldr	r0, [r7, #4]
 810cc52:	f001 fe3f 	bl	810e8d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cc56:	e008      	b.n	810cc6a <HAL_UART_IRQHandler+0x76e>
      return;
 810cc58:	bf00      	nop
 810cc5a:	e006      	b.n	810cc6a <HAL_UART_IRQHandler+0x76e>
    return;
 810cc5c:	bf00      	nop
 810cc5e:	e004      	b.n	810cc6a <HAL_UART_IRQHandler+0x76e>
      return;
 810cc60:	bf00      	nop
 810cc62:	e002      	b.n	810cc6a <HAL_UART_IRQHandler+0x76e>
      return;
 810cc64:	bf00      	nop
 810cc66:	e000      	b.n	810cc6a <HAL_UART_IRQHandler+0x76e>
    return;
 810cc68:	bf00      	nop
  }
}
 810cc6a:	37e8      	adds	r7, #232	@ 0xe8
 810cc6c:	46bd      	mov	sp, r7
 810cc6e:	bd80      	pop	{r7, pc}

0810cc70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810cc70:	b480      	push	{r7}
 810cc72:	b083      	sub	sp, #12
 810cc74:	af00      	add	r7, sp, #0
 810cc76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810cc78:	bf00      	nop
 810cc7a:	370c      	adds	r7, #12
 810cc7c:	46bd      	mov	sp, r7
 810cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc82:	4770      	bx	lr

0810cc84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810cc84:	b480      	push	{r7}
 810cc86:	b083      	sub	sp, #12
 810cc88:	af00      	add	r7, sp, #0
 810cc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810cc8c:	bf00      	nop
 810cc8e:	370c      	adds	r7, #12
 810cc90:	46bd      	mov	sp, r7
 810cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc96:	4770      	bx	lr

0810cc98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810cc98:	b480      	push	{r7}
 810cc9a:	b083      	sub	sp, #12
 810cc9c:	af00      	add	r7, sp, #0
 810cc9e:	6078      	str	r0, [r7, #4]
 810cca0:	460b      	mov	r3, r1
 810cca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810cca4:	bf00      	nop
 810cca6:	370c      	adds	r7, #12
 810cca8:	46bd      	mov	sp, r7
 810ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccae:	4770      	bx	lr

0810ccb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810ccb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810ccb4:	b092      	sub	sp, #72	@ 0x48
 810ccb6:	af00      	add	r7, sp, #0
 810ccb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810ccba:	2300      	movs	r3, #0
 810ccbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810ccc0:	697b      	ldr	r3, [r7, #20]
 810ccc2:	689a      	ldr	r2, [r3, #8]
 810ccc4:	697b      	ldr	r3, [r7, #20]
 810ccc6:	691b      	ldr	r3, [r3, #16]
 810ccc8:	431a      	orrs	r2, r3
 810ccca:	697b      	ldr	r3, [r7, #20]
 810cccc:	695b      	ldr	r3, [r3, #20]
 810ccce:	431a      	orrs	r2, r3
 810ccd0:	697b      	ldr	r3, [r7, #20]
 810ccd2:	69db      	ldr	r3, [r3, #28]
 810ccd4:	4313      	orrs	r3, r2
 810ccd6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810ccd8:	697b      	ldr	r3, [r7, #20]
 810ccda:	681b      	ldr	r3, [r3, #0]
 810ccdc:	681a      	ldr	r2, [r3, #0]
 810ccde:	4bbd      	ldr	r3, [pc, #756]	@ (810cfd4 <UART_SetConfig+0x324>)
 810cce0:	4013      	ands	r3, r2
 810cce2:	697a      	ldr	r2, [r7, #20]
 810cce4:	6812      	ldr	r2, [r2, #0]
 810cce6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810cce8:	430b      	orrs	r3, r1
 810ccea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810ccec:	697b      	ldr	r3, [r7, #20]
 810ccee:	681b      	ldr	r3, [r3, #0]
 810ccf0:	685b      	ldr	r3, [r3, #4]
 810ccf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810ccf6:	697b      	ldr	r3, [r7, #20]
 810ccf8:	68da      	ldr	r2, [r3, #12]
 810ccfa:	697b      	ldr	r3, [r7, #20]
 810ccfc:	681b      	ldr	r3, [r3, #0]
 810ccfe:	430a      	orrs	r2, r1
 810cd00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810cd02:	697b      	ldr	r3, [r7, #20]
 810cd04:	699b      	ldr	r3, [r3, #24]
 810cd06:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810cd08:	697b      	ldr	r3, [r7, #20]
 810cd0a:	681b      	ldr	r3, [r3, #0]
 810cd0c:	4ab2      	ldr	r2, [pc, #712]	@ (810cfd8 <UART_SetConfig+0x328>)
 810cd0e:	4293      	cmp	r3, r2
 810cd10:	d004      	beq.n	810cd1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810cd12:	697b      	ldr	r3, [r7, #20]
 810cd14:	6a1b      	ldr	r3, [r3, #32]
 810cd16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810cd18:	4313      	orrs	r3, r2
 810cd1a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810cd1c:	697b      	ldr	r3, [r7, #20]
 810cd1e:	681b      	ldr	r3, [r3, #0]
 810cd20:	689b      	ldr	r3, [r3, #8]
 810cd22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810cd26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810cd2a:	697a      	ldr	r2, [r7, #20]
 810cd2c:	6812      	ldr	r2, [r2, #0]
 810cd2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810cd30:	430b      	orrs	r3, r1
 810cd32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810cd34:	697b      	ldr	r3, [r7, #20]
 810cd36:	681b      	ldr	r3, [r3, #0]
 810cd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd3a:	f023 010f 	bic.w	r1, r3, #15
 810cd3e:	697b      	ldr	r3, [r7, #20]
 810cd40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810cd42:	697b      	ldr	r3, [r7, #20]
 810cd44:	681b      	ldr	r3, [r3, #0]
 810cd46:	430a      	orrs	r2, r1
 810cd48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810cd4a:	697b      	ldr	r3, [r7, #20]
 810cd4c:	681b      	ldr	r3, [r3, #0]
 810cd4e:	4aa3      	ldr	r2, [pc, #652]	@ (810cfdc <UART_SetConfig+0x32c>)
 810cd50:	4293      	cmp	r3, r2
 810cd52:	d177      	bne.n	810ce44 <UART_SetConfig+0x194>
 810cd54:	4ba2      	ldr	r3, [pc, #648]	@ (810cfe0 <UART_SetConfig+0x330>)
 810cd56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cd58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810cd5c:	2b28      	cmp	r3, #40	@ 0x28
 810cd5e:	d86d      	bhi.n	810ce3c <UART_SetConfig+0x18c>
 810cd60:	a201      	add	r2, pc, #4	@ (adr r2, 810cd68 <UART_SetConfig+0xb8>)
 810cd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cd66:	bf00      	nop
 810cd68:	0810ce0d 	.word	0x0810ce0d
 810cd6c:	0810ce3d 	.word	0x0810ce3d
 810cd70:	0810ce3d 	.word	0x0810ce3d
 810cd74:	0810ce3d 	.word	0x0810ce3d
 810cd78:	0810ce3d 	.word	0x0810ce3d
 810cd7c:	0810ce3d 	.word	0x0810ce3d
 810cd80:	0810ce3d 	.word	0x0810ce3d
 810cd84:	0810ce3d 	.word	0x0810ce3d
 810cd88:	0810ce15 	.word	0x0810ce15
 810cd8c:	0810ce3d 	.word	0x0810ce3d
 810cd90:	0810ce3d 	.word	0x0810ce3d
 810cd94:	0810ce3d 	.word	0x0810ce3d
 810cd98:	0810ce3d 	.word	0x0810ce3d
 810cd9c:	0810ce3d 	.word	0x0810ce3d
 810cda0:	0810ce3d 	.word	0x0810ce3d
 810cda4:	0810ce3d 	.word	0x0810ce3d
 810cda8:	0810ce1d 	.word	0x0810ce1d
 810cdac:	0810ce3d 	.word	0x0810ce3d
 810cdb0:	0810ce3d 	.word	0x0810ce3d
 810cdb4:	0810ce3d 	.word	0x0810ce3d
 810cdb8:	0810ce3d 	.word	0x0810ce3d
 810cdbc:	0810ce3d 	.word	0x0810ce3d
 810cdc0:	0810ce3d 	.word	0x0810ce3d
 810cdc4:	0810ce3d 	.word	0x0810ce3d
 810cdc8:	0810ce25 	.word	0x0810ce25
 810cdcc:	0810ce3d 	.word	0x0810ce3d
 810cdd0:	0810ce3d 	.word	0x0810ce3d
 810cdd4:	0810ce3d 	.word	0x0810ce3d
 810cdd8:	0810ce3d 	.word	0x0810ce3d
 810cddc:	0810ce3d 	.word	0x0810ce3d
 810cde0:	0810ce3d 	.word	0x0810ce3d
 810cde4:	0810ce3d 	.word	0x0810ce3d
 810cde8:	0810ce2d 	.word	0x0810ce2d
 810cdec:	0810ce3d 	.word	0x0810ce3d
 810cdf0:	0810ce3d 	.word	0x0810ce3d
 810cdf4:	0810ce3d 	.word	0x0810ce3d
 810cdf8:	0810ce3d 	.word	0x0810ce3d
 810cdfc:	0810ce3d 	.word	0x0810ce3d
 810ce00:	0810ce3d 	.word	0x0810ce3d
 810ce04:	0810ce3d 	.word	0x0810ce3d
 810ce08:	0810ce35 	.word	0x0810ce35
 810ce0c:	2301      	movs	r3, #1
 810ce0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce12:	e220      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce14:	2304      	movs	r3, #4
 810ce16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce1a:	e21c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce1c:	2308      	movs	r3, #8
 810ce1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce22:	e218      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce24:	2310      	movs	r3, #16
 810ce26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce2a:	e214      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce2c:	2320      	movs	r3, #32
 810ce2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce32:	e210      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce34:	2340      	movs	r3, #64	@ 0x40
 810ce36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce3a:	e20c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce3c:	2380      	movs	r3, #128	@ 0x80
 810ce3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce42:	e208      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce44:	697b      	ldr	r3, [r7, #20]
 810ce46:	681b      	ldr	r3, [r3, #0]
 810ce48:	4a66      	ldr	r2, [pc, #408]	@ (810cfe4 <UART_SetConfig+0x334>)
 810ce4a:	4293      	cmp	r3, r2
 810ce4c:	d130      	bne.n	810ceb0 <UART_SetConfig+0x200>
 810ce4e:	4b64      	ldr	r3, [pc, #400]	@ (810cfe0 <UART_SetConfig+0x330>)
 810ce50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ce52:	f003 0307 	and.w	r3, r3, #7
 810ce56:	2b05      	cmp	r3, #5
 810ce58:	d826      	bhi.n	810cea8 <UART_SetConfig+0x1f8>
 810ce5a:	a201      	add	r2, pc, #4	@ (adr r2, 810ce60 <UART_SetConfig+0x1b0>)
 810ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ce60:	0810ce79 	.word	0x0810ce79
 810ce64:	0810ce81 	.word	0x0810ce81
 810ce68:	0810ce89 	.word	0x0810ce89
 810ce6c:	0810ce91 	.word	0x0810ce91
 810ce70:	0810ce99 	.word	0x0810ce99
 810ce74:	0810cea1 	.word	0x0810cea1
 810ce78:	2300      	movs	r3, #0
 810ce7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce7e:	e1ea      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce80:	2304      	movs	r3, #4
 810ce82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce86:	e1e6      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce88:	2308      	movs	r3, #8
 810ce8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce8e:	e1e2      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce90:	2310      	movs	r3, #16
 810ce92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce96:	e1de      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ce98:	2320      	movs	r3, #32
 810ce9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ce9e:	e1da      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cea0:	2340      	movs	r3, #64	@ 0x40
 810cea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cea6:	e1d6      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cea8:	2380      	movs	r3, #128	@ 0x80
 810ceaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ceae:	e1d2      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ceb0:	697b      	ldr	r3, [r7, #20]
 810ceb2:	681b      	ldr	r3, [r3, #0]
 810ceb4:	4a4c      	ldr	r2, [pc, #304]	@ (810cfe8 <UART_SetConfig+0x338>)
 810ceb6:	4293      	cmp	r3, r2
 810ceb8:	d130      	bne.n	810cf1c <UART_SetConfig+0x26c>
 810ceba:	4b49      	ldr	r3, [pc, #292]	@ (810cfe0 <UART_SetConfig+0x330>)
 810cebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cebe:	f003 0307 	and.w	r3, r3, #7
 810cec2:	2b05      	cmp	r3, #5
 810cec4:	d826      	bhi.n	810cf14 <UART_SetConfig+0x264>
 810cec6:	a201      	add	r2, pc, #4	@ (adr r2, 810cecc <UART_SetConfig+0x21c>)
 810cec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cecc:	0810cee5 	.word	0x0810cee5
 810ced0:	0810ceed 	.word	0x0810ceed
 810ced4:	0810cef5 	.word	0x0810cef5
 810ced8:	0810cefd 	.word	0x0810cefd
 810cedc:	0810cf05 	.word	0x0810cf05
 810cee0:	0810cf0d 	.word	0x0810cf0d
 810cee4:	2300      	movs	r3, #0
 810cee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ceea:	e1b4      	b.n	810d256 <UART_SetConfig+0x5a6>
 810ceec:	2304      	movs	r3, #4
 810ceee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cef2:	e1b0      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cef4:	2308      	movs	r3, #8
 810cef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cefa:	e1ac      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cefc:	2310      	movs	r3, #16
 810cefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf02:	e1a8      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf04:	2320      	movs	r3, #32
 810cf06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf0a:	e1a4      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf0c:	2340      	movs	r3, #64	@ 0x40
 810cf0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf12:	e1a0      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf14:	2380      	movs	r3, #128	@ 0x80
 810cf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf1a:	e19c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf1c:	697b      	ldr	r3, [r7, #20]
 810cf1e:	681b      	ldr	r3, [r3, #0]
 810cf20:	4a32      	ldr	r2, [pc, #200]	@ (810cfec <UART_SetConfig+0x33c>)
 810cf22:	4293      	cmp	r3, r2
 810cf24:	d130      	bne.n	810cf88 <UART_SetConfig+0x2d8>
 810cf26:	4b2e      	ldr	r3, [pc, #184]	@ (810cfe0 <UART_SetConfig+0x330>)
 810cf28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cf2a:	f003 0307 	and.w	r3, r3, #7
 810cf2e:	2b05      	cmp	r3, #5
 810cf30:	d826      	bhi.n	810cf80 <UART_SetConfig+0x2d0>
 810cf32:	a201      	add	r2, pc, #4	@ (adr r2, 810cf38 <UART_SetConfig+0x288>)
 810cf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cf38:	0810cf51 	.word	0x0810cf51
 810cf3c:	0810cf59 	.word	0x0810cf59
 810cf40:	0810cf61 	.word	0x0810cf61
 810cf44:	0810cf69 	.word	0x0810cf69
 810cf48:	0810cf71 	.word	0x0810cf71
 810cf4c:	0810cf79 	.word	0x0810cf79
 810cf50:	2300      	movs	r3, #0
 810cf52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf56:	e17e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf58:	2304      	movs	r3, #4
 810cf5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf5e:	e17a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf60:	2308      	movs	r3, #8
 810cf62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf66:	e176      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf68:	2310      	movs	r3, #16
 810cf6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf6e:	e172      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf70:	2320      	movs	r3, #32
 810cf72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf76:	e16e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf78:	2340      	movs	r3, #64	@ 0x40
 810cf7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf7e:	e16a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf80:	2380      	movs	r3, #128	@ 0x80
 810cf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cf86:	e166      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cf88:	697b      	ldr	r3, [r7, #20]
 810cf8a:	681b      	ldr	r3, [r3, #0]
 810cf8c:	4a18      	ldr	r2, [pc, #96]	@ (810cff0 <UART_SetConfig+0x340>)
 810cf8e:	4293      	cmp	r3, r2
 810cf90:	d140      	bne.n	810d014 <UART_SetConfig+0x364>
 810cf92:	4b13      	ldr	r3, [pc, #76]	@ (810cfe0 <UART_SetConfig+0x330>)
 810cf94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cf96:	f003 0307 	and.w	r3, r3, #7
 810cf9a:	2b05      	cmp	r3, #5
 810cf9c:	d836      	bhi.n	810d00c <UART_SetConfig+0x35c>
 810cf9e:	a201      	add	r2, pc, #4	@ (adr r2, 810cfa4 <UART_SetConfig+0x2f4>)
 810cfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cfa4:	0810cfbd 	.word	0x0810cfbd
 810cfa8:	0810cfc5 	.word	0x0810cfc5
 810cfac:	0810cfcd 	.word	0x0810cfcd
 810cfb0:	0810cff5 	.word	0x0810cff5
 810cfb4:	0810cffd 	.word	0x0810cffd
 810cfb8:	0810d005 	.word	0x0810d005
 810cfbc:	2300      	movs	r3, #0
 810cfbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfc2:	e148      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cfc4:	2304      	movs	r3, #4
 810cfc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfca:	e144      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cfcc:	2308      	movs	r3, #8
 810cfce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cfd2:	e140      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cfd4:	cfff69f3 	.word	0xcfff69f3
 810cfd8:	58000c00 	.word	0x58000c00
 810cfdc:	40011000 	.word	0x40011000
 810cfe0:	58024400 	.word	0x58024400
 810cfe4:	40004400 	.word	0x40004400
 810cfe8:	40004800 	.word	0x40004800
 810cfec:	40004c00 	.word	0x40004c00
 810cff0:	40005000 	.word	0x40005000
 810cff4:	2310      	movs	r3, #16
 810cff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810cffa:	e12c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810cffc:	2320      	movs	r3, #32
 810cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d002:	e128      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d004:	2340      	movs	r3, #64	@ 0x40
 810d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d00a:	e124      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d00c:	2380      	movs	r3, #128	@ 0x80
 810d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d012:	e120      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d014:	697b      	ldr	r3, [r7, #20]
 810d016:	681b      	ldr	r3, [r3, #0]
 810d018:	4acb      	ldr	r2, [pc, #812]	@ (810d348 <UART_SetConfig+0x698>)
 810d01a:	4293      	cmp	r3, r2
 810d01c:	d176      	bne.n	810d10c <UART_SetConfig+0x45c>
 810d01e:	4bcb      	ldr	r3, [pc, #812]	@ (810d34c <UART_SetConfig+0x69c>)
 810d020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810d026:	2b28      	cmp	r3, #40	@ 0x28
 810d028:	d86c      	bhi.n	810d104 <UART_SetConfig+0x454>
 810d02a:	a201      	add	r2, pc, #4	@ (adr r2, 810d030 <UART_SetConfig+0x380>)
 810d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d030:	0810d0d5 	.word	0x0810d0d5
 810d034:	0810d105 	.word	0x0810d105
 810d038:	0810d105 	.word	0x0810d105
 810d03c:	0810d105 	.word	0x0810d105
 810d040:	0810d105 	.word	0x0810d105
 810d044:	0810d105 	.word	0x0810d105
 810d048:	0810d105 	.word	0x0810d105
 810d04c:	0810d105 	.word	0x0810d105
 810d050:	0810d0dd 	.word	0x0810d0dd
 810d054:	0810d105 	.word	0x0810d105
 810d058:	0810d105 	.word	0x0810d105
 810d05c:	0810d105 	.word	0x0810d105
 810d060:	0810d105 	.word	0x0810d105
 810d064:	0810d105 	.word	0x0810d105
 810d068:	0810d105 	.word	0x0810d105
 810d06c:	0810d105 	.word	0x0810d105
 810d070:	0810d0e5 	.word	0x0810d0e5
 810d074:	0810d105 	.word	0x0810d105
 810d078:	0810d105 	.word	0x0810d105
 810d07c:	0810d105 	.word	0x0810d105
 810d080:	0810d105 	.word	0x0810d105
 810d084:	0810d105 	.word	0x0810d105
 810d088:	0810d105 	.word	0x0810d105
 810d08c:	0810d105 	.word	0x0810d105
 810d090:	0810d0ed 	.word	0x0810d0ed
 810d094:	0810d105 	.word	0x0810d105
 810d098:	0810d105 	.word	0x0810d105
 810d09c:	0810d105 	.word	0x0810d105
 810d0a0:	0810d105 	.word	0x0810d105
 810d0a4:	0810d105 	.word	0x0810d105
 810d0a8:	0810d105 	.word	0x0810d105
 810d0ac:	0810d105 	.word	0x0810d105
 810d0b0:	0810d0f5 	.word	0x0810d0f5
 810d0b4:	0810d105 	.word	0x0810d105
 810d0b8:	0810d105 	.word	0x0810d105
 810d0bc:	0810d105 	.word	0x0810d105
 810d0c0:	0810d105 	.word	0x0810d105
 810d0c4:	0810d105 	.word	0x0810d105
 810d0c8:	0810d105 	.word	0x0810d105
 810d0cc:	0810d105 	.word	0x0810d105
 810d0d0:	0810d0fd 	.word	0x0810d0fd
 810d0d4:	2301      	movs	r3, #1
 810d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0da:	e0bc      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0dc:	2304      	movs	r3, #4
 810d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0e2:	e0b8      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0e4:	2308      	movs	r3, #8
 810d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0ea:	e0b4      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0ec:	2310      	movs	r3, #16
 810d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0f2:	e0b0      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0f4:	2320      	movs	r3, #32
 810d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d0fa:	e0ac      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d0fc:	2340      	movs	r3, #64	@ 0x40
 810d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d102:	e0a8      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d104:	2380      	movs	r3, #128	@ 0x80
 810d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d10a:	e0a4      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d10c:	697b      	ldr	r3, [r7, #20]
 810d10e:	681b      	ldr	r3, [r3, #0]
 810d110:	4a8f      	ldr	r2, [pc, #572]	@ (810d350 <UART_SetConfig+0x6a0>)
 810d112:	4293      	cmp	r3, r2
 810d114:	d130      	bne.n	810d178 <UART_SetConfig+0x4c8>
 810d116:	4b8d      	ldr	r3, [pc, #564]	@ (810d34c <UART_SetConfig+0x69c>)
 810d118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d11a:	f003 0307 	and.w	r3, r3, #7
 810d11e:	2b05      	cmp	r3, #5
 810d120:	d826      	bhi.n	810d170 <UART_SetConfig+0x4c0>
 810d122:	a201      	add	r2, pc, #4	@ (adr r2, 810d128 <UART_SetConfig+0x478>)
 810d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d128:	0810d141 	.word	0x0810d141
 810d12c:	0810d149 	.word	0x0810d149
 810d130:	0810d151 	.word	0x0810d151
 810d134:	0810d159 	.word	0x0810d159
 810d138:	0810d161 	.word	0x0810d161
 810d13c:	0810d169 	.word	0x0810d169
 810d140:	2300      	movs	r3, #0
 810d142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d146:	e086      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d148:	2304      	movs	r3, #4
 810d14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d14e:	e082      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d150:	2308      	movs	r3, #8
 810d152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d156:	e07e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d158:	2310      	movs	r3, #16
 810d15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d15e:	e07a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d160:	2320      	movs	r3, #32
 810d162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d166:	e076      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d168:	2340      	movs	r3, #64	@ 0x40
 810d16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d16e:	e072      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d170:	2380      	movs	r3, #128	@ 0x80
 810d172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d176:	e06e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d178:	697b      	ldr	r3, [r7, #20]
 810d17a:	681b      	ldr	r3, [r3, #0]
 810d17c:	4a75      	ldr	r2, [pc, #468]	@ (810d354 <UART_SetConfig+0x6a4>)
 810d17e:	4293      	cmp	r3, r2
 810d180:	d130      	bne.n	810d1e4 <UART_SetConfig+0x534>
 810d182:	4b72      	ldr	r3, [pc, #456]	@ (810d34c <UART_SetConfig+0x69c>)
 810d184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d186:	f003 0307 	and.w	r3, r3, #7
 810d18a:	2b05      	cmp	r3, #5
 810d18c:	d826      	bhi.n	810d1dc <UART_SetConfig+0x52c>
 810d18e:	a201      	add	r2, pc, #4	@ (adr r2, 810d194 <UART_SetConfig+0x4e4>)
 810d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d194:	0810d1ad 	.word	0x0810d1ad
 810d198:	0810d1b5 	.word	0x0810d1b5
 810d19c:	0810d1bd 	.word	0x0810d1bd
 810d1a0:	0810d1c5 	.word	0x0810d1c5
 810d1a4:	0810d1cd 	.word	0x0810d1cd
 810d1a8:	0810d1d5 	.word	0x0810d1d5
 810d1ac:	2300      	movs	r3, #0
 810d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1b2:	e050      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1b4:	2304      	movs	r3, #4
 810d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1ba:	e04c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1bc:	2308      	movs	r3, #8
 810d1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1c2:	e048      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1c4:	2310      	movs	r3, #16
 810d1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1ca:	e044      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1cc:	2320      	movs	r3, #32
 810d1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1d2:	e040      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1d4:	2340      	movs	r3, #64	@ 0x40
 810d1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1da:	e03c      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1dc:	2380      	movs	r3, #128	@ 0x80
 810d1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d1e2:	e038      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d1e4:	697b      	ldr	r3, [r7, #20]
 810d1e6:	681b      	ldr	r3, [r3, #0]
 810d1e8:	4a5b      	ldr	r2, [pc, #364]	@ (810d358 <UART_SetConfig+0x6a8>)
 810d1ea:	4293      	cmp	r3, r2
 810d1ec:	d130      	bne.n	810d250 <UART_SetConfig+0x5a0>
 810d1ee:	4b57      	ldr	r3, [pc, #348]	@ (810d34c <UART_SetConfig+0x69c>)
 810d1f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d1f2:	f003 0307 	and.w	r3, r3, #7
 810d1f6:	2b05      	cmp	r3, #5
 810d1f8:	d826      	bhi.n	810d248 <UART_SetConfig+0x598>
 810d1fa:	a201      	add	r2, pc, #4	@ (adr r2, 810d200 <UART_SetConfig+0x550>)
 810d1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d200:	0810d219 	.word	0x0810d219
 810d204:	0810d221 	.word	0x0810d221
 810d208:	0810d229 	.word	0x0810d229
 810d20c:	0810d231 	.word	0x0810d231
 810d210:	0810d239 	.word	0x0810d239
 810d214:	0810d241 	.word	0x0810d241
 810d218:	2302      	movs	r3, #2
 810d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d21e:	e01a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d220:	2304      	movs	r3, #4
 810d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d226:	e016      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d228:	2308      	movs	r3, #8
 810d22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d22e:	e012      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d230:	2310      	movs	r3, #16
 810d232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d236:	e00e      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d238:	2320      	movs	r3, #32
 810d23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d23e:	e00a      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d240:	2340      	movs	r3, #64	@ 0x40
 810d242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d246:	e006      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d248:	2380      	movs	r3, #128	@ 0x80
 810d24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d24e:	e002      	b.n	810d256 <UART_SetConfig+0x5a6>
 810d250:	2380      	movs	r3, #128	@ 0x80
 810d252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810d256:	697b      	ldr	r3, [r7, #20]
 810d258:	681b      	ldr	r3, [r3, #0]
 810d25a:	4a3f      	ldr	r2, [pc, #252]	@ (810d358 <UART_SetConfig+0x6a8>)
 810d25c:	4293      	cmp	r3, r2
 810d25e:	f040 80f8 	bne.w	810d452 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810d262:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d266:	2b20      	cmp	r3, #32
 810d268:	dc46      	bgt.n	810d2f8 <UART_SetConfig+0x648>
 810d26a:	2b02      	cmp	r3, #2
 810d26c:	f2c0 8082 	blt.w	810d374 <UART_SetConfig+0x6c4>
 810d270:	3b02      	subs	r3, #2
 810d272:	2b1e      	cmp	r3, #30
 810d274:	d87e      	bhi.n	810d374 <UART_SetConfig+0x6c4>
 810d276:	a201      	add	r2, pc, #4	@ (adr r2, 810d27c <UART_SetConfig+0x5cc>)
 810d278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d27c:	0810d2ff 	.word	0x0810d2ff
 810d280:	0810d375 	.word	0x0810d375
 810d284:	0810d307 	.word	0x0810d307
 810d288:	0810d375 	.word	0x0810d375
 810d28c:	0810d375 	.word	0x0810d375
 810d290:	0810d375 	.word	0x0810d375
 810d294:	0810d317 	.word	0x0810d317
 810d298:	0810d375 	.word	0x0810d375
 810d29c:	0810d375 	.word	0x0810d375
 810d2a0:	0810d375 	.word	0x0810d375
 810d2a4:	0810d375 	.word	0x0810d375
 810d2a8:	0810d375 	.word	0x0810d375
 810d2ac:	0810d375 	.word	0x0810d375
 810d2b0:	0810d375 	.word	0x0810d375
 810d2b4:	0810d327 	.word	0x0810d327
 810d2b8:	0810d375 	.word	0x0810d375
 810d2bc:	0810d375 	.word	0x0810d375
 810d2c0:	0810d375 	.word	0x0810d375
 810d2c4:	0810d375 	.word	0x0810d375
 810d2c8:	0810d375 	.word	0x0810d375
 810d2cc:	0810d375 	.word	0x0810d375
 810d2d0:	0810d375 	.word	0x0810d375
 810d2d4:	0810d375 	.word	0x0810d375
 810d2d8:	0810d375 	.word	0x0810d375
 810d2dc:	0810d375 	.word	0x0810d375
 810d2e0:	0810d375 	.word	0x0810d375
 810d2e4:	0810d375 	.word	0x0810d375
 810d2e8:	0810d375 	.word	0x0810d375
 810d2ec:	0810d375 	.word	0x0810d375
 810d2f0:	0810d375 	.word	0x0810d375
 810d2f4:	0810d367 	.word	0x0810d367
 810d2f8:	2b40      	cmp	r3, #64	@ 0x40
 810d2fa:	d037      	beq.n	810d36c <UART_SetConfig+0x6bc>
 810d2fc:	e03a      	b.n	810d374 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810d2fe:	f7fc fd9d 	bl	8109e3c <HAL_RCCEx_GetD3PCLK1Freq>
 810d302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d304:	e03c      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d30a:	4618      	mov	r0, r3
 810d30c:	f7fc fdac 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d314:	e034      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d316:	f107 0318 	add.w	r3, r7, #24
 810d31a:	4618      	mov	r0, r3
 810d31c:	f7fc fef8 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d320:	69fb      	ldr	r3, [r7, #28]
 810d322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d324:	e02c      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d326:	4b09      	ldr	r3, [pc, #36]	@ (810d34c <UART_SetConfig+0x69c>)
 810d328:	681b      	ldr	r3, [r3, #0]
 810d32a:	f003 0320 	and.w	r3, r3, #32
 810d32e:	2b00      	cmp	r3, #0
 810d330:	d016      	beq.n	810d360 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d332:	4b06      	ldr	r3, [pc, #24]	@ (810d34c <UART_SetConfig+0x69c>)
 810d334:	681b      	ldr	r3, [r3, #0]
 810d336:	08db      	lsrs	r3, r3, #3
 810d338:	f003 0303 	and.w	r3, r3, #3
 810d33c:	4a07      	ldr	r2, [pc, #28]	@ (810d35c <UART_SetConfig+0x6ac>)
 810d33e:	fa22 f303 	lsr.w	r3, r2, r3
 810d342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d344:	e01c      	b.n	810d380 <UART_SetConfig+0x6d0>
 810d346:	bf00      	nop
 810d348:	40011400 	.word	0x40011400
 810d34c:	58024400 	.word	0x58024400
 810d350:	40007800 	.word	0x40007800
 810d354:	40007c00 	.word	0x40007c00
 810d358:	58000c00 	.word	0x58000c00
 810d35c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810d360:	4b9d      	ldr	r3, [pc, #628]	@ (810d5d8 <UART_SetConfig+0x928>)
 810d362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d364:	e00c      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d366:	4b9d      	ldr	r3, [pc, #628]	@ (810d5dc <UART_SetConfig+0x92c>)
 810d368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d36a:	e009      	b.n	810d380 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d36c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d372:	e005      	b.n	810d380 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810d374:	2300      	movs	r3, #0
 810d376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d378:	2301      	movs	r3, #1
 810d37a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d37e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810d380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d382:	2b00      	cmp	r3, #0
 810d384:	f000 81de 	beq.w	810d744 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810d388:	697b      	ldr	r3, [r7, #20]
 810d38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d38c:	4a94      	ldr	r2, [pc, #592]	@ (810d5e0 <UART_SetConfig+0x930>)
 810d38e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d392:	461a      	mov	r2, r3
 810d394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d396:	fbb3 f3f2 	udiv	r3, r3, r2
 810d39a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810d39c:	697b      	ldr	r3, [r7, #20]
 810d39e:	685a      	ldr	r2, [r3, #4]
 810d3a0:	4613      	mov	r3, r2
 810d3a2:	005b      	lsls	r3, r3, #1
 810d3a4:	4413      	add	r3, r2
 810d3a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d3a8:	429a      	cmp	r2, r3
 810d3aa:	d305      	bcc.n	810d3b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810d3ac:	697b      	ldr	r3, [r7, #20]
 810d3ae:	685b      	ldr	r3, [r3, #4]
 810d3b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810d3b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d3b4:	429a      	cmp	r2, r3
 810d3b6:	d903      	bls.n	810d3c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810d3b8:	2301      	movs	r3, #1
 810d3ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d3be:	e1c1      	b.n	810d744 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d3c2:	2200      	movs	r2, #0
 810d3c4:	60bb      	str	r3, [r7, #8]
 810d3c6:	60fa      	str	r2, [r7, #12]
 810d3c8:	697b      	ldr	r3, [r7, #20]
 810d3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d3cc:	4a84      	ldr	r2, [pc, #528]	@ (810d5e0 <UART_SetConfig+0x930>)
 810d3ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d3d2:	b29b      	uxth	r3, r3
 810d3d4:	2200      	movs	r2, #0
 810d3d6:	603b      	str	r3, [r7, #0]
 810d3d8:	607a      	str	r2, [r7, #4]
 810d3da:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d3de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810d3e2:	f7f3 fcd9 	bl	8100d98 <__aeabi_uldivmod>
 810d3e6:	4602      	mov	r2, r0
 810d3e8:	460b      	mov	r3, r1
 810d3ea:	4610      	mov	r0, r2
 810d3ec:	4619      	mov	r1, r3
 810d3ee:	f04f 0200 	mov.w	r2, #0
 810d3f2:	f04f 0300 	mov.w	r3, #0
 810d3f6:	020b      	lsls	r3, r1, #8
 810d3f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810d3fc:	0202      	lsls	r2, r0, #8
 810d3fe:	6979      	ldr	r1, [r7, #20]
 810d400:	6849      	ldr	r1, [r1, #4]
 810d402:	0849      	lsrs	r1, r1, #1
 810d404:	2000      	movs	r0, #0
 810d406:	460c      	mov	r4, r1
 810d408:	4605      	mov	r5, r0
 810d40a:	eb12 0804 	adds.w	r8, r2, r4
 810d40e:	eb43 0905 	adc.w	r9, r3, r5
 810d412:	697b      	ldr	r3, [r7, #20]
 810d414:	685b      	ldr	r3, [r3, #4]
 810d416:	2200      	movs	r2, #0
 810d418:	469a      	mov	sl, r3
 810d41a:	4693      	mov	fp, r2
 810d41c:	4652      	mov	r2, sl
 810d41e:	465b      	mov	r3, fp
 810d420:	4640      	mov	r0, r8
 810d422:	4649      	mov	r1, r9
 810d424:	f7f3 fcb8 	bl	8100d98 <__aeabi_uldivmod>
 810d428:	4602      	mov	r2, r0
 810d42a:	460b      	mov	r3, r1
 810d42c:	4613      	mov	r3, r2
 810d42e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810d430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810d436:	d308      	bcc.n	810d44a <UART_SetConfig+0x79a>
 810d438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d43a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d43e:	d204      	bcs.n	810d44a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810d440:	697b      	ldr	r3, [r7, #20]
 810d442:	681b      	ldr	r3, [r3, #0]
 810d444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810d446:	60da      	str	r2, [r3, #12]
 810d448:	e17c      	b.n	810d744 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810d44a:	2301      	movs	r3, #1
 810d44c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d450:	e178      	b.n	810d744 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810d452:	697b      	ldr	r3, [r7, #20]
 810d454:	69db      	ldr	r3, [r3, #28]
 810d456:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810d45a:	f040 80c5 	bne.w	810d5e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810d45e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d462:	2b20      	cmp	r3, #32
 810d464:	dc48      	bgt.n	810d4f8 <UART_SetConfig+0x848>
 810d466:	2b00      	cmp	r3, #0
 810d468:	db7b      	blt.n	810d562 <UART_SetConfig+0x8b2>
 810d46a:	2b20      	cmp	r3, #32
 810d46c:	d879      	bhi.n	810d562 <UART_SetConfig+0x8b2>
 810d46e:	a201      	add	r2, pc, #4	@ (adr r2, 810d474 <UART_SetConfig+0x7c4>)
 810d470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d474:	0810d4ff 	.word	0x0810d4ff
 810d478:	0810d507 	.word	0x0810d507
 810d47c:	0810d563 	.word	0x0810d563
 810d480:	0810d563 	.word	0x0810d563
 810d484:	0810d50f 	.word	0x0810d50f
 810d488:	0810d563 	.word	0x0810d563
 810d48c:	0810d563 	.word	0x0810d563
 810d490:	0810d563 	.word	0x0810d563
 810d494:	0810d51f 	.word	0x0810d51f
 810d498:	0810d563 	.word	0x0810d563
 810d49c:	0810d563 	.word	0x0810d563
 810d4a0:	0810d563 	.word	0x0810d563
 810d4a4:	0810d563 	.word	0x0810d563
 810d4a8:	0810d563 	.word	0x0810d563
 810d4ac:	0810d563 	.word	0x0810d563
 810d4b0:	0810d563 	.word	0x0810d563
 810d4b4:	0810d52f 	.word	0x0810d52f
 810d4b8:	0810d563 	.word	0x0810d563
 810d4bc:	0810d563 	.word	0x0810d563
 810d4c0:	0810d563 	.word	0x0810d563
 810d4c4:	0810d563 	.word	0x0810d563
 810d4c8:	0810d563 	.word	0x0810d563
 810d4cc:	0810d563 	.word	0x0810d563
 810d4d0:	0810d563 	.word	0x0810d563
 810d4d4:	0810d563 	.word	0x0810d563
 810d4d8:	0810d563 	.word	0x0810d563
 810d4dc:	0810d563 	.word	0x0810d563
 810d4e0:	0810d563 	.word	0x0810d563
 810d4e4:	0810d563 	.word	0x0810d563
 810d4e8:	0810d563 	.word	0x0810d563
 810d4ec:	0810d563 	.word	0x0810d563
 810d4f0:	0810d563 	.word	0x0810d563
 810d4f4:	0810d555 	.word	0x0810d555
 810d4f8:	2b40      	cmp	r3, #64	@ 0x40
 810d4fa:	d02e      	beq.n	810d55a <UART_SetConfig+0x8aa>
 810d4fc:	e031      	b.n	810d562 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d4fe:	f7fa fce7 	bl	8107ed0 <HAL_RCC_GetPCLK1Freq>
 810d502:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d504:	e033      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d506:	f7fa fcf9 	bl	8107efc <HAL_RCC_GetPCLK2Freq>
 810d50a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d50c:	e02f      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d50e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d512:	4618      	mov	r0, r3
 810d514:	f7fc fca8 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d51c:	e027      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d51e:	f107 0318 	add.w	r3, r7, #24
 810d522:	4618      	mov	r0, r3
 810d524:	f7fc fdf4 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d528:	69fb      	ldr	r3, [r7, #28]
 810d52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d52c:	e01f      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d52e:	4b2d      	ldr	r3, [pc, #180]	@ (810d5e4 <UART_SetConfig+0x934>)
 810d530:	681b      	ldr	r3, [r3, #0]
 810d532:	f003 0320 	and.w	r3, r3, #32
 810d536:	2b00      	cmp	r3, #0
 810d538:	d009      	beq.n	810d54e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d53a:	4b2a      	ldr	r3, [pc, #168]	@ (810d5e4 <UART_SetConfig+0x934>)
 810d53c:	681b      	ldr	r3, [r3, #0]
 810d53e:	08db      	lsrs	r3, r3, #3
 810d540:	f003 0303 	and.w	r3, r3, #3
 810d544:	4a24      	ldr	r2, [pc, #144]	@ (810d5d8 <UART_SetConfig+0x928>)
 810d546:	fa22 f303 	lsr.w	r3, r2, r3
 810d54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d54c:	e00f      	b.n	810d56e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810d54e:	4b22      	ldr	r3, [pc, #136]	@ (810d5d8 <UART_SetConfig+0x928>)
 810d550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d552:	e00c      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d554:	4b21      	ldr	r3, [pc, #132]	@ (810d5dc <UART_SetConfig+0x92c>)
 810d556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d558:	e009      	b.n	810d56e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d55a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d560:	e005      	b.n	810d56e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810d562:	2300      	movs	r3, #0
 810d564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d566:	2301      	movs	r3, #1
 810d568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d56c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810d56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d570:	2b00      	cmp	r3, #0
 810d572:	f000 80e7 	beq.w	810d744 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d576:	697b      	ldr	r3, [r7, #20]
 810d578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d57a:	4a19      	ldr	r2, [pc, #100]	@ (810d5e0 <UART_SetConfig+0x930>)
 810d57c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d580:	461a      	mov	r2, r3
 810d582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d584:	fbb3 f3f2 	udiv	r3, r3, r2
 810d588:	005a      	lsls	r2, r3, #1
 810d58a:	697b      	ldr	r3, [r7, #20]
 810d58c:	685b      	ldr	r3, [r3, #4]
 810d58e:	085b      	lsrs	r3, r3, #1
 810d590:	441a      	add	r2, r3
 810d592:	697b      	ldr	r3, [r7, #20]
 810d594:	685b      	ldr	r3, [r3, #4]
 810d596:	fbb2 f3f3 	udiv	r3, r2, r3
 810d59a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d59e:	2b0f      	cmp	r3, #15
 810d5a0:	d916      	bls.n	810d5d0 <UART_SetConfig+0x920>
 810d5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d5a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d5a8:	d212      	bcs.n	810d5d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810d5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d5ac:	b29b      	uxth	r3, r3
 810d5ae:	f023 030f 	bic.w	r3, r3, #15
 810d5b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810d5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d5b6:	085b      	lsrs	r3, r3, #1
 810d5b8:	b29b      	uxth	r3, r3
 810d5ba:	f003 0307 	and.w	r3, r3, #7
 810d5be:	b29a      	uxth	r2, r3
 810d5c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810d5c2:	4313      	orrs	r3, r2
 810d5c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810d5c6:	697b      	ldr	r3, [r7, #20]
 810d5c8:	681b      	ldr	r3, [r3, #0]
 810d5ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810d5cc:	60da      	str	r2, [r3, #12]
 810d5ce:	e0b9      	b.n	810d744 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810d5d0:	2301      	movs	r3, #1
 810d5d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d5d6:	e0b5      	b.n	810d744 <UART_SetConfig+0xa94>
 810d5d8:	03d09000 	.word	0x03d09000
 810d5dc:	003d0900 	.word	0x003d0900
 810d5e0:	08113988 	.word	0x08113988
 810d5e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810d5e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d5ec:	2b20      	cmp	r3, #32
 810d5ee:	dc49      	bgt.n	810d684 <UART_SetConfig+0x9d4>
 810d5f0:	2b00      	cmp	r3, #0
 810d5f2:	db7c      	blt.n	810d6ee <UART_SetConfig+0xa3e>
 810d5f4:	2b20      	cmp	r3, #32
 810d5f6:	d87a      	bhi.n	810d6ee <UART_SetConfig+0xa3e>
 810d5f8:	a201      	add	r2, pc, #4	@ (adr r2, 810d600 <UART_SetConfig+0x950>)
 810d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d5fe:	bf00      	nop
 810d600:	0810d68b 	.word	0x0810d68b
 810d604:	0810d693 	.word	0x0810d693
 810d608:	0810d6ef 	.word	0x0810d6ef
 810d60c:	0810d6ef 	.word	0x0810d6ef
 810d610:	0810d69b 	.word	0x0810d69b
 810d614:	0810d6ef 	.word	0x0810d6ef
 810d618:	0810d6ef 	.word	0x0810d6ef
 810d61c:	0810d6ef 	.word	0x0810d6ef
 810d620:	0810d6ab 	.word	0x0810d6ab
 810d624:	0810d6ef 	.word	0x0810d6ef
 810d628:	0810d6ef 	.word	0x0810d6ef
 810d62c:	0810d6ef 	.word	0x0810d6ef
 810d630:	0810d6ef 	.word	0x0810d6ef
 810d634:	0810d6ef 	.word	0x0810d6ef
 810d638:	0810d6ef 	.word	0x0810d6ef
 810d63c:	0810d6ef 	.word	0x0810d6ef
 810d640:	0810d6bb 	.word	0x0810d6bb
 810d644:	0810d6ef 	.word	0x0810d6ef
 810d648:	0810d6ef 	.word	0x0810d6ef
 810d64c:	0810d6ef 	.word	0x0810d6ef
 810d650:	0810d6ef 	.word	0x0810d6ef
 810d654:	0810d6ef 	.word	0x0810d6ef
 810d658:	0810d6ef 	.word	0x0810d6ef
 810d65c:	0810d6ef 	.word	0x0810d6ef
 810d660:	0810d6ef 	.word	0x0810d6ef
 810d664:	0810d6ef 	.word	0x0810d6ef
 810d668:	0810d6ef 	.word	0x0810d6ef
 810d66c:	0810d6ef 	.word	0x0810d6ef
 810d670:	0810d6ef 	.word	0x0810d6ef
 810d674:	0810d6ef 	.word	0x0810d6ef
 810d678:	0810d6ef 	.word	0x0810d6ef
 810d67c:	0810d6ef 	.word	0x0810d6ef
 810d680:	0810d6e1 	.word	0x0810d6e1
 810d684:	2b40      	cmp	r3, #64	@ 0x40
 810d686:	d02e      	beq.n	810d6e6 <UART_SetConfig+0xa36>
 810d688:	e031      	b.n	810d6ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d68a:	f7fa fc21 	bl	8107ed0 <HAL_RCC_GetPCLK1Freq>
 810d68e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d690:	e033      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d692:	f7fa fc33 	bl	8107efc <HAL_RCC_GetPCLK2Freq>
 810d696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d698:	e02f      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d69a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d69e:	4618      	mov	r0, r3
 810d6a0:	f7fc fbe2 	bl	8109e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6a8:	e027      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d6aa:	f107 0318 	add.w	r3, r7, #24
 810d6ae:	4618      	mov	r0, r3
 810d6b0:	f7fc fd2e 	bl	810a110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d6b4:	69fb      	ldr	r3, [r7, #28]
 810d6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6b8:	e01f      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d6ba:	4b2d      	ldr	r3, [pc, #180]	@ (810d770 <UART_SetConfig+0xac0>)
 810d6bc:	681b      	ldr	r3, [r3, #0]
 810d6be:	f003 0320 	and.w	r3, r3, #32
 810d6c2:	2b00      	cmp	r3, #0
 810d6c4:	d009      	beq.n	810d6da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d6c6:	4b2a      	ldr	r3, [pc, #168]	@ (810d770 <UART_SetConfig+0xac0>)
 810d6c8:	681b      	ldr	r3, [r3, #0]
 810d6ca:	08db      	lsrs	r3, r3, #3
 810d6cc:	f003 0303 	and.w	r3, r3, #3
 810d6d0:	4a28      	ldr	r2, [pc, #160]	@ (810d774 <UART_SetConfig+0xac4>)
 810d6d2:	fa22 f303 	lsr.w	r3, r2, r3
 810d6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d6d8:	e00f      	b.n	810d6fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810d6da:	4b26      	ldr	r3, [pc, #152]	@ (810d774 <UART_SetConfig+0xac4>)
 810d6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6de:	e00c      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d6e0:	4b25      	ldr	r3, [pc, #148]	@ (810d778 <UART_SetConfig+0xac8>)
 810d6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6e4:	e009      	b.n	810d6fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d6e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d6ec:	e005      	b.n	810d6fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810d6ee:	2300      	movs	r3, #0
 810d6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d6f2:	2301      	movs	r3, #1
 810d6f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d6f8:	bf00      	nop
    }

    if (pclk != 0U)
 810d6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d6fc:	2b00      	cmp	r3, #0
 810d6fe:	d021      	beq.n	810d744 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d700:	697b      	ldr	r3, [r7, #20]
 810d702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d704:	4a1d      	ldr	r2, [pc, #116]	@ (810d77c <UART_SetConfig+0xacc>)
 810d706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d70a:	461a      	mov	r2, r3
 810d70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d70e:	fbb3 f2f2 	udiv	r2, r3, r2
 810d712:	697b      	ldr	r3, [r7, #20]
 810d714:	685b      	ldr	r3, [r3, #4]
 810d716:	085b      	lsrs	r3, r3, #1
 810d718:	441a      	add	r2, r3
 810d71a:	697b      	ldr	r3, [r7, #20]
 810d71c:	685b      	ldr	r3, [r3, #4]
 810d71e:	fbb2 f3f3 	udiv	r3, r2, r3
 810d722:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d726:	2b0f      	cmp	r3, #15
 810d728:	d909      	bls.n	810d73e <UART_SetConfig+0xa8e>
 810d72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d72c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d730:	d205      	bcs.n	810d73e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d734:	b29a      	uxth	r2, r3
 810d736:	697b      	ldr	r3, [r7, #20]
 810d738:	681b      	ldr	r3, [r3, #0]
 810d73a:	60da      	str	r2, [r3, #12]
 810d73c:	e002      	b.n	810d744 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810d73e:	2301      	movs	r3, #1
 810d740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810d744:	697b      	ldr	r3, [r7, #20]
 810d746:	2201      	movs	r2, #1
 810d748:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810d74c:	697b      	ldr	r3, [r7, #20]
 810d74e:	2201      	movs	r2, #1
 810d750:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810d754:	697b      	ldr	r3, [r7, #20]
 810d756:	2200      	movs	r2, #0
 810d758:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810d75a:	697b      	ldr	r3, [r7, #20]
 810d75c:	2200      	movs	r2, #0
 810d75e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810d760:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810d764:	4618      	mov	r0, r3
 810d766:	3748      	adds	r7, #72	@ 0x48
 810d768:	46bd      	mov	sp, r7
 810d76a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810d76e:	bf00      	nop
 810d770:	58024400 	.word	0x58024400
 810d774:	03d09000 	.word	0x03d09000
 810d778:	003d0900 	.word	0x003d0900
 810d77c:	08113988 	.word	0x08113988

0810d780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810d780:	b480      	push	{r7}
 810d782:	b083      	sub	sp, #12
 810d784:	af00      	add	r7, sp, #0
 810d786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810d788:	687b      	ldr	r3, [r7, #4]
 810d78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d78c:	f003 0308 	and.w	r3, r3, #8
 810d790:	2b00      	cmp	r3, #0
 810d792:	d00a      	beq.n	810d7aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810d794:	687b      	ldr	r3, [r7, #4]
 810d796:	681b      	ldr	r3, [r3, #0]
 810d798:	685b      	ldr	r3, [r3, #4]
 810d79a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810d79e:	687b      	ldr	r3, [r7, #4]
 810d7a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810d7a2:	687b      	ldr	r3, [r7, #4]
 810d7a4:	681b      	ldr	r3, [r3, #0]
 810d7a6:	430a      	orrs	r2, r1
 810d7a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810d7aa:	687b      	ldr	r3, [r7, #4]
 810d7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d7ae:	f003 0301 	and.w	r3, r3, #1
 810d7b2:	2b00      	cmp	r3, #0
 810d7b4:	d00a      	beq.n	810d7cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810d7b6:	687b      	ldr	r3, [r7, #4]
 810d7b8:	681b      	ldr	r3, [r3, #0]
 810d7ba:	685b      	ldr	r3, [r3, #4]
 810d7bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810d7c0:	687b      	ldr	r3, [r7, #4]
 810d7c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d7c4:	687b      	ldr	r3, [r7, #4]
 810d7c6:	681b      	ldr	r3, [r3, #0]
 810d7c8:	430a      	orrs	r2, r1
 810d7ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810d7cc:	687b      	ldr	r3, [r7, #4]
 810d7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d7d0:	f003 0302 	and.w	r3, r3, #2
 810d7d4:	2b00      	cmp	r3, #0
 810d7d6:	d00a      	beq.n	810d7ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810d7d8:	687b      	ldr	r3, [r7, #4]
 810d7da:	681b      	ldr	r3, [r3, #0]
 810d7dc:	685b      	ldr	r3, [r3, #4]
 810d7de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810d7e2:	687b      	ldr	r3, [r7, #4]
 810d7e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810d7e6:	687b      	ldr	r3, [r7, #4]
 810d7e8:	681b      	ldr	r3, [r3, #0]
 810d7ea:	430a      	orrs	r2, r1
 810d7ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810d7ee:	687b      	ldr	r3, [r7, #4]
 810d7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d7f2:	f003 0304 	and.w	r3, r3, #4
 810d7f6:	2b00      	cmp	r3, #0
 810d7f8:	d00a      	beq.n	810d810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810d7fa:	687b      	ldr	r3, [r7, #4]
 810d7fc:	681b      	ldr	r3, [r3, #0]
 810d7fe:	685b      	ldr	r3, [r3, #4]
 810d800:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810d804:	687b      	ldr	r3, [r7, #4]
 810d806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810d808:	687b      	ldr	r3, [r7, #4]
 810d80a:	681b      	ldr	r3, [r3, #0]
 810d80c:	430a      	orrs	r2, r1
 810d80e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810d810:	687b      	ldr	r3, [r7, #4]
 810d812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d814:	f003 0310 	and.w	r3, r3, #16
 810d818:	2b00      	cmp	r3, #0
 810d81a:	d00a      	beq.n	810d832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810d81c:	687b      	ldr	r3, [r7, #4]
 810d81e:	681b      	ldr	r3, [r3, #0]
 810d820:	689b      	ldr	r3, [r3, #8]
 810d822:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810d826:	687b      	ldr	r3, [r7, #4]
 810d828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810d82a:	687b      	ldr	r3, [r7, #4]
 810d82c:	681b      	ldr	r3, [r3, #0]
 810d82e:	430a      	orrs	r2, r1
 810d830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810d832:	687b      	ldr	r3, [r7, #4]
 810d834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d836:	f003 0320 	and.w	r3, r3, #32
 810d83a:	2b00      	cmp	r3, #0
 810d83c:	d00a      	beq.n	810d854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810d83e:	687b      	ldr	r3, [r7, #4]
 810d840:	681b      	ldr	r3, [r3, #0]
 810d842:	689b      	ldr	r3, [r3, #8]
 810d844:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810d848:	687b      	ldr	r3, [r7, #4]
 810d84a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810d84c:	687b      	ldr	r3, [r7, #4]
 810d84e:	681b      	ldr	r3, [r3, #0]
 810d850:	430a      	orrs	r2, r1
 810d852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810d854:	687b      	ldr	r3, [r7, #4]
 810d856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d85c:	2b00      	cmp	r3, #0
 810d85e:	d01a      	beq.n	810d896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810d860:	687b      	ldr	r3, [r7, #4]
 810d862:	681b      	ldr	r3, [r3, #0]
 810d864:	685b      	ldr	r3, [r3, #4]
 810d866:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810d86a:	687b      	ldr	r3, [r7, #4]
 810d86c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810d86e:	687b      	ldr	r3, [r7, #4]
 810d870:	681b      	ldr	r3, [r3, #0]
 810d872:	430a      	orrs	r2, r1
 810d874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810d876:	687b      	ldr	r3, [r7, #4]
 810d878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810d87a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d87e:	d10a      	bne.n	810d896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810d880:	687b      	ldr	r3, [r7, #4]
 810d882:	681b      	ldr	r3, [r3, #0]
 810d884:	685b      	ldr	r3, [r3, #4]
 810d886:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810d88a:	687b      	ldr	r3, [r7, #4]
 810d88c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810d88e:	687b      	ldr	r3, [r7, #4]
 810d890:	681b      	ldr	r3, [r3, #0]
 810d892:	430a      	orrs	r2, r1
 810d894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810d896:	687b      	ldr	r3, [r7, #4]
 810d898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d89e:	2b00      	cmp	r3, #0
 810d8a0:	d00a      	beq.n	810d8b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810d8a2:	687b      	ldr	r3, [r7, #4]
 810d8a4:	681b      	ldr	r3, [r3, #0]
 810d8a6:	685b      	ldr	r3, [r3, #4]
 810d8a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810d8ac:	687b      	ldr	r3, [r7, #4]
 810d8ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810d8b0:	687b      	ldr	r3, [r7, #4]
 810d8b2:	681b      	ldr	r3, [r3, #0]
 810d8b4:	430a      	orrs	r2, r1
 810d8b6:	605a      	str	r2, [r3, #4]
  }
}
 810d8b8:	bf00      	nop
 810d8ba:	370c      	adds	r7, #12
 810d8bc:	46bd      	mov	sp, r7
 810d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8c2:	4770      	bx	lr

0810d8c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810d8c4:	b580      	push	{r7, lr}
 810d8c6:	b098      	sub	sp, #96	@ 0x60
 810d8c8:	af02      	add	r7, sp, #8
 810d8ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d8cc:	687b      	ldr	r3, [r7, #4]
 810d8ce:	2200      	movs	r2, #0
 810d8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810d8d4:	f7f6 fd24 	bl	8104320 <HAL_GetTick>
 810d8d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810d8da:	687b      	ldr	r3, [r7, #4]
 810d8dc:	681b      	ldr	r3, [r3, #0]
 810d8de:	681b      	ldr	r3, [r3, #0]
 810d8e0:	f003 0308 	and.w	r3, r3, #8
 810d8e4:	2b08      	cmp	r3, #8
 810d8e6:	d12f      	bne.n	810d948 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d8e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810d8ec:	9300      	str	r3, [sp, #0]
 810d8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810d8f0:	2200      	movs	r2, #0
 810d8f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810d8f6:	6878      	ldr	r0, [r7, #4]
 810d8f8:	f000 f88e 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810d8fc:	4603      	mov	r3, r0
 810d8fe:	2b00      	cmp	r3, #0
 810d900:	d022      	beq.n	810d948 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810d902:	687b      	ldr	r3, [r7, #4]
 810d904:	681b      	ldr	r3, [r3, #0]
 810d906:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d90a:	e853 3f00 	ldrex	r3, [r3]
 810d90e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810d910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810d916:	653b      	str	r3, [r7, #80]	@ 0x50
 810d918:	687b      	ldr	r3, [r7, #4]
 810d91a:	681b      	ldr	r3, [r3, #0]
 810d91c:	461a      	mov	r2, r3
 810d91e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810d920:	647b      	str	r3, [r7, #68]	@ 0x44
 810d922:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810d926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810d928:	e841 2300 	strex	r3, r2, [r1]
 810d92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810d92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d930:	2b00      	cmp	r3, #0
 810d932:	d1e6      	bne.n	810d902 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810d934:	687b      	ldr	r3, [r7, #4]
 810d936:	2220      	movs	r2, #32
 810d938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810d93c:	687b      	ldr	r3, [r7, #4]
 810d93e:	2200      	movs	r2, #0
 810d940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d944:	2303      	movs	r3, #3
 810d946:	e063      	b.n	810da10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810d948:	687b      	ldr	r3, [r7, #4]
 810d94a:	681b      	ldr	r3, [r3, #0]
 810d94c:	681b      	ldr	r3, [r3, #0]
 810d94e:	f003 0304 	and.w	r3, r3, #4
 810d952:	2b04      	cmp	r3, #4
 810d954:	d149      	bne.n	810d9ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d956:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810d95a:	9300      	str	r3, [sp, #0]
 810d95c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810d95e:	2200      	movs	r2, #0
 810d960:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810d964:	6878      	ldr	r0, [r7, #4]
 810d966:	f000 f857 	bl	810da18 <UART_WaitOnFlagUntilTimeout>
 810d96a:	4603      	mov	r3, r0
 810d96c:	2b00      	cmp	r3, #0
 810d96e:	d03c      	beq.n	810d9ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810d970:	687b      	ldr	r3, [r7, #4]
 810d972:	681b      	ldr	r3, [r3, #0]
 810d974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d978:	e853 3f00 	ldrex	r3, [r3]
 810d97c:	623b      	str	r3, [r7, #32]
   return(result);
 810d97e:	6a3b      	ldr	r3, [r7, #32]
 810d980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810d984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810d986:	687b      	ldr	r3, [r7, #4]
 810d988:	681b      	ldr	r3, [r3, #0]
 810d98a:	461a      	mov	r2, r3
 810d98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810d98e:	633b      	str	r3, [r7, #48]	@ 0x30
 810d990:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810d994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d996:	e841 2300 	strex	r3, r2, [r1]
 810d99a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d99e:	2b00      	cmp	r3, #0
 810d9a0:	d1e6      	bne.n	810d970 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d9a2:	687b      	ldr	r3, [r7, #4]
 810d9a4:	681b      	ldr	r3, [r3, #0]
 810d9a6:	3308      	adds	r3, #8
 810d9a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d9aa:	693b      	ldr	r3, [r7, #16]
 810d9ac:	e853 3f00 	ldrex	r3, [r3]
 810d9b0:	60fb      	str	r3, [r7, #12]
   return(result);
 810d9b2:	68fb      	ldr	r3, [r7, #12]
 810d9b4:	f023 0301 	bic.w	r3, r3, #1
 810d9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 810d9ba:	687b      	ldr	r3, [r7, #4]
 810d9bc:	681b      	ldr	r3, [r3, #0]
 810d9be:	3308      	adds	r3, #8
 810d9c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810d9c2:	61fa      	str	r2, [r7, #28]
 810d9c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d9c6:	69b9      	ldr	r1, [r7, #24]
 810d9c8:	69fa      	ldr	r2, [r7, #28]
 810d9ca:	e841 2300 	strex	r3, r2, [r1]
 810d9ce:	617b      	str	r3, [r7, #20]
   return(result);
 810d9d0:	697b      	ldr	r3, [r7, #20]
 810d9d2:	2b00      	cmp	r3, #0
 810d9d4:	d1e5      	bne.n	810d9a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810d9d6:	687b      	ldr	r3, [r7, #4]
 810d9d8:	2220      	movs	r2, #32
 810d9da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810d9de:	687b      	ldr	r3, [r7, #4]
 810d9e0:	2200      	movs	r2, #0
 810d9e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d9e6:	2303      	movs	r3, #3
 810d9e8:	e012      	b.n	810da10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810d9ea:	687b      	ldr	r3, [r7, #4]
 810d9ec:	2220      	movs	r2, #32
 810d9ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810d9f2:	687b      	ldr	r3, [r7, #4]
 810d9f4:	2220      	movs	r2, #32
 810d9f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d9fa:	687b      	ldr	r3, [r7, #4]
 810d9fc:	2200      	movs	r2, #0
 810d9fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810da00:	687b      	ldr	r3, [r7, #4]
 810da02:	2200      	movs	r2, #0
 810da04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810da06:	687b      	ldr	r3, [r7, #4]
 810da08:	2200      	movs	r2, #0
 810da0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810da0e:	2300      	movs	r3, #0
}
 810da10:	4618      	mov	r0, r3
 810da12:	3758      	adds	r7, #88	@ 0x58
 810da14:	46bd      	mov	sp, r7
 810da16:	bd80      	pop	{r7, pc}

0810da18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810da18:	b580      	push	{r7, lr}
 810da1a:	b084      	sub	sp, #16
 810da1c:	af00      	add	r7, sp, #0
 810da1e:	60f8      	str	r0, [r7, #12]
 810da20:	60b9      	str	r1, [r7, #8]
 810da22:	603b      	str	r3, [r7, #0]
 810da24:	4613      	mov	r3, r2
 810da26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810da28:	e04f      	b.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810da2a:	69bb      	ldr	r3, [r7, #24]
 810da2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810da30:	d04b      	beq.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810da32:	f7f6 fc75 	bl	8104320 <HAL_GetTick>
 810da36:	4602      	mov	r2, r0
 810da38:	683b      	ldr	r3, [r7, #0]
 810da3a:	1ad3      	subs	r3, r2, r3
 810da3c:	69ba      	ldr	r2, [r7, #24]
 810da3e:	429a      	cmp	r2, r3
 810da40:	d302      	bcc.n	810da48 <UART_WaitOnFlagUntilTimeout+0x30>
 810da42:	69bb      	ldr	r3, [r7, #24]
 810da44:	2b00      	cmp	r3, #0
 810da46:	d101      	bne.n	810da4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810da48:	2303      	movs	r3, #3
 810da4a:	e04e      	b.n	810daea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810da4c:	68fb      	ldr	r3, [r7, #12]
 810da4e:	681b      	ldr	r3, [r3, #0]
 810da50:	681b      	ldr	r3, [r3, #0]
 810da52:	f003 0304 	and.w	r3, r3, #4
 810da56:	2b00      	cmp	r3, #0
 810da58:	d037      	beq.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
 810da5a:	68bb      	ldr	r3, [r7, #8]
 810da5c:	2b80      	cmp	r3, #128	@ 0x80
 810da5e:	d034      	beq.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
 810da60:	68bb      	ldr	r3, [r7, #8]
 810da62:	2b40      	cmp	r3, #64	@ 0x40
 810da64:	d031      	beq.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810da66:	68fb      	ldr	r3, [r7, #12]
 810da68:	681b      	ldr	r3, [r3, #0]
 810da6a:	69db      	ldr	r3, [r3, #28]
 810da6c:	f003 0308 	and.w	r3, r3, #8
 810da70:	2b08      	cmp	r3, #8
 810da72:	d110      	bne.n	810da96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810da74:	68fb      	ldr	r3, [r7, #12]
 810da76:	681b      	ldr	r3, [r3, #0]
 810da78:	2208      	movs	r2, #8
 810da7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810da7c:	68f8      	ldr	r0, [r7, #12]
 810da7e:	f000 f95b 	bl	810dd38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810da82:	68fb      	ldr	r3, [r7, #12]
 810da84:	2208      	movs	r2, #8
 810da86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810da8a:	68fb      	ldr	r3, [r7, #12]
 810da8c:	2200      	movs	r2, #0
 810da8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810da92:	2301      	movs	r3, #1
 810da94:	e029      	b.n	810daea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810da96:	68fb      	ldr	r3, [r7, #12]
 810da98:	681b      	ldr	r3, [r3, #0]
 810da9a:	69db      	ldr	r3, [r3, #28]
 810da9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810daa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810daa4:	d111      	bne.n	810daca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810daa6:	68fb      	ldr	r3, [r7, #12]
 810daa8:	681b      	ldr	r3, [r3, #0]
 810daaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810daae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810dab0:	68f8      	ldr	r0, [r7, #12]
 810dab2:	f000 f941 	bl	810dd38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810dab6:	68fb      	ldr	r3, [r7, #12]
 810dab8:	2220      	movs	r2, #32
 810daba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810dabe:	68fb      	ldr	r3, [r7, #12]
 810dac0:	2200      	movs	r2, #0
 810dac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810dac6:	2303      	movs	r3, #3
 810dac8:	e00f      	b.n	810daea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810daca:	68fb      	ldr	r3, [r7, #12]
 810dacc:	681b      	ldr	r3, [r3, #0]
 810dace:	69da      	ldr	r2, [r3, #28]
 810dad0:	68bb      	ldr	r3, [r7, #8]
 810dad2:	4013      	ands	r3, r2
 810dad4:	68ba      	ldr	r2, [r7, #8]
 810dad6:	429a      	cmp	r2, r3
 810dad8:	bf0c      	ite	eq
 810dada:	2301      	moveq	r3, #1
 810dadc:	2300      	movne	r3, #0
 810dade:	b2db      	uxtb	r3, r3
 810dae0:	461a      	mov	r2, r3
 810dae2:	79fb      	ldrb	r3, [r7, #7]
 810dae4:	429a      	cmp	r2, r3
 810dae6:	d0a0      	beq.n	810da2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810dae8:	2300      	movs	r3, #0
}
 810daea:	4618      	mov	r0, r3
 810daec:	3710      	adds	r7, #16
 810daee:	46bd      	mov	sp, r7
 810daf0:	bd80      	pop	{r7, pc}
	...

0810daf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810daf4:	b480      	push	{r7}
 810daf6:	b0a3      	sub	sp, #140	@ 0x8c
 810daf8:	af00      	add	r7, sp, #0
 810dafa:	60f8      	str	r0, [r7, #12]
 810dafc:	60b9      	str	r1, [r7, #8]
 810dafe:	4613      	mov	r3, r2
 810db00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810db02:	68fb      	ldr	r3, [r7, #12]
 810db04:	68ba      	ldr	r2, [r7, #8]
 810db06:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810db08:	68fb      	ldr	r3, [r7, #12]
 810db0a:	88fa      	ldrh	r2, [r7, #6]
 810db0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810db10:	68fb      	ldr	r3, [r7, #12]
 810db12:	88fa      	ldrh	r2, [r7, #6]
 810db14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810db18:	68fb      	ldr	r3, [r7, #12]
 810db1a:	2200      	movs	r2, #0
 810db1c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810db1e:	68fb      	ldr	r3, [r7, #12]
 810db20:	689b      	ldr	r3, [r3, #8]
 810db22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810db26:	d10e      	bne.n	810db46 <UART_Start_Receive_IT+0x52>
 810db28:	68fb      	ldr	r3, [r7, #12]
 810db2a:	691b      	ldr	r3, [r3, #16]
 810db2c:	2b00      	cmp	r3, #0
 810db2e:	d105      	bne.n	810db3c <UART_Start_Receive_IT+0x48>
 810db30:	68fb      	ldr	r3, [r7, #12]
 810db32:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810db36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810db3a:	e02d      	b.n	810db98 <UART_Start_Receive_IT+0xa4>
 810db3c:	68fb      	ldr	r3, [r7, #12]
 810db3e:	22ff      	movs	r2, #255	@ 0xff
 810db40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810db44:	e028      	b.n	810db98 <UART_Start_Receive_IT+0xa4>
 810db46:	68fb      	ldr	r3, [r7, #12]
 810db48:	689b      	ldr	r3, [r3, #8]
 810db4a:	2b00      	cmp	r3, #0
 810db4c:	d10d      	bne.n	810db6a <UART_Start_Receive_IT+0x76>
 810db4e:	68fb      	ldr	r3, [r7, #12]
 810db50:	691b      	ldr	r3, [r3, #16]
 810db52:	2b00      	cmp	r3, #0
 810db54:	d104      	bne.n	810db60 <UART_Start_Receive_IT+0x6c>
 810db56:	68fb      	ldr	r3, [r7, #12]
 810db58:	22ff      	movs	r2, #255	@ 0xff
 810db5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810db5e:	e01b      	b.n	810db98 <UART_Start_Receive_IT+0xa4>
 810db60:	68fb      	ldr	r3, [r7, #12]
 810db62:	227f      	movs	r2, #127	@ 0x7f
 810db64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810db68:	e016      	b.n	810db98 <UART_Start_Receive_IT+0xa4>
 810db6a:	68fb      	ldr	r3, [r7, #12]
 810db6c:	689b      	ldr	r3, [r3, #8]
 810db6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810db72:	d10d      	bne.n	810db90 <UART_Start_Receive_IT+0x9c>
 810db74:	68fb      	ldr	r3, [r7, #12]
 810db76:	691b      	ldr	r3, [r3, #16]
 810db78:	2b00      	cmp	r3, #0
 810db7a:	d104      	bne.n	810db86 <UART_Start_Receive_IT+0x92>
 810db7c:	68fb      	ldr	r3, [r7, #12]
 810db7e:	227f      	movs	r2, #127	@ 0x7f
 810db80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810db84:	e008      	b.n	810db98 <UART_Start_Receive_IT+0xa4>
 810db86:	68fb      	ldr	r3, [r7, #12]
 810db88:	223f      	movs	r2, #63	@ 0x3f
 810db8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810db8e:	e003      	b.n	810db98 <UART_Start_Receive_IT+0xa4>
 810db90:	68fb      	ldr	r3, [r7, #12]
 810db92:	2200      	movs	r2, #0
 810db94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810db98:	68fb      	ldr	r3, [r7, #12]
 810db9a:	2200      	movs	r2, #0
 810db9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810dba0:	68fb      	ldr	r3, [r7, #12]
 810dba2:	2222      	movs	r2, #34	@ 0x22
 810dba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810dba8:	68fb      	ldr	r3, [r7, #12]
 810dbaa:	681b      	ldr	r3, [r3, #0]
 810dbac:	3308      	adds	r3, #8
 810dbae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dbb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810dbb2:	e853 3f00 	ldrex	r3, [r3]
 810dbb6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810dbb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810dbba:	f043 0301 	orr.w	r3, r3, #1
 810dbbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810dbc2:	68fb      	ldr	r3, [r7, #12]
 810dbc4:	681b      	ldr	r3, [r3, #0]
 810dbc6:	3308      	adds	r3, #8
 810dbc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810dbcc:	673a      	str	r2, [r7, #112]	@ 0x70
 810dbce:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dbd0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810dbd2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810dbd4:	e841 2300 	strex	r3, r2, [r1]
 810dbd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810dbda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810dbdc:	2b00      	cmp	r3, #0
 810dbde:	d1e3      	bne.n	810dba8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810dbe0:	68fb      	ldr	r3, [r7, #12]
 810dbe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810dbe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810dbe8:	d14f      	bne.n	810dc8a <UART_Start_Receive_IT+0x196>
 810dbea:	68fb      	ldr	r3, [r7, #12]
 810dbec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810dbf0:	88fa      	ldrh	r2, [r7, #6]
 810dbf2:	429a      	cmp	r2, r3
 810dbf4:	d349      	bcc.n	810dc8a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810dbf6:	68fb      	ldr	r3, [r7, #12]
 810dbf8:	689b      	ldr	r3, [r3, #8]
 810dbfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810dbfe:	d107      	bne.n	810dc10 <UART_Start_Receive_IT+0x11c>
 810dc00:	68fb      	ldr	r3, [r7, #12]
 810dc02:	691b      	ldr	r3, [r3, #16]
 810dc04:	2b00      	cmp	r3, #0
 810dc06:	d103      	bne.n	810dc10 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810dc08:	68fb      	ldr	r3, [r7, #12]
 810dc0a:	4a47      	ldr	r2, [pc, #284]	@ (810dd28 <UART_Start_Receive_IT+0x234>)
 810dc0c:	675a      	str	r2, [r3, #116]	@ 0x74
 810dc0e:	e002      	b.n	810dc16 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810dc10:	68fb      	ldr	r3, [r7, #12]
 810dc12:	4a46      	ldr	r2, [pc, #280]	@ (810dd2c <UART_Start_Receive_IT+0x238>)
 810dc14:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810dc16:	68fb      	ldr	r3, [r7, #12]
 810dc18:	691b      	ldr	r3, [r3, #16]
 810dc1a:	2b00      	cmp	r3, #0
 810dc1c:	d01a      	beq.n	810dc54 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810dc1e:	68fb      	ldr	r3, [r7, #12]
 810dc20:	681b      	ldr	r3, [r3, #0]
 810dc22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dc24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810dc26:	e853 3f00 	ldrex	r3, [r3]
 810dc2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810dc2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dc2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810dc32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810dc36:	68fb      	ldr	r3, [r7, #12]
 810dc38:	681b      	ldr	r3, [r3, #0]
 810dc3a:	461a      	mov	r2, r3
 810dc3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810dc40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810dc42:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dc44:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810dc46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810dc48:	e841 2300 	strex	r3, r2, [r1]
 810dc4c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810dc4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810dc50:	2b00      	cmp	r3, #0
 810dc52:	d1e4      	bne.n	810dc1e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810dc54:	68fb      	ldr	r3, [r7, #12]
 810dc56:	681b      	ldr	r3, [r3, #0]
 810dc58:	3308      	adds	r3, #8
 810dc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dc5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dc5e:	e853 3f00 	ldrex	r3, [r3]
 810dc62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810dc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810dc6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810dc6c:	68fb      	ldr	r3, [r7, #12]
 810dc6e:	681b      	ldr	r3, [r3, #0]
 810dc70:	3308      	adds	r3, #8
 810dc72:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810dc74:	64ba      	str	r2, [r7, #72]	@ 0x48
 810dc76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dc78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810dc7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810dc7c:	e841 2300 	strex	r3, r2, [r1]
 810dc80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810dc82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810dc84:	2b00      	cmp	r3, #0
 810dc86:	d1e5      	bne.n	810dc54 <UART_Start_Receive_IT+0x160>
 810dc88:	e046      	b.n	810dd18 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810dc8a:	68fb      	ldr	r3, [r7, #12]
 810dc8c:	689b      	ldr	r3, [r3, #8]
 810dc8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810dc92:	d107      	bne.n	810dca4 <UART_Start_Receive_IT+0x1b0>
 810dc94:	68fb      	ldr	r3, [r7, #12]
 810dc96:	691b      	ldr	r3, [r3, #16]
 810dc98:	2b00      	cmp	r3, #0
 810dc9a:	d103      	bne.n	810dca4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 810dc9c:	68fb      	ldr	r3, [r7, #12]
 810dc9e:	4a24      	ldr	r2, [pc, #144]	@ (810dd30 <UART_Start_Receive_IT+0x23c>)
 810dca0:	675a      	str	r2, [r3, #116]	@ 0x74
 810dca2:	e002      	b.n	810dcaa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 810dca4:	68fb      	ldr	r3, [r7, #12]
 810dca6:	4a23      	ldr	r2, [pc, #140]	@ (810dd34 <UART_Start_Receive_IT+0x240>)
 810dca8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810dcaa:	68fb      	ldr	r3, [r7, #12]
 810dcac:	691b      	ldr	r3, [r3, #16]
 810dcae:	2b00      	cmp	r3, #0
 810dcb0:	d019      	beq.n	810dce6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 810dcb2:	68fb      	ldr	r3, [r7, #12]
 810dcb4:	681b      	ldr	r3, [r3, #0]
 810dcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dcba:	e853 3f00 	ldrex	r3, [r3]
 810dcbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810dcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dcc2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 810dcc6:	677b      	str	r3, [r7, #116]	@ 0x74
 810dcc8:	68fb      	ldr	r3, [r7, #12]
 810dcca:	681b      	ldr	r3, [r3, #0]
 810dccc:	461a      	mov	r2, r3
 810dcce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810dcd0:	637b      	str	r3, [r7, #52]	@ 0x34
 810dcd2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dcd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810dcd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810dcd8:	e841 2300 	strex	r3, r2, [r1]
 810dcdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810dcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dce0:	2b00      	cmp	r3, #0
 810dce2:	d1e6      	bne.n	810dcb2 <UART_Start_Receive_IT+0x1be>
 810dce4:	e018      	b.n	810dd18 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810dce6:	68fb      	ldr	r3, [r7, #12]
 810dce8:	681b      	ldr	r3, [r3, #0]
 810dcea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dcec:	697b      	ldr	r3, [r7, #20]
 810dcee:	e853 3f00 	ldrex	r3, [r3]
 810dcf2:	613b      	str	r3, [r7, #16]
   return(result);
 810dcf4:	693b      	ldr	r3, [r7, #16]
 810dcf6:	f043 0320 	orr.w	r3, r3, #32
 810dcfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 810dcfc:	68fb      	ldr	r3, [r7, #12]
 810dcfe:	681b      	ldr	r3, [r3, #0]
 810dd00:	461a      	mov	r2, r3
 810dd02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810dd04:	623b      	str	r3, [r7, #32]
 810dd06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dd08:	69f9      	ldr	r1, [r7, #28]
 810dd0a:	6a3a      	ldr	r2, [r7, #32]
 810dd0c:	e841 2300 	strex	r3, r2, [r1]
 810dd10:	61bb      	str	r3, [r7, #24]
   return(result);
 810dd12:	69bb      	ldr	r3, [r7, #24]
 810dd14:	2b00      	cmp	r3, #0
 810dd16:	d1e6      	bne.n	810dce6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 810dd18:	2300      	movs	r3, #0
}
 810dd1a:	4618      	mov	r0, r3
 810dd1c:	378c      	adds	r7, #140	@ 0x8c
 810dd1e:	46bd      	mov	sp, r7
 810dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd24:	4770      	bx	lr
 810dd26:	bf00      	nop
 810dd28:	0810e559 	.word	0x0810e559
 810dd2c:	0810e1f9 	.word	0x0810e1f9
 810dd30:	0810e041 	.word	0x0810e041
 810dd34:	0810de89 	.word	0x0810de89

0810dd38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810dd38:	b480      	push	{r7}
 810dd3a:	b095      	sub	sp, #84	@ 0x54
 810dd3c:	af00      	add	r7, sp, #0
 810dd3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810dd40:	687b      	ldr	r3, [r7, #4]
 810dd42:	681b      	ldr	r3, [r3, #0]
 810dd44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810dd48:	e853 3f00 	ldrex	r3, [r3]
 810dd4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810dd54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810dd56:	687b      	ldr	r3, [r7, #4]
 810dd58:	681b      	ldr	r3, [r3, #0]
 810dd5a:	461a      	mov	r2, r3
 810dd5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dd5e:	643b      	str	r3, [r7, #64]	@ 0x40
 810dd60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dd62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810dd64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810dd66:	e841 2300 	strex	r3, r2, [r1]
 810dd6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810dd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dd6e:	2b00      	cmp	r3, #0
 810dd70:	d1e6      	bne.n	810dd40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810dd72:	687b      	ldr	r3, [r7, #4]
 810dd74:	681b      	ldr	r3, [r3, #0]
 810dd76:	3308      	adds	r3, #8
 810dd78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dd7a:	6a3b      	ldr	r3, [r7, #32]
 810dd7c:	e853 3f00 	ldrex	r3, [r3]
 810dd80:	61fb      	str	r3, [r7, #28]
   return(result);
 810dd82:	69fb      	ldr	r3, [r7, #28]
 810dd84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810dd88:	f023 0301 	bic.w	r3, r3, #1
 810dd8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810dd8e:	687b      	ldr	r3, [r7, #4]
 810dd90:	681b      	ldr	r3, [r3, #0]
 810dd92:	3308      	adds	r3, #8
 810dd94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810dd96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810dd98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dd9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810dd9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810dd9e:	e841 2300 	strex	r3, r2, [r1]
 810dda2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810dda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dda6:	2b00      	cmp	r3, #0
 810dda8:	d1e3      	bne.n	810dd72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ddaa:	687b      	ldr	r3, [r7, #4]
 810ddac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ddae:	2b01      	cmp	r3, #1
 810ddb0:	d118      	bne.n	810dde4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ddb2:	687b      	ldr	r3, [r7, #4]
 810ddb4:	681b      	ldr	r3, [r3, #0]
 810ddb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ddb8:	68fb      	ldr	r3, [r7, #12]
 810ddba:	e853 3f00 	ldrex	r3, [r3]
 810ddbe:	60bb      	str	r3, [r7, #8]
   return(result);
 810ddc0:	68bb      	ldr	r3, [r7, #8]
 810ddc2:	f023 0310 	bic.w	r3, r3, #16
 810ddc6:	647b      	str	r3, [r7, #68]	@ 0x44
 810ddc8:	687b      	ldr	r3, [r7, #4]
 810ddca:	681b      	ldr	r3, [r3, #0]
 810ddcc:	461a      	mov	r2, r3
 810ddce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810ddd0:	61bb      	str	r3, [r7, #24]
 810ddd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ddd4:	6979      	ldr	r1, [r7, #20]
 810ddd6:	69ba      	ldr	r2, [r7, #24]
 810ddd8:	e841 2300 	strex	r3, r2, [r1]
 810dddc:	613b      	str	r3, [r7, #16]
   return(result);
 810ddde:	693b      	ldr	r3, [r7, #16]
 810dde0:	2b00      	cmp	r3, #0
 810dde2:	d1e6      	bne.n	810ddb2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810dde4:	687b      	ldr	r3, [r7, #4]
 810dde6:	2220      	movs	r2, #32
 810dde8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ddec:	687b      	ldr	r3, [r7, #4]
 810ddee:	2200      	movs	r2, #0
 810ddf0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810ddf2:	687b      	ldr	r3, [r7, #4]
 810ddf4:	2200      	movs	r2, #0
 810ddf6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810ddf8:	bf00      	nop
 810ddfa:	3754      	adds	r7, #84	@ 0x54
 810ddfc:	46bd      	mov	sp, r7
 810ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de02:	4770      	bx	lr

0810de04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810de04:	b580      	push	{r7, lr}
 810de06:	b084      	sub	sp, #16
 810de08:	af00      	add	r7, sp, #0
 810de0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810de0c:	687b      	ldr	r3, [r7, #4]
 810de0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810de10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810de12:	68fb      	ldr	r3, [r7, #12]
 810de14:	2200      	movs	r2, #0
 810de16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 810de1a:	68fb      	ldr	r3, [r7, #12]
 810de1c:	2200      	movs	r2, #0
 810de1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810de22:	68f8      	ldr	r0, [r7, #12]
 810de24:	f7fe ff2e 	bl	810cc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810de28:	bf00      	nop
 810de2a:	3710      	adds	r7, #16
 810de2c:	46bd      	mov	sp, r7
 810de2e:	bd80      	pop	{r7, pc}

0810de30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810de30:	b580      	push	{r7, lr}
 810de32:	b088      	sub	sp, #32
 810de34:	af00      	add	r7, sp, #0
 810de36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810de38:	687b      	ldr	r3, [r7, #4]
 810de3a:	681b      	ldr	r3, [r3, #0]
 810de3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810de3e:	68fb      	ldr	r3, [r7, #12]
 810de40:	e853 3f00 	ldrex	r3, [r3]
 810de44:	60bb      	str	r3, [r7, #8]
   return(result);
 810de46:	68bb      	ldr	r3, [r7, #8]
 810de48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810de4c:	61fb      	str	r3, [r7, #28]
 810de4e:	687b      	ldr	r3, [r7, #4]
 810de50:	681b      	ldr	r3, [r3, #0]
 810de52:	461a      	mov	r2, r3
 810de54:	69fb      	ldr	r3, [r7, #28]
 810de56:	61bb      	str	r3, [r7, #24]
 810de58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810de5a:	6979      	ldr	r1, [r7, #20]
 810de5c:	69ba      	ldr	r2, [r7, #24]
 810de5e:	e841 2300 	strex	r3, r2, [r1]
 810de62:	613b      	str	r3, [r7, #16]
   return(result);
 810de64:	693b      	ldr	r3, [r7, #16]
 810de66:	2b00      	cmp	r3, #0
 810de68:	d1e6      	bne.n	810de38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810de6a:	687b      	ldr	r3, [r7, #4]
 810de6c:	2220      	movs	r2, #32
 810de6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810de72:	687b      	ldr	r3, [r7, #4]
 810de74:	2200      	movs	r2, #0
 810de76:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810de78:	6878      	ldr	r0, [r7, #4]
 810de7a:	f7fe fef9 	bl	810cc70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810de7e:	bf00      	nop
 810de80:	3720      	adds	r7, #32
 810de82:	46bd      	mov	sp, r7
 810de84:	bd80      	pop	{r7, pc}
	...

0810de88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 810de88:	b580      	push	{r7, lr}
 810de8a:	b09c      	sub	sp, #112	@ 0x70
 810de8c:	af00      	add	r7, sp, #0
 810de8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 810de90:	687b      	ldr	r3, [r7, #4]
 810de92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810de96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810de9a:	687b      	ldr	r3, [r7, #4]
 810de9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810dea0:	2b22      	cmp	r3, #34	@ 0x22
 810dea2:	f040 80be 	bne.w	810e022 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810dea6:	687b      	ldr	r3, [r7, #4]
 810dea8:	681b      	ldr	r3, [r3, #0]
 810deaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810deac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810deb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 810deb4:	b2d9      	uxtb	r1, r3
 810deb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810deba:	b2da      	uxtb	r2, r3
 810debc:	687b      	ldr	r3, [r7, #4]
 810debe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810dec0:	400a      	ands	r2, r1
 810dec2:	b2d2      	uxtb	r2, r2
 810dec4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 810dec6:	687b      	ldr	r3, [r7, #4]
 810dec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810deca:	1c5a      	adds	r2, r3, #1
 810decc:	687b      	ldr	r3, [r7, #4]
 810dece:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810ded0:	687b      	ldr	r3, [r7, #4]
 810ded2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ded6:	b29b      	uxth	r3, r3
 810ded8:	3b01      	subs	r3, #1
 810deda:	b29a      	uxth	r2, r3
 810dedc:	687b      	ldr	r3, [r7, #4]
 810dede:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810dee2:	687b      	ldr	r3, [r7, #4]
 810dee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810dee8:	b29b      	uxth	r3, r3
 810deea:	2b00      	cmp	r3, #0
 810deec:	f040 80a1 	bne.w	810e032 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810def0:	687b      	ldr	r3, [r7, #4]
 810def2:	681b      	ldr	r3, [r3, #0]
 810def4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810def6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810def8:	e853 3f00 	ldrex	r3, [r3]
 810defc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810defe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810df00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810df04:	66bb      	str	r3, [r7, #104]	@ 0x68
 810df06:	687b      	ldr	r3, [r7, #4]
 810df08:	681b      	ldr	r3, [r3, #0]
 810df0a:	461a      	mov	r2, r3
 810df0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810df0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 810df10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810df12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810df14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810df16:	e841 2300 	strex	r3, r2, [r1]
 810df1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810df1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810df1e:	2b00      	cmp	r3, #0
 810df20:	d1e6      	bne.n	810def0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810df22:	687b      	ldr	r3, [r7, #4]
 810df24:	681b      	ldr	r3, [r3, #0]
 810df26:	3308      	adds	r3, #8
 810df28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810df2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810df2c:	e853 3f00 	ldrex	r3, [r3]
 810df30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810df32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810df34:	f023 0301 	bic.w	r3, r3, #1
 810df38:	667b      	str	r3, [r7, #100]	@ 0x64
 810df3a:	687b      	ldr	r3, [r7, #4]
 810df3c:	681b      	ldr	r3, [r3, #0]
 810df3e:	3308      	adds	r3, #8
 810df40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810df42:	647a      	str	r2, [r7, #68]	@ 0x44
 810df44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810df46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810df48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810df4a:	e841 2300 	strex	r3, r2, [r1]
 810df4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810df50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810df52:	2b00      	cmp	r3, #0
 810df54:	d1e5      	bne.n	810df22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810df56:	687b      	ldr	r3, [r7, #4]
 810df58:	2220      	movs	r2, #32
 810df5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810df5e:	687b      	ldr	r3, [r7, #4]
 810df60:	2200      	movs	r2, #0
 810df62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810df64:	687b      	ldr	r3, [r7, #4]
 810df66:	2200      	movs	r2, #0
 810df68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810df6a:	687b      	ldr	r3, [r7, #4]
 810df6c:	681b      	ldr	r3, [r3, #0]
 810df6e:	4a33      	ldr	r2, [pc, #204]	@ (810e03c <UART_RxISR_8BIT+0x1b4>)
 810df70:	4293      	cmp	r3, r2
 810df72:	d01f      	beq.n	810dfb4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810df74:	687b      	ldr	r3, [r7, #4]
 810df76:	681b      	ldr	r3, [r3, #0]
 810df78:	685b      	ldr	r3, [r3, #4]
 810df7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810df7e:	2b00      	cmp	r3, #0
 810df80:	d018      	beq.n	810dfb4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810df82:	687b      	ldr	r3, [r7, #4]
 810df84:	681b      	ldr	r3, [r3, #0]
 810df86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810df88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810df8a:	e853 3f00 	ldrex	r3, [r3]
 810df8e:	623b      	str	r3, [r7, #32]
   return(result);
 810df90:	6a3b      	ldr	r3, [r7, #32]
 810df92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810df96:	663b      	str	r3, [r7, #96]	@ 0x60
 810df98:	687b      	ldr	r3, [r7, #4]
 810df9a:	681b      	ldr	r3, [r3, #0]
 810df9c:	461a      	mov	r2, r3
 810df9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810dfa0:	633b      	str	r3, [r7, #48]	@ 0x30
 810dfa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dfa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810dfa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810dfa8:	e841 2300 	strex	r3, r2, [r1]
 810dfac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810dfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dfb0:	2b00      	cmp	r3, #0
 810dfb2:	d1e6      	bne.n	810df82 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810dfb4:	687b      	ldr	r3, [r7, #4]
 810dfb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810dfb8:	2b01      	cmp	r3, #1
 810dfba:	d12e      	bne.n	810e01a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810dfbc:	687b      	ldr	r3, [r7, #4]
 810dfbe:	2200      	movs	r2, #0
 810dfc0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810dfc2:	687b      	ldr	r3, [r7, #4]
 810dfc4:	681b      	ldr	r3, [r3, #0]
 810dfc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dfc8:	693b      	ldr	r3, [r7, #16]
 810dfca:	e853 3f00 	ldrex	r3, [r3]
 810dfce:	60fb      	str	r3, [r7, #12]
   return(result);
 810dfd0:	68fb      	ldr	r3, [r7, #12]
 810dfd2:	f023 0310 	bic.w	r3, r3, #16
 810dfd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810dfd8:	687b      	ldr	r3, [r7, #4]
 810dfda:	681b      	ldr	r3, [r3, #0]
 810dfdc:	461a      	mov	r2, r3
 810dfde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810dfe0:	61fb      	str	r3, [r7, #28]
 810dfe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dfe4:	69b9      	ldr	r1, [r7, #24]
 810dfe6:	69fa      	ldr	r2, [r7, #28]
 810dfe8:	e841 2300 	strex	r3, r2, [r1]
 810dfec:	617b      	str	r3, [r7, #20]
   return(result);
 810dfee:	697b      	ldr	r3, [r7, #20]
 810dff0:	2b00      	cmp	r3, #0
 810dff2:	d1e6      	bne.n	810dfc2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810dff4:	687b      	ldr	r3, [r7, #4]
 810dff6:	681b      	ldr	r3, [r3, #0]
 810dff8:	69db      	ldr	r3, [r3, #28]
 810dffa:	f003 0310 	and.w	r3, r3, #16
 810dffe:	2b10      	cmp	r3, #16
 810e000:	d103      	bne.n	810e00a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e002:	687b      	ldr	r3, [r7, #4]
 810e004:	681b      	ldr	r3, [r3, #0]
 810e006:	2210      	movs	r2, #16
 810e008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e00a:	687b      	ldr	r3, [r7, #4]
 810e00c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e010:	4619      	mov	r1, r3
 810e012:	6878      	ldr	r0, [r7, #4]
 810e014:	f7fe fe40 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e018:	e00b      	b.n	810e032 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810e01a:	6878      	ldr	r0, [r7, #4]
 810e01c:	f7f5 fc26 	bl	810386c <HAL_UART_RxCpltCallback>
}
 810e020:	e007      	b.n	810e032 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e022:	687b      	ldr	r3, [r7, #4]
 810e024:	681b      	ldr	r3, [r3, #0]
 810e026:	699a      	ldr	r2, [r3, #24]
 810e028:	687b      	ldr	r3, [r7, #4]
 810e02a:	681b      	ldr	r3, [r3, #0]
 810e02c:	f042 0208 	orr.w	r2, r2, #8
 810e030:	619a      	str	r2, [r3, #24]
}
 810e032:	bf00      	nop
 810e034:	3770      	adds	r7, #112	@ 0x70
 810e036:	46bd      	mov	sp, r7
 810e038:	bd80      	pop	{r7, pc}
 810e03a:	bf00      	nop
 810e03c:	58000c00 	.word	0x58000c00

0810e040 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810e040:	b580      	push	{r7, lr}
 810e042:	b09c      	sub	sp, #112	@ 0x70
 810e044:	af00      	add	r7, sp, #0
 810e046:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810e048:	687b      	ldr	r3, [r7, #4]
 810e04a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e04e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e052:	687b      	ldr	r3, [r7, #4]
 810e054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e058:	2b22      	cmp	r3, #34	@ 0x22
 810e05a:	f040 80be 	bne.w	810e1da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e05e:	687b      	ldr	r3, [r7, #4]
 810e060:	681b      	ldr	r3, [r3, #0]
 810e062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e064:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810e068:	687b      	ldr	r3, [r7, #4]
 810e06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e06c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 810e06e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 810e072:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810e076:	4013      	ands	r3, r2
 810e078:	b29a      	uxth	r2, r3
 810e07a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810e07c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 810e07e:	687b      	ldr	r3, [r7, #4]
 810e080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e082:	1c9a      	adds	r2, r3, #2
 810e084:	687b      	ldr	r3, [r7, #4]
 810e086:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810e088:	687b      	ldr	r3, [r7, #4]
 810e08a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e08e:	b29b      	uxth	r3, r3
 810e090:	3b01      	subs	r3, #1
 810e092:	b29a      	uxth	r2, r3
 810e094:	687b      	ldr	r3, [r7, #4]
 810e096:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810e09a:	687b      	ldr	r3, [r7, #4]
 810e09c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e0a0:	b29b      	uxth	r3, r3
 810e0a2:	2b00      	cmp	r3, #0
 810e0a4:	f040 80a1 	bne.w	810e1ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810e0a8:	687b      	ldr	r3, [r7, #4]
 810e0aa:	681b      	ldr	r3, [r3, #0]
 810e0ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e0ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e0b0:	e853 3f00 	ldrex	r3, [r3]
 810e0b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810e0b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e0b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810e0bc:	667b      	str	r3, [r7, #100]	@ 0x64
 810e0be:	687b      	ldr	r3, [r7, #4]
 810e0c0:	681b      	ldr	r3, [r3, #0]
 810e0c2:	461a      	mov	r2, r3
 810e0c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810e0c6:	657b      	str	r3, [r7, #84]	@ 0x54
 810e0c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e0ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810e0cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810e0ce:	e841 2300 	strex	r3, r2, [r1]
 810e0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810e0d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e0d6:	2b00      	cmp	r3, #0
 810e0d8:	d1e6      	bne.n	810e0a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e0da:	687b      	ldr	r3, [r7, #4]
 810e0dc:	681b      	ldr	r3, [r3, #0]
 810e0de:	3308      	adds	r3, #8
 810e0e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e0e4:	e853 3f00 	ldrex	r3, [r3]
 810e0e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810e0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e0ec:	f023 0301 	bic.w	r3, r3, #1
 810e0f0:	663b      	str	r3, [r7, #96]	@ 0x60
 810e0f2:	687b      	ldr	r3, [r7, #4]
 810e0f4:	681b      	ldr	r3, [r3, #0]
 810e0f6:	3308      	adds	r3, #8
 810e0f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810e0fa:	643a      	str	r2, [r7, #64]	@ 0x40
 810e0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e0fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810e100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810e102:	e841 2300 	strex	r3, r2, [r1]
 810e106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e10a:	2b00      	cmp	r3, #0
 810e10c:	d1e5      	bne.n	810e0da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810e10e:	687b      	ldr	r3, [r7, #4]
 810e110:	2220      	movs	r2, #32
 810e112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810e116:	687b      	ldr	r3, [r7, #4]
 810e118:	2200      	movs	r2, #0
 810e11a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e11c:	687b      	ldr	r3, [r7, #4]
 810e11e:	2200      	movs	r2, #0
 810e120:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e122:	687b      	ldr	r3, [r7, #4]
 810e124:	681b      	ldr	r3, [r3, #0]
 810e126:	4a33      	ldr	r2, [pc, #204]	@ (810e1f4 <UART_RxISR_16BIT+0x1b4>)
 810e128:	4293      	cmp	r3, r2
 810e12a:	d01f      	beq.n	810e16c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e12c:	687b      	ldr	r3, [r7, #4]
 810e12e:	681b      	ldr	r3, [r3, #0]
 810e130:	685b      	ldr	r3, [r3, #4]
 810e132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e136:	2b00      	cmp	r3, #0
 810e138:	d018      	beq.n	810e16c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e13a:	687b      	ldr	r3, [r7, #4]
 810e13c:	681b      	ldr	r3, [r3, #0]
 810e13e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e140:	6a3b      	ldr	r3, [r7, #32]
 810e142:	e853 3f00 	ldrex	r3, [r3]
 810e146:	61fb      	str	r3, [r7, #28]
   return(result);
 810e148:	69fb      	ldr	r3, [r7, #28]
 810e14a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e14e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810e150:	687b      	ldr	r3, [r7, #4]
 810e152:	681b      	ldr	r3, [r3, #0]
 810e154:	461a      	mov	r2, r3
 810e156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810e15a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e15c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810e15e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e160:	e841 2300 	strex	r3, r2, [r1]
 810e164:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810e166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e168:	2b00      	cmp	r3, #0
 810e16a:	d1e6      	bne.n	810e13a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e16c:	687b      	ldr	r3, [r7, #4]
 810e16e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e170:	2b01      	cmp	r3, #1
 810e172:	d12e      	bne.n	810e1d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e174:	687b      	ldr	r3, [r7, #4]
 810e176:	2200      	movs	r2, #0
 810e178:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e17a:	687b      	ldr	r3, [r7, #4]
 810e17c:	681b      	ldr	r3, [r3, #0]
 810e17e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e180:	68fb      	ldr	r3, [r7, #12]
 810e182:	e853 3f00 	ldrex	r3, [r3]
 810e186:	60bb      	str	r3, [r7, #8]
   return(result);
 810e188:	68bb      	ldr	r3, [r7, #8]
 810e18a:	f023 0310 	bic.w	r3, r3, #16
 810e18e:	65bb      	str	r3, [r7, #88]	@ 0x58
 810e190:	687b      	ldr	r3, [r7, #4]
 810e192:	681b      	ldr	r3, [r3, #0]
 810e194:	461a      	mov	r2, r3
 810e196:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810e198:	61bb      	str	r3, [r7, #24]
 810e19a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e19c:	6979      	ldr	r1, [r7, #20]
 810e19e:	69ba      	ldr	r2, [r7, #24]
 810e1a0:	e841 2300 	strex	r3, r2, [r1]
 810e1a4:	613b      	str	r3, [r7, #16]
   return(result);
 810e1a6:	693b      	ldr	r3, [r7, #16]
 810e1a8:	2b00      	cmp	r3, #0
 810e1aa:	d1e6      	bne.n	810e17a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e1ac:	687b      	ldr	r3, [r7, #4]
 810e1ae:	681b      	ldr	r3, [r3, #0]
 810e1b0:	69db      	ldr	r3, [r3, #28]
 810e1b2:	f003 0310 	and.w	r3, r3, #16
 810e1b6:	2b10      	cmp	r3, #16
 810e1b8:	d103      	bne.n	810e1c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e1ba:	687b      	ldr	r3, [r7, #4]
 810e1bc:	681b      	ldr	r3, [r3, #0]
 810e1be:	2210      	movs	r2, #16
 810e1c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e1c2:	687b      	ldr	r3, [r7, #4]
 810e1c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e1c8:	4619      	mov	r1, r3
 810e1ca:	6878      	ldr	r0, [r7, #4]
 810e1cc:	f7fe fd64 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e1d0:	e00b      	b.n	810e1ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810e1d2:	6878      	ldr	r0, [r7, #4]
 810e1d4:	f7f5 fb4a 	bl	810386c <HAL_UART_RxCpltCallback>
}
 810e1d8:	e007      	b.n	810e1ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e1da:	687b      	ldr	r3, [r7, #4]
 810e1dc:	681b      	ldr	r3, [r3, #0]
 810e1de:	699a      	ldr	r2, [r3, #24]
 810e1e0:	687b      	ldr	r3, [r7, #4]
 810e1e2:	681b      	ldr	r3, [r3, #0]
 810e1e4:	f042 0208 	orr.w	r2, r2, #8
 810e1e8:	619a      	str	r2, [r3, #24]
}
 810e1ea:	bf00      	nop
 810e1ec:	3770      	adds	r7, #112	@ 0x70
 810e1ee:	46bd      	mov	sp, r7
 810e1f0:	bd80      	pop	{r7, pc}
 810e1f2:	bf00      	nop
 810e1f4:	58000c00 	.word	0x58000c00

0810e1f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810e1f8:	b580      	push	{r7, lr}
 810e1fa:	b0ac      	sub	sp, #176	@ 0xb0
 810e1fc:	af00      	add	r7, sp, #0
 810e1fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810e200:	687b      	ldr	r3, [r7, #4]
 810e202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e206:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810e20a:	687b      	ldr	r3, [r7, #4]
 810e20c:	681b      	ldr	r3, [r3, #0]
 810e20e:	69db      	ldr	r3, [r3, #28]
 810e210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810e214:	687b      	ldr	r3, [r7, #4]
 810e216:	681b      	ldr	r3, [r3, #0]
 810e218:	681b      	ldr	r3, [r3, #0]
 810e21a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810e21e:	687b      	ldr	r3, [r7, #4]
 810e220:	681b      	ldr	r3, [r3, #0]
 810e222:	689b      	ldr	r3, [r3, #8]
 810e224:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e228:	687b      	ldr	r3, [r7, #4]
 810e22a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e22e:	2b22      	cmp	r3, #34	@ 0x22
 810e230:	f040 8182 	bne.w	810e538 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810e234:	687b      	ldr	r3, [r7, #4]
 810e236:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e23a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e23e:	e125      	b.n	810e48c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e240:	687b      	ldr	r3, [r7, #4]
 810e242:	681b      	ldr	r3, [r3, #0]
 810e244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e246:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810e24a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 810e24e:	b2d9      	uxtb	r1, r3
 810e250:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 810e254:	b2da      	uxtb	r2, r3
 810e256:	687b      	ldr	r3, [r7, #4]
 810e258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e25a:	400a      	ands	r2, r1
 810e25c:	b2d2      	uxtb	r2, r2
 810e25e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 810e260:	687b      	ldr	r3, [r7, #4]
 810e262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e264:	1c5a      	adds	r2, r3, #1
 810e266:	687b      	ldr	r3, [r7, #4]
 810e268:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810e26a:	687b      	ldr	r3, [r7, #4]
 810e26c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e270:	b29b      	uxth	r3, r3
 810e272:	3b01      	subs	r3, #1
 810e274:	b29a      	uxth	r2, r3
 810e276:	687b      	ldr	r3, [r7, #4]
 810e278:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810e27c:	687b      	ldr	r3, [r7, #4]
 810e27e:	681b      	ldr	r3, [r3, #0]
 810e280:	69db      	ldr	r3, [r3, #28]
 810e282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810e286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e28a:	f003 0307 	and.w	r3, r3, #7
 810e28e:	2b00      	cmp	r3, #0
 810e290:	d053      	beq.n	810e33a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810e292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e296:	f003 0301 	and.w	r3, r3, #1
 810e29a:	2b00      	cmp	r3, #0
 810e29c:	d011      	beq.n	810e2c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 810e29e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810e2a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e2a6:	2b00      	cmp	r3, #0
 810e2a8:	d00b      	beq.n	810e2c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810e2aa:	687b      	ldr	r3, [r7, #4]
 810e2ac:	681b      	ldr	r3, [r3, #0]
 810e2ae:	2201      	movs	r2, #1
 810e2b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810e2b2:	687b      	ldr	r3, [r7, #4]
 810e2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e2b8:	f043 0201 	orr.w	r2, r3, #1
 810e2bc:	687b      	ldr	r3, [r7, #4]
 810e2be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e2c6:	f003 0302 	and.w	r3, r3, #2
 810e2ca:	2b00      	cmp	r3, #0
 810e2cc:	d011      	beq.n	810e2f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 810e2ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e2d2:	f003 0301 	and.w	r3, r3, #1
 810e2d6:	2b00      	cmp	r3, #0
 810e2d8:	d00b      	beq.n	810e2f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810e2da:	687b      	ldr	r3, [r7, #4]
 810e2dc:	681b      	ldr	r3, [r3, #0]
 810e2de:	2202      	movs	r2, #2
 810e2e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810e2e2:	687b      	ldr	r3, [r7, #4]
 810e2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e2e8:	f043 0204 	orr.w	r2, r3, #4
 810e2ec:	687b      	ldr	r3, [r7, #4]
 810e2ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e2f6:	f003 0304 	and.w	r3, r3, #4
 810e2fa:	2b00      	cmp	r3, #0
 810e2fc:	d011      	beq.n	810e322 <UART_RxISR_8BIT_FIFOEN+0x12a>
 810e2fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e302:	f003 0301 	and.w	r3, r3, #1
 810e306:	2b00      	cmp	r3, #0
 810e308:	d00b      	beq.n	810e322 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810e30a:	687b      	ldr	r3, [r7, #4]
 810e30c:	681b      	ldr	r3, [r3, #0]
 810e30e:	2204      	movs	r2, #4
 810e310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810e312:	687b      	ldr	r3, [r7, #4]
 810e314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e318:	f043 0202 	orr.w	r2, r3, #2
 810e31c:	687b      	ldr	r3, [r7, #4]
 810e31e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810e322:	687b      	ldr	r3, [r7, #4]
 810e324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e328:	2b00      	cmp	r3, #0
 810e32a:	d006      	beq.n	810e33a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810e32c:	6878      	ldr	r0, [r7, #4]
 810e32e:	f7fe fca9 	bl	810cc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e332:	687b      	ldr	r3, [r7, #4]
 810e334:	2200      	movs	r2, #0
 810e336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810e33a:	687b      	ldr	r3, [r7, #4]
 810e33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e340:	b29b      	uxth	r3, r3
 810e342:	2b00      	cmp	r3, #0
 810e344:	f040 80a2 	bne.w	810e48c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e348:	687b      	ldr	r3, [r7, #4]
 810e34a:	681b      	ldr	r3, [r3, #0]
 810e34c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e34e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810e350:	e853 3f00 	ldrex	r3, [r3]
 810e354:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 810e356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810e358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810e35c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810e360:	687b      	ldr	r3, [r7, #4]
 810e362:	681b      	ldr	r3, [r3, #0]
 810e364:	461a      	mov	r2, r3
 810e366:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810e36a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810e36c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e36e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 810e370:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810e372:	e841 2300 	strex	r3, r2, [r1]
 810e376:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 810e378:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810e37a:	2b00      	cmp	r3, #0
 810e37c:	d1e4      	bne.n	810e348 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810e37e:	687b      	ldr	r3, [r7, #4]
 810e380:	681b      	ldr	r3, [r3, #0]
 810e382:	3308      	adds	r3, #8
 810e384:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e388:	e853 3f00 	ldrex	r3, [r3]
 810e38c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810e38e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810e390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e394:	f023 0301 	bic.w	r3, r3, #1
 810e398:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810e39c:	687b      	ldr	r3, [r7, #4]
 810e39e:	681b      	ldr	r3, [r3, #0]
 810e3a0:	3308      	adds	r3, #8
 810e3a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810e3a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 810e3a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e3aa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810e3ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 810e3ae:	e841 2300 	strex	r3, r2, [r1]
 810e3b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810e3b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810e3b6:	2b00      	cmp	r3, #0
 810e3b8:	d1e1      	bne.n	810e37e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810e3ba:	687b      	ldr	r3, [r7, #4]
 810e3bc:	2220      	movs	r2, #32
 810e3be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810e3c2:	687b      	ldr	r3, [r7, #4]
 810e3c4:	2200      	movs	r2, #0
 810e3c6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e3c8:	687b      	ldr	r3, [r7, #4]
 810e3ca:	2200      	movs	r2, #0
 810e3cc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e3ce:	687b      	ldr	r3, [r7, #4]
 810e3d0:	681b      	ldr	r3, [r3, #0]
 810e3d2:	4a5f      	ldr	r2, [pc, #380]	@ (810e550 <UART_RxISR_8BIT_FIFOEN+0x358>)
 810e3d4:	4293      	cmp	r3, r2
 810e3d6:	d021      	beq.n	810e41c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e3d8:	687b      	ldr	r3, [r7, #4]
 810e3da:	681b      	ldr	r3, [r3, #0]
 810e3dc:	685b      	ldr	r3, [r3, #4]
 810e3de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e3e2:	2b00      	cmp	r3, #0
 810e3e4:	d01a      	beq.n	810e41c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e3e6:	687b      	ldr	r3, [r7, #4]
 810e3e8:	681b      	ldr	r3, [r3, #0]
 810e3ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e3ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e3ee:	e853 3f00 	ldrex	r3, [r3]
 810e3f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810e3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e3f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e3fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810e3fe:	687b      	ldr	r3, [r7, #4]
 810e400:	681b      	ldr	r3, [r3, #0]
 810e402:	461a      	mov	r2, r3
 810e404:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810e408:	657b      	str	r3, [r7, #84]	@ 0x54
 810e40a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e40c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810e40e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810e410:	e841 2300 	strex	r3, r2, [r1]
 810e414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810e416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e418:	2b00      	cmp	r3, #0
 810e41a:	d1e4      	bne.n	810e3e6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e41c:	687b      	ldr	r3, [r7, #4]
 810e41e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e420:	2b01      	cmp	r3, #1
 810e422:	d130      	bne.n	810e486 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e424:	687b      	ldr	r3, [r7, #4]
 810e426:	2200      	movs	r2, #0
 810e428:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e42a:	687b      	ldr	r3, [r7, #4]
 810e42c:	681b      	ldr	r3, [r3, #0]
 810e42e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e432:	e853 3f00 	ldrex	r3, [r3]
 810e436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810e438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e43a:	f023 0310 	bic.w	r3, r3, #16
 810e43e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810e442:	687b      	ldr	r3, [r7, #4]
 810e444:	681b      	ldr	r3, [r3, #0]
 810e446:	461a      	mov	r2, r3
 810e448:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810e44c:	643b      	str	r3, [r7, #64]	@ 0x40
 810e44e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810e452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810e454:	e841 2300 	strex	r3, r2, [r1]
 810e458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e45c:	2b00      	cmp	r3, #0
 810e45e:	d1e4      	bne.n	810e42a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e460:	687b      	ldr	r3, [r7, #4]
 810e462:	681b      	ldr	r3, [r3, #0]
 810e464:	69db      	ldr	r3, [r3, #28]
 810e466:	f003 0310 	and.w	r3, r3, #16
 810e46a:	2b10      	cmp	r3, #16
 810e46c:	d103      	bne.n	810e476 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e46e:	687b      	ldr	r3, [r7, #4]
 810e470:	681b      	ldr	r3, [r3, #0]
 810e472:	2210      	movs	r2, #16
 810e474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e476:	687b      	ldr	r3, [r7, #4]
 810e478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e47c:	4619      	mov	r1, r3
 810e47e:	6878      	ldr	r0, [r7, #4]
 810e480:	f7fe fc0a 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
 810e484:	e002      	b.n	810e48c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810e486:	6878      	ldr	r0, [r7, #4]
 810e488:	f7f5 f9f0 	bl	810386c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e48c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 810e490:	2b00      	cmp	r3, #0
 810e492:	d006      	beq.n	810e4a2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 810e494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e498:	f003 0320 	and.w	r3, r3, #32
 810e49c:	2b00      	cmp	r3, #0
 810e49e:	f47f aecf 	bne.w	810e240 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810e4a2:	687b      	ldr	r3, [r7, #4]
 810e4a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e4a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810e4ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 810e4b0:	2b00      	cmp	r3, #0
 810e4b2:	d049      	beq.n	810e548 <UART_RxISR_8BIT_FIFOEN+0x350>
 810e4b4:	687b      	ldr	r3, [r7, #4]
 810e4b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e4ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 810e4be:	429a      	cmp	r2, r3
 810e4c0:	d242      	bcs.n	810e548 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810e4c2:	687b      	ldr	r3, [r7, #4]
 810e4c4:	681b      	ldr	r3, [r3, #0]
 810e4c6:	3308      	adds	r3, #8
 810e4c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e4ca:	6a3b      	ldr	r3, [r7, #32]
 810e4cc:	e853 3f00 	ldrex	r3, [r3]
 810e4d0:	61fb      	str	r3, [r7, #28]
   return(result);
 810e4d2:	69fb      	ldr	r3, [r7, #28]
 810e4d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e4d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810e4dc:	687b      	ldr	r3, [r7, #4]
 810e4de:	681b      	ldr	r3, [r3, #0]
 810e4e0:	3308      	adds	r3, #8
 810e4e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810e4e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810e4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e4ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810e4ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e4ee:	e841 2300 	strex	r3, r2, [r1]
 810e4f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810e4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e4f6:	2b00      	cmp	r3, #0
 810e4f8:	d1e3      	bne.n	810e4c2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 810e4fa:	687b      	ldr	r3, [r7, #4]
 810e4fc:	4a15      	ldr	r2, [pc, #84]	@ (810e554 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 810e4fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810e500:	687b      	ldr	r3, [r7, #4]
 810e502:	681b      	ldr	r3, [r3, #0]
 810e504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e506:	68fb      	ldr	r3, [r7, #12]
 810e508:	e853 3f00 	ldrex	r3, [r3]
 810e50c:	60bb      	str	r3, [r7, #8]
   return(result);
 810e50e:	68bb      	ldr	r3, [r7, #8]
 810e510:	f043 0320 	orr.w	r3, r3, #32
 810e514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810e518:	687b      	ldr	r3, [r7, #4]
 810e51a:	681b      	ldr	r3, [r3, #0]
 810e51c:	461a      	mov	r2, r3
 810e51e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810e522:	61bb      	str	r3, [r7, #24]
 810e524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e526:	6979      	ldr	r1, [r7, #20]
 810e528:	69ba      	ldr	r2, [r7, #24]
 810e52a:	e841 2300 	strex	r3, r2, [r1]
 810e52e:	613b      	str	r3, [r7, #16]
   return(result);
 810e530:	693b      	ldr	r3, [r7, #16]
 810e532:	2b00      	cmp	r3, #0
 810e534:	d1e4      	bne.n	810e500 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e536:	e007      	b.n	810e548 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e538:	687b      	ldr	r3, [r7, #4]
 810e53a:	681b      	ldr	r3, [r3, #0]
 810e53c:	699a      	ldr	r2, [r3, #24]
 810e53e:	687b      	ldr	r3, [r7, #4]
 810e540:	681b      	ldr	r3, [r3, #0]
 810e542:	f042 0208 	orr.w	r2, r2, #8
 810e546:	619a      	str	r2, [r3, #24]
}
 810e548:	bf00      	nop
 810e54a:	37b0      	adds	r7, #176	@ 0xb0
 810e54c:	46bd      	mov	sp, r7
 810e54e:	bd80      	pop	{r7, pc}
 810e550:	58000c00 	.word	0x58000c00
 810e554:	0810de89 	.word	0x0810de89

0810e558 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810e558:	b580      	push	{r7, lr}
 810e55a:	b0ae      	sub	sp, #184	@ 0xb8
 810e55c:	af00      	add	r7, sp, #0
 810e55e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 810e560:	687b      	ldr	r3, [r7, #4]
 810e562:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e566:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810e56a:	687b      	ldr	r3, [r7, #4]
 810e56c:	681b      	ldr	r3, [r3, #0]
 810e56e:	69db      	ldr	r3, [r3, #28]
 810e570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810e574:	687b      	ldr	r3, [r7, #4]
 810e576:	681b      	ldr	r3, [r3, #0]
 810e578:	681b      	ldr	r3, [r3, #0]
 810e57a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810e57e:	687b      	ldr	r3, [r7, #4]
 810e580:	681b      	ldr	r3, [r3, #0]
 810e582:	689b      	ldr	r3, [r3, #8]
 810e584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e588:	687b      	ldr	r3, [r7, #4]
 810e58a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e58e:	2b22      	cmp	r3, #34	@ 0x22
 810e590:	f040 8186 	bne.w	810e8a0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810e594:	687b      	ldr	r3, [r7, #4]
 810e596:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e59a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e59e:	e129      	b.n	810e7f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e5a0:	687b      	ldr	r3, [r7, #4]
 810e5a2:	681b      	ldr	r3, [r3, #0]
 810e5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e5a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810e5aa:	687b      	ldr	r3, [r7, #4]
 810e5ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e5ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 810e5b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 810e5b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 810e5ba:	4013      	ands	r3, r2
 810e5bc:	b29a      	uxth	r2, r3
 810e5be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e5c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 810e5c4:	687b      	ldr	r3, [r7, #4]
 810e5c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e5c8:	1c9a      	adds	r2, r3, #2
 810e5ca:	687b      	ldr	r3, [r7, #4]
 810e5cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810e5ce:	687b      	ldr	r3, [r7, #4]
 810e5d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e5d4:	b29b      	uxth	r3, r3
 810e5d6:	3b01      	subs	r3, #1
 810e5d8:	b29a      	uxth	r2, r3
 810e5da:	687b      	ldr	r3, [r7, #4]
 810e5dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810e5e0:	687b      	ldr	r3, [r7, #4]
 810e5e2:	681b      	ldr	r3, [r3, #0]
 810e5e4:	69db      	ldr	r3, [r3, #28]
 810e5e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810e5ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e5ee:	f003 0307 	and.w	r3, r3, #7
 810e5f2:	2b00      	cmp	r3, #0
 810e5f4:	d053      	beq.n	810e69e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810e5f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e5fa:	f003 0301 	and.w	r3, r3, #1
 810e5fe:	2b00      	cmp	r3, #0
 810e600:	d011      	beq.n	810e626 <UART_RxISR_16BIT_FIFOEN+0xce>
 810e602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e60a:	2b00      	cmp	r3, #0
 810e60c:	d00b      	beq.n	810e626 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810e60e:	687b      	ldr	r3, [r7, #4]
 810e610:	681b      	ldr	r3, [r3, #0]
 810e612:	2201      	movs	r2, #1
 810e614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810e616:	687b      	ldr	r3, [r7, #4]
 810e618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e61c:	f043 0201 	orr.w	r2, r3, #1
 810e620:	687b      	ldr	r3, [r7, #4]
 810e622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e62a:	f003 0302 	and.w	r3, r3, #2
 810e62e:	2b00      	cmp	r3, #0
 810e630:	d011      	beq.n	810e656 <UART_RxISR_16BIT_FIFOEN+0xfe>
 810e632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810e636:	f003 0301 	and.w	r3, r3, #1
 810e63a:	2b00      	cmp	r3, #0
 810e63c:	d00b      	beq.n	810e656 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810e63e:	687b      	ldr	r3, [r7, #4]
 810e640:	681b      	ldr	r3, [r3, #0]
 810e642:	2202      	movs	r2, #2
 810e644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810e646:	687b      	ldr	r3, [r7, #4]
 810e648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e64c:	f043 0204 	orr.w	r2, r3, #4
 810e650:	687b      	ldr	r3, [r7, #4]
 810e652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e65a:	f003 0304 	and.w	r3, r3, #4
 810e65e:	2b00      	cmp	r3, #0
 810e660:	d011      	beq.n	810e686 <UART_RxISR_16BIT_FIFOEN+0x12e>
 810e662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810e666:	f003 0301 	and.w	r3, r3, #1
 810e66a:	2b00      	cmp	r3, #0
 810e66c:	d00b      	beq.n	810e686 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810e66e:	687b      	ldr	r3, [r7, #4]
 810e670:	681b      	ldr	r3, [r3, #0]
 810e672:	2204      	movs	r2, #4
 810e674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810e676:	687b      	ldr	r3, [r7, #4]
 810e678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e67c:	f043 0202 	orr.w	r2, r3, #2
 810e680:	687b      	ldr	r3, [r7, #4]
 810e682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810e686:	687b      	ldr	r3, [r7, #4]
 810e688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e68c:	2b00      	cmp	r3, #0
 810e68e:	d006      	beq.n	810e69e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810e690:	6878      	ldr	r0, [r7, #4]
 810e692:	f7fe faf7 	bl	810cc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e696:	687b      	ldr	r3, [r7, #4]
 810e698:	2200      	movs	r2, #0
 810e69a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810e69e:	687b      	ldr	r3, [r7, #4]
 810e6a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e6a4:	b29b      	uxth	r3, r3
 810e6a6:	2b00      	cmp	r3, #0
 810e6a8:	f040 80a4 	bne.w	810e7f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e6ac:	687b      	ldr	r3, [r7, #4]
 810e6ae:	681b      	ldr	r3, [r3, #0]
 810e6b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e6b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810e6b4:	e853 3f00 	ldrex	r3, [r3]
 810e6b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810e6ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810e6bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810e6c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810e6c4:	687b      	ldr	r3, [r7, #4]
 810e6c6:	681b      	ldr	r3, [r3, #0]
 810e6c8:	461a      	mov	r2, r3
 810e6ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810e6ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810e6d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e6d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810e6d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810e6da:	e841 2300 	strex	r3, r2, [r1]
 810e6de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810e6e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810e6e2:	2b00      	cmp	r3, #0
 810e6e4:	d1e2      	bne.n	810e6ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810e6e6:	687b      	ldr	r3, [r7, #4]
 810e6e8:	681b      	ldr	r3, [r3, #0]
 810e6ea:	3308      	adds	r3, #8
 810e6ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e6ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810e6f0:	e853 3f00 	ldrex	r3, [r3]
 810e6f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810e6f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e6f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e6fc:	f023 0301 	bic.w	r3, r3, #1
 810e700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810e704:	687b      	ldr	r3, [r7, #4]
 810e706:	681b      	ldr	r3, [r3, #0]
 810e708:	3308      	adds	r3, #8
 810e70a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 810e70e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810e710:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e712:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810e714:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810e716:	e841 2300 	strex	r3, r2, [r1]
 810e71a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810e71c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810e71e:	2b00      	cmp	r3, #0
 810e720:	d1e1      	bne.n	810e6e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810e722:	687b      	ldr	r3, [r7, #4]
 810e724:	2220      	movs	r2, #32
 810e726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810e72a:	687b      	ldr	r3, [r7, #4]
 810e72c:	2200      	movs	r2, #0
 810e72e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e730:	687b      	ldr	r3, [r7, #4]
 810e732:	2200      	movs	r2, #0
 810e734:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e736:	687b      	ldr	r3, [r7, #4]
 810e738:	681b      	ldr	r3, [r3, #0]
 810e73a:	4a5f      	ldr	r2, [pc, #380]	@ (810e8b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 810e73c:	4293      	cmp	r3, r2
 810e73e:	d021      	beq.n	810e784 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e740:	687b      	ldr	r3, [r7, #4]
 810e742:	681b      	ldr	r3, [r3, #0]
 810e744:	685b      	ldr	r3, [r3, #4]
 810e746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e74a:	2b00      	cmp	r3, #0
 810e74c:	d01a      	beq.n	810e784 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e74e:	687b      	ldr	r3, [r7, #4]
 810e750:	681b      	ldr	r3, [r3, #0]
 810e752:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e756:	e853 3f00 	ldrex	r3, [r3]
 810e75a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810e75c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e75e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e762:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810e766:	687b      	ldr	r3, [r7, #4]
 810e768:	681b      	ldr	r3, [r3, #0]
 810e76a:	461a      	mov	r2, r3
 810e76c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810e770:	65bb      	str	r3, [r7, #88]	@ 0x58
 810e772:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e774:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810e776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810e778:	e841 2300 	strex	r3, r2, [r1]
 810e77c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810e77e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810e780:	2b00      	cmp	r3, #0
 810e782:	d1e4      	bne.n	810e74e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e784:	687b      	ldr	r3, [r7, #4]
 810e786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e788:	2b01      	cmp	r3, #1
 810e78a:	d130      	bne.n	810e7ee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e78c:	687b      	ldr	r3, [r7, #4]
 810e78e:	2200      	movs	r2, #0
 810e790:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e792:	687b      	ldr	r3, [r7, #4]
 810e794:	681b      	ldr	r3, [r3, #0]
 810e796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e79a:	e853 3f00 	ldrex	r3, [r3]
 810e79e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810e7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e7a2:	f023 0310 	bic.w	r3, r3, #16
 810e7a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810e7aa:	687b      	ldr	r3, [r7, #4]
 810e7ac:	681b      	ldr	r3, [r3, #0]
 810e7ae:	461a      	mov	r2, r3
 810e7b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810e7b4:	647b      	str	r3, [r7, #68]	@ 0x44
 810e7b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e7b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810e7ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810e7bc:	e841 2300 	strex	r3, r2, [r1]
 810e7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810e7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e7c4:	2b00      	cmp	r3, #0
 810e7c6:	d1e4      	bne.n	810e792 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e7c8:	687b      	ldr	r3, [r7, #4]
 810e7ca:	681b      	ldr	r3, [r3, #0]
 810e7cc:	69db      	ldr	r3, [r3, #28]
 810e7ce:	f003 0310 	and.w	r3, r3, #16
 810e7d2:	2b10      	cmp	r3, #16
 810e7d4:	d103      	bne.n	810e7de <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e7d6:	687b      	ldr	r3, [r7, #4]
 810e7d8:	681b      	ldr	r3, [r3, #0]
 810e7da:	2210      	movs	r2, #16
 810e7dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e7de:	687b      	ldr	r3, [r7, #4]
 810e7e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e7e4:	4619      	mov	r1, r3
 810e7e6:	6878      	ldr	r0, [r7, #4]
 810e7e8:	f7fe fa56 	bl	810cc98 <HAL_UARTEx_RxEventCallback>
 810e7ec:	e002      	b.n	810e7f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810e7ee:	6878      	ldr	r0, [r7, #4]
 810e7f0:	f7f5 f83c 	bl	810386c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e7f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 810e7f8:	2b00      	cmp	r3, #0
 810e7fa:	d006      	beq.n	810e80a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 810e7fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e800:	f003 0320 	and.w	r3, r3, #32
 810e804:	2b00      	cmp	r3, #0
 810e806:	f47f aecb 	bne.w	810e5a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810e80a:	687b      	ldr	r3, [r7, #4]
 810e80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e810:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810e814:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 810e818:	2b00      	cmp	r3, #0
 810e81a:	d049      	beq.n	810e8b0 <UART_RxISR_16BIT_FIFOEN+0x358>
 810e81c:	687b      	ldr	r3, [r7, #4]
 810e81e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e822:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 810e826:	429a      	cmp	r2, r3
 810e828:	d242      	bcs.n	810e8b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810e82a:	687b      	ldr	r3, [r7, #4]
 810e82c:	681b      	ldr	r3, [r3, #0]
 810e82e:	3308      	adds	r3, #8
 810e830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e834:	e853 3f00 	ldrex	r3, [r3]
 810e838:	623b      	str	r3, [r7, #32]
   return(result);
 810e83a:	6a3b      	ldr	r3, [r7, #32]
 810e83c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810e844:	687b      	ldr	r3, [r7, #4]
 810e846:	681b      	ldr	r3, [r3, #0]
 810e848:	3308      	adds	r3, #8
 810e84a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 810e84e:	633a      	str	r2, [r7, #48]	@ 0x30
 810e850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810e854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e856:	e841 2300 	strex	r3, r2, [r1]
 810e85a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810e85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e85e:	2b00      	cmp	r3, #0
 810e860:	d1e3      	bne.n	810e82a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 810e862:	687b      	ldr	r3, [r7, #4]
 810e864:	4a15      	ldr	r2, [pc, #84]	@ (810e8bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 810e866:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810e868:	687b      	ldr	r3, [r7, #4]
 810e86a:	681b      	ldr	r3, [r3, #0]
 810e86c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e86e:	693b      	ldr	r3, [r7, #16]
 810e870:	e853 3f00 	ldrex	r3, [r3]
 810e874:	60fb      	str	r3, [r7, #12]
   return(result);
 810e876:	68fb      	ldr	r3, [r7, #12]
 810e878:	f043 0320 	orr.w	r3, r3, #32
 810e87c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810e880:	687b      	ldr	r3, [r7, #4]
 810e882:	681b      	ldr	r3, [r3, #0]
 810e884:	461a      	mov	r2, r3
 810e886:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810e88a:	61fb      	str	r3, [r7, #28]
 810e88c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e88e:	69b9      	ldr	r1, [r7, #24]
 810e890:	69fa      	ldr	r2, [r7, #28]
 810e892:	e841 2300 	strex	r3, r2, [r1]
 810e896:	617b      	str	r3, [r7, #20]
   return(result);
 810e898:	697b      	ldr	r3, [r7, #20]
 810e89a:	2b00      	cmp	r3, #0
 810e89c:	d1e4      	bne.n	810e868 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e89e:	e007      	b.n	810e8b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e8a0:	687b      	ldr	r3, [r7, #4]
 810e8a2:	681b      	ldr	r3, [r3, #0]
 810e8a4:	699a      	ldr	r2, [r3, #24]
 810e8a6:	687b      	ldr	r3, [r7, #4]
 810e8a8:	681b      	ldr	r3, [r3, #0]
 810e8aa:	f042 0208 	orr.w	r2, r2, #8
 810e8ae:	619a      	str	r2, [r3, #24]
}
 810e8b0:	bf00      	nop
 810e8b2:	37b8      	adds	r7, #184	@ 0xb8
 810e8b4:	46bd      	mov	sp, r7
 810e8b6:	bd80      	pop	{r7, pc}
 810e8b8:	58000c00 	.word	0x58000c00
 810e8bc:	0810e041 	.word	0x0810e041

0810e8c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810e8c0:	b480      	push	{r7}
 810e8c2:	b083      	sub	sp, #12
 810e8c4:	af00      	add	r7, sp, #0
 810e8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810e8c8:	bf00      	nop
 810e8ca:	370c      	adds	r7, #12
 810e8cc:	46bd      	mov	sp, r7
 810e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8d2:	4770      	bx	lr

0810e8d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810e8d4:	b480      	push	{r7}
 810e8d6:	b083      	sub	sp, #12
 810e8d8:	af00      	add	r7, sp, #0
 810e8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810e8dc:	bf00      	nop
 810e8de:	370c      	adds	r7, #12
 810e8e0:	46bd      	mov	sp, r7
 810e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8e6:	4770      	bx	lr

0810e8e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810e8e8:	b480      	push	{r7}
 810e8ea:	b083      	sub	sp, #12
 810e8ec:	af00      	add	r7, sp, #0
 810e8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810e8f0:	bf00      	nop
 810e8f2:	370c      	adds	r7, #12
 810e8f4:	46bd      	mov	sp, r7
 810e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8fa:	4770      	bx	lr

0810e8fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810e8fc:	b480      	push	{r7}
 810e8fe:	b085      	sub	sp, #20
 810e900:	af00      	add	r7, sp, #0
 810e902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810e904:	687b      	ldr	r3, [r7, #4]
 810e906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810e90a:	2b01      	cmp	r3, #1
 810e90c:	d101      	bne.n	810e912 <HAL_UARTEx_DisableFifoMode+0x16>
 810e90e:	2302      	movs	r3, #2
 810e910:	e027      	b.n	810e962 <HAL_UARTEx_DisableFifoMode+0x66>
 810e912:	687b      	ldr	r3, [r7, #4]
 810e914:	2201      	movs	r2, #1
 810e916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810e91a:	687b      	ldr	r3, [r7, #4]
 810e91c:	2224      	movs	r2, #36	@ 0x24
 810e91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810e922:	687b      	ldr	r3, [r7, #4]
 810e924:	681b      	ldr	r3, [r3, #0]
 810e926:	681b      	ldr	r3, [r3, #0]
 810e928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810e92a:	687b      	ldr	r3, [r7, #4]
 810e92c:	681b      	ldr	r3, [r3, #0]
 810e92e:	681a      	ldr	r2, [r3, #0]
 810e930:	687b      	ldr	r3, [r7, #4]
 810e932:	681b      	ldr	r3, [r3, #0]
 810e934:	f022 0201 	bic.w	r2, r2, #1
 810e938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810e93a:	68fb      	ldr	r3, [r7, #12]
 810e93c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810e940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810e942:	687b      	ldr	r3, [r7, #4]
 810e944:	2200      	movs	r2, #0
 810e946:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810e948:	687b      	ldr	r3, [r7, #4]
 810e94a:	681b      	ldr	r3, [r3, #0]
 810e94c:	68fa      	ldr	r2, [r7, #12]
 810e94e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810e950:	687b      	ldr	r3, [r7, #4]
 810e952:	2220      	movs	r2, #32
 810e954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810e958:	687b      	ldr	r3, [r7, #4]
 810e95a:	2200      	movs	r2, #0
 810e95c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810e960:	2300      	movs	r3, #0
}
 810e962:	4618      	mov	r0, r3
 810e964:	3714      	adds	r7, #20
 810e966:	46bd      	mov	sp, r7
 810e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e96c:	4770      	bx	lr

0810e96e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810e96e:	b580      	push	{r7, lr}
 810e970:	b084      	sub	sp, #16
 810e972:	af00      	add	r7, sp, #0
 810e974:	6078      	str	r0, [r7, #4]
 810e976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810e978:	687b      	ldr	r3, [r7, #4]
 810e97a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810e97e:	2b01      	cmp	r3, #1
 810e980:	d101      	bne.n	810e986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810e982:	2302      	movs	r3, #2
 810e984:	e02d      	b.n	810e9e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810e986:	687b      	ldr	r3, [r7, #4]
 810e988:	2201      	movs	r2, #1
 810e98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810e98e:	687b      	ldr	r3, [r7, #4]
 810e990:	2224      	movs	r2, #36	@ 0x24
 810e992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810e996:	687b      	ldr	r3, [r7, #4]
 810e998:	681b      	ldr	r3, [r3, #0]
 810e99a:	681b      	ldr	r3, [r3, #0]
 810e99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810e99e:	687b      	ldr	r3, [r7, #4]
 810e9a0:	681b      	ldr	r3, [r3, #0]
 810e9a2:	681a      	ldr	r2, [r3, #0]
 810e9a4:	687b      	ldr	r3, [r7, #4]
 810e9a6:	681b      	ldr	r3, [r3, #0]
 810e9a8:	f022 0201 	bic.w	r2, r2, #1
 810e9ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810e9ae:	687b      	ldr	r3, [r7, #4]
 810e9b0:	681b      	ldr	r3, [r3, #0]
 810e9b2:	689b      	ldr	r3, [r3, #8]
 810e9b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810e9b8:	687b      	ldr	r3, [r7, #4]
 810e9ba:	681b      	ldr	r3, [r3, #0]
 810e9bc:	683a      	ldr	r2, [r7, #0]
 810e9be:	430a      	orrs	r2, r1
 810e9c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810e9c2:	6878      	ldr	r0, [r7, #4]
 810e9c4:	f000 f850 	bl	810ea68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810e9c8:	687b      	ldr	r3, [r7, #4]
 810e9ca:	681b      	ldr	r3, [r3, #0]
 810e9cc:	68fa      	ldr	r2, [r7, #12]
 810e9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810e9d0:	687b      	ldr	r3, [r7, #4]
 810e9d2:	2220      	movs	r2, #32
 810e9d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810e9d8:	687b      	ldr	r3, [r7, #4]
 810e9da:	2200      	movs	r2, #0
 810e9dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810e9e0:	2300      	movs	r3, #0
}
 810e9e2:	4618      	mov	r0, r3
 810e9e4:	3710      	adds	r7, #16
 810e9e6:	46bd      	mov	sp, r7
 810e9e8:	bd80      	pop	{r7, pc}

0810e9ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810e9ea:	b580      	push	{r7, lr}
 810e9ec:	b084      	sub	sp, #16
 810e9ee:	af00      	add	r7, sp, #0
 810e9f0:	6078      	str	r0, [r7, #4]
 810e9f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810e9f4:	687b      	ldr	r3, [r7, #4]
 810e9f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810e9fa:	2b01      	cmp	r3, #1
 810e9fc:	d101      	bne.n	810ea02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810e9fe:	2302      	movs	r3, #2
 810ea00:	e02d      	b.n	810ea5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810ea02:	687b      	ldr	r3, [r7, #4]
 810ea04:	2201      	movs	r2, #1
 810ea06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ea0a:	687b      	ldr	r3, [r7, #4]
 810ea0c:	2224      	movs	r2, #36	@ 0x24
 810ea0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ea12:	687b      	ldr	r3, [r7, #4]
 810ea14:	681b      	ldr	r3, [r3, #0]
 810ea16:	681b      	ldr	r3, [r3, #0]
 810ea18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ea1a:	687b      	ldr	r3, [r7, #4]
 810ea1c:	681b      	ldr	r3, [r3, #0]
 810ea1e:	681a      	ldr	r2, [r3, #0]
 810ea20:	687b      	ldr	r3, [r7, #4]
 810ea22:	681b      	ldr	r3, [r3, #0]
 810ea24:	f022 0201 	bic.w	r2, r2, #1
 810ea28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ea2a:	687b      	ldr	r3, [r7, #4]
 810ea2c:	681b      	ldr	r3, [r3, #0]
 810ea2e:	689b      	ldr	r3, [r3, #8]
 810ea30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810ea34:	687b      	ldr	r3, [r7, #4]
 810ea36:	681b      	ldr	r3, [r3, #0]
 810ea38:	683a      	ldr	r2, [r7, #0]
 810ea3a:	430a      	orrs	r2, r1
 810ea3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ea3e:	6878      	ldr	r0, [r7, #4]
 810ea40:	f000 f812 	bl	810ea68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ea44:	687b      	ldr	r3, [r7, #4]
 810ea46:	681b      	ldr	r3, [r3, #0]
 810ea48:	68fa      	ldr	r2, [r7, #12]
 810ea4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ea4c:	687b      	ldr	r3, [r7, #4]
 810ea4e:	2220      	movs	r2, #32
 810ea50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ea54:	687b      	ldr	r3, [r7, #4]
 810ea56:	2200      	movs	r2, #0
 810ea58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ea5c:	2300      	movs	r3, #0
}
 810ea5e:	4618      	mov	r0, r3
 810ea60:	3710      	adds	r7, #16
 810ea62:	46bd      	mov	sp, r7
 810ea64:	bd80      	pop	{r7, pc}
	...

0810ea68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ea68:	b480      	push	{r7}
 810ea6a:	b085      	sub	sp, #20
 810ea6c:	af00      	add	r7, sp, #0
 810ea6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ea70:	687b      	ldr	r3, [r7, #4]
 810ea72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ea74:	2b00      	cmp	r3, #0
 810ea76:	d108      	bne.n	810ea8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ea78:	687b      	ldr	r3, [r7, #4]
 810ea7a:	2201      	movs	r2, #1
 810ea7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810ea80:	687b      	ldr	r3, [r7, #4]
 810ea82:	2201      	movs	r2, #1
 810ea84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ea88:	e031      	b.n	810eaee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ea8a:	2310      	movs	r3, #16
 810ea8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ea8e:	2310      	movs	r3, #16
 810ea90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ea92:	687b      	ldr	r3, [r7, #4]
 810ea94:	681b      	ldr	r3, [r3, #0]
 810ea96:	689b      	ldr	r3, [r3, #8]
 810ea98:	0e5b      	lsrs	r3, r3, #25
 810ea9a:	b2db      	uxtb	r3, r3
 810ea9c:	f003 0307 	and.w	r3, r3, #7
 810eaa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810eaa2:	687b      	ldr	r3, [r7, #4]
 810eaa4:	681b      	ldr	r3, [r3, #0]
 810eaa6:	689b      	ldr	r3, [r3, #8]
 810eaa8:	0f5b      	lsrs	r3, r3, #29
 810eaaa:	b2db      	uxtb	r3, r3
 810eaac:	f003 0307 	and.w	r3, r3, #7
 810eab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810eab2:	7bbb      	ldrb	r3, [r7, #14]
 810eab4:	7b3a      	ldrb	r2, [r7, #12]
 810eab6:	4911      	ldr	r1, [pc, #68]	@ (810eafc <UARTEx_SetNbDataToProcess+0x94>)
 810eab8:	5c8a      	ldrb	r2, [r1, r2]
 810eaba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810eabe:	7b3a      	ldrb	r2, [r7, #12]
 810eac0:	490f      	ldr	r1, [pc, #60]	@ (810eb00 <UARTEx_SetNbDataToProcess+0x98>)
 810eac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810eac4:	fb93 f3f2 	sdiv	r3, r3, r2
 810eac8:	b29a      	uxth	r2, r3
 810eaca:	687b      	ldr	r3, [r7, #4]
 810eacc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ead0:	7bfb      	ldrb	r3, [r7, #15]
 810ead2:	7b7a      	ldrb	r2, [r7, #13]
 810ead4:	4909      	ldr	r1, [pc, #36]	@ (810eafc <UARTEx_SetNbDataToProcess+0x94>)
 810ead6:	5c8a      	ldrb	r2, [r1, r2]
 810ead8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810eadc:	7b7a      	ldrb	r2, [r7, #13]
 810eade:	4908      	ldr	r1, [pc, #32]	@ (810eb00 <UARTEx_SetNbDataToProcess+0x98>)
 810eae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810eae2:	fb93 f3f2 	sdiv	r3, r3, r2
 810eae6:	b29a      	uxth	r2, r3
 810eae8:	687b      	ldr	r3, [r7, #4]
 810eaea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810eaee:	bf00      	nop
 810eaf0:	3714      	adds	r7, #20
 810eaf2:	46bd      	mov	sp, r7
 810eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eaf8:	4770      	bx	lr
 810eafa:	bf00      	nop
 810eafc:	081139a0 	.word	0x081139a0
 810eb00:	081139a8 	.word	0x081139a8

0810eb04 <arm_mat_trans_f32>:
 810eb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810eb08:	8802      	ldrh	r2, [r0, #0]
 810eb0a:	884b      	ldrh	r3, [r1, #2]
 810eb0c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810eb10:	684f      	ldr	r7, [r1, #4]
 810eb12:	8840      	ldrh	r0, [r0, #2]
 810eb14:	4293      	cmp	r3, r2
 810eb16:	b083      	sub	sp, #12
 810eb18:	d14c      	bne.n	810ebb4 <arm_mat_trans_f32+0xb0>
 810eb1a:	f8b1 e000 	ldrh.w	lr, [r1]
 810eb1e:	4586      	cmp	lr, r0
 810eb20:	d148      	bne.n	810ebb4 <arm_mat_trans_f32+0xb0>
 810eb22:	ea4f 089e 	mov.w	r8, lr, lsr #2
 810eb26:	009c      	lsls	r4, r3, #2
 810eb28:	f00e 0e03 	and.w	lr, lr, #3
 810eb2c:	fb08 f904 	mul.w	r9, r8, r4
 810eb30:	ea4f 028e 	mov.w	r2, lr, lsl #2
 810eb34:	011d      	lsls	r5, r3, #4
 810eb36:	00db      	lsls	r3, r3, #3
 810eb38:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810eb3c:	eb07 0a04 	add.w	sl, r7, r4
 810eb40:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 810eb44:	9201      	str	r2, [sp, #4]
 810eb46:	9300      	str	r3, [sp, #0]
 810eb48:	463b      	mov	r3, r7
 810eb4a:	f1b8 0f00 	cmp.w	r8, #0
 810eb4e:	d01d      	beq.n	810eb8c <arm_mat_trans_f32+0x88>
 810eb50:	9900      	ldr	r1, [sp, #0]
 810eb52:	f10c 0210 	add.w	r2, ip, #16
 810eb56:	4439      	add	r1, r7
 810eb58:	4640      	mov	r0, r8
 810eb5a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 810eb5e:	601e      	str	r6, [r3, #0]
 810eb60:	ed52 7a03 	vldr	s15, [r2, #-12]
 810eb64:	191e      	adds	r6, r3, r4
 810eb66:	edc6 7a00 	vstr	s15, [r6]
 810eb6a:	f852 6c08 	ldr.w	r6, [r2, #-8]
 810eb6e:	600e      	str	r6, [r1, #0]
 810eb70:	ed52 7a01 	vldr	s15, [r2, #-4]
 810eb74:	190e      	adds	r6, r1, r4
 810eb76:	3801      	subs	r0, #1
 810eb78:	442b      	add	r3, r5
 810eb7a:	f102 0210 	add.w	r2, r2, #16
 810eb7e:	edc6 7a00 	vstr	s15, [r6]
 810eb82:	4429      	add	r1, r5
 810eb84:	d1e9      	bne.n	810eb5a <arm_mat_trans_f32+0x56>
 810eb86:	44dc      	add	ip, fp
 810eb88:	eb09 0307 	add.w	r3, r9, r7
 810eb8c:	f1be 0f00 	cmp.w	lr, #0
 810eb90:	d009      	beq.n	810eba6 <arm_mat_trans_f32+0xa2>
 810eb92:	4672      	mov	r2, lr
 810eb94:	4661      	mov	r1, ip
 810eb96:	f851 0b04 	ldr.w	r0, [r1], #4
 810eb9a:	6018      	str	r0, [r3, #0]
 810eb9c:	3a01      	subs	r2, #1
 810eb9e:	4423      	add	r3, r4
 810eba0:	d1f9      	bne.n	810eb96 <arm_mat_trans_f32+0x92>
 810eba2:	9b01      	ldr	r3, [sp, #4]
 810eba4:	449c      	add	ip, r3
 810eba6:	3704      	adds	r7, #4
 810eba8:	4557      	cmp	r7, sl
 810ebaa:	d1cd      	bne.n	810eb48 <arm_mat_trans_f32+0x44>
 810ebac:	2000      	movs	r0, #0
 810ebae:	b003      	add	sp, #12
 810ebb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ebb4:	f06f 0002 	mvn.w	r0, #2
 810ebb8:	e7f9      	b.n	810ebae <arm_mat_trans_f32+0xaa>
 810ebba:	bf00      	nop

0810ebbc <arm_mat_sub_f32>:
 810ebbc:	b4f0      	push	{r4, r5, r6, r7}
 810ebbe:	e9d1 4700 	ldrd	r4, r7, [r1]
 810ebc2:	6803      	ldr	r3, [r0, #0]
 810ebc4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810ebc8:	6856      	ldr	r6, [r2, #4]
 810ebca:	42a3      	cmp	r3, r4
 810ebcc:	d15d      	bne.n	810ec8a <arm_mat_sub_f32+0xce>
 810ebce:	6812      	ldr	r2, [r2, #0]
 810ebd0:	4293      	cmp	r3, r2
 810ebd2:	d15a      	bne.n	810ec8a <arm_mat_sub_f32+0xce>
 810ebd4:	8803      	ldrh	r3, [r0, #0]
 810ebd6:	8844      	ldrh	r4, [r0, #2]
 810ebd8:	fb04 f403 	mul.w	r4, r4, r3
 810ebdc:	08a5      	lsrs	r5, r4, #2
 810ebde:	d032      	beq.n	810ec46 <arm_mat_sub_f32+0x8a>
 810ebe0:	f10c 0110 	add.w	r1, ip, #16
 810ebe4:	f107 0210 	add.w	r2, r7, #16
 810ebe8:	f106 0310 	add.w	r3, r6, #16
 810ebec:	4628      	mov	r0, r5
 810ebee:	ed12 7a04 	vldr	s14, [r2, #-16]
 810ebf2:	ed51 7a04 	vldr	s15, [r1, #-16]
 810ebf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ebfa:	3801      	subs	r0, #1
 810ebfc:	ed43 7a04 	vstr	s15, [r3, #-16]
 810ec00:	ed12 7a03 	vldr	s14, [r2, #-12]
 810ec04:	ed51 7a03 	vldr	s15, [r1, #-12]
 810ec08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ec0c:	f101 0110 	add.w	r1, r1, #16
 810ec10:	ed43 7a03 	vstr	s15, [r3, #-12]
 810ec14:	ed12 7a02 	vldr	s14, [r2, #-8]
 810ec18:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810ec1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ec20:	f102 0210 	add.w	r2, r2, #16
 810ec24:	ed43 7a02 	vstr	s15, [r3, #-8]
 810ec28:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810ec2c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810ec30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ec34:	f103 0310 	add.w	r3, r3, #16
 810ec38:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810ec3c:	d1d7      	bne.n	810ebee <arm_mat_sub_f32+0x32>
 810ec3e:	012b      	lsls	r3, r5, #4
 810ec40:	449c      	add	ip, r3
 810ec42:	441f      	add	r7, r3
 810ec44:	441e      	add	r6, r3
 810ec46:	f014 0403 	ands.w	r4, r4, #3
 810ec4a:	d01b      	beq.n	810ec84 <arm_mat_sub_f32+0xc8>
 810ec4c:	eddc 7a00 	vldr	s15, [ip]
 810ec50:	ed97 7a00 	vldr	s14, [r7]
 810ec54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ec58:	3c01      	subs	r4, #1
 810ec5a:	edc6 7a00 	vstr	s15, [r6]
 810ec5e:	d011      	beq.n	810ec84 <arm_mat_sub_f32+0xc8>
 810ec60:	eddc 7a01 	vldr	s15, [ip, #4]
 810ec64:	ed97 7a01 	vldr	s14, [r7, #4]
 810ec68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ec6c:	2c01      	cmp	r4, #1
 810ec6e:	edc6 7a01 	vstr	s15, [r6, #4]
 810ec72:	d007      	beq.n	810ec84 <arm_mat_sub_f32+0xc8>
 810ec74:	eddc 7a02 	vldr	s15, [ip, #8]
 810ec78:	ed97 7a02 	vldr	s14, [r7, #8]
 810ec7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ec80:	edc6 7a02 	vstr	s15, [r6, #8]
 810ec84:	2000      	movs	r0, #0
 810ec86:	bcf0      	pop	{r4, r5, r6, r7}
 810ec88:	4770      	bx	lr
 810ec8a:	f06f 0002 	mvn.w	r0, #2
 810ec8e:	e7fa      	b.n	810ec86 <arm_mat_sub_f32+0xca>

0810ec90 <arm_mat_mult_f32>:
 810ec90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ec94:	8845      	ldrh	r5, [r0, #2]
 810ec96:	880b      	ldrh	r3, [r1, #0]
 810ec98:	8806      	ldrh	r6, [r0, #0]
 810ec9a:	6847      	ldr	r7, [r0, #4]
 810ec9c:	6854      	ldr	r4, [r2, #4]
 810ec9e:	6848      	ldr	r0, [r1, #4]
 810eca0:	b08b      	sub	sp, #44	@ 0x2c
 810eca2:	42ab      	cmp	r3, r5
 810eca4:	9109      	str	r1, [sp, #36]	@ 0x24
 810eca6:	9604      	str	r6, [sp, #16]
 810eca8:	8849      	ldrh	r1, [r1, #2]
 810ecaa:	f040 808a 	bne.w	810edc2 <arm_mat_mult_f32+0x132>
 810ecae:	8815      	ldrh	r5, [r2, #0]
 810ecb0:	42b5      	cmp	r5, r6
 810ecb2:	f040 8086 	bne.w	810edc2 <arm_mat_mult_f32+0x132>
 810ecb6:	8852      	ldrh	r2, [r2, #2]
 810ecb8:	428a      	cmp	r2, r1
 810ecba:	f040 8082 	bne.w	810edc2 <arm_mat_mult_f32+0x132>
 810ecbe:	ea4f 0893 	mov.w	r8, r3, lsr #2
 810ecc2:	1d01      	adds	r1, r0, #4
 810ecc4:	0116      	lsls	r6, r2, #4
 810ecc6:	9108      	str	r1, [sp, #32]
 810ecc8:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 810eccc:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 810ecd0:	9101      	str	r1, [sp, #4]
 810ecd2:	fb06 f108 	mul.w	r1, r6, r8
 810ecd6:	0095      	lsls	r5, r2, #2
 810ecd8:	9103      	str	r1, [sp, #12]
 810ecda:	00d2      	lsls	r2, r2, #3
 810ecdc:	ea4f 018c 	mov.w	r1, ip, lsl #2
 810ece0:	f003 0903 	and.w	r9, r3, #3
 810ece4:	009b      	lsls	r3, r3, #2
 810ece6:	f107 0b10 	add.w	fp, r7, #16
 810ecea:	eb04 0a05 	add.w	sl, r4, r5
 810ecee:	9107      	str	r1, [sp, #28]
 810ecf0:	9202      	str	r2, [sp, #8]
 810ecf2:	9306      	str	r3, [sp, #24]
 810ecf4:	f1ab 0310 	sub.w	r3, fp, #16
 810ecf8:	9305      	str	r3, [sp, #20]
 810ecfa:	9b07      	ldr	r3, [sp, #28]
 810ecfc:	f8dd e020 	ldr.w	lr, [sp, #32]
 810ed00:	eb03 0c0a 	add.w	ip, r3, sl
 810ed04:	eddf 7a31 	vldr	s15, [pc, #196]	@ 810edcc <arm_mat_mult_f32+0x13c>
 810ed08:	f1b8 0f00 	cmp.w	r8, #0
 810ed0c:	d053      	beq.n	810edb6 <arm_mat_mult_f32+0x126>
 810ed0e:	9b02      	ldr	r3, [sp, #8]
 810ed10:	4644      	mov	r4, r8
 810ed12:	18c1      	adds	r1, r0, r3
 810ed14:	4602      	mov	r2, r0
 810ed16:	465b      	mov	r3, fp
 810ed18:	ed92 6a00 	vldr	s12, [r2]
 810ed1c:	ed13 7a04 	vldr	s14, [r3, #-16]
 810ed20:	ed53 4a03 	vldr	s9, [r3, #-12]
 810ed24:	ed53 6a02 	vldr	s13, [r3, #-8]
 810ed28:	ed91 5a00 	vldr	s10, [r1]
 810ed2c:	ed53 5a01 	vldr	s11, [r3, #-4]
 810ed30:	1957      	adds	r7, r2, r5
 810ed32:	ee27 7a06 	vmul.f32	s14, s14, s12
 810ed36:	ed97 6a00 	vldr	s12, [r7]
 810ed3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810ed3e:	ee26 6a24 	vmul.f32	s12, s12, s9
 810ed42:	194f      	adds	r7, r1, r5
 810ed44:	ee36 6a27 	vadd.f32	s12, s12, s15
 810ed48:	ee26 7a85 	vmul.f32	s14, s13, s10
 810ed4c:	edd7 7a00 	vldr	s15, [r7]
 810ed50:	ee37 7a06 	vadd.f32	s14, s14, s12
 810ed54:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810ed58:	3c01      	subs	r4, #1
 810ed5a:	4432      	add	r2, r6
 810ed5c:	4431      	add	r1, r6
 810ed5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ed62:	f103 0310 	add.w	r3, r3, #16
 810ed66:	d1d7      	bne.n	810ed18 <arm_mat_mult_f32+0x88>
 810ed68:	9b03      	ldr	r3, [sp, #12]
 810ed6a:	9a01      	ldr	r2, [sp, #4]
 810ed6c:	4418      	add	r0, r3
 810ed6e:	f1b9 0f00 	cmp.w	r9, #0
 810ed72:	d00b      	beq.n	810ed8c <arm_mat_mult_f32+0xfc>
 810ed74:	464b      	mov	r3, r9
 810ed76:	edd0 6a00 	vldr	s13, [r0]
 810ed7a:	ecb2 7a01 	vldmia	r2!, {s14}
 810ed7e:	ee27 7a26 	vmul.f32	s14, s14, s13
 810ed82:	3b01      	subs	r3, #1
 810ed84:	4428      	add	r0, r5
 810ed86:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ed8a:	d1f4      	bne.n	810ed76 <arm_mat_mult_f32+0xe6>
 810ed8c:	ecec 7a01 	vstmia	ip!, {s15}
 810ed90:	45d4      	cmp	ip, sl
 810ed92:	4670      	mov	r0, lr
 810ed94:	f10e 0e04 	add.w	lr, lr, #4
 810ed98:	d1b4      	bne.n	810ed04 <arm_mat_mult_f32+0x74>
 810ed9a:	9a01      	ldr	r2, [sp, #4]
 810ed9c:	9b06      	ldr	r3, [sp, #24]
 810ed9e:	4611      	mov	r1, r2
 810eda0:	4419      	add	r1, r3
 810eda2:	449b      	add	fp, r3
 810eda4:	9b04      	ldr	r3, [sp, #16]
 810eda6:	9101      	str	r1, [sp, #4]
 810eda8:	3b01      	subs	r3, #1
 810edaa:	44aa      	add	sl, r5
 810edac:	9304      	str	r3, [sp, #16]
 810edae:	d004      	beq.n	810edba <arm_mat_mult_f32+0x12a>
 810edb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810edb2:	6858      	ldr	r0, [r3, #4]
 810edb4:	e79e      	b.n	810ecf4 <arm_mat_mult_f32+0x64>
 810edb6:	9a05      	ldr	r2, [sp, #20]
 810edb8:	e7d9      	b.n	810ed6e <arm_mat_mult_f32+0xde>
 810edba:	4618      	mov	r0, r3
 810edbc:	b00b      	add	sp, #44	@ 0x2c
 810edbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810edc2:	f06f 0002 	mvn.w	r0, #2
 810edc6:	b00b      	add	sp, #44	@ 0x2c
 810edc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810edcc:	00000000 	.word	0x00000000

0810edd0 <arm_mat_inverse_f32>:
 810edd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810edd4:	8843      	ldrh	r3, [r0, #2]
 810edd6:	8804      	ldrh	r4, [r0, #0]
 810edd8:	684e      	ldr	r6, [r1, #4]
 810edda:	f8d0 9004 	ldr.w	r9, [r0, #4]
 810edde:	b087      	sub	sp, #28
 810ede0:	429c      	cmp	r4, r3
 810ede2:	9301      	str	r3, [sp, #4]
 810ede4:	9603      	str	r6, [sp, #12]
 810ede6:	f040 80ea 	bne.w	810efbe <arm_mat_inverse_f32+0x1ee>
 810edea:	880a      	ldrh	r2, [r1, #0]
 810edec:	884b      	ldrh	r3, [r1, #2]
 810edee:	4293      	cmp	r3, r2
 810edf0:	f040 80e5 	bne.w	810efbe <arm_mat_inverse_f32+0x1ee>
 810edf4:	429c      	cmp	r4, r3
 810edf6:	f040 80e2 	bne.w	810efbe <arm_mat_inverse_f32+0x1ee>
 810edfa:	9005      	str	r0, [sp, #20]
 810edfc:	b30c      	cbz	r4, 810ee42 <arm_mat_inverse_f32+0x72>
 810edfe:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 810ee02:	1e67      	subs	r7, r4, #1
 810ee04:	f846 bb04 	str.w	fp, [r6], #4
 810ee08:	d01b      	beq.n	810ee42 <arm_mat_inverse_f32+0x72>
 810ee0a:	f04f 0801 	mov.w	r8, #1
 810ee0e:	00ba      	lsls	r2, r7, #2
 810ee10:	eb06 0a02 	add.w	sl, r6, r2
 810ee14:	ea4f 0588 	mov.w	r5, r8, lsl #2
 810ee18:	4630      	mov	r0, r6
 810ee1a:	2100      	movs	r1, #0
 810ee1c:	f001 fa20 	bl	8110260 <memset>
 810ee20:	eb0a 0605 	add.w	r6, sl, r5
 810ee24:	462a      	mov	r2, r5
 810ee26:	2100      	movs	r1, #0
 810ee28:	4650      	mov	r0, sl
 810ee2a:	f1b8 0f00 	cmp.w	r8, #0
 810ee2e:	f000 80cb 	beq.w	810efc8 <arm_mat_inverse_f32+0x1f8>
 810ee32:	f001 fa15 	bl	8110260 <memset>
 810ee36:	3f01      	subs	r7, #1
 810ee38:	f108 0801 	add.w	r8, r8, #1
 810ee3c:	f846 bb04 	str.w	fp, [r6], #4
 810ee40:	d1e5      	bne.n	810ee0e <arm_mat_inverse_f32+0x3e>
 810ee42:	9b01      	ldr	r3, [sp, #4]
 810ee44:	2b00      	cmp	r3, #0
 810ee46:	f000 80b5 	beq.w	810efb4 <arm_mat_inverse_f32+0x1e4>
 810ee4a:	009d      	lsls	r5, r3, #2
 810ee4c:	eb09 0205 	add.w	r2, r9, r5
 810ee50:	46cc      	mov	ip, r9
 810ee52:	9202      	str	r2, [sp, #8]
 810ee54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810ee58:	1d2a      	adds	r2, r5, #4
 810ee5a:	9204      	str	r2, [sp, #16]
 810ee5c:	462f      	mov	r7, r5
 810ee5e:	469e      	mov	lr, r3
 810ee60:	2600      	movs	r6, #0
 810ee62:	9b02      	ldr	r3, [sp, #8]
 810ee64:	eddc 6a00 	vldr	s13, [ip]
 810ee68:	42b4      	cmp	r4, r6
 810ee6a:	eba3 0b07 	sub.w	fp, r3, r7
 810ee6e:	f000 80a1 	beq.w	810efb4 <arm_mat_inverse_f32+0x1e4>
 810ee72:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810efd8 <arm_mat_inverse_f32+0x208>
 810ee76:	4632      	mov	r2, r6
 810ee78:	4663      	mov	r3, ip
 810ee7a:	e00b      	b.n	810ee94 <arm_mat_inverse_f32+0xc4>
 810ee7c:	eef4 7a47 	vcmp.f32	s15, s14
 810ee80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ee84:	f102 0201 	add.w	r2, r2, #1
 810ee88:	bfc8      	it	gt
 810ee8a:	eeb0 7a67 	vmovgt.f32	s14, s15
 810ee8e:	42a2      	cmp	r2, r4
 810ee90:	442b      	add	r3, r5
 810ee92:	d014      	beq.n	810eebe <arm_mat_inverse_f32+0xee>
 810ee94:	edd3 7a00 	vldr	s15, [r3]
 810ee98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810ee9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eea0:	eeb1 6a67 	vneg.f32	s12, s15
 810eea4:	dcea      	bgt.n	810ee7c <arm_mat_inverse_f32+0xac>
 810eea6:	eeb4 6a47 	vcmp.f32	s12, s14
 810eeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eeae:	f102 0201 	add.w	r2, r2, #1
 810eeb2:	bfc8      	it	gt
 810eeb4:	eeb0 7a46 	vmovgt.f32	s14, s12
 810eeb8:	42a2      	cmp	r2, r4
 810eeba:	442b      	add	r3, r5
 810eebc:	d1ea      	bne.n	810ee94 <arm_mat_inverse_f32+0xc4>
 810eebe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810eec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eec6:	d075      	beq.n	810efb4 <arm_mat_inverse_f32+0x1e4>
 810eec8:	eef5 6a40 	vcmp.f32	s13, #0.0
 810eecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eed0:	d070      	beq.n	810efb4 <arm_mat_inverse_f32+0x1e4>
 810eed2:	4672      	mov	r2, lr
 810eed4:	4663      	mov	r3, ip
 810eed6:	ed93 7a00 	vldr	s14, [r3]
 810eeda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810eede:	3a01      	subs	r2, #1
 810eee0:	ece3 7a01 	vstmia	r3!, {s15}
 810eee4:	d1f7      	bne.n	810eed6 <arm_mat_inverse_f32+0x106>
 810eee6:	9901      	ldr	r1, [sp, #4]
 810eee8:	464b      	mov	r3, r9
 810eeea:	ed93 7a00 	vldr	s14, [r3]
 810eeee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810eef2:	3901      	subs	r1, #1
 810eef4:	ece3 7a01 	vstmia	r3!, {s15}
 810eef8:	d1f7      	bne.n	810eeea <arm_mat_inverse_f32+0x11a>
 810eefa:	9803      	ldr	r0, [sp, #12]
 810eefc:	ea4f 0886 	mov.w	r8, r6, lsl #2
 810ef00:	42b1      	cmp	r1, r6
 810ef02:	d039      	beq.n	810ef78 <arm_mat_inverse_f32+0x1a8>
 810ef04:	eddb 6a00 	vldr	s13, [fp]
 810ef08:	465a      	mov	r2, fp
 810ef0a:	4673      	mov	r3, lr
 810ef0c:	46e2      	mov	sl, ip
 810ef0e:	ecba 7a01 	vldmia	sl!, {s14}
 810ef12:	edd2 7a00 	vldr	s15, [r2]
 810ef16:	ee26 7a87 	vmul.f32	s14, s13, s14
 810ef1a:	3b01      	subs	r3, #1
 810ef1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ef20:	ece2 7a01 	vstmia	r2!, {s15}
 810ef24:	d1f3      	bne.n	810ef0e <arm_mat_inverse_f32+0x13e>
 810ef26:	9b01      	ldr	r3, [sp, #4]
 810ef28:	44bb      	add	fp, r7
 810ef2a:	4602      	mov	r2, r0
 810ef2c:	46ca      	mov	sl, r9
 810ef2e:	ecba 7a01 	vldmia	sl!, {s14}
 810ef32:	edd2 7a00 	vldr	s15, [r2]
 810ef36:	ee26 7a87 	vmul.f32	s14, s13, s14
 810ef3a:	3b01      	subs	r3, #1
 810ef3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ef40:	ece2 7a01 	vstmia	r2!, {s15}
 810ef44:	d1f3      	bne.n	810ef2e <arm_mat_inverse_f32+0x15e>
 810ef46:	4428      	add	r0, r5
 810ef48:	3101      	adds	r1, #1
 810ef4a:	428c      	cmp	r4, r1
 810ef4c:	44c3      	add	fp, r8
 810ef4e:	d1d7      	bne.n	810ef00 <arm_mat_inverse_f32+0x130>
 810ef50:	9b04      	ldr	r3, [sp, #16]
 810ef52:	f1be 0e01 	subs.w	lr, lr, #1
 810ef56:	f106 0601 	add.w	r6, r6, #1
 810ef5a:	449c      	add	ip, r3
 810ef5c:	f1a7 0704 	sub.w	r7, r7, #4
 810ef60:	44a9      	add	r9, r5
 810ef62:	f47f af7e 	bne.w	810ee62 <arm_mat_inverse_f32+0x92>
 810ef66:	eef5 6a40 	vcmp.f32	s13, #0.0
 810ef6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef6e:	d006      	beq.n	810ef7e <arm_mat_inverse_f32+0x1ae>
 810ef70:	2000      	movs	r0, #0
 810ef72:	b007      	add	sp, #28
 810ef74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ef78:	44bb      	add	fp, r7
 810ef7a:	4428      	add	r0, r5
 810ef7c:	e7e4      	b.n	810ef48 <arm_mat_inverse_f32+0x178>
 810ef7e:	9b05      	ldr	r3, [sp, #20]
 810ef80:	9a01      	ldr	r2, [sp, #4]
 810ef82:	685b      	ldr	r3, [r3, #4]
 810ef84:	edd3 7a00 	vldr	s15, [r3]
 810ef88:	eef5 7a40 	vcmp.f32	s15, #0.0
 810ef8c:	fb02 f204 	mul.w	r2, r2, r4
 810ef90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef94:	4614      	mov	r4, r2
 810ef96:	bf08      	it	eq
 810ef98:	3304      	addeq	r3, #4
 810ef9a:	d007      	beq.n	810efac <arm_mat_inverse_f32+0x1dc>
 810ef9c:	e7e8      	b.n	810ef70 <arm_mat_inverse_f32+0x1a0>
 810ef9e:	ecf3 7a01 	vldmia	r3!, {s15}
 810efa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 810efa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efaa:	d1e1      	bne.n	810ef70 <arm_mat_inverse_f32+0x1a0>
 810efac:	f10e 0e01 	add.w	lr, lr, #1
 810efb0:	4574      	cmp	r4, lr
 810efb2:	d1f4      	bne.n	810ef9e <arm_mat_inverse_f32+0x1ce>
 810efb4:	f06f 0004 	mvn.w	r0, #4
 810efb8:	b007      	add	sp, #28
 810efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810efbe:	f06f 0002 	mvn.w	r0, #2
 810efc2:	b007      	add	sp, #28
 810efc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810efc8:	4656      	mov	r6, sl
 810efca:	3f01      	subs	r7, #1
 810efcc:	f846 bb04 	str.w	fp, [r6], #4
 810efd0:	f47f af1b 	bne.w	810ee0a <arm_mat_inverse_f32+0x3a>
 810efd4:	e735      	b.n	810ee42 <arm_mat_inverse_f32+0x72>
 810efd6:	bf00      	nop
 810efd8:	00000000 	.word	0x00000000

0810efdc <arm_mat_init_f32>:
 810efdc:	8001      	strh	r1, [r0, #0]
 810efde:	8042      	strh	r2, [r0, #2]
 810efe0:	6043      	str	r3, [r0, #4]
 810efe2:	4770      	bx	lr

0810efe4 <arm_mat_add_f32>:
 810efe4:	b4f0      	push	{r4, r5, r6, r7}
 810efe6:	e9d1 4700 	ldrd	r4, r7, [r1]
 810efea:	6803      	ldr	r3, [r0, #0]
 810efec:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810eff0:	6856      	ldr	r6, [r2, #4]
 810eff2:	42a3      	cmp	r3, r4
 810eff4:	d15d      	bne.n	810f0b2 <arm_mat_add_f32+0xce>
 810eff6:	6812      	ldr	r2, [r2, #0]
 810eff8:	4293      	cmp	r3, r2
 810effa:	d15a      	bne.n	810f0b2 <arm_mat_add_f32+0xce>
 810effc:	8803      	ldrh	r3, [r0, #0]
 810effe:	8844      	ldrh	r4, [r0, #2]
 810f000:	fb04 f403 	mul.w	r4, r4, r3
 810f004:	08a5      	lsrs	r5, r4, #2
 810f006:	d032      	beq.n	810f06e <arm_mat_add_f32+0x8a>
 810f008:	f10c 0110 	add.w	r1, ip, #16
 810f00c:	f107 0210 	add.w	r2, r7, #16
 810f010:	f106 0310 	add.w	r3, r6, #16
 810f014:	4628      	mov	r0, r5
 810f016:	ed12 7a04 	vldr	s14, [r2, #-16]
 810f01a:	ed51 7a04 	vldr	s15, [r1, #-16]
 810f01e:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f022:	3801      	subs	r0, #1
 810f024:	ed43 7a04 	vstr	s15, [r3, #-16]
 810f028:	ed12 7a03 	vldr	s14, [r2, #-12]
 810f02c:	ed51 7a03 	vldr	s15, [r1, #-12]
 810f030:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f034:	f101 0110 	add.w	r1, r1, #16
 810f038:	ed43 7a03 	vstr	s15, [r3, #-12]
 810f03c:	ed12 7a02 	vldr	s14, [r2, #-8]
 810f040:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810f044:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f048:	f102 0210 	add.w	r2, r2, #16
 810f04c:	ed43 7a02 	vstr	s15, [r3, #-8]
 810f050:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810f054:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810f058:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f05c:	f103 0310 	add.w	r3, r3, #16
 810f060:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810f064:	d1d7      	bne.n	810f016 <arm_mat_add_f32+0x32>
 810f066:	012b      	lsls	r3, r5, #4
 810f068:	449c      	add	ip, r3
 810f06a:	441f      	add	r7, r3
 810f06c:	441e      	add	r6, r3
 810f06e:	f014 0403 	ands.w	r4, r4, #3
 810f072:	d01b      	beq.n	810f0ac <arm_mat_add_f32+0xc8>
 810f074:	edd7 7a00 	vldr	s15, [r7]
 810f078:	ed9c 7a00 	vldr	s14, [ip]
 810f07c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f080:	3c01      	subs	r4, #1
 810f082:	edc6 7a00 	vstr	s15, [r6]
 810f086:	d011      	beq.n	810f0ac <arm_mat_add_f32+0xc8>
 810f088:	eddc 7a01 	vldr	s15, [ip, #4]
 810f08c:	ed97 7a01 	vldr	s14, [r7, #4]
 810f090:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f094:	2c01      	cmp	r4, #1
 810f096:	edc6 7a01 	vstr	s15, [r6, #4]
 810f09a:	d007      	beq.n	810f0ac <arm_mat_add_f32+0xc8>
 810f09c:	eddc 7a02 	vldr	s15, [ip, #8]
 810f0a0:	ed97 7a02 	vldr	s14, [r7, #8]
 810f0a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f0a8:	edc6 7a02 	vstr	s15, [r6, #8]
 810f0ac:	2000      	movs	r0, #0
 810f0ae:	bcf0      	pop	{r4, r5, r6, r7}
 810f0b0:	4770      	bx	lr
 810f0b2:	f06f 0002 	mvn.w	r0, #2
 810f0b6:	e7fa      	b.n	810f0ae <arm_mat_add_f32+0xca>

0810f0b8 <arm_fir_init_f32>:
 810f0b8:	b538      	push	{r3, r4, r5, lr}
 810f0ba:	9c04      	ldr	r4, [sp, #16]
 810f0bc:	6082      	str	r2, [r0, #8]
 810f0be:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 810f0c2:	3c01      	subs	r4, #1
 810f0c4:	440c      	add	r4, r1
 810f0c6:	8001      	strh	r1, [r0, #0]
 810f0c8:	4605      	mov	r5, r0
 810f0ca:	00a2      	lsls	r2, r4, #2
 810f0cc:	4618      	mov	r0, r3
 810f0ce:	2100      	movs	r1, #0
 810f0d0:	f001 f8c6 	bl	8110260 <memset>
 810f0d4:	6068      	str	r0, [r5, #4]
 810f0d6:	bd38      	pop	{r3, r4, r5, pc}

0810f0d8 <srand>:
 810f0d8:	b538      	push	{r3, r4, r5, lr}
 810f0da:	4b10      	ldr	r3, [pc, #64]	@ (810f11c <srand+0x44>)
 810f0dc:	681d      	ldr	r5, [r3, #0]
 810f0de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810f0e0:	4604      	mov	r4, r0
 810f0e2:	b9b3      	cbnz	r3, 810f112 <srand+0x3a>
 810f0e4:	2018      	movs	r0, #24
 810f0e6:	f002 f805 	bl	81110f4 <malloc>
 810f0ea:	4602      	mov	r2, r0
 810f0ec:	6328      	str	r0, [r5, #48]	@ 0x30
 810f0ee:	b920      	cbnz	r0, 810f0fa <srand+0x22>
 810f0f0:	4b0b      	ldr	r3, [pc, #44]	@ (810f120 <srand+0x48>)
 810f0f2:	480c      	ldr	r0, [pc, #48]	@ (810f124 <srand+0x4c>)
 810f0f4:	2146      	movs	r1, #70	@ 0x46
 810f0f6:	f001 f947 	bl	8110388 <__assert_func>
 810f0fa:	490b      	ldr	r1, [pc, #44]	@ (810f128 <srand+0x50>)
 810f0fc:	4b0b      	ldr	r3, [pc, #44]	@ (810f12c <srand+0x54>)
 810f0fe:	e9c0 1300 	strd	r1, r3, [r0]
 810f102:	4b0b      	ldr	r3, [pc, #44]	@ (810f130 <srand+0x58>)
 810f104:	6083      	str	r3, [r0, #8]
 810f106:	230b      	movs	r3, #11
 810f108:	8183      	strh	r3, [r0, #12]
 810f10a:	2100      	movs	r1, #0
 810f10c:	2001      	movs	r0, #1
 810f10e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 810f112:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810f114:	2200      	movs	r2, #0
 810f116:	611c      	str	r4, [r3, #16]
 810f118:	615a      	str	r2, [r3, #20]
 810f11a:	bd38      	pop	{r3, r4, r5, pc}
 810f11c:	100000b0 	.word	0x100000b0
 810f120:	081139b0 	.word	0x081139b0
 810f124:	081139c7 	.word	0x081139c7
 810f128:	abcd330e 	.word	0xabcd330e
 810f12c:	e66d1234 	.word	0xe66d1234
 810f130:	0005deec 	.word	0x0005deec

0810f134 <__cvt>:
 810f134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f138:	ec57 6b10 	vmov	r6, r7, d0
 810f13c:	2f00      	cmp	r7, #0
 810f13e:	460c      	mov	r4, r1
 810f140:	4619      	mov	r1, r3
 810f142:	463b      	mov	r3, r7
 810f144:	bfbb      	ittet	lt
 810f146:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810f14a:	461f      	movlt	r7, r3
 810f14c:	2300      	movge	r3, #0
 810f14e:	232d      	movlt	r3, #45	@ 0x2d
 810f150:	700b      	strb	r3, [r1, #0]
 810f152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810f154:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810f158:	4691      	mov	r9, r2
 810f15a:	f023 0820 	bic.w	r8, r3, #32
 810f15e:	bfbc      	itt	lt
 810f160:	4632      	movlt	r2, r6
 810f162:	4616      	movlt	r6, r2
 810f164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810f168:	d005      	beq.n	810f176 <__cvt+0x42>
 810f16a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810f16e:	d100      	bne.n	810f172 <__cvt+0x3e>
 810f170:	3401      	adds	r4, #1
 810f172:	2102      	movs	r1, #2
 810f174:	e000      	b.n	810f178 <__cvt+0x44>
 810f176:	2103      	movs	r1, #3
 810f178:	ab03      	add	r3, sp, #12
 810f17a:	9301      	str	r3, [sp, #4]
 810f17c:	ab02      	add	r3, sp, #8
 810f17e:	9300      	str	r3, [sp, #0]
 810f180:	ec47 6b10 	vmov	d0, r6, r7
 810f184:	4653      	mov	r3, sl
 810f186:	4622      	mov	r2, r4
 810f188:	f001 f9a6 	bl	81104d8 <_dtoa_r>
 810f18c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810f190:	4605      	mov	r5, r0
 810f192:	d119      	bne.n	810f1c8 <__cvt+0x94>
 810f194:	f019 0f01 	tst.w	r9, #1
 810f198:	d00e      	beq.n	810f1b8 <__cvt+0x84>
 810f19a:	eb00 0904 	add.w	r9, r0, r4
 810f19e:	2200      	movs	r2, #0
 810f1a0:	2300      	movs	r3, #0
 810f1a2:	4630      	mov	r0, r6
 810f1a4:	4639      	mov	r1, r7
 810f1a6:	f7f1 fd17 	bl	8100bd8 <__aeabi_dcmpeq>
 810f1aa:	b108      	cbz	r0, 810f1b0 <__cvt+0x7c>
 810f1ac:	f8cd 900c 	str.w	r9, [sp, #12]
 810f1b0:	2230      	movs	r2, #48	@ 0x30
 810f1b2:	9b03      	ldr	r3, [sp, #12]
 810f1b4:	454b      	cmp	r3, r9
 810f1b6:	d31e      	bcc.n	810f1f6 <__cvt+0xc2>
 810f1b8:	9b03      	ldr	r3, [sp, #12]
 810f1ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f1bc:	1b5b      	subs	r3, r3, r5
 810f1be:	4628      	mov	r0, r5
 810f1c0:	6013      	str	r3, [r2, #0]
 810f1c2:	b004      	add	sp, #16
 810f1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f1c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810f1cc:	eb00 0904 	add.w	r9, r0, r4
 810f1d0:	d1e5      	bne.n	810f19e <__cvt+0x6a>
 810f1d2:	7803      	ldrb	r3, [r0, #0]
 810f1d4:	2b30      	cmp	r3, #48	@ 0x30
 810f1d6:	d10a      	bne.n	810f1ee <__cvt+0xba>
 810f1d8:	2200      	movs	r2, #0
 810f1da:	2300      	movs	r3, #0
 810f1dc:	4630      	mov	r0, r6
 810f1de:	4639      	mov	r1, r7
 810f1e0:	f7f1 fcfa 	bl	8100bd8 <__aeabi_dcmpeq>
 810f1e4:	b918      	cbnz	r0, 810f1ee <__cvt+0xba>
 810f1e6:	f1c4 0401 	rsb	r4, r4, #1
 810f1ea:	f8ca 4000 	str.w	r4, [sl]
 810f1ee:	f8da 3000 	ldr.w	r3, [sl]
 810f1f2:	4499      	add	r9, r3
 810f1f4:	e7d3      	b.n	810f19e <__cvt+0x6a>
 810f1f6:	1c59      	adds	r1, r3, #1
 810f1f8:	9103      	str	r1, [sp, #12]
 810f1fa:	701a      	strb	r2, [r3, #0]
 810f1fc:	e7d9      	b.n	810f1b2 <__cvt+0x7e>

0810f1fe <__exponent>:
 810f1fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810f200:	2900      	cmp	r1, #0
 810f202:	bfba      	itte	lt
 810f204:	4249      	neglt	r1, r1
 810f206:	232d      	movlt	r3, #45	@ 0x2d
 810f208:	232b      	movge	r3, #43	@ 0x2b
 810f20a:	2909      	cmp	r1, #9
 810f20c:	7002      	strb	r2, [r0, #0]
 810f20e:	7043      	strb	r3, [r0, #1]
 810f210:	dd29      	ble.n	810f266 <__exponent+0x68>
 810f212:	f10d 0307 	add.w	r3, sp, #7
 810f216:	461d      	mov	r5, r3
 810f218:	270a      	movs	r7, #10
 810f21a:	461a      	mov	r2, r3
 810f21c:	fbb1 f6f7 	udiv	r6, r1, r7
 810f220:	fb07 1416 	mls	r4, r7, r6, r1
 810f224:	3430      	adds	r4, #48	@ 0x30
 810f226:	f802 4c01 	strb.w	r4, [r2, #-1]
 810f22a:	460c      	mov	r4, r1
 810f22c:	2c63      	cmp	r4, #99	@ 0x63
 810f22e:	f103 33ff 	add.w	r3, r3, #4294967295
 810f232:	4631      	mov	r1, r6
 810f234:	dcf1      	bgt.n	810f21a <__exponent+0x1c>
 810f236:	3130      	adds	r1, #48	@ 0x30
 810f238:	1e94      	subs	r4, r2, #2
 810f23a:	f803 1c01 	strb.w	r1, [r3, #-1]
 810f23e:	1c41      	adds	r1, r0, #1
 810f240:	4623      	mov	r3, r4
 810f242:	42ab      	cmp	r3, r5
 810f244:	d30a      	bcc.n	810f25c <__exponent+0x5e>
 810f246:	f10d 0309 	add.w	r3, sp, #9
 810f24a:	1a9b      	subs	r3, r3, r2
 810f24c:	42ac      	cmp	r4, r5
 810f24e:	bf88      	it	hi
 810f250:	2300      	movhi	r3, #0
 810f252:	3302      	adds	r3, #2
 810f254:	4403      	add	r3, r0
 810f256:	1a18      	subs	r0, r3, r0
 810f258:	b003      	add	sp, #12
 810f25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810f25c:	f813 6b01 	ldrb.w	r6, [r3], #1
 810f260:	f801 6f01 	strb.w	r6, [r1, #1]!
 810f264:	e7ed      	b.n	810f242 <__exponent+0x44>
 810f266:	2330      	movs	r3, #48	@ 0x30
 810f268:	3130      	adds	r1, #48	@ 0x30
 810f26a:	7083      	strb	r3, [r0, #2]
 810f26c:	70c1      	strb	r1, [r0, #3]
 810f26e:	1d03      	adds	r3, r0, #4
 810f270:	e7f1      	b.n	810f256 <__exponent+0x58>
	...

0810f274 <_printf_float>:
 810f274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f278:	b08d      	sub	sp, #52	@ 0x34
 810f27a:	460c      	mov	r4, r1
 810f27c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810f280:	4616      	mov	r6, r2
 810f282:	461f      	mov	r7, r3
 810f284:	4605      	mov	r5, r0
 810f286:	f000 fff3 	bl	8110270 <_localeconv_r>
 810f28a:	6803      	ldr	r3, [r0, #0]
 810f28c:	9304      	str	r3, [sp, #16]
 810f28e:	4618      	mov	r0, r3
 810f290:	f7f1 f876 	bl	8100380 <strlen>
 810f294:	2300      	movs	r3, #0
 810f296:	930a      	str	r3, [sp, #40]	@ 0x28
 810f298:	f8d8 3000 	ldr.w	r3, [r8]
 810f29c:	9005      	str	r0, [sp, #20]
 810f29e:	3307      	adds	r3, #7
 810f2a0:	f023 0307 	bic.w	r3, r3, #7
 810f2a4:	f103 0208 	add.w	r2, r3, #8
 810f2a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 810f2ac:	f8d4 b000 	ldr.w	fp, [r4]
 810f2b0:	f8c8 2000 	str.w	r2, [r8]
 810f2b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 810f2b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810f2bc:	9307      	str	r3, [sp, #28]
 810f2be:	f8cd 8018 	str.w	r8, [sp, #24]
 810f2c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810f2c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f2ca:	4b9c      	ldr	r3, [pc, #624]	@ (810f53c <_printf_float+0x2c8>)
 810f2cc:	f04f 32ff 	mov.w	r2, #4294967295
 810f2d0:	f7f1 fcb4 	bl	8100c3c <__aeabi_dcmpun>
 810f2d4:	bb70      	cbnz	r0, 810f334 <_printf_float+0xc0>
 810f2d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f2da:	4b98      	ldr	r3, [pc, #608]	@ (810f53c <_printf_float+0x2c8>)
 810f2dc:	f04f 32ff 	mov.w	r2, #4294967295
 810f2e0:	f7f1 fc8e 	bl	8100c00 <__aeabi_dcmple>
 810f2e4:	bb30      	cbnz	r0, 810f334 <_printf_float+0xc0>
 810f2e6:	2200      	movs	r2, #0
 810f2e8:	2300      	movs	r3, #0
 810f2ea:	4640      	mov	r0, r8
 810f2ec:	4649      	mov	r1, r9
 810f2ee:	f7f1 fc7d 	bl	8100bec <__aeabi_dcmplt>
 810f2f2:	b110      	cbz	r0, 810f2fa <_printf_float+0x86>
 810f2f4:	232d      	movs	r3, #45	@ 0x2d
 810f2f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f2fa:	4a91      	ldr	r2, [pc, #580]	@ (810f540 <_printf_float+0x2cc>)
 810f2fc:	4b91      	ldr	r3, [pc, #580]	@ (810f544 <_printf_float+0x2d0>)
 810f2fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810f302:	bf94      	ite	ls
 810f304:	4690      	movls	r8, r2
 810f306:	4698      	movhi	r8, r3
 810f308:	2303      	movs	r3, #3
 810f30a:	6123      	str	r3, [r4, #16]
 810f30c:	f02b 0304 	bic.w	r3, fp, #4
 810f310:	6023      	str	r3, [r4, #0]
 810f312:	f04f 0900 	mov.w	r9, #0
 810f316:	9700      	str	r7, [sp, #0]
 810f318:	4633      	mov	r3, r6
 810f31a:	aa0b      	add	r2, sp, #44	@ 0x2c
 810f31c:	4621      	mov	r1, r4
 810f31e:	4628      	mov	r0, r5
 810f320:	f000 f9d2 	bl	810f6c8 <_printf_common>
 810f324:	3001      	adds	r0, #1
 810f326:	f040 808d 	bne.w	810f444 <_printf_float+0x1d0>
 810f32a:	f04f 30ff 	mov.w	r0, #4294967295
 810f32e:	b00d      	add	sp, #52	@ 0x34
 810f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f334:	4642      	mov	r2, r8
 810f336:	464b      	mov	r3, r9
 810f338:	4640      	mov	r0, r8
 810f33a:	4649      	mov	r1, r9
 810f33c:	f7f1 fc7e 	bl	8100c3c <__aeabi_dcmpun>
 810f340:	b140      	cbz	r0, 810f354 <_printf_float+0xe0>
 810f342:	464b      	mov	r3, r9
 810f344:	2b00      	cmp	r3, #0
 810f346:	bfbc      	itt	lt
 810f348:	232d      	movlt	r3, #45	@ 0x2d
 810f34a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810f34e:	4a7e      	ldr	r2, [pc, #504]	@ (810f548 <_printf_float+0x2d4>)
 810f350:	4b7e      	ldr	r3, [pc, #504]	@ (810f54c <_printf_float+0x2d8>)
 810f352:	e7d4      	b.n	810f2fe <_printf_float+0x8a>
 810f354:	6863      	ldr	r3, [r4, #4]
 810f356:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810f35a:	9206      	str	r2, [sp, #24]
 810f35c:	1c5a      	adds	r2, r3, #1
 810f35e:	d13b      	bne.n	810f3d8 <_printf_float+0x164>
 810f360:	2306      	movs	r3, #6
 810f362:	6063      	str	r3, [r4, #4]
 810f364:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810f368:	2300      	movs	r3, #0
 810f36a:	6022      	str	r2, [r4, #0]
 810f36c:	9303      	str	r3, [sp, #12]
 810f36e:	ab0a      	add	r3, sp, #40	@ 0x28
 810f370:	e9cd a301 	strd	sl, r3, [sp, #4]
 810f374:	ab09      	add	r3, sp, #36	@ 0x24
 810f376:	9300      	str	r3, [sp, #0]
 810f378:	6861      	ldr	r1, [r4, #4]
 810f37a:	ec49 8b10 	vmov	d0, r8, r9
 810f37e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810f382:	4628      	mov	r0, r5
 810f384:	f7ff fed6 	bl	810f134 <__cvt>
 810f388:	9b06      	ldr	r3, [sp, #24]
 810f38a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810f38c:	2b47      	cmp	r3, #71	@ 0x47
 810f38e:	4680      	mov	r8, r0
 810f390:	d129      	bne.n	810f3e6 <_printf_float+0x172>
 810f392:	1cc8      	adds	r0, r1, #3
 810f394:	db02      	blt.n	810f39c <_printf_float+0x128>
 810f396:	6863      	ldr	r3, [r4, #4]
 810f398:	4299      	cmp	r1, r3
 810f39a:	dd41      	ble.n	810f420 <_printf_float+0x1ac>
 810f39c:	f1aa 0a02 	sub.w	sl, sl, #2
 810f3a0:	fa5f fa8a 	uxtb.w	sl, sl
 810f3a4:	3901      	subs	r1, #1
 810f3a6:	4652      	mov	r2, sl
 810f3a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810f3ac:	9109      	str	r1, [sp, #36]	@ 0x24
 810f3ae:	f7ff ff26 	bl	810f1fe <__exponent>
 810f3b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810f3b4:	1813      	adds	r3, r2, r0
 810f3b6:	2a01      	cmp	r2, #1
 810f3b8:	4681      	mov	r9, r0
 810f3ba:	6123      	str	r3, [r4, #16]
 810f3bc:	dc02      	bgt.n	810f3c4 <_printf_float+0x150>
 810f3be:	6822      	ldr	r2, [r4, #0]
 810f3c0:	07d2      	lsls	r2, r2, #31
 810f3c2:	d501      	bpl.n	810f3c8 <_printf_float+0x154>
 810f3c4:	3301      	adds	r3, #1
 810f3c6:	6123      	str	r3, [r4, #16]
 810f3c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810f3cc:	2b00      	cmp	r3, #0
 810f3ce:	d0a2      	beq.n	810f316 <_printf_float+0xa2>
 810f3d0:	232d      	movs	r3, #45	@ 0x2d
 810f3d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f3d6:	e79e      	b.n	810f316 <_printf_float+0xa2>
 810f3d8:	9a06      	ldr	r2, [sp, #24]
 810f3da:	2a47      	cmp	r2, #71	@ 0x47
 810f3dc:	d1c2      	bne.n	810f364 <_printf_float+0xf0>
 810f3de:	2b00      	cmp	r3, #0
 810f3e0:	d1c0      	bne.n	810f364 <_printf_float+0xf0>
 810f3e2:	2301      	movs	r3, #1
 810f3e4:	e7bd      	b.n	810f362 <_printf_float+0xee>
 810f3e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810f3ea:	d9db      	bls.n	810f3a4 <_printf_float+0x130>
 810f3ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810f3f0:	d118      	bne.n	810f424 <_printf_float+0x1b0>
 810f3f2:	2900      	cmp	r1, #0
 810f3f4:	6863      	ldr	r3, [r4, #4]
 810f3f6:	dd0b      	ble.n	810f410 <_printf_float+0x19c>
 810f3f8:	6121      	str	r1, [r4, #16]
 810f3fa:	b913      	cbnz	r3, 810f402 <_printf_float+0x18e>
 810f3fc:	6822      	ldr	r2, [r4, #0]
 810f3fe:	07d0      	lsls	r0, r2, #31
 810f400:	d502      	bpl.n	810f408 <_printf_float+0x194>
 810f402:	3301      	adds	r3, #1
 810f404:	440b      	add	r3, r1
 810f406:	6123      	str	r3, [r4, #16]
 810f408:	65a1      	str	r1, [r4, #88]	@ 0x58
 810f40a:	f04f 0900 	mov.w	r9, #0
 810f40e:	e7db      	b.n	810f3c8 <_printf_float+0x154>
 810f410:	b913      	cbnz	r3, 810f418 <_printf_float+0x1a4>
 810f412:	6822      	ldr	r2, [r4, #0]
 810f414:	07d2      	lsls	r2, r2, #31
 810f416:	d501      	bpl.n	810f41c <_printf_float+0x1a8>
 810f418:	3302      	adds	r3, #2
 810f41a:	e7f4      	b.n	810f406 <_printf_float+0x192>
 810f41c:	2301      	movs	r3, #1
 810f41e:	e7f2      	b.n	810f406 <_printf_float+0x192>
 810f420:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810f424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f426:	4299      	cmp	r1, r3
 810f428:	db05      	blt.n	810f436 <_printf_float+0x1c2>
 810f42a:	6823      	ldr	r3, [r4, #0]
 810f42c:	6121      	str	r1, [r4, #16]
 810f42e:	07d8      	lsls	r0, r3, #31
 810f430:	d5ea      	bpl.n	810f408 <_printf_float+0x194>
 810f432:	1c4b      	adds	r3, r1, #1
 810f434:	e7e7      	b.n	810f406 <_printf_float+0x192>
 810f436:	2900      	cmp	r1, #0
 810f438:	bfd4      	ite	le
 810f43a:	f1c1 0202 	rsble	r2, r1, #2
 810f43e:	2201      	movgt	r2, #1
 810f440:	4413      	add	r3, r2
 810f442:	e7e0      	b.n	810f406 <_printf_float+0x192>
 810f444:	6823      	ldr	r3, [r4, #0]
 810f446:	055a      	lsls	r2, r3, #21
 810f448:	d407      	bmi.n	810f45a <_printf_float+0x1e6>
 810f44a:	6923      	ldr	r3, [r4, #16]
 810f44c:	4642      	mov	r2, r8
 810f44e:	4631      	mov	r1, r6
 810f450:	4628      	mov	r0, r5
 810f452:	47b8      	blx	r7
 810f454:	3001      	adds	r0, #1
 810f456:	d12b      	bne.n	810f4b0 <_printf_float+0x23c>
 810f458:	e767      	b.n	810f32a <_printf_float+0xb6>
 810f45a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810f45e:	f240 80dd 	bls.w	810f61c <_printf_float+0x3a8>
 810f462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810f466:	2200      	movs	r2, #0
 810f468:	2300      	movs	r3, #0
 810f46a:	f7f1 fbb5 	bl	8100bd8 <__aeabi_dcmpeq>
 810f46e:	2800      	cmp	r0, #0
 810f470:	d033      	beq.n	810f4da <_printf_float+0x266>
 810f472:	4a37      	ldr	r2, [pc, #220]	@ (810f550 <_printf_float+0x2dc>)
 810f474:	2301      	movs	r3, #1
 810f476:	4631      	mov	r1, r6
 810f478:	4628      	mov	r0, r5
 810f47a:	47b8      	blx	r7
 810f47c:	3001      	adds	r0, #1
 810f47e:	f43f af54 	beq.w	810f32a <_printf_float+0xb6>
 810f482:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810f486:	4543      	cmp	r3, r8
 810f488:	db02      	blt.n	810f490 <_printf_float+0x21c>
 810f48a:	6823      	ldr	r3, [r4, #0]
 810f48c:	07d8      	lsls	r0, r3, #31
 810f48e:	d50f      	bpl.n	810f4b0 <_printf_float+0x23c>
 810f490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f494:	4631      	mov	r1, r6
 810f496:	4628      	mov	r0, r5
 810f498:	47b8      	blx	r7
 810f49a:	3001      	adds	r0, #1
 810f49c:	f43f af45 	beq.w	810f32a <_printf_float+0xb6>
 810f4a0:	f04f 0900 	mov.w	r9, #0
 810f4a4:	f108 38ff 	add.w	r8, r8, #4294967295
 810f4a8:	f104 0a1a 	add.w	sl, r4, #26
 810f4ac:	45c8      	cmp	r8, r9
 810f4ae:	dc09      	bgt.n	810f4c4 <_printf_float+0x250>
 810f4b0:	6823      	ldr	r3, [r4, #0]
 810f4b2:	079b      	lsls	r3, r3, #30
 810f4b4:	f100 8103 	bmi.w	810f6be <_printf_float+0x44a>
 810f4b8:	68e0      	ldr	r0, [r4, #12]
 810f4ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810f4bc:	4298      	cmp	r0, r3
 810f4be:	bfb8      	it	lt
 810f4c0:	4618      	movlt	r0, r3
 810f4c2:	e734      	b.n	810f32e <_printf_float+0xba>
 810f4c4:	2301      	movs	r3, #1
 810f4c6:	4652      	mov	r2, sl
 810f4c8:	4631      	mov	r1, r6
 810f4ca:	4628      	mov	r0, r5
 810f4cc:	47b8      	blx	r7
 810f4ce:	3001      	adds	r0, #1
 810f4d0:	f43f af2b 	beq.w	810f32a <_printf_float+0xb6>
 810f4d4:	f109 0901 	add.w	r9, r9, #1
 810f4d8:	e7e8      	b.n	810f4ac <_printf_float+0x238>
 810f4da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f4dc:	2b00      	cmp	r3, #0
 810f4de:	dc39      	bgt.n	810f554 <_printf_float+0x2e0>
 810f4e0:	4a1b      	ldr	r2, [pc, #108]	@ (810f550 <_printf_float+0x2dc>)
 810f4e2:	2301      	movs	r3, #1
 810f4e4:	4631      	mov	r1, r6
 810f4e6:	4628      	mov	r0, r5
 810f4e8:	47b8      	blx	r7
 810f4ea:	3001      	adds	r0, #1
 810f4ec:	f43f af1d 	beq.w	810f32a <_printf_float+0xb6>
 810f4f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810f4f4:	ea59 0303 	orrs.w	r3, r9, r3
 810f4f8:	d102      	bne.n	810f500 <_printf_float+0x28c>
 810f4fa:	6823      	ldr	r3, [r4, #0]
 810f4fc:	07d9      	lsls	r1, r3, #31
 810f4fe:	d5d7      	bpl.n	810f4b0 <_printf_float+0x23c>
 810f500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f504:	4631      	mov	r1, r6
 810f506:	4628      	mov	r0, r5
 810f508:	47b8      	blx	r7
 810f50a:	3001      	adds	r0, #1
 810f50c:	f43f af0d 	beq.w	810f32a <_printf_float+0xb6>
 810f510:	f04f 0a00 	mov.w	sl, #0
 810f514:	f104 0b1a 	add.w	fp, r4, #26
 810f518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f51a:	425b      	negs	r3, r3
 810f51c:	4553      	cmp	r3, sl
 810f51e:	dc01      	bgt.n	810f524 <_printf_float+0x2b0>
 810f520:	464b      	mov	r3, r9
 810f522:	e793      	b.n	810f44c <_printf_float+0x1d8>
 810f524:	2301      	movs	r3, #1
 810f526:	465a      	mov	r2, fp
 810f528:	4631      	mov	r1, r6
 810f52a:	4628      	mov	r0, r5
 810f52c:	47b8      	blx	r7
 810f52e:	3001      	adds	r0, #1
 810f530:	f43f aefb 	beq.w	810f32a <_printf_float+0xb6>
 810f534:	f10a 0a01 	add.w	sl, sl, #1
 810f538:	e7ee      	b.n	810f518 <_printf_float+0x2a4>
 810f53a:	bf00      	nop
 810f53c:	7fefffff 	.word	0x7fefffff
 810f540:	08113a1f 	.word	0x08113a1f
 810f544:	08113a23 	.word	0x08113a23
 810f548:	08113a27 	.word	0x08113a27
 810f54c:	08113a2b 	.word	0x08113a2b
 810f550:	08113a2f 	.word	0x08113a2f
 810f554:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810f556:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810f55a:	4553      	cmp	r3, sl
 810f55c:	bfa8      	it	ge
 810f55e:	4653      	movge	r3, sl
 810f560:	2b00      	cmp	r3, #0
 810f562:	4699      	mov	r9, r3
 810f564:	dc36      	bgt.n	810f5d4 <_printf_float+0x360>
 810f566:	f04f 0b00 	mov.w	fp, #0
 810f56a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f56e:	f104 021a 	add.w	r2, r4, #26
 810f572:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810f574:	9306      	str	r3, [sp, #24]
 810f576:	eba3 0309 	sub.w	r3, r3, r9
 810f57a:	455b      	cmp	r3, fp
 810f57c:	dc31      	bgt.n	810f5e2 <_printf_float+0x36e>
 810f57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f580:	459a      	cmp	sl, r3
 810f582:	dc3a      	bgt.n	810f5fa <_printf_float+0x386>
 810f584:	6823      	ldr	r3, [r4, #0]
 810f586:	07da      	lsls	r2, r3, #31
 810f588:	d437      	bmi.n	810f5fa <_printf_float+0x386>
 810f58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f58c:	ebaa 0903 	sub.w	r9, sl, r3
 810f590:	9b06      	ldr	r3, [sp, #24]
 810f592:	ebaa 0303 	sub.w	r3, sl, r3
 810f596:	4599      	cmp	r9, r3
 810f598:	bfa8      	it	ge
 810f59a:	4699      	movge	r9, r3
 810f59c:	f1b9 0f00 	cmp.w	r9, #0
 810f5a0:	dc33      	bgt.n	810f60a <_printf_float+0x396>
 810f5a2:	f04f 0800 	mov.w	r8, #0
 810f5a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f5aa:	f104 0b1a 	add.w	fp, r4, #26
 810f5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f5b0:	ebaa 0303 	sub.w	r3, sl, r3
 810f5b4:	eba3 0309 	sub.w	r3, r3, r9
 810f5b8:	4543      	cmp	r3, r8
 810f5ba:	f77f af79 	ble.w	810f4b0 <_printf_float+0x23c>
 810f5be:	2301      	movs	r3, #1
 810f5c0:	465a      	mov	r2, fp
 810f5c2:	4631      	mov	r1, r6
 810f5c4:	4628      	mov	r0, r5
 810f5c6:	47b8      	blx	r7
 810f5c8:	3001      	adds	r0, #1
 810f5ca:	f43f aeae 	beq.w	810f32a <_printf_float+0xb6>
 810f5ce:	f108 0801 	add.w	r8, r8, #1
 810f5d2:	e7ec      	b.n	810f5ae <_printf_float+0x33a>
 810f5d4:	4642      	mov	r2, r8
 810f5d6:	4631      	mov	r1, r6
 810f5d8:	4628      	mov	r0, r5
 810f5da:	47b8      	blx	r7
 810f5dc:	3001      	adds	r0, #1
 810f5de:	d1c2      	bne.n	810f566 <_printf_float+0x2f2>
 810f5e0:	e6a3      	b.n	810f32a <_printf_float+0xb6>
 810f5e2:	2301      	movs	r3, #1
 810f5e4:	4631      	mov	r1, r6
 810f5e6:	4628      	mov	r0, r5
 810f5e8:	9206      	str	r2, [sp, #24]
 810f5ea:	47b8      	blx	r7
 810f5ec:	3001      	adds	r0, #1
 810f5ee:	f43f ae9c 	beq.w	810f32a <_printf_float+0xb6>
 810f5f2:	9a06      	ldr	r2, [sp, #24]
 810f5f4:	f10b 0b01 	add.w	fp, fp, #1
 810f5f8:	e7bb      	b.n	810f572 <_printf_float+0x2fe>
 810f5fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f5fe:	4631      	mov	r1, r6
 810f600:	4628      	mov	r0, r5
 810f602:	47b8      	blx	r7
 810f604:	3001      	adds	r0, #1
 810f606:	d1c0      	bne.n	810f58a <_printf_float+0x316>
 810f608:	e68f      	b.n	810f32a <_printf_float+0xb6>
 810f60a:	9a06      	ldr	r2, [sp, #24]
 810f60c:	464b      	mov	r3, r9
 810f60e:	4442      	add	r2, r8
 810f610:	4631      	mov	r1, r6
 810f612:	4628      	mov	r0, r5
 810f614:	47b8      	blx	r7
 810f616:	3001      	adds	r0, #1
 810f618:	d1c3      	bne.n	810f5a2 <_printf_float+0x32e>
 810f61a:	e686      	b.n	810f32a <_printf_float+0xb6>
 810f61c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810f620:	f1ba 0f01 	cmp.w	sl, #1
 810f624:	dc01      	bgt.n	810f62a <_printf_float+0x3b6>
 810f626:	07db      	lsls	r3, r3, #31
 810f628:	d536      	bpl.n	810f698 <_printf_float+0x424>
 810f62a:	2301      	movs	r3, #1
 810f62c:	4642      	mov	r2, r8
 810f62e:	4631      	mov	r1, r6
 810f630:	4628      	mov	r0, r5
 810f632:	47b8      	blx	r7
 810f634:	3001      	adds	r0, #1
 810f636:	f43f ae78 	beq.w	810f32a <_printf_float+0xb6>
 810f63a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f63e:	4631      	mov	r1, r6
 810f640:	4628      	mov	r0, r5
 810f642:	47b8      	blx	r7
 810f644:	3001      	adds	r0, #1
 810f646:	f43f ae70 	beq.w	810f32a <_printf_float+0xb6>
 810f64a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810f64e:	2200      	movs	r2, #0
 810f650:	2300      	movs	r3, #0
 810f652:	f10a 3aff 	add.w	sl, sl, #4294967295
 810f656:	f7f1 fabf 	bl	8100bd8 <__aeabi_dcmpeq>
 810f65a:	b9c0      	cbnz	r0, 810f68e <_printf_float+0x41a>
 810f65c:	4653      	mov	r3, sl
 810f65e:	f108 0201 	add.w	r2, r8, #1
 810f662:	4631      	mov	r1, r6
 810f664:	4628      	mov	r0, r5
 810f666:	47b8      	blx	r7
 810f668:	3001      	adds	r0, #1
 810f66a:	d10c      	bne.n	810f686 <_printf_float+0x412>
 810f66c:	e65d      	b.n	810f32a <_printf_float+0xb6>
 810f66e:	2301      	movs	r3, #1
 810f670:	465a      	mov	r2, fp
 810f672:	4631      	mov	r1, r6
 810f674:	4628      	mov	r0, r5
 810f676:	47b8      	blx	r7
 810f678:	3001      	adds	r0, #1
 810f67a:	f43f ae56 	beq.w	810f32a <_printf_float+0xb6>
 810f67e:	f108 0801 	add.w	r8, r8, #1
 810f682:	45d0      	cmp	r8, sl
 810f684:	dbf3      	blt.n	810f66e <_printf_float+0x3fa>
 810f686:	464b      	mov	r3, r9
 810f688:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810f68c:	e6df      	b.n	810f44e <_printf_float+0x1da>
 810f68e:	f04f 0800 	mov.w	r8, #0
 810f692:	f104 0b1a 	add.w	fp, r4, #26
 810f696:	e7f4      	b.n	810f682 <_printf_float+0x40e>
 810f698:	2301      	movs	r3, #1
 810f69a:	4642      	mov	r2, r8
 810f69c:	e7e1      	b.n	810f662 <_printf_float+0x3ee>
 810f69e:	2301      	movs	r3, #1
 810f6a0:	464a      	mov	r2, r9
 810f6a2:	4631      	mov	r1, r6
 810f6a4:	4628      	mov	r0, r5
 810f6a6:	47b8      	blx	r7
 810f6a8:	3001      	adds	r0, #1
 810f6aa:	f43f ae3e 	beq.w	810f32a <_printf_float+0xb6>
 810f6ae:	f108 0801 	add.w	r8, r8, #1
 810f6b2:	68e3      	ldr	r3, [r4, #12]
 810f6b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810f6b6:	1a5b      	subs	r3, r3, r1
 810f6b8:	4543      	cmp	r3, r8
 810f6ba:	dcf0      	bgt.n	810f69e <_printf_float+0x42a>
 810f6bc:	e6fc      	b.n	810f4b8 <_printf_float+0x244>
 810f6be:	f04f 0800 	mov.w	r8, #0
 810f6c2:	f104 0919 	add.w	r9, r4, #25
 810f6c6:	e7f4      	b.n	810f6b2 <_printf_float+0x43e>

0810f6c8 <_printf_common>:
 810f6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f6cc:	4616      	mov	r6, r2
 810f6ce:	4698      	mov	r8, r3
 810f6d0:	688a      	ldr	r2, [r1, #8]
 810f6d2:	690b      	ldr	r3, [r1, #16]
 810f6d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810f6d8:	4293      	cmp	r3, r2
 810f6da:	bfb8      	it	lt
 810f6dc:	4613      	movlt	r3, r2
 810f6de:	6033      	str	r3, [r6, #0]
 810f6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810f6e4:	4607      	mov	r7, r0
 810f6e6:	460c      	mov	r4, r1
 810f6e8:	b10a      	cbz	r2, 810f6ee <_printf_common+0x26>
 810f6ea:	3301      	adds	r3, #1
 810f6ec:	6033      	str	r3, [r6, #0]
 810f6ee:	6823      	ldr	r3, [r4, #0]
 810f6f0:	0699      	lsls	r1, r3, #26
 810f6f2:	bf42      	ittt	mi
 810f6f4:	6833      	ldrmi	r3, [r6, #0]
 810f6f6:	3302      	addmi	r3, #2
 810f6f8:	6033      	strmi	r3, [r6, #0]
 810f6fa:	6825      	ldr	r5, [r4, #0]
 810f6fc:	f015 0506 	ands.w	r5, r5, #6
 810f700:	d106      	bne.n	810f710 <_printf_common+0x48>
 810f702:	f104 0a19 	add.w	sl, r4, #25
 810f706:	68e3      	ldr	r3, [r4, #12]
 810f708:	6832      	ldr	r2, [r6, #0]
 810f70a:	1a9b      	subs	r3, r3, r2
 810f70c:	42ab      	cmp	r3, r5
 810f70e:	dc26      	bgt.n	810f75e <_printf_common+0x96>
 810f710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810f714:	6822      	ldr	r2, [r4, #0]
 810f716:	3b00      	subs	r3, #0
 810f718:	bf18      	it	ne
 810f71a:	2301      	movne	r3, #1
 810f71c:	0692      	lsls	r2, r2, #26
 810f71e:	d42b      	bmi.n	810f778 <_printf_common+0xb0>
 810f720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810f724:	4641      	mov	r1, r8
 810f726:	4638      	mov	r0, r7
 810f728:	47c8      	blx	r9
 810f72a:	3001      	adds	r0, #1
 810f72c:	d01e      	beq.n	810f76c <_printf_common+0xa4>
 810f72e:	6823      	ldr	r3, [r4, #0]
 810f730:	6922      	ldr	r2, [r4, #16]
 810f732:	f003 0306 	and.w	r3, r3, #6
 810f736:	2b04      	cmp	r3, #4
 810f738:	bf02      	ittt	eq
 810f73a:	68e5      	ldreq	r5, [r4, #12]
 810f73c:	6833      	ldreq	r3, [r6, #0]
 810f73e:	1aed      	subeq	r5, r5, r3
 810f740:	68a3      	ldr	r3, [r4, #8]
 810f742:	bf0c      	ite	eq
 810f744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810f748:	2500      	movne	r5, #0
 810f74a:	4293      	cmp	r3, r2
 810f74c:	bfc4      	itt	gt
 810f74e:	1a9b      	subgt	r3, r3, r2
 810f750:	18ed      	addgt	r5, r5, r3
 810f752:	2600      	movs	r6, #0
 810f754:	341a      	adds	r4, #26
 810f756:	42b5      	cmp	r5, r6
 810f758:	d11a      	bne.n	810f790 <_printf_common+0xc8>
 810f75a:	2000      	movs	r0, #0
 810f75c:	e008      	b.n	810f770 <_printf_common+0xa8>
 810f75e:	2301      	movs	r3, #1
 810f760:	4652      	mov	r2, sl
 810f762:	4641      	mov	r1, r8
 810f764:	4638      	mov	r0, r7
 810f766:	47c8      	blx	r9
 810f768:	3001      	adds	r0, #1
 810f76a:	d103      	bne.n	810f774 <_printf_common+0xac>
 810f76c:	f04f 30ff 	mov.w	r0, #4294967295
 810f770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f774:	3501      	adds	r5, #1
 810f776:	e7c6      	b.n	810f706 <_printf_common+0x3e>
 810f778:	18e1      	adds	r1, r4, r3
 810f77a:	1c5a      	adds	r2, r3, #1
 810f77c:	2030      	movs	r0, #48	@ 0x30
 810f77e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810f782:	4422      	add	r2, r4
 810f784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810f788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810f78c:	3302      	adds	r3, #2
 810f78e:	e7c7      	b.n	810f720 <_printf_common+0x58>
 810f790:	2301      	movs	r3, #1
 810f792:	4622      	mov	r2, r4
 810f794:	4641      	mov	r1, r8
 810f796:	4638      	mov	r0, r7
 810f798:	47c8      	blx	r9
 810f79a:	3001      	adds	r0, #1
 810f79c:	d0e6      	beq.n	810f76c <_printf_common+0xa4>
 810f79e:	3601      	adds	r6, #1
 810f7a0:	e7d9      	b.n	810f756 <_printf_common+0x8e>
	...

0810f7a4 <_printf_i>:
 810f7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f7a8:	7e0f      	ldrb	r7, [r1, #24]
 810f7aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810f7ac:	2f78      	cmp	r7, #120	@ 0x78
 810f7ae:	4691      	mov	r9, r2
 810f7b0:	4680      	mov	r8, r0
 810f7b2:	460c      	mov	r4, r1
 810f7b4:	469a      	mov	sl, r3
 810f7b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810f7ba:	d807      	bhi.n	810f7cc <_printf_i+0x28>
 810f7bc:	2f62      	cmp	r7, #98	@ 0x62
 810f7be:	d80a      	bhi.n	810f7d6 <_printf_i+0x32>
 810f7c0:	2f00      	cmp	r7, #0
 810f7c2:	f000 80d2 	beq.w	810f96a <_printf_i+0x1c6>
 810f7c6:	2f58      	cmp	r7, #88	@ 0x58
 810f7c8:	f000 80b9 	beq.w	810f93e <_printf_i+0x19a>
 810f7cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f7d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810f7d4:	e03a      	b.n	810f84c <_printf_i+0xa8>
 810f7d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810f7da:	2b15      	cmp	r3, #21
 810f7dc:	d8f6      	bhi.n	810f7cc <_printf_i+0x28>
 810f7de:	a101      	add	r1, pc, #4	@ (adr r1, 810f7e4 <_printf_i+0x40>)
 810f7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810f7e4:	0810f83d 	.word	0x0810f83d
 810f7e8:	0810f851 	.word	0x0810f851
 810f7ec:	0810f7cd 	.word	0x0810f7cd
 810f7f0:	0810f7cd 	.word	0x0810f7cd
 810f7f4:	0810f7cd 	.word	0x0810f7cd
 810f7f8:	0810f7cd 	.word	0x0810f7cd
 810f7fc:	0810f851 	.word	0x0810f851
 810f800:	0810f7cd 	.word	0x0810f7cd
 810f804:	0810f7cd 	.word	0x0810f7cd
 810f808:	0810f7cd 	.word	0x0810f7cd
 810f80c:	0810f7cd 	.word	0x0810f7cd
 810f810:	0810f951 	.word	0x0810f951
 810f814:	0810f87b 	.word	0x0810f87b
 810f818:	0810f90b 	.word	0x0810f90b
 810f81c:	0810f7cd 	.word	0x0810f7cd
 810f820:	0810f7cd 	.word	0x0810f7cd
 810f824:	0810f973 	.word	0x0810f973
 810f828:	0810f7cd 	.word	0x0810f7cd
 810f82c:	0810f87b 	.word	0x0810f87b
 810f830:	0810f7cd 	.word	0x0810f7cd
 810f834:	0810f7cd 	.word	0x0810f7cd
 810f838:	0810f913 	.word	0x0810f913
 810f83c:	6833      	ldr	r3, [r6, #0]
 810f83e:	1d1a      	adds	r2, r3, #4
 810f840:	681b      	ldr	r3, [r3, #0]
 810f842:	6032      	str	r2, [r6, #0]
 810f844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810f84c:	2301      	movs	r3, #1
 810f84e:	e09d      	b.n	810f98c <_printf_i+0x1e8>
 810f850:	6833      	ldr	r3, [r6, #0]
 810f852:	6820      	ldr	r0, [r4, #0]
 810f854:	1d19      	adds	r1, r3, #4
 810f856:	6031      	str	r1, [r6, #0]
 810f858:	0606      	lsls	r6, r0, #24
 810f85a:	d501      	bpl.n	810f860 <_printf_i+0xbc>
 810f85c:	681d      	ldr	r5, [r3, #0]
 810f85e:	e003      	b.n	810f868 <_printf_i+0xc4>
 810f860:	0645      	lsls	r5, r0, #25
 810f862:	d5fb      	bpl.n	810f85c <_printf_i+0xb8>
 810f864:	f9b3 5000 	ldrsh.w	r5, [r3]
 810f868:	2d00      	cmp	r5, #0
 810f86a:	da03      	bge.n	810f874 <_printf_i+0xd0>
 810f86c:	232d      	movs	r3, #45	@ 0x2d
 810f86e:	426d      	negs	r5, r5
 810f870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f874:	4859      	ldr	r0, [pc, #356]	@ (810f9dc <_printf_i+0x238>)
 810f876:	230a      	movs	r3, #10
 810f878:	e011      	b.n	810f89e <_printf_i+0xfa>
 810f87a:	6821      	ldr	r1, [r4, #0]
 810f87c:	6833      	ldr	r3, [r6, #0]
 810f87e:	0608      	lsls	r0, r1, #24
 810f880:	f853 5b04 	ldr.w	r5, [r3], #4
 810f884:	d402      	bmi.n	810f88c <_printf_i+0xe8>
 810f886:	0649      	lsls	r1, r1, #25
 810f888:	bf48      	it	mi
 810f88a:	b2ad      	uxthmi	r5, r5
 810f88c:	2f6f      	cmp	r7, #111	@ 0x6f
 810f88e:	4853      	ldr	r0, [pc, #332]	@ (810f9dc <_printf_i+0x238>)
 810f890:	6033      	str	r3, [r6, #0]
 810f892:	bf14      	ite	ne
 810f894:	230a      	movne	r3, #10
 810f896:	2308      	moveq	r3, #8
 810f898:	2100      	movs	r1, #0
 810f89a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810f89e:	6866      	ldr	r6, [r4, #4]
 810f8a0:	60a6      	str	r6, [r4, #8]
 810f8a2:	2e00      	cmp	r6, #0
 810f8a4:	bfa2      	ittt	ge
 810f8a6:	6821      	ldrge	r1, [r4, #0]
 810f8a8:	f021 0104 	bicge.w	r1, r1, #4
 810f8ac:	6021      	strge	r1, [r4, #0]
 810f8ae:	b90d      	cbnz	r5, 810f8b4 <_printf_i+0x110>
 810f8b0:	2e00      	cmp	r6, #0
 810f8b2:	d04b      	beq.n	810f94c <_printf_i+0x1a8>
 810f8b4:	4616      	mov	r6, r2
 810f8b6:	fbb5 f1f3 	udiv	r1, r5, r3
 810f8ba:	fb03 5711 	mls	r7, r3, r1, r5
 810f8be:	5dc7      	ldrb	r7, [r0, r7]
 810f8c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810f8c4:	462f      	mov	r7, r5
 810f8c6:	42bb      	cmp	r3, r7
 810f8c8:	460d      	mov	r5, r1
 810f8ca:	d9f4      	bls.n	810f8b6 <_printf_i+0x112>
 810f8cc:	2b08      	cmp	r3, #8
 810f8ce:	d10b      	bne.n	810f8e8 <_printf_i+0x144>
 810f8d0:	6823      	ldr	r3, [r4, #0]
 810f8d2:	07df      	lsls	r7, r3, #31
 810f8d4:	d508      	bpl.n	810f8e8 <_printf_i+0x144>
 810f8d6:	6923      	ldr	r3, [r4, #16]
 810f8d8:	6861      	ldr	r1, [r4, #4]
 810f8da:	4299      	cmp	r1, r3
 810f8dc:	bfde      	ittt	le
 810f8de:	2330      	movle	r3, #48	@ 0x30
 810f8e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 810f8e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 810f8e8:	1b92      	subs	r2, r2, r6
 810f8ea:	6122      	str	r2, [r4, #16]
 810f8ec:	f8cd a000 	str.w	sl, [sp]
 810f8f0:	464b      	mov	r3, r9
 810f8f2:	aa03      	add	r2, sp, #12
 810f8f4:	4621      	mov	r1, r4
 810f8f6:	4640      	mov	r0, r8
 810f8f8:	f7ff fee6 	bl	810f6c8 <_printf_common>
 810f8fc:	3001      	adds	r0, #1
 810f8fe:	d14a      	bne.n	810f996 <_printf_i+0x1f2>
 810f900:	f04f 30ff 	mov.w	r0, #4294967295
 810f904:	b004      	add	sp, #16
 810f906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f90a:	6823      	ldr	r3, [r4, #0]
 810f90c:	f043 0320 	orr.w	r3, r3, #32
 810f910:	6023      	str	r3, [r4, #0]
 810f912:	4833      	ldr	r0, [pc, #204]	@ (810f9e0 <_printf_i+0x23c>)
 810f914:	2778      	movs	r7, #120	@ 0x78
 810f916:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810f91a:	6823      	ldr	r3, [r4, #0]
 810f91c:	6831      	ldr	r1, [r6, #0]
 810f91e:	061f      	lsls	r7, r3, #24
 810f920:	f851 5b04 	ldr.w	r5, [r1], #4
 810f924:	d402      	bmi.n	810f92c <_printf_i+0x188>
 810f926:	065f      	lsls	r7, r3, #25
 810f928:	bf48      	it	mi
 810f92a:	b2ad      	uxthmi	r5, r5
 810f92c:	6031      	str	r1, [r6, #0]
 810f92e:	07d9      	lsls	r1, r3, #31
 810f930:	bf44      	itt	mi
 810f932:	f043 0320 	orrmi.w	r3, r3, #32
 810f936:	6023      	strmi	r3, [r4, #0]
 810f938:	b11d      	cbz	r5, 810f942 <_printf_i+0x19e>
 810f93a:	2310      	movs	r3, #16
 810f93c:	e7ac      	b.n	810f898 <_printf_i+0xf4>
 810f93e:	4827      	ldr	r0, [pc, #156]	@ (810f9dc <_printf_i+0x238>)
 810f940:	e7e9      	b.n	810f916 <_printf_i+0x172>
 810f942:	6823      	ldr	r3, [r4, #0]
 810f944:	f023 0320 	bic.w	r3, r3, #32
 810f948:	6023      	str	r3, [r4, #0]
 810f94a:	e7f6      	b.n	810f93a <_printf_i+0x196>
 810f94c:	4616      	mov	r6, r2
 810f94e:	e7bd      	b.n	810f8cc <_printf_i+0x128>
 810f950:	6833      	ldr	r3, [r6, #0]
 810f952:	6825      	ldr	r5, [r4, #0]
 810f954:	6961      	ldr	r1, [r4, #20]
 810f956:	1d18      	adds	r0, r3, #4
 810f958:	6030      	str	r0, [r6, #0]
 810f95a:	062e      	lsls	r6, r5, #24
 810f95c:	681b      	ldr	r3, [r3, #0]
 810f95e:	d501      	bpl.n	810f964 <_printf_i+0x1c0>
 810f960:	6019      	str	r1, [r3, #0]
 810f962:	e002      	b.n	810f96a <_printf_i+0x1c6>
 810f964:	0668      	lsls	r0, r5, #25
 810f966:	d5fb      	bpl.n	810f960 <_printf_i+0x1bc>
 810f968:	8019      	strh	r1, [r3, #0]
 810f96a:	2300      	movs	r3, #0
 810f96c:	6123      	str	r3, [r4, #16]
 810f96e:	4616      	mov	r6, r2
 810f970:	e7bc      	b.n	810f8ec <_printf_i+0x148>
 810f972:	6833      	ldr	r3, [r6, #0]
 810f974:	1d1a      	adds	r2, r3, #4
 810f976:	6032      	str	r2, [r6, #0]
 810f978:	681e      	ldr	r6, [r3, #0]
 810f97a:	6862      	ldr	r2, [r4, #4]
 810f97c:	2100      	movs	r1, #0
 810f97e:	4630      	mov	r0, r6
 810f980:	f7f0 fcae 	bl	81002e0 <memchr>
 810f984:	b108      	cbz	r0, 810f98a <_printf_i+0x1e6>
 810f986:	1b80      	subs	r0, r0, r6
 810f988:	6060      	str	r0, [r4, #4]
 810f98a:	6863      	ldr	r3, [r4, #4]
 810f98c:	6123      	str	r3, [r4, #16]
 810f98e:	2300      	movs	r3, #0
 810f990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f994:	e7aa      	b.n	810f8ec <_printf_i+0x148>
 810f996:	6923      	ldr	r3, [r4, #16]
 810f998:	4632      	mov	r2, r6
 810f99a:	4649      	mov	r1, r9
 810f99c:	4640      	mov	r0, r8
 810f99e:	47d0      	blx	sl
 810f9a0:	3001      	adds	r0, #1
 810f9a2:	d0ad      	beq.n	810f900 <_printf_i+0x15c>
 810f9a4:	6823      	ldr	r3, [r4, #0]
 810f9a6:	079b      	lsls	r3, r3, #30
 810f9a8:	d413      	bmi.n	810f9d2 <_printf_i+0x22e>
 810f9aa:	68e0      	ldr	r0, [r4, #12]
 810f9ac:	9b03      	ldr	r3, [sp, #12]
 810f9ae:	4298      	cmp	r0, r3
 810f9b0:	bfb8      	it	lt
 810f9b2:	4618      	movlt	r0, r3
 810f9b4:	e7a6      	b.n	810f904 <_printf_i+0x160>
 810f9b6:	2301      	movs	r3, #1
 810f9b8:	4632      	mov	r2, r6
 810f9ba:	4649      	mov	r1, r9
 810f9bc:	4640      	mov	r0, r8
 810f9be:	47d0      	blx	sl
 810f9c0:	3001      	adds	r0, #1
 810f9c2:	d09d      	beq.n	810f900 <_printf_i+0x15c>
 810f9c4:	3501      	adds	r5, #1
 810f9c6:	68e3      	ldr	r3, [r4, #12]
 810f9c8:	9903      	ldr	r1, [sp, #12]
 810f9ca:	1a5b      	subs	r3, r3, r1
 810f9cc:	42ab      	cmp	r3, r5
 810f9ce:	dcf2      	bgt.n	810f9b6 <_printf_i+0x212>
 810f9d0:	e7eb      	b.n	810f9aa <_printf_i+0x206>
 810f9d2:	2500      	movs	r5, #0
 810f9d4:	f104 0619 	add.w	r6, r4, #25
 810f9d8:	e7f5      	b.n	810f9c6 <_printf_i+0x222>
 810f9da:	bf00      	nop
 810f9dc:	08113a31 	.word	0x08113a31
 810f9e0:	08113a42 	.word	0x08113a42

0810f9e4 <_scanf_float>:
 810f9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f9e8:	b087      	sub	sp, #28
 810f9ea:	4617      	mov	r7, r2
 810f9ec:	9303      	str	r3, [sp, #12]
 810f9ee:	688b      	ldr	r3, [r1, #8]
 810f9f0:	1e5a      	subs	r2, r3, #1
 810f9f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810f9f6:	bf81      	itttt	hi
 810f9f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810f9fc:	eb03 0b05 	addhi.w	fp, r3, r5
 810fa00:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810fa04:	608b      	strhi	r3, [r1, #8]
 810fa06:	680b      	ldr	r3, [r1, #0]
 810fa08:	460a      	mov	r2, r1
 810fa0a:	f04f 0500 	mov.w	r5, #0
 810fa0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810fa12:	f842 3b1c 	str.w	r3, [r2], #28
 810fa16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810fa1a:	4680      	mov	r8, r0
 810fa1c:	460c      	mov	r4, r1
 810fa1e:	bf98      	it	ls
 810fa20:	f04f 0b00 	movls.w	fp, #0
 810fa24:	9201      	str	r2, [sp, #4]
 810fa26:	4616      	mov	r6, r2
 810fa28:	46aa      	mov	sl, r5
 810fa2a:	46a9      	mov	r9, r5
 810fa2c:	9502      	str	r5, [sp, #8]
 810fa2e:	68a2      	ldr	r2, [r4, #8]
 810fa30:	b152      	cbz	r2, 810fa48 <_scanf_float+0x64>
 810fa32:	683b      	ldr	r3, [r7, #0]
 810fa34:	781b      	ldrb	r3, [r3, #0]
 810fa36:	2b4e      	cmp	r3, #78	@ 0x4e
 810fa38:	d864      	bhi.n	810fb04 <_scanf_float+0x120>
 810fa3a:	2b40      	cmp	r3, #64	@ 0x40
 810fa3c:	d83c      	bhi.n	810fab8 <_scanf_float+0xd4>
 810fa3e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810fa42:	b2c8      	uxtb	r0, r1
 810fa44:	280e      	cmp	r0, #14
 810fa46:	d93a      	bls.n	810fabe <_scanf_float+0xda>
 810fa48:	f1b9 0f00 	cmp.w	r9, #0
 810fa4c:	d003      	beq.n	810fa56 <_scanf_float+0x72>
 810fa4e:	6823      	ldr	r3, [r4, #0]
 810fa50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810fa54:	6023      	str	r3, [r4, #0]
 810fa56:	f10a 3aff 	add.w	sl, sl, #4294967295
 810fa5a:	f1ba 0f01 	cmp.w	sl, #1
 810fa5e:	f200 8117 	bhi.w	810fc90 <_scanf_float+0x2ac>
 810fa62:	9b01      	ldr	r3, [sp, #4]
 810fa64:	429e      	cmp	r6, r3
 810fa66:	f200 8108 	bhi.w	810fc7a <_scanf_float+0x296>
 810fa6a:	2001      	movs	r0, #1
 810fa6c:	b007      	add	sp, #28
 810fa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fa72:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810fa76:	2a0d      	cmp	r2, #13
 810fa78:	d8e6      	bhi.n	810fa48 <_scanf_float+0x64>
 810fa7a:	a101      	add	r1, pc, #4	@ (adr r1, 810fa80 <_scanf_float+0x9c>)
 810fa7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810fa80:	0810fbc7 	.word	0x0810fbc7
 810fa84:	0810fa49 	.word	0x0810fa49
 810fa88:	0810fa49 	.word	0x0810fa49
 810fa8c:	0810fa49 	.word	0x0810fa49
 810fa90:	0810fc27 	.word	0x0810fc27
 810fa94:	0810fbff 	.word	0x0810fbff
 810fa98:	0810fa49 	.word	0x0810fa49
 810fa9c:	0810fa49 	.word	0x0810fa49
 810faa0:	0810fbd5 	.word	0x0810fbd5
 810faa4:	0810fa49 	.word	0x0810fa49
 810faa8:	0810fa49 	.word	0x0810fa49
 810faac:	0810fa49 	.word	0x0810fa49
 810fab0:	0810fa49 	.word	0x0810fa49
 810fab4:	0810fb8d 	.word	0x0810fb8d
 810fab8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810fabc:	e7db      	b.n	810fa76 <_scanf_float+0x92>
 810fabe:	290e      	cmp	r1, #14
 810fac0:	d8c2      	bhi.n	810fa48 <_scanf_float+0x64>
 810fac2:	a001      	add	r0, pc, #4	@ (adr r0, 810fac8 <_scanf_float+0xe4>)
 810fac4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810fac8:	0810fb7d 	.word	0x0810fb7d
 810facc:	0810fa49 	.word	0x0810fa49
 810fad0:	0810fb7d 	.word	0x0810fb7d
 810fad4:	0810fc13 	.word	0x0810fc13
 810fad8:	0810fa49 	.word	0x0810fa49
 810fadc:	0810fb25 	.word	0x0810fb25
 810fae0:	0810fb63 	.word	0x0810fb63
 810fae4:	0810fb63 	.word	0x0810fb63
 810fae8:	0810fb63 	.word	0x0810fb63
 810faec:	0810fb63 	.word	0x0810fb63
 810faf0:	0810fb63 	.word	0x0810fb63
 810faf4:	0810fb63 	.word	0x0810fb63
 810faf8:	0810fb63 	.word	0x0810fb63
 810fafc:	0810fb63 	.word	0x0810fb63
 810fb00:	0810fb63 	.word	0x0810fb63
 810fb04:	2b6e      	cmp	r3, #110	@ 0x6e
 810fb06:	d809      	bhi.n	810fb1c <_scanf_float+0x138>
 810fb08:	2b60      	cmp	r3, #96	@ 0x60
 810fb0a:	d8b2      	bhi.n	810fa72 <_scanf_float+0x8e>
 810fb0c:	2b54      	cmp	r3, #84	@ 0x54
 810fb0e:	d07b      	beq.n	810fc08 <_scanf_float+0x224>
 810fb10:	2b59      	cmp	r3, #89	@ 0x59
 810fb12:	d199      	bne.n	810fa48 <_scanf_float+0x64>
 810fb14:	2d07      	cmp	r5, #7
 810fb16:	d197      	bne.n	810fa48 <_scanf_float+0x64>
 810fb18:	2508      	movs	r5, #8
 810fb1a:	e02c      	b.n	810fb76 <_scanf_float+0x192>
 810fb1c:	2b74      	cmp	r3, #116	@ 0x74
 810fb1e:	d073      	beq.n	810fc08 <_scanf_float+0x224>
 810fb20:	2b79      	cmp	r3, #121	@ 0x79
 810fb22:	e7f6      	b.n	810fb12 <_scanf_float+0x12e>
 810fb24:	6821      	ldr	r1, [r4, #0]
 810fb26:	05c8      	lsls	r0, r1, #23
 810fb28:	d51b      	bpl.n	810fb62 <_scanf_float+0x17e>
 810fb2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810fb2e:	6021      	str	r1, [r4, #0]
 810fb30:	f109 0901 	add.w	r9, r9, #1
 810fb34:	f1bb 0f00 	cmp.w	fp, #0
 810fb38:	d003      	beq.n	810fb42 <_scanf_float+0x15e>
 810fb3a:	3201      	adds	r2, #1
 810fb3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 810fb40:	60a2      	str	r2, [r4, #8]
 810fb42:	68a3      	ldr	r3, [r4, #8]
 810fb44:	3b01      	subs	r3, #1
 810fb46:	60a3      	str	r3, [r4, #8]
 810fb48:	6923      	ldr	r3, [r4, #16]
 810fb4a:	3301      	adds	r3, #1
 810fb4c:	6123      	str	r3, [r4, #16]
 810fb4e:	687b      	ldr	r3, [r7, #4]
 810fb50:	3b01      	subs	r3, #1
 810fb52:	2b00      	cmp	r3, #0
 810fb54:	607b      	str	r3, [r7, #4]
 810fb56:	f340 8087 	ble.w	810fc68 <_scanf_float+0x284>
 810fb5a:	683b      	ldr	r3, [r7, #0]
 810fb5c:	3301      	adds	r3, #1
 810fb5e:	603b      	str	r3, [r7, #0]
 810fb60:	e765      	b.n	810fa2e <_scanf_float+0x4a>
 810fb62:	eb1a 0105 	adds.w	r1, sl, r5
 810fb66:	f47f af6f 	bne.w	810fa48 <_scanf_float+0x64>
 810fb6a:	6822      	ldr	r2, [r4, #0]
 810fb6c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810fb70:	6022      	str	r2, [r4, #0]
 810fb72:	460d      	mov	r5, r1
 810fb74:	468a      	mov	sl, r1
 810fb76:	f806 3b01 	strb.w	r3, [r6], #1
 810fb7a:	e7e2      	b.n	810fb42 <_scanf_float+0x15e>
 810fb7c:	6822      	ldr	r2, [r4, #0]
 810fb7e:	0610      	lsls	r0, r2, #24
 810fb80:	f57f af62 	bpl.w	810fa48 <_scanf_float+0x64>
 810fb84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810fb88:	6022      	str	r2, [r4, #0]
 810fb8a:	e7f4      	b.n	810fb76 <_scanf_float+0x192>
 810fb8c:	f1ba 0f00 	cmp.w	sl, #0
 810fb90:	d10e      	bne.n	810fbb0 <_scanf_float+0x1cc>
 810fb92:	f1b9 0f00 	cmp.w	r9, #0
 810fb96:	d10e      	bne.n	810fbb6 <_scanf_float+0x1d2>
 810fb98:	6822      	ldr	r2, [r4, #0]
 810fb9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810fb9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810fba2:	d108      	bne.n	810fbb6 <_scanf_float+0x1d2>
 810fba4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fba8:	6022      	str	r2, [r4, #0]
 810fbaa:	f04f 0a01 	mov.w	sl, #1
 810fbae:	e7e2      	b.n	810fb76 <_scanf_float+0x192>
 810fbb0:	f1ba 0f02 	cmp.w	sl, #2
 810fbb4:	d055      	beq.n	810fc62 <_scanf_float+0x27e>
 810fbb6:	2d01      	cmp	r5, #1
 810fbb8:	d002      	beq.n	810fbc0 <_scanf_float+0x1dc>
 810fbba:	2d04      	cmp	r5, #4
 810fbbc:	f47f af44 	bne.w	810fa48 <_scanf_float+0x64>
 810fbc0:	3501      	adds	r5, #1
 810fbc2:	b2ed      	uxtb	r5, r5
 810fbc4:	e7d7      	b.n	810fb76 <_scanf_float+0x192>
 810fbc6:	f1ba 0f01 	cmp.w	sl, #1
 810fbca:	f47f af3d 	bne.w	810fa48 <_scanf_float+0x64>
 810fbce:	f04f 0a02 	mov.w	sl, #2
 810fbd2:	e7d0      	b.n	810fb76 <_scanf_float+0x192>
 810fbd4:	b97d      	cbnz	r5, 810fbf6 <_scanf_float+0x212>
 810fbd6:	f1b9 0f00 	cmp.w	r9, #0
 810fbda:	f47f af38 	bne.w	810fa4e <_scanf_float+0x6a>
 810fbde:	6822      	ldr	r2, [r4, #0]
 810fbe0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810fbe4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810fbe8:	f040 8108 	bne.w	810fdfc <_scanf_float+0x418>
 810fbec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fbf0:	6022      	str	r2, [r4, #0]
 810fbf2:	2501      	movs	r5, #1
 810fbf4:	e7bf      	b.n	810fb76 <_scanf_float+0x192>
 810fbf6:	2d03      	cmp	r5, #3
 810fbf8:	d0e2      	beq.n	810fbc0 <_scanf_float+0x1dc>
 810fbfa:	2d05      	cmp	r5, #5
 810fbfc:	e7de      	b.n	810fbbc <_scanf_float+0x1d8>
 810fbfe:	2d02      	cmp	r5, #2
 810fc00:	f47f af22 	bne.w	810fa48 <_scanf_float+0x64>
 810fc04:	2503      	movs	r5, #3
 810fc06:	e7b6      	b.n	810fb76 <_scanf_float+0x192>
 810fc08:	2d06      	cmp	r5, #6
 810fc0a:	f47f af1d 	bne.w	810fa48 <_scanf_float+0x64>
 810fc0e:	2507      	movs	r5, #7
 810fc10:	e7b1      	b.n	810fb76 <_scanf_float+0x192>
 810fc12:	6822      	ldr	r2, [r4, #0]
 810fc14:	0591      	lsls	r1, r2, #22
 810fc16:	f57f af17 	bpl.w	810fa48 <_scanf_float+0x64>
 810fc1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810fc1e:	6022      	str	r2, [r4, #0]
 810fc20:	f8cd 9008 	str.w	r9, [sp, #8]
 810fc24:	e7a7      	b.n	810fb76 <_scanf_float+0x192>
 810fc26:	6822      	ldr	r2, [r4, #0]
 810fc28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810fc2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810fc30:	d006      	beq.n	810fc40 <_scanf_float+0x25c>
 810fc32:	0550      	lsls	r0, r2, #21
 810fc34:	f57f af08 	bpl.w	810fa48 <_scanf_float+0x64>
 810fc38:	f1b9 0f00 	cmp.w	r9, #0
 810fc3c:	f000 80de 	beq.w	810fdfc <_scanf_float+0x418>
 810fc40:	0591      	lsls	r1, r2, #22
 810fc42:	bf58      	it	pl
 810fc44:	9902      	ldrpl	r1, [sp, #8]
 810fc46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fc4a:	bf58      	it	pl
 810fc4c:	eba9 0101 	subpl.w	r1, r9, r1
 810fc50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810fc54:	bf58      	it	pl
 810fc56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810fc5a:	6022      	str	r2, [r4, #0]
 810fc5c:	f04f 0900 	mov.w	r9, #0
 810fc60:	e789      	b.n	810fb76 <_scanf_float+0x192>
 810fc62:	f04f 0a03 	mov.w	sl, #3
 810fc66:	e786      	b.n	810fb76 <_scanf_float+0x192>
 810fc68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810fc6c:	4639      	mov	r1, r7
 810fc6e:	4640      	mov	r0, r8
 810fc70:	4798      	blx	r3
 810fc72:	2800      	cmp	r0, #0
 810fc74:	f43f aedb 	beq.w	810fa2e <_scanf_float+0x4a>
 810fc78:	e6e6      	b.n	810fa48 <_scanf_float+0x64>
 810fc7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fc7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fc82:	463a      	mov	r2, r7
 810fc84:	4640      	mov	r0, r8
 810fc86:	4798      	blx	r3
 810fc88:	6923      	ldr	r3, [r4, #16]
 810fc8a:	3b01      	subs	r3, #1
 810fc8c:	6123      	str	r3, [r4, #16]
 810fc8e:	e6e8      	b.n	810fa62 <_scanf_float+0x7e>
 810fc90:	1e6b      	subs	r3, r5, #1
 810fc92:	2b06      	cmp	r3, #6
 810fc94:	d824      	bhi.n	810fce0 <_scanf_float+0x2fc>
 810fc96:	2d02      	cmp	r5, #2
 810fc98:	d836      	bhi.n	810fd08 <_scanf_float+0x324>
 810fc9a:	9b01      	ldr	r3, [sp, #4]
 810fc9c:	429e      	cmp	r6, r3
 810fc9e:	f67f aee4 	bls.w	810fa6a <_scanf_float+0x86>
 810fca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fca6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fcaa:	463a      	mov	r2, r7
 810fcac:	4640      	mov	r0, r8
 810fcae:	4798      	blx	r3
 810fcb0:	6923      	ldr	r3, [r4, #16]
 810fcb2:	3b01      	subs	r3, #1
 810fcb4:	6123      	str	r3, [r4, #16]
 810fcb6:	e7f0      	b.n	810fc9a <_scanf_float+0x2b6>
 810fcb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fcbc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810fcc0:	463a      	mov	r2, r7
 810fcc2:	4640      	mov	r0, r8
 810fcc4:	4798      	blx	r3
 810fcc6:	6923      	ldr	r3, [r4, #16]
 810fcc8:	3b01      	subs	r3, #1
 810fcca:	6123      	str	r3, [r4, #16]
 810fccc:	f10a 3aff 	add.w	sl, sl, #4294967295
 810fcd0:	fa5f fa8a 	uxtb.w	sl, sl
 810fcd4:	f1ba 0f02 	cmp.w	sl, #2
 810fcd8:	d1ee      	bne.n	810fcb8 <_scanf_float+0x2d4>
 810fcda:	3d03      	subs	r5, #3
 810fcdc:	b2ed      	uxtb	r5, r5
 810fcde:	1b76      	subs	r6, r6, r5
 810fce0:	6823      	ldr	r3, [r4, #0]
 810fce2:	05da      	lsls	r2, r3, #23
 810fce4:	d530      	bpl.n	810fd48 <_scanf_float+0x364>
 810fce6:	055b      	lsls	r3, r3, #21
 810fce8:	d511      	bpl.n	810fd0e <_scanf_float+0x32a>
 810fcea:	9b01      	ldr	r3, [sp, #4]
 810fcec:	429e      	cmp	r6, r3
 810fcee:	f67f aebc 	bls.w	810fa6a <_scanf_float+0x86>
 810fcf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fcf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fcfa:	463a      	mov	r2, r7
 810fcfc:	4640      	mov	r0, r8
 810fcfe:	4798      	blx	r3
 810fd00:	6923      	ldr	r3, [r4, #16]
 810fd02:	3b01      	subs	r3, #1
 810fd04:	6123      	str	r3, [r4, #16]
 810fd06:	e7f0      	b.n	810fcea <_scanf_float+0x306>
 810fd08:	46aa      	mov	sl, r5
 810fd0a:	46b3      	mov	fp, r6
 810fd0c:	e7de      	b.n	810fccc <_scanf_float+0x2e8>
 810fd0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810fd12:	6923      	ldr	r3, [r4, #16]
 810fd14:	2965      	cmp	r1, #101	@ 0x65
 810fd16:	f103 33ff 	add.w	r3, r3, #4294967295
 810fd1a:	f106 35ff 	add.w	r5, r6, #4294967295
 810fd1e:	6123      	str	r3, [r4, #16]
 810fd20:	d00c      	beq.n	810fd3c <_scanf_float+0x358>
 810fd22:	2945      	cmp	r1, #69	@ 0x45
 810fd24:	d00a      	beq.n	810fd3c <_scanf_float+0x358>
 810fd26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fd2a:	463a      	mov	r2, r7
 810fd2c:	4640      	mov	r0, r8
 810fd2e:	4798      	blx	r3
 810fd30:	6923      	ldr	r3, [r4, #16]
 810fd32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810fd36:	3b01      	subs	r3, #1
 810fd38:	1eb5      	subs	r5, r6, #2
 810fd3a:	6123      	str	r3, [r4, #16]
 810fd3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fd40:	463a      	mov	r2, r7
 810fd42:	4640      	mov	r0, r8
 810fd44:	4798      	blx	r3
 810fd46:	462e      	mov	r6, r5
 810fd48:	6822      	ldr	r2, [r4, #0]
 810fd4a:	f012 0210 	ands.w	r2, r2, #16
 810fd4e:	d001      	beq.n	810fd54 <_scanf_float+0x370>
 810fd50:	2000      	movs	r0, #0
 810fd52:	e68b      	b.n	810fa6c <_scanf_float+0x88>
 810fd54:	7032      	strb	r2, [r6, #0]
 810fd56:	6823      	ldr	r3, [r4, #0]
 810fd58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810fd5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810fd60:	d11c      	bne.n	810fd9c <_scanf_float+0x3b8>
 810fd62:	9b02      	ldr	r3, [sp, #8]
 810fd64:	454b      	cmp	r3, r9
 810fd66:	eba3 0209 	sub.w	r2, r3, r9
 810fd6a:	d123      	bne.n	810fdb4 <_scanf_float+0x3d0>
 810fd6c:	9901      	ldr	r1, [sp, #4]
 810fd6e:	2200      	movs	r2, #0
 810fd70:	4640      	mov	r0, r8
 810fd72:	f002 fd29 	bl	81127c8 <_strtod_r>
 810fd76:	9b03      	ldr	r3, [sp, #12]
 810fd78:	6821      	ldr	r1, [r4, #0]
 810fd7a:	681b      	ldr	r3, [r3, #0]
 810fd7c:	f011 0f02 	tst.w	r1, #2
 810fd80:	ec57 6b10 	vmov	r6, r7, d0
 810fd84:	f103 0204 	add.w	r2, r3, #4
 810fd88:	d01f      	beq.n	810fdca <_scanf_float+0x3e6>
 810fd8a:	9903      	ldr	r1, [sp, #12]
 810fd8c:	600a      	str	r2, [r1, #0]
 810fd8e:	681b      	ldr	r3, [r3, #0]
 810fd90:	e9c3 6700 	strd	r6, r7, [r3]
 810fd94:	68e3      	ldr	r3, [r4, #12]
 810fd96:	3301      	adds	r3, #1
 810fd98:	60e3      	str	r3, [r4, #12]
 810fd9a:	e7d9      	b.n	810fd50 <_scanf_float+0x36c>
 810fd9c:	9b04      	ldr	r3, [sp, #16]
 810fd9e:	2b00      	cmp	r3, #0
 810fda0:	d0e4      	beq.n	810fd6c <_scanf_float+0x388>
 810fda2:	9905      	ldr	r1, [sp, #20]
 810fda4:	230a      	movs	r3, #10
 810fda6:	3101      	adds	r1, #1
 810fda8:	4640      	mov	r0, r8
 810fdaa:	f002 fd8d 	bl	81128c8 <_strtol_r>
 810fdae:	9b04      	ldr	r3, [sp, #16]
 810fdb0:	9e05      	ldr	r6, [sp, #20]
 810fdb2:	1ac2      	subs	r2, r0, r3
 810fdb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810fdb8:	429e      	cmp	r6, r3
 810fdba:	bf28      	it	cs
 810fdbc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810fdc0:	4910      	ldr	r1, [pc, #64]	@ (810fe04 <_scanf_float+0x420>)
 810fdc2:	4630      	mov	r0, r6
 810fdc4:	f000 f954 	bl	8110070 <siprintf>
 810fdc8:	e7d0      	b.n	810fd6c <_scanf_float+0x388>
 810fdca:	f011 0f04 	tst.w	r1, #4
 810fdce:	9903      	ldr	r1, [sp, #12]
 810fdd0:	600a      	str	r2, [r1, #0]
 810fdd2:	d1dc      	bne.n	810fd8e <_scanf_float+0x3aa>
 810fdd4:	681d      	ldr	r5, [r3, #0]
 810fdd6:	4632      	mov	r2, r6
 810fdd8:	463b      	mov	r3, r7
 810fdda:	4630      	mov	r0, r6
 810fddc:	4639      	mov	r1, r7
 810fdde:	f7f0 ff2d 	bl	8100c3c <__aeabi_dcmpun>
 810fde2:	b128      	cbz	r0, 810fdf0 <_scanf_float+0x40c>
 810fde4:	4808      	ldr	r0, [pc, #32]	@ (810fe08 <_scanf_float+0x424>)
 810fde6:	f000 fac9 	bl	811037c <nanf>
 810fdea:	ed85 0a00 	vstr	s0, [r5]
 810fdee:	e7d1      	b.n	810fd94 <_scanf_float+0x3b0>
 810fdf0:	4630      	mov	r0, r6
 810fdf2:	4639      	mov	r1, r7
 810fdf4:	f7f0 ff80 	bl	8100cf8 <__aeabi_d2f>
 810fdf8:	6028      	str	r0, [r5, #0]
 810fdfa:	e7cb      	b.n	810fd94 <_scanf_float+0x3b0>
 810fdfc:	f04f 0900 	mov.w	r9, #0
 810fe00:	e629      	b.n	810fa56 <_scanf_float+0x72>
 810fe02:	bf00      	nop
 810fe04:	08113a53 	.word	0x08113a53
 810fe08:	08113a93 	.word	0x08113a93

0810fe0c <std>:
 810fe0c:	2300      	movs	r3, #0
 810fe0e:	b510      	push	{r4, lr}
 810fe10:	4604      	mov	r4, r0
 810fe12:	e9c0 3300 	strd	r3, r3, [r0]
 810fe16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810fe1a:	6083      	str	r3, [r0, #8]
 810fe1c:	8181      	strh	r1, [r0, #12]
 810fe1e:	6643      	str	r3, [r0, #100]	@ 0x64
 810fe20:	81c2      	strh	r2, [r0, #14]
 810fe22:	6183      	str	r3, [r0, #24]
 810fe24:	4619      	mov	r1, r3
 810fe26:	2208      	movs	r2, #8
 810fe28:	305c      	adds	r0, #92	@ 0x5c
 810fe2a:	f000 fa19 	bl	8110260 <memset>
 810fe2e:	4b0d      	ldr	r3, [pc, #52]	@ (810fe64 <std+0x58>)
 810fe30:	6263      	str	r3, [r4, #36]	@ 0x24
 810fe32:	4b0d      	ldr	r3, [pc, #52]	@ (810fe68 <std+0x5c>)
 810fe34:	62a3      	str	r3, [r4, #40]	@ 0x28
 810fe36:	4b0d      	ldr	r3, [pc, #52]	@ (810fe6c <std+0x60>)
 810fe38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810fe3a:	4b0d      	ldr	r3, [pc, #52]	@ (810fe70 <std+0x64>)
 810fe3c:	6323      	str	r3, [r4, #48]	@ 0x30
 810fe3e:	4b0d      	ldr	r3, [pc, #52]	@ (810fe74 <std+0x68>)
 810fe40:	6224      	str	r4, [r4, #32]
 810fe42:	429c      	cmp	r4, r3
 810fe44:	d006      	beq.n	810fe54 <std+0x48>
 810fe46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810fe4a:	4294      	cmp	r4, r2
 810fe4c:	d002      	beq.n	810fe54 <std+0x48>
 810fe4e:	33d0      	adds	r3, #208	@ 0xd0
 810fe50:	429c      	cmp	r4, r3
 810fe52:	d105      	bne.n	810fe60 <std+0x54>
 810fe54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810fe58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810fe5c:	f000 ba7c 	b.w	8110358 <__retarget_lock_init_recursive>
 810fe60:	bd10      	pop	{r4, pc}
 810fe62:	bf00      	nop
 810fe64:	081100b1 	.word	0x081100b1
 810fe68:	081100d3 	.word	0x081100d3
 810fe6c:	0811010b 	.word	0x0811010b
 810fe70:	0811012f 	.word	0x0811012f
 810fe74:	10008b18 	.word	0x10008b18

0810fe78 <stdio_exit_handler>:
 810fe78:	4a02      	ldr	r2, [pc, #8]	@ (810fe84 <stdio_exit_handler+0xc>)
 810fe7a:	4903      	ldr	r1, [pc, #12]	@ (810fe88 <stdio_exit_handler+0x10>)
 810fe7c:	4803      	ldr	r0, [pc, #12]	@ (810fe8c <stdio_exit_handler+0x14>)
 810fe7e:	f000 b869 	b.w	810ff54 <_fwalk_sglue>
 810fe82:	bf00      	nop
 810fe84:	100000a4 	.word	0x100000a4
 810fe88:	08112f09 	.word	0x08112f09
 810fe8c:	100000b4 	.word	0x100000b4

0810fe90 <cleanup_stdio>:
 810fe90:	6841      	ldr	r1, [r0, #4]
 810fe92:	4b0c      	ldr	r3, [pc, #48]	@ (810fec4 <cleanup_stdio+0x34>)
 810fe94:	4299      	cmp	r1, r3
 810fe96:	b510      	push	{r4, lr}
 810fe98:	4604      	mov	r4, r0
 810fe9a:	d001      	beq.n	810fea0 <cleanup_stdio+0x10>
 810fe9c:	f003 f834 	bl	8112f08 <_fflush_r>
 810fea0:	68a1      	ldr	r1, [r4, #8]
 810fea2:	4b09      	ldr	r3, [pc, #36]	@ (810fec8 <cleanup_stdio+0x38>)
 810fea4:	4299      	cmp	r1, r3
 810fea6:	d002      	beq.n	810feae <cleanup_stdio+0x1e>
 810fea8:	4620      	mov	r0, r4
 810feaa:	f003 f82d 	bl	8112f08 <_fflush_r>
 810feae:	68e1      	ldr	r1, [r4, #12]
 810feb0:	4b06      	ldr	r3, [pc, #24]	@ (810fecc <cleanup_stdio+0x3c>)
 810feb2:	4299      	cmp	r1, r3
 810feb4:	d004      	beq.n	810fec0 <cleanup_stdio+0x30>
 810feb6:	4620      	mov	r0, r4
 810feb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810febc:	f003 b824 	b.w	8112f08 <_fflush_r>
 810fec0:	bd10      	pop	{r4, pc}
 810fec2:	bf00      	nop
 810fec4:	10008b18 	.word	0x10008b18
 810fec8:	10008b80 	.word	0x10008b80
 810fecc:	10008be8 	.word	0x10008be8

0810fed0 <global_stdio_init.part.0>:
 810fed0:	b510      	push	{r4, lr}
 810fed2:	4b0b      	ldr	r3, [pc, #44]	@ (810ff00 <global_stdio_init.part.0+0x30>)
 810fed4:	4c0b      	ldr	r4, [pc, #44]	@ (810ff04 <global_stdio_init.part.0+0x34>)
 810fed6:	4a0c      	ldr	r2, [pc, #48]	@ (810ff08 <global_stdio_init.part.0+0x38>)
 810fed8:	601a      	str	r2, [r3, #0]
 810feda:	4620      	mov	r0, r4
 810fedc:	2200      	movs	r2, #0
 810fede:	2104      	movs	r1, #4
 810fee0:	f7ff ff94 	bl	810fe0c <std>
 810fee4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810fee8:	2201      	movs	r2, #1
 810feea:	2109      	movs	r1, #9
 810feec:	f7ff ff8e 	bl	810fe0c <std>
 810fef0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810fef4:	2202      	movs	r2, #2
 810fef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810fefa:	2112      	movs	r1, #18
 810fefc:	f7ff bf86 	b.w	810fe0c <std>
 810ff00:	10008c50 	.word	0x10008c50
 810ff04:	10008b18 	.word	0x10008b18
 810ff08:	0810fe79 	.word	0x0810fe79

0810ff0c <__sfp_lock_acquire>:
 810ff0c:	4801      	ldr	r0, [pc, #4]	@ (810ff14 <__sfp_lock_acquire+0x8>)
 810ff0e:	f000 ba24 	b.w	811035a <__retarget_lock_acquire_recursive>
 810ff12:	bf00      	nop
 810ff14:	10008c59 	.word	0x10008c59

0810ff18 <__sfp_lock_release>:
 810ff18:	4801      	ldr	r0, [pc, #4]	@ (810ff20 <__sfp_lock_release+0x8>)
 810ff1a:	f000 ba1f 	b.w	811035c <__retarget_lock_release_recursive>
 810ff1e:	bf00      	nop
 810ff20:	10008c59 	.word	0x10008c59

0810ff24 <__sinit>:
 810ff24:	b510      	push	{r4, lr}
 810ff26:	4604      	mov	r4, r0
 810ff28:	f7ff fff0 	bl	810ff0c <__sfp_lock_acquire>
 810ff2c:	6a23      	ldr	r3, [r4, #32]
 810ff2e:	b11b      	cbz	r3, 810ff38 <__sinit+0x14>
 810ff30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ff34:	f7ff bff0 	b.w	810ff18 <__sfp_lock_release>
 810ff38:	4b04      	ldr	r3, [pc, #16]	@ (810ff4c <__sinit+0x28>)
 810ff3a:	6223      	str	r3, [r4, #32]
 810ff3c:	4b04      	ldr	r3, [pc, #16]	@ (810ff50 <__sinit+0x2c>)
 810ff3e:	681b      	ldr	r3, [r3, #0]
 810ff40:	2b00      	cmp	r3, #0
 810ff42:	d1f5      	bne.n	810ff30 <__sinit+0xc>
 810ff44:	f7ff ffc4 	bl	810fed0 <global_stdio_init.part.0>
 810ff48:	e7f2      	b.n	810ff30 <__sinit+0xc>
 810ff4a:	bf00      	nop
 810ff4c:	0810fe91 	.word	0x0810fe91
 810ff50:	10008c50 	.word	0x10008c50

0810ff54 <_fwalk_sglue>:
 810ff54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ff58:	4607      	mov	r7, r0
 810ff5a:	4688      	mov	r8, r1
 810ff5c:	4614      	mov	r4, r2
 810ff5e:	2600      	movs	r6, #0
 810ff60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810ff64:	f1b9 0901 	subs.w	r9, r9, #1
 810ff68:	d505      	bpl.n	810ff76 <_fwalk_sglue+0x22>
 810ff6a:	6824      	ldr	r4, [r4, #0]
 810ff6c:	2c00      	cmp	r4, #0
 810ff6e:	d1f7      	bne.n	810ff60 <_fwalk_sglue+0xc>
 810ff70:	4630      	mov	r0, r6
 810ff72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ff76:	89ab      	ldrh	r3, [r5, #12]
 810ff78:	2b01      	cmp	r3, #1
 810ff7a:	d907      	bls.n	810ff8c <_fwalk_sglue+0x38>
 810ff7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810ff80:	3301      	adds	r3, #1
 810ff82:	d003      	beq.n	810ff8c <_fwalk_sglue+0x38>
 810ff84:	4629      	mov	r1, r5
 810ff86:	4638      	mov	r0, r7
 810ff88:	47c0      	blx	r8
 810ff8a:	4306      	orrs	r6, r0
 810ff8c:	3568      	adds	r5, #104	@ 0x68
 810ff8e:	e7e9      	b.n	810ff64 <_fwalk_sglue+0x10>

0810ff90 <iprintf>:
 810ff90:	b40f      	push	{r0, r1, r2, r3}
 810ff92:	b507      	push	{r0, r1, r2, lr}
 810ff94:	4906      	ldr	r1, [pc, #24]	@ (810ffb0 <iprintf+0x20>)
 810ff96:	ab04      	add	r3, sp, #16
 810ff98:	6808      	ldr	r0, [r1, #0]
 810ff9a:	f853 2b04 	ldr.w	r2, [r3], #4
 810ff9e:	6881      	ldr	r1, [r0, #8]
 810ffa0:	9301      	str	r3, [sp, #4]
 810ffa2:	f002 fe15 	bl	8112bd0 <_vfiprintf_r>
 810ffa6:	b003      	add	sp, #12
 810ffa8:	f85d eb04 	ldr.w	lr, [sp], #4
 810ffac:	b004      	add	sp, #16
 810ffae:	4770      	bx	lr
 810ffb0:	100000b0 	.word	0x100000b0

0810ffb4 <_puts_r>:
 810ffb4:	6a03      	ldr	r3, [r0, #32]
 810ffb6:	b570      	push	{r4, r5, r6, lr}
 810ffb8:	6884      	ldr	r4, [r0, #8]
 810ffba:	4605      	mov	r5, r0
 810ffbc:	460e      	mov	r6, r1
 810ffbe:	b90b      	cbnz	r3, 810ffc4 <_puts_r+0x10>
 810ffc0:	f7ff ffb0 	bl	810ff24 <__sinit>
 810ffc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810ffc6:	07db      	lsls	r3, r3, #31
 810ffc8:	d405      	bmi.n	810ffd6 <_puts_r+0x22>
 810ffca:	89a3      	ldrh	r3, [r4, #12]
 810ffcc:	0598      	lsls	r0, r3, #22
 810ffce:	d402      	bmi.n	810ffd6 <_puts_r+0x22>
 810ffd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810ffd2:	f000 f9c2 	bl	811035a <__retarget_lock_acquire_recursive>
 810ffd6:	89a3      	ldrh	r3, [r4, #12]
 810ffd8:	0719      	lsls	r1, r3, #28
 810ffda:	d502      	bpl.n	810ffe2 <_puts_r+0x2e>
 810ffdc:	6923      	ldr	r3, [r4, #16]
 810ffde:	2b00      	cmp	r3, #0
 810ffe0:	d135      	bne.n	811004e <_puts_r+0x9a>
 810ffe2:	4621      	mov	r1, r4
 810ffe4:	4628      	mov	r0, r5
 810ffe6:	f000 f8e5 	bl	81101b4 <__swsetup_r>
 810ffea:	b380      	cbz	r0, 811004e <_puts_r+0x9a>
 810ffec:	f04f 35ff 	mov.w	r5, #4294967295
 810fff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810fff2:	07da      	lsls	r2, r3, #31
 810fff4:	d405      	bmi.n	8110002 <_puts_r+0x4e>
 810fff6:	89a3      	ldrh	r3, [r4, #12]
 810fff8:	059b      	lsls	r3, r3, #22
 810fffa:	d402      	bmi.n	8110002 <_puts_r+0x4e>
 810fffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810fffe:	f000 f9ad 	bl	811035c <__retarget_lock_release_recursive>
 8110002:	4628      	mov	r0, r5
 8110004:	bd70      	pop	{r4, r5, r6, pc}
 8110006:	2b00      	cmp	r3, #0
 8110008:	da04      	bge.n	8110014 <_puts_r+0x60>
 811000a:	69a2      	ldr	r2, [r4, #24]
 811000c:	429a      	cmp	r2, r3
 811000e:	dc17      	bgt.n	8110040 <_puts_r+0x8c>
 8110010:	290a      	cmp	r1, #10
 8110012:	d015      	beq.n	8110040 <_puts_r+0x8c>
 8110014:	6823      	ldr	r3, [r4, #0]
 8110016:	1c5a      	adds	r2, r3, #1
 8110018:	6022      	str	r2, [r4, #0]
 811001a:	7019      	strb	r1, [r3, #0]
 811001c:	68a3      	ldr	r3, [r4, #8]
 811001e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8110022:	3b01      	subs	r3, #1
 8110024:	60a3      	str	r3, [r4, #8]
 8110026:	2900      	cmp	r1, #0
 8110028:	d1ed      	bne.n	8110006 <_puts_r+0x52>
 811002a:	2b00      	cmp	r3, #0
 811002c:	da11      	bge.n	8110052 <_puts_r+0x9e>
 811002e:	4622      	mov	r2, r4
 8110030:	210a      	movs	r1, #10
 8110032:	4628      	mov	r0, r5
 8110034:	f000 f87f 	bl	8110136 <__swbuf_r>
 8110038:	3001      	adds	r0, #1
 811003a:	d0d7      	beq.n	810ffec <_puts_r+0x38>
 811003c:	250a      	movs	r5, #10
 811003e:	e7d7      	b.n	810fff0 <_puts_r+0x3c>
 8110040:	4622      	mov	r2, r4
 8110042:	4628      	mov	r0, r5
 8110044:	f000 f877 	bl	8110136 <__swbuf_r>
 8110048:	3001      	adds	r0, #1
 811004a:	d1e7      	bne.n	811001c <_puts_r+0x68>
 811004c:	e7ce      	b.n	810ffec <_puts_r+0x38>
 811004e:	3e01      	subs	r6, #1
 8110050:	e7e4      	b.n	811001c <_puts_r+0x68>
 8110052:	6823      	ldr	r3, [r4, #0]
 8110054:	1c5a      	adds	r2, r3, #1
 8110056:	6022      	str	r2, [r4, #0]
 8110058:	220a      	movs	r2, #10
 811005a:	701a      	strb	r2, [r3, #0]
 811005c:	e7ee      	b.n	811003c <_puts_r+0x88>
	...

08110060 <puts>:
 8110060:	4b02      	ldr	r3, [pc, #8]	@ (811006c <puts+0xc>)
 8110062:	4601      	mov	r1, r0
 8110064:	6818      	ldr	r0, [r3, #0]
 8110066:	f7ff bfa5 	b.w	810ffb4 <_puts_r>
 811006a:	bf00      	nop
 811006c:	100000b0 	.word	0x100000b0

08110070 <siprintf>:
 8110070:	b40e      	push	{r1, r2, r3}
 8110072:	b500      	push	{lr}
 8110074:	b09c      	sub	sp, #112	@ 0x70
 8110076:	ab1d      	add	r3, sp, #116	@ 0x74
 8110078:	9002      	str	r0, [sp, #8]
 811007a:	9006      	str	r0, [sp, #24]
 811007c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8110080:	4809      	ldr	r0, [pc, #36]	@ (81100a8 <siprintf+0x38>)
 8110082:	9107      	str	r1, [sp, #28]
 8110084:	9104      	str	r1, [sp, #16]
 8110086:	4909      	ldr	r1, [pc, #36]	@ (81100ac <siprintf+0x3c>)
 8110088:	f853 2b04 	ldr.w	r2, [r3], #4
 811008c:	9105      	str	r1, [sp, #20]
 811008e:	6800      	ldr	r0, [r0, #0]
 8110090:	9301      	str	r3, [sp, #4]
 8110092:	a902      	add	r1, sp, #8
 8110094:	f002 fc76 	bl	8112984 <_svfiprintf_r>
 8110098:	9b02      	ldr	r3, [sp, #8]
 811009a:	2200      	movs	r2, #0
 811009c:	701a      	strb	r2, [r3, #0]
 811009e:	b01c      	add	sp, #112	@ 0x70
 81100a0:	f85d eb04 	ldr.w	lr, [sp], #4
 81100a4:	b003      	add	sp, #12
 81100a6:	4770      	bx	lr
 81100a8:	100000b0 	.word	0x100000b0
 81100ac:	ffff0208 	.word	0xffff0208

081100b0 <__sread>:
 81100b0:	b510      	push	{r4, lr}
 81100b2:	460c      	mov	r4, r1
 81100b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81100b8:	f000 f900 	bl	81102bc <_read_r>
 81100bc:	2800      	cmp	r0, #0
 81100be:	bfab      	itete	ge
 81100c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 81100c2:	89a3      	ldrhlt	r3, [r4, #12]
 81100c4:	181b      	addge	r3, r3, r0
 81100c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 81100ca:	bfac      	ite	ge
 81100cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 81100ce:	81a3      	strhlt	r3, [r4, #12]
 81100d0:	bd10      	pop	{r4, pc}

081100d2 <__swrite>:
 81100d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81100d6:	461f      	mov	r7, r3
 81100d8:	898b      	ldrh	r3, [r1, #12]
 81100da:	05db      	lsls	r3, r3, #23
 81100dc:	4605      	mov	r5, r0
 81100de:	460c      	mov	r4, r1
 81100e0:	4616      	mov	r6, r2
 81100e2:	d505      	bpl.n	81100f0 <__swrite+0x1e>
 81100e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81100e8:	2302      	movs	r3, #2
 81100ea:	2200      	movs	r2, #0
 81100ec:	f000 f8d4 	bl	8110298 <_lseek_r>
 81100f0:	89a3      	ldrh	r3, [r4, #12]
 81100f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81100f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81100fa:	81a3      	strh	r3, [r4, #12]
 81100fc:	4632      	mov	r2, r6
 81100fe:	463b      	mov	r3, r7
 8110100:	4628      	mov	r0, r5
 8110102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8110106:	f000 b8eb 	b.w	81102e0 <_write_r>

0811010a <__sseek>:
 811010a:	b510      	push	{r4, lr}
 811010c:	460c      	mov	r4, r1
 811010e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110112:	f000 f8c1 	bl	8110298 <_lseek_r>
 8110116:	1c43      	adds	r3, r0, #1
 8110118:	89a3      	ldrh	r3, [r4, #12]
 811011a:	bf15      	itete	ne
 811011c:	6560      	strne	r0, [r4, #84]	@ 0x54
 811011e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8110122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8110126:	81a3      	strheq	r3, [r4, #12]
 8110128:	bf18      	it	ne
 811012a:	81a3      	strhne	r3, [r4, #12]
 811012c:	bd10      	pop	{r4, pc}

0811012e <__sclose>:
 811012e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110132:	f000 b8a1 	b.w	8110278 <_close_r>

08110136 <__swbuf_r>:
 8110136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110138:	460e      	mov	r6, r1
 811013a:	4614      	mov	r4, r2
 811013c:	4605      	mov	r5, r0
 811013e:	b118      	cbz	r0, 8110148 <__swbuf_r+0x12>
 8110140:	6a03      	ldr	r3, [r0, #32]
 8110142:	b90b      	cbnz	r3, 8110148 <__swbuf_r+0x12>
 8110144:	f7ff feee 	bl	810ff24 <__sinit>
 8110148:	69a3      	ldr	r3, [r4, #24]
 811014a:	60a3      	str	r3, [r4, #8]
 811014c:	89a3      	ldrh	r3, [r4, #12]
 811014e:	071a      	lsls	r2, r3, #28
 8110150:	d501      	bpl.n	8110156 <__swbuf_r+0x20>
 8110152:	6923      	ldr	r3, [r4, #16]
 8110154:	b943      	cbnz	r3, 8110168 <__swbuf_r+0x32>
 8110156:	4621      	mov	r1, r4
 8110158:	4628      	mov	r0, r5
 811015a:	f000 f82b 	bl	81101b4 <__swsetup_r>
 811015e:	b118      	cbz	r0, 8110168 <__swbuf_r+0x32>
 8110160:	f04f 37ff 	mov.w	r7, #4294967295
 8110164:	4638      	mov	r0, r7
 8110166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8110168:	6823      	ldr	r3, [r4, #0]
 811016a:	6922      	ldr	r2, [r4, #16]
 811016c:	1a98      	subs	r0, r3, r2
 811016e:	6963      	ldr	r3, [r4, #20]
 8110170:	b2f6      	uxtb	r6, r6
 8110172:	4283      	cmp	r3, r0
 8110174:	4637      	mov	r7, r6
 8110176:	dc05      	bgt.n	8110184 <__swbuf_r+0x4e>
 8110178:	4621      	mov	r1, r4
 811017a:	4628      	mov	r0, r5
 811017c:	f002 fec4 	bl	8112f08 <_fflush_r>
 8110180:	2800      	cmp	r0, #0
 8110182:	d1ed      	bne.n	8110160 <__swbuf_r+0x2a>
 8110184:	68a3      	ldr	r3, [r4, #8]
 8110186:	3b01      	subs	r3, #1
 8110188:	60a3      	str	r3, [r4, #8]
 811018a:	6823      	ldr	r3, [r4, #0]
 811018c:	1c5a      	adds	r2, r3, #1
 811018e:	6022      	str	r2, [r4, #0]
 8110190:	701e      	strb	r6, [r3, #0]
 8110192:	6962      	ldr	r2, [r4, #20]
 8110194:	1c43      	adds	r3, r0, #1
 8110196:	429a      	cmp	r2, r3
 8110198:	d004      	beq.n	81101a4 <__swbuf_r+0x6e>
 811019a:	89a3      	ldrh	r3, [r4, #12]
 811019c:	07db      	lsls	r3, r3, #31
 811019e:	d5e1      	bpl.n	8110164 <__swbuf_r+0x2e>
 81101a0:	2e0a      	cmp	r6, #10
 81101a2:	d1df      	bne.n	8110164 <__swbuf_r+0x2e>
 81101a4:	4621      	mov	r1, r4
 81101a6:	4628      	mov	r0, r5
 81101a8:	f002 feae 	bl	8112f08 <_fflush_r>
 81101ac:	2800      	cmp	r0, #0
 81101ae:	d0d9      	beq.n	8110164 <__swbuf_r+0x2e>
 81101b0:	e7d6      	b.n	8110160 <__swbuf_r+0x2a>
	...

081101b4 <__swsetup_r>:
 81101b4:	b538      	push	{r3, r4, r5, lr}
 81101b6:	4b29      	ldr	r3, [pc, #164]	@ (811025c <__swsetup_r+0xa8>)
 81101b8:	4605      	mov	r5, r0
 81101ba:	6818      	ldr	r0, [r3, #0]
 81101bc:	460c      	mov	r4, r1
 81101be:	b118      	cbz	r0, 81101c8 <__swsetup_r+0x14>
 81101c0:	6a03      	ldr	r3, [r0, #32]
 81101c2:	b90b      	cbnz	r3, 81101c8 <__swsetup_r+0x14>
 81101c4:	f7ff feae 	bl	810ff24 <__sinit>
 81101c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81101cc:	0719      	lsls	r1, r3, #28
 81101ce:	d422      	bmi.n	8110216 <__swsetup_r+0x62>
 81101d0:	06da      	lsls	r2, r3, #27
 81101d2:	d407      	bmi.n	81101e4 <__swsetup_r+0x30>
 81101d4:	2209      	movs	r2, #9
 81101d6:	602a      	str	r2, [r5, #0]
 81101d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81101dc:	81a3      	strh	r3, [r4, #12]
 81101de:	f04f 30ff 	mov.w	r0, #4294967295
 81101e2:	e033      	b.n	811024c <__swsetup_r+0x98>
 81101e4:	0758      	lsls	r0, r3, #29
 81101e6:	d512      	bpl.n	811020e <__swsetup_r+0x5a>
 81101e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81101ea:	b141      	cbz	r1, 81101fe <__swsetup_r+0x4a>
 81101ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81101f0:	4299      	cmp	r1, r3
 81101f2:	d002      	beq.n	81101fa <__swsetup_r+0x46>
 81101f4:	4628      	mov	r0, r5
 81101f6:	f000 ff33 	bl	8111060 <_free_r>
 81101fa:	2300      	movs	r3, #0
 81101fc:	6363      	str	r3, [r4, #52]	@ 0x34
 81101fe:	89a3      	ldrh	r3, [r4, #12]
 8110200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8110204:	81a3      	strh	r3, [r4, #12]
 8110206:	2300      	movs	r3, #0
 8110208:	6063      	str	r3, [r4, #4]
 811020a:	6923      	ldr	r3, [r4, #16]
 811020c:	6023      	str	r3, [r4, #0]
 811020e:	89a3      	ldrh	r3, [r4, #12]
 8110210:	f043 0308 	orr.w	r3, r3, #8
 8110214:	81a3      	strh	r3, [r4, #12]
 8110216:	6923      	ldr	r3, [r4, #16]
 8110218:	b94b      	cbnz	r3, 811022e <__swsetup_r+0x7a>
 811021a:	89a3      	ldrh	r3, [r4, #12]
 811021c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8110220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8110224:	d003      	beq.n	811022e <__swsetup_r+0x7a>
 8110226:	4621      	mov	r1, r4
 8110228:	4628      	mov	r0, r5
 811022a:	f002 fecd 	bl	8112fc8 <__smakebuf_r>
 811022e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110232:	f013 0201 	ands.w	r2, r3, #1
 8110236:	d00a      	beq.n	811024e <__swsetup_r+0x9a>
 8110238:	2200      	movs	r2, #0
 811023a:	60a2      	str	r2, [r4, #8]
 811023c:	6962      	ldr	r2, [r4, #20]
 811023e:	4252      	negs	r2, r2
 8110240:	61a2      	str	r2, [r4, #24]
 8110242:	6922      	ldr	r2, [r4, #16]
 8110244:	b942      	cbnz	r2, 8110258 <__swsetup_r+0xa4>
 8110246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 811024a:	d1c5      	bne.n	81101d8 <__swsetup_r+0x24>
 811024c:	bd38      	pop	{r3, r4, r5, pc}
 811024e:	0799      	lsls	r1, r3, #30
 8110250:	bf58      	it	pl
 8110252:	6962      	ldrpl	r2, [r4, #20]
 8110254:	60a2      	str	r2, [r4, #8]
 8110256:	e7f4      	b.n	8110242 <__swsetup_r+0x8e>
 8110258:	2000      	movs	r0, #0
 811025a:	e7f7      	b.n	811024c <__swsetup_r+0x98>
 811025c:	100000b0 	.word	0x100000b0

08110260 <memset>:
 8110260:	4402      	add	r2, r0
 8110262:	4603      	mov	r3, r0
 8110264:	4293      	cmp	r3, r2
 8110266:	d100      	bne.n	811026a <memset+0xa>
 8110268:	4770      	bx	lr
 811026a:	f803 1b01 	strb.w	r1, [r3], #1
 811026e:	e7f9      	b.n	8110264 <memset+0x4>

08110270 <_localeconv_r>:
 8110270:	4800      	ldr	r0, [pc, #0]	@ (8110274 <_localeconv_r+0x4>)
 8110272:	4770      	bx	lr
 8110274:	100001f0 	.word	0x100001f0

08110278 <_close_r>:
 8110278:	b538      	push	{r3, r4, r5, lr}
 811027a:	4d06      	ldr	r5, [pc, #24]	@ (8110294 <_close_r+0x1c>)
 811027c:	2300      	movs	r3, #0
 811027e:	4604      	mov	r4, r0
 8110280:	4608      	mov	r0, r1
 8110282:	602b      	str	r3, [r5, #0]
 8110284:	f7f3 ff10 	bl	81040a8 <_close>
 8110288:	1c43      	adds	r3, r0, #1
 811028a:	d102      	bne.n	8110292 <_close_r+0x1a>
 811028c:	682b      	ldr	r3, [r5, #0]
 811028e:	b103      	cbz	r3, 8110292 <_close_r+0x1a>
 8110290:	6023      	str	r3, [r4, #0]
 8110292:	bd38      	pop	{r3, r4, r5, pc}
 8110294:	10008c54 	.word	0x10008c54

08110298 <_lseek_r>:
 8110298:	b538      	push	{r3, r4, r5, lr}
 811029a:	4d07      	ldr	r5, [pc, #28]	@ (81102b8 <_lseek_r+0x20>)
 811029c:	4604      	mov	r4, r0
 811029e:	4608      	mov	r0, r1
 81102a0:	4611      	mov	r1, r2
 81102a2:	2200      	movs	r2, #0
 81102a4:	602a      	str	r2, [r5, #0]
 81102a6:	461a      	mov	r2, r3
 81102a8:	f7f3 ff25 	bl	81040f6 <_lseek>
 81102ac:	1c43      	adds	r3, r0, #1
 81102ae:	d102      	bne.n	81102b6 <_lseek_r+0x1e>
 81102b0:	682b      	ldr	r3, [r5, #0]
 81102b2:	b103      	cbz	r3, 81102b6 <_lseek_r+0x1e>
 81102b4:	6023      	str	r3, [r4, #0]
 81102b6:	bd38      	pop	{r3, r4, r5, pc}
 81102b8:	10008c54 	.word	0x10008c54

081102bc <_read_r>:
 81102bc:	b538      	push	{r3, r4, r5, lr}
 81102be:	4d07      	ldr	r5, [pc, #28]	@ (81102dc <_read_r+0x20>)
 81102c0:	4604      	mov	r4, r0
 81102c2:	4608      	mov	r0, r1
 81102c4:	4611      	mov	r1, r2
 81102c6:	2200      	movs	r2, #0
 81102c8:	602a      	str	r2, [r5, #0]
 81102ca:	461a      	mov	r2, r3
 81102cc:	f7f3 fecd 	bl	810406a <_read>
 81102d0:	1c43      	adds	r3, r0, #1
 81102d2:	d102      	bne.n	81102da <_read_r+0x1e>
 81102d4:	682b      	ldr	r3, [r5, #0]
 81102d6:	b103      	cbz	r3, 81102da <_read_r+0x1e>
 81102d8:	6023      	str	r3, [r4, #0]
 81102da:	bd38      	pop	{r3, r4, r5, pc}
 81102dc:	10008c54 	.word	0x10008c54

081102e0 <_write_r>:
 81102e0:	b538      	push	{r3, r4, r5, lr}
 81102e2:	4d07      	ldr	r5, [pc, #28]	@ (8110300 <_write_r+0x20>)
 81102e4:	4604      	mov	r4, r0
 81102e6:	4608      	mov	r0, r1
 81102e8:	4611      	mov	r1, r2
 81102ea:	2200      	movs	r2, #0
 81102ec:	602a      	str	r2, [r5, #0]
 81102ee:	461a      	mov	r2, r3
 81102f0:	f7f3 faf0 	bl	81038d4 <_write>
 81102f4:	1c43      	adds	r3, r0, #1
 81102f6:	d102      	bne.n	81102fe <_write_r+0x1e>
 81102f8:	682b      	ldr	r3, [r5, #0]
 81102fa:	b103      	cbz	r3, 81102fe <_write_r+0x1e>
 81102fc:	6023      	str	r3, [r4, #0]
 81102fe:	bd38      	pop	{r3, r4, r5, pc}
 8110300:	10008c54 	.word	0x10008c54

08110304 <__errno>:
 8110304:	4b01      	ldr	r3, [pc, #4]	@ (811030c <__errno+0x8>)
 8110306:	6818      	ldr	r0, [r3, #0]
 8110308:	4770      	bx	lr
 811030a:	bf00      	nop
 811030c:	100000b0 	.word	0x100000b0

08110310 <__libc_init_array>:
 8110310:	b570      	push	{r4, r5, r6, lr}
 8110312:	4d0d      	ldr	r5, [pc, #52]	@ (8110348 <__libc_init_array+0x38>)
 8110314:	4c0d      	ldr	r4, [pc, #52]	@ (811034c <__libc_init_array+0x3c>)
 8110316:	1b64      	subs	r4, r4, r5
 8110318:	10a4      	asrs	r4, r4, #2
 811031a:	2600      	movs	r6, #0
 811031c:	42a6      	cmp	r6, r4
 811031e:	d109      	bne.n	8110334 <__libc_init_array+0x24>
 8110320:	4d0b      	ldr	r5, [pc, #44]	@ (8110350 <__libc_init_array+0x40>)
 8110322:	4c0c      	ldr	r4, [pc, #48]	@ (8110354 <__libc_init_array+0x44>)
 8110324:	f003 fae0 	bl	81138e8 <_init>
 8110328:	1b64      	subs	r4, r4, r5
 811032a:	10a4      	asrs	r4, r4, #2
 811032c:	2600      	movs	r6, #0
 811032e:	42a6      	cmp	r6, r4
 8110330:	d105      	bne.n	811033e <__libc_init_array+0x2e>
 8110332:	bd70      	pop	{r4, r5, r6, pc}
 8110334:	f855 3b04 	ldr.w	r3, [r5], #4
 8110338:	4798      	blx	r3
 811033a:	3601      	adds	r6, #1
 811033c:	e7ee      	b.n	811031c <__libc_init_array+0xc>
 811033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8110342:	4798      	blx	r3
 8110344:	3601      	adds	r6, #1
 8110346:	e7f2      	b.n	811032e <__libc_init_array+0x1e>
 8110348:	08113e3c 	.word	0x08113e3c
 811034c:	08113e3c 	.word	0x08113e3c
 8110350:	08113e3c 	.word	0x08113e3c
 8110354:	08113e40 	.word	0x08113e40

08110358 <__retarget_lock_init_recursive>:
 8110358:	4770      	bx	lr

0811035a <__retarget_lock_acquire_recursive>:
 811035a:	4770      	bx	lr

0811035c <__retarget_lock_release_recursive>:
 811035c:	4770      	bx	lr

0811035e <memcpy>:
 811035e:	440a      	add	r2, r1
 8110360:	4291      	cmp	r1, r2
 8110362:	f100 33ff 	add.w	r3, r0, #4294967295
 8110366:	d100      	bne.n	811036a <memcpy+0xc>
 8110368:	4770      	bx	lr
 811036a:	b510      	push	{r4, lr}
 811036c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8110370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8110374:	4291      	cmp	r1, r2
 8110376:	d1f9      	bne.n	811036c <memcpy+0xe>
 8110378:	bd10      	pop	{r4, pc}
	...

0811037c <nanf>:
 811037c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8110384 <nanf+0x8>
 8110380:	4770      	bx	lr
 8110382:	bf00      	nop
 8110384:	7fc00000 	.word	0x7fc00000

08110388 <__assert_func>:
 8110388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811038a:	4614      	mov	r4, r2
 811038c:	461a      	mov	r2, r3
 811038e:	4b09      	ldr	r3, [pc, #36]	@ (81103b4 <__assert_func+0x2c>)
 8110390:	681b      	ldr	r3, [r3, #0]
 8110392:	4605      	mov	r5, r0
 8110394:	68d8      	ldr	r0, [r3, #12]
 8110396:	b954      	cbnz	r4, 81103ae <__assert_func+0x26>
 8110398:	4b07      	ldr	r3, [pc, #28]	@ (81103b8 <__assert_func+0x30>)
 811039a:	461c      	mov	r4, r3
 811039c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 81103a0:	9100      	str	r1, [sp, #0]
 81103a2:	462b      	mov	r3, r5
 81103a4:	4905      	ldr	r1, [pc, #20]	@ (81103bc <__assert_func+0x34>)
 81103a6:	f002 fdd7 	bl	8112f58 <fiprintf>
 81103aa:	f002 feb1 	bl	8113110 <abort>
 81103ae:	4b04      	ldr	r3, [pc, #16]	@ (81103c0 <__assert_func+0x38>)
 81103b0:	e7f4      	b.n	811039c <__assert_func+0x14>
 81103b2:	bf00      	nop
 81103b4:	100000b0 	.word	0x100000b0
 81103b8:	08113a93 	.word	0x08113a93
 81103bc:	08113a65 	.word	0x08113a65
 81103c0:	08113a58 	.word	0x08113a58

081103c4 <quorem>:
 81103c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81103c8:	6903      	ldr	r3, [r0, #16]
 81103ca:	690c      	ldr	r4, [r1, #16]
 81103cc:	42a3      	cmp	r3, r4
 81103ce:	4607      	mov	r7, r0
 81103d0:	db7e      	blt.n	81104d0 <quorem+0x10c>
 81103d2:	3c01      	subs	r4, #1
 81103d4:	f101 0814 	add.w	r8, r1, #20
 81103d8:	00a3      	lsls	r3, r4, #2
 81103da:	f100 0514 	add.w	r5, r0, #20
 81103de:	9300      	str	r3, [sp, #0]
 81103e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81103e4:	9301      	str	r3, [sp, #4]
 81103e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81103ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81103ee:	3301      	adds	r3, #1
 81103f0:	429a      	cmp	r2, r3
 81103f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81103f6:	fbb2 f6f3 	udiv	r6, r2, r3
 81103fa:	d32e      	bcc.n	811045a <quorem+0x96>
 81103fc:	f04f 0a00 	mov.w	sl, #0
 8110400:	46c4      	mov	ip, r8
 8110402:	46ae      	mov	lr, r5
 8110404:	46d3      	mov	fp, sl
 8110406:	f85c 3b04 	ldr.w	r3, [ip], #4
 811040a:	b298      	uxth	r0, r3
 811040c:	fb06 a000 	mla	r0, r6, r0, sl
 8110410:	0c02      	lsrs	r2, r0, #16
 8110412:	0c1b      	lsrs	r3, r3, #16
 8110414:	fb06 2303 	mla	r3, r6, r3, r2
 8110418:	f8de 2000 	ldr.w	r2, [lr]
 811041c:	b280      	uxth	r0, r0
 811041e:	b292      	uxth	r2, r2
 8110420:	1a12      	subs	r2, r2, r0
 8110422:	445a      	add	r2, fp
 8110424:	f8de 0000 	ldr.w	r0, [lr]
 8110428:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 811042c:	b29b      	uxth	r3, r3
 811042e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8110432:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8110436:	b292      	uxth	r2, r2
 8110438:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 811043c:	45e1      	cmp	r9, ip
 811043e:	f84e 2b04 	str.w	r2, [lr], #4
 8110442:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8110446:	d2de      	bcs.n	8110406 <quorem+0x42>
 8110448:	9b00      	ldr	r3, [sp, #0]
 811044a:	58eb      	ldr	r3, [r5, r3]
 811044c:	b92b      	cbnz	r3, 811045a <quorem+0x96>
 811044e:	9b01      	ldr	r3, [sp, #4]
 8110450:	3b04      	subs	r3, #4
 8110452:	429d      	cmp	r5, r3
 8110454:	461a      	mov	r2, r3
 8110456:	d32f      	bcc.n	81104b8 <quorem+0xf4>
 8110458:	613c      	str	r4, [r7, #16]
 811045a:	4638      	mov	r0, r7
 811045c:	f001 f9c4 	bl	81117e8 <__mcmp>
 8110460:	2800      	cmp	r0, #0
 8110462:	db25      	blt.n	81104b0 <quorem+0xec>
 8110464:	4629      	mov	r1, r5
 8110466:	2000      	movs	r0, #0
 8110468:	f858 2b04 	ldr.w	r2, [r8], #4
 811046c:	f8d1 c000 	ldr.w	ip, [r1]
 8110470:	fa1f fe82 	uxth.w	lr, r2
 8110474:	fa1f f38c 	uxth.w	r3, ip
 8110478:	eba3 030e 	sub.w	r3, r3, lr
 811047c:	4403      	add	r3, r0
 811047e:	0c12      	lsrs	r2, r2, #16
 8110480:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8110484:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8110488:	b29b      	uxth	r3, r3
 811048a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 811048e:	45c1      	cmp	r9, r8
 8110490:	f841 3b04 	str.w	r3, [r1], #4
 8110494:	ea4f 4022 	mov.w	r0, r2, asr #16
 8110498:	d2e6      	bcs.n	8110468 <quorem+0xa4>
 811049a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 811049e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81104a2:	b922      	cbnz	r2, 81104ae <quorem+0xea>
 81104a4:	3b04      	subs	r3, #4
 81104a6:	429d      	cmp	r5, r3
 81104a8:	461a      	mov	r2, r3
 81104aa:	d30b      	bcc.n	81104c4 <quorem+0x100>
 81104ac:	613c      	str	r4, [r7, #16]
 81104ae:	3601      	adds	r6, #1
 81104b0:	4630      	mov	r0, r6
 81104b2:	b003      	add	sp, #12
 81104b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81104b8:	6812      	ldr	r2, [r2, #0]
 81104ba:	3b04      	subs	r3, #4
 81104bc:	2a00      	cmp	r2, #0
 81104be:	d1cb      	bne.n	8110458 <quorem+0x94>
 81104c0:	3c01      	subs	r4, #1
 81104c2:	e7c6      	b.n	8110452 <quorem+0x8e>
 81104c4:	6812      	ldr	r2, [r2, #0]
 81104c6:	3b04      	subs	r3, #4
 81104c8:	2a00      	cmp	r2, #0
 81104ca:	d1ef      	bne.n	81104ac <quorem+0xe8>
 81104cc:	3c01      	subs	r4, #1
 81104ce:	e7ea      	b.n	81104a6 <quorem+0xe2>
 81104d0:	2000      	movs	r0, #0
 81104d2:	e7ee      	b.n	81104b2 <quorem+0xee>
 81104d4:	0000      	movs	r0, r0
	...

081104d8 <_dtoa_r>:
 81104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81104dc:	69c7      	ldr	r7, [r0, #28]
 81104de:	b099      	sub	sp, #100	@ 0x64
 81104e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 81104e4:	ec55 4b10 	vmov	r4, r5, d0
 81104e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 81104ea:	9109      	str	r1, [sp, #36]	@ 0x24
 81104ec:	4683      	mov	fp, r0
 81104ee:	920e      	str	r2, [sp, #56]	@ 0x38
 81104f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 81104f2:	b97f      	cbnz	r7, 8110514 <_dtoa_r+0x3c>
 81104f4:	2010      	movs	r0, #16
 81104f6:	f000 fdfd 	bl	81110f4 <malloc>
 81104fa:	4602      	mov	r2, r0
 81104fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8110500:	b920      	cbnz	r0, 811050c <_dtoa_r+0x34>
 8110502:	4ba7      	ldr	r3, [pc, #668]	@ (81107a0 <_dtoa_r+0x2c8>)
 8110504:	21ef      	movs	r1, #239	@ 0xef
 8110506:	48a7      	ldr	r0, [pc, #668]	@ (81107a4 <_dtoa_r+0x2cc>)
 8110508:	f7ff ff3e 	bl	8110388 <__assert_func>
 811050c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8110510:	6007      	str	r7, [r0, #0]
 8110512:	60c7      	str	r7, [r0, #12]
 8110514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8110518:	6819      	ldr	r1, [r3, #0]
 811051a:	b159      	cbz	r1, 8110534 <_dtoa_r+0x5c>
 811051c:	685a      	ldr	r2, [r3, #4]
 811051e:	604a      	str	r2, [r1, #4]
 8110520:	2301      	movs	r3, #1
 8110522:	4093      	lsls	r3, r2
 8110524:	608b      	str	r3, [r1, #8]
 8110526:	4658      	mov	r0, fp
 8110528:	f000 feda 	bl	81112e0 <_Bfree>
 811052c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8110530:	2200      	movs	r2, #0
 8110532:	601a      	str	r2, [r3, #0]
 8110534:	1e2b      	subs	r3, r5, #0
 8110536:	bfb9      	ittee	lt
 8110538:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 811053c:	9303      	strlt	r3, [sp, #12]
 811053e:	2300      	movge	r3, #0
 8110540:	6033      	strge	r3, [r6, #0]
 8110542:	9f03      	ldr	r7, [sp, #12]
 8110544:	4b98      	ldr	r3, [pc, #608]	@ (81107a8 <_dtoa_r+0x2d0>)
 8110546:	bfbc      	itt	lt
 8110548:	2201      	movlt	r2, #1
 811054a:	6032      	strlt	r2, [r6, #0]
 811054c:	43bb      	bics	r3, r7
 811054e:	d112      	bne.n	8110576 <_dtoa_r+0x9e>
 8110550:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8110552:	f242 730f 	movw	r3, #9999	@ 0x270f
 8110556:	6013      	str	r3, [r2, #0]
 8110558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 811055c:	4323      	orrs	r3, r4
 811055e:	f000 854d 	beq.w	8110ffc <_dtoa_r+0xb24>
 8110562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8110564:	f8df a254 	ldr.w	sl, [pc, #596]	@ 81107bc <_dtoa_r+0x2e4>
 8110568:	2b00      	cmp	r3, #0
 811056a:	f000 854f 	beq.w	811100c <_dtoa_r+0xb34>
 811056e:	f10a 0303 	add.w	r3, sl, #3
 8110572:	f000 bd49 	b.w	8111008 <_dtoa_r+0xb30>
 8110576:	ed9d 7b02 	vldr	d7, [sp, #8]
 811057a:	2200      	movs	r2, #0
 811057c:	ec51 0b17 	vmov	r0, r1, d7
 8110580:	2300      	movs	r3, #0
 8110582:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8110586:	f7f0 fb27 	bl	8100bd8 <__aeabi_dcmpeq>
 811058a:	4680      	mov	r8, r0
 811058c:	b158      	cbz	r0, 81105a6 <_dtoa_r+0xce>
 811058e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8110590:	2301      	movs	r3, #1
 8110592:	6013      	str	r3, [r2, #0]
 8110594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8110596:	b113      	cbz	r3, 811059e <_dtoa_r+0xc6>
 8110598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 811059a:	4b84      	ldr	r3, [pc, #528]	@ (81107ac <_dtoa_r+0x2d4>)
 811059c:	6013      	str	r3, [r2, #0]
 811059e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 81107c0 <_dtoa_r+0x2e8>
 81105a2:	f000 bd33 	b.w	811100c <_dtoa_r+0xb34>
 81105a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 81105aa:	aa16      	add	r2, sp, #88	@ 0x58
 81105ac:	a917      	add	r1, sp, #92	@ 0x5c
 81105ae:	4658      	mov	r0, fp
 81105b0:	f001 fa3a 	bl	8111a28 <__d2b>
 81105b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 81105b8:	4681      	mov	r9, r0
 81105ba:	2e00      	cmp	r6, #0
 81105bc:	d077      	beq.n	81106ae <_dtoa_r+0x1d6>
 81105be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81105c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 81105c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81105c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81105cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 81105d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 81105d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 81105d8:	4619      	mov	r1, r3
 81105da:	2200      	movs	r2, #0
 81105dc:	4b74      	ldr	r3, [pc, #464]	@ (81107b0 <_dtoa_r+0x2d8>)
 81105de:	f7ef fedb 	bl	8100398 <__aeabi_dsub>
 81105e2:	a369      	add	r3, pc, #420	@ (adr r3, 8110788 <_dtoa_r+0x2b0>)
 81105e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105e8:	f7f0 f88e 	bl	8100708 <__aeabi_dmul>
 81105ec:	a368      	add	r3, pc, #416	@ (adr r3, 8110790 <_dtoa_r+0x2b8>)
 81105ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81105f2:	f7ef fed3 	bl	810039c <__adddf3>
 81105f6:	4604      	mov	r4, r0
 81105f8:	4630      	mov	r0, r6
 81105fa:	460d      	mov	r5, r1
 81105fc:	f7f0 f81a 	bl	8100634 <__aeabi_i2d>
 8110600:	a365      	add	r3, pc, #404	@ (adr r3, 8110798 <_dtoa_r+0x2c0>)
 8110602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110606:	f7f0 f87f 	bl	8100708 <__aeabi_dmul>
 811060a:	4602      	mov	r2, r0
 811060c:	460b      	mov	r3, r1
 811060e:	4620      	mov	r0, r4
 8110610:	4629      	mov	r1, r5
 8110612:	f7ef fec3 	bl	810039c <__adddf3>
 8110616:	4604      	mov	r4, r0
 8110618:	460d      	mov	r5, r1
 811061a:	f7f0 fb25 	bl	8100c68 <__aeabi_d2iz>
 811061e:	2200      	movs	r2, #0
 8110620:	4607      	mov	r7, r0
 8110622:	2300      	movs	r3, #0
 8110624:	4620      	mov	r0, r4
 8110626:	4629      	mov	r1, r5
 8110628:	f7f0 fae0 	bl	8100bec <__aeabi_dcmplt>
 811062c:	b140      	cbz	r0, 8110640 <_dtoa_r+0x168>
 811062e:	4638      	mov	r0, r7
 8110630:	f7f0 f800 	bl	8100634 <__aeabi_i2d>
 8110634:	4622      	mov	r2, r4
 8110636:	462b      	mov	r3, r5
 8110638:	f7f0 face 	bl	8100bd8 <__aeabi_dcmpeq>
 811063c:	b900      	cbnz	r0, 8110640 <_dtoa_r+0x168>
 811063e:	3f01      	subs	r7, #1
 8110640:	2f16      	cmp	r7, #22
 8110642:	d851      	bhi.n	81106e8 <_dtoa_r+0x210>
 8110644:	4b5b      	ldr	r3, [pc, #364]	@ (81107b4 <_dtoa_r+0x2dc>)
 8110646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 811064a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811064e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8110652:	f7f0 facb 	bl	8100bec <__aeabi_dcmplt>
 8110656:	2800      	cmp	r0, #0
 8110658:	d048      	beq.n	81106ec <_dtoa_r+0x214>
 811065a:	3f01      	subs	r7, #1
 811065c:	2300      	movs	r3, #0
 811065e:	9312      	str	r3, [sp, #72]	@ 0x48
 8110660:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8110662:	1b9b      	subs	r3, r3, r6
 8110664:	1e5a      	subs	r2, r3, #1
 8110666:	bf44      	itt	mi
 8110668:	f1c3 0801 	rsbmi	r8, r3, #1
 811066c:	2300      	movmi	r3, #0
 811066e:	9208      	str	r2, [sp, #32]
 8110670:	bf54      	ite	pl
 8110672:	f04f 0800 	movpl.w	r8, #0
 8110676:	9308      	strmi	r3, [sp, #32]
 8110678:	2f00      	cmp	r7, #0
 811067a:	db39      	blt.n	81106f0 <_dtoa_r+0x218>
 811067c:	9b08      	ldr	r3, [sp, #32]
 811067e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8110680:	443b      	add	r3, r7
 8110682:	9308      	str	r3, [sp, #32]
 8110684:	2300      	movs	r3, #0
 8110686:	930a      	str	r3, [sp, #40]	@ 0x28
 8110688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811068a:	2b09      	cmp	r3, #9
 811068c:	d864      	bhi.n	8110758 <_dtoa_r+0x280>
 811068e:	2b05      	cmp	r3, #5
 8110690:	bfc4      	itt	gt
 8110692:	3b04      	subgt	r3, #4
 8110694:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8110696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110698:	f1a3 0302 	sub.w	r3, r3, #2
 811069c:	bfcc      	ite	gt
 811069e:	2400      	movgt	r4, #0
 81106a0:	2401      	movle	r4, #1
 81106a2:	2b03      	cmp	r3, #3
 81106a4:	d863      	bhi.n	811076e <_dtoa_r+0x296>
 81106a6:	e8df f003 	tbb	[pc, r3]
 81106aa:	372a      	.short	0x372a
 81106ac:	5535      	.short	0x5535
 81106ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 81106b2:	441e      	add	r6, r3
 81106b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 81106b8:	2b20      	cmp	r3, #32
 81106ba:	bfc1      	itttt	gt
 81106bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 81106c0:	409f      	lslgt	r7, r3
 81106c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 81106c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 81106ca:	bfd6      	itet	le
 81106cc:	f1c3 0320 	rsble	r3, r3, #32
 81106d0:	ea47 0003 	orrgt.w	r0, r7, r3
 81106d4:	fa04 f003 	lslle.w	r0, r4, r3
 81106d8:	f7ef ff9c 	bl	8100614 <__aeabi_ui2d>
 81106dc:	2201      	movs	r2, #1
 81106de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 81106e2:	3e01      	subs	r6, #1
 81106e4:	9214      	str	r2, [sp, #80]	@ 0x50
 81106e6:	e777      	b.n	81105d8 <_dtoa_r+0x100>
 81106e8:	2301      	movs	r3, #1
 81106ea:	e7b8      	b.n	811065e <_dtoa_r+0x186>
 81106ec:	9012      	str	r0, [sp, #72]	@ 0x48
 81106ee:	e7b7      	b.n	8110660 <_dtoa_r+0x188>
 81106f0:	427b      	negs	r3, r7
 81106f2:	930a      	str	r3, [sp, #40]	@ 0x28
 81106f4:	2300      	movs	r3, #0
 81106f6:	eba8 0807 	sub.w	r8, r8, r7
 81106fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 81106fc:	e7c4      	b.n	8110688 <_dtoa_r+0x1b0>
 81106fe:	2300      	movs	r3, #0
 8110700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110704:	2b00      	cmp	r3, #0
 8110706:	dc35      	bgt.n	8110774 <_dtoa_r+0x29c>
 8110708:	2301      	movs	r3, #1
 811070a:	9300      	str	r3, [sp, #0]
 811070c:	9307      	str	r3, [sp, #28]
 811070e:	461a      	mov	r2, r3
 8110710:	920e      	str	r2, [sp, #56]	@ 0x38
 8110712:	e00b      	b.n	811072c <_dtoa_r+0x254>
 8110714:	2301      	movs	r3, #1
 8110716:	e7f3      	b.n	8110700 <_dtoa_r+0x228>
 8110718:	2300      	movs	r3, #0
 811071a:	930b      	str	r3, [sp, #44]	@ 0x2c
 811071c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811071e:	18fb      	adds	r3, r7, r3
 8110720:	9300      	str	r3, [sp, #0]
 8110722:	3301      	adds	r3, #1
 8110724:	2b01      	cmp	r3, #1
 8110726:	9307      	str	r3, [sp, #28]
 8110728:	bfb8      	it	lt
 811072a:	2301      	movlt	r3, #1
 811072c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8110730:	2100      	movs	r1, #0
 8110732:	2204      	movs	r2, #4
 8110734:	f102 0514 	add.w	r5, r2, #20
 8110738:	429d      	cmp	r5, r3
 811073a:	d91f      	bls.n	811077c <_dtoa_r+0x2a4>
 811073c:	6041      	str	r1, [r0, #4]
 811073e:	4658      	mov	r0, fp
 8110740:	f000 fd8e 	bl	8111260 <_Balloc>
 8110744:	4682      	mov	sl, r0
 8110746:	2800      	cmp	r0, #0
 8110748:	d13c      	bne.n	81107c4 <_dtoa_r+0x2ec>
 811074a:	4b1b      	ldr	r3, [pc, #108]	@ (81107b8 <_dtoa_r+0x2e0>)
 811074c:	4602      	mov	r2, r0
 811074e:	f240 11af 	movw	r1, #431	@ 0x1af
 8110752:	e6d8      	b.n	8110506 <_dtoa_r+0x2e>
 8110754:	2301      	movs	r3, #1
 8110756:	e7e0      	b.n	811071a <_dtoa_r+0x242>
 8110758:	2401      	movs	r4, #1
 811075a:	2300      	movs	r3, #0
 811075c:	9309      	str	r3, [sp, #36]	@ 0x24
 811075e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8110760:	f04f 33ff 	mov.w	r3, #4294967295
 8110764:	9300      	str	r3, [sp, #0]
 8110766:	9307      	str	r3, [sp, #28]
 8110768:	2200      	movs	r2, #0
 811076a:	2312      	movs	r3, #18
 811076c:	e7d0      	b.n	8110710 <_dtoa_r+0x238>
 811076e:	2301      	movs	r3, #1
 8110770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110772:	e7f5      	b.n	8110760 <_dtoa_r+0x288>
 8110774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110776:	9300      	str	r3, [sp, #0]
 8110778:	9307      	str	r3, [sp, #28]
 811077a:	e7d7      	b.n	811072c <_dtoa_r+0x254>
 811077c:	3101      	adds	r1, #1
 811077e:	0052      	lsls	r2, r2, #1
 8110780:	e7d8      	b.n	8110734 <_dtoa_r+0x25c>
 8110782:	bf00      	nop
 8110784:	f3af 8000 	nop.w
 8110788:	636f4361 	.word	0x636f4361
 811078c:	3fd287a7 	.word	0x3fd287a7
 8110790:	8b60c8b3 	.word	0x8b60c8b3
 8110794:	3fc68a28 	.word	0x3fc68a28
 8110798:	509f79fb 	.word	0x509f79fb
 811079c:	3fd34413 	.word	0x3fd34413
 81107a0:	081139b0 	.word	0x081139b0
 81107a4:	08113aa1 	.word	0x08113aa1
 81107a8:	7ff00000 	.word	0x7ff00000
 81107ac:	08113a30 	.word	0x08113a30
 81107b0:	3ff80000 	.word	0x3ff80000
 81107b4:	08113b98 	.word	0x08113b98
 81107b8:	08113af9 	.word	0x08113af9
 81107bc:	08113a9d 	.word	0x08113a9d
 81107c0:	08113a2f 	.word	0x08113a2f
 81107c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 81107c8:	6018      	str	r0, [r3, #0]
 81107ca:	9b07      	ldr	r3, [sp, #28]
 81107cc:	2b0e      	cmp	r3, #14
 81107ce:	f200 80a4 	bhi.w	811091a <_dtoa_r+0x442>
 81107d2:	2c00      	cmp	r4, #0
 81107d4:	f000 80a1 	beq.w	811091a <_dtoa_r+0x442>
 81107d8:	2f00      	cmp	r7, #0
 81107da:	dd33      	ble.n	8110844 <_dtoa_r+0x36c>
 81107dc:	4bad      	ldr	r3, [pc, #692]	@ (8110a94 <_dtoa_r+0x5bc>)
 81107de:	f007 020f 	and.w	r2, r7, #15
 81107e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81107e6:	ed93 7b00 	vldr	d7, [r3]
 81107ea:	05f8      	lsls	r0, r7, #23
 81107ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 81107f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 81107f4:	d516      	bpl.n	8110824 <_dtoa_r+0x34c>
 81107f6:	4ba8      	ldr	r3, [pc, #672]	@ (8110a98 <_dtoa_r+0x5c0>)
 81107f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81107fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8110800:	f7f0 f8ac 	bl	810095c <__aeabi_ddiv>
 8110804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110808:	f004 040f 	and.w	r4, r4, #15
 811080c:	2603      	movs	r6, #3
 811080e:	4da2      	ldr	r5, [pc, #648]	@ (8110a98 <_dtoa_r+0x5c0>)
 8110810:	b954      	cbnz	r4, 8110828 <_dtoa_r+0x350>
 8110812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 811081a:	f7f0 f89f 	bl	810095c <__aeabi_ddiv>
 811081e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110822:	e028      	b.n	8110876 <_dtoa_r+0x39e>
 8110824:	2602      	movs	r6, #2
 8110826:	e7f2      	b.n	811080e <_dtoa_r+0x336>
 8110828:	07e1      	lsls	r1, r4, #31
 811082a:	d508      	bpl.n	811083e <_dtoa_r+0x366>
 811082c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8110834:	f7ef ff68 	bl	8100708 <__aeabi_dmul>
 8110838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 811083c:	3601      	adds	r6, #1
 811083e:	1064      	asrs	r4, r4, #1
 8110840:	3508      	adds	r5, #8
 8110842:	e7e5      	b.n	8110810 <_dtoa_r+0x338>
 8110844:	f000 80d2 	beq.w	81109ec <_dtoa_r+0x514>
 8110848:	427c      	negs	r4, r7
 811084a:	4b92      	ldr	r3, [pc, #584]	@ (8110a94 <_dtoa_r+0x5bc>)
 811084c:	4d92      	ldr	r5, [pc, #584]	@ (8110a98 <_dtoa_r+0x5c0>)
 811084e:	f004 020f 	and.w	r2, r4, #15
 8110852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8110856:	e9d3 2300 	ldrd	r2, r3, [r3]
 811085a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811085e:	f7ef ff53 	bl	8100708 <__aeabi_dmul>
 8110862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110866:	1124      	asrs	r4, r4, #4
 8110868:	2300      	movs	r3, #0
 811086a:	2602      	movs	r6, #2
 811086c:	2c00      	cmp	r4, #0
 811086e:	f040 80b2 	bne.w	81109d6 <_dtoa_r+0x4fe>
 8110872:	2b00      	cmp	r3, #0
 8110874:	d1d3      	bne.n	811081e <_dtoa_r+0x346>
 8110876:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8110878:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 811087c:	2b00      	cmp	r3, #0
 811087e:	f000 80b7 	beq.w	81109f0 <_dtoa_r+0x518>
 8110882:	4b86      	ldr	r3, [pc, #536]	@ (8110a9c <_dtoa_r+0x5c4>)
 8110884:	2200      	movs	r2, #0
 8110886:	4620      	mov	r0, r4
 8110888:	4629      	mov	r1, r5
 811088a:	f7f0 f9af 	bl	8100bec <__aeabi_dcmplt>
 811088e:	2800      	cmp	r0, #0
 8110890:	f000 80ae 	beq.w	81109f0 <_dtoa_r+0x518>
 8110894:	9b07      	ldr	r3, [sp, #28]
 8110896:	2b00      	cmp	r3, #0
 8110898:	f000 80aa 	beq.w	81109f0 <_dtoa_r+0x518>
 811089c:	9b00      	ldr	r3, [sp, #0]
 811089e:	2b00      	cmp	r3, #0
 81108a0:	dd37      	ble.n	8110912 <_dtoa_r+0x43a>
 81108a2:	1e7b      	subs	r3, r7, #1
 81108a4:	9304      	str	r3, [sp, #16]
 81108a6:	4620      	mov	r0, r4
 81108a8:	4b7d      	ldr	r3, [pc, #500]	@ (8110aa0 <_dtoa_r+0x5c8>)
 81108aa:	2200      	movs	r2, #0
 81108ac:	4629      	mov	r1, r5
 81108ae:	f7ef ff2b 	bl	8100708 <__aeabi_dmul>
 81108b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81108b6:	9c00      	ldr	r4, [sp, #0]
 81108b8:	3601      	adds	r6, #1
 81108ba:	4630      	mov	r0, r6
 81108bc:	f7ef feba 	bl	8100634 <__aeabi_i2d>
 81108c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81108c4:	f7ef ff20 	bl	8100708 <__aeabi_dmul>
 81108c8:	4b76      	ldr	r3, [pc, #472]	@ (8110aa4 <_dtoa_r+0x5cc>)
 81108ca:	2200      	movs	r2, #0
 81108cc:	f7ef fd66 	bl	810039c <__adddf3>
 81108d0:	4605      	mov	r5, r0
 81108d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 81108d6:	2c00      	cmp	r4, #0
 81108d8:	f040 808d 	bne.w	81109f6 <_dtoa_r+0x51e>
 81108dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81108e0:	4b71      	ldr	r3, [pc, #452]	@ (8110aa8 <_dtoa_r+0x5d0>)
 81108e2:	2200      	movs	r2, #0
 81108e4:	f7ef fd58 	bl	8100398 <__aeabi_dsub>
 81108e8:	4602      	mov	r2, r0
 81108ea:	460b      	mov	r3, r1
 81108ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81108f0:	462a      	mov	r2, r5
 81108f2:	4633      	mov	r3, r6
 81108f4:	f7f0 f998 	bl	8100c28 <__aeabi_dcmpgt>
 81108f8:	2800      	cmp	r0, #0
 81108fa:	f040 828b 	bne.w	8110e14 <_dtoa_r+0x93c>
 81108fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110902:	462a      	mov	r2, r5
 8110904:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8110908:	f7f0 f970 	bl	8100bec <__aeabi_dcmplt>
 811090c:	2800      	cmp	r0, #0
 811090e:	f040 8128 	bne.w	8110b62 <_dtoa_r+0x68a>
 8110912:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8110916:	e9cd 3402 	strd	r3, r4, [sp, #8]
 811091a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 811091c:	2b00      	cmp	r3, #0
 811091e:	f2c0 815a 	blt.w	8110bd6 <_dtoa_r+0x6fe>
 8110922:	2f0e      	cmp	r7, #14
 8110924:	f300 8157 	bgt.w	8110bd6 <_dtoa_r+0x6fe>
 8110928:	4b5a      	ldr	r3, [pc, #360]	@ (8110a94 <_dtoa_r+0x5bc>)
 811092a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 811092e:	ed93 7b00 	vldr	d7, [r3]
 8110932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110934:	2b00      	cmp	r3, #0
 8110936:	ed8d 7b00 	vstr	d7, [sp]
 811093a:	da03      	bge.n	8110944 <_dtoa_r+0x46c>
 811093c:	9b07      	ldr	r3, [sp, #28]
 811093e:	2b00      	cmp	r3, #0
 8110940:	f340 8101 	ble.w	8110b46 <_dtoa_r+0x66e>
 8110944:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8110948:	4656      	mov	r6, sl
 811094a:	e9dd 2300 	ldrd	r2, r3, [sp]
 811094e:	4620      	mov	r0, r4
 8110950:	4629      	mov	r1, r5
 8110952:	f7f0 f803 	bl	810095c <__aeabi_ddiv>
 8110956:	f7f0 f987 	bl	8100c68 <__aeabi_d2iz>
 811095a:	4680      	mov	r8, r0
 811095c:	f7ef fe6a 	bl	8100634 <__aeabi_i2d>
 8110960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110964:	f7ef fed0 	bl	8100708 <__aeabi_dmul>
 8110968:	4602      	mov	r2, r0
 811096a:	460b      	mov	r3, r1
 811096c:	4620      	mov	r0, r4
 811096e:	4629      	mov	r1, r5
 8110970:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8110974:	f7ef fd10 	bl	8100398 <__aeabi_dsub>
 8110978:	f806 4b01 	strb.w	r4, [r6], #1
 811097c:	9d07      	ldr	r5, [sp, #28]
 811097e:	eba6 040a 	sub.w	r4, r6, sl
 8110982:	42a5      	cmp	r5, r4
 8110984:	4602      	mov	r2, r0
 8110986:	460b      	mov	r3, r1
 8110988:	f040 8117 	bne.w	8110bba <_dtoa_r+0x6e2>
 811098c:	f7ef fd06 	bl	810039c <__adddf3>
 8110990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110994:	4604      	mov	r4, r0
 8110996:	460d      	mov	r5, r1
 8110998:	f7f0 f946 	bl	8100c28 <__aeabi_dcmpgt>
 811099c:	2800      	cmp	r0, #0
 811099e:	f040 80f9 	bne.w	8110b94 <_dtoa_r+0x6bc>
 81109a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 81109a6:	4620      	mov	r0, r4
 81109a8:	4629      	mov	r1, r5
 81109aa:	f7f0 f915 	bl	8100bd8 <__aeabi_dcmpeq>
 81109ae:	b118      	cbz	r0, 81109b8 <_dtoa_r+0x4e0>
 81109b0:	f018 0f01 	tst.w	r8, #1
 81109b4:	f040 80ee 	bne.w	8110b94 <_dtoa_r+0x6bc>
 81109b8:	4649      	mov	r1, r9
 81109ba:	4658      	mov	r0, fp
 81109bc:	f000 fc90 	bl	81112e0 <_Bfree>
 81109c0:	2300      	movs	r3, #0
 81109c2:	7033      	strb	r3, [r6, #0]
 81109c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81109c6:	3701      	adds	r7, #1
 81109c8:	601f      	str	r7, [r3, #0]
 81109ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81109cc:	2b00      	cmp	r3, #0
 81109ce:	f000 831d 	beq.w	811100c <_dtoa_r+0xb34>
 81109d2:	601e      	str	r6, [r3, #0]
 81109d4:	e31a      	b.n	811100c <_dtoa_r+0xb34>
 81109d6:	07e2      	lsls	r2, r4, #31
 81109d8:	d505      	bpl.n	81109e6 <_dtoa_r+0x50e>
 81109da:	e9d5 2300 	ldrd	r2, r3, [r5]
 81109de:	f7ef fe93 	bl	8100708 <__aeabi_dmul>
 81109e2:	3601      	adds	r6, #1
 81109e4:	2301      	movs	r3, #1
 81109e6:	1064      	asrs	r4, r4, #1
 81109e8:	3508      	adds	r5, #8
 81109ea:	e73f      	b.n	811086c <_dtoa_r+0x394>
 81109ec:	2602      	movs	r6, #2
 81109ee:	e742      	b.n	8110876 <_dtoa_r+0x39e>
 81109f0:	9c07      	ldr	r4, [sp, #28]
 81109f2:	9704      	str	r7, [sp, #16]
 81109f4:	e761      	b.n	81108ba <_dtoa_r+0x3e2>
 81109f6:	4b27      	ldr	r3, [pc, #156]	@ (8110a94 <_dtoa_r+0x5bc>)
 81109f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 81109fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81109fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8110a02:	4454      	add	r4, sl
 8110a04:	2900      	cmp	r1, #0
 8110a06:	d053      	beq.n	8110ab0 <_dtoa_r+0x5d8>
 8110a08:	4928      	ldr	r1, [pc, #160]	@ (8110aac <_dtoa_r+0x5d4>)
 8110a0a:	2000      	movs	r0, #0
 8110a0c:	f7ef ffa6 	bl	810095c <__aeabi_ddiv>
 8110a10:	4633      	mov	r3, r6
 8110a12:	462a      	mov	r2, r5
 8110a14:	f7ef fcc0 	bl	8100398 <__aeabi_dsub>
 8110a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110a1c:	4656      	mov	r6, sl
 8110a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110a22:	f7f0 f921 	bl	8100c68 <__aeabi_d2iz>
 8110a26:	4605      	mov	r5, r0
 8110a28:	f7ef fe04 	bl	8100634 <__aeabi_i2d>
 8110a2c:	4602      	mov	r2, r0
 8110a2e:	460b      	mov	r3, r1
 8110a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110a34:	f7ef fcb0 	bl	8100398 <__aeabi_dsub>
 8110a38:	3530      	adds	r5, #48	@ 0x30
 8110a3a:	4602      	mov	r2, r0
 8110a3c:	460b      	mov	r3, r1
 8110a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110a42:	f806 5b01 	strb.w	r5, [r6], #1
 8110a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110a4a:	f7f0 f8cf 	bl	8100bec <__aeabi_dcmplt>
 8110a4e:	2800      	cmp	r0, #0
 8110a50:	d171      	bne.n	8110b36 <_dtoa_r+0x65e>
 8110a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110a56:	4911      	ldr	r1, [pc, #68]	@ (8110a9c <_dtoa_r+0x5c4>)
 8110a58:	2000      	movs	r0, #0
 8110a5a:	f7ef fc9d 	bl	8100398 <__aeabi_dsub>
 8110a5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110a62:	f7f0 f8c3 	bl	8100bec <__aeabi_dcmplt>
 8110a66:	2800      	cmp	r0, #0
 8110a68:	f040 8095 	bne.w	8110b96 <_dtoa_r+0x6be>
 8110a6c:	42a6      	cmp	r6, r4
 8110a6e:	f43f af50 	beq.w	8110912 <_dtoa_r+0x43a>
 8110a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8110a76:	4b0a      	ldr	r3, [pc, #40]	@ (8110aa0 <_dtoa_r+0x5c8>)
 8110a78:	2200      	movs	r2, #0
 8110a7a:	f7ef fe45 	bl	8100708 <__aeabi_dmul>
 8110a7e:	4b08      	ldr	r3, [pc, #32]	@ (8110aa0 <_dtoa_r+0x5c8>)
 8110a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110a84:	2200      	movs	r2, #0
 8110a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110a8a:	f7ef fe3d 	bl	8100708 <__aeabi_dmul>
 8110a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110a92:	e7c4      	b.n	8110a1e <_dtoa_r+0x546>
 8110a94:	08113b98 	.word	0x08113b98
 8110a98:	08113b70 	.word	0x08113b70
 8110a9c:	3ff00000 	.word	0x3ff00000
 8110aa0:	40240000 	.word	0x40240000
 8110aa4:	401c0000 	.word	0x401c0000
 8110aa8:	40140000 	.word	0x40140000
 8110aac:	3fe00000 	.word	0x3fe00000
 8110ab0:	4631      	mov	r1, r6
 8110ab2:	4628      	mov	r0, r5
 8110ab4:	f7ef fe28 	bl	8100708 <__aeabi_dmul>
 8110ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110abc:	9415      	str	r4, [sp, #84]	@ 0x54
 8110abe:	4656      	mov	r6, sl
 8110ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110ac4:	f7f0 f8d0 	bl	8100c68 <__aeabi_d2iz>
 8110ac8:	4605      	mov	r5, r0
 8110aca:	f7ef fdb3 	bl	8100634 <__aeabi_i2d>
 8110ace:	4602      	mov	r2, r0
 8110ad0:	460b      	mov	r3, r1
 8110ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110ad6:	f7ef fc5f 	bl	8100398 <__aeabi_dsub>
 8110ada:	3530      	adds	r5, #48	@ 0x30
 8110adc:	f806 5b01 	strb.w	r5, [r6], #1
 8110ae0:	4602      	mov	r2, r0
 8110ae2:	460b      	mov	r3, r1
 8110ae4:	42a6      	cmp	r6, r4
 8110ae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110aea:	f04f 0200 	mov.w	r2, #0
 8110aee:	d124      	bne.n	8110b3a <_dtoa_r+0x662>
 8110af0:	4bac      	ldr	r3, [pc, #688]	@ (8110da4 <_dtoa_r+0x8cc>)
 8110af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8110af6:	f7ef fc51 	bl	810039c <__adddf3>
 8110afa:	4602      	mov	r2, r0
 8110afc:	460b      	mov	r3, r1
 8110afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110b02:	f7f0 f891 	bl	8100c28 <__aeabi_dcmpgt>
 8110b06:	2800      	cmp	r0, #0
 8110b08:	d145      	bne.n	8110b96 <_dtoa_r+0x6be>
 8110b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110b0e:	49a5      	ldr	r1, [pc, #660]	@ (8110da4 <_dtoa_r+0x8cc>)
 8110b10:	2000      	movs	r0, #0
 8110b12:	f7ef fc41 	bl	8100398 <__aeabi_dsub>
 8110b16:	4602      	mov	r2, r0
 8110b18:	460b      	mov	r3, r1
 8110b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110b1e:	f7f0 f865 	bl	8100bec <__aeabi_dcmplt>
 8110b22:	2800      	cmp	r0, #0
 8110b24:	f43f aef5 	beq.w	8110912 <_dtoa_r+0x43a>
 8110b28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8110b2a:	1e73      	subs	r3, r6, #1
 8110b2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8110b2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8110b32:	2b30      	cmp	r3, #48	@ 0x30
 8110b34:	d0f8      	beq.n	8110b28 <_dtoa_r+0x650>
 8110b36:	9f04      	ldr	r7, [sp, #16]
 8110b38:	e73e      	b.n	81109b8 <_dtoa_r+0x4e0>
 8110b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8110da8 <_dtoa_r+0x8d0>)
 8110b3c:	f7ef fde4 	bl	8100708 <__aeabi_dmul>
 8110b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110b44:	e7bc      	b.n	8110ac0 <_dtoa_r+0x5e8>
 8110b46:	d10c      	bne.n	8110b62 <_dtoa_r+0x68a>
 8110b48:	4b98      	ldr	r3, [pc, #608]	@ (8110dac <_dtoa_r+0x8d4>)
 8110b4a:	2200      	movs	r2, #0
 8110b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110b50:	f7ef fdda 	bl	8100708 <__aeabi_dmul>
 8110b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110b58:	f7f0 f85c 	bl	8100c14 <__aeabi_dcmpge>
 8110b5c:	2800      	cmp	r0, #0
 8110b5e:	f000 8157 	beq.w	8110e10 <_dtoa_r+0x938>
 8110b62:	2400      	movs	r4, #0
 8110b64:	4625      	mov	r5, r4
 8110b66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110b68:	43db      	mvns	r3, r3
 8110b6a:	9304      	str	r3, [sp, #16]
 8110b6c:	4656      	mov	r6, sl
 8110b6e:	2700      	movs	r7, #0
 8110b70:	4621      	mov	r1, r4
 8110b72:	4658      	mov	r0, fp
 8110b74:	f000 fbb4 	bl	81112e0 <_Bfree>
 8110b78:	2d00      	cmp	r5, #0
 8110b7a:	d0dc      	beq.n	8110b36 <_dtoa_r+0x65e>
 8110b7c:	b12f      	cbz	r7, 8110b8a <_dtoa_r+0x6b2>
 8110b7e:	42af      	cmp	r7, r5
 8110b80:	d003      	beq.n	8110b8a <_dtoa_r+0x6b2>
 8110b82:	4639      	mov	r1, r7
 8110b84:	4658      	mov	r0, fp
 8110b86:	f000 fbab 	bl	81112e0 <_Bfree>
 8110b8a:	4629      	mov	r1, r5
 8110b8c:	4658      	mov	r0, fp
 8110b8e:	f000 fba7 	bl	81112e0 <_Bfree>
 8110b92:	e7d0      	b.n	8110b36 <_dtoa_r+0x65e>
 8110b94:	9704      	str	r7, [sp, #16]
 8110b96:	4633      	mov	r3, r6
 8110b98:	461e      	mov	r6, r3
 8110b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110b9e:	2a39      	cmp	r2, #57	@ 0x39
 8110ba0:	d107      	bne.n	8110bb2 <_dtoa_r+0x6da>
 8110ba2:	459a      	cmp	sl, r3
 8110ba4:	d1f8      	bne.n	8110b98 <_dtoa_r+0x6c0>
 8110ba6:	9a04      	ldr	r2, [sp, #16]
 8110ba8:	3201      	adds	r2, #1
 8110baa:	9204      	str	r2, [sp, #16]
 8110bac:	2230      	movs	r2, #48	@ 0x30
 8110bae:	f88a 2000 	strb.w	r2, [sl]
 8110bb2:	781a      	ldrb	r2, [r3, #0]
 8110bb4:	3201      	adds	r2, #1
 8110bb6:	701a      	strb	r2, [r3, #0]
 8110bb8:	e7bd      	b.n	8110b36 <_dtoa_r+0x65e>
 8110bba:	4b7b      	ldr	r3, [pc, #492]	@ (8110da8 <_dtoa_r+0x8d0>)
 8110bbc:	2200      	movs	r2, #0
 8110bbe:	f7ef fda3 	bl	8100708 <__aeabi_dmul>
 8110bc2:	2200      	movs	r2, #0
 8110bc4:	2300      	movs	r3, #0
 8110bc6:	4604      	mov	r4, r0
 8110bc8:	460d      	mov	r5, r1
 8110bca:	f7f0 f805 	bl	8100bd8 <__aeabi_dcmpeq>
 8110bce:	2800      	cmp	r0, #0
 8110bd0:	f43f aebb 	beq.w	811094a <_dtoa_r+0x472>
 8110bd4:	e6f0      	b.n	81109b8 <_dtoa_r+0x4e0>
 8110bd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8110bd8:	2a00      	cmp	r2, #0
 8110bda:	f000 80db 	beq.w	8110d94 <_dtoa_r+0x8bc>
 8110bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8110be0:	2a01      	cmp	r2, #1
 8110be2:	f300 80bf 	bgt.w	8110d64 <_dtoa_r+0x88c>
 8110be6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8110be8:	2a00      	cmp	r2, #0
 8110bea:	f000 80b7 	beq.w	8110d5c <_dtoa_r+0x884>
 8110bee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8110bf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8110bf4:	4646      	mov	r6, r8
 8110bf6:	9a08      	ldr	r2, [sp, #32]
 8110bf8:	2101      	movs	r1, #1
 8110bfa:	441a      	add	r2, r3
 8110bfc:	4658      	mov	r0, fp
 8110bfe:	4498      	add	r8, r3
 8110c00:	9208      	str	r2, [sp, #32]
 8110c02:	f000 fc6b 	bl	81114dc <__i2b>
 8110c06:	4605      	mov	r5, r0
 8110c08:	b15e      	cbz	r6, 8110c22 <_dtoa_r+0x74a>
 8110c0a:	9b08      	ldr	r3, [sp, #32]
 8110c0c:	2b00      	cmp	r3, #0
 8110c0e:	dd08      	ble.n	8110c22 <_dtoa_r+0x74a>
 8110c10:	42b3      	cmp	r3, r6
 8110c12:	9a08      	ldr	r2, [sp, #32]
 8110c14:	bfa8      	it	ge
 8110c16:	4633      	movge	r3, r6
 8110c18:	eba8 0803 	sub.w	r8, r8, r3
 8110c1c:	1af6      	subs	r6, r6, r3
 8110c1e:	1ad3      	subs	r3, r2, r3
 8110c20:	9308      	str	r3, [sp, #32]
 8110c22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110c24:	b1f3      	cbz	r3, 8110c64 <_dtoa_r+0x78c>
 8110c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110c28:	2b00      	cmp	r3, #0
 8110c2a:	f000 80b7 	beq.w	8110d9c <_dtoa_r+0x8c4>
 8110c2e:	b18c      	cbz	r4, 8110c54 <_dtoa_r+0x77c>
 8110c30:	4629      	mov	r1, r5
 8110c32:	4622      	mov	r2, r4
 8110c34:	4658      	mov	r0, fp
 8110c36:	f000 fd11 	bl	811165c <__pow5mult>
 8110c3a:	464a      	mov	r2, r9
 8110c3c:	4601      	mov	r1, r0
 8110c3e:	4605      	mov	r5, r0
 8110c40:	4658      	mov	r0, fp
 8110c42:	f000 fc61 	bl	8111508 <__multiply>
 8110c46:	4649      	mov	r1, r9
 8110c48:	9004      	str	r0, [sp, #16]
 8110c4a:	4658      	mov	r0, fp
 8110c4c:	f000 fb48 	bl	81112e0 <_Bfree>
 8110c50:	9b04      	ldr	r3, [sp, #16]
 8110c52:	4699      	mov	r9, r3
 8110c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110c56:	1b1a      	subs	r2, r3, r4
 8110c58:	d004      	beq.n	8110c64 <_dtoa_r+0x78c>
 8110c5a:	4649      	mov	r1, r9
 8110c5c:	4658      	mov	r0, fp
 8110c5e:	f000 fcfd 	bl	811165c <__pow5mult>
 8110c62:	4681      	mov	r9, r0
 8110c64:	2101      	movs	r1, #1
 8110c66:	4658      	mov	r0, fp
 8110c68:	f000 fc38 	bl	81114dc <__i2b>
 8110c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110c6e:	4604      	mov	r4, r0
 8110c70:	2b00      	cmp	r3, #0
 8110c72:	f000 81cf 	beq.w	8111014 <_dtoa_r+0xb3c>
 8110c76:	461a      	mov	r2, r3
 8110c78:	4601      	mov	r1, r0
 8110c7a:	4658      	mov	r0, fp
 8110c7c:	f000 fcee 	bl	811165c <__pow5mult>
 8110c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110c82:	2b01      	cmp	r3, #1
 8110c84:	4604      	mov	r4, r0
 8110c86:	f300 8095 	bgt.w	8110db4 <_dtoa_r+0x8dc>
 8110c8a:	9b02      	ldr	r3, [sp, #8]
 8110c8c:	2b00      	cmp	r3, #0
 8110c8e:	f040 8087 	bne.w	8110da0 <_dtoa_r+0x8c8>
 8110c92:	9b03      	ldr	r3, [sp, #12]
 8110c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110c98:	2b00      	cmp	r3, #0
 8110c9a:	f040 8089 	bne.w	8110db0 <_dtoa_r+0x8d8>
 8110c9e:	9b03      	ldr	r3, [sp, #12]
 8110ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8110ca4:	0d1b      	lsrs	r3, r3, #20
 8110ca6:	051b      	lsls	r3, r3, #20
 8110ca8:	b12b      	cbz	r3, 8110cb6 <_dtoa_r+0x7de>
 8110caa:	9b08      	ldr	r3, [sp, #32]
 8110cac:	3301      	adds	r3, #1
 8110cae:	9308      	str	r3, [sp, #32]
 8110cb0:	f108 0801 	add.w	r8, r8, #1
 8110cb4:	2301      	movs	r3, #1
 8110cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8110cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110cba:	2b00      	cmp	r3, #0
 8110cbc:	f000 81b0 	beq.w	8111020 <_dtoa_r+0xb48>
 8110cc0:	6923      	ldr	r3, [r4, #16]
 8110cc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8110cc6:	6918      	ldr	r0, [r3, #16]
 8110cc8:	f000 fbbc 	bl	8111444 <__hi0bits>
 8110ccc:	f1c0 0020 	rsb	r0, r0, #32
 8110cd0:	9b08      	ldr	r3, [sp, #32]
 8110cd2:	4418      	add	r0, r3
 8110cd4:	f010 001f 	ands.w	r0, r0, #31
 8110cd8:	d077      	beq.n	8110dca <_dtoa_r+0x8f2>
 8110cda:	f1c0 0320 	rsb	r3, r0, #32
 8110cde:	2b04      	cmp	r3, #4
 8110ce0:	dd6b      	ble.n	8110dba <_dtoa_r+0x8e2>
 8110ce2:	9b08      	ldr	r3, [sp, #32]
 8110ce4:	f1c0 001c 	rsb	r0, r0, #28
 8110ce8:	4403      	add	r3, r0
 8110cea:	4480      	add	r8, r0
 8110cec:	4406      	add	r6, r0
 8110cee:	9308      	str	r3, [sp, #32]
 8110cf0:	f1b8 0f00 	cmp.w	r8, #0
 8110cf4:	dd05      	ble.n	8110d02 <_dtoa_r+0x82a>
 8110cf6:	4649      	mov	r1, r9
 8110cf8:	4642      	mov	r2, r8
 8110cfa:	4658      	mov	r0, fp
 8110cfc:	f000 fd08 	bl	8111710 <__lshift>
 8110d00:	4681      	mov	r9, r0
 8110d02:	9b08      	ldr	r3, [sp, #32]
 8110d04:	2b00      	cmp	r3, #0
 8110d06:	dd05      	ble.n	8110d14 <_dtoa_r+0x83c>
 8110d08:	4621      	mov	r1, r4
 8110d0a:	461a      	mov	r2, r3
 8110d0c:	4658      	mov	r0, fp
 8110d0e:	f000 fcff 	bl	8111710 <__lshift>
 8110d12:	4604      	mov	r4, r0
 8110d14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8110d16:	2b00      	cmp	r3, #0
 8110d18:	d059      	beq.n	8110dce <_dtoa_r+0x8f6>
 8110d1a:	4621      	mov	r1, r4
 8110d1c:	4648      	mov	r0, r9
 8110d1e:	f000 fd63 	bl	81117e8 <__mcmp>
 8110d22:	2800      	cmp	r0, #0
 8110d24:	da53      	bge.n	8110dce <_dtoa_r+0x8f6>
 8110d26:	1e7b      	subs	r3, r7, #1
 8110d28:	9304      	str	r3, [sp, #16]
 8110d2a:	4649      	mov	r1, r9
 8110d2c:	2300      	movs	r3, #0
 8110d2e:	220a      	movs	r2, #10
 8110d30:	4658      	mov	r0, fp
 8110d32:	f000 faf7 	bl	8111324 <__multadd>
 8110d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110d38:	4681      	mov	r9, r0
 8110d3a:	2b00      	cmp	r3, #0
 8110d3c:	f000 8172 	beq.w	8111024 <_dtoa_r+0xb4c>
 8110d40:	2300      	movs	r3, #0
 8110d42:	4629      	mov	r1, r5
 8110d44:	220a      	movs	r2, #10
 8110d46:	4658      	mov	r0, fp
 8110d48:	f000 faec 	bl	8111324 <__multadd>
 8110d4c:	9b00      	ldr	r3, [sp, #0]
 8110d4e:	2b00      	cmp	r3, #0
 8110d50:	4605      	mov	r5, r0
 8110d52:	dc67      	bgt.n	8110e24 <_dtoa_r+0x94c>
 8110d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110d56:	2b02      	cmp	r3, #2
 8110d58:	dc41      	bgt.n	8110dde <_dtoa_r+0x906>
 8110d5a:	e063      	b.n	8110e24 <_dtoa_r+0x94c>
 8110d5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8110d5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8110d62:	e746      	b.n	8110bf2 <_dtoa_r+0x71a>
 8110d64:	9b07      	ldr	r3, [sp, #28]
 8110d66:	1e5c      	subs	r4, r3, #1
 8110d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110d6a:	42a3      	cmp	r3, r4
 8110d6c:	bfbf      	itttt	lt
 8110d6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8110d70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8110d72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8110d74:	1ae3      	sublt	r3, r4, r3
 8110d76:	bfb4      	ite	lt
 8110d78:	18d2      	addlt	r2, r2, r3
 8110d7a:	1b1c      	subge	r4, r3, r4
 8110d7c:	9b07      	ldr	r3, [sp, #28]
 8110d7e:	bfbc      	itt	lt
 8110d80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8110d82:	2400      	movlt	r4, #0
 8110d84:	2b00      	cmp	r3, #0
 8110d86:	bfb5      	itete	lt
 8110d88:	eba8 0603 	sublt.w	r6, r8, r3
 8110d8c:	9b07      	ldrge	r3, [sp, #28]
 8110d8e:	2300      	movlt	r3, #0
 8110d90:	4646      	movge	r6, r8
 8110d92:	e730      	b.n	8110bf6 <_dtoa_r+0x71e>
 8110d94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8110d96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8110d98:	4646      	mov	r6, r8
 8110d9a:	e735      	b.n	8110c08 <_dtoa_r+0x730>
 8110d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8110d9e:	e75c      	b.n	8110c5a <_dtoa_r+0x782>
 8110da0:	2300      	movs	r3, #0
 8110da2:	e788      	b.n	8110cb6 <_dtoa_r+0x7de>
 8110da4:	3fe00000 	.word	0x3fe00000
 8110da8:	40240000 	.word	0x40240000
 8110dac:	40140000 	.word	0x40140000
 8110db0:	9b02      	ldr	r3, [sp, #8]
 8110db2:	e780      	b.n	8110cb6 <_dtoa_r+0x7de>
 8110db4:	2300      	movs	r3, #0
 8110db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8110db8:	e782      	b.n	8110cc0 <_dtoa_r+0x7e8>
 8110dba:	d099      	beq.n	8110cf0 <_dtoa_r+0x818>
 8110dbc:	9a08      	ldr	r2, [sp, #32]
 8110dbe:	331c      	adds	r3, #28
 8110dc0:	441a      	add	r2, r3
 8110dc2:	4498      	add	r8, r3
 8110dc4:	441e      	add	r6, r3
 8110dc6:	9208      	str	r2, [sp, #32]
 8110dc8:	e792      	b.n	8110cf0 <_dtoa_r+0x818>
 8110dca:	4603      	mov	r3, r0
 8110dcc:	e7f6      	b.n	8110dbc <_dtoa_r+0x8e4>
 8110dce:	9b07      	ldr	r3, [sp, #28]
 8110dd0:	9704      	str	r7, [sp, #16]
 8110dd2:	2b00      	cmp	r3, #0
 8110dd4:	dc20      	bgt.n	8110e18 <_dtoa_r+0x940>
 8110dd6:	9300      	str	r3, [sp, #0]
 8110dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110dda:	2b02      	cmp	r3, #2
 8110ddc:	dd1e      	ble.n	8110e1c <_dtoa_r+0x944>
 8110dde:	9b00      	ldr	r3, [sp, #0]
 8110de0:	2b00      	cmp	r3, #0
 8110de2:	f47f aec0 	bne.w	8110b66 <_dtoa_r+0x68e>
 8110de6:	4621      	mov	r1, r4
 8110de8:	2205      	movs	r2, #5
 8110dea:	4658      	mov	r0, fp
 8110dec:	f000 fa9a 	bl	8111324 <__multadd>
 8110df0:	4601      	mov	r1, r0
 8110df2:	4604      	mov	r4, r0
 8110df4:	4648      	mov	r0, r9
 8110df6:	f000 fcf7 	bl	81117e8 <__mcmp>
 8110dfa:	2800      	cmp	r0, #0
 8110dfc:	f77f aeb3 	ble.w	8110b66 <_dtoa_r+0x68e>
 8110e00:	4656      	mov	r6, sl
 8110e02:	2331      	movs	r3, #49	@ 0x31
 8110e04:	f806 3b01 	strb.w	r3, [r6], #1
 8110e08:	9b04      	ldr	r3, [sp, #16]
 8110e0a:	3301      	adds	r3, #1
 8110e0c:	9304      	str	r3, [sp, #16]
 8110e0e:	e6ae      	b.n	8110b6e <_dtoa_r+0x696>
 8110e10:	9c07      	ldr	r4, [sp, #28]
 8110e12:	9704      	str	r7, [sp, #16]
 8110e14:	4625      	mov	r5, r4
 8110e16:	e7f3      	b.n	8110e00 <_dtoa_r+0x928>
 8110e18:	9b07      	ldr	r3, [sp, #28]
 8110e1a:	9300      	str	r3, [sp, #0]
 8110e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110e1e:	2b00      	cmp	r3, #0
 8110e20:	f000 8104 	beq.w	811102c <_dtoa_r+0xb54>
 8110e24:	2e00      	cmp	r6, #0
 8110e26:	dd05      	ble.n	8110e34 <_dtoa_r+0x95c>
 8110e28:	4629      	mov	r1, r5
 8110e2a:	4632      	mov	r2, r6
 8110e2c:	4658      	mov	r0, fp
 8110e2e:	f000 fc6f 	bl	8111710 <__lshift>
 8110e32:	4605      	mov	r5, r0
 8110e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110e36:	2b00      	cmp	r3, #0
 8110e38:	d05a      	beq.n	8110ef0 <_dtoa_r+0xa18>
 8110e3a:	6869      	ldr	r1, [r5, #4]
 8110e3c:	4658      	mov	r0, fp
 8110e3e:	f000 fa0f 	bl	8111260 <_Balloc>
 8110e42:	4606      	mov	r6, r0
 8110e44:	b928      	cbnz	r0, 8110e52 <_dtoa_r+0x97a>
 8110e46:	4b84      	ldr	r3, [pc, #528]	@ (8111058 <_dtoa_r+0xb80>)
 8110e48:	4602      	mov	r2, r0
 8110e4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8110e4e:	f7ff bb5a 	b.w	8110506 <_dtoa_r+0x2e>
 8110e52:	692a      	ldr	r2, [r5, #16]
 8110e54:	3202      	adds	r2, #2
 8110e56:	0092      	lsls	r2, r2, #2
 8110e58:	f105 010c 	add.w	r1, r5, #12
 8110e5c:	300c      	adds	r0, #12
 8110e5e:	f7ff fa7e 	bl	811035e <memcpy>
 8110e62:	2201      	movs	r2, #1
 8110e64:	4631      	mov	r1, r6
 8110e66:	4658      	mov	r0, fp
 8110e68:	f000 fc52 	bl	8111710 <__lshift>
 8110e6c:	f10a 0301 	add.w	r3, sl, #1
 8110e70:	9307      	str	r3, [sp, #28]
 8110e72:	9b00      	ldr	r3, [sp, #0]
 8110e74:	4453      	add	r3, sl
 8110e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110e78:	9b02      	ldr	r3, [sp, #8]
 8110e7a:	f003 0301 	and.w	r3, r3, #1
 8110e7e:	462f      	mov	r7, r5
 8110e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8110e82:	4605      	mov	r5, r0
 8110e84:	9b07      	ldr	r3, [sp, #28]
 8110e86:	4621      	mov	r1, r4
 8110e88:	3b01      	subs	r3, #1
 8110e8a:	4648      	mov	r0, r9
 8110e8c:	9300      	str	r3, [sp, #0]
 8110e8e:	f7ff fa99 	bl	81103c4 <quorem>
 8110e92:	4639      	mov	r1, r7
 8110e94:	9002      	str	r0, [sp, #8]
 8110e96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8110e9a:	4648      	mov	r0, r9
 8110e9c:	f000 fca4 	bl	81117e8 <__mcmp>
 8110ea0:	462a      	mov	r2, r5
 8110ea2:	9008      	str	r0, [sp, #32]
 8110ea4:	4621      	mov	r1, r4
 8110ea6:	4658      	mov	r0, fp
 8110ea8:	f000 fcba 	bl	8111820 <__mdiff>
 8110eac:	68c2      	ldr	r2, [r0, #12]
 8110eae:	4606      	mov	r6, r0
 8110eb0:	bb02      	cbnz	r2, 8110ef4 <_dtoa_r+0xa1c>
 8110eb2:	4601      	mov	r1, r0
 8110eb4:	4648      	mov	r0, r9
 8110eb6:	f000 fc97 	bl	81117e8 <__mcmp>
 8110eba:	4602      	mov	r2, r0
 8110ebc:	4631      	mov	r1, r6
 8110ebe:	4658      	mov	r0, fp
 8110ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8110ec2:	f000 fa0d 	bl	81112e0 <_Bfree>
 8110ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110ec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8110eca:	9e07      	ldr	r6, [sp, #28]
 8110ecc:	ea43 0102 	orr.w	r1, r3, r2
 8110ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110ed2:	4319      	orrs	r1, r3
 8110ed4:	d110      	bne.n	8110ef8 <_dtoa_r+0xa20>
 8110ed6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8110eda:	d029      	beq.n	8110f30 <_dtoa_r+0xa58>
 8110edc:	9b08      	ldr	r3, [sp, #32]
 8110ede:	2b00      	cmp	r3, #0
 8110ee0:	dd02      	ble.n	8110ee8 <_dtoa_r+0xa10>
 8110ee2:	9b02      	ldr	r3, [sp, #8]
 8110ee4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8110ee8:	9b00      	ldr	r3, [sp, #0]
 8110eea:	f883 8000 	strb.w	r8, [r3]
 8110eee:	e63f      	b.n	8110b70 <_dtoa_r+0x698>
 8110ef0:	4628      	mov	r0, r5
 8110ef2:	e7bb      	b.n	8110e6c <_dtoa_r+0x994>
 8110ef4:	2201      	movs	r2, #1
 8110ef6:	e7e1      	b.n	8110ebc <_dtoa_r+0x9e4>
 8110ef8:	9b08      	ldr	r3, [sp, #32]
 8110efa:	2b00      	cmp	r3, #0
 8110efc:	db04      	blt.n	8110f08 <_dtoa_r+0xa30>
 8110efe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8110f00:	430b      	orrs	r3, r1
 8110f02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8110f04:	430b      	orrs	r3, r1
 8110f06:	d120      	bne.n	8110f4a <_dtoa_r+0xa72>
 8110f08:	2a00      	cmp	r2, #0
 8110f0a:	dded      	ble.n	8110ee8 <_dtoa_r+0xa10>
 8110f0c:	4649      	mov	r1, r9
 8110f0e:	2201      	movs	r2, #1
 8110f10:	4658      	mov	r0, fp
 8110f12:	f000 fbfd 	bl	8111710 <__lshift>
 8110f16:	4621      	mov	r1, r4
 8110f18:	4681      	mov	r9, r0
 8110f1a:	f000 fc65 	bl	81117e8 <__mcmp>
 8110f1e:	2800      	cmp	r0, #0
 8110f20:	dc03      	bgt.n	8110f2a <_dtoa_r+0xa52>
 8110f22:	d1e1      	bne.n	8110ee8 <_dtoa_r+0xa10>
 8110f24:	f018 0f01 	tst.w	r8, #1
 8110f28:	d0de      	beq.n	8110ee8 <_dtoa_r+0xa10>
 8110f2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8110f2e:	d1d8      	bne.n	8110ee2 <_dtoa_r+0xa0a>
 8110f30:	9a00      	ldr	r2, [sp, #0]
 8110f32:	2339      	movs	r3, #57	@ 0x39
 8110f34:	7013      	strb	r3, [r2, #0]
 8110f36:	4633      	mov	r3, r6
 8110f38:	461e      	mov	r6, r3
 8110f3a:	3b01      	subs	r3, #1
 8110f3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8110f40:	2a39      	cmp	r2, #57	@ 0x39
 8110f42:	d052      	beq.n	8110fea <_dtoa_r+0xb12>
 8110f44:	3201      	adds	r2, #1
 8110f46:	701a      	strb	r2, [r3, #0]
 8110f48:	e612      	b.n	8110b70 <_dtoa_r+0x698>
 8110f4a:	2a00      	cmp	r2, #0
 8110f4c:	dd07      	ble.n	8110f5e <_dtoa_r+0xa86>
 8110f4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8110f52:	d0ed      	beq.n	8110f30 <_dtoa_r+0xa58>
 8110f54:	9a00      	ldr	r2, [sp, #0]
 8110f56:	f108 0301 	add.w	r3, r8, #1
 8110f5a:	7013      	strb	r3, [r2, #0]
 8110f5c:	e608      	b.n	8110b70 <_dtoa_r+0x698>
 8110f5e:	9b07      	ldr	r3, [sp, #28]
 8110f60:	9a07      	ldr	r2, [sp, #28]
 8110f62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8110f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110f68:	4293      	cmp	r3, r2
 8110f6a:	d028      	beq.n	8110fbe <_dtoa_r+0xae6>
 8110f6c:	4649      	mov	r1, r9
 8110f6e:	2300      	movs	r3, #0
 8110f70:	220a      	movs	r2, #10
 8110f72:	4658      	mov	r0, fp
 8110f74:	f000 f9d6 	bl	8111324 <__multadd>
 8110f78:	42af      	cmp	r7, r5
 8110f7a:	4681      	mov	r9, r0
 8110f7c:	f04f 0300 	mov.w	r3, #0
 8110f80:	f04f 020a 	mov.w	r2, #10
 8110f84:	4639      	mov	r1, r7
 8110f86:	4658      	mov	r0, fp
 8110f88:	d107      	bne.n	8110f9a <_dtoa_r+0xac2>
 8110f8a:	f000 f9cb 	bl	8111324 <__multadd>
 8110f8e:	4607      	mov	r7, r0
 8110f90:	4605      	mov	r5, r0
 8110f92:	9b07      	ldr	r3, [sp, #28]
 8110f94:	3301      	adds	r3, #1
 8110f96:	9307      	str	r3, [sp, #28]
 8110f98:	e774      	b.n	8110e84 <_dtoa_r+0x9ac>
 8110f9a:	f000 f9c3 	bl	8111324 <__multadd>
 8110f9e:	4629      	mov	r1, r5
 8110fa0:	4607      	mov	r7, r0
 8110fa2:	2300      	movs	r3, #0
 8110fa4:	220a      	movs	r2, #10
 8110fa6:	4658      	mov	r0, fp
 8110fa8:	f000 f9bc 	bl	8111324 <__multadd>
 8110fac:	4605      	mov	r5, r0
 8110fae:	e7f0      	b.n	8110f92 <_dtoa_r+0xaba>
 8110fb0:	9b00      	ldr	r3, [sp, #0]
 8110fb2:	2b00      	cmp	r3, #0
 8110fb4:	bfcc      	ite	gt
 8110fb6:	461e      	movgt	r6, r3
 8110fb8:	2601      	movle	r6, #1
 8110fba:	4456      	add	r6, sl
 8110fbc:	2700      	movs	r7, #0
 8110fbe:	4649      	mov	r1, r9
 8110fc0:	2201      	movs	r2, #1
 8110fc2:	4658      	mov	r0, fp
 8110fc4:	f000 fba4 	bl	8111710 <__lshift>
 8110fc8:	4621      	mov	r1, r4
 8110fca:	4681      	mov	r9, r0
 8110fcc:	f000 fc0c 	bl	81117e8 <__mcmp>
 8110fd0:	2800      	cmp	r0, #0
 8110fd2:	dcb0      	bgt.n	8110f36 <_dtoa_r+0xa5e>
 8110fd4:	d102      	bne.n	8110fdc <_dtoa_r+0xb04>
 8110fd6:	f018 0f01 	tst.w	r8, #1
 8110fda:	d1ac      	bne.n	8110f36 <_dtoa_r+0xa5e>
 8110fdc:	4633      	mov	r3, r6
 8110fde:	461e      	mov	r6, r3
 8110fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110fe4:	2a30      	cmp	r2, #48	@ 0x30
 8110fe6:	d0fa      	beq.n	8110fde <_dtoa_r+0xb06>
 8110fe8:	e5c2      	b.n	8110b70 <_dtoa_r+0x698>
 8110fea:	459a      	cmp	sl, r3
 8110fec:	d1a4      	bne.n	8110f38 <_dtoa_r+0xa60>
 8110fee:	9b04      	ldr	r3, [sp, #16]
 8110ff0:	3301      	adds	r3, #1
 8110ff2:	9304      	str	r3, [sp, #16]
 8110ff4:	2331      	movs	r3, #49	@ 0x31
 8110ff6:	f88a 3000 	strb.w	r3, [sl]
 8110ffa:	e5b9      	b.n	8110b70 <_dtoa_r+0x698>
 8110ffc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8110ffe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 811105c <_dtoa_r+0xb84>
 8111002:	b11b      	cbz	r3, 811100c <_dtoa_r+0xb34>
 8111004:	f10a 0308 	add.w	r3, sl, #8
 8111008:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 811100a:	6013      	str	r3, [r2, #0]
 811100c:	4650      	mov	r0, sl
 811100e:	b019      	add	sp, #100	@ 0x64
 8111010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111016:	2b01      	cmp	r3, #1
 8111018:	f77f ae37 	ble.w	8110c8a <_dtoa_r+0x7b2>
 811101c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811101e:	930a      	str	r3, [sp, #40]	@ 0x28
 8111020:	2001      	movs	r0, #1
 8111022:	e655      	b.n	8110cd0 <_dtoa_r+0x7f8>
 8111024:	9b00      	ldr	r3, [sp, #0]
 8111026:	2b00      	cmp	r3, #0
 8111028:	f77f aed6 	ble.w	8110dd8 <_dtoa_r+0x900>
 811102c:	4656      	mov	r6, sl
 811102e:	4621      	mov	r1, r4
 8111030:	4648      	mov	r0, r9
 8111032:	f7ff f9c7 	bl	81103c4 <quorem>
 8111036:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 811103a:	f806 8b01 	strb.w	r8, [r6], #1
 811103e:	9b00      	ldr	r3, [sp, #0]
 8111040:	eba6 020a 	sub.w	r2, r6, sl
 8111044:	4293      	cmp	r3, r2
 8111046:	ddb3      	ble.n	8110fb0 <_dtoa_r+0xad8>
 8111048:	4649      	mov	r1, r9
 811104a:	2300      	movs	r3, #0
 811104c:	220a      	movs	r2, #10
 811104e:	4658      	mov	r0, fp
 8111050:	f000 f968 	bl	8111324 <__multadd>
 8111054:	4681      	mov	r9, r0
 8111056:	e7ea      	b.n	811102e <_dtoa_r+0xb56>
 8111058:	08113af9 	.word	0x08113af9
 811105c:	08113a94 	.word	0x08113a94

08111060 <_free_r>:
 8111060:	b538      	push	{r3, r4, r5, lr}
 8111062:	4605      	mov	r5, r0
 8111064:	2900      	cmp	r1, #0
 8111066:	d041      	beq.n	81110ec <_free_r+0x8c>
 8111068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811106c:	1f0c      	subs	r4, r1, #4
 811106e:	2b00      	cmp	r3, #0
 8111070:	bfb8      	it	lt
 8111072:	18e4      	addlt	r4, r4, r3
 8111074:	f000 f8e8 	bl	8111248 <__malloc_lock>
 8111078:	4a1d      	ldr	r2, [pc, #116]	@ (81110f0 <_free_r+0x90>)
 811107a:	6813      	ldr	r3, [r2, #0]
 811107c:	b933      	cbnz	r3, 811108c <_free_r+0x2c>
 811107e:	6063      	str	r3, [r4, #4]
 8111080:	6014      	str	r4, [r2, #0]
 8111082:	4628      	mov	r0, r5
 8111084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8111088:	f000 b8e4 	b.w	8111254 <__malloc_unlock>
 811108c:	42a3      	cmp	r3, r4
 811108e:	d908      	bls.n	81110a2 <_free_r+0x42>
 8111090:	6820      	ldr	r0, [r4, #0]
 8111092:	1821      	adds	r1, r4, r0
 8111094:	428b      	cmp	r3, r1
 8111096:	bf01      	itttt	eq
 8111098:	6819      	ldreq	r1, [r3, #0]
 811109a:	685b      	ldreq	r3, [r3, #4]
 811109c:	1809      	addeq	r1, r1, r0
 811109e:	6021      	streq	r1, [r4, #0]
 81110a0:	e7ed      	b.n	811107e <_free_r+0x1e>
 81110a2:	461a      	mov	r2, r3
 81110a4:	685b      	ldr	r3, [r3, #4]
 81110a6:	b10b      	cbz	r3, 81110ac <_free_r+0x4c>
 81110a8:	42a3      	cmp	r3, r4
 81110aa:	d9fa      	bls.n	81110a2 <_free_r+0x42>
 81110ac:	6811      	ldr	r1, [r2, #0]
 81110ae:	1850      	adds	r0, r2, r1
 81110b0:	42a0      	cmp	r0, r4
 81110b2:	d10b      	bne.n	81110cc <_free_r+0x6c>
 81110b4:	6820      	ldr	r0, [r4, #0]
 81110b6:	4401      	add	r1, r0
 81110b8:	1850      	adds	r0, r2, r1
 81110ba:	4283      	cmp	r3, r0
 81110bc:	6011      	str	r1, [r2, #0]
 81110be:	d1e0      	bne.n	8111082 <_free_r+0x22>
 81110c0:	6818      	ldr	r0, [r3, #0]
 81110c2:	685b      	ldr	r3, [r3, #4]
 81110c4:	6053      	str	r3, [r2, #4]
 81110c6:	4408      	add	r0, r1
 81110c8:	6010      	str	r0, [r2, #0]
 81110ca:	e7da      	b.n	8111082 <_free_r+0x22>
 81110cc:	d902      	bls.n	81110d4 <_free_r+0x74>
 81110ce:	230c      	movs	r3, #12
 81110d0:	602b      	str	r3, [r5, #0]
 81110d2:	e7d6      	b.n	8111082 <_free_r+0x22>
 81110d4:	6820      	ldr	r0, [r4, #0]
 81110d6:	1821      	adds	r1, r4, r0
 81110d8:	428b      	cmp	r3, r1
 81110da:	bf04      	itt	eq
 81110dc:	6819      	ldreq	r1, [r3, #0]
 81110de:	685b      	ldreq	r3, [r3, #4]
 81110e0:	6063      	str	r3, [r4, #4]
 81110e2:	bf04      	itt	eq
 81110e4:	1809      	addeq	r1, r1, r0
 81110e6:	6021      	streq	r1, [r4, #0]
 81110e8:	6054      	str	r4, [r2, #4]
 81110ea:	e7ca      	b.n	8111082 <_free_r+0x22>
 81110ec:	bd38      	pop	{r3, r4, r5, pc}
 81110ee:	bf00      	nop
 81110f0:	10008c60 	.word	0x10008c60

081110f4 <malloc>:
 81110f4:	4b02      	ldr	r3, [pc, #8]	@ (8111100 <malloc+0xc>)
 81110f6:	4601      	mov	r1, r0
 81110f8:	6818      	ldr	r0, [r3, #0]
 81110fa:	f000 b825 	b.w	8111148 <_malloc_r>
 81110fe:	bf00      	nop
 8111100:	100000b0 	.word	0x100000b0

08111104 <sbrk_aligned>:
 8111104:	b570      	push	{r4, r5, r6, lr}
 8111106:	4e0f      	ldr	r6, [pc, #60]	@ (8111144 <sbrk_aligned+0x40>)
 8111108:	460c      	mov	r4, r1
 811110a:	6831      	ldr	r1, [r6, #0]
 811110c:	4605      	mov	r5, r0
 811110e:	b911      	cbnz	r1, 8111116 <sbrk_aligned+0x12>
 8111110:	f001 ffe4 	bl	81130dc <_sbrk_r>
 8111114:	6030      	str	r0, [r6, #0]
 8111116:	4621      	mov	r1, r4
 8111118:	4628      	mov	r0, r5
 811111a:	f001 ffdf 	bl	81130dc <_sbrk_r>
 811111e:	1c43      	adds	r3, r0, #1
 8111120:	d103      	bne.n	811112a <sbrk_aligned+0x26>
 8111122:	f04f 34ff 	mov.w	r4, #4294967295
 8111126:	4620      	mov	r0, r4
 8111128:	bd70      	pop	{r4, r5, r6, pc}
 811112a:	1cc4      	adds	r4, r0, #3
 811112c:	f024 0403 	bic.w	r4, r4, #3
 8111130:	42a0      	cmp	r0, r4
 8111132:	d0f8      	beq.n	8111126 <sbrk_aligned+0x22>
 8111134:	1a21      	subs	r1, r4, r0
 8111136:	4628      	mov	r0, r5
 8111138:	f001 ffd0 	bl	81130dc <_sbrk_r>
 811113c:	3001      	adds	r0, #1
 811113e:	d1f2      	bne.n	8111126 <sbrk_aligned+0x22>
 8111140:	e7ef      	b.n	8111122 <sbrk_aligned+0x1e>
 8111142:	bf00      	nop
 8111144:	10008c5c 	.word	0x10008c5c

08111148 <_malloc_r>:
 8111148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811114c:	1ccd      	adds	r5, r1, #3
 811114e:	f025 0503 	bic.w	r5, r5, #3
 8111152:	3508      	adds	r5, #8
 8111154:	2d0c      	cmp	r5, #12
 8111156:	bf38      	it	cc
 8111158:	250c      	movcc	r5, #12
 811115a:	2d00      	cmp	r5, #0
 811115c:	4606      	mov	r6, r0
 811115e:	db01      	blt.n	8111164 <_malloc_r+0x1c>
 8111160:	42a9      	cmp	r1, r5
 8111162:	d904      	bls.n	811116e <_malloc_r+0x26>
 8111164:	230c      	movs	r3, #12
 8111166:	6033      	str	r3, [r6, #0]
 8111168:	2000      	movs	r0, #0
 811116a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811116e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8111244 <_malloc_r+0xfc>
 8111172:	f000 f869 	bl	8111248 <__malloc_lock>
 8111176:	f8d8 3000 	ldr.w	r3, [r8]
 811117a:	461c      	mov	r4, r3
 811117c:	bb44      	cbnz	r4, 81111d0 <_malloc_r+0x88>
 811117e:	4629      	mov	r1, r5
 8111180:	4630      	mov	r0, r6
 8111182:	f7ff ffbf 	bl	8111104 <sbrk_aligned>
 8111186:	1c43      	adds	r3, r0, #1
 8111188:	4604      	mov	r4, r0
 811118a:	d158      	bne.n	811123e <_malloc_r+0xf6>
 811118c:	f8d8 4000 	ldr.w	r4, [r8]
 8111190:	4627      	mov	r7, r4
 8111192:	2f00      	cmp	r7, #0
 8111194:	d143      	bne.n	811121e <_malloc_r+0xd6>
 8111196:	2c00      	cmp	r4, #0
 8111198:	d04b      	beq.n	8111232 <_malloc_r+0xea>
 811119a:	6823      	ldr	r3, [r4, #0]
 811119c:	4639      	mov	r1, r7
 811119e:	4630      	mov	r0, r6
 81111a0:	eb04 0903 	add.w	r9, r4, r3
 81111a4:	f001 ff9a 	bl	81130dc <_sbrk_r>
 81111a8:	4581      	cmp	r9, r0
 81111aa:	d142      	bne.n	8111232 <_malloc_r+0xea>
 81111ac:	6821      	ldr	r1, [r4, #0]
 81111ae:	1a6d      	subs	r5, r5, r1
 81111b0:	4629      	mov	r1, r5
 81111b2:	4630      	mov	r0, r6
 81111b4:	f7ff ffa6 	bl	8111104 <sbrk_aligned>
 81111b8:	3001      	adds	r0, #1
 81111ba:	d03a      	beq.n	8111232 <_malloc_r+0xea>
 81111bc:	6823      	ldr	r3, [r4, #0]
 81111be:	442b      	add	r3, r5
 81111c0:	6023      	str	r3, [r4, #0]
 81111c2:	f8d8 3000 	ldr.w	r3, [r8]
 81111c6:	685a      	ldr	r2, [r3, #4]
 81111c8:	bb62      	cbnz	r2, 8111224 <_malloc_r+0xdc>
 81111ca:	f8c8 7000 	str.w	r7, [r8]
 81111ce:	e00f      	b.n	81111f0 <_malloc_r+0xa8>
 81111d0:	6822      	ldr	r2, [r4, #0]
 81111d2:	1b52      	subs	r2, r2, r5
 81111d4:	d420      	bmi.n	8111218 <_malloc_r+0xd0>
 81111d6:	2a0b      	cmp	r2, #11
 81111d8:	d917      	bls.n	811120a <_malloc_r+0xc2>
 81111da:	1961      	adds	r1, r4, r5
 81111dc:	42a3      	cmp	r3, r4
 81111de:	6025      	str	r5, [r4, #0]
 81111e0:	bf18      	it	ne
 81111e2:	6059      	strne	r1, [r3, #4]
 81111e4:	6863      	ldr	r3, [r4, #4]
 81111e6:	bf08      	it	eq
 81111e8:	f8c8 1000 	streq.w	r1, [r8]
 81111ec:	5162      	str	r2, [r4, r5]
 81111ee:	604b      	str	r3, [r1, #4]
 81111f0:	4630      	mov	r0, r6
 81111f2:	f000 f82f 	bl	8111254 <__malloc_unlock>
 81111f6:	f104 000b 	add.w	r0, r4, #11
 81111fa:	1d23      	adds	r3, r4, #4
 81111fc:	f020 0007 	bic.w	r0, r0, #7
 8111200:	1ac2      	subs	r2, r0, r3
 8111202:	bf1c      	itt	ne
 8111204:	1a1b      	subne	r3, r3, r0
 8111206:	50a3      	strne	r3, [r4, r2]
 8111208:	e7af      	b.n	811116a <_malloc_r+0x22>
 811120a:	6862      	ldr	r2, [r4, #4]
 811120c:	42a3      	cmp	r3, r4
 811120e:	bf0c      	ite	eq
 8111210:	f8c8 2000 	streq.w	r2, [r8]
 8111214:	605a      	strne	r2, [r3, #4]
 8111216:	e7eb      	b.n	81111f0 <_malloc_r+0xa8>
 8111218:	4623      	mov	r3, r4
 811121a:	6864      	ldr	r4, [r4, #4]
 811121c:	e7ae      	b.n	811117c <_malloc_r+0x34>
 811121e:	463c      	mov	r4, r7
 8111220:	687f      	ldr	r7, [r7, #4]
 8111222:	e7b6      	b.n	8111192 <_malloc_r+0x4a>
 8111224:	461a      	mov	r2, r3
 8111226:	685b      	ldr	r3, [r3, #4]
 8111228:	42a3      	cmp	r3, r4
 811122a:	d1fb      	bne.n	8111224 <_malloc_r+0xdc>
 811122c:	2300      	movs	r3, #0
 811122e:	6053      	str	r3, [r2, #4]
 8111230:	e7de      	b.n	81111f0 <_malloc_r+0xa8>
 8111232:	230c      	movs	r3, #12
 8111234:	6033      	str	r3, [r6, #0]
 8111236:	4630      	mov	r0, r6
 8111238:	f000 f80c 	bl	8111254 <__malloc_unlock>
 811123c:	e794      	b.n	8111168 <_malloc_r+0x20>
 811123e:	6005      	str	r5, [r0, #0]
 8111240:	e7d6      	b.n	81111f0 <_malloc_r+0xa8>
 8111242:	bf00      	nop
 8111244:	10008c60 	.word	0x10008c60

08111248 <__malloc_lock>:
 8111248:	4801      	ldr	r0, [pc, #4]	@ (8111250 <__malloc_lock+0x8>)
 811124a:	f7ff b886 	b.w	811035a <__retarget_lock_acquire_recursive>
 811124e:	bf00      	nop
 8111250:	10008c58 	.word	0x10008c58

08111254 <__malloc_unlock>:
 8111254:	4801      	ldr	r0, [pc, #4]	@ (811125c <__malloc_unlock+0x8>)
 8111256:	f7ff b881 	b.w	811035c <__retarget_lock_release_recursive>
 811125a:	bf00      	nop
 811125c:	10008c58 	.word	0x10008c58

08111260 <_Balloc>:
 8111260:	b570      	push	{r4, r5, r6, lr}
 8111262:	69c6      	ldr	r6, [r0, #28]
 8111264:	4604      	mov	r4, r0
 8111266:	460d      	mov	r5, r1
 8111268:	b976      	cbnz	r6, 8111288 <_Balloc+0x28>
 811126a:	2010      	movs	r0, #16
 811126c:	f7ff ff42 	bl	81110f4 <malloc>
 8111270:	4602      	mov	r2, r0
 8111272:	61e0      	str	r0, [r4, #28]
 8111274:	b920      	cbnz	r0, 8111280 <_Balloc+0x20>
 8111276:	4b18      	ldr	r3, [pc, #96]	@ (81112d8 <_Balloc+0x78>)
 8111278:	4818      	ldr	r0, [pc, #96]	@ (81112dc <_Balloc+0x7c>)
 811127a:	216b      	movs	r1, #107	@ 0x6b
 811127c:	f7ff f884 	bl	8110388 <__assert_func>
 8111280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8111284:	6006      	str	r6, [r0, #0]
 8111286:	60c6      	str	r6, [r0, #12]
 8111288:	69e6      	ldr	r6, [r4, #28]
 811128a:	68f3      	ldr	r3, [r6, #12]
 811128c:	b183      	cbz	r3, 81112b0 <_Balloc+0x50>
 811128e:	69e3      	ldr	r3, [r4, #28]
 8111290:	68db      	ldr	r3, [r3, #12]
 8111292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8111296:	b9b8      	cbnz	r0, 81112c8 <_Balloc+0x68>
 8111298:	2101      	movs	r1, #1
 811129a:	fa01 f605 	lsl.w	r6, r1, r5
 811129e:	1d72      	adds	r2, r6, #5
 81112a0:	0092      	lsls	r2, r2, #2
 81112a2:	4620      	mov	r0, r4
 81112a4:	f001 ff3b 	bl	811311e <_calloc_r>
 81112a8:	b160      	cbz	r0, 81112c4 <_Balloc+0x64>
 81112aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 81112ae:	e00e      	b.n	81112ce <_Balloc+0x6e>
 81112b0:	2221      	movs	r2, #33	@ 0x21
 81112b2:	2104      	movs	r1, #4
 81112b4:	4620      	mov	r0, r4
 81112b6:	f001 ff32 	bl	811311e <_calloc_r>
 81112ba:	69e3      	ldr	r3, [r4, #28]
 81112bc:	60f0      	str	r0, [r6, #12]
 81112be:	68db      	ldr	r3, [r3, #12]
 81112c0:	2b00      	cmp	r3, #0
 81112c2:	d1e4      	bne.n	811128e <_Balloc+0x2e>
 81112c4:	2000      	movs	r0, #0
 81112c6:	bd70      	pop	{r4, r5, r6, pc}
 81112c8:	6802      	ldr	r2, [r0, #0]
 81112ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81112ce:	2300      	movs	r3, #0
 81112d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81112d4:	e7f7      	b.n	81112c6 <_Balloc+0x66>
 81112d6:	bf00      	nop
 81112d8:	081139b0 	.word	0x081139b0
 81112dc:	08113b0a 	.word	0x08113b0a

081112e0 <_Bfree>:
 81112e0:	b570      	push	{r4, r5, r6, lr}
 81112e2:	69c6      	ldr	r6, [r0, #28]
 81112e4:	4605      	mov	r5, r0
 81112e6:	460c      	mov	r4, r1
 81112e8:	b976      	cbnz	r6, 8111308 <_Bfree+0x28>
 81112ea:	2010      	movs	r0, #16
 81112ec:	f7ff ff02 	bl	81110f4 <malloc>
 81112f0:	4602      	mov	r2, r0
 81112f2:	61e8      	str	r0, [r5, #28]
 81112f4:	b920      	cbnz	r0, 8111300 <_Bfree+0x20>
 81112f6:	4b09      	ldr	r3, [pc, #36]	@ (811131c <_Bfree+0x3c>)
 81112f8:	4809      	ldr	r0, [pc, #36]	@ (8111320 <_Bfree+0x40>)
 81112fa:	218f      	movs	r1, #143	@ 0x8f
 81112fc:	f7ff f844 	bl	8110388 <__assert_func>
 8111300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8111304:	6006      	str	r6, [r0, #0]
 8111306:	60c6      	str	r6, [r0, #12]
 8111308:	b13c      	cbz	r4, 811131a <_Bfree+0x3a>
 811130a:	69eb      	ldr	r3, [r5, #28]
 811130c:	6862      	ldr	r2, [r4, #4]
 811130e:	68db      	ldr	r3, [r3, #12]
 8111310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8111314:	6021      	str	r1, [r4, #0]
 8111316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 811131a:	bd70      	pop	{r4, r5, r6, pc}
 811131c:	081139b0 	.word	0x081139b0
 8111320:	08113b0a 	.word	0x08113b0a

08111324 <__multadd>:
 8111324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111328:	690d      	ldr	r5, [r1, #16]
 811132a:	4607      	mov	r7, r0
 811132c:	460c      	mov	r4, r1
 811132e:	461e      	mov	r6, r3
 8111330:	f101 0c14 	add.w	ip, r1, #20
 8111334:	2000      	movs	r0, #0
 8111336:	f8dc 3000 	ldr.w	r3, [ip]
 811133a:	b299      	uxth	r1, r3
 811133c:	fb02 6101 	mla	r1, r2, r1, r6
 8111340:	0c1e      	lsrs	r6, r3, #16
 8111342:	0c0b      	lsrs	r3, r1, #16
 8111344:	fb02 3306 	mla	r3, r2, r6, r3
 8111348:	b289      	uxth	r1, r1
 811134a:	3001      	adds	r0, #1
 811134c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8111350:	4285      	cmp	r5, r0
 8111352:	f84c 1b04 	str.w	r1, [ip], #4
 8111356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 811135a:	dcec      	bgt.n	8111336 <__multadd+0x12>
 811135c:	b30e      	cbz	r6, 81113a2 <__multadd+0x7e>
 811135e:	68a3      	ldr	r3, [r4, #8]
 8111360:	42ab      	cmp	r3, r5
 8111362:	dc19      	bgt.n	8111398 <__multadd+0x74>
 8111364:	6861      	ldr	r1, [r4, #4]
 8111366:	4638      	mov	r0, r7
 8111368:	3101      	adds	r1, #1
 811136a:	f7ff ff79 	bl	8111260 <_Balloc>
 811136e:	4680      	mov	r8, r0
 8111370:	b928      	cbnz	r0, 811137e <__multadd+0x5a>
 8111372:	4602      	mov	r2, r0
 8111374:	4b0c      	ldr	r3, [pc, #48]	@ (81113a8 <__multadd+0x84>)
 8111376:	480d      	ldr	r0, [pc, #52]	@ (81113ac <__multadd+0x88>)
 8111378:	21ba      	movs	r1, #186	@ 0xba
 811137a:	f7ff f805 	bl	8110388 <__assert_func>
 811137e:	6922      	ldr	r2, [r4, #16]
 8111380:	3202      	adds	r2, #2
 8111382:	f104 010c 	add.w	r1, r4, #12
 8111386:	0092      	lsls	r2, r2, #2
 8111388:	300c      	adds	r0, #12
 811138a:	f7fe ffe8 	bl	811035e <memcpy>
 811138e:	4621      	mov	r1, r4
 8111390:	4638      	mov	r0, r7
 8111392:	f7ff ffa5 	bl	81112e0 <_Bfree>
 8111396:	4644      	mov	r4, r8
 8111398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 811139c:	3501      	adds	r5, #1
 811139e:	615e      	str	r6, [r3, #20]
 81113a0:	6125      	str	r5, [r4, #16]
 81113a2:	4620      	mov	r0, r4
 81113a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81113a8:	08113af9 	.word	0x08113af9
 81113ac:	08113b0a 	.word	0x08113b0a

081113b0 <__s2b>:
 81113b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81113b4:	460c      	mov	r4, r1
 81113b6:	4615      	mov	r5, r2
 81113b8:	461f      	mov	r7, r3
 81113ba:	2209      	movs	r2, #9
 81113bc:	3308      	adds	r3, #8
 81113be:	4606      	mov	r6, r0
 81113c0:	fb93 f3f2 	sdiv	r3, r3, r2
 81113c4:	2100      	movs	r1, #0
 81113c6:	2201      	movs	r2, #1
 81113c8:	429a      	cmp	r2, r3
 81113ca:	db09      	blt.n	81113e0 <__s2b+0x30>
 81113cc:	4630      	mov	r0, r6
 81113ce:	f7ff ff47 	bl	8111260 <_Balloc>
 81113d2:	b940      	cbnz	r0, 81113e6 <__s2b+0x36>
 81113d4:	4602      	mov	r2, r0
 81113d6:	4b19      	ldr	r3, [pc, #100]	@ (811143c <__s2b+0x8c>)
 81113d8:	4819      	ldr	r0, [pc, #100]	@ (8111440 <__s2b+0x90>)
 81113da:	21d3      	movs	r1, #211	@ 0xd3
 81113dc:	f7fe ffd4 	bl	8110388 <__assert_func>
 81113e0:	0052      	lsls	r2, r2, #1
 81113e2:	3101      	adds	r1, #1
 81113e4:	e7f0      	b.n	81113c8 <__s2b+0x18>
 81113e6:	9b08      	ldr	r3, [sp, #32]
 81113e8:	6143      	str	r3, [r0, #20]
 81113ea:	2d09      	cmp	r5, #9
 81113ec:	f04f 0301 	mov.w	r3, #1
 81113f0:	6103      	str	r3, [r0, #16]
 81113f2:	dd16      	ble.n	8111422 <__s2b+0x72>
 81113f4:	f104 0909 	add.w	r9, r4, #9
 81113f8:	46c8      	mov	r8, r9
 81113fa:	442c      	add	r4, r5
 81113fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8111400:	4601      	mov	r1, r0
 8111402:	3b30      	subs	r3, #48	@ 0x30
 8111404:	220a      	movs	r2, #10
 8111406:	4630      	mov	r0, r6
 8111408:	f7ff ff8c 	bl	8111324 <__multadd>
 811140c:	45a0      	cmp	r8, r4
 811140e:	d1f5      	bne.n	81113fc <__s2b+0x4c>
 8111410:	f1a5 0408 	sub.w	r4, r5, #8
 8111414:	444c      	add	r4, r9
 8111416:	1b2d      	subs	r5, r5, r4
 8111418:	1963      	adds	r3, r4, r5
 811141a:	42bb      	cmp	r3, r7
 811141c:	db04      	blt.n	8111428 <__s2b+0x78>
 811141e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111422:	340a      	adds	r4, #10
 8111424:	2509      	movs	r5, #9
 8111426:	e7f6      	b.n	8111416 <__s2b+0x66>
 8111428:	f814 3b01 	ldrb.w	r3, [r4], #1
 811142c:	4601      	mov	r1, r0
 811142e:	3b30      	subs	r3, #48	@ 0x30
 8111430:	220a      	movs	r2, #10
 8111432:	4630      	mov	r0, r6
 8111434:	f7ff ff76 	bl	8111324 <__multadd>
 8111438:	e7ee      	b.n	8111418 <__s2b+0x68>
 811143a:	bf00      	nop
 811143c:	08113af9 	.word	0x08113af9
 8111440:	08113b0a 	.word	0x08113b0a

08111444 <__hi0bits>:
 8111444:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8111448:	4603      	mov	r3, r0
 811144a:	bf36      	itet	cc
 811144c:	0403      	lslcc	r3, r0, #16
 811144e:	2000      	movcs	r0, #0
 8111450:	2010      	movcc	r0, #16
 8111452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8111456:	bf3c      	itt	cc
 8111458:	021b      	lslcc	r3, r3, #8
 811145a:	3008      	addcc	r0, #8
 811145c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8111460:	bf3c      	itt	cc
 8111462:	011b      	lslcc	r3, r3, #4
 8111464:	3004      	addcc	r0, #4
 8111466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811146a:	bf3c      	itt	cc
 811146c:	009b      	lslcc	r3, r3, #2
 811146e:	3002      	addcc	r0, #2
 8111470:	2b00      	cmp	r3, #0
 8111472:	db05      	blt.n	8111480 <__hi0bits+0x3c>
 8111474:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8111478:	f100 0001 	add.w	r0, r0, #1
 811147c:	bf08      	it	eq
 811147e:	2020      	moveq	r0, #32
 8111480:	4770      	bx	lr

08111482 <__lo0bits>:
 8111482:	6803      	ldr	r3, [r0, #0]
 8111484:	4602      	mov	r2, r0
 8111486:	f013 0007 	ands.w	r0, r3, #7
 811148a:	d00b      	beq.n	81114a4 <__lo0bits+0x22>
 811148c:	07d9      	lsls	r1, r3, #31
 811148e:	d421      	bmi.n	81114d4 <__lo0bits+0x52>
 8111490:	0798      	lsls	r0, r3, #30
 8111492:	bf49      	itett	mi
 8111494:	085b      	lsrmi	r3, r3, #1
 8111496:	089b      	lsrpl	r3, r3, #2
 8111498:	2001      	movmi	r0, #1
 811149a:	6013      	strmi	r3, [r2, #0]
 811149c:	bf5c      	itt	pl
 811149e:	6013      	strpl	r3, [r2, #0]
 81114a0:	2002      	movpl	r0, #2
 81114a2:	4770      	bx	lr
 81114a4:	b299      	uxth	r1, r3
 81114a6:	b909      	cbnz	r1, 81114ac <__lo0bits+0x2a>
 81114a8:	0c1b      	lsrs	r3, r3, #16
 81114aa:	2010      	movs	r0, #16
 81114ac:	b2d9      	uxtb	r1, r3
 81114ae:	b909      	cbnz	r1, 81114b4 <__lo0bits+0x32>
 81114b0:	3008      	adds	r0, #8
 81114b2:	0a1b      	lsrs	r3, r3, #8
 81114b4:	0719      	lsls	r1, r3, #28
 81114b6:	bf04      	itt	eq
 81114b8:	091b      	lsreq	r3, r3, #4
 81114ba:	3004      	addeq	r0, #4
 81114bc:	0799      	lsls	r1, r3, #30
 81114be:	bf04      	itt	eq
 81114c0:	089b      	lsreq	r3, r3, #2
 81114c2:	3002      	addeq	r0, #2
 81114c4:	07d9      	lsls	r1, r3, #31
 81114c6:	d403      	bmi.n	81114d0 <__lo0bits+0x4e>
 81114c8:	085b      	lsrs	r3, r3, #1
 81114ca:	f100 0001 	add.w	r0, r0, #1
 81114ce:	d003      	beq.n	81114d8 <__lo0bits+0x56>
 81114d0:	6013      	str	r3, [r2, #0]
 81114d2:	4770      	bx	lr
 81114d4:	2000      	movs	r0, #0
 81114d6:	4770      	bx	lr
 81114d8:	2020      	movs	r0, #32
 81114da:	4770      	bx	lr

081114dc <__i2b>:
 81114dc:	b510      	push	{r4, lr}
 81114de:	460c      	mov	r4, r1
 81114e0:	2101      	movs	r1, #1
 81114e2:	f7ff febd 	bl	8111260 <_Balloc>
 81114e6:	4602      	mov	r2, r0
 81114e8:	b928      	cbnz	r0, 81114f6 <__i2b+0x1a>
 81114ea:	4b05      	ldr	r3, [pc, #20]	@ (8111500 <__i2b+0x24>)
 81114ec:	4805      	ldr	r0, [pc, #20]	@ (8111504 <__i2b+0x28>)
 81114ee:	f240 1145 	movw	r1, #325	@ 0x145
 81114f2:	f7fe ff49 	bl	8110388 <__assert_func>
 81114f6:	2301      	movs	r3, #1
 81114f8:	6144      	str	r4, [r0, #20]
 81114fa:	6103      	str	r3, [r0, #16]
 81114fc:	bd10      	pop	{r4, pc}
 81114fe:	bf00      	nop
 8111500:	08113af9 	.word	0x08113af9
 8111504:	08113b0a 	.word	0x08113b0a

08111508 <__multiply>:
 8111508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811150c:	4614      	mov	r4, r2
 811150e:	690a      	ldr	r2, [r1, #16]
 8111510:	6923      	ldr	r3, [r4, #16]
 8111512:	429a      	cmp	r2, r3
 8111514:	bfa8      	it	ge
 8111516:	4623      	movge	r3, r4
 8111518:	460f      	mov	r7, r1
 811151a:	bfa4      	itt	ge
 811151c:	460c      	movge	r4, r1
 811151e:	461f      	movge	r7, r3
 8111520:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8111524:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8111528:	68a3      	ldr	r3, [r4, #8]
 811152a:	6861      	ldr	r1, [r4, #4]
 811152c:	eb0a 0609 	add.w	r6, sl, r9
 8111530:	42b3      	cmp	r3, r6
 8111532:	b085      	sub	sp, #20
 8111534:	bfb8      	it	lt
 8111536:	3101      	addlt	r1, #1
 8111538:	f7ff fe92 	bl	8111260 <_Balloc>
 811153c:	b930      	cbnz	r0, 811154c <__multiply+0x44>
 811153e:	4602      	mov	r2, r0
 8111540:	4b44      	ldr	r3, [pc, #272]	@ (8111654 <__multiply+0x14c>)
 8111542:	4845      	ldr	r0, [pc, #276]	@ (8111658 <__multiply+0x150>)
 8111544:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8111548:	f7fe ff1e 	bl	8110388 <__assert_func>
 811154c:	f100 0514 	add.w	r5, r0, #20
 8111550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8111554:	462b      	mov	r3, r5
 8111556:	2200      	movs	r2, #0
 8111558:	4543      	cmp	r3, r8
 811155a:	d321      	bcc.n	81115a0 <__multiply+0x98>
 811155c:	f107 0114 	add.w	r1, r7, #20
 8111560:	f104 0214 	add.w	r2, r4, #20
 8111564:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8111568:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 811156c:	9302      	str	r3, [sp, #8]
 811156e:	1b13      	subs	r3, r2, r4
 8111570:	3b15      	subs	r3, #21
 8111572:	f023 0303 	bic.w	r3, r3, #3
 8111576:	3304      	adds	r3, #4
 8111578:	f104 0715 	add.w	r7, r4, #21
 811157c:	42ba      	cmp	r2, r7
 811157e:	bf38      	it	cc
 8111580:	2304      	movcc	r3, #4
 8111582:	9301      	str	r3, [sp, #4]
 8111584:	9b02      	ldr	r3, [sp, #8]
 8111586:	9103      	str	r1, [sp, #12]
 8111588:	428b      	cmp	r3, r1
 811158a:	d80c      	bhi.n	81115a6 <__multiply+0x9e>
 811158c:	2e00      	cmp	r6, #0
 811158e:	dd03      	ble.n	8111598 <__multiply+0x90>
 8111590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8111594:	2b00      	cmp	r3, #0
 8111596:	d05b      	beq.n	8111650 <__multiply+0x148>
 8111598:	6106      	str	r6, [r0, #16]
 811159a:	b005      	add	sp, #20
 811159c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81115a0:	f843 2b04 	str.w	r2, [r3], #4
 81115a4:	e7d8      	b.n	8111558 <__multiply+0x50>
 81115a6:	f8b1 a000 	ldrh.w	sl, [r1]
 81115aa:	f1ba 0f00 	cmp.w	sl, #0
 81115ae:	d024      	beq.n	81115fa <__multiply+0xf2>
 81115b0:	f104 0e14 	add.w	lr, r4, #20
 81115b4:	46a9      	mov	r9, r5
 81115b6:	f04f 0c00 	mov.w	ip, #0
 81115ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 81115be:	f8d9 3000 	ldr.w	r3, [r9]
 81115c2:	fa1f fb87 	uxth.w	fp, r7
 81115c6:	b29b      	uxth	r3, r3
 81115c8:	fb0a 330b 	mla	r3, sl, fp, r3
 81115cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 81115d0:	f8d9 7000 	ldr.w	r7, [r9]
 81115d4:	4463      	add	r3, ip
 81115d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81115da:	fb0a c70b 	mla	r7, sl, fp, ip
 81115de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 81115e2:	b29b      	uxth	r3, r3
 81115e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81115e8:	4572      	cmp	r2, lr
 81115ea:	f849 3b04 	str.w	r3, [r9], #4
 81115ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81115f2:	d8e2      	bhi.n	81115ba <__multiply+0xb2>
 81115f4:	9b01      	ldr	r3, [sp, #4]
 81115f6:	f845 c003 	str.w	ip, [r5, r3]
 81115fa:	9b03      	ldr	r3, [sp, #12]
 81115fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8111600:	3104      	adds	r1, #4
 8111602:	f1b9 0f00 	cmp.w	r9, #0
 8111606:	d021      	beq.n	811164c <__multiply+0x144>
 8111608:	682b      	ldr	r3, [r5, #0]
 811160a:	f104 0c14 	add.w	ip, r4, #20
 811160e:	46ae      	mov	lr, r5
 8111610:	f04f 0a00 	mov.w	sl, #0
 8111614:	f8bc b000 	ldrh.w	fp, [ip]
 8111618:	f8be 7002 	ldrh.w	r7, [lr, #2]
 811161c:	fb09 770b 	mla	r7, r9, fp, r7
 8111620:	4457      	add	r7, sl
 8111622:	b29b      	uxth	r3, r3
 8111624:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8111628:	f84e 3b04 	str.w	r3, [lr], #4
 811162c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8111630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8111634:	f8be 3000 	ldrh.w	r3, [lr]
 8111638:	fb09 330a 	mla	r3, r9, sl, r3
 811163c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8111640:	4562      	cmp	r2, ip
 8111642:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8111646:	d8e5      	bhi.n	8111614 <__multiply+0x10c>
 8111648:	9f01      	ldr	r7, [sp, #4]
 811164a:	51eb      	str	r3, [r5, r7]
 811164c:	3504      	adds	r5, #4
 811164e:	e799      	b.n	8111584 <__multiply+0x7c>
 8111650:	3e01      	subs	r6, #1
 8111652:	e79b      	b.n	811158c <__multiply+0x84>
 8111654:	08113af9 	.word	0x08113af9
 8111658:	08113b0a 	.word	0x08113b0a

0811165c <__pow5mult>:
 811165c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111660:	4615      	mov	r5, r2
 8111662:	f012 0203 	ands.w	r2, r2, #3
 8111666:	4607      	mov	r7, r0
 8111668:	460e      	mov	r6, r1
 811166a:	d007      	beq.n	811167c <__pow5mult+0x20>
 811166c:	4c25      	ldr	r4, [pc, #148]	@ (8111704 <__pow5mult+0xa8>)
 811166e:	3a01      	subs	r2, #1
 8111670:	2300      	movs	r3, #0
 8111672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8111676:	f7ff fe55 	bl	8111324 <__multadd>
 811167a:	4606      	mov	r6, r0
 811167c:	10ad      	asrs	r5, r5, #2
 811167e:	d03d      	beq.n	81116fc <__pow5mult+0xa0>
 8111680:	69fc      	ldr	r4, [r7, #28]
 8111682:	b97c      	cbnz	r4, 81116a4 <__pow5mult+0x48>
 8111684:	2010      	movs	r0, #16
 8111686:	f7ff fd35 	bl	81110f4 <malloc>
 811168a:	4602      	mov	r2, r0
 811168c:	61f8      	str	r0, [r7, #28]
 811168e:	b928      	cbnz	r0, 811169c <__pow5mult+0x40>
 8111690:	4b1d      	ldr	r3, [pc, #116]	@ (8111708 <__pow5mult+0xac>)
 8111692:	481e      	ldr	r0, [pc, #120]	@ (811170c <__pow5mult+0xb0>)
 8111694:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8111698:	f7fe fe76 	bl	8110388 <__assert_func>
 811169c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81116a0:	6004      	str	r4, [r0, #0]
 81116a2:	60c4      	str	r4, [r0, #12]
 81116a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 81116a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 81116ac:	b94c      	cbnz	r4, 81116c2 <__pow5mult+0x66>
 81116ae:	f240 2171 	movw	r1, #625	@ 0x271
 81116b2:	4638      	mov	r0, r7
 81116b4:	f7ff ff12 	bl	81114dc <__i2b>
 81116b8:	2300      	movs	r3, #0
 81116ba:	f8c8 0008 	str.w	r0, [r8, #8]
 81116be:	4604      	mov	r4, r0
 81116c0:	6003      	str	r3, [r0, #0]
 81116c2:	f04f 0900 	mov.w	r9, #0
 81116c6:	07eb      	lsls	r3, r5, #31
 81116c8:	d50a      	bpl.n	81116e0 <__pow5mult+0x84>
 81116ca:	4631      	mov	r1, r6
 81116cc:	4622      	mov	r2, r4
 81116ce:	4638      	mov	r0, r7
 81116d0:	f7ff ff1a 	bl	8111508 <__multiply>
 81116d4:	4631      	mov	r1, r6
 81116d6:	4680      	mov	r8, r0
 81116d8:	4638      	mov	r0, r7
 81116da:	f7ff fe01 	bl	81112e0 <_Bfree>
 81116de:	4646      	mov	r6, r8
 81116e0:	106d      	asrs	r5, r5, #1
 81116e2:	d00b      	beq.n	81116fc <__pow5mult+0xa0>
 81116e4:	6820      	ldr	r0, [r4, #0]
 81116e6:	b938      	cbnz	r0, 81116f8 <__pow5mult+0x9c>
 81116e8:	4622      	mov	r2, r4
 81116ea:	4621      	mov	r1, r4
 81116ec:	4638      	mov	r0, r7
 81116ee:	f7ff ff0b 	bl	8111508 <__multiply>
 81116f2:	6020      	str	r0, [r4, #0]
 81116f4:	f8c0 9000 	str.w	r9, [r0]
 81116f8:	4604      	mov	r4, r0
 81116fa:	e7e4      	b.n	81116c6 <__pow5mult+0x6a>
 81116fc:	4630      	mov	r0, r6
 81116fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111702:	bf00      	nop
 8111704:	08113b64 	.word	0x08113b64
 8111708:	081139b0 	.word	0x081139b0
 811170c:	08113b0a 	.word	0x08113b0a

08111710 <__lshift>:
 8111710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111714:	460c      	mov	r4, r1
 8111716:	6849      	ldr	r1, [r1, #4]
 8111718:	6923      	ldr	r3, [r4, #16]
 811171a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 811171e:	68a3      	ldr	r3, [r4, #8]
 8111720:	4607      	mov	r7, r0
 8111722:	4691      	mov	r9, r2
 8111724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8111728:	f108 0601 	add.w	r6, r8, #1
 811172c:	42b3      	cmp	r3, r6
 811172e:	db0b      	blt.n	8111748 <__lshift+0x38>
 8111730:	4638      	mov	r0, r7
 8111732:	f7ff fd95 	bl	8111260 <_Balloc>
 8111736:	4605      	mov	r5, r0
 8111738:	b948      	cbnz	r0, 811174e <__lshift+0x3e>
 811173a:	4602      	mov	r2, r0
 811173c:	4b28      	ldr	r3, [pc, #160]	@ (81117e0 <__lshift+0xd0>)
 811173e:	4829      	ldr	r0, [pc, #164]	@ (81117e4 <__lshift+0xd4>)
 8111740:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8111744:	f7fe fe20 	bl	8110388 <__assert_func>
 8111748:	3101      	adds	r1, #1
 811174a:	005b      	lsls	r3, r3, #1
 811174c:	e7ee      	b.n	811172c <__lshift+0x1c>
 811174e:	2300      	movs	r3, #0
 8111750:	f100 0114 	add.w	r1, r0, #20
 8111754:	f100 0210 	add.w	r2, r0, #16
 8111758:	4618      	mov	r0, r3
 811175a:	4553      	cmp	r3, sl
 811175c:	db33      	blt.n	81117c6 <__lshift+0xb6>
 811175e:	6920      	ldr	r0, [r4, #16]
 8111760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8111764:	f104 0314 	add.w	r3, r4, #20
 8111768:	f019 091f 	ands.w	r9, r9, #31
 811176c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8111770:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8111774:	d02b      	beq.n	81117ce <__lshift+0xbe>
 8111776:	f1c9 0e20 	rsb	lr, r9, #32
 811177a:	468a      	mov	sl, r1
 811177c:	2200      	movs	r2, #0
 811177e:	6818      	ldr	r0, [r3, #0]
 8111780:	fa00 f009 	lsl.w	r0, r0, r9
 8111784:	4310      	orrs	r0, r2
 8111786:	f84a 0b04 	str.w	r0, [sl], #4
 811178a:	f853 2b04 	ldr.w	r2, [r3], #4
 811178e:	459c      	cmp	ip, r3
 8111790:	fa22 f20e 	lsr.w	r2, r2, lr
 8111794:	d8f3      	bhi.n	811177e <__lshift+0x6e>
 8111796:	ebac 0304 	sub.w	r3, ip, r4
 811179a:	3b15      	subs	r3, #21
 811179c:	f023 0303 	bic.w	r3, r3, #3
 81117a0:	3304      	adds	r3, #4
 81117a2:	f104 0015 	add.w	r0, r4, #21
 81117a6:	4584      	cmp	ip, r0
 81117a8:	bf38      	it	cc
 81117aa:	2304      	movcc	r3, #4
 81117ac:	50ca      	str	r2, [r1, r3]
 81117ae:	b10a      	cbz	r2, 81117b4 <__lshift+0xa4>
 81117b0:	f108 0602 	add.w	r6, r8, #2
 81117b4:	3e01      	subs	r6, #1
 81117b6:	4638      	mov	r0, r7
 81117b8:	612e      	str	r6, [r5, #16]
 81117ba:	4621      	mov	r1, r4
 81117bc:	f7ff fd90 	bl	81112e0 <_Bfree>
 81117c0:	4628      	mov	r0, r5
 81117c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81117c6:	f842 0f04 	str.w	r0, [r2, #4]!
 81117ca:	3301      	adds	r3, #1
 81117cc:	e7c5      	b.n	811175a <__lshift+0x4a>
 81117ce:	3904      	subs	r1, #4
 81117d0:	f853 2b04 	ldr.w	r2, [r3], #4
 81117d4:	f841 2f04 	str.w	r2, [r1, #4]!
 81117d8:	459c      	cmp	ip, r3
 81117da:	d8f9      	bhi.n	81117d0 <__lshift+0xc0>
 81117dc:	e7ea      	b.n	81117b4 <__lshift+0xa4>
 81117de:	bf00      	nop
 81117e0:	08113af9 	.word	0x08113af9
 81117e4:	08113b0a 	.word	0x08113b0a

081117e8 <__mcmp>:
 81117e8:	690a      	ldr	r2, [r1, #16]
 81117ea:	4603      	mov	r3, r0
 81117ec:	6900      	ldr	r0, [r0, #16]
 81117ee:	1a80      	subs	r0, r0, r2
 81117f0:	b530      	push	{r4, r5, lr}
 81117f2:	d10e      	bne.n	8111812 <__mcmp+0x2a>
 81117f4:	3314      	adds	r3, #20
 81117f6:	3114      	adds	r1, #20
 81117f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 81117fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8111800:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8111804:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8111808:	4295      	cmp	r5, r2
 811180a:	d003      	beq.n	8111814 <__mcmp+0x2c>
 811180c:	d205      	bcs.n	811181a <__mcmp+0x32>
 811180e:	f04f 30ff 	mov.w	r0, #4294967295
 8111812:	bd30      	pop	{r4, r5, pc}
 8111814:	42a3      	cmp	r3, r4
 8111816:	d3f3      	bcc.n	8111800 <__mcmp+0x18>
 8111818:	e7fb      	b.n	8111812 <__mcmp+0x2a>
 811181a:	2001      	movs	r0, #1
 811181c:	e7f9      	b.n	8111812 <__mcmp+0x2a>
	...

08111820 <__mdiff>:
 8111820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111824:	4689      	mov	r9, r1
 8111826:	4606      	mov	r6, r0
 8111828:	4611      	mov	r1, r2
 811182a:	4648      	mov	r0, r9
 811182c:	4614      	mov	r4, r2
 811182e:	f7ff ffdb 	bl	81117e8 <__mcmp>
 8111832:	1e05      	subs	r5, r0, #0
 8111834:	d112      	bne.n	811185c <__mdiff+0x3c>
 8111836:	4629      	mov	r1, r5
 8111838:	4630      	mov	r0, r6
 811183a:	f7ff fd11 	bl	8111260 <_Balloc>
 811183e:	4602      	mov	r2, r0
 8111840:	b928      	cbnz	r0, 811184e <__mdiff+0x2e>
 8111842:	4b3f      	ldr	r3, [pc, #252]	@ (8111940 <__mdiff+0x120>)
 8111844:	f240 2137 	movw	r1, #567	@ 0x237
 8111848:	483e      	ldr	r0, [pc, #248]	@ (8111944 <__mdiff+0x124>)
 811184a:	f7fe fd9d 	bl	8110388 <__assert_func>
 811184e:	2301      	movs	r3, #1
 8111850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8111854:	4610      	mov	r0, r2
 8111856:	b003      	add	sp, #12
 8111858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811185c:	bfbc      	itt	lt
 811185e:	464b      	movlt	r3, r9
 8111860:	46a1      	movlt	r9, r4
 8111862:	4630      	mov	r0, r6
 8111864:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8111868:	bfba      	itte	lt
 811186a:	461c      	movlt	r4, r3
 811186c:	2501      	movlt	r5, #1
 811186e:	2500      	movge	r5, #0
 8111870:	f7ff fcf6 	bl	8111260 <_Balloc>
 8111874:	4602      	mov	r2, r0
 8111876:	b918      	cbnz	r0, 8111880 <__mdiff+0x60>
 8111878:	4b31      	ldr	r3, [pc, #196]	@ (8111940 <__mdiff+0x120>)
 811187a:	f240 2145 	movw	r1, #581	@ 0x245
 811187e:	e7e3      	b.n	8111848 <__mdiff+0x28>
 8111880:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8111884:	6926      	ldr	r6, [r4, #16]
 8111886:	60c5      	str	r5, [r0, #12]
 8111888:	f109 0310 	add.w	r3, r9, #16
 811188c:	f109 0514 	add.w	r5, r9, #20
 8111890:	f104 0e14 	add.w	lr, r4, #20
 8111894:	f100 0b14 	add.w	fp, r0, #20
 8111898:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 811189c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 81118a0:	9301      	str	r3, [sp, #4]
 81118a2:	46d9      	mov	r9, fp
 81118a4:	f04f 0c00 	mov.w	ip, #0
 81118a8:	9b01      	ldr	r3, [sp, #4]
 81118aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 81118ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 81118b2:	9301      	str	r3, [sp, #4]
 81118b4:	fa1f f38a 	uxth.w	r3, sl
 81118b8:	4619      	mov	r1, r3
 81118ba:	b283      	uxth	r3, r0
 81118bc:	1acb      	subs	r3, r1, r3
 81118be:	0c00      	lsrs	r0, r0, #16
 81118c0:	4463      	add	r3, ip
 81118c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 81118c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 81118ca:	b29b      	uxth	r3, r3
 81118cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 81118d0:	4576      	cmp	r6, lr
 81118d2:	f849 3b04 	str.w	r3, [r9], #4
 81118d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 81118da:	d8e5      	bhi.n	81118a8 <__mdiff+0x88>
 81118dc:	1b33      	subs	r3, r6, r4
 81118de:	3b15      	subs	r3, #21
 81118e0:	f023 0303 	bic.w	r3, r3, #3
 81118e4:	3415      	adds	r4, #21
 81118e6:	3304      	adds	r3, #4
 81118e8:	42a6      	cmp	r6, r4
 81118ea:	bf38      	it	cc
 81118ec:	2304      	movcc	r3, #4
 81118ee:	441d      	add	r5, r3
 81118f0:	445b      	add	r3, fp
 81118f2:	461e      	mov	r6, r3
 81118f4:	462c      	mov	r4, r5
 81118f6:	4544      	cmp	r4, r8
 81118f8:	d30e      	bcc.n	8111918 <__mdiff+0xf8>
 81118fa:	f108 0103 	add.w	r1, r8, #3
 81118fe:	1b49      	subs	r1, r1, r5
 8111900:	f021 0103 	bic.w	r1, r1, #3
 8111904:	3d03      	subs	r5, #3
 8111906:	45a8      	cmp	r8, r5
 8111908:	bf38      	it	cc
 811190a:	2100      	movcc	r1, #0
 811190c:	440b      	add	r3, r1
 811190e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8111912:	b191      	cbz	r1, 811193a <__mdiff+0x11a>
 8111914:	6117      	str	r7, [r2, #16]
 8111916:	e79d      	b.n	8111854 <__mdiff+0x34>
 8111918:	f854 1b04 	ldr.w	r1, [r4], #4
 811191c:	46e6      	mov	lr, ip
 811191e:	0c08      	lsrs	r0, r1, #16
 8111920:	fa1c fc81 	uxtah	ip, ip, r1
 8111924:	4471      	add	r1, lr
 8111926:	eb00 402c 	add.w	r0, r0, ip, asr #16
 811192a:	b289      	uxth	r1, r1
 811192c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8111930:	f846 1b04 	str.w	r1, [r6], #4
 8111934:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8111938:	e7dd      	b.n	81118f6 <__mdiff+0xd6>
 811193a:	3f01      	subs	r7, #1
 811193c:	e7e7      	b.n	811190e <__mdiff+0xee>
 811193e:	bf00      	nop
 8111940:	08113af9 	.word	0x08113af9
 8111944:	08113b0a 	.word	0x08113b0a

08111948 <__ulp>:
 8111948:	b082      	sub	sp, #8
 811194a:	ed8d 0b00 	vstr	d0, [sp]
 811194e:	9a01      	ldr	r2, [sp, #4]
 8111950:	4b0f      	ldr	r3, [pc, #60]	@ (8111990 <__ulp+0x48>)
 8111952:	4013      	ands	r3, r2
 8111954:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8111958:	2b00      	cmp	r3, #0
 811195a:	dc08      	bgt.n	811196e <__ulp+0x26>
 811195c:	425b      	negs	r3, r3
 811195e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8111962:	ea4f 5223 	mov.w	r2, r3, asr #20
 8111966:	da04      	bge.n	8111972 <__ulp+0x2a>
 8111968:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 811196c:	4113      	asrs	r3, r2
 811196e:	2200      	movs	r2, #0
 8111970:	e008      	b.n	8111984 <__ulp+0x3c>
 8111972:	f1a2 0314 	sub.w	r3, r2, #20
 8111976:	2b1e      	cmp	r3, #30
 8111978:	bfda      	itte	le
 811197a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 811197e:	40da      	lsrle	r2, r3
 8111980:	2201      	movgt	r2, #1
 8111982:	2300      	movs	r3, #0
 8111984:	4619      	mov	r1, r3
 8111986:	4610      	mov	r0, r2
 8111988:	ec41 0b10 	vmov	d0, r0, r1
 811198c:	b002      	add	sp, #8
 811198e:	4770      	bx	lr
 8111990:	7ff00000 	.word	0x7ff00000

08111994 <__b2d>:
 8111994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111998:	6906      	ldr	r6, [r0, #16]
 811199a:	f100 0814 	add.w	r8, r0, #20
 811199e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 81119a2:	1f37      	subs	r7, r6, #4
 81119a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 81119a8:	4610      	mov	r0, r2
 81119aa:	f7ff fd4b 	bl	8111444 <__hi0bits>
 81119ae:	f1c0 0320 	rsb	r3, r0, #32
 81119b2:	280a      	cmp	r0, #10
 81119b4:	600b      	str	r3, [r1, #0]
 81119b6:	491b      	ldr	r1, [pc, #108]	@ (8111a24 <__b2d+0x90>)
 81119b8:	dc15      	bgt.n	81119e6 <__b2d+0x52>
 81119ba:	f1c0 0c0b 	rsb	ip, r0, #11
 81119be:	fa22 f30c 	lsr.w	r3, r2, ip
 81119c2:	45b8      	cmp	r8, r7
 81119c4:	ea43 0501 	orr.w	r5, r3, r1
 81119c8:	bf34      	ite	cc
 81119ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 81119ce:	2300      	movcs	r3, #0
 81119d0:	3015      	adds	r0, #21
 81119d2:	fa02 f000 	lsl.w	r0, r2, r0
 81119d6:	fa23 f30c 	lsr.w	r3, r3, ip
 81119da:	4303      	orrs	r3, r0
 81119dc:	461c      	mov	r4, r3
 81119de:	ec45 4b10 	vmov	d0, r4, r5
 81119e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81119e6:	45b8      	cmp	r8, r7
 81119e8:	bf3a      	itte	cc
 81119ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 81119ee:	f1a6 0708 	subcc.w	r7, r6, #8
 81119f2:	2300      	movcs	r3, #0
 81119f4:	380b      	subs	r0, #11
 81119f6:	d012      	beq.n	8111a1e <__b2d+0x8a>
 81119f8:	f1c0 0120 	rsb	r1, r0, #32
 81119fc:	fa23 f401 	lsr.w	r4, r3, r1
 8111a00:	4082      	lsls	r2, r0
 8111a02:	4322      	orrs	r2, r4
 8111a04:	4547      	cmp	r7, r8
 8111a06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8111a0a:	bf8c      	ite	hi
 8111a0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8111a10:	2200      	movls	r2, #0
 8111a12:	4083      	lsls	r3, r0
 8111a14:	40ca      	lsrs	r2, r1
 8111a16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8111a1a:	4313      	orrs	r3, r2
 8111a1c:	e7de      	b.n	81119dc <__b2d+0x48>
 8111a1e:	ea42 0501 	orr.w	r5, r2, r1
 8111a22:	e7db      	b.n	81119dc <__b2d+0x48>
 8111a24:	3ff00000 	.word	0x3ff00000

08111a28 <__d2b>:
 8111a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8111a2c:	460f      	mov	r7, r1
 8111a2e:	2101      	movs	r1, #1
 8111a30:	ec59 8b10 	vmov	r8, r9, d0
 8111a34:	4616      	mov	r6, r2
 8111a36:	f7ff fc13 	bl	8111260 <_Balloc>
 8111a3a:	4604      	mov	r4, r0
 8111a3c:	b930      	cbnz	r0, 8111a4c <__d2b+0x24>
 8111a3e:	4602      	mov	r2, r0
 8111a40:	4b23      	ldr	r3, [pc, #140]	@ (8111ad0 <__d2b+0xa8>)
 8111a42:	4824      	ldr	r0, [pc, #144]	@ (8111ad4 <__d2b+0xac>)
 8111a44:	f240 310f 	movw	r1, #783	@ 0x30f
 8111a48:	f7fe fc9e 	bl	8110388 <__assert_func>
 8111a4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8111a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8111a54:	b10d      	cbz	r5, 8111a5a <__d2b+0x32>
 8111a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8111a5a:	9301      	str	r3, [sp, #4]
 8111a5c:	f1b8 0300 	subs.w	r3, r8, #0
 8111a60:	d023      	beq.n	8111aaa <__d2b+0x82>
 8111a62:	4668      	mov	r0, sp
 8111a64:	9300      	str	r3, [sp, #0]
 8111a66:	f7ff fd0c 	bl	8111482 <__lo0bits>
 8111a6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8111a6e:	b1d0      	cbz	r0, 8111aa6 <__d2b+0x7e>
 8111a70:	f1c0 0320 	rsb	r3, r0, #32
 8111a74:	fa02 f303 	lsl.w	r3, r2, r3
 8111a78:	430b      	orrs	r3, r1
 8111a7a:	40c2      	lsrs	r2, r0
 8111a7c:	6163      	str	r3, [r4, #20]
 8111a7e:	9201      	str	r2, [sp, #4]
 8111a80:	9b01      	ldr	r3, [sp, #4]
 8111a82:	61a3      	str	r3, [r4, #24]
 8111a84:	2b00      	cmp	r3, #0
 8111a86:	bf0c      	ite	eq
 8111a88:	2201      	moveq	r2, #1
 8111a8a:	2202      	movne	r2, #2
 8111a8c:	6122      	str	r2, [r4, #16]
 8111a8e:	b1a5      	cbz	r5, 8111aba <__d2b+0x92>
 8111a90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8111a94:	4405      	add	r5, r0
 8111a96:	603d      	str	r5, [r7, #0]
 8111a98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8111a9c:	6030      	str	r0, [r6, #0]
 8111a9e:	4620      	mov	r0, r4
 8111aa0:	b003      	add	sp, #12
 8111aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8111aa6:	6161      	str	r1, [r4, #20]
 8111aa8:	e7ea      	b.n	8111a80 <__d2b+0x58>
 8111aaa:	a801      	add	r0, sp, #4
 8111aac:	f7ff fce9 	bl	8111482 <__lo0bits>
 8111ab0:	9b01      	ldr	r3, [sp, #4]
 8111ab2:	6163      	str	r3, [r4, #20]
 8111ab4:	3020      	adds	r0, #32
 8111ab6:	2201      	movs	r2, #1
 8111ab8:	e7e8      	b.n	8111a8c <__d2b+0x64>
 8111aba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8111abe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8111ac2:	6038      	str	r0, [r7, #0]
 8111ac4:	6918      	ldr	r0, [r3, #16]
 8111ac6:	f7ff fcbd 	bl	8111444 <__hi0bits>
 8111aca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8111ace:	e7e5      	b.n	8111a9c <__d2b+0x74>
 8111ad0:	08113af9 	.word	0x08113af9
 8111ad4:	08113b0a 	.word	0x08113b0a

08111ad8 <__ratio>:
 8111ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111adc:	b085      	sub	sp, #20
 8111ade:	e9cd 1000 	strd	r1, r0, [sp]
 8111ae2:	a902      	add	r1, sp, #8
 8111ae4:	f7ff ff56 	bl	8111994 <__b2d>
 8111ae8:	9800      	ldr	r0, [sp, #0]
 8111aea:	a903      	add	r1, sp, #12
 8111aec:	ec55 4b10 	vmov	r4, r5, d0
 8111af0:	f7ff ff50 	bl	8111994 <__b2d>
 8111af4:	9b01      	ldr	r3, [sp, #4]
 8111af6:	6919      	ldr	r1, [r3, #16]
 8111af8:	9b00      	ldr	r3, [sp, #0]
 8111afa:	691b      	ldr	r3, [r3, #16]
 8111afc:	1ac9      	subs	r1, r1, r3
 8111afe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8111b02:	1a9b      	subs	r3, r3, r2
 8111b04:	ec5b ab10 	vmov	sl, fp, d0
 8111b08:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8111b0c:	2b00      	cmp	r3, #0
 8111b0e:	bfce      	itee	gt
 8111b10:	462a      	movgt	r2, r5
 8111b12:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8111b16:	465a      	movle	r2, fp
 8111b18:	462f      	mov	r7, r5
 8111b1a:	46d9      	mov	r9, fp
 8111b1c:	bfcc      	ite	gt
 8111b1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8111b22:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8111b26:	464b      	mov	r3, r9
 8111b28:	4652      	mov	r2, sl
 8111b2a:	4620      	mov	r0, r4
 8111b2c:	4639      	mov	r1, r7
 8111b2e:	f7ee ff15 	bl	810095c <__aeabi_ddiv>
 8111b32:	ec41 0b10 	vmov	d0, r0, r1
 8111b36:	b005      	add	sp, #20
 8111b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08111b3c <__copybits>:
 8111b3c:	3901      	subs	r1, #1
 8111b3e:	b570      	push	{r4, r5, r6, lr}
 8111b40:	1149      	asrs	r1, r1, #5
 8111b42:	6914      	ldr	r4, [r2, #16]
 8111b44:	3101      	adds	r1, #1
 8111b46:	f102 0314 	add.w	r3, r2, #20
 8111b4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8111b4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8111b52:	1f05      	subs	r5, r0, #4
 8111b54:	42a3      	cmp	r3, r4
 8111b56:	d30c      	bcc.n	8111b72 <__copybits+0x36>
 8111b58:	1aa3      	subs	r3, r4, r2
 8111b5a:	3b11      	subs	r3, #17
 8111b5c:	f023 0303 	bic.w	r3, r3, #3
 8111b60:	3211      	adds	r2, #17
 8111b62:	42a2      	cmp	r2, r4
 8111b64:	bf88      	it	hi
 8111b66:	2300      	movhi	r3, #0
 8111b68:	4418      	add	r0, r3
 8111b6a:	2300      	movs	r3, #0
 8111b6c:	4288      	cmp	r0, r1
 8111b6e:	d305      	bcc.n	8111b7c <__copybits+0x40>
 8111b70:	bd70      	pop	{r4, r5, r6, pc}
 8111b72:	f853 6b04 	ldr.w	r6, [r3], #4
 8111b76:	f845 6f04 	str.w	r6, [r5, #4]!
 8111b7a:	e7eb      	b.n	8111b54 <__copybits+0x18>
 8111b7c:	f840 3b04 	str.w	r3, [r0], #4
 8111b80:	e7f4      	b.n	8111b6c <__copybits+0x30>

08111b82 <__any_on>:
 8111b82:	f100 0214 	add.w	r2, r0, #20
 8111b86:	6900      	ldr	r0, [r0, #16]
 8111b88:	114b      	asrs	r3, r1, #5
 8111b8a:	4298      	cmp	r0, r3
 8111b8c:	b510      	push	{r4, lr}
 8111b8e:	db11      	blt.n	8111bb4 <__any_on+0x32>
 8111b90:	dd0a      	ble.n	8111ba8 <__any_on+0x26>
 8111b92:	f011 011f 	ands.w	r1, r1, #31
 8111b96:	d007      	beq.n	8111ba8 <__any_on+0x26>
 8111b98:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8111b9c:	fa24 f001 	lsr.w	r0, r4, r1
 8111ba0:	fa00 f101 	lsl.w	r1, r0, r1
 8111ba4:	428c      	cmp	r4, r1
 8111ba6:	d10b      	bne.n	8111bc0 <__any_on+0x3e>
 8111ba8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8111bac:	4293      	cmp	r3, r2
 8111bae:	d803      	bhi.n	8111bb8 <__any_on+0x36>
 8111bb0:	2000      	movs	r0, #0
 8111bb2:	bd10      	pop	{r4, pc}
 8111bb4:	4603      	mov	r3, r0
 8111bb6:	e7f7      	b.n	8111ba8 <__any_on+0x26>
 8111bb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8111bbc:	2900      	cmp	r1, #0
 8111bbe:	d0f5      	beq.n	8111bac <__any_on+0x2a>
 8111bc0:	2001      	movs	r0, #1
 8111bc2:	e7f6      	b.n	8111bb2 <__any_on+0x30>

08111bc4 <sulp>:
 8111bc4:	b570      	push	{r4, r5, r6, lr}
 8111bc6:	4604      	mov	r4, r0
 8111bc8:	460d      	mov	r5, r1
 8111bca:	ec45 4b10 	vmov	d0, r4, r5
 8111bce:	4616      	mov	r6, r2
 8111bd0:	f7ff feba 	bl	8111948 <__ulp>
 8111bd4:	ec51 0b10 	vmov	r0, r1, d0
 8111bd8:	b17e      	cbz	r6, 8111bfa <sulp+0x36>
 8111bda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8111bde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8111be2:	2b00      	cmp	r3, #0
 8111be4:	dd09      	ble.n	8111bfa <sulp+0x36>
 8111be6:	051b      	lsls	r3, r3, #20
 8111be8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8111bec:	2400      	movs	r4, #0
 8111bee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8111bf2:	4622      	mov	r2, r4
 8111bf4:	462b      	mov	r3, r5
 8111bf6:	f7ee fd87 	bl	8100708 <__aeabi_dmul>
 8111bfa:	ec41 0b10 	vmov	d0, r0, r1
 8111bfe:	bd70      	pop	{r4, r5, r6, pc}

08111c00 <_strtod_l>:
 8111c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111c04:	b09f      	sub	sp, #124	@ 0x7c
 8111c06:	460c      	mov	r4, r1
 8111c08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8111c0a:	2200      	movs	r2, #0
 8111c0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8111c0e:	9005      	str	r0, [sp, #20]
 8111c10:	f04f 0a00 	mov.w	sl, #0
 8111c14:	f04f 0b00 	mov.w	fp, #0
 8111c18:	460a      	mov	r2, r1
 8111c1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8111c1c:	7811      	ldrb	r1, [r2, #0]
 8111c1e:	292b      	cmp	r1, #43	@ 0x2b
 8111c20:	d04a      	beq.n	8111cb8 <_strtod_l+0xb8>
 8111c22:	d838      	bhi.n	8111c96 <_strtod_l+0x96>
 8111c24:	290d      	cmp	r1, #13
 8111c26:	d832      	bhi.n	8111c8e <_strtod_l+0x8e>
 8111c28:	2908      	cmp	r1, #8
 8111c2a:	d832      	bhi.n	8111c92 <_strtod_l+0x92>
 8111c2c:	2900      	cmp	r1, #0
 8111c2e:	d03b      	beq.n	8111ca8 <_strtod_l+0xa8>
 8111c30:	2200      	movs	r2, #0
 8111c32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8111c34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8111c36:	782a      	ldrb	r2, [r5, #0]
 8111c38:	2a30      	cmp	r2, #48	@ 0x30
 8111c3a:	f040 80b3 	bne.w	8111da4 <_strtod_l+0x1a4>
 8111c3e:	786a      	ldrb	r2, [r5, #1]
 8111c40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8111c44:	2a58      	cmp	r2, #88	@ 0x58
 8111c46:	d16e      	bne.n	8111d26 <_strtod_l+0x126>
 8111c48:	9302      	str	r3, [sp, #8]
 8111c4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111c4c:	9301      	str	r3, [sp, #4]
 8111c4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8111c50:	9300      	str	r3, [sp, #0]
 8111c52:	4a8e      	ldr	r2, [pc, #568]	@ (8111e8c <_strtod_l+0x28c>)
 8111c54:	9805      	ldr	r0, [sp, #20]
 8111c56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8111c58:	a919      	add	r1, sp, #100	@ 0x64
 8111c5a:	f001 fadb 	bl	8113214 <__gethex>
 8111c5e:	f010 060f 	ands.w	r6, r0, #15
 8111c62:	4604      	mov	r4, r0
 8111c64:	d005      	beq.n	8111c72 <_strtod_l+0x72>
 8111c66:	2e06      	cmp	r6, #6
 8111c68:	d128      	bne.n	8111cbc <_strtod_l+0xbc>
 8111c6a:	3501      	adds	r5, #1
 8111c6c:	2300      	movs	r3, #0
 8111c6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8111c70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8111c72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8111c74:	2b00      	cmp	r3, #0
 8111c76:	f040 858e 	bne.w	8112796 <_strtod_l+0xb96>
 8111c7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111c7c:	b1cb      	cbz	r3, 8111cb2 <_strtod_l+0xb2>
 8111c7e:	4652      	mov	r2, sl
 8111c80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8111c84:	ec43 2b10 	vmov	d0, r2, r3
 8111c88:	b01f      	add	sp, #124	@ 0x7c
 8111c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111c8e:	2920      	cmp	r1, #32
 8111c90:	d1ce      	bne.n	8111c30 <_strtod_l+0x30>
 8111c92:	3201      	adds	r2, #1
 8111c94:	e7c1      	b.n	8111c1a <_strtod_l+0x1a>
 8111c96:	292d      	cmp	r1, #45	@ 0x2d
 8111c98:	d1ca      	bne.n	8111c30 <_strtod_l+0x30>
 8111c9a:	2101      	movs	r1, #1
 8111c9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8111c9e:	1c51      	adds	r1, r2, #1
 8111ca0:	9119      	str	r1, [sp, #100]	@ 0x64
 8111ca2:	7852      	ldrb	r2, [r2, #1]
 8111ca4:	2a00      	cmp	r2, #0
 8111ca6:	d1c5      	bne.n	8111c34 <_strtod_l+0x34>
 8111ca8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8111caa:	9419      	str	r4, [sp, #100]	@ 0x64
 8111cac:	2b00      	cmp	r3, #0
 8111cae:	f040 8570 	bne.w	8112792 <_strtod_l+0xb92>
 8111cb2:	4652      	mov	r2, sl
 8111cb4:	465b      	mov	r3, fp
 8111cb6:	e7e5      	b.n	8111c84 <_strtod_l+0x84>
 8111cb8:	2100      	movs	r1, #0
 8111cba:	e7ef      	b.n	8111c9c <_strtod_l+0x9c>
 8111cbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8111cbe:	b13a      	cbz	r2, 8111cd0 <_strtod_l+0xd0>
 8111cc0:	2135      	movs	r1, #53	@ 0x35
 8111cc2:	a81c      	add	r0, sp, #112	@ 0x70
 8111cc4:	f7ff ff3a 	bl	8111b3c <__copybits>
 8111cc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8111cca:	9805      	ldr	r0, [sp, #20]
 8111ccc:	f7ff fb08 	bl	81112e0 <_Bfree>
 8111cd0:	3e01      	subs	r6, #1
 8111cd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8111cd4:	2e04      	cmp	r6, #4
 8111cd6:	d806      	bhi.n	8111ce6 <_strtod_l+0xe6>
 8111cd8:	e8df f006 	tbb	[pc, r6]
 8111cdc:	201d0314 	.word	0x201d0314
 8111ce0:	14          	.byte	0x14
 8111ce1:	00          	.byte	0x00
 8111ce2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8111ce6:	05e1      	lsls	r1, r4, #23
 8111ce8:	bf48      	it	mi
 8111cea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8111cee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8111cf2:	0d1b      	lsrs	r3, r3, #20
 8111cf4:	051b      	lsls	r3, r3, #20
 8111cf6:	2b00      	cmp	r3, #0
 8111cf8:	d1bb      	bne.n	8111c72 <_strtod_l+0x72>
 8111cfa:	f7fe fb03 	bl	8110304 <__errno>
 8111cfe:	2322      	movs	r3, #34	@ 0x22
 8111d00:	6003      	str	r3, [r0, #0]
 8111d02:	e7b6      	b.n	8111c72 <_strtod_l+0x72>
 8111d04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8111d08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8111d0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8111d10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8111d14:	e7e7      	b.n	8111ce6 <_strtod_l+0xe6>
 8111d16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8111e94 <_strtod_l+0x294>
 8111d1a:	e7e4      	b.n	8111ce6 <_strtod_l+0xe6>
 8111d1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8111d20:	f04f 3aff 	mov.w	sl, #4294967295
 8111d24:	e7df      	b.n	8111ce6 <_strtod_l+0xe6>
 8111d26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111d28:	1c5a      	adds	r2, r3, #1
 8111d2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8111d2c:	785b      	ldrb	r3, [r3, #1]
 8111d2e:	2b30      	cmp	r3, #48	@ 0x30
 8111d30:	d0f9      	beq.n	8111d26 <_strtod_l+0x126>
 8111d32:	2b00      	cmp	r3, #0
 8111d34:	d09d      	beq.n	8111c72 <_strtod_l+0x72>
 8111d36:	2301      	movs	r3, #1
 8111d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8111d3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111d3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8111d3e:	2300      	movs	r3, #0
 8111d40:	9308      	str	r3, [sp, #32]
 8111d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8111d44:	461f      	mov	r7, r3
 8111d46:	220a      	movs	r2, #10
 8111d48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8111d4a:	7805      	ldrb	r5, [r0, #0]
 8111d4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8111d50:	b2d9      	uxtb	r1, r3
 8111d52:	2909      	cmp	r1, #9
 8111d54:	d928      	bls.n	8111da8 <_strtod_l+0x1a8>
 8111d56:	494e      	ldr	r1, [pc, #312]	@ (8111e90 <_strtod_l+0x290>)
 8111d58:	2201      	movs	r2, #1
 8111d5a:	f001 f98b 	bl	8113074 <strncmp>
 8111d5e:	2800      	cmp	r0, #0
 8111d60:	d032      	beq.n	8111dc8 <_strtod_l+0x1c8>
 8111d62:	2000      	movs	r0, #0
 8111d64:	462a      	mov	r2, r5
 8111d66:	4681      	mov	r9, r0
 8111d68:	463d      	mov	r5, r7
 8111d6a:	4603      	mov	r3, r0
 8111d6c:	2a65      	cmp	r2, #101	@ 0x65
 8111d6e:	d001      	beq.n	8111d74 <_strtod_l+0x174>
 8111d70:	2a45      	cmp	r2, #69	@ 0x45
 8111d72:	d114      	bne.n	8111d9e <_strtod_l+0x19e>
 8111d74:	b91d      	cbnz	r5, 8111d7e <_strtod_l+0x17e>
 8111d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8111d78:	4302      	orrs	r2, r0
 8111d7a:	d095      	beq.n	8111ca8 <_strtod_l+0xa8>
 8111d7c:	2500      	movs	r5, #0
 8111d7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8111d80:	1c62      	adds	r2, r4, #1
 8111d82:	9219      	str	r2, [sp, #100]	@ 0x64
 8111d84:	7862      	ldrb	r2, [r4, #1]
 8111d86:	2a2b      	cmp	r2, #43	@ 0x2b
 8111d88:	d077      	beq.n	8111e7a <_strtod_l+0x27a>
 8111d8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8111d8c:	d07b      	beq.n	8111e86 <_strtod_l+0x286>
 8111d8e:	f04f 0c00 	mov.w	ip, #0
 8111d92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8111d96:	2909      	cmp	r1, #9
 8111d98:	f240 8082 	bls.w	8111ea0 <_strtod_l+0x2a0>
 8111d9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8111d9e:	f04f 0800 	mov.w	r8, #0
 8111da2:	e0a2      	b.n	8111eea <_strtod_l+0x2ea>
 8111da4:	2300      	movs	r3, #0
 8111da6:	e7c7      	b.n	8111d38 <_strtod_l+0x138>
 8111da8:	2f08      	cmp	r7, #8
 8111daa:	bfd5      	itete	le
 8111dac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8111dae:	9908      	ldrgt	r1, [sp, #32]
 8111db0:	fb02 3301 	mlale	r3, r2, r1, r3
 8111db4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8111db8:	f100 0001 	add.w	r0, r0, #1
 8111dbc:	bfd4      	ite	le
 8111dbe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8111dc0:	9308      	strgt	r3, [sp, #32]
 8111dc2:	3701      	adds	r7, #1
 8111dc4:	9019      	str	r0, [sp, #100]	@ 0x64
 8111dc6:	e7bf      	b.n	8111d48 <_strtod_l+0x148>
 8111dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111dca:	1c5a      	adds	r2, r3, #1
 8111dcc:	9219      	str	r2, [sp, #100]	@ 0x64
 8111dce:	785a      	ldrb	r2, [r3, #1]
 8111dd0:	b37f      	cbz	r7, 8111e32 <_strtod_l+0x232>
 8111dd2:	4681      	mov	r9, r0
 8111dd4:	463d      	mov	r5, r7
 8111dd6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8111dda:	2b09      	cmp	r3, #9
 8111ddc:	d912      	bls.n	8111e04 <_strtod_l+0x204>
 8111dde:	2301      	movs	r3, #1
 8111de0:	e7c4      	b.n	8111d6c <_strtod_l+0x16c>
 8111de2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111de4:	1c5a      	adds	r2, r3, #1
 8111de6:	9219      	str	r2, [sp, #100]	@ 0x64
 8111de8:	785a      	ldrb	r2, [r3, #1]
 8111dea:	3001      	adds	r0, #1
 8111dec:	2a30      	cmp	r2, #48	@ 0x30
 8111dee:	d0f8      	beq.n	8111de2 <_strtod_l+0x1e2>
 8111df0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8111df4:	2b08      	cmp	r3, #8
 8111df6:	f200 84d3 	bhi.w	81127a0 <_strtod_l+0xba0>
 8111dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111dfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8111dfe:	4681      	mov	r9, r0
 8111e00:	2000      	movs	r0, #0
 8111e02:	4605      	mov	r5, r0
 8111e04:	3a30      	subs	r2, #48	@ 0x30
 8111e06:	f100 0301 	add.w	r3, r0, #1
 8111e0a:	d02a      	beq.n	8111e62 <_strtod_l+0x262>
 8111e0c:	4499      	add	r9, r3
 8111e0e:	eb00 0c05 	add.w	ip, r0, r5
 8111e12:	462b      	mov	r3, r5
 8111e14:	210a      	movs	r1, #10
 8111e16:	4563      	cmp	r3, ip
 8111e18:	d10d      	bne.n	8111e36 <_strtod_l+0x236>
 8111e1a:	1c69      	adds	r1, r5, #1
 8111e1c:	4401      	add	r1, r0
 8111e1e:	4428      	add	r0, r5
 8111e20:	2808      	cmp	r0, #8
 8111e22:	dc16      	bgt.n	8111e52 <_strtod_l+0x252>
 8111e24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8111e26:	230a      	movs	r3, #10
 8111e28:	fb03 2300 	mla	r3, r3, r0, r2
 8111e2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8111e2e:	2300      	movs	r3, #0
 8111e30:	e018      	b.n	8111e64 <_strtod_l+0x264>
 8111e32:	4638      	mov	r0, r7
 8111e34:	e7da      	b.n	8111dec <_strtod_l+0x1ec>
 8111e36:	2b08      	cmp	r3, #8
 8111e38:	f103 0301 	add.w	r3, r3, #1
 8111e3c:	dc03      	bgt.n	8111e46 <_strtod_l+0x246>
 8111e3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8111e40:	434e      	muls	r6, r1
 8111e42:	960a      	str	r6, [sp, #40]	@ 0x28
 8111e44:	e7e7      	b.n	8111e16 <_strtod_l+0x216>
 8111e46:	2b10      	cmp	r3, #16
 8111e48:	bfde      	ittt	le
 8111e4a:	9e08      	ldrle	r6, [sp, #32]
 8111e4c:	434e      	mulle	r6, r1
 8111e4e:	9608      	strle	r6, [sp, #32]
 8111e50:	e7e1      	b.n	8111e16 <_strtod_l+0x216>
 8111e52:	280f      	cmp	r0, #15
 8111e54:	dceb      	bgt.n	8111e2e <_strtod_l+0x22e>
 8111e56:	9808      	ldr	r0, [sp, #32]
 8111e58:	230a      	movs	r3, #10
 8111e5a:	fb03 2300 	mla	r3, r3, r0, r2
 8111e5e:	9308      	str	r3, [sp, #32]
 8111e60:	e7e5      	b.n	8111e2e <_strtod_l+0x22e>
 8111e62:	4629      	mov	r1, r5
 8111e64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8111e66:	1c50      	adds	r0, r2, #1
 8111e68:	9019      	str	r0, [sp, #100]	@ 0x64
 8111e6a:	7852      	ldrb	r2, [r2, #1]
 8111e6c:	4618      	mov	r0, r3
 8111e6e:	460d      	mov	r5, r1
 8111e70:	e7b1      	b.n	8111dd6 <_strtod_l+0x1d6>
 8111e72:	f04f 0900 	mov.w	r9, #0
 8111e76:	2301      	movs	r3, #1
 8111e78:	e77d      	b.n	8111d76 <_strtod_l+0x176>
 8111e7a:	f04f 0c00 	mov.w	ip, #0
 8111e7e:	1ca2      	adds	r2, r4, #2
 8111e80:	9219      	str	r2, [sp, #100]	@ 0x64
 8111e82:	78a2      	ldrb	r2, [r4, #2]
 8111e84:	e785      	b.n	8111d92 <_strtod_l+0x192>
 8111e86:	f04f 0c01 	mov.w	ip, #1
 8111e8a:	e7f8      	b.n	8111e7e <_strtod_l+0x27e>
 8111e8c:	08113c78 	.word	0x08113c78
 8111e90:	08113c60 	.word	0x08113c60
 8111e94:	7ff00000 	.word	0x7ff00000
 8111e98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8111e9a:	1c51      	adds	r1, r2, #1
 8111e9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8111e9e:	7852      	ldrb	r2, [r2, #1]
 8111ea0:	2a30      	cmp	r2, #48	@ 0x30
 8111ea2:	d0f9      	beq.n	8111e98 <_strtod_l+0x298>
 8111ea4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8111ea8:	2908      	cmp	r1, #8
 8111eaa:	f63f af78 	bhi.w	8111d9e <_strtod_l+0x19e>
 8111eae:	3a30      	subs	r2, #48	@ 0x30
 8111eb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8111eb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8111eb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8111eb6:	f04f 080a 	mov.w	r8, #10
 8111eba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8111ebc:	1c56      	adds	r6, r2, #1
 8111ebe:	9619      	str	r6, [sp, #100]	@ 0x64
 8111ec0:	7852      	ldrb	r2, [r2, #1]
 8111ec2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8111ec6:	f1be 0f09 	cmp.w	lr, #9
 8111eca:	d939      	bls.n	8111f40 <_strtod_l+0x340>
 8111ecc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8111ece:	1a76      	subs	r6, r6, r1
 8111ed0:	2e08      	cmp	r6, #8
 8111ed2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8111ed6:	dc03      	bgt.n	8111ee0 <_strtod_l+0x2e0>
 8111ed8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8111eda:	4588      	cmp	r8, r1
 8111edc:	bfa8      	it	ge
 8111ede:	4688      	movge	r8, r1
 8111ee0:	f1bc 0f00 	cmp.w	ip, #0
 8111ee4:	d001      	beq.n	8111eea <_strtod_l+0x2ea>
 8111ee6:	f1c8 0800 	rsb	r8, r8, #0
 8111eea:	2d00      	cmp	r5, #0
 8111eec:	d14e      	bne.n	8111f8c <_strtod_l+0x38c>
 8111eee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8111ef0:	4308      	orrs	r0, r1
 8111ef2:	f47f aebe 	bne.w	8111c72 <_strtod_l+0x72>
 8111ef6:	2b00      	cmp	r3, #0
 8111ef8:	f47f aed6 	bne.w	8111ca8 <_strtod_l+0xa8>
 8111efc:	2a69      	cmp	r2, #105	@ 0x69
 8111efe:	d028      	beq.n	8111f52 <_strtod_l+0x352>
 8111f00:	dc25      	bgt.n	8111f4e <_strtod_l+0x34e>
 8111f02:	2a49      	cmp	r2, #73	@ 0x49
 8111f04:	d025      	beq.n	8111f52 <_strtod_l+0x352>
 8111f06:	2a4e      	cmp	r2, #78	@ 0x4e
 8111f08:	f47f aece 	bne.w	8111ca8 <_strtod_l+0xa8>
 8111f0c:	499b      	ldr	r1, [pc, #620]	@ (811217c <_strtod_l+0x57c>)
 8111f0e:	a819      	add	r0, sp, #100	@ 0x64
 8111f10:	f001 fba2 	bl	8113658 <__match>
 8111f14:	2800      	cmp	r0, #0
 8111f16:	f43f aec7 	beq.w	8111ca8 <_strtod_l+0xa8>
 8111f1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111f1c:	781b      	ldrb	r3, [r3, #0]
 8111f1e:	2b28      	cmp	r3, #40	@ 0x28
 8111f20:	d12e      	bne.n	8111f80 <_strtod_l+0x380>
 8111f22:	4997      	ldr	r1, [pc, #604]	@ (8112180 <_strtod_l+0x580>)
 8111f24:	aa1c      	add	r2, sp, #112	@ 0x70
 8111f26:	a819      	add	r0, sp, #100	@ 0x64
 8111f28:	f001 fbaa 	bl	8113680 <__hexnan>
 8111f2c:	2805      	cmp	r0, #5
 8111f2e:	d127      	bne.n	8111f80 <_strtod_l+0x380>
 8111f30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8111f32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8111f36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8111f3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8111f3e:	e698      	b.n	8111c72 <_strtod_l+0x72>
 8111f40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8111f42:	fb08 2101 	mla	r1, r8, r1, r2
 8111f46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8111f4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8111f4c:	e7b5      	b.n	8111eba <_strtod_l+0x2ba>
 8111f4e:	2a6e      	cmp	r2, #110	@ 0x6e
 8111f50:	e7da      	b.n	8111f08 <_strtod_l+0x308>
 8111f52:	498c      	ldr	r1, [pc, #560]	@ (8112184 <_strtod_l+0x584>)
 8111f54:	a819      	add	r0, sp, #100	@ 0x64
 8111f56:	f001 fb7f 	bl	8113658 <__match>
 8111f5a:	2800      	cmp	r0, #0
 8111f5c:	f43f aea4 	beq.w	8111ca8 <_strtod_l+0xa8>
 8111f60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111f62:	4989      	ldr	r1, [pc, #548]	@ (8112188 <_strtod_l+0x588>)
 8111f64:	3b01      	subs	r3, #1
 8111f66:	a819      	add	r0, sp, #100	@ 0x64
 8111f68:	9319      	str	r3, [sp, #100]	@ 0x64
 8111f6a:	f001 fb75 	bl	8113658 <__match>
 8111f6e:	b910      	cbnz	r0, 8111f76 <_strtod_l+0x376>
 8111f70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8111f72:	3301      	adds	r3, #1
 8111f74:	9319      	str	r3, [sp, #100]	@ 0x64
 8111f76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8112198 <_strtod_l+0x598>
 8111f7a:	f04f 0a00 	mov.w	sl, #0
 8111f7e:	e678      	b.n	8111c72 <_strtod_l+0x72>
 8111f80:	4882      	ldr	r0, [pc, #520]	@ (811218c <_strtod_l+0x58c>)
 8111f82:	f001 f8bd 	bl	8113100 <nan>
 8111f86:	ec5b ab10 	vmov	sl, fp, d0
 8111f8a:	e672      	b.n	8111c72 <_strtod_l+0x72>
 8111f8c:	eba8 0309 	sub.w	r3, r8, r9
 8111f90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8111f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8111f94:	2f00      	cmp	r7, #0
 8111f96:	bf08      	it	eq
 8111f98:	462f      	moveq	r7, r5
 8111f9a:	2d10      	cmp	r5, #16
 8111f9c:	462c      	mov	r4, r5
 8111f9e:	bfa8      	it	ge
 8111fa0:	2410      	movge	r4, #16
 8111fa2:	f7ee fb37 	bl	8100614 <__aeabi_ui2d>
 8111fa6:	2d09      	cmp	r5, #9
 8111fa8:	4682      	mov	sl, r0
 8111faa:	468b      	mov	fp, r1
 8111fac:	dc13      	bgt.n	8111fd6 <_strtod_l+0x3d6>
 8111fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111fb0:	2b00      	cmp	r3, #0
 8111fb2:	f43f ae5e 	beq.w	8111c72 <_strtod_l+0x72>
 8111fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111fb8:	dd78      	ble.n	81120ac <_strtod_l+0x4ac>
 8111fba:	2b16      	cmp	r3, #22
 8111fbc:	dc5f      	bgt.n	811207e <_strtod_l+0x47e>
 8111fbe:	4974      	ldr	r1, [pc, #464]	@ (8112190 <_strtod_l+0x590>)
 8111fc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8111fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8111fc8:	4652      	mov	r2, sl
 8111fca:	465b      	mov	r3, fp
 8111fcc:	f7ee fb9c 	bl	8100708 <__aeabi_dmul>
 8111fd0:	4682      	mov	sl, r0
 8111fd2:	468b      	mov	fp, r1
 8111fd4:	e64d      	b.n	8111c72 <_strtod_l+0x72>
 8111fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8112190 <_strtod_l+0x590>)
 8111fd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8111fdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8111fe0:	f7ee fb92 	bl	8100708 <__aeabi_dmul>
 8111fe4:	4682      	mov	sl, r0
 8111fe6:	9808      	ldr	r0, [sp, #32]
 8111fe8:	468b      	mov	fp, r1
 8111fea:	f7ee fb13 	bl	8100614 <__aeabi_ui2d>
 8111fee:	4602      	mov	r2, r0
 8111ff0:	460b      	mov	r3, r1
 8111ff2:	4650      	mov	r0, sl
 8111ff4:	4659      	mov	r1, fp
 8111ff6:	f7ee f9d1 	bl	810039c <__adddf3>
 8111ffa:	2d0f      	cmp	r5, #15
 8111ffc:	4682      	mov	sl, r0
 8111ffe:	468b      	mov	fp, r1
 8112000:	ddd5      	ble.n	8111fae <_strtod_l+0x3ae>
 8112002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112004:	1b2c      	subs	r4, r5, r4
 8112006:	441c      	add	r4, r3
 8112008:	2c00      	cmp	r4, #0
 811200a:	f340 8096 	ble.w	811213a <_strtod_l+0x53a>
 811200e:	f014 030f 	ands.w	r3, r4, #15
 8112012:	d00a      	beq.n	811202a <_strtod_l+0x42a>
 8112014:	495e      	ldr	r1, [pc, #376]	@ (8112190 <_strtod_l+0x590>)
 8112016:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 811201a:	4652      	mov	r2, sl
 811201c:	465b      	mov	r3, fp
 811201e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8112022:	f7ee fb71 	bl	8100708 <__aeabi_dmul>
 8112026:	4682      	mov	sl, r0
 8112028:	468b      	mov	fp, r1
 811202a:	f034 040f 	bics.w	r4, r4, #15
 811202e:	d073      	beq.n	8112118 <_strtod_l+0x518>
 8112030:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8112034:	dd48      	ble.n	81120c8 <_strtod_l+0x4c8>
 8112036:	2400      	movs	r4, #0
 8112038:	46a0      	mov	r8, r4
 811203a:	940a      	str	r4, [sp, #40]	@ 0x28
 811203c:	46a1      	mov	r9, r4
 811203e:	9a05      	ldr	r2, [sp, #20]
 8112040:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8112198 <_strtod_l+0x598>
 8112044:	2322      	movs	r3, #34	@ 0x22
 8112046:	6013      	str	r3, [r2, #0]
 8112048:	f04f 0a00 	mov.w	sl, #0
 811204c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811204e:	2b00      	cmp	r3, #0
 8112050:	f43f ae0f 	beq.w	8111c72 <_strtod_l+0x72>
 8112054:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8112056:	9805      	ldr	r0, [sp, #20]
 8112058:	f7ff f942 	bl	81112e0 <_Bfree>
 811205c:	9805      	ldr	r0, [sp, #20]
 811205e:	4649      	mov	r1, r9
 8112060:	f7ff f93e 	bl	81112e0 <_Bfree>
 8112064:	9805      	ldr	r0, [sp, #20]
 8112066:	4641      	mov	r1, r8
 8112068:	f7ff f93a 	bl	81112e0 <_Bfree>
 811206c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 811206e:	9805      	ldr	r0, [sp, #20]
 8112070:	f7ff f936 	bl	81112e0 <_Bfree>
 8112074:	9805      	ldr	r0, [sp, #20]
 8112076:	4621      	mov	r1, r4
 8112078:	f7ff f932 	bl	81112e0 <_Bfree>
 811207c:	e5f9      	b.n	8111c72 <_strtod_l+0x72>
 811207e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112080:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8112084:	4293      	cmp	r3, r2
 8112086:	dbbc      	blt.n	8112002 <_strtod_l+0x402>
 8112088:	4c41      	ldr	r4, [pc, #260]	@ (8112190 <_strtod_l+0x590>)
 811208a:	f1c5 050f 	rsb	r5, r5, #15
 811208e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8112092:	4652      	mov	r2, sl
 8112094:	465b      	mov	r3, fp
 8112096:	e9d1 0100 	ldrd	r0, r1, [r1]
 811209a:	f7ee fb35 	bl	8100708 <__aeabi_dmul>
 811209e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81120a0:	1b5d      	subs	r5, r3, r5
 81120a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81120a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 81120aa:	e78f      	b.n	8111fcc <_strtod_l+0x3cc>
 81120ac:	3316      	adds	r3, #22
 81120ae:	dba8      	blt.n	8112002 <_strtod_l+0x402>
 81120b0:	4b37      	ldr	r3, [pc, #220]	@ (8112190 <_strtod_l+0x590>)
 81120b2:	eba9 0808 	sub.w	r8, r9, r8
 81120b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 81120ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 81120be:	4650      	mov	r0, sl
 81120c0:	4659      	mov	r1, fp
 81120c2:	f7ee fc4b 	bl	810095c <__aeabi_ddiv>
 81120c6:	e783      	b.n	8111fd0 <_strtod_l+0x3d0>
 81120c8:	4b32      	ldr	r3, [pc, #200]	@ (8112194 <_strtod_l+0x594>)
 81120ca:	9308      	str	r3, [sp, #32]
 81120cc:	2300      	movs	r3, #0
 81120ce:	1124      	asrs	r4, r4, #4
 81120d0:	4650      	mov	r0, sl
 81120d2:	4659      	mov	r1, fp
 81120d4:	461e      	mov	r6, r3
 81120d6:	2c01      	cmp	r4, #1
 81120d8:	dc21      	bgt.n	811211e <_strtod_l+0x51e>
 81120da:	b10b      	cbz	r3, 81120e0 <_strtod_l+0x4e0>
 81120dc:	4682      	mov	sl, r0
 81120de:	468b      	mov	fp, r1
 81120e0:	492c      	ldr	r1, [pc, #176]	@ (8112194 <_strtod_l+0x594>)
 81120e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 81120e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 81120ea:	4652      	mov	r2, sl
 81120ec:	465b      	mov	r3, fp
 81120ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 81120f2:	f7ee fb09 	bl	8100708 <__aeabi_dmul>
 81120f6:	4b28      	ldr	r3, [pc, #160]	@ (8112198 <_strtod_l+0x598>)
 81120f8:	460a      	mov	r2, r1
 81120fa:	400b      	ands	r3, r1
 81120fc:	4927      	ldr	r1, [pc, #156]	@ (811219c <_strtod_l+0x59c>)
 81120fe:	428b      	cmp	r3, r1
 8112100:	4682      	mov	sl, r0
 8112102:	d898      	bhi.n	8112036 <_strtod_l+0x436>
 8112104:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8112108:	428b      	cmp	r3, r1
 811210a:	bf86      	itte	hi
 811210c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 81121a0 <_strtod_l+0x5a0>
 8112110:	f04f 3aff 	movhi.w	sl, #4294967295
 8112114:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8112118:	2300      	movs	r3, #0
 811211a:	9308      	str	r3, [sp, #32]
 811211c:	e07a      	b.n	8112214 <_strtod_l+0x614>
 811211e:	07e2      	lsls	r2, r4, #31
 8112120:	d505      	bpl.n	811212e <_strtod_l+0x52e>
 8112122:	9b08      	ldr	r3, [sp, #32]
 8112124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112128:	f7ee faee 	bl	8100708 <__aeabi_dmul>
 811212c:	2301      	movs	r3, #1
 811212e:	9a08      	ldr	r2, [sp, #32]
 8112130:	3208      	adds	r2, #8
 8112132:	3601      	adds	r6, #1
 8112134:	1064      	asrs	r4, r4, #1
 8112136:	9208      	str	r2, [sp, #32]
 8112138:	e7cd      	b.n	81120d6 <_strtod_l+0x4d6>
 811213a:	d0ed      	beq.n	8112118 <_strtod_l+0x518>
 811213c:	4264      	negs	r4, r4
 811213e:	f014 020f 	ands.w	r2, r4, #15
 8112142:	d00a      	beq.n	811215a <_strtod_l+0x55a>
 8112144:	4b12      	ldr	r3, [pc, #72]	@ (8112190 <_strtod_l+0x590>)
 8112146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 811214a:	4650      	mov	r0, sl
 811214c:	4659      	mov	r1, fp
 811214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112152:	f7ee fc03 	bl	810095c <__aeabi_ddiv>
 8112156:	4682      	mov	sl, r0
 8112158:	468b      	mov	fp, r1
 811215a:	1124      	asrs	r4, r4, #4
 811215c:	d0dc      	beq.n	8112118 <_strtod_l+0x518>
 811215e:	2c1f      	cmp	r4, #31
 8112160:	dd20      	ble.n	81121a4 <_strtod_l+0x5a4>
 8112162:	2400      	movs	r4, #0
 8112164:	46a0      	mov	r8, r4
 8112166:	940a      	str	r4, [sp, #40]	@ 0x28
 8112168:	46a1      	mov	r9, r4
 811216a:	9a05      	ldr	r2, [sp, #20]
 811216c:	2322      	movs	r3, #34	@ 0x22
 811216e:	f04f 0a00 	mov.w	sl, #0
 8112172:	f04f 0b00 	mov.w	fp, #0
 8112176:	6013      	str	r3, [r2, #0]
 8112178:	e768      	b.n	811204c <_strtod_l+0x44c>
 811217a:	bf00      	nop
 811217c:	08113a2c 	.word	0x08113a2c
 8112180:	08113c64 	.word	0x08113c64
 8112184:	08113a24 	.word	0x08113a24
 8112188:	08113a97 	.word	0x08113a97
 811218c:	08113a93 	.word	0x08113a93
 8112190:	08113b98 	.word	0x08113b98
 8112194:	08113b70 	.word	0x08113b70
 8112198:	7ff00000 	.word	0x7ff00000
 811219c:	7ca00000 	.word	0x7ca00000
 81121a0:	7fefffff 	.word	0x7fefffff
 81121a4:	f014 0310 	ands.w	r3, r4, #16
 81121a8:	bf18      	it	ne
 81121aa:	236a      	movne	r3, #106	@ 0x6a
 81121ac:	4ea9      	ldr	r6, [pc, #676]	@ (8112454 <_strtod_l+0x854>)
 81121ae:	9308      	str	r3, [sp, #32]
 81121b0:	4650      	mov	r0, sl
 81121b2:	4659      	mov	r1, fp
 81121b4:	2300      	movs	r3, #0
 81121b6:	07e2      	lsls	r2, r4, #31
 81121b8:	d504      	bpl.n	81121c4 <_strtod_l+0x5c4>
 81121ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 81121be:	f7ee faa3 	bl	8100708 <__aeabi_dmul>
 81121c2:	2301      	movs	r3, #1
 81121c4:	1064      	asrs	r4, r4, #1
 81121c6:	f106 0608 	add.w	r6, r6, #8
 81121ca:	d1f4      	bne.n	81121b6 <_strtod_l+0x5b6>
 81121cc:	b10b      	cbz	r3, 81121d2 <_strtod_l+0x5d2>
 81121ce:	4682      	mov	sl, r0
 81121d0:	468b      	mov	fp, r1
 81121d2:	9b08      	ldr	r3, [sp, #32]
 81121d4:	b1b3      	cbz	r3, 8112204 <_strtod_l+0x604>
 81121d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 81121da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 81121de:	2b00      	cmp	r3, #0
 81121e0:	4659      	mov	r1, fp
 81121e2:	dd0f      	ble.n	8112204 <_strtod_l+0x604>
 81121e4:	2b1f      	cmp	r3, #31
 81121e6:	dd55      	ble.n	8112294 <_strtod_l+0x694>
 81121e8:	2b34      	cmp	r3, #52	@ 0x34
 81121ea:	bfde      	ittt	le
 81121ec:	f04f 33ff 	movle.w	r3, #4294967295
 81121f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 81121f4:	4093      	lslle	r3, r2
 81121f6:	f04f 0a00 	mov.w	sl, #0
 81121fa:	bfcc      	ite	gt
 81121fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8112200:	ea03 0b01 	andle.w	fp, r3, r1
 8112204:	2200      	movs	r2, #0
 8112206:	2300      	movs	r3, #0
 8112208:	4650      	mov	r0, sl
 811220a:	4659      	mov	r1, fp
 811220c:	f7ee fce4 	bl	8100bd8 <__aeabi_dcmpeq>
 8112210:	2800      	cmp	r0, #0
 8112212:	d1a6      	bne.n	8112162 <_strtod_l+0x562>
 8112214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112216:	9300      	str	r3, [sp, #0]
 8112218:	990c      	ldr	r1, [sp, #48]	@ 0x30
 811221a:	9805      	ldr	r0, [sp, #20]
 811221c:	462b      	mov	r3, r5
 811221e:	463a      	mov	r2, r7
 8112220:	f7ff f8c6 	bl	81113b0 <__s2b>
 8112224:	900a      	str	r0, [sp, #40]	@ 0x28
 8112226:	2800      	cmp	r0, #0
 8112228:	f43f af05 	beq.w	8112036 <_strtod_l+0x436>
 811222c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811222e:	2a00      	cmp	r2, #0
 8112230:	eba9 0308 	sub.w	r3, r9, r8
 8112234:	bfa8      	it	ge
 8112236:	2300      	movge	r3, #0
 8112238:	9312      	str	r3, [sp, #72]	@ 0x48
 811223a:	2400      	movs	r4, #0
 811223c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8112240:	9316      	str	r3, [sp, #88]	@ 0x58
 8112242:	46a0      	mov	r8, r4
 8112244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112246:	9805      	ldr	r0, [sp, #20]
 8112248:	6859      	ldr	r1, [r3, #4]
 811224a:	f7ff f809 	bl	8111260 <_Balloc>
 811224e:	4681      	mov	r9, r0
 8112250:	2800      	cmp	r0, #0
 8112252:	f43f aef4 	beq.w	811203e <_strtod_l+0x43e>
 8112256:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112258:	691a      	ldr	r2, [r3, #16]
 811225a:	3202      	adds	r2, #2
 811225c:	f103 010c 	add.w	r1, r3, #12
 8112260:	0092      	lsls	r2, r2, #2
 8112262:	300c      	adds	r0, #12
 8112264:	f7fe f87b 	bl	811035e <memcpy>
 8112268:	ec4b ab10 	vmov	d0, sl, fp
 811226c:	9805      	ldr	r0, [sp, #20]
 811226e:	aa1c      	add	r2, sp, #112	@ 0x70
 8112270:	a91b      	add	r1, sp, #108	@ 0x6c
 8112272:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8112276:	f7ff fbd7 	bl	8111a28 <__d2b>
 811227a:	901a      	str	r0, [sp, #104]	@ 0x68
 811227c:	2800      	cmp	r0, #0
 811227e:	f43f aede 	beq.w	811203e <_strtod_l+0x43e>
 8112282:	9805      	ldr	r0, [sp, #20]
 8112284:	2101      	movs	r1, #1
 8112286:	f7ff f929 	bl	81114dc <__i2b>
 811228a:	4680      	mov	r8, r0
 811228c:	b948      	cbnz	r0, 81122a2 <_strtod_l+0x6a2>
 811228e:	f04f 0800 	mov.w	r8, #0
 8112292:	e6d4      	b.n	811203e <_strtod_l+0x43e>
 8112294:	f04f 32ff 	mov.w	r2, #4294967295
 8112298:	fa02 f303 	lsl.w	r3, r2, r3
 811229c:	ea03 0a0a 	and.w	sl, r3, sl
 81122a0:	e7b0      	b.n	8112204 <_strtod_l+0x604>
 81122a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 81122a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 81122a6:	2d00      	cmp	r5, #0
 81122a8:	bfab      	itete	ge
 81122aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 81122ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 81122ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 81122b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 81122b2:	bfac      	ite	ge
 81122b4:	18ef      	addge	r7, r5, r3
 81122b6:	1b5e      	sublt	r6, r3, r5
 81122b8:	9b08      	ldr	r3, [sp, #32]
 81122ba:	1aed      	subs	r5, r5, r3
 81122bc:	4415      	add	r5, r2
 81122be:	4b66      	ldr	r3, [pc, #408]	@ (8112458 <_strtod_l+0x858>)
 81122c0:	3d01      	subs	r5, #1
 81122c2:	429d      	cmp	r5, r3
 81122c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 81122c8:	da50      	bge.n	811236c <_strtod_l+0x76c>
 81122ca:	1b5b      	subs	r3, r3, r5
 81122cc:	2b1f      	cmp	r3, #31
 81122ce:	eba2 0203 	sub.w	r2, r2, r3
 81122d2:	f04f 0101 	mov.w	r1, #1
 81122d6:	dc3d      	bgt.n	8112354 <_strtod_l+0x754>
 81122d8:	fa01 f303 	lsl.w	r3, r1, r3
 81122dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 81122de:	2300      	movs	r3, #0
 81122e0:	9310      	str	r3, [sp, #64]	@ 0x40
 81122e2:	18bd      	adds	r5, r7, r2
 81122e4:	9b08      	ldr	r3, [sp, #32]
 81122e6:	42af      	cmp	r7, r5
 81122e8:	4416      	add	r6, r2
 81122ea:	441e      	add	r6, r3
 81122ec:	463b      	mov	r3, r7
 81122ee:	bfa8      	it	ge
 81122f0:	462b      	movge	r3, r5
 81122f2:	42b3      	cmp	r3, r6
 81122f4:	bfa8      	it	ge
 81122f6:	4633      	movge	r3, r6
 81122f8:	2b00      	cmp	r3, #0
 81122fa:	bfc2      	ittt	gt
 81122fc:	1aed      	subgt	r5, r5, r3
 81122fe:	1af6      	subgt	r6, r6, r3
 8112300:	1aff      	subgt	r7, r7, r3
 8112302:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8112304:	2b00      	cmp	r3, #0
 8112306:	dd16      	ble.n	8112336 <_strtod_l+0x736>
 8112308:	4641      	mov	r1, r8
 811230a:	9805      	ldr	r0, [sp, #20]
 811230c:	461a      	mov	r2, r3
 811230e:	f7ff f9a5 	bl	811165c <__pow5mult>
 8112312:	4680      	mov	r8, r0
 8112314:	2800      	cmp	r0, #0
 8112316:	d0ba      	beq.n	811228e <_strtod_l+0x68e>
 8112318:	4601      	mov	r1, r0
 811231a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 811231c:	9805      	ldr	r0, [sp, #20]
 811231e:	f7ff f8f3 	bl	8111508 <__multiply>
 8112322:	900e      	str	r0, [sp, #56]	@ 0x38
 8112324:	2800      	cmp	r0, #0
 8112326:	f43f ae8a 	beq.w	811203e <_strtod_l+0x43e>
 811232a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811232c:	9805      	ldr	r0, [sp, #20]
 811232e:	f7fe ffd7 	bl	81112e0 <_Bfree>
 8112332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112334:	931a      	str	r3, [sp, #104]	@ 0x68
 8112336:	2d00      	cmp	r5, #0
 8112338:	dc1d      	bgt.n	8112376 <_strtod_l+0x776>
 811233a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811233c:	2b00      	cmp	r3, #0
 811233e:	dd23      	ble.n	8112388 <_strtod_l+0x788>
 8112340:	4649      	mov	r1, r9
 8112342:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8112344:	9805      	ldr	r0, [sp, #20]
 8112346:	f7ff f989 	bl	811165c <__pow5mult>
 811234a:	4681      	mov	r9, r0
 811234c:	b9e0      	cbnz	r0, 8112388 <_strtod_l+0x788>
 811234e:	f04f 0900 	mov.w	r9, #0
 8112352:	e674      	b.n	811203e <_strtod_l+0x43e>
 8112354:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8112358:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 811235c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8112360:	35e2      	adds	r5, #226	@ 0xe2
 8112362:	fa01 f305 	lsl.w	r3, r1, r5
 8112366:	9310      	str	r3, [sp, #64]	@ 0x40
 8112368:	9113      	str	r1, [sp, #76]	@ 0x4c
 811236a:	e7ba      	b.n	81122e2 <_strtod_l+0x6e2>
 811236c:	2300      	movs	r3, #0
 811236e:	9310      	str	r3, [sp, #64]	@ 0x40
 8112370:	2301      	movs	r3, #1
 8112372:	9313      	str	r3, [sp, #76]	@ 0x4c
 8112374:	e7b5      	b.n	81122e2 <_strtod_l+0x6e2>
 8112376:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8112378:	9805      	ldr	r0, [sp, #20]
 811237a:	462a      	mov	r2, r5
 811237c:	f7ff f9c8 	bl	8111710 <__lshift>
 8112380:	901a      	str	r0, [sp, #104]	@ 0x68
 8112382:	2800      	cmp	r0, #0
 8112384:	d1d9      	bne.n	811233a <_strtod_l+0x73a>
 8112386:	e65a      	b.n	811203e <_strtod_l+0x43e>
 8112388:	2e00      	cmp	r6, #0
 811238a:	dd07      	ble.n	811239c <_strtod_l+0x79c>
 811238c:	4649      	mov	r1, r9
 811238e:	9805      	ldr	r0, [sp, #20]
 8112390:	4632      	mov	r2, r6
 8112392:	f7ff f9bd 	bl	8111710 <__lshift>
 8112396:	4681      	mov	r9, r0
 8112398:	2800      	cmp	r0, #0
 811239a:	d0d8      	beq.n	811234e <_strtod_l+0x74e>
 811239c:	2f00      	cmp	r7, #0
 811239e:	dd08      	ble.n	81123b2 <_strtod_l+0x7b2>
 81123a0:	4641      	mov	r1, r8
 81123a2:	9805      	ldr	r0, [sp, #20]
 81123a4:	463a      	mov	r2, r7
 81123a6:	f7ff f9b3 	bl	8111710 <__lshift>
 81123aa:	4680      	mov	r8, r0
 81123ac:	2800      	cmp	r0, #0
 81123ae:	f43f ae46 	beq.w	811203e <_strtod_l+0x43e>
 81123b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81123b4:	9805      	ldr	r0, [sp, #20]
 81123b6:	464a      	mov	r2, r9
 81123b8:	f7ff fa32 	bl	8111820 <__mdiff>
 81123bc:	4604      	mov	r4, r0
 81123be:	2800      	cmp	r0, #0
 81123c0:	f43f ae3d 	beq.w	811203e <_strtod_l+0x43e>
 81123c4:	68c3      	ldr	r3, [r0, #12]
 81123c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 81123c8:	2300      	movs	r3, #0
 81123ca:	60c3      	str	r3, [r0, #12]
 81123cc:	4641      	mov	r1, r8
 81123ce:	f7ff fa0b 	bl	81117e8 <__mcmp>
 81123d2:	2800      	cmp	r0, #0
 81123d4:	da46      	bge.n	8112464 <_strtod_l+0x864>
 81123d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81123d8:	ea53 030a 	orrs.w	r3, r3, sl
 81123dc:	d16c      	bne.n	81124b8 <_strtod_l+0x8b8>
 81123de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81123e2:	2b00      	cmp	r3, #0
 81123e4:	d168      	bne.n	81124b8 <_strtod_l+0x8b8>
 81123e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81123ea:	0d1b      	lsrs	r3, r3, #20
 81123ec:	051b      	lsls	r3, r3, #20
 81123ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81123f2:	d961      	bls.n	81124b8 <_strtod_l+0x8b8>
 81123f4:	6963      	ldr	r3, [r4, #20]
 81123f6:	b913      	cbnz	r3, 81123fe <_strtod_l+0x7fe>
 81123f8:	6923      	ldr	r3, [r4, #16]
 81123fa:	2b01      	cmp	r3, #1
 81123fc:	dd5c      	ble.n	81124b8 <_strtod_l+0x8b8>
 81123fe:	4621      	mov	r1, r4
 8112400:	2201      	movs	r2, #1
 8112402:	9805      	ldr	r0, [sp, #20]
 8112404:	f7ff f984 	bl	8111710 <__lshift>
 8112408:	4641      	mov	r1, r8
 811240a:	4604      	mov	r4, r0
 811240c:	f7ff f9ec 	bl	81117e8 <__mcmp>
 8112410:	2800      	cmp	r0, #0
 8112412:	dd51      	ble.n	81124b8 <_strtod_l+0x8b8>
 8112414:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8112418:	9a08      	ldr	r2, [sp, #32]
 811241a:	0d1b      	lsrs	r3, r3, #20
 811241c:	051b      	lsls	r3, r3, #20
 811241e:	2a00      	cmp	r2, #0
 8112420:	d06b      	beq.n	81124fa <_strtod_l+0x8fa>
 8112422:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8112426:	d868      	bhi.n	81124fa <_strtod_l+0x8fa>
 8112428:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 811242c:	f67f ae9d 	bls.w	811216a <_strtod_l+0x56a>
 8112430:	4b0a      	ldr	r3, [pc, #40]	@ (811245c <_strtod_l+0x85c>)
 8112432:	4650      	mov	r0, sl
 8112434:	4659      	mov	r1, fp
 8112436:	2200      	movs	r2, #0
 8112438:	f7ee f966 	bl	8100708 <__aeabi_dmul>
 811243c:	4b08      	ldr	r3, [pc, #32]	@ (8112460 <_strtod_l+0x860>)
 811243e:	400b      	ands	r3, r1
 8112440:	4682      	mov	sl, r0
 8112442:	468b      	mov	fp, r1
 8112444:	2b00      	cmp	r3, #0
 8112446:	f47f ae05 	bne.w	8112054 <_strtod_l+0x454>
 811244a:	9a05      	ldr	r2, [sp, #20]
 811244c:	2322      	movs	r3, #34	@ 0x22
 811244e:	6013      	str	r3, [r2, #0]
 8112450:	e600      	b.n	8112054 <_strtod_l+0x454>
 8112452:	bf00      	nop
 8112454:	08113c90 	.word	0x08113c90
 8112458:	fffffc02 	.word	0xfffffc02
 811245c:	39500000 	.word	0x39500000
 8112460:	7ff00000 	.word	0x7ff00000
 8112464:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8112468:	d165      	bne.n	8112536 <_strtod_l+0x936>
 811246a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 811246c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8112470:	b35a      	cbz	r2, 81124ca <_strtod_l+0x8ca>
 8112472:	4a9f      	ldr	r2, [pc, #636]	@ (81126f0 <_strtod_l+0xaf0>)
 8112474:	4293      	cmp	r3, r2
 8112476:	d12b      	bne.n	81124d0 <_strtod_l+0x8d0>
 8112478:	9b08      	ldr	r3, [sp, #32]
 811247a:	4651      	mov	r1, sl
 811247c:	b303      	cbz	r3, 81124c0 <_strtod_l+0x8c0>
 811247e:	4b9d      	ldr	r3, [pc, #628]	@ (81126f4 <_strtod_l+0xaf4>)
 8112480:	465a      	mov	r2, fp
 8112482:	4013      	ands	r3, r2
 8112484:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8112488:	f04f 32ff 	mov.w	r2, #4294967295
 811248c:	d81b      	bhi.n	81124c6 <_strtod_l+0x8c6>
 811248e:	0d1b      	lsrs	r3, r3, #20
 8112490:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8112494:	fa02 f303 	lsl.w	r3, r2, r3
 8112498:	4299      	cmp	r1, r3
 811249a:	d119      	bne.n	81124d0 <_strtod_l+0x8d0>
 811249c:	4b96      	ldr	r3, [pc, #600]	@ (81126f8 <_strtod_l+0xaf8>)
 811249e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81124a0:	429a      	cmp	r2, r3
 81124a2:	d102      	bne.n	81124aa <_strtod_l+0x8aa>
 81124a4:	3101      	adds	r1, #1
 81124a6:	f43f adca 	beq.w	811203e <_strtod_l+0x43e>
 81124aa:	4b92      	ldr	r3, [pc, #584]	@ (81126f4 <_strtod_l+0xaf4>)
 81124ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81124ae:	401a      	ands	r2, r3
 81124b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 81124b4:	f04f 0a00 	mov.w	sl, #0
 81124b8:	9b08      	ldr	r3, [sp, #32]
 81124ba:	2b00      	cmp	r3, #0
 81124bc:	d1b8      	bne.n	8112430 <_strtod_l+0x830>
 81124be:	e5c9      	b.n	8112054 <_strtod_l+0x454>
 81124c0:	f04f 33ff 	mov.w	r3, #4294967295
 81124c4:	e7e8      	b.n	8112498 <_strtod_l+0x898>
 81124c6:	4613      	mov	r3, r2
 81124c8:	e7e6      	b.n	8112498 <_strtod_l+0x898>
 81124ca:	ea53 030a 	orrs.w	r3, r3, sl
 81124ce:	d0a1      	beq.n	8112414 <_strtod_l+0x814>
 81124d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 81124d2:	b1db      	cbz	r3, 811250c <_strtod_l+0x90c>
 81124d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81124d6:	4213      	tst	r3, r2
 81124d8:	d0ee      	beq.n	81124b8 <_strtod_l+0x8b8>
 81124da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81124dc:	9a08      	ldr	r2, [sp, #32]
 81124de:	4650      	mov	r0, sl
 81124e0:	4659      	mov	r1, fp
 81124e2:	b1bb      	cbz	r3, 8112514 <_strtod_l+0x914>
 81124e4:	f7ff fb6e 	bl	8111bc4 <sulp>
 81124e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81124ec:	ec53 2b10 	vmov	r2, r3, d0
 81124f0:	f7ed ff54 	bl	810039c <__adddf3>
 81124f4:	4682      	mov	sl, r0
 81124f6:	468b      	mov	fp, r1
 81124f8:	e7de      	b.n	81124b8 <_strtod_l+0x8b8>
 81124fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 81124fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8112502:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8112506:	f04f 3aff 	mov.w	sl, #4294967295
 811250a:	e7d5      	b.n	81124b8 <_strtod_l+0x8b8>
 811250c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 811250e:	ea13 0f0a 	tst.w	r3, sl
 8112512:	e7e1      	b.n	81124d8 <_strtod_l+0x8d8>
 8112514:	f7ff fb56 	bl	8111bc4 <sulp>
 8112518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811251c:	ec53 2b10 	vmov	r2, r3, d0
 8112520:	f7ed ff3a 	bl	8100398 <__aeabi_dsub>
 8112524:	2200      	movs	r2, #0
 8112526:	2300      	movs	r3, #0
 8112528:	4682      	mov	sl, r0
 811252a:	468b      	mov	fp, r1
 811252c:	f7ee fb54 	bl	8100bd8 <__aeabi_dcmpeq>
 8112530:	2800      	cmp	r0, #0
 8112532:	d0c1      	beq.n	81124b8 <_strtod_l+0x8b8>
 8112534:	e619      	b.n	811216a <_strtod_l+0x56a>
 8112536:	4641      	mov	r1, r8
 8112538:	4620      	mov	r0, r4
 811253a:	f7ff facd 	bl	8111ad8 <__ratio>
 811253e:	ec57 6b10 	vmov	r6, r7, d0
 8112542:	2200      	movs	r2, #0
 8112544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8112548:	4630      	mov	r0, r6
 811254a:	4639      	mov	r1, r7
 811254c:	f7ee fb58 	bl	8100c00 <__aeabi_dcmple>
 8112550:	2800      	cmp	r0, #0
 8112552:	d06f      	beq.n	8112634 <_strtod_l+0xa34>
 8112554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112556:	2b00      	cmp	r3, #0
 8112558:	d17a      	bne.n	8112650 <_strtod_l+0xa50>
 811255a:	f1ba 0f00 	cmp.w	sl, #0
 811255e:	d158      	bne.n	8112612 <_strtod_l+0xa12>
 8112560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112566:	2b00      	cmp	r3, #0
 8112568:	d15a      	bne.n	8112620 <_strtod_l+0xa20>
 811256a:	4b64      	ldr	r3, [pc, #400]	@ (81126fc <_strtod_l+0xafc>)
 811256c:	2200      	movs	r2, #0
 811256e:	4630      	mov	r0, r6
 8112570:	4639      	mov	r1, r7
 8112572:	f7ee fb3b 	bl	8100bec <__aeabi_dcmplt>
 8112576:	2800      	cmp	r0, #0
 8112578:	d159      	bne.n	811262e <_strtod_l+0xa2e>
 811257a:	4630      	mov	r0, r6
 811257c:	4639      	mov	r1, r7
 811257e:	4b60      	ldr	r3, [pc, #384]	@ (8112700 <_strtod_l+0xb00>)
 8112580:	2200      	movs	r2, #0
 8112582:	f7ee f8c1 	bl	8100708 <__aeabi_dmul>
 8112586:	4606      	mov	r6, r0
 8112588:	460f      	mov	r7, r1
 811258a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 811258e:	9606      	str	r6, [sp, #24]
 8112590:	9307      	str	r3, [sp, #28]
 8112592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8112596:	4d57      	ldr	r5, [pc, #348]	@ (81126f4 <_strtod_l+0xaf4>)
 8112598:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 811259c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811259e:	401d      	ands	r5, r3
 81125a0:	4b58      	ldr	r3, [pc, #352]	@ (8112704 <_strtod_l+0xb04>)
 81125a2:	429d      	cmp	r5, r3
 81125a4:	f040 80b2 	bne.w	811270c <_strtod_l+0xb0c>
 81125a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81125aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 81125ae:	ec4b ab10 	vmov	d0, sl, fp
 81125b2:	f7ff f9c9 	bl	8111948 <__ulp>
 81125b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 81125ba:	ec51 0b10 	vmov	r0, r1, d0
 81125be:	f7ee f8a3 	bl	8100708 <__aeabi_dmul>
 81125c2:	4652      	mov	r2, sl
 81125c4:	465b      	mov	r3, fp
 81125c6:	f7ed fee9 	bl	810039c <__adddf3>
 81125ca:	460b      	mov	r3, r1
 81125cc:	4949      	ldr	r1, [pc, #292]	@ (81126f4 <_strtod_l+0xaf4>)
 81125ce:	4a4e      	ldr	r2, [pc, #312]	@ (8112708 <_strtod_l+0xb08>)
 81125d0:	4019      	ands	r1, r3
 81125d2:	4291      	cmp	r1, r2
 81125d4:	4682      	mov	sl, r0
 81125d6:	d942      	bls.n	811265e <_strtod_l+0xa5e>
 81125d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 81125da:	4b47      	ldr	r3, [pc, #284]	@ (81126f8 <_strtod_l+0xaf8>)
 81125dc:	429a      	cmp	r2, r3
 81125de:	d103      	bne.n	81125e8 <_strtod_l+0x9e8>
 81125e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 81125e2:	3301      	adds	r3, #1
 81125e4:	f43f ad2b 	beq.w	811203e <_strtod_l+0x43e>
 81125e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 81126f8 <_strtod_l+0xaf8>
 81125ec:	f04f 3aff 	mov.w	sl, #4294967295
 81125f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81125f2:	9805      	ldr	r0, [sp, #20]
 81125f4:	f7fe fe74 	bl	81112e0 <_Bfree>
 81125f8:	9805      	ldr	r0, [sp, #20]
 81125fa:	4649      	mov	r1, r9
 81125fc:	f7fe fe70 	bl	81112e0 <_Bfree>
 8112600:	9805      	ldr	r0, [sp, #20]
 8112602:	4641      	mov	r1, r8
 8112604:	f7fe fe6c 	bl	81112e0 <_Bfree>
 8112608:	9805      	ldr	r0, [sp, #20]
 811260a:	4621      	mov	r1, r4
 811260c:	f7fe fe68 	bl	81112e0 <_Bfree>
 8112610:	e618      	b.n	8112244 <_strtod_l+0x644>
 8112612:	f1ba 0f01 	cmp.w	sl, #1
 8112616:	d103      	bne.n	8112620 <_strtod_l+0xa20>
 8112618:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811261a:	2b00      	cmp	r3, #0
 811261c:	f43f ada5 	beq.w	811216a <_strtod_l+0x56a>
 8112620:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 81126d0 <_strtod_l+0xad0>
 8112624:	4f35      	ldr	r7, [pc, #212]	@ (81126fc <_strtod_l+0xafc>)
 8112626:	ed8d 7b06 	vstr	d7, [sp, #24]
 811262a:	2600      	movs	r6, #0
 811262c:	e7b1      	b.n	8112592 <_strtod_l+0x992>
 811262e:	4f34      	ldr	r7, [pc, #208]	@ (8112700 <_strtod_l+0xb00>)
 8112630:	2600      	movs	r6, #0
 8112632:	e7aa      	b.n	811258a <_strtod_l+0x98a>
 8112634:	4b32      	ldr	r3, [pc, #200]	@ (8112700 <_strtod_l+0xb00>)
 8112636:	4630      	mov	r0, r6
 8112638:	4639      	mov	r1, r7
 811263a:	2200      	movs	r2, #0
 811263c:	f7ee f864 	bl	8100708 <__aeabi_dmul>
 8112640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112642:	4606      	mov	r6, r0
 8112644:	460f      	mov	r7, r1
 8112646:	2b00      	cmp	r3, #0
 8112648:	d09f      	beq.n	811258a <_strtod_l+0x98a>
 811264a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 811264e:	e7a0      	b.n	8112592 <_strtod_l+0x992>
 8112650:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 81126d8 <_strtod_l+0xad8>
 8112654:	ed8d 7b06 	vstr	d7, [sp, #24]
 8112658:	ec57 6b17 	vmov	r6, r7, d7
 811265c:	e799      	b.n	8112592 <_strtod_l+0x992>
 811265e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8112662:	9b08      	ldr	r3, [sp, #32]
 8112664:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8112668:	2b00      	cmp	r3, #0
 811266a:	d1c1      	bne.n	81125f0 <_strtod_l+0x9f0>
 811266c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8112670:	0d1b      	lsrs	r3, r3, #20
 8112672:	051b      	lsls	r3, r3, #20
 8112674:	429d      	cmp	r5, r3
 8112676:	d1bb      	bne.n	81125f0 <_strtod_l+0x9f0>
 8112678:	4630      	mov	r0, r6
 811267a:	4639      	mov	r1, r7
 811267c:	f7ee fba4 	bl	8100dc8 <__aeabi_d2lz>
 8112680:	f7ee f814 	bl	81006ac <__aeabi_l2d>
 8112684:	4602      	mov	r2, r0
 8112686:	460b      	mov	r3, r1
 8112688:	4630      	mov	r0, r6
 811268a:	4639      	mov	r1, r7
 811268c:	f7ed fe84 	bl	8100398 <__aeabi_dsub>
 8112690:	460b      	mov	r3, r1
 8112692:	4602      	mov	r2, r0
 8112694:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8112698:	f3cb 0613 	ubfx	r6, fp, #0, #20
 811269c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811269e:	ea46 060a 	orr.w	r6, r6, sl
 81126a2:	431e      	orrs	r6, r3
 81126a4:	d06f      	beq.n	8112786 <_strtod_l+0xb86>
 81126a6:	a30e      	add	r3, pc, #56	@ (adr r3, 81126e0 <_strtod_l+0xae0>)
 81126a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81126ac:	f7ee fa9e 	bl	8100bec <__aeabi_dcmplt>
 81126b0:	2800      	cmp	r0, #0
 81126b2:	f47f accf 	bne.w	8112054 <_strtod_l+0x454>
 81126b6:	a30c      	add	r3, pc, #48	@ (adr r3, 81126e8 <_strtod_l+0xae8>)
 81126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81126bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81126c0:	f7ee fab2 	bl	8100c28 <__aeabi_dcmpgt>
 81126c4:	2800      	cmp	r0, #0
 81126c6:	d093      	beq.n	81125f0 <_strtod_l+0x9f0>
 81126c8:	e4c4      	b.n	8112054 <_strtod_l+0x454>
 81126ca:	bf00      	nop
 81126cc:	f3af 8000 	nop.w
 81126d0:	00000000 	.word	0x00000000
 81126d4:	bff00000 	.word	0xbff00000
 81126d8:	00000000 	.word	0x00000000
 81126dc:	3ff00000 	.word	0x3ff00000
 81126e0:	94a03595 	.word	0x94a03595
 81126e4:	3fdfffff 	.word	0x3fdfffff
 81126e8:	35afe535 	.word	0x35afe535
 81126ec:	3fe00000 	.word	0x3fe00000
 81126f0:	000fffff 	.word	0x000fffff
 81126f4:	7ff00000 	.word	0x7ff00000
 81126f8:	7fefffff 	.word	0x7fefffff
 81126fc:	3ff00000 	.word	0x3ff00000
 8112700:	3fe00000 	.word	0x3fe00000
 8112704:	7fe00000 	.word	0x7fe00000
 8112708:	7c9fffff 	.word	0x7c9fffff
 811270c:	9b08      	ldr	r3, [sp, #32]
 811270e:	b323      	cbz	r3, 811275a <_strtod_l+0xb5a>
 8112710:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8112714:	d821      	bhi.n	811275a <_strtod_l+0xb5a>
 8112716:	a328      	add	r3, pc, #160	@ (adr r3, 81127b8 <_strtod_l+0xbb8>)
 8112718:	e9d3 2300 	ldrd	r2, r3, [r3]
 811271c:	4630      	mov	r0, r6
 811271e:	4639      	mov	r1, r7
 8112720:	f7ee fa6e 	bl	8100c00 <__aeabi_dcmple>
 8112724:	b1a0      	cbz	r0, 8112750 <_strtod_l+0xb50>
 8112726:	4639      	mov	r1, r7
 8112728:	4630      	mov	r0, r6
 811272a:	f7ee fac5 	bl	8100cb8 <__aeabi_d2uiz>
 811272e:	2801      	cmp	r0, #1
 8112730:	bf38      	it	cc
 8112732:	2001      	movcc	r0, #1
 8112734:	f7ed ff6e 	bl	8100614 <__aeabi_ui2d>
 8112738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811273a:	4606      	mov	r6, r0
 811273c:	460f      	mov	r7, r1
 811273e:	b9fb      	cbnz	r3, 8112780 <_strtod_l+0xb80>
 8112740:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8112744:	9014      	str	r0, [sp, #80]	@ 0x50
 8112746:	9315      	str	r3, [sp, #84]	@ 0x54
 8112748:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 811274c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8112750:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8112752:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8112756:	1b5b      	subs	r3, r3, r5
 8112758:	9311      	str	r3, [sp, #68]	@ 0x44
 811275a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 811275e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8112762:	f7ff f8f1 	bl	8111948 <__ulp>
 8112766:	4650      	mov	r0, sl
 8112768:	ec53 2b10 	vmov	r2, r3, d0
 811276c:	4659      	mov	r1, fp
 811276e:	f7ed ffcb 	bl	8100708 <__aeabi_dmul>
 8112772:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8112776:	f7ed fe11 	bl	810039c <__adddf3>
 811277a:	4682      	mov	sl, r0
 811277c:	468b      	mov	fp, r1
 811277e:	e770      	b.n	8112662 <_strtod_l+0xa62>
 8112780:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8112784:	e7e0      	b.n	8112748 <_strtod_l+0xb48>
 8112786:	a30e      	add	r3, pc, #56	@ (adr r3, 81127c0 <_strtod_l+0xbc0>)
 8112788:	e9d3 2300 	ldrd	r2, r3, [r3]
 811278c:	f7ee fa2e 	bl	8100bec <__aeabi_dcmplt>
 8112790:	e798      	b.n	81126c4 <_strtod_l+0xac4>
 8112792:	2300      	movs	r3, #0
 8112794:	930b      	str	r3, [sp, #44]	@ 0x2c
 8112796:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8112798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811279a:	6013      	str	r3, [r2, #0]
 811279c:	f7ff ba6d 	b.w	8111c7a <_strtod_l+0x7a>
 81127a0:	2a65      	cmp	r2, #101	@ 0x65
 81127a2:	f43f ab66 	beq.w	8111e72 <_strtod_l+0x272>
 81127a6:	2a45      	cmp	r2, #69	@ 0x45
 81127a8:	f43f ab63 	beq.w	8111e72 <_strtod_l+0x272>
 81127ac:	2301      	movs	r3, #1
 81127ae:	f7ff bb9e 	b.w	8111eee <_strtod_l+0x2ee>
 81127b2:	bf00      	nop
 81127b4:	f3af 8000 	nop.w
 81127b8:	ffc00000 	.word	0xffc00000
 81127bc:	41dfffff 	.word	0x41dfffff
 81127c0:	94a03595 	.word	0x94a03595
 81127c4:	3fcfffff 	.word	0x3fcfffff

081127c8 <_strtod_r>:
 81127c8:	4b01      	ldr	r3, [pc, #4]	@ (81127d0 <_strtod_r+0x8>)
 81127ca:	f7ff ba19 	b.w	8111c00 <_strtod_l>
 81127ce:	bf00      	nop
 81127d0:	10000100 	.word	0x10000100

081127d4 <_strtol_l.constprop.0>:
 81127d4:	2b24      	cmp	r3, #36	@ 0x24
 81127d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81127da:	4686      	mov	lr, r0
 81127dc:	4690      	mov	r8, r2
 81127de:	d801      	bhi.n	81127e4 <_strtol_l.constprop.0+0x10>
 81127e0:	2b01      	cmp	r3, #1
 81127e2:	d106      	bne.n	81127f2 <_strtol_l.constprop.0+0x1e>
 81127e4:	f7fd fd8e 	bl	8110304 <__errno>
 81127e8:	2316      	movs	r3, #22
 81127ea:	6003      	str	r3, [r0, #0]
 81127ec:	2000      	movs	r0, #0
 81127ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81127f2:	4834      	ldr	r0, [pc, #208]	@ (81128c4 <_strtol_l.constprop.0+0xf0>)
 81127f4:	460d      	mov	r5, r1
 81127f6:	462a      	mov	r2, r5
 81127f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 81127fc:	5d06      	ldrb	r6, [r0, r4]
 81127fe:	f016 0608 	ands.w	r6, r6, #8
 8112802:	d1f8      	bne.n	81127f6 <_strtol_l.constprop.0+0x22>
 8112804:	2c2d      	cmp	r4, #45	@ 0x2d
 8112806:	d12d      	bne.n	8112864 <_strtol_l.constprop.0+0x90>
 8112808:	782c      	ldrb	r4, [r5, #0]
 811280a:	2601      	movs	r6, #1
 811280c:	1c95      	adds	r5, r2, #2
 811280e:	f033 0210 	bics.w	r2, r3, #16
 8112812:	d109      	bne.n	8112828 <_strtol_l.constprop.0+0x54>
 8112814:	2c30      	cmp	r4, #48	@ 0x30
 8112816:	d12a      	bne.n	811286e <_strtol_l.constprop.0+0x9a>
 8112818:	782a      	ldrb	r2, [r5, #0]
 811281a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 811281e:	2a58      	cmp	r2, #88	@ 0x58
 8112820:	d125      	bne.n	811286e <_strtol_l.constprop.0+0x9a>
 8112822:	786c      	ldrb	r4, [r5, #1]
 8112824:	2310      	movs	r3, #16
 8112826:	3502      	adds	r5, #2
 8112828:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 811282c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8112830:	2200      	movs	r2, #0
 8112832:	fbbc f9f3 	udiv	r9, ip, r3
 8112836:	4610      	mov	r0, r2
 8112838:	fb03 ca19 	mls	sl, r3, r9, ip
 811283c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8112840:	2f09      	cmp	r7, #9
 8112842:	d81b      	bhi.n	811287c <_strtol_l.constprop.0+0xa8>
 8112844:	463c      	mov	r4, r7
 8112846:	42a3      	cmp	r3, r4
 8112848:	dd27      	ble.n	811289a <_strtol_l.constprop.0+0xc6>
 811284a:	1c57      	adds	r7, r2, #1
 811284c:	d007      	beq.n	811285e <_strtol_l.constprop.0+0x8a>
 811284e:	4581      	cmp	r9, r0
 8112850:	d320      	bcc.n	8112894 <_strtol_l.constprop.0+0xc0>
 8112852:	d101      	bne.n	8112858 <_strtol_l.constprop.0+0x84>
 8112854:	45a2      	cmp	sl, r4
 8112856:	db1d      	blt.n	8112894 <_strtol_l.constprop.0+0xc0>
 8112858:	fb00 4003 	mla	r0, r0, r3, r4
 811285c:	2201      	movs	r2, #1
 811285e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8112862:	e7eb      	b.n	811283c <_strtol_l.constprop.0+0x68>
 8112864:	2c2b      	cmp	r4, #43	@ 0x2b
 8112866:	bf04      	itt	eq
 8112868:	782c      	ldrbeq	r4, [r5, #0]
 811286a:	1c95      	addeq	r5, r2, #2
 811286c:	e7cf      	b.n	811280e <_strtol_l.constprop.0+0x3a>
 811286e:	2b00      	cmp	r3, #0
 8112870:	d1da      	bne.n	8112828 <_strtol_l.constprop.0+0x54>
 8112872:	2c30      	cmp	r4, #48	@ 0x30
 8112874:	bf0c      	ite	eq
 8112876:	2308      	moveq	r3, #8
 8112878:	230a      	movne	r3, #10
 811287a:	e7d5      	b.n	8112828 <_strtol_l.constprop.0+0x54>
 811287c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8112880:	2f19      	cmp	r7, #25
 8112882:	d801      	bhi.n	8112888 <_strtol_l.constprop.0+0xb4>
 8112884:	3c37      	subs	r4, #55	@ 0x37
 8112886:	e7de      	b.n	8112846 <_strtol_l.constprop.0+0x72>
 8112888:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 811288c:	2f19      	cmp	r7, #25
 811288e:	d804      	bhi.n	811289a <_strtol_l.constprop.0+0xc6>
 8112890:	3c57      	subs	r4, #87	@ 0x57
 8112892:	e7d8      	b.n	8112846 <_strtol_l.constprop.0+0x72>
 8112894:	f04f 32ff 	mov.w	r2, #4294967295
 8112898:	e7e1      	b.n	811285e <_strtol_l.constprop.0+0x8a>
 811289a:	1c53      	adds	r3, r2, #1
 811289c:	d108      	bne.n	81128b0 <_strtol_l.constprop.0+0xdc>
 811289e:	2322      	movs	r3, #34	@ 0x22
 81128a0:	f8ce 3000 	str.w	r3, [lr]
 81128a4:	4660      	mov	r0, ip
 81128a6:	f1b8 0f00 	cmp.w	r8, #0
 81128aa:	d0a0      	beq.n	81127ee <_strtol_l.constprop.0+0x1a>
 81128ac:	1e69      	subs	r1, r5, #1
 81128ae:	e006      	b.n	81128be <_strtol_l.constprop.0+0xea>
 81128b0:	b106      	cbz	r6, 81128b4 <_strtol_l.constprop.0+0xe0>
 81128b2:	4240      	negs	r0, r0
 81128b4:	f1b8 0f00 	cmp.w	r8, #0
 81128b8:	d099      	beq.n	81127ee <_strtol_l.constprop.0+0x1a>
 81128ba:	2a00      	cmp	r2, #0
 81128bc:	d1f6      	bne.n	81128ac <_strtol_l.constprop.0+0xd8>
 81128be:	f8c8 1000 	str.w	r1, [r8]
 81128c2:	e794      	b.n	81127ee <_strtol_l.constprop.0+0x1a>
 81128c4:	08113cb9 	.word	0x08113cb9

081128c8 <_strtol_r>:
 81128c8:	f7ff bf84 	b.w	81127d4 <_strtol_l.constprop.0>

081128cc <__ssputs_r>:
 81128cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81128d0:	688e      	ldr	r6, [r1, #8]
 81128d2:	461f      	mov	r7, r3
 81128d4:	42be      	cmp	r6, r7
 81128d6:	680b      	ldr	r3, [r1, #0]
 81128d8:	4682      	mov	sl, r0
 81128da:	460c      	mov	r4, r1
 81128dc:	4690      	mov	r8, r2
 81128de:	d82d      	bhi.n	811293c <__ssputs_r+0x70>
 81128e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81128e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 81128e8:	d026      	beq.n	8112938 <__ssputs_r+0x6c>
 81128ea:	6965      	ldr	r5, [r4, #20]
 81128ec:	6909      	ldr	r1, [r1, #16]
 81128ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81128f2:	eba3 0901 	sub.w	r9, r3, r1
 81128f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81128fa:	1c7b      	adds	r3, r7, #1
 81128fc:	444b      	add	r3, r9
 81128fe:	106d      	asrs	r5, r5, #1
 8112900:	429d      	cmp	r5, r3
 8112902:	bf38      	it	cc
 8112904:	461d      	movcc	r5, r3
 8112906:	0553      	lsls	r3, r2, #21
 8112908:	d527      	bpl.n	811295a <__ssputs_r+0x8e>
 811290a:	4629      	mov	r1, r5
 811290c:	f7fe fc1c 	bl	8111148 <_malloc_r>
 8112910:	4606      	mov	r6, r0
 8112912:	b360      	cbz	r0, 811296e <__ssputs_r+0xa2>
 8112914:	6921      	ldr	r1, [r4, #16]
 8112916:	464a      	mov	r2, r9
 8112918:	f7fd fd21 	bl	811035e <memcpy>
 811291c:	89a3      	ldrh	r3, [r4, #12]
 811291e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8112922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8112926:	81a3      	strh	r3, [r4, #12]
 8112928:	6126      	str	r6, [r4, #16]
 811292a:	6165      	str	r5, [r4, #20]
 811292c:	444e      	add	r6, r9
 811292e:	eba5 0509 	sub.w	r5, r5, r9
 8112932:	6026      	str	r6, [r4, #0]
 8112934:	60a5      	str	r5, [r4, #8]
 8112936:	463e      	mov	r6, r7
 8112938:	42be      	cmp	r6, r7
 811293a:	d900      	bls.n	811293e <__ssputs_r+0x72>
 811293c:	463e      	mov	r6, r7
 811293e:	6820      	ldr	r0, [r4, #0]
 8112940:	4632      	mov	r2, r6
 8112942:	4641      	mov	r1, r8
 8112944:	f000 fb7c 	bl	8113040 <memmove>
 8112948:	68a3      	ldr	r3, [r4, #8]
 811294a:	1b9b      	subs	r3, r3, r6
 811294c:	60a3      	str	r3, [r4, #8]
 811294e:	6823      	ldr	r3, [r4, #0]
 8112950:	4433      	add	r3, r6
 8112952:	6023      	str	r3, [r4, #0]
 8112954:	2000      	movs	r0, #0
 8112956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811295a:	462a      	mov	r2, r5
 811295c:	f000 ff3d 	bl	81137da <_realloc_r>
 8112960:	4606      	mov	r6, r0
 8112962:	2800      	cmp	r0, #0
 8112964:	d1e0      	bne.n	8112928 <__ssputs_r+0x5c>
 8112966:	6921      	ldr	r1, [r4, #16]
 8112968:	4650      	mov	r0, sl
 811296a:	f7fe fb79 	bl	8111060 <_free_r>
 811296e:	230c      	movs	r3, #12
 8112970:	f8ca 3000 	str.w	r3, [sl]
 8112974:	89a3      	ldrh	r3, [r4, #12]
 8112976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811297a:	81a3      	strh	r3, [r4, #12]
 811297c:	f04f 30ff 	mov.w	r0, #4294967295
 8112980:	e7e9      	b.n	8112956 <__ssputs_r+0x8a>
	...

08112984 <_svfiprintf_r>:
 8112984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112988:	4698      	mov	r8, r3
 811298a:	898b      	ldrh	r3, [r1, #12]
 811298c:	061b      	lsls	r3, r3, #24
 811298e:	b09d      	sub	sp, #116	@ 0x74
 8112990:	4607      	mov	r7, r0
 8112992:	460d      	mov	r5, r1
 8112994:	4614      	mov	r4, r2
 8112996:	d510      	bpl.n	81129ba <_svfiprintf_r+0x36>
 8112998:	690b      	ldr	r3, [r1, #16]
 811299a:	b973      	cbnz	r3, 81129ba <_svfiprintf_r+0x36>
 811299c:	2140      	movs	r1, #64	@ 0x40
 811299e:	f7fe fbd3 	bl	8111148 <_malloc_r>
 81129a2:	6028      	str	r0, [r5, #0]
 81129a4:	6128      	str	r0, [r5, #16]
 81129a6:	b930      	cbnz	r0, 81129b6 <_svfiprintf_r+0x32>
 81129a8:	230c      	movs	r3, #12
 81129aa:	603b      	str	r3, [r7, #0]
 81129ac:	f04f 30ff 	mov.w	r0, #4294967295
 81129b0:	b01d      	add	sp, #116	@ 0x74
 81129b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81129b6:	2340      	movs	r3, #64	@ 0x40
 81129b8:	616b      	str	r3, [r5, #20]
 81129ba:	2300      	movs	r3, #0
 81129bc:	9309      	str	r3, [sp, #36]	@ 0x24
 81129be:	2320      	movs	r3, #32
 81129c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81129c4:	f8cd 800c 	str.w	r8, [sp, #12]
 81129c8:	2330      	movs	r3, #48	@ 0x30
 81129ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8112b68 <_svfiprintf_r+0x1e4>
 81129ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81129d2:	f04f 0901 	mov.w	r9, #1
 81129d6:	4623      	mov	r3, r4
 81129d8:	469a      	mov	sl, r3
 81129da:	f813 2b01 	ldrb.w	r2, [r3], #1
 81129de:	b10a      	cbz	r2, 81129e4 <_svfiprintf_r+0x60>
 81129e0:	2a25      	cmp	r2, #37	@ 0x25
 81129e2:	d1f9      	bne.n	81129d8 <_svfiprintf_r+0x54>
 81129e4:	ebba 0b04 	subs.w	fp, sl, r4
 81129e8:	d00b      	beq.n	8112a02 <_svfiprintf_r+0x7e>
 81129ea:	465b      	mov	r3, fp
 81129ec:	4622      	mov	r2, r4
 81129ee:	4629      	mov	r1, r5
 81129f0:	4638      	mov	r0, r7
 81129f2:	f7ff ff6b 	bl	81128cc <__ssputs_r>
 81129f6:	3001      	adds	r0, #1
 81129f8:	f000 80a7 	beq.w	8112b4a <_svfiprintf_r+0x1c6>
 81129fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81129fe:	445a      	add	r2, fp
 8112a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8112a02:	f89a 3000 	ldrb.w	r3, [sl]
 8112a06:	2b00      	cmp	r3, #0
 8112a08:	f000 809f 	beq.w	8112b4a <_svfiprintf_r+0x1c6>
 8112a0c:	2300      	movs	r3, #0
 8112a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8112a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8112a16:	f10a 0a01 	add.w	sl, sl, #1
 8112a1a:	9304      	str	r3, [sp, #16]
 8112a1c:	9307      	str	r3, [sp, #28]
 8112a1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8112a22:	931a      	str	r3, [sp, #104]	@ 0x68
 8112a24:	4654      	mov	r4, sl
 8112a26:	2205      	movs	r2, #5
 8112a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112a2c:	484e      	ldr	r0, [pc, #312]	@ (8112b68 <_svfiprintf_r+0x1e4>)
 8112a2e:	f7ed fc57 	bl	81002e0 <memchr>
 8112a32:	9a04      	ldr	r2, [sp, #16]
 8112a34:	b9d8      	cbnz	r0, 8112a6e <_svfiprintf_r+0xea>
 8112a36:	06d0      	lsls	r0, r2, #27
 8112a38:	bf44      	itt	mi
 8112a3a:	2320      	movmi	r3, #32
 8112a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112a40:	0711      	lsls	r1, r2, #28
 8112a42:	bf44      	itt	mi
 8112a44:	232b      	movmi	r3, #43	@ 0x2b
 8112a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8112a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8112a50:	d015      	beq.n	8112a7e <_svfiprintf_r+0xfa>
 8112a52:	9a07      	ldr	r2, [sp, #28]
 8112a54:	4654      	mov	r4, sl
 8112a56:	2000      	movs	r0, #0
 8112a58:	f04f 0c0a 	mov.w	ip, #10
 8112a5c:	4621      	mov	r1, r4
 8112a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112a62:	3b30      	subs	r3, #48	@ 0x30
 8112a64:	2b09      	cmp	r3, #9
 8112a66:	d94b      	bls.n	8112b00 <_svfiprintf_r+0x17c>
 8112a68:	b1b0      	cbz	r0, 8112a98 <_svfiprintf_r+0x114>
 8112a6a:	9207      	str	r2, [sp, #28]
 8112a6c:	e014      	b.n	8112a98 <_svfiprintf_r+0x114>
 8112a6e:	eba0 0308 	sub.w	r3, r0, r8
 8112a72:	fa09 f303 	lsl.w	r3, r9, r3
 8112a76:	4313      	orrs	r3, r2
 8112a78:	9304      	str	r3, [sp, #16]
 8112a7a:	46a2      	mov	sl, r4
 8112a7c:	e7d2      	b.n	8112a24 <_svfiprintf_r+0xa0>
 8112a7e:	9b03      	ldr	r3, [sp, #12]
 8112a80:	1d19      	adds	r1, r3, #4
 8112a82:	681b      	ldr	r3, [r3, #0]
 8112a84:	9103      	str	r1, [sp, #12]
 8112a86:	2b00      	cmp	r3, #0
 8112a88:	bfbb      	ittet	lt
 8112a8a:	425b      	neglt	r3, r3
 8112a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8112a90:	9307      	strge	r3, [sp, #28]
 8112a92:	9307      	strlt	r3, [sp, #28]
 8112a94:	bfb8      	it	lt
 8112a96:	9204      	strlt	r2, [sp, #16]
 8112a98:	7823      	ldrb	r3, [r4, #0]
 8112a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8112a9c:	d10a      	bne.n	8112ab4 <_svfiprintf_r+0x130>
 8112a9e:	7863      	ldrb	r3, [r4, #1]
 8112aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8112aa2:	d132      	bne.n	8112b0a <_svfiprintf_r+0x186>
 8112aa4:	9b03      	ldr	r3, [sp, #12]
 8112aa6:	1d1a      	adds	r2, r3, #4
 8112aa8:	681b      	ldr	r3, [r3, #0]
 8112aaa:	9203      	str	r2, [sp, #12]
 8112aac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8112ab0:	3402      	adds	r4, #2
 8112ab2:	9305      	str	r3, [sp, #20]
 8112ab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8112b78 <_svfiprintf_r+0x1f4>
 8112ab8:	7821      	ldrb	r1, [r4, #0]
 8112aba:	2203      	movs	r2, #3
 8112abc:	4650      	mov	r0, sl
 8112abe:	f7ed fc0f 	bl	81002e0 <memchr>
 8112ac2:	b138      	cbz	r0, 8112ad4 <_svfiprintf_r+0x150>
 8112ac4:	9b04      	ldr	r3, [sp, #16]
 8112ac6:	eba0 000a 	sub.w	r0, r0, sl
 8112aca:	2240      	movs	r2, #64	@ 0x40
 8112acc:	4082      	lsls	r2, r0
 8112ace:	4313      	orrs	r3, r2
 8112ad0:	3401      	adds	r4, #1
 8112ad2:	9304      	str	r3, [sp, #16]
 8112ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112ad8:	4824      	ldr	r0, [pc, #144]	@ (8112b6c <_svfiprintf_r+0x1e8>)
 8112ada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8112ade:	2206      	movs	r2, #6
 8112ae0:	f7ed fbfe 	bl	81002e0 <memchr>
 8112ae4:	2800      	cmp	r0, #0
 8112ae6:	d036      	beq.n	8112b56 <_svfiprintf_r+0x1d2>
 8112ae8:	4b21      	ldr	r3, [pc, #132]	@ (8112b70 <_svfiprintf_r+0x1ec>)
 8112aea:	bb1b      	cbnz	r3, 8112b34 <_svfiprintf_r+0x1b0>
 8112aec:	9b03      	ldr	r3, [sp, #12]
 8112aee:	3307      	adds	r3, #7
 8112af0:	f023 0307 	bic.w	r3, r3, #7
 8112af4:	3308      	adds	r3, #8
 8112af6:	9303      	str	r3, [sp, #12]
 8112af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112afa:	4433      	add	r3, r6
 8112afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8112afe:	e76a      	b.n	81129d6 <_svfiprintf_r+0x52>
 8112b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8112b04:	460c      	mov	r4, r1
 8112b06:	2001      	movs	r0, #1
 8112b08:	e7a8      	b.n	8112a5c <_svfiprintf_r+0xd8>
 8112b0a:	2300      	movs	r3, #0
 8112b0c:	3401      	adds	r4, #1
 8112b0e:	9305      	str	r3, [sp, #20]
 8112b10:	4619      	mov	r1, r3
 8112b12:	f04f 0c0a 	mov.w	ip, #10
 8112b16:	4620      	mov	r0, r4
 8112b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112b1c:	3a30      	subs	r2, #48	@ 0x30
 8112b1e:	2a09      	cmp	r2, #9
 8112b20:	d903      	bls.n	8112b2a <_svfiprintf_r+0x1a6>
 8112b22:	2b00      	cmp	r3, #0
 8112b24:	d0c6      	beq.n	8112ab4 <_svfiprintf_r+0x130>
 8112b26:	9105      	str	r1, [sp, #20]
 8112b28:	e7c4      	b.n	8112ab4 <_svfiprintf_r+0x130>
 8112b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8112b2e:	4604      	mov	r4, r0
 8112b30:	2301      	movs	r3, #1
 8112b32:	e7f0      	b.n	8112b16 <_svfiprintf_r+0x192>
 8112b34:	ab03      	add	r3, sp, #12
 8112b36:	9300      	str	r3, [sp, #0]
 8112b38:	462a      	mov	r2, r5
 8112b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8112b74 <_svfiprintf_r+0x1f0>)
 8112b3c:	a904      	add	r1, sp, #16
 8112b3e:	4638      	mov	r0, r7
 8112b40:	f7fc fb98 	bl	810f274 <_printf_float>
 8112b44:	1c42      	adds	r2, r0, #1
 8112b46:	4606      	mov	r6, r0
 8112b48:	d1d6      	bne.n	8112af8 <_svfiprintf_r+0x174>
 8112b4a:	89ab      	ldrh	r3, [r5, #12]
 8112b4c:	065b      	lsls	r3, r3, #25
 8112b4e:	f53f af2d 	bmi.w	81129ac <_svfiprintf_r+0x28>
 8112b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8112b54:	e72c      	b.n	81129b0 <_svfiprintf_r+0x2c>
 8112b56:	ab03      	add	r3, sp, #12
 8112b58:	9300      	str	r3, [sp, #0]
 8112b5a:	462a      	mov	r2, r5
 8112b5c:	4b05      	ldr	r3, [pc, #20]	@ (8112b74 <_svfiprintf_r+0x1f0>)
 8112b5e:	a904      	add	r1, sp, #16
 8112b60:	4638      	mov	r0, r7
 8112b62:	f7fc fe1f 	bl	810f7a4 <_printf_i>
 8112b66:	e7ed      	b.n	8112b44 <_svfiprintf_r+0x1c0>
 8112b68:	08113db9 	.word	0x08113db9
 8112b6c:	08113dc3 	.word	0x08113dc3
 8112b70:	0810f275 	.word	0x0810f275
 8112b74:	081128cd 	.word	0x081128cd
 8112b78:	08113dbf 	.word	0x08113dbf

08112b7c <__sfputc_r>:
 8112b7c:	6893      	ldr	r3, [r2, #8]
 8112b7e:	3b01      	subs	r3, #1
 8112b80:	2b00      	cmp	r3, #0
 8112b82:	b410      	push	{r4}
 8112b84:	6093      	str	r3, [r2, #8]
 8112b86:	da08      	bge.n	8112b9a <__sfputc_r+0x1e>
 8112b88:	6994      	ldr	r4, [r2, #24]
 8112b8a:	42a3      	cmp	r3, r4
 8112b8c:	db01      	blt.n	8112b92 <__sfputc_r+0x16>
 8112b8e:	290a      	cmp	r1, #10
 8112b90:	d103      	bne.n	8112b9a <__sfputc_r+0x1e>
 8112b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8112b96:	f7fd bace 	b.w	8110136 <__swbuf_r>
 8112b9a:	6813      	ldr	r3, [r2, #0]
 8112b9c:	1c58      	adds	r0, r3, #1
 8112b9e:	6010      	str	r0, [r2, #0]
 8112ba0:	7019      	strb	r1, [r3, #0]
 8112ba2:	4608      	mov	r0, r1
 8112ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8112ba8:	4770      	bx	lr

08112baa <__sfputs_r>:
 8112baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112bac:	4606      	mov	r6, r0
 8112bae:	460f      	mov	r7, r1
 8112bb0:	4614      	mov	r4, r2
 8112bb2:	18d5      	adds	r5, r2, r3
 8112bb4:	42ac      	cmp	r4, r5
 8112bb6:	d101      	bne.n	8112bbc <__sfputs_r+0x12>
 8112bb8:	2000      	movs	r0, #0
 8112bba:	e007      	b.n	8112bcc <__sfputs_r+0x22>
 8112bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112bc0:	463a      	mov	r2, r7
 8112bc2:	4630      	mov	r0, r6
 8112bc4:	f7ff ffda 	bl	8112b7c <__sfputc_r>
 8112bc8:	1c43      	adds	r3, r0, #1
 8112bca:	d1f3      	bne.n	8112bb4 <__sfputs_r+0xa>
 8112bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08112bd0 <_vfiprintf_r>:
 8112bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112bd4:	460d      	mov	r5, r1
 8112bd6:	b09d      	sub	sp, #116	@ 0x74
 8112bd8:	4614      	mov	r4, r2
 8112bda:	4698      	mov	r8, r3
 8112bdc:	4606      	mov	r6, r0
 8112bde:	b118      	cbz	r0, 8112be8 <_vfiprintf_r+0x18>
 8112be0:	6a03      	ldr	r3, [r0, #32]
 8112be2:	b90b      	cbnz	r3, 8112be8 <_vfiprintf_r+0x18>
 8112be4:	f7fd f99e 	bl	810ff24 <__sinit>
 8112be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112bea:	07d9      	lsls	r1, r3, #31
 8112bec:	d405      	bmi.n	8112bfa <_vfiprintf_r+0x2a>
 8112bee:	89ab      	ldrh	r3, [r5, #12]
 8112bf0:	059a      	lsls	r2, r3, #22
 8112bf2:	d402      	bmi.n	8112bfa <_vfiprintf_r+0x2a>
 8112bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8112bf6:	f7fd fbb0 	bl	811035a <__retarget_lock_acquire_recursive>
 8112bfa:	89ab      	ldrh	r3, [r5, #12]
 8112bfc:	071b      	lsls	r3, r3, #28
 8112bfe:	d501      	bpl.n	8112c04 <_vfiprintf_r+0x34>
 8112c00:	692b      	ldr	r3, [r5, #16]
 8112c02:	b99b      	cbnz	r3, 8112c2c <_vfiprintf_r+0x5c>
 8112c04:	4629      	mov	r1, r5
 8112c06:	4630      	mov	r0, r6
 8112c08:	f7fd fad4 	bl	81101b4 <__swsetup_r>
 8112c0c:	b170      	cbz	r0, 8112c2c <_vfiprintf_r+0x5c>
 8112c0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112c10:	07dc      	lsls	r4, r3, #31
 8112c12:	d504      	bpl.n	8112c1e <_vfiprintf_r+0x4e>
 8112c14:	f04f 30ff 	mov.w	r0, #4294967295
 8112c18:	b01d      	add	sp, #116	@ 0x74
 8112c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112c1e:	89ab      	ldrh	r3, [r5, #12]
 8112c20:	0598      	lsls	r0, r3, #22
 8112c22:	d4f7      	bmi.n	8112c14 <_vfiprintf_r+0x44>
 8112c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8112c26:	f7fd fb99 	bl	811035c <__retarget_lock_release_recursive>
 8112c2a:	e7f3      	b.n	8112c14 <_vfiprintf_r+0x44>
 8112c2c:	2300      	movs	r3, #0
 8112c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8112c30:	2320      	movs	r3, #32
 8112c32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8112c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8112c3a:	2330      	movs	r3, #48	@ 0x30
 8112c3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8112dec <_vfiprintf_r+0x21c>
 8112c40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8112c44:	f04f 0901 	mov.w	r9, #1
 8112c48:	4623      	mov	r3, r4
 8112c4a:	469a      	mov	sl, r3
 8112c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8112c50:	b10a      	cbz	r2, 8112c56 <_vfiprintf_r+0x86>
 8112c52:	2a25      	cmp	r2, #37	@ 0x25
 8112c54:	d1f9      	bne.n	8112c4a <_vfiprintf_r+0x7a>
 8112c56:	ebba 0b04 	subs.w	fp, sl, r4
 8112c5a:	d00b      	beq.n	8112c74 <_vfiprintf_r+0xa4>
 8112c5c:	465b      	mov	r3, fp
 8112c5e:	4622      	mov	r2, r4
 8112c60:	4629      	mov	r1, r5
 8112c62:	4630      	mov	r0, r6
 8112c64:	f7ff ffa1 	bl	8112baa <__sfputs_r>
 8112c68:	3001      	adds	r0, #1
 8112c6a:	f000 80a7 	beq.w	8112dbc <_vfiprintf_r+0x1ec>
 8112c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112c70:	445a      	add	r2, fp
 8112c72:	9209      	str	r2, [sp, #36]	@ 0x24
 8112c74:	f89a 3000 	ldrb.w	r3, [sl]
 8112c78:	2b00      	cmp	r3, #0
 8112c7a:	f000 809f 	beq.w	8112dbc <_vfiprintf_r+0x1ec>
 8112c7e:	2300      	movs	r3, #0
 8112c80:	f04f 32ff 	mov.w	r2, #4294967295
 8112c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8112c88:	f10a 0a01 	add.w	sl, sl, #1
 8112c8c:	9304      	str	r3, [sp, #16]
 8112c8e:	9307      	str	r3, [sp, #28]
 8112c90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8112c94:	931a      	str	r3, [sp, #104]	@ 0x68
 8112c96:	4654      	mov	r4, sl
 8112c98:	2205      	movs	r2, #5
 8112c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112c9e:	4853      	ldr	r0, [pc, #332]	@ (8112dec <_vfiprintf_r+0x21c>)
 8112ca0:	f7ed fb1e 	bl	81002e0 <memchr>
 8112ca4:	9a04      	ldr	r2, [sp, #16]
 8112ca6:	b9d8      	cbnz	r0, 8112ce0 <_vfiprintf_r+0x110>
 8112ca8:	06d1      	lsls	r1, r2, #27
 8112caa:	bf44      	itt	mi
 8112cac:	2320      	movmi	r3, #32
 8112cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112cb2:	0713      	lsls	r3, r2, #28
 8112cb4:	bf44      	itt	mi
 8112cb6:	232b      	movmi	r3, #43	@ 0x2b
 8112cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8112cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8112cc2:	d015      	beq.n	8112cf0 <_vfiprintf_r+0x120>
 8112cc4:	9a07      	ldr	r2, [sp, #28]
 8112cc6:	4654      	mov	r4, sl
 8112cc8:	2000      	movs	r0, #0
 8112cca:	f04f 0c0a 	mov.w	ip, #10
 8112cce:	4621      	mov	r1, r4
 8112cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112cd4:	3b30      	subs	r3, #48	@ 0x30
 8112cd6:	2b09      	cmp	r3, #9
 8112cd8:	d94b      	bls.n	8112d72 <_vfiprintf_r+0x1a2>
 8112cda:	b1b0      	cbz	r0, 8112d0a <_vfiprintf_r+0x13a>
 8112cdc:	9207      	str	r2, [sp, #28]
 8112cde:	e014      	b.n	8112d0a <_vfiprintf_r+0x13a>
 8112ce0:	eba0 0308 	sub.w	r3, r0, r8
 8112ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8112ce8:	4313      	orrs	r3, r2
 8112cea:	9304      	str	r3, [sp, #16]
 8112cec:	46a2      	mov	sl, r4
 8112cee:	e7d2      	b.n	8112c96 <_vfiprintf_r+0xc6>
 8112cf0:	9b03      	ldr	r3, [sp, #12]
 8112cf2:	1d19      	adds	r1, r3, #4
 8112cf4:	681b      	ldr	r3, [r3, #0]
 8112cf6:	9103      	str	r1, [sp, #12]
 8112cf8:	2b00      	cmp	r3, #0
 8112cfa:	bfbb      	ittet	lt
 8112cfc:	425b      	neglt	r3, r3
 8112cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8112d02:	9307      	strge	r3, [sp, #28]
 8112d04:	9307      	strlt	r3, [sp, #28]
 8112d06:	bfb8      	it	lt
 8112d08:	9204      	strlt	r2, [sp, #16]
 8112d0a:	7823      	ldrb	r3, [r4, #0]
 8112d0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8112d0e:	d10a      	bne.n	8112d26 <_vfiprintf_r+0x156>
 8112d10:	7863      	ldrb	r3, [r4, #1]
 8112d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8112d14:	d132      	bne.n	8112d7c <_vfiprintf_r+0x1ac>
 8112d16:	9b03      	ldr	r3, [sp, #12]
 8112d18:	1d1a      	adds	r2, r3, #4
 8112d1a:	681b      	ldr	r3, [r3, #0]
 8112d1c:	9203      	str	r2, [sp, #12]
 8112d1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8112d22:	3402      	adds	r4, #2
 8112d24:	9305      	str	r3, [sp, #20]
 8112d26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8112dfc <_vfiprintf_r+0x22c>
 8112d2a:	7821      	ldrb	r1, [r4, #0]
 8112d2c:	2203      	movs	r2, #3
 8112d2e:	4650      	mov	r0, sl
 8112d30:	f7ed fad6 	bl	81002e0 <memchr>
 8112d34:	b138      	cbz	r0, 8112d46 <_vfiprintf_r+0x176>
 8112d36:	9b04      	ldr	r3, [sp, #16]
 8112d38:	eba0 000a 	sub.w	r0, r0, sl
 8112d3c:	2240      	movs	r2, #64	@ 0x40
 8112d3e:	4082      	lsls	r2, r0
 8112d40:	4313      	orrs	r3, r2
 8112d42:	3401      	adds	r4, #1
 8112d44:	9304      	str	r3, [sp, #16]
 8112d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112d4a:	4829      	ldr	r0, [pc, #164]	@ (8112df0 <_vfiprintf_r+0x220>)
 8112d4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8112d50:	2206      	movs	r2, #6
 8112d52:	f7ed fac5 	bl	81002e0 <memchr>
 8112d56:	2800      	cmp	r0, #0
 8112d58:	d03f      	beq.n	8112dda <_vfiprintf_r+0x20a>
 8112d5a:	4b26      	ldr	r3, [pc, #152]	@ (8112df4 <_vfiprintf_r+0x224>)
 8112d5c:	bb1b      	cbnz	r3, 8112da6 <_vfiprintf_r+0x1d6>
 8112d5e:	9b03      	ldr	r3, [sp, #12]
 8112d60:	3307      	adds	r3, #7
 8112d62:	f023 0307 	bic.w	r3, r3, #7
 8112d66:	3308      	adds	r3, #8
 8112d68:	9303      	str	r3, [sp, #12]
 8112d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112d6c:	443b      	add	r3, r7
 8112d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8112d70:	e76a      	b.n	8112c48 <_vfiprintf_r+0x78>
 8112d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8112d76:	460c      	mov	r4, r1
 8112d78:	2001      	movs	r0, #1
 8112d7a:	e7a8      	b.n	8112cce <_vfiprintf_r+0xfe>
 8112d7c:	2300      	movs	r3, #0
 8112d7e:	3401      	adds	r4, #1
 8112d80:	9305      	str	r3, [sp, #20]
 8112d82:	4619      	mov	r1, r3
 8112d84:	f04f 0c0a 	mov.w	ip, #10
 8112d88:	4620      	mov	r0, r4
 8112d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112d8e:	3a30      	subs	r2, #48	@ 0x30
 8112d90:	2a09      	cmp	r2, #9
 8112d92:	d903      	bls.n	8112d9c <_vfiprintf_r+0x1cc>
 8112d94:	2b00      	cmp	r3, #0
 8112d96:	d0c6      	beq.n	8112d26 <_vfiprintf_r+0x156>
 8112d98:	9105      	str	r1, [sp, #20]
 8112d9a:	e7c4      	b.n	8112d26 <_vfiprintf_r+0x156>
 8112d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8112da0:	4604      	mov	r4, r0
 8112da2:	2301      	movs	r3, #1
 8112da4:	e7f0      	b.n	8112d88 <_vfiprintf_r+0x1b8>
 8112da6:	ab03      	add	r3, sp, #12
 8112da8:	9300      	str	r3, [sp, #0]
 8112daa:	462a      	mov	r2, r5
 8112dac:	4b12      	ldr	r3, [pc, #72]	@ (8112df8 <_vfiprintf_r+0x228>)
 8112dae:	a904      	add	r1, sp, #16
 8112db0:	4630      	mov	r0, r6
 8112db2:	f7fc fa5f 	bl	810f274 <_printf_float>
 8112db6:	4607      	mov	r7, r0
 8112db8:	1c78      	adds	r0, r7, #1
 8112dba:	d1d6      	bne.n	8112d6a <_vfiprintf_r+0x19a>
 8112dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112dbe:	07d9      	lsls	r1, r3, #31
 8112dc0:	d405      	bmi.n	8112dce <_vfiprintf_r+0x1fe>
 8112dc2:	89ab      	ldrh	r3, [r5, #12]
 8112dc4:	059a      	lsls	r2, r3, #22
 8112dc6:	d402      	bmi.n	8112dce <_vfiprintf_r+0x1fe>
 8112dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8112dca:	f7fd fac7 	bl	811035c <__retarget_lock_release_recursive>
 8112dce:	89ab      	ldrh	r3, [r5, #12]
 8112dd0:	065b      	lsls	r3, r3, #25
 8112dd2:	f53f af1f 	bmi.w	8112c14 <_vfiprintf_r+0x44>
 8112dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8112dd8:	e71e      	b.n	8112c18 <_vfiprintf_r+0x48>
 8112dda:	ab03      	add	r3, sp, #12
 8112ddc:	9300      	str	r3, [sp, #0]
 8112dde:	462a      	mov	r2, r5
 8112de0:	4b05      	ldr	r3, [pc, #20]	@ (8112df8 <_vfiprintf_r+0x228>)
 8112de2:	a904      	add	r1, sp, #16
 8112de4:	4630      	mov	r0, r6
 8112de6:	f7fc fcdd 	bl	810f7a4 <_printf_i>
 8112dea:	e7e4      	b.n	8112db6 <_vfiprintf_r+0x1e6>
 8112dec:	08113db9 	.word	0x08113db9
 8112df0:	08113dc3 	.word	0x08113dc3
 8112df4:	0810f275 	.word	0x0810f275
 8112df8:	08112bab 	.word	0x08112bab
 8112dfc:	08113dbf 	.word	0x08113dbf

08112e00 <__sflush_r>:
 8112e00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8112e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112e08:	0716      	lsls	r6, r2, #28
 8112e0a:	4605      	mov	r5, r0
 8112e0c:	460c      	mov	r4, r1
 8112e0e:	d454      	bmi.n	8112eba <__sflush_r+0xba>
 8112e10:	684b      	ldr	r3, [r1, #4]
 8112e12:	2b00      	cmp	r3, #0
 8112e14:	dc02      	bgt.n	8112e1c <__sflush_r+0x1c>
 8112e16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8112e18:	2b00      	cmp	r3, #0
 8112e1a:	dd48      	ble.n	8112eae <__sflush_r+0xae>
 8112e1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8112e1e:	2e00      	cmp	r6, #0
 8112e20:	d045      	beq.n	8112eae <__sflush_r+0xae>
 8112e22:	2300      	movs	r3, #0
 8112e24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8112e28:	682f      	ldr	r7, [r5, #0]
 8112e2a:	6a21      	ldr	r1, [r4, #32]
 8112e2c:	602b      	str	r3, [r5, #0]
 8112e2e:	d030      	beq.n	8112e92 <__sflush_r+0x92>
 8112e30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8112e32:	89a3      	ldrh	r3, [r4, #12]
 8112e34:	0759      	lsls	r1, r3, #29
 8112e36:	d505      	bpl.n	8112e44 <__sflush_r+0x44>
 8112e38:	6863      	ldr	r3, [r4, #4]
 8112e3a:	1ad2      	subs	r2, r2, r3
 8112e3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8112e3e:	b10b      	cbz	r3, 8112e44 <__sflush_r+0x44>
 8112e40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8112e42:	1ad2      	subs	r2, r2, r3
 8112e44:	2300      	movs	r3, #0
 8112e46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8112e48:	6a21      	ldr	r1, [r4, #32]
 8112e4a:	4628      	mov	r0, r5
 8112e4c:	47b0      	blx	r6
 8112e4e:	1c43      	adds	r3, r0, #1
 8112e50:	89a3      	ldrh	r3, [r4, #12]
 8112e52:	d106      	bne.n	8112e62 <__sflush_r+0x62>
 8112e54:	6829      	ldr	r1, [r5, #0]
 8112e56:	291d      	cmp	r1, #29
 8112e58:	d82b      	bhi.n	8112eb2 <__sflush_r+0xb2>
 8112e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8112f04 <__sflush_r+0x104>)
 8112e5c:	410a      	asrs	r2, r1
 8112e5e:	07d6      	lsls	r6, r2, #31
 8112e60:	d427      	bmi.n	8112eb2 <__sflush_r+0xb2>
 8112e62:	2200      	movs	r2, #0
 8112e64:	6062      	str	r2, [r4, #4]
 8112e66:	04d9      	lsls	r1, r3, #19
 8112e68:	6922      	ldr	r2, [r4, #16]
 8112e6a:	6022      	str	r2, [r4, #0]
 8112e6c:	d504      	bpl.n	8112e78 <__sflush_r+0x78>
 8112e6e:	1c42      	adds	r2, r0, #1
 8112e70:	d101      	bne.n	8112e76 <__sflush_r+0x76>
 8112e72:	682b      	ldr	r3, [r5, #0]
 8112e74:	b903      	cbnz	r3, 8112e78 <__sflush_r+0x78>
 8112e76:	6560      	str	r0, [r4, #84]	@ 0x54
 8112e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8112e7a:	602f      	str	r7, [r5, #0]
 8112e7c:	b1b9      	cbz	r1, 8112eae <__sflush_r+0xae>
 8112e7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8112e82:	4299      	cmp	r1, r3
 8112e84:	d002      	beq.n	8112e8c <__sflush_r+0x8c>
 8112e86:	4628      	mov	r0, r5
 8112e88:	f7fe f8ea 	bl	8111060 <_free_r>
 8112e8c:	2300      	movs	r3, #0
 8112e8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8112e90:	e00d      	b.n	8112eae <__sflush_r+0xae>
 8112e92:	2301      	movs	r3, #1
 8112e94:	4628      	mov	r0, r5
 8112e96:	47b0      	blx	r6
 8112e98:	4602      	mov	r2, r0
 8112e9a:	1c50      	adds	r0, r2, #1
 8112e9c:	d1c9      	bne.n	8112e32 <__sflush_r+0x32>
 8112e9e:	682b      	ldr	r3, [r5, #0]
 8112ea0:	2b00      	cmp	r3, #0
 8112ea2:	d0c6      	beq.n	8112e32 <__sflush_r+0x32>
 8112ea4:	2b1d      	cmp	r3, #29
 8112ea6:	d001      	beq.n	8112eac <__sflush_r+0xac>
 8112ea8:	2b16      	cmp	r3, #22
 8112eaa:	d11e      	bne.n	8112eea <__sflush_r+0xea>
 8112eac:	602f      	str	r7, [r5, #0]
 8112eae:	2000      	movs	r0, #0
 8112eb0:	e022      	b.n	8112ef8 <__sflush_r+0xf8>
 8112eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112eb6:	b21b      	sxth	r3, r3
 8112eb8:	e01b      	b.n	8112ef2 <__sflush_r+0xf2>
 8112eba:	690f      	ldr	r7, [r1, #16]
 8112ebc:	2f00      	cmp	r7, #0
 8112ebe:	d0f6      	beq.n	8112eae <__sflush_r+0xae>
 8112ec0:	0793      	lsls	r3, r2, #30
 8112ec2:	680e      	ldr	r6, [r1, #0]
 8112ec4:	bf08      	it	eq
 8112ec6:	694b      	ldreq	r3, [r1, #20]
 8112ec8:	600f      	str	r7, [r1, #0]
 8112eca:	bf18      	it	ne
 8112ecc:	2300      	movne	r3, #0
 8112ece:	eba6 0807 	sub.w	r8, r6, r7
 8112ed2:	608b      	str	r3, [r1, #8]
 8112ed4:	f1b8 0f00 	cmp.w	r8, #0
 8112ed8:	dde9      	ble.n	8112eae <__sflush_r+0xae>
 8112eda:	6a21      	ldr	r1, [r4, #32]
 8112edc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8112ede:	4643      	mov	r3, r8
 8112ee0:	463a      	mov	r2, r7
 8112ee2:	4628      	mov	r0, r5
 8112ee4:	47b0      	blx	r6
 8112ee6:	2800      	cmp	r0, #0
 8112ee8:	dc08      	bgt.n	8112efc <__sflush_r+0xfc>
 8112eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112ef2:	81a3      	strh	r3, [r4, #12]
 8112ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8112ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8112efc:	4407      	add	r7, r0
 8112efe:	eba8 0800 	sub.w	r8, r8, r0
 8112f02:	e7e7      	b.n	8112ed4 <__sflush_r+0xd4>
 8112f04:	dfbffffe 	.word	0xdfbffffe

08112f08 <_fflush_r>:
 8112f08:	b538      	push	{r3, r4, r5, lr}
 8112f0a:	690b      	ldr	r3, [r1, #16]
 8112f0c:	4605      	mov	r5, r0
 8112f0e:	460c      	mov	r4, r1
 8112f10:	b913      	cbnz	r3, 8112f18 <_fflush_r+0x10>
 8112f12:	2500      	movs	r5, #0
 8112f14:	4628      	mov	r0, r5
 8112f16:	bd38      	pop	{r3, r4, r5, pc}
 8112f18:	b118      	cbz	r0, 8112f22 <_fflush_r+0x1a>
 8112f1a:	6a03      	ldr	r3, [r0, #32]
 8112f1c:	b90b      	cbnz	r3, 8112f22 <_fflush_r+0x1a>
 8112f1e:	f7fd f801 	bl	810ff24 <__sinit>
 8112f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112f26:	2b00      	cmp	r3, #0
 8112f28:	d0f3      	beq.n	8112f12 <_fflush_r+0xa>
 8112f2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8112f2c:	07d0      	lsls	r0, r2, #31
 8112f2e:	d404      	bmi.n	8112f3a <_fflush_r+0x32>
 8112f30:	0599      	lsls	r1, r3, #22
 8112f32:	d402      	bmi.n	8112f3a <_fflush_r+0x32>
 8112f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8112f36:	f7fd fa10 	bl	811035a <__retarget_lock_acquire_recursive>
 8112f3a:	4628      	mov	r0, r5
 8112f3c:	4621      	mov	r1, r4
 8112f3e:	f7ff ff5f 	bl	8112e00 <__sflush_r>
 8112f42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8112f44:	07da      	lsls	r2, r3, #31
 8112f46:	4605      	mov	r5, r0
 8112f48:	d4e4      	bmi.n	8112f14 <_fflush_r+0xc>
 8112f4a:	89a3      	ldrh	r3, [r4, #12]
 8112f4c:	059b      	lsls	r3, r3, #22
 8112f4e:	d4e1      	bmi.n	8112f14 <_fflush_r+0xc>
 8112f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8112f52:	f7fd fa03 	bl	811035c <__retarget_lock_release_recursive>
 8112f56:	e7dd      	b.n	8112f14 <_fflush_r+0xc>

08112f58 <fiprintf>:
 8112f58:	b40e      	push	{r1, r2, r3}
 8112f5a:	b503      	push	{r0, r1, lr}
 8112f5c:	4601      	mov	r1, r0
 8112f5e:	ab03      	add	r3, sp, #12
 8112f60:	4805      	ldr	r0, [pc, #20]	@ (8112f78 <fiprintf+0x20>)
 8112f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8112f66:	6800      	ldr	r0, [r0, #0]
 8112f68:	9301      	str	r3, [sp, #4]
 8112f6a:	f7ff fe31 	bl	8112bd0 <_vfiprintf_r>
 8112f6e:	b002      	add	sp, #8
 8112f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8112f74:	b003      	add	sp, #12
 8112f76:	4770      	bx	lr
 8112f78:	100000b0 	.word	0x100000b0

08112f7c <__swhatbuf_r>:
 8112f7c:	b570      	push	{r4, r5, r6, lr}
 8112f7e:	460c      	mov	r4, r1
 8112f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112f84:	2900      	cmp	r1, #0
 8112f86:	b096      	sub	sp, #88	@ 0x58
 8112f88:	4615      	mov	r5, r2
 8112f8a:	461e      	mov	r6, r3
 8112f8c:	da0d      	bge.n	8112faa <__swhatbuf_r+0x2e>
 8112f8e:	89a3      	ldrh	r3, [r4, #12]
 8112f90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8112f94:	f04f 0100 	mov.w	r1, #0
 8112f98:	bf14      	ite	ne
 8112f9a:	2340      	movne	r3, #64	@ 0x40
 8112f9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8112fa0:	2000      	movs	r0, #0
 8112fa2:	6031      	str	r1, [r6, #0]
 8112fa4:	602b      	str	r3, [r5, #0]
 8112fa6:	b016      	add	sp, #88	@ 0x58
 8112fa8:	bd70      	pop	{r4, r5, r6, pc}
 8112faa:	466a      	mov	r2, sp
 8112fac:	f000 f874 	bl	8113098 <_fstat_r>
 8112fb0:	2800      	cmp	r0, #0
 8112fb2:	dbec      	blt.n	8112f8e <__swhatbuf_r+0x12>
 8112fb4:	9901      	ldr	r1, [sp, #4]
 8112fb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8112fba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8112fbe:	4259      	negs	r1, r3
 8112fc0:	4159      	adcs	r1, r3
 8112fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8112fc6:	e7eb      	b.n	8112fa0 <__swhatbuf_r+0x24>

08112fc8 <__smakebuf_r>:
 8112fc8:	898b      	ldrh	r3, [r1, #12]
 8112fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8112fcc:	079d      	lsls	r5, r3, #30
 8112fce:	4606      	mov	r6, r0
 8112fd0:	460c      	mov	r4, r1
 8112fd2:	d507      	bpl.n	8112fe4 <__smakebuf_r+0x1c>
 8112fd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8112fd8:	6023      	str	r3, [r4, #0]
 8112fda:	6123      	str	r3, [r4, #16]
 8112fdc:	2301      	movs	r3, #1
 8112fde:	6163      	str	r3, [r4, #20]
 8112fe0:	b003      	add	sp, #12
 8112fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8112fe4:	ab01      	add	r3, sp, #4
 8112fe6:	466a      	mov	r2, sp
 8112fe8:	f7ff ffc8 	bl	8112f7c <__swhatbuf_r>
 8112fec:	9f00      	ldr	r7, [sp, #0]
 8112fee:	4605      	mov	r5, r0
 8112ff0:	4639      	mov	r1, r7
 8112ff2:	4630      	mov	r0, r6
 8112ff4:	f7fe f8a8 	bl	8111148 <_malloc_r>
 8112ff8:	b948      	cbnz	r0, 811300e <__smakebuf_r+0x46>
 8112ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112ffe:	059a      	lsls	r2, r3, #22
 8113000:	d4ee      	bmi.n	8112fe0 <__smakebuf_r+0x18>
 8113002:	f023 0303 	bic.w	r3, r3, #3
 8113006:	f043 0302 	orr.w	r3, r3, #2
 811300a:	81a3      	strh	r3, [r4, #12]
 811300c:	e7e2      	b.n	8112fd4 <__smakebuf_r+0xc>
 811300e:	89a3      	ldrh	r3, [r4, #12]
 8113010:	6020      	str	r0, [r4, #0]
 8113012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8113016:	81a3      	strh	r3, [r4, #12]
 8113018:	9b01      	ldr	r3, [sp, #4]
 811301a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811301e:	b15b      	cbz	r3, 8113038 <__smakebuf_r+0x70>
 8113020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8113024:	4630      	mov	r0, r6
 8113026:	f000 f849 	bl	81130bc <_isatty_r>
 811302a:	b128      	cbz	r0, 8113038 <__smakebuf_r+0x70>
 811302c:	89a3      	ldrh	r3, [r4, #12]
 811302e:	f023 0303 	bic.w	r3, r3, #3
 8113032:	f043 0301 	orr.w	r3, r3, #1
 8113036:	81a3      	strh	r3, [r4, #12]
 8113038:	89a3      	ldrh	r3, [r4, #12]
 811303a:	431d      	orrs	r5, r3
 811303c:	81a5      	strh	r5, [r4, #12]
 811303e:	e7cf      	b.n	8112fe0 <__smakebuf_r+0x18>

08113040 <memmove>:
 8113040:	4288      	cmp	r0, r1
 8113042:	b510      	push	{r4, lr}
 8113044:	eb01 0402 	add.w	r4, r1, r2
 8113048:	d902      	bls.n	8113050 <memmove+0x10>
 811304a:	4284      	cmp	r4, r0
 811304c:	4623      	mov	r3, r4
 811304e:	d807      	bhi.n	8113060 <memmove+0x20>
 8113050:	1e43      	subs	r3, r0, #1
 8113052:	42a1      	cmp	r1, r4
 8113054:	d008      	beq.n	8113068 <memmove+0x28>
 8113056:	f811 2b01 	ldrb.w	r2, [r1], #1
 811305a:	f803 2f01 	strb.w	r2, [r3, #1]!
 811305e:	e7f8      	b.n	8113052 <memmove+0x12>
 8113060:	4402      	add	r2, r0
 8113062:	4601      	mov	r1, r0
 8113064:	428a      	cmp	r2, r1
 8113066:	d100      	bne.n	811306a <memmove+0x2a>
 8113068:	bd10      	pop	{r4, pc}
 811306a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811306e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8113072:	e7f7      	b.n	8113064 <memmove+0x24>

08113074 <strncmp>:
 8113074:	b510      	push	{r4, lr}
 8113076:	b16a      	cbz	r2, 8113094 <strncmp+0x20>
 8113078:	3901      	subs	r1, #1
 811307a:	1884      	adds	r4, r0, r2
 811307c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8113080:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8113084:	429a      	cmp	r2, r3
 8113086:	d103      	bne.n	8113090 <strncmp+0x1c>
 8113088:	42a0      	cmp	r0, r4
 811308a:	d001      	beq.n	8113090 <strncmp+0x1c>
 811308c:	2a00      	cmp	r2, #0
 811308e:	d1f5      	bne.n	811307c <strncmp+0x8>
 8113090:	1ad0      	subs	r0, r2, r3
 8113092:	bd10      	pop	{r4, pc}
 8113094:	4610      	mov	r0, r2
 8113096:	e7fc      	b.n	8113092 <strncmp+0x1e>

08113098 <_fstat_r>:
 8113098:	b538      	push	{r3, r4, r5, lr}
 811309a:	4d07      	ldr	r5, [pc, #28]	@ (81130b8 <_fstat_r+0x20>)
 811309c:	2300      	movs	r3, #0
 811309e:	4604      	mov	r4, r0
 81130a0:	4608      	mov	r0, r1
 81130a2:	4611      	mov	r1, r2
 81130a4:	602b      	str	r3, [r5, #0]
 81130a6:	f7f1 f80b 	bl	81040c0 <_fstat>
 81130aa:	1c43      	adds	r3, r0, #1
 81130ac:	d102      	bne.n	81130b4 <_fstat_r+0x1c>
 81130ae:	682b      	ldr	r3, [r5, #0]
 81130b0:	b103      	cbz	r3, 81130b4 <_fstat_r+0x1c>
 81130b2:	6023      	str	r3, [r4, #0]
 81130b4:	bd38      	pop	{r3, r4, r5, pc}
 81130b6:	bf00      	nop
 81130b8:	10008c54 	.word	0x10008c54

081130bc <_isatty_r>:
 81130bc:	b538      	push	{r3, r4, r5, lr}
 81130be:	4d06      	ldr	r5, [pc, #24]	@ (81130d8 <_isatty_r+0x1c>)
 81130c0:	2300      	movs	r3, #0
 81130c2:	4604      	mov	r4, r0
 81130c4:	4608      	mov	r0, r1
 81130c6:	602b      	str	r3, [r5, #0]
 81130c8:	f7f1 f80a 	bl	81040e0 <_isatty>
 81130cc:	1c43      	adds	r3, r0, #1
 81130ce:	d102      	bne.n	81130d6 <_isatty_r+0x1a>
 81130d0:	682b      	ldr	r3, [r5, #0]
 81130d2:	b103      	cbz	r3, 81130d6 <_isatty_r+0x1a>
 81130d4:	6023      	str	r3, [r4, #0]
 81130d6:	bd38      	pop	{r3, r4, r5, pc}
 81130d8:	10008c54 	.word	0x10008c54

081130dc <_sbrk_r>:
 81130dc:	b538      	push	{r3, r4, r5, lr}
 81130de:	4d06      	ldr	r5, [pc, #24]	@ (81130f8 <_sbrk_r+0x1c>)
 81130e0:	2300      	movs	r3, #0
 81130e2:	4604      	mov	r4, r0
 81130e4:	4608      	mov	r0, r1
 81130e6:	602b      	str	r3, [r5, #0]
 81130e8:	f7f1 f812 	bl	8104110 <_sbrk>
 81130ec:	1c43      	adds	r3, r0, #1
 81130ee:	d102      	bne.n	81130f6 <_sbrk_r+0x1a>
 81130f0:	682b      	ldr	r3, [r5, #0]
 81130f2:	b103      	cbz	r3, 81130f6 <_sbrk_r+0x1a>
 81130f4:	6023      	str	r3, [r4, #0]
 81130f6:	bd38      	pop	{r3, r4, r5, pc}
 81130f8:	10008c54 	.word	0x10008c54
 81130fc:	00000000 	.word	0x00000000

08113100 <nan>:
 8113100:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8113108 <nan+0x8>
 8113104:	4770      	bx	lr
 8113106:	bf00      	nop
 8113108:	00000000 	.word	0x00000000
 811310c:	7ff80000 	.word	0x7ff80000

08113110 <abort>:
 8113110:	b508      	push	{r3, lr}
 8113112:	2006      	movs	r0, #6
 8113114:	f000 fbc4 	bl	81138a0 <raise>
 8113118:	2001      	movs	r0, #1
 811311a:	f7f0 ff9b 	bl	8104054 <_exit>

0811311e <_calloc_r>:
 811311e:	b570      	push	{r4, r5, r6, lr}
 8113120:	fba1 5402 	umull	r5, r4, r1, r2
 8113124:	b93c      	cbnz	r4, 8113136 <_calloc_r+0x18>
 8113126:	4629      	mov	r1, r5
 8113128:	f7fe f80e 	bl	8111148 <_malloc_r>
 811312c:	4606      	mov	r6, r0
 811312e:	b928      	cbnz	r0, 811313c <_calloc_r+0x1e>
 8113130:	2600      	movs	r6, #0
 8113132:	4630      	mov	r0, r6
 8113134:	bd70      	pop	{r4, r5, r6, pc}
 8113136:	220c      	movs	r2, #12
 8113138:	6002      	str	r2, [r0, #0]
 811313a:	e7f9      	b.n	8113130 <_calloc_r+0x12>
 811313c:	462a      	mov	r2, r5
 811313e:	4621      	mov	r1, r4
 8113140:	f7fd f88e 	bl	8110260 <memset>
 8113144:	e7f5      	b.n	8113132 <_calloc_r+0x14>

08113146 <rshift>:
 8113146:	6903      	ldr	r3, [r0, #16]
 8113148:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 811314c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8113150:	ea4f 1261 	mov.w	r2, r1, asr #5
 8113154:	f100 0414 	add.w	r4, r0, #20
 8113158:	dd45      	ble.n	81131e6 <rshift+0xa0>
 811315a:	f011 011f 	ands.w	r1, r1, #31
 811315e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8113162:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8113166:	d10c      	bne.n	8113182 <rshift+0x3c>
 8113168:	f100 0710 	add.w	r7, r0, #16
 811316c:	4629      	mov	r1, r5
 811316e:	42b1      	cmp	r1, r6
 8113170:	d334      	bcc.n	81131dc <rshift+0x96>
 8113172:	1a9b      	subs	r3, r3, r2
 8113174:	009b      	lsls	r3, r3, #2
 8113176:	1eea      	subs	r2, r5, #3
 8113178:	4296      	cmp	r6, r2
 811317a:	bf38      	it	cc
 811317c:	2300      	movcc	r3, #0
 811317e:	4423      	add	r3, r4
 8113180:	e015      	b.n	81131ae <rshift+0x68>
 8113182:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8113186:	f1c1 0820 	rsb	r8, r1, #32
 811318a:	40cf      	lsrs	r7, r1
 811318c:	f105 0e04 	add.w	lr, r5, #4
 8113190:	46a1      	mov	r9, r4
 8113192:	4576      	cmp	r6, lr
 8113194:	46f4      	mov	ip, lr
 8113196:	d815      	bhi.n	81131c4 <rshift+0x7e>
 8113198:	1a9a      	subs	r2, r3, r2
 811319a:	0092      	lsls	r2, r2, #2
 811319c:	3a04      	subs	r2, #4
 811319e:	3501      	adds	r5, #1
 81131a0:	42ae      	cmp	r6, r5
 81131a2:	bf38      	it	cc
 81131a4:	2200      	movcc	r2, #0
 81131a6:	18a3      	adds	r3, r4, r2
 81131a8:	50a7      	str	r7, [r4, r2]
 81131aa:	b107      	cbz	r7, 81131ae <rshift+0x68>
 81131ac:	3304      	adds	r3, #4
 81131ae:	1b1a      	subs	r2, r3, r4
 81131b0:	42a3      	cmp	r3, r4
 81131b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 81131b6:	bf08      	it	eq
 81131b8:	2300      	moveq	r3, #0
 81131ba:	6102      	str	r2, [r0, #16]
 81131bc:	bf08      	it	eq
 81131be:	6143      	streq	r3, [r0, #20]
 81131c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81131c4:	f8dc c000 	ldr.w	ip, [ip]
 81131c8:	fa0c fc08 	lsl.w	ip, ip, r8
 81131cc:	ea4c 0707 	orr.w	r7, ip, r7
 81131d0:	f849 7b04 	str.w	r7, [r9], #4
 81131d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 81131d8:	40cf      	lsrs	r7, r1
 81131da:	e7da      	b.n	8113192 <rshift+0x4c>
 81131dc:	f851 cb04 	ldr.w	ip, [r1], #4
 81131e0:	f847 cf04 	str.w	ip, [r7, #4]!
 81131e4:	e7c3      	b.n	811316e <rshift+0x28>
 81131e6:	4623      	mov	r3, r4
 81131e8:	e7e1      	b.n	81131ae <rshift+0x68>

081131ea <__hexdig_fun>:
 81131ea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 81131ee:	2b09      	cmp	r3, #9
 81131f0:	d802      	bhi.n	81131f8 <__hexdig_fun+0xe>
 81131f2:	3820      	subs	r0, #32
 81131f4:	b2c0      	uxtb	r0, r0
 81131f6:	4770      	bx	lr
 81131f8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 81131fc:	2b05      	cmp	r3, #5
 81131fe:	d801      	bhi.n	8113204 <__hexdig_fun+0x1a>
 8113200:	3847      	subs	r0, #71	@ 0x47
 8113202:	e7f7      	b.n	81131f4 <__hexdig_fun+0xa>
 8113204:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8113208:	2b05      	cmp	r3, #5
 811320a:	d801      	bhi.n	8113210 <__hexdig_fun+0x26>
 811320c:	3827      	subs	r0, #39	@ 0x27
 811320e:	e7f1      	b.n	81131f4 <__hexdig_fun+0xa>
 8113210:	2000      	movs	r0, #0
 8113212:	4770      	bx	lr

08113214 <__gethex>:
 8113214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113218:	b085      	sub	sp, #20
 811321a:	468a      	mov	sl, r1
 811321c:	9302      	str	r3, [sp, #8]
 811321e:	680b      	ldr	r3, [r1, #0]
 8113220:	9001      	str	r0, [sp, #4]
 8113222:	4690      	mov	r8, r2
 8113224:	1c9c      	adds	r4, r3, #2
 8113226:	46a1      	mov	r9, r4
 8113228:	f814 0b01 	ldrb.w	r0, [r4], #1
 811322c:	2830      	cmp	r0, #48	@ 0x30
 811322e:	d0fa      	beq.n	8113226 <__gethex+0x12>
 8113230:	eba9 0303 	sub.w	r3, r9, r3
 8113234:	f1a3 0b02 	sub.w	fp, r3, #2
 8113238:	f7ff ffd7 	bl	81131ea <__hexdig_fun>
 811323c:	4605      	mov	r5, r0
 811323e:	2800      	cmp	r0, #0
 8113240:	d168      	bne.n	8113314 <__gethex+0x100>
 8113242:	49a0      	ldr	r1, [pc, #640]	@ (81134c4 <__gethex+0x2b0>)
 8113244:	2201      	movs	r2, #1
 8113246:	4648      	mov	r0, r9
 8113248:	f7ff ff14 	bl	8113074 <strncmp>
 811324c:	4607      	mov	r7, r0
 811324e:	2800      	cmp	r0, #0
 8113250:	d167      	bne.n	8113322 <__gethex+0x10e>
 8113252:	f899 0001 	ldrb.w	r0, [r9, #1]
 8113256:	4626      	mov	r6, r4
 8113258:	f7ff ffc7 	bl	81131ea <__hexdig_fun>
 811325c:	2800      	cmp	r0, #0
 811325e:	d062      	beq.n	8113326 <__gethex+0x112>
 8113260:	4623      	mov	r3, r4
 8113262:	7818      	ldrb	r0, [r3, #0]
 8113264:	2830      	cmp	r0, #48	@ 0x30
 8113266:	4699      	mov	r9, r3
 8113268:	f103 0301 	add.w	r3, r3, #1
 811326c:	d0f9      	beq.n	8113262 <__gethex+0x4e>
 811326e:	f7ff ffbc 	bl	81131ea <__hexdig_fun>
 8113272:	fab0 f580 	clz	r5, r0
 8113276:	096d      	lsrs	r5, r5, #5
 8113278:	f04f 0b01 	mov.w	fp, #1
 811327c:	464a      	mov	r2, r9
 811327e:	4616      	mov	r6, r2
 8113280:	3201      	adds	r2, #1
 8113282:	7830      	ldrb	r0, [r6, #0]
 8113284:	f7ff ffb1 	bl	81131ea <__hexdig_fun>
 8113288:	2800      	cmp	r0, #0
 811328a:	d1f8      	bne.n	811327e <__gethex+0x6a>
 811328c:	498d      	ldr	r1, [pc, #564]	@ (81134c4 <__gethex+0x2b0>)
 811328e:	2201      	movs	r2, #1
 8113290:	4630      	mov	r0, r6
 8113292:	f7ff feef 	bl	8113074 <strncmp>
 8113296:	2800      	cmp	r0, #0
 8113298:	d13f      	bne.n	811331a <__gethex+0x106>
 811329a:	b944      	cbnz	r4, 81132ae <__gethex+0x9a>
 811329c:	1c74      	adds	r4, r6, #1
 811329e:	4622      	mov	r2, r4
 81132a0:	4616      	mov	r6, r2
 81132a2:	3201      	adds	r2, #1
 81132a4:	7830      	ldrb	r0, [r6, #0]
 81132a6:	f7ff ffa0 	bl	81131ea <__hexdig_fun>
 81132aa:	2800      	cmp	r0, #0
 81132ac:	d1f8      	bne.n	81132a0 <__gethex+0x8c>
 81132ae:	1ba4      	subs	r4, r4, r6
 81132b0:	00a7      	lsls	r7, r4, #2
 81132b2:	7833      	ldrb	r3, [r6, #0]
 81132b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 81132b8:	2b50      	cmp	r3, #80	@ 0x50
 81132ba:	d13e      	bne.n	811333a <__gethex+0x126>
 81132bc:	7873      	ldrb	r3, [r6, #1]
 81132be:	2b2b      	cmp	r3, #43	@ 0x2b
 81132c0:	d033      	beq.n	811332a <__gethex+0x116>
 81132c2:	2b2d      	cmp	r3, #45	@ 0x2d
 81132c4:	d034      	beq.n	8113330 <__gethex+0x11c>
 81132c6:	1c71      	adds	r1, r6, #1
 81132c8:	2400      	movs	r4, #0
 81132ca:	7808      	ldrb	r0, [r1, #0]
 81132cc:	f7ff ff8d 	bl	81131ea <__hexdig_fun>
 81132d0:	1e43      	subs	r3, r0, #1
 81132d2:	b2db      	uxtb	r3, r3
 81132d4:	2b18      	cmp	r3, #24
 81132d6:	d830      	bhi.n	811333a <__gethex+0x126>
 81132d8:	f1a0 0210 	sub.w	r2, r0, #16
 81132dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 81132e0:	f7ff ff83 	bl	81131ea <__hexdig_fun>
 81132e4:	f100 3cff 	add.w	ip, r0, #4294967295
 81132e8:	fa5f fc8c 	uxtb.w	ip, ip
 81132ec:	f1bc 0f18 	cmp.w	ip, #24
 81132f0:	f04f 030a 	mov.w	r3, #10
 81132f4:	d91e      	bls.n	8113334 <__gethex+0x120>
 81132f6:	b104      	cbz	r4, 81132fa <__gethex+0xe6>
 81132f8:	4252      	negs	r2, r2
 81132fa:	4417      	add	r7, r2
 81132fc:	f8ca 1000 	str.w	r1, [sl]
 8113300:	b1ed      	cbz	r5, 811333e <__gethex+0x12a>
 8113302:	f1bb 0f00 	cmp.w	fp, #0
 8113306:	bf0c      	ite	eq
 8113308:	2506      	moveq	r5, #6
 811330a:	2500      	movne	r5, #0
 811330c:	4628      	mov	r0, r5
 811330e:	b005      	add	sp, #20
 8113310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113314:	2500      	movs	r5, #0
 8113316:	462c      	mov	r4, r5
 8113318:	e7b0      	b.n	811327c <__gethex+0x68>
 811331a:	2c00      	cmp	r4, #0
 811331c:	d1c7      	bne.n	81132ae <__gethex+0x9a>
 811331e:	4627      	mov	r7, r4
 8113320:	e7c7      	b.n	81132b2 <__gethex+0x9e>
 8113322:	464e      	mov	r6, r9
 8113324:	462f      	mov	r7, r5
 8113326:	2501      	movs	r5, #1
 8113328:	e7c3      	b.n	81132b2 <__gethex+0x9e>
 811332a:	2400      	movs	r4, #0
 811332c:	1cb1      	adds	r1, r6, #2
 811332e:	e7cc      	b.n	81132ca <__gethex+0xb6>
 8113330:	2401      	movs	r4, #1
 8113332:	e7fb      	b.n	811332c <__gethex+0x118>
 8113334:	fb03 0002 	mla	r0, r3, r2, r0
 8113338:	e7ce      	b.n	81132d8 <__gethex+0xc4>
 811333a:	4631      	mov	r1, r6
 811333c:	e7de      	b.n	81132fc <__gethex+0xe8>
 811333e:	eba6 0309 	sub.w	r3, r6, r9
 8113342:	3b01      	subs	r3, #1
 8113344:	4629      	mov	r1, r5
 8113346:	2b07      	cmp	r3, #7
 8113348:	dc0a      	bgt.n	8113360 <__gethex+0x14c>
 811334a:	9801      	ldr	r0, [sp, #4]
 811334c:	f7fd ff88 	bl	8111260 <_Balloc>
 8113350:	4604      	mov	r4, r0
 8113352:	b940      	cbnz	r0, 8113366 <__gethex+0x152>
 8113354:	4b5c      	ldr	r3, [pc, #368]	@ (81134c8 <__gethex+0x2b4>)
 8113356:	4602      	mov	r2, r0
 8113358:	21e4      	movs	r1, #228	@ 0xe4
 811335a:	485c      	ldr	r0, [pc, #368]	@ (81134cc <__gethex+0x2b8>)
 811335c:	f7fd f814 	bl	8110388 <__assert_func>
 8113360:	3101      	adds	r1, #1
 8113362:	105b      	asrs	r3, r3, #1
 8113364:	e7ef      	b.n	8113346 <__gethex+0x132>
 8113366:	f100 0a14 	add.w	sl, r0, #20
 811336a:	2300      	movs	r3, #0
 811336c:	4655      	mov	r5, sl
 811336e:	469b      	mov	fp, r3
 8113370:	45b1      	cmp	r9, r6
 8113372:	d337      	bcc.n	81133e4 <__gethex+0x1d0>
 8113374:	f845 bb04 	str.w	fp, [r5], #4
 8113378:	eba5 050a 	sub.w	r5, r5, sl
 811337c:	10ad      	asrs	r5, r5, #2
 811337e:	6125      	str	r5, [r4, #16]
 8113380:	4658      	mov	r0, fp
 8113382:	f7fe f85f 	bl	8111444 <__hi0bits>
 8113386:	016d      	lsls	r5, r5, #5
 8113388:	f8d8 6000 	ldr.w	r6, [r8]
 811338c:	1a2d      	subs	r5, r5, r0
 811338e:	42b5      	cmp	r5, r6
 8113390:	dd54      	ble.n	811343c <__gethex+0x228>
 8113392:	1bad      	subs	r5, r5, r6
 8113394:	4629      	mov	r1, r5
 8113396:	4620      	mov	r0, r4
 8113398:	f7fe fbf3 	bl	8111b82 <__any_on>
 811339c:	4681      	mov	r9, r0
 811339e:	b178      	cbz	r0, 81133c0 <__gethex+0x1ac>
 81133a0:	1e6b      	subs	r3, r5, #1
 81133a2:	1159      	asrs	r1, r3, #5
 81133a4:	f003 021f 	and.w	r2, r3, #31
 81133a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 81133ac:	f04f 0901 	mov.w	r9, #1
 81133b0:	fa09 f202 	lsl.w	r2, r9, r2
 81133b4:	420a      	tst	r2, r1
 81133b6:	d003      	beq.n	81133c0 <__gethex+0x1ac>
 81133b8:	454b      	cmp	r3, r9
 81133ba:	dc36      	bgt.n	811342a <__gethex+0x216>
 81133bc:	f04f 0902 	mov.w	r9, #2
 81133c0:	4629      	mov	r1, r5
 81133c2:	4620      	mov	r0, r4
 81133c4:	f7ff febf 	bl	8113146 <rshift>
 81133c8:	442f      	add	r7, r5
 81133ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81133ce:	42bb      	cmp	r3, r7
 81133d0:	da42      	bge.n	8113458 <__gethex+0x244>
 81133d2:	9801      	ldr	r0, [sp, #4]
 81133d4:	4621      	mov	r1, r4
 81133d6:	f7fd ff83 	bl	81112e0 <_Bfree>
 81133da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81133dc:	2300      	movs	r3, #0
 81133de:	6013      	str	r3, [r2, #0]
 81133e0:	25a3      	movs	r5, #163	@ 0xa3
 81133e2:	e793      	b.n	811330c <__gethex+0xf8>
 81133e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 81133e8:	2a2e      	cmp	r2, #46	@ 0x2e
 81133ea:	d012      	beq.n	8113412 <__gethex+0x1fe>
 81133ec:	2b20      	cmp	r3, #32
 81133ee:	d104      	bne.n	81133fa <__gethex+0x1e6>
 81133f0:	f845 bb04 	str.w	fp, [r5], #4
 81133f4:	f04f 0b00 	mov.w	fp, #0
 81133f8:	465b      	mov	r3, fp
 81133fa:	7830      	ldrb	r0, [r6, #0]
 81133fc:	9303      	str	r3, [sp, #12]
 81133fe:	f7ff fef4 	bl	81131ea <__hexdig_fun>
 8113402:	9b03      	ldr	r3, [sp, #12]
 8113404:	f000 000f 	and.w	r0, r0, #15
 8113408:	4098      	lsls	r0, r3
 811340a:	ea4b 0b00 	orr.w	fp, fp, r0
 811340e:	3304      	adds	r3, #4
 8113410:	e7ae      	b.n	8113370 <__gethex+0x15c>
 8113412:	45b1      	cmp	r9, r6
 8113414:	d8ea      	bhi.n	81133ec <__gethex+0x1d8>
 8113416:	492b      	ldr	r1, [pc, #172]	@ (81134c4 <__gethex+0x2b0>)
 8113418:	9303      	str	r3, [sp, #12]
 811341a:	2201      	movs	r2, #1
 811341c:	4630      	mov	r0, r6
 811341e:	f7ff fe29 	bl	8113074 <strncmp>
 8113422:	9b03      	ldr	r3, [sp, #12]
 8113424:	2800      	cmp	r0, #0
 8113426:	d1e1      	bne.n	81133ec <__gethex+0x1d8>
 8113428:	e7a2      	b.n	8113370 <__gethex+0x15c>
 811342a:	1ea9      	subs	r1, r5, #2
 811342c:	4620      	mov	r0, r4
 811342e:	f7fe fba8 	bl	8111b82 <__any_on>
 8113432:	2800      	cmp	r0, #0
 8113434:	d0c2      	beq.n	81133bc <__gethex+0x1a8>
 8113436:	f04f 0903 	mov.w	r9, #3
 811343a:	e7c1      	b.n	81133c0 <__gethex+0x1ac>
 811343c:	da09      	bge.n	8113452 <__gethex+0x23e>
 811343e:	1b75      	subs	r5, r6, r5
 8113440:	4621      	mov	r1, r4
 8113442:	9801      	ldr	r0, [sp, #4]
 8113444:	462a      	mov	r2, r5
 8113446:	f7fe f963 	bl	8111710 <__lshift>
 811344a:	1b7f      	subs	r7, r7, r5
 811344c:	4604      	mov	r4, r0
 811344e:	f100 0a14 	add.w	sl, r0, #20
 8113452:	f04f 0900 	mov.w	r9, #0
 8113456:	e7b8      	b.n	81133ca <__gethex+0x1b6>
 8113458:	f8d8 5004 	ldr.w	r5, [r8, #4]
 811345c:	42bd      	cmp	r5, r7
 811345e:	dd6f      	ble.n	8113540 <__gethex+0x32c>
 8113460:	1bed      	subs	r5, r5, r7
 8113462:	42ae      	cmp	r6, r5
 8113464:	dc34      	bgt.n	81134d0 <__gethex+0x2bc>
 8113466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811346a:	2b02      	cmp	r3, #2
 811346c:	d022      	beq.n	81134b4 <__gethex+0x2a0>
 811346e:	2b03      	cmp	r3, #3
 8113470:	d024      	beq.n	81134bc <__gethex+0x2a8>
 8113472:	2b01      	cmp	r3, #1
 8113474:	d115      	bne.n	81134a2 <__gethex+0x28e>
 8113476:	42ae      	cmp	r6, r5
 8113478:	d113      	bne.n	81134a2 <__gethex+0x28e>
 811347a:	2e01      	cmp	r6, #1
 811347c:	d10b      	bne.n	8113496 <__gethex+0x282>
 811347e:	9a02      	ldr	r2, [sp, #8]
 8113480:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8113484:	6013      	str	r3, [r2, #0]
 8113486:	2301      	movs	r3, #1
 8113488:	6123      	str	r3, [r4, #16]
 811348a:	f8ca 3000 	str.w	r3, [sl]
 811348e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8113490:	2562      	movs	r5, #98	@ 0x62
 8113492:	601c      	str	r4, [r3, #0]
 8113494:	e73a      	b.n	811330c <__gethex+0xf8>
 8113496:	1e71      	subs	r1, r6, #1
 8113498:	4620      	mov	r0, r4
 811349a:	f7fe fb72 	bl	8111b82 <__any_on>
 811349e:	2800      	cmp	r0, #0
 81134a0:	d1ed      	bne.n	811347e <__gethex+0x26a>
 81134a2:	9801      	ldr	r0, [sp, #4]
 81134a4:	4621      	mov	r1, r4
 81134a6:	f7fd ff1b 	bl	81112e0 <_Bfree>
 81134aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81134ac:	2300      	movs	r3, #0
 81134ae:	6013      	str	r3, [r2, #0]
 81134b0:	2550      	movs	r5, #80	@ 0x50
 81134b2:	e72b      	b.n	811330c <__gethex+0xf8>
 81134b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81134b6:	2b00      	cmp	r3, #0
 81134b8:	d1f3      	bne.n	81134a2 <__gethex+0x28e>
 81134ba:	e7e0      	b.n	811347e <__gethex+0x26a>
 81134bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81134be:	2b00      	cmp	r3, #0
 81134c0:	d1dd      	bne.n	811347e <__gethex+0x26a>
 81134c2:	e7ee      	b.n	81134a2 <__gethex+0x28e>
 81134c4:	08113c60 	.word	0x08113c60
 81134c8:	08113af9 	.word	0x08113af9
 81134cc:	08113dd2 	.word	0x08113dd2
 81134d0:	1e6f      	subs	r7, r5, #1
 81134d2:	f1b9 0f00 	cmp.w	r9, #0
 81134d6:	d130      	bne.n	811353a <__gethex+0x326>
 81134d8:	b127      	cbz	r7, 81134e4 <__gethex+0x2d0>
 81134da:	4639      	mov	r1, r7
 81134dc:	4620      	mov	r0, r4
 81134de:	f7fe fb50 	bl	8111b82 <__any_on>
 81134e2:	4681      	mov	r9, r0
 81134e4:	117a      	asrs	r2, r7, #5
 81134e6:	2301      	movs	r3, #1
 81134e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 81134ec:	f007 071f 	and.w	r7, r7, #31
 81134f0:	40bb      	lsls	r3, r7
 81134f2:	4213      	tst	r3, r2
 81134f4:	4629      	mov	r1, r5
 81134f6:	4620      	mov	r0, r4
 81134f8:	bf18      	it	ne
 81134fa:	f049 0902 	orrne.w	r9, r9, #2
 81134fe:	f7ff fe22 	bl	8113146 <rshift>
 8113502:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8113506:	1b76      	subs	r6, r6, r5
 8113508:	2502      	movs	r5, #2
 811350a:	f1b9 0f00 	cmp.w	r9, #0
 811350e:	d047      	beq.n	81135a0 <__gethex+0x38c>
 8113510:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8113514:	2b02      	cmp	r3, #2
 8113516:	d015      	beq.n	8113544 <__gethex+0x330>
 8113518:	2b03      	cmp	r3, #3
 811351a:	d017      	beq.n	811354c <__gethex+0x338>
 811351c:	2b01      	cmp	r3, #1
 811351e:	d109      	bne.n	8113534 <__gethex+0x320>
 8113520:	f019 0f02 	tst.w	r9, #2
 8113524:	d006      	beq.n	8113534 <__gethex+0x320>
 8113526:	f8da 3000 	ldr.w	r3, [sl]
 811352a:	ea49 0903 	orr.w	r9, r9, r3
 811352e:	f019 0f01 	tst.w	r9, #1
 8113532:	d10e      	bne.n	8113552 <__gethex+0x33e>
 8113534:	f045 0510 	orr.w	r5, r5, #16
 8113538:	e032      	b.n	81135a0 <__gethex+0x38c>
 811353a:	f04f 0901 	mov.w	r9, #1
 811353e:	e7d1      	b.n	81134e4 <__gethex+0x2d0>
 8113540:	2501      	movs	r5, #1
 8113542:	e7e2      	b.n	811350a <__gethex+0x2f6>
 8113544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8113546:	f1c3 0301 	rsb	r3, r3, #1
 811354a:	930f      	str	r3, [sp, #60]	@ 0x3c
 811354c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811354e:	2b00      	cmp	r3, #0
 8113550:	d0f0      	beq.n	8113534 <__gethex+0x320>
 8113552:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8113556:	f104 0314 	add.w	r3, r4, #20
 811355a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 811355e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8113562:	f04f 0c00 	mov.w	ip, #0
 8113566:	4618      	mov	r0, r3
 8113568:	f853 2b04 	ldr.w	r2, [r3], #4
 811356c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8113570:	d01b      	beq.n	81135aa <__gethex+0x396>
 8113572:	3201      	adds	r2, #1
 8113574:	6002      	str	r2, [r0, #0]
 8113576:	2d02      	cmp	r5, #2
 8113578:	f104 0314 	add.w	r3, r4, #20
 811357c:	d13c      	bne.n	81135f8 <__gethex+0x3e4>
 811357e:	f8d8 2000 	ldr.w	r2, [r8]
 8113582:	3a01      	subs	r2, #1
 8113584:	42b2      	cmp	r2, r6
 8113586:	d109      	bne.n	811359c <__gethex+0x388>
 8113588:	1171      	asrs	r1, r6, #5
 811358a:	2201      	movs	r2, #1
 811358c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8113590:	f006 061f 	and.w	r6, r6, #31
 8113594:	fa02 f606 	lsl.w	r6, r2, r6
 8113598:	421e      	tst	r6, r3
 811359a:	d13a      	bne.n	8113612 <__gethex+0x3fe>
 811359c:	f045 0520 	orr.w	r5, r5, #32
 81135a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81135a2:	601c      	str	r4, [r3, #0]
 81135a4:	9b02      	ldr	r3, [sp, #8]
 81135a6:	601f      	str	r7, [r3, #0]
 81135a8:	e6b0      	b.n	811330c <__gethex+0xf8>
 81135aa:	4299      	cmp	r1, r3
 81135ac:	f843 cc04 	str.w	ip, [r3, #-4]
 81135b0:	d8d9      	bhi.n	8113566 <__gethex+0x352>
 81135b2:	68a3      	ldr	r3, [r4, #8]
 81135b4:	459b      	cmp	fp, r3
 81135b6:	db17      	blt.n	81135e8 <__gethex+0x3d4>
 81135b8:	6861      	ldr	r1, [r4, #4]
 81135ba:	9801      	ldr	r0, [sp, #4]
 81135bc:	3101      	adds	r1, #1
 81135be:	f7fd fe4f 	bl	8111260 <_Balloc>
 81135c2:	4681      	mov	r9, r0
 81135c4:	b918      	cbnz	r0, 81135ce <__gethex+0x3ba>
 81135c6:	4b1a      	ldr	r3, [pc, #104]	@ (8113630 <__gethex+0x41c>)
 81135c8:	4602      	mov	r2, r0
 81135ca:	2184      	movs	r1, #132	@ 0x84
 81135cc:	e6c5      	b.n	811335a <__gethex+0x146>
 81135ce:	6922      	ldr	r2, [r4, #16]
 81135d0:	3202      	adds	r2, #2
 81135d2:	f104 010c 	add.w	r1, r4, #12
 81135d6:	0092      	lsls	r2, r2, #2
 81135d8:	300c      	adds	r0, #12
 81135da:	f7fc fec0 	bl	811035e <memcpy>
 81135de:	4621      	mov	r1, r4
 81135e0:	9801      	ldr	r0, [sp, #4]
 81135e2:	f7fd fe7d 	bl	81112e0 <_Bfree>
 81135e6:	464c      	mov	r4, r9
 81135e8:	6923      	ldr	r3, [r4, #16]
 81135ea:	1c5a      	adds	r2, r3, #1
 81135ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81135f0:	6122      	str	r2, [r4, #16]
 81135f2:	2201      	movs	r2, #1
 81135f4:	615a      	str	r2, [r3, #20]
 81135f6:	e7be      	b.n	8113576 <__gethex+0x362>
 81135f8:	6922      	ldr	r2, [r4, #16]
 81135fa:	455a      	cmp	r2, fp
 81135fc:	dd0b      	ble.n	8113616 <__gethex+0x402>
 81135fe:	2101      	movs	r1, #1
 8113600:	4620      	mov	r0, r4
 8113602:	f7ff fda0 	bl	8113146 <rshift>
 8113606:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811360a:	3701      	adds	r7, #1
 811360c:	42bb      	cmp	r3, r7
 811360e:	f6ff aee0 	blt.w	81133d2 <__gethex+0x1be>
 8113612:	2501      	movs	r5, #1
 8113614:	e7c2      	b.n	811359c <__gethex+0x388>
 8113616:	f016 061f 	ands.w	r6, r6, #31
 811361a:	d0fa      	beq.n	8113612 <__gethex+0x3fe>
 811361c:	4453      	add	r3, sl
 811361e:	f1c6 0620 	rsb	r6, r6, #32
 8113622:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8113626:	f7fd ff0d 	bl	8111444 <__hi0bits>
 811362a:	42b0      	cmp	r0, r6
 811362c:	dbe7      	blt.n	81135fe <__gethex+0x3ea>
 811362e:	e7f0      	b.n	8113612 <__gethex+0x3fe>
 8113630:	08113af9 	.word	0x08113af9

08113634 <L_shift>:
 8113634:	f1c2 0208 	rsb	r2, r2, #8
 8113638:	0092      	lsls	r2, r2, #2
 811363a:	b570      	push	{r4, r5, r6, lr}
 811363c:	f1c2 0620 	rsb	r6, r2, #32
 8113640:	6843      	ldr	r3, [r0, #4]
 8113642:	6804      	ldr	r4, [r0, #0]
 8113644:	fa03 f506 	lsl.w	r5, r3, r6
 8113648:	432c      	orrs	r4, r5
 811364a:	40d3      	lsrs	r3, r2
 811364c:	6004      	str	r4, [r0, #0]
 811364e:	f840 3f04 	str.w	r3, [r0, #4]!
 8113652:	4288      	cmp	r0, r1
 8113654:	d3f4      	bcc.n	8113640 <L_shift+0xc>
 8113656:	bd70      	pop	{r4, r5, r6, pc}

08113658 <__match>:
 8113658:	b530      	push	{r4, r5, lr}
 811365a:	6803      	ldr	r3, [r0, #0]
 811365c:	3301      	adds	r3, #1
 811365e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8113662:	b914      	cbnz	r4, 811366a <__match+0x12>
 8113664:	6003      	str	r3, [r0, #0]
 8113666:	2001      	movs	r0, #1
 8113668:	bd30      	pop	{r4, r5, pc}
 811366a:	f813 2b01 	ldrb.w	r2, [r3], #1
 811366e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8113672:	2d19      	cmp	r5, #25
 8113674:	bf98      	it	ls
 8113676:	3220      	addls	r2, #32
 8113678:	42a2      	cmp	r2, r4
 811367a:	d0f0      	beq.n	811365e <__match+0x6>
 811367c:	2000      	movs	r0, #0
 811367e:	e7f3      	b.n	8113668 <__match+0x10>

08113680 <__hexnan>:
 8113680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113684:	680b      	ldr	r3, [r1, #0]
 8113686:	6801      	ldr	r1, [r0, #0]
 8113688:	115e      	asrs	r6, r3, #5
 811368a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 811368e:	f013 031f 	ands.w	r3, r3, #31
 8113692:	b087      	sub	sp, #28
 8113694:	bf18      	it	ne
 8113696:	3604      	addne	r6, #4
 8113698:	2500      	movs	r5, #0
 811369a:	1f37      	subs	r7, r6, #4
 811369c:	4682      	mov	sl, r0
 811369e:	4690      	mov	r8, r2
 81136a0:	9301      	str	r3, [sp, #4]
 81136a2:	f846 5c04 	str.w	r5, [r6, #-4]
 81136a6:	46b9      	mov	r9, r7
 81136a8:	463c      	mov	r4, r7
 81136aa:	9502      	str	r5, [sp, #8]
 81136ac:	46ab      	mov	fp, r5
 81136ae:	784a      	ldrb	r2, [r1, #1]
 81136b0:	1c4b      	adds	r3, r1, #1
 81136b2:	9303      	str	r3, [sp, #12]
 81136b4:	b342      	cbz	r2, 8113708 <__hexnan+0x88>
 81136b6:	4610      	mov	r0, r2
 81136b8:	9105      	str	r1, [sp, #20]
 81136ba:	9204      	str	r2, [sp, #16]
 81136bc:	f7ff fd95 	bl	81131ea <__hexdig_fun>
 81136c0:	2800      	cmp	r0, #0
 81136c2:	d151      	bne.n	8113768 <__hexnan+0xe8>
 81136c4:	9a04      	ldr	r2, [sp, #16]
 81136c6:	9905      	ldr	r1, [sp, #20]
 81136c8:	2a20      	cmp	r2, #32
 81136ca:	d818      	bhi.n	81136fe <__hexnan+0x7e>
 81136cc:	9b02      	ldr	r3, [sp, #8]
 81136ce:	459b      	cmp	fp, r3
 81136d0:	dd13      	ble.n	81136fa <__hexnan+0x7a>
 81136d2:	454c      	cmp	r4, r9
 81136d4:	d206      	bcs.n	81136e4 <__hexnan+0x64>
 81136d6:	2d07      	cmp	r5, #7
 81136d8:	dc04      	bgt.n	81136e4 <__hexnan+0x64>
 81136da:	462a      	mov	r2, r5
 81136dc:	4649      	mov	r1, r9
 81136de:	4620      	mov	r0, r4
 81136e0:	f7ff ffa8 	bl	8113634 <L_shift>
 81136e4:	4544      	cmp	r4, r8
 81136e6:	d952      	bls.n	811378e <__hexnan+0x10e>
 81136e8:	2300      	movs	r3, #0
 81136ea:	f1a4 0904 	sub.w	r9, r4, #4
 81136ee:	f844 3c04 	str.w	r3, [r4, #-4]
 81136f2:	f8cd b008 	str.w	fp, [sp, #8]
 81136f6:	464c      	mov	r4, r9
 81136f8:	461d      	mov	r5, r3
 81136fa:	9903      	ldr	r1, [sp, #12]
 81136fc:	e7d7      	b.n	81136ae <__hexnan+0x2e>
 81136fe:	2a29      	cmp	r2, #41	@ 0x29
 8113700:	d157      	bne.n	81137b2 <__hexnan+0x132>
 8113702:	3102      	adds	r1, #2
 8113704:	f8ca 1000 	str.w	r1, [sl]
 8113708:	f1bb 0f00 	cmp.w	fp, #0
 811370c:	d051      	beq.n	81137b2 <__hexnan+0x132>
 811370e:	454c      	cmp	r4, r9
 8113710:	d206      	bcs.n	8113720 <__hexnan+0xa0>
 8113712:	2d07      	cmp	r5, #7
 8113714:	dc04      	bgt.n	8113720 <__hexnan+0xa0>
 8113716:	462a      	mov	r2, r5
 8113718:	4649      	mov	r1, r9
 811371a:	4620      	mov	r0, r4
 811371c:	f7ff ff8a 	bl	8113634 <L_shift>
 8113720:	4544      	cmp	r4, r8
 8113722:	d936      	bls.n	8113792 <__hexnan+0x112>
 8113724:	f1a8 0204 	sub.w	r2, r8, #4
 8113728:	4623      	mov	r3, r4
 811372a:	f853 1b04 	ldr.w	r1, [r3], #4
 811372e:	f842 1f04 	str.w	r1, [r2, #4]!
 8113732:	429f      	cmp	r7, r3
 8113734:	d2f9      	bcs.n	811372a <__hexnan+0xaa>
 8113736:	1b3b      	subs	r3, r7, r4
 8113738:	f023 0303 	bic.w	r3, r3, #3
 811373c:	3304      	adds	r3, #4
 811373e:	3401      	adds	r4, #1
 8113740:	3e03      	subs	r6, #3
 8113742:	42b4      	cmp	r4, r6
 8113744:	bf88      	it	hi
 8113746:	2304      	movhi	r3, #4
 8113748:	4443      	add	r3, r8
 811374a:	2200      	movs	r2, #0
 811374c:	f843 2b04 	str.w	r2, [r3], #4
 8113750:	429f      	cmp	r7, r3
 8113752:	d2fb      	bcs.n	811374c <__hexnan+0xcc>
 8113754:	683b      	ldr	r3, [r7, #0]
 8113756:	b91b      	cbnz	r3, 8113760 <__hexnan+0xe0>
 8113758:	4547      	cmp	r7, r8
 811375a:	d128      	bne.n	81137ae <__hexnan+0x12e>
 811375c:	2301      	movs	r3, #1
 811375e:	603b      	str	r3, [r7, #0]
 8113760:	2005      	movs	r0, #5
 8113762:	b007      	add	sp, #28
 8113764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113768:	3501      	adds	r5, #1
 811376a:	2d08      	cmp	r5, #8
 811376c:	f10b 0b01 	add.w	fp, fp, #1
 8113770:	dd06      	ble.n	8113780 <__hexnan+0x100>
 8113772:	4544      	cmp	r4, r8
 8113774:	d9c1      	bls.n	81136fa <__hexnan+0x7a>
 8113776:	2300      	movs	r3, #0
 8113778:	f844 3c04 	str.w	r3, [r4, #-4]
 811377c:	2501      	movs	r5, #1
 811377e:	3c04      	subs	r4, #4
 8113780:	6822      	ldr	r2, [r4, #0]
 8113782:	f000 000f 	and.w	r0, r0, #15
 8113786:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 811378a:	6020      	str	r0, [r4, #0]
 811378c:	e7b5      	b.n	81136fa <__hexnan+0x7a>
 811378e:	2508      	movs	r5, #8
 8113790:	e7b3      	b.n	81136fa <__hexnan+0x7a>
 8113792:	9b01      	ldr	r3, [sp, #4]
 8113794:	2b00      	cmp	r3, #0
 8113796:	d0dd      	beq.n	8113754 <__hexnan+0xd4>
 8113798:	f1c3 0320 	rsb	r3, r3, #32
 811379c:	f04f 32ff 	mov.w	r2, #4294967295
 81137a0:	40da      	lsrs	r2, r3
 81137a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 81137a6:	4013      	ands	r3, r2
 81137a8:	f846 3c04 	str.w	r3, [r6, #-4]
 81137ac:	e7d2      	b.n	8113754 <__hexnan+0xd4>
 81137ae:	3f04      	subs	r7, #4
 81137b0:	e7d0      	b.n	8113754 <__hexnan+0xd4>
 81137b2:	2004      	movs	r0, #4
 81137b4:	e7d5      	b.n	8113762 <__hexnan+0xe2>

081137b6 <__ascii_mbtowc>:
 81137b6:	b082      	sub	sp, #8
 81137b8:	b901      	cbnz	r1, 81137bc <__ascii_mbtowc+0x6>
 81137ba:	a901      	add	r1, sp, #4
 81137bc:	b142      	cbz	r2, 81137d0 <__ascii_mbtowc+0x1a>
 81137be:	b14b      	cbz	r3, 81137d4 <__ascii_mbtowc+0x1e>
 81137c0:	7813      	ldrb	r3, [r2, #0]
 81137c2:	600b      	str	r3, [r1, #0]
 81137c4:	7812      	ldrb	r2, [r2, #0]
 81137c6:	1e10      	subs	r0, r2, #0
 81137c8:	bf18      	it	ne
 81137ca:	2001      	movne	r0, #1
 81137cc:	b002      	add	sp, #8
 81137ce:	4770      	bx	lr
 81137d0:	4610      	mov	r0, r2
 81137d2:	e7fb      	b.n	81137cc <__ascii_mbtowc+0x16>
 81137d4:	f06f 0001 	mvn.w	r0, #1
 81137d8:	e7f8      	b.n	81137cc <__ascii_mbtowc+0x16>

081137da <_realloc_r>:
 81137da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81137de:	4680      	mov	r8, r0
 81137e0:	4615      	mov	r5, r2
 81137e2:	460c      	mov	r4, r1
 81137e4:	b921      	cbnz	r1, 81137f0 <_realloc_r+0x16>
 81137e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81137ea:	4611      	mov	r1, r2
 81137ec:	f7fd bcac 	b.w	8111148 <_malloc_r>
 81137f0:	b92a      	cbnz	r2, 81137fe <_realloc_r+0x24>
 81137f2:	f7fd fc35 	bl	8111060 <_free_r>
 81137f6:	2400      	movs	r4, #0
 81137f8:	4620      	mov	r0, r4
 81137fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81137fe:	f000 f86b 	bl	81138d8 <_malloc_usable_size_r>
 8113802:	4285      	cmp	r5, r0
 8113804:	4606      	mov	r6, r0
 8113806:	d802      	bhi.n	811380e <_realloc_r+0x34>
 8113808:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 811380c:	d8f4      	bhi.n	81137f8 <_realloc_r+0x1e>
 811380e:	4629      	mov	r1, r5
 8113810:	4640      	mov	r0, r8
 8113812:	f7fd fc99 	bl	8111148 <_malloc_r>
 8113816:	4607      	mov	r7, r0
 8113818:	2800      	cmp	r0, #0
 811381a:	d0ec      	beq.n	81137f6 <_realloc_r+0x1c>
 811381c:	42b5      	cmp	r5, r6
 811381e:	462a      	mov	r2, r5
 8113820:	4621      	mov	r1, r4
 8113822:	bf28      	it	cs
 8113824:	4632      	movcs	r2, r6
 8113826:	f7fc fd9a 	bl	811035e <memcpy>
 811382a:	4621      	mov	r1, r4
 811382c:	4640      	mov	r0, r8
 811382e:	f7fd fc17 	bl	8111060 <_free_r>
 8113832:	463c      	mov	r4, r7
 8113834:	e7e0      	b.n	81137f8 <_realloc_r+0x1e>

08113836 <__ascii_wctomb>:
 8113836:	4603      	mov	r3, r0
 8113838:	4608      	mov	r0, r1
 811383a:	b141      	cbz	r1, 811384e <__ascii_wctomb+0x18>
 811383c:	2aff      	cmp	r2, #255	@ 0xff
 811383e:	d904      	bls.n	811384a <__ascii_wctomb+0x14>
 8113840:	228a      	movs	r2, #138	@ 0x8a
 8113842:	601a      	str	r2, [r3, #0]
 8113844:	f04f 30ff 	mov.w	r0, #4294967295
 8113848:	4770      	bx	lr
 811384a:	700a      	strb	r2, [r1, #0]
 811384c:	2001      	movs	r0, #1
 811384e:	4770      	bx	lr

08113850 <_raise_r>:
 8113850:	291f      	cmp	r1, #31
 8113852:	b538      	push	{r3, r4, r5, lr}
 8113854:	4605      	mov	r5, r0
 8113856:	460c      	mov	r4, r1
 8113858:	d904      	bls.n	8113864 <_raise_r+0x14>
 811385a:	2316      	movs	r3, #22
 811385c:	6003      	str	r3, [r0, #0]
 811385e:	f04f 30ff 	mov.w	r0, #4294967295
 8113862:	bd38      	pop	{r3, r4, r5, pc}
 8113864:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8113866:	b112      	cbz	r2, 811386e <_raise_r+0x1e>
 8113868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811386c:	b94b      	cbnz	r3, 8113882 <_raise_r+0x32>
 811386e:	4628      	mov	r0, r5
 8113870:	f000 f830 	bl	81138d4 <_getpid_r>
 8113874:	4622      	mov	r2, r4
 8113876:	4601      	mov	r1, r0
 8113878:	4628      	mov	r0, r5
 811387a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811387e:	f000 b817 	b.w	81138b0 <_kill_r>
 8113882:	2b01      	cmp	r3, #1
 8113884:	d00a      	beq.n	811389c <_raise_r+0x4c>
 8113886:	1c59      	adds	r1, r3, #1
 8113888:	d103      	bne.n	8113892 <_raise_r+0x42>
 811388a:	2316      	movs	r3, #22
 811388c:	6003      	str	r3, [r0, #0]
 811388e:	2001      	movs	r0, #1
 8113890:	e7e7      	b.n	8113862 <_raise_r+0x12>
 8113892:	2100      	movs	r1, #0
 8113894:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8113898:	4620      	mov	r0, r4
 811389a:	4798      	blx	r3
 811389c:	2000      	movs	r0, #0
 811389e:	e7e0      	b.n	8113862 <_raise_r+0x12>

081138a0 <raise>:
 81138a0:	4b02      	ldr	r3, [pc, #8]	@ (81138ac <raise+0xc>)
 81138a2:	4601      	mov	r1, r0
 81138a4:	6818      	ldr	r0, [r3, #0]
 81138a6:	f7ff bfd3 	b.w	8113850 <_raise_r>
 81138aa:	bf00      	nop
 81138ac:	100000b0 	.word	0x100000b0

081138b0 <_kill_r>:
 81138b0:	b538      	push	{r3, r4, r5, lr}
 81138b2:	4d07      	ldr	r5, [pc, #28]	@ (81138d0 <_kill_r+0x20>)
 81138b4:	2300      	movs	r3, #0
 81138b6:	4604      	mov	r4, r0
 81138b8:	4608      	mov	r0, r1
 81138ba:	4611      	mov	r1, r2
 81138bc:	602b      	str	r3, [r5, #0]
 81138be:	f7f0 fbb9 	bl	8104034 <_kill>
 81138c2:	1c43      	adds	r3, r0, #1
 81138c4:	d102      	bne.n	81138cc <_kill_r+0x1c>
 81138c6:	682b      	ldr	r3, [r5, #0]
 81138c8:	b103      	cbz	r3, 81138cc <_kill_r+0x1c>
 81138ca:	6023      	str	r3, [r4, #0]
 81138cc:	bd38      	pop	{r3, r4, r5, pc}
 81138ce:	bf00      	nop
 81138d0:	10008c54 	.word	0x10008c54

081138d4 <_getpid_r>:
 81138d4:	f7f0 bba6 	b.w	8104024 <_getpid>

081138d8 <_malloc_usable_size_r>:
 81138d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81138dc:	1f18      	subs	r0, r3, #4
 81138de:	2b00      	cmp	r3, #0
 81138e0:	bfbc      	itt	lt
 81138e2:	580b      	ldrlt	r3, [r1, r0]
 81138e4:	18c0      	addlt	r0, r0, r3
 81138e6:	4770      	bx	lr

081138e8 <_init>:
 81138e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81138ea:	bf00      	nop
 81138ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81138ee:	bc08      	pop	{r3}
 81138f0:	469e      	mov	lr, r3
 81138f2:	4770      	bx	lr

081138f4 <_fini>:
 81138f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81138f6:	bf00      	nop
 81138f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81138fa:	bc08      	pop	{r3}
 81138fc:	469e      	mov	lr, r3
 81138fe:	4770      	bx	lr
