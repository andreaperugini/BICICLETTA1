
BICICLETTA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013998  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08113c38  08113c38  00014c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08114184  08114184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0811418c  0811418c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08114190  08114190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000026c  10000000  08114194  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008a58  10000270  08114400  00016270  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  10008cc8  08114400  00016cc8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001626c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029416  00000000  00000000  0001629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b36  00000000  00000000  0003f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d60  00000000  00000000  000441e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000164d  00000000  00000000  00045f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f8d4  00000000  00000000  00047595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027583  00000000  00000000  00086e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a3893  00000000  00000000  000ae3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  00251c7f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000927c  00000000  00000000  00251d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  0025afb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000017d8  00000000  00000000  0025b01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  0025c7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000270 	.word	0x10000270
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08113c20 	.word	0x08113c20

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000274 	.word	0x10000274
 81002dc:	08113c20 	.word	0x08113c20

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <DegreeSec2RPM>:
 */
#include "DC_motor.h"
#include "main.h"
#include "stdint.h"

float DegreeSec2RPM(float speed_degsec){
 8101124:	b480      	push	{r7}
 8101126:	b085      	sub	sp, #20
 8101128:	af00      	add	r7, sp, #0
 810112a:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed_rpm = (speed_degsec * 60)/360;
 810112e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101132:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 810115c <DegreeSec2RPM+0x38>
 8101136:	ee27 7a87 	vmul.f32	s14, s15, s14
 810113a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8101160 <DegreeSec2RPM+0x3c>
 810113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101142:	edc7 7a03 	vstr	s15, [r7, #12]
	return speed_rpm;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	ee07 3a90 	vmov	s15, r3
}
 810114c:	eeb0 0a67 	vmov.f32	s0, s15
 8101150:	3714      	adds	r7, #20
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	42700000 	.word	0x42700000
 8101160:	43b40000 	.word	0x43b40000

08101164 <Voltage2Duty>:

float Voltage2Duty(float u){
 8101164:	b480      	push	{r7}
 8101166:	b085      	sub	sp, #20
 8101168:	af00      	add	r7, sp, #0
 810116a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0){
 810116e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810117a:	d805      	bhi.n	8101188 <Voltage2Duty+0x24>
		u = -u;
 810117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101180:	eef1 7a67 	vneg.f32	s15, s15
 8101184:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	float duty = 100 * u/V_MAX;
 8101188:	edd7 7a01 	vldr	s15, [r7, #4]
 810118c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 81011e0 <Voltage2Duty+0x7c>
 8101190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101194:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8101198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810119c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (duty > 100){
 81011a0:	edd7 7a03 	vldr	s15, [r7, #12]
 81011a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 81011e0 <Voltage2Duty+0x7c>
 81011a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 81011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011b0:	dd02      	ble.n	81011b8 <Voltage2Duty+0x54>
		duty = 100;
 81011b2:	4b0c      	ldr	r3, [pc, #48]	@ (81011e4 <Voltage2Duty+0x80>)
 81011b4:	60fb      	str	r3, [r7, #12]
 81011b6:	e009      	b.n	81011cc <Voltage2Duty+0x68>
	}else if(duty < 0){
 81011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 81011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011c4:	d502      	bpl.n	81011cc <Voltage2Duty+0x68>
		duty = 0;
 81011c6:	f04f 0300 	mov.w	r3, #0
 81011ca:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	ee07 3a90 	vmov	s15, r3
}
 81011d2:	eeb0 0a67 	vmov.f32	s0, s15
 81011d6:	3714      	adds	r7, #20
 81011d8:	46bd      	mov	sp, r7
 81011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011de:	4770      	bx	lr
 81011e0:	42c80000 	.word	0x42c80000
 81011e4:	42c80000 	.word	0x42c80000

081011e8 <Ref2Direction>:

uint8_t Ref2Direction(float y_ref){
 81011e8:	b480      	push	{r7}
 81011ea:	b085      	sub	sp, #20
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t direction;
	if(y_ref >= 0){
 81011f2:	edd7 7a01 	vldr	s15, [r7, #4]
 81011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81011fe:	db02      	blt.n	8101206 <Ref2Direction+0x1e>
		direction = 0;
 8101200:	2300      	movs	r3, #0
 8101202:	73fb      	strb	r3, [r7, #15]
 8101204:	e001      	b.n	810120a <Ref2Direction+0x22>
	} else {
		direction = 1;
 8101206:	2301      	movs	r3, #1
 8101208:	73fb      	strb	r3, [r7, #15]
	}
	return direction;
 810120a:	7bfb      	ldrb	r3, [r7, #15]
}
 810120c:	4618      	mov	r0, r3
 810120e:	3714      	adds	r7, #20
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr

08101218 <set_PWM_and_dir_back_wheel>:

void set_PWM_and_dir_back_wheel(float duty, uint8_t direction){
 8101218:	b5b0      	push	{r4, r5, r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	ed87 0a01 	vstr	s0, [r7, #4]
 8101222:	4603      	mov	r3, r0
 8101224:	70fb      	strb	r3, [r7, #3]
	TIM1 ->CCR1 = (duty/100.0)*TIM1->ARR;
 8101226:	6878      	ldr	r0, [r7, #4]
 8101228:	f7ff fa16 	bl	8100658 <__aeabi_f2d>
 810122c:	f04f 0200 	mov.w	r2, #0
 8101230:	4b17      	ldr	r3, [pc, #92]	@ (8101290 <set_PWM_and_dir_back_wheel+0x78>)
 8101232:	f7ff fb93 	bl	810095c <__aeabi_ddiv>
 8101236:	4602      	mov	r2, r0
 8101238:	460b      	mov	r3, r1
 810123a:	4614      	mov	r4, r2
 810123c:	461d      	mov	r5, r3
 810123e:	4b15      	ldr	r3, [pc, #84]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 8101240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101242:	4618      	mov	r0, r3
 8101244:	f7ff f9e6 	bl	8100614 <__aeabi_ui2d>
 8101248:	4602      	mov	r2, r0
 810124a:	460b      	mov	r3, r1
 810124c:	4620      	mov	r0, r4
 810124e:	4629      	mov	r1, r5
 8101250:	f7ff fa5a 	bl	8100708 <__aeabi_dmul>
 8101254:	4602      	mov	r2, r0
 8101256:	460b      	mov	r3, r1
 8101258:	4c0e      	ldr	r4, [pc, #56]	@ (8101294 <set_PWM_and_dir_back_wheel+0x7c>)
 810125a:	4610      	mov	r0, r2
 810125c:	4619      	mov	r1, r3
 810125e:	f7ff fd2b 	bl	8100cb8 <__aeabi_d2uiz>
 8101262:	4603      	mov	r3, r0
 8101264:	6363      	str	r3, [r4, #52]	@ 0x34

	if(direction == 0){
 8101266:	78fb      	ldrb	r3, [r7, #3]
 8101268:	2b00      	cmp	r3, #0
 810126a:	d105      	bne.n	8101278 <set_PWM_and_dir_back_wheel+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810126c:	2200      	movs	r2, #0
 810126e:	2110      	movs	r1, #16
 8101270:	4809      	ldr	r0, [pc, #36]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101272:	f005 ffab 	bl	81071cc <HAL_GPIO_WritePin>
	}else if(direction == 1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	}
}
 8101276:	e007      	b.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
	}else if(direction == 1){
 8101278:	78fb      	ldrb	r3, [r7, #3]
 810127a:	2b01      	cmp	r3, #1
 810127c:	d104      	bne.n	8101288 <set_PWM_and_dir_back_wheel+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810127e:	2201      	movs	r2, #1
 8101280:	2110      	movs	r1, #16
 8101282:	4805      	ldr	r0, [pc, #20]	@ (8101298 <set_PWM_and_dir_back_wheel+0x80>)
 8101284:	f005 ffa2 	bl	81071cc <HAL_GPIO_WritePin>
}
 8101288:	bf00      	nop
 810128a:	3708      	adds	r7, #8
 810128c:	46bd      	mov	sp, r7
 810128e:	bdb0      	pop	{r4, r5, r7, pc}
 8101290:	40590000 	.word	0x40590000
 8101294:	40010000 	.word	0x40010000
 8101298:	58020000 	.word	0x58020000

0810129c <set_PWM_and_dir_front_wheel>:

void set_PWM_and_dir_front_wheel (float duty, uint8_t dir){
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	ed87 0a01 	vstr	s0, [r7, #4]
 81012a6:	4603      	mov	r3, r0
 81012a8:	70fb      	strb	r3, [r7, #3]
	TIM3 -> CCR1 = (duty/100)*TIM3->ARR;
 81012aa:	edd7 7a01 	vldr	s15, [r7, #4]
 81012ae:	eddf 6a13 	vldr	s13, [pc, #76]	@ 81012fc <set_PWM_and_dir_front_wheel+0x60>
 81012b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81012b6:	4b12      	ldr	r3, [pc, #72]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ba:	ee07 3a90 	vmov	s15, r3
 81012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8101300 <set_PWM_and_dir_front_wheel+0x64>)
 81012c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012cc:	ee17 2a90 	vmov	r2, s15
 81012d0:	635a      	str	r2, [r3, #52]	@ 0x34

	if (dir == 0){
 81012d2:	78fb      	ldrb	r3, [r7, #3]
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d105      	bne.n	81012e4 <set_PWM_and_dir_front_wheel+0x48>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 81012d8:	2200      	movs	r2, #0
 81012da:	2120      	movs	r1, #32
 81012dc:	4809      	ldr	r0, [pc, #36]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012de:	f005 ff75 	bl	81071cc <HAL_GPIO_WritePin>
	}else if (dir == 1){
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	}
}
 81012e2:	e007      	b.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
	}else if (dir == 1){
 81012e4:	78fb      	ldrb	r3, [r7, #3]
 81012e6:	2b01      	cmp	r3, #1
 81012e8:	d104      	bne.n	81012f4 <set_PWM_and_dir_front_wheel+0x58>
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 81012ea:	2201      	movs	r2, #1
 81012ec:	2120      	movs	r1, #32
 81012ee:	4805      	ldr	r0, [pc, #20]	@ (8101304 <set_PWM_and_dir_front_wheel+0x68>)
 81012f0:	f005 ff6c 	bl	81071cc <HAL_GPIO_WritePin>
}
 81012f4:	bf00      	nop
 81012f6:	3708      	adds	r7, #8
 81012f8:	46bd      	mov	sp, r7
 81012fa:	bd80      	pop	{r7, pc}
 81012fc:	42c80000 	.word	0x42c80000
 8101300:	40000400 	.word	0x40000400
 8101304:	58020000 	.word	0x58020000

08101308 <init_PID>:
 *      Author: andre
 */

#include <PID.h>

void init_PID (PID* p, float Tc, float u_max, float u_min){
 8101308:	b480      	push	{r7}
 810130a:	b085      	sub	sp, #20
 810130c:	af00      	add	r7, sp, #0
 810130e:	60f8      	str	r0, [r7, #12]
 8101310:	ed87 0a02 	vstr	s0, [r7, #8]
 8101314:	edc7 0a01 	vstr	s1, [r7, #4]
 8101318:	ed87 1a00 	vstr	s2, [r7]

	p->Tc = Tc;
 810131c:	68fb      	ldr	r3, [r7, #12]
 810131e:	68ba      	ldr	r2, [r7, #8]
 8101320:	60da      	str	r2, [r3, #12]
	p->u_max = u_max;
 8101322:	68fb      	ldr	r3, [r7, #12]
 8101324:	687a      	ldr	r2, [r7, #4]
 8101326:	611a      	str	r2, [r3, #16]
	p->u_min = u_min;
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	683a      	ldr	r2, [r7, #0]
 810132c:	615a      	str	r2, [r3, #20]
	p->e_old=0;
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	f04f 0200 	mov.w	r2, #0
 8101334:	619a      	str	r2, [r3, #24]
	p->Iterm=0;
 8101336:	68fb      	ldr	r3, [r7, #12]
 8101338:	f04f 0200 	mov.w	r2, #0
 810133c:	61da      	str	r2, [r3, #28]

}
 810133e:	bf00      	nop
 8101340:	3714      	adds	r7, #20
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr

0810134a <tune_PID>:


void tune_PID (PID* p, float Kp, float Ki, float Kd){
 810134a:	b480      	push	{r7}
 810134c:	b085      	sub	sp, #20
 810134e:	af00      	add	r7, sp, #0
 8101350:	60f8      	str	r0, [r7, #12]
 8101352:	ed87 0a02 	vstr	s0, [r7, #8]
 8101356:	edc7 0a01 	vstr	s1, [r7, #4]
 810135a:	ed87 1a00 	vstr	s2, [r7]

	p->Kp = Kp;
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	68ba      	ldr	r2, [r7, #8]
 8101362:	601a      	str	r2, [r3, #0]
	p->Kd = Kd;
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	683a      	ldr	r2, [r7, #0]
 8101368:	609a      	str	r2, [r3, #8]
	p->Ki = Ki;
 810136a:	68fb      	ldr	r3, [r7, #12]
 810136c:	687a      	ldr	r2, [r7, #4]
 810136e:	605a      	str	r2, [r3, #4]
}
 8101370:	bf00      	nop
 8101372:	3714      	adds	r7, #20
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr

0810137c <PID_controller>:

float PID_controller (PID* p, float y, float r){
 810137c:	b480      	push	{r7}
 810137e:	b089      	sub	sp, #36	@ 0x24
 8101380:	af00      	add	r7, sp, #0
 8101382:	60f8      	str	r0, [r7, #12]
 8101384:	ed87 0a02 	vstr	s0, [r7, #8]
 8101388:	edc7 0a01 	vstr	s1, [r7, #4]

	float u;
	float newIterm;
	float e = r-y;
 810138c:	ed97 7a01 	vldr	s14, [r7, #4]
 8101390:	edd7 7a02 	vldr	s15, [r7, #8]
 8101394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101398:	edc7 7a06 	vstr	s15, [r7, #24]
	float Pterm = p-> Kp * e;
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	edd3 7a00 	vldr	s15, [r3]
 81013a2:	ed97 7a06 	vldr	s14, [r7, #24]
 81013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013aa:	edc7 7a05 	vstr	s15, [r7, #20]

	newIterm = p->Iterm + (p->Ki)* p->Tc * p->e_old;
 81013ae:	68fb      	ldr	r3, [r7, #12]
 81013b0:	ed93 7a07 	vldr	s14, [r3, #28]
 81013b4:	68fb      	ldr	r3, [r7, #12]
 81013b6:	edd3 6a01 	vldr	s13, [r3, #4]
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	edd3 7a03 	vldr	s15, [r3, #12]
 81013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	edd3 7a06 	vldr	s15, [r3, #24]
 81013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	p->e_old = e;
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	69ba      	ldr	r2, [r7, #24]
 81013da:	619a      	str	r2, [r3, #24]
	u = Pterm + newIterm;
 81013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 81013e0:	edd7 7a04 	vldr	s15, [r7, #16]
 81013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81013e8:	edc7 7a07 	vstr	s15, [r7, #28]




	if (u > p->u_max){
 81013ec:	68fb      	ldr	r3, [r7, #12]
 81013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 81013f2:	ed97 7a07 	vldr	s14, [r7, #28]
 81013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013fe:	dd03      	ble.n	8101408 <PID_controller+0x8c>
		u = p->u_max;
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	691b      	ldr	r3, [r3, #16]
 8101404:	61fb      	str	r3, [r7, #28]
 8101406:	e010      	b.n	810142a <PID_controller+0xae>
	}else if(u<p->u_min){
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	edd3 7a05 	vldr	s15, [r3, #20]
 810140e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810141a:	d503      	bpl.n	8101424 <PID_controller+0xa8>
		u = p->u_min;
 810141c:	68fb      	ldr	r3, [r7, #12]
 810141e:	695b      	ldr	r3, [r3, #20]
 8101420:	61fb      	str	r3, [r7, #28]
 8101422:	e002      	b.n	810142a <PID_controller+0xae>
	}else
	{
		p->Iterm = newIterm;
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	693a      	ldr	r2, [r7, #16]
 8101428:	61da      	str	r2, [r3, #28]
	}

	return u;
 810142a:	69fb      	ldr	r3, [r7, #28]
 810142c:	ee07 3a90 	vmov	s15, r3

}
 8101430:	eeb0 0a67 	vmov.f32	s0, s15
 8101434:	3724      	adds	r7, #36	@ 0x24
 8101436:	46bd      	mov	sp, r7
 8101438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810143c:	4770      	bx	lr

0810143e <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810143e:	b580      	push	{r7, lr}
 8101440:	b082      	sub	sp, #8
 8101442:	af00      	add	r7, sp, #0
 8101444:	4603      	mov	r3, r0
 8101446:	71fb      	strb	r3, [r7, #7]
 8101448:	79fb      	ldrb	r3, [r7, #7]
 810144a:	4619      	mov	r1, r3
 810144c:	2007      	movs	r0, #7
 810144e:	f000 fa31 	bl	81018b4 <bno055_writeData>
 8101452:	bf00      	nop
 8101454:	3708      	adds	r7, #8
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}

0810145a <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810145a:	b580      	push	{r7, lr}
 810145c:	b082      	sub	sp, #8
 810145e:	af00      	add	r7, sp, #0
 8101460:	4603      	mov	r3, r0
 8101462:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101464:	79fb      	ldrb	r3, [r7, #7]
 8101466:	4619      	mov	r1, r3
 8101468:	203d      	movs	r0, #61	@ 0x3d
 810146a:	f000 fa23 	bl	81018b4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810146e:	79fb      	ldrb	r3, [r7, #7]
 8101470:	2b00      	cmp	r3, #0
 8101472:	d103      	bne.n	810147c <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101474:	2064      	movs	r0, #100	@ 0x64
 8101476:	f000 fa11 	bl	810189c <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810147a:	e002      	b.n	8101482 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810147c:	2050      	movs	r0, #80	@ 0x50
 810147e:	f000 fa0d 	bl	810189c <bno055_delay>
}
 8101482:	bf00      	nop
 8101484:	3708      	adds	r7, #8
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}

0810148a <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810148a:	b580      	push	{r7, lr}
 810148c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810148e:	2000      	movs	r0, #0
 8101490:	f7ff ffe3 	bl	810145a <bno055_setOperationMode>
}
 8101494:	bf00      	nop
 8101496:	bd80      	pop	{r7, pc}

08101498 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101498:	b580      	push	{r7, lr}
 810149a:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810149c:	200c      	movs	r0, #12
 810149e:	f7ff ffdc 	bl	810145a <bno055_setOperationMode>
}
 81014a2:	bf00      	nop
 81014a4:	bd80      	pop	{r7, pc}

081014a6 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81014a6:	b580      	push	{r7, lr}
 81014a8:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81014aa:	2120      	movs	r1, #32
 81014ac:	203f      	movs	r0, #63	@ 0x3f
 81014ae:	f000 fa01 	bl	81018b4 <bno055_writeData>
  bno055_delay(700);
 81014b2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 81014b6:	f000 f9f1 	bl	810189c <bno055_delay>
}
 81014ba:	bf00      	nop
 81014bc:	bd80      	pop	{r7, pc}

081014be <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81014be:	b580      	push	{r7, lr}
 81014c0:	b082      	sub	sp, #8
 81014c2:	af00      	add	r7, sp, #0
  bno055_reset();
 81014c4:	f7ff ffef 	bl	81014a6 <bno055_reset>

  uint8_t id = 0;
 81014c8:	2300      	movs	r3, #0
 81014ca:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81014cc:	1dfb      	adds	r3, r7, #7
 81014ce:	2201      	movs	r2, #1
 81014d0:	4619      	mov	r1, r3
 81014d2:	2000      	movs	r0, #0
 81014d4:	f000 fa22 	bl	810191c <bno055_readData>
  if (id != BNO055_ID) {
    //printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
  }
  bno055_setPage(0);
 81014d8:	2000      	movs	r0, #0
 81014da:	f7ff ffb0 	bl	810143e <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81014de:	2100      	movs	r1, #0
 81014e0:	203f      	movs	r0, #63	@ 0x3f
 81014e2:	f000 f9e7 	bl	81018b4 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81014e6:	f7ff ffd0 	bl	810148a <bno055_setOperationModeConfig>
  bno055_delay(10);
 81014ea:	200a      	movs	r0, #10
 81014ec:	f000 f9d6 	bl	810189c <bno055_delay>
}
 81014f0:	bf00      	nop
 81014f2:	3708      	adds	r7, #8
 81014f4:	46bd      	mov	sp, r7
 81014f6:	bd80      	pop	{r7, pc}

081014f8 <bno055_getCalibrationState>:
  bno055_readData(BNO055_SYS_ERR, &tmp, 1);
  return tmp;
}

// Ottiene lo stato di calibrazione del sensore BNO055
bno055_calibration_state_t bno055_getCalibrationState() {
 81014f8:	b580      	push	{r7, lr}
 81014fa:	b084      	sub	sp, #16
 81014fc:	af00      	add	r7, sp, #0
  bno055_setPage(0);
 81014fe:	2000      	movs	r0, #0
 8101500:	f7ff ff9d 	bl	810143e <bno055_setPage>
  bno055_calibration_state_t cal = {.sys = 0, .gyro = 0, .mag = 0, .accel = 0};
 8101504:	2300      	movs	r3, #0
 8101506:	60bb      	str	r3, [r7, #8]
  uint8_t calState = 0;
 8101508:	2300      	movs	r3, #0
 810150a:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CALIB_STAT, &calState, 1);
 810150c:	1dfb      	adds	r3, r7, #7
 810150e:	2201      	movs	r2, #1
 8101510:	4619      	mov	r1, r3
 8101512:	2035      	movs	r0, #53	@ 0x35
 8101514:	f000 fa02 	bl	810191c <bno055_readData>
  cal.sys = (calState >> 6) & 0x03;
 8101518:	79fb      	ldrb	r3, [r7, #7]
 810151a:	099b      	lsrs	r3, r3, #6
 810151c:	b2db      	uxtb	r3, r3
 810151e:	723b      	strb	r3, [r7, #8]
  cal.gyro = (calState >> 4) & 0x03;
 8101520:	79fb      	ldrb	r3, [r7, #7]
 8101522:	091b      	lsrs	r3, r3, #4
 8101524:	b2db      	uxtb	r3, r3
 8101526:	f003 0303 	and.w	r3, r3, #3
 810152a:	b2db      	uxtb	r3, r3
 810152c:	727b      	strb	r3, [r7, #9]
  cal.accel = (calState >> 2) & 0x03;
 810152e:	79fb      	ldrb	r3, [r7, #7]
 8101530:	089b      	lsrs	r3, r3, #2
 8101532:	b2db      	uxtb	r3, r3
 8101534:	f003 0303 	and.w	r3, r3, #3
 8101538:	b2db      	uxtb	r3, r3
 810153a:	72fb      	strb	r3, [r7, #11]
  cal.mag = calState & 0x03;
 810153c:	79fb      	ldrb	r3, [r7, #7]
 810153e:	f003 0303 	and.w	r3, r3, #3
 8101542:	b2db      	uxtb	r3, r3
 8101544:	72bb      	strb	r3, [r7, #10]
  return cal;
 8101546:	68bb      	ldr	r3, [r7, #8]
 8101548:	60fb      	str	r3, [r7, #12]
 810154a:	2300      	movs	r3, #0
 810154c:	7b3a      	ldrb	r2, [r7, #12]
 810154e:	f362 0307 	bfi	r3, r2, #0, #8
 8101552:	7b7a      	ldrb	r2, [r7, #13]
 8101554:	f362 230f 	bfi	r3, r2, #8, #8
 8101558:	7bba      	ldrb	r2, [r7, #14]
 810155a:	f362 4317 	bfi	r3, r2, #16, #8
 810155e:	7bfa      	ldrb	r2, [r7, #15]
 8101560:	f362 631f 	bfi	r3, r2, #24, #8
}
 8101564:	4618      	mov	r0, r3
 8101566:	3710      	adds	r7, #16
 8101568:	46bd      	mov	sp, r7
 810156a:	bd80      	pop	{r7, pc}

0810156c <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 810156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101570:	b09e      	sub	sp, #120	@ 0x78
 8101572:	af00      	add	r7, sp, #0
 8101574:	4603      	mov	r3, r0
 8101576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 810157a:	2000      	movs	r0, #0
 810157c:	f7ff ff5f 	bl	810143e <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101584:	2b20      	cmp	r3, #32
 8101586:	d108      	bne.n	810159a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101588:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810158c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101590:	2208      	movs	r2, #8
 8101592:	4618      	mov	r0, r3
 8101594:	f000 f9c2 	bl	810191c <bno055_readData>
 8101598:	e007      	b.n	81015aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810159a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810159e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015a2:	2206      	movs	r2, #6
 81015a4:	4618      	mov	r0, r3
 81015a6:	f000 f9b9 	bl	810191c <bno055_readData>

  double scale = 1;
 81015aa:	f04f 0200 	mov.w	r2, #0
 81015ae:	4b8b      	ldr	r3, [pc, #556]	@ (81017dc <bno055_getVector+0x270>)
 81015b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81015b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015b8:	2b0e      	cmp	r3, #14
 81015ba:	d109      	bne.n	81015d0 <bno055_getVector+0x64>
    scale = magScale;
 81015bc:	4b88      	ldr	r3, [pc, #544]	@ (81017e0 <bno055_getVector+0x274>)
 81015be:	881b      	ldrh	r3, [r3, #0]
 81015c0:	4618      	mov	r0, r3
 81015c2:	f7ff f827 	bl	8100614 <__aeabi_ui2d>
 81015c6:	4602      	mov	r2, r0
 81015c8:	460b      	mov	r3, r1
 81015ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015ce:	e03e      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 81015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015d4:	2b08      	cmp	r3, #8
 81015d6:	d007      	beq.n	81015e8 <bno055_getVector+0x7c>
 81015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015dc:	2b28      	cmp	r3, #40	@ 0x28
 81015de:	d003      	beq.n	81015e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81015e4:	2b2e      	cmp	r3, #46	@ 0x2e
 81015e6:	d109      	bne.n	81015fc <bno055_getVector+0x90>
    scale = accelScale;
 81015e8:	4b7e      	ldr	r3, [pc, #504]	@ (81017e4 <bno055_getVector+0x278>)
 81015ea:	881b      	ldrh	r3, [r3, #0]
 81015ec:	4618      	mov	r0, r3
 81015ee:	f7ff f811 	bl	8100614 <__aeabi_ui2d>
 81015f2:	4602      	mov	r2, r0
 81015f4:	460b      	mov	r3, r1
 81015f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81015fa:	e028      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81015fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101600:	2b14      	cmp	r3, #20
 8101602:	d109      	bne.n	8101618 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101604:	4b78      	ldr	r3, [pc, #480]	@ (81017e8 <bno055_getVector+0x27c>)
 8101606:	881b      	ldrh	r3, [r3, #0]
 8101608:	4618      	mov	r0, r3
 810160a:	f7ff f803 	bl	8100614 <__aeabi_ui2d>
 810160e:	4602      	mov	r2, r0
 8101610:	460b      	mov	r3, r1
 8101612:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101616:	e01a      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810161c:	2b1a      	cmp	r3, #26
 810161e:	d109      	bne.n	8101634 <bno055_getVector+0xc8>
    scale = eulerScale;
 8101620:	4b72      	ldr	r3, [pc, #456]	@ (81017ec <bno055_getVector+0x280>)
 8101622:	881b      	ldrh	r3, [r3, #0]
 8101624:	4618      	mov	r0, r3
 8101626:	f7fe fff5 	bl	8100614 <__aeabi_ui2d>
 810162a:	4602      	mov	r2, r0
 810162c:	460b      	mov	r3, r1
 810162e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101632:	e00c      	b.n	810164e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101638:	2b20      	cmp	r3, #32
 810163a:	d108      	bne.n	810164e <bno055_getVector+0xe2>
    scale = quaScale;
 810163c:	4b6c      	ldr	r3, [pc, #432]	@ (81017f0 <bno055_getVector+0x284>)
 810163e:	881b      	ldrh	r3, [r3, #0]
 8101640:	4618      	mov	r0, r3
 8101642:	f7fe ffe7 	bl	8100614 <__aeabi_ui2d>
 8101646:	4602      	mov	r2, r0
 8101648:	460b      	mov	r3, r1
 810164a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101652:	2220      	movs	r2, #32
 8101654:	2100      	movs	r1, #0
 8101656:	4618      	mov	r0, r3
 8101658:	f00e ff9e 	bl	8110598 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810165c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101660:	2b20      	cmp	r3, #32
 8101662:	d150      	bne.n	8101706 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101664:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101668:	021b      	lsls	r3, r3, #8
 810166a:	b21a      	sxth	r2, r3
 810166c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101670:	b21b      	sxth	r3, r3
 8101672:	4313      	orrs	r3, r2
 8101674:	b21b      	sxth	r3, r3
 8101676:	4618      	mov	r0, r3
 8101678:	f7fe ffdc 	bl	8100634 <__aeabi_i2d>
 810167c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101680:	f7ff f96c 	bl	810095c <__aeabi_ddiv>
 8101684:	4602      	mov	r2, r0
 8101686:	460b      	mov	r3, r1
 8101688:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810168c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101690:	021b      	lsls	r3, r3, #8
 8101692:	b21a      	sxth	r2, r3
 8101694:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101698:	b21b      	sxth	r3, r3
 810169a:	4313      	orrs	r3, r2
 810169c:	b21b      	sxth	r3, r3
 810169e:	4618      	mov	r0, r3
 81016a0:	f7fe ffc8 	bl	8100634 <__aeabi_i2d>
 81016a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016a8:	f7ff f958 	bl	810095c <__aeabi_ddiv>
 81016ac:	4602      	mov	r2, r0
 81016ae:	460b      	mov	r3, r1
 81016b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81016b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 81016b8:	021b      	lsls	r3, r3, #8
 81016ba:	b21a      	sxth	r2, r3
 81016bc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81016c0:	b21b      	sxth	r3, r3
 81016c2:	4313      	orrs	r3, r2
 81016c4:	b21b      	sxth	r3, r3
 81016c6:	4618      	mov	r0, r3
 81016c8:	f7fe ffb4 	bl	8100634 <__aeabi_i2d>
 81016cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016d0:	f7ff f944 	bl	810095c <__aeabi_ddiv>
 81016d4:	4602      	mov	r2, r0
 81016d6:	460b      	mov	r3, r1
 81016d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 81016dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 81016e0:	021b      	lsls	r3, r3, #8
 81016e2:	b21a      	sxth	r2, r3
 81016e4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 81016e8:	b21b      	sxth	r3, r3
 81016ea:	4313      	orrs	r3, r2
 81016ec:	b21b      	sxth	r3, r3
 81016ee:	4618      	mov	r0, r3
 81016f0:	f7fe ffa0 	bl	8100634 <__aeabi_i2d>
 81016f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81016f8:	f7ff f930 	bl	810095c <__aeabi_ddiv>
 81016fc:	4602      	mov	r2, r0
 81016fe:	460b      	mov	r3, r1
 8101700:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8101704:	e03b      	b.n	810177e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101706:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 810170a:	021b      	lsls	r3, r3, #8
 810170c:	b21a      	sxth	r2, r3
 810170e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101712:	b21b      	sxth	r3, r3
 8101714:	4313      	orrs	r3, r2
 8101716:	b21b      	sxth	r3, r3
 8101718:	4618      	mov	r0, r3
 810171a:	f7fe ff8b 	bl	8100634 <__aeabi_i2d>
 810171e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101722:	f7ff f91b 	bl	810095c <__aeabi_ddiv>
 8101726:	4602      	mov	r2, r0
 8101728:	460b      	mov	r3, r1
 810172a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810172e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101732:	021b      	lsls	r3, r3, #8
 8101734:	b21a      	sxth	r2, r3
 8101736:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 810173a:	b21b      	sxth	r3, r3
 810173c:	4313      	orrs	r3, r2
 810173e:	b21b      	sxth	r3, r3
 8101740:	4618      	mov	r0, r3
 8101742:	f7fe ff77 	bl	8100634 <__aeabi_i2d>
 8101746:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810174a:	f7ff f907 	bl	810095c <__aeabi_ddiv>
 810174e:	4602      	mov	r2, r0
 8101750:	460b      	mov	r3, r1
 8101752:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101756:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 810175a:	021b      	lsls	r3, r3, #8
 810175c:	b21a      	sxth	r2, r3
 810175e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101762:	b21b      	sxth	r3, r3
 8101764:	4313      	orrs	r3, r2
 8101766:	b21b      	sxth	r3, r3
 8101768:	4618      	mov	r0, r3
 810176a:	f7fe ff63 	bl	8100634 <__aeabi_i2d>
 810176e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101772:	f7ff f8f3 	bl	810095c <__aeabi_ddiv>
 8101776:	4602      	mov	r2, r0
 8101778:	460b      	mov	r3, r1
 810177a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 810177e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101782:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810178a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810178e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101792:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101796:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 810179a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 810179e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 81017a2:	ec49 8b14 	vmov	d4, r8, r9
 81017a6:	ec45 4b15 	vmov	d5, r4, r5
 81017aa:	ec41 0b16 	vmov	d6, r0, r1
 81017ae:	ec43 2b17 	vmov	d7, r2, r3
}
 81017b2:	eeb0 0a44 	vmov.f32	s0, s8
 81017b6:	eef0 0a64 	vmov.f32	s1, s9
 81017ba:	eeb0 1a45 	vmov.f32	s2, s10
 81017be:	eef0 1a65 	vmov.f32	s3, s11
 81017c2:	eeb0 2a46 	vmov.f32	s4, s12
 81017c6:	eef0 2a66 	vmov.f32	s5, s13
 81017ca:	eeb0 3a47 	vmov.f32	s6, s14
 81017ce:	eef0 3a67 	vmov.f32	s7, s15
 81017d2:	3778      	adds	r7, #120	@ 0x78
 81017d4:	46bd      	mov	sp, r7
 81017d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81017da:	bf00      	nop
 81017dc:	3ff00000 	.word	0x3ff00000
 81017e0:	1000000e 	.word	0x1000000e
 81017e4:	10000008 	.word	0x10000008
 81017e8:	1000000a 	.word	0x1000000a
 81017ec:	1000000c 	.word	0x1000000c
 81017f0:	10000010 	.word	0x10000010

081017f4 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 81017f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81017f8:	b090      	sub	sp, #64	@ 0x40
 81017fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81017fc:	201a      	movs	r0, #26
 81017fe:	f7ff feb5 	bl	810156c <bno055_getVector>
 8101802:	eeb0 4a40 	vmov.f32	s8, s0
 8101806:	eef0 4a60 	vmov.f32	s9, s1
 810180a:	eeb0 5a41 	vmov.f32	s10, s2
 810180e:	eef0 5a61 	vmov.f32	s11, s3
 8101812:	eeb0 6a42 	vmov.f32	s12, s4
 8101816:	eef0 6a62 	vmov.f32	s13, s5
 810181a:	eeb0 7a43 	vmov.f32	s14, s6
 810181e:	eef0 7a63 	vmov.f32	s15, s7
 8101822:	ed87 4b08 	vstr	d4, [r7, #32]
 8101826:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 810182a:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 810182e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8101832:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101836:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 810183a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 810183e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101842:	ec49 8b14 	vmov	d4, r8, r9
 8101846:	ec45 4b15 	vmov	d5, r4, r5
 810184a:	ec41 0b16 	vmov	d6, r0, r1
 810184e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101852:	eeb0 0a44 	vmov.f32	s0, s8
 8101856:	eef0 0a64 	vmov.f32	s1, s9
 810185a:	eeb0 1a45 	vmov.f32	s2, s10
 810185e:	eef0 1a65 	vmov.f32	s3, s11
 8101862:	eeb0 2a46 	vmov.f32	s4, s12
 8101866:	eef0 2a66 	vmov.f32	s5, s13
 810186a:	eeb0 3a47 	vmov.f32	s6, s14
 810186e:	eef0 3a67 	vmov.f32	s7, s15
 8101872:	3740      	adds	r7, #64	@ 0x40
 8101874:	46bd      	mov	sp, r7
 8101876:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810187c <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810187c:	b480      	push	{r7}
 810187e:	b083      	sub	sp, #12
 8101880:	af00      	add	r7, sp, #0
 8101882:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101884:	4a04      	ldr	r2, [pc, #16]	@ (8101898 <bno055_assignI2C+0x1c>)
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	6013      	str	r3, [r2, #0]
}
 810188a:	bf00      	nop
 810188c:	370c      	adds	r7, #12
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr
 8101896:	bf00      	nop
 8101898:	1000028c 	.word	0x1000028c

0810189c <bno055_delay>:

void bno055_delay(int time) {
 810189c:	b580      	push	{r7, lr}
 810189e:	b082      	sub	sp, #8
 81018a0:	af00      	add	r7, sp, #0
 81018a2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	4618      	mov	r0, r3
 81018a8:	f002 ff40 	bl	810472c <HAL_Delay>
#endif
}
 81018ac:	bf00      	nop
 81018ae:	3708      	adds	r7, #8
 81018b0:	46bd      	mov	sp, r7
 81018b2:	bd80      	pop	{r7, pc}

081018b4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81018b4:	b580      	push	{r7, lr}
 81018b6:	b088      	sub	sp, #32
 81018b8:	af02      	add	r7, sp, #8
 81018ba:	4603      	mov	r3, r0
 81018bc:	460a      	mov	r2, r1
 81018be:	71fb      	strb	r3, [r7, #7]
 81018c0:	4613      	mov	r3, r2
 81018c2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81018c4:	79fb      	ldrb	r3, [r7, #7]
 81018c6:	733b      	strb	r3, [r7, #12]
 81018c8:	79bb      	ldrb	r3, [r7, #6]
 81018ca:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81018cc:	4b12      	ldr	r3, [pc, #72]	@ (8101918 <bno055_writeData+0x64>)
 81018ce:	6818      	ldr	r0, [r3, #0]
 81018d0:	f107 020c 	add.w	r2, r7, #12
 81018d4:	230a      	movs	r3, #10
 81018d6:	9300      	str	r3, [sp, #0]
 81018d8:	2302      	movs	r3, #2
 81018da:	2150      	movs	r1, #80	@ 0x50
 81018dc:	f005 fd58 	bl	8107390 <HAL_I2C_Master_Transmit>
 81018e0:	4603      	mov	r3, r0
 81018e2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 81018e4:	7dfb      	ldrb	r3, [r7, #23]
 81018e6:	2b00      	cmp	r3, #0
 81018e8:	d010      	beq.n	810190c <bno055_writeData+0x58>
    //printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
  } else {
    //printf("Unknown status data %d", status);
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 81018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8101918 <bno055_writeData+0x64>)
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4618      	mov	r0, r3
 81018f0:	f005 ff6a 	bl	81077c8 <HAL_I2C_GetError>
 81018f4:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 81018f6:	693b      	ldr	r3, [r7, #16]
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d009      	beq.n	8101910 <bno055_writeData+0x5c>
    //printf("HAL_I2C_ERROR_DMA\r\n");
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
    //printf("HAL_I2C_ERROR_TIMEOUT\r\n");
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 81018fc:	4b06      	ldr	r3, [pc, #24]	@ (8101918 <bno055_writeData+0x64>)
 81018fe:	681b      	ldr	r3, [r3, #0]
 8101900:	4618      	mov	r0, r3
 8101902:	f005 ff53 	bl	81077ac <HAL_I2C_GetState>
 8101906:	4603      	mov	r3, r0
 8101908:	73fb      	strb	r3, [r7, #15]
 810190a:	e002      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 810190c:	bf00      	nop
 810190e:	e000      	b.n	8101912 <bno055_writeData+0x5e>
    return;
 8101910:	bf00      	nop



  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101912:	3718      	adds	r7, #24
 8101914:	46bd      	mov	sp, r7
 8101916:	bd80      	pop	{r7, pc}
 8101918:	1000028c 	.word	0x1000028c

0810191c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810191c:	b580      	push	{r7, lr}
 810191e:	b086      	sub	sp, #24
 8101920:	af02      	add	r7, sp, #8
 8101922:	4603      	mov	r3, r0
 8101924:	6039      	str	r1, [r7, #0]
 8101926:	71fb      	strb	r3, [r7, #7]
 8101928:	4613      	mov	r3, r2
 810192a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810192c:	4b0d      	ldr	r3, [pc, #52]	@ (8101964 <bno055_readData+0x48>)
 810192e:	6818      	ldr	r0, [r3, #0]
 8101930:	1dfa      	adds	r2, r7, #7
 8101932:	2364      	movs	r3, #100	@ 0x64
 8101934:	9300      	str	r3, [sp, #0]
 8101936:	2301      	movs	r3, #1
 8101938:	2150      	movs	r1, #80	@ 0x50
 810193a:	f005 fd29 	bl	8107390 <HAL_I2C_Master_Transmit>
 810193e:	4603      	mov	r3, r0
 8101940:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101942:	4b08      	ldr	r3, [pc, #32]	@ (8101964 <bno055_readData+0x48>)
 8101944:	6818      	ldr	r0, [r3, #0]
 8101946:	79bb      	ldrb	r3, [r7, #6]
 8101948:	b29b      	uxth	r3, r3
 810194a:	2264      	movs	r2, #100	@ 0x64
 810194c:	9200      	str	r2, [sp, #0]
 810194e:	683a      	ldr	r2, [r7, #0]
 8101950:	2150      	movs	r1, #80	@ 0x50
 8101952:	f005 fe35 	bl	81075c0 <HAL_I2C_Master_Receive>
 8101956:	4603      	mov	r3, r0
 8101958:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 810195a:	7bfb      	ldrb	r3, [r7, #15]
 810195c:	2b00      	cmp	r3, #0
	  } else {
	    //printf("Unknown status data %d", ret);
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 810195e:	3710      	adds	r7, #16
 8101960:	46bd      	mov	sp, r7
 8101962:	bd80      	pop	{r7, pc}
 8101964:	1000028c 	.word	0x1000028c

08101968 <bno055_setPowerMode>:
    bno055_writeData(BNO055_MAG_CONFIG, magConfigReg);
    bno055_setPage(0); //tornare in page 0
}

// Funzione per impostare la modalità energetica
void bno055_setPowerMode(PowerMode mode) {
 8101968:	b580      	push	{r7, lr}
 810196a:	b084      	sub	sp, #16
 810196c:	af00      	add	r7, sp, #0
 810196e:	4603      	mov	r3, r0
 8101970:	71fb      	strb	r3, [r7, #7]
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 8101972:	f107 030f 	add.w	r3, r7, #15
 8101976:	2201      	movs	r2, #1
 8101978:	4619      	mov	r1, r3
 810197a:	203e      	movs	r0, #62	@ 0x3e
 810197c:	f7ff ffce 	bl	810191c <bno055_readData>

    // Modifica solo i bit relativi alla modalità energetica
    currentMode &= 0xFC; // Azzera i primi due bit
 8101980:	7bfb      	ldrb	r3, [r7, #15]
 8101982:	f023 0303 	bic.w	r3, r3, #3
 8101986:	b2db      	uxtb	r3, r3
 8101988:	73fb      	strb	r3, [r7, #15]
    currentMode |= mode; // Imposta la nuova modalità energetica
 810198a:	7bfa      	ldrb	r2, [r7, #15]
 810198c:	79fb      	ldrb	r3, [r7, #7]
 810198e:	4313      	orrs	r3, r2
 8101990:	b2db      	uxtb	r3, r3
 8101992:	73fb      	strb	r3, [r7, #15]

    // Scrivi il nuovo valore in PWR_MODE
    bno055_writeData(BNO055_PWR_MODE, currentMode);
 8101994:	7bfb      	ldrb	r3, [r7, #15]
 8101996:	4619      	mov	r1, r3
 8101998:	203e      	movs	r0, #62	@ 0x3e
 810199a:	f7ff ff8b 	bl	81018b4 <bno055_writeData>
}
 810199e:	bf00      	nop
 81019a0:	3710      	adds	r7, #16
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <bno055_getPowerMode>:

// Funzione per ottenere la modalità energetica attuale
PowerMode bno055_getPowerMode() {
 81019a6:	b580      	push	{r7, lr}
 81019a8:	b082      	sub	sp, #8
 81019aa:	af00      	add	r7, sp, #0
    // Leggi il valore corrente di PWR_MODE
    uint8_t currentMode;
    bno055_readData(BNO055_PWR_MODE, &currentMode, 1);
 81019ac:	1dfb      	adds	r3, r7, #7
 81019ae:	2201      	movs	r2, #1
 81019b0:	4619      	mov	r1, r3
 81019b2:	203e      	movs	r0, #62	@ 0x3e
 81019b4:	f7ff ffb2 	bl	810191c <bno055_readData>

    // Estrai la modalità energetica dai primi due bit
    currentMode &= 0x03;
 81019b8:	79fb      	ldrb	r3, [r7, #7]
 81019ba:	f003 0303 	and.w	r3, r3, #3
 81019be:	b2db      	uxtb	r3, r3
 81019c0:	71fb      	strb	r3, [r7, #7]

    // Restituisci la modalità energetica come enumerazione PowerMode
    return (PowerMode)currentMode;
 81019c2:	79fb      	ldrb	r3, [r7, #7]
}
 81019c4:	4618      	mov	r0, r3
 81019c6:	3708      	adds	r7, #8
 81019c8:	46bd      	mov	sp, r7
 81019ca:	bd80      	pop	{r7, pc}

081019cc <kalman_filter_init>:
//dimensioni del sistema


void kalman_filter_init(KalmanFilter* kf, float32_t* A_data,float32_t* B_data,
		float32_t* H_data, float32_t* Q_data,float32_t* R_data,float32_t* P_data,
		float32_t* K_data, float32_t* x_data) {
 81019cc:	b580      	push	{r7, lr}
 81019ce:	b084      	sub	sp, #16
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	60f8      	str	r0, [r7, #12]
 81019d4:	60b9      	str	r1, [r7, #8]
 81019d6:	607a      	str	r2, [r7, #4]
 81019d8:	603b      	str	r3, [r7, #0]


    arm_mat_init_f32(&kf->A, state_dim, state_dim, (float32_t *)A_data);
 81019da:	68f8      	ldr	r0, [r7, #12]
 81019dc:	68bb      	ldr	r3, [r7, #8]
 81019de:	2202      	movs	r2, #2
 81019e0:	2102      	movs	r1, #2
 81019e2:	f00d fcf5 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, state_dim, control_dim, (float32_t *)B_data);
 81019e6:	68fb      	ldr	r3, [r7, #12]
 81019e8:	f103 0008 	add.w	r0, r3, #8
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	2201      	movs	r2, #1
 81019f0:	2102      	movs	r1, #2
 81019f2:	f00d fced 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, measure_dim, state_dim, (float32_t *)H_data);
 81019f6:	68fb      	ldr	r3, [r7, #12]
 81019f8:	f103 0010 	add.w	r0, r3, #16
 81019fc:	683b      	ldr	r3, [r7, #0]
 81019fe:	2202      	movs	r2, #2
 8101a00:	2102      	movs	r1, #2
 8101a02:	f00d fce5 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, state_dim, state_dim, (float32_t *)Q_data);
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	f103 0018 	add.w	r0, r3, #24
 8101a0c:	69bb      	ldr	r3, [r7, #24]
 8101a0e:	2202      	movs	r2, #2
 8101a10:	2102      	movs	r1, #2
 8101a12:	f00d fcdd 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, measure_dim, measure_dim, (float32_t *)R_data);
 8101a16:	68fb      	ldr	r3, [r7, #12]
 8101a18:	f103 0020 	add.w	r0, r3, #32
 8101a1c:	69fb      	ldr	r3, [r7, #28]
 8101a1e:	2202      	movs	r2, #2
 8101a20:	2102      	movs	r1, #2
 8101a22:	f00d fcd5 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, state_dim, state_dim, (float32_t *)P_data);
 8101a26:	68fb      	ldr	r3, [r7, #12]
 8101a28:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8101a2c:	6a3b      	ldr	r3, [r7, #32]
 8101a2e:	2202      	movs	r2, #2
 8101a30:	2102      	movs	r1, #2
 8101a32:	f00d fccd 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->x, state_dim, 1, (float32_t *)x_data);
 8101a36:	68fb      	ldr	r3, [r7, #12]
 8101a38:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101a3e:	2201      	movs	r2, #1
 8101a40:	2102      	movs	r1, #2
 8101a42:	f00d fcc5 	bl	810f3d0 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->K, state_dim, measure_dim, (float32_t *)&x_data);
 8101a46:	68fb      	ldr	r3, [r7, #12]
 8101a48:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8101a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a50:	2202      	movs	r2, #2
 8101a52:	2102      	movs	r1, #2
 8101a54:	f00d fcbc 	bl	810f3d0 <arm_mat_init_f32>

}
 8101a58:	bf00      	nop
 8101a5a:	3710      	adds	r7, #16
 8101a5c:	46bd      	mov	sp, r7
 8101a5e:	bd80      	pop	{r7, pc}

08101a60 <kalman_predict>:
    }
}



void kalman_predict(KalmanFilter* kf, const arm_matrix_instance_f32* u) {
 8101a60:	b580      	push	{r7, lr}
 8101a62:	b09c      	sub	sp, #112	@ 0x70
 8101a64:	af00      	add	r7, sp, #0
 8101a66:	6078      	str	r0, [r7, #4]
 8101a68:	6039      	str	r1, [r7, #0]
	float32_t temp1_data[state_dim];
	float32_t temp2_data[state_dim];
	float32_t temp3_data[state_dim*state_dim];
	float32_t temp4_data[state_dim*state_dim];
	float32_t temp5_data[state_dim*state_dim];
    arm_mat_init_f32(&temp1, state_dim, 1, (float32_t *)&temp1_data);
 8101a6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101a6e:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8101a72:	2201      	movs	r2, #1
 8101a74:	2102      	movs	r1, #2
 8101a76:	f00d fcab 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, 1, (float32_t *)&temp2_data);
 8101a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101a7e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8101a82:	2201      	movs	r2, #1
 8101a84:	2102      	movs	r1, #2
 8101a86:	f00d fca3 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, state_dim, state_dim, (float32_t *)&temp3_data);
 8101a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a8e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8101a92:	2202      	movs	r2, #2
 8101a94:	2102      	movs	r1, #2
 8101a96:	f00d fc9b 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, state_dim, state_dim, (float32_t *)&temp4_data);
 8101a9a:	f107 0318 	add.w	r3, r7, #24
 8101a9e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8101aa2:	2202      	movs	r2, #2
 8101aa4:	2102      	movs	r1, #2
 8101aa6:	f00d fc93 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, state_dim, state_dim, (float32_t *)&temp5_data);
 8101aaa:	f107 0308 	add.w	r3, r7, #8
 8101aae:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8101ab2:	2202      	movs	r2, #2
 8101ab4:	2102      	movs	r1, #2
 8101ab6:	f00d fc8b 	bl	810f3d0 <arm_mat_init_f32>

    // x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &temp1);
 8101aba:	6878      	ldr	r0, [r7, #4]
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	3338      	adds	r3, #56	@ 0x38
 8101ac0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8101ac4:	4619      	mov	r1, r3
 8101ac6:	f00d fadd 	bl	810f084 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, u, &temp2);
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	3308      	adds	r3, #8
 8101ace:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8101ad2:	6839      	ldr	r1, [r7, #0]
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f00d fad5 	bl	810f084 <arm_mat_mult_f32>
	arm_mat_add_f32(&temp1, &temp2,  &kf->x);
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101ae0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8101ae4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8101ae8:	4618      	mov	r0, r3
 8101aea:	f00d fc75 	bl	810f3d8 <arm_mat_add_f32>


    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &temp4);
 8101aee:	6878      	ldr	r0, [r7, #4]
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	3328      	adds	r3, #40	@ 0x28
 8101af4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101af8:	4619      	mov	r1, r3
 8101afa:	f00d fac3 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &temp5);
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8101b04:	4611      	mov	r1, r2
 8101b06:	4618      	mov	r0, r3
 8101b08:	f00d f9f6 	bl	810eef8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp4, &temp5, &temp3);
 8101b0c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8101b10:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101b14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101b18:	4618      	mov	r0, r3
 8101b1a:	f00d fab3 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->Q, &kf->P);
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	f103 0118 	add.w	r1, r3, #24
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101b2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101b2e:	4618      	mov	r0, r3
 8101b30:	f00d fc52 	bl	810f3d8 <arm_mat_add_f32>


}
 8101b34:	bf00      	nop
 8101b36:	3770      	adds	r7, #112	@ 0x70
 8101b38:	46bd      	mov	sp, r7
 8101b3a:	bd80      	pop	{r7, pc}

08101b3c <kalman_update>:


void kalman_update(KalmanFilter* kf, const arm_matrix_instance_f32* z)
{
 8101b3c:	b580      	push	{r7, lr}
 8101b3e:	b0dc      	sub	sp, #368	@ 0x170
 8101b40:	af00      	add	r7, sp, #0
 8101b42:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b46:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101b4a:	6018      	str	r0, [r3, #0]
 8101b4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101b50:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101b54:	6019      	str	r1, [r3, #0]
    float32_t temp12_data[measure_dim * state_dim];
    float32_t temp13_data[state_dim * measure_dim];
    float32_t temp14_data[measure_dim];
    float32_t temp15_data[measure_dim];
    float32_t temp16_data[state_dim];
    arm_mat_init_f32(&temp1, state_dim, measure_dim, temp1_data);
 8101b56:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8101b5a:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8101b5e:	2202      	movs	r2, #2
 8101b60:	2102      	movs	r1, #2
 8101b62:	f00d fc35 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp2, state_dim, measure_dim, temp2_data);
 8101b66:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8101b6a:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8101b6e:	2202      	movs	r2, #2
 8101b70:	2102      	movs	r1, #2
 8101b72:	f00d fc2d 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp3, measure_dim, measure_dim, temp3_data);
 8101b76:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101b7a:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8101b7e:	2202      	movs	r2, #2
 8101b80:	2102      	movs	r1, #2
 8101b82:	f00d fc25 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp4, measure_dim, measure_dim, temp4_data);
 8101b86:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8101b8a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8101b8e:	2202      	movs	r2, #2
 8101b90:	2102      	movs	r1, #2
 8101b92:	f00d fc1d 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp5, measure_dim, measure_dim, temp5_data);
 8101b96:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8101b9a:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8101b9e:	2202      	movs	r2, #2
 8101ba0:	2102      	movs	r1, #2
 8101ba2:	f00d fc15 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp6, state_dim, state_dim, temp6_data);
 8101ba6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8101baa:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8101bae:	2202      	movs	r2, #2
 8101bb0:	2102      	movs	r1, #2
 8101bb2:	f00d fc0d 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp7, state_dim, state_dim, temp7_data);
 8101bb6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8101bba:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8101bbe:	2202      	movs	r2, #2
 8101bc0:	2102      	movs	r1, #2
 8101bc2:	f00d fc05 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp8, state_dim, state_dim, temp8_data);
 8101bc6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8101bca:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8101bce:	2202      	movs	r2, #2
 8101bd0:	2102      	movs	r1, #2
 8101bd2:	f00d fbfd 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp9, state_dim, measure_dim, temp9_data);
 8101bd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8101bda:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8101bde:	2202      	movs	r2, #2
 8101be0:	2102      	movs	r1, #2
 8101be2:	f00d fbf5 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp10, state_dim, measure_dim, temp10_data);
 8101be6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101bea:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8101bee:	2202      	movs	r2, #2
 8101bf0:	2102      	movs	r1, #2
 8101bf2:	f00d fbed 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp11, measure_dim,state_dim, temp11_data);
 8101bf6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8101bfa:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8101bfe:	2202      	movs	r2, #2
 8101c00:	2102      	movs	r1, #2
 8101c02:	f00d fbe5 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp12, measure_dim, state_dim, temp12_data);
 8101c06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101c0a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8101c0e:	2202      	movs	r2, #2
 8101c10:	2102      	movs	r1, #2
 8101c12:	f00d fbdd 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp13, state_dim, measure_dim, temp13_data);
 8101c16:	f107 0320 	add.w	r3, r7, #32
 8101c1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8101c1e:	2202      	movs	r2, #2
 8101c20:	2102      	movs	r1, #2
 8101c22:	f00d fbd5 	bl	810f3d0 <arm_mat_init_f32>
    arm_mat_init_f32(&temp14, measure_dim, 1, temp14_data);
 8101c26:	f107 0318 	add.w	r3, r7, #24
 8101c2a:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8101c2e:	2201      	movs	r2, #1
 8101c30:	2102      	movs	r1, #2
 8101c32:	f00d fbcd 	bl	810f3d0 <arm_mat_init_f32>
	arm_mat_init_f32(&temp15, measure_dim, 1, temp15_data);
 8101c36:	f107 0310 	add.w	r3, r7, #16
 8101c3a:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8101c3e:	2201      	movs	r2, #1
 8101c40:	2102      	movs	r1, #2
 8101c42:	f00d fbc5 	bl	810f3d0 <arm_mat_init_f32>
	arm_mat_init_f32(&temp16, state_dim, 1, temp16_data);
 8101c46:	f107 0308 	add.w	r3, r7, #8
 8101c4a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8101c4e:	2201      	movs	r2, #1
 8101c50:	2102      	movs	r1, #2
 8101c52:	f00d fbbd 	bl	810f3d0 <arm_mat_init_f32>

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &temp1);
 8101c56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	3310      	adds	r3, #16
 8101c62:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8101c66:	4611      	mov	r1, r2
 8101c68:	4618      	mov	r0, r3
 8101c6a:	f00d f945 	bl	810eef8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp1, &temp2);
 8101c6e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	3328      	adds	r3, #40	@ 0x28
 8101c7a:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8101c7e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8101c82:	4618      	mov	r0, r3
 8101c84:	f00d f9fe 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &temp2, &temp3);
 8101c88:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101c8c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	3310      	adds	r3, #16
 8101c94:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101c98:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8101c9c:	4618      	mov	r0, r3
 8101c9e:	f00d f9f1 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101ca2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101ca6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	f103 0120 	add.w	r1, r3, #32
 8101cb0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101cb4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101cb8:	4618      	mov	r0, r3
 8101cba:	f00d fb8d 	bl	810f3d8 <arm_mat_add_f32>
    arm_mat_inverse_f32(&temp4, &temp5);
 8101cbe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8101cc2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8101cc6:	4611      	mov	r1, r2
 8101cc8:	4618      	mov	r0, r3
 8101cca:	f00d fa7b 	bl	810f1c4 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&temp2, &temp5, &kf->K);
 8101cce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8101cdc:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8101ce0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8101ce4:	4618      	mov	r0, r3
 8101ce6:	f00d f9cd 	bl	810f084 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &temp14);
 8101cea:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	f103 0010 	add.w	r0, r3, #16
 8101cf8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101cfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d00:	681b      	ldr	r3, [r3, #0]
 8101d02:	3338      	adds	r3, #56	@ 0x38
 8101d04:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8101d08:	4619      	mov	r1, r3
 8101d0a:	f00d f9bb 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_sub_f32(z, &temp14, &temp15);
 8101d0e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8101d12:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8101d16:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d1a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8101d1e:	6818      	ldr	r0, [r3, #0]
 8101d20:	f00d f946 	bl	810efb0 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->K, &temp15, &temp16);
 8101d24:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	3330      	adds	r3, #48	@ 0x30
 8101d30:	f107 02f0 	add.w	r2, r7, #240	@ 0xf0
 8101d34:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8101d38:	4618      	mov	r0, r3
 8101d3a:	f00d f9a3 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->x, &temp16, &kf->x);
 8101d3e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d42:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8101d4c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101d5a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8101d5e:	4619      	mov	r1, r3
 8101d60:	f00d fb3a 	bl	810f3d8 <arm_mat_add_f32>

    // Aggiornamento di P
    // P = P - P*H'*K' - K*H*P + K*(H*P*H' + R)*K'

    // Prima parte: P * H'
    arm_mat_trans_f32(&kf->H, &temp9);
 8101d64:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	3310      	adds	r3, #16
 8101d70:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8101d74:	4611      	mov	r1, r2
 8101d76:	4618      	mov	r0, r3
 8101d78:	f00d f8be 	bl	810eef8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &temp9, &temp10);
 8101d7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	3328      	adds	r3, #40	@ 0x28
 8101d88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8101d8c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101d90:	4618      	mov	r0, r3
 8101d92:	f00d f977 	bl	810f084 <arm_mat_mult_f32>
    // Seconda parte: P * H' * K'
    arm_mat_trans_f32(&kf->K, &temp11);
 8101d96:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101d9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101d9e:	681b      	ldr	r3, [r3, #0]
 8101da0:	3330      	adds	r3, #48	@ 0x30
 8101da2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8101da6:	4611      	mov	r1, r2
 8101da8:	4618      	mov	r0, r3
 8101daa:	f00d f8a5 	bl	810eef8 <arm_mat_trans_f32>
    arm_mat_mult_f32(&temp10, &temp11, &temp6);
 8101dae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101db2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101db6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8101dba:	4618      	mov	r0, r3
 8101dbc:	f00d f962 	bl	810f084 <arm_mat_mult_f32>
    // Terza parte: K * H * P
    arm_mat_mult_f32(&kf->H, &kf->P, &temp12);
 8101dc0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dc8:	681b      	ldr	r3, [r3, #0]
 8101dca:	f103 0010 	add.w	r0, r3, #16
 8101dce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101dd2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	3328      	adds	r3, #40	@ 0x28
 8101dda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101dde:	4619      	mov	r1, r3
 8101de0:	f00d f950 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->K, &temp12, &temp7);
 8101de4:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101de8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	3330      	adds	r3, #48	@ 0x30
 8101df0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8101df4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8101df8:	4618      	mov	r0, r3
 8101dfa:	f00d f943 	bl	810f084 <arm_mat_mult_f32>
    // Quarta parte: K * (H * P * H' + R) * K'
    arm_mat_mult_f32(&kf->H, &kf->P, &temp8);
 8101dfe:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	f103 0010 	add.w	r0, r3, #16
 8101e0c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e14:	681b      	ldr	r3, [r3, #0]
 8101e16:	3328      	adds	r3, #40	@ 0x28
 8101e18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e1c:	4619      	mov	r1, r3
 8101e1e:	f00d f931 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp8, &temp9, &temp3);
 8101e22:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8101e26:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8101e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8101e2e:	4618      	mov	r0, r3
 8101e30:	f00d f928 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_add_f32(&temp3, &kf->R, &temp4);
 8101e34:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e38:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e3c:	681b      	ldr	r3, [r3, #0]
 8101e3e:	f103 0120 	add.w	r1, r3, #32
 8101e42:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8101e46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	f00d fac4 	bl	810f3d8 <arm_mat_add_f32>
    arm_mat_mult_f32(&kf->K, &temp4, &temp13);
 8101e50:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e54:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e58:	681b      	ldr	r3, [r3, #0]
 8101e5a:	3330      	adds	r3, #48	@ 0x30
 8101e5c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8101e60:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8101e64:	4618      	mov	r0, r3
 8101e66:	f00d f90d 	bl	810f084 <arm_mat_mult_f32>
    arm_mat_mult_f32(&temp13, &temp11, &temp8);
 8101e6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8101e6e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8101e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8101e76:	4618      	mov	r0, r3
 8101e78:	f00d f904 	bl	810f084 <arm_mat_mult_f32>
    // Risultato finale: P = P - temp6 - temp7 + temp8
    arm_mat_sub_f32(&kf->P, &temp6, &temp12);
 8101e7c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101e80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	3328      	adds	r3, #40	@ 0x28
 8101e88:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8101e8c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8101e90:	4618      	mov	r0, r3
 8101e92:	f00d f88d 	bl	810efb0 <arm_mat_sub_f32>
    arm_mat_sub_f32(&temp12, &temp7, &temp6);
 8101e96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8101e9a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8101e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101ea2:	4618      	mov	r0, r3
 8101ea4:	f00d f884 	bl	810efb0 <arm_mat_sub_f32>
    arm_mat_add_f32(&temp6, &temp8, &kf->P);
 8101ea8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8101eac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8101eb6:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8101eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	f00d fa8a 	bl	810f3d8 <arm_mat_add_f32>


}
 8101ec4:	bf00      	nop
 8101ec6:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8101eca:	46bd      	mov	sp, r7
 8101ecc:	bd80      	pop	{r7, pc}

08101ece <voltToAmpere>:

	// Restituisci la media mobile
	return somma / count;
}

float voltToAmpere(float Volt, float a, float b) {
 8101ece:	b480      	push	{r7}
 8101ed0:	b087      	sub	sp, #28
 8101ed2:	af00      	add	r7, sp, #0
 8101ed4:	ed87 0a03 	vstr	s0, [r7, #12]
 8101ed8:	edc7 0a02 	vstr	s1, [r7, #8]
 8101edc:	ed87 1a01 	vstr	s2, [r7, #4]
	//float ampere = (Volt-2.47)/0.22;  //a3b RESISTENZA
	//float ampere = Volt*1.25994074 - 3.1119; //a3b MOTORE
	//float ampere = (Volt -2.53)/0.8 + 0.095 + 0.065 + 0.07 ;
	float ampere = (Volt - b) / a;
 8101ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8101ee4:	edd7 7a01 	vldr	s15, [r7, #4]
 8101ee8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8101eec:	ed97 7a02 	vldr	s14, [r7, #8]
 8101ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101ef4:	edc7 7a05 	vstr	s15, [r7, #20]

	//float ampere = 2.3*Volt - 5.75;   //a4b DA RIVEDERE
	//float ampere = (Volt-2.48)/0.185; //sensore ACS712 05b
	return ampere;
 8101ef8:	697b      	ldr	r3, [r7, #20]
 8101efa:	ee07 3a90 	vmov	s15, r3
}
 8101efe:	eeb0 0a67 	vmov.f32	s0, s15
 8101f02:	371c      	adds	r7, #28
 8101f04:	46bd      	mov	sp, r7
 8101f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f0a:	4770      	bx	lr

08101f0c <getSpeed>:
	return ((float) rand() / RAND_MAX) * (max - min) + min;
}

//******************
//FUNZIONE PER VELOCITA DESIDERATA DELLA RUOTA DIETRO, INIZIALMENTE A RAMPA E POI COSTANTE
float getSpeed(float actual_speed) {
 8101f0c:	b480      	push	{r7}
 8101f0e:	b085      	sub	sp, #20
 8101f10:	af00      	add	r7, sp, #0
 8101f12:	ed87 0a01 	vstr	s0, [r7, #4]
	float ramp_time = 2; //secondi di rampa
 8101f16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8101f1a:	60fb      	str	r3, [r7, #12]

	//speed è la velocita di regime (costante)
	if (actual_speed < speed) {
 8101f1c:	4b11      	ldr	r3, [pc, #68]	@ (8101f64 <getSpeed+0x58>)
 8101f1e:	edd3 7a00 	vldr	s15, [r3]
 8101f22:	ed97 7a01 	vldr	s14, [r7, #4]
 8101f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f2e:	d50f      	bpl.n	8101f50 <getSpeed+0x44>
		return actual_speed + speed * dt / ramp_time;
 8101f30:	4b0c      	ldr	r3, [pc, #48]	@ (8101f64 <getSpeed+0x58>)
 8101f32:	edd3 7a00 	vldr	s15, [r3]
 8101f36:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8101f68 <getSpeed+0x5c>
 8101f3a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101f3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8101f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f46:	edd7 7a01 	vldr	s15, [r7, #4]
 8101f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f4e:	e002      	b.n	8101f56 <getSpeed+0x4a>
	} else
		return speed;
 8101f50:	4b04      	ldr	r3, [pc, #16]	@ (8101f64 <getSpeed+0x58>)
 8101f52:	edd3 7a00 	vldr	s15, [r3]
}
 8101f56:	eeb0 0a67 	vmov.f32	s0, s15
 8101f5a:	3714      	adds	r7, #20
 8101f5c:	46bd      	mov	sp, r7
 8101f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f62:	4770      	bx	lr
 8101f64:	10000014 	.word	0x10000014
 8101f68:	3c23d70a 	.word	0x3c23d70a

08101f6c <filtro_media_mobile>:
//******************
// FUNZIONE PER IL FILTRO A MEDIA MOBILE
float filtro_media_mobile(float *vettorenuovo, float *vettorevecchio,
		float nuovamisurazione, int dimensione) {
 8101f6c:	b480      	push	{r7}
 8101f6e:	b089      	sub	sp, #36	@ 0x24
 8101f70:	af00      	add	r7, sp, #0
 8101f72:	60f8      	str	r0, [r7, #12]
 8101f74:	60b9      	str	r1, [r7, #8]
 8101f76:	ed87 0a01 	vstr	s0, [r7, #4]
 8101f7a:	603a      	str	r2, [r7, #0]
	vettorenuovo[0] = nuovamisurazione;
 8101f7c:	68fb      	ldr	r3, [r7, #12]
 8101f7e:	687a      	ldr	r2, [r7, #4]
 8101f80:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101f82:	2300      	movs	r3, #0
 8101f84:	61fb      	str	r3, [r7, #28]
 8101f86:	e00d      	b.n	8101fa4 <filtro_media_mobile+0x38>
		vettorenuovo[i + 1] = vettorevecchio[i]; // dal 2 al n-1 esimo valore si ricopiano i valori vecchi
 8101f88:	69fb      	ldr	r3, [r7, #28]
 8101f8a:	009b      	lsls	r3, r3, #2
 8101f8c:	68ba      	ldr	r2, [r7, #8]
 8101f8e:	441a      	add	r2, r3
 8101f90:	69fb      	ldr	r3, [r7, #28]
 8101f92:	3301      	adds	r3, #1
 8101f94:	009b      	lsls	r3, r3, #2
 8101f96:	68f9      	ldr	r1, [r7, #12]
 8101f98:	440b      	add	r3, r1
 8101f9a:	6812      	ldr	r2, [r2, #0]
 8101f9c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < dimensione - 1; i++) {
 8101f9e:	69fb      	ldr	r3, [r7, #28]
 8101fa0:	3301      	adds	r3, #1
 8101fa2:	61fb      	str	r3, [r7, #28]
 8101fa4:	683b      	ldr	r3, [r7, #0]
 8101fa6:	3b01      	subs	r3, #1
 8101fa8:	69fa      	ldr	r2, [r7, #28]
 8101faa:	429a      	cmp	r2, r3
 8101fac:	dbec      	blt.n	8101f88 <filtro_media_mobile+0x1c>
	}

	float somma = 0;
 8101fae:	f04f 0300 	mov.w	r3, #0
 8101fb2:	61bb      	str	r3, [r7, #24]
	float media;
	for (int i = 0; i < dimensione; i++) {
 8101fb4:	2300      	movs	r3, #0
 8101fb6:	617b      	str	r3, [r7, #20]
 8101fb8:	e018      	b.n	8101fec <filtro_media_mobile+0x80>
		vettorevecchio[i] = vettorenuovo[i]; //copia il vettore nuovo nel vecchio
 8101fba:	697b      	ldr	r3, [r7, #20]
 8101fbc:	009b      	lsls	r3, r3, #2
 8101fbe:	68fa      	ldr	r2, [r7, #12]
 8101fc0:	441a      	add	r2, r3
 8101fc2:	697b      	ldr	r3, [r7, #20]
 8101fc4:	009b      	lsls	r3, r3, #2
 8101fc6:	68b9      	ldr	r1, [r7, #8]
 8101fc8:	440b      	add	r3, r1
 8101fca:	6812      	ldr	r2, [r2, #0]
 8101fcc:	601a      	str	r2, [r3, #0]
		somma += vettorenuovo[i];           //calcola la somma di tutti i valori
 8101fce:	697b      	ldr	r3, [r7, #20]
 8101fd0:	009b      	lsls	r3, r3, #2
 8101fd2:	68fa      	ldr	r2, [r7, #12]
 8101fd4:	4413      	add	r3, r2
 8101fd6:	edd3 7a00 	vldr	s15, [r3]
 8101fda:	ed97 7a06 	vldr	s14, [r7, #24]
 8101fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101fe2:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < dimensione; i++) {
 8101fe6:	697b      	ldr	r3, [r7, #20]
 8101fe8:	3301      	adds	r3, #1
 8101fea:	617b      	str	r3, [r7, #20]
 8101fec:	697a      	ldr	r2, [r7, #20]
 8101fee:	683b      	ldr	r3, [r7, #0]
 8101ff0:	429a      	cmp	r2, r3
 8101ff2:	dbe2      	blt.n	8101fba <filtro_media_mobile+0x4e>
		// printf("%f.3 vet ", vettorenuovo[i]);
	}

	media = somma / dimensione;
 8101ff4:	683b      	ldr	r3, [r7, #0]
 8101ff6:	ee07 3a90 	vmov	s15, r3
 8101ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101ffe:	edd7 6a06 	vldr	s13, [r7, #24]
 8102002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102006:	edc7 7a04 	vstr	s15, [r7, #16]
	return media;
 810200a:	693b      	ldr	r3, [r7, #16]
 810200c:	ee07 3a90 	vmov	s15, r3
}
 8102010:	eeb0 0a67 	vmov.f32	s0, s15
 8102014:	3724      	adds	r7, #36	@ 0x24
 8102016:	46bd      	mov	sp, r7
 8102018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810201c:	4770      	bx	lr
	...

08102020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102024:	b0cf      	sub	sp, #316	@ 0x13c
 8102026:	af22      	add	r7, sp, #136	@ 0x88

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8102028:	4b98      	ldr	r3, [pc, #608]	@ (810228c <main+0x26c>)
 810202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810202e:	4a97      	ldr	r2, [pc, #604]	@ (810228c <main+0x26c>)
 8102030:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8102034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102038:	4b94      	ldr	r3, [pc, #592]	@ (810228c <main+0x26c>)
 810203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102042:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102046:	2001      	movs	r0, #1
 8102048:	f005 f8f4 	bl	8107234 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 810204c:	f005 ff80 	bl	8107f50 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 8102050:	2201      	movs	r2, #1
 8102052:	2102      	movs	r1, #2
 8102054:	2000      	movs	r0, #0
 8102056:	f005 ff01 	bl	8107e5c <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810205a:	4b8d      	ldr	r3, [pc, #564]	@ (8102290 <main+0x270>)
 810205c:	681b      	ldr	r3, [r3, #0]
 810205e:	091b      	lsrs	r3, r3, #4
 8102060:	f003 030f 	and.w	r3, r3, #15
 8102064:	2b07      	cmp	r3, #7
 8102066:	d108      	bne.n	810207a <main+0x5a>
 8102068:	4b8a      	ldr	r3, [pc, #552]	@ (8102294 <main+0x274>)
 810206a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810206e:	4a89      	ldr	r2, [pc, #548]	@ (8102294 <main+0x274>)
 8102070:	f043 0301 	orr.w	r3, r3, #1
 8102074:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8102078:	e007      	b.n	810208a <main+0x6a>
 810207a:	4b86      	ldr	r3, [pc, #536]	@ (8102294 <main+0x274>)
 810207c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8102080:	4a84      	ldr	r2, [pc, #528]	@ (8102294 <main+0x274>)
 8102082:	f043 0301 	orr.w	r3, r3, #1
 8102086:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810208a:	f002 fa9b 	bl	81045c4 <HAL_Init>

  /* USER CODE BEGIN Init */
	MX_GPIO_Init();
 810208e:	f001 fbed 	bl	810386c <MX_GPIO_Init>
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */

	arm_fir_init_f32(&fir_instance, FIR_LENGHT, fir_coefficients, fir_state, 1);
 8102092:	2301      	movs	r3, #1
 8102094:	9300      	str	r3, [sp, #0]
 8102096:	4b80      	ldr	r3, [pc, #512]	@ (8102298 <main+0x278>)
 8102098:	4a80      	ldr	r2, [pc, #512]	@ (810229c <main+0x27c>)
 810209a:	2103      	movs	r1, #3
 810209c:	4880      	ldr	r0, [pc, #512]	@ (81022a0 <main+0x280>)
 810209e:	f00d fa05 	bl	810f4ac <arm_fir_init_f32>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART3_UART_Init();
 81020a2:	f001 fb97 	bl	81037d4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 81020a6:	f001 f8b1 	bl	810320c <MX_I2C1_Init>
  MX_TIM1_Init();
 81020aa:	f001 f8ef 	bl	810328c <MX_TIM1_Init>
  MX_TIM2_Init();
 81020ae:	f001 f999 	bl	81033e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 81020b2:	f001 fa5b 	bl	810356c <MX_TIM4_Init>
  MX_ADC1_Init();
 81020b6:	f001 f823 	bl	8103100 <MX_ADC1_Init>
  MX_TIM3_Init();
 81020ba:	f001 f9e1 	bl	8103480 <MX_TIM3_Init>
  MX_TIM8_Init();
 81020be:	f001 fae3 	bl	8103688 <MX_TIM8_Init>
  MX_TIM6_Init();
 81020c2:	f001 faa9 	bl	8103618 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 81020c6:	f001 fb39 	bl	810373c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 81020ca:	4876      	ldr	r0, [pc, #472]	@ (81022a4 <main+0x284>)
 81020cc:	f008 feec 	bl	810aea8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81020d0:	2100      	movs	r1, #0
 81020d2:	4875      	ldr	r0, [pc, #468]	@ (81022a8 <main+0x288>)
 81020d4:	f008 ffc2 	bl	810b05c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 81020d8:	2100      	movs	r1, #0
 81020da:	4874      	ldr	r0, [pc, #464]	@ (81022ac <main+0x28c>)
 81020dc:	f008 ffbe 	bl	810b05c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 81020e0:	4873      	ldr	r0, [pc, #460]	@ (81022b0 <main+0x290>)
 81020e2:	f008 fe71 	bl	810adc8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 81020e6:	4873      	ldr	r0, [pc, #460]	@ (81022b4 <main+0x294>)
 81020e8:	f008 fe6e 	bl	810adc8 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 81020ec:	4872      	ldr	r0, [pc, #456]	@ (81022b8 <main+0x298>)
 81020ee:	f008 fedb 	bl	810aea8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1);
 81020f2:	2201      	movs	r2, #1
 81020f4:	4971      	ldr	r1, [pc, #452]	@ (81022bc <main+0x29c>)
 81020f6:	4872      	ldr	r0, [pc, #456]	@ (81022c0 <main+0x2a0>)
 81020f8:	f00a fbae 	bl	810c858 <HAL_UART_Receive_IT>

	srand(1233);
 81020fc:	f240 40d1 	movw	r0, #1233	@ 0x4d1
 8102100:	f00d f9e4 	bl	810f4cc <srand>

	//*************************
	//BNO055
	bno055_assignI2C(&hi2c1);
 8102104:	486f      	ldr	r0, [pc, #444]	@ (81022c4 <main+0x2a4>)
 8102106:	f7ff fbb9 	bl	810187c <bno055_assignI2C>
	bno055_setup(); //il BNO055 viene inizializzato con questa funzione
 810210a:	f7ff f9d8 	bl	81014be <bno055_setup>

	bno055_setPowerMode(NORMAL_MODE); //Inserire la modalita da impostare
 810210e:	2000      	movs	r0, #0
 8102110:	f7ff fc2a 	bl	8101968 <bno055_setPowerMode>
	PowerMode currentMode = bno055_getPowerMode(); //Metodo per ottenere la modalita impostata
 8102114:	f7ff fc47 	bl	81019a6 <bno055_getPowerMode>
 8102118:	4603      	mov	r3, r0
 810211a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	printf("Modalita energetica attuale: %d\r\n", currentMode);
 810211e:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8102122:	4619      	mov	r1, r3
 8102124:	4868      	ldr	r0, [pc, #416]	@ (81022c8 <main+0x2a8>)
 8102126:	f00e f92d 	bl	8110384 <iprintf>

	//Per angoli di Eulero
	bno055_vector_t eul;
	bno055_setOperationModeNDOF();
 810212a:	f7ff f9b5 	bl	8101498 <bno055_setOperationModeNDOF>

	//calibrazione sensore???
	bno055_calibration_state_t cal = bno055_getCalibrationState();
 810212e:	f7ff f9e3 	bl	81014f8 <bno055_getCalibrationState>
 8102132:	4603      	mov	r3, r0
 8102134:	67fb      	str	r3, [r7, #124]	@ 0x7c
	//		cal.gyro, cal.accel, cal.mag, cal.sys);
	//*************************

	//*************************
	//PID motore ruota dietro
	init_PID(&pid_speed, dt, V_MAX, -V_MAX);
 8102136:	eddf 7a65 	vldr	s15, [pc, #404]	@ 81022cc <main+0x2ac>
 810213a:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 810213e:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 8102142:	eeb0 0a67 	vmov.f32	s0, s15
 8102146:	4862      	ldr	r0, [pc, #392]	@ (81022d0 <main+0x2b0>)
 8102148:	f7ff f8de 	bl	8101308 <init_PID>
	tune_PID(&pid_speed, 14, 40, 0);
 810214c:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 81022d4 <main+0x2b4>
 8102150:	eddf 0a61 	vldr	s1, [pc, #388]	@ 81022d8 <main+0x2b8>
 8102154:	eeb2 0a0c 	vmov.f32	s0, #44	@ 0x41600000  14.0
 8102158:	485d      	ldr	r0, [pc, #372]	@ (81022d0 <main+0x2b0>)
 810215a:	f7ff f8f6 	bl	810134a <tune_PID>
	//*************************

	init_PID(&pid_yaw_rate, dt, 45, -45);
 810215e:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 81022cc <main+0x2ac>
 8102162:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 81022dc <main+0x2bc>
 8102166:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 81022e0 <main+0x2c0>
 810216a:	eeb0 0a67 	vmov.f32	s0, s15
 810216e:	485d      	ldr	r0, [pc, #372]	@ (81022e4 <main+0x2c4>)
 8102170:	f7ff f8ca 	bl	8101308 <init_PID>
	//	tune_PID(&pid_roll, 0.00012*3,00012/10/3,00012/10); //prova ad alzare
	tune_PID(&pid_yaw_rate, 1.1, 19, 0.12);
 8102174:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 81022e8 <main+0x2c8>
 8102178:	eef3 0a03 	vmov.f32	s1, #51	@ 0x41980000  19.0
 810217c:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 81022ec <main+0x2cc>
 8102180:	4858      	ldr	r0, [pc, #352]	@ (81022e4 <main+0x2c4>)
 8102182:	f7ff f8e2 	bl	810134a <tune_PID>
	//*************************
	//PID angolo roll
	init_PID(&pid_roll, dt, 10 * K, -10 * K);
 8102186:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 81022cc <main+0x2ac>
 810218a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 81022f0 <main+0x2d0>
 810218e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8102192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102196:	eddf 6a56 	vldr	s13, [pc, #344]	@ 81022f0 <main+0x2d0>
 810219a:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 810219e:	ee26 7a87 	vmul.f32	s14, s13, s14
 81021a2:	eeb0 1a47 	vmov.f32	s2, s14
 81021a6:	eef0 0a67 	vmov.f32	s1, s15
 81021aa:	eeb0 0a46 	vmov.f32	s0, s12
 81021ae:	4851      	ldr	r0, [pc, #324]	@ (81022f4 <main+0x2d4>)
 81021b0:	f7ff f8aa 	bl	8101308 <init_PID>
	//pid filtro prof tune_PID(&pid_roll, +0.00015*2,0, +0.00015/10/5); //prova ad alzare -0.00015*100000

	//tune_PID(&pid_roll, +0.00015/2, 0.00015/4, 0); //prova ad alzare -0.00015*100000

	//tune_PID(&pid_roll, +0.00015/2, 0.00015/80, +0.00015*10); //prova ad alzare -0.00015*100000
	roll_kp = 0.00015*1.5;
 81021b4:	4b50      	ldr	r3, [pc, #320]	@ (81022f8 <main+0x2d8>)
 81021b6:	4a51      	ldr	r2, [pc, #324]	@ (81022fc <main+0x2dc>)
 81021b8:	601a      	str	r2, [r3, #0]
	//roll_ki = 0.00015/100/4;

	roll_ki =0;
 81021ba:	4b51      	ldr	r3, [pc, #324]	@ (8102300 <main+0x2e0>)
 81021bc:	f04f 0200 	mov.w	r2, #0
 81021c0:	601a      	str	r2, [r3, #0]
	roll_kd=0.00015*2*2;
 81021c2:	4b50      	ldr	r3, [pc, #320]	@ (8102304 <main+0x2e4>)
 81021c4:	4a50      	ldr	r2, [pc, #320]	@ (8102308 <main+0x2e8>)
 81021c6:	601a      	str	r2, [r3, #0]

	tune_PID(&pid_roll, roll_kp, roll_ki, roll_kd);
 81021c8:	4b4b      	ldr	r3, [pc, #300]	@ (81022f8 <main+0x2d8>)
 81021ca:	edd3 7a00 	vldr	s15, [r3]
 81021ce:	4b4c      	ldr	r3, [pc, #304]	@ (8102300 <main+0x2e0>)
 81021d0:	ed93 7a00 	vldr	s14, [r3]
 81021d4:	4b4b      	ldr	r3, [pc, #300]	@ (8102304 <main+0x2e4>)
 81021d6:	edd3 6a00 	vldr	s13, [r3]
 81021da:	eeb0 1a66 	vmov.f32	s2, s13
 81021de:	eef0 0a47 	vmov.f32	s1, s14
 81021e2:	eeb0 0a67 	vmov.f32	s0, s15
 81021e6:	4843      	ldr	r0, [pc, #268]	@ (81022f4 <main+0x2d4>)
 81021e8:	f7ff f8af 	bl	810134a <tune_PID>
	//tune_PID(&pid_roll, 0.00015,0.00012/400,0.00012*225*10*3*5);
	//*************************

	//*************************
	//PID coppia manubrio
	init_PID(&pid_steering_torque, dt, V_MAX, -V_MAX);
 81021ec:	eddf 7a37 	vldr	s15, [pc, #220]	@ 81022cc <main+0x2ac>
 81021f0:	eebb 1a02 	vmov.f32	s2, #178	@ 0xc1900000 -18.0
 81021f4:	eef3 0a02 	vmov.f32	s1, #50	@ 0x41900000  18.0
 81021f8:	eeb0 0a67 	vmov.f32	s0, s15
 81021fc:	4843      	ldr	r0, [pc, #268]	@ (810230c <main+0x2ec>)
 81021fe:	f7ff f883 	bl	8101308 <init_PID>
	//tune_PID(&pid_steering_torque, 30000*5, 20000 * 1.5, 0);


	//tune_PID(&pid_steering_torque, 30000*3, 20000 * 2, 0);
	tune_PID(&pid_steering_torque, 30000*3.5, 20000 * 1.5, 0); // migliore
 8102202:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 81022d4 <main+0x2b4>
 8102206:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8102310 <main+0x2f0>
 810220a:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8102314 <main+0x2f4>
 810220e:	483f      	ldr	r0, [pc, #252]	@ (810230c <main+0x2ec>)
 8102210:	f7ff f89b 	bl	810134a <tune_PID>
	//prima 30000 20000*5 0
	//*************************

	//*************************
	//Filtro di Kalman per corrente
	arm_mat_init_f32(&u, control_dim, 1, (float32_t*) &u_data); // Input di controllo
 8102214:	4b40      	ldr	r3, [pc, #256]	@ (8102318 <main+0x2f8>)
 8102216:	2201      	movs	r2, #1
 8102218:	2101      	movs	r1, #1
 810221a:	4840      	ldr	r0, [pc, #256]	@ (810231c <main+0x2fc>)
 810221c:	f00d f8d8 	bl	810f3d0 <arm_mat_init_f32>
	arm_mat_init_f32(&z, measure_dim, 1, (float32_t*) &z_data);  // Misurazione
 8102220:	4b3f      	ldr	r3, [pc, #252]	@ (8102320 <main+0x300>)
 8102222:	2201      	movs	r2, #1
 8102224:	2102      	movs	r1, #2
 8102226:	483f      	ldr	r0, [pc, #252]	@ (8102324 <main+0x304>)
 8102228:	f00d f8d2 	bl	810f3d0 <arm_mat_init_f32>
	kalman_filter_init(&kf, &A_data, &B_data, &H_data, &Q_data, &R_data,
 810222c:	4b3e      	ldr	r3, [pc, #248]	@ (8102328 <main+0x308>)
 810222e:	9304      	str	r3, [sp, #16]
 8102230:	4b3e      	ldr	r3, [pc, #248]	@ (810232c <main+0x30c>)
 8102232:	9303      	str	r3, [sp, #12]
 8102234:	4b3e      	ldr	r3, [pc, #248]	@ (8102330 <main+0x310>)
 8102236:	9302      	str	r3, [sp, #8]
 8102238:	4b3e      	ldr	r3, [pc, #248]	@ (8102334 <main+0x314>)
 810223a:	9301      	str	r3, [sp, #4]
 810223c:	4b3e      	ldr	r3, [pc, #248]	@ (8102338 <main+0x318>)
 810223e:	9300      	str	r3, [sp, #0]
 8102240:	4b3e      	ldr	r3, [pc, #248]	@ (810233c <main+0x31c>)
 8102242:	4a3f      	ldr	r2, [pc, #252]	@ (8102340 <main+0x320>)
 8102244:	493f      	ldr	r1, [pc, #252]	@ (8102344 <main+0x324>)
 8102246:	4840      	ldr	r0, [pc, #256]	@ (8102348 <main+0x328>)
 8102248:	f7ff fbc0 	bl	81019cc <kalman_filter_init>
			&P_data, &K_data, &x_data);
	u_data[0] = (-dt * lambda * b / (1 - dt * lambda));
 810224c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 81022cc <main+0x2ac>
 8102250:	eef1 7a67 	vneg.f32	s15, s15
 8102254:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 810234c <main+0x32c>
 8102258:	ee27 7a87 	vmul.f32	s14, s15, s14
 810225c:	4b3c      	ldr	r3, [pc, #240]	@ (8102350 <main+0x330>)
 810225e:	edd3 7a00 	vldr	s15, [r3]
 8102262:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102266:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 81022cc <main+0x2ac>
 810226a:	eddf 7a38 	vldr	s15, [pc, #224]	@ 810234c <main+0x32c>
 810226e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102272:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102276:	ee37 7a67 	vsub.f32	s14, s14, s15
 810227a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810227e:	4b26      	ldr	r3, [pc, #152]	@ (8102318 <main+0x2f8>)
 8102280:	edc3 7a00 	vstr	s15, [r3]
	//u_data[0]=b;
	//*************************

	//SETTO D PER LE MISURE DELL'ADC
	for(int op = 0; op<4; op++)
 8102284:	2300      	movs	r3, #0
 8102286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810228a:	e0a1      	b.n	81023d0 <main+0x3b0>
 810228c:	58024400 	.word	0x58024400
 8102290:	e000ed00 	.word	0xe000ed00
 8102294:	58026400 	.word	0x58026400
 8102298:	10008b68 	.word	0x10008b68
 810229c:	10000090 	.word	0x10000090
 81022a0:	10008b5c 	.word	0x10008b5c
 81022a4:	10000394 	.word	0x10000394
 81022a8:	10000348 	.word	0x10000348
 81022ac:	100003e0 	.word	0x100003e0
 81022b0:	1000042c 	.word	0x1000042c
 81022b4:	100004c4 	.word	0x100004c4
 81022b8:	10000478 	.word	0x10000478
 81022bc:	10008a88 	.word	0x10008a88
 81022c0:	10000510 	.word	0x10000510
 81022c4:	100002f4 	.word	0x100002f4
 81022c8:	08113c38 	.word	0x08113c38
 81022cc:	3c23d70a 	.word	0x3c23d70a
 81022d0:	10008750 	.word	0x10008750
 81022d4:	00000000 	.word	0x00000000
 81022d8:	42200000 	.word	0x42200000
 81022dc:	c2340000 	.word	0xc2340000
 81022e0:	42340000 	.word	0x42340000
 81022e4:	10008770 	.word	0x10008770
 81022e8:	3df5c28f 	.word	0x3df5c28f
 81022ec:	3f8ccccd 	.word	0x3f8ccccd
 81022f0:	3cbfb15b 	.word	0x3cbfb15b
 81022f4:	10008790 	.word	0x10008790
 81022f8:	100087d4 	.word	0x100087d4
 81022fc:	396bedfa 	.word	0x396bedfa
 8102300:	100087d8 	.word	0x100087d8
 8102304:	100087dc 	.word	0x100087dc
 8102308:	3a1d4952 	.word	0x3a1d4952
 810230c:	100087b0 	.word	0x100087b0
 8102310:	46ea6000 	.word	0x46ea6000
 8102314:	47cd1400 	.word	0x47cd1400
 8102318:	10008b48 	.word	0x10008b48
 810231c:	10008b38 	.word	0x10008b38
 8102320:	10008b4c 	.word	0x10008b4c
 8102324:	10008b40 	.word	0x10008b40
 8102328:	10008b30 	.word	0x10008b30
 810232c:	10000080 	.word	0x10000080
 8102330:	10000070 	.word	0x10000070
 8102334:	10000060 	.word	0x10000060
 8102338:	10000050 	.word	0x10000050
 810233c:	10000040 	.word	0x10000040
 8102340:	10000038 	.word	0x10000038
 8102344:	10000028 	.word	0x10000028
 8102348:	10008af0 	.word	0x10008af0
 810234c:	c96c3680 	.word	0xc96c3680
 8102350:	10000024 	.word	0x10000024
	{
		HAL_ADC_Start(&hadc1);
 8102354:	48ba      	ldr	r0, [pc, #744]	@ (8102640 <main+0x620>)
 8102356:	f002 fdeb 	bl	8104f30 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, timeout);
 810235a:	4bba      	ldr	r3, [pc, #744]	@ (8102644 <main+0x624>)
 810235c:	681b      	ldr	r3, [r3, #0]
 810235e:	4619      	mov	r1, r3
 8102360:	48b7      	ldr	r0, [pc, #732]	@ (8102640 <main+0x620>)
 8102362:	f002 fee3 	bl	810512c <HAL_ADC_PollForConversion>
		CountValue = HAL_ADC_GetValue(&hadc1);
 8102366:	48b6      	ldr	r0, [pc, #728]	@ (8102640 <main+0x620>)
 8102368:	f002 ffd4 	bl	8105314 <HAL_ADC_GetValue>
 810236c:	ee07 0a90 	vmov	s15, r0
 8102370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102374:	4bb4      	ldr	r3, [pc, #720]	@ (8102648 <main+0x628>)
 8102376:	edc3 7a00 	vstr	s15, [r3]
		volt_D[op] = ((float) CountValue) * Vref / (resolution);
 810237a:	4bb3      	ldr	r3, [pc, #716]	@ (8102648 <main+0x628>)
 810237c:	ed93 7a00 	vldr	s14, [r3]
 8102380:	4bb2      	ldr	r3, [pc, #712]	@ (810264c <main+0x62c>)
 8102382:	edd3 7a00 	vldr	s15, [r3]
 8102386:	ee67 6a27 	vmul.f32	s13, s14, s15
 810238a:	4bb1      	ldr	r3, [pc, #708]	@ (8102650 <main+0x630>)
 810238c:	ed93 7a00 	vldr	s14, [r3]
 8102390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102394:	4aaf      	ldr	r2, [pc, #700]	@ (8102654 <main+0x634>)
 8102396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810239a:	009b      	lsls	r3, r3, #2
 810239c:	4413      	add	r3, r2
 810239e:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 81023a2:	48a7      	ldr	r0, [pc, #668]	@ (8102640 <main+0x620>)
 81023a4:	f002 fe8e 	bl	81050c4 <HAL_ADC_Stop>
		sommaVolt +=volt_D[op];
 81023a8:	4aaa      	ldr	r2, [pc, #680]	@ (8102654 <main+0x634>)
 81023aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 81023ae:	009b      	lsls	r3, r3, #2
 81023b0:	4413      	add	r3, r2
 81023b2:	ed93 7a00 	vldr	s14, [r3]
 81023b6:	4ba8      	ldr	r3, [pc, #672]	@ (8102658 <main+0x638>)
 81023b8:	edd3 7a00 	vldr	s15, [r3]
 81023bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 81023c0:	4ba5      	ldr	r3, [pc, #660]	@ (8102658 <main+0x638>)
 81023c2:	edc3 7a00 	vstr	s15, [r3]
	for(int op = 0; op<4; op++)
 81023c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 81023ca:	3301      	adds	r3, #1
 81023cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81023d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 81023d4:	2b03      	cmp	r3, #3
 81023d6:	ddbd      	ble.n	8102354 <main+0x334>
	}



	//prendo 4 misurazione e faccio la media
	D = 1.68 - sommaVolt/4;
 81023d8:	4b9f      	ldr	r3, [pc, #636]	@ (8102658 <main+0x638>)
 81023da:	edd3 7a00 	vldr	s15, [r3]
 81023de:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 81023e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81023e6:	ee16 0a90 	vmov	r0, s13
 81023ea:	f7fe f935 	bl	8100658 <__aeabi_f2d>
 81023ee:	4602      	mov	r2, r0
 81023f0:	460b      	mov	r3, r1
 81023f2:	a18f      	add	r1, pc, #572	@ (adr r1, 8102630 <main+0x610>)
 81023f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 81023f8:	f7fd ffce 	bl	8100398 <__aeabi_dsub>
 81023fc:	4602      	mov	r2, r0
 81023fe:	460b      	mov	r3, r1
 8102400:	4610      	mov	r0, r2
 8102402:	4619      	mov	r1, r3
 8102404:	f7fe fc78 	bl	8100cf8 <__aeabi_d2f>
 8102408:	4603      	mov	r3, r0
 810240a:	4a94      	ldr	r2, [pc, #592]	@ (810265c <main+0x63c>)
 810240c:	6013      	str	r3, [r2, #0]
	sommaVolt=0;
 810240e:	4b92      	ldr	r3, [pc, #584]	@ (8102658 <main+0x638>)
 8102410:	f04f 0200 	mov.w	r2, #0
 8102414:	601a      	str	r2, [r3, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (flag_Tc == 1) {
 8102416:	4b92      	ldr	r3, [pc, #584]	@ (8102660 <main+0x640>)
 8102418:	edd3 7a00 	vldr	s15, [r3]
 810241c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102420:	eef4 7a47 	vcmp.f32	s15, s14
 8102424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102428:	d1f5      	bne.n	8102416 <main+0x3f6>
			flag_Tc = 0;
 810242a:	4b8d      	ldr	r3, [pc, #564]	@ (8102660 <main+0x640>)
 810242c:	f04f 0200 	mov.w	r2, #0
 8102430:	601a      	str	r2, [r3, #0]

			if ((tasto_premuto == 1) && (tasto_appena_premuto == 1)) {
 8102432:	4b8c      	ldr	r3, [pc, #560]	@ (8102664 <main+0x644>)
 8102434:	681b      	ldr	r3, [r3, #0]
 8102436:	2b01      	cmp	r3, #1
 8102438:	d113      	bne.n	8102462 <main+0x442>
 810243a:	4b8b      	ldr	r3, [pc, #556]	@ (8102668 <main+0x648>)
 810243c:	681b      	ldr	r3, [r3, #0]
 810243e:	2b01      	cmp	r3, #1
 8102440:	d10f      	bne.n	8102462 <main+0x442>
				tempo_iniziale = n_ref * dt;
 8102442:	4b8a      	ldr	r3, [pc, #552]	@ (810266c <main+0x64c>)
 8102444:	681b      	ldr	r3, [r3, #0]
 8102446:	ee07 3a90 	vmov	s15, r3
 810244a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810244e:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8102670 <main+0x650>
 8102452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102456:	4b87      	ldr	r3, [pc, #540]	@ (8102674 <main+0x654>)
 8102458:	edc3 7a00 	vstr	s15, [r3]
				tasto_appena_premuto = 2;
 810245c:	4b82      	ldr	r3, [pc, #520]	@ (8102668 <main+0x648>)
 810245e:	2202      	movs	r2, #2
 8102460:	601a      	str	r2, [r3, #0]
			}

			if ((tasto_premuto == 1) && (tasto_appena_premuto == 2)) {
 8102462:	4b80      	ldr	r3, [pc, #512]	@ (8102664 <main+0x644>)
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	2b01      	cmp	r3, #1
 8102468:	d146      	bne.n	81024f8 <main+0x4d8>
 810246a:	4b7f      	ldr	r3, [pc, #508]	@ (8102668 <main+0x648>)
 810246c:	681b      	ldr	r3, [r3, #0]
 810246e:	2b02      	cmp	r3, #2
 8102470:	d142      	bne.n	81024f8 <main+0x4d8>
				tempo_attuale = n_ref * dt;
 8102472:	4b7e      	ldr	r3, [pc, #504]	@ (810266c <main+0x64c>)
 8102474:	681b      	ldr	r3, [r3, #0]
 8102476:	ee07 3a90 	vmov	s15, r3
 810247a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810247e:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8102670 <main+0x650>
 8102482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102486:	4b7c      	ldr	r3, [pc, #496]	@ (8102678 <main+0x658>)
 8102488:	edc3 7a00 	vstr	s15, [r3]
				if (tempo_attuale - tempo_iniziale >= 3) {
 810248c:	4b7a      	ldr	r3, [pc, #488]	@ (8102678 <main+0x658>)
 810248e:	ed93 7a00 	vldr	s14, [r3]
 8102492:	4b78      	ldr	r3, [pc, #480]	@ (8102674 <main+0x654>)
 8102494:	edd3 7a00 	vldr	s15, [r3]
 8102498:	ee77 7a67 	vsub.f32	s15, s14, s15
 810249c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 81024a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 81024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81024a8:	db26      	blt.n	81024f8 <main+0x4d8>
					sys_started++;
 81024aa:	4b74      	ldr	r3, [pc, #464]	@ (810267c <main+0x65c>)
 81024ac:	681b      	ldr	r3, [r3, #0]
 81024ae:	3301      	adds	r3, #1
 81024b0:	4a72      	ldr	r2, [pc, #456]	@ (810267c <main+0x65c>)
 81024b2:	6013      	str	r3, [r2, #0]

					if (sys_started == 1) {
 81024b4:	4b71      	ldr	r3, [pc, #452]	@ (810267c <main+0x65c>)
 81024b6:	681b      	ldr	r3, [r3, #0]
 81024b8:	2b01      	cmp	r3, #1
 81024ba:	d105      	bne.n	81024c8 <main+0x4a8>
						stadio = 0;
 81024bc:	4b70      	ldr	r3, [pc, #448]	@ (8102680 <main+0x660>)
 81024be:	2200      	movs	r2, #0
 81024c0:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 81024c2:	4b6a      	ldr	r3, [pc, #424]	@ (810266c <main+0x64c>)
 81024c4:	2200      	movs	r2, #0
 81024c6:	601a      	str	r2, [r3, #0]

					}
					if (sys_started == 2) {
 81024c8:	4b6c      	ldr	r3, [pc, #432]	@ (810267c <main+0x65c>)
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	2b02      	cmp	r3, #2
 81024ce:	d109      	bne.n	81024e4 <main+0x4c4>
						stadio = 0;
 81024d0:	4b6b      	ldr	r3, [pc, #428]	@ (8102680 <main+0x660>)
 81024d2:	2200      	movs	r2, #0
 81024d4:	601a      	str	r2, [r3, #0]
						n_ref = 0;
 81024d6:	4b65      	ldr	r3, [pc, #404]	@ (810266c <main+0x64c>)
 81024d8:	2200      	movs	r2, #0
 81024da:	601a      	str	r2, [r3, #0]
						pid_roll.e_old=0;
 81024dc:	4b69      	ldr	r3, [pc, #420]	@ (8102684 <main+0x664>)
 81024de:	f04f 0200 	mov.w	r2, #0
 81024e2:	619a      	str	r2, [r3, #24]
					}
					if (sys_started == 3)
 81024e4:	4b65      	ldr	r3, [pc, #404]	@ (810267c <main+0x65c>)
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	2b03      	cmp	r3, #3
 81024ea:	d102      	bne.n	81024f2 <main+0x4d2>
						sys_started = 0;
 81024ec:	4b63      	ldr	r3, [pc, #396]	@ (810267c <main+0x65c>)
 81024ee:	2200      	movs	r2, #0
 81024f0:	601a      	str	r2, [r3, #0]
					tasto_premuto = 0;
 81024f2:	4b5c      	ldr	r3, [pc, #368]	@ (8102664 <main+0x644>)
 81024f4:	2200      	movs	r2, #0
 81024f6:	601a      	str	r2, [r3, #0]
			//#####################################
			//##             BNO055			     ##
			//#####################################
			//*******************************

			eul = bno055_getVectorEuler();
 81024f8:	f7ff f97c 	bl	81017f4 <bno055_getVectorEuler>
 81024fc:	eeb0 4a40 	vmov.f32	s8, s0
 8102500:	eef0 4a60 	vmov.f32	s9, s1
 8102504:	eeb0 5a41 	vmov.f32	s10, s2
 8102508:	eef0 5a61 	vmov.f32	s11, s3
 810250c:	eeb0 6a42 	vmov.f32	s12, s4
 8102510:	eef0 6a62 	vmov.f32	s13, s5
 8102514:	eeb0 7a43 	vmov.f32	s14, s6
 8102518:	eef0 7a63 	vmov.f32	s15, s7
 810251c:	ed87 4b20 	vstr	d4, [r7, #128]	@ 0x80
 8102520:	ed87 5b22 	vstr	d5, [r7, #136]	@ 0x88
 8102524:	ed87 6b24 	vstr	d6, [r7, #144]	@ 0x90
 8102528:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98
			//stampa angoli eulero
			//printf("Yaw: %+2.2f Roll: %+2.2f Pitch: %+2.2f \r\n", eul.x, eul.y, eul.z);

			roll = -eul.y - 0.4 + 2; //ottengo angolo di eulero (il sensore è di 2 gradi inclinato rispetto al piano in cui giace la bicicletta
 810252c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8102530:	673a      	str	r2, [r7, #112]	@ 0x70
 8102532:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8102536:	677b      	str	r3, [r7, #116]	@ 0x74
 8102538:	a33f      	add	r3, pc, #252	@ (adr r3, 8102638 <main+0x618>)
 810253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810253e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8102542:	f7fd ff29 	bl	8100398 <__aeabi_dsub>
 8102546:	4602      	mov	r2, r0
 8102548:	460b      	mov	r3, r1
 810254a:	4610      	mov	r0, r2
 810254c:	4619      	mov	r1, r3
 810254e:	f04f 0200 	mov.w	r2, #0
 8102552:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8102556:	f7fd ff21 	bl	810039c <__adddf3>
 810255a:	4602      	mov	r2, r0
 810255c:	460b      	mov	r3, r1
 810255e:	4610      	mov	r0, r2
 8102560:	4619      	mov	r1, r3
 8102562:	f7fe fbc9 	bl	8100cf8 <__aeabi_d2f>
 8102566:	4603      	mov	r3, r0
 8102568:	4a47      	ldr	r2, [pc, #284]	@ (8102688 <main+0x668>)
 810256a:	6013      	str	r3, [r2, #0]
			yaw = eul.x; //ottengo angolo di yaw
 810256c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8102570:	4610      	mov	r0, r2
 8102572:	4619      	mov	r1, r3
 8102574:	f7fe fbc0 	bl	8100cf8 <__aeabi_d2f>
 8102578:	4603      	mov	r3, r0
 810257a:	4a44      	ldr	r2, [pc, #272]	@ (810268c <main+0x66c>)
 810257c:	6013      	str	r3, [r2, #0]

			yaw_rate = (yaw - old_yaw) / dt;
 810257e:	4b43      	ldr	r3, [pc, #268]	@ (810268c <main+0x66c>)
 8102580:	ed93 7a00 	vldr	s14, [r3]
 8102584:	4b42      	ldr	r3, [pc, #264]	@ (8102690 <main+0x670>)
 8102586:	edd3 7a00 	vldr	s15, [r3]
 810258a:	ee37 7a67 	vsub.f32	s14, s14, s15
 810258e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102670 <main+0x650>
 8102592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102596:	4b3f      	ldr	r3, [pc, #252]	@ (8102694 <main+0x674>)
 8102598:	edc3 7a00 	vstr	s15, [r3]
			old_yaw = yaw;
 810259c:	4b3b      	ldr	r3, [pc, #236]	@ (810268c <main+0x66c>)
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	4a3b      	ldr	r2, [pc, #236]	@ (8102690 <main+0x670>)
 81025a2:	6013      	str	r3, [r2, #0]

			//controllo angolo di roll, se è troppo grande ferma tutto
			if (roll >= roll_limite || roll <= -1 * roll_limite) {
 81025a4:	4b38      	ldr	r3, [pc, #224]	@ (8102688 <main+0x668>)
 81025a6:	edd3 7a00 	vldr	s15, [r3]
 81025aa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 81025ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 81025b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81025b6:	da09      	bge.n	81025cc <main+0x5ac>
 81025b8:	4b33      	ldr	r3, [pc, #204]	@ (8102688 <main+0x668>)
 81025ba:	edd3 7a00 	vldr	s15, [r3]
 81025be:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 81025c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81025ca:	d802      	bhi.n	81025d2 <main+0x5b2>
				sys_started = 0;
 81025cc:	4b2b      	ldr	r3, [pc, #172]	@ (810267c <main+0x65c>)
 81025ce:	2200      	movs	r2, #0
 81025d0:	601a      	str	r2, [r3, #0]
			//#####################################
			//##          RUOTA DIETRO		     ##
			//#####################################
			//*******************************
			//Ottengo velocita ruota dietro
			counts = (double) TIM4->CNT - (TIM4->ARR) / 2;
 81025d2:	4b31      	ldr	r3, [pc, #196]	@ (8102698 <main+0x678>)
 81025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81025d6:	4618      	mov	r0, r3
 81025d8:	f7fe f81c 	bl	8100614 <__aeabi_ui2d>
 81025dc:	4604      	mov	r4, r0
 81025de:	460d      	mov	r5, r1
 81025e0:	4b2d      	ldr	r3, [pc, #180]	@ (8102698 <main+0x678>)
 81025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025e4:	085b      	lsrs	r3, r3, #1
 81025e6:	4618      	mov	r0, r3
 81025e8:	f7fe f814 	bl	8100614 <__aeabi_ui2d>
 81025ec:	4602      	mov	r2, r0
 81025ee:	460b      	mov	r3, r1
 81025f0:	4620      	mov	r0, r4
 81025f2:	4629      	mov	r1, r5
 81025f4:	f7fd fed0 	bl	8100398 <__aeabi_dsub>
 81025f8:	4602      	mov	r2, r0
 81025fa:	460b      	mov	r3, r1
 81025fc:	4610      	mov	r0, r2
 81025fe:	4619      	mov	r1, r3
 8102600:	f7fe fb7a 	bl	8100cf8 <__aeabi_d2f>
 8102604:	4603      	mov	r3, r0
 8102606:	4a25      	ldr	r2, [pc, #148]	@ (810269c <main+0x67c>)
 8102608:	6013      	str	r3, [r2, #0]
			TIM4->CNT = (TIM4->ARR) / 2;
 810260a:	4b23      	ldr	r3, [pc, #140]	@ (8102698 <main+0x678>)
 810260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810260e:	4a22      	ldr	r2, [pc, #136]	@ (8102698 <main+0x678>)
 8102610:	085b      	lsrs	r3, r3, #1
 8102612:	6253      	str	r3, [r2, #36]	@ 0x24
			//velocita angolare
			//encoder ha risoluzione cpr 500, non 66
			delta_angle_degree = (counts * 360)
 8102614:	4b21      	ldr	r3, [pc, #132]	@ (810269c <main+0x67c>)
 8102616:	edd3 7a00 	vldr	s15, [r3]
 810261a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 81026a0 <main+0x680>
 810261e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102622:	ee17 0a90 	vmov	r0, s15
 8102626:	f7fe f817 	bl	8100658 <__aeabi_f2d>
 810262a:	e03b      	b.n	81026a4 <main+0x684>
 810262c:	f3af 8000 	nop.w
 8102630:	ae147ae1 	.word	0xae147ae1
 8102634:	3ffae147 	.word	0x3ffae147
 8102638:	9999999a 	.word	0x9999999a
 810263c:	3fd99999 	.word	0x3fd99999
 8102640:	10000290 	.word	0x10000290
 8102644:	10000018 	.word	0x10000018
 8102648:	10008a54 	.word	0x10008a54
 810264c:	10000020 	.word	0x10000020
 8102650:	1000001c 	.word	0x1000001c
 8102654:	10008824 	.word	0x10008824
 8102658:	10008834 	.word	0x10008834
 810265c:	10008b58 	.word	0x10008b58
 8102660:	100087d0 	.word	0x100087d0
 8102664:	10008840 	.word	0x10008840
 8102668:	10008844 	.word	0x10008844
 810266c:	10008a80 	.word	0x10008a80
 8102670:	3c23d70a 	.word	0x3c23d70a
 8102674:	1000883c 	.word	0x1000883c
 8102678:	10008838 	.word	0x10008838
 810267c:	10008818 	.word	0x10008818
 8102680:	10008b54 	.word	0x10008b54
 8102684:	10008790 	.word	0x10008790
 8102688:	10008a60 	.word	0x10008a60
 810268c:	10008a64 	.word	0x10008a64
 8102690:	10008a68 	.word	0x10008a68
 8102694:	10008a5c 	.word	0x10008a5c
 8102698:	40000800 	.word	0x40000800
 810269c:	100087e0 	.word	0x100087e0
 81026a0:	43b40000 	.word	0x43b40000
					/ (ppr * gear_ratio * encoder_resolution); //del motore(davanti) 18 denti dietro (raggio)3.8cm ,28 denti davanti (raggio) 5.7cm
 81026a4:	a3cc      	add	r3, pc, #816	@ (adr r3, 81029d8 <main+0x9b8>)
 81026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026aa:	f7fe f957 	bl	810095c <__aeabi_ddiv>
 81026ae:	4602      	mov	r2, r0
 81026b0:	460b      	mov	r3, r1
 81026b2:	4610      	mov	r0, r2
 81026b4:	4619      	mov	r1, r3
 81026b6:	f7fe fb1f 	bl	8100cf8 <__aeabi_d2f>
 81026ba:	4603      	mov	r3, r0
			delta_angle_degree = (counts * 360)
 81026bc:	4ac8      	ldr	r2, [pc, #800]	@ (81029e0 <main+0x9c0>)
 81026be:	6013      	str	r3, [r2, #0]
			speed_degsec = -1 * delta_angle_degree / dt;
 81026c0:	4bc7      	ldr	r3, [pc, #796]	@ (81029e0 <main+0x9c0>)
 81026c2:	edd3 7a00 	vldr	s15, [r3]
 81026c6:	eeb1 7a67 	vneg.f32	s14, s15
 81026ca:	eddf 6ac6 	vldr	s13, [pc, #792]	@ 81029e4 <main+0x9c4>
 81026ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81026d2:	4bc5      	ldr	r3, [pc, #788]	@ (81029e8 <main+0x9c8>)
 81026d4:	edc3 7a00 	vstr	s15, [r3]

			angle_degree += delta_angle_degree;
 81026d8:	4bc4      	ldr	r3, [pc, #784]	@ (81029ec <main+0x9cc>)
 81026da:	ed93 7a00 	vldr	s14, [r3]
 81026de:	4bc0      	ldr	r3, [pc, #768]	@ (81029e0 <main+0x9c0>)
 81026e0:	edd3 7a00 	vldr	s15, [r3]
 81026e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 81026e8:	4bc0      	ldr	r3, [pc, #768]	@ (81029ec <main+0x9cc>)
 81026ea:	edc3 7a00 	vstr	s15, [r3]
			//filtro media mobile
			speed_degsec_filtrata = filtro_media_mobile(velocitavecchia,
 81026ee:	4bbe      	ldr	r3, [pc, #760]	@ (81029e8 <main+0x9c8>)
 81026f0:	edd3 7a00 	vldr	s15, [r3]
 81026f4:	221e      	movs	r2, #30
 81026f6:	eeb0 0a67 	vmov.f32	s0, s15
 81026fa:	49bd      	ldr	r1, [pc, #756]	@ (81029f0 <main+0x9d0>)
 81026fc:	48bd      	ldr	r0, [pc, #756]	@ (81029f4 <main+0x9d4>)
 81026fe:	f7ff fc35 	bl	8101f6c <filtro_media_mobile>
 8102702:	eef0 7a40 	vmov.f32	s15, s0
 8102706:	4bbc      	ldr	r3, [pc, #752]	@ (81029f8 <main+0x9d8>)
 8102708:	edc3 7a00 	vstr	s15, [r3]
					velocitanuova, speed_degsec, 30);
			//rapporto ruota posteriore
			speed_degsec_back = speed_degsec_filtrata
					* raggio_deragliatore_anteriore
 810270c:	4bba      	ldr	r3, [pc, #744]	@ (81029f8 <main+0x9d8>)
 810270e:	681b      	ldr	r3, [r3, #0]
 8102710:	4618      	mov	r0, r3
 8102712:	f7fd ffa1 	bl	8100658 <__aeabi_f2d>
 8102716:	a3a8      	add	r3, pc, #672	@ (adr r3, 81029b8 <main+0x998>)
 8102718:	e9d3 2300 	ldrd	r2, r3, [r3]
 810271c:	f7fd fff4 	bl	8100708 <__aeabi_dmul>
 8102720:	4602      	mov	r2, r0
 8102722:	460b      	mov	r3, r1
 8102724:	4610      	mov	r0, r2
 8102726:	4619      	mov	r1, r3
					/ raggio_deragliatore_posteriore; //rapporto velcoita angolare tra ruota dietro e avanti???
 8102728:	a3a5      	add	r3, pc, #660	@ (adr r3, 81029c0 <main+0x9a0>)
 810272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810272e:	f7fe f915 	bl	810095c <__aeabi_ddiv>
 8102732:	4602      	mov	r2, r0
 8102734:	460b      	mov	r3, r1
 8102736:	4610      	mov	r0, r2
 8102738:	4619      	mov	r1, r3
 810273a:	f7fe fadd 	bl	8100cf8 <__aeabi_d2f>
 810273e:	4603      	mov	r3, r0
			speed_degsec_back = speed_degsec_filtrata
 8102740:	4aae      	ldr	r2, [pc, #696]	@ (81029fc <main+0x9dc>)
 8102742:	6013      	str	r3, [r2, #0]

			//velocita ruota dietro
			speed_metsec = speed_degsec_back / 180 * 3.14 * radius;
 8102744:	4bad      	ldr	r3, [pc, #692]	@ (81029fc <main+0x9dc>)
 8102746:	edd3 7a00 	vldr	s15, [r3]
 810274a:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8102a00 <main+0x9e0>
 810274e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8102752:	ee16 0a90 	vmov	r0, s13
 8102756:	f7fd ff7f 	bl	8100658 <__aeabi_f2d>
 810275a:	a39b      	add	r3, pc, #620	@ (adr r3, 81029c8 <main+0x9a8>)
 810275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102760:	f7fd ffd2 	bl	8100708 <__aeabi_dmul>
 8102764:	4602      	mov	r2, r0
 8102766:	460b      	mov	r3, r1
 8102768:	4610      	mov	r0, r2
 810276a:	4619      	mov	r1, r3
 810276c:	a398      	add	r3, pc, #608	@ (adr r3, 81029d0 <main+0x9b0>)
 810276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102772:	f7fd ffc9 	bl	8100708 <__aeabi_dmul>
 8102776:	4602      	mov	r2, r0
 8102778:	460b      	mov	r3, r1
 810277a:	4610      	mov	r0, r2
 810277c:	4619      	mov	r1, r3
 810277e:	f7fe fabb 	bl	8100cf8 <__aeabi_d2f>
 8102782:	4603      	mov	r3, r0
 8102784:	4a9f      	ldr	r2, [pc, #636]	@ (8102a04 <main+0x9e4>)
 8102786:	6013      	str	r3, [r2, #0]

			//angolo dietro
			angle_back_wheel += speed_degsec_back * dt;
 8102788:	4b9c      	ldr	r3, [pc, #624]	@ (81029fc <main+0x9dc>)
 810278a:	edd3 7a00 	vldr	s15, [r3]
 810278e:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 81029e4 <main+0x9c4>
 8102792:	ee27 7a87 	vmul.f32	s14, s15, s14
 8102796:	4b9c      	ldr	r3, [pc, #624]	@ (8102a08 <main+0x9e8>)
 8102798:	edd3 7a00 	vldr	s15, [r3]
 810279c:	ee77 7a27 	vadd.f32	s15, s14, s15
 81027a0:	4b99      	ldr	r3, [pc, #612]	@ (8102a08 <main+0x9e8>)
 81027a2:	edc3 7a00 	vstr	s15, [r3]
			//*******************************

			//******************************+
			//PID ruota dietro
			desired_speed_metsec = getSpeed(desired_speed_metsec); //funzione che crea un riferimento a rampa e poi costante per la velocita della ruota dietro
 81027a6:	4b99      	ldr	r3, [pc, #612]	@ (8102a0c <main+0x9ec>)
 81027a8:	edd3 7a00 	vldr	s15, [r3]
 81027ac:	eeb0 0a67 	vmov.f32	s0, s15
 81027b0:	f7ff fbac 	bl	8101f0c <getSpeed>
 81027b4:	eef0 7a40 	vmov.f32	s15, s0
 81027b8:	4b94      	ldr	r3, [pc, #592]	@ (8102a0c <main+0x9ec>)
 81027ba:	edc3 7a00 	vstr	s15, [r3]
			desired_speed_rpm = DegreeSec2RPM(desired_speed_metsec / radius); //inutile per ora
 81027be:	4b93      	ldr	r3, [pc, #588]	@ (8102a0c <main+0x9ec>)
 81027c0:	681b      	ldr	r3, [r3, #0]
 81027c2:	4618      	mov	r0, r3
 81027c4:	f7fd ff48 	bl	8100658 <__aeabi_f2d>
 81027c8:	a381      	add	r3, pc, #516	@ (adr r3, 81029d0 <main+0x9b0>)
 81027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ce:	f7fe f8c5 	bl	810095c <__aeabi_ddiv>
 81027d2:	4602      	mov	r2, r0
 81027d4:	460b      	mov	r3, r1
 81027d6:	4610      	mov	r0, r2
 81027d8:	4619      	mov	r1, r3
 81027da:	f7fe fa8d 	bl	8100cf8 <__aeabi_d2f>
 81027de:	4603      	mov	r3, r0
 81027e0:	ee00 3a10 	vmov	s0, r3
 81027e4:	f7fe fc9e 	bl	8101124 <DegreeSec2RPM>
 81027e8:	eef0 7a40 	vmov.f32	s15, s0
 81027ec:	4b88      	ldr	r3, [pc, #544]	@ (8102a10 <main+0x9f0>)
 81027ee:	edc3 7a00 	vstr	s15, [r3]
			u_back_wheel = PID_controller(&pid_speed, speed_metsec,	desired_speed_metsec);
 81027f2:	4b84      	ldr	r3, [pc, #528]	@ (8102a04 <main+0x9e4>)
 81027f4:	edd3 7a00 	vldr	s15, [r3]
 81027f8:	4b84      	ldr	r3, [pc, #528]	@ (8102a0c <main+0x9ec>)
 81027fa:	ed93 7a00 	vldr	s14, [r3]
 81027fe:	eef0 0a47 	vmov.f32	s1, s14
 8102802:	eeb0 0a67 	vmov.f32	s0, s15
 8102806:	4883      	ldr	r0, [pc, #524]	@ (8102a14 <main+0x9f4>)
 8102808:	f7fe fdb8 	bl	810137c <PID_controller>
 810280c:	eef0 7a40 	vmov.f32	s15, s0
 8102810:	4b81      	ldr	r3, [pc, #516]	@ (8102a18 <main+0x9f8>)
 8102812:	edc3 7a00 	vstr	s15, [r3]
			//******************************


			if (sys_started == 0) {
 8102816:	4b81      	ldr	r3, [pc, #516]	@ (8102a1c <main+0x9fc>)
 8102818:	681b      	ldr	r3, [r3, #0]
 810281a:	2b00      	cmp	r3, #0
 810281c:	d107      	bne.n	810282e <main+0x80e>
				u_front_wheel = 0;
 810281e:	4b80      	ldr	r3, [pc, #512]	@ (8102a20 <main+0xa00>)
 8102820:	f04f 0200 	mov.w	r2, #0
 8102824:	601a      	str	r2, [r3, #0]
				u_back_wheel = 0;
 8102826:	4b7c      	ldr	r3, [pc, #496]	@ (8102a18 <main+0x9f8>)
 8102828:	f04f 0200 	mov.w	r2, #0
 810282c:	601a      	str	r2, [r3, #0]

			}
			if (sys_started == 1) {
 810282e:	4b7b      	ldr	r3, [pc, #492]	@ (8102a1c <main+0x9fc>)
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	2b01      	cmp	r3, #1
 8102834:	d108      	bne.n	8102848 <main+0x828>

				//setto l'angolo del manubrio a 0
				angle_steer = 0;
 8102836:	4b7b      	ldr	r3, [pc, #492]	@ (8102a24 <main+0xa04>)
 8102838:	f04f 0200 	mov.w	r2, #0
 810283c:	601a      	str	r2, [r3, #0]



				sys_started++;
 810283e:	4b77      	ldr	r3, [pc, #476]	@ (8102a1c <main+0x9fc>)
 8102840:	681b      	ldr	r3, [r3, #0]
 8102842:	3301      	adds	r3, #1
 8102844:	4a75      	ldr	r2, [pc, #468]	@ (8102a1c <main+0x9fc>)
 8102846:	6013      	str	r3, [r2, #0]
			}

			//settare duty e pwm driver
			duty_back_wheel = Voltage2Duty(u_back_wheel);
 8102848:	4b73      	ldr	r3, [pc, #460]	@ (8102a18 <main+0x9f8>)
 810284a:	edd3 7a00 	vldr	s15, [r3]
 810284e:	eeb0 0a67 	vmov.f32	s0, s15
 8102852:	f7fe fc87 	bl	8101164 <Voltage2Duty>
 8102856:	eef0 7a40 	vmov.f32	s15, s0
 810285a:	4b73      	ldr	r3, [pc, #460]	@ (8102a28 <main+0xa08>)
 810285c:	edc3 7a00 	vstr	s15, [r3]
			direction_back_wheel = Ref2Direction(u_back_wheel);
 8102860:	4b6d      	ldr	r3, [pc, #436]	@ (8102a18 <main+0x9f8>)
 8102862:	edd3 7a00 	vldr	s15, [r3]
 8102866:	eeb0 0a67 	vmov.f32	s0, s15
 810286a:	f7fe fcbd 	bl	81011e8 <Ref2Direction>
 810286e:	4603      	mov	r3, r0
 8102870:	461a      	mov	r2, r3
 8102872:	4b6e      	ldr	r3, [pc, #440]	@ (8102a2c <main+0xa0c>)
 8102874:	601a      	str	r2, [r3, #0]
			set_PWM_and_dir_back_wheel(duty_back_wheel,
 8102876:	4b6c      	ldr	r3, [pc, #432]	@ (8102a28 <main+0xa08>)
 8102878:	edd3 7a00 	vldr	s15, [r3]
 810287c:	4b6b      	ldr	r3, [pc, #428]	@ (8102a2c <main+0xa0c>)
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	b2db      	uxtb	r3, r3
 8102882:	4618      	mov	r0, r3
 8102884:	eeb0 0a67 	vmov.f32	s0, s15
 8102888:	f7fe fcc6 	bl	8101218 <set_PWM_and_dir_back_wheel>

			//#####################################
			//##          PID YAW RATE		     ##
			//#####################################
			//******************************
			desired_yaw_rate = 0;
 810288c:	4b68      	ldr	r3, [pc, #416]	@ (8102a30 <main+0xa10>)
 810288e:	f04f 0200 	mov.w	r2, #0
 8102892:	601a      	str	r2, [r3, #0]
			desired_roll = PID_controller(&pid_yaw_rate, yaw_rate,
 8102894:	4b67      	ldr	r3, [pc, #412]	@ (8102a34 <main+0xa14>)
 8102896:	edd3 7a00 	vldr	s15, [r3]
 810289a:	4b65      	ldr	r3, [pc, #404]	@ (8102a30 <main+0xa10>)
 810289c:	ed93 7a00 	vldr	s14, [r3]
 81028a0:	eef0 0a47 	vmov.f32	s1, s14
 81028a4:	eeb0 0a67 	vmov.f32	s0, s15
 81028a8:	4863      	ldr	r0, [pc, #396]	@ (8102a38 <main+0xa18>)
 81028aa:	f7fe fd67 	bl	810137c <PID_controller>
 81028ae:	eef0 7a40 	vmov.f32	s15, s0
 81028b2:	4b62      	ldr	r3, [pc, #392]	@ (8102a3c <main+0xa1c>)
 81028b4:	edc3 7a00 	vstr	s15, [r3]
			//#####################################

			//******************************
			//prima di usare l'encoder

			desired_roll = 0; //l'angolo di equilibrio sono 2 gradi
 81028b8:	4b60      	ldr	r3, [pc, #384]	@ (8102a3c <main+0xa1c>)
 81028ba:	f04f 0200 	mov.w	r2, #0
 81028be:	601a      	str	r2, [r3, #0]
			desired_torque = PID_controller(&pid_roll, roll, desired_roll);
 81028c0:	4b5f      	ldr	r3, [pc, #380]	@ (8102a40 <main+0xa20>)
 81028c2:	edd3 7a00 	vldr	s15, [r3]
 81028c6:	4b5d      	ldr	r3, [pc, #372]	@ (8102a3c <main+0xa1c>)
 81028c8:	ed93 7a00 	vldr	s14, [r3]
 81028cc:	eef0 0a47 	vmov.f32	s1, s14
 81028d0:	eeb0 0a67 	vmov.f32	s0, s15
 81028d4:	485b      	ldr	r0, [pc, #364]	@ (8102a44 <main+0xa24>)
 81028d6:	f7fe fd51 	bl	810137c <PID_controller>
 81028da:	eef0 7a40 	vmov.f32	s15, s0
 81028de:	4b5a      	ldr	r3, [pc, #360]	@ (8102a48 <main+0xa28>)
 81028e0:	edc3 7a00 	vstr	s15, [r3]
			//******************************

			//encoder per ruota anteriore
			//ottengo i counts dell'encoder
			counts_steer = (double) TIM8->CNT - (TIM8->ARR) / 2; //credo cosi hai sia i conteggi negativi che positivi
 81028e4:	4b59      	ldr	r3, [pc, #356]	@ (8102a4c <main+0xa2c>)
 81028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81028e8:	4618      	mov	r0, r3
 81028ea:	f7fd fe93 	bl	8100614 <__aeabi_ui2d>
 81028ee:	4604      	mov	r4, r0
 81028f0:	460d      	mov	r5, r1
 81028f2:	4b56      	ldr	r3, [pc, #344]	@ (8102a4c <main+0xa2c>)
 81028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028f6:	085b      	lsrs	r3, r3, #1
 81028f8:	4618      	mov	r0, r3
 81028fa:	f7fd fe8b 	bl	8100614 <__aeabi_ui2d>
 81028fe:	4602      	mov	r2, r0
 8102900:	460b      	mov	r3, r1
 8102902:	4620      	mov	r0, r4
 8102904:	4629      	mov	r1, r5
 8102906:	f7fd fd47 	bl	8100398 <__aeabi_dsub>
 810290a:	4602      	mov	r2, r0
 810290c:	460b      	mov	r3, r1
 810290e:	4610      	mov	r0, r2
 8102910:	4619      	mov	r1, r3
 8102912:	f7fe f9f1 	bl	8100cf8 <__aeabi_d2f>
 8102916:	4603      	mov	r3, r0
 8102918:	4a4d      	ldr	r2, [pc, #308]	@ (8102a50 <main+0xa30>)
 810291a:	6013      	str	r3, [r2, #0]
			TIM8->CNT = (TIM8->ARR) / 2;
 810291c:	4b4b      	ldr	r3, [pc, #300]	@ (8102a4c <main+0xa2c>)
 810291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102920:	4a4a      	ldr	r2, [pc, #296]	@ (8102a4c <main+0xa2c>)
 8102922:	085b      	lsrs	r3, r3, #1
 8102924:	6253      	str	r3, [r2, #36]	@ 0x24
			//calcolo l'angolo dello sterzo
			delta_angle_degree_steer = (counts_steer * 360)
 8102926:	4b4a      	ldr	r3, [pc, #296]	@ (8102a50 <main+0xa30>)
 8102928:	edd3 7a00 	vldr	s15, [r3]
 810292c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8102a54 <main+0xa34>
 8102930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102934:	ee17 0a90 	vmov	r0, s15
 8102938:	f7fd fe8e 	bl	8100658 <__aeabi_f2d>
					/ (ppr * gear_ratio * encoder_resolution);
 810293c:	a326      	add	r3, pc, #152	@ (adr r3, 81029d8 <main+0x9b8>)
 810293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102942:	f7fe f80b 	bl	810095c <__aeabi_ddiv>
 8102946:	4602      	mov	r2, r0
 8102948:	460b      	mov	r3, r1
 810294a:	4610      	mov	r0, r2
 810294c:	4619      	mov	r1, r3
 810294e:	f7fe f9d3 	bl	8100cf8 <__aeabi_d2f>
 8102952:	4603      	mov	r3, r0
			delta_angle_degree_steer = (counts_steer * 360)
 8102954:	4a40      	ldr	r2, [pc, #256]	@ (8102a58 <main+0xa38>)
 8102956:	6013      	str	r3, [r2, #0]

			angle_steer = angle_steer + delta_angle_degree_steer; //angolo sterzo
 8102958:	4b32      	ldr	r3, [pc, #200]	@ (8102a24 <main+0xa04>)
 810295a:	ed93 7a00 	vldr	s14, [r3]
 810295e:	4b3e      	ldr	r3, [pc, #248]	@ (8102a58 <main+0xa38>)
 8102960:	edd3 7a00 	vldr	s15, [r3]
 8102964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102968:	4b2e      	ldr	r3, [pc, #184]	@ (8102a24 <main+0xa04>)
 810296a:	edc3 7a00 	vstr	s15, [r3]
			speed_degsec_steer = delta_angle_degree_steer / dt; //velocita sterzo
 810296e:	4b3a      	ldr	r3, [pc, #232]	@ (8102a58 <main+0xa38>)
 8102970:	ed93 7a00 	vldr	s14, [r3]
 8102974:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 81029e4 <main+0x9c4>
 8102978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810297c:	4b37      	ldr	r3, [pc, #220]	@ (8102a5c <main+0xa3c>)
 810297e:	edc3 7a00 	vstr	s15, [r3]

			speed_degsec_steer_filtrata = filtro_media_mobile(speedsteernuovo,
 8102982:	4b36      	ldr	r3, [pc, #216]	@ (8102a5c <main+0xa3c>)
 8102984:	edd3 7a00 	vldr	s15, [r3]
 8102988:	221e      	movs	r2, #30
 810298a:	eeb0 0a67 	vmov.f32	s0, s15
 810298e:	4934      	ldr	r1, [pc, #208]	@ (8102a60 <main+0xa40>)
 8102990:	4834      	ldr	r0, [pc, #208]	@ (8102a64 <main+0xa44>)
 8102992:	f7ff faeb 	bl	8101f6c <filtro_media_mobile>
 8102996:	eef0 7a40 	vmov.f32	s15, s0
 810299a:	4b33      	ldr	r3, [pc, #204]	@ (8102a68 <main+0xa48>)
 810299c:	edc3 7a00 	vstr	s15, [r3]
					speedsteervecchio, speed_degsec_steer, 30);
			angolo_sterzo += speed_degsec_steer_filtrata * dt;
 81029a0:	4b31      	ldr	r3, [pc, #196]	@ (8102a68 <main+0xa48>)
 81029a2:	edd3 7a00 	vldr	s15, [r3]
 81029a6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 81029e4 <main+0x9c4>
 81029aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 81029ae:	4b2f      	ldr	r3, [pc, #188]	@ (8102a6c <main+0xa4c>)
 81029b0:	edd3 7a00 	vldr	s15, [r3]
 81029b4:	e05c      	b.n	8102a70 <main+0xa50>
 81029b6:	bf00      	nop
 81029b8:	9fbe76c9 	.word	0x9fbe76c9
 81029bc:	3fad2f1a 	.word	0x3fad2f1a
 81029c0:	6a7ef9db 	.word	0x6a7ef9db
 81029c4:	3fa374bc 	.word	0x3fa374bc
 81029c8:	51eb851f 	.word	0x51eb851f
 81029cc:	40091eb8 	.word	0x40091eb8
 81029d0:	70a3d70a 	.word	0x70a3d70a
 81029d4:	3fc70a3d 	.word	0x3fc70a3d
 81029d8:	66666666 	.word	0x66666666
 81029dc:	40ff8146 	.word	0x40ff8146
 81029e0:	100087f0 	.word	0x100087f0
 81029e4:	3c23d70a 	.word	0x3c23d70a
 81029e8:	100087f8 	.word	0x100087f8
 81029ec:	100087f4 	.word	0x100087f4
 81029f0:	100089bc 	.word	0x100089bc
 81029f4:	10008944 	.word	0x10008944
 81029f8:	10008a34 	.word	0x10008a34
 81029fc:	1000881c 	.word	0x1000881c
 8102a00:	43340000 	.word	0x43340000
 8102a04:	10008800 	.word	0x10008800
 8102a08:	10008820 	.word	0x10008820
 8102a0c:	100087fc 	.word	0x100087fc
 8102a10:	10008804 	.word	0x10008804
 8102a14:	10008750 	.word	0x10008750
 8102a18:	10008808 	.word	0x10008808
 8102a1c:	10008818 	.word	0x10008818
 8102a20:	10008a6c 	.word	0x10008a6c
 8102a24:	100087ec 	.word	0x100087ec
 8102a28:	1000880c 	.word	0x1000880c
 8102a2c:	10008810 	.word	0x10008810
 8102a30:	10008a3c 	.word	0x10008a3c
 8102a34:	10008a5c 	.word	0x10008a5c
 8102a38:	10008770 	.word	0x10008770
 8102a3c:	10008a40 	.word	0x10008a40
 8102a40:	10008a60 	.word	0x10008a60
 8102a44:	10008790 	.word	0x10008790
 8102a48:	10008a44 	.word	0x10008a44
 8102a4c:	40010400 	.word	0x40010400
 8102a50:	100087e4 	.word	0x100087e4
 8102a54:	43b40000 	.word	0x43b40000
 8102a58:	100087e8 	.word	0x100087e8
 8102a5c:	10008814 	.word	0x10008814
 8102a60:	100088c8 	.word	0x100088c8
 8102a64:	10008850 	.word	0x10008850
 8102a68:	1000884c 	.word	0x1000884c
 8102a6c:	10008940 	.word	0x10008940
 8102a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102a74:	4bb4      	ldr	r3, [pc, #720]	@ (8102d48 <main+0xd28>)
 8102a76:	edc3 7a00 	vstr	s15, [r3]
			//##         LOW-PASS FILTER	   	   ##
			//#####################################
			//******************************
			//filtro passa basso 1/s+1 discretizzato con Matlab

			desired_filtered_torque = 0.009516 * old_desired_filtered_torque
 8102a7a:	4bb4      	ldr	r3, [pc, #720]	@ (8102d4c <main+0xd2c>)
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	4618      	mov	r0, r3
 8102a80:	f7fd fdea 	bl	8100658 <__aeabi_f2d>
 8102a84:	a3a6      	add	r3, pc, #664	@ (adr r3, 8102d20 <main+0xd00>)
 8102a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a8a:	f7fd fe3d 	bl	8100708 <__aeabi_dmul>
 8102a8e:	4602      	mov	r2, r0
 8102a90:	460b      	mov	r3, r1
 8102a92:	4614      	mov	r4, r2
 8102a94:	461d      	mov	r5, r3
					+ 0.9048 * old_desired_torque; //questo è quello del prof
 8102a96:	4bae      	ldr	r3, [pc, #696]	@ (8102d50 <main+0xd30>)
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	4618      	mov	r0, r3
 8102a9c:	f7fd fddc 	bl	8100658 <__aeabi_f2d>
 8102aa0:	a3a1      	add	r3, pc, #644	@ (adr r3, 8102d28 <main+0xd08>)
 8102aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102aa6:	f7fd fe2f 	bl	8100708 <__aeabi_dmul>
 8102aaa:	4602      	mov	r2, r0
 8102aac:	460b      	mov	r3, r1
 8102aae:	4620      	mov	r0, r4
 8102ab0:	4629      	mov	r1, r5
 8102ab2:	f7fd fc73 	bl	810039c <__adddf3>
 8102ab6:	4602      	mov	r2, r0
 8102ab8:	460b      	mov	r3, r1
 8102aba:	4610      	mov	r0, r2
 8102abc:	4619      	mov	r1, r3
 8102abe:	f7fe f91b 	bl	8100cf8 <__aeabi_d2f>
 8102ac2:	4603      	mov	r3, r0
			desired_filtered_torque = 0.009516 * old_desired_filtered_torque
 8102ac4:	4aa3      	ldr	r2, [pc, #652]	@ (8102d54 <main+0xd34>)
 8102ac6:	6013      	str	r3, [r2, #0]
			old_desired_torque = desired_torque;
 8102ac8:	4ba3      	ldr	r3, [pc, #652]	@ (8102d58 <main+0xd38>)
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	4aa0      	ldr	r2, [pc, #640]	@ (8102d50 <main+0xd30>)
 8102ace:	6013      	str	r3, [r2, #0]
			old_desired_filtered_torque = desired_filtered_torque;
 8102ad0:	4ba0      	ldr	r3, [pc, #640]	@ (8102d54 <main+0xd34>)
 8102ad2:	681b      	ldr	r3, [r3, #0]
 8102ad4:	4a9d      	ldr	r2, [pc, #628]	@ (8102d4c <main+0xd2c>)
 8102ad6:	6013      	str	r3, [r2, #0]


			desired_filtered_torque = desired_torque;
 8102ad8:	4b9f      	ldr	r3, [pc, #636]	@ (8102d58 <main+0xd38>)
 8102ada:	681b      	ldr	r3, [r3, #0]
 8102adc:	4a9d      	ldr	r2, [pc, #628]	@ (8102d54 <main+0xd34>)
 8102ade:	6013      	str	r3, [r2, #0]
			//#####################################
			//##            STERZO			     ##
			//#####################################
			//******************************
			//Calcolo valore corrente
			HAL_ADC_Start(&hadc1);
 8102ae0:	489e      	ldr	r0, [pc, #632]	@ (8102d5c <main+0xd3c>)
 8102ae2:	f002 fa25 	bl	8104f30 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, timeout);
 8102ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8102d60 <main+0xd40>)
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	4619      	mov	r1, r3
 8102aec:	489b      	ldr	r0, [pc, #620]	@ (8102d5c <main+0xd3c>)
 8102aee:	f002 fb1d 	bl	810512c <HAL_ADC_PollForConversion>
			CountValue = HAL_ADC_GetValue(&hadc1);
 8102af2:	489a      	ldr	r0, [pc, #616]	@ (8102d5c <main+0xd3c>)
 8102af4:	f002 fc0e 	bl	8105314 <HAL_ADC_GetValue>
 8102af8:	ee07 0a90 	vmov	s15, r0
 8102afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b00:	4b98      	ldr	r3, [pc, #608]	@ (8102d64 <main+0xd44>)
 8102b02:	edc3 7a00 	vstr	s15, [r3]
			volt = ((float) CountValue) * Vref / (resolution);
 8102b06:	4b97      	ldr	r3, [pc, #604]	@ (8102d64 <main+0xd44>)
 8102b08:	ed93 7a00 	vldr	s14, [r3]
 8102b0c:	4b96      	ldr	r3, [pc, #600]	@ (8102d68 <main+0xd48>)
 8102b0e:	edd3 7a00 	vldr	s15, [r3]
 8102b12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8102b16:	4b95      	ldr	r3, [pc, #596]	@ (8102d6c <main+0xd4c>)
 8102b18:	ed93 7a00 	vldr	s14, [r3]
 8102b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102b20:	4b93      	ldr	r3, [pc, #588]	@ (8102d70 <main+0xd50>)
 8102b22:	edc3 7a00 	vstr	s15, [r3]
			HAL_ADC_Stop(&hadc1);
 8102b26:	488d      	ldr	r0, [pc, #564]	@ (8102d5c <main+0xd3c>)
 8102b28:	f002 facc 	bl	81050c4 <HAL_ADC_Stop>
			VoltSens = (volt + D) * 1.5059;
 8102b2c:	4b90      	ldr	r3, [pc, #576]	@ (8102d70 <main+0xd50>)
 8102b2e:	ed93 7a00 	vldr	s14, [r3]
 8102b32:	4b90      	ldr	r3, [pc, #576]	@ (8102d74 <main+0xd54>)
 8102b34:	edd3 7a00 	vldr	s15, [r3]
 8102b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102b3c:	ee17 0a90 	vmov	r0, s15
 8102b40:	f7fd fd8a 	bl	8100658 <__aeabi_f2d>
 8102b44:	a37a      	add	r3, pc, #488	@ (adr r3, 8102d30 <main+0xd10>)
 8102b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b4a:	f7fd fddd 	bl	8100708 <__aeabi_dmul>
 8102b4e:	4602      	mov	r2, r0
 8102b50:	460b      	mov	r3, r1
 8102b52:	4610      	mov	r0, r2
 8102b54:	4619      	mov	r1, r3
 8102b56:	f7fe f8cf 	bl	8100cf8 <__aeabi_d2f>
 8102b5a:	4603      	mov	r3, r0
 8102b5c:	4a86      	ldr	r2, [pc, #536]	@ (8102d78 <main+0xd58>)
 8102b5e:	6013      	str	r3, [r2, #0]
			corrente_non_filtrata = voltToAmpere(VoltSens, a, b);
 8102b60:	4b85      	ldr	r3, [pc, #532]	@ (8102d78 <main+0xd58>)
 8102b62:	edd3 7a00 	vldr	s15, [r3]
 8102b66:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8102d7c <main+0xd5c>
 8102b6a:	4b85      	ldr	r3, [pc, #532]	@ (8102d80 <main+0xd60>)
 8102b6c:	ed93 7a00 	vldr	s14, [r3]
 8102b70:	eeb0 1a47 	vmov.f32	s2, s14
 8102b74:	eef0 0a66 	vmov.f32	s1, s13
 8102b78:	eeb0 0a67 	vmov.f32	s0, s15
 8102b7c:	f7ff f9a7 	bl	8101ece <voltToAmpere>
 8102b80:	eef0 7a40 	vmov.f32	s15, s0
 8102b84:	4b7f      	ldr	r3, [pc, #508]	@ (8102d84 <main+0xd64>)
 8102b86:	edc3 7a00 	vstr	s15, [r3]
			 filtered_current = fir_out_arm;
			 */

			//Filtro di Kalman per corrente
			//setta i valori di input e di misura per il filtro di kalman
			z_data[0] = VoltSens; //misura del voltaggio del sensore di corrente
 8102b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8102d78 <main+0xd58>)
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8102d88 <main+0xd68>)
 8102b90:	6013      	str	r3, [r2, #0]
			z_data[1] = corrente_non_filtrata; //per non usare la misura I aggiuntiva, volendo si puo usare la formula V=IR del motore, adesso vedo come metterla
 8102b92:	4b7c      	ldr	r3, [pc, #496]	@ (8102d84 <main+0xd64>)
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	4a7c      	ldr	r2, [pc, #496]	@ (8102d88 <main+0xd68>)
 8102b98:	6053      	str	r3, [r2, #4]
			kalman_predict(&kf, &u);
 8102b9a:	497c      	ldr	r1, [pc, #496]	@ (8102d8c <main+0xd6c>)
 8102b9c:	487c      	ldr	r0, [pc, #496]	@ (8102d90 <main+0xd70>)
 8102b9e:	f7fe ff5f 	bl	8101a60 <kalman_predict>
			kalman_update(&kf, &z);
 8102ba2:	497c      	ldr	r1, [pc, #496]	@ (8102d94 <main+0xd74>)
 8102ba4:	487a      	ldr	r0, [pc, #488]	@ (8102d90 <main+0xd70>)
 8102ba6:	f7fe ffc9 	bl	8101b3c <kalman_update>
			filtered_current_kalman = x_data[1];
 8102baa:	4b7b      	ldr	r3, [pc, #492]	@ (8102d98 <main+0xd78>)
 8102bac:	685b      	ldr	r3, [r3, #4]
 8102bae:	4a7b      	ldr	r2, [pc, #492]	@ (8102d9c <main+0xd7c>)
 8102bb0:	6013      	str	r3, [r2, #0]

			//filtered_current_kalman = filtro_media_mobile(corrente_vecchia, corrente_nuova, corrente_non_filtrata, 170);
			//calcolo coppia
			torque = filtered_current_kalman * K;
 8102bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8102d9c <main+0xd7c>)
 8102bb4:	edd3 7a00 	vldr	s15, [r3]
 8102bb8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8102da0 <main+0xd80>
 8102bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102bc0:	4b78      	ldr	r3, [pc, #480]	@ (8102da4 <main+0xd84>)
 8102bc2:	edc3 7a00 	vstr	s15, [r3]
			 }


			 */

			u_front_wheel = PID_controller(&pid_steering_torque, torque,
 8102bc6:	4b77      	ldr	r3, [pc, #476]	@ (8102da4 <main+0xd84>)
 8102bc8:	edd3 7a00 	vldr	s15, [r3]
 8102bcc:	4b61      	ldr	r3, [pc, #388]	@ (8102d54 <main+0xd34>)
 8102bce:	ed93 7a00 	vldr	s14, [r3]
 8102bd2:	eef0 0a47 	vmov.f32	s1, s14
 8102bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8102bda:	4873      	ldr	r0, [pc, #460]	@ (8102da8 <main+0xd88>)
 8102bdc:	f7fe fbce 	bl	810137c <PID_controller>
 8102be0:	eef0 7a40 	vmov.f32	s15, s0
 8102be4:	4b71      	ldr	r3, [pc, #452]	@ (8102dac <main+0xd8c>)
 8102be6:	edc3 7a00 	vstr	s15, [r3]
					desired_filtered_torque);

			//controllo angolo limite manubrio
			//quando la u è negativa, l'angolo diminuisce

			 if (angle_steer <= -90) {
 8102bea:	4b71      	ldr	r3, [pc, #452]	@ (8102db0 <main+0xd90>)
 8102bec:	edd3 7a00 	vldr	s15, [r3]
 8102bf0:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8102db4 <main+0xd94>
 8102bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102bfc:	d80b      	bhi.n	8102c16 <main+0xbf6>
			 if (u_front_wheel < 0)
 8102bfe:	4b6b      	ldr	r3, [pc, #428]	@ (8102dac <main+0xd8c>)
 8102c00:	edd3 7a00 	vldr	s15, [r3]
 8102c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8102c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c0c:	d503      	bpl.n	8102c16 <main+0xbf6>
			 u_front_wheel = 0;
 8102c0e:	4b67      	ldr	r3, [pc, #412]	@ (8102dac <main+0xd8c>)
 8102c10:	f04f 0200 	mov.w	r2, #0
 8102c14:	601a      	str	r2, [r3, #0]
			 }
			 if (angle_steer >= 90) //se
 8102c16:	4b66      	ldr	r3, [pc, #408]	@ (8102db0 <main+0xd90>)
 8102c18:	edd3 7a00 	vldr	s15, [r3]
 8102c1c:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8102db8 <main+0xd98>
 8102c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8102c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c28:	db0b      	blt.n	8102c42 <main+0xc22>
			 {
			 if (u_front_wheel > 0)
 8102c2a:	4b60      	ldr	r3, [pc, #384]	@ (8102dac <main+0xd8c>)
 8102c2c:	edd3 7a00 	vldr	s15, [r3]
 8102c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8102c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c38:	dd03      	ble.n	8102c42 <main+0xc22>
			 u_front_wheel = 0;
 8102c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8102dac <main+0xd8c>)
 8102c3c:	f04f 0200 	mov.w	r2, #0
 8102c40:	601a      	str	r2, [r3, #0]

			 }



			if (sys_started <= 1) {
 8102c42:	4b5e      	ldr	r3, [pc, #376]	@ (8102dbc <main+0xd9c>)
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	2b01      	cmp	r3, #1
 8102c48:	dc0b      	bgt.n	8102c62 <main+0xc42>
				//stadio = 1000; utile se hai l'algoritmo per il segnale trapezoidale
				desired_speed_metsec = 0;
 8102c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8102dc0 <main+0xda0>)
 8102c4c:	f04f 0200 	mov.w	r2, #0
 8102c50:	601a      	str	r2, [r3, #0]
				u_back_wheel = 0;
 8102c52:	4b5c      	ldr	r3, [pc, #368]	@ (8102dc4 <main+0xda4>)
 8102c54:	f04f 0200 	mov.w	r2, #0
 8102c58:	601a      	str	r2, [r3, #0]
				u_front_wheel = 0;
 8102c5a:	4b54      	ldr	r3, [pc, #336]	@ (8102dac <main+0xd8c>)
 8102c5c:	f04f 0200 	mov.w	r2, #0
 8102c60:	601a      	str	r2, [r3, #0]

			}

			duty_front_wheel = Voltage2Duty(u_front_wheel);
 8102c62:	4b52      	ldr	r3, [pc, #328]	@ (8102dac <main+0xd8c>)
 8102c64:	edd3 7a00 	vldr	s15, [r3]
 8102c68:	eeb0 0a67 	vmov.f32	s0, s15
 8102c6c:	f7fe fa7a 	bl	8101164 <Voltage2Duty>
 8102c70:	eef0 7a40 	vmov.f32	s15, s0
 8102c74:	4b54      	ldr	r3, [pc, #336]	@ (8102dc8 <main+0xda8>)
 8102c76:	edc3 7a00 	vstr	s15, [r3]
			dir_front_wheel = Ref2Direction(u_front_wheel);
 8102c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8102dac <main+0xd8c>)
 8102c7c:	edd3 7a00 	vldr	s15, [r3]
 8102c80:	eeb0 0a67 	vmov.f32	s0, s15
 8102c84:	f7fe fab0 	bl	81011e8 <Ref2Direction>
 8102c88:	4603      	mov	r3, r0
 8102c8a:	ee07 3a90 	vmov	s15, r3
 8102c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c92:	4b4e      	ldr	r3, [pc, #312]	@ (8102dcc <main+0xdac>)
 8102c94:	edc3 7a00 	vstr	s15, [r3]
			set_PWM_and_dir_front_wheel(duty_front_wheel, dir_front_wheel);
 8102c98:	4b4b      	ldr	r3, [pc, #300]	@ (8102dc8 <main+0xda8>)
 8102c9a:	ed93 7a00 	vldr	s14, [r3]
 8102c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8102dcc <main+0xdac>)
 8102ca0:	edd3 7a00 	vldr	s15, [r3]
 8102ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ca8:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
 8102cac:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8102cb0:	b2db      	uxtb	r3, r3
 8102cb2:	4618      	mov	r0, r3
 8102cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8102cb8:	f7fe faf0 	bl	810129c <set_PWM_and_dir_front_wheel>
			 */
			//printf("\r\n");
			//******************************
			//per dati via bluetooth
			//raccolgo dati da mandare per 3 secondi
			dati.velocita = 100;
 8102cbc:	4b44      	ldr	r3, [pc, #272]	@ (8102dd0 <main+0xdb0>)
 8102cbe:	2264      	movs	r2, #100	@ 0x64
 8102cc0:	601a      	str	r2, [r3, #0]
			dati.accelerazione = 9.82;
 8102cc2:	4943      	ldr	r1, [pc, #268]	@ (8102dd0 <main+0xdb0>)
 8102cc4:	a31c      	add	r3, pc, #112	@ (adr r3, 8102d38 <main+0xd18>)
 8102cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cca:	e9c1 2302 	strd	r2, r3, [r1, #8]
			dati.tempo = 23.02;
 8102cce:	4940      	ldr	r1, [pc, #256]	@ (8102dd0 <main+0xdb0>)
 8102cd0:	a31b      	add	r3, pc, #108	@ (adr r3, 8102d40 <main+0xd20>)
 8102cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cd6:	e9c1 2304 	strd	r2, r3, [r1, #16]

			//angle_steer  = 100*sin(2*3.14/5*tempo);

			datibici.angle_steer = angle_steer;
 8102cda:	4b35      	ldr	r3, [pc, #212]	@ (8102db0 <main+0xd90>)
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	4a3d      	ldr	r2, [pc, #244]	@ (8102dd4 <main+0xdb4>)
 8102ce0:	6013      	str	r3, [r2, #0]
			datibici.desired_filtered_torque = desired_filtered_torque;
 8102ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8102d54 <main+0xd34>)
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8102dd4 <main+0xdb4>)
 8102ce8:	6053      	str	r3, [r2, #4]
			datibici.desired_speed_metsec = desired_speed_metsec;
 8102cea:	4b35      	ldr	r3, [pc, #212]	@ (8102dc0 <main+0xda0>)
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	4a39      	ldr	r2, [pc, #228]	@ (8102dd4 <main+0xdb4>)
 8102cf0:	6153      	str	r3, [r2, #20]
			datibici.roll = roll;
 8102cf2:	4b39      	ldr	r3, [pc, #228]	@ (8102dd8 <main+0xdb8>)
 8102cf4:	681b      	ldr	r3, [r3, #0]
 8102cf6:	4a37      	ldr	r2, [pc, #220]	@ (8102dd4 <main+0xdb4>)
 8102cf8:	6113      	str	r3, [r2, #16]
			datibici.speed_metsec = speed_metsec;
 8102cfa:	4b38      	ldr	r3, [pc, #224]	@ (8102ddc <main+0xdbc>)
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	4a35      	ldr	r2, [pc, #212]	@ (8102dd4 <main+0xdb4>)
 8102d00:	6193      	str	r3, [r2, #24]
			datibici.torque = torque;
 8102d02:	4b28      	ldr	r3, [pc, #160]	@ (8102da4 <main+0xd84>)
 8102d04:	681b      	ldr	r3, [r3, #0]
 8102d06:	4a33      	ldr	r2, [pc, #204]	@ (8102dd4 <main+0xdb4>)
 8102d08:	6093      	str	r3, [r2, #8]
			datibici.u_back_wheel = u_back_wheel;
 8102d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8102dc4 <main+0xda4>)
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	4a31      	ldr	r2, [pc, #196]	@ (8102dd4 <main+0xdb4>)
 8102d10:	61d3      	str	r3, [r2, #28]
			datibici.u_front_wheel = u_front_wheel;
 8102d12:	4b26      	ldr	r3, [pc, #152]	@ (8102dac <main+0xd8c>)
 8102d14:	681b      	ldr	r3, [r3, #0]
 8102d16:	4a2f      	ldr	r2, [pc, #188]	@ (8102dd4 <main+0xdb4>)
 8102d18:	60d3      	str	r3, [r2, #12]
			datibici.tempo = tempo;
 8102d1a:	4b31      	ldr	r3, [pc, #196]	@ (8102de0 <main+0xdc0>)
 8102d1c:	681b      	ldr	r3, [r3, #0]
 8102d1e:	e061      	b.n	8102de4 <main+0xdc4>
 8102d20:	e64f54d2 	.word	0xe64f54d2
 8102d24:	3f837d1f 	.word	0x3f837d1f
 8102d28:	212d7732 	.word	0x212d7732
 8102d2c:	3fecf41f 	.word	0x3fecf41f
 8102d30:	9930be0e 	.word	0x9930be0e
 8102d34:	3ff8182a 	.word	0x3ff8182a
 8102d38:	0a3d70a4 	.word	0x0a3d70a4
 8102d3c:	4023a3d7 	.word	0x4023a3d7
 8102d40:	b851eb85 	.word	0xb851eb85
 8102d44:	4037051e 	.word	0x4037051e
 8102d48:	10008940 	.word	0x10008940
 8102d4c:	10008a4c 	.word	0x10008a4c
 8102d50:	10008a50 	.word	0x10008a50
 8102d54:	10008a48 	.word	0x10008a48
 8102d58:	10008a44 	.word	0x10008a44
 8102d5c:	10000290 	.word	0x10000290
 8102d60:	10000018 	.word	0x10000018
 8102d64:	10008a54 	.word	0x10008a54
 8102d68:	10000020 	.word	0x10000020
 8102d6c:	1000001c 	.word	0x1000001c
 8102d70:	10008a58 	.word	0x10008a58
 8102d74:	10008b58 	.word	0x10008b58
 8102d78:	10008a84 	.word	0x10008a84
 8102d7c:	3f4b2fec 	.word	0x3f4b2fec
 8102d80:	10000024 	.word	0x10000024
 8102d84:	10008a38 	.word	0x10008a38
 8102d88:	10008b4c 	.word	0x10008b4c
 8102d8c:	10008b38 	.word	0x10008b38
 8102d90:	10008af0 	.word	0x10008af0
 8102d94:	10008b40 	.word	0x10008b40
 8102d98:	10008b30 	.word	0x10008b30
 8102d9c:	10008a78 	.word	0x10008a78
 8102da0:	3cbfb15b 	.word	0x3cbfb15b
 8102da4:	10008a7c 	.word	0x10008a7c
 8102da8:	100087b0 	.word	0x100087b0
 8102dac:	10008a6c 	.word	0x10008a6c
 8102db0:	100087ec 	.word	0x100087ec
 8102db4:	c2b40000 	.word	0xc2b40000
 8102db8:	42b40000 	.word	0x42b40000
 8102dbc:	10008818 	.word	0x10008818
 8102dc0:	100087fc 	.word	0x100087fc
 8102dc4:	10008808 	.word	0x10008808
 8102dc8:	10008a74 	.word	0x10008a74
 8102dcc:	10008a70 	.word	0x10008a70
 8102dd0:	10008a90 	.word	0x10008a90
 8102dd4:	10008aa8 	.word	0x10008aa8
 8102dd8:	10008a60 	.word	0x10008a60
 8102ddc:	10008800 	.word	0x10008800
 8102de0:	10008724 	.word	0x10008724
 8102de4:	4a9e      	ldr	r2, [pc, #632]	@ (8103060 <main+0x1040>)
 8102de6:	6213      	str	r3, [r2, #32]
			datibici.corrente_non_filtrata = corrente_non_filtrata;
 8102de8:	4b9e      	ldr	r3, [pc, #632]	@ (8103064 <main+0x1044>)
 8102dea:	681b      	ldr	r3, [r3, #0]
 8102dec:	4a9c      	ldr	r2, [pc, #624]	@ (8103060 <main+0x1040>)
 8102dee:	6253      	str	r3, [r2, #36]	@ 0x24
			datibici.corrente_filtrata = filtered_current_kalman;
 8102df0:	4b9d      	ldr	r3, [pc, #628]	@ (8103068 <main+0x1048>)
 8102df2:	681b      	ldr	r3, [r3, #0]
 8102df4:	4a9a      	ldr	r2, [pc, #616]	@ (8103060 <main+0x1040>)
 8102df6:	6293      	str	r3, [r2, #40]	@ 0x28
			datibici.desired_torque = desired_torque;
 8102df8:	4b9c      	ldr	r3, [pc, #624]	@ (810306c <main+0x104c>)
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	4a98      	ldr	r2, [pc, #608]	@ (8103060 <main+0x1040>)
 8102dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
			datibici.Volt_Adc = volt;
 8102e00:	4b9b      	ldr	r3, [pc, #620]	@ (8103070 <main+0x1050>)
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	4a96      	ldr	r2, [pc, #600]	@ (8103060 <main+0x1040>)
 8102e06:	6353      	str	r3, [r2, #52]	@ 0x34
			datibici.Volt_sens = VoltSens;
 8102e08:	4b9a      	ldr	r3, [pc, #616]	@ (8103074 <main+0x1054>)
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	4a94      	ldr	r2, [pc, #592]	@ (8103060 <main+0x1040>)
 8102e0e:	6393      	str	r3, [r2, #56]	@ 0x38
			datibici.costanteD = D;
 8102e10:	4b99      	ldr	r3, [pc, #612]	@ (8103078 <main+0x1058>)
 8102e12:	681b      	ldr	r3, [r3, #0]
 8102e14:	4a92      	ldr	r2, [pc, #584]	@ (8103060 <main+0x1040>)
 8102e16:	6313      	str	r3, [r2, #48]	@ 0x30

			datibici.Kp=roll_kp;
 8102e18:	4b98      	ldr	r3, [pc, #608]	@ (810307c <main+0x105c>)
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	4a90      	ldr	r2, [pc, #576]	@ (8103060 <main+0x1040>)
 8102e1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
			datibici.Ki=roll_ki;
 8102e20:	4b97      	ldr	r3, [pc, #604]	@ (8103080 <main+0x1060>)
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	4a8e      	ldr	r2, [pc, #568]	@ (8103060 <main+0x1040>)
 8102e26:	6413      	str	r3, [r2, #64]	@ 0x40
			datibici.Kd=roll_kd;
 8102e28:	4b96      	ldr	r3, [pc, #600]	@ (8103084 <main+0x1064>)
 8102e2a:	681b      	ldr	r3, [r3, #0]
 8102e2c:	4a8c      	ldr	r2, [pc, #560]	@ (8103060 <main+0x1040>)
 8102e2e:	6453      	str	r3, [r2, #68]	@ 0x44

			//printf("%f,%f\r\n", datibici.corrente_non_filtrata, datibici.corrente_filtrata);
			//printf("%f, \r\n" datibici.corrente_non_filtrata);

			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
									 datibici.angle_steer,
 8102e30:	4b8b      	ldr	r3, [pc, #556]	@ (8103060 <main+0x1040>)
 8102e32:	681b      	ldr	r3, [r3, #0]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102e34:	4618      	mov	r0, r3
 8102e36:	f7fd fc0f 	bl	8100658 <__aeabi_f2d>
 8102e3a:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
							 datibici.desired_filtered_torque,
 8102e3e:	4b88      	ldr	r3, [pc, #544]	@ (8103060 <main+0x1040>)
 8102e40:	685b      	ldr	r3, [r3, #4]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102e42:	4618      	mov	r0, r3
 8102e44:	f7fd fc08 	bl	8100658 <__aeabi_f2d>
 8102e48:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
							 datibici.desired_speed_metsec,
 8102e4c:	4b84      	ldr	r3, [pc, #528]	@ (8103060 <main+0x1040>)
 8102e4e:	695b      	ldr	r3, [r3, #20]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102e50:	4618      	mov	r0, r3
 8102e52:	f7fd fc01 	bl	8100658 <__aeabi_f2d>
 8102e56:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
							 datibici.roll,
 8102e5a:	4b81      	ldr	r3, [pc, #516]	@ (8103060 <main+0x1040>)
 8102e5c:	691b      	ldr	r3, [r3, #16]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102e5e:	4618      	mov	r0, r3
 8102e60:	f7fd fbfa 	bl	8100658 <__aeabi_f2d>
 8102e64:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
							 datibici.speed_metsec,
 8102e68:	4b7d      	ldr	r3, [pc, #500]	@ (8103060 <main+0x1040>)
 8102e6a:	699b      	ldr	r3, [r3, #24]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102e6c:	4618      	mov	r0, r3
 8102e6e:	f7fd fbf3 	bl	8100658 <__aeabi_f2d>
 8102e72:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
							 datibici.torque,
 8102e76:	4b7a      	ldr	r3, [pc, #488]	@ (8103060 <main+0x1040>)
 8102e78:	689b      	ldr	r3, [r3, #8]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102e7a:	4618      	mov	r0, r3
 8102e7c:	f7fd fbec 	bl	8100658 <__aeabi_f2d>
 8102e80:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
							 datibici.u_back_wheel,
 8102e84:	4b76      	ldr	r3, [pc, #472]	@ (8103060 <main+0x1040>)
 8102e86:	69db      	ldr	r3, [r3, #28]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102e88:	4618      	mov	r0, r3
 8102e8a:	f7fd fbe5 	bl	8100658 <__aeabi_f2d>
 8102e8e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
							 datibici.u_front_wheel,
 8102e92:	4b73      	ldr	r3, [pc, #460]	@ (8103060 <main+0x1040>)
 8102e94:	68db      	ldr	r3, [r3, #12]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102e96:	4618      	mov	r0, r3
 8102e98:	f7fd fbde 	bl	8100658 <__aeabi_f2d>
 8102e9c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
							 datibici.tempo,
 8102ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8103060 <main+0x1040>)
 8102ea2:	6a1b      	ldr	r3, [r3, #32]
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102ea4:	4618      	mov	r0, r3
 8102ea6:	f7fd fbd7 	bl	8100658 <__aeabi_f2d>
 8102eaa:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
							 datibici.corrente_non_filtrata,
 8102eae:	4b6c      	ldr	r3, [pc, #432]	@ (8103060 <main+0x1040>)
 8102eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102eb2:	4618      	mov	r0, r3
 8102eb4:	f7fd fbd0 	bl	8100658 <__aeabi_f2d>
 8102eb8:	e9c7 0108 	strd	r0, r1, [r7, #32]
							 datibici.corrente_filtrata,
 8102ebc:	4b68      	ldr	r3, [pc, #416]	@ (8103060 <main+0x1040>)
 8102ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102ec0:	4618      	mov	r0, r3
 8102ec2:	f7fd fbc9 	bl	8100658 <__aeabi_f2d>
 8102ec6:	e9c7 0106 	strd	r0, r1, [r7, #24]
			 	 	 	 	 datibici.desired_torque,
 8102eca:	4b65      	ldr	r3, [pc, #404]	@ (8103060 <main+0x1040>)
 8102ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102ece:	4618      	mov	r0, r3
 8102ed0:	f7fd fbc2 	bl	8100658 <__aeabi_f2d>
 8102ed4:	e9c7 0104 	strd	r0, r1, [r7, #16]
							 datibici.Volt_Adc,
 8102ed8:	4b61      	ldr	r3, [pc, #388]	@ (8103060 <main+0x1040>)
 8102eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102edc:	4618      	mov	r0, r3
 8102ede:	f7fd fbbb 	bl	8100658 <__aeabi_f2d>
 8102ee2:	e9c7 0102 	strd	r0, r1, [r7, #8]
							 datibici.Volt_sens,
 8102ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8103060 <main+0x1040>)
 8102ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102eea:	4618      	mov	r0, r3
 8102eec:	f7fd fbb4 	bl	8100658 <__aeabi_f2d>
 8102ef0:	e9c7 0100 	strd	r0, r1, [r7]
							 datibici.costanteD,
 8102ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8103060 <main+0x1040>)
 8102ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102ef8:	4618      	mov	r0, r3
 8102efa:	f7fd fbad 	bl	8100658 <__aeabi_f2d>
 8102efe:	4682      	mov	sl, r0
 8102f00:	468b      	mov	fp, r1
							 datibici.Kp,
 8102f02:	4b57      	ldr	r3, [pc, #348]	@ (8103060 <main+0x1040>)
 8102f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102f06:	4618      	mov	r0, r3
 8102f08:	f7fd fba6 	bl	8100658 <__aeabi_f2d>
 8102f0c:	4680      	mov	r8, r0
 8102f0e:	4689      	mov	r9, r1
			 datibici.Ki,
 8102f10:	4b53      	ldr	r3, [pc, #332]	@ (8103060 <main+0x1040>)
 8102f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102f14:	4618      	mov	r0, r3
 8102f16:	f7fd fb9f 	bl	8100658 <__aeabi_f2d>
 8102f1a:	4604      	mov	r4, r0
 8102f1c:	460d      	mov	r5, r1
			 datibici.Kd
 8102f1e:	4b50      	ldr	r3, [pc, #320]	@ (8103060 <main+0x1040>)
 8102f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			 printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8102f22:	4618      	mov	r0, r3
 8102f24:	f7fd fb98 	bl	8100658 <__aeabi_f2d>
 8102f28:	4602      	mov	r2, r0
 8102f2a:	460b      	mov	r3, r1
 8102f2c:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
 8102f30:	e9cd 451e 	strd	r4, r5, [sp, #120]	@ 0x78
 8102f34:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
 8102f38:	e9cd ab1a 	strd	sl, fp, [sp, #104]	@ 0x68
 8102f3c:	ed97 7b00 	vldr	d7, [r7]
 8102f40:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 8102f44:	ed97 7b02 	vldr	d7, [r7, #8]
 8102f48:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8102f4c:	ed97 7b04 	vldr	d7, [r7, #16]
 8102f50:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8102f54:	ed97 7b06 	vldr	d7, [r7, #24]
 8102f58:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8102f5c:	ed97 7b08 	vldr	d7, [r7, #32]
 8102f60:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8102f64:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8102f68:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8102f6c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8102f70:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8102f74:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8102f78:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8102f7c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8102f80:	ed8d 7b08 	vstr	d7, [sp, #32]
 8102f84:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8102f88:	ed8d 7b06 	vstr	d7, [sp, #24]
 8102f8c:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8102f90:	ed8d 7b04 	vstr	d7, [sp, #16]
 8102f94:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8102f98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8102f9c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8102fa0:	ed8d 7b00 	vstr	d7, [sp]
 8102fa4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8102fa8:	4837      	ldr	r0, [pc, #220]	@ (8103088 <main+0x1068>)
 8102faa:	f00d f9eb 	bl	8110384 <iprintf>

			 );

			if (trasmissione_attiva == 1) {
 8102fae:	4b37      	ldr	r3, [pc, #220]	@ (810308c <main+0x106c>)
 8102fb0:	781b      	ldrb	r3, [r3, #0]
 8102fb2:	2b01      	cmp	r3, #1
 8102fb4:	f47f aa2f 	bne.w	8102416 <main+0x3f6>
				//dati bicicletta

				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fb8:	4b35      	ldr	r3, [pc, #212]	@ (8103090 <main+0x1070>)
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	4a35      	ldr	r2, [pc, #212]	@ (8103094 <main+0x1074>)
 8102fbe:	189e      	adds	r6, r3, r2
						"%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",
						datibici.angle_steer, datibici.desired_filtered_torque,
 8102fc0:	4b27      	ldr	r3, [pc, #156]	@ (8103060 <main+0x1040>)
 8102fc2:	681b      	ldr	r3, [r3, #0]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fc4:	4618      	mov	r0, r3
 8102fc6:	f7fd fb47 	bl	8100658 <__aeabi_f2d>
 8102fca:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
						datibici.angle_steer, datibici.desired_filtered_torque,
 8102fce:	4b24      	ldr	r3, [pc, #144]	@ (8103060 <main+0x1040>)
 8102fd0:	685b      	ldr	r3, [r3, #4]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fd2:	4618      	mov	r0, r3
 8102fd4:	f7fd fb40 	bl	8100658 <__aeabi_f2d>
 8102fd8:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
						datibici.desired_speed_metsec, datibici.roll,
 8102fdc:	4b20      	ldr	r3, [pc, #128]	@ (8103060 <main+0x1040>)
 8102fde:	695b      	ldr	r3, [r3, #20]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fe0:	4618      	mov	r0, r3
 8102fe2:	f7fd fb39 	bl	8100658 <__aeabi_f2d>
 8102fe6:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
						datibici.desired_speed_metsec, datibici.roll,
 8102fea:	4b1d      	ldr	r3, [pc, #116]	@ (8103060 <main+0x1040>)
 8102fec:	691b      	ldr	r3, [r3, #16]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102fee:	4618      	mov	r0, r3
 8102ff0:	f7fd fb32 	bl	8100658 <__aeabi_f2d>
 8102ff4:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
						datibici.speed_metsec, datibici.torque,
 8102ff8:	4b19      	ldr	r3, [pc, #100]	@ (8103060 <main+0x1040>)
 8102ffa:	699b      	ldr	r3, [r3, #24]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8102ffc:	4618      	mov	r0, r3
 8102ffe:	f7fd fb2b 	bl	8100658 <__aeabi_f2d>
 8103002:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
						datibici.speed_metsec, datibici.torque,
 8103006:	4b16      	ldr	r3, [pc, #88]	@ (8103060 <main+0x1040>)
 8103008:	689b      	ldr	r3, [r3, #8]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 810300a:	4618      	mov	r0, r3
 810300c:	f7fd fb24 	bl	8100658 <__aeabi_f2d>
 8103010:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
						datibici.u_back_wheel, datibici.u_front_wheel,
 8103014:	4b12      	ldr	r3, [pc, #72]	@ (8103060 <main+0x1040>)
 8103016:	69db      	ldr	r3, [r3, #28]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103018:	4618      	mov	r0, r3
 810301a:	f7fd fb1d 	bl	8100658 <__aeabi_f2d>
 810301e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
						datibici.u_back_wheel, datibici.u_front_wheel,
 8103022:	4b0f      	ldr	r3, [pc, #60]	@ (8103060 <main+0x1040>)
 8103024:	68db      	ldr	r3, [r3, #12]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103026:	4618      	mov	r0, r3
 8103028:	f7fd fb16 	bl	8100658 <__aeabi_f2d>
 810302c:	4682      	mov	sl, r0
 810302e:	468b      	mov	fp, r1
						datibici.tempo, datibici.corrente_non_filtrata,
 8103030:	4b0b      	ldr	r3, [pc, #44]	@ (8103060 <main+0x1040>)
 8103032:	6a1b      	ldr	r3, [r3, #32]
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103034:	4618      	mov	r0, r3
 8103036:	f7fd fb0f 	bl	8100658 <__aeabi_f2d>
 810303a:	4680      	mov	r8, r0
 810303c:	4689      	mov	r9, r1
						datibici.tempo, datibici.corrente_non_filtrata,
 810303e:	4b08      	ldr	r3, [pc, #32]	@ (8103060 <main+0x1040>)
 8103040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103042:	4618      	mov	r0, r3
 8103044:	f7fd fb08 	bl	8100658 <__aeabi_f2d>
 8103048:	4604      	mov	r4, r0
 810304a:	460d      	mov	r5, r1
						datibici.corrente_filtrata);
 810304c:	4b04      	ldr	r3, [pc, #16]	@ (8103060 <main+0x1040>)
 810304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
				int bytesWritten = sprintf(&bufferDati[indiceBuffer],
 8103050:	4618      	mov	r0, r3
 8103052:	f7fd fb01 	bl	8100658 <__aeabi_f2d>
 8103056:	4602      	mov	r2, r0
 8103058:	460b      	mov	r3, r1
 810305a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 810305e:	e01b      	b.n	8103098 <main+0x1078>
 8103060:	10008aa8 	.word	0x10008aa8
 8103064:	10008a38 	.word	0x10008a38
 8103068:	10008a78 	.word	0x10008a78
 810306c:	10008a44 	.word	0x10008a44
 8103070:	10008a58 	.word	0x10008a58
 8103074:	10008a84 	.word	0x10008a84
 8103078:	10008b58 	.word	0x10008b58
 810307c:	100087d4 	.word	0x100087d4
 8103080:	100087d8 	.word	0x100087d8
 8103084:	100087dc 	.word	0x100087dc
 8103088:	08113c5c 	.word	0x08113c5c
 810308c:	10008a89 	.word	0x10008a89
 8103090:	10008720 	.word	0x10008720
 8103094:	10000638 	.word	0x10000638
 8103098:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 810309c:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 81030a0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 81030a4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 81030a8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 81030ac:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 81030b0:	ed8d 7b08 	vstr	d7, [sp, #32]
 81030b4:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 81030b8:	ed8d 7b06 	vstr	d7, [sp, #24]
 81030bc:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 81030c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 81030c4:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 81030c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 81030cc:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 81030d0:	ed8d 7b00 	vstr	d7, [sp]
 81030d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 81030d8:	4907      	ldr	r1, [pc, #28]	@ (81030f8 <main+0x10d8>)
 81030da:	4630      	mov	r0, r6
 81030dc:	f00d f964 	bl	81103a8 <siprintf>
 81030e0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
				indiceBuffer += bytesWritten;
 81030e4:	4b05      	ldr	r3, [pc, #20]	@ (81030fc <main+0x10dc>)
 81030e6:	681a      	ldr	r2, [r3, #0]
 81030e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 81030ec:	4413      	add	r3, r2
 81030ee:	4a03      	ldr	r2, [pc, #12]	@ (81030fc <main+0x10dc>)
 81030f0:	6013      	str	r3, [r2, #0]
		if (flag_Tc == 1) {
 81030f2:	f7ff b990 	b.w	8102416 <main+0x3f6>
 81030f6:	bf00      	nop
 81030f8:	08113c94 	.word	0x08113c94
 81030fc:	10008720 	.word	0x10008720

08103100 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8103100:	b580      	push	{r7, lr}
 8103102:	b08a      	sub	sp, #40	@ 0x28
 8103104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8103106:	f107 031c 	add.w	r3, r7, #28
 810310a:	2200      	movs	r2, #0
 810310c:	601a      	str	r2, [r3, #0]
 810310e:	605a      	str	r2, [r3, #4]
 8103110:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8103112:	463b      	mov	r3, r7
 8103114:	2200      	movs	r2, #0
 8103116:	601a      	str	r2, [r3, #0]
 8103118:	605a      	str	r2, [r3, #4]
 810311a:	609a      	str	r2, [r3, #8]
 810311c:	60da      	str	r2, [r3, #12]
 810311e:	611a      	str	r2, [r3, #16]
 8103120:	615a      	str	r2, [r3, #20]
 8103122:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8103124:	4b36      	ldr	r3, [pc, #216]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103126:	4a37      	ldr	r2, [pc, #220]	@ (8103204 <MX_ADC1_Init+0x104>)
 8103128:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810312a:	4b35      	ldr	r3, [pc, #212]	@ (8103200 <MX_ADC1_Init+0x100>)
 810312c:	2200      	movs	r2, #0
 810312e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8103130:	4b33      	ldr	r3, [pc, #204]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103132:	2200      	movs	r2, #0
 8103134:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8103136:	4b32      	ldr	r3, [pc, #200]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103138:	2200      	movs	r2, #0
 810313a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810313c:	4b30      	ldr	r3, [pc, #192]	@ (8103200 <MX_ADC1_Init+0x100>)
 810313e:	2204      	movs	r2, #4
 8103140:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8103142:	4b2f      	ldr	r3, [pc, #188]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103144:	2200      	movs	r2, #0
 8103146:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8103148:	4b2d      	ldr	r3, [pc, #180]	@ (8103200 <MX_ADC1_Init+0x100>)
 810314a:	2200      	movs	r2, #0
 810314c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810314e:	4b2c      	ldr	r3, [pc, #176]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103150:	2201      	movs	r2, #1
 8103152:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8103154:	4b2a      	ldr	r3, [pc, #168]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103156:	2200      	movs	r2, #0
 8103158:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 810315a:	4b29      	ldr	r3, [pc, #164]	@ (8103200 <MX_ADC1_Init+0x100>)
 810315c:	2200      	movs	r2, #0
 810315e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8103160:	4b27      	ldr	r3, [pc, #156]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103162:	2200      	movs	r2, #0
 8103164:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8103166:	4b26      	ldr	r3, [pc, #152]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103168:	2200      	movs	r2, #0
 810316a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810316c:	4b24      	ldr	r3, [pc, #144]	@ (8103200 <MX_ADC1_Init+0x100>)
 810316e:	2200      	movs	r2, #0
 8103170:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8103172:	4b23      	ldr	r3, [pc, #140]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103174:	2200      	movs	r2, #0
 8103176:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8103178:	4b21      	ldr	r3, [pc, #132]	@ (8103200 <MX_ADC1_Init+0x100>)
 810317a:	2201      	movs	r2, #1
 810317c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1024;
 8103180:	4b1f      	ldr	r3, [pc, #124]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8103186:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8103188:	4b1d      	ldr	r3, [pc, #116]	@ (8103200 <MX_ADC1_Init+0x100>)
 810318a:	2200      	movs	r2, #0
 810318c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 810318e:	4b1c      	ldr	r3, [pc, #112]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103190:	2200      	movs	r2, #0
 8103192:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8103194:	4b1a      	ldr	r3, [pc, #104]	@ (8103200 <MX_ADC1_Init+0x100>)
 8103196:	2201      	movs	r2, #1
 8103198:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810319a:	4819      	ldr	r0, [pc, #100]	@ (8103200 <MX_ADC1_Init+0x100>)
 810319c:	f001 fd26 	bl	8104bec <HAL_ADC_Init>
 81031a0:	4603      	mov	r3, r0
 81031a2:	2b00      	cmp	r3, #0
 81031a4:	d001      	beq.n	81031aa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81031a6:	f000 fda5 	bl	8103cf4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81031aa:	2300      	movs	r3, #0
 81031ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81031ae:	f107 031c 	add.w	r3, r7, #28
 81031b2:	4619      	mov	r1, r3
 81031b4:	4812      	ldr	r0, [pc, #72]	@ (8103200 <MX_ADC1_Init+0x100>)
 81031b6:	f002 feef 	bl	8105f98 <HAL_ADCEx_MultiModeConfigChannel>
 81031ba:	4603      	mov	r3, r0
 81031bc:	2b00      	cmp	r3, #0
 81031be:	d001      	beq.n	81031c4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 81031c0:	f000 fd98 	bl	8103cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 81031c4:	4b10      	ldr	r3, [pc, #64]	@ (8103208 <MX_ADC1_Init+0x108>)
 81031c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81031c8:	2306      	movs	r3, #6
 81031ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81031cc:	2300      	movs	r3, #0
 81031ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81031d0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81031d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81031d6:	2304      	movs	r3, #4
 81031d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81031da:	2300      	movs	r3, #0
 81031dc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81031de:	2300      	movs	r3, #0
 81031e0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81031e2:	463b      	mov	r3, r7
 81031e4:	4619      	mov	r1, r3
 81031e6:	4806      	ldr	r0, [pc, #24]	@ (8103200 <MX_ADC1_Init+0x100>)
 81031e8:	f002 f8a2 	bl	8105330 <HAL_ADC_ConfigChannel>
 81031ec:	4603      	mov	r3, r0
 81031ee:	2b00      	cmp	r3, #0
 81031f0:	d001      	beq.n	81031f6 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 81031f2:	f000 fd7f 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81031f6:	bf00      	nop
 81031f8:	3728      	adds	r7, #40	@ 0x28
 81031fa:	46bd      	mov	sp, r7
 81031fc:	bd80      	pop	{r7, pc}
 81031fe:	bf00      	nop
 8103200:	10000290 	.word	0x10000290
 8103204:	40022000 	.word	0x40022000
 8103208:	08600004 	.word	0x08600004

0810320c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 810320c:	b580      	push	{r7, lr}
 810320e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8103210:	4b1b      	ldr	r3, [pc, #108]	@ (8103280 <MX_I2C1_Init+0x74>)
 8103212:	4a1c      	ldr	r2, [pc, #112]	@ (8103284 <MX_I2C1_Init+0x78>)
 8103214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8103216:	4b1a      	ldr	r3, [pc, #104]	@ (8103280 <MX_I2C1_Init+0x74>)
 8103218:	4a1b      	ldr	r2, [pc, #108]	@ (8103288 <MX_I2C1_Init+0x7c>)
 810321a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810321c:	4b18      	ldr	r3, [pc, #96]	@ (8103280 <MX_I2C1_Init+0x74>)
 810321e:	2200      	movs	r2, #0
 8103220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8103222:	4b17      	ldr	r3, [pc, #92]	@ (8103280 <MX_I2C1_Init+0x74>)
 8103224:	2201      	movs	r2, #1
 8103226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8103228:	4b15      	ldr	r3, [pc, #84]	@ (8103280 <MX_I2C1_Init+0x74>)
 810322a:	2200      	movs	r2, #0
 810322c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810322e:	4b14      	ldr	r3, [pc, #80]	@ (8103280 <MX_I2C1_Init+0x74>)
 8103230:	2200      	movs	r2, #0
 8103232:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8103234:	4b12      	ldr	r3, [pc, #72]	@ (8103280 <MX_I2C1_Init+0x74>)
 8103236:	2200      	movs	r2, #0
 8103238:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810323a:	4b11      	ldr	r3, [pc, #68]	@ (8103280 <MX_I2C1_Init+0x74>)
 810323c:	2200      	movs	r2, #0
 810323e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8103240:	4b0f      	ldr	r3, [pc, #60]	@ (8103280 <MX_I2C1_Init+0x74>)
 8103242:	2200      	movs	r2, #0
 8103244:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8103246:	480e      	ldr	r0, [pc, #56]	@ (8103280 <MX_I2C1_Init+0x74>)
 8103248:	f004 f806 	bl	8107258 <HAL_I2C_Init>
 810324c:	4603      	mov	r3, r0
 810324e:	2b00      	cmp	r3, #0
 8103250:	d001      	beq.n	8103256 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8103252:	f000 fd4f 	bl	8103cf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8103256:	2100      	movs	r1, #0
 8103258:	4809      	ldr	r0, [pc, #36]	@ (8103280 <MX_I2C1_Init+0x74>)
 810325a:	f004 fd67 	bl	8107d2c <HAL_I2CEx_ConfigAnalogFilter>
 810325e:	4603      	mov	r3, r0
 8103260:	2b00      	cmp	r3, #0
 8103262:	d001      	beq.n	8103268 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8103264:	f000 fd46 	bl	8103cf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8103268:	2100      	movs	r1, #0
 810326a:	4805      	ldr	r0, [pc, #20]	@ (8103280 <MX_I2C1_Init+0x74>)
 810326c:	f004 fda9 	bl	8107dc2 <HAL_I2CEx_ConfigDigitalFilter>
 8103270:	4603      	mov	r3, r0
 8103272:	2b00      	cmp	r3, #0
 8103274:	d001      	beq.n	810327a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8103276:	f000 fd3d 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810327a:	bf00      	nop
 810327c:	bd80      	pop	{r7, pc}
 810327e:	bf00      	nop
 8103280:	100002f4 	.word	0x100002f4
 8103284:	40005400 	.word	0x40005400
 8103288:	10c0ecff 	.word	0x10c0ecff

0810328c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 810328c:	b580      	push	{r7, lr}
 810328e:	b09a      	sub	sp, #104	@ 0x68
 8103290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8103292:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8103296:	2200      	movs	r2, #0
 8103298:	601a      	str	r2, [r3, #0]
 810329a:	605a      	str	r2, [r3, #4]
 810329c:	609a      	str	r2, [r3, #8]
 810329e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81032a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 81032a4:	2200      	movs	r2, #0
 81032a6:	601a      	str	r2, [r3, #0]
 81032a8:	605a      	str	r2, [r3, #4]
 81032aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81032ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81032b0:	2200      	movs	r2, #0
 81032b2:	601a      	str	r2, [r3, #0]
 81032b4:	605a      	str	r2, [r3, #4]
 81032b6:	609a      	str	r2, [r3, #8]
 81032b8:	60da      	str	r2, [r3, #12]
 81032ba:	611a      	str	r2, [r3, #16]
 81032bc:	615a      	str	r2, [r3, #20]
 81032be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81032c0:	1d3b      	adds	r3, r7, #4
 81032c2:	222c      	movs	r2, #44	@ 0x2c
 81032c4:	2100      	movs	r1, #0
 81032c6:	4618      	mov	r0, r3
 81032c8:	f00d f966 	bl	8110598 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81032cc:	4b43      	ldr	r3, [pc, #268]	@ (81033dc <MX_TIM1_Init+0x150>)
 81032ce:	4a44      	ldr	r2, [pc, #272]	@ (81033e0 <MX_TIM1_Init+0x154>)
 81032d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 81032d2:	4b42      	ldr	r3, [pc, #264]	@ (81033dc <MX_TIM1_Init+0x150>)
 81032d4:	22c7      	movs	r2, #199	@ 0xc7
 81032d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81032d8:	4b40      	ldr	r3, [pc, #256]	@ (81033dc <MX_TIM1_Init+0x150>)
 81032da:	2200      	movs	r2, #0
 81032dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50-1;
 81032de:	4b3f      	ldr	r3, [pc, #252]	@ (81033dc <MX_TIM1_Init+0x150>)
 81032e0:	2231      	movs	r2, #49	@ 0x31
 81032e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81032e4:	4b3d      	ldr	r3, [pc, #244]	@ (81033dc <MX_TIM1_Init+0x150>)
 81032e6:	2200      	movs	r2, #0
 81032e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81032ea:	4b3c      	ldr	r3, [pc, #240]	@ (81033dc <MX_TIM1_Init+0x150>)
 81032ec:	2200      	movs	r2, #0
 81032ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81032f0:	4b3a      	ldr	r3, [pc, #232]	@ (81033dc <MX_TIM1_Init+0x150>)
 81032f2:	2200      	movs	r2, #0
 81032f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81032f6:	4839      	ldr	r0, [pc, #228]	@ (81033dc <MX_TIM1_Init+0x150>)
 81032f8:	f007 fd0e 	bl	810ad18 <HAL_TIM_Base_Init>
 81032fc:	4603      	mov	r3, r0
 81032fe:	2b00      	cmp	r3, #0
 8103300:	d001      	beq.n	8103306 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8103302:	f000 fcf7 	bl	8103cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8103306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810330a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810330c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8103310:	4619      	mov	r1, r3
 8103312:	4832      	ldr	r0, [pc, #200]	@ (81033dc <MX_TIM1_Init+0x150>)
 8103314:	f008 fa72 	bl	810b7fc <HAL_TIM_ConfigClockSource>
 8103318:	4603      	mov	r3, r0
 810331a:	2b00      	cmp	r3, #0
 810331c:	d001      	beq.n	8103322 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 810331e:	f000 fce9 	bl	8103cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8103322:	482e      	ldr	r0, [pc, #184]	@ (81033dc <MX_TIM1_Init+0x150>)
 8103324:	f007 fe38 	bl	810af98 <HAL_TIM_PWM_Init>
 8103328:	4603      	mov	r3, r0
 810332a:	2b00      	cmp	r3, #0
 810332c:	d001      	beq.n	8103332 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 810332e:	f000 fce1 	bl	8103cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103332:	2300      	movs	r3, #0
 8103334:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8103336:	2300      	movs	r3, #0
 8103338:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810333a:	2300      	movs	r3, #0
 810333c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810333e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8103342:	4619      	mov	r1, r3
 8103344:	4825      	ldr	r0, [pc, #148]	@ (81033dc <MX_TIM1_Init+0x150>)
 8103346:	f008 ffb7 	bl	810c2b8 <HAL_TIMEx_MasterConfigSynchronization>
 810334a:	4603      	mov	r3, r0
 810334c:	2b00      	cmp	r3, #0
 810334e:	d001      	beq.n	8103354 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8103350:	f000 fcd0 	bl	8103cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8103354:	2360      	movs	r3, #96	@ 0x60
 8103356:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8103358:	2300      	movs	r3, #0
 810335a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810335c:	2300      	movs	r3, #0
 810335e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8103360:	2300      	movs	r3, #0
 8103362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8103364:	2300      	movs	r3, #0
 8103366:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8103368:	2300      	movs	r3, #0
 810336a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810336c:	2300      	movs	r3, #0
 810336e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8103370:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8103374:	2200      	movs	r2, #0
 8103376:	4619      	mov	r1, r3
 8103378:	4818      	ldr	r0, [pc, #96]	@ (81033dc <MX_TIM1_Init+0x150>)
 810337a:	f008 f92b 	bl	810b5d4 <HAL_TIM_PWM_ConfigChannel>
 810337e:	4603      	mov	r3, r0
 8103380:	2b00      	cmp	r3, #0
 8103382:	d001      	beq.n	8103388 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8103384:	f000 fcb6 	bl	8103cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8103388:	2300      	movs	r3, #0
 810338a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 810338c:	2300      	movs	r3, #0
 810338e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8103390:	2300      	movs	r3, #0
 8103392:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8103394:	2300      	movs	r3, #0
 8103396:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8103398:	2300      	movs	r3, #0
 810339a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 810339c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81033a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81033a2:	2300      	movs	r3, #0
 81033a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81033a6:	2300      	movs	r3, #0
 81033a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81033aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81033ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81033b0:	2300      	movs	r3, #0
 81033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81033b4:	2300      	movs	r3, #0
 81033b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81033b8:	1d3b      	adds	r3, r7, #4
 81033ba:	4619      	mov	r1, r3
 81033bc:	4807      	ldr	r0, [pc, #28]	@ (81033dc <MX_TIM1_Init+0x150>)
 81033be:	f009 f809 	bl	810c3d4 <HAL_TIMEx_ConfigBreakDeadTime>
 81033c2:	4603      	mov	r3, r0
 81033c4:	2b00      	cmp	r3, #0
 81033c6:	d001      	beq.n	81033cc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 81033c8:	f000 fc94 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81033cc:	4803      	ldr	r0, [pc, #12]	@ (81033dc <MX_TIM1_Init+0x150>)
 81033ce:	f000 fe83 	bl	81040d8 <HAL_TIM_MspPostInit>

}
 81033d2:	bf00      	nop
 81033d4:	3768      	adds	r7, #104	@ 0x68
 81033d6:	46bd      	mov	sp, r7
 81033d8:	bd80      	pop	{r7, pc}
 81033da:	bf00      	nop
 81033dc:	10000348 	.word	0x10000348
 81033e0:	40010000 	.word	0x40010000

081033e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 81033e4:	b580      	push	{r7, lr}
 81033e6:	b088      	sub	sp, #32
 81033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81033ea:	f107 0310 	add.w	r3, r7, #16
 81033ee:	2200      	movs	r2, #0
 81033f0:	601a      	str	r2, [r3, #0]
 81033f2:	605a      	str	r2, [r3, #4]
 81033f4:	609a      	str	r2, [r3, #8]
 81033f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81033f8:	1d3b      	adds	r3, r7, #4
 81033fa:	2200      	movs	r2, #0
 81033fc:	601a      	str	r2, [r3, #0]
 81033fe:	605a      	str	r2, [r3, #4]
 8103400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8103402:	4b1e      	ldr	r3, [pc, #120]	@ (810347c <MX_TIM2_Init+0x98>)
 8103404:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8103408:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 810340a:	4b1c      	ldr	r3, [pc, #112]	@ (810347c <MX_TIM2_Init+0x98>)
 810340c:	22c7      	movs	r2, #199	@ 0xc7
 810340e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103410:	4b1a      	ldr	r3, [pc, #104]	@ (810347c <MX_TIM2_Init+0x98>)
 8103412:	2200      	movs	r2, #0
 8103414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8103416:	4b19      	ldr	r3, [pc, #100]	@ (810347c <MX_TIM2_Init+0x98>)
 8103418:	f242 720f 	movw	r2, #9999	@ 0x270f
 810341c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810341e:	4b17      	ldr	r3, [pc, #92]	@ (810347c <MX_TIM2_Init+0x98>)
 8103420:	2200      	movs	r2, #0
 8103422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103424:	4b15      	ldr	r3, [pc, #84]	@ (810347c <MX_TIM2_Init+0x98>)
 8103426:	2200      	movs	r2, #0
 8103428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 810342a:	4814      	ldr	r0, [pc, #80]	@ (810347c <MX_TIM2_Init+0x98>)
 810342c:	f007 fc74 	bl	810ad18 <HAL_TIM_Base_Init>
 8103430:	4603      	mov	r3, r0
 8103432:	2b00      	cmp	r3, #0
 8103434:	d001      	beq.n	810343a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8103436:	f000 fc5d 	bl	8103cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810343a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810343e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8103440:	f107 0310 	add.w	r3, r7, #16
 8103444:	4619      	mov	r1, r3
 8103446:	480d      	ldr	r0, [pc, #52]	@ (810347c <MX_TIM2_Init+0x98>)
 8103448:	f008 f9d8 	bl	810b7fc <HAL_TIM_ConfigClockSource>
 810344c:	4603      	mov	r3, r0
 810344e:	2b00      	cmp	r3, #0
 8103450:	d001      	beq.n	8103456 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8103452:	f000 fc4f 	bl	8103cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103456:	2300      	movs	r3, #0
 8103458:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810345a:	2300      	movs	r3, #0
 810345c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810345e:	1d3b      	adds	r3, r7, #4
 8103460:	4619      	mov	r1, r3
 8103462:	4806      	ldr	r0, [pc, #24]	@ (810347c <MX_TIM2_Init+0x98>)
 8103464:	f008 ff28 	bl	810c2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8103468:	4603      	mov	r3, r0
 810346a:	2b00      	cmp	r3, #0
 810346c:	d001      	beq.n	8103472 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 810346e:	f000 fc41 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8103472:	bf00      	nop
 8103474:	3720      	adds	r7, #32
 8103476:	46bd      	mov	sp, r7
 8103478:	bd80      	pop	{r7, pc}
 810347a:	bf00      	nop
 810347c:	10000394 	.word	0x10000394

08103480 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8103480:	b580      	push	{r7, lr}
 8103482:	b08e      	sub	sp, #56	@ 0x38
 8103484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8103486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810348a:	2200      	movs	r2, #0
 810348c:	601a      	str	r2, [r3, #0]
 810348e:	605a      	str	r2, [r3, #4]
 8103490:	609a      	str	r2, [r3, #8]
 8103492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103494:	f107 031c 	add.w	r3, r7, #28
 8103498:	2200      	movs	r2, #0
 810349a:	601a      	str	r2, [r3, #0]
 810349c:	605a      	str	r2, [r3, #4]
 810349e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81034a0:	463b      	mov	r3, r7
 81034a2:	2200      	movs	r2, #0
 81034a4:	601a      	str	r2, [r3, #0]
 81034a6:	605a      	str	r2, [r3, #4]
 81034a8:	609a      	str	r2, [r3, #8]
 81034aa:	60da      	str	r2, [r3, #12]
 81034ac:	611a      	str	r2, [r3, #16]
 81034ae:	615a      	str	r2, [r3, #20]
 81034b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81034b2:	4b2c      	ldr	r3, [pc, #176]	@ (8103564 <MX_TIM3_Init+0xe4>)
 81034b4:	4a2c      	ldr	r2, [pc, #176]	@ (8103568 <MX_TIM3_Init+0xe8>)
 81034b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 81034b8:	4b2a      	ldr	r3, [pc, #168]	@ (8103564 <MX_TIM3_Init+0xe4>)
 81034ba:	22c7      	movs	r2, #199	@ 0xc7
 81034bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81034be:	4b29      	ldr	r3, [pc, #164]	@ (8103564 <MX_TIM3_Init+0xe4>)
 81034c0:	2200      	movs	r2, #0
 81034c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 81034c4:	4b27      	ldr	r3, [pc, #156]	@ (8103564 <MX_TIM3_Init+0xe4>)
 81034c6:	2231      	movs	r2, #49	@ 0x31
 81034c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81034ca:	4b26      	ldr	r3, [pc, #152]	@ (8103564 <MX_TIM3_Init+0xe4>)
 81034cc:	2200      	movs	r2, #0
 81034ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81034d0:	4b24      	ldr	r3, [pc, #144]	@ (8103564 <MX_TIM3_Init+0xe4>)
 81034d2:	2200      	movs	r2, #0
 81034d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81034d6:	4823      	ldr	r0, [pc, #140]	@ (8103564 <MX_TIM3_Init+0xe4>)
 81034d8:	f007 fc1e 	bl	810ad18 <HAL_TIM_Base_Init>
 81034dc:	4603      	mov	r3, r0
 81034de:	2b00      	cmp	r3, #0
 81034e0:	d001      	beq.n	81034e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 81034e2:	f000 fc07 	bl	8103cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81034e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81034ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81034ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81034f0:	4619      	mov	r1, r3
 81034f2:	481c      	ldr	r0, [pc, #112]	@ (8103564 <MX_TIM3_Init+0xe4>)
 81034f4:	f008 f982 	bl	810b7fc <HAL_TIM_ConfigClockSource>
 81034f8:	4603      	mov	r3, r0
 81034fa:	2b00      	cmp	r3, #0
 81034fc:	d001      	beq.n	8103502 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 81034fe:	f000 fbf9 	bl	8103cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8103502:	4818      	ldr	r0, [pc, #96]	@ (8103564 <MX_TIM3_Init+0xe4>)
 8103504:	f007 fd48 	bl	810af98 <HAL_TIM_PWM_Init>
 8103508:	4603      	mov	r3, r0
 810350a:	2b00      	cmp	r3, #0
 810350c:	d001      	beq.n	8103512 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 810350e:	f000 fbf1 	bl	8103cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8103512:	2300      	movs	r3, #0
 8103514:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103516:	2300      	movs	r3, #0
 8103518:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810351a:	f107 031c 	add.w	r3, r7, #28
 810351e:	4619      	mov	r1, r3
 8103520:	4810      	ldr	r0, [pc, #64]	@ (8103564 <MX_TIM3_Init+0xe4>)
 8103522:	f008 fec9 	bl	810c2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8103526:	4603      	mov	r3, r0
 8103528:	2b00      	cmp	r3, #0
 810352a:	d001      	beq.n	8103530 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 810352c:	f000 fbe2 	bl	8103cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8103530:	2360      	movs	r3, #96	@ 0x60
 8103532:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8103534:	2300      	movs	r3, #0
 8103536:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8103538:	2300      	movs	r3, #0
 810353a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810353c:	2300      	movs	r3, #0
 810353e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8103540:	463b      	mov	r3, r7
 8103542:	2200      	movs	r2, #0
 8103544:	4619      	mov	r1, r3
 8103546:	4807      	ldr	r0, [pc, #28]	@ (8103564 <MX_TIM3_Init+0xe4>)
 8103548:	f008 f844 	bl	810b5d4 <HAL_TIM_PWM_ConfigChannel>
 810354c:	4603      	mov	r3, r0
 810354e:	2b00      	cmp	r3, #0
 8103550:	d001      	beq.n	8103556 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8103552:	f000 fbcf 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8103556:	4803      	ldr	r0, [pc, #12]	@ (8103564 <MX_TIM3_Init+0xe4>)
 8103558:	f000 fdbe 	bl	81040d8 <HAL_TIM_MspPostInit>

}
 810355c:	bf00      	nop
 810355e:	3738      	adds	r7, #56	@ 0x38
 8103560:	46bd      	mov	sp, r7
 8103562:	bd80      	pop	{r7, pc}
 8103564:	100003e0 	.word	0x100003e0
 8103568:	40000400 	.word	0x40000400

0810356c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 810356c:	b580      	push	{r7, lr}
 810356e:	b08c      	sub	sp, #48	@ 0x30
 8103570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8103572:	f107 030c 	add.w	r3, r7, #12
 8103576:	2224      	movs	r2, #36	@ 0x24
 8103578:	2100      	movs	r1, #0
 810357a:	4618      	mov	r0, r3
 810357c:	f00d f80c 	bl	8110598 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8103580:	463b      	mov	r3, r7
 8103582:	2200      	movs	r2, #0
 8103584:	601a      	str	r2, [r3, #0]
 8103586:	605a      	str	r2, [r3, #4]
 8103588:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 810358a:	4b21      	ldr	r3, [pc, #132]	@ (8103610 <MX_TIM4_Init+0xa4>)
 810358c:	4a21      	ldr	r2, [pc, #132]	@ (8103614 <MX_TIM4_Init+0xa8>)
 810358e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8103590:	4b1f      	ldr	r3, [pc, #124]	@ (8103610 <MX_TIM4_Init+0xa4>)
 8103592:	2200      	movs	r2, #0
 8103594:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103596:	4b1e      	ldr	r3, [pc, #120]	@ (8103610 <MX_TIM4_Init+0xa4>)
 8103598:	2200      	movs	r2, #0
 810359a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3423-1;
 810359c:	4b1c      	ldr	r3, [pc, #112]	@ (8103610 <MX_TIM4_Init+0xa4>)
 810359e:	f640 525e 	movw	r2, #3422	@ 0xd5e
 81035a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81035a4:	4b1a      	ldr	r3, [pc, #104]	@ (8103610 <MX_TIM4_Init+0xa4>)
 81035a6:	2200      	movs	r2, #0
 81035a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81035aa:	4b19      	ldr	r3, [pc, #100]	@ (8103610 <MX_TIM4_Init+0xa4>)
 81035ac:	2200      	movs	r2, #0
 81035ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81035b0:	2303      	movs	r3, #3
 81035b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81035b4:	2300      	movs	r3, #0
 81035b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81035b8:	2301      	movs	r3, #1
 81035ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81035bc:	2300      	movs	r3, #0
 81035be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 81035c0:	2300      	movs	r3, #0
 81035c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81035c4:	2300      	movs	r3, #0
 81035c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81035c8:	2301      	movs	r3, #1
 81035ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81035cc:	2300      	movs	r3, #0
 81035ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 81035d0:	2300      	movs	r3, #0
 81035d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 81035d4:	f107 030c 	add.w	r3, r7, #12
 81035d8:	4619      	mov	r1, r3
 81035da:	480d      	ldr	r0, [pc, #52]	@ (8103610 <MX_TIM4_Init+0xa4>)
 81035dc:	f007 fe4c 	bl	810b278 <HAL_TIM_Encoder_Init>
 81035e0:	4603      	mov	r3, r0
 81035e2:	2b00      	cmp	r3, #0
 81035e4:	d001      	beq.n	81035ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 81035e6:	f000 fb85 	bl	8103cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81035ea:	2300      	movs	r3, #0
 81035ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81035ee:	2300      	movs	r3, #0
 81035f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 81035f2:	463b      	mov	r3, r7
 81035f4:	4619      	mov	r1, r3
 81035f6:	4806      	ldr	r0, [pc, #24]	@ (8103610 <MX_TIM4_Init+0xa4>)
 81035f8:	f008 fe5e 	bl	810c2b8 <HAL_TIMEx_MasterConfigSynchronization>
 81035fc:	4603      	mov	r3, r0
 81035fe:	2b00      	cmp	r3, #0
 8103600:	d001      	beq.n	8103606 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8103602:	f000 fb77 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8103606:	bf00      	nop
 8103608:	3730      	adds	r7, #48	@ 0x30
 810360a:	46bd      	mov	sp, r7
 810360c:	bd80      	pop	{r7, pc}
 810360e:	bf00      	nop
 8103610:	1000042c 	.word	0x1000042c
 8103614:	40000800 	.word	0x40000800

08103618 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8103618:	b580      	push	{r7, lr}
 810361a:	b084      	sub	sp, #16
 810361c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810361e:	1d3b      	adds	r3, r7, #4
 8103620:	2200      	movs	r2, #0
 8103622:	601a      	str	r2, [r3, #0]
 8103624:	605a      	str	r2, [r3, #4]
 8103626:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8103628:	4b15      	ldr	r3, [pc, #84]	@ (8103680 <MX_TIM6_Init+0x68>)
 810362a:	4a16      	ldr	r2, [pc, #88]	@ (8103684 <MX_TIM6_Init+0x6c>)
 810362c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20000-1;
 810362e:	4b14      	ldr	r3, [pc, #80]	@ (8103680 <MX_TIM6_Init+0x68>)
 8103630:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8103634:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103636:	4b12      	ldr	r3, [pc, #72]	@ (8103680 <MX_TIM6_Init+0x68>)
 8103638:	2200      	movs	r2, #0
 810363a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 30000;
 810363c:	4b10      	ldr	r3, [pc, #64]	@ (8103680 <MX_TIM6_Init+0x68>)
 810363e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8103642:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103644:	4b0e      	ldr	r3, [pc, #56]	@ (8103680 <MX_TIM6_Init+0x68>)
 8103646:	2200      	movs	r2, #0
 8103648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 810364a:	480d      	ldr	r0, [pc, #52]	@ (8103680 <MX_TIM6_Init+0x68>)
 810364c:	f007 fb64 	bl	810ad18 <HAL_TIM_Base_Init>
 8103650:	4603      	mov	r3, r0
 8103652:	2b00      	cmp	r3, #0
 8103654:	d001      	beq.n	810365a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8103656:	f000 fb4d 	bl	8103cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810365a:	2300      	movs	r3, #0
 810365c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810365e:	2300      	movs	r3, #0
 8103660:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8103662:	1d3b      	adds	r3, r7, #4
 8103664:	4619      	mov	r1, r3
 8103666:	4806      	ldr	r0, [pc, #24]	@ (8103680 <MX_TIM6_Init+0x68>)
 8103668:	f008 fe26 	bl	810c2b8 <HAL_TIMEx_MasterConfigSynchronization>
 810366c:	4603      	mov	r3, r0
 810366e:	2b00      	cmp	r3, #0
 8103670:	d001      	beq.n	8103676 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8103672:	f000 fb3f 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8103676:	bf00      	nop
 8103678:	3710      	adds	r7, #16
 810367a:	46bd      	mov	sp, r7
 810367c:	bd80      	pop	{r7, pc}
 810367e:	bf00      	nop
 8103680:	10000478 	.word	0x10000478
 8103684:	40001000 	.word	0x40001000

08103688 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8103688:	b580      	push	{r7, lr}
 810368a:	b08c      	sub	sp, #48	@ 0x30
 810368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 810368e:	f107 030c 	add.w	r3, r7, #12
 8103692:	2224      	movs	r2, #36	@ 0x24
 8103694:	2100      	movs	r1, #0
 8103696:	4618      	mov	r0, r3
 8103698:	f00c ff7e 	bl	8110598 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810369c:	463b      	mov	r3, r7
 810369e:	2200      	movs	r2, #0
 81036a0:	601a      	str	r2, [r3, #0]
 81036a2:	605a      	str	r2, [r3, #4]
 81036a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 81036a6:	4b23      	ldr	r3, [pc, #140]	@ (8103734 <MX_TIM8_Init+0xac>)
 81036a8:	4a23      	ldr	r2, [pc, #140]	@ (8103738 <MX_TIM8_Init+0xb0>)
 81036aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 81036ac:	4b21      	ldr	r3, [pc, #132]	@ (8103734 <MX_TIM8_Init+0xac>)
 81036ae:	2200      	movs	r2, #0
 81036b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 81036b2:	4b20      	ldr	r3, [pc, #128]	@ (8103734 <MX_TIM8_Init+0xac>)
 81036b4:	2200      	movs	r2, #0
 81036b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4000-1;
 81036b8:	4b1e      	ldr	r3, [pc, #120]	@ (8103734 <MX_TIM8_Init+0xac>)
 81036ba:	f640 729f 	movw	r2, #3999	@ 0xf9f
 81036be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81036c0:	4b1c      	ldr	r3, [pc, #112]	@ (8103734 <MX_TIM8_Init+0xac>)
 81036c2:	2200      	movs	r2, #0
 81036c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 81036c6:	4b1b      	ldr	r3, [pc, #108]	@ (8103734 <MX_TIM8_Init+0xac>)
 81036c8:	2200      	movs	r2, #0
 81036ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81036cc:	4b19      	ldr	r3, [pc, #100]	@ (8103734 <MX_TIM8_Init+0xac>)
 81036ce:	2200      	movs	r2, #0
 81036d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 81036d2:	2303      	movs	r3, #3
 81036d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81036d6:	2300      	movs	r3, #0
 81036d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81036da:	2301      	movs	r3, #1
 81036dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81036de:	2300      	movs	r3, #0
 81036e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 81036e2:	230a      	movs	r3, #10
 81036e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81036e6:	2300      	movs	r3, #0
 81036e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 81036ea:	2301      	movs	r3, #1
 81036ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 81036ee:	2300      	movs	r3, #0
 81036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 81036f2:	230a      	movs	r3, #10
 81036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 81036f6:	f107 030c 	add.w	r3, r7, #12
 81036fa:	4619      	mov	r1, r3
 81036fc:	480d      	ldr	r0, [pc, #52]	@ (8103734 <MX_TIM8_Init+0xac>)
 81036fe:	f007 fdbb 	bl	810b278 <HAL_TIM_Encoder_Init>
 8103702:	4603      	mov	r3, r0
 8103704:	2b00      	cmp	r3, #0
 8103706:	d001      	beq.n	810370c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8103708:	f000 faf4 	bl	8103cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810370c:	2300      	movs	r3, #0
 810370e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8103710:	2300      	movs	r3, #0
 8103712:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8103714:	2300      	movs	r3, #0
 8103716:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8103718:	463b      	mov	r3, r7
 810371a:	4619      	mov	r1, r3
 810371c:	4805      	ldr	r0, [pc, #20]	@ (8103734 <MX_TIM8_Init+0xac>)
 810371e:	f008 fdcb 	bl	810c2b8 <HAL_TIMEx_MasterConfigSynchronization>
 8103722:	4603      	mov	r3, r0
 8103724:	2b00      	cmp	r3, #0
 8103726:	d001      	beq.n	810372c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8103728:	f000 fae4 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 810372c:	bf00      	nop
 810372e:	3730      	adds	r7, #48	@ 0x30
 8103730:	46bd      	mov	sp, r7
 8103732:	bd80      	pop	{r7, pc}
 8103734:	100004c4 	.word	0x100004c4
 8103738:	40010400 	.word	0x40010400

0810373c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 810373c:	b580      	push	{r7, lr}
 810373e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8103740:	4b22      	ldr	r3, [pc, #136]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103742:	4a23      	ldr	r2, [pc, #140]	@ (81037d0 <MX_USART2_UART_Init+0x94>)
 8103744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8103746:	4b21      	ldr	r3, [pc, #132]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 810374c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 810374e:	4b1f      	ldr	r3, [pc, #124]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103750:	2200      	movs	r2, #0
 8103752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8103754:	4b1d      	ldr	r3, [pc, #116]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103756:	2200      	movs	r2, #0
 8103758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 810375a:	4b1c      	ldr	r3, [pc, #112]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 810375c:	2200      	movs	r2, #0
 810375e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8103760:	4b1a      	ldr	r3, [pc, #104]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103762:	220c      	movs	r2, #12
 8103764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103766:	4b19      	ldr	r3, [pc, #100]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103768:	2200      	movs	r2, #0
 810376a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 810376c:	4b17      	ldr	r3, [pc, #92]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 810376e:	2200      	movs	r2, #0
 8103770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103772:	4b16      	ldr	r3, [pc, #88]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103774:	2200      	movs	r2, #0
 8103776:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103778:	4b14      	ldr	r3, [pc, #80]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 810377a:	2200      	movs	r2, #0
 810377c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810377e:	4b13      	ldr	r3, [pc, #76]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103780:	2200      	movs	r2, #0
 8103782:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8103784:	4811      	ldr	r0, [pc, #68]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103786:	f008 fec1 	bl	810c50c <HAL_UART_Init>
 810378a:	4603      	mov	r3, r0
 810378c:	2b00      	cmp	r3, #0
 810378e:	d001      	beq.n	8103794 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8103790:	f000 fab0 	bl	8103cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103794:	2100      	movs	r1, #0
 8103796:	480d      	ldr	r0, [pc, #52]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 8103798:	f00b fae3 	bl	810ed62 <HAL_UARTEx_SetTxFifoThreshold>
 810379c:	4603      	mov	r3, r0
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d001      	beq.n	81037a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 81037a2:	f000 faa7 	bl	8103cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81037a6:	2100      	movs	r1, #0
 81037a8:	4808      	ldr	r0, [pc, #32]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 81037aa:	f00b fb18 	bl	810edde <HAL_UARTEx_SetRxFifoThreshold>
 81037ae:	4603      	mov	r3, r0
 81037b0:	2b00      	cmp	r3, #0
 81037b2:	d001      	beq.n	81037b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 81037b4:	f000 fa9e 	bl	8103cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 81037b8:	4804      	ldr	r0, [pc, #16]	@ (81037cc <MX_USART2_UART_Init+0x90>)
 81037ba:	f00b fa99 	bl	810ecf0 <HAL_UARTEx_DisableFifoMode>
 81037be:	4603      	mov	r3, r0
 81037c0:	2b00      	cmp	r3, #0
 81037c2:	d001      	beq.n	81037c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 81037c4:	f000 fa96 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 81037c8:	bf00      	nop
 81037ca:	bd80      	pop	{r7, pc}
 81037cc:	10000510 	.word	0x10000510
 81037d0:	40004400 	.word	0x40004400

081037d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 81037d4:	b580      	push	{r7, lr}
 81037d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81037d8:	4b22      	ldr	r3, [pc, #136]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 81037da:	4a23      	ldr	r2, [pc, #140]	@ (8103868 <MX_USART3_UART_Init+0x94>)
 81037dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81037de:	4b21      	ldr	r3, [pc, #132]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 81037e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81037e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81037e6:	4b1f      	ldr	r3, [pc, #124]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 81037e8:	2200      	movs	r2, #0
 81037ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81037ec:	4b1d      	ldr	r3, [pc, #116]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 81037ee:	2200      	movs	r2, #0
 81037f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81037f2:	4b1c      	ldr	r3, [pc, #112]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 81037f4:	2200      	movs	r2, #0
 81037f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81037f8:	4b1a      	ldr	r3, [pc, #104]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 81037fa:	220c      	movs	r2, #12
 81037fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81037fe:	4b19      	ldr	r3, [pc, #100]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 8103800:	2200      	movs	r2, #0
 8103802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103804:	4b17      	ldr	r3, [pc, #92]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 8103806:	2200      	movs	r2, #0
 8103808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810380a:	4b16      	ldr	r3, [pc, #88]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 810380c:	2200      	movs	r2, #0
 810380e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103810:	4b14      	ldr	r3, [pc, #80]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 8103812:	2200      	movs	r2, #0
 8103814:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103816:	4b13      	ldr	r3, [pc, #76]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 8103818:	2200      	movs	r2, #0
 810381a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810381c:	4811      	ldr	r0, [pc, #68]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 810381e:	f008 fe75 	bl	810c50c <HAL_UART_Init>
 8103822:	4603      	mov	r3, r0
 8103824:	2b00      	cmp	r3, #0
 8103826:	d001      	beq.n	810382c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8103828:	f000 fa64 	bl	8103cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810382c:	2100      	movs	r1, #0
 810382e:	480d      	ldr	r0, [pc, #52]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 8103830:	f00b fa97 	bl	810ed62 <HAL_UARTEx_SetTxFifoThreshold>
 8103834:	4603      	mov	r3, r0
 8103836:	2b00      	cmp	r3, #0
 8103838:	d001      	beq.n	810383e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810383a:	f000 fa5b 	bl	8103cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810383e:	2100      	movs	r1, #0
 8103840:	4808      	ldr	r0, [pc, #32]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 8103842:	f00b facc 	bl	810edde <HAL_UARTEx_SetRxFifoThreshold>
 8103846:	4603      	mov	r3, r0
 8103848:	2b00      	cmp	r3, #0
 810384a:	d001      	beq.n	8103850 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810384c:	f000 fa52 	bl	8103cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8103850:	4804      	ldr	r0, [pc, #16]	@ (8103864 <MX_USART3_UART_Init+0x90>)
 8103852:	f00b fa4d 	bl	810ecf0 <HAL_UARTEx_DisableFifoMode>
 8103856:	4603      	mov	r3, r0
 8103858:	2b00      	cmp	r3, #0
 810385a:	d001      	beq.n	8103860 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810385c:	f000 fa4a 	bl	8103cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8103860:	bf00      	nop
 8103862:	bd80      	pop	{r7, pc}
 8103864:	100005a4 	.word	0x100005a4
 8103868:	40004800 	.word	0x40004800

0810386c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 810386c:	b580      	push	{r7, lr}
 810386e:	b08c      	sub	sp, #48	@ 0x30
 8103870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103872:	f107 031c 	add.w	r3, r7, #28
 8103876:	2200      	movs	r2, #0
 8103878:	601a      	str	r2, [r3, #0]
 810387a:	605a      	str	r2, [r3, #4]
 810387c:	609a      	str	r2, [r3, #8]
 810387e:	60da      	str	r2, [r3, #12]
 8103880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8103882:	4b4e      	ldr	r3, [pc, #312]	@ (81039bc <MX_GPIO_Init+0x150>)
 8103884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103888:	4a4c      	ldr	r2, [pc, #304]	@ (81039bc <MX_GPIO_Init+0x150>)
 810388a:	f043 0304 	orr.w	r3, r3, #4
 810388e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103892:	4b4a      	ldr	r3, [pc, #296]	@ (81039bc <MX_GPIO_Init+0x150>)
 8103894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103898:	f003 0304 	and.w	r3, r3, #4
 810389c:	61bb      	str	r3, [r7, #24]
 810389e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81038a0:	4b46      	ldr	r3, [pc, #280]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038a6:	4a45      	ldr	r2, [pc, #276]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038a8:	f043 0301 	orr.w	r3, r3, #1
 81038ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81038b0:	4b42      	ldr	r3, [pc, #264]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038b6:	f003 0301 	and.w	r3, r3, #1
 81038ba:	617b      	str	r3, [r7, #20]
 81038bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81038be:	4b3f      	ldr	r3, [pc, #252]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038c4:	4a3d      	ldr	r2, [pc, #244]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038c6:	f043 0320 	orr.w	r3, r3, #32
 81038ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81038ce:	4b3b      	ldr	r3, [pc, #236]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038d4:	f003 0320 	and.w	r3, r3, #32
 81038d8:	613b      	str	r3, [r7, #16]
 81038da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81038dc:	4b37      	ldr	r3, [pc, #220]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038e2:	4a36      	ldr	r2, [pc, #216]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038e4:	f043 0310 	orr.w	r3, r3, #16
 81038e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81038ec:	4b33      	ldr	r3, [pc, #204]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81038f2:	f003 0310 	and.w	r3, r3, #16
 81038f6:	60fb      	str	r3, [r7, #12]
 81038f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81038fa:	4b30      	ldr	r3, [pc, #192]	@ (81039bc <MX_GPIO_Init+0x150>)
 81038fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103900:	4a2e      	ldr	r2, [pc, #184]	@ (81039bc <MX_GPIO_Init+0x150>)
 8103902:	f043 0302 	orr.w	r3, r3, #2
 8103906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810390a:	4b2c      	ldr	r3, [pc, #176]	@ (81039bc <MX_GPIO_Init+0x150>)
 810390c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103910:	f003 0302 	and.w	r3, r3, #2
 8103914:	60bb      	str	r3, [r7, #8]
 8103916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8103918:	4b28      	ldr	r3, [pc, #160]	@ (81039bc <MX_GPIO_Init+0x150>)
 810391a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810391e:	4a27      	ldr	r2, [pc, #156]	@ (81039bc <MX_GPIO_Init+0x150>)
 8103920:	f043 0308 	orr.w	r3, r3, #8
 8103924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103928:	4b24      	ldr	r3, [pc, #144]	@ (81039bc <MX_GPIO_Init+0x150>)
 810392a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810392e:	f003 0308 	and.w	r3, r3, #8
 8103932:	607b      	str	r3, [r7, #4]
 8103934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8103936:	2200      	movs	r2, #0
 8103938:	2130      	movs	r1, #48	@ 0x30
 810393a:	4821      	ldr	r0, [pc, #132]	@ (81039c0 <MX_GPIO_Init+0x154>)
 810393c:	f003 fc46 	bl	81071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8103940:	2200      	movs	r2, #0
 8103942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8103946:	481f      	ldr	r0, [pc, #124]	@ (81039c4 <MX_GPIO_Init+0x158>)
 8103948:	f003 fc40 	bl	81071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 810394c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8103952:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8103956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103958:	2300      	movs	r3, #0
 810395a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810395c:	f107 031c 	add.w	r3, r7, #28
 8103960:	4619      	mov	r1, r3
 8103962:	4819      	ldr	r0, [pc, #100]	@ (81039c8 <MX_GPIO_Init+0x15c>)
 8103964:	f003 fa82 	bl	8106e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8103968:	2330      	movs	r3, #48	@ 0x30
 810396a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810396c:	2301      	movs	r3, #1
 810396e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103970:	2300      	movs	r3, #0
 8103972:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103974:	2300      	movs	r3, #0
 8103976:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103978:	f107 031c 	add.w	r3, r7, #28
 810397c:	4619      	mov	r1, r3
 810397e:	4810      	ldr	r0, [pc, #64]	@ (81039c0 <MX_GPIO_Init+0x154>)
 8103980:	f003 fa74 	bl	8106e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8103984:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810398a:	2301      	movs	r3, #1
 810398c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810398e:	2300      	movs	r3, #0
 8103990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103992:	2300      	movs	r3, #0
 8103994:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103996:	f107 031c 	add.w	r3, r7, #28
 810399a:	4619      	mov	r1, r3
 810399c:	4809      	ldr	r0, [pc, #36]	@ (81039c4 <MX_GPIO_Init+0x158>)
 810399e:	f003 fa65 	bl	8106e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 81039a2:	2200      	movs	r2, #0
 81039a4:	2100      	movs	r1, #0
 81039a6:	2028      	movs	r0, #40	@ 0x28
 81039a8:	f002 fcb3 	bl	8106312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 81039ac:	2028      	movs	r0, #40	@ 0x28
 81039ae:	f002 fcca 	bl	8106346 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81039b2:	bf00      	nop
 81039b4:	3730      	adds	r7, #48	@ 0x30
 81039b6:	46bd      	mov	sp, r7
 81039b8:	bd80      	pop	{r7, pc}
 81039ba:	bf00      	nop
 81039bc:	58024400 	.word	0x58024400
 81039c0:	58020000 	.word	0x58020000
 81039c4:	58020400 	.word	0x58020400
 81039c8:	58020800 	.word	0x58020800

081039cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//******************
//INTERRUPT PA3 SENSORE DATA READY
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 81039cc:	b480      	push	{r7}
 81039ce:	b083      	sub	sp, #12
 81039d0:	af00      	add	r7, sp, #0
 81039d2:	4603      	mov	r3, r0
 81039d4:	80fb      	strh	r3, [r7, #6]

//FUNZIONE DI CALLBACK PULSANTE BLU
	if (GPIO_Pin == GPIO_PIN_13) {
 81039d6:	88fb      	ldrh	r3, [r7, #6]
 81039d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81039dc:	d105      	bne.n	81039ea <HAL_GPIO_EXTI_Callback+0x1e>

		tasto_premuto = 1;
 81039de:	4b06      	ldr	r3, [pc, #24]	@ (81039f8 <HAL_GPIO_EXTI_Callback+0x2c>)
 81039e0:	2201      	movs	r2, #1
 81039e2:	601a      	str	r2, [r3, #0]
		tasto_appena_premuto = 1;
 81039e4:	4b05      	ldr	r3, [pc, #20]	@ (81039fc <HAL_GPIO_EXTI_Callback+0x30>)
 81039e6:	2201      	movs	r2, #1
 81039e8:	601a      	str	r2, [r3, #0]

	}
}
 81039ea:	bf00      	nop
 81039ec:	370c      	adds	r7, #12
 81039ee:	46bd      	mov	sp, r7
 81039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039f4:	4770      	bx	lr
 81039f6:	bf00      	nop
 81039f8:	10008840 	.word	0x10008840
 81039fc:	10008844 	.word	0x10008844

08103a00 <HAL_TIM_PeriodElapsedCallback>:
//******************

//******************
//FUNZIONE DI CALLBACK PER IL TIMER 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8103a00:	b580      	push	{r7, lr}
 8103a02:	b082      	sub	sp, #8
 8103a04:	af00      	add	r7, sp, #0
 8103a06:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	4a37      	ldr	r2, [pc, #220]	@ (8103ae8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8103a0c:	4293      	cmp	r3, r2
 8103a0e:	d140      	bne.n	8103a92 <HAL_TIM_PeriodElapsedCallback+0x92>
		flag_Tc = 1; //Flag che permette di entrare nel ciclo del while ogni 0.01 secondi
 8103a10:	4b36      	ldr	r3, [pc, #216]	@ (8103aec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8103a12:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8103a16:	601a      	str	r2, [r3, #0]
		n_ref++;
 8103a18:	4b35      	ldr	r3, [pc, #212]	@ (8103af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	3301      	adds	r3, #1
 8103a1e:	4a34      	ldr	r2, [pc, #208]	@ (8103af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8103a20:	6013      	str	r3, [r2, #0]
		tempo += 0.01;
 8103a22:	4b34      	ldr	r3, [pc, #208]	@ (8103af4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	4618      	mov	r0, r3
 8103a28:	f7fc fe16 	bl	8100658 <__aeabi_f2d>
 8103a2c:	a32c      	add	r3, pc, #176	@ (adr r3, 8103ae0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8103a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a32:	f7fc fcb3 	bl	810039c <__adddf3>
 8103a36:	4602      	mov	r2, r0
 8103a38:	460b      	mov	r3, r1
 8103a3a:	4610      	mov	r0, r2
 8103a3c:	4619      	mov	r1, r3
 8103a3e:	f7fd f95b 	bl	8100cf8 <__aeabi_d2f>
 8103a42:	4603      	mov	r3, r0
 8103a44:	4a2b      	ldr	r2, [pc, #172]	@ (8103af4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8103a46:	6013      	str	r3, [r2, #0]
		if (n_ref > 100 * 500)
 8103a48:	4b29      	ldr	r3, [pc, #164]	@ (8103af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8103a50:	4293      	cmp	r3, r2
 8103a52:	dd02      	ble.n	8103a5a <HAL_TIM_PeriodElapsedCallback+0x5a>
			n_ref = 0;
 8103a54:	4b26      	ldr	r3, [pc, #152]	@ (8103af0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8103a56:	2200      	movs	r2, #0
 8103a58:	601a      	str	r2, [r3, #0]

		if (tempo > 3600)
 8103a5a:	4b26      	ldr	r3, [pc, #152]	@ (8103af4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8103a5c:	edd3 7a00 	vldr	s15, [r3]
 8103a60:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8103af8 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8103a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8103a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103a6c:	dd03      	ble.n	8103a76 <HAL_TIM_PeriodElapsedCallback+0x76>
			tempo = 0;
 8103a6e:	4b21      	ldr	r3, [pc, #132]	@ (8103af4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8103a70:	f04f 0200 	mov.w	r2, #0
 8103a74:	601a      	str	r2, [r3, #0]

		contatore_esp320++;
 8103a76:	4b21      	ldr	r3, [pc, #132]	@ (8103afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8103a78:	681b      	ldr	r3, [r3, #0]
 8103a7a:	3301      	adds	r3, #1
 8103a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8103afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8103a7e:	6013      	str	r3, [r2, #0]
		if (contatore_esp320 > 3000)
 8103a80:	4b1e      	ldr	r3, [pc, #120]	@ (8103afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	dd02      	ble.n	8103a92 <HAL_TIM_PeriodElapsedCallback+0x92>
			contatore_esp320 = 0;
 8103a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8103afc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8103a8e:	2200      	movs	r2, #0
 8103a90:	601a      	str	r2, [r3, #0]

	}

	if (htim == &htim6) {
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	4a1a      	ldr	r2, [pc, #104]	@ (8103b00 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8103a96:	4293      	cmp	r3, r2
 8103a98:	d11b      	bne.n	8103ad2 <HAL_TIM_PeriodElapsedCallback+0xd2>

		// Gestione dell’invio periodico dei dati

		if (trasmissione_attiva == 1) {
 8103a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8103b04 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8103a9c:	781b      	ldrb	r3, [r3, #0]
 8103a9e:	2b01      	cmp	r3, #1
 8103aa0:	d117      	bne.n	8103ad2 <HAL_TIM_PeriodElapsedCallback+0xd2>
			 dati.accelerazione, dati.tempo);
			 printf("Dati trasmessi: %s\r\n", buffer);
			 //Trasmissione_dati(buffer, bytesWritten);
			 * */
			//printf("Dati trasmessi: %s\r\n", bufferDati);
			Trasmissione_dati(bufferDati, indiceBuffer);
 8103aa2:	4b19      	ldr	r3, [pc, #100]	@ (8103b08 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	4619      	mov	r1, r3
 8103aa8:	4818      	ldr	r0, [pc, #96]	@ (8103b0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8103aaa:	f000 f84d 	bl	8103b48 <Trasmissione_dati>
			indiceBuffer = 0;
 8103aae:	4b16      	ldr	r3, [pc, #88]	@ (8103b08 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8103ab0:	2200      	movs	r2, #0
 8103ab2:	601a      	str	r2, [r3, #0]
			//in genere indice buffer arriva a sui 15000 ogni 3 secondi
			if (indiceBuffer >= 30000) //se per qualche motivo non avviene l'azzeramento dell'indice
 8103ab4:	4b14      	ldr	r3, [pc, #80]	@ (8103b08 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	f247 522f 	movw	r2, #29999	@ 0x752f
 8103abc:	4293      	cmp	r3, r2
 8103abe:	dd02      	ble.n	8103ac6 <HAL_TIM_PeriodElapsedCallback+0xc6>
				indiceBuffer = 0;
 8103ac0:	4b11      	ldr	r3, [pc, #68]	@ (8103b08 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8103ac2:	2200      	movs	r2, #0
 8103ac4:	601a      	str	r2, [r3, #0]
			memset(bufferDati, 0, sizeof(bufferDati));  // Pulizia buffer
 8103ac6:	f248 02e8 	movw	r2, #33000	@ 0x80e8
 8103aca:	2100      	movs	r1, #0
 8103acc:	480f      	ldr	r0, [pc, #60]	@ (8103b0c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8103ace:	f00c fd63 	bl	8110598 <memset>

		}

	}
}
 8103ad2:	bf00      	nop
 8103ad4:	3708      	adds	r7, #8
 8103ad6:	46bd      	mov	sp, r7
 8103ad8:	bd80      	pop	{r7, pc}
 8103ada:	bf00      	nop
 8103adc:	f3af 8000 	nop.w
 8103ae0:	47ae147b 	.word	0x47ae147b
 8103ae4:	3f847ae1 	.word	0x3f847ae1
 8103ae8:	10000394 	.word	0x10000394
 8103aec:	100087d0 	.word	0x100087d0
 8103af0:	10008a80 	.word	0x10008a80
 8103af4:	10008724 	.word	0x10008724
 8103af8:	45610000 	.word	0x45610000
 8103afc:	10008848 	.word	0x10008848
 8103b00:	10000478 	.word	0x10000478
 8103b04:	10008a89 	.word	0x10008a89
 8103b08:	10008720 	.word	0x10008720
 8103b0c:	10000638 	.word	0x10000638

08103b10 <__io_getchar>:
//INPUT E OUTPUT USART
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}
int __io_getchar(void) {
 8103b10:	b580      	push	{r7, lr}
 8103b12:	b082      	sub	sp, #8
 8103b14:	af00      	add	r7, sp, #0
	uint8_t ch;
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8103b16:	4b0b      	ldr	r3, [pc, #44]	@ (8103b44 <__io_getchar+0x34>)
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	2208      	movs	r2, #8
 8103b1c:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103b1e:	1df9      	adds	r1, r7, #7
 8103b20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103b24:	2201      	movs	r2, #1
 8103b26:	4807      	ldr	r0, [pc, #28]	@ (8103b44 <__io_getchar+0x34>)
 8103b28:	f008 fdce 	bl	810c6c8 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8103b2c:	1df9      	adds	r1, r7, #7
 8103b2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103b32:	2201      	movs	r2, #1
 8103b34:	4803      	ldr	r0, [pc, #12]	@ (8103b44 <__io_getchar+0x34>)
 8103b36:	f008 fd39 	bl	810c5ac <HAL_UART_Transmit>
	return ch;
 8103b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8103b3c:	4618      	mov	r0, r3
 8103b3e:	3708      	adds	r7, #8
 8103b40:	46bd      	mov	sp, r7
 8103b42:	bd80      	pop	{r7, pc}
 8103b44:	100005a4 	.word	0x100005a4

08103b48 <Trasmissione_dati>:
//******************

// Funzione per trasmettere dati tramite UART2
void Trasmissione_dati(void *data, size_t size) {
 8103b48:	b580      	push	{r7, lr}
 8103b4a:	b082      	sub	sp, #8
 8103b4c:	af00      	add	r7, sp, #0
 8103b4e:	6078      	str	r0, [r7, #4]
 8103b50:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, size, HAL_MAX_DELAY);
 8103b52:	683b      	ldr	r3, [r7, #0]
 8103b54:	b29a      	uxth	r2, r3
 8103b56:	f04f 33ff 	mov.w	r3, #4294967295
 8103b5a:	6879      	ldr	r1, [r7, #4]
 8103b5c:	4803      	ldr	r0, [pc, #12]	@ (8103b6c <Trasmissione_dati+0x24>)
 8103b5e:	f008 fd25 	bl	810c5ac <HAL_UART_Transmit>
}
 8103b62:	bf00      	nop
 8103b64:	3708      	adds	r7, #8
 8103b66:	46bd      	mov	sp, r7
 8103b68:	bd80      	pop	{r7, pc}
 8103b6a:	bf00      	nop
 8103b6c:	10000510 	.word	0x10000510

08103b70 <HAL_UART_RxCpltCallback>:

// Callback chiamata quando un byte viene ricevuto sulla UART2
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8103b70:	b580      	push	{r7, lr}
 8103b72:	b082      	sub	sp, #8
 8103b74:	af00      	add	r7, sp, #0
 8103b76:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	4a46      	ldr	r2, [pc, #280]	@ (8103c94 <HAL_UART_RxCpltCallback+0x124>)
 8103b7c:	4293      	cmp	r3, r2
 8103b7e:	f040 8085 	bne.w	8103c8c <HAL_UART_RxCpltCallback+0x11c>
		if (rx_buffer[0] == 'S') {
 8103b82:	4b45      	ldr	r3, [pc, #276]	@ (8103c98 <HAL_UART_RxCpltCallback+0x128>)
 8103b84:	781b      	ldrb	r3, [r3, #0]
 8103b86:	2b53      	cmp	r3, #83	@ 0x53
 8103b88:	d109      	bne.n	8103b9e <HAL_UART_RxCpltCallback+0x2e>
			// Interrompi la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 8103b8a:	4b43      	ldr	r3, [pc, #268]	@ (8103c98 <HAL_UART_RxCpltCallback+0x128>)
 8103b8c:	781b      	ldrb	r3, [r3, #0]
 8103b8e:	4619      	mov	r1, r3
 8103b90:	4842      	ldr	r0, [pc, #264]	@ (8103c9c <HAL_UART_RxCpltCallback+0x12c>)
 8103b92:	f00c fbf7 	bl	8110384 <iprintf>
			trasmissione_attiva = 0;
 8103b96:	4b42      	ldr	r3, [pc, #264]	@ (8103ca0 <HAL_UART_RxCpltCallback+0x130>)
 8103b98:	2200      	movs	r2, #0
 8103b9a:	701a      	strb	r2, [r3, #0]
 8103b9c:	e04c      	b.n	8103c38 <HAL_UART_RxCpltCallback+0xc8>

		} else if (rx_buffer[0] == 'V') {
 8103b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8103c98 <HAL_UART_RxCpltCallback+0x128>)
 8103ba0:	781b      	ldrb	r3, [r3, #0]
 8103ba2:	2b56      	cmp	r3, #86	@ 0x56
 8103ba4:	d109      	bne.n	8103bba <HAL_UART_RxCpltCallback+0x4a>
			// Avvia la trasmissione
			printf("Arrivato: %c\r\n", rx_buffer[0]);
 8103ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8103c98 <HAL_UART_RxCpltCallback+0x128>)
 8103ba8:	781b      	ldrb	r3, [r3, #0]
 8103baa:	4619      	mov	r1, r3
 8103bac:	483b      	ldr	r0, [pc, #236]	@ (8103c9c <HAL_UART_RxCpltCallback+0x12c>)
 8103bae:	f00c fbe9 	bl	8110384 <iprintf>
			trasmissione_attiva = 1;
 8103bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8103ca0 <HAL_UART_RxCpltCallback+0x130>)
 8103bb4:	2201      	movs	r2, #1
 8103bb6:	701a      	strb	r2, [r3, #0]
 8103bb8:	e03e      	b.n	8103c38 <HAL_UART_RxCpltCallback+0xc8>
		} else if (rx_buffer[0] == 'P') {
 8103bba:	4b37      	ldr	r3, [pc, #220]	@ (8103c98 <HAL_UART_RxCpltCallback+0x128>)
 8103bbc:	781b      	ldrb	r3, [r3, #0]
 8103bbe:	2b50      	cmp	r3, #80	@ 0x50
 8103bc0:	d13a      	bne.n	8103c38 <HAL_UART_RxCpltCallback+0xc8>
			//HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
			i = 1;
 8103bc2:	4b38      	ldr	r3, [pc, #224]	@ (8103ca4 <HAL_UART_RxCpltCallback+0x134>)
 8103bc4:	2201      	movs	r2, #1
 8103bc6:	601a      	str	r2, [r3, #0]
			// Ricevi 4 byte tramite UART (blocca fino a ricezione)
			HAL_UART_Receive_IT(&huart2, &bytesricevuti, 12);
 8103bc8:	220c      	movs	r2, #12
 8103bca:	4937      	ldr	r1, [pc, #220]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103bcc:	4831      	ldr	r0, [pc, #196]	@ (8103c94 <HAL_UART_RxCpltCallback+0x124>)
 8103bce:	f008 fe43 	bl	810c858 <HAL_UART_Receive_IT>
			rx_buffer[0] = 0;
 8103bd2:	4b31      	ldr	r3, [pc, #196]	@ (8103c98 <HAL_UART_RxCpltCallback+0x128>)
 8103bd4:	2200      	movs	r2, #0
 8103bd6:	701a      	strb	r2, [r3, #0]
			// Ricostruisci il float dai 4 byte ricevuti
			bytesricevuti1[0] = bytesricevuti[0];
 8103bd8:	4b33      	ldr	r3, [pc, #204]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103bda:	781a      	ldrb	r2, [r3, #0]
 8103bdc:	4b33      	ldr	r3, [pc, #204]	@ (8103cac <HAL_UART_RxCpltCallback+0x13c>)
 8103bde:	701a      	strb	r2, [r3, #0]
			bytesricevuti1[1] = bytesricevuti[1];
 8103be0:	4b31      	ldr	r3, [pc, #196]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103be2:	785a      	ldrb	r2, [r3, #1]
 8103be4:	4b31      	ldr	r3, [pc, #196]	@ (8103cac <HAL_UART_RxCpltCallback+0x13c>)
 8103be6:	705a      	strb	r2, [r3, #1]
			bytesricevuti1[2] = bytesricevuti[2];
 8103be8:	4b2f      	ldr	r3, [pc, #188]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103bea:	789a      	ldrb	r2, [r3, #2]
 8103bec:	4b2f      	ldr	r3, [pc, #188]	@ (8103cac <HAL_UART_RxCpltCallback+0x13c>)
 8103bee:	709a      	strb	r2, [r3, #2]
			bytesricevuti1[3] = bytesricevuti[3];
 8103bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103bf2:	78da      	ldrb	r2, [r3, #3]
 8103bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8103cac <HAL_UART_RxCpltCallback+0x13c>)
 8103bf6:	70da      	strb	r2, [r3, #3]
			bytesricevuti2[0] = bytesricevuti[4];
 8103bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103bfa:	791a      	ldrb	r2, [r3, #4]
 8103bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8103cb0 <HAL_UART_RxCpltCallback+0x140>)
 8103bfe:	701a      	strb	r2, [r3, #0]
			bytesricevuti2[1] = bytesricevuti[5];
 8103c00:	4b29      	ldr	r3, [pc, #164]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103c02:	795a      	ldrb	r2, [r3, #5]
 8103c04:	4b2a      	ldr	r3, [pc, #168]	@ (8103cb0 <HAL_UART_RxCpltCallback+0x140>)
 8103c06:	705a      	strb	r2, [r3, #1]
			bytesricevuti2[2] = bytesricevuti[6];
 8103c08:	4b27      	ldr	r3, [pc, #156]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103c0a:	799a      	ldrb	r2, [r3, #6]
 8103c0c:	4b28      	ldr	r3, [pc, #160]	@ (8103cb0 <HAL_UART_RxCpltCallback+0x140>)
 8103c0e:	709a      	strb	r2, [r3, #2]
			bytesricevuti2[3] = bytesricevuti[7];
 8103c10:	4b25      	ldr	r3, [pc, #148]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103c12:	79da      	ldrb	r2, [r3, #7]
 8103c14:	4b26      	ldr	r3, [pc, #152]	@ (8103cb0 <HAL_UART_RxCpltCallback+0x140>)
 8103c16:	70da      	strb	r2, [r3, #3]
			bytesricevuti3[0] = bytesricevuti[8];
 8103c18:	4b23      	ldr	r3, [pc, #140]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103c1a:	7a1a      	ldrb	r2, [r3, #8]
 8103c1c:	4b25      	ldr	r3, [pc, #148]	@ (8103cb4 <HAL_UART_RxCpltCallback+0x144>)
 8103c1e:	701a      	strb	r2, [r3, #0]
			bytesricevuti3[1] = bytesricevuti[9];
 8103c20:	4b21      	ldr	r3, [pc, #132]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103c22:	7a5a      	ldrb	r2, [r3, #9]
 8103c24:	4b23      	ldr	r3, [pc, #140]	@ (8103cb4 <HAL_UART_RxCpltCallback+0x144>)
 8103c26:	705a      	strb	r2, [r3, #1]
			bytesricevuti3[2] = bytesricevuti[10];
 8103c28:	4b1f      	ldr	r3, [pc, #124]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103c2a:	7a9a      	ldrb	r2, [r3, #10]
 8103c2c:	4b21      	ldr	r3, [pc, #132]	@ (8103cb4 <HAL_UART_RxCpltCallback+0x144>)
 8103c2e:	709a      	strb	r2, [r3, #2]
			bytesricevuti3[3] = bytesricevuti[11];
 8103c30:	4b1d      	ldr	r3, [pc, #116]	@ (8103ca8 <HAL_UART_RxCpltCallback+0x138>)
 8103c32:	7ada      	ldrb	r2, [r3, #11]
 8103c34:	4b1f      	ldr	r3, [pc, #124]	@ (8103cb4 <HAL_UART_RxCpltCallback+0x144>)
 8103c36:	70da      	strb	r2, [r3, #3]

			//printf("float: %f",floatricevuto);

		}

		HAL_UART_Receive_IT(&huart2, (uint8_t*) rx_buffer, 1); //
 8103c38:	2201      	movs	r2, #1
 8103c3a:	4917      	ldr	r1, [pc, #92]	@ (8103c98 <HAL_UART_RxCpltCallback+0x128>)
 8103c3c:	4815      	ldr	r0, [pc, #84]	@ (8103c94 <HAL_UART_RxCpltCallback+0x124>)
 8103c3e:	f008 fe0b 	bl	810c858 <HAL_UART_Receive_IT>
		memcpy(&floatricevuto1, &bytesricevuti1, sizeof(float));
 8103c42:	4b1a      	ldr	r3, [pc, #104]	@ (8103cac <HAL_UART_RxCpltCallback+0x13c>)
 8103c44:	681b      	ldr	r3, [r3, #0]
 8103c46:	4a1c      	ldr	r2, [pc, #112]	@ (8103cb8 <HAL_UART_RxCpltCallback+0x148>)
 8103c48:	6013      	str	r3, [r2, #0]
		memcpy(&floatricevuto2, &bytesricevuti2, sizeof(float));
 8103c4a:	4b19      	ldr	r3, [pc, #100]	@ (8103cb0 <HAL_UART_RxCpltCallback+0x140>)
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8103cbc <HAL_UART_RxCpltCallback+0x14c>)
 8103c50:	6013      	str	r3, [r2, #0]
		memcpy(&floatricevuto3, &bytesricevuti3, sizeof(float));
 8103c52:	4b18      	ldr	r3, [pc, #96]	@ (8103cb4 <HAL_UART_RxCpltCallback+0x144>)
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	4a1a      	ldr	r2, [pc, #104]	@ (8103cc0 <HAL_UART_RxCpltCallback+0x150>)
 8103c58:	6013      	str	r3, [r2, #0]

		if (i == 1) {
 8103c5a:	4b12      	ldr	r3, [pc, #72]	@ (8103ca4 <HAL_UART_RxCpltCallback+0x134>)
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	2b01      	cmp	r3, #1
 8103c60:	d114      	bne.n	8103c8c <HAL_UART_RxCpltCallback+0x11c>
			tune_PID(&pid_roll, floatricevuto1, floatricevuto2, floatricevuto3); //prova ad alzare
 8103c62:	4b15      	ldr	r3, [pc, #84]	@ (8103cb8 <HAL_UART_RxCpltCallback+0x148>)
 8103c64:	edd3 7a00 	vldr	s15, [r3]
 8103c68:	4b14      	ldr	r3, [pc, #80]	@ (8103cbc <HAL_UART_RxCpltCallback+0x14c>)
 8103c6a:	ed93 7a00 	vldr	s14, [r3]
 8103c6e:	4b14      	ldr	r3, [pc, #80]	@ (8103cc0 <HAL_UART_RxCpltCallback+0x150>)
 8103c70:	edd3 6a00 	vldr	s13, [r3]
 8103c74:	eeb0 1a66 	vmov.f32	s2, s13
 8103c78:	eef0 0a47 	vmov.f32	s1, s14
 8103c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8103c80:	4810      	ldr	r0, [pc, #64]	@ (8103cc4 <HAL_UART_RxCpltCallback+0x154>)
 8103c82:	f7fd fb62 	bl	810134a <tune_PID>
			i = 0;
 8103c86:	4b07      	ldr	r3, [pc, #28]	@ (8103ca4 <HAL_UART_RxCpltCallback+0x134>)
 8103c88:	2200      	movs	r2, #0
 8103c8a:	601a      	str	r2, [r3, #0]

		}

	}
}
 8103c8c:	bf00      	nop
 8103c8e:	3708      	adds	r7, #8
 8103c90:	46bd      	mov	sp, r7
 8103c92:	bd80      	pop	{r7, pc}
 8103c94:	10000510 	.word	0x10000510
 8103c98:	10008a88 	.word	0x10008a88
 8103c9c:	08113cb8 	.word	0x08113cb8
 8103ca0:	10008a89 	.word	0x10008a89
 8103ca4:	1000874c 	.word	0x1000874c
 8103ca8:	10008728 	.word	0x10008728
 8103cac:	10008734 	.word	0x10008734
 8103cb0:	10008738 	.word	0x10008738
 8103cb4:	1000873c 	.word	0x1000873c
 8103cb8:	10008740 	.word	0x10008740
 8103cbc:	10008744 	.word	0x10008744
 8103cc0:	10008748 	.word	0x10008748
 8103cc4:	10008790 	.word	0x10008790

08103cc8 <_write>:

// Funzione di scrittura per printf
int _write(int file, char *ptr, int len) {
 8103cc8:	b580      	push	{r7, lr}
 8103cca:	b084      	sub	sp, #16
 8103ccc:	af00      	add	r7, sp, #0
 8103cce:	60f8      	str	r0, [r7, #12]
 8103cd0:	60b9      	str	r1, [r7, #8]
 8103cd2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	b29a      	uxth	r2, r3
 8103cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8103cdc:	68b9      	ldr	r1, [r7, #8]
 8103cde:	4804      	ldr	r0, [pc, #16]	@ (8103cf0 <_write+0x28>)
 8103ce0:	f008 fc64 	bl	810c5ac <HAL_UART_Transmit>
	return len;
 8103ce4:	687b      	ldr	r3, [r7, #4]
}
 8103ce6:	4618      	mov	r0, r3
 8103ce8:	3710      	adds	r7, #16
 8103cea:	46bd      	mov	sp, r7
 8103cec:	bd80      	pop	{r7, pc}
 8103cee:	bf00      	nop
 8103cf0:	100005a4 	.word	0x100005a4

08103cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8103cf4:	b480      	push	{r7}
 8103cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8103cf8:	b672      	cpsid	i
}
 8103cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8103cfc:	bf00      	nop
 8103cfe:	e7fd      	b.n	8103cfc <Error_Handler+0x8>

08103d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8103d00:	b480      	push	{r7}
 8103d02:	b083      	sub	sp, #12
 8103d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103d06:	4b0a      	ldr	r3, [pc, #40]	@ (8103d30 <HAL_MspInit+0x30>)
 8103d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103d0c:	4a08      	ldr	r2, [pc, #32]	@ (8103d30 <HAL_MspInit+0x30>)
 8103d0e:	f043 0302 	orr.w	r3, r3, #2
 8103d12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103d16:	4b06      	ldr	r3, [pc, #24]	@ (8103d30 <HAL_MspInit+0x30>)
 8103d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103d1c:	f003 0302 	and.w	r3, r3, #2
 8103d20:	607b      	str	r3, [r7, #4]
 8103d22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103d24:	bf00      	nop
 8103d26:	370c      	adds	r7, #12
 8103d28:	46bd      	mov	sp, r7
 8103d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d2e:	4770      	bx	lr
 8103d30:	58024400 	.word	0x58024400

08103d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8103d34:	b580      	push	{r7, lr}
 8103d36:	b0ba      	sub	sp, #232	@ 0xe8
 8103d38:	af00      	add	r7, sp, #0
 8103d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103d3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103d40:	2200      	movs	r2, #0
 8103d42:	601a      	str	r2, [r3, #0]
 8103d44:	605a      	str	r2, [r3, #4]
 8103d46:	609a      	str	r2, [r3, #8]
 8103d48:	60da      	str	r2, [r3, #12]
 8103d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103d4c:	f107 0310 	add.w	r3, r7, #16
 8103d50:	22c0      	movs	r2, #192	@ 0xc0
 8103d52:	2100      	movs	r1, #0
 8103d54:	4618      	mov	r0, r3
 8103d56:	f00c fc1f 	bl	8110598 <memset>
  if(hadc->Instance==ADC1)
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	681b      	ldr	r3, [r3, #0]
 8103d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8103e10 <HAL_ADC_MspInit+0xdc>)
 8103d60:	4293      	cmp	r3, r2
 8103d62:	d151      	bne.n	8103e08 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8103d64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8103d68:	f04f 0300 	mov.w	r3, #0
 8103d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8103d70:	2301      	movs	r3, #1
 8103d72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8103d74:	2312      	movs	r3, #18
 8103d76:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8103d78:	2302      	movs	r3, #2
 8103d7a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8103d7c:	2302      	movs	r3, #2
 8103d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8103d80:	2302      	movs	r3, #2
 8103d82:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8103d84:	23c0      	movs	r3, #192	@ 0xc0
 8103d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8103d88:	2320      	movs	r3, #32
 8103d8a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8103d8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8103d90:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8103d92:	2300      	movs	r3, #0
 8103d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103d98:	f107 0310 	add.w	r3, r7, #16
 8103d9c:	4618      	mov	r0, r3
 8103d9e:	f004 fabd 	bl	810831c <HAL_RCCEx_PeriphCLKConfig>
 8103da2:	4603      	mov	r3, r0
 8103da4:	2b00      	cmp	r3, #0
 8103da6:	d001      	beq.n	8103dac <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8103da8:	f7ff ffa4 	bl	8103cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8103dac:	4b19      	ldr	r3, [pc, #100]	@ (8103e14 <HAL_ADC_MspInit+0xe0>)
 8103dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103db2:	4a18      	ldr	r2, [pc, #96]	@ (8103e14 <HAL_ADC_MspInit+0xe0>)
 8103db4:	f043 0320 	orr.w	r3, r3, #32
 8103db8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103dbc:	4b15      	ldr	r3, [pc, #84]	@ (8103e14 <HAL_ADC_MspInit+0xe0>)
 8103dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103dc2:	f003 0320 	and.w	r3, r3, #32
 8103dc6:	60fb      	str	r3, [r7, #12]
 8103dc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8103dca:	4b12      	ldr	r3, [pc, #72]	@ (8103e14 <HAL_ADC_MspInit+0xe0>)
 8103dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103dd0:	4a10      	ldr	r2, [pc, #64]	@ (8103e14 <HAL_ADC_MspInit+0xe0>)
 8103dd2:	f043 0320 	orr.w	r3, r3, #32
 8103dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103dda:	4b0e      	ldr	r3, [pc, #56]	@ (8103e14 <HAL_ADC_MspInit+0xe0>)
 8103ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103de0:	f003 0320 	and.w	r3, r3, #32
 8103de4:	60bb      	str	r3, [r7, #8]
 8103de6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8103de8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103dec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8103df0:	2303      	movs	r3, #3
 8103df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103df6:	2300      	movs	r3, #0
 8103df8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8103dfc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103e00:	4619      	mov	r1, r3
 8103e02:	4805      	ldr	r0, [pc, #20]	@ (8103e18 <HAL_ADC_MspInit+0xe4>)
 8103e04:	f003 f832 	bl	8106e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8103e08:	bf00      	nop
 8103e0a:	37e8      	adds	r7, #232	@ 0xe8
 8103e0c:	46bd      	mov	sp, r7
 8103e0e:	bd80      	pop	{r7, pc}
 8103e10:	40022000 	.word	0x40022000
 8103e14:	58024400 	.word	0x58024400
 8103e18:	58021400 	.word	0x58021400

08103e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8103e1c:	b580      	push	{r7, lr}
 8103e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8103e20:	af00      	add	r7, sp, #0
 8103e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103e24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103e28:	2200      	movs	r2, #0
 8103e2a:	601a      	str	r2, [r3, #0]
 8103e2c:	605a      	str	r2, [r3, #4]
 8103e2e:	609a      	str	r2, [r3, #8]
 8103e30:	60da      	str	r2, [r3, #12]
 8103e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103e34:	f107 0310 	add.w	r3, r7, #16
 8103e38:	22c0      	movs	r2, #192	@ 0xc0
 8103e3a:	2100      	movs	r1, #0
 8103e3c:	4618      	mov	r0, r3
 8103e3e:	f00c fbab 	bl	8110598 <memset>
  if(hi2c->Instance==I2C1)
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	4a26      	ldr	r2, [pc, #152]	@ (8103ee0 <HAL_I2C_MspInit+0xc4>)
 8103e48:	4293      	cmp	r3, r2
 8103e4a:	d145      	bne.n	8103ed8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8103e4c:	f04f 0208 	mov.w	r2, #8
 8103e50:	f04f 0300 	mov.w	r3, #0
 8103e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8103e58:	2300      	movs	r3, #0
 8103e5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103e5e:	f107 0310 	add.w	r3, r7, #16
 8103e62:	4618      	mov	r0, r3
 8103e64:	f004 fa5a 	bl	810831c <HAL_RCCEx_PeriphCLKConfig>
 8103e68:	4603      	mov	r3, r0
 8103e6a:	2b00      	cmp	r3, #0
 8103e6c:	d001      	beq.n	8103e72 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8103e6e:	f7ff ff41 	bl	8103cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8103e72:	4b1c      	ldr	r3, [pc, #112]	@ (8103ee4 <HAL_I2C_MspInit+0xc8>)
 8103e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e78:	4a1a      	ldr	r2, [pc, #104]	@ (8103ee4 <HAL_I2C_MspInit+0xc8>)
 8103e7a:	f043 0302 	orr.w	r3, r3, #2
 8103e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e82:	4b18      	ldr	r3, [pc, #96]	@ (8103ee4 <HAL_I2C_MspInit+0xc8>)
 8103e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e88:	f003 0302 	and.w	r3, r3, #2
 8103e8c:	60fb      	str	r3, [r7, #12]
 8103e8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8103e90:	23c0      	movs	r3, #192	@ 0xc0
 8103e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8103e96:	2312      	movs	r3, #18
 8103e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103e9c:	2300      	movs	r3, #0
 8103e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103ea2:	2300      	movs	r3, #0
 8103ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8103ea8:	2304      	movs	r3, #4
 8103eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103eae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8103eb2:	4619      	mov	r1, r3
 8103eb4:	480c      	ldr	r0, [pc, #48]	@ (8103ee8 <HAL_I2C_MspInit+0xcc>)
 8103eb6:	f002 ffd9 	bl	8106e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8103eba:	4b0a      	ldr	r3, [pc, #40]	@ (8103ee4 <HAL_I2C_MspInit+0xc8>)
 8103ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103ec0:	4a08      	ldr	r2, [pc, #32]	@ (8103ee4 <HAL_I2C_MspInit+0xc8>)
 8103ec2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103eca:	4b06      	ldr	r3, [pc, #24]	@ (8103ee4 <HAL_I2C_MspInit+0xc8>)
 8103ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8103ed4:	60bb      	str	r3, [r7, #8]
 8103ed6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8103ed8:	bf00      	nop
 8103eda:	37e8      	adds	r7, #232	@ 0xe8
 8103edc:	46bd      	mov	sp, r7
 8103ede:	bd80      	pop	{r7, pc}
 8103ee0:	40005400 	.word	0x40005400
 8103ee4:	58024400 	.word	0x58024400
 8103ee8:	58020400 	.word	0x58020400

08103eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8103eec:	b580      	push	{r7, lr}
 8103eee:	b086      	sub	sp, #24
 8103ef0:	af00      	add	r7, sp, #0
 8103ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	4a32      	ldr	r2, [pc, #200]	@ (8103fc4 <HAL_TIM_Base_MspInit+0xd8>)
 8103efa:	4293      	cmp	r3, r2
 8103efc:	d10f      	bne.n	8103f1e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8103efe:	4b32      	ldr	r3, [pc, #200]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103f04:	4a30      	ldr	r2, [pc, #192]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f06:	f043 0301 	orr.w	r3, r3, #1
 8103f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103f14:	f003 0301 	and.w	r3, r3, #1
 8103f18:	617b      	str	r3, [r7, #20]
 8103f1a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8103f1c:	e04d      	b.n	8103fba <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	681b      	ldr	r3, [r3, #0]
 8103f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103f26:	d117      	bne.n	8103f58 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8103f28:	4b27      	ldr	r3, [pc, #156]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103f2e:	4a26      	ldr	r2, [pc, #152]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f30:	f043 0301 	orr.w	r3, r3, #1
 8103f34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103f38:	4b23      	ldr	r3, [pc, #140]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103f3e:	f003 0301 	and.w	r3, r3, #1
 8103f42:	613b      	str	r3, [r7, #16]
 8103f44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8103f46:	2200      	movs	r2, #0
 8103f48:	2100      	movs	r1, #0
 8103f4a:	201c      	movs	r0, #28
 8103f4c:	f002 f9e1 	bl	8106312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8103f50:	201c      	movs	r0, #28
 8103f52:	f002 f9f8 	bl	8106346 <HAL_NVIC_EnableIRQ>
}
 8103f56:	e030      	b.n	8103fba <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8103fcc <HAL_TIM_Base_MspInit+0xe0>)
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d10f      	bne.n	8103f82 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8103f62:	4b19      	ldr	r3, [pc, #100]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103f68:	4a17      	ldr	r2, [pc, #92]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f6a:	f043 0302 	orr.w	r3, r3, #2
 8103f6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103f72:	4b15      	ldr	r3, [pc, #84]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103f78:	f003 0302 	and.w	r3, r3, #2
 8103f7c:	60fb      	str	r3, [r7, #12]
 8103f7e:	68fb      	ldr	r3, [r7, #12]
}
 8103f80:	e01b      	b.n	8103fba <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM6)
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	4a12      	ldr	r2, [pc, #72]	@ (8103fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8103f88:	4293      	cmp	r3, r2
 8103f8a:	d116      	bne.n	8103fba <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8103f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103f92:	4a0d      	ldr	r2, [pc, #52]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f94:	f043 0310 	orr.w	r3, r3, #16
 8103f98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8103f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8103fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8103f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103fa2:	f003 0310 	and.w	r3, r3, #16
 8103fa6:	60bb      	str	r3, [r7, #8]
 8103fa8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8103faa:	2200      	movs	r2, #0
 8103fac:	2100      	movs	r1, #0
 8103fae:	2036      	movs	r0, #54	@ 0x36
 8103fb0:	f002 f9af 	bl	8106312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8103fb4:	2036      	movs	r0, #54	@ 0x36
 8103fb6:	f002 f9c6 	bl	8106346 <HAL_NVIC_EnableIRQ>
}
 8103fba:	bf00      	nop
 8103fbc:	3718      	adds	r7, #24
 8103fbe:	46bd      	mov	sp, r7
 8103fc0:	bd80      	pop	{r7, pc}
 8103fc2:	bf00      	nop
 8103fc4:	40010000 	.word	0x40010000
 8103fc8:	58024400 	.word	0x58024400
 8103fcc:	40000400 	.word	0x40000400
 8103fd0:	40001000 	.word	0x40001000

08103fd4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8103fd4:	b580      	push	{r7, lr}
 8103fd6:	b08c      	sub	sp, #48	@ 0x30
 8103fd8:	af00      	add	r7, sp, #0
 8103fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103fdc:	f107 031c 	add.w	r3, r7, #28
 8103fe0:	2200      	movs	r2, #0
 8103fe2:	601a      	str	r2, [r3, #0]
 8103fe4:	605a      	str	r2, [r3, #4]
 8103fe6:	609a      	str	r2, [r3, #8]
 8103fe8:	60da      	str	r2, [r3, #12]
 8103fea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	4a34      	ldr	r2, [pc, #208]	@ (81040c4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8103ff2:	4293      	cmp	r3, r2
 8103ff4:	d12f      	bne.n	8104056 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8103ff6:	4b34      	ldr	r3, [pc, #208]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8103ffc:	4a32      	ldr	r2, [pc, #200]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8103ffe:	f043 0304 	orr.w	r3, r3, #4
 8104002:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104006:	4b30      	ldr	r3, [pc, #192]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810400c:	f003 0304 	and.w	r3, r3, #4
 8104010:	61bb      	str	r3, [r7, #24]
 8104012:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8104014:	4b2c      	ldr	r3, [pc, #176]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810401a:	4a2b      	ldr	r2, [pc, #172]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 810401c:	f043 0308 	orr.w	r3, r3, #8
 8104020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104024:	4b28      	ldr	r3, [pc, #160]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810402a:	f003 0308 	and.w	r3, r3, #8
 810402e:	617b      	str	r3, [r7, #20]
 8104030:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8104032:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8104036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104038:	2302      	movs	r3, #2
 810403a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810403c:	2300      	movs	r3, #0
 810403e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104040:	2300      	movs	r3, #0
 8104042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8104044:	2302      	movs	r3, #2
 8104046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8104048:	f107 031c 	add.w	r3, r7, #28
 810404c:	4619      	mov	r1, r3
 810404e:	481f      	ldr	r0, [pc, #124]	@ (81040cc <HAL_TIM_Encoder_MspInit+0xf8>)
 8104050:	f002 ff0c 	bl	8106e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8104054:	e032      	b.n	81040bc <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a1d      	ldr	r2, [pc, #116]	@ (81040d0 <HAL_TIM_Encoder_MspInit+0xfc>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d12d      	bne.n	81040bc <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8104060:	4b19      	ldr	r3, [pc, #100]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104066:	4a18      	ldr	r2, [pc, #96]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104068:	f043 0302 	orr.w	r3, r3, #2
 810406c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8104070:	4b15      	ldr	r3, [pc, #84]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8104076:	f003 0302 	and.w	r3, r3, #2
 810407a:	613b      	str	r3, [r7, #16]
 810407c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810407e:	4b12      	ldr	r3, [pc, #72]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104084:	4a10      	ldr	r2, [pc, #64]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104086:	f043 0304 	orr.w	r3, r3, #4
 810408a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810408e:	4b0e      	ldr	r3, [pc, #56]	@ (81040c8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8104090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104094:	f003 0304 	and.w	r3, r3, #4
 8104098:	60fb      	str	r3, [r7, #12]
 810409a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810409c:	23c0      	movs	r3, #192	@ 0xc0
 810409e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81040a0:	2302      	movs	r3, #2
 81040a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81040a4:	2300      	movs	r3, #0
 81040a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81040a8:	2300      	movs	r3, #0
 81040aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 81040ac:	2303      	movs	r3, #3
 81040ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81040b0:	f107 031c 	add.w	r3, r7, #28
 81040b4:	4619      	mov	r1, r3
 81040b6:	4807      	ldr	r0, [pc, #28]	@ (81040d4 <HAL_TIM_Encoder_MspInit+0x100>)
 81040b8:	f002 fed8 	bl	8106e6c <HAL_GPIO_Init>
}
 81040bc:	bf00      	nop
 81040be:	3730      	adds	r7, #48	@ 0x30
 81040c0:	46bd      	mov	sp, r7
 81040c2:	bd80      	pop	{r7, pc}
 81040c4:	40000800 	.word	0x40000800
 81040c8:	58024400 	.word	0x58024400
 81040cc:	58020c00 	.word	0x58020c00
 81040d0:	40010400 	.word	0x40010400
 81040d4:	58020800 	.word	0x58020800

081040d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81040d8:	b580      	push	{r7, lr}
 81040da:	b08a      	sub	sp, #40	@ 0x28
 81040dc:	af00      	add	r7, sp, #0
 81040de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81040e0:	f107 0314 	add.w	r3, r7, #20
 81040e4:	2200      	movs	r2, #0
 81040e6:	601a      	str	r2, [r3, #0]
 81040e8:	605a      	str	r2, [r3, #4]
 81040ea:	609a      	str	r2, [r3, #8]
 81040ec:	60da      	str	r2, [r3, #12]
 81040ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	4a25      	ldr	r2, [pc, #148]	@ (810418c <HAL_TIM_MspPostInit+0xb4>)
 81040f6:	4293      	cmp	r3, r2
 81040f8:	d120      	bne.n	810413c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81040fa:	4b25      	ldr	r3, [pc, #148]	@ (8104190 <HAL_TIM_MspPostInit+0xb8>)
 81040fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104100:	4a23      	ldr	r2, [pc, #140]	@ (8104190 <HAL_TIM_MspPostInit+0xb8>)
 8104102:	f043 0310 	orr.w	r3, r3, #16
 8104106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810410a:	4b21      	ldr	r3, [pc, #132]	@ (8104190 <HAL_TIM_MspPostInit+0xb8>)
 810410c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104110:	f003 0310 	and.w	r3, r3, #16
 8104114:	613b      	str	r3, [r7, #16]
 8104116:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8104118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810411c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810411e:	2302      	movs	r3, #2
 8104120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104122:	2300      	movs	r3, #0
 8104124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104126:	2300      	movs	r3, #0
 8104128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810412a:	2301      	movs	r3, #1
 810412c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810412e:	f107 0314 	add.w	r3, r7, #20
 8104132:	4619      	mov	r1, r3
 8104134:	4817      	ldr	r0, [pc, #92]	@ (8104194 <HAL_TIM_MspPostInit+0xbc>)
 8104136:	f002 fe99 	bl	8106e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 810413a:	e023      	b.n	8104184 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	4a15      	ldr	r2, [pc, #84]	@ (8104198 <HAL_TIM_MspPostInit+0xc0>)
 8104142:	4293      	cmp	r3, r2
 8104144:	d11e      	bne.n	8104184 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8104146:	4b12      	ldr	r3, [pc, #72]	@ (8104190 <HAL_TIM_MspPostInit+0xb8>)
 8104148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810414c:	4a10      	ldr	r2, [pc, #64]	@ (8104190 <HAL_TIM_MspPostInit+0xb8>)
 810414e:	f043 0301 	orr.w	r3, r3, #1
 8104152:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104156:	4b0e      	ldr	r3, [pc, #56]	@ (8104190 <HAL_TIM_MspPostInit+0xb8>)
 8104158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810415c:	f003 0301 	and.w	r3, r3, #1
 8104160:	60fb      	str	r3, [r7, #12]
 8104162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8104164:	2340      	movs	r3, #64	@ 0x40
 8104166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104168:	2302      	movs	r3, #2
 810416a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810416c:	2300      	movs	r3, #0
 810416e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104170:	2300      	movs	r3, #0
 8104172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8104174:	2302      	movs	r3, #2
 8104176:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8104178:	f107 0314 	add.w	r3, r7, #20
 810417c:	4619      	mov	r1, r3
 810417e:	4807      	ldr	r0, [pc, #28]	@ (810419c <HAL_TIM_MspPostInit+0xc4>)
 8104180:	f002 fe74 	bl	8106e6c <HAL_GPIO_Init>
}
 8104184:	bf00      	nop
 8104186:	3728      	adds	r7, #40	@ 0x28
 8104188:	46bd      	mov	sp, r7
 810418a:	bd80      	pop	{r7, pc}
 810418c:	40010000 	.word	0x40010000
 8104190:	58024400 	.word	0x58024400
 8104194:	58021000 	.word	0x58021000
 8104198:	40000400 	.word	0x40000400
 810419c:	58020000 	.word	0x58020000

081041a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81041a0:	b580      	push	{r7, lr}
 81041a2:	b0be      	sub	sp, #248	@ 0xf8
 81041a4:	af00      	add	r7, sp, #0
 81041a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81041a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81041ac:	2200      	movs	r2, #0
 81041ae:	601a      	str	r2, [r3, #0]
 81041b0:	605a      	str	r2, [r3, #4]
 81041b2:	609a      	str	r2, [r3, #8]
 81041b4:	60da      	str	r2, [r3, #12]
 81041b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81041b8:	f107 0320 	add.w	r3, r7, #32
 81041bc:	22c0      	movs	r2, #192	@ 0xc0
 81041be:	2100      	movs	r1, #0
 81041c0:	4618      	mov	r0, r3
 81041c2:	f00c f9e9 	bl	8110598 <memset>
  if(huart->Instance==USART2)
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	681b      	ldr	r3, [r3, #0]
 81041ca:	4a63      	ldr	r2, [pc, #396]	@ (8104358 <HAL_UART_MspInit+0x1b8>)
 81041cc:	4293      	cmp	r3, r2
 81041ce:	d172      	bne.n	81042b6 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 81041d0:	f04f 0202 	mov.w	r2, #2
 81041d4:	f04f 0300 	mov.w	r3, #0
 81041d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81041dc:	2300      	movs	r3, #0
 81041de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81041e2:	f107 0320 	add.w	r3, r7, #32
 81041e6:	4618      	mov	r0, r3
 81041e8:	f004 f898 	bl	810831c <HAL_RCCEx_PeriphCLKConfig>
 81041ec:	4603      	mov	r3, r0
 81041ee:	2b00      	cmp	r3, #0
 81041f0:	d001      	beq.n	81041f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81041f2:	f7ff fd7f 	bl	8103cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 81041f6:	4b59      	ldr	r3, [pc, #356]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 81041f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81041fc:	4a57      	ldr	r2, [pc, #348]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 81041fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104202:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104206:	4b55      	ldr	r3, [pc, #340]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 8104208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810420c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104210:	61fb      	str	r3, [r7, #28]
 8104212:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8104214:	4b51      	ldr	r3, [pc, #324]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 8104216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810421a:	4a50      	ldr	r2, [pc, #320]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 810421c:	f043 0301 	orr.w	r3, r3, #1
 8104220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104224:	4b4d      	ldr	r3, [pc, #308]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 8104226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810422a:	f003 0301 	and.w	r3, r3, #1
 810422e:	61bb      	str	r3, [r7, #24]
 8104230:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8104232:	4b4a      	ldr	r3, [pc, #296]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 8104234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104238:	4a48      	ldr	r2, [pc, #288]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 810423a:	f043 0308 	orr.w	r3, r3, #8
 810423e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104242:	4b46      	ldr	r3, [pc, #280]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 8104244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104248:	f003 0308 	and.w	r3, r3, #8
 810424c:	617b      	str	r3, [r7, #20]
 810424e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8104250:	2308      	movs	r3, #8
 8104252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104256:	2302      	movs	r3, #2
 8104258:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810425c:	2300      	movs	r3, #0
 810425e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104262:	2300      	movs	r3, #0
 8104264:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8104268:	2307      	movs	r3, #7
 810426a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810426e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8104272:	4619      	mov	r1, r3
 8104274:	483a      	ldr	r0, [pc, #232]	@ (8104360 <HAL_UART_MspInit+0x1c0>)
 8104276:	f002 fdf9 	bl	8106e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810427a:	2320      	movs	r3, #32
 810427c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104280:	2302      	movs	r3, #2
 8104282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104286:	2300      	movs	r3, #0
 8104288:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810428c:	2300      	movs	r3, #0
 810428e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8104292:	2307      	movs	r3, #7
 8104294:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8104298:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810429c:	4619      	mov	r1, r3
 810429e:	4831      	ldr	r0, [pc, #196]	@ (8104364 <HAL_UART_MspInit+0x1c4>)
 81042a0:	f002 fde4 	bl	8106e6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 81042a4:	2200      	movs	r2, #0
 81042a6:	2100      	movs	r1, #0
 81042a8:	2026      	movs	r0, #38	@ 0x26
 81042aa:	f002 f832 	bl	8106312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 81042ae:	2026      	movs	r0, #38	@ 0x26
 81042b0:	f002 f849 	bl	8106346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81042b4:	e04b      	b.n	810434e <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	681b      	ldr	r3, [r3, #0]
 81042ba:	4a2b      	ldr	r2, [pc, #172]	@ (8104368 <HAL_UART_MspInit+0x1c8>)
 81042bc:	4293      	cmp	r3, r2
 81042be:	d146      	bne.n	810434e <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81042c0:	f04f 0202 	mov.w	r2, #2
 81042c4:	f04f 0300 	mov.w	r3, #0
 81042c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81042cc:	2300      	movs	r3, #0
 81042ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81042d2:	f107 0320 	add.w	r3, r7, #32
 81042d6:	4618      	mov	r0, r3
 81042d8:	f004 f820 	bl	810831c <HAL_RCCEx_PeriphCLKConfig>
 81042dc:	4603      	mov	r3, r0
 81042de:	2b00      	cmp	r3, #0
 81042e0:	d001      	beq.n	81042e6 <HAL_UART_MspInit+0x146>
      Error_Handler();
 81042e2:	f7ff fd07 	bl	8103cf4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 81042e6:	4b1d      	ldr	r3, [pc, #116]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 81042e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81042ec:	4a1b      	ldr	r2, [pc, #108]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 81042ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81042f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81042f6:	4b19      	ldr	r3, [pc, #100]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 81042f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81042fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8104300:	613b      	str	r3, [r7, #16]
 8104302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8104304:	4b15      	ldr	r3, [pc, #84]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 8104306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810430a:	4a14      	ldr	r2, [pc, #80]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 810430c:	f043 0308 	orr.w	r3, r3, #8
 8104310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104314:	4b11      	ldr	r3, [pc, #68]	@ (810435c <HAL_UART_MspInit+0x1bc>)
 8104316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810431a:	f003 0308 	and.w	r3, r3, #8
 810431e:	60fb      	str	r3, [r7, #12]
 8104320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8104322:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8104326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810432a:	2302      	movs	r3, #2
 810432c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8104330:	2300      	movs	r3, #0
 8104332:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8104336:	2300      	movs	r3, #0
 8104338:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810433c:	2307      	movs	r3, #7
 810433e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8104342:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8104346:	4619      	mov	r1, r3
 8104348:	4806      	ldr	r0, [pc, #24]	@ (8104364 <HAL_UART_MspInit+0x1c4>)
 810434a:	f002 fd8f 	bl	8106e6c <HAL_GPIO_Init>
}
 810434e:	bf00      	nop
 8104350:	37f8      	adds	r7, #248	@ 0xf8
 8104352:	46bd      	mov	sp, r7
 8104354:	bd80      	pop	{r7, pc}
 8104356:	bf00      	nop
 8104358:	40004400 	.word	0x40004400
 810435c:	58024400 	.word	0x58024400
 8104360:	58020000 	.word	0x58020000
 8104364:	58020c00 	.word	0x58020c00
 8104368:	40004800 	.word	0x40004800

0810436c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810436c:	b480      	push	{r7}
 810436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8104370:	bf00      	nop
 8104372:	e7fd      	b.n	8104370 <NMI_Handler+0x4>

08104374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8104374:	b480      	push	{r7}
 8104376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8104378:	bf00      	nop
 810437a:	e7fd      	b.n	8104378 <HardFault_Handler+0x4>

0810437c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810437c:	b480      	push	{r7}
 810437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8104380:	bf00      	nop
 8104382:	e7fd      	b.n	8104380 <MemManage_Handler+0x4>

08104384 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8104384:	b480      	push	{r7}
 8104386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8104388:	bf00      	nop
 810438a:	e7fd      	b.n	8104388 <BusFault_Handler+0x4>

0810438c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810438c:	b480      	push	{r7}
 810438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8104390:	bf00      	nop
 8104392:	e7fd      	b.n	8104390 <UsageFault_Handler+0x4>

08104394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8104394:	b480      	push	{r7}
 8104396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8104398:	bf00      	nop
 810439a:	46bd      	mov	sp, r7
 810439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043a0:	4770      	bx	lr

081043a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81043a2:	b480      	push	{r7}
 81043a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81043a6:	bf00      	nop
 81043a8:	46bd      	mov	sp, r7
 81043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043ae:	4770      	bx	lr

081043b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81043b0:	b480      	push	{r7}
 81043b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81043b4:	bf00      	nop
 81043b6:	46bd      	mov	sp, r7
 81043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043bc:	4770      	bx	lr

081043be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81043be:	b580      	push	{r7, lr}
 81043c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81043c2:	f000 f993 	bl	81046ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81043c6:	bf00      	nop
 81043c8:	bd80      	pop	{r7, pc}
	...

081043cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81043cc:	b580      	push	{r7, lr}
 81043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81043d0:	4802      	ldr	r0, [pc, #8]	@ (81043dc <TIM2_IRQHandler+0x10>)
 81043d2:	f006 fff7 	bl	810b3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81043d6:	bf00      	nop
 81043d8:	bd80      	pop	{r7, pc}
 81043da:	bf00      	nop
 81043dc:	10000394 	.word	0x10000394

081043e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 81043e0:	b580      	push	{r7, lr}
 81043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 81043e4:	4802      	ldr	r0, [pc, #8]	@ (81043f0 <USART2_IRQHandler+0x10>)
 81043e6:	f008 fa83 	bl	810c8f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 81043ea:	bf00      	nop
 81043ec:	bd80      	pop	{r7, pc}
 81043ee:	bf00      	nop
 81043f0:	10000510 	.word	0x10000510

081043f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81043f4:	b580      	push	{r7, lr}
 81043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 81043f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 81043fc:	f002 feff 	bl	81071fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8104400:	bf00      	nop
 8104402:	bd80      	pop	{r7, pc}

08104404 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8104404:	b580      	push	{r7, lr}
 8104406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8104408:	4802      	ldr	r0, [pc, #8]	@ (8104414 <TIM6_DAC_IRQHandler+0x10>)
 810440a:	f006 ffdb 	bl	810b3c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 810440e:	bf00      	nop
 8104410:	bd80      	pop	{r7, pc}
 8104412:	bf00      	nop
 8104414:	10000478 	.word	0x10000478

08104418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8104418:	b480      	push	{r7}
 810441a:	af00      	add	r7, sp, #0
  return 1;
 810441c:	2301      	movs	r3, #1
}
 810441e:	4618      	mov	r0, r3
 8104420:	46bd      	mov	sp, r7
 8104422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104426:	4770      	bx	lr

08104428 <_kill>:

int _kill(int pid, int sig)
{
 8104428:	b580      	push	{r7, lr}
 810442a:	b082      	sub	sp, #8
 810442c:	af00      	add	r7, sp, #0
 810442e:	6078      	str	r0, [r7, #4]
 8104430:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8104432:	f00c f903 	bl	811063c <__errno>
 8104436:	4603      	mov	r3, r0
 8104438:	2216      	movs	r2, #22
 810443a:	601a      	str	r2, [r3, #0]
  return -1;
 810443c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8104440:	4618      	mov	r0, r3
 8104442:	3708      	adds	r7, #8
 8104444:	46bd      	mov	sp, r7
 8104446:	bd80      	pop	{r7, pc}

08104448 <_exit>:

void _exit (int status)
{
 8104448:	b580      	push	{r7, lr}
 810444a:	b082      	sub	sp, #8
 810444c:	af00      	add	r7, sp, #0
 810444e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8104450:	f04f 31ff 	mov.w	r1, #4294967295
 8104454:	6878      	ldr	r0, [r7, #4]
 8104456:	f7ff ffe7 	bl	8104428 <_kill>
  while (1) {}    /* Make sure we hang here */
 810445a:	bf00      	nop
 810445c:	e7fd      	b.n	810445a <_exit+0x12>

0810445e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810445e:	b580      	push	{r7, lr}
 8104460:	b086      	sub	sp, #24
 8104462:	af00      	add	r7, sp, #0
 8104464:	60f8      	str	r0, [r7, #12]
 8104466:	60b9      	str	r1, [r7, #8]
 8104468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len=1;
 810446a:	2301      	movs	r3, #1
 810446c:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810446e:	2300      	movs	r3, #0
 8104470:	617b      	str	r3, [r7, #20]
 8104472:	e00a      	b.n	810448a <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 8104474:	f7ff fb4c 	bl	8103b10 <__io_getchar>
 8104478:	4601      	mov	r1, r0
 810447a:	68bb      	ldr	r3, [r7, #8]
 810447c:	1c5a      	adds	r2, r3, #1
 810447e:	60ba      	str	r2, [r7, #8]
 8104480:	b2ca      	uxtb	r2, r1
 8104482:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8104484:	697b      	ldr	r3, [r7, #20]
 8104486:	3301      	adds	r3, #1
 8104488:	617b      	str	r3, [r7, #20]
 810448a:	697a      	ldr	r2, [r7, #20]
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	429a      	cmp	r2, r3
 8104490:	dbf0      	blt.n	8104474 <_read+0x16>
  }

  return len;
 8104492:	687b      	ldr	r3, [r7, #4]
}
 8104494:	4618      	mov	r0, r3
 8104496:	3718      	adds	r7, #24
 8104498:	46bd      	mov	sp, r7
 810449a:	bd80      	pop	{r7, pc}

0810449c <_close>:
  }
  return len;
}

int _close(int file)
{
 810449c:	b480      	push	{r7}
 810449e:	b083      	sub	sp, #12
 81044a0:	af00      	add	r7, sp, #0
 81044a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81044a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81044a8:	4618      	mov	r0, r3
 81044aa:	370c      	adds	r7, #12
 81044ac:	46bd      	mov	sp, r7
 81044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044b2:	4770      	bx	lr

081044b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81044b4:	b480      	push	{r7}
 81044b6:	b083      	sub	sp, #12
 81044b8:	af00      	add	r7, sp, #0
 81044ba:	6078      	str	r0, [r7, #4]
 81044bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81044be:	683b      	ldr	r3, [r7, #0]
 81044c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81044c4:	605a      	str	r2, [r3, #4]
  return 0;
 81044c6:	2300      	movs	r3, #0
}
 81044c8:	4618      	mov	r0, r3
 81044ca:	370c      	adds	r7, #12
 81044cc:	46bd      	mov	sp, r7
 81044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044d2:	4770      	bx	lr

081044d4 <_isatty>:

int _isatty(int file)
{
 81044d4:	b480      	push	{r7}
 81044d6:	b083      	sub	sp, #12
 81044d8:	af00      	add	r7, sp, #0
 81044da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81044dc:	2301      	movs	r3, #1
}
 81044de:	4618      	mov	r0, r3
 81044e0:	370c      	adds	r7, #12
 81044e2:	46bd      	mov	sp, r7
 81044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044e8:	4770      	bx	lr

081044ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81044ea:	b480      	push	{r7}
 81044ec:	b085      	sub	sp, #20
 81044ee:	af00      	add	r7, sp, #0
 81044f0:	60f8      	str	r0, [r7, #12]
 81044f2:	60b9      	str	r1, [r7, #8]
 81044f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81044f6:	2300      	movs	r3, #0
}
 81044f8:	4618      	mov	r0, r3
 81044fa:	3714      	adds	r7, #20
 81044fc:	46bd      	mov	sp, r7
 81044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104502:	4770      	bx	lr

08104504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8104504:	b580      	push	{r7, lr}
 8104506:	b086      	sub	sp, #24
 8104508:	af00      	add	r7, sp, #0
 810450a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810450c:	4a14      	ldr	r2, [pc, #80]	@ (8104560 <_sbrk+0x5c>)
 810450e:	4b15      	ldr	r3, [pc, #84]	@ (8104564 <_sbrk+0x60>)
 8104510:	1ad3      	subs	r3, r2, r3
 8104512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8104514:	697b      	ldr	r3, [r7, #20]
 8104516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8104518:	4b13      	ldr	r3, [pc, #76]	@ (8104568 <_sbrk+0x64>)
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	2b00      	cmp	r3, #0
 810451e:	d102      	bne.n	8104526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8104520:	4b11      	ldr	r3, [pc, #68]	@ (8104568 <_sbrk+0x64>)
 8104522:	4a12      	ldr	r2, [pc, #72]	@ (810456c <_sbrk+0x68>)
 8104524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8104526:	4b10      	ldr	r3, [pc, #64]	@ (8104568 <_sbrk+0x64>)
 8104528:	681a      	ldr	r2, [r3, #0]
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	4413      	add	r3, r2
 810452e:	693a      	ldr	r2, [r7, #16]
 8104530:	429a      	cmp	r2, r3
 8104532:	d207      	bcs.n	8104544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8104534:	f00c f882 	bl	811063c <__errno>
 8104538:	4603      	mov	r3, r0
 810453a:	220c      	movs	r2, #12
 810453c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810453e:	f04f 33ff 	mov.w	r3, #4294967295
 8104542:	e009      	b.n	8104558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8104544:	4b08      	ldr	r3, [pc, #32]	@ (8104568 <_sbrk+0x64>)
 8104546:	681b      	ldr	r3, [r3, #0]
 8104548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810454a:	4b07      	ldr	r3, [pc, #28]	@ (8104568 <_sbrk+0x64>)
 810454c:	681a      	ldr	r2, [r3, #0]
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	4413      	add	r3, r2
 8104552:	4a05      	ldr	r2, [pc, #20]	@ (8104568 <_sbrk+0x64>)
 8104554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8104556:	68fb      	ldr	r3, [r7, #12]
}
 8104558:	4618      	mov	r0, r3
 810455a:	3718      	adds	r7, #24
 810455c:	46bd      	mov	sp, r7
 810455e:	bd80      	pop	{r7, pc}
 8104560:	10048000 	.word	0x10048000
 8104564:	00000400 	.word	0x00000400
 8104568:	10008b74 	.word	0x10008b74
 810456c:	10008cc8 	.word	0x10008cc8

08104570 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:



  ldr   sp, =_estack      /* set stack pointer */
 8104570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81045a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104574:	f7fc fdbe 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104578:	480c      	ldr	r0, [pc, #48]	@ (81045ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810457a:	490d      	ldr	r1, [pc, #52]	@ (81045b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810457c:	4a0d      	ldr	r2, [pc, #52]	@ (81045b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810457e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104580:	e002      	b.n	8104588 <LoopCopyDataInit>

08104582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8104582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104586:	3304      	adds	r3, #4

08104588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810458a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810458c:	d3f9      	bcc.n	8104582 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810458e:	4a0a      	ldr	r2, [pc, #40]	@ (81045b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104590:	4c0a      	ldr	r4, [pc, #40]	@ (81045bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8104592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104594:	e001      	b.n	810459a <LoopFillZerobss>

08104596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8104596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104598:	3204      	adds	r2, #4

0810459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810459a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810459c:	d3fb      	bcc.n	8104596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810459e:	f00c f853 	bl	8110648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81045a2:	f7fd fd3d 	bl	8102020 <main>
  bx  lr
 81045a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81045a8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81045ac:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81045b0:	1000026c 	.word	0x1000026c
  ldr r2, =_sidata
 81045b4:	08114194 	.word	0x08114194
  ldr r2, =_sbss
 81045b8:	10000270 	.word	0x10000270
  ldr r4, =_ebss
 81045bc:	10008cc8 	.word	0x10008cc8

081045c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81045c0:	e7fe      	b.n	81045c0 <ADC3_IRQHandler>
	...

081045c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81045c4:	b580      	push	{r7, lr}
 81045c6:	b082      	sub	sp, #8
 81045c8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81045ca:	4b28      	ldr	r3, [pc, #160]	@ (810466c <HAL_Init+0xa8>)
 81045cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045d0:	4a26      	ldr	r2, [pc, #152]	@ (810466c <HAL_Init+0xa8>)
 81045d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81045d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81045da:	4b24      	ldr	r3, [pc, #144]	@ (810466c <HAL_Init+0xa8>)
 81045dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81045e4:	603b      	str	r3, [r7, #0]
 81045e6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81045e8:	4b21      	ldr	r3, [pc, #132]	@ (8104670 <HAL_Init+0xac>)
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81045f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81045f4:	4a1e      	ldr	r2, [pc, #120]	@ (8104670 <HAL_Init+0xac>)
 81045f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81045fa:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81045fc:	4b1c      	ldr	r3, [pc, #112]	@ (8104670 <HAL_Init+0xac>)
 81045fe:	681b      	ldr	r3, [r3, #0]
 8104600:	4a1b      	ldr	r2, [pc, #108]	@ (8104670 <HAL_Init+0xac>)
 8104602:	f043 0301 	orr.w	r3, r3, #1
 8104606:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8104608:	2003      	movs	r0, #3
 810460a:	f001 fe77 	bl	81062fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810460e:	f003 fcad 	bl	8107f6c <HAL_RCC_GetSysClockFreq>
 8104612:	4602      	mov	r2, r0
 8104614:	4b15      	ldr	r3, [pc, #84]	@ (810466c <HAL_Init+0xa8>)
 8104616:	699b      	ldr	r3, [r3, #24]
 8104618:	0a1b      	lsrs	r3, r3, #8
 810461a:	f003 030f 	and.w	r3, r3, #15
 810461e:	4915      	ldr	r1, [pc, #84]	@ (8104674 <HAL_Init+0xb0>)
 8104620:	5ccb      	ldrb	r3, [r1, r3]
 8104622:	f003 031f 	and.w	r3, r3, #31
 8104626:	fa22 f303 	lsr.w	r3, r2, r3
 810462a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810462c:	4b0f      	ldr	r3, [pc, #60]	@ (810466c <HAL_Init+0xa8>)
 810462e:	699b      	ldr	r3, [r3, #24]
 8104630:	f003 030f 	and.w	r3, r3, #15
 8104634:	4a0f      	ldr	r2, [pc, #60]	@ (8104674 <HAL_Init+0xb0>)
 8104636:	5cd3      	ldrb	r3, [r2, r3]
 8104638:	f003 031f 	and.w	r3, r3, #31
 810463c:	687a      	ldr	r2, [r7, #4]
 810463e:	fa22 f303 	lsr.w	r3, r2, r3
 8104642:	4a0d      	ldr	r2, [pc, #52]	@ (8104678 <HAL_Init+0xb4>)
 8104644:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104646:	4b0c      	ldr	r3, [pc, #48]	@ (8104678 <HAL_Init+0xb4>)
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	4a0c      	ldr	r2, [pc, #48]	@ (810467c <HAL_Init+0xb8>)
 810464c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810464e:	2000      	movs	r0, #0
 8104650:	f000 f816 	bl	8104680 <HAL_InitTick>
 8104654:	4603      	mov	r3, r0
 8104656:	2b00      	cmp	r3, #0
 8104658:	d001      	beq.n	810465e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810465a:	2301      	movs	r3, #1
 810465c:	e002      	b.n	8104664 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810465e:	f7ff fb4f 	bl	8103d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104662:	2300      	movs	r3, #0
}
 8104664:	4618      	mov	r0, r3
 8104666:	3708      	adds	r7, #8
 8104668:	46bd      	mov	sp, r7
 810466a:	bd80      	pop	{r7, pc}
 810466c:	58024400 	.word	0x58024400
 8104670:	40024400 	.word	0x40024400
 8104674:	08113cc8 	.word	0x08113cc8
 8104678:	10000004 	.word	0x10000004
 810467c:	10000000 	.word	0x10000000

08104680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104680:	b580      	push	{r7, lr}
 8104682:	b082      	sub	sp, #8
 8104684:	af00      	add	r7, sp, #0
 8104686:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104688:	4b15      	ldr	r3, [pc, #84]	@ (81046e0 <HAL_InitTick+0x60>)
 810468a:	781b      	ldrb	r3, [r3, #0]
 810468c:	2b00      	cmp	r3, #0
 810468e:	d101      	bne.n	8104694 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8104690:	2301      	movs	r3, #1
 8104692:	e021      	b.n	81046d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8104694:	4b13      	ldr	r3, [pc, #76]	@ (81046e4 <HAL_InitTick+0x64>)
 8104696:	681a      	ldr	r2, [r3, #0]
 8104698:	4b11      	ldr	r3, [pc, #68]	@ (81046e0 <HAL_InitTick+0x60>)
 810469a:	781b      	ldrb	r3, [r3, #0]
 810469c:	4619      	mov	r1, r3
 810469e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81046a2:	fbb3 f3f1 	udiv	r3, r3, r1
 81046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 81046aa:	4618      	mov	r0, r3
 81046ac:	f001 fe59 	bl	8106362 <HAL_SYSTICK_Config>
 81046b0:	4603      	mov	r3, r0
 81046b2:	2b00      	cmp	r3, #0
 81046b4:	d001      	beq.n	81046ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81046b6:	2301      	movs	r3, #1
 81046b8:	e00e      	b.n	81046d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	2b0f      	cmp	r3, #15
 81046be:	d80a      	bhi.n	81046d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81046c0:	2200      	movs	r2, #0
 81046c2:	6879      	ldr	r1, [r7, #4]
 81046c4:	f04f 30ff 	mov.w	r0, #4294967295
 81046c8:	f001 fe23 	bl	8106312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81046cc:	4a06      	ldr	r2, [pc, #24]	@ (81046e8 <HAL_InitTick+0x68>)
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81046d2:	2300      	movs	r3, #0
 81046d4:	e000      	b.n	81046d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81046d6:	2301      	movs	r3, #1
}
 81046d8:	4618      	mov	r0, r3
 81046da:	3708      	adds	r7, #8
 81046dc:	46bd      	mov	sp, r7
 81046de:	bd80      	pop	{r7, pc}
 81046e0:	100000a0 	.word	0x100000a0
 81046e4:	10000000 	.word	0x10000000
 81046e8:	1000009c 	.word	0x1000009c

081046ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81046ec:	b480      	push	{r7}
 81046ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81046f0:	4b06      	ldr	r3, [pc, #24]	@ (810470c <HAL_IncTick+0x20>)
 81046f2:	781b      	ldrb	r3, [r3, #0]
 81046f4:	461a      	mov	r2, r3
 81046f6:	4b06      	ldr	r3, [pc, #24]	@ (8104710 <HAL_IncTick+0x24>)
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	4413      	add	r3, r2
 81046fc:	4a04      	ldr	r2, [pc, #16]	@ (8104710 <HAL_IncTick+0x24>)
 81046fe:	6013      	str	r3, [r2, #0]
}
 8104700:	bf00      	nop
 8104702:	46bd      	mov	sp, r7
 8104704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104708:	4770      	bx	lr
 810470a:	bf00      	nop
 810470c:	100000a0 	.word	0x100000a0
 8104710:	10008b78 	.word	0x10008b78

08104714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8104714:	b480      	push	{r7}
 8104716:	af00      	add	r7, sp, #0
  return uwTick;
 8104718:	4b03      	ldr	r3, [pc, #12]	@ (8104728 <HAL_GetTick+0x14>)
 810471a:	681b      	ldr	r3, [r3, #0]
}
 810471c:	4618      	mov	r0, r3
 810471e:	46bd      	mov	sp, r7
 8104720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104724:	4770      	bx	lr
 8104726:	bf00      	nop
 8104728:	10008b78 	.word	0x10008b78

0810472c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810472c:	b580      	push	{r7, lr}
 810472e:	b084      	sub	sp, #16
 8104730:	af00      	add	r7, sp, #0
 8104732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8104734:	f7ff ffee 	bl	8104714 <HAL_GetTick>
 8104738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810473e:	68fb      	ldr	r3, [r7, #12]
 8104740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104744:	d005      	beq.n	8104752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8104746:	4b0a      	ldr	r3, [pc, #40]	@ (8104770 <HAL_Delay+0x44>)
 8104748:	781b      	ldrb	r3, [r3, #0]
 810474a:	461a      	mov	r2, r3
 810474c:	68fb      	ldr	r3, [r7, #12]
 810474e:	4413      	add	r3, r2
 8104750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8104752:	bf00      	nop
 8104754:	f7ff ffde 	bl	8104714 <HAL_GetTick>
 8104758:	4602      	mov	r2, r0
 810475a:	68bb      	ldr	r3, [r7, #8]
 810475c:	1ad3      	subs	r3, r2, r3
 810475e:	68fa      	ldr	r2, [r7, #12]
 8104760:	429a      	cmp	r2, r3
 8104762:	d8f7      	bhi.n	8104754 <HAL_Delay+0x28>
  {
  }
}
 8104764:	bf00      	nop
 8104766:	bf00      	nop
 8104768:	3710      	adds	r7, #16
 810476a:	46bd      	mov	sp, r7
 810476c:	bd80      	pop	{r7, pc}
 810476e:	bf00      	nop
 8104770:	100000a0 	.word	0x100000a0

08104774 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8104774:	b480      	push	{r7}
 8104776:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8104778:	4b03      	ldr	r3, [pc, #12]	@ (8104788 <HAL_GetREVID+0x14>)
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	0c1b      	lsrs	r3, r3, #16
}
 810477e:	4618      	mov	r0, r3
 8104780:	46bd      	mov	sp, r7
 8104782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104786:	4770      	bx	lr
 8104788:	5c001000 	.word	0x5c001000

0810478c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 810478c:	b480      	push	{r7}
 810478e:	b083      	sub	sp, #12
 8104790:	af00      	add	r7, sp, #0
 8104792:	6078      	str	r0, [r7, #4]
 8104794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	689b      	ldr	r3, [r3, #8]
 810479a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 810479e:	683b      	ldr	r3, [r7, #0]
 81047a0:	431a      	orrs	r2, r3
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	609a      	str	r2, [r3, #8]
}
 81047a6:	bf00      	nop
 81047a8:	370c      	adds	r7, #12
 81047aa:	46bd      	mov	sp, r7
 81047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047b0:	4770      	bx	lr

081047b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81047b2:	b480      	push	{r7}
 81047b4:	b083      	sub	sp, #12
 81047b6:	af00      	add	r7, sp, #0
 81047b8:	6078      	str	r0, [r7, #4]
 81047ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	689b      	ldr	r3, [r3, #8]
 81047c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 81047c4:	683b      	ldr	r3, [r7, #0]
 81047c6:	431a      	orrs	r2, r3
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	609a      	str	r2, [r3, #8]
}
 81047cc:	bf00      	nop
 81047ce:	370c      	adds	r7, #12
 81047d0:	46bd      	mov	sp, r7
 81047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047d6:	4770      	bx	lr

081047d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81047d8:	b480      	push	{r7}
 81047da:	b083      	sub	sp, #12
 81047dc:	af00      	add	r7, sp, #0
 81047de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	689b      	ldr	r3, [r3, #8]
 81047e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 81047e8:	4618      	mov	r0, r3
 81047ea:	370c      	adds	r7, #12
 81047ec:	46bd      	mov	sp, r7
 81047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047f2:	4770      	bx	lr

081047f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 81047f4:	b480      	push	{r7}
 81047f6:	b087      	sub	sp, #28
 81047f8:	af00      	add	r7, sp, #0
 81047fa:	60f8      	str	r0, [r7, #12]
 81047fc:	60b9      	str	r1, [r7, #8]
 81047fe:	607a      	str	r2, [r7, #4]
 8104800:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8104802:	68fb      	ldr	r3, [r7, #12]
 8104804:	3360      	adds	r3, #96	@ 0x60
 8104806:	461a      	mov	r2, r3
 8104808:	68bb      	ldr	r3, [r7, #8]
 810480a:	009b      	lsls	r3, r3, #2
 810480c:	4413      	add	r3, r2
 810480e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8104810:	697b      	ldr	r3, [r7, #20]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 810481e:	683b      	ldr	r3, [r7, #0]
 8104820:	430b      	orrs	r3, r1
 8104822:	431a      	orrs	r2, r3
 8104824:	697b      	ldr	r3, [r7, #20]
 8104826:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8104828:	bf00      	nop
 810482a:	371c      	adds	r7, #28
 810482c:	46bd      	mov	sp, r7
 810482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104832:	4770      	bx	lr

08104834 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8104834:	b480      	push	{r7}
 8104836:	b085      	sub	sp, #20
 8104838:	af00      	add	r7, sp, #0
 810483a:	60f8      	str	r0, [r7, #12]
 810483c:	60b9      	str	r1, [r7, #8]
 810483e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8104840:	68fb      	ldr	r3, [r7, #12]
 8104842:	691b      	ldr	r3, [r3, #16]
 8104844:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8104848:	68bb      	ldr	r3, [r7, #8]
 810484a:	f003 031f 	and.w	r3, r3, #31
 810484e:	6879      	ldr	r1, [r7, #4]
 8104850:	fa01 f303 	lsl.w	r3, r1, r3
 8104854:	431a      	orrs	r2, r3
 8104856:	68fb      	ldr	r3, [r7, #12]
 8104858:	611a      	str	r2, [r3, #16]
}
 810485a:	bf00      	nop
 810485c:	3714      	adds	r7, #20
 810485e:	46bd      	mov	sp, r7
 8104860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104864:	4770      	bx	lr

08104866 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8104866:	b480      	push	{r7}
 8104868:	b087      	sub	sp, #28
 810486a:	af00      	add	r7, sp, #0
 810486c:	60f8      	str	r0, [r7, #12]
 810486e:	60b9      	str	r1, [r7, #8]
 8104870:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8104872:	68fb      	ldr	r3, [r7, #12]
 8104874:	3360      	adds	r3, #96	@ 0x60
 8104876:	461a      	mov	r2, r3
 8104878:	68bb      	ldr	r3, [r7, #8]
 810487a:	009b      	lsls	r3, r3, #2
 810487c:	4413      	add	r3, r2
 810487e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8104880:	697b      	ldr	r3, [r7, #20]
 8104882:	681b      	ldr	r3, [r3, #0]
 8104884:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	431a      	orrs	r2, r3
 810488c:	697b      	ldr	r3, [r7, #20]
 810488e:	601a      	str	r2, [r3, #0]
  }
}
 8104890:	bf00      	nop
 8104892:	371c      	adds	r7, #28
 8104894:	46bd      	mov	sp, r7
 8104896:	f85d 7b04 	ldr.w	r7, [sp], #4
 810489a:	4770      	bx	lr

0810489c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 810489c:	b480      	push	{r7}
 810489e:	b083      	sub	sp, #12
 81048a0:	af00      	add	r7, sp, #0
 81048a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	68db      	ldr	r3, [r3, #12]
 81048a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 81048ac:	2b00      	cmp	r3, #0
 81048ae:	d101      	bne.n	81048b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81048b0:	2301      	movs	r3, #1
 81048b2:	e000      	b.n	81048b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81048b4:	2300      	movs	r3, #0
}
 81048b6:	4618      	mov	r0, r3
 81048b8:	370c      	adds	r7, #12
 81048ba:	46bd      	mov	sp, r7
 81048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048c0:	4770      	bx	lr

081048c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81048c2:	b480      	push	{r7}
 81048c4:	b087      	sub	sp, #28
 81048c6:	af00      	add	r7, sp, #0
 81048c8:	60f8      	str	r0, [r7, #12]
 81048ca:	60b9      	str	r1, [r7, #8]
 81048cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81048ce:	68fb      	ldr	r3, [r7, #12]
 81048d0:	3330      	adds	r3, #48	@ 0x30
 81048d2:	461a      	mov	r2, r3
 81048d4:	68bb      	ldr	r3, [r7, #8]
 81048d6:	0a1b      	lsrs	r3, r3, #8
 81048d8:	009b      	lsls	r3, r3, #2
 81048da:	f003 030c 	and.w	r3, r3, #12
 81048de:	4413      	add	r3, r2
 81048e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81048e2:	697b      	ldr	r3, [r7, #20]
 81048e4:	681a      	ldr	r2, [r3, #0]
 81048e6:	68bb      	ldr	r3, [r7, #8]
 81048e8:	f003 031f 	and.w	r3, r3, #31
 81048ec:	211f      	movs	r1, #31
 81048ee:	fa01 f303 	lsl.w	r3, r1, r3
 81048f2:	43db      	mvns	r3, r3
 81048f4:	401a      	ands	r2, r3
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	0e9b      	lsrs	r3, r3, #26
 81048fa:	f003 011f 	and.w	r1, r3, #31
 81048fe:	68bb      	ldr	r3, [r7, #8]
 8104900:	f003 031f 	and.w	r3, r3, #31
 8104904:	fa01 f303 	lsl.w	r3, r1, r3
 8104908:	431a      	orrs	r2, r3
 810490a:	697b      	ldr	r3, [r7, #20]
 810490c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810490e:	bf00      	nop
 8104910:	371c      	adds	r7, #28
 8104912:	46bd      	mov	sp, r7
 8104914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104918:	4770      	bx	lr

0810491a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 810491a:	b480      	push	{r7}
 810491c:	b087      	sub	sp, #28
 810491e:	af00      	add	r7, sp, #0
 8104920:	60f8      	str	r0, [r7, #12]
 8104922:	60b9      	str	r1, [r7, #8]
 8104924:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	3314      	adds	r3, #20
 810492a:	461a      	mov	r2, r3
 810492c:	68bb      	ldr	r3, [r7, #8]
 810492e:	0e5b      	lsrs	r3, r3, #25
 8104930:	009b      	lsls	r3, r3, #2
 8104932:	f003 0304 	and.w	r3, r3, #4
 8104936:	4413      	add	r3, r2
 8104938:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810493a:	697b      	ldr	r3, [r7, #20]
 810493c:	681a      	ldr	r2, [r3, #0]
 810493e:	68bb      	ldr	r3, [r7, #8]
 8104940:	0d1b      	lsrs	r3, r3, #20
 8104942:	f003 031f 	and.w	r3, r3, #31
 8104946:	2107      	movs	r1, #7
 8104948:	fa01 f303 	lsl.w	r3, r1, r3
 810494c:	43db      	mvns	r3, r3
 810494e:	401a      	ands	r2, r3
 8104950:	68bb      	ldr	r3, [r7, #8]
 8104952:	0d1b      	lsrs	r3, r3, #20
 8104954:	f003 031f 	and.w	r3, r3, #31
 8104958:	6879      	ldr	r1, [r7, #4]
 810495a:	fa01 f303 	lsl.w	r3, r1, r3
 810495e:	431a      	orrs	r2, r3
 8104960:	697b      	ldr	r3, [r7, #20]
 8104962:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8104964:	bf00      	nop
 8104966:	371c      	adds	r7, #28
 8104968:	46bd      	mov	sp, r7
 810496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810496e:	4770      	bx	lr

08104970 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8104970:	b480      	push	{r7}
 8104972:	b085      	sub	sp, #20
 8104974:	af00      	add	r7, sp, #0
 8104976:	60f8      	str	r0, [r7, #12]
 8104978:	60b9      	str	r1, [r7, #8]
 810497a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 810497c:	68fb      	ldr	r3, [r7, #12]
 810497e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8104982:	68bb      	ldr	r3, [r7, #8]
 8104984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104988:	43db      	mvns	r3, r3
 810498a:	401a      	ands	r2, r3
 810498c:	687b      	ldr	r3, [r7, #4]
 810498e:	f003 0318 	and.w	r3, r3, #24
 8104992:	4908      	ldr	r1, [pc, #32]	@ (81049b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8104994:	40d9      	lsrs	r1, r3
 8104996:	68bb      	ldr	r3, [r7, #8]
 8104998:	400b      	ands	r3, r1
 810499a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810499e:	431a      	orrs	r2, r3
 81049a0:	68fb      	ldr	r3, [r7, #12]
 81049a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81049a6:	bf00      	nop
 81049a8:	3714      	adds	r7, #20
 81049aa:	46bd      	mov	sp, r7
 81049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049b0:	4770      	bx	lr
 81049b2:	bf00      	nop
 81049b4:	000fffff 	.word	0x000fffff

081049b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81049b8:	b480      	push	{r7}
 81049ba:	b083      	sub	sp, #12
 81049bc:	af00      	add	r7, sp, #0
 81049be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	689b      	ldr	r3, [r3, #8]
 81049c4:	f003 031f 	and.w	r3, r3, #31
}
 81049c8:	4618      	mov	r0, r3
 81049ca:	370c      	adds	r7, #12
 81049cc:	46bd      	mov	sp, r7
 81049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049d2:	4770      	bx	lr

081049d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81049d4:	b480      	push	{r7}
 81049d6:	b083      	sub	sp, #12
 81049d8:	af00      	add	r7, sp, #0
 81049da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	689b      	ldr	r3, [r3, #8]
 81049e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 81049e4:	4618      	mov	r0, r3
 81049e6:	370c      	adds	r7, #12
 81049e8:	46bd      	mov	sp, r7
 81049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049ee:	4770      	bx	lr

081049f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81049f0:	b480      	push	{r7}
 81049f2:	b083      	sub	sp, #12
 81049f4:	af00      	add	r7, sp, #0
 81049f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	689b      	ldr	r3, [r3, #8]
 81049fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8104a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104a04:	687a      	ldr	r2, [r7, #4]
 8104a06:	6093      	str	r3, [r2, #8]
}
 8104a08:	bf00      	nop
 8104a0a:	370c      	adds	r7, #12
 8104a0c:	46bd      	mov	sp, r7
 8104a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a12:	4770      	bx	lr

08104a14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8104a14:	b480      	push	{r7}
 8104a16:	b083      	sub	sp, #12
 8104a18:	af00      	add	r7, sp, #0
 8104a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	689b      	ldr	r3, [r3, #8]
 8104a20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104a28:	d101      	bne.n	8104a2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8104a2a:	2301      	movs	r3, #1
 8104a2c:	e000      	b.n	8104a30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8104a2e:	2300      	movs	r3, #0
}
 8104a30:	4618      	mov	r0, r3
 8104a32:	370c      	adds	r7, #12
 8104a34:	46bd      	mov	sp, r7
 8104a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a3a:	4770      	bx	lr

08104a3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8104a3c:	b480      	push	{r7}
 8104a3e:	b083      	sub	sp, #12
 8104a40:	af00      	add	r7, sp, #0
 8104a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	689b      	ldr	r3, [r3, #8]
 8104a48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8104a4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104a50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8104a58:	bf00      	nop
 8104a5a:	370c      	adds	r7, #12
 8104a5c:	46bd      	mov	sp, r7
 8104a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a62:	4770      	bx	lr

08104a64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8104a64:	b480      	push	{r7}
 8104a66:	b083      	sub	sp, #12
 8104a68:	af00      	add	r7, sp, #0
 8104a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8104a6c:	687b      	ldr	r3, [r7, #4]
 8104a6e:	689b      	ldr	r3, [r3, #8]
 8104a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8104a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104a78:	d101      	bne.n	8104a7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8104a7a:	2301      	movs	r3, #1
 8104a7c:	e000      	b.n	8104a80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8104a7e:	2300      	movs	r3, #0
}
 8104a80:	4618      	mov	r0, r3
 8104a82:	370c      	adds	r7, #12
 8104a84:	46bd      	mov	sp, r7
 8104a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a8a:	4770      	bx	lr

08104a8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8104a8c:	b480      	push	{r7}
 8104a8e:	b083      	sub	sp, #12
 8104a90:	af00      	add	r7, sp, #0
 8104a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104a94:	687b      	ldr	r3, [r7, #4]
 8104a96:	689b      	ldr	r3, [r3, #8]
 8104a98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104aa0:	f043 0201 	orr.w	r2, r3, #1
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8104aa8:	bf00      	nop
 8104aaa:	370c      	adds	r7, #12
 8104aac:	46bd      	mov	sp, r7
 8104aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ab2:	4770      	bx	lr

08104ab4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8104ab4:	b480      	push	{r7}
 8104ab6:	b083      	sub	sp, #12
 8104ab8:	af00      	add	r7, sp, #0
 8104aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	689b      	ldr	r3, [r3, #8]
 8104ac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104ac4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104ac8:	f043 0202 	orr.w	r2, r3, #2
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8104ad0:	bf00      	nop
 8104ad2:	370c      	adds	r7, #12
 8104ad4:	46bd      	mov	sp, r7
 8104ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ada:	4770      	bx	lr

08104adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8104adc:	b480      	push	{r7}
 8104ade:	b083      	sub	sp, #12
 8104ae0:	af00      	add	r7, sp, #0
 8104ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	689b      	ldr	r3, [r3, #8]
 8104ae8:	f003 0301 	and.w	r3, r3, #1
 8104aec:	2b01      	cmp	r3, #1
 8104aee:	d101      	bne.n	8104af4 <LL_ADC_IsEnabled+0x18>
 8104af0:	2301      	movs	r3, #1
 8104af2:	e000      	b.n	8104af6 <LL_ADC_IsEnabled+0x1a>
 8104af4:	2300      	movs	r3, #0
}
 8104af6:	4618      	mov	r0, r3
 8104af8:	370c      	adds	r7, #12
 8104afa:	46bd      	mov	sp, r7
 8104afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b00:	4770      	bx	lr

08104b02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8104b02:	b480      	push	{r7}
 8104b04:	b083      	sub	sp, #12
 8104b06:	af00      	add	r7, sp, #0
 8104b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	689b      	ldr	r3, [r3, #8]
 8104b0e:	f003 0302 	and.w	r3, r3, #2
 8104b12:	2b02      	cmp	r3, #2
 8104b14:	d101      	bne.n	8104b1a <LL_ADC_IsDisableOngoing+0x18>
 8104b16:	2301      	movs	r3, #1
 8104b18:	e000      	b.n	8104b1c <LL_ADC_IsDisableOngoing+0x1a>
 8104b1a:	2300      	movs	r3, #0
}
 8104b1c:	4618      	mov	r0, r3
 8104b1e:	370c      	adds	r7, #12
 8104b20:	46bd      	mov	sp, r7
 8104b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b26:	4770      	bx	lr

08104b28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8104b28:	b480      	push	{r7}
 8104b2a:	b083      	sub	sp, #12
 8104b2c:	af00      	add	r7, sp, #0
 8104b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	689b      	ldr	r3, [r3, #8]
 8104b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104b38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104b3c:	f043 0204 	orr.w	r2, r3, #4
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8104b44:	bf00      	nop
 8104b46:	370c      	adds	r7, #12
 8104b48:	46bd      	mov	sp, r7
 8104b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b4e:	4770      	bx	lr

08104b50 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8104b50:	b480      	push	{r7}
 8104b52:	b083      	sub	sp, #12
 8104b54:	af00      	add	r7, sp, #0
 8104b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	689b      	ldr	r3, [r3, #8]
 8104b5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104b60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104b64:	f043 0210 	orr.w	r2, r3, #16
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8104b6c:	bf00      	nop
 8104b6e:	370c      	adds	r7, #12
 8104b70:	46bd      	mov	sp, r7
 8104b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b76:	4770      	bx	lr

08104b78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8104b78:	b480      	push	{r7}
 8104b7a:	b083      	sub	sp, #12
 8104b7c:	af00      	add	r7, sp, #0
 8104b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	689b      	ldr	r3, [r3, #8]
 8104b84:	f003 0304 	and.w	r3, r3, #4
 8104b88:	2b04      	cmp	r3, #4
 8104b8a:	d101      	bne.n	8104b90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8104b8c:	2301      	movs	r3, #1
 8104b8e:	e000      	b.n	8104b92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8104b90:	2300      	movs	r3, #0
}
 8104b92:	4618      	mov	r0, r3
 8104b94:	370c      	adds	r7, #12
 8104b96:	46bd      	mov	sp, r7
 8104b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b9c:	4770      	bx	lr

08104b9e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8104b9e:	b480      	push	{r7}
 8104ba0:	b083      	sub	sp, #12
 8104ba2:	af00      	add	r7, sp, #0
 8104ba4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	689b      	ldr	r3, [r3, #8]
 8104baa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104bae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8104bb2:	f043 0220 	orr.w	r2, r3, #32
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8104bba:	bf00      	nop
 8104bbc:	370c      	adds	r7, #12
 8104bbe:	46bd      	mov	sp, r7
 8104bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bc4:	4770      	bx	lr

08104bc6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8104bc6:	b480      	push	{r7}
 8104bc8:	b083      	sub	sp, #12
 8104bca:	af00      	add	r7, sp, #0
 8104bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8104bce:	687b      	ldr	r3, [r7, #4]
 8104bd0:	689b      	ldr	r3, [r3, #8]
 8104bd2:	f003 0308 	and.w	r3, r3, #8
 8104bd6:	2b08      	cmp	r3, #8
 8104bd8:	d101      	bne.n	8104bde <LL_ADC_INJ_IsConversionOngoing+0x18>
 8104bda:	2301      	movs	r3, #1
 8104bdc:	e000      	b.n	8104be0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8104bde:	2300      	movs	r3, #0
}
 8104be0:	4618      	mov	r0, r3
 8104be2:	370c      	adds	r7, #12
 8104be4:	46bd      	mov	sp, r7
 8104be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bea:	4770      	bx	lr

08104bec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8104bec:	b590      	push	{r4, r7, lr}
 8104bee:	b089      	sub	sp, #36	@ 0x24
 8104bf0:	af00      	add	r7, sp, #0
 8104bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104bf4:	2300      	movs	r3, #0
 8104bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8104bf8:	2300      	movs	r3, #0
 8104bfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	2b00      	cmp	r3, #0
 8104c00:	d101      	bne.n	8104c06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8104c02:	2301      	movs	r3, #1
 8104c04:	e18f      	b.n	8104f26 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	68db      	ldr	r3, [r3, #12]
 8104c0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c10:	2b00      	cmp	r3, #0
 8104c12:	d109      	bne.n	8104c28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8104c14:	6878      	ldr	r0, [r7, #4]
 8104c16:	f7ff f88d 	bl	8103d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	2200      	movs	r2, #0
 8104c1e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	2200      	movs	r2, #0
 8104c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8104c28:	687b      	ldr	r3, [r7, #4]
 8104c2a:	681b      	ldr	r3, [r3, #0]
 8104c2c:	4618      	mov	r0, r3
 8104c2e:	f7ff fef1 	bl	8104a14 <LL_ADC_IsDeepPowerDownEnabled>
 8104c32:	4603      	mov	r3, r0
 8104c34:	2b00      	cmp	r3, #0
 8104c36:	d004      	beq.n	8104c42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8104c38:	687b      	ldr	r3, [r7, #4]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	4618      	mov	r0, r3
 8104c3e:	f7ff fed7 	bl	81049f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	4618      	mov	r0, r3
 8104c48:	f7ff ff0c 	bl	8104a64 <LL_ADC_IsInternalRegulatorEnabled>
 8104c4c:	4603      	mov	r3, r0
 8104c4e:	2b00      	cmp	r3, #0
 8104c50:	d114      	bne.n	8104c7c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	681b      	ldr	r3, [r3, #0]
 8104c56:	4618      	mov	r0, r3
 8104c58:	f7ff fef0 	bl	8104a3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8104c5c:	4b88      	ldr	r3, [pc, #544]	@ (8104e80 <HAL_ADC_Init+0x294>)
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	099b      	lsrs	r3, r3, #6
 8104c62:	4a88      	ldr	r2, [pc, #544]	@ (8104e84 <HAL_ADC_Init+0x298>)
 8104c64:	fba2 2303 	umull	r2, r3, r2, r3
 8104c68:	099b      	lsrs	r3, r3, #6
 8104c6a:	3301      	adds	r3, #1
 8104c6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8104c6e:	e002      	b.n	8104c76 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8104c70:	68bb      	ldr	r3, [r7, #8]
 8104c72:	3b01      	subs	r3, #1
 8104c74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8104c76:	68bb      	ldr	r3, [r7, #8]
 8104c78:	2b00      	cmp	r3, #0
 8104c7a:	d1f9      	bne.n	8104c70 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	4618      	mov	r0, r3
 8104c82:	f7ff feef 	bl	8104a64 <LL_ADC_IsInternalRegulatorEnabled>
 8104c86:	4603      	mov	r3, r0
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d10d      	bne.n	8104ca8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104c8c:	687b      	ldr	r3, [r7, #4]
 8104c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c90:	f043 0210 	orr.w	r2, r3, #16
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104c9c:	f043 0201 	orr.w	r2, r3, #1
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8104ca4:	2301      	movs	r3, #1
 8104ca6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	681b      	ldr	r3, [r3, #0]
 8104cac:	4618      	mov	r0, r3
 8104cae:	f7ff ff63 	bl	8104b78 <LL_ADC_REG_IsConversionOngoing>
 8104cb2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104cb8:	f003 0310 	and.w	r3, r3, #16
 8104cbc:	2b00      	cmp	r3, #0
 8104cbe:	f040 8129 	bne.w	8104f14 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8104cc2:	697b      	ldr	r3, [r7, #20]
 8104cc4:	2b00      	cmp	r3, #0
 8104cc6:	f040 8125 	bne.w	8104f14 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104cce:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8104cd2:	f043 0202 	orr.w	r2, r3, #2
 8104cd6:	687b      	ldr	r3, [r7, #4]
 8104cd8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	4618      	mov	r0, r3
 8104ce0:	f7ff fefc 	bl	8104adc <LL_ADC_IsEnabled>
 8104ce4:	4603      	mov	r3, r0
 8104ce6:	2b00      	cmp	r3, #0
 8104ce8:	d136      	bne.n	8104d58 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	4a66      	ldr	r2, [pc, #408]	@ (8104e88 <HAL_ADC_Init+0x29c>)
 8104cf0:	4293      	cmp	r3, r2
 8104cf2:	d004      	beq.n	8104cfe <HAL_ADC_Init+0x112>
 8104cf4:	687b      	ldr	r3, [r7, #4]
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	4a64      	ldr	r2, [pc, #400]	@ (8104e8c <HAL_ADC_Init+0x2a0>)
 8104cfa:	4293      	cmp	r3, r2
 8104cfc:	d10e      	bne.n	8104d1c <HAL_ADC_Init+0x130>
 8104cfe:	4862      	ldr	r0, [pc, #392]	@ (8104e88 <HAL_ADC_Init+0x29c>)
 8104d00:	f7ff feec 	bl	8104adc <LL_ADC_IsEnabled>
 8104d04:	4604      	mov	r4, r0
 8104d06:	4861      	ldr	r0, [pc, #388]	@ (8104e8c <HAL_ADC_Init+0x2a0>)
 8104d08:	f7ff fee8 	bl	8104adc <LL_ADC_IsEnabled>
 8104d0c:	4603      	mov	r3, r0
 8104d0e:	4323      	orrs	r3, r4
 8104d10:	2b00      	cmp	r3, #0
 8104d12:	bf0c      	ite	eq
 8104d14:	2301      	moveq	r3, #1
 8104d16:	2300      	movne	r3, #0
 8104d18:	b2db      	uxtb	r3, r3
 8104d1a:	e008      	b.n	8104d2e <HAL_ADC_Init+0x142>
 8104d1c:	485c      	ldr	r0, [pc, #368]	@ (8104e90 <HAL_ADC_Init+0x2a4>)
 8104d1e:	f7ff fedd 	bl	8104adc <LL_ADC_IsEnabled>
 8104d22:	4603      	mov	r3, r0
 8104d24:	2b00      	cmp	r3, #0
 8104d26:	bf0c      	ite	eq
 8104d28:	2301      	moveq	r3, #1
 8104d2a:	2300      	movne	r3, #0
 8104d2c:	b2db      	uxtb	r3, r3
 8104d2e:	2b00      	cmp	r3, #0
 8104d30:	d012      	beq.n	8104d58 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	681b      	ldr	r3, [r3, #0]
 8104d36:	4a54      	ldr	r2, [pc, #336]	@ (8104e88 <HAL_ADC_Init+0x29c>)
 8104d38:	4293      	cmp	r3, r2
 8104d3a:	d004      	beq.n	8104d46 <HAL_ADC_Init+0x15a>
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	4a52      	ldr	r2, [pc, #328]	@ (8104e8c <HAL_ADC_Init+0x2a0>)
 8104d42:	4293      	cmp	r3, r2
 8104d44:	d101      	bne.n	8104d4a <HAL_ADC_Init+0x15e>
 8104d46:	4a53      	ldr	r2, [pc, #332]	@ (8104e94 <HAL_ADC_Init+0x2a8>)
 8104d48:	e000      	b.n	8104d4c <HAL_ADC_Init+0x160>
 8104d4a:	4a53      	ldr	r2, [pc, #332]	@ (8104e98 <HAL_ADC_Init+0x2ac>)
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	685b      	ldr	r3, [r3, #4]
 8104d50:	4619      	mov	r1, r3
 8104d52:	4610      	mov	r0, r2
 8104d54:	f7ff fd1a 	bl	810478c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8104d58:	f7ff fd0c 	bl	8104774 <HAL_GetREVID>
 8104d5c:	4603      	mov	r3, r0
 8104d5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8104d62:	4293      	cmp	r3, r2
 8104d64:	d914      	bls.n	8104d90 <HAL_ADC_Init+0x1a4>
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	689b      	ldr	r3, [r3, #8]
 8104d6a:	2b10      	cmp	r3, #16
 8104d6c:	d110      	bne.n	8104d90 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	7d5b      	ldrb	r3, [r3, #21]
 8104d72:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104d78:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8104d7e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	7f1b      	ldrb	r3, [r3, #28]
 8104d84:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8104d86:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104d88:	f043 030c 	orr.w	r3, r3, #12
 8104d8c:	61bb      	str	r3, [r7, #24]
 8104d8e:	e00d      	b.n	8104dac <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	7d5b      	ldrb	r3, [r3, #21]
 8104d94:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8104d96:	687b      	ldr	r3, [r7, #4]
 8104d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104d9a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8104da0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	7f1b      	ldrb	r3, [r3, #28]
 8104da6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8104da8:	4313      	orrs	r3, r2
 8104daa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	7f1b      	ldrb	r3, [r3, #28]
 8104db0:	2b01      	cmp	r3, #1
 8104db2:	d106      	bne.n	8104dc2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8104db4:	687b      	ldr	r3, [r7, #4]
 8104db6:	6a1b      	ldr	r3, [r3, #32]
 8104db8:	3b01      	subs	r3, #1
 8104dba:	045b      	lsls	r3, r3, #17
 8104dbc:	69ba      	ldr	r2, [r7, #24]
 8104dbe:	4313      	orrs	r3, r2
 8104dc0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104dc6:	2b00      	cmp	r3, #0
 8104dc8:	d009      	beq.n	8104dde <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104dce:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104dd6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8104dd8:	69ba      	ldr	r2, [r7, #24]
 8104dda:	4313      	orrs	r3, r2
 8104ddc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	68da      	ldr	r2, [r3, #12]
 8104de4:	4b2d      	ldr	r3, [pc, #180]	@ (8104e9c <HAL_ADC_Init+0x2b0>)
 8104de6:	4013      	ands	r3, r2
 8104de8:	687a      	ldr	r2, [r7, #4]
 8104dea:	6812      	ldr	r2, [r2, #0]
 8104dec:	69b9      	ldr	r1, [r7, #24]
 8104dee:	430b      	orrs	r3, r1
 8104df0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	4618      	mov	r0, r3
 8104df8:	f7ff febe 	bl	8104b78 <LL_ADC_REG_IsConversionOngoing>
 8104dfc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	681b      	ldr	r3, [r3, #0]
 8104e02:	4618      	mov	r0, r3
 8104e04:	f7ff fedf 	bl	8104bc6 <LL_ADC_INJ_IsConversionOngoing>
 8104e08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8104e0a:	693b      	ldr	r3, [r7, #16]
 8104e0c:	2b00      	cmp	r3, #0
 8104e0e:	d15f      	bne.n	8104ed0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8104e10:	68fb      	ldr	r3, [r7, #12]
 8104e12:	2b00      	cmp	r3, #0
 8104e14:	d15c      	bne.n	8104ed0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	7d1b      	ldrb	r3, [r3, #20]
 8104e1a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8104e20:	4313      	orrs	r3, r2
 8104e22:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8104e24:	687b      	ldr	r3, [r7, #4]
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	68db      	ldr	r3, [r3, #12]
 8104e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8104e2e:	f023 0303 	bic.w	r3, r3, #3
 8104e32:	687a      	ldr	r2, [r7, #4]
 8104e34:	6812      	ldr	r2, [r2, #0]
 8104e36:	69b9      	ldr	r1, [r7, #24]
 8104e38:	430b      	orrs	r3, r1
 8104e3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8104e42:	2b01      	cmp	r3, #1
 8104e44:	d12e      	bne.n	8104ea4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104e4a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	691a      	ldr	r2, [r3, #16]
 8104e52:	4b13      	ldr	r3, [pc, #76]	@ (8104ea0 <HAL_ADC_Init+0x2b4>)
 8104e54:	4013      	ands	r3, r2
 8104e56:	687a      	ldr	r2, [r7, #4]
 8104e58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8104e5a:	3a01      	subs	r2, #1
 8104e5c:	0411      	lsls	r1, r2, #16
 8104e5e:	687a      	ldr	r2, [r7, #4]
 8104e60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8104e62:	4311      	orrs	r1, r2
 8104e64:	687a      	ldr	r2, [r7, #4]
 8104e66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8104e68:	4311      	orrs	r1, r2
 8104e6a:	687a      	ldr	r2, [r7, #4]
 8104e6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8104e6e:	430a      	orrs	r2, r1
 8104e70:	431a      	orrs	r2, r3
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	f042 0201 	orr.w	r2, r2, #1
 8104e7a:	611a      	str	r2, [r3, #16]
 8104e7c:	e01a      	b.n	8104eb4 <HAL_ADC_Init+0x2c8>
 8104e7e:	bf00      	nop
 8104e80:	10000000 	.word	0x10000000
 8104e84:	053e2d63 	.word	0x053e2d63
 8104e88:	40022000 	.word	0x40022000
 8104e8c:	40022100 	.word	0x40022100
 8104e90:	58026000 	.word	0x58026000
 8104e94:	40022300 	.word	0x40022300
 8104e98:	58026300 	.word	0x58026300
 8104e9c:	fff0c003 	.word	0xfff0c003
 8104ea0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	691a      	ldr	r2, [r3, #16]
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	f022 0201 	bic.w	r2, r2, #1
 8104eb2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	691b      	ldr	r3, [r3, #16]
 8104eba:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	430a      	orrs	r2, r1
 8104ec8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8104eca:	6878      	ldr	r0, [r7, #4]
 8104ecc:	f000 ff32 	bl	8105d34 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	68db      	ldr	r3, [r3, #12]
 8104ed4:	2b01      	cmp	r3, #1
 8104ed6:	d10c      	bne.n	8104ef2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104ede:	f023 010f 	bic.w	r1, r3, #15
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	699b      	ldr	r3, [r3, #24]
 8104ee6:	1e5a      	subs	r2, r3, #1
 8104ee8:	687b      	ldr	r3, [r7, #4]
 8104eea:	681b      	ldr	r3, [r3, #0]
 8104eec:	430a      	orrs	r2, r1
 8104eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8104ef0:	e007      	b.n	8104f02 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8104ef2:	687b      	ldr	r3, [r7, #4]
 8104ef4:	681b      	ldr	r3, [r3, #0]
 8104ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8104ef8:	687b      	ldr	r3, [r7, #4]
 8104efa:	681b      	ldr	r3, [r3, #0]
 8104efc:	f022 020f 	bic.w	r2, r2, #15
 8104f00:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f06:	f023 0303 	bic.w	r3, r3, #3
 8104f0a:	f043 0201 	orr.w	r2, r3, #1
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	655a      	str	r2, [r3, #84]	@ 0x54
 8104f12:	e007      	b.n	8104f24 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f18:	f043 0210 	orr.w	r2, r3, #16
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8104f20:	2301      	movs	r3, #1
 8104f22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8104f24:	7ffb      	ldrb	r3, [r7, #31]
}
 8104f26:	4618      	mov	r0, r3
 8104f28:	3724      	adds	r7, #36	@ 0x24
 8104f2a:	46bd      	mov	sp, r7
 8104f2c:	bd90      	pop	{r4, r7, pc}
 8104f2e:	bf00      	nop

08104f30 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8104f30:	b580      	push	{r7, lr}
 8104f32:	b086      	sub	sp, #24
 8104f34:	af00      	add	r7, sp, #0
 8104f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	4a5d      	ldr	r2, [pc, #372]	@ (81050b4 <HAL_ADC_Start+0x184>)
 8104f3e:	4293      	cmp	r3, r2
 8104f40:	d004      	beq.n	8104f4c <HAL_ADC_Start+0x1c>
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	4a5c      	ldr	r2, [pc, #368]	@ (81050b8 <HAL_ADC_Start+0x188>)
 8104f48:	4293      	cmp	r3, r2
 8104f4a:	d101      	bne.n	8104f50 <HAL_ADC_Start+0x20>
 8104f4c:	4b5b      	ldr	r3, [pc, #364]	@ (81050bc <HAL_ADC_Start+0x18c>)
 8104f4e:	e000      	b.n	8104f52 <HAL_ADC_Start+0x22>
 8104f50:	4b5b      	ldr	r3, [pc, #364]	@ (81050c0 <HAL_ADC_Start+0x190>)
 8104f52:	4618      	mov	r0, r3
 8104f54:	f7ff fd30 	bl	81049b8 <LL_ADC_GetMultimode>
 8104f58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	681b      	ldr	r3, [r3, #0]
 8104f5e:	4618      	mov	r0, r3
 8104f60:	f7ff fe0a 	bl	8104b78 <LL_ADC_REG_IsConversionOngoing>
 8104f64:	4603      	mov	r3, r0
 8104f66:	2b00      	cmp	r3, #0
 8104f68:	f040 809c 	bne.w	81050a4 <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8104f6c:	687b      	ldr	r3, [r7, #4]
 8104f6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8104f72:	2b01      	cmp	r3, #1
 8104f74:	d101      	bne.n	8104f7a <HAL_ADC_Start+0x4a>
 8104f76:	2302      	movs	r3, #2
 8104f78:	e097      	b.n	81050aa <HAL_ADC_Start+0x17a>
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	2201      	movs	r2, #1
 8104f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8104f82:	6878      	ldr	r0, [r7, #4]
 8104f84:	f000 fdec 	bl	8105b60 <ADC_Enable>
 8104f88:	4603      	mov	r3, r0
 8104f8a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8104f8c:	7dfb      	ldrb	r3, [r7, #23]
 8104f8e:	2b00      	cmp	r3, #0
 8104f90:	f040 8083 	bne.w	810509a <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104f9c:	f023 0301 	bic.w	r3, r3, #1
 8104fa0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	681b      	ldr	r3, [r3, #0]
 8104fac:	4a42      	ldr	r2, [pc, #264]	@ (81050b8 <HAL_ADC_Start+0x188>)
 8104fae:	4293      	cmp	r3, r2
 8104fb0:	d002      	beq.n	8104fb8 <HAL_ADC_Start+0x88>
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	e000      	b.n	8104fba <HAL_ADC_Start+0x8a>
 8104fb8:	4b3e      	ldr	r3, [pc, #248]	@ (81050b4 <HAL_ADC_Start+0x184>)
 8104fba:	687a      	ldr	r2, [r7, #4]
 8104fbc:	6812      	ldr	r2, [r2, #0]
 8104fbe:	4293      	cmp	r3, r2
 8104fc0:	d002      	beq.n	8104fc8 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8104fc2:	693b      	ldr	r3, [r7, #16]
 8104fc4:	2b00      	cmp	r3, #0
 8104fc6:	d105      	bne.n	8104fd4 <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104fcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104fe0:	d106      	bne.n	8104ff0 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8104fe2:	687b      	ldr	r3, [r7, #4]
 8104fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104fe6:	f023 0206 	bic.w	r2, r3, #6
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	659a      	str	r2, [r3, #88]	@ 0x58
 8104fee:	e002      	b.n	8104ff6 <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	2200      	movs	r2, #0
 8104ff4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	681b      	ldr	r3, [r3, #0]
 8104ffa:	221c      	movs	r2, #28
 8104ffc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	2200      	movs	r2, #0
 8105002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	4a2b      	ldr	r2, [pc, #172]	@ (81050b8 <HAL_ADC_Start+0x188>)
 810500c:	4293      	cmp	r3, r2
 810500e:	d002      	beq.n	8105016 <HAL_ADC_Start+0xe6>
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	e000      	b.n	8105018 <HAL_ADC_Start+0xe8>
 8105016:	4b27      	ldr	r3, [pc, #156]	@ (81050b4 <HAL_ADC_Start+0x184>)
 8105018:	687a      	ldr	r2, [r7, #4]
 810501a:	6812      	ldr	r2, [r2, #0]
 810501c:	4293      	cmp	r3, r2
 810501e:	d008      	beq.n	8105032 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8105020:	693b      	ldr	r3, [r7, #16]
 8105022:	2b00      	cmp	r3, #0
 8105024:	d005      	beq.n	8105032 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8105026:	693b      	ldr	r3, [r7, #16]
 8105028:	2b05      	cmp	r3, #5
 810502a:	d002      	beq.n	8105032 <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 810502c:	693b      	ldr	r3, [r7, #16]
 810502e:	2b09      	cmp	r3, #9
 8105030:	d114      	bne.n	810505c <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8105032:	687b      	ldr	r3, [r7, #4]
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	68db      	ldr	r3, [r3, #12]
 8105038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810503c:	2b00      	cmp	r3, #0
 810503e:	d007      	beq.n	8105050 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105044:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8105048:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8105050:	687b      	ldr	r3, [r7, #4]
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	4618      	mov	r0, r3
 8105056:	f7ff fd67 	bl	8104b28 <LL_ADC_REG_StartConversion>
 810505a:	e025      	b.n	81050a8 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105060:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	4a12      	ldr	r2, [pc, #72]	@ (81050b8 <HAL_ADC_Start+0x188>)
 810506e:	4293      	cmp	r3, r2
 8105070:	d002      	beq.n	8105078 <HAL_ADC_Start+0x148>
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	e000      	b.n	810507a <HAL_ADC_Start+0x14a>
 8105078:	4b0e      	ldr	r3, [pc, #56]	@ (81050b4 <HAL_ADC_Start+0x184>)
 810507a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 810507c:	68fb      	ldr	r3, [r7, #12]
 810507e:	68db      	ldr	r3, [r3, #12]
 8105080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105084:	2b00      	cmp	r3, #0
 8105086:	d00f      	beq.n	81050a8 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810508c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8105090:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	655a      	str	r2, [r3, #84]	@ 0x54
 8105098:	e006      	b.n	81050a8 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	2200      	movs	r2, #0
 810509e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 81050a2:	e001      	b.n	81050a8 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 81050a4:	2302      	movs	r3, #2
 81050a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 81050a8:	7dfb      	ldrb	r3, [r7, #23]
}
 81050aa:	4618      	mov	r0, r3
 81050ac:	3718      	adds	r7, #24
 81050ae:	46bd      	mov	sp, r7
 81050b0:	bd80      	pop	{r7, pc}
 81050b2:	bf00      	nop
 81050b4:	40022000 	.word	0x40022000
 81050b8:	40022100 	.word	0x40022100
 81050bc:	40022300 	.word	0x40022300
 81050c0:	58026300 	.word	0x58026300

081050c4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 81050c4:	b580      	push	{r7, lr}
 81050c6:	b084      	sub	sp, #16
 81050c8:	af00      	add	r7, sp, #0
 81050ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 81050cc:	687b      	ldr	r3, [r7, #4]
 81050ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81050d2:	2b01      	cmp	r3, #1
 81050d4:	d101      	bne.n	81050da <HAL_ADC_Stop+0x16>
 81050d6:	2302      	movs	r3, #2
 81050d8:	e023      	b.n	8105122 <HAL_ADC_Stop+0x5e>
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	2201      	movs	r2, #1
 81050de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 81050e2:	2103      	movs	r1, #3
 81050e4:	6878      	ldr	r0, [r7, #4]
 81050e6:	f000 fc7f 	bl	81059e8 <ADC_ConversionStop>
 81050ea:	4603      	mov	r3, r0
 81050ec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 81050ee:	7bfb      	ldrb	r3, [r7, #15]
 81050f0:	2b00      	cmp	r3, #0
 81050f2:	d111      	bne.n	8105118 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 81050f4:	6878      	ldr	r0, [r7, #4]
 81050f6:	f000 fdbd 	bl	8105c74 <ADC_Disable>
 81050fa:	4603      	mov	r3, r0
 81050fc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 81050fe:	7bfb      	ldrb	r3, [r7, #15]
 8105100:	2b00      	cmp	r3, #0
 8105102:	d109      	bne.n	8105118 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105108:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 810510c:	f023 0301 	bic.w	r3, r3, #1
 8105110:	f043 0201 	orr.w	r2, r3, #1
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	2200      	movs	r2, #0
 810511c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8105120:	7bfb      	ldrb	r3, [r7, #15]
}
 8105122:	4618      	mov	r0, r3
 8105124:	3710      	adds	r7, #16
 8105126:	46bd      	mov	sp, r7
 8105128:	bd80      	pop	{r7, pc}
	...

0810512c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 810512c:	b580      	push	{r7, lr}
 810512e:	b088      	sub	sp, #32
 8105130:	af00      	add	r7, sp, #0
 8105132:	6078      	str	r0, [r7, #4]
 8105134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	4a72      	ldr	r2, [pc, #456]	@ (8105304 <HAL_ADC_PollForConversion+0x1d8>)
 810513c:	4293      	cmp	r3, r2
 810513e:	d004      	beq.n	810514a <HAL_ADC_PollForConversion+0x1e>
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	681b      	ldr	r3, [r3, #0]
 8105144:	4a70      	ldr	r2, [pc, #448]	@ (8105308 <HAL_ADC_PollForConversion+0x1dc>)
 8105146:	4293      	cmp	r3, r2
 8105148:	d101      	bne.n	810514e <HAL_ADC_PollForConversion+0x22>
 810514a:	4b70      	ldr	r3, [pc, #448]	@ (810530c <HAL_ADC_PollForConversion+0x1e0>)
 810514c:	e000      	b.n	8105150 <HAL_ADC_PollForConversion+0x24>
 810514e:	4b70      	ldr	r3, [pc, #448]	@ (8105310 <HAL_ADC_PollForConversion+0x1e4>)
 8105150:	4618      	mov	r0, r3
 8105152:	f7ff fc31 	bl	81049b8 <LL_ADC_GetMultimode>
 8105156:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	691b      	ldr	r3, [r3, #16]
 810515c:	2b08      	cmp	r3, #8
 810515e:	d102      	bne.n	8105166 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8105160:	2308      	movs	r3, #8
 8105162:	61fb      	str	r3, [r7, #28]
 8105164:	e037      	b.n	81051d6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8105166:	697b      	ldr	r3, [r7, #20]
 8105168:	2b00      	cmp	r3, #0
 810516a:	d005      	beq.n	8105178 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810516c:	697b      	ldr	r3, [r7, #20]
 810516e:	2b05      	cmp	r3, #5
 8105170:	d002      	beq.n	8105178 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8105172:	697b      	ldr	r3, [r7, #20]
 8105174:	2b09      	cmp	r3, #9
 8105176:	d111      	bne.n	810519c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	68db      	ldr	r3, [r3, #12]
 810517e:	f003 0301 	and.w	r3, r3, #1
 8105182:	2b00      	cmp	r3, #0
 8105184:	d007      	beq.n	8105196 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810518a:	f043 0220 	orr.w	r2, r3, #32
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8105192:	2301      	movs	r3, #1
 8105194:	e0b1      	b.n	81052fa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8105196:	2304      	movs	r3, #4
 8105198:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 810519a:	e01c      	b.n	81051d6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 810519c:	687b      	ldr	r3, [r7, #4]
 810519e:	681b      	ldr	r3, [r3, #0]
 81051a0:	4a58      	ldr	r2, [pc, #352]	@ (8105304 <HAL_ADC_PollForConversion+0x1d8>)
 81051a2:	4293      	cmp	r3, r2
 81051a4:	d004      	beq.n	81051b0 <HAL_ADC_PollForConversion+0x84>
 81051a6:	687b      	ldr	r3, [r7, #4]
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	4a57      	ldr	r2, [pc, #348]	@ (8105308 <HAL_ADC_PollForConversion+0x1dc>)
 81051ac:	4293      	cmp	r3, r2
 81051ae:	d101      	bne.n	81051b4 <HAL_ADC_PollForConversion+0x88>
 81051b0:	4b56      	ldr	r3, [pc, #344]	@ (810530c <HAL_ADC_PollForConversion+0x1e0>)
 81051b2:	e000      	b.n	81051b6 <HAL_ADC_PollForConversion+0x8a>
 81051b4:	4b56      	ldr	r3, [pc, #344]	@ (8105310 <HAL_ADC_PollForConversion+0x1e4>)
 81051b6:	4618      	mov	r0, r3
 81051b8:	f7ff fc0c 	bl	81049d4 <LL_ADC_GetMultiDMATransfer>
 81051bc:	4603      	mov	r3, r0
 81051be:	2b00      	cmp	r3, #0
 81051c0:	d007      	beq.n	81051d2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81051c6:	f043 0220 	orr.w	r2, r3, #32
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 81051ce:	2301      	movs	r3, #1
 81051d0:	e093      	b.n	81052fa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 81051d2:	2304      	movs	r3, #4
 81051d4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 81051d6:	f7ff fa9d 	bl	8104714 <HAL_GetTick>
 81051da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81051dc:	e021      	b.n	8105222 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 81051de:	683b      	ldr	r3, [r7, #0]
 81051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81051e4:	d01d      	beq.n	8105222 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 81051e6:	f7ff fa95 	bl	8104714 <HAL_GetTick>
 81051ea:	4602      	mov	r2, r0
 81051ec:	693b      	ldr	r3, [r7, #16]
 81051ee:	1ad3      	subs	r3, r2, r3
 81051f0:	683a      	ldr	r2, [r7, #0]
 81051f2:	429a      	cmp	r2, r3
 81051f4:	d302      	bcc.n	81051fc <HAL_ADC_PollForConversion+0xd0>
 81051f6:	683b      	ldr	r3, [r7, #0]
 81051f8:	2b00      	cmp	r3, #0
 81051fa:	d112      	bne.n	8105222 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	681b      	ldr	r3, [r3, #0]
 8105200:	681a      	ldr	r2, [r3, #0]
 8105202:	69fb      	ldr	r3, [r7, #28]
 8105204:	4013      	ands	r3, r2
 8105206:	2b00      	cmp	r3, #0
 8105208:	d10b      	bne.n	8105222 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810520e:	f043 0204 	orr.w	r2, r3, #4
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	2200      	movs	r2, #0
 810521a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 810521e:	2303      	movs	r3, #3
 8105220:	e06b      	b.n	81052fa <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	681a      	ldr	r2, [r3, #0]
 8105228:	69fb      	ldr	r3, [r7, #28]
 810522a:	4013      	ands	r3, r2
 810522c:	2b00      	cmp	r3, #0
 810522e:	d0d6      	beq.n	81051de <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105234:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	4618      	mov	r0, r3
 8105242:	f7ff fb2b 	bl	810489c <LL_ADC_REG_IsTriggerSourceSWStart>
 8105246:	4603      	mov	r3, r0
 8105248:	2b00      	cmp	r3, #0
 810524a:	d01c      	beq.n	8105286 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	7d5b      	ldrb	r3, [r3, #21]
 8105250:	2b00      	cmp	r3, #0
 8105252:	d118      	bne.n	8105286 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	681b      	ldr	r3, [r3, #0]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	f003 0308 	and.w	r3, r3, #8
 810525e:	2b08      	cmp	r3, #8
 8105260:	d111      	bne.n	8105286 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105266:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105272:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8105276:	2b00      	cmp	r3, #0
 8105278:	d105      	bne.n	8105286 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810527e:	f043 0201 	orr.w	r2, r3, #1
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	4a1f      	ldr	r2, [pc, #124]	@ (8105308 <HAL_ADC_PollForConversion+0x1dc>)
 810528c:	4293      	cmp	r3, r2
 810528e:	d002      	beq.n	8105296 <HAL_ADC_PollForConversion+0x16a>
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	681b      	ldr	r3, [r3, #0]
 8105294:	e000      	b.n	8105298 <HAL_ADC_PollForConversion+0x16c>
 8105296:	4b1b      	ldr	r3, [pc, #108]	@ (8105304 <HAL_ADC_PollForConversion+0x1d8>)
 8105298:	687a      	ldr	r2, [r7, #4]
 810529a:	6812      	ldr	r2, [r2, #0]
 810529c:	4293      	cmp	r3, r2
 810529e:	d008      	beq.n	81052b2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81052a0:	697b      	ldr	r3, [r7, #20]
 81052a2:	2b00      	cmp	r3, #0
 81052a4:	d005      	beq.n	81052b2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81052a6:	697b      	ldr	r3, [r7, #20]
 81052a8:	2b05      	cmp	r3, #5
 81052aa:	d002      	beq.n	81052b2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81052ac:	697b      	ldr	r3, [r7, #20]
 81052ae:	2b09      	cmp	r3, #9
 81052b0:	d104      	bne.n	81052bc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	681b      	ldr	r3, [r3, #0]
 81052b6:	68db      	ldr	r3, [r3, #12]
 81052b8:	61bb      	str	r3, [r7, #24]
 81052ba:	e00c      	b.n	81052d6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	681b      	ldr	r3, [r3, #0]
 81052c0:	4a11      	ldr	r2, [pc, #68]	@ (8105308 <HAL_ADC_PollForConversion+0x1dc>)
 81052c2:	4293      	cmp	r3, r2
 81052c4:	d002      	beq.n	81052cc <HAL_ADC_PollForConversion+0x1a0>
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	681b      	ldr	r3, [r3, #0]
 81052ca:	e000      	b.n	81052ce <HAL_ADC_PollForConversion+0x1a2>
 81052cc:	4b0d      	ldr	r3, [pc, #52]	@ (8105304 <HAL_ADC_PollForConversion+0x1d8>)
 81052ce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81052d0:	68fb      	ldr	r3, [r7, #12]
 81052d2:	68db      	ldr	r3, [r3, #12]
 81052d4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 81052d6:	69fb      	ldr	r3, [r7, #28]
 81052d8:	2b08      	cmp	r3, #8
 81052da:	d104      	bne.n	81052e6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	681b      	ldr	r3, [r3, #0]
 81052e0:	2208      	movs	r2, #8
 81052e2:	601a      	str	r2, [r3, #0]
 81052e4:	e008      	b.n	81052f8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 81052e6:	69bb      	ldr	r3, [r7, #24]
 81052e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81052ec:	2b00      	cmp	r3, #0
 81052ee:	d103      	bne.n	81052f8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	220c      	movs	r2, #12
 81052f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 81052f8:	2300      	movs	r3, #0
}
 81052fa:	4618      	mov	r0, r3
 81052fc:	3720      	adds	r7, #32
 81052fe:	46bd      	mov	sp, r7
 8105300:	bd80      	pop	{r7, pc}
 8105302:	bf00      	nop
 8105304:	40022000 	.word	0x40022000
 8105308:	40022100 	.word	0x40022100
 810530c:	40022300 	.word	0x40022300
 8105310:	58026300 	.word	0x58026300

08105314 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8105314:	b480      	push	{r7}
 8105316:	b083      	sub	sp, #12
 8105318:	af00      	add	r7, sp, #0
 810531a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8105322:	4618      	mov	r0, r3
 8105324:	370c      	adds	r7, #12
 8105326:	46bd      	mov	sp, r7
 8105328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810532c:	4770      	bx	lr
	...

08105330 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8105330:	b590      	push	{r4, r7, lr}
 8105332:	b0a1      	sub	sp, #132	@ 0x84
 8105334:	af00      	add	r7, sp, #0
 8105336:	6078      	str	r0, [r7, #4]
 8105338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810533a:	2300      	movs	r3, #0
 810533c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8105340:	2300      	movs	r3, #0
 8105342:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8105344:	683b      	ldr	r3, [r7, #0]
 8105346:	68db      	ldr	r3, [r3, #12]
 8105348:	4a65      	ldr	r2, [pc, #404]	@ (81054e0 <HAL_ADC_ConfigChannel+0x1b0>)
 810534a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8105352:	2b01      	cmp	r3, #1
 8105354:	d101      	bne.n	810535a <HAL_ADC_ConfigChannel+0x2a>
 8105356:	2302      	movs	r3, #2
 8105358:	e32e      	b.n	81059b8 <HAL_ADC_ConfigChannel+0x688>
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	2201      	movs	r2, #1
 810535e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8105362:	687b      	ldr	r3, [r7, #4]
 8105364:	681b      	ldr	r3, [r3, #0]
 8105366:	4618      	mov	r0, r3
 8105368:	f7ff fc06 	bl	8104b78 <LL_ADC_REG_IsConversionOngoing>
 810536c:	4603      	mov	r3, r0
 810536e:	2b00      	cmp	r3, #0
 8105370:	f040 8313 	bne.w	810599a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8105374:	683b      	ldr	r3, [r7, #0]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	2b00      	cmp	r3, #0
 810537a:	db2c      	blt.n	81053d6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810537c:	683b      	ldr	r3, [r7, #0]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105384:	2b00      	cmp	r3, #0
 8105386:	d108      	bne.n	810539a <HAL_ADC_ConfigChannel+0x6a>
 8105388:	683b      	ldr	r3, [r7, #0]
 810538a:	681b      	ldr	r3, [r3, #0]
 810538c:	0e9b      	lsrs	r3, r3, #26
 810538e:	f003 031f 	and.w	r3, r3, #31
 8105392:	2201      	movs	r2, #1
 8105394:	fa02 f303 	lsl.w	r3, r2, r3
 8105398:	e016      	b.n	81053c8 <HAL_ADC_ConfigChannel+0x98>
 810539a:	683b      	ldr	r3, [r7, #0]
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81053a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81053a2:	fa93 f3a3 	rbit	r3, r3
 81053a6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81053a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81053aa:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81053ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81053ae:	2b00      	cmp	r3, #0
 81053b0:	d101      	bne.n	81053b6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 81053b2:	2320      	movs	r3, #32
 81053b4:	e003      	b.n	81053be <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 81053b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81053b8:	fab3 f383 	clz	r3, r3
 81053bc:	b2db      	uxtb	r3, r3
 81053be:	f003 031f 	and.w	r3, r3, #31
 81053c2:	2201      	movs	r2, #1
 81053c4:	fa02 f303 	lsl.w	r3, r2, r3
 81053c8:	687a      	ldr	r2, [r7, #4]
 81053ca:	6812      	ldr	r2, [r2, #0]
 81053cc:	69d1      	ldr	r1, [r2, #28]
 81053ce:	687a      	ldr	r2, [r7, #4]
 81053d0:	6812      	ldr	r2, [r2, #0]
 81053d2:	430b      	orrs	r3, r1
 81053d4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81053d6:	687b      	ldr	r3, [r7, #4]
 81053d8:	6818      	ldr	r0, [r3, #0]
 81053da:	683b      	ldr	r3, [r7, #0]
 81053dc:	6859      	ldr	r1, [r3, #4]
 81053de:	683b      	ldr	r3, [r7, #0]
 81053e0:	681b      	ldr	r3, [r3, #0]
 81053e2:	461a      	mov	r2, r3
 81053e4:	f7ff fa6d 	bl	81048c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	4618      	mov	r0, r3
 81053ee:	f7ff fbc3 	bl	8104b78 <LL_ADC_REG_IsConversionOngoing>
 81053f2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	681b      	ldr	r3, [r3, #0]
 81053f8:	4618      	mov	r0, r3
 81053fa:	f7ff fbe4 	bl	8104bc6 <LL_ADC_INJ_IsConversionOngoing>
 81053fe:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8105400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8105402:	2b00      	cmp	r3, #0
 8105404:	f040 80b8 	bne.w	8105578 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8105408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810540a:	2b00      	cmp	r3, #0
 810540c:	f040 80b4 	bne.w	8105578 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	6818      	ldr	r0, [r3, #0]
 8105414:	683b      	ldr	r3, [r7, #0]
 8105416:	6819      	ldr	r1, [r3, #0]
 8105418:	683b      	ldr	r3, [r7, #0]
 810541a:	689b      	ldr	r3, [r3, #8]
 810541c:	461a      	mov	r2, r3
 810541e:	f7ff fa7c 	bl	810491a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8105422:	4b30      	ldr	r3, [pc, #192]	@ (81054e4 <HAL_ADC_ConfigChannel+0x1b4>)
 8105424:	681b      	ldr	r3, [r3, #0]
 8105426:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 810542a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810542e:	d10b      	bne.n	8105448 <HAL_ADC_ConfigChannel+0x118>
 8105430:	683b      	ldr	r3, [r7, #0]
 8105432:	695a      	ldr	r2, [r3, #20]
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	681b      	ldr	r3, [r3, #0]
 8105438:	68db      	ldr	r3, [r3, #12]
 810543a:	089b      	lsrs	r3, r3, #2
 810543c:	f003 0307 	and.w	r3, r3, #7
 8105440:	005b      	lsls	r3, r3, #1
 8105442:	fa02 f303 	lsl.w	r3, r2, r3
 8105446:	e01d      	b.n	8105484 <HAL_ADC_ConfigChannel+0x154>
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	681b      	ldr	r3, [r3, #0]
 810544c:	68db      	ldr	r3, [r3, #12]
 810544e:	f003 0310 	and.w	r3, r3, #16
 8105452:	2b00      	cmp	r3, #0
 8105454:	d10b      	bne.n	810546e <HAL_ADC_ConfigChannel+0x13e>
 8105456:	683b      	ldr	r3, [r7, #0]
 8105458:	695a      	ldr	r2, [r3, #20]
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	68db      	ldr	r3, [r3, #12]
 8105460:	089b      	lsrs	r3, r3, #2
 8105462:	f003 0307 	and.w	r3, r3, #7
 8105466:	005b      	lsls	r3, r3, #1
 8105468:	fa02 f303 	lsl.w	r3, r2, r3
 810546c:	e00a      	b.n	8105484 <HAL_ADC_ConfigChannel+0x154>
 810546e:	683b      	ldr	r3, [r7, #0]
 8105470:	695a      	ldr	r2, [r3, #20]
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	681b      	ldr	r3, [r3, #0]
 8105476:	68db      	ldr	r3, [r3, #12]
 8105478:	089b      	lsrs	r3, r3, #2
 810547a:	f003 0304 	and.w	r3, r3, #4
 810547e:	005b      	lsls	r3, r3, #1
 8105480:	fa02 f303 	lsl.w	r3, r2, r3
 8105484:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8105486:	683b      	ldr	r3, [r7, #0]
 8105488:	691b      	ldr	r3, [r3, #16]
 810548a:	2b04      	cmp	r3, #4
 810548c:	d02c      	beq.n	81054e8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	6818      	ldr	r0, [r3, #0]
 8105492:	683b      	ldr	r3, [r7, #0]
 8105494:	6919      	ldr	r1, [r3, #16]
 8105496:	683b      	ldr	r3, [r7, #0]
 8105498:	681a      	ldr	r2, [r3, #0]
 810549a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810549c:	f7ff f9aa 	bl	81047f4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	6818      	ldr	r0, [r3, #0]
 81054a4:	683b      	ldr	r3, [r7, #0]
 81054a6:	6919      	ldr	r1, [r3, #16]
 81054a8:	683b      	ldr	r3, [r7, #0]
 81054aa:	7e5b      	ldrb	r3, [r3, #25]
 81054ac:	2b01      	cmp	r3, #1
 81054ae:	d102      	bne.n	81054b6 <HAL_ADC_ConfigChannel+0x186>
 81054b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81054b4:	e000      	b.n	81054b8 <HAL_ADC_ConfigChannel+0x188>
 81054b6:	2300      	movs	r3, #0
 81054b8:	461a      	mov	r2, r3
 81054ba:	f7ff f9d4 	bl	8104866 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	6818      	ldr	r0, [r3, #0]
 81054c2:	683b      	ldr	r3, [r7, #0]
 81054c4:	6919      	ldr	r1, [r3, #16]
 81054c6:	683b      	ldr	r3, [r7, #0]
 81054c8:	7e1b      	ldrb	r3, [r3, #24]
 81054ca:	2b01      	cmp	r3, #1
 81054cc:	d102      	bne.n	81054d4 <HAL_ADC_ConfigChannel+0x1a4>
 81054ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81054d2:	e000      	b.n	81054d6 <HAL_ADC_ConfigChannel+0x1a6>
 81054d4:	2300      	movs	r3, #0
 81054d6:	461a      	mov	r2, r3
 81054d8:	f7ff f9ac 	bl	8104834 <LL_ADC_SetDataRightShift>
 81054dc:	e04c      	b.n	8105578 <HAL_ADC_ConfigChannel+0x248>
 81054de:	bf00      	nop
 81054e0:	47ff0000 	.word	0x47ff0000
 81054e4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81054ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81054f2:	683b      	ldr	r3, [r7, #0]
 81054f4:	681b      	ldr	r3, [r3, #0]
 81054f6:	069b      	lsls	r3, r3, #26
 81054f8:	429a      	cmp	r2, r3
 81054fa:	d107      	bne.n	810550c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	681b      	ldr	r3, [r3, #0]
 8105500:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810550a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105512:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105516:	683b      	ldr	r3, [r7, #0]
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	069b      	lsls	r3, r3, #26
 810551c:	429a      	cmp	r2, r3
 810551e:	d107      	bne.n	8105530 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	681b      	ldr	r3, [r3, #0]
 8105524:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	681b      	ldr	r3, [r3, #0]
 810552a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810552e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105536:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810553a:	683b      	ldr	r3, [r7, #0]
 810553c:	681b      	ldr	r3, [r3, #0]
 810553e:	069b      	lsls	r3, r3, #26
 8105540:	429a      	cmp	r2, r3
 8105542:	d107      	bne.n	8105554 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	681b      	ldr	r3, [r3, #0]
 8105548:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	681b      	ldr	r3, [r3, #0]
 810554e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105552:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810555a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810555e:	683b      	ldr	r3, [r7, #0]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	069b      	lsls	r3, r3, #26
 8105564:	429a      	cmp	r2, r3
 8105566:	d107      	bne.n	8105578 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810556e:	687b      	ldr	r3, [r7, #4]
 8105570:	681b      	ldr	r3, [r3, #0]
 8105572:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8105576:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	681b      	ldr	r3, [r3, #0]
 810557c:	4618      	mov	r0, r3
 810557e:	f7ff faad 	bl	8104adc <LL_ADC_IsEnabled>
 8105582:	4603      	mov	r3, r0
 8105584:	2b00      	cmp	r3, #0
 8105586:	f040 8211 	bne.w	81059ac <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	6818      	ldr	r0, [r3, #0]
 810558e:	683b      	ldr	r3, [r7, #0]
 8105590:	6819      	ldr	r1, [r3, #0]
 8105592:	683b      	ldr	r3, [r7, #0]
 8105594:	68db      	ldr	r3, [r3, #12]
 8105596:	461a      	mov	r2, r3
 8105598:	f7ff f9ea 	bl	8104970 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810559c:	683b      	ldr	r3, [r7, #0]
 810559e:	68db      	ldr	r3, [r3, #12]
 81055a0:	4aa1      	ldr	r2, [pc, #644]	@ (8105828 <HAL_ADC_ConfigChannel+0x4f8>)
 81055a2:	4293      	cmp	r3, r2
 81055a4:	f040 812e 	bne.w	8105804 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81055ac:	683b      	ldr	r3, [r7, #0]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81055b4:	2b00      	cmp	r3, #0
 81055b6:	d10b      	bne.n	81055d0 <HAL_ADC_ConfigChannel+0x2a0>
 81055b8:	683b      	ldr	r3, [r7, #0]
 81055ba:	681b      	ldr	r3, [r3, #0]
 81055bc:	0e9b      	lsrs	r3, r3, #26
 81055be:	3301      	adds	r3, #1
 81055c0:	f003 031f 	and.w	r3, r3, #31
 81055c4:	2b09      	cmp	r3, #9
 81055c6:	bf94      	ite	ls
 81055c8:	2301      	movls	r3, #1
 81055ca:	2300      	movhi	r3, #0
 81055cc:	b2db      	uxtb	r3, r3
 81055ce:	e019      	b.n	8105604 <HAL_ADC_ConfigChannel+0x2d4>
 81055d0:	683b      	ldr	r3, [r7, #0]
 81055d2:	681b      	ldr	r3, [r3, #0]
 81055d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81055d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 81055d8:	fa93 f3a3 	rbit	r3, r3
 81055dc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 81055de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81055e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 81055e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81055e4:	2b00      	cmp	r3, #0
 81055e6:	d101      	bne.n	81055ec <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 81055e8:	2320      	movs	r3, #32
 81055ea:	e003      	b.n	81055f4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 81055ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81055ee:	fab3 f383 	clz	r3, r3
 81055f2:	b2db      	uxtb	r3, r3
 81055f4:	3301      	adds	r3, #1
 81055f6:	f003 031f 	and.w	r3, r3, #31
 81055fa:	2b09      	cmp	r3, #9
 81055fc:	bf94      	ite	ls
 81055fe:	2301      	movls	r3, #1
 8105600:	2300      	movhi	r3, #0
 8105602:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8105604:	2b00      	cmp	r3, #0
 8105606:	d079      	beq.n	81056fc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8105608:	683b      	ldr	r3, [r7, #0]
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105610:	2b00      	cmp	r3, #0
 8105612:	d107      	bne.n	8105624 <HAL_ADC_ConfigChannel+0x2f4>
 8105614:	683b      	ldr	r3, [r7, #0]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	0e9b      	lsrs	r3, r3, #26
 810561a:	3301      	adds	r3, #1
 810561c:	069b      	lsls	r3, r3, #26
 810561e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105622:	e015      	b.n	8105650 <HAL_ADC_ConfigChannel+0x320>
 8105624:	683b      	ldr	r3, [r7, #0]
 8105626:	681b      	ldr	r3, [r3, #0]
 8105628:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810562a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810562c:	fa93 f3a3 	rbit	r3, r3
 8105630:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8105632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8105634:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8105636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105638:	2b00      	cmp	r3, #0
 810563a:	d101      	bne.n	8105640 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 810563c:	2320      	movs	r3, #32
 810563e:	e003      	b.n	8105648 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8105640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105642:	fab3 f383 	clz	r3, r3
 8105646:	b2db      	uxtb	r3, r3
 8105648:	3301      	adds	r3, #1
 810564a:	069b      	lsls	r3, r3, #26
 810564c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105650:	683b      	ldr	r3, [r7, #0]
 8105652:	681b      	ldr	r3, [r3, #0]
 8105654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105658:	2b00      	cmp	r3, #0
 810565a:	d109      	bne.n	8105670 <HAL_ADC_ConfigChannel+0x340>
 810565c:	683b      	ldr	r3, [r7, #0]
 810565e:	681b      	ldr	r3, [r3, #0]
 8105660:	0e9b      	lsrs	r3, r3, #26
 8105662:	3301      	adds	r3, #1
 8105664:	f003 031f 	and.w	r3, r3, #31
 8105668:	2101      	movs	r1, #1
 810566a:	fa01 f303 	lsl.w	r3, r1, r3
 810566e:	e017      	b.n	81056a0 <HAL_ADC_ConfigChannel+0x370>
 8105670:	683b      	ldr	r3, [r7, #0]
 8105672:	681b      	ldr	r3, [r3, #0]
 8105674:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105678:	fa93 f3a3 	rbit	r3, r3
 810567c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 810567e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105680:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8105682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105684:	2b00      	cmp	r3, #0
 8105686:	d101      	bne.n	810568c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8105688:	2320      	movs	r3, #32
 810568a:	e003      	b.n	8105694 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 810568c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810568e:	fab3 f383 	clz	r3, r3
 8105692:	b2db      	uxtb	r3, r3
 8105694:	3301      	adds	r3, #1
 8105696:	f003 031f 	and.w	r3, r3, #31
 810569a:	2101      	movs	r1, #1
 810569c:	fa01 f303 	lsl.w	r3, r1, r3
 81056a0:	ea42 0103 	orr.w	r1, r2, r3
 81056a4:	683b      	ldr	r3, [r7, #0]
 81056a6:	681b      	ldr	r3, [r3, #0]
 81056a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81056ac:	2b00      	cmp	r3, #0
 81056ae:	d10a      	bne.n	81056c6 <HAL_ADC_ConfigChannel+0x396>
 81056b0:	683b      	ldr	r3, [r7, #0]
 81056b2:	681b      	ldr	r3, [r3, #0]
 81056b4:	0e9b      	lsrs	r3, r3, #26
 81056b6:	3301      	adds	r3, #1
 81056b8:	f003 021f 	and.w	r2, r3, #31
 81056bc:	4613      	mov	r3, r2
 81056be:	005b      	lsls	r3, r3, #1
 81056c0:	4413      	add	r3, r2
 81056c2:	051b      	lsls	r3, r3, #20
 81056c4:	e018      	b.n	81056f8 <HAL_ADC_ConfigChannel+0x3c8>
 81056c6:	683b      	ldr	r3, [r7, #0]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81056cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81056ce:	fa93 f3a3 	rbit	r3, r3
 81056d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 81056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81056d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 81056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056da:	2b00      	cmp	r3, #0
 81056dc:	d101      	bne.n	81056e2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 81056de:	2320      	movs	r3, #32
 81056e0:	e003      	b.n	81056ea <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 81056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056e4:	fab3 f383 	clz	r3, r3
 81056e8:	b2db      	uxtb	r3, r3
 81056ea:	3301      	adds	r3, #1
 81056ec:	f003 021f 	and.w	r2, r3, #31
 81056f0:	4613      	mov	r3, r2
 81056f2:	005b      	lsls	r3, r3, #1
 81056f4:	4413      	add	r3, r2
 81056f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81056f8:	430b      	orrs	r3, r1
 81056fa:	e07e      	b.n	81057fa <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81056fc:	683b      	ldr	r3, [r7, #0]
 81056fe:	681b      	ldr	r3, [r3, #0]
 8105700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105704:	2b00      	cmp	r3, #0
 8105706:	d107      	bne.n	8105718 <HAL_ADC_ConfigChannel+0x3e8>
 8105708:	683b      	ldr	r3, [r7, #0]
 810570a:	681b      	ldr	r3, [r3, #0]
 810570c:	0e9b      	lsrs	r3, r3, #26
 810570e:	3301      	adds	r3, #1
 8105710:	069b      	lsls	r3, r3, #26
 8105712:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105716:	e015      	b.n	8105744 <HAL_ADC_ConfigChannel+0x414>
 8105718:	683b      	ldr	r3, [r7, #0]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105720:	fa93 f3a3 	rbit	r3, r3
 8105724:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8105726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 810572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810572c:	2b00      	cmp	r3, #0
 810572e:	d101      	bne.n	8105734 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8105730:	2320      	movs	r3, #32
 8105732:	e003      	b.n	810573c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8105734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105736:	fab3 f383 	clz	r3, r3
 810573a:	b2db      	uxtb	r3, r3
 810573c:	3301      	adds	r3, #1
 810573e:	069b      	lsls	r3, r3, #26
 8105740:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8105744:	683b      	ldr	r3, [r7, #0]
 8105746:	681b      	ldr	r3, [r3, #0]
 8105748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810574c:	2b00      	cmp	r3, #0
 810574e:	d109      	bne.n	8105764 <HAL_ADC_ConfigChannel+0x434>
 8105750:	683b      	ldr	r3, [r7, #0]
 8105752:	681b      	ldr	r3, [r3, #0]
 8105754:	0e9b      	lsrs	r3, r3, #26
 8105756:	3301      	adds	r3, #1
 8105758:	f003 031f 	and.w	r3, r3, #31
 810575c:	2101      	movs	r1, #1
 810575e:	fa01 f303 	lsl.w	r3, r1, r3
 8105762:	e017      	b.n	8105794 <HAL_ADC_ConfigChannel+0x464>
 8105764:	683b      	ldr	r3, [r7, #0]
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810576a:	69fb      	ldr	r3, [r7, #28]
 810576c:	fa93 f3a3 	rbit	r3, r3
 8105770:	61bb      	str	r3, [r7, #24]
  return result;
 8105772:	69bb      	ldr	r3, [r7, #24]
 8105774:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8105776:	6a3b      	ldr	r3, [r7, #32]
 8105778:	2b00      	cmp	r3, #0
 810577a:	d101      	bne.n	8105780 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 810577c:	2320      	movs	r3, #32
 810577e:	e003      	b.n	8105788 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8105780:	6a3b      	ldr	r3, [r7, #32]
 8105782:	fab3 f383 	clz	r3, r3
 8105786:	b2db      	uxtb	r3, r3
 8105788:	3301      	adds	r3, #1
 810578a:	f003 031f 	and.w	r3, r3, #31
 810578e:	2101      	movs	r1, #1
 8105790:	fa01 f303 	lsl.w	r3, r1, r3
 8105794:	ea42 0103 	orr.w	r1, r2, r3
 8105798:	683b      	ldr	r3, [r7, #0]
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81057a0:	2b00      	cmp	r3, #0
 81057a2:	d10d      	bne.n	81057c0 <HAL_ADC_ConfigChannel+0x490>
 81057a4:	683b      	ldr	r3, [r7, #0]
 81057a6:	681b      	ldr	r3, [r3, #0]
 81057a8:	0e9b      	lsrs	r3, r3, #26
 81057aa:	3301      	adds	r3, #1
 81057ac:	f003 021f 	and.w	r2, r3, #31
 81057b0:	4613      	mov	r3, r2
 81057b2:	005b      	lsls	r3, r3, #1
 81057b4:	4413      	add	r3, r2
 81057b6:	3b1e      	subs	r3, #30
 81057b8:	051b      	lsls	r3, r3, #20
 81057ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81057be:	e01b      	b.n	81057f8 <HAL_ADC_ConfigChannel+0x4c8>
 81057c0:	683b      	ldr	r3, [r7, #0]
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81057c6:	693b      	ldr	r3, [r7, #16]
 81057c8:	fa93 f3a3 	rbit	r3, r3
 81057cc:	60fb      	str	r3, [r7, #12]
  return result;
 81057ce:	68fb      	ldr	r3, [r7, #12]
 81057d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 81057d2:	697b      	ldr	r3, [r7, #20]
 81057d4:	2b00      	cmp	r3, #0
 81057d6:	d101      	bne.n	81057dc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 81057d8:	2320      	movs	r3, #32
 81057da:	e003      	b.n	81057e4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 81057dc:	697b      	ldr	r3, [r7, #20]
 81057de:	fab3 f383 	clz	r3, r3
 81057e2:	b2db      	uxtb	r3, r3
 81057e4:	3301      	adds	r3, #1
 81057e6:	f003 021f 	and.w	r2, r3, #31
 81057ea:	4613      	mov	r3, r2
 81057ec:	005b      	lsls	r3, r3, #1
 81057ee:	4413      	add	r3, r2
 81057f0:	3b1e      	subs	r3, #30
 81057f2:	051b      	lsls	r3, r3, #20
 81057f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81057f8:	430b      	orrs	r3, r1
 81057fa:	683a      	ldr	r2, [r7, #0]
 81057fc:	6892      	ldr	r2, [r2, #8]
 81057fe:	4619      	mov	r1, r3
 8105800:	f7ff f88b 	bl	810491a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8105804:	683b      	ldr	r3, [r7, #0]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	2b00      	cmp	r3, #0
 810580a:	f280 80cf 	bge.w	81059ac <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	681b      	ldr	r3, [r3, #0]
 8105812:	4a06      	ldr	r2, [pc, #24]	@ (810582c <HAL_ADC_ConfigChannel+0x4fc>)
 8105814:	4293      	cmp	r3, r2
 8105816:	d004      	beq.n	8105822 <HAL_ADC_ConfigChannel+0x4f2>
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	681b      	ldr	r3, [r3, #0]
 810581c:	4a04      	ldr	r2, [pc, #16]	@ (8105830 <HAL_ADC_ConfigChannel+0x500>)
 810581e:	4293      	cmp	r3, r2
 8105820:	d10a      	bne.n	8105838 <HAL_ADC_ConfigChannel+0x508>
 8105822:	4b04      	ldr	r3, [pc, #16]	@ (8105834 <HAL_ADC_ConfigChannel+0x504>)
 8105824:	e009      	b.n	810583a <HAL_ADC_ConfigChannel+0x50a>
 8105826:	bf00      	nop
 8105828:	47ff0000 	.word	0x47ff0000
 810582c:	40022000 	.word	0x40022000
 8105830:	40022100 	.word	0x40022100
 8105834:	40022300 	.word	0x40022300
 8105838:	4b61      	ldr	r3, [pc, #388]	@ (81059c0 <HAL_ADC_ConfigChannel+0x690>)
 810583a:	4618      	mov	r0, r3
 810583c:	f7fe ffcc 	bl	81047d8 <LL_ADC_GetCommonPathInternalCh>
 8105840:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	4a5f      	ldr	r2, [pc, #380]	@ (81059c4 <HAL_ADC_ConfigChannel+0x694>)
 8105848:	4293      	cmp	r3, r2
 810584a:	d004      	beq.n	8105856 <HAL_ADC_ConfigChannel+0x526>
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	681b      	ldr	r3, [r3, #0]
 8105850:	4a5d      	ldr	r2, [pc, #372]	@ (81059c8 <HAL_ADC_ConfigChannel+0x698>)
 8105852:	4293      	cmp	r3, r2
 8105854:	d10e      	bne.n	8105874 <HAL_ADC_ConfigChannel+0x544>
 8105856:	485b      	ldr	r0, [pc, #364]	@ (81059c4 <HAL_ADC_ConfigChannel+0x694>)
 8105858:	f7ff f940 	bl	8104adc <LL_ADC_IsEnabled>
 810585c:	4604      	mov	r4, r0
 810585e:	485a      	ldr	r0, [pc, #360]	@ (81059c8 <HAL_ADC_ConfigChannel+0x698>)
 8105860:	f7ff f93c 	bl	8104adc <LL_ADC_IsEnabled>
 8105864:	4603      	mov	r3, r0
 8105866:	4323      	orrs	r3, r4
 8105868:	2b00      	cmp	r3, #0
 810586a:	bf0c      	ite	eq
 810586c:	2301      	moveq	r3, #1
 810586e:	2300      	movne	r3, #0
 8105870:	b2db      	uxtb	r3, r3
 8105872:	e008      	b.n	8105886 <HAL_ADC_ConfigChannel+0x556>
 8105874:	4855      	ldr	r0, [pc, #340]	@ (81059cc <HAL_ADC_ConfigChannel+0x69c>)
 8105876:	f7ff f931 	bl	8104adc <LL_ADC_IsEnabled>
 810587a:	4603      	mov	r3, r0
 810587c:	2b00      	cmp	r3, #0
 810587e:	bf0c      	ite	eq
 8105880:	2301      	moveq	r3, #1
 8105882:	2300      	movne	r3, #0
 8105884:	b2db      	uxtb	r3, r3
 8105886:	2b00      	cmp	r3, #0
 8105888:	d07d      	beq.n	8105986 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 810588a:	683b      	ldr	r3, [r7, #0]
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	4a50      	ldr	r2, [pc, #320]	@ (81059d0 <HAL_ADC_ConfigChannel+0x6a0>)
 8105890:	4293      	cmp	r3, r2
 8105892:	d130      	bne.n	81058f6 <HAL_ADC_ConfigChannel+0x5c6>
 8105894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810589a:	2b00      	cmp	r3, #0
 810589c:	d12b      	bne.n	81058f6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810589e:	687b      	ldr	r3, [r7, #4]
 81058a0:	681b      	ldr	r3, [r3, #0]
 81058a2:	4a4a      	ldr	r2, [pc, #296]	@ (81059cc <HAL_ADC_ConfigChannel+0x69c>)
 81058a4:	4293      	cmp	r3, r2
 81058a6:	f040 8081 	bne.w	81059ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	4a45      	ldr	r2, [pc, #276]	@ (81059c4 <HAL_ADC_ConfigChannel+0x694>)
 81058b0:	4293      	cmp	r3, r2
 81058b2:	d004      	beq.n	81058be <HAL_ADC_ConfigChannel+0x58e>
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	681b      	ldr	r3, [r3, #0]
 81058b8:	4a43      	ldr	r2, [pc, #268]	@ (81059c8 <HAL_ADC_ConfigChannel+0x698>)
 81058ba:	4293      	cmp	r3, r2
 81058bc:	d101      	bne.n	81058c2 <HAL_ADC_ConfigChannel+0x592>
 81058be:	4a45      	ldr	r2, [pc, #276]	@ (81059d4 <HAL_ADC_ConfigChannel+0x6a4>)
 81058c0:	e000      	b.n	81058c4 <HAL_ADC_ConfigChannel+0x594>
 81058c2:	4a3f      	ldr	r2, [pc, #252]	@ (81059c0 <HAL_ADC_ConfigChannel+0x690>)
 81058c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81058c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81058ca:	4619      	mov	r1, r3
 81058cc:	4610      	mov	r0, r2
 81058ce:	f7fe ff70 	bl	81047b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81058d2:	4b41      	ldr	r3, [pc, #260]	@ (81059d8 <HAL_ADC_ConfigChannel+0x6a8>)
 81058d4:	681b      	ldr	r3, [r3, #0]
 81058d6:	099b      	lsrs	r3, r3, #6
 81058d8:	4a40      	ldr	r2, [pc, #256]	@ (81059dc <HAL_ADC_ConfigChannel+0x6ac>)
 81058da:	fba2 2303 	umull	r2, r3, r2, r3
 81058de:	099b      	lsrs	r3, r3, #6
 81058e0:	3301      	adds	r3, #1
 81058e2:	005b      	lsls	r3, r3, #1
 81058e4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81058e6:	e002      	b.n	81058ee <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 81058e8:	68bb      	ldr	r3, [r7, #8]
 81058ea:	3b01      	subs	r3, #1
 81058ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81058ee:	68bb      	ldr	r3, [r7, #8]
 81058f0:	2b00      	cmp	r3, #0
 81058f2:	d1f9      	bne.n	81058e8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81058f4:	e05a      	b.n	81059ac <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 81058f6:	683b      	ldr	r3, [r7, #0]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	4a39      	ldr	r2, [pc, #228]	@ (81059e0 <HAL_ADC_ConfigChannel+0x6b0>)
 81058fc:	4293      	cmp	r3, r2
 81058fe:	d11e      	bne.n	810593e <HAL_ADC_ConfigChannel+0x60e>
 8105900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105902:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105906:	2b00      	cmp	r3, #0
 8105908:	d119      	bne.n	810593e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810590a:	687b      	ldr	r3, [r7, #4]
 810590c:	681b      	ldr	r3, [r3, #0]
 810590e:	4a2f      	ldr	r2, [pc, #188]	@ (81059cc <HAL_ADC_ConfigChannel+0x69c>)
 8105910:	4293      	cmp	r3, r2
 8105912:	d14b      	bne.n	81059ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	4a2a      	ldr	r2, [pc, #168]	@ (81059c4 <HAL_ADC_ConfigChannel+0x694>)
 810591a:	4293      	cmp	r3, r2
 810591c:	d004      	beq.n	8105928 <HAL_ADC_ConfigChannel+0x5f8>
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	681b      	ldr	r3, [r3, #0]
 8105922:	4a29      	ldr	r2, [pc, #164]	@ (81059c8 <HAL_ADC_ConfigChannel+0x698>)
 8105924:	4293      	cmp	r3, r2
 8105926:	d101      	bne.n	810592c <HAL_ADC_ConfigChannel+0x5fc>
 8105928:	4a2a      	ldr	r2, [pc, #168]	@ (81059d4 <HAL_ADC_ConfigChannel+0x6a4>)
 810592a:	e000      	b.n	810592e <HAL_ADC_ConfigChannel+0x5fe>
 810592c:	4a24      	ldr	r2, [pc, #144]	@ (81059c0 <HAL_ADC_ConfigChannel+0x690>)
 810592e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105930:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8105934:	4619      	mov	r1, r3
 8105936:	4610      	mov	r0, r2
 8105938:	f7fe ff3b 	bl	81047b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810593c:	e036      	b.n	81059ac <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810593e:	683b      	ldr	r3, [r7, #0]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	4a28      	ldr	r2, [pc, #160]	@ (81059e4 <HAL_ADC_ConfigChannel+0x6b4>)
 8105944:	4293      	cmp	r3, r2
 8105946:	d131      	bne.n	81059ac <HAL_ADC_ConfigChannel+0x67c>
 8105948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810594a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810594e:	2b00      	cmp	r3, #0
 8105950:	d12c      	bne.n	81059ac <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8105952:	687b      	ldr	r3, [r7, #4]
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	4a1d      	ldr	r2, [pc, #116]	@ (81059cc <HAL_ADC_ConfigChannel+0x69c>)
 8105958:	4293      	cmp	r3, r2
 810595a:	d127      	bne.n	81059ac <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	681b      	ldr	r3, [r3, #0]
 8105960:	4a18      	ldr	r2, [pc, #96]	@ (81059c4 <HAL_ADC_ConfigChannel+0x694>)
 8105962:	4293      	cmp	r3, r2
 8105964:	d004      	beq.n	8105970 <HAL_ADC_ConfigChannel+0x640>
 8105966:	687b      	ldr	r3, [r7, #4]
 8105968:	681b      	ldr	r3, [r3, #0]
 810596a:	4a17      	ldr	r2, [pc, #92]	@ (81059c8 <HAL_ADC_ConfigChannel+0x698>)
 810596c:	4293      	cmp	r3, r2
 810596e:	d101      	bne.n	8105974 <HAL_ADC_ConfigChannel+0x644>
 8105970:	4a18      	ldr	r2, [pc, #96]	@ (81059d4 <HAL_ADC_ConfigChannel+0x6a4>)
 8105972:	e000      	b.n	8105976 <HAL_ADC_ConfigChannel+0x646>
 8105974:	4a12      	ldr	r2, [pc, #72]	@ (81059c0 <HAL_ADC_ConfigChannel+0x690>)
 8105976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105978:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810597c:	4619      	mov	r1, r3
 810597e:	4610      	mov	r0, r2
 8105980:	f7fe ff17 	bl	81047b2 <LL_ADC_SetCommonPathInternalCh>
 8105984:	e012      	b.n	81059ac <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810598a:	f043 0220 	orr.w	r2, r3, #32
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8105992:	2301      	movs	r3, #1
 8105994:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8105998:	e008      	b.n	81059ac <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810599e:	f043 0220 	orr.w	r2, r3, #32
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81059a6:	2301      	movs	r3, #1
 81059a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	2200      	movs	r2, #0
 81059b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81059b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 81059b8:	4618      	mov	r0, r3
 81059ba:	3784      	adds	r7, #132	@ 0x84
 81059bc:	46bd      	mov	sp, r7
 81059be:	bd90      	pop	{r4, r7, pc}
 81059c0:	58026300 	.word	0x58026300
 81059c4:	40022000 	.word	0x40022000
 81059c8:	40022100 	.word	0x40022100
 81059cc:	58026000 	.word	0x58026000
 81059d0:	cb840000 	.word	0xcb840000
 81059d4:	40022300 	.word	0x40022300
 81059d8:	10000000 	.word	0x10000000
 81059dc:	053e2d63 	.word	0x053e2d63
 81059e0:	c7520000 	.word	0xc7520000
 81059e4:	cfb80000 	.word	0xcfb80000

081059e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 81059e8:	b580      	push	{r7, lr}
 81059ea:	b088      	sub	sp, #32
 81059ec:	af00      	add	r7, sp, #0
 81059ee:	6078      	str	r0, [r7, #4]
 81059f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 81059f2:	2300      	movs	r3, #0
 81059f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 81059f6:	683b      	ldr	r3, [r7, #0]
 81059f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	4618      	mov	r0, r3
 8105a00:	f7ff f8ba 	bl	8104b78 <LL_ADC_REG_IsConversionOngoing>
 8105a04:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	681b      	ldr	r3, [r3, #0]
 8105a0a:	4618      	mov	r0, r3
 8105a0c:	f7ff f8db 	bl	8104bc6 <LL_ADC_INJ_IsConversionOngoing>
 8105a10:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8105a12:	693b      	ldr	r3, [r7, #16]
 8105a14:	2b00      	cmp	r3, #0
 8105a16:	d103      	bne.n	8105a20 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8105a18:	68fb      	ldr	r3, [r7, #12]
 8105a1a:	2b00      	cmp	r3, #0
 8105a1c:	f000 8098 	beq.w	8105b50 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	681b      	ldr	r3, [r3, #0]
 8105a24:	68db      	ldr	r3, [r3, #12]
 8105a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105a2a:	2b00      	cmp	r3, #0
 8105a2c:	d02a      	beq.n	8105a84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	7d5b      	ldrb	r3, [r3, #21]
 8105a32:	2b01      	cmp	r3, #1
 8105a34:	d126      	bne.n	8105a84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	7d1b      	ldrb	r3, [r3, #20]
 8105a3a:	2b01      	cmp	r3, #1
 8105a3c:	d122      	bne.n	8105a84 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8105a3e:	2301      	movs	r3, #1
 8105a40:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8105a42:	e014      	b.n	8105a6e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8105a44:	69fb      	ldr	r3, [r7, #28]
 8105a46:	4a45      	ldr	r2, [pc, #276]	@ (8105b5c <ADC_ConversionStop+0x174>)
 8105a48:	4293      	cmp	r3, r2
 8105a4a:	d90d      	bls.n	8105a68 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105a50:	f043 0210 	orr.w	r2, r3, #16
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105a5c:	f043 0201 	orr.w	r2, r3, #1
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8105a64:	2301      	movs	r3, #1
 8105a66:	e074      	b.n	8105b52 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8105a68:	69fb      	ldr	r3, [r7, #28]
 8105a6a:	3301      	adds	r3, #1
 8105a6c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	681b      	ldr	r3, [r3, #0]
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105a78:	2b40      	cmp	r3, #64	@ 0x40
 8105a7a:	d1e3      	bne.n	8105a44 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	2240      	movs	r2, #64	@ 0x40
 8105a82:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8105a84:	69bb      	ldr	r3, [r7, #24]
 8105a86:	2b02      	cmp	r3, #2
 8105a88:	d014      	beq.n	8105ab4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	4618      	mov	r0, r3
 8105a90:	f7ff f872 	bl	8104b78 <LL_ADC_REG_IsConversionOngoing>
 8105a94:	4603      	mov	r3, r0
 8105a96:	2b00      	cmp	r3, #0
 8105a98:	d00c      	beq.n	8105ab4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	681b      	ldr	r3, [r3, #0]
 8105a9e:	4618      	mov	r0, r3
 8105aa0:	f7ff f82f 	bl	8104b02 <LL_ADC_IsDisableOngoing>
 8105aa4:	4603      	mov	r3, r0
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	d104      	bne.n	8105ab4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	4618      	mov	r0, r3
 8105ab0:	f7ff f84e 	bl	8104b50 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8105ab4:	69bb      	ldr	r3, [r7, #24]
 8105ab6:	2b01      	cmp	r3, #1
 8105ab8:	d014      	beq.n	8105ae4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	4618      	mov	r0, r3
 8105ac0:	f7ff f881 	bl	8104bc6 <LL_ADC_INJ_IsConversionOngoing>
 8105ac4:	4603      	mov	r3, r0
 8105ac6:	2b00      	cmp	r3, #0
 8105ac8:	d00c      	beq.n	8105ae4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	681b      	ldr	r3, [r3, #0]
 8105ace:	4618      	mov	r0, r3
 8105ad0:	f7ff f817 	bl	8104b02 <LL_ADC_IsDisableOngoing>
 8105ad4:	4603      	mov	r3, r0
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	d104      	bne.n	8105ae4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	4618      	mov	r0, r3
 8105ae0:	f7ff f85d 	bl	8104b9e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8105ae4:	69bb      	ldr	r3, [r7, #24]
 8105ae6:	2b02      	cmp	r3, #2
 8105ae8:	d005      	beq.n	8105af6 <ADC_ConversionStop+0x10e>
 8105aea:	69bb      	ldr	r3, [r7, #24]
 8105aec:	2b03      	cmp	r3, #3
 8105aee:	d105      	bne.n	8105afc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8105af0:	230c      	movs	r3, #12
 8105af2:	617b      	str	r3, [r7, #20]
        break;
 8105af4:	e005      	b.n	8105b02 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8105af6:	2308      	movs	r3, #8
 8105af8:	617b      	str	r3, [r7, #20]
        break;
 8105afa:	e002      	b.n	8105b02 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8105afc:	2304      	movs	r3, #4
 8105afe:	617b      	str	r3, [r7, #20]
        break;
 8105b00:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8105b02:	f7fe fe07 	bl	8104714 <HAL_GetTick>
 8105b06:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8105b08:	e01b      	b.n	8105b42 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8105b0a:	f7fe fe03 	bl	8104714 <HAL_GetTick>
 8105b0e:	4602      	mov	r2, r0
 8105b10:	68bb      	ldr	r3, [r7, #8]
 8105b12:	1ad3      	subs	r3, r2, r3
 8105b14:	2b05      	cmp	r3, #5
 8105b16:	d914      	bls.n	8105b42 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	681b      	ldr	r3, [r3, #0]
 8105b1c:	689a      	ldr	r2, [r3, #8]
 8105b1e:	697b      	ldr	r3, [r7, #20]
 8105b20:	4013      	ands	r3, r2
 8105b22:	2b00      	cmp	r3, #0
 8105b24:	d00d      	beq.n	8105b42 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b2a:	f043 0210 	orr.w	r2, r3, #16
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105b36:	f043 0201 	orr.w	r2, r3, #1
 8105b3a:	687b      	ldr	r3, [r7, #4]
 8105b3c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8105b3e:	2301      	movs	r3, #1
 8105b40:	e007      	b.n	8105b52 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	689a      	ldr	r2, [r3, #8]
 8105b48:	697b      	ldr	r3, [r7, #20]
 8105b4a:	4013      	ands	r3, r2
 8105b4c:	2b00      	cmp	r3, #0
 8105b4e:	d1dc      	bne.n	8105b0a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8105b50:	2300      	movs	r3, #0
}
 8105b52:	4618      	mov	r0, r3
 8105b54:	3720      	adds	r7, #32
 8105b56:	46bd      	mov	sp, r7
 8105b58:	bd80      	pop	{r7, pc}
 8105b5a:	bf00      	nop
 8105b5c:	000cdbff 	.word	0x000cdbff

08105b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8105b60:	b580      	push	{r7, lr}
 8105b62:	b084      	sub	sp, #16
 8105b64:	af00      	add	r7, sp, #0
 8105b66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	4618      	mov	r0, r3
 8105b6e:	f7fe ffb5 	bl	8104adc <LL_ADC_IsEnabled>
 8105b72:	4603      	mov	r3, r0
 8105b74:	2b00      	cmp	r3, #0
 8105b76:	d16e      	bne.n	8105c56 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	681b      	ldr	r3, [r3, #0]
 8105b7c:	689a      	ldr	r2, [r3, #8]
 8105b7e:	4b38      	ldr	r3, [pc, #224]	@ (8105c60 <ADC_Enable+0x100>)
 8105b80:	4013      	ands	r3, r2
 8105b82:	2b00      	cmp	r3, #0
 8105b84:	d00d      	beq.n	8105ba2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b8a:	f043 0210 	orr.w	r2, r3, #16
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105b96:	f043 0201 	orr.w	r2, r3, #1
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8105b9e:	2301      	movs	r3, #1
 8105ba0:	e05a      	b.n	8105c58 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8105ba2:	687b      	ldr	r3, [r7, #4]
 8105ba4:	681b      	ldr	r3, [r3, #0]
 8105ba6:	4618      	mov	r0, r3
 8105ba8:	f7fe ff70 	bl	8104a8c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8105bac:	f7fe fdb2 	bl	8104714 <HAL_GetTick>
 8105bb0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	681b      	ldr	r3, [r3, #0]
 8105bb6:	4a2b      	ldr	r2, [pc, #172]	@ (8105c64 <ADC_Enable+0x104>)
 8105bb8:	4293      	cmp	r3, r2
 8105bba:	d004      	beq.n	8105bc6 <ADC_Enable+0x66>
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	681b      	ldr	r3, [r3, #0]
 8105bc0:	4a29      	ldr	r2, [pc, #164]	@ (8105c68 <ADC_Enable+0x108>)
 8105bc2:	4293      	cmp	r3, r2
 8105bc4:	d101      	bne.n	8105bca <ADC_Enable+0x6a>
 8105bc6:	4b29      	ldr	r3, [pc, #164]	@ (8105c6c <ADC_Enable+0x10c>)
 8105bc8:	e000      	b.n	8105bcc <ADC_Enable+0x6c>
 8105bca:	4b29      	ldr	r3, [pc, #164]	@ (8105c70 <ADC_Enable+0x110>)
 8105bcc:	4618      	mov	r0, r3
 8105bce:	f7fe fef3 	bl	81049b8 <LL_ADC_GetMultimode>
 8105bd2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	4a23      	ldr	r2, [pc, #140]	@ (8105c68 <ADC_Enable+0x108>)
 8105bda:	4293      	cmp	r3, r2
 8105bdc:	d002      	beq.n	8105be4 <ADC_Enable+0x84>
 8105bde:	687b      	ldr	r3, [r7, #4]
 8105be0:	681b      	ldr	r3, [r3, #0]
 8105be2:	e000      	b.n	8105be6 <ADC_Enable+0x86>
 8105be4:	4b1f      	ldr	r3, [pc, #124]	@ (8105c64 <ADC_Enable+0x104>)
 8105be6:	687a      	ldr	r2, [r7, #4]
 8105be8:	6812      	ldr	r2, [r2, #0]
 8105bea:	4293      	cmp	r3, r2
 8105bec:	d02c      	beq.n	8105c48 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8105bee:	68bb      	ldr	r3, [r7, #8]
 8105bf0:	2b00      	cmp	r3, #0
 8105bf2:	d130      	bne.n	8105c56 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105bf4:	e028      	b.n	8105c48 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8105bf6:	687b      	ldr	r3, [r7, #4]
 8105bf8:	681b      	ldr	r3, [r3, #0]
 8105bfa:	4618      	mov	r0, r3
 8105bfc:	f7fe ff6e 	bl	8104adc <LL_ADC_IsEnabled>
 8105c00:	4603      	mov	r3, r0
 8105c02:	2b00      	cmp	r3, #0
 8105c04:	d104      	bne.n	8105c10 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	681b      	ldr	r3, [r3, #0]
 8105c0a:	4618      	mov	r0, r3
 8105c0c:	f7fe ff3e 	bl	8104a8c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8105c10:	f7fe fd80 	bl	8104714 <HAL_GetTick>
 8105c14:	4602      	mov	r2, r0
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	1ad3      	subs	r3, r2, r3
 8105c1a:	2b02      	cmp	r3, #2
 8105c1c:	d914      	bls.n	8105c48 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	681b      	ldr	r3, [r3, #0]
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	f003 0301 	and.w	r3, r3, #1
 8105c28:	2b01      	cmp	r3, #1
 8105c2a:	d00d      	beq.n	8105c48 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105c30:	f043 0210 	orr.w	r2, r3, #16
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105c38:	687b      	ldr	r3, [r7, #4]
 8105c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105c3c:	f043 0201 	orr.w	r2, r3, #1
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8105c44:	2301      	movs	r3, #1
 8105c46:	e007      	b.n	8105c58 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8105c48:	687b      	ldr	r3, [r7, #4]
 8105c4a:	681b      	ldr	r3, [r3, #0]
 8105c4c:	681b      	ldr	r3, [r3, #0]
 8105c4e:	f003 0301 	and.w	r3, r3, #1
 8105c52:	2b01      	cmp	r3, #1
 8105c54:	d1cf      	bne.n	8105bf6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8105c56:	2300      	movs	r3, #0
}
 8105c58:	4618      	mov	r0, r3
 8105c5a:	3710      	adds	r7, #16
 8105c5c:	46bd      	mov	sp, r7
 8105c5e:	bd80      	pop	{r7, pc}
 8105c60:	8000003f 	.word	0x8000003f
 8105c64:	40022000 	.word	0x40022000
 8105c68:	40022100 	.word	0x40022100
 8105c6c:	40022300 	.word	0x40022300
 8105c70:	58026300 	.word	0x58026300

08105c74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8105c74:	b580      	push	{r7, lr}
 8105c76:	b084      	sub	sp, #16
 8105c78:	af00      	add	r7, sp, #0
 8105c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	681b      	ldr	r3, [r3, #0]
 8105c80:	4618      	mov	r0, r3
 8105c82:	f7fe ff3e 	bl	8104b02 <LL_ADC_IsDisableOngoing>
 8105c86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	4618      	mov	r0, r3
 8105c8e:	f7fe ff25 	bl	8104adc <LL_ADC_IsEnabled>
 8105c92:	4603      	mov	r3, r0
 8105c94:	2b00      	cmp	r3, #0
 8105c96:	d047      	beq.n	8105d28 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8105c98:	68fb      	ldr	r3, [r7, #12]
 8105c9a:	2b00      	cmp	r3, #0
 8105c9c:	d144      	bne.n	8105d28 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	681b      	ldr	r3, [r3, #0]
 8105ca2:	689b      	ldr	r3, [r3, #8]
 8105ca4:	f003 030d 	and.w	r3, r3, #13
 8105ca8:	2b01      	cmp	r3, #1
 8105caa:	d10c      	bne.n	8105cc6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	4618      	mov	r0, r3
 8105cb2:	f7fe feff 	bl	8104ab4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8105cb6:	687b      	ldr	r3, [r7, #4]
 8105cb8:	681b      	ldr	r3, [r3, #0]
 8105cba:	2203      	movs	r2, #3
 8105cbc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8105cbe:	f7fe fd29 	bl	8104714 <HAL_GetTick>
 8105cc2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8105cc4:	e029      	b.n	8105d1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105cca:	f043 0210 	orr.w	r2, r3, #16
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105cd6:	f043 0201 	orr.w	r2, r3, #1
 8105cda:	687b      	ldr	r3, [r7, #4]
 8105cdc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8105cde:	2301      	movs	r3, #1
 8105ce0:	e023      	b.n	8105d2a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8105ce2:	f7fe fd17 	bl	8104714 <HAL_GetTick>
 8105ce6:	4602      	mov	r2, r0
 8105ce8:	68bb      	ldr	r3, [r7, #8]
 8105cea:	1ad3      	subs	r3, r2, r3
 8105cec:	2b02      	cmp	r3, #2
 8105cee:	d914      	bls.n	8105d1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	681b      	ldr	r3, [r3, #0]
 8105cf4:	689b      	ldr	r3, [r3, #8]
 8105cf6:	f003 0301 	and.w	r3, r3, #1
 8105cfa:	2b00      	cmp	r3, #0
 8105cfc:	d00d      	beq.n	8105d1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8105cfe:	687b      	ldr	r3, [r7, #4]
 8105d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105d02:	f043 0210 	orr.w	r2, r3, #16
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105d0e:	f043 0201 	orr.w	r2, r3, #1
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8105d16:	2301      	movs	r3, #1
 8105d18:	e007      	b.n	8105d2a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	681b      	ldr	r3, [r3, #0]
 8105d1e:	689b      	ldr	r3, [r3, #8]
 8105d20:	f003 0301 	and.w	r3, r3, #1
 8105d24:	2b00      	cmp	r3, #0
 8105d26:	d1dc      	bne.n	8105ce2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8105d28:	2300      	movs	r3, #0
}
 8105d2a:	4618      	mov	r0, r3
 8105d2c:	3710      	adds	r7, #16
 8105d2e:	46bd      	mov	sp, r7
 8105d30:	bd80      	pop	{r7, pc}
	...

08105d34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8105d34:	b580      	push	{r7, lr}
 8105d36:	b084      	sub	sp, #16
 8105d38:	af00      	add	r7, sp, #0
 8105d3a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8105d3c:	687b      	ldr	r3, [r7, #4]
 8105d3e:	681b      	ldr	r3, [r3, #0]
 8105d40:	4a7a      	ldr	r2, [pc, #488]	@ (8105f2c <ADC_ConfigureBoostMode+0x1f8>)
 8105d42:	4293      	cmp	r3, r2
 8105d44:	d004      	beq.n	8105d50 <ADC_ConfigureBoostMode+0x1c>
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	4a79      	ldr	r2, [pc, #484]	@ (8105f30 <ADC_ConfigureBoostMode+0x1fc>)
 8105d4c:	4293      	cmp	r3, r2
 8105d4e:	d109      	bne.n	8105d64 <ADC_ConfigureBoostMode+0x30>
 8105d50:	4b78      	ldr	r3, [pc, #480]	@ (8105f34 <ADC_ConfigureBoostMode+0x200>)
 8105d52:	689b      	ldr	r3, [r3, #8]
 8105d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105d58:	2b00      	cmp	r3, #0
 8105d5a:	bf14      	ite	ne
 8105d5c:	2301      	movne	r3, #1
 8105d5e:	2300      	moveq	r3, #0
 8105d60:	b2db      	uxtb	r3, r3
 8105d62:	e008      	b.n	8105d76 <ADC_ConfigureBoostMode+0x42>
 8105d64:	4b74      	ldr	r3, [pc, #464]	@ (8105f38 <ADC_ConfigureBoostMode+0x204>)
 8105d66:	689b      	ldr	r3, [r3, #8]
 8105d68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105d6c:	2b00      	cmp	r3, #0
 8105d6e:	bf14      	ite	ne
 8105d70:	2301      	movne	r3, #1
 8105d72:	2300      	moveq	r3, #0
 8105d74:	b2db      	uxtb	r3, r3
 8105d76:	2b00      	cmp	r3, #0
 8105d78:	d01c      	beq.n	8105db4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8105d7a:	f002 fa71 	bl	8108260 <HAL_RCC_GetHCLKFreq>
 8105d7e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	685b      	ldr	r3, [r3, #4]
 8105d84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105d88:	d010      	beq.n	8105dac <ADC_ConfigureBoostMode+0x78>
 8105d8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105d8e:	d873      	bhi.n	8105e78 <ADC_ConfigureBoostMode+0x144>
 8105d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105d94:	d002      	beq.n	8105d9c <ADC_ConfigureBoostMode+0x68>
 8105d96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105d9a:	d16d      	bne.n	8105e78 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	685b      	ldr	r3, [r3, #4]
 8105da0:	0c1b      	lsrs	r3, r3, #16
 8105da2:	68fa      	ldr	r2, [r7, #12]
 8105da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8105da8:	60fb      	str	r3, [r7, #12]
        break;
 8105daa:	e068      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8105dac:	68fb      	ldr	r3, [r7, #12]
 8105dae:	089b      	lsrs	r3, r3, #2
 8105db0:	60fb      	str	r3, [r7, #12]
        break;
 8105db2:	e064      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8105db4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8105db8:	f04f 0100 	mov.w	r1, #0
 8105dbc:	f003 fcb8 	bl	8109730 <HAL_RCCEx_GetPeriphCLKFreq>
 8105dc0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	685b      	ldr	r3, [r3, #4]
 8105dc6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8105dca:	d051      	beq.n	8105e70 <ADC_ConfigureBoostMode+0x13c>
 8105dcc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8105dd0:	d854      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105dd2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8105dd6:	d047      	beq.n	8105e68 <ADC_ConfigureBoostMode+0x134>
 8105dd8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8105ddc:	d84e      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105dde:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8105de2:	d03d      	beq.n	8105e60 <ADC_ConfigureBoostMode+0x12c>
 8105de4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8105de8:	d848      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105dea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105dee:	d033      	beq.n	8105e58 <ADC_ConfigureBoostMode+0x124>
 8105df0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105df4:	d842      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105df6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8105dfa:	d029      	beq.n	8105e50 <ADC_ConfigureBoostMode+0x11c>
 8105dfc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8105e00:	d83c      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105e02:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8105e06:	d01a      	beq.n	8105e3e <ADC_ConfigureBoostMode+0x10a>
 8105e08:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8105e0c:	d836      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105e0e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8105e12:	d014      	beq.n	8105e3e <ADC_ConfigureBoostMode+0x10a>
 8105e14:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8105e18:	d830      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105e1e:	d00e      	beq.n	8105e3e <ADC_ConfigureBoostMode+0x10a>
 8105e20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105e24:	d82a      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105e26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8105e2a:	d008      	beq.n	8105e3e <ADC_ConfigureBoostMode+0x10a>
 8105e2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8105e30:	d824      	bhi.n	8105e7c <ADC_ConfigureBoostMode+0x148>
 8105e32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105e36:	d002      	beq.n	8105e3e <ADC_ConfigureBoostMode+0x10a>
 8105e38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8105e3c:	d11e      	bne.n	8105e7c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	685b      	ldr	r3, [r3, #4]
 8105e42:	0c9b      	lsrs	r3, r3, #18
 8105e44:	005b      	lsls	r3, r3, #1
 8105e46:	68fa      	ldr	r2, [r7, #12]
 8105e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8105e4c:	60fb      	str	r3, [r7, #12]
        break;
 8105e4e:	e016      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8105e50:	68fb      	ldr	r3, [r7, #12]
 8105e52:	091b      	lsrs	r3, r3, #4
 8105e54:	60fb      	str	r3, [r7, #12]
        break;
 8105e56:	e012      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8105e58:	68fb      	ldr	r3, [r7, #12]
 8105e5a:	095b      	lsrs	r3, r3, #5
 8105e5c:	60fb      	str	r3, [r7, #12]
        break;
 8105e5e:	e00e      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8105e60:	68fb      	ldr	r3, [r7, #12]
 8105e62:	099b      	lsrs	r3, r3, #6
 8105e64:	60fb      	str	r3, [r7, #12]
        break;
 8105e66:	e00a      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8105e68:	68fb      	ldr	r3, [r7, #12]
 8105e6a:	09db      	lsrs	r3, r3, #7
 8105e6c:	60fb      	str	r3, [r7, #12]
        break;
 8105e6e:	e006      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8105e70:	68fb      	ldr	r3, [r7, #12]
 8105e72:	0a1b      	lsrs	r3, r3, #8
 8105e74:	60fb      	str	r3, [r7, #12]
        break;
 8105e76:	e002      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
        break;
 8105e78:	bf00      	nop
 8105e7a:	e000      	b.n	8105e7e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8105e7c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8105e7e:	f7fe fc79 	bl	8104774 <HAL_GetREVID>
 8105e82:	4603      	mov	r3, r0
 8105e84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8105e88:	4293      	cmp	r3, r2
 8105e8a:	d815      	bhi.n	8105eb8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8105e8c:	68fb      	ldr	r3, [r7, #12]
 8105e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8105f3c <ADC_ConfigureBoostMode+0x208>)
 8105e90:	4293      	cmp	r3, r2
 8105e92:	d908      	bls.n	8105ea6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	689a      	ldr	r2, [r3, #8]
 8105e9a:	687b      	ldr	r3, [r7, #4]
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105ea2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8105ea4:	e03e      	b.n	8105f24 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8105ea6:	687b      	ldr	r3, [r7, #4]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	689a      	ldr	r2, [r3, #8]
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8105eb4:	609a      	str	r2, [r3, #8]
}
 8105eb6:	e035      	b.n	8105f24 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8105eb8:	68fb      	ldr	r3, [r7, #12]
 8105eba:	085b      	lsrs	r3, r3, #1
 8105ebc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8105ebe:	68fb      	ldr	r3, [r7, #12]
 8105ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8105f40 <ADC_ConfigureBoostMode+0x20c>)
 8105ec2:	4293      	cmp	r3, r2
 8105ec4:	d808      	bhi.n	8105ed8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	681b      	ldr	r3, [r3, #0]
 8105eca:	689a      	ldr	r2, [r3, #8]
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	681b      	ldr	r3, [r3, #0]
 8105ed0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8105ed4:	609a      	str	r2, [r3, #8]
}
 8105ed6:	e025      	b.n	8105f24 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8105ed8:	68fb      	ldr	r3, [r7, #12]
 8105eda:	4a1a      	ldr	r2, [pc, #104]	@ (8105f44 <ADC_ConfigureBoostMode+0x210>)
 8105edc:	4293      	cmp	r3, r2
 8105ede:	d80a      	bhi.n	8105ef6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	689b      	ldr	r3, [r3, #8]
 8105ee6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105ef2:	609a      	str	r2, [r3, #8]
}
 8105ef4:	e016      	b.n	8105f24 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8105ef6:	68fb      	ldr	r3, [r7, #12]
 8105ef8:	4a13      	ldr	r2, [pc, #76]	@ (8105f48 <ADC_ConfigureBoostMode+0x214>)
 8105efa:	4293      	cmp	r3, r2
 8105efc:	d80a      	bhi.n	8105f14 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8105efe:	687b      	ldr	r3, [r7, #4]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	689b      	ldr	r3, [r3, #8]
 8105f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8105f10:	609a      	str	r2, [r3, #8]
}
 8105f12:	e007      	b.n	8105f24 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	689a      	ldr	r2, [r3, #8]
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8105f22:	609a      	str	r2, [r3, #8]
}
 8105f24:	bf00      	nop
 8105f26:	3710      	adds	r7, #16
 8105f28:	46bd      	mov	sp, r7
 8105f2a:	bd80      	pop	{r7, pc}
 8105f2c:	40022000 	.word	0x40022000
 8105f30:	40022100 	.word	0x40022100
 8105f34:	40022300 	.word	0x40022300
 8105f38:	58026300 	.word	0x58026300
 8105f3c:	01312d00 	.word	0x01312d00
 8105f40:	005f5e10 	.word	0x005f5e10
 8105f44:	00bebc20 	.word	0x00bebc20
 8105f48:	017d7840 	.word	0x017d7840

08105f4c <LL_ADC_IsEnabled>:
{
 8105f4c:	b480      	push	{r7}
 8105f4e:	b083      	sub	sp, #12
 8105f50:	af00      	add	r7, sp, #0
 8105f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8105f54:	687b      	ldr	r3, [r7, #4]
 8105f56:	689b      	ldr	r3, [r3, #8]
 8105f58:	f003 0301 	and.w	r3, r3, #1
 8105f5c:	2b01      	cmp	r3, #1
 8105f5e:	d101      	bne.n	8105f64 <LL_ADC_IsEnabled+0x18>
 8105f60:	2301      	movs	r3, #1
 8105f62:	e000      	b.n	8105f66 <LL_ADC_IsEnabled+0x1a>
 8105f64:	2300      	movs	r3, #0
}
 8105f66:	4618      	mov	r0, r3
 8105f68:	370c      	adds	r7, #12
 8105f6a:	46bd      	mov	sp, r7
 8105f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f70:	4770      	bx	lr

08105f72 <LL_ADC_REG_IsConversionOngoing>:
{
 8105f72:	b480      	push	{r7}
 8105f74:	b083      	sub	sp, #12
 8105f76:	af00      	add	r7, sp, #0
 8105f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	689b      	ldr	r3, [r3, #8]
 8105f7e:	f003 0304 	and.w	r3, r3, #4
 8105f82:	2b04      	cmp	r3, #4
 8105f84:	d101      	bne.n	8105f8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8105f86:	2301      	movs	r3, #1
 8105f88:	e000      	b.n	8105f8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8105f8a:	2300      	movs	r3, #0
}
 8105f8c:	4618      	mov	r0, r3
 8105f8e:	370c      	adds	r7, #12
 8105f90:	46bd      	mov	sp, r7
 8105f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f96:	4770      	bx	lr

08105f98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8105f98:	b590      	push	{r4, r7, lr}
 8105f9a:	b09f      	sub	sp, #124	@ 0x7c
 8105f9c:	af00      	add	r7, sp, #0
 8105f9e:	6078      	str	r0, [r7, #4]
 8105fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8105fa2:	2300      	movs	r3, #0
 8105fa4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8105fa8:	687b      	ldr	r3, [r7, #4]
 8105faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8105fae:	2b01      	cmp	r3, #1
 8105fb0:	d101      	bne.n	8105fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8105fb2:	2302      	movs	r3, #2
 8105fb4:	e0c4      	b.n	8106140 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	2201      	movs	r2, #1
 8105fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8105fbe:	2300      	movs	r3, #0
 8105fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8105fc2:	2300      	movs	r3, #0
 8105fc4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	681b      	ldr	r3, [r3, #0]
 8105fca:	4a5f      	ldr	r2, [pc, #380]	@ (8106148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8105fcc:	4293      	cmp	r3, r2
 8105fce:	d102      	bne.n	8105fd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8105fd0:	4b5e      	ldr	r3, [pc, #376]	@ (810614c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8105fd2:	60bb      	str	r3, [r7, #8]
 8105fd4:	e001      	b.n	8105fda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8105fd6:	2300      	movs	r3, #0
 8105fd8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8105fda:	68bb      	ldr	r3, [r7, #8]
 8105fdc:	2b00      	cmp	r3, #0
 8105fde:	d10b      	bne.n	8105ff8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105fe4:	f043 0220 	orr.w	r2, r3, #32
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	2200      	movs	r2, #0
 8105ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8105ff4:	2301      	movs	r3, #1
 8105ff6:	e0a3      	b.n	8106140 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8105ff8:	68bb      	ldr	r3, [r7, #8]
 8105ffa:	4618      	mov	r0, r3
 8105ffc:	f7ff ffb9 	bl	8105f72 <LL_ADC_REG_IsConversionOngoing>
 8106000:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	4618      	mov	r0, r3
 8106008:	f7ff ffb3 	bl	8105f72 <LL_ADC_REG_IsConversionOngoing>
 810600c:	4603      	mov	r3, r0
 810600e:	2b00      	cmp	r3, #0
 8106010:	f040 8085 	bne.w	810611e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8106014:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8106016:	2b00      	cmp	r3, #0
 8106018:	f040 8081 	bne.w	810611e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	4a49      	ldr	r2, [pc, #292]	@ (8106148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8106022:	4293      	cmp	r3, r2
 8106024:	d004      	beq.n	8106030 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	4a48      	ldr	r2, [pc, #288]	@ (810614c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810602c:	4293      	cmp	r3, r2
 810602e:	d101      	bne.n	8106034 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8106030:	4b47      	ldr	r3, [pc, #284]	@ (8106150 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8106032:	e000      	b.n	8106036 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8106034:	4b47      	ldr	r3, [pc, #284]	@ (8106154 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8106036:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8106038:	683b      	ldr	r3, [r7, #0]
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	2b00      	cmp	r3, #0
 810603e:	d03b      	beq.n	81060b8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8106040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8106042:	689b      	ldr	r3, [r3, #8]
 8106044:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8106048:	683b      	ldr	r3, [r7, #0]
 810604a:	685b      	ldr	r3, [r3, #4]
 810604c:	431a      	orrs	r2, r3
 810604e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8106050:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8106052:	687b      	ldr	r3, [r7, #4]
 8106054:	681b      	ldr	r3, [r3, #0]
 8106056:	4a3c      	ldr	r2, [pc, #240]	@ (8106148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8106058:	4293      	cmp	r3, r2
 810605a:	d004      	beq.n	8106066 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	681b      	ldr	r3, [r3, #0]
 8106060:	4a3a      	ldr	r2, [pc, #232]	@ (810614c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8106062:	4293      	cmp	r3, r2
 8106064:	d10e      	bne.n	8106084 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8106066:	4838      	ldr	r0, [pc, #224]	@ (8106148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8106068:	f7ff ff70 	bl	8105f4c <LL_ADC_IsEnabled>
 810606c:	4604      	mov	r4, r0
 810606e:	4837      	ldr	r0, [pc, #220]	@ (810614c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8106070:	f7ff ff6c 	bl	8105f4c <LL_ADC_IsEnabled>
 8106074:	4603      	mov	r3, r0
 8106076:	4323      	orrs	r3, r4
 8106078:	2b00      	cmp	r3, #0
 810607a:	bf0c      	ite	eq
 810607c:	2301      	moveq	r3, #1
 810607e:	2300      	movne	r3, #0
 8106080:	b2db      	uxtb	r3, r3
 8106082:	e008      	b.n	8106096 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8106084:	4834      	ldr	r0, [pc, #208]	@ (8106158 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8106086:	f7ff ff61 	bl	8105f4c <LL_ADC_IsEnabled>
 810608a:	4603      	mov	r3, r0
 810608c:	2b00      	cmp	r3, #0
 810608e:	bf0c      	ite	eq
 8106090:	2301      	moveq	r3, #1
 8106092:	2300      	movne	r3, #0
 8106094:	b2db      	uxtb	r3, r3
 8106096:	2b00      	cmp	r3, #0
 8106098:	d04b      	beq.n	8106132 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810609a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810609c:	689b      	ldr	r3, [r3, #8]
 810609e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81060a2:	f023 030f 	bic.w	r3, r3, #15
 81060a6:	683a      	ldr	r2, [r7, #0]
 81060a8:	6811      	ldr	r1, [r2, #0]
 81060aa:	683a      	ldr	r2, [r7, #0]
 81060ac:	6892      	ldr	r2, [r2, #8]
 81060ae:	430a      	orrs	r2, r1
 81060b0:	431a      	orrs	r2, r3
 81060b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81060b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81060b6:	e03c      	b.n	8106132 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81060b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81060ba:	689b      	ldr	r3, [r3, #8]
 81060bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 81060c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81060c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	4a1f      	ldr	r2, [pc, #124]	@ (8106148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81060ca:	4293      	cmp	r3, r2
 81060cc:	d004      	beq.n	81060d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	681b      	ldr	r3, [r3, #0]
 81060d2:	4a1e      	ldr	r2, [pc, #120]	@ (810614c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81060d4:	4293      	cmp	r3, r2
 81060d6:	d10e      	bne.n	81060f6 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81060d8:	481b      	ldr	r0, [pc, #108]	@ (8106148 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81060da:	f7ff ff37 	bl	8105f4c <LL_ADC_IsEnabled>
 81060de:	4604      	mov	r4, r0
 81060e0:	481a      	ldr	r0, [pc, #104]	@ (810614c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81060e2:	f7ff ff33 	bl	8105f4c <LL_ADC_IsEnabled>
 81060e6:	4603      	mov	r3, r0
 81060e8:	4323      	orrs	r3, r4
 81060ea:	2b00      	cmp	r3, #0
 81060ec:	bf0c      	ite	eq
 81060ee:	2301      	moveq	r3, #1
 81060f0:	2300      	movne	r3, #0
 81060f2:	b2db      	uxtb	r3, r3
 81060f4:	e008      	b.n	8106108 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81060f6:	4818      	ldr	r0, [pc, #96]	@ (8106158 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81060f8:	f7ff ff28 	bl	8105f4c <LL_ADC_IsEnabled>
 81060fc:	4603      	mov	r3, r0
 81060fe:	2b00      	cmp	r3, #0
 8106100:	bf0c      	ite	eq
 8106102:	2301      	moveq	r3, #1
 8106104:	2300      	movne	r3, #0
 8106106:	b2db      	uxtb	r3, r3
 8106108:	2b00      	cmp	r3, #0
 810610a:	d012      	beq.n	8106132 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 810610c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810610e:	689b      	ldr	r3, [r3, #8]
 8106110:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8106114:	f023 030f 	bic.w	r3, r3, #15
 8106118:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810611a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810611c:	e009      	b.n	8106132 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106122:	f043 0220 	orr.w	r2, r3, #32
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 810612a:	2301      	movs	r3, #1
 810612c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8106130:	e000      	b.n	8106134 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8106132:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	2200      	movs	r2, #0
 8106138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 810613c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8106140:	4618      	mov	r0, r3
 8106142:	377c      	adds	r7, #124	@ 0x7c
 8106144:	46bd      	mov	sp, r7
 8106146:	bd90      	pop	{r4, r7, pc}
 8106148:	40022000 	.word	0x40022000
 810614c:	40022100 	.word	0x40022100
 8106150:	40022300 	.word	0x40022300
 8106154:	58026300 	.word	0x58026300
 8106158:	58026000 	.word	0x58026000

0810615c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810615c:	b480      	push	{r7}
 810615e:	b085      	sub	sp, #20
 8106160:	af00      	add	r7, sp, #0
 8106162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	f003 0307 	and.w	r3, r3, #7
 810616a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810616c:	4b0c      	ldr	r3, [pc, #48]	@ (81061a0 <__NVIC_SetPriorityGrouping+0x44>)
 810616e:	68db      	ldr	r3, [r3, #12]
 8106170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8106172:	68ba      	ldr	r2, [r7, #8]
 8106174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8106178:	4013      	ands	r3, r2
 810617a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810617c:	68fb      	ldr	r3, [r7, #12]
 810617e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8106180:	68bb      	ldr	r3, [r7, #8]
 8106182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8106184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8106188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810618c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810618e:	4a04      	ldr	r2, [pc, #16]	@ (81061a0 <__NVIC_SetPriorityGrouping+0x44>)
 8106190:	68bb      	ldr	r3, [r7, #8]
 8106192:	60d3      	str	r3, [r2, #12]
}
 8106194:	bf00      	nop
 8106196:	3714      	adds	r7, #20
 8106198:	46bd      	mov	sp, r7
 810619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810619e:	4770      	bx	lr
 81061a0:	e000ed00 	.word	0xe000ed00

081061a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81061a4:	b480      	push	{r7}
 81061a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81061a8:	4b04      	ldr	r3, [pc, #16]	@ (81061bc <__NVIC_GetPriorityGrouping+0x18>)
 81061aa:	68db      	ldr	r3, [r3, #12]
 81061ac:	0a1b      	lsrs	r3, r3, #8
 81061ae:	f003 0307 	and.w	r3, r3, #7
}
 81061b2:	4618      	mov	r0, r3
 81061b4:	46bd      	mov	sp, r7
 81061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ba:	4770      	bx	lr
 81061bc:	e000ed00 	.word	0xe000ed00

081061c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81061c0:	b480      	push	{r7}
 81061c2:	b083      	sub	sp, #12
 81061c4:	af00      	add	r7, sp, #0
 81061c6:	4603      	mov	r3, r0
 81061c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81061ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81061ce:	2b00      	cmp	r3, #0
 81061d0:	db0b      	blt.n	81061ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81061d2:	88fb      	ldrh	r3, [r7, #6]
 81061d4:	f003 021f 	and.w	r2, r3, #31
 81061d8:	4907      	ldr	r1, [pc, #28]	@ (81061f8 <__NVIC_EnableIRQ+0x38>)
 81061da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81061de:	095b      	lsrs	r3, r3, #5
 81061e0:	2001      	movs	r0, #1
 81061e2:	fa00 f202 	lsl.w	r2, r0, r2
 81061e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81061ea:	bf00      	nop
 81061ec:	370c      	adds	r7, #12
 81061ee:	46bd      	mov	sp, r7
 81061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061f4:	4770      	bx	lr
 81061f6:	bf00      	nop
 81061f8:	e000e100 	.word	0xe000e100

081061fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81061fc:	b480      	push	{r7}
 81061fe:	b083      	sub	sp, #12
 8106200:	af00      	add	r7, sp, #0
 8106202:	4603      	mov	r3, r0
 8106204:	6039      	str	r1, [r7, #0]
 8106206:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8106208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810620c:	2b00      	cmp	r3, #0
 810620e:	db0a      	blt.n	8106226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8106210:	683b      	ldr	r3, [r7, #0]
 8106212:	b2da      	uxtb	r2, r3
 8106214:	490c      	ldr	r1, [pc, #48]	@ (8106248 <__NVIC_SetPriority+0x4c>)
 8106216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810621a:	0112      	lsls	r2, r2, #4
 810621c:	b2d2      	uxtb	r2, r2
 810621e:	440b      	add	r3, r1
 8106220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8106224:	e00a      	b.n	810623c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8106226:	683b      	ldr	r3, [r7, #0]
 8106228:	b2da      	uxtb	r2, r3
 810622a:	4908      	ldr	r1, [pc, #32]	@ (810624c <__NVIC_SetPriority+0x50>)
 810622c:	88fb      	ldrh	r3, [r7, #6]
 810622e:	f003 030f 	and.w	r3, r3, #15
 8106232:	3b04      	subs	r3, #4
 8106234:	0112      	lsls	r2, r2, #4
 8106236:	b2d2      	uxtb	r2, r2
 8106238:	440b      	add	r3, r1
 810623a:	761a      	strb	r2, [r3, #24]
}
 810623c:	bf00      	nop
 810623e:	370c      	adds	r7, #12
 8106240:	46bd      	mov	sp, r7
 8106242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106246:	4770      	bx	lr
 8106248:	e000e100 	.word	0xe000e100
 810624c:	e000ed00 	.word	0xe000ed00

08106250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8106250:	b480      	push	{r7}
 8106252:	b089      	sub	sp, #36	@ 0x24
 8106254:	af00      	add	r7, sp, #0
 8106256:	60f8      	str	r0, [r7, #12]
 8106258:	60b9      	str	r1, [r7, #8]
 810625a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810625c:	68fb      	ldr	r3, [r7, #12]
 810625e:	f003 0307 	and.w	r3, r3, #7
 8106262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8106264:	69fb      	ldr	r3, [r7, #28]
 8106266:	f1c3 0307 	rsb	r3, r3, #7
 810626a:	2b04      	cmp	r3, #4
 810626c:	bf28      	it	cs
 810626e:	2304      	movcs	r3, #4
 8106270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8106272:	69fb      	ldr	r3, [r7, #28]
 8106274:	3304      	adds	r3, #4
 8106276:	2b06      	cmp	r3, #6
 8106278:	d902      	bls.n	8106280 <NVIC_EncodePriority+0x30>
 810627a:	69fb      	ldr	r3, [r7, #28]
 810627c:	3b03      	subs	r3, #3
 810627e:	e000      	b.n	8106282 <NVIC_EncodePriority+0x32>
 8106280:	2300      	movs	r3, #0
 8106282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8106284:	f04f 32ff 	mov.w	r2, #4294967295
 8106288:	69bb      	ldr	r3, [r7, #24]
 810628a:	fa02 f303 	lsl.w	r3, r2, r3
 810628e:	43da      	mvns	r2, r3
 8106290:	68bb      	ldr	r3, [r7, #8]
 8106292:	401a      	ands	r2, r3
 8106294:	697b      	ldr	r3, [r7, #20]
 8106296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8106298:	f04f 31ff 	mov.w	r1, #4294967295
 810629c:	697b      	ldr	r3, [r7, #20]
 810629e:	fa01 f303 	lsl.w	r3, r1, r3
 81062a2:	43d9      	mvns	r1, r3
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81062a8:	4313      	orrs	r3, r2
         );
}
 81062aa:	4618      	mov	r0, r3
 81062ac:	3724      	adds	r7, #36	@ 0x24
 81062ae:	46bd      	mov	sp, r7
 81062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062b4:	4770      	bx	lr
	...

081062b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81062b8:	b580      	push	{r7, lr}
 81062ba:	b082      	sub	sp, #8
 81062bc:	af00      	add	r7, sp, #0
 81062be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	3b01      	subs	r3, #1
 81062c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81062c8:	d301      	bcc.n	81062ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81062ca:	2301      	movs	r3, #1
 81062cc:	e00f      	b.n	81062ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81062ce:	4a0a      	ldr	r2, [pc, #40]	@ (81062f8 <SysTick_Config+0x40>)
 81062d0:	687b      	ldr	r3, [r7, #4]
 81062d2:	3b01      	subs	r3, #1
 81062d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81062d6:	210f      	movs	r1, #15
 81062d8:	f04f 30ff 	mov.w	r0, #4294967295
 81062dc:	f7ff ff8e 	bl	81061fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81062e0:	4b05      	ldr	r3, [pc, #20]	@ (81062f8 <SysTick_Config+0x40>)
 81062e2:	2200      	movs	r2, #0
 81062e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81062e6:	4b04      	ldr	r3, [pc, #16]	@ (81062f8 <SysTick_Config+0x40>)
 81062e8:	2207      	movs	r2, #7
 81062ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81062ec:	2300      	movs	r3, #0
}
 81062ee:	4618      	mov	r0, r3
 81062f0:	3708      	adds	r7, #8
 81062f2:	46bd      	mov	sp, r7
 81062f4:	bd80      	pop	{r7, pc}
 81062f6:	bf00      	nop
 81062f8:	e000e010 	.word	0xe000e010

081062fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81062fc:	b580      	push	{r7, lr}
 81062fe:	b082      	sub	sp, #8
 8106300:	af00      	add	r7, sp, #0
 8106302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8106304:	6878      	ldr	r0, [r7, #4]
 8106306:	f7ff ff29 	bl	810615c <__NVIC_SetPriorityGrouping>
}
 810630a:	bf00      	nop
 810630c:	3708      	adds	r7, #8
 810630e:	46bd      	mov	sp, r7
 8106310:	bd80      	pop	{r7, pc}

08106312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8106312:	b580      	push	{r7, lr}
 8106314:	b086      	sub	sp, #24
 8106316:	af00      	add	r7, sp, #0
 8106318:	4603      	mov	r3, r0
 810631a:	60b9      	str	r1, [r7, #8]
 810631c:	607a      	str	r2, [r7, #4]
 810631e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8106320:	f7ff ff40 	bl	81061a4 <__NVIC_GetPriorityGrouping>
 8106324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8106326:	687a      	ldr	r2, [r7, #4]
 8106328:	68b9      	ldr	r1, [r7, #8]
 810632a:	6978      	ldr	r0, [r7, #20]
 810632c:	f7ff ff90 	bl	8106250 <NVIC_EncodePriority>
 8106330:	4602      	mov	r2, r0
 8106332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8106336:	4611      	mov	r1, r2
 8106338:	4618      	mov	r0, r3
 810633a:	f7ff ff5f 	bl	81061fc <__NVIC_SetPriority>
}
 810633e:	bf00      	nop
 8106340:	3718      	adds	r7, #24
 8106342:	46bd      	mov	sp, r7
 8106344:	bd80      	pop	{r7, pc}

08106346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8106346:	b580      	push	{r7, lr}
 8106348:	b082      	sub	sp, #8
 810634a:	af00      	add	r7, sp, #0
 810634c:	4603      	mov	r3, r0
 810634e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8106350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8106354:	4618      	mov	r0, r3
 8106356:	f7ff ff33 	bl	81061c0 <__NVIC_EnableIRQ>
}
 810635a:	bf00      	nop
 810635c:	3708      	adds	r7, #8
 810635e:	46bd      	mov	sp, r7
 8106360:	bd80      	pop	{r7, pc}

08106362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8106362:	b580      	push	{r7, lr}
 8106364:	b082      	sub	sp, #8
 8106366:	af00      	add	r7, sp, #0
 8106368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810636a:	6878      	ldr	r0, [r7, #4]
 810636c:	f7ff ffa4 	bl	81062b8 <SysTick_Config>
 8106370:	4603      	mov	r3, r0
}
 8106372:	4618      	mov	r0, r3
 8106374:	3708      	adds	r7, #8
 8106376:	46bd      	mov	sp, r7
 8106378:	bd80      	pop	{r7, pc}
	...

0810637c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810637c:	b480      	push	{r7}
 810637e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8106380:	4b07      	ldr	r3, [pc, #28]	@ (81063a0 <HAL_GetCurrentCPUID+0x24>)
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	091b      	lsrs	r3, r3, #4
 8106386:	f003 030f 	and.w	r3, r3, #15
 810638a:	2b07      	cmp	r3, #7
 810638c:	d101      	bne.n	8106392 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810638e:	2303      	movs	r3, #3
 8106390:	e000      	b.n	8106394 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8106392:	2301      	movs	r3, #1
  }
}
 8106394:	4618      	mov	r0, r3
 8106396:	46bd      	mov	sp, r7
 8106398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810639c:	4770      	bx	lr
 810639e:	bf00      	nop
 81063a0:	e000ed00 	.word	0xe000ed00

081063a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81063a4:	b580      	push	{r7, lr}
 81063a6:	b086      	sub	sp, #24
 81063a8:	af00      	add	r7, sp, #0
 81063aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81063ac:	f7fe f9b2 	bl	8104714 <HAL_GetTick>
 81063b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	2b00      	cmp	r3, #0
 81063b6:	d101      	bne.n	81063bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81063b8:	2301      	movs	r3, #1
 81063ba:	e2dc      	b.n	8106976 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81063c2:	b2db      	uxtb	r3, r3
 81063c4:	2b02      	cmp	r3, #2
 81063c6:	d008      	beq.n	81063da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	2280      	movs	r2, #128	@ 0x80
 81063cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	2200      	movs	r2, #0
 81063d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 81063d6:	2301      	movs	r3, #1
 81063d8:	e2cd      	b.n	8106976 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	681b      	ldr	r3, [r3, #0]
 81063de:	4a76      	ldr	r2, [pc, #472]	@ (81065b8 <HAL_DMA_Abort+0x214>)
 81063e0:	4293      	cmp	r3, r2
 81063e2:	d04a      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	681b      	ldr	r3, [r3, #0]
 81063e8:	4a74      	ldr	r2, [pc, #464]	@ (81065bc <HAL_DMA_Abort+0x218>)
 81063ea:	4293      	cmp	r3, r2
 81063ec:	d045      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	4a73      	ldr	r2, [pc, #460]	@ (81065c0 <HAL_DMA_Abort+0x21c>)
 81063f4:	4293      	cmp	r3, r2
 81063f6:	d040      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	681b      	ldr	r3, [r3, #0]
 81063fc:	4a71      	ldr	r2, [pc, #452]	@ (81065c4 <HAL_DMA_Abort+0x220>)
 81063fe:	4293      	cmp	r3, r2
 8106400:	d03b      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 8106402:	687b      	ldr	r3, [r7, #4]
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	4a70      	ldr	r2, [pc, #448]	@ (81065c8 <HAL_DMA_Abort+0x224>)
 8106408:	4293      	cmp	r3, r2
 810640a:	d036      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	4a6e      	ldr	r2, [pc, #440]	@ (81065cc <HAL_DMA_Abort+0x228>)
 8106412:	4293      	cmp	r3, r2
 8106414:	d031      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	681b      	ldr	r3, [r3, #0]
 810641a:	4a6d      	ldr	r2, [pc, #436]	@ (81065d0 <HAL_DMA_Abort+0x22c>)
 810641c:	4293      	cmp	r3, r2
 810641e:	d02c      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	4a6b      	ldr	r2, [pc, #428]	@ (81065d4 <HAL_DMA_Abort+0x230>)
 8106426:	4293      	cmp	r3, r2
 8106428:	d027      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	681b      	ldr	r3, [r3, #0]
 810642e:	4a6a      	ldr	r2, [pc, #424]	@ (81065d8 <HAL_DMA_Abort+0x234>)
 8106430:	4293      	cmp	r3, r2
 8106432:	d022      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	681b      	ldr	r3, [r3, #0]
 8106438:	4a68      	ldr	r2, [pc, #416]	@ (81065dc <HAL_DMA_Abort+0x238>)
 810643a:	4293      	cmp	r3, r2
 810643c:	d01d      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	4a67      	ldr	r2, [pc, #412]	@ (81065e0 <HAL_DMA_Abort+0x23c>)
 8106444:	4293      	cmp	r3, r2
 8106446:	d018      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	4a65      	ldr	r2, [pc, #404]	@ (81065e4 <HAL_DMA_Abort+0x240>)
 810644e:	4293      	cmp	r3, r2
 8106450:	d013      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681b      	ldr	r3, [r3, #0]
 8106456:	4a64      	ldr	r2, [pc, #400]	@ (81065e8 <HAL_DMA_Abort+0x244>)
 8106458:	4293      	cmp	r3, r2
 810645a:	d00e      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	4a62      	ldr	r2, [pc, #392]	@ (81065ec <HAL_DMA_Abort+0x248>)
 8106462:	4293      	cmp	r3, r2
 8106464:	d009      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	681b      	ldr	r3, [r3, #0]
 810646a:	4a61      	ldr	r2, [pc, #388]	@ (81065f0 <HAL_DMA_Abort+0x24c>)
 810646c:	4293      	cmp	r3, r2
 810646e:	d004      	beq.n	810647a <HAL_DMA_Abort+0xd6>
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	4a5f      	ldr	r2, [pc, #380]	@ (81065f4 <HAL_DMA_Abort+0x250>)
 8106476:	4293      	cmp	r3, r2
 8106478:	d101      	bne.n	810647e <HAL_DMA_Abort+0xda>
 810647a:	2301      	movs	r3, #1
 810647c:	e000      	b.n	8106480 <HAL_DMA_Abort+0xdc>
 810647e:	2300      	movs	r3, #0
 8106480:	2b00      	cmp	r3, #0
 8106482:	d013      	beq.n	81064ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	681b      	ldr	r3, [r3, #0]
 8106488:	681a      	ldr	r2, [r3, #0]
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	681b      	ldr	r3, [r3, #0]
 810648e:	f022 021e 	bic.w	r2, r2, #30
 8106492:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	681b      	ldr	r3, [r3, #0]
 8106498:	695a      	ldr	r2, [r3, #20]
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81064a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	617b      	str	r3, [r7, #20]
 81064aa:	e00a      	b.n	81064c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	681a      	ldr	r2, [r3, #0]
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	681b      	ldr	r3, [r3, #0]
 81064b6:	f022 020e 	bic.w	r2, r2, #14
 81064ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81064bc:	687b      	ldr	r3, [r7, #4]
 81064be:	681b      	ldr	r3, [r3, #0]
 81064c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81064c2:	687b      	ldr	r3, [r7, #4]
 81064c4:	681b      	ldr	r3, [r3, #0]
 81064c6:	4a3c      	ldr	r2, [pc, #240]	@ (81065b8 <HAL_DMA_Abort+0x214>)
 81064c8:	4293      	cmp	r3, r2
 81064ca:	d072      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	681b      	ldr	r3, [r3, #0]
 81064d0:	4a3a      	ldr	r2, [pc, #232]	@ (81065bc <HAL_DMA_Abort+0x218>)
 81064d2:	4293      	cmp	r3, r2
 81064d4:	d06d      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 81064d6:	687b      	ldr	r3, [r7, #4]
 81064d8:	681b      	ldr	r3, [r3, #0]
 81064da:	4a39      	ldr	r2, [pc, #228]	@ (81065c0 <HAL_DMA_Abort+0x21c>)
 81064dc:	4293      	cmp	r3, r2
 81064de:	d068      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 81064e0:	687b      	ldr	r3, [r7, #4]
 81064e2:	681b      	ldr	r3, [r3, #0]
 81064e4:	4a37      	ldr	r2, [pc, #220]	@ (81065c4 <HAL_DMA_Abort+0x220>)
 81064e6:	4293      	cmp	r3, r2
 81064e8:	d063      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	681b      	ldr	r3, [r3, #0]
 81064ee:	4a36      	ldr	r2, [pc, #216]	@ (81065c8 <HAL_DMA_Abort+0x224>)
 81064f0:	4293      	cmp	r3, r2
 81064f2:	d05e      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	681b      	ldr	r3, [r3, #0]
 81064f8:	4a34      	ldr	r2, [pc, #208]	@ (81065cc <HAL_DMA_Abort+0x228>)
 81064fa:	4293      	cmp	r3, r2
 81064fc:	d059      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 81064fe:	687b      	ldr	r3, [r7, #4]
 8106500:	681b      	ldr	r3, [r3, #0]
 8106502:	4a33      	ldr	r2, [pc, #204]	@ (81065d0 <HAL_DMA_Abort+0x22c>)
 8106504:	4293      	cmp	r3, r2
 8106506:	d054      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	681b      	ldr	r3, [r3, #0]
 810650c:	4a31      	ldr	r2, [pc, #196]	@ (81065d4 <HAL_DMA_Abort+0x230>)
 810650e:	4293      	cmp	r3, r2
 8106510:	d04f      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	681b      	ldr	r3, [r3, #0]
 8106516:	4a30      	ldr	r2, [pc, #192]	@ (81065d8 <HAL_DMA_Abort+0x234>)
 8106518:	4293      	cmp	r3, r2
 810651a:	d04a      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 810651c:	687b      	ldr	r3, [r7, #4]
 810651e:	681b      	ldr	r3, [r3, #0]
 8106520:	4a2e      	ldr	r2, [pc, #184]	@ (81065dc <HAL_DMA_Abort+0x238>)
 8106522:	4293      	cmp	r3, r2
 8106524:	d045      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	681b      	ldr	r3, [r3, #0]
 810652a:	4a2d      	ldr	r2, [pc, #180]	@ (81065e0 <HAL_DMA_Abort+0x23c>)
 810652c:	4293      	cmp	r3, r2
 810652e:	d040      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	4a2b      	ldr	r2, [pc, #172]	@ (81065e4 <HAL_DMA_Abort+0x240>)
 8106536:	4293      	cmp	r3, r2
 8106538:	d03b      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	4a2a      	ldr	r2, [pc, #168]	@ (81065e8 <HAL_DMA_Abort+0x244>)
 8106540:	4293      	cmp	r3, r2
 8106542:	d036      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	681b      	ldr	r3, [r3, #0]
 8106548:	4a28      	ldr	r2, [pc, #160]	@ (81065ec <HAL_DMA_Abort+0x248>)
 810654a:	4293      	cmp	r3, r2
 810654c:	d031      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 810654e:	687b      	ldr	r3, [r7, #4]
 8106550:	681b      	ldr	r3, [r3, #0]
 8106552:	4a27      	ldr	r2, [pc, #156]	@ (81065f0 <HAL_DMA_Abort+0x24c>)
 8106554:	4293      	cmp	r3, r2
 8106556:	d02c      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	4a25      	ldr	r2, [pc, #148]	@ (81065f4 <HAL_DMA_Abort+0x250>)
 810655e:	4293      	cmp	r3, r2
 8106560:	d027      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	681b      	ldr	r3, [r3, #0]
 8106566:	4a24      	ldr	r2, [pc, #144]	@ (81065f8 <HAL_DMA_Abort+0x254>)
 8106568:	4293      	cmp	r3, r2
 810656a:	d022      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 810656c:	687b      	ldr	r3, [r7, #4]
 810656e:	681b      	ldr	r3, [r3, #0]
 8106570:	4a22      	ldr	r2, [pc, #136]	@ (81065fc <HAL_DMA_Abort+0x258>)
 8106572:	4293      	cmp	r3, r2
 8106574:	d01d      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	681b      	ldr	r3, [r3, #0]
 810657a:	4a21      	ldr	r2, [pc, #132]	@ (8106600 <HAL_DMA_Abort+0x25c>)
 810657c:	4293      	cmp	r3, r2
 810657e:	d018      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	4a1f      	ldr	r2, [pc, #124]	@ (8106604 <HAL_DMA_Abort+0x260>)
 8106586:	4293      	cmp	r3, r2
 8106588:	d013      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	681b      	ldr	r3, [r3, #0]
 810658e:	4a1e      	ldr	r2, [pc, #120]	@ (8106608 <HAL_DMA_Abort+0x264>)
 8106590:	4293      	cmp	r3, r2
 8106592:	d00e      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	4a1c      	ldr	r2, [pc, #112]	@ (810660c <HAL_DMA_Abort+0x268>)
 810659a:	4293      	cmp	r3, r2
 810659c:	d009      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	4a1b      	ldr	r2, [pc, #108]	@ (8106610 <HAL_DMA_Abort+0x26c>)
 81065a4:	4293      	cmp	r3, r2
 81065a6:	d004      	beq.n	81065b2 <HAL_DMA_Abort+0x20e>
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	4a19      	ldr	r2, [pc, #100]	@ (8106614 <HAL_DMA_Abort+0x270>)
 81065ae:	4293      	cmp	r3, r2
 81065b0:	d132      	bne.n	8106618 <HAL_DMA_Abort+0x274>
 81065b2:	2301      	movs	r3, #1
 81065b4:	e031      	b.n	810661a <HAL_DMA_Abort+0x276>
 81065b6:	bf00      	nop
 81065b8:	40020010 	.word	0x40020010
 81065bc:	40020028 	.word	0x40020028
 81065c0:	40020040 	.word	0x40020040
 81065c4:	40020058 	.word	0x40020058
 81065c8:	40020070 	.word	0x40020070
 81065cc:	40020088 	.word	0x40020088
 81065d0:	400200a0 	.word	0x400200a0
 81065d4:	400200b8 	.word	0x400200b8
 81065d8:	40020410 	.word	0x40020410
 81065dc:	40020428 	.word	0x40020428
 81065e0:	40020440 	.word	0x40020440
 81065e4:	40020458 	.word	0x40020458
 81065e8:	40020470 	.word	0x40020470
 81065ec:	40020488 	.word	0x40020488
 81065f0:	400204a0 	.word	0x400204a0
 81065f4:	400204b8 	.word	0x400204b8
 81065f8:	58025408 	.word	0x58025408
 81065fc:	5802541c 	.word	0x5802541c
 8106600:	58025430 	.word	0x58025430
 8106604:	58025444 	.word	0x58025444
 8106608:	58025458 	.word	0x58025458
 810660c:	5802546c 	.word	0x5802546c
 8106610:	58025480 	.word	0x58025480
 8106614:	58025494 	.word	0x58025494
 8106618:	2300      	movs	r3, #0
 810661a:	2b00      	cmp	r3, #0
 810661c:	d007      	beq.n	810662e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106622:	681a      	ldr	r2, [r3, #0]
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810662c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	681b      	ldr	r3, [r3, #0]
 8106632:	4a6d      	ldr	r2, [pc, #436]	@ (81067e8 <HAL_DMA_Abort+0x444>)
 8106634:	4293      	cmp	r3, r2
 8106636:	d04a      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	681b      	ldr	r3, [r3, #0]
 810663c:	4a6b      	ldr	r2, [pc, #428]	@ (81067ec <HAL_DMA_Abort+0x448>)
 810663e:	4293      	cmp	r3, r2
 8106640:	d045      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	681b      	ldr	r3, [r3, #0]
 8106646:	4a6a      	ldr	r2, [pc, #424]	@ (81067f0 <HAL_DMA_Abort+0x44c>)
 8106648:	4293      	cmp	r3, r2
 810664a:	d040      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 810664c:	687b      	ldr	r3, [r7, #4]
 810664e:	681b      	ldr	r3, [r3, #0]
 8106650:	4a68      	ldr	r2, [pc, #416]	@ (81067f4 <HAL_DMA_Abort+0x450>)
 8106652:	4293      	cmp	r3, r2
 8106654:	d03b      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	681b      	ldr	r3, [r3, #0]
 810665a:	4a67      	ldr	r2, [pc, #412]	@ (81067f8 <HAL_DMA_Abort+0x454>)
 810665c:	4293      	cmp	r3, r2
 810665e:	d036      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	4a65      	ldr	r2, [pc, #404]	@ (81067fc <HAL_DMA_Abort+0x458>)
 8106666:	4293      	cmp	r3, r2
 8106668:	d031      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	681b      	ldr	r3, [r3, #0]
 810666e:	4a64      	ldr	r2, [pc, #400]	@ (8106800 <HAL_DMA_Abort+0x45c>)
 8106670:	4293      	cmp	r3, r2
 8106672:	d02c      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 8106674:	687b      	ldr	r3, [r7, #4]
 8106676:	681b      	ldr	r3, [r3, #0]
 8106678:	4a62      	ldr	r2, [pc, #392]	@ (8106804 <HAL_DMA_Abort+0x460>)
 810667a:	4293      	cmp	r3, r2
 810667c:	d027      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	681b      	ldr	r3, [r3, #0]
 8106682:	4a61      	ldr	r2, [pc, #388]	@ (8106808 <HAL_DMA_Abort+0x464>)
 8106684:	4293      	cmp	r3, r2
 8106686:	d022      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 8106688:	687b      	ldr	r3, [r7, #4]
 810668a:	681b      	ldr	r3, [r3, #0]
 810668c:	4a5f      	ldr	r2, [pc, #380]	@ (810680c <HAL_DMA_Abort+0x468>)
 810668e:	4293      	cmp	r3, r2
 8106690:	d01d      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 8106692:	687b      	ldr	r3, [r7, #4]
 8106694:	681b      	ldr	r3, [r3, #0]
 8106696:	4a5e      	ldr	r2, [pc, #376]	@ (8106810 <HAL_DMA_Abort+0x46c>)
 8106698:	4293      	cmp	r3, r2
 810669a:	d018      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	681b      	ldr	r3, [r3, #0]
 81066a0:	4a5c      	ldr	r2, [pc, #368]	@ (8106814 <HAL_DMA_Abort+0x470>)
 81066a2:	4293      	cmp	r3, r2
 81066a4:	d013      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 81066a6:	687b      	ldr	r3, [r7, #4]
 81066a8:	681b      	ldr	r3, [r3, #0]
 81066aa:	4a5b      	ldr	r2, [pc, #364]	@ (8106818 <HAL_DMA_Abort+0x474>)
 81066ac:	4293      	cmp	r3, r2
 81066ae:	d00e      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 81066b0:	687b      	ldr	r3, [r7, #4]
 81066b2:	681b      	ldr	r3, [r3, #0]
 81066b4:	4a59      	ldr	r2, [pc, #356]	@ (810681c <HAL_DMA_Abort+0x478>)
 81066b6:	4293      	cmp	r3, r2
 81066b8:	d009      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 81066ba:	687b      	ldr	r3, [r7, #4]
 81066bc:	681b      	ldr	r3, [r3, #0]
 81066be:	4a58      	ldr	r2, [pc, #352]	@ (8106820 <HAL_DMA_Abort+0x47c>)
 81066c0:	4293      	cmp	r3, r2
 81066c2:	d004      	beq.n	81066ce <HAL_DMA_Abort+0x32a>
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	681b      	ldr	r3, [r3, #0]
 81066c8:	4a56      	ldr	r2, [pc, #344]	@ (8106824 <HAL_DMA_Abort+0x480>)
 81066ca:	4293      	cmp	r3, r2
 81066cc:	d108      	bne.n	81066e0 <HAL_DMA_Abort+0x33c>
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	681b      	ldr	r3, [r3, #0]
 81066d2:	681a      	ldr	r2, [r3, #0]
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	f022 0201 	bic.w	r2, r2, #1
 81066dc:	601a      	str	r2, [r3, #0]
 81066de:	e007      	b.n	81066f0 <HAL_DMA_Abort+0x34c>
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	681b      	ldr	r3, [r3, #0]
 81066e4:	681a      	ldr	r2, [r3, #0]
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	681b      	ldr	r3, [r3, #0]
 81066ea:	f022 0201 	bic.w	r2, r2, #1
 81066ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81066f0:	e013      	b.n	810671a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81066f2:	f7fe f80f 	bl	8104714 <HAL_GetTick>
 81066f6:	4602      	mov	r2, r0
 81066f8:	693b      	ldr	r3, [r7, #16]
 81066fa:	1ad3      	subs	r3, r2, r3
 81066fc:	2b05      	cmp	r3, #5
 81066fe:	d90c      	bls.n	810671a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	2220      	movs	r2, #32
 8106704:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	2203      	movs	r2, #3
 810670a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810670e:	687b      	ldr	r3, [r7, #4]
 8106710:	2200      	movs	r2, #0
 8106712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8106716:	2301      	movs	r3, #1
 8106718:	e12d      	b.n	8106976 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810671a:	697b      	ldr	r3, [r7, #20]
 810671c:	681b      	ldr	r3, [r3, #0]
 810671e:	f003 0301 	and.w	r3, r3, #1
 8106722:	2b00      	cmp	r3, #0
 8106724:	d1e5      	bne.n	81066f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	681b      	ldr	r3, [r3, #0]
 810672a:	4a2f      	ldr	r2, [pc, #188]	@ (81067e8 <HAL_DMA_Abort+0x444>)
 810672c:	4293      	cmp	r3, r2
 810672e:	d04a      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	681b      	ldr	r3, [r3, #0]
 8106734:	4a2d      	ldr	r2, [pc, #180]	@ (81067ec <HAL_DMA_Abort+0x448>)
 8106736:	4293      	cmp	r3, r2
 8106738:	d045      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	681b      	ldr	r3, [r3, #0]
 810673e:	4a2c      	ldr	r2, [pc, #176]	@ (81067f0 <HAL_DMA_Abort+0x44c>)
 8106740:	4293      	cmp	r3, r2
 8106742:	d040      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	4a2a      	ldr	r2, [pc, #168]	@ (81067f4 <HAL_DMA_Abort+0x450>)
 810674a:	4293      	cmp	r3, r2
 810674c:	d03b      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 810674e:	687b      	ldr	r3, [r7, #4]
 8106750:	681b      	ldr	r3, [r3, #0]
 8106752:	4a29      	ldr	r2, [pc, #164]	@ (81067f8 <HAL_DMA_Abort+0x454>)
 8106754:	4293      	cmp	r3, r2
 8106756:	d036      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	681b      	ldr	r3, [r3, #0]
 810675c:	4a27      	ldr	r2, [pc, #156]	@ (81067fc <HAL_DMA_Abort+0x458>)
 810675e:	4293      	cmp	r3, r2
 8106760:	d031      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	681b      	ldr	r3, [r3, #0]
 8106766:	4a26      	ldr	r2, [pc, #152]	@ (8106800 <HAL_DMA_Abort+0x45c>)
 8106768:	4293      	cmp	r3, r2
 810676a:	d02c      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	681b      	ldr	r3, [r3, #0]
 8106770:	4a24      	ldr	r2, [pc, #144]	@ (8106804 <HAL_DMA_Abort+0x460>)
 8106772:	4293      	cmp	r3, r2
 8106774:	d027      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	4a23      	ldr	r2, [pc, #140]	@ (8106808 <HAL_DMA_Abort+0x464>)
 810677c:	4293      	cmp	r3, r2
 810677e:	d022      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	4a21      	ldr	r2, [pc, #132]	@ (810680c <HAL_DMA_Abort+0x468>)
 8106786:	4293      	cmp	r3, r2
 8106788:	d01d      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	4a20      	ldr	r2, [pc, #128]	@ (8106810 <HAL_DMA_Abort+0x46c>)
 8106790:	4293      	cmp	r3, r2
 8106792:	d018      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	681b      	ldr	r3, [r3, #0]
 8106798:	4a1e      	ldr	r2, [pc, #120]	@ (8106814 <HAL_DMA_Abort+0x470>)
 810679a:	4293      	cmp	r3, r2
 810679c:	d013      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	681b      	ldr	r3, [r3, #0]
 81067a2:	4a1d      	ldr	r2, [pc, #116]	@ (8106818 <HAL_DMA_Abort+0x474>)
 81067a4:	4293      	cmp	r3, r2
 81067a6:	d00e      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 81067a8:	687b      	ldr	r3, [r7, #4]
 81067aa:	681b      	ldr	r3, [r3, #0]
 81067ac:	4a1b      	ldr	r2, [pc, #108]	@ (810681c <HAL_DMA_Abort+0x478>)
 81067ae:	4293      	cmp	r3, r2
 81067b0:	d009      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 81067b2:	687b      	ldr	r3, [r7, #4]
 81067b4:	681b      	ldr	r3, [r3, #0]
 81067b6:	4a1a      	ldr	r2, [pc, #104]	@ (8106820 <HAL_DMA_Abort+0x47c>)
 81067b8:	4293      	cmp	r3, r2
 81067ba:	d004      	beq.n	81067c6 <HAL_DMA_Abort+0x422>
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	681b      	ldr	r3, [r3, #0]
 81067c0:	4a18      	ldr	r2, [pc, #96]	@ (8106824 <HAL_DMA_Abort+0x480>)
 81067c2:	4293      	cmp	r3, r2
 81067c4:	d101      	bne.n	81067ca <HAL_DMA_Abort+0x426>
 81067c6:	2301      	movs	r3, #1
 81067c8:	e000      	b.n	81067cc <HAL_DMA_Abort+0x428>
 81067ca:	2300      	movs	r3, #0
 81067cc:	2b00      	cmp	r3, #0
 81067ce:	d02b      	beq.n	8106828 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81067d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81067d6:	687b      	ldr	r3, [r7, #4]
 81067d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81067da:	f003 031f 	and.w	r3, r3, #31
 81067de:	223f      	movs	r2, #63	@ 0x3f
 81067e0:	409a      	lsls	r2, r3
 81067e2:	68bb      	ldr	r3, [r7, #8]
 81067e4:	609a      	str	r2, [r3, #8]
 81067e6:	e02a      	b.n	810683e <HAL_DMA_Abort+0x49a>
 81067e8:	40020010 	.word	0x40020010
 81067ec:	40020028 	.word	0x40020028
 81067f0:	40020040 	.word	0x40020040
 81067f4:	40020058 	.word	0x40020058
 81067f8:	40020070 	.word	0x40020070
 81067fc:	40020088 	.word	0x40020088
 8106800:	400200a0 	.word	0x400200a0
 8106804:	400200b8 	.word	0x400200b8
 8106808:	40020410 	.word	0x40020410
 810680c:	40020428 	.word	0x40020428
 8106810:	40020440 	.word	0x40020440
 8106814:	40020458 	.word	0x40020458
 8106818:	40020470 	.word	0x40020470
 810681c:	40020488 	.word	0x40020488
 8106820:	400204a0 	.word	0x400204a0
 8106824:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810682c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106832:	f003 031f 	and.w	r3, r3, #31
 8106836:	2201      	movs	r2, #1
 8106838:	409a      	lsls	r2, r3
 810683a:	68fb      	ldr	r3, [r7, #12]
 810683c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	681b      	ldr	r3, [r3, #0]
 8106842:	4a4f      	ldr	r2, [pc, #316]	@ (8106980 <HAL_DMA_Abort+0x5dc>)
 8106844:	4293      	cmp	r3, r2
 8106846:	d072      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106848:	687b      	ldr	r3, [r7, #4]
 810684a:	681b      	ldr	r3, [r3, #0]
 810684c:	4a4d      	ldr	r2, [pc, #308]	@ (8106984 <HAL_DMA_Abort+0x5e0>)
 810684e:	4293      	cmp	r3, r2
 8106850:	d06d      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	681b      	ldr	r3, [r3, #0]
 8106856:	4a4c      	ldr	r2, [pc, #304]	@ (8106988 <HAL_DMA_Abort+0x5e4>)
 8106858:	4293      	cmp	r3, r2
 810685a:	d068      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 810685c:	687b      	ldr	r3, [r7, #4]
 810685e:	681b      	ldr	r3, [r3, #0]
 8106860:	4a4a      	ldr	r2, [pc, #296]	@ (810698c <HAL_DMA_Abort+0x5e8>)
 8106862:	4293      	cmp	r3, r2
 8106864:	d063      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	681b      	ldr	r3, [r3, #0]
 810686a:	4a49      	ldr	r2, [pc, #292]	@ (8106990 <HAL_DMA_Abort+0x5ec>)
 810686c:	4293      	cmp	r3, r2
 810686e:	d05e      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	681b      	ldr	r3, [r3, #0]
 8106874:	4a47      	ldr	r2, [pc, #284]	@ (8106994 <HAL_DMA_Abort+0x5f0>)
 8106876:	4293      	cmp	r3, r2
 8106878:	d059      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 810687a:	687b      	ldr	r3, [r7, #4]
 810687c:	681b      	ldr	r3, [r3, #0]
 810687e:	4a46      	ldr	r2, [pc, #280]	@ (8106998 <HAL_DMA_Abort+0x5f4>)
 8106880:	4293      	cmp	r3, r2
 8106882:	d054      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	681b      	ldr	r3, [r3, #0]
 8106888:	4a44      	ldr	r2, [pc, #272]	@ (810699c <HAL_DMA_Abort+0x5f8>)
 810688a:	4293      	cmp	r3, r2
 810688c:	d04f      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	681b      	ldr	r3, [r3, #0]
 8106892:	4a43      	ldr	r2, [pc, #268]	@ (81069a0 <HAL_DMA_Abort+0x5fc>)
 8106894:	4293      	cmp	r3, r2
 8106896:	d04a      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	681b      	ldr	r3, [r3, #0]
 810689c:	4a41      	ldr	r2, [pc, #260]	@ (81069a4 <HAL_DMA_Abort+0x600>)
 810689e:	4293      	cmp	r3, r2
 81068a0:	d045      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	681b      	ldr	r3, [r3, #0]
 81068a6:	4a40      	ldr	r2, [pc, #256]	@ (81069a8 <HAL_DMA_Abort+0x604>)
 81068a8:	4293      	cmp	r3, r2
 81068aa:	d040      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	681b      	ldr	r3, [r3, #0]
 81068b0:	4a3e      	ldr	r2, [pc, #248]	@ (81069ac <HAL_DMA_Abort+0x608>)
 81068b2:	4293      	cmp	r3, r2
 81068b4:	d03b      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	681b      	ldr	r3, [r3, #0]
 81068ba:	4a3d      	ldr	r2, [pc, #244]	@ (81069b0 <HAL_DMA_Abort+0x60c>)
 81068bc:	4293      	cmp	r3, r2
 81068be:	d036      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	4a3b      	ldr	r2, [pc, #236]	@ (81069b4 <HAL_DMA_Abort+0x610>)
 81068c6:	4293      	cmp	r3, r2
 81068c8:	d031      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068ca:	687b      	ldr	r3, [r7, #4]
 81068cc:	681b      	ldr	r3, [r3, #0]
 81068ce:	4a3a      	ldr	r2, [pc, #232]	@ (81069b8 <HAL_DMA_Abort+0x614>)
 81068d0:	4293      	cmp	r3, r2
 81068d2:	d02c      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	4a38      	ldr	r2, [pc, #224]	@ (81069bc <HAL_DMA_Abort+0x618>)
 81068da:	4293      	cmp	r3, r2
 81068dc:	d027      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068de:	687b      	ldr	r3, [r7, #4]
 81068e0:	681b      	ldr	r3, [r3, #0]
 81068e2:	4a37      	ldr	r2, [pc, #220]	@ (81069c0 <HAL_DMA_Abort+0x61c>)
 81068e4:	4293      	cmp	r3, r2
 81068e6:	d022      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	681b      	ldr	r3, [r3, #0]
 81068ec:	4a35      	ldr	r2, [pc, #212]	@ (81069c4 <HAL_DMA_Abort+0x620>)
 81068ee:	4293      	cmp	r3, r2
 81068f0:	d01d      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068f2:	687b      	ldr	r3, [r7, #4]
 81068f4:	681b      	ldr	r3, [r3, #0]
 81068f6:	4a34      	ldr	r2, [pc, #208]	@ (81069c8 <HAL_DMA_Abort+0x624>)
 81068f8:	4293      	cmp	r3, r2
 81068fa:	d018      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	681b      	ldr	r3, [r3, #0]
 8106900:	4a32      	ldr	r2, [pc, #200]	@ (81069cc <HAL_DMA_Abort+0x628>)
 8106902:	4293      	cmp	r3, r2
 8106904:	d013      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	4a31      	ldr	r2, [pc, #196]	@ (81069d0 <HAL_DMA_Abort+0x62c>)
 810690c:	4293      	cmp	r3, r2
 810690e:	d00e      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	4a2f      	ldr	r2, [pc, #188]	@ (81069d4 <HAL_DMA_Abort+0x630>)
 8106916:	4293      	cmp	r3, r2
 8106918:	d009      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 810691a:	687b      	ldr	r3, [r7, #4]
 810691c:	681b      	ldr	r3, [r3, #0]
 810691e:	4a2e      	ldr	r2, [pc, #184]	@ (81069d8 <HAL_DMA_Abort+0x634>)
 8106920:	4293      	cmp	r3, r2
 8106922:	d004      	beq.n	810692e <HAL_DMA_Abort+0x58a>
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	681b      	ldr	r3, [r3, #0]
 8106928:	4a2c      	ldr	r2, [pc, #176]	@ (81069dc <HAL_DMA_Abort+0x638>)
 810692a:	4293      	cmp	r3, r2
 810692c:	d101      	bne.n	8106932 <HAL_DMA_Abort+0x58e>
 810692e:	2301      	movs	r3, #1
 8106930:	e000      	b.n	8106934 <HAL_DMA_Abort+0x590>
 8106932:	2300      	movs	r3, #0
 8106934:	2b00      	cmp	r3, #0
 8106936:	d015      	beq.n	8106964 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810693c:	687a      	ldr	r2, [r7, #4]
 810693e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106940:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106946:	2b00      	cmp	r3, #0
 8106948:	d00c      	beq.n	8106964 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810694a:	687b      	ldr	r3, [r7, #4]
 810694c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810694e:	681a      	ldr	r2, [r3, #0]
 8106950:	687b      	ldr	r3, [r7, #4]
 8106952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106958:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810695e:	687a      	ldr	r2, [r7, #4]
 8106960:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8106962:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	2201      	movs	r2, #1
 8106968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	2200      	movs	r2, #0
 8106970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8106974:	2300      	movs	r3, #0
}
 8106976:	4618      	mov	r0, r3
 8106978:	3718      	adds	r7, #24
 810697a:	46bd      	mov	sp, r7
 810697c:	bd80      	pop	{r7, pc}
 810697e:	bf00      	nop
 8106980:	40020010 	.word	0x40020010
 8106984:	40020028 	.word	0x40020028
 8106988:	40020040 	.word	0x40020040
 810698c:	40020058 	.word	0x40020058
 8106990:	40020070 	.word	0x40020070
 8106994:	40020088 	.word	0x40020088
 8106998:	400200a0 	.word	0x400200a0
 810699c:	400200b8 	.word	0x400200b8
 81069a0:	40020410 	.word	0x40020410
 81069a4:	40020428 	.word	0x40020428
 81069a8:	40020440 	.word	0x40020440
 81069ac:	40020458 	.word	0x40020458
 81069b0:	40020470 	.word	0x40020470
 81069b4:	40020488 	.word	0x40020488
 81069b8:	400204a0 	.word	0x400204a0
 81069bc:	400204b8 	.word	0x400204b8
 81069c0:	58025408 	.word	0x58025408
 81069c4:	5802541c 	.word	0x5802541c
 81069c8:	58025430 	.word	0x58025430
 81069cc:	58025444 	.word	0x58025444
 81069d0:	58025458 	.word	0x58025458
 81069d4:	5802546c 	.word	0x5802546c
 81069d8:	58025480 	.word	0x58025480
 81069dc:	58025494 	.word	0x58025494

081069e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81069e0:	b580      	push	{r7, lr}
 81069e2:	b084      	sub	sp, #16
 81069e4:	af00      	add	r7, sp, #0
 81069e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81069e8:	687b      	ldr	r3, [r7, #4]
 81069ea:	2b00      	cmp	r3, #0
 81069ec:	d101      	bne.n	81069f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81069ee:	2301      	movs	r3, #1
 81069f0:	e237      	b.n	8106e62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81069f2:	687b      	ldr	r3, [r7, #4]
 81069f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81069f8:	b2db      	uxtb	r3, r3
 81069fa:	2b02      	cmp	r3, #2
 81069fc:	d004      	beq.n	8106a08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	2280      	movs	r2, #128	@ 0x80
 8106a02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8106a04:	2301      	movs	r3, #1
 8106a06:	e22c      	b.n	8106e62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	4a5c      	ldr	r2, [pc, #368]	@ (8106b80 <HAL_DMA_Abort_IT+0x1a0>)
 8106a0e:	4293      	cmp	r3, r2
 8106a10:	d04a      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	4a5b      	ldr	r2, [pc, #364]	@ (8106b84 <HAL_DMA_Abort_IT+0x1a4>)
 8106a18:	4293      	cmp	r3, r2
 8106a1a:	d045      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	681b      	ldr	r3, [r3, #0]
 8106a20:	4a59      	ldr	r2, [pc, #356]	@ (8106b88 <HAL_DMA_Abort_IT+0x1a8>)
 8106a22:	4293      	cmp	r3, r2
 8106a24:	d040      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	4a58      	ldr	r2, [pc, #352]	@ (8106b8c <HAL_DMA_Abort_IT+0x1ac>)
 8106a2c:	4293      	cmp	r3, r2
 8106a2e:	d03b      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	4a56      	ldr	r2, [pc, #344]	@ (8106b90 <HAL_DMA_Abort_IT+0x1b0>)
 8106a36:	4293      	cmp	r3, r2
 8106a38:	d036      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	4a55      	ldr	r2, [pc, #340]	@ (8106b94 <HAL_DMA_Abort_IT+0x1b4>)
 8106a40:	4293      	cmp	r3, r2
 8106a42:	d031      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a44:	687b      	ldr	r3, [r7, #4]
 8106a46:	681b      	ldr	r3, [r3, #0]
 8106a48:	4a53      	ldr	r2, [pc, #332]	@ (8106b98 <HAL_DMA_Abort_IT+0x1b8>)
 8106a4a:	4293      	cmp	r3, r2
 8106a4c:	d02c      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	4a52      	ldr	r2, [pc, #328]	@ (8106b9c <HAL_DMA_Abort_IT+0x1bc>)
 8106a54:	4293      	cmp	r3, r2
 8106a56:	d027      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a58:	687b      	ldr	r3, [r7, #4]
 8106a5a:	681b      	ldr	r3, [r3, #0]
 8106a5c:	4a50      	ldr	r2, [pc, #320]	@ (8106ba0 <HAL_DMA_Abort_IT+0x1c0>)
 8106a5e:	4293      	cmp	r3, r2
 8106a60:	d022      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a62:	687b      	ldr	r3, [r7, #4]
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	4a4f      	ldr	r2, [pc, #316]	@ (8106ba4 <HAL_DMA_Abort_IT+0x1c4>)
 8106a68:	4293      	cmp	r3, r2
 8106a6a:	d01d      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	681b      	ldr	r3, [r3, #0]
 8106a70:	4a4d      	ldr	r2, [pc, #308]	@ (8106ba8 <HAL_DMA_Abort_IT+0x1c8>)
 8106a72:	4293      	cmp	r3, r2
 8106a74:	d018      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	681b      	ldr	r3, [r3, #0]
 8106a7a:	4a4c      	ldr	r2, [pc, #304]	@ (8106bac <HAL_DMA_Abort_IT+0x1cc>)
 8106a7c:	4293      	cmp	r3, r2
 8106a7e:	d013      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	4a4a      	ldr	r2, [pc, #296]	@ (8106bb0 <HAL_DMA_Abort_IT+0x1d0>)
 8106a86:	4293      	cmp	r3, r2
 8106a88:	d00e      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	681b      	ldr	r3, [r3, #0]
 8106a8e:	4a49      	ldr	r2, [pc, #292]	@ (8106bb4 <HAL_DMA_Abort_IT+0x1d4>)
 8106a90:	4293      	cmp	r3, r2
 8106a92:	d009      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	681b      	ldr	r3, [r3, #0]
 8106a98:	4a47      	ldr	r2, [pc, #284]	@ (8106bb8 <HAL_DMA_Abort_IT+0x1d8>)
 8106a9a:	4293      	cmp	r3, r2
 8106a9c:	d004      	beq.n	8106aa8 <HAL_DMA_Abort_IT+0xc8>
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	681b      	ldr	r3, [r3, #0]
 8106aa2:	4a46      	ldr	r2, [pc, #280]	@ (8106bbc <HAL_DMA_Abort_IT+0x1dc>)
 8106aa4:	4293      	cmp	r3, r2
 8106aa6:	d101      	bne.n	8106aac <HAL_DMA_Abort_IT+0xcc>
 8106aa8:	2301      	movs	r3, #1
 8106aaa:	e000      	b.n	8106aae <HAL_DMA_Abort_IT+0xce>
 8106aac:	2300      	movs	r3, #0
 8106aae:	2b00      	cmp	r3, #0
 8106ab0:	f000 8086 	beq.w	8106bc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	2204      	movs	r2, #4
 8106ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	681b      	ldr	r3, [r3, #0]
 8106ac0:	4a2f      	ldr	r2, [pc, #188]	@ (8106b80 <HAL_DMA_Abort_IT+0x1a0>)
 8106ac2:	4293      	cmp	r3, r2
 8106ac4:	d04a      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	681b      	ldr	r3, [r3, #0]
 8106aca:	4a2e      	ldr	r2, [pc, #184]	@ (8106b84 <HAL_DMA_Abort_IT+0x1a4>)
 8106acc:	4293      	cmp	r3, r2
 8106ace:	d045      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	681b      	ldr	r3, [r3, #0]
 8106ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8106b88 <HAL_DMA_Abort_IT+0x1a8>)
 8106ad6:	4293      	cmp	r3, r2
 8106ad8:	d040      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	681b      	ldr	r3, [r3, #0]
 8106ade:	4a2b      	ldr	r2, [pc, #172]	@ (8106b8c <HAL_DMA_Abort_IT+0x1ac>)
 8106ae0:	4293      	cmp	r3, r2
 8106ae2:	d03b      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	681b      	ldr	r3, [r3, #0]
 8106ae8:	4a29      	ldr	r2, [pc, #164]	@ (8106b90 <HAL_DMA_Abort_IT+0x1b0>)
 8106aea:	4293      	cmp	r3, r2
 8106aec:	d036      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106aee:	687b      	ldr	r3, [r7, #4]
 8106af0:	681b      	ldr	r3, [r3, #0]
 8106af2:	4a28      	ldr	r2, [pc, #160]	@ (8106b94 <HAL_DMA_Abort_IT+0x1b4>)
 8106af4:	4293      	cmp	r3, r2
 8106af6:	d031      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	681b      	ldr	r3, [r3, #0]
 8106afc:	4a26      	ldr	r2, [pc, #152]	@ (8106b98 <HAL_DMA_Abort_IT+0x1b8>)
 8106afe:	4293      	cmp	r3, r2
 8106b00:	d02c      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b02:	687b      	ldr	r3, [r7, #4]
 8106b04:	681b      	ldr	r3, [r3, #0]
 8106b06:	4a25      	ldr	r2, [pc, #148]	@ (8106b9c <HAL_DMA_Abort_IT+0x1bc>)
 8106b08:	4293      	cmp	r3, r2
 8106b0a:	d027      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b0c:	687b      	ldr	r3, [r7, #4]
 8106b0e:	681b      	ldr	r3, [r3, #0]
 8106b10:	4a23      	ldr	r2, [pc, #140]	@ (8106ba0 <HAL_DMA_Abort_IT+0x1c0>)
 8106b12:	4293      	cmp	r3, r2
 8106b14:	d022      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	681b      	ldr	r3, [r3, #0]
 8106b1a:	4a22      	ldr	r2, [pc, #136]	@ (8106ba4 <HAL_DMA_Abort_IT+0x1c4>)
 8106b1c:	4293      	cmp	r3, r2
 8106b1e:	d01d      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b20:	687b      	ldr	r3, [r7, #4]
 8106b22:	681b      	ldr	r3, [r3, #0]
 8106b24:	4a20      	ldr	r2, [pc, #128]	@ (8106ba8 <HAL_DMA_Abort_IT+0x1c8>)
 8106b26:	4293      	cmp	r3, r2
 8106b28:	d018      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	681b      	ldr	r3, [r3, #0]
 8106b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8106bac <HAL_DMA_Abort_IT+0x1cc>)
 8106b30:	4293      	cmp	r3, r2
 8106b32:	d013      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	681b      	ldr	r3, [r3, #0]
 8106b38:	4a1d      	ldr	r2, [pc, #116]	@ (8106bb0 <HAL_DMA_Abort_IT+0x1d0>)
 8106b3a:	4293      	cmp	r3, r2
 8106b3c:	d00e      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	681b      	ldr	r3, [r3, #0]
 8106b42:	4a1c      	ldr	r2, [pc, #112]	@ (8106bb4 <HAL_DMA_Abort_IT+0x1d4>)
 8106b44:	4293      	cmp	r3, r2
 8106b46:	d009      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	681b      	ldr	r3, [r3, #0]
 8106b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8106bb8 <HAL_DMA_Abort_IT+0x1d8>)
 8106b4e:	4293      	cmp	r3, r2
 8106b50:	d004      	beq.n	8106b5c <HAL_DMA_Abort_IT+0x17c>
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	681b      	ldr	r3, [r3, #0]
 8106b56:	4a19      	ldr	r2, [pc, #100]	@ (8106bbc <HAL_DMA_Abort_IT+0x1dc>)
 8106b58:	4293      	cmp	r3, r2
 8106b5a:	d108      	bne.n	8106b6e <HAL_DMA_Abort_IT+0x18e>
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	681b      	ldr	r3, [r3, #0]
 8106b60:	681a      	ldr	r2, [r3, #0]
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	681b      	ldr	r3, [r3, #0]
 8106b66:	f022 0201 	bic.w	r2, r2, #1
 8106b6a:	601a      	str	r2, [r3, #0]
 8106b6c:	e178      	b.n	8106e60 <HAL_DMA_Abort_IT+0x480>
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	681b      	ldr	r3, [r3, #0]
 8106b72:	681a      	ldr	r2, [r3, #0]
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	681b      	ldr	r3, [r3, #0]
 8106b78:	f022 0201 	bic.w	r2, r2, #1
 8106b7c:	601a      	str	r2, [r3, #0]
 8106b7e:	e16f      	b.n	8106e60 <HAL_DMA_Abort_IT+0x480>
 8106b80:	40020010 	.word	0x40020010
 8106b84:	40020028 	.word	0x40020028
 8106b88:	40020040 	.word	0x40020040
 8106b8c:	40020058 	.word	0x40020058
 8106b90:	40020070 	.word	0x40020070
 8106b94:	40020088 	.word	0x40020088
 8106b98:	400200a0 	.word	0x400200a0
 8106b9c:	400200b8 	.word	0x400200b8
 8106ba0:	40020410 	.word	0x40020410
 8106ba4:	40020428 	.word	0x40020428
 8106ba8:	40020440 	.word	0x40020440
 8106bac:	40020458 	.word	0x40020458
 8106bb0:	40020470 	.word	0x40020470
 8106bb4:	40020488 	.word	0x40020488
 8106bb8:	400204a0 	.word	0x400204a0
 8106bbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	681a      	ldr	r2, [r3, #0]
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	681b      	ldr	r3, [r3, #0]
 8106bca:	f022 020e 	bic.w	r2, r2, #14
 8106bce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	4a6c      	ldr	r2, [pc, #432]	@ (8106d88 <HAL_DMA_Abort_IT+0x3a8>)
 8106bd6:	4293      	cmp	r3, r2
 8106bd8:	d04a      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	681b      	ldr	r3, [r3, #0]
 8106bde:	4a6b      	ldr	r2, [pc, #428]	@ (8106d8c <HAL_DMA_Abort_IT+0x3ac>)
 8106be0:	4293      	cmp	r3, r2
 8106be2:	d045      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	4a69      	ldr	r2, [pc, #420]	@ (8106d90 <HAL_DMA_Abort_IT+0x3b0>)
 8106bea:	4293      	cmp	r3, r2
 8106bec:	d040      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	4a68      	ldr	r2, [pc, #416]	@ (8106d94 <HAL_DMA_Abort_IT+0x3b4>)
 8106bf4:	4293      	cmp	r3, r2
 8106bf6:	d03b      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	681b      	ldr	r3, [r3, #0]
 8106bfc:	4a66      	ldr	r2, [pc, #408]	@ (8106d98 <HAL_DMA_Abort_IT+0x3b8>)
 8106bfe:	4293      	cmp	r3, r2
 8106c00:	d036      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	681b      	ldr	r3, [r3, #0]
 8106c06:	4a65      	ldr	r2, [pc, #404]	@ (8106d9c <HAL_DMA_Abort_IT+0x3bc>)
 8106c08:	4293      	cmp	r3, r2
 8106c0a:	d031      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	681b      	ldr	r3, [r3, #0]
 8106c10:	4a63      	ldr	r2, [pc, #396]	@ (8106da0 <HAL_DMA_Abort_IT+0x3c0>)
 8106c12:	4293      	cmp	r3, r2
 8106c14:	d02c      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	681b      	ldr	r3, [r3, #0]
 8106c1a:	4a62      	ldr	r2, [pc, #392]	@ (8106da4 <HAL_DMA_Abort_IT+0x3c4>)
 8106c1c:	4293      	cmp	r3, r2
 8106c1e:	d027      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	681b      	ldr	r3, [r3, #0]
 8106c24:	4a60      	ldr	r2, [pc, #384]	@ (8106da8 <HAL_DMA_Abort_IT+0x3c8>)
 8106c26:	4293      	cmp	r3, r2
 8106c28:	d022      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	681b      	ldr	r3, [r3, #0]
 8106c2e:	4a5f      	ldr	r2, [pc, #380]	@ (8106dac <HAL_DMA_Abort_IT+0x3cc>)
 8106c30:	4293      	cmp	r3, r2
 8106c32:	d01d      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	681b      	ldr	r3, [r3, #0]
 8106c38:	4a5d      	ldr	r2, [pc, #372]	@ (8106db0 <HAL_DMA_Abort_IT+0x3d0>)
 8106c3a:	4293      	cmp	r3, r2
 8106c3c:	d018      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	681b      	ldr	r3, [r3, #0]
 8106c42:	4a5c      	ldr	r2, [pc, #368]	@ (8106db4 <HAL_DMA_Abort_IT+0x3d4>)
 8106c44:	4293      	cmp	r3, r2
 8106c46:	d013      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	4a5a      	ldr	r2, [pc, #360]	@ (8106db8 <HAL_DMA_Abort_IT+0x3d8>)
 8106c4e:	4293      	cmp	r3, r2
 8106c50:	d00e      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	4a59      	ldr	r2, [pc, #356]	@ (8106dbc <HAL_DMA_Abort_IT+0x3dc>)
 8106c58:	4293      	cmp	r3, r2
 8106c5a:	d009      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	681b      	ldr	r3, [r3, #0]
 8106c60:	4a57      	ldr	r2, [pc, #348]	@ (8106dc0 <HAL_DMA_Abort_IT+0x3e0>)
 8106c62:	4293      	cmp	r3, r2
 8106c64:	d004      	beq.n	8106c70 <HAL_DMA_Abort_IT+0x290>
 8106c66:	687b      	ldr	r3, [r7, #4]
 8106c68:	681b      	ldr	r3, [r3, #0]
 8106c6a:	4a56      	ldr	r2, [pc, #344]	@ (8106dc4 <HAL_DMA_Abort_IT+0x3e4>)
 8106c6c:	4293      	cmp	r3, r2
 8106c6e:	d108      	bne.n	8106c82 <HAL_DMA_Abort_IT+0x2a2>
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	681b      	ldr	r3, [r3, #0]
 8106c74:	681a      	ldr	r2, [r3, #0]
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	681b      	ldr	r3, [r3, #0]
 8106c7a:	f022 0201 	bic.w	r2, r2, #1
 8106c7e:	601a      	str	r2, [r3, #0]
 8106c80:	e007      	b.n	8106c92 <HAL_DMA_Abort_IT+0x2b2>
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	681b      	ldr	r3, [r3, #0]
 8106c86:	681a      	ldr	r2, [r3, #0]
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	681b      	ldr	r3, [r3, #0]
 8106c8c:	f022 0201 	bic.w	r2, r2, #1
 8106c90:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	681b      	ldr	r3, [r3, #0]
 8106c96:	4a3c      	ldr	r2, [pc, #240]	@ (8106d88 <HAL_DMA_Abort_IT+0x3a8>)
 8106c98:	4293      	cmp	r3, r2
 8106c9a:	d072      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	681b      	ldr	r3, [r3, #0]
 8106ca0:	4a3a      	ldr	r2, [pc, #232]	@ (8106d8c <HAL_DMA_Abort_IT+0x3ac>)
 8106ca2:	4293      	cmp	r3, r2
 8106ca4:	d06d      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	681b      	ldr	r3, [r3, #0]
 8106caa:	4a39      	ldr	r2, [pc, #228]	@ (8106d90 <HAL_DMA_Abort_IT+0x3b0>)
 8106cac:	4293      	cmp	r3, r2
 8106cae:	d068      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	681b      	ldr	r3, [r3, #0]
 8106cb4:	4a37      	ldr	r2, [pc, #220]	@ (8106d94 <HAL_DMA_Abort_IT+0x3b4>)
 8106cb6:	4293      	cmp	r3, r2
 8106cb8:	d063      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106cba:	687b      	ldr	r3, [r7, #4]
 8106cbc:	681b      	ldr	r3, [r3, #0]
 8106cbe:	4a36      	ldr	r2, [pc, #216]	@ (8106d98 <HAL_DMA_Abort_IT+0x3b8>)
 8106cc0:	4293      	cmp	r3, r2
 8106cc2:	d05e      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	681b      	ldr	r3, [r3, #0]
 8106cc8:	4a34      	ldr	r2, [pc, #208]	@ (8106d9c <HAL_DMA_Abort_IT+0x3bc>)
 8106cca:	4293      	cmp	r3, r2
 8106ccc:	d059      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	681b      	ldr	r3, [r3, #0]
 8106cd2:	4a33      	ldr	r2, [pc, #204]	@ (8106da0 <HAL_DMA_Abort_IT+0x3c0>)
 8106cd4:	4293      	cmp	r3, r2
 8106cd6:	d054      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106cd8:	687b      	ldr	r3, [r7, #4]
 8106cda:	681b      	ldr	r3, [r3, #0]
 8106cdc:	4a31      	ldr	r2, [pc, #196]	@ (8106da4 <HAL_DMA_Abort_IT+0x3c4>)
 8106cde:	4293      	cmp	r3, r2
 8106ce0:	d04f      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	681b      	ldr	r3, [r3, #0]
 8106ce6:	4a30      	ldr	r2, [pc, #192]	@ (8106da8 <HAL_DMA_Abort_IT+0x3c8>)
 8106ce8:	4293      	cmp	r3, r2
 8106cea:	d04a      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	681b      	ldr	r3, [r3, #0]
 8106cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8106dac <HAL_DMA_Abort_IT+0x3cc>)
 8106cf2:	4293      	cmp	r3, r2
 8106cf4:	d045      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	681b      	ldr	r3, [r3, #0]
 8106cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8106db0 <HAL_DMA_Abort_IT+0x3d0>)
 8106cfc:	4293      	cmp	r3, r2
 8106cfe:	d040      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	681b      	ldr	r3, [r3, #0]
 8106d04:	4a2b      	ldr	r2, [pc, #172]	@ (8106db4 <HAL_DMA_Abort_IT+0x3d4>)
 8106d06:	4293      	cmp	r3, r2
 8106d08:	d03b      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	681b      	ldr	r3, [r3, #0]
 8106d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8106db8 <HAL_DMA_Abort_IT+0x3d8>)
 8106d10:	4293      	cmp	r3, r2
 8106d12:	d036      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	681b      	ldr	r3, [r3, #0]
 8106d18:	4a28      	ldr	r2, [pc, #160]	@ (8106dbc <HAL_DMA_Abort_IT+0x3dc>)
 8106d1a:	4293      	cmp	r3, r2
 8106d1c:	d031      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d1e:	687b      	ldr	r3, [r7, #4]
 8106d20:	681b      	ldr	r3, [r3, #0]
 8106d22:	4a27      	ldr	r2, [pc, #156]	@ (8106dc0 <HAL_DMA_Abort_IT+0x3e0>)
 8106d24:	4293      	cmp	r3, r2
 8106d26:	d02c      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	681b      	ldr	r3, [r3, #0]
 8106d2c:	4a25      	ldr	r2, [pc, #148]	@ (8106dc4 <HAL_DMA_Abort_IT+0x3e4>)
 8106d2e:	4293      	cmp	r3, r2
 8106d30:	d027      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d32:	687b      	ldr	r3, [r7, #4]
 8106d34:	681b      	ldr	r3, [r3, #0]
 8106d36:	4a24      	ldr	r2, [pc, #144]	@ (8106dc8 <HAL_DMA_Abort_IT+0x3e8>)
 8106d38:	4293      	cmp	r3, r2
 8106d3a:	d022      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d3c:	687b      	ldr	r3, [r7, #4]
 8106d3e:	681b      	ldr	r3, [r3, #0]
 8106d40:	4a22      	ldr	r2, [pc, #136]	@ (8106dcc <HAL_DMA_Abort_IT+0x3ec>)
 8106d42:	4293      	cmp	r3, r2
 8106d44:	d01d      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	681b      	ldr	r3, [r3, #0]
 8106d4a:	4a21      	ldr	r2, [pc, #132]	@ (8106dd0 <HAL_DMA_Abort_IT+0x3f0>)
 8106d4c:	4293      	cmp	r3, r2
 8106d4e:	d018      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d50:	687b      	ldr	r3, [r7, #4]
 8106d52:	681b      	ldr	r3, [r3, #0]
 8106d54:	4a1f      	ldr	r2, [pc, #124]	@ (8106dd4 <HAL_DMA_Abort_IT+0x3f4>)
 8106d56:	4293      	cmp	r3, r2
 8106d58:	d013      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d5a:	687b      	ldr	r3, [r7, #4]
 8106d5c:	681b      	ldr	r3, [r3, #0]
 8106d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8106dd8 <HAL_DMA_Abort_IT+0x3f8>)
 8106d60:	4293      	cmp	r3, r2
 8106d62:	d00e      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d64:	687b      	ldr	r3, [r7, #4]
 8106d66:	681b      	ldr	r3, [r3, #0]
 8106d68:	4a1c      	ldr	r2, [pc, #112]	@ (8106ddc <HAL_DMA_Abort_IT+0x3fc>)
 8106d6a:	4293      	cmp	r3, r2
 8106d6c:	d009      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d6e:	687b      	ldr	r3, [r7, #4]
 8106d70:	681b      	ldr	r3, [r3, #0]
 8106d72:	4a1b      	ldr	r2, [pc, #108]	@ (8106de0 <HAL_DMA_Abort_IT+0x400>)
 8106d74:	4293      	cmp	r3, r2
 8106d76:	d004      	beq.n	8106d82 <HAL_DMA_Abort_IT+0x3a2>
 8106d78:	687b      	ldr	r3, [r7, #4]
 8106d7a:	681b      	ldr	r3, [r3, #0]
 8106d7c:	4a19      	ldr	r2, [pc, #100]	@ (8106de4 <HAL_DMA_Abort_IT+0x404>)
 8106d7e:	4293      	cmp	r3, r2
 8106d80:	d132      	bne.n	8106de8 <HAL_DMA_Abort_IT+0x408>
 8106d82:	2301      	movs	r3, #1
 8106d84:	e031      	b.n	8106dea <HAL_DMA_Abort_IT+0x40a>
 8106d86:	bf00      	nop
 8106d88:	40020010 	.word	0x40020010
 8106d8c:	40020028 	.word	0x40020028
 8106d90:	40020040 	.word	0x40020040
 8106d94:	40020058 	.word	0x40020058
 8106d98:	40020070 	.word	0x40020070
 8106d9c:	40020088 	.word	0x40020088
 8106da0:	400200a0 	.word	0x400200a0
 8106da4:	400200b8 	.word	0x400200b8
 8106da8:	40020410 	.word	0x40020410
 8106dac:	40020428 	.word	0x40020428
 8106db0:	40020440 	.word	0x40020440
 8106db4:	40020458 	.word	0x40020458
 8106db8:	40020470 	.word	0x40020470
 8106dbc:	40020488 	.word	0x40020488
 8106dc0:	400204a0 	.word	0x400204a0
 8106dc4:	400204b8 	.word	0x400204b8
 8106dc8:	58025408 	.word	0x58025408
 8106dcc:	5802541c 	.word	0x5802541c
 8106dd0:	58025430 	.word	0x58025430
 8106dd4:	58025444 	.word	0x58025444
 8106dd8:	58025458 	.word	0x58025458
 8106ddc:	5802546c 	.word	0x5802546c
 8106de0:	58025480 	.word	0x58025480
 8106de4:	58025494 	.word	0x58025494
 8106de8:	2300      	movs	r3, #0
 8106dea:	2b00      	cmp	r3, #0
 8106dec:	d028      	beq.n	8106e40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8106dee:	687b      	ldr	r3, [r7, #4]
 8106df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106df2:	681a      	ldr	r2, [r3, #0]
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106dfc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106e02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8106e04:	687b      	ldr	r3, [r7, #4]
 8106e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106e08:	f003 031f 	and.w	r3, r3, #31
 8106e0c:	2201      	movs	r2, #1
 8106e0e:	409a      	lsls	r2, r3
 8106e10:	68fb      	ldr	r3, [r7, #12]
 8106e12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106e18:	687a      	ldr	r2, [r7, #4]
 8106e1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106e1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106e22:	2b00      	cmp	r3, #0
 8106e24:	d00c      	beq.n	8106e40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106e26:	687b      	ldr	r3, [r7, #4]
 8106e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106e2a:	681a      	ldr	r2, [r3, #0]
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106e30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106e34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106e3a:	687a      	ldr	r2, [r7, #4]
 8106e3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8106e3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	2201      	movs	r2, #1
 8106e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106e48:	687b      	ldr	r3, [r7, #4]
 8106e4a:	2200      	movs	r2, #0
 8106e4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106e54:	2b00      	cmp	r3, #0
 8106e56:	d003      	beq.n	8106e60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106e5c:	6878      	ldr	r0, [r7, #4]
 8106e5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8106e60:	2300      	movs	r3, #0
}
 8106e62:	4618      	mov	r0, r3
 8106e64:	3710      	adds	r7, #16
 8106e66:	46bd      	mov	sp, r7
 8106e68:	bd80      	pop	{r7, pc}
 8106e6a:	bf00      	nop

08106e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106e6c:	b480      	push	{r7}
 8106e6e:	b089      	sub	sp, #36	@ 0x24
 8106e70:	af00      	add	r7, sp, #0
 8106e72:	6078      	str	r0, [r7, #4]
 8106e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106e76:	2300      	movs	r3, #0
 8106e78:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106e7a:	4b89      	ldr	r3, [pc, #548]	@ (81070a0 <HAL_GPIO_Init+0x234>)
 8106e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106e7e:	e194      	b.n	81071aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106e80:	683b      	ldr	r3, [r7, #0]
 8106e82:	681a      	ldr	r2, [r3, #0]
 8106e84:	2101      	movs	r1, #1
 8106e86:	69fb      	ldr	r3, [r7, #28]
 8106e88:	fa01 f303 	lsl.w	r3, r1, r3
 8106e8c:	4013      	ands	r3, r2
 8106e8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106e90:	693b      	ldr	r3, [r7, #16]
 8106e92:	2b00      	cmp	r3, #0
 8106e94:	f000 8186 	beq.w	81071a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8106e98:	683b      	ldr	r3, [r7, #0]
 8106e9a:	685b      	ldr	r3, [r3, #4]
 8106e9c:	f003 0303 	and.w	r3, r3, #3
 8106ea0:	2b01      	cmp	r3, #1
 8106ea2:	d005      	beq.n	8106eb0 <HAL_GPIO_Init+0x44>
 8106ea4:	683b      	ldr	r3, [r7, #0]
 8106ea6:	685b      	ldr	r3, [r3, #4]
 8106ea8:	f003 0303 	and.w	r3, r3, #3
 8106eac:	2b02      	cmp	r3, #2
 8106eae:	d130      	bne.n	8106f12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	689b      	ldr	r3, [r3, #8]
 8106eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106eb6:	69fb      	ldr	r3, [r7, #28]
 8106eb8:	005b      	lsls	r3, r3, #1
 8106eba:	2203      	movs	r2, #3
 8106ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8106ec0:	43db      	mvns	r3, r3
 8106ec2:	69ba      	ldr	r2, [r7, #24]
 8106ec4:	4013      	ands	r3, r2
 8106ec6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106ec8:	683b      	ldr	r3, [r7, #0]
 8106eca:	68da      	ldr	r2, [r3, #12]
 8106ecc:	69fb      	ldr	r3, [r7, #28]
 8106ece:	005b      	lsls	r3, r3, #1
 8106ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8106ed4:	69ba      	ldr	r2, [r7, #24]
 8106ed6:	4313      	orrs	r3, r2
 8106ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8106eda:	687b      	ldr	r3, [r7, #4]
 8106edc:	69ba      	ldr	r2, [r7, #24]
 8106ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106ee0:	687b      	ldr	r3, [r7, #4]
 8106ee2:	685b      	ldr	r3, [r3, #4]
 8106ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106ee6:	2201      	movs	r2, #1
 8106ee8:	69fb      	ldr	r3, [r7, #28]
 8106eea:	fa02 f303 	lsl.w	r3, r2, r3
 8106eee:	43db      	mvns	r3, r3
 8106ef0:	69ba      	ldr	r2, [r7, #24]
 8106ef2:	4013      	ands	r3, r2
 8106ef4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8106ef6:	683b      	ldr	r3, [r7, #0]
 8106ef8:	685b      	ldr	r3, [r3, #4]
 8106efa:	091b      	lsrs	r3, r3, #4
 8106efc:	f003 0201 	and.w	r2, r3, #1
 8106f00:	69fb      	ldr	r3, [r7, #28]
 8106f02:	fa02 f303 	lsl.w	r3, r2, r3
 8106f06:	69ba      	ldr	r2, [r7, #24]
 8106f08:	4313      	orrs	r3, r2
 8106f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	69ba      	ldr	r2, [r7, #24]
 8106f10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8106f12:	683b      	ldr	r3, [r7, #0]
 8106f14:	685b      	ldr	r3, [r3, #4]
 8106f16:	f003 0303 	and.w	r3, r3, #3
 8106f1a:	2b03      	cmp	r3, #3
 8106f1c:	d017      	beq.n	8106f4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106f1e:	687b      	ldr	r3, [r7, #4]
 8106f20:	68db      	ldr	r3, [r3, #12]
 8106f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106f24:	69fb      	ldr	r3, [r7, #28]
 8106f26:	005b      	lsls	r3, r3, #1
 8106f28:	2203      	movs	r2, #3
 8106f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8106f2e:	43db      	mvns	r3, r3
 8106f30:	69ba      	ldr	r2, [r7, #24]
 8106f32:	4013      	ands	r3, r2
 8106f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106f36:	683b      	ldr	r3, [r7, #0]
 8106f38:	689a      	ldr	r2, [r3, #8]
 8106f3a:	69fb      	ldr	r3, [r7, #28]
 8106f3c:	005b      	lsls	r3, r3, #1
 8106f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8106f42:	69ba      	ldr	r2, [r7, #24]
 8106f44:	4313      	orrs	r3, r2
 8106f46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106f48:	687b      	ldr	r3, [r7, #4]
 8106f4a:	69ba      	ldr	r2, [r7, #24]
 8106f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8106f4e:	683b      	ldr	r3, [r7, #0]
 8106f50:	685b      	ldr	r3, [r3, #4]
 8106f52:	f003 0303 	and.w	r3, r3, #3
 8106f56:	2b02      	cmp	r3, #2
 8106f58:	d123      	bne.n	8106fa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106f5a:	69fb      	ldr	r3, [r7, #28]
 8106f5c:	08da      	lsrs	r2, r3, #3
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	3208      	adds	r2, #8
 8106f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106f68:	69fb      	ldr	r3, [r7, #28]
 8106f6a:	f003 0307 	and.w	r3, r3, #7
 8106f6e:	009b      	lsls	r3, r3, #2
 8106f70:	220f      	movs	r2, #15
 8106f72:	fa02 f303 	lsl.w	r3, r2, r3
 8106f76:	43db      	mvns	r3, r3
 8106f78:	69ba      	ldr	r2, [r7, #24]
 8106f7a:	4013      	ands	r3, r2
 8106f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106f7e:	683b      	ldr	r3, [r7, #0]
 8106f80:	691a      	ldr	r2, [r3, #16]
 8106f82:	69fb      	ldr	r3, [r7, #28]
 8106f84:	f003 0307 	and.w	r3, r3, #7
 8106f88:	009b      	lsls	r3, r3, #2
 8106f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8106f8e:	69ba      	ldr	r2, [r7, #24]
 8106f90:	4313      	orrs	r3, r2
 8106f92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106f94:	69fb      	ldr	r3, [r7, #28]
 8106f96:	08da      	lsrs	r2, r3, #3
 8106f98:	687b      	ldr	r3, [r7, #4]
 8106f9a:	3208      	adds	r2, #8
 8106f9c:	69b9      	ldr	r1, [r7, #24]
 8106f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106fa2:	687b      	ldr	r3, [r7, #4]
 8106fa4:	681b      	ldr	r3, [r3, #0]
 8106fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106fa8:	69fb      	ldr	r3, [r7, #28]
 8106faa:	005b      	lsls	r3, r3, #1
 8106fac:	2203      	movs	r2, #3
 8106fae:	fa02 f303 	lsl.w	r3, r2, r3
 8106fb2:	43db      	mvns	r3, r3
 8106fb4:	69ba      	ldr	r2, [r7, #24]
 8106fb6:	4013      	ands	r3, r2
 8106fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106fba:	683b      	ldr	r3, [r7, #0]
 8106fbc:	685b      	ldr	r3, [r3, #4]
 8106fbe:	f003 0203 	and.w	r2, r3, #3
 8106fc2:	69fb      	ldr	r3, [r7, #28]
 8106fc4:	005b      	lsls	r3, r3, #1
 8106fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8106fca:	69ba      	ldr	r2, [r7, #24]
 8106fcc:	4313      	orrs	r3, r2
 8106fce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106fd0:	687b      	ldr	r3, [r7, #4]
 8106fd2:	69ba      	ldr	r2, [r7, #24]
 8106fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8106fd6:	683b      	ldr	r3, [r7, #0]
 8106fd8:	685b      	ldr	r3, [r3, #4]
 8106fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106fde:	2b00      	cmp	r3, #0
 8106fe0:	f000 80e0 	beq.w	81071a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106fe4:	4b2f      	ldr	r3, [pc, #188]	@ (81070a4 <HAL_GPIO_Init+0x238>)
 8106fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106fea:	4a2e      	ldr	r2, [pc, #184]	@ (81070a4 <HAL_GPIO_Init+0x238>)
 8106fec:	f043 0302 	orr.w	r3, r3, #2
 8106ff0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8106ff4:	4b2b      	ldr	r3, [pc, #172]	@ (81070a4 <HAL_GPIO_Init+0x238>)
 8106ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106ffa:	f003 0302 	and.w	r3, r3, #2
 8106ffe:	60fb      	str	r3, [r7, #12]
 8107000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8107002:	4a29      	ldr	r2, [pc, #164]	@ (81070a8 <HAL_GPIO_Init+0x23c>)
 8107004:	69fb      	ldr	r3, [r7, #28]
 8107006:	089b      	lsrs	r3, r3, #2
 8107008:	3302      	adds	r3, #2
 810700a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810700e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8107010:	69fb      	ldr	r3, [r7, #28]
 8107012:	f003 0303 	and.w	r3, r3, #3
 8107016:	009b      	lsls	r3, r3, #2
 8107018:	220f      	movs	r2, #15
 810701a:	fa02 f303 	lsl.w	r3, r2, r3
 810701e:	43db      	mvns	r3, r3
 8107020:	69ba      	ldr	r2, [r7, #24]
 8107022:	4013      	ands	r3, r2
 8107024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	4a20      	ldr	r2, [pc, #128]	@ (81070ac <HAL_GPIO_Init+0x240>)
 810702a:	4293      	cmp	r3, r2
 810702c:	d052      	beq.n	81070d4 <HAL_GPIO_Init+0x268>
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	4a1f      	ldr	r2, [pc, #124]	@ (81070b0 <HAL_GPIO_Init+0x244>)
 8107032:	4293      	cmp	r3, r2
 8107034:	d031      	beq.n	810709a <HAL_GPIO_Init+0x22e>
 8107036:	687b      	ldr	r3, [r7, #4]
 8107038:	4a1e      	ldr	r2, [pc, #120]	@ (81070b4 <HAL_GPIO_Init+0x248>)
 810703a:	4293      	cmp	r3, r2
 810703c:	d02b      	beq.n	8107096 <HAL_GPIO_Init+0x22a>
 810703e:	687b      	ldr	r3, [r7, #4]
 8107040:	4a1d      	ldr	r2, [pc, #116]	@ (81070b8 <HAL_GPIO_Init+0x24c>)
 8107042:	4293      	cmp	r3, r2
 8107044:	d025      	beq.n	8107092 <HAL_GPIO_Init+0x226>
 8107046:	687b      	ldr	r3, [r7, #4]
 8107048:	4a1c      	ldr	r2, [pc, #112]	@ (81070bc <HAL_GPIO_Init+0x250>)
 810704a:	4293      	cmp	r3, r2
 810704c:	d01f      	beq.n	810708e <HAL_GPIO_Init+0x222>
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	4a1b      	ldr	r2, [pc, #108]	@ (81070c0 <HAL_GPIO_Init+0x254>)
 8107052:	4293      	cmp	r3, r2
 8107054:	d019      	beq.n	810708a <HAL_GPIO_Init+0x21e>
 8107056:	687b      	ldr	r3, [r7, #4]
 8107058:	4a1a      	ldr	r2, [pc, #104]	@ (81070c4 <HAL_GPIO_Init+0x258>)
 810705a:	4293      	cmp	r3, r2
 810705c:	d013      	beq.n	8107086 <HAL_GPIO_Init+0x21a>
 810705e:	687b      	ldr	r3, [r7, #4]
 8107060:	4a19      	ldr	r2, [pc, #100]	@ (81070c8 <HAL_GPIO_Init+0x25c>)
 8107062:	4293      	cmp	r3, r2
 8107064:	d00d      	beq.n	8107082 <HAL_GPIO_Init+0x216>
 8107066:	687b      	ldr	r3, [r7, #4]
 8107068:	4a18      	ldr	r2, [pc, #96]	@ (81070cc <HAL_GPIO_Init+0x260>)
 810706a:	4293      	cmp	r3, r2
 810706c:	d007      	beq.n	810707e <HAL_GPIO_Init+0x212>
 810706e:	687b      	ldr	r3, [r7, #4]
 8107070:	4a17      	ldr	r2, [pc, #92]	@ (81070d0 <HAL_GPIO_Init+0x264>)
 8107072:	4293      	cmp	r3, r2
 8107074:	d101      	bne.n	810707a <HAL_GPIO_Init+0x20e>
 8107076:	2309      	movs	r3, #9
 8107078:	e02d      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 810707a:	230a      	movs	r3, #10
 810707c:	e02b      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 810707e:	2308      	movs	r3, #8
 8107080:	e029      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 8107082:	2307      	movs	r3, #7
 8107084:	e027      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 8107086:	2306      	movs	r3, #6
 8107088:	e025      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 810708a:	2305      	movs	r3, #5
 810708c:	e023      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 810708e:	2304      	movs	r3, #4
 8107090:	e021      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 8107092:	2303      	movs	r3, #3
 8107094:	e01f      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 8107096:	2302      	movs	r3, #2
 8107098:	e01d      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 810709a:	2301      	movs	r3, #1
 810709c:	e01b      	b.n	81070d6 <HAL_GPIO_Init+0x26a>
 810709e:	bf00      	nop
 81070a0:	580000c0 	.word	0x580000c0
 81070a4:	58024400 	.word	0x58024400
 81070a8:	58000400 	.word	0x58000400
 81070ac:	58020000 	.word	0x58020000
 81070b0:	58020400 	.word	0x58020400
 81070b4:	58020800 	.word	0x58020800
 81070b8:	58020c00 	.word	0x58020c00
 81070bc:	58021000 	.word	0x58021000
 81070c0:	58021400 	.word	0x58021400
 81070c4:	58021800 	.word	0x58021800
 81070c8:	58021c00 	.word	0x58021c00
 81070cc:	58022000 	.word	0x58022000
 81070d0:	58022400 	.word	0x58022400
 81070d4:	2300      	movs	r3, #0
 81070d6:	69fa      	ldr	r2, [r7, #28]
 81070d8:	f002 0203 	and.w	r2, r2, #3
 81070dc:	0092      	lsls	r2, r2, #2
 81070de:	4093      	lsls	r3, r2
 81070e0:	69ba      	ldr	r2, [r7, #24]
 81070e2:	4313      	orrs	r3, r2
 81070e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81070e6:	4938      	ldr	r1, [pc, #224]	@ (81071c8 <HAL_GPIO_Init+0x35c>)
 81070e8:	69fb      	ldr	r3, [r7, #28]
 81070ea:	089b      	lsrs	r3, r3, #2
 81070ec:	3302      	adds	r3, #2
 81070ee:	69ba      	ldr	r2, [r7, #24]
 81070f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81070f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81070f8:	681b      	ldr	r3, [r3, #0]
 81070fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81070fc:	693b      	ldr	r3, [r7, #16]
 81070fe:	43db      	mvns	r3, r3
 8107100:	69ba      	ldr	r2, [r7, #24]
 8107102:	4013      	ands	r3, r2
 8107104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8107106:	683b      	ldr	r3, [r7, #0]
 8107108:	685b      	ldr	r3, [r3, #4]
 810710a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810710e:	2b00      	cmp	r3, #0
 8107110:	d003      	beq.n	810711a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8107112:	69ba      	ldr	r2, [r7, #24]
 8107114:	693b      	ldr	r3, [r7, #16]
 8107116:	4313      	orrs	r3, r2
 8107118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810711a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810711e:	69bb      	ldr	r3, [r7, #24]
 8107120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8107122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8107126:	685b      	ldr	r3, [r3, #4]
 8107128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810712a:	693b      	ldr	r3, [r7, #16]
 810712c:	43db      	mvns	r3, r3
 810712e:	69ba      	ldr	r2, [r7, #24]
 8107130:	4013      	ands	r3, r2
 8107132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8107134:	683b      	ldr	r3, [r7, #0]
 8107136:	685b      	ldr	r3, [r3, #4]
 8107138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810713c:	2b00      	cmp	r3, #0
 810713e:	d003      	beq.n	8107148 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8107140:	69ba      	ldr	r2, [r7, #24]
 8107142:	693b      	ldr	r3, [r7, #16]
 8107144:	4313      	orrs	r3, r2
 8107146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8107148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810714c:	69bb      	ldr	r3, [r7, #24]
 810714e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8107150:	697b      	ldr	r3, [r7, #20]
 8107152:	685b      	ldr	r3, [r3, #4]
 8107154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107156:	693b      	ldr	r3, [r7, #16]
 8107158:	43db      	mvns	r3, r3
 810715a:	69ba      	ldr	r2, [r7, #24]
 810715c:	4013      	ands	r3, r2
 810715e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8107160:	683b      	ldr	r3, [r7, #0]
 8107162:	685b      	ldr	r3, [r3, #4]
 8107164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107168:	2b00      	cmp	r3, #0
 810716a:	d003      	beq.n	8107174 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810716c:	69ba      	ldr	r2, [r7, #24]
 810716e:	693b      	ldr	r3, [r7, #16]
 8107170:	4313      	orrs	r3, r2
 8107172:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8107174:	697b      	ldr	r3, [r7, #20]
 8107176:	69ba      	ldr	r2, [r7, #24]
 8107178:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810717a:	697b      	ldr	r3, [r7, #20]
 810717c:	681b      	ldr	r3, [r3, #0]
 810717e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107180:	693b      	ldr	r3, [r7, #16]
 8107182:	43db      	mvns	r3, r3
 8107184:	69ba      	ldr	r2, [r7, #24]
 8107186:	4013      	ands	r3, r2
 8107188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810718a:	683b      	ldr	r3, [r7, #0]
 810718c:	685b      	ldr	r3, [r3, #4]
 810718e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107192:	2b00      	cmp	r3, #0
 8107194:	d003      	beq.n	810719e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8107196:	69ba      	ldr	r2, [r7, #24]
 8107198:	693b      	ldr	r3, [r7, #16]
 810719a:	4313      	orrs	r3, r2
 810719c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810719e:	697b      	ldr	r3, [r7, #20]
 81071a0:	69ba      	ldr	r2, [r7, #24]
 81071a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81071a4:	69fb      	ldr	r3, [r7, #28]
 81071a6:	3301      	adds	r3, #1
 81071a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81071aa:	683b      	ldr	r3, [r7, #0]
 81071ac:	681a      	ldr	r2, [r3, #0]
 81071ae:	69fb      	ldr	r3, [r7, #28]
 81071b0:	fa22 f303 	lsr.w	r3, r2, r3
 81071b4:	2b00      	cmp	r3, #0
 81071b6:	f47f ae63 	bne.w	8106e80 <HAL_GPIO_Init+0x14>
  }
}
 81071ba:	bf00      	nop
 81071bc:	bf00      	nop
 81071be:	3724      	adds	r7, #36	@ 0x24
 81071c0:	46bd      	mov	sp, r7
 81071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071c6:	4770      	bx	lr
 81071c8:	58000400 	.word	0x58000400

081071cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81071cc:	b480      	push	{r7}
 81071ce:	b083      	sub	sp, #12
 81071d0:	af00      	add	r7, sp, #0
 81071d2:	6078      	str	r0, [r7, #4]
 81071d4:	460b      	mov	r3, r1
 81071d6:	807b      	strh	r3, [r7, #2]
 81071d8:	4613      	mov	r3, r2
 81071da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81071dc:	787b      	ldrb	r3, [r7, #1]
 81071de:	2b00      	cmp	r3, #0
 81071e0:	d003      	beq.n	81071ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81071e2:	887a      	ldrh	r2, [r7, #2]
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81071e8:	e003      	b.n	81071f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81071ea:	887b      	ldrh	r3, [r7, #2]
 81071ec:	041a      	lsls	r2, r3, #16
 81071ee:	687b      	ldr	r3, [r7, #4]
 81071f0:	619a      	str	r2, [r3, #24]
}
 81071f2:	bf00      	nop
 81071f4:	370c      	adds	r7, #12
 81071f6:	46bd      	mov	sp, r7
 81071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071fc:	4770      	bx	lr

081071fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81071fe:	b580      	push	{r7, lr}
 8107200:	b082      	sub	sp, #8
 8107202:	af00      	add	r7, sp, #0
 8107204:	4603      	mov	r3, r0
 8107206:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8107208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810720c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8107210:	88fb      	ldrh	r3, [r7, #6]
 8107212:	4013      	ands	r3, r2
 8107214:	2b00      	cmp	r3, #0
 8107216:	d008      	beq.n	810722a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8107218:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810721c:	88fb      	ldrh	r3, [r7, #6]
 810721e:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8107222:	88fb      	ldrh	r3, [r7, #6]
 8107224:	4618      	mov	r0, r3
 8107226:	f7fc fbd1 	bl	81039cc <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 810722a:	bf00      	nop
 810722c:	3708      	adds	r7, #8
 810722e:	46bd      	mov	sp, r7
 8107230:	bd80      	pop	{r7, pc}
	...

08107234 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8107234:	b480      	push	{r7}
 8107236:	b083      	sub	sp, #12
 8107238:	af00      	add	r7, sp, #0
 810723a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810723c:	4b05      	ldr	r3, [pc, #20]	@ (8107254 <HAL_HSEM_ActivateNotification+0x20>)
 810723e:	681a      	ldr	r2, [r3, #0]
 8107240:	4904      	ldr	r1, [pc, #16]	@ (8107254 <HAL_HSEM_ActivateNotification+0x20>)
 8107242:	687b      	ldr	r3, [r7, #4]
 8107244:	4313      	orrs	r3, r2
 8107246:	600b      	str	r3, [r1, #0]
#endif
}
 8107248:	bf00      	nop
 810724a:	370c      	adds	r7, #12
 810724c:	46bd      	mov	sp, r7
 810724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107252:	4770      	bx	lr
 8107254:	58026510 	.word	0x58026510

08107258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8107258:	b580      	push	{r7, lr}
 810725a:	b082      	sub	sp, #8
 810725c:	af00      	add	r7, sp, #0
 810725e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8107260:	687b      	ldr	r3, [r7, #4]
 8107262:	2b00      	cmp	r3, #0
 8107264:	d101      	bne.n	810726a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8107266:	2301      	movs	r3, #1
 8107268:	e08d      	b.n	8107386 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810726a:	687b      	ldr	r3, [r7, #4]
 810726c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107270:	b2db      	uxtb	r3, r3
 8107272:	2b00      	cmp	r3, #0
 8107274:	d106      	bne.n	8107284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8107276:	687b      	ldr	r3, [r7, #4]
 8107278:	2200      	movs	r2, #0
 810727a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810727e:	6878      	ldr	r0, [r7, #4]
 8107280:	f7fc fdcc 	bl	8103e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8107284:	687b      	ldr	r3, [r7, #4]
 8107286:	2224      	movs	r2, #36	@ 0x24
 8107288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810728c:	687b      	ldr	r3, [r7, #4]
 810728e:	681b      	ldr	r3, [r3, #0]
 8107290:	681a      	ldr	r2, [r3, #0]
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	f022 0201 	bic.w	r2, r2, #1
 810729a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810729c:	687b      	ldr	r3, [r7, #4]
 810729e:	685a      	ldr	r2, [r3, #4]
 81072a0:	687b      	ldr	r3, [r7, #4]
 81072a2:	681b      	ldr	r3, [r3, #0]
 81072a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 81072a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	681b      	ldr	r3, [r3, #0]
 81072ae:	689a      	ldr	r2, [r3, #8]
 81072b0:	687b      	ldr	r3, [r7, #4]
 81072b2:	681b      	ldr	r3, [r3, #0]
 81072b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81072b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81072ba:	687b      	ldr	r3, [r7, #4]
 81072bc:	68db      	ldr	r3, [r3, #12]
 81072be:	2b01      	cmp	r3, #1
 81072c0:	d107      	bne.n	81072d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81072c2:	687b      	ldr	r3, [r7, #4]
 81072c4:	689a      	ldr	r2, [r3, #8]
 81072c6:	687b      	ldr	r3, [r7, #4]
 81072c8:	681b      	ldr	r3, [r3, #0]
 81072ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 81072ce:	609a      	str	r2, [r3, #8]
 81072d0:	e006      	b.n	81072e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	689a      	ldr	r2, [r3, #8]
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	681b      	ldr	r3, [r3, #0]
 81072da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 81072de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	68db      	ldr	r3, [r3, #12]
 81072e4:	2b02      	cmp	r3, #2
 81072e6:	d108      	bne.n	81072fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	685a      	ldr	r2, [r3, #4]
 81072ee:	687b      	ldr	r3, [r7, #4]
 81072f0:	681b      	ldr	r3, [r3, #0]
 81072f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81072f6:	605a      	str	r2, [r3, #4]
 81072f8:	e007      	b.n	810730a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81072fa:	687b      	ldr	r3, [r7, #4]
 81072fc:	681b      	ldr	r3, [r3, #0]
 81072fe:	685a      	ldr	r2, [r3, #4]
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	681b      	ldr	r3, [r3, #0]
 8107304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8107308:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	681b      	ldr	r3, [r3, #0]
 810730e:	685b      	ldr	r3, [r3, #4]
 8107310:	687a      	ldr	r2, [r7, #4]
 8107312:	6812      	ldr	r2, [r2, #0]
 8107314:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8107318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810731c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810731e:	687b      	ldr	r3, [r7, #4]
 8107320:	681b      	ldr	r3, [r3, #0]
 8107322:	68da      	ldr	r2, [r3, #12]
 8107324:	687b      	ldr	r3, [r7, #4]
 8107326:	681b      	ldr	r3, [r3, #0]
 8107328:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810732c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810732e:	687b      	ldr	r3, [r7, #4]
 8107330:	691a      	ldr	r2, [r3, #16]
 8107332:	687b      	ldr	r3, [r7, #4]
 8107334:	695b      	ldr	r3, [r3, #20]
 8107336:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810733a:	687b      	ldr	r3, [r7, #4]
 810733c:	699b      	ldr	r3, [r3, #24]
 810733e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	681b      	ldr	r3, [r3, #0]
 8107344:	430a      	orrs	r2, r1
 8107346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8107348:	687b      	ldr	r3, [r7, #4]
 810734a:	69d9      	ldr	r1, [r3, #28]
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	6a1a      	ldr	r2, [r3, #32]
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	681b      	ldr	r3, [r3, #0]
 8107354:	430a      	orrs	r2, r1
 8107356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8107358:	687b      	ldr	r3, [r7, #4]
 810735a:	681b      	ldr	r3, [r3, #0]
 810735c:	681a      	ldr	r2, [r3, #0]
 810735e:	687b      	ldr	r3, [r7, #4]
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	f042 0201 	orr.w	r2, r2, #1
 8107366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107368:	687b      	ldr	r3, [r7, #4]
 810736a:	2200      	movs	r2, #0
 810736c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810736e:	687b      	ldr	r3, [r7, #4]
 8107370:	2220      	movs	r2, #32
 8107372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8107376:	687b      	ldr	r3, [r7, #4]
 8107378:	2200      	movs	r2, #0
 810737a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810737c:	687b      	ldr	r3, [r7, #4]
 810737e:	2200      	movs	r2, #0
 8107380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8107384:	2300      	movs	r3, #0
}
 8107386:	4618      	mov	r0, r3
 8107388:	3708      	adds	r7, #8
 810738a:	46bd      	mov	sp, r7
 810738c:	bd80      	pop	{r7, pc}
	...

08107390 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8107390:	b580      	push	{r7, lr}
 8107392:	b088      	sub	sp, #32
 8107394:	af02      	add	r7, sp, #8
 8107396:	60f8      	str	r0, [r7, #12]
 8107398:	607a      	str	r2, [r7, #4]
 810739a:	461a      	mov	r2, r3
 810739c:	460b      	mov	r3, r1
 810739e:	817b      	strh	r3, [r7, #10]
 81073a0:	4613      	mov	r3, r2
 81073a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81073a4:	68fb      	ldr	r3, [r7, #12]
 81073a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81073aa:	b2db      	uxtb	r3, r3
 81073ac:	2b20      	cmp	r3, #32
 81073ae:	f040 80fd 	bne.w	81075ac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81073b2:	68fb      	ldr	r3, [r7, #12]
 81073b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81073b8:	2b01      	cmp	r3, #1
 81073ba:	d101      	bne.n	81073c0 <HAL_I2C_Master_Transmit+0x30>
 81073bc:	2302      	movs	r3, #2
 81073be:	e0f6      	b.n	81075ae <HAL_I2C_Master_Transmit+0x21e>
 81073c0:	68fb      	ldr	r3, [r7, #12]
 81073c2:	2201      	movs	r2, #1
 81073c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81073c8:	f7fd f9a4 	bl	8104714 <HAL_GetTick>
 81073cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81073ce:	693b      	ldr	r3, [r7, #16]
 81073d0:	9300      	str	r3, [sp, #0]
 81073d2:	2319      	movs	r3, #25
 81073d4:	2201      	movs	r2, #1
 81073d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81073da:	68f8      	ldr	r0, [r7, #12]
 81073dc:	f000 fa24 	bl	8107828 <I2C_WaitOnFlagUntilTimeout>
 81073e0:	4603      	mov	r3, r0
 81073e2:	2b00      	cmp	r3, #0
 81073e4:	d001      	beq.n	81073ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81073e6:	2301      	movs	r3, #1
 81073e8:	e0e1      	b.n	81075ae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81073ea:	68fb      	ldr	r3, [r7, #12]
 81073ec:	2221      	movs	r2, #33	@ 0x21
 81073ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81073f2:	68fb      	ldr	r3, [r7, #12]
 81073f4:	2210      	movs	r2, #16
 81073f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81073fa:	68fb      	ldr	r3, [r7, #12]
 81073fc:	2200      	movs	r2, #0
 81073fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8107400:	68fb      	ldr	r3, [r7, #12]
 8107402:	687a      	ldr	r2, [r7, #4]
 8107404:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8107406:	68fb      	ldr	r3, [r7, #12]
 8107408:	893a      	ldrh	r2, [r7, #8]
 810740a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810740c:	68fb      	ldr	r3, [r7, #12]
 810740e:	2200      	movs	r2, #0
 8107410:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107412:	68fb      	ldr	r3, [r7, #12]
 8107414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107416:	b29b      	uxth	r3, r3
 8107418:	2bff      	cmp	r3, #255	@ 0xff
 810741a:	d906      	bls.n	810742a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810741c:	68fb      	ldr	r3, [r7, #12]
 810741e:	22ff      	movs	r2, #255	@ 0xff
 8107420:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8107422:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8107426:	617b      	str	r3, [r7, #20]
 8107428:	e007      	b.n	810743a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810742a:	68fb      	ldr	r3, [r7, #12]
 810742c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810742e:	b29a      	uxth	r2, r3
 8107430:	68fb      	ldr	r3, [r7, #12]
 8107432:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8107434:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107438:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 810743a:	68fb      	ldr	r3, [r7, #12]
 810743c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810743e:	2b00      	cmp	r3, #0
 8107440:	d024      	beq.n	810748c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8107442:	68fb      	ldr	r3, [r7, #12]
 8107444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107446:	781a      	ldrb	r2, [r3, #0]
 8107448:	68fb      	ldr	r3, [r7, #12]
 810744a:	681b      	ldr	r3, [r3, #0]
 810744c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810744e:	68fb      	ldr	r3, [r7, #12]
 8107450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107452:	1c5a      	adds	r2, r3, #1
 8107454:	68fb      	ldr	r3, [r7, #12]
 8107456:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8107458:	68fb      	ldr	r3, [r7, #12]
 810745a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810745c:	b29b      	uxth	r3, r3
 810745e:	3b01      	subs	r3, #1
 8107460:	b29a      	uxth	r2, r3
 8107462:	68fb      	ldr	r3, [r7, #12]
 8107464:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8107466:	68fb      	ldr	r3, [r7, #12]
 8107468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810746a:	3b01      	subs	r3, #1
 810746c:	b29a      	uxth	r2, r3
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8107472:	68fb      	ldr	r3, [r7, #12]
 8107474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107476:	b2db      	uxtb	r3, r3
 8107478:	3301      	adds	r3, #1
 810747a:	b2da      	uxtb	r2, r3
 810747c:	8979      	ldrh	r1, [r7, #10]
 810747e:	4b4e      	ldr	r3, [pc, #312]	@ (81075b8 <HAL_I2C_Master_Transmit+0x228>)
 8107480:	9300      	str	r3, [sp, #0]
 8107482:	697b      	ldr	r3, [r7, #20]
 8107484:	68f8      	ldr	r0, [r7, #12]
 8107486:	f000 fc1f 	bl	8107cc8 <I2C_TransferConfig>
 810748a:	e066      	b.n	810755a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 810748c:	68fb      	ldr	r3, [r7, #12]
 810748e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107490:	b2da      	uxtb	r2, r3
 8107492:	8979      	ldrh	r1, [r7, #10]
 8107494:	4b48      	ldr	r3, [pc, #288]	@ (81075b8 <HAL_I2C_Master_Transmit+0x228>)
 8107496:	9300      	str	r3, [sp, #0]
 8107498:	697b      	ldr	r3, [r7, #20]
 810749a:	68f8      	ldr	r0, [r7, #12]
 810749c:	f000 fc14 	bl	8107cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 81074a0:	e05b      	b.n	810755a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81074a2:	693a      	ldr	r2, [r7, #16]
 81074a4:	6a39      	ldr	r1, [r7, #32]
 81074a6:	68f8      	ldr	r0, [r7, #12]
 81074a8:	f000 fa17 	bl	81078da <I2C_WaitOnTXISFlagUntilTimeout>
 81074ac:	4603      	mov	r3, r0
 81074ae:	2b00      	cmp	r3, #0
 81074b0:	d001      	beq.n	81074b6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 81074b2:	2301      	movs	r3, #1
 81074b4:	e07b      	b.n	81075ae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81074b6:	68fb      	ldr	r3, [r7, #12]
 81074b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81074ba:	781a      	ldrb	r2, [r3, #0]
 81074bc:	68fb      	ldr	r3, [r7, #12]
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81074c2:	68fb      	ldr	r3, [r7, #12]
 81074c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81074c6:	1c5a      	adds	r2, r3, #1
 81074c8:	68fb      	ldr	r3, [r7, #12]
 81074ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81074cc:	68fb      	ldr	r3, [r7, #12]
 81074ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81074d0:	b29b      	uxth	r3, r3
 81074d2:	3b01      	subs	r3, #1
 81074d4:	b29a      	uxth	r2, r3
 81074d6:	68fb      	ldr	r3, [r7, #12]
 81074d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81074da:	68fb      	ldr	r3, [r7, #12]
 81074dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81074de:	3b01      	subs	r3, #1
 81074e0:	b29a      	uxth	r2, r3
 81074e2:	68fb      	ldr	r3, [r7, #12]
 81074e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81074e6:	68fb      	ldr	r3, [r7, #12]
 81074e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81074ea:	b29b      	uxth	r3, r3
 81074ec:	2b00      	cmp	r3, #0
 81074ee:	d034      	beq.n	810755a <HAL_I2C_Master_Transmit+0x1ca>
 81074f0:	68fb      	ldr	r3, [r7, #12]
 81074f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81074f4:	2b00      	cmp	r3, #0
 81074f6:	d130      	bne.n	810755a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81074f8:	693b      	ldr	r3, [r7, #16]
 81074fa:	9300      	str	r3, [sp, #0]
 81074fc:	6a3b      	ldr	r3, [r7, #32]
 81074fe:	2200      	movs	r2, #0
 8107500:	2180      	movs	r1, #128	@ 0x80
 8107502:	68f8      	ldr	r0, [r7, #12]
 8107504:	f000 f990 	bl	8107828 <I2C_WaitOnFlagUntilTimeout>
 8107508:	4603      	mov	r3, r0
 810750a:	2b00      	cmp	r3, #0
 810750c:	d001      	beq.n	8107512 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 810750e:	2301      	movs	r3, #1
 8107510:	e04d      	b.n	81075ae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107512:	68fb      	ldr	r3, [r7, #12]
 8107514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107516:	b29b      	uxth	r3, r3
 8107518:	2bff      	cmp	r3, #255	@ 0xff
 810751a:	d90e      	bls.n	810753a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810751c:	68fb      	ldr	r3, [r7, #12]
 810751e:	22ff      	movs	r2, #255	@ 0xff
 8107520:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8107522:	68fb      	ldr	r3, [r7, #12]
 8107524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107526:	b2da      	uxtb	r2, r3
 8107528:	8979      	ldrh	r1, [r7, #10]
 810752a:	2300      	movs	r3, #0
 810752c:	9300      	str	r3, [sp, #0]
 810752e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8107532:	68f8      	ldr	r0, [r7, #12]
 8107534:	f000 fbc8 	bl	8107cc8 <I2C_TransferConfig>
 8107538:	e00f      	b.n	810755a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810753a:	68fb      	ldr	r3, [r7, #12]
 810753c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810753e:	b29a      	uxth	r2, r3
 8107540:	68fb      	ldr	r3, [r7, #12]
 8107542:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8107544:	68fb      	ldr	r3, [r7, #12]
 8107546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107548:	b2da      	uxtb	r2, r3
 810754a:	8979      	ldrh	r1, [r7, #10]
 810754c:	2300      	movs	r3, #0
 810754e:	9300      	str	r3, [sp, #0]
 8107550:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107554:	68f8      	ldr	r0, [r7, #12]
 8107556:	f000 fbb7 	bl	8107cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 810755a:	68fb      	ldr	r3, [r7, #12]
 810755c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810755e:	b29b      	uxth	r3, r3
 8107560:	2b00      	cmp	r3, #0
 8107562:	d19e      	bne.n	81074a2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8107564:	693a      	ldr	r2, [r7, #16]
 8107566:	6a39      	ldr	r1, [r7, #32]
 8107568:	68f8      	ldr	r0, [r7, #12]
 810756a:	f000 f9fd 	bl	8107968 <I2C_WaitOnSTOPFlagUntilTimeout>
 810756e:	4603      	mov	r3, r0
 8107570:	2b00      	cmp	r3, #0
 8107572:	d001      	beq.n	8107578 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8107574:	2301      	movs	r3, #1
 8107576:	e01a      	b.n	81075ae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107578:	68fb      	ldr	r3, [r7, #12]
 810757a:	681b      	ldr	r3, [r3, #0]
 810757c:	2220      	movs	r2, #32
 810757e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107580:	68fb      	ldr	r3, [r7, #12]
 8107582:	681b      	ldr	r3, [r3, #0]
 8107584:	6859      	ldr	r1, [r3, #4]
 8107586:	68fb      	ldr	r3, [r7, #12]
 8107588:	681a      	ldr	r2, [r3, #0]
 810758a:	4b0c      	ldr	r3, [pc, #48]	@ (81075bc <HAL_I2C_Master_Transmit+0x22c>)
 810758c:	400b      	ands	r3, r1
 810758e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8107590:	68fb      	ldr	r3, [r7, #12]
 8107592:	2220      	movs	r2, #32
 8107594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8107598:	68fb      	ldr	r3, [r7, #12]
 810759a:	2200      	movs	r2, #0
 810759c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81075a0:	68fb      	ldr	r3, [r7, #12]
 81075a2:	2200      	movs	r2, #0
 81075a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81075a8:	2300      	movs	r3, #0
 81075aa:	e000      	b.n	81075ae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 81075ac:	2302      	movs	r3, #2
  }
}
 81075ae:	4618      	mov	r0, r3
 81075b0:	3718      	adds	r7, #24
 81075b2:	46bd      	mov	sp, r7
 81075b4:	bd80      	pop	{r7, pc}
 81075b6:	bf00      	nop
 81075b8:	80002000 	.word	0x80002000
 81075bc:	fe00e800 	.word	0xfe00e800

081075c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 81075c0:	b580      	push	{r7, lr}
 81075c2:	b088      	sub	sp, #32
 81075c4:	af02      	add	r7, sp, #8
 81075c6:	60f8      	str	r0, [r7, #12]
 81075c8:	607a      	str	r2, [r7, #4]
 81075ca:	461a      	mov	r2, r3
 81075cc:	460b      	mov	r3, r1
 81075ce:	817b      	strh	r3, [r7, #10]
 81075d0:	4613      	mov	r3, r2
 81075d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81075d4:	68fb      	ldr	r3, [r7, #12]
 81075d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81075da:	b2db      	uxtb	r3, r3
 81075dc:	2b20      	cmp	r3, #32
 81075de:	f040 80db 	bne.w	8107798 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81075e2:	68fb      	ldr	r3, [r7, #12]
 81075e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81075e8:	2b01      	cmp	r3, #1
 81075ea:	d101      	bne.n	81075f0 <HAL_I2C_Master_Receive+0x30>
 81075ec:	2302      	movs	r3, #2
 81075ee:	e0d4      	b.n	810779a <HAL_I2C_Master_Receive+0x1da>
 81075f0:	68fb      	ldr	r3, [r7, #12]
 81075f2:	2201      	movs	r2, #1
 81075f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81075f8:	f7fd f88c 	bl	8104714 <HAL_GetTick>
 81075fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81075fe:	697b      	ldr	r3, [r7, #20]
 8107600:	9300      	str	r3, [sp, #0]
 8107602:	2319      	movs	r3, #25
 8107604:	2201      	movs	r2, #1
 8107606:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810760a:	68f8      	ldr	r0, [r7, #12]
 810760c:	f000 f90c 	bl	8107828 <I2C_WaitOnFlagUntilTimeout>
 8107610:	4603      	mov	r3, r0
 8107612:	2b00      	cmp	r3, #0
 8107614:	d001      	beq.n	810761a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8107616:	2301      	movs	r3, #1
 8107618:	e0bf      	b.n	810779a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810761a:	68fb      	ldr	r3, [r7, #12]
 810761c:	2222      	movs	r2, #34	@ 0x22
 810761e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	2210      	movs	r2, #16
 8107626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810762a:	68fb      	ldr	r3, [r7, #12]
 810762c:	2200      	movs	r2, #0
 810762e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8107630:	68fb      	ldr	r3, [r7, #12]
 8107632:	687a      	ldr	r2, [r7, #4]
 8107634:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8107636:	68fb      	ldr	r3, [r7, #12]
 8107638:	893a      	ldrh	r2, [r7, #8]
 810763a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810763c:	68fb      	ldr	r3, [r7, #12]
 810763e:	2200      	movs	r2, #0
 8107640:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107642:	68fb      	ldr	r3, [r7, #12]
 8107644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107646:	b29b      	uxth	r3, r3
 8107648:	2bff      	cmp	r3, #255	@ 0xff
 810764a:	d90e      	bls.n	810766a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810764c:	68fb      	ldr	r3, [r7, #12]
 810764e:	22ff      	movs	r2, #255	@ 0xff
 8107650:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8107652:	68fb      	ldr	r3, [r7, #12]
 8107654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107656:	b2da      	uxtb	r2, r3
 8107658:	8979      	ldrh	r1, [r7, #10]
 810765a:	4b52      	ldr	r3, [pc, #328]	@ (81077a4 <HAL_I2C_Master_Receive+0x1e4>)
 810765c:	9300      	str	r3, [sp, #0]
 810765e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8107662:	68f8      	ldr	r0, [r7, #12]
 8107664:	f000 fb30 	bl	8107cc8 <I2C_TransferConfig>
 8107668:	e06d      	b.n	8107746 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810766a:	68fb      	ldr	r3, [r7, #12]
 810766c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810766e:	b29a      	uxth	r2, r3
 8107670:	68fb      	ldr	r3, [r7, #12]
 8107672:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8107674:	68fb      	ldr	r3, [r7, #12]
 8107676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107678:	b2da      	uxtb	r2, r3
 810767a:	8979      	ldrh	r1, [r7, #10]
 810767c:	4b49      	ldr	r3, [pc, #292]	@ (81077a4 <HAL_I2C_Master_Receive+0x1e4>)
 810767e:	9300      	str	r3, [sp, #0]
 8107680:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107684:	68f8      	ldr	r0, [r7, #12]
 8107686:	f000 fb1f 	bl	8107cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 810768a:	e05c      	b.n	8107746 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810768c:	697a      	ldr	r2, [r7, #20]
 810768e:	6a39      	ldr	r1, [r7, #32]
 8107690:	68f8      	ldr	r0, [r7, #12]
 8107692:	f000 f9ad 	bl	81079f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8107696:	4603      	mov	r3, r0
 8107698:	2b00      	cmp	r3, #0
 810769a:	d001      	beq.n	81076a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 810769c:	2301      	movs	r3, #1
 810769e:	e07c      	b.n	810779a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81076a0:	68fb      	ldr	r3, [r7, #12]
 81076a2:	681b      	ldr	r3, [r3, #0]
 81076a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81076a6:	68fb      	ldr	r3, [r7, #12]
 81076a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81076aa:	b2d2      	uxtb	r2, r2
 81076ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81076ae:	68fb      	ldr	r3, [r7, #12]
 81076b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81076b2:	1c5a      	adds	r2, r3, #1
 81076b4:	68fb      	ldr	r3, [r7, #12]
 81076b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 81076b8:	68fb      	ldr	r3, [r7, #12]
 81076ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81076bc:	3b01      	subs	r3, #1
 81076be:	b29a      	uxth	r2, r3
 81076c0:	68fb      	ldr	r3, [r7, #12]
 81076c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 81076c4:	68fb      	ldr	r3, [r7, #12]
 81076c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81076c8:	b29b      	uxth	r3, r3
 81076ca:	3b01      	subs	r3, #1
 81076cc:	b29a      	uxth	r2, r3
 81076ce:	68fb      	ldr	r3, [r7, #12]
 81076d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81076d2:	68fb      	ldr	r3, [r7, #12]
 81076d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81076d6:	b29b      	uxth	r3, r3
 81076d8:	2b00      	cmp	r3, #0
 81076da:	d034      	beq.n	8107746 <HAL_I2C_Master_Receive+0x186>
 81076dc:	68fb      	ldr	r3, [r7, #12]
 81076de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81076e0:	2b00      	cmp	r3, #0
 81076e2:	d130      	bne.n	8107746 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81076e4:	697b      	ldr	r3, [r7, #20]
 81076e6:	9300      	str	r3, [sp, #0]
 81076e8:	6a3b      	ldr	r3, [r7, #32]
 81076ea:	2200      	movs	r2, #0
 81076ec:	2180      	movs	r1, #128	@ 0x80
 81076ee:	68f8      	ldr	r0, [r7, #12]
 81076f0:	f000 f89a 	bl	8107828 <I2C_WaitOnFlagUntilTimeout>
 81076f4:	4603      	mov	r3, r0
 81076f6:	2b00      	cmp	r3, #0
 81076f8:	d001      	beq.n	81076fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81076fa:	2301      	movs	r3, #1
 81076fc:	e04d      	b.n	810779a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81076fe:	68fb      	ldr	r3, [r7, #12]
 8107700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8107702:	b29b      	uxth	r3, r3
 8107704:	2bff      	cmp	r3, #255	@ 0xff
 8107706:	d90e      	bls.n	8107726 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8107708:	68fb      	ldr	r3, [r7, #12]
 810770a:	22ff      	movs	r2, #255	@ 0xff
 810770c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810770e:	68fb      	ldr	r3, [r7, #12]
 8107710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107712:	b2da      	uxtb	r2, r3
 8107714:	8979      	ldrh	r1, [r7, #10]
 8107716:	2300      	movs	r3, #0
 8107718:	9300      	str	r3, [sp, #0]
 810771a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810771e:	68f8      	ldr	r0, [r7, #12]
 8107720:	f000 fad2 	bl	8107cc8 <I2C_TransferConfig>
 8107724:	e00f      	b.n	8107746 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107726:	68fb      	ldr	r3, [r7, #12]
 8107728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810772a:	b29a      	uxth	r2, r3
 810772c:	68fb      	ldr	r3, [r7, #12]
 810772e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8107730:	68fb      	ldr	r3, [r7, #12]
 8107732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107734:	b2da      	uxtb	r2, r3
 8107736:	8979      	ldrh	r1, [r7, #10]
 8107738:	2300      	movs	r3, #0
 810773a:	9300      	str	r3, [sp, #0]
 810773c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107740:	68f8      	ldr	r0, [r7, #12]
 8107742:	f000 fac1 	bl	8107cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8107746:	68fb      	ldr	r3, [r7, #12]
 8107748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810774a:	b29b      	uxth	r3, r3
 810774c:	2b00      	cmp	r3, #0
 810774e:	d19d      	bne.n	810768c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8107750:	697a      	ldr	r2, [r7, #20]
 8107752:	6a39      	ldr	r1, [r7, #32]
 8107754:	68f8      	ldr	r0, [r7, #12]
 8107756:	f000 f907 	bl	8107968 <I2C_WaitOnSTOPFlagUntilTimeout>
 810775a:	4603      	mov	r3, r0
 810775c:	2b00      	cmp	r3, #0
 810775e:	d001      	beq.n	8107764 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8107760:	2301      	movs	r3, #1
 8107762:	e01a      	b.n	810779a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107764:	68fb      	ldr	r3, [r7, #12]
 8107766:	681b      	ldr	r3, [r3, #0]
 8107768:	2220      	movs	r2, #32
 810776a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810776c:	68fb      	ldr	r3, [r7, #12]
 810776e:	681b      	ldr	r3, [r3, #0]
 8107770:	6859      	ldr	r1, [r3, #4]
 8107772:	68fb      	ldr	r3, [r7, #12]
 8107774:	681a      	ldr	r2, [r3, #0]
 8107776:	4b0c      	ldr	r3, [pc, #48]	@ (81077a8 <HAL_I2C_Master_Receive+0x1e8>)
 8107778:	400b      	ands	r3, r1
 810777a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810777c:	68fb      	ldr	r3, [r7, #12]
 810777e:	2220      	movs	r2, #32
 8107780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8107784:	68fb      	ldr	r3, [r7, #12]
 8107786:	2200      	movs	r2, #0
 8107788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810778c:	68fb      	ldr	r3, [r7, #12]
 810778e:	2200      	movs	r2, #0
 8107790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107794:	2300      	movs	r3, #0
 8107796:	e000      	b.n	810779a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8107798:	2302      	movs	r3, #2
  }
}
 810779a:	4618      	mov	r0, r3
 810779c:	3718      	adds	r7, #24
 810779e:	46bd      	mov	sp, r7
 81077a0:	bd80      	pop	{r7, pc}
 81077a2:	bf00      	nop
 81077a4:	80002400 	.word	0x80002400
 81077a8:	fe00e800 	.word	0xfe00e800

081077ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 81077ac:	b480      	push	{r7}
 81077ae:	b083      	sub	sp, #12
 81077b0:	af00      	add	r7, sp, #0
 81077b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 81077b4:	687b      	ldr	r3, [r7, #4]
 81077b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81077ba:	b2db      	uxtb	r3, r3
}
 81077bc:	4618      	mov	r0, r3
 81077be:	370c      	adds	r7, #12
 81077c0:	46bd      	mov	sp, r7
 81077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077c6:	4770      	bx	lr

081077c8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 81077c8:	b480      	push	{r7}
 81077ca:	b083      	sub	sp, #12
 81077cc:	af00      	add	r7, sp, #0
 81077ce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 81077d0:	687b      	ldr	r3, [r7, #4]
 81077d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 81077d4:	4618      	mov	r0, r3
 81077d6:	370c      	adds	r7, #12
 81077d8:	46bd      	mov	sp, r7
 81077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077de:	4770      	bx	lr

081077e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81077e0:	b480      	push	{r7}
 81077e2:	b083      	sub	sp, #12
 81077e4:	af00      	add	r7, sp, #0
 81077e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	681b      	ldr	r3, [r3, #0]
 81077ec:	699b      	ldr	r3, [r3, #24]
 81077ee:	f003 0302 	and.w	r3, r3, #2
 81077f2:	2b02      	cmp	r3, #2
 81077f4:	d103      	bne.n	81077fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	2200      	movs	r2, #0
 81077fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81077fe:	687b      	ldr	r3, [r7, #4]
 8107800:	681b      	ldr	r3, [r3, #0]
 8107802:	699b      	ldr	r3, [r3, #24]
 8107804:	f003 0301 	and.w	r3, r3, #1
 8107808:	2b01      	cmp	r3, #1
 810780a:	d007      	beq.n	810781c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810780c:	687b      	ldr	r3, [r7, #4]
 810780e:	681b      	ldr	r3, [r3, #0]
 8107810:	699a      	ldr	r2, [r3, #24]
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	681b      	ldr	r3, [r3, #0]
 8107816:	f042 0201 	orr.w	r2, r2, #1
 810781a:	619a      	str	r2, [r3, #24]
  }
}
 810781c:	bf00      	nop
 810781e:	370c      	adds	r7, #12
 8107820:	46bd      	mov	sp, r7
 8107822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107826:	4770      	bx	lr

08107828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8107828:	b580      	push	{r7, lr}
 810782a:	b084      	sub	sp, #16
 810782c:	af00      	add	r7, sp, #0
 810782e:	60f8      	str	r0, [r7, #12]
 8107830:	60b9      	str	r1, [r7, #8]
 8107832:	603b      	str	r3, [r7, #0]
 8107834:	4613      	mov	r3, r2
 8107836:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8107838:	e03b      	b.n	81078b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810783a:	69ba      	ldr	r2, [r7, #24]
 810783c:	6839      	ldr	r1, [r7, #0]
 810783e:	68f8      	ldr	r0, [r7, #12]
 8107840:	f000 f962 	bl	8107b08 <I2C_IsErrorOccurred>
 8107844:	4603      	mov	r3, r0
 8107846:	2b00      	cmp	r3, #0
 8107848:	d001      	beq.n	810784e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 810784a:	2301      	movs	r3, #1
 810784c:	e041      	b.n	81078d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810784e:	683b      	ldr	r3, [r7, #0]
 8107850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107854:	d02d      	beq.n	81078b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107856:	f7fc ff5d 	bl	8104714 <HAL_GetTick>
 810785a:	4602      	mov	r2, r0
 810785c:	69bb      	ldr	r3, [r7, #24]
 810785e:	1ad3      	subs	r3, r2, r3
 8107860:	683a      	ldr	r2, [r7, #0]
 8107862:	429a      	cmp	r2, r3
 8107864:	d302      	bcc.n	810786c <I2C_WaitOnFlagUntilTimeout+0x44>
 8107866:	683b      	ldr	r3, [r7, #0]
 8107868:	2b00      	cmp	r3, #0
 810786a:	d122      	bne.n	81078b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 810786c:	68fb      	ldr	r3, [r7, #12]
 810786e:	681b      	ldr	r3, [r3, #0]
 8107870:	699a      	ldr	r2, [r3, #24]
 8107872:	68bb      	ldr	r3, [r7, #8]
 8107874:	4013      	ands	r3, r2
 8107876:	68ba      	ldr	r2, [r7, #8]
 8107878:	429a      	cmp	r2, r3
 810787a:	bf0c      	ite	eq
 810787c:	2301      	moveq	r3, #1
 810787e:	2300      	movne	r3, #0
 8107880:	b2db      	uxtb	r3, r3
 8107882:	461a      	mov	r2, r3
 8107884:	79fb      	ldrb	r3, [r7, #7]
 8107886:	429a      	cmp	r2, r3
 8107888:	d113      	bne.n	81078b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810788a:	68fb      	ldr	r3, [r7, #12]
 810788c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810788e:	f043 0220 	orr.w	r2, r3, #32
 8107892:	68fb      	ldr	r3, [r7, #12]
 8107894:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8107896:	68fb      	ldr	r3, [r7, #12]
 8107898:	2220      	movs	r2, #32
 810789a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810789e:	68fb      	ldr	r3, [r7, #12]
 81078a0:	2200      	movs	r2, #0
 81078a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81078a6:	68fb      	ldr	r3, [r7, #12]
 81078a8:	2200      	movs	r2, #0
 81078aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 81078ae:	2301      	movs	r3, #1
 81078b0:	e00f      	b.n	81078d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81078b2:	68fb      	ldr	r3, [r7, #12]
 81078b4:	681b      	ldr	r3, [r3, #0]
 81078b6:	699a      	ldr	r2, [r3, #24]
 81078b8:	68bb      	ldr	r3, [r7, #8]
 81078ba:	4013      	ands	r3, r2
 81078bc:	68ba      	ldr	r2, [r7, #8]
 81078be:	429a      	cmp	r2, r3
 81078c0:	bf0c      	ite	eq
 81078c2:	2301      	moveq	r3, #1
 81078c4:	2300      	movne	r3, #0
 81078c6:	b2db      	uxtb	r3, r3
 81078c8:	461a      	mov	r2, r3
 81078ca:	79fb      	ldrb	r3, [r7, #7]
 81078cc:	429a      	cmp	r2, r3
 81078ce:	d0b4      	beq.n	810783a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81078d0:	2300      	movs	r3, #0
}
 81078d2:	4618      	mov	r0, r3
 81078d4:	3710      	adds	r7, #16
 81078d6:	46bd      	mov	sp, r7
 81078d8:	bd80      	pop	{r7, pc}

081078da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81078da:	b580      	push	{r7, lr}
 81078dc:	b084      	sub	sp, #16
 81078de:	af00      	add	r7, sp, #0
 81078e0:	60f8      	str	r0, [r7, #12]
 81078e2:	60b9      	str	r1, [r7, #8]
 81078e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81078e6:	e033      	b.n	8107950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81078e8:	687a      	ldr	r2, [r7, #4]
 81078ea:	68b9      	ldr	r1, [r7, #8]
 81078ec:	68f8      	ldr	r0, [r7, #12]
 81078ee:	f000 f90b 	bl	8107b08 <I2C_IsErrorOccurred>
 81078f2:	4603      	mov	r3, r0
 81078f4:	2b00      	cmp	r3, #0
 81078f6:	d001      	beq.n	81078fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81078f8:	2301      	movs	r3, #1
 81078fa:	e031      	b.n	8107960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81078fc:	68bb      	ldr	r3, [r7, #8]
 81078fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107902:	d025      	beq.n	8107950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107904:	f7fc ff06 	bl	8104714 <HAL_GetTick>
 8107908:	4602      	mov	r2, r0
 810790a:	687b      	ldr	r3, [r7, #4]
 810790c:	1ad3      	subs	r3, r2, r3
 810790e:	68ba      	ldr	r2, [r7, #8]
 8107910:	429a      	cmp	r2, r3
 8107912:	d302      	bcc.n	810791a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8107914:	68bb      	ldr	r3, [r7, #8]
 8107916:	2b00      	cmp	r3, #0
 8107918:	d11a      	bne.n	8107950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810791a:	68fb      	ldr	r3, [r7, #12]
 810791c:	681b      	ldr	r3, [r3, #0]
 810791e:	699b      	ldr	r3, [r3, #24]
 8107920:	f003 0302 	and.w	r3, r3, #2
 8107924:	2b02      	cmp	r3, #2
 8107926:	d013      	beq.n	8107950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107928:	68fb      	ldr	r3, [r7, #12]
 810792a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810792c:	f043 0220 	orr.w	r2, r3, #32
 8107930:	68fb      	ldr	r3, [r7, #12]
 8107932:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8107934:	68fb      	ldr	r3, [r7, #12]
 8107936:	2220      	movs	r2, #32
 8107938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810793c:	68fb      	ldr	r3, [r7, #12]
 810793e:	2200      	movs	r2, #0
 8107940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107944:	68fb      	ldr	r3, [r7, #12]
 8107946:	2200      	movs	r2, #0
 8107948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810794c:	2301      	movs	r3, #1
 810794e:	e007      	b.n	8107960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107950:	68fb      	ldr	r3, [r7, #12]
 8107952:	681b      	ldr	r3, [r3, #0]
 8107954:	699b      	ldr	r3, [r3, #24]
 8107956:	f003 0302 	and.w	r3, r3, #2
 810795a:	2b02      	cmp	r3, #2
 810795c:	d1c4      	bne.n	81078e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810795e:	2300      	movs	r3, #0
}
 8107960:	4618      	mov	r0, r3
 8107962:	3710      	adds	r7, #16
 8107964:	46bd      	mov	sp, r7
 8107966:	bd80      	pop	{r7, pc}

08107968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8107968:	b580      	push	{r7, lr}
 810796a:	b084      	sub	sp, #16
 810796c:	af00      	add	r7, sp, #0
 810796e:	60f8      	str	r0, [r7, #12]
 8107970:	60b9      	str	r1, [r7, #8]
 8107972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107974:	e02f      	b.n	81079d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8107976:	687a      	ldr	r2, [r7, #4]
 8107978:	68b9      	ldr	r1, [r7, #8]
 810797a:	68f8      	ldr	r0, [r7, #12]
 810797c:	f000 f8c4 	bl	8107b08 <I2C_IsErrorOccurred>
 8107980:	4603      	mov	r3, r0
 8107982:	2b00      	cmp	r3, #0
 8107984:	d001      	beq.n	810798a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107986:	2301      	movs	r3, #1
 8107988:	e02d      	b.n	81079e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810798a:	f7fc fec3 	bl	8104714 <HAL_GetTick>
 810798e:	4602      	mov	r2, r0
 8107990:	687b      	ldr	r3, [r7, #4]
 8107992:	1ad3      	subs	r3, r2, r3
 8107994:	68ba      	ldr	r2, [r7, #8]
 8107996:	429a      	cmp	r2, r3
 8107998:	d302      	bcc.n	81079a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810799a:	68bb      	ldr	r3, [r7, #8]
 810799c:	2b00      	cmp	r3, #0
 810799e:	d11a      	bne.n	81079d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 81079a0:	68fb      	ldr	r3, [r7, #12]
 81079a2:	681b      	ldr	r3, [r3, #0]
 81079a4:	699b      	ldr	r3, [r3, #24]
 81079a6:	f003 0320 	and.w	r3, r3, #32
 81079aa:	2b20      	cmp	r3, #32
 81079ac:	d013      	beq.n	81079d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81079ae:	68fb      	ldr	r3, [r7, #12]
 81079b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81079b2:	f043 0220 	orr.w	r2, r3, #32
 81079b6:	68fb      	ldr	r3, [r7, #12]
 81079b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81079ba:	68fb      	ldr	r3, [r7, #12]
 81079bc:	2220      	movs	r2, #32
 81079be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81079c2:	68fb      	ldr	r3, [r7, #12]
 81079c4:	2200      	movs	r2, #0
 81079c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81079ca:	68fb      	ldr	r3, [r7, #12]
 81079cc:	2200      	movs	r2, #0
 81079ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 81079d2:	2301      	movs	r3, #1
 81079d4:	e007      	b.n	81079e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81079d6:	68fb      	ldr	r3, [r7, #12]
 81079d8:	681b      	ldr	r3, [r3, #0]
 81079da:	699b      	ldr	r3, [r3, #24]
 81079dc:	f003 0320 	and.w	r3, r3, #32
 81079e0:	2b20      	cmp	r3, #32
 81079e2:	d1c8      	bne.n	8107976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81079e4:	2300      	movs	r3, #0
}
 81079e6:	4618      	mov	r0, r3
 81079e8:	3710      	adds	r7, #16
 81079ea:	46bd      	mov	sp, r7
 81079ec:	bd80      	pop	{r7, pc}
	...

081079f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81079f0:	b580      	push	{r7, lr}
 81079f2:	b086      	sub	sp, #24
 81079f4:	af00      	add	r7, sp, #0
 81079f6:	60f8      	str	r0, [r7, #12]
 81079f8:	60b9      	str	r1, [r7, #8]
 81079fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81079fc:	2300      	movs	r3, #0
 81079fe:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8107a00:	e071      	b.n	8107ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8107a02:	687a      	ldr	r2, [r7, #4]
 8107a04:	68b9      	ldr	r1, [r7, #8]
 8107a06:	68f8      	ldr	r0, [r7, #12]
 8107a08:	f000 f87e 	bl	8107b08 <I2C_IsErrorOccurred>
 8107a0c:	4603      	mov	r3, r0
 8107a0e:	2b00      	cmp	r3, #0
 8107a10:	d001      	beq.n	8107a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8107a12:	2301      	movs	r3, #1
 8107a14:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8107a16:	68fb      	ldr	r3, [r7, #12]
 8107a18:	681b      	ldr	r3, [r3, #0]
 8107a1a:	699b      	ldr	r3, [r3, #24]
 8107a1c:	f003 0320 	and.w	r3, r3, #32
 8107a20:	2b20      	cmp	r3, #32
 8107a22:	d13b      	bne.n	8107a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8107a24:	7dfb      	ldrb	r3, [r7, #23]
 8107a26:	2b00      	cmp	r3, #0
 8107a28:	d138      	bne.n	8107a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8107a2a:	68fb      	ldr	r3, [r7, #12]
 8107a2c:	681b      	ldr	r3, [r3, #0]
 8107a2e:	699b      	ldr	r3, [r3, #24]
 8107a30:	f003 0304 	and.w	r3, r3, #4
 8107a34:	2b04      	cmp	r3, #4
 8107a36:	d105      	bne.n	8107a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8107a38:	68fb      	ldr	r3, [r7, #12]
 8107a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8107a3c:	2b00      	cmp	r3, #0
 8107a3e:	d001      	beq.n	8107a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8107a40:	2300      	movs	r3, #0
 8107a42:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8107a44:	68fb      	ldr	r3, [r7, #12]
 8107a46:	681b      	ldr	r3, [r3, #0]
 8107a48:	699b      	ldr	r3, [r3, #24]
 8107a4a:	f003 0310 	and.w	r3, r3, #16
 8107a4e:	2b10      	cmp	r3, #16
 8107a50:	d121      	bne.n	8107a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107a52:	68fb      	ldr	r3, [r7, #12]
 8107a54:	681b      	ldr	r3, [r3, #0]
 8107a56:	2210      	movs	r2, #16
 8107a58:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8107a5a:	68fb      	ldr	r3, [r7, #12]
 8107a5c:	2204      	movs	r2, #4
 8107a5e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107a60:	68fb      	ldr	r3, [r7, #12]
 8107a62:	681b      	ldr	r3, [r3, #0]
 8107a64:	2220      	movs	r2, #32
 8107a66:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8107a68:	68fb      	ldr	r3, [r7, #12]
 8107a6a:	681b      	ldr	r3, [r3, #0]
 8107a6c:	6859      	ldr	r1, [r3, #4]
 8107a6e:	68fb      	ldr	r3, [r7, #12]
 8107a70:	681a      	ldr	r2, [r3, #0]
 8107a72:	4b24      	ldr	r3, [pc, #144]	@ (8107b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8107a74:	400b      	ands	r3, r1
 8107a76:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8107a78:	68fb      	ldr	r3, [r7, #12]
 8107a7a:	2220      	movs	r2, #32
 8107a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8107a80:	68fb      	ldr	r3, [r7, #12]
 8107a82:	2200      	movs	r2, #0
 8107a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107a88:	68fb      	ldr	r3, [r7, #12]
 8107a8a:	2200      	movs	r2, #0
 8107a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8107a90:	2301      	movs	r3, #1
 8107a92:	75fb      	strb	r3, [r7, #23]
 8107a94:	e002      	b.n	8107a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107a96:	68fb      	ldr	r3, [r7, #12]
 8107a98:	2200      	movs	r2, #0
 8107a9a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8107a9c:	f7fc fe3a 	bl	8104714 <HAL_GetTick>
 8107aa0:	4602      	mov	r2, r0
 8107aa2:	687b      	ldr	r3, [r7, #4]
 8107aa4:	1ad3      	subs	r3, r2, r3
 8107aa6:	68ba      	ldr	r2, [r7, #8]
 8107aa8:	429a      	cmp	r2, r3
 8107aaa:	d302      	bcc.n	8107ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8107aac:	68bb      	ldr	r3, [r7, #8]
 8107aae:	2b00      	cmp	r3, #0
 8107ab0:	d119      	bne.n	8107ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8107ab2:	7dfb      	ldrb	r3, [r7, #23]
 8107ab4:	2b00      	cmp	r3, #0
 8107ab6:	d116      	bne.n	8107ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8107ab8:	68fb      	ldr	r3, [r7, #12]
 8107aba:	681b      	ldr	r3, [r3, #0]
 8107abc:	699b      	ldr	r3, [r3, #24]
 8107abe:	f003 0304 	and.w	r3, r3, #4
 8107ac2:	2b04      	cmp	r3, #4
 8107ac4:	d00f      	beq.n	8107ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107ac6:	68fb      	ldr	r3, [r7, #12]
 8107ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107aca:	f043 0220 	orr.w	r2, r3, #32
 8107ace:	68fb      	ldr	r3, [r7, #12]
 8107ad0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8107ad2:	68fb      	ldr	r3, [r7, #12]
 8107ad4:	2220      	movs	r2, #32
 8107ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107ada:	68fb      	ldr	r3, [r7, #12]
 8107adc:	2200      	movs	r2, #0
 8107ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8107ae2:	2301      	movs	r3, #1
 8107ae4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8107ae6:	68fb      	ldr	r3, [r7, #12]
 8107ae8:	681b      	ldr	r3, [r3, #0]
 8107aea:	699b      	ldr	r3, [r3, #24]
 8107aec:	f003 0304 	and.w	r3, r3, #4
 8107af0:	2b04      	cmp	r3, #4
 8107af2:	d002      	beq.n	8107afa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8107af4:	7dfb      	ldrb	r3, [r7, #23]
 8107af6:	2b00      	cmp	r3, #0
 8107af8:	d083      	beq.n	8107a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8107afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8107afc:	4618      	mov	r0, r3
 8107afe:	3718      	adds	r7, #24
 8107b00:	46bd      	mov	sp, r7
 8107b02:	bd80      	pop	{r7, pc}
 8107b04:	fe00e800 	.word	0xfe00e800

08107b08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107b08:	b580      	push	{r7, lr}
 8107b0a:	b08a      	sub	sp, #40	@ 0x28
 8107b0c:	af00      	add	r7, sp, #0
 8107b0e:	60f8      	str	r0, [r7, #12]
 8107b10:	60b9      	str	r1, [r7, #8]
 8107b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107b14:	2300      	movs	r3, #0
 8107b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8107b1a:	68fb      	ldr	r3, [r7, #12]
 8107b1c:	681b      	ldr	r3, [r3, #0]
 8107b1e:	699b      	ldr	r3, [r3, #24]
 8107b20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8107b22:	2300      	movs	r3, #0
 8107b24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8107b26:	687b      	ldr	r3, [r7, #4]
 8107b28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8107b2a:	69bb      	ldr	r3, [r7, #24]
 8107b2c:	f003 0310 	and.w	r3, r3, #16
 8107b30:	2b00      	cmp	r3, #0
 8107b32:	d068      	beq.n	8107c06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107b34:	68fb      	ldr	r3, [r7, #12]
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	2210      	movs	r2, #16
 8107b3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8107b3c:	e049      	b.n	8107bd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8107b3e:	68bb      	ldr	r3, [r7, #8]
 8107b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107b44:	d045      	beq.n	8107bd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8107b46:	f7fc fde5 	bl	8104714 <HAL_GetTick>
 8107b4a:	4602      	mov	r2, r0
 8107b4c:	69fb      	ldr	r3, [r7, #28]
 8107b4e:	1ad3      	subs	r3, r2, r3
 8107b50:	68ba      	ldr	r2, [r7, #8]
 8107b52:	429a      	cmp	r2, r3
 8107b54:	d302      	bcc.n	8107b5c <I2C_IsErrorOccurred+0x54>
 8107b56:	68bb      	ldr	r3, [r7, #8]
 8107b58:	2b00      	cmp	r3, #0
 8107b5a:	d13a      	bne.n	8107bd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8107b5c:	68fb      	ldr	r3, [r7, #12]
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	685b      	ldr	r3, [r3, #4]
 8107b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107b66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8107b68:	68fb      	ldr	r3, [r7, #12]
 8107b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8107b6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8107b70:	68fb      	ldr	r3, [r7, #12]
 8107b72:	681b      	ldr	r3, [r3, #0]
 8107b74:	699b      	ldr	r3, [r3, #24]
 8107b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8107b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107b7e:	d121      	bne.n	8107bc4 <I2C_IsErrorOccurred+0xbc>
 8107b80:	697b      	ldr	r3, [r7, #20]
 8107b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107b86:	d01d      	beq.n	8107bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8107b88:	7cfb      	ldrb	r3, [r7, #19]
 8107b8a:	2b20      	cmp	r3, #32
 8107b8c:	d01a      	beq.n	8107bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8107b8e:	68fb      	ldr	r3, [r7, #12]
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	685a      	ldr	r2, [r3, #4]
 8107b94:	68fb      	ldr	r3, [r7, #12]
 8107b96:	681b      	ldr	r3, [r3, #0]
 8107b98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8107b9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8107b9e:	f7fc fdb9 	bl	8104714 <HAL_GetTick>
 8107ba2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107ba4:	e00e      	b.n	8107bc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8107ba6:	f7fc fdb5 	bl	8104714 <HAL_GetTick>
 8107baa:	4602      	mov	r2, r0
 8107bac:	69fb      	ldr	r3, [r7, #28]
 8107bae:	1ad3      	subs	r3, r2, r3
 8107bb0:	2b19      	cmp	r3, #25
 8107bb2:	d907      	bls.n	8107bc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8107bb4:	6a3b      	ldr	r3, [r7, #32]
 8107bb6:	f043 0320 	orr.w	r3, r3, #32
 8107bba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8107bbc:	2301      	movs	r3, #1
 8107bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8107bc2:	e006      	b.n	8107bd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107bc4:	68fb      	ldr	r3, [r7, #12]
 8107bc6:	681b      	ldr	r3, [r3, #0]
 8107bc8:	699b      	ldr	r3, [r3, #24]
 8107bca:	f003 0320 	and.w	r3, r3, #32
 8107bce:	2b20      	cmp	r3, #32
 8107bd0:	d1e9      	bne.n	8107ba6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8107bd2:	68fb      	ldr	r3, [r7, #12]
 8107bd4:	681b      	ldr	r3, [r3, #0]
 8107bd6:	699b      	ldr	r3, [r3, #24]
 8107bd8:	f003 0320 	and.w	r3, r3, #32
 8107bdc:	2b20      	cmp	r3, #32
 8107bde:	d003      	beq.n	8107be8 <I2C_IsErrorOccurred+0xe0>
 8107be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107be4:	2b00      	cmp	r3, #0
 8107be6:	d0aa      	beq.n	8107b3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8107be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107bec:	2b00      	cmp	r3, #0
 8107bee:	d103      	bne.n	8107bf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107bf0:	68fb      	ldr	r3, [r7, #12]
 8107bf2:	681b      	ldr	r3, [r3, #0]
 8107bf4:	2220      	movs	r2, #32
 8107bf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8107bf8:	6a3b      	ldr	r3, [r7, #32]
 8107bfa:	f043 0304 	orr.w	r3, r3, #4
 8107bfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8107c00:	2301      	movs	r3, #1
 8107c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8107c06:	68fb      	ldr	r3, [r7, #12]
 8107c08:	681b      	ldr	r3, [r3, #0]
 8107c0a:	699b      	ldr	r3, [r3, #24]
 8107c0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8107c0e:	69bb      	ldr	r3, [r7, #24]
 8107c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107c14:	2b00      	cmp	r3, #0
 8107c16:	d00b      	beq.n	8107c30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8107c18:	6a3b      	ldr	r3, [r7, #32]
 8107c1a:	f043 0301 	orr.w	r3, r3, #1
 8107c1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8107c20:	68fb      	ldr	r3, [r7, #12]
 8107c22:	681b      	ldr	r3, [r3, #0]
 8107c24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8107c28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8107c2a:	2301      	movs	r3, #1
 8107c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8107c30:	69bb      	ldr	r3, [r7, #24]
 8107c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8107c36:	2b00      	cmp	r3, #0
 8107c38:	d00b      	beq.n	8107c52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8107c3a:	6a3b      	ldr	r3, [r7, #32]
 8107c3c:	f043 0308 	orr.w	r3, r3, #8
 8107c40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8107c42:	68fb      	ldr	r3, [r7, #12]
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8107c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8107c4c:	2301      	movs	r3, #1
 8107c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8107c52:	69bb      	ldr	r3, [r7, #24]
 8107c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8107c58:	2b00      	cmp	r3, #0
 8107c5a:	d00b      	beq.n	8107c74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8107c5c:	6a3b      	ldr	r3, [r7, #32]
 8107c5e:	f043 0302 	orr.w	r3, r3, #2
 8107c62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107c64:	68fb      	ldr	r3, [r7, #12]
 8107c66:	681b      	ldr	r3, [r3, #0]
 8107c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8107c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8107c6e:	2301      	movs	r3, #1
 8107c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8107c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8107c78:	2b00      	cmp	r3, #0
 8107c7a:	d01c      	beq.n	8107cb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8107c7c:	68f8      	ldr	r0, [r7, #12]
 8107c7e:	f7ff fdaf 	bl	81077e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107c82:	68fb      	ldr	r3, [r7, #12]
 8107c84:	681b      	ldr	r3, [r3, #0]
 8107c86:	6859      	ldr	r1, [r3, #4]
 8107c88:	68fb      	ldr	r3, [r7, #12]
 8107c8a:	681a      	ldr	r2, [r3, #0]
 8107c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8107cc4 <I2C_IsErrorOccurred+0x1bc>)
 8107c8e:	400b      	ands	r3, r1
 8107c90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8107c92:	68fb      	ldr	r3, [r7, #12]
 8107c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8107c96:	6a3b      	ldr	r3, [r7, #32]
 8107c98:	431a      	orrs	r2, r3
 8107c9a:	68fb      	ldr	r3, [r7, #12]
 8107c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8107c9e:	68fb      	ldr	r3, [r7, #12]
 8107ca0:	2220      	movs	r2, #32
 8107ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8107ca6:	68fb      	ldr	r3, [r7, #12]
 8107ca8:	2200      	movs	r2, #0
 8107caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107cae:	68fb      	ldr	r3, [r7, #12]
 8107cb0:	2200      	movs	r2, #0
 8107cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8107cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8107cba:	4618      	mov	r0, r3
 8107cbc:	3728      	adds	r7, #40	@ 0x28
 8107cbe:	46bd      	mov	sp, r7
 8107cc0:	bd80      	pop	{r7, pc}
 8107cc2:	bf00      	nop
 8107cc4:	fe00e800 	.word	0xfe00e800

08107cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8107cc8:	b480      	push	{r7}
 8107cca:	b087      	sub	sp, #28
 8107ccc:	af00      	add	r7, sp, #0
 8107cce:	60f8      	str	r0, [r7, #12]
 8107cd0:	607b      	str	r3, [r7, #4]
 8107cd2:	460b      	mov	r3, r1
 8107cd4:	817b      	strh	r3, [r7, #10]
 8107cd6:	4613      	mov	r3, r2
 8107cd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8107cda:	897b      	ldrh	r3, [r7, #10]
 8107cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8107ce0:	7a7b      	ldrb	r3, [r7, #9]
 8107ce2:	041b      	lsls	r3, r3, #16
 8107ce4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8107ce8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8107cea:	687b      	ldr	r3, [r7, #4]
 8107cec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8107cee:	6a3b      	ldr	r3, [r7, #32]
 8107cf0:	4313      	orrs	r3, r2
 8107cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8107cf6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8107cf8:	68fb      	ldr	r3, [r7, #12]
 8107cfa:	681b      	ldr	r3, [r3, #0]
 8107cfc:	685a      	ldr	r2, [r3, #4]
 8107cfe:	6a3b      	ldr	r3, [r7, #32]
 8107d00:	0d5b      	lsrs	r3, r3, #21
 8107d02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8107d06:	4b08      	ldr	r3, [pc, #32]	@ (8107d28 <I2C_TransferConfig+0x60>)
 8107d08:	430b      	orrs	r3, r1
 8107d0a:	43db      	mvns	r3, r3
 8107d0c:	ea02 0103 	and.w	r1, r2, r3
 8107d10:	68fb      	ldr	r3, [r7, #12]
 8107d12:	681b      	ldr	r3, [r3, #0]
 8107d14:	697a      	ldr	r2, [r7, #20]
 8107d16:	430a      	orrs	r2, r1
 8107d18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8107d1a:	bf00      	nop
 8107d1c:	371c      	adds	r7, #28
 8107d1e:	46bd      	mov	sp, r7
 8107d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d24:	4770      	bx	lr
 8107d26:	bf00      	nop
 8107d28:	03ff63ff 	.word	0x03ff63ff

08107d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8107d2c:	b480      	push	{r7}
 8107d2e:	b083      	sub	sp, #12
 8107d30:	af00      	add	r7, sp, #0
 8107d32:	6078      	str	r0, [r7, #4]
 8107d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107d3c:	b2db      	uxtb	r3, r3
 8107d3e:	2b20      	cmp	r3, #32
 8107d40:	d138      	bne.n	8107db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107d48:	2b01      	cmp	r3, #1
 8107d4a:	d101      	bne.n	8107d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8107d4c:	2302      	movs	r3, #2
 8107d4e:	e032      	b.n	8107db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	2201      	movs	r2, #1
 8107d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8107d58:	687b      	ldr	r3, [r7, #4]
 8107d5a:	2224      	movs	r2, #36	@ 0x24
 8107d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	681b      	ldr	r3, [r3, #0]
 8107d64:	681a      	ldr	r2, [r3, #0]
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	681b      	ldr	r3, [r3, #0]
 8107d6a:	f022 0201 	bic.w	r2, r2, #1
 8107d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8107d70:	687b      	ldr	r3, [r7, #4]
 8107d72:	681b      	ldr	r3, [r3, #0]
 8107d74:	681a      	ldr	r2, [r3, #0]
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	681b      	ldr	r3, [r3, #0]
 8107d7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8107d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	681b      	ldr	r3, [r3, #0]
 8107d84:	6819      	ldr	r1, [r3, #0]
 8107d86:	687b      	ldr	r3, [r7, #4]
 8107d88:	681b      	ldr	r3, [r3, #0]
 8107d8a:	683a      	ldr	r2, [r7, #0]
 8107d8c:	430a      	orrs	r2, r1
 8107d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8107d90:	687b      	ldr	r3, [r7, #4]
 8107d92:	681b      	ldr	r3, [r3, #0]
 8107d94:	681a      	ldr	r2, [r3, #0]
 8107d96:	687b      	ldr	r3, [r7, #4]
 8107d98:	681b      	ldr	r3, [r3, #0]
 8107d9a:	f042 0201 	orr.w	r2, r2, #1
 8107d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8107da0:	687b      	ldr	r3, [r7, #4]
 8107da2:	2220      	movs	r2, #32
 8107da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	2200      	movs	r2, #0
 8107dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107db0:	2300      	movs	r3, #0
 8107db2:	e000      	b.n	8107db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8107db4:	2302      	movs	r3, #2
  }
}
 8107db6:	4618      	mov	r0, r3
 8107db8:	370c      	adds	r7, #12
 8107dba:	46bd      	mov	sp, r7
 8107dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dc0:	4770      	bx	lr

08107dc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8107dc2:	b480      	push	{r7}
 8107dc4:	b085      	sub	sp, #20
 8107dc6:	af00      	add	r7, sp, #0
 8107dc8:	6078      	str	r0, [r7, #4]
 8107dca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107dd2:	b2db      	uxtb	r3, r3
 8107dd4:	2b20      	cmp	r3, #32
 8107dd6:	d139      	bne.n	8107e4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107dde:	2b01      	cmp	r3, #1
 8107de0:	d101      	bne.n	8107de6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8107de2:	2302      	movs	r3, #2
 8107de4:	e033      	b.n	8107e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8107de6:	687b      	ldr	r3, [r7, #4]
 8107de8:	2201      	movs	r2, #1
 8107dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8107dee:	687b      	ldr	r3, [r7, #4]
 8107df0:	2224      	movs	r2, #36	@ 0x24
 8107df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8107df6:	687b      	ldr	r3, [r7, #4]
 8107df8:	681b      	ldr	r3, [r3, #0]
 8107dfa:	681a      	ldr	r2, [r3, #0]
 8107dfc:	687b      	ldr	r3, [r7, #4]
 8107dfe:	681b      	ldr	r3, [r3, #0]
 8107e00:	f022 0201 	bic.w	r2, r2, #1
 8107e04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8107e06:	687b      	ldr	r3, [r7, #4]
 8107e08:	681b      	ldr	r3, [r3, #0]
 8107e0a:	681b      	ldr	r3, [r3, #0]
 8107e0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8107e0e:	68fb      	ldr	r3, [r7, #12]
 8107e10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8107e14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8107e16:	683b      	ldr	r3, [r7, #0]
 8107e18:	021b      	lsls	r3, r3, #8
 8107e1a:	68fa      	ldr	r2, [r7, #12]
 8107e1c:	4313      	orrs	r3, r2
 8107e1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8107e20:	687b      	ldr	r3, [r7, #4]
 8107e22:	681b      	ldr	r3, [r3, #0]
 8107e24:	68fa      	ldr	r2, [r7, #12]
 8107e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	681b      	ldr	r3, [r3, #0]
 8107e2c:	681a      	ldr	r2, [r3, #0]
 8107e2e:	687b      	ldr	r3, [r7, #4]
 8107e30:	681b      	ldr	r3, [r3, #0]
 8107e32:	f042 0201 	orr.w	r2, r2, #1
 8107e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8107e38:	687b      	ldr	r3, [r7, #4]
 8107e3a:	2220      	movs	r2, #32
 8107e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	2200      	movs	r2, #0
 8107e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8107e48:	2300      	movs	r3, #0
 8107e4a:	e000      	b.n	8107e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8107e4c:	2302      	movs	r3, #2
  }
}
 8107e4e:	4618      	mov	r0, r3
 8107e50:	3714      	adds	r7, #20
 8107e52:	46bd      	mov	sp, r7
 8107e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e58:	4770      	bx	lr
	...

08107e5c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8107e5c:	b580      	push	{r7, lr}
 8107e5e:	b084      	sub	sp, #16
 8107e60:	af00      	add	r7, sp, #0
 8107e62:	60f8      	str	r0, [r7, #12]
 8107e64:	460b      	mov	r3, r1
 8107e66:	607a      	str	r2, [r7, #4]
 8107e68:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8107e6a:	4b37      	ldr	r3, [pc, #220]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e6c:	681b      	ldr	r3, [r3, #0]
 8107e6e:	f023 0201 	bic.w	r2, r3, #1
 8107e72:	4935      	ldr	r1, [pc, #212]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e74:	68fb      	ldr	r3, [r7, #12]
 8107e76:	4313      	orrs	r3, r2
 8107e78:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8107e7a:	687b      	ldr	r3, [r7, #4]
 8107e7c:	2b00      	cmp	r3, #0
 8107e7e:	d123      	bne.n	8107ec8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8107e80:	f7fe fa7c 	bl	810637c <HAL_GetCurrentCPUID>
 8107e84:	4603      	mov	r3, r0
 8107e86:	2b03      	cmp	r3, #3
 8107e88:	d158      	bne.n	8107f3c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8107e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e8c:	691b      	ldr	r3, [r3, #16]
 8107e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107e90:	f023 0301 	bic.w	r3, r3, #1
 8107e94:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107e96:	4b2d      	ldr	r3, [pc, #180]	@ (8107f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107e98:	691b      	ldr	r3, [r3, #16]
 8107e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8107f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107e9c:	f043 0304 	orr.w	r3, r3, #4
 8107ea0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107ea2:	f3bf 8f4f 	dsb	sy
}
 8107ea6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107ea8:	f3bf 8f6f 	isb	sy
}
 8107eac:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107eae:	7afb      	ldrb	r3, [r7, #11]
 8107eb0:	2b01      	cmp	r3, #1
 8107eb2:	d101      	bne.n	8107eb8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107eb4:	bf30      	wfi
 8107eb6:	e000      	b.n	8107eba <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107eb8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107eba:	4b24      	ldr	r3, [pc, #144]	@ (8107f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107ebc:	691b      	ldr	r3, [r3, #16]
 8107ebe:	4a23      	ldr	r2, [pc, #140]	@ (8107f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107ec0:	f023 0304 	bic.w	r3, r3, #4
 8107ec4:	6113      	str	r3, [r2, #16]
 8107ec6:	e03c      	b.n	8107f42 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8107ec8:	687b      	ldr	r3, [r7, #4]
 8107eca:	2b01      	cmp	r3, #1
 8107ecc:	d123      	bne.n	8107f16 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8107ece:	f7fe fa55 	bl	810637c <HAL_GetCurrentCPUID>
 8107ed2:	4603      	mov	r3, r0
 8107ed4:	2b01      	cmp	r3, #1
 8107ed6:	d133      	bne.n	8107f40 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8107ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107eda:	695b      	ldr	r3, [r3, #20]
 8107edc:	4a1a      	ldr	r2, [pc, #104]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107ede:	f023 0302 	bic.w	r3, r3, #2
 8107ee2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107ee4:	4b19      	ldr	r3, [pc, #100]	@ (8107f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107ee6:	691b      	ldr	r3, [r3, #16]
 8107ee8:	4a18      	ldr	r2, [pc, #96]	@ (8107f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107eea:	f043 0304 	orr.w	r3, r3, #4
 8107eee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107ef0:	f3bf 8f4f 	dsb	sy
}
 8107ef4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107ef6:	f3bf 8f6f 	isb	sy
}
 8107efa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107efc:	7afb      	ldrb	r3, [r7, #11]
 8107efe:	2b01      	cmp	r3, #1
 8107f00:	d101      	bne.n	8107f06 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107f02:	bf30      	wfi
 8107f04:	e000      	b.n	8107f08 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107f06:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107f08:	4b10      	ldr	r3, [pc, #64]	@ (8107f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f0a:	691b      	ldr	r3, [r3, #16]
 8107f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8107f4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f0e:	f023 0304 	bic.w	r3, r3, #4
 8107f12:	6113      	str	r3, [r2, #16]
 8107f14:	e015      	b.n	8107f42 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107f16:	f7fe fa31 	bl	810637c <HAL_GetCurrentCPUID>
 8107f1a:	4603      	mov	r3, r0
 8107f1c:	2b03      	cmp	r3, #3
 8107f1e:	d106      	bne.n	8107f2e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8107f20:	4b09      	ldr	r3, [pc, #36]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f22:	691b      	ldr	r3, [r3, #16]
 8107f24:	4a08      	ldr	r2, [pc, #32]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f26:	f023 0304 	bic.w	r3, r3, #4
 8107f2a:	6113      	str	r3, [r2, #16]
 8107f2c:	e009      	b.n	8107f42 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8107f2e:	4b06      	ldr	r3, [pc, #24]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f30:	695b      	ldr	r3, [r3, #20]
 8107f32:	4a05      	ldr	r2, [pc, #20]	@ (8107f48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f34:	f023 0304 	bic.w	r3, r3, #4
 8107f38:	6153      	str	r3, [r2, #20]
 8107f3a:	e002      	b.n	8107f42 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107f3c:	bf00      	nop
 8107f3e:	e000      	b.n	8107f42 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107f40:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107f42:	3710      	adds	r7, #16
 8107f44:	46bd      	mov	sp, r7
 8107f46:	bd80      	pop	{r7, pc}
 8107f48:	58024800 	.word	0x58024800
 8107f4c:	e000ed00 	.word	0xe000ed00

08107f50 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107f50:	b580      	push	{r7, lr}
 8107f52:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107f54:	f7fe fa12 	bl	810637c <HAL_GetCurrentCPUID>
 8107f58:	4603      	mov	r3, r0
 8107f5a:	2b03      	cmp	r3, #3
 8107f5c:	d101      	bne.n	8107f62 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8107f5e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107f60:	e001      	b.n	8107f66 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107f62:	bf40      	sev
    __WFE ();
 8107f64:	bf20      	wfe
}
 8107f66:	bf00      	nop
 8107f68:	bd80      	pop	{r7, pc}
	...

08107f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8107f6c:	b480      	push	{r7}
 8107f6e:	b089      	sub	sp, #36	@ 0x24
 8107f70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8107f72:	4bb3      	ldr	r3, [pc, #716]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107f74:	691b      	ldr	r3, [r3, #16]
 8107f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8107f7a:	2b18      	cmp	r3, #24
 8107f7c:	f200 8155 	bhi.w	810822a <HAL_RCC_GetSysClockFreq+0x2be>
 8107f80:	a201      	add	r2, pc, #4	@ (adr r2, 8107f88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8107f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f86:	bf00      	nop
 8107f88:	08107fed 	.word	0x08107fed
 8107f8c:	0810822b 	.word	0x0810822b
 8107f90:	0810822b 	.word	0x0810822b
 8107f94:	0810822b 	.word	0x0810822b
 8107f98:	0810822b 	.word	0x0810822b
 8107f9c:	0810822b 	.word	0x0810822b
 8107fa0:	0810822b 	.word	0x0810822b
 8107fa4:	0810822b 	.word	0x0810822b
 8107fa8:	08108013 	.word	0x08108013
 8107fac:	0810822b 	.word	0x0810822b
 8107fb0:	0810822b 	.word	0x0810822b
 8107fb4:	0810822b 	.word	0x0810822b
 8107fb8:	0810822b 	.word	0x0810822b
 8107fbc:	0810822b 	.word	0x0810822b
 8107fc0:	0810822b 	.word	0x0810822b
 8107fc4:	0810822b 	.word	0x0810822b
 8107fc8:	08108019 	.word	0x08108019
 8107fcc:	0810822b 	.word	0x0810822b
 8107fd0:	0810822b 	.word	0x0810822b
 8107fd4:	0810822b 	.word	0x0810822b
 8107fd8:	0810822b 	.word	0x0810822b
 8107fdc:	0810822b 	.word	0x0810822b
 8107fe0:	0810822b 	.word	0x0810822b
 8107fe4:	0810822b 	.word	0x0810822b
 8107fe8:	0810801f 	.word	0x0810801f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107fec:	4b94      	ldr	r3, [pc, #592]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107fee:	681b      	ldr	r3, [r3, #0]
 8107ff0:	f003 0320 	and.w	r3, r3, #32
 8107ff4:	2b00      	cmp	r3, #0
 8107ff6:	d009      	beq.n	810800c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107ff8:	4b91      	ldr	r3, [pc, #580]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107ffa:	681b      	ldr	r3, [r3, #0]
 8107ffc:	08db      	lsrs	r3, r3, #3
 8107ffe:	f003 0303 	and.w	r3, r3, #3
 8108002:	4a90      	ldr	r2, [pc, #576]	@ (8108244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108004:	fa22 f303 	lsr.w	r3, r2, r3
 8108008:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810800a:	e111      	b.n	8108230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810800c:	4b8d      	ldr	r3, [pc, #564]	@ (8108244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810800e:	61bb      	str	r3, [r7, #24]
      break;
 8108010:	e10e      	b.n	8108230 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8108012:	4b8d      	ldr	r3, [pc, #564]	@ (8108248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108014:	61bb      	str	r3, [r7, #24]
      break;
 8108016:	e10b      	b.n	8108230 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8108018:	4b8c      	ldr	r3, [pc, #560]	@ (810824c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810801a:	61bb      	str	r3, [r7, #24]
      break;
 810801c:	e108      	b.n	8108230 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810801e:	4b88      	ldr	r3, [pc, #544]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108022:	f003 0303 	and.w	r3, r3, #3
 8108026:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8108028:	4b85      	ldr	r3, [pc, #532]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810802c:	091b      	lsrs	r3, r3, #4
 810802e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108032:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8108034:	4b82      	ldr	r3, [pc, #520]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108038:	f003 0301 	and.w	r3, r3, #1
 810803c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810803e:	4b80      	ldr	r3, [pc, #512]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108042:	08db      	lsrs	r3, r3, #3
 8108044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108048:	68fa      	ldr	r2, [r7, #12]
 810804a:	fb02 f303 	mul.w	r3, r2, r3
 810804e:	ee07 3a90 	vmov	s15, r3
 8108052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108056:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810805a:	693b      	ldr	r3, [r7, #16]
 810805c:	2b00      	cmp	r3, #0
 810805e:	f000 80e1 	beq.w	8108224 <HAL_RCC_GetSysClockFreq+0x2b8>
 8108062:	697b      	ldr	r3, [r7, #20]
 8108064:	2b02      	cmp	r3, #2
 8108066:	f000 8083 	beq.w	8108170 <HAL_RCC_GetSysClockFreq+0x204>
 810806a:	697b      	ldr	r3, [r7, #20]
 810806c:	2b02      	cmp	r3, #2
 810806e:	f200 80a1 	bhi.w	81081b4 <HAL_RCC_GetSysClockFreq+0x248>
 8108072:	697b      	ldr	r3, [r7, #20]
 8108074:	2b00      	cmp	r3, #0
 8108076:	d003      	beq.n	8108080 <HAL_RCC_GetSysClockFreq+0x114>
 8108078:	697b      	ldr	r3, [r7, #20]
 810807a:	2b01      	cmp	r3, #1
 810807c:	d056      	beq.n	810812c <HAL_RCC_GetSysClockFreq+0x1c0>
 810807e:	e099      	b.n	81081b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108080:	4b6f      	ldr	r3, [pc, #444]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108082:	681b      	ldr	r3, [r3, #0]
 8108084:	f003 0320 	and.w	r3, r3, #32
 8108088:	2b00      	cmp	r3, #0
 810808a:	d02d      	beq.n	81080e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810808c:	4b6c      	ldr	r3, [pc, #432]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810808e:	681b      	ldr	r3, [r3, #0]
 8108090:	08db      	lsrs	r3, r3, #3
 8108092:	f003 0303 	and.w	r3, r3, #3
 8108096:	4a6b      	ldr	r2, [pc, #428]	@ (8108244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108098:	fa22 f303 	lsr.w	r3, r2, r3
 810809c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	ee07 3a90 	vmov	s15, r3
 81080a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080a8:	693b      	ldr	r3, [r7, #16]
 81080aa:	ee07 3a90 	vmov	s15, r3
 81080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080b6:	4b62      	ldr	r3, [pc, #392]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81080b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81080ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080be:	ee07 3a90 	vmov	s15, r3
 81080c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81080ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8108250 <HAL_RCC_GetSysClockFreq+0x2e4>
 81080ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81080da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81080e6:	e087      	b.n	81081f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81080e8:	693b      	ldr	r3, [r7, #16]
 81080ea:	ee07 3a90 	vmov	s15, r3
 81080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8108254 <HAL_RCC_GetSysClockFreq+0x2e8>
 81080f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080fa:	4b51      	ldr	r3, [pc, #324]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81080fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81080fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108102:	ee07 3a90 	vmov	s15, r3
 8108106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810810a:	ed97 6a02 	vldr	s12, [r7, #8]
 810810e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8108250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810811a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810811e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810812a:	e065      	b.n	81081f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810812c:	693b      	ldr	r3, [r7, #16]
 810812e:	ee07 3a90 	vmov	s15, r3
 8108132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108136:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8108258 <HAL_RCC_GetSysClockFreq+0x2ec>
 810813a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810813e:	4b40      	ldr	r3, [pc, #256]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108146:	ee07 3a90 	vmov	s15, r3
 810814a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810814e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108152:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8108250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810815a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810815e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108166:	ee67 7a27 	vmul.f32	s15, s14, s15
 810816a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810816e:	e043      	b.n	81081f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108170:	693b      	ldr	r3, [r7, #16]
 8108172:	ee07 3a90 	vmov	s15, r3
 8108176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810817a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810825c <HAL_RCC_GetSysClockFreq+0x2f0>
 810817e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108182:	4b2f      	ldr	r3, [pc, #188]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810818a:	ee07 3a90 	vmov	s15, r3
 810818e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108192:	ed97 6a02 	vldr	s12, [r7, #8]
 8108196:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8108250 <HAL_RCC_GetSysClockFreq+0x2e4>
 810819a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810819e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81081a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81081a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81081aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81081ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81081b2:	e021      	b.n	81081f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81081b4:	693b      	ldr	r3, [r7, #16]
 81081b6:	ee07 3a90 	vmov	s15, r3
 81081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81081be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8108258 <HAL_RCC_GetSysClockFreq+0x2ec>
 81081c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81081c6:	4b1e      	ldr	r3, [pc, #120]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81081c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81081ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81081ce:	ee07 3a90 	vmov	s15, r3
 81081d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81081d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81081da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8108250 <HAL_RCC_GetSysClockFreq+0x2e4>
 81081de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81081e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81081e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81081ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81081ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81081f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81081f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81081f8:	4b11      	ldr	r3, [pc, #68]	@ (8108240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81081fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81081fc:	0a5b      	lsrs	r3, r3, #9
 81081fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108202:	3301      	adds	r3, #1
 8108204:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8108206:	683b      	ldr	r3, [r7, #0]
 8108208:	ee07 3a90 	vmov	s15, r3
 810820c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8108210:	edd7 6a07 	vldr	s13, [r7, #28]
 8108214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810821c:	ee17 3a90 	vmov	r3, s15
 8108220:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8108222:	e005      	b.n	8108230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8108224:	2300      	movs	r3, #0
 8108226:	61bb      	str	r3, [r7, #24]
      break;
 8108228:	e002      	b.n	8108230 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810822a:	4b07      	ldr	r3, [pc, #28]	@ (8108248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810822c:	61bb      	str	r3, [r7, #24]
      break;
 810822e:	bf00      	nop
  }

  return sysclockfreq;
 8108230:	69bb      	ldr	r3, [r7, #24]
}
 8108232:	4618      	mov	r0, r3
 8108234:	3724      	adds	r7, #36	@ 0x24
 8108236:	46bd      	mov	sp, r7
 8108238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810823c:	4770      	bx	lr
 810823e:	bf00      	nop
 8108240:	58024400 	.word	0x58024400
 8108244:	03d09000 	.word	0x03d09000
 8108248:	003d0900 	.word	0x003d0900
 810824c:	007a1200 	.word	0x007a1200
 8108250:	46000000 	.word	0x46000000
 8108254:	4c742400 	.word	0x4c742400
 8108258:	4a742400 	.word	0x4a742400
 810825c:	4af42400 	.word	0x4af42400

08108260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8108260:	b580      	push	{r7, lr}
 8108262:	b082      	sub	sp, #8
 8108264:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8108266:	f7ff fe81 	bl	8107f6c <HAL_RCC_GetSysClockFreq>
 810826a:	4602      	mov	r2, r0
 810826c:	4b11      	ldr	r3, [pc, #68]	@ (81082b4 <HAL_RCC_GetHCLKFreq+0x54>)
 810826e:	699b      	ldr	r3, [r3, #24]
 8108270:	0a1b      	lsrs	r3, r3, #8
 8108272:	f003 030f 	and.w	r3, r3, #15
 8108276:	4910      	ldr	r1, [pc, #64]	@ (81082b8 <HAL_RCC_GetHCLKFreq+0x58>)
 8108278:	5ccb      	ldrb	r3, [r1, r3]
 810827a:	f003 031f 	and.w	r3, r3, #31
 810827e:	fa22 f303 	lsr.w	r3, r2, r3
 8108282:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8108284:	4b0b      	ldr	r3, [pc, #44]	@ (81082b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8108286:	699b      	ldr	r3, [r3, #24]
 8108288:	f003 030f 	and.w	r3, r3, #15
 810828c:	4a0a      	ldr	r2, [pc, #40]	@ (81082b8 <HAL_RCC_GetHCLKFreq+0x58>)
 810828e:	5cd3      	ldrb	r3, [r2, r3]
 8108290:	f003 031f 	and.w	r3, r3, #31
 8108294:	687a      	ldr	r2, [r7, #4]
 8108296:	fa22 f303 	lsr.w	r3, r2, r3
 810829a:	4a08      	ldr	r2, [pc, #32]	@ (81082bc <HAL_RCC_GetHCLKFreq+0x5c>)
 810829c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810829e:	4b07      	ldr	r3, [pc, #28]	@ (81082bc <HAL_RCC_GetHCLKFreq+0x5c>)
 81082a0:	681b      	ldr	r3, [r3, #0]
 81082a2:	4a07      	ldr	r2, [pc, #28]	@ (81082c0 <HAL_RCC_GetHCLKFreq+0x60>)
 81082a4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81082a6:	4b05      	ldr	r3, [pc, #20]	@ (81082bc <HAL_RCC_GetHCLKFreq+0x5c>)
 81082a8:	681b      	ldr	r3, [r3, #0]
}
 81082aa:	4618      	mov	r0, r3
 81082ac:	3708      	adds	r7, #8
 81082ae:	46bd      	mov	sp, r7
 81082b0:	bd80      	pop	{r7, pc}
 81082b2:	bf00      	nop
 81082b4:	58024400 	.word	0x58024400
 81082b8:	08113cc8 	.word	0x08113cc8
 81082bc:	10000004 	.word	0x10000004
 81082c0:	10000000 	.word	0x10000000

081082c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81082c4:	b580      	push	{r7, lr}
 81082c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81082c8:	f7ff ffca 	bl	8108260 <HAL_RCC_GetHCLKFreq>
 81082cc:	4602      	mov	r2, r0
 81082ce:	4b06      	ldr	r3, [pc, #24]	@ (81082e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81082d0:	69db      	ldr	r3, [r3, #28]
 81082d2:	091b      	lsrs	r3, r3, #4
 81082d4:	f003 0307 	and.w	r3, r3, #7
 81082d8:	4904      	ldr	r1, [pc, #16]	@ (81082ec <HAL_RCC_GetPCLK1Freq+0x28>)
 81082da:	5ccb      	ldrb	r3, [r1, r3]
 81082dc:	f003 031f 	and.w	r3, r3, #31
 81082e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81082e4:	4618      	mov	r0, r3
 81082e6:	bd80      	pop	{r7, pc}
 81082e8:	58024400 	.word	0x58024400
 81082ec:	08113cc8 	.word	0x08113cc8

081082f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81082f0:	b580      	push	{r7, lr}
 81082f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81082f4:	f7ff ffb4 	bl	8108260 <HAL_RCC_GetHCLKFreq>
 81082f8:	4602      	mov	r2, r0
 81082fa:	4b06      	ldr	r3, [pc, #24]	@ (8108314 <HAL_RCC_GetPCLK2Freq+0x24>)
 81082fc:	69db      	ldr	r3, [r3, #28]
 81082fe:	0a1b      	lsrs	r3, r3, #8
 8108300:	f003 0307 	and.w	r3, r3, #7
 8108304:	4904      	ldr	r1, [pc, #16]	@ (8108318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8108306:	5ccb      	ldrb	r3, [r1, r3]
 8108308:	f003 031f 	and.w	r3, r3, #31
 810830c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8108310:	4618      	mov	r0, r3
 8108312:	bd80      	pop	{r7, pc}
 8108314:	58024400 	.word	0x58024400
 8108318:	08113cc8 	.word	0x08113cc8

0810831c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810831c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108320:	b0ca      	sub	sp, #296	@ 0x128
 8108322:	af00      	add	r7, sp, #0
 8108324:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8108328:	2300      	movs	r3, #0
 810832a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810832e:	2300      	movs	r3, #0
 8108330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8108334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108338:	e9d3 2300 	ldrd	r2, r3, [r3]
 810833c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8108340:	2500      	movs	r5, #0
 8108342:	ea54 0305 	orrs.w	r3, r4, r5
 8108346:	d049      	beq.n	81083dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8108348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810834c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810834e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8108352:	d02f      	beq.n	81083b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8108354:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8108358:	d828      	bhi.n	81083ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 810835a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810835e:	d01a      	beq.n	8108396 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8108360:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8108364:	d822      	bhi.n	81083ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8108366:	2b00      	cmp	r3, #0
 8108368:	d003      	beq.n	8108372 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810836a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810836e:	d007      	beq.n	8108380 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8108370:	e01c      	b.n	81083ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108372:	4bb8      	ldr	r3, [pc, #736]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108376:	4ab7      	ldr	r2, [pc, #732]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810837c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810837e:	e01a      	b.n	81083b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108384:	3308      	adds	r3, #8
 8108386:	2102      	movs	r1, #2
 8108388:	4618      	mov	r0, r3
 810838a:	f002 fb61 	bl	810aa50 <RCCEx_PLL2_Config>
 810838e:	4603      	mov	r3, r0
 8108390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8108394:	e00f      	b.n	81083b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810839a:	3328      	adds	r3, #40	@ 0x28
 810839c:	2102      	movs	r1, #2
 810839e:	4618      	mov	r0, r3
 81083a0:	f002 fc08 	bl	810abb4 <RCCEx_PLL3_Config>
 81083a4:	4603      	mov	r3, r0
 81083a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81083aa:	e004      	b.n	81083b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81083ac:	2301      	movs	r3, #1
 81083ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81083b2:	e000      	b.n	81083b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81083b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81083b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81083ba:	2b00      	cmp	r3, #0
 81083bc:	d10a      	bne.n	81083d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81083be:	4ba5      	ldr	r3, [pc, #660]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81083c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81083c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81083c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81083cc:	4aa1      	ldr	r2, [pc, #644]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81083ce:	430b      	orrs	r3, r1
 81083d0:	6513      	str	r3, [r2, #80]	@ 0x50
 81083d2:	e003      	b.n	81083dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81083d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81083d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81083e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81083e8:	f04f 0900 	mov.w	r9, #0
 81083ec:	ea58 0309 	orrs.w	r3, r8, r9
 81083f0:	d047      	beq.n	8108482 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81083f8:	2b04      	cmp	r3, #4
 81083fa:	d82a      	bhi.n	8108452 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81083fc:	a201      	add	r2, pc, #4	@ (adr r2, 8108404 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81083fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108402:	bf00      	nop
 8108404:	08108419 	.word	0x08108419
 8108408:	08108427 	.word	0x08108427
 810840c:	0810843d 	.word	0x0810843d
 8108410:	0810845b 	.word	0x0810845b
 8108414:	0810845b 	.word	0x0810845b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108418:	4b8e      	ldr	r3, [pc, #568]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810841a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810841c:	4a8d      	ldr	r2, [pc, #564]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810841e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108424:	e01a      	b.n	810845c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810842a:	3308      	adds	r3, #8
 810842c:	2100      	movs	r1, #0
 810842e:	4618      	mov	r0, r3
 8108430:	f002 fb0e 	bl	810aa50 <RCCEx_PLL2_Config>
 8108434:	4603      	mov	r3, r0
 8108436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810843a:	e00f      	b.n	810845c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108440:	3328      	adds	r3, #40	@ 0x28
 8108442:	2100      	movs	r1, #0
 8108444:	4618      	mov	r0, r3
 8108446:	f002 fbb5 	bl	810abb4 <RCCEx_PLL3_Config>
 810844a:	4603      	mov	r3, r0
 810844c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108450:	e004      	b.n	810845c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108452:	2301      	movs	r3, #1
 8108454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108458:	e000      	b.n	810845c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810845a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810845c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108460:	2b00      	cmp	r3, #0
 8108462:	d10a      	bne.n	810847a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8108464:	4b7b      	ldr	r3, [pc, #492]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108468:	f023 0107 	bic.w	r1, r3, #7
 810846c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108472:	4a78      	ldr	r2, [pc, #480]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108474:	430b      	orrs	r3, r1
 8108476:	6513      	str	r3, [r2, #80]	@ 0x50
 8108478:	e003      	b.n	8108482 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810847a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810847e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8108482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108486:	e9d3 2300 	ldrd	r2, r3, [r3]
 810848a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810848e:	f04f 0b00 	mov.w	fp, #0
 8108492:	ea5a 030b 	orrs.w	r3, sl, fp
 8108496:	d04c      	beq.n	8108532 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8108498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810849c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810849e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81084a2:	d030      	beq.n	8108506 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81084a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81084a8:	d829      	bhi.n	81084fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81084aa:	2bc0      	cmp	r3, #192	@ 0xc0
 81084ac:	d02d      	beq.n	810850a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81084ae:	2bc0      	cmp	r3, #192	@ 0xc0
 81084b0:	d825      	bhi.n	81084fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81084b2:	2b80      	cmp	r3, #128	@ 0x80
 81084b4:	d018      	beq.n	81084e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81084b6:	2b80      	cmp	r3, #128	@ 0x80
 81084b8:	d821      	bhi.n	81084fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81084ba:	2b00      	cmp	r3, #0
 81084bc:	d002      	beq.n	81084c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81084be:	2b40      	cmp	r3, #64	@ 0x40
 81084c0:	d007      	beq.n	81084d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81084c2:	e01c      	b.n	81084fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81084c4:	4b63      	ldr	r3, [pc, #396]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81084c8:	4a62      	ldr	r2, [pc, #392]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81084ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81084ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81084d0:	e01c      	b.n	810850c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084d6:	3308      	adds	r3, #8
 81084d8:	2100      	movs	r1, #0
 81084da:	4618      	mov	r0, r3
 81084dc:	f002 fab8 	bl	810aa50 <RCCEx_PLL2_Config>
 81084e0:	4603      	mov	r3, r0
 81084e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81084e6:	e011      	b.n	810850c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084ec:	3328      	adds	r3, #40	@ 0x28
 81084ee:	2100      	movs	r1, #0
 81084f0:	4618      	mov	r0, r3
 81084f2:	f002 fb5f 	bl	810abb4 <RCCEx_PLL3_Config>
 81084f6:	4603      	mov	r3, r0
 81084f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81084fc:	e006      	b.n	810850c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81084fe:	2301      	movs	r3, #1
 8108500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108504:	e002      	b.n	810850c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8108506:	bf00      	nop
 8108508:	e000      	b.n	810850c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810850a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810850c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108510:	2b00      	cmp	r3, #0
 8108512:	d10a      	bne.n	810852a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8108514:	4b4f      	ldr	r3, [pc, #316]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108518:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810851c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108522:	4a4c      	ldr	r2, [pc, #304]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108524:	430b      	orrs	r3, r1
 8108526:	6513      	str	r3, [r2, #80]	@ 0x50
 8108528:	e003      	b.n	8108532 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810852a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810852e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8108532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108536:	e9d3 2300 	ldrd	r2, r3, [r3]
 810853a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810853e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8108542:	2300      	movs	r3, #0
 8108544:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8108548:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810854c:	460b      	mov	r3, r1
 810854e:	4313      	orrs	r3, r2
 8108550:	d053      	beq.n	81085fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8108552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108556:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810855a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810855e:	d035      	beq.n	81085cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8108560:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8108564:	d82e      	bhi.n	81085c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8108566:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810856a:	d031      	beq.n	81085d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810856c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8108570:	d828      	bhi.n	81085c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8108572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8108576:	d01a      	beq.n	81085ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8108578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810857c:	d822      	bhi.n	81085c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810857e:	2b00      	cmp	r3, #0
 8108580:	d003      	beq.n	810858a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8108582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8108586:	d007      	beq.n	8108598 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8108588:	e01c      	b.n	81085c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810858a:	4b32      	ldr	r3, [pc, #200]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810858e:	4a31      	ldr	r2, [pc, #196]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8108590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108596:	e01c      	b.n	81085d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810859c:	3308      	adds	r3, #8
 810859e:	2100      	movs	r1, #0
 81085a0:	4618      	mov	r0, r3
 81085a2:	f002 fa55 	bl	810aa50 <RCCEx_PLL2_Config>
 81085a6:	4603      	mov	r3, r0
 81085a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81085ac:	e011      	b.n	81085d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81085ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085b2:	3328      	adds	r3, #40	@ 0x28
 81085b4:	2100      	movs	r1, #0
 81085b6:	4618      	mov	r0, r3
 81085b8:	f002 fafc 	bl	810abb4 <RCCEx_PLL3_Config>
 81085bc:	4603      	mov	r3, r0
 81085be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81085c2:	e006      	b.n	81085d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81085c4:	2301      	movs	r3, #1
 81085c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81085ca:	e002      	b.n	81085d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81085cc:	bf00      	nop
 81085ce:	e000      	b.n	81085d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81085d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81085d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81085d6:	2b00      	cmp	r3, #0
 81085d8:	d10b      	bne.n	81085f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81085da:	4b1e      	ldr	r3, [pc, #120]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81085dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81085de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81085ea:	4a1a      	ldr	r2, [pc, #104]	@ (8108654 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81085ec:	430b      	orrs	r3, r1
 81085ee:	6593      	str	r3, [r2, #88]	@ 0x58
 81085f0:	e003      	b.n	81085fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81085f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81085f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81085fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108602:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8108606:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810860a:	2300      	movs	r3, #0
 810860c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8108610:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8108614:	460b      	mov	r3, r1
 8108616:	4313      	orrs	r3, r2
 8108618:	d056      	beq.n	81086c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810861a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810861e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8108622:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108626:	d038      	beq.n	810869a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8108628:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810862c:	d831      	bhi.n	8108692 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810862e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8108632:	d034      	beq.n	810869e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8108634:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8108638:	d82b      	bhi.n	8108692 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810863a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810863e:	d01d      	beq.n	810867c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8108640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108644:	d825      	bhi.n	8108692 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8108646:	2b00      	cmp	r3, #0
 8108648:	d006      	beq.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810864a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810864e:	d00a      	beq.n	8108666 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8108650:	e01f      	b.n	8108692 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8108652:	bf00      	nop
 8108654:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108658:	4ba2      	ldr	r3, [pc, #648]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810865c:	4aa1      	ldr	r2, [pc, #644]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810865e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108664:	e01c      	b.n	81086a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810866a:	3308      	adds	r3, #8
 810866c:	2100      	movs	r1, #0
 810866e:	4618      	mov	r0, r3
 8108670:	f002 f9ee 	bl	810aa50 <RCCEx_PLL2_Config>
 8108674:	4603      	mov	r3, r0
 8108676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810867a:	e011      	b.n	81086a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108680:	3328      	adds	r3, #40	@ 0x28
 8108682:	2100      	movs	r1, #0
 8108684:	4618      	mov	r0, r3
 8108686:	f002 fa95 	bl	810abb4 <RCCEx_PLL3_Config>
 810868a:	4603      	mov	r3, r0
 810868c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8108690:	e006      	b.n	81086a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8108692:	2301      	movs	r3, #1
 8108694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108698:	e002      	b.n	81086a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810869a:	bf00      	nop
 810869c:	e000      	b.n	81086a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810869e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81086a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086a4:	2b00      	cmp	r3, #0
 81086a6:	d10b      	bne.n	81086c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81086a8:	4b8e      	ldr	r3, [pc, #568]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81086aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81086ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81086b8:	4a8a      	ldr	r2, [pc, #552]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81086ba:	430b      	orrs	r3, r1
 81086bc:	6593      	str	r3, [r2, #88]	@ 0x58
 81086be:	e003      	b.n	81086c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81086c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81086d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81086d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81086d8:	2300      	movs	r3, #0
 81086da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81086de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81086e2:	460b      	mov	r3, r1
 81086e4:	4313      	orrs	r3, r2
 81086e6:	d03a      	beq.n	810875e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81086e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81086ee:	2b30      	cmp	r3, #48	@ 0x30
 81086f0:	d01f      	beq.n	8108732 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81086f2:	2b30      	cmp	r3, #48	@ 0x30
 81086f4:	d819      	bhi.n	810872a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81086f6:	2b20      	cmp	r3, #32
 81086f8:	d00c      	beq.n	8108714 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81086fa:	2b20      	cmp	r3, #32
 81086fc:	d815      	bhi.n	810872a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81086fe:	2b00      	cmp	r3, #0
 8108700:	d019      	beq.n	8108736 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8108702:	2b10      	cmp	r3, #16
 8108704:	d111      	bne.n	810872a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108706:	4b77      	ldr	r3, [pc, #476]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810870a:	4a76      	ldr	r2, [pc, #472]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810870c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108710:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8108712:	e011      	b.n	8108738 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108718:	3308      	adds	r3, #8
 810871a:	2102      	movs	r1, #2
 810871c:	4618      	mov	r0, r3
 810871e:	f002 f997 	bl	810aa50 <RCCEx_PLL2_Config>
 8108722:	4603      	mov	r3, r0
 8108724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8108728:	e006      	b.n	8108738 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810872a:	2301      	movs	r3, #1
 810872c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108730:	e002      	b.n	8108738 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8108732:	bf00      	nop
 8108734:	e000      	b.n	8108738 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8108736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810873c:	2b00      	cmp	r3, #0
 810873e:	d10a      	bne.n	8108756 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8108740:	4b68      	ldr	r3, [pc, #416]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108744:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8108748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810874c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810874e:	4a65      	ldr	r2, [pc, #404]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108750:	430b      	orrs	r3, r1
 8108752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8108754:	e003      	b.n	810875e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810875a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810875e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108766:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810876a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810876e:	2300      	movs	r3, #0
 8108770:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8108774:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8108778:	460b      	mov	r3, r1
 810877a:	4313      	orrs	r3, r2
 810877c:	d051      	beq.n	8108822 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108788:	d035      	beq.n	81087f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810878a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810878e:	d82e      	bhi.n	81087ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8108790:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8108794:	d031      	beq.n	81087fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8108796:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810879a:	d828      	bhi.n	81087ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810879c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81087a0:	d01a      	beq.n	81087d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81087a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81087a6:	d822      	bhi.n	81087ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81087a8:	2b00      	cmp	r3, #0
 81087aa:	d003      	beq.n	81087b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81087ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81087b0:	d007      	beq.n	81087c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81087b2:	e01c      	b.n	81087ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81087b4:	4b4b      	ldr	r3, [pc, #300]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81087b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81087b8:	4a4a      	ldr	r2, [pc, #296]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81087ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81087be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81087c0:	e01c      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81087c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81087c6:	3308      	adds	r3, #8
 81087c8:	2100      	movs	r1, #0
 81087ca:	4618      	mov	r0, r3
 81087cc:	f002 f940 	bl	810aa50 <RCCEx_PLL2_Config>
 81087d0:	4603      	mov	r3, r0
 81087d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81087d6:	e011      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81087d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81087dc:	3328      	adds	r3, #40	@ 0x28
 81087de:	2100      	movs	r1, #0
 81087e0:	4618      	mov	r0, r3
 81087e2:	f002 f9e7 	bl	810abb4 <RCCEx_PLL3_Config>
 81087e6:	4603      	mov	r3, r0
 81087e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81087ec:	e006      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81087ee:	2301      	movs	r3, #1
 81087f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81087f4:	e002      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81087f6:	bf00      	nop
 81087f8:	e000      	b.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81087fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81087fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108800:	2b00      	cmp	r3, #0
 8108802:	d10a      	bne.n	810881a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8108804:	4b37      	ldr	r3, [pc, #220]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108808:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108812:	4a34      	ldr	r2, [pc, #208]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8108814:	430b      	orrs	r3, r1
 8108816:	6513      	str	r3, [r2, #80]	@ 0x50
 8108818:	e003      	b.n	8108822 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810881a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810881e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8108822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108826:	e9d3 2300 	ldrd	r2, r3, [r3]
 810882a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810882e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8108832:	2300      	movs	r3, #0
 8108834:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8108838:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810883c:	460b      	mov	r3, r1
 810883e:	4313      	orrs	r3, r2
 8108840:	d056      	beq.n	81088f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8108842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810884c:	d033      	beq.n	81088b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810884e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8108852:	d82c      	bhi.n	81088ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108854:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8108858:	d02f      	beq.n	81088ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810885a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810885e:	d826      	bhi.n	81088ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108860:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8108864:	d02b      	beq.n	81088be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8108866:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810886a:	d820      	bhi.n	81088ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 810886c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108870:	d012      	beq.n	8108898 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8108872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108876:	d81a      	bhi.n	81088ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8108878:	2b00      	cmp	r3, #0
 810887a:	d022      	beq.n	81088c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810887c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108880:	d115      	bne.n	81088ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108886:	3308      	adds	r3, #8
 8108888:	2101      	movs	r1, #1
 810888a:	4618      	mov	r0, r3
 810888c:	f002 f8e0 	bl	810aa50 <RCCEx_PLL2_Config>
 8108890:	4603      	mov	r3, r0
 8108892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8108896:	e015      	b.n	81088c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810889c:	3328      	adds	r3, #40	@ 0x28
 810889e:	2101      	movs	r1, #1
 81088a0:	4618      	mov	r0, r3
 81088a2:	f002 f987 	bl	810abb4 <RCCEx_PLL3_Config>
 81088a6:	4603      	mov	r3, r0
 81088a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81088ac:	e00a      	b.n	81088c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81088ae:	2301      	movs	r3, #1
 81088b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81088b4:	e006      	b.n	81088c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81088b6:	bf00      	nop
 81088b8:	e004      	b.n	81088c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81088ba:	bf00      	nop
 81088bc:	e002      	b.n	81088c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81088be:	bf00      	nop
 81088c0:	e000      	b.n	81088c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81088c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81088c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81088c8:	2b00      	cmp	r3, #0
 81088ca:	d10d      	bne.n	81088e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81088cc:	4b05      	ldr	r3, [pc, #20]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81088ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81088d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81088d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81088da:	4a02      	ldr	r2, [pc, #8]	@ (81088e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81088dc:	430b      	orrs	r3, r1
 81088de:	6513      	str	r3, [r2, #80]	@ 0x50
 81088e0:	e006      	b.n	81088f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81088e2:	bf00      	nop
 81088e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81088e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81088ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81088f8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81088fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8108900:	2300      	movs	r3, #0
 8108902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8108906:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810890a:	460b      	mov	r3, r1
 810890c:	4313      	orrs	r3, r2
 810890e:	d055      	beq.n	81089bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8108910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8108918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810891c:	d033      	beq.n	8108986 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810891e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108922:	d82c      	bhi.n	810897e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108928:	d02f      	beq.n	810898a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810892a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810892e:	d826      	bhi.n	810897e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108934:	d02b      	beq.n	810898e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8108936:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810893a:	d820      	bhi.n	810897e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810893c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108940:	d012      	beq.n	8108968 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8108942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108946:	d81a      	bhi.n	810897e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108948:	2b00      	cmp	r3, #0
 810894a:	d022      	beq.n	8108992 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810894c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108950:	d115      	bne.n	810897e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108956:	3308      	adds	r3, #8
 8108958:	2101      	movs	r1, #1
 810895a:	4618      	mov	r0, r3
 810895c:	f002 f878 	bl	810aa50 <RCCEx_PLL2_Config>
 8108960:	4603      	mov	r3, r0
 8108962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8108966:	e015      	b.n	8108994 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810896c:	3328      	adds	r3, #40	@ 0x28
 810896e:	2101      	movs	r1, #1
 8108970:	4618      	mov	r0, r3
 8108972:	f002 f91f 	bl	810abb4 <RCCEx_PLL3_Config>
 8108976:	4603      	mov	r3, r0
 8108978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810897c:	e00a      	b.n	8108994 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810897e:	2301      	movs	r3, #1
 8108980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108984:	e006      	b.n	8108994 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108986:	bf00      	nop
 8108988:	e004      	b.n	8108994 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810898a:	bf00      	nop
 810898c:	e002      	b.n	8108994 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810898e:	bf00      	nop
 8108990:	e000      	b.n	8108994 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108998:	2b00      	cmp	r3, #0
 810899a:	d10b      	bne.n	81089b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810899c:	4ba4      	ldr	r3, [pc, #656]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810899e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81089a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81089a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81089ac:	4aa0      	ldr	r2, [pc, #640]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81089ae:	430b      	orrs	r3, r1
 81089b0:	6593      	str	r3, [r2, #88]	@ 0x58
 81089b2:	e003      	b.n	81089bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81089b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81089b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81089bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81089c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81089c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81089cc:	2300      	movs	r3, #0
 81089ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81089d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81089d6:	460b      	mov	r3, r1
 81089d8:	4313      	orrs	r3, r2
 81089da:	d037      	beq.n	8108a4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81089e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81089e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81089e6:	d00e      	beq.n	8108a06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81089e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81089ec:	d816      	bhi.n	8108a1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 81089ee:	2b00      	cmp	r3, #0
 81089f0:	d018      	beq.n	8108a24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81089f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81089f6:	d111      	bne.n	8108a1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81089f8:	4b8d      	ldr	r3, [pc, #564]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81089fc:	4a8c      	ldr	r2, [pc, #560]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81089fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8108a04:	e00f      	b.n	8108a26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a0a:	3308      	adds	r3, #8
 8108a0c:	2101      	movs	r1, #1
 8108a0e:	4618      	mov	r0, r3
 8108a10:	f002 f81e 	bl	810aa50 <RCCEx_PLL2_Config>
 8108a14:	4603      	mov	r3, r0
 8108a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8108a1a:	e004      	b.n	8108a26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108a1c:	2301      	movs	r3, #1
 8108a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108a22:	e000      	b.n	8108a26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8108a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108a2a:	2b00      	cmp	r3, #0
 8108a2c:	d10a      	bne.n	8108a44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8108a2e:	4b80      	ldr	r3, [pc, #512]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108a32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8108a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108a3c:	4a7c      	ldr	r2, [pc, #496]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108a3e:	430b      	orrs	r3, r1
 8108a40:	6513      	str	r3, [r2, #80]	@ 0x50
 8108a42:	e003      	b.n	8108a4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8108a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8108a5c:	2300      	movs	r3, #0
 8108a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8108a62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8108a66:	460b      	mov	r3, r1
 8108a68:	4313      	orrs	r3, r2
 8108a6a:	d039      	beq.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8108a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108a72:	2b03      	cmp	r3, #3
 8108a74:	d81c      	bhi.n	8108ab0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8108a76:	a201      	add	r2, pc, #4	@ (adr r2, 8108a7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8108a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a7c:	08108ab9 	.word	0x08108ab9
 8108a80:	08108a8d 	.word	0x08108a8d
 8108a84:	08108a9b 	.word	0x08108a9b
 8108a88:	08108ab9 	.word	0x08108ab9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108a8c:	4b68      	ldr	r3, [pc, #416]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a90:	4a67      	ldr	r2, [pc, #412]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8108a98:	e00f      	b.n	8108aba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108a9e:	3308      	adds	r3, #8
 8108aa0:	2102      	movs	r1, #2
 8108aa2:	4618      	mov	r0, r3
 8108aa4:	f001 ffd4 	bl	810aa50 <RCCEx_PLL2_Config>
 8108aa8:	4603      	mov	r3, r0
 8108aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8108aae:	e004      	b.n	8108aba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8108ab0:	2301      	movs	r3, #1
 8108ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108ab6:	e000      	b.n	8108aba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8108ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108abe:	2b00      	cmp	r3, #0
 8108ac0:	d10a      	bne.n	8108ad8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8108ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108ac6:	f023 0103 	bic.w	r1, r3, #3
 8108aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108ad0:	4a57      	ldr	r2, [pc, #348]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108ad2:	430b      	orrs	r3, r1
 8108ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8108ad6:	e003      	b.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8108ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ae8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8108aec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8108af0:	2300      	movs	r3, #0
 8108af2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8108af6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8108afa:	460b      	mov	r3, r1
 8108afc:	4313      	orrs	r3, r2
 8108afe:	f000 809f 	beq.w	8108c40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8108b02:	4b4c      	ldr	r3, [pc, #304]	@ (8108c34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8108b04:	681b      	ldr	r3, [r3, #0]
 8108b06:	4a4b      	ldr	r2, [pc, #300]	@ (8108c34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8108b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108b0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8108b0e:	f7fb fe01 	bl	8104714 <HAL_GetTick>
 8108b12:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108b16:	e00b      	b.n	8108b30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8108b18:	f7fb fdfc 	bl	8104714 <HAL_GetTick>
 8108b1c:	4602      	mov	r2, r0
 8108b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8108b22:	1ad3      	subs	r3, r2, r3
 8108b24:	2b64      	cmp	r3, #100	@ 0x64
 8108b26:	d903      	bls.n	8108b30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8108b28:	2303      	movs	r3, #3
 8108b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108b2e:	e005      	b.n	8108b3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108b30:	4b40      	ldr	r3, [pc, #256]	@ (8108c34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8108b32:	681b      	ldr	r3, [r3, #0]
 8108b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108b38:	2b00      	cmp	r3, #0
 8108b3a:	d0ed      	beq.n	8108b18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8108b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108b40:	2b00      	cmp	r3, #0
 8108b42:	d179      	bne.n	8108c38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8108b44:	4b3a      	ldr	r3, [pc, #232]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108b46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8108b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108b50:	4053      	eors	r3, r2
 8108b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108b56:	2b00      	cmp	r3, #0
 8108b58:	d015      	beq.n	8108b86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8108b5a:	4b35      	ldr	r3, [pc, #212]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108b62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8108b66:	4b32      	ldr	r3, [pc, #200]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108b6a:	4a31      	ldr	r2, [pc, #196]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8108b70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8108b72:	4b2f      	ldr	r3, [pc, #188]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108b76:	4a2e      	ldr	r2, [pc, #184]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108b7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8108b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8108b84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8108b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108b8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108b92:	d118      	bne.n	8108bc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108b94:	f7fb fdbe 	bl	8104714 <HAL_GetTick>
 8108b98:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108b9c:	e00d      	b.n	8108bba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8108b9e:	f7fb fdb9 	bl	8104714 <HAL_GetTick>
 8108ba2:	4602      	mov	r2, r0
 8108ba4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8108ba8:	1ad2      	subs	r2, r2, r3
 8108baa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8108bae:	429a      	cmp	r2, r3
 8108bb0:	d903      	bls.n	8108bba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8108bb2:	2303      	movs	r3, #3
 8108bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8108bb8:	e005      	b.n	8108bc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108bba:	4b1d      	ldr	r3, [pc, #116]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108bbe:	f003 0302 	and.w	r3, r3, #2
 8108bc2:	2b00      	cmp	r3, #0
 8108bc4:	d0eb      	beq.n	8108b9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8108bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108bca:	2b00      	cmp	r3, #0
 8108bcc:	d12b      	bne.n	8108c26 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8108bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108bd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108bde:	d110      	bne.n	8108c02 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8108be0:	4b13      	ldr	r3, [pc, #76]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108be2:	691b      	ldr	r3, [r3, #16]
 8108be4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8108be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108bec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108bf0:	091b      	lsrs	r3, r3, #4
 8108bf2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8108bf6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8108bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108bfc:	430b      	orrs	r3, r1
 8108bfe:	6113      	str	r3, [r2, #16]
 8108c00:	e005      	b.n	8108c0e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8108c02:	4b0b      	ldr	r3, [pc, #44]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108c04:	691b      	ldr	r3, [r3, #16]
 8108c06:	4a0a      	ldr	r2, [pc, #40]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108c08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8108c0c:	6113      	str	r3, [r2, #16]
 8108c0e:	4b08      	ldr	r3, [pc, #32]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108c10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8108c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8108c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8108c1e:	4a04      	ldr	r2, [pc, #16]	@ (8108c30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108c20:	430b      	orrs	r3, r1
 8108c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8108c24:	e00c      	b.n	8108c40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8108c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8108c2e:	e007      	b.n	8108c40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8108c30:	58024400 	.word	0x58024400
 8108c34:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8108c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c48:	f002 0301 	and.w	r3, r2, #1
 8108c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8108c50:	2300      	movs	r3, #0
 8108c52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8108c56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8108c5a:	460b      	mov	r3, r1
 8108c5c:	4313      	orrs	r3, r2
 8108c5e:	f000 8089 	beq.w	8108d74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8108c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108c66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8108c68:	2b28      	cmp	r3, #40	@ 0x28
 8108c6a:	d86b      	bhi.n	8108d44 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8108c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8108c74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8108c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c72:	bf00      	nop
 8108c74:	08108d4d 	.word	0x08108d4d
 8108c78:	08108d45 	.word	0x08108d45
 8108c7c:	08108d45 	.word	0x08108d45
 8108c80:	08108d45 	.word	0x08108d45
 8108c84:	08108d45 	.word	0x08108d45
 8108c88:	08108d45 	.word	0x08108d45
 8108c8c:	08108d45 	.word	0x08108d45
 8108c90:	08108d45 	.word	0x08108d45
 8108c94:	08108d19 	.word	0x08108d19
 8108c98:	08108d45 	.word	0x08108d45
 8108c9c:	08108d45 	.word	0x08108d45
 8108ca0:	08108d45 	.word	0x08108d45
 8108ca4:	08108d45 	.word	0x08108d45
 8108ca8:	08108d45 	.word	0x08108d45
 8108cac:	08108d45 	.word	0x08108d45
 8108cb0:	08108d45 	.word	0x08108d45
 8108cb4:	08108d2f 	.word	0x08108d2f
 8108cb8:	08108d45 	.word	0x08108d45
 8108cbc:	08108d45 	.word	0x08108d45
 8108cc0:	08108d45 	.word	0x08108d45
 8108cc4:	08108d45 	.word	0x08108d45
 8108cc8:	08108d45 	.word	0x08108d45
 8108ccc:	08108d45 	.word	0x08108d45
 8108cd0:	08108d45 	.word	0x08108d45
 8108cd4:	08108d4d 	.word	0x08108d4d
 8108cd8:	08108d45 	.word	0x08108d45
 8108cdc:	08108d45 	.word	0x08108d45
 8108ce0:	08108d45 	.word	0x08108d45
 8108ce4:	08108d45 	.word	0x08108d45
 8108ce8:	08108d45 	.word	0x08108d45
 8108cec:	08108d45 	.word	0x08108d45
 8108cf0:	08108d45 	.word	0x08108d45
 8108cf4:	08108d4d 	.word	0x08108d4d
 8108cf8:	08108d45 	.word	0x08108d45
 8108cfc:	08108d45 	.word	0x08108d45
 8108d00:	08108d45 	.word	0x08108d45
 8108d04:	08108d45 	.word	0x08108d45
 8108d08:	08108d45 	.word	0x08108d45
 8108d0c:	08108d45 	.word	0x08108d45
 8108d10:	08108d45 	.word	0x08108d45
 8108d14:	08108d4d 	.word	0x08108d4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d1c:	3308      	adds	r3, #8
 8108d1e:	2101      	movs	r1, #1
 8108d20:	4618      	mov	r0, r3
 8108d22:	f001 fe95 	bl	810aa50 <RCCEx_PLL2_Config>
 8108d26:	4603      	mov	r3, r0
 8108d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8108d2c:	e00f      	b.n	8108d4e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d32:	3328      	adds	r3, #40	@ 0x28
 8108d34:	2101      	movs	r1, #1
 8108d36:	4618      	mov	r0, r3
 8108d38:	f001 ff3c 	bl	810abb4 <RCCEx_PLL3_Config>
 8108d3c:	4603      	mov	r3, r0
 8108d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8108d42:	e004      	b.n	8108d4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108d44:	2301      	movs	r3, #1
 8108d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108d4a:	e000      	b.n	8108d4e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8108d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d52:	2b00      	cmp	r3, #0
 8108d54:	d10a      	bne.n	8108d6c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8108d56:	4bbf      	ldr	r3, [pc, #764]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108d5a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8108d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8108d64:	4abb      	ldr	r2, [pc, #748]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108d66:	430b      	orrs	r3, r1
 8108d68:	6553      	str	r3, [r2, #84]	@ 0x54
 8108d6a:	e003      	b.n	8108d74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8108d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d7c:	f002 0302 	and.w	r3, r2, #2
 8108d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8108d84:	2300      	movs	r3, #0
 8108d86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8108d8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8108d8e:	460b      	mov	r3, r1
 8108d90:	4313      	orrs	r3, r2
 8108d92:	d041      	beq.n	8108e18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8108d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108d98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108d9a:	2b05      	cmp	r3, #5
 8108d9c:	d824      	bhi.n	8108de8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8108d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8108da4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8108da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108da4:	08108df1 	.word	0x08108df1
 8108da8:	08108dbd 	.word	0x08108dbd
 8108dac:	08108dd3 	.word	0x08108dd3
 8108db0:	08108df1 	.word	0x08108df1
 8108db4:	08108df1 	.word	0x08108df1
 8108db8:	08108df1 	.word	0x08108df1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dc0:	3308      	adds	r3, #8
 8108dc2:	2101      	movs	r1, #1
 8108dc4:	4618      	mov	r0, r3
 8108dc6:	f001 fe43 	bl	810aa50 <RCCEx_PLL2_Config>
 8108dca:	4603      	mov	r3, r0
 8108dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8108dd0:	e00f      	b.n	8108df2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108dd6:	3328      	adds	r3, #40	@ 0x28
 8108dd8:	2101      	movs	r1, #1
 8108dda:	4618      	mov	r0, r3
 8108ddc:	f001 feea 	bl	810abb4 <RCCEx_PLL3_Config>
 8108de0:	4603      	mov	r3, r0
 8108de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8108de6:	e004      	b.n	8108df2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108de8:	2301      	movs	r3, #1
 8108dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108dee:	e000      	b.n	8108df2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8108df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108df6:	2b00      	cmp	r3, #0
 8108df8:	d10a      	bne.n	8108e10 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8108dfa:	4b96      	ldr	r3, [pc, #600]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108dfe:	f023 0107 	bic.w	r1, r3, #7
 8108e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8108e08:	4a92      	ldr	r2, [pc, #584]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108e0a:	430b      	orrs	r3, r1
 8108e0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8108e0e:	e003      	b.n	8108e18 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8108e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108e20:	f002 0304 	and.w	r3, r2, #4
 8108e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8108e28:	2300      	movs	r3, #0
 8108e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8108e2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8108e32:	460b      	mov	r3, r1
 8108e34:	4313      	orrs	r3, r2
 8108e36:	d044      	beq.n	8108ec2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8108e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108e40:	2b05      	cmp	r3, #5
 8108e42:	d825      	bhi.n	8108e90 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8108e44:	a201      	add	r2, pc, #4	@ (adr r2, 8108e4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8108e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e4a:	bf00      	nop
 8108e4c:	08108e99 	.word	0x08108e99
 8108e50:	08108e65 	.word	0x08108e65
 8108e54:	08108e7b 	.word	0x08108e7b
 8108e58:	08108e99 	.word	0x08108e99
 8108e5c:	08108e99 	.word	0x08108e99
 8108e60:	08108e99 	.word	0x08108e99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e68:	3308      	adds	r3, #8
 8108e6a:	2101      	movs	r1, #1
 8108e6c:	4618      	mov	r0, r3
 8108e6e:	f001 fdef 	bl	810aa50 <RCCEx_PLL2_Config>
 8108e72:	4603      	mov	r3, r0
 8108e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108e78:	e00f      	b.n	8108e9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108e7e:	3328      	adds	r3, #40	@ 0x28
 8108e80:	2101      	movs	r1, #1
 8108e82:	4618      	mov	r0, r3
 8108e84:	f001 fe96 	bl	810abb4 <RCCEx_PLL3_Config>
 8108e88:	4603      	mov	r3, r0
 8108e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108e8e:	e004      	b.n	8108e9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108e90:	2301      	movs	r3, #1
 8108e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108e96:	e000      	b.n	8108e9a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8108e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108e9e:	2b00      	cmp	r3, #0
 8108ea0:	d10b      	bne.n	8108eba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8108ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108ea6:	f023 0107 	bic.w	r1, r3, #7
 8108eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108eb2:	4a68      	ldr	r2, [pc, #416]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108eb4:	430b      	orrs	r3, r1
 8108eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8108eb8:	e003      	b.n	8108ec2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8108ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108eca:	f002 0320 	and.w	r3, r2, #32
 8108ece:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8108ed2:	2300      	movs	r3, #0
 8108ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8108ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8108edc:	460b      	mov	r3, r1
 8108ede:	4313      	orrs	r3, r2
 8108ee0:	d055      	beq.n	8108f8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8108ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108eee:	d033      	beq.n	8108f58 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8108ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8108ef4:	d82c      	bhi.n	8108f50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108efa:	d02f      	beq.n	8108f5c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8108efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108f00:	d826      	bhi.n	8108f50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108f02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108f06:	d02b      	beq.n	8108f60 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8108f08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8108f0c:	d820      	bhi.n	8108f50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108f12:	d012      	beq.n	8108f3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8108f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8108f18:	d81a      	bhi.n	8108f50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108f1a:	2b00      	cmp	r3, #0
 8108f1c:	d022      	beq.n	8108f64 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8108f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108f22:	d115      	bne.n	8108f50 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f28:	3308      	adds	r3, #8
 8108f2a:	2100      	movs	r1, #0
 8108f2c:	4618      	mov	r0, r3
 8108f2e:	f001 fd8f 	bl	810aa50 <RCCEx_PLL2_Config>
 8108f32:	4603      	mov	r3, r0
 8108f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108f38:	e015      	b.n	8108f66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f3e:	3328      	adds	r3, #40	@ 0x28
 8108f40:	2102      	movs	r1, #2
 8108f42:	4618      	mov	r0, r3
 8108f44:	f001 fe36 	bl	810abb4 <RCCEx_PLL3_Config>
 8108f48:	4603      	mov	r3, r0
 8108f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108f4e:	e00a      	b.n	8108f66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108f50:	2301      	movs	r3, #1
 8108f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108f56:	e006      	b.n	8108f66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108f58:	bf00      	nop
 8108f5a:	e004      	b.n	8108f66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108f5c:	bf00      	nop
 8108f5e:	e002      	b.n	8108f66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108f60:	bf00      	nop
 8108f62:	e000      	b.n	8108f66 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108f6a:	2b00      	cmp	r3, #0
 8108f6c:	d10b      	bne.n	8108f86 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8108f6e:	4b39      	ldr	r3, [pc, #228]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108f72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8108f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108f7e:	4a35      	ldr	r2, [pc, #212]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108f80:	430b      	orrs	r3, r1
 8108f82:	6553      	str	r3, [r2, #84]	@ 0x54
 8108f84:	e003      	b.n	8108f8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8108f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f96:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8108f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8108f9e:	2300      	movs	r3, #0
 8108fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8108fa4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8108fa8:	460b      	mov	r3, r1
 8108faa:	4313      	orrs	r3, r2
 8108fac:	d058      	beq.n	8109060 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8108fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8108fb6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8108fba:	d033      	beq.n	8109024 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8108fbc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8108fc0:	d82c      	bhi.n	810901c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108fc6:	d02f      	beq.n	8109028 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8108fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108fcc:	d826      	bhi.n	810901c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108fce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8108fd2:	d02b      	beq.n	810902c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8108fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8108fd8:	d820      	bhi.n	810901c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108fda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108fde:	d012      	beq.n	8109006 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8108fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8108fe4:	d81a      	bhi.n	810901c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8108fe6:	2b00      	cmp	r3, #0
 8108fe8:	d022      	beq.n	8109030 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8108fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108fee:	d115      	bne.n	810901c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108ff4:	3308      	adds	r3, #8
 8108ff6:	2100      	movs	r1, #0
 8108ff8:	4618      	mov	r0, r3
 8108ffa:	f001 fd29 	bl	810aa50 <RCCEx_PLL2_Config>
 8108ffe:	4603      	mov	r3, r0
 8109000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8109004:	e015      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8109006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810900a:	3328      	adds	r3, #40	@ 0x28
 810900c:	2102      	movs	r1, #2
 810900e:	4618      	mov	r0, r3
 8109010:	f001 fdd0 	bl	810abb4 <RCCEx_PLL3_Config>
 8109014:	4603      	mov	r3, r0
 8109016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810901a:	e00a      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810901c:	2301      	movs	r3, #1
 810901e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109022:	e006      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8109024:	bf00      	nop
 8109026:	e004      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8109028:	bf00      	nop
 810902a:	e002      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810902c:	bf00      	nop
 810902e:	e000      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8109030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109036:	2b00      	cmp	r3, #0
 8109038:	d10e      	bne.n	8109058 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810903a:	4b06      	ldr	r3, [pc, #24]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810903c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810903e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8109042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109046:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810904a:	4a02      	ldr	r2, [pc, #8]	@ (8109054 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810904c:	430b      	orrs	r3, r1
 810904e:	6593      	str	r3, [r2, #88]	@ 0x58
 8109050:	e006      	b.n	8109060 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8109052:	bf00      	nop
 8109054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810905c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8109060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109068:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810906c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8109070:	2300      	movs	r3, #0
 8109072:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8109076:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810907a:	460b      	mov	r3, r1
 810907c:	4313      	orrs	r3, r2
 810907e:	d055      	beq.n	810912c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8109080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109084:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8109088:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810908c:	d033      	beq.n	81090f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810908e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8109092:	d82c      	bhi.n	81090ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8109094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109098:	d02f      	beq.n	81090fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810909a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810909e:	d826      	bhi.n	81090ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81090a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81090a4:	d02b      	beq.n	81090fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81090a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81090aa:	d820      	bhi.n	81090ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81090ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81090b0:	d012      	beq.n	81090d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81090b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81090b6:	d81a      	bhi.n	81090ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81090b8:	2b00      	cmp	r3, #0
 81090ba:	d022      	beq.n	8109102 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81090bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81090c0:	d115      	bne.n	81090ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81090c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81090c6:	3308      	adds	r3, #8
 81090c8:	2100      	movs	r1, #0
 81090ca:	4618      	mov	r0, r3
 81090cc:	f001 fcc0 	bl	810aa50 <RCCEx_PLL2_Config>
 81090d0:	4603      	mov	r3, r0
 81090d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81090d6:	e015      	b.n	8109104 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81090d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81090dc:	3328      	adds	r3, #40	@ 0x28
 81090de:	2102      	movs	r1, #2
 81090e0:	4618      	mov	r0, r3
 81090e2:	f001 fd67 	bl	810abb4 <RCCEx_PLL3_Config>
 81090e6:	4603      	mov	r3, r0
 81090e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81090ec:	e00a      	b.n	8109104 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81090ee:	2301      	movs	r3, #1
 81090f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81090f4:	e006      	b.n	8109104 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81090f6:	bf00      	nop
 81090f8:	e004      	b.n	8109104 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81090fa:	bf00      	nop
 81090fc:	e002      	b.n	8109104 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81090fe:	bf00      	nop
 8109100:	e000      	b.n	8109104 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8109102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109108:	2b00      	cmp	r3, #0
 810910a:	d10b      	bne.n	8109124 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810910c:	4ba1      	ldr	r3, [pc, #644]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810910e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109110:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8109114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109118:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810911c:	4a9d      	ldr	r2, [pc, #628]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810911e:	430b      	orrs	r3, r1
 8109120:	6593      	str	r3, [r2, #88]	@ 0x58
 8109122:	e003      	b.n	810912c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109134:	f002 0308 	and.w	r3, r2, #8
 8109138:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810913c:	2300      	movs	r3, #0
 810913e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8109142:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8109146:	460b      	mov	r3, r1
 8109148:	4313      	orrs	r3, r2
 810914a:	d01e      	beq.n	810918a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810914c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109158:	d10c      	bne.n	8109174 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810915a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810915e:	3328      	adds	r3, #40	@ 0x28
 8109160:	2102      	movs	r1, #2
 8109162:	4618      	mov	r0, r3
 8109164:	f001 fd26 	bl	810abb4 <RCCEx_PLL3_Config>
 8109168:	4603      	mov	r3, r0
 810916a:	2b00      	cmp	r3, #0
 810916c:	d002      	beq.n	8109174 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810916e:	2301      	movs	r3, #1
 8109170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8109174:	4b87      	ldr	r3, [pc, #540]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8109176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109178:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810917c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109184:	4a83      	ldr	r2, [pc, #524]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8109186:	430b      	orrs	r3, r1
 8109188:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810918a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109192:	f002 0310 	and.w	r3, r2, #16
 8109196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810919a:	2300      	movs	r3, #0
 810919c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81091a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81091a4:	460b      	mov	r3, r1
 81091a6:	4313      	orrs	r3, r2
 81091a8:	d01e      	beq.n	81091e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81091aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81091b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81091b6:	d10c      	bne.n	81091d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81091b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091bc:	3328      	adds	r3, #40	@ 0x28
 81091be:	2102      	movs	r1, #2
 81091c0:	4618      	mov	r0, r3
 81091c2:	f001 fcf7 	bl	810abb4 <RCCEx_PLL3_Config>
 81091c6:	4603      	mov	r3, r0
 81091c8:	2b00      	cmp	r3, #0
 81091ca:	d002      	beq.n	81091d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81091cc:	2301      	movs	r3, #1
 81091ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81091d2:	4b70      	ldr	r3, [pc, #448]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81091d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81091d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81091e2:	4a6c      	ldr	r2, [pc, #432]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81091e4:	430b      	orrs	r3, r1
 81091e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81091e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81091f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81091f8:	2300      	movs	r3, #0
 81091fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81091fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8109202:	460b      	mov	r3, r1
 8109204:	4313      	orrs	r3, r2
 8109206:	d03e      	beq.n	8109286 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8109208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810920c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8109210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109214:	d022      	beq.n	810925c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8109216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810921a:	d81b      	bhi.n	8109254 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810921c:	2b00      	cmp	r3, #0
 810921e:	d003      	beq.n	8109228 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8109220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109224:	d00b      	beq.n	810923e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8109226:	e015      	b.n	8109254 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8109228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810922c:	3308      	adds	r3, #8
 810922e:	2100      	movs	r1, #0
 8109230:	4618      	mov	r0, r3
 8109232:	f001 fc0d 	bl	810aa50 <RCCEx_PLL2_Config>
 8109236:	4603      	mov	r3, r0
 8109238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810923c:	e00f      	b.n	810925e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109242:	3328      	adds	r3, #40	@ 0x28
 8109244:	2102      	movs	r1, #2
 8109246:	4618      	mov	r0, r3
 8109248:	f001 fcb4 	bl	810abb4 <RCCEx_PLL3_Config>
 810924c:	4603      	mov	r3, r0
 810924e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8109252:	e004      	b.n	810925e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8109254:	2301      	movs	r3, #1
 8109256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810925a:	e000      	b.n	810925e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810925c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810925e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109262:	2b00      	cmp	r3, #0
 8109264:	d10b      	bne.n	810927e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8109266:	4b4b      	ldr	r3, [pc, #300]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8109268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810926a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8109276:	4a47      	ldr	r2, [pc, #284]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8109278:	430b      	orrs	r3, r1
 810927a:	6593      	str	r3, [r2, #88]	@ 0x58
 810927c:	e003      	b.n	8109286 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810927e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8109286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810928e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8109292:	67bb      	str	r3, [r7, #120]	@ 0x78
 8109294:	2300      	movs	r3, #0
 8109296:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8109298:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810929c:	460b      	mov	r3, r1
 810929e:	4313      	orrs	r3, r2
 81092a0:	d03b      	beq.n	810931a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81092a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81092aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81092ae:	d01f      	beq.n	81092f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81092b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81092b4:	d818      	bhi.n	81092e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81092b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81092ba:	d003      	beq.n	81092c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81092bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81092c0:	d007      	beq.n	81092d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81092c2:	e011      	b.n	81092e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81092c4:	4b33      	ldr	r3, [pc, #204]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81092c8:	4a32      	ldr	r2, [pc, #200]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81092ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81092ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81092d0:	e00f      	b.n	81092f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81092d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81092d6:	3328      	adds	r3, #40	@ 0x28
 81092d8:	2101      	movs	r1, #1
 81092da:	4618      	mov	r0, r3
 81092dc:	f001 fc6a 	bl	810abb4 <RCCEx_PLL3_Config>
 81092e0:	4603      	mov	r3, r0
 81092e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81092e6:	e004      	b.n	81092f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81092e8:	2301      	movs	r3, #1
 81092ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81092ee:	e000      	b.n	81092f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81092f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81092f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81092f6:	2b00      	cmp	r3, #0
 81092f8:	d10b      	bne.n	8109312 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81092fa:	4b26      	ldr	r3, [pc, #152]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81092fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81092fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8109302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810930a:	4a22      	ldr	r2, [pc, #136]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810930c:	430b      	orrs	r3, r1
 810930e:	6553      	str	r3, [r2, #84]	@ 0x54
 8109310:	e003      	b.n	810931a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810931a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109322:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8109326:	673b      	str	r3, [r7, #112]	@ 0x70
 8109328:	2300      	movs	r3, #0
 810932a:	677b      	str	r3, [r7, #116]	@ 0x74
 810932c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8109330:	460b      	mov	r3, r1
 8109332:	4313      	orrs	r3, r2
 8109334:	d034      	beq.n	81093a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8109336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810933a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810933c:	2b00      	cmp	r3, #0
 810933e:	d003      	beq.n	8109348 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8109340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109344:	d007      	beq.n	8109356 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8109346:	e011      	b.n	810936c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109348:	4b12      	ldr	r3, [pc, #72]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810934a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810934c:	4a11      	ldr	r2, [pc, #68]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810934e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8109354:	e00e      	b.n	8109374 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8109356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810935a:	3308      	adds	r3, #8
 810935c:	2102      	movs	r1, #2
 810935e:	4618      	mov	r0, r3
 8109360:	f001 fb76 	bl	810aa50 <RCCEx_PLL2_Config>
 8109364:	4603      	mov	r3, r0
 8109366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810936a:	e003      	b.n	8109374 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810936c:	2301      	movs	r3, #1
 810936e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8109374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109378:	2b00      	cmp	r3, #0
 810937a:	d10d      	bne.n	8109398 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810937c:	4b05      	ldr	r3, [pc, #20]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810937e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109380:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8109384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810938a:	4a02      	ldr	r2, [pc, #8]	@ (8109394 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810938c:	430b      	orrs	r3, r1
 810938e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8109390:	e006      	b.n	81093a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8109392:	bf00      	nop
 8109394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810939c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81093a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81093ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 81093ae:	2300      	movs	r3, #0
 81093b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81093b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81093b6:	460b      	mov	r3, r1
 81093b8:	4313      	orrs	r3, r2
 81093ba:	d00c      	beq.n	81093d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81093bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093c0:	3328      	adds	r3, #40	@ 0x28
 81093c2:	2102      	movs	r1, #2
 81093c4:	4618      	mov	r0, r3
 81093c6:	f001 fbf5 	bl	810abb4 <RCCEx_PLL3_Config>
 81093ca:	4603      	mov	r3, r0
 81093cc:	2b00      	cmp	r3, #0
 81093ce:	d002      	beq.n	81093d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81093d0:	2301      	movs	r3, #1
 81093d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81093e2:	663b      	str	r3, [r7, #96]	@ 0x60
 81093e4:	2300      	movs	r3, #0
 81093e6:	667b      	str	r3, [r7, #100]	@ 0x64
 81093e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81093ec:	460b      	mov	r3, r1
 81093ee:	4313      	orrs	r3, r2
 81093f0:	d038      	beq.n	8109464 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81093f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81093f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81093fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81093fe:	d018      	beq.n	8109432 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8109400:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8109404:	d811      	bhi.n	810942a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8109406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810940a:	d014      	beq.n	8109436 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810940c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8109410:	d80b      	bhi.n	810942a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8109412:	2b00      	cmp	r3, #0
 8109414:	d011      	beq.n	810943a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8109416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810941a:	d106      	bne.n	810942a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810941c:	4bc3      	ldr	r3, [pc, #780]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810941e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109420:	4ac2      	ldr	r2, [pc, #776]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8109428:	e008      	b.n	810943c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810942a:	2301      	movs	r3, #1
 810942c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8109430:	e004      	b.n	810943c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8109432:	bf00      	nop
 8109434:	e002      	b.n	810943c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8109436:	bf00      	nop
 8109438:	e000      	b.n	810943c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810943a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810943c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109440:	2b00      	cmp	r3, #0
 8109442:	d10b      	bne.n	810945c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8109444:	4bb9      	ldr	r3, [pc, #740]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109448:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810944c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109454:	4ab5      	ldr	r2, [pc, #724]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109456:	430b      	orrs	r3, r1
 8109458:	6553      	str	r3, [r2, #84]	@ 0x54
 810945a:	e003      	b.n	8109464 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810945c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109460:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8109464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109468:	e9d3 2300 	ldrd	r2, r3, [r3]
 810946c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8109470:	65bb      	str	r3, [r7, #88]	@ 0x58
 8109472:	2300      	movs	r3, #0
 8109474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8109476:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810947a:	460b      	mov	r3, r1
 810947c:	4313      	orrs	r3, r2
 810947e:	d009      	beq.n	8109494 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8109480:	4baa      	ldr	r3, [pc, #680]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109484:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8109488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810948c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810948e:	4aa7      	ldr	r2, [pc, #668]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109490:	430b      	orrs	r3, r1
 8109492:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8109494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109498:	e9d3 2300 	ldrd	r2, r3, [r3]
 810949c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81094a0:	653b      	str	r3, [r7, #80]	@ 0x50
 81094a2:	2300      	movs	r3, #0
 81094a4:	657b      	str	r3, [r7, #84]	@ 0x54
 81094a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81094aa:	460b      	mov	r3, r1
 81094ac:	4313      	orrs	r3, r2
 81094ae:	d00a      	beq.n	81094c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81094b0:	4b9e      	ldr	r3, [pc, #632]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81094b2:	691b      	ldr	r3, [r3, #16]
 81094b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81094b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81094c0:	4a9a      	ldr	r2, [pc, #616]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81094c2:	430b      	orrs	r3, r1
 81094c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81094c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81094ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81094d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 81094d4:	2300      	movs	r3, #0
 81094d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81094d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81094dc:	460b      	mov	r3, r1
 81094de:	4313      	orrs	r3, r2
 81094e0:	d009      	beq.n	81094f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81094e2:	4b92      	ldr	r3, [pc, #584]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81094e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81094e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81094f0:	4a8e      	ldr	r2, [pc, #568]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81094f2:	430b      	orrs	r3, r1
 81094f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81094f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81094fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8109502:	643b      	str	r3, [r7, #64]	@ 0x40
 8109504:	2300      	movs	r3, #0
 8109506:	647b      	str	r3, [r7, #68]	@ 0x44
 8109508:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810950c:	460b      	mov	r3, r1
 810950e:	4313      	orrs	r3, r2
 8109510:	d00e      	beq.n	8109530 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8109512:	4b86      	ldr	r3, [pc, #536]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109514:	691b      	ldr	r3, [r3, #16]
 8109516:	4a85      	ldr	r2, [pc, #532]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109518:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810951c:	6113      	str	r3, [r2, #16]
 810951e:	4b83      	ldr	r3, [pc, #524]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8109520:	6919      	ldr	r1, [r3, #16]
 8109522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109526:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810952a:	4a80      	ldr	r2, [pc, #512]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810952c:	430b      	orrs	r3, r1
 810952e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8109530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109538:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810953c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810953e:	2300      	movs	r3, #0
 8109540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109542:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8109546:	460b      	mov	r3, r1
 8109548:	4313      	orrs	r3, r2
 810954a:	d009      	beq.n	8109560 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810954c:	4b77      	ldr	r3, [pc, #476]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810954e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109550:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8109554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810955a:	4a74      	ldr	r2, [pc, #464]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810955c:	430b      	orrs	r3, r1
 810955e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8109560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109568:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810956c:	633b      	str	r3, [r7, #48]	@ 0x30
 810956e:	2300      	movs	r3, #0
 8109570:	637b      	str	r3, [r7, #52]	@ 0x34
 8109572:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8109576:	460b      	mov	r3, r1
 8109578:	4313      	orrs	r3, r2
 810957a:	d00a      	beq.n	8109592 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810957c:	4b6b      	ldr	r3, [pc, #428]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810957e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109580:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8109584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810958c:	4a67      	ldr	r2, [pc, #412]	@ (810972c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810958e:	430b      	orrs	r3, r1
 8109590:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8109592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109596:	e9d3 2300 	ldrd	r2, r3, [r3]
 810959a:	2100      	movs	r1, #0
 810959c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810959e:	f003 0301 	and.w	r3, r3, #1
 81095a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81095a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81095a8:	460b      	mov	r3, r1
 81095aa:	4313      	orrs	r3, r2
 81095ac:	d011      	beq.n	81095d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81095b2:	3308      	adds	r3, #8
 81095b4:	2100      	movs	r1, #0
 81095b6:	4618      	mov	r0, r3
 81095b8:	f001 fa4a 	bl	810aa50 <RCCEx_PLL2_Config>
 81095bc:	4603      	mov	r3, r0
 81095be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81095c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81095c6:	2b00      	cmp	r3, #0
 81095c8:	d003      	beq.n	81095d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81095ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81095ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81095d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81095da:	2100      	movs	r1, #0
 81095dc:	6239      	str	r1, [r7, #32]
 81095de:	f003 0302 	and.w	r3, r3, #2
 81095e2:	627b      	str	r3, [r7, #36]	@ 0x24
 81095e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81095e8:	460b      	mov	r3, r1
 81095ea:	4313      	orrs	r3, r2
 81095ec:	d011      	beq.n	8109612 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81095ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81095f2:	3308      	adds	r3, #8
 81095f4:	2101      	movs	r1, #1
 81095f6:	4618      	mov	r0, r3
 81095f8:	f001 fa2a 	bl	810aa50 <RCCEx_PLL2_Config>
 81095fc:	4603      	mov	r3, r0
 81095fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8109602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109606:	2b00      	cmp	r3, #0
 8109608:	d003      	beq.n	8109612 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810960a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810960e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8109612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109616:	e9d3 2300 	ldrd	r2, r3, [r3]
 810961a:	2100      	movs	r1, #0
 810961c:	61b9      	str	r1, [r7, #24]
 810961e:	f003 0304 	and.w	r3, r3, #4
 8109622:	61fb      	str	r3, [r7, #28]
 8109624:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8109628:	460b      	mov	r3, r1
 810962a:	4313      	orrs	r3, r2
 810962c:	d011      	beq.n	8109652 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810962e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109632:	3308      	adds	r3, #8
 8109634:	2102      	movs	r1, #2
 8109636:	4618      	mov	r0, r3
 8109638:	f001 fa0a 	bl	810aa50 <RCCEx_PLL2_Config>
 810963c:	4603      	mov	r3, r0
 810963e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8109642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109646:	2b00      	cmp	r3, #0
 8109648:	d003      	beq.n	8109652 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810964a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810964e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8109652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109656:	e9d3 2300 	ldrd	r2, r3, [r3]
 810965a:	2100      	movs	r1, #0
 810965c:	6139      	str	r1, [r7, #16]
 810965e:	f003 0308 	and.w	r3, r3, #8
 8109662:	617b      	str	r3, [r7, #20]
 8109664:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8109668:	460b      	mov	r3, r1
 810966a:	4313      	orrs	r3, r2
 810966c:	d011      	beq.n	8109692 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810966e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109672:	3328      	adds	r3, #40	@ 0x28
 8109674:	2100      	movs	r1, #0
 8109676:	4618      	mov	r0, r3
 8109678:	f001 fa9c 	bl	810abb4 <RCCEx_PLL3_Config>
 810967c:	4603      	mov	r3, r0
 810967e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8109682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109686:	2b00      	cmp	r3, #0
 8109688:	d003      	beq.n	8109692 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810968a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810968e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8109692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8109696:	e9d3 2300 	ldrd	r2, r3, [r3]
 810969a:	2100      	movs	r1, #0
 810969c:	60b9      	str	r1, [r7, #8]
 810969e:	f003 0310 	and.w	r3, r3, #16
 81096a2:	60fb      	str	r3, [r7, #12]
 81096a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81096a8:	460b      	mov	r3, r1
 81096aa:	4313      	orrs	r3, r2
 81096ac:	d011      	beq.n	81096d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81096ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096b2:	3328      	adds	r3, #40	@ 0x28
 81096b4:	2101      	movs	r1, #1
 81096b6:	4618      	mov	r0, r3
 81096b8:	f001 fa7c 	bl	810abb4 <RCCEx_PLL3_Config>
 81096bc:	4603      	mov	r3, r0
 81096be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81096c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81096c6:	2b00      	cmp	r3, #0
 81096c8:	d003      	beq.n	81096d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81096ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81096ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81096d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81096da:	2100      	movs	r1, #0
 81096dc:	6039      	str	r1, [r7, #0]
 81096de:	f003 0320 	and.w	r3, r3, #32
 81096e2:	607b      	str	r3, [r7, #4]
 81096e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81096e8:	460b      	mov	r3, r1
 81096ea:	4313      	orrs	r3, r2
 81096ec:	d011      	beq.n	8109712 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81096ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81096f2:	3328      	adds	r3, #40	@ 0x28
 81096f4:	2102      	movs	r1, #2
 81096f6:	4618      	mov	r0, r3
 81096f8:	f001 fa5c 	bl	810abb4 <RCCEx_PLL3_Config>
 81096fc:	4603      	mov	r3, r0
 81096fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8109702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8109706:	2b00      	cmp	r3, #0
 8109708:	d003      	beq.n	8109712 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810970a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810970e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8109712:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8109716:	2b00      	cmp	r3, #0
 8109718:	d101      	bne.n	810971e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810971a:	2300      	movs	r3, #0
 810971c:	e000      	b.n	8109720 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810971e:	2301      	movs	r3, #1
}
 8109720:	4618      	mov	r0, r3
 8109722:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8109726:	46bd      	mov	sp, r7
 8109728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810972c:	58024400 	.word	0x58024400

08109730 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8109730:	b580      	push	{r7, lr}
 8109732:	b090      	sub	sp, #64	@ 0x40
 8109734:	af00      	add	r7, sp, #0
 8109736:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810973a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810973e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8109742:	430b      	orrs	r3, r1
 8109744:	f040 8094 	bne.w	8109870 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8109748:	4b9e      	ldr	r3, [pc, #632]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810974a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810974c:	f003 0307 	and.w	r3, r3, #7
 8109750:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8109752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109754:	2b04      	cmp	r3, #4
 8109756:	f200 8087 	bhi.w	8109868 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810975a:	a201      	add	r2, pc, #4	@ (adr r2, 8109760 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109760:	08109775 	.word	0x08109775
 8109764:	0810979d 	.word	0x0810979d
 8109768:	081097c5 	.word	0x081097c5
 810976c:	08109861 	.word	0x08109861
 8109770:	081097ed 	.word	0x081097ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109774:	4b93      	ldr	r3, [pc, #588]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109776:	681b      	ldr	r3, [r3, #0]
 8109778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810977c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109780:	d108      	bne.n	8109794 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109786:	4618      	mov	r0, r3
 8109788:	f001 f810 	bl	810a7ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810978c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810978e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109790:	f000 bd45 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109794:	2300      	movs	r3, #0
 8109796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109798:	f000 bd41 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810979c:	4b89      	ldr	r3, [pc, #548]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810979e:	681b      	ldr	r3, [r3, #0]
 81097a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81097a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81097a8:	d108      	bne.n	81097bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81097aa:	f107 0318 	add.w	r3, r7, #24
 81097ae:	4618      	mov	r0, r3
 81097b0:	f000 fd54 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81097b4:	69bb      	ldr	r3, [r7, #24]
 81097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81097b8:	f000 bd31 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81097bc:	2300      	movs	r3, #0
 81097be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81097c0:	f000 bd2d 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81097c4:	4b7f      	ldr	r3, [pc, #508]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81097c6:	681b      	ldr	r3, [r3, #0]
 81097c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81097cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81097d0:	d108      	bne.n	81097e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81097d2:	f107 030c 	add.w	r3, r7, #12
 81097d6:	4618      	mov	r0, r3
 81097d8:	f000 fe94 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81097dc:	68fb      	ldr	r3, [r7, #12]
 81097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81097e0:	f000 bd1d 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81097e4:	2300      	movs	r3, #0
 81097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81097e8:	f000 bd19 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81097ec:	4b75      	ldr	r3, [pc, #468]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81097ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81097f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81097f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81097f6:	4b73      	ldr	r3, [pc, #460]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81097f8:	681b      	ldr	r3, [r3, #0]
 81097fa:	f003 0304 	and.w	r3, r3, #4
 81097fe:	2b04      	cmp	r3, #4
 8109800:	d10c      	bne.n	810981c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8109802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109804:	2b00      	cmp	r3, #0
 8109806:	d109      	bne.n	810981c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109808:	4b6e      	ldr	r3, [pc, #440]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810980a:	681b      	ldr	r3, [r3, #0]
 810980c:	08db      	lsrs	r3, r3, #3
 810980e:	f003 0303 	and.w	r3, r3, #3
 8109812:	4a6d      	ldr	r2, [pc, #436]	@ (81099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8109814:	fa22 f303 	lsr.w	r3, r2, r3
 8109818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810981a:	e01f      	b.n	810985c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810981c:	4b69      	ldr	r3, [pc, #420]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810981e:	681b      	ldr	r3, [r3, #0]
 8109820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109828:	d106      	bne.n	8109838 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810982a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810982c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109830:	d102      	bne.n	8109838 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109832:	4b66      	ldr	r3, [pc, #408]	@ (81099cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8109834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109836:	e011      	b.n	810985c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109838:	4b62      	ldr	r3, [pc, #392]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810983a:	681b      	ldr	r3, [r3, #0]
 810983c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109844:	d106      	bne.n	8109854 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8109846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810984c:	d102      	bne.n	8109854 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810984e:	4b60      	ldr	r3, [pc, #384]	@ (81099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8109850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109852:	e003      	b.n	810985c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109854:	2300      	movs	r3, #0
 8109856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109858:	f000 bce1 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810985c:	f000 bcdf 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8109860:	4b5c      	ldr	r3, [pc, #368]	@ (81099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8109862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109864:	f000 bcdb 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109868:	2300      	movs	r3, #0
 810986a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810986c:	f000 bcd7 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8109870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109874:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8109878:	430b      	orrs	r3, r1
 810987a:	f040 80ad 	bne.w	81099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810987e:	4b51      	ldr	r3, [pc, #324]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109882:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8109886:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8109888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810988a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810988e:	d056      	beq.n	810993e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8109890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109896:	f200 8090 	bhi.w	81099ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810989c:	2bc0      	cmp	r3, #192	@ 0xc0
 810989e:	f000 8088 	beq.w	81099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81098a4:	2bc0      	cmp	r3, #192	@ 0xc0
 81098a6:	f200 8088 	bhi.w	81099ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81098ac:	2b80      	cmp	r3, #128	@ 0x80
 81098ae:	d032      	beq.n	8109916 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81098b2:	2b80      	cmp	r3, #128	@ 0x80
 81098b4:	f200 8081 	bhi.w	81099ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81098ba:	2b00      	cmp	r3, #0
 81098bc:	d003      	beq.n	81098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81098c0:	2b40      	cmp	r3, #64	@ 0x40
 81098c2:	d014      	beq.n	81098ee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81098c4:	e079      	b.n	81099ba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81098c6:	4b3f      	ldr	r3, [pc, #252]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81098c8:	681b      	ldr	r3, [r3, #0]
 81098ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81098ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81098d2:	d108      	bne.n	81098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81098d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81098d8:	4618      	mov	r0, r3
 81098da:	f000 ff67 	bl	810a7ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81098de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81098e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81098e2:	f000 bc9c 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81098e6:	2300      	movs	r3, #0
 81098e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81098ea:	f000 bc98 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81098ee:	4b35      	ldr	r3, [pc, #212]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81098f0:	681b      	ldr	r3, [r3, #0]
 81098f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81098f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81098fa:	d108      	bne.n	810990e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81098fc:	f107 0318 	add.w	r3, r7, #24
 8109900:	4618      	mov	r0, r3
 8109902:	f000 fcab 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109906:	69bb      	ldr	r3, [r7, #24]
 8109908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810990a:	f000 bc88 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810990e:	2300      	movs	r3, #0
 8109910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109912:	f000 bc84 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109916:	4b2b      	ldr	r3, [pc, #172]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109918:	681b      	ldr	r3, [r3, #0]
 810991a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810991e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109922:	d108      	bne.n	8109936 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109924:	f107 030c 	add.w	r3, r7, #12
 8109928:	4618      	mov	r0, r3
 810992a:	f000 fdeb 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810992e:	68fb      	ldr	r3, [r7, #12]
 8109930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109932:	f000 bc74 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109936:	2300      	movs	r3, #0
 8109938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810993a:	f000 bc70 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810993e:	4b21      	ldr	r3, [pc, #132]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109942:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109946:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109948:	4b1e      	ldr	r3, [pc, #120]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810994a:	681b      	ldr	r3, [r3, #0]
 810994c:	f003 0304 	and.w	r3, r3, #4
 8109950:	2b04      	cmp	r3, #4
 8109952:	d10c      	bne.n	810996e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8109954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109956:	2b00      	cmp	r3, #0
 8109958:	d109      	bne.n	810996e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810995a:	4b1a      	ldr	r3, [pc, #104]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810995c:	681b      	ldr	r3, [r3, #0]
 810995e:	08db      	lsrs	r3, r3, #3
 8109960:	f003 0303 	and.w	r3, r3, #3
 8109964:	4a18      	ldr	r2, [pc, #96]	@ (81099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8109966:	fa22 f303 	lsr.w	r3, r2, r3
 810996a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810996c:	e01f      	b.n	81099ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810996e:	4b15      	ldr	r3, [pc, #84]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8109970:	681b      	ldr	r3, [r3, #0]
 8109972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810997a:	d106      	bne.n	810998a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810997c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810997e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109982:	d102      	bne.n	810998a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109984:	4b11      	ldr	r3, [pc, #68]	@ (81099cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8109986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109988:	e011      	b.n	81099ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810998a:	4b0e      	ldr	r3, [pc, #56]	@ (81099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810998c:	681b      	ldr	r3, [r3, #0]
 810998e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109996:	d106      	bne.n	81099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8109998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810999a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810999e:	d102      	bne.n	81099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81099a0:	4b0b      	ldr	r3, [pc, #44]	@ (81099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81099a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81099a4:	e003      	b.n	81099ae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81099a6:	2300      	movs	r3, #0
 81099a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81099aa:	f000 bc38 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81099ae:	f000 bc36 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81099b2:	4b08      	ldr	r3, [pc, #32]	@ (81099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81099b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81099b6:	f000 bc32 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81099ba:	2300      	movs	r3, #0
 81099bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81099be:	f000 bc2e 	b.w	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81099c2:	bf00      	nop
 81099c4:	58024400 	.word	0x58024400
 81099c8:	03d09000 	.word	0x03d09000
 81099cc:	003d0900 	.word	0x003d0900
 81099d0:	007a1200 	.word	0x007a1200
 81099d4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81099d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81099dc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81099e0:	430b      	orrs	r3, r1
 81099e2:	f040 809c 	bne.w	8109b1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81099e6:	4b9e      	ldr	r3, [pc, #632]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81099e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81099ea:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81099ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81099f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81099f6:	d054      	beq.n	8109aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 81099f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81099fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81099fe:	f200 808b 	bhi.w	8109b18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8109a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a04:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8109a08:	f000 8083 	beq.w	8109b12 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8109a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8109a12:	f200 8081 	bhi.w	8109b18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8109a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8109a1c:	d02f      	beq.n	8109a7e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8109a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8109a24:	d878      	bhi.n	8109b18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8109a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a28:	2b00      	cmp	r3, #0
 8109a2a:	d004      	beq.n	8109a36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8109a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8109a32:	d012      	beq.n	8109a5a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8109a34:	e070      	b.n	8109b18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109a36:	4b8a      	ldr	r3, [pc, #552]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109a38:	681b      	ldr	r3, [r3, #0]
 8109a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109a42:	d107      	bne.n	8109a54 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109a48:	4618      	mov	r0, r3
 8109a4a:	f000 feaf 	bl	810a7ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109a52:	e3e4      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109a54:	2300      	movs	r3, #0
 8109a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109a58:	e3e1      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109a5a:	4b81      	ldr	r3, [pc, #516]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109a5c:	681b      	ldr	r3, [r3, #0]
 8109a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109a66:	d107      	bne.n	8109a78 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109a68:	f107 0318 	add.w	r3, r7, #24
 8109a6c:	4618      	mov	r0, r3
 8109a6e:	f000 fbf5 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109a72:	69bb      	ldr	r3, [r7, #24]
 8109a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109a76:	e3d2      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109a78:	2300      	movs	r3, #0
 8109a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109a7c:	e3cf      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109a7e:	4b78      	ldr	r3, [pc, #480]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109a80:	681b      	ldr	r3, [r3, #0]
 8109a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109a8a:	d107      	bne.n	8109a9c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109a8c:	f107 030c 	add.w	r3, r7, #12
 8109a90:	4618      	mov	r0, r3
 8109a92:	f000 fd37 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8109a96:	68fb      	ldr	r3, [r7, #12]
 8109a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109a9a:	e3c0      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109a9c:	2300      	movs	r3, #0
 8109a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109aa0:	e3bd      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8109aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109aa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109aaa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109aac:	4b6c      	ldr	r3, [pc, #432]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109aae:	681b      	ldr	r3, [r3, #0]
 8109ab0:	f003 0304 	and.w	r3, r3, #4
 8109ab4:	2b04      	cmp	r3, #4
 8109ab6:	d10c      	bne.n	8109ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8109ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109aba:	2b00      	cmp	r3, #0
 8109abc:	d109      	bne.n	8109ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109abe:	4b68      	ldr	r3, [pc, #416]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109ac0:	681b      	ldr	r3, [r3, #0]
 8109ac2:	08db      	lsrs	r3, r3, #3
 8109ac4:	f003 0303 	and.w	r3, r3, #3
 8109ac8:	4a66      	ldr	r2, [pc, #408]	@ (8109c64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8109aca:	fa22 f303 	lsr.w	r3, r2, r3
 8109ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109ad0:	e01e      	b.n	8109b10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109ad2:	4b63      	ldr	r3, [pc, #396]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109ad4:	681b      	ldr	r3, [r3, #0]
 8109ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109ade:	d106      	bne.n	8109aee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8109ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109ae6:	d102      	bne.n	8109aee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109ae8:	4b5f      	ldr	r3, [pc, #380]	@ (8109c68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8109aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109aec:	e010      	b.n	8109b10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109aee:	4b5c      	ldr	r3, [pc, #368]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109af0:	681b      	ldr	r3, [r3, #0]
 8109af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109afa:	d106      	bne.n	8109b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8109afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109b02:	d102      	bne.n	8109b0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109b04:	4b59      	ldr	r3, [pc, #356]	@ (8109c6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8109b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109b08:	e002      	b.n	8109b10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109b0a:	2300      	movs	r3, #0
 8109b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109b0e:	e386      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109b10:	e385      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8109b12:	4b57      	ldr	r3, [pc, #348]	@ (8109c70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8109b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b16:	e382      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8109b18:	2300      	movs	r3, #0
 8109b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109b1c:	e37f      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8109b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109b22:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8109b26:	430b      	orrs	r3, r1
 8109b28:	f040 80a7 	bne.w	8109c7a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8109b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109b30:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8109b34:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8109b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109b3c:	d055      	beq.n	8109bea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8109b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109b40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109b44:	f200 8096 	bhi.w	8109c74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8109b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109b4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8109b4e:	f000 8084 	beq.w	8109c5a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8109b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109b54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8109b58:	f200 808c 	bhi.w	8109c74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8109b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109b5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109b62:	d030      	beq.n	8109bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8109b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109b66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109b6a:	f200 8083 	bhi.w	8109c74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8109b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109b70:	2b00      	cmp	r3, #0
 8109b72:	d004      	beq.n	8109b7e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8109b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8109b7a:	d012      	beq.n	8109ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8109b7c:	e07a      	b.n	8109c74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109b7e:	4b38      	ldr	r3, [pc, #224]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109b80:	681b      	ldr	r3, [r3, #0]
 8109b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109b8a:	d107      	bne.n	8109b9c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109b90:	4618      	mov	r0, r3
 8109b92:	f000 fe0b 	bl	810a7ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109b9a:	e340      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109b9c:	2300      	movs	r3, #0
 8109b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ba0:	e33d      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109ba4:	681b      	ldr	r3, [r3, #0]
 8109ba6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109baa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109bae:	d107      	bne.n	8109bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109bb0:	f107 0318 	add.w	r3, r7, #24
 8109bb4:	4618      	mov	r0, r3
 8109bb6:	f000 fb51 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109bba:	69bb      	ldr	r3, [r7, #24]
 8109bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109bbe:	e32e      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109bc0:	2300      	movs	r3, #0
 8109bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109bc4:	e32b      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109bc6:	4b26      	ldr	r3, [pc, #152]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109bc8:	681b      	ldr	r3, [r3, #0]
 8109bca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109bd2:	d107      	bne.n	8109be4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109bd4:	f107 030c 	add.w	r3, r7, #12
 8109bd8:	4618      	mov	r0, r3
 8109bda:	f000 fc93 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8109bde:	68fb      	ldr	r3, [r7, #12]
 8109be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109be2:	e31c      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109be4:	2300      	movs	r3, #0
 8109be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109be8:	e319      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8109bea:	4b1d      	ldr	r3, [pc, #116]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109bee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109bf2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109bf6:	681b      	ldr	r3, [r3, #0]
 8109bf8:	f003 0304 	and.w	r3, r3, #4
 8109bfc:	2b04      	cmp	r3, #4
 8109bfe:	d10c      	bne.n	8109c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8109c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109c02:	2b00      	cmp	r3, #0
 8109c04:	d109      	bne.n	8109c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109c06:	4b16      	ldr	r3, [pc, #88]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109c08:	681b      	ldr	r3, [r3, #0]
 8109c0a:	08db      	lsrs	r3, r3, #3
 8109c0c:	f003 0303 	and.w	r3, r3, #3
 8109c10:	4a14      	ldr	r2, [pc, #80]	@ (8109c64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8109c12:	fa22 f303 	lsr.w	r3, r2, r3
 8109c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109c18:	e01e      	b.n	8109c58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109c1a:	4b11      	ldr	r3, [pc, #68]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109c1c:	681b      	ldr	r3, [r3, #0]
 8109c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109c26:	d106      	bne.n	8109c36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8109c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109c2e:	d102      	bne.n	8109c36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109c30:	4b0d      	ldr	r3, [pc, #52]	@ (8109c68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8109c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109c34:	e010      	b.n	8109c58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109c36:	4b0a      	ldr	r3, [pc, #40]	@ (8109c60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8109c38:	681b      	ldr	r3, [r3, #0]
 8109c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109c42:	d106      	bne.n	8109c52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8109c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109c4a:	d102      	bne.n	8109c52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109c4c:	4b07      	ldr	r3, [pc, #28]	@ (8109c6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8109c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109c50:	e002      	b.n	8109c58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109c52:	2300      	movs	r3, #0
 8109c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109c56:	e2e2      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109c58:	e2e1      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8109c5a:	4b05      	ldr	r3, [pc, #20]	@ (8109c70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8109c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109c5e:	e2de      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109c60:	58024400 	.word	0x58024400
 8109c64:	03d09000 	.word	0x03d09000
 8109c68:	003d0900 	.word	0x003d0900
 8109c6c:	007a1200 	.word	0x007a1200
 8109c70:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8109c74:	2300      	movs	r3, #0
 8109c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109c78:	e2d1      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8109c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109c7e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8109c82:	430b      	orrs	r3, r1
 8109c84:	f040 809c 	bne.w	8109dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8109c88:	4b93      	ldr	r3, [pc, #588]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109c8c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8109c90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109c98:	d054      	beq.n	8109d44 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8109c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109ca0:	f200 808b 	bhi.w	8109dba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8109ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ca6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8109caa:	f000 8083 	beq.w	8109db4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8109cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8109cb4:	f200 8081 	bhi.w	8109dba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8109cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8109cbe:	d02f      	beq.n	8109d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8109cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8109cc6:	d878      	bhi.n	8109dba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8109cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cca:	2b00      	cmp	r3, #0
 8109ccc:	d004      	beq.n	8109cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8109cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8109cd4:	d012      	beq.n	8109cfc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8109cd6:	e070      	b.n	8109dba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8109cd8:	4b7f      	ldr	r3, [pc, #508]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109cda:	681b      	ldr	r3, [r3, #0]
 8109cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109ce0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109ce4:	d107      	bne.n	8109cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8109ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109cea:	4618      	mov	r0, r3
 8109cec:	f000 fd5e 	bl	810a7ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8109cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109cf4:	e293      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109cf6:	2300      	movs	r3, #0
 8109cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109cfa:	e290      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109cfc:	4b76      	ldr	r3, [pc, #472]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109d04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109d08:	d107      	bne.n	8109d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109d0a:	f107 0318 	add.w	r3, r7, #24
 8109d0e:	4618      	mov	r0, r3
 8109d10:	f000 faa4 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109d14:	69bb      	ldr	r3, [r7, #24]
 8109d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109d18:	e281      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109d1a:	2300      	movs	r3, #0
 8109d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d1e:	e27e      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109d20:	4b6d      	ldr	r3, [pc, #436]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109d22:	681b      	ldr	r3, [r3, #0]
 8109d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109d2c:	d107      	bne.n	8109d3e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109d2e:	f107 030c 	add.w	r3, r7, #12
 8109d32:	4618      	mov	r0, r3
 8109d34:	f000 fbe6 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8109d38:	68fb      	ldr	r3, [r7, #12]
 8109d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109d3c:	e26f      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109d3e:	2300      	movs	r3, #0
 8109d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109d42:	e26c      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8109d44:	4b64      	ldr	r3, [pc, #400]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109d48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109d4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109d4e:	4b62      	ldr	r3, [pc, #392]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109d50:	681b      	ldr	r3, [r3, #0]
 8109d52:	f003 0304 	and.w	r3, r3, #4
 8109d56:	2b04      	cmp	r3, #4
 8109d58:	d10c      	bne.n	8109d74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8109d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109d5c:	2b00      	cmp	r3, #0
 8109d5e:	d109      	bne.n	8109d74 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109d60:	4b5d      	ldr	r3, [pc, #372]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109d62:	681b      	ldr	r3, [r3, #0]
 8109d64:	08db      	lsrs	r3, r3, #3
 8109d66:	f003 0303 	and.w	r3, r3, #3
 8109d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8109edc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8109d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8109d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109d72:	e01e      	b.n	8109db2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109d74:	4b58      	ldr	r3, [pc, #352]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109d76:	681b      	ldr	r3, [r3, #0]
 8109d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109d80:	d106      	bne.n	8109d90 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8109d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109d88:	d102      	bne.n	8109d90 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109d8a:	4b55      	ldr	r3, [pc, #340]	@ (8109ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8109d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109d8e:	e010      	b.n	8109db2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109d90:	4b51      	ldr	r3, [pc, #324]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109d92:	681b      	ldr	r3, [r3, #0]
 8109d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109d9c:	d106      	bne.n	8109dac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8109d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109da4:	d102      	bne.n	8109dac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109da6:	4b4f      	ldr	r3, [pc, #316]	@ (8109ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8109da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109daa:	e002      	b.n	8109db2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109dac:	2300      	movs	r3, #0
 8109dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109db0:	e235      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109db2:	e234      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8109db4:	4b4c      	ldr	r3, [pc, #304]	@ (8109ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8109db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109db8:	e231      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109dba:	2300      	movs	r3, #0
 8109dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109dbe:	e22e      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8109dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109dc4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8109dc8:	430b      	orrs	r3, r1
 8109dca:	f040 808f 	bne.w	8109eec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8109dce:	4b42      	ldr	r3, [pc, #264]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109dd2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8109dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8109dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109dda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8109dde:	d06b      	beq.n	8109eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8109de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109de2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8109de6:	d874      	bhi.n	8109ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109dea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109dee:	d056      	beq.n	8109e9e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8109df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109df2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8109df6:	d86c      	bhi.n	8109ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109dfa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8109dfe:	d03b      	beq.n	8109e78 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8109e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8109e06:	d864      	bhi.n	8109ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109e0e:	d021      	beq.n	8109e54 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8109e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109e16:	d85c      	bhi.n	8109ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8109e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e1a:	2b00      	cmp	r3, #0
 8109e1c:	d004      	beq.n	8109e28 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8109e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109e24:	d004      	beq.n	8109e30 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8109e26:	e054      	b.n	8109ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8109e28:	f7fe fa4c 	bl	81082c4 <HAL_RCC_GetPCLK1Freq>
 8109e2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109e2e:	e1f6      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109e30:	4b29      	ldr	r3, [pc, #164]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109e32:	681b      	ldr	r3, [r3, #0]
 8109e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109e38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109e3c:	d107      	bne.n	8109e4e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109e3e:	f107 0318 	add.w	r3, r7, #24
 8109e42:	4618      	mov	r0, r3
 8109e44:	f000 fa0a 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8109e48:	69fb      	ldr	r3, [r7, #28]
 8109e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109e4c:	e1e7      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109e4e:	2300      	movs	r3, #0
 8109e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e52:	e1e4      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109e54:	4b20      	ldr	r3, [pc, #128]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109e56:	681b      	ldr	r3, [r3, #0]
 8109e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109e60:	d107      	bne.n	8109e72 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109e62:	f107 030c 	add.w	r3, r7, #12
 8109e66:	4618      	mov	r0, r3
 8109e68:	f000 fb4c 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8109e6c:	693b      	ldr	r3, [r7, #16]
 8109e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109e70:	e1d5      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109e72:	2300      	movs	r3, #0
 8109e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e76:	e1d2      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8109e78:	4b17      	ldr	r3, [pc, #92]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109e7a:	681b      	ldr	r3, [r3, #0]
 8109e7c:	f003 0304 	and.w	r3, r3, #4
 8109e80:	2b04      	cmp	r3, #4
 8109e82:	d109      	bne.n	8109e98 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109e84:	4b14      	ldr	r3, [pc, #80]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109e86:	681b      	ldr	r3, [r3, #0]
 8109e88:	08db      	lsrs	r3, r3, #3
 8109e8a:	f003 0303 	and.w	r3, r3, #3
 8109e8e:	4a13      	ldr	r2, [pc, #76]	@ (8109edc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8109e90:	fa22 f303 	lsr.w	r3, r2, r3
 8109e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109e96:	e1c2      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109e98:	2300      	movs	r3, #0
 8109e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109e9c:	e1bf      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8109e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109ea0:	681b      	ldr	r3, [r3, #0]
 8109ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109eaa:	d102      	bne.n	8109eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8109eac:	4b0c      	ldr	r3, [pc, #48]	@ (8109ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8109eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109eb0:	e1b5      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109eb2:	2300      	movs	r3, #0
 8109eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109eb6:	e1b2      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8109eb8:	4b07      	ldr	r3, [pc, #28]	@ (8109ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8109eba:	681b      	ldr	r3, [r3, #0]
 8109ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109ec4:	d102      	bne.n	8109ecc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8109ec6:	4b07      	ldr	r3, [pc, #28]	@ (8109ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8109ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109eca:	e1a8      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109ecc:	2300      	movs	r3, #0
 8109ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ed0:	e1a5      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8109ed2:	2300      	movs	r3, #0
 8109ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109ed6:	e1a2      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109ed8:	58024400 	.word	0x58024400
 8109edc:	03d09000 	.word	0x03d09000
 8109ee0:	003d0900 	.word	0x003d0900
 8109ee4:	007a1200 	.word	0x007a1200
 8109ee8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8109eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109ef0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8109ef4:	430b      	orrs	r3, r1
 8109ef6:	d173      	bne.n	8109fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8109ef8:	4b9c      	ldr	r3, [pc, #624]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8109f00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109f08:	d02f      	beq.n	8109f6a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8109f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109f10:	d863      	bhi.n	8109fda <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8109f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109f14:	2b00      	cmp	r3, #0
 8109f16:	d004      	beq.n	8109f22 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8109f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109f1e:	d012      	beq.n	8109f46 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8109f20:	e05b      	b.n	8109fda <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8109f22:	4b92      	ldr	r3, [pc, #584]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109f24:	681b      	ldr	r3, [r3, #0]
 8109f26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8109f2e:	d107      	bne.n	8109f40 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109f30:	f107 0318 	add.w	r3, r7, #24
 8109f34:	4618      	mov	r0, r3
 8109f36:	f000 f991 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8109f3a:	69bb      	ldr	r3, [r7, #24]
 8109f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109f3e:	e16e      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109f40:	2300      	movs	r3, #0
 8109f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109f44:	e16b      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8109f46:	4b89      	ldr	r3, [pc, #548]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109f48:	681b      	ldr	r3, [r3, #0]
 8109f4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109f52:	d107      	bne.n	8109f64 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109f54:	f107 030c 	add.w	r3, r7, #12
 8109f58:	4618      	mov	r0, r3
 8109f5a:	f000 fad3 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8109f5e:	697b      	ldr	r3, [r7, #20]
 8109f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8109f62:	e15c      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8109f64:	2300      	movs	r3, #0
 8109f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109f68:	e159      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8109f6a:	4b80      	ldr	r3, [pc, #512]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109f6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8109f72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8109f74:	4b7d      	ldr	r3, [pc, #500]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109f76:	681b      	ldr	r3, [r3, #0]
 8109f78:	f003 0304 	and.w	r3, r3, #4
 8109f7c:	2b04      	cmp	r3, #4
 8109f7e:	d10c      	bne.n	8109f9a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8109f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109f82:	2b00      	cmp	r3, #0
 8109f84:	d109      	bne.n	8109f9a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109f86:	4b79      	ldr	r3, [pc, #484]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109f88:	681b      	ldr	r3, [r3, #0]
 8109f8a:	08db      	lsrs	r3, r3, #3
 8109f8c:	f003 0303 	and.w	r3, r3, #3
 8109f90:	4a77      	ldr	r2, [pc, #476]	@ (810a170 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8109f92:	fa22 f303 	lsr.w	r3, r2, r3
 8109f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109f98:	e01e      	b.n	8109fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8109f9a:	4b74      	ldr	r3, [pc, #464]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109f9c:	681b      	ldr	r3, [r3, #0]
 8109f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109fa6:	d106      	bne.n	8109fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8109fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109fae:	d102      	bne.n	8109fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8109fb0:	4b70      	ldr	r3, [pc, #448]	@ (810a174 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8109fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109fb4:	e010      	b.n	8109fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8109fb6:	4b6d      	ldr	r3, [pc, #436]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109fb8:	681b      	ldr	r3, [r3, #0]
 8109fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109fbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109fc2:	d106      	bne.n	8109fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8109fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109fc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109fca:	d102      	bne.n	8109fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8109fcc:	4b6a      	ldr	r3, [pc, #424]	@ (810a178 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8109fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109fd0:	e002      	b.n	8109fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8109fd2:	2300      	movs	r3, #0
 8109fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8109fd6:	e122      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8109fd8:	e121      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8109fda:	2300      	movs	r3, #0
 8109fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109fde:	e11e      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8109fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109fe4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8109fe8:	430b      	orrs	r3, r1
 8109fea:	d133      	bne.n	810a054 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8109fec:	4b5f      	ldr	r3, [pc, #380]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8109fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8109ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109ff4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8109ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ff8:	2b00      	cmp	r3, #0
 8109ffa:	d004      	beq.n	810a006 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8109ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a002:	d012      	beq.n	810a02a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810a004:	e023      	b.n	810a04e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810a006:	4b59      	ldr	r3, [pc, #356]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a008:	681b      	ldr	r3, [r3, #0]
 810a00a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a00e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a012:	d107      	bne.n	810a024 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810a014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a018:	4618      	mov	r0, r3
 810a01a:	f000 fbc7 	bl	810a7ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810a01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a022:	e0fc      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a024:	2300      	movs	r3, #0
 810a026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a028:	e0f9      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810a02a:	4b50      	ldr	r3, [pc, #320]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a02c:	681b      	ldr	r3, [r3, #0]
 810a02e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810a036:	d107      	bne.n	810a048 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a038:	f107 0318 	add.w	r3, r7, #24
 810a03c:	4618      	mov	r0, r3
 810a03e:	f000 f90d 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810a042:	6a3b      	ldr	r3, [r7, #32]
 810a044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a046:	e0ea      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a048:	2300      	movs	r3, #0
 810a04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a04c:	e0e7      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810a04e:	2300      	movs	r3, #0
 810a050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a052:	e0e4      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810a054:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a058:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 810a05c:	430b      	orrs	r3, r1
 810a05e:	f040 808d 	bne.w	810a17c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810a062:	4b42      	ldr	r3, [pc, #264]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a066:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810a06a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810a06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a06e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810a072:	d06b      	beq.n	810a14c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810a074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a076:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810a07a:	d874      	bhi.n	810a166 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810a07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a07e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a082:	d056      	beq.n	810a132 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810a084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a08a:	d86c      	bhi.n	810a166 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a08e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810a092:	d03b      	beq.n	810a10c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a096:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810a09a:	d864      	bhi.n	810a166 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810a09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a09e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a0a2:	d021      	beq.n	810a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a0aa:	d85c      	bhi.n	810a166 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a0ae:	2b00      	cmp	r3, #0
 810a0b0:	d004      	beq.n	810a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810a0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a0b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a0b8:	d004      	beq.n	810a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810a0ba:	e054      	b.n	810a166 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810a0bc:	f000 f8b8 	bl	810a230 <HAL_RCCEx_GetD3PCLK1Freq>
 810a0c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a0c2:	e0ac      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810a0c4:	4b29      	ldr	r3, [pc, #164]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a0c6:	681b      	ldr	r3, [r3, #0]
 810a0c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a0cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810a0d0:	d107      	bne.n	810a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a0d2:	f107 0318 	add.w	r3, r7, #24
 810a0d6:	4618      	mov	r0, r3
 810a0d8:	f000 f8c0 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810a0dc:	69fb      	ldr	r3, [r7, #28]
 810a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a0e0:	e09d      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a0e2:	2300      	movs	r3, #0
 810a0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a0e6:	e09a      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810a0e8:	4b20      	ldr	r3, [pc, #128]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a0ea:	681b      	ldr	r3, [r3, #0]
 810a0ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a0f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a0f4:	d107      	bne.n	810a106 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a0f6:	f107 030c 	add.w	r3, r7, #12
 810a0fa:	4618      	mov	r0, r3
 810a0fc:	f000 fa02 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810a100:	693b      	ldr	r3, [r7, #16]
 810a102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a104:	e08b      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a106:	2300      	movs	r3, #0
 810a108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a10a:	e088      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810a10c:	4b17      	ldr	r3, [pc, #92]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a10e:	681b      	ldr	r3, [r3, #0]
 810a110:	f003 0304 	and.w	r3, r3, #4
 810a114:	2b04      	cmp	r3, #4
 810a116:	d109      	bne.n	810a12c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a118:	4b14      	ldr	r3, [pc, #80]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a11a:	681b      	ldr	r3, [r3, #0]
 810a11c:	08db      	lsrs	r3, r3, #3
 810a11e:	f003 0303 	and.w	r3, r3, #3
 810a122:	4a13      	ldr	r2, [pc, #76]	@ (810a170 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810a124:	fa22 f303 	lsr.w	r3, r2, r3
 810a128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a12a:	e078      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a12c:	2300      	movs	r3, #0
 810a12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a130:	e075      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810a132:	4b0e      	ldr	r3, [pc, #56]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a134:	681b      	ldr	r3, [r3, #0]
 810a136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a13a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a13e:	d102      	bne.n	810a146 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810a140:	4b0c      	ldr	r3, [pc, #48]	@ (810a174 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a144:	e06b      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a146:	2300      	movs	r3, #0
 810a148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a14a:	e068      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810a14c:	4b07      	ldr	r3, [pc, #28]	@ (810a16c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810a14e:	681b      	ldr	r3, [r3, #0]
 810a150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a158:	d102      	bne.n	810a160 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810a15a:	4b07      	ldr	r3, [pc, #28]	@ (810a178 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810a15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a15e:	e05e      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a160:	2300      	movs	r3, #0
 810a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a164:	e05b      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810a166:	2300      	movs	r3, #0
 810a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a16a:	e058      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810a16c:	58024400 	.word	0x58024400
 810a170:	03d09000 	.word	0x03d09000
 810a174:	003d0900 	.word	0x003d0900
 810a178:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810a17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a180:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810a184:	430b      	orrs	r3, r1
 810a186:	d148      	bne.n	810a21a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810a188:	4b27      	ldr	r3, [pc, #156]	@ (810a228 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810a18a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a18c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810a190:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810a192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a198:	d02a      	beq.n	810a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a19c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a1a0:	d838      	bhi.n	810a214 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810a1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1a4:	2b00      	cmp	r3, #0
 810a1a6:	d004      	beq.n	810a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a1ae:	d00d      	beq.n	810a1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810a1b0:	e030      	b.n	810a214 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810a1b2:	4b1d      	ldr	r3, [pc, #116]	@ (810a228 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810a1b4:	681b      	ldr	r3, [r3, #0]
 810a1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a1ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a1be:	d102      	bne.n	810a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810a1c0:	4b1a      	ldr	r3, [pc, #104]	@ (810a22c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a1c4:	e02b      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a1c6:	2300      	movs	r3, #0
 810a1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a1ca:	e028      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810a1cc:	4b16      	ldr	r3, [pc, #88]	@ (810a228 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810a1ce:	681b      	ldr	r3, [r3, #0]
 810a1d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a1d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a1d8:	d107      	bne.n	810a1ea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810a1da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a1de:	4618      	mov	r0, r3
 810a1e0:	f000 fae4 	bl	810a7ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a1e8:	e019      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a1ea:	2300      	movs	r3, #0
 810a1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a1ee:	e016      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810a1f0:	4b0d      	ldr	r3, [pc, #52]	@ (810a228 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810a1f2:	681b      	ldr	r3, [r3, #0]
 810a1f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a1f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810a1fc:	d107      	bne.n	810a20e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a1fe:	f107 0318 	add.w	r3, r7, #24
 810a202:	4618      	mov	r0, r3
 810a204:	f000 f82a 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810a208:	69fb      	ldr	r3, [r7, #28]
 810a20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810a20c:	e007      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810a20e:	2300      	movs	r3, #0
 810a210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a212:	e004      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810a214:	2300      	movs	r3, #0
 810a216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a218:	e001      	b.n	810a21e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810a21a:	2300      	movs	r3, #0
 810a21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 810a21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810a220:	4618      	mov	r0, r3
 810a222:	3740      	adds	r7, #64	@ 0x40
 810a224:	46bd      	mov	sp, r7
 810a226:	bd80      	pop	{r7, pc}
 810a228:	58024400 	.word	0x58024400
 810a22c:	007a1200 	.word	0x007a1200

0810a230 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810a230:	b580      	push	{r7, lr}
 810a232:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810a234:	f7fe f814 	bl	8108260 <HAL_RCC_GetHCLKFreq>
 810a238:	4602      	mov	r2, r0
 810a23a:	4b06      	ldr	r3, [pc, #24]	@ (810a254 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810a23c:	6a1b      	ldr	r3, [r3, #32]
 810a23e:	091b      	lsrs	r3, r3, #4
 810a240:	f003 0307 	and.w	r3, r3, #7
 810a244:	4904      	ldr	r1, [pc, #16]	@ (810a258 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810a246:	5ccb      	ldrb	r3, [r1, r3]
 810a248:	f003 031f 	and.w	r3, r3, #31
 810a24c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810a250:	4618      	mov	r0, r3
 810a252:	bd80      	pop	{r7, pc}
 810a254:	58024400 	.word	0x58024400
 810a258:	08113cc8 	.word	0x08113cc8

0810a25c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810a25c:	b480      	push	{r7}
 810a25e:	b089      	sub	sp, #36	@ 0x24
 810a260:	af00      	add	r7, sp, #0
 810a262:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a264:	4ba1      	ldr	r3, [pc, #644]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a268:	f003 0303 	and.w	r3, r3, #3
 810a26c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810a26e:	4b9f      	ldr	r3, [pc, #636]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a272:	0b1b      	lsrs	r3, r3, #12
 810a274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a278:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810a27a:	4b9c      	ldr	r3, [pc, #624]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a27e:	091b      	lsrs	r3, r3, #4
 810a280:	f003 0301 	and.w	r3, r3, #1
 810a284:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810a286:	4b99      	ldr	r3, [pc, #612]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a28a:	08db      	lsrs	r3, r3, #3
 810a28c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a290:	693a      	ldr	r2, [r7, #16]
 810a292:	fb02 f303 	mul.w	r3, r2, r3
 810a296:	ee07 3a90 	vmov	s15, r3
 810a29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a29e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810a2a2:	697b      	ldr	r3, [r7, #20]
 810a2a4:	2b00      	cmp	r3, #0
 810a2a6:	f000 8111 	beq.w	810a4cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810a2aa:	69bb      	ldr	r3, [r7, #24]
 810a2ac:	2b02      	cmp	r3, #2
 810a2ae:	f000 8083 	beq.w	810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810a2b2:	69bb      	ldr	r3, [r7, #24]
 810a2b4:	2b02      	cmp	r3, #2
 810a2b6:	f200 80a1 	bhi.w	810a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810a2ba:	69bb      	ldr	r3, [r7, #24]
 810a2bc:	2b00      	cmp	r3, #0
 810a2be:	d003      	beq.n	810a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810a2c0:	69bb      	ldr	r3, [r7, #24]
 810a2c2:	2b01      	cmp	r3, #1
 810a2c4:	d056      	beq.n	810a374 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810a2c6:	e099      	b.n	810a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a2c8:	4b88      	ldr	r3, [pc, #544]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a2ca:	681b      	ldr	r3, [r3, #0]
 810a2cc:	f003 0320 	and.w	r3, r3, #32
 810a2d0:	2b00      	cmp	r3, #0
 810a2d2:	d02d      	beq.n	810a330 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a2d4:	4b85      	ldr	r3, [pc, #532]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a2d6:	681b      	ldr	r3, [r3, #0]
 810a2d8:	08db      	lsrs	r3, r3, #3
 810a2da:	f003 0303 	and.w	r3, r3, #3
 810a2de:	4a84      	ldr	r2, [pc, #528]	@ (810a4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810a2e0:	fa22 f303 	lsr.w	r3, r2, r3
 810a2e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a2e6:	68bb      	ldr	r3, [r7, #8]
 810a2e8:	ee07 3a90 	vmov	s15, r3
 810a2ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2f0:	697b      	ldr	r3, [r7, #20]
 810a2f2:	ee07 3a90 	vmov	s15, r3
 810a2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a2fe:	4b7b      	ldr	r3, [pc, #492]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a306:	ee07 3a90 	vmov	s15, r3
 810a30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a30e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a312:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a31e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a326:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a32a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810a32e:	e087      	b.n	810a440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a330:	697b      	ldr	r3, [r7, #20]
 810a332:	ee07 3a90 	vmov	s15, r3
 810a336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a33a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810a4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810a33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a342:	4b6a      	ldr	r3, [pc, #424]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a34a:	ee07 3a90 	vmov	s15, r3
 810a34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a352:	ed97 6a03 	vldr	s12, [r7, #12]
 810a356:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a372:	e065      	b.n	810a440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a374:	697b      	ldr	r3, [r7, #20]
 810a376:	ee07 3a90 	vmov	s15, r3
 810a37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a37e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810a4fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a386:	4b59      	ldr	r3, [pc, #356]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a38e:	ee07 3a90 	vmov	s15, r3
 810a392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a396:	ed97 6a03 	vldr	s12, [r7, #12]
 810a39a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a3a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a3b6:	e043      	b.n	810a440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a3b8:	697b      	ldr	r3, [r7, #20]
 810a3ba:	ee07 3a90 	vmov	s15, r3
 810a3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a3c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810a500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810a3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a3ca:	4b48      	ldr	r3, [pc, #288]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a3d2:	ee07 3a90 	vmov	s15, r3
 810a3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a3da:	ed97 6a03 	vldr	s12, [r7, #12]
 810a3de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a3fa:	e021      	b.n	810a440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810a3fc:	697b      	ldr	r3, [r7, #20]
 810a3fe:	ee07 3a90 	vmov	s15, r3
 810a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a406:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810a4fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a40e:	4b37      	ldr	r3, [pc, #220]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a416:	ee07 3a90 	vmov	s15, r3
 810a41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a41e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a422:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a436:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a43a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a43e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810a440:	4b2a      	ldr	r3, [pc, #168]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a444:	0a5b      	lsrs	r3, r3, #9
 810a446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a44a:	ee07 3a90 	vmov	s15, r3
 810a44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a456:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a45a:	edd7 6a07 	vldr	s13, [r7, #28]
 810a45e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a466:	ee17 2a90 	vmov	r2, s15
 810a46a:	687b      	ldr	r3, [r7, #4]
 810a46c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810a46e:	4b1f      	ldr	r3, [pc, #124]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a472:	0c1b      	lsrs	r3, r3, #16
 810a474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a478:	ee07 3a90 	vmov	s15, r3
 810a47c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a484:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a488:	edd7 6a07 	vldr	s13, [r7, #28]
 810a48c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a494:	ee17 2a90 	vmov	r2, s15
 810a498:	687b      	ldr	r3, [r7, #4]
 810a49a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810a49c:	4b13      	ldr	r3, [pc, #76]	@ (810a4ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a4a0:	0e1b      	lsrs	r3, r3, #24
 810a4a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a4a6:	ee07 3a90 	vmov	s15, r3
 810a4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a4ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a4b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a4b6:	edd7 6a07 	vldr	s13, [r7, #28]
 810a4ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a4be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a4c2:	ee17 2a90 	vmov	r2, s15
 810a4c6:	687b      	ldr	r3, [r7, #4]
 810a4c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810a4ca:	e008      	b.n	810a4de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810a4cc:	687b      	ldr	r3, [r7, #4]
 810a4ce:	2200      	movs	r2, #0
 810a4d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810a4d2:	687b      	ldr	r3, [r7, #4]
 810a4d4:	2200      	movs	r2, #0
 810a4d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810a4d8:	687b      	ldr	r3, [r7, #4]
 810a4da:	2200      	movs	r2, #0
 810a4dc:	609a      	str	r2, [r3, #8]
}
 810a4de:	bf00      	nop
 810a4e0:	3724      	adds	r7, #36	@ 0x24
 810a4e2:	46bd      	mov	sp, r7
 810a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4e8:	4770      	bx	lr
 810a4ea:	bf00      	nop
 810a4ec:	58024400 	.word	0x58024400
 810a4f0:	03d09000 	.word	0x03d09000
 810a4f4:	46000000 	.word	0x46000000
 810a4f8:	4c742400 	.word	0x4c742400
 810a4fc:	4a742400 	.word	0x4a742400
 810a500:	4af42400 	.word	0x4af42400

0810a504 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810a504:	b480      	push	{r7}
 810a506:	b089      	sub	sp, #36	@ 0x24
 810a508:	af00      	add	r7, sp, #0
 810a50a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a50c:	4ba1      	ldr	r3, [pc, #644]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a510:	f003 0303 	and.w	r3, r3, #3
 810a514:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810a516:	4b9f      	ldr	r3, [pc, #636]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a51a:	0d1b      	lsrs	r3, r3, #20
 810a51c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a520:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810a522:	4b9c      	ldr	r3, [pc, #624]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a526:	0a1b      	lsrs	r3, r3, #8
 810a528:	f003 0301 	and.w	r3, r3, #1
 810a52c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810a52e:	4b99      	ldr	r3, [pc, #612]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a532:	08db      	lsrs	r3, r3, #3
 810a534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a538:	693a      	ldr	r2, [r7, #16]
 810a53a:	fb02 f303 	mul.w	r3, r2, r3
 810a53e:	ee07 3a90 	vmov	s15, r3
 810a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810a54a:	697b      	ldr	r3, [r7, #20]
 810a54c:	2b00      	cmp	r3, #0
 810a54e:	f000 8111 	beq.w	810a774 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810a552:	69bb      	ldr	r3, [r7, #24]
 810a554:	2b02      	cmp	r3, #2
 810a556:	f000 8083 	beq.w	810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810a55a:	69bb      	ldr	r3, [r7, #24]
 810a55c:	2b02      	cmp	r3, #2
 810a55e:	f200 80a1 	bhi.w	810a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810a562:	69bb      	ldr	r3, [r7, #24]
 810a564:	2b00      	cmp	r3, #0
 810a566:	d003      	beq.n	810a570 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810a568:	69bb      	ldr	r3, [r7, #24]
 810a56a:	2b01      	cmp	r3, #1
 810a56c:	d056      	beq.n	810a61c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810a56e:	e099      	b.n	810a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a570:	4b88      	ldr	r3, [pc, #544]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a572:	681b      	ldr	r3, [r3, #0]
 810a574:	f003 0320 	and.w	r3, r3, #32
 810a578:	2b00      	cmp	r3, #0
 810a57a:	d02d      	beq.n	810a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a57c:	4b85      	ldr	r3, [pc, #532]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a57e:	681b      	ldr	r3, [r3, #0]
 810a580:	08db      	lsrs	r3, r3, #3
 810a582:	f003 0303 	and.w	r3, r3, #3
 810a586:	4a84      	ldr	r2, [pc, #528]	@ (810a798 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810a588:	fa22 f303 	lsr.w	r3, r2, r3
 810a58c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a58e:	68bb      	ldr	r3, [r7, #8]
 810a590:	ee07 3a90 	vmov	s15, r3
 810a594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a598:	697b      	ldr	r3, [r7, #20]
 810a59a:	ee07 3a90 	vmov	s15, r3
 810a59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a5a6:	4b7b      	ldr	r3, [pc, #492]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a5ae:	ee07 3a90 	vmov	s15, r3
 810a5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a5ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810a79c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a5c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810a5d6:	e087      	b.n	810a6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a5d8:	697b      	ldr	r3, [r7, #20]
 810a5da:	ee07 3a90 	vmov	s15, r3
 810a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a5e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810a7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810a5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a5ea:	4b6a      	ldr	r3, [pc, #424]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a5f2:	ee07 3a90 	vmov	s15, r3
 810a5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 810a5fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810a79c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a60a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a612:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a61a:	e065      	b.n	810a6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a61c:	697b      	ldr	r3, [r7, #20]
 810a61e:	ee07 3a90 	vmov	s15, r3
 810a622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a626:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810a7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a62e:	4b59      	ldr	r3, [pc, #356]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a636:	ee07 3a90 	vmov	s15, r3
 810a63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a63e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a642:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810a79c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a64e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a656:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a65e:	e043      	b.n	810a6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a660:	697b      	ldr	r3, [r7, #20]
 810a662:	ee07 3a90 	vmov	s15, r3
 810a666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a66a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810a7a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810a66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a672:	4b48      	ldr	r3, [pc, #288]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a67a:	ee07 3a90 	vmov	s15, r3
 810a67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a682:	ed97 6a03 	vldr	s12, [r7, #12]
 810a686:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810a79c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a69e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a6a2:	e021      	b.n	810a6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810a6a4:	697b      	ldr	r3, [r7, #20]
 810a6a6:	ee07 3a90 	vmov	s15, r3
 810a6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a6ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810a7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a6b6:	4b37      	ldr	r3, [pc, #220]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a6be:	ee07 3a90 	vmov	s15, r3
 810a6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a6ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810a79c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a6e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810a6e8:	4b2a      	ldr	r3, [pc, #168]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a6ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a6ec:	0a5b      	lsrs	r3, r3, #9
 810a6ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a6f2:	ee07 3a90 	vmov	s15, r3
 810a6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a6fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a6fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a702:	edd7 6a07 	vldr	s13, [r7, #28]
 810a706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a70a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a70e:	ee17 2a90 	vmov	r2, s15
 810a712:	687b      	ldr	r3, [r7, #4]
 810a714:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810a716:	4b1f      	ldr	r3, [pc, #124]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a71a:	0c1b      	lsrs	r3, r3, #16
 810a71c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a720:	ee07 3a90 	vmov	s15, r3
 810a724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a728:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a72c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a730:	edd7 6a07 	vldr	s13, [r7, #28]
 810a734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a73c:	ee17 2a90 	vmov	r2, s15
 810a740:	687b      	ldr	r3, [r7, #4]
 810a742:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810a744:	4b13      	ldr	r3, [pc, #76]	@ (810a794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a748:	0e1b      	lsrs	r3, r3, #24
 810a74a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a74e:	ee07 3a90 	vmov	s15, r3
 810a752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a756:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a75e:	edd7 6a07 	vldr	s13, [r7, #28]
 810a762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a76a:	ee17 2a90 	vmov	r2, s15
 810a76e:	687b      	ldr	r3, [r7, #4]
 810a770:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810a772:	e008      	b.n	810a786 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810a774:	687b      	ldr	r3, [r7, #4]
 810a776:	2200      	movs	r2, #0
 810a778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810a77a:	687b      	ldr	r3, [r7, #4]
 810a77c:	2200      	movs	r2, #0
 810a77e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810a780:	687b      	ldr	r3, [r7, #4]
 810a782:	2200      	movs	r2, #0
 810a784:	609a      	str	r2, [r3, #8]
}
 810a786:	bf00      	nop
 810a788:	3724      	adds	r7, #36	@ 0x24
 810a78a:	46bd      	mov	sp, r7
 810a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a790:	4770      	bx	lr
 810a792:	bf00      	nop
 810a794:	58024400 	.word	0x58024400
 810a798:	03d09000 	.word	0x03d09000
 810a79c:	46000000 	.word	0x46000000
 810a7a0:	4c742400 	.word	0x4c742400
 810a7a4:	4a742400 	.word	0x4a742400
 810a7a8:	4af42400 	.word	0x4af42400

0810a7ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810a7ac:	b480      	push	{r7}
 810a7ae:	b089      	sub	sp, #36	@ 0x24
 810a7b0:	af00      	add	r7, sp, #0
 810a7b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a7b4:	4ba0      	ldr	r3, [pc, #640]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a7b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a7b8:	f003 0303 	and.w	r3, r3, #3
 810a7bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810a7be:	4b9e      	ldr	r3, [pc, #632]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a7c2:	091b      	lsrs	r3, r3, #4
 810a7c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a7c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810a7ca:	4b9b      	ldr	r3, [pc, #620]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a7ce:	f003 0301 	and.w	r3, r3, #1
 810a7d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810a7d4:	4b98      	ldr	r3, [pc, #608]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a7d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a7d8:	08db      	lsrs	r3, r3, #3
 810a7da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a7de:	693a      	ldr	r2, [r7, #16]
 810a7e0:	fb02 f303 	mul.w	r3, r2, r3
 810a7e4:	ee07 3a90 	vmov	s15, r3
 810a7e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a7ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810a7f0:	697b      	ldr	r3, [r7, #20]
 810a7f2:	2b00      	cmp	r3, #0
 810a7f4:	f000 8111 	beq.w	810aa1a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810a7f8:	69bb      	ldr	r3, [r7, #24]
 810a7fa:	2b02      	cmp	r3, #2
 810a7fc:	f000 8083 	beq.w	810a906 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810a800:	69bb      	ldr	r3, [r7, #24]
 810a802:	2b02      	cmp	r3, #2
 810a804:	f200 80a1 	bhi.w	810a94a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810a808:	69bb      	ldr	r3, [r7, #24]
 810a80a:	2b00      	cmp	r3, #0
 810a80c:	d003      	beq.n	810a816 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810a80e:	69bb      	ldr	r3, [r7, #24]
 810a810:	2b01      	cmp	r3, #1
 810a812:	d056      	beq.n	810a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810a814:	e099      	b.n	810a94a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a816:	4b88      	ldr	r3, [pc, #544]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a818:	681b      	ldr	r3, [r3, #0]
 810a81a:	f003 0320 	and.w	r3, r3, #32
 810a81e:	2b00      	cmp	r3, #0
 810a820:	d02d      	beq.n	810a87e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a822:	4b85      	ldr	r3, [pc, #532]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a824:	681b      	ldr	r3, [r3, #0]
 810a826:	08db      	lsrs	r3, r3, #3
 810a828:	f003 0303 	and.w	r3, r3, #3
 810a82c:	4a83      	ldr	r2, [pc, #524]	@ (810aa3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810a82e:	fa22 f303 	lsr.w	r3, r2, r3
 810a832:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a834:	68bb      	ldr	r3, [r7, #8]
 810a836:	ee07 3a90 	vmov	s15, r3
 810a83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a83e:	697b      	ldr	r3, [r7, #20]
 810a840:	ee07 3a90 	vmov	s15, r3
 810a844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a84c:	4b7a      	ldr	r3, [pc, #488]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a854:	ee07 3a90 	vmov	s15, r3
 810a858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a85c:	ed97 6a03 	vldr	s12, [r7, #12]
 810a860:	eddf 5a77 	vldr	s11, [pc, #476]	@ 810aa40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a86c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a874:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a878:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810a87c:	e087      	b.n	810a98e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a87e:	697b      	ldr	r3, [r7, #20]
 810a880:	ee07 3a90 	vmov	s15, r3
 810a884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a888:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810aa44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810a88c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a890:	4b69      	ldr	r3, [pc, #420]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a898:	ee07 3a90 	vmov	s15, r3
 810a89c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a8a0:	ed97 6a03 	vldr	s12, [r7, #12]
 810a8a4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 810aa40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a8a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a8ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a8b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a8b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a8b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a8bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a8c0:	e065      	b.n	810a98e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a8c2:	697b      	ldr	r3, [r7, #20]
 810a8c4:	ee07 3a90 	vmov	s15, r3
 810a8c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a8cc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810aa48 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810a8d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a8d4:	4b58      	ldr	r3, [pc, #352]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a8dc:	ee07 3a90 	vmov	s15, r3
 810a8e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a8e4:	ed97 6a03 	vldr	s12, [r7, #12]
 810a8e8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 810aa40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a8ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a8f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a8f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a8f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a904:	e043      	b.n	810a98e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a906:	697b      	ldr	r3, [r7, #20]
 810a908:	ee07 3a90 	vmov	s15, r3
 810a90c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a910:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 810aa4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810a914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a918:	4b47      	ldr	r3, [pc, #284]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a920:	ee07 3a90 	vmov	s15, r3
 810a924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a928:	ed97 6a03 	vldr	s12, [r7, #12]
 810a92c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 810aa40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a93c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a940:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a944:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a948:	e021      	b.n	810a98e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a94a:	697b      	ldr	r3, [r7, #20]
 810a94c:	ee07 3a90 	vmov	s15, r3
 810a950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a954:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810aa44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810a958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a95c:	4b36      	ldr	r3, [pc, #216]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a964:	ee07 3a90 	vmov	s15, r3
 810a968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a96c:	ed97 6a03 	vldr	s12, [r7, #12]
 810a970:	eddf 5a33 	vldr	s11, [pc, #204]	@ 810aa40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810a974:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a978:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a97c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a984:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a988:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810a98c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810a98e:	4b2a      	ldr	r3, [pc, #168]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a992:	0a5b      	lsrs	r3, r3, #9
 810a994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a998:	ee07 3a90 	vmov	s15, r3
 810a99c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a9a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a9a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a9a8:	edd7 6a07 	vldr	s13, [r7, #28]
 810a9ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a9b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a9b4:	ee17 2a90 	vmov	r2, s15
 810a9b8:	687b      	ldr	r3, [r7, #4]
 810a9ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810a9bc:	4b1e      	ldr	r3, [pc, #120]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a9c0:	0c1b      	lsrs	r3, r3, #16
 810a9c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a9c6:	ee07 3a90 	vmov	s15, r3
 810a9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a9ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810a9d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a9d6:	edd7 6a07 	vldr	s13, [r7, #28]
 810a9da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a9de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a9e2:	ee17 2a90 	vmov	r2, s15
 810a9e6:	687b      	ldr	r3, [r7, #4]
 810a9e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810a9ea:	4b13      	ldr	r3, [pc, #76]	@ (810aa38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810a9ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a9ee:	0e1b      	lsrs	r3, r3, #24
 810a9f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a9f4:	ee07 3a90 	vmov	s15, r3
 810a9f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a9fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810aa00:	ee37 7a87 	vadd.f32	s14, s15, s14
 810aa04:	edd7 6a07 	vldr	s13, [r7, #28]
 810aa08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810aa0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810aa10:	ee17 2a90 	vmov	r2, s15
 810aa14:	687b      	ldr	r3, [r7, #4]
 810aa16:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810aa18:	e008      	b.n	810aa2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810aa1a:	687b      	ldr	r3, [r7, #4]
 810aa1c:	2200      	movs	r2, #0
 810aa1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810aa20:	687b      	ldr	r3, [r7, #4]
 810aa22:	2200      	movs	r2, #0
 810aa24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	2200      	movs	r2, #0
 810aa2a:	609a      	str	r2, [r3, #8]
}
 810aa2c:	bf00      	nop
 810aa2e:	3724      	adds	r7, #36	@ 0x24
 810aa30:	46bd      	mov	sp, r7
 810aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa36:	4770      	bx	lr
 810aa38:	58024400 	.word	0x58024400
 810aa3c:	03d09000 	.word	0x03d09000
 810aa40:	46000000 	.word	0x46000000
 810aa44:	4c742400 	.word	0x4c742400
 810aa48:	4a742400 	.word	0x4a742400
 810aa4c:	4af42400 	.word	0x4af42400

0810aa50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810aa50:	b580      	push	{r7, lr}
 810aa52:	b084      	sub	sp, #16
 810aa54:	af00      	add	r7, sp, #0
 810aa56:	6078      	str	r0, [r7, #4]
 810aa58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810aa5a:	2300      	movs	r3, #0
 810aa5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810aa5e:	4b54      	ldr	r3, [pc, #336]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aa60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aa62:	f003 0303 	and.w	r3, r3, #3
 810aa66:	2b03      	cmp	r3, #3
 810aa68:	d101      	bne.n	810aa6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810aa6a:	2301      	movs	r3, #1
 810aa6c:	e09b      	b.n	810aba6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810aa6e:	4b50      	ldr	r3, [pc, #320]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aa70:	681b      	ldr	r3, [r3, #0]
 810aa72:	4a4f      	ldr	r2, [pc, #316]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aa74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810aa78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810aa7a:	f7f9 fe4b 	bl	8104714 <HAL_GetTick>
 810aa7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810aa80:	e008      	b.n	810aa94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810aa82:	f7f9 fe47 	bl	8104714 <HAL_GetTick>
 810aa86:	4602      	mov	r2, r0
 810aa88:	68bb      	ldr	r3, [r7, #8]
 810aa8a:	1ad3      	subs	r3, r2, r3
 810aa8c:	2b02      	cmp	r3, #2
 810aa8e:	d901      	bls.n	810aa94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810aa90:	2303      	movs	r3, #3
 810aa92:	e088      	b.n	810aba6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810aa94:	4b46      	ldr	r3, [pc, #280]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aa96:	681b      	ldr	r3, [r3, #0]
 810aa98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810aa9c:	2b00      	cmp	r3, #0
 810aa9e:	d1f0      	bne.n	810aa82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810aaa0:	4b43      	ldr	r3, [pc, #268]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aaa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aaa4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810aaa8:	687b      	ldr	r3, [r7, #4]
 810aaaa:	681b      	ldr	r3, [r3, #0]
 810aaac:	031b      	lsls	r3, r3, #12
 810aaae:	4940      	ldr	r1, [pc, #256]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aab0:	4313      	orrs	r3, r2
 810aab2:	628b      	str	r3, [r1, #40]	@ 0x28
 810aab4:	687b      	ldr	r3, [r7, #4]
 810aab6:	685b      	ldr	r3, [r3, #4]
 810aab8:	3b01      	subs	r3, #1
 810aaba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810aabe:	687b      	ldr	r3, [r7, #4]
 810aac0:	689b      	ldr	r3, [r3, #8]
 810aac2:	3b01      	subs	r3, #1
 810aac4:	025b      	lsls	r3, r3, #9
 810aac6:	b29b      	uxth	r3, r3
 810aac8:	431a      	orrs	r2, r3
 810aaca:	687b      	ldr	r3, [r7, #4]
 810aacc:	68db      	ldr	r3, [r3, #12]
 810aace:	3b01      	subs	r3, #1
 810aad0:	041b      	lsls	r3, r3, #16
 810aad2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810aad6:	431a      	orrs	r2, r3
 810aad8:	687b      	ldr	r3, [r7, #4]
 810aada:	691b      	ldr	r3, [r3, #16]
 810aadc:	3b01      	subs	r3, #1
 810aade:	061b      	lsls	r3, r3, #24
 810aae0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810aae4:	4932      	ldr	r1, [pc, #200]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aae6:	4313      	orrs	r3, r2
 810aae8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810aaea:	4b31      	ldr	r3, [pc, #196]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aaee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810aaf2:	687b      	ldr	r3, [r7, #4]
 810aaf4:	695b      	ldr	r3, [r3, #20]
 810aaf6:	492e      	ldr	r1, [pc, #184]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aaf8:	4313      	orrs	r3, r2
 810aafa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810aafc:	4b2c      	ldr	r3, [pc, #176]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810aafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab00:	f023 0220 	bic.w	r2, r3, #32
 810ab04:	687b      	ldr	r3, [r7, #4]
 810ab06:	699b      	ldr	r3, [r3, #24]
 810ab08:	4929      	ldr	r1, [pc, #164]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab0a:	4313      	orrs	r3, r2
 810ab0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810ab0e:	4b28      	ldr	r3, [pc, #160]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab12:	4a27      	ldr	r2, [pc, #156]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab14:	f023 0310 	bic.w	r3, r3, #16
 810ab18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810ab1a:	4b25      	ldr	r3, [pc, #148]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ab1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810ab22:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810ab26:	687a      	ldr	r2, [r7, #4]
 810ab28:	69d2      	ldr	r2, [r2, #28]
 810ab2a:	00d2      	lsls	r2, r2, #3
 810ab2c:	4920      	ldr	r1, [pc, #128]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab2e:	4313      	orrs	r3, r2
 810ab30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810ab32:	4b1f      	ldr	r3, [pc, #124]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab36:	4a1e      	ldr	r2, [pc, #120]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab38:	f043 0310 	orr.w	r3, r3, #16
 810ab3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810ab3e:	683b      	ldr	r3, [r7, #0]
 810ab40:	2b00      	cmp	r3, #0
 810ab42:	d106      	bne.n	810ab52 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810ab44:	4b1a      	ldr	r3, [pc, #104]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab48:	4a19      	ldr	r2, [pc, #100]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810ab4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810ab50:	e00f      	b.n	810ab72 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810ab52:	683b      	ldr	r3, [r7, #0]
 810ab54:	2b01      	cmp	r3, #1
 810ab56:	d106      	bne.n	810ab66 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810ab58:	4b15      	ldr	r3, [pc, #84]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab5c:	4a14      	ldr	r2, [pc, #80]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810ab62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810ab64:	e005      	b.n	810ab72 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810ab66:	4b12      	ldr	r3, [pc, #72]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab6a:	4a11      	ldr	r2, [pc, #68]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810ab70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810ab72:	4b0f      	ldr	r3, [pc, #60]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab74:	681b      	ldr	r3, [r3, #0]
 810ab76:	4a0e      	ldr	r2, [pc, #56]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810ab7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810ab7e:	f7f9 fdc9 	bl	8104714 <HAL_GetTick>
 810ab82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810ab84:	e008      	b.n	810ab98 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810ab86:	f7f9 fdc5 	bl	8104714 <HAL_GetTick>
 810ab8a:	4602      	mov	r2, r0
 810ab8c:	68bb      	ldr	r3, [r7, #8]
 810ab8e:	1ad3      	subs	r3, r2, r3
 810ab90:	2b02      	cmp	r3, #2
 810ab92:	d901      	bls.n	810ab98 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810ab94:	2303      	movs	r3, #3
 810ab96:	e006      	b.n	810aba6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810ab98:	4b05      	ldr	r3, [pc, #20]	@ (810abb0 <RCCEx_PLL2_Config+0x160>)
 810ab9a:	681b      	ldr	r3, [r3, #0]
 810ab9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810aba0:	2b00      	cmp	r3, #0
 810aba2:	d0f0      	beq.n	810ab86 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810aba4:	7bfb      	ldrb	r3, [r7, #15]
}
 810aba6:	4618      	mov	r0, r3
 810aba8:	3710      	adds	r7, #16
 810abaa:	46bd      	mov	sp, r7
 810abac:	bd80      	pop	{r7, pc}
 810abae:	bf00      	nop
 810abb0:	58024400 	.word	0x58024400

0810abb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810abb4:	b580      	push	{r7, lr}
 810abb6:	b084      	sub	sp, #16
 810abb8:	af00      	add	r7, sp, #0
 810abba:	6078      	str	r0, [r7, #4]
 810abbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810abbe:	2300      	movs	r3, #0
 810abc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810abc2:	4b54      	ldr	r3, [pc, #336]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810abc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810abc6:	f003 0303 	and.w	r3, r3, #3
 810abca:	2b03      	cmp	r3, #3
 810abcc:	d101      	bne.n	810abd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810abce:	2301      	movs	r3, #1
 810abd0:	e09b      	b.n	810ad0a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810abd2:	4b50      	ldr	r3, [pc, #320]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810abd4:	681b      	ldr	r3, [r3, #0]
 810abd6:	4a4f      	ldr	r2, [pc, #316]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810abd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810abdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810abde:	f7f9 fd99 	bl	8104714 <HAL_GetTick>
 810abe2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810abe4:	e008      	b.n	810abf8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810abe6:	f7f9 fd95 	bl	8104714 <HAL_GetTick>
 810abea:	4602      	mov	r2, r0
 810abec:	68bb      	ldr	r3, [r7, #8]
 810abee:	1ad3      	subs	r3, r2, r3
 810abf0:	2b02      	cmp	r3, #2
 810abf2:	d901      	bls.n	810abf8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810abf4:	2303      	movs	r3, #3
 810abf6:	e088      	b.n	810ad0a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810abf8:	4b46      	ldr	r3, [pc, #280]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810abfa:	681b      	ldr	r3, [r3, #0]
 810abfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ac00:	2b00      	cmp	r3, #0
 810ac02:	d1f0      	bne.n	810abe6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810ac04:	4b43      	ldr	r3, [pc, #268]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ac08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810ac0c:	687b      	ldr	r3, [r7, #4]
 810ac0e:	681b      	ldr	r3, [r3, #0]
 810ac10:	051b      	lsls	r3, r3, #20
 810ac12:	4940      	ldr	r1, [pc, #256]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac14:	4313      	orrs	r3, r2
 810ac16:	628b      	str	r3, [r1, #40]	@ 0x28
 810ac18:	687b      	ldr	r3, [r7, #4]
 810ac1a:	685b      	ldr	r3, [r3, #4]
 810ac1c:	3b01      	subs	r3, #1
 810ac1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810ac22:	687b      	ldr	r3, [r7, #4]
 810ac24:	689b      	ldr	r3, [r3, #8]
 810ac26:	3b01      	subs	r3, #1
 810ac28:	025b      	lsls	r3, r3, #9
 810ac2a:	b29b      	uxth	r3, r3
 810ac2c:	431a      	orrs	r2, r3
 810ac2e:	687b      	ldr	r3, [r7, #4]
 810ac30:	68db      	ldr	r3, [r3, #12]
 810ac32:	3b01      	subs	r3, #1
 810ac34:	041b      	lsls	r3, r3, #16
 810ac36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810ac3a:	431a      	orrs	r2, r3
 810ac3c:	687b      	ldr	r3, [r7, #4]
 810ac3e:	691b      	ldr	r3, [r3, #16]
 810ac40:	3b01      	subs	r3, #1
 810ac42:	061b      	lsls	r3, r3, #24
 810ac44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810ac48:	4932      	ldr	r1, [pc, #200]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac4a:	4313      	orrs	r3, r2
 810ac4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810ac4e:	4b31      	ldr	r3, [pc, #196]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ac52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810ac56:	687b      	ldr	r3, [r7, #4]
 810ac58:	695b      	ldr	r3, [r3, #20]
 810ac5a:	492e      	ldr	r1, [pc, #184]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac5c:	4313      	orrs	r3, r2
 810ac5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810ac60:	4b2c      	ldr	r3, [pc, #176]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ac64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810ac68:	687b      	ldr	r3, [r7, #4]
 810ac6a:	699b      	ldr	r3, [r3, #24]
 810ac6c:	4929      	ldr	r1, [pc, #164]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac6e:	4313      	orrs	r3, r2
 810ac70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810ac72:	4b28      	ldr	r3, [pc, #160]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ac76:	4a27      	ldr	r2, [pc, #156]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810ac7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810ac7e:	4b25      	ldr	r3, [pc, #148]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810ac82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810ac86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810ac8a:	687a      	ldr	r2, [r7, #4]
 810ac8c:	69d2      	ldr	r2, [r2, #28]
 810ac8e:	00d2      	lsls	r2, r2, #3
 810ac90:	4920      	ldr	r1, [pc, #128]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac92:	4313      	orrs	r3, r2
 810ac94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810ac96:	4b1f      	ldr	r3, [pc, #124]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ac9a:	4a1e      	ldr	r2, [pc, #120]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810ac9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810aca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810aca2:	683b      	ldr	r3, [r7, #0]
 810aca4:	2b00      	cmp	r3, #0
 810aca6:	d106      	bne.n	810acb6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810aca8:	4b1a      	ldr	r3, [pc, #104]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810acaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810acac:	4a19      	ldr	r2, [pc, #100]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810acae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810acb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810acb4:	e00f      	b.n	810acd6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810acb6:	683b      	ldr	r3, [r7, #0]
 810acb8:	2b01      	cmp	r3, #1
 810acba:	d106      	bne.n	810acca <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810acbc:	4b15      	ldr	r3, [pc, #84]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810acbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810acc0:	4a14      	ldr	r2, [pc, #80]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810acc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810acc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810acc8:	e005      	b.n	810acd6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810acca:	4b12      	ldr	r3, [pc, #72]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810accc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810acce:	4a11      	ldr	r2, [pc, #68]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810acd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810acd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810acd6:	4b0f      	ldr	r3, [pc, #60]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810acd8:	681b      	ldr	r3, [r3, #0]
 810acda:	4a0e      	ldr	r2, [pc, #56]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810acdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810ace0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810ace2:	f7f9 fd17 	bl	8104714 <HAL_GetTick>
 810ace6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810ace8:	e008      	b.n	810acfc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810acea:	f7f9 fd13 	bl	8104714 <HAL_GetTick>
 810acee:	4602      	mov	r2, r0
 810acf0:	68bb      	ldr	r3, [r7, #8]
 810acf2:	1ad3      	subs	r3, r2, r3
 810acf4:	2b02      	cmp	r3, #2
 810acf6:	d901      	bls.n	810acfc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810acf8:	2303      	movs	r3, #3
 810acfa:	e006      	b.n	810ad0a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810acfc:	4b05      	ldr	r3, [pc, #20]	@ (810ad14 <RCCEx_PLL3_Config+0x160>)
 810acfe:	681b      	ldr	r3, [r3, #0]
 810ad00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ad04:	2b00      	cmp	r3, #0
 810ad06:	d0f0      	beq.n	810acea <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810ad08:	7bfb      	ldrb	r3, [r7, #15]
}
 810ad0a:	4618      	mov	r0, r3
 810ad0c:	3710      	adds	r7, #16
 810ad0e:	46bd      	mov	sp, r7
 810ad10:	bd80      	pop	{r7, pc}
 810ad12:	bf00      	nop
 810ad14:	58024400 	.word	0x58024400

0810ad18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810ad18:	b580      	push	{r7, lr}
 810ad1a:	b082      	sub	sp, #8
 810ad1c:	af00      	add	r7, sp, #0
 810ad1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ad20:	687b      	ldr	r3, [r7, #4]
 810ad22:	2b00      	cmp	r3, #0
 810ad24:	d101      	bne.n	810ad2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810ad26:	2301      	movs	r3, #1
 810ad28:	e049      	b.n	810adbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ad2a:	687b      	ldr	r3, [r7, #4]
 810ad2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ad30:	b2db      	uxtb	r3, r3
 810ad32:	2b00      	cmp	r3, #0
 810ad34:	d106      	bne.n	810ad44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ad36:	687b      	ldr	r3, [r7, #4]
 810ad38:	2200      	movs	r2, #0
 810ad3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810ad3e:	6878      	ldr	r0, [r7, #4]
 810ad40:	f7f9 f8d4 	bl	8103eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ad44:	687b      	ldr	r3, [r7, #4]
 810ad46:	2202      	movs	r2, #2
 810ad48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ad4c:	687b      	ldr	r3, [r7, #4]
 810ad4e:	681a      	ldr	r2, [r3, #0]
 810ad50:	687b      	ldr	r3, [r7, #4]
 810ad52:	3304      	adds	r3, #4
 810ad54:	4619      	mov	r1, r3
 810ad56:	4610      	mov	r0, r2
 810ad58:	f000 fe70 	bl	810ba3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ad5c:	687b      	ldr	r3, [r7, #4]
 810ad5e:	2201      	movs	r2, #1
 810ad60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ad64:	687b      	ldr	r3, [r7, #4]
 810ad66:	2201      	movs	r2, #1
 810ad68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	2201      	movs	r2, #1
 810ad70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ad74:	687b      	ldr	r3, [r7, #4]
 810ad76:	2201      	movs	r2, #1
 810ad78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ad7c:	687b      	ldr	r3, [r7, #4]
 810ad7e:	2201      	movs	r2, #1
 810ad80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ad84:	687b      	ldr	r3, [r7, #4]
 810ad86:	2201      	movs	r2, #1
 810ad88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ad8c:	687b      	ldr	r3, [r7, #4]
 810ad8e:	2201      	movs	r2, #1
 810ad90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ad94:	687b      	ldr	r3, [r7, #4]
 810ad96:	2201      	movs	r2, #1
 810ad98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810ad9c:	687b      	ldr	r3, [r7, #4]
 810ad9e:	2201      	movs	r2, #1
 810ada0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810ada4:	687b      	ldr	r3, [r7, #4]
 810ada6:	2201      	movs	r2, #1
 810ada8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810adac:	687b      	ldr	r3, [r7, #4]
 810adae:	2201      	movs	r2, #1
 810adb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810adb4:	687b      	ldr	r3, [r7, #4]
 810adb6:	2201      	movs	r2, #1
 810adb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810adbc:	2300      	movs	r3, #0
}
 810adbe:	4618      	mov	r0, r3
 810adc0:	3708      	adds	r7, #8
 810adc2:	46bd      	mov	sp, r7
 810adc4:	bd80      	pop	{r7, pc}
	...

0810adc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 810adc8:	b480      	push	{r7}
 810adca:	b085      	sub	sp, #20
 810adcc:	af00      	add	r7, sp, #0
 810adce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810add6:	b2db      	uxtb	r3, r3
 810add8:	2b01      	cmp	r3, #1
 810adda:	d001      	beq.n	810ade0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 810addc:	2301      	movs	r3, #1
 810adde:	e04c      	b.n	810ae7a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ade0:	687b      	ldr	r3, [r7, #4]
 810ade2:	2202      	movs	r2, #2
 810ade4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	681b      	ldr	r3, [r3, #0]
 810adec:	4a26      	ldr	r2, [pc, #152]	@ (810ae88 <HAL_TIM_Base_Start+0xc0>)
 810adee:	4293      	cmp	r3, r2
 810adf0:	d022      	beq.n	810ae38 <HAL_TIM_Base_Start+0x70>
 810adf2:	687b      	ldr	r3, [r7, #4]
 810adf4:	681b      	ldr	r3, [r3, #0]
 810adf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810adfa:	d01d      	beq.n	810ae38 <HAL_TIM_Base_Start+0x70>
 810adfc:	687b      	ldr	r3, [r7, #4]
 810adfe:	681b      	ldr	r3, [r3, #0]
 810ae00:	4a22      	ldr	r2, [pc, #136]	@ (810ae8c <HAL_TIM_Base_Start+0xc4>)
 810ae02:	4293      	cmp	r3, r2
 810ae04:	d018      	beq.n	810ae38 <HAL_TIM_Base_Start+0x70>
 810ae06:	687b      	ldr	r3, [r7, #4]
 810ae08:	681b      	ldr	r3, [r3, #0]
 810ae0a:	4a21      	ldr	r2, [pc, #132]	@ (810ae90 <HAL_TIM_Base_Start+0xc8>)
 810ae0c:	4293      	cmp	r3, r2
 810ae0e:	d013      	beq.n	810ae38 <HAL_TIM_Base_Start+0x70>
 810ae10:	687b      	ldr	r3, [r7, #4]
 810ae12:	681b      	ldr	r3, [r3, #0]
 810ae14:	4a1f      	ldr	r2, [pc, #124]	@ (810ae94 <HAL_TIM_Base_Start+0xcc>)
 810ae16:	4293      	cmp	r3, r2
 810ae18:	d00e      	beq.n	810ae38 <HAL_TIM_Base_Start+0x70>
 810ae1a:	687b      	ldr	r3, [r7, #4]
 810ae1c:	681b      	ldr	r3, [r3, #0]
 810ae1e:	4a1e      	ldr	r2, [pc, #120]	@ (810ae98 <HAL_TIM_Base_Start+0xd0>)
 810ae20:	4293      	cmp	r3, r2
 810ae22:	d009      	beq.n	810ae38 <HAL_TIM_Base_Start+0x70>
 810ae24:	687b      	ldr	r3, [r7, #4]
 810ae26:	681b      	ldr	r3, [r3, #0]
 810ae28:	4a1c      	ldr	r2, [pc, #112]	@ (810ae9c <HAL_TIM_Base_Start+0xd4>)
 810ae2a:	4293      	cmp	r3, r2
 810ae2c:	d004      	beq.n	810ae38 <HAL_TIM_Base_Start+0x70>
 810ae2e:	687b      	ldr	r3, [r7, #4]
 810ae30:	681b      	ldr	r3, [r3, #0]
 810ae32:	4a1b      	ldr	r2, [pc, #108]	@ (810aea0 <HAL_TIM_Base_Start+0xd8>)
 810ae34:	4293      	cmp	r3, r2
 810ae36:	d115      	bne.n	810ae64 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810ae38:	687b      	ldr	r3, [r7, #4]
 810ae3a:	681b      	ldr	r3, [r3, #0]
 810ae3c:	689a      	ldr	r2, [r3, #8]
 810ae3e:	4b19      	ldr	r3, [pc, #100]	@ (810aea4 <HAL_TIM_Base_Start+0xdc>)
 810ae40:	4013      	ands	r3, r2
 810ae42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ae44:	68fb      	ldr	r3, [r7, #12]
 810ae46:	2b06      	cmp	r3, #6
 810ae48:	d015      	beq.n	810ae76 <HAL_TIM_Base_Start+0xae>
 810ae4a:	68fb      	ldr	r3, [r7, #12]
 810ae4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ae50:	d011      	beq.n	810ae76 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 810ae52:	687b      	ldr	r3, [r7, #4]
 810ae54:	681b      	ldr	r3, [r3, #0]
 810ae56:	681a      	ldr	r2, [r3, #0]
 810ae58:	687b      	ldr	r3, [r7, #4]
 810ae5a:	681b      	ldr	r3, [r3, #0]
 810ae5c:	f042 0201 	orr.w	r2, r2, #1
 810ae60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ae62:	e008      	b.n	810ae76 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810ae64:	687b      	ldr	r3, [r7, #4]
 810ae66:	681b      	ldr	r3, [r3, #0]
 810ae68:	681a      	ldr	r2, [r3, #0]
 810ae6a:	687b      	ldr	r3, [r7, #4]
 810ae6c:	681b      	ldr	r3, [r3, #0]
 810ae6e:	f042 0201 	orr.w	r2, r2, #1
 810ae72:	601a      	str	r2, [r3, #0]
 810ae74:	e000      	b.n	810ae78 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ae76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810ae78:	2300      	movs	r3, #0
}
 810ae7a:	4618      	mov	r0, r3
 810ae7c:	3714      	adds	r7, #20
 810ae7e:	46bd      	mov	sp, r7
 810ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae84:	4770      	bx	lr
 810ae86:	bf00      	nop
 810ae88:	40010000 	.word	0x40010000
 810ae8c:	40000400 	.word	0x40000400
 810ae90:	40000800 	.word	0x40000800
 810ae94:	40000c00 	.word	0x40000c00
 810ae98:	40010400 	.word	0x40010400
 810ae9c:	40001800 	.word	0x40001800
 810aea0:	40014000 	.word	0x40014000
 810aea4:	00010007 	.word	0x00010007

0810aea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810aea8:	b480      	push	{r7}
 810aeaa:	b085      	sub	sp, #20
 810aeac:	af00      	add	r7, sp, #0
 810aeae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810aeb0:	687b      	ldr	r3, [r7, #4]
 810aeb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810aeb6:	b2db      	uxtb	r3, r3
 810aeb8:	2b01      	cmp	r3, #1
 810aeba:	d001      	beq.n	810aec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810aebc:	2301      	movs	r3, #1
 810aebe:	e054      	b.n	810af6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810aec0:	687b      	ldr	r3, [r7, #4]
 810aec2:	2202      	movs	r2, #2
 810aec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810aec8:	687b      	ldr	r3, [r7, #4]
 810aeca:	681b      	ldr	r3, [r3, #0]
 810aecc:	68da      	ldr	r2, [r3, #12]
 810aece:	687b      	ldr	r3, [r7, #4]
 810aed0:	681b      	ldr	r3, [r3, #0]
 810aed2:	f042 0201 	orr.w	r2, r2, #1
 810aed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810aed8:	687b      	ldr	r3, [r7, #4]
 810aeda:	681b      	ldr	r3, [r3, #0]
 810aedc:	4a26      	ldr	r2, [pc, #152]	@ (810af78 <HAL_TIM_Base_Start_IT+0xd0>)
 810aede:	4293      	cmp	r3, r2
 810aee0:	d022      	beq.n	810af28 <HAL_TIM_Base_Start_IT+0x80>
 810aee2:	687b      	ldr	r3, [r7, #4]
 810aee4:	681b      	ldr	r3, [r3, #0]
 810aee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aeea:	d01d      	beq.n	810af28 <HAL_TIM_Base_Start_IT+0x80>
 810aeec:	687b      	ldr	r3, [r7, #4]
 810aeee:	681b      	ldr	r3, [r3, #0]
 810aef0:	4a22      	ldr	r2, [pc, #136]	@ (810af7c <HAL_TIM_Base_Start_IT+0xd4>)
 810aef2:	4293      	cmp	r3, r2
 810aef4:	d018      	beq.n	810af28 <HAL_TIM_Base_Start_IT+0x80>
 810aef6:	687b      	ldr	r3, [r7, #4]
 810aef8:	681b      	ldr	r3, [r3, #0]
 810aefa:	4a21      	ldr	r2, [pc, #132]	@ (810af80 <HAL_TIM_Base_Start_IT+0xd8>)
 810aefc:	4293      	cmp	r3, r2
 810aefe:	d013      	beq.n	810af28 <HAL_TIM_Base_Start_IT+0x80>
 810af00:	687b      	ldr	r3, [r7, #4]
 810af02:	681b      	ldr	r3, [r3, #0]
 810af04:	4a1f      	ldr	r2, [pc, #124]	@ (810af84 <HAL_TIM_Base_Start_IT+0xdc>)
 810af06:	4293      	cmp	r3, r2
 810af08:	d00e      	beq.n	810af28 <HAL_TIM_Base_Start_IT+0x80>
 810af0a:	687b      	ldr	r3, [r7, #4]
 810af0c:	681b      	ldr	r3, [r3, #0]
 810af0e:	4a1e      	ldr	r2, [pc, #120]	@ (810af88 <HAL_TIM_Base_Start_IT+0xe0>)
 810af10:	4293      	cmp	r3, r2
 810af12:	d009      	beq.n	810af28 <HAL_TIM_Base_Start_IT+0x80>
 810af14:	687b      	ldr	r3, [r7, #4]
 810af16:	681b      	ldr	r3, [r3, #0]
 810af18:	4a1c      	ldr	r2, [pc, #112]	@ (810af8c <HAL_TIM_Base_Start_IT+0xe4>)
 810af1a:	4293      	cmp	r3, r2
 810af1c:	d004      	beq.n	810af28 <HAL_TIM_Base_Start_IT+0x80>
 810af1e:	687b      	ldr	r3, [r7, #4]
 810af20:	681b      	ldr	r3, [r3, #0]
 810af22:	4a1b      	ldr	r2, [pc, #108]	@ (810af90 <HAL_TIM_Base_Start_IT+0xe8>)
 810af24:	4293      	cmp	r3, r2
 810af26:	d115      	bne.n	810af54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810af28:	687b      	ldr	r3, [r7, #4]
 810af2a:	681b      	ldr	r3, [r3, #0]
 810af2c:	689a      	ldr	r2, [r3, #8]
 810af2e:	4b19      	ldr	r3, [pc, #100]	@ (810af94 <HAL_TIM_Base_Start_IT+0xec>)
 810af30:	4013      	ands	r3, r2
 810af32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810af34:	68fb      	ldr	r3, [r7, #12]
 810af36:	2b06      	cmp	r3, #6
 810af38:	d015      	beq.n	810af66 <HAL_TIM_Base_Start_IT+0xbe>
 810af3a:	68fb      	ldr	r3, [r7, #12]
 810af3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810af40:	d011      	beq.n	810af66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810af42:	687b      	ldr	r3, [r7, #4]
 810af44:	681b      	ldr	r3, [r3, #0]
 810af46:	681a      	ldr	r2, [r3, #0]
 810af48:	687b      	ldr	r3, [r7, #4]
 810af4a:	681b      	ldr	r3, [r3, #0]
 810af4c:	f042 0201 	orr.w	r2, r2, #1
 810af50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810af52:	e008      	b.n	810af66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810af54:	687b      	ldr	r3, [r7, #4]
 810af56:	681b      	ldr	r3, [r3, #0]
 810af58:	681a      	ldr	r2, [r3, #0]
 810af5a:	687b      	ldr	r3, [r7, #4]
 810af5c:	681b      	ldr	r3, [r3, #0]
 810af5e:	f042 0201 	orr.w	r2, r2, #1
 810af62:	601a      	str	r2, [r3, #0]
 810af64:	e000      	b.n	810af68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810af66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810af68:	2300      	movs	r3, #0
}
 810af6a:	4618      	mov	r0, r3
 810af6c:	3714      	adds	r7, #20
 810af6e:	46bd      	mov	sp, r7
 810af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af74:	4770      	bx	lr
 810af76:	bf00      	nop
 810af78:	40010000 	.word	0x40010000
 810af7c:	40000400 	.word	0x40000400
 810af80:	40000800 	.word	0x40000800
 810af84:	40000c00 	.word	0x40000c00
 810af88:	40010400 	.word	0x40010400
 810af8c:	40001800 	.word	0x40001800
 810af90:	40014000 	.word	0x40014000
 810af94:	00010007 	.word	0x00010007

0810af98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810af98:	b580      	push	{r7, lr}
 810af9a:	b082      	sub	sp, #8
 810af9c:	af00      	add	r7, sp, #0
 810af9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810afa0:	687b      	ldr	r3, [r7, #4]
 810afa2:	2b00      	cmp	r3, #0
 810afa4:	d101      	bne.n	810afaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810afa6:	2301      	movs	r3, #1
 810afa8:	e049      	b.n	810b03e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810afaa:	687b      	ldr	r3, [r7, #4]
 810afac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810afb0:	b2db      	uxtb	r3, r3
 810afb2:	2b00      	cmp	r3, #0
 810afb4:	d106      	bne.n	810afc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810afb6:	687b      	ldr	r3, [r7, #4]
 810afb8:	2200      	movs	r2, #0
 810afba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810afbe:	6878      	ldr	r0, [r7, #4]
 810afc0:	f000 f841 	bl	810b046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810afc4:	687b      	ldr	r3, [r7, #4]
 810afc6:	2202      	movs	r2, #2
 810afc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810afcc:	687b      	ldr	r3, [r7, #4]
 810afce:	681a      	ldr	r2, [r3, #0]
 810afd0:	687b      	ldr	r3, [r7, #4]
 810afd2:	3304      	adds	r3, #4
 810afd4:	4619      	mov	r1, r3
 810afd6:	4610      	mov	r0, r2
 810afd8:	f000 fd30 	bl	810ba3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810afdc:	687b      	ldr	r3, [r7, #4]
 810afde:	2201      	movs	r2, #1
 810afe0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810afe4:	687b      	ldr	r3, [r7, #4]
 810afe6:	2201      	movs	r2, #1
 810afe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810afec:	687b      	ldr	r3, [r7, #4]
 810afee:	2201      	movs	r2, #1
 810aff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810aff4:	687b      	ldr	r3, [r7, #4]
 810aff6:	2201      	movs	r2, #1
 810aff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810affc:	687b      	ldr	r3, [r7, #4]
 810affe:	2201      	movs	r2, #1
 810b000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810b004:	687b      	ldr	r3, [r7, #4]
 810b006:	2201      	movs	r2, #1
 810b008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810b00c:	687b      	ldr	r3, [r7, #4]
 810b00e:	2201      	movs	r2, #1
 810b010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810b014:	687b      	ldr	r3, [r7, #4]
 810b016:	2201      	movs	r2, #1
 810b018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810b01c:	687b      	ldr	r3, [r7, #4]
 810b01e:	2201      	movs	r2, #1
 810b020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810b024:	687b      	ldr	r3, [r7, #4]
 810b026:	2201      	movs	r2, #1
 810b028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810b02c:	687b      	ldr	r3, [r7, #4]
 810b02e:	2201      	movs	r2, #1
 810b030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810b034:	687b      	ldr	r3, [r7, #4]
 810b036:	2201      	movs	r2, #1
 810b038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810b03c:	2300      	movs	r3, #0
}
 810b03e:	4618      	mov	r0, r3
 810b040:	3708      	adds	r7, #8
 810b042:	46bd      	mov	sp, r7
 810b044:	bd80      	pop	{r7, pc}

0810b046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810b046:	b480      	push	{r7}
 810b048:	b083      	sub	sp, #12
 810b04a:	af00      	add	r7, sp, #0
 810b04c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810b04e:	bf00      	nop
 810b050:	370c      	adds	r7, #12
 810b052:	46bd      	mov	sp, r7
 810b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b058:	4770      	bx	lr
	...

0810b05c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810b05c:	b580      	push	{r7, lr}
 810b05e:	b084      	sub	sp, #16
 810b060:	af00      	add	r7, sp, #0
 810b062:	6078      	str	r0, [r7, #4]
 810b064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810b066:	683b      	ldr	r3, [r7, #0]
 810b068:	2b00      	cmp	r3, #0
 810b06a:	d109      	bne.n	810b080 <HAL_TIM_PWM_Start+0x24>
 810b06c:	687b      	ldr	r3, [r7, #4]
 810b06e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 810b072:	b2db      	uxtb	r3, r3
 810b074:	2b01      	cmp	r3, #1
 810b076:	bf14      	ite	ne
 810b078:	2301      	movne	r3, #1
 810b07a:	2300      	moveq	r3, #0
 810b07c:	b2db      	uxtb	r3, r3
 810b07e:	e03c      	b.n	810b0fa <HAL_TIM_PWM_Start+0x9e>
 810b080:	683b      	ldr	r3, [r7, #0]
 810b082:	2b04      	cmp	r3, #4
 810b084:	d109      	bne.n	810b09a <HAL_TIM_PWM_Start+0x3e>
 810b086:	687b      	ldr	r3, [r7, #4]
 810b088:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 810b08c:	b2db      	uxtb	r3, r3
 810b08e:	2b01      	cmp	r3, #1
 810b090:	bf14      	ite	ne
 810b092:	2301      	movne	r3, #1
 810b094:	2300      	moveq	r3, #0
 810b096:	b2db      	uxtb	r3, r3
 810b098:	e02f      	b.n	810b0fa <HAL_TIM_PWM_Start+0x9e>
 810b09a:	683b      	ldr	r3, [r7, #0]
 810b09c:	2b08      	cmp	r3, #8
 810b09e:	d109      	bne.n	810b0b4 <HAL_TIM_PWM_Start+0x58>
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810b0a6:	b2db      	uxtb	r3, r3
 810b0a8:	2b01      	cmp	r3, #1
 810b0aa:	bf14      	ite	ne
 810b0ac:	2301      	movne	r3, #1
 810b0ae:	2300      	moveq	r3, #0
 810b0b0:	b2db      	uxtb	r3, r3
 810b0b2:	e022      	b.n	810b0fa <HAL_TIM_PWM_Start+0x9e>
 810b0b4:	683b      	ldr	r3, [r7, #0]
 810b0b6:	2b0c      	cmp	r3, #12
 810b0b8:	d109      	bne.n	810b0ce <HAL_TIM_PWM_Start+0x72>
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810b0c0:	b2db      	uxtb	r3, r3
 810b0c2:	2b01      	cmp	r3, #1
 810b0c4:	bf14      	ite	ne
 810b0c6:	2301      	movne	r3, #1
 810b0c8:	2300      	moveq	r3, #0
 810b0ca:	b2db      	uxtb	r3, r3
 810b0cc:	e015      	b.n	810b0fa <HAL_TIM_PWM_Start+0x9e>
 810b0ce:	683b      	ldr	r3, [r7, #0]
 810b0d0:	2b10      	cmp	r3, #16
 810b0d2:	d109      	bne.n	810b0e8 <HAL_TIM_PWM_Start+0x8c>
 810b0d4:	687b      	ldr	r3, [r7, #4]
 810b0d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810b0da:	b2db      	uxtb	r3, r3
 810b0dc:	2b01      	cmp	r3, #1
 810b0de:	bf14      	ite	ne
 810b0e0:	2301      	movne	r3, #1
 810b0e2:	2300      	moveq	r3, #0
 810b0e4:	b2db      	uxtb	r3, r3
 810b0e6:	e008      	b.n	810b0fa <HAL_TIM_PWM_Start+0x9e>
 810b0e8:	687b      	ldr	r3, [r7, #4]
 810b0ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 810b0ee:	b2db      	uxtb	r3, r3
 810b0f0:	2b01      	cmp	r3, #1
 810b0f2:	bf14      	ite	ne
 810b0f4:	2301      	movne	r3, #1
 810b0f6:	2300      	moveq	r3, #0
 810b0f8:	b2db      	uxtb	r3, r3
 810b0fa:	2b00      	cmp	r3, #0
 810b0fc:	d001      	beq.n	810b102 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810b0fe:	2301      	movs	r3, #1
 810b100:	e0a1      	b.n	810b246 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810b102:	683b      	ldr	r3, [r7, #0]
 810b104:	2b00      	cmp	r3, #0
 810b106:	d104      	bne.n	810b112 <HAL_TIM_PWM_Start+0xb6>
 810b108:	687b      	ldr	r3, [r7, #4]
 810b10a:	2202      	movs	r2, #2
 810b10c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810b110:	e023      	b.n	810b15a <HAL_TIM_PWM_Start+0xfe>
 810b112:	683b      	ldr	r3, [r7, #0]
 810b114:	2b04      	cmp	r3, #4
 810b116:	d104      	bne.n	810b122 <HAL_TIM_PWM_Start+0xc6>
 810b118:	687b      	ldr	r3, [r7, #4]
 810b11a:	2202      	movs	r2, #2
 810b11c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810b120:	e01b      	b.n	810b15a <HAL_TIM_PWM_Start+0xfe>
 810b122:	683b      	ldr	r3, [r7, #0]
 810b124:	2b08      	cmp	r3, #8
 810b126:	d104      	bne.n	810b132 <HAL_TIM_PWM_Start+0xd6>
 810b128:	687b      	ldr	r3, [r7, #4]
 810b12a:	2202      	movs	r2, #2
 810b12c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810b130:	e013      	b.n	810b15a <HAL_TIM_PWM_Start+0xfe>
 810b132:	683b      	ldr	r3, [r7, #0]
 810b134:	2b0c      	cmp	r3, #12
 810b136:	d104      	bne.n	810b142 <HAL_TIM_PWM_Start+0xe6>
 810b138:	687b      	ldr	r3, [r7, #4]
 810b13a:	2202      	movs	r2, #2
 810b13c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810b140:	e00b      	b.n	810b15a <HAL_TIM_PWM_Start+0xfe>
 810b142:	683b      	ldr	r3, [r7, #0]
 810b144:	2b10      	cmp	r3, #16
 810b146:	d104      	bne.n	810b152 <HAL_TIM_PWM_Start+0xf6>
 810b148:	687b      	ldr	r3, [r7, #4]
 810b14a:	2202      	movs	r2, #2
 810b14c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810b150:	e003      	b.n	810b15a <HAL_TIM_PWM_Start+0xfe>
 810b152:	687b      	ldr	r3, [r7, #4]
 810b154:	2202      	movs	r2, #2
 810b156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810b15a:	687b      	ldr	r3, [r7, #4]
 810b15c:	681b      	ldr	r3, [r3, #0]
 810b15e:	2201      	movs	r2, #1
 810b160:	6839      	ldr	r1, [r7, #0]
 810b162:	4618      	mov	r0, r3
 810b164:	f001 f882 	bl	810c26c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810b168:	687b      	ldr	r3, [r7, #4]
 810b16a:	681b      	ldr	r3, [r3, #0]
 810b16c:	4a38      	ldr	r2, [pc, #224]	@ (810b250 <HAL_TIM_PWM_Start+0x1f4>)
 810b16e:	4293      	cmp	r3, r2
 810b170:	d013      	beq.n	810b19a <HAL_TIM_PWM_Start+0x13e>
 810b172:	687b      	ldr	r3, [r7, #4]
 810b174:	681b      	ldr	r3, [r3, #0]
 810b176:	4a37      	ldr	r2, [pc, #220]	@ (810b254 <HAL_TIM_PWM_Start+0x1f8>)
 810b178:	4293      	cmp	r3, r2
 810b17a:	d00e      	beq.n	810b19a <HAL_TIM_PWM_Start+0x13e>
 810b17c:	687b      	ldr	r3, [r7, #4]
 810b17e:	681b      	ldr	r3, [r3, #0]
 810b180:	4a35      	ldr	r2, [pc, #212]	@ (810b258 <HAL_TIM_PWM_Start+0x1fc>)
 810b182:	4293      	cmp	r3, r2
 810b184:	d009      	beq.n	810b19a <HAL_TIM_PWM_Start+0x13e>
 810b186:	687b      	ldr	r3, [r7, #4]
 810b188:	681b      	ldr	r3, [r3, #0]
 810b18a:	4a34      	ldr	r2, [pc, #208]	@ (810b25c <HAL_TIM_PWM_Start+0x200>)
 810b18c:	4293      	cmp	r3, r2
 810b18e:	d004      	beq.n	810b19a <HAL_TIM_PWM_Start+0x13e>
 810b190:	687b      	ldr	r3, [r7, #4]
 810b192:	681b      	ldr	r3, [r3, #0]
 810b194:	4a32      	ldr	r2, [pc, #200]	@ (810b260 <HAL_TIM_PWM_Start+0x204>)
 810b196:	4293      	cmp	r3, r2
 810b198:	d101      	bne.n	810b19e <HAL_TIM_PWM_Start+0x142>
 810b19a:	2301      	movs	r3, #1
 810b19c:	e000      	b.n	810b1a0 <HAL_TIM_PWM_Start+0x144>
 810b19e:	2300      	movs	r3, #0
 810b1a0:	2b00      	cmp	r3, #0
 810b1a2:	d007      	beq.n	810b1b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810b1a4:	687b      	ldr	r3, [r7, #4]
 810b1a6:	681b      	ldr	r3, [r3, #0]
 810b1a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810b1aa:	687b      	ldr	r3, [r7, #4]
 810b1ac:	681b      	ldr	r3, [r3, #0]
 810b1ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810b1b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810b1b4:	687b      	ldr	r3, [r7, #4]
 810b1b6:	681b      	ldr	r3, [r3, #0]
 810b1b8:	4a25      	ldr	r2, [pc, #148]	@ (810b250 <HAL_TIM_PWM_Start+0x1f4>)
 810b1ba:	4293      	cmp	r3, r2
 810b1bc:	d022      	beq.n	810b204 <HAL_TIM_PWM_Start+0x1a8>
 810b1be:	687b      	ldr	r3, [r7, #4]
 810b1c0:	681b      	ldr	r3, [r3, #0]
 810b1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b1c6:	d01d      	beq.n	810b204 <HAL_TIM_PWM_Start+0x1a8>
 810b1c8:	687b      	ldr	r3, [r7, #4]
 810b1ca:	681b      	ldr	r3, [r3, #0]
 810b1cc:	4a25      	ldr	r2, [pc, #148]	@ (810b264 <HAL_TIM_PWM_Start+0x208>)
 810b1ce:	4293      	cmp	r3, r2
 810b1d0:	d018      	beq.n	810b204 <HAL_TIM_PWM_Start+0x1a8>
 810b1d2:	687b      	ldr	r3, [r7, #4]
 810b1d4:	681b      	ldr	r3, [r3, #0]
 810b1d6:	4a24      	ldr	r2, [pc, #144]	@ (810b268 <HAL_TIM_PWM_Start+0x20c>)
 810b1d8:	4293      	cmp	r3, r2
 810b1da:	d013      	beq.n	810b204 <HAL_TIM_PWM_Start+0x1a8>
 810b1dc:	687b      	ldr	r3, [r7, #4]
 810b1de:	681b      	ldr	r3, [r3, #0]
 810b1e0:	4a22      	ldr	r2, [pc, #136]	@ (810b26c <HAL_TIM_PWM_Start+0x210>)
 810b1e2:	4293      	cmp	r3, r2
 810b1e4:	d00e      	beq.n	810b204 <HAL_TIM_PWM_Start+0x1a8>
 810b1e6:	687b      	ldr	r3, [r7, #4]
 810b1e8:	681b      	ldr	r3, [r3, #0]
 810b1ea:	4a1a      	ldr	r2, [pc, #104]	@ (810b254 <HAL_TIM_PWM_Start+0x1f8>)
 810b1ec:	4293      	cmp	r3, r2
 810b1ee:	d009      	beq.n	810b204 <HAL_TIM_PWM_Start+0x1a8>
 810b1f0:	687b      	ldr	r3, [r7, #4]
 810b1f2:	681b      	ldr	r3, [r3, #0]
 810b1f4:	4a1e      	ldr	r2, [pc, #120]	@ (810b270 <HAL_TIM_PWM_Start+0x214>)
 810b1f6:	4293      	cmp	r3, r2
 810b1f8:	d004      	beq.n	810b204 <HAL_TIM_PWM_Start+0x1a8>
 810b1fa:	687b      	ldr	r3, [r7, #4]
 810b1fc:	681b      	ldr	r3, [r3, #0]
 810b1fe:	4a16      	ldr	r2, [pc, #88]	@ (810b258 <HAL_TIM_PWM_Start+0x1fc>)
 810b200:	4293      	cmp	r3, r2
 810b202:	d115      	bne.n	810b230 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810b204:	687b      	ldr	r3, [r7, #4]
 810b206:	681b      	ldr	r3, [r3, #0]
 810b208:	689a      	ldr	r2, [r3, #8]
 810b20a:	4b1a      	ldr	r3, [pc, #104]	@ (810b274 <HAL_TIM_PWM_Start+0x218>)
 810b20c:	4013      	ands	r3, r2
 810b20e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810b210:	68fb      	ldr	r3, [r7, #12]
 810b212:	2b06      	cmp	r3, #6
 810b214:	d015      	beq.n	810b242 <HAL_TIM_PWM_Start+0x1e6>
 810b216:	68fb      	ldr	r3, [r7, #12]
 810b218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b21c:	d011      	beq.n	810b242 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810b21e:	687b      	ldr	r3, [r7, #4]
 810b220:	681b      	ldr	r3, [r3, #0]
 810b222:	681a      	ldr	r2, [r3, #0]
 810b224:	687b      	ldr	r3, [r7, #4]
 810b226:	681b      	ldr	r3, [r3, #0]
 810b228:	f042 0201 	orr.w	r2, r2, #1
 810b22c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810b22e:	e008      	b.n	810b242 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810b230:	687b      	ldr	r3, [r7, #4]
 810b232:	681b      	ldr	r3, [r3, #0]
 810b234:	681a      	ldr	r2, [r3, #0]
 810b236:	687b      	ldr	r3, [r7, #4]
 810b238:	681b      	ldr	r3, [r3, #0]
 810b23a:	f042 0201 	orr.w	r2, r2, #1
 810b23e:	601a      	str	r2, [r3, #0]
 810b240:	e000      	b.n	810b244 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810b242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810b244:	2300      	movs	r3, #0
}
 810b246:	4618      	mov	r0, r3
 810b248:	3710      	adds	r7, #16
 810b24a:	46bd      	mov	sp, r7
 810b24c:	bd80      	pop	{r7, pc}
 810b24e:	bf00      	nop
 810b250:	40010000 	.word	0x40010000
 810b254:	40010400 	.word	0x40010400
 810b258:	40014000 	.word	0x40014000
 810b25c:	40014400 	.word	0x40014400
 810b260:	40014800 	.word	0x40014800
 810b264:	40000400 	.word	0x40000400
 810b268:	40000800 	.word	0x40000800
 810b26c:	40000c00 	.word	0x40000c00
 810b270:	40001800 	.word	0x40001800
 810b274:	00010007 	.word	0x00010007

0810b278 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 810b278:	b580      	push	{r7, lr}
 810b27a:	b086      	sub	sp, #24
 810b27c:	af00      	add	r7, sp, #0
 810b27e:	6078      	str	r0, [r7, #4]
 810b280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 810b282:	687b      	ldr	r3, [r7, #4]
 810b284:	2b00      	cmp	r3, #0
 810b286:	d101      	bne.n	810b28c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 810b288:	2301      	movs	r3, #1
 810b28a:	e097      	b.n	810b3bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 810b28c:	687b      	ldr	r3, [r7, #4]
 810b28e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810b292:	b2db      	uxtb	r3, r3
 810b294:	2b00      	cmp	r3, #0
 810b296:	d106      	bne.n	810b2a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810b298:	687b      	ldr	r3, [r7, #4]
 810b29a:	2200      	movs	r2, #0
 810b29c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 810b2a0:	6878      	ldr	r0, [r7, #4]
 810b2a2:	f7f8 fe97 	bl	8103fd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810b2a6:	687b      	ldr	r3, [r7, #4]
 810b2a8:	2202      	movs	r2, #2
 810b2aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810b2ae:	687b      	ldr	r3, [r7, #4]
 810b2b0:	681b      	ldr	r3, [r3, #0]
 810b2b2:	689b      	ldr	r3, [r3, #8]
 810b2b4:	687a      	ldr	r2, [r7, #4]
 810b2b6:	6812      	ldr	r2, [r2, #0]
 810b2b8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 810b2bc:	f023 0307 	bic.w	r3, r3, #7
 810b2c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810b2c2:	687b      	ldr	r3, [r7, #4]
 810b2c4:	681a      	ldr	r2, [r3, #0]
 810b2c6:	687b      	ldr	r3, [r7, #4]
 810b2c8:	3304      	adds	r3, #4
 810b2ca:	4619      	mov	r1, r3
 810b2cc:	4610      	mov	r0, r2
 810b2ce:	f000 fbb5 	bl	810ba3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810b2d2:	687b      	ldr	r3, [r7, #4]
 810b2d4:	681b      	ldr	r3, [r3, #0]
 810b2d6:	689b      	ldr	r3, [r3, #8]
 810b2d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810b2da:	687b      	ldr	r3, [r7, #4]
 810b2dc:	681b      	ldr	r3, [r3, #0]
 810b2de:	699b      	ldr	r3, [r3, #24]
 810b2e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810b2e2:	687b      	ldr	r3, [r7, #4]
 810b2e4:	681b      	ldr	r3, [r3, #0]
 810b2e6:	6a1b      	ldr	r3, [r3, #32]
 810b2e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810b2ea:	683b      	ldr	r3, [r7, #0]
 810b2ec:	681b      	ldr	r3, [r3, #0]
 810b2ee:	697a      	ldr	r2, [r7, #20]
 810b2f0:	4313      	orrs	r3, r2
 810b2f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 810b2f4:	693b      	ldr	r3, [r7, #16]
 810b2f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810b2fa:	f023 0303 	bic.w	r3, r3, #3
 810b2fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 810b300:	683b      	ldr	r3, [r7, #0]
 810b302:	689a      	ldr	r2, [r3, #8]
 810b304:	683b      	ldr	r3, [r7, #0]
 810b306:	699b      	ldr	r3, [r3, #24]
 810b308:	021b      	lsls	r3, r3, #8
 810b30a:	4313      	orrs	r3, r2
 810b30c:	693a      	ldr	r2, [r7, #16]
 810b30e:	4313      	orrs	r3, r2
 810b310:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810b312:	693b      	ldr	r3, [r7, #16]
 810b314:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 810b318:	f023 030c 	bic.w	r3, r3, #12
 810b31c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810b31e:	693b      	ldr	r3, [r7, #16]
 810b320:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810b324:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810b328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 810b32a:	683b      	ldr	r3, [r7, #0]
 810b32c:	68da      	ldr	r2, [r3, #12]
 810b32e:	683b      	ldr	r3, [r7, #0]
 810b330:	69db      	ldr	r3, [r3, #28]
 810b332:	021b      	lsls	r3, r3, #8
 810b334:	4313      	orrs	r3, r2
 810b336:	693a      	ldr	r2, [r7, #16]
 810b338:	4313      	orrs	r3, r2
 810b33a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 810b33c:	683b      	ldr	r3, [r7, #0]
 810b33e:	691b      	ldr	r3, [r3, #16]
 810b340:	011a      	lsls	r2, r3, #4
 810b342:	683b      	ldr	r3, [r7, #0]
 810b344:	6a1b      	ldr	r3, [r3, #32]
 810b346:	031b      	lsls	r3, r3, #12
 810b348:	4313      	orrs	r3, r2
 810b34a:	693a      	ldr	r2, [r7, #16]
 810b34c:	4313      	orrs	r3, r2
 810b34e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 810b350:	68fb      	ldr	r3, [r7, #12]
 810b352:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 810b356:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 810b358:	68fb      	ldr	r3, [r7, #12]
 810b35a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 810b35e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 810b360:	683b      	ldr	r3, [r7, #0]
 810b362:	685a      	ldr	r2, [r3, #4]
 810b364:	683b      	ldr	r3, [r7, #0]
 810b366:	695b      	ldr	r3, [r3, #20]
 810b368:	011b      	lsls	r3, r3, #4
 810b36a:	4313      	orrs	r3, r2
 810b36c:	68fa      	ldr	r2, [r7, #12]
 810b36e:	4313      	orrs	r3, r2
 810b370:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810b372:	687b      	ldr	r3, [r7, #4]
 810b374:	681b      	ldr	r3, [r3, #0]
 810b376:	697a      	ldr	r2, [r7, #20]
 810b378:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 810b37a:	687b      	ldr	r3, [r7, #4]
 810b37c:	681b      	ldr	r3, [r3, #0]
 810b37e:	693a      	ldr	r2, [r7, #16]
 810b380:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 810b382:	687b      	ldr	r3, [r7, #4]
 810b384:	681b      	ldr	r3, [r3, #0]
 810b386:	68fa      	ldr	r2, [r7, #12]
 810b388:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810b38a:	687b      	ldr	r3, [r7, #4]
 810b38c:	2201      	movs	r2, #1
 810b38e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810b392:	687b      	ldr	r3, [r7, #4]
 810b394:	2201      	movs	r2, #1
 810b396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810b39a:	687b      	ldr	r3, [r7, #4]
 810b39c:	2201      	movs	r2, #1
 810b39e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810b3a2:	687b      	ldr	r3, [r7, #4]
 810b3a4:	2201      	movs	r2, #1
 810b3a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 810b3aa:	687b      	ldr	r3, [r7, #4]
 810b3ac:	2201      	movs	r2, #1
 810b3ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810b3b2:	687b      	ldr	r3, [r7, #4]
 810b3b4:	2201      	movs	r2, #1
 810b3b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810b3ba:	2300      	movs	r3, #0
}
 810b3bc:	4618      	mov	r0, r3
 810b3be:	3718      	adds	r7, #24
 810b3c0:	46bd      	mov	sp, r7
 810b3c2:	bd80      	pop	{r7, pc}

0810b3c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810b3c4:	b580      	push	{r7, lr}
 810b3c6:	b084      	sub	sp, #16
 810b3c8:	af00      	add	r7, sp, #0
 810b3ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810b3cc:	687b      	ldr	r3, [r7, #4]
 810b3ce:	681b      	ldr	r3, [r3, #0]
 810b3d0:	68db      	ldr	r3, [r3, #12]
 810b3d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810b3d4:	687b      	ldr	r3, [r7, #4]
 810b3d6:	681b      	ldr	r3, [r3, #0]
 810b3d8:	691b      	ldr	r3, [r3, #16]
 810b3da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810b3dc:	68bb      	ldr	r3, [r7, #8]
 810b3de:	f003 0302 	and.w	r3, r3, #2
 810b3e2:	2b00      	cmp	r3, #0
 810b3e4:	d020      	beq.n	810b428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810b3e6:	68fb      	ldr	r3, [r7, #12]
 810b3e8:	f003 0302 	and.w	r3, r3, #2
 810b3ec:	2b00      	cmp	r3, #0
 810b3ee:	d01b      	beq.n	810b428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810b3f0:	687b      	ldr	r3, [r7, #4]
 810b3f2:	681b      	ldr	r3, [r3, #0]
 810b3f4:	f06f 0202 	mvn.w	r2, #2
 810b3f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810b3fa:	687b      	ldr	r3, [r7, #4]
 810b3fc:	2201      	movs	r2, #1
 810b3fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810b400:	687b      	ldr	r3, [r7, #4]
 810b402:	681b      	ldr	r3, [r3, #0]
 810b404:	699b      	ldr	r3, [r3, #24]
 810b406:	f003 0303 	and.w	r3, r3, #3
 810b40a:	2b00      	cmp	r3, #0
 810b40c:	d003      	beq.n	810b416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810b40e:	6878      	ldr	r0, [r7, #4]
 810b410:	f000 faf6 	bl	810ba00 <HAL_TIM_IC_CaptureCallback>
 810b414:	e005      	b.n	810b422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810b416:	6878      	ldr	r0, [r7, #4]
 810b418:	f000 fae8 	bl	810b9ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b41c:	6878      	ldr	r0, [r7, #4]
 810b41e:	f000 faf9 	bl	810ba14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b422:	687b      	ldr	r3, [r7, #4]
 810b424:	2200      	movs	r2, #0
 810b426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810b428:	68bb      	ldr	r3, [r7, #8]
 810b42a:	f003 0304 	and.w	r3, r3, #4
 810b42e:	2b00      	cmp	r3, #0
 810b430:	d020      	beq.n	810b474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810b432:	68fb      	ldr	r3, [r7, #12]
 810b434:	f003 0304 	and.w	r3, r3, #4
 810b438:	2b00      	cmp	r3, #0
 810b43a:	d01b      	beq.n	810b474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810b43c:	687b      	ldr	r3, [r7, #4]
 810b43e:	681b      	ldr	r3, [r3, #0]
 810b440:	f06f 0204 	mvn.w	r2, #4
 810b444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810b446:	687b      	ldr	r3, [r7, #4]
 810b448:	2202      	movs	r2, #2
 810b44a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810b44c:	687b      	ldr	r3, [r7, #4]
 810b44e:	681b      	ldr	r3, [r3, #0]
 810b450:	699b      	ldr	r3, [r3, #24]
 810b452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810b456:	2b00      	cmp	r3, #0
 810b458:	d003      	beq.n	810b462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b45a:	6878      	ldr	r0, [r7, #4]
 810b45c:	f000 fad0 	bl	810ba00 <HAL_TIM_IC_CaptureCallback>
 810b460:	e005      	b.n	810b46e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b462:	6878      	ldr	r0, [r7, #4]
 810b464:	f000 fac2 	bl	810b9ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b468:	6878      	ldr	r0, [r7, #4]
 810b46a:	f000 fad3 	bl	810ba14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b46e:	687b      	ldr	r3, [r7, #4]
 810b470:	2200      	movs	r2, #0
 810b472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810b474:	68bb      	ldr	r3, [r7, #8]
 810b476:	f003 0308 	and.w	r3, r3, #8
 810b47a:	2b00      	cmp	r3, #0
 810b47c:	d020      	beq.n	810b4c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810b47e:	68fb      	ldr	r3, [r7, #12]
 810b480:	f003 0308 	and.w	r3, r3, #8
 810b484:	2b00      	cmp	r3, #0
 810b486:	d01b      	beq.n	810b4c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810b488:	687b      	ldr	r3, [r7, #4]
 810b48a:	681b      	ldr	r3, [r3, #0]
 810b48c:	f06f 0208 	mvn.w	r2, #8
 810b490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810b492:	687b      	ldr	r3, [r7, #4]
 810b494:	2204      	movs	r2, #4
 810b496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810b498:	687b      	ldr	r3, [r7, #4]
 810b49a:	681b      	ldr	r3, [r3, #0]
 810b49c:	69db      	ldr	r3, [r3, #28]
 810b49e:	f003 0303 	and.w	r3, r3, #3
 810b4a2:	2b00      	cmp	r3, #0
 810b4a4:	d003      	beq.n	810b4ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b4a6:	6878      	ldr	r0, [r7, #4]
 810b4a8:	f000 faaa 	bl	810ba00 <HAL_TIM_IC_CaptureCallback>
 810b4ac:	e005      	b.n	810b4ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b4ae:	6878      	ldr	r0, [r7, #4]
 810b4b0:	f000 fa9c 	bl	810b9ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b4b4:	6878      	ldr	r0, [r7, #4]
 810b4b6:	f000 faad 	bl	810ba14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b4ba:	687b      	ldr	r3, [r7, #4]
 810b4bc:	2200      	movs	r2, #0
 810b4be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810b4c0:	68bb      	ldr	r3, [r7, #8]
 810b4c2:	f003 0310 	and.w	r3, r3, #16
 810b4c6:	2b00      	cmp	r3, #0
 810b4c8:	d020      	beq.n	810b50c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810b4ca:	68fb      	ldr	r3, [r7, #12]
 810b4cc:	f003 0310 	and.w	r3, r3, #16
 810b4d0:	2b00      	cmp	r3, #0
 810b4d2:	d01b      	beq.n	810b50c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810b4d4:	687b      	ldr	r3, [r7, #4]
 810b4d6:	681b      	ldr	r3, [r3, #0]
 810b4d8:	f06f 0210 	mvn.w	r2, #16
 810b4dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810b4de:	687b      	ldr	r3, [r7, #4]
 810b4e0:	2208      	movs	r2, #8
 810b4e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810b4e4:	687b      	ldr	r3, [r7, #4]
 810b4e6:	681b      	ldr	r3, [r3, #0]
 810b4e8:	69db      	ldr	r3, [r3, #28]
 810b4ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810b4ee:	2b00      	cmp	r3, #0
 810b4f0:	d003      	beq.n	810b4fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810b4f2:	6878      	ldr	r0, [r7, #4]
 810b4f4:	f000 fa84 	bl	810ba00 <HAL_TIM_IC_CaptureCallback>
 810b4f8:	e005      	b.n	810b506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b4fa:	6878      	ldr	r0, [r7, #4]
 810b4fc:	f000 fa76 	bl	810b9ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b500:	6878      	ldr	r0, [r7, #4]
 810b502:	f000 fa87 	bl	810ba14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b506:	687b      	ldr	r3, [r7, #4]
 810b508:	2200      	movs	r2, #0
 810b50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810b50c:	68bb      	ldr	r3, [r7, #8]
 810b50e:	f003 0301 	and.w	r3, r3, #1
 810b512:	2b00      	cmp	r3, #0
 810b514:	d00c      	beq.n	810b530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810b516:	68fb      	ldr	r3, [r7, #12]
 810b518:	f003 0301 	and.w	r3, r3, #1
 810b51c:	2b00      	cmp	r3, #0
 810b51e:	d007      	beq.n	810b530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810b520:	687b      	ldr	r3, [r7, #4]
 810b522:	681b      	ldr	r3, [r3, #0]
 810b524:	f06f 0201 	mvn.w	r2, #1
 810b528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810b52a:	6878      	ldr	r0, [r7, #4]
 810b52c:	f7f8 fa68 	bl	8103a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810b530:	68bb      	ldr	r3, [r7, #8]
 810b532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b536:	2b00      	cmp	r3, #0
 810b538:	d104      	bne.n	810b544 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810b53a:	68bb      	ldr	r3, [r7, #8]
 810b53c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810b540:	2b00      	cmp	r3, #0
 810b542:	d00c      	beq.n	810b55e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810b544:	68fb      	ldr	r3, [r7, #12]
 810b546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b54a:	2b00      	cmp	r3, #0
 810b54c:	d007      	beq.n	810b55e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810b54e:	687b      	ldr	r3, [r7, #4]
 810b550:	681b      	ldr	r3, [r3, #0]
 810b552:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810b556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810b558:	6878      	ldr	r0, [r7, #4]
 810b55a:	f000 ffc3 	bl	810c4e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810b55e:	68bb      	ldr	r3, [r7, #8]
 810b560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b564:	2b00      	cmp	r3, #0
 810b566:	d00c      	beq.n	810b582 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810b568:	68fb      	ldr	r3, [r7, #12]
 810b56a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b56e:	2b00      	cmp	r3, #0
 810b570:	d007      	beq.n	810b582 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810b572:	687b      	ldr	r3, [r7, #4]
 810b574:	681b      	ldr	r3, [r3, #0]
 810b576:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810b57a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810b57c:	6878      	ldr	r0, [r7, #4]
 810b57e:	f000 ffbb 	bl	810c4f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810b582:	68bb      	ldr	r3, [r7, #8]
 810b584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b588:	2b00      	cmp	r3, #0
 810b58a:	d00c      	beq.n	810b5a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810b58c:	68fb      	ldr	r3, [r7, #12]
 810b58e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b592:	2b00      	cmp	r3, #0
 810b594:	d007      	beq.n	810b5a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810b596:	687b      	ldr	r3, [r7, #4]
 810b598:	681b      	ldr	r3, [r3, #0]
 810b59a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810b59e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810b5a0:	6878      	ldr	r0, [r7, #4]
 810b5a2:	f000 fa41 	bl	810ba28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810b5a6:	68bb      	ldr	r3, [r7, #8]
 810b5a8:	f003 0320 	and.w	r3, r3, #32
 810b5ac:	2b00      	cmp	r3, #0
 810b5ae:	d00c      	beq.n	810b5ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810b5b0:	68fb      	ldr	r3, [r7, #12]
 810b5b2:	f003 0320 	and.w	r3, r3, #32
 810b5b6:	2b00      	cmp	r3, #0
 810b5b8:	d007      	beq.n	810b5ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810b5ba:	687b      	ldr	r3, [r7, #4]
 810b5bc:	681b      	ldr	r3, [r3, #0]
 810b5be:	f06f 0220 	mvn.w	r2, #32
 810b5c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810b5c4:	6878      	ldr	r0, [r7, #4]
 810b5c6:	f000 ff83 	bl	810c4d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810b5ca:	bf00      	nop
 810b5cc:	3710      	adds	r7, #16
 810b5ce:	46bd      	mov	sp, r7
 810b5d0:	bd80      	pop	{r7, pc}
	...

0810b5d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810b5d4:	b580      	push	{r7, lr}
 810b5d6:	b086      	sub	sp, #24
 810b5d8:	af00      	add	r7, sp, #0
 810b5da:	60f8      	str	r0, [r7, #12]
 810b5dc:	60b9      	str	r1, [r7, #8]
 810b5de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810b5e0:	2300      	movs	r3, #0
 810b5e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810b5e4:	68fb      	ldr	r3, [r7, #12]
 810b5e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b5ea:	2b01      	cmp	r3, #1
 810b5ec:	d101      	bne.n	810b5f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 810b5ee:	2302      	movs	r3, #2
 810b5f0:	e0ff      	b.n	810b7f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 810b5f2:	68fb      	ldr	r3, [r7, #12]
 810b5f4:	2201      	movs	r2, #1
 810b5f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810b5fa:	687b      	ldr	r3, [r7, #4]
 810b5fc:	2b14      	cmp	r3, #20
 810b5fe:	f200 80f0 	bhi.w	810b7e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 810b602:	a201      	add	r2, pc, #4	@ (adr r2, 810b608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 810b604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b608:	0810b65d 	.word	0x0810b65d
 810b60c:	0810b7e3 	.word	0x0810b7e3
 810b610:	0810b7e3 	.word	0x0810b7e3
 810b614:	0810b7e3 	.word	0x0810b7e3
 810b618:	0810b69d 	.word	0x0810b69d
 810b61c:	0810b7e3 	.word	0x0810b7e3
 810b620:	0810b7e3 	.word	0x0810b7e3
 810b624:	0810b7e3 	.word	0x0810b7e3
 810b628:	0810b6df 	.word	0x0810b6df
 810b62c:	0810b7e3 	.word	0x0810b7e3
 810b630:	0810b7e3 	.word	0x0810b7e3
 810b634:	0810b7e3 	.word	0x0810b7e3
 810b638:	0810b71f 	.word	0x0810b71f
 810b63c:	0810b7e3 	.word	0x0810b7e3
 810b640:	0810b7e3 	.word	0x0810b7e3
 810b644:	0810b7e3 	.word	0x0810b7e3
 810b648:	0810b761 	.word	0x0810b761
 810b64c:	0810b7e3 	.word	0x0810b7e3
 810b650:	0810b7e3 	.word	0x0810b7e3
 810b654:	0810b7e3 	.word	0x0810b7e3
 810b658:	0810b7a1 	.word	0x0810b7a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810b65c:	68fb      	ldr	r3, [r7, #12]
 810b65e:	681b      	ldr	r3, [r3, #0]
 810b660:	68b9      	ldr	r1, [r7, #8]
 810b662:	4618      	mov	r0, r3
 810b664:	f000 fa90 	bl	810bb88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810b668:	68fb      	ldr	r3, [r7, #12]
 810b66a:	681b      	ldr	r3, [r3, #0]
 810b66c:	699a      	ldr	r2, [r3, #24]
 810b66e:	68fb      	ldr	r3, [r7, #12]
 810b670:	681b      	ldr	r3, [r3, #0]
 810b672:	f042 0208 	orr.w	r2, r2, #8
 810b676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810b678:	68fb      	ldr	r3, [r7, #12]
 810b67a:	681b      	ldr	r3, [r3, #0]
 810b67c:	699a      	ldr	r2, [r3, #24]
 810b67e:	68fb      	ldr	r3, [r7, #12]
 810b680:	681b      	ldr	r3, [r3, #0]
 810b682:	f022 0204 	bic.w	r2, r2, #4
 810b686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810b688:	68fb      	ldr	r3, [r7, #12]
 810b68a:	681b      	ldr	r3, [r3, #0]
 810b68c:	6999      	ldr	r1, [r3, #24]
 810b68e:	68bb      	ldr	r3, [r7, #8]
 810b690:	691a      	ldr	r2, [r3, #16]
 810b692:	68fb      	ldr	r3, [r7, #12]
 810b694:	681b      	ldr	r3, [r3, #0]
 810b696:	430a      	orrs	r2, r1
 810b698:	619a      	str	r2, [r3, #24]
      break;
 810b69a:	e0a5      	b.n	810b7e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810b69c:	68fb      	ldr	r3, [r7, #12]
 810b69e:	681b      	ldr	r3, [r3, #0]
 810b6a0:	68b9      	ldr	r1, [r7, #8]
 810b6a2:	4618      	mov	r0, r3
 810b6a4:	f000 fb00 	bl	810bca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810b6a8:	68fb      	ldr	r3, [r7, #12]
 810b6aa:	681b      	ldr	r3, [r3, #0]
 810b6ac:	699a      	ldr	r2, [r3, #24]
 810b6ae:	68fb      	ldr	r3, [r7, #12]
 810b6b0:	681b      	ldr	r3, [r3, #0]
 810b6b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b6b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810b6b8:	68fb      	ldr	r3, [r7, #12]
 810b6ba:	681b      	ldr	r3, [r3, #0]
 810b6bc:	699a      	ldr	r2, [r3, #24]
 810b6be:	68fb      	ldr	r3, [r7, #12]
 810b6c0:	681b      	ldr	r3, [r3, #0]
 810b6c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b6c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810b6c8:	68fb      	ldr	r3, [r7, #12]
 810b6ca:	681b      	ldr	r3, [r3, #0]
 810b6cc:	6999      	ldr	r1, [r3, #24]
 810b6ce:	68bb      	ldr	r3, [r7, #8]
 810b6d0:	691b      	ldr	r3, [r3, #16]
 810b6d2:	021a      	lsls	r2, r3, #8
 810b6d4:	68fb      	ldr	r3, [r7, #12]
 810b6d6:	681b      	ldr	r3, [r3, #0]
 810b6d8:	430a      	orrs	r2, r1
 810b6da:	619a      	str	r2, [r3, #24]
      break;
 810b6dc:	e084      	b.n	810b7e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810b6de:	68fb      	ldr	r3, [r7, #12]
 810b6e0:	681b      	ldr	r3, [r3, #0]
 810b6e2:	68b9      	ldr	r1, [r7, #8]
 810b6e4:	4618      	mov	r0, r3
 810b6e6:	f000 fb69 	bl	810bdbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810b6ea:	68fb      	ldr	r3, [r7, #12]
 810b6ec:	681b      	ldr	r3, [r3, #0]
 810b6ee:	69da      	ldr	r2, [r3, #28]
 810b6f0:	68fb      	ldr	r3, [r7, #12]
 810b6f2:	681b      	ldr	r3, [r3, #0]
 810b6f4:	f042 0208 	orr.w	r2, r2, #8
 810b6f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810b6fa:	68fb      	ldr	r3, [r7, #12]
 810b6fc:	681b      	ldr	r3, [r3, #0]
 810b6fe:	69da      	ldr	r2, [r3, #28]
 810b700:	68fb      	ldr	r3, [r7, #12]
 810b702:	681b      	ldr	r3, [r3, #0]
 810b704:	f022 0204 	bic.w	r2, r2, #4
 810b708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810b70a:	68fb      	ldr	r3, [r7, #12]
 810b70c:	681b      	ldr	r3, [r3, #0]
 810b70e:	69d9      	ldr	r1, [r3, #28]
 810b710:	68bb      	ldr	r3, [r7, #8]
 810b712:	691a      	ldr	r2, [r3, #16]
 810b714:	68fb      	ldr	r3, [r7, #12]
 810b716:	681b      	ldr	r3, [r3, #0]
 810b718:	430a      	orrs	r2, r1
 810b71a:	61da      	str	r2, [r3, #28]
      break;
 810b71c:	e064      	b.n	810b7e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810b71e:	68fb      	ldr	r3, [r7, #12]
 810b720:	681b      	ldr	r3, [r3, #0]
 810b722:	68b9      	ldr	r1, [r7, #8]
 810b724:	4618      	mov	r0, r3
 810b726:	f000 fbd1 	bl	810becc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810b72a:	68fb      	ldr	r3, [r7, #12]
 810b72c:	681b      	ldr	r3, [r3, #0]
 810b72e:	69da      	ldr	r2, [r3, #28]
 810b730:	68fb      	ldr	r3, [r7, #12]
 810b732:	681b      	ldr	r3, [r3, #0]
 810b734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810b73a:	68fb      	ldr	r3, [r7, #12]
 810b73c:	681b      	ldr	r3, [r3, #0]
 810b73e:	69da      	ldr	r2, [r3, #28]
 810b740:	68fb      	ldr	r3, [r7, #12]
 810b742:	681b      	ldr	r3, [r3, #0]
 810b744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810b74a:	68fb      	ldr	r3, [r7, #12]
 810b74c:	681b      	ldr	r3, [r3, #0]
 810b74e:	69d9      	ldr	r1, [r3, #28]
 810b750:	68bb      	ldr	r3, [r7, #8]
 810b752:	691b      	ldr	r3, [r3, #16]
 810b754:	021a      	lsls	r2, r3, #8
 810b756:	68fb      	ldr	r3, [r7, #12]
 810b758:	681b      	ldr	r3, [r3, #0]
 810b75a:	430a      	orrs	r2, r1
 810b75c:	61da      	str	r2, [r3, #28]
      break;
 810b75e:	e043      	b.n	810b7e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810b760:	68fb      	ldr	r3, [r7, #12]
 810b762:	681b      	ldr	r3, [r3, #0]
 810b764:	68b9      	ldr	r1, [r7, #8]
 810b766:	4618      	mov	r0, r3
 810b768:	f000 fc1a 	bl	810bfa0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810b76c:	68fb      	ldr	r3, [r7, #12]
 810b76e:	681b      	ldr	r3, [r3, #0]
 810b770:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b772:	68fb      	ldr	r3, [r7, #12]
 810b774:	681b      	ldr	r3, [r3, #0]
 810b776:	f042 0208 	orr.w	r2, r2, #8
 810b77a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810b77c:	68fb      	ldr	r3, [r7, #12]
 810b77e:	681b      	ldr	r3, [r3, #0]
 810b780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b782:	68fb      	ldr	r3, [r7, #12]
 810b784:	681b      	ldr	r3, [r3, #0]
 810b786:	f022 0204 	bic.w	r2, r2, #4
 810b78a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810b78c:	68fb      	ldr	r3, [r7, #12]
 810b78e:	681b      	ldr	r3, [r3, #0]
 810b790:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810b792:	68bb      	ldr	r3, [r7, #8]
 810b794:	691a      	ldr	r2, [r3, #16]
 810b796:	68fb      	ldr	r3, [r7, #12]
 810b798:	681b      	ldr	r3, [r3, #0]
 810b79a:	430a      	orrs	r2, r1
 810b79c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810b79e:	e023      	b.n	810b7e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810b7a0:	68fb      	ldr	r3, [r7, #12]
 810b7a2:	681b      	ldr	r3, [r3, #0]
 810b7a4:	68b9      	ldr	r1, [r7, #8]
 810b7a6:	4618      	mov	r0, r3
 810b7a8:	f000 fc5e 	bl	810c068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810b7ac:	68fb      	ldr	r3, [r7, #12]
 810b7ae:	681b      	ldr	r3, [r3, #0]
 810b7b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b7b2:	68fb      	ldr	r3, [r7, #12]
 810b7b4:	681b      	ldr	r3, [r3, #0]
 810b7b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b7ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810b7bc:	68fb      	ldr	r3, [r7, #12]
 810b7be:	681b      	ldr	r3, [r3, #0]
 810b7c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810b7c2:	68fb      	ldr	r3, [r7, #12]
 810b7c4:	681b      	ldr	r3, [r3, #0]
 810b7c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810b7ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810b7cc:	68fb      	ldr	r3, [r7, #12]
 810b7ce:	681b      	ldr	r3, [r3, #0]
 810b7d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810b7d2:	68bb      	ldr	r3, [r7, #8]
 810b7d4:	691b      	ldr	r3, [r3, #16]
 810b7d6:	021a      	lsls	r2, r3, #8
 810b7d8:	68fb      	ldr	r3, [r7, #12]
 810b7da:	681b      	ldr	r3, [r3, #0]
 810b7dc:	430a      	orrs	r2, r1
 810b7de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810b7e0:	e002      	b.n	810b7e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810b7e2:	2301      	movs	r3, #1
 810b7e4:	75fb      	strb	r3, [r7, #23]
      break;
 810b7e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810b7e8:	68fb      	ldr	r3, [r7, #12]
 810b7ea:	2200      	movs	r2, #0
 810b7ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810b7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 810b7f2:	4618      	mov	r0, r3
 810b7f4:	3718      	adds	r7, #24
 810b7f6:	46bd      	mov	sp, r7
 810b7f8:	bd80      	pop	{r7, pc}
 810b7fa:	bf00      	nop

0810b7fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810b7fc:	b580      	push	{r7, lr}
 810b7fe:	b084      	sub	sp, #16
 810b800:	af00      	add	r7, sp, #0
 810b802:	6078      	str	r0, [r7, #4]
 810b804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810b806:	2300      	movs	r3, #0
 810b808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810b80a:	687b      	ldr	r3, [r7, #4]
 810b80c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b810:	2b01      	cmp	r3, #1
 810b812:	d101      	bne.n	810b818 <HAL_TIM_ConfigClockSource+0x1c>
 810b814:	2302      	movs	r3, #2
 810b816:	e0de      	b.n	810b9d6 <HAL_TIM_ConfigClockSource+0x1da>
 810b818:	687b      	ldr	r3, [r7, #4]
 810b81a:	2201      	movs	r2, #1
 810b81c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810b820:	687b      	ldr	r3, [r7, #4]
 810b822:	2202      	movs	r2, #2
 810b824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810b828:	687b      	ldr	r3, [r7, #4]
 810b82a:	681b      	ldr	r3, [r3, #0]
 810b82c:	689b      	ldr	r3, [r3, #8]
 810b82e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810b830:	68bb      	ldr	r3, [r7, #8]
 810b832:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810b836:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810b83a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810b83c:	68bb      	ldr	r3, [r7, #8]
 810b83e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810b842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810b844:	687b      	ldr	r3, [r7, #4]
 810b846:	681b      	ldr	r3, [r3, #0]
 810b848:	68ba      	ldr	r2, [r7, #8]
 810b84a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810b84c:	683b      	ldr	r3, [r7, #0]
 810b84e:	681b      	ldr	r3, [r3, #0]
 810b850:	4a63      	ldr	r2, [pc, #396]	@ (810b9e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 810b852:	4293      	cmp	r3, r2
 810b854:	f000 80a9 	beq.w	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b858:	4a61      	ldr	r2, [pc, #388]	@ (810b9e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 810b85a:	4293      	cmp	r3, r2
 810b85c:	f200 80ae 	bhi.w	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b860:	4a60      	ldr	r2, [pc, #384]	@ (810b9e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 810b862:	4293      	cmp	r3, r2
 810b864:	f000 80a1 	beq.w	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b868:	4a5e      	ldr	r2, [pc, #376]	@ (810b9e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 810b86a:	4293      	cmp	r3, r2
 810b86c:	f200 80a6 	bhi.w	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b870:	4a5d      	ldr	r2, [pc, #372]	@ (810b9e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 810b872:	4293      	cmp	r3, r2
 810b874:	f000 8099 	beq.w	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b878:	4a5b      	ldr	r2, [pc, #364]	@ (810b9e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 810b87a:	4293      	cmp	r3, r2
 810b87c:	f200 809e 	bhi.w	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b880:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810b884:	f000 8091 	beq.w	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b888:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810b88c:	f200 8096 	bhi.w	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b890:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b894:	f000 8089 	beq.w	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b89c:	f200 808e 	bhi.w	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b8a4:	d03e      	beq.n	810b924 <HAL_TIM_ConfigClockSource+0x128>
 810b8a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b8aa:	f200 8087 	bhi.w	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b8b2:	f000 8086 	beq.w	810b9c2 <HAL_TIM_ConfigClockSource+0x1c6>
 810b8b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b8ba:	d87f      	bhi.n	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8bc:	2b70      	cmp	r3, #112	@ 0x70
 810b8be:	d01a      	beq.n	810b8f6 <HAL_TIM_ConfigClockSource+0xfa>
 810b8c0:	2b70      	cmp	r3, #112	@ 0x70
 810b8c2:	d87b      	bhi.n	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8c4:	2b60      	cmp	r3, #96	@ 0x60
 810b8c6:	d050      	beq.n	810b96a <HAL_TIM_ConfigClockSource+0x16e>
 810b8c8:	2b60      	cmp	r3, #96	@ 0x60
 810b8ca:	d877      	bhi.n	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8cc:	2b50      	cmp	r3, #80	@ 0x50
 810b8ce:	d03c      	beq.n	810b94a <HAL_TIM_ConfigClockSource+0x14e>
 810b8d0:	2b50      	cmp	r3, #80	@ 0x50
 810b8d2:	d873      	bhi.n	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8d4:	2b40      	cmp	r3, #64	@ 0x40
 810b8d6:	d058      	beq.n	810b98a <HAL_TIM_ConfigClockSource+0x18e>
 810b8d8:	2b40      	cmp	r3, #64	@ 0x40
 810b8da:	d86f      	bhi.n	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8dc:	2b30      	cmp	r3, #48	@ 0x30
 810b8de:	d064      	beq.n	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b8e0:	2b30      	cmp	r3, #48	@ 0x30
 810b8e2:	d86b      	bhi.n	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8e4:	2b20      	cmp	r3, #32
 810b8e6:	d060      	beq.n	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b8e8:	2b20      	cmp	r3, #32
 810b8ea:	d867      	bhi.n	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
 810b8ec:	2b00      	cmp	r3, #0
 810b8ee:	d05c      	beq.n	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b8f0:	2b10      	cmp	r3, #16
 810b8f2:	d05a      	beq.n	810b9aa <HAL_TIM_ConfigClockSource+0x1ae>
 810b8f4:	e062      	b.n	810b9bc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810b8f6:	687b      	ldr	r3, [r7, #4]
 810b8f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810b8fa:	683b      	ldr	r3, [r7, #0]
 810b8fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810b8fe:	683b      	ldr	r3, [r7, #0]
 810b900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810b902:	683b      	ldr	r3, [r7, #0]
 810b904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810b906:	f000 fc91 	bl	810c22c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810b90a:	687b      	ldr	r3, [r7, #4]
 810b90c:	681b      	ldr	r3, [r3, #0]
 810b90e:	689b      	ldr	r3, [r3, #8]
 810b910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810b912:	68bb      	ldr	r3, [r7, #8]
 810b914:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810b918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810b91a:	687b      	ldr	r3, [r7, #4]
 810b91c:	681b      	ldr	r3, [r3, #0]
 810b91e:	68ba      	ldr	r2, [r7, #8]
 810b920:	609a      	str	r2, [r3, #8]
      break;
 810b922:	e04f      	b.n	810b9c4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810b924:	687b      	ldr	r3, [r7, #4]
 810b926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810b928:	683b      	ldr	r3, [r7, #0]
 810b92a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810b92c:	683b      	ldr	r3, [r7, #0]
 810b92e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810b930:	683b      	ldr	r3, [r7, #0]
 810b932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810b934:	f000 fc7a 	bl	810c22c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810b938:	687b      	ldr	r3, [r7, #4]
 810b93a:	681b      	ldr	r3, [r3, #0]
 810b93c:	689a      	ldr	r2, [r3, #8]
 810b93e:	687b      	ldr	r3, [r7, #4]
 810b940:	681b      	ldr	r3, [r3, #0]
 810b942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810b946:	609a      	str	r2, [r3, #8]
      break;
 810b948:	e03c      	b.n	810b9c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810b94a:	687b      	ldr	r3, [r7, #4]
 810b94c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b94e:	683b      	ldr	r3, [r7, #0]
 810b950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b952:	683b      	ldr	r3, [r7, #0]
 810b954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b956:	461a      	mov	r2, r3
 810b958:	f000 fbec 	bl	810c134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810b95c:	687b      	ldr	r3, [r7, #4]
 810b95e:	681b      	ldr	r3, [r3, #0]
 810b960:	2150      	movs	r1, #80	@ 0x50
 810b962:	4618      	mov	r0, r3
 810b964:	f000 fc45 	bl	810c1f2 <TIM_ITRx_SetConfig>
      break;
 810b968:	e02c      	b.n	810b9c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810b96a:	687b      	ldr	r3, [r7, #4]
 810b96c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b96e:	683b      	ldr	r3, [r7, #0]
 810b970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b972:	683b      	ldr	r3, [r7, #0]
 810b974:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810b976:	461a      	mov	r2, r3
 810b978:	f000 fc0b 	bl	810c192 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810b97c:	687b      	ldr	r3, [r7, #4]
 810b97e:	681b      	ldr	r3, [r3, #0]
 810b980:	2160      	movs	r1, #96	@ 0x60
 810b982:	4618      	mov	r0, r3
 810b984:	f000 fc35 	bl	810c1f2 <TIM_ITRx_SetConfig>
      break;
 810b988:	e01c      	b.n	810b9c4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810b98a:	687b      	ldr	r3, [r7, #4]
 810b98c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810b98e:	683b      	ldr	r3, [r7, #0]
 810b990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810b992:	683b      	ldr	r3, [r7, #0]
 810b994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b996:	461a      	mov	r2, r3
 810b998:	f000 fbcc 	bl	810c134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810b99c:	687b      	ldr	r3, [r7, #4]
 810b99e:	681b      	ldr	r3, [r3, #0]
 810b9a0:	2140      	movs	r1, #64	@ 0x40
 810b9a2:	4618      	mov	r0, r3
 810b9a4:	f000 fc25 	bl	810c1f2 <TIM_ITRx_SetConfig>
      break;
 810b9a8:	e00c      	b.n	810b9c4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810b9aa:	687b      	ldr	r3, [r7, #4]
 810b9ac:	681a      	ldr	r2, [r3, #0]
 810b9ae:	683b      	ldr	r3, [r7, #0]
 810b9b0:	681b      	ldr	r3, [r3, #0]
 810b9b2:	4619      	mov	r1, r3
 810b9b4:	4610      	mov	r0, r2
 810b9b6:	f000 fc1c 	bl	810c1f2 <TIM_ITRx_SetConfig>
      break;
 810b9ba:	e003      	b.n	810b9c4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810b9bc:	2301      	movs	r3, #1
 810b9be:	73fb      	strb	r3, [r7, #15]
      break;
 810b9c0:	e000      	b.n	810b9c4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810b9c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810b9c4:	687b      	ldr	r3, [r7, #4]
 810b9c6:	2201      	movs	r2, #1
 810b9c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810b9cc:	687b      	ldr	r3, [r7, #4]
 810b9ce:	2200      	movs	r2, #0
 810b9d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810b9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 810b9d6:	4618      	mov	r0, r3
 810b9d8:	3710      	adds	r7, #16
 810b9da:	46bd      	mov	sp, r7
 810b9dc:	bd80      	pop	{r7, pc}
 810b9de:	bf00      	nop
 810b9e0:	00100040 	.word	0x00100040
 810b9e4:	00100030 	.word	0x00100030
 810b9e8:	00100020 	.word	0x00100020

0810b9ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810b9ec:	b480      	push	{r7}
 810b9ee:	b083      	sub	sp, #12
 810b9f0:	af00      	add	r7, sp, #0
 810b9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810b9f4:	bf00      	nop
 810b9f6:	370c      	adds	r7, #12
 810b9f8:	46bd      	mov	sp, r7
 810b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9fe:	4770      	bx	lr

0810ba00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810ba00:	b480      	push	{r7}
 810ba02:	b083      	sub	sp, #12
 810ba04:	af00      	add	r7, sp, #0
 810ba06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810ba08:	bf00      	nop
 810ba0a:	370c      	adds	r7, #12
 810ba0c:	46bd      	mov	sp, r7
 810ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba12:	4770      	bx	lr

0810ba14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810ba14:	b480      	push	{r7}
 810ba16:	b083      	sub	sp, #12
 810ba18:	af00      	add	r7, sp, #0
 810ba1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810ba1c:	bf00      	nop
 810ba1e:	370c      	adds	r7, #12
 810ba20:	46bd      	mov	sp, r7
 810ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba26:	4770      	bx	lr

0810ba28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810ba28:	b480      	push	{r7}
 810ba2a:	b083      	sub	sp, #12
 810ba2c:	af00      	add	r7, sp, #0
 810ba2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810ba30:	bf00      	nop
 810ba32:	370c      	adds	r7, #12
 810ba34:	46bd      	mov	sp, r7
 810ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba3a:	4770      	bx	lr

0810ba3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810ba3c:	b480      	push	{r7}
 810ba3e:	b085      	sub	sp, #20
 810ba40:	af00      	add	r7, sp, #0
 810ba42:	6078      	str	r0, [r7, #4]
 810ba44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810ba46:	687b      	ldr	r3, [r7, #4]
 810ba48:	681b      	ldr	r3, [r3, #0]
 810ba4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810ba4c:	687b      	ldr	r3, [r7, #4]
 810ba4e:	4a46      	ldr	r2, [pc, #280]	@ (810bb68 <TIM_Base_SetConfig+0x12c>)
 810ba50:	4293      	cmp	r3, r2
 810ba52:	d013      	beq.n	810ba7c <TIM_Base_SetConfig+0x40>
 810ba54:	687b      	ldr	r3, [r7, #4]
 810ba56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ba5a:	d00f      	beq.n	810ba7c <TIM_Base_SetConfig+0x40>
 810ba5c:	687b      	ldr	r3, [r7, #4]
 810ba5e:	4a43      	ldr	r2, [pc, #268]	@ (810bb6c <TIM_Base_SetConfig+0x130>)
 810ba60:	4293      	cmp	r3, r2
 810ba62:	d00b      	beq.n	810ba7c <TIM_Base_SetConfig+0x40>
 810ba64:	687b      	ldr	r3, [r7, #4]
 810ba66:	4a42      	ldr	r2, [pc, #264]	@ (810bb70 <TIM_Base_SetConfig+0x134>)
 810ba68:	4293      	cmp	r3, r2
 810ba6a:	d007      	beq.n	810ba7c <TIM_Base_SetConfig+0x40>
 810ba6c:	687b      	ldr	r3, [r7, #4]
 810ba6e:	4a41      	ldr	r2, [pc, #260]	@ (810bb74 <TIM_Base_SetConfig+0x138>)
 810ba70:	4293      	cmp	r3, r2
 810ba72:	d003      	beq.n	810ba7c <TIM_Base_SetConfig+0x40>
 810ba74:	687b      	ldr	r3, [r7, #4]
 810ba76:	4a40      	ldr	r2, [pc, #256]	@ (810bb78 <TIM_Base_SetConfig+0x13c>)
 810ba78:	4293      	cmp	r3, r2
 810ba7a:	d108      	bne.n	810ba8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810ba7c:	68fb      	ldr	r3, [r7, #12]
 810ba7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ba82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810ba84:	683b      	ldr	r3, [r7, #0]
 810ba86:	685b      	ldr	r3, [r3, #4]
 810ba88:	68fa      	ldr	r2, [r7, #12]
 810ba8a:	4313      	orrs	r3, r2
 810ba8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810ba8e:	687b      	ldr	r3, [r7, #4]
 810ba90:	4a35      	ldr	r2, [pc, #212]	@ (810bb68 <TIM_Base_SetConfig+0x12c>)
 810ba92:	4293      	cmp	r3, r2
 810ba94:	d01f      	beq.n	810bad6 <TIM_Base_SetConfig+0x9a>
 810ba96:	687b      	ldr	r3, [r7, #4]
 810ba98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ba9c:	d01b      	beq.n	810bad6 <TIM_Base_SetConfig+0x9a>
 810ba9e:	687b      	ldr	r3, [r7, #4]
 810baa0:	4a32      	ldr	r2, [pc, #200]	@ (810bb6c <TIM_Base_SetConfig+0x130>)
 810baa2:	4293      	cmp	r3, r2
 810baa4:	d017      	beq.n	810bad6 <TIM_Base_SetConfig+0x9a>
 810baa6:	687b      	ldr	r3, [r7, #4]
 810baa8:	4a31      	ldr	r2, [pc, #196]	@ (810bb70 <TIM_Base_SetConfig+0x134>)
 810baaa:	4293      	cmp	r3, r2
 810baac:	d013      	beq.n	810bad6 <TIM_Base_SetConfig+0x9a>
 810baae:	687b      	ldr	r3, [r7, #4]
 810bab0:	4a30      	ldr	r2, [pc, #192]	@ (810bb74 <TIM_Base_SetConfig+0x138>)
 810bab2:	4293      	cmp	r3, r2
 810bab4:	d00f      	beq.n	810bad6 <TIM_Base_SetConfig+0x9a>
 810bab6:	687b      	ldr	r3, [r7, #4]
 810bab8:	4a2f      	ldr	r2, [pc, #188]	@ (810bb78 <TIM_Base_SetConfig+0x13c>)
 810baba:	4293      	cmp	r3, r2
 810babc:	d00b      	beq.n	810bad6 <TIM_Base_SetConfig+0x9a>
 810babe:	687b      	ldr	r3, [r7, #4]
 810bac0:	4a2e      	ldr	r2, [pc, #184]	@ (810bb7c <TIM_Base_SetConfig+0x140>)
 810bac2:	4293      	cmp	r3, r2
 810bac4:	d007      	beq.n	810bad6 <TIM_Base_SetConfig+0x9a>
 810bac6:	687b      	ldr	r3, [r7, #4]
 810bac8:	4a2d      	ldr	r2, [pc, #180]	@ (810bb80 <TIM_Base_SetConfig+0x144>)
 810baca:	4293      	cmp	r3, r2
 810bacc:	d003      	beq.n	810bad6 <TIM_Base_SetConfig+0x9a>
 810bace:	687b      	ldr	r3, [r7, #4]
 810bad0:	4a2c      	ldr	r2, [pc, #176]	@ (810bb84 <TIM_Base_SetConfig+0x148>)
 810bad2:	4293      	cmp	r3, r2
 810bad4:	d108      	bne.n	810bae8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810bad6:	68fb      	ldr	r3, [r7, #12]
 810bad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810badc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810bade:	683b      	ldr	r3, [r7, #0]
 810bae0:	68db      	ldr	r3, [r3, #12]
 810bae2:	68fa      	ldr	r2, [r7, #12]
 810bae4:	4313      	orrs	r3, r2
 810bae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810bae8:	68fb      	ldr	r3, [r7, #12]
 810baea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810baee:	683b      	ldr	r3, [r7, #0]
 810baf0:	695b      	ldr	r3, [r3, #20]
 810baf2:	4313      	orrs	r3, r2
 810baf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810baf6:	687b      	ldr	r3, [r7, #4]
 810baf8:	68fa      	ldr	r2, [r7, #12]
 810bafa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810bafc:	683b      	ldr	r3, [r7, #0]
 810bafe:	689a      	ldr	r2, [r3, #8]
 810bb00:	687b      	ldr	r3, [r7, #4]
 810bb02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810bb04:	683b      	ldr	r3, [r7, #0]
 810bb06:	681a      	ldr	r2, [r3, #0]
 810bb08:	687b      	ldr	r3, [r7, #4]
 810bb0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810bb0c:	687b      	ldr	r3, [r7, #4]
 810bb0e:	4a16      	ldr	r2, [pc, #88]	@ (810bb68 <TIM_Base_SetConfig+0x12c>)
 810bb10:	4293      	cmp	r3, r2
 810bb12:	d00f      	beq.n	810bb34 <TIM_Base_SetConfig+0xf8>
 810bb14:	687b      	ldr	r3, [r7, #4]
 810bb16:	4a18      	ldr	r2, [pc, #96]	@ (810bb78 <TIM_Base_SetConfig+0x13c>)
 810bb18:	4293      	cmp	r3, r2
 810bb1a:	d00b      	beq.n	810bb34 <TIM_Base_SetConfig+0xf8>
 810bb1c:	687b      	ldr	r3, [r7, #4]
 810bb1e:	4a17      	ldr	r2, [pc, #92]	@ (810bb7c <TIM_Base_SetConfig+0x140>)
 810bb20:	4293      	cmp	r3, r2
 810bb22:	d007      	beq.n	810bb34 <TIM_Base_SetConfig+0xf8>
 810bb24:	687b      	ldr	r3, [r7, #4]
 810bb26:	4a16      	ldr	r2, [pc, #88]	@ (810bb80 <TIM_Base_SetConfig+0x144>)
 810bb28:	4293      	cmp	r3, r2
 810bb2a:	d003      	beq.n	810bb34 <TIM_Base_SetConfig+0xf8>
 810bb2c:	687b      	ldr	r3, [r7, #4]
 810bb2e:	4a15      	ldr	r2, [pc, #84]	@ (810bb84 <TIM_Base_SetConfig+0x148>)
 810bb30:	4293      	cmp	r3, r2
 810bb32:	d103      	bne.n	810bb3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810bb34:	683b      	ldr	r3, [r7, #0]
 810bb36:	691a      	ldr	r2, [r3, #16]
 810bb38:	687b      	ldr	r3, [r7, #4]
 810bb3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810bb3c:	687b      	ldr	r3, [r7, #4]
 810bb3e:	2201      	movs	r2, #1
 810bb40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810bb42:	687b      	ldr	r3, [r7, #4]
 810bb44:	691b      	ldr	r3, [r3, #16]
 810bb46:	f003 0301 	and.w	r3, r3, #1
 810bb4a:	2b01      	cmp	r3, #1
 810bb4c:	d105      	bne.n	810bb5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810bb4e:	687b      	ldr	r3, [r7, #4]
 810bb50:	691b      	ldr	r3, [r3, #16]
 810bb52:	f023 0201 	bic.w	r2, r3, #1
 810bb56:	687b      	ldr	r3, [r7, #4]
 810bb58:	611a      	str	r2, [r3, #16]
  }
}
 810bb5a:	bf00      	nop
 810bb5c:	3714      	adds	r7, #20
 810bb5e:	46bd      	mov	sp, r7
 810bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb64:	4770      	bx	lr
 810bb66:	bf00      	nop
 810bb68:	40010000 	.word	0x40010000
 810bb6c:	40000400 	.word	0x40000400
 810bb70:	40000800 	.word	0x40000800
 810bb74:	40000c00 	.word	0x40000c00
 810bb78:	40010400 	.word	0x40010400
 810bb7c:	40014000 	.word	0x40014000
 810bb80:	40014400 	.word	0x40014400
 810bb84:	40014800 	.word	0x40014800

0810bb88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810bb88:	b480      	push	{r7}
 810bb8a:	b087      	sub	sp, #28
 810bb8c:	af00      	add	r7, sp, #0
 810bb8e:	6078      	str	r0, [r7, #4]
 810bb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bb92:	687b      	ldr	r3, [r7, #4]
 810bb94:	6a1b      	ldr	r3, [r3, #32]
 810bb96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810bb98:	687b      	ldr	r3, [r7, #4]
 810bb9a:	6a1b      	ldr	r3, [r3, #32]
 810bb9c:	f023 0201 	bic.w	r2, r3, #1
 810bba0:	687b      	ldr	r3, [r7, #4]
 810bba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bba4:	687b      	ldr	r3, [r7, #4]
 810bba6:	685b      	ldr	r3, [r3, #4]
 810bba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810bbaa:	687b      	ldr	r3, [r7, #4]
 810bbac:	699b      	ldr	r3, [r3, #24]
 810bbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810bbb0:	68fb      	ldr	r3, [r7, #12]
 810bbb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810bbb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bbba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810bbbc:	68fb      	ldr	r3, [r7, #12]
 810bbbe:	f023 0303 	bic.w	r3, r3, #3
 810bbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810bbc4:	683b      	ldr	r3, [r7, #0]
 810bbc6:	681b      	ldr	r3, [r3, #0]
 810bbc8:	68fa      	ldr	r2, [r7, #12]
 810bbca:	4313      	orrs	r3, r2
 810bbcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810bbce:	697b      	ldr	r3, [r7, #20]
 810bbd0:	f023 0302 	bic.w	r3, r3, #2
 810bbd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810bbd6:	683b      	ldr	r3, [r7, #0]
 810bbd8:	689b      	ldr	r3, [r3, #8]
 810bbda:	697a      	ldr	r2, [r7, #20]
 810bbdc:	4313      	orrs	r3, r2
 810bbde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810bbe0:	687b      	ldr	r3, [r7, #4]
 810bbe2:	4a2c      	ldr	r2, [pc, #176]	@ (810bc94 <TIM_OC1_SetConfig+0x10c>)
 810bbe4:	4293      	cmp	r3, r2
 810bbe6:	d00f      	beq.n	810bc08 <TIM_OC1_SetConfig+0x80>
 810bbe8:	687b      	ldr	r3, [r7, #4]
 810bbea:	4a2b      	ldr	r2, [pc, #172]	@ (810bc98 <TIM_OC1_SetConfig+0x110>)
 810bbec:	4293      	cmp	r3, r2
 810bbee:	d00b      	beq.n	810bc08 <TIM_OC1_SetConfig+0x80>
 810bbf0:	687b      	ldr	r3, [r7, #4]
 810bbf2:	4a2a      	ldr	r2, [pc, #168]	@ (810bc9c <TIM_OC1_SetConfig+0x114>)
 810bbf4:	4293      	cmp	r3, r2
 810bbf6:	d007      	beq.n	810bc08 <TIM_OC1_SetConfig+0x80>
 810bbf8:	687b      	ldr	r3, [r7, #4]
 810bbfa:	4a29      	ldr	r2, [pc, #164]	@ (810bca0 <TIM_OC1_SetConfig+0x118>)
 810bbfc:	4293      	cmp	r3, r2
 810bbfe:	d003      	beq.n	810bc08 <TIM_OC1_SetConfig+0x80>
 810bc00:	687b      	ldr	r3, [r7, #4]
 810bc02:	4a28      	ldr	r2, [pc, #160]	@ (810bca4 <TIM_OC1_SetConfig+0x11c>)
 810bc04:	4293      	cmp	r3, r2
 810bc06:	d10c      	bne.n	810bc22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810bc08:	697b      	ldr	r3, [r7, #20]
 810bc0a:	f023 0308 	bic.w	r3, r3, #8
 810bc0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810bc10:	683b      	ldr	r3, [r7, #0]
 810bc12:	68db      	ldr	r3, [r3, #12]
 810bc14:	697a      	ldr	r2, [r7, #20]
 810bc16:	4313      	orrs	r3, r2
 810bc18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810bc1a:	697b      	ldr	r3, [r7, #20]
 810bc1c:	f023 0304 	bic.w	r3, r3, #4
 810bc20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bc22:	687b      	ldr	r3, [r7, #4]
 810bc24:	4a1b      	ldr	r2, [pc, #108]	@ (810bc94 <TIM_OC1_SetConfig+0x10c>)
 810bc26:	4293      	cmp	r3, r2
 810bc28:	d00f      	beq.n	810bc4a <TIM_OC1_SetConfig+0xc2>
 810bc2a:	687b      	ldr	r3, [r7, #4]
 810bc2c:	4a1a      	ldr	r2, [pc, #104]	@ (810bc98 <TIM_OC1_SetConfig+0x110>)
 810bc2e:	4293      	cmp	r3, r2
 810bc30:	d00b      	beq.n	810bc4a <TIM_OC1_SetConfig+0xc2>
 810bc32:	687b      	ldr	r3, [r7, #4]
 810bc34:	4a19      	ldr	r2, [pc, #100]	@ (810bc9c <TIM_OC1_SetConfig+0x114>)
 810bc36:	4293      	cmp	r3, r2
 810bc38:	d007      	beq.n	810bc4a <TIM_OC1_SetConfig+0xc2>
 810bc3a:	687b      	ldr	r3, [r7, #4]
 810bc3c:	4a18      	ldr	r2, [pc, #96]	@ (810bca0 <TIM_OC1_SetConfig+0x118>)
 810bc3e:	4293      	cmp	r3, r2
 810bc40:	d003      	beq.n	810bc4a <TIM_OC1_SetConfig+0xc2>
 810bc42:	687b      	ldr	r3, [r7, #4]
 810bc44:	4a17      	ldr	r2, [pc, #92]	@ (810bca4 <TIM_OC1_SetConfig+0x11c>)
 810bc46:	4293      	cmp	r3, r2
 810bc48:	d111      	bne.n	810bc6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810bc4a:	693b      	ldr	r3, [r7, #16]
 810bc4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810bc50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810bc52:	693b      	ldr	r3, [r7, #16]
 810bc54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810bc58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810bc5a:	683b      	ldr	r3, [r7, #0]
 810bc5c:	695b      	ldr	r3, [r3, #20]
 810bc5e:	693a      	ldr	r2, [r7, #16]
 810bc60:	4313      	orrs	r3, r2
 810bc62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810bc64:	683b      	ldr	r3, [r7, #0]
 810bc66:	699b      	ldr	r3, [r3, #24]
 810bc68:	693a      	ldr	r2, [r7, #16]
 810bc6a:	4313      	orrs	r3, r2
 810bc6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bc6e:	687b      	ldr	r3, [r7, #4]
 810bc70:	693a      	ldr	r2, [r7, #16]
 810bc72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810bc74:	687b      	ldr	r3, [r7, #4]
 810bc76:	68fa      	ldr	r2, [r7, #12]
 810bc78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810bc7a:	683b      	ldr	r3, [r7, #0]
 810bc7c:	685a      	ldr	r2, [r3, #4]
 810bc7e:	687b      	ldr	r3, [r7, #4]
 810bc80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bc82:	687b      	ldr	r3, [r7, #4]
 810bc84:	697a      	ldr	r2, [r7, #20]
 810bc86:	621a      	str	r2, [r3, #32]
}
 810bc88:	bf00      	nop
 810bc8a:	371c      	adds	r7, #28
 810bc8c:	46bd      	mov	sp, r7
 810bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc92:	4770      	bx	lr
 810bc94:	40010000 	.word	0x40010000
 810bc98:	40010400 	.word	0x40010400
 810bc9c:	40014000 	.word	0x40014000
 810bca0:	40014400 	.word	0x40014400
 810bca4:	40014800 	.word	0x40014800

0810bca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810bca8:	b480      	push	{r7}
 810bcaa:	b087      	sub	sp, #28
 810bcac:	af00      	add	r7, sp, #0
 810bcae:	6078      	str	r0, [r7, #4]
 810bcb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bcb2:	687b      	ldr	r3, [r7, #4]
 810bcb4:	6a1b      	ldr	r3, [r3, #32]
 810bcb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810bcb8:	687b      	ldr	r3, [r7, #4]
 810bcba:	6a1b      	ldr	r3, [r3, #32]
 810bcbc:	f023 0210 	bic.w	r2, r3, #16
 810bcc0:	687b      	ldr	r3, [r7, #4]
 810bcc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bcc4:	687b      	ldr	r3, [r7, #4]
 810bcc6:	685b      	ldr	r3, [r3, #4]
 810bcc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810bcca:	687b      	ldr	r3, [r7, #4]
 810bccc:	699b      	ldr	r3, [r3, #24]
 810bcce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810bcd0:	68fb      	ldr	r3, [r7, #12]
 810bcd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810bcd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810bcda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810bcdc:	68fb      	ldr	r3, [r7, #12]
 810bcde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810bce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810bce4:	683b      	ldr	r3, [r7, #0]
 810bce6:	681b      	ldr	r3, [r3, #0]
 810bce8:	021b      	lsls	r3, r3, #8
 810bcea:	68fa      	ldr	r2, [r7, #12]
 810bcec:	4313      	orrs	r3, r2
 810bcee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810bcf0:	697b      	ldr	r3, [r7, #20]
 810bcf2:	f023 0320 	bic.w	r3, r3, #32
 810bcf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810bcf8:	683b      	ldr	r3, [r7, #0]
 810bcfa:	689b      	ldr	r3, [r3, #8]
 810bcfc:	011b      	lsls	r3, r3, #4
 810bcfe:	697a      	ldr	r2, [r7, #20]
 810bd00:	4313      	orrs	r3, r2
 810bd02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810bd04:	687b      	ldr	r3, [r7, #4]
 810bd06:	4a28      	ldr	r2, [pc, #160]	@ (810bda8 <TIM_OC2_SetConfig+0x100>)
 810bd08:	4293      	cmp	r3, r2
 810bd0a:	d003      	beq.n	810bd14 <TIM_OC2_SetConfig+0x6c>
 810bd0c:	687b      	ldr	r3, [r7, #4]
 810bd0e:	4a27      	ldr	r2, [pc, #156]	@ (810bdac <TIM_OC2_SetConfig+0x104>)
 810bd10:	4293      	cmp	r3, r2
 810bd12:	d10d      	bne.n	810bd30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810bd14:	697b      	ldr	r3, [r7, #20]
 810bd16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810bd1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810bd1c:	683b      	ldr	r3, [r7, #0]
 810bd1e:	68db      	ldr	r3, [r3, #12]
 810bd20:	011b      	lsls	r3, r3, #4
 810bd22:	697a      	ldr	r2, [r7, #20]
 810bd24:	4313      	orrs	r3, r2
 810bd26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810bd28:	697b      	ldr	r3, [r7, #20]
 810bd2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810bd2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bd30:	687b      	ldr	r3, [r7, #4]
 810bd32:	4a1d      	ldr	r2, [pc, #116]	@ (810bda8 <TIM_OC2_SetConfig+0x100>)
 810bd34:	4293      	cmp	r3, r2
 810bd36:	d00f      	beq.n	810bd58 <TIM_OC2_SetConfig+0xb0>
 810bd38:	687b      	ldr	r3, [r7, #4]
 810bd3a:	4a1c      	ldr	r2, [pc, #112]	@ (810bdac <TIM_OC2_SetConfig+0x104>)
 810bd3c:	4293      	cmp	r3, r2
 810bd3e:	d00b      	beq.n	810bd58 <TIM_OC2_SetConfig+0xb0>
 810bd40:	687b      	ldr	r3, [r7, #4]
 810bd42:	4a1b      	ldr	r2, [pc, #108]	@ (810bdb0 <TIM_OC2_SetConfig+0x108>)
 810bd44:	4293      	cmp	r3, r2
 810bd46:	d007      	beq.n	810bd58 <TIM_OC2_SetConfig+0xb0>
 810bd48:	687b      	ldr	r3, [r7, #4]
 810bd4a:	4a1a      	ldr	r2, [pc, #104]	@ (810bdb4 <TIM_OC2_SetConfig+0x10c>)
 810bd4c:	4293      	cmp	r3, r2
 810bd4e:	d003      	beq.n	810bd58 <TIM_OC2_SetConfig+0xb0>
 810bd50:	687b      	ldr	r3, [r7, #4]
 810bd52:	4a19      	ldr	r2, [pc, #100]	@ (810bdb8 <TIM_OC2_SetConfig+0x110>)
 810bd54:	4293      	cmp	r3, r2
 810bd56:	d113      	bne.n	810bd80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810bd58:	693b      	ldr	r3, [r7, #16]
 810bd5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810bd5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810bd60:	693b      	ldr	r3, [r7, #16]
 810bd62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810bd66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810bd68:	683b      	ldr	r3, [r7, #0]
 810bd6a:	695b      	ldr	r3, [r3, #20]
 810bd6c:	009b      	lsls	r3, r3, #2
 810bd6e:	693a      	ldr	r2, [r7, #16]
 810bd70:	4313      	orrs	r3, r2
 810bd72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810bd74:	683b      	ldr	r3, [r7, #0]
 810bd76:	699b      	ldr	r3, [r3, #24]
 810bd78:	009b      	lsls	r3, r3, #2
 810bd7a:	693a      	ldr	r2, [r7, #16]
 810bd7c:	4313      	orrs	r3, r2
 810bd7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bd80:	687b      	ldr	r3, [r7, #4]
 810bd82:	693a      	ldr	r2, [r7, #16]
 810bd84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810bd86:	687b      	ldr	r3, [r7, #4]
 810bd88:	68fa      	ldr	r2, [r7, #12]
 810bd8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810bd8c:	683b      	ldr	r3, [r7, #0]
 810bd8e:	685a      	ldr	r2, [r3, #4]
 810bd90:	687b      	ldr	r3, [r7, #4]
 810bd92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bd94:	687b      	ldr	r3, [r7, #4]
 810bd96:	697a      	ldr	r2, [r7, #20]
 810bd98:	621a      	str	r2, [r3, #32]
}
 810bd9a:	bf00      	nop
 810bd9c:	371c      	adds	r7, #28
 810bd9e:	46bd      	mov	sp, r7
 810bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bda4:	4770      	bx	lr
 810bda6:	bf00      	nop
 810bda8:	40010000 	.word	0x40010000
 810bdac:	40010400 	.word	0x40010400
 810bdb0:	40014000 	.word	0x40014000
 810bdb4:	40014400 	.word	0x40014400
 810bdb8:	40014800 	.word	0x40014800

0810bdbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810bdbc:	b480      	push	{r7}
 810bdbe:	b087      	sub	sp, #28
 810bdc0:	af00      	add	r7, sp, #0
 810bdc2:	6078      	str	r0, [r7, #4]
 810bdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bdc6:	687b      	ldr	r3, [r7, #4]
 810bdc8:	6a1b      	ldr	r3, [r3, #32]
 810bdca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810bdcc:	687b      	ldr	r3, [r7, #4]
 810bdce:	6a1b      	ldr	r3, [r3, #32]
 810bdd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810bdd4:	687b      	ldr	r3, [r7, #4]
 810bdd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bdd8:	687b      	ldr	r3, [r7, #4]
 810bdda:	685b      	ldr	r3, [r3, #4]
 810bddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810bdde:	687b      	ldr	r3, [r7, #4]
 810bde0:	69db      	ldr	r3, [r3, #28]
 810bde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810bde4:	68fb      	ldr	r3, [r7, #12]
 810bde6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810bdea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bdee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810bdf0:	68fb      	ldr	r3, [r7, #12]
 810bdf2:	f023 0303 	bic.w	r3, r3, #3
 810bdf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810bdf8:	683b      	ldr	r3, [r7, #0]
 810bdfa:	681b      	ldr	r3, [r3, #0]
 810bdfc:	68fa      	ldr	r2, [r7, #12]
 810bdfe:	4313      	orrs	r3, r2
 810be00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810be02:	697b      	ldr	r3, [r7, #20]
 810be04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810be08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810be0a:	683b      	ldr	r3, [r7, #0]
 810be0c:	689b      	ldr	r3, [r3, #8]
 810be0e:	021b      	lsls	r3, r3, #8
 810be10:	697a      	ldr	r2, [r7, #20]
 810be12:	4313      	orrs	r3, r2
 810be14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810be16:	687b      	ldr	r3, [r7, #4]
 810be18:	4a27      	ldr	r2, [pc, #156]	@ (810beb8 <TIM_OC3_SetConfig+0xfc>)
 810be1a:	4293      	cmp	r3, r2
 810be1c:	d003      	beq.n	810be26 <TIM_OC3_SetConfig+0x6a>
 810be1e:	687b      	ldr	r3, [r7, #4]
 810be20:	4a26      	ldr	r2, [pc, #152]	@ (810bebc <TIM_OC3_SetConfig+0x100>)
 810be22:	4293      	cmp	r3, r2
 810be24:	d10d      	bne.n	810be42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810be26:	697b      	ldr	r3, [r7, #20]
 810be28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810be2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810be2e:	683b      	ldr	r3, [r7, #0]
 810be30:	68db      	ldr	r3, [r3, #12]
 810be32:	021b      	lsls	r3, r3, #8
 810be34:	697a      	ldr	r2, [r7, #20]
 810be36:	4313      	orrs	r3, r2
 810be38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810be3a:	697b      	ldr	r3, [r7, #20]
 810be3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810be40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810be42:	687b      	ldr	r3, [r7, #4]
 810be44:	4a1c      	ldr	r2, [pc, #112]	@ (810beb8 <TIM_OC3_SetConfig+0xfc>)
 810be46:	4293      	cmp	r3, r2
 810be48:	d00f      	beq.n	810be6a <TIM_OC3_SetConfig+0xae>
 810be4a:	687b      	ldr	r3, [r7, #4]
 810be4c:	4a1b      	ldr	r2, [pc, #108]	@ (810bebc <TIM_OC3_SetConfig+0x100>)
 810be4e:	4293      	cmp	r3, r2
 810be50:	d00b      	beq.n	810be6a <TIM_OC3_SetConfig+0xae>
 810be52:	687b      	ldr	r3, [r7, #4]
 810be54:	4a1a      	ldr	r2, [pc, #104]	@ (810bec0 <TIM_OC3_SetConfig+0x104>)
 810be56:	4293      	cmp	r3, r2
 810be58:	d007      	beq.n	810be6a <TIM_OC3_SetConfig+0xae>
 810be5a:	687b      	ldr	r3, [r7, #4]
 810be5c:	4a19      	ldr	r2, [pc, #100]	@ (810bec4 <TIM_OC3_SetConfig+0x108>)
 810be5e:	4293      	cmp	r3, r2
 810be60:	d003      	beq.n	810be6a <TIM_OC3_SetConfig+0xae>
 810be62:	687b      	ldr	r3, [r7, #4]
 810be64:	4a18      	ldr	r2, [pc, #96]	@ (810bec8 <TIM_OC3_SetConfig+0x10c>)
 810be66:	4293      	cmp	r3, r2
 810be68:	d113      	bne.n	810be92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810be6a:	693b      	ldr	r3, [r7, #16]
 810be6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810be70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810be72:	693b      	ldr	r3, [r7, #16]
 810be74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810be78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810be7a:	683b      	ldr	r3, [r7, #0]
 810be7c:	695b      	ldr	r3, [r3, #20]
 810be7e:	011b      	lsls	r3, r3, #4
 810be80:	693a      	ldr	r2, [r7, #16]
 810be82:	4313      	orrs	r3, r2
 810be84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810be86:	683b      	ldr	r3, [r7, #0]
 810be88:	699b      	ldr	r3, [r3, #24]
 810be8a:	011b      	lsls	r3, r3, #4
 810be8c:	693a      	ldr	r2, [r7, #16]
 810be8e:	4313      	orrs	r3, r2
 810be90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810be92:	687b      	ldr	r3, [r7, #4]
 810be94:	693a      	ldr	r2, [r7, #16]
 810be96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810be98:	687b      	ldr	r3, [r7, #4]
 810be9a:	68fa      	ldr	r2, [r7, #12]
 810be9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810be9e:	683b      	ldr	r3, [r7, #0]
 810bea0:	685a      	ldr	r2, [r3, #4]
 810bea2:	687b      	ldr	r3, [r7, #4]
 810bea4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bea6:	687b      	ldr	r3, [r7, #4]
 810bea8:	697a      	ldr	r2, [r7, #20]
 810beaa:	621a      	str	r2, [r3, #32]
}
 810beac:	bf00      	nop
 810beae:	371c      	adds	r7, #28
 810beb0:	46bd      	mov	sp, r7
 810beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810beb6:	4770      	bx	lr
 810beb8:	40010000 	.word	0x40010000
 810bebc:	40010400 	.word	0x40010400
 810bec0:	40014000 	.word	0x40014000
 810bec4:	40014400 	.word	0x40014400
 810bec8:	40014800 	.word	0x40014800

0810becc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810becc:	b480      	push	{r7}
 810bece:	b087      	sub	sp, #28
 810bed0:	af00      	add	r7, sp, #0
 810bed2:	6078      	str	r0, [r7, #4]
 810bed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bed6:	687b      	ldr	r3, [r7, #4]
 810bed8:	6a1b      	ldr	r3, [r3, #32]
 810beda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810bedc:	687b      	ldr	r3, [r7, #4]
 810bede:	6a1b      	ldr	r3, [r3, #32]
 810bee0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810bee4:	687b      	ldr	r3, [r7, #4]
 810bee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bee8:	687b      	ldr	r3, [r7, #4]
 810beea:	685b      	ldr	r3, [r3, #4]
 810beec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810beee:	687b      	ldr	r3, [r7, #4]
 810bef0:	69db      	ldr	r3, [r3, #28]
 810bef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810bef4:	68fb      	ldr	r3, [r7, #12]
 810bef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810befa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810befe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810bf00:	68fb      	ldr	r3, [r7, #12]
 810bf02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810bf06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810bf08:	683b      	ldr	r3, [r7, #0]
 810bf0a:	681b      	ldr	r3, [r3, #0]
 810bf0c:	021b      	lsls	r3, r3, #8
 810bf0e:	68fa      	ldr	r2, [r7, #12]
 810bf10:	4313      	orrs	r3, r2
 810bf12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810bf14:	693b      	ldr	r3, [r7, #16]
 810bf16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810bf1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810bf1c:	683b      	ldr	r3, [r7, #0]
 810bf1e:	689b      	ldr	r3, [r3, #8]
 810bf20:	031b      	lsls	r3, r3, #12
 810bf22:	693a      	ldr	r2, [r7, #16]
 810bf24:	4313      	orrs	r3, r2
 810bf26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bf28:	687b      	ldr	r3, [r7, #4]
 810bf2a:	4a18      	ldr	r2, [pc, #96]	@ (810bf8c <TIM_OC4_SetConfig+0xc0>)
 810bf2c:	4293      	cmp	r3, r2
 810bf2e:	d00f      	beq.n	810bf50 <TIM_OC4_SetConfig+0x84>
 810bf30:	687b      	ldr	r3, [r7, #4]
 810bf32:	4a17      	ldr	r2, [pc, #92]	@ (810bf90 <TIM_OC4_SetConfig+0xc4>)
 810bf34:	4293      	cmp	r3, r2
 810bf36:	d00b      	beq.n	810bf50 <TIM_OC4_SetConfig+0x84>
 810bf38:	687b      	ldr	r3, [r7, #4]
 810bf3a:	4a16      	ldr	r2, [pc, #88]	@ (810bf94 <TIM_OC4_SetConfig+0xc8>)
 810bf3c:	4293      	cmp	r3, r2
 810bf3e:	d007      	beq.n	810bf50 <TIM_OC4_SetConfig+0x84>
 810bf40:	687b      	ldr	r3, [r7, #4]
 810bf42:	4a15      	ldr	r2, [pc, #84]	@ (810bf98 <TIM_OC4_SetConfig+0xcc>)
 810bf44:	4293      	cmp	r3, r2
 810bf46:	d003      	beq.n	810bf50 <TIM_OC4_SetConfig+0x84>
 810bf48:	687b      	ldr	r3, [r7, #4]
 810bf4a:	4a14      	ldr	r2, [pc, #80]	@ (810bf9c <TIM_OC4_SetConfig+0xd0>)
 810bf4c:	4293      	cmp	r3, r2
 810bf4e:	d109      	bne.n	810bf64 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810bf50:	697b      	ldr	r3, [r7, #20]
 810bf52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810bf56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810bf58:	683b      	ldr	r3, [r7, #0]
 810bf5a:	695b      	ldr	r3, [r3, #20]
 810bf5c:	019b      	lsls	r3, r3, #6
 810bf5e:	697a      	ldr	r2, [r7, #20]
 810bf60:	4313      	orrs	r3, r2
 810bf62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810bf64:	687b      	ldr	r3, [r7, #4]
 810bf66:	697a      	ldr	r2, [r7, #20]
 810bf68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810bf6a:	687b      	ldr	r3, [r7, #4]
 810bf6c:	68fa      	ldr	r2, [r7, #12]
 810bf6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810bf70:	683b      	ldr	r3, [r7, #0]
 810bf72:	685a      	ldr	r2, [r3, #4]
 810bf74:	687b      	ldr	r3, [r7, #4]
 810bf76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810bf78:	687b      	ldr	r3, [r7, #4]
 810bf7a:	693a      	ldr	r2, [r7, #16]
 810bf7c:	621a      	str	r2, [r3, #32]
}
 810bf7e:	bf00      	nop
 810bf80:	371c      	adds	r7, #28
 810bf82:	46bd      	mov	sp, r7
 810bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf88:	4770      	bx	lr
 810bf8a:	bf00      	nop
 810bf8c:	40010000 	.word	0x40010000
 810bf90:	40010400 	.word	0x40010400
 810bf94:	40014000 	.word	0x40014000
 810bf98:	40014400 	.word	0x40014400
 810bf9c:	40014800 	.word	0x40014800

0810bfa0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810bfa0:	b480      	push	{r7}
 810bfa2:	b087      	sub	sp, #28
 810bfa4:	af00      	add	r7, sp, #0
 810bfa6:	6078      	str	r0, [r7, #4]
 810bfa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810bfaa:	687b      	ldr	r3, [r7, #4]
 810bfac:	6a1b      	ldr	r3, [r3, #32]
 810bfae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810bfb0:	687b      	ldr	r3, [r7, #4]
 810bfb2:	6a1b      	ldr	r3, [r3, #32]
 810bfb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810bfb8:	687b      	ldr	r3, [r7, #4]
 810bfba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810bfbc:	687b      	ldr	r3, [r7, #4]
 810bfbe:	685b      	ldr	r3, [r3, #4]
 810bfc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810bfc2:	687b      	ldr	r3, [r7, #4]
 810bfc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810bfc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810bfc8:	68fb      	ldr	r3, [r7, #12]
 810bfca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810bfce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810bfd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810bfd4:	683b      	ldr	r3, [r7, #0]
 810bfd6:	681b      	ldr	r3, [r3, #0]
 810bfd8:	68fa      	ldr	r2, [r7, #12]
 810bfda:	4313      	orrs	r3, r2
 810bfdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810bfde:	693b      	ldr	r3, [r7, #16]
 810bfe0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810bfe4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810bfe6:	683b      	ldr	r3, [r7, #0]
 810bfe8:	689b      	ldr	r3, [r3, #8]
 810bfea:	041b      	lsls	r3, r3, #16
 810bfec:	693a      	ldr	r2, [r7, #16]
 810bfee:	4313      	orrs	r3, r2
 810bff0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810bff2:	687b      	ldr	r3, [r7, #4]
 810bff4:	4a17      	ldr	r2, [pc, #92]	@ (810c054 <TIM_OC5_SetConfig+0xb4>)
 810bff6:	4293      	cmp	r3, r2
 810bff8:	d00f      	beq.n	810c01a <TIM_OC5_SetConfig+0x7a>
 810bffa:	687b      	ldr	r3, [r7, #4]
 810bffc:	4a16      	ldr	r2, [pc, #88]	@ (810c058 <TIM_OC5_SetConfig+0xb8>)
 810bffe:	4293      	cmp	r3, r2
 810c000:	d00b      	beq.n	810c01a <TIM_OC5_SetConfig+0x7a>
 810c002:	687b      	ldr	r3, [r7, #4]
 810c004:	4a15      	ldr	r2, [pc, #84]	@ (810c05c <TIM_OC5_SetConfig+0xbc>)
 810c006:	4293      	cmp	r3, r2
 810c008:	d007      	beq.n	810c01a <TIM_OC5_SetConfig+0x7a>
 810c00a:	687b      	ldr	r3, [r7, #4]
 810c00c:	4a14      	ldr	r2, [pc, #80]	@ (810c060 <TIM_OC5_SetConfig+0xc0>)
 810c00e:	4293      	cmp	r3, r2
 810c010:	d003      	beq.n	810c01a <TIM_OC5_SetConfig+0x7a>
 810c012:	687b      	ldr	r3, [r7, #4]
 810c014:	4a13      	ldr	r2, [pc, #76]	@ (810c064 <TIM_OC5_SetConfig+0xc4>)
 810c016:	4293      	cmp	r3, r2
 810c018:	d109      	bne.n	810c02e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810c01a:	697b      	ldr	r3, [r7, #20]
 810c01c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810c020:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810c022:	683b      	ldr	r3, [r7, #0]
 810c024:	695b      	ldr	r3, [r3, #20]
 810c026:	021b      	lsls	r3, r3, #8
 810c028:	697a      	ldr	r2, [r7, #20]
 810c02a:	4313      	orrs	r3, r2
 810c02c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810c02e:	687b      	ldr	r3, [r7, #4]
 810c030:	697a      	ldr	r2, [r7, #20]
 810c032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810c034:	687b      	ldr	r3, [r7, #4]
 810c036:	68fa      	ldr	r2, [r7, #12]
 810c038:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810c03a:	683b      	ldr	r3, [r7, #0]
 810c03c:	685a      	ldr	r2, [r3, #4]
 810c03e:	687b      	ldr	r3, [r7, #4]
 810c040:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810c042:	687b      	ldr	r3, [r7, #4]
 810c044:	693a      	ldr	r2, [r7, #16]
 810c046:	621a      	str	r2, [r3, #32]
}
 810c048:	bf00      	nop
 810c04a:	371c      	adds	r7, #28
 810c04c:	46bd      	mov	sp, r7
 810c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c052:	4770      	bx	lr
 810c054:	40010000 	.word	0x40010000
 810c058:	40010400 	.word	0x40010400
 810c05c:	40014000 	.word	0x40014000
 810c060:	40014400 	.word	0x40014400
 810c064:	40014800 	.word	0x40014800

0810c068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810c068:	b480      	push	{r7}
 810c06a:	b087      	sub	sp, #28
 810c06c:	af00      	add	r7, sp, #0
 810c06e:	6078      	str	r0, [r7, #4]
 810c070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810c072:	687b      	ldr	r3, [r7, #4]
 810c074:	6a1b      	ldr	r3, [r3, #32]
 810c076:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810c078:	687b      	ldr	r3, [r7, #4]
 810c07a:	6a1b      	ldr	r3, [r3, #32]
 810c07c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810c080:	687b      	ldr	r3, [r7, #4]
 810c082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810c084:	687b      	ldr	r3, [r7, #4]
 810c086:	685b      	ldr	r3, [r3, #4]
 810c088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810c08a:	687b      	ldr	r3, [r7, #4]
 810c08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810c090:	68fb      	ldr	r3, [r7, #12]
 810c092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810c096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810c09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810c09c:	683b      	ldr	r3, [r7, #0]
 810c09e:	681b      	ldr	r3, [r3, #0]
 810c0a0:	021b      	lsls	r3, r3, #8
 810c0a2:	68fa      	ldr	r2, [r7, #12]
 810c0a4:	4313      	orrs	r3, r2
 810c0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810c0a8:	693b      	ldr	r3, [r7, #16]
 810c0aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810c0ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810c0b0:	683b      	ldr	r3, [r7, #0]
 810c0b2:	689b      	ldr	r3, [r3, #8]
 810c0b4:	051b      	lsls	r3, r3, #20
 810c0b6:	693a      	ldr	r2, [r7, #16]
 810c0b8:	4313      	orrs	r3, r2
 810c0ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810c0bc:	687b      	ldr	r3, [r7, #4]
 810c0be:	4a18      	ldr	r2, [pc, #96]	@ (810c120 <TIM_OC6_SetConfig+0xb8>)
 810c0c0:	4293      	cmp	r3, r2
 810c0c2:	d00f      	beq.n	810c0e4 <TIM_OC6_SetConfig+0x7c>
 810c0c4:	687b      	ldr	r3, [r7, #4]
 810c0c6:	4a17      	ldr	r2, [pc, #92]	@ (810c124 <TIM_OC6_SetConfig+0xbc>)
 810c0c8:	4293      	cmp	r3, r2
 810c0ca:	d00b      	beq.n	810c0e4 <TIM_OC6_SetConfig+0x7c>
 810c0cc:	687b      	ldr	r3, [r7, #4]
 810c0ce:	4a16      	ldr	r2, [pc, #88]	@ (810c128 <TIM_OC6_SetConfig+0xc0>)
 810c0d0:	4293      	cmp	r3, r2
 810c0d2:	d007      	beq.n	810c0e4 <TIM_OC6_SetConfig+0x7c>
 810c0d4:	687b      	ldr	r3, [r7, #4]
 810c0d6:	4a15      	ldr	r2, [pc, #84]	@ (810c12c <TIM_OC6_SetConfig+0xc4>)
 810c0d8:	4293      	cmp	r3, r2
 810c0da:	d003      	beq.n	810c0e4 <TIM_OC6_SetConfig+0x7c>
 810c0dc:	687b      	ldr	r3, [r7, #4]
 810c0de:	4a14      	ldr	r2, [pc, #80]	@ (810c130 <TIM_OC6_SetConfig+0xc8>)
 810c0e0:	4293      	cmp	r3, r2
 810c0e2:	d109      	bne.n	810c0f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810c0e4:	697b      	ldr	r3, [r7, #20]
 810c0e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810c0ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810c0ec:	683b      	ldr	r3, [r7, #0]
 810c0ee:	695b      	ldr	r3, [r3, #20]
 810c0f0:	029b      	lsls	r3, r3, #10
 810c0f2:	697a      	ldr	r2, [r7, #20]
 810c0f4:	4313      	orrs	r3, r2
 810c0f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810c0f8:	687b      	ldr	r3, [r7, #4]
 810c0fa:	697a      	ldr	r2, [r7, #20]
 810c0fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810c0fe:	687b      	ldr	r3, [r7, #4]
 810c100:	68fa      	ldr	r2, [r7, #12]
 810c102:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810c104:	683b      	ldr	r3, [r7, #0]
 810c106:	685a      	ldr	r2, [r3, #4]
 810c108:	687b      	ldr	r3, [r7, #4]
 810c10a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810c10c:	687b      	ldr	r3, [r7, #4]
 810c10e:	693a      	ldr	r2, [r7, #16]
 810c110:	621a      	str	r2, [r3, #32]
}
 810c112:	bf00      	nop
 810c114:	371c      	adds	r7, #28
 810c116:	46bd      	mov	sp, r7
 810c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c11c:	4770      	bx	lr
 810c11e:	bf00      	nop
 810c120:	40010000 	.word	0x40010000
 810c124:	40010400 	.word	0x40010400
 810c128:	40014000 	.word	0x40014000
 810c12c:	40014400 	.word	0x40014400
 810c130:	40014800 	.word	0x40014800

0810c134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810c134:	b480      	push	{r7}
 810c136:	b087      	sub	sp, #28
 810c138:	af00      	add	r7, sp, #0
 810c13a:	60f8      	str	r0, [r7, #12]
 810c13c:	60b9      	str	r1, [r7, #8]
 810c13e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810c140:	68fb      	ldr	r3, [r7, #12]
 810c142:	6a1b      	ldr	r3, [r3, #32]
 810c144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810c146:	68fb      	ldr	r3, [r7, #12]
 810c148:	6a1b      	ldr	r3, [r3, #32]
 810c14a:	f023 0201 	bic.w	r2, r3, #1
 810c14e:	68fb      	ldr	r3, [r7, #12]
 810c150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810c152:	68fb      	ldr	r3, [r7, #12]
 810c154:	699b      	ldr	r3, [r3, #24]
 810c156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810c158:	693b      	ldr	r3, [r7, #16]
 810c15a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810c15e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	011b      	lsls	r3, r3, #4
 810c164:	693a      	ldr	r2, [r7, #16]
 810c166:	4313      	orrs	r3, r2
 810c168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810c16a:	697b      	ldr	r3, [r7, #20]
 810c16c:	f023 030a 	bic.w	r3, r3, #10
 810c170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810c172:	697a      	ldr	r2, [r7, #20]
 810c174:	68bb      	ldr	r3, [r7, #8]
 810c176:	4313      	orrs	r3, r2
 810c178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810c17a:	68fb      	ldr	r3, [r7, #12]
 810c17c:	693a      	ldr	r2, [r7, #16]
 810c17e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810c180:	68fb      	ldr	r3, [r7, #12]
 810c182:	697a      	ldr	r2, [r7, #20]
 810c184:	621a      	str	r2, [r3, #32]
}
 810c186:	bf00      	nop
 810c188:	371c      	adds	r7, #28
 810c18a:	46bd      	mov	sp, r7
 810c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c190:	4770      	bx	lr

0810c192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810c192:	b480      	push	{r7}
 810c194:	b087      	sub	sp, #28
 810c196:	af00      	add	r7, sp, #0
 810c198:	60f8      	str	r0, [r7, #12]
 810c19a:	60b9      	str	r1, [r7, #8]
 810c19c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810c19e:	68fb      	ldr	r3, [r7, #12]
 810c1a0:	6a1b      	ldr	r3, [r3, #32]
 810c1a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810c1a4:	68fb      	ldr	r3, [r7, #12]
 810c1a6:	6a1b      	ldr	r3, [r3, #32]
 810c1a8:	f023 0210 	bic.w	r2, r3, #16
 810c1ac:	68fb      	ldr	r3, [r7, #12]
 810c1ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810c1b0:	68fb      	ldr	r3, [r7, #12]
 810c1b2:	699b      	ldr	r3, [r3, #24]
 810c1b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810c1b6:	693b      	ldr	r3, [r7, #16]
 810c1b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810c1bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810c1be:	687b      	ldr	r3, [r7, #4]
 810c1c0:	031b      	lsls	r3, r3, #12
 810c1c2:	693a      	ldr	r2, [r7, #16]
 810c1c4:	4313      	orrs	r3, r2
 810c1c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810c1c8:	697b      	ldr	r3, [r7, #20]
 810c1ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810c1ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810c1d0:	68bb      	ldr	r3, [r7, #8]
 810c1d2:	011b      	lsls	r3, r3, #4
 810c1d4:	697a      	ldr	r2, [r7, #20]
 810c1d6:	4313      	orrs	r3, r2
 810c1d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810c1da:	68fb      	ldr	r3, [r7, #12]
 810c1dc:	693a      	ldr	r2, [r7, #16]
 810c1de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810c1e0:	68fb      	ldr	r3, [r7, #12]
 810c1e2:	697a      	ldr	r2, [r7, #20]
 810c1e4:	621a      	str	r2, [r3, #32]
}
 810c1e6:	bf00      	nop
 810c1e8:	371c      	adds	r7, #28
 810c1ea:	46bd      	mov	sp, r7
 810c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1f0:	4770      	bx	lr

0810c1f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810c1f2:	b480      	push	{r7}
 810c1f4:	b085      	sub	sp, #20
 810c1f6:	af00      	add	r7, sp, #0
 810c1f8:	6078      	str	r0, [r7, #4]
 810c1fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810c1fc:	687b      	ldr	r3, [r7, #4]
 810c1fe:	689b      	ldr	r3, [r3, #8]
 810c200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810c202:	68fb      	ldr	r3, [r7, #12]
 810c204:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810c208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810c20c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810c20e:	683a      	ldr	r2, [r7, #0]
 810c210:	68fb      	ldr	r3, [r7, #12]
 810c212:	4313      	orrs	r3, r2
 810c214:	f043 0307 	orr.w	r3, r3, #7
 810c218:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810c21a:	687b      	ldr	r3, [r7, #4]
 810c21c:	68fa      	ldr	r2, [r7, #12]
 810c21e:	609a      	str	r2, [r3, #8]
}
 810c220:	bf00      	nop
 810c222:	3714      	adds	r7, #20
 810c224:	46bd      	mov	sp, r7
 810c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c22a:	4770      	bx	lr

0810c22c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810c22c:	b480      	push	{r7}
 810c22e:	b087      	sub	sp, #28
 810c230:	af00      	add	r7, sp, #0
 810c232:	60f8      	str	r0, [r7, #12]
 810c234:	60b9      	str	r1, [r7, #8]
 810c236:	607a      	str	r2, [r7, #4]
 810c238:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810c23a:	68fb      	ldr	r3, [r7, #12]
 810c23c:	689b      	ldr	r3, [r3, #8]
 810c23e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810c240:	697b      	ldr	r3, [r7, #20]
 810c242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810c246:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810c248:	683b      	ldr	r3, [r7, #0]
 810c24a:	021a      	lsls	r2, r3, #8
 810c24c:	687b      	ldr	r3, [r7, #4]
 810c24e:	431a      	orrs	r2, r3
 810c250:	68bb      	ldr	r3, [r7, #8]
 810c252:	4313      	orrs	r3, r2
 810c254:	697a      	ldr	r2, [r7, #20]
 810c256:	4313      	orrs	r3, r2
 810c258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810c25a:	68fb      	ldr	r3, [r7, #12]
 810c25c:	697a      	ldr	r2, [r7, #20]
 810c25e:	609a      	str	r2, [r3, #8]
}
 810c260:	bf00      	nop
 810c262:	371c      	adds	r7, #28
 810c264:	46bd      	mov	sp, r7
 810c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c26a:	4770      	bx	lr

0810c26c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 810c26c:	b480      	push	{r7}
 810c26e:	b087      	sub	sp, #28
 810c270:	af00      	add	r7, sp, #0
 810c272:	60f8      	str	r0, [r7, #12]
 810c274:	60b9      	str	r1, [r7, #8]
 810c276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810c278:	68bb      	ldr	r3, [r7, #8]
 810c27a:	f003 031f 	and.w	r3, r3, #31
 810c27e:	2201      	movs	r2, #1
 810c280:	fa02 f303 	lsl.w	r3, r2, r3
 810c284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810c286:	68fb      	ldr	r3, [r7, #12]
 810c288:	6a1a      	ldr	r2, [r3, #32]
 810c28a:	697b      	ldr	r3, [r7, #20]
 810c28c:	43db      	mvns	r3, r3
 810c28e:	401a      	ands	r2, r3
 810c290:	68fb      	ldr	r3, [r7, #12]
 810c292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810c294:	68fb      	ldr	r3, [r7, #12]
 810c296:	6a1a      	ldr	r2, [r3, #32]
 810c298:	68bb      	ldr	r3, [r7, #8]
 810c29a:	f003 031f 	and.w	r3, r3, #31
 810c29e:	6879      	ldr	r1, [r7, #4]
 810c2a0:	fa01 f303 	lsl.w	r3, r1, r3
 810c2a4:	431a      	orrs	r2, r3
 810c2a6:	68fb      	ldr	r3, [r7, #12]
 810c2a8:	621a      	str	r2, [r3, #32]
}
 810c2aa:	bf00      	nop
 810c2ac:	371c      	adds	r7, #28
 810c2ae:	46bd      	mov	sp, r7
 810c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2b4:	4770      	bx	lr
	...

0810c2b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810c2b8:	b480      	push	{r7}
 810c2ba:	b085      	sub	sp, #20
 810c2bc:	af00      	add	r7, sp, #0
 810c2be:	6078      	str	r0, [r7, #4]
 810c2c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810c2c2:	687b      	ldr	r3, [r7, #4]
 810c2c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810c2c8:	2b01      	cmp	r3, #1
 810c2ca:	d101      	bne.n	810c2d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810c2cc:	2302      	movs	r3, #2
 810c2ce:	e06d      	b.n	810c3ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810c2d0:	687b      	ldr	r3, [r7, #4]
 810c2d2:	2201      	movs	r2, #1
 810c2d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810c2d8:	687b      	ldr	r3, [r7, #4]
 810c2da:	2202      	movs	r2, #2
 810c2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810c2e0:	687b      	ldr	r3, [r7, #4]
 810c2e2:	681b      	ldr	r3, [r3, #0]
 810c2e4:	685b      	ldr	r3, [r3, #4]
 810c2e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810c2e8:	687b      	ldr	r3, [r7, #4]
 810c2ea:	681b      	ldr	r3, [r3, #0]
 810c2ec:	689b      	ldr	r3, [r3, #8]
 810c2ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810c2f0:	687b      	ldr	r3, [r7, #4]
 810c2f2:	681b      	ldr	r3, [r3, #0]
 810c2f4:	4a30      	ldr	r2, [pc, #192]	@ (810c3b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810c2f6:	4293      	cmp	r3, r2
 810c2f8:	d004      	beq.n	810c304 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810c2fa:	687b      	ldr	r3, [r7, #4]
 810c2fc:	681b      	ldr	r3, [r3, #0]
 810c2fe:	4a2f      	ldr	r2, [pc, #188]	@ (810c3bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810c300:	4293      	cmp	r3, r2
 810c302:	d108      	bne.n	810c316 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810c304:	68fb      	ldr	r3, [r7, #12]
 810c306:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810c30a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810c30c:	683b      	ldr	r3, [r7, #0]
 810c30e:	685b      	ldr	r3, [r3, #4]
 810c310:	68fa      	ldr	r2, [r7, #12]
 810c312:	4313      	orrs	r3, r2
 810c314:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810c316:	68fb      	ldr	r3, [r7, #12]
 810c318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810c31c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810c31e:	683b      	ldr	r3, [r7, #0]
 810c320:	681b      	ldr	r3, [r3, #0]
 810c322:	68fa      	ldr	r2, [r7, #12]
 810c324:	4313      	orrs	r3, r2
 810c326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810c328:	687b      	ldr	r3, [r7, #4]
 810c32a:	681b      	ldr	r3, [r3, #0]
 810c32c:	68fa      	ldr	r2, [r7, #12]
 810c32e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810c330:	687b      	ldr	r3, [r7, #4]
 810c332:	681b      	ldr	r3, [r3, #0]
 810c334:	4a20      	ldr	r2, [pc, #128]	@ (810c3b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810c336:	4293      	cmp	r3, r2
 810c338:	d022      	beq.n	810c380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c33a:	687b      	ldr	r3, [r7, #4]
 810c33c:	681b      	ldr	r3, [r3, #0]
 810c33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c342:	d01d      	beq.n	810c380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c344:	687b      	ldr	r3, [r7, #4]
 810c346:	681b      	ldr	r3, [r3, #0]
 810c348:	4a1d      	ldr	r2, [pc, #116]	@ (810c3c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810c34a:	4293      	cmp	r3, r2
 810c34c:	d018      	beq.n	810c380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c34e:	687b      	ldr	r3, [r7, #4]
 810c350:	681b      	ldr	r3, [r3, #0]
 810c352:	4a1c      	ldr	r2, [pc, #112]	@ (810c3c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810c354:	4293      	cmp	r3, r2
 810c356:	d013      	beq.n	810c380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c358:	687b      	ldr	r3, [r7, #4]
 810c35a:	681b      	ldr	r3, [r3, #0]
 810c35c:	4a1a      	ldr	r2, [pc, #104]	@ (810c3c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810c35e:	4293      	cmp	r3, r2
 810c360:	d00e      	beq.n	810c380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c362:	687b      	ldr	r3, [r7, #4]
 810c364:	681b      	ldr	r3, [r3, #0]
 810c366:	4a15      	ldr	r2, [pc, #84]	@ (810c3bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810c368:	4293      	cmp	r3, r2
 810c36a:	d009      	beq.n	810c380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c36c:	687b      	ldr	r3, [r7, #4]
 810c36e:	681b      	ldr	r3, [r3, #0]
 810c370:	4a16      	ldr	r2, [pc, #88]	@ (810c3cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810c372:	4293      	cmp	r3, r2
 810c374:	d004      	beq.n	810c380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810c376:	687b      	ldr	r3, [r7, #4]
 810c378:	681b      	ldr	r3, [r3, #0]
 810c37a:	4a15      	ldr	r2, [pc, #84]	@ (810c3d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810c37c:	4293      	cmp	r3, r2
 810c37e:	d10c      	bne.n	810c39a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810c380:	68bb      	ldr	r3, [r7, #8]
 810c382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810c386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810c388:	683b      	ldr	r3, [r7, #0]
 810c38a:	689b      	ldr	r3, [r3, #8]
 810c38c:	68ba      	ldr	r2, [r7, #8]
 810c38e:	4313      	orrs	r3, r2
 810c390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810c392:	687b      	ldr	r3, [r7, #4]
 810c394:	681b      	ldr	r3, [r3, #0]
 810c396:	68ba      	ldr	r2, [r7, #8]
 810c398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810c39a:	687b      	ldr	r3, [r7, #4]
 810c39c:	2201      	movs	r2, #1
 810c39e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810c3a2:	687b      	ldr	r3, [r7, #4]
 810c3a4:	2200      	movs	r2, #0
 810c3a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810c3aa:	2300      	movs	r3, #0
}
 810c3ac:	4618      	mov	r0, r3
 810c3ae:	3714      	adds	r7, #20
 810c3b0:	46bd      	mov	sp, r7
 810c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3b6:	4770      	bx	lr
 810c3b8:	40010000 	.word	0x40010000
 810c3bc:	40010400 	.word	0x40010400
 810c3c0:	40000400 	.word	0x40000400
 810c3c4:	40000800 	.word	0x40000800
 810c3c8:	40000c00 	.word	0x40000c00
 810c3cc:	40001800 	.word	0x40001800
 810c3d0:	40014000 	.word	0x40014000

0810c3d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810c3d4:	b480      	push	{r7}
 810c3d6:	b085      	sub	sp, #20
 810c3d8:	af00      	add	r7, sp, #0
 810c3da:	6078      	str	r0, [r7, #4]
 810c3dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810c3de:	2300      	movs	r3, #0
 810c3e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810c3e2:	687b      	ldr	r3, [r7, #4]
 810c3e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810c3e8:	2b01      	cmp	r3, #1
 810c3ea:	d101      	bne.n	810c3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810c3ec:	2302      	movs	r3, #2
 810c3ee:	e065      	b.n	810c4bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810c3f0:	687b      	ldr	r3, [r7, #4]
 810c3f2:	2201      	movs	r2, #1
 810c3f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810c3f8:	68fb      	ldr	r3, [r7, #12]
 810c3fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810c3fe:	683b      	ldr	r3, [r7, #0]
 810c400:	68db      	ldr	r3, [r3, #12]
 810c402:	4313      	orrs	r3, r2
 810c404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810c406:	68fb      	ldr	r3, [r7, #12]
 810c408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810c40c:	683b      	ldr	r3, [r7, #0]
 810c40e:	689b      	ldr	r3, [r3, #8]
 810c410:	4313      	orrs	r3, r2
 810c412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810c414:	68fb      	ldr	r3, [r7, #12]
 810c416:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810c41a:	683b      	ldr	r3, [r7, #0]
 810c41c:	685b      	ldr	r3, [r3, #4]
 810c41e:	4313      	orrs	r3, r2
 810c420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810c422:	68fb      	ldr	r3, [r7, #12]
 810c424:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810c428:	683b      	ldr	r3, [r7, #0]
 810c42a:	681b      	ldr	r3, [r3, #0]
 810c42c:	4313      	orrs	r3, r2
 810c42e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810c430:	68fb      	ldr	r3, [r7, #12]
 810c432:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810c436:	683b      	ldr	r3, [r7, #0]
 810c438:	691b      	ldr	r3, [r3, #16]
 810c43a:	4313      	orrs	r3, r2
 810c43c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810c43e:	68fb      	ldr	r3, [r7, #12]
 810c440:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810c444:	683b      	ldr	r3, [r7, #0]
 810c446:	695b      	ldr	r3, [r3, #20]
 810c448:	4313      	orrs	r3, r2
 810c44a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810c44c:	68fb      	ldr	r3, [r7, #12]
 810c44e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810c452:	683b      	ldr	r3, [r7, #0]
 810c454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c456:	4313      	orrs	r3, r2
 810c458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810c45a:	68fb      	ldr	r3, [r7, #12]
 810c45c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810c460:	683b      	ldr	r3, [r7, #0]
 810c462:	699b      	ldr	r3, [r3, #24]
 810c464:	041b      	lsls	r3, r3, #16
 810c466:	4313      	orrs	r3, r2
 810c468:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810c46a:	687b      	ldr	r3, [r7, #4]
 810c46c:	681b      	ldr	r3, [r3, #0]
 810c46e:	4a16      	ldr	r2, [pc, #88]	@ (810c4c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810c470:	4293      	cmp	r3, r2
 810c472:	d004      	beq.n	810c47e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810c474:	687b      	ldr	r3, [r7, #4]
 810c476:	681b      	ldr	r3, [r3, #0]
 810c478:	4a14      	ldr	r2, [pc, #80]	@ (810c4cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810c47a:	4293      	cmp	r3, r2
 810c47c:	d115      	bne.n	810c4aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810c47e:	68fb      	ldr	r3, [r7, #12]
 810c480:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810c484:	683b      	ldr	r3, [r7, #0]
 810c486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c488:	051b      	lsls	r3, r3, #20
 810c48a:	4313      	orrs	r3, r2
 810c48c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810c48e:	68fb      	ldr	r3, [r7, #12]
 810c490:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810c494:	683b      	ldr	r3, [r7, #0]
 810c496:	69db      	ldr	r3, [r3, #28]
 810c498:	4313      	orrs	r3, r2
 810c49a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810c49c:	68fb      	ldr	r3, [r7, #12]
 810c49e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810c4a2:	683b      	ldr	r3, [r7, #0]
 810c4a4:	6a1b      	ldr	r3, [r3, #32]
 810c4a6:	4313      	orrs	r3, r2
 810c4a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810c4aa:	687b      	ldr	r3, [r7, #4]
 810c4ac:	681b      	ldr	r3, [r3, #0]
 810c4ae:	68fa      	ldr	r2, [r7, #12]
 810c4b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810c4b2:	687b      	ldr	r3, [r7, #4]
 810c4b4:	2200      	movs	r2, #0
 810c4b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810c4ba:	2300      	movs	r3, #0
}
 810c4bc:	4618      	mov	r0, r3
 810c4be:	3714      	adds	r7, #20
 810c4c0:	46bd      	mov	sp, r7
 810c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4c6:	4770      	bx	lr
 810c4c8:	40010000 	.word	0x40010000
 810c4cc:	40010400 	.word	0x40010400

0810c4d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810c4d0:	b480      	push	{r7}
 810c4d2:	b083      	sub	sp, #12
 810c4d4:	af00      	add	r7, sp, #0
 810c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810c4d8:	bf00      	nop
 810c4da:	370c      	adds	r7, #12
 810c4dc:	46bd      	mov	sp, r7
 810c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4e2:	4770      	bx	lr

0810c4e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810c4e4:	b480      	push	{r7}
 810c4e6:	b083      	sub	sp, #12
 810c4e8:	af00      	add	r7, sp, #0
 810c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810c4ec:	bf00      	nop
 810c4ee:	370c      	adds	r7, #12
 810c4f0:	46bd      	mov	sp, r7
 810c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4f6:	4770      	bx	lr

0810c4f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810c4f8:	b480      	push	{r7}
 810c4fa:	b083      	sub	sp, #12
 810c4fc:	af00      	add	r7, sp, #0
 810c4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810c500:	bf00      	nop
 810c502:	370c      	adds	r7, #12
 810c504:	46bd      	mov	sp, r7
 810c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c50a:	4770      	bx	lr

0810c50c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810c50c:	b580      	push	{r7, lr}
 810c50e:	b082      	sub	sp, #8
 810c510:	af00      	add	r7, sp, #0
 810c512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810c514:	687b      	ldr	r3, [r7, #4]
 810c516:	2b00      	cmp	r3, #0
 810c518:	d101      	bne.n	810c51e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810c51a:	2301      	movs	r3, #1
 810c51c:	e042      	b.n	810c5a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810c51e:	687b      	ldr	r3, [r7, #4]
 810c520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c524:	2b00      	cmp	r3, #0
 810c526:	d106      	bne.n	810c536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810c528:	687b      	ldr	r3, [r7, #4]
 810c52a:	2200      	movs	r2, #0
 810c52c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810c530:	6878      	ldr	r0, [r7, #4]
 810c532:	f7f7 fe35 	bl	81041a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810c536:	687b      	ldr	r3, [r7, #4]
 810c538:	2224      	movs	r2, #36	@ 0x24
 810c53a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810c53e:	687b      	ldr	r3, [r7, #4]
 810c540:	681b      	ldr	r3, [r3, #0]
 810c542:	681a      	ldr	r2, [r3, #0]
 810c544:	687b      	ldr	r3, [r7, #4]
 810c546:	681b      	ldr	r3, [r3, #0]
 810c548:	f022 0201 	bic.w	r2, r2, #1
 810c54c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810c54e:	687b      	ldr	r3, [r7, #4]
 810c550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c552:	2b00      	cmp	r3, #0
 810c554:	d002      	beq.n	810c55c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810c556:	6878      	ldr	r0, [r7, #4]
 810c558:	f001 fb0c 	bl	810db74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810c55c:	6878      	ldr	r0, [r7, #4]
 810c55e:	f000 fda1 	bl	810d0a4 <UART_SetConfig>
 810c562:	4603      	mov	r3, r0
 810c564:	2b01      	cmp	r3, #1
 810c566:	d101      	bne.n	810c56c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810c568:	2301      	movs	r3, #1
 810c56a:	e01b      	b.n	810c5a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810c56c:	687b      	ldr	r3, [r7, #4]
 810c56e:	681b      	ldr	r3, [r3, #0]
 810c570:	685a      	ldr	r2, [r3, #4]
 810c572:	687b      	ldr	r3, [r7, #4]
 810c574:	681b      	ldr	r3, [r3, #0]
 810c576:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810c57a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810c57c:	687b      	ldr	r3, [r7, #4]
 810c57e:	681b      	ldr	r3, [r3, #0]
 810c580:	689a      	ldr	r2, [r3, #8]
 810c582:	687b      	ldr	r3, [r7, #4]
 810c584:	681b      	ldr	r3, [r3, #0]
 810c586:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810c58a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810c58c:	687b      	ldr	r3, [r7, #4]
 810c58e:	681b      	ldr	r3, [r3, #0]
 810c590:	681a      	ldr	r2, [r3, #0]
 810c592:	687b      	ldr	r3, [r7, #4]
 810c594:	681b      	ldr	r3, [r3, #0]
 810c596:	f042 0201 	orr.w	r2, r2, #1
 810c59a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810c59c:	6878      	ldr	r0, [r7, #4]
 810c59e:	f001 fb8b 	bl	810dcb8 <UART_CheckIdleState>
 810c5a2:	4603      	mov	r3, r0
}
 810c5a4:	4618      	mov	r0, r3
 810c5a6:	3708      	adds	r7, #8
 810c5a8:	46bd      	mov	sp, r7
 810c5aa:	bd80      	pop	{r7, pc}

0810c5ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810c5ac:	b580      	push	{r7, lr}
 810c5ae:	b08a      	sub	sp, #40	@ 0x28
 810c5b0:	af02      	add	r7, sp, #8
 810c5b2:	60f8      	str	r0, [r7, #12]
 810c5b4:	60b9      	str	r1, [r7, #8]
 810c5b6:	603b      	str	r3, [r7, #0]
 810c5b8:	4613      	mov	r3, r2
 810c5ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810c5bc:	68fb      	ldr	r3, [r7, #12]
 810c5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c5c2:	2b20      	cmp	r3, #32
 810c5c4:	d17b      	bne.n	810c6be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810c5c6:	68bb      	ldr	r3, [r7, #8]
 810c5c8:	2b00      	cmp	r3, #0
 810c5ca:	d002      	beq.n	810c5d2 <HAL_UART_Transmit+0x26>
 810c5cc:	88fb      	ldrh	r3, [r7, #6]
 810c5ce:	2b00      	cmp	r3, #0
 810c5d0:	d101      	bne.n	810c5d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810c5d2:	2301      	movs	r3, #1
 810c5d4:	e074      	b.n	810c6c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c5d6:	68fb      	ldr	r3, [r7, #12]
 810c5d8:	2200      	movs	r2, #0
 810c5da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810c5de:	68fb      	ldr	r3, [r7, #12]
 810c5e0:	2221      	movs	r2, #33	@ 0x21
 810c5e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810c5e6:	f7f8 f895 	bl	8104714 <HAL_GetTick>
 810c5ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810c5ec:	68fb      	ldr	r3, [r7, #12]
 810c5ee:	88fa      	ldrh	r2, [r7, #6]
 810c5f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810c5f4:	68fb      	ldr	r3, [r7, #12]
 810c5f6:	88fa      	ldrh	r2, [r7, #6]
 810c5f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810c5fc:	68fb      	ldr	r3, [r7, #12]
 810c5fe:	689b      	ldr	r3, [r3, #8]
 810c600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c604:	d108      	bne.n	810c618 <HAL_UART_Transmit+0x6c>
 810c606:	68fb      	ldr	r3, [r7, #12]
 810c608:	691b      	ldr	r3, [r3, #16]
 810c60a:	2b00      	cmp	r3, #0
 810c60c:	d104      	bne.n	810c618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810c60e:	2300      	movs	r3, #0
 810c610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810c612:	68bb      	ldr	r3, [r7, #8]
 810c614:	61bb      	str	r3, [r7, #24]
 810c616:	e003      	b.n	810c620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810c618:	68bb      	ldr	r3, [r7, #8]
 810c61a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810c61c:	2300      	movs	r3, #0
 810c61e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810c620:	e030      	b.n	810c684 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810c622:	683b      	ldr	r3, [r7, #0]
 810c624:	9300      	str	r3, [sp, #0]
 810c626:	697b      	ldr	r3, [r7, #20]
 810c628:	2200      	movs	r2, #0
 810c62a:	2180      	movs	r1, #128	@ 0x80
 810c62c:	68f8      	ldr	r0, [r7, #12]
 810c62e:	f001 fbed 	bl	810de0c <UART_WaitOnFlagUntilTimeout>
 810c632:	4603      	mov	r3, r0
 810c634:	2b00      	cmp	r3, #0
 810c636:	d005      	beq.n	810c644 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810c638:	68fb      	ldr	r3, [r7, #12]
 810c63a:	2220      	movs	r2, #32
 810c63c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810c640:	2303      	movs	r3, #3
 810c642:	e03d      	b.n	810c6c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810c644:	69fb      	ldr	r3, [r7, #28]
 810c646:	2b00      	cmp	r3, #0
 810c648:	d10b      	bne.n	810c662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810c64a:	69bb      	ldr	r3, [r7, #24]
 810c64c:	881b      	ldrh	r3, [r3, #0]
 810c64e:	461a      	mov	r2, r3
 810c650:	68fb      	ldr	r3, [r7, #12]
 810c652:	681b      	ldr	r3, [r3, #0]
 810c654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810c658:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810c65a:	69bb      	ldr	r3, [r7, #24]
 810c65c:	3302      	adds	r3, #2
 810c65e:	61bb      	str	r3, [r7, #24]
 810c660:	e007      	b.n	810c672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810c662:	69fb      	ldr	r3, [r7, #28]
 810c664:	781a      	ldrb	r2, [r3, #0]
 810c666:	68fb      	ldr	r3, [r7, #12]
 810c668:	681b      	ldr	r3, [r3, #0]
 810c66a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810c66c:	69fb      	ldr	r3, [r7, #28]
 810c66e:	3301      	adds	r3, #1
 810c670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810c672:	68fb      	ldr	r3, [r7, #12]
 810c674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810c678:	b29b      	uxth	r3, r3
 810c67a:	3b01      	subs	r3, #1
 810c67c:	b29a      	uxth	r2, r3
 810c67e:	68fb      	ldr	r3, [r7, #12]
 810c680:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810c684:	68fb      	ldr	r3, [r7, #12]
 810c686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810c68a:	b29b      	uxth	r3, r3
 810c68c:	2b00      	cmp	r3, #0
 810c68e:	d1c8      	bne.n	810c622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810c690:	683b      	ldr	r3, [r7, #0]
 810c692:	9300      	str	r3, [sp, #0]
 810c694:	697b      	ldr	r3, [r7, #20]
 810c696:	2200      	movs	r2, #0
 810c698:	2140      	movs	r1, #64	@ 0x40
 810c69a:	68f8      	ldr	r0, [r7, #12]
 810c69c:	f001 fbb6 	bl	810de0c <UART_WaitOnFlagUntilTimeout>
 810c6a0:	4603      	mov	r3, r0
 810c6a2:	2b00      	cmp	r3, #0
 810c6a4:	d005      	beq.n	810c6b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810c6a6:	68fb      	ldr	r3, [r7, #12]
 810c6a8:	2220      	movs	r2, #32
 810c6aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810c6ae:	2303      	movs	r3, #3
 810c6b0:	e006      	b.n	810c6c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810c6b2:	68fb      	ldr	r3, [r7, #12]
 810c6b4:	2220      	movs	r2, #32
 810c6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810c6ba:	2300      	movs	r3, #0
 810c6bc:	e000      	b.n	810c6c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810c6be:	2302      	movs	r3, #2
  }
}
 810c6c0:	4618      	mov	r0, r3
 810c6c2:	3720      	adds	r7, #32
 810c6c4:	46bd      	mov	sp, r7
 810c6c6:	bd80      	pop	{r7, pc}

0810c6c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810c6c8:	b580      	push	{r7, lr}
 810c6ca:	b08a      	sub	sp, #40	@ 0x28
 810c6cc:	af02      	add	r7, sp, #8
 810c6ce:	60f8      	str	r0, [r7, #12]
 810c6d0:	60b9      	str	r1, [r7, #8]
 810c6d2:	603b      	str	r3, [r7, #0]
 810c6d4:	4613      	mov	r3, r2
 810c6d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810c6d8:	68fb      	ldr	r3, [r7, #12]
 810c6da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810c6de:	2b20      	cmp	r3, #32
 810c6e0:	f040 80b5 	bne.w	810c84e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 810c6e4:	68bb      	ldr	r3, [r7, #8]
 810c6e6:	2b00      	cmp	r3, #0
 810c6e8:	d002      	beq.n	810c6f0 <HAL_UART_Receive+0x28>
 810c6ea:	88fb      	ldrh	r3, [r7, #6]
 810c6ec:	2b00      	cmp	r3, #0
 810c6ee:	d101      	bne.n	810c6f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 810c6f0:	2301      	movs	r3, #1
 810c6f2:	e0ad      	b.n	810c850 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c6f4:	68fb      	ldr	r3, [r7, #12]
 810c6f6:	2200      	movs	r2, #0
 810c6f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810c6fc:	68fb      	ldr	r3, [r7, #12]
 810c6fe:	2222      	movs	r2, #34	@ 0x22
 810c700:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c704:	68fb      	ldr	r3, [r7, #12]
 810c706:	2200      	movs	r2, #0
 810c708:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810c70a:	f7f8 f803 	bl	8104714 <HAL_GetTick>
 810c70e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810c710:	68fb      	ldr	r3, [r7, #12]
 810c712:	88fa      	ldrh	r2, [r7, #6]
 810c714:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810c718:	68fb      	ldr	r3, [r7, #12]
 810c71a:	88fa      	ldrh	r2, [r7, #6]
 810c71c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810c720:	68fb      	ldr	r3, [r7, #12]
 810c722:	689b      	ldr	r3, [r3, #8]
 810c724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c728:	d10e      	bne.n	810c748 <HAL_UART_Receive+0x80>
 810c72a:	68fb      	ldr	r3, [r7, #12]
 810c72c:	691b      	ldr	r3, [r3, #16]
 810c72e:	2b00      	cmp	r3, #0
 810c730:	d105      	bne.n	810c73e <HAL_UART_Receive+0x76>
 810c732:	68fb      	ldr	r3, [r7, #12]
 810c734:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810c738:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c73c:	e02d      	b.n	810c79a <HAL_UART_Receive+0xd2>
 810c73e:	68fb      	ldr	r3, [r7, #12]
 810c740:	22ff      	movs	r2, #255	@ 0xff
 810c742:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c746:	e028      	b.n	810c79a <HAL_UART_Receive+0xd2>
 810c748:	68fb      	ldr	r3, [r7, #12]
 810c74a:	689b      	ldr	r3, [r3, #8]
 810c74c:	2b00      	cmp	r3, #0
 810c74e:	d10d      	bne.n	810c76c <HAL_UART_Receive+0xa4>
 810c750:	68fb      	ldr	r3, [r7, #12]
 810c752:	691b      	ldr	r3, [r3, #16]
 810c754:	2b00      	cmp	r3, #0
 810c756:	d104      	bne.n	810c762 <HAL_UART_Receive+0x9a>
 810c758:	68fb      	ldr	r3, [r7, #12]
 810c75a:	22ff      	movs	r2, #255	@ 0xff
 810c75c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c760:	e01b      	b.n	810c79a <HAL_UART_Receive+0xd2>
 810c762:	68fb      	ldr	r3, [r7, #12]
 810c764:	227f      	movs	r2, #127	@ 0x7f
 810c766:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c76a:	e016      	b.n	810c79a <HAL_UART_Receive+0xd2>
 810c76c:	68fb      	ldr	r3, [r7, #12]
 810c76e:	689b      	ldr	r3, [r3, #8]
 810c770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c774:	d10d      	bne.n	810c792 <HAL_UART_Receive+0xca>
 810c776:	68fb      	ldr	r3, [r7, #12]
 810c778:	691b      	ldr	r3, [r3, #16]
 810c77a:	2b00      	cmp	r3, #0
 810c77c:	d104      	bne.n	810c788 <HAL_UART_Receive+0xc0>
 810c77e:	68fb      	ldr	r3, [r7, #12]
 810c780:	227f      	movs	r2, #127	@ 0x7f
 810c782:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c786:	e008      	b.n	810c79a <HAL_UART_Receive+0xd2>
 810c788:	68fb      	ldr	r3, [r7, #12]
 810c78a:	223f      	movs	r2, #63	@ 0x3f
 810c78c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810c790:	e003      	b.n	810c79a <HAL_UART_Receive+0xd2>
 810c792:	68fb      	ldr	r3, [r7, #12]
 810c794:	2200      	movs	r2, #0
 810c796:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810c79a:	68fb      	ldr	r3, [r7, #12]
 810c79c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810c7a0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810c7a2:	68fb      	ldr	r3, [r7, #12]
 810c7a4:	689b      	ldr	r3, [r3, #8]
 810c7a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c7aa:	d108      	bne.n	810c7be <HAL_UART_Receive+0xf6>
 810c7ac:	68fb      	ldr	r3, [r7, #12]
 810c7ae:	691b      	ldr	r3, [r3, #16]
 810c7b0:	2b00      	cmp	r3, #0
 810c7b2:	d104      	bne.n	810c7be <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 810c7b4:	2300      	movs	r3, #0
 810c7b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810c7b8:	68bb      	ldr	r3, [r7, #8]
 810c7ba:	61bb      	str	r3, [r7, #24]
 810c7bc:	e003      	b.n	810c7c6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 810c7be:	68bb      	ldr	r3, [r7, #8]
 810c7c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810c7c2:	2300      	movs	r3, #0
 810c7c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810c7c6:	e036      	b.n	810c836 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810c7c8:	683b      	ldr	r3, [r7, #0]
 810c7ca:	9300      	str	r3, [sp, #0]
 810c7cc:	697b      	ldr	r3, [r7, #20]
 810c7ce:	2200      	movs	r2, #0
 810c7d0:	2120      	movs	r1, #32
 810c7d2:	68f8      	ldr	r0, [r7, #12]
 810c7d4:	f001 fb1a 	bl	810de0c <UART_WaitOnFlagUntilTimeout>
 810c7d8:	4603      	mov	r3, r0
 810c7da:	2b00      	cmp	r3, #0
 810c7dc:	d005      	beq.n	810c7ea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 810c7de:	68fb      	ldr	r3, [r7, #12]
 810c7e0:	2220      	movs	r2, #32
 810c7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 810c7e6:	2303      	movs	r3, #3
 810c7e8:	e032      	b.n	810c850 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 810c7ea:	69fb      	ldr	r3, [r7, #28]
 810c7ec:	2b00      	cmp	r3, #0
 810c7ee:	d10c      	bne.n	810c80a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810c7f0:	68fb      	ldr	r3, [r7, #12]
 810c7f2:	681b      	ldr	r3, [r3, #0]
 810c7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c7f6:	b29a      	uxth	r2, r3
 810c7f8:	8a7b      	ldrh	r3, [r7, #18]
 810c7fa:	4013      	ands	r3, r2
 810c7fc:	b29a      	uxth	r2, r3
 810c7fe:	69bb      	ldr	r3, [r7, #24]
 810c800:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810c802:	69bb      	ldr	r3, [r7, #24]
 810c804:	3302      	adds	r3, #2
 810c806:	61bb      	str	r3, [r7, #24]
 810c808:	e00c      	b.n	810c824 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810c80a:	68fb      	ldr	r3, [r7, #12]
 810c80c:	681b      	ldr	r3, [r3, #0]
 810c80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c810:	b2da      	uxtb	r2, r3
 810c812:	8a7b      	ldrh	r3, [r7, #18]
 810c814:	b2db      	uxtb	r3, r3
 810c816:	4013      	ands	r3, r2
 810c818:	b2da      	uxtb	r2, r3
 810c81a:	69fb      	ldr	r3, [r7, #28]
 810c81c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810c81e:	69fb      	ldr	r3, [r7, #28]
 810c820:	3301      	adds	r3, #1
 810c822:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810c824:	68fb      	ldr	r3, [r7, #12]
 810c826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810c82a:	b29b      	uxth	r3, r3
 810c82c:	3b01      	subs	r3, #1
 810c82e:	b29a      	uxth	r2, r3
 810c830:	68fb      	ldr	r3, [r7, #12]
 810c832:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 810c836:	68fb      	ldr	r3, [r7, #12]
 810c838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810c83c:	b29b      	uxth	r3, r3
 810c83e:	2b00      	cmp	r3, #0
 810c840:	d1c2      	bne.n	810c7c8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810c842:	68fb      	ldr	r3, [r7, #12]
 810c844:	2220      	movs	r2, #32
 810c846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810c84a:	2300      	movs	r3, #0
 810c84c:	e000      	b.n	810c850 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 810c84e:	2302      	movs	r3, #2
  }
}
 810c850:	4618      	mov	r0, r3
 810c852:	3720      	adds	r7, #32
 810c854:	46bd      	mov	sp, r7
 810c856:	bd80      	pop	{r7, pc}

0810c858 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810c858:	b580      	push	{r7, lr}
 810c85a:	b08a      	sub	sp, #40	@ 0x28
 810c85c:	af00      	add	r7, sp, #0
 810c85e:	60f8      	str	r0, [r7, #12]
 810c860:	60b9      	str	r1, [r7, #8]
 810c862:	4613      	mov	r3, r2
 810c864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810c866:	68fb      	ldr	r3, [r7, #12]
 810c868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810c86c:	2b20      	cmp	r3, #32
 810c86e:	d137      	bne.n	810c8e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 810c870:	68bb      	ldr	r3, [r7, #8]
 810c872:	2b00      	cmp	r3, #0
 810c874:	d002      	beq.n	810c87c <HAL_UART_Receive_IT+0x24>
 810c876:	88fb      	ldrh	r3, [r7, #6]
 810c878:	2b00      	cmp	r3, #0
 810c87a:	d101      	bne.n	810c880 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 810c87c:	2301      	movs	r3, #1
 810c87e:	e030      	b.n	810c8e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c880:	68fb      	ldr	r3, [r7, #12]
 810c882:	2200      	movs	r2, #0
 810c884:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810c886:	68fb      	ldr	r3, [r7, #12]
 810c888:	681b      	ldr	r3, [r3, #0]
 810c88a:	4a18      	ldr	r2, [pc, #96]	@ (810c8ec <HAL_UART_Receive_IT+0x94>)
 810c88c:	4293      	cmp	r3, r2
 810c88e:	d01f      	beq.n	810c8d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810c890:	68fb      	ldr	r3, [r7, #12]
 810c892:	681b      	ldr	r3, [r3, #0]
 810c894:	685b      	ldr	r3, [r3, #4]
 810c896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810c89a:	2b00      	cmp	r3, #0
 810c89c:	d018      	beq.n	810c8d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810c89e:	68fb      	ldr	r3, [r7, #12]
 810c8a0:	681b      	ldr	r3, [r3, #0]
 810c8a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c8a4:	697b      	ldr	r3, [r7, #20]
 810c8a6:	e853 3f00 	ldrex	r3, [r3]
 810c8aa:	613b      	str	r3, [r7, #16]
   return(result);
 810c8ac:	693b      	ldr	r3, [r7, #16]
 810c8ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810c8b2:	627b      	str	r3, [r7, #36]	@ 0x24
 810c8b4:	68fb      	ldr	r3, [r7, #12]
 810c8b6:	681b      	ldr	r3, [r3, #0]
 810c8b8:	461a      	mov	r2, r3
 810c8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c8bc:	623b      	str	r3, [r7, #32]
 810c8be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c8c0:	69f9      	ldr	r1, [r7, #28]
 810c8c2:	6a3a      	ldr	r2, [r7, #32]
 810c8c4:	e841 2300 	strex	r3, r2, [r1]
 810c8c8:	61bb      	str	r3, [r7, #24]
   return(result);
 810c8ca:	69bb      	ldr	r3, [r7, #24]
 810c8cc:	2b00      	cmp	r3, #0
 810c8ce:	d1e6      	bne.n	810c89e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 810c8d0:	88fb      	ldrh	r3, [r7, #6]
 810c8d2:	461a      	mov	r2, r3
 810c8d4:	68b9      	ldr	r1, [r7, #8]
 810c8d6:	68f8      	ldr	r0, [r7, #12]
 810c8d8:	f001 fb06 	bl	810dee8 <UART_Start_Receive_IT>
 810c8dc:	4603      	mov	r3, r0
 810c8de:	e000      	b.n	810c8e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810c8e0:	2302      	movs	r3, #2
  }
}
 810c8e2:	4618      	mov	r0, r3
 810c8e4:	3728      	adds	r7, #40	@ 0x28
 810c8e6:	46bd      	mov	sp, r7
 810c8e8:	bd80      	pop	{r7, pc}
 810c8ea:	bf00      	nop
 810c8ec:	58000c00 	.word	0x58000c00

0810c8f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810c8f0:	b580      	push	{r7, lr}
 810c8f2:	b0ba      	sub	sp, #232	@ 0xe8
 810c8f4:	af00      	add	r7, sp, #0
 810c8f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810c8f8:	687b      	ldr	r3, [r7, #4]
 810c8fa:	681b      	ldr	r3, [r3, #0]
 810c8fc:	69db      	ldr	r3, [r3, #28]
 810c8fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810c902:	687b      	ldr	r3, [r7, #4]
 810c904:	681b      	ldr	r3, [r3, #0]
 810c906:	681b      	ldr	r3, [r3, #0]
 810c908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810c90c:	687b      	ldr	r3, [r7, #4]
 810c90e:	681b      	ldr	r3, [r3, #0]
 810c910:	689b      	ldr	r3, [r3, #8]
 810c912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810c916:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 810c91a:	f640 030f 	movw	r3, #2063	@ 0x80f
 810c91e:	4013      	ands	r3, r2
 810c920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 810c924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810c928:	2b00      	cmp	r3, #0
 810c92a:	d11b      	bne.n	810c964 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c930:	f003 0320 	and.w	r3, r3, #32
 810c934:	2b00      	cmp	r3, #0
 810c936:	d015      	beq.n	810c964 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c93c:	f003 0320 	and.w	r3, r3, #32
 810c940:	2b00      	cmp	r3, #0
 810c942:	d105      	bne.n	810c950 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810c94c:	2b00      	cmp	r3, #0
 810c94e:	d009      	beq.n	810c964 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 810c950:	687b      	ldr	r3, [r7, #4]
 810c952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c954:	2b00      	cmp	r3, #0
 810c956:	f000 8379 	beq.w	810d04c <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 810c95a:	687b      	ldr	r3, [r7, #4]
 810c95c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810c95e:	6878      	ldr	r0, [r7, #4]
 810c960:	4798      	blx	r3
      }
      return;
 810c962:	e373      	b.n	810d04c <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810c964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 810c968:	2b00      	cmp	r3, #0
 810c96a:	f000 8123 	beq.w	810cbb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810c96e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810c972:	4b8d      	ldr	r3, [pc, #564]	@ (810cba8 <HAL_UART_IRQHandler+0x2b8>)
 810c974:	4013      	ands	r3, r2
 810c976:	2b00      	cmp	r3, #0
 810c978:	d106      	bne.n	810c988 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810c97a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 810c97e:	4b8b      	ldr	r3, [pc, #556]	@ (810cbac <HAL_UART_IRQHandler+0x2bc>)
 810c980:	4013      	ands	r3, r2
 810c982:	2b00      	cmp	r3, #0
 810c984:	f000 8116 	beq.w	810cbb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810c988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c98c:	f003 0301 	and.w	r3, r3, #1
 810c990:	2b00      	cmp	r3, #0
 810c992:	d011      	beq.n	810c9b8 <HAL_UART_IRQHandler+0xc8>
 810c994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810c998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810c99c:	2b00      	cmp	r3, #0
 810c99e:	d00b      	beq.n	810c9b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810c9a0:	687b      	ldr	r3, [r7, #4]
 810c9a2:	681b      	ldr	r3, [r3, #0]
 810c9a4:	2201      	movs	r2, #1
 810c9a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810c9a8:	687b      	ldr	r3, [r7, #4]
 810c9aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c9ae:	f043 0201 	orr.w	r2, r3, #1
 810c9b2:	687b      	ldr	r3, [r7, #4]
 810c9b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c9bc:	f003 0302 	and.w	r3, r3, #2
 810c9c0:	2b00      	cmp	r3, #0
 810c9c2:	d011      	beq.n	810c9e8 <HAL_UART_IRQHandler+0xf8>
 810c9c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c9c8:	f003 0301 	and.w	r3, r3, #1
 810c9cc:	2b00      	cmp	r3, #0
 810c9ce:	d00b      	beq.n	810c9e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810c9d0:	687b      	ldr	r3, [r7, #4]
 810c9d2:	681b      	ldr	r3, [r3, #0]
 810c9d4:	2202      	movs	r2, #2
 810c9d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810c9d8:	687b      	ldr	r3, [r7, #4]
 810c9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c9de:	f043 0204 	orr.w	r2, r3, #4
 810c9e2:	687b      	ldr	r3, [r7, #4]
 810c9e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810c9ec:	f003 0304 	and.w	r3, r3, #4
 810c9f0:	2b00      	cmp	r3, #0
 810c9f2:	d011      	beq.n	810ca18 <HAL_UART_IRQHandler+0x128>
 810c9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810c9f8:	f003 0301 	and.w	r3, r3, #1
 810c9fc:	2b00      	cmp	r3, #0
 810c9fe:	d00b      	beq.n	810ca18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810ca00:	687b      	ldr	r3, [r7, #4]
 810ca02:	681b      	ldr	r3, [r3, #0]
 810ca04:	2204      	movs	r2, #4
 810ca06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810ca08:	687b      	ldr	r3, [r7, #4]
 810ca0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ca0e:	f043 0202 	orr.w	r2, r3, #2
 810ca12:	687b      	ldr	r3, [r7, #4]
 810ca14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810ca18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ca1c:	f003 0308 	and.w	r3, r3, #8
 810ca20:	2b00      	cmp	r3, #0
 810ca22:	d017      	beq.n	810ca54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810ca24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ca28:	f003 0320 	and.w	r3, r3, #32
 810ca2c:	2b00      	cmp	r3, #0
 810ca2e:	d105      	bne.n	810ca3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810ca30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810ca34:	4b5c      	ldr	r3, [pc, #368]	@ (810cba8 <HAL_UART_IRQHandler+0x2b8>)
 810ca36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810ca38:	2b00      	cmp	r3, #0
 810ca3a:	d00b      	beq.n	810ca54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810ca3c:	687b      	ldr	r3, [r7, #4]
 810ca3e:	681b      	ldr	r3, [r3, #0]
 810ca40:	2208      	movs	r2, #8
 810ca42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810ca44:	687b      	ldr	r3, [r7, #4]
 810ca46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ca4a:	f043 0208 	orr.w	r2, r3, #8
 810ca4e:	687b      	ldr	r3, [r7, #4]
 810ca50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810ca54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ca58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810ca5c:	2b00      	cmp	r3, #0
 810ca5e:	d012      	beq.n	810ca86 <HAL_UART_IRQHandler+0x196>
 810ca60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810ca64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810ca68:	2b00      	cmp	r3, #0
 810ca6a:	d00c      	beq.n	810ca86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ca6c:	687b      	ldr	r3, [r7, #4]
 810ca6e:	681b      	ldr	r3, [r3, #0]
 810ca70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810ca74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810ca76:	687b      	ldr	r3, [r7, #4]
 810ca78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ca7c:	f043 0220 	orr.w	r2, r3, #32
 810ca80:	687b      	ldr	r3, [r7, #4]
 810ca82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810ca86:	687b      	ldr	r3, [r7, #4]
 810ca88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ca8c:	2b00      	cmp	r3, #0
 810ca8e:	f000 82df 	beq.w	810d050 <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810ca92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810ca96:	f003 0320 	and.w	r3, r3, #32
 810ca9a:	2b00      	cmp	r3, #0
 810ca9c:	d013      	beq.n	810cac6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810ca9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810caa2:	f003 0320 	and.w	r3, r3, #32
 810caa6:	2b00      	cmp	r3, #0
 810caa8:	d105      	bne.n	810cab6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810caaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810caae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810cab2:	2b00      	cmp	r3, #0
 810cab4:	d007      	beq.n	810cac6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810cab6:	687b      	ldr	r3, [r7, #4]
 810cab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810caba:	2b00      	cmp	r3, #0
 810cabc:	d003      	beq.n	810cac6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 810cabe:	687b      	ldr	r3, [r7, #4]
 810cac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810cac2:	6878      	ldr	r0, [r7, #4]
 810cac4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810cac6:	687b      	ldr	r3, [r7, #4]
 810cac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810cacc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810cad0:	687b      	ldr	r3, [r7, #4]
 810cad2:	681b      	ldr	r3, [r3, #0]
 810cad4:	689b      	ldr	r3, [r3, #8]
 810cad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cada:	2b40      	cmp	r3, #64	@ 0x40
 810cadc:	d005      	beq.n	810caea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810cade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810cae2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810cae6:	2b00      	cmp	r3, #0
 810cae8:	d054      	beq.n	810cb94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810caea:	6878      	ldr	r0, [r7, #4]
 810caec:	f001 fb1e 	bl	810e12c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810caf0:	687b      	ldr	r3, [r7, #4]
 810caf2:	681b      	ldr	r3, [r3, #0]
 810caf4:	689b      	ldr	r3, [r3, #8]
 810caf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cafa:	2b40      	cmp	r3, #64	@ 0x40
 810cafc:	d146      	bne.n	810cb8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810cafe:	687b      	ldr	r3, [r7, #4]
 810cb00:	681b      	ldr	r3, [r3, #0]
 810cb02:	3308      	adds	r3, #8
 810cb04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cb08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810cb0c:	e853 3f00 	ldrex	r3, [r3]
 810cb10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 810cb14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810cb18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810cb1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810cb20:	687b      	ldr	r3, [r7, #4]
 810cb22:	681b      	ldr	r3, [r3, #0]
 810cb24:	3308      	adds	r3, #8
 810cb26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 810cb2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 810cb2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cb32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 810cb36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 810cb3a:	e841 2300 	strex	r3, r2, [r1]
 810cb3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 810cb42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810cb46:	2b00      	cmp	r3, #0
 810cb48:	d1d9      	bne.n	810cafe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810cb4a:	687b      	ldr	r3, [r7, #4]
 810cb4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cb50:	2b00      	cmp	r3, #0
 810cb52:	d017      	beq.n	810cb84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810cb54:	687b      	ldr	r3, [r7, #4]
 810cb56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cb5a:	4a15      	ldr	r2, [pc, #84]	@ (810cbb0 <HAL_UART_IRQHandler+0x2c0>)
 810cb5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810cb5e:	687b      	ldr	r3, [r7, #4]
 810cb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cb64:	4618      	mov	r0, r3
 810cb66:	f7f9 ff3b 	bl	81069e0 <HAL_DMA_Abort_IT>
 810cb6a:	4603      	mov	r3, r0
 810cb6c:	2b00      	cmp	r3, #0
 810cb6e:	d019      	beq.n	810cba4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810cb70:	687b      	ldr	r3, [r7, #4]
 810cb72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cb76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810cb78:	687a      	ldr	r2, [r7, #4]
 810cb7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 810cb7e:	4610      	mov	r0, r2
 810cb80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810cb82:	e00f      	b.n	810cba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810cb84:	6878      	ldr	r0, [r7, #4]
 810cb86:	f000 fa77 	bl	810d078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810cb8a:	e00b      	b.n	810cba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810cb8c:	6878      	ldr	r0, [r7, #4]
 810cb8e:	f000 fa73 	bl	810d078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810cb92:	e007      	b.n	810cba4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810cb94:	6878      	ldr	r0, [r7, #4]
 810cb96:	f000 fa6f 	bl	810d078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810cb9a:	687b      	ldr	r3, [r7, #4]
 810cb9c:	2200      	movs	r2, #0
 810cb9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810cba2:	e255      	b.n	810d050 <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810cba4:	bf00      	nop
    return;
 810cba6:	e253      	b.n	810d050 <HAL_UART_IRQHandler+0x760>
 810cba8:	10000001 	.word	0x10000001
 810cbac:	04000120 	.word	0x04000120
 810cbb0:	0810e1f9 	.word	0x0810e1f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810cbb4:	687b      	ldr	r3, [r7, #4]
 810cbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810cbb8:	2b01      	cmp	r3, #1
 810cbba:	f040 81e9 	bne.w	810cf90 <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810cbbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cbc2:	f003 0310 	and.w	r3, r3, #16
 810cbc6:	2b00      	cmp	r3, #0
 810cbc8:	f000 81e2 	beq.w	810cf90 <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810cbcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cbd0:	f003 0310 	and.w	r3, r3, #16
 810cbd4:	2b00      	cmp	r3, #0
 810cbd6:	f000 81db 	beq.w	810cf90 <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810cbda:	687b      	ldr	r3, [r7, #4]
 810cbdc:	681b      	ldr	r3, [r3, #0]
 810cbde:	2210      	movs	r2, #16
 810cbe0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810cbe2:	687b      	ldr	r3, [r7, #4]
 810cbe4:	681b      	ldr	r3, [r3, #0]
 810cbe6:	689b      	ldr	r3, [r3, #8]
 810cbe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cbec:	2b40      	cmp	r3, #64	@ 0x40
 810cbee:	f040 8151 	bne.w	810ce94 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810cbf2:	687b      	ldr	r3, [r7, #4]
 810cbf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cbf8:	681b      	ldr	r3, [r3, #0]
 810cbfa:	4a96      	ldr	r2, [pc, #600]	@ (810ce54 <HAL_UART_IRQHandler+0x564>)
 810cbfc:	4293      	cmp	r3, r2
 810cbfe:	d068      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc00:	687b      	ldr	r3, [r7, #4]
 810cc02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc06:	681b      	ldr	r3, [r3, #0]
 810cc08:	4a93      	ldr	r2, [pc, #588]	@ (810ce58 <HAL_UART_IRQHandler+0x568>)
 810cc0a:	4293      	cmp	r3, r2
 810cc0c:	d061      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc0e:	687b      	ldr	r3, [r7, #4]
 810cc10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc14:	681b      	ldr	r3, [r3, #0]
 810cc16:	4a91      	ldr	r2, [pc, #580]	@ (810ce5c <HAL_UART_IRQHandler+0x56c>)
 810cc18:	4293      	cmp	r3, r2
 810cc1a:	d05a      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc1c:	687b      	ldr	r3, [r7, #4]
 810cc1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc22:	681b      	ldr	r3, [r3, #0]
 810cc24:	4a8e      	ldr	r2, [pc, #568]	@ (810ce60 <HAL_UART_IRQHandler+0x570>)
 810cc26:	4293      	cmp	r3, r2
 810cc28:	d053      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc2a:	687b      	ldr	r3, [r7, #4]
 810cc2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc30:	681b      	ldr	r3, [r3, #0]
 810cc32:	4a8c      	ldr	r2, [pc, #560]	@ (810ce64 <HAL_UART_IRQHandler+0x574>)
 810cc34:	4293      	cmp	r3, r2
 810cc36:	d04c      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc38:	687b      	ldr	r3, [r7, #4]
 810cc3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc3e:	681b      	ldr	r3, [r3, #0]
 810cc40:	4a89      	ldr	r2, [pc, #548]	@ (810ce68 <HAL_UART_IRQHandler+0x578>)
 810cc42:	4293      	cmp	r3, r2
 810cc44:	d045      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc46:	687b      	ldr	r3, [r7, #4]
 810cc48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc4c:	681b      	ldr	r3, [r3, #0]
 810cc4e:	4a87      	ldr	r2, [pc, #540]	@ (810ce6c <HAL_UART_IRQHandler+0x57c>)
 810cc50:	4293      	cmp	r3, r2
 810cc52:	d03e      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc54:	687b      	ldr	r3, [r7, #4]
 810cc56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc5a:	681b      	ldr	r3, [r3, #0]
 810cc5c:	4a84      	ldr	r2, [pc, #528]	@ (810ce70 <HAL_UART_IRQHandler+0x580>)
 810cc5e:	4293      	cmp	r3, r2
 810cc60:	d037      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc62:	687b      	ldr	r3, [r7, #4]
 810cc64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc68:	681b      	ldr	r3, [r3, #0]
 810cc6a:	4a82      	ldr	r2, [pc, #520]	@ (810ce74 <HAL_UART_IRQHandler+0x584>)
 810cc6c:	4293      	cmp	r3, r2
 810cc6e:	d030      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc70:	687b      	ldr	r3, [r7, #4]
 810cc72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc76:	681b      	ldr	r3, [r3, #0]
 810cc78:	4a7f      	ldr	r2, [pc, #508]	@ (810ce78 <HAL_UART_IRQHandler+0x588>)
 810cc7a:	4293      	cmp	r3, r2
 810cc7c:	d029      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc7e:	687b      	ldr	r3, [r7, #4]
 810cc80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc84:	681b      	ldr	r3, [r3, #0]
 810cc86:	4a7d      	ldr	r2, [pc, #500]	@ (810ce7c <HAL_UART_IRQHandler+0x58c>)
 810cc88:	4293      	cmp	r3, r2
 810cc8a:	d022      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc8c:	687b      	ldr	r3, [r7, #4]
 810cc8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cc92:	681b      	ldr	r3, [r3, #0]
 810cc94:	4a7a      	ldr	r2, [pc, #488]	@ (810ce80 <HAL_UART_IRQHandler+0x590>)
 810cc96:	4293      	cmp	r3, r2
 810cc98:	d01b      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cc9a:	687b      	ldr	r3, [r7, #4]
 810cc9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cca0:	681b      	ldr	r3, [r3, #0]
 810cca2:	4a78      	ldr	r2, [pc, #480]	@ (810ce84 <HAL_UART_IRQHandler+0x594>)
 810cca4:	4293      	cmp	r3, r2
 810cca6:	d014      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810cca8:	687b      	ldr	r3, [r7, #4]
 810ccaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ccae:	681b      	ldr	r3, [r3, #0]
 810ccb0:	4a75      	ldr	r2, [pc, #468]	@ (810ce88 <HAL_UART_IRQHandler+0x598>)
 810ccb2:	4293      	cmp	r3, r2
 810ccb4:	d00d      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810ccb6:	687b      	ldr	r3, [r7, #4]
 810ccb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ccbc:	681b      	ldr	r3, [r3, #0]
 810ccbe:	4a73      	ldr	r2, [pc, #460]	@ (810ce8c <HAL_UART_IRQHandler+0x59c>)
 810ccc0:	4293      	cmp	r3, r2
 810ccc2:	d006      	beq.n	810ccd2 <HAL_UART_IRQHandler+0x3e2>
 810ccc4:	687b      	ldr	r3, [r7, #4]
 810ccc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ccca:	681b      	ldr	r3, [r3, #0]
 810cccc:	4a70      	ldr	r2, [pc, #448]	@ (810ce90 <HAL_UART_IRQHandler+0x5a0>)
 810ccce:	4293      	cmp	r3, r2
 810ccd0:	d106      	bne.n	810cce0 <HAL_UART_IRQHandler+0x3f0>
 810ccd2:	687b      	ldr	r3, [r7, #4]
 810ccd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ccd8:	681b      	ldr	r3, [r3, #0]
 810ccda:	685b      	ldr	r3, [r3, #4]
 810ccdc:	b29b      	uxth	r3, r3
 810ccde:	e005      	b.n	810ccec <HAL_UART_IRQHandler+0x3fc>
 810cce0:	687b      	ldr	r3, [r7, #4]
 810cce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cce6:	681b      	ldr	r3, [r3, #0]
 810cce8:	685b      	ldr	r3, [r3, #4]
 810ccea:	b29b      	uxth	r3, r3
 810ccec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 810ccf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 810ccf4:	2b00      	cmp	r3, #0
 810ccf6:	f000 81ad 	beq.w	810d054 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810ccfa:	687b      	ldr	r3, [r7, #4]
 810ccfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810cd00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810cd04:	429a      	cmp	r2, r3
 810cd06:	f080 81a5 	bcs.w	810d054 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810cd0a:	687b      	ldr	r3, [r7, #4]
 810cd0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 810cd10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810cd14:	687b      	ldr	r3, [r7, #4]
 810cd16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cd1a:	69db      	ldr	r3, [r3, #28]
 810cd1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810cd20:	f000 8087 	beq.w	810ce32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810cd24:	687b      	ldr	r3, [r7, #4]
 810cd26:	681b      	ldr	r3, [r3, #0]
 810cd28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cd2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 810cd30:	e853 3f00 	ldrex	r3, [r3]
 810cd34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 810cd38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810cd3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810cd40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810cd44:	687b      	ldr	r3, [r7, #4]
 810cd46:	681b      	ldr	r3, [r3, #0]
 810cd48:	461a      	mov	r2, r3
 810cd4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 810cd4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810cd52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cd56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 810cd5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810cd5e:	e841 2300 	strex	r3, r2, [r1]
 810cd62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810cd66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810cd6a:	2b00      	cmp	r3, #0
 810cd6c:	d1da      	bne.n	810cd24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810cd6e:	687b      	ldr	r3, [r7, #4]
 810cd70:	681b      	ldr	r3, [r3, #0]
 810cd72:	3308      	adds	r3, #8
 810cd74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cd76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810cd78:	e853 3f00 	ldrex	r3, [r3]
 810cd7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810cd7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810cd80:	f023 0301 	bic.w	r3, r3, #1
 810cd84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810cd88:	687b      	ldr	r3, [r7, #4]
 810cd8a:	681b      	ldr	r3, [r3, #0]
 810cd8c:	3308      	adds	r3, #8
 810cd8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 810cd92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810cd96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cd98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810cd9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810cd9e:	e841 2300 	strex	r3, r2, [r1]
 810cda2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810cda4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810cda6:	2b00      	cmp	r3, #0
 810cda8:	d1e1      	bne.n	810cd6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810cdaa:	687b      	ldr	r3, [r7, #4]
 810cdac:	681b      	ldr	r3, [r3, #0]
 810cdae:	3308      	adds	r3, #8
 810cdb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cdb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810cdb4:	e853 3f00 	ldrex	r3, [r3]
 810cdb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810cdba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810cdbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810cdc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810cdc4:	687b      	ldr	r3, [r7, #4]
 810cdc6:	681b      	ldr	r3, [r3, #0]
 810cdc8:	3308      	adds	r3, #8
 810cdca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 810cdce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810cdd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cdd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810cdd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810cdd6:	e841 2300 	strex	r3, r2, [r1]
 810cdda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810cddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810cdde:	2b00      	cmp	r3, #0
 810cde0:	d1e3      	bne.n	810cdaa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810cde2:	687b      	ldr	r3, [r7, #4]
 810cde4:	2220      	movs	r2, #32
 810cde6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cdea:	687b      	ldr	r3, [r7, #4]
 810cdec:	2200      	movs	r2, #0
 810cdee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810cdf0:	687b      	ldr	r3, [r7, #4]
 810cdf2:	681b      	ldr	r3, [r3, #0]
 810cdf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cdf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810cdf8:	e853 3f00 	ldrex	r3, [r3]
 810cdfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810cdfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ce00:	f023 0310 	bic.w	r3, r3, #16
 810ce04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810ce08:	687b      	ldr	r3, [r7, #4]
 810ce0a:	681b      	ldr	r3, [r3, #0]
 810ce0c:	461a      	mov	r2, r3
 810ce0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810ce12:	65bb      	str	r3, [r7, #88]	@ 0x58
 810ce14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ce16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810ce18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810ce1a:	e841 2300 	strex	r3, r2, [r1]
 810ce1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810ce20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810ce22:	2b00      	cmp	r3, #0
 810ce24:	d1e4      	bne.n	810cdf0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810ce26:	687b      	ldr	r3, [r7, #4]
 810ce28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ce2c:	4618      	mov	r0, r3
 810ce2e:	f7f9 fab9 	bl	81063a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810ce32:	687b      	ldr	r3, [r7, #4]
 810ce34:	2202      	movs	r2, #2
 810ce36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810ce38:	687b      	ldr	r3, [r7, #4]
 810ce3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810ce3e:	687b      	ldr	r3, [r7, #4]
 810ce40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ce44:	b29b      	uxth	r3, r3
 810ce46:	1ad3      	subs	r3, r2, r3
 810ce48:	b29b      	uxth	r3, r3
 810ce4a:	4619      	mov	r1, r3
 810ce4c:	6878      	ldr	r0, [r7, #4]
 810ce4e:	f000 f91d 	bl	810d08c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810ce52:	e0ff      	b.n	810d054 <HAL_UART_IRQHandler+0x764>
 810ce54:	40020010 	.word	0x40020010
 810ce58:	40020028 	.word	0x40020028
 810ce5c:	40020040 	.word	0x40020040
 810ce60:	40020058 	.word	0x40020058
 810ce64:	40020070 	.word	0x40020070
 810ce68:	40020088 	.word	0x40020088
 810ce6c:	400200a0 	.word	0x400200a0
 810ce70:	400200b8 	.word	0x400200b8
 810ce74:	40020410 	.word	0x40020410
 810ce78:	40020428 	.word	0x40020428
 810ce7c:	40020440 	.word	0x40020440
 810ce80:	40020458 	.word	0x40020458
 810ce84:	40020470 	.word	0x40020470
 810ce88:	40020488 	.word	0x40020488
 810ce8c:	400204a0 	.word	0x400204a0
 810ce90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810ce94:	687b      	ldr	r3, [r7, #4]
 810ce96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810ce9a:	687b      	ldr	r3, [r7, #4]
 810ce9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810cea0:	b29b      	uxth	r3, r3
 810cea2:	1ad3      	subs	r3, r2, r3
 810cea4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 810cea8:	687b      	ldr	r3, [r7, #4]
 810ceaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ceae:	b29b      	uxth	r3, r3
 810ceb0:	2b00      	cmp	r3, #0
 810ceb2:	f000 80d1 	beq.w	810d058 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 810ceb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810ceba:	2b00      	cmp	r3, #0
 810cebc:	f000 80cc 	beq.w	810d058 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810cec0:	687b      	ldr	r3, [r7, #4]
 810cec2:	681b      	ldr	r3, [r3, #0]
 810cec4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cec8:	e853 3f00 	ldrex	r3, [r3]
 810cecc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810cece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ced0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ced4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810ced8:	687b      	ldr	r3, [r7, #4]
 810ceda:	681b      	ldr	r3, [r3, #0]
 810cedc:	461a      	mov	r2, r3
 810cede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 810cee2:	647b      	str	r3, [r7, #68]	@ 0x44
 810cee4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cee6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810cee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ceea:	e841 2300 	strex	r3, r2, [r1]
 810ceee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810cef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810cef2:	2b00      	cmp	r3, #0
 810cef4:	d1e4      	bne.n	810cec0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810cef6:	687b      	ldr	r3, [r7, #4]
 810cef8:	681b      	ldr	r3, [r3, #0]
 810cefa:	3308      	adds	r3, #8
 810cefc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cf00:	e853 3f00 	ldrex	r3, [r3]
 810cf04:	623b      	str	r3, [r7, #32]
   return(result);
 810cf06:	6a3b      	ldr	r3, [r7, #32]
 810cf08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810cf0c:	f023 0301 	bic.w	r3, r3, #1
 810cf10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810cf14:	687b      	ldr	r3, [r7, #4]
 810cf16:	681b      	ldr	r3, [r3, #0]
 810cf18:	3308      	adds	r3, #8
 810cf1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810cf1e:	633a      	str	r2, [r7, #48]	@ 0x30
 810cf20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cf22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810cf24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810cf26:	e841 2300 	strex	r3, r2, [r1]
 810cf2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810cf2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cf2e:	2b00      	cmp	r3, #0
 810cf30:	d1e1      	bne.n	810cef6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810cf32:	687b      	ldr	r3, [r7, #4]
 810cf34:	2220      	movs	r2, #32
 810cf36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cf3a:	687b      	ldr	r3, [r7, #4]
 810cf3c:	2200      	movs	r2, #0
 810cf3e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810cf40:	687b      	ldr	r3, [r7, #4]
 810cf42:	2200      	movs	r2, #0
 810cf44:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810cf46:	687b      	ldr	r3, [r7, #4]
 810cf48:	681b      	ldr	r3, [r3, #0]
 810cf4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810cf4c:	693b      	ldr	r3, [r7, #16]
 810cf4e:	e853 3f00 	ldrex	r3, [r3]
 810cf52:	60fb      	str	r3, [r7, #12]
   return(result);
 810cf54:	68fb      	ldr	r3, [r7, #12]
 810cf56:	f023 0310 	bic.w	r3, r3, #16
 810cf5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810cf5e:	687b      	ldr	r3, [r7, #4]
 810cf60:	681b      	ldr	r3, [r3, #0]
 810cf62:	461a      	mov	r2, r3
 810cf64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 810cf68:	61fb      	str	r3, [r7, #28]
 810cf6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810cf6c:	69b9      	ldr	r1, [r7, #24]
 810cf6e:	69fa      	ldr	r2, [r7, #28]
 810cf70:	e841 2300 	strex	r3, r2, [r1]
 810cf74:	617b      	str	r3, [r7, #20]
   return(result);
 810cf76:	697b      	ldr	r3, [r7, #20]
 810cf78:	2b00      	cmp	r3, #0
 810cf7a:	d1e4      	bne.n	810cf46 <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810cf7c:	687b      	ldr	r3, [r7, #4]
 810cf7e:	2202      	movs	r2, #2
 810cf80:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810cf82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810cf86:	4619      	mov	r1, r3
 810cf88:	6878      	ldr	r0, [r7, #4]
 810cf8a:	f000 f87f 	bl	810d08c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810cf8e:	e063      	b.n	810d058 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810cf90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cf94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810cf98:	2b00      	cmp	r3, #0
 810cf9a:	d00e      	beq.n	810cfba <HAL_UART_IRQHandler+0x6ca>
 810cf9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810cfa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810cfa4:	2b00      	cmp	r3, #0
 810cfa6:	d008      	beq.n	810cfba <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810cfa8:	687b      	ldr	r3, [r7, #4]
 810cfaa:	681b      	ldr	r3, [r3, #0]
 810cfac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 810cfb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810cfb2:	6878      	ldr	r0, [r7, #4]
 810cfb4:	f001 fe7e 	bl	810ecb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810cfb8:	e051      	b.n	810d05e <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810cfba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cfbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cfc2:	2b00      	cmp	r3, #0
 810cfc4:	d014      	beq.n	810cff0 <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810cfc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810cfca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cfce:	2b00      	cmp	r3, #0
 810cfd0:	d105      	bne.n	810cfde <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810cfd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810cfd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810cfda:	2b00      	cmp	r3, #0
 810cfdc:	d008      	beq.n	810cff0 <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 810cfde:	687b      	ldr	r3, [r7, #4]
 810cfe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810cfe2:	2b00      	cmp	r3, #0
 810cfe4:	d03a      	beq.n	810d05c <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 810cfe6:	687b      	ldr	r3, [r7, #4]
 810cfe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810cfea:	6878      	ldr	r0, [r7, #4]
 810cfec:	4798      	blx	r3
    }
    return;
 810cfee:	e035      	b.n	810d05c <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810cff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810cff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cff8:	2b00      	cmp	r3, #0
 810cffa:	d009      	beq.n	810d010 <HAL_UART_IRQHandler+0x720>
 810cffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d004:	2b00      	cmp	r3, #0
 810d006:	d003      	beq.n	810d010 <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 810d008:	6878      	ldr	r0, [r7, #4]
 810d00a:	f001 f90b 	bl	810e224 <UART_EndTransmit_IT>
    return;
 810d00e:	e026      	b.n	810d05e <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810d010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810d018:	2b00      	cmp	r3, #0
 810d01a:	d009      	beq.n	810d030 <HAL_UART_IRQHandler+0x740>
 810d01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d020:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810d024:	2b00      	cmp	r3, #0
 810d026:	d003      	beq.n	810d030 <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810d028:	6878      	ldr	r0, [r7, #4]
 810d02a:	f001 fe57 	bl	810ecdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810d02e:	e016      	b.n	810d05e <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810d030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810d034:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810d038:	2b00      	cmp	r3, #0
 810d03a:	d010      	beq.n	810d05e <HAL_UART_IRQHandler+0x76e>
 810d03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810d040:	2b00      	cmp	r3, #0
 810d042:	da0c      	bge.n	810d05e <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810d044:	6878      	ldr	r0, [r7, #4]
 810d046:	f001 fe3f 	bl	810ecc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810d04a:	e008      	b.n	810d05e <HAL_UART_IRQHandler+0x76e>
      return;
 810d04c:	bf00      	nop
 810d04e:	e006      	b.n	810d05e <HAL_UART_IRQHandler+0x76e>
    return;
 810d050:	bf00      	nop
 810d052:	e004      	b.n	810d05e <HAL_UART_IRQHandler+0x76e>
      return;
 810d054:	bf00      	nop
 810d056:	e002      	b.n	810d05e <HAL_UART_IRQHandler+0x76e>
      return;
 810d058:	bf00      	nop
 810d05a:	e000      	b.n	810d05e <HAL_UART_IRQHandler+0x76e>
    return;
 810d05c:	bf00      	nop
  }
}
 810d05e:	37e8      	adds	r7, #232	@ 0xe8
 810d060:	46bd      	mov	sp, r7
 810d062:	bd80      	pop	{r7, pc}

0810d064 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810d064:	b480      	push	{r7}
 810d066:	b083      	sub	sp, #12
 810d068:	af00      	add	r7, sp, #0
 810d06a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810d06c:	bf00      	nop
 810d06e:	370c      	adds	r7, #12
 810d070:	46bd      	mov	sp, r7
 810d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d076:	4770      	bx	lr

0810d078 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810d078:	b480      	push	{r7}
 810d07a:	b083      	sub	sp, #12
 810d07c:	af00      	add	r7, sp, #0
 810d07e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810d080:	bf00      	nop
 810d082:	370c      	adds	r7, #12
 810d084:	46bd      	mov	sp, r7
 810d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d08a:	4770      	bx	lr

0810d08c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810d08c:	b480      	push	{r7}
 810d08e:	b083      	sub	sp, #12
 810d090:	af00      	add	r7, sp, #0
 810d092:	6078      	str	r0, [r7, #4]
 810d094:	460b      	mov	r3, r1
 810d096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810d098:	bf00      	nop
 810d09a:	370c      	adds	r7, #12
 810d09c:	46bd      	mov	sp, r7
 810d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0a2:	4770      	bx	lr

0810d0a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810d0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810d0a8:	b092      	sub	sp, #72	@ 0x48
 810d0aa:	af00      	add	r7, sp, #0
 810d0ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810d0ae:	2300      	movs	r3, #0
 810d0b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810d0b4:	697b      	ldr	r3, [r7, #20]
 810d0b6:	689a      	ldr	r2, [r3, #8]
 810d0b8:	697b      	ldr	r3, [r7, #20]
 810d0ba:	691b      	ldr	r3, [r3, #16]
 810d0bc:	431a      	orrs	r2, r3
 810d0be:	697b      	ldr	r3, [r7, #20]
 810d0c0:	695b      	ldr	r3, [r3, #20]
 810d0c2:	431a      	orrs	r2, r3
 810d0c4:	697b      	ldr	r3, [r7, #20]
 810d0c6:	69db      	ldr	r3, [r3, #28]
 810d0c8:	4313      	orrs	r3, r2
 810d0ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810d0cc:	697b      	ldr	r3, [r7, #20]
 810d0ce:	681b      	ldr	r3, [r3, #0]
 810d0d0:	681a      	ldr	r2, [r3, #0]
 810d0d2:	4bbd      	ldr	r3, [pc, #756]	@ (810d3c8 <UART_SetConfig+0x324>)
 810d0d4:	4013      	ands	r3, r2
 810d0d6:	697a      	ldr	r2, [r7, #20]
 810d0d8:	6812      	ldr	r2, [r2, #0]
 810d0da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810d0dc:	430b      	orrs	r3, r1
 810d0de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810d0e0:	697b      	ldr	r3, [r7, #20]
 810d0e2:	681b      	ldr	r3, [r3, #0]
 810d0e4:	685b      	ldr	r3, [r3, #4]
 810d0e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810d0ea:	697b      	ldr	r3, [r7, #20]
 810d0ec:	68da      	ldr	r2, [r3, #12]
 810d0ee:	697b      	ldr	r3, [r7, #20]
 810d0f0:	681b      	ldr	r3, [r3, #0]
 810d0f2:	430a      	orrs	r2, r1
 810d0f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810d0f6:	697b      	ldr	r3, [r7, #20]
 810d0f8:	699b      	ldr	r3, [r3, #24]
 810d0fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810d0fc:	697b      	ldr	r3, [r7, #20]
 810d0fe:	681b      	ldr	r3, [r3, #0]
 810d100:	4ab2      	ldr	r2, [pc, #712]	@ (810d3cc <UART_SetConfig+0x328>)
 810d102:	4293      	cmp	r3, r2
 810d104:	d004      	beq.n	810d110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810d106:	697b      	ldr	r3, [r7, #20]
 810d108:	6a1b      	ldr	r3, [r3, #32]
 810d10a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810d10c:	4313      	orrs	r3, r2
 810d10e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810d110:	697b      	ldr	r3, [r7, #20]
 810d112:	681b      	ldr	r3, [r3, #0]
 810d114:	689b      	ldr	r3, [r3, #8]
 810d116:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810d11a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810d11e:	697a      	ldr	r2, [r7, #20]
 810d120:	6812      	ldr	r2, [r2, #0]
 810d122:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810d124:	430b      	orrs	r3, r1
 810d126:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810d128:	697b      	ldr	r3, [r7, #20]
 810d12a:	681b      	ldr	r3, [r3, #0]
 810d12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d12e:	f023 010f 	bic.w	r1, r3, #15
 810d132:	697b      	ldr	r3, [r7, #20]
 810d134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810d136:	697b      	ldr	r3, [r7, #20]
 810d138:	681b      	ldr	r3, [r3, #0]
 810d13a:	430a      	orrs	r2, r1
 810d13c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810d13e:	697b      	ldr	r3, [r7, #20]
 810d140:	681b      	ldr	r3, [r3, #0]
 810d142:	4aa3      	ldr	r2, [pc, #652]	@ (810d3d0 <UART_SetConfig+0x32c>)
 810d144:	4293      	cmp	r3, r2
 810d146:	d177      	bne.n	810d238 <UART_SetConfig+0x194>
 810d148:	4ba2      	ldr	r3, [pc, #648]	@ (810d3d4 <UART_SetConfig+0x330>)
 810d14a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d14c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810d150:	2b28      	cmp	r3, #40	@ 0x28
 810d152:	d86d      	bhi.n	810d230 <UART_SetConfig+0x18c>
 810d154:	a201      	add	r2, pc, #4	@ (adr r2, 810d15c <UART_SetConfig+0xb8>)
 810d156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d15a:	bf00      	nop
 810d15c:	0810d201 	.word	0x0810d201
 810d160:	0810d231 	.word	0x0810d231
 810d164:	0810d231 	.word	0x0810d231
 810d168:	0810d231 	.word	0x0810d231
 810d16c:	0810d231 	.word	0x0810d231
 810d170:	0810d231 	.word	0x0810d231
 810d174:	0810d231 	.word	0x0810d231
 810d178:	0810d231 	.word	0x0810d231
 810d17c:	0810d209 	.word	0x0810d209
 810d180:	0810d231 	.word	0x0810d231
 810d184:	0810d231 	.word	0x0810d231
 810d188:	0810d231 	.word	0x0810d231
 810d18c:	0810d231 	.word	0x0810d231
 810d190:	0810d231 	.word	0x0810d231
 810d194:	0810d231 	.word	0x0810d231
 810d198:	0810d231 	.word	0x0810d231
 810d19c:	0810d211 	.word	0x0810d211
 810d1a0:	0810d231 	.word	0x0810d231
 810d1a4:	0810d231 	.word	0x0810d231
 810d1a8:	0810d231 	.word	0x0810d231
 810d1ac:	0810d231 	.word	0x0810d231
 810d1b0:	0810d231 	.word	0x0810d231
 810d1b4:	0810d231 	.word	0x0810d231
 810d1b8:	0810d231 	.word	0x0810d231
 810d1bc:	0810d219 	.word	0x0810d219
 810d1c0:	0810d231 	.word	0x0810d231
 810d1c4:	0810d231 	.word	0x0810d231
 810d1c8:	0810d231 	.word	0x0810d231
 810d1cc:	0810d231 	.word	0x0810d231
 810d1d0:	0810d231 	.word	0x0810d231
 810d1d4:	0810d231 	.word	0x0810d231
 810d1d8:	0810d231 	.word	0x0810d231
 810d1dc:	0810d221 	.word	0x0810d221
 810d1e0:	0810d231 	.word	0x0810d231
 810d1e4:	0810d231 	.word	0x0810d231
 810d1e8:	0810d231 	.word	0x0810d231
 810d1ec:	0810d231 	.word	0x0810d231
 810d1f0:	0810d231 	.word	0x0810d231
 810d1f4:	0810d231 	.word	0x0810d231
 810d1f8:	0810d231 	.word	0x0810d231
 810d1fc:	0810d229 	.word	0x0810d229
 810d200:	2301      	movs	r3, #1
 810d202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d206:	e220      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d208:	2304      	movs	r3, #4
 810d20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d20e:	e21c      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d210:	2308      	movs	r3, #8
 810d212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d216:	e218      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d218:	2310      	movs	r3, #16
 810d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d21e:	e214      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d220:	2320      	movs	r3, #32
 810d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d226:	e210      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d228:	2340      	movs	r3, #64	@ 0x40
 810d22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d22e:	e20c      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d230:	2380      	movs	r3, #128	@ 0x80
 810d232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d236:	e208      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d238:	697b      	ldr	r3, [r7, #20]
 810d23a:	681b      	ldr	r3, [r3, #0]
 810d23c:	4a66      	ldr	r2, [pc, #408]	@ (810d3d8 <UART_SetConfig+0x334>)
 810d23e:	4293      	cmp	r3, r2
 810d240:	d130      	bne.n	810d2a4 <UART_SetConfig+0x200>
 810d242:	4b64      	ldr	r3, [pc, #400]	@ (810d3d4 <UART_SetConfig+0x330>)
 810d244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d246:	f003 0307 	and.w	r3, r3, #7
 810d24a:	2b05      	cmp	r3, #5
 810d24c:	d826      	bhi.n	810d29c <UART_SetConfig+0x1f8>
 810d24e:	a201      	add	r2, pc, #4	@ (adr r2, 810d254 <UART_SetConfig+0x1b0>)
 810d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d254:	0810d26d 	.word	0x0810d26d
 810d258:	0810d275 	.word	0x0810d275
 810d25c:	0810d27d 	.word	0x0810d27d
 810d260:	0810d285 	.word	0x0810d285
 810d264:	0810d28d 	.word	0x0810d28d
 810d268:	0810d295 	.word	0x0810d295
 810d26c:	2300      	movs	r3, #0
 810d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d272:	e1ea      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d274:	2304      	movs	r3, #4
 810d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d27a:	e1e6      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d27c:	2308      	movs	r3, #8
 810d27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d282:	e1e2      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d284:	2310      	movs	r3, #16
 810d286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d28a:	e1de      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d28c:	2320      	movs	r3, #32
 810d28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d292:	e1da      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d294:	2340      	movs	r3, #64	@ 0x40
 810d296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d29a:	e1d6      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d29c:	2380      	movs	r3, #128	@ 0x80
 810d29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2a2:	e1d2      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d2a4:	697b      	ldr	r3, [r7, #20]
 810d2a6:	681b      	ldr	r3, [r3, #0]
 810d2a8:	4a4c      	ldr	r2, [pc, #304]	@ (810d3dc <UART_SetConfig+0x338>)
 810d2aa:	4293      	cmp	r3, r2
 810d2ac:	d130      	bne.n	810d310 <UART_SetConfig+0x26c>
 810d2ae:	4b49      	ldr	r3, [pc, #292]	@ (810d3d4 <UART_SetConfig+0x330>)
 810d2b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d2b2:	f003 0307 	and.w	r3, r3, #7
 810d2b6:	2b05      	cmp	r3, #5
 810d2b8:	d826      	bhi.n	810d308 <UART_SetConfig+0x264>
 810d2ba:	a201      	add	r2, pc, #4	@ (adr r2, 810d2c0 <UART_SetConfig+0x21c>)
 810d2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d2c0:	0810d2d9 	.word	0x0810d2d9
 810d2c4:	0810d2e1 	.word	0x0810d2e1
 810d2c8:	0810d2e9 	.word	0x0810d2e9
 810d2cc:	0810d2f1 	.word	0x0810d2f1
 810d2d0:	0810d2f9 	.word	0x0810d2f9
 810d2d4:	0810d301 	.word	0x0810d301
 810d2d8:	2300      	movs	r3, #0
 810d2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2de:	e1b4      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d2e0:	2304      	movs	r3, #4
 810d2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2e6:	e1b0      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d2e8:	2308      	movs	r3, #8
 810d2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2ee:	e1ac      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d2f0:	2310      	movs	r3, #16
 810d2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2f6:	e1a8      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d2f8:	2320      	movs	r3, #32
 810d2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d2fe:	e1a4      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d300:	2340      	movs	r3, #64	@ 0x40
 810d302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d306:	e1a0      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d308:	2380      	movs	r3, #128	@ 0x80
 810d30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d30e:	e19c      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d310:	697b      	ldr	r3, [r7, #20]
 810d312:	681b      	ldr	r3, [r3, #0]
 810d314:	4a32      	ldr	r2, [pc, #200]	@ (810d3e0 <UART_SetConfig+0x33c>)
 810d316:	4293      	cmp	r3, r2
 810d318:	d130      	bne.n	810d37c <UART_SetConfig+0x2d8>
 810d31a:	4b2e      	ldr	r3, [pc, #184]	@ (810d3d4 <UART_SetConfig+0x330>)
 810d31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d31e:	f003 0307 	and.w	r3, r3, #7
 810d322:	2b05      	cmp	r3, #5
 810d324:	d826      	bhi.n	810d374 <UART_SetConfig+0x2d0>
 810d326:	a201      	add	r2, pc, #4	@ (adr r2, 810d32c <UART_SetConfig+0x288>)
 810d328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d32c:	0810d345 	.word	0x0810d345
 810d330:	0810d34d 	.word	0x0810d34d
 810d334:	0810d355 	.word	0x0810d355
 810d338:	0810d35d 	.word	0x0810d35d
 810d33c:	0810d365 	.word	0x0810d365
 810d340:	0810d36d 	.word	0x0810d36d
 810d344:	2300      	movs	r3, #0
 810d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d34a:	e17e      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d34c:	2304      	movs	r3, #4
 810d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d352:	e17a      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d354:	2308      	movs	r3, #8
 810d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d35a:	e176      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d35c:	2310      	movs	r3, #16
 810d35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d362:	e172      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d364:	2320      	movs	r3, #32
 810d366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d36a:	e16e      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d36c:	2340      	movs	r3, #64	@ 0x40
 810d36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d372:	e16a      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d374:	2380      	movs	r3, #128	@ 0x80
 810d376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d37a:	e166      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d37c:	697b      	ldr	r3, [r7, #20]
 810d37e:	681b      	ldr	r3, [r3, #0]
 810d380:	4a18      	ldr	r2, [pc, #96]	@ (810d3e4 <UART_SetConfig+0x340>)
 810d382:	4293      	cmp	r3, r2
 810d384:	d140      	bne.n	810d408 <UART_SetConfig+0x364>
 810d386:	4b13      	ldr	r3, [pc, #76]	@ (810d3d4 <UART_SetConfig+0x330>)
 810d388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d38a:	f003 0307 	and.w	r3, r3, #7
 810d38e:	2b05      	cmp	r3, #5
 810d390:	d836      	bhi.n	810d400 <UART_SetConfig+0x35c>
 810d392:	a201      	add	r2, pc, #4	@ (adr r2, 810d398 <UART_SetConfig+0x2f4>)
 810d394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d398:	0810d3b1 	.word	0x0810d3b1
 810d39c:	0810d3b9 	.word	0x0810d3b9
 810d3a0:	0810d3c1 	.word	0x0810d3c1
 810d3a4:	0810d3e9 	.word	0x0810d3e9
 810d3a8:	0810d3f1 	.word	0x0810d3f1
 810d3ac:	0810d3f9 	.word	0x0810d3f9
 810d3b0:	2300      	movs	r3, #0
 810d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d3b6:	e148      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d3b8:	2304      	movs	r3, #4
 810d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d3be:	e144      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d3c0:	2308      	movs	r3, #8
 810d3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d3c6:	e140      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d3c8:	cfff69f3 	.word	0xcfff69f3
 810d3cc:	58000c00 	.word	0x58000c00
 810d3d0:	40011000 	.word	0x40011000
 810d3d4:	58024400 	.word	0x58024400
 810d3d8:	40004400 	.word	0x40004400
 810d3dc:	40004800 	.word	0x40004800
 810d3e0:	40004c00 	.word	0x40004c00
 810d3e4:	40005000 	.word	0x40005000
 810d3e8:	2310      	movs	r3, #16
 810d3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d3ee:	e12c      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d3f0:	2320      	movs	r3, #32
 810d3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d3f6:	e128      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d3f8:	2340      	movs	r3, #64	@ 0x40
 810d3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d3fe:	e124      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d400:	2380      	movs	r3, #128	@ 0x80
 810d402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d406:	e120      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d408:	697b      	ldr	r3, [r7, #20]
 810d40a:	681b      	ldr	r3, [r3, #0]
 810d40c:	4acb      	ldr	r2, [pc, #812]	@ (810d73c <UART_SetConfig+0x698>)
 810d40e:	4293      	cmp	r3, r2
 810d410:	d176      	bne.n	810d500 <UART_SetConfig+0x45c>
 810d412:	4bcb      	ldr	r3, [pc, #812]	@ (810d740 <UART_SetConfig+0x69c>)
 810d414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810d41a:	2b28      	cmp	r3, #40	@ 0x28
 810d41c:	d86c      	bhi.n	810d4f8 <UART_SetConfig+0x454>
 810d41e:	a201      	add	r2, pc, #4	@ (adr r2, 810d424 <UART_SetConfig+0x380>)
 810d420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d424:	0810d4c9 	.word	0x0810d4c9
 810d428:	0810d4f9 	.word	0x0810d4f9
 810d42c:	0810d4f9 	.word	0x0810d4f9
 810d430:	0810d4f9 	.word	0x0810d4f9
 810d434:	0810d4f9 	.word	0x0810d4f9
 810d438:	0810d4f9 	.word	0x0810d4f9
 810d43c:	0810d4f9 	.word	0x0810d4f9
 810d440:	0810d4f9 	.word	0x0810d4f9
 810d444:	0810d4d1 	.word	0x0810d4d1
 810d448:	0810d4f9 	.word	0x0810d4f9
 810d44c:	0810d4f9 	.word	0x0810d4f9
 810d450:	0810d4f9 	.word	0x0810d4f9
 810d454:	0810d4f9 	.word	0x0810d4f9
 810d458:	0810d4f9 	.word	0x0810d4f9
 810d45c:	0810d4f9 	.word	0x0810d4f9
 810d460:	0810d4f9 	.word	0x0810d4f9
 810d464:	0810d4d9 	.word	0x0810d4d9
 810d468:	0810d4f9 	.word	0x0810d4f9
 810d46c:	0810d4f9 	.word	0x0810d4f9
 810d470:	0810d4f9 	.word	0x0810d4f9
 810d474:	0810d4f9 	.word	0x0810d4f9
 810d478:	0810d4f9 	.word	0x0810d4f9
 810d47c:	0810d4f9 	.word	0x0810d4f9
 810d480:	0810d4f9 	.word	0x0810d4f9
 810d484:	0810d4e1 	.word	0x0810d4e1
 810d488:	0810d4f9 	.word	0x0810d4f9
 810d48c:	0810d4f9 	.word	0x0810d4f9
 810d490:	0810d4f9 	.word	0x0810d4f9
 810d494:	0810d4f9 	.word	0x0810d4f9
 810d498:	0810d4f9 	.word	0x0810d4f9
 810d49c:	0810d4f9 	.word	0x0810d4f9
 810d4a0:	0810d4f9 	.word	0x0810d4f9
 810d4a4:	0810d4e9 	.word	0x0810d4e9
 810d4a8:	0810d4f9 	.word	0x0810d4f9
 810d4ac:	0810d4f9 	.word	0x0810d4f9
 810d4b0:	0810d4f9 	.word	0x0810d4f9
 810d4b4:	0810d4f9 	.word	0x0810d4f9
 810d4b8:	0810d4f9 	.word	0x0810d4f9
 810d4bc:	0810d4f9 	.word	0x0810d4f9
 810d4c0:	0810d4f9 	.word	0x0810d4f9
 810d4c4:	0810d4f1 	.word	0x0810d4f1
 810d4c8:	2301      	movs	r3, #1
 810d4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d4ce:	e0bc      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d4d0:	2304      	movs	r3, #4
 810d4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d4d6:	e0b8      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d4d8:	2308      	movs	r3, #8
 810d4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d4de:	e0b4      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d4e0:	2310      	movs	r3, #16
 810d4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d4e6:	e0b0      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d4e8:	2320      	movs	r3, #32
 810d4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d4ee:	e0ac      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d4f0:	2340      	movs	r3, #64	@ 0x40
 810d4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d4f6:	e0a8      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d4f8:	2380      	movs	r3, #128	@ 0x80
 810d4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d4fe:	e0a4      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d500:	697b      	ldr	r3, [r7, #20]
 810d502:	681b      	ldr	r3, [r3, #0]
 810d504:	4a8f      	ldr	r2, [pc, #572]	@ (810d744 <UART_SetConfig+0x6a0>)
 810d506:	4293      	cmp	r3, r2
 810d508:	d130      	bne.n	810d56c <UART_SetConfig+0x4c8>
 810d50a:	4b8d      	ldr	r3, [pc, #564]	@ (810d740 <UART_SetConfig+0x69c>)
 810d50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d50e:	f003 0307 	and.w	r3, r3, #7
 810d512:	2b05      	cmp	r3, #5
 810d514:	d826      	bhi.n	810d564 <UART_SetConfig+0x4c0>
 810d516:	a201      	add	r2, pc, #4	@ (adr r2, 810d51c <UART_SetConfig+0x478>)
 810d518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d51c:	0810d535 	.word	0x0810d535
 810d520:	0810d53d 	.word	0x0810d53d
 810d524:	0810d545 	.word	0x0810d545
 810d528:	0810d54d 	.word	0x0810d54d
 810d52c:	0810d555 	.word	0x0810d555
 810d530:	0810d55d 	.word	0x0810d55d
 810d534:	2300      	movs	r3, #0
 810d536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d53a:	e086      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d53c:	2304      	movs	r3, #4
 810d53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d542:	e082      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d544:	2308      	movs	r3, #8
 810d546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d54a:	e07e      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d54c:	2310      	movs	r3, #16
 810d54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d552:	e07a      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d554:	2320      	movs	r3, #32
 810d556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d55a:	e076      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d55c:	2340      	movs	r3, #64	@ 0x40
 810d55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d562:	e072      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d564:	2380      	movs	r3, #128	@ 0x80
 810d566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d56a:	e06e      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d56c:	697b      	ldr	r3, [r7, #20]
 810d56e:	681b      	ldr	r3, [r3, #0]
 810d570:	4a75      	ldr	r2, [pc, #468]	@ (810d748 <UART_SetConfig+0x6a4>)
 810d572:	4293      	cmp	r3, r2
 810d574:	d130      	bne.n	810d5d8 <UART_SetConfig+0x534>
 810d576:	4b72      	ldr	r3, [pc, #456]	@ (810d740 <UART_SetConfig+0x69c>)
 810d578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d57a:	f003 0307 	and.w	r3, r3, #7
 810d57e:	2b05      	cmp	r3, #5
 810d580:	d826      	bhi.n	810d5d0 <UART_SetConfig+0x52c>
 810d582:	a201      	add	r2, pc, #4	@ (adr r2, 810d588 <UART_SetConfig+0x4e4>)
 810d584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d588:	0810d5a1 	.word	0x0810d5a1
 810d58c:	0810d5a9 	.word	0x0810d5a9
 810d590:	0810d5b1 	.word	0x0810d5b1
 810d594:	0810d5b9 	.word	0x0810d5b9
 810d598:	0810d5c1 	.word	0x0810d5c1
 810d59c:	0810d5c9 	.word	0x0810d5c9
 810d5a0:	2300      	movs	r3, #0
 810d5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d5a6:	e050      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d5a8:	2304      	movs	r3, #4
 810d5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d5ae:	e04c      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d5b0:	2308      	movs	r3, #8
 810d5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d5b6:	e048      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d5b8:	2310      	movs	r3, #16
 810d5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d5be:	e044      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d5c0:	2320      	movs	r3, #32
 810d5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d5c6:	e040      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d5c8:	2340      	movs	r3, #64	@ 0x40
 810d5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d5ce:	e03c      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d5d0:	2380      	movs	r3, #128	@ 0x80
 810d5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d5d6:	e038      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d5d8:	697b      	ldr	r3, [r7, #20]
 810d5da:	681b      	ldr	r3, [r3, #0]
 810d5dc:	4a5b      	ldr	r2, [pc, #364]	@ (810d74c <UART_SetConfig+0x6a8>)
 810d5de:	4293      	cmp	r3, r2
 810d5e0:	d130      	bne.n	810d644 <UART_SetConfig+0x5a0>
 810d5e2:	4b57      	ldr	r3, [pc, #348]	@ (810d740 <UART_SetConfig+0x69c>)
 810d5e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d5e6:	f003 0307 	and.w	r3, r3, #7
 810d5ea:	2b05      	cmp	r3, #5
 810d5ec:	d826      	bhi.n	810d63c <UART_SetConfig+0x598>
 810d5ee:	a201      	add	r2, pc, #4	@ (adr r2, 810d5f4 <UART_SetConfig+0x550>)
 810d5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d5f4:	0810d60d 	.word	0x0810d60d
 810d5f8:	0810d615 	.word	0x0810d615
 810d5fc:	0810d61d 	.word	0x0810d61d
 810d600:	0810d625 	.word	0x0810d625
 810d604:	0810d62d 	.word	0x0810d62d
 810d608:	0810d635 	.word	0x0810d635
 810d60c:	2302      	movs	r3, #2
 810d60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d612:	e01a      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d614:	2304      	movs	r3, #4
 810d616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d61a:	e016      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d61c:	2308      	movs	r3, #8
 810d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d622:	e012      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d624:	2310      	movs	r3, #16
 810d626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d62a:	e00e      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d62c:	2320      	movs	r3, #32
 810d62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d632:	e00a      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d634:	2340      	movs	r3, #64	@ 0x40
 810d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d63a:	e006      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d63c:	2380      	movs	r3, #128	@ 0x80
 810d63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810d642:	e002      	b.n	810d64a <UART_SetConfig+0x5a6>
 810d644:	2380      	movs	r3, #128	@ 0x80
 810d646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810d64a:	697b      	ldr	r3, [r7, #20]
 810d64c:	681b      	ldr	r3, [r3, #0]
 810d64e:	4a3f      	ldr	r2, [pc, #252]	@ (810d74c <UART_SetConfig+0x6a8>)
 810d650:	4293      	cmp	r3, r2
 810d652:	f040 80f8 	bne.w	810d846 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810d656:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d65a:	2b20      	cmp	r3, #32
 810d65c:	dc46      	bgt.n	810d6ec <UART_SetConfig+0x648>
 810d65e:	2b02      	cmp	r3, #2
 810d660:	f2c0 8082 	blt.w	810d768 <UART_SetConfig+0x6c4>
 810d664:	3b02      	subs	r3, #2
 810d666:	2b1e      	cmp	r3, #30
 810d668:	d87e      	bhi.n	810d768 <UART_SetConfig+0x6c4>
 810d66a:	a201      	add	r2, pc, #4	@ (adr r2, 810d670 <UART_SetConfig+0x5cc>)
 810d66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d670:	0810d6f3 	.word	0x0810d6f3
 810d674:	0810d769 	.word	0x0810d769
 810d678:	0810d6fb 	.word	0x0810d6fb
 810d67c:	0810d769 	.word	0x0810d769
 810d680:	0810d769 	.word	0x0810d769
 810d684:	0810d769 	.word	0x0810d769
 810d688:	0810d70b 	.word	0x0810d70b
 810d68c:	0810d769 	.word	0x0810d769
 810d690:	0810d769 	.word	0x0810d769
 810d694:	0810d769 	.word	0x0810d769
 810d698:	0810d769 	.word	0x0810d769
 810d69c:	0810d769 	.word	0x0810d769
 810d6a0:	0810d769 	.word	0x0810d769
 810d6a4:	0810d769 	.word	0x0810d769
 810d6a8:	0810d71b 	.word	0x0810d71b
 810d6ac:	0810d769 	.word	0x0810d769
 810d6b0:	0810d769 	.word	0x0810d769
 810d6b4:	0810d769 	.word	0x0810d769
 810d6b8:	0810d769 	.word	0x0810d769
 810d6bc:	0810d769 	.word	0x0810d769
 810d6c0:	0810d769 	.word	0x0810d769
 810d6c4:	0810d769 	.word	0x0810d769
 810d6c8:	0810d769 	.word	0x0810d769
 810d6cc:	0810d769 	.word	0x0810d769
 810d6d0:	0810d769 	.word	0x0810d769
 810d6d4:	0810d769 	.word	0x0810d769
 810d6d8:	0810d769 	.word	0x0810d769
 810d6dc:	0810d769 	.word	0x0810d769
 810d6e0:	0810d769 	.word	0x0810d769
 810d6e4:	0810d769 	.word	0x0810d769
 810d6e8:	0810d75b 	.word	0x0810d75b
 810d6ec:	2b40      	cmp	r3, #64	@ 0x40
 810d6ee:	d037      	beq.n	810d760 <UART_SetConfig+0x6bc>
 810d6f0:	e03a      	b.n	810d768 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810d6f2:	f7fc fd9d 	bl	810a230 <HAL_RCCEx_GetD3PCLK1Freq>
 810d6f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d6f8:	e03c      	b.n	810d774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d6fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d6fe:	4618      	mov	r0, r3
 810d700:	f7fc fdac 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d708:	e034      	b.n	810d774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d70a:	f107 0318 	add.w	r3, r7, #24
 810d70e:	4618      	mov	r0, r3
 810d710:	f7fc fef8 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d714:	69fb      	ldr	r3, [r7, #28]
 810d716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d718:	e02c      	b.n	810d774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d71a:	4b09      	ldr	r3, [pc, #36]	@ (810d740 <UART_SetConfig+0x69c>)
 810d71c:	681b      	ldr	r3, [r3, #0]
 810d71e:	f003 0320 	and.w	r3, r3, #32
 810d722:	2b00      	cmp	r3, #0
 810d724:	d016      	beq.n	810d754 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d726:	4b06      	ldr	r3, [pc, #24]	@ (810d740 <UART_SetConfig+0x69c>)
 810d728:	681b      	ldr	r3, [r3, #0]
 810d72a:	08db      	lsrs	r3, r3, #3
 810d72c:	f003 0303 	and.w	r3, r3, #3
 810d730:	4a07      	ldr	r2, [pc, #28]	@ (810d750 <UART_SetConfig+0x6ac>)
 810d732:	fa22 f303 	lsr.w	r3, r2, r3
 810d736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d738:	e01c      	b.n	810d774 <UART_SetConfig+0x6d0>
 810d73a:	bf00      	nop
 810d73c:	40011400 	.word	0x40011400
 810d740:	58024400 	.word	0x58024400
 810d744:	40007800 	.word	0x40007800
 810d748:	40007c00 	.word	0x40007c00
 810d74c:	58000c00 	.word	0x58000c00
 810d750:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810d754:	4b9d      	ldr	r3, [pc, #628]	@ (810d9cc <UART_SetConfig+0x928>)
 810d756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d758:	e00c      	b.n	810d774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d75a:	4b9d      	ldr	r3, [pc, #628]	@ (810d9d0 <UART_SetConfig+0x92c>)
 810d75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d75e:	e009      	b.n	810d774 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d760:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d766:	e005      	b.n	810d774 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810d768:	2300      	movs	r3, #0
 810d76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d76c:	2301      	movs	r3, #1
 810d76e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d772:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810d774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d776:	2b00      	cmp	r3, #0
 810d778:	f000 81de 	beq.w	810db38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810d77c:	697b      	ldr	r3, [r7, #20]
 810d77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d780:	4a94      	ldr	r2, [pc, #592]	@ (810d9d4 <UART_SetConfig+0x930>)
 810d782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d786:	461a      	mov	r2, r3
 810d788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d78a:	fbb3 f3f2 	udiv	r3, r3, r2
 810d78e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810d790:	697b      	ldr	r3, [r7, #20]
 810d792:	685a      	ldr	r2, [r3, #4]
 810d794:	4613      	mov	r3, r2
 810d796:	005b      	lsls	r3, r3, #1
 810d798:	4413      	add	r3, r2
 810d79a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d79c:	429a      	cmp	r2, r3
 810d79e:	d305      	bcc.n	810d7ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810d7a0:	697b      	ldr	r3, [r7, #20]
 810d7a2:	685b      	ldr	r3, [r3, #4]
 810d7a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810d7a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d7a8:	429a      	cmp	r2, r3
 810d7aa:	d903      	bls.n	810d7b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810d7ac:	2301      	movs	r3, #1
 810d7ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d7b2:	e1c1      	b.n	810db38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d7b6:	2200      	movs	r2, #0
 810d7b8:	60bb      	str	r3, [r7, #8]
 810d7ba:	60fa      	str	r2, [r7, #12]
 810d7bc:	697b      	ldr	r3, [r7, #20]
 810d7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d7c0:	4a84      	ldr	r2, [pc, #528]	@ (810d9d4 <UART_SetConfig+0x930>)
 810d7c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d7c6:	b29b      	uxth	r3, r3
 810d7c8:	2200      	movs	r2, #0
 810d7ca:	603b      	str	r3, [r7, #0]
 810d7cc:	607a      	str	r2, [r7, #4]
 810d7ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d7d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810d7d6:	f7f3 fadf 	bl	8100d98 <__aeabi_uldivmod>
 810d7da:	4602      	mov	r2, r0
 810d7dc:	460b      	mov	r3, r1
 810d7de:	4610      	mov	r0, r2
 810d7e0:	4619      	mov	r1, r3
 810d7e2:	f04f 0200 	mov.w	r2, #0
 810d7e6:	f04f 0300 	mov.w	r3, #0
 810d7ea:	020b      	lsls	r3, r1, #8
 810d7ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810d7f0:	0202      	lsls	r2, r0, #8
 810d7f2:	6979      	ldr	r1, [r7, #20]
 810d7f4:	6849      	ldr	r1, [r1, #4]
 810d7f6:	0849      	lsrs	r1, r1, #1
 810d7f8:	2000      	movs	r0, #0
 810d7fa:	460c      	mov	r4, r1
 810d7fc:	4605      	mov	r5, r0
 810d7fe:	eb12 0804 	adds.w	r8, r2, r4
 810d802:	eb43 0905 	adc.w	r9, r3, r5
 810d806:	697b      	ldr	r3, [r7, #20]
 810d808:	685b      	ldr	r3, [r3, #4]
 810d80a:	2200      	movs	r2, #0
 810d80c:	469a      	mov	sl, r3
 810d80e:	4693      	mov	fp, r2
 810d810:	4652      	mov	r2, sl
 810d812:	465b      	mov	r3, fp
 810d814:	4640      	mov	r0, r8
 810d816:	4649      	mov	r1, r9
 810d818:	f7f3 fabe 	bl	8100d98 <__aeabi_uldivmod>
 810d81c:	4602      	mov	r2, r0
 810d81e:	460b      	mov	r3, r1
 810d820:	4613      	mov	r3, r2
 810d822:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810d824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810d82a:	d308      	bcc.n	810d83e <UART_SetConfig+0x79a>
 810d82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d82e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d832:	d204      	bcs.n	810d83e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810d834:	697b      	ldr	r3, [r7, #20]
 810d836:	681b      	ldr	r3, [r3, #0]
 810d838:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810d83a:	60da      	str	r2, [r3, #12]
 810d83c:	e17c      	b.n	810db38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810d83e:	2301      	movs	r3, #1
 810d840:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d844:	e178      	b.n	810db38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810d846:	697b      	ldr	r3, [r7, #20]
 810d848:	69db      	ldr	r3, [r3, #28]
 810d84a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810d84e:	f040 80c5 	bne.w	810d9dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810d852:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d856:	2b20      	cmp	r3, #32
 810d858:	dc48      	bgt.n	810d8ec <UART_SetConfig+0x848>
 810d85a:	2b00      	cmp	r3, #0
 810d85c:	db7b      	blt.n	810d956 <UART_SetConfig+0x8b2>
 810d85e:	2b20      	cmp	r3, #32
 810d860:	d879      	bhi.n	810d956 <UART_SetConfig+0x8b2>
 810d862:	a201      	add	r2, pc, #4	@ (adr r2, 810d868 <UART_SetConfig+0x7c4>)
 810d864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d868:	0810d8f3 	.word	0x0810d8f3
 810d86c:	0810d8fb 	.word	0x0810d8fb
 810d870:	0810d957 	.word	0x0810d957
 810d874:	0810d957 	.word	0x0810d957
 810d878:	0810d903 	.word	0x0810d903
 810d87c:	0810d957 	.word	0x0810d957
 810d880:	0810d957 	.word	0x0810d957
 810d884:	0810d957 	.word	0x0810d957
 810d888:	0810d913 	.word	0x0810d913
 810d88c:	0810d957 	.word	0x0810d957
 810d890:	0810d957 	.word	0x0810d957
 810d894:	0810d957 	.word	0x0810d957
 810d898:	0810d957 	.word	0x0810d957
 810d89c:	0810d957 	.word	0x0810d957
 810d8a0:	0810d957 	.word	0x0810d957
 810d8a4:	0810d957 	.word	0x0810d957
 810d8a8:	0810d923 	.word	0x0810d923
 810d8ac:	0810d957 	.word	0x0810d957
 810d8b0:	0810d957 	.word	0x0810d957
 810d8b4:	0810d957 	.word	0x0810d957
 810d8b8:	0810d957 	.word	0x0810d957
 810d8bc:	0810d957 	.word	0x0810d957
 810d8c0:	0810d957 	.word	0x0810d957
 810d8c4:	0810d957 	.word	0x0810d957
 810d8c8:	0810d957 	.word	0x0810d957
 810d8cc:	0810d957 	.word	0x0810d957
 810d8d0:	0810d957 	.word	0x0810d957
 810d8d4:	0810d957 	.word	0x0810d957
 810d8d8:	0810d957 	.word	0x0810d957
 810d8dc:	0810d957 	.word	0x0810d957
 810d8e0:	0810d957 	.word	0x0810d957
 810d8e4:	0810d957 	.word	0x0810d957
 810d8e8:	0810d949 	.word	0x0810d949
 810d8ec:	2b40      	cmp	r3, #64	@ 0x40
 810d8ee:	d02e      	beq.n	810d94e <UART_SetConfig+0x8aa>
 810d8f0:	e031      	b.n	810d956 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d8f2:	f7fa fce7 	bl	81082c4 <HAL_RCC_GetPCLK1Freq>
 810d8f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d8f8:	e033      	b.n	810d962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d8fa:	f7fa fcf9 	bl	81082f0 <HAL_RCC_GetPCLK2Freq>
 810d8fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810d900:	e02f      	b.n	810d962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810d906:	4618      	mov	r0, r3
 810d908:	f7fc fca8 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d910:	e027      	b.n	810d962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d912:	f107 0318 	add.w	r3, r7, #24
 810d916:	4618      	mov	r0, r3
 810d918:	f7fc fdf4 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d91c:	69fb      	ldr	r3, [r7, #28]
 810d91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d920:	e01f      	b.n	810d962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d922:	4b2d      	ldr	r3, [pc, #180]	@ (810d9d8 <UART_SetConfig+0x934>)
 810d924:	681b      	ldr	r3, [r3, #0]
 810d926:	f003 0320 	and.w	r3, r3, #32
 810d92a:	2b00      	cmp	r3, #0
 810d92c:	d009      	beq.n	810d942 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d92e:	4b2a      	ldr	r3, [pc, #168]	@ (810d9d8 <UART_SetConfig+0x934>)
 810d930:	681b      	ldr	r3, [r3, #0]
 810d932:	08db      	lsrs	r3, r3, #3
 810d934:	f003 0303 	and.w	r3, r3, #3
 810d938:	4a24      	ldr	r2, [pc, #144]	@ (810d9cc <UART_SetConfig+0x928>)
 810d93a:	fa22 f303 	lsr.w	r3, r2, r3
 810d93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d940:	e00f      	b.n	810d962 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810d942:	4b22      	ldr	r3, [pc, #136]	@ (810d9cc <UART_SetConfig+0x928>)
 810d944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d946:	e00c      	b.n	810d962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d948:	4b21      	ldr	r3, [pc, #132]	@ (810d9d0 <UART_SetConfig+0x92c>)
 810d94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d94c:	e009      	b.n	810d962 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d94e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810d952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810d954:	e005      	b.n	810d962 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810d956:	2300      	movs	r3, #0
 810d958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810d95a:	2301      	movs	r3, #1
 810d95c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810d960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810d962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d964:	2b00      	cmp	r3, #0
 810d966:	f000 80e7 	beq.w	810db38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d96a:	697b      	ldr	r3, [r7, #20]
 810d96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d96e:	4a19      	ldr	r2, [pc, #100]	@ (810d9d4 <UART_SetConfig+0x930>)
 810d970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d974:	461a      	mov	r2, r3
 810d976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810d978:	fbb3 f3f2 	udiv	r3, r3, r2
 810d97c:	005a      	lsls	r2, r3, #1
 810d97e:	697b      	ldr	r3, [r7, #20]
 810d980:	685b      	ldr	r3, [r3, #4]
 810d982:	085b      	lsrs	r3, r3, #1
 810d984:	441a      	add	r2, r3
 810d986:	697b      	ldr	r3, [r7, #20]
 810d988:	685b      	ldr	r3, [r3, #4]
 810d98a:	fbb2 f3f3 	udiv	r3, r2, r3
 810d98e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d992:	2b0f      	cmp	r3, #15
 810d994:	d916      	bls.n	810d9c4 <UART_SetConfig+0x920>
 810d996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d99c:	d212      	bcs.n	810d9c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810d99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d9a0:	b29b      	uxth	r3, r3
 810d9a2:	f023 030f 	bic.w	r3, r3, #15
 810d9a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810d9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d9aa:	085b      	lsrs	r3, r3, #1
 810d9ac:	b29b      	uxth	r3, r3
 810d9ae:	f003 0307 	and.w	r3, r3, #7
 810d9b2:	b29a      	uxth	r2, r3
 810d9b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810d9b6:	4313      	orrs	r3, r2
 810d9b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810d9ba:	697b      	ldr	r3, [r7, #20]
 810d9bc:	681b      	ldr	r3, [r3, #0]
 810d9be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810d9c0:	60da      	str	r2, [r3, #12]
 810d9c2:	e0b9      	b.n	810db38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810d9c4:	2301      	movs	r3, #1
 810d9c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810d9ca:	e0b5      	b.n	810db38 <UART_SetConfig+0xa94>
 810d9cc:	03d09000 	.word	0x03d09000
 810d9d0:	003d0900 	.word	0x003d0900
 810d9d4:	08113cd8 	.word	0x08113cd8
 810d9d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810d9dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810d9e0:	2b20      	cmp	r3, #32
 810d9e2:	dc49      	bgt.n	810da78 <UART_SetConfig+0x9d4>
 810d9e4:	2b00      	cmp	r3, #0
 810d9e6:	db7c      	blt.n	810dae2 <UART_SetConfig+0xa3e>
 810d9e8:	2b20      	cmp	r3, #32
 810d9ea:	d87a      	bhi.n	810dae2 <UART_SetConfig+0xa3e>
 810d9ec:	a201      	add	r2, pc, #4	@ (adr r2, 810d9f4 <UART_SetConfig+0x950>)
 810d9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d9f2:	bf00      	nop
 810d9f4:	0810da7f 	.word	0x0810da7f
 810d9f8:	0810da87 	.word	0x0810da87
 810d9fc:	0810dae3 	.word	0x0810dae3
 810da00:	0810dae3 	.word	0x0810dae3
 810da04:	0810da8f 	.word	0x0810da8f
 810da08:	0810dae3 	.word	0x0810dae3
 810da0c:	0810dae3 	.word	0x0810dae3
 810da10:	0810dae3 	.word	0x0810dae3
 810da14:	0810da9f 	.word	0x0810da9f
 810da18:	0810dae3 	.word	0x0810dae3
 810da1c:	0810dae3 	.word	0x0810dae3
 810da20:	0810dae3 	.word	0x0810dae3
 810da24:	0810dae3 	.word	0x0810dae3
 810da28:	0810dae3 	.word	0x0810dae3
 810da2c:	0810dae3 	.word	0x0810dae3
 810da30:	0810dae3 	.word	0x0810dae3
 810da34:	0810daaf 	.word	0x0810daaf
 810da38:	0810dae3 	.word	0x0810dae3
 810da3c:	0810dae3 	.word	0x0810dae3
 810da40:	0810dae3 	.word	0x0810dae3
 810da44:	0810dae3 	.word	0x0810dae3
 810da48:	0810dae3 	.word	0x0810dae3
 810da4c:	0810dae3 	.word	0x0810dae3
 810da50:	0810dae3 	.word	0x0810dae3
 810da54:	0810dae3 	.word	0x0810dae3
 810da58:	0810dae3 	.word	0x0810dae3
 810da5c:	0810dae3 	.word	0x0810dae3
 810da60:	0810dae3 	.word	0x0810dae3
 810da64:	0810dae3 	.word	0x0810dae3
 810da68:	0810dae3 	.word	0x0810dae3
 810da6c:	0810dae3 	.word	0x0810dae3
 810da70:	0810dae3 	.word	0x0810dae3
 810da74:	0810dad5 	.word	0x0810dad5
 810da78:	2b40      	cmp	r3, #64	@ 0x40
 810da7a:	d02e      	beq.n	810dada <UART_SetConfig+0xa36>
 810da7c:	e031      	b.n	810dae2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810da7e:	f7fa fc21 	bl	81082c4 <HAL_RCC_GetPCLK1Freq>
 810da82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810da84:	e033      	b.n	810daee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810da86:	f7fa fc33 	bl	81082f0 <HAL_RCC_GetPCLK2Freq>
 810da8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810da8c:	e02f      	b.n	810daee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810da8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810da92:	4618      	mov	r0, r3
 810da94:	f7fc fbe2 	bl	810a25c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810da98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810da9c:	e027      	b.n	810daee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810da9e:	f107 0318 	add.w	r3, r7, #24
 810daa2:	4618      	mov	r0, r3
 810daa4:	f7fc fd2e 	bl	810a504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810daa8:	69fb      	ldr	r3, [r7, #28]
 810daaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810daac:	e01f      	b.n	810daee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810daae:	4b2d      	ldr	r3, [pc, #180]	@ (810db64 <UART_SetConfig+0xac0>)
 810dab0:	681b      	ldr	r3, [r3, #0]
 810dab2:	f003 0320 	and.w	r3, r3, #32
 810dab6:	2b00      	cmp	r3, #0
 810dab8:	d009      	beq.n	810dace <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810daba:	4b2a      	ldr	r3, [pc, #168]	@ (810db64 <UART_SetConfig+0xac0>)
 810dabc:	681b      	ldr	r3, [r3, #0]
 810dabe:	08db      	lsrs	r3, r3, #3
 810dac0:	f003 0303 	and.w	r3, r3, #3
 810dac4:	4a28      	ldr	r2, [pc, #160]	@ (810db68 <UART_SetConfig+0xac4>)
 810dac6:	fa22 f303 	lsr.w	r3, r2, r3
 810daca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810dacc:	e00f      	b.n	810daee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810dace:	4b26      	ldr	r3, [pc, #152]	@ (810db68 <UART_SetConfig+0xac4>)
 810dad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810dad2:	e00c      	b.n	810daee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810dad4:	4b25      	ldr	r3, [pc, #148]	@ (810db6c <UART_SetConfig+0xac8>)
 810dad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810dad8:	e009      	b.n	810daee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810dada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810dade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810dae0:	e005      	b.n	810daee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810dae2:	2300      	movs	r3, #0
 810dae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810dae6:	2301      	movs	r3, #1
 810dae8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810daec:	bf00      	nop
    }

    if (pclk != 0U)
 810daee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810daf0:	2b00      	cmp	r3, #0
 810daf2:	d021      	beq.n	810db38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810daf4:	697b      	ldr	r3, [r7, #20]
 810daf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810daf8:	4a1d      	ldr	r2, [pc, #116]	@ (810db70 <UART_SetConfig+0xacc>)
 810dafa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810dafe:	461a      	mov	r2, r3
 810db00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810db02:	fbb3 f2f2 	udiv	r2, r3, r2
 810db06:	697b      	ldr	r3, [r7, #20]
 810db08:	685b      	ldr	r3, [r3, #4]
 810db0a:	085b      	lsrs	r3, r3, #1
 810db0c:	441a      	add	r2, r3
 810db0e:	697b      	ldr	r3, [r7, #20]
 810db10:	685b      	ldr	r3, [r3, #4]
 810db12:	fbb2 f3f3 	udiv	r3, r2, r3
 810db16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810db18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810db1a:	2b0f      	cmp	r3, #15
 810db1c:	d909      	bls.n	810db32 <UART_SetConfig+0xa8e>
 810db1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810db20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810db24:	d205      	bcs.n	810db32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810db26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810db28:	b29a      	uxth	r2, r3
 810db2a:	697b      	ldr	r3, [r7, #20]
 810db2c:	681b      	ldr	r3, [r3, #0]
 810db2e:	60da      	str	r2, [r3, #12]
 810db30:	e002      	b.n	810db38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810db32:	2301      	movs	r3, #1
 810db34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810db38:	697b      	ldr	r3, [r7, #20]
 810db3a:	2201      	movs	r2, #1
 810db3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810db40:	697b      	ldr	r3, [r7, #20]
 810db42:	2201      	movs	r2, #1
 810db44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810db48:	697b      	ldr	r3, [r7, #20]
 810db4a:	2200      	movs	r2, #0
 810db4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810db4e:	697b      	ldr	r3, [r7, #20]
 810db50:	2200      	movs	r2, #0
 810db52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810db54:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810db58:	4618      	mov	r0, r3
 810db5a:	3748      	adds	r7, #72	@ 0x48
 810db5c:	46bd      	mov	sp, r7
 810db5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810db62:	bf00      	nop
 810db64:	58024400 	.word	0x58024400
 810db68:	03d09000 	.word	0x03d09000
 810db6c:	003d0900 	.word	0x003d0900
 810db70:	08113cd8 	.word	0x08113cd8

0810db74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810db74:	b480      	push	{r7}
 810db76:	b083      	sub	sp, #12
 810db78:	af00      	add	r7, sp, #0
 810db7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810db7c:	687b      	ldr	r3, [r7, #4]
 810db7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810db80:	f003 0308 	and.w	r3, r3, #8
 810db84:	2b00      	cmp	r3, #0
 810db86:	d00a      	beq.n	810db9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810db88:	687b      	ldr	r3, [r7, #4]
 810db8a:	681b      	ldr	r3, [r3, #0]
 810db8c:	685b      	ldr	r3, [r3, #4]
 810db8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810db92:	687b      	ldr	r3, [r7, #4]
 810db94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810db96:	687b      	ldr	r3, [r7, #4]
 810db98:	681b      	ldr	r3, [r3, #0]
 810db9a:	430a      	orrs	r2, r1
 810db9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810db9e:	687b      	ldr	r3, [r7, #4]
 810dba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dba2:	f003 0301 	and.w	r3, r3, #1
 810dba6:	2b00      	cmp	r3, #0
 810dba8:	d00a      	beq.n	810dbc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810dbaa:	687b      	ldr	r3, [r7, #4]
 810dbac:	681b      	ldr	r3, [r3, #0]
 810dbae:	685b      	ldr	r3, [r3, #4]
 810dbb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810dbb4:	687b      	ldr	r3, [r7, #4]
 810dbb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dbb8:	687b      	ldr	r3, [r7, #4]
 810dbba:	681b      	ldr	r3, [r3, #0]
 810dbbc:	430a      	orrs	r2, r1
 810dbbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810dbc0:	687b      	ldr	r3, [r7, #4]
 810dbc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dbc4:	f003 0302 	and.w	r3, r3, #2
 810dbc8:	2b00      	cmp	r3, #0
 810dbca:	d00a      	beq.n	810dbe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810dbcc:	687b      	ldr	r3, [r7, #4]
 810dbce:	681b      	ldr	r3, [r3, #0]
 810dbd0:	685b      	ldr	r3, [r3, #4]
 810dbd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810dbd6:	687b      	ldr	r3, [r7, #4]
 810dbd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810dbda:	687b      	ldr	r3, [r7, #4]
 810dbdc:	681b      	ldr	r3, [r3, #0]
 810dbde:	430a      	orrs	r2, r1
 810dbe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810dbe2:	687b      	ldr	r3, [r7, #4]
 810dbe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dbe6:	f003 0304 	and.w	r3, r3, #4
 810dbea:	2b00      	cmp	r3, #0
 810dbec:	d00a      	beq.n	810dc04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810dbee:	687b      	ldr	r3, [r7, #4]
 810dbf0:	681b      	ldr	r3, [r3, #0]
 810dbf2:	685b      	ldr	r3, [r3, #4]
 810dbf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810dbf8:	687b      	ldr	r3, [r7, #4]
 810dbfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810dbfc:	687b      	ldr	r3, [r7, #4]
 810dbfe:	681b      	ldr	r3, [r3, #0]
 810dc00:	430a      	orrs	r2, r1
 810dc02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810dc04:	687b      	ldr	r3, [r7, #4]
 810dc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dc08:	f003 0310 	and.w	r3, r3, #16
 810dc0c:	2b00      	cmp	r3, #0
 810dc0e:	d00a      	beq.n	810dc26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810dc10:	687b      	ldr	r3, [r7, #4]
 810dc12:	681b      	ldr	r3, [r3, #0]
 810dc14:	689b      	ldr	r3, [r3, #8]
 810dc16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810dc1a:	687b      	ldr	r3, [r7, #4]
 810dc1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810dc1e:	687b      	ldr	r3, [r7, #4]
 810dc20:	681b      	ldr	r3, [r3, #0]
 810dc22:	430a      	orrs	r2, r1
 810dc24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810dc26:	687b      	ldr	r3, [r7, #4]
 810dc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dc2a:	f003 0320 	and.w	r3, r3, #32
 810dc2e:	2b00      	cmp	r3, #0
 810dc30:	d00a      	beq.n	810dc48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810dc32:	687b      	ldr	r3, [r7, #4]
 810dc34:	681b      	ldr	r3, [r3, #0]
 810dc36:	689b      	ldr	r3, [r3, #8]
 810dc38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810dc3c:	687b      	ldr	r3, [r7, #4]
 810dc3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810dc40:	687b      	ldr	r3, [r7, #4]
 810dc42:	681b      	ldr	r3, [r3, #0]
 810dc44:	430a      	orrs	r2, r1
 810dc46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810dc48:	687b      	ldr	r3, [r7, #4]
 810dc4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dc4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810dc50:	2b00      	cmp	r3, #0
 810dc52:	d01a      	beq.n	810dc8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810dc54:	687b      	ldr	r3, [r7, #4]
 810dc56:	681b      	ldr	r3, [r3, #0]
 810dc58:	685b      	ldr	r3, [r3, #4]
 810dc5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810dc5e:	687b      	ldr	r3, [r7, #4]
 810dc60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810dc62:	687b      	ldr	r3, [r7, #4]
 810dc64:	681b      	ldr	r3, [r3, #0]
 810dc66:	430a      	orrs	r2, r1
 810dc68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810dc6a:	687b      	ldr	r3, [r7, #4]
 810dc6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810dc6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810dc72:	d10a      	bne.n	810dc8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810dc74:	687b      	ldr	r3, [r7, #4]
 810dc76:	681b      	ldr	r3, [r3, #0]
 810dc78:	685b      	ldr	r3, [r3, #4]
 810dc7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810dc7e:	687b      	ldr	r3, [r7, #4]
 810dc80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810dc82:	687b      	ldr	r3, [r7, #4]
 810dc84:	681b      	ldr	r3, [r3, #0]
 810dc86:	430a      	orrs	r2, r1
 810dc88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810dc8a:	687b      	ldr	r3, [r7, #4]
 810dc8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dc8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810dc92:	2b00      	cmp	r3, #0
 810dc94:	d00a      	beq.n	810dcac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810dc96:	687b      	ldr	r3, [r7, #4]
 810dc98:	681b      	ldr	r3, [r3, #0]
 810dc9a:	685b      	ldr	r3, [r3, #4]
 810dc9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810dca0:	687b      	ldr	r3, [r7, #4]
 810dca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810dca4:	687b      	ldr	r3, [r7, #4]
 810dca6:	681b      	ldr	r3, [r3, #0]
 810dca8:	430a      	orrs	r2, r1
 810dcaa:	605a      	str	r2, [r3, #4]
  }
}
 810dcac:	bf00      	nop
 810dcae:	370c      	adds	r7, #12
 810dcb0:	46bd      	mov	sp, r7
 810dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dcb6:	4770      	bx	lr

0810dcb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810dcb8:	b580      	push	{r7, lr}
 810dcba:	b098      	sub	sp, #96	@ 0x60
 810dcbc:	af02      	add	r7, sp, #8
 810dcbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810dcc0:	687b      	ldr	r3, [r7, #4]
 810dcc2:	2200      	movs	r2, #0
 810dcc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810dcc8:	f7f6 fd24 	bl	8104714 <HAL_GetTick>
 810dccc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810dcce:	687b      	ldr	r3, [r7, #4]
 810dcd0:	681b      	ldr	r3, [r3, #0]
 810dcd2:	681b      	ldr	r3, [r3, #0]
 810dcd4:	f003 0308 	and.w	r3, r3, #8
 810dcd8:	2b08      	cmp	r3, #8
 810dcda:	d12f      	bne.n	810dd3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810dcdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810dce0:	9300      	str	r3, [sp, #0]
 810dce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810dce4:	2200      	movs	r2, #0
 810dce6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810dcea:	6878      	ldr	r0, [r7, #4]
 810dcec:	f000 f88e 	bl	810de0c <UART_WaitOnFlagUntilTimeout>
 810dcf0:	4603      	mov	r3, r0
 810dcf2:	2b00      	cmp	r3, #0
 810dcf4:	d022      	beq.n	810dd3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810dcf6:	687b      	ldr	r3, [r7, #4]
 810dcf8:	681b      	ldr	r3, [r3, #0]
 810dcfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dcfe:	e853 3f00 	ldrex	r3, [r3]
 810dd02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810dd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810dd06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810dd0a:	653b      	str	r3, [r7, #80]	@ 0x50
 810dd0c:	687b      	ldr	r3, [r7, #4]
 810dd0e:	681b      	ldr	r3, [r3, #0]
 810dd10:	461a      	mov	r2, r3
 810dd12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810dd14:	647b      	str	r3, [r7, #68]	@ 0x44
 810dd16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dd18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810dd1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810dd1c:	e841 2300 	strex	r3, r2, [r1]
 810dd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810dd22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810dd24:	2b00      	cmp	r3, #0
 810dd26:	d1e6      	bne.n	810dcf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810dd28:	687b      	ldr	r3, [r7, #4]
 810dd2a:	2220      	movs	r2, #32
 810dd2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810dd30:	687b      	ldr	r3, [r7, #4]
 810dd32:	2200      	movs	r2, #0
 810dd34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810dd38:	2303      	movs	r3, #3
 810dd3a:	e063      	b.n	810de04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810dd3c:	687b      	ldr	r3, [r7, #4]
 810dd3e:	681b      	ldr	r3, [r3, #0]
 810dd40:	681b      	ldr	r3, [r3, #0]
 810dd42:	f003 0304 	and.w	r3, r3, #4
 810dd46:	2b04      	cmp	r3, #4
 810dd48:	d149      	bne.n	810ddde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810dd4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810dd4e:	9300      	str	r3, [sp, #0]
 810dd50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810dd52:	2200      	movs	r2, #0
 810dd54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810dd58:	6878      	ldr	r0, [r7, #4]
 810dd5a:	f000 f857 	bl	810de0c <UART_WaitOnFlagUntilTimeout>
 810dd5e:	4603      	mov	r3, r0
 810dd60:	2b00      	cmp	r3, #0
 810dd62:	d03c      	beq.n	810ddde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810dd64:	687b      	ldr	r3, [r7, #4]
 810dd66:	681b      	ldr	r3, [r3, #0]
 810dd68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dd6c:	e853 3f00 	ldrex	r3, [r3]
 810dd70:	623b      	str	r3, [r7, #32]
   return(result);
 810dd72:	6a3b      	ldr	r3, [r7, #32]
 810dd74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810dd78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810dd7a:	687b      	ldr	r3, [r7, #4]
 810dd7c:	681b      	ldr	r3, [r3, #0]
 810dd7e:	461a      	mov	r2, r3
 810dd80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810dd82:	633b      	str	r3, [r7, #48]	@ 0x30
 810dd84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dd86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810dd88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810dd8a:	e841 2300 	strex	r3, r2, [r1]
 810dd8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810dd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dd92:	2b00      	cmp	r3, #0
 810dd94:	d1e6      	bne.n	810dd64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810dd96:	687b      	ldr	r3, [r7, #4]
 810dd98:	681b      	ldr	r3, [r3, #0]
 810dd9a:	3308      	adds	r3, #8
 810dd9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dd9e:	693b      	ldr	r3, [r7, #16]
 810dda0:	e853 3f00 	ldrex	r3, [r3]
 810dda4:	60fb      	str	r3, [r7, #12]
   return(result);
 810dda6:	68fb      	ldr	r3, [r7, #12]
 810dda8:	f023 0301 	bic.w	r3, r3, #1
 810ddac:	64bb      	str	r3, [r7, #72]	@ 0x48
 810ddae:	687b      	ldr	r3, [r7, #4]
 810ddb0:	681b      	ldr	r3, [r3, #0]
 810ddb2:	3308      	adds	r3, #8
 810ddb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810ddb6:	61fa      	str	r2, [r7, #28]
 810ddb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ddba:	69b9      	ldr	r1, [r7, #24]
 810ddbc:	69fa      	ldr	r2, [r7, #28]
 810ddbe:	e841 2300 	strex	r3, r2, [r1]
 810ddc2:	617b      	str	r3, [r7, #20]
   return(result);
 810ddc4:	697b      	ldr	r3, [r7, #20]
 810ddc6:	2b00      	cmp	r3, #0
 810ddc8:	d1e5      	bne.n	810dd96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810ddca:	687b      	ldr	r3, [r7, #4]
 810ddcc:	2220      	movs	r2, #32
 810ddce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810ddd2:	687b      	ldr	r3, [r7, #4]
 810ddd4:	2200      	movs	r2, #0
 810ddd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810ddda:	2303      	movs	r3, #3
 810dddc:	e012      	b.n	810de04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810ddde:	687b      	ldr	r3, [r7, #4]
 810dde0:	2220      	movs	r2, #32
 810dde2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810dde6:	687b      	ldr	r3, [r7, #4]
 810dde8:	2220      	movs	r2, #32
 810ddea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ddee:	687b      	ldr	r3, [r7, #4]
 810ddf0:	2200      	movs	r2, #0
 810ddf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810ddf4:	687b      	ldr	r3, [r7, #4]
 810ddf6:	2200      	movs	r2, #0
 810ddf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810ddfa:	687b      	ldr	r3, [r7, #4]
 810ddfc:	2200      	movs	r2, #0
 810ddfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810de02:	2300      	movs	r3, #0
}
 810de04:	4618      	mov	r0, r3
 810de06:	3758      	adds	r7, #88	@ 0x58
 810de08:	46bd      	mov	sp, r7
 810de0a:	bd80      	pop	{r7, pc}

0810de0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810de0c:	b580      	push	{r7, lr}
 810de0e:	b084      	sub	sp, #16
 810de10:	af00      	add	r7, sp, #0
 810de12:	60f8      	str	r0, [r7, #12]
 810de14:	60b9      	str	r1, [r7, #8]
 810de16:	603b      	str	r3, [r7, #0]
 810de18:	4613      	mov	r3, r2
 810de1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810de1c:	e04f      	b.n	810debe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810de1e:	69bb      	ldr	r3, [r7, #24]
 810de20:	f1b3 3fff 	cmp.w	r3, #4294967295
 810de24:	d04b      	beq.n	810debe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810de26:	f7f6 fc75 	bl	8104714 <HAL_GetTick>
 810de2a:	4602      	mov	r2, r0
 810de2c:	683b      	ldr	r3, [r7, #0]
 810de2e:	1ad3      	subs	r3, r2, r3
 810de30:	69ba      	ldr	r2, [r7, #24]
 810de32:	429a      	cmp	r2, r3
 810de34:	d302      	bcc.n	810de3c <UART_WaitOnFlagUntilTimeout+0x30>
 810de36:	69bb      	ldr	r3, [r7, #24]
 810de38:	2b00      	cmp	r3, #0
 810de3a:	d101      	bne.n	810de40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810de3c:	2303      	movs	r3, #3
 810de3e:	e04e      	b.n	810dede <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810de40:	68fb      	ldr	r3, [r7, #12]
 810de42:	681b      	ldr	r3, [r3, #0]
 810de44:	681b      	ldr	r3, [r3, #0]
 810de46:	f003 0304 	and.w	r3, r3, #4
 810de4a:	2b00      	cmp	r3, #0
 810de4c:	d037      	beq.n	810debe <UART_WaitOnFlagUntilTimeout+0xb2>
 810de4e:	68bb      	ldr	r3, [r7, #8]
 810de50:	2b80      	cmp	r3, #128	@ 0x80
 810de52:	d034      	beq.n	810debe <UART_WaitOnFlagUntilTimeout+0xb2>
 810de54:	68bb      	ldr	r3, [r7, #8]
 810de56:	2b40      	cmp	r3, #64	@ 0x40
 810de58:	d031      	beq.n	810debe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810de5a:	68fb      	ldr	r3, [r7, #12]
 810de5c:	681b      	ldr	r3, [r3, #0]
 810de5e:	69db      	ldr	r3, [r3, #28]
 810de60:	f003 0308 	and.w	r3, r3, #8
 810de64:	2b08      	cmp	r3, #8
 810de66:	d110      	bne.n	810de8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810de68:	68fb      	ldr	r3, [r7, #12]
 810de6a:	681b      	ldr	r3, [r3, #0]
 810de6c:	2208      	movs	r2, #8
 810de6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810de70:	68f8      	ldr	r0, [r7, #12]
 810de72:	f000 f95b 	bl	810e12c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810de76:	68fb      	ldr	r3, [r7, #12]
 810de78:	2208      	movs	r2, #8
 810de7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810de7e:	68fb      	ldr	r3, [r7, #12]
 810de80:	2200      	movs	r2, #0
 810de82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810de86:	2301      	movs	r3, #1
 810de88:	e029      	b.n	810dede <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810de8a:	68fb      	ldr	r3, [r7, #12]
 810de8c:	681b      	ldr	r3, [r3, #0]
 810de8e:	69db      	ldr	r3, [r3, #28]
 810de90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810de94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810de98:	d111      	bne.n	810debe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810de9a:	68fb      	ldr	r3, [r7, #12]
 810de9c:	681b      	ldr	r3, [r3, #0]
 810de9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810dea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810dea4:	68f8      	ldr	r0, [r7, #12]
 810dea6:	f000 f941 	bl	810e12c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810deaa:	68fb      	ldr	r3, [r7, #12]
 810deac:	2220      	movs	r2, #32
 810deae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810deb2:	68fb      	ldr	r3, [r7, #12]
 810deb4:	2200      	movs	r2, #0
 810deb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810deba:	2303      	movs	r3, #3
 810debc:	e00f      	b.n	810dede <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810debe:	68fb      	ldr	r3, [r7, #12]
 810dec0:	681b      	ldr	r3, [r3, #0]
 810dec2:	69da      	ldr	r2, [r3, #28]
 810dec4:	68bb      	ldr	r3, [r7, #8]
 810dec6:	4013      	ands	r3, r2
 810dec8:	68ba      	ldr	r2, [r7, #8]
 810deca:	429a      	cmp	r2, r3
 810decc:	bf0c      	ite	eq
 810dece:	2301      	moveq	r3, #1
 810ded0:	2300      	movne	r3, #0
 810ded2:	b2db      	uxtb	r3, r3
 810ded4:	461a      	mov	r2, r3
 810ded6:	79fb      	ldrb	r3, [r7, #7]
 810ded8:	429a      	cmp	r2, r3
 810deda:	d0a0      	beq.n	810de1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810dedc:	2300      	movs	r3, #0
}
 810dede:	4618      	mov	r0, r3
 810dee0:	3710      	adds	r7, #16
 810dee2:	46bd      	mov	sp, r7
 810dee4:	bd80      	pop	{r7, pc}
	...

0810dee8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810dee8:	b480      	push	{r7}
 810deea:	b0a3      	sub	sp, #140	@ 0x8c
 810deec:	af00      	add	r7, sp, #0
 810deee:	60f8      	str	r0, [r7, #12]
 810def0:	60b9      	str	r1, [r7, #8]
 810def2:	4613      	mov	r3, r2
 810def4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810def6:	68fb      	ldr	r3, [r7, #12]
 810def8:	68ba      	ldr	r2, [r7, #8]
 810defa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810defc:	68fb      	ldr	r3, [r7, #12]
 810defe:	88fa      	ldrh	r2, [r7, #6]
 810df00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810df04:	68fb      	ldr	r3, [r7, #12]
 810df06:	88fa      	ldrh	r2, [r7, #6]
 810df08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810df0c:	68fb      	ldr	r3, [r7, #12]
 810df0e:	2200      	movs	r2, #0
 810df10:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810df12:	68fb      	ldr	r3, [r7, #12]
 810df14:	689b      	ldr	r3, [r3, #8]
 810df16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810df1a:	d10e      	bne.n	810df3a <UART_Start_Receive_IT+0x52>
 810df1c:	68fb      	ldr	r3, [r7, #12]
 810df1e:	691b      	ldr	r3, [r3, #16]
 810df20:	2b00      	cmp	r3, #0
 810df22:	d105      	bne.n	810df30 <UART_Start_Receive_IT+0x48>
 810df24:	68fb      	ldr	r3, [r7, #12]
 810df26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810df2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810df2e:	e02d      	b.n	810df8c <UART_Start_Receive_IT+0xa4>
 810df30:	68fb      	ldr	r3, [r7, #12]
 810df32:	22ff      	movs	r2, #255	@ 0xff
 810df34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810df38:	e028      	b.n	810df8c <UART_Start_Receive_IT+0xa4>
 810df3a:	68fb      	ldr	r3, [r7, #12]
 810df3c:	689b      	ldr	r3, [r3, #8]
 810df3e:	2b00      	cmp	r3, #0
 810df40:	d10d      	bne.n	810df5e <UART_Start_Receive_IT+0x76>
 810df42:	68fb      	ldr	r3, [r7, #12]
 810df44:	691b      	ldr	r3, [r3, #16]
 810df46:	2b00      	cmp	r3, #0
 810df48:	d104      	bne.n	810df54 <UART_Start_Receive_IT+0x6c>
 810df4a:	68fb      	ldr	r3, [r7, #12]
 810df4c:	22ff      	movs	r2, #255	@ 0xff
 810df4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810df52:	e01b      	b.n	810df8c <UART_Start_Receive_IT+0xa4>
 810df54:	68fb      	ldr	r3, [r7, #12]
 810df56:	227f      	movs	r2, #127	@ 0x7f
 810df58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810df5c:	e016      	b.n	810df8c <UART_Start_Receive_IT+0xa4>
 810df5e:	68fb      	ldr	r3, [r7, #12]
 810df60:	689b      	ldr	r3, [r3, #8]
 810df62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810df66:	d10d      	bne.n	810df84 <UART_Start_Receive_IT+0x9c>
 810df68:	68fb      	ldr	r3, [r7, #12]
 810df6a:	691b      	ldr	r3, [r3, #16]
 810df6c:	2b00      	cmp	r3, #0
 810df6e:	d104      	bne.n	810df7a <UART_Start_Receive_IT+0x92>
 810df70:	68fb      	ldr	r3, [r7, #12]
 810df72:	227f      	movs	r2, #127	@ 0x7f
 810df74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810df78:	e008      	b.n	810df8c <UART_Start_Receive_IT+0xa4>
 810df7a:	68fb      	ldr	r3, [r7, #12]
 810df7c:	223f      	movs	r2, #63	@ 0x3f
 810df7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810df82:	e003      	b.n	810df8c <UART_Start_Receive_IT+0xa4>
 810df84:	68fb      	ldr	r3, [r7, #12]
 810df86:	2200      	movs	r2, #0
 810df88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810df8c:	68fb      	ldr	r3, [r7, #12]
 810df8e:	2200      	movs	r2, #0
 810df90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810df94:	68fb      	ldr	r3, [r7, #12]
 810df96:	2222      	movs	r2, #34	@ 0x22
 810df98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810df9c:	68fb      	ldr	r3, [r7, #12]
 810df9e:	681b      	ldr	r3, [r3, #0]
 810dfa0:	3308      	adds	r3, #8
 810dfa2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810dfa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810dfa6:	e853 3f00 	ldrex	r3, [r3]
 810dfaa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810dfac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810dfae:	f043 0301 	orr.w	r3, r3, #1
 810dfb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810dfb6:	68fb      	ldr	r3, [r7, #12]
 810dfb8:	681b      	ldr	r3, [r3, #0]
 810dfba:	3308      	adds	r3, #8
 810dfbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810dfc0:	673a      	str	r2, [r7, #112]	@ 0x70
 810dfc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810dfc4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810dfc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810dfc8:	e841 2300 	strex	r3, r2, [r1]
 810dfcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810dfce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810dfd0:	2b00      	cmp	r3, #0
 810dfd2:	d1e3      	bne.n	810df9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810dfd4:	68fb      	ldr	r3, [r7, #12]
 810dfd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810dfd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810dfdc:	d14f      	bne.n	810e07e <UART_Start_Receive_IT+0x196>
 810dfde:	68fb      	ldr	r3, [r7, #12]
 810dfe0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810dfe4:	88fa      	ldrh	r2, [r7, #6]
 810dfe6:	429a      	cmp	r2, r3
 810dfe8:	d349      	bcc.n	810e07e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810dfea:	68fb      	ldr	r3, [r7, #12]
 810dfec:	689b      	ldr	r3, [r3, #8]
 810dfee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810dff2:	d107      	bne.n	810e004 <UART_Start_Receive_IT+0x11c>
 810dff4:	68fb      	ldr	r3, [r7, #12]
 810dff6:	691b      	ldr	r3, [r3, #16]
 810dff8:	2b00      	cmp	r3, #0
 810dffa:	d103      	bne.n	810e004 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810dffc:	68fb      	ldr	r3, [r7, #12]
 810dffe:	4a47      	ldr	r2, [pc, #284]	@ (810e11c <UART_Start_Receive_IT+0x234>)
 810e000:	675a      	str	r2, [r3, #116]	@ 0x74
 810e002:	e002      	b.n	810e00a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810e004:	68fb      	ldr	r3, [r7, #12]
 810e006:	4a46      	ldr	r2, [pc, #280]	@ (810e120 <UART_Start_Receive_IT+0x238>)
 810e008:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810e00a:	68fb      	ldr	r3, [r7, #12]
 810e00c:	691b      	ldr	r3, [r3, #16]
 810e00e:	2b00      	cmp	r3, #0
 810e010:	d01a      	beq.n	810e048 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e012:	68fb      	ldr	r3, [r7, #12]
 810e014:	681b      	ldr	r3, [r3, #0]
 810e016:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810e01a:	e853 3f00 	ldrex	r3, [r3]
 810e01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810e020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810e026:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810e02a:	68fb      	ldr	r3, [r7, #12]
 810e02c:	681b      	ldr	r3, [r3, #0]
 810e02e:	461a      	mov	r2, r3
 810e030:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810e034:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810e036:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e038:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810e03a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810e03c:	e841 2300 	strex	r3, r2, [r1]
 810e040:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810e042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810e044:	2b00      	cmp	r3, #0
 810e046:	d1e4      	bne.n	810e012 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810e048:	68fb      	ldr	r3, [r7, #12]
 810e04a:	681b      	ldr	r3, [r3, #0]
 810e04c:	3308      	adds	r3, #8
 810e04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e052:	e853 3f00 	ldrex	r3, [r3]
 810e056:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e05a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810e05e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810e060:	68fb      	ldr	r3, [r7, #12]
 810e062:	681b      	ldr	r3, [r3, #0]
 810e064:	3308      	adds	r3, #8
 810e066:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810e068:	64ba      	str	r2, [r7, #72]	@ 0x48
 810e06a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e06c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810e06e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810e070:	e841 2300 	strex	r3, r2, [r1]
 810e074:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810e076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e078:	2b00      	cmp	r3, #0
 810e07a:	d1e5      	bne.n	810e048 <UART_Start_Receive_IT+0x160>
 810e07c:	e046      	b.n	810e10c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810e07e:	68fb      	ldr	r3, [r7, #12]
 810e080:	689b      	ldr	r3, [r3, #8]
 810e082:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810e086:	d107      	bne.n	810e098 <UART_Start_Receive_IT+0x1b0>
 810e088:	68fb      	ldr	r3, [r7, #12]
 810e08a:	691b      	ldr	r3, [r3, #16]
 810e08c:	2b00      	cmp	r3, #0
 810e08e:	d103      	bne.n	810e098 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 810e090:	68fb      	ldr	r3, [r7, #12]
 810e092:	4a24      	ldr	r2, [pc, #144]	@ (810e124 <UART_Start_Receive_IT+0x23c>)
 810e094:	675a      	str	r2, [r3, #116]	@ 0x74
 810e096:	e002      	b.n	810e09e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 810e098:	68fb      	ldr	r3, [r7, #12]
 810e09a:	4a23      	ldr	r2, [pc, #140]	@ (810e128 <UART_Start_Receive_IT+0x240>)
 810e09c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810e09e:	68fb      	ldr	r3, [r7, #12]
 810e0a0:	691b      	ldr	r3, [r3, #16]
 810e0a2:	2b00      	cmp	r3, #0
 810e0a4:	d019      	beq.n	810e0da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 810e0a6:	68fb      	ldr	r3, [r7, #12]
 810e0a8:	681b      	ldr	r3, [r3, #0]
 810e0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e0ae:	e853 3f00 	ldrex	r3, [r3]
 810e0b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810e0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e0b6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 810e0ba:	677b      	str	r3, [r7, #116]	@ 0x74
 810e0bc:	68fb      	ldr	r3, [r7, #12]
 810e0be:	681b      	ldr	r3, [r3, #0]
 810e0c0:	461a      	mov	r2, r3
 810e0c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810e0c4:	637b      	str	r3, [r7, #52]	@ 0x34
 810e0c6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e0c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810e0ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810e0cc:	e841 2300 	strex	r3, r2, [r1]
 810e0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810e0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e0d4:	2b00      	cmp	r3, #0
 810e0d6:	d1e6      	bne.n	810e0a6 <UART_Start_Receive_IT+0x1be>
 810e0d8:	e018      	b.n	810e10c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810e0da:	68fb      	ldr	r3, [r7, #12]
 810e0dc:	681b      	ldr	r3, [r3, #0]
 810e0de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e0e0:	697b      	ldr	r3, [r7, #20]
 810e0e2:	e853 3f00 	ldrex	r3, [r3]
 810e0e6:	613b      	str	r3, [r7, #16]
   return(result);
 810e0e8:	693b      	ldr	r3, [r7, #16]
 810e0ea:	f043 0320 	orr.w	r3, r3, #32
 810e0ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 810e0f0:	68fb      	ldr	r3, [r7, #12]
 810e0f2:	681b      	ldr	r3, [r3, #0]
 810e0f4:	461a      	mov	r2, r3
 810e0f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810e0f8:	623b      	str	r3, [r7, #32]
 810e0fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e0fc:	69f9      	ldr	r1, [r7, #28]
 810e0fe:	6a3a      	ldr	r2, [r7, #32]
 810e100:	e841 2300 	strex	r3, r2, [r1]
 810e104:	61bb      	str	r3, [r7, #24]
   return(result);
 810e106:	69bb      	ldr	r3, [r7, #24]
 810e108:	2b00      	cmp	r3, #0
 810e10a:	d1e6      	bne.n	810e0da <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 810e10c:	2300      	movs	r3, #0
}
 810e10e:	4618      	mov	r0, r3
 810e110:	378c      	adds	r7, #140	@ 0x8c
 810e112:	46bd      	mov	sp, r7
 810e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e118:	4770      	bx	lr
 810e11a:	bf00      	nop
 810e11c:	0810e94d 	.word	0x0810e94d
 810e120:	0810e5ed 	.word	0x0810e5ed
 810e124:	0810e435 	.word	0x0810e435
 810e128:	0810e27d 	.word	0x0810e27d

0810e12c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810e12c:	b480      	push	{r7}
 810e12e:	b095      	sub	sp, #84	@ 0x54
 810e130:	af00      	add	r7, sp, #0
 810e132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810e134:	687b      	ldr	r3, [r7, #4]
 810e136:	681b      	ldr	r3, [r3, #0]
 810e138:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e13c:	e853 3f00 	ldrex	r3, [r3]
 810e140:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810e142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810e148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810e14a:	687b      	ldr	r3, [r7, #4]
 810e14c:	681b      	ldr	r3, [r3, #0]
 810e14e:	461a      	mov	r2, r3
 810e150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e152:	643b      	str	r3, [r7, #64]	@ 0x40
 810e154:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e156:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810e158:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810e15a:	e841 2300 	strex	r3, r2, [r1]
 810e15e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e162:	2b00      	cmp	r3, #0
 810e164:	d1e6      	bne.n	810e134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810e166:	687b      	ldr	r3, [r7, #4]
 810e168:	681b      	ldr	r3, [r3, #0]
 810e16a:	3308      	adds	r3, #8
 810e16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e16e:	6a3b      	ldr	r3, [r7, #32]
 810e170:	e853 3f00 	ldrex	r3, [r3]
 810e174:	61fb      	str	r3, [r7, #28]
   return(result);
 810e176:	69fb      	ldr	r3, [r7, #28]
 810e178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e17c:	f023 0301 	bic.w	r3, r3, #1
 810e180:	64bb      	str	r3, [r7, #72]	@ 0x48
 810e182:	687b      	ldr	r3, [r7, #4]
 810e184:	681b      	ldr	r3, [r3, #0]
 810e186:	3308      	adds	r3, #8
 810e188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810e18a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810e18c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e18e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810e190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e192:	e841 2300 	strex	r3, r2, [r1]
 810e196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810e198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e19a:	2b00      	cmp	r3, #0
 810e19c:	d1e3      	bne.n	810e166 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e19e:	687b      	ldr	r3, [r7, #4]
 810e1a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e1a2:	2b01      	cmp	r3, #1
 810e1a4:	d118      	bne.n	810e1d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e1a6:	687b      	ldr	r3, [r7, #4]
 810e1a8:	681b      	ldr	r3, [r3, #0]
 810e1aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e1ac:	68fb      	ldr	r3, [r7, #12]
 810e1ae:	e853 3f00 	ldrex	r3, [r3]
 810e1b2:	60bb      	str	r3, [r7, #8]
   return(result);
 810e1b4:	68bb      	ldr	r3, [r7, #8]
 810e1b6:	f023 0310 	bic.w	r3, r3, #16
 810e1ba:	647b      	str	r3, [r7, #68]	@ 0x44
 810e1bc:	687b      	ldr	r3, [r7, #4]
 810e1be:	681b      	ldr	r3, [r3, #0]
 810e1c0:	461a      	mov	r2, r3
 810e1c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e1c4:	61bb      	str	r3, [r7, #24]
 810e1c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e1c8:	6979      	ldr	r1, [r7, #20]
 810e1ca:	69ba      	ldr	r2, [r7, #24]
 810e1cc:	e841 2300 	strex	r3, r2, [r1]
 810e1d0:	613b      	str	r3, [r7, #16]
   return(result);
 810e1d2:	693b      	ldr	r3, [r7, #16]
 810e1d4:	2b00      	cmp	r3, #0
 810e1d6:	d1e6      	bne.n	810e1a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810e1d8:	687b      	ldr	r3, [r7, #4]
 810e1da:	2220      	movs	r2, #32
 810e1dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e1e0:	687b      	ldr	r3, [r7, #4]
 810e1e2:	2200      	movs	r2, #0
 810e1e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810e1e6:	687b      	ldr	r3, [r7, #4]
 810e1e8:	2200      	movs	r2, #0
 810e1ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810e1ec:	bf00      	nop
 810e1ee:	3754      	adds	r7, #84	@ 0x54
 810e1f0:	46bd      	mov	sp, r7
 810e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e1f6:	4770      	bx	lr

0810e1f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810e1f8:	b580      	push	{r7, lr}
 810e1fa:	b084      	sub	sp, #16
 810e1fc:	af00      	add	r7, sp, #0
 810e1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810e200:	687b      	ldr	r3, [r7, #4]
 810e202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810e206:	68fb      	ldr	r3, [r7, #12]
 810e208:	2200      	movs	r2, #0
 810e20a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 810e20e:	68fb      	ldr	r3, [r7, #12]
 810e210:	2200      	movs	r2, #0
 810e212:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810e216:	68f8      	ldr	r0, [r7, #12]
 810e218:	f7fe ff2e 	bl	810d078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810e21c:	bf00      	nop
 810e21e:	3710      	adds	r7, #16
 810e220:	46bd      	mov	sp, r7
 810e222:	bd80      	pop	{r7, pc}

0810e224 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810e224:	b580      	push	{r7, lr}
 810e226:	b088      	sub	sp, #32
 810e228:	af00      	add	r7, sp, #0
 810e22a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810e22c:	687b      	ldr	r3, [r7, #4]
 810e22e:	681b      	ldr	r3, [r3, #0]
 810e230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e232:	68fb      	ldr	r3, [r7, #12]
 810e234:	e853 3f00 	ldrex	r3, [r3]
 810e238:	60bb      	str	r3, [r7, #8]
   return(result);
 810e23a:	68bb      	ldr	r3, [r7, #8]
 810e23c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810e240:	61fb      	str	r3, [r7, #28]
 810e242:	687b      	ldr	r3, [r7, #4]
 810e244:	681b      	ldr	r3, [r3, #0]
 810e246:	461a      	mov	r2, r3
 810e248:	69fb      	ldr	r3, [r7, #28]
 810e24a:	61bb      	str	r3, [r7, #24]
 810e24c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e24e:	6979      	ldr	r1, [r7, #20]
 810e250:	69ba      	ldr	r2, [r7, #24]
 810e252:	e841 2300 	strex	r3, r2, [r1]
 810e256:	613b      	str	r3, [r7, #16]
   return(result);
 810e258:	693b      	ldr	r3, [r7, #16]
 810e25a:	2b00      	cmp	r3, #0
 810e25c:	d1e6      	bne.n	810e22c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810e25e:	687b      	ldr	r3, [r7, #4]
 810e260:	2220      	movs	r2, #32
 810e262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810e266:	687b      	ldr	r3, [r7, #4]
 810e268:	2200      	movs	r2, #0
 810e26a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810e26c:	6878      	ldr	r0, [r7, #4]
 810e26e:	f7fe fef9 	bl	810d064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810e272:	bf00      	nop
 810e274:	3720      	adds	r7, #32
 810e276:	46bd      	mov	sp, r7
 810e278:	bd80      	pop	{r7, pc}
	...

0810e27c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 810e27c:	b580      	push	{r7, lr}
 810e27e:	b09c      	sub	sp, #112	@ 0x70
 810e280:	af00      	add	r7, sp, #0
 810e282:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 810e284:	687b      	ldr	r3, [r7, #4]
 810e286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e28a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e28e:	687b      	ldr	r3, [r7, #4]
 810e290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e294:	2b22      	cmp	r3, #34	@ 0x22
 810e296:	f040 80be 	bne.w	810e416 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e29a:	687b      	ldr	r3, [r7, #4]
 810e29c:	681b      	ldr	r3, [r3, #0]
 810e29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e2a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810e2a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 810e2a8:	b2d9      	uxtb	r1, r3
 810e2aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810e2ae:	b2da      	uxtb	r2, r3
 810e2b0:	687b      	ldr	r3, [r7, #4]
 810e2b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e2b4:	400a      	ands	r2, r1
 810e2b6:	b2d2      	uxtb	r2, r2
 810e2b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 810e2ba:	687b      	ldr	r3, [r7, #4]
 810e2bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e2be:	1c5a      	adds	r2, r3, #1
 810e2c0:	687b      	ldr	r3, [r7, #4]
 810e2c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810e2c4:	687b      	ldr	r3, [r7, #4]
 810e2c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e2ca:	b29b      	uxth	r3, r3
 810e2cc:	3b01      	subs	r3, #1
 810e2ce:	b29a      	uxth	r2, r3
 810e2d0:	687b      	ldr	r3, [r7, #4]
 810e2d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810e2d6:	687b      	ldr	r3, [r7, #4]
 810e2d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e2dc:	b29b      	uxth	r3, r3
 810e2de:	2b00      	cmp	r3, #0
 810e2e0:	f040 80a1 	bne.w	810e426 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810e2e4:	687b      	ldr	r3, [r7, #4]
 810e2e6:	681b      	ldr	r3, [r3, #0]
 810e2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e2ec:	e853 3f00 	ldrex	r3, [r3]
 810e2f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810e2f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e2f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810e2f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 810e2fa:	687b      	ldr	r3, [r7, #4]
 810e2fc:	681b      	ldr	r3, [r3, #0]
 810e2fe:	461a      	mov	r2, r3
 810e300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810e302:	65bb      	str	r3, [r7, #88]	@ 0x58
 810e304:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810e308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810e30a:	e841 2300 	strex	r3, r2, [r1]
 810e30e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810e310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810e312:	2b00      	cmp	r3, #0
 810e314:	d1e6      	bne.n	810e2e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e316:	687b      	ldr	r3, [r7, #4]
 810e318:	681b      	ldr	r3, [r3, #0]
 810e31a:	3308      	adds	r3, #8
 810e31c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e320:	e853 3f00 	ldrex	r3, [r3]
 810e324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810e326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e328:	f023 0301 	bic.w	r3, r3, #1
 810e32c:	667b      	str	r3, [r7, #100]	@ 0x64
 810e32e:	687b      	ldr	r3, [r7, #4]
 810e330:	681b      	ldr	r3, [r3, #0]
 810e332:	3308      	adds	r3, #8
 810e334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810e336:	647a      	str	r2, [r7, #68]	@ 0x44
 810e338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e33a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810e33c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810e33e:	e841 2300 	strex	r3, r2, [r1]
 810e342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810e344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810e346:	2b00      	cmp	r3, #0
 810e348:	d1e5      	bne.n	810e316 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810e34a:	687b      	ldr	r3, [r7, #4]
 810e34c:	2220      	movs	r2, #32
 810e34e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810e352:	687b      	ldr	r3, [r7, #4]
 810e354:	2200      	movs	r2, #0
 810e356:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e358:	687b      	ldr	r3, [r7, #4]
 810e35a:	2200      	movs	r2, #0
 810e35c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e35e:	687b      	ldr	r3, [r7, #4]
 810e360:	681b      	ldr	r3, [r3, #0]
 810e362:	4a33      	ldr	r2, [pc, #204]	@ (810e430 <UART_RxISR_8BIT+0x1b4>)
 810e364:	4293      	cmp	r3, r2
 810e366:	d01f      	beq.n	810e3a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e368:	687b      	ldr	r3, [r7, #4]
 810e36a:	681b      	ldr	r3, [r3, #0]
 810e36c:	685b      	ldr	r3, [r3, #4]
 810e36e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e372:	2b00      	cmp	r3, #0
 810e374:	d018      	beq.n	810e3a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e376:	687b      	ldr	r3, [r7, #4]
 810e378:	681b      	ldr	r3, [r3, #0]
 810e37a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e37e:	e853 3f00 	ldrex	r3, [r3]
 810e382:	623b      	str	r3, [r7, #32]
   return(result);
 810e384:	6a3b      	ldr	r3, [r7, #32]
 810e386:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e38a:	663b      	str	r3, [r7, #96]	@ 0x60
 810e38c:	687b      	ldr	r3, [r7, #4]
 810e38e:	681b      	ldr	r3, [r3, #0]
 810e390:	461a      	mov	r2, r3
 810e392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810e394:	633b      	str	r3, [r7, #48]	@ 0x30
 810e396:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e398:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810e39a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e39c:	e841 2300 	strex	r3, r2, [r1]
 810e3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810e3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e3a4:	2b00      	cmp	r3, #0
 810e3a6:	d1e6      	bne.n	810e376 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e3a8:	687b      	ldr	r3, [r7, #4]
 810e3aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e3ac:	2b01      	cmp	r3, #1
 810e3ae:	d12e      	bne.n	810e40e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e3b0:	687b      	ldr	r3, [r7, #4]
 810e3b2:	2200      	movs	r2, #0
 810e3b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e3b6:	687b      	ldr	r3, [r7, #4]
 810e3b8:	681b      	ldr	r3, [r3, #0]
 810e3ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e3bc:	693b      	ldr	r3, [r7, #16]
 810e3be:	e853 3f00 	ldrex	r3, [r3]
 810e3c2:	60fb      	str	r3, [r7, #12]
   return(result);
 810e3c4:	68fb      	ldr	r3, [r7, #12]
 810e3c6:	f023 0310 	bic.w	r3, r3, #16
 810e3ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810e3cc:	687b      	ldr	r3, [r7, #4]
 810e3ce:	681b      	ldr	r3, [r3, #0]
 810e3d0:	461a      	mov	r2, r3
 810e3d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e3d4:	61fb      	str	r3, [r7, #28]
 810e3d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e3d8:	69b9      	ldr	r1, [r7, #24]
 810e3da:	69fa      	ldr	r2, [r7, #28]
 810e3dc:	e841 2300 	strex	r3, r2, [r1]
 810e3e0:	617b      	str	r3, [r7, #20]
   return(result);
 810e3e2:	697b      	ldr	r3, [r7, #20]
 810e3e4:	2b00      	cmp	r3, #0
 810e3e6:	d1e6      	bne.n	810e3b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e3e8:	687b      	ldr	r3, [r7, #4]
 810e3ea:	681b      	ldr	r3, [r3, #0]
 810e3ec:	69db      	ldr	r3, [r3, #28]
 810e3ee:	f003 0310 	and.w	r3, r3, #16
 810e3f2:	2b10      	cmp	r3, #16
 810e3f4:	d103      	bne.n	810e3fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e3f6:	687b      	ldr	r3, [r7, #4]
 810e3f8:	681b      	ldr	r3, [r3, #0]
 810e3fa:	2210      	movs	r2, #16
 810e3fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e3fe:	687b      	ldr	r3, [r7, #4]
 810e400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e404:	4619      	mov	r1, r3
 810e406:	6878      	ldr	r0, [r7, #4]
 810e408:	f7fe fe40 	bl	810d08c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e40c:	e00b      	b.n	810e426 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810e40e:	6878      	ldr	r0, [r7, #4]
 810e410:	f7f5 fbae 	bl	8103b70 <HAL_UART_RxCpltCallback>
}
 810e414:	e007      	b.n	810e426 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e416:	687b      	ldr	r3, [r7, #4]
 810e418:	681b      	ldr	r3, [r3, #0]
 810e41a:	699a      	ldr	r2, [r3, #24]
 810e41c:	687b      	ldr	r3, [r7, #4]
 810e41e:	681b      	ldr	r3, [r3, #0]
 810e420:	f042 0208 	orr.w	r2, r2, #8
 810e424:	619a      	str	r2, [r3, #24]
}
 810e426:	bf00      	nop
 810e428:	3770      	adds	r7, #112	@ 0x70
 810e42a:	46bd      	mov	sp, r7
 810e42c:	bd80      	pop	{r7, pc}
 810e42e:	bf00      	nop
 810e430:	58000c00 	.word	0x58000c00

0810e434 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810e434:	b580      	push	{r7, lr}
 810e436:	b09c      	sub	sp, #112	@ 0x70
 810e438:	af00      	add	r7, sp, #0
 810e43a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810e43c:	687b      	ldr	r3, [r7, #4]
 810e43e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e442:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e446:	687b      	ldr	r3, [r7, #4]
 810e448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e44c:	2b22      	cmp	r3, #34	@ 0x22
 810e44e:	f040 80be 	bne.w	810e5ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e452:	687b      	ldr	r3, [r7, #4]
 810e454:	681b      	ldr	r3, [r3, #0]
 810e456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e458:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810e45c:	687b      	ldr	r3, [r7, #4]
 810e45e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e460:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 810e462:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 810e466:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810e46a:	4013      	ands	r3, r2
 810e46c:	b29a      	uxth	r2, r3
 810e46e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810e470:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 810e472:	687b      	ldr	r3, [r7, #4]
 810e474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e476:	1c9a      	adds	r2, r3, #2
 810e478:	687b      	ldr	r3, [r7, #4]
 810e47a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810e47c:	687b      	ldr	r3, [r7, #4]
 810e47e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e482:	b29b      	uxth	r3, r3
 810e484:	3b01      	subs	r3, #1
 810e486:	b29a      	uxth	r2, r3
 810e488:	687b      	ldr	r3, [r7, #4]
 810e48a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810e48e:	687b      	ldr	r3, [r7, #4]
 810e490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e494:	b29b      	uxth	r3, r3
 810e496:	2b00      	cmp	r3, #0
 810e498:	f040 80a1 	bne.w	810e5de <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810e49c:	687b      	ldr	r3, [r7, #4]
 810e49e:	681b      	ldr	r3, [r3, #0]
 810e4a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e4a4:	e853 3f00 	ldrex	r3, [r3]
 810e4a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810e4aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e4ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810e4b0:	667b      	str	r3, [r7, #100]	@ 0x64
 810e4b2:	687b      	ldr	r3, [r7, #4]
 810e4b4:	681b      	ldr	r3, [r3, #0]
 810e4b6:	461a      	mov	r2, r3
 810e4b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810e4ba:	657b      	str	r3, [r7, #84]	@ 0x54
 810e4bc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e4be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810e4c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810e4c2:	e841 2300 	strex	r3, r2, [r1]
 810e4c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810e4c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e4ca:	2b00      	cmp	r3, #0
 810e4cc:	d1e6      	bne.n	810e49c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810e4ce:	687b      	ldr	r3, [r7, #4]
 810e4d0:	681b      	ldr	r3, [r3, #0]
 810e4d2:	3308      	adds	r3, #8
 810e4d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e4d8:	e853 3f00 	ldrex	r3, [r3]
 810e4dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810e4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e4e0:	f023 0301 	bic.w	r3, r3, #1
 810e4e4:	663b      	str	r3, [r7, #96]	@ 0x60
 810e4e6:	687b      	ldr	r3, [r7, #4]
 810e4e8:	681b      	ldr	r3, [r3, #0]
 810e4ea:	3308      	adds	r3, #8
 810e4ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810e4ee:	643a      	str	r2, [r7, #64]	@ 0x40
 810e4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e4f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810e4f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810e4f6:	e841 2300 	strex	r3, r2, [r1]
 810e4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e4fe:	2b00      	cmp	r3, #0
 810e500:	d1e5      	bne.n	810e4ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810e502:	687b      	ldr	r3, [r7, #4]
 810e504:	2220      	movs	r2, #32
 810e506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810e50a:	687b      	ldr	r3, [r7, #4]
 810e50c:	2200      	movs	r2, #0
 810e50e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e510:	687b      	ldr	r3, [r7, #4]
 810e512:	2200      	movs	r2, #0
 810e514:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e516:	687b      	ldr	r3, [r7, #4]
 810e518:	681b      	ldr	r3, [r3, #0]
 810e51a:	4a33      	ldr	r2, [pc, #204]	@ (810e5e8 <UART_RxISR_16BIT+0x1b4>)
 810e51c:	4293      	cmp	r3, r2
 810e51e:	d01f      	beq.n	810e560 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e520:	687b      	ldr	r3, [r7, #4]
 810e522:	681b      	ldr	r3, [r3, #0]
 810e524:	685b      	ldr	r3, [r3, #4]
 810e526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e52a:	2b00      	cmp	r3, #0
 810e52c:	d018      	beq.n	810e560 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e52e:	687b      	ldr	r3, [r7, #4]
 810e530:	681b      	ldr	r3, [r3, #0]
 810e532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e534:	6a3b      	ldr	r3, [r7, #32]
 810e536:	e853 3f00 	ldrex	r3, [r3]
 810e53a:	61fb      	str	r3, [r7, #28]
   return(result);
 810e53c:	69fb      	ldr	r3, [r7, #28]
 810e53e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810e544:	687b      	ldr	r3, [r7, #4]
 810e546:	681b      	ldr	r3, [r3, #0]
 810e548:	461a      	mov	r2, r3
 810e54a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810e54e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810e552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e554:	e841 2300 	strex	r3, r2, [r1]
 810e558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e55c:	2b00      	cmp	r3, #0
 810e55e:	d1e6      	bne.n	810e52e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e560:	687b      	ldr	r3, [r7, #4]
 810e562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e564:	2b01      	cmp	r3, #1
 810e566:	d12e      	bne.n	810e5c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e568:	687b      	ldr	r3, [r7, #4]
 810e56a:	2200      	movs	r2, #0
 810e56c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e56e:	687b      	ldr	r3, [r7, #4]
 810e570:	681b      	ldr	r3, [r3, #0]
 810e572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e574:	68fb      	ldr	r3, [r7, #12]
 810e576:	e853 3f00 	ldrex	r3, [r3]
 810e57a:	60bb      	str	r3, [r7, #8]
   return(result);
 810e57c:	68bb      	ldr	r3, [r7, #8]
 810e57e:	f023 0310 	bic.w	r3, r3, #16
 810e582:	65bb      	str	r3, [r7, #88]	@ 0x58
 810e584:	687b      	ldr	r3, [r7, #4]
 810e586:	681b      	ldr	r3, [r3, #0]
 810e588:	461a      	mov	r2, r3
 810e58a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810e58c:	61bb      	str	r3, [r7, #24]
 810e58e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e590:	6979      	ldr	r1, [r7, #20]
 810e592:	69ba      	ldr	r2, [r7, #24]
 810e594:	e841 2300 	strex	r3, r2, [r1]
 810e598:	613b      	str	r3, [r7, #16]
   return(result);
 810e59a:	693b      	ldr	r3, [r7, #16]
 810e59c:	2b00      	cmp	r3, #0
 810e59e:	d1e6      	bne.n	810e56e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e5a0:	687b      	ldr	r3, [r7, #4]
 810e5a2:	681b      	ldr	r3, [r3, #0]
 810e5a4:	69db      	ldr	r3, [r3, #28]
 810e5a6:	f003 0310 	and.w	r3, r3, #16
 810e5aa:	2b10      	cmp	r3, #16
 810e5ac:	d103      	bne.n	810e5b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e5ae:	687b      	ldr	r3, [r7, #4]
 810e5b0:	681b      	ldr	r3, [r3, #0]
 810e5b2:	2210      	movs	r2, #16
 810e5b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e5b6:	687b      	ldr	r3, [r7, #4]
 810e5b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e5bc:	4619      	mov	r1, r3
 810e5be:	6878      	ldr	r0, [r7, #4]
 810e5c0:	f7fe fd64 	bl	810d08c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e5c4:	e00b      	b.n	810e5de <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810e5c6:	6878      	ldr	r0, [r7, #4]
 810e5c8:	f7f5 fad2 	bl	8103b70 <HAL_UART_RxCpltCallback>
}
 810e5cc:	e007      	b.n	810e5de <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e5ce:	687b      	ldr	r3, [r7, #4]
 810e5d0:	681b      	ldr	r3, [r3, #0]
 810e5d2:	699a      	ldr	r2, [r3, #24]
 810e5d4:	687b      	ldr	r3, [r7, #4]
 810e5d6:	681b      	ldr	r3, [r3, #0]
 810e5d8:	f042 0208 	orr.w	r2, r2, #8
 810e5dc:	619a      	str	r2, [r3, #24]
}
 810e5de:	bf00      	nop
 810e5e0:	3770      	adds	r7, #112	@ 0x70
 810e5e2:	46bd      	mov	sp, r7
 810e5e4:	bd80      	pop	{r7, pc}
 810e5e6:	bf00      	nop
 810e5e8:	58000c00 	.word	0x58000c00

0810e5ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810e5ec:	b580      	push	{r7, lr}
 810e5ee:	b0ac      	sub	sp, #176	@ 0xb0
 810e5f0:	af00      	add	r7, sp, #0
 810e5f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810e5f4:	687b      	ldr	r3, [r7, #4]
 810e5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e5fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810e5fe:	687b      	ldr	r3, [r7, #4]
 810e600:	681b      	ldr	r3, [r3, #0]
 810e602:	69db      	ldr	r3, [r3, #28]
 810e604:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810e608:	687b      	ldr	r3, [r7, #4]
 810e60a:	681b      	ldr	r3, [r3, #0]
 810e60c:	681b      	ldr	r3, [r3, #0]
 810e60e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810e612:	687b      	ldr	r3, [r7, #4]
 810e614:	681b      	ldr	r3, [r3, #0]
 810e616:	689b      	ldr	r3, [r3, #8]
 810e618:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e61c:	687b      	ldr	r3, [r7, #4]
 810e61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e622:	2b22      	cmp	r3, #34	@ 0x22
 810e624:	f040 8182 	bne.w	810e92c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810e628:	687b      	ldr	r3, [r7, #4]
 810e62a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e62e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e632:	e125      	b.n	810e880 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e634:	687b      	ldr	r3, [r7, #4]
 810e636:	681b      	ldr	r3, [r3, #0]
 810e638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e63a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810e63e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 810e642:	b2d9      	uxtb	r1, r3
 810e644:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 810e648:	b2da      	uxtb	r2, r3
 810e64a:	687b      	ldr	r3, [r7, #4]
 810e64c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e64e:	400a      	ands	r2, r1
 810e650:	b2d2      	uxtb	r2, r2
 810e652:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 810e654:	687b      	ldr	r3, [r7, #4]
 810e656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e658:	1c5a      	adds	r2, r3, #1
 810e65a:	687b      	ldr	r3, [r7, #4]
 810e65c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810e65e:	687b      	ldr	r3, [r7, #4]
 810e660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e664:	b29b      	uxth	r3, r3
 810e666:	3b01      	subs	r3, #1
 810e668:	b29a      	uxth	r2, r3
 810e66a:	687b      	ldr	r3, [r7, #4]
 810e66c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810e670:	687b      	ldr	r3, [r7, #4]
 810e672:	681b      	ldr	r3, [r3, #0]
 810e674:	69db      	ldr	r3, [r3, #28]
 810e676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810e67a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e67e:	f003 0307 	and.w	r3, r3, #7
 810e682:	2b00      	cmp	r3, #0
 810e684:	d053      	beq.n	810e72e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810e686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e68a:	f003 0301 	and.w	r3, r3, #1
 810e68e:	2b00      	cmp	r3, #0
 810e690:	d011      	beq.n	810e6b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 810e692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810e696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e69a:	2b00      	cmp	r3, #0
 810e69c:	d00b      	beq.n	810e6b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810e69e:	687b      	ldr	r3, [r7, #4]
 810e6a0:	681b      	ldr	r3, [r3, #0]
 810e6a2:	2201      	movs	r2, #1
 810e6a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810e6a6:	687b      	ldr	r3, [r7, #4]
 810e6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e6ac:	f043 0201 	orr.w	r2, r3, #1
 810e6b0:	687b      	ldr	r3, [r7, #4]
 810e6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e6b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e6ba:	f003 0302 	and.w	r3, r3, #2
 810e6be:	2b00      	cmp	r3, #0
 810e6c0:	d011      	beq.n	810e6e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 810e6c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e6c6:	f003 0301 	and.w	r3, r3, #1
 810e6ca:	2b00      	cmp	r3, #0
 810e6cc:	d00b      	beq.n	810e6e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810e6ce:	687b      	ldr	r3, [r7, #4]
 810e6d0:	681b      	ldr	r3, [r3, #0]
 810e6d2:	2202      	movs	r2, #2
 810e6d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810e6d6:	687b      	ldr	r3, [r7, #4]
 810e6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e6dc:	f043 0204 	orr.w	r2, r3, #4
 810e6e0:	687b      	ldr	r3, [r7, #4]
 810e6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810e6e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e6ea:	f003 0304 	and.w	r3, r3, #4
 810e6ee:	2b00      	cmp	r3, #0
 810e6f0:	d011      	beq.n	810e716 <UART_RxISR_8BIT_FIFOEN+0x12a>
 810e6f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e6f6:	f003 0301 	and.w	r3, r3, #1
 810e6fa:	2b00      	cmp	r3, #0
 810e6fc:	d00b      	beq.n	810e716 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810e6fe:	687b      	ldr	r3, [r7, #4]
 810e700:	681b      	ldr	r3, [r3, #0]
 810e702:	2204      	movs	r2, #4
 810e704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810e706:	687b      	ldr	r3, [r7, #4]
 810e708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e70c:	f043 0202 	orr.w	r2, r3, #2
 810e710:	687b      	ldr	r3, [r7, #4]
 810e712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810e716:	687b      	ldr	r3, [r7, #4]
 810e718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810e71c:	2b00      	cmp	r3, #0
 810e71e:	d006      	beq.n	810e72e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810e720:	6878      	ldr	r0, [r7, #4]
 810e722:	f7fe fca9 	bl	810d078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e726:	687b      	ldr	r3, [r7, #4]
 810e728:	2200      	movs	r2, #0
 810e72a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810e72e:	687b      	ldr	r3, [r7, #4]
 810e730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e734:	b29b      	uxth	r3, r3
 810e736:	2b00      	cmp	r3, #0
 810e738:	f040 80a2 	bne.w	810e880 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810e73c:	687b      	ldr	r3, [r7, #4]
 810e73e:	681b      	ldr	r3, [r3, #0]
 810e740:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810e744:	e853 3f00 	ldrex	r3, [r3]
 810e748:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 810e74a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810e74c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810e750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810e754:	687b      	ldr	r3, [r7, #4]
 810e756:	681b      	ldr	r3, [r3, #0]
 810e758:	461a      	mov	r2, r3
 810e75a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810e75e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810e760:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e762:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 810e764:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810e766:	e841 2300 	strex	r3, r2, [r1]
 810e76a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 810e76c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810e76e:	2b00      	cmp	r3, #0
 810e770:	d1e4      	bne.n	810e73c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810e772:	687b      	ldr	r3, [r7, #4]
 810e774:	681b      	ldr	r3, [r3, #0]
 810e776:	3308      	adds	r3, #8
 810e778:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e77a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810e77c:	e853 3f00 	ldrex	r3, [r3]
 810e780:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810e782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810e784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e788:	f023 0301 	bic.w	r3, r3, #1
 810e78c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810e790:	687b      	ldr	r3, [r7, #4]
 810e792:	681b      	ldr	r3, [r3, #0]
 810e794:	3308      	adds	r3, #8
 810e796:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810e79a:	66ba      	str	r2, [r7, #104]	@ 0x68
 810e79c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e79e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810e7a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 810e7a2:	e841 2300 	strex	r3, r2, [r1]
 810e7a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810e7a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810e7aa:	2b00      	cmp	r3, #0
 810e7ac:	d1e1      	bne.n	810e772 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810e7ae:	687b      	ldr	r3, [r7, #4]
 810e7b0:	2220      	movs	r2, #32
 810e7b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810e7b6:	687b      	ldr	r3, [r7, #4]
 810e7b8:	2200      	movs	r2, #0
 810e7ba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810e7bc:	687b      	ldr	r3, [r7, #4]
 810e7be:	2200      	movs	r2, #0
 810e7c0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810e7c2:	687b      	ldr	r3, [r7, #4]
 810e7c4:	681b      	ldr	r3, [r3, #0]
 810e7c6:	4a5f      	ldr	r2, [pc, #380]	@ (810e944 <UART_RxISR_8BIT_FIFOEN+0x358>)
 810e7c8:	4293      	cmp	r3, r2
 810e7ca:	d021      	beq.n	810e810 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810e7cc:	687b      	ldr	r3, [r7, #4]
 810e7ce:	681b      	ldr	r3, [r3, #0]
 810e7d0:	685b      	ldr	r3, [r3, #4]
 810e7d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810e7d6:	2b00      	cmp	r3, #0
 810e7d8:	d01a      	beq.n	810e810 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810e7da:	687b      	ldr	r3, [r7, #4]
 810e7dc:	681b      	ldr	r3, [r3, #0]
 810e7de:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e7e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810e7e2:	e853 3f00 	ldrex	r3, [r3]
 810e7e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810e7e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810e7ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810e7ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810e7f2:	687b      	ldr	r3, [r7, #4]
 810e7f4:	681b      	ldr	r3, [r3, #0]
 810e7f6:	461a      	mov	r2, r3
 810e7f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810e7fc:	657b      	str	r3, [r7, #84]	@ 0x54
 810e7fe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e800:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810e802:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810e804:	e841 2300 	strex	r3, r2, [r1]
 810e808:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810e80a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810e80c:	2b00      	cmp	r3, #0
 810e80e:	d1e4      	bne.n	810e7da <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810e810:	687b      	ldr	r3, [r7, #4]
 810e812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810e814:	2b01      	cmp	r3, #1
 810e816:	d130      	bne.n	810e87a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810e818:	687b      	ldr	r3, [r7, #4]
 810e81a:	2200      	movs	r2, #0
 810e81c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810e81e:	687b      	ldr	r3, [r7, #4]
 810e820:	681b      	ldr	r3, [r3, #0]
 810e822:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e826:	e853 3f00 	ldrex	r3, [r3]
 810e82a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810e82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e82e:	f023 0310 	bic.w	r3, r3, #16
 810e832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810e836:	687b      	ldr	r3, [r7, #4]
 810e838:	681b      	ldr	r3, [r3, #0]
 810e83a:	461a      	mov	r2, r3
 810e83c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810e840:	643b      	str	r3, [r7, #64]	@ 0x40
 810e842:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810e846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810e848:	e841 2300 	strex	r3, r2, [r1]
 810e84c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810e84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810e850:	2b00      	cmp	r3, #0
 810e852:	d1e4      	bne.n	810e81e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810e854:	687b      	ldr	r3, [r7, #4]
 810e856:	681b      	ldr	r3, [r3, #0]
 810e858:	69db      	ldr	r3, [r3, #28]
 810e85a:	f003 0310 	and.w	r3, r3, #16
 810e85e:	2b10      	cmp	r3, #16
 810e860:	d103      	bne.n	810e86a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810e862:	687b      	ldr	r3, [r7, #4]
 810e864:	681b      	ldr	r3, [r3, #0]
 810e866:	2210      	movs	r2, #16
 810e868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810e86a:	687b      	ldr	r3, [r7, #4]
 810e86c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810e870:	4619      	mov	r1, r3
 810e872:	6878      	ldr	r0, [r7, #4]
 810e874:	f7fe fc0a 	bl	810d08c <HAL_UARTEx_RxEventCallback>
 810e878:	e002      	b.n	810e880 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810e87a:	6878      	ldr	r0, [r7, #4]
 810e87c:	f7f5 f978 	bl	8103b70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e880:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 810e884:	2b00      	cmp	r3, #0
 810e886:	d006      	beq.n	810e896 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 810e888:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e88c:	f003 0320 	and.w	r3, r3, #32
 810e890:	2b00      	cmp	r3, #0
 810e892:	f47f aecf 	bne.w	810e634 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810e896:	687b      	ldr	r3, [r7, #4]
 810e898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e89c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810e8a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 810e8a4:	2b00      	cmp	r3, #0
 810e8a6:	d049      	beq.n	810e93c <UART_RxISR_8BIT_FIFOEN+0x350>
 810e8a8:	687b      	ldr	r3, [r7, #4]
 810e8aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e8ae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 810e8b2:	429a      	cmp	r2, r3
 810e8b4:	d242      	bcs.n	810e93c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810e8b6:	687b      	ldr	r3, [r7, #4]
 810e8b8:	681b      	ldr	r3, [r3, #0]
 810e8ba:	3308      	adds	r3, #8
 810e8bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e8be:	6a3b      	ldr	r3, [r7, #32]
 810e8c0:	e853 3f00 	ldrex	r3, [r3]
 810e8c4:	61fb      	str	r3, [r7, #28]
   return(result);
 810e8c6:	69fb      	ldr	r3, [r7, #28]
 810e8c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e8cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810e8d0:	687b      	ldr	r3, [r7, #4]
 810e8d2:	681b      	ldr	r3, [r3, #0]
 810e8d4:	3308      	adds	r3, #8
 810e8d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810e8da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810e8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e8de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810e8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e8e2:	e841 2300 	strex	r3, r2, [r1]
 810e8e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810e8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e8ea:	2b00      	cmp	r3, #0
 810e8ec:	d1e3      	bne.n	810e8b6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 810e8ee:	687b      	ldr	r3, [r7, #4]
 810e8f0:	4a15      	ldr	r2, [pc, #84]	@ (810e948 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 810e8f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810e8f4:	687b      	ldr	r3, [r7, #4]
 810e8f6:	681b      	ldr	r3, [r3, #0]
 810e8f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810e8fa:	68fb      	ldr	r3, [r7, #12]
 810e8fc:	e853 3f00 	ldrex	r3, [r3]
 810e900:	60bb      	str	r3, [r7, #8]
   return(result);
 810e902:	68bb      	ldr	r3, [r7, #8]
 810e904:	f043 0320 	orr.w	r3, r3, #32
 810e908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810e90c:	687b      	ldr	r3, [r7, #4]
 810e90e:	681b      	ldr	r3, [r3, #0]
 810e910:	461a      	mov	r2, r3
 810e912:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810e916:	61bb      	str	r3, [r7, #24]
 810e918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810e91a:	6979      	ldr	r1, [r7, #20]
 810e91c:	69ba      	ldr	r2, [r7, #24]
 810e91e:	e841 2300 	strex	r3, r2, [r1]
 810e922:	613b      	str	r3, [r7, #16]
   return(result);
 810e924:	693b      	ldr	r3, [r7, #16]
 810e926:	2b00      	cmp	r3, #0
 810e928:	d1e4      	bne.n	810e8f4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810e92a:	e007      	b.n	810e93c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810e92c:	687b      	ldr	r3, [r7, #4]
 810e92e:	681b      	ldr	r3, [r3, #0]
 810e930:	699a      	ldr	r2, [r3, #24]
 810e932:	687b      	ldr	r3, [r7, #4]
 810e934:	681b      	ldr	r3, [r3, #0]
 810e936:	f042 0208 	orr.w	r2, r2, #8
 810e93a:	619a      	str	r2, [r3, #24]
}
 810e93c:	bf00      	nop
 810e93e:	37b0      	adds	r7, #176	@ 0xb0
 810e940:	46bd      	mov	sp, r7
 810e942:	bd80      	pop	{r7, pc}
 810e944:	58000c00 	.word	0x58000c00
 810e948:	0810e27d 	.word	0x0810e27d

0810e94c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810e94c:	b580      	push	{r7, lr}
 810e94e:	b0ae      	sub	sp, #184	@ 0xb8
 810e950:	af00      	add	r7, sp, #0
 810e952:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 810e954:	687b      	ldr	r3, [r7, #4]
 810e956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810e95a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810e95e:	687b      	ldr	r3, [r7, #4]
 810e960:	681b      	ldr	r3, [r3, #0]
 810e962:	69db      	ldr	r3, [r3, #28]
 810e964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810e968:	687b      	ldr	r3, [r7, #4]
 810e96a:	681b      	ldr	r3, [r3, #0]
 810e96c:	681b      	ldr	r3, [r3, #0]
 810e96e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810e972:	687b      	ldr	r3, [r7, #4]
 810e974:	681b      	ldr	r3, [r3, #0]
 810e976:	689b      	ldr	r3, [r3, #8]
 810e978:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810e97c:	687b      	ldr	r3, [r7, #4]
 810e97e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810e982:	2b22      	cmp	r3, #34	@ 0x22
 810e984:	f040 8186 	bne.w	810ec94 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810e988:	687b      	ldr	r3, [r7, #4]
 810e98a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810e98e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810e992:	e129      	b.n	810ebe8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810e994:	687b      	ldr	r3, [r7, #4]
 810e996:	681b      	ldr	r3, [r3, #0]
 810e998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e99a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810e99e:	687b      	ldr	r3, [r7, #4]
 810e9a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e9a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 810e9a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 810e9aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 810e9ae:	4013      	ands	r3, r2
 810e9b0:	b29a      	uxth	r2, r3
 810e9b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810e9b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 810e9b8:	687b      	ldr	r3, [r7, #4]
 810e9ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810e9bc:	1c9a      	adds	r2, r3, #2
 810e9be:	687b      	ldr	r3, [r7, #4]
 810e9c0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810e9c2:	687b      	ldr	r3, [r7, #4]
 810e9c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810e9c8:	b29b      	uxth	r3, r3
 810e9ca:	3b01      	subs	r3, #1
 810e9cc:	b29a      	uxth	r2, r3
 810e9ce:	687b      	ldr	r3, [r7, #4]
 810e9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810e9d4:	687b      	ldr	r3, [r7, #4]
 810e9d6:	681b      	ldr	r3, [r3, #0]
 810e9d8:	69db      	ldr	r3, [r3, #28]
 810e9da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810e9de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e9e2:	f003 0307 	and.w	r3, r3, #7
 810e9e6:	2b00      	cmp	r3, #0
 810e9e8:	d053      	beq.n	810ea92 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810e9ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810e9ee:	f003 0301 	and.w	r3, r3, #1
 810e9f2:	2b00      	cmp	r3, #0
 810e9f4:	d011      	beq.n	810ea1a <UART_RxISR_16BIT_FIFOEN+0xce>
 810e9f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810e9fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e9fe:	2b00      	cmp	r3, #0
 810ea00:	d00b      	beq.n	810ea1a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810ea02:	687b      	ldr	r3, [r7, #4]
 810ea04:	681b      	ldr	r3, [r3, #0]
 810ea06:	2201      	movs	r2, #1
 810ea08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810ea0a:	687b      	ldr	r3, [r7, #4]
 810ea0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea10:	f043 0201 	orr.w	r2, r3, #1
 810ea14:	687b      	ldr	r3, [r7, #4]
 810ea16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810ea1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810ea1e:	f003 0302 	and.w	r3, r3, #2
 810ea22:	2b00      	cmp	r3, #0
 810ea24:	d011      	beq.n	810ea4a <UART_RxISR_16BIT_FIFOEN+0xfe>
 810ea26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810ea2a:	f003 0301 	and.w	r3, r3, #1
 810ea2e:	2b00      	cmp	r3, #0
 810ea30:	d00b      	beq.n	810ea4a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810ea32:	687b      	ldr	r3, [r7, #4]
 810ea34:	681b      	ldr	r3, [r3, #0]
 810ea36:	2202      	movs	r2, #2
 810ea38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810ea3a:	687b      	ldr	r3, [r7, #4]
 810ea3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea40:	f043 0204 	orr.w	r2, r3, #4
 810ea44:	687b      	ldr	r3, [r7, #4]
 810ea46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810ea4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810ea4e:	f003 0304 	and.w	r3, r3, #4
 810ea52:	2b00      	cmp	r3, #0
 810ea54:	d011      	beq.n	810ea7a <UART_RxISR_16BIT_FIFOEN+0x12e>
 810ea56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810ea5a:	f003 0301 	and.w	r3, r3, #1
 810ea5e:	2b00      	cmp	r3, #0
 810ea60:	d00b      	beq.n	810ea7a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810ea62:	687b      	ldr	r3, [r7, #4]
 810ea64:	681b      	ldr	r3, [r3, #0]
 810ea66:	2204      	movs	r2, #4
 810ea68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810ea6a:	687b      	ldr	r3, [r7, #4]
 810ea6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea70:	f043 0202 	orr.w	r2, r3, #2
 810ea74:	687b      	ldr	r3, [r7, #4]
 810ea76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810ea7a:	687b      	ldr	r3, [r7, #4]
 810ea7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810ea80:	2b00      	cmp	r3, #0
 810ea82:	d006      	beq.n	810ea92 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810ea84:	6878      	ldr	r0, [r7, #4]
 810ea86:	f7fe faf7 	bl	810d078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ea8a:	687b      	ldr	r3, [r7, #4]
 810ea8c:	2200      	movs	r2, #0
 810ea8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810ea92:	687b      	ldr	r3, [r7, #4]
 810ea94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ea98:	b29b      	uxth	r3, r3
 810ea9a:	2b00      	cmp	r3, #0
 810ea9c:	f040 80a4 	bne.w	810ebe8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810eaa0:	687b      	ldr	r3, [r7, #4]
 810eaa2:	681b      	ldr	r3, [r3, #0]
 810eaa4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eaa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810eaa8:	e853 3f00 	ldrex	r3, [r3]
 810eaac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810eaae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810eab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810eab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810eab8:	687b      	ldr	r3, [r7, #4]
 810eaba:	681b      	ldr	r3, [r3, #0]
 810eabc:	461a      	mov	r2, r3
 810eabe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810eac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810eac6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eac8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810eaca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810eace:	e841 2300 	strex	r3, r2, [r1]
 810ead2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810ead4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810ead6:	2b00      	cmp	r3, #0
 810ead8:	d1e2      	bne.n	810eaa0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810eada:	687b      	ldr	r3, [r7, #4]
 810eadc:	681b      	ldr	r3, [r3, #0]
 810eade:	3308      	adds	r3, #8
 810eae0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eae2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810eae4:	e853 3f00 	ldrex	r3, [r3]
 810eae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810eaea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810eaec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810eaf0:	f023 0301 	bic.w	r3, r3, #1
 810eaf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810eaf8:	687b      	ldr	r3, [r7, #4]
 810eafa:	681b      	ldr	r3, [r3, #0]
 810eafc:	3308      	adds	r3, #8
 810eafe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 810eb02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810eb04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eb06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810eb08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810eb0a:	e841 2300 	strex	r3, r2, [r1]
 810eb0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810eb10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810eb12:	2b00      	cmp	r3, #0
 810eb14:	d1e1      	bne.n	810eada <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810eb16:	687b      	ldr	r3, [r7, #4]
 810eb18:	2220      	movs	r2, #32
 810eb1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810eb1e:	687b      	ldr	r3, [r7, #4]
 810eb20:	2200      	movs	r2, #0
 810eb22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810eb24:	687b      	ldr	r3, [r7, #4]
 810eb26:	2200      	movs	r2, #0
 810eb28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810eb2a:	687b      	ldr	r3, [r7, #4]
 810eb2c:	681b      	ldr	r3, [r3, #0]
 810eb2e:	4a5f      	ldr	r2, [pc, #380]	@ (810ecac <UART_RxISR_16BIT_FIFOEN+0x360>)
 810eb30:	4293      	cmp	r3, r2
 810eb32:	d021      	beq.n	810eb78 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810eb34:	687b      	ldr	r3, [r7, #4]
 810eb36:	681b      	ldr	r3, [r3, #0]
 810eb38:	685b      	ldr	r3, [r3, #4]
 810eb3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810eb3e:	2b00      	cmp	r3, #0
 810eb40:	d01a      	beq.n	810eb78 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810eb42:	687b      	ldr	r3, [r7, #4]
 810eb44:	681b      	ldr	r3, [r3, #0]
 810eb46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eb48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810eb4a:	e853 3f00 	ldrex	r3, [r3]
 810eb4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810eb50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810eb52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810eb56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810eb5a:	687b      	ldr	r3, [r7, #4]
 810eb5c:	681b      	ldr	r3, [r3, #0]
 810eb5e:	461a      	mov	r2, r3
 810eb60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810eb64:	65bb      	str	r3, [r7, #88]	@ 0x58
 810eb66:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810eb68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810eb6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810eb6c:	e841 2300 	strex	r3, r2, [r1]
 810eb70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810eb72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810eb74:	2b00      	cmp	r3, #0
 810eb76:	d1e4      	bne.n	810eb42 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810eb78:	687b      	ldr	r3, [r7, #4]
 810eb7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810eb7c:	2b01      	cmp	r3, #1
 810eb7e:	d130      	bne.n	810ebe2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810eb80:	687b      	ldr	r3, [r7, #4]
 810eb82:	2200      	movs	r2, #0
 810eb84:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810eb86:	687b      	ldr	r3, [r7, #4]
 810eb88:	681b      	ldr	r3, [r3, #0]
 810eb8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810eb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810eb8e:	e853 3f00 	ldrex	r3, [r3]
 810eb92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810eb94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810eb96:	f023 0310 	bic.w	r3, r3, #16
 810eb9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810eb9e:	687b      	ldr	r3, [r7, #4]
 810eba0:	681b      	ldr	r3, [r3, #0]
 810eba2:	461a      	mov	r2, r3
 810eba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810eba8:	647b      	str	r3, [r7, #68]	@ 0x44
 810ebaa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ebac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810ebae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ebb0:	e841 2300 	strex	r3, r2, [r1]
 810ebb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810ebb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ebb8:	2b00      	cmp	r3, #0
 810ebba:	d1e4      	bne.n	810eb86 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810ebbc:	687b      	ldr	r3, [r7, #4]
 810ebbe:	681b      	ldr	r3, [r3, #0]
 810ebc0:	69db      	ldr	r3, [r3, #28]
 810ebc2:	f003 0310 	and.w	r3, r3, #16
 810ebc6:	2b10      	cmp	r3, #16
 810ebc8:	d103      	bne.n	810ebd2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810ebca:	687b      	ldr	r3, [r7, #4]
 810ebcc:	681b      	ldr	r3, [r3, #0]
 810ebce:	2210      	movs	r2, #16
 810ebd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810ebd2:	687b      	ldr	r3, [r7, #4]
 810ebd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810ebd8:	4619      	mov	r1, r3
 810ebda:	6878      	ldr	r0, [r7, #4]
 810ebdc:	f7fe fa56 	bl	810d08c <HAL_UARTEx_RxEventCallback>
 810ebe0:	e002      	b.n	810ebe8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 810ebe2:	6878      	ldr	r0, [r7, #4]
 810ebe4:	f7f4 ffc4 	bl	8103b70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810ebe8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 810ebec:	2b00      	cmp	r3, #0
 810ebee:	d006      	beq.n	810ebfe <UART_RxISR_16BIT_FIFOEN+0x2b2>
 810ebf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810ebf4:	f003 0320 	and.w	r3, r3, #32
 810ebf8:	2b00      	cmp	r3, #0
 810ebfa:	f47f aecb 	bne.w	810e994 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810ebfe:	687b      	ldr	r3, [r7, #4]
 810ec00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ec04:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810ec08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 810ec0c:	2b00      	cmp	r3, #0
 810ec0e:	d049      	beq.n	810eca4 <UART_RxISR_16BIT_FIFOEN+0x358>
 810ec10:	687b      	ldr	r3, [r7, #4]
 810ec12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810ec16:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 810ec1a:	429a      	cmp	r2, r3
 810ec1c:	d242      	bcs.n	810eca4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810ec1e:	687b      	ldr	r3, [r7, #4]
 810ec20:	681b      	ldr	r3, [r3, #0]
 810ec22:	3308      	adds	r3, #8
 810ec24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ec26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ec28:	e853 3f00 	ldrex	r3, [r3]
 810ec2c:	623b      	str	r3, [r7, #32]
   return(result);
 810ec2e:	6a3b      	ldr	r3, [r7, #32]
 810ec30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810ec34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810ec38:	687b      	ldr	r3, [r7, #4]
 810ec3a:	681b      	ldr	r3, [r3, #0]
 810ec3c:	3308      	adds	r3, #8
 810ec3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 810ec42:	633a      	str	r2, [r7, #48]	@ 0x30
 810ec44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ec46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ec48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ec4a:	e841 2300 	strex	r3, r2, [r1]
 810ec4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810ec50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ec52:	2b00      	cmp	r3, #0
 810ec54:	d1e3      	bne.n	810ec1e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 810ec56:	687b      	ldr	r3, [r7, #4]
 810ec58:	4a15      	ldr	r2, [pc, #84]	@ (810ecb0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 810ec5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810ec5c:	687b      	ldr	r3, [r7, #4]
 810ec5e:	681b      	ldr	r3, [r3, #0]
 810ec60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ec62:	693b      	ldr	r3, [r7, #16]
 810ec64:	e853 3f00 	ldrex	r3, [r3]
 810ec68:	60fb      	str	r3, [r7, #12]
   return(result);
 810ec6a:	68fb      	ldr	r3, [r7, #12]
 810ec6c:	f043 0320 	orr.w	r3, r3, #32
 810ec70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810ec74:	687b      	ldr	r3, [r7, #4]
 810ec76:	681b      	ldr	r3, [r3, #0]
 810ec78:	461a      	mov	r2, r3
 810ec7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810ec7e:	61fb      	str	r3, [r7, #28]
 810ec80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ec82:	69b9      	ldr	r1, [r7, #24]
 810ec84:	69fa      	ldr	r2, [r7, #28]
 810ec86:	e841 2300 	strex	r3, r2, [r1]
 810ec8a:	617b      	str	r3, [r7, #20]
   return(result);
 810ec8c:	697b      	ldr	r3, [r7, #20]
 810ec8e:	2b00      	cmp	r3, #0
 810ec90:	d1e4      	bne.n	810ec5c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810ec92:	e007      	b.n	810eca4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810ec94:	687b      	ldr	r3, [r7, #4]
 810ec96:	681b      	ldr	r3, [r3, #0]
 810ec98:	699a      	ldr	r2, [r3, #24]
 810ec9a:	687b      	ldr	r3, [r7, #4]
 810ec9c:	681b      	ldr	r3, [r3, #0]
 810ec9e:	f042 0208 	orr.w	r2, r2, #8
 810eca2:	619a      	str	r2, [r3, #24]
}
 810eca4:	bf00      	nop
 810eca6:	37b8      	adds	r7, #184	@ 0xb8
 810eca8:	46bd      	mov	sp, r7
 810ecaa:	bd80      	pop	{r7, pc}
 810ecac:	58000c00 	.word	0x58000c00
 810ecb0:	0810e435 	.word	0x0810e435

0810ecb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810ecb4:	b480      	push	{r7}
 810ecb6:	b083      	sub	sp, #12
 810ecb8:	af00      	add	r7, sp, #0
 810ecba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810ecbc:	bf00      	nop
 810ecbe:	370c      	adds	r7, #12
 810ecc0:	46bd      	mov	sp, r7
 810ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ecc6:	4770      	bx	lr

0810ecc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810ecc8:	b480      	push	{r7}
 810ecca:	b083      	sub	sp, #12
 810eccc:	af00      	add	r7, sp, #0
 810ecce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810ecd0:	bf00      	nop
 810ecd2:	370c      	adds	r7, #12
 810ecd4:	46bd      	mov	sp, r7
 810ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ecda:	4770      	bx	lr

0810ecdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810ecdc:	b480      	push	{r7}
 810ecde:	b083      	sub	sp, #12
 810ece0:	af00      	add	r7, sp, #0
 810ece2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810ece4:	bf00      	nop
 810ece6:	370c      	adds	r7, #12
 810ece8:	46bd      	mov	sp, r7
 810ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ecee:	4770      	bx	lr

0810ecf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810ecf0:	b480      	push	{r7}
 810ecf2:	b085      	sub	sp, #20
 810ecf4:	af00      	add	r7, sp, #0
 810ecf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ecf8:	687b      	ldr	r3, [r7, #4]
 810ecfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ecfe:	2b01      	cmp	r3, #1
 810ed00:	d101      	bne.n	810ed06 <HAL_UARTEx_DisableFifoMode+0x16>
 810ed02:	2302      	movs	r3, #2
 810ed04:	e027      	b.n	810ed56 <HAL_UARTEx_DisableFifoMode+0x66>
 810ed06:	687b      	ldr	r3, [r7, #4]
 810ed08:	2201      	movs	r2, #1
 810ed0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ed0e:	687b      	ldr	r3, [r7, #4]
 810ed10:	2224      	movs	r2, #36	@ 0x24
 810ed12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ed16:	687b      	ldr	r3, [r7, #4]
 810ed18:	681b      	ldr	r3, [r3, #0]
 810ed1a:	681b      	ldr	r3, [r3, #0]
 810ed1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ed1e:	687b      	ldr	r3, [r7, #4]
 810ed20:	681b      	ldr	r3, [r3, #0]
 810ed22:	681a      	ldr	r2, [r3, #0]
 810ed24:	687b      	ldr	r3, [r7, #4]
 810ed26:	681b      	ldr	r3, [r3, #0]
 810ed28:	f022 0201 	bic.w	r2, r2, #1
 810ed2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810ed2e:	68fb      	ldr	r3, [r7, #12]
 810ed30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810ed34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810ed36:	687b      	ldr	r3, [r7, #4]
 810ed38:	2200      	movs	r2, #0
 810ed3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ed3c:	687b      	ldr	r3, [r7, #4]
 810ed3e:	681b      	ldr	r3, [r3, #0]
 810ed40:	68fa      	ldr	r2, [r7, #12]
 810ed42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ed44:	687b      	ldr	r3, [r7, #4]
 810ed46:	2220      	movs	r2, #32
 810ed48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ed4c:	687b      	ldr	r3, [r7, #4]
 810ed4e:	2200      	movs	r2, #0
 810ed50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ed54:	2300      	movs	r3, #0
}
 810ed56:	4618      	mov	r0, r3
 810ed58:	3714      	adds	r7, #20
 810ed5a:	46bd      	mov	sp, r7
 810ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed60:	4770      	bx	lr

0810ed62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ed62:	b580      	push	{r7, lr}
 810ed64:	b084      	sub	sp, #16
 810ed66:	af00      	add	r7, sp, #0
 810ed68:	6078      	str	r0, [r7, #4]
 810ed6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ed6c:	687b      	ldr	r3, [r7, #4]
 810ed6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810ed72:	2b01      	cmp	r3, #1
 810ed74:	d101      	bne.n	810ed7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810ed76:	2302      	movs	r3, #2
 810ed78:	e02d      	b.n	810edd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810ed7a:	687b      	ldr	r3, [r7, #4]
 810ed7c:	2201      	movs	r2, #1
 810ed7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ed82:	687b      	ldr	r3, [r7, #4]
 810ed84:	2224      	movs	r2, #36	@ 0x24
 810ed86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ed8a:	687b      	ldr	r3, [r7, #4]
 810ed8c:	681b      	ldr	r3, [r3, #0]
 810ed8e:	681b      	ldr	r3, [r3, #0]
 810ed90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ed92:	687b      	ldr	r3, [r7, #4]
 810ed94:	681b      	ldr	r3, [r3, #0]
 810ed96:	681a      	ldr	r2, [r3, #0]
 810ed98:	687b      	ldr	r3, [r7, #4]
 810ed9a:	681b      	ldr	r3, [r3, #0]
 810ed9c:	f022 0201 	bic.w	r2, r2, #1
 810eda0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810eda2:	687b      	ldr	r3, [r7, #4]
 810eda4:	681b      	ldr	r3, [r3, #0]
 810eda6:	689b      	ldr	r3, [r3, #8]
 810eda8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810edac:	687b      	ldr	r3, [r7, #4]
 810edae:	681b      	ldr	r3, [r3, #0]
 810edb0:	683a      	ldr	r2, [r7, #0]
 810edb2:	430a      	orrs	r2, r1
 810edb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810edb6:	6878      	ldr	r0, [r7, #4]
 810edb8:	f000 f850 	bl	810ee5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810edbc:	687b      	ldr	r3, [r7, #4]
 810edbe:	681b      	ldr	r3, [r3, #0]
 810edc0:	68fa      	ldr	r2, [r7, #12]
 810edc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810edc4:	687b      	ldr	r3, [r7, #4]
 810edc6:	2220      	movs	r2, #32
 810edc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810edcc:	687b      	ldr	r3, [r7, #4]
 810edce:	2200      	movs	r2, #0
 810edd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810edd4:	2300      	movs	r3, #0
}
 810edd6:	4618      	mov	r0, r3
 810edd8:	3710      	adds	r7, #16
 810edda:	46bd      	mov	sp, r7
 810eddc:	bd80      	pop	{r7, pc}

0810edde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810edde:	b580      	push	{r7, lr}
 810ede0:	b084      	sub	sp, #16
 810ede2:	af00      	add	r7, sp, #0
 810ede4:	6078      	str	r0, [r7, #4]
 810ede6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ede8:	687b      	ldr	r3, [r7, #4]
 810edea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810edee:	2b01      	cmp	r3, #1
 810edf0:	d101      	bne.n	810edf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810edf2:	2302      	movs	r3, #2
 810edf4:	e02d      	b.n	810ee52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810edf6:	687b      	ldr	r3, [r7, #4]
 810edf8:	2201      	movs	r2, #1
 810edfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810edfe:	687b      	ldr	r3, [r7, #4]
 810ee00:	2224      	movs	r2, #36	@ 0x24
 810ee02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ee06:	687b      	ldr	r3, [r7, #4]
 810ee08:	681b      	ldr	r3, [r3, #0]
 810ee0a:	681b      	ldr	r3, [r3, #0]
 810ee0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ee0e:	687b      	ldr	r3, [r7, #4]
 810ee10:	681b      	ldr	r3, [r3, #0]
 810ee12:	681a      	ldr	r2, [r3, #0]
 810ee14:	687b      	ldr	r3, [r7, #4]
 810ee16:	681b      	ldr	r3, [r3, #0]
 810ee18:	f022 0201 	bic.w	r2, r2, #1
 810ee1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ee1e:	687b      	ldr	r3, [r7, #4]
 810ee20:	681b      	ldr	r3, [r3, #0]
 810ee22:	689b      	ldr	r3, [r3, #8]
 810ee24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810ee28:	687b      	ldr	r3, [r7, #4]
 810ee2a:	681b      	ldr	r3, [r3, #0]
 810ee2c:	683a      	ldr	r2, [r7, #0]
 810ee2e:	430a      	orrs	r2, r1
 810ee30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ee32:	6878      	ldr	r0, [r7, #4]
 810ee34:	f000 f812 	bl	810ee5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ee38:	687b      	ldr	r3, [r7, #4]
 810ee3a:	681b      	ldr	r3, [r3, #0]
 810ee3c:	68fa      	ldr	r2, [r7, #12]
 810ee3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ee40:	687b      	ldr	r3, [r7, #4]
 810ee42:	2220      	movs	r2, #32
 810ee44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ee48:	687b      	ldr	r3, [r7, #4]
 810ee4a:	2200      	movs	r2, #0
 810ee4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810ee50:	2300      	movs	r3, #0
}
 810ee52:	4618      	mov	r0, r3
 810ee54:	3710      	adds	r7, #16
 810ee56:	46bd      	mov	sp, r7
 810ee58:	bd80      	pop	{r7, pc}
	...

0810ee5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ee5c:	b480      	push	{r7}
 810ee5e:	b085      	sub	sp, #20
 810ee60:	af00      	add	r7, sp, #0
 810ee62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ee64:	687b      	ldr	r3, [r7, #4]
 810ee66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810ee68:	2b00      	cmp	r3, #0
 810ee6a:	d108      	bne.n	810ee7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ee6c:	687b      	ldr	r3, [r7, #4]
 810ee6e:	2201      	movs	r2, #1
 810ee70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810ee74:	687b      	ldr	r3, [r7, #4]
 810ee76:	2201      	movs	r2, #1
 810ee78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ee7c:	e031      	b.n	810eee2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ee7e:	2310      	movs	r3, #16
 810ee80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ee82:	2310      	movs	r3, #16
 810ee84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ee86:	687b      	ldr	r3, [r7, #4]
 810ee88:	681b      	ldr	r3, [r3, #0]
 810ee8a:	689b      	ldr	r3, [r3, #8]
 810ee8c:	0e5b      	lsrs	r3, r3, #25
 810ee8e:	b2db      	uxtb	r3, r3
 810ee90:	f003 0307 	and.w	r3, r3, #7
 810ee94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ee96:	687b      	ldr	r3, [r7, #4]
 810ee98:	681b      	ldr	r3, [r3, #0]
 810ee9a:	689b      	ldr	r3, [r3, #8]
 810ee9c:	0f5b      	lsrs	r3, r3, #29
 810ee9e:	b2db      	uxtb	r3, r3
 810eea0:	f003 0307 	and.w	r3, r3, #7
 810eea4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810eea6:	7bbb      	ldrb	r3, [r7, #14]
 810eea8:	7b3a      	ldrb	r2, [r7, #12]
 810eeaa:	4911      	ldr	r1, [pc, #68]	@ (810eef0 <UARTEx_SetNbDataToProcess+0x94>)
 810eeac:	5c8a      	ldrb	r2, [r1, r2]
 810eeae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810eeb2:	7b3a      	ldrb	r2, [r7, #12]
 810eeb4:	490f      	ldr	r1, [pc, #60]	@ (810eef4 <UARTEx_SetNbDataToProcess+0x98>)
 810eeb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810eeb8:	fb93 f3f2 	sdiv	r3, r3, r2
 810eebc:	b29a      	uxth	r2, r3
 810eebe:	687b      	ldr	r3, [r7, #4]
 810eec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810eec4:	7bfb      	ldrb	r3, [r7, #15]
 810eec6:	7b7a      	ldrb	r2, [r7, #13]
 810eec8:	4909      	ldr	r1, [pc, #36]	@ (810eef0 <UARTEx_SetNbDataToProcess+0x94>)
 810eeca:	5c8a      	ldrb	r2, [r1, r2]
 810eecc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810eed0:	7b7a      	ldrb	r2, [r7, #13]
 810eed2:	4908      	ldr	r1, [pc, #32]	@ (810eef4 <UARTEx_SetNbDataToProcess+0x98>)
 810eed4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810eed6:	fb93 f3f2 	sdiv	r3, r3, r2
 810eeda:	b29a      	uxth	r2, r3
 810eedc:	687b      	ldr	r3, [r7, #4]
 810eede:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810eee2:	bf00      	nop
 810eee4:	3714      	adds	r7, #20
 810eee6:	46bd      	mov	sp, r7
 810eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eeec:	4770      	bx	lr
 810eeee:	bf00      	nop
 810eef0:	08113cf0 	.word	0x08113cf0
 810eef4:	08113cf8 	.word	0x08113cf8

0810eef8 <arm_mat_trans_f32>:
 810eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810eefc:	8802      	ldrh	r2, [r0, #0]
 810eefe:	884b      	ldrh	r3, [r1, #2]
 810ef00:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810ef04:	684f      	ldr	r7, [r1, #4]
 810ef06:	8840      	ldrh	r0, [r0, #2]
 810ef08:	4293      	cmp	r3, r2
 810ef0a:	b083      	sub	sp, #12
 810ef0c:	d14c      	bne.n	810efa8 <arm_mat_trans_f32+0xb0>
 810ef0e:	f8b1 e000 	ldrh.w	lr, [r1]
 810ef12:	4586      	cmp	lr, r0
 810ef14:	d148      	bne.n	810efa8 <arm_mat_trans_f32+0xb0>
 810ef16:	ea4f 089e 	mov.w	r8, lr, lsr #2
 810ef1a:	009c      	lsls	r4, r3, #2
 810ef1c:	f00e 0e03 	and.w	lr, lr, #3
 810ef20:	fb08 f904 	mul.w	r9, r8, r4
 810ef24:	ea4f 028e 	mov.w	r2, lr, lsl #2
 810ef28:	011d      	lsls	r5, r3, #4
 810ef2a:	00db      	lsls	r3, r3, #3
 810ef2c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810ef30:	eb07 0a04 	add.w	sl, r7, r4
 810ef34:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 810ef38:	9201      	str	r2, [sp, #4]
 810ef3a:	9300      	str	r3, [sp, #0]
 810ef3c:	463b      	mov	r3, r7
 810ef3e:	f1b8 0f00 	cmp.w	r8, #0
 810ef42:	d01d      	beq.n	810ef80 <arm_mat_trans_f32+0x88>
 810ef44:	9900      	ldr	r1, [sp, #0]
 810ef46:	f10c 0210 	add.w	r2, ip, #16
 810ef4a:	4439      	add	r1, r7
 810ef4c:	4640      	mov	r0, r8
 810ef4e:	f852 6c10 	ldr.w	r6, [r2, #-16]
 810ef52:	601e      	str	r6, [r3, #0]
 810ef54:	ed52 7a03 	vldr	s15, [r2, #-12]
 810ef58:	191e      	adds	r6, r3, r4
 810ef5a:	edc6 7a00 	vstr	s15, [r6]
 810ef5e:	f852 6c08 	ldr.w	r6, [r2, #-8]
 810ef62:	600e      	str	r6, [r1, #0]
 810ef64:	ed52 7a01 	vldr	s15, [r2, #-4]
 810ef68:	190e      	adds	r6, r1, r4
 810ef6a:	3801      	subs	r0, #1
 810ef6c:	442b      	add	r3, r5
 810ef6e:	f102 0210 	add.w	r2, r2, #16
 810ef72:	edc6 7a00 	vstr	s15, [r6]
 810ef76:	4429      	add	r1, r5
 810ef78:	d1e9      	bne.n	810ef4e <arm_mat_trans_f32+0x56>
 810ef7a:	44dc      	add	ip, fp
 810ef7c:	eb09 0307 	add.w	r3, r9, r7
 810ef80:	f1be 0f00 	cmp.w	lr, #0
 810ef84:	d009      	beq.n	810ef9a <arm_mat_trans_f32+0xa2>
 810ef86:	4672      	mov	r2, lr
 810ef88:	4661      	mov	r1, ip
 810ef8a:	f851 0b04 	ldr.w	r0, [r1], #4
 810ef8e:	6018      	str	r0, [r3, #0]
 810ef90:	3a01      	subs	r2, #1
 810ef92:	4423      	add	r3, r4
 810ef94:	d1f9      	bne.n	810ef8a <arm_mat_trans_f32+0x92>
 810ef96:	9b01      	ldr	r3, [sp, #4]
 810ef98:	449c      	add	ip, r3
 810ef9a:	3704      	adds	r7, #4
 810ef9c:	4557      	cmp	r7, sl
 810ef9e:	d1cd      	bne.n	810ef3c <arm_mat_trans_f32+0x44>
 810efa0:	2000      	movs	r0, #0
 810efa2:	b003      	add	sp, #12
 810efa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810efa8:	f06f 0002 	mvn.w	r0, #2
 810efac:	e7f9      	b.n	810efa2 <arm_mat_trans_f32+0xaa>
 810efae:	bf00      	nop

0810efb0 <arm_mat_sub_f32>:
 810efb0:	b4f0      	push	{r4, r5, r6, r7}
 810efb2:	e9d1 4700 	ldrd	r4, r7, [r1]
 810efb6:	6803      	ldr	r3, [r0, #0]
 810efb8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810efbc:	6856      	ldr	r6, [r2, #4]
 810efbe:	42a3      	cmp	r3, r4
 810efc0:	d15d      	bne.n	810f07e <arm_mat_sub_f32+0xce>
 810efc2:	6812      	ldr	r2, [r2, #0]
 810efc4:	4293      	cmp	r3, r2
 810efc6:	d15a      	bne.n	810f07e <arm_mat_sub_f32+0xce>
 810efc8:	8803      	ldrh	r3, [r0, #0]
 810efca:	8844      	ldrh	r4, [r0, #2]
 810efcc:	fb04 f403 	mul.w	r4, r4, r3
 810efd0:	08a5      	lsrs	r5, r4, #2
 810efd2:	d032      	beq.n	810f03a <arm_mat_sub_f32+0x8a>
 810efd4:	f10c 0110 	add.w	r1, ip, #16
 810efd8:	f107 0210 	add.w	r2, r7, #16
 810efdc:	f106 0310 	add.w	r3, r6, #16
 810efe0:	4628      	mov	r0, r5
 810efe2:	ed12 7a04 	vldr	s14, [r2, #-16]
 810efe6:	ed51 7a04 	vldr	s15, [r1, #-16]
 810efea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810efee:	3801      	subs	r0, #1
 810eff0:	ed43 7a04 	vstr	s15, [r3, #-16]
 810eff4:	ed12 7a03 	vldr	s14, [r2, #-12]
 810eff8:	ed51 7a03 	vldr	s15, [r1, #-12]
 810effc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f000:	f101 0110 	add.w	r1, r1, #16
 810f004:	ed43 7a03 	vstr	s15, [r3, #-12]
 810f008:	ed12 7a02 	vldr	s14, [r2, #-8]
 810f00c:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810f010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f014:	f102 0210 	add.w	r2, r2, #16
 810f018:	ed43 7a02 	vstr	s15, [r3, #-8]
 810f01c:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810f020:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810f024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f028:	f103 0310 	add.w	r3, r3, #16
 810f02c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810f030:	d1d7      	bne.n	810efe2 <arm_mat_sub_f32+0x32>
 810f032:	012b      	lsls	r3, r5, #4
 810f034:	449c      	add	ip, r3
 810f036:	441f      	add	r7, r3
 810f038:	441e      	add	r6, r3
 810f03a:	f014 0403 	ands.w	r4, r4, #3
 810f03e:	d01b      	beq.n	810f078 <arm_mat_sub_f32+0xc8>
 810f040:	eddc 7a00 	vldr	s15, [ip]
 810f044:	ed97 7a00 	vldr	s14, [r7]
 810f048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f04c:	3c01      	subs	r4, #1
 810f04e:	edc6 7a00 	vstr	s15, [r6]
 810f052:	d011      	beq.n	810f078 <arm_mat_sub_f32+0xc8>
 810f054:	eddc 7a01 	vldr	s15, [ip, #4]
 810f058:	ed97 7a01 	vldr	s14, [r7, #4]
 810f05c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f060:	2c01      	cmp	r4, #1
 810f062:	edc6 7a01 	vstr	s15, [r6, #4]
 810f066:	d007      	beq.n	810f078 <arm_mat_sub_f32+0xc8>
 810f068:	eddc 7a02 	vldr	s15, [ip, #8]
 810f06c:	ed97 7a02 	vldr	s14, [r7, #8]
 810f070:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f074:	edc6 7a02 	vstr	s15, [r6, #8]
 810f078:	2000      	movs	r0, #0
 810f07a:	bcf0      	pop	{r4, r5, r6, r7}
 810f07c:	4770      	bx	lr
 810f07e:	f06f 0002 	mvn.w	r0, #2
 810f082:	e7fa      	b.n	810f07a <arm_mat_sub_f32+0xca>

0810f084 <arm_mat_mult_f32>:
 810f084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f088:	8845      	ldrh	r5, [r0, #2]
 810f08a:	880b      	ldrh	r3, [r1, #0]
 810f08c:	8806      	ldrh	r6, [r0, #0]
 810f08e:	6847      	ldr	r7, [r0, #4]
 810f090:	6854      	ldr	r4, [r2, #4]
 810f092:	6848      	ldr	r0, [r1, #4]
 810f094:	b08b      	sub	sp, #44	@ 0x2c
 810f096:	42ab      	cmp	r3, r5
 810f098:	9109      	str	r1, [sp, #36]	@ 0x24
 810f09a:	9604      	str	r6, [sp, #16]
 810f09c:	8849      	ldrh	r1, [r1, #2]
 810f09e:	f040 808a 	bne.w	810f1b6 <arm_mat_mult_f32+0x132>
 810f0a2:	8815      	ldrh	r5, [r2, #0]
 810f0a4:	42b5      	cmp	r5, r6
 810f0a6:	f040 8086 	bne.w	810f1b6 <arm_mat_mult_f32+0x132>
 810f0aa:	8852      	ldrh	r2, [r2, #2]
 810f0ac:	428a      	cmp	r2, r1
 810f0ae:	f040 8082 	bne.w	810f1b6 <arm_mat_mult_f32+0x132>
 810f0b2:	ea4f 0893 	mov.w	r8, r3, lsr #2
 810f0b6:	1d01      	adds	r1, r0, #4
 810f0b8:	0116      	lsls	r6, r2, #4
 810f0ba:	9108      	str	r1, [sp, #32]
 810f0bc:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 810f0c0:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 810f0c4:	9101      	str	r1, [sp, #4]
 810f0c6:	fb06 f108 	mul.w	r1, r6, r8
 810f0ca:	0095      	lsls	r5, r2, #2
 810f0cc:	9103      	str	r1, [sp, #12]
 810f0ce:	00d2      	lsls	r2, r2, #3
 810f0d0:	ea4f 018c 	mov.w	r1, ip, lsl #2
 810f0d4:	f003 0903 	and.w	r9, r3, #3
 810f0d8:	009b      	lsls	r3, r3, #2
 810f0da:	f107 0b10 	add.w	fp, r7, #16
 810f0de:	eb04 0a05 	add.w	sl, r4, r5
 810f0e2:	9107      	str	r1, [sp, #28]
 810f0e4:	9202      	str	r2, [sp, #8]
 810f0e6:	9306      	str	r3, [sp, #24]
 810f0e8:	f1ab 0310 	sub.w	r3, fp, #16
 810f0ec:	9305      	str	r3, [sp, #20]
 810f0ee:	9b07      	ldr	r3, [sp, #28]
 810f0f0:	f8dd e020 	ldr.w	lr, [sp, #32]
 810f0f4:	eb03 0c0a 	add.w	ip, r3, sl
 810f0f8:	eddf 7a31 	vldr	s15, [pc, #196]	@ 810f1c0 <arm_mat_mult_f32+0x13c>
 810f0fc:	f1b8 0f00 	cmp.w	r8, #0
 810f100:	d053      	beq.n	810f1aa <arm_mat_mult_f32+0x126>
 810f102:	9b02      	ldr	r3, [sp, #8]
 810f104:	4644      	mov	r4, r8
 810f106:	18c1      	adds	r1, r0, r3
 810f108:	4602      	mov	r2, r0
 810f10a:	465b      	mov	r3, fp
 810f10c:	ed92 6a00 	vldr	s12, [r2]
 810f110:	ed13 7a04 	vldr	s14, [r3, #-16]
 810f114:	ed53 4a03 	vldr	s9, [r3, #-12]
 810f118:	ed53 6a02 	vldr	s13, [r3, #-8]
 810f11c:	ed91 5a00 	vldr	s10, [r1]
 810f120:	ed53 5a01 	vldr	s11, [r3, #-4]
 810f124:	1957      	adds	r7, r2, r5
 810f126:	ee27 7a06 	vmul.f32	s14, s14, s12
 810f12a:	ed97 6a00 	vldr	s12, [r7]
 810f12e:	ee77 7a27 	vadd.f32	s15, s14, s15
 810f132:	ee26 6a24 	vmul.f32	s12, s12, s9
 810f136:	194f      	adds	r7, r1, r5
 810f138:	ee36 6a27 	vadd.f32	s12, s12, s15
 810f13c:	ee26 7a85 	vmul.f32	s14, s13, s10
 810f140:	edd7 7a00 	vldr	s15, [r7]
 810f144:	ee37 7a06 	vadd.f32	s14, s14, s12
 810f148:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810f14c:	3c01      	subs	r4, #1
 810f14e:	4432      	add	r2, r6
 810f150:	4431      	add	r1, r6
 810f152:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f156:	f103 0310 	add.w	r3, r3, #16
 810f15a:	d1d7      	bne.n	810f10c <arm_mat_mult_f32+0x88>
 810f15c:	9b03      	ldr	r3, [sp, #12]
 810f15e:	9a01      	ldr	r2, [sp, #4]
 810f160:	4418      	add	r0, r3
 810f162:	f1b9 0f00 	cmp.w	r9, #0
 810f166:	d00b      	beq.n	810f180 <arm_mat_mult_f32+0xfc>
 810f168:	464b      	mov	r3, r9
 810f16a:	edd0 6a00 	vldr	s13, [r0]
 810f16e:	ecb2 7a01 	vldmia	r2!, {s14}
 810f172:	ee27 7a26 	vmul.f32	s14, s14, s13
 810f176:	3b01      	subs	r3, #1
 810f178:	4428      	add	r0, r5
 810f17a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f17e:	d1f4      	bne.n	810f16a <arm_mat_mult_f32+0xe6>
 810f180:	ecec 7a01 	vstmia	ip!, {s15}
 810f184:	45d4      	cmp	ip, sl
 810f186:	4670      	mov	r0, lr
 810f188:	f10e 0e04 	add.w	lr, lr, #4
 810f18c:	d1b4      	bne.n	810f0f8 <arm_mat_mult_f32+0x74>
 810f18e:	9a01      	ldr	r2, [sp, #4]
 810f190:	9b06      	ldr	r3, [sp, #24]
 810f192:	4611      	mov	r1, r2
 810f194:	4419      	add	r1, r3
 810f196:	449b      	add	fp, r3
 810f198:	9b04      	ldr	r3, [sp, #16]
 810f19a:	9101      	str	r1, [sp, #4]
 810f19c:	3b01      	subs	r3, #1
 810f19e:	44aa      	add	sl, r5
 810f1a0:	9304      	str	r3, [sp, #16]
 810f1a2:	d004      	beq.n	810f1ae <arm_mat_mult_f32+0x12a>
 810f1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f1a6:	6858      	ldr	r0, [r3, #4]
 810f1a8:	e79e      	b.n	810f0e8 <arm_mat_mult_f32+0x64>
 810f1aa:	9a05      	ldr	r2, [sp, #20]
 810f1ac:	e7d9      	b.n	810f162 <arm_mat_mult_f32+0xde>
 810f1ae:	4618      	mov	r0, r3
 810f1b0:	b00b      	add	sp, #44	@ 0x2c
 810f1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f1b6:	f06f 0002 	mvn.w	r0, #2
 810f1ba:	b00b      	add	sp, #44	@ 0x2c
 810f1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f1c0:	00000000 	.word	0x00000000

0810f1c4 <arm_mat_inverse_f32>:
 810f1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f1c8:	8843      	ldrh	r3, [r0, #2]
 810f1ca:	8804      	ldrh	r4, [r0, #0]
 810f1cc:	684e      	ldr	r6, [r1, #4]
 810f1ce:	f8d0 9004 	ldr.w	r9, [r0, #4]
 810f1d2:	b087      	sub	sp, #28
 810f1d4:	429c      	cmp	r4, r3
 810f1d6:	9301      	str	r3, [sp, #4]
 810f1d8:	9603      	str	r6, [sp, #12]
 810f1da:	f040 80ea 	bne.w	810f3b2 <arm_mat_inverse_f32+0x1ee>
 810f1de:	880a      	ldrh	r2, [r1, #0]
 810f1e0:	884b      	ldrh	r3, [r1, #2]
 810f1e2:	4293      	cmp	r3, r2
 810f1e4:	f040 80e5 	bne.w	810f3b2 <arm_mat_inverse_f32+0x1ee>
 810f1e8:	429c      	cmp	r4, r3
 810f1ea:	f040 80e2 	bne.w	810f3b2 <arm_mat_inverse_f32+0x1ee>
 810f1ee:	9005      	str	r0, [sp, #20]
 810f1f0:	b30c      	cbz	r4, 810f236 <arm_mat_inverse_f32+0x72>
 810f1f2:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 810f1f6:	1e67      	subs	r7, r4, #1
 810f1f8:	f846 bb04 	str.w	fp, [r6], #4
 810f1fc:	d01b      	beq.n	810f236 <arm_mat_inverse_f32+0x72>
 810f1fe:	f04f 0801 	mov.w	r8, #1
 810f202:	00ba      	lsls	r2, r7, #2
 810f204:	eb06 0a02 	add.w	sl, r6, r2
 810f208:	ea4f 0588 	mov.w	r5, r8, lsl #2
 810f20c:	4630      	mov	r0, r6
 810f20e:	2100      	movs	r1, #0
 810f210:	f001 f9c2 	bl	8110598 <memset>
 810f214:	eb0a 0605 	add.w	r6, sl, r5
 810f218:	462a      	mov	r2, r5
 810f21a:	2100      	movs	r1, #0
 810f21c:	4650      	mov	r0, sl
 810f21e:	f1b8 0f00 	cmp.w	r8, #0
 810f222:	f000 80cb 	beq.w	810f3bc <arm_mat_inverse_f32+0x1f8>
 810f226:	f001 f9b7 	bl	8110598 <memset>
 810f22a:	3f01      	subs	r7, #1
 810f22c:	f108 0801 	add.w	r8, r8, #1
 810f230:	f846 bb04 	str.w	fp, [r6], #4
 810f234:	d1e5      	bne.n	810f202 <arm_mat_inverse_f32+0x3e>
 810f236:	9b01      	ldr	r3, [sp, #4]
 810f238:	2b00      	cmp	r3, #0
 810f23a:	f000 80b5 	beq.w	810f3a8 <arm_mat_inverse_f32+0x1e4>
 810f23e:	009d      	lsls	r5, r3, #2
 810f240:	eb09 0205 	add.w	r2, r9, r5
 810f244:	46cc      	mov	ip, r9
 810f246:	9202      	str	r2, [sp, #8]
 810f248:	f8dd 900c 	ldr.w	r9, [sp, #12]
 810f24c:	1d2a      	adds	r2, r5, #4
 810f24e:	9204      	str	r2, [sp, #16]
 810f250:	462f      	mov	r7, r5
 810f252:	469e      	mov	lr, r3
 810f254:	2600      	movs	r6, #0
 810f256:	9b02      	ldr	r3, [sp, #8]
 810f258:	eddc 6a00 	vldr	s13, [ip]
 810f25c:	42b4      	cmp	r4, r6
 810f25e:	eba3 0b07 	sub.w	fp, r3, r7
 810f262:	f000 80a1 	beq.w	810f3a8 <arm_mat_inverse_f32+0x1e4>
 810f266:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 810f3cc <arm_mat_inverse_f32+0x208>
 810f26a:	4632      	mov	r2, r6
 810f26c:	4663      	mov	r3, ip
 810f26e:	e00b      	b.n	810f288 <arm_mat_inverse_f32+0xc4>
 810f270:	eef4 7a47 	vcmp.f32	s15, s14
 810f274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f278:	f102 0201 	add.w	r2, r2, #1
 810f27c:	bfc8      	it	gt
 810f27e:	eeb0 7a67 	vmovgt.f32	s14, s15
 810f282:	42a2      	cmp	r2, r4
 810f284:	442b      	add	r3, r5
 810f286:	d014      	beq.n	810f2b2 <arm_mat_inverse_f32+0xee>
 810f288:	edd3 7a00 	vldr	s15, [r3]
 810f28c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810f290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f294:	eeb1 6a67 	vneg.f32	s12, s15
 810f298:	dcea      	bgt.n	810f270 <arm_mat_inverse_f32+0xac>
 810f29a:	eeb4 6a47 	vcmp.f32	s12, s14
 810f29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f2a2:	f102 0201 	add.w	r2, r2, #1
 810f2a6:	bfc8      	it	gt
 810f2a8:	eeb0 7a46 	vmovgt.f32	s14, s12
 810f2ac:	42a2      	cmp	r2, r4
 810f2ae:	442b      	add	r3, r5
 810f2b0:	d1ea      	bne.n	810f288 <arm_mat_inverse_f32+0xc4>
 810f2b2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810f2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f2ba:	d075      	beq.n	810f3a8 <arm_mat_inverse_f32+0x1e4>
 810f2bc:	eef5 6a40 	vcmp.f32	s13, #0.0
 810f2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f2c4:	d070      	beq.n	810f3a8 <arm_mat_inverse_f32+0x1e4>
 810f2c6:	4672      	mov	r2, lr
 810f2c8:	4663      	mov	r3, ip
 810f2ca:	ed93 7a00 	vldr	s14, [r3]
 810f2ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810f2d2:	3a01      	subs	r2, #1
 810f2d4:	ece3 7a01 	vstmia	r3!, {s15}
 810f2d8:	d1f7      	bne.n	810f2ca <arm_mat_inverse_f32+0x106>
 810f2da:	9901      	ldr	r1, [sp, #4]
 810f2dc:	464b      	mov	r3, r9
 810f2de:	ed93 7a00 	vldr	s14, [r3]
 810f2e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810f2e6:	3901      	subs	r1, #1
 810f2e8:	ece3 7a01 	vstmia	r3!, {s15}
 810f2ec:	d1f7      	bne.n	810f2de <arm_mat_inverse_f32+0x11a>
 810f2ee:	9803      	ldr	r0, [sp, #12]
 810f2f0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 810f2f4:	42b1      	cmp	r1, r6
 810f2f6:	d039      	beq.n	810f36c <arm_mat_inverse_f32+0x1a8>
 810f2f8:	eddb 6a00 	vldr	s13, [fp]
 810f2fc:	465a      	mov	r2, fp
 810f2fe:	4673      	mov	r3, lr
 810f300:	46e2      	mov	sl, ip
 810f302:	ecba 7a01 	vldmia	sl!, {s14}
 810f306:	edd2 7a00 	vldr	s15, [r2]
 810f30a:	ee26 7a87 	vmul.f32	s14, s13, s14
 810f30e:	3b01      	subs	r3, #1
 810f310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f314:	ece2 7a01 	vstmia	r2!, {s15}
 810f318:	d1f3      	bne.n	810f302 <arm_mat_inverse_f32+0x13e>
 810f31a:	9b01      	ldr	r3, [sp, #4]
 810f31c:	44bb      	add	fp, r7
 810f31e:	4602      	mov	r2, r0
 810f320:	46ca      	mov	sl, r9
 810f322:	ecba 7a01 	vldmia	sl!, {s14}
 810f326:	edd2 7a00 	vldr	s15, [r2]
 810f32a:	ee26 7a87 	vmul.f32	s14, s13, s14
 810f32e:	3b01      	subs	r3, #1
 810f330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f334:	ece2 7a01 	vstmia	r2!, {s15}
 810f338:	d1f3      	bne.n	810f322 <arm_mat_inverse_f32+0x15e>
 810f33a:	4428      	add	r0, r5
 810f33c:	3101      	adds	r1, #1
 810f33e:	428c      	cmp	r4, r1
 810f340:	44c3      	add	fp, r8
 810f342:	d1d7      	bne.n	810f2f4 <arm_mat_inverse_f32+0x130>
 810f344:	9b04      	ldr	r3, [sp, #16]
 810f346:	f1be 0e01 	subs.w	lr, lr, #1
 810f34a:	f106 0601 	add.w	r6, r6, #1
 810f34e:	449c      	add	ip, r3
 810f350:	f1a7 0704 	sub.w	r7, r7, #4
 810f354:	44a9      	add	r9, r5
 810f356:	f47f af7e 	bne.w	810f256 <arm_mat_inverse_f32+0x92>
 810f35a:	eef5 6a40 	vcmp.f32	s13, #0.0
 810f35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f362:	d006      	beq.n	810f372 <arm_mat_inverse_f32+0x1ae>
 810f364:	2000      	movs	r0, #0
 810f366:	b007      	add	sp, #28
 810f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f36c:	44bb      	add	fp, r7
 810f36e:	4428      	add	r0, r5
 810f370:	e7e4      	b.n	810f33c <arm_mat_inverse_f32+0x178>
 810f372:	9b05      	ldr	r3, [sp, #20]
 810f374:	9a01      	ldr	r2, [sp, #4]
 810f376:	685b      	ldr	r3, [r3, #4]
 810f378:	edd3 7a00 	vldr	s15, [r3]
 810f37c:	eef5 7a40 	vcmp.f32	s15, #0.0
 810f380:	fb02 f204 	mul.w	r2, r2, r4
 810f384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f388:	4614      	mov	r4, r2
 810f38a:	bf08      	it	eq
 810f38c:	3304      	addeq	r3, #4
 810f38e:	d007      	beq.n	810f3a0 <arm_mat_inverse_f32+0x1dc>
 810f390:	e7e8      	b.n	810f364 <arm_mat_inverse_f32+0x1a0>
 810f392:	ecf3 7a01 	vldmia	r3!, {s15}
 810f396:	eef5 7a40 	vcmp.f32	s15, #0.0
 810f39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f39e:	d1e1      	bne.n	810f364 <arm_mat_inverse_f32+0x1a0>
 810f3a0:	f10e 0e01 	add.w	lr, lr, #1
 810f3a4:	4574      	cmp	r4, lr
 810f3a6:	d1f4      	bne.n	810f392 <arm_mat_inverse_f32+0x1ce>
 810f3a8:	f06f 0004 	mvn.w	r0, #4
 810f3ac:	b007      	add	sp, #28
 810f3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f3b2:	f06f 0002 	mvn.w	r0, #2
 810f3b6:	b007      	add	sp, #28
 810f3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f3bc:	4656      	mov	r6, sl
 810f3be:	3f01      	subs	r7, #1
 810f3c0:	f846 bb04 	str.w	fp, [r6], #4
 810f3c4:	f47f af1b 	bne.w	810f1fe <arm_mat_inverse_f32+0x3a>
 810f3c8:	e735      	b.n	810f236 <arm_mat_inverse_f32+0x72>
 810f3ca:	bf00      	nop
 810f3cc:	00000000 	.word	0x00000000

0810f3d0 <arm_mat_init_f32>:
 810f3d0:	8001      	strh	r1, [r0, #0]
 810f3d2:	8042      	strh	r2, [r0, #2]
 810f3d4:	6043      	str	r3, [r0, #4]
 810f3d6:	4770      	bx	lr

0810f3d8 <arm_mat_add_f32>:
 810f3d8:	b4f0      	push	{r4, r5, r6, r7}
 810f3da:	e9d1 4700 	ldrd	r4, r7, [r1]
 810f3de:	6803      	ldr	r3, [r0, #0]
 810f3e0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 810f3e4:	6856      	ldr	r6, [r2, #4]
 810f3e6:	42a3      	cmp	r3, r4
 810f3e8:	d15d      	bne.n	810f4a6 <arm_mat_add_f32+0xce>
 810f3ea:	6812      	ldr	r2, [r2, #0]
 810f3ec:	4293      	cmp	r3, r2
 810f3ee:	d15a      	bne.n	810f4a6 <arm_mat_add_f32+0xce>
 810f3f0:	8803      	ldrh	r3, [r0, #0]
 810f3f2:	8844      	ldrh	r4, [r0, #2]
 810f3f4:	fb04 f403 	mul.w	r4, r4, r3
 810f3f8:	08a5      	lsrs	r5, r4, #2
 810f3fa:	d032      	beq.n	810f462 <arm_mat_add_f32+0x8a>
 810f3fc:	f10c 0110 	add.w	r1, ip, #16
 810f400:	f107 0210 	add.w	r2, r7, #16
 810f404:	f106 0310 	add.w	r3, r6, #16
 810f408:	4628      	mov	r0, r5
 810f40a:	ed12 7a04 	vldr	s14, [r2, #-16]
 810f40e:	ed51 7a04 	vldr	s15, [r1, #-16]
 810f412:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f416:	3801      	subs	r0, #1
 810f418:	ed43 7a04 	vstr	s15, [r3, #-16]
 810f41c:	ed12 7a03 	vldr	s14, [r2, #-12]
 810f420:	ed51 7a03 	vldr	s15, [r1, #-12]
 810f424:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f428:	f101 0110 	add.w	r1, r1, #16
 810f42c:	ed43 7a03 	vstr	s15, [r3, #-12]
 810f430:	ed12 7a02 	vldr	s14, [r2, #-8]
 810f434:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 810f438:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f43c:	f102 0210 	add.w	r2, r2, #16
 810f440:	ed43 7a02 	vstr	s15, [r3, #-8]
 810f444:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 810f448:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 810f44c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f450:	f103 0310 	add.w	r3, r3, #16
 810f454:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 810f458:	d1d7      	bne.n	810f40a <arm_mat_add_f32+0x32>
 810f45a:	012b      	lsls	r3, r5, #4
 810f45c:	449c      	add	ip, r3
 810f45e:	441f      	add	r7, r3
 810f460:	441e      	add	r6, r3
 810f462:	f014 0403 	ands.w	r4, r4, #3
 810f466:	d01b      	beq.n	810f4a0 <arm_mat_add_f32+0xc8>
 810f468:	edd7 7a00 	vldr	s15, [r7]
 810f46c:	ed9c 7a00 	vldr	s14, [ip]
 810f470:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f474:	3c01      	subs	r4, #1
 810f476:	edc6 7a00 	vstr	s15, [r6]
 810f47a:	d011      	beq.n	810f4a0 <arm_mat_add_f32+0xc8>
 810f47c:	eddc 7a01 	vldr	s15, [ip, #4]
 810f480:	ed97 7a01 	vldr	s14, [r7, #4]
 810f484:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f488:	2c01      	cmp	r4, #1
 810f48a:	edc6 7a01 	vstr	s15, [r6, #4]
 810f48e:	d007      	beq.n	810f4a0 <arm_mat_add_f32+0xc8>
 810f490:	eddc 7a02 	vldr	s15, [ip, #8]
 810f494:	ed97 7a02 	vldr	s14, [r7, #8]
 810f498:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f49c:	edc6 7a02 	vstr	s15, [r6, #8]
 810f4a0:	2000      	movs	r0, #0
 810f4a2:	bcf0      	pop	{r4, r5, r6, r7}
 810f4a4:	4770      	bx	lr
 810f4a6:	f06f 0002 	mvn.w	r0, #2
 810f4aa:	e7fa      	b.n	810f4a2 <arm_mat_add_f32+0xca>

0810f4ac <arm_fir_init_f32>:
 810f4ac:	b538      	push	{r3, r4, r5, lr}
 810f4ae:	9c04      	ldr	r4, [sp, #16]
 810f4b0:	6082      	str	r2, [r0, #8]
 810f4b2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 810f4b6:	3c01      	subs	r4, #1
 810f4b8:	440c      	add	r4, r1
 810f4ba:	8001      	strh	r1, [r0, #0]
 810f4bc:	4605      	mov	r5, r0
 810f4be:	00a2      	lsls	r2, r4, #2
 810f4c0:	4618      	mov	r0, r3
 810f4c2:	2100      	movs	r1, #0
 810f4c4:	f001 f868 	bl	8110598 <memset>
 810f4c8:	6068      	str	r0, [r5, #4]
 810f4ca:	bd38      	pop	{r3, r4, r5, pc}

0810f4cc <srand>:
 810f4cc:	b538      	push	{r3, r4, r5, lr}
 810f4ce:	4b10      	ldr	r3, [pc, #64]	@ (810f510 <srand+0x44>)
 810f4d0:	681d      	ldr	r5, [r3, #0]
 810f4d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810f4d4:	4604      	mov	r4, r0
 810f4d6:	b9b3      	cbnz	r3, 810f506 <srand+0x3a>
 810f4d8:	2018      	movs	r0, #24
 810f4da:	f001 ffa7 	bl	811142c <malloc>
 810f4de:	4602      	mov	r2, r0
 810f4e0:	6328      	str	r0, [r5, #48]	@ 0x30
 810f4e2:	b920      	cbnz	r0, 810f4ee <srand+0x22>
 810f4e4:	4b0b      	ldr	r3, [pc, #44]	@ (810f514 <srand+0x48>)
 810f4e6:	480c      	ldr	r0, [pc, #48]	@ (810f518 <srand+0x4c>)
 810f4e8:	2146      	movs	r1, #70	@ 0x46
 810f4ea:	f001 f8e9 	bl	81106c0 <__assert_func>
 810f4ee:	490b      	ldr	r1, [pc, #44]	@ (810f51c <srand+0x50>)
 810f4f0:	4b0b      	ldr	r3, [pc, #44]	@ (810f520 <srand+0x54>)
 810f4f2:	e9c0 1300 	strd	r1, r3, [r0]
 810f4f6:	4b0b      	ldr	r3, [pc, #44]	@ (810f524 <srand+0x58>)
 810f4f8:	6083      	str	r3, [r0, #8]
 810f4fa:	230b      	movs	r3, #11
 810f4fc:	8183      	strh	r3, [r0, #12]
 810f4fe:	2100      	movs	r1, #0
 810f500:	2001      	movs	r0, #1
 810f502:	e9c2 0104 	strd	r0, r1, [r2, #16]
 810f506:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 810f508:	2200      	movs	r2, #0
 810f50a:	611c      	str	r4, [r3, #16]
 810f50c:	615a      	str	r2, [r3, #20]
 810f50e:	bd38      	pop	{r3, r4, r5, pc}
 810f510:	100000b0 	.word	0x100000b0
 810f514:	08113d00 	.word	0x08113d00
 810f518:	08113d17 	.word	0x08113d17
 810f51c:	abcd330e 	.word	0xabcd330e
 810f520:	e66d1234 	.word	0xe66d1234
 810f524:	0005deec 	.word	0x0005deec

0810f528 <__cvt>:
 810f528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f52c:	ec57 6b10 	vmov	r6, r7, d0
 810f530:	2f00      	cmp	r7, #0
 810f532:	460c      	mov	r4, r1
 810f534:	4619      	mov	r1, r3
 810f536:	463b      	mov	r3, r7
 810f538:	bfbb      	ittet	lt
 810f53a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810f53e:	461f      	movlt	r7, r3
 810f540:	2300      	movge	r3, #0
 810f542:	232d      	movlt	r3, #45	@ 0x2d
 810f544:	700b      	strb	r3, [r1, #0]
 810f546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810f548:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810f54c:	4691      	mov	r9, r2
 810f54e:	f023 0820 	bic.w	r8, r3, #32
 810f552:	bfbc      	itt	lt
 810f554:	4632      	movlt	r2, r6
 810f556:	4616      	movlt	r6, r2
 810f558:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810f55c:	d005      	beq.n	810f56a <__cvt+0x42>
 810f55e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810f562:	d100      	bne.n	810f566 <__cvt+0x3e>
 810f564:	3401      	adds	r4, #1
 810f566:	2102      	movs	r1, #2
 810f568:	e000      	b.n	810f56c <__cvt+0x44>
 810f56a:	2103      	movs	r1, #3
 810f56c:	ab03      	add	r3, sp, #12
 810f56e:	9301      	str	r3, [sp, #4]
 810f570:	ab02      	add	r3, sp, #8
 810f572:	9300      	str	r3, [sp, #0]
 810f574:	ec47 6b10 	vmov	d0, r6, r7
 810f578:	4653      	mov	r3, sl
 810f57a:	4622      	mov	r2, r4
 810f57c:	f001 f948 	bl	8110810 <_dtoa_r>
 810f580:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810f584:	4605      	mov	r5, r0
 810f586:	d119      	bne.n	810f5bc <__cvt+0x94>
 810f588:	f019 0f01 	tst.w	r9, #1
 810f58c:	d00e      	beq.n	810f5ac <__cvt+0x84>
 810f58e:	eb00 0904 	add.w	r9, r0, r4
 810f592:	2200      	movs	r2, #0
 810f594:	2300      	movs	r3, #0
 810f596:	4630      	mov	r0, r6
 810f598:	4639      	mov	r1, r7
 810f59a:	f7f1 fb1d 	bl	8100bd8 <__aeabi_dcmpeq>
 810f59e:	b108      	cbz	r0, 810f5a4 <__cvt+0x7c>
 810f5a0:	f8cd 900c 	str.w	r9, [sp, #12]
 810f5a4:	2230      	movs	r2, #48	@ 0x30
 810f5a6:	9b03      	ldr	r3, [sp, #12]
 810f5a8:	454b      	cmp	r3, r9
 810f5aa:	d31e      	bcc.n	810f5ea <__cvt+0xc2>
 810f5ac:	9b03      	ldr	r3, [sp, #12]
 810f5ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f5b0:	1b5b      	subs	r3, r3, r5
 810f5b2:	4628      	mov	r0, r5
 810f5b4:	6013      	str	r3, [r2, #0]
 810f5b6:	b004      	add	sp, #16
 810f5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f5bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810f5c0:	eb00 0904 	add.w	r9, r0, r4
 810f5c4:	d1e5      	bne.n	810f592 <__cvt+0x6a>
 810f5c6:	7803      	ldrb	r3, [r0, #0]
 810f5c8:	2b30      	cmp	r3, #48	@ 0x30
 810f5ca:	d10a      	bne.n	810f5e2 <__cvt+0xba>
 810f5cc:	2200      	movs	r2, #0
 810f5ce:	2300      	movs	r3, #0
 810f5d0:	4630      	mov	r0, r6
 810f5d2:	4639      	mov	r1, r7
 810f5d4:	f7f1 fb00 	bl	8100bd8 <__aeabi_dcmpeq>
 810f5d8:	b918      	cbnz	r0, 810f5e2 <__cvt+0xba>
 810f5da:	f1c4 0401 	rsb	r4, r4, #1
 810f5de:	f8ca 4000 	str.w	r4, [sl]
 810f5e2:	f8da 3000 	ldr.w	r3, [sl]
 810f5e6:	4499      	add	r9, r3
 810f5e8:	e7d3      	b.n	810f592 <__cvt+0x6a>
 810f5ea:	1c59      	adds	r1, r3, #1
 810f5ec:	9103      	str	r1, [sp, #12]
 810f5ee:	701a      	strb	r2, [r3, #0]
 810f5f0:	e7d9      	b.n	810f5a6 <__cvt+0x7e>

0810f5f2 <__exponent>:
 810f5f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810f5f4:	2900      	cmp	r1, #0
 810f5f6:	bfba      	itte	lt
 810f5f8:	4249      	neglt	r1, r1
 810f5fa:	232d      	movlt	r3, #45	@ 0x2d
 810f5fc:	232b      	movge	r3, #43	@ 0x2b
 810f5fe:	2909      	cmp	r1, #9
 810f600:	7002      	strb	r2, [r0, #0]
 810f602:	7043      	strb	r3, [r0, #1]
 810f604:	dd29      	ble.n	810f65a <__exponent+0x68>
 810f606:	f10d 0307 	add.w	r3, sp, #7
 810f60a:	461d      	mov	r5, r3
 810f60c:	270a      	movs	r7, #10
 810f60e:	461a      	mov	r2, r3
 810f610:	fbb1 f6f7 	udiv	r6, r1, r7
 810f614:	fb07 1416 	mls	r4, r7, r6, r1
 810f618:	3430      	adds	r4, #48	@ 0x30
 810f61a:	f802 4c01 	strb.w	r4, [r2, #-1]
 810f61e:	460c      	mov	r4, r1
 810f620:	2c63      	cmp	r4, #99	@ 0x63
 810f622:	f103 33ff 	add.w	r3, r3, #4294967295
 810f626:	4631      	mov	r1, r6
 810f628:	dcf1      	bgt.n	810f60e <__exponent+0x1c>
 810f62a:	3130      	adds	r1, #48	@ 0x30
 810f62c:	1e94      	subs	r4, r2, #2
 810f62e:	f803 1c01 	strb.w	r1, [r3, #-1]
 810f632:	1c41      	adds	r1, r0, #1
 810f634:	4623      	mov	r3, r4
 810f636:	42ab      	cmp	r3, r5
 810f638:	d30a      	bcc.n	810f650 <__exponent+0x5e>
 810f63a:	f10d 0309 	add.w	r3, sp, #9
 810f63e:	1a9b      	subs	r3, r3, r2
 810f640:	42ac      	cmp	r4, r5
 810f642:	bf88      	it	hi
 810f644:	2300      	movhi	r3, #0
 810f646:	3302      	adds	r3, #2
 810f648:	4403      	add	r3, r0
 810f64a:	1a18      	subs	r0, r3, r0
 810f64c:	b003      	add	sp, #12
 810f64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810f650:	f813 6b01 	ldrb.w	r6, [r3], #1
 810f654:	f801 6f01 	strb.w	r6, [r1, #1]!
 810f658:	e7ed      	b.n	810f636 <__exponent+0x44>
 810f65a:	2330      	movs	r3, #48	@ 0x30
 810f65c:	3130      	adds	r1, #48	@ 0x30
 810f65e:	7083      	strb	r3, [r0, #2]
 810f660:	70c1      	strb	r1, [r0, #3]
 810f662:	1d03      	adds	r3, r0, #4
 810f664:	e7f1      	b.n	810f64a <__exponent+0x58>
	...

0810f668 <_printf_float>:
 810f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f66c:	b08d      	sub	sp, #52	@ 0x34
 810f66e:	460c      	mov	r4, r1
 810f670:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810f674:	4616      	mov	r6, r2
 810f676:	461f      	mov	r7, r3
 810f678:	4605      	mov	r5, r0
 810f67a:	f000 ff95 	bl	81105a8 <_localeconv_r>
 810f67e:	6803      	ldr	r3, [r0, #0]
 810f680:	9304      	str	r3, [sp, #16]
 810f682:	4618      	mov	r0, r3
 810f684:	f7f0 fe7c 	bl	8100380 <strlen>
 810f688:	2300      	movs	r3, #0
 810f68a:	930a      	str	r3, [sp, #40]	@ 0x28
 810f68c:	f8d8 3000 	ldr.w	r3, [r8]
 810f690:	9005      	str	r0, [sp, #20]
 810f692:	3307      	adds	r3, #7
 810f694:	f023 0307 	bic.w	r3, r3, #7
 810f698:	f103 0208 	add.w	r2, r3, #8
 810f69c:	f894 a018 	ldrb.w	sl, [r4, #24]
 810f6a0:	f8d4 b000 	ldr.w	fp, [r4]
 810f6a4:	f8c8 2000 	str.w	r2, [r8]
 810f6a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 810f6ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810f6b0:	9307      	str	r3, [sp, #28]
 810f6b2:	f8cd 8018 	str.w	r8, [sp, #24]
 810f6b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810f6ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f6be:	4b9c      	ldr	r3, [pc, #624]	@ (810f930 <_printf_float+0x2c8>)
 810f6c0:	f04f 32ff 	mov.w	r2, #4294967295
 810f6c4:	f7f1 faba 	bl	8100c3c <__aeabi_dcmpun>
 810f6c8:	bb70      	cbnz	r0, 810f728 <_printf_float+0xc0>
 810f6ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f6ce:	4b98      	ldr	r3, [pc, #608]	@ (810f930 <_printf_float+0x2c8>)
 810f6d0:	f04f 32ff 	mov.w	r2, #4294967295
 810f6d4:	f7f1 fa94 	bl	8100c00 <__aeabi_dcmple>
 810f6d8:	bb30      	cbnz	r0, 810f728 <_printf_float+0xc0>
 810f6da:	2200      	movs	r2, #0
 810f6dc:	2300      	movs	r3, #0
 810f6de:	4640      	mov	r0, r8
 810f6e0:	4649      	mov	r1, r9
 810f6e2:	f7f1 fa83 	bl	8100bec <__aeabi_dcmplt>
 810f6e6:	b110      	cbz	r0, 810f6ee <_printf_float+0x86>
 810f6e8:	232d      	movs	r3, #45	@ 0x2d
 810f6ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f6ee:	4a91      	ldr	r2, [pc, #580]	@ (810f934 <_printf_float+0x2cc>)
 810f6f0:	4b91      	ldr	r3, [pc, #580]	@ (810f938 <_printf_float+0x2d0>)
 810f6f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810f6f6:	bf94      	ite	ls
 810f6f8:	4690      	movls	r8, r2
 810f6fa:	4698      	movhi	r8, r3
 810f6fc:	2303      	movs	r3, #3
 810f6fe:	6123      	str	r3, [r4, #16]
 810f700:	f02b 0304 	bic.w	r3, fp, #4
 810f704:	6023      	str	r3, [r4, #0]
 810f706:	f04f 0900 	mov.w	r9, #0
 810f70a:	9700      	str	r7, [sp, #0]
 810f70c:	4633      	mov	r3, r6
 810f70e:	aa0b      	add	r2, sp, #44	@ 0x2c
 810f710:	4621      	mov	r1, r4
 810f712:	4628      	mov	r0, r5
 810f714:	f000 f9d2 	bl	810fabc <_printf_common>
 810f718:	3001      	adds	r0, #1
 810f71a:	f040 808d 	bne.w	810f838 <_printf_float+0x1d0>
 810f71e:	f04f 30ff 	mov.w	r0, #4294967295
 810f722:	b00d      	add	sp, #52	@ 0x34
 810f724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f728:	4642      	mov	r2, r8
 810f72a:	464b      	mov	r3, r9
 810f72c:	4640      	mov	r0, r8
 810f72e:	4649      	mov	r1, r9
 810f730:	f7f1 fa84 	bl	8100c3c <__aeabi_dcmpun>
 810f734:	b140      	cbz	r0, 810f748 <_printf_float+0xe0>
 810f736:	464b      	mov	r3, r9
 810f738:	2b00      	cmp	r3, #0
 810f73a:	bfbc      	itt	lt
 810f73c:	232d      	movlt	r3, #45	@ 0x2d
 810f73e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810f742:	4a7e      	ldr	r2, [pc, #504]	@ (810f93c <_printf_float+0x2d4>)
 810f744:	4b7e      	ldr	r3, [pc, #504]	@ (810f940 <_printf_float+0x2d8>)
 810f746:	e7d4      	b.n	810f6f2 <_printf_float+0x8a>
 810f748:	6863      	ldr	r3, [r4, #4]
 810f74a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810f74e:	9206      	str	r2, [sp, #24]
 810f750:	1c5a      	adds	r2, r3, #1
 810f752:	d13b      	bne.n	810f7cc <_printf_float+0x164>
 810f754:	2306      	movs	r3, #6
 810f756:	6063      	str	r3, [r4, #4]
 810f758:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810f75c:	2300      	movs	r3, #0
 810f75e:	6022      	str	r2, [r4, #0]
 810f760:	9303      	str	r3, [sp, #12]
 810f762:	ab0a      	add	r3, sp, #40	@ 0x28
 810f764:	e9cd a301 	strd	sl, r3, [sp, #4]
 810f768:	ab09      	add	r3, sp, #36	@ 0x24
 810f76a:	9300      	str	r3, [sp, #0]
 810f76c:	6861      	ldr	r1, [r4, #4]
 810f76e:	ec49 8b10 	vmov	d0, r8, r9
 810f772:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810f776:	4628      	mov	r0, r5
 810f778:	f7ff fed6 	bl	810f528 <__cvt>
 810f77c:	9b06      	ldr	r3, [sp, #24]
 810f77e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810f780:	2b47      	cmp	r3, #71	@ 0x47
 810f782:	4680      	mov	r8, r0
 810f784:	d129      	bne.n	810f7da <_printf_float+0x172>
 810f786:	1cc8      	adds	r0, r1, #3
 810f788:	db02      	blt.n	810f790 <_printf_float+0x128>
 810f78a:	6863      	ldr	r3, [r4, #4]
 810f78c:	4299      	cmp	r1, r3
 810f78e:	dd41      	ble.n	810f814 <_printf_float+0x1ac>
 810f790:	f1aa 0a02 	sub.w	sl, sl, #2
 810f794:	fa5f fa8a 	uxtb.w	sl, sl
 810f798:	3901      	subs	r1, #1
 810f79a:	4652      	mov	r2, sl
 810f79c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810f7a0:	9109      	str	r1, [sp, #36]	@ 0x24
 810f7a2:	f7ff ff26 	bl	810f5f2 <__exponent>
 810f7a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810f7a8:	1813      	adds	r3, r2, r0
 810f7aa:	2a01      	cmp	r2, #1
 810f7ac:	4681      	mov	r9, r0
 810f7ae:	6123      	str	r3, [r4, #16]
 810f7b0:	dc02      	bgt.n	810f7b8 <_printf_float+0x150>
 810f7b2:	6822      	ldr	r2, [r4, #0]
 810f7b4:	07d2      	lsls	r2, r2, #31
 810f7b6:	d501      	bpl.n	810f7bc <_printf_float+0x154>
 810f7b8:	3301      	adds	r3, #1
 810f7ba:	6123      	str	r3, [r4, #16]
 810f7bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810f7c0:	2b00      	cmp	r3, #0
 810f7c2:	d0a2      	beq.n	810f70a <_printf_float+0xa2>
 810f7c4:	232d      	movs	r3, #45	@ 0x2d
 810f7c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f7ca:	e79e      	b.n	810f70a <_printf_float+0xa2>
 810f7cc:	9a06      	ldr	r2, [sp, #24]
 810f7ce:	2a47      	cmp	r2, #71	@ 0x47
 810f7d0:	d1c2      	bne.n	810f758 <_printf_float+0xf0>
 810f7d2:	2b00      	cmp	r3, #0
 810f7d4:	d1c0      	bne.n	810f758 <_printf_float+0xf0>
 810f7d6:	2301      	movs	r3, #1
 810f7d8:	e7bd      	b.n	810f756 <_printf_float+0xee>
 810f7da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810f7de:	d9db      	bls.n	810f798 <_printf_float+0x130>
 810f7e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810f7e4:	d118      	bne.n	810f818 <_printf_float+0x1b0>
 810f7e6:	2900      	cmp	r1, #0
 810f7e8:	6863      	ldr	r3, [r4, #4]
 810f7ea:	dd0b      	ble.n	810f804 <_printf_float+0x19c>
 810f7ec:	6121      	str	r1, [r4, #16]
 810f7ee:	b913      	cbnz	r3, 810f7f6 <_printf_float+0x18e>
 810f7f0:	6822      	ldr	r2, [r4, #0]
 810f7f2:	07d0      	lsls	r0, r2, #31
 810f7f4:	d502      	bpl.n	810f7fc <_printf_float+0x194>
 810f7f6:	3301      	adds	r3, #1
 810f7f8:	440b      	add	r3, r1
 810f7fa:	6123      	str	r3, [r4, #16]
 810f7fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 810f7fe:	f04f 0900 	mov.w	r9, #0
 810f802:	e7db      	b.n	810f7bc <_printf_float+0x154>
 810f804:	b913      	cbnz	r3, 810f80c <_printf_float+0x1a4>
 810f806:	6822      	ldr	r2, [r4, #0]
 810f808:	07d2      	lsls	r2, r2, #31
 810f80a:	d501      	bpl.n	810f810 <_printf_float+0x1a8>
 810f80c:	3302      	adds	r3, #2
 810f80e:	e7f4      	b.n	810f7fa <_printf_float+0x192>
 810f810:	2301      	movs	r3, #1
 810f812:	e7f2      	b.n	810f7fa <_printf_float+0x192>
 810f814:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810f818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f81a:	4299      	cmp	r1, r3
 810f81c:	db05      	blt.n	810f82a <_printf_float+0x1c2>
 810f81e:	6823      	ldr	r3, [r4, #0]
 810f820:	6121      	str	r1, [r4, #16]
 810f822:	07d8      	lsls	r0, r3, #31
 810f824:	d5ea      	bpl.n	810f7fc <_printf_float+0x194>
 810f826:	1c4b      	adds	r3, r1, #1
 810f828:	e7e7      	b.n	810f7fa <_printf_float+0x192>
 810f82a:	2900      	cmp	r1, #0
 810f82c:	bfd4      	ite	le
 810f82e:	f1c1 0202 	rsble	r2, r1, #2
 810f832:	2201      	movgt	r2, #1
 810f834:	4413      	add	r3, r2
 810f836:	e7e0      	b.n	810f7fa <_printf_float+0x192>
 810f838:	6823      	ldr	r3, [r4, #0]
 810f83a:	055a      	lsls	r2, r3, #21
 810f83c:	d407      	bmi.n	810f84e <_printf_float+0x1e6>
 810f83e:	6923      	ldr	r3, [r4, #16]
 810f840:	4642      	mov	r2, r8
 810f842:	4631      	mov	r1, r6
 810f844:	4628      	mov	r0, r5
 810f846:	47b8      	blx	r7
 810f848:	3001      	adds	r0, #1
 810f84a:	d12b      	bne.n	810f8a4 <_printf_float+0x23c>
 810f84c:	e767      	b.n	810f71e <_printf_float+0xb6>
 810f84e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810f852:	f240 80dd 	bls.w	810fa10 <_printf_float+0x3a8>
 810f856:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810f85a:	2200      	movs	r2, #0
 810f85c:	2300      	movs	r3, #0
 810f85e:	f7f1 f9bb 	bl	8100bd8 <__aeabi_dcmpeq>
 810f862:	2800      	cmp	r0, #0
 810f864:	d033      	beq.n	810f8ce <_printf_float+0x266>
 810f866:	4a37      	ldr	r2, [pc, #220]	@ (810f944 <_printf_float+0x2dc>)
 810f868:	2301      	movs	r3, #1
 810f86a:	4631      	mov	r1, r6
 810f86c:	4628      	mov	r0, r5
 810f86e:	47b8      	blx	r7
 810f870:	3001      	adds	r0, #1
 810f872:	f43f af54 	beq.w	810f71e <_printf_float+0xb6>
 810f876:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810f87a:	4543      	cmp	r3, r8
 810f87c:	db02      	blt.n	810f884 <_printf_float+0x21c>
 810f87e:	6823      	ldr	r3, [r4, #0]
 810f880:	07d8      	lsls	r0, r3, #31
 810f882:	d50f      	bpl.n	810f8a4 <_printf_float+0x23c>
 810f884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f888:	4631      	mov	r1, r6
 810f88a:	4628      	mov	r0, r5
 810f88c:	47b8      	blx	r7
 810f88e:	3001      	adds	r0, #1
 810f890:	f43f af45 	beq.w	810f71e <_printf_float+0xb6>
 810f894:	f04f 0900 	mov.w	r9, #0
 810f898:	f108 38ff 	add.w	r8, r8, #4294967295
 810f89c:	f104 0a1a 	add.w	sl, r4, #26
 810f8a0:	45c8      	cmp	r8, r9
 810f8a2:	dc09      	bgt.n	810f8b8 <_printf_float+0x250>
 810f8a4:	6823      	ldr	r3, [r4, #0]
 810f8a6:	079b      	lsls	r3, r3, #30
 810f8a8:	f100 8103 	bmi.w	810fab2 <_printf_float+0x44a>
 810f8ac:	68e0      	ldr	r0, [r4, #12]
 810f8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810f8b0:	4298      	cmp	r0, r3
 810f8b2:	bfb8      	it	lt
 810f8b4:	4618      	movlt	r0, r3
 810f8b6:	e734      	b.n	810f722 <_printf_float+0xba>
 810f8b8:	2301      	movs	r3, #1
 810f8ba:	4652      	mov	r2, sl
 810f8bc:	4631      	mov	r1, r6
 810f8be:	4628      	mov	r0, r5
 810f8c0:	47b8      	blx	r7
 810f8c2:	3001      	adds	r0, #1
 810f8c4:	f43f af2b 	beq.w	810f71e <_printf_float+0xb6>
 810f8c8:	f109 0901 	add.w	r9, r9, #1
 810f8cc:	e7e8      	b.n	810f8a0 <_printf_float+0x238>
 810f8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f8d0:	2b00      	cmp	r3, #0
 810f8d2:	dc39      	bgt.n	810f948 <_printf_float+0x2e0>
 810f8d4:	4a1b      	ldr	r2, [pc, #108]	@ (810f944 <_printf_float+0x2dc>)
 810f8d6:	2301      	movs	r3, #1
 810f8d8:	4631      	mov	r1, r6
 810f8da:	4628      	mov	r0, r5
 810f8dc:	47b8      	blx	r7
 810f8de:	3001      	adds	r0, #1
 810f8e0:	f43f af1d 	beq.w	810f71e <_printf_float+0xb6>
 810f8e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810f8e8:	ea59 0303 	orrs.w	r3, r9, r3
 810f8ec:	d102      	bne.n	810f8f4 <_printf_float+0x28c>
 810f8ee:	6823      	ldr	r3, [r4, #0]
 810f8f0:	07d9      	lsls	r1, r3, #31
 810f8f2:	d5d7      	bpl.n	810f8a4 <_printf_float+0x23c>
 810f8f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f8f8:	4631      	mov	r1, r6
 810f8fa:	4628      	mov	r0, r5
 810f8fc:	47b8      	blx	r7
 810f8fe:	3001      	adds	r0, #1
 810f900:	f43f af0d 	beq.w	810f71e <_printf_float+0xb6>
 810f904:	f04f 0a00 	mov.w	sl, #0
 810f908:	f104 0b1a 	add.w	fp, r4, #26
 810f90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f90e:	425b      	negs	r3, r3
 810f910:	4553      	cmp	r3, sl
 810f912:	dc01      	bgt.n	810f918 <_printf_float+0x2b0>
 810f914:	464b      	mov	r3, r9
 810f916:	e793      	b.n	810f840 <_printf_float+0x1d8>
 810f918:	2301      	movs	r3, #1
 810f91a:	465a      	mov	r2, fp
 810f91c:	4631      	mov	r1, r6
 810f91e:	4628      	mov	r0, r5
 810f920:	47b8      	blx	r7
 810f922:	3001      	adds	r0, #1
 810f924:	f43f aefb 	beq.w	810f71e <_printf_float+0xb6>
 810f928:	f10a 0a01 	add.w	sl, sl, #1
 810f92c:	e7ee      	b.n	810f90c <_printf_float+0x2a4>
 810f92e:	bf00      	nop
 810f930:	7fefffff 	.word	0x7fefffff
 810f934:	08113d6f 	.word	0x08113d6f
 810f938:	08113d73 	.word	0x08113d73
 810f93c:	08113d77 	.word	0x08113d77
 810f940:	08113d7b 	.word	0x08113d7b
 810f944:	08113d7f 	.word	0x08113d7f
 810f948:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810f94a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810f94e:	4553      	cmp	r3, sl
 810f950:	bfa8      	it	ge
 810f952:	4653      	movge	r3, sl
 810f954:	2b00      	cmp	r3, #0
 810f956:	4699      	mov	r9, r3
 810f958:	dc36      	bgt.n	810f9c8 <_printf_float+0x360>
 810f95a:	f04f 0b00 	mov.w	fp, #0
 810f95e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f962:	f104 021a 	add.w	r2, r4, #26
 810f966:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810f968:	9306      	str	r3, [sp, #24]
 810f96a:	eba3 0309 	sub.w	r3, r3, r9
 810f96e:	455b      	cmp	r3, fp
 810f970:	dc31      	bgt.n	810f9d6 <_printf_float+0x36e>
 810f972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f974:	459a      	cmp	sl, r3
 810f976:	dc3a      	bgt.n	810f9ee <_printf_float+0x386>
 810f978:	6823      	ldr	r3, [r4, #0]
 810f97a:	07da      	lsls	r2, r3, #31
 810f97c:	d437      	bmi.n	810f9ee <_printf_float+0x386>
 810f97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f980:	ebaa 0903 	sub.w	r9, sl, r3
 810f984:	9b06      	ldr	r3, [sp, #24]
 810f986:	ebaa 0303 	sub.w	r3, sl, r3
 810f98a:	4599      	cmp	r9, r3
 810f98c:	bfa8      	it	ge
 810f98e:	4699      	movge	r9, r3
 810f990:	f1b9 0f00 	cmp.w	r9, #0
 810f994:	dc33      	bgt.n	810f9fe <_printf_float+0x396>
 810f996:	f04f 0800 	mov.w	r8, #0
 810f99a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f99e:	f104 0b1a 	add.w	fp, r4, #26
 810f9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f9a4:	ebaa 0303 	sub.w	r3, sl, r3
 810f9a8:	eba3 0309 	sub.w	r3, r3, r9
 810f9ac:	4543      	cmp	r3, r8
 810f9ae:	f77f af79 	ble.w	810f8a4 <_printf_float+0x23c>
 810f9b2:	2301      	movs	r3, #1
 810f9b4:	465a      	mov	r2, fp
 810f9b6:	4631      	mov	r1, r6
 810f9b8:	4628      	mov	r0, r5
 810f9ba:	47b8      	blx	r7
 810f9bc:	3001      	adds	r0, #1
 810f9be:	f43f aeae 	beq.w	810f71e <_printf_float+0xb6>
 810f9c2:	f108 0801 	add.w	r8, r8, #1
 810f9c6:	e7ec      	b.n	810f9a2 <_printf_float+0x33a>
 810f9c8:	4642      	mov	r2, r8
 810f9ca:	4631      	mov	r1, r6
 810f9cc:	4628      	mov	r0, r5
 810f9ce:	47b8      	blx	r7
 810f9d0:	3001      	adds	r0, #1
 810f9d2:	d1c2      	bne.n	810f95a <_printf_float+0x2f2>
 810f9d4:	e6a3      	b.n	810f71e <_printf_float+0xb6>
 810f9d6:	2301      	movs	r3, #1
 810f9d8:	4631      	mov	r1, r6
 810f9da:	4628      	mov	r0, r5
 810f9dc:	9206      	str	r2, [sp, #24]
 810f9de:	47b8      	blx	r7
 810f9e0:	3001      	adds	r0, #1
 810f9e2:	f43f ae9c 	beq.w	810f71e <_printf_float+0xb6>
 810f9e6:	9a06      	ldr	r2, [sp, #24]
 810f9e8:	f10b 0b01 	add.w	fp, fp, #1
 810f9ec:	e7bb      	b.n	810f966 <_printf_float+0x2fe>
 810f9ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f9f2:	4631      	mov	r1, r6
 810f9f4:	4628      	mov	r0, r5
 810f9f6:	47b8      	blx	r7
 810f9f8:	3001      	adds	r0, #1
 810f9fa:	d1c0      	bne.n	810f97e <_printf_float+0x316>
 810f9fc:	e68f      	b.n	810f71e <_printf_float+0xb6>
 810f9fe:	9a06      	ldr	r2, [sp, #24]
 810fa00:	464b      	mov	r3, r9
 810fa02:	4442      	add	r2, r8
 810fa04:	4631      	mov	r1, r6
 810fa06:	4628      	mov	r0, r5
 810fa08:	47b8      	blx	r7
 810fa0a:	3001      	adds	r0, #1
 810fa0c:	d1c3      	bne.n	810f996 <_printf_float+0x32e>
 810fa0e:	e686      	b.n	810f71e <_printf_float+0xb6>
 810fa10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810fa14:	f1ba 0f01 	cmp.w	sl, #1
 810fa18:	dc01      	bgt.n	810fa1e <_printf_float+0x3b6>
 810fa1a:	07db      	lsls	r3, r3, #31
 810fa1c:	d536      	bpl.n	810fa8c <_printf_float+0x424>
 810fa1e:	2301      	movs	r3, #1
 810fa20:	4642      	mov	r2, r8
 810fa22:	4631      	mov	r1, r6
 810fa24:	4628      	mov	r0, r5
 810fa26:	47b8      	blx	r7
 810fa28:	3001      	adds	r0, #1
 810fa2a:	f43f ae78 	beq.w	810f71e <_printf_float+0xb6>
 810fa2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810fa32:	4631      	mov	r1, r6
 810fa34:	4628      	mov	r0, r5
 810fa36:	47b8      	blx	r7
 810fa38:	3001      	adds	r0, #1
 810fa3a:	f43f ae70 	beq.w	810f71e <_printf_float+0xb6>
 810fa3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810fa42:	2200      	movs	r2, #0
 810fa44:	2300      	movs	r3, #0
 810fa46:	f10a 3aff 	add.w	sl, sl, #4294967295
 810fa4a:	f7f1 f8c5 	bl	8100bd8 <__aeabi_dcmpeq>
 810fa4e:	b9c0      	cbnz	r0, 810fa82 <_printf_float+0x41a>
 810fa50:	4653      	mov	r3, sl
 810fa52:	f108 0201 	add.w	r2, r8, #1
 810fa56:	4631      	mov	r1, r6
 810fa58:	4628      	mov	r0, r5
 810fa5a:	47b8      	blx	r7
 810fa5c:	3001      	adds	r0, #1
 810fa5e:	d10c      	bne.n	810fa7a <_printf_float+0x412>
 810fa60:	e65d      	b.n	810f71e <_printf_float+0xb6>
 810fa62:	2301      	movs	r3, #1
 810fa64:	465a      	mov	r2, fp
 810fa66:	4631      	mov	r1, r6
 810fa68:	4628      	mov	r0, r5
 810fa6a:	47b8      	blx	r7
 810fa6c:	3001      	adds	r0, #1
 810fa6e:	f43f ae56 	beq.w	810f71e <_printf_float+0xb6>
 810fa72:	f108 0801 	add.w	r8, r8, #1
 810fa76:	45d0      	cmp	r8, sl
 810fa78:	dbf3      	blt.n	810fa62 <_printf_float+0x3fa>
 810fa7a:	464b      	mov	r3, r9
 810fa7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810fa80:	e6df      	b.n	810f842 <_printf_float+0x1da>
 810fa82:	f04f 0800 	mov.w	r8, #0
 810fa86:	f104 0b1a 	add.w	fp, r4, #26
 810fa8a:	e7f4      	b.n	810fa76 <_printf_float+0x40e>
 810fa8c:	2301      	movs	r3, #1
 810fa8e:	4642      	mov	r2, r8
 810fa90:	e7e1      	b.n	810fa56 <_printf_float+0x3ee>
 810fa92:	2301      	movs	r3, #1
 810fa94:	464a      	mov	r2, r9
 810fa96:	4631      	mov	r1, r6
 810fa98:	4628      	mov	r0, r5
 810fa9a:	47b8      	blx	r7
 810fa9c:	3001      	adds	r0, #1
 810fa9e:	f43f ae3e 	beq.w	810f71e <_printf_float+0xb6>
 810faa2:	f108 0801 	add.w	r8, r8, #1
 810faa6:	68e3      	ldr	r3, [r4, #12]
 810faa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810faaa:	1a5b      	subs	r3, r3, r1
 810faac:	4543      	cmp	r3, r8
 810faae:	dcf0      	bgt.n	810fa92 <_printf_float+0x42a>
 810fab0:	e6fc      	b.n	810f8ac <_printf_float+0x244>
 810fab2:	f04f 0800 	mov.w	r8, #0
 810fab6:	f104 0919 	add.w	r9, r4, #25
 810faba:	e7f4      	b.n	810faa6 <_printf_float+0x43e>

0810fabc <_printf_common>:
 810fabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810fac0:	4616      	mov	r6, r2
 810fac2:	4698      	mov	r8, r3
 810fac4:	688a      	ldr	r2, [r1, #8]
 810fac6:	690b      	ldr	r3, [r1, #16]
 810fac8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810facc:	4293      	cmp	r3, r2
 810face:	bfb8      	it	lt
 810fad0:	4613      	movlt	r3, r2
 810fad2:	6033      	str	r3, [r6, #0]
 810fad4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810fad8:	4607      	mov	r7, r0
 810fada:	460c      	mov	r4, r1
 810fadc:	b10a      	cbz	r2, 810fae2 <_printf_common+0x26>
 810fade:	3301      	adds	r3, #1
 810fae0:	6033      	str	r3, [r6, #0]
 810fae2:	6823      	ldr	r3, [r4, #0]
 810fae4:	0699      	lsls	r1, r3, #26
 810fae6:	bf42      	ittt	mi
 810fae8:	6833      	ldrmi	r3, [r6, #0]
 810faea:	3302      	addmi	r3, #2
 810faec:	6033      	strmi	r3, [r6, #0]
 810faee:	6825      	ldr	r5, [r4, #0]
 810faf0:	f015 0506 	ands.w	r5, r5, #6
 810faf4:	d106      	bne.n	810fb04 <_printf_common+0x48>
 810faf6:	f104 0a19 	add.w	sl, r4, #25
 810fafa:	68e3      	ldr	r3, [r4, #12]
 810fafc:	6832      	ldr	r2, [r6, #0]
 810fafe:	1a9b      	subs	r3, r3, r2
 810fb00:	42ab      	cmp	r3, r5
 810fb02:	dc26      	bgt.n	810fb52 <_printf_common+0x96>
 810fb04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810fb08:	6822      	ldr	r2, [r4, #0]
 810fb0a:	3b00      	subs	r3, #0
 810fb0c:	bf18      	it	ne
 810fb0e:	2301      	movne	r3, #1
 810fb10:	0692      	lsls	r2, r2, #26
 810fb12:	d42b      	bmi.n	810fb6c <_printf_common+0xb0>
 810fb14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810fb18:	4641      	mov	r1, r8
 810fb1a:	4638      	mov	r0, r7
 810fb1c:	47c8      	blx	r9
 810fb1e:	3001      	adds	r0, #1
 810fb20:	d01e      	beq.n	810fb60 <_printf_common+0xa4>
 810fb22:	6823      	ldr	r3, [r4, #0]
 810fb24:	6922      	ldr	r2, [r4, #16]
 810fb26:	f003 0306 	and.w	r3, r3, #6
 810fb2a:	2b04      	cmp	r3, #4
 810fb2c:	bf02      	ittt	eq
 810fb2e:	68e5      	ldreq	r5, [r4, #12]
 810fb30:	6833      	ldreq	r3, [r6, #0]
 810fb32:	1aed      	subeq	r5, r5, r3
 810fb34:	68a3      	ldr	r3, [r4, #8]
 810fb36:	bf0c      	ite	eq
 810fb38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810fb3c:	2500      	movne	r5, #0
 810fb3e:	4293      	cmp	r3, r2
 810fb40:	bfc4      	itt	gt
 810fb42:	1a9b      	subgt	r3, r3, r2
 810fb44:	18ed      	addgt	r5, r5, r3
 810fb46:	2600      	movs	r6, #0
 810fb48:	341a      	adds	r4, #26
 810fb4a:	42b5      	cmp	r5, r6
 810fb4c:	d11a      	bne.n	810fb84 <_printf_common+0xc8>
 810fb4e:	2000      	movs	r0, #0
 810fb50:	e008      	b.n	810fb64 <_printf_common+0xa8>
 810fb52:	2301      	movs	r3, #1
 810fb54:	4652      	mov	r2, sl
 810fb56:	4641      	mov	r1, r8
 810fb58:	4638      	mov	r0, r7
 810fb5a:	47c8      	blx	r9
 810fb5c:	3001      	adds	r0, #1
 810fb5e:	d103      	bne.n	810fb68 <_printf_common+0xac>
 810fb60:	f04f 30ff 	mov.w	r0, #4294967295
 810fb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fb68:	3501      	adds	r5, #1
 810fb6a:	e7c6      	b.n	810fafa <_printf_common+0x3e>
 810fb6c:	18e1      	adds	r1, r4, r3
 810fb6e:	1c5a      	adds	r2, r3, #1
 810fb70:	2030      	movs	r0, #48	@ 0x30
 810fb72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810fb76:	4422      	add	r2, r4
 810fb78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810fb7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810fb80:	3302      	adds	r3, #2
 810fb82:	e7c7      	b.n	810fb14 <_printf_common+0x58>
 810fb84:	2301      	movs	r3, #1
 810fb86:	4622      	mov	r2, r4
 810fb88:	4641      	mov	r1, r8
 810fb8a:	4638      	mov	r0, r7
 810fb8c:	47c8      	blx	r9
 810fb8e:	3001      	adds	r0, #1
 810fb90:	d0e6      	beq.n	810fb60 <_printf_common+0xa4>
 810fb92:	3601      	adds	r6, #1
 810fb94:	e7d9      	b.n	810fb4a <_printf_common+0x8e>
	...

0810fb98 <_printf_i>:
 810fb98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810fb9c:	7e0f      	ldrb	r7, [r1, #24]
 810fb9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810fba0:	2f78      	cmp	r7, #120	@ 0x78
 810fba2:	4691      	mov	r9, r2
 810fba4:	4680      	mov	r8, r0
 810fba6:	460c      	mov	r4, r1
 810fba8:	469a      	mov	sl, r3
 810fbaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810fbae:	d807      	bhi.n	810fbc0 <_printf_i+0x28>
 810fbb0:	2f62      	cmp	r7, #98	@ 0x62
 810fbb2:	d80a      	bhi.n	810fbca <_printf_i+0x32>
 810fbb4:	2f00      	cmp	r7, #0
 810fbb6:	f000 80d2 	beq.w	810fd5e <_printf_i+0x1c6>
 810fbba:	2f58      	cmp	r7, #88	@ 0x58
 810fbbc:	f000 80b9 	beq.w	810fd32 <_printf_i+0x19a>
 810fbc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810fbc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810fbc8:	e03a      	b.n	810fc40 <_printf_i+0xa8>
 810fbca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810fbce:	2b15      	cmp	r3, #21
 810fbd0:	d8f6      	bhi.n	810fbc0 <_printf_i+0x28>
 810fbd2:	a101      	add	r1, pc, #4	@ (adr r1, 810fbd8 <_printf_i+0x40>)
 810fbd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810fbd8:	0810fc31 	.word	0x0810fc31
 810fbdc:	0810fc45 	.word	0x0810fc45
 810fbe0:	0810fbc1 	.word	0x0810fbc1
 810fbe4:	0810fbc1 	.word	0x0810fbc1
 810fbe8:	0810fbc1 	.word	0x0810fbc1
 810fbec:	0810fbc1 	.word	0x0810fbc1
 810fbf0:	0810fc45 	.word	0x0810fc45
 810fbf4:	0810fbc1 	.word	0x0810fbc1
 810fbf8:	0810fbc1 	.word	0x0810fbc1
 810fbfc:	0810fbc1 	.word	0x0810fbc1
 810fc00:	0810fbc1 	.word	0x0810fbc1
 810fc04:	0810fd45 	.word	0x0810fd45
 810fc08:	0810fc6f 	.word	0x0810fc6f
 810fc0c:	0810fcff 	.word	0x0810fcff
 810fc10:	0810fbc1 	.word	0x0810fbc1
 810fc14:	0810fbc1 	.word	0x0810fbc1
 810fc18:	0810fd67 	.word	0x0810fd67
 810fc1c:	0810fbc1 	.word	0x0810fbc1
 810fc20:	0810fc6f 	.word	0x0810fc6f
 810fc24:	0810fbc1 	.word	0x0810fbc1
 810fc28:	0810fbc1 	.word	0x0810fbc1
 810fc2c:	0810fd07 	.word	0x0810fd07
 810fc30:	6833      	ldr	r3, [r6, #0]
 810fc32:	1d1a      	adds	r2, r3, #4
 810fc34:	681b      	ldr	r3, [r3, #0]
 810fc36:	6032      	str	r2, [r6, #0]
 810fc38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810fc3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810fc40:	2301      	movs	r3, #1
 810fc42:	e09d      	b.n	810fd80 <_printf_i+0x1e8>
 810fc44:	6833      	ldr	r3, [r6, #0]
 810fc46:	6820      	ldr	r0, [r4, #0]
 810fc48:	1d19      	adds	r1, r3, #4
 810fc4a:	6031      	str	r1, [r6, #0]
 810fc4c:	0606      	lsls	r6, r0, #24
 810fc4e:	d501      	bpl.n	810fc54 <_printf_i+0xbc>
 810fc50:	681d      	ldr	r5, [r3, #0]
 810fc52:	e003      	b.n	810fc5c <_printf_i+0xc4>
 810fc54:	0645      	lsls	r5, r0, #25
 810fc56:	d5fb      	bpl.n	810fc50 <_printf_i+0xb8>
 810fc58:	f9b3 5000 	ldrsh.w	r5, [r3]
 810fc5c:	2d00      	cmp	r5, #0
 810fc5e:	da03      	bge.n	810fc68 <_printf_i+0xd0>
 810fc60:	232d      	movs	r3, #45	@ 0x2d
 810fc62:	426d      	negs	r5, r5
 810fc64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810fc68:	4859      	ldr	r0, [pc, #356]	@ (810fdd0 <_printf_i+0x238>)
 810fc6a:	230a      	movs	r3, #10
 810fc6c:	e011      	b.n	810fc92 <_printf_i+0xfa>
 810fc6e:	6821      	ldr	r1, [r4, #0]
 810fc70:	6833      	ldr	r3, [r6, #0]
 810fc72:	0608      	lsls	r0, r1, #24
 810fc74:	f853 5b04 	ldr.w	r5, [r3], #4
 810fc78:	d402      	bmi.n	810fc80 <_printf_i+0xe8>
 810fc7a:	0649      	lsls	r1, r1, #25
 810fc7c:	bf48      	it	mi
 810fc7e:	b2ad      	uxthmi	r5, r5
 810fc80:	2f6f      	cmp	r7, #111	@ 0x6f
 810fc82:	4853      	ldr	r0, [pc, #332]	@ (810fdd0 <_printf_i+0x238>)
 810fc84:	6033      	str	r3, [r6, #0]
 810fc86:	bf14      	ite	ne
 810fc88:	230a      	movne	r3, #10
 810fc8a:	2308      	moveq	r3, #8
 810fc8c:	2100      	movs	r1, #0
 810fc8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810fc92:	6866      	ldr	r6, [r4, #4]
 810fc94:	60a6      	str	r6, [r4, #8]
 810fc96:	2e00      	cmp	r6, #0
 810fc98:	bfa2      	ittt	ge
 810fc9a:	6821      	ldrge	r1, [r4, #0]
 810fc9c:	f021 0104 	bicge.w	r1, r1, #4
 810fca0:	6021      	strge	r1, [r4, #0]
 810fca2:	b90d      	cbnz	r5, 810fca8 <_printf_i+0x110>
 810fca4:	2e00      	cmp	r6, #0
 810fca6:	d04b      	beq.n	810fd40 <_printf_i+0x1a8>
 810fca8:	4616      	mov	r6, r2
 810fcaa:	fbb5 f1f3 	udiv	r1, r5, r3
 810fcae:	fb03 5711 	mls	r7, r3, r1, r5
 810fcb2:	5dc7      	ldrb	r7, [r0, r7]
 810fcb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810fcb8:	462f      	mov	r7, r5
 810fcba:	42bb      	cmp	r3, r7
 810fcbc:	460d      	mov	r5, r1
 810fcbe:	d9f4      	bls.n	810fcaa <_printf_i+0x112>
 810fcc0:	2b08      	cmp	r3, #8
 810fcc2:	d10b      	bne.n	810fcdc <_printf_i+0x144>
 810fcc4:	6823      	ldr	r3, [r4, #0]
 810fcc6:	07df      	lsls	r7, r3, #31
 810fcc8:	d508      	bpl.n	810fcdc <_printf_i+0x144>
 810fcca:	6923      	ldr	r3, [r4, #16]
 810fccc:	6861      	ldr	r1, [r4, #4]
 810fcce:	4299      	cmp	r1, r3
 810fcd0:	bfde      	ittt	le
 810fcd2:	2330      	movle	r3, #48	@ 0x30
 810fcd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 810fcd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 810fcdc:	1b92      	subs	r2, r2, r6
 810fcde:	6122      	str	r2, [r4, #16]
 810fce0:	f8cd a000 	str.w	sl, [sp]
 810fce4:	464b      	mov	r3, r9
 810fce6:	aa03      	add	r2, sp, #12
 810fce8:	4621      	mov	r1, r4
 810fcea:	4640      	mov	r0, r8
 810fcec:	f7ff fee6 	bl	810fabc <_printf_common>
 810fcf0:	3001      	adds	r0, #1
 810fcf2:	d14a      	bne.n	810fd8a <_printf_i+0x1f2>
 810fcf4:	f04f 30ff 	mov.w	r0, #4294967295
 810fcf8:	b004      	add	sp, #16
 810fcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fcfe:	6823      	ldr	r3, [r4, #0]
 810fd00:	f043 0320 	orr.w	r3, r3, #32
 810fd04:	6023      	str	r3, [r4, #0]
 810fd06:	4833      	ldr	r0, [pc, #204]	@ (810fdd4 <_printf_i+0x23c>)
 810fd08:	2778      	movs	r7, #120	@ 0x78
 810fd0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810fd0e:	6823      	ldr	r3, [r4, #0]
 810fd10:	6831      	ldr	r1, [r6, #0]
 810fd12:	061f      	lsls	r7, r3, #24
 810fd14:	f851 5b04 	ldr.w	r5, [r1], #4
 810fd18:	d402      	bmi.n	810fd20 <_printf_i+0x188>
 810fd1a:	065f      	lsls	r7, r3, #25
 810fd1c:	bf48      	it	mi
 810fd1e:	b2ad      	uxthmi	r5, r5
 810fd20:	6031      	str	r1, [r6, #0]
 810fd22:	07d9      	lsls	r1, r3, #31
 810fd24:	bf44      	itt	mi
 810fd26:	f043 0320 	orrmi.w	r3, r3, #32
 810fd2a:	6023      	strmi	r3, [r4, #0]
 810fd2c:	b11d      	cbz	r5, 810fd36 <_printf_i+0x19e>
 810fd2e:	2310      	movs	r3, #16
 810fd30:	e7ac      	b.n	810fc8c <_printf_i+0xf4>
 810fd32:	4827      	ldr	r0, [pc, #156]	@ (810fdd0 <_printf_i+0x238>)
 810fd34:	e7e9      	b.n	810fd0a <_printf_i+0x172>
 810fd36:	6823      	ldr	r3, [r4, #0]
 810fd38:	f023 0320 	bic.w	r3, r3, #32
 810fd3c:	6023      	str	r3, [r4, #0]
 810fd3e:	e7f6      	b.n	810fd2e <_printf_i+0x196>
 810fd40:	4616      	mov	r6, r2
 810fd42:	e7bd      	b.n	810fcc0 <_printf_i+0x128>
 810fd44:	6833      	ldr	r3, [r6, #0]
 810fd46:	6825      	ldr	r5, [r4, #0]
 810fd48:	6961      	ldr	r1, [r4, #20]
 810fd4a:	1d18      	adds	r0, r3, #4
 810fd4c:	6030      	str	r0, [r6, #0]
 810fd4e:	062e      	lsls	r6, r5, #24
 810fd50:	681b      	ldr	r3, [r3, #0]
 810fd52:	d501      	bpl.n	810fd58 <_printf_i+0x1c0>
 810fd54:	6019      	str	r1, [r3, #0]
 810fd56:	e002      	b.n	810fd5e <_printf_i+0x1c6>
 810fd58:	0668      	lsls	r0, r5, #25
 810fd5a:	d5fb      	bpl.n	810fd54 <_printf_i+0x1bc>
 810fd5c:	8019      	strh	r1, [r3, #0]
 810fd5e:	2300      	movs	r3, #0
 810fd60:	6123      	str	r3, [r4, #16]
 810fd62:	4616      	mov	r6, r2
 810fd64:	e7bc      	b.n	810fce0 <_printf_i+0x148>
 810fd66:	6833      	ldr	r3, [r6, #0]
 810fd68:	1d1a      	adds	r2, r3, #4
 810fd6a:	6032      	str	r2, [r6, #0]
 810fd6c:	681e      	ldr	r6, [r3, #0]
 810fd6e:	6862      	ldr	r2, [r4, #4]
 810fd70:	2100      	movs	r1, #0
 810fd72:	4630      	mov	r0, r6
 810fd74:	f7f0 fab4 	bl	81002e0 <memchr>
 810fd78:	b108      	cbz	r0, 810fd7e <_printf_i+0x1e6>
 810fd7a:	1b80      	subs	r0, r0, r6
 810fd7c:	6060      	str	r0, [r4, #4]
 810fd7e:	6863      	ldr	r3, [r4, #4]
 810fd80:	6123      	str	r3, [r4, #16]
 810fd82:	2300      	movs	r3, #0
 810fd84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810fd88:	e7aa      	b.n	810fce0 <_printf_i+0x148>
 810fd8a:	6923      	ldr	r3, [r4, #16]
 810fd8c:	4632      	mov	r2, r6
 810fd8e:	4649      	mov	r1, r9
 810fd90:	4640      	mov	r0, r8
 810fd92:	47d0      	blx	sl
 810fd94:	3001      	adds	r0, #1
 810fd96:	d0ad      	beq.n	810fcf4 <_printf_i+0x15c>
 810fd98:	6823      	ldr	r3, [r4, #0]
 810fd9a:	079b      	lsls	r3, r3, #30
 810fd9c:	d413      	bmi.n	810fdc6 <_printf_i+0x22e>
 810fd9e:	68e0      	ldr	r0, [r4, #12]
 810fda0:	9b03      	ldr	r3, [sp, #12]
 810fda2:	4298      	cmp	r0, r3
 810fda4:	bfb8      	it	lt
 810fda6:	4618      	movlt	r0, r3
 810fda8:	e7a6      	b.n	810fcf8 <_printf_i+0x160>
 810fdaa:	2301      	movs	r3, #1
 810fdac:	4632      	mov	r2, r6
 810fdae:	4649      	mov	r1, r9
 810fdb0:	4640      	mov	r0, r8
 810fdb2:	47d0      	blx	sl
 810fdb4:	3001      	adds	r0, #1
 810fdb6:	d09d      	beq.n	810fcf4 <_printf_i+0x15c>
 810fdb8:	3501      	adds	r5, #1
 810fdba:	68e3      	ldr	r3, [r4, #12]
 810fdbc:	9903      	ldr	r1, [sp, #12]
 810fdbe:	1a5b      	subs	r3, r3, r1
 810fdc0:	42ab      	cmp	r3, r5
 810fdc2:	dcf2      	bgt.n	810fdaa <_printf_i+0x212>
 810fdc4:	e7eb      	b.n	810fd9e <_printf_i+0x206>
 810fdc6:	2500      	movs	r5, #0
 810fdc8:	f104 0619 	add.w	r6, r4, #25
 810fdcc:	e7f5      	b.n	810fdba <_printf_i+0x222>
 810fdce:	bf00      	nop
 810fdd0:	08113d81 	.word	0x08113d81
 810fdd4:	08113d92 	.word	0x08113d92

0810fdd8 <_scanf_float>:
 810fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810fddc:	b087      	sub	sp, #28
 810fdde:	4617      	mov	r7, r2
 810fde0:	9303      	str	r3, [sp, #12]
 810fde2:	688b      	ldr	r3, [r1, #8]
 810fde4:	1e5a      	subs	r2, r3, #1
 810fde6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810fdea:	bf81      	itttt	hi
 810fdec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810fdf0:	eb03 0b05 	addhi.w	fp, r3, r5
 810fdf4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810fdf8:	608b      	strhi	r3, [r1, #8]
 810fdfa:	680b      	ldr	r3, [r1, #0]
 810fdfc:	460a      	mov	r2, r1
 810fdfe:	f04f 0500 	mov.w	r5, #0
 810fe02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810fe06:	f842 3b1c 	str.w	r3, [r2], #28
 810fe0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810fe0e:	4680      	mov	r8, r0
 810fe10:	460c      	mov	r4, r1
 810fe12:	bf98      	it	ls
 810fe14:	f04f 0b00 	movls.w	fp, #0
 810fe18:	9201      	str	r2, [sp, #4]
 810fe1a:	4616      	mov	r6, r2
 810fe1c:	46aa      	mov	sl, r5
 810fe1e:	46a9      	mov	r9, r5
 810fe20:	9502      	str	r5, [sp, #8]
 810fe22:	68a2      	ldr	r2, [r4, #8]
 810fe24:	b152      	cbz	r2, 810fe3c <_scanf_float+0x64>
 810fe26:	683b      	ldr	r3, [r7, #0]
 810fe28:	781b      	ldrb	r3, [r3, #0]
 810fe2a:	2b4e      	cmp	r3, #78	@ 0x4e
 810fe2c:	d864      	bhi.n	810fef8 <_scanf_float+0x120>
 810fe2e:	2b40      	cmp	r3, #64	@ 0x40
 810fe30:	d83c      	bhi.n	810feac <_scanf_float+0xd4>
 810fe32:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810fe36:	b2c8      	uxtb	r0, r1
 810fe38:	280e      	cmp	r0, #14
 810fe3a:	d93a      	bls.n	810feb2 <_scanf_float+0xda>
 810fe3c:	f1b9 0f00 	cmp.w	r9, #0
 810fe40:	d003      	beq.n	810fe4a <_scanf_float+0x72>
 810fe42:	6823      	ldr	r3, [r4, #0]
 810fe44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810fe48:	6023      	str	r3, [r4, #0]
 810fe4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810fe4e:	f1ba 0f01 	cmp.w	sl, #1
 810fe52:	f200 8117 	bhi.w	8110084 <_scanf_float+0x2ac>
 810fe56:	9b01      	ldr	r3, [sp, #4]
 810fe58:	429e      	cmp	r6, r3
 810fe5a:	f200 8108 	bhi.w	811006e <_scanf_float+0x296>
 810fe5e:	2001      	movs	r0, #1
 810fe60:	b007      	add	sp, #28
 810fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fe66:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810fe6a:	2a0d      	cmp	r2, #13
 810fe6c:	d8e6      	bhi.n	810fe3c <_scanf_float+0x64>
 810fe6e:	a101      	add	r1, pc, #4	@ (adr r1, 810fe74 <_scanf_float+0x9c>)
 810fe70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810fe74:	0810ffbb 	.word	0x0810ffbb
 810fe78:	0810fe3d 	.word	0x0810fe3d
 810fe7c:	0810fe3d 	.word	0x0810fe3d
 810fe80:	0810fe3d 	.word	0x0810fe3d
 810fe84:	0811001b 	.word	0x0811001b
 810fe88:	0810fff3 	.word	0x0810fff3
 810fe8c:	0810fe3d 	.word	0x0810fe3d
 810fe90:	0810fe3d 	.word	0x0810fe3d
 810fe94:	0810ffc9 	.word	0x0810ffc9
 810fe98:	0810fe3d 	.word	0x0810fe3d
 810fe9c:	0810fe3d 	.word	0x0810fe3d
 810fea0:	0810fe3d 	.word	0x0810fe3d
 810fea4:	0810fe3d 	.word	0x0810fe3d
 810fea8:	0810ff81 	.word	0x0810ff81
 810feac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810feb0:	e7db      	b.n	810fe6a <_scanf_float+0x92>
 810feb2:	290e      	cmp	r1, #14
 810feb4:	d8c2      	bhi.n	810fe3c <_scanf_float+0x64>
 810feb6:	a001      	add	r0, pc, #4	@ (adr r0, 810febc <_scanf_float+0xe4>)
 810feb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810febc:	0810ff71 	.word	0x0810ff71
 810fec0:	0810fe3d 	.word	0x0810fe3d
 810fec4:	0810ff71 	.word	0x0810ff71
 810fec8:	08110007 	.word	0x08110007
 810fecc:	0810fe3d 	.word	0x0810fe3d
 810fed0:	0810ff19 	.word	0x0810ff19
 810fed4:	0810ff57 	.word	0x0810ff57
 810fed8:	0810ff57 	.word	0x0810ff57
 810fedc:	0810ff57 	.word	0x0810ff57
 810fee0:	0810ff57 	.word	0x0810ff57
 810fee4:	0810ff57 	.word	0x0810ff57
 810fee8:	0810ff57 	.word	0x0810ff57
 810feec:	0810ff57 	.word	0x0810ff57
 810fef0:	0810ff57 	.word	0x0810ff57
 810fef4:	0810ff57 	.word	0x0810ff57
 810fef8:	2b6e      	cmp	r3, #110	@ 0x6e
 810fefa:	d809      	bhi.n	810ff10 <_scanf_float+0x138>
 810fefc:	2b60      	cmp	r3, #96	@ 0x60
 810fefe:	d8b2      	bhi.n	810fe66 <_scanf_float+0x8e>
 810ff00:	2b54      	cmp	r3, #84	@ 0x54
 810ff02:	d07b      	beq.n	810fffc <_scanf_float+0x224>
 810ff04:	2b59      	cmp	r3, #89	@ 0x59
 810ff06:	d199      	bne.n	810fe3c <_scanf_float+0x64>
 810ff08:	2d07      	cmp	r5, #7
 810ff0a:	d197      	bne.n	810fe3c <_scanf_float+0x64>
 810ff0c:	2508      	movs	r5, #8
 810ff0e:	e02c      	b.n	810ff6a <_scanf_float+0x192>
 810ff10:	2b74      	cmp	r3, #116	@ 0x74
 810ff12:	d073      	beq.n	810fffc <_scanf_float+0x224>
 810ff14:	2b79      	cmp	r3, #121	@ 0x79
 810ff16:	e7f6      	b.n	810ff06 <_scanf_float+0x12e>
 810ff18:	6821      	ldr	r1, [r4, #0]
 810ff1a:	05c8      	lsls	r0, r1, #23
 810ff1c:	d51b      	bpl.n	810ff56 <_scanf_float+0x17e>
 810ff1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810ff22:	6021      	str	r1, [r4, #0]
 810ff24:	f109 0901 	add.w	r9, r9, #1
 810ff28:	f1bb 0f00 	cmp.w	fp, #0
 810ff2c:	d003      	beq.n	810ff36 <_scanf_float+0x15e>
 810ff2e:	3201      	adds	r2, #1
 810ff30:	f10b 3bff 	add.w	fp, fp, #4294967295
 810ff34:	60a2      	str	r2, [r4, #8]
 810ff36:	68a3      	ldr	r3, [r4, #8]
 810ff38:	3b01      	subs	r3, #1
 810ff3a:	60a3      	str	r3, [r4, #8]
 810ff3c:	6923      	ldr	r3, [r4, #16]
 810ff3e:	3301      	adds	r3, #1
 810ff40:	6123      	str	r3, [r4, #16]
 810ff42:	687b      	ldr	r3, [r7, #4]
 810ff44:	3b01      	subs	r3, #1
 810ff46:	2b00      	cmp	r3, #0
 810ff48:	607b      	str	r3, [r7, #4]
 810ff4a:	f340 8087 	ble.w	811005c <_scanf_float+0x284>
 810ff4e:	683b      	ldr	r3, [r7, #0]
 810ff50:	3301      	adds	r3, #1
 810ff52:	603b      	str	r3, [r7, #0]
 810ff54:	e765      	b.n	810fe22 <_scanf_float+0x4a>
 810ff56:	eb1a 0105 	adds.w	r1, sl, r5
 810ff5a:	f47f af6f 	bne.w	810fe3c <_scanf_float+0x64>
 810ff5e:	6822      	ldr	r2, [r4, #0]
 810ff60:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810ff64:	6022      	str	r2, [r4, #0]
 810ff66:	460d      	mov	r5, r1
 810ff68:	468a      	mov	sl, r1
 810ff6a:	f806 3b01 	strb.w	r3, [r6], #1
 810ff6e:	e7e2      	b.n	810ff36 <_scanf_float+0x15e>
 810ff70:	6822      	ldr	r2, [r4, #0]
 810ff72:	0610      	lsls	r0, r2, #24
 810ff74:	f57f af62 	bpl.w	810fe3c <_scanf_float+0x64>
 810ff78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810ff7c:	6022      	str	r2, [r4, #0]
 810ff7e:	e7f4      	b.n	810ff6a <_scanf_float+0x192>
 810ff80:	f1ba 0f00 	cmp.w	sl, #0
 810ff84:	d10e      	bne.n	810ffa4 <_scanf_float+0x1cc>
 810ff86:	f1b9 0f00 	cmp.w	r9, #0
 810ff8a:	d10e      	bne.n	810ffaa <_scanf_float+0x1d2>
 810ff8c:	6822      	ldr	r2, [r4, #0]
 810ff8e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810ff92:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810ff96:	d108      	bne.n	810ffaa <_scanf_float+0x1d2>
 810ff98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810ff9c:	6022      	str	r2, [r4, #0]
 810ff9e:	f04f 0a01 	mov.w	sl, #1
 810ffa2:	e7e2      	b.n	810ff6a <_scanf_float+0x192>
 810ffa4:	f1ba 0f02 	cmp.w	sl, #2
 810ffa8:	d055      	beq.n	8110056 <_scanf_float+0x27e>
 810ffaa:	2d01      	cmp	r5, #1
 810ffac:	d002      	beq.n	810ffb4 <_scanf_float+0x1dc>
 810ffae:	2d04      	cmp	r5, #4
 810ffb0:	f47f af44 	bne.w	810fe3c <_scanf_float+0x64>
 810ffb4:	3501      	adds	r5, #1
 810ffb6:	b2ed      	uxtb	r5, r5
 810ffb8:	e7d7      	b.n	810ff6a <_scanf_float+0x192>
 810ffba:	f1ba 0f01 	cmp.w	sl, #1
 810ffbe:	f47f af3d 	bne.w	810fe3c <_scanf_float+0x64>
 810ffc2:	f04f 0a02 	mov.w	sl, #2
 810ffc6:	e7d0      	b.n	810ff6a <_scanf_float+0x192>
 810ffc8:	b97d      	cbnz	r5, 810ffea <_scanf_float+0x212>
 810ffca:	f1b9 0f00 	cmp.w	r9, #0
 810ffce:	f47f af38 	bne.w	810fe42 <_scanf_float+0x6a>
 810ffd2:	6822      	ldr	r2, [r4, #0]
 810ffd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810ffd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810ffdc:	f040 8108 	bne.w	81101f0 <_scanf_float+0x418>
 810ffe0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810ffe4:	6022      	str	r2, [r4, #0]
 810ffe6:	2501      	movs	r5, #1
 810ffe8:	e7bf      	b.n	810ff6a <_scanf_float+0x192>
 810ffea:	2d03      	cmp	r5, #3
 810ffec:	d0e2      	beq.n	810ffb4 <_scanf_float+0x1dc>
 810ffee:	2d05      	cmp	r5, #5
 810fff0:	e7de      	b.n	810ffb0 <_scanf_float+0x1d8>
 810fff2:	2d02      	cmp	r5, #2
 810fff4:	f47f af22 	bne.w	810fe3c <_scanf_float+0x64>
 810fff8:	2503      	movs	r5, #3
 810fffa:	e7b6      	b.n	810ff6a <_scanf_float+0x192>
 810fffc:	2d06      	cmp	r5, #6
 810fffe:	f47f af1d 	bne.w	810fe3c <_scanf_float+0x64>
 8110002:	2507      	movs	r5, #7
 8110004:	e7b1      	b.n	810ff6a <_scanf_float+0x192>
 8110006:	6822      	ldr	r2, [r4, #0]
 8110008:	0591      	lsls	r1, r2, #22
 811000a:	f57f af17 	bpl.w	810fe3c <_scanf_float+0x64>
 811000e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8110012:	6022      	str	r2, [r4, #0]
 8110014:	f8cd 9008 	str.w	r9, [sp, #8]
 8110018:	e7a7      	b.n	810ff6a <_scanf_float+0x192>
 811001a:	6822      	ldr	r2, [r4, #0]
 811001c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8110020:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8110024:	d006      	beq.n	8110034 <_scanf_float+0x25c>
 8110026:	0550      	lsls	r0, r2, #21
 8110028:	f57f af08 	bpl.w	810fe3c <_scanf_float+0x64>
 811002c:	f1b9 0f00 	cmp.w	r9, #0
 8110030:	f000 80de 	beq.w	81101f0 <_scanf_float+0x418>
 8110034:	0591      	lsls	r1, r2, #22
 8110036:	bf58      	it	pl
 8110038:	9902      	ldrpl	r1, [sp, #8]
 811003a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 811003e:	bf58      	it	pl
 8110040:	eba9 0101 	subpl.w	r1, r9, r1
 8110044:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8110048:	bf58      	it	pl
 811004a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 811004e:	6022      	str	r2, [r4, #0]
 8110050:	f04f 0900 	mov.w	r9, #0
 8110054:	e789      	b.n	810ff6a <_scanf_float+0x192>
 8110056:	f04f 0a03 	mov.w	sl, #3
 811005a:	e786      	b.n	810ff6a <_scanf_float+0x192>
 811005c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8110060:	4639      	mov	r1, r7
 8110062:	4640      	mov	r0, r8
 8110064:	4798      	blx	r3
 8110066:	2800      	cmp	r0, #0
 8110068:	f43f aedb 	beq.w	810fe22 <_scanf_float+0x4a>
 811006c:	e6e6      	b.n	810fe3c <_scanf_float+0x64>
 811006e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8110072:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8110076:	463a      	mov	r2, r7
 8110078:	4640      	mov	r0, r8
 811007a:	4798      	blx	r3
 811007c:	6923      	ldr	r3, [r4, #16]
 811007e:	3b01      	subs	r3, #1
 8110080:	6123      	str	r3, [r4, #16]
 8110082:	e6e8      	b.n	810fe56 <_scanf_float+0x7e>
 8110084:	1e6b      	subs	r3, r5, #1
 8110086:	2b06      	cmp	r3, #6
 8110088:	d824      	bhi.n	81100d4 <_scanf_float+0x2fc>
 811008a:	2d02      	cmp	r5, #2
 811008c:	d836      	bhi.n	81100fc <_scanf_float+0x324>
 811008e:	9b01      	ldr	r3, [sp, #4]
 8110090:	429e      	cmp	r6, r3
 8110092:	f67f aee4 	bls.w	810fe5e <_scanf_float+0x86>
 8110096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811009a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 811009e:	463a      	mov	r2, r7
 81100a0:	4640      	mov	r0, r8
 81100a2:	4798      	blx	r3
 81100a4:	6923      	ldr	r3, [r4, #16]
 81100a6:	3b01      	subs	r3, #1
 81100a8:	6123      	str	r3, [r4, #16]
 81100aa:	e7f0      	b.n	811008e <_scanf_float+0x2b6>
 81100ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81100b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 81100b4:	463a      	mov	r2, r7
 81100b6:	4640      	mov	r0, r8
 81100b8:	4798      	blx	r3
 81100ba:	6923      	ldr	r3, [r4, #16]
 81100bc:	3b01      	subs	r3, #1
 81100be:	6123      	str	r3, [r4, #16]
 81100c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 81100c4:	fa5f fa8a 	uxtb.w	sl, sl
 81100c8:	f1ba 0f02 	cmp.w	sl, #2
 81100cc:	d1ee      	bne.n	81100ac <_scanf_float+0x2d4>
 81100ce:	3d03      	subs	r5, #3
 81100d0:	b2ed      	uxtb	r5, r5
 81100d2:	1b76      	subs	r6, r6, r5
 81100d4:	6823      	ldr	r3, [r4, #0]
 81100d6:	05da      	lsls	r2, r3, #23
 81100d8:	d530      	bpl.n	811013c <_scanf_float+0x364>
 81100da:	055b      	lsls	r3, r3, #21
 81100dc:	d511      	bpl.n	8110102 <_scanf_float+0x32a>
 81100de:	9b01      	ldr	r3, [sp, #4]
 81100e0:	429e      	cmp	r6, r3
 81100e2:	f67f aebc 	bls.w	810fe5e <_scanf_float+0x86>
 81100e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81100ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81100ee:	463a      	mov	r2, r7
 81100f0:	4640      	mov	r0, r8
 81100f2:	4798      	blx	r3
 81100f4:	6923      	ldr	r3, [r4, #16]
 81100f6:	3b01      	subs	r3, #1
 81100f8:	6123      	str	r3, [r4, #16]
 81100fa:	e7f0      	b.n	81100de <_scanf_float+0x306>
 81100fc:	46aa      	mov	sl, r5
 81100fe:	46b3      	mov	fp, r6
 8110100:	e7de      	b.n	81100c0 <_scanf_float+0x2e8>
 8110102:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8110106:	6923      	ldr	r3, [r4, #16]
 8110108:	2965      	cmp	r1, #101	@ 0x65
 811010a:	f103 33ff 	add.w	r3, r3, #4294967295
 811010e:	f106 35ff 	add.w	r5, r6, #4294967295
 8110112:	6123      	str	r3, [r4, #16]
 8110114:	d00c      	beq.n	8110130 <_scanf_float+0x358>
 8110116:	2945      	cmp	r1, #69	@ 0x45
 8110118:	d00a      	beq.n	8110130 <_scanf_float+0x358>
 811011a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811011e:	463a      	mov	r2, r7
 8110120:	4640      	mov	r0, r8
 8110122:	4798      	blx	r3
 8110124:	6923      	ldr	r3, [r4, #16]
 8110126:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 811012a:	3b01      	subs	r3, #1
 811012c:	1eb5      	subs	r5, r6, #2
 811012e:	6123      	str	r3, [r4, #16]
 8110130:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8110134:	463a      	mov	r2, r7
 8110136:	4640      	mov	r0, r8
 8110138:	4798      	blx	r3
 811013a:	462e      	mov	r6, r5
 811013c:	6822      	ldr	r2, [r4, #0]
 811013e:	f012 0210 	ands.w	r2, r2, #16
 8110142:	d001      	beq.n	8110148 <_scanf_float+0x370>
 8110144:	2000      	movs	r0, #0
 8110146:	e68b      	b.n	810fe60 <_scanf_float+0x88>
 8110148:	7032      	strb	r2, [r6, #0]
 811014a:	6823      	ldr	r3, [r4, #0]
 811014c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8110150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8110154:	d11c      	bne.n	8110190 <_scanf_float+0x3b8>
 8110156:	9b02      	ldr	r3, [sp, #8]
 8110158:	454b      	cmp	r3, r9
 811015a:	eba3 0209 	sub.w	r2, r3, r9
 811015e:	d123      	bne.n	81101a8 <_scanf_float+0x3d0>
 8110160:	9901      	ldr	r1, [sp, #4]
 8110162:	2200      	movs	r2, #0
 8110164:	4640      	mov	r0, r8
 8110166:	f002 fccb 	bl	8112b00 <_strtod_r>
 811016a:	9b03      	ldr	r3, [sp, #12]
 811016c:	6821      	ldr	r1, [r4, #0]
 811016e:	681b      	ldr	r3, [r3, #0]
 8110170:	f011 0f02 	tst.w	r1, #2
 8110174:	ec57 6b10 	vmov	r6, r7, d0
 8110178:	f103 0204 	add.w	r2, r3, #4
 811017c:	d01f      	beq.n	81101be <_scanf_float+0x3e6>
 811017e:	9903      	ldr	r1, [sp, #12]
 8110180:	600a      	str	r2, [r1, #0]
 8110182:	681b      	ldr	r3, [r3, #0]
 8110184:	e9c3 6700 	strd	r6, r7, [r3]
 8110188:	68e3      	ldr	r3, [r4, #12]
 811018a:	3301      	adds	r3, #1
 811018c:	60e3      	str	r3, [r4, #12]
 811018e:	e7d9      	b.n	8110144 <_scanf_float+0x36c>
 8110190:	9b04      	ldr	r3, [sp, #16]
 8110192:	2b00      	cmp	r3, #0
 8110194:	d0e4      	beq.n	8110160 <_scanf_float+0x388>
 8110196:	9905      	ldr	r1, [sp, #20]
 8110198:	230a      	movs	r3, #10
 811019a:	3101      	adds	r1, #1
 811019c:	4640      	mov	r0, r8
 811019e:	f002 fd2f 	bl	8112c00 <_strtol_r>
 81101a2:	9b04      	ldr	r3, [sp, #16]
 81101a4:	9e05      	ldr	r6, [sp, #20]
 81101a6:	1ac2      	subs	r2, r0, r3
 81101a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 81101ac:	429e      	cmp	r6, r3
 81101ae:	bf28      	it	cs
 81101b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 81101b4:	4910      	ldr	r1, [pc, #64]	@ (81101f8 <_scanf_float+0x420>)
 81101b6:	4630      	mov	r0, r6
 81101b8:	f000 f8f6 	bl	81103a8 <siprintf>
 81101bc:	e7d0      	b.n	8110160 <_scanf_float+0x388>
 81101be:	f011 0f04 	tst.w	r1, #4
 81101c2:	9903      	ldr	r1, [sp, #12]
 81101c4:	600a      	str	r2, [r1, #0]
 81101c6:	d1dc      	bne.n	8110182 <_scanf_float+0x3aa>
 81101c8:	681d      	ldr	r5, [r3, #0]
 81101ca:	4632      	mov	r2, r6
 81101cc:	463b      	mov	r3, r7
 81101ce:	4630      	mov	r0, r6
 81101d0:	4639      	mov	r1, r7
 81101d2:	f7f0 fd33 	bl	8100c3c <__aeabi_dcmpun>
 81101d6:	b128      	cbz	r0, 81101e4 <_scanf_float+0x40c>
 81101d8:	4808      	ldr	r0, [pc, #32]	@ (81101fc <_scanf_float+0x424>)
 81101da:	f000 fa6b 	bl	81106b4 <nanf>
 81101de:	ed85 0a00 	vstr	s0, [r5]
 81101e2:	e7d1      	b.n	8110188 <_scanf_float+0x3b0>
 81101e4:	4630      	mov	r0, r6
 81101e6:	4639      	mov	r1, r7
 81101e8:	f7f0 fd86 	bl	8100cf8 <__aeabi_d2f>
 81101ec:	6028      	str	r0, [r5, #0]
 81101ee:	e7cb      	b.n	8110188 <_scanf_float+0x3b0>
 81101f0:	f04f 0900 	mov.w	r9, #0
 81101f4:	e629      	b.n	810fe4a <_scanf_float+0x72>
 81101f6:	bf00      	nop
 81101f8:	08113da3 	.word	0x08113da3
 81101fc:	08113de3 	.word	0x08113de3

08110200 <std>:
 8110200:	2300      	movs	r3, #0
 8110202:	b510      	push	{r4, lr}
 8110204:	4604      	mov	r4, r0
 8110206:	e9c0 3300 	strd	r3, r3, [r0]
 811020a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811020e:	6083      	str	r3, [r0, #8]
 8110210:	8181      	strh	r1, [r0, #12]
 8110212:	6643      	str	r3, [r0, #100]	@ 0x64
 8110214:	81c2      	strh	r2, [r0, #14]
 8110216:	6183      	str	r3, [r0, #24]
 8110218:	4619      	mov	r1, r3
 811021a:	2208      	movs	r2, #8
 811021c:	305c      	adds	r0, #92	@ 0x5c
 811021e:	f000 f9bb 	bl	8110598 <memset>
 8110222:	4b0d      	ldr	r3, [pc, #52]	@ (8110258 <std+0x58>)
 8110224:	6263      	str	r3, [r4, #36]	@ 0x24
 8110226:	4b0d      	ldr	r3, [pc, #52]	@ (811025c <std+0x5c>)
 8110228:	62a3      	str	r3, [r4, #40]	@ 0x28
 811022a:	4b0d      	ldr	r3, [pc, #52]	@ (8110260 <std+0x60>)
 811022c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 811022e:	4b0d      	ldr	r3, [pc, #52]	@ (8110264 <std+0x64>)
 8110230:	6323      	str	r3, [r4, #48]	@ 0x30
 8110232:	4b0d      	ldr	r3, [pc, #52]	@ (8110268 <std+0x68>)
 8110234:	6224      	str	r4, [r4, #32]
 8110236:	429c      	cmp	r4, r3
 8110238:	d006      	beq.n	8110248 <std+0x48>
 811023a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 811023e:	4294      	cmp	r4, r2
 8110240:	d002      	beq.n	8110248 <std+0x48>
 8110242:	33d0      	adds	r3, #208	@ 0xd0
 8110244:	429c      	cmp	r4, r3
 8110246:	d105      	bne.n	8110254 <std+0x54>
 8110248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 811024c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110250:	f000 ba1e 	b.w	8110690 <__retarget_lock_init_recursive>
 8110254:	bd10      	pop	{r4, pc}
 8110256:	bf00      	nop
 8110258:	081103e9 	.word	0x081103e9
 811025c:	0811040b 	.word	0x0811040b
 8110260:	08110443 	.word	0x08110443
 8110264:	08110467 	.word	0x08110467
 8110268:	10008b7c 	.word	0x10008b7c

0811026c <stdio_exit_handler>:
 811026c:	4a02      	ldr	r2, [pc, #8]	@ (8110278 <stdio_exit_handler+0xc>)
 811026e:	4903      	ldr	r1, [pc, #12]	@ (811027c <stdio_exit_handler+0x10>)
 8110270:	4803      	ldr	r0, [pc, #12]	@ (8110280 <stdio_exit_handler+0x14>)
 8110272:	f000 b869 	b.w	8110348 <_fwalk_sglue>
 8110276:	bf00      	nop
 8110278:	100000a4 	.word	0x100000a4
 811027c:	08113241 	.word	0x08113241
 8110280:	100000b4 	.word	0x100000b4

08110284 <cleanup_stdio>:
 8110284:	6841      	ldr	r1, [r0, #4]
 8110286:	4b0c      	ldr	r3, [pc, #48]	@ (81102b8 <cleanup_stdio+0x34>)
 8110288:	4299      	cmp	r1, r3
 811028a:	b510      	push	{r4, lr}
 811028c:	4604      	mov	r4, r0
 811028e:	d001      	beq.n	8110294 <cleanup_stdio+0x10>
 8110290:	f002 ffd6 	bl	8113240 <_fflush_r>
 8110294:	68a1      	ldr	r1, [r4, #8]
 8110296:	4b09      	ldr	r3, [pc, #36]	@ (81102bc <cleanup_stdio+0x38>)
 8110298:	4299      	cmp	r1, r3
 811029a:	d002      	beq.n	81102a2 <cleanup_stdio+0x1e>
 811029c:	4620      	mov	r0, r4
 811029e:	f002 ffcf 	bl	8113240 <_fflush_r>
 81102a2:	68e1      	ldr	r1, [r4, #12]
 81102a4:	4b06      	ldr	r3, [pc, #24]	@ (81102c0 <cleanup_stdio+0x3c>)
 81102a6:	4299      	cmp	r1, r3
 81102a8:	d004      	beq.n	81102b4 <cleanup_stdio+0x30>
 81102aa:	4620      	mov	r0, r4
 81102ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81102b0:	f002 bfc6 	b.w	8113240 <_fflush_r>
 81102b4:	bd10      	pop	{r4, pc}
 81102b6:	bf00      	nop
 81102b8:	10008b7c 	.word	0x10008b7c
 81102bc:	10008be4 	.word	0x10008be4
 81102c0:	10008c4c 	.word	0x10008c4c

081102c4 <global_stdio_init.part.0>:
 81102c4:	b510      	push	{r4, lr}
 81102c6:	4b0b      	ldr	r3, [pc, #44]	@ (81102f4 <global_stdio_init.part.0+0x30>)
 81102c8:	4c0b      	ldr	r4, [pc, #44]	@ (81102f8 <global_stdio_init.part.0+0x34>)
 81102ca:	4a0c      	ldr	r2, [pc, #48]	@ (81102fc <global_stdio_init.part.0+0x38>)
 81102cc:	601a      	str	r2, [r3, #0]
 81102ce:	4620      	mov	r0, r4
 81102d0:	2200      	movs	r2, #0
 81102d2:	2104      	movs	r1, #4
 81102d4:	f7ff ff94 	bl	8110200 <std>
 81102d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 81102dc:	2201      	movs	r2, #1
 81102de:	2109      	movs	r1, #9
 81102e0:	f7ff ff8e 	bl	8110200 <std>
 81102e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 81102e8:	2202      	movs	r2, #2
 81102ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81102ee:	2112      	movs	r1, #18
 81102f0:	f7ff bf86 	b.w	8110200 <std>
 81102f4:	10008cb4 	.word	0x10008cb4
 81102f8:	10008b7c 	.word	0x10008b7c
 81102fc:	0811026d 	.word	0x0811026d

08110300 <__sfp_lock_acquire>:
 8110300:	4801      	ldr	r0, [pc, #4]	@ (8110308 <__sfp_lock_acquire+0x8>)
 8110302:	f000 b9c6 	b.w	8110692 <__retarget_lock_acquire_recursive>
 8110306:	bf00      	nop
 8110308:	10008cbd 	.word	0x10008cbd

0811030c <__sfp_lock_release>:
 811030c:	4801      	ldr	r0, [pc, #4]	@ (8110314 <__sfp_lock_release+0x8>)
 811030e:	f000 b9c1 	b.w	8110694 <__retarget_lock_release_recursive>
 8110312:	bf00      	nop
 8110314:	10008cbd 	.word	0x10008cbd

08110318 <__sinit>:
 8110318:	b510      	push	{r4, lr}
 811031a:	4604      	mov	r4, r0
 811031c:	f7ff fff0 	bl	8110300 <__sfp_lock_acquire>
 8110320:	6a23      	ldr	r3, [r4, #32]
 8110322:	b11b      	cbz	r3, 811032c <__sinit+0x14>
 8110324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110328:	f7ff bff0 	b.w	811030c <__sfp_lock_release>
 811032c:	4b04      	ldr	r3, [pc, #16]	@ (8110340 <__sinit+0x28>)
 811032e:	6223      	str	r3, [r4, #32]
 8110330:	4b04      	ldr	r3, [pc, #16]	@ (8110344 <__sinit+0x2c>)
 8110332:	681b      	ldr	r3, [r3, #0]
 8110334:	2b00      	cmp	r3, #0
 8110336:	d1f5      	bne.n	8110324 <__sinit+0xc>
 8110338:	f7ff ffc4 	bl	81102c4 <global_stdio_init.part.0>
 811033c:	e7f2      	b.n	8110324 <__sinit+0xc>
 811033e:	bf00      	nop
 8110340:	08110285 	.word	0x08110285
 8110344:	10008cb4 	.word	0x10008cb4

08110348 <_fwalk_sglue>:
 8110348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811034c:	4607      	mov	r7, r0
 811034e:	4688      	mov	r8, r1
 8110350:	4614      	mov	r4, r2
 8110352:	2600      	movs	r6, #0
 8110354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8110358:	f1b9 0901 	subs.w	r9, r9, #1
 811035c:	d505      	bpl.n	811036a <_fwalk_sglue+0x22>
 811035e:	6824      	ldr	r4, [r4, #0]
 8110360:	2c00      	cmp	r4, #0
 8110362:	d1f7      	bne.n	8110354 <_fwalk_sglue+0xc>
 8110364:	4630      	mov	r0, r6
 8110366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811036a:	89ab      	ldrh	r3, [r5, #12]
 811036c:	2b01      	cmp	r3, #1
 811036e:	d907      	bls.n	8110380 <_fwalk_sglue+0x38>
 8110370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8110374:	3301      	adds	r3, #1
 8110376:	d003      	beq.n	8110380 <_fwalk_sglue+0x38>
 8110378:	4629      	mov	r1, r5
 811037a:	4638      	mov	r0, r7
 811037c:	47c0      	blx	r8
 811037e:	4306      	orrs	r6, r0
 8110380:	3568      	adds	r5, #104	@ 0x68
 8110382:	e7e9      	b.n	8110358 <_fwalk_sglue+0x10>

08110384 <iprintf>:
 8110384:	b40f      	push	{r0, r1, r2, r3}
 8110386:	b507      	push	{r0, r1, r2, lr}
 8110388:	4906      	ldr	r1, [pc, #24]	@ (81103a4 <iprintf+0x20>)
 811038a:	ab04      	add	r3, sp, #16
 811038c:	6808      	ldr	r0, [r1, #0]
 811038e:	f853 2b04 	ldr.w	r2, [r3], #4
 8110392:	6881      	ldr	r1, [r0, #8]
 8110394:	9301      	str	r3, [sp, #4]
 8110396:	f002 fdb7 	bl	8112f08 <_vfiprintf_r>
 811039a:	b003      	add	sp, #12
 811039c:	f85d eb04 	ldr.w	lr, [sp], #4
 81103a0:	b004      	add	sp, #16
 81103a2:	4770      	bx	lr
 81103a4:	100000b0 	.word	0x100000b0

081103a8 <siprintf>:
 81103a8:	b40e      	push	{r1, r2, r3}
 81103aa:	b500      	push	{lr}
 81103ac:	b09c      	sub	sp, #112	@ 0x70
 81103ae:	ab1d      	add	r3, sp, #116	@ 0x74
 81103b0:	9002      	str	r0, [sp, #8]
 81103b2:	9006      	str	r0, [sp, #24]
 81103b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 81103b8:	4809      	ldr	r0, [pc, #36]	@ (81103e0 <siprintf+0x38>)
 81103ba:	9107      	str	r1, [sp, #28]
 81103bc:	9104      	str	r1, [sp, #16]
 81103be:	4909      	ldr	r1, [pc, #36]	@ (81103e4 <siprintf+0x3c>)
 81103c0:	f853 2b04 	ldr.w	r2, [r3], #4
 81103c4:	9105      	str	r1, [sp, #20]
 81103c6:	6800      	ldr	r0, [r0, #0]
 81103c8:	9301      	str	r3, [sp, #4]
 81103ca:	a902      	add	r1, sp, #8
 81103cc:	f002 fc76 	bl	8112cbc <_svfiprintf_r>
 81103d0:	9b02      	ldr	r3, [sp, #8]
 81103d2:	2200      	movs	r2, #0
 81103d4:	701a      	strb	r2, [r3, #0]
 81103d6:	b01c      	add	sp, #112	@ 0x70
 81103d8:	f85d eb04 	ldr.w	lr, [sp], #4
 81103dc:	b003      	add	sp, #12
 81103de:	4770      	bx	lr
 81103e0:	100000b0 	.word	0x100000b0
 81103e4:	ffff0208 	.word	0xffff0208

081103e8 <__sread>:
 81103e8:	b510      	push	{r4, lr}
 81103ea:	460c      	mov	r4, r1
 81103ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81103f0:	f000 f900 	bl	81105f4 <_read_r>
 81103f4:	2800      	cmp	r0, #0
 81103f6:	bfab      	itete	ge
 81103f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 81103fa:	89a3      	ldrhlt	r3, [r4, #12]
 81103fc:	181b      	addge	r3, r3, r0
 81103fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8110402:	bfac      	ite	ge
 8110404:	6563      	strge	r3, [r4, #84]	@ 0x54
 8110406:	81a3      	strhlt	r3, [r4, #12]
 8110408:	bd10      	pop	{r4, pc}

0811040a <__swrite>:
 811040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811040e:	461f      	mov	r7, r3
 8110410:	898b      	ldrh	r3, [r1, #12]
 8110412:	05db      	lsls	r3, r3, #23
 8110414:	4605      	mov	r5, r0
 8110416:	460c      	mov	r4, r1
 8110418:	4616      	mov	r6, r2
 811041a:	d505      	bpl.n	8110428 <__swrite+0x1e>
 811041c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110420:	2302      	movs	r3, #2
 8110422:	2200      	movs	r2, #0
 8110424:	f000 f8d4 	bl	81105d0 <_lseek_r>
 8110428:	89a3      	ldrh	r3, [r4, #12]
 811042a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811042e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8110432:	81a3      	strh	r3, [r4, #12]
 8110434:	4632      	mov	r2, r6
 8110436:	463b      	mov	r3, r7
 8110438:	4628      	mov	r0, r5
 811043a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811043e:	f000 b8eb 	b.w	8110618 <_write_r>

08110442 <__sseek>:
 8110442:	b510      	push	{r4, lr}
 8110444:	460c      	mov	r4, r1
 8110446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811044a:	f000 f8c1 	bl	81105d0 <_lseek_r>
 811044e:	1c43      	adds	r3, r0, #1
 8110450:	89a3      	ldrh	r3, [r4, #12]
 8110452:	bf15      	itete	ne
 8110454:	6560      	strne	r0, [r4, #84]	@ 0x54
 8110456:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 811045a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 811045e:	81a3      	strheq	r3, [r4, #12]
 8110460:	bf18      	it	ne
 8110462:	81a3      	strhne	r3, [r4, #12]
 8110464:	bd10      	pop	{r4, pc}

08110466 <__sclose>:
 8110466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811046a:	f000 b8a1 	b.w	81105b0 <_close_r>

0811046e <__swbuf_r>:
 811046e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8110470:	460e      	mov	r6, r1
 8110472:	4614      	mov	r4, r2
 8110474:	4605      	mov	r5, r0
 8110476:	b118      	cbz	r0, 8110480 <__swbuf_r+0x12>
 8110478:	6a03      	ldr	r3, [r0, #32]
 811047a:	b90b      	cbnz	r3, 8110480 <__swbuf_r+0x12>
 811047c:	f7ff ff4c 	bl	8110318 <__sinit>
 8110480:	69a3      	ldr	r3, [r4, #24]
 8110482:	60a3      	str	r3, [r4, #8]
 8110484:	89a3      	ldrh	r3, [r4, #12]
 8110486:	071a      	lsls	r2, r3, #28
 8110488:	d501      	bpl.n	811048e <__swbuf_r+0x20>
 811048a:	6923      	ldr	r3, [r4, #16]
 811048c:	b943      	cbnz	r3, 81104a0 <__swbuf_r+0x32>
 811048e:	4621      	mov	r1, r4
 8110490:	4628      	mov	r0, r5
 8110492:	f000 f82b 	bl	81104ec <__swsetup_r>
 8110496:	b118      	cbz	r0, 81104a0 <__swbuf_r+0x32>
 8110498:	f04f 37ff 	mov.w	r7, #4294967295
 811049c:	4638      	mov	r0, r7
 811049e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81104a0:	6823      	ldr	r3, [r4, #0]
 81104a2:	6922      	ldr	r2, [r4, #16]
 81104a4:	1a98      	subs	r0, r3, r2
 81104a6:	6963      	ldr	r3, [r4, #20]
 81104a8:	b2f6      	uxtb	r6, r6
 81104aa:	4283      	cmp	r3, r0
 81104ac:	4637      	mov	r7, r6
 81104ae:	dc05      	bgt.n	81104bc <__swbuf_r+0x4e>
 81104b0:	4621      	mov	r1, r4
 81104b2:	4628      	mov	r0, r5
 81104b4:	f002 fec4 	bl	8113240 <_fflush_r>
 81104b8:	2800      	cmp	r0, #0
 81104ba:	d1ed      	bne.n	8110498 <__swbuf_r+0x2a>
 81104bc:	68a3      	ldr	r3, [r4, #8]
 81104be:	3b01      	subs	r3, #1
 81104c0:	60a3      	str	r3, [r4, #8]
 81104c2:	6823      	ldr	r3, [r4, #0]
 81104c4:	1c5a      	adds	r2, r3, #1
 81104c6:	6022      	str	r2, [r4, #0]
 81104c8:	701e      	strb	r6, [r3, #0]
 81104ca:	6962      	ldr	r2, [r4, #20]
 81104cc:	1c43      	adds	r3, r0, #1
 81104ce:	429a      	cmp	r2, r3
 81104d0:	d004      	beq.n	81104dc <__swbuf_r+0x6e>
 81104d2:	89a3      	ldrh	r3, [r4, #12]
 81104d4:	07db      	lsls	r3, r3, #31
 81104d6:	d5e1      	bpl.n	811049c <__swbuf_r+0x2e>
 81104d8:	2e0a      	cmp	r6, #10
 81104da:	d1df      	bne.n	811049c <__swbuf_r+0x2e>
 81104dc:	4621      	mov	r1, r4
 81104de:	4628      	mov	r0, r5
 81104e0:	f002 feae 	bl	8113240 <_fflush_r>
 81104e4:	2800      	cmp	r0, #0
 81104e6:	d0d9      	beq.n	811049c <__swbuf_r+0x2e>
 81104e8:	e7d6      	b.n	8110498 <__swbuf_r+0x2a>
	...

081104ec <__swsetup_r>:
 81104ec:	b538      	push	{r3, r4, r5, lr}
 81104ee:	4b29      	ldr	r3, [pc, #164]	@ (8110594 <__swsetup_r+0xa8>)
 81104f0:	4605      	mov	r5, r0
 81104f2:	6818      	ldr	r0, [r3, #0]
 81104f4:	460c      	mov	r4, r1
 81104f6:	b118      	cbz	r0, 8110500 <__swsetup_r+0x14>
 81104f8:	6a03      	ldr	r3, [r0, #32]
 81104fa:	b90b      	cbnz	r3, 8110500 <__swsetup_r+0x14>
 81104fc:	f7ff ff0c 	bl	8110318 <__sinit>
 8110500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110504:	0719      	lsls	r1, r3, #28
 8110506:	d422      	bmi.n	811054e <__swsetup_r+0x62>
 8110508:	06da      	lsls	r2, r3, #27
 811050a:	d407      	bmi.n	811051c <__swsetup_r+0x30>
 811050c:	2209      	movs	r2, #9
 811050e:	602a      	str	r2, [r5, #0]
 8110510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8110514:	81a3      	strh	r3, [r4, #12]
 8110516:	f04f 30ff 	mov.w	r0, #4294967295
 811051a:	e033      	b.n	8110584 <__swsetup_r+0x98>
 811051c:	0758      	lsls	r0, r3, #29
 811051e:	d512      	bpl.n	8110546 <__swsetup_r+0x5a>
 8110520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8110522:	b141      	cbz	r1, 8110536 <__swsetup_r+0x4a>
 8110524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8110528:	4299      	cmp	r1, r3
 811052a:	d002      	beq.n	8110532 <__swsetup_r+0x46>
 811052c:	4628      	mov	r0, r5
 811052e:	f000 ff33 	bl	8111398 <_free_r>
 8110532:	2300      	movs	r3, #0
 8110534:	6363      	str	r3, [r4, #52]	@ 0x34
 8110536:	89a3      	ldrh	r3, [r4, #12]
 8110538:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 811053c:	81a3      	strh	r3, [r4, #12]
 811053e:	2300      	movs	r3, #0
 8110540:	6063      	str	r3, [r4, #4]
 8110542:	6923      	ldr	r3, [r4, #16]
 8110544:	6023      	str	r3, [r4, #0]
 8110546:	89a3      	ldrh	r3, [r4, #12]
 8110548:	f043 0308 	orr.w	r3, r3, #8
 811054c:	81a3      	strh	r3, [r4, #12]
 811054e:	6923      	ldr	r3, [r4, #16]
 8110550:	b94b      	cbnz	r3, 8110566 <__swsetup_r+0x7a>
 8110552:	89a3      	ldrh	r3, [r4, #12]
 8110554:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8110558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811055c:	d003      	beq.n	8110566 <__swsetup_r+0x7a>
 811055e:	4621      	mov	r1, r4
 8110560:	4628      	mov	r0, r5
 8110562:	f002 fecd 	bl	8113300 <__smakebuf_r>
 8110566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811056a:	f013 0201 	ands.w	r2, r3, #1
 811056e:	d00a      	beq.n	8110586 <__swsetup_r+0x9a>
 8110570:	2200      	movs	r2, #0
 8110572:	60a2      	str	r2, [r4, #8]
 8110574:	6962      	ldr	r2, [r4, #20]
 8110576:	4252      	negs	r2, r2
 8110578:	61a2      	str	r2, [r4, #24]
 811057a:	6922      	ldr	r2, [r4, #16]
 811057c:	b942      	cbnz	r2, 8110590 <__swsetup_r+0xa4>
 811057e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8110582:	d1c5      	bne.n	8110510 <__swsetup_r+0x24>
 8110584:	bd38      	pop	{r3, r4, r5, pc}
 8110586:	0799      	lsls	r1, r3, #30
 8110588:	bf58      	it	pl
 811058a:	6962      	ldrpl	r2, [r4, #20]
 811058c:	60a2      	str	r2, [r4, #8]
 811058e:	e7f4      	b.n	811057a <__swsetup_r+0x8e>
 8110590:	2000      	movs	r0, #0
 8110592:	e7f7      	b.n	8110584 <__swsetup_r+0x98>
 8110594:	100000b0 	.word	0x100000b0

08110598 <memset>:
 8110598:	4402      	add	r2, r0
 811059a:	4603      	mov	r3, r0
 811059c:	4293      	cmp	r3, r2
 811059e:	d100      	bne.n	81105a2 <memset+0xa>
 81105a0:	4770      	bx	lr
 81105a2:	f803 1b01 	strb.w	r1, [r3], #1
 81105a6:	e7f9      	b.n	811059c <memset+0x4>

081105a8 <_localeconv_r>:
 81105a8:	4800      	ldr	r0, [pc, #0]	@ (81105ac <_localeconv_r+0x4>)
 81105aa:	4770      	bx	lr
 81105ac:	100001f0 	.word	0x100001f0

081105b0 <_close_r>:
 81105b0:	b538      	push	{r3, r4, r5, lr}
 81105b2:	4d06      	ldr	r5, [pc, #24]	@ (81105cc <_close_r+0x1c>)
 81105b4:	2300      	movs	r3, #0
 81105b6:	4604      	mov	r4, r0
 81105b8:	4608      	mov	r0, r1
 81105ba:	602b      	str	r3, [r5, #0]
 81105bc:	f7f3 ff6e 	bl	810449c <_close>
 81105c0:	1c43      	adds	r3, r0, #1
 81105c2:	d102      	bne.n	81105ca <_close_r+0x1a>
 81105c4:	682b      	ldr	r3, [r5, #0]
 81105c6:	b103      	cbz	r3, 81105ca <_close_r+0x1a>
 81105c8:	6023      	str	r3, [r4, #0]
 81105ca:	bd38      	pop	{r3, r4, r5, pc}
 81105cc:	10008cb8 	.word	0x10008cb8

081105d0 <_lseek_r>:
 81105d0:	b538      	push	{r3, r4, r5, lr}
 81105d2:	4d07      	ldr	r5, [pc, #28]	@ (81105f0 <_lseek_r+0x20>)
 81105d4:	4604      	mov	r4, r0
 81105d6:	4608      	mov	r0, r1
 81105d8:	4611      	mov	r1, r2
 81105da:	2200      	movs	r2, #0
 81105dc:	602a      	str	r2, [r5, #0]
 81105de:	461a      	mov	r2, r3
 81105e0:	f7f3 ff83 	bl	81044ea <_lseek>
 81105e4:	1c43      	adds	r3, r0, #1
 81105e6:	d102      	bne.n	81105ee <_lseek_r+0x1e>
 81105e8:	682b      	ldr	r3, [r5, #0]
 81105ea:	b103      	cbz	r3, 81105ee <_lseek_r+0x1e>
 81105ec:	6023      	str	r3, [r4, #0]
 81105ee:	bd38      	pop	{r3, r4, r5, pc}
 81105f0:	10008cb8 	.word	0x10008cb8

081105f4 <_read_r>:
 81105f4:	b538      	push	{r3, r4, r5, lr}
 81105f6:	4d07      	ldr	r5, [pc, #28]	@ (8110614 <_read_r+0x20>)
 81105f8:	4604      	mov	r4, r0
 81105fa:	4608      	mov	r0, r1
 81105fc:	4611      	mov	r1, r2
 81105fe:	2200      	movs	r2, #0
 8110600:	602a      	str	r2, [r5, #0]
 8110602:	461a      	mov	r2, r3
 8110604:	f7f3 ff2b 	bl	810445e <_read>
 8110608:	1c43      	adds	r3, r0, #1
 811060a:	d102      	bne.n	8110612 <_read_r+0x1e>
 811060c:	682b      	ldr	r3, [r5, #0]
 811060e:	b103      	cbz	r3, 8110612 <_read_r+0x1e>
 8110610:	6023      	str	r3, [r4, #0]
 8110612:	bd38      	pop	{r3, r4, r5, pc}
 8110614:	10008cb8 	.word	0x10008cb8

08110618 <_write_r>:
 8110618:	b538      	push	{r3, r4, r5, lr}
 811061a:	4d07      	ldr	r5, [pc, #28]	@ (8110638 <_write_r+0x20>)
 811061c:	4604      	mov	r4, r0
 811061e:	4608      	mov	r0, r1
 8110620:	4611      	mov	r1, r2
 8110622:	2200      	movs	r2, #0
 8110624:	602a      	str	r2, [r5, #0]
 8110626:	461a      	mov	r2, r3
 8110628:	f7f3 fb4e 	bl	8103cc8 <_write>
 811062c:	1c43      	adds	r3, r0, #1
 811062e:	d102      	bne.n	8110636 <_write_r+0x1e>
 8110630:	682b      	ldr	r3, [r5, #0]
 8110632:	b103      	cbz	r3, 8110636 <_write_r+0x1e>
 8110634:	6023      	str	r3, [r4, #0]
 8110636:	bd38      	pop	{r3, r4, r5, pc}
 8110638:	10008cb8 	.word	0x10008cb8

0811063c <__errno>:
 811063c:	4b01      	ldr	r3, [pc, #4]	@ (8110644 <__errno+0x8>)
 811063e:	6818      	ldr	r0, [r3, #0]
 8110640:	4770      	bx	lr
 8110642:	bf00      	nop
 8110644:	100000b0 	.word	0x100000b0

08110648 <__libc_init_array>:
 8110648:	b570      	push	{r4, r5, r6, lr}
 811064a:	4d0d      	ldr	r5, [pc, #52]	@ (8110680 <__libc_init_array+0x38>)
 811064c:	4c0d      	ldr	r4, [pc, #52]	@ (8110684 <__libc_init_array+0x3c>)
 811064e:	1b64      	subs	r4, r4, r5
 8110650:	10a4      	asrs	r4, r4, #2
 8110652:	2600      	movs	r6, #0
 8110654:	42a6      	cmp	r6, r4
 8110656:	d109      	bne.n	811066c <__libc_init_array+0x24>
 8110658:	4d0b      	ldr	r5, [pc, #44]	@ (8110688 <__libc_init_array+0x40>)
 811065a:	4c0c      	ldr	r4, [pc, #48]	@ (811068c <__libc_init_array+0x44>)
 811065c:	f003 fae0 	bl	8113c20 <_init>
 8110660:	1b64      	subs	r4, r4, r5
 8110662:	10a4      	asrs	r4, r4, #2
 8110664:	2600      	movs	r6, #0
 8110666:	42a6      	cmp	r6, r4
 8110668:	d105      	bne.n	8110676 <__libc_init_array+0x2e>
 811066a:	bd70      	pop	{r4, r5, r6, pc}
 811066c:	f855 3b04 	ldr.w	r3, [r5], #4
 8110670:	4798      	blx	r3
 8110672:	3601      	adds	r6, #1
 8110674:	e7ee      	b.n	8110654 <__libc_init_array+0xc>
 8110676:	f855 3b04 	ldr.w	r3, [r5], #4
 811067a:	4798      	blx	r3
 811067c:	3601      	adds	r6, #1
 811067e:	e7f2      	b.n	8110666 <__libc_init_array+0x1e>
 8110680:	0811418c 	.word	0x0811418c
 8110684:	0811418c 	.word	0x0811418c
 8110688:	0811418c 	.word	0x0811418c
 811068c:	08114190 	.word	0x08114190

08110690 <__retarget_lock_init_recursive>:
 8110690:	4770      	bx	lr

08110692 <__retarget_lock_acquire_recursive>:
 8110692:	4770      	bx	lr

08110694 <__retarget_lock_release_recursive>:
 8110694:	4770      	bx	lr

08110696 <memcpy>:
 8110696:	440a      	add	r2, r1
 8110698:	4291      	cmp	r1, r2
 811069a:	f100 33ff 	add.w	r3, r0, #4294967295
 811069e:	d100      	bne.n	81106a2 <memcpy+0xc>
 81106a0:	4770      	bx	lr
 81106a2:	b510      	push	{r4, lr}
 81106a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 81106a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 81106ac:	4291      	cmp	r1, r2
 81106ae:	d1f9      	bne.n	81106a4 <memcpy+0xe>
 81106b0:	bd10      	pop	{r4, pc}
	...

081106b4 <nanf>:
 81106b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 81106bc <nanf+0x8>
 81106b8:	4770      	bx	lr
 81106ba:	bf00      	nop
 81106bc:	7fc00000 	.word	0x7fc00000

081106c0 <__assert_func>:
 81106c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 81106c2:	4614      	mov	r4, r2
 81106c4:	461a      	mov	r2, r3
 81106c6:	4b09      	ldr	r3, [pc, #36]	@ (81106ec <__assert_func+0x2c>)
 81106c8:	681b      	ldr	r3, [r3, #0]
 81106ca:	4605      	mov	r5, r0
 81106cc:	68d8      	ldr	r0, [r3, #12]
 81106ce:	b954      	cbnz	r4, 81106e6 <__assert_func+0x26>
 81106d0:	4b07      	ldr	r3, [pc, #28]	@ (81106f0 <__assert_func+0x30>)
 81106d2:	461c      	mov	r4, r3
 81106d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 81106d8:	9100      	str	r1, [sp, #0]
 81106da:	462b      	mov	r3, r5
 81106dc:	4905      	ldr	r1, [pc, #20]	@ (81106f4 <__assert_func+0x34>)
 81106de:	f002 fdd7 	bl	8113290 <fiprintf>
 81106e2:	f002 feb1 	bl	8113448 <abort>
 81106e6:	4b04      	ldr	r3, [pc, #16]	@ (81106f8 <__assert_func+0x38>)
 81106e8:	e7f4      	b.n	81106d4 <__assert_func+0x14>
 81106ea:	bf00      	nop
 81106ec:	100000b0 	.word	0x100000b0
 81106f0:	08113de3 	.word	0x08113de3
 81106f4:	08113db5 	.word	0x08113db5
 81106f8:	08113da8 	.word	0x08113da8

081106fc <quorem>:
 81106fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110700:	6903      	ldr	r3, [r0, #16]
 8110702:	690c      	ldr	r4, [r1, #16]
 8110704:	42a3      	cmp	r3, r4
 8110706:	4607      	mov	r7, r0
 8110708:	db7e      	blt.n	8110808 <quorem+0x10c>
 811070a:	3c01      	subs	r4, #1
 811070c:	f101 0814 	add.w	r8, r1, #20
 8110710:	00a3      	lsls	r3, r4, #2
 8110712:	f100 0514 	add.w	r5, r0, #20
 8110716:	9300      	str	r3, [sp, #0]
 8110718:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811071c:	9301      	str	r3, [sp, #4]
 811071e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8110722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8110726:	3301      	adds	r3, #1
 8110728:	429a      	cmp	r2, r3
 811072a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 811072e:	fbb2 f6f3 	udiv	r6, r2, r3
 8110732:	d32e      	bcc.n	8110792 <quorem+0x96>
 8110734:	f04f 0a00 	mov.w	sl, #0
 8110738:	46c4      	mov	ip, r8
 811073a:	46ae      	mov	lr, r5
 811073c:	46d3      	mov	fp, sl
 811073e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8110742:	b298      	uxth	r0, r3
 8110744:	fb06 a000 	mla	r0, r6, r0, sl
 8110748:	0c02      	lsrs	r2, r0, #16
 811074a:	0c1b      	lsrs	r3, r3, #16
 811074c:	fb06 2303 	mla	r3, r6, r3, r2
 8110750:	f8de 2000 	ldr.w	r2, [lr]
 8110754:	b280      	uxth	r0, r0
 8110756:	b292      	uxth	r2, r2
 8110758:	1a12      	subs	r2, r2, r0
 811075a:	445a      	add	r2, fp
 811075c:	f8de 0000 	ldr.w	r0, [lr]
 8110760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8110764:	b29b      	uxth	r3, r3
 8110766:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 811076a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 811076e:	b292      	uxth	r2, r2
 8110770:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8110774:	45e1      	cmp	r9, ip
 8110776:	f84e 2b04 	str.w	r2, [lr], #4
 811077a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 811077e:	d2de      	bcs.n	811073e <quorem+0x42>
 8110780:	9b00      	ldr	r3, [sp, #0]
 8110782:	58eb      	ldr	r3, [r5, r3]
 8110784:	b92b      	cbnz	r3, 8110792 <quorem+0x96>
 8110786:	9b01      	ldr	r3, [sp, #4]
 8110788:	3b04      	subs	r3, #4
 811078a:	429d      	cmp	r5, r3
 811078c:	461a      	mov	r2, r3
 811078e:	d32f      	bcc.n	81107f0 <quorem+0xf4>
 8110790:	613c      	str	r4, [r7, #16]
 8110792:	4638      	mov	r0, r7
 8110794:	f001 f9c4 	bl	8111b20 <__mcmp>
 8110798:	2800      	cmp	r0, #0
 811079a:	db25      	blt.n	81107e8 <quorem+0xec>
 811079c:	4629      	mov	r1, r5
 811079e:	2000      	movs	r0, #0
 81107a0:	f858 2b04 	ldr.w	r2, [r8], #4
 81107a4:	f8d1 c000 	ldr.w	ip, [r1]
 81107a8:	fa1f fe82 	uxth.w	lr, r2
 81107ac:	fa1f f38c 	uxth.w	r3, ip
 81107b0:	eba3 030e 	sub.w	r3, r3, lr
 81107b4:	4403      	add	r3, r0
 81107b6:	0c12      	lsrs	r2, r2, #16
 81107b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 81107bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 81107c0:	b29b      	uxth	r3, r3
 81107c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81107c6:	45c1      	cmp	r9, r8
 81107c8:	f841 3b04 	str.w	r3, [r1], #4
 81107cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 81107d0:	d2e6      	bcs.n	81107a0 <quorem+0xa4>
 81107d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81107d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81107da:	b922      	cbnz	r2, 81107e6 <quorem+0xea>
 81107dc:	3b04      	subs	r3, #4
 81107de:	429d      	cmp	r5, r3
 81107e0:	461a      	mov	r2, r3
 81107e2:	d30b      	bcc.n	81107fc <quorem+0x100>
 81107e4:	613c      	str	r4, [r7, #16]
 81107e6:	3601      	adds	r6, #1
 81107e8:	4630      	mov	r0, r6
 81107ea:	b003      	add	sp, #12
 81107ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81107f0:	6812      	ldr	r2, [r2, #0]
 81107f2:	3b04      	subs	r3, #4
 81107f4:	2a00      	cmp	r2, #0
 81107f6:	d1cb      	bne.n	8110790 <quorem+0x94>
 81107f8:	3c01      	subs	r4, #1
 81107fa:	e7c6      	b.n	811078a <quorem+0x8e>
 81107fc:	6812      	ldr	r2, [r2, #0]
 81107fe:	3b04      	subs	r3, #4
 8110800:	2a00      	cmp	r2, #0
 8110802:	d1ef      	bne.n	81107e4 <quorem+0xe8>
 8110804:	3c01      	subs	r4, #1
 8110806:	e7ea      	b.n	81107de <quorem+0xe2>
 8110808:	2000      	movs	r0, #0
 811080a:	e7ee      	b.n	81107ea <quorem+0xee>
 811080c:	0000      	movs	r0, r0
	...

08110810 <_dtoa_r>:
 8110810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110814:	69c7      	ldr	r7, [r0, #28]
 8110816:	b099      	sub	sp, #100	@ 0x64
 8110818:	ed8d 0b02 	vstr	d0, [sp, #8]
 811081c:	ec55 4b10 	vmov	r4, r5, d0
 8110820:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8110822:	9109      	str	r1, [sp, #36]	@ 0x24
 8110824:	4683      	mov	fp, r0
 8110826:	920e      	str	r2, [sp, #56]	@ 0x38
 8110828:	9313      	str	r3, [sp, #76]	@ 0x4c
 811082a:	b97f      	cbnz	r7, 811084c <_dtoa_r+0x3c>
 811082c:	2010      	movs	r0, #16
 811082e:	f000 fdfd 	bl	811142c <malloc>
 8110832:	4602      	mov	r2, r0
 8110834:	f8cb 001c 	str.w	r0, [fp, #28]
 8110838:	b920      	cbnz	r0, 8110844 <_dtoa_r+0x34>
 811083a:	4ba7      	ldr	r3, [pc, #668]	@ (8110ad8 <_dtoa_r+0x2c8>)
 811083c:	21ef      	movs	r1, #239	@ 0xef
 811083e:	48a7      	ldr	r0, [pc, #668]	@ (8110adc <_dtoa_r+0x2cc>)
 8110840:	f7ff ff3e 	bl	81106c0 <__assert_func>
 8110844:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8110848:	6007      	str	r7, [r0, #0]
 811084a:	60c7      	str	r7, [r0, #12]
 811084c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8110850:	6819      	ldr	r1, [r3, #0]
 8110852:	b159      	cbz	r1, 811086c <_dtoa_r+0x5c>
 8110854:	685a      	ldr	r2, [r3, #4]
 8110856:	604a      	str	r2, [r1, #4]
 8110858:	2301      	movs	r3, #1
 811085a:	4093      	lsls	r3, r2
 811085c:	608b      	str	r3, [r1, #8]
 811085e:	4658      	mov	r0, fp
 8110860:	f000 feda 	bl	8111618 <_Bfree>
 8110864:	f8db 301c 	ldr.w	r3, [fp, #28]
 8110868:	2200      	movs	r2, #0
 811086a:	601a      	str	r2, [r3, #0]
 811086c:	1e2b      	subs	r3, r5, #0
 811086e:	bfb9      	ittee	lt
 8110870:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8110874:	9303      	strlt	r3, [sp, #12]
 8110876:	2300      	movge	r3, #0
 8110878:	6033      	strge	r3, [r6, #0]
 811087a:	9f03      	ldr	r7, [sp, #12]
 811087c:	4b98      	ldr	r3, [pc, #608]	@ (8110ae0 <_dtoa_r+0x2d0>)
 811087e:	bfbc      	itt	lt
 8110880:	2201      	movlt	r2, #1
 8110882:	6032      	strlt	r2, [r6, #0]
 8110884:	43bb      	bics	r3, r7
 8110886:	d112      	bne.n	81108ae <_dtoa_r+0x9e>
 8110888:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 811088a:	f242 730f 	movw	r3, #9999	@ 0x270f
 811088e:	6013      	str	r3, [r2, #0]
 8110890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8110894:	4323      	orrs	r3, r4
 8110896:	f000 854d 	beq.w	8111334 <_dtoa_r+0xb24>
 811089a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 811089c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8110af4 <_dtoa_r+0x2e4>
 81108a0:	2b00      	cmp	r3, #0
 81108a2:	f000 854f 	beq.w	8111344 <_dtoa_r+0xb34>
 81108a6:	f10a 0303 	add.w	r3, sl, #3
 81108aa:	f000 bd49 	b.w	8111340 <_dtoa_r+0xb30>
 81108ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 81108b2:	2200      	movs	r2, #0
 81108b4:	ec51 0b17 	vmov	r0, r1, d7
 81108b8:	2300      	movs	r3, #0
 81108ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 81108be:	f7f0 f98b 	bl	8100bd8 <__aeabi_dcmpeq>
 81108c2:	4680      	mov	r8, r0
 81108c4:	b158      	cbz	r0, 81108de <_dtoa_r+0xce>
 81108c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 81108c8:	2301      	movs	r3, #1
 81108ca:	6013      	str	r3, [r2, #0]
 81108cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81108ce:	b113      	cbz	r3, 81108d6 <_dtoa_r+0xc6>
 81108d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 81108d2:	4b84      	ldr	r3, [pc, #528]	@ (8110ae4 <_dtoa_r+0x2d4>)
 81108d4:	6013      	str	r3, [r2, #0]
 81108d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8110af8 <_dtoa_r+0x2e8>
 81108da:	f000 bd33 	b.w	8111344 <_dtoa_r+0xb34>
 81108de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 81108e2:	aa16      	add	r2, sp, #88	@ 0x58
 81108e4:	a917      	add	r1, sp, #92	@ 0x5c
 81108e6:	4658      	mov	r0, fp
 81108e8:	f001 fa3a 	bl	8111d60 <__d2b>
 81108ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 81108f0:	4681      	mov	r9, r0
 81108f2:	2e00      	cmp	r6, #0
 81108f4:	d077      	beq.n	81109e6 <_dtoa_r+0x1d6>
 81108f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81108f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 81108fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8110904:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8110908:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 811090c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8110910:	4619      	mov	r1, r3
 8110912:	2200      	movs	r2, #0
 8110914:	4b74      	ldr	r3, [pc, #464]	@ (8110ae8 <_dtoa_r+0x2d8>)
 8110916:	f7ef fd3f 	bl	8100398 <__aeabi_dsub>
 811091a:	a369      	add	r3, pc, #420	@ (adr r3, 8110ac0 <_dtoa_r+0x2b0>)
 811091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110920:	f7ef fef2 	bl	8100708 <__aeabi_dmul>
 8110924:	a368      	add	r3, pc, #416	@ (adr r3, 8110ac8 <_dtoa_r+0x2b8>)
 8110926:	e9d3 2300 	ldrd	r2, r3, [r3]
 811092a:	f7ef fd37 	bl	810039c <__adddf3>
 811092e:	4604      	mov	r4, r0
 8110930:	4630      	mov	r0, r6
 8110932:	460d      	mov	r5, r1
 8110934:	f7ef fe7e 	bl	8100634 <__aeabi_i2d>
 8110938:	a365      	add	r3, pc, #404	@ (adr r3, 8110ad0 <_dtoa_r+0x2c0>)
 811093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811093e:	f7ef fee3 	bl	8100708 <__aeabi_dmul>
 8110942:	4602      	mov	r2, r0
 8110944:	460b      	mov	r3, r1
 8110946:	4620      	mov	r0, r4
 8110948:	4629      	mov	r1, r5
 811094a:	f7ef fd27 	bl	810039c <__adddf3>
 811094e:	4604      	mov	r4, r0
 8110950:	460d      	mov	r5, r1
 8110952:	f7f0 f989 	bl	8100c68 <__aeabi_d2iz>
 8110956:	2200      	movs	r2, #0
 8110958:	4607      	mov	r7, r0
 811095a:	2300      	movs	r3, #0
 811095c:	4620      	mov	r0, r4
 811095e:	4629      	mov	r1, r5
 8110960:	f7f0 f944 	bl	8100bec <__aeabi_dcmplt>
 8110964:	b140      	cbz	r0, 8110978 <_dtoa_r+0x168>
 8110966:	4638      	mov	r0, r7
 8110968:	f7ef fe64 	bl	8100634 <__aeabi_i2d>
 811096c:	4622      	mov	r2, r4
 811096e:	462b      	mov	r3, r5
 8110970:	f7f0 f932 	bl	8100bd8 <__aeabi_dcmpeq>
 8110974:	b900      	cbnz	r0, 8110978 <_dtoa_r+0x168>
 8110976:	3f01      	subs	r7, #1
 8110978:	2f16      	cmp	r7, #22
 811097a:	d851      	bhi.n	8110a20 <_dtoa_r+0x210>
 811097c:	4b5b      	ldr	r3, [pc, #364]	@ (8110aec <_dtoa_r+0x2dc>)
 811097e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8110982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 811098a:	f7f0 f92f 	bl	8100bec <__aeabi_dcmplt>
 811098e:	2800      	cmp	r0, #0
 8110990:	d048      	beq.n	8110a24 <_dtoa_r+0x214>
 8110992:	3f01      	subs	r7, #1
 8110994:	2300      	movs	r3, #0
 8110996:	9312      	str	r3, [sp, #72]	@ 0x48
 8110998:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 811099a:	1b9b      	subs	r3, r3, r6
 811099c:	1e5a      	subs	r2, r3, #1
 811099e:	bf44      	itt	mi
 81109a0:	f1c3 0801 	rsbmi	r8, r3, #1
 81109a4:	2300      	movmi	r3, #0
 81109a6:	9208      	str	r2, [sp, #32]
 81109a8:	bf54      	ite	pl
 81109aa:	f04f 0800 	movpl.w	r8, #0
 81109ae:	9308      	strmi	r3, [sp, #32]
 81109b0:	2f00      	cmp	r7, #0
 81109b2:	db39      	blt.n	8110a28 <_dtoa_r+0x218>
 81109b4:	9b08      	ldr	r3, [sp, #32]
 81109b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 81109b8:	443b      	add	r3, r7
 81109ba:	9308      	str	r3, [sp, #32]
 81109bc:	2300      	movs	r3, #0
 81109be:	930a      	str	r3, [sp, #40]	@ 0x28
 81109c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81109c2:	2b09      	cmp	r3, #9
 81109c4:	d864      	bhi.n	8110a90 <_dtoa_r+0x280>
 81109c6:	2b05      	cmp	r3, #5
 81109c8:	bfc4      	itt	gt
 81109ca:	3b04      	subgt	r3, #4
 81109cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 81109ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81109d0:	f1a3 0302 	sub.w	r3, r3, #2
 81109d4:	bfcc      	ite	gt
 81109d6:	2400      	movgt	r4, #0
 81109d8:	2401      	movle	r4, #1
 81109da:	2b03      	cmp	r3, #3
 81109dc:	d863      	bhi.n	8110aa6 <_dtoa_r+0x296>
 81109de:	e8df f003 	tbb	[pc, r3]
 81109e2:	372a      	.short	0x372a
 81109e4:	5535      	.short	0x5535
 81109e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 81109ea:	441e      	add	r6, r3
 81109ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 81109f0:	2b20      	cmp	r3, #32
 81109f2:	bfc1      	itttt	gt
 81109f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 81109f8:	409f      	lslgt	r7, r3
 81109fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 81109fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8110a02:	bfd6      	itet	le
 8110a04:	f1c3 0320 	rsble	r3, r3, #32
 8110a08:	ea47 0003 	orrgt.w	r0, r7, r3
 8110a0c:	fa04 f003 	lslle.w	r0, r4, r3
 8110a10:	f7ef fe00 	bl	8100614 <__aeabi_ui2d>
 8110a14:	2201      	movs	r2, #1
 8110a16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8110a1a:	3e01      	subs	r6, #1
 8110a1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8110a1e:	e777      	b.n	8110910 <_dtoa_r+0x100>
 8110a20:	2301      	movs	r3, #1
 8110a22:	e7b8      	b.n	8110996 <_dtoa_r+0x186>
 8110a24:	9012      	str	r0, [sp, #72]	@ 0x48
 8110a26:	e7b7      	b.n	8110998 <_dtoa_r+0x188>
 8110a28:	427b      	negs	r3, r7
 8110a2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8110a2c:	2300      	movs	r3, #0
 8110a2e:	eba8 0807 	sub.w	r8, r8, r7
 8110a32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8110a34:	e7c4      	b.n	81109c0 <_dtoa_r+0x1b0>
 8110a36:	2300      	movs	r3, #0
 8110a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110a3c:	2b00      	cmp	r3, #0
 8110a3e:	dc35      	bgt.n	8110aac <_dtoa_r+0x29c>
 8110a40:	2301      	movs	r3, #1
 8110a42:	9300      	str	r3, [sp, #0]
 8110a44:	9307      	str	r3, [sp, #28]
 8110a46:	461a      	mov	r2, r3
 8110a48:	920e      	str	r2, [sp, #56]	@ 0x38
 8110a4a:	e00b      	b.n	8110a64 <_dtoa_r+0x254>
 8110a4c:	2301      	movs	r3, #1
 8110a4e:	e7f3      	b.n	8110a38 <_dtoa_r+0x228>
 8110a50:	2300      	movs	r3, #0
 8110a52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110a54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110a56:	18fb      	adds	r3, r7, r3
 8110a58:	9300      	str	r3, [sp, #0]
 8110a5a:	3301      	adds	r3, #1
 8110a5c:	2b01      	cmp	r3, #1
 8110a5e:	9307      	str	r3, [sp, #28]
 8110a60:	bfb8      	it	lt
 8110a62:	2301      	movlt	r3, #1
 8110a64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8110a68:	2100      	movs	r1, #0
 8110a6a:	2204      	movs	r2, #4
 8110a6c:	f102 0514 	add.w	r5, r2, #20
 8110a70:	429d      	cmp	r5, r3
 8110a72:	d91f      	bls.n	8110ab4 <_dtoa_r+0x2a4>
 8110a74:	6041      	str	r1, [r0, #4]
 8110a76:	4658      	mov	r0, fp
 8110a78:	f000 fd8e 	bl	8111598 <_Balloc>
 8110a7c:	4682      	mov	sl, r0
 8110a7e:	2800      	cmp	r0, #0
 8110a80:	d13c      	bne.n	8110afc <_dtoa_r+0x2ec>
 8110a82:	4b1b      	ldr	r3, [pc, #108]	@ (8110af0 <_dtoa_r+0x2e0>)
 8110a84:	4602      	mov	r2, r0
 8110a86:	f240 11af 	movw	r1, #431	@ 0x1af
 8110a8a:	e6d8      	b.n	811083e <_dtoa_r+0x2e>
 8110a8c:	2301      	movs	r3, #1
 8110a8e:	e7e0      	b.n	8110a52 <_dtoa_r+0x242>
 8110a90:	2401      	movs	r4, #1
 8110a92:	2300      	movs	r3, #0
 8110a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8110a96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8110a98:	f04f 33ff 	mov.w	r3, #4294967295
 8110a9c:	9300      	str	r3, [sp, #0]
 8110a9e:	9307      	str	r3, [sp, #28]
 8110aa0:	2200      	movs	r2, #0
 8110aa2:	2312      	movs	r3, #18
 8110aa4:	e7d0      	b.n	8110a48 <_dtoa_r+0x238>
 8110aa6:	2301      	movs	r3, #1
 8110aa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8110aaa:	e7f5      	b.n	8110a98 <_dtoa_r+0x288>
 8110aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110aae:	9300      	str	r3, [sp, #0]
 8110ab0:	9307      	str	r3, [sp, #28]
 8110ab2:	e7d7      	b.n	8110a64 <_dtoa_r+0x254>
 8110ab4:	3101      	adds	r1, #1
 8110ab6:	0052      	lsls	r2, r2, #1
 8110ab8:	e7d8      	b.n	8110a6c <_dtoa_r+0x25c>
 8110aba:	bf00      	nop
 8110abc:	f3af 8000 	nop.w
 8110ac0:	636f4361 	.word	0x636f4361
 8110ac4:	3fd287a7 	.word	0x3fd287a7
 8110ac8:	8b60c8b3 	.word	0x8b60c8b3
 8110acc:	3fc68a28 	.word	0x3fc68a28
 8110ad0:	509f79fb 	.word	0x509f79fb
 8110ad4:	3fd34413 	.word	0x3fd34413
 8110ad8:	08113d00 	.word	0x08113d00
 8110adc:	08113df1 	.word	0x08113df1
 8110ae0:	7ff00000 	.word	0x7ff00000
 8110ae4:	08113d80 	.word	0x08113d80
 8110ae8:	3ff80000 	.word	0x3ff80000
 8110aec:	08113ee8 	.word	0x08113ee8
 8110af0:	08113e49 	.word	0x08113e49
 8110af4:	08113ded 	.word	0x08113ded
 8110af8:	08113d7f 	.word	0x08113d7f
 8110afc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8110b00:	6018      	str	r0, [r3, #0]
 8110b02:	9b07      	ldr	r3, [sp, #28]
 8110b04:	2b0e      	cmp	r3, #14
 8110b06:	f200 80a4 	bhi.w	8110c52 <_dtoa_r+0x442>
 8110b0a:	2c00      	cmp	r4, #0
 8110b0c:	f000 80a1 	beq.w	8110c52 <_dtoa_r+0x442>
 8110b10:	2f00      	cmp	r7, #0
 8110b12:	dd33      	ble.n	8110b7c <_dtoa_r+0x36c>
 8110b14:	4bad      	ldr	r3, [pc, #692]	@ (8110dcc <_dtoa_r+0x5bc>)
 8110b16:	f007 020f 	and.w	r2, r7, #15
 8110b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8110b1e:	ed93 7b00 	vldr	d7, [r3]
 8110b22:	05f8      	lsls	r0, r7, #23
 8110b24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8110b28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8110b2c:	d516      	bpl.n	8110b5c <_dtoa_r+0x34c>
 8110b2e:	4ba8      	ldr	r3, [pc, #672]	@ (8110dd0 <_dtoa_r+0x5c0>)
 8110b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8110b34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8110b38:	f7ef ff10 	bl	810095c <__aeabi_ddiv>
 8110b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110b40:	f004 040f 	and.w	r4, r4, #15
 8110b44:	2603      	movs	r6, #3
 8110b46:	4da2      	ldr	r5, [pc, #648]	@ (8110dd0 <_dtoa_r+0x5c0>)
 8110b48:	b954      	cbnz	r4, 8110b60 <_dtoa_r+0x350>
 8110b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110b52:	f7ef ff03 	bl	810095c <__aeabi_ddiv>
 8110b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110b5a:	e028      	b.n	8110bae <_dtoa_r+0x39e>
 8110b5c:	2602      	movs	r6, #2
 8110b5e:	e7f2      	b.n	8110b46 <_dtoa_r+0x336>
 8110b60:	07e1      	lsls	r1, r4, #31
 8110b62:	d508      	bpl.n	8110b76 <_dtoa_r+0x366>
 8110b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110b68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8110b6c:	f7ef fdcc 	bl	8100708 <__aeabi_dmul>
 8110b70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8110b74:	3601      	adds	r6, #1
 8110b76:	1064      	asrs	r4, r4, #1
 8110b78:	3508      	adds	r5, #8
 8110b7a:	e7e5      	b.n	8110b48 <_dtoa_r+0x338>
 8110b7c:	f000 80d2 	beq.w	8110d24 <_dtoa_r+0x514>
 8110b80:	427c      	negs	r4, r7
 8110b82:	4b92      	ldr	r3, [pc, #584]	@ (8110dcc <_dtoa_r+0x5bc>)
 8110b84:	4d92      	ldr	r5, [pc, #584]	@ (8110dd0 <_dtoa_r+0x5c0>)
 8110b86:	f004 020f 	and.w	r2, r4, #15
 8110b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8110b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110b92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8110b96:	f7ef fdb7 	bl	8100708 <__aeabi_dmul>
 8110b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110b9e:	1124      	asrs	r4, r4, #4
 8110ba0:	2300      	movs	r3, #0
 8110ba2:	2602      	movs	r6, #2
 8110ba4:	2c00      	cmp	r4, #0
 8110ba6:	f040 80b2 	bne.w	8110d0e <_dtoa_r+0x4fe>
 8110baa:	2b00      	cmp	r3, #0
 8110bac:	d1d3      	bne.n	8110b56 <_dtoa_r+0x346>
 8110bae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8110bb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8110bb4:	2b00      	cmp	r3, #0
 8110bb6:	f000 80b7 	beq.w	8110d28 <_dtoa_r+0x518>
 8110bba:	4b86      	ldr	r3, [pc, #536]	@ (8110dd4 <_dtoa_r+0x5c4>)
 8110bbc:	2200      	movs	r2, #0
 8110bbe:	4620      	mov	r0, r4
 8110bc0:	4629      	mov	r1, r5
 8110bc2:	f7f0 f813 	bl	8100bec <__aeabi_dcmplt>
 8110bc6:	2800      	cmp	r0, #0
 8110bc8:	f000 80ae 	beq.w	8110d28 <_dtoa_r+0x518>
 8110bcc:	9b07      	ldr	r3, [sp, #28]
 8110bce:	2b00      	cmp	r3, #0
 8110bd0:	f000 80aa 	beq.w	8110d28 <_dtoa_r+0x518>
 8110bd4:	9b00      	ldr	r3, [sp, #0]
 8110bd6:	2b00      	cmp	r3, #0
 8110bd8:	dd37      	ble.n	8110c4a <_dtoa_r+0x43a>
 8110bda:	1e7b      	subs	r3, r7, #1
 8110bdc:	9304      	str	r3, [sp, #16]
 8110bde:	4620      	mov	r0, r4
 8110be0:	4b7d      	ldr	r3, [pc, #500]	@ (8110dd8 <_dtoa_r+0x5c8>)
 8110be2:	2200      	movs	r2, #0
 8110be4:	4629      	mov	r1, r5
 8110be6:	f7ef fd8f 	bl	8100708 <__aeabi_dmul>
 8110bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110bee:	9c00      	ldr	r4, [sp, #0]
 8110bf0:	3601      	adds	r6, #1
 8110bf2:	4630      	mov	r0, r6
 8110bf4:	f7ef fd1e 	bl	8100634 <__aeabi_i2d>
 8110bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110bfc:	f7ef fd84 	bl	8100708 <__aeabi_dmul>
 8110c00:	4b76      	ldr	r3, [pc, #472]	@ (8110ddc <_dtoa_r+0x5cc>)
 8110c02:	2200      	movs	r2, #0
 8110c04:	f7ef fbca 	bl	810039c <__adddf3>
 8110c08:	4605      	mov	r5, r0
 8110c0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8110c0e:	2c00      	cmp	r4, #0
 8110c10:	f040 808d 	bne.w	8110d2e <_dtoa_r+0x51e>
 8110c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110c18:	4b71      	ldr	r3, [pc, #452]	@ (8110de0 <_dtoa_r+0x5d0>)
 8110c1a:	2200      	movs	r2, #0
 8110c1c:	f7ef fbbc 	bl	8100398 <__aeabi_dsub>
 8110c20:	4602      	mov	r2, r0
 8110c22:	460b      	mov	r3, r1
 8110c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110c28:	462a      	mov	r2, r5
 8110c2a:	4633      	mov	r3, r6
 8110c2c:	f7ef fffc 	bl	8100c28 <__aeabi_dcmpgt>
 8110c30:	2800      	cmp	r0, #0
 8110c32:	f040 828b 	bne.w	811114c <_dtoa_r+0x93c>
 8110c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110c3a:	462a      	mov	r2, r5
 8110c3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8110c40:	f7ef ffd4 	bl	8100bec <__aeabi_dcmplt>
 8110c44:	2800      	cmp	r0, #0
 8110c46:	f040 8128 	bne.w	8110e9a <_dtoa_r+0x68a>
 8110c4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8110c4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8110c52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8110c54:	2b00      	cmp	r3, #0
 8110c56:	f2c0 815a 	blt.w	8110f0e <_dtoa_r+0x6fe>
 8110c5a:	2f0e      	cmp	r7, #14
 8110c5c:	f300 8157 	bgt.w	8110f0e <_dtoa_r+0x6fe>
 8110c60:	4b5a      	ldr	r3, [pc, #360]	@ (8110dcc <_dtoa_r+0x5bc>)
 8110c62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8110c66:	ed93 7b00 	vldr	d7, [r3]
 8110c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110c6c:	2b00      	cmp	r3, #0
 8110c6e:	ed8d 7b00 	vstr	d7, [sp]
 8110c72:	da03      	bge.n	8110c7c <_dtoa_r+0x46c>
 8110c74:	9b07      	ldr	r3, [sp, #28]
 8110c76:	2b00      	cmp	r3, #0
 8110c78:	f340 8101 	ble.w	8110e7e <_dtoa_r+0x66e>
 8110c7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8110c80:	4656      	mov	r6, sl
 8110c82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110c86:	4620      	mov	r0, r4
 8110c88:	4629      	mov	r1, r5
 8110c8a:	f7ef fe67 	bl	810095c <__aeabi_ddiv>
 8110c8e:	f7ef ffeb 	bl	8100c68 <__aeabi_d2iz>
 8110c92:	4680      	mov	r8, r0
 8110c94:	f7ef fcce 	bl	8100634 <__aeabi_i2d>
 8110c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110c9c:	f7ef fd34 	bl	8100708 <__aeabi_dmul>
 8110ca0:	4602      	mov	r2, r0
 8110ca2:	460b      	mov	r3, r1
 8110ca4:	4620      	mov	r0, r4
 8110ca6:	4629      	mov	r1, r5
 8110ca8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8110cac:	f7ef fb74 	bl	8100398 <__aeabi_dsub>
 8110cb0:	f806 4b01 	strb.w	r4, [r6], #1
 8110cb4:	9d07      	ldr	r5, [sp, #28]
 8110cb6:	eba6 040a 	sub.w	r4, r6, sl
 8110cba:	42a5      	cmp	r5, r4
 8110cbc:	4602      	mov	r2, r0
 8110cbe:	460b      	mov	r3, r1
 8110cc0:	f040 8117 	bne.w	8110ef2 <_dtoa_r+0x6e2>
 8110cc4:	f7ef fb6a 	bl	810039c <__adddf3>
 8110cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110ccc:	4604      	mov	r4, r0
 8110cce:	460d      	mov	r5, r1
 8110cd0:	f7ef ffaa 	bl	8100c28 <__aeabi_dcmpgt>
 8110cd4:	2800      	cmp	r0, #0
 8110cd6:	f040 80f9 	bne.w	8110ecc <_dtoa_r+0x6bc>
 8110cda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110cde:	4620      	mov	r0, r4
 8110ce0:	4629      	mov	r1, r5
 8110ce2:	f7ef ff79 	bl	8100bd8 <__aeabi_dcmpeq>
 8110ce6:	b118      	cbz	r0, 8110cf0 <_dtoa_r+0x4e0>
 8110ce8:	f018 0f01 	tst.w	r8, #1
 8110cec:	f040 80ee 	bne.w	8110ecc <_dtoa_r+0x6bc>
 8110cf0:	4649      	mov	r1, r9
 8110cf2:	4658      	mov	r0, fp
 8110cf4:	f000 fc90 	bl	8111618 <_Bfree>
 8110cf8:	2300      	movs	r3, #0
 8110cfa:	7033      	strb	r3, [r6, #0]
 8110cfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8110cfe:	3701      	adds	r7, #1
 8110d00:	601f      	str	r7, [r3, #0]
 8110d02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8110d04:	2b00      	cmp	r3, #0
 8110d06:	f000 831d 	beq.w	8111344 <_dtoa_r+0xb34>
 8110d0a:	601e      	str	r6, [r3, #0]
 8110d0c:	e31a      	b.n	8111344 <_dtoa_r+0xb34>
 8110d0e:	07e2      	lsls	r2, r4, #31
 8110d10:	d505      	bpl.n	8110d1e <_dtoa_r+0x50e>
 8110d12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8110d16:	f7ef fcf7 	bl	8100708 <__aeabi_dmul>
 8110d1a:	3601      	adds	r6, #1
 8110d1c:	2301      	movs	r3, #1
 8110d1e:	1064      	asrs	r4, r4, #1
 8110d20:	3508      	adds	r5, #8
 8110d22:	e73f      	b.n	8110ba4 <_dtoa_r+0x394>
 8110d24:	2602      	movs	r6, #2
 8110d26:	e742      	b.n	8110bae <_dtoa_r+0x39e>
 8110d28:	9c07      	ldr	r4, [sp, #28]
 8110d2a:	9704      	str	r7, [sp, #16]
 8110d2c:	e761      	b.n	8110bf2 <_dtoa_r+0x3e2>
 8110d2e:	4b27      	ldr	r3, [pc, #156]	@ (8110dcc <_dtoa_r+0x5bc>)
 8110d30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8110d32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8110d36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8110d3a:	4454      	add	r4, sl
 8110d3c:	2900      	cmp	r1, #0
 8110d3e:	d053      	beq.n	8110de8 <_dtoa_r+0x5d8>
 8110d40:	4928      	ldr	r1, [pc, #160]	@ (8110de4 <_dtoa_r+0x5d4>)
 8110d42:	2000      	movs	r0, #0
 8110d44:	f7ef fe0a 	bl	810095c <__aeabi_ddiv>
 8110d48:	4633      	mov	r3, r6
 8110d4a:	462a      	mov	r2, r5
 8110d4c:	f7ef fb24 	bl	8100398 <__aeabi_dsub>
 8110d50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110d54:	4656      	mov	r6, sl
 8110d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110d5a:	f7ef ff85 	bl	8100c68 <__aeabi_d2iz>
 8110d5e:	4605      	mov	r5, r0
 8110d60:	f7ef fc68 	bl	8100634 <__aeabi_i2d>
 8110d64:	4602      	mov	r2, r0
 8110d66:	460b      	mov	r3, r1
 8110d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110d6c:	f7ef fb14 	bl	8100398 <__aeabi_dsub>
 8110d70:	3530      	adds	r5, #48	@ 0x30
 8110d72:	4602      	mov	r2, r0
 8110d74:	460b      	mov	r3, r1
 8110d76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110d7a:	f806 5b01 	strb.w	r5, [r6], #1
 8110d7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110d82:	f7ef ff33 	bl	8100bec <__aeabi_dcmplt>
 8110d86:	2800      	cmp	r0, #0
 8110d88:	d171      	bne.n	8110e6e <_dtoa_r+0x65e>
 8110d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110d8e:	4911      	ldr	r1, [pc, #68]	@ (8110dd4 <_dtoa_r+0x5c4>)
 8110d90:	2000      	movs	r0, #0
 8110d92:	f7ef fb01 	bl	8100398 <__aeabi_dsub>
 8110d96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110d9a:	f7ef ff27 	bl	8100bec <__aeabi_dcmplt>
 8110d9e:	2800      	cmp	r0, #0
 8110da0:	f040 8095 	bne.w	8110ece <_dtoa_r+0x6be>
 8110da4:	42a6      	cmp	r6, r4
 8110da6:	f43f af50 	beq.w	8110c4a <_dtoa_r+0x43a>
 8110daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8110dae:	4b0a      	ldr	r3, [pc, #40]	@ (8110dd8 <_dtoa_r+0x5c8>)
 8110db0:	2200      	movs	r2, #0
 8110db2:	f7ef fca9 	bl	8100708 <__aeabi_dmul>
 8110db6:	4b08      	ldr	r3, [pc, #32]	@ (8110dd8 <_dtoa_r+0x5c8>)
 8110db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110dbc:	2200      	movs	r2, #0
 8110dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110dc2:	f7ef fca1 	bl	8100708 <__aeabi_dmul>
 8110dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110dca:	e7c4      	b.n	8110d56 <_dtoa_r+0x546>
 8110dcc:	08113ee8 	.word	0x08113ee8
 8110dd0:	08113ec0 	.word	0x08113ec0
 8110dd4:	3ff00000 	.word	0x3ff00000
 8110dd8:	40240000 	.word	0x40240000
 8110ddc:	401c0000 	.word	0x401c0000
 8110de0:	40140000 	.word	0x40140000
 8110de4:	3fe00000 	.word	0x3fe00000
 8110de8:	4631      	mov	r1, r6
 8110dea:	4628      	mov	r0, r5
 8110dec:	f7ef fc8c 	bl	8100708 <__aeabi_dmul>
 8110df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8110df4:	9415      	str	r4, [sp, #84]	@ 0x54
 8110df6:	4656      	mov	r6, sl
 8110df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110dfc:	f7ef ff34 	bl	8100c68 <__aeabi_d2iz>
 8110e00:	4605      	mov	r5, r0
 8110e02:	f7ef fc17 	bl	8100634 <__aeabi_i2d>
 8110e06:	4602      	mov	r2, r0
 8110e08:	460b      	mov	r3, r1
 8110e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110e0e:	f7ef fac3 	bl	8100398 <__aeabi_dsub>
 8110e12:	3530      	adds	r5, #48	@ 0x30
 8110e14:	f806 5b01 	strb.w	r5, [r6], #1
 8110e18:	4602      	mov	r2, r0
 8110e1a:	460b      	mov	r3, r1
 8110e1c:	42a6      	cmp	r6, r4
 8110e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8110e22:	f04f 0200 	mov.w	r2, #0
 8110e26:	d124      	bne.n	8110e72 <_dtoa_r+0x662>
 8110e28:	4bac      	ldr	r3, [pc, #688]	@ (81110dc <_dtoa_r+0x8cc>)
 8110e2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8110e2e:	f7ef fab5 	bl	810039c <__adddf3>
 8110e32:	4602      	mov	r2, r0
 8110e34:	460b      	mov	r3, r1
 8110e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110e3a:	f7ef fef5 	bl	8100c28 <__aeabi_dcmpgt>
 8110e3e:	2800      	cmp	r0, #0
 8110e40:	d145      	bne.n	8110ece <_dtoa_r+0x6be>
 8110e42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8110e46:	49a5      	ldr	r1, [pc, #660]	@ (81110dc <_dtoa_r+0x8cc>)
 8110e48:	2000      	movs	r0, #0
 8110e4a:	f7ef faa5 	bl	8100398 <__aeabi_dsub>
 8110e4e:	4602      	mov	r2, r0
 8110e50:	460b      	mov	r3, r1
 8110e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8110e56:	f7ef fec9 	bl	8100bec <__aeabi_dcmplt>
 8110e5a:	2800      	cmp	r0, #0
 8110e5c:	f43f aef5 	beq.w	8110c4a <_dtoa_r+0x43a>
 8110e60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8110e62:	1e73      	subs	r3, r6, #1
 8110e64:	9315      	str	r3, [sp, #84]	@ 0x54
 8110e66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8110e6a:	2b30      	cmp	r3, #48	@ 0x30
 8110e6c:	d0f8      	beq.n	8110e60 <_dtoa_r+0x650>
 8110e6e:	9f04      	ldr	r7, [sp, #16]
 8110e70:	e73e      	b.n	8110cf0 <_dtoa_r+0x4e0>
 8110e72:	4b9b      	ldr	r3, [pc, #620]	@ (81110e0 <_dtoa_r+0x8d0>)
 8110e74:	f7ef fc48 	bl	8100708 <__aeabi_dmul>
 8110e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8110e7c:	e7bc      	b.n	8110df8 <_dtoa_r+0x5e8>
 8110e7e:	d10c      	bne.n	8110e9a <_dtoa_r+0x68a>
 8110e80:	4b98      	ldr	r3, [pc, #608]	@ (81110e4 <_dtoa_r+0x8d4>)
 8110e82:	2200      	movs	r2, #0
 8110e84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8110e88:	f7ef fc3e 	bl	8100708 <__aeabi_dmul>
 8110e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8110e90:	f7ef fec0 	bl	8100c14 <__aeabi_dcmpge>
 8110e94:	2800      	cmp	r0, #0
 8110e96:	f000 8157 	beq.w	8111148 <_dtoa_r+0x938>
 8110e9a:	2400      	movs	r4, #0
 8110e9c:	4625      	mov	r5, r4
 8110e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8110ea0:	43db      	mvns	r3, r3
 8110ea2:	9304      	str	r3, [sp, #16]
 8110ea4:	4656      	mov	r6, sl
 8110ea6:	2700      	movs	r7, #0
 8110ea8:	4621      	mov	r1, r4
 8110eaa:	4658      	mov	r0, fp
 8110eac:	f000 fbb4 	bl	8111618 <_Bfree>
 8110eb0:	2d00      	cmp	r5, #0
 8110eb2:	d0dc      	beq.n	8110e6e <_dtoa_r+0x65e>
 8110eb4:	b12f      	cbz	r7, 8110ec2 <_dtoa_r+0x6b2>
 8110eb6:	42af      	cmp	r7, r5
 8110eb8:	d003      	beq.n	8110ec2 <_dtoa_r+0x6b2>
 8110eba:	4639      	mov	r1, r7
 8110ebc:	4658      	mov	r0, fp
 8110ebe:	f000 fbab 	bl	8111618 <_Bfree>
 8110ec2:	4629      	mov	r1, r5
 8110ec4:	4658      	mov	r0, fp
 8110ec6:	f000 fba7 	bl	8111618 <_Bfree>
 8110eca:	e7d0      	b.n	8110e6e <_dtoa_r+0x65e>
 8110ecc:	9704      	str	r7, [sp, #16]
 8110ece:	4633      	mov	r3, r6
 8110ed0:	461e      	mov	r6, r3
 8110ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110ed6:	2a39      	cmp	r2, #57	@ 0x39
 8110ed8:	d107      	bne.n	8110eea <_dtoa_r+0x6da>
 8110eda:	459a      	cmp	sl, r3
 8110edc:	d1f8      	bne.n	8110ed0 <_dtoa_r+0x6c0>
 8110ede:	9a04      	ldr	r2, [sp, #16]
 8110ee0:	3201      	adds	r2, #1
 8110ee2:	9204      	str	r2, [sp, #16]
 8110ee4:	2230      	movs	r2, #48	@ 0x30
 8110ee6:	f88a 2000 	strb.w	r2, [sl]
 8110eea:	781a      	ldrb	r2, [r3, #0]
 8110eec:	3201      	adds	r2, #1
 8110eee:	701a      	strb	r2, [r3, #0]
 8110ef0:	e7bd      	b.n	8110e6e <_dtoa_r+0x65e>
 8110ef2:	4b7b      	ldr	r3, [pc, #492]	@ (81110e0 <_dtoa_r+0x8d0>)
 8110ef4:	2200      	movs	r2, #0
 8110ef6:	f7ef fc07 	bl	8100708 <__aeabi_dmul>
 8110efa:	2200      	movs	r2, #0
 8110efc:	2300      	movs	r3, #0
 8110efe:	4604      	mov	r4, r0
 8110f00:	460d      	mov	r5, r1
 8110f02:	f7ef fe69 	bl	8100bd8 <__aeabi_dcmpeq>
 8110f06:	2800      	cmp	r0, #0
 8110f08:	f43f aebb 	beq.w	8110c82 <_dtoa_r+0x472>
 8110f0c:	e6f0      	b.n	8110cf0 <_dtoa_r+0x4e0>
 8110f0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8110f10:	2a00      	cmp	r2, #0
 8110f12:	f000 80db 	beq.w	81110cc <_dtoa_r+0x8bc>
 8110f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8110f18:	2a01      	cmp	r2, #1
 8110f1a:	f300 80bf 	bgt.w	811109c <_dtoa_r+0x88c>
 8110f1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8110f20:	2a00      	cmp	r2, #0
 8110f22:	f000 80b7 	beq.w	8111094 <_dtoa_r+0x884>
 8110f26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8110f2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8110f2c:	4646      	mov	r6, r8
 8110f2e:	9a08      	ldr	r2, [sp, #32]
 8110f30:	2101      	movs	r1, #1
 8110f32:	441a      	add	r2, r3
 8110f34:	4658      	mov	r0, fp
 8110f36:	4498      	add	r8, r3
 8110f38:	9208      	str	r2, [sp, #32]
 8110f3a:	f000 fc6b 	bl	8111814 <__i2b>
 8110f3e:	4605      	mov	r5, r0
 8110f40:	b15e      	cbz	r6, 8110f5a <_dtoa_r+0x74a>
 8110f42:	9b08      	ldr	r3, [sp, #32]
 8110f44:	2b00      	cmp	r3, #0
 8110f46:	dd08      	ble.n	8110f5a <_dtoa_r+0x74a>
 8110f48:	42b3      	cmp	r3, r6
 8110f4a:	9a08      	ldr	r2, [sp, #32]
 8110f4c:	bfa8      	it	ge
 8110f4e:	4633      	movge	r3, r6
 8110f50:	eba8 0803 	sub.w	r8, r8, r3
 8110f54:	1af6      	subs	r6, r6, r3
 8110f56:	1ad3      	subs	r3, r2, r3
 8110f58:	9308      	str	r3, [sp, #32]
 8110f5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110f5c:	b1f3      	cbz	r3, 8110f9c <_dtoa_r+0x78c>
 8110f5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110f60:	2b00      	cmp	r3, #0
 8110f62:	f000 80b7 	beq.w	81110d4 <_dtoa_r+0x8c4>
 8110f66:	b18c      	cbz	r4, 8110f8c <_dtoa_r+0x77c>
 8110f68:	4629      	mov	r1, r5
 8110f6a:	4622      	mov	r2, r4
 8110f6c:	4658      	mov	r0, fp
 8110f6e:	f000 fd11 	bl	8111994 <__pow5mult>
 8110f72:	464a      	mov	r2, r9
 8110f74:	4601      	mov	r1, r0
 8110f76:	4605      	mov	r5, r0
 8110f78:	4658      	mov	r0, fp
 8110f7a:	f000 fc61 	bl	8111840 <__multiply>
 8110f7e:	4649      	mov	r1, r9
 8110f80:	9004      	str	r0, [sp, #16]
 8110f82:	4658      	mov	r0, fp
 8110f84:	f000 fb48 	bl	8111618 <_Bfree>
 8110f88:	9b04      	ldr	r3, [sp, #16]
 8110f8a:	4699      	mov	r9, r3
 8110f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8110f8e:	1b1a      	subs	r2, r3, r4
 8110f90:	d004      	beq.n	8110f9c <_dtoa_r+0x78c>
 8110f92:	4649      	mov	r1, r9
 8110f94:	4658      	mov	r0, fp
 8110f96:	f000 fcfd 	bl	8111994 <__pow5mult>
 8110f9a:	4681      	mov	r9, r0
 8110f9c:	2101      	movs	r1, #1
 8110f9e:	4658      	mov	r0, fp
 8110fa0:	f000 fc38 	bl	8111814 <__i2b>
 8110fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110fa6:	4604      	mov	r4, r0
 8110fa8:	2b00      	cmp	r3, #0
 8110faa:	f000 81cf 	beq.w	811134c <_dtoa_r+0xb3c>
 8110fae:	461a      	mov	r2, r3
 8110fb0:	4601      	mov	r1, r0
 8110fb2:	4658      	mov	r0, fp
 8110fb4:	f000 fcee 	bl	8111994 <__pow5mult>
 8110fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110fba:	2b01      	cmp	r3, #1
 8110fbc:	4604      	mov	r4, r0
 8110fbe:	f300 8095 	bgt.w	81110ec <_dtoa_r+0x8dc>
 8110fc2:	9b02      	ldr	r3, [sp, #8]
 8110fc4:	2b00      	cmp	r3, #0
 8110fc6:	f040 8087 	bne.w	81110d8 <_dtoa_r+0x8c8>
 8110fca:	9b03      	ldr	r3, [sp, #12]
 8110fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110fd0:	2b00      	cmp	r3, #0
 8110fd2:	f040 8089 	bne.w	81110e8 <_dtoa_r+0x8d8>
 8110fd6:	9b03      	ldr	r3, [sp, #12]
 8110fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8110fdc:	0d1b      	lsrs	r3, r3, #20
 8110fde:	051b      	lsls	r3, r3, #20
 8110fe0:	b12b      	cbz	r3, 8110fee <_dtoa_r+0x7de>
 8110fe2:	9b08      	ldr	r3, [sp, #32]
 8110fe4:	3301      	adds	r3, #1
 8110fe6:	9308      	str	r3, [sp, #32]
 8110fe8:	f108 0801 	add.w	r8, r8, #1
 8110fec:	2301      	movs	r3, #1
 8110fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8110ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8110ff2:	2b00      	cmp	r3, #0
 8110ff4:	f000 81b0 	beq.w	8111358 <_dtoa_r+0xb48>
 8110ff8:	6923      	ldr	r3, [r4, #16]
 8110ffa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8110ffe:	6918      	ldr	r0, [r3, #16]
 8111000:	f000 fbbc 	bl	811177c <__hi0bits>
 8111004:	f1c0 0020 	rsb	r0, r0, #32
 8111008:	9b08      	ldr	r3, [sp, #32]
 811100a:	4418      	add	r0, r3
 811100c:	f010 001f 	ands.w	r0, r0, #31
 8111010:	d077      	beq.n	8111102 <_dtoa_r+0x8f2>
 8111012:	f1c0 0320 	rsb	r3, r0, #32
 8111016:	2b04      	cmp	r3, #4
 8111018:	dd6b      	ble.n	81110f2 <_dtoa_r+0x8e2>
 811101a:	9b08      	ldr	r3, [sp, #32]
 811101c:	f1c0 001c 	rsb	r0, r0, #28
 8111020:	4403      	add	r3, r0
 8111022:	4480      	add	r8, r0
 8111024:	4406      	add	r6, r0
 8111026:	9308      	str	r3, [sp, #32]
 8111028:	f1b8 0f00 	cmp.w	r8, #0
 811102c:	dd05      	ble.n	811103a <_dtoa_r+0x82a>
 811102e:	4649      	mov	r1, r9
 8111030:	4642      	mov	r2, r8
 8111032:	4658      	mov	r0, fp
 8111034:	f000 fd08 	bl	8111a48 <__lshift>
 8111038:	4681      	mov	r9, r0
 811103a:	9b08      	ldr	r3, [sp, #32]
 811103c:	2b00      	cmp	r3, #0
 811103e:	dd05      	ble.n	811104c <_dtoa_r+0x83c>
 8111040:	4621      	mov	r1, r4
 8111042:	461a      	mov	r2, r3
 8111044:	4658      	mov	r0, fp
 8111046:	f000 fcff 	bl	8111a48 <__lshift>
 811104a:	4604      	mov	r4, r0
 811104c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 811104e:	2b00      	cmp	r3, #0
 8111050:	d059      	beq.n	8111106 <_dtoa_r+0x8f6>
 8111052:	4621      	mov	r1, r4
 8111054:	4648      	mov	r0, r9
 8111056:	f000 fd63 	bl	8111b20 <__mcmp>
 811105a:	2800      	cmp	r0, #0
 811105c:	da53      	bge.n	8111106 <_dtoa_r+0x8f6>
 811105e:	1e7b      	subs	r3, r7, #1
 8111060:	9304      	str	r3, [sp, #16]
 8111062:	4649      	mov	r1, r9
 8111064:	2300      	movs	r3, #0
 8111066:	220a      	movs	r2, #10
 8111068:	4658      	mov	r0, fp
 811106a:	f000 faf7 	bl	811165c <__multadd>
 811106e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111070:	4681      	mov	r9, r0
 8111072:	2b00      	cmp	r3, #0
 8111074:	f000 8172 	beq.w	811135c <_dtoa_r+0xb4c>
 8111078:	2300      	movs	r3, #0
 811107a:	4629      	mov	r1, r5
 811107c:	220a      	movs	r2, #10
 811107e:	4658      	mov	r0, fp
 8111080:	f000 faec 	bl	811165c <__multadd>
 8111084:	9b00      	ldr	r3, [sp, #0]
 8111086:	2b00      	cmp	r3, #0
 8111088:	4605      	mov	r5, r0
 811108a:	dc67      	bgt.n	811115c <_dtoa_r+0x94c>
 811108c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811108e:	2b02      	cmp	r3, #2
 8111090:	dc41      	bgt.n	8111116 <_dtoa_r+0x906>
 8111092:	e063      	b.n	811115c <_dtoa_r+0x94c>
 8111094:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8111096:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 811109a:	e746      	b.n	8110f2a <_dtoa_r+0x71a>
 811109c:	9b07      	ldr	r3, [sp, #28]
 811109e:	1e5c      	subs	r4, r3, #1
 81110a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81110a2:	42a3      	cmp	r3, r4
 81110a4:	bfbf      	itttt	lt
 81110a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 81110a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 81110aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 81110ac:	1ae3      	sublt	r3, r4, r3
 81110ae:	bfb4      	ite	lt
 81110b0:	18d2      	addlt	r2, r2, r3
 81110b2:	1b1c      	subge	r4, r3, r4
 81110b4:	9b07      	ldr	r3, [sp, #28]
 81110b6:	bfbc      	itt	lt
 81110b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 81110ba:	2400      	movlt	r4, #0
 81110bc:	2b00      	cmp	r3, #0
 81110be:	bfb5      	itete	lt
 81110c0:	eba8 0603 	sublt.w	r6, r8, r3
 81110c4:	9b07      	ldrge	r3, [sp, #28]
 81110c6:	2300      	movlt	r3, #0
 81110c8:	4646      	movge	r6, r8
 81110ca:	e730      	b.n	8110f2e <_dtoa_r+0x71e>
 81110cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 81110ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 81110d0:	4646      	mov	r6, r8
 81110d2:	e735      	b.n	8110f40 <_dtoa_r+0x730>
 81110d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 81110d6:	e75c      	b.n	8110f92 <_dtoa_r+0x782>
 81110d8:	2300      	movs	r3, #0
 81110da:	e788      	b.n	8110fee <_dtoa_r+0x7de>
 81110dc:	3fe00000 	.word	0x3fe00000
 81110e0:	40240000 	.word	0x40240000
 81110e4:	40140000 	.word	0x40140000
 81110e8:	9b02      	ldr	r3, [sp, #8]
 81110ea:	e780      	b.n	8110fee <_dtoa_r+0x7de>
 81110ec:	2300      	movs	r3, #0
 81110ee:	930a      	str	r3, [sp, #40]	@ 0x28
 81110f0:	e782      	b.n	8110ff8 <_dtoa_r+0x7e8>
 81110f2:	d099      	beq.n	8111028 <_dtoa_r+0x818>
 81110f4:	9a08      	ldr	r2, [sp, #32]
 81110f6:	331c      	adds	r3, #28
 81110f8:	441a      	add	r2, r3
 81110fa:	4498      	add	r8, r3
 81110fc:	441e      	add	r6, r3
 81110fe:	9208      	str	r2, [sp, #32]
 8111100:	e792      	b.n	8111028 <_dtoa_r+0x818>
 8111102:	4603      	mov	r3, r0
 8111104:	e7f6      	b.n	81110f4 <_dtoa_r+0x8e4>
 8111106:	9b07      	ldr	r3, [sp, #28]
 8111108:	9704      	str	r7, [sp, #16]
 811110a:	2b00      	cmp	r3, #0
 811110c:	dc20      	bgt.n	8111150 <_dtoa_r+0x940>
 811110e:	9300      	str	r3, [sp, #0]
 8111110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111112:	2b02      	cmp	r3, #2
 8111114:	dd1e      	ble.n	8111154 <_dtoa_r+0x944>
 8111116:	9b00      	ldr	r3, [sp, #0]
 8111118:	2b00      	cmp	r3, #0
 811111a:	f47f aec0 	bne.w	8110e9e <_dtoa_r+0x68e>
 811111e:	4621      	mov	r1, r4
 8111120:	2205      	movs	r2, #5
 8111122:	4658      	mov	r0, fp
 8111124:	f000 fa9a 	bl	811165c <__multadd>
 8111128:	4601      	mov	r1, r0
 811112a:	4604      	mov	r4, r0
 811112c:	4648      	mov	r0, r9
 811112e:	f000 fcf7 	bl	8111b20 <__mcmp>
 8111132:	2800      	cmp	r0, #0
 8111134:	f77f aeb3 	ble.w	8110e9e <_dtoa_r+0x68e>
 8111138:	4656      	mov	r6, sl
 811113a:	2331      	movs	r3, #49	@ 0x31
 811113c:	f806 3b01 	strb.w	r3, [r6], #1
 8111140:	9b04      	ldr	r3, [sp, #16]
 8111142:	3301      	adds	r3, #1
 8111144:	9304      	str	r3, [sp, #16]
 8111146:	e6ae      	b.n	8110ea6 <_dtoa_r+0x696>
 8111148:	9c07      	ldr	r4, [sp, #28]
 811114a:	9704      	str	r7, [sp, #16]
 811114c:	4625      	mov	r5, r4
 811114e:	e7f3      	b.n	8111138 <_dtoa_r+0x928>
 8111150:	9b07      	ldr	r3, [sp, #28]
 8111152:	9300      	str	r3, [sp, #0]
 8111154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111156:	2b00      	cmp	r3, #0
 8111158:	f000 8104 	beq.w	8111364 <_dtoa_r+0xb54>
 811115c:	2e00      	cmp	r6, #0
 811115e:	dd05      	ble.n	811116c <_dtoa_r+0x95c>
 8111160:	4629      	mov	r1, r5
 8111162:	4632      	mov	r2, r6
 8111164:	4658      	mov	r0, fp
 8111166:	f000 fc6f 	bl	8111a48 <__lshift>
 811116a:	4605      	mov	r5, r0
 811116c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811116e:	2b00      	cmp	r3, #0
 8111170:	d05a      	beq.n	8111228 <_dtoa_r+0xa18>
 8111172:	6869      	ldr	r1, [r5, #4]
 8111174:	4658      	mov	r0, fp
 8111176:	f000 fa0f 	bl	8111598 <_Balloc>
 811117a:	4606      	mov	r6, r0
 811117c:	b928      	cbnz	r0, 811118a <_dtoa_r+0x97a>
 811117e:	4b84      	ldr	r3, [pc, #528]	@ (8111390 <_dtoa_r+0xb80>)
 8111180:	4602      	mov	r2, r0
 8111182:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8111186:	f7ff bb5a 	b.w	811083e <_dtoa_r+0x2e>
 811118a:	692a      	ldr	r2, [r5, #16]
 811118c:	3202      	adds	r2, #2
 811118e:	0092      	lsls	r2, r2, #2
 8111190:	f105 010c 	add.w	r1, r5, #12
 8111194:	300c      	adds	r0, #12
 8111196:	f7ff fa7e 	bl	8110696 <memcpy>
 811119a:	2201      	movs	r2, #1
 811119c:	4631      	mov	r1, r6
 811119e:	4658      	mov	r0, fp
 81111a0:	f000 fc52 	bl	8111a48 <__lshift>
 81111a4:	f10a 0301 	add.w	r3, sl, #1
 81111a8:	9307      	str	r3, [sp, #28]
 81111aa:	9b00      	ldr	r3, [sp, #0]
 81111ac:	4453      	add	r3, sl
 81111ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 81111b0:	9b02      	ldr	r3, [sp, #8]
 81111b2:	f003 0301 	and.w	r3, r3, #1
 81111b6:	462f      	mov	r7, r5
 81111b8:	930a      	str	r3, [sp, #40]	@ 0x28
 81111ba:	4605      	mov	r5, r0
 81111bc:	9b07      	ldr	r3, [sp, #28]
 81111be:	4621      	mov	r1, r4
 81111c0:	3b01      	subs	r3, #1
 81111c2:	4648      	mov	r0, r9
 81111c4:	9300      	str	r3, [sp, #0]
 81111c6:	f7ff fa99 	bl	81106fc <quorem>
 81111ca:	4639      	mov	r1, r7
 81111cc:	9002      	str	r0, [sp, #8]
 81111ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 81111d2:	4648      	mov	r0, r9
 81111d4:	f000 fca4 	bl	8111b20 <__mcmp>
 81111d8:	462a      	mov	r2, r5
 81111da:	9008      	str	r0, [sp, #32]
 81111dc:	4621      	mov	r1, r4
 81111de:	4658      	mov	r0, fp
 81111e0:	f000 fcba 	bl	8111b58 <__mdiff>
 81111e4:	68c2      	ldr	r2, [r0, #12]
 81111e6:	4606      	mov	r6, r0
 81111e8:	bb02      	cbnz	r2, 811122c <_dtoa_r+0xa1c>
 81111ea:	4601      	mov	r1, r0
 81111ec:	4648      	mov	r0, r9
 81111ee:	f000 fc97 	bl	8111b20 <__mcmp>
 81111f2:	4602      	mov	r2, r0
 81111f4:	4631      	mov	r1, r6
 81111f6:	4658      	mov	r0, fp
 81111f8:	920e      	str	r2, [sp, #56]	@ 0x38
 81111fa:	f000 fa0d 	bl	8111618 <_Bfree>
 81111fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8111202:	9e07      	ldr	r6, [sp, #28]
 8111204:	ea43 0102 	orr.w	r1, r3, r2
 8111208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811120a:	4319      	orrs	r1, r3
 811120c:	d110      	bne.n	8111230 <_dtoa_r+0xa20>
 811120e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8111212:	d029      	beq.n	8111268 <_dtoa_r+0xa58>
 8111214:	9b08      	ldr	r3, [sp, #32]
 8111216:	2b00      	cmp	r3, #0
 8111218:	dd02      	ble.n	8111220 <_dtoa_r+0xa10>
 811121a:	9b02      	ldr	r3, [sp, #8]
 811121c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8111220:	9b00      	ldr	r3, [sp, #0]
 8111222:	f883 8000 	strb.w	r8, [r3]
 8111226:	e63f      	b.n	8110ea8 <_dtoa_r+0x698>
 8111228:	4628      	mov	r0, r5
 811122a:	e7bb      	b.n	81111a4 <_dtoa_r+0x994>
 811122c:	2201      	movs	r2, #1
 811122e:	e7e1      	b.n	81111f4 <_dtoa_r+0x9e4>
 8111230:	9b08      	ldr	r3, [sp, #32]
 8111232:	2b00      	cmp	r3, #0
 8111234:	db04      	blt.n	8111240 <_dtoa_r+0xa30>
 8111236:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8111238:	430b      	orrs	r3, r1
 811123a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 811123c:	430b      	orrs	r3, r1
 811123e:	d120      	bne.n	8111282 <_dtoa_r+0xa72>
 8111240:	2a00      	cmp	r2, #0
 8111242:	dded      	ble.n	8111220 <_dtoa_r+0xa10>
 8111244:	4649      	mov	r1, r9
 8111246:	2201      	movs	r2, #1
 8111248:	4658      	mov	r0, fp
 811124a:	f000 fbfd 	bl	8111a48 <__lshift>
 811124e:	4621      	mov	r1, r4
 8111250:	4681      	mov	r9, r0
 8111252:	f000 fc65 	bl	8111b20 <__mcmp>
 8111256:	2800      	cmp	r0, #0
 8111258:	dc03      	bgt.n	8111262 <_dtoa_r+0xa52>
 811125a:	d1e1      	bne.n	8111220 <_dtoa_r+0xa10>
 811125c:	f018 0f01 	tst.w	r8, #1
 8111260:	d0de      	beq.n	8111220 <_dtoa_r+0xa10>
 8111262:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8111266:	d1d8      	bne.n	811121a <_dtoa_r+0xa0a>
 8111268:	9a00      	ldr	r2, [sp, #0]
 811126a:	2339      	movs	r3, #57	@ 0x39
 811126c:	7013      	strb	r3, [r2, #0]
 811126e:	4633      	mov	r3, r6
 8111270:	461e      	mov	r6, r3
 8111272:	3b01      	subs	r3, #1
 8111274:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8111278:	2a39      	cmp	r2, #57	@ 0x39
 811127a:	d052      	beq.n	8111322 <_dtoa_r+0xb12>
 811127c:	3201      	adds	r2, #1
 811127e:	701a      	strb	r2, [r3, #0]
 8111280:	e612      	b.n	8110ea8 <_dtoa_r+0x698>
 8111282:	2a00      	cmp	r2, #0
 8111284:	dd07      	ble.n	8111296 <_dtoa_r+0xa86>
 8111286:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 811128a:	d0ed      	beq.n	8111268 <_dtoa_r+0xa58>
 811128c:	9a00      	ldr	r2, [sp, #0]
 811128e:	f108 0301 	add.w	r3, r8, #1
 8111292:	7013      	strb	r3, [r2, #0]
 8111294:	e608      	b.n	8110ea8 <_dtoa_r+0x698>
 8111296:	9b07      	ldr	r3, [sp, #28]
 8111298:	9a07      	ldr	r2, [sp, #28]
 811129a:	f803 8c01 	strb.w	r8, [r3, #-1]
 811129e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81112a0:	4293      	cmp	r3, r2
 81112a2:	d028      	beq.n	81112f6 <_dtoa_r+0xae6>
 81112a4:	4649      	mov	r1, r9
 81112a6:	2300      	movs	r3, #0
 81112a8:	220a      	movs	r2, #10
 81112aa:	4658      	mov	r0, fp
 81112ac:	f000 f9d6 	bl	811165c <__multadd>
 81112b0:	42af      	cmp	r7, r5
 81112b2:	4681      	mov	r9, r0
 81112b4:	f04f 0300 	mov.w	r3, #0
 81112b8:	f04f 020a 	mov.w	r2, #10
 81112bc:	4639      	mov	r1, r7
 81112be:	4658      	mov	r0, fp
 81112c0:	d107      	bne.n	81112d2 <_dtoa_r+0xac2>
 81112c2:	f000 f9cb 	bl	811165c <__multadd>
 81112c6:	4607      	mov	r7, r0
 81112c8:	4605      	mov	r5, r0
 81112ca:	9b07      	ldr	r3, [sp, #28]
 81112cc:	3301      	adds	r3, #1
 81112ce:	9307      	str	r3, [sp, #28]
 81112d0:	e774      	b.n	81111bc <_dtoa_r+0x9ac>
 81112d2:	f000 f9c3 	bl	811165c <__multadd>
 81112d6:	4629      	mov	r1, r5
 81112d8:	4607      	mov	r7, r0
 81112da:	2300      	movs	r3, #0
 81112dc:	220a      	movs	r2, #10
 81112de:	4658      	mov	r0, fp
 81112e0:	f000 f9bc 	bl	811165c <__multadd>
 81112e4:	4605      	mov	r5, r0
 81112e6:	e7f0      	b.n	81112ca <_dtoa_r+0xaba>
 81112e8:	9b00      	ldr	r3, [sp, #0]
 81112ea:	2b00      	cmp	r3, #0
 81112ec:	bfcc      	ite	gt
 81112ee:	461e      	movgt	r6, r3
 81112f0:	2601      	movle	r6, #1
 81112f2:	4456      	add	r6, sl
 81112f4:	2700      	movs	r7, #0
 81112f6:	4649      	mov	r1, r9
 81112f8:	2201      	movs	r2, #1
 81112fa:	4658      	mov	r0, fp
 81112fc:	f000 fba4 	bl	8111a48 <__lshift>
 8111300:	4621      	mov	r1, r4
 8111302:	4681      	mov	r9, r0
 8111304:	f000 fc0c 	bl	8111b20 <__mcmp>
 8111308:	2800      	cmp	r0, #0
 811130a:	dcb0      	bgt.n	811126e <_dtoa_r+0xa5e>
 811130c:	d102      	bne.n	8111314 <_dtoa_r+0xb04>
 811130e:	f018 0f01 	tst.w	r8, #1
 8111312:	d1ac      	bne.n	811126e <_dtoa_r+0xa5e>
 8111314:	4633      	mov	r3, r6
 8111316:	461e      	mov	r6, r3
 8111318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 811131c:	2a30      	cmp	r2, #48	@ 0x30
 811131e:	d0fa      	beq.n	8111316 <_dtoa_r+0xb06>
 8111320:	e5c2      	b.n	8110ea8 <_dtoa_r+0x698>
 8111322:	459a      	cmp	sl, r3
 8111324:	d1a4      	bne.n	8111270 <_dtoa_r+0xa60>
 8111326:	9b04      	ldr	r3, [sp, #16]
 8111328:	3301      	adds	r3, #1
 811132a:	9304      	str	r3, [sp, #16]
 811132c:	2331      	movs	r3, #49	@ 0x31
 811132e:	f88a 3000 	strb.w	r3, [sl]
 8111332:	e5b9      	b.n	8110ea8 <_dtoa_r+0x698>
 8111334:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8111336:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8111394 <_dtoa_r+0xb84>
 811133a:	b11b      	cbz	r3, 8111344 <_dtoa_r+0xb34>
 811133c:	f10a 0308 	add.w	r3, sl, #8
 8111340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8111342:	6013      	str	r3, [r2, #0]
 8111344:	4650      	mov	r0, sl
 8111346:	b019      	add	sp, #100	@ 0x64
 8111348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811134c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811134e:	2b01      	cmp	r3, #1
 8111350:	f77f ae37 	ble.w	8110fc2 <_dtoa_r+0x7b2>
 8111354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8111356:	930a      	str	r3, [sp, #40]	@ 0x28
 8111358:	2001      	movs	r0, #1
 811135a:	e655      	b.n	8111008 <_dtoa_r+0x7f8>
 811135c:	9b00      	ldr	r3, [sp, #0]
 811135e:	2b00      	cmp	r3, #0
 8111360:	f77f aed6 	ble.w	8111110 <_dtoa_r+0x900>
 8111364:	4656      	mov	r6, sl
 8111366:	4621      	mov	r1, r4
 8111368:	4648      	mov	r0, r9
 811136a:	f7ff f9c7 	bl	81106fc <quorem>
 811136e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8111372:	f806 8b01 	strb.w	r8, [r6], #1
 8111376:	9b00      	ldr	r3, [sp, #0]
 8111378:	eba6 020a 	sub.w	r2, r6, sl
 811137c:	4293      	cmp	r3, r2
 811137e:	ddb3      	ble.n	81112e8 <_dtoa_r+0xad8>
 8111380:	4649      	mov	r1, r9
 8111382:	2300      	movs	r3, #0
 8111384:	220a      	movs	r2, #10
 8111386:	4658      	mov	r0, fp
 8111388:	f000 f968 	bl	811165c <__multadd>
 811138c:	4681      	mov	r9, r0
 811138e:	e7ea      	b.n	8111366 <_dtoa_r+0xb56>
 8111390:	08113e49 	.word	0x08113e49
 8111394:	08113de4 	.word	0x08113de4

08111398 <_free_r>:
 8111398:	b538      	push	{r3, r4, r5, lr}
 811139a:	4605      	mov	r5, r0
 811139c:	2900      	cmp	r1, #0
 811139e:	d041      	beq.n	8111424 <_free_r+0x8c>
 81113a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81113a4:	1f0c      	subs	r4, r1, #4
 81113a6:	2b00      	cmp	r3, #0
 81113a8:	bfb8      	it	lt
 81113aa:	18e4      	addlt	r4, r4, r3
 81113ac:	f000 f8e8 	bl	8111580 <__malloc_lock>
 81113b0:	4a1d      	ldr	r2, [pc, #116]	@ (8111428 <_free_r+0x90>)
 81113b2:	6813      	ldr	r3, [r2, #0]
 81113b4:	b933      	cbnz	r3, 81113c4 <_free_r+0x2c>
 81113b6:	6063      	str	r3, [r4, #4]
 81113b8:	6014      	str	r4, [r2, #0]
 81113ba:	4628      	mov	r0, r5
 81113bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81113c0:	f000 b8e4 	b.w	811158c <__malloc_unlock>
 81113c4:	42a3      	cmp	r3, r4
 81113c6:	d908      	bls.n	81113da <_free_r+0x42>
 81113c8:	6820      	ldr	r0, [r4, #0]
 81113ca:	1821      	adds	r1, r4, r0
 81113cc:	428b      	cmp	r3, r1
 81113ce:	bf01      	itttt	eq
 81113d0:	6819      	ldreq	r1, [r3, #0]
 81113d2:	685b      	ldreq	r3, [r3, #4]
 81113d4:	1809      	addeq	r1, r1, r0
 81113d6:	6021      	streq	r1, [r4, #0]
 81113d8:	e7ed      	b.n	81113b6 <_free_r+0x1e>
 81113da:	461a      	mov	r2, r3
 81113dc:	685b      	ldr	r3, [r3, #4]
 81113de:	b10b      	cbz	r3, 81113e4 <_free_r+0x4c>
 81113e0:	42a3      	cmp	r3, r4
 81113e2:	d9fa      	bls.n	81113da <_free_r+0x42>
 81113e4:	6811      	ldr	r1, [r2, #0]
 81113e6:	1850      	adds	r0, r2, r1
 81113e8:	42a0      	cmp	r0, r4
 81113ea:	d10b      	bne.n	8111404 <_free_r+0x6c>
 81113ec:	6820      	ldr	r0, [r4, #0]
 81113ee:	4401      	add	r1, r0
 81113f0:	1850      	adds	r0, r2, r1
 81113f2:	4283      	cmp	r3, r0
 81113f4:	6011      	str	r1, [r2, #0]
 81113f6:	d1e0      	bne.n	81113ba <_free_r+0x22>
 81113f8:	6818      	ldr	r0, [r3, #0]
 81113fa:	685b      	ldr	r3, [r3, #4]
 81113fc:	6053      	str	r3, [r2, #4]
 81113fe:	4408      	add	r0, r1
 8111400:	6010      	str	r0, [r2, #0]
 8111402:	e7da      	b.n	81113ba <_free_r+0x22>
 8111404:	d902      	bls.n	811140c <_free_r+0x74>
 8111406:	230c      	movs	r3, #12
 8111408:	602b      	str	r3, [r5, #0]
 811140a:	e7d6      	b.n	81113ba <_free_r+0x22>
 811140c:	6820      	ldr	r0, [r4, #0]
 811140e:	1821      	adds	r1, r4, r0
 8111410:	428b      	cmp	r3, r1
 8111412:	bf04      	itt	eq
 8111414:	6819      	ldreq	r1, [r3, #0]
 8111416:	685b      	ldreq	r3, [r3, #4]
 8111418:	6063      	str	r3, [r4, #4]
 811141a:	bf04      	itt	eq
 811141c:	1809      	addeq	r1, r1, r0
 811141e:	6021      	streq	r1, [r4, #0]
 8111420:	6054      	str	r4, [r2, #4]
 8111422:	e7ca      	b.n	81113ba <_free_r+0x22>
 8111424:	bd38      	pop	{r3, r4, r5, pc}
 8111426:	bf00      	nop
 8111428:	10008cc4 	.word	0x10008cc4

0811142c <malloc>:
 811142c:	4b02      	ldr	r3, [pc, #8]	@ (8111438 <malloc+0xc>)
 811142e:	4601      	mov	r1, r0
 8111430:	6818      	ldr	r0, [r3, #0]
 8111432:	f000 b825 	b.w	8111480 <_malloc_r>
 8111436:	bf00      	nop
 8111438:	100000b0 	.word	0x100000b0

0811143c <sbrk_aligned>:
 811143c:	b570      	push	{r4, r5, r6, lr}
 811143e:	4e0f      	ldr	r6, [pc, #60]	@ (811147c <sbrk_aligned+0x40>)
 8111440:	460c      	mov	r4, r1
 8111442:	6831      	ldr	r1, [r6, #0]
 8111444:	4605      	mov	r5, r0
 8111446:	b911      	cbnz	r1, 811144e <sbrk_aligned+0x12>
 8111448:	f001 ffe4 	bl	8113414 <_sbrk_r>
 811144c:	6030      	str	r0, [r6, #0]
 811144e:	4621      	mov	r1, r4
 8111450:	4628      	mov	r0, r5
 8111452:	f001 ffdf 	bl	8113414 <_sbrk_r>
 8111456:	1c43      	adds	r3, r0, #1
 8111458:	d103      	bne.n	8111462 <sbrk_aligned+0x26>
 811145a:	f04f 34ff 	mov.w	r4, #4294967295
 811145e:	4620      	mov	r0, r4
 8111460:	bd70      	pop	{r4, r5, r6, pc}
 8111462:	1cc4      	adds	r4, r0, #3
 8111464:	f024 0403 	bic.w	r4, r4, #3
 8111468:	42a0      	cmp	r0, r4
 811146a:	d0f8      	beq.n	811145e <sbrk_aligned+0x22>
 811146c:	1a21      	subs	r1, r4, r0
 811146e:	4628      	mov	r0, r5
 8111470:	f001 ffd0 	bl	8113414 <_sbrk_r>
 8111474:	3001      	adds	r0, #1
 8111476:	d1f2      	bne.n	811145e <sbrk_aligned+0x22>
 8111478:	e7ef      	b.n	811145a <sbrk_aligned+0x1e>
 811147a:	bf00      	nop
 811147c:	10008cc0 	.word	0x10008cc0

08111480 <_malloc_r>:
 8111480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111484:	1ccd      	adds	r5, r1, #3
 8111486:	f025 0503 	bic.w	r5, r5, #3
 811148a:	3508      	adds	r5, #8
 811148c:	2d0c      	cmp	r5, #12
 811148e:	bf38      	it	cc
 8111490:	250c      	movcc	r5, #12
 8111492:	2d00      	cmp	r5, #0
 8111494:	4606      	mov	r6, r0
 8111496:	db01      	blt.n	811149c <_malloc_r+0x1c>
 8111498:	42a9      	cmp	r1, r5
 811149a:	d904      	bls.n	81114a6 <_malloc_r+0x26>
 811149c:	230c      	movs	r3, #12
 811149e:	6033      	str	r3, [r6, #0]
 81114a0:	2000      	movs	r0, #0
 81114a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81114a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 811157c <_malloc_r+0xfc>
 81114aa:	f000 f869 	bl	8111580 <__malloc_lock>
 81114ae:	f8d8 3000 	ldr.w	r3, [r8]
 81114b2:	461c      	mov	r4, r3
 81114b4:	bb44      	cbnz	r4, 8111508 <_malloc_r+0x88>
 81114b6:	4629      	mov	r1, r5
 81114b8:	4630      	mov	r0, r6
 81114ba:	f7ff ffbf 	bl	811143c <sbrk_aligned>
 81114be:	1c43      	adds	r3, r0, #1
 81114c0:	4604      	mov	r4, r0
 81114c2:	d158      	bne.n	8111576 <_malloc_r+0xf6>
 81114c4:	f8d8 4000 	ldr.w	r4, [r8]
 81114c8:	4627      	mov	r7, r4
 81114ca:	2f00      	cmp	r7, #0
 81114cc:	d143      	bne.n	8111556 <_malloc_r+0xd6>
 81114ce:	2c00      	cmp	r4, #0
 81114d0:	d04b      	beq.n	811156a <_malloc_r+0xea>
 81114d2:	6823      	ldr	r3, [r4, #0]
 81114d4:	4639      	mov	r1, r7
 81114d6:	4630      	mov	r0, r6
 81114d8:	eb04 0903 	add.w	r9, r4, r3
 81114dc:	f001 ff9a 	bl	8113414 <_sbrk_r>
 81114e0:	4581      	cmp	r9, r0
 81114e2:	d142      	bne.n	811156a <_malloc_r+0xea>
 81114e4:	6821      	ldr	r1, [r4, #0]
 81114e6:	1a6d      	subs	r5, r5, r1
 81114e8:	4629      	mov	r1, r5
 81114ea:	4630      	mov	r0, r6
 81114ec:	f7ff ffa6 	bl	811143c <sbrk_aligned>
 81114f0:	3001      	adds	r0, #1
 81114f2:	d03a      	beq.n	811156a <_malloc_r+0xea>
 81114f4:	6823      	ldr	r3, [r4, #0]
 81114f6:	442b      	add	r3, r5
 81114f8:	6023      	str	r3, [r4, #0]
 81114fa:	f8d8 3000 	ldr.w	r3, [r8]
 81114fe:	685a      	ldr	r2, [r3, #4]
 8111500:	bb62      	cbnz	r2, 811155c <_malloc_r+0xdc>
 8111502:	f8c8 7000 	str.w	r7, [r8]
 8111506:	e00f      	b.n	8111528 <_malloc_r+0xa8>
 8111508:	6822      	ldr	r2, [r4, #0]
 811150a:	1b52      	subs	r2, r2, r5
 811150c:	d420      	bmi.n	8111550 <_malloc_r+0xd0>
 811150e:	2a0b      	cmp	r2, #11
 8111510:	d917      	bls.n	8111542 <_malloc_r+0xc2>
 8111512:	1961      	adds	r1, r4, r5
 8111514:	42a3      	cmp	r3, r4
 8111516:	6025      	str	r5, [r4, #0]
 8111518:	bf18      	it	ne
 811151a:	6059      	strne	r1, [r3, #4]
 811151c:	6863      	ldr	r3, [r4, #4]
 811151e:	bf08      	it	eq
 8111520:	f8c8 1000 	streq.w	r1, [r8]
 8111524:	5162      	str	r2, [r4, r5]
 8111526:	604b      	str	r3, [r1, #4]
 8111528:	4630      	mov	r0, r6
 811152a:	f000 f82f 	bl	811158c <__malloc_unlock>
 811152e:	f104 000b 	add.w	r0, r4, #11
 8111532:	1d23      	adds	r3, r4, #4
 8111534:	f020 0007 	bic.w	r0, r0, #7
 8111538:	1ac2      	subs	r2, r0, r3
 811153a:	bf1c      	itt	ne
 811153c:	1a1b      	subne	r3, r3, r0
 811153e:	50a3      	strne	r3, [r4, r2]
 8111540:	e7af      	b.n	81114a2 <_malloc_r+0x22>
 8111542:	6862      	ldr	r2, [r4, #4]
 8111544:	42a3      	cmp	r3, r4
 8111546:	bf0c      	ite	eq
 8111548:	f8c8 2000 	streq.w	r2, [r8]
 811154c:	605a      	strne	r2, [r3, #4]
 811154e:	e7eb      	b.n	8111528 <_malloc_r+0xa8>
 8111550:	4623      	mov	r3, r4
 8111552:	6864      	ldr	r4, [r4, #4]
 8111554:	e7ae      	b.n	81114b4 <_malloc_r+0x34>
 8111556:	463c      	mov	r4, r7
 8111558:	687f      	ldr	r7, [r7, #4]
 811155a:	e7b6      	b.n	81114ca <_malloc_r+0x4a>
 811155c:	461a      	mov	r2, r3
 811155e:	685b      	ldr	r3, [r3, #4]
 8111560:	42a3      	cmp	r3, r4
 8111562:	d1fb      	bne.n	811155c <_malloc_r+0xdc>
 8111564:	2300      	movs	r3, #0
 8111566:	6053      	str	r3, [r2, #4]
 8111568:	e7de      	b.n	8111528 <_malloc_r+0xa8>
 811156a:	230c      	movs	r3, #12
 811156c:	6033      	str	r3, [r6, #0]
 811156e:	4630      	mov	r0, r6
 8111570:	f000 f80c 	bl	811158c <__malloc_unlock>
 8111574:	e794      	b.n	81114a0 <_malloc_r+0x20>
 8111576:	6005      	str	r5, [r0, #0]
 8111578:	e7d6      	b.n	8111528 <_malloc_r+0xa8>
 811157a:	bf00      	nop
 811157c:	10008cc4 	.word	0x10008cc4

08111580 <__malloc_lock>:
 8111580:	4801      	ldr	r0, [pc, #4]	@ (8111588 <__malloc_lock+0x8>)
 8111582:	f7ff b886 	b.w	8110692 <__retarget_lock_acquire_recursive>
 8111586:	bf00      	nop
 8111588:	10008cbc 	.word	0x10008cbc

0811158c <__malloc_unlock>:
 811158c:	4801      	ldr	r0, [pc, #4]	@ (8111594 <__malloc_unlock+0x8>)
 811158e:	f7ff b881 	b.w	8110694 <__retarget_lock_release_recursive>
 8111592:	bf00      	nop
 8111594:	10008cbc 	.word	0x10008cbc

08111598 <_Balloc>:
 8111598:	b570      	push	{r4, r5, r6, lr}
 811159a:	69c6      	ldr	r6, [r0, #28]
 811159c:	4604      	mov	r4, r0
 811159e:	460d      	mov	r5, r1
 81115a0:	b976      	cbnz	r6, 81115c0 <_Balloc+0x28>
 81115a2:	2010      	movs	r0, #16
 81115a4:	f7ff ff42 	bl	811142c <malloc>
 81115a8:	4602      	mov	r2, r0
 81115aa:	61e0      	str	r0, [r4, #28]
 81115ac:	b920      	cbnz	r0, 81115b8 <_Balloc+0x20>
 81115ae:	4b18      	ldr	r3, [pc, #96]	@ (8111610 <_Balloc+0x78>)
 81115b0:	4818      	ldr	r0, [pc, #96]	@ (8111614 <_Balloc+0x7c>)
 81115b2:	216b      	movs	r1, #107	@ 0x6b
 81115b4:	f7ff f884 	bl	81106c0 <__assert_func>
 81115b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81115bc:	6006      	str	r6, [r0, #0]
 81115be:	60c6      	str	r6, [r0, #12]
 81115c0:	69e6      	ldr	r6, [r4, #28]
 81115c2:	68f3      	ldr	r3, [r6, #12]
 81115c4:	b183      	cbz	r3, 81115e8 <_Balloc+0x50>
 81115c6:	69e3      	ldr	r3, [r4, #28]
 81115c8:	68db      	ldr	r3, [r3, #12]
 81115ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 81115ce:	b9b8      	cbnz	r0, 8111600 <_Balloc+0x68>
 81115d0:	2101      	movs	r1, #1
 81115d2:	fa01 f605 	lsl.w	r6, r1, r5
 81115d6:	1d72      	adds	r2, r6, #5
 81115d8:	0092      	lsls	r2, r2, #2
 81115da:	4620      	mov	r0, r4
 81115dc:	f001 ff3b 	bl	8113456 <_calloc_r>
 81115e0:	b160      	cbz	r0, 81115fc <_Balloc+0x64>
 81115e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 81115e6:	e00e      	b.n	8111606 <_Balloc+0x6e>
 81115e8:	2221      	movs	r2, #33	@ 0x21
 81115ea:	2104      	movs	r1, #4
 81115ec:	4620      	mov	r0, r4
 81115ee:	f001 ff32 	bl	8113456 <_calloc_r>
 81115f2:	69e3      	ldr	r3, [r4, #28]
 81115f4:	60f0      	str	r0, [r6, #12]
 81115f6:	68db      	ldr	r3, [r3, #12]
 81115f8:	2b00      	cmp	r3, #0
 81115fa:	d1e4      	bne.n	81115c6 <_Balloc+0x2e>
 81115fc:	2000      	movs	r0, #0
 81115fe:	bd70      	pop	{r4, r5, r6, pc}
 8111600:	6802      	ldr	r2, [r0, #0]
 8111602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8111606:	2300      	movs	r3, #0
 8111608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 811160c:	e7f7      	b.n	81115fe <_Balloc+0x66>
 811160e:	bf00      	nop
 8111610:	08113d00 	.word	0x08113d00
 8111614:	08113e5a 	.word	0x08113e5a

08111618 <_Bfree>:
 8111618:	b570      	push	{r4, r5, r6, lr}
 811161a:	69c6      	ldr	r6, [r0, #28]
 811161c:	4605      	mov	r5, r0
 811161e:	460c      	mov	r4, r1
 8111620:	b976      	cbnz	r6, 8111640 <_Bfree+0x28>
 8111622:	2010      	movs	r0, #16
 8111624:	f7ff ff02 	bl	811142c <malloc>
 8111628:	4602      	mov	r2, r0
 811162a:	61e8      	str	r0, [r5, #28]
 811162c:	b920      	cbnz	r0, 8111638 <_Bfree+0x20>
 811162e:	4b09      	ldr	r3, [pc, #36]	@ (8111654 <_Bfree+0x3c>)
 8111630:	4809      	ldr	r0, [pc, #36]	@ (8111658 <_Bfree+0x40>)
 8111632:	218f      	movs	r1, #143	@ 0x8f
 8111634:	f7ff f844 	bl	81106c0 <__assert_func>
 8111638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 811163c:	6006      	str	r6, [r0, #0]
 811163e:	60c6      	str	r6, [r0, #12]
 8111640:	b13c      	cbz	r4, 8111652 <_Bfree+0x3a>
 8111642:	69eb      	ldr	r3, [r5, #28]
 8111644:	6862      	ldr	r2, [r4, #4]
 8111646:	68db      	ldr	r3, [r3, #12]
 8111648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 811164c:	6021      	str	r1, [r4, #0]
 811164e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8111652:	bd70      	pop	{r4, r5, r6, pc}
 8111654:	08113d00 	.word	0x08113d00
 8111658:	08113e5a 	.word	0x08113e5a

0811165c <__multadd>:
 811165c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111660:	690d      	ldr	r5, [r1, #16]
 8111662:	4607      	mov	r7, r0
 8111664:	460c      	mov	r4, r1
 8111666:	461e      	mov	r6, r3
 8111668:	f101 0c14 	add.w	ip, r1, #20
 811166c:	2000      	movs	r0, #0
 811166e:	f8dc 3000 	ldr.w	r3, [ip]
 8111672:	b299      	uxth	r1, r3
 8111674:	fb02 6101 	mla	r1, r2, r1, r6
 8111678:	0c1e      	lsrs	r6, r3, #16
 811167a:	0c0b      	lsrs	r3, r1, #16
 811167c:	fb02 3306 	mla	r3, r2, r6, r3
 8111680:	b289      	uxth	r1, r1
 8111682:	3001      	adds	r0, #1
 8111684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8111688:	4285      	cmp	r5, r0
 811168a:	f84c 1b04 	str.w	r1, [ip], #4
 811168e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8111692:	dcec      	bgt.n	811166e <__multadd+0x12>
 8111694:	b30e      	cbz	r6, 81116da <__multadd+0x7e>
 8111696:	68a3      	ldr	r3, [r4, #8]
 8111698:	42ab      	cmp	r3, r5
 811169a:	dc19      	bgt.n	81116d0 <__multadd+0x74>
 811169c:	6861      	ldr	r1, [r4, #4]
 811169e:	4638      	mov	r0, r7
 81116a0:	3101      	adds	r1, #1
 81116a2:	f7ff ff79 	bl	8111598 <_Balloc>
 81116a6:	4680      	mov	r8, r0
 81116a8:	b928      	cbnz	r0, 81116b6 <__multadd+0x5a>
 81116aa:	4602      	mov	r2, r0
 81116ac:	4b0c      	ldr	r3, [pc, #48]	@ (81116e0 <__multadd+0x84>)
 81116ae:	480d      	ldr	r0, [pc, #52]	@ (81116e4 <__multadd+0x88>)
 81116b0:	21ba      	movs	r1, #186	@ 0xba
 81116b2:	f7ff f805 	bl	81106c0 <__assert_func>
 81116b6:	6922      	ldr	r2, [r4, #16]
 81116b8:	3202      	adds	r2, #2
 81116ba:	f104 010c 	add.w	r1, r4, #12
 81116be:	0092      	lsls	r2, r2, #2
 81116c0:	300c      	adds	r0, #12
 81116c2:	f7fe ffe8 	bl	8110696 <memcpy>
 81116c6:	4621      	mov	r1, r4
 81116c8:	4638      	mov	r0, r7
 81116ca:	f7ff ffa5 	bl	8111618 <_Bfree>
 81116ce:	4644      	mov	r4, r8
 81116d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 81116d4:	3501      	adds	r5, #1
 81116d6:	615e      	str	r6, [r3, #20]
 81116d8:	6125      	str	r5, [r4, #16]
 81116da:	4620      	mov	r0, r4
 81116dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81116e0:	08113e49 	.word	0x08113e49
 81116e4:	08113e5a 	.word	0x08113e5a

081116e8 <__s2b>:
 81116e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81116ec:	460c      	mov	r4, r1
 81116ee:	4615      	mov	r5, r2
 81116f0:	461f      	mov	r7, r3
 81116f2:	2209      	movs	r2, #9
 81116f4:	3308      	adds	r3, #8
 81116f6:	4606      	mov	r6, r0
 81116f8:	fb93 f3f2 	sdiv	r3, r3, r2
 81116fc:	2100      	movs	r1, #0
 81116fe:	2201      	movs	r2, #1
 8111700:	429a      	cmp	r2, r3
 8111702:	db09      	blt.n	8111718 <__s2b+0x30>
 8111704:	4630      	mov	r0, r6
 8111706:	f7ff ff47 	bl	8111598 <_Balloc>
 811170a:	b940      	cbnz	r0, 811171e <__s2b+0x36>
 811170c:	4602      	mov	r2, r0
 811170e:	4b19      	ldr	r3, [pc, #100]	@ (8111774 <__s2b+0x8c>)
 8111710:	4819      	ldr	r0, [pc, #100]	@ (8111778 <__s2b+0x90>)
 8111712:	21d3      	movs	r1, #211	@ 0xd3
 8111714:	f7fe ffd4 	bl	81106c0 <__assert_func>
 8111718:	0052      	lsls	r2, r2, #1
 811171a:	3101      	adds	r1, #1
 811171c:	e7f0      	b.n	8111700 <__s2b+0x18>
 811171e:	9b08      	ldr	r3, [sp, #32]
 8111720:	6143      	str	r3, [r0, #20]
 8111722:	2d09      	cmp	r5, #9
 8111724:	f04f 0301 	mov.w	r3, #1
 8111728:	6103      	str	r3, [r0, #16]
 811172a:	dd16      	ble.n	811175a <__s2b+0x72>
 811172c:	f104 0909 	add.w	r9, r4, #9
 8111730:	46c8      	mov	r8, r9
 8111732:	442c      	add	r4, r5
 8111734:	f818 3b01 	ldrb.w	r3, [r8], #1
 8111738:	4601      	mov	r1, r0
 811173a:	3b30      	subs	r3, #48	@ 0x30
 811173c:	220a      	movs	r2, #10
 811173e:	4630      	mov	r0, r6
 8111740:	f7ff ff8c 	bl	811165c <__multadd>
 8111744:	45a0      	cmp	r8, r4
 8111746:	d1f5      	bne.n	8111734 <__s2b+0x4c>
 8111748:	f1a5 0408 	sub.w	r4, r5, #8
 811174c:	444c      	add	r4, r9
 811174e:	1b2d      	subs	r5, r5, r4
 8111750:	1963      	adds	r3, r4, r5
 8111752:	42bb      	cmp	r3, r7
 8111754:	db04      	blt.n	8111760 <__s2b+0x78>
 8111756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811175a:	340a      	adds	r4, #10
 811175c:	2509      	movs	r5, #9
 811175e:	e7f6      	b.n	811174e <__s2b+0x66>
 8111760:	f814 3b01 	ldrb.w	r3, [r4], #1
 8111764:	4601      	mov	r1, r0
 8111766:	3b30      	subs	r3, #48	@ 0x30
 8111768:	220a      	movs	r2, #10
 811176a:	4630      	mov	r0, r6
 811176c:	f7ff ff76 	bl	811165c <__multadd>
 8111770:	e7ee      	b.n	8111750 <__s2b+0x68>
 8111772:	bf00      	nop
 8111774:	08113e49 	.word	0x08113e49
 8111778:	08113e5a 	.word	0x08113e5a

0811177c <__hi0bits>:
 811177c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8111780:	4603      	mov	r3, r0
 8111782:	bf36      	itet	cc
 8111784:	0403      	lslcc	r3, r0, #16
 8111786:	2000      	movcs	r0, #0
 8111788:	2010      	movcc	r0, #16
 811178a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 811178e:	bf3c      	itt	cc
 8111790:	021b      	lslcc	r3, r3, #8
 8111792:	3008      	addcc	r0, #8
 8111794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8111798:	bf3c      	itt	cc
 811179a:	011b      	lslcc	r3, r3, #4
 811179c:	3004      	addcc	r0, #4
 811179e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81117a2:	bf3c      	itt	cc
 81117a4:	009b      	lslcc	r3, r3, #2
 81117a6:	3002      	addcc	r0, #2
 81117a8:	2b00      	cmp	r3, #0
 81117aa:	db05      	blt.n	81117b8 <__hi0bits+0x3c>
 81117ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 81117b0:	f100 0001 	add.w	r0, r0, #1
 81117b4:	bf08      	it	eq
 81117b6:	2020      	moveq	r0, #32
 81117b8:	4770      	bx	lr

081117ba <__lo0bits>:
 81117ba:	6803      	ldr	r3, [r0, #0]
 81117bc:	4602      	mov	r2, r0
 81117be:	f013 0007 	ands.w	r0, r3, #7
 81117c2:	d00b      	beq.n	81117dc <__lo0bits+0x22>
 81117c4:	07d9      	lsls	r1, r3, #31
 81117c6:	d421      	bmi.n	811180c <__lo0bits+0x52>
 81117c8:	0798      	lsls	r0, r3, #30
 81117ca:	bf49      	itett	mi
 81117cc:	085b      	lsrmi	r3, r3, #1
 81117ce:	089b      	lsrpl	r3, r3, #2
 81117d0:	2001      	movmi	r0, #1
 81117d2:	6013      	strmi	r3, [r2, #0]
 81117d4:	bf5c      	itt	pl
 81117d6:	6013      	strpl	r3, [r2, #0]
 81117d8:	2002      	movpl	r0, #2
 81117da:	4770      	bx	lr
 81117dc:	b299      	uxth	r1, r3
 81117de:	b909      	cbnz	r1, 81117e4 <__lo0bits+0x2a>
 81117e0:	0c1b      	lsrs	r3, r3, #16
 81117e2:	2010      	movs	r0, #16
 81117e4:	b2d9      	uxtb	r1, r3
 81117e6:	b909      	cbnz	r1, 81117ec <__lo0bits+0x32>
 81117e8:	3008      	adds	r0, #8
 81117ea:	0a1b      	lsrs	r3, r3, #8
 81117ec:	0719      	lsls	r1, r3, #28
 81117ee:	bf04      	itt	eq
 81117f0:	091b      	lsreq	r3, r3, #4
 81117f2:	3004      	addeq	r0, #4
 81117f4:	0799      	lsls	r1, r3, #30
 81117f6:	bf04      	itt	eq
 81117f8:	089b      	lsreq	r3, r3, #2
 81117fa:	3002      	addeq	r0, #2
 81117fc:	07d9      	lsls	r1, r3, #31
 81117fe:	d403      	bmi.n	8111808 <__lo0bits+0x4e>
 8111800:	085b      	lsrs	r3, r3, #1
 8111802:	f100 0001 	add.w	r0, r0, #1
 8111806:	d003      	beq.n	8111810 <__lo0bits+0x56>
 8111808:	6013      	str	r3, [r2, #0]
 811180a:	4770      	bx	lr
 811180c:	2000      	movs	r0, #0
 811180e:	4770      	bx	lr
 8111810:	2020      	movs	r0, #32
 8111812:	4770      	bx	lr

08111814 <__i2b>:
 8111814:	b510      	push	{r4, lr}
 8111816:	460c      	mov	r4, r1
 8111818:	2101      	movs	r1, #1
 811181a:	f7ff febd 	bl	8111598 <_Balloc>
 811181e:	4602      	mov	r2, r0
 8111820:	b928      	cbnz	r0, 811182e <__i2b+0x1a>
 8111822:	4b05      	ldr	r3, [pc, #20]	@ (8111838 <__i2b+0x24>)
 8111824:	4805      	ldr	r0, [pc, #20]	@ (811183c <__i2b+0x28>)
 8111826:	f240 1145 	movw	r1, #325	@ 0x145
 811182a:	f7fe ff49 	bl	81106c0 <__assert_func>
 811182e:	2301      	movs	r3, #1
 8111830:	6144      	str	r4, [r0, #20]
 8111832:	6103      	str	r3, [r0, #16]
 8111834:	bd10      	pop	{r4, pc}
 8111836:	bf00      	nop
 8111838:	08113e49 	.word	0x08113e49
 811183c:	08113e5a 	.word	0x08113e5a

08111840 <__multiply>:
 8111840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111844:	4614      	mov	r4, r2
 8111846:	690a      	ldr	r2, [r1, #16]
 8111848:	6923      	ldr	r3, [r4, #16]
 811184a:	429a      	cmp	r2, r3
 811184c:	bfa8      	it	ge
 811184e:	4623      	movge	r3, r4
 8111850:	460f      	mov	r7, r1
 8111852:	bfa4      	itt	ge
 8111854:	460c      	movge	r4, r1
 8111856:	461f      	movge	r7, r3
 8111858:	f8d4 a010 	ldr.w	sl, [r4, #16]
 811185c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8111860:	68a3      	ldr	r3, [r4, #8]
 8111862:	6861      	ldr	r1, [r4, #4]
 8111864:	eb0a 0609 	add.w	r6, sl, r9
 8111868:	42b3      	cmp	r3, r6
 811186a:	b085      	sub	sp, #20
 811186c:	bfb8      	it	lt
 811186e:	3101      	addlt	r1, #1
 8111870:	f7ff fe92 	bl	8111598 <_Balloc>
 8111874:	b930      	cbnz	r0, 8111884 <__multiply+0x44>
 8111876:	4602      	mov	r2, r0
 8111878:	4b44      	ldr	r3, [pc, #272]	@ (811198c <__multiply+0x14c>)
 811187a:	4845      	ldr	r0, [pc, #276]	@ (8111990 <__multiply+0x150>)
 811187c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8111880:	f7fe ff1e 	bl	81106c0 <__assert_func>
 8111884:	f100 0514 	add.w	r5, r0, #20
 8111888:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 811188c:	462b      	mov	r3, r5
 811188e:	2200      	movs	r2, #0
 8111890:	4543      	cmp	r3, r8
 8111892:	d321      	bcc.n	81118d8 <__multiply+0x98>
 8111894:	f107 0114 	add.w	r1, r7, #20
 8111898:	f104 0214 	add.w	r2, r4, #20
 811189c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 81118a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 81118a4:	9302      	str	r3, [sp, #8]
 81118a6:	1b13      	subs	r3, r2, r4
 81118a8:	3b15      	subs	r3, #21
 81118aa:	f023 0303 	bic.w	r3, r3, #3
 81118ae:	3304      	adds	r3, #4
 81118b0:	f104 0715 	add.w	r7, r4, #21
 81118b4:	42ba      	cmp	r2, r7
 81118b6:	bf38      	it	cc
 81118b8:	2304      	movcc	r3, #4
 81118ba:	9301      	str	r3, [sp, #4]
 81118bc:	9b02      	ldr	r3, [sp, #8]
 81118be:	9103      	str	r1, [sp, #12]
 81118c0:	428b      	cmp	r3, r1
 81118c2:	d80c      	bhi.n	81118de <__multiply+0x9e>
 81118c4:	2e00      	cmp	r6, #0
 81118c6:	dd03      	ble.n	81118d0 <__multiply+0x90>
 81118c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 81118cc:	2b00      	cmp	r3, #0
 81118ce:	d05b      	beq.n	8111988 <__multiply+0x148>
 81118d0:	6106      	str	r6, [r0, #16]
 81118d2:	b005      	add	sp, #20
 81118d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81118d8:	f843 2b04 	str.w	r2, [r3], #4
 81118dc:	e7d8      	b.n	8111890 <__multiply+0x50>
 81118de:	f8b1 a000 	ldrh.w	sl, [r1]
 81118e2:	f1ba 0f00 	cmp.w	sl, #0
 81118e6:	d024      	beq.n	8111932 <__multiply+0xf2>
 81118e8:	f104 0e14 	add.w	lr, r4, #20
 81118ec:	46a9      	mov	r9, r5
 81118ee:	f04f 0c00 	mov.w	ip, #0
 81118f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 81118f6:	f8d9 3000 	ldr.w	r3, [r9]
 81118fa:	fa1f fb87 	uxth.w	fp, r7
 81118fe:	b29b      	uxth	r3, r3
 8111900:	fb0a 330b 	mla	r3, sl, fp, r3
 8111904:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8111908:	f8d9 7000 	ldr.w	r7, [r9]
 811190c:	4463      	add	r3, ip
 811190e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8111912:	fb0a c70b 	mla	r7, sl, fp, ip
 8111916:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 811191a:	b29b      	uxth	r3, r3
 811191c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8111920:	4572      	cmp	r2, lr
 8111922:	f849 3b04 	str.w	r3, [r9], #4
 8111926:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 811192a:	d8e2      	bhi.n	81118f2 <__multiply+0xb2>
 811192c:	9b01      	ldr	r3, [sp, #4]
 811192e:	f845 c003 	str.w	ip, [r5, r3]
 8111932:	9b03      	ldr	r3, [sp, #12]
 8111934:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8111938:	3104      	adds	r1, #4
 811193a:	f1b9 0f00 	cmp.w	r9, #0
 811193e:	d021      	beq.n	8111984 <__multiply+0x144>
 8111940:	682b      	ldr	r3, [r5, #0]
 8111942:	f104 0c14 	add.w	ip, r4, #20
 8111946:	46ae      	mov	lr, r5
 8111948:	f04f 0a00 	mov.w	sl, #0
 811194c:	f8bc b000 	ldrh.w	fp, [ip]
 8111950:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8111954:	fb09 770b 	mla	r7, r9, fp, r7
 8111958:	4457      	add	r7, sl
 811195a:	b29b      	uxth	r3, r3
 811195c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8111960:	f84e 3b04 	str.w	r3, [lr], #4
 8111964:	f85c 3b04 	ldr.w	r3, [ip], #4
 8111968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 811196c:	f8be 3000 	ldrh.w	r3, [lr]
 8111970:	fb09 330a 	mla	r3, r9, sl, r3
 8111974:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8111978:	4562      	cmp	r2, ip
 811197a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 811197e:	d8e5      	bhi.n	811194c <__multiply+0x10c>
 8111980:	9f01      	ldr	r7, [sp, #4]
 8111982:	51eb      	str	r3, [r5, r7]
 8111984:	3504      	adds	r5, #4
 8111986:	e799      	b.n	81118bc <__multiply+0x7c>
 8111988:	3e01      	subs	r6, #1
 811198a:	e79b      	b.n	81118c4 <__multiply+0x84>
 811198c:	08113e49 	.word	0x08113e49
 8111990:	08113e5a 	.word	0x08113e5a

08111994 <__pow5mult>:
 8111994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111998:	4615      	mov	r5, r2
 811199a:	f012 0203 	ands.w	r2, r2, #3
 811199e:	4607      	mov	r7, r0
 81119a0:	460e      	mov	r6, r1
 81119a2:	d007      	beq.n	81119b4 <__pow5mult+0x20>
 81119a4:	4c25      	ldr	r4, [pc, #148]	@ (8111a3c <__pow5mult+0xa8>)
 81119a6:	3a01      	subs	r2, #1
 81119a8:	2300      	movs	r3, #0
 81119aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 81119ae:	f7ff fe55 	bl	811165c <__multadd>
 81119b2:	4606      	mov	r6, r0
 81119b4:	10ad      	asrs	r5, r5, #2
 81119b6:	d03d      	beq.n	8111a34 <__pow5mult+0xa0>
 81119b8:	69fc      	ldr	r4, [r7, #28]
 81119ba:	b97c      	cbnz	r4, 81119dc <__pow5mult+0x48>
 81119bc:	2010      	movs	r0, #16
 81119be:	f7ff fd35 	bl	811142c <malloc>
 81119c2:	4602      	mov	r2, r0
 81119c4:	61f8      	str	r0, [r7, #28]
 81119c6:	b928      	cbnz	r0, 81119d4 <__pow5mult+0x40>
 81119c8:	4b1d      	ldr	r3, [pc, #116]	@ (8111a40 <__pow5mult+0xac>)
 81119ca:	481e      	ldr	r0, [pc, #120]	@ (8111a44 <__pow5mult+0xb0>)
 81119cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 81119d0:	f7fe fe76 	bl	81106c0 <__assert_func>
 81119d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 81119d8:	6004      	str	r4, [r0, #0]
 81119da:	60c4      	str	r4, [r0, #12]
 81119dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 81119e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 81119e4:	b94c      	cbnz	r4, 81119fa <__pow5mult+0x66>
 81119e6:	f240 2171 	movw	r1, #625	@ 0x271
 81119ea:	4638      	mov	r0, r7
 81119ec:	f7ff ff12 	bl	8111814 <__i2b>
 81119f0:	2300      	movs	r3, #0
 81119f2:	f8c8 0008 	str.w	r0, [r8, #8]
 81119f6:	4604      	mov	r4, r0
 81119f8:	6003      	str	r3, [r0, #0]
 81119fa:	f04f 0900 	mov.w	r9, #0
 81119fe:	07eb      	lsls	r3, r5, #31
 8111a00:	d50a      	bpl.n	8111a18 <__pow5mult+0x84>
 8111a02:	4631      	mov	r1, r6
 8111a04:	4622      	mov	r2, r4
 8111a06:	4638      	mov	r0, r7
 8111a08:	f7ff ff1a 	bl	8111840 <__multiply>
 8111a0c:	4631      	mov	r1, r6
 8111a0e:	4680      	mov	r8, r0
 8111a10:	4638      	mov	r0, r7
 8111a12:	f7ff fe01 	bl	8111618 <_Bfree>
 8111a16:	4646      	mov	r6, r8
 8111a18:	106d      	asrs	r5, r5, #1
 8111a1a:	d00b      	beq.n	8111a34 <__pow5mult+0xa0>
 8111a1c:	6820      	ldr	r0, [r4, #0]
 8111a1e:	b938      	cbnz	r0, 8111a30 <__pow5mult+0x9c>
 8111a20:	4622      	mov	r2, r4
 8111a22:	4621      	mov	r1, r4
 8111a24:	4638      	mov	r0, r7
 8111a26:	f7ff ff0b 	bl	8111840 <__multiply>
 8111a2a:	6020      	str	r0, [r4, #0]
 8111a2c:	f8c0 9000 	str.w	r9, [r0]
 8111a30:	4604      	mov	r4, r0
 8111a32:	e7e4      	b.n	81119fe <__pow5mult+0x6a>
 8111a34:	4630      	mov	r0, r6
 8111a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111a3a:	bf00      	nop
 8111a3c:	08113eb4 	.word	0x08113eb4
 8111a40:	08113d00 	.word	0x08113d00
 8111a44:	08113e5a 	.word	0x08113e5a

08111a48 <__lshift>:
 8111a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111a4c:	460c      	mov	r4, r1
 8111a4e:	6849      	ldr	r1, [r1, #4]
 8111a50:	6923      	ldr	r3, [r4, #16]
 8111a52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8111a56:	68a3      	ldr	r3, [r4, #8]
 8111a58:	4607      	mov	r7, r0
 8111a5a:	4691      	mov	r9, r2
 8111a5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8111a60:	f108 0601 	add.w	r6, r8, #1
 8111a64:	42b3      	cmp	r3, r6
 8111a66:	db0b      	blt.n	8111a80 <__lshift+0x38>
 8111a68:	4638      	mov	r0, r7
 8111a6a:	f7ff fd95 	bl	8111598 <_Balloc>
 8111a6e:	4605      	mov	r5, r0
 8111a70:	b948      	cbnz	r0, 8111a86 <__lshift+0x3e>
 8111a72:	4602      	mov	r2, r0
 8111a74:	4b28      	ldr	r3, [pc, #160]	@ (8111b18 <__lshift+0xd0>)
 8111a76:	4829      	ldr	r0, [pc, #164]	@ (8111b1c <__lshift+0xd4>)
 8111a78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8111a7c:	f7fe fe20 	bl	81106c0 <__assert_func>
 8111a80:	3101      	adds	r1, #1
 8111a82:	005b      	lsls	r3, r3, #1
 8111a84:	e7ee      	b.n	8111a64 <__lshift+0x1c>
 8111a86:	2300      	movs	r3, #0
 8111a88:	f100 0114 	add.w	r1, r0, #20
 8111a8c:	f100 0210 	add.w	r2, r0, #16
 8111a90:	4618      	mov	r0, r3
 8111a92:	4553      	cmp	r3, sl
 8111a94:	db33      	blt.n	8111afe <__lshift+0xb6>
 8111a96:	6920      	ldr	r0, [r4, #16]
 8111a98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8111a9c:	f104 0314 	add.w	r3, r4, #20
 8111aa0:	f019 091f 	ands.w	r9, r9, #31
 8111aa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8111aa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8111aac:	d02b      	beq.n	8111b06 <__lshift+0xbe>
 8111aae:	f1c9 0e20 	rsb	lr, r9, #32
 8111ab2:	468a      	mov	sl, r1
 8111ab4:	2200      	movs	r2, #0
 8111ab6:	6818      	ldr	r0, [r3, #0]
 8111ab8:	fa00 f009 	lsl.w	r0, r0, r9
 8111abc:	4310      	orrs	r0, r2
 8111abe:	f84a 0b04 	str.w	r0, [sl], #4
 8111ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8111ac6:	459c      	cmp	ip, r3
 8111ac8:	fa22 f20e 	lsr.w	r2, r2, lr
 8111acc:	d8f3      	bhi.n	8111ab6 <__lshift+0x6e>
 8111ace:	ebac 0304 	sub.w	r3, ip, r4
 8111ad2:	3b15      	subs	r3, #21
 8111ad4:	f023 0303 	bic.w	r3, r3, #3
 8111ad8:	3304      	adds	r3, #4
 8111ada:	f104 0015 	add.w	r0, r4, #21
 8111ade:	4584      	cmp	ip, r0
 8111ae0:	bf38      	it	cc
 8111ae2:	2304      	movcc	r3, #4
 8111ae4:	50ca      	str	r2, [r1, r3]
 8111ae6:	b10a      	cbz	r2, 8111aec <__lshift+0xa4>
 8111ae8:	f108 0602 	add.w	r6, r8, #2
 8111aec:	3e01      	subs	r6, #1
 8111aee:	4638      	mov	r0, r7
 8111af0:	612e      	str	r6, [r5, #16]
 8111af2:	4621      	mov	r1, r4
 8111af4:	f7ff fd90 	bl	8111618 <_Bfree>
 8111af8:	4628      	mov	r0, r5
 8111afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8111b02:	3301      	adds	r3, #1
 8111b04:	e7c5      	b.n	8111a92 <__lshift+0x4a>
 8111b06:	3904      	subs	r1, #4
 8111b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8111b0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8111b10:	459c      	cmp	ip, r3
 8111b12:	d8f9      	bhi.n	8111b08 <__lshift+0xc0>
 8111b14:	e7ea      	b.n	8111aec <__lshift+0xa4>
 8111b16:	bf00      	nop
 8111b18:	08113e49 	.word	0x08113e49
 8111b1c:	08113e5a 	.word	0x08113e5a

08111b20 <__mcmp>:
 8111b20:	690a      	ldr	r2, [r1, #16]
 8111b22:	4603      	mov	r3, r0
 8111b24:	6900      	ldr	r0, [r0, #16]
 8111b26:	1a80      	subs	r0, r0, r2
 8111b28:	b530      	push	{r4, r5, lr}
 8111b2a:	d10e      	bne.n	8111b4a <__mcmp+0x2a>
 8111b2c:	3314      	adds	r3, #20
 8111b2e:	3114      	adds	r1, #20
 8111b30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8111b34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8111b38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8111b3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8111b40:	4295      	cmp	r5, r2
 8111b42:	d003      	beq.n	8111b4c <__mcmp+0x2c>
 8111b44:	d205      	bcs.n	8111b52 <__mcmp+0x32>
 8111b46:	f04f 30ff 	mov.w	r0, #4294967295
 8111b4a:	bd30      	pop	{r4, r5, pc}
 8111b4c:	42a3      	cmp	r3, r4
 8111b4e:	d3f3      	bcc.n	8111b38 <__mcmp+0x18>
 8111b50:	e7fb      	b.n	8111b4a <__mcmp+0x2a>
 8111b52:	2001      	movs	r0, #1
 8111b54:	e7f9      	b.n	8111b4a <__mcmp+0x2a>
	...

08111b58 <__mdiff>:
 8111b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111b5c:	4689      	mov	r9, r1
 8111b5e:	4606      	mov	r6, r0
 8111b60:	4611      	mov	r1, r2
 8111b62:	4648      	mov	r0, r9
 8111b64:	4614      	mov	r4, r2
 8111b66:	f7ff ffdb 	bl	8111b20 <__mcmp>
 8111b6a:	1e05      	subs	r5, r0, #0
 8111b6c:	d112      	bne.n	8111b94 <__mdiff+0x3c>
 8111b6e:	4629      	mov	r1, r5
 8111b70:	4630      	mov	r0, r6
 8111b72:	f7ff fd11 	bl	8111598 <_Balloc>
 8111b76:	4602      	mov	r2, r0
 8111b78:	b928      	cbnz	r0, 8111b86 <__mdiff+0x2e>
 8111b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8111c78 <__mdiff+0x120>)
 8111b7c:	f240 2137 	movw	r1, #567	@ 0x237
 8111b80:	483e      	ldr	r0, [pc, #248]	@ (8111c7c <__mdiff+0x124>)
 8111b82:	f7fe fd9d 	bl	81106c0 <__assert_func>
 8111b86:	2301      	movs	r3, #1
 8111b88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8111b8c:	4610      	mov	r0, r2
 8111b8e:	b003      	add	sp, #12
 8111b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111b94:	bfbc      	itt	lt
 8111b96:	464b      	movlt	r3, r9
 8111b98:	46a1      	movlt	r9, r4
 8111b9a:	4630      	mov	r0, r6
 8111b9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8111ba0:	bfba      	itte	lt
 8111ba2:	461c      	movlt	r4, r3
 8111ba4:	2501      	movlt	r5, #1
 8111ba6:	2500      	movge	r5, #0
 8111ba8:	f7ff fcf6 	bl	8111598 <_Balloc>
 8111bac:	4602      	mov	r2, r0
 8111bae:	b918      	cbnz	r0, 8111bb8 <__mdiff+0x60>
 8111bb0:	4b31      	ldr	r3, [pc, #196]	@ (8111c78 <__mdiff+0x120>)
 8111bb2:	f240 2145 	movw	r1, #581	@ 0x245
 8111bb6:	e7e3      	b.n	8111b80 <__mdiff+0x28>
 8111bb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8111bbc:	6926      	ldr	r6, [r4, #16]
 8111bbe:	60c5      	str	r5, [r0, #12]
 8111bc0:	f109 0310 	add.w	r3, r9, #16
 8111bc4:	f109 0514 	add.w	r5, r9, #20
 8111bc8:	f104 0e14 	add.w	lr, r4, #20
 8111bcc:	f100 0b14 	add.w	fp, r0, #20
 8111bd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8111bd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8111bd8:	9301      	str	r3, [sp, #4]
 8111bda:	46d9      	mov	r9, fp
 8111bdc:	f04f 0c00 	mov.w	ip, #0
 8111be0:	9b01      	ldr	r3, [sp, #4]
 8111be2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8111be6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8111bea:	9301      	str	r3, [sp, #4]
 8111bec:	fa1f f38a 	uxth.w	r3, sl
 8111bf0:	4619      	mov	r1, r3
 8111bf2:	b283      	uxth	r3, r0
 8111bf4:	1acb      	subs	r3, r1, r3
 8111bf6:	0c00      	lsrs	r0, r0, #16
 8111bf8:	4463      	add	r3, ip
 8111bfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8111bfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8111c02:	b29b      	uxth	r3, r3
 8111c04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8111c08:	4576      	cmp	r6, lr
 8111c0a:	f849 3b04 	str.w	r3, [r9], #4
 8111c0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8111c12:	d8e5      	bhi.n	8111be0 <__mdiff+0x88>
 8111c14:	1b33      	subs	r3, r6, r4
 8111c16:	3b15      	subs	r3, #21
 8111c18:	f023 0303 	bic.w	r3, r3, #3
 8111c1c:	3415      	adds	r4, #21
 8111c1e:	3304      	adds	r3, #4
 8111c20:	42a6      	cmp	r6, r4
 8111c22:	bf38      	it	cc
 8111c24:	2304      	movcc	r3, #4
 8111c26:	441d      	add	r5, r3
 8111c28:	445b      	add	r3, fp
 8111c2a:	461e      	mov	r6, r3
 8111c2c:	462c      	mov	r4, r5
 8111c2e:	4544      	cmp	r4, r8
 8111c30:	d30e      	bcc.n	8111c50 <__mdiff+0xf8>
 8111c32:	f108 0103 	add.w	r1, r8, #3
 8111c36:	1b49      	subs	r1, r1, r5
 8111c38:	f021 0103 	bic.w	r1, r1, #3
 8111c3c:	3d03      	subs	r5, #3
 8111c3e:	45a8      	cmp	r8, r5
 8111c40:	bf38      	it	cc
 8111c42:	2100      	movcc	r1, #0
 8111c44:	440b      	add	r3, r1
 8111c46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8111c4a:	b191      	cbz	r1, 8111c72 <__mdiff+0x11a>
 8111c4c:	6117      	str	r7, [r2, #16]
 8111c4e:	e79d      	b.n	8111b8c <__mdiff+0x34>
 8111c50:	f854 1b04 	ldr.w	r1, [r4], #4
 8111c54:	46e6      	mov	lr, ip
 8111c56:	0c08      	lsrs	r0, r1, #16
 8111c58:	fa1c fc81 	uxtah	ip, ip, r1
 8111c5c:	4471      	add	r1, lr
 8111c5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8111c62:	b289      	uxth	r1, r1
 8111c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8111c68:	f846 1b04 	str.w	r1, [r6], #4
 8111c6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8111c70:	e7dd      	b.n	8111c2e <__mdiff+0xd6>
 8111c72:	3f01      	subs	r7, #1
 8111c74:	e7e7      	b.n	8111c46 <__mdiff+0xee>
 8111c76:	bf00      	nop
 8111c78:	08113e49 	.word	0x08113e49
 8111c7c:	08113e5a 	.word	0x08113e5a

08111c80 <__ulp>:
 8111c80:	b082      	sub	sp, #8
 8111c82:	ed8d 0b00 	vstr	d0, [sp]
 8111c86:	9a01      	ldr	r2, [sp, #4]
 8111c88:	4b0f      	ldr	r3, [pc, #60]	@ (8111cc8 <__ulp+0x48>)
 8111c8a:	4013      	ands	r3, r2
 8111c8c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8111c90:	2b00      	cmp	r3, #0
 8111c92:	dc08      	bgt.n	8111ca6 <__ulp+0x26>
 8111c94:	425b      	negs	r3, r3
 8111c96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8111c9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8111c9e:	da04      	bge.n	8111caa <__ulp+0x2a>
 8111ca0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8111ca4:	4113      	asrs	r3, r2
 8111ca6:	2200      	movs	r2, #0
 8111ca8:	e008      	b.n	8111cbc <__ulp+0x3c>
 8111caa:	f1a2 0314 	sub.w	r3, r2, #20
 8111cae:	2b1e      	cmp	r3, #30
 8111cb0:	bfda      	itte	le
 8111cb2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8111cb6:	40da      	lsrle	r2, r3
 8111cb8:	2201      	movgt	r2, #1
 8111cba:	2300      	movs	r3, #0
 8111cbc:	4619      	mov	r1, r3
 8111cbe:	4610      	mov	r0, r2
 8111cc0:	ec41 0b10 	vmov	d0, r0, r1
 8111cc4:	b002      	add	sp, #8
 8111cc6:	4770      	bx	lr
 8111cc8:	7ff00000 	.word	0x7ff00000

08111ccc <__b2d>:
 8111ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8111cd0:	6906      	ldr	r6, [r0, #16]
 8111cd2:	f100 0814 	add.w	r8, r0, #20
 8111cd6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8111cda:	1f37      	subs	r7, r6, #4
 8111cdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8111ce0:	4610      	mov	r0, r2
 8111ce2:	f7ff fd4b 	bl	811177c <__hi0bits>
 8111ce6:	f1c0 0320 	rsb	r3, r0, #32
 8111cea:	280a      	cmp	r0, #10
 8111cec:	600b      	str	r3, [r1, #0]
 8111cee:	491b      	ldr	r1, [pc, #108]	@ (8111d5c <__b2d+0x90>)
 8111cf0:	dc15      	bgt.n	8111d1e <__b2d+0x52>
 8111cf2:	f1c0 0c0b 	rsb	ip, r0, #11
 8111cf6:	fa22 f30c 	lsr.w	r3, r2, ip
 8111cfa:	45b8      	cmp	r8, r7
 8111cfc:	ea43 0501 	orr.w	r5, r3, r1
 8111d00:	bf34      	ite	cc
 8111d02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8111d06:	2300      	movcs	r3, #0
 8111d08:	3015      	adds	r0, #21
 8111d0a:	fa02 f000 	lsl.w	r0, r2, r0
 8111d0e:	fa23 f30c 	lsr.w	r3, r3, ip
 8111d12:	4303      	orrs	r3, r0
 8111d14:	461c      	mov	r4, r3
 8111d16:	ec45 4b10 	vmov	d0, r4, r5
 8111d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8111d1e:	45b8      	cmp	r8, r7
 8111d20:	bf3a      	itte	cc
 8111d22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8111d26:	f1a6 0708 	subcc.w	r7, r6, #8
 8111d2a:	2300      	movcs	r3, #0
 8111d2c:	380b      	subs	r0, #11
 8111d2e:	d012      	beq.n	8111d56 <__b2d+0x8a>
 8111d30:	f1c0 0120 	rsb	r1, r0, #32
 8111d34:	fa23 f401 	lsr.w	r4, r3, r1
 8111d38:	4082      	lsls	r2, r0
 8111d3a:	4322      	orrs	r2, r4
 8111d3c:	4547      	cmp	r7, r8
 8111d3e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8111d42:	bf8c      	ite	hi
 8111d44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8111d48:	2200      	movls	r2, #0
 8111d4a:	4083      	lsls	r3, r0
 8111d4c:	40ca      	lsrs	r2, r1
 8111d4e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8111d52:	4313      	orrs	r3, r2
 8111d54:	e7de      	b.n	8111d14 <__b2d+0x48>
 8111d56:	ea42 0501 	orr.w	r5, r2, r1
 8111d5a:	e7db      	b.n	8111d14 <__b2d+0x48>
 8111d5c:	3ff00000 	.word	0x3ff00000

08111d60 <__d2b>:
 8111d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8111d64:	460f      	mov	r7, r1
 8111d66:	2101      	movs	r1, #1
 8111d68:	ec59 8b10 	vmov	r8, r9, d0
 8111d6c:	4616      	mov	r6, r2
 8111d6e:	f7ff fc13 	bl	8111598 <_Balloc>
 8111d72:	4604      	mov	r4, r0
 8111d74:	b930      	cbnz	r0, 8111d84 <__d2b+0x24>
 8111d76:	4602      	mov	r2, r0
 8111d78:	4b23      	ldr	r3, [pc, #140]	@ (8111e08 <__d2b+0xa8>)
 8111d7a:	4824      	ldr	r0, [pc, #144]	@ (8111e0c <__d2b+0xac>)
 8111d7c:	f240 310f 	movw	r1, #783	@ 0x30f
 8111d80:	f7fe fc9e 	bl	81106c0 <__assert_func>
 8111d84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8111d88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8111d8c:	b10d      	cbz	r5, 8111d92 <__d2b+0x32>
 8111d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8111d92:	9301      	str	r3, [sp, #4]
 8111d94:	f1b8 0300 	subs.w	r3, r8, #0
 8111d98:	d023      	beq.n	8111de2 <__d2b+0x82>
 8111d9a:	4668      	mov	r0, sp
 8111d9c:	9300      	str	r3, [sp, #0]
 8111d9e:	f7ff fd0c 	bl	81117ba <__lo0bits>
 8111da2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8111da6:	b1d0      	cbz	r0, 8111dde <__d2b+0x7e>
 8111da8:	f1c0 0320 	rsb	r3, r0, #32
 8111dac:	fa02 f303 	lsl.w	r3, r2, r3
 8111db0:	430b      	orrs	r3, r1
 8111db2:	40c2      	lsrs	r2, r0
 8111db4:	6163      	str	r3, [r4, #20]
 8111db6:	9201      	str	r2, [sp, #4]
 8111db8:	9b01      	ldr	r3, [sp, #4]
 8111dba:	61a3      	str	r3, [r4, #24]
 8111dbc:	2b00      	cmp	r3, #0
 8111dbe:	bf0c      	ite	eq
 8111dc0:	2201      	moveq	r2, #1
 8111dc2:	2202      	movne	r2, #2
 8111dc4:	6122      	str	r2, [r4, #16]
 8111dc6:	b1a5      	cbz	r5, 8111df2 <__d2b+0x92>
 8111dc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8111dcc:	4405      	add	r5, r0
 8111dce:	603d      	str	r5, [r7, #0]
 8111dd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8111dd4:	6030      	str	r0, [r6, #0]
 8111dd6:	4620      	mov	r0, r4
 8111dd8:	b003      	add	sp, #12
 8111dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8111dde:	6161      	str	r1, [r4, #20]
 8111de0:	e7ea      	b.n	8111db8 <__d2b+0x58>
 8111de2:	a801      	add	r0, sp, #4
 8111de4:	f7ff fce9 	bl	81117ba <__lo0bits>
 8111de8:	9b01      	ldr	r3, [sp, #4]
 8111dea:	6163      	str	r3, [r4, #20]
 8111dec:	3020      	adds	r0, #32
 8111dee:	2201      	movs	r2, #1
 8111df0:	e7e8      	b.n	8111dc4 <__d2b+0x64>
 8111df2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8111df6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8111dfa:	6038      	str	r0, [r7, #0]
 8111dfc:	6918      	ldr	r0, [r3, #16]
 8111dfe:	f7ff fcbd 	bl	811177c <__hi0bits>
 8111e02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8111e06:	e7e5      	b.n	8111dd4 <__d2b+0x74>
 8111e08:	08113e49 	.word	0x08113e49
 8111e0c:	08113e5a 	.word	0x08113e5a

08111e10 <__ratio>:
 8111e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111e14:	b085      	sub	sp, #20
 8111e16:	e9cd 1000 	strd	r1, r0, [sp]
 8111e1a:	a902      	add	r1, sp, #8
 8111e1c:	f7ff ff56 	bl	8111ccc <__b2d>
 8111e20:	9800      	ldr	r0, [sp, #0]
 8111e22:	a903      	add	r1, sp, #12
 8111e24:	ec55 4b10 	vmov	r4, r5, d0
 8111e28:	f7ff ff50 	bl	8111ccc <__b2d>
 8111e2c:	9b01      	ldr	r3, [sp, #4]
 8111e2e:	6919      	ldr	r1, [r3, #16]
 8111e30:	9b00      	ldr	r3, [sp, #0]
 8111e32:	691b      	ldr	r3, [r3, #16]
 8111e34:	1ac9      	subs	r1, r1, r3
 8111e36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8111e3a:	1a9b      	subs	r3, r3, r2
 8111e3c:	ec5b ab10 	vmov	sl, fp, d0
 8111e40:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8111e44:	2b00      	cmp	r3, #0
 8111e46:	bfce      	itee	gt
 8111e48:	462a      	movgt	r2, r5
 8111e4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8111e4e:	465a      	movle	r2, fp
 8111e50:	462f      	mov	r7, r5
 8111e52:	46d9      	mov	r9, fp
 8111e54:	bfcc      	ite	gt
 8111e56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8111e5a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8111e5e:	464b      	mov	r3, r9
 8111e60:	4652      	mov	r2, sl
 8111e62:	4620      	mov	r0, r4
 8111e64:	4639      	mov	r1, r7
 8111e66:	f7ee fd79 	bl	810095c <__aeabi_ddiv>
 8111e6a:	ec41 0b10 	vmov	d0, r0, r1
 8111e6e:	b005      	add	sp, #20
 8111e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08111e74 <__copybits>:
 8111e74:	3901      	subs	r1, #1
 8111e76:	b570      	push	{r4, r5, r6, lr}
 8111e78:	1149      	asrs	r1, r1, #5
 8111e7a:	6914      	ldr	r4, [r2, #16]
 8111e7c:	3101      	adds	r1, #1
 8111e7e:	f102 0314 	add.w	r3, r2, #20
 8111e82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8111e86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8111e8a:	1f05      	subs	r5, r0, #4
 8111e8c:	42a3      	cmp	r3, r4
 8111e8e:	d30c      	bcc.n	8111eaa <__copybits+0x36>
 8111e90:	1aa3      	subs	r3, r4, r2
 8111e92:	3b11      	subs	r3, #17
 8111e94:	f023 0303 	bic.w	r3, r3, #3
 8111e98:	3211      	adds	r2, #17
 8111e9a:	42a2      	cmp	r2, r4
 8111e9c:	bf88      	it	hi
 8111e9e:	2300      	movhi	r3, #0
 8111ea0:	4418      	add	r0, r3
 8111ea2:	2300      	movs	r3, #0
 8111ea4:	4288      	cmp	r0, r1
 8111ea6:	d305      	bcc.n	8111eb4 <__copybits+0x40>
 8111ea8:	bd70      	pop	{r4, r5, r6, pc}
 8111eaa:	f853 6b04 	ldr.w	r6, [r3], #4
 8111eae:	f845 6f04 	str.w	r6, [r5, #4]!
 8111eb2:	e7eb      	b.n	8111e8c <__copybits+0x18>
 8111eb4:	f840 3b04 	str.w	r3, [r0], #4
 8111eb8:	e7f4      	b.n	8111ea4 <__copybits+0x30>

08111eba <__any_on>:
 8111eba:	f100 0214 	add.w	r2, r0, #20
 8111ebe:	6900      	ldr	r0, [r0, #16]
 8111ec0:	114b      	asrs	r3, r1, #5
 8111ec2:	4298      	cmp	r0, r3
 8111ec4:	b510      	push	{r4, lr}
 8111ec6:	db11      	blt.n	8111eec <__any_on+0x32>
 8111ec8:	dd0a      	ble.n	8111ee0 <__any_on+0x26>
 8111eca:	f011 011f 	ands.w	r1, r1, #31
 8111ece:	d007      	beq.n	8111ee0 <__any_on+0x26>
 8111ed0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8111ed4:	fa24 f001 	lsr.w	r0, r4, r1
 8111ed8:	fa00 f101 	lsl.w	r1, r0, r1
 8111edc:	428c      	cmp	r4, r1
 8111ede:	d10b      	bne.n	8111ef8 <__any_on+0x3e>
 8111ee0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8111ee4:	4293      	cmp	r3, r2
 8111ee6:	d803      	bhi.n	8111ef0 <__any_on+0x36>
 8111ee8:	2000      	movs	r0, #0
 8111eea:	bd10      	pop	{r4, pc}
 8111eec:	4603      	mov	r3, r0
 8111eee:	e7f7      	b.n	8111ee0 <__any_on+0x26>
 8111ef0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8111ef4:	2900      	cmp	r1, #0
 8111ef6:	d0f5      	beq.n	8111ee4 <__any_on+0x2a>
 8111ef8:	2001      	movs	r0, #1
 8111efa:	e7f6      	b.n	8111eea <__any_on+0x30>

08111efc <sulp>:
 8111efc:	b570      	push	{r4, r5, r6, lr}
 8111efe:	4604      	mov	r4, r0
 8111f00:	460d      	mov	r5, r1
 8111f02:	ec45 4b10 	vmov	d0, r4, r5
 8111f06:	4616      	mov	r6, r2
 8111f08:	f7ff feba 	bl	8111c80 <__ulp>
 8111f0c:	ec51 0b10 	vmov	r0, r1, d0
 8111f10:	b17e      	cbz	r6, 8111f32 <sulp+0x36>
 8111f12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8111f16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8111f1a:	2b00      	cmp	r3, #0
 8111f1c:	dd09      	ble.n	8111f32 <sulp+0x36>
 8111f1e:	051b      	lsls	r3, r3, #20
 8111f20:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8111f24:	2400      	movs	r4, #0
 8111f26:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8111f2a:	4622      	mov	r2, r4
 8111f2c:	462b      	mov	r3, r5
 8111f2e:	f7ee fbeb 	bl	8100708 <__aeabi_dmul>
 8111f32:	ec41 0b10 	vmov	d0, r0, r1
 8111f36:	bd70      	pop	{r4, r5, r6, pc}

08111f38 <_strtod_l>:
 8111f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111f3c:	b09f      	sub	sp, #124	@ 0x7c
 8111f3e:	460c      	mov	r4, r1
 8111f40:	9217      	str	r2, [sp, #92]	@ 0x5c
 8111f42:	2200      	movs	r2, #0
 8111f44:	921a      	str	r2, [sp, #104]	@ 0x68
 8111f46:	9005      	str	r0, [sp, #20]
 8111f48:	f04f 0a00 	mov.w	sl, #0
 8111f4c:	f04f 0b00 	mov.w	fp, #0
 8111f50:	460a      	mov	r2, r1
 8111f52:	9219      	str	r2, [sp, #100]	@ 0x64
 8111f54:	7811      	ldrb	r1, [r2, #0]
 8111f56:	292b      	cmp	r1, #43	@ 0x2b
 8111f58:	d04a      	beq.n	8111ff0 <_strtod_l+0xb8>
 8111f5a:	d838      	bhi.n	8111fce <_strtod_l+0x96>
 8111f5c:	290d      	cmp	r1, #13
 8111f5e:	d832      	bhi.n	8111fc6 <_strtod_l+0x8e>
 8111f60:	2908      	cmp	r1, #8
 8111f62:	d832      	bhi.n	8111fca <_strtod_l+0x92>
 8111f64:	2900      	cmp	r1, #0
 8111f66:	d03b      	beq.n	8111fe0 <_strtod_l+0xa8>
 8111f68:	2200      	movs	r2, #0
 8111f6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8111f6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8111f6e:	782a      	ldrb	r2, [r5, #0]
 8111f70:	2a30      	cmp	r2, #48	@ 0x30
 8111f72:	f040 80b3 	bne.w	81120dc <_strtod_l+0x1a4>
 8111f76:	786a      	ldrb	r2, [r5, #1]
 8111f78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8111f7c:	2a58      	cmp	r2, #88	@ 0x58
 8111f7e:	d16e      	bne.n	811205e <_strtod_l+0x126>
 8111f80:	9302      	str	r3, [sp, #8]
 8111f82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111f84:	9301      	str	r3, [sp, #4]
 8111f86:	ab1a      	add	r3, sp, #104	@ 0x68
 8111f88:	9300      	str	r3, [sp, #0]
 8111f8a:	4a8e      	ldr	r2, [pc, #568]	@ (81121c4 <_strtod_l+0x28c>)
 8111f8c:	9805      	ldr	r0, [sp, #20]
 8111f8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8111f90:	a919      	add	r1, sp, #100	@ 0x64
 8111f92:	f001 fadb 	bl	811354c <__gethex>
 8111f96:	f010 060f 	ands.w	r6, r0, #15
 8111f9a:	4604      	mov	r4, r0
 8111f9c:	d005      	beq.n	8111faa <_strtod_l+0x72>
 8111f9e:	2e06      	cmp	r6, #6
 8111fa0:	d128      	bne.n	8111ff4 <_strtod_l+0xbc>
 8111fa2:	3501      	adds	r5, #1
 8111fa4:	2300      	movs	r3, #0
 8111fa6:	9519      	str	r5, [sp, #100]	@ 0x64
 8111fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8111faa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8111fac:	2b00      	cmp	r3, #0
 8111fae:	f040 858e 	bne.w	8112ace <_strtod_l+0xb96>
 8111fb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8111fb4:	b1cb      	cbz	r3, 8111fea <_strtod_l+0xb2>
 8111fb6:	4652      	mov	r2, sl
 8111fb8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8111fbc:	ec43 2b10 	vmov	d0, r2, r3
 8111fc0:	b01f      	add	sp, #124	@ 0x7c
 8111fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111fc6:	2920      	cmp	r1, #32
 8111fc8:	d1ce      	bne.n	8111f68 <_strtod_l+0x30>
 8111fca:	3201      	adds	r2, #1
 8111fcc:	e7c1      	b.n	8111f52 <_strtod_l+0x1a>
 8111fce:	292d      	cmp	r1, #45	@ 0x2d
 8111fd0:	d1ca      	bne.n	8111f68 <_strtod_l+0x30>
 8111fd2:	2101      	movs	r1, #1
 8111fd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8111fd6:	1c51      	adds	r1, r2, #1
 8111fd8:	9119      	str	r1, [sp, #100]	@ 0x64
 8111fda:	7852      	ldrb	r2, [r2, #1]
 8111fdc:	2a00      	cmp	r2, #0
 8111fde:	d1c5      	bne.n	8111f6c <_strtod_l+0x34>
 8111fe0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8111fe2:	9419      	str	r4, [sp, #100]	@ 0x64
 8111fe4:	2b00      	cmp	r3, #0
 8111fe6:	f040 8570 	bne.w	8112aca <_strtod_l+0xb92>
 8111fea:	4652      	mov	r2, sl
 8111fec:	465b      	mov	r3, fp
 8111fee:	e7e5      	b.n	8111fbc <_strtod_l+0x84>
 8111ff0:	2100      	movs	r1, #0
 8111ff2:	e7ef      	b.n	8111fd4 <_strtod_l+0x9c>
 8111ff4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8111ff6:	b13a      	cbz	r2, 8112008 <_strtod_l+0xd0>
 8111ff8:	2135      	movs	r1, #53	@ 0x35
 8111ffa:	a81c      	add	r0, sp, #112	@ 0x70
 8111ffc:	f7ff ff3a 	bl	8111e74 <__copybits>
 8112000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8112002:	9805      	ldr	r0, [sp, #20]
 8112004:	f7ff fb08 	bl	8111618 <_Bfree>
 8112008:	3e01      	subs	r6, #1
 811200a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 811200c:	2e04      	cmp	r6, #4
 811200e:	d806      	bhi.n	811201e <_strtod_l+0xe6>
 8112010:	e8df f006 	tbb	[pc, r6]
 8112014:	201d0314 	.word	0x201d0314
 8112018:	14          	.byte	0x14
 8112019:	00          	.byte	0x00
 811201a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 811201e:	05e1      	lsls	r1, r4, #23
 8112020:	bf48      	it	mi
 8112022:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8112026:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 811202a:	0d1b      	lsrs	r3, r3, #20
 811202c:	051b      	lsls	r3, r3, #20
 811202e:	2b00      	cmp	r3, #0
 8112030:	d1bb      	bne.n	8111faa <_strtod_l+0x72>
 8112032:	f7fe fb03 	bl	811063c <__errno>
 8112036:	2322      	movs	r3, #34	@ 0x22
 8112038:	6003      	str	r3, [r0, #0]
 811203a:	e7b6      	b.n	8111faa <_strtod_l+0x72>
 811203c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8112040:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8112044:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8112048:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 811204c:	e7e7      	b.n	811201e <_strtod_l+0xe6>
 811204e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 81121cc <_strtod_l+0x294>
 8112052:	e7e4      	b.n	811201e <_strtod_l+0xe6>
 8112054:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8112058:	f04f 3aff 	mov.w	sl, #4294967295
 811205c:	e7df      	b.n	811201e <_strtod_l+0xe6>
 811205e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8112060:	1c5a      	adds	r2, r3, #1
 8112062:	9219      	str	r2, [sp, #100]	@ 0x64
 8112064:	785b      	ldrb	r3, [r3, #1]
 8112066:	2b30      	cmp	r3, #48	@ 0x30
 8112068:	d0f9      	beq.n	811205e <_strtod_l+0x126>
 811206a:	2b00      	cmp	r3, #0
 811206c:	d09d      	beq.n	8111faa <_strtod_l+0x72>
 811206e:	2301      	movs	r3, #1
 8112070:	9309      	str	r3, [sp, #36]	@ 0x24
 8112072:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8112074:	930c      	str	r3, [sp, #48]	@ 0x30
 8112076:	2300      	movs	r3, #0
 8112078:	9308      	str	r3, [sp, #32]
 811207a:	930a      	str	r3, [sp, #40]	@ 0x28
 811207c:	461f      	mov	r7, r3
 811207e:	220a      	movs	r2, #10
 8112080:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8112082:	7805      	ldrb	r5, [r0, #0]
 8112084:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8112088:	b2d9      	uxtb	r1, r3
 811208a:	2909      	cmp	r1, #9
 811208c:	d928      	bls.n	81120e0 <_strtod_l+0x1a8>
 811208e:	494e      	ldr	r1, [pc, #312]	@ (81121c8 <_strtod_l+0x290>)
 8112090:	2201      	movs	r2, #1
 8112092:	f001 f98b 	bl	81133ac <strncmp>
 8112096:	2800      	cmp	r0, #0
 8112098:	d032      	beq.n	8112100 <_strtod_l+0x1c8>
 811209a:	2000      	movs	r0, #0
 811209c:	462a      	mov	r2, r5
 811209e:	4681      	mov	r9, r0
 81120a0:	463d      	mov	r5, r7
 81120a2:	4603      	mov	r3, r0
 81120a4:	2a65      	cmp	r2, #101	@ 0x65
 81120a6:	d001      	beq.n	81120ac <_strtod_l+0x174>
 81120a8:	2a45      	cmp	r2, #69	@ 0x45
 81120aa:	d114      	bne.n	81120d6 <_strtod_l+0x19e>
 81120ac:	b91d      	cbnz	r5, 81120b6 <_strtod_l+0x17e>
 81120ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81120b0:	4302      	orrs	r2, r0
 81120b2:	d095      	beq.n	8111fe0 <_strtod_l+0xa8>
 81120b4:	2500      	movs	r5, #0
 81120b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 81120b8:	1c62      	adds	r2, r4, #1
 81120ba:	9219      	str	r2, [sp, #100]	@ 0x64
 81120bc:	7862      	ldrb	r2, [r4, #1]
 81120be:	2a2b      	cmp	r2, #43	@ 0x2b
 81120c0:	d077      	beq.n	81121b2 <_strtod_l+0x27a>
 81120c2:	2a2d      	cmp	r2, #45	@ 0x2d
 81120c4:	d07b      	beq.n	81121be <_strtod_l+0x286>
 81120c6:	f04f 0c00 	mov.w	ip, #0
 81120ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 81120ce:	2909      	cmp	r1, #9
 81120d0:	f240 8082 	bls.w	81121d8 <_strtod_l+0x2a0>
 81120d4:	9419      	str	r4, [sp, #100]	@ 0x64
 81120d6:	f04f 0800 	mov.w	r8, #0
 81120da:	e0a2      	b.n	8112222 <_strtod_l+0x2ea>
 81120dc:	2300      	movs	r3, #0
 81120de:	e7c7      	b.n	8112070 <_strtod_l+0x138>
 81120e0:	2f08      	cmp	r7, #8
 81120e2:	bfd5      	itete	le
 81120e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 81120e6:	9908      	ldrgt	r1, [sp, #32]
 81120e8:	fb02 3301 	mlale	r3, r2, r1, r3
 81120ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 81120f0:	f100 0001 	add.w	r0, r0, #1
 81120f4:	bfd4      	ite	le
 81120f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 81120f8:	9308      	strgt	r3, [sp, #32]
 81120fa:	3701      	adds	r7, #1
 81120fc:	9019      	str	r0, [sp, #100]	@ 0x64
 81120fe:	e7bf      	b.n	8112080 <_strtod_l+0x148>
 8112100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8112102:	1c5a      	adds	r2, r3, #1
 8112104:	9219      	str	r2, [sp, #100]	@ 0x64
 8112106:	785a      	ldrb	r2, [r3, #1]
 8112108:	b37f      	cbz	r7, 811216a <_strtod_l+0x232>
 811210a:	4681      	mov	r9, r0
 811210c:	463d      	mov	r5, r7
 811210e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8112112:	2b09      	cmp	r3, #9
 8112114:	d912      	bls.n	811213c <_strtod_l+0x204>
 8112116:	2301      	movs	r3, #1
 8112118:	e7c4      	b.n	81120a4 <_strtod_l+0x16c>
 811211a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811211c:	1c5a      	adds	r2, r3, #1
 811211e:	9219      	str	r2, [sp, #100]	@ 0x64
 8112120:	785a      	ldrb	r2, [r3, #1]
 8112122:	3001      	adds	r0, #1
 8112124:	2a30      	cmp	r2, #48	@ 0x30
 8112126:	d0f8      	beq.n	811211a <_strtod_l+0x1e2>
 8112128:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 811212c:	2b08      	cmp	r3, #8
 811212e:	f200 84d3 	bhi.w	8112ad8 <_strtod_l+0xba0>
 8112132:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8112134:	930c      	str	r3, [sp, #48]	@ 0x30
 8112136:	4681      	mov	r9, r0
 8112138:	2000      	movs	r0, #0
 811213a:	4605      	mov	r5, r0
 811213c:	3a30      	subs	r2, #48	@ 0x30
 811213e:	f100 0301 	add.w	r3, r0, #1
 8112142:	d02a      	beq.n	811219a <_strtod_l+0x262>
 8112144:	4499      	add	r9, r3
 8112146:	eb00 0c05 	add.w	ip, r0, r5
 811214a:	462b      	mov	r3, r5
 811214c:	210a      	movs	r1, #10
 811214e:	4563      	cmp	r3, ip
 8112150:	d10d      	bne.n	811216e <_strtod_l+0x236>
 8112152:	1c69      	adds	r1, r5, #1
 8112154:	4401      	add	r1, r0
 8112156:	4428      	add	r0, r5
 8112158:	2808      	cmp	r0, #8
 811215a:	dc16      	bgt.n	811218a <_strtod_l+0x252>
 811215c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 811215e:	230a      	movs	r3, #10
 8112160:	fb03 2300 	mla	r3, r3, r0, r2
 8112164:	930a      	str	r3, [sp, #40]	@ 0x28
 8112166:	2300      	movs	r3, #0
 8112168:	e018      	b.n	811219c <_strtod_l+0x264>
 811216a:	4638      	mov	r0, r7
 811216c:	e7da      	b.n	8112124 <_strtod_l+0x1ec>
 811216e:	2b08      	cmp	r3, #8
 8112170:	f103 0301 	add.w	r3, r3, #1
 8112174:	dc03      	bgt.n	811217e <_strtod_l+0x246>
 8112176:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8112178:	434e      	muls	r6, r1
 811217a:	960a      	str	r6, [sp, #40]	@ 0x28
 811217c:	e7e7      	b.n	811214e <_strtod_l+0x216>
 811217e:	2b10      	cmp	r3, #16
 8112180:	bfde      	ittt	le
 8112182:	9e08      	ldrle	r6, [sp, #32]
 8112184:	434e      	mulle	r6, r1
 8112186:	9608      	strle	r6, [sp, #32]
 8112188:	e7e1      	b.n	811214e <_strtod_l+0x216>
 811218a:	280f      	cmp	r0, #15
 811218c:	dceb      	bgt.n	8112166 <_strtod_l+0x22e>
 811218e:	9808      	ldr	r0, [sp, #32]
 8112190:	230a      	movs	r3, #10
 8112192:	fb03 2300 	mla	r3, r3, r0, r2
 8112196:	9308      	str	r3, [sp, #32]
 8112198:	e7e5      	b.n	8112166 <_strtod_l+0x22e>
 811219a:	4629      	mov	r1, r5
 811219c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 811219e:	1c50      	adds	r0, r2, #1
 81121a0:	9019      	str	r0, [sp, #100]	@ 0x64
 81121a2:	7852      	ldrb	r2, [r2, #1]
 81121a4:	4618      	mov	r0, r3
 81121a6:	460d      	mov	r5, r1
 81121a8:	e7b1      	b.n	811210e <_strtod_l+0x1d6>
 81121aa:	f04f 0900 	mov.w	r9, #0
 81121ae:	2301      	movs	r3, #1
 81121b0:	e77d      	b.n	81120ae <_strtod_l+0x176>
 81121b2:	f04f 0c00 	mov.w	ip, #0
 81121b6:	1ca2      	adds	r2, r4, #2
 81121b8:	9219      	str	r2, [sp, #100]	@ 0x64
 81121ba:	78a2      	ldrb	r2, [r4, #2]
 81121bc:	e785      	b.n	81120ca <_strtod_l+0x192>
 81121be:	f04f 0c01 	mov.w	ip, #1
 81121c2:	e7f8      	b.n	81121b6 <_strtod_l+0x27e>
 81121c4:	08113fc8 	.word	0x08113fc8
 81121c8:	08113fb0 	.word	0x08113fb0
 81121cc:	7ff00000 	.word	0x7ff00000
 81121d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81121d2:	1c51      	adds	r1, r2, #1
 81121d4:	9119      	str	r1, [sp, #100]	@ 0x64
 81121d6:	7852      	ldrb	r2, [r2, #1]
 81121d8:	2a30      	cmp	r2, #48	@ 0x30
 81121da:	d0f9      	beq.n	81121d0 <_strtod_l+0x298>
 81121dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 81121e0:	2908      	cmp	r1, #8
 81121e2:	f63f af78 	bhi.w	81120d6 <_strtod_l+0x19e>
 81121e6:	3a30      	subs	r2, #48	@ 0x30
 81121e8:	920e      	str	r2, [sp, #56]	@ 0x38
 81121ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81121ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 81121ee:	f04f 080a 	mov.w	r8, #10
 81121f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81121f4:	1c56      	adds	r6, r2, #1
 81121f6:	9619      	str	r6, [sp, #100]	@ 0x64
 81121f8:	7852      	ldrb	r2, [r2, #1]
 81121fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 81121fe:	f1be 0f09 	cmp.w	lr, #9
 8112202:	d939      	bls.n	8112278 <_strtod_l+0x340>
 8112204:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8112206:	1a76      	subs	r6, r6, r1
 8112208:	2e08      	cmp	r6, #8
 811220a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 811220e:	dc03      	bgt.n	8112218 <_strtod_l+0x2e0>
 8112210:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8112212:	4588      	cmp	r8, r1
 8112214:	bfa8      	it	ge
 8112216:	4688      	movge	r8, r1
 8112218:	f1bc 0f00 	cmp.w	ip, #0
 811221c:	d001      	beq.n	8112222 <_strtod_l+0x2ea>
 811221e:	f1c8 0800 	rsb	r8, r8, #0
 8112222:	2d00      	cmp	r5, #0
 8112224:	d14e      	bne.n	81122c4 <_strtod_l+0x38c>
 8112226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8112228:	4308      	orrs	r0, r1
 811222a:	f47f aebe 	bne.w	8111faa <_strtod_l+0x72>
 811222e:	2b00      	cmp	r3, #0
 8112230:	f47f aed6 	bne.w	8111fe0 <_strtod_l+0xa8>
 8112234:	2a69      	cmp	r2, #105	@ 0x69
 8112236:	d028      	beq.n	811228a <_strtod_l+0x352>
 8112238:	dc25      	bgt.n	8112286 <_strtod_l+0x34e>
 811223a:	2a49      	cmp	r2, #73	@ 0x49
 811223c:	d025      	beq.n	811228a <_strtod_l+0x352>
 811223e:	2a4e      	cmp	r2, #78	@ 0x4e
 8112240:	f47f aece 	bne.w	8111fe0 <_strtod_l+0xa8>
 8112244:	499b      	ldr	r1, [pc, #620]	@ (81124b4 <_strtod_l+0x57c>)
 8112246:	a819      	add	r0, sp, #100	@ 0x64
 8112248:	f001 fba2 	bl	8113990 <__match>
 811224c:	2800      	cmp	r0, #0
 811224e:	f43f aec7 	beq.w	8111fe0 <_strtod_l+0xa8>
 8112252:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8112254:	781b      	ldrb	r3, [r3, #0]
 8112256:	2b28      	cmp	r3, #40	@ 0x28
 8112258:	d12e      	bne.n	81122b8 <_strtod_l+0x380>
 811225a:	4997      	ldr	r1, [pc, #604]	@ (81124b8 <_strtod_l+0x580>)
 811225c:	aa1c      	add	r2, sp, #112	@ 0x70
 811225e:	a819      	add	r0, sp, #100	@ 0x64
 8112260:	f001 fbaa 	bl	81139b8 <__hexnan>
 8112264:	2805      	cmp	r0, #5
 8112266:	d127      	bne.n	81122b8 <_strtod_l+0x380>
 8112268:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 811226a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 811226e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8112272:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8112276:	e698      	b.n	8111faa <_strtod_l+0x72>
 8112278:	990e      	ldr	r1, [sp, #56]	@ 0x38
 811227a:	fb08 2101 	mla	r1, r8, r1, r2
 811227e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8112282:	920e      	str	r2, [sp, #56]	@ 0x38
 8112284:	e7b5      	b.n	81121f2 <_strtod_l+0x2ba>
 8112286:	2a6e      	cmp	r2, #110	@ 0x6e
 8112288:	e7da      	b.n	8112240 <_strtod_l+0x308>
 811228a:	498c      	ldr	r1, [pc, #560]	@ (81124bc <_strtod_l+0x584>)
 811228c:	a819      	add	r0, sp, #100	@ 0x64
 811228e:	f001 fb7f 	bl	8113990 <__match>
 8112292:	2800      	cmp	r0, #0
 8112294:	f43f aea4 	beq.w	8111fe0 <_strtod_l+0xa8>
 8112298:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 811229a:	4989      	ldr	r1, [pc, #548]	@ (81124c0 <_strtod_l+0x588>)
 811229c:	3b01      	subs	r3, #1
 811229e:	a819      	add	r0, sp, #100	@ 0x64
 81122a0:	9319      	str	r3, [sp, #100]	@ 0x64
 81122a2:	f001 fb75 	bl	8113990 <__match>
 81122a6:	b910      	cbnz	r0, 81122ae <_strtod_l+0x376>
 81122a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81122aa:	3301      	adds	r3, #1
 81122ac:	9319      	str	r3, [sp, #100]	@ 0x64
 81122ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 81124d0 <_strtod_l+0x598>
 81122b2:	f04f 0a00 	mov.w	sl, #0
 81122b6:	e678      	b.n	8111faa <_strtod_l+0x72>
 81122b8:	4882      	ldr	r0, [pc, #520]	@ (81124c4 <_strtod_l+0x58c>)
 81122ba:	f001 f8bd 	bl	8113438 <nan>
 81122be:	ec5b ab10 	vmov	sl, fp, d0
 81122c2:	e672      	b.n	8111faa <_strtod_l+0x72>
 81122c4:	eba8 0309 	sub.w	r3, r8, r9
 81122c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 81122ca:	9309      	str	r3, [sp, #36]	@ 0x24
 81122cc:	2f00      	cmp	r7, #0
 81122ce:	bf08      	it	eq
 81122d0:	462f      	moveq	r7, r5
 81122d2:	2d10      	cmp	r5, #16
 81122d4:	462c      	mov	r4, r5
 81122d6:	bfa8      	it	ge
 81122d8:	2410      	movge	r4, #16
 81122da:	f7ee f99b 	bl	8100614 <__aeabi_ui2d>
 81122de:	2d09      	cmp	r5, #9
 81122e0:	4682      	mov	sl, r0
 81122e2:	468b      	mov	fp, r1
 81122e4:	dc13      	bgt.n	811230e <_strtod_l+0x3d6>
 81122e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81122e8:	2b00      	cmp	r3, #0
 81122ea:	f43f ae5e 	beq.w	8111faa <_strtod_l+0x72>
 81122ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81122f0:	dd78      	ble.n	81123e4 <_strtod_l+0x4ac>
 81122f2:	2b16      	cmp	r3, #22
 81122f4:	dc5f      	bgt.n	81123b6 <_strtod_l+0x47e>
 81122f6:	4974      	ldr	r1, [pc, #464]	@ (81124c8 <_strtod_l+0x590>)
 81122f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81122fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8112300:	4652      	mov	r2, sl
 8112302:	465b      	mov	r3, fp
 8112304:	f7ee fa00 	bl	8100708 <__aeabi_dmul>
 8112308:	4682      	mov	sl, r0
 811230a:	468b      	mov	fp, r1
 811230c:	e64d      	b.n	8111faa <_strtod_l+0x72>
 811230e:	4b6e      	ldr	r3, [pc, #440]	@ (81124c8 <_strtod_l+0x590>)
 8112310:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8112314:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8112318:	f7ee f9f6 	bl	8100708 <__aeabi_dmul>
 811231c:	4682      	mov	sl, r0
 811231e:	9808      	ldr	r0, [sp, #32]
 8112320:	468b      	mov	fp, r1
 8112322:	f7ee f977 	bl	8100614 <__aeabi_ui2d>
 8112326:	4602      	mov	r2, r0
 8112328:	460b      	mov	r3, r1
 811232a:	4650      	mov	r0, sl
 811232c:	4659      	mov	r1, fp
 811232e:	f7ee f835 	bl	810039c <__adddf3>
 8112332:	2d0f      	cmp	r5, #15
 8112334:	4682      	mov	sl, r0
 8112336:	468b      	mov	fp, r1
 8112338:	ddd5      	ble.n	81122e6 <_strtod_l+0x3ae>
 811233a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811233c:	1b2c      	subs	r4, r5, r4
 811233e:	441c      	add	r4, r3
 8112340:	2c00      	cmp	r4, #0
 8112342:	f340 8096 	ble.w	8112472 <_strtod_l+0x53a>
 8112346:	f014 030f 	ands.w	r3, r4, #15
 811234a:	d00a      	beq.n	8112362 <_strtod_l+0x42a>
 811234c:	495e      	ldr	r1, [pc, #376]	@ (81124c8 <_strtod_l+0x590>)
 811234e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8112352:	4652      	mov	r2, sl
 8112354:	465b      	mov	r3, fp
 8112356:	e9d1 0100 	ldrd	r0, r1, [r1]
 811235a:	f7ee f9d5 	bl	8100708 <__aeabi_dmul>
 811235e:	4682      	mov	sl, r0
 8112360:	468b      	mov	fp, r1
 8112362:	f034 040f 	bics.w	r4, r4, #15
 8112366:	d073      	beq.n	8112450 <_strtod_l+0x518>
 8112368:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 811236c:	dd48      	ble.n	8112400 <_strtod_l+0x4c8>
 811236e:	2400      	movs	r4, #0
 8112370:	46a0      	mov	r8, r4
 8112372:	940a      	str	r4, [sp, #40]	@ 0x28
 8112374:	46a1      	mov	r9, r4
 8112376:	9a05      	ldr	r2, [sp, #20]
 8112378:	f8df b154 	ldr.w	fp, [pc, #340]	@ 81124d0 <_strtod_l+0x598>
 811237c:	2322      	movs	r3, #34	@ 0x22
 811237e:	6013      	str	r3, [r2, #0]
 8112380:	f04f 0a00 	mov.w	sl, #0
 8112384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112386:	2b00      	cmp	r3, #0
 8112388:	f43f ae0f 	beq.w	8111faa <_strtod_l+0x72>
 811238c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811238e:	9805      	ldr	r0, [sp, #20]
 8112390:	f7ff f942 	bl	8111618 <_Bfree>
 8112394:	9805      	ldr	r0, [sp, #20]
 8112396:	4649      	mov	r1, r9
 8112398:	f7ff f93e 	bl	8111618 <_Bfree>
 811239c:	9805      	ldr	r0, [sp, #20]
 811239e:	4641      	mov	r1, r8
 81123a0:	f7ff f93a 	bl	8111618 <_Bfree>
 81123a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 81123a6:	9805      	ldr	r0, [sp, #20]
 81123a8:	f7ff f936 	bl	8111618 <_Bfree>
 81123ac:	9805      	ldr	r0, [sp, #20]
 81123ae:	4621      	mov	r1, r4
 81123b0:	f7ff f932 	bl	8111618 <_Bfree>
 81123b4:	e5f9      	b.n	8111faa <_strtod_l+0x72>
 81123b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81123b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 81123bc:	4293      	cmp	r3, r2
 81123be:	dbbc      	blt.n	811233a <_strtod_l+0x402>
 81123c0:	4c41      	ldr	r4, [pc, #260]	@ (81124c8 <_strtod_l+0x590>)
 81123c2:	f1c5 050f 	rsb	r5, r5, #15
 81123c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 81123ca:	4652      	mov	r2, sl
 81123cc:	465b      	mov	r3, fp
 81123ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 81123d2:	f7ee f999 	bl	8100708 <__aeabi_dmul>
 81123d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81123d8:	1b5d      	subs	r5, r3, r5
 81123da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81123de:	e9d4 2300 	ldrd	r2, r3, [r4]
 81123e2:	e78f      	b.n	8112304 <_strtod_l+0x3cc>
 81123e4:	3316      	adds	r3, #22
 81123e6:	dba8      	blt.n	811233a <_strtod_l+0x402>
 81123e8:	4b37      	ldr	r3, [pc, #220]	@ (81124c8 <_strtod_l+0x590>)
 81123ea:	eba9 0808 	sub.w	r8, r9, r8
 81123ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 81123f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 81123f6:	4650      	mov	r0, sl
 81123f8:	4659      	mov	r1, fp
 81123fa:	f7ee faaf 	bl	810095c <__aeabi_ddiv>
 81123fe:	e783      	b.n	8112308 <_strtod_l+0x3d0>
 8112400:	4b32      	ldr	r3, [pc, #200]	@ (81124cc <_strtod_l+0x594>)
 8112402:	9308      	str	r3, [sp, #32]
 8112404:	2300      	movs	r3, #0
 8112406:	1124      	asrs	r4, r4, #4
 8112408:	4650      	mov	r0, sl
 811240a:	4659      	mov	r1, fp
 811240c:	461e      	mov	r6, r3
 811240e:	2c01      	cmp	r4, #1
 8112410:	dc21      	bgt.n	8112456 <_strtod_l+0x51e>
 8112412:	b10b      	cbz	r3, 8112418 <_strtod_l+0x4e0>
 8112414:	4682      	mov	sl, r0
 8112416:	468b      	mov	fp, r1
 8112418:	492c      	ldr	r1, [pc, #176]	@ (81124cc <_strtod_l+0x594>)
 811241a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 811241e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8112422:	4652      	mov	r2, sl
 8112424:	465b      	mov	r3, fp
 8112426:	e9d1 0100 	ldrd	r0, r1, [r1]
 811242a:	f7ee f96d 	bl	8100708 <__aeabi_dmul>
 811242e:	4b28      	ldr	r3, [pc, #160]	@ (81124d0 <_strtod_l+0x598>)
 8112430:	460a      	mov	r2, r1
 8112432:	400b      	ands	r3, r1
 8112434:	4927      	ldr	r1, [pc, #156]	@ (81124d4 <_strtod_l+0x59c>)
 8112436:	428b      	cmp	r3, r1
 8112438:	4682      	mov	sl, r0
 811243a:	d898      	bhi.n	811236e <_strtod_l+0x436>
 811243c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8112440:	428b      	cmp	r3, r1
 8112442:	bf86      	itte	hi
 8112444:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 81124d8 <_strtod_l+0x5a0>
 8112448:	f04f 3aff 	movhi.w	sl, #4294967295
 811244c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8112450:	2300      	movs	r3, #0
 8112452:	9308      	str	r3, [sp, #32]
 8112454:	e07a      	b.n	811254c <_strtod_l+0x614>
 8112456:	07e2      	lsls	r2, r4, #31
 8112458:	d505      	bpl.n	8112466 <_strtod_l+0x52e>
 811245a:	9b08      	ldr	r3, [sp, #32]
 811245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112460:	f7ee f952 	bl	8100708 <__aeabi_dmul>
 8112464:	2301      	movs	r3, #1
 8112466:	9a08      	ldr	r2, [sp, #32]
 8112468:	3208      	adds	r2, #8
 811246a:	3601      	adds	r6, #1
 811246c:	1064      	asrs	r4, r4, #1
 811246e:	9208      	str	r2, [sp, #32]
 8112470:	e7cd      	b.n	811240e <_strtod_l+0x4d6>
 8112472:	d0ed      	beq.n	8112450 <_strtod_l+0x518>
 8112474:	4264      	negs	r4, r4
 8112476:	f014 020f 	ands.w	r2, r4, #15
 811247a:	d00a      	beq.n	8112492 <_strtod_l+0x55a>
 811247c:	4b12      	ldr	r3, [pc, #72]	@ (81124c8 <_strtod_l+0x590>)
 811247e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8112482:	4650      	mov	r0, sl
 8112484:	4659      	mov	r1, fp
 8112486:	e9d3 2300 	ldrd	r2, r3, [r3]
 811248a:	f7ee fa67 	bl	810095c <__aeabi_ddiv>
 811248e:	4682      	mov	sl, r0
 8112490:	468b      	mov	fp, r1
 8112492:	1124      	asrs	r4, r4, #4
 8112494:	d0dc      	beq.n	8112450 <_strtod_l+0x518>
 8112496:	2c1f      	cmp	r4, #31
 8112498:	dd20      	ble.n	81124dc <_strtod_l+0x5a4>
 811249a:	2400      	movs	r4, #0
 811249c:	46a0      	mov	r8, r4
 811249e:	940a      	str	r4, [sp, #40]	@ 0x28
 81124a0:	46a1      	mov	r9, r4
 81124a2:	9a05      	ldr	r2, [sp, #20]
 81124a4:	2322      	movs	r3, #34	@ 0x22
 81124a6:	f04f 0a00 	mov.w	sl, #0
 81124aa:	f04f 0b00 	mov.w	fp, #0
 81124ae:	6013      	str	r3, [r2, #0]
 81124b0:	e768      	b.n	8112384 <_strtod_l+0x44c>
 81124b2:	bf00      	nop
 81124b4:	08113d7c 	.word	0x08113d7c
 81124b8:	08113fb4 	.word	0x08113fb4
 81124bc:	08113d74 	.word	0x08113d74
 81124c0:	08113de7 	.word	0x08113de7
 81124c4:	08113de3 	.word	0x08113de3
 81124c8:	08113ee8 	.word	0x08113ee8
 81124cc:	08113ec0 	.word	0x08113ec0
 81124d0:	7ff00000 	.word	0x7ff00000
 81124d4:	7ca00000 	.word	0x7ca00000
 81124d8:	7fefffff 	.word	0x7fefffff
 81124dc:	f014 0310 	ands.w	r3, r4, #16
 81124e0:	bf18      	it	ne
 81124e2:	236a      	movne	r3, #106	@ 0x6a
 81124e4:	4ea9      	ldr	r6, [pc, #676]	@ (811278c <_strtod_l+0x854>)
 81124e6:	9308      	str	r3, [sp, #32]
 81124e8:	4650      	mov	r0, sl
 81124ea:	4659      	mov	r1, fp
 81124ec:	2300      	movs	r3, #0
 81124ee:	07e2      	lsls	r2, r4, #31
 81124f0:	d504      	bpl.n	81124fc <_strtod_l+0x5c4>
 81124f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 81124f6:	f7ee f907 	bl	8100708 <__aeabi_dmul>
 81124fa:	2301      	movs	r3, #1
 81124fc:	1064      	asrs	r4, r4, #1
 81124fe:	f106 0608 	add.w	r6, r6, #8
 8112502:	d1f4      	bne.n	81124ee <_strtod_l+0x5b6>
 8112504:	b10b      	cbz	r3, 811250a <_strtod_l+0x5d2>
 8112506:	4682      	mov	sl, r0
 8112508:	468b      	mov	fp, r1
 811250a:	9b08      	ldr	r3, [sp, #32]
 811250c:	b1b3      	cbz	r3, 811253c <_strtod_l+0x604>
 811250e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8112512:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8112516:	2b00      	cmp	r3, #0
 8112518:	4659      	mov	r1, fp
 811251a:	dd0f      	ble.n	811253c <_strtod_l+0x604>
 811251c:	2b1f      	cmp	r3, #31
 811251e:	dd55      	ble.n	81125cc <_strtod_l+0x694>
 8112520:	2b34      	cmp	r3, #52	@ 0x34
 8112522:	bfde      	ittt	le
 8112524:	f04f 33ff 	movle.w	r3, #4294967295
 8112528:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 811252c:	4093      	lslle	r3, r2
 811252e:	f04f 0a00 	mov.w	sl, #0
 8112532:	bfcc      	ite	gt
 8112534:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8112538:	ea03 0b01 	andle.w	fp, r3, r1
 811253c:	2200      	movs	r2, #0
 811253e:	2300      	movs	r3, #0
 8112540:	4650      	mov	r0, sl
 8112542:	4659      	mov	r1, fp
 8112544:	f7ee fb48 	bl	8100bd8 <__aeabi_dcmpeq>
 8112548:	2800      	cmp	r0, #0
 811254a:	d1a6      	bne.n	811249a <_strtod_l+0x562>
 811254c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811254e:	9300      	str	r3, [sp, #0]
 8112550:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8112552:	9805      	ldr	r0, [sp, #20]
 8112554:	462b      	mov	r3, r5
 8112556:	463a      	mov	r2, r7
 8112558:	f7ff f8c6 	bl	81116e8 <__s2b>
 811255c:	900a      	str	r0, [sp, #40]	@ 0x28
 811255e:	2800      	cmp	r0, #0
 8112560:	f43f af05 	beq.w	811236e <_strtod_l+0x436>
 8112564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112566:	2a00      	cmp	r2, #0
 8112568:	eba9 0308 	sub.w	r3, r9, r8
 811256c:	bfa8      	it	ge
 811256e:	2300      	movge	r3, #0
 8112570:	9312      	str	r3, [sp, #72]	@ 0x48
 8112572:	2400      	movs	r4, #0
 8112574:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8112578:	9316      	str	r3, [sp, #88]	@ 0x58
 811257a:	46a0      	mov	r8, r4
 811257c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 811257e:	9805      	ldr	r0, [sp, #20]
 8112580:	6859      	ldr	r1, [r3, #4]
 8112582:	f7ff f809 	bl	8111598 <_Balloc>
 8112586:	4681      	mov	r9, r0
 8112588:	2800      	cmp	r0, #0
 811258a:	f43f aef4 	beq.w	8112376 <_strtod_l+0x43e>
 811258e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8112590:	691a      	ldr	r2, [r3, #16]
 8112592:	3202      	adds	r2, #2
 8112594:	f103 010c 	add.w	r1, r3, #12
 8112598:	0092      	lsls	r2, r2, #2
 811259a:	300c      	adds	r0, #12
 811259c:	f7fe f87b 	bl	8110696 <memcpy>
 81125a0:	ec4b ab10 	vmov	d0, sl, fp
 81125a4:	9805      	ldr	r0, [sp, #20]
 81125a6:	aa1c      	add	r2, sp, #112	@ 0x70
 81125a8:	a91b      	add	r1, sp, #108	@ 0x6c
 81125aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 81125ae:	f7ff fbd7 	bl	8111d60 <__d2b>
 81125b2:	901a      	str	r0, [sp, #104]	@ 0x68
 81125b4:	2800      	cmp	r0, #0
 81125b6:	f43f aede 	beq.w	8112376 <_strtod_l+0x43e>
 81125ba:	9805      	ldr	r0, [sp, #20]
 81125bc:	2101      	movs	r1, #1
 81125be:	f7ff f929 	bl	8111814 <__i2b>
 81125c2:	4680      	mov	r8, r0
 81125c4:	b948      	cbnz	r0, 81125da <_strtod_l+0x6a2>
 81125c6:	f04f 0800 	mov.w	r8, #0
 81125ca:	e6d4      	b.n	8112376 <_strtod_l+0x43e>
 81125cc:	f04f 32ff 	mov.w	r2, #4294967295
 81125d0:	fa02 f303 	lsl.w	r3, r2, r3
 81125d4:	ea03 0a0a 	and.w	sl, r3, sl
 81125d8:	e7b0      	b.n	811253c <_strtod_l+0x604>
 81125da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 81125dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 81125de:	2d00      	cmp	r5, #0
 81125e0:	bfab      	itete	ge
 81125e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 81125e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 81125e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 81125e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 81125ea:	bfac      	ite	ge
 81125ec:	18ef      	addge	r7, r5, r3
 81125ee:	1b5e      	sublt	r6, r3, r5
 81125f0:	9b08      	ldr	r3, [sp, #32]
 81125f2:	1aed      	subs	r5, r5, r3
 81125f4:	4415      	add	r5, r2
 81125f6:	4b66      	ldr	r3, [pc, #408]	@ (8112790 <_strtod_l+0x858>)
 81125f8:	3d01      	subs	r5, #1
 81125fa:	429d      	cmp	r5, r3
 81125fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8112600:	da50      	bge.n	81126a4 <_strtod_l+0x76c>
 8112602:	1b5b      	subs	r3, r3, r5
 8112604:	2b1f      	cmp	r3, #31
 8112606:	eba2 0203 	sub.w	r2, r2, r3
 811260a:	f04f 0101 	mov.w	r1, #1
 811260e:	dc3d      	bgt.n	811268c <_strtod_l+0x754>
 8112610:	fa01 f303 	lsl.w	r3, r1, r3
 8112614:	9313      	str	r3, [sp, #76]	@ 0x4c
 8112616:	2300      	movs	r3, #0
 8112618:	9310      	str	r3, [sp, #64]	@ 0x40
 811261a:	18bd      	adds	r5, r7, r2
 811261c:	9b08      	ldr	r3, [sp, #32]
 811261e:	42af      	cmp	r7, r5
 8112620:	4416      	add	r6, r2
 8112622:	441e      	add	r6, r3
 8112624:	463b      	mov	r3, r7
 8112626:	bfa8      	it	ge
 8112628:	462b      	movge	r3, r5
 811262a:	42b3      	cmp	r3, r6
 811262c:	bfa8      	it	ge
 811262e:	4633      	movge	r3, r6
 8112630:	2b00      	cmp	r3, #0
 8112632:	bfc2      	ittt	gt
 8112634:	1aed      	subgt	r5, r5, r3
 8112636:	1af6      	subgt	r6, r6, r3
 8112638:	1aff      	subgt	r7, r7, r3
 811263a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 811263c:	2b00      	cmp	r3, #0
 811263e:	dd16      	ble.n	811266e <_strtod_l+0x736>
 8112640:	4641      	mov	r1, r8
 8112642:	9805      	ldr	r0, [sp, #20]
 8112644:	461a      	mov	r2, r3
 8112646:	f7ff f9a5 	bl	8111994 <__pow5mult>
 811264a:	4680      	mov	r8, r0
 811264c:	2800      	cmp	r0, #0
 811264e:	d0ba      	beq.n	81125c6 <_strtod_l+0x68e>
 8112650:	4601      	mov	r1, r0
 8112652:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8112654:	9805      	ldr	r0, [sp, #20]
 8112656:	f7ff f8f3 	bl	8111840 <__multiply>
 811265a:	900e      	str	r0, [sp, #56]	@ 0x38
 811265c:	2800      	cmp	r0, #0
 811265e:	f43f ae8a 	beq.w	8112376 <_strtod_l+0x43e>
 8112662:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8112664:	9805      	ldr	r0, [sp, #20]
 8112666:	f7fe ffd7 	bl	8111618 <_Bfree>
 811266a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811266c:	931a      	str	r3, [sp, #104]	@ 0x68
 811266e:	2d00      	cmp	r5, #0
 8112670:	dc1d      	bgt.n	81126ae <_strtod_l+0x776>
 8112672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112674:	2b00      	cmp	r3, #0
 8112676:	dd23      	ble.n	81126c0 <_strtod_l+0x788>
 8112678:	4649      	mov	r1, r9
 811267a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 811267c:	9805      	ldr	r0, [sp, #20]
 811267e:	f7ff f989 	bl	8111994 <__pow5mult>
 8112682:	4681      	mov	r9, r0
 8112684:	b9e0      	cbnz	r0, 81126c0 <_strtod_l+0x788>
 8112686:	f04f 0900 	mov.w	r9, #0
 811268a:	e674      	b.n	8112376 <_strtod_l+0x43e>
 811268c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8112690:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8112694:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8112698:	35e2      	adds	r5, #226	@ 0xe2
 811269a:	fa01 f305 	lsl.w	r3, r1, r5
 811269e:	9310      	str	r3, [sp, #64]	@ 0x40
 81126a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 81126a2:	e7ba      	b.n	811261a <_strtod_l+0x6e2>
 81126a4:	2300      	movs	r3, #0
 81126a6:	9310      	str	r3, [sp, #64]	@ 0x40
 81126a8:	2301      	movs	r3, #1
 81126aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 81126ac:	e7b5      	b.n	811261a <_strtod_l+0x6e2>
 81126ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81126b0:	9805      	ldr	r0, [sp, #20]
 81126b2:	462a      	mov	r2, r5
 81126b4:	f7ff f9c8 	bl	8111a48 <__lshift>
 81126b8:	901a      	str	r0, [sp, #104]	@ 0x68
 81126ba:	2800      	cmp	r0, #0
 81126bc:	d1d9      	bne.n	8112672 <_strtod_l+0x73a>
 81126be:	e65a      	b.n	8112376 <_strtod_l+0x43e>
 81126c0:	2e00      	cmp	r6, #0
 81126c2:	dd07      	ble.n	81126d4 <_strtod_l+0x79c>
 81126c4:	4649      	mov	r1, r9
 81126c6:	9805      	ldr	r0, [sp, #20]
 81126c8:	4632      	mov	r2, r6
 81126ca:	f7ff f9bd 	bl	8111a48 <__lshift>
 81126ce:	4681      	mov	r9, r0
 81126d0:	2800      	cmp	r0, #0
 81126d2:	d0d8      	beq.n	8112686 <_strtod_l+0x74e>
 81126d4:	2f00      	cmp	r7, #0
 81126d6:	dd08      	ble.n	81126ea <_strtod_l+0x7b2>
 81126d8:	4641      	mov	r1, r8
 81126da:	9805      	ldr	r0, [sp, #20]
 81126dc:	463a      	mov	r2, r7
 81126de:	f7ff f9b3 	bl	8111a48 <__lshift>
 81126e2:	4680      	mov	r8, r0
 81126e4:	2800      	cmp	r0, #0
 81126e6:	f43f ae46 	beq.w	8112376 <_strtod_l+0x43e>
 81126ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81126ec:	9805      	ldr	r0, [sp, #20]
 81126ee:	464a      	mov	r2, r9
 81126f0:	f7ff fa32 	bl	8111b58 <__mdiff>
 81126f4:	4604      	mov	r4, r0
 81126f6:	2800      	cmp	r0, #0
 81126f8:	f43f ae3d 	beq.w	8112376 <_strtod_l+0x43e>
 81126fc:	68c3      	ldr	r3, [r0, #12]
 81126fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8112700:	2300      	movs	r3, #0
 8112702:	60c3      	str	r3, [r0, #12]
 8112704:	4641      	mov	r1, r8
 8112706:	f7ff fa0b 	bl	8111b20 <__mcmp>
 811270a:	2800      	cmp	r0, #0
 811270c:	da46      	bge.n	811279c <_strtod_l+0x864>
 811270e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112710:	ea53 030a 	orrs.w	r3, r3, sl
 8112714:	d16c      	bne.n	81127f0 <_strtod_l+0x8b8>
 8112716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 811271a:	2b00      	cmp	r3, #0
 811271c:	d168      	bne.n	81127f0 <_strtod_l+0x8b8>
 811271e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8112722:	0d1b      	lsrs	r3, r3, #20
 8112724:	051b      	lsls	r3, r3, #20
 8112726:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 811272a:	d961      	bls.n	81127f0 <_strtod_l+0x8b8>
 811272c:	6963      	ldr	r3, [r4, #20]
 811272e:	b913      	cbnz	r3, 8112736 <_strtod_l+0x7fe>
 8112730:	6923      	ldr	r3, [r4, #16]
 8112732:	2b01      	cmp	r3, #1
 8112734:	dd5c      	ble.n	81127f0 <_strtod_l+0x8b8>
 8112736:	4621      	mov	r1, r4
 8112738:	2201      	movs	r2, #1
 811273a:	9805      	ldr	r0, [sp, #20]
 811273c:	f7ff f984 	bl	8111a48 <__lshift>
 8112740:	4641      	mov	r1, r8
 8112742:	4604      	mov	r4, r0
 8112744:	f7ff f9ec 	bl	8111b20 <__mcmp>
 8112748:	2800      	cmp	r0, #0
 811274a:	dd51      	ble.n	81127f0 <_strtod_l+0x8b8>
 811274c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8112750:	9a08      	ldr	r2, [sp, #32]
 8112752:	0d1b      	lsrs	r3, r3, #20
 8112754:	051b      	lsls	r3, r3, #20
 8112756:	2a00      	cmp	r2, #0
 8112758:	d06b      	beq.n	8112832 <_strtod_l+0x8fa>
 811275a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 811275e:	d868      	bhi.n	8112832 <_strtod_l+0x8fa>
 8112760:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8112764:	f67f ae9d 	bls.w	81124a2 <_strtod_l+0x56a>
 8112768:	4b0a      	ldr	r3, [pc, #40]	@ (8112794 <_strtod_l+0x85c>)
 811276a:	4650      	mov	r0, sl
 811276c:	4659      	mov	r1, fp
 811276e:	2200      	movs	r2, #0
 8112770:	f7ed ffca 	bl	8100708 <__aeabi_dmul>
 8112774:	4b08      	ldr	r3, [pc, #32]	@ (8112798 <_strtod_l+0x860>)
 8112776:	400b      	ands	r3, r1
 8112778:	4682      	mov	sl, r0
 811277a:	468b      	mov	fp, r1
 811277c:	2b00      	cmp	r3, #0
 811277e:	f47f ae05 	bne.w	811238c <_strtod_l+0x454>
 8112782:	9a05      	ldr	r2, [sp, #20]
 8112784:	2322      	movs	r3, #34	@ 0x22
 8112786:	6013      	str	r3, [r2, #0]
 8112788:	e600      	b.n	811238c <_strtod_l+0x454>
 811278a:	bf00      	nop
 811278c:	08113fe0 	.word	0x08113fe0
 8112790:	fffffc02 	.word	0xfffffc02
 8112794:	39500000 	.word	0x39500000
 8112798:	7ff00000 	.word	0x7ff00000
 811279c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 81127a0:	d165      	bne.n	811286e <_strtod_l+0x936>
 81127a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 81127a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81127a8:	b35a      	cbz	r2, 8112802 <_strtod_l+0x8ca>
 81127aa:	4a9f      	ldr	r2, [pc, #636]	@ (8112a28 <_strtod_l+0xaf0>)
 81127ac:	4293      	cmp	r3, r2
 81127ae:	d12b      	bne.n	8112808 <_strtod_l+0x8d0>
 81127b0:	9b08      	ldr	r3, [sp, #32]
 81127b2:	4651      	mov	r1, sl
 81127b4:	b303      	cbz	r3, 81127f8 <_strtod_l+0x8c0>
 81127b6:	4b9d      	ldr	r3, [pc, #628]	@ (8112a2c <_strtod_l+0xaf4>)
 81127b8:	465a      	mov	r2, fp
 81127ba:	4013      	ands	r3, r2
 81127bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 81127c0:	f04f 32ff 	mov.w	r2, #4294967295
 81127c4:	d81b      	bhi.n	81127fe <_strtod_l+0x8c6>
 81127c6:	0d1b      	lsrs	r3, r3, #20
 81127c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 81127cc:	fa02 f303 	lsl.w	r3, r2, r3
 81127d0:	4299      	cmp	r1, r3
 81127d2:	d119      	bne.n	8112808 <_strtod_l+0x8d0>
 81127d4:	4b96      	ldr	r3, [pc, #600]	@ (8112a30 <_strtod_l+0xaf8>)
 81127d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81127d8:	429a      	cmp	r2, r3
 81127da:	d102      	bne.n	81127e2 <_strtod_l+0x8aa>
 81127dc:	3101      	adds	r1, #1
 81127de:	f43f adca 	beq.w	8112376 <_strtod_l+0x43e>
 81127e2:	4b92      	ldr	r3, [pc, #584]	@ (8112a2c <_strtod_l+0xaf4>)
 81127e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81127e6:	401a      	ands	r2, r3
 81127e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 81127ec:	f04f 0a00 	mov.w	sl, #0
 81127f0:	9b08      	ldr	r3, [sp, #32]
 81127f2:	2b00      	cmp	r3, #0
 81127f4:	d1b8      	bne.n	8112768 <_strtod_l+0x830>
 81127f6:	e5c9      	b.n	811238c <_strtod_l+0x454>
 81127f8:	f04f 33ff 	mov.w	r3, #4294967295
 81127fc:	e7e8      	b.n	81127d0 <_strtod_l+0x898>
 81127fe:	4613      	mov	r3, r2
 8112800:	e7e6      	b.n	81127d0 <_strtod_l+0x898>
 8112802:	ea53 030a 	orrs.w	r3, r3, sl
 8112806:	d0a1      	beq.n	811274c <_strtod_l+0x814>
 8112808:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 811280a:	b1db      	cbz	r3, 8112844 <_strtod_l+0x90c>
 811280c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811280e:	4213      	tst	r3, r2
 8112810:	d0ee      	beq.n	81127f0 <_strtod_l+0x8b8>
 8112812:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112814:	9a08      	ldr	r2, [sp, #32]
 8112816:	4650      	mov	r0, sl
 8112818:	4659      	mov	r1, fp
 811281a:	b1bb      	cbz	r3, 811284c <_strtod_l+0x914>
 811281c:	f7ff fb6e 	bl	8111efc <sulp>
 8112820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112824:	ec53 2b10 	vmov	r2, r3, d0
 8112828:	f7ed fdb8 	bl	810039c <__adddf3>
 811282c:	4682      	mov	sl, r0
 811282e:	468b      	mov	fp, r1
 8112830:	e7de      	b.n	81127f0 <_strtod_l+0x8b8>
 8112832:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8112836:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 811283a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 811283e:	f04f 3aff 	mov.w	sl, #4294967295
 8112842:	e7d5      	b.n	81127f0 <_strtod_l+0x8b8>
 8112844:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8112846:	ea13 0f0a 	tst.w	r3, sl
 811284a:	e7e1      	b.n	8112810 <_strtod_l+0x8d8>
 811284c:	f7ff fb56 	bl	8111efc <sulp>
 8112850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8112854:	ec53 2b10 	vmov	r2, r3, d0
 8112858:	f7ed fd9e 	bl	8100398 <__aeabi_dsub>
 811285c:	2200      	movs	r2, #0
 811285e:	2300      	movs	r3, #0
 8112860:	4682      	mov	sl, r0
 8112862:	468b      	mov	fp, r1
 8112864:	f7ee f9b8 	bl	8100bd8 <__aeabi_dcmpeq>
 8112868:	2800      	cmp	r0, #0
 811286a:	d0c1      	beq.n	81127f0 <_strtod_l+0x8b8>
 811286c:	e619      	b.n	81124a2 <_strtod_l+0x56a>
 811286e:	4641      	mov	r1, r8
 8112870:	4620      	mov	r0, r4
 8112872:	f7ff facd 	bl	8111e10 <__ratio>
 8112876:	ec57 6b10 	vmov	r6, r7, d0
 811287a:	2200      	movs	r2, #0
 811287c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8112880:	4630      	mov	r0, r6
 8112882:	4639      	mov	r1, r7
 8112884:	f7ee f9bc 	bl	8100c00 <__aeabi_dcmple>
 8112888:	2800      	cmp	r0, #0
 811288a:	d06f      	beq.n	811296c <_strtod_l+0xa34>
 811288c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811288e:	2b00      	cmp	r3, #0
 8112890:	d17a      	bne.n	8112988 <_strtod_l+0xa50>
 8112892:	f1ba 0f00 	cmp.w	sl, #0
 8112896:	d158      	bne.n	811294a <_strtod_l+0xa12>
 8112898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 811289a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 811289e:	2b00      	cmp	r3, #0
 81128a0:	d15a      	bne.n	8112958 <_strtod_l+0xa20>
 81128a2:	4b64      	ldr	r3, [pc, #400]	@ (8112a34 <_strtod_l+0xafc>)
 81128a4:	2200      	movs	r2, #0
 81128a6:	4630      	mov	r0, r6
 81128a8:	4639      	mov	r1, r7
 81128aa:	f7ee f99f 	bl	8100bec <__aeabi_dcmplt>
 81128ae:	2800      	cmp	r0, #0
 81128b0:	d159      	bne.n	8112966 <_strtod_l+0xa2e>
 81128b2:	4630      	mov	r0, r6
 81128b4:	4639      	mov	r1, r7
 81128b6:	4b60      	ldr	r3, [pc, #384]	@ (8112a38 <_strtod_l+0xb00>)
 81128b8:	2200      	movs	r2, #0
 81128ba:	f7ed ff25 	bl	8100708 <__aeabi_dmul>
 81128be:	4606      	mov	r6, r0
 81128c0:	460f      	mov	r7, r1
 81128c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 81128c6:	9606      	str	r6, [sp, #24]
 81128c8:	9307      	str	r3, [sp, #28]
 81128ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 81128ce:	4d57      	ldr	r5, [pc, #348]	@ (8112a2c <_strtod_l+0xaf4>)
 81128d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 81128d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81128d6:	401d      	ands	r5, r3
 81128d8:	4b58      	ldr	r3, [pc, #352]	@ (8112a3c <_strtod_l+0xb04>)
 81128da:	429d      	cmp	r5, r3
 81128dc:	f040 80b2 	bne.w	8112a44 <_strtod_l+0xb0c>
 81128e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81128e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 81128e6:	ec4b ab10 	vmov	d0, sl, fp
 81128ea:	f7ff f9c9 	bl	8111c80 <__ulp>
 81128ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 81128f2:	ec51 0b10 	vmov	r0, r1, d0
 81128f6:	f7ed ff07 	bl	8100708 <__aeabi_dmul>
 81128fa:	4652      	mov	r2, sl
 81128fc:	465b      	mov	r3, fp
 81128fe:	f7ed fd4d 	bl	810039c <__adddf3>
 8112902:	460b      	mov	r3, r1
 8112904:	4949      	ldr	r1, [pc, #292]	@ (8112a2c <_strtod_l+0xaf4>)
 8112906:	4a4e      	ldr	r2, [pc, #312]	@ (8112a40 <_strtod_l+0xb08>)
 8112908:	4019      	ands	r1, r3
 811290a:	4291      	cmp	r1, r2
 811290c:	4682      	mov	sl, r0
 811290e:	d942      	bls.n	8112996 <_strtod_l+0xa5e>
 8112910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8112912:	4b47      	ldr	r3, [pc, #284]	@ (8112a30 <_strtod_l+0xaf8>)
 8112914:	429a      	cmp	r2, r3
 8112916:	d103      	bne.n	8112920 <_strtod_l+0x9e8>
 8112918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 811291a:	3301      	adds	r3, #1
 811291c:	f43f ad2b 	beq.w	8112376 <_strtod_l+0x43e>
 8112920:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8112a30 <_strtod_l+0xaf8>
 8112924:	f04f 3aff 	mov.w	sl, #4294967295
 8112928:	991a      	ldr	r1, [sp, #104]	@ 0x68
 811292a:	9805      	ldr	r0, [sp, #20]
 811292c:	f7fe fe74 	bl	8111618 <_Bfree>
 8112930:	9805      	ldr	r0, [sp, #20]
 8112932:	4649      	mov	r1, r9
 8112934:	f7fe fe70 	bl	8111618 <_Bfree>
 8112938:	9805      	ldr	r0, [sp, #20]
 811293a:	4641      	mov	r1, r8
 811293c:	f7fe fe6c 	bl	8111618 <_Bfree>
 8112940:	9805      	ldr	r0, [sp, #20]
 8112942:	4621      	mov	r1, r4
 8112944:	f7fe fe68 	bl	8111618 <_Bfree>
 8112948:	e618      	b.n	811257c <_strtod_l+0x644>
 811294a:	f1ba 0f01 	cmp.w	sl, #1
 811294e:	d103      	bne.n	8112958 <_strtod_l+0xa20>
 8112950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8112952:	2b00      	cmp	r3, #0
 8112954:	f43f ada5 	beq.w	81124a2 <_strtod_l+0x56a>
 8112958:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8112a08 <_strtod_l+0xad0>
 811295c:	4f35      	ldr	r7, [pc, #212]	@ (8112a34 <_strtod_l+0xafc>)
 811295e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8112962:	2600      	movs	r6, #0
 8112964:	e7b1      	b.n	81128ca <_strtod_l+0x992>
 8112966:	4f34      	ldr	r7, [pc, #208]	@ (8112a38 <_strtod_l+0xb00>)
 8112968:	2600      	movs	r6, #0
 811296a:	e7aa      	b.n	81128c2 <_strtod_l+0x98a>
 811296c:	4b32      	ldr	r3, [pc, #200]	@ (8112a38 <_strtod_l+0xb00>)
 811296e:	4630      	mov	r0, r6
 8112970:	4639      	mov	r1, r7
 8112972:	2200      	movs	r2, #0
 8112974:	f7ed fec8 	bl	8100708 <__aeabi_dmul>
 8112978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811297a:	4606      	mov	r6, r0
 811297c:	460f      	mov	r7, r1
 811297e:	2b00      	cmp	r3, #0
 8112980:	d09f      	beq.n	81128c2 <_strtod_l+0x98a>
 8112982:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8112986:	e7a0      	b.n	81128ca <_strtod_l+0x992>
 8112988:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8112a10 <_strtod_l+0xad8>
 811298c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8112990:	ec57 6b17 	vmov	r6, r7, d7
 8112994:	e799      	b.n	81128ca <_strtod_l+0x992>
 8112996:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 811299a:	9b08      	ldr	r3, [sp, #32]
 811299c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 81129a0:	2b00      	cmp	r3, #0
 81129a2:	d1c1      	bne.n	8112928 <_strtod_l+0x9f0>
 81129a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81129a8:	0d1b      	lsrs	r3, r3, #20
 81129aa:	051b      	lsls	r3, r3, #20
 81129ac:	429d      	cmp	r5, r3
 81129ae:	d1bb      	bne.n	8112928 <_strtod_l+0x9f0>
 81129b0:	4630      	mov	r0, r6
 81129b2:	4639      	mov	r1, r7
 81129b4:	f7ee fa08 	bl	8100dc8 <__aeabi_d2lz>
 81129b8:	f7ed fe78 	bl	81006ac <__aeabi_l2d>
 81129bc:	4602      	mov	r2, r0
 81129be:	460b      	mov	r3, r1
 81129c0:	4630      	mov	r0, r6
 81129c2:	4639      	mov	r1, r7
 81129c4:	f7ed fce8 	bl	8100398 <__aeabi_dsub>
 81129c8:	460b      	mov	r3, r1
 81129ca:	4602      	mov	r2, r0
 81129cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 81129d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 81129d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81129d6:	ea46 060a 	orr.w	r6, r6, sl
 81129da:	431e      	orrs	r6, r3
 81129dc:	d06f      	beq.n	8112abe <_strtod_l+0xb86>
 81129de:	a30e      	add	r3, pc, #56	@ (adr r3, 8112a18 <_strtod_l+0xae0>)
 81129e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81129e4:	f7ee f902 	bl	8100bec <__aeabi_dcmplt>
 81129e8:	2800      	cmp	r0, #0
 81129ea:	f47f accf 	bne.w	811238c <_strtod_l+0x454>
 81129ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8112a20 <_strtod_l+0xae8>)
 81129f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81129f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81129f8:	f7ee f916 	bl	8100c28 <__aeabi_dcmpgt>
 81129fc:	2800      	cmp	r0, #0
 81129fe:	d093      	beq.n	8112928 <_strtod_l+0x9f0>
 8112a00:	e4c4      	b.n	811238c <_strtod_l+0x454>
 8112a02:	bf00      	nop
 8112a04:	f3af 8000 	nop.w
 8112a08:	00000000 	.word	0x00000000
 8112a0c:	bff00000 	.word	0xbff00000
 8112a10:	00000000 	.word	0x00000000
 8112a14:	3ff00000 	.word	0x3ff00000
 8112a18:	94a03595 	.word	0x94a03595
 8112a1c:	3fdfffff 	.word	0x3fdfffff
 8112a20:	35afe535 	.word	0x35afe535
 8112a24:	3fe00000 	.word	0x3fe00000
 8112a28:	000fffff 	.word	0x000fffff
 8112a2c:	7ff00000 	.word	0x7ff00000
 8112a30:	7fefffff 	.word	0x7fefffff
 8112a34:	3ff00000 	.word	0x3ff00000
 8112a38:	3fe00000 	.word	0x3fe00000
 8112a3c:	7fe00000 	.word	0x7fe00000
 8112a40:	7c9fffff 	.word	0x7c9fffff
 8112a44:	9b08      	ldr	r3, [sp, #32]
 8112a46:	b323      	cbz	r3, 8112a92 <_strtod_l+0xb5a>
 8112a48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8112a4c:	d821      	bhi.n	8112a92 <_strtod_l+0xb5a>
 8112a4e:	a328      	add	r3, pc, #160	@ (adr r3, 8112af0 <_strtod_l+0xbb8>)
 8112a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112a54:	4630      	mov	r0, r6
 8112a56:	4639      	mov	r1, r7
 8112a58:	f7ee f8d2 	bl	8100c00 <__aeabi_dcmple>
 8112a5c:	b1a0      	cbz	r0, 8112a88 <_strtod_l+0xb50>
 8112a5e:	4639      	mov	r1, r7
 8112a60:	4630      	mov	r0, r6
 8112a62:	f7ee f929 	bl	8100cb8 <__aeabi_d2uiz>
 8112a66:	2801      	cmp	r0, #1
 8112a68:	bf38      	it	cc
 8112a6a:	2001      	movcc	r0, #1
 8112a6c:	f7ed fdd2 	bl	8100614 <__aeabi_ui2d>
 8112a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8112a72:	4606      	mov	r6, r0
 8112a74:	460f      	mov	r7, r1
 8112a76:	b9fb      	cbnz	r3, 8112ab8 <_strtod_l+0xb80>
 8112a78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8112a7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8112a7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8112a80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8112a84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8112a88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8112a8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8112a8e:	1b5b      	subs	r3, r3, r5
 8112a90:	9311      	str	r3, [sp, #68]	@ 0x44
 8112a92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8112a96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8112a9a:	f7ff f8f1 	bl	8111c80 <__ulp>
 8112a9e:	4650      	mov	r0, sl
 8112aa0:	ec53 2b10 	vmov	r2, r3, d0
 8112aa4:	4659      	mov	r1, fp
 8112aa6:	f7ed fe2f 	bl	8100708 <__aeabi_dmul>
 8112aaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8112aae:	f7ed fc75 	bl	810039c <__adddf3>
 8112ab2:	4682      	mov	sl, r0
 8112ab4:	468b      	mov	fp, r1
 8112ab6:	e770      	b.n	811299a <_strtod_l+0xa62>
 8112ab8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8112abc:	e7e0      	b.n	8112a80 <_strtod_l+0xb48>
 8112abe:	a30e      	add	r3, pc, #56	@ (adr r3, 8112af8 <_strtod_l+0xbc0>)
 8112ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8112ac4:	f7ee f892 	bl	8100bec <__aeabi_dcmplt>
 8112ac8:	e798      	b.n	81129fc <_strtod_l+0xac4>
 8112aca:	2300      	movs	r3, #0
 8112acc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8112ace:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8112ad0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8112ad2:	6013      	str	r3, [r2, #0]
 8112ad4:	f7ff ba6d 	b.w	8111fb2 <_strtod_l+0x7a>
 8112ad8:	2a65      	cmp	r2, #101	@ 0x65
 8112ada:	f43f ab66 	beq.w	81121aa <_strtod_l+0x272>
 8112ade:	2a45      	cmp	r2, #69	@ 0x45
 8112ae0:	f43f ab63 	beq.w	81121aa <_strtod_l+0x272>
 8112ae4:	2301      	movs	r3, #1
 8112ae6:	f7ff bb9e 	b.w	8112226 <_strtod_l+0x2ee>
 8112aea:	bf00      	nop
 8112aec:	f3af 8000 	nop.w
 8112af0:	ffc00000 	.word	0xffc00000
 8112af4:	41dfffff 	.word	0x41dfffff
 8112af8:	94a03595 	.word	0x94a03595
 8112afc:	3fcfffff 	.word	0x3fcfffff

08112b00 <_strtod_r>:
 8112b00:	4b01      	ldr	r3, [pc, #4]	@ (8112b08 <_strtod_r+0x8>)
 8112b02:	f7ff ba19 	b.w	8111f38 <_strtod_l>
 8112b06:	bf00      	nop
 8112b08:	10000100 	.word	0x10000100

08112b0c <_strtol_l.constprop.0>:
 8112b0c:	2b24      	cmp	r3, #36	@ 0x24
 8112b0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8112b12:	4686      	mov	lr, r0
 8112b14:	4690      	mov	r8, r2
 8112b16:	d801      	bhi.n	8112b1c <_strtol_l.constprop.0+0x10>
 8112b18:	2b01      	cmp	r3, #1
 8112b1a:	d106      	bne.n	8112b2a <_strtol_l.constprop.0+0x1e>
 8112b1c:	f7fd fd8e 	bl	811063c <__errno>
 8112b20:	2316      	movs	r3, #22
 8112b22:	6003      	str	r3, [r0, #0]
 8112b24:	2000      	movs	r0, #0
 8112b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112b2a:	4834      	ldr	r0, [pc, #208]	@ (8112bfc <_strtol_l.constprop.0+0xf0>)
 8112b2c:	460d      	mov	r5, r1
 8112b2e:	462a      	mov	r2, r5
 8112b30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8112b34:	5d06      	ldrb	r6, [r0, r4]
 8112b36:	f016 0608 	ands.w	r6, r6, #8
 8112b3a:	d1f8      	bne.n	8112b2e <_strtol_l.constprop.0+0x22>
 8112b3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8112b3e:	d12d      	bne.n	8112b9c <_strtol_l.constprop.0+0x90>
 8112b40:	782c      	ldrb	r4, [r5, #0]
 8112b42:	2601      	movs	r6, #1
 8112b44:	1c95      	adds	r5, r2, #2
 8112b46:	f033 0210 	bics.w	r2, r3, #16
 8112b4a:	d109      	bne.n	8112b60 <_strtol_l.constprop.0+0x54>
 8112b4c:	2c30      	cmp	r4, #48	@ 0x30
 8112b4e:	d12a      	bne.n	8112ba6 <_strtol_l.constprop.0+0x9a>
 8112b50:	782a      	ldrb	r2, [r5, #0]
 8112b52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8112b56:	2a58      	cmp	r2, #88	@ 0x58
 8112b58:	d125      	bne.n	8112ba6 <_strtol_l.constprop.0+0x9a>
 8112b5a:	786c      	ldrb	r4, [r5, #1]
 8112b5c:	2310      	movs	r3, #16
 8112b5e:	3502      	adds	r5, #2
 8112b60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8112b64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8112b68:	2200      	movs	r2, #0
 8112b6a:	fbbc f9f3 	udiv	r9, ip, r3
 8112b6e:	4610      	mov	r0, r2
 8112b70:	fb03 ca19 	mls	sl, r3, r9, ip
 8112b74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8112b78:	2f09      	cmp	r7, #9
 8112b7a:	d81b      	bhi.n	8112bb4 <_strtol_l.constprop.0+0xa8>
 8112b7c:	463c      	mov	r4, r7
 8112b7e:	42a3      	cmp	r3, r4
 8112b80:	dd27      	ble.n	8112bd2 <_strtol_l.constprop.0+0xc6>
 8112b82:	1c57      	adds	r7, r2, #1
 8112b84:	d007      	beq.n	8112b96 <_strtol_l.constprop.0+0x8a>
 8112b86:	4581      	cmp	r9, r0
 8112b88:	d320      	bcc.n	8112bcc <_strtol_l.constprop.0+0xc0>
 8112b8a:	d101      	bne.n	8112b90 <_strtol_l.constprop.0+0x84>
 8112b8c:	45a2      	cmp	sl, r4
 8112b8e:	db1d      	blt.n	8112bcc <_strtol_l.constprop.0+0xc0>
 8112b90:	fb00 4003 	mla	r0, r0, r3, r4
 8112b94:	2201      	movs	r2, #1
 8112b96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8112b9a:	e7eb      	b.n	8112b74 <_strtol_l.constprop.0+0x68>
 8112b9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8112b9e:	bf04      	itt	eq
 8112ba0:	782c      	ldrbeq	r4, [r5, #0]
 8112ba2:	1c95      	addeq	r5, r2, #2
 8112ba4:	e7cf      	b.n	8112b46 <_strtol_l.constprop.0+0x3a>
 8112ba6:	2b00      	cmp	r3, #0
 8112ba8:	d1da      	bne.n	8112b60 <_strtol_l.constprop.0+0x54>
 8112baa:	2c30      	cmp	r4, #48	@ 0x30
 8112bac:	bf0c      	ite	eq
 8112bae:	2308      	moveq	r3, #8
 8112bb0:	230a      	movne	r3, #10
 8112bb2:	e7d5      	b.n	8112b60 <_strtol_l.constprop.0+0x54>
 8112bb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8112bb8:	2f19      	cmp	r7, #25
 8112bba:	d801      	bhi.n	8112bc0 <_strtol_l.constprop.0+0xb4>
 8112bbc:	3c37      	subs	r4, #55	@ 0x37
 8112bbe:	e7de      	b.n	8112b7e <_strtol_l.constprop.0+0x72>
 8112bc0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8112bc4:	2f19      	cmp	r7, #25
 8112bc6:	d804      	bhi.n	8112bd2 <_strtol_l.constprop.0+0xc6>
 8112bc8:	3c57      	subs	r4, #87	@ 0x57
 8112bca:	e7d8      	b.n	8112b7e <_strtol_l.constprop.0+0x72>
 8112bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8112bd0:	e7e1      	b.n	8112b96 <_strtol_l.constprop.0+0x8a>
 8112bd2:	1c53      	adds	r3, r2, #1
 8112bd4:	d108      	bne.n	8112be8 <_strtol_l.constprop.0+0xdc>
 8112bd6:	2322      	movs	r3, #34	@ 0x22
 8112bd8:	f8ce 3000 	str.w	r3, [lr]
 8112bdc:	4660      	mov	r0, ip
 8112bde:	f1b8 0f00 	cmp.w	r8, #0
 8112be2:	d0a0      	beq.n	8112b26 <_strtol_l.constprop.0+0x1a>
 8112be4:	1e69      	subs	r1, r5, #1
 8112be6:	e006      	b.n	8112bf6 <_strtol_l.constprop.0+0xea>
 8112be8:	b106      	cbz	r6, 8112bec <_strtol_l.constprop.0+0xe0>
 8112bea:	4240      	negs	r0, r0
 8112bec:	f1b8 0f00 	cmp.w	r8, #0
 8112bf0:	d099      	beq.n	8112b26 <_strtol_l.constprop.0+0x1a>
 8112bf2:	2a00      	cmp	r2, #0
 8112bf4:	d1f6      	bne.n	8112be4 <_strtol_l.constprop.0+0xd8>
 8112bf6:	f8c8 1000 	str.w	r1, [r8]
 8112bfa:	e794      	b.n	8112b26 <_strtol_l.constprop.0+0x1a>
 8112bfc:	08114009 	.word	0x08114009

08112c00 <_strtol_r>:
 8112c00:	f7ff bf84 	b.w	8112b0c <_strtol_l.constprop.0>

08112c04 <__ssputs_r>:
 8112c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8112c08:	688e      	ldr	r6, [r1, #8]
 8112c0a:	461f      	mov	r7, r3
 8112c0c:	42be      	cmp	r6, r7
 8112c0e:	680b      	ldr	r3, [r1, #0]
 8112c10:	4682      	mov	sl, r0
 8112c12:	460c      	mov	r4, r1
 8112c14:	4690      	mov	r8, r2
 8112c16:	d82d      	bhi.n	8112c74 <__ssputs_r+0x70>
 8112c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8112c1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8112c20:	d026      	beq.n	8112c70 <__ssputs_r+0x6c>
 8112c22:	6965      	ldr	r5, [r4, #20]
 8112c24:	6909      	ldr	r1, [r1, #16]
 8112c26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8112c2a:	eba3 0901 	sub.w	r9, r3, r1
 8112c2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8112c32:	1c7b      	adds	r3, r7, #1
 8112c34:	444b      	add	r3, r9
 8112c36:	106d      	asrs	r5, r5, #1
 8112c38:	429d      	cmp	r5, r3
 8112c3a:	bf38      	it	cc
 8112c3c:	461d      	movcc	r5, r3
 8112c3e:	0553      	lsls	r3, r2, #21
 8112c40:	d527      	bpl.n	8112c92 <__ssputs_r+0x8e>
 8112c42:	4629      	mov	r1, r5
 8112c44:	f7fe fc1c 	bl	8111480 <_malloc_r>
 8112c48:	4606      	mov	r6, r0
 8112c4a:	b360      	cbz	r0, 8112ca6 <__ssputs_r+0xa2>
 8112c4c:	6921      	ldr	r1, [r4, #16]
 8112c4e:	464a      	mov	r2, r9
 8112c50:	f7fd fd21 	bl	8110696 <memcpy>
 8112c54:	89a3      	ldrh	r3, [r4, #12]
 8112c56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8112c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8112c5e:	81a3      	strh	r3, [r4, #12]
 8112c60:	6126      	str	r6, [r4, #16]
 8112c62:	6165      	str	r5, [r4, #20]
 8112c64:	444e      	add	r6, r9
 8112c66:	eba5 0509 	sub.w	r5, r5, r9
 8112c6a:	6026      	str	r6, [r4, #0]
 8112c6c:	60a5      	str	r5, [r4, #8]
 8112c6e:	463e      	mov	r6, r7
 8112c70:	42be      	cmp	r6, r7
 8112c72:	d900      	bls.n	8112c76 <__ssputs_r+0x72>
 8112c74:	463e      	mov	r6, r7
 8112c76:	6820      	ldr	r0, [r4, #0]
 8112c78:	4632      	mov	r2, r6
 8112c7a:	4641      	mov	r1, r8
 8112c7c:	f000 fb7c 	bl	8113378 <memmove>
 8112c80:	68a3      	ldr	r3, [r4, #8]
 8112c82:	1b9b      	subs	r3, r3, r6
 8112c84:	60a3      	str	r3, [r4, #8]
 8112c86:	6823      	ldr	r3, [r4, #0]
 8112c88:	4433      	add	r3, r6
 8112c8a:	6023      	str	r3, [r4, #0]
 8112c8c:	2000      	movs	r0, #0
 8112c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112c92:	462a      	mov	r2, r5
 8112c94:	f000 ff3d 	bl	8113b12 <_realloc_r>
 8112c98:	4606      	mov	r6, r0
 8112c9a:	2800      	cmp	r0, #0
 8112c9c:	d1e0      	bne.n	8112c60 <__ssputs_r+0x5c>
 8112c9e:	6921      	ldr	r1, [r4, #16]
 8112ca0:	4650      	mov	r0, sl
 8112ca2:	f7fe fb79 	bl	8111398 <_free_r>
 8112ca6:	230c      	movs	r3, #12
 8112ca8:	f8ca 3000 	str.w	r3, [sl]
 8112cac:	89a3      	ldrh	r3, [r4, #12]
 8112cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112cb2:	81a3      	strh	r3, [r4, #12]
 8112cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8112cb8:	e7e9      	b.n	8112c8e <__ssputs_r+0x8a>
	...

08112cbc <_svfiprintf_r>:
 8112cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112cc0:	4698      	mov	r8, r3
 8112cc2:	898b      	ldrh	r3, [r1, #12]
 8112cc4:	061b      	lsls	r3, r3, #24
 8112cc6:	b09d      	sub	sp, #116	@ 0x74
 8112cc8:	4607      	mov	r7, r0
 8112cca:	460d      	mov	r5, r1
 8112ccc:	4614      	mov	r4, r2
 8112cce:	d510      	bpl.n	8112cf2 <_svfiprintf_r+0x36>
 8112cd0:	690b      	ldr	r3, [r1, #16]
 8112cd2:	b973      	cbnz	r3, 8112cf2 <_svfiprintf_r+0x36>
 8112cd4:	2140      	movs	r1, #64	@ 0x40
 8112cd6:	f7fe fbd3 	bl	8111480 <_malloc_r>
 8112cda:	6028      	str	r0, [r5, #0]
 8112cdc:	6128      	str	r0, [r5, #16]
 8112cde:	b930      	cbnz	r0, 8112cee <_svfiprintf_r+0x32>
 8112ce0:	230c      	movs	r3, #12
 8112ce2:	603b      	str	r3, [r7, #0]
 8112ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8112ce8:	b01d      	add	sp, #116	@ 0x74
 8112cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112cee:	2340      	movs	r3, #64	@ 0x40
 8112cf0:	616b      	str	r3, [r5, #20]
 8112cf2:	2300      	movs	r3, #0
 8112cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8112cf6:	2320      	movs	r3, #32
 8112cf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8112cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8112d00:	2330      	movs	r3, #48	@ 0x30
 8112d02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8112ea0 <_svfiprintf_r+0x1e4>
 8112d06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8112d0a:	f04f 0901 	mov.w	r9, #1
 8112d0e:	4623      	mov	r3, r4
 8112d10:	469a      	mov	sl, r3
 8112d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8112d16:	b10a      	cbz	r2, 8112d1c <_svfiprintf_r+0x60>
 8112d18:	2a25      	cmp	r2, #37	@ 0x25
 8112d1a:	d1f9      	bne.n	8112d10 <_svfiprintf_r+0x54>
 8112d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8112d20:	d00b      	beq.n	8112d3a <_svfiprintf_r+0x7e>
 8112d22:	465b      	mov	r3, fp
 8112d24:	4622      	mov	r2, r4
 8112d26:	4629      	mov	r1, r5
 8112d28:	4638      	mov	r0, r7
 8112d2a:	f7ff ff6b 	bl	8112c04 <__ssputs_r>
 8112d2e:	3001      	adds	r0, #1
 8112d30:	f000 80a7 	beq.w	8112e82 <_svfiprintf_r+0x1c6>
 8112d34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112d36:	445a      	add	r2, fp
 8112d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8112d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8112d3e:	2b00      	cmp	r3, #0
 8112d40:	f000 809f 	beq.w	8112e82 <_svfiprintf_r+0x1c6>
 8112d44:	2300      	movs	r3, #0
 8112d46:	f04f 32ff 	mov.w	r2, #4294967295
 8112d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8112d4e:	f10a 0a01 	add.w	sl, sl, #1
 8112d52:	9304      	str	r3, [sp, #16]
 8112d54:	9307      	str	r3, [sp, #28]
 8112d56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8112d5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8112d5c:	4654      	mov	r4, sl
 8112d5e:	2205      	movs	r2, #5
 8112d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112d64:	484e      	ldr	r0, [pc, #312]	@ (8112ea0 <_svfiprintf_r+0x1e4>)
 8112d66:	f7ed fabb 	bl	81002e0 <memchr>
 8112d6a:	9a04      	ldr	r2, [sp, #16]
 8112d6c:	b9d8      	cbnz	r0, 8112da6 <_svfiprintf_r+0xea>
 8112d6e:	06d0      	lsls	r0, r2, #27
 8112d70:	bf44      	itt	mi
 8112d72:	2320      	movmi	r3, #32
 8112d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112d78:	0711      	lsls	r1, r2, #28
 8112d7a:	bf44      	itt	mi
 8112d7c:	232b      	movmi	r3, #43	@ 0x2b
 8112d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112d82:	f89a 3000 	ldrb.w	r3, [sl]
 8112d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8112d88:	d015      	beq.n	8112db6 <_svfiprintf_r+0xfa>
 8112d8a:	9a07      	ldr	r2, [sp, #28]
 8112d8c:	4654      	mov	r4, sl
 8112d8e:	2000      	movs	r0, #0
 8112d90:	f04f 0c0a 	mov.w	ip, #10
 8112d94:	4621      	mov	r1, r4
 8112d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112d9a:	3b30      	subs	r3, #48	@ 0x30
 8112d9c:	2b09      	cmp	r3, #9
 8112d9e:	d94b      	bls.n	8112e38 <_svfiprintf_r+0x17c>
 8112da0:	b1b0      	cbz	r0, 8112dd0 <_svfiprintf_r+0x114>
 8112da2:	9207      	str	r2, [sp, #28]
 8112da4:	e014      	b.n	8112dd0 <_svfiprintf_r+0x114>
 8112da6:	eba0 0308 	sub.w	r3, r0, r8
 8112daa:	fa09 f303 	lsl.w	r3, r9, r3
 8112dae:	4313      	orrs	r3, r2
 8112db0:	9304      	str	r3, [sp, #16]
 8112db2:	46a2      	mov	sl, r4
 8112db4:	e7d2      	b.n	8112d5c <_svfiprintf_r+0xa0>
 8112db6:	9b03      	ldr	r3, [sp, #12]
 8112db8:	1d19      	adds	r1, r3, #4
 8112dba:	681b      	ldr	r3, [r3, #0]
 8112dbc:	9103      	str	r1, [sp, #12]
 8112dbe:	2b00      	cmp	r3, #0
 8112dc0:	bfbb      	ittet	lt
 8112dc2:	425b      	neglt	r3, r3
 8112dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8112dc8:	9307      	strge	r3, [sp, #28]
 8112dca:	9307      	strlt	r3, [sp, #28]
 8112dcc:	bfb8      	it	lt
 8112dce:	9204      	strlt	r2, [sp, #16]
 8112dd0:	7823      	ldrb	r3, [r4, #0]
 8112dd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8112dd4:	d10a      	bne.n	8112dec <_svfiprintf_r+0x130>
 8112dd6:	7863      	ldrb	r3, [r4, #1]
 8112dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8112dda:	d132      	bne.n	8112e42 <_svfiprintf_r+0x186>
 8112ddc:	9b03      	ldr	r3, [sp, #12]
 8112dde:	1d1a      	adds	r2, r3, #4
 8112de0:	681b      	ldr	r3, [r3, #0]
 8112de2:	9203      	str	r2, [sp, #12]
 8112de4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8112de8:	3402      	adds	r4, #2
 8112dea:	9305      	str	r3, [sp, #20]
 8112dec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8112eb0 <_svfiprintf_r+0x1f4>
 8112df0:	7821      	ldrb	r1, [r4, #0]
 8112df2:	2203      	movs	r2, #3
 8112df4:	4650      	mov	r0, sl
 8112df6:	f7ed fa73 	bl	81002e0 <memchr>
 8112dfa:	b138      	cbz	r0, 8112e0c <_svfiprintf_r+0x150>
 8112dfc:	9b04      	ldr	r3, [sp, #16]
 8112dfe:	eba0 000a 	sub.w	r0, r0, sl
 8112e02:	2240      	movs	r2, #64	@ 0x40
 8112e04:	4082      	lsls	r2, r0
 8112e06:	4313      	orrs	r3, r2
 8112e08:	3401      	adds	r4, #1
 8112e0a:	9304      	str	r3, [sp, #16]
 8112e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112e10:	4824      	ldr	r0, [pc, #144]	@ (8112ea4 <_svfiprintf_r+0x1e8>)
 8112e12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8112e16:	2206      	movs	r2, #6
 8112e18:	f7ed fa62 	bl	81002e0 <memchr>
 8112e1c:	2800      	cmp	r0, #0
 8112e1e:	d036      	beq.n	8112e8e <_svfiprintf_r+0x1d2>
 8112e20:	4b21      	ldr	r3, [pc, #132]	@ (8112ea8 <_svfiprintf_r+0x1ec>)
 8112e22:	bb1b      	cbnz	r3, 8112e6c <_svfiprintf_r+0x1b0>
 8112e24:	9b03      	ldr	r3, [sp, #12]
 8112e26:	3307      	adds	r3, #7
 8112e28:	f023 0307 	bic.w	r3, r3, #7
 8112e2c:	3308      	adds	r3, #8
 8112e2e:	9303      	str	r3, [sp, #12]
 8112e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112e32:	4433      	add	r3, r6
 8112e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8112e36:	e76a      	b.n	8112d0e <_svfiprintf_r+0x52>
 8112e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8112e3c:	460c      	mov	r4, r1
 8112e3e:	2001      	movs	r0, #1
 8112e40:	e7a8      	b.n	8112d94 <_svfiprintf_r+0xd8>
 8112e42:	2300      	movs	r3, #0
 8112e44:	3401      	adds	r4, #1
 8112e46:	9305      	str	r3, [sp, #20]
 8112e48:	4619      	mov	r1, r3
 8112e4a:	f04f 0c0a 	mov.w	ip, #10
 8112e4e:	4620      	mov	r0, r4
 8112e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112e54:	3a30      	subs	r2, #48	@ 0x30
 8112e56:	2a09      	cmp	r2, #9
 8112e58:	d903      	bls.n	8112e62 <_svfiprintf_r+0x1a6>
 8112e5a:	2b00      	cmp	r3, #0
 8112e5c:	d0c6      	beq.n	8112dec <_svfiprintf_r+0x130>
 8112e5e:	9105      	str	r1, [sp, #20]
 8112e60:	e7c4      	b.n	8112dec <_svfiprintf_r+0x130>
 8112e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8112e66:	4604      	mov	r4, r0
 8112e68:	2301      	movs	r3, #1
 8112e6a:	e7f0      	b.n	8112e4e <_svfiprintf_r+0x192>
 8112e6c:	ab03      	add	r3, sp, #12
 8112e6e:	9300      	str	r3, [sp, #0]
 8112e70:	462a      	mov	r2, r5
 8112e72:	4b0e      	ldr	r3, [pc, #56]	@ (8112eac <_svfiprintf_r+0x1f0>)
 8112e74:	a904      	add	r1, sp, #16
 8112e76:	4638      	mov	r0, r7
 8112e78:	f7fc fbf6 	bl	810f668 <_printf_float>
 8112e7c:	1c42      	adds	r2, r0, #1
 8112e7e:	4606      	mov	r6, r0
 8112e80:	d1d6      	bne.n	8112e30 <_svfiprintf_r+0x174>
 8112e82:	89ab      	ldrh	r3, [r5, #12]
 8112e84:	065b      	lsls	r3, r3, #25
 8112e86:	f53f af2d 	bmi.w	8112ce4 <_svfiprintf_r+0x28>
 8112e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8112e8c:	e72c      	b.n	8112ce8 <_svfiprintf_r+0x2c>
 8112e8e:	ab03      	add	r3, sp, #12
 8112e90:	9300      	str	r3, [sp, #0]
 8112e92:	462a      	mov	r2, r5
 8112e94:	4b05      	ldr	r3, [pc, #20]	@ (8112eac <_svfiprintf_r+0x1f0>)
 8112e96:	a904      	add	r1, sp, #16
 8112e98:	4638      	mov	r0, r7
 8112e9a:	f7fc fe7d 	bl	810fb98 <_printf_i>
 8112e9e:	e7ed      	b.n	8112e7c <_svfiprintf_r+0x1c0>
 8112ea0:	08114109 	.word	0x08114109
 8112ea4:	08114113 	.word	0x08114113
 8112ea8:	0810f669 	.word	0x0810f669
 8112eac:	08112c05 	.word	0x08112c05
 8112eb0:	0811410f 	.word	0x0811410f

08112eb4 <__sfputc_r>:
 8112eb4:	6893      	ldr	r3, [r2, #8]
 8112eb6:	3b01      	subs	r3, #1
 8112eb8:	2b00      	cmp	r3, #0
 8112eba:	b410      	push	{r4}
 8112ebc:	6093      	str	r3, [r2, #8]
 8112ebe:	da08      	bge.n	8112ed2 <__sfputc_r+0x1e>
 8112ec0:	6994      	ldr	r4, [r2, #24]
 8112ec2:	42a3      	cmp	r3, r4
 8112ec4:	db01      	blt.n	8112eca <__sfputc_r+0x16>
 8112ec6:	290a      	cmp	r1, #10
 8112ec8:	d103      	bne.n	8112ed2 <__sfputc_r+0x1e>
 8112eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8112ece:	f7fd bace 	b.w	811046e <__swbuf_r>
 8112ed2:	6813      	ldr	r3, [r2, #0]
 8112ed4:	1c58      	adds	r0, r3, #1
 8112ed6:	6010      	str	r0, [r2, #0]
 8112ed8:	7019      	strb	r1, [r3, #0]
 8112eda:	4608      	mov	r0, r1
 8112edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8112ee0:	4770      	bx	lr

08112ee2 <__sfputs_r>:
 8112ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112ee4:	4606      	mov	r6, r0
 8112ee6:	460f      	mov	r7, r1
 8112ee8:	4614      	mov	r4, r2
 8112eea:	18d5      	adds	r5, r2, r3
 8112eec:	42ac      	cmp	r4, r5
 8112eee:	d101      	bne.n	8112ef4 <__sfputs_r+0x12>
 8112ef0:	2000      	movs	r0, #0
 8112ef2:	e007      	b.n	8112f04 <__sfputs_r+0x22>
 8112ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112ef8:	463a      	mov	r2, r7
 8112efa:	4630      	mov	r0, r6
 8112efc:	f7ff ffda 	bl	8112eb4 <__sfputc_r>
 8112f00:	1c43      	adds	r3, r0, #1
 8112f02:	d1f3      	bne.n	8112eec <__sfputs_r+0xa>
 8112f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08112f08 <_vfiprintf_r>:
 8112f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112f0c:	460d      	mov	r5, r1
 8112f0e:	b09d      	sub	sp, #116	@ 0x74
 8112f10:	4614      	mov	r4, r2
 8112f12:	4698      	mov	r8, r3
 8112f14:	4606      	mov	r6, r0
 8112f16:	b118      	cbz	r0, 8112f20 <_vfiprintf_r+0x18>
 8112f18:	6a03      	ldr	r3, [r0, #32]
 8112f1a:	b90b      	cbnz	r3, 8112f20 <_vfiprintf_r+0x18>
 8112f1c:	f7fd f9fc 	bl	8110318 <__sinit>
 8112f20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112f22:	07d9      	lsls	r1, r3, #31
 8112f24:	d405      	bmi.n	8112f32 <_vfiprintf_r+0x2a>
 8112f26:	89ab      	ldrh	r3, [r5, #12]
 8112f28:	059a      	lsls	r2, r3, #22
 8112f2a:	d402      	bmi.n	8112f32 <_vfiprintf_r+0x2a>
 8112f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8112f2e:	f7fd fbb0 	bl	8110692 <__retarget_lock_acquire_recursive>
 8112f32:	89ab      	ldrh	r3, [r5, #12]
 8112f34:	071b      	lsls	r3, r3, #28
 8112f36:	d501      	bpl.n	8112f3c <_vfiprintf_r+0x34>
 8112f38:	692b      	ldr	r3, [r5, #16]
 8112f3a:	b99b      	cbnz	r3, 8112f64 <_vfiprintf_r+0x5c>
 8112f3c:	4629      	mov	r1, r5
 8112f3e:	4630      	mov	r0, r6
 8112f40:	f7fd fad4 	bl	81104ec <__swsetup_r>
 8112f44:	b170      	cbz	r0, 8112f64 <_vfiprintf_r+0x5c>
 8112f46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112f48:	07dc      	lsls	r4, r3, #31
 8112f4a:	d504      	bpl.n	8112f56 <_vfiprintf_r+0x4e>
 8112f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8112f50:	b01d      	add	sp, #116	@ 0x74
 8112f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112f56:	89ab      	ldrh	r3, [r5, #12]
 8112f58:	0598      	lsls	r0, r3, #22
 8112f5a:	d4f7      	bmi.n	8112f4c <_vfiprintf_r+0x44>
 8112f5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8112f5e:	f7fd fb99 	bl	8110694 <__retarget_lock_release_recursive>
 8112f62:	e7f3      	b.n	8112f4c <_vfiprintf_r+0x44>
 8112f64:	2300      	movs	r3, #0
 8112f66:	9309      	str	r3, [sp, #36]	@ 0x24
 8112f68:	2320      	movs	r3, #32
 8112f6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8112f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8112f72:	2330      	movs	r3, #48	@ 0x30
 8112f74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8113124 <_vfiprintf_r+0x21c>
 8112f78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8112f7c:	f04f 0901 	mov.w	r9, #1
 8112f80:	4623      	mov	r3, r4
 8112f82:	469a      	mov	sl, r3
 8112f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8112f88:	b10a      	cbz	r2, 8112f8e <_vfiprintf_r+0x86>
 8112f8a:	2a25      	cmp	r2, #37	@ 0x25
 8112f8c:	d1f9      	bne.n	8112f82 <_vfiprintf_r+0x7a>
 8112f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8112f92:	d00b      	beq.n	8112fac <_vfiprintf_r+0xa4>
 8112f94:	465b      	mov	r3, fp
 8112f96:	4622      	mov	r2, r4
 8112f98:	4629      	mov	r1, r5
 8112f9a:	4630      	mov	r0, r6
 8112f9c:	f7ff ffa1 	bl	8112ee2 <__sfputs_r>
 8112fa0:	3001      	adds	r0, #1
 8112fa2:	f000 80a7 	beq.w	81130f4 <_vfiprintf_r+0x1ec>
 8112fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112fa8:	445a      	add	r2, fp
 8112faa:	9209      	str	r2, [sp, #36]	@ 0x24
 8112fac:	f89a 3000 	ldrb.w	r3, [sl]
 8112fb0:	2b00      	cmp	r3, #0
 8112fb2:	f000 809f 	beq.w	81130f4 <_vfiprintf_r+0x1ec>
 8112fb6:	2300      	movs	r3, #0
 8112fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8112fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8112fc0:	f10a 0a01 	add.w	sl, sl, #1
 8112fc4:	9304      	str	r3, [sp, #16]
 8112fc6:	9307      	str	r3, [sp, #28]
 8112fc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8112fcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8112fce:	4654      	mov	r4, sl
 8112fd0:	2205      	movs	r2, #5
 8112fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112fd6:	4853      	ldr	r0, [pc, #332]	@ (8113124 <_vfiprintf_r+0x21c>)
 8112fd8:	f7ed f982 	bl	81002e0 <memchr>
 8112fdc:	9a04      	ldr	r2, [sp, #16]
 8112fde:	b9d8      	cbnz	r0, 8113018 <_vfiprintf_r+0x110>
 8112fe0:	06d1      	lsls	r1, r2, #27
 8112fe2:	bf44      	itt	mi
 8112fe4:	2320      	movmi	r3, #32
 8112fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112fea:	0713      	lsls	r3, r2, #28
 8112fec:	bf44      	itt	mi
 8112fee:	232b      	movmi	r3, #43	@ 0x2b
 8112ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8112ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8112ffa:	d015      	beq.n	8113028 <_vfiprintf_r+0x120>
 8112ffc:	9a07      	ldr	r2, [sp, #28]
 8112ffe:	4654      	mov	r4, sl
 8113000:	2000      	movs	r0, #0
 8113002:	f04f 0c0a 	mov.w	ip, #10
 8113006:	4621      	mov	r1, r4
 8113008:	f811 3b01 	ldrb.w	r3, [r1], #1
 811300c:	3b30      	subs	r3, #48	@ 0x30
 811300e:	2b09      	cmp	r3, #9
 8113010:	d94b      	bls.n	81130aa <_vfiprintf_r+0x1a2>
 8113012:	b1b0      	cbz	r0, 8113042 <_vfiprintf_r+0x13a>
 8113014:	9207      	str	r2, [sp, #28]
 8113016:	e014      	b.n	8113042 <_vfiprintf_r+0x13a>
 8113018:	eba0 0308 	sub.w	r3, r0, r8
 811301c:	fa09 f303 	lsl.w	r3, r9, r3
 8113020:	4313      	orrs	r3, r2
 8113022:	9304      	str	r3, [sp, #16]
 8113024:	46a2      	mov	sl, r4
 8113026:	e7d2      	b.n	8112fce <_vfiprintf_r+0xc6>
 8113028:	9b03      	ldr	r3, [sp, #12]
 811302a:	1d19      	adds	r1, r3, #4
 811302c:	681b      	ldr	r3, [r3, #0]
 811302e:	9103      	str	r1, [sp, #12]
 8113030:	2b00      	cmp	r3, #0
 8113032:	bfbb      	ittet	lt
 8113034:	425b      	neglt	r3, r3
 8113036:	f042 0202 	orrlt.w	r2, r2, #2
 811303a:	9307      	strge	r3, [sp, #28]
 811303c:	9307      	strlt	r3, [sp, #28]
 811303e:	bfb8      	it	lt
 8113040:	9204      	strlt	r2, [sp, #16]
 8113042:	7823      	ldrb	r3, [r4, #0]
 8113044:	2b2e      	cmp	r3, #46	@ 0x2e
 8113046:	d10a      	bne.n	811305e <_vfiprintf_r+0x156>
 8113048:	7863      	ldrb	r3, [r4, #1]
 811304a:	2b2a      	cmp	r3, #42	@ 0x2a
 811304c:	d132      	bne.n	81130b4 <_vfiprintf_r+0x1ac>
 811304e:	9b03      	ldr	r3, [sp, #12]
 8113050:	1d1a      	adds	r2, r3, #4
 8113052:	681b      	ldr	r3, [r3, #0]
 8113054:	9203      	str	r2, [sp, #12]
 8113056:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811305a:	3402      	adds	r4, #2
 811305c:	9305      	str	r3, [sp, #20]
 811305e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8113134 <_vfiprintf_r+0x22c>
 8113062:	7821      	ldrb	r1, [r4, #0]
 8113064:	2203      	movs	r2, #3
 8113066:	4650      	mov	r0, sl
 8113068:	f7ed f93a 	bl	81002e0 <memchr>
 811306c:	b138      	cbz	r0, 811307e <_vfiprintf_r+0x176>
 811306e:	9b04      	ldr	r3, [sp, #16]
 8113070:	eba0 000a 	sub.w	r0, r0, sl
 8113074:	2240      	movs	r2, #64	@ 0x40
 8113076:	4082      	lsls	r2, r0
 8113078:	4313      	orrs	r3, r2
 811307a:	3401      	adds	r4, #1
 811307c:	9304      	str	r3, [sp, #16]
 811307e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8113082:	4829      	ldr	r0, [pc, #164]	@ (8113128 <_vfiprintf_r+0x220>)
 8113084:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8113088:	2206      	movs	r2, #6
 811308a:	f7ed f929 	bl	81002e0 <memchr>
 811308e:	2800      	cmp	r0, #0
 8113090:	d03f      	beq.n	8113112 <_vfiprintf_r+0x20a>
 8113092:	4b26      	ldr	r3, [pc, #152]	@ (811312c <_vfiprintf_r+0x224>)
 8113094:	bb1b      	cbnz	r3, 81130de <_vfiprintf_r+0x1d6>
 8113096:	9b03      	ldr	r3, [sp, #12]
 8113098:	3307      	adds	r3, #7
 811309a:	f023 0307 	bic.w	r3, r3, #7
 811309e:	3308      	adds	r3, #8
 81130a0:	9303      	str	r3, [sp, #12]
 81130a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81130a4:	443b      	add	r3, r7
 81130a6:	9309      	str	r3, [sp, #36]	@ 0x24
 81130a8:	e76a      	b.n	8112f80 <_vfiprintf_r+0x78>
 81130aa:	fb0c 3202 	mla	r2, ip, r2, r3
 81130ae:	460c      	mov	r4, r1
 81130b0:	2001      	movs	r0, #1
 81130b2:	e7a8      	b.n	8113006 <_vfiprintf_r+0xfe>
 81130b4:	2300      	movs	r3, #0
 81130b6:	3401      	adds	r4, #1
 81130b8:	9305      	str	r3, [sp, #20]
 81130ba:	4619      	mov	r1, r3
 81130bc:	f04f 0c0a 	mov.w	ip, #10
 81130c0:	4620      	mov	r0, r4
 81130c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 81130c6:	3a30      	subs	r2, #48	@ 0x30
 81130c8:	2a09      	cmp	r2, #9
 81130ca:	d903      	bls.n	81130d4 <_vfiprintf_r+0x1cc>
 81130cc:	2b00      	cmp	r3, #0
 81130ce:	d0c6      	beq.n	811305e <_vfiprintf_r+0x156>
 81130d0:	9105      	str	r1, [sp, #20]
 81130d2:	e7c4      	b.n	811305e <_vfiprintf_r+0x156>
 81130d4:	fb0c 2101 	mla	r1, ip, r1, r2
 81130d8:	4604      	mov	r4, r0
 81130da:	2301      	movs	r3, #1
 81130dc:	e7f0      	b.n	81130c0 <_vfiprintf_r+0x1b8>
 81130de:	ab03      	add	r3, sp, #12
 81130e0:	9300      	str	r3, [sp, #0]
 81130e2:	462a      	mov	r2, r5
 81130e4:	4b12      	ldr	r3, [pc, #72]	@ (8113130 <_vfiprintf_r+0x228>)
 81130e6:	a904      	add	r1, sp, #16
 81130e8:	4630      	mov	r0, r6
 81130ea:	f7fc fabd 	bl	810f668 <_printf_float>
 81130ee:	4607      	mov	r7, r0
 81130f0:	1c78      	adds	r0, r7, #1
 81130f2:	d1d6      	bne.n	81130a2 <_vfiprintf_r+0x19a>
 81130f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81130f6:	07d9      	lsls	r1, r3, #31
 81130f8:	d405      	bmi.n	8113106 <_vfiprintf_r+0x1fe>
 81130fa:	89ab      	ldrh	r3, [r5, #12]
 81130fc:	059a      	lsls	r2, r3, #22
 81130fe:	d402      	bmi.n	8113106 <_vfiprintf_r+0x1fe>
 8113100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8113102:	f7fd fac7 	bl	8110694 <__retarget_lock_release_recursive>
 8113106:	89ab      	ldrh	r3, [r5, #12]
 8113108:	065b      	lsls	r3, r3, #25
 811310a:	f53f af1f 	bmi.w	8112f4c <_vfiprintf_r+0x44>
 811310e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8113110:	e71e      	b.n	8112f50 <_vfiprintf_r+0x48>
 8113112:	ab03      	add	r3, sp, #12
 8113114:	9300      	str	r3, [sp, #0]
 8113116:	462a      	mov	r2, r5
 8113118:	4b05      	ldr	r3, [pc, #20]	@ (8113130 <_vfiprintf_r+0x228>)
 811311a:	a904      	add	r1, sp, #16
 811311c:	4630      	mov	r0, r6
 811311e:	f7fc fd3b 	bl	810fb98 <_printf_i>
 8113122:	e7e4      	b.n	81130ee <_vfiprintf_r+0x1e6>
 8113124:	08114109 	.word	0x08114109
 8113128:	08114113 	.word	0x08114113
 811312c:	0810f669 	.word	0x0810f669
 8113130:	08112ee3 	.word	0x08112ee3
 8113134:	0811410f 	.word	0x0811410f

08113138 <__sflush_r>:
 8113138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113140:	0716      	lsls	r6, r2, #28
 8113142:	4605      	mov	r5, r0
 8113144:	460c      	mov	r4, r1
 8113146:	d454      	bmi.n	81131f2 <__sflush_r+0xba>
 8113148:	684b      	ldr	r3, [r1, #4]
 811314a:	2b00      	cmp	r3, #0
 811314c:	dc02      	bgt.n	8113154 <__sflush_r+0x1c>
 811314e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8113150:	2b00      	cmp	r3, #0
 8113152:	dd48      	ble.n	81131e6 <__sflush_r+0xae>
 8113154:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8113156:	2e00      	cmp	r6, #0
 8113158:	d045      	beq.n	81131e6 <__sflush_r+0xae>
 811315a:	2300      	movs	r3, #0
 811315c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8113160:	682f      	ldr	r7, [r5, #0]
 8113162:	6a21      	ldr	r1, [r4, #32]
 8113164:	602b      	str	r3, [r5, #0]
 8113166:	d030      	beq.n	81131ca <__sflush_r+0x92>
 8113168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811316a:	89a3      	ldrh	r3, [r4, #12]
 811316c:	0759      	lsls	r1, r3, #29
 811316e:	d505      	bpl.n	811317c <__sflush_r+0x44>
 8113170:	6863      	ldr	r3, [r4, #4]
 8113172:	1ad2      	subs	r2, r2, r3
 8113174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8113176:	b10b      	cbz	r3, 811317c <__sflush_r+0x44>
 8113178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811317a:	1ad2      	subs	r2, r2, r3
 811317c:	2300      	movs	r3, #0
 811317e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8113180:	6a21      	ldr	r1, [r4, #32]
 8113182:	4628      	mov	r0, r5
 8113184:	47b0      	blx	r6
 8113186:	1c43      	adds	r3, r0, #1
 8113188:	89a3      	ldrh	r3, [r4, #12]
 811318a:	d106      	bne.n	811319a <__sflush_r+0x62>
 811318c:	6829      	ldr	r1, [r5, #0]
 811318e:	291d      	cmp	r1, #29
 8113190:	d82b      	bhi.n	81131ea <__sflush_r+0xb2>
 8113192:	4a2a      	ldr	r2, [pc, #168]	@ (811323c <__sflush_r+0x104>)
 8113194:	410a      	asrs	r2, r1
 8113196:	07d6      	lsls	r6, r2, #31
 8113198:	d427      	bmi.n	81131ea <__sflush_r+0xb2>
 811319a:	2200      	movs	r2, #0
 811319c:	6062      	str	r2, [r4, #4]
 811319e:	04d9      	lsls	r1, r3, #19
 81131a0:	6922      	ldr	r2, [r4, #16]
 81131a2:	6022      	str	r2, [r4, #0]
 81131a4:	d504      	bpl.n	81131b0 <__sflush_r+0x78>
 81131a6:	1c42      	adds	r2, r0, #1
 81131a8:	d101      	bne.n	81131ae <__sflush_r+0x76>
 81131aa:	682b      	ldr	r3, [r5, #0]
 81131ac:	b903      	cbnz	r3, 81131b0 <__sflush_r+0x78>
 81131ae:	6560      	str	r0, [r4, #84]	@ 0x54
 81131b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81131b2:	602f      	str	r7, [r5, #0]
 81131b4:	b1b9      	cbz	r1, 81131e6 <__sflush_r+0xae>
 81131b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81131ba:	4299      	cmp	r1, r3
 81131bc:	d002      	beq.n	81131c4 <__sflush_r+0x8c>
 81131be:	4628      	mov	r0, r5
 81131c0:	f7fe f8ea 	bl	8111398 <_free_r>
 81131c4:	2300      	movs	r3, #0
 81131c6:	6363      	str	r3, [r4, #52]	@ 0x34
 81131c8:	e00d      	b.n	81131e6 <__sflush_r+0xae>
 81131ca:	2301      	movs	r3, #1
 81131cc:	4628      	mov	r0, r5
 81131ce:	47b0      	blx	r6
 81131d0:	4602      	mov	r2, r0
 81131d2:	1c50      	adds	r0, r2, #1
 81131d4:	d1c9      	bne.n	811316a <__sflush_r+0x32>
 81131d6:	682b      	ldr	r3, [r5, #0]
 81131d8:	2b00      	cmp	r3, #0
 81131da:	d0c6      	beq.n	811316a <__sflush_r+0x32>
 81131dc:	2b1d      	cmp	r3, #29
 81131de:	d001      	beq.n	81131e4 <__sflush_r+0xac>
 81131e0:	2b16      	cmp	r3, #22
 81131e2:	d11e      	bne.n	8113222 <__sflush_r+0xea>
 81131e4:	602f      	str	r7, [r5, #0]
 81131e6:	2000      	movs	r0, #0
 81131e8:	e022      	b.n	8113230 <__sflush_r+0xf8>
 81131ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81131ee:	b21b      	sxth	r3, r3
 81131f0:	e01b      	b.n	811322a <__sflush_r+0xf2>
 81131f2:	690f      	ldr	r7, [r1, #16]
 81131f4:	2f00      	cmp	r7, #0
 81131f6:	d0f6      	beq.n	81131e6 <__sflush_r+0xae>
 81131f8:	0793      	lsls	r3, r2, #30
 81131fa:	680e      	ldr	r6, [r1, #0]
 81131fc:	bf08      	it	eq
 81131fe:	694b      	ldreq	r3, [r1, #20]
 8113200:	600f      	str	r7, [r1, #0]
 8113202:	bf18      	it	ne
 8113204:	2300      	movne	r3, #0
 8113206:	eba6 0807 	sub.w	r8, r6, r7
 811320a:	608b      	str	r3, [r1, #8]
 811320c:	f1b8 0f00 	cmp.w	r8, #0
 8113210:	dde9      	ble.n	81131e6 <__sflush_r+0xae>
 8113212:	6a21      	ldr	r1, [r4, #32]
 8113214:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8113216:	4643      	mov	r3, r8
 8113218:	463a      	mov	r2, r7
 811321a:	4628      	mov	r0, r5
 811321c:	47b0      	blx	r6
 811321e:	2800      	cmp	r0, #0
 8113220:	dc08      	bgt.n	8113234 <__sflush_r+0xfc>
 8113222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8113226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811322a:	81a3      	strh	r3, [r4, #12]
 811322c:	f04f 30ff 	mov.w	r0, #4294967295
 8113230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113234:	4407      	add	r7, r0
 8113236:	eba8 0800 	sub.w	r8, r8, r0
 811323a:	e7e7      	b.n	811320c <__sflush_r+0xd4>
 811323c:	dfbffffe 	.word	0xdfbffffe

08113240 <_fflush_r>:
 8113240:	b538      	push	{r3, r4, r5, lr}
 8113242:	690b      	ldr	r3, [r1, #16]
 8113244:	4605      	mov	r5, r0
 8113246:	460c      	mov	r4, r1
 8113248:	b913      	cbnz	r3, 8113250 <_fflush_r+0x10>
 811324a:	2500      	movs	r5, #0
 811324c:	4628      	mov	r0, r5
 811324e:	bd38      	pop	{r3, r4, r5, pc}
 8113250:	b118      	cbz	r0, 811325a <_fflush_r+0x1a>
 8113252:	6a03      	ldr	r3, [r0, #32]
 8113254:	b90b      	cbnz	r3, 811325a <_fflush_r+0x1a>
 8113256:	f7fd f85f 	bl	8110318 <__sinit>
 811325a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811325e:	2b00      	cmp	r3, #0
 8113260:	d0f3      	beq.n	811324a <_fflush_r+0xa>
 8113262:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8113264:	07d0      	lsls	r0, r2, #31
 8113266:	d404      	bmi.n	8113272 <_fflush_r+0x32>
 8113268:	0599      	lsls	r1, r3, #22
 811326a:	d402      	bmi.n	8113272 <_fflush_r+0x32>
 811326c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811326e:	f7fd fa10 	bl	8110692 <__retarget_lock_acquire_recursive>
 8113272:	4628      	mov	r0, r5
 8113274:	4621      	mov	r1, r4
 8113276:	f7ff ff5f 	bl	8113138 <__sflush_r>
 811327a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811327c:	07da      	lsls	r2, r3, #31
 811327e:	4605      	mov	r5, r0
 8113280:	d4e4      	bmi.n	811324c <_fflush_r+0xc>
 8113282:	89a3      	ldrh	r3, [r4, #12]
 8113284:	059b      	lsls	r3, r3, #22
 8113286:	d4e1      	bmi.n	811324c <_fflush_r+0xc>
 8113288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811328a:	f7fd fa03 	bl	8110694 <__retarget_lock_release_recursive>
 811328e:	e7dd      	b.n	811324c <_fflush_r+0xc>

08113290 <fiprintf>:
 8113290:	b40e      	push	{r1, r2, r3}
 8113292:	b503      	push	{r0, r1, lr}
 8113294:	4601      	mov	r1, r0
 8113296:	ab03      	add	r3, sp, #12
 8113298:	4805      	ldr	r0, [pc, #20]	@ (81132b0 <fiprintf+0x20>)
 811329a:	f853 2b04 	ldr.w	r2, [r3], #4
 811329e:	6800      	ldr	r0, [r0, #0]
 81132a0:	9301      	str	r3, [sp, #4]
 81132a2:	f7ff fe31 	bl	8112f08 <_vfiprintf_r>
 81132a6:	b002      	add	sp, #8
 81132a8:	f85d eb04 	ldr.w	lr, [sp], #4
 81132ac:	b003      	add	sp, #12
 81132ae:	4770      	bx	lr
 81132b0:	100000b0 	.word	0x100000b0

081132b4 <__swhatbuf_r>:
 81132b4:	b570      	push	{r4, r5, r6, lr}
 81132b6:	460c      	mov	r4, r1
 81132b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81132bc:	2900      	cmp	r1, #0
 81132be:	b096      	sub	sp, #88	@ 0x58
 81132c0:	4615      	mov	r5, r2
 81132c2:	461e      	mov	r6, r3
 81132c4:	da0d      	bge.n	81132e2 <__swhatbuf_r+0x2e>
 81132c6:	89a3      	ldrh	r3, [r4, #12]
 81132c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81132cc:	f04f 0100 	mov.w	r1, #0
 81132d0:	bf14      	ite	ne
 81132d2:	2340      	movne	r3, #64	@ 0x40
 81132d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 81132d8:	2000      	movs	r0, #0
 81132da:	6031      	str	r1, [r6, #0]
 81132dc:	602b      	str	r3, [r5, #0]
 81132de:	b016      	add	sp, #88	@ 0x58
 81132e0:	bd70      	pop	{r4, r5, r6, pc}
 81132e2:	466a      	mov	r2, sp
 81132e4:	f000 f874 	bl	81133d0 <_fstat_r>
 81132e8:	2800      	cmp	r0, #0
 81132ea:	dbec      	blt.n	81132c6 <__swhatbuf_r+0x12>
 81132ec:	9901      	ldr	r1, [sp, #4]
 81132ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 81132f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 81132f6:	4259      	negs	r1, r3
 81132f8:	4159      	adcs	r1, r3
 81132fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81132fe:	e7eb      	b.n	81132d8 <__swhatbuf_r+0x24>

08113300 <__smakebuf_r>:
 8113300:	898b      	ldrh	r3, [r1, #12]
 8113302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8113304:	079d      	lsls	r5, r3, #30
 8113306:	4606      	mov	r6, r0
 8113308:	460c      	mov	r4, r1
 811330a:	d507      	bpl.n	811331c <__smakebuf_r+0x1c>
 811330c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8113310:	6023      	str	r3, [r4, #0]
 8113312:	6123      	str	r3, [r4, #16]
 8113314:	2301      	movs	r3, #1
 8113316:	6163      	str	r3, [r4, #20]
 8113318:	b003      	add	sp, #12
 811331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811331c:	ab01      	add	r3, sp, #4
 811331e:	466a      	mov	r2, sp
 8113320:	f7ff ffc8 	bl	81132b4 <__swhatbuf_r>
 8113324:	9f00      	ldr	r7, [sp, #0]
 8113326:	4605      	mov	r5, r0
 8113328:	4639      	mov	r1, r7
 811332a:	4630      	mov	r0, r6
 811332c:	f7fe f8a8 	bl	8111480 <_malloc_r>
 8113330:	b948      	cbnz	r0, 8113346 <__smakebuf_r+0x46>
 8113332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8113336:	059a      	lsls	r2, r3, #22
 8113338:	d4ee      	bmi.n	8113318 <__smakebuf_r+0x18>
 811333a:	f023 0303 	bic.w	r3, r3, #3
 811333e:	f043 0302 	orr.w	r3, r3, #2
 8113342:	81a3      	strh	r3, [r4, #12]
 8113344:	e7e2      	b.n	811330c <__smakebuf_r+0xc>
 8113346:	89a3      	ldrh	r3, [r4, #12]
 8113348:	6020      	str	r0, [r4, #0]
 811334a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811334e:	81a3      	strh	r3, [r4, #12]
 8113350:	9b01      	ldr	r3, [sp, #4]
 8113352:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8113356:	b15b      	cbz	r3, 8113370 <__smakebuf_r+0x70>
 8113358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811335c:	4630      	mov	r0, r6
 811335e:	f000 f849 	bl	81133f4 <_isatty_r>
 8113362:	b128      	cbz	r0, 8113370 <__smakebuf_r+0x70>
 8113364:	89a3      	ldrh	r3, [r4, #12]
 8113366:	f023 0303 	bic.w	r3, r3, #3
 811336a:	f043 0301 	orr.w	r3, r3, #1
 811336e:	81a3      	strh	r3, [r4, #12]
 8113370:	89a3      	ldrh	r3, [r4, #12]
 8113372:	431d      	orrs	r5, r3
 8113374:	81a5      	strh	r5, [r4, #12]
 8113376:	e7cf      	b.n	8113318 <__smakebuf_r+0x18>

08113378 <memmove>:
 8113378:	4288      	cmp	r0, r1
 811337a:	b510      	push	{r4, lr}
 811337c:	eb01 0402 	add.w	r4, r1, r2
 8113380:	d902      	bls.n	8113388 <memmove+0x10>
 8113382:	4284      	cmp	r4, r0
 8113384:	4623      	mov	r3, r4
 8113386:	d807      	bhi.n	8113398 <memmove+0x20>
 8113388:	1e43      	subs	r3, r0, #1
 811338a:	42a1      	cmp	r1, r4
 811338c:	d008      	beq.n	81133a0 <memmove+0x28>
 811338e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8113392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8113396:	e7f8      	b.n	811338a <memmove+0x12>
 8113398:	4402      	add	r2, r0
 811339a:	4601      	mov	r1, r0
 811339c:	428a      	cmp	r2, r1
 811339e:	d100      	bne.n	81133a2 <memmove+0x2a>
 81133a0:	bd10      	pop	{r4, pc}
 81133a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81133a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81133aa:	e7f7      	b.n	811339c <memmove+0x24>

081133ac <strncmp>:
 81133ac:	b510      	push	{r4, lr}
 81133ae:	b16a      	cbz	r2, 81133cc <strncmp+0x20>
 81133b0:	3901      	subs	r1, #1
 81133b2:	1884      	adds	r4, r0, r2
 81133b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 81133b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 81133bc:	429a      	cmp	r2, r3
 81133be:	d103      	bne.n	81133c8 <strncmp+0x1c>
 81133c0:	42a0      	cmp	r0, r4
 81133c2:	d001      	beq.n	81133c8 <strncmp+0x1c>
 81133c4:	2a00      	cmp	r2, #0
 81133c6:	d1f5      	bne.n	81133b4 <strncmp+0x8>
 81133c8:	1ad0      	subs	r0, r2, r3
 81133ca:	bd10      	pop	{r4, pc}
 81133cc:	4610      	mov	r0, r2
 81133ce:	e7fc      	b.n	81133ca <strncmp+0x1e>

081133d0 <_fstat_r>:
 81133d0:	b538      	push	{r3, r4, r5, lr}
 81133d2:	4d07      	ldr	r5, [pc, #28]	@ (81133f0 <_fstat_r+0x20>)
 81133d4:	2300      	movs	r3, #0
 81133d6:	4604      	mov	r4, r0
 81133d8:	4608      	mov	r0, r1
 81133da:	4611      	mov	r1, r2
 81133dc:	602b      	str	r3, [r5, #0]
 81133de:	f7f1 f869 	bl	81044b4 <_fstat>
 81133e2:	1c43      	adds	r3, r0, #1
 81133e4:	d102      	bne.n	81133ec <_fstat_r+0x1c>
 81133e6:	682b      	ldr	r3, [r5, #0]
 81133e8:	b103      	cbz	r3, 81133ec <_fstat_r+0x1c>
 81133ea:	6023      	str	r3, [r4, #0]
 81133ec:	bd38      	pop	{r3, r4, r5, pc}
 81133ee:	bf00      	nop
 81133f0:	10008cb8 	.word	0x10008cb8

081133f4 <_isatty_r>:
 81133f4:	b538      	push	{r3, r4, r5, lr}
 81133f6:	4d06      	ldr	r5, [pc, #24]	@ (8113410 <_isatty_r+0x1c>)
 81133f8:	2300      	movs	r3, #0
 81133fa:	4604      	mov	r4, r0
 81133fc:	4608      	mov	r0, r1
 81133fe:	602b      	str	r3, [r5, #0]
 8113400:	f7f1 f868 	bl	81044d4 <_isatty>
 8113404:	1c43      	adds	r3, r0, #1
 8113406:	d102      	bne.n	811340e <_isatty_r+0x1a>
 8113408:	682b      	ldr	r3, [r5, #0]
 811340a:	b103      	cbz	r3, 811340e <_isatty_r+0x1a>
 811340c:	6023      	str	r3, [r4, #0]
 811340e:	bd38      	pop	{r3, r4, r5, pc}
 8113410:	10008cb8 	.word	0x10008cb8

08113414 <_sbrk_r>:
 8113414:	b538      	push	{r3, r4, r5, lr}
 8113416:	4d06      	ldr	r5, [pc, #24]	@ (8113430 <_sbrk_r+0x1c>)
 8113418:	2300      	movs	r3, #0
 811341a:	4604      	mov	r4, r0
 811341c:	4608      	mov	r0, r1
 811341e:	602b      	str	r3, [r5, #0]
 8113420:	f7f1 f870 	bl	8104504 <_sbrk>
 8113424:	1c43      	adds	r3, r0, #1
 8113426:	d102      	bne.n	811342e <_sbrk_r+0x1a>
 8113428:	682b      	ldr	r3, [r5, #0]
 811342a:	b103      	cbz	r3, 811342e <_sbrk_r+0x1a>
 811342c:	6023      	str	r3, [r4, #0]
 811342e:	bd38      	pop	{r3, r4, r5, pc}
 8113430:	10008cb8 	.word	0x10008cb8
 8113434:	00000000 	.word	0x00000000

08113438 <nan>:
 8113438:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8113440 <nan+0x8>
 811343c:	4770      	bx	lr
 811343e:	bf00      	nop
 8113440:	00000000 	.word	0x00000000
 8113444:	7ff80000 	.word	0x7ff80000

08113448 <abort>:
 8113448:	b508      	push	{r3, lr}
 811344a:	2006      	movs	r0, #6
 811344c:	f000 fbc4 	bl	8113bd8 <raise>
 8113450:	2001      	movs	r0, #1
 8113452:	f7f0 fff9 	bl	8104448 <_exit>

08113456 <_calloc_r>:
 8113456:	b570      	push	{r4, r5, r6, lr}
 8113458:	fba1 5402 	umull	r5, r4, r1, r2
 811345c:	b93c      	cbnz	r4, 811346e <_calloc_r+0x18>
 811345e:	4629      	mov	r1, r5
 8113460:	f7fe f80e 	bl	8111480 <_malloc_r>
 8113464:	4606      	mov	r6, r0
 8113466:	b928      	cbnz	r0, 8113474 <_calloc_r+0x1e>
 8113468:	2600      	movs	r6, #0
 811346a:	4630      	mov	r0, r6
 811346c:	bd70      	pop	{r4, r5, r6, pc}
 811346e:	220c      	movs	r2, #12
 8113470:	6002      	str	r2, [r0, #0]
 8113472:	e7f9      	b.n	8113468 <_calloc_r+0x12>
 8113474:	462a      	mov	r2, r5
 8113476:	4621      	mov	r1, r4
 8113478:	f7fd f88e 	bl	8110598 <memset>
 811347c:	e7f5      	b.n	811346a <_calloc_r+0x14>

0811347e <rshift>:
 811347e:	6903      	ldr	r3, [r0, #16]
 8113480:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8113484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8113488:	ea4f 1261 	mov.w	r2, r1, asr #5
 811348c:	f100 0414 	add.w	r4, r0, #20
 8113490:	dd45      	ble.n	811351e <rshift+0xa0>
 8113492:	f011 011f 	ands.w	r1, r1, #31
 8113496:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 811349a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 811349e:	d10c      	bne.n	81134ba <rshift+0x3c>
 81134a0:	f100 0710 	add.w	r7, r0, #16
 81134a4:	4629      	mov	r1, r5
 81134a6:	42b1      	cmp	r1, r6
 81134a8:	d334      	bcc.n	8113514 <rshift+0x96>
 81134aa:	1a9b      	subs	r3, r3, r2
 81134ac:	009b      	lsls	r3, r3, #2
 81134ae:	1eea      	subs	r2, r5, #3
 81134b0:	4296      	cmp	r6, r2
 81134b2:	bf38      	it	cc
 81134b4:	2300      	movcc	r3, #0
 81134b6:	4423      	add	r3, r4
 81134b8:	e015      	b.n	81134e6 <rshift+0x68>
 81134ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 81134be:	f1c1 0820 	rsb	r8, r1, #32
 81134c2:	40cf      	lsrs	r7, r1
 81134c4:	f105 0e04 	add.w	lr, r5, #4
 81134c8:	46a1      	mov	r9, r4
 81134ca:	4576      	cmp	r6, lr
 81134cc:	46f4      	mov	ip, lr
 81134ce:	d815      	bhi.n	81134fc <rshift+0x7e>
 81134d0:	1a9a      	subs	r2, r3, r2
 81134d2:	0092      	lsls	r2, r2, #2
 81134d4:	3a04      	subs	r2, #4
 81134d6:	3501      	adds	r5, #1
 81134d8:	42ae      	cmp	r6, r5
 81134da:	bf38      	it	cc
 81134dc:	2200      	movcc	r2, #0
 81134de:	18a3      	adds	r3, r4, r2
 81134e0:	50a7      	str	r7, [r4, r2]
 81134e2:	b107      	cbz	r7, 81134e6 <rshift+0x68>
 81134e4:	3304      	adds	r3, #4
 81134e6:	1b1a      	subs	r2, r3, r4
 81134e8:	42a3      	cmp	r3, r4
 81134ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 81134ee:	bf08      	it	eq
 81134f0:	2300      	moveq	r3, #0
 81134f2:	6102      	str	r2, [r0, #16]
 81134f4:	bf08      	it	eq
 81134f6:	6143      	streq	r3, [r0, #20]
 81134f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81134fc:	f8dc c000 	ldr.w	ip, [ip]
 8113500:	fa0c fc08 	lsl.w	ip, ip, r8
 8113504:	ea4c 0707 	orr.w	r7, ip, r7
 8113508:	f849 7b04 	str.w	r7, [r9], #4
 811350c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8113510:	40cf      	lsrs	r7, r1
 8113512:	e7da      	b.n	81134ca <rshift+0x4c>
 8113514:	f851 cb04 	ldr.w	ip, [r1], #4
 8113518:	f847 cf04 	str.w	ip, [r7, #4]!
 811351c:	e7c3      	b.n	81134a6 <rshift+0x28>
 811351e:	4623      	mov	r3, r4
 8113520:	e7e1      	b.n	81134e6 <rshift+0x68>

08113522 <__hexdig_fun>:
 8113522:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8113526:	2b09      	cmp	r3, #9
 8113528:	d802      	bhi.n	8113530 <__hexdig_fun+0xe>
 811352a:	3820      	subs	r0, #32
 811352c:	b2c0      	uxtb	r0, r0
 811352e:	4770      	bx	lr
 8113530:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8113534:	2b05      	cmp	r3, #5
 8113536:	d801      	bhi.n	811353c <__hexdig_fun+0x1a>
 8113538:	3847      	subs	r0, #71	@ 0x47
 811353a:	e7f7      	b.n	811352c <__hexdig_fun+0xa>
 811353c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8113540:	2b05      	cmp	r3, #5
 8113542:	d801      	bhi.n	8113548 <__hexdig_fun+0x26>
 8113544:	3827      	subs	r0, #39	@ 0x27
 8113546:	e7f1      	b.n	811352c <__hexdig_fun+0xa>
 8113548:	2000      	movs	r0, #0
 811354a:	4770      	bx	lr

0811354c <__gethex>:
 811354c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8113550:	b085      	sub	sp, #20
 8113552:	468a      	mov	sl, r1
 8113554:	9302      	str	r3, [sp, #8]
 8113556:	680b      	ldr	r3, [r1, #0]
 8113558:	9001      	str	r0, [sp, #4]
 811355a:	4690      	mov	r8, r2
 811355c:	1c9c      	adds	r4, r3, #2
 811355e:	46a1      	mov	r9, r4
 8113560:	f814 0b01 	ldrb.w	r0, [r4], #1
 8113564:	2830      	cmp	r0, #48	@ 0x30
 8113566:	d0fa      	beq.n	811355e <__gethex+0x12>
 8113568:	eba9 0303 	sub.w	r3, r9, r3
 811356c:	f1a3 0b02 	sub.w	fp, r3, #2
 8113570:	f7ff ffd7 	bl	8113522 <__hexdig_fun>
 8113574:	4605      	mov	r5, r0
 8113576:	2800      	cmp	r0, #0
 8113578:	d168      	bne.n	811364c <__gethex+0x100>
 811357a:	49a0      	ldr	r1, [pc, #640]	@ (81137fc <__gethex+0x2b0>)
 811357c:	2201      	movs	r2, #1
 811357e:	4648      	mov	r0, r9
 8113580:	f7ff ff14 	bl	81133ac <strncmp>
 8113584:	4607      	mov	r7, r0
 8113586:	2800      	cmp	r0, #0
 8113588:	d167      	bne.n	811365a <__gethex+0x10e>
 811358a:	f899 0001 	ldrb.w	r0, [r9, #1]
 811358e:	4626      	mov	r6, r4
 8113590:	f7ff ffc7 	bl	8113522 <__hexdig_fun>
 8113594:	2800      	cmp	r0, #0
 8113596:	d062      	beq.n	811365e <__gethex+0x112>
 8113598:	4623      	mov	r3, r4
 811359a:	7818      	ldrb	r0, [r3, #0]
 811359c:	2830      	cmp	r0, #48	@ 0x30
 811359e:	4699      	mov	r9, r3
 81135a0:	f103 0301 	add.w	r3, r3, #1
 81135a4:	d0f9      	beq.n	811359a <__gethex+0x4e>
 81135a6:	f7ff ffbc 	bl	8113522 <__hexdig_fun>
 81135aa:	fab0 f580 	clz	r5, r0
 81135ae:	096d      	lsrs	r5, r5, #5
 81135b0:	f04f 0b01 	mov.w	fp, #1
 81135b4:	464a      	mov	r2, r9
 81135b6:	4616      	mov	r6, r2
 81135b8:	3201      	adds	r2, #1
 81135ba:	7830      	ldrb	r0, [r6, #0]
 81135bc:	f7ff ffb1 	bl	8113522 <__hexdig_fun>
 81135c0:	2800      	cmp	r0, #0
 81135c2:	d1f8      	bne.n	81135b6 <__gethex+0x6a>
 81135c4:	498d      	ldr	r1, [pc, #564]	@ (81137fc <__gethex+0x2b0>)
 81135c6:	2201      	movs	r2, #1
 81135c8:	4630      	mov	r0, r6
 81135ca:	f7ff feef 	bl	81133ac <strncmp>
 81135ce:	2800      	cmp	r0, #0
 81135d0:	d13f      	bne.n	8113652 <__gethex+0x106>
 81135d2:	b944      	cbnz	r4, 81135e6 <__gethex+0x9a>
 81135d4:	1c74      	adds	r4, r6, #1
 81135d6:	4622      	mov	r2, r4
 81135d8:	4616      	mov	r6, r2
 81135da:	3201      	adds	r2, #1
 81135dc:	7830      	ldrb	r0, [r6, #0]
 81135de:	f7ff ffa0 	bl	8113522 <__hexdig_fun>
 81135e2:	2800      	cmp	r0, #0
 81135e4:	d1f8      	bne.n	81135d8 <__gethex+0x8c>
 81135e6:	1ba4      	subs	r4, r4, r6
 81135e8:	00a7      	lsls	r7, r4, #2
 81135ea:	7833      	ldrb	r3, [r6, #0]
 81135ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 81135f0:	2b50      	cmp	r3, #80	@ 0x50
 81135f2:	d13e      	bne.n	8113672 <__gethex+0x126>
 81135f4:	7873      	ldrb	r3, [r6, #1]
 81135f6:	2b2b      	cmp	r3, #43	@ 0x2b
 81135f8:	d033      	beq.n	8113662 <__gethex+0x116>
 81135fa:	2b2d      	cmp	r3, #45	@ 0x2d
 81135fc:	d034      	beq.n	8113668 <__gethex+0x11c>
 81135fe:	1c71      	adds	r1, r6, #1
 8113600:	2400      	movs	r4, #0
 8113602:	7808      	ldrb	r0, [r1, #0]
 8113604:	f7ff ff8d 	bl	8113522 <__hexdig_fun>
 8113608:	1e43      	subs	r3, r0, #1
 811360a:	b2db      	uxtb	r3, r3
 811360c:	2b18      	cmp	r3, #24
 811360e:	d830      	bhi.n	8113672 <__gethex+0x126>
 8113610:	f1a0 0210 	sub.w	r2, r0, #16
 8113614:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8113618:	f7ff ff83 	bl	8113522 <__hexdig_fun>
 811361c:	f100 3cff 	add.w	ip, r0, #4294967295
 8113620:	fa5f fc8c 	uxtb.w	ip, ip
 8113624:	f1bc 0f18 	cmp.w	ip, #24
 8113628:	f04f 030a 	mov.w	r3, #10
 811362c:	d91e      	bls.n	811366c <__gethex+0x120>
 811362e:	b104      	cbz	r4, 8113632 <__gethex+0xe6>
 8113630:	4252      	negs	r2, r2
 8113632:	4417      	add	r7, r2
 8113634:	f8ca 1000 	str.w	r1, [sl]
 8113638:	b1ed      	cbz	r5, 8113676 <__gethex+0x12a>
 811363a:	f1bb 0f00 	cmp.w	fp, #0
 811363e:	bf0c      	ite	eq
 8113640:	2506      	moveq	r5, #6
 8113642:	2500      	movne	r5, #0
 8113644:	4628      	mov	r0, r5
 8113646:	b005      	add	sp, #20
 8113648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811364c:	2500      	movs	r5, #0
 811364e:	462c      	mov	r4, r5
 8113650:	e7b0      	b.n	81135b4 <__gethex+0x68>
 8113652:	2c00      	cmp	r4, #0
 8113654:	d1c7      	bne.n	81135e6 <__gethex+0x9a>
 8113656:	4627      	mov	r7, r4
 8113658:	e7c7      	b.n	81135ea <__gethex+0x9e>
 811365a:	464e      	mov	r6, r9
 811365c:	462f      	mov	r7, r5
 811365e:	2501      	movs	r5, #1
 8113660:	e7c3      	b.n	81135ea <__gethex+0x9e>
 8113662:	2400      	movs	r4, #0
 8113664:	1cb1      	adds	r1, r6, #2
 8113666:	e7cc      	b.n	8113602 <__gethex+0xb6>
 8113668:	2401      	movs	r4, #1
 811366a:	e7fb      	b.n	8113664 <__gethex+0x118>
 811366c:	fb03 0002 	mla	r0, r3, r2, r0
 8113670:	e7ce      	b.n	8113610 <__gethex+0xc4>
 8113672:	4631      	mov	r1, r6
 8113674:	e7de      	b.n	8113634 <__gethex+0xe8>
 8113676:	eba6 0309 	sub.w	r3, r6, r9
 811367a:	3b01      	subs	r3, #1
 811367c:	4629      	mov	r1, r5
 811367e:	2b07      	cmp	r3, #7
 8113680:	dc0a      	bgt.n	8113698 <__gethex+0x14c>
 8113682:	9801      	ldr	r0, [sp, #4]
 8113684:	f7fd ff88 	bl	8111598 <_Balloc>
 8113688:	4604      	mov	r4, r0
 811368a:	b940      	cbnz	r0, 811369e <__gethex+0x152>
 811368c:	4b5c      	ldr	r3, [pc, #368]	@ (8113800 <__gethex+0x2b4>)
 811368e:	4602      	mov	r2, r0
 8113690:	21e4      	movs	r1, #228	@ 0xe4
 8113692:	485c      	ldr	r0, [pc, #368]	@ (8113804 <__gethex+0x2b8>)
 8113694:	f7fd f814 	bl	81106c0 <__assert_func>
 8113698:	3101      	adds	r1, #1
 811369a:	105b      	asrs	r3, r3, #1
 811369c:	e7ef      	b.n	811367e <__gethex+0x132>
 811369e:	f100 0a14 	add.w	sl, r0, #20
 81136a2:	2300      	movs	r3, #0
 81136a4:	4655      	mov	r5, sl
 81136a6:	469b      	mov	fp, r3
 81136a8:	45b1      	cmp	r9, r6
 81136aa:	d337      	bcc.n	811371c <__gethex+0x1d0>
 81136ac:	f845 bb04 	str.w	fp, [r5], #4
 81136b0:	eba5 050a 	sub.w	r5, r5, sl
 81136b4:	10ad      	asrs	r5, r5, #2
 81136b6:	6125      	str	r5, [r4, #16]
 81136b8:	4658      	mov	r0, fp
 81136ba:	f7fe f85f 	bl	811177c <__hi0bits>
 81136be:	016d      	lsls	r5, r5, #5
 81136c0:	f8d8 6000 	ldr.w	r6, [r8]
 81136c4:	1a2d      	subs	r5, r5, r0
 81136c6:	42b5      	cmp	r5, r6
 81136c8:	dd54      	ble.n	8113774 <__gethex+0x228>
 81136ca:	1bad      	subs	r5, r5, r6
 81136cc:	4629      	mov	r1, r5
 81136ce:	4620      	mov	r0, r4
 81136d0:	f7fe fbf3 	bl	8111eba <__any_on>
 81136d4:	4681      	mov	r9, r0
 81136d6:	b178      	cbz	r0, 81136f8 <__gethex+0x1ac>
 81136d8:	1e6b      	subs	r3, r5, #1
 81136da:	1159      	asrs	r1, r3, #5
 81136dc:	f003 021f 	and.w	r2, r3, #31
 81136e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 81136e4:	f04f 0901 	mov.w	r9, #1
 81136e8:	fa09 f202 	lsl.w	r2, r9, r2
 81136ec:	420a      	tst	r2, r1
 81136ee:	d003      	beq.n	81136f8 <__gethex+0x1ac>
 81136f0:	454b      	cmp	r3, r9
 81136f2:	dc36      	bgt.n	8113762 <__gethex+0x216>
 81136f4:	f04f 0902 	mov.w	r9, #2
 81136f8:	4629      	mov	r1, r5
 81136fa:	4620      	mov	r0, r4
 81136fc:	f7ff febf 	bl	811347e <rshift>
 8113700:	442f      	add	r7, r5
 8113702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8113706:	42bb      	cmp	r3, r7
 8113708:	da42      	bge.n	8113790 <__gethex+0x244>
 811370a:	9801      	ldr	r0, [sp, #4]
 811370c:	4621      	mov	r1, r4
 811370e:	f7fd ff83 	bl	8111618 <_Bfree>
 8113712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8113714:	2300      	movs	r3, #0
 8113716:	6013      	str	r3, [r2, #0]
 8113718:	25a3      	movs	r5, #163	@ 0xa3
 811371a:	e793      	b.n	8113644 <__gethex+0xf8>
 811371c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8113720:	2a2e      	cmp	r2, #46	@ 0x2e
 8113722:	d012      	beq.n	811374a <__gethex+0x1fe>
 8113724:	2b20      	cmp	r3, #32
 8113726:	d104      	bne.n	8113732 <__gethex+0x1e6>
 8113728:	f845 bb04 	str.w	fp, [r5], #4
 811372c:	f04f 0b00 	mov.w	fp, #0
 8113730:	465b      	mov	r3, fp
 8113732:	7830      	ldrb	r0, [r6, #0]
 8113734:	9303      	str	r3, [sp, #12]
 8113736:	f7ff fef4 	bl	8113522 <__hexdig_fun>
 811373a:	9b03      	ldr	r3, [sp, #12]
 811373c:	f000 000f 	and.w	r0, r0, #15
 8113740:	4098      	lsls	r0, r3
 8113742:	ea4b 0b00 	orr.w	fp, fp, r0
 8113746:	3304      	adds	r3, #4
 8113748:	e7ae      	b.n	81136a8 <__gethex+0x15c>
 811374a:	45b1      	cmp	r9, r6
 811374c:	d8ea      	bhi.n	8113724 <__gethex+0x1d8>
 811374e:	492b      	ldr	r1, [pc, #172]	@ (81137fc <__gethex+0x2b0>)
 8113750:	9303      	str	r3, [sp, #12]
 8113752:	2201      	movs	r2, #1
 8113754:	4630      	mov	r0, r6
 8113756:	f7ff fe29 	bl	81133ac <strncmp>
 811375a:	9b03      	ldr	r3, [sp, #12]
 811375c:	2800      	cmp	r0, #0
 811375e:	d1e1      	bne.n	8113724 <__gethex+0x1d8>
 8113760:	e7a2      	b.n	81136a8 <__gethex+0x15c>
 8113762:	1ea9      	subs	r1, r5, #2
 8113764:	4620      	mov	r0, r4
 8113766:	f7fe fba8 	bl	8111eba <__any_on>
 811376a:	2800      	cmp	r0, #0
 811376c:	d0c2      	beq.n	81136f4 <__gethex+0x1a8>
 811376e:	f04f 0903 	mov.w	r9, #3
 8113772:	e7c1      	b.n	81136f8 <__gethex+0x1ac>
 8113774:	da09      	bge.n	811378a <__gethex+0x23e>
 8113776:	1b75      	subs	r5, r6, r5
 8113778:	4621      	mov	r1, r4
 811377a:	9801      	ldr	r0, [sp, #4]
 811377c:	462a      	mov	r2, r5
 811377e:	f7fe f963 	bl	8111a48 <__lshift>
 8113782:	1b7f      	subs	r7, r7, r5
 8113784:	4604      	mov	r4, r0
 8113786:	f100 0a14 	add.w	sl, r0, #20
 811378a:	f04f 0900 	mov.w	r9, #0
 811378e:	e7b8      	b.n	8113702 <__gethex+0x1b6>
 8113790:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8113794:	42bd      	cmp	r5, r7
 8113796:	dd6f      	ble.n	8113878 <__gethex+0x32c>
 8113798:	1bed      	subs	r5, r5, r7
 811379a:	42ae      	cmp	r6, r5
 811379c:	dc34      	bgt.n	8113808 <__gethex+0x2bc>
 811379e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81137a2:	2b02      	cmp	r3, #2
 81137a4:	d022      	beq.n	81137ec <__gethex+0x2a0>
 81137a6:	2b03      	cmp	r3, #3
 81137a8:	d024      	beq.n	81137f4 <__gethex+0x2a8>
 81137aa:	2b01      	cmp	r3, #1
 81137ac:	d115      	bne.n	81137da <__gethex+0x28e>
 81137ae:	42ae      	cmp	r6, r5
 81137b0:	d113      	bne.n	81137da <__gethex+0x28e>
 81137b2:	2e01      	cmp	r6, #1
 81137b4:	d10b      	bne.n	81137ce <__gethex+0x282>
 81137b6:	9a02      	ldr	r2, [sp, #8]
 81137b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 81137bc:	6013      	str	r3, [r2, #0]
 81137be:	2301      	movs	r3, #1
 81137c0:	6123      	str	r3, [r4, #16]
 81137c2:	f8ca 3000 	str.w	r3, [sl]
 81137c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81137c8:	2562      	movs	r5, #98	@ 0x62
 81137ca:	601c      	str	r4, [r3, #0]
 81137cc:	e73a      	b.n	8113644 <__gethex+0xf8>
 81137ce:	1e71      	subs	r1, r6, #1
 81137d0:	4620      	mov	r0, r4
 81137d2:	f7fe fb72 	bl	8111eba <__any_on>
 81137d6:	2800      	cmp	r0, #0
 81137d8:	d1ed      	bne.n	81137b6 <__gethex+0x26a>
 81137da:	9801      	ldr	r0, [sp, #4]
 81137dc:	4621      	mov	r1, r4
 81137de:	f7fd ff1b 	bl	8111618 <_Bfree>
 81137e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81137e4:	2300      	movs	r3, #0
 81137e6:	6013      	str	r3, [r2, #0]
 81137e8:	2550      	movs	r5, #80	@ 0x50
 81137ea:	e72b      	b.n	8113644 <__gethex+0xf8>
 81137ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81137ee:	2b00      	cmp	r3, #0
 81137f0:	d1f3      	bne.n	81137da <__gethex+0x28e>
 81137f2:	e7e0      	b.n	81137b6 <__gethex+0x26a>
 81137f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81137f6:	2b00      	cmp	r3, #0
 81137f8:	d1dd      	bne.n	81137b6 <__gethex+0x26a>
 81137fa:	e7ee      	b.n	81137da <__gethex+0x28e>
 81137fc:	08113fb0 	.word	0x08113fb0
 8113800:	08113e49 	.word	0x08113e49
 8113804:	08114122 	.word	0x08114122
 8113808:	1e6f      	subs	r7, r5, #1
 811380a:	f1b9 0f00 	cmp.w	r9, #0
 811380e:	d130      	bne.n	8113872 <__gethex+0x326>
 8113810:	b127      	cbz	r7, 811381c <__gethex+0x2d0>
 8113812:	4639      	mov	r1, r7
 8113814:	4620      	mov	r0, r4
 8113816:	f7fe fb50 	bl	8111eba <__any_on>
 811381a:	4681      	mov	r9, r0
 811381c:	117a      	asrs	r2, r7, #5
 811381e:	2301      	movs	r3, #1
 8113820:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8113824:	f007 071f 	and.w	r7, r7, #31
 8113828:	40bb      	lsls	r3, r7
 811382a:	4213      	tst	r3, r2
 811382c:	4629      	mov	r1, r5
 811382e:	4620      	mov	r0, r4
 8113830:	bf18      	it	ne
 8113832:	f049 0902 	orrne.w	r9, r9, #2
 8113836:	f7ff fe22 	bl	811347e <rshift>
 811383a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 811383e:	1b76      	subs	r6, r6, r5
 8113840:	2502      	movs	r5, #2
 8113842:	f1b9 0f00 	cmp.w	r9, #0
 8113846:	d047      	beq.n	81138d8 <__gethex+0x38c>
 8113848:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811384c:	2b02      	cmp	r3, #2
 811384e:	d015      	beq.n	811387c <__gethex+0x330>
 8113850:	2b03      	cmp	r3, #3
 8113852:	d017      	beq.n	8113884 <__gethex+0x338>
 8113854:	2b01      	cmp	r3, #1
 8113856:	d109      	bne.n	811386c <__gethex+0x320>
 8113858:	f019 0f02 	tst.w	r9, #2
 811385c:	d006      	beq.n	811386c <__gethex+0x320>
 811385e:	f8da 3000 	ldr.w	r3, [sl]
 8113862:	ea49 0903 	orr.w	r9, r9, r3
 8113866:	f019 0f01 	tst.w	r9, #1
 811386a:	d10e      	bne.n	811388a <__gethex+0x33e>
 811386c:	f045 0510 	orr.w	r5, r5, #16
 8113870:	e032      	b.n	81138d8 <__gethex+0x38c>
 8113872:	f04f 0901 	mov.w	r9, #1
 8113876:	e7d1      	b.n	811381c <__gethex+0x2d0>
 8113878:	2501      	movs	r5, #1
 811387a:	e7e2      	b.n	8113842 <__gethex+0x2f6>
 811387c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811387e:	f1c3 0301 	rsb	r3, r3, #1
 8113882:	930f      	str	r3, [sp, #60]	@ 0x3c
 8113884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8113886:	2b00      	cmp	r3, #0
 8113888:	d0f0      	beq.n	811386c <__gethex+0x320>
 811388a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 811388e:	f104 0314 	add.w	r3, r4, #20
 8113892:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8113896:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 811389a:	f04f 0c00 	mov.w	ip, #0
 811389e:	4618      	mov	r0, r3
 81138a0:	f853 2b04 	ldr.w	r2, [r3], #4
 81138a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 81138a8:	d01b      	beq.n	81138e2 <__gethex+0x396>
 81138aa:	3201      	adds	r2, #1
 81138ac:	6002      	str	r2, [r0, #0]
 81138ae:	2d02      	cmp	r5, #2
 81138b0:	f104 0314 	add.w	r3, r4, #20
 81138b4:	d13c      	bne.n	8113930 <__gethex+0x3e4>
 81138b6:	f8d8 2000 	ldr.w	r2, [r8]
 81138ba:	3a01      	subs	r2, #1
 81138bc:	42b2      	cmp	r2, r6
 81138be:	d109      	bne.n	81138d4 <__gethex+0x388>
 81138c0:	1171      	asrs	r1, r6, #5
 81138c2:	2201      	movs	r2, #1
 81138c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 81138c8:	f006 061f 	and.w	r6, r6, #31
 81138cc:	fa02 f606 	lsl.w	r6, r2, r6
 81138d0:	421e      	tst	r6, r3
 81138d2:	d13a      	bne.n	811394a <__gethex+0x3fe>
 81138d4:	f045 0520 	orr.w	r5, r5, #32
 81138d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81138da:	601c      	str	r4, [r3, #0]
 81138dc:	9b02      	ldr	r3, [sp, #8]
 81138de:	601f      	str	r7, [r3, #0]
 81138e0:	e6b0      	b.n	8113644 <__gethex+0xf8>
 81138e2:	4299      	cmp	r1, r3
 81138e4:	f843 cc04 	str.w	ip, [r3, #-4]
 81138e8:	d8d9      	bhi.n	811389e <__gethex+0x352>
 81138ea:	68a3      	ldr	r3, [r4, #8]
 81138ec:	459b      	cmp	fp, r3
 81138ee:	db17      	blt.n	8113920 <__gethex+0x3d4>
 81138f0:	6861      	ldr	r1, [r4, #4]
 81138f2:	9801      	ldr	r0, [sp, #4]
 81138f4:	3101      	adds	r1, #1
 81138f6:	f7fd fe4f 	bl	8111598 <_Balloc>
 81138fa:	4681      	mov	r9, r0
 81138fc:	b918      	cbnz	r0, 8113906 <__gethex+0x3ba>
 81138fe:	4b1a      	ldr	r3, [pc, #104]	@ (8113968 <__gethex+0x41c>)
 8113900:	4602      	mov	r2, r0
 8113902:	2184      	movs	r1, #132	@ 0x84
 8113904:	e6c5      	b.n	8113692 <__gethex+0x146>
 8113906:	6922      	ldr	r2, [r4, #16]
 8113908:	3202      	adds	r2, #2
 811390a:	f104 010c 	add.w	r1, r4, #12
 811390e:	0092      	lsls	r2, r2, #2
 8113910:	300c      	adds	r0, #12
 8113912:	f7fc fec0 	bl	8110696 <memcpy>
 8113916:	4621      	mov	r1, r4
 8113918:	9801      	ldr	r0, [sp, #4]
 811391a:	f7fd fe7d 	bl	8111618 <_Bfree>
 811391e:	464c      	mov	r4, r9
 8113920:	6923      	ldr	r3, [r4, #16]
 8113922:	1c5a      	adds	r2, r3, #1
 8113924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8113928:	6122      	str	r2, [r4, #16]
 811392a:	2201      	movs	r2, #1
 811392c:	615a      	str	r2, [r3, #20]
 811392e:	e7be      	b.n	81138ae <__gethex+0x362>
 8113930:	6922      	ldr	r2, [r4, #16]
 8113932:	455a      	cmp	r2, fp
 8113934:	dd0b      	ble.n	811394e <__gethex+0x402>
 8113936:	2101      	movs	r1, #1
 8113938:	4620      	mov	r0, r4
 811393a:	f7ff fda0 	bl	811347e <rshift>
 811393e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8113942:	3701      	adds	r7, #1
 8113944:	42bb      	cmp	r3, r7
 8113946:	f6ff aee0 	blt.w	811370a <__gethex+0x1be>
 811394a:	2501      	movs	r5, #1
 811394c:	e7c2      	b.n	81138d4 <__gethex+0x388>
 811394e:	f016 061f 	ands.w	r6, r6, #31
 8113952:	d0fa      	beq.n	811394a <__gethex+0x3fe>
 8113954:	4453      	add	r3, sl
 8113956:	f1c6 0620 	rsb	r6, r6, #32
 811395a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 811395e:	f7fd ff0d 	bl	811177c <__hi0bits>
 8113962:	42b0      	cmp	r0, r6
 8113964:	dbe7      	blt.n	8113936 <__gethex+0x3ea>
 8113966:	e7f0      	b.n	811394a <__gethex+0x3fe>
 8113968:	08113e49 	.word	0x08113e49

0811396c <L_shift>:
 811396c:	f1c2 0208 	rsb	r2, r2, #8
 8113970:	0092      	lsls	r2, r2, #2
 8113972:	b570      	push	{r4, r5, r6, lr}
 8113974:	f1c2 0620 	rsb	r6, r2, #32
 8113978:	6843      	ldr	r3, [r0, #4]
 811397a:	6804      	ldr	r4, [r0, #0]
 811397c:	fa03 f506 	lsl.w	r5, r3, r6
 8113980:	432c      	orrs	r4, r5
 8113982:	40d3      	lsrs	r3, r2
 8113984:	6004      	str	r4, [r0, #0]
 8113986:	f840 3f04 	str.w	r3, [r0, #4]!
 811398a:	4288      	cmp	r0, r1
 811398c:	d3f4      	bcc.n	8113978 <L_shift+0xc>
 811398e:	bd70      	pop	{r4, r5, r6, pc}

08113990 <__match>:
 8113990:	b530      	push	{r4, r5, lr}
 8113992:	6803      	ldr	r3, [r0, #0]
 8113994:	3301      	adds	r3, #1
 8113996:	f811 4b01 	ldrb.w	r4, [r1], #1
 811399a:	b914      	cbnz	r4, 81139a2 <__match+0x12>
 811399c:	6003      	str	r3, [r0, #0]
 811399e:	2001      	movs	r0, #1
 81139a0:	bd30      	pop	{r4, r5, pc}
 81139a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81139a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 81139aa:	2d19      	cmp	r5, #25
 81139ac:	bf98      	it	ls
 81139ae:	3220      	addls	r2, #32
 81139b0:	42a2      	cmp	r2, r4
 81139b2:	d0f0      	beq.n	8113996 <__match+0x6>
 81139b4:	2000      	movs	r0, #0
 81139b6:	e7f3      	b.n	81139a0 <__match+0x10>

081139b8 <__hexnan>:
 81139b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81139bc:	680b      	ldr	r3, [r1, #0]
 81139be:	6801      	ldr	r1, [r0, #0]
 81139c0:	115e      	asrs	r6, r3, #5
 81139c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 81139c6:	f013 031f 	ands.w	r3, r3, #31
 81139ca:	b087      	sub	sp, #28
 81139cc:	bf18      	it	ne
 81139ce:	3604      	addne	r6, #4
 81139d0:	2500      	movs	r5, #0
 81139d2:	1f37      	subs	r7, r6, #4
 81139d4:	4682      	mov	sl, r0
 81139d6:	4690      	mov	r8, r2
 81139d8:	9301      	str	r3, [sp, #4]
 81139da:	f846 5c04 	str.w	r5, [r6, #-4]
 81139de:	46b9      	mov	r9, r7
 81139e0:	463c      	mov	r4, r7
 81139e2:	9502      	str	r5, [sp, #8]
 81139e4:	46ab      	mov	fp, r5
 81139e6:	784a      	ldrb	r2, [r1, #1]
 81139e8:	1c4b      	adds	r3, r1, #1
 81139ea:	9303      	str	r3, [sp, #12]
 81139ec:	b342      	cbz	r2, 8113a40 <__hexnan+0x88>
 81139ee:	4610      	mov	r0, r2
 81139f0:	9105      	str	r1, [sp, #20]
 81139f2:	9204      	str	r2, [sp, #16]
 81139f4:	f7ff fd95 	bl	8113522 <__hexdig_fun>
 81139f8:	2800      	cmp	r0, #0
 81139fa:	d151      	bne.n	8113aa0 <__hexnan+0xe8>
 81139fc:	9a04      	ldr	r2, [sp, #16]
 81139fe:	9905      	ldr	r1, [sp, #20]
 8113a00:	2a20      	cmp	r2, #32
 8113a02:	d818      	bhi.n	8113a36 <__hexnan+0x7e>
 8113a04:	9b02      	ldr	r3, [sp, #8]
 8113a06:	459b      	cmp	fp, r3
 8113a08:	dd13      	ble.n	8113a32 <__hexnan+0x7a>
 8113a0a:	454c      	cmp	r4, r9
 8113a0c:	d206      	bcs.n	8113a1c <__hexnan+0x64>
 8113a0e:	2d07      	cmp	r5, #7
 8113a10:	dc04      	bgt.n	8113a1c <__hexnan+0x64>
 8113a12:	462a      	mov	r2, r5
 8113a14:	4649      	mov	r1, r9
 8113a16:	4620      	mov	r0, r4
 8113a18:	f7ff ffa8 	bl	811396c <L_shift>
 8113a1c:	4544      	cmp	r4, r8
 8113a1e:	d952      	bls.n	8113ac6 <__hexnan+0x10e>
 8113a20:	2300      	movs	r3, #0
 8113a22:	f1a4 0904 	sub.w	r9, r4, #4
 8113a26:	f844 3c04 	str.w	r3, [r4, #-4]
 8113a2a:	f8cd b008 	str.w	fp, [sp, #8]
 8113a2e:	464c      	mov	r4, r9
 8113a30:	461d      	mov	r5, r3
 8113a32:	9903      	ldr	r1, [sp, #12]
 8113a34:	e7d7      	b.n	81139e6 <__hexnan+0x2e>
 8113a36:	2a29      	cmp	r2, #41	@ 0x29
 8113a38:	d157      	bne.n	8113aea <__hexnan+0x132>
 8113a3a:	3102      	adds	r1, #2
 8113a3c:	f8ca 1000 	str.w	r1, [sl]
 8113a40:	f1bb 0f00 	cmp.w	fp, #0
 8113a44:	d051      	beq.n	8113aea <__hexnan+0x132>
 8113a46:	454c      	cmp	r4, r9
 8113a48:	d206      	bcs.n	8113a58 <__hexnan+0xa0>
 8113a4a:	2d07      	cmp	r5, #7
 8113a4c:	dc04      	bgt.n	8113a58 <__hexnan+0xa0>
 8113a4e:	462a      	mov	r2, r5
 8113a50:	4649      	mov	r1, r9
 8113a52:	4620      	mov	r0, r4
 8113a54:	f7ff ff8a 	bl	811396c <L_shift>
 8113a58:	4544      	cmp	r4, r8
 8113a5a:	d936      	bls.n	8113aca <__hexnan+0x112>
 8113a5c:	f1a8 0204 	sub.w	r2, r8, #4
 8113a60:	4623      	mov	r3, r4
 8113a62:	f853 1b04 	ldr.w	r1, [r3], #4
 8113a66:	f842 1f04 	str.w	r1, [r2, #4]!
 8113a6a:	429f      	cmp	r7, r3
 8113a6c:	d2f9      	bcs.n	8113a62 <__hexnan+0xaa>
 8113a6e:	1b3b      	subs	r3, r7, r4
 8113a70:	f023 0303 	bic.w	r3, r3, #3
 8113a74:	3304      	adds	r3, #4
 8113a76:	3401      	adds	r4, #1
 8113a78:	3e03      	subs	r6, #3
 8113a7a:	42b4      	cmp	r4, r6
 8113a7c:	bf88      	it	hi
 8113a7e:	2304      	movhi	r3, #4
 8113a80:	4443      	add	r3, r8
 8113a82:	2200      	movs	r2, #0
 8113a84:	f843 2b04 	str.w	r2, [r3], #4
 8113a88:	429f      	cmp	r7, r3
 8113a8a:	d2fb      	bcs.n	8113a84 <__hexnan+0xcc>
 8113a8c:	683b      	ldr	r3, [r7, #0]
 8113a8e:	b91b      	cbnz	r3, 8113a98 <__hexnan+0xe0>
 8113a90:	4547      	cmp	r7, r8
 8113a92:	d128      	bne.n	8113ae6 <__hexnan+0x12e>
 8113a94:	2301      	movs	r3, #1
 8113a96:	603b      	str	r3, [r7, #0]
 8113a98:	2005      	movs	r0, #5
 8113a9a:	b007      	add	sp, #28
 8113a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8113aa0:	3501      	adds	r5, #1
 8113aa2:	2d08      	cmp	r5, #8
 8113aa4:	f10b 0b01 	add.w	fp, fp, #1
 8113aa8:	dd06      	ble.n	8113ab8 <__hexnan+0x100>
 8113aaa:	4544      	cmp	r4, r8
 8113aac:	d9c1      	bls.n	8113a32 <__hexnan+0x7a>
 8113aae:	2300      	movs	r3, #0
 8113ab0:	f844 3c04 	str.w	r3, [r4, #-4]
 8113ab4:	2501      	movs	r5, #1
 8113ab6:	3c04      	subs	r4, #4
 8113ab8:	6822      	ldr	r2, [r4, #0]
 8113aba:	f000 000f 	and.w	r0, r0, #15
 8113abe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8113ac2:	6020      	str	r0, [r4, #0]
 8113ac4:	e7b5      	b.n	8113a32 <__hexnan+0x7a>
 8113ac6:	2508      	movs	r5, #8
 8113ac8:	e7b3      	b.n	8113a32 <__hexnan+0x7a>
 8113aca:	9b01      	ldr	r3, [sp, #4]
 8113acc:	2b00      	cmp	r3, #0
 8113ace:	d0dd      	beq.n	8113a8c <__hexnan+0xd4>
 8113ad0:	f1c3 0320 	rsb	r3, r3, #32
 8113ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8113ad8:	40da      	lsrs	r2, r3
 8113ada:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8113ade:	4013      	ands	r3, r2
 8113ae0:	f846 3c04 	str.w	r3, [r6, #-4]
 8113ae4:	e7d2      	b.n	8113a8c <__hexnan+0xd4>
 8113ae6:	3f04      	subs	r7, #4
 8113ae8:	e7d0      	b.n	8113a8c <__hexnan+0xd4>
 8113aea:	2004      	movs	r0, #4
 8113aec:	e7d5      	b.n	8113a9a <__hexnan+0xe2>

08113aee <__ascii_mbtowc>:
 8113aee:	b082      	sub	sp, #8
 8113af0:	b901      	cbnz	r1, 8113af4 <__ascii_mbtowc+0x6>
 8113af2:	a901      	add	r1, sp, #4
 8113af4:	b142      	cbz	r2, 8113b08 <__ascii_mbtowc+0x1a>
 8113af6:	b14b      	cbz	r3, 8113b0c <__ascii_mbtowc+0x1e>
 8113af8:	7813      	ldrb	r3, [r2, #0]
 8113afa:	600b      	str	r3, [r1, #0]
 8113afc:	7812      	ldrb	r2, [r2, #0]
 8113afe:	1e10      	subs	r0, r2, #0
 8113b00:	bf18      	it	ne
 8113b02:	2001      	movne	r0, #1
 8113b04:	b002      	add	sp, #8
 8113b06:	4770      	bx	lr
 8113b08:	4610      	mov	r0, r2
 8113b0a:	e7fb      	b.n	8113b04 <__ascii_mbtowc+0x16>
 8113b0c:	f06f 0001 	mvn.w	r0, #1
 8113b10:	e7f8      	b.n	8113b04 <__ascii_mbtowc+0x16>

08113b12 <_realloc_r>:
 8113b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113b16:	4680      	mov	r8, r0
 8113b18:	4615      	mov	r5, r2
 8113b1a:	460c      	mov	r4, r1
 8113b1c:	b921      	cbnz	r1, 8113b28 <_realloc_r+0x16>
 8113b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8113b22:	4611      	mov	r1, r2
 8113b24:	f7fd bcac 	b.w	8111480 <_malloc_r>
 8113b28:	b92a      	cbnz	r2, 8113b36 <_realloc_r+0x24>
 8113b2a:	f7fd fc35 	bl	8111398 <_free_r>
 8113b2e:	2400      	movs	r4, #0
 8113b30:	4620      	mov	r0, r4
 8113b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8113b36:	f000 f86b 	bl	8113c10 <_malloc_usable_size_r>
 8113b3a:	4285      	cmp	r5, r0
 8113b3c:	4606      	mov	r6, r0
 8113b3e:	d802      	bhi.n	8113b46 <_realloc_r+0x34>
 8113b40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8113b44:	d8f4      	bhi.n	8113b30 <_realloc_r+0x1e>
 8113b46:	4629      	mov	r1, r5
 8113b48:	4640      	mov	r0, r8
 8113b4a:	f7fd fc99 	bl	8111480 <_malloc_r>
 8113b4e:	4607      	mov	r7, r0
 8113b50:	2800      	cmp	r0, #0
 8113b52:	d0ec      	beq.n	8113b2e <_realloc_r+0x1c>
 8113b54:	42b5      	cmp	r5, r6
 8113b56:	462a      	mov	r2, r5
 8113b58:	4621      	mov	r1, r4
 8113b5a:	bf28      	it	cs
 8113b5c:	4632      	movcs	r2, r6
 8113b5e:	f7fc fd9a 	bl	8110696 <memcpy>
 8113b62:	4621      	mov	r1, r4
 8113b64:	4640      	mov	r0, r8
 8113b66:	f7fd fc17 	bl	8111398 <_free_r>
 8113b6a:	463c      	mov	r4, r7
 8113b6c:	e7e0      	b.n	8113b30 <_realloc_r+0x1e>

08113b6e <__ascii_wctomb>:
 8113b6e:	4603      	mov	r3, r0
 8113b70:	4608      	mov	r0, r1
 8113b72:	b141      	cbz	r1, 8113b86 <__ascii_wctomb+0x18>
 8113b74:	2aff      	cmp	r2, #255	@ 0xff
 8113b76:	d904      	bls.n	8113b82 <__ascii_wctomb+0x14>
 8113b78:	228a      	movs	r2, #138	@ 0x8a
 8113b7a:	601a      	str	r2, [r3, #0]
 8113b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8113b80:	4770      	bx	lr
 8113b82:	700a      	strb	r2, [r1, #0]
 8113b84:	2001      	movs	r0, #1
 8113b86:	4770      	bx	lr

08113b88 <_raise_r>:
 8113b88:	291f      	cmp	r1, #31
 8113b8a:	b538      	push	{r3, r4, r5, lr}
 8113b8c:	4605      	mov	r5, r0
 8113b8e:	460c      	mov	r4, r1
 8113b90:	d904      	bls.n	8113b9c <_raise_r+0x14>
 8113b92:	2316      	movs	r3, #22
 8113b94:	6003      	str	r3, [r0, #0]
 8113b96:	f04f 30ff 	mov.w	r0, #4294967295
 8113b9a:	bd38      	pop	{r3, r4, r5, pc}
 8113b9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8113b9e:	b112      	cbz	r2, 8113ba6 <_raise_r+0x1e>
 8113ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8113ba4:	b94b      	cbnz	r3, 8113bba <_raise_r+0x32>
 8113ba6:	4628      	mov	r0, r5
 8113ba8:	f000 f830 	bl	8113c0c <_getpid_r>
 8113bac:	4622      	mov	r2, r4
 8113bae:	4601      	mov	r1, r0
 8113bb0:	4628      	mov	r0, r5
 8113bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8113bb6:	f000 b817 	b.w	8113be8 <_kill_r>
 8113bba:	2b01      	cmp	r3, #1
 8113bbc:	d00a      	beq.n	8113bd4 <_raise_r+0x4c>
 8113bbe:	1c59      	adds	r1, r3, #1
 8113bc0:	d103      	bne.n	8113bca <_raise_r+0x42>
 8113bc2:	2316      	movs	r3, #22
 8113bc4:	6003      	str	r3, [r0, #0]
 8113bc6:	2001      	movs	r0, #1
 8113bc8:	e7e7      	b.n	8113b9a <_raise_r+0x12>
 8113bca:	2100      	movs	r1, #0
 8113bcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8113bd0:	4620      	mov	r0, r4
 8113bd2:	4798      	blx	r3
 8113bd4:	2000      	movs	r0, #0
 8113bd6:	e7e0      	b.n	8113b9a <_raise_r+0x12>

08113bd8 <raise>:
 8113bd8:	4b02      	ldr	r3, [pc, #8]	@ (8113be4 <raise+0xc>)
 8113bda:	4601      	mov	r1, r0
 8113bdc:	6818      	ldr	r0, [r3, #0]
 8113bde:	f7ff bfd3 	b.w	8113b88 <_raise_r>
 8113be2:	bf00      	nop
 8113be4:	100000b0 	.word	0x100000b0

08113be8 <_kill_r>:
 8113be8:	b538      	push	{r3, r4, r5, lr}
 8113bea:	4d07      	ldr	r5, [pc, #28]	@ (8113c08 <_kill_r+0x20>)
 8113bec:	2300      	movs	r3, #0
 8113bee:	4604      	mov	r4, r0
 8113bf0:	4608      	mov	r0, r1
 8113bf2:	4611      	mov	r1, r2
 8113bf4:	602b      	str	r3, [r5, #0]
 8113bf6:	f7f0 fc17 	bl	8104428 <_kill>
 8113bfa:	1c43      	adds	r3, r0, #1
 8113bfc:	d102      	bne.n	8113c04 <_kill_r+0x1c>
 8113bfe:	682b      	ldr	r3, [r5, #0]
 8113c00:	b103      	cbz	r3, 8113c04 <_kill_r+0x1c>
 8113c02:	6023      	str	r3, [r4, #0]
 8113c04:	bd38      	pop	{r3, r4, r5, pc}
 8113c06:	bf00      	nop
 8113c08:	10008cb8 	.word	0x10008cb8

08113c0c <_getpid_r>:
 8113c0c:	f7f0 bc04 	b.w	8104418 <_getpid>

08113c10 <_malloc_usable_size_r>:
 8113c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8113c14:	1f18      	subs	r0, r3, #4
 8113c16:	2b00      	cmp	r3, #0
 8113c18:	bfbc      	itt	lt
 8113c1a:	580b      	ldrlt	r3, [r1, r0]
 8113c1c:	18c0      	addlt	r0, r0, r3
 8113c1e:	4770      	bx	lr

08113c20 <_init>:
 8113c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8113c22:	bf00      	nop
 8113c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8113c26:	bc08      	pop	{r3}
 8113c28:	469e      	mov	lr, r3
 8113c2a:	4770      	bx	lr

08113c2c <_fini>:
 8113c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8113c2e:	bf00      	nop
 8113c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8113c32:	bc08      	pop	{r3}
 8113c34:	469e      	mov	lr, r3
 8113c36:	4770      	bx	lr
